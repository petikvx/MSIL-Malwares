// Decompiled with JetBrains decompiler
// Type: Class7
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;

[StandardModule]
internal sealed class Class7
{
  public static void smethod_0(string string_0, int int_0, long long_0)
  {
    FileStream fileStream = new FileStream(string_0, FileMode.Create, FileAccess.Write);
    byte[] array = new byte[int_0 - 1 + 1];
    long num;
    do
    {
      int count = (int) Math.Min((long) array.Length, long_0 - num);
      fileStream.Write(array, 0, count);
      num += (long) count;
    }
    while (num != long_0);
    fileStream.Close();
  }

  public static GStruct3 smethod_1(string string_0)
  {
    GStruct3 gstruct3_1 = new GStruct3();
    GStruct3 gstruct3_2;
    try
    {
      FileInfo fileInfo = new FileInfo(string_0);
      FileStream stream_0 = fileInfo.OpenRead();
      gstruct3_1.string_0 = Class27.smethod_3((Stream) stream_0);
      gstruct3_1.long_0 = fileInfo.Length;
      stream_0.Close();
      gstruct3_2 = gstruct3_1;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      GStruct3 gstruct3_3;
      gstruct3_2 = gstruct3_3;
      ProjectData.ClearProjectError();
    }
    return gstruct3_2;
  }

  public static bool smethod_2(string string_0, long long_0, string string_1)
  {
    FileInfo fileInfo = new FileInfo(string_0);
    if (!fileInfo.Exists || fileInfo.Length != long_0)
      return false;
    FileStream stream_0 = fileInfo.OpenRead();
    string Left = Class27.smethod_3((Stream) stream_0);
    stream_0.Close();
    return Operators.CompareString(Left, string_1, false) == 0;
  }

  public static bool smethod_3(string string_0, long long_0, long long_1, string string_1)
  {
    FileInfo fileInfo = new FileInfo(string_0);
    if (fileInfo.Exists)
    {
      if (fileInfo.Length != long_0)
        return false;
      if (long_1 == 0L)
        return true;
      FileStream stream_0 = new FileStream(string_0, FileMode.Open, FileAccess.Read);
      string Left = Class27.smethod_4((Stream) stream_0, 5242880, long_1);
      stream_0.Close();
      return Operators.CompareString(Left, string_1, false) == 0;
    }
    if (long_1 != 0L)
      return false;
    Class7.smethod_0(string_0, 5242880, long_0);
    return true;
  }

  public static string smethod_4(string string_0, long long_0)
  {
    if (long_0 == 0L)
      return string.Empty;
    FileStream stream_0 = new FileStream(string_0, FileMode.Open, FileAccess.Read);
    string str = Class27.smethod_4((Stream) stream_0, 5242880, long_0);
    stream_0.Close();
    return str;
  }

  public static byte[] smethod_5(string string_0, long long_0, int int_0)
  {
    FileStream fileStream = new FileStream(string_0, FileMode.Open, FileAccess.Read);
    byte[] array = new byte[(int) Math.Min(fileStream.Length - long_0, (long) int_0) - 1 + 1];
    fileStream.Position = long_0;
    int offset;
    do
    {
      int count = (int) Math.Min(fileStream.Length - (long) offset, (long) array.Length);
      int num = fileStream.Read(array, offset, count);
      offset += num;
    }
    while (offset != array.Length);
    fileStream.Close();
    return array;
  }

  public static void smethod_6(string string_0, byte[] byte_0, long long_0)
  {
    FileStream fileStream = new FileStream(string_0, FileMode.Open, FileAccess.Write);
    fileStream.Position = long_0;
    fileStream.Write(byte_0, 0, byte_0.Length);
    fileStream.Close();
  }
}
