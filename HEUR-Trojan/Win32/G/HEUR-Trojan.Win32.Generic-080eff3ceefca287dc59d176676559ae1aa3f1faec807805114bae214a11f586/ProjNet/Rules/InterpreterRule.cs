// Decompiled with JetBrains decompiler
// Type: ProjNet.Rules.InterpreterRule
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;

namespace ProjNet.Rules
{
  public class InterpreterRule : Field, ExceptionRule, ProccesorAccountCollection, Worker
  {
    private double _Publisher;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public InterpreterRule(
      double key,
      string reg,
      string consumer,
      long cust2_X,
      string reference3,
      string attr4,
      string instance5)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              ManagerParamsID.NewExpression();
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_3;
            case 1:
            case 2:
              goto label_3;
            case 4:
              goto label_1;
            case 5:
              goto label_8;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        this._Publisher = key;
        num1 = 5;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector(reg, consumer, cust2_X, reference3, attr4, instance5);
        goto label_1;
      }
label_8:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionRule ManageProcess() => (ExceptionRule) new InterpreterRule(1.0, "metre", "EPSG", 9001L, "m", string.Empty, "Also known as International metre. SI standard unit.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionRule PopProcess() => (ExceptionRule) new InterpreterRule(0.3048, "foot", "EPSG", 9002L, "ft", string.Empty, string.Empty);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionRule CancelProcess() => (ExceptionRule) new InterpreterRule(0.304800609601219, "US survey foot", "EPSG", 9003L, "American foot", "ftUS", "Used in USA.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionRule AwakeProcess() => (ExceptionRule) new InterpreterRule(1852.0, "nautical mile", "EPSG", 9030L, "NM", string.Empty, string.Empty);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ExceptionRule RemoveProcess() => (ExceptionRule) new InterpreterRule(0.3047972654, "Clarke's foot", "EPSG", 9005L, "Clarke's foot", string.Empty, "Assumes Clarke's 1865 ratio of 1 British foot = 0.3047972654 French legal metres applies to the international metre. Used in older Australian, southern African & British West Indian mapping.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double LogoutState() => this._Publisher;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SetupState(double v) => this._Publisher = v;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 4;
      if (InterpreterRule.SearchDescriptor())
        goto label_7;
label_1:
      StringBuilder stringBuilder = new StringBuilder();
      int num2 = 3;
label_6:
      num1 = num2;
label_7:
      string str;
      switch (num1)
      {
        case 0:
          str = stringBuilder.ToString();
          num2 = 6;
          goto label_6;
        case 1:
        case 3:
          stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "UNIT[\"{0}\", {1}", new object[2]
          {
            (object) this.Name,
            (object) this.LogoutState()
          });
          num2 = 5;
          goto label_6;
        case 2:
        case 5:
          if (!string.IsNullOrEmpty(this.LoginState()) && this.RestartState() > 0L)
            stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
          stringBuilder.Append("]");
          goto case 0;
        case 4:
          goto label_1;
        case 6:
          return str;
        default:
          num2 = 0;
          goto label_6;
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_LinearUnit MetersPerUnit=\"{0}\">{1}</CS_LinearUnit>", new object[2]
    {
      (object) this.LogoutState(),
      (object) this.AddProcess()
    });

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object asset)
    {
      int num1 = 3;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag2 = !(asset is InterpreterRule);
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 1:
            case 2:
              goto label_4;
            case 4:
              goto label_2;
            case 5:
              goto label_9;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_9;
          }
        }
label_4:
        if (!flag2)
        {
          flag1 = (asset as InterpreterRule).LogoutState() == this.LogoutState();
          num1 = 5;
        }
        else
          break;
      }
label_2:
      flag1 = false;
label_9:
      return flag1;
    }

    internal static bool SearchDescriptor() => true;

    internal static bool PostDescriptor() => false;
  }
}
