// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteDataAdapter
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.ComponentModel;
using System.Data.Common;

namespace System.Data.SQLite
{
  [ToolboxItem("SQLite.Designer.SQLiteDataAdapterToolboxItem, SQLite.Designer, Version=1.0.37.0, Culture=neutral, PublicKeyToken=db937bc2d44ff139")]
  [Designer("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
  [DefaultEvent("RowUpdated")]
  public sealed class SQLiteDataAdapter : DbDataAdapter
  {
    private static object _updatingEventPH = new object();
    private static object _updatedEventPH = new object();

    public SQLiteDataAdapter()
    {
    }

    public SQLiteDataAdapter(SQLiteCommand cmd) => this.SelectCommand = cmd;

    public SQLiteDataAdapter(string commandText, SQLiteConnection connection) => this.SelectCommand = new SQLiteCommand(commandText, connection);

    public SQLiteDataAdapter(string commandText, string connectionString)
    {
      SQLiteConnection connection = new SQLiteConnection(connectionString);
      this.SelectCommand = new SQLiteCommand(commandText, connection);
    }

    public event EventHandler<RowUpdatingEventArgs> RowUpdating
    {
      add
      {
        EventHandler<RowUpdatingEventArgs> mcd = (EventHandler<RowUpdatingEventArgs>) this.Events[SQLiteDataAdapter._updatingEventPH];
        if (mcd != null && value.Target is DbCommandBuilder)
        {
          EventHandler<RowUpdatingEventArgs> builder = (EventHandler<RowUpdatingEventArgs>) SQLiteDataAdapter.FindBuilder((MulticastDelegate) mcd);
          if (builder != null)
            this.Events.RemoveHandler(SQLiteDataAdapter._updatingEventPH, (Delegate) builder);
        }
        this.Events.AddHandler(SQLiteDataAdapter._updatingEventPH, (Delegate) value);
      }
      remove => this.Events.RemoveHandler(SQLiteDataAdapter._updatingEventPH, (Delegate) value);
    }

    internal static Delegate FindBuilder(MulticastDelegate mcd)
    {
      if ((object) mcd != null)
      {
        Delegate[] invocationList = mcd.GetInvocationList();
        for (int index = 0; index < invocationList.Length; ++index)
        {
          if (invocationList[index].Target is DbCommandBuilder)
            return invocationList[index];
        }
      }
      return (Delegate) null;
    }

    public event EventHandler<RowUpdatedEventArgs> RowUpdated
    {
      add => this.Events.AddHandler(SQLiteDataAdapter._updatedEventPH, (Delegate) value);
      remove => this.Events.RemoveHandler(SQLiteDataAdapter._updatedEventPH, (Delegate) value);
    }

    protected override void OnRowUpdating(RowUpdatingEventArgs value)
    {
      if (!(this.Events[SQLiteDataAdapter._updatingEventPH] is EventHandler<RowUpdatingEventArgs> eventHandler))
        return;
      eventHandler((object) this, value);
    }

    protected override void OnRowUpdated(RowUpdatedEventArgs value)
    {
      if (!(this.Events[SQLiteDataAdapter._updatedEventPH] is EventHandler<RowUpdatedEventArgs> eventHandler))
        return;
      eventHandler((object) this, value);
    }

    [DefaultValue(null)]
    [Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public SQLiteCommand SelectCommand
    {
      get => (SQLiteCommand) base.SelectCommand;
      set => this.SelectCommand = (DbCommand) value;
    }

    [Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [DefaultValue(null)]
    public SQLiteCommand InsertCommand
    {
      get => (SQLiteCommand) base.InsertCommand;
      set => this.InsertCommand = (DbCommand) value;
    }

    [Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [DefaultValue(null)]
    public SQLiteCommand UpdateCommand
    {
      get => (SQLiteCommand) base.UpdateCommand;
      set => this.UpdateCommand = (DbCommand) value;
    }

    [DefaultValue(null)]
    [Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    public SQLiteCommand DeleteCommand
    {
      get => (SQLiteCommand) base.DeleteCommand;
      set => this.DeleteCommand = (DbCommand) value;
    }
  }
}
