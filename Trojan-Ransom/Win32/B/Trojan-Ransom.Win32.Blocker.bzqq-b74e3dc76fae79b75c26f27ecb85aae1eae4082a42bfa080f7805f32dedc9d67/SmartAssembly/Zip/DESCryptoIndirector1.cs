// Decompiled with JetBrains decompiler
// Type: SmartAssembly.Zip.DESCryptoIndirector1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.Reflection;
using System.Security.Cryptography;

namespace SmartAssembly.Zip
{
  public sealed class DESCryptoIndirector1 : IDisposable
  {
    private readonly Type m_DcspType;
    private readonly object m_DESCryptoServiceProvider;

    public DESCryptoIndirector1()
    {
      Assembly assembly;
      try
      {
        assembly = Assembly.Load("mscorlib");
        this.m_DcspType = assembly.GetType("System.Security.Cryptography.DESCryptoServiceProvider");
        this.m_DESCryptoServiceProvider = Activator.CreateInstance(this.m_DcspType);
      }
      catch (Exception ex)
      {
        Assembly o1 = assembly;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
        throw;
      }
    }

    public ICryptoTransform GetDESCryptoTransform(
      byte[] key,
      byte[] iv,
      bool decrypt)
    {
      object[] objArray;
      MethodInfo method;
      try
      {
        MethodInfo setMethod1 = this.m_DcspType.GetProperty("Key").GetSetMethod();
        object cryptoServiceProvider1 = this.m_DESCryptoServiceProvider;
        objArray = new object[1]{ (object) key };
        object[] parameters1 = objArray;
        setMethod1.Invoke(cryptoServiceProvider1, parameters1);
        MethodInfo setMethod2 = this.m_DcspType.GetProperty("IV").GetSetMethod();
        object cryptoServiceProvider2 = this.m_DESCryptoServiceProvider;
        objArray = new object[1]{ (object) iv };
        object[] parameters2 = objArray;
        setMethod2.Invoke(cryptoServiceProvider2, parameters2);
        method = this.m_DcspType.GetMethod(decrypt ? "CreateDecryptor" : "CreateEncryptor", new Type[0]);
        return (ICryptoTransform) method.Invoke(this.m_DESCryptoServiceProvider, new object[0]);
      }
      catch (Exception ex)
      {
        MethodInfo o1 = method;
        object[] o2 = objArray;
        byte[] o4 = key;
        byte[] o5 = iv;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o6 = (ValueType) decrypt;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    public void Clear()
    {
      try
      {
        this.m_DcspType.GetMethod(nameof (Clear)).Invoke(this.m_DESCryptoServiceProvider, new object[0]);
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    public void Dispose()
    {
      try
      {
        this.Clear();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }
  }
}
