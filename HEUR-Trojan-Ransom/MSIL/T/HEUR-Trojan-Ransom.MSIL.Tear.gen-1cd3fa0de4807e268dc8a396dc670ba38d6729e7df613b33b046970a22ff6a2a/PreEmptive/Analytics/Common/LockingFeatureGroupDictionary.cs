// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.LockingFeatureGroupDictionary
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading;

namespace PreEmptive.Analytics.Common
{
  public class LockingFeatureGroupDictionary : IFeatureGroupDictionary
  {
    public IDictionary<string, IList<FeatureGroup>> Groups;
    private object a = new object();

    public LockingFeatureGroupDictionary([Optional] IDictionary<string, IList<FeatureGroup>> groups) => this.Groups = groups ?? (IDictionary<string, IList<FeatureGroup>>) new Dictionary<string, IList<FeatureGroup>>();

    public FeatureGroup TryRemove(
      string name,
      string partitionid,
      out bool foundpartition)
    {
      int num1 = 0;
      switch (num1)
      {
        default:
          if (false)
            ;
          foundpartition = false;
          bool lockTaken1 = false;
          object a;
          FeatureGroup featureGroup1;
          try
          {
            IList<FeatureGroup> featureGroupList1;
            int num2;
            switch (0)
            {
              case 0:
label_5:
                Monitor.Enter(a = this.a, ref lockTaken1);
                featureGroupList1 = this.a(name);
                num2 = 0;
                num1 = num2;
                goto default;
              default:
                bool lockTaken2;
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      if (featureGroupList1 == null)
                      {
                        num2 = 3;
                        num1 = num2;
                        continue;
                      }
                      lockTaken2 = false;
                      num2 = 1;
                      num1 = num2;
                      continue;
                    case 1:
                      goto label_9;
                    case 2:
                      goto label_50;
                    case 3:
                      featureGroup1 = (FeatureGroup) null;
                      num2 = 2;
                      num1 = num2;
                      continue;
                    default:
                      goto label_5;
                  }
                }
label_9:
                IList<FeatureGroup> featureGroupList2;
                try
                {
                  switch (0)
                  {
                    case 0:
label_11:
                      Monitor.Enter((object) (featureGroupList2 = featureGroupList1), ref lockTaken2);
                      num2 = 5;
                      num1 = num2;
                      goto default;
                    default:
                      int index;
                      FeatureGroup featureGroup2;
                      FeatureGroup featureGroup3;
                      while (true)
                      {
                        switch (num1)
                        {
                          case 0:
                            this.Groups.Remove(name);
                            featureGroup1 = (FeatureGroup) null;
                            num2 = 7;
                            num1 = num2;
                            continue;
                          case 1:
                          case 7:
                          case 8:
                            goto label_50;
                          case 2:
                            featureGroup1 = featureGroup3;
                            num2 = 1;
                            num1 = num2;
                            continue;
                          case 3:
                            featureGroup2 = featureGroupList1[featureGroupList1.Count - 1];
                            featureGroupList1.RemoveAt(featureGroupList1.Count - 1);
                            num2 = 16;
                            num1 = num2;
                            continue;
                          case 4:
                            if (!(featureGroup3.PartitionId == partitionid))
                            {
                              --index;
                              num2 = 11;
                              num1 = num2;
                              continue;
                            }
                            num2 = 15;
                            num1 = num2;
                            continue;
                          case 5:
                            if (featureGroupList1.Count == 0)
                            {
                              num2 = 0;
                              num1 = num2;
                              continue;
                            }
                            index = featureGroupList1.Count - 1;
                            num2 = 13;
                            num1 = num2;
                            continue;
                          case 6:
                            this.Groups.Remove(name);
                            num2 = 2;
                            num1 = num2;
                            continue;
                          case 9:
                            if (index < 0)
                            {
                              num2 = 3;
                              num1 = num2;
                              continue;
                            }
                            featureGroup3 = featureGroupList1[index];
                            num2 = 4;
                            num1 = num2;
                            continue;
                          case 10:
                            this.Groups.Remove(name);
                            num2 = 12;
                            num1 = num2;
                            continue;
                          case 11:
                          case 13:
                            num2 = 9;
                            num1 = num2;
                            continue;
                          case 12:
                            featureGroup1 = featureGroup2;
                            num2 = 8;
                            num1 = num2;
                            continue;
                          case 14:
                            if (featureGroupList1.Count == 0)
                            {
                              num2 = 6;
                              num1 = num2;
                              continue;
                            }
                            goto case 2;
                          case 15:
                            foundpartition = true;
                            featureGroupList1.RemoveAt(index);
                            num2 = 14;
                            num1 = num2;
                            continue;
                          case 16:
                            if (featureGroupList1.Count == 0)
                            {
                              num2 = 10;
                              num1 = num2;
                              continue;
                            }
                            goto case 12;
                          default:
                            goto label_11;
                        }
                      }
                  }
                }
                finally
                {
                  int num3 = 0;
                  while (true)
                  {
                    int num4;
                    switch (num3)
                    {
                      case 0:
                        switch (0)
                        {
                          case 0:
                            break;
                          default:
                            continue;
                        }
                        break;
                      case 1:
                        goto label_39;
                      case 2:
                        Monitor.Exit((object) featureGroupList2);
                        num4 = 1;
                        num3 = num4;
                        continue;
                    }
                    if (lockTaken2)
                    {
                      num4 = 2;
                      num3 = num4;
                    }
                    else
                      break;
                  }
label_39:;
                }
            }
          }
          finally
          {
            int num5 = -1526;
            int num6;
            switch (-1526 == num5 ? 1 : 0)
            {
              case 0:
              case 2:
label_47:
                num5 = 2;
                num6 = num5;
                break;
              default:
                num5 = 0;
                if (num5 == 0)
                  ;
                num5 = 0;
                num6 = num5;
                break;
            }
label_45:
            while (true)
            {
              switch (num6)
              {
                case 0:
                  goto label_44;
                case 1:
                  goto label_49;
                case 2:
                  Monitor.Exit(a);
                  num5 = 1;
                  num6 = num5;
                  continue;
                default:
                  goto label_46;
              }
            }
label_44:
            switch (0)
            {
              case 0:
                break;
              default:
                goto label_45;
            }
label_46:
            if (lockTaken1)
              goto label_47;
label_49:;
          }
label_50:
          return featureGroup1;
      }
    }

    public void Add(string name, FeatureGroup adder)
    {
      if (false)
        ;
      IList<FeatureGroup> featureGroupList1 = this.b(name);
      bool lockTaken = false;
      IList<FeatureGroup> featureGroupList2;
      try
      {
        Monitor.Enter((object) (featureGroupList2 = featureGroupList1), ref lockTaken);
        featureGroupList1.Add(adder);
      }
      finally
      {
        int num1 = 3178;
        int num2 = num1;
        num1 = 3178;
        int num3 = num1;
        int num4;
        switch (num2 == num3 ? 1 : 0)
        {
          case 0:
          case 2:
label_9:
            num1 = 2;
            num4 = num1;
            break;
          default:
            num1 = 0;
            if (num1 == 0)
              ;
            num1 = 0;
            num4 = num1;
            break;
        }
label_7:
        while (true)
        {
          switch (num4)
          {
            case 0:
              goto label_6;
            case 1:
              goto label_11;
            case 2:
              Monitor.Exit((object) featureGroupList2);
              num1 = 1;
              num4 = num1;
              continue;
            default:
              goto label_8;
          }
        }
label_6:
        switch (0)
        {
          case 0:
            break;
          default:
            goto label_7;
        }
label_8:
        if (lockTaken)
          goto label_9;
label_11:;
      }
    }

    private IList<FeatureGroup> b(string A_0)
    {
      int num1 = 0;
      switch (num1)
      {
        default:
          bool lockTaken = false;
          int num2;
          IList<FeatureGroup> featureGroupList1;
          object a;
          IList<FeatureGroup> featureGroupList2;
          try
          {
            switch (0)
            {
              case 0:
label_6:
                Monitor.Enter(a = this.a, ref lockTaken);
                num2 = 1;
                num1 = num2;
                goto default;
              default:
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      goto label_2;
                    case 1:
                      if (!this.Groups.ContainsKey(A_0))
                      {
                        num2 = 2;
                        num1 = num2;
                        continue;
                      }
                      num2 = -6879;
                      int num3 = num2;
                      num2 = -6879;
                      int num4 = num2;
                      switch (num3 == num4 ? 1 : 0)
                      {
                        case 0:
                        case 2:
                          goto label_6;
                        default:
                          num2 = 0;
                          if (num2 == 0)
                            ;
                          featureGroupList1 = this.Groups[A_0];
                          num2 = 0;
                          num1 = num2;
                          continue;
                      }
                    case 2:
                      featureGroupList1 = (IList<FeatureGroup>) new List<FeatureGroup>();
                      this.Groups[A_0] = featureGroupList1;
                      featureGroupList2 = featureGroupList1;
                      num2 = 3;
                      num1 = num2;
                      continue;
                    case 3:
                      goto label_20;
                    default:
                      goto label_6;
                  }
                }
            }
          }
          finally
          {
            int num5 = 1;
            while (true)
            {
              int num6;
              switch (num5)
              {
                case 0:
                  Monitor.Exit(a);
                  num6 = 2;
                  num5 = num6;
                  continue;
                case 1:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 2:
                  goto label_19;
              }
              if (lockTaken)
              {
                num6 = 0;
                num5 = num6;
              }
              else
                break;
            }
label_19:;
          }
label_2:
          num2 = 1;
          if (num2 == 0)
            ;
          return featureGroupList1;
label_20:
          return featureGroupList2;
      }
    }

    private IList<FeatureGroup> a(string A_0)
    {
      int num1 = 0;
      switch (num1)
      {
        default:
          bool lockTaken = false;
          int num2;
          IList<FeatureGroup> group;
          object a;
          IList<FeatureGroup> featureGroupList;
          try
          {
            switch (0)
            {
              case 0:
label_6:
                Monitor.Enter(a = this.a, ref lockTaken);
                num2 = 1;
                num1 = num2;
                goto default;
              default:
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      goto label_2;
                    case 1:
                      if (!this.Groups.ContainsKey(A_0))
                      {
                        num2 = 2;
                        num1 = num2;
                        continue;
                      }
                      num2 = 25477;
                      int num3 = num2;
                      num2 = 25477;
                      int num4 = num2;
                      switch (num3 == num4 ? 1 : 0)
                      {
                        case 0:
                        case 2:
                          goto label_6;
                        default:
                          num2 = 0;
                          if (num2 == 0)
                            ;
                          group = this.Groups[A_0];
                          num2 = 0;
                          num1 = num2;
                          continue;
                      }
                    case 2:
                      featureGroupList = (IList<FeatureGroup>) null;
                      num2 = 3;
                      num1 = num2;
                      continue;
                    case 3:
                      goto label_20;
                    default:
                      goto label_6;
                  }
                }
            }
          }
          finally
          {
            int num5 = 1;
            while (true)
            {
              int num6;
              switch (num5)
              {
                case 0:
                  Monitor.Exit(a);
                  num6 = 2;
                  num5 = num6;
                  continue;
                case 1:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 2:
                  goto label_19;
              }
              if (lockTaken)
              {
                num6 = 0;
                num5 = num6;
              }
              else
                break;
            }
label_19:;
          }
label_2:
          num2 = 1;
          if (num2 == 0)
            ;
          return group;
label_20:
          return featureGroupList;
      }
    }
  }
}
