// Decompiled with JetBrains decompiler
// Type: S65.lKP
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u003229;
using \u00329J;
using \u0032p2;
using \u0032W4;
using \u0034Q1;
using \u00353N;
using \u0035VH;
using A6y;
using AWga;
using e2r;
using O13;
using Qlv;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using XnZ;

namespace S65
{
  internal sealed class lKP
  {
    internal \u0037Ro JMH;
    private bool \u0035dv;

    public lKP([In] string obj0, [In] bool obj1)
    {
      if (!string.IsNullOrEmpty(obj0))
        this.JMH = lKP.\u0032Ot(obj0);
      this.cn5(obj1);
    }

    [SpecialName]
    public bool l4E() => this.\u0035dv;

    [SpecialName]
    public void cn5([In] bool obj0) => this.\u0035dv = obj0;

    private static string zz6([In] string obj0)
    {
      string[][] strArray = new string[11][]
      {
        new string[2]{ "([^']*)\\(\\(([^']+)", "$1( ($2" },
        new string[2]{ "(.)\\)\\)", "$1) )" },
        new string[2]
        {
          "\\(([^'\\f\\n\\r\\t\\v\\x85\\p{Z}])",
          "( $1"
        },
        new string[2]{ "(\\S)\\)", "$1 )" },
        new string[2]{ "^\\)", " )" },
        new string[2]{ "(\\S)\\(", "$1 (" },
        new string[2]
        {
          "\\)([^'\\f\\n\\r\\t\\v\\x85\\p{Z}])",
          ") $1"
        },
        new string[2]{ "(=)('[^']*')", "$1 $2" },
        new string[2]{ "([^ !><])(>|<|!=|=)", "$1 $2" },
        new string[2]{ "(>|<|!=|=)([^ =])", "$1 $2" },
        new string[2]{ "/", "\\" }
      };
      string input = obj0;
      for (int index = 0; index < strArray.Length; ++index)
      {
        string pattern = lKP.sW3.\u00354N + strArray[index][0] + lKP.sW3.\u00395t;
        input = Regex.Replace(input, pattern, strArray[index][1]);
      }
      string pattern1 = "/" + lKP.sW3.\u00386u;
      return Regex.Replace(Regex.Replace(input, pattern1, "\\"), " " + lKP.sW3.\u00386u, "\u0006");
    }

    private static \u0037Ro \u0032Ot([In] string obj0)
    {
      if (obj0 == null)
        return (\u0037Ro) null;
      obj0 = lKP.zz6(obj0);
      if (obj0.IndexOf(" ") == -1)
        obj0 = "name = " + obj0;
      string[] strArray = obj0.Trim().Split(' ', '\t');
      if (strArray.Length < 3)
        throw new ArgumentException(obj0);
      \u0037Ro obj1 = (\u0037Ro) null;
      Stack<lKP.gU7> gU7Stack = new Stack<lKP.gU7>();
      Stack<\u0037Ro> objStack = new Stack<\u0037Ro>();
      gU7Stack.Push(lKP.gU7.\u0023a);
      for (int startIndex = 0; startIndex < strArray.Length; ++startIndex)
      {
        string lower = strArray[startIndex].ToLower();
        switch (\u0031CP.\u003873(lower))
        {
          case 254395046:
            if (lower == "and")
              break;
            goto default;
          case 329706515:
            if (lower == "ctime")
              goto label_37;
            else
              goto default;
          case 597743964:
            if (lower == "size")
              goto label_48;
            else
              goto default;
          case 739023492:
            if (lower == ")")
            {
              gU7Stack.Pop();
              int num = gU7Stack.Peek() == lKP.gU7.\u0023b ? (int) gU7Stack.Pop() : throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
              gU7Stack.Push(lKP.gU7.\u0023c);
              goto label_70;
            }
            else
              goto default;
          case 755801111:
            if (lower == "(")
            {
              switch (gU7Stack.Peek())
              {
                case lKP.gU7.\u0023a:
                case lKP.gU7.\u0023b:
                case lKP.gU7.\u0023d:
                  if (strArray.Length <= startIndex + 4)
                    throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
                  gU7Stack.Push(lKP.gU7.\u0023b);
                  goto label_70;
                default:
                  throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
              }
            }
            else
              goto default;
          case 1058081160:
            if (lower == "filename")
              goto label_51;
            else
              goto default;
          case 1361572173:
            if (lower == "type")
              goto label_60;
            else
              goto default;
          case 1563699588:
            if (lower == "or")
              break;
            goto default;
          case 2166136261:
            if (lower != null && lower.Length == 0)
            {
              gU7Stack.Push(lKP.gU7.\u0023e);
              goto label_70;
            }
            else
              goto default;
          case 2211460629:
            if (lower == "length")
              goto label_48;
            else
              goto default;
          case 2369371622:
            if (lower == "name")
              goto label_51;
            else
              goto default;
          case 2746858573:
            if (lower == "atime")
              goto label_37;
            else
              goto default;
          case 2888110417:
            if (lower == "mtime")
              goto label_37;
            else
              goto default;
          case 3429620606:
            if (lower == "xor")
              break;
            goto default;
          case 3791641492:
            if (lower == "attributes")
              goto label_60;
            else
              goto default;
          case 4191246291:
            if (lower == "attrs")
              goto label_60;
            else
              goto default;
          default:
            throw new ArgumentException("'" + strArray[startIndex] + "'");
        }
        lKP.gU7 gU7_1 = gU7Stack.Peek();
        if (gU7_1 != lKP.gU7.\u0023c)
          throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        if (strArray.Length <= startIndex + 3)
          throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        IK2nd ik2nd = (IK2nd) Enum.Parse(typeof (IK2nd), strArray[startIndex].ToUpper(), true);
        uH6 uH6_1 = new uH6();
        uH6_1.\u0031b9 = obj1;
        uH6_1.E68((\u0037Ro) null);
        uH6_1.xXP = ik2nd;
        obj1 = (\u0037Ro) uH6_1;
        gU7Stack.Push(gU7_1);
        gU7Stack.Push(lKP.gU7.\u0023d);
        objStack.Push(obj1);
        goto label_70;
label_37:
        if (strArray.Length <= startIndex + 2)
          throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        DateTime exact;
        try
        {
          exact = DateTime.ParseExact(strArray[startIndex + 2], "yyyy-MM-dd-HH:mm:ss", (IFormatProvider) null);
        }
        catch (FormatException ex1)
        {
          try
          {
            exact = DateTime.ParseExact(strArray[startIndex + 2], "yyyy/MM/dd-HH:mm:ss", (IFormatProvider) null);
          }
          catch (FormatException ex2)
          {
            try
            {
              exact = DateTime.ParseExact(strArray[startIndex + 2], "yyyy/MM/dd", (IFormatProvider) null);
            }
            catch (FormatException ex3)
            {
              try
              {
                exact = DateTime.ParseExact(strArray[startIndex + 2], "MM/dd/yyyy", (IFormatProvider) null);
              }
              catch (FormatException ex4)
              {
                exact = DateTime.ParseExact(strArray[startIndex + 2], "yyyy-MM-dd", (IFormatProvider) null);
              }
            }
          }
        }
        DateTime universalTime = DateTime.SpecifyKind(exact, DateTimeKind.Local).ToUniversalTime();
        obj1 = (\u0037Ro) new \u0035e4()
        {
          E36 = (Mnhej) Enum.Parse(typeof (Mnhej), strArray[startIndex], true),
          \u003651 = (y2w) \u0039w4.\u0034s4(typeof (y2w), strArray[startIndex + 1]),
          \u0033eJ = universalTime
        };
        startIndex += 2;
        gU7Stack.Push(lKP.gU7.\u0023c);
        goto label_70;
label_48:
        if (strArray.Length <= startIndex + 2)
          throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        string str1 = strArray[startIndex + 2];
        long num1 = !str1.ToUpper().EndsWith("K") ? (!str1.ToUpper().EndsWith("KB") ? (!str1.ToUpper().EndsWith("M") ? (!str1.ToUpper().EndsWith("MB") ? (!str1.ToUpper().EndsWith("G") ? (!str1.ToUpper().EndsWith("GB") ? long.Parse(strArray[startIndex + 2]) : long.Parse(str1.Substring(0, str1.Length - 2)) * 1024L * 1024L * 1024L) : long.Parse(str1.Substring(0, str1.Length - 1)) * 1024L * 1024L * 1024L) : long.Parse(str1.Substring(0, str1.Length - 2)) * 1024L * 1024L) : long.Parse(str1.Substring(0, str1.Length - 1)) * 1024L * 1024L) : long.Parse(str1.Substring(0, str1.Length - 2)) * 1024L) : long.Parse(str1.Substring(0, str1.Length - 1)) * 1024L;
        obj1 = (\u0037Ro) new ILT()
        {
          \u00332s = num1,
          \u003351 = (y2w) \u0039w4.\u0034s4(typeof (y2w), strArray[startIndex + 1])
        };
        startIndex += 2;
        gU7Stack.Push(lKP.gU7.\u0023c);
        goto label_70;
label_51:
        if (strArray.Length <= startIndex + 2)
          throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        y2w y2w1 = (y2w) \u0039w4.\u0034s4(typeof (y2w), strArray[startIndex + 1]);
        switch (y2w1)
        {
          case y2w.EqualTo:
          case y2w.NotEqualTo:
            string str2 = strArray[startIndex + 2];
            if (str2.StartsWith("'") && str2.EndsWith("'"))
              str2 = str2.Substring(1, str2.Length - 2).Replace("\u0006", " ");
            if (Path.DirectorySeparatorChar == '/')
              str2 = str2.Replace('\\', Path.DirectorySeparatorChar);
            bgy bgy = new bgy();
            bgy.bU1(str2);
            bgy.fKa = y2w1;
            obj1 = (\u0037Ro) bgy;
            startIndex += 2;
            gU7Stack.Push(lKP.gU7.\u0023c);
            goto label_70;
          default:
            throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        }
label_60:
        if (strArray.Length <= startIndex + 2)
          throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        y2w y2w2 = (y2w) \u0039w4.\u0034s4(typeof (y2w), strArray[startIndex + 1]);
        switch (y2w2)
        {
          case y2w.EqualTo:
          case y2w.NotEqualTo:
            \u0037Ro obj2;
            if (!(lower == "type"))
            {
              ZM4 zm4 = new ZM4();
              zm4.u1T(strArray[startIndex + 2]);
              zm4.\u0033xh = y2w2;
              obj2 = (\u0037Ro) zm4;
            }
            else
            {
              obj2 = (\u0037Ro) new w54();
              ((w54) obj2).\u0038j9(strArray[startIndex + 2]);
              ((w54) obj2).\u003369 = y2w2;
            }
            obj1 = obj2;
            startIndex += 2;
            gU7Stack.Push(lKP.gU7.\u0023c);
            break;
          default:
            throw new ArgumentException(string.Join(" ", strArray, startIndex, strArray.Length - startIndex));
        }
label_70:
        lKP.gU7 gU7_2 = gU7Stack.Peek();
        if (gU7_2 == lKP.gU7.\u0023c)
        {
          int num2 = (int) gU7Stack.Pop();
          if (gU7Stack.Peek() == lKP.gU7.\u0023d)
          {
            while (gU7Stack.Peek() == lKP.gU7.\u0023d)
            {
              uH6 uH6_2 = objStack.Pop() as uH6;
              uH6_2.E68(obj1);
              obj1 = (\u0037Ro) uH6_2;
              int num3 = (int) gU7Stack.Pop();
              gU7_2 = gU7Stack.Pop();
              if (gU7_2 != lKP.gU7.\u0023c)
                throw new ArgumentException("??");
            }
          }
          else
            gU7Stack.Push(lKP.gU7.\u0023c);
        }
        if (gU7_2 == lKP.gU7.\u0023e)
        {
          int num4 = (int) gU7Stack.Pop();
        }
      }
      return obj1;
    }

    string object.Qo2() => "FileSelector(" + this.JMH.ToString() + ")";

    private bool \u00341M([In] string obj0) => this.JMH.fKy(obj0);

    public ReadOnlyCollection<string> xV4([In] string obj0, [In] bool obj1)
    {
      if (this.JMH == null)
        throw new ArgumentException("SelectionCriteria has not been set");
      List<string> stringList = new List<string>();
      try
      {
        if (Directory.Exists(obj0))
        {
          foreach (string file in Directory.GetFiles(obj0))
          {
            if (this.\u00341M(file))
              stringList.Add(file);
          }
          if (obj1)
          {
            foreach (string directory in Directory.GetDirectories(obj0))
            {
              if (this.l4E() || (File.GetAttributes(directory) & FileAttributes.ReparsePoint) == (FileAttributes) 0)
              {
                if (this.\u00341M(directory))
                  stringList.Add(directory);
                stringList.AddRange((IEnumerable<string>) this.xV4(directory, obj1));
              }
            }
          }
        }
      }
      catch (UnauthorizedAccessException ex)
      {
      }
      catch (IOException ex)
      {
      }
      return stringList.AsReadOnly();
    }

    private bool smM([In] q14 obj0) => this.JMH.m3y(obj0);

    public ICollection<q14> c5z([In] \u0032f3 obj0)
    {
      if (obj0 == null)
        throw new ArgumentNullException("zip");
      List<q14> q14List = new List<q14>();
      using (IEnumerator<q14> enumerator = obj0.\u0023O())
      {
        while (enumerator.MoveNext())
        {
          q14 current = enumerator.Current;
          if (this.smM(current))
            q14List.Add(current);
        }
      }
      return (ICollection<q14>) q14List;
    }

    public ICollection<q14> xm4([In] \u0032f3 obj0, [In] string obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException("zip");
      List<q14> q14List = new List<q14>();
      string str = obj1 == null ? (string) null : obj1.Replace("/", "\\");
      if (str != null)
      {
        while (str.EndsWith("\\"))
          str = str.Substring(0, str.Length - 1);
      }
      using (IEnumerator<q14> enumerator = obj0.\u0023O())
      {
        while (enumerator.MoveNext())
        {
          q14 current = enumerator.Current;
          if ((obj1 == null || Path.GetDirectoryName(current.L83) == obj1 || Path.GetDirectoryName(current.L83) == str) && this.smM(current))
            q14List.Add(current);
        }
      }
      return (ICollection<q14>) q14List;
    }

    private enum gU7
    {
      \u0023a,
      \u0023b,
      \u0023c,
      \u0023d,
      \u0023e,
    }

    private static class sW3
    {
      public static readonly string U66 = "(?<=(?:[^']*'[^']*')*'[^']*)";
      public static readonly string \u00386u = "(?=[^']*'(?:[^']*'[^']*')*[^']*$)";
      public static readonly string \u00354N = "(?<=(?:[^']*'[^']*')*[^']*)";
      public static readonly string \u00395t = "(?=(?:[^']*'[^']*')*[^']*$)";
    }
  }
}
