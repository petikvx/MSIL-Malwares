// Decompiled with JetBrains decompiler
// Type: ns7.Class27
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: E391E61C-54CD-42F7-87F5-F1422ADC71CE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-59e442191cd686b83bd02e24c30b2cd3b7c14c64e8dea6ba77330d9bb8c0d75c.exe

using ns2;
using ns4;
using ns5;
using ns6;
using System;
using System.Management;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace ns7
{
  internal sealed class Class27 : IDisposable
  {
    private Class27.Class28 class28_0;
    private Delegate1 delegate1_0;
    private bool bool_0;

    public Class27()
    {
      this.class28_0 = (Class27.Class28) null;
      this.delegate1_0 = (Delegate1) null;
      this.bool_0 = false;
    }

    void object.Finalize()
    {
      try
      {
        this.System\u002EIDisposable\u002EDispose();
      }
      finally
      {
        // ISSUE: explicit finalizer call
        this.Finalize();
      }
    }

    void IDisposable.Dispose()
    {
      if (this.bool_0)
        return;
      if (this.class28_0 != null)
      {
        this.class28_0.method_1(new Delegate1(this.method_2));
        this.class28_0.System\u002EIDisposable\u002EDispose();
        this.class28_0 = (Class27.Class28) null;
      }
      this.bool_0 = true;
      GC.SuppressFinalize((object) this);
    }

    [SpecialName]
    public void method_0(Delegate1 delegate1_1)
    {
      if (this.class28_0 == null)
      {
        this.class28_0 = new Class27.Class28();
        this.class28_0.method_0(new Delegate1(this.method_2));
      }
      this.delegate1_0 += delegate1_1;
    }

    public Class11 method_1()
    {
      Class11 class11 = new Class11();
      foreach (ManagementObject managementObject1 in new ManagementObjectSearcher("select DeviceID, Model from Win32_DiskDrive where InterfaceType='USB'").Get())
      {
        ManagementObject managementObject2 = Class35.smethod_0(new ManagementObjectSearcher(string.Format("associators of {{Win32_DiskDrive.DeviceID='{0}'}} where AssocClass = Win32_DiskDriveToDiskPartition", managementObject1["DeviceID"])));
        if (managementObject2 != null)
        {
          ManagementObject managementObject3 = Class35.smethod_0(new ManagementObjectSearcher(string.Format("associators of {{Win32_DiskPartition.DeviceID='{0}'}} where AssocClass = Win32_LogicalDiskToPartition", managementObject2["DeviceID"])));
          if (managementObject3 != null)
          {
            ManagementObject managementObject4 = Class35.smethod_0(new ManagementObjectSearcher(string.Format("select FreeSpace, Size, VolumeName from Win32_LogicalDisk where Name='{0}'", managementObject3["Name"])));
            Class12 class12 = new Class12(managementObject3["Name"].ToString());
            class12.method_3(managementObject1["Model"].ToString());
            class12.method_9(managementObject4["VolumeName"].ToString());
            class12.method_1((ulong) managementObject4["FreeSpace"]);
            class12.method_7((ulong) managementObject4["Size"]);
            class11.Add(class12);
          }
        }
      }
      return class11;
    }

    private void method_2(EventArgs0 eventArgs0_0)
    {
      if (this.delegate1_0 == null)
        return;
      eventArgs0_0.method_0();
      if (eventArgs0_0.method_2() == Enum1.const_0 && eventArgs0_0.method_0().method_4()[0] != '?')
      {
        Class27.Delegate0 delegate0 = new Class27.Delegate0(this.method_3);
        IAsyncResult result = delegate0.BeginInvoke(eventArgs0_0.method_0(), (AsyncCallback) null, (object) null);
        delegate0.EndInvoke(result);
      }
      this.delegate1_0(eventArgs0_0);
    }

    private void method_3(Class12 class12_0)
    {
      ManagementObject managementObject1 = Class35.smethod_0(new ManagementObjectSearcher(string.Format("associators of {{Win32_LogicalDisk.DeviceID='{0}'}} where AssocClass = Win32_LogicalDiskToPartition", (object) class12_0.method_4())));
      if (managementObject1 == null)
        return;
      ManagementObject managementObject2 = Class35.smethod_0(new ManagementObjectSearcher(string.Format("associators of {{Win32_DiskPartition.DeviceID='{0}'}}  where resultClass = Win32_DiskDrive", managementObject1["DeviceID"])));
      if (managementObject2 != null)
      {
        object obj = managementObject2["Model"];
        if (obj != null)
          class12_0.method_3(obj.ToString());
      }
      ManagementObject managementObject3 = Class35.smethod_0(new ManagementObjectSearcher(string.Format("select FreeSpace, Size, VolumeName from Win32_LogicalDisk where Name='{0}'", (object) class12_0.method_4())));
      if (managementObject3 == null)
        return;
      object obj1 = managementObject3["VolumeName"];
      if (obj1 != null)
        class12_0.method_9(obj1.ToString());
      class12_0.method_1((ulong) managementObject3["FreeSpace"]);
      class12_0.method_7((ulong) managementObject3["Size"]);
    }

    private sealed class Class28 : NativeWindow, IDisposable
    {
      private Delegate1 delegate1_0;

      public Class28() => this.CreateHandle(new CreateParams());

      void IDisposable.Dispose()
      {
        this.DestroyHandle();
        GC.SuppressFinalize((object) this);
      }

      [SpecialName]
      public void method_0(Delegate1 delegate1_1)
      {
        Delegate1 delegate1 = this.delegate1_0;
        Delegate1 comparand;
        do
        {
          comparand = delegate1;
          delegate1 = Interlocked.CompareExchange<Delegate1>(ref this.delegate1_0, comparand + delegate1_1, comparand);
        }
        while (delegate1 != comparand);
      }

      [SpecialName]
      public void method_1(Delegate1 delegate1_1)
      {
        Delegate1 delegate1 = this.delegate1_0;
        Delegate1 comparand;
        do
        {
          comparand = delegate1;
          delegate1 = Interlocked.CompareExchange<Delegate1>(ref this.delegate1_0, comparand - delegate1_1, comparand);
        }
        while (delegate1 != comparand);
      }

      void NativeWindow.WndProc(ref Message m)
      {
        // ISSUE: explicit non-virtual call
        __nonvirtual (((NativeWindow) this).WndProc(ref m));
        if (m.Msg != 537 || !(m.LParam != IntPtr.Zero))
          return;
        Class27.Class28.Struct0 structure = (Class27.Class28.Struct0) Marshal.PtrToStructure(m.LParam, typeof (Class27.Class28.Struct0));
        if (structure.int_1 != 2)
          return;
        switch (m.WParam.ToInt32())
        {
          case 32768:
            this.method_2(Enum1.const_0, structure);
            break;
          case 32772:
            this.method_2(Enum1.const_2, structure);
            break;
        }
      }

      private void method_2(Enum1 enum1_0, Class27.Class28.Struct0 struct0_0)
      {
        string string_3 = this.method_3(struct0_0.int_3);
        if (this.delegate1_0 == null)
          return;
        Class12 class12_1 = new Class12(string_3);
        this.delegate1_0(new EventArgs0(enum1_0, class12_1));
      }

      private string method_3(int int_0)
      {
        int num;
        for (num = 0; num < 26 && (int_0 & 1) == 0; ++num)
          int_0 >>= 1;
        return num < 26 ? string.Format("{0}:", (object) Convert.ToChar(Convert.ToInt32('A') + num)) : "?:";
      }

      public struct Struct0
      {
        public int int_0;
        public int int_1;
        public int int_2;
        public int int_3;
        public short short_0;
      }
    }

    private delegate void Delegate0(Class12 disk);
  }
}
