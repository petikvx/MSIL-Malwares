// Decompiled with JetBrains decompiler
// Type: DirectX.Capture.PropertyPageCollection
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan.MSIL.KillAV.ao-bc0c15043485dde908fef22878901941295e9096cd86dde81e043e0a083e1c6c.exe

using DShowNET;
using System;
using System.Collections;
using System.Runtime.InteropServices;

namespace DirectX.Capture
{
  public class PropertyPageCollection : CollectionBase, IDisposable
  {
    internal PropertyPageCollection() => this.InnerList.Capacity = 1;

    internal PropertyPageCollection(
      ICaptureGraphBuilder2 graphBuilder,
      IBaseFilter videoDeviceFilter,
      IBaseFilter audioDeviceFilter,
      IBaseFilter videoCompressorFilter,
      IBaseFilter audioCompressorFilter,
      SourceCollection videoSources,
      SourceCollection audioSources)
    {
      this.addFromGraph(graphBuilder, videoDeviceFilter, audioDeviceFilter, videoCompressorFilter, audioCompressorFilter, videoSources, audioSources);
    }

    ~PropertyPageCollection() => this.Dispose();

    public new void Clear()
    {
      for (int index = 0; index < this.InnerList.Count; ++index)
        this[index].Dispose();
      this.InnerList.Clear();
    }

    public void Dispose()
    {
      this.Clear();
      this.InnerList.Capacity = 1;
    }

    public PropertyPage this[int index] => (PropertyPage) this.InnerList[index];

    protected void addFromGraph(
      ICaptureGraphBuilder2 graphBuilder,
      IBaseFilter videoDeviceFilter,
      IBaseFilter audioDeviceFilter,
      IBaseFilter videoCompressorFilter,
      IBaseFilter audioCompressorFilter,
      SourceCollection videoSources,
      SourceCollection audioSources)
    {
      object ppint = (object) null;
      this.addIfSupported((object) videoDeviceFilter, "Video Capture Device");
      Guid capture1 = PinCategory.Capture;
      Guid interleaved = MediaType.Interleaved;
      Guid guid = typeof (IAMStreamConfig).GUID;
      if (graphBuilder.FindInterface(ref capture1, ref interleaved, videoDeviceFilter, ref guid, out ppint) != 0)
      {
        Guid video = MediaType.Video;
        if (graphBuilder.FindInterface(ref capture1, ref video, videoDeviceFilter, ref guid, out ppint) != 0)
          ppint = (object) null;
      }
      this.addIfSupported(ppint, "Video Capture Pin");
      Guid preview1 = PinCategory.Preview;
      Guid pType = MediaType.Interleaved;
      guid = typeof (IAMStreamConfig).GUID;
      if (graphBuilder.FindInterface(ref preview1, ref pType, videoDeviceFilter, ref guid, out ppint) != 0)
      {
        pType = MediaType.Video;
        if (graphBuilder.FindInterface(ref preview1, ref pType, videoDeviceFilter, ref guid, out ppint) != 0)
          ppint = (object) null;
      }
      this.addIfSupported(ppint, "Video Preview Pin");
      ArrayList arrayList = new ArrayList();
      int num = 1;
      for (int index = 0; index < videoSources.Count; ++index)
      {
        if (videoSources[index] is CrossbarSource videoSource && arrayList.IndexOf((object) videoSource.Crossbar) < 0)
        {
          arrayList.Add((object) videoSource.Crossbar);
          if (this.addIfSupported((object) videoSource.Crossbar, "Video Crossbar " + (num == 1 ? "" : num.ToString())))
            ++num;
        }
      }
      arrayList.Clear();
      this.addIfSupported((object) videoCompressorFilter, "Video Compressor");
      Guid capture2 = PinCategory.Capture;
      pType = MediaType.Interleaved;
      guid = typeof (IAMTVTuner).GUID;
      if (graphBuilder.FindInterface(ref capture2, ref pType, videoDeviceFilter, ref guid, out ppint) != 0)
      {
        pType = MediaType.Video;
        if (graphBuilder.FindInterface(ref capture2, ref pType, videoDeviceFilter, ref guid, out ppint) != 0)
          ppint = (object) null;
      }
      this.addIfSupported(ppint, "TV Tuner");
      if (videoCompressorFilter is IAMVfwCompressDialogs compressDialogs)
        this.InnerList.Add((object) new VfwCompressorPropertyPage("Video Compressor", compressDialogs));
      this.addIfSupported((object) audioDeviceFilter, "Audio Capture Device");
      Guid capture3 = PinCategory.Capture;
      pType = MediaType.Audio;
      guid = typeof (IAMStreamConfig).GUID;
      if (graphBuilder.FindInterface(ref capture3, ref pType, audioDeviceFilter, ref guid, out ppint) != 0)
        ppint = (object) null;
      this.addIfSupported(ppint, "Audio Capture Pin");
      Guid preview2 = PinCategory.Preview;
      pType = MediaType.Audio;
      guid = typeof (IAMStreamConfig).GUID;
      if (graphBuilder.FindInterface(ref preview2, ref pType, audioDeviceFilter, ref guid, out ppint) != 0)
        ppint = (object) null;
      this.addIfSupported(ppint, "Audio Preview Pin");
      num = 1;
      for (int index = 0; index < audioSources.Count; ++index)
      {
        if (audioSources[index] is CrossbarSource audioSource && arrayList.IndexOf((object) audioSource.Crossbar) < 0)
        {
          arrayList.Add((object) audioSource.Crossbar);
          if (this.addIfSupported((object) audioSource.Crossbar, "Audio Crossbar " + (num == 1 ? "" : num.ToString())))
            ++num;
        }
      }
      arrayList.Clear();
      this.addIfSupported((object) audioCompressorFilter, "Audio Compressor");
    }

    protected bool addIfSupported(object o, string name)
    {
      specifyPropertyPages = (ISpecifyPropertyPages) null;
      DsCAUUID pPages = new DsCAUUID();
      bool flag = false;
      try
      {
        if (o is ISpecifyPropertyPages specifyPropertyPages)
        {
          if (specifyPropertyPages.GetPages(out pPages) != 0 || pPages.cElems <= 0)
            specifyPropertyPages = (ISpecifyPropertyPages) null;
        }
      }
      finally
      {
        if (pPages.pElems != IntPtr.Zero)
          Marshal.FreeCoTaskMem(pPages.pElems);
      }
      if (specifyPropertyPages != null)
      {
        this.InnerList.Add((object) new DirectShowPropertyPage(name, specifyPropertyPages));
        flag = true;
      }
      return flag;
    }
  }
}
