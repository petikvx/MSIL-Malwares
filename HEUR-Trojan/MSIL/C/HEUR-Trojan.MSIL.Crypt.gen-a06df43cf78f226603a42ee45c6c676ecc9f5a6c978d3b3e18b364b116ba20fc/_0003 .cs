// Decompiled with JetBrains decompiler
// Type:  
// Assembly: MutexAccessR, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DA13C32E-33A8-4023-B103-9D3C73114D71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-a06df43cf78f226603a42ee45c6c676ecc9f5a6c978d3b3e18b364b116ba20fc.exe

using Core.Infrastructure.Logging;
using DomainObjects;
using Repository;
using System;
using System.Linq;
using System.Linq.Expressions;

public sealed class \u0003\u2009 : \u0003\u2008<ISet, \u000F\u2006>, \u000E\u2008
{
  private LogWriter \u0002 = new LogWriter();

  public \u0003\u2009(\u0005\u2008 _param1)
    : base(_param1)
  {
  }

  public \u0003\u2009(IDatabaseFactory _param1)
    : base(_param1)
  {
  }

  private IQueryable<ISet> \u0002() => base.\u0002().\u0005\u2008\u2004\u200A\u2003\u2000\u0002().Where<ISet>((Expression<Func<ISet, bool>>) (set => set.\u000E\u2006\u2004\u200A\u2003\u2000a == false));

  public IQueryable<ISet> \u000E\u2008\u2004\u200A\u2003\u2000\u0002() => (IQueryable<ISet>) this.\u0002().OrderBy<ISet, Guid>((Expression<Func<ISet, Guid>>) (set => set.SetId));

  public ISet \u000E\u2008\u2004\u200A\u2003\u2000\u0002(Guid _param1)
  {
    \u0003\u2009.\u0003 obj = new \u0003\u2009.\u0003();
    obj.a = _param1;
    return this.\u0002().SingleOrDefault<ISet>((Expression<Func<ISet, bool>>) (set => set.SetId == obj.a));
  }

  public IQueryable<ISet> \u000E\u2008\u2004\u200A\u2003\u2000\u0002(Guid _param1)
  {
    \u0003\u2009.\u0005 obj = new \u0003\u2009.\u0005();
    obj.a = _param1;
    return (IQueryable<ISet>) this.\u0002().Where<ISet>((Expression<Func<ISet, bool>>) (set => set.ShowId == (Guid?) obj.a)).OrderBy<ISet, short?>((Expression<Func<ISet, short?>>) (set => set.SetNumber));
  }

  public override void \u0002\u2009\u2004\u200A\u2003\u2000\u0002(ISet _param1)
  {
    \u0003\u2009.\u0008 obj = new \u0003\u2009.\u0008();
    obj.a = _param1;
    \u0008\u2002.\u0002.\u0002((object) obj.a, \u0008\u200A.\u0002(-1494139816));
    obj.a.set_CreatedDate(DateTime.Now);
    if (this.\u0002().Any<ISet>((Expression<Func<ISet, bool>>) (set => set.SetId == obj.a.SetId)))
    {
      this.\u0002.WriteLine(\u0008\u200A.\u0002(-1494139783).\u0002(new object[1]
      {
        (object) obj.a.SetId
      }));
      throw new \u0006\u2001(\u0008\u200A.\u0002(-1494139783).\u0002(new object[1]
      {
        (object) obj.a.SetId
      }));
    }
    base.\u0002\u2009\u2004\u200A\u2003\u2000\u0002(obj.a);
  }

  public override void \u0002\u2009\u2004\u200A\u2003\u2000\u0003(ISet _param1)
  {
    \u0008\u2002.\u0002.\u0002((object) _param1, \u0008\u200A.\u0002(-1494139816));
    base.\u0002\u2009\u2004\u200A\u2003\u2000\u0003(_param1);
  }

  [Serializable]
  private sealed class \u0002
  {
    public static readonly \u0003\u2009.\u0002 \u0002 = new \u0003\u2009.\u0002();
  }

  private sealed class \u0003
  {
    public Guid a;
  }

  private sealed class \u0005
  {
    public Guid a;
  }

  private sealed class \u0008
  {
    public ISet a;
  }
}
