// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSHScrollBar
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("Scroll")]
  internal class NSHScrollBar : Control
  {
    private int _Minimum;
    private int _Maximum;
    private int _Value;
    private int _SmallChange;
    private int _LargeChange;
    private int ButtonSize;
    private int ThumbSize;
    private Rectangle LSA;
    private Rectangle RSA;
    private Rectangle Shaft;
    private Rectangle Thumb;
    private bool ShowThumb;
    private bool ThumbDown;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private GraphicsPath GP3;
    private GraphicsPath GP4;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private Pen P4;
    private SolidBrush B1;
    private SolidBrush B2;
    private int I1;

    public event NSHScrollBar.ScrollEventHandler Scroll;

    public int Minimum
    {
      get => this._Minimum;
      set
      {
        this._Minimum = value >= 0 ? value : throw new Exception("Property value is not valid.");
        if (value > this._Value)
          this._Value = value;
        if (value > this._Maximum)
          this._Maximum = value;
        this.InvalidateLayout();
      }
    }

    public int Maximum
    {
      get => this._Maximum;
      set
      {
        this._Maximum = value >= 0 ? value : throw new Exception("Property value is not valid.");
        if (value < this._Value)
          this._Value = value;
        if (value < this._Minimum)
          this._Minimum = value;
        this.InvalidateLayout();
      }
    }

    public int Value
    {
      get => !this.ShowThumb ? this._Minimum : this._Value;
      set
      {
        if (value == this._Value)
          return;
        if (value > this._Maximum || value < this._Minimum)
          throw new Exception("Property value is not valid.");
        this._Value = value;
        this.InvalidatePosition();
        NSHScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
        if (scrollEvent == null)
          return;
        scrollEvent((object) this);
      }
    }

    public int SmallChange
    {
      get => this._SmallChange;
      set => this._SmallChange = value >= 1 ? value : throw new Exception("Property value is not valid.");
    }

    public int LargeChange
    {
      get => this._LargeChange;
      set => this._LargeChange = value >= 1 ? value : throw new Exception("Property value is not valid.");
    }

    public NSHScrollBar()
    {
      this._Maximum = 100;
      this._SmallChange = 1;
      this._LargeChange = 10;
      this.ButtonSize = 16;
      this.ThumbSize = 24;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.Height = 18;
      this.B1 = new SolidBrush(Color.FromArgb(55, 55, 55));
      this.B2 = new SolidBrush(Color.FromArgb(24, 24, 24));
      this.P1 = new Pen(Color.FromArgb(24, 24, 24));
      this.P2 = new Pen(Color.FromArgb(65, 65, 65));
      this.P3 = new Pen(Color.FromArgb(55, 55, 55));
      this.P4 = new Pen(Color.FromArgb(40, 40, 40));
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.Clear(this.BackColor);
      this.GP1 = this.DrawArrow(6, 4, false);
      this.GP2 = this.DrawArrow(7, 5, false);
      ThemeModule.G.FillPath((Brush) this.B1, this.GP2);
      ThemeModule.G.FillPath((Brush) this.B2, this.GP1);
      this.GP3 = this.DrawArrow(checked (this.Width - 11), 4, true);
      this.GP4 = this.DrawArrow(checked (this.Width - 10), 5, true);
      ThemeModule.G.FillPath((Brush) this.B1, this.GP4);
      ThemeModule.G.FillPath((Brush) this.B2, this.GP3);
      if (this.ShowThumb)
      {
        ThemeModule.G.FillRectangle((Brush) this.B1, this.Thumb);
        ThemeModule.G.DrawRectangle(this.P1, this.Thumb);
        ThemeModule.G.DrawRectangle(this.P2, checked (this.Thumb.X + 1), checked (this.Thumb.Y + 1), checked (this.Thumb.Width - 2), checked (this.Thumb.Height - 2));
        int num1 = checked (this.Thumb.X + unchecked (this.Thumb.Width / 2) - 3);
        int num2 = 0;
        do
        {
          int num3 = checked (num1 + num2 * 3);
          ThemeModule.G.DrawLine(this.P1, num3, checked (this.Thumb.Y + 5), num3, checked (this.Thumb.Bottom - 5));
          ThemeModule.G.DrawLine(this.P2, checked (num3 + 1), checked (this.Thumb.Y + 5), checked (num3 + 1), checked (this.Thumb.Bottom - 5));
          checked { ++num2; }
        }
        while (num2 <= 2);
      }
      ThemeModule.G.DrawRectangle(this.P3, 0, 0, checked (this.Width - 1), checked (this.Height - 1));
      ThemeModule.G.DrawRectangle(this.P4, 1, 1, checked (this.Width - 3), checked (this.Height - 3));
    }

    private GraphicsPath DrawArrow(int x, int y, bool flip)
    {
      GraphicsPath graphicsPath = new GraphicsPath();
      int num1 = 5;
      int num2 = 9;
      if (flip)
      {
        graphicsPath.AddLine(x, checked (y + 1), x, checked (y + num2 + 1));
        graphicsPath.AddLine(x, checked (y + num2), checked (x + num1 - 1), checked (y + num1));
      }
      else
      {
        graphicsPath.AddLine(checked (x + num1), y, checked (x + num1), checked (y + num2));
        graphicsPath.AddLine(checked (x + num1), checked (y + num2), checked (x + 1), checked (y + num1));
      }
      graphicsPath.CloseFigure();
      return graphicsPath;
    }

    protected override void OnSizeChanged(EventArgs e) => this.InvalidateLayout();

    private void InvalidateLayout()
    {
      this.LSA = new Rectangle(0, 0, this.ButtonSize, this.Height);
      this.RSA = new Rectangle(checked (this.Width - this.ButtonSize), 0, this.ButtonSize, this.Height);
      this.Shaft = new Rectangle(checked (this.LSA.Right + 1), 0, checked (this.Width - this.ButtonSize * 2 - 1), this.Height);
      this.ShowThumb = checked (this._Maximum - this._Minimum) > this.Shaft.Width;
      if (this.ShowThumb)
        this.Thumb = new Rectangle(0, 1, this.ThumbSize, checked (this.Height - 3));
      NSHScrollBar.ScrollEventHandler scrollEvent = this.ScrollEvent;
      if (scrollEvent != null)
        scrollEvent((object) this);
      this.InvalidatePosition();
    }

    private void InvalidatePosition()
    {
      this.Thumb.X = checked ((int) Math.Round(unchecked (this.GetProgress() * (double) checked (this.Shaft.Width - this.ThumbSize))) + this.LSA.Width);
      this.Invalidate();
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left && this.ShowThumb)
      {
        if (this.LSA.Contains(e.Location))
          this.I1 = checked (this._Value - this._SmallChange);
        else if (this.RSA.Contains(e.Location))
        {
          this.I1 = checked (this._Value + this._SmallChange);
        }
        else
        {
          if (this.Thumb.Contains(e.Location))
          {
            this.ThumbDown = true;
            base.OnMouseDown(e);
            return;
          }
          this.I1 = e.X >= this.Thumb.X ? checked (this._Value + this._LargeChange) : checked (this._Value - this._LargeChange);
        }
        this.Value = Math.Min(Math.Max(this.I1, this._Minimum), this._Maximum);
        this.InvalidatePosition();
      }
      base.OnMouseDown(e);
    }

    protected override void OnMouseMove(MouseEventArgs e)
    {
      if (this.ThumbDown && this.ShowThumb)
      {
        this.I1 = checked ((int) Math.Round(unchecked ((double) checked (e.X - this.LSA.Width - unchecked (this.ThumbSize / 2)) / (double) checked (this.Shaft.Width - this.ThumbSize) * (double) checked (this._Maximum - this._Minimum))) + this._Minimum);
        this.Value = Math.Min(Math.Max(this.I1, this._Minimum), this._Maximum);
        this.InvalidatePosition();
      }
      base.OnMouseMove(e);
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this.ThumbDown = false;
      base.OnMouseUp(e);
    }

    private double GetProgress() => (double) checked (this._Value - this._Minimum) / (double) checked (this._Maximum - this._Minimum);

    public delegate void ScrollEventHandler(object sender);
  }
}
