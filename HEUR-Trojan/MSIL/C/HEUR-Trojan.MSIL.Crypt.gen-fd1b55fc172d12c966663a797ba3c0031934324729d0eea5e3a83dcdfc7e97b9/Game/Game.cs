// Decompiled with JetBrains decompiler
// Type: Game.Game
// Assembly: IsolatedStorageFilePermissionAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 14C7025D-CDFC-43C3-946A-CBBDA352B5F4
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-fd1b55fc172d12c966663a797ba3c0031934324729d0eea5e3a83dcdfc7e97b9.exe

using Game.Elements;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;

namespace Game
{
  public class Game : Base
  {
    private GameTime _gameTime;
    private Timer _timer;
    private IContainer components = (IContainer) null;
    protected PictureBox Canvas;

    public event EventHandler<MouseEventArgs> Canvas_MouseUp;

    public Game()
    {
      this.InitializeComponent();
      this._gameTime = new GameTime();
      this.Keyboard = new Keyboard();
      this._timer = new Timer();
      this._timer.Interval = 33;
      this._timer.Tick += (EventHandler) ((sender, e) =>
      {
        DateTime now = DateTime.Now;
        this._gameTime.FrameMilliseconds = (int) (now - this._gameTime.FrameDate).TotalMilliseconds;
        this._gameTime.FrameDate = now;
        Application.DoEvents();
        this.Update(this._gameTime);
        this.Keyboard.Clear();
        using (DrawHandler drawHandler = new DrawHandler(this.Canvas.Width, this.Canvas.Height))
        {
          this.Draw(drawHandler);
          this.Canvas.Image = drawHandler.BaseImage;
        }
      });
      this._timer.Start();
    }

    protected Keyboard Keyboard { get; set; }

    private void pcCanvas_MouseUp(object sender, MouseEventArgs e)
    {
      if (this.Canvas_MouseUp == null)
        return;
      this.Canvas_MouseUp(sender, e);
    }

    private void Game_KeyDown(object sender, KeyEventArgs e) => this.Keyboard.SetKey(e.KeyData);

    protected Image Load_Image(string path)
    {
      try
      {
        return Image.FromFile(path);
      }
      catch
      {
        int num = (int) MessageBox.Show("Load File Error\n" + path);
        return (Image) null;
      }
    }

    protected virtual void Update(GameTime gameTime)
    {
    }

    public virtual void Draw(DrawHandler drawHandler)
    {
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Game.Game));
      this.Canvas = new PictureBox();
      ((ISupportInitialize) this.Canvas).BeginInit();
      this.SuspendLayout();
      this.Canvas.BackColor = Color.White;
      this.Canvas.Location = new Point(16, 15);
      this.Canvas.Margin = new Padding(4, 4, 4, 4);
      this.Canvas.Name = "Canvas";
      this.Canvas.Size = new Size(1035, 524);
      this.Canvas.TabIndex = 1;
      this.Canvas.TabStop = false;
      this.Canvas.MouseUp += new MouseEventHandler(this.pcCanvas_MouseUp);
      this.AutoScaleDimensions = new SizeF(8f, 16f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1067, 554);
      this.Controls.Add((Control) this.Canvas);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.KeyPreview = true;
      this.Margin = new Padding(5, 5, 5, 5);
      this.Name = nameof (Game);
      this.Text = "Games";
      this.KeyDown += new KeyEventHandler(this.Game_KeyDown);
      ((ISupportInitialize) this.Canvas).EndInit();
      this.ResumeLayout(false);
    }
  }
}
