// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CObject
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CObject : CControls
  {
    public Hashtable htShemotAzamim;
    private object eventObject = (object) null;
    private EventHandler doMethod;

    public CObject(CRunner CRunner)
      : base(CRunner)
    {
      this.doMethod = new EventHandler(this.MetapelEruim2);
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool hasama,
      ref Locals locals)
    {
      SWrapObject control = (SWrapObject) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      object obj1 = control.Object;
      CClassInfo classInfo = control.ClassInfo;
      ++place.WordI;
      string key = this.CRunner.nextWord(true, ref place).Value;
      if (obj1 == null && (key.Length < 3 || key.Substring(0, 3) != "new"))
        this.CRunner.ThrowError("Object must first be created using New method.", place.LineI);
      if (classInfo.htFields.Contains((object) key))
      {
        FieldInfo htField = (FieldInfo) classInfo.htFields[(object) key];
        if (!hasama)
          return new MethodReturn(place, this.KabelEreh(htField.GetValue(obj1)), 0.0);
        ++place.WordI;
        htField.SetValue(obj1, this.YazeEreh(htField.FieldType, ref place, out RunReturn _, ref locals));
        return new MethodReturn(place);
      }
      if (classInfo.htMethods.Contains((object) key))
      {
        SMethodInfo htMethod = (SMethodInfo) classInfo.htMethods[(object) key];
        MethodInfo methodInfo = htMethod.methodInfo;
        object[] parameters = (object[]) null;
        if (htMethod.alParameters.Count > 0)
        {
          ++place.WordI;
          parameters = new object[htMethod.alParameters.Count];
          for (int index = 0; index < htMethod.alParameters.Count; ++index)
          {
            System.Type alParameter = (System.Type) htMethod.alParameters[index];
            RunReturn rr;
            parameters[index] = this.YazeEreh(alParameter, ref place, out rr, ref locals);
            place = rr.place;
            ++place.WordI;
          }
        }
        object rt = methodInfo.Invoke(obj1, parameters);
        string vString = rt == null ? "" : this.KabelEreh(rt);
        return new MethodReturn(place, vString, 0.0);
      }
      if (classInfo.htProperties.Contains((object) key))
      {
        PropertyInfo htProperty = (PropertyInfo) classInfo.htProperties[(object) key];
        if (!hasama)
          return new MethodReturn(place, this.KabelEreh(htProperty.GetValue(obj1, (object[]) null)), 0.0);
        ++place.WordI;
        RunReturn rr;
        htProperty.SetValue(obj1, this.YazeEreh(htProperty.PropertyType, ref place, out rr, ref locals), (object[]) null);
        place = rr.place;
        return new MethodReturn(place);
      }
      if (classInfo.htConstructors.Contains((object) key))
      {
        SConstructInfo htConstructor = (SConstructInfo) classInfo.htConstructors[(object) key];
        ConstructorInfo constructInfo = htConstructor.constructInfo;
        object[] parameters = (object[]) null;
        if (htConstructor.alParameters.Count > 0)
        {
          ++place.WordI;
          parameters = new object[htConstructor.alParameters.Count];
          for (int index = 0; index < htConstructor.alParameters.Count; ++index)
          {
            System.Type alParameter = (System.Type) htConstructor.alParameters[index];
            RunReturn rr;
            parameters[index] = this.YazeEreh(alParameter, ref place, out rr, ref locals);
            place = rr.place;
            ++place.WordI;
          }
        }
        object obj2 = constructInfo.Invoke(parameters);
        control.Object = obj2;
        WrapControl htControl = (WrapControl) this.CRunner.htControls[(object) name] with
        {
          control = (object) control
        };
        this.CRunner.htControls[(object) name] = (object) htControl;
        if (this.htShemotAzamim == null)
          this.htShemotAzamim = new Hashtable();
        if (!this.htShemotAzamim.Contains(obj2))
          this.htShemotAzamim.Add(obj2, (object) name);
        this.HosefErua(name, classInfo, obj2);
      }
      else
      {
        if (!(key == "dispose"))
          throw new Exception("Invalid property.");
        if (obj1 != null && obj1 is IDisposable)
          ((IDisposable) obj1).Dispose();
        this.htShemotAzamim.Remove((object) name);
        this.CRunner.htControls.Remove((object) name);
      }
      return new MethodReturn(place);
    }

    private object YazeEreh(System.Type t, ref Place place, out RunReturn rr, ref Locals locals)
    {
      if ((object) t == (object) typeof (string) || (object) t == (object) typeof (char) || (object) t == (object) typeof (bool))
      {
        rr = this.CRunner.RunCode(place, true, true, ref locals);
        return Convert.ChangeType((object) rr.vString, t, (IFormatProvider) CRunner.cul);
      }
      if ((object) t == (object) typeof (IntPtr))
      {
        rr = this.CRunner.RunCode(place, false, true, ref locals);
        return (object) new IntPtr((int) rr.vDouble);
      }
      if (t.IsPrimitive)
      {
        rr = this.CRunner.RunCode(place, false, true, ref locals);
        return Convert.ChangeType((object) rr.vDouble, t, (IFormatProvider) CRunner.cul);
      }
      if (typeof (Control).IsAssignableFrom(t))
      {
        rr = this.CRunner.RunCode(place, true, true, ref locals);
        rr.vString = rr.vString.ToLower(CRunner.cul);
        return !this.CRunner.htControls.Contains((object) rr.vString) ? (object) (Control) this.CRunner.returnObject : (object) (Control) ((WrapControl) this.CRunner.htControls[(object) rr.vString]).control;
      }
      if ((object) t == (object) typeof (Color))
      {
        rr = this.CRunner.RunCode(place, false, true, ref locals);
        return (object) Color.FromArgb((int) rr.vDouble);
      }
      if (typeof (Stream).IsAssignableFrom(t))
      {
        string lower = this.CRunner.nextWord(false, ref place).Value.ToLower(CRunner.cul);
        if (this.CRunner.htStreams.Contains((object) lower))
        {
          ++place.WordI;
          rr = new RunReturn(place, "", 0.0, new Word(Word.SugMila.Klali, "", 0, 0));
          return this.CRunner.htStreams[(object) lower];
        }
        rr = this.CRunner.RunCode(place, true, true, ref locals);
        return this.CRunner.returnObject;
      }
      if ((object) t == (object) typeof (ArrayList))
      {
        rr = this.CRunner.RunCode(place, true, true, ref locals);
        return ((WrapControl) this.CRunner.htControls[(object) rr.vString.ToLower(CRunner.cul)]).control;
      }
      rr = this.CRunner.RunCode(place, true, true, ref locals);
      return this.CRunner.returnObject;
    }

    private string KabelEreh(object rt)
    {
      if (rt == null)
      {
        this.CRunner.returnObject = (object) null;
        return "";
      }
      System.Type type = rt.GetType();
      this.CRunner.returnObject = rt;
      string str;
      if (type.IsPrimitive || (object) type == (object) typeof (string))
      {
        str = (object) type != (object) typeof (IntPtr) ? (string) Convert.ChangeType(rt, typeof (string), (IFormatProvider) CRunner.cul) : ((IntPtr) rt).ToString();
        if ((object) type == (object) typeof (bool))
          str = str.ToLower(CRunner.cul);
      }
      else
        str = !type.IsArray ? (!typeof (Image).IsAssignableFrom(type) ? ((object) type != (object) typeof (Color) ? "" : ((Color) Convert.ChangeType(rt, typeof (Color), (IFormatProvider) CRunner.cul)).ToArgb().ToString((IFormatProvider) CRunner.cul)) : "~~") : "Array";
      return str;
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      SWrapObject swrapObject = (SWrapObject) sender;
      object target = swrapObject.Object;
      if (target == null)
        throw new Exception("Object must first be created using New method.");
      CClassInfo classInfo = swrapObject.ClassInfo;
      if (!classInfo.htEvents.Contains((object) eventName))
        throw new Exception("Event does not exist in object.");
      ((EventInfo) classInfo.htEvents[(object) eventName]).AddEventHandler(target, (Delegate) new EventHandler(this.MetapelEruim));
    }

    private void MetapelEruim2(object sender, EventArgs e)
    {
      object[] eventObject = (object[]) this.eventObject;
      this.eventObject = (object) null;
      string str = (string) this.htShemotAzamim[eventObject[0]];
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (str + "_" + ((string) eventObject[1]).ToLower(CRunner.cul))], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) str
        }
      });
    }

    private void MetapelEruim(object sender, EventArgs e)
    {
      if (this.CRunner.tdRunning != Thread.CurrentThread)
      {
        this.eventObject = sender;
        this.CRunner.mainForm.Invoke((Delegate) this.doMethod);
      }
      else
      {
        object[] objArray = (object[]) sender;
        string str = (string) this.htShemotAzamim[objArray[0]];
        this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (str + "_" + ((string) objArray[1]).ToLower(CRunner.cul))], new Hashtable()
        {
          {
            (object) nameof (sender),
            (object) str
          }
        });
      }
    }

    private void HosefErua(string name, CClassInfo ci, object o)
    {
      foreach (DictionaryEntry htEvent in ci.htEvents)
      {
        EventInfo eventInfo = (EventInfo) htEvent.Value;
        string lower = eventInfo.Name.ToLower(CRunner.cul);
        if (this.CRunner.htSubs.Contains((object) (name + "_" + lower)))
          eventInfo.AddEventHandler(o, (Delegate) new EventHandler(this.MetapelEruim));
      }
    }

    public MethodReturn AddObject(Place place, ref Locals locals)
    {
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      string lower = runReturn1.vString.ToLower(CRunner.cul);
      place = runReturn1.place;
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn2.place;
      ++place.WordI;
      if (!this.CRunner.htClassInfo.Contains((object) runReturn2.vString.ToLower(CRunner.cul)))
        this.CRunner.ThrowError("Class name does not exist.", place.LineI);
      CClassInfo cclassInfo = (CClassInfo) this.CRunner.htClassInfo[(object) runReturn2.vString.ToLower(CRunner.cul)];
      this.CRunner.htControls.Add((object) lower, (object) new WrapControl((object) new SWrapObject()
      {
        ClassInfo = cclassInfo,
        Object = (object) null
      }, (CControls) this));
      return new MethodReturn(place);
    }

    public void ShortAdd(string s)
    {
      int length = s.IndexOf(':');
      string lower = s.Substring(0, length).ToLower(CRunner.cul);
      CClassInfo cclassInfo = (CClassInfo) this.CRunner.htClassInfo[(object) s.Substring(length + 1).ToLower(CRunner.cul)];
      this.CRunner.htControls.Add((object) lower, (object) new WrapControl((object) new SWrapObject()
      {
        ClassInfo = cclassInfo,
        Object = (object) null
      }, (CControls) this));
    }
  }
}
