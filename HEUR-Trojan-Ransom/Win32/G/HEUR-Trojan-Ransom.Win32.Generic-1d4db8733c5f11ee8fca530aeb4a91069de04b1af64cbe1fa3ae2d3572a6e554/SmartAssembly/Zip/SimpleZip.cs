// Decompiled with JetBrains decompiler
// Type: SmartAssembly.Zip.SimpleZip
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B8444C5B-FCC9-4B9F-A06C-7304BA49E3C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-1d4db8733c5f11ee8fca530aeb4a91069de04b1af64cbe1fa3ae2d3572a6e554.exe

using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace SmartAssembly.Zip
{
  public static class SimpleZip
  {
    private static bool PublicKeysMatch([In] Assembly obj0, [In] Assembly obj1) => true;

    private static ICryptoTransform GetAesTransform(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] bool obj2)
    {
      using (SymmetricAlgorithm symmetricAlgorithm = (SymmetricAlgorithm) new RijndaelManaged())
        return obj2 ? symmetricAlgorithm.CreateDecryptor(obj0, obj1) : symmetricAlgorithm.CreateEncryptor(obj0, obj1);
    }

    private static ICryptoTransform GetDesTransform(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] bool obj2)
    {
      using (DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider())
        return obj2 ? cryptoServiceProvider.CreateDecryptor(obj0, obj1) : cryptoServiceProvider.CreateEncryptor(obj0, obj1);
    }

    public static byte[] Unzip([In] byte[] obj0)
    {
      Assembly callingAssembly = Assembly.GetCallingAssembly();
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !SimpleZip.PublicKeysMatch(executingAssembly, callingAssembly))
        return (byte[]) null;
      SimpleZip.ZipStream zipStream = new SimpleZip.ZipStream(obj0);
      byte[] numArray1 = new byte[0];
      int num1 = zipStream.ReadInt();
      if (num1 == 67324752)
      {
        short num2 = (short) zipStream.ReadShort();
        int num3 = zipStream.ReadShort();
        int num4 = zipStream.ReadShort();
        if (num1 != 67324752 || num2 != (short) 20 || num3 != 0 || num4 != 8)
          throw new FormatException("Wrong Header Signature");
        zipStream.ReadInt();
        zipStream.ReadInt();
        zipStream.ReadInt();
        int length1 = zipStream.ReadInt();
        int count1 = zipStream.ReadShort();
        int count2 = zipStream.ReadShort();
        if (count1 > 0)
        {
          byte[] buffer = new byte[count1];
          zipStream.Read(buffer, 0, count1);
        }
        if (count2 > 0)
        {
          byte[] buffer = new byte[count2];
          zipStream.Read(buffer, 0, count2);
        }
        byte[] buffer1 = new byte[zipStream.Length - zipStream.Position];
        zipStream.Read(buffer1, 0, buffer1.Length);
        SimpleZip.Inflater inflater = new SimpleZip.Inflater(buffer1);
        numArray1 = new byte[length1];
        byte[] numArray2 = numArray1;
        int length2 = numArray1.Length;
        inflater.Inflate(numArray2, 0, length2);
      }
      else
      {
        int num5 = num1 >> 24;
        if (num1 - (num5 << 24) != 8223355)
          throw new FormatException("Unknown Header");
        if (num5 == 1)
        {
          int length3 = zipStream.ReadInt();
          numArray1 = new byte[length3];
          int num6;
          for (int index = 0; index < length3; index += num6)
          {
            int length4 = zipStream.ReadInt();
            num6 = zipStream.ReadInt();
            byte[] buffer = new byte[length4];
            zipStream.Read(buffer, 0, buffer.Length);
            new SimpleZip.Inflater(buffer).Inflate(numArray1, index, num6);
          }
        }
        if (num5 == 2)
        {
          using (ICryptoTransform desTransform = SimpleZip.GetDesTransform(new byte[8]
          {
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1,
            (byte) 1
          }, new byte[8]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          }, true))
            numArray1 = SimpleZip.Unzip(desTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
        }
        if (num5 == 3)
        {
          using (ICryptoTransform aesTransform = SimpleZip.GetAesTransform(new byte[16]
          {
            (byte) 81,
            (byte) 144,
            (byte) 104,
            (byte) 163,
            (byte) 127,
            (byte) 139,
            (byte) 173,
            (byte) 127,
            (byte) 102,
            (byte) 177,
            (byte) 77,
            (byte) 123,
            (byte) 68,
            byte.MaxValue,
            (byte) 241,
            (byte) 71
          }, new byte[16]
          {
            (byte) 193,
            (byte) 126,
            (byte) 93,
            (byte) 11,
            (byte) 132,
            (byte) 210,
            (byte) 8,
            (byte) 172,
            (byte) 69,
            (byte) 237,
            (byte) 206,
            (byte) 178,
            (byte) 81,
            (byte) 7,
            (byte) 122,
            (byte) 224
          }, true))
            numArray1 = SimpleZip.Unzip(aesTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
        }
      }
      zipStream.Close();
      return numArray1;
    }

    internal sealed class Inflater
    {
      private static readonly int[] CPLENS = new int[29]
      {
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        13,
        15,
        17,
        19,
        23,
        27,
        31,
        35,
        43,
        51,
        59,
        67,
        83,
        99,
        115,
        131,
        163,
        195,
        227,
        258
      };
      private static readonly int[] CPLEXT = new int[29]
      {
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        1,
        1,
        1,
        2,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        4,
        4,
        4,
        4,
        5,
        5,
        5,
        5,
        0
      };
      private static readonly int[] CPDIST = new int[30]
      {
        1,
        2,
        3,
        4,
        5,
        7,
        9,
        13,
        17,
        25,
        33,
        49,
        65,
        97,
        129,
        193,
        257,
        385,
        513,
        769,
        1025,
        1537,
        2049,
        3073,
        4097,
        6145,
        8193,
        12289,
        16385,
        24577
      };
      private static readonly int[] CPDEXT = new int[30]
      {
        0,
        0,
        0,
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        4,
        4,
        5,
        5,
        6,
        6,
        7,
        7,
        8,
        8,
        9,
        9,
        10,
        10,
        11,
        11,
        12,
        12,
        13,
        13
      };
      private int mode;
      private int neededBits;
      private int repLength;
      private int repDist;
      private int uncomprLen;
      private bool isLastBlock;
      private SimpleZip.StreamManipulator input;
      private SimpleZip.OutputWindow outputWindow;
      private SimpleZip.InflaterDynHeader dynHeader;
      private SimpleZip.InflaterHuffmanTree litlenTree;
      private SimpleZip.InflaterHuffmanTree distTree;

      public Inflater([In] byte[] obj0)
      {
        this.input = new SimpleZip.StreamManipulator();
        this.outputWindow = new SimpleZip.OutputWindow();
        this.mode = 2;
        this.input.SetInput(obj0, 0, obj0.Length);
      }

      private bool DecodeHuffman()
      {
        int freeSpace = this.outputWindow.GetFreeSpace();
        while (freeSpace >= 258)
        {
          switch (this.mode)
          {
            case 7:
              int symbol1;
              while (((symbol1 = this.litlenTree.GetSymbol(this.input)) & -256) == 0)
              {
                this.outputWindow.Write(symbol1);
                if (--freeSpace < 258)
                  return true;
              }
              if (symbol1 < 257)
              {
                if (symbol1 < 0)
                  return false;
                this.distTree = (SimpleZip.InflaterHuffmanTree) null;
                this.litlenTree = (SimpleZip.InflaterHuffmanTree) null;
                this.mode = 2;
                return true;
              }
              this.repLength = SimpleZip.Inflater.CPLENS[symbol1 - 257];
              this.neededBits = SimpleZip.Inflater.CPLEXT[symbol1 - 257];
              goto case 8;
            case 8:
              if (this.neededBits > 0)
              {
                this.mode = 8;
                int num = this.input.PeekBits(this.neededBits);
                if (num < 0)
                  return false;
                this.input.DropBits(this.neededBits);
                this.repLength += num;
              }
              this.mode = 9;
              goto case 9;
            case 9:
              int symbol2 = this.distTree.GetSymbol(this.input);
              if (symbol2 < 0)
                return false;
              this.repDist = SimpleZip.Inflater.CPDIST[symbol2];
              this.neededBits = SimpleZip.Inflater.CPDEXT[symbol2];
              goto case 10;
            case 10:
              if (this.neededBits > 0)
              {
                this.mode = 10;
                int num = this.input.PeekBits(this.neededBits);
                if (num < 0)
                  return false;
                this.input.DropBits(this.neededBits);
                this.repDist += num;
              }
              this.outputWindow.Repeat(this.repLength, this.repDist);
              freeSpace -= this.repLength;
              this.mode = 7;
              continue;
            default:
              continue;
          }
        }
        return true;
      }

      private bool Decode()
      {
        switch (this.mode)
        {
          case 2:
            if (this.isLastBlock)
            {
              this.mode = 12;
              return false;
            }
            int num = this.input.PeekBits(3);
            if (num < 0)
              return false;
            this.input.DropBits(3);
            if ((num & 1) != 0)
              this.isLastBlock = true;
            switch (num >> 1)
            {
              case 0:
                this.input.SkipToByteBoundary();
                this.mode = 3;
                break;
              case 1:
                this.litlenTree = SimpleZip.InflaterHuffmanTree.defLitLenTree;
                this.distTree = SimpleZip.InflaterHuffmanTree.defDistTree;
                this.mode = 7;
                break;
              case 2:
                this.dynHeader = new SimpleZip.InflaterDynHeader();
                this.mode = 6;
                break;
            }
            return true;
          case 3:
            if ((this.uncomprLen = this.input.PeekBits(16)) < 0)
              return false;
            this.input.DropBits(16);
            this.mode = 4;
            goto case 4;
          case 4:
            if (this.input.PeekBits(16) < 0)
              return false;
            this.input.DropBits(16);
            this.mode = 5;
            goto case 5;
          case 5:
            this.uncomprLen -= this.outputWindow.CopyStored(this.input, this.uncomprLen);
            if (this.uncomprLen != 0)
              return !this.input.get_IsNeedingInput();
            this.mode = 2;
            return true;
          case 6:
            if (!this.dynHeader.Decode(this.input))
              return false;
            this.litlenTree = this.dynHeader.BuildLitLenTree();
            this.distTree = this.dynHeader.BuildDistTree();
            this.mode = 7;
            goto case 7;
          case 7:
          case 8:
          case 9:
          case 10:
            return this.DecodeHuffman();
          case 12:
            return false;
          default:
            return false;
        }
      }

      public int Inflate([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 0;
        do
        {
          if (this.mode != 11)
          {
            int num2 = this.outputWindow.CopyOutput(obj0, obj1, obj2);
            obj1 += num2;
            num1 += num2;
            obj2 -= num2;
            if (obj2 == 0)
              return num1;
          }
        }
        while (this.Decode() || this.outputWindow.GetAvailable() > 0 && this.mode != 11);
        return num1;
      }
    }

    internal sealed class StreamManipulator
    {
      private byte[] window;
      private int window_start;
      private int window_end;
      private uint buffer;
      private int bits_in_buffer;

      public int PeekBits([In] int obj0)
      {
        if (this.bits_in_buffer < obj0)
        {
          if (this.window_start == this.window_end)
            return -1;
          this.buffer |= (uint) (((int) this.window[this.window_start++] & (int) byte.MaxValue | ((int) this.window[this.window_start++] & (int) byte.MaxValue) << 8) << this.bits_in_buffer);
          this.bits_in_buffer += 16;
        }
        return (int) ((long) this.buffer & (long) ((1 << obj0) - 1));
      }

      public void DropBits([In] int obj0)
      {
        this.buffer >>= obj0;
        this.bits_in_buffer -= obj0;
      }

      [SpecialName]
      public int get_AvailableBits() => this.bits_in_buffer;

      [SpecialName]
      public int get_AvailableBytes() => this.window_end - this.window_start + (this.bits_in_buffer >> 3);

      public void SkipToByteBoundary()
      {
        this.buffer >>= this.bits_in_buffer & 7;
        this.bits_in_buffer &= -8;
      }

      [SpecialName]
      public bool get_IsNeedingInput() => this.window_start == this.window_end;

      public int CopyBytes([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = 0;
        while (this.bits_in_buffer > 0 && obj2 > 0)
        {
          obj0[obj1++] = (byte) this.buffer;
          this.buffer >>= 8;
          this.bits_in_buffer -= 8;
          --obj2;
          ++num1;
        }
        if (obj2 == 0)
          return num1;
        int num2 = this.window_end - this.window_start;
        if (obj2 > num2)
          obj2 = num2;
        Array.Copy((Array) this.window, this.window_start, (Array) obj0, obj1, obj2);
        this.window_start += obj2;
        if ((this.window_start - this.window_end & 1) != 0)
        {
          this.buffer = (uint) this.window[this.window_start++] & (uint) byte.MaxValue;
          this.bits_in_buffer = 8;
        }
        return num1 + obj2;
      }

      public void SetInput([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        if (this.window_start < this.window_end)
          throw new InvalidOperationException();
        int num = obj1 + obj2;
        if (0 > obj1 || obj1 > num || num > obj0.Length)
          throw new ArgumentOutOfRangeException();
        if ((obj2 & 1) != 0)
        {
          this.buffer |= (uint) (((int) obj0[obj1++] & (int) byte.MaxValue) << this.bits_in_buffer);
          this.bits_in_buffer += 8;
        }
        this.window = obj0;
        this.window_start = obj1;
        this.window_end = num;
      }
    }

    internal sealed class OutputWindow
    {
      private byte[] window = new byte[32768];
      private int windowEnd;
      private int windowFilled;

      public void Write([In] int obj0)
      {
        if (this.windowFilled++ == 32768)
          throw new InvalidOperationException();
        this.window[this.windowEnd++] = (byte) obj0;
        this.windowEnd &= (int) short.MaxValue;
      }

      private void SlowRepeat([In] int obj0, [In] int obj1, [In] int obj2)
      {
        while (obj1-- > 0)
        {
          this.window[this.windowEnd++] = this.window[obj0++];
          this.windowEnd &= (int) short.MaxValue;
          obj0 &= (int) short.MaxValue;
        }
      }

      public void Repeat([In] int obj0, [In] int obj1)
      {
        if ((this.windowFilled += obj0) > 32768)
          throw new InvalidOperationException();
        int sourceIndex = this.windowEnd - obj1 & (int) short.MaxValue;
        int num = 32768 - obj0;
        if (sourceIndex <= num && this.windowEnd < num)
        {
          if (obj0 <= obj1)
          {
            Array.Copy((Array) this.window, sourceIndex, (Array) this.window, this.windowEnd, obj0);
            this.windowEnd += obj0;
          }
          else
          {
            while (obj0-- > 0)
              this.window[this.windowEnd++] = this.window[sourceIndex++];
          }
        }
        else
          this.SlowRepeat(sourceIndex, obj0, obj1);
      }

      public int CopyStored([In] SimpleZip.StreamManipulator obj0, [In] int obj1)
      {
        obj1 = Math.Min(Math.Min(obj1, 32768 - this.windowFilled), obj0.get_AvailableBytes());
        int num1 = 32768 - this.windowEnd;
        int num2;
        if (obj1 > num1)
        {
          num2 = obj0.CopyBytes(this.window, this.windowEnd, num1);
          if (num2 == num1)
            num2 += obj0.CopyBytes(this.window, 0, obj1 - num1);
        }
        else
          num2 = obj0.CopyBytes(this.window, this.windowEnd, obj1);
        this.windowEnd = this.windowEnd + num2 & (int) short.MaxValue;
        this.windowFilled += num2;
        return num2;
      }

      public int GetFreeSpace() => 32768 - this.windowFilled;

      public int GetAvailable() => this.windowFilled;

      public int CopyOutput([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        int num1 = this.windowEnd;
        if (obj2 > this.windowFilled)
          obj2 = this.windowFilled;
        else
          num1 = this.windowEnd - this.windowFilled + obj2 & (int) short.MaxValue;
        int num2 = obj2;
        int length = obj2 - num1;
        if (length > 0)
        {
          Array.Copy((Array) this.window, 32768 - length, (Array) obj0, obj1, length);
          obj1 += length;
          obj2 = num1;
        }
        Array.Copy((Array) this.window, num1 - obj2, (Array) obj0, obj1, obj2);
        this.windowFilled -= num2;
        if (this.windowFilled < 0)
          throw new InvalidOperationException();
        return num2;
      }
    }

    internal sealed class InflaterHuffmanTree
    {
      private short[] tree;
      public static readonly SimpleZip.InflaterHuffmanTree defLitLenTree;
      public static readonly SimpleZip.InflaterHuffmanTree defDistTree;

      static InflaterHuffmanTree()
      {
        byte[] numArray1 = new byte[288];
        int num1 = 0;
        while (num1 < 144)
          numArray1[num1++] = (byte) 8;
        while (num1 < 256)
          numArray1[num1++] = (byte) 9;
        while (num1 < 280)
          numArray1[num1++] = (byte) 7;
        while (num1 < 288)
          numArray1[num1++] = (byte) 8;
        SimpleZip.InflaterHuffmanTree.defLitLenTree = new SimpleZip.InflaterHuffmanTree(numArray1);
        byte[] numArray2 = new byte[32];
        int num2 = 0;
        while (num2 < 32)
          numArray2[num2++] = (byte) 5;
        SimpleZip.InflaterHuffmanTree.defDistTree = new SimpleZip.InflaterHuffmanTree(numArray2);
      }

      public InflaterHuffmanTree([In] byte[] obj0) => this.BuildTree(obj0);

      private void BuildTree([In] byte[] obj0)
      {
        int[] numArray1 = new int[16];
        int[] numArray2 = new int[16];
        for (int index1 = 0; index1 < obj0.Length; ++index1)
        {
          int index2 = (int) obj0[index1];
          if (index2 > 0)
            ++numArray1[index2];
        }
        int num1 = 0;
        int length = 512;
        for (int index = 1; index <= 15; ++index)
        {
          numArray2[index] = num1;
          num1 += numArray1[index] << 16 - index;
          if (index >= 10)
          {
            int num2 = numArray2[index] & 130944;
            int num3 = num1 & 130944;
            length += num3 - num2 >> 16 - index;
          }
        }
        this.tree = new short[length];
        int num4 = 512;
        for (int index3 = 15; index3 >= 10; --index3)
        {
          int num5 = num1 & 130944;
          num1 -= numArray1[index3] << 16 - index3;
          for (int index4 = num1 & 130944; index4 < num5; index4 += 128)
          {
            this.tree[(int) SimpleZip.DeflaterHuffman.BitReverse(index4)] = (short) (-num4 << 4 | index3);
            num4 += 1 << index3 - 9;
          }
        }
        for (int index5 = 0; index5 < obj0.Length; ++index5)
        {
          int index6 = (int) obj0[index5];
          if (index6 != 0)
          {
            int num6 = numArray2[index6];
            int index7 = (int) SimpleZip.DeflaterHuffman.BitReverse(num6);
            if (index6 <= 9)
            {
              do
              {
                this.tree[index7] = (short) (index5 << 4 | index6);
                index7 += 1 << index6;
              }
              while (index7 < 512);
            }
            else
            {
              int num7 = (int) this.tree[index7 & 511];
              int num8 = 1 << (num7 & 15);
              int num9 = -(num7 >> 4);
              do
              {
                this.tree[num9 | index7 >> 9] = (short) (index5 << 4 | index6);
                index7 += 1 << index6;
              }
              while (index7 < num8);
            }
            numArray2[index6] = num6 + (1 << 16 - index6);
          }
        }
      }

      public int GetSymbol([In] SimpleZip.StreamManipulator obj0)
      {
        int index;
        if ((index = obj0.PeekBits(9)) >= 0)
        {
          int num1;
          if ((num1 = (int) this.tree[index]) >= 0)
          {
            obj0.DropBits(num1 & 15);
            return num1 >> 4;
          }
          int num2 = -(num1 >> 4);
          int num3 = num1 & 15;
          int num4;
          if ((num4 = obj0.PeekBits(num3)) >= 0)
          {
            int num5 = (int) this.tree[num2 | num4 >> 9];
            obj0.DropBits(num5 & 15);
            return num5 >> 4;
          }
          int num6 = obj0.get_AvailableBits();
          int num7 = obj0.PeekBits(num6);
          int num8 = (int) this.tree[num2 | num7 >> 9];
          if ((num8 & 15) > num6)
            return -1;
          obj0.DropBits(num8 & 15);
          return num8 >> 4;
        }
        int num9 = obj0.get_AvailableBits();
        int num10 = (int) this.tree[obj0.PeekBits(num9)];
        if (num10 < 0 || (num10 & 15) > num9)
          return -1;
        obj0.DropBits(num10 & 15);
        return num10 >> 4;
      }
    }

    internal sealed class InflaterDynHeader
    {
      private static readonly int[] repMin = new int[3]
      {
        3,
        3,
        11
      };
      private static readonly int[] repBits = new int[3]
      {
        2,
        3,
        7
      };
      private byte[] blLens;
      private byte[] litdistLens;
      private SimpleZip.InflaterHuffmanTree blTree;
      private int mode;
      private int lnum;
      private int dnum;
      private int blnum;
      private int num;
      private int repSymbol;
      private byte lastLen;
      private int ptr;
      private static readonly int[] BL_ORDER = new int[19]
      {
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
      };

      public bool Decode([In] SimpleZip.StreamManipulator obj0)
      {
        while (true)
        {
          switch (this.mode)
          {
            case 0:
              this.lnum = obj0.PeekBits(5);
              if (this.lnum >= 0)
              {
                this.lnum += 257;
                obj0.DropBits(5);
                this.mode = 1;
                goto case 1;
              }
              else
                goto label_2;
            case 1:
              this.dnum = obj0.PeekBits(5);
              if (this.dnum >= 0)
              {
                ++this.dnum;
                obj0.DropBits(5);
                this.num = this.lnum + this.dnum;
                this.litdistLens = new byte[this.num];
                this.mode = 2;
                goto case 2;
              }
              else
                goto label_5;
            case 2:
              this.blnum = obj0.PeekBits(4);
              if (this.blnum >= 0)
              {
                this.blnum += 4;
                obj0.DropBits(4);
                this.blLens = new byte[19];
                this.ptr = 0;
                this.mode = 3;
                goto case 3;
              }
              else
                goto label_8;
            case 3:
              for (; this.ptr < this.blnum; ++this.ptr)
              {
                int num = obj0.PeekBits(3);
                if (num < 0)
                  return false;
                obj0.DropBits(3);
                this.blLens[SimpleZip.InflaterDynHeader.BL_ORDER[this.ptr]] = (byte) num;
              }
              this.blTree = new SimpleZip.InflaterHuffmanTree(this.blLens);
              this.blLens = (byte[]) null;
              this.ptr = 0;
              this.mode = 4;
              goto case 4;
            case 4:
              int symbol;
              while (((symbol = this.blTree.GetSymbol(obj0)) & -16) == 0)
              {
                this.litdistLens[this.ptr++] = this.lastLen = (byte) symbol;
                if (this.ptr == this.num)
                  return true;
              }
              if (symbol >= 0)
              {
                if (symbol >= 17)
                  this.lastLen = (byte) 0;
                this.repSymbol = symbol - 16;
                this.mode = 5;
                goto case 5;
              }
              else
                goto label_19;
            case 5:
              int repBit = SimpleZip.InflaterDynHeader.repBits[this.repSymbol];
              int num1 = obj0.PeekBits(repBit);
              if (num1 >= 0)
              {
                obj0.DropBits(repBit);
                int num2 = num1 + SimpleZip.InflaterDynHeader.repMin[this.repSymbol];
                while (num2-- > 0)
                  this.litdistLens[this.ptr++] = this.lastLen;
                if (this.ptr != this.num)
                {
                  this.mode = 4;
                  continue;
                }
                goto label_29;
              }
              else
                goto label_24;
            default:
              continue;
          }
        }
label_2:
        return false;
label_5:
        return false;
label_8:
        return false;
label_19:
        return false;
label_24:
        return false;
label_29:
        return true;
      }

      public SimpleZip.InflaterHuffmanTree BuildLitLenTree()
      {
        byte[] destinationArray = new byte[this.lnum];
        Array.Copy((Array) this.litdistLens, 0, (Array) destinationArray, 0, this.lnum);
        return new SimpleZip.InflaterHuffmanTree(destinationArray);
      }

      public SimpleZip.InflaterHuffmanTree BuildDistTree()
      {
        byte[] destinationArray = new byte[this.dnum];
        Array.Copy((Array) this.litdistLens, this.lnum, (Array) destinationArray, 0, this.dnum);
        return new SimpleZip.InflaterHuffmanTree(destinationArray);
      }
    }

    internal sealed class DeflaterHuffman
    {
      private static readonly int[] BL_ORDER = new int[19]
      {
        16,
        17,
        18,
        0,
        8,
        7,
        9,
        6,
        10,
        5,
        11,
        4,
        12,
        3,
        13,
        2,
        14,
        1,
        15
      };
      private static readonly byte[] bit4Reverse = new byte[16]
      {
        (byte) 0,
        (byte) 8,
        (byte) 4,
        (byte) 12,
        (byte) 2,
        (byte) 10,
        (byte) 6,
        (byte) 14,
        (byte) 1,
        (byte) 9,
        (byte) 5,
        (byte) 13,
        (byte) 3,
        (byte) 11,
        (byte) 7,
        (byte) 15
      };
      private static readonly short[] staticLCodes = new short[286];
      private static readonly byte[] staticLLength = new byte[286];
      private static readonly short[] staticDCodes;
      private static readonly byte[] staticDLength;

      public static short BitReverse([In] int obj0) => (short) ((int) SimpleZip.DeflaterHuffman.bit4Reverse[obj0 & 15] << 12 | (int) SimpleZip.DeflaterHuffman.bit4Reverse[obj0 >> 4 & 15] << 8 | (int) SimpleZip.DeflaterHuffman.bit4Reverse[obj0 >> 8 & 15] << 4 | (int) SimpleZip.DeflaterHuffman.bit4Reverse[obj0 >> 12]);

      static DeflaterHuffman()
      {
        int index1;
        for (index1 = 0; index1 < 144; SimpleZip.DeflaterHuffman.staticLLength[index1++] = (byte) 8)
          SimpleZip.DeflaterHuffman.staticLCodes[index1] = SimpleZip.DeflaterHuffman.BitReverse(48 + index1 << 8);
        for (; index1 < 256; SimpleZip.DeflaterHuffman.staticLLength[index1++] = (byte) 9)
          SimpleZip.DeflaterHuffman.staticLCodes[index1] = SimpleZip.DeflaterHuffman.BitReverse(256 + index1 << 7);
        for (; index1 < 280; SimpleZip.DeflaterHuffman.staticLLength[index1++] = (byte) 7)
          SimpleZip.DeflaterHuffman.staticLCodes[index1] = SimpleZip.DeflaterHuffman.BitReverse(index1 - 256 << 9);
        for (; index1 < 286; SimpleZip.DeflaterHuffman.staticLLength[index1++] = (byte) 8)
          SimpleZip.DeflaterHuffman.staticLCodes[index1] = SimpleZip.DeflaterHuffman.BitReverse(index1 - 88 << 8);
        SimpleZip.DeflaterHuffman.staticDCodes = new short[30];
        SimpleZip.DeflaterHuffman.staticDLength = new byte[30];
        for (int index2 = 0; index2 < 30; ++index2)
        {
          SimpleZip.DeflaterHuffman.staticDCodes[index2] = SimpleZip.DeflaterHuffman.BitReverse(index2 << 11);
          SimpleZip.DeflaterHuffman.staticDLength[index2] = (byte) 5;
        }
      }
    }

    internal sealed class ZipStream : MemoryStream
    {
      public int ReadShort() => this.ReadByte() | this.ReadByte() << 8;

      public int ReadInt() => this.ReadShort() | this.ReadShort() << 16;

      public ZipStream([In] byte[] obj0)
        : base(obj0, false)
      {
      }
    }
  }
}
