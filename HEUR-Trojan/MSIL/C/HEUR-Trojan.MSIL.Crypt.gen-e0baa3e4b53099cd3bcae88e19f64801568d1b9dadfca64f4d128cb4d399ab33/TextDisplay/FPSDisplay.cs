// Decompiled with JetBrains decompiler
// Type: D3DHelper.TextDisplay.FPSDisplay
// Assembly: XOBK, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 44C15233-611E-47F9-925F-576321862E3D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-e0baa3e4b53099cd3bcae88e19f64801568d1b9dadfca64f4d128cb4d399ab33.exe

using Microsoft.VisualBasic;
using System;

namespace D3DHelper.TextDisplay
{
  public sealed class FPSDisplay
  {
    private int m_FrameCount;
    private int m_ModFrameCount;
    private int m_ModN;
    private double m_LastResetTime;
    private double[] m_LastFrameTimes;
    private double m_LastUpdateTime;
    private int m_InstantFPS;
    private int m_AvgFPS;
    private int m_ModFPS;
    private bool m_DisplayInstantFPS;
    private bool m_DisplayAvgFPS;
    private bool m_DisplayModFPS;

    public bool DisplayInstantaneousFramerate
    {
      get => this.m_DisplayInstantFPS;
      set => this.m_DisplayInstantFPS = value;
    }

    public bool DisplayAverageFramerate
    {
      get => this.m_DisplayAvgFPS;
      set => this.m_DisplayAvgFPS = value;
    }

    public bool DisplayModNFramerate
    {
      get => this.m_DisplayModFPS;
      set => this.m_DisplayModFPS = value;
    }

    public int ModN
    {
      get => this.m_ModN;
      set => this.m_ModN = value > 1 ? value : throw new ArgumentOutOfRangeException(nameof (value));
    }

    public void Reset()
    {
      this.m_FrameCount = 0;
      this.m_ModFrameCount = 0;
      this.m_LastResetTime = DateAndTime.Timer;
      this.m_LastFrameTimes = new double[checked (this.m_ModN - 1 + 1)];
    }
  }
}
