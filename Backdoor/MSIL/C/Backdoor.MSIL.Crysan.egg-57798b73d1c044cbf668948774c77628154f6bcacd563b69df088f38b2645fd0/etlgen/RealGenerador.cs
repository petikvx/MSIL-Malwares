// Decompiled with JetBrains decompiler
// Type: etlgen.RealGenerador
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Globalization;
using System.Xml;

namespace etlgen
{
  public class RealGenerador : ObjGenerador
  {
    private double min;
    private double max;
    private double paso;
    private uint escala;
    private NumberStyles estilo;
    private NumberFormatInfo formatoEntrada;
    private NumberFormatInfo formatoSalida;

    public RealGenerador()
    {
      this.entidad = this.id = "real";
      this.min = 0.0;
      this.max = 1.0;
      this.paso = 0.01;
      this.escala = 2U;
      this.estilo = NumberStyles.Float;
      this.formatoEntrada = new NumberFormatInfo();
      this.formatoEntrada.NumberDecimalSeparator = ".";
      this.formatoSalida = new NumberFormatInfo();
      this.formatoSalida.NumberDecimalSeparator = ",";
    }

    public override object Generar(Random random)
    {
      double num = (this.max - this.min) / this.paso;
      return (object) (Math.Round(random.NextDouble() * num, 0) * this.paso + this.min).ToString("F" + this.escala.ToString(), (IFormatProvider) this.formatoSalida);
    }

    public override ObjGenerador Clonar()
    {
      RealGenerador realGenerador = new RealGenerador();
      realGenerador.entidad = this.entidad;
      realGenerador.id = realGenerador.id;
      realGenerador.min = this.min;
      realGenerador.max = this.max;
      realGenerador.paso = this.paso;
      realGenerador.escala = this.escala;
      return (ObjGenerador) realGenerador;
    }

    public override void Cargar(XmlTextReader reader, ETLConfig configuracion)
    {
      if (reader.NodeType != XmlNodeType.Element || reader.Name != this.entidad)
        this.ErrorEntidad(this.entidad);
      string id = (string) null;
      double num1 = 0.0;
      double num2 = 0.0;
      double num3 = -1.0;
      int num4 = -1;
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      bool flag4 = false;
      while (reader.MoveToNextAttribute())
      {
        string name = reader.Name;
        if (!(name == "id"))
        {
          if (!(name == "min"))
          {
            if (!(name == "max"))
            {
              if (!(name == "paso"))
              {
                if (name == "escala")
                {
                  num4 = int.Parse(reader.Value, this.estilo, (IFormatProvider) this.formatoEntrada);
                  flag4 = true;
                }
                else
                  this.ErrorAtributo(this.entidad, reader.Name, reader.Value, reader.LineNumber);
              }
              else
              {
                num3 = double.Parse(reader.Value, this.estilo, (IFormatProvider) this.formatoEntrada);
                flag3 = true;
              }
            }
            else
            {
              num2 = double.Parse(reader.Value, this.estilo, (IFormatProvider) this.formatoEntrada);
              flag2 = true;
            }
          }
          else
          {
            num1 = double.Parse(reader.Value, this.estilo, (IFormatProvider) this.formatoEntrada);
            flag1 = true;
          }
        }
        else
          id = reader.Value;
      }
      if (id != null)
        this.id = id;
      if (flag1 & flag2)
      {
        if (num1 > num2)
        {
          this.ErrorValor(this.entidad, id, "max", num2.ToString("F" + num4.ToString(), (IFormatProvider) this.formatoEntrada));
        }
        else
        {
          this.min = num1;
          this.max = num2;
        }
      }
      else if (flag1)
      {
        if (num1 > this.max)
          this.ErrorValor(this.entidad, id, "min", num1.ToString("F" + num4.ToString(), (IFormatProvider) this.formatoEntrada));
        else
          this.min = num1;
      }
      else if (flag2)
      {
        if (this.min > num2)
          this.ErrorValor(this.entidad, id, "max", num2.ToString("F" + num4.ToString(), (IFormatProvider) this.formatoEntrada));
        else
          this.max = num2;
      }
      if (flag3 && num3 >= 0.0)
        this.paso = num3;
      else if (flag3)
        this.ErrorValor(this.entidad, id, "paso", num3.ToString("F" + num4.ToString(), (IFormatProvider) this.formatoEntrada));
      if (flag4 && num4 >= 0)
      {
        this.escala = (uint) num4;
      }
      else
      {
        if (!flag4)
          return;
        this.ErrorValor(this.entidad, id, "escala", num4.ToString());
      }
    }

    public override string ToString() => "<" + this.entidad + " id=\"" + this.id + "\" min=\"" + this.min.ToString((IFormatProvider) this.formatoEntrada) + "\" max=\"" + this.max.ToString((IFormatProvider) this.formatoEntrada) + "\" paso=\"" + this.paso.ToString((IFormatProvider) this.formatoEntrada) + "\" escala=\"" + this.escala.ToString() + "\" />";
  }
}
