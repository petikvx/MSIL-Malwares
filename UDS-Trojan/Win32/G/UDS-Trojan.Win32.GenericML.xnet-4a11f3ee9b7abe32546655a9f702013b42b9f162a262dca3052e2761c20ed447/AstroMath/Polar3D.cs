// Decompiled with JetBrains decompiler
// Type: AstroMath.Polar3D
// Assembly: IUnionSemanticCodeGr, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 54936E77-57E9-4A01-8A40-CDD9C21A9B24
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4a11f3ee9b7abe32546655a9f702013b42b9f162a262dca3052e2761c20ed447.exe

using System;
using System.Drawing;

namespace AstroMath
{
  public class Polar3D
  {
    public static Point[] ProjectXY(Polar3D.Polar3[] spts)
    {
      Point[] pointArray1 = new Point[spts.Length];
      int length = 0;
      for (int index = 0; index < spts.Length; ++index)
      {
        Polar3D.Point3 point3 = new Polar3D.Point3(spts[index]);
        if ((double) point3.Z >= 0.0)
        {
          pointArray1[length] = new Point((int) point3.X, (int) point3.Y);
          ++length;
        }
      }
      Point[] pointArray2 = new Point[length];
      for (int index = 0; index < pointArray2.Length; ++index)
        pointArray2[index] = pointArray1[index];
      return pointArray2;
    }

    public class Polar3
    {
      private float rho;
      private float theta;
      private float phi;

      public Polar3()
      {
      }

      public Polar3(float rhoVal, float thetaVal, float phiVal)
      {
        this.rho = rhoVal;
        this.theta = thetaVal;
        this.phi = phiVal;
      }

      public Polar3(Polar3D.Point3 cpt)
      {
        this.rho = (float) Math.Sqrt((double) cpt.X * (double) cpt.X + (double) cpt.Y * (double) cpt.Y + (double) cpt.Z * (double) cpt.Z);
        this.theta = (float) Math.Acos((double) cpt.Z / (double) this.rho);
        this.phi = (float) Math.Atan2((double) cpt.Y, (double) cpt.X);
      }

      public float Rho
      {
        get => this.rho;
        set => this.rho = value;
      }

      public float Theta
      {
        get => this.theta;
        set => this.theta = value;
      }

      public float Phi
      {
        get => this.phi;
        set => this.phi = value;
      }

      public Polar3D.Polar3 RotateX(float rotationR)
      {
        Polar3D.Point3 cpt = new Polar3D.Point3(this);
        float num1 = (float) Math.Sqrt((double) cpt.Y * (double) cpt.Y + (double) cpt.Z * (double) cpt.Z);
        float num2 = (float) Math.Atan2((double) cpt.Z, (double) cpt.Y);
        cpt.Y = num1 * (float) Math.Cos((double) num2 + (double) rotationR);
        cpt.Z = num1 * (float) Math.Sin((double) num2 + (double) rotationR);
        return new Polar3D.Polar3(cpt);
      }
    }

    public class Point3
    {
      private float px;
      private float py;
      private float pz;

      public Point3()
      {
      }

      public Point3(float ex, float ey, float ez)
      {
        this.px = ex;
        this.py = ey;
        this.pz = ez;
      }

      public Point3(Polar3D.Polar3 sph)
      {
        this.px = (float) ((double) sph.Rho * Math.Sin((double) sph.Theta) * Math.Cos((double) sph.Phi));
        this.py = (float) ((double) sph.Rho * Math.Sin((double) sph.Theta) * Math.Sin((double) sph.Phi));
        this.pz = sph.Rho * (float) Math.Cos((double) sph.Theta);
      }

      public float X
      {
        get => this.px;
        set => this.px = value;
      }

      public float Y
      {
        get => this.py;
        set => this.py = value;
      }

      public float Z
      {
        get => this.pz;
        set => this.pz = value;
      }

      public Polar3D.Point3 RotateX(float thetaRot)
      {
        Polar3D.Polar3 sph = new Polar3D.Polar3(this.X, this.Y, this.Z);
        sph.RotateX(thetaRot);
        return new Polar3D.Point3(sph);
      }
    }
  }
}
