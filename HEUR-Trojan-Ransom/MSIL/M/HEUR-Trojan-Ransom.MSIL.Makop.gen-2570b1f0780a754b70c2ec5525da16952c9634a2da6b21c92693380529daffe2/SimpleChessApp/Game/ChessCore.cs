// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: 生ث, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8221468-4DC3-4423-BEC3-5B04CD1AB276
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2570b1f0780a754b70c2ec5525da16952c9634a2da6b21c92693380529daffe2.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
      this.ChessBoard = b;
      this.resetFlags();
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
label_1:
      int num1 = -945553585;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1547334292)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags();
            num1 = (int) num2 * -1734329998 ^ 2056755536;
            continue;
          case 2:
            num1 = (int) num2 * -360065677 ^ -1640763992;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.ChessBoard.Restart();
            num1 = (int) num2 * 232061404 ^ -1014884627;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void resetFlags(bool turn = false)
    {
      this.DisableTurn = turn;
      this.WhosPlaying = PieceColor.White;
label_1:
      int num1 = 518660697;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1289463386)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Turns.Clear();
            num1 = (int) num2 * 960572054 ^ -2000328354;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.TurnId = 1;
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * 160891577 ^ -1983412764;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = -1321403757;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1315978412)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1376596994 ^ -750112515;
            continue;
          case 3:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * 75887084 ^ -1602173974;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
      this.resetFlags(true);
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -513101579;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -987018085)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestCastling();
            this.resetFlags(true);
            num1 = (int) num2 * 312370275 ^ -797020907;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 96923569;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 740219885)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * -315746850 ^ -2055030461;
            continue;
          case 2:
            num1 = (int) num2 * 74944280 ^ 1066017474;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 2064070646 ^ -1328269227;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = -469521365;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1973447020)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1904219829 ^ 1043354131;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -523562677 ^ -2096877697;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -1583021537;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -859115583)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -947422102 ^ 1186806416;
            continue;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * -495759795 ^ -1065838098;
            continue;
          case 4:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * -1296768159 ^ -1436416208;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void CheckOnCastling()
    {
      new DebugChess(this.ChessBoard).CheckOnCastling();
label_1:
      int num1 = -855337711;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2038314448)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1159912803 ^ 859114452;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1403977199 ^ 292171197;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }
  }
}
