// Decompiled with JetBrains decompiler
// Type: ATI.ACE.CCCInstall.Tasks.VersionTasks
// Assembly: CCCInstall, Version=2.0.3274.26237, Culture=neutral, PublicKeyToken=null
// MVID: A3863DD5-25D9-4041-8436-FCCC1F09C036
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Virus.Win32.Qvod.b-eba8c7b33ec3e44698699ab1beaae934cad97e6e2f43a472b7831bbb946da01a.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;

namespace ATI.ACE.CCCInstall.Tasks
{
  internal class VersionTasks : BaseTask, ITask
  {
    private ATI.ACE.CCCInstall.Action action;

    public VersionTasks(CCCInstallLog log, ATI.ACE.CCCInstall.Action action)
      : base(log)
    {
      this.action = action;
    }

    public void Run(string filePath_)
    {
      if (this.action == ATI.ACE.CCCInstall.Action.CreateVersion)
      {
        string directoryName = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        string str1 = directoryName.Substring(0, directoryName.LastIndexOf(Path.DirectorySeparatorChar) + 1) + "Core-Implementation" + (object) Path.DirectorySeparatorChar + "CLI.Component.Wizard.dll";
        if (File.Exists(str1))
        {
          FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(str1);
          string str2 = string.Format("{0}.{1}", (object) DateTime.Now.ToString("yyyy.MMdd.HHmm"), (object) versionInfo.FilePrivatePart);
          string path = filePath_.Replace("/", "\\").Trim('"');
          if (!Path.IsPathRooted(path))
            path = Path.GetFullPath(path);
          StreamWriter streamWriter = (StreamWriter) null;
          try
          {
            streamWriter = new StreamWriter(path, false);
            streamWriter.WriteLine("Version={0}", (object) str2);
            this.Logger.LogMessage("Version=" + str2);
          }
          catch (Exception ex)
          {
            this.Logger.LogException(ex, "CreateVersion");
          }
          finally
          {
            streamWriter?.Close();
          }
        }
        else
          this.Logger.LogMessage("Assembly file not found: " + str1);
      }
      else
        this.Logger.LogMessage("Debug: Wrong parameter passed");
    }
  }
}
