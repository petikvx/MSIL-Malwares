// Decompiled with JetBrains decompiler
// Type: IRefl.Producers.ServerObjectProducer
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Adapter;
using IRefl.Collections;
using IRefl.Composer;
using IRefl.Definitions;
using IRefl.Lists;
using IRefl.Managers;
using IRefl.Pools;
using IRefl.Wrappers;
using ProjNet.Bridges;
using ProjNet.Candidates;
using ProjNet.Maps;
using ProjNet.Services;
using ProjNet.States;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;

namespace IRefl.Producers
{
  public class ServerObjectProducer
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static CodeObjectProducer GetProcess(string item)
    {
      int num1 = 9;
      string str1;
      CodeObjectProducer process;
      while (true)
      {
        uint stringHash;
        int num2;
        string str2;
        Param obj;
        CodeObjectProducer codeObjectProducer;
        StringReader task;
        string s;
        switch (num1)
        {
          case 0:
          case 9:
            codeObjectProducer = (CodeObjectProducer) null;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_10;
          case 1:
            if (stringHash == 1878324148U)
            {
              if (s == "PROJCS")
                goto label_9;
              else
                goto label_10;
            }
            else if (stringHash != 2247730021U || !(s == "GEOGCS"))
              goto label_10;
            else
              goto label_9;
          case 2:
            s = str2;
            // ISSUE: reference to a compiler-generated method
            stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(s);
            if (stringHash > 2247730021U)
            {
              if (stringHash <= 3797054307U)
              {
                if (stringHash == 2342259385U)
                {
                  if (s == "GEOCCS")
                    goto label_9;
                  else
                    goto label_10;
                }
                else if (stringHash == 3517975221U)
                {
                  if (s == "COMPD_CS")
                    goto label_9;
                  else
                    goto label_10;
                }
                else if (stringHash == 3797054307U)
                {
                  if (!(s == "LOCAL_CS"))
                  {
                    if (!ServerObjectProducer.DeleteList())
                    {
                      num1 = 11;
                      continue;
                    }
                    goto case 1;
                  }
                  else
                    goto label_9;
                }
                else
                  goto label_10;
              }
              else if (stringHash == 3835272864U)
              {
                if (s == "FITTED_CS")
                  goto label_9;
                else
                  goto label_10;
              }
              else if (stringHash != 4015832123U)
              {
                if (stringHash == 4100628567U && s == "PRIMEM")
                {
                  codeObjectProducer = (CodeObjectProducer) ServerObjectProducer.SetupProcess(obj);
                  goto case 12;
                }
                else
                  goto label_10;
              }
              else if (s == "SPHEROID")
              {
                codeObjectProducer = (CodeObjectProducer) ServerObjectProducer.PopProcess(obj);
                goto case 12;
              }
              else
                goto label_10;
            }
            else if (stringHash > 638013191U)
            {
              if (stringHash == 1404502957U)
              {
                if (!(s == "VERT_CS"))
                {
                  num2 = 7;
                  break;
                }
                goto label_9;
              }
              else
                goto case 1;
            }
            else if (stringHash == 11355852U)
            {
              if (s == "DATUM")
              {
                codeObjectProducer = (CodeObjectProducer) ServerObjectProducer.FillProcess(obj);
                if (!ServerObjectProducer.DeleteList())
                {
                  num1 = 12;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_10;
            }
            else if (stringHash == 638013191U)
            {
              if (s == "UNIT")
              {
                codeObjectProducer = (CodeObjectProducer) ServerObjectProducer.CompareProcess(obj);
                goto case 12;
              }
              else
                goto label_10;
            }
            else
            {
              num2 = 8;
              break;
            }
          case 3:
            str2 = str1;
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto case 6;
          case 4:
          case 10:
            process = codeObjectProducer;
            if (ServerObjectProducer.SelectList())
            {
              num1 = 13;
              continue;
            }
            goto label_10;
          case 5:
            task = new StringReader(item);
            obj = new Param((TextReader) task);
            num1 = 6;
            continue;
          case 6:
            int num3 = (int) obj.ConcatProcess();
            str1 = obj.MoveProcess();
            num2 = 3;
            break;
          case 7:
          case 8:
          case 11:
            goto label_10;
          case 12:
label_11:
            task.Close();
            num2 = 4;
            break;
          case 13:
            goto label_45;
          default:
            if (ServerObjectProducer.SelectList())
            {
              num1 = 1;
              continue;
            }
            goto case 3;
        }
        num1 = num2;
        continue;
label_9:
        codeObjectProducer = (CodeObjectProducer) ServerObjectProducer.ViewProcess(item, obj);
        goto label_11;
      }
label_10:
      throw new ArgumentException(string.Format("'{0}' is not recognized.", (object) str1));
label_45:
      return process;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Candidate CompareProcess(Param reference)
    {
      int num1 = 0;
      Candidate candidate;
      while (true)
      {
        int num2;
        double def;
        string result;
        string empty;
        long pred;
        switch (num1)
        {
          case 0:
            reference.ValidateProcess("[");
            num2 = 6;
            break;
          case 1:
          case 4:
            goto label_6;
          case 2:
          case 3:
            int num3 = (int) reference.ConcatProcess();
            if (!(reference.MoveProcess() == ","))
              goto label_6;
            else
              goto case 5;
          case 5:
            reference.CalculateProcess(ref empty, ref pred);
            reference.ValidateProcess("]");
            num2 = 1;
            break;
          case 6:
            result = reference.AwakeProcess();
            reference.ValidateProcess(",");
            int num4 = (int) reference.ConcatProcess();
            def = reference.ExcludeProcess();
            empty = string.Empty;
            pred = -1L;
            num2 = 3;
            break;
          case 7:
            goto label_10;
          default:
            if (ServerObjectProducer.SelectList())
            {
              num1 = 5;
              continue;
            }
            goto case 1;
        }
label_2:
        num1 = num2;
        continue;
label_6:
        candidate = (Candidate) new AlgoTokenizerDef(def, result, empty, pred, string.Empty, string.Empty, string.Empty);
        num2 = 7;
        goto label_2;
      }
label_10:
      return candidate;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static TagStatusService LoginProcess(Param instance)
    {
      int num1 = 4;
      TagStatusService tagStatusService;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          string empty;
          long pred;
          string cust;
          double key;
          switch (num2)
          {
            case 0:
            case 3:
              instance.CalculateProcess(ref empty, ref pred);
              num2 = 6;
              continue;
            case 1:
            case 2:
              cust = instance.AwakeProcess();
              instance.ValidateProcess(",");
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 5;
            case 4:
              goto label_2;
            case 5:
              int num3 = (int) instance.ConcatProcess();
              key = instance.ExcludeProcess();
              empty = string.Empty;
              pred = -1L;
              int num4 = (int) instance.ConcatProcess();
              if (!(instance.MoveProcess() == ","))
                break;
              goto case 0;
            case 6:
              instance.ValidateProcess("]");
              break;
            case 7:
              goto label_11;
            default:
              goto label_8;
          }
          tagStatusService = (TagStatusService) new AdvisorStatusMap(key, cust, empty, pred, string.Empty, string.Empty, string.Empty);
          num2 = 7;
        }
label_2:
        instance.ValidateProcess("[");
        num1 = 2;
        continue;
label_8:
        num1 = 0;
      }
label_11:
      return tagStatusService;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static StructTokenizerDef ListProcess(Param task)
    {
      int num1 = 2;
      StructTokenizerDef structTokenizerDef;
      while (true)
      {
        int num2 = num1;
        string pol;
        while (true)
        {
          switch (num2)
          {
            case 0:
              pol = task.AwakeProcess();
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_7;
            case 1:
            case 4:
              goto label_3;
            case 2:
              task.ValidateProcess("[");
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_3;
            case 3:
            case 6:
              goto label_1;
            case 5:
              goto label_7;
            case 7:
              goto label_12;
            default:
              goto label_10;
          }
        }
label_1:
        long pred = -1;
        num1 = 1;
        continue;
label_3:
        int num3 = (int) task.ConcatProcess();
        string empty;
        if (task.MoveProcess() == ",")
        {
          task.CalculateProcess(ref empty, ref pred);
          task.ValidateProcess("]");
        }
        double asset;
        structTokenizerDef = (StructTokenizerDef) new Message(asset, pol, empty, pred, string.Empty, string.Empty, string.Empty);
        num1 = 7;
        continue;
label_7:
        task.ValidateProcess(",");
        int num4 = (int) task.ConcatProcess();
        asset = task.ExcludeProcess();
        empty = string.Empty;
        goto label_1;
label_10:
        num1 = 6;
      }
label_12:
      return structTokenizerDef;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Strategy VerifyProcess(Param reference)
    {
      int num1 = 1;
      string upper;
      string first;
      Strategy strategy;
      string str;
      uint stringHash;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_6;
            case 1:
              goto label_28;
            case 2:
            case 8:
            case 11:
            case 12:
              goto label_36;
            case 3:
              if (!flag)
                break;
              goto label_8;
            case 4:
            case 5:
            case 6:
              goto label_35;
            case 7:
              reference.ValidateProcess("AXIS");
              break;
            case 9:
              goto label_15;
            case 10:
              if (stringHash <= 1699709860U)
              {
                if (stringHash != 651557717U)
                {
                  if (stringHash != 1660128160U)
                  {
                    if (ServerObjectProducer.SelectList())
                    {
                      num2 = 9;
                      continue;
                    }
                    goto label_15;
                  }
                  else
                    goto label_1;
                }
                else
                  goto label_21;
              }
              else if (stringHash > 2842644412U)
              {
                if (stringHash == 2918165742U)
                {
                  if (upper == "WEST")
                  {
                    strategy = new Strategy(first, ElementNameStyle.West);
                    num2 = 12;
                    continue;
                  }
                  goto label_35;
                }
                else if (stringHash == 3062943450U)
                {
                  if (!(upper == "SOUTH"))
                  {
                    if (!ServerObjectProducer.DeleteList())
                    {
                      num2 = 4;
                      continue;
                    }
                    goto label_36;
                  }
                  else
                    goto label_27;
                }
                else
                  goto label_35;
              }
              else
                goto label_17;
            default:
              num2 = 5;
              continue;
          }
          reference.ValidateProcess("[");
          first = reference.AwakeProcess();
          reference.ValidateProcess(",");
          int num3 = (int) reference.ConcatProcess();
          if (!ServerObjectProducer.DeleteList())
            num2 = 0;
          else
            goto label_35;
        }
label_6:
        str = reference.MoveProcess();
        reference.ValidateProcess("]");
        upper = str.ToUpper(CultureInfo.InvariantCulture);
        // ISSUE: reference to a compiler-generated method
        stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(upper);
        num1 = 10;
        continue;
label_8:
        num1 = 7;
        continue;
label_17:
        if (stringHash != 1894199125U)
        {
          if (stringHash == 2842644412U && upper == "EAST")
          {
            strategy = new Strategy(first, ElementNameStyle.East);
            num1 = 11;
            continue;
          }
          goto label_35;
        }
        else
          goto label_32;
label_27:
        strategy = new Strategy(first, ElementNameStyle.South);
        num1 = 2;
        continue;
label_28:
        flag = reference.MoveProcess() != "AXIS";
        num1 = 3;
      }
label_1:
      if (upper == "UP")
      {
        strategy = new Strategy(first, ElementNameStyle.Up);
        goto label_36;
      }
      else
        goto label_35;
label_15:
      if (stringHash == 1699709860U && upper == "NORTH")
      {
        strategy = new Strategy(first, ElementNameStyle.North);
        goto label_36;
      }
      else
        goto label_35;
label_21:
      if (upper == "DOWN")
      {
        strategy = new Strategy(first, ElementNameStyle.Down);
        goto label_36;
      }
      else
        goto label_35;
label_32:
      if (upper == "OTHER")
      {
        strategy = new Strategy(first, ElementNameStyle.Other);
        goto label_36;
      }
label_35:
      throw new ArgumentException("Invalid axis name '" + str + "' in WKT");
label_36:
      return strategy;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Reg ViewProcess(string i, Param result)
    {
      int num1 = 8;
      string s;
      Reg reg;
      string str;
      uint stringHash;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 8:
            str = result.MoveProcess();
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_6;
          case 1:
          case 7:
            do
            {
              s = str;
              // ISSUE: reference to a compiler-generated method
              stringHash = \u003CPrivateImplementationDetails\u003E.ComputeStringHash(s);
              if (stringHash > 2247730021U)
              {
                if (stringHash > 3517975221U)
                {
                  if (stringHash != 3797054307U)
                  {
                    if (stringHash == 3835272864U)
                    {
                      if (s == "FITTED_CS")
                        goto label_29;
                    }
                    else
                      goto label_30;
                  }
                  else
                    goto label_1;
                }
                else
                  goto label_24;
              }
              else
                goto label_18;
            }
            while (!ServerObjectProducer.SelectList());
            goto label_20;
label_18:
            if (stringHash == 1404502957U)
            {
              if (!(s == "VERT_CS"))
              {
                if (ServerObjectProducer.SelectList())
                {
                  num1 = 4;
                  continue;
                }
                goto label_30;
              }
              else
                goto label_29;
            }
            else
            {
              if (ServerObjectProducer.SelectList())
              {
                num1 = 2;
                continue;
              }
              goto case 2;
            }
label_24:
            int num2 = 3;
            num1 = ServerObjectProducer.DeleteList() ? num2 : num2;
            continue;
label_20:
            num1 = 6;
            continue;
          case 2:
            if (stringHash == 1878324148U)
            {
              if (s == "PROJCS")
              {
                reg = (Reg) ServerObjectProducer.PrepareProcess(result);
                if (true)
                {
                  num1 = 9;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_30;
            }
            else
              goto label_22;
          case 3:
            goto label_25;
          case 4:
          case 6:
            goto label_30;
          case 5:
            goto label_6;
          case 9:
            goto label_31;
          default:
            num1 = 5;
            continue;
        }
      }
label_1:
      if (s == "LOCAL_CS")
        goto label_29;
      else
        goto label_30;
label_6:
      if (stringHash != 3517975221U || !(s == "COMPD_CS"))
        goto label_30;
      else
        goto label_29;
label_22:
      if (stringHash == 2247730021U && s == "GEOGCS")
      {
        reg = (Reg) ServerObjectProducer.CancelProcess(result);
        goto label_31;
      }
      else
        goto label_30;
label_25:
      if (stringHash == 2342259385U)
      {
        if (!(s == "GEOCCS"))
          goto label_30;
      }
      else
        goto label_6;
label_29:
      throw new NotSupportedException(string.Format("{0} coordinate system is not supported.", (object) i));
label_30:
      throw new InvalidOperationException(string.Format("{0} coordinate system is not recognized.", (object) i));
label_31:
      return reg;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static FieldTemplate RegisterProcess(Param info)
    {
      int num1 = 2;
      FieldTemplate fieldTemplate1;
      while (true)
      {
        int num2 = num1;
        FieldTemplate fieldTemplate2;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_10;
            case 1:
              goto label_9;
            case 3:
              if (flag)
              {
                int num3 = (int) info.ConcatProcess();
                fieldTemplate2.setter = info.ExcludeProcess();
                if (true)
                {
                  num2 = 10;
                  continue;
                }
                goto label_9;
              }
              else
                goto label_2;
            case 4:
              goto label_11;
            case 5:
              goto label_13;
            case 6:
              goto label_18;
            case 7:
              goto label_6;
            case 8:
            case 10:
              goto label_1;
            case 9:
              info.ValidateProcess(",");
              int num4 = (int) info.ConcatProcess();
              fieldTemplate2._Manager = info.ExcludeProcess();
              int num5 = (int) info.ConcatProcess();
              flag = info.MoveProcess() == ",";
              num2 = 3;
              continue;
            case 11:
              goto label_19;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_18;
          }
        }
label_1:
label_2:
label_3:
        if (info.MoveProcess() != "]")
          info.ValidateProcess("]");
        fieldTemplate1 = fieldTemplate2;
        num1 = 11;
        continue;
label_6:
        fieldTemplate2 = new FieldTemplate();
        int num6 = (int) info.ConcatProcess();
        num1 = 4;
        continue;
label_9:
        info.ValidateProcess(",");
        int num7 = (int) info.ConcatProcess();
        fieldTemplate2.@base = info.ExcludeProcess();
        num1 = 9;
        continue;
label_10:
        info.ValidateProcess("[");
        num1 = 7;
        continue;
label_11:
        fieldTemplate2.m_Expression = info.ExcludeProcess();
        info.ValidateProcess(",");
        int num8 = (int) info.ConcatProcess();
        num1 = 6;
        continue;
label_13:
        info.ValidateProcess(",");
        int num9 = (int) info.ConcatProcess();
        fieldTemplate2.m_Producer = info.ExcludeProcess();
        int num10 = (int) info.ConcatProcess();
        if (info.MoveProcess() == ",")
        {
          int num11 = (int) info.ConcatProcess();
          fieldTemplate2.attribute = info.ExcludeProcess();
          goto label_9;
        }
        else
          goto label_3;
label_18:
        fieldTemplate2.val = info.ExcludeProcess();
        num1 = 5;
      }
label_19:
      return fieldTemplate1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Page PopProcess(Param asset)
    {
      int num1 = 6;
      if (ServerObjectProducer.DeleteList())
        ;
      Page page;
      while (true)
      {
        bool flag;
        int num2;
        string result4;
        double pool;
        string empty;
        long pred;
        double v;
        switch (num1)
        {
          case 0:
          case 6:
            asset.ValidateProcess("[");
            num1 = 5;
            continue;
          case 1:
            int num3 = (int) asset.ConcatProcess();
            v = asset.ExcludeProcess();
            num2 = 7;
            break;
          case 2:
            asset.CalculateProcess(ref empty, ref pred);
            asset.ValidateProcess("]");
            goto label_9;
          case 3:
          case 4:
            if (flag)
            {
              num2 = 2;
              break;
            }
            goto label_9;
          case 5:
            result4 = asset.AwakeProcess();
            asset.ValidateProcess(",");
            int num4 = 1;
            num1 = ServerObjectProducer.DeleteList() ? num4 : num4;
            continue;
          case 7:
            asset.ValidateProcess(",");
            int num5 = (int) asset.ConcatProcess();
            pool = asset.ExcludeProcess();
            int num6 = (int) asset.ConcatProcess();
            empty = string.Empty;
            pred = -1L;
            flag = asset.MoveProcess() == ",";
            goto case 3;
          case 8:
            goto label_12;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        continue;
label_9:
        page = (Page) new ExporterTemplate(v, 0.0, pool, true, AdvisorStatusMap.ViewRegistry(), result4, empty, pred, string.Empty, string.Empty, string.Empty);
        num1 = 8;
      }
label_12:
      return page;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static GlobalPrototypeAdapter SetProcess(Param res)
    {
      int num1 = 7;
      GlobalPrototypeAdapter prototypeAdapter;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          string str;
          List<Config> cust;
          string empty;
          long second3_high;
          switch (num2)
          {
            case 0:
label_12:
              break;
            case 1:
            case 5:
              empty = string.Empty;
              second3_high = -1L;
              int num3 = 3;
              num2 = ServerObjectProducer.DeleteList() ? num3 : num3;
              continue;
            case 2:
            case 8:
              goto label_10;
            case 3:
              prototypeAdapter = (GlobalPrototypeAdapter) new Params(str, cust, str, empty, second3_high, string.Empty, string.Empty, string.Empty);
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto case 1;
            case 4:
              res.ValidateProcess("PARAMETER");
              cust = new List<Config>();
              break;
            case 6:
              res.ValidateProcess("[");
              str = res.AwakeProcess();
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 4;
            case 7:
              goto label_11;
            case 9:
              goto label_15;
            default:
              num2 = 0;
              continue;
          }
          if (res.MoveProcess() == "PARAMETER")
          {
            res.ValidateProcess("[");
            string v = res.AwakeProcess();
            res.ValidateProcess(",");
            int num4 = (int) res.ConcatProcess();
            double attr = res.ExcludeProcess();
            res.ValidateProcess("]");
            res.ValidateProcess(",");
            cust.Add(new Config(v, attr));
            int num5 = (int) res.ConcatProcess();
            goto label_12;
          }
          else if (true)
            num2 = 1;
          else
            goto label_15;
        }
label_10:
        res.ValidateProcess("]");
        res.ValidateProcess(",");
        num1 = 4;
        continue;
label_11:
        res.ValidateProcess("PROJECTION");
        num1 = 6;
      }
label_15:
      return prototypeAdapter;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Instance PrepareProcess(Param first)
    {
      int num1 = 8;
      Instance nstance;
      while (true)
      {
        int num2 = num1;
        List<Strategy> reference3;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_7;
            case 1:
              goto label_1;
            case 2:
              goto label_5;
            case 3:
              goto label_15;
            case 5:
            case 9:
              if (flag)
              {
                reference3.Add(ServerObjectProducer.VerifyProcess(first));
                num2 = 2;
                continue;
              }
              goto label_21;
            case 6:
              goto label_2;
            case 7:
              goto label_12;
            case 8:
              first.ValidateProcess("[");
              if (ServerObjectProducer.SelectList())
              {
                num2 = 1;
                continue;
              }
              goto case 5;
            case 10:
              goto label_10;
            case 11:
              goto label_21;
            case 12:
              goto label_25;
            default:
              goto label_20;
          }
        }
label_1:
        string reg4 = first.AwakeProcess();
        first.ValidateProcess(",");
        first.ValidateProcess("GEOGCS");
        ReaderItemState cust = ServerObjectProducer.CancelProcess(first);
        first.ValidateProcess(",");
        GlobalPrototypeAdapter prototypeAdapter = ServerObjectProducer.SetProcess(first);
        num1 = 6;
        continue;
label_2:
        Candidate rule = (Candidate) ServerObjectProducer.LoginProcess(first);
        string empty = string.Empty;
        long pred = -1;
        int num3 = (int) first.ConcatProcess();
        reference3 = new List<Strategy>(2);
        if (first.MoveProcess() == ",")
        {
          int num4 = (int) first.ConcatProcess();
          goto label_9;
        }
        else
          goto label_13;
label_5:
        int num5 = (int) first.ConcatProcess();
        if (first.MoveProcess() == ",")
        {
          num1 = 0;
          continue;
        }
        goto label_8;
label_7:
        int num6 = (int) first.ConcatProcess();
label_8:
label_9:
        flag = first.MoveProcess() == "AXIS";
        num1 = 9;
        continue;
label_10:
        reference3.Add(new Strategy("Y", ElementNameStyle.North));
label_11:
        nstance = (Instance) new Visitor(cust.ValidateItem(), cust, (TagStatusService) (rule as AdvisorStatusMap), prototypeAdapter, reference3, reg4, empty, pred, string.Empty, string.Empty, string.Empty);
        num1 = 12;
        continue;
label_12:
label_13:
        if (reference3.Count == 0)
        {
          reference3.Add(new Strategy("X", ElementNameStyle.East));
          num1 = 10;
          continue;
        }
        goto label_11;
label_15:
        first.ValidateProcess("]");
        num1 = 7;
        continue;
label_20:
        num1 = 11;
        continue;
label_21:
        if (first.MoveProcess() == ",")
        {
          int num7 = (int) first.ConcatProcess();
        }
        if (first.MoveProcess() == "AUTHORITY")
        {
          first.CalculateProcess(ref empty, ref pred);
          num1 = 3;
        }
        else
          goto label_12;
      }
label_25:
      return nstance;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static ReaderItemState CancelProcess(Param asset)
    {
      int num1 = 1;
      ReaderItemState readerItemState;
      while (true)
      {
        int num2 = num1;
        Initializer selection;
        string second3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_8;
            case 1:
              asset.ValidateProcess("[");
              if (!ServerObjectProducer.DeleteList())
              {
                num2 = 10;
                continue;
              }
              goto case 5;
            case 2:
              goto label_1;
            case 3:
              goto label_26;
            case 4:
              asset.ValidateProcess("DATUM");
              if (ServerObjectProducer.SelectList())
              {
                num2 = 5;
                continue;
              }
              goto label_24;
            case 5:
              selection = ServerObjectProducer.FillProcess(asset);
              asset.ValidateProcess(",");
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_11;
            case 6:
            case 11:
              goto label_11;
            case 7:
            case 12:
              goto label_21;
            case 8:
              goto label_24;
            case 9:
              goto label_15;
            case 10:
              second3 = asset.AwakeProcess();
              asset.ValidateProcess(",");
              num2 = 4;
              continue;
            case 13:
              goto label_27;
            default:
              num2 = 11;
              continue;
          }
        }
label_1:
        string empty;
        long pred;
        if (asset.MoveProcess() == "AUTHORITY")
        {
          asset.CalculateProcess(ref empty, ref pred);
          asset.ValidateProcess("]");
        }
label_4:
        List<Strategy> cont2;
        if (cont2.Count == 0)
        {
          cont2.Add(new Strategy("Lon", ElementNameStyle.East));
          cont2.Add(new Strategy("Lat", ElementNameStyle.North));
        }
        StructTokenizerDef def;
        DispatcherValueManager template;
        readerItemState = (ReaderItemState) new InitializerItemState(def, selection, template, cont2, second3, empty, pred, string.Empty, string.Empty, string.Empty);
        num1 = 13;
        continue;
label_8:
        asset.ValidateProcess("PRIMEM");
        num1 = 9;
        continue;
label_11:
        bool flag1;
        if (flag1)
        {
          int num3 = (int) asset.ConcatProcess();
        }
label_14:
        bool flag2 = asset.MoveProcess() == "AXIS";
        num1 = 12;
        continue;
label_15:
        template = ServerObjectProducer.SetupProcess(asset);
        asset.ValidateProcess(",");
        asset.ValidateProcess("UNIT");
        def = ServerObjectProducer.ListProcess(asset);
        empty = string.Empty;
        pred = -1L;
        int num4 = (int) asset.ConcatProcess();
        cont2 = new List<Strategy>(2);
        if (asset.MoveProcess() == ",")
        {
          int num5 = (int) asset.ConcatProcess();
          goto label_14;
        }
        else
          goto label_4;
label_21:
        if (flag2)
        {
          cont2.Add(ServerObjectProducer.VerifyProcess(asset));
          int num6 = (int) asset.ConcatProcess();
          flag1 = asset.MoveProcess() == ",";
          goto label_11;
        }
        else
        {
          num1 = 3;
          continue;
        }
label_24:
        bool flag3;
        if (flag3)
        {
          int num7 = (int) asset.ConcatProcess();
          num1 = 2;
          continue;
        }
        goto label_1;
label_26:
        flag3 = asset.MoveProcess() == ",";
        num1 = 8;
      }
label_27:
      return readerItemState;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Initializer FillProcess(Param def)
    {
      int num1 = 8;
      Initializer nitializer;
      while (true)
      {
        Page instance;
        int num2;
        string vis2;
        string empty;
        long pred;
        FieldTemplate caller;
        switch (num1)
        {
          case 0:
            def.CalculateProcess(ref empty, ref pred);
            num2 = 2;
            break;
          case 1:
label_14:
            if (def.MoveProcess() == "TOWGS84")
            {
              caller = ServerObjectProducer.RegisterProcess(def);
              int num3 = (int) def.ConcatProcess();
              goto label_11;
            }
            else
            {
              if (def.MoveProcess() == "AUTHORITY")
              {
                num2 = 0;
                break;
              }
              goto label_11;
            }
          case 2:
          case 6:
            def.ValidateProcess("]");
            goto label_11;
          case 3:
          case 4:
            def.ValidateProcess(",");
            def.ValidateProcess("SPHEROID");
            instance = ServerObjectProducer.PopProcess(def);
            int num4 = (int) def.ConcatProcess();
            goto label_12;
          case 5:
            def.ValidateProcess("[");
            vis2 = def.AwakeProcess();
            num2 = 4;
            break;
          case 7:
            empty = string.Empty;
            pred = -1L;
            num2 = 5;
            break;
          case 8:
            caller = (FieldTemplate) null;
            num1 = 7;
            continue;
          case 9:
            goto label_18;
          default:
            num1 = 1;
            continue;
        }
label_3:
        num1 = num2;
        continue;
label_11:
label_12:
        if (def.MoveProcess() == ",")
        {
          int num5 = (int) def.ConcatProcess();
          goto label_14;
        }
        else
        {
          nitializer = (Initializer) new Token(instance, caller, (TestPageOption) 1002, vis2, empty, pred, string.Empty, string.Empty, string.Empty);
          num2 = 9;
          goto label_3;
        }
      }
label_18:
      return nitializer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static DispatcherValueManager SetupProcess(Param spec)
    {
      int num1 = 6;
      DispatcherValueManager dispatcherValueManager;
      while (true)
      {
        int num2 = num1;
        string empty;
        long pred;
        bool flag;
        double num3;
        string template;
        while (true)
        {
          switch (num2)
          {
            case 0:
              template = spec.AwakeProcess();
              spec.ValidateProcess(",");
              num2 = 7;
              continue;
            case 1:
              goto label_3;
            case 2:
            case 7:
              goto label_11;
            case 3:
            case 5:
              if (flag)
              {
                spec.CalculateProcess(ref empty, ref pred);
                spec.ValidateProcess("]");
              }
              dispatcherValueManager = (DispatcherValueManager) new HelperValueManager(num3, (StructTokenizerDef) Message.RunProcess(), template, empty, pred, string.Empty, string.Empty, string.Empty);
              num2 = 8;
              continue;
            case 4:
              goto label_1;
            case 6:
              goto label_2;
            case 8:
              goto label_12;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        empty = string.Empty;
        pred = -1L;
        flag = spec.MoveProcess() == ",";
        num1 = 3;
        continue;
label_2:
        spec.ValidateProcess("[");
        num1 = 0;
        continue;
label_3:
        num3 = spec.ExcludeProcess();
        int num4 = (int) spec.ConcatProcess();
        goto label_1;
label_11:
        int num5 = (int) spec.ConcatProcess();
        num1 = 1;
      }
label_12:
      return dispatcherValueManager;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ServerObjectProducer()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool SelectList() => true;

    internal static bool DeleteList() => false;
  }
}
