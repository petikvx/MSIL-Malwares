// Decompiled with JetBrains decompiler
// Type: Countdown
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

internal class Countdown : IEnumerator
{
  private int count = 8;

  public bool MoveNext()
  {
label_1:
    int num1 = 1938556956;
    int num2;
    bool flag;
    while (true)
    {
      uint num3;
      switch ((num3 = (uint) (num1 ^ 1490654121)) % 5U)
      {
        case 0:
          num1 = (int) num3 * 1349736694 ^ -423669850;
          continue;
        case 2:
          goto label_1;
        case 3:
          flag = num2 > 2;
          num1 = (int) num3 * 1226135398 ^ -158682106;
          continue;
        case 4:
          num2 = this.count--;
          num1 = (int) num3 * 942337470 ^ -1268877877;
          continue;
        default:
          goto label_6;
      }
    }
label_6:
    return flag;
  }

  public object Current
  {
    get
    {
label_1:
      int num1 = 971855409;
      object count;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 19766088)) % 4U)
        {
          case 1:
            count = (object) this.count;
            num1 = (int) num2 * 253606362 ^ 2109417841;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1448769762 ^ 1353953210;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return count;
    }
  }
}
