// Decompiled with JetBrains decompiler
// Type: 091015534910.508594399660
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003091015534910;
using \u003365260957738;
using \u003882244590153;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace \u003091015534910
{
  public static class \u003508594399660
  {
    public static IReadOnlyDictionary<\u003212044566473, byte[]> \u003045735509098 { get; } = (IReadOnlyDictionary<\u003212044566473, byte[]>) new Dictionary<\u003212044566473, byte[]>()
    {
      [\u003212044566473.Utf8] = new byte[3]
      {
        (byte) 239,
        (byte) 187,
        (byte) 191
      },
      [\u003212044566473.Utf16Le] = new byte[2]
      {
        byte.MaxValue,
        (byte) 254
      },
      [\u003212044566473.Utf16Be] = new byte[2]
      {
        (byte) 254,
        byte.MaxValue
      },
      [\u003212044566473.Utf32Le] = new byte[4]
      {
        byte.MaxValue,
        (byte) 254,
        (byte) 0,
        (byte) 0
      },
      [\u003212044566473.Utf32Be] = new byte[4]
      {
        (byte) 0,
        (byte) 0,
        (byte) 254,
        byte.MaxValue
      }
    };

    public static byte[] \u003460105282289(this Encoding _param0)
    {
      \u003212044566473? nullable = \u003644200489604.\u003958800270826(_param0.WebName);
      byte[] numArray;
      return nullable.HasValue && \u003508594399660.\u003045735509098.TryGetValue(nullable.Value, out numArray) ? numArray : (byte[]) null;
    }

    public static string \u003867310156419(this Encoding _param0, byte[] _param1, out bool _param2)
    {
      byte[] second = _param0.\u003460105282289();
      _param2 = second != null && ((IEnumerable<byte>) _param1).Take<byte>(second.Length).SequenceEqual<byte>((IEnumerable<byte>) second);
      int index = _param2 ? second.Length : 0;
      return _param0.GetString(_param1, index, _param1.Length - index);
    }

    public static byte[] \u003405898094913(this Encoding _param0, string _param1, bool _param2)
    {
      if (!_param2)
        return _param0.GetBytes(_param1);
      byte[] sourceArray = _param0.\u003460105282289();
      byte[] numArray = new byte[_param0.GetByteCount(_param1) + (sourceArray != null ? sourceArray.Length : 0)];
      _param0.GetBytes(_param1, 0, _param1.Length, numArray, sourceArray != null ? sourceArray.Length : 0);
      if (sourceArray != null)
        Array.Copy((Array) sourceArray, (Array) numArray, sourceArray.Length);
      return numArray;
    }
  }
}
