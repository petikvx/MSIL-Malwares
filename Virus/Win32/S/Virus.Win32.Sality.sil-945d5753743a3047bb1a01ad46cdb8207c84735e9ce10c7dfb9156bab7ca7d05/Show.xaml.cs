// Decompiled with JetBrains decompiler
// Type: Appointments.Show
// Assembly: Appointments, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 296A15D6-EEB9-4ED6-B937-9857DD43439A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Sality.sil-945d5753743a3047bb1a01ad46cdb8207c84735e9ce10c7dfb9156bab7ca7d05.exe

using Microsoft.Windows.Controls;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;

namespace Appointments
{
  [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
  public partial class Show : Window, IComponentConnector
  {
    private myAppointmentsDataContext DC = new myAppointmentsDataContext();
    internal GroupBox groupBox_showAppointments;
    internal Label label8;
    internal Label label9;
    internal ComboBox comboBox_showAppointmentsDoctor;
    internal DatePicker datePicker_showAppointmentDate;
    internal Separator separator2;
    internal ListView listView_appointmentsList;
    internal Button button_close;
    private bool _contentLoaded;

    public Show() => this.InitializeComponent();

    private void Window_Loaded(object sender, RoutedEventArgs e)
    {
      this.datePicker_showAppointmentDate.SelectedDate = new DateTime?(DateTime.Today);
      IQueryable<string> source = this.DC.Doctors.Select<Doctor, string>((System.Linq.Expressions.Expression<Func<Doctor, string>>) (doc => doc.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_showAppointmentsDoctor.ItemsSource = (IEnumerable) source;
      this.comboBox_showAppointmentsDoctor.SelectedIndex = -1;
      if (source.Count<string>() == 1)
      {
        this.comboBox_showAppointmentsDoctor.SelectedIndex = 0;
        this.listView_appointmentsList.ItemsSource = (IEnumerable) this.DC.Appointments.Where<Appointment>((System.Linq.Expressions.Expression<Func<Appointment, bool>>) (myApp => (DateTime?) myApp.Appointment_Date == this.datePicker_showAppointmentDate.SelectedDate && myApp.Doctor.Name == this.comboBox_showAppointmentsDoctor.SelectedItem.ToString())).Select(myApp => new
        {
          Name = myApp.Patient.Name,
          Appointment_Time = myApp.Appointment_Time
        });
      }
    }

    private void comboBox_showAppointmentsDoctor_DropDownOpened(object sender, EventArgs e)
    {
      IQueryable<string> source = this.DC.Doctors.Select<Doctor, string>((System.Linq.Expressions.Expression<Func<Doctor, string>>) (doc => doc.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_showAppointmentsDoctor.ItemsSource = (IEnumerable) source;
    }

    private void datePicker_showAppointmentDate_SelectedDateChanged(
      object sender,
      SelectionChangedEventArgs e)
    {
      if (this.comboBox_showAppointmentsDoctor.SelectedIndex == -1)
        return;
      IQueryable<\u003C\u003Ef__AnonymousType0<string, TimeSpan>> source = this.DC.Appointments.Where<Appointment>((System.Linq.Expressions.Expression<Func<Appointment, bool>>) (myApp => (DateTime?) myApp.Appointment_Date == this.datePicker_showAppointmentDate.SelectedDate && myApp.Doctor.Name == this.comboBox_showAppointmentsDoctor.SelectedItem.ToString())).Select(myApp => new
      {
        Name = myApp.Patient.Name,
        Appointment_Time = myApp.Appointment_Time
      });
      if (source.Count() == 0)
      {
        int num = (int) MessageBox.Show("لا يوجد أي موعد محدد حسب الإعدادات المطلوبة", "رسالة إعلامية", MessageBoxButton.OK, MessageBoxImage.Asterisk);
      }
      else
        this.listView_appointmentsList.ItemsSource = (IEnumerable) source;
    }

    private void comboBox_showAppointmentsDoctor_SelectionChanged(
      object sender,
      SelectionChangedEventArgs e)
    {
      IQueryable<\u003C\u003Ef__AnonymousType0<string, TimeSpan>> source = this.DC.Appointments.Where<Appointment>((System.Linq.Expressions.Expression<Func<Appointment, bool>>) (myApp => (DateTime?) myApp.Appointment_Date == this.datePicker_showAppointmentDate.SelectedDate && myApp.Doctor.Name == this.comboBox_showAppointmentsDoctor.SelectedItem.ToString())).Select(myApp => new
      {
        Name = myApp.Patient.Name,
        Appointment_Time = myApp.Appointment_Time
      });
      if (source.Count() == 0)
      {
        int num = (int) MessageBox.Show("لا يوجد أي موعد محدد حسب الإعدادات المطلوبة", "رسالة إعلامية", MessageBoxButton.OK, MessageBoxImage.Asterisk);
      }
      else
        this.listView_appointmentsList.ItemsSource = (IEnumerable) source;
    }

    private void button_close_Click(object sender, RoutedEventArgs e) => this.Close();

    [DebuggerNonUserCode]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/Appointments;component/show.xaml", UriKind.Relative));
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.groupBox_showAppointments = (GroupBox) target;
          break;
        case 3:
          this.label8 = (Label) target;
          break;
        case 4:
          this.label9 = (Label) target;
          break;
        case 5:
          this.comboBox_showAppointmentsDoctor = (ComboBox) target;
          this.comboBox_showAppointmentsDoctor.DropDownOpened += new EventHandler(this.comboBox_showAppointmentsDoctor_DropDownOpened);
          this.comboBox_showAppointmentsDoctor.SelectionChanged += new SelectionChangedEventHandler(this.comboBox_showAppointmentsDoctor_SelectionChanged);
          break;
        case 6:
          this.datePicker_showAppointmentDate = (DatePicker) target;
          this.datePicker_showAppointmentDate.SelectedDateChanged += new EventHandler<SelectionChangedEventArgs>(this.datePicker_showAppointmentDate_SelectedDateChanged);
          break;
        case 7:
          this.separator2 = (Separator) target;
          break;
        case 8:
          this.listView_appointmentsList = (ListView) target;
          break;
        case 9:
          this.button_close = (Button) target;
          this.button_close.Click += new RoutedEventHandler(this.button_close_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
