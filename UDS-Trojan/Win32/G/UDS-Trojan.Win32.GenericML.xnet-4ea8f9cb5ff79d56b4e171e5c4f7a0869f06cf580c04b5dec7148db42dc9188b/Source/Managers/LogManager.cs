// Decompiled with JetBrains decompiler
// Type: Path_Finder.Source.Managers.LogManager
// Assembly: TypeDelega, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FEF18FA9-51E7-447C-8FC7-9441C6E3C0DE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4ea8f9cb5ff79d56b4e171e5c4f7a0869f06cf580c04b5dec7148db42dc9188b.exe

using Path_Finder.DataTypes;
using System;
using System.Collections.Generic;
using System.Windows.Controls;
using System.Windows.Threading;

namespace Path_Finder.Source.Managers
{
  public class LogManager
  {
    public TextBox textBox { get; private set; }

    public LogManager() => this.textBox = (TextBox) null;

    public LogManager(TextBox _textBox) => this.textBox = _textBox;

    public void Clear() => this.textBox.Dispatcher.Invoke((Delegate) (() => this.textBox.Text = ""), DispatcherPriority.Normal, (object[]) null);

    public void PrintMessage(string message) => this.textBox.Dispatcher.Invoke((Delegate) (() =>
    {
      this.textBox.Text += message;
      this.textBox.Text += "\n";
    }), DispatcherPriority.Normal, (object[]) null);

    public void PrintBreak() => this.textBox.Dispatcher.Invoke((Delegate) (() => this.textBox.Text += "\n"), DispatcherPriority.Normal, (object[]) null);

    public void PrintLine() => this.textBox.Dispatcher.Invoke((Delegate) (() => this.textBox.Text += "---------------------------------------\n"), DispatcherPriority.Normal, (object[]) null);

    public void PrintLineBreak()
    {
      this.PrintBreak();
      this.PrintLine();
      this.PrintBreak();
    }

    public void PrintBestCity(City city, CityInfo cityInfo)
    {
      this.PrintLineBreak();
      this.textBox.Dispatcher.Invoke((Delegate) (() =>
      {
        this.textBox.Text += string.Format("Next city to explore: {0}\n", (object) city.getName());
        this.textBox.Text += string.Format("Estimated path distance: {0:0.##}\n", (object) cityInfo.PathDistance);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void PrintCityConnections(List<City> connections) => this.textBox.Dispatcher.Invoke((Delegate) (() =>
    {
      this.textBox.Text += "City connections: ";
      for (int index = 0; index < connections.Count; ++index)
      {
        if (index == 0)
          this.textBox.Text += connections[index].getName();
        else
          this.textBox.Text += string.Format(", {0}", (object) connections[index].getName());
      }
      this.textBox.Text += "\n";
    }), DispatcherPriority.Normal, (object[]) null);

    public void PrintAddedCity(City city, CityInfo cityInfo)
    {
      this.PrintBreak();
      this.textBox.Dispatcher.Invoke((Delegate) (() =>
      {
        this.textBox.Text += string.Format("Add new city: {0}\n", (object) city.getName());
        this.textBox.Text += string.Format("Distance from start: {0:0.##}\n", (object) cityInfo.FromStart);
        this.textBox.Text += string.Format("Estimated path length: {0:0.##}\n", (object) cityInfo.PathDistance);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void PrintUpdatedCity(City city, CityInfo newCityInfo, CityInfo oldCityInfo)
    {
      this.PrintBreak();
      this.textBox.Dispatcher.Invoke((Delegate) (() =>
      {
        this.textBox.Text += string.Format("Update city (shorter path): {0}\n", (object) city.getName());
        this.textBox.Text += string.Format("Old distance from start: {0:0.##}\n", (object) oldCityInfo.FromStart);
        this.textBox.Text += string.Format("New distance from start: {0:0.##}\n", (object) newCityInfo.FromStart);
        this.textBox.Text += string.Format("Estimated path length: {0:0.##}\n", (object) newCityInfo.PathDistance);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void PrintRejectedCity(City city, CityInfo newCityInfo, CityInfo oldCityInfo)
    {
      this.PrintBreak();
      this.textBox.Dispatcher.Invoke((Delegate) (() =>
      {
        this.textBox.Text += string.Format("Reject city (already visited): {0}\n", (object) city.getName());
        this.textBox.Text += string.Format("Old distance from start: {0:0.##}\n", (object) oldCityInfo.FromStart);
        this.textBox.Text += string.Format("New distance from start: {0:0.##}\n", (object) newCityInfo.FromStart);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void PrintPath(List<City> path, double pathLength)
    {
      this.PrintLineBreak();
      this.textBox.Dispatcher.Invoke((Delegate) (() =>
      {
        this.textBox.Text += "Path: ";
        for (int index = 0; index < path.Count; ++index)
        {
          if (index == 0)
            this.textBox.Text += path[index].getName();
          else
            this.textBox.Text += string.Format(" -> {0}", (object) path[index].getName());
        }
        this.textBox.Text += "\n";
        this.textBox.Text += string.Format("Path length: {0:0.##}\n", (object) pathLength);
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void PrintStartAlg(City startCity, City finalCity, Heuristic heuristic) => this.textBox.Dispatcher.Invoke((Delegate) (() =>
    {
      this.textBox.Text += "--== Starting A-star algorithm ==--\n";
      this.PrintBreak();
      switch (heuristic)
      {
        case Heuristic.Distance:
          this.textBox.Text += string.Format("Used heuristic: Minimum Distance\n");
          break;
        case Heuristic.Hops:
          this.textBox.Text += string.Format("Used heuristic: Minimum Hops\n");
          break;
      }
      this.textBox.Text += string.Format("Start city: {0}\n", (object) startCity.getName());
      this.textBox.Text += string.Format("Final city: {0}\n", (object) finalCity.getName());
    }), DispatcherPriority.Normal, (object[]) null);

    public void PrintEndAlg(bool foundThePath)
    {
      this.PrintLineBreak();
      this.textBox.Dispatcher.Invoke((Delegate) (() =>
      {
        if (foundThePath)
          this.textBox.Text += "Optimal path has been found.\n";
        else
          this.textBox.Text += "Could not find a path.\n";
        this.PrintBreak();
        this.textBox.Text += "--== End of the A-star algorithm ==--\n";
      }), DispatcherPriority.Normal, (object[]) null);
    }

    public void PrintFoundExploredCities()
    {
      this.PrintBreak();
      this.PrintMessage("Found cities are highlighted in yellow.");
      this.PrintMessage("Cities that have not been explored yet");
      this.PrintMessage("have green border.");
    }
  }
}
