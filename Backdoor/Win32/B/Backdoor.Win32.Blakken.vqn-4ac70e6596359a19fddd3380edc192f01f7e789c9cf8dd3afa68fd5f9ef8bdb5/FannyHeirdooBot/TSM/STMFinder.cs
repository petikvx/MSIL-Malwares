// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.TSM.STMFinder
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using botDebug;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot.TSM
{
  public static class STMFinder
  {
    public static int WorldGainPerTurn;

    public static double DistanceInPlanets(IPlanet first, IPlanet other)
    {
      double num1 = STMFinder.\u200F‎‮‪​‪‌⁫⁪⁯‮​‎​‍‏‭⁯⁪⁯‭‭‭‎‎⁪⁯‍​‎‌‍⁬⁯‭‎⁯⁬‎‭‮(STMFinder.\u206B⁯‎‫‏‎‌‮⁪⁭⁪​‎‏‬⁬⁬⁯‮⁯‮​‎‌‫​‏⁮⁫‫‏‌‪‬‎‏⁬⁮⁮‏‮(first.X - other.X, 2.0) + STMFinder.\u206B⁯‎‫‏‎‌‮⁪⁭⁪​‎‏‬⁬⁬⁯‮⁯‮​‎‌‫​‏⁮⁫‫‏‌‪‬‎‏⁬⁮⁮‏‮(first.Y - other.Y, 2.0));
label_1:
      int num2 = 990670472;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 1872984607)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = (int) num3 * -1724669242 ^ -315298289;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return num1;
    }

    public static IEnumerable<IPlanet> Start(List<IPlanet> planets)
    {
label_1:
      int num1 = -1103566852;
      IEnumerable<IPlanet> source1;
      IOrderedEnumerable<IPlanet> source2;
      List<IPlanet> source3;
      Stop stop;
      IPlanet startPlanet;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1442472932)) % 9U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 182951182 ^ -1358188934;
            continue;
          case 3:
            source1 = source3.OrderBy<IPlanet, double>((Func<IPlanet, double>) (planet => STMFinder.DistanceInPlanets(startPlanet, planet))).Take<IPlanet>(planets.Count / 2);
            num1 = (int) num2 * 1989398344 ^ 1432099449;
            continue;
          case 4:
            STMFinder.WorldGainPerTurn = 0;
            num1 = (int) num2 * 346324676 ^ 1930795949;
            continue;
          case 5:
            source2 = source1.ToList<IPlanet>().OrderBy<IPlanet, int>((Func<IPlanet, int>) (planet => -planet.GrowthRate));
            num1 = -276238564;
            continue;
          case 6:
            stop = new Stop(new City(startPlanet));
            num1 = (int) num2 * -969581301 ^ -44303425;
            continue;
          case 7:
            startPlanet = source3[0];
            source3.RemoveAt(0);
            num1 = (int) num2 * 500327519 ^ -1121314298;
            continue;
          case 8:
            source3 = new List<IPlanet>((IEnumerable<IPlanet>) planets);
            num1 = (int) num2 * 661638130 ^ -1705999785;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      IEnumerator<IPlanet> enumerator = source2.GetEnumerator();
      try
      {
label_14:
        int num3 = !STMFinder.\u200B​‮⁬‬‍‏‪‫⁯⁪⁪‬‎⁫‬⁮⁫⁬‍‍‎⁬‭⁪‬‍⁬‬‬‭‮​⁯⁮‭‮​‫⁪‮((IEnumerator) enumerator) ? -427592255 : (num3 = -88140747);
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1442472932)) % 5U)
          {
            case 0:
              num3 = -88140747;
              continue;
            case 1:
              goto label_14;
            case 2:
              num3 = (int) num4 * -1413148898 ^ -401936331;
              continue;
            case 3:
              IPlanet current = enumerator.Current;
              STMFinder.WorldGainPerTurn += current.GrowthRate;
              num3 = -122578050;
              continue;
            default:
              goto label_23;
          }
        }
      }
      finally
      {
        if (enumerator != null)
        {
label_18:
          int num5 = -455317693;
          while (true)
          {
            uint num6;
            switch ((num6 = (uint) (num5 ^ -1442472932)) % 4U)
            {
              case 0:
                goto label_18;
              case 1:
                num5 = (int) num6 * 1033449195 ^ 1729760193;
                continue;
              case 3:
                STMFinder.\u202A‌⁫‪‎⁪‫‬⁮⁬⁫‭​⁮​⁯‭‭⁫‫‎⁬‫⁮⁬‮⁮‭‫⁪⁬⁯‏⁫⁭⁬‍‍⁬⁫‮((IDisposable) enumerator);
                num5 = (int) num6 * -1272598140 ^ -144122595;
                continue;
              default:
                goto label_22;
            }
          }
        }
label_22:;
      }
label_23:
      List<Stop> list = source2.Select<IPlanet, Stop>((Func<IPlanet, Stop>) (planet => new Stop(new City(planet)))).ToList<Stop>();
label_24:
      int num7 = -1276582099;
      Tour tour1;
      Tour startingTour;
      IEnumerable<IPlanet> planets1;
      while (true)
      {
        uint num8;
        switch ((num8 = (uint) (num7 ^ -1442472932)) % 16U)
        {
          case 1:
            list.Insert(0, stop);
            list.Connect(true);
            num7 = (int) num8 * 276919377 ^ 837890579;
            continue;
          case 2:
            tour1 = startingTour.GenerateMutations().MinBy<Tour, double>((Func<Tour, double>) (tour => tour.Cost()));
            num7 = -1426033370;
            continue;
          case 3:
            planets1 = STMFinder.GetPlanets(startingTour, (IList<IPlanet>) planets);
            num7 = -1779915668;
            continue;
          case 4:
            num7 = (int) num8 * -1310297720 ^ -1085243665;
            continue;
          case 5:
            num7 = -1429873416;
            continue;
          case 6:
            num7 = -1841715776;
            continue;
          case 7:
            num7 = -1509172450;
            continue;
          case 8:
            startingTour = tour1;
            num7 = (int) num8 * -95955299 ^ 1148876690;
            continue;
          case 9:
            num7 = (int) num8 * 1871433778 ^ -1578829175;
            continue;
          case 10:
            int num9 = tour1.Cost() >= startingTour.Cost() ? 593379661 : (num9 = 1382135840);
            num7 = num9 ^ (int) num8 * -1320761558;
            continue;
          case 11:
            startingTour = new Tour((IEnumerable<Stop>) list);
            num7 = (int) num8 * 266639124 ^ -1808412673;
            continue;
          case 12:
            num7 = -705320251;
            continue;
          case 13:
            goto label_24;
          case 14:
            num7 = (int) num8 * -1890643254 ^ -292767749;
            continue;
          case 15:
            num7 = (int) num8 * 1176035994 ^ 857212198;
            continue;
          default:
            goto label_40;
        }
      }
label_40:
      return planets1;
    }

    private static IEnumerable<IPlanet> GetPlanets(
      Tour startingTour,
      IList<IPlanet> planets)
    {
      // ISSUE: object of a compiler-generated type is created
      return (IEnumerable<IPlanet>) new STMFinder.\u003CGetPlanets\u003Ed__3(-2)
      {
        \u003C\u003E3__startingTour = startingTour,
        \u003C\u003E3__planets = planets
      };
    }

    public static void Connect(this IEnumerable<Stop> stops, bool loop)
    {
label_1:
      int num1 = 682278525;
      Stop stop1;
      Stop stop2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 13064448)) % 4U)
        {
          case 1:
            stop1 = (Stop) null;
            stop2 = (Stop) null;
            num1 = (int) num2 * -798135760 ^ 1472837986;
            continue;
          case 2:
            num1 = (int) num2 * -431735973 ^ 126901946;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      IEnumerator<Stop> enumerator = stops.GetEnumerator();
      try
      {
label_12:
        int num3 = STMFinder.\u200B​‮⁬‬‍‏‪‫⁯⁪⁪‬‎⁫‬⁮⁫⁬‍‍‎⁬‭⁪‬‍⁬‬‬‭‮​⁯⁮‭‮​‫⁪‮((IEnumerator) enumerator) ? 1152606713 : (num3 = 615060498);
        bool flag1;
        bool flag2;
        Stop current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 13064448)) % 14U)
          {
            case 0:
              num3 = 1152606713;
              continue;
            case 1:
              num3 = (int) num4 * 420600989 ^ -1402097191;
              continue;
            case 2:
              int num5 = flag1 ? -1363968777 : (num5 = -720591912);
              num3 = num5 ^ (int) num4 * 1859655196;
              continue;
            case 3:
              current = enumerator.Current;
              num3 = 777215711;
              continue;
            case 4:
              flag1 = stop1 != null;
              num3 = 1819025074;
              continue;
            case 5:
              flag2 = stop2 == null;
              num3 = (int) num4 * -1652999851 ^ -18423964;
              continue;
            case 6:
              stop2 = current;
              num3 = (int) num4 * -1259655784 ^ -968037160;
              continue;
            case 7:
              num3 = (int) num4 * -71295206 ^ -1380660310;
              continue;
            case 9:
              num3 = (int) num4 * 1861738209 ^ 442890982;
              continue;
            case 10:
              stop1 = current;
              num3 = 1674424005;
              continue;
            case 11:
              int num6 = flag2 ? 72110633 : (num6 = 1279781233);
              num3 = num6 ^ (int) num4 * -1485885081;
              continue;
            case 12:
              stop1.Next = current;
              num3 = (int) num4 * 1077064969 ^ -1965478911;
              continue;
            case 13:
              goto label_12;
            default:
              goto label_28;
          }
        }
      }
      finally
      {
        if (enumerator != null)
        {
label_22:
          int num7 = 735325850;
          while (true)
          {
            uint num8;
            switch ((num8 = (uint) (num7 ^ 13064448)) % 4U)
            {
              case 0:
                goto label_22;
              case 1:
                num7 = (int) num8 * 1542005350 ^ -1834952079;
                continue;
              case 2:
                STMFinder.\u202A‌⁫‪‎⁪‫‬⁮⁬⁫‭​⁮​⁯‭‭⁫‫‎⁬‫⁮⁬‮⁮‭‫⁪⁬⁯‏⁫⁭⁬‍‍⁬⁫‮((IDisposable) enumerator);
                num7 = (int) num8 * -791107346 ^ -1871082763;
                continue;
              default:
                goto label_27;
            }
          }
        }
label_27:;
      }
label_28:
      bool flag = loop;
label_29:
      int num9 = 1097446940;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ 13064448)) % 5U)
        {
          case 0:
            num9 = (int) num10 * -1809944628 ^ -2064496532;
            continue;
          case 1:
            int num11 = flag ? 1702984784 : (num11 = 82425652);
            num9 = num11 ^ (int) num10 * 545069132;
            continue;
          case 2:
            goto label_31;
          case 3:
            stop1.Next = stop2;
            num9 = (int) num10 * -1136798997 ^ 1459442870;
            continue;
          case 4:
            goto label_29;
          default:
            goto label_24;
        }
      }
label_31:
      return;
label_24:;
    }

    public static T MinBy<T, TComparable>(this IEnumerable<T> xs, Func<T, TComparable> func) where TComparable : IComparable<TComparable>
    {
label_1:
      int num1 = -866489018;
      T obj;
      Func<T, TComparable> func1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -416419291)) % 6U)
        {
          case 0:
            goto label_1;
          case 2:
            obj = xs.DefaultIfEmpty<T>().Aggregate<T>((Func<T, T, T>) ((maxSoFar, elem) =>
            {
              TComparable comparable = func1(elem);
label_1:
              int num3 = -452303038;
              while (true)
              {
                uint num4;
                switch ((num4 = (uint) (num3 ^ -1887542228)) % 3U)
                {
                  case 0:
                    goto label_1;
                  case 2:
                    if (comparable.CompareTo(func1(maxSoFar)) <= 0)
                    {
                      num3 = (int) num4 * -1278719081 ^ -817566631;
                      continue;
                    }
                    goto label_6;
                  default:
                    goto label_5;
                }
              }
label_5:
              return elem;
label_6:
              return maxSoFar;
            }));
            num1 = (int) num2 * 1414583533 ^ 686185567;
            continue;
          case 3:
            func1 = func;
            num1 = (int) num2 * 628340737 ^ -1189528851;
            continue;
          case 4:
            num1 = (int) num2 * 229316191 ^ -1194583964;
            continue;
          case 5:
            num1 = (int) num2 * 546455570 ^ 142298257;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return obj;
    }

    public static IEnumerable<Stop> NearestNeighbors(this IEnumerable<Stop> stops) => (IEnumerable<Stop>) new STMFinder.\u003CNearestNeighbors\u003Ed__6(-2)
    {
      \u003C\u003E3__stops = stops
    };

    public static double DistanceWithDefense(Stop first, Stop other)
    {
label_1:
      int num1 = -164999459;
      double num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1883531218)) % 4U)
        {
          case 0:
            num1 = (int) num3 * -1516065801 ^ 107204731;
            continue;
          case 2:
            goto label_1;
          case 3:
            num2 = STMFinder.\u200F‎‮‪​‪‌⁫⁪⁯‮​‎​‍‏‭⁯⁪⁯‭‭‭‎‎⁪⁯‍​‎‌‍⁬⁯‭‎⁯⁬‎‭‮(STMFinder.\u206B⁯‎‫‏‎‌‮⁪⁭⁪​‎‏‬⁬⁬⁯‮⁯‮​‎‌‫​‏⁮⁫‫‏‌‪‬‎‏⁬⁮⁮‏‮(first.City.X - other.City.X, 2.0) + STMFinder.\u206B⁯‎‫‏‎‌‮⁪⁭⁪​‎‏‬⁬⁬⁯‮⁯‮​‎‌‫​‏⁮⁫‫‏‌‪‬‎‏⁬⁮⁮‏‮(first.City.Y - other.City.Y, 2.0));
            num1 = (int) num3 * 1906056119 ^ 1963393507;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return num2;
    }

    static double \u206B⁯‎‫‏‎‌‮⁪⁭⁪​‎‏‬⁬⁬⁯‮⁯‮​‎‌‫​‏⁮⁫‫‏‌‪‬‎‏⁬⁮⁮‏‮([In] double obj0, [In] double obj1) => Math.Pow(obj0, obj1);

    static double \u200F‎‮‪​‪‌⁫⁪⁯‮​‎​‍‏‭⁯⁪⁯‭‭‭‎‎⁪⁯‍​‎‌‍⁬⁯‭‎⁯⁬‎‭‮([In] double obj0) => Math.Sqrt(obj0);

    static bool \u200B​‮⁬‬‍‏‪‫⁯⁪⁪‬‎⁫‬⁮⁫⁬‍‍‎⁬‭⁪‬‍⁬‬‬‭‮​⁯⁮‭‮​‫⁪‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u202A‌⁫‪‎⁪‫‬⁮⁬⁫‭​⁮​⁯‭‭⁫‫‎⁬‫⁮⁬‮⁮‭‫⁪⁬⁯‏⁫⁭⁬‍‍⁬⁫‮([In] IDisposable obj0) => obj0.Dispose();
  }
}
