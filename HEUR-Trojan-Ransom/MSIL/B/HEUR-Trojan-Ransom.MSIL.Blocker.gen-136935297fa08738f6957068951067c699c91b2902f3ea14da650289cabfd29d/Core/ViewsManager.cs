// Decompiled with JetBrains decompiler
// Type: Coache.Core.ViewsManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Coache.Login;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Windows.Forms;

namespace Coache.Core
{
  internal class ViewsManager
  {
    private static Form _mainWindow;
    private static Dictionary<System.Type, Form> _Views = new Dictionary<System.Type, Form>();

    public static void SetMainWindow(Form mainWindow)
    {
      mainWindow.IsMdiContainer = true;
      ViewsManager._mainWindow = mainWindow;
    }

    public static void LoadView(Form form)
    {
      ViewsManager.ClearViews();
      form.Text = string.Empty;
      form.ShowIcon = false;
      form.ControlBox = false;
      form.Dock = DockStyle.Fill;
      form.ShowInTaskbar = false;
      form.WindowState = FormWindowState.Maximized;
      form.MdiParent = ViewsManager._mainWindow;
      form.TopMost = true;
      form.Top = 1;
      form.Show();
    }

    public static void LoadModal(Form form)
    {
      form.ShowIcon = false;
      form.MaximizeBox = false;
      form.MinimizeBox = false;
      form.FormBorderStyle = FormBorderStyle.FixedDialog;
      form.ShowInTaskbar = false;
      form.TopMost = true;
      int num = (int) form.ShowDialog();
    }

    public static void LoadMenu()
    {
      foreach (System.Type formType in ((IEnumerable<System.Type>) typeof (MainView).Assembly.GetTypes()).Where<System.Type>((Func<System.Type, bool>) (x => x.IsSubclassOf(typeof (Form)))))
      {
        if (ViewsManager.IsAccesibleForm(formType))
          ViewsManager.AddMenuItemForView(formType);
      }
      ToolStripMenuItem toolStripMenuItem = new ToolStripMenuItem("Salir", (Image) null, new EventHandler(ViewsManager.Logoff));
      ViewsManager._mainWindow.MainMenuStrip.Items.Add((ToolStripItem) toolStripMenuItem);
    }

    public static void ClearViews()
    {
      foreach (Control mdiChild in ViewsManager._mainWindow.MdiChildren)
        mdiChild.Hide();
      if (ViewsManager._mainWindow.ActiveMdiChild == null)
        return;
      ViewsManager._mainWindow.ActiveMdiChild.Hide();
    }

    public static void Alert(string message)
    {
      int num = (int) MessageBox.Show(message);
    }

    public static void Reset()
    {
      ViewsManager._mainWindow.MainMenuStrip.Items.Clear();
      ViewsManager._Views.Clear();
      ViewsManager.LoadView((Form) new LoginForm());
    }

    private static void AddMenuItemForView(System.Type formType)
    {
      ToolStripMenuItem toolStripMenuItem1 = new ToolStripMenuItem(((Control) Activator.CreateInstance(formType)).Text, (Image) null, new EventHandler(ViewsManager.Navigate));
      toolStripMenuItem1.Tag = (object) formType;
      ToolStripMenuItem toolStripMenuItem2 = toolStripMenuItem1;
      ViewsManager._mainWindow.MainMenuStrip.Items.Add((ToolStripItem) toolStripMenuItem2);
    }

    private static void Navigate(object sender, EventArgs e)
    {
      System.Type tag = (sender as ToolStripMenuItem).Tag as System.Type;
      if (ViewsManager._Views.ContainsKey(tag))
      {
        ViewsManager.LoadView(ViewsManager._Views[tag]);
      }
      else
      {
        Form instance = Activator.CreateInstance(tag) as Form;
        ViewsManager._Views.Add(tag, instance);
        ViewsManager.LoadView(instance);
      }
    }

    private static void Logoff(object sender, EventArgs e)
    {
      if (MessageBox.Show("Confirma que desea salir del sistema?", "Salir", MessageBoxButtons.OKCancel) != DialogResult.OK)
        return;
      Session.Close();
    }

    private static bool IsAccesibleForm(System.Type formType)
    {
      if ((NonNavigableAttribute) Attribute.GetCustomAttribute((MemberInfo) formType, typeof (NonNavigableAttribute)) != null)
        return false;
      PermissionRequiredAttribute customAttribute = (PermissionRequiredAttribute) Attribute.GetCustomAttribute((MemberInfo) formType, typeof (PermissionRequiredAttribute));
      if (customAttribute == null)
        return true;
      foreach (Functionalities permission in customAttribute.Permissions)
      {
        if (!Session.User.Permissions.Contains(permission))
          return false;
      }
      return true;
    }
  }
}
