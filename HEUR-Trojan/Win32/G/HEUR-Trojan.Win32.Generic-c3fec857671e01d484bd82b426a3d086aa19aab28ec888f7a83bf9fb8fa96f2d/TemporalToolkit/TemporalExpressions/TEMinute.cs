// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEMinute
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEMinute : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TEMinute(int minute)
    {
label_1:
      int num1 = 1690885738;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1165158244)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 445642001 ^ 1986697909;
            continue;
          case 2:
            this.Start = minute;
            num1 = (int) num2 * 965966418 ^ 1118032245;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.End = new int?();
    }

    public TEMinute(int start, int end)
    {
label_1:
      int num1 = -1372391685;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1292894826)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Start = start;
            num1 = (int) num2 * -308782100 ^ 1006744952;
            continue;
          case 2:
            this.End = new int?(end);
            num1 = (int) num2 * -916955309 ^ -1436498272;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = 1593533470;
      bool flag1;
      while (true)
      {
        uint num2;
        int? end;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 2075518610)) % 14U)
        {
          case 0:
            goto label_1;
          case 1:
            int minute1 = aDate.Minute;
            end = this.End;
            int num5 = end.Value;
            num3 = minute1 <= num5 ? 1 : 0;
            goto label_15;
          case 2:
          case 7:
            flag1 = flag2;
            num1 = 993014083;
            continue;
          case 3:
            if (aDate.Minute < this.Start)
            {
              num4 = 0;
              break;
            }
            num1 = (int) num2 * 1996726579 ^ -1628371595;
            continue;
          case 4:
            end = this.End;
            num1 = (int) num2 * -1102278377 ^ -1038631764;
            continue;
          case 5:
            int num6 = flag3 ? 1859349739 : (num6 = 1552145601);
            num1 = num6 ^ (int) num2 * -209033202;
            continue;
          case 6:
            end = this.End;
            int num7 = end.HasValue ? -1602693280 : (num7 = -716687127);
            num1 = num7 ^ (int) num2 * 2112842328;
            continue;
          case 8:
            flag3 = end.Value > this.Start;
            num1 = (int) num2 * -411510356 ^ -1620296633;
            continue;
          case 9:
            if (aDate.Minute >= this.Start)
            {
              num3 = 1;
              goto label_15;
            }
            else
            {
              num1 = 1071846281;
              continue;
            }
          case 10:
            int minute2 = aDate.Minute;
            end = this.End;
            int num8 = end.Value;
            num4 = minute2 <= num8 ? 1 : 0;
            break;
          case 11:
            flag2 = this.Start == aDate.Minute;
            num1 = 1567041376;
            continue;
          case 12:
            num1 = (int) num2 * 234719512 ^ -565206027;
            continue;
          default:
            goto label_20;
        }
        flag2 = num4 != 0;
        num1 = 310218150;
        continue;
label_15:
        flag2 = num3 != 0;
        num1 = 482558741;
      }
label_20:
      return flag1;
    }
  }
}
