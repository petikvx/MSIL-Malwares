// Decompiled with JetBrains decompiler
// Type: LTSvcMon.AgentCommunications
// Assembly: LTSvcMon, Version=40.101.4107.19874, Culture=neutral, PublicKeyToken=null
// MVID: 816B70F7-DB44-4BCA-BD08-988C39A8AB45
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Patched.mf-f4d248fac8113c5e0ed835350bfdc060077775705ca69e00ce08a4a7e4643090.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Specialized;
using System.Net;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Web;

namespace LTSvcMon
{
  [StandardModule]
  internal sealed class AgentCommunications
  {
    public static string FormatString(string data)
    {
      data = data.Replace("\n", "");
      data = data.Replace("\r", "");
      data = data.Replace("\t", "");
      data = data.Replace("\0", "");
      data = data.Replace("'", "");
      data = data.Replace("\u001A", "");
      data = data.Replace("\b", "");
      return data;
    }

    public static string SendInfo(int cmd, ref NameValueCollection values, string Pass = "")
    {
      string str1;
      try
      {
        values.Add("i", Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.ID]));
        if (Operators.CompareString(Pass, "", false) == 0)
          Pass = Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Pass]);
        values.Add("p", " ");
        values.Add("nocommands", "true");
        values.Add("CMD", Conversions.ToString(cmd));
        values.Add("c", Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.ClientID]));
        values.Add("l", Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.LocID]));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
        goto label_27;
      }
      string s = "";
      string base64String;
      try
      {
        SHA1CryptoServiceProvider cryptoServiceProvider = new SHA1CryptoServiceProvider();
        IEnumerator enumerator1 = values.AllKeys.GetEnumerator();
        int num = 0;
        ArrayList arrayList = new ArrayList();
        while (enumerator1.MoveNext())
        {
          ++num;
          if (enumerator1.Current != null)
            arrayList.Add(RuntimeHelpers.GetObjectValue(enumerator1.Current));
          if (num > 20)
            break;
        }
        arrayList.Sort();
        try
        {
          foreach (object obj in arrayList)
          {
            string Left = Conversions.ToString(obj);
            if (Operators.CompareString(Left, "", false) != 0)
              s += Left;
          }
        }
        finally
        {
          IEnumerator enumerator2;
          if (enumerator2 is IDisposable)
            (enumerator2 as IDisposable).Dispose();
        }
        base64String = Convert.ToBase64String(cryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(s)));
        cryptoServiceProvider.Clear();
        arrayList.Clear();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
        goto label_27;
      }
      try
      {
        cSecurity cSecurity = new cSecurity(Pass);
        values["p"] = cSecurity.PSEncrypt(base64String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
        goto label_27;
      }
      try
      {
        string Left = AgentCommunications.SendData(ref values, "/LabTech/agent.aspx?" + Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.ID]) + "c" + Conversions.ToString(cmd));
        if (Left == null || Operators.CompareString(Left, "", false) == 0)
        {
          string str2 = "Zero Response " + Conversions.ToString(cmd);
          values.Clear();
          values = (NameValueCollection) null;
          str2 = "";
          str1 = "";
        }
        else
        {
          values.Clear();
          values = (NameValueCollection) null;
          str1 = Left;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
      }
label_27:
      return str1;
    }

    internal static string SendData(ref NameValueCollection Values, string URL)
    {
      // ISSUE: unable to decompile the method.
    }

    public static string GetFile(string RemotePath, string LocalFile)
    {
      string file;
      try
      {
        WebClient webClient = new WebClient();
        int index = 0;
        string[] strArray;
        if (Strings.InStr(Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Server]), "|") > 0)
          strArray = Strings.Split(Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Server]), "|");
        else
          strArray = new string[4]
          {
            Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Server]),
            Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Server]),
            Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Server]),
            Conversions.ToString(Settings.GlobalSettings[(object) Settings.GSettings.Server])
          };
        bool flag;
        do
        {
          flag = false;
          try
          {
            if (strArray[index].ToLower().StartsWith("http"))
              webClient.DownloadFile(strArray[index] + "/LabTech" + RemotePath, Environment.ExpandEnvironmentVariables(LocalFile));
            else
              webClient.DownloadFile("http://" + strArray[index] + "/LabTech" + RemotePath, Environment.ExpandEnvironmentVariables(LocalFile));
            if (!System.IO.File.Exists(Environment.ExpandEnvironmentVariables(LocalFile)))
            {
              ++index;
              if (index <= Information.UBound((Array) strArray))
                flag = true;
            }
          }
          catch (WebException ex)
          {
            ProjectData.SetProjectError((Exception) ex);
            ++index;
            if (index <= Information.UBound((Array) strArray))
              flag = true;
            ProjectData.ClearProjectError();
          }
        }
        while (flag);
        webClient.Dispose();
        file = !System.IO.File.Exists(Environment.ExpandEnvironmentVariables(LocalFile)) ? "ERR" : "OK";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        file = "ERR";
        ProjectData.ClearProjectError();
      }
      return file;
    }

    internal static void SendReport(string Data)
    {
      NameValueCollection values = new NameValueCollection();
      try
      {
        values.Add("rt", Data);
        AgentCommunications.SendInfo(10, ref values);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string urlencode(string data) => HttpUtility.UrlEncode(data);
  }
}
