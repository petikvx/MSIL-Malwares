// Decompiled with JetBrains decompiler
// Type: MentQ.MentQEllipticalProgress
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MentQ
{
  [Category("MentQ")]
  public class MentQEllipticalProgress : ProgressBar
  {
    private Color _hatchBrushColor;
    private HatchStyle _hatchBrushStyle;
    private bool _useHatchBrush;

    public MentQEllipticalProgress()
    {
      this.Size = new Size(70, 70);
      this.BackColor = MentQDefaults.MentQBlue;
      this.ForeColor = Color.Black;
      this.DoubleBuffered = true;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.OptimizedDoubleBuffer, true);
      this.Font = new Font("Verdana", 8f);
      this.HatchBrushStyle = HatchStyle.DarkDownwardDiagonal;
      this.HatchBrushSecondaryColor = Color.FromArgb(30, 200, 200, 200);
      this.UseHatchBrush = false;
      this.Text = "Percent";
    }

    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    [Category("Appearance")]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Invalidate();
      }
    }

    [Browsable(true)]
    [EditorBrowsable(EditorBrowsableState.Always)]
    [Bindable(false)]
    [Category("Appearance")]
    public override Font Font
    {
      get => base.Font;
      set => base.Font = value;
    }

    [Category("Appearance")]
    public HatchStyle HatchBrushStyle
    {
      get => this._hatchBrushStyle;
      set
      {
        this._hatchBrushStyle = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public Color HatchBrushSecondaryColor
    {
      get => this._hatchBrushColor;
      set
      {
        this._hatchBrushColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public bool UseHatchBrush
    {
      get => this._useHatchBrush;
      set
      {
        this._useHatchBrush = value;
        this.Invalidate();
      }
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      Graphics graphics1 = e.Graphics;
      graphics1.SmoothingMode = SmoothingMode.HighQuality;
      graphics1.Clear(this.Parent.BackColor);
      if (this.UseHatchBrush)
      {
        using (HatchBrush hatchBrush = new HatchBrush(this.HatchBrushStyle, this.HatchBrushSecondaryColor, this.BackColor))
          graphics1.FillPie((Brush) hatchBrush, 0, 0, this.Width - 1, this.Height - 1, 270, (int) (360.0 / (double) this.Maximum * (double) this.Value));
      }
      else
      {
        using (SolidBrush solidBrush = new SolidBrush(this.BackColor))
          graphics1.FillPie((Brush) solidBrush, 0, 0, this.Width - 1, this.Height - 1, 270, (int) (360.0 / (double) this.Maximum * (double) this.Value));
      }
      using (SolidBrush solidBrush = new SolidBrush(Color.FromArgb(25, 45, 45, 54)))
        graphics1.FillEllipse((Brush) solidBrush, 0, 0, this.Width - 1, this.Height - 1);
      using (SolidBrush solidBrush = new SolidBrush(this.Parent.BackColor))
        graphics1.FillEllipse((Brush) solidBrush, 4, 4, this.Width - 9, this.Height - 9);
      using (SolidBrush solidBrush1 = new SolidBrush(this.ForeColor))
      {
        Graphics graphics2 = graphics1;
        string s = this.Value.ToString();
        Font font1 = this.Font;
        SolidBrush solidBrush2 = solidBrush1;
        double x1 = ((double) this.Width - (double) graphics1.MeasureString(this.Value.ToString(), this.Font).Width) / 2.0;
        double height1 = (double) this.Height;
        SizeF sizeF = graphics1.MeasureString(this.Value.ToString(), this.Font);
        double height2 = (double) sizeF.Height;
        double y1 = (height1 - height2) / 2.0 - (string.IsNullOrEmpty(this.Text) ? 0.0 : 2.0);
        graphics2.DrawString(s, font1, (Brush) solidBrush2, (float) x1, (float) y1);
        if (!string.IsNullOrEmpty(this.Text))
        {
          using (SolidBrush solidBrush3 = new SolidBrush(Color.FromArgb(150, this.ForeColor)))
          {
            using (Font font2 = new Font("Segoe UI", 6f, FontStyle.Bold))
            {
              Graphics graphics3 = graphics1;
              string upper = this.Text.ToUpper();
              Font font3 = font2;
              SolidBrush solidBrush4 = solidBrush3;
              double width1 = (double) this.Width;
              sizeF = graphics1.MeasureString(this.Text.ToUpper(), font2);
              double width2 = (double) sizeF.Width;
              double x2 = (width1 - width2) / 2.0;
              double height3 = (double) this.Height;
              sizeF = graphics1.MeasureString(this.Text.ToUpper(), font2);
              double height4 = (double) sizeF.Height;
              double y2 = (height3 - height4) / 2.0 + 10.0;
              graphics3.DrawString(upper, font3, (Brush) solidBrush4, (float) x2, (float) y2);
            }
          }
        }
      }
      base.OnPaint(e);
    }
  }
}
