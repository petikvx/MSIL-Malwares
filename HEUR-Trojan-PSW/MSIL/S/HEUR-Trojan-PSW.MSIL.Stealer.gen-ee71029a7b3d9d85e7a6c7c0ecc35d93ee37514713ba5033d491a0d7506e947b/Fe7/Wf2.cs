// Decompiled with JetBrains decompiler
// Type: Fe7.Wf2
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using System;
using System.ComponentModel;
using System.Data.Linq.Mapping;
using System.Runtime.InteropServices;
using System.Threading;

namespace Fe7
{
  [Table(Name = "dbo.deduction")]
  public class Wf2 : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs Ⴐ = new PropertyChangingEventArgs(string.Empty);
    private int _deduction_id;
    private string _deduction_type;
    private double _deduction_value;
    private string _deduction_format;
    private string _people_id;
    private DateTime? _deduction_date;
    private PropertyChangingEventHandler Ⴍ;
    private PropertyChangedEventHandler Ⴅ;

    [Column(DbType = "Int NOT NULL", IsPrimaryKey = true, Storage = "_deduction_id")]
    public int Ⴗ
    {
      get => this._deduction_id;
      [param: In] set
      {
        if (this._deduction_id == value)
          return;
        this.Ai2();
        this._deduction_id = value;
        this.o1Y("deduction_id");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(50) NOT NULL", Storage = "_deduction_type")]
    public string Ⴗ
    {
      get => (IConvertible) this._deduction_type as string;
      [param: In] set
      {
        if (string.Equals(this._deduction_type, value))
          return;
        this.Ai2();
        this._deduction_type = value;
        this.o1Y("deduction_type");
      }
    }

    [Column(DbType = "Float NOT NULL", Storage = "_deduction_value")]
    public double Ⴓ
    {
      get => this._deduction_value;
      [param: In] set
      {
        if (this._deduction_value == value)
          return;
        this.Ai2();
        this._deduction_value = value;
        this.o1Y("deduction_value");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(20) NOT NULL", Storage = "_deduction_format")]
    public string Ⴍ
    {
      get => (object) this._deduction_format as string;
      [param: In] set
      {
        if (string.Equals(this._deduction_format, value))
          return;
        this.Ai2();
        this._deduction_format = value;
        this.o1Y("deduction_format");
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(15) NOT NULL", Storage = "_people_id")]
    public string Ⴃ
    {
      get => this._people_id;
      [param: In] set
      {
        if (string.Equals(this._people_id, value))
          return;
        this.Ai2();
        this._people_id = value;
        this.o1Y("people_id");
      }
    }

    [Column(DbType = "Date", Storage = "_deduction_date")]
    public DateTime? Ⴄ
    {
      get => this._deduction_date;
      [param: In] set
      {
        if (this._deduction_date.Equals((object) value))
          return;
        this.Ai2();
        this._deduction_date = value;
        this.o1Y("deduction_date");
      }
    }

    public event PropertyChangingEventHandler Ⴐ
    {
      add
      {
        object obj1 = (object) this.Ⴍ;
        object obj2;
        do
        {
          obj2 = (object) (PropertyChangingEventHandler) obj1;
          obj1 = (object) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴍ, (PropertyChangingEventHandler) Delegate.Combine((Delegate) obj2, (Delegate) value), obj2 as PropertyChangingEventHandler);
        }
        while ((PropertyChangingEventHandler) obj1 != (PropertyChangingEventHandler) obj2);
      }
      remove
      {
        MulticastDelegate multicastDelegate1 = (MulticastDelegate) this.Ⴍ;
        MulticastDelegate multicastDelegate2;
        do
        {
          multicastDelegate2 = multicastDelegate1;
          multicastDelegate1 = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.Ⴍ, (PropertyChangingEventHandler) Delegate.Remove((Delegate) multicastDelegate2, (Delegate) value), (PropertyChangingEventHandler) multicastDelegate2);
        }
        while ((PropertyChangingEventHandler) multicastDelegate1 != (PropertyChangingEventHandler) multicastDelegate2);
      }
    }

    public event PropertyChangedEventHandler Ⴓ
    {
      add
      {
        MulticastDelegate multicastDelegate1 = (MulticastDelegate) this.Ⴅ;
        MulticastDelegate multicastDelegate2;
        do
        {
          multicastDelegate2 = multicastDelegate1;
          multicastDelegate1 = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴅ, (MulticastDelegate) Delegate.Combine((Delegate) multicastDelegate2, (Delegate) value) as PropertyChangedEventHandler, multicastDelegate2 as PropertyChangedEventHandler);
        }
        while ((PropertyChangedEventHandler) multicastDelegate1 != multicastDelegate2 as PropertyChangedEventHandler);
      }
      remove
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) this.Ⴅ;
        object obj;
        do
        {
          obj = (object) (multicastDelegate as PropertyChangedEventHandler);
          multicastDelegate = (MulticastDelegate) Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.Ⴅ, (PropertyChangedEventHandler) Delegate.Remove((Delegate) obj, (Delegate) value), obj as PropertyChangedEventHandler);
        }
        while (multicastDelegate as PropertyChangedEventHandler != obj as PropertyChangedEventHandler);
      }
    }

    protected virtual void Ai2()
    {
      if (this.Ⴍ == null)
        return;
      MulticastDelegate ⴍ = (MulticastDelegate) this.Ⴍ;
      if ((PropertyChangingEventHandler) ⴍ == null)
        return;
      ((PropertyChangingEventHandler) ⴍ)((object) this, Wf2.Ⴐ);
    }

    protected virtual void o1Y([In] string obj0)
    {
      if (this.Ⴅ == null)
        return;
      object ⴅ = (object) this.Ⴅ;
      if ((PropertyChangedEventHandler) ⴅ == null)
        return;
      ((PropertyChangedEventHandler) ⴅ)((object) this, new PropertyChangedEventArgs(obj0));
    }
  }
}
