// Decompiled with JetBrains decompiler
// Type: c.Filter.SingletonThreadFilter
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using Fireball.Docking;
using GLuaR.Importers;
using GLuaR.Properties;
using GLuaR.Shared;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace c.Filter
{
  public class SingletonThreadFilter : DockableWindow
  {
    private InterceptorThreadFilter comparatorWrapper;
    private IContainer _PropertyWrapper;
    public TreeView m_ConfigWrapper;
    public ImageList stateWrapper;
    private ToolStripMenuItem infoWrapper;
    private ToolStripMenuItem m_ThreadWrapper;
    private ToolStripMenuItem m_IdentifierWrapper;
    private ToolStripSeparator _MethodWrapper;
    private ToolStripMenuItem invocationWrapper;
    private ToolStripMenuItem m_ReaderWrapper;
    private ToolStripSeparator m_TaskWrapper;
    private ToolStripMenuItem m_CollectionWrapper;
    private ToolStripMenuItem bridgeWrapper;
    private ToolStripMenuItem _RefWrapper;
    private ToolStripMenuItem _InterceptorWrapper;
    private ToolStripMenuItem singletonWrapper;
    private ToolStripSeparator m_ParameterWrapper;
    private ToolStripMenuItem _ProccesorWrapper;
    private ToolStripMenuItem templateWrapper;
    private ToolStripMenuItem _ParamWrapper;
    private ToolStripMenuItem _MappingWrapper;
    public ContextMenuStrip importerWrapper;
    public ContextMenuStrip _ResolverWrapper;
    public ContextMenuStrip m_StatusWrapper;
    private ToolStripSeparator _RecordWrapper;
    private ToolStripMenuItem _AlgoWrapper;
    private ToolStripMenuItem systemWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public SingletonThreadFilter(InterceptorThreadFilter v)
    {
      int num1 = 3;
      if (!SingletonThreadFilter.FlushRegistry())
        goto label_3;
label_1:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_5;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_7;
          case 1:
          case 2:
            goto label_6;
          case 4:
            goto label_5;
          case 5:
            goto label_1;
          case 6:
            goto label_8;
          default:
            if (!SingletonThreadFilter.FlushRegistry())
            {
              num1 = 4;
              continue;
            }
            goto label_5;
        }
      }
label_8:
      return;
label_6:
      this._PropertyWrapper = (IContainer) null;
      num2 = 5;
      goto label_2;
label_7:
      ImporterMapper.InitAccount();
      num2 = 2;
      goto label_2;
label_5:
      this.ConcatRule();
      this.comparatorWrapper = v;
      num2 = 6;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AssetRule(object spec, EventArgs cont)
    {
      int num1 = 4;
      if (SingletonThreadFilter.FlushRegistry())
        ;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            // ISSUE: reference to a compiler-generated method
            this.stateWrapper.Images.Add("root", (Image) Resources.RateField());
            num2 = 5;
            break;
          case 1:
          case 3:
            this.stateWrapper.Images.Add("project_folder_closed", (Image) Resources.project_folder_closed);
            // ISSUE: reference to a compiler-generated method
            this.stateWrapper.Images.Add("code", (Image) Resources.RegisterField());
            goto case 0;
          case 4:
            // ISSUE: reference to a compiler-generated method
            this.stateWrapper.Images.Add("file_lost", (Image) Resources.GetFactory());
            num1 = 3;
            continue;
          case 5:
            goto label_1;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
      }
label_1:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteRule(object key, EventArgs attr)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              Debug.WriteLine("Open Clicked...");
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto case 3;
            case 2:
              if (this.m_ConfigWrapper.SelectedNode != null)
              {
                Debug.WriteLine(this.m_ConfigWrapper.SelectedNode.Tag.GetType().Name);
                goto case 3;
              }
              else
                goto label_6;
            case 3:
            case 4:
              if (this.m_ConfigWrapper.SelectedNode.Tag.GetType().Name == "OpenedFile")
              {
                Debug.WriteLine("Opening File...");
                this.comparatorWrapper.PostWrapper((Page) this.m_ConfigWrapper.SelectedNode.Tag);
                if (SingletonThreadFilter.RateRegistry())
                {
                  num2 = 6;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_11;
            case 5:
              goto label_13;
            case 6:
              goto label_10;
            default:
              if (SingletonThreadFilter.RateRegistry())
              {
                num2 = 4;
                continue;
              }
              goto case 2;
          }
        }
label_6:
        num1 = 5;
      }
label_13:
      return;
label_10:
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void UpdateRule(object first, TreeNodeMouseClickEventArgs b)
    {
      int num1 = 2;
      if (true)
        goto label_5;
label_1:
      bool flag = b.Button == MouseButtons.Right;
      int num2 = 4;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            this.m_ConfigWrapper.SelectedNode = b.Node;
            if (!SingletonThreadFilter.FlushRegistry())
            {
              num1 = 3;
              continue;
            }
            goto label_9;
          case 1:
          case 3:
            goto label_1;
          case 4:
            goto label_2;
          case 5:
            goto label_7;
          case 6:
            goto label_9;
          default:
            goto label_6;
        }
      }
label_2:
      if (!flag || b.Node == null)
        return;
      goto label_7;
label_6:
      num2 = 5;
      goto label_4;
label_7:
      this.importerWrapper.Show(this.m_ConfigWrapper.PointToScreen(b.Location).X, this.m_ConfigWrapper.PointToScreen(b.Location).Y);
      num2 = 6;
      goto label_4;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectRule(object task, TreeNodeMouseClickEventArgs second)
    {
      int num1 = 4;
      while (true)
      {
        bool flag1;
        int num2;
        bool flag2;
        switch (num1)
        {
          case 0:
          case 4:
            flag1 = second.Node != null;
            num2 = 1;
            break;
          case 1:
            if (flag1)
            {
              flag2 = second.Node.Tag.GetType().Name == "OpenedFile";
              num2 = 5;
              break;
            }
            goto label_4;
          case 2:
          case 3:
            this.comparatorWrapper.PostWrapper((Page) this.m_ConfigWrapper.SelectedNode.Tag);
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 5;
          case 5:
            if (!flag2)
              goto label_8;
            else
              goto case 2;
          case 6:
            goto label_11;
          default:
            int num3 = 2;
            num1 = SingletonThreadFilter.FlushRegistry() ? num3 : num3;
            continue;
        }
        num1 = num2;
      }
label_8:
      return;
label_4:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConnectRule(object key, TreeViewEventArgs selection)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ViewRule(object key, EventArgs vis) => this.comparatorWrapper.ChangeWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrepareRule(object spec, EventArgs result)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              flag = this.m_ConfigWrapper.SelectedNode == null;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_2;
            case 1:
              goto label_10;
            case 2:
            case 3:
              goto label_2;
            case 5:
              goto label_5;
            case 6:
              goto label_12;
            default:
              goto label_9;
          }
        }
label_9:
        num1 = 2;
        continue;
label_10:
        if (!flag)
        {
          if (!(this.m_ConfigWrapper.SelectedNode.Tag.GetType().Name == "Folder"))
          {
            if (this.m_ConfigWrapper.SelectedNode.Tag.GetType().Name == "OpenedFile")
            {
              this.comparatorWrapper.RestartWrapper((Page) this.m_ConfigWrapper.SelectedNode.Tag);
              num1 = 6;
            }
            else
              goto label_12;
          }
          else
            break;
        }
        else
          num1 = 5;
      }
label_2:
      this.comparatorWrapper.FindWrapper((RefThreadFilter) this.m_ConfigWrapper.SelectedNode.Tag);
      goto label_12;
label_5:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeRule(object spec, EventArgs reg) => this.comparatorWrapper.CalcWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void TestRule(object ident, EventArgs vis) => this.comparatorWrapper.ExcludeWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void Dispose(bool infoinstall)
    {
      int num1 = 0;
      if (SingletonThreadFilter.RateRegistry())
        goto label_5;
label_1:
      int num2 = this._PropertyWrapper != null ? 1 : 0;
label_3:
      if (num2 == 0)
        goto label_11;
      else
        goto label_10;
label_4:
      int num3;
      num1 = num3;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
          case 4:
            goto label_1;
          case 2:
          case 3:
            goto label_10;
          case 5:
            goto label_7;
          default:
            int num4 = 3;
            num1 = SingletonThreadFilter.FlushRegistry() ? num4 : num4;
            continue;
        }
      }
label_7:
      return;
label_8:
      if (!infoinstall)
      {
        num2 = 0;
        goto label_3;
      }
      else
      {
        num3 = 4;
        goto label_4;
      }
label_10:
      this._PropertyWrapper.Dispose();
label_11:
      // ISSUE: explicit non-virtual call
      __nonvirtual (((Form) this).Dispose(infoinstall));
      num3 = 5;
      goto label_4;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatRule()
    {
      int num1 = 4;
      if (true)
        goto label_23;
label_1:
      this.m_IdentifierWrapper.Name = "mnuDelete";
      this.m_IdentifierWrapper.Size = new Size(152, 22);
      this.m_IdentifierWrapper.Text = "Delete";
      int num2 = 23;
label_22:
      num1 = num2;
label_23:
      ComponentResourceManager componentResourceManager;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_21;
          case 1:
            goto label_27;
          case 2:
            goto label_2;
          case 3:
            this._ProccesorWrapper.Text = "Project Properties";
            this.templateWrapper.ImageTransparentColor = Color.Fuchsia;
            this.templateWrapper.Name = "closeProjectToolStripMenuItem";
            int num3 = 13;
            num1 = SingletonThreadFilter.FlushRegistry() ? num3 : num3;
            continue;
          case 4:
            goto label_39;
          case 5:
            ((Control) this).ResumeLayout(false);
            if (true)
            {
              num1 = 42;
              continue;
            }
            goto label_30;
          case 6:
            this.infoWrapper.Text = "Open";
            this.infoWrapper.Click += new EventHandler(this.DeleteRule);
            // ISSUE: reference to a compiler-generated method
            this.m_ThreadWrapper.Image = (Image) Resources.ReflectField();
            this.m_ThreadWrapper.ImageTransparentColor = Color.Fuchsia;
            this.m_ThreadWrapper.Name = "mnuRename";
            this.m_ThreadWrapper.Size = new Size(152, 22);
            this.m_ThreadWrapper.Text = "Rename";
            if (true)
            {
              num1 = 31;
              continue;
            }
            goto label_45;
          case 7:
            this.importerWrapper = new ContextMenuStrip(this._PropertyWrapper);
            this.infoWrapper = new ToolStripMenuItem();
            if (SingletonThreadFilter.RateRegistry())
            {
              num1 = 9;
              continue;
            }
            goto label_17;
          case 8:
          case 36:
            ((Control) this).Text = "Project Explorer";
            ((Form) this).Load += new EventHandler(this.AssetRule);
            num1 = 28;
            continue;
          case 9:
            this.m_ThreadWrapper = new ToolStripMenuItem();
            this.m_IdentifierWrapper = new ToolStripMenuItem();
            this._MethodWrapper = new ToolStripSeparator();
            this.invocationWrapper = new ToolStripMenuItem();
            this._ResolverWrapper = new ContextMenuStrip(this._PropertyWrapper);
            this._ParamWrapper = new ToolStripMenuItem();
            this._MappingWrapper = new ToolStripMenuItem();
            if (SingletonThreadFilter.RateRegistry())
            {
              num1 = 19;
              continue;
            }
            goto label_43;
          case 10:
            this._RefWrapper = new ToolStripMenuItem();
            this._InterceptorWrapper = new ToolStripMenuItem();
            this.singletonWrapper = new ToolStripMenuItem();
            this.m_ParameterWrapper = new ToolStripSeparator();
            this._ProccesorWrapper = new ToolStripMenuItem();
            this.templateWrapper = new ToolStripMenuItem();
            this._RecordWrapper = new ToolStripSeparator();
            this._AlgoWrapper = new ToolStripMenuItem();
            this.systemWrapper = new ToolStripMenuItem();
            this.importerWrapper.SuspendLayout();
            this._ResolverWrapper.SuspendLayout();
            this.m_StatusWrapper.SuspendLayout();
            ((Control) this).SuspendLayout();
            this.m_ConfigWrapper.Dock = DockStyle.Fill;
            this.m_ConfigWrapper.FullRowSelect = true;
            this.m_ConfigWrapper.HideSelection = false;
            num1 = 26;
            continue;
          case 11:
            componentResourceManager = new ComponentResourceManager(typeof (SingletonThreadFilter));
            if (SingletonThreadFilter.RateRegistry())
            {
              num1 = 1;
              continue;
            }
            goto label_38;
          case 12:
            goto label_36;
          case 13:
            goto label_18;
          case 14:
          case 33:
            goto label_30;
          case 15:
            this.infoWrapper.Size = new Size(152, 22);
            if (!SingletonThreadFilter.FlushRegistry())
            {
              num1 = 6;
              continue;
            }
            goto label_6;
          case 16:
            goto label_35;
          case 17:
            this.bridgeWrapper.ImageTransparentColor = Color.Fuchsia;
            this.bridgeWrapper.Name = "toolStripMenuItem4";
            this.bridgeWrapper.Size = new Size(169, 22);
            this.bridgeWrapper.Text = "Delete";
            if (true)
            {
              num1 = 34;
              continue;
            }
            goto case 35;
          case 18:
            goto label_41;
          case 19:
            goto label_38;
          case 20:
            this.DockableAreas = (DockAreas) 31;
            ((Form) this).FormBorderStyle = FormBorderStyle.FixedToolWindow;
            ((Form) this).HelpButton = true;
            this.HideOnClose = true;
            ((Control) this).Name = "ProjectExplorer";
            this.TabText = "Project Explorer";
            if (SingletonThreadFilter.RateRegistry())
            {
              num1 = 8;
              continue;
            }
            goto case 15;
          case 21:
            goto label_11;
          case 22:
            this._MappingWrapper.Click += new EventHandler(this.TestRule);
            // ISSUE: reference to a compiler-generated method
            this.m_ReaderWrapper.Image = (Image) Resources.QueryField();
            this.m_ReaderWrapper.ImageTransparentColor = Color.Fuchsia;
            this.m_ReaderWrapper.Name = "toolStripMenuItem5";
            this.m_ReaderWrapper.Size = new Size(169, 22);
            this.m_ReaderWrapper.Text = "New Folder";
            this.m_ReaderWrapper.Click += new EventHandler(this.ViewRule);
            this.m_TaskWrapper.Name = "toolStripSeparator1";
            this.m_TaskWrapper.Size = new Size(166, 6);
            if (SingletonThreadFilter.RateRegistry())
            {
              num1 = 32;
              continue;
            }
            goto case 20;
          case 23:
            this.m_IdentifierWrapper.Click += new EventHandler(this.PrepareRule);
            this._MethodWrapper.Name = "toolStripMenuItem1";
            num1 = 25;
            continue;
          case 24:
            goto label_6;
          case 25:
            goto label_8;
          case 26:
            goto label_43;
          case 27:
            this._ResolverWrapper.ResumeLayout(false);
            this.m_StatusWrapper.ResumeLayout(false);
            num1 = 5;
            continue;
          case 28:
            this.importerWrapper.ResumeLayout(false);
            if (true)
            {
              num1 = 27;
              continue;
            }
            goto label_21;
          case 29:
            goto label_7;
          case 30:
            this.m_ConfigWrapper.TabIndex = 0;
            this.m_ConfigWrapper.NodeMouseDoubleClick += new TreeNodeMouseClickEventHandler(this.SelectRule);
            this.m_ConfigWrapper.AfterSelect += new TreeViewEventHandler(this.ConnectRule);
            this.m_ConfigWrapper.NodeMouseClick += new TreeNodeMouseClickEventHandler(this.UpdateRule);
            this.stateWrapper.ColorDepth = ColorDepth.Depth32Bit;
            this.stateWrapper.ImageSize = new Size(16, 16);
            this.stateWrapper.TransparentColor = Color.Fuchsia;
            this.importerWrapper.Items.AddRange(new ToolStripItem[8]
            {
              (ToolStripItem) this.infoWrapper,
              (ToolStripItem) this.m_ThreadWrapper,
              (ToolStripItem) this.m_IdentifierWrapper,
              (ToolStripItem) this._RecordWrapper,
              (ToolStripItem) this._AlgoWrapper,
              (ToolStripItem) this.systemWrapper,
              (ToolStripItem) this._MethodWrapper,
              (ToolStripItem) this.invocationWrapper
            });
            this.importerWrapper.Name = "fileMenu";
            this.importerWrapper.Size = new Size(153, 170);
            // ISSUE: reference to a compiler-generated method
            this.infoWrapper.Image = (Image) Resources.SortField();
            this.infoWrapper.ImageTransparentColor = Color.Fuchsia;
            this.infoWrapper.Name = "mnuOpenFile";
            if (!SingletonThreadFilter.FlushRegistry())
            {
              num1 = 15;
              continue;
            }
            goto label_13;
          case 31:
            // ISSUE: reference to a compiler-generated method
            this.m_IdentifierWrapper.Image = (Image) Resources.PrepareFactory();
            this.m_IdentifierWrapper.ImageTransparentColor = Color.Fuchsia;
            if (true)
            {
              num1 = 40;
              continue;
            }
            goto label_15;
          case 32:
            goto label_13;
          case 34:
            goto label_28;
          case 35:
            this.m_StatusWrapper.Name = "fileMenu";
            this.m_StatusWrapper.Size = new Size(172, 120);
            // ISSUE: reference to a compiler-generated method
            this._RefWrapper.Image = (Image) Resources.InitFactory();
            this._RefWrapper.ImageTransparentColor = Color.Fuchsia;
            num1 = 24;
            continue;
          case 37:
            goto label_15;
          case 38:
            goto label_17;
          case 39:
            this._ResolverWrapper.Name = "fileMenu";
            if (!SingletonThreadFilter.FlushRegistry())
            {
              num1 = 18;
              continue;
            }
            goto case 10;
          case 40:
            goto label_1;
          case 41:
            ((Form) this).ClientSize = new Size(224, 321);
            ((Control) this).Controls.Add((Control) this.m_ConfigWrapper);
            int num4 = 20;
            num1 = SingletonThreadFilter.FlushRegistry() ? num4 : num4;
            continue;
          case 42:
            goto label_34;
          default:
            if (true)
            {
              num1 = 21;
              continue;
            }
            goto case 23;
        }
      }
label_2:
      this._InterceptorWrapper.Size = new Size(171, 22);
      this._InterceptorWrapper.Text = "Add Existing Item";
      this._InterceptorWrapper.Click += new EventHandler(this.TestRule);
      // ISSUE: reference to a compiler-generated method
      this.singletonWrapper.Image = (Image) Resources.QueryField();
      this.singletonWrapper.ImageTransparentColor = Color.Fuchsia;
      this.singletonWrapper.Name = "toolStripMenuItem6";
      this.singletonWrapper.Size = new Size(171, 22);
      this.singletonWrapper.Text = "New Folder";
      this.singletonWrapper.Click += new EventHandler(this.ViewRule);
      this.m_ParameterWrapper.Name = "toolStripMenuItem2";
      this.m_ParameterWrapper.Size = new Size(168, 6);
      // ISSUE: reference to a compiler-generated method
      this._ProccesorWrapper.Image = (Image) Resources.DisableField();
      this._ProccesorWrapper.ImageTransparentColor = Color.Fuchsia;
      num2 = 38;
      goto label_22;
label_6:
      this._RefWrapper.Name = "addNewItemToolStripMenuItem";
      this._RefWrapper.Size = new Size(171, 22);
      this._RefWrapper.Text = "Add New Item";
      this._RefWrapper.Click += new EventHandler(this.ChangeRule);
      // ISSUE: reference to a compiler-generated method
      this._InterceptorWrapper.Image = (Image) Resources.StartFactory();
      this._InterceptorWrapper.ImageTransparentColor = Color.Fuchsia;
      this._InterceptorWrapper.Name = "addExistingItemToolStripMenuItem";
      num2 = 2;
      goto label_22;
label_7:
      this._AlgoWrapper.Text = "View Code";
      this.systemWrapper.Image = (Image) componentResourceManager.GetObject("mnuViewDesign.Image");
      this.systemWrapper.ImageTransparentColor = Color.Fuchsia;
      this.systemWrapper.Name = "mnuViewDesign";
      num2 = 14;
      goto label_22;
label_8:
      this._MethodWrapper.Size = new Size(149, 6);
      num2 = 12;
      goto label_22;
label_11:
      this._MappingWrapper.Text = "Add Existing Item";
      num2 = 22;
      goto label_22;
label_13:
      // ISSUE: reference to a compiler-generated method
      this.m_CollectionWrapper.Image = (Image) Resources.ReflectField();
      this.m_CollectionWrapper.ImageTransparentColor = Color.Fuchsia;
      this.m_CollectionWrapper.Name = "toolStripMenuItem3";
      this.m_CollectionWrapper.Size = new Size(169, 22);
      this.m_CollectionWrapper.Text = "Rename";
      // ISSUE: reference to a compiler-generated method
      this.bridgeWrapper.Image = (Image) Resources.PrepareFactory();
      num2 = 17;
      goto label_22;
label_15:
      this.m_ConfigWrapper.Location = new Point(0, 0);
      this.m_ConfigWrapper.Name = "tvFiles";
      this.m_ConfigWrapper.SelectedImageIndex = 0;
      this.m_ConfigWrapper.Size = new Size(224, 321);
      num2 = 30;
      goto label_22;
label_17:
      this._ProccesorWrapper.Name = "projectPropertiesToolStripMenuItem";
      this._ProccesorWrapper.Size = new Size(171, 22);
      num2 = 3;
      goto label_22;
label_18:
      this.templateWrapper.Size = new Size(171, 22);
      this.templateWrapper.Text = "Close Project";
      this._RecordWrapper.Name = "toolStripSeparator2";
      this._RecordWrapper.Size = new Size(149, 6);
      this._AlgoWrapper.Image = (Image) componentResourceManager.GetObject("mnuViewCode.Image");
      this._AlgoWrapper.ImageTransparentColor = Color.Fuchsia;
      this._AlgoWrapper.Name = "mnuViewCode";
      this._AlgoWrapper.Size = new Size(152, 22);
      num2 = 29;
      goto label_22;
label_21:
      // ISSUE: reference to a compiler-generated method
      this._ParamWrapper.Image = (Image) Resources.InitFactory();
      this._ParamWrapper.ImageTransparentColor = Color.Fuchsia;
      this._ParamWrapper.Name = "toolStripMenuItem8";
      this._ParamWrapper.Size = new Size(169, 22);
      this._ParamWrapper.Text = "Add New Item";
      this._ParamWrapper.Click += new EventHandler(this.ChangeRule);
      // ISSUE: reference to a compiler-generated method
      this._MappingWrapper.Image = (Image) Resources.StartFactory();
      this._MappingWrapper.ImageTransparentColor = Color.Fuchsia;
      this._MappingWrapper.Name = "toolStripMenuItem7";
      this._MappingWrapper.Size = new Size(169, 22);
      goto label_11;
label_34:
      return;
label_27:
      this.m_ConfigWrapper = new TreeView();
      this.stateWrapper = new ImageList(this._PropertyWrapper);
      num2 = 7;
      goto label_22;
label_28:
      this.m_StatusWrapper.Items.AddRange(new ToolStripItem[6]
      {
        (ToolStripItem) this._RefWrapper,
        (ToolStripItem) this._InterceptorWrapper,
        (ToolStripItem) this.singletonWrapper,
        (ToolStripItem) this.m_ParameterWrapper,
        (ToolStripItem) this._ProccesorWrapper,
        (ToolStripItem) this.templateWrapper
      });
      num2 = 35;
      goto label_22;
label_30:
      this.systemWrapper.Size = new Size(152, 22);
      this.systemWrapper.Text = "View VGUI";
      ((ContainerControl) this).AutoScaleDimensions = new SizeF(6f, 13f);
      ((ContainerControl) this).AutoScaleMode = AutoScaleMode.Font;
      num2 = 41;
      goto label_22;
label_35:
      this.invocationWrapper.Text = "New Folder";
      this.invocationWrapper.Click += new EventHandler(this.ViewRule);
      this._ResolverWrapper.Items.AddRange(new ToolStripItem[6]
      {
        (ToolStripItem) this._ParamWrapper,
        (ToolStripItem) this._MappingWrapper,
        (ToolStripItem) this.m_ReaderWrapper,
        (ToolStripItem) this.m_TaskWrapper,
        (ToolStripItem) this.m_CollectionWrapper,
        (ToolStripItem) this.bridgeWrapper
      });
      num2 = 39;
      goto label_22;
label_36:
      // ISSUE: reference to a compiler-generated method
      this.invocationWrapper.Image = (Image) Resources.QueryField();
      this.invocationWrapper.ImageTransparentColor = Color.Fuchsia;
      this.invocationWrapper.Name = "newFolderToolStripMenuItem";
      this.invocationWrapper.Size = new Size(152, 22);
      num2 = 16;
      goto label_22;
label_38:
      this.m_ReaderWrapper = new ToolStripMenuItem();
      this.m_TaskWrapper = new ToolStripSeparator();
      this.m_CollectionWrapper = new ToolStripMenuItem();
      this.bridgeWrapper = new ToolStripMenuItem();
      this.m_StatusWrapper = new ContextMenuStrip(this._PropertyWrapper);
      num2 = 10;
      goto label_22;
label_39:
      this._PropertyWrapper = (IContainer) new Container();
      num2 = 11;
      goto label_22;
label_41:
      this._ResolverWrapper.Size = new Size(170, 120);
      num2 = 0;
      goto label_22;
label_43:
      this.m_ConfigWrapper.HotTracking = true;
      this.m_ConfigWrapper.ImageIndex = 0;
      this.m_ConfigWrapper.ImageList = this.stateWrapper;
      num2 = 37;
      goto label_22;
label_45:;
    }

    internal static bool RateRegistry() => true;

    internal static bool FlushRegistry() => false;
  }
}
