// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: WaitHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A25291C7-A109-4713-B14B-FDD04827C77F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c95b09c6ffd61a284edc93ed78ccae28eae9cbf5eb73943fd588e31dfe8b57dc.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -2112418453;
        JSONNode jsonNode;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -816490920)) % 8U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = -2071815521;
              continue;
            case 2:
              goto label_1;
            case 3:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * 151346205 ^ -929338045;
              continue;
            case 4:
              int num3 = flag ? 89481289 : (num3 = 1057555797);
              num1 = num3 ^ (int) num2 * -1090986779;
              continue;
            case 5:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 494348030 ^ -1825003592;
              continue;
            case 6:
              num1 = (int) num2 * -88146730 ^ -606514244;
              continue;
            case 7:
              num1 = (int) num2 * -754006284 ^ -1297997100;
              continue;
            default:
              goto label_9;
          }
        }
label_9:
        return jsonNode;
      }
      set
      {
        if (!this.m_Dict.ContainsKey(aKey))
          goto label_8;
label_1:
        int num1 = 1677190065;
label_2:
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 878699226)) % 7U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * 2093233816 ^ -1627864459;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -67314236 ^ 478632519;
              continue;
            case 3:
              num1 = (int) num2 * -2141820674 ^ 278523390;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -2067571193 ^ 1344873183;
              continue;
            case 6:
              goto label_8;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:
        return;
label_8:
        this.m_Dict.Add(aKey, value);
        num1 = 1152305711;
        goto label_2;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 1439118021;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1531628418)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              int num4 = !flag ? -373924032 : (num4 = -28687874);
              num1 = num4 ^ (int) num2 * 1349475833;
              continue;
            case 2:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 3:
              jsonNode = (JSONNode) null;
              num1 = 1768525518;
              continue;
            case 5:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 285256694 ^ 1584753138;
              continue;
            case 6:
              num1 = (int) num2 * 415056473 ^ -910313504;
              continue;
            case 7:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -352019264 ^ -1323677824;
                continue;
              }
              num3 = 1;
              break;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = 1415683891;
        }
label_12:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1114602963;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1849761151)) % 6U)
          {
            case 0:
              int num4 = !flag ? -1257524597 : (num4 = -2061327194);
              num1 = num4 ^ (int) num2 * 781621002;
              continue;
            case 1:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 4:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * -291661262 ^ 855484460;
              continue;
            case 5:
              num1 = (int) num2 * -632113170 ^ -279342995;
              continue;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = -1091334745;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count
    {
      get
      {
        int count = this.m_Dict.Count;
label_1:
        int num1 = -369018608;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1349104012)) % 3U)
          {
            case 1:
              num1 = (int) num2 * -227722090 ^ 392369868;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = -1565646215;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -763617233)) % 13U)
        {
          case 0:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = -1190938514;
            continue;
          case 1:
            int num3 = !JSONClass.\u200F‍‎‌‬‫⁬‬‫‍‎‪⁯⁯⁮⁫⁫⁯‌⁬‫⁭‪⁮⁬⁯‍‭⁭‬‭‭⁮⁮⁮‬⁯⁭‭‮(aKey) ? -596789793 : (num3 = -1351510358);
            num1 = num3 ^ (int) num2 * 432645108;
            continue;
          case 2:
            goto label_3;
          case 3:
            int num4 = flag ? 1881705974 : (num4 = 1948058528);
            num1 = num4 ^ (int) num2 * 1917252301;
            continue;
          case 4:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 1072395525 ^ 1547859366;
            continue;
          case 5:
            num1 = -1763261735;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * 1323456301 ^ 1655664075;
            continue;
          case 8:
            this.m_Dict.Add(aKey, aItem);
            num1 = -1961674117;
            continue;
          case 9:
            flag = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * 341526835 ^ -1016182096;
            continue;
          case 10:
            num1 = (int) num2 * 1844118999 ^ -1607737010;
            continue;
          case 11:
            num1 = (int) num2 * -646077666 ^ -207768405;
            continue;
          case 12:
            num1 = (int) num2 * -727552304 ^ 1203647256;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public override JSONNode Remove(string aKey)
    {
      if (this.m_Dict.ContainsKey(aKey))
        goto label_5;
label_1:
      int num1 = 289836133;
label_2:
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 108593244)) % 8U)
        {
          case 0:
            this.m_Dict.Remove(aKey);
            num1 = (int) num2 * -1340477503 ^ -989251104;
            continue;
          case 1:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * 1647895816 ^ 2091329161;
            continue;
          case 2:
            num1 = (int) num2 * -906943292 ^ 1789449511;
            continue;
          case 4:
            jsonNode1 = jsonNode2;
            num1 = (int) num2 * 109346823 ^ -1922752070;
            continue;
          case 5:
            num1 = (int) num2 * 760988414 ^ -1300978135;
            continue;
          case 6:
            goto label_5;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode1;
label_5:
      jsonNode2 = this.m_Dict[aKey];
      num1 = 1494185100;
      goto label_2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = 1644699521;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1209750624)) % 7U)
        {
          case 0:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -1981339664 ^ 1229963177;
            continue;
          case 1:
            int num4 = flag ? -512461458 : (num4 = -1758160727);
            num1 = num4 ^ (int) num2 * -832189479;
            continue;
          case 3:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -291550974 ^ 153730737;
            continue;
          case 4:
            jsonNode = (JSONNode) null;
            num1 = 125099449;
            continue;
          case 5:
            goto label_1;
          case 6:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          default:
            goto label_11;
        }
        flag = num3 != 0;
        num1 = 339439449;
      }
label_11:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONClass.\u003Cget_Childs\u003Ed__14 getChildsD14 = new JSONClass.\u003Cget_Childs\u003Ed__14(-2);
label_1:
        int num1 = -2008827338;
        IEnumerable<JSONNode> childs;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1287609347)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              getChildsD14.\u003C\u003E4__this = this;
              childs = (IEnumerable<JSONNode>) getChildsD14;
              num1 = (int) num2 * -2092413415 ^ 108525983;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
label_1:
      int num1 = -447200184;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1867140611)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = "{";
            num1 = (int) num2 * 2037595355 ^ 520222521;
            continue;
          case 3:
            num1 = (int) num2 * 1107518193 ^ -1841811484;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_15:
        int num3 = enumerator.MoveNext() ? -678007204 : (num3 = -2083185937);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1867140611)) % 9U)
          {
            case 0:
              int num5 = !flag ? 1629926388 : (num5 = 907627382);
              num3 = num5 ^ (int) num4 * 976579815;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -735639992;
              continue;
            case 2:
              num3 = -678007204;
              continue;
            case 3:
              goto label_15;
            case 4:
              str1 = JSONClass.\u200E⁬‭⁭‮⁪⁮‬⁪⁫‭⁪‬‍⁫⁬⁯‍‎​‮⁮⁬⁫‎⁪‫‏⁯⁯⁪⁪​‮‍​‮⁮‮‬‮(str1, ", ");
              num3 = (int) num4 * 1013280876 ^ -1935542355;
              continue;
            case 5:
              num3 = (int) num4 * 973730323 ^ -173202512;
              continue;
            case 6:
              flag = JSONClass.\u206B⁪⁭‬⁮⁬⁬⁯​⁮⁮‪‬‎‍‫‪‌‮‮‭‬⁪⁭⁫‌⁫‫​⁫⁭‫‎‪‭‍⁭⁭‍⁪‮(str1) > 2;
              num3 = (int) num4 * -1136035659 ^ -932406016;
              continue;
            case 8:
              str1 = JSONClass.\u202C‪‬​‫‫‪⁭⁯‫⁬‌‮‪⁭‌‏‫⁭‌⁮⁪‍‮‏‪‍⁬⁭‪‌‏⁫⁭⁮⁯‮‌‏⁬‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202D‮‫‎‪‌‏‍‮⁮‪⁫⁫‎‭‮​‪‍⁫⁯‪‎‎‌‌​⁭‬⁭‪‬⁯⁪‫‫‎‪‫‌‮((object) current.Value)
              });
              num3 = -340210494;
              continue;
            default:
              goto label_21;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_17:
        int num6 = -2019633851;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -1867140611)) % 3U)
          {
            case 0:
              goto label_17;
            case 2:
              num6 = (int) num7 * 547540287 ^ -293367761;
              continue;
            default:
              goto label_20;
          }
        }
label_20:;
      }
label_21:
      string str2 = JSONClass.\u200E⁬‭⁭‮⁪⁮‬⁪⁫‭⁪‬‍⁫⁬⁯‍‎​‮⁮⁬⁫‎⁪‫‏⁯⁯⁪⁪​‮‍​‮⁮‮‬‮(str1, "}");
label_22:
      int num8 = -1433448143;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ -1867140611)) % 3U)
        {
          case 1:
            num8 = (int) num9 * -1904823765 ^ -854127044;
            continue;
          case 2:
            goto label_22;
          default:
            goto label_25;
        }
      }
label_25:
      return str2;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_9:
        int num1 = enumerator.MoveNext() ? -1496677291 : (num1 = -1174608409);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1609819257)) % 9U)
          {
            case 1:
              goto label_9;
            case 2:
              num1 = (int) num2 * 1346458383 ^ 1357005681;
              continue;
            case 3:
              num1 = -1496677291;
              continue;
            case 4:
              str1 = JSONClass.\u202C‪‬​‫‫‪⁭⁯‫⁬‌‮‪⁭‌‏‫⁭‌⁮⁪‍‮‏‪‍⁬⁭‪‌‏⁫⁭⁮⁯‮‌‏⁬‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u200E⁬‭⁭‮⁪⁮‬⁪⁫‭⁪‬‍⁫⁬⁯‍‎​‮⁮⁬⁫‎⁪‫‏⁯⁯⁪⁪​‮‍​‮⁮‮‬‮(aPrefix, "   "))
              });
              num1 = (int) num2 * -384591694 ^ -1741217547;
              continue;
            case 5:
              int num3 = JSONClass.\u206B⁪⁭‬⁮⁬⁬⁯​⁮⁮‪‬‎‍‫‪‌‮‮‭‬⁪⁭⁫‌⁫‫​⁫⁭‫‎‪‭‍⁭⁭‍⁪‮(str1) <= 3 ? -1828861806 : (num3 = -77574416);
              num1 = num3 ^ (int) num2 * 724556788;
              continue;
            case 6:
              current = enumerator.Current;
              num1 = -1397228989;
              continue;
            case 7:
              str1 = JSONClass.\u202D⁯‮‫⁮‎⁯⁮‮‮‮⁭‫‎⁯‮‫‌‌‎‪‍‮‮⁪​‫‭⁪‫⁭⁮⁮‬⁭‍​‪‭‬‮(str1, "\n", aPrefix, "   ");
              num1 = -818912343;
              continue;
            case 8:
              str1 = JSONClass.\u200E⁬‭⁭‮⁪⁮‬⁪⁫‭⁪‬‍⁫⁬⁯‍‎​‮⁮⁬⁫‎⁪‫‏⁯⁯⁪⁪​‮‍​‮⁮‮‬‮(str1, ", ");
              num1 = (int) num2 * -1954006015 ^ -66280987;
              continue;
            default:
              goto label_16;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_12:
        int num4 = -1874579066;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ -1609819257)) % 3U)
          {
            case 0:
              goto label_12;
            case 1:
              num4 = (int) num5 * 167038577 ^ -275504179;
              continue;
            default:
              goto label_15;
          }
        }
label_15:;
      }
label_16:
      string str2 = JSONClass.\u202D⁯‮‫⁮‎⁯⁮‮‮‮⁭‫‎⁯‮‫‌‌‎‪‍‮‮⁪​‫‭⁪‫⁭⁮⁮‬⁭‍​‪‭‬‮(str1, "\n", aPrefix, "}");
label_17:
      int num6 = -993885047;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -1609819257)) % 3U)
        {
          case 0:
            goto label_17;
          case 2:
            num6 = (int) num7 * 1022934590 ^ -267486289;
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return str2;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = 1548937947;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 136088880)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 647763700 ^ -1410539911;
            continue;
          case 3:
            JSONClass.\u200D⁫‬‪‌⁬​⁮⁬⁮⁫‍‍‍⁯⁭⁪⁬‬‏‬‌‏‌‎‏‎‬‭​⁭⁭​⁪⁪‍​⁮​‌‮(aWriter, (byte) 2);
            num1 = (int) num2 * -1375550283 ^ 655212941;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      JSONClass.\u202C‏‪‍‭‫⁮⁮‏⁫⁭‌⁫‌‬⁮‏‭⁯‬‍⁬‌‫‬‌⁮⁫⁫⁬⁬⁭⁭⁫‮‫⁮‎‭‭‮(aWriter, this.m_Dict.Count);
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_12:
        int num3 = !enumerator.MoveNext() ? 53126875 : (num3 = 565093860);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 136088880)) % 8U)
          {
            case 0:
              num3 = 565093860;
              continue;
            case 1:
              num3 = (int) num4 * -1881140235 ^ 1408115130;
              continue;
            case 2:
              num3 = (int) num4 * -1314920868 ^ 1971697046;
              continue;
            case 3:
              goto label_16;
            case 4:
              current = enumerator.Current;
              num3 = 1655126834;
              continue;
            case 5:
              goto label_12;
            case 6:
              JSONClass.\u202B‮‎‭​⁭⁭⁮​⁭⁮‍​⁮‪​⁮‎‫⁪‬​‪‮⁪⁪⁯‪‍‌⁬⁬⁯⁪‍⁪‌‏‮⁭‮(aWriter, current);
              num3 = (int) num4 * -574272645 ^ -521810773;
              continue;
            case 7:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * 1731282712 ^ 121481029;
              continue;
            default:
              goto label_9;
          }
        }
label_16:
        return;
label_9:;
      }
    }

    static bool \u200F‍‎‌‬‫⁬‬‫‍‎‪⁯⁯⁮⁫⁫⁯‌⁬‫⁭‪⁮⁬⁯‍‭⁭‬‭‭⁮⁮⁮‬⁯⁭‭‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206B⁪⁭‬⁮⁬⁬⁯​⁮⁮‪‬‎‍‫‪‌‮‮‭‬⁪⁭⁫‌⁫‫​⁫⁭‫‎‪‭‍⁭⁭‍⁪‮([In] string obj0) => obj0.Length;

    static string \u200E⁬‭⁭‮⁪⁮‬⁪⁫‭⁪‬‍⁫⁬⁯‍‎​‮⁮⁬⁫‎⁪‫‏⁯⁯⁪⁪​‮‍​‮⁮‮‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D‮‫‎‪‌‏‍‮⁮‪⁫⁫‎‭‮​‪‍⁫⁯‪‎‎‌‌​⁭‬⁭‪‬⁯⁪‫‫‎‪‫‌‮([In] object obj0) => obj0.ToString();

    static string \u202C‪‬​‫‫‪⁭⁯‫⁬‌‮‪⁭‌‏‫⁭‌⁮⁪‍‮‏‪‍⁬⁭‪‌‏⁫⁭⁮⁯‮‌‏⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202D⁯‮‫⁮‎⁯⁮‮‮‮⁭‫‎⁯‮‫‌‌‎‪‍‮‮⁪​‫‭⁪‫⁭⁮⁮‬⁭‍​‪‭‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u200D⁫‬‪‌⁬​⁮⁬⁮⁫‍‍‍⁯⁭⁪⁬‬‏‬‌‏‌‎‏‎‬‭​⁭⁭​⁪⁪‍​⁮​‌‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u202C‏‪‍‭‫⁮⁮‏⁫⁭‌⁫‌‬⁮‏‭⁯‬‍⁬‌‫‬‌⁮⁫⁫⁬⁬⁭⁭⁫‮‫⁮‎‭‭‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202B‮‎‭​⁭⁭⁮​⁭⁮‍​⁮‪​⁮‎‫⁪‬​‪‮⁪⁪⁯‪‍‌⁬⁬⁯⁪‍⁪‌‏‮⁭‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
