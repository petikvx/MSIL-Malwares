// Decompiled with JetBrains decompiler
// Type: Timebox.TimeLabel
// Assembly: PolicyExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 52F55652-F9DF-416D-B2DD-AA6DA3298B76
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\Trojan.Win32.Vimditator.alim-e740634fa7cca3715fa9eb7fa30892467e31d044ed6f661ad25dae49298862d7.exe

using System.Drawing;
using System.Windows.Forms;

namespace Timebox
{
  internal class TimeLabel : Label
  {
    private int m_elapsed;
    private bool m_notify;
    private bool m_timeboxExpired;
    private bool m_stopOnEnd;
    private StringFormat m_fmt;
    private Font m_timeboxFont;

    public event TimeLabel.TimeboxExpiredHandler TimeboxExpired
    {
      add
      {
        // ISSUE: unable to decompile the method.
      }
      remove
      {
        // ISSUE: unable to decompile the method.
      }
    }

    public TimeLabel()
    {
      // ISSUE: unable to decompile the method.
    }

    protected override void OnPaint(PaintEventArgs e);

    private void DrawProgressBar(Graphics graphics)
    {
      // ISSUE: unable to decompile the method.
    }

    private void DrawElapsedTime(Graphics graphics)
    {
      // ISSUE: unable to decompile the method.
    }

    private void DrawTimeboxInfo(Graphics graphics)
    {
      // ISSUE: unable to decompile the method.
    }

    public void SetTimebox(int duration, bool notify, bool stopOnEnd)
    {
      // ISSUE: unable to decompile the method.
    }

    private int TimeboxDuration
    {
      get
      {
        // ISSUE: unable to decompile the method.
      }
      set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    public bool HasTimebox
    {
      get
      {
        // ISSUE: unable to decompile the method.
      }
    }

    public int Elapsed
    {
      get
      {
        // ISSUE: unable to decompile the method.
      }
      set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    public delegate void TimeboxExpiredHandler(object sender, bool alert, bool stopOnEnd);
  }
}
