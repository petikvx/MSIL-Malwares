// Decompiled with JetBrains decompiler
// Type: 386703094440.451891829761
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003874656485198;
using System;
using System.Diagnostics;

namespace \u003386703094440
{
  public class \u003451891829761 : ITraceWriter
  {
    public TraceLevel \u003417647492756 { get; set; }

    private TraceEventType \u003271941132897(TraceLevel _param1)
    {
      switch (_param1)
      {
        case TraceLevel.Error:
          return TraceEventType.Error;
        case TraceLevel.Warning:
          return TraceEventType.Warning;
        case TraceLevel.Info:
          return TraceEventType.Information;
        case TraceLevel.Verbose:
          return TraceEventType.Verbose;
        default:
          throw new ArgumentOutOfRangeException("level");
      }
    }

    public void \u003929724965187(TraceLevel _param1, string _param2, Exception _param3)
    {
      if (_param1 == TraceLevel.Off)
        return;
      TraceEventCache eventCache = new TraceEventCache();
      TraceEventType eventType = this.\u003271941132897(_param1);
      foreach (TraceListener listener in Trace.Listeners)
      {
        if (!listener.IsThreadSafe)
        {
          lock (listener)
            listener.TraceEvent(eventCache, "Newtonsoft.Json", eventType, 0, _param2);
        }
        else
          listener.TraceEvent(eventCache, "Newtonsoft.Json", eventType, 0, _param2);
        if (Trace.AutoFlush)
          listener.Flush();
      }
    }
  }
}
