// Decompiled with JetBrains decompiler
// Type: LTSvcMon.cSecurity
// Assembly: LTSvcMon, Version=40.101.4107.19874, Culture=neutral, PublicKeyToken=null
// MVID: 816B70F7-DB44-4BCA-BD08-988C39A8AB45
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Patched.mf-f4d248fac8113c5e0ed835350bfdc060077775705ca69e00ce08a4a7e4643090.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Security.Cryptography;
using System.Text;

namespace LTSvcMon
{
  internal class cSecurity
  {
    private byte[] lbtVector;
    private string lscryptoKey;

    public cSecurity(string key)
    {
      this.lbtVector = new byte[8]
      {
        (byte) 240,
        (byte) 3,
        (byte) 45,
        (byte) 29,
        (byte) 0,
        (byte) 76,
        (byte) 173,
        (byte) 59
      };
      this.lscryptoKey = key;
    }

    public string PSDecrypt(string sQueryString)
    {
      MD5CryptoServiceProvider cryptoServiceProvider1 = new MD5CryptoServiceProvider();
      TripleDESCryptoServiceProvider cryptoServiceProvider2 = new TripleDESCryptoServiceProvider();
      try
      {
        byte[] inputBuffer = !string.IsNullOrEmpty(sQueryString) ? Convert.FromBase64String(sQueryString) : throw new Exception("Unable to decrypt empty string");
        if (inputBuffer.Length < 1)
          throw new Exception("Unable to decrypt empty buffer");
        cryptoServiceProvider2.Key = cryptoServiceProvider1.ComputeHash(Encoding.ASCII.GetBytes(this.lscryptoKey));
        cryptoServiceProvider2.IV = this.lbtVector;
        return Encoding.ASCII.GetString(cryptoServiceProvider2.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
      finally
      {
        cryptoServiceProvider2.Clear();
        cryptoServiceProvider1.Clear();
      }
    }

    public string PSEncrypt(string sInputVal)
    {
      TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      try
      {
        byte[] bytes = Encoding.ASCII.GetBytes(sInputVal);
        cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(this.lscryptoKey));
        cryptoServiceProvider1.IV = this.lbtVector;
        sInputVal = Convert.ToBase64String(cryptoServiceProvider1.CreateEncryptor().TransformFinalBlock(bytes, 0, bytes.Length));
        return sInputVal;
      }
      catch (CryptographicException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        throw ex;
      }
      catch (FormatException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        throw ex;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
      finally
      {
        cryptoServiceProvider1.Clear();
        cryptoServiceProvider2.Clear();
      }
    }

    public byte[] PSDecrypt(byte[] buffer, int Offset, int Length)
    {
      TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      try
      {
        if (Length == 0 || buffer == null)
          throw new Exception("Unable to decrypt empty buffer");
        cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(this.lscryptoKey));
        cryptoServiceProvider1.IV = this.lbtVector;
        return cryptoServiceProvider1.CreateDecryptor().TransformFinalBlock(buffer, Offset, Length);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
      finally
      {
        cryptoServiceProvider1.Clear();
        cryptoServiceProvider2.Clear();
      }
    }

    public byte[] PSEncrypt(byte[] lbtBuffer, int Offset, int Length)
    {
      TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      try
      {
        cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(this.lscryptoKey));
        cryptoServiceProvider1.IV = this.lbtVector;
        return cryptoServiceProvider1.CreateEncryptor().TransformFinalBlock(lbtBuffer, Offset, Length);
      }
      catch (CryptographicException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        throw ex;
      }
      catch (FormatException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        throw ex;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        throw ex;
      }
      finally
      {
        cryptoServiceProvider1.Clear();
        cryptoServiceProvider2.Clear();
      }
    }
  }
}
