// Decompiled with JetBrains decompiler
// Type: #1b.#ac
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using \u00231b;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

namespace \u00231b
{
  internal class \u0023ac
  {
    internal static Dictionary<string, Assembly> \u00234b;

    internal static bool IsWebApplication
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        string lower;
        try
        {
          bool flag;
          try
          {
            lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
            if (lower == "w3wp.exe")
            {
              flag = true;
              goto label_6;
            }
            else if (lower == "aspnet_wp.exe")
            {
              flag = true;
              goto label_6;
            }
          }
          catch
          {
          }
          return false;
label_6:
          return flag;
        }
        catch (Exception ex)
        {
          string str = lower;
          bool flag;
          __Boxed<bool> local = (ValueType) flag;
          \u0023\u0023.\u0023Jk(ex, (object) str, (object) local);
          throw;
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0023ac()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0023ac()
    {
      try
      {
        \u0023ac.\u00234b = new Dictionary<string, Assembly>();
      }
      catch (Exception ex)
      {
        \u0023\u0023.\u00236i(ex);
        throw;
      }
    }

    internal static bool dRuNLQ6JY9qwFnUx1F() => true;

    internal static bool nTSfuBPfY8REK0eZ3u() => false;

    internal struct \u0023gc
    {
      public string \u0023B;
      public Version \u0023bc;
      public string \u0023cc;
      public string \u0023dc;

      [MethodImpl(MethodImplOptions.NoInlining)]
      public string \u0023ec(bool _param1)
      {
        StringBuilder stringBuilder1;
        try
        {
          stringBuilder1 = new StringBuilder();
          stringBuilder1.Append(this.\u0023B);
          int num1 = 5;
          while (true)
          {
            int num2 = num1;
            while (true)
            {
              switch (num2)
              {
                case 0:
                case 5:
                  goto label_1;
                case 1:
                  stringBuilder1.Append(this.\u0023dc.Length == 0 ? "null" : this.\u0023dc);
                  if (\u0023ac.\u0023gc.wdUyZgEklIqD2l7NCC())
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_8;
                case 2:
                case 3:
                  goto label_8;
                case 4:
                  goto label_3;
                case 6:
                  goto label_9;
                default:
                  if (true)
                  {
                    num2 = 3;
                    continue;
                  }
                  goto case 1;
              }
            }
label_1:
            if (_param1 && this.\u0023bc != (Version) null)
            {
              stringBuilder1.Append(", Version=");
              num1 = 4;
              continue;
            }
            goto label_8;
label_3:
            stringBuilder1.Append((object) this.\u0023bc);
label_8:
            stringBuilder1.Append(", Culture=");
            stringBuilder1.Append(this.\u0023cc.Length == 0 ? "neutral" : this.\u0023cc);
            stringBuilder1.Append(", PublicKeyToken=");
            num1 = 1;
          }
label_9:
          return stringBuilder1.ToString();
        }
        catch (Exception ex)
        {
          StringBuilder stringBuilder2 = stringBuilder1;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023ac.\u0023gc> local1 = (ValueType) this;
          // ISSUE: variable of a boxed type
          __Boxed<bool> local2 = (ValueType) _param1;
          \u0023\u0023.\u0023Dj(ex, (object) stringBuilder2, (object) local1, (object) local2);
          throw;
        }
      }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public \u0023gc(string assemblyFullName)
      {
        char[] chArray1;
        string[] strArray1;
        string str1;
        int index;
        string str2;
        try
        {
          this.\u0023bc = (Version) null;
          int num1 = 3;
          while (true)
          {
            int num2 = num1;
            while (true)
            {
              switch (num2)
              {
                case 0:
                case 3:
                  this.\u0023cc = string.Empty;
                  this.\u0023dc = string.Empty;
                  this.\u0023B = string.Empty;
                  num2 = 2;
                  continue;
                case 1:
                  index = 0;
                  goto case 5;
                case 2:
                  goto label_1;
                case 4:
                case 7:
                  if (str1.StartsWith("Version="))
                  {
                    this.\u0023bc = new Version(str1.Substring(8));
                    goto case 6;
                  }
                  else if (str1.StartsWith("Culture="))
                  {
                    this.\u0023cc = str1.Substring(8);
                    if (this.\u0023cc == "neutral")
                    {
                      this.\u0023cc = string.Empty;
                      goto case 6;
                    }
                    else
                      goto case 6;
                  }
                  else if (str1.StartsWith("PublicKeyToken="))
                  {
                    this.\u0023dc = str1.Substring(15);
                    if (this.\u0023dc == "null")
                    {
                      this.\u0023dc = string.Empty;
                      if (true)
                      {
                        num2 = 6;
                        continue;
                      }
                      goto case 5;
                    }
                    else
                      goto case 6;
                  }
                  else
                  {
                    this.\u0023B = str1;
                    goto case 6;
                  }
                case 5:
                case 8:
                  if (index < strArray1.Length)
                  {
                    str2 = strArray1[index];
                    str1 = str2.Trim();
                    if (true)
                    {
                      num2 = 7;
                      continue;
                    }
                    goto case 1;
                  }
                  else
                    goto label_20;
                case 6:
                  ++index;
                  int num3 = 8;
                  num2 = \u0023ac.\u0023gc.aKv3CGlEgakcRpFUAP() ? num3 : num3;
                  continue;
                default:
                  goto label_14;
              }
            }
label_1:
            string str3 = assemblyFullName;
            chArray1 = new char[1]{ ',' };
            char[] chArray2 = chArray1;
            strArray1 = str3.Split(chArray2);
            num1 = 1;
            continue;
label_14:
            num1 = 5;
          }
label_20:;
        }
        catch (Exception ex)
        {
          string str4 = str2;
          string str5 = str1;
          char[] chArray3 = chArray1;
          string[] strArray2 = strArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<\u0023ac.\u0023gc> local2 = (ValueType) this;
          string str6 = assemblyFullName;
          \u0023\u0023.\u00233k(ex, (object) str4, (object) str5, (object) chArray3, (object) strArray2, (object) local1, (object) local2, (object) str6);
          throw;
        }
      }

      internal static bool wdUyZgEklIqD2l7NCC() => true;

      internal static bool aKv3CGlEgakcRpFUAP() => false;
    }
  }
}
