// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.ZipEntryFactory
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Core;
using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
  public class ZipEntryFactory : IEntryFactory
  {
    private INameTransform \uE005;
    private DateTime \uE004 = DateTime.Now;
    private ZipEntryFactory.TimeSetting \uE003;
    private bool \uE002;
    private int \uE001 = -1;
    private int \uE000;

    public ZipEntryFactory() => this.\uE005 = (INameTransform) new ZipNameTransform();

    public ZipEntryFactory(ZipEntryFactory.TimeSetting timeSetting)
    {
      this.\uE003 = timeSetting;
      this.\uE005 = (INameTransform) new ZipNameTransform();
    }

    public ZipEntryFactory(DateTime time)
    {
      this.\uE003 = ZipEntryFactory.TimeSetting.Fixed;
      this.FixedDateTime = time;
      this.\uE005 = (INameTransform) new ZipNameTransform();
    }

    public INameTransform NameTransform
    {
      get => this.\uE005;
      set
      {
        if (value == null)
          this.\uE005 = (INameTransform) new ZipNameTransform();
        else
          this.\uE005 = value;
      }
    }

    public ZipEntryFactory.TimeSetting Setting
    {
      get => this.\uE003;
      set => this.\uE003 = value;
    }

    public DateTime FixedDateTime
    {
      get => this.\uE004;
      set => this.\uE004 = value.Year >= 1970 ? value : throw new ArgumentException(\uE01B.\uE000("\uE2D6\uE2E1\uE2EC\uE2F5\uE2E5\uE2A0\uE2E9\uE2F3\uE2A0\uE2F4\uE2EF\uE2EF\uE2A0\uE2EF\uE2EC\uE2E4\uE2A0\uE2F4\uE2EF\uE2A0\uE2E2\uE2E5\uE2A0\uE2F6\uE2E1\uE2EC\uE2E9\uE2E4", 57984), \uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }

    public int GetAttributes
    {
      get => this.\uE001;
      set => this.\uE001 = value;
    }

    public int SetAttributes
    {
      get => this.\uE000;
      set => this.\uE000 = value;
    }

    public bool IsUnicodeText
    {
      get => this.\uE002;
      set => this.\uE002 = value;
    }

    public ZipEntry MakeFileEntry(string fileName) => this.MakeFileEntry(fileName, true);

    public ZipEntry MakeFileEntry(string fileName, bool useFileSystem)
    {
      ZipEntry zipEntry = new ZipEntry(this.\uE005.TransformFile(fileName));
      zipEntry.IsUnicodeText = this.\uE002;
      int num1 = 0;
      bool flag = this.\uE000 != 0;
      FileInfo fileInfo = (FileInfo) null;
      if (useFileSystem)
        fileInfo = new FileInfo(fileName);
      if (fileInfo != null && fileInfo.Exists)
      {
        switch (this.\uE003)
        {
          case ZipEntryFactory.TimeSetting.LastWriteTime:
            zipEntry.DateTime = fileInfo.LastWriteTime;
            break;
          case ZipEntryFactory.TimeSetting.LastWriteTimeUtc:
            zipEntry.DateTime = fileInfo.LastWriteTimeUtc;
            break;
          case ZipEntryFactory.TimeSetting.CreateTime:
            zipEntry.DateTime = fileInfo.CreationTime;
            break;
          case ZipEntryFactory.TimeSetting.CreateTimeUtc:
            zipEntry.DateTime = fileInfo.CreationTimeUtc;
            break;
          case ZipEntryFactory.TimeSetting.LastAccessTime:
            zipEntry.DateTime = fileInfo.LastAccessTime;
            break;
          case ZipEntryFactory.TimeSetting.LastAccessTimeUtc:
            zipEntry.DateTime = fileInfo.LastAccessTimeUtc;
            break;
          case ZipEntryFactory.TimeSetting.Fixed:
            zipEntry.DateTime = this.\uE004;
            break;
          default:
            throw new ZipException(\uE01B.\uE000("\uEAC5\uEAFE\uEAF8\uEAF1\uEAFE\uEAF4\uEAFC\uEAF5\uEAF4\uEAB0\uEAE4\uEAF9\uEAFD\uEAF5\uEAB0\uEAE3\uEAF5\uEAE4\uEAE4\uEAF9\uEAFE\uEAF7\uEAB0\uEAF9\uEAFE\uEAB0\uEADD\uEAF1\uEAFB\uEAF5\uEAD6\uEAF9\uEAFC\uEAF5\uEAD5\uEAFE\uEAE4\uEAE2\uEAE9", 60048));
        }
        zipEntry.Size = fileInfo.Length;
        flag = true;
        num1 = (int) (fileInfo.Attributes & (FileAttributes) this.\uE001);
      }
      else if (this.\uE003 == ZipEntryFactory.TimeSetting.Fixed)
        zipEntry.DateTime = this.\uE004;
      if (flag)
      {
        int num2 = num1 | this.\uE000;
        zipEntry.ExternalFileAttributes = num2;
      }
      return zipEntry;
    }

    public ZipEntry MakeDirectoryEntry(string directoryName) => this.MakeDirectoryEntry(directoryName, true);

    public ZipEntry MakeDirectoryEntry(string directoryName, bool useFileSystem)
    {
      ZipEntry zipEntry = new ZipEntry(this.\uE005.TransformDirectory(directoryName));
      zipEntry.Size = 0L;
      int num1 = 0;
      DirectoryInfo directoryInfo = (DirectoryInfo) null;
      if (useFileSystem)
        directoryInfo = new DirectoryInfo(directoryName);
      if (directoryInfo != null && directoryInfo.Exists)
      {
        switch (this.\uE003)
        {
          case ZipEntryFactory.TimeSetting.LastWriteTime:
            zipEntry.DateTime = directoryInfo.LastWriteTime;
            break;
          case ZipEntryFactory.TimeSetting.LastWriteTimeUtc:
            zipEntry.DateTime = directoryInfo.LastWriteTimeUtc;
            break;
          case ZipEntryFactory.TimeSetting.CreateTime:
            zipEntry.DateTime = directoryInfo.CreationTime;
            break;
          case ZipEntryFactory.TimeSetting.CreateTimeUtc:
            zipEntry.DateTime = directoryInfo.CreationTimeUtc;
            break;
          case ZipEntryFactory.TimeSetting.LastAccessTime:
            zipEntry.DateTime = directoryInfo.LastAccessTime;
            break;
          case ZipEntryFactory.TimeSetting.LastAccessTimeUtc:
            zipEntry.DateTime = directoryInfo.LastAccessTimeUtc;
            break;
          case ZipEntryFactory.TimeSetting.Fixed:
            zipEntry.DateTime = this.\uE004;
            break;
          default:
            throw new ZipException(\uE01B.\uE000("\uEBEF\uEBD4\uEBD2\uEBDB\uEBD4\uEBDE\uEBD6\uEBDF\uEBDE\uEB9A\uEBCE\uEBD3\uEBD7\uEBDF\uEB9A\uEBC9\uEBDF\uEBCE\uEBCE\uEBD3\uEBD4\uEBDD\uEB9A\uEBD3\uEBD4\uEB9A\uEBF7\uEBDB\uEBD1\uEBDF\uEBFE\uEBD3\uEBC8\uEBDF\uEBD9\uEBCE\uEBD5\uEBC8\uEBC3\uEBFF\uEBD4\uEBCE\uEBC8\uEBC3", 60346));
        }
        num1 = (int) (directoryInfo.Attributes & (FileAttributes) this.\uE001);
      }
      else if (this.\uE003 == ZipEntryFactory.TimeSetting.Fixed)
        zipEntry.DateTime = this.\uE004;
      int num2 = num1 | this.\uE000 | 16;
      zipEntry.ExternalFileAttributes = num2;
      return zipEntry;
    }

    public enum TimeSetting
    {
      LastWriteTime,
      LastWriteTimeUtc,
      CreateTime,
      CreateTimeUtc,
      LastAccessTime,
      LastAccessTimeUtc,
      Fixed,
    }
  }
}
