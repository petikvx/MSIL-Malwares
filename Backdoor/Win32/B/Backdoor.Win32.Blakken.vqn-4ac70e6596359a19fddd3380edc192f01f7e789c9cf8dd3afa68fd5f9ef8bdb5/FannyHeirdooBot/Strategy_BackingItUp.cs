// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.Strategy_BackingItUp
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot
{
  public class Strategy_BackingItUp : IBotStrategy
  {
    private List<AttackPlan> attackQueue = new List<AttackPlan>();
    private Universe currentUniverse;
    private Random rnd = Strategy_BackingItUp.\u200D⁫⁭​‫‮‍⁮‭‏‏​‍⁮⁬‮​‍⁪‪‫⁬⁪‬‫‮⁭‮‌‮‮‪⁮‏‮⁯⁯‏⁬‬‮();

    protected void ProcessAttackQueue()
    {
      this.DefendNeutralPlanets(30);
label_1:
      int num1 = 1225127722;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 161575882)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            this.DefendOnwedPlanets();
            num1 = (int) num2 * 684636915 ^ -1796555741;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, Planet>.ValueCollection.Enumerator enumerator = this.currentUniverse.Planets.Values.GetEnumerator())
      {
label_10:
        int num3 = !enumerator.MoveNext() ? 1077506616 : (num3 = 1044542249);
        Planet current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 161575882)) % 7U)
          {
            case 1:
              current = enumerator.Current;
              num3 = 1307623198;
              continue;
            case 2:
              num3 = 1044542249;
              continue;
            case 3:
              goto label_10;
            case 4:
              current.IsInAttackQueue = false;
              num3 = (int) num4 * 1384194453 ^ 1714192502;
              continue;
            case 5:
              num3 = (int) num4 * 196409855 ^ -127426904;
              continue;
            case 6:
              num3 = (int) num4 * -1865034317 ^ -1068720673;
              continue;
            default:
              goto label_14;
          }
        }
      }
label_14:
      using (List<AttackPlan>.Enumerator enumerator = this.attackQueue.ToList<AttackPlan>().GetEnumerator())
      {
label_20:
        int num5 = !enumerator.MoveNext() ? 1156902101 : (num5 = 1560869976);
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 161575882)) % 4U)
          {
            case 0:
              num5 = 1560869976;
              continue;
            case 1:
              goto label_20;
            case 2:
              this.ExecutePlans(enumerator.Current);
              num5 = 1780128539;
              continue;
            case 3:
              goto label_21;
            default:
              goto label_18;
          }
        }
label_21:
        return;
label_18:;
      }
    }

    protected bool ExecutePlans(AttackPlan sweetPlan)
    {
label_1:
      int num1 = 1028190547;
      bool flag1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 47236652)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            flag1 = false;
            num1 = (int) num2 * -985018559 ^ -686887448;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      List<AttackPlanParticipant>.Enumerator enumerator1 = sweetPlan.Participants.GetEnumerator();
      try
      {
label_15:
        int num3 = !enumerator1.MoveNext() ? 588871236 : (num3 = 1626283823);
        while (true)
        {
          uint num4;
          Planet source;
          AttackPlanParticipant current;
          bool flag2;
          bool flag3;
          bool isMine;
          int shipCount;
          int num5;
          switch ((num4 = (uint) (num3 ^ 47236652)) % 29U)
          {
            case 0:
              num3 = (int) num4 * -2028795128 ^ 1560642699;
              continue;
            case 1:
              this.currentUniverse.MakeMove(source, sweetPlan.Target, shipCount);
              num3 = (int) num4 * -649610688 ^ 692914197;
              continue;
            case 2:
              goto label_15;
            case 3:
              source.IsInAttackQueue = current.ScheduledTurn > 0;
              num3 = (int) num4 * 445069264 ^ -147635647;
              continue;
            case 4:
              num3 = 746046808;
              continue;
            case 5:
              --current.ScheduledTurn;
              num3 = 692184646;
              continue;
            case 6:
              num3 = 1141215109;
              continue;
            case 7:
              int num6 = isMine ? 73314330 : (num6 = 1414453979);
              num3 = num6 ^ (int) num4 * 1287984288;
              continue;
            case 9:
              shipCount = current.AttackersTurn.NumShips;
              num3 = (int) num4 * 39012531 ^ -1410298281;
              continue;
            case 10:
              shipCount = Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(current.DefendersTurn.NumShips + 1, shipCount);
              num3 = (int) num4 * -413830036 ^ -1931387293;
              continue;
            case 11:
              int num7 = !sweetPlan.Target.IsMine ? -1214993762 : (num7 = -208649974);
              num3 = num7 ^ (int) num4 * 964524595;
              continue;
            case 12:
              num5 = sweetPlan.DominationMove ? 1 : 0;
              break;
            case 13:
              int num8 = flag3 ? -2139025673 : (num8 = -303928265);
              num3 = num8 ^ (int) num4 * 420835327;
              continue;
            case 14:
              num3 = (int) num4 * -1717607298 ^ 1782768814;
              continue;
            case 15:
              if (current.DefendersTurn.Owner != 1)
              {
                num5 = 1;
                break;
              }
              num3 = (int) num4 * 1942970956 ^ -1900646342;
              continue;
            case 16:
              source.CreateTurnPredictions();
              num3 = (int) num4 * 1101183523 ^ -1934502638;
              continue;
            case 17:
              current = enumerator1.Current;
              num3 = 1589899451;
              continue;
            case 18:
              shipCount = Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(shipCount, source.AttackForce);
              num3 = 355046018;
              continue;
            case 19:
              num3 = (int) num4 * -1312651026 ^ 692130555;
              continue;
            case 20:
              num3 = 1626283823;
              continue;
            case 21:
              source = current.Source;
              num3 = (int) num4 * -912883329 ^ -459675618;
              continue;
            case 22:
              isMine = source.IsMine;
              num3 = (int) num4 * 1748467992 ^ -1281982749;
              continue;
            case 23:
              num3 = (int) num4 * -1926515431 ^ -1230544584;
              continue;
            case 24:
              flag2 = current.ScheduledTurn <= 0;
              num3 = (int) num4 * 1992944395 ^ 1778116895;
              continue;
            case 25:
              num3 = (int) num4 * -1386059177 ^ 549038143;
              continue;
            case 26:
              num3 = (int) num4 * 954008179 ^ 1208116726;
              continue;
            case 27:
              int num9 = !flag2 ? 628028216 : (num9 = 652718987);
              num3 = num9 ^ (int) num4 * -806690424;
              continue;
            case 28:
              flag1 = true;
              num3 = (int) num4 * -1810069720 ^ 799641200;
              continue;
            default:
              goto label_43;
          }
          flag3 = num5 != 0;
          num3 = 36764258;
        }
      }
      finally
      {
        enumerator1.Dispose();
label_39:
        int num10 = 875028249;
        while (true)
        {
          uint num11;
          switch ((num11 = (uint) (num10 ^ 47236652)) % 3U)
          {
            case 0:
              goto label_39;
            case 1:
              num10 = (int) num11 * 1501970897 ^ 916312298;
              continue;
            default:
              goto label_42;
          }
        }
label_42:;
      }
label_43:
      if (sweetPlan.Target.IsMine)
        goto label_47;
label_44:
      int num12 = 328083530;
label_45:
      while (true)
      {
        uint num13;
        switch ((num13 = (uint) (num12 ^ 47236652)) % 4U)
        {
          case 0:
            goto label_44;
          case 1:
            num12 = (int) num13 * -6370604 ^ -1882760421;
            continue;
          case 2:
            goto label_46;
          default:
            goto label_51;
        }
      }
label_46:
      int num14 = sweetPlan.Participants.Count == 0 ? 1 : 0;
      goto label_48;
label_51:
      List<AttackPlanParticipant>.Enumerator enumerator2 = sweetPlan.Participants.GetEnumerator();
      try
      {
label_56:
        int num15 = enumerator2.MoveNext() ? 520048026 : (num15 = 1067220392);
        AttackPlanParticipant current;
        while (true)
        {
          uint num16;
          switch ((num16 = (uint) (num15 ^ 47236652)) % 7U)
          {
            case 0:
              num15 = (int) num16 * 860749565 ^ -157301927;
              continue;
            case 2:
              current.Source.IsInAttackQueue = false;
              num15 = (int) num16 * 871035955 ^ -1986456080;
              continue;
            case 3:
              num15 = 520048026;
              continue;
            case 4:
              goto label_56;
            case 5:
              num15 = (int) num16 * -2079178559 ^ -817230015;
              continue;
            case 6:
              current = enumerator2.Current;
              num15 = 1828729854;
              continue;
            default:
              goto label_65;
          }
        }
      }
      finally
      {
        enumerator2.Dispose();
label_61:
        int num17 = 187278994;
        while (true)
        {
          uint num18;
          switch ((num18 = (uint) (num17 ^ 47236652)) % 3U)
          {
            case 0:
              goto label_61;
            case 1:
              num17 = (int) num18 * -428368348 ^ -297201757;
              continue;
            default:
              goto label_64;
          }
        }
label_64:;
      }
label_65:
      this.attackQueue.Remove(sweetPlan);
      goto label_66;
label_47:
      num14 = 1;
label_48:
      if (num14 != 0)
      {
        num12 = 1230210085;
        goto label_45;
      }
      else
        goto label_68;
label_66:
      int num19 = 757619864;
label_67:
      uint num20;
      bool flag4;
      switch ((num20 = (uint) (num19 ^ 47236652)) % 3U)
      {
        case 0:
          goto label_66;
        case 2:
          break;
        default:
          return flag4;
      }
label_68:
      sweetPlan.Target.AttackMovesAllowed = false;
      flag4 = flag1;
      num19 = 1545475390;
      goto label_67;
    }

    protected IEnumerable<Planet> CanUseInAtttack()
    {
      bool flag1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
label_1:
        int num2 = 261373757;
        while (true)
        {
          IEnumerator<Planet> enumerator;
          Planet subject;
          uint num3;
          bool flag2;
          int num4;
          switch ((num3 = (uint) (num2 ^ 1518797736)) % 38U)
          {
            case 0:
              flag2 = !subject.IsInAttackQueue;
              num2 = (int) num3 * 542146697 ^ 1593123845;
              continue;
            case 1:
            case 21:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = 1262577623;
              continue;
            case 2:
              num2 = (int) num3 * 1087347872 ^ 594785777;
              continue;
            case 4:
              if (subject.IsUnderAttack)
              {
                num2 = (int) num3 * -1590432566 ^ 1263065990;
                continue;
              }
              num4 = 1;
              break;
            case 5:
              num2 = 1756701388;
              continue;
            case 6:
              num2 = (int) num3 * 1000185475 ^ -585637189;
              continue;
            case 7:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * -964755867 ^ -1548361215;
              continue;
            case 8:
            case 26:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -1;
              num2 = 1082937798;
              continue;
            case 9:
              num2 = (int) num3 * 1389164918 ^ 589451157;
              continue;
            case 10:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = subject;
              num2 = (int) num3 * -921979382 ^ -1930697427;
              continue;
            case 11:
              int num5 = num1 == 0 ? -846657708 : (num5 = -1971987252);
              num2 = num5 ^ (int) num3 * -30051402;
              continue;
            case 12:
              num2 = 1959311280;
              continue;
            case 13:
              enumerator = (IEnumerator<Planet>) null;
              num2 = (int) num3 * -1090545868 ^ -1179170661;
              continue;
            case 14:
              num2 = (int) num3 * -1498529237 ^ -709625058;
              continue;
            case 15:
              flag1 = false;
              num2 = (int) num3 * 1558503639 ^ 751163420;
              continue;
            case 16:
              subject = enumerator.Current;
              num2 = 1196291314;
              continue;
            case 17:
              num2 = (int) num3 * 855423370 ^ -1610709637;
              continue;
            case 19:
              int num6;
              // ISSUE: reference to a compiler-generated method
              num2 = num6 = Strategy_BackingItUp.\u003CCanUseInAtttack\u003Ed__4.\u206A‫⁯⁯⁮‍‍⁭‫‏‬⁪‫⁫⁬⁮‌​⁬⁮‪⁬⁫⁬⁯‍‍‪‌⁫‮⁫⁭‏⁮⁮⁮‬‫‪‮((IEnumerator) enumerator) ? 2015476442 : (num6 = 1859249203);
              continue;
            case 20:
              goto label_1;
            case 22:
              num2 = (int) num3 * -376448727 ^ 1499470113;
              continue;
            case 24:
              subject = (Planet) null;
              num2 = (int) num3 * -2095815065 ^ -1439436839;
              continue;
            case 25:
              int num7;
              num2 = num7 = num1 == 1 ? 775120877 : (num7 = 972001599);
              continue;
            case 27:
              num2 = (int) num3 * 366013496 ^ -1975407759;
              continue;
            case 28:
              num2 = 521423606;
              continue;
            case 29:
              int num8 = flag2 ? 340930563 : (num8 = 1820941369);
              num2 = num8 ^ (int) num3 * -1863146543;
              continue;
            case 30:
              num2 = (int) num3 * 2132952618 ^ -1314228658;
              continue;
            case 31:
              enumerator = this.currentUniverse.Me.Planets.GetEnumerator();
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * -2126898157 ^ -1635920248;
              continue;
            case 32:
              flag1 = false;
              num2 = 1255309331;
              continue;
            case 33:
              num2 = (int) num3 * 1914537831 ^ 621456015;
              continue;
            case 34:
              int num9 = subject.AttackForce > 1 ? -78399494 : (num9 = -1045784031);
              num2 = num9 ^ (int) num3 * 388574185;
              continue;
            case 35:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = 1;
              flag1 = true;
              num2 = (int) num3 * -1253874241 ^ 400708883;
              continue;
            case 36:
              num4 = subject.WinningArmadaIsMine ? 1 : 0;
              break;
            case 37:
              num2 = (int) num3 * 796448509 ^ 1676694337;
              continue;
            default:
              goto label_39;
          }
          int num10;
          num2 = num10 = num4 == 0 ? 1756701388 : (num10 = 134458369);
        }
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_39:
      return flag1;
    }

    protected bool IsNotEventuallyMine(Planet subject)
    {
      if (subject.IsMine)
        goto label_8;
label_1:
      int num1 = -581703776;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -894448486)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_7;
          case 2:
            num1 = (int) num2 * -1553476801 ^ 2131899489;
            continue;
          case 3:
            flag = true;
            num1 = -2012829118;
            continue;
          case 4:
            num1 = (int) num2 * 1577098150 ^ 87097965;
            continue;
          case 5:
            flag = false;
            num1 = (int) num2 * -206087804 ^ 1541851915;
            continue;
          default:
            goto label_10;
        }
      }
label_7:
      int num3 = subject.WinningArmadaIsMine ? 1 : 0;
      goto label_9;
label_10:
      return flag;
label_8:
      num3 = 1;
label_9:
      num1 = num3 != 0 ? -1152557148 : (num1 = -874295072);
      goto label_2;
    }

    public void DoTurn(Universe uni)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      Strategy_BackingItUp.\u003C\u003Ec__DisplayClass6_0 cDisplayClass60 = new Strategy_BackingItUp.\u003C\u003Ec__DisplayClass6_0();
label_1:
      int num1 = -1567229616;
      bool flag1;
      Dictionary<Planet, PlanetTurn> source;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -349072071)) % 6U)
        {
          case 0:
            this.currentUniverse = uni;
            num1 = (int) num2 * 2009213365 ^ 1106817874;
            continue;
          case 2:
            flag1 = false;
            // ISSUE: reference to a compiler-generated field
            cDisplayClass60.sumAttackForce = 0;
            source = new Dictionary<Planet, PlanetTurn>();
            num1 = (int) num2 * 509555297 ^ 394267662;
            continue;
          case 3:
            // ISSUE: reference to a compiler-generated field
            cDisplayClass60.\u003C\u003E4__this = this;
            num1 = (int) num2 * 142795345 ^ 642462400;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.ProcessAttackQueue();
            num1 = (int) num2 * -1415754185 ^ 526474434;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      IEnumerator<Planet> enumerator1 = this.CanUseInAtttack().GetEnumerator();
      try
      {
label_96:
        uint num3;
        if (Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator1))
        {
label_14:
          Planet current1 = enumerator1.Current;
          int num4 = -1140934649;
          PlanetTurn turn;
          while (true)
          {
            uint num5;
            switch ((num5 = (uint) (num4 ^ -349072071)) % 7U)
            {
              case 0:
                num4 = (int) num5 * -244235722 ^ 1492291932;
                continue;
              case 1:
                // ISSUE: reference to a compiler-generated field
                cDisplayClass60.sumAttackForce += current1.AttackForce;
                num4 = (int) num5 * 1454158772 ^ 831474884;
                continue;
              case 2:
                turn = current1.TurnPrediction[0];
                num4 = (int) num5 * 1535243665 ^ 111636240;
                continue;
              case 3:
                goto label_14;
              case 5:
                num4 = -306093076;
                continue;
              case 6:
                source.Clear();
                num4 = (int) num5 * 2146450558 ^ 152867603;
                continue;
              default:
                goto label_16;
            }
          }
label_16:
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated method
          IEnumerator<Route> enumerator2 = current1.Routes.Where<Route>(cDisplayClass60.\u003C\u003E9__1 ?? (cDisplayClass60.\u003C\u003E9__1 = new Func<Route, bool>(cDisplayClass60.\u003CDoTurn\u003Eb__1))).GetEnumerator();
          try
          {
label_21:
            int num6 = !Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator2) ? -1888802120 : (num6 = -1374212594);
            while (true)
            {
              uint num7;
              Route current2;
              PlanetTurn planetTurn;
              int num8;
              switch ((num7 = (uint) (num6 ^ -349072071)) % 9U)
              {
                case 0:
                  num6 = -1374212594;
                  continue;
                case 1:
                  num6 = (int) num7 * 1725178871 ^ 1083867888;
                  continue;
                case 2:
                  source.Add(current2.Destination, planetTurn);
                  num6 = (int) num7 * 765776837 ^ 1843068452;
                  continue;
                case 4:
                  current2 = enumerator2.Current;
                  planetTurn = current2.Destination.TurnPrediction[current2.DistanceInTurns + 1];
                  if (planetTurn.Owner != 1)
                  {
                    num6 = -1964398482;
                    continue;
                  }
                  num8 = 0;
                  break;
                case 5:
                  num8 = planetTurn.NumShips < current1.AttackForce ? 1 : 0;
                  break;
                case 6:
                  num6 = -1033399984;
                  continue;
                case 7:
                  num6 = (int) num7 * -177931077 ^ -320089528;
                  continue;
                case 8:
                  goto label_21;
                default:
                  goto label_35;
              }
              int num9;
              num6 = num9 = num8 != 0 ? -640777811 : (num9 = -1843621894);
            }
          }
          finally
          {
            if (enumerator2 != null)
            {
label_31:
              int num10 = -343584281;
              while (true)
              {
                uint num11;
                switch ((num11 = (uint) (num10 ^ -349072071)) % 3U)
                {
                  case 1:
                    Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator2);
                    num10 = (int) num11 * -776945569 ^ -600278013;
                    continue;
                  case 2:
                    goto label_31;
                  default:
                    goto label_34;
                }
              }
            }
label_34:;
          }
label_35:
          bool flag2 = Universe.TurnCount < 3;
label_36:
          int num12 = -1489756492;
          while (true)
          {
            uint num13;
            switch ((num13 = (uint) (num12 ^ -349072071)) % 3U)
            {
              case 0:
                goto label_36;
              case 1:
                if (flag2)
                {
                  num12 = (int) num13 * 671560065 ^ -1314848566;
                  continue;
                }
                goto label_68;
              default:
                goto label_40;
            }
          }
label_40:
          IEnumerator<KeyValuePair<Planet, PlanetTurn>> enumerator3 = source.OrderBy<KeyValuePair<Planet, PlanetTurn>, int>((Func<KeyValuePair<Planet, PlanetTurn>, int>) (target => -target.Key.GrowthRate)).ThenBy<KeyValuePair<Planet, PlanetTurn>, int>((Func<KeyValuePair<Planet, PlanetTurn>, int>) (target => target.Value.NumShips)).GetEnumerator();
          try
          {
label_53:
            int num14 = Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator3) ? -1039163377 : (num14 = -1958984760);
            bool isNeutral;
            KeyValuePair<Planet, PlanetTurn> current3;
            AttackPlan sweetPlan;
            while (true)
            {
              uint num15;
              switch ((num15 = (uint) (num14 ^ -349072071)) % 18U)
              {
                case 0:
                  num14 = (int) num15 * 1381465003 ^ -118032548;
                  continue;
                case 1:
                  num14 = -477545339;
                  continue;
                case 2:
                  int num16 = isNeutral ? -1708981128 : (num16 = -1637452475);
                  num14 = num16 ^ (int) num15 * -266563335;
                  continue;
                case 3:
                  sweetPlan = new AttackPlan();
                  num14 = (int) num15 * 2120773255 ^ 817832180;
                  continue;
                case 4:
                  num14 = (int) num15 * 1624224785 ^ 661390718;
                  continue;
                case 5:
                  goto label_53;
                case 6:
                  flag1 = true;
                  this.ExecutePlans(sweetPlan);
                  num14 = (int) num15 * -1414134278 ^ -1078098623;
                  continue;
                case 7:
                  sweetPlan.Target = current3.Key;
                  num14 = (int) num15 * 904792355 ^ 22180844;
                  continue;
                case 8:
                  num14 = -1110269723;
                  continue;
                case 9:
                  num14 = (int) num15 * -1361036460 ^ 1524950451;
                  continue;
                case 10:
                  num14 = -69717580;
                  continue;
                case 11:
                  num14 = -1039163377;
                  continue;
                case 12:
                  current3 = enumerator3.Current;
                  num14 = -1714954982;
                  continue;
                case 13:
                  int num17 = current1.AttackForce <= current3.Value.NumShips ? 1798454985 : (num17 = 1299495615);
                  num14 = num17 ^ (int) num15 * 897152909;
                  continue;
                case 14:
                  sweetPlan.Enabled = true;
                  sweetPlan.AddParticipant(current1, turn, current3.Value);
                  num14 = (int) num15 * 1274774295 ^ 1250866386;
                  continue;
                case 16:
                  isNeutral = current1.IsNeutral;
                  num14 = (int) num15 * 1055934511 ^ 1172427885;
                  continue;
                case 17:
                  num14 = (int) num15 * 1712113799 ^ -25168640;
                  continue;
                default:
                  goto label_95;
              }
            }
          }
          finally
          {
            if (enumerator3 != null)
            {
label_61:
              int num18 = -1668898885;
              while (true)
              {
                uint num19;
                switch ((num19 = (uint) (num18 ^ -349072071)) % 4U)
                {
                  case 0:
                    goto label_61;
                  case 2:
                    Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator3);
                    num18 = (int) num19 * -1497035439 ^ 1763018712;
                    continue;
                  case 3:
                    num18 = (int) num19 * -1246191992 ^ -2038131440;
                    continue;
                  default:
                    goto label_65;
                }
              }
            }
label_65:;
          }
label_68:
          int num20 = -698998571;
          while (true)
          {
            switch ((num3 = (uint) (num20 ^ -349072071)) % 3U)
            {
              case 0:
                num20 = -1199818640;
                continue;
              case 1:
                goto label_68;
              default:
                goto label_69;
            }
          }
label_69:
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated field
          // ISSUE: reference to a compiler-generated method
          IEnumerator<KeyValuePair<Planet, PlanetTurn>> enumerator4 = source.OrderBy<KeyValuePair<Planet, PlanetTurn>, double>(cDisplayClass60.\u003C\u003E9__4 ?? (cDisplayClass60.\u003C\u003E9__4 = new Func<KeyValuePair<Planet, PlanetTurn>, double>(cDisplayClass60.\u003CDoTurn\u003Eb__4))).GetEnumerator();
          try
          {
label_83:
            int num21 = Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator4) ? -742122601 : (num21 = -1354447982);
            AttackPlan sweetPlan;
            KeyValuePair<Planet, PlanetTurn> current4;
            bool flag3;
            while (true)
            {
              uint num22;
              switch ((num22 = (uint) (num21 ^ -349072071)) % 15U)
              {
                case 0:
                  num21 = -1230278555;
                  continue;
                case 1:
                  flag3 = current1.AttackForce > current4.Value.NumShips;
                  num21 = (int) num22 * 527881174 ^ 1449688195;
                  continue;
                case 2:
                  current4 = enumerator4.Current;
                  num21 = -160546407;
                  continue;
                case 3:
                  num21 = -2135515416;
                  continue;
                case 4:
                  num21 = (int) num22 * -557550211 ^ 1371326805;
                  continue;
                case 5:
                  this.ExecutePlans(sweetPlan);
                  num21 = (int) num22 * 1568445593 ^ 290997326;
                  continue;
                case 6:
                  num21 = -742122601;
                  continue;
                case 8:
                  sweetPlan.Target = current4.Key;
                  flag1 = true;
                  num21 = (int) num22 * 770179257 ^ -434033600;
                  continue;
                case 9:
                  sweetPlan.Enabled = true;
                  sweetPlan.AddParticipant(current1, turn, current4.Value);
                  num21 = (int) num22 * 1212925766 ^ 1755091857;
                  continue;
                case 10:
                  int num23 = flag3 ? 1865506483 : (num23 = 1953697840);
                  num21 = num23 ^ (int) num22 * -1558611639;
                  continue;
                case 11:
                  sweetPlan = new AttackPlan();
                  num21 = (int) num22 * -729729775 ^ -527440121;
                  continue;
                case 12:
                  goto label_83;
                case 13:
                  num21 = (int) num22 * -52665750 ^ 373617546;
                  continue;
                case 14:
                  num21 = (int) num22 * -1820368763 ^ -639443100;
                  continue;
                default:
                  goto label_92;
              }
            }
          }
          finally
          {
            if (enumerator4 != null)
            {
label_87:
              int num24 = -414701230;
              while (true)
              {
                uint num25;
                switch ((num25 = (uint) (num24 ^ -349072071)) % 4U)
                {
                  case 0:
                    goto label_87;
                  case 2:
                    num24 = (int) num25 * 14481401 ^ -151165458;
                    continue;
                  case 3:
                    Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator4);
                    num24 = (int) num25 * 591583105 ^ 1050618656;
                    continue;
                  default:
                    goto label_91;
                }
              }
            }
label_91:;
          }
label_92:;
        }
        else
          goto label_97;
label_93:
        int num26 = -1363149728;
label_94:
        switch ((num3 = (uint) (num26 ^ -349072071)) % 4U)
        {
          case 0:
            goto label_93;
          case 1:
            break;
          case 3:
            goto label_96;
          default:
            goto label_104;
        }
label_95:
        num26 = -1062490774;
        goto label_94;
label_97:
        num26 = -1324807313;
        goto label_94;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_99:
          int num27 = -2060206448;
          while (true)
          {
            uint num28;
            switch ((num28 = (uint) (num27 ^ -349072071)) % 4U)
            {
              case 1:
                Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator1);
                num27 = (int) num28 * 1862297848 ^ 979418798;
                continue;
              case 2:
                goto label_99;
              case 3:
                num27 = (int) num28 * 1843078817 ^ 1937433722;
                continue;
              default:
                goto label_103;
            }
          }
        }
label_103:;
      }
label_104:
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      cDisplayClass60.centerPlanet = this.currentUniverse.Me.Planets.OrderBy<Planet, double>(new Func<Planet, double>(cDisplayClass60.\u003CDoTurn\u003Eb__0)).FirstOrDefault<Planet>();
      // ISSUE: reference to a compiler-generated field
      bool flag4 = cDisplayClass60.centerPlanet != null;
label_105:
      int num29 = -177513884;
      while (true)
      {
        uint num30;
        switch ((num30 = (uint) (num29 ^ -349072071)) % 4U)
        {
          case 0:
            num29 = (int) num30 * 1060387852 ^ 796365459;
            continue;
          case 1:
            if (flag4)
            {
              num29 = (int) num30 * -1689073236 ^ -1460600839;
              continue;
            }
            goto label_150;
          case 3:
            goto label_105;
          default:
            goto label_110;
        }
      }
label_110:
      int num31 = 0;
      IEnumerator<Planet> enumerator5 = this.CanUseInAtttack().GetEnumerator();
      try
      {
label_121:
        int num32 = !Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator5) ? -682961104 : (num32 = -485140050);
        Planet current;
        while (true)
        {
          uint num33;
          switch ((num33 = (uint) (num32 ^ -349072071)) % 10U)
          {
            case 0:
              num32 = -485140050;
              continue;
            case 1:
              num32 = (int) num33 * 440939567 ^ 732528278;
              continue;
            case 2:
              num32 = (int) num33 * -449269312 ^ 753395439;
              continue;
            case 4:
              ++num31;
              // ISSUE: reference to a compiler-generated field
              this.currentUniverse.MakeMove(current, cDisplayClass60.centerPlanet, Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(current.AttackForce, 2));
              num32 = (int) num33 * -96597227 ^ -1452698983;
              continue;
            case 5:
              num32 = -804338680;
              continue;
            case 6:
              num32 = (int) num33 * -1466364415 ^ -534670372;
              continue;
            case 7:
              goto label_121;
            case 8:
              // ISSUE: reference to a compiler-generated field
              int num34 = cDisplayClass60.centerPlanet != current ? -98904743 : (num34 = -32635230);
              num32 = num34 ^ (int) num33 * 284823820;
              continue;
            case 9:
              current = enumerator5.Current;
              num32 = -1476019644;
              continue;
            default:
              goto label_127;
          }
        }
      }
      finally
      {
        if (enumerator5 != null)
        {
label_123:
          int num35 = -511351915;
          while (true)
          {
            uint num36;
            switch ((num36 = (uint) (num35 ^ -349072071)) % 3U)
            {
              case 0:
                goto label_123;
              case 2:
                Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator5);
                num35 = (int) num36 * 186495348 ^ -386575820;
                continue;
              default:
                goto label_126;
            }
          }
        }
label_126:;
      }
label_127:
label_128:
      int num37 = -470660455;
label_129:
      AttackPlan sweetPlan1;
      Planet planet1;
      bool flag5;
      bool flag6;
      // ISSUE: variable of a compiler-generated type
      Strategy_BackingItUp.\u003C\u003Ec__DisplayClass6_1 cDisplayClass61;
      bool flag7;
      while (true)
      {
        uint num38;
        switch ((num38 = (uint) (num37 ^ -349072071)) % 26U)
        {
          case 0:
            num37 = (int) num38 * 1006520311 ^ 578608143;
            continue;
          case 1:
            flag5 = Strategy_BackingItUp.\u206F‏⁬⁮⁮⁫‌⁯‫⁫⁯‏‫⁪‮‎‫‌⁬⁯‌⁭‬⁭⁪‫⁮‎‌⁮⁬‪⁭‬​⁬⁭⁪⁬⁪‮(this.rnd) > (double) this.currentUniverse.Neutral.Planets.Count / ((double) this.currentUniverse.Enemy.Planets.Count + 0.1);
            num37 = (int) num38 * -2094718060 ^ 726314202;
            continue;
          case 2:
            // ISSUE: reference to a compiler-generated field
            cDisplayClass61.targetOwnerId = 2;
            num37 = (int) num38 * -990535788 ^ -2006661177;
            continue;
          case 3:
            num37 = (int) num38 * 693010263 ^ 964708444;
            continue;
          case 4:
            goto label_150;
          case 5:
            // ISSUE: reference to a compiler-generated field
            cDisplayClass61.targetOwnerId = 2;
            num37 = (int) num38 * 652847883 ^ -148899209;
            continue;
          case 6:
            num37 = (int) num38 * 802041465 ^ -227481332;
            continue;
          case 7:
            int num39 = !flag5 ? -971927312 : (num39 = -1698090729);
            num37 = num39 ^ (int) num38 * 791377078;
            continue;
          case 8:
            sweetPlan1.Enabled = true;
            num37 = (int) num38 * -351560184 ^ -312918326;
            continue;
          case 9:
            num37 = -338060051;
            continue;
          case 10:
            int num40 = this.currentUniverse.IsDominating ? 130605542 : (num40 = 5071308);
            num37 = num40 ^ (int) num38 * 584298280;
            continue;
          case 11:
            num37 = -1727933354;
            continue;
          case 13:
            // ISSUE: reference to a compiler-generated field
            cDisplayClass61.CS\u0024\u003C\u003E8__locals1 = cDisplayClass60;
            num37 = (int) num38 * 887341317 ^ -1144718378;
            continue;
          case 14:
            // ISSUE: reference to a compiler-generated method
            // ISSUE: reference to a compiler-generated method
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated method
            planet1 = this.currentUniverse.Planets.Values.Where<Planet>(new Func<Planet, bool>(cDisplayClass61.\u003CDoTurn\u003Eb__5)).OrderBy<Planet, double>((Func<Planet, double>) (planet => -(((double) planet.GrowthRate + Strategy_BackingItUp.\u003C\u003Ec.\u206A‬⁮⁭⁮⁯‭⁭⁭⁯⁪‪⁪‏‮‭‪‍‬⁬‫‎⁭⁭‫‭‬​‭‫‫⁮‌‍‎‍‮⁮⁫‌‮((double) planet.NumShips)) / 3.0) * 3.0)).ThenBy<Planet, double>(new Func<Planet, double>(cDisplayClass61.CS\u0024\u003C\u003E8__locals1.\u003CDoTurn\u003Eb__7)).FirstOrDefault<Planet>();
            num37 = -375825826;
            continue;
          case 15:
            flag7 = planet1 != null;
            num37 = (int) num38 * -690391896 ^ -597519960;
            continue;
          case 16:
            num37 = (int) num38 * -998096017 ^ -131231969;
            continue;
          case 17:
            if (flag7)
            {
              num37 = (int) num38 * 1248619173 ^ -688833345;
              continue;
            }
            goto label_183;
          case 18:
            sweetPlan1 = new AttackPlan();
            num37 = (int) num38 * 1169371566 ^ 1423909565;
            continue;
          case 19:
            num37 = (int) num38 * 1522081293 ^ 150791765;
            continue;
          case 20:
            goto label_128;
          case 21:
            sweetPlan1.Target = planet1;
            num37 = (int) num38 * -1053055011 ^ 862866196;
            continue;
          case 22:
            // ISSUE: reference to a compiler-generated field
            cDisplayClass61.targetOwnerId = 0;
            num37 = (int) num38 * 1788997150 ^ 1127814363;
            continue;
          case 23:
            // ISSUE: object of a compiler-generated type is created
            cDisplayClass61 = new Strategy_BackingItUp.\u003C\u003Ec__DisplayClass6_1();
            num37 = (int) num38 * -1505046518 ^ 208648908;
            continue;
          case 24:
            if (flag6)
            {
              num37 = (int) num38 * -1497109777 ^ 985704536;
              continue;
            }
            goto label_185;
          case 25:
            num37 = (int) num38 * -605458636 ^ -599113263;
            continue;
          default:
            goto label_156;
        }
      }
label_156:
      IEnumerator<Planet> enumerator6 = this.CanUseInAtttack().GetEnumerator();
      try
      {
label_163:
        int num41 = Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator6) ? -920318913 : (num41 = -890806994);
        Planet current;
        while (true)
        {
          uint num42;
          switch ((num42 = (uint) (num41 ^ -349072071)) % 8U)
          {
            case 0:
              num41 = -920318913;
              continue;
            case 1:
              num41 = (int) num42 * -623863380 ^ -1768498096;
              continue;
            case 2:
              sweetPlan1.AddParticipant(current, current.TurnPrediction[0], planet1.TurnPrediction[0]);
              num41 = (int) num42 * -1247015125 ^ 415705750;
              continue;
            case 3:
              num41 = (int) num42 * 950282317 ^ 1859765788;
              continue;
            case 4:
              goto label_163;
            case 5:
              num41 = (int) num42 * 747159100 ^ 21556625;
              continue;
            case 6:
              current = enumerator6.Current;
              num41 = -1644996446;
              continue;
            default:
              goto label_172;
          }
        }
      }
      finally
      {
        if (enumerator6 != null)
        {
label_167:
          int num43 = -1627600825;
          while (true)
          {
            uint num44;
            switch ((num44 = (uint) (num43 ^ -349072071)) % 4U)
            {
              case 1:
                num43 = (int) num44 * -1563484694 ^ 625934475;
                continue;
              case 2:
                Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator6);
                num43 = (int) num44 * -724833383 ^ -1488486482;
                continue;
              case 3:
                goto label_167;
              default:
                goto label_171;
            }
          }
        }
label_171:;
      }
label_172:
      flag1 = true;
      this.ExecutePlans(sweetPlan1);
label_173:
      int num45 = -111227576;
label_174:
      AttackPlan sweetPlan2;
      bool flag8;
      while (true)
      {
        uint num46;
        switch ((num46 = (uint) (num45 ^ -349072071)) % 10U)
        {
          case 1:
            goto label_180;
          case 2:
            goto label_185;
          case 3:
            num45 = (int) num46 * -115133361 ^ 71161666;
            continue;
          case 4:
            if (flag8)
            {
              num45 = (int) num46 * 1707243024 ^ -1203301656;
              continue;
            }
            goto label_204;
          case 5:
            goto label_183;
          case 6:
            goto label_173;
          case 7:
            sweetPlan2 = new AttackPlan();
            num45 = (int) num46 * 1190353504 ^ -2052322686;
            continue;
          case 8:
            // ISSUE: reference to a compiler-generated field
            sweetPlan2.Target = cDisplayClass60.centerPlanet;
            num45 = (int) num46 * -951485698 ^ 1272162054;
            continue;
          case 9:
            sweetPlan2.Enabled = true;
            sweetPlan2.DominationMove = true;
            num45 = (int) num46 * 1934426518 ^ -103741311;
            continue;
          default:
            goto label_187;
        }
      }
label_204:
      return;
label_180:
      // ISSUE: reference to a compiler-generated field
      int num47 = cDisplayClass60.sumAttackForce > 100 ? 1 : 0;
      goto label_182;
label_187:
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      IEnumerator<Planet> enumerator7 = this.CanUseInAtttack().Where<Planet>(cDisplayClass60.\u003C\u003E9__8 ?? (cDisplayClass60.\u003C\u003E9__8 = new Func<Planet, bool>(cDisplayClass60.\u003CDoTurn\u003Eb__8))).GetEnumerator();
      try
      {
label_192:
        int num48 = !Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator7) ? -360907960 : (num48 = -767312480);
        while (true)
        {
          uint num49;
          switch ((num49 = (uint) (num48 ^ -349072071)) % 5U)
          {
            case 0:
              num48 = -767312480;
              continue;
            case 2:
              num48 = (int) num49 * 1956732586 ^ 1315031243;
              continue;
            case 3:
              goto label_192;
            case 4:
              Planet current = enumerator7.Current;
              // ISSUE: reference to a compiler-generated field
              sweetPlan2.AddParticipant(current, current.TurnPrediction[0], cDisplayClass60.centerPlanet.TurnPrediction[0]);
              num48 = -1650570374;
              continue;
            default:
              goto label_201;
          }
        }
      }
      finally
      {
        if (enumerator7 != null)
        {
label_196:
          int num50 = -945557723;
          while (true)
          {
            uint num51;
            switch ((num51 = (uint) (num50 ^ -349072071)) % 3U)
            {
              case 0:
                goto label_196;
              case 1:
                Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator7);
                num50 = (int) num51 * 1107108613 ^ 1088445004;
                continue;
              default:
                goto label_200;
            }
          }
        }
label_200:;
      }
label_201:
label_202:
      int num52 = -978151544;
      while (true)
      {
        uint num53;
        switch ((num53 = (uint) (num52 ^ -349072071)) % 3U)
        {
          case 0:
            goto label_202;
          case 1:
            goto label_198;
          case 2:
            this.ExecutePlans(sweetPlan2);
            num52 = (int) num53 * 1870975690 ^ -2001371565;
            continue;
          default:
            goto label_194;
        }
      }
label_198:
      return;
label_194:
      return;
label_182:
      flag8 = num47 != 0;
      num45 = -27877593;
      goto label_174;
label_183:
      num45 = -1341815011;
      goto label_174;
label_185:
      if (flag1)
      {
        num47 = 0;
        goto label_182;
      }
      else
      {
        num45 = -1588629778;
        goto label_174;
      }
label_150:
      flag6 = !flag1;
      num37 = -358163529;
      goto label_129;
    }

    protected IEnumerable<Planet> OrderedListOfAttackedPlanets(int playerId)
    {
label_1:
      int num1 = 44126015;
      IEnumerable<Planet> planets;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 436654005)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 536698228 ^ 1984216253;
            continue;
          case 2:
            planets = (IEnumerable<Planet>) this.currentUniverse.All.Planets.Where<Planet>((Func<Planet, bool>) (planet => planet.IsUnderAttack && planet.Owner == playerId)).OrderBy<Planet, bool>((Func<Planet, bool>) (planet => planet.WinningArmadaIsMine)).ThenBy<Planet, int>((Func<Planet, int>) (planet => -planet.LastAttackTurn.TurnsFromNow));
            num1 = 754120044;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return planets;
    }

    protected void DefendNeutralPlanets(int maxTurnLookahead)
    {
      IEnumerator<Planet> enumerator1 = this.OrderedListOfAttackedPlanets(0).GetEnumerator();
      try
      {
label_35:
        if (Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator1))
        {
label_4:
          Planet current1 = enumerator1.Current;
          int num1 = -1313178120;
          AttackPlan attackPlan;
          while (true)
          {
            uint num2;
            bool flag1;
            bool flag2;
            int num3;
            switch ((num2 = (uint) (num1 ^ -1640701922)) % 13U)
            {
              case 0:
                if (current1.IsUnderAttack)
                {
                  num1 = (int) num2 * 1970357301 ^ -1165009114;
                  continue;
                }
                break;
              case 1:
                num1 = (int) num2 * -733723744 ^ -548579549;
                continue;
              case 2:
                num1 = (int) num2 * 300465035 ^ 580547982;
                continue;
              case 3:
                num1 = (int) num2 * 1494284019 ^ 1938552261;
                continue;
              case 4:
                if (flag1)
                {
                  num1 = (int) num2 * -2013651961 ^ -1452107336;
                  continue;
                }
                goto label_37;
              case 5:
                attackPlan = this.BuildDefensePlan(current1, maxTurnLookahead);
                flag1 = !current1.IsLost;
                num1 = (int) num2 * -1966018306 ^ -275575634;
                continue;
              case 7:
                num3 = !current1.DoesNotChangeOwner ? 1 : 0;
                goto label_12;
              case 8:
                num1 = -785914480;
                continue;
              case 9:
                if (flag2)
                {
                  num1 = (int) num2 * 55704584 ^ -887206225;
                  continue;
                }
                goto label_38;
              case 10:
                num1 = (int) num2 * 1132233532 ^ 592401259;
                continue;
              case 11:
                goto label_4;
              case 12:
                if (!current1.WinningArmadaIsMine)
                {
                  num1 = (int) num2 * 477713720 ^ -1072088528;
                  continue;
                }
                break;
              default:
                goto label_21;
            }
            num3 = 0;
label_12:
            flag2 = num3 != 0;
            num1 = -2136028438;
          }
label_21:
          using (List<AttackPlanParticipant>.Enumerator enumerator2 = attackPlan.Participants.GetEnumerator())
          {
label_25:
            int num4 = !enumerator2.MoveNext() ? -1637116738 : (num4 = -2113549701);
            AttackPlanParticipant current2;
            while (true)
            {
              uint num5;
              switch ((num5 = (uint) (num4 ^ -1640701922)) % 7U)
              {
                case 0:
                  num4 = (int) num5 * 2018303751 ^ -1501720096;
                  continue;
                case 1:
                  goto label_25;
                case 3:
                  current2 = enumerator2.Current;
                  num4 = -367935556;
                  continue;
                case 4:
                  this.currentUniverse.MakeMove(current2.Source, attackPlan.Target, current2.Source.AttackForce);
                  num4 = (int) num5 * -238871271 ^ 917837524;
                  continue;
                case 5:
                  num4 = (int) num5 * 1161705151 ^ 245658149;
                  continue;
                case 6:
                  num4 = -2113549701;
                  continue;
                default:
                  goto label_31;
              }
            }
          }
label_31:
          current1.AttackMovesAllowed = false;
        }
        else
          goto label_36;
label_32:
        int num6 = -1759856664;
label_33:
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -1640701922)) % 6U)
          {
            case 0:
              goto label_43;
            case 1:
              goto label_35;
            case 2:
              goto label_32;
            case 3:
              goto label_37;
            case 4:
              num6 = (int) num7 * -817123549 ^ 645058517;
              continue;
            case 5:
              goto label_38;
            default:
              goto label_39;
          }
        }
label_43:
        return;
label_39:
        return;
label_36:
        num6 = -1028102842;
        goto label_33;
label_37:
        num6 = -1563763255;
        goto label_33;
label_38:
        num6 = -2014177447;
        goto label_33;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_41:
          int num8 = -457277187;
          while (true)
          {
            uint num9;
            switch ((num9 = (uint) (num8 ^ -1640701922)) % 3U)
            {
              case 0:
                goto label_41;
              case 1:
                Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator1);
                num8 = (int) num9 * 1773369866 ^ 1620513939;
                continue;
              default:
                goto label_45;
            }
          }
        }
label_45:;
      }
    }

    protected void DefendOnwedPlanets()
    {
      IEnumerator<Planet> enumerator1 = this.OrderedListOfAttackedPlanets(1).GetEnumerator();
      try
      {
label_64:
        if (Strategy_BackingItUp.\u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮((IEnumerator) enumerator1))
        {
label_8:
          Planet current1 = enumerator1.Current;
          int num1 = -649599528;
          AttackPlan attackPlan;
          while (true)
          {
            uint num2;
            bool isLost;
            bool flag;
            int num3;
            switch ((num2 = (uint) (num1 ^ -711238397)) % 12U)
            {
              case 0:
                num1 = (int) num2 * 213306242 ^ -213109652;
                continue;
              case 1:
                if (flag)
                {
                  num1 = (int) num2 * -311692053 ^ -2029719327;
                  continue;
                }
                goto label_71;
              case 2:
                if (!current1.IsUnderAttack)
                {
                  num3 = 0;
                  break;
                }
                num1 = (int) num2 * 1721444487 ^ 868371021;
                continue;
              case 4:
                if (isLost)
                {
                  num1 = (int) num2 * -1071881104 ^ 583326271;
                  continue;
                }
                goto label_46;
              case 5:
                goto label_8;
              case 6:
                attackPlan = this.BuildDefensePlan(current1, 1000);
                num1 = (int) num2 * -227277372 ^ -1835772519;
                continue;
              case 7:
                num1 = -339293742;
                continue;
              case 8:
                num3 = !current1.WinningArmadaIsMine ? 1 : 0;
                break;
              case 9:
                num1 = (int) num2 * 1049511520 ^ -949184675;
                continue;
              case 10:
                isLost = current1.IsLost;
                num1 = (int) num2 * -1305901884 ^ 368108679;
                continue;
              case 11:
                num1 = (int) num2 * 2117306286 ^ 344861567;
                continue;
              default:
                goto label_19;
            }
            flag = num3 != 0;
            num1 = -1027020854;
          }
label_19:
          using (List<Route>.Enumerator enumerator2 = current1.Routes.GetEnumerator())
          {
label_39:
            int num4 = enumerator2.MoveNext() ? -1108461643 : (num4 = -585969389);
            while (true)
            {
              uint num5;
              Route current2;
              Planet destination;
              int num6;
              switch ((num5 = (uint) (num4 ^ -711238397)) % 17U)
              {
                case 0:
                  num4 = (int) num5 * 1072607361 ^ 58594807;
                  continue;
                case 1:
                  if (!destination.IsNeutral)
                  {
                    num6 = 0;
                    break;
                  }
                  num4 = (int) num5 * 1144601320 ^ 1470489981;
                  continue;
                case 2:
                  num4 = -292156236;
                  continue;
                case 3:
                  num4 = (int) num5 * -489752021 ^ -18597383;
                  continue;
                case 4:
                  num4 = -1750673655;
                  continue;
                case 5:
                  int num7 = current2.DistanceInTurns <= current1.LastAttackTurn.TurnsFromNow ? -1007841753 : (num7 = -934419920);
                  num4 = num7 ^ (int) num5 * 1930413423;
                  continue;
                case 6:
                  num4 = -1011494937;
                  continue;
                case 7:
                  this.currentUniverse.MakeMove(current1, destination, current1.NumShips);
                  num4 = (int) num5 * -1272238417 ^ 1036456645;
                  continue;
                case 8:
                  num4 = (int) num5 * -460495983 ^ 2119127625;
                  continue;
                case 9:
                  num4 = -1108461643;
                  continue;
                case 10:
                  num4 = (int) num5 * 2128773809 ^ -272326257;
                  continue;
                case 11:
                  num6 = destination.MaxDesertersAllowed < current1.NumShips ? 1 : 0;
                  break;
                case 13:
                  goto label_39;
                case 14:
                  num4 = (int) num5 * 191251358 ^ -1357016893;
                  continue;
                case 15:
                  destination = current2.Destination;
                  num4 = (int) num5 * 837092635 ^ 1410419388;
                  continue;
                case 16:
                  current2 = enumerator2.Current;
                  num4 = -1200397690;
                  continue;
                default:
                  goto label_42;
              }
              int num8;
              num4 = num8 = num6 != 0 ? -326845493 : (num8 = -615171940);
            }
          }
label_42:
          if (current1.GrowthRate <= 2)
            goto label_68;
label_43:
          int num9 = -1438439858;
label_44:
          while (true)
          {
            uint num10;
            switch ((num10 = (uint) (num9 ^ -711238397)) % 8U)
            {
              case 1:
                goto label_46;
              case 2:
                this.currentUniverse.AddToWishList(current1);
                num9 = (int) num10 * 1875851242 ^ -1992969052;
                continue;
              case 3:
                num9 = (int) num10 * -1029087 ^ 737817935;
                continue;
              case 4:
                goto label_43;
              case 5:
                num9 = (int) num10 * -485546712 ^ 1855982177;
                continue;
              case 6:
                num9 = (int) num10 * 715467743 ^ -272914543;
                continue;
              case 7:
                goto label_68;
              default:
                goto label_50;
            }
          }
label_50:
          using (List<AttackPlanParticipant>.Enumerator enumerator3 = attackPlan.Participants.GetEnumerator())
          {
label_54:
            int num11 = enumerator3.MoveNext() ? -129302073 : (num11 = -113351588);
            AttackPlanParticipant current3;
            while (true)
            {
              uint num12;
              switch ((num12 = (uint) (num11 ^ -711238397)) % 8U)
              {
                case 0:
                  goto label_54;
                case 1:
                  current3.Source.CreateTurnPredictions();
                  num11 = (int) num12 * 1385653878 ^ -726930928;
                  continue;
                case 2:
                  this.currentUniverse.MakeMove(current3.Source, attackPlan.Target, current3.Source.AttackForce);
                  num11 = (int) num12 * -1853397923 ^ -1964807214;
                  continue;
                case 3:
                  current3.Source.AttackMovesAllowed = false;
                  num11 = (int) num12 * 81969998 ^ 1874589192;
                  continue;
                case 4:
                  current3 = enumerator3.Current;
                  num11 = -259295935;
                  continue;
                case 5:
                  num11 = (int) num12 * 819586354 ^ -666562887;
                  continue;
                case 6:
                  num11 = -129302073;
                  continue;
                default:
                  goto label_61;
              }
            }
          }
label_61:
          current1.AttackMovesAllowed = false;
          current1.CreateTurnPredictions();
          goto label_62;
label_46:
          num9 = -1723498939;
          goto label_44;
        }
        else
          goto label_65;
label_62:
        int num13 = -76621167;
label_63:
        while (true)
        {
          uint num14;
          switch ((num14 = (uint) (num13 ^ -711238397)) % 9U)
          {
            case 0:
              num13 = (int) num14 * 1363425274 ^ -1724194991;
              continue;
            case 1:
              goto label_64;
            case 2:
              goto label_68;
            case 3:
              num13 = -1660013839;
              continue;
            case 4:
              goto label_62;
            case 5:
              num13 = (int) num14 * -907044769 ^ -1948745676;
              continue;
            case 6:
              goto label_71;
            case 7:
              goto label_76;
            case 8:
              num13 = (int) num14 * 1970179497 ^ -2037302398;
              continue;
            default:
              goto label_72;
          }
        }
label_76:
        return;
label_72:
        return;
label_65:
        num13 = -580902838;
        goto label_63;
label_68:
        num13 = -1687803597;
        goto label_63;
label_71:
        num13 = -2005865146;
        goto label_63;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_74:
          int num15 = -172867794;
          while (true)
          {
            uint num16;
            switch ((num16 = (uint) (num15 ^ -711238397)) % 4U)
            {
              case 0:
                goto label_74;
              case 1:
                Strategy_BackingItUp.\u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮((IDisposable) enumerator1);
                num15 = (int) num16 * 329021089 ^ -1532534384;
                continue;
              case 2:
                num15 = (int) num16 * 1603023745 ^ 236399574;
                continue;
              default:
                goto label_79;
            }
          }
        }
label_79:;
      }
    }

    private AttackPlan BuildDefensePlan(Planet planetUnderAttack, int maxTurnLookAhead)
    {
label_1:
      int num1 = 1319852094;
      int num2;
      int growthRate;
      PlanetTurn firstTurn;
      int turnsFromNow;
      int num3;
      AttackPlan attackPlan1;
      int num4;
      AttackPlan attackPlan2;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num1 ^ 809604096)) % 26U)
        {
          case 0:
label_5:
            num2 = 10;
            num1 = 439490732;
            continue;
          case 1:
            int num6 = !planetUnderAttack.WinningArmadaIsMine ? -19750850 : (num6 = -634558279);
            num1 = num6 ^ (int) num5 * 774473409;
            continue;
          case 2:
label_11:
            num2 = 15;
            num1 = 1980571752;
            continue;
          case 3:
            num2 = 25;
            num1 = 439490732;
            continue;
          case 4:
            num1 = (int) num5 * 516169402 ^ 1018162901;
            continue;
          case 5:
label_18:
            num2 = 5;
            num1 = 1089878716;
            continue;
          case 6:
            firstTurn = planetUnderAttack.TurnPrediction.FirstTurn;
            num1 = (int) num5 * -1469409295 ^ 459694698;
            continue;
          case 7:
            growthRate = planetUnderAttack.GrowthRate;
            num1 = (int) num5 * -381507808 ^ 792066938;
            continue;
          case 8:
            planetUnderAttack.IsLost = !planetUnderAttack.WinningArmadaIsMine;
            firstTurn = planetUnderAttack.TurnPrediction.FirstTurn;
            num1 = (int) num5 * -659754357 ^ -374554035;
            continue;
          case 9:
            turnsFromNow = firstTurn.TurnsFromNow;
            num1 = 1015062083;
            continue;
          case 10:
            num1 = (int) num5 * -2013486930 ^ -1792255132;
            continue;
          case 11:
            num3 = planetUnderAttack.TurnPrediction[firstTurn.TurnsFromNow + 1].NumShips + 1;
            num1 = 539694667;
            continue;
          case 13:
            num1 = 406775428;
            continue;
          case 14:
            switch (num4)
            {
              case 0:
              case 1:
                goto label_18;
              case 2:
                goto label_5;
              case 3:
              case 4:
                goto label_11;
              default:
                num1 = (int) num5 * -1453204554 ^ -574612503;
                continue;
            }
          case 15:
            attackPlan1.Reason = "Defense";
            num1 = (int) num5 * -816827199 ^ 912182171;
            continue;
          case 16:
            attackPlan2 = attackPlan1;
            num1 = (int) num5 * 2128024306 ^ 5719369;
            continue;
          case 17:
            goto label_89;
          case 18:
            num4 = growthRate;
            num1 = (int) num5 * 1495197991 ^ -1625249866;
            continue;
          case 19:
            num1 = (int) num5 * 370967206 ^ 1378431412;
            continue;
          case 20:
            num1 = (int) num5 * -731469532 ^ -1654645236;
            continue;
          case 21:
            num3 = 0;
            int num7 = firstTurn != null ? 139334204 : (num7 = 1687658536);
            num1 = num7 ^ (int) num5 * 1780195665;
            continue;
          case 22:
            attackPlan1 = new AttackPlan();
            attackPlan1.Target = planetUnderAttack;
            num1 = (int) num5 * -1243226747 ^ 170920005;
            continue;
          case 23:
            num1 = (int) num5 * -1916510517 ^ -2062827120;
            continue;
          case 24:
            num3 = firstTurn.NumShips;
            num1 = (int) num5 * 217672318 ^ -453304947;
            continue;
          case 25:
            goto label_1;
          default:
            goto label_27;
        }
      }
label_27:
      List<Route>.Enumerator enumerator = planetUnderAttack.Routes.GetEnumerator();
      try
      {
label_40:
        int num8 = !enumerator.MoveNext() ? 927634696 : (num8 = 1974798296);
        while (true)
        {
          uint num9;
          Planet destination;
          int num10;
          bool flag1;
          int num11;
          bool flag2;
          Route current;
          int num12;
          bool flag3;
          bool doesNotChangeOwner;
          int num13;
          switch ((num9 = (uint) (num8 ^ 809604096)) % 37U)
          {
            case 0:
              num8 = (int) num9 * 1717967663 ^ -1010708187;
              continue;
            case 1:
              num8 = (int) num9 * 642909665 ^ 517880045;
              continue;
            case 2:
              num13 = planetUnderAttack.PlanetID != destination.PlanetID ? 1 : 0;
              break;
            case 3:
              num8 = (int) num9 * -1677931049 ^ -152359827;
              continue;
            case 4:
              num8 = (int) num9 * -1057889472 ^ -709355482;
              continue;
            case 5:
              int scheduledTurn1 = Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(destination.AttackForce, destination.NumShips);
              attackPlan1.AddParticipant(destination, (PlanetTurn) null, scheduledTurn1);
              num8 = (int) num9 * -1800633837 ^ -172644194;
              continue;
            case 6:
              num8 = (int) num9 * 546888384 ^ -1640199692;
              continue;
            case 7:
              int num14 = flag3 ? 577968383 : (num14 = 147846430);
              num8 = num14 ^ (int) num9 * -847987844;
              continue;
            case 8:
              num10 = num3;
              num3 -= num11;
              int num15 = destination.NumShips > 0 ? 179439481 : (num15 = 446757307);
              num8 = num15 ^ (int) num9 * -295180379;
              continue;
            case 9:
              num8 = (int) num9 * 1377770923 ^ -671850792;
              continue;
            case 10:
              int num16 = num3 > -1 ? -42048838 : (num16 = -1504816613);
              num8 = num16 ^ (int) num9 * -1655892063;
              continue;
            case 11:
              num12 = current.DistanceInTurns - 1;
              flag3 = num12 <= turnsFromNow + 1;
              num8 = (int) num9 * -189598443 ^ 1946102788;
              continue;
            case 12:
              num8 = 1974798296;
              continue;
            case 13:
              num8 = (int) num9 * 1208020686 ^ -255218879;
              continue;
            case 14:
              num8 = 828334490;
              continue;
            case 15:
              int num17 = current.DistanceInTurns <= Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(maxTurnLookAhead, num2) ? -360649161 : (num17 = -1336744526);
              num8 = num17 ^ (int) num9 * -250056357;
              continue;
            case 16:
              num8 = (int) num9 * 358602111 ^ -1691620801;
              continue;
            case 17:
              goto label_40;
            case 18:
              int num18 = flag2 ? 1744989498 : (num18 = 1401949709);
              num8 = num18 ^ (int) num9 * 694781179;
              continue;
            case 19:
              int index = Strategy_BackingItUp.\u200D⁪‎‪⁮‪⁪‍⁬‭​⁪‬⁪​⁮‭‫⁯‎‍⁯​​⁯⁪‫‫​⁪⁮‮‮⁭​‏⁬‭‍‬‮(turnsFromNow - num12, 0);
              num11 = destination.TurnPrediction[index].NumShips;
              num8 = (int) num9 * 1633167110 ^ 631152311;
              continue;
            case 20:
              destination = current.Destination;
              if (!destination.IsMine)
              {
                num13 = 0;
                break;
              }
              num8 = (int) num9 * 1213537131 ^ -1750444845;
              continue;
            case 21:
              int num19 = flag1 ? 145732760 : (num19 = 1379793966);
              num8 = num19 ^ (int) num9 * -375972947;
              continue;
            case 22:
              num8 = (int) num9 * 440213828 ^ 200273541;
              continue;
            case 23:
              num8 = 539325093;
              continue;
            case 24:
              num8 = 1290661946;
              continue;
            case 25:
              num8 = (int) num9 * -2080610899 ^ 1262550260;
              continue;
            case 27:
              attackPlan1.Enabled = true;
              num8 = (int) num9 * -983289826 ^ -1586275833;
              continue;
            case 28:
              num8 = 873030328;
              continue;
            case 29:
              num11 = destination.AttackForce;
              doesNotChangeOwner = destination.DoesNotChangeOwner;
              num8 = (int) num9 * -919557219 ^ -1937802816;
              continue;
            case 30:
              int scheduledTurn2 = Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(Strategy_BackingItUp.\u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮(destination.AttackForce, destination.NumShips), num10);
              attackPlan1.AddParticipant(destination, (PlanetTurn) null, scheduledTurn2);
              num8 = (int) num9 * -298497037 ^ -243942323;
              continue;
            case 31:
              num8 = 1325504297;
              continue;
            case 32:
              num8 = 133698906;
              continue;
            case 33:
              num8 = 108004520;
              continue;
            case 34:
              current = enumerator.Current;
              num8 = 327723570;
              continue;
            case 35:
              int num20 = doesNotChangeOwner ? 1575359799 : (num20 = 2097492946);
              num8 = num20 ^ (int) num9 * 1750829172;
              continue;
            case 36:
              flag2 = num11 > 0;
              num8 = 1734897941;
              continue;
            default:
              goto label_74;
          }
          flag1 = num13 != 0;
          num8 = 427289603;
        }
      }
      finally
      {
        enumerator.Dispose();
label_70:
        int num21 = 520956332;
        while (true)
        {
          uint num22;
          switch ((num22 = (uint) (num21 ^ 809604096)) % 3U)
          {
            case 1:
              num21 = (int) num22 * -1776228418 ^ -550069422;
              continue;
            case 2:
              goto label_70;
            default:
              goto label_73;
          }
        }
label_73:;
      }
label_74:
      bool flag = num3 < 0;
label_75:
      int num23 = 1456893890;
      bool isLost;
      while (true)
      {
        uint num24;
        switch ((num24 = (uint) (num23 ^ 809604096)) % 14U)
        {
          case 0:
            planetUnderAttack.DoesNotChangeOwner = true;
            num23 = (int) num24 * -710916555 ^ -243653197;
            continue;
          case 1:
            attackPlan1.Participants.Clear();
            num23 = (int) num24 * 2081540426 ^ -1538628773;
            continue;
          case 3:
            attackPlan2 = attackPlan1;
            num23 = 1829109604;
            continue;
          case 4:
            isLost = planetUnderAttack.IsLost;
            num23 = 1399584706;
            continue;
          case 5:
            num23 = (int) num24 * -1043861760 ^ 722675511;
            continue;
          case 6:
            int num25 = !flag ? 783039914 : (num25 = 884106662);
            num23 = num25 ^ (int) num24 * 586549769;
            continue;
          case 7:
            num23 = (int) num24 * 1055678831 ^ 792558340;
            continue;
          case 8:
            num23 = (int) num24 * 1436537287 ^ 1729161758;
            continue;
          case 9:
            num23 = (int) num24 * -1457324773 ^ 1801188662;
            continue;
          case 10:
            int num26 = isLost ? 1175128693 : (num26 = 799387841);
            num23 = num26 ^ (int) num24 * -134963237;
            continue;
          case 11:
            goto label_75;
          case 12:
            planetUnderAttack.IsLost = false;
            num23 = (int) num24 * -793555705 ^ 1618429890;
            continue;
          case 13:
            planetUnderAttack.AttackMovesAllowed = false;
            num23 = (int) num24 * -460968727 ^ 727355001;
            continue;
          default:
            goto label_89;
        }
      }
label_89:
      return attackPlan2;
    }

    static int \u206D⁮⁭​‏‍‏‎‏⁭‎⁫‌‭‬‌⁭​‎⁬⁪‫‏‭⁬‮⁭​‌‏‬‫‪​‬⁮⁭⁮​⁯‮([In] int obj0, [In] int obj1) => Math.Min(obj0, obj1);

    static bool \u200D‬‫⁬​‭‏⁪‪‎‫⁯⁯⁬‏‌​‌​⁭‏‪⁪‌‏⁪⁬⁪‪​‍‫‎‮⁯‫‪⁭⁯‭‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u206F⁮‫‬⁭‪⁯⁯⁯​⁭​⁪‭‪​‍⁭‏‬‌‪⁬‌⁭⁫‭⁭⁫‌‭‭‌‎‫‫‏⁭⁫‭‮([In] IDisposable obj0) => obj0.Dispose();

    static double \u206F‏⁬⁮⁮⁫‌⁯‫⁫⁯‏‫⁪‮‎‫‌⁬⁯‌⁭‬⁭⁪‫⁮‎‌⁮⁬‪⁭‬​⁬⁭⁪⁬⁪‮([In] Random obj0) => obj0.NextDouble();

    static int \u200D⁪‎‪⁮‪⁪‍⁬‭​⁪‬⁪​⁮‭‫⁯‎‍⁯​​⁯⁪‫‫​⁪⁮‮‮⁭​‏⁬‭‍‬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static Random \u200D⁫⁭​‫‮‍⁮‭‏‏​‍⁮⁬‮​‍⁪‪‫⁬⁪‬‫‮⁭‮‌‮‮‪⁮‏‮⁯⁯‏⁬‬‮() => new Random();
  }
}
