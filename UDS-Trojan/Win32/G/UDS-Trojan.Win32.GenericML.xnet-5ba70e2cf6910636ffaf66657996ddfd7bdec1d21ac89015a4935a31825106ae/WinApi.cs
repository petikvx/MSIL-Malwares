// Decompiled with JetBrains decompiler
// Type: WinApi
// Assembly: BinaryAssem, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C3D41CFC-8277-4BEE-9AD4-AC67F2756AFC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-5ba70e2cf6910636ffaf66657996ddfd7bdec1d21ac89015a4935a31825106ae.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

public class WinApi
{
  public static readonly IntPtr HWND_TOPMOST = new IntPtr(-1);
  public static readonly IntPtr HWND_NOTOPMOST = new IntPtr(-2);
  public static readonly IntPtr HWND_TOP = new IntPtr(0);
  public static readonly IntPtr HWND_BOTTOM = new IntPtr(1);
  public const uint SWP_NOSIZE = 1;
  public const uint SWP_NOMOVE = 2;
  public const uint TOPMOST_FLAGS = 3;

  [DllImport("user32.dll", SetLastError = true)]
  public static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

  [DllImport("user32.dll")]
  public static extern bool GetClientRect(IntPtr hWnd, out RECT lpRect);

  [DllImport("user32.dll")]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool SetWindowPos(
    IntPtr hWnd,
    IntPtr hWndInsertAfter,
    int X,
    int Y,
    int cx,
    int cy,
    uint uFlags);

  [DllImport("kernel32.dll")]
  public static extern IntPtr OpenProcess(uint access, bool inheritHandle, int processId);

  [DllImport("kernel32.dll", SetLastError = true)]
  public static extern bool ReadProcessMemory(
    IntPtr hProcess,
    IntPtr lpBaseAddress,
    [Out] byte[] lpBuffer,
    IntPtr nSize,
    IntPtr lpNumberOfBytesRead);

  [DllImport("user32.dll")]
  public static extern IntPtr GetWindowThreadProcessId(IntPtr hWnd, out uint ProcessId);

  [DllImport("user32.dll")]
  public static extern IntPtr GetForegroundWindow();

  public static string CharToString(char[] text)
  {
    StringBuilder stringBuilder = new StringBuilder();
    for (int index = 0; index < text.Length && text[index] != char.MinValue; ++index)
      stringBuilder.Append(text[index]);
    return stringBuilder.ToString();
  }
}
