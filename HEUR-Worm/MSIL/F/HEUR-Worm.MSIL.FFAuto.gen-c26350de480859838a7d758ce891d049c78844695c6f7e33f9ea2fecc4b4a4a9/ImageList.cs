// Decompiled with JetBrains decompiler
// Type: Envoy.ImageList
// Assembly: ManifestRunn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4340E416-8599-4A73-B291-89371197E3DA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Worm.MSIL.FFAuto.gen-c26350de480859838a7d758ce891d049c78844695c6f7e33f9ea2fecc4b4a4a9.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Envoy
{
  public class ImageList
  {
    private List<DirectoryObject> Directories;
    private List<ImageObject> Images;
    private int CurrentIndex;
    private readonly Random Random;
    private int HistoryIndex;
    private int NrHistory;
    private ImageObject[] HistoryImages;
    private ImageList.ContentChangedDelegate ContentChanged;

    public ImageList(ImageList.ContentChangedDelegate contentChanged, int nrHistory = 10)
    {
      this.Directories = new List<DirectoryObject>();
      this.Images = new List<ImageObject>();
      this.CurrentIndex = 0;
      this.Random = ImageList.\u200D‌⁪‪⁯‏‌⁫‌‍‍‮⁬‍‪‫‫‫⁮‪⁬⁪‍‎‎‎‍⁯⁭​‪‏⁬‏‏‌‎‬‏⁯‮();
      this.HistoryIndex = 0;
      this.NrHistory = nrHistory;
      this.HistoryImages = new ImageObject[nrHistory];
      this.ContentChanged = contentChanged;
    }

    private void IndexImages()
    {
      ImageList.\u206D‫‫‫‭‫‍⁪⁭⁯‬​⁯‌⁫​⁫​‫⁯​‍‮⁫⁪⁮⁭‏‬⁫⁯‎‍⁪‎‪‌‍⁯‍‮(ImageList.\u206B‫‍‌‏‌⁭⁯⁯‏⁪⁫⁮‪‬‫⁭‌‌​‏‌‎‭‏​‎‮⁮‎‌​⁫‫⁪⁫‎‫⁯‎‮());
      ImageList.\u202A⁯⁯‫⁪⁭​‍​‏⁪‏‌⁭⁭‌⁬⁮‪‭‮‎⁯⁬‮⁬‮‏⁬‫⁪⁬‌‍‬‫⁪‮‏⁮‮();
      this.Images.Clear();
      this.CurrentIndex = this.HistoryIndex = 0;
      HashSet<string> hashSet = new HashSet<string>();
      foreach (DirectoryObject directory in this.Directories)
      {
        if (directory.IsEnabled())
        {
          foreach (string str in ImageList.\u206F‌‭⁫⁭⁭‬⁬‪‎⁫‫⁮‪‬⁪‭‏⁮‪​​‪‬⁫‮⁬‮‮⁬‭‮⁫⁫‏⁪⁯‬‮⁪‮(directory.GetPath(), "*", directory.GetSearchOption()))
            ;
        }
      }
      ImageList.\u206D‫‫‫‭‫‍⁪⁭⁯‬​⁯‌⁫​⁫​‫⁯​‍‮⁫⁪⁮⁭‏‬⁫⁯‎‍⁪‎‪‌‍⁯‍‮(ImageList.\u200D⁪‭‭⁭‎⁪‪‪⁫‎‍‎⁯‍​⁯⁬‮‭‬​⁪‏‭‎‎‮‮‍‌‭⁪‍⁫‫‍⁪⁯⁭‮());
      this.ContentChanged();
    }

    public ImageObject GetCurrentImage() => this.HistoryImages[this.HistoryIndex];

    public ImageObject GetNextImage(bool random)
    {
      if (this.Images.Count == 0)
        return (ImageObject) null;
      this.HistoryIndex = 0;
      ImageList.\u200F‮​‌‮‏‮‌‮⁪‭‮⁮⁯‌‌‏⁪‫‫‬⁭⁪⁯⁫‌⁫‫⁮‮⁭‪⁫‌⁬⁬⁫‮⁪‮((Array) this.HistoryImages, 0, (Array) this.HistoryImages, 1, this.NrHistory - 1);
      this.CurrentIndex = random ? ImageList.\u206C⁪‌‍‌‪⁭‍‌⁭‎‭‌‌‎⁬⁫‪‪​⁬⁪⁯‪‍‌‪​‏⁬‎‬‏‮‎⁭⁪‏‍‫‮(this.Random, this.Images.Count) : (this.CurrentIndex + 1) % this.Images.Count;
      this.HistoryImages[0] = this.Images[this.CurrentIndex];
      return this.Images[this.CurrentIndex];
    }

    public void SetDirectories(List<DirectoryObject> directories)
    {
      this.Directories = directories;
      this.IndexImages();
    }

    public void SelectHistoryImage(int index) => this.HistoryIndex = index;

    public int GetSelectedHistoryIndex() => this.HistoryIndex;

    public int GetTotalImages() => this.Images.Count;

    public void SelectPreviousImage()
    {
      if (this.HistoryIndex >= this.NrHistory - 1)
        return;
      ++this.HistoryIndex;
    }

    public void DeleteDirectory(DirectoryObject directory)
    {
      this.Directories.Remove(directory);
      this.IndexImages();
    }

    public void AddDirectory(DirectoryObject directory)
    {
      if (this.Directories.Contains(directory))
        return;
      this.Directories.Add(directory);
      this.IndexImages();
    }

    public void DirectoryChanged(DirectoryObject oldObject, DirectoryObject newObject)
    {
      this.Directories.Remove(oldObject);
      this.Directories.Add(newObject);
      this.IndexImages();
    }

    public void ReIndex() => this.IndexImages();

    static Random \u200D‌⁪‪⁯‏‌⁫‌‍‍‮⁬‍‪‫‫‫⁮‪⁬⁪‍‎‎‎‍⁯⁭​‪‏⁬‏‏‌‎‬‏⁯‮() => new Random();

    static Cursor \u206B‫‍‌‏‌⁭⁯⁯‏⁪⁫⁮‪‬‫⁭‌‌​‏‌‎‭‏​‎‮⁮‎‌​⁫‫⁪⁫‎‫⁯‎‮() => Cursors.WaitCursor;

    static void \u206D‫‫‫‭‫‍⁪⁭⁯‬​⁯‌⁫​⁫​‫⁯​‍‮⁫⁪⁮⁭‏‬⁫⁯‎‍⁪‎‪‌‍⁯‍‮([In] Cursor obj0) => Cursor.Current = obj0;

    static void \u202A⁯⁯‫⁪⁭​‍​‏⁪‏‌⁭⁭‌⁬⁮‪‭‮‎⁯⁬‮⁬‮‏⁬‫⁪⁬‌‍‬‫⁪‮‏⁮‮() => Application.DoEvents();

    static string[] \u206F‌‭⁫⁭⁭‬⁬‪‎⁫‫⁮‪‬⁪‭‏⁮‪​​‪‬⁫‮⁬‮‮⁬‭‮⁫⁫‏⁪⁯‬‮⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] SearchOption obj2)
    {
      return Directory.GetFiles(obj0, obj1, obj2);
    }

    static Cursor \u200D⁪‭‭⁭‎⁪‪‪⁫‎‍‎⁯‍​⁯⁬‮‭‬​⁪‏‭‎‎‮‮‍‌‭⁪‍⁫‫‍⁪⁯⁭‮() => Cursors.Default;

    static void \u200F‮​‌‮‏‮‌‮⁪‭‮⁮⁯‌‌‏⁪‫‫‬⁭⁪⁯⁫‌⁫‫⁮‮⁭‪⁫‌⁬⁬⁫‮⁪‮(
      [In] Array obj0,
      [In] int obj1,
      [In] Array obj2,
      [In] int obj3,
      [In] int obj4)
    {
      Array.Copy(obj0, obj1, obj2, obj3, obj4);
    }

    static int \u206C⁪‌‍‌‪⁭‍‌⁭‎‭‌‌‎⁬⁫‪‪​⁬⁪⁯‪‍‌‪​‏⁬‎‬‏‮‎⁭⁪‏‍‫‮([In] Random obj0, [In] int obj1) => obj0.Next(obj1);

    public delegate void ContentChangedDelegate();
  }
}
