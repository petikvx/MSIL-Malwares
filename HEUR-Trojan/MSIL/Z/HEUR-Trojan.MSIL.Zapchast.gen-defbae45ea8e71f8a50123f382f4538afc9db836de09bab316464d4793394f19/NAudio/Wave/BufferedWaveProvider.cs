// Decompiled with JetBrains decompiler
// Type: NAudio.Wave.BufferedWaveProvider
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System;

namespace NAudio.Wave
{
  public class BufferedWaveProvider : 魂盹聱्\u2731ꚕ\u3294㝮氎\u9FE9\uFFFDḼ\uEAEB\u309Bﭤ祖᷇葙\uEF8C詭
  {
    private \u0D4D\uEDE5か\u2075欕\uFB3D麚竪䜤胇輥夒非ꄧ쌱迀럝刷쿱\u2810 circularBuffer;
    private readonly 蒹䔇ᚮ\uE740朁鸙宄䄨덈鸘㔌\uFFFDꀯ霤\uE673䞀\uF43A蠤计ሡ waveFormat;

    public BufferedWaveProvider(
      蒹䔇ᚮ\uE740朁鸙宄䄨덈鸘㔌\uFFFDꀯ霤\uE673䞀\uF43A蠤计ሡ waveFormat)
    {
      this.waveFormat = waveFormat;
      this.BufferLength = waveFormat.AverageBytesPerSecond * 5;
      this.ReadFully = true;
    }

    public bool ReadFully { get; set; }

    public int BufferLength { get; set; }

    public TimeSpan BufferDuration
    {
      get => TimeSpan.FromSeconds((double) this.BufferLength / (double) this.WaveFormat.AverageBytesPerSecond);
      set => this.BufferLength = (int) (value.TotalSeconds * (double) this.WaveFormat.AverageBytesPerSecond);
    }

    public bool DiscardOnBufferOverflow { get; set; }

    public int BufferedBytes => this.circularBuffer != null ? this.circularBuffer.Count : 0;

    public TimeSpan BufferedDuration => TimeSpan.FromSeconds((double) this.BufferedBytes / (double) this.WaveFormat.AverageBytesPerSecond);

    public 蒹䔇ᚮ\uE740朁鸙宄䄨덈鸘㔌\uFFFDꀯ霤\uE673䞀\uF43A蠤计ሡ WaveFormat => this.waveFormat;

    public void AddSamples(byte[] buffer, int offset, int count)
    {
      if (this.circularBuffer == null)
        this.circularBuffer = new \u0D4D\uEDE5か\u2075欕\uFB3D麚竪䜤胇輥夒非ꄧ쌱迀럝刷쿱\u2810(this.BufferLength);
      if (this.circularBuffer.逖挐ⴣ\uFFFD\u2144䈢熜ﺡ攁旨婭儡ﴘ㱟倻맭\uEE73\uFFFD柼萺(buffer, offset, count) < count && !this.DiscardOnBufferOverflow)
        throw new InvalidOperationException("Buffer full");
    }

    public int Read(byte[] buffer, int offset, int count)
    {
      int num = 0;
      if (this.circularBuffer != null)
        num = this.circularBuffer.\uEE18嵞싦㟸\u26D2䒵圍㡓녣쑽ힲ\uF340ྫྷﬣ\uF5BF虲赉儎\uEA60楀(buffer, offset, count);
      if (this.ReadFully && num < count)
      {
        Array.Clear((Array) buffer, offset + num, count - num);
        num = count;
      }
      return num;
    }

    public void ClearBuffer()
    {
      if (this.circularBuffer == null)
        return;
      this.circularBuffer.ﳭ鎭兟䁛峁浮豵背䶱\u0B0E킘칇\u25FD烇䃽香\uEF27ᐞ껨Ꮽ();
    }
  }
}
