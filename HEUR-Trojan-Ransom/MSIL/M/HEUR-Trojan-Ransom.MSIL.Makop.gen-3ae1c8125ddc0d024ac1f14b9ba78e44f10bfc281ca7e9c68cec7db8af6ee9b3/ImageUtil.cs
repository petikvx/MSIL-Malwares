// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: Yx, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 400FF0AC-C9F5-4D3D-92AD-97AFF85F6668
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-3ae1c8125ddc0d024ac1f14b9ba78e44f10bfc281ca7e9c68cec7db8af6ee9b3.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
label_1:
    int num1 = -800205800;
    PixelFormat pixelFormat;
    Rectangle rectangle;
    Bitmap bitmap;
    byte[] numArray;
    IntPtr num2;
    int length;
    Image image;
    BitmapData bitmapData;
    int num3;
    int num4;
    bool flag;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -2075146699)) % 28U)
      {
        case 0:
          num1 = (int) num5 * -718867469 ^ 1078515353;
          continue;
        case 1:
          bitmapData = ImageUtil.\u202A⁫‬‭‬‬‌⁮⁯‎‍‎‭‏‎⁪‬⁮⁫⁬‮‪‌‌‎​​‌⁫‫‌⁯⁯⁬‭⁪⁮⁭‌⁮‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * -909800836 ^ -137931818;
          continue;
        case 2:
          numArray = new byte[length];
          num1 = (int) num5 * -1232880646 ^ -149059035;
          continue;
        case 3:
          pixelFormat = PixelFormat.Format32bppArgb;
          rectangle = new Rectangle(0, 0, ImageUtil.\u206B⁬‪‮⁮⁭‍​‏​​‍⁬‏⁫‮‬‮‎‌‬‎⁬‪‏‌⁮‌​‏‮‏⁬⁯‭⁫⁯‏‏‮‮((Image) bitmap), ImageUtil.\u206E⁪⁪‭​‭‮‮⁮⁯‭⁯⁮⁫⁯​⁫‏‌⁫‫​⁪‏‫​‬​‪⁬⁪‍‍⁫‍​⁯⁯‪‫‮((Image) bitmap));
          num1 = (int) num5 * -536358975 ^ 1963707839;
          continue;
        case 4:
          ImageUtil.\u200F⁯‪‏⁯‪⁮‏⁬⁯⁬⁬⁮‍‬⁮​‌‭​‪‬‏‭‍‮‪‭⁯‪‍‎‬⁭‍‪‭‬⁬‌‮(numArray, 0, num2, length);
          num1 = (int) num5 * -1553316997 ^ -27026891;
          continue;
        case 5:
          num1 = (int) num5 * -1945255960 ^ -919336790;
          continue;
        case 6:
          num3 = num3 + 1 + 1;
          numArray[num4 + num3] = (byte) ((double) numArray[num4 + num3] * opacity);
          num1 = (int) num5 * -1586619677 ^ 1208770525;
          continue;
        case 8:
          bitmap = (Bitmap) ImageUtil.\u206B⁮⁪‎‏‎‮‍‏‌⁬‎‮⁭‮‪‭‍⁮‪‮‌‫⁪⁭‍‮​⁪‬‪⁭‫⁯⁬‏⁪‌‮‏‮(originalImage);
          num1 = -155086086;
          continue;
        case 9:
          int num6 = (ImageUtil.\u206E⁯⁯‬⁬‌⁫⁬⁯⁮‍‎‫‍⁭⁪‏‮​‮‭‭‬⁬⁭⁬‭⁫⁯‏⁯‫‫‌⁬⁮‪⁭‫⁬‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed ? -34555039 : (num6 = -679702640);
          num1 = num6 ^ (int) num5 * -932219479;
          continue;
        case 10:
          num4 = 0;
          num1 = (int) num5 * 415091336 ^ 1368355309;
          continue;
        case 11:
          ImageUtil.\u206C‮‪⁫​‬⁭⁫⁮⁬‍‮⁯⁯‏⁭‮⁯⁯⁬‬‍⁬⁭‫‮‪⁭‎‏‏‭⁬‮‫‏⁫‬‎‮(bitmap, bitmapData);
          num1 = (int) num5 * 1547297692 ^ -1313574114;
          continue;
        case 12:
          goto label_1;
        case 13:
          image = originalImage;
          num1 = (int) num5 * 1143218572 ^ 1090289392;
          continue;
        case 14:
          num3 = 0;
          num1 = -711011022;
          continue;
        case 15:
          ++num3;
          num1 = (int) num5 * 1384246660 ^ 1812407903;
          continue;
        case 16:
          ImageUtil.\u202C‫‫⁮⁪‬⁫⁬⁯‍​⁯​‭​‍⁪⁪‮‌‌⁫‎‌‍‏⁯‪‪‬‬⁪‪‎‎⁭⁮‮‪⁯‮(num2, numArray, 0, length);
          num1 = (int) num5 * -111002974 ^ -1380892501;
          continue;
        case 17:
          int num7 = !flag ? -707206461 : (num7 = -634399036);
          num1 = num7 ^ (int) num5 * 1496372102;
          continue;
        case 18:
          num1 = (int) num5 * -252542093 ^ 339925574;
          continue;
        case 19:
          int num8;
          num1 = num8 = numArray[num4 + 4 - 1] == (byte) 0 ? -837206437 : (num8 = -1996552877);
          continue;
        case 20:
          num1 = (int) num5 * 363883861 ^ 119345930;
          continue;
        case 21:
          length = ImageUtil.\u206B⁬‪‮⁮⁭‍​‏​​‍⁬‏⁫‮‬‮‎‌‬‎⁬‪‏‌⁮‌​‏‮‏⁬⁯‭⁫⁯‏‏‮‮((Image) bitmap) * ImageUtil.\u206E⁪⁪‭​‭‮‮⁮⁯‭⁯⁮⁫⁯​⁫‏‌⁫‫​⁪‏‫​‬​‪⁬⁪‍‍⁫‍​⁯⁯‪‫‮((Image) bitmap) * 4;
          num1 = (int) num5 * 1067421405 ^ -1276068162;
          continue;
        case 22:
          num1 = (int) num5 * 618111814 ^ -457156080;
          continue;
        case 23:
          num2 = ImageUtil.\u200E‌⁭‮‭⁬⁯‍‪⁫​⁯‎‫‏‪‌⁭⁮‮‎‫‭⁫‭⁪⁮⁫⁫‫⁯‪⁪‫​⁬‭⁫‮⁬‮(bitmapData);
          num1 = (int) num5 * -190180436 ^ -214485456;
          continue;
        case 24:
          flag = num4 < numArray.Length;
          num1 = -1428805448;
          continue;
        case 25:
          num4 += 4;
          num1 = -161987935;
          continue;
        case 26:
          num1 = (int) num5 * -337529556 ^ 656512442;
          continue;
        case 27:
          image = (Image) bitmap;
          num1 = (int) num5 * 1818449562 ^ -207849959;
          continue;
        default:
          goto label_29;
      }
    }
label_29:
    return image;
  }

  static PixelFormat \u206E⁯⁯‬⁬‌⁫⁬⁯⁮‍‎‫‍⁭⁪‏‮​‮‭‭‬⁬⁭⁬‭⁫⁯‏⁯‫‫‌⁬⁮‪⁭‫⁬‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206B⁮⁪‎‏‎‮‍‏‌⁬‎‮⁭‮‪‭‍⁮‪‮‌‫⁪⁭‍‮​⁪‬‪⁭‫⁯⁬‏⁪‌‮‏‮([In] Image obj0) => obj0.Clone();

  static int \u206B⁬‪‮⁮⁭‍​‏​​‍⁬‏⁫‮‬‮‎‌‬‎⁬‪‏‌⁮‌​‏‮‏⁬⁯‭⁫⁯‏‏‮‮([In] Image obj0) => obj0.Width;

  static int \u206E⁪⁪‭​‭‮‮⁮⁯‭⁯⁮⁫⁯​⁫‏‌⁫‫​⁪‏‫​‬​‪⁬⁪‍‍⁫‍​⁯⁯‪‫‮([In] Image obj0) => obj0.Height;

  static BitmapData \u202A⁫‬‭‬‬‌⁮⁯‎‍‎‭‏‎⁪‬⁮⁫⁬‮‪‌‌‎​​‌⁫‫‌⁯⁯⁬‭⁪⁮⁭‌⁮‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200E‌⁭‮‭⁬⁯‍‪⁫​⁯‎‫‏‪‌⁭⁮‮‎‫‭⁫‭⁪⁮⁫⁫‫⁯‪⁪‫​⁬‭⁫‮⁬‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u202C‫‫⁮⁪‬⁫⁬⁯‍​⁯​‭​‍⁪⁪‮‌‌⁫‎‌‍‏⁯‪‪‬‬⁪‪‎‎⁭⁮‮‪⁯‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u200F⁯‪‏⁯‪⁮‏⁬⁯⁬⁬⁮‍‬⁮​‌‭​‪‬‏‭‍‮‪‭⁯‪‍‎‬⁭‍‪‭‬⁬‌‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206C‮‪⁫​‬⁭⁫⁮⁬‍‮⁯⁯‏⁭‮⁯⁯⁬‬‍⁬⁭‫‮‪⁭‎‏‏‭⁬‮‫‏⁫‬‎‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
