// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: SessionMa, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 29EA69E7-0E4F-4884-A9FC-633229D6DF5B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c4ce569311f22121bf069cebfeb39abebfd9109cf9a147e550f8801c49529685.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = -608002944;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -509989174)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 2063046148 ^ 255718401;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -879601681 ^ 138222731;
            continue;
          case 4:
            this.m_Node = aNode;
            this.m_Key = (string) null;
            num1 = (int) num2 * -1579598057 ^ 456757995;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
      this.m_Node = aNode;
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
      bool flag = this.m_Key == null;
label_1:
      int num1 = 2072110789;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 769836091)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -9476172 ^ 1659740624;
            continue;
          case 1:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 1851474162 ^ 145692245;
            continue;
          case 2:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = 328863328;
            continue;
          case 3:
            this.m_Node = (JSONNode) null;
            num1 = 89535788;
            continue;
          case 4:
            num1 = (int) num2 * -1097309601 ^ -882025782;
            continue;
          case 5:
            num1 = (int) num2 * -1935076932 ^ 915054372;
            continue;
          case 6:
            num1 = (int) num2 * -790250125 ^ -555095483;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num3 = !flag ? -1287881733 : (num3 = -964273011);
            num1 = num3 ^ (int) num2 * -2064876249;
            continue;
          case 9:
            goto label_3;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -823967885;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1405071160)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -588810829 ^ -1123062106;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 22925566;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1432888952)) % 6U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 502575778 ^ -1867917321;
              continue;
            case 1:
              num1 = (int) num2 * -492501043 ^ -860398690;
              continue;
            case 2:
              goto label_1;
            case 3:
              aVal.Add(value);
              num1 = (int) num2 * -298567366 ^ 663459238;
              continue;
            case 4:
              aVal = new JSONArray();
              num1 = (int) num2 * -1345296840 ^ -941878301;
              continue;
            case 5:
              goto label_3;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 277849157;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1276766990)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * 1117348427 ^ -1065449847;
              continue;
            case 3:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = (int) num2 * -1959985031 ^ 276786035;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 242893879;
        JSONClass aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1677958451)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * 2016921427 ^ 1458426076;
              continue;
            case 3:
              aVal = new JSONClass();
              num1 = (int) num2 * -1729343713 ^ -457488698;
              continue;
            case 4:
              aVal.Add(aKey, value);
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -2104139695 ^ -408364103;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
label_1:
      int num1 = 516611800;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 609885119)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -729471677 ^ 705835547;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 683465276;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2015217015)) % 6U)
        {
          case 0:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -1913838182 ^ 1507356978;
            continue;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -820071622 ^ 182260119;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1334062227 ^ -1327958019;
            continue;
          case 4:
            goto label_3;
          case 5:
            aVal = new JSONClass();
            num1 = (int) num2 * 72281603 ^ 1492419718;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 285425969;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1186372930)) % 8U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 214599792 ^ -2082953981;
            continue;
          case 3:
            flag2 = b == null;
            num1 = (int) num2 * 856094972 ^ -703378560;
            continue;
          case 4:
            flag1 = (object) a == b;
            num1 = 2064428136;
            continue;
          case 5:
            num1 = (int) num2 * -1406272556 ^ 1845876711;
            continue;
          case 6:
            int num3 = !flag2 ? 1244011992 : (num3 = 1523170675);
            num1 = num3 ^ (int) num2 * -1463683267;
            continue;
          case 7:
            flag1 = true;
            num1 = (int) num2 * -1790404138 ^ 1234423541;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return flag1;
    }

    public static bool operator !=(JSONLazyCreator a, object b) => !(a == b);

    public override bool Equals(object obj)
    {
      bool flag1 = obj == null;
label_1:
      int num1 = -1201836488;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -919181699)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            flag2 = (object) this == obj;
            num1 = -1788788732;
            continue;
          case 2:
            num1 = (int) num2 * 544344516 ^ -1051622796;
            continue;
          case 3:
            int num3 = flag1 ? -1152138502 : (num3 = -840547779);
            num1 = num3 ^ (int) num2 * 1204020363;
            continue;
          case 4:
            flag2 = true;
            num1 = (int) num2 * 1007871987 ^ -874703631;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = 451812515;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 795004562)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * -1199640973 ^ -557307629;
            continue;
          case 2:
            num1 = (int) num2 * -1841172951 ^ 391292743;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1874605777;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1877305518)) % 3U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * 2139620942 ^ 595905476;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix)
    {
      string str = "";
label_1:
      int num1 = -613137241;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1066945725)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 663728596 ^ -347978921;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override int AsInt
    {
      get
      {
        this.Set((JSONNode) new JSONData(0));
label_1:
        int num1 = -1736686750;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1744174435)) % 5U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -394327559 ^ 435811329;
              continue;
            case 3:
              num1 = (int) num2 * 16976056 ^ 684481250;
              continue;
            case 4:
              asInt = 0;
              num1 = (int) num2 * 654801298 ^ 1379373493;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asInt;
      }
      set
      {
        this.Set((JSONNode) new JSONData(value));
label_1:
        int num1 = 905867235;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1182760936)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * 1503720845 ^ -2081222312;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override float AsFloat
    {
      get
      {
        JSONData aVal = new JSONData(0.0f);
label_1:
        int num1 = 1528750165;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1574131458)) % 4U)
          {
            case 0:
              asFloat = 0.0f;
              num1 = (int) num2 * -1638426245 ^ -1979381457;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -2108461830 ^ 1444158296;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -554448862;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1222713449)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * 768795524 ^ -136631368;
              continue;
            case 2:
              goto label_3;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 111741105 ^ 681399498;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = 832274643;
        JSONData aVal;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 977570938)) % 4U)
          {
            case 0:
              this.Set((JSONNode) aVal);
              asDouble = 0.0;
              num1 = (int) num2 * 1214454371 ^ -1922545516;
              continue;
            case 1:
              aVal = new JSONData(0.0);
              num1 = (int) num2 * -1079653170 ^ -2011261140;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = 1681222748;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1747401537)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -1430767674 ^ 144031673;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override bool AsBool
    {
      get
      {
        this.Set((JSONNode) new JSONData(false));
label_1:
        int num1 = -1060178382;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -182591765)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1716432666 ^ 1027566202;
              continue;
            case 2:
              asBool = false;
              num1 = (int) num2 * -1116928193 ^ 1307058557;
              continue;
            case 3:
              num1 = (int) num2 * -666311208 ^ -1363481503;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asBool;
      }
      set
      {
label_1:
        int num1 = 339036395;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1595746156)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -383818291 ^ -1836508845;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 713266819 ^ 2001095;
              continue;
            case 3:
              goto label_3;
            case 4:
              num1 = (int) num2 * -694592178 ^ -607989465;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -1875052763;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1164089310)) % 6U)
          {
            case 1:
              asArray = aVal;
              num1 = (int) num2 * -1651477935 ^ 546717760;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -44355698 ^ 882708458;
              continue;
            case 4:
              num1 = (int) num2 * -1752923330 ^ -769623201;
              continue;
            case 5:
              num1 = (int) num2 * -247894982 ^ 1310692270;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
        this.Set((JSONNode) aVal);
        JSONClass asObject = aVal;
label_1:
        int num1 = -552778587;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -354728985)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 1882687585 ^ 2073653388;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return asObject;
      }
    }
  }
}
