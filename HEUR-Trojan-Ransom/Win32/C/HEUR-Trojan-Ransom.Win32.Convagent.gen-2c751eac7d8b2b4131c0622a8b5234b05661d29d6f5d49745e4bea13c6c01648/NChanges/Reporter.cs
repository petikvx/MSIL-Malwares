// Decompiled with JetBrains decompiler
// Type: NChanges.Reporter
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using System;
using System.Collections.Generic;
using System.Linq;

namespace NChanges
{
  public class Reporter
  {
    private readonly List<AssemblyInfo> _assemblies = new List<AssemblyInfo>();

    public ICollection<AssemblyInfo> Assemblies => (ICollection<AssemblyInfo>) this._assemblies;

    public AssemblyInfo GenerateReport()
    {
      AssemblyInfo report = new AssemblyInfo();
      AssemblyInfo previousAssembly = (AssemblyInfo) null;
      foreach (AssemblyInfo thisAssembly in (IEnumerable<AssemblyInfo>) this.Assemblies.OrderBy<AssemblyInfo, string>((Func<AssemblyInfo, string>) (a => a.Version.PadNumbers())))
      {
        report.Name = thisAssembly.Name;
        report.Version = thisAssembly.Version;
        Reporter.FindAddedTypes(report, thisAssembly, previousAssembly);
        Reporter.FindRemovedTypes(report, thisAssembly, previousAssembly);
        Reporter.UpdateExistingTypes(report, thisAssembly, previousAssembly);
        Reporter.UpdateExistingTypeMembers(report, thisAssembly, previousAssembly);
        previousAssembly = thisAssembly;
      }
      return report;
    }

    private static void FindAddedTypes(
      AssemblyInfo report,
      AssemblyInfo thisAssembly,
      AssemblyInfo previousAssembly)
    {
      foreach (TypeInfo type in (IEnumerable<TypeInfo>) thisAssembly.Types)
      {
        if (!report.Types.Contains(type.Name))
        {
          TypeInfo typeInfo = type.Clone();
          if (previousAssembly != null)
            typeInfo.Changes.Add(new TypeChangeInfo()
            {
              Kind = TypeChangeKind.AddedType,
              Version = thisAssembly.Version
            });
          report.Types.Add(typeInfo);
        }
      }
    }

    private static void FindRemovedTypes(
      AssemblyInfo report,
      AssemblyInfo thisAssembly,
      AssemblyInfo previousAssembly)
    {
      if (previousAssembly == null)
        return;
      foreach (TypeInfo type in (IEnumerable<TypeInfo>) previousAssembly.Types)
      {
        if (!thisAssembly.Types.Contains(type.Name))
          report.Types.Get(type.Name).Changes.Add(new TypeChangeInfo()
          {
            Kind = TypeChangeKind.RemovedType,
            Version = thisAssembly.Version
          });
      }
    }

    private static void UpdateExistingTypes(
      AssemblyInfo report,
      AssemblyInfo thisAssembly,
      AssemblyInfo previousAssembly)
    {
      if (previousAssembly == null)
        return;
      foreach (TypeInfo type in (IEnumerable<TypeInfo>) previousAssembly.Types)
      {
        if (previousAssembly.Types.Contains(type.Name) && thisAssembly.Types.Contains(type.Name))
        {
          TypeInfo typeInfo1 = previousAssembly.Types.Get(type.Name);
          TypeInfo typeInfo2 = thisAssembly.Types.Get(type.Name);
          if (!typeInfo1.Obsolete && typeInfo2.Obsolete)
            report.Types.Get(type.Name).Changes.Add(new TypeChangeInfo()
            {
              Kind = TypeChangeKind.ObsoletedType,
              Version = thisAssembly.Version
            });
        }
      }
    }

    private static void UpdateExistingTypeMembers(
      AssemblyInfo report,
      AssemblyInfo thisAssembly,
      AssemblyInfo previousAssembly)
    {
      if (previousAssembly == null)
        return;
      foreach (TypeInfo type in (IEnumerable<TypeInfo>) report.Types)
      {
        if (previousAssembly.Types.Contains(type.Name) && thisAssembly.Types.Contains(type.Name))
        {
          TypeInfo typeInfo1 = previousAssembly.Types.Get(type.Name);
          TypeInfo typeInfo2 = thisAssembly.Types.Get(type.Name);
          foreach (MemberInfo member in (IEnumerable<MemberInfo>) typeInfo2.Members)
          {
            if (!typeInfo1.Members.Contains(member.Name) || typeInfo1.Members.TryGet(member) == null)
            {
              MemberInfo memberInfo = member.Clone();
              memberInfo.Changes.Add(new MemberChangeInfo()
              {
                Kind = MemberChangeKind.AddedMember,
                Version = thisAssembly.Version
              });
              type.Members.Add(memberInfo);
            }
            else
            {
              MemberInfo memberInfo1 = typeInfo1.Members.Get(member);
              if (!memberInfo1.Obsolete && member.Obsolete)
                type.Members.Get(member.Name).Changes.Add(new MemberChangeInfo()
                {
                  Kind = MemberChangeKind.ObsoletedMember,
                  Version = thisAssembly.Version
                });
              if (!type.Members.IsOverloaded(member.Name))
              {
                if (memberInfo1.Parameters.Count < member.Parameters.Count)
                {
                  for (int count = memberInfo1.Parameters.Count; count < member.Parameters.Count; ++count)
                  {
                    MemberInfo memberInfo2 = type.Members.Get(member.Name);
                    memberInfo2.Changes.Add(new MemberChangeInfo()
                    {
                      Kind = MemberChangeKind.AddedParameter,
                      Version = thisAssembly.Version,
                      New = member.Parameters[count].Name
                    });
                    memberInfo2.UpdateParameters(member);
                  }
                }
                else if (memberInfo1.Parameters.Count > member.Parameters.Count)
                {
                  for (int count = member.Parameters.Count; count < memberInfo1.Parameters.Count; ++count)
                  {
                    MemberInfo memberInfo3 = type.Members.Get(member.Name);
                    memberInfo3.Changes.Add(new MemberChangeInfo()
                    {
                      Kind = MemberChangeKind.RemovedParameter,
                      Version = thisAssembly.Version,
                      Old = memberInfo1.Parameters[count].Name
                    });
                    memberInfo3.UpdateParameters(member);
                  }
                }
              }
            }
          }
          foreach (MemberInfo member in (IEnumerable<MemberInfo>) typeInfo1.Members)
          {
            if (!typeInfo2.Members.Contains(member.Name))
              type.Members.Get(member).Changes.Add(new MemberChangeInfo()
              {
                Kind = MemberChangeKind.RemovedMember,
                Version = thisAssembly.Version
              });
          }
        }
      }
    }
  }
}
