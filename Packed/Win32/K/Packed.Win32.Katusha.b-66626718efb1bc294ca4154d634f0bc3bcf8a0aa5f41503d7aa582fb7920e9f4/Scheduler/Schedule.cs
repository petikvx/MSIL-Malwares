// Decompiled with JetBrains decompiler
// Type: OnlineBackup.Scheduler.Schedule
// Assembly: OnlineBackup.SchedulerService, Version=1.0.0.2239, Culture=neutral, PublicKeyToken=null
// MVID: 957E6A86-11F3-41A3-AA04-CA4B20FE5494
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Packed.Win32.Katusha.b-66626718efb1bc294ca4154d634f0bc3bcf8a0aa5f41503d7aa582fb7920e9f4.exe

using System;

namespace OnlineBackup.Scheduler
{
  internal class Schedule : MarshalByRefObject, ISchedule
  {
    public void EnableHourlyBackups(DateTime? time)
    {
      if (!time.HasValue)
        time = new DateTime?(DateTime.Now);
      if (SchedulerController.Instance() == null)
        return;
      SchedulerController.Instance().EnableHourlyBackup(time.Value);
    }

    public void EnableDailyBackups(DateTime? time)
    {
      if (!time.HasValue)
        time = new DateTime?(DateTime.Now);
      if (SchedulerController.Instance() == null)
        return;
      SchedulerController.Instance().EnableDailyBackup(time.Value);
    }

    public void EnableDailyBackups(DateTime? time, int daysOfWeek)
    {
      if (!time.HasValue)
        time = new DateTime?(DateTime.Now);
      if (SchedulerController.Instance() == null)
        return;
      SchedulerController.Instance().EnableDailyBackup(time.Value, daysOfWeek);
    }

    public void DisableScheduledBackups()
    {
      if (SchedulerController.Instance() == null)
        return;
      SchedulerController.Instance().DisableScheduledBackups();
    }

    public ScheduledBackup BackupInfo
    {
      get
      {
        try
        {
          return SchedulerController.Instance().GetBackupInfo();
        }
        catch
        {
          return (ScheduledBackup) null;
        }
      }
    }
  }
}
