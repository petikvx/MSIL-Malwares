// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.WebErrorHandler
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Web;
using System.Xml.Linq;
using System.Xml.Serialization;

namespace System.ServiceModel.Dispatcher
{
  internal class WebErrorHandler : IErrorHandler
  {
    private WebHttpBehavior webHttpBehavior;
    private ContractDescription contractDescription;
    private bool includeExceptionDetailInFaults;

    public WebErrorHandler(
      WebHttpBehavior webHttpBehavior,
      ContractDescription contractDescription,
      bool includeExceptionDetailInFaults)
    {
      this.webHttpBehavior = webHttpBehavior;
      this.contractDescription = contractDescription;
      this.includeExceptionDetailInFaults = includeExceptionDetailInFaults;
    }

    public bool HandleError(Exception error) => false;

    public void ProvideFault(Exception error, MessageVersion version, ref Message fault)
    {
      if (version != MessageVersion.None || error == null || !(error is FaultException) && fault != null)
        return;
      try
      {
        if (error is IWebFaultException)
        {
          IWebFaultException webFaultException = (IWebFaultException) error;
          WebOperationContext current = WebOperationContext.Current;
          current.OutgoingResponse.StatusCode = webFaultException.StatusCode;
          string property1;
          if (!OperationContext.Current.IncomingMessageProperties.TryGetValue<string>("HttpOperationName", out property1))
            throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.OperationNameNotFound));
          OperationDescription operationDescription = this.contractDescription.Operations.Find(property1);
          bool flag = WebHttpBehavior.IsXmlSerializerFaultFormat(operationDescription);
          if (flag)
          {
            WebMessageFormat? format = WebOperationContext.Current.OutgoingResponse.Format;
            WebMessageFormat webMessageFormat = WebMessageFormat.Json;
            if ((format.GetValueOrDefault() == webMessageFormat ? (format.HasValue ? 1 : 0) : 0) != 0)
            {
              // ISSUE: reference to a compiler-generated method
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.JsonFormatRequiresDataContract, (object) operationDescription.Name, (object) operationDescription.DeclaringContract.Name, (object) operationDescription.DeclaringContract.Namespace)));
            }
          }
          WebMessageFormat? nullable = !flag ? current.OutgoingResponse.Format : new WebMessageFormat?(WebMessageFormat.Xml);
          WebMessageFormat webMessageFormat1 = nullable.HasValue ? nullable.Value : this.webHttpBehavior.GetResponseFormat(operationDescription);
          if (webFaultException.DetailObject != null)
          {
            switch (webMessageFormat1)
            {
              case WebMessageFormat.Xml:
                if (flag)
                {
                  fault = current.CreateXmlResponse<object>(webFaultException.DetailObject, new XmlSerializer(webFaultException.DetailType, webFaultException.KnownTypes));
                  break;
                }
                fault = current.CreateXmlResponse<object>(webFaultException.DetailObject, (XmlObjectSerializer) new DataContractSerializer(webFaultException.DetailType, (IEnumerable<System.Type>) webFaultException.KnownTypes));
                break;
              case WebMessageFormat.Json:
                fault = current.CreateJsonResponse<object>(webFaultException.DetailObject, new DataContractJsonSerializer(webFaultException.DetailType, (IEnumerable<System.Type>) webFaultException.KnownTypes));
                break;
            }
          }
          else
          {
            HttpResponseMessageProperty property2;
            if (OperationContext.Current.OutgoingMessageProperties.TryGetValue<HttpResponseMessageProperty>(HttpResponseMessageProperty.Name, out property2) && property2 != null)
              property2.SuppressEntityBody = true;
            if (webMessageFormat1 != WebMessageFormat.Json)
              return;
            fault.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.JsonProperty);
          }
        }
        else
          fault = this.CreateHtmlResponse(error);
      }
      catch (Exception ex)
      {
        if (Fx.IsFatal(ex))
        {
          throw;
        }
        else
        {
          if (System.ServiceModel.DiagnosticUtility.ShouldTraceWarning)
          {
            // ISSUE: reference to a compiler-generated method
            System.ServiceModel.DiagnosticUtility.TraceHandledException((Exception) new InvalidOperationException(SR2.GetString(SR2.HelpPageFailedToCreateErrorMessage)), TraceEventType.Warning);
          }
          WebOperationContext.Current.OutgoingResponse.StatusCode = HttpStatusCode.BadRequest;
          fault = this.CreateHtmlResponse(ex);
        }
      }
    }

    private Message CreateHtmlResponse(Exception error)
    {
      Uri helpUri = (Uri) null;
      if (WebOperationContext.Current != null)
        helpUri = this.webHttpBehavior.HelpUri != (Uri) null ? UriTemplate.RewriteUri(this.webHttpBehavior.HelpUri, WebOperationContext.Current.IncomingRequest.Headers[HttpRequestHeader.Host]) : (Uri) null;
      Message response = (Message) new HttpStreamMessage(!this.includeExceptionDetailInFaults ? (BodyWriter) StreamBodyWriter.CreateStreamBodyWriter((Action<Stream>) (s => HelpHtmlBuilder.CreateServerErrorPage(helpUri, (Exception) null).Save(s, SaveOptions.OmitDuplicateNamespaces))) : (BodyWriter) StreamBodyWriter.CreateStreamBodyWriter((Action<Stream>) (s => HelpHtmlBuilder.CreateServerErrorPage(helpUri, error).Save(s, SaveOptions.OmitDuplicateNamespaces))));
      response.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.RawProperty);
      HttpResponseMessageProperty responseProperty = WebErrorHandler.GetResponseProperty(WebOperationContext.Current, response);
      if (!responseProperty.HasStatusCodeBeenSet)
        responseProperty.StatusCode = HttpStatusCode.BadRequest;
      responseProperty.Headers[HttpResponseHeader.ContentType] = "text/html";
      return response;
    }

    private static HttpResponseMessageProperty GetResponseProperty(
      WebOperationContext currentContext,
      Message response)
    {
      HttpResponseMessageProperty property;
      if (currentContext != null)
      {
        property = currentContext.OutgoingResponse.MessageProperty;
      }
      else
      {
        property = new HttpResponseMessageProperty();
        response.Properties.Add(HttpResponseMessageProperty.Name, (object) property);
      }
      return property;
    }
  }
}
