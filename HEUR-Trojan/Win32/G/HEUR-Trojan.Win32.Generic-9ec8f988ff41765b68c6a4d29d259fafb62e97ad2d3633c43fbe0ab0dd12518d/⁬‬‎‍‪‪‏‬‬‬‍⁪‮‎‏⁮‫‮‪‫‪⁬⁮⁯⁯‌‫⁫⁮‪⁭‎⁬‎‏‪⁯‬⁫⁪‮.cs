// Decompiled with JetBrains decompiler
// Type: ⁬‬‎‍‪‪‏‬‬‬‍⁪‮‎‏⁮‫‮‪‫‪⁬⁮⁯⁯‌‫⁫⁮‪⁭‎⁬‎‏‪⁯‬⁫⁪‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections;

public class \u206C‬‎‍‪‪‏‬‬‬‍⁪‮‎‏⁮‫‮‪‫‪⁬⁮⁯⁯‌‫⁫⁮‪⁭‎⁬‎‏‪⁯‬⁫⁪‮ : IEnumerable, ICollection, IDictionary
{
  internal readonly IDictionary \u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮ = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u206D‬⁫‏‮‎‪‏‫⁪⁬⁭‭⁯⁯‎‫‪⁫‫⁯‌⁯​⁬‍‍⁮‪⁫‮‫‎‬‌⁮‎⁪‎‬‮();
  internal readonly IList \u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮ = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();

  public virtual void Add(object k, object v)
  {
    this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮.Add(k, v);
    this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮.Add(k);
  }

  public virtual void Clear()
  {
    this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮.Clear();
    this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮.Clear();
  }

  public virtual bool Contains(object k) => this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮.Contains(k);

  public virtual void CopyTo(Array array, int index)
  {
    foreach (object key in (IEnumerable) this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮)
      array.SetValue(this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮[key], index++);
  }

  public virtual int Count => this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮.Count;

  IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

  public virtual IDictionaryEnumerator GetEnumerator() => (IDictionaryEnumerator) new \u202D‍‭‮‍‫‮‍‎‫⁫‍‮‪‫‌​‪‬‌⁪​⁬‌‎‮‫⁮‫⁯‮‌⁬⁭⁬‬‬‮​‬‮(this);

  public virtual void Remove(object k)
  {
    this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮.Remove(k);
    this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮.Remove(k);
  }

  public virtual bool IsFixedSize => false;

  public virtual bool IsReadOnly => false;

  public virtual bool IsSynchronized => false;

  public virtual object SyncRoot => (object) false;

  public virtual ICollection Keys => (ICollection) \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮((ICollection) this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮);

  public virtual ICollection Values
  {
    get
    {
      IList values = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮(this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮.Count);
      foreach (object key in (IEnumerable) this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮)
        values.Add(this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮[key]);
      return (ICollection) values;
    }
  }

  public virtual object this[object k]
  {
    get => this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮[k];
    set
    {
      if (!this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮.Contains(k))
        this.\u202B⁯⁮⁮⁭‭‭⁪⁮‮⁯⁬‌⁪‮⁯‏‮‏​‏‫‌⁪‎⁮‮‌‭‬⁮⁮⁫⁪‌‌‍‫⁮‏‮.Add(k);
      this.\u200F⁯‏⁭⁭⁪‭⁬‬‎‍⁭‬⁯‭‏‎‎⁪‬‭⁪⁬⁫‏⁪​⁯⁪⁭‭‬‫⁮‌‏‪⁯‭‎‮[k] = value;
    }
  }
}
