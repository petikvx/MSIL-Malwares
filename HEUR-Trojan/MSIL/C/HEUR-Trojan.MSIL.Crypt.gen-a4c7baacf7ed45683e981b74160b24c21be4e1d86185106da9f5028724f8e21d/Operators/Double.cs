// Decompiled with JetBrains decompiler
// Type: GenericMath.Operators.Double
// Assembly: Yu77, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CEBE5E3D-11C5-45E0-97BE-FD3217A3B672
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-a4c7baacf7ed45683e981b74160b24c21be4e1d86185106da9f5028724f8e21d.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace GenericMath.Operators
{
  [StandardModule]
  [HideModuleName]
  internal sealed class Double
  {
    private static double IntegerDivide(double L, double R) => (double) (checked ((long) Math.Round(L)) / checked ((long) Math.Round(R)));

    internal static void Initialize()
    {
      Func<double, double> func1;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func1 = Double._Closure\u0024__.\u0024I1\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D0 = func1 = (Func<double, double>) (V => V);
      }
      Arithmetic<double>.UnaryPlus = func1;
      Func<double, double> func2;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D1 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func2 = Double._Closure\u0024__.\u0024I1\u002D1;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D1 = func2 = (Func<double, double>) (V => -V);
      }
      Arithmetic<double>.UnaryMinus = func2;
      Func<double, double, double> func3;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D2 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func3 = Double._Closure\u0024__.\u0024I1\u002D2;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D2 = func3 = (Func<double, double, double>) ((L, R) => L + R);
      }
      Arithmetic<double>.Add = func3;
      Func<double, double, double> func4;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D3 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func4 = Double._Closure\u0024__.\u0024I1\u002D3;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D3 = func4 = (Func<double, double, double>) ((L, R) => L - R);
      }
      Arithmetic<double>.Subtract = func4;
      Func<double, double, double> func5;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D4 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func5 = Double._Closure\u0024__.\u0024I1\u002D4;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D4 = func5 = (Func<double, double, double>) ((L, R) => L * R);
      }
      Arithmetic<double>.Multiply = func5;
      Func<double, double, double> func6;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D5 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func6 = Double._Closure\u0024__.\u0024I1\u002D5;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D5 = func6 = (Func<double, double, double>) ((L, R) => L / R);
      }
      Arithmetic<double>.Divide = func6;
      Func<double, double, double> func7;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D6 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func7 = Double._Closure\u0024__.\u0024I1\u002D6;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D6 = func7 = (Func<double, double, double>) ((L, R) => Math.Pow(L, R));
      }
      Arithmetic<double>.Power = func7;
      Arithmetic<double>.IntegerDivide = new Func<double, double, double>(Double.IntegerDivide);
      Func<double, double, double> func8;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D7 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func8 = Double._Closure\u0024__.\u0024I1\u002D7;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D7 = func8 = (Func<double, double, double>) ((L, R) => L % R);
      }
      Arithmetic<double>.Modulus = func8;
      Func<double, double, bool> func9;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D8 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func9 = Double._Closure\u0024__.\u0024I1\u002D8;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D8 = func9 = (Func<double, double, bool>) ((L, R) => L == R);
      }
      Arithmetic<double>.Equal = func9;
      Func<double, double, bool> func10;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D9 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func10 = Double._Closure\u0024__.\u0024I1\u002D9;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D9 = func10 = (Func<double, double, bool>) ((L, R) => L != R);
      }
      Arithmetic<double>.NotEqual = func10;
      Func<double, double, bool> func11;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D10 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func11 = Double._Closure\u0024__.\u0024I1\u002D10;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D10 = func11 = (Func<double, double, bool>) ((L, R) => L < R);
      }
      Arithmetic<double>.LessThan = func11;
      Func<double, double, bool> func12;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D11 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func12 = Double._Closure\u0024__.\u0024I1\u002D11;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D11 = func12 = (Func<double, double, bool>) ((L, R) => L <= R);
      }
      Arithmetic<double>.LessThanEqual = func12;
      Func<double, double, bool> func13;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D12 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func13 = Double._Closure\u0024__.\u0024I1\u002D12;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D12 = func13 = (Func<double, double, bool>) ((L, R) => L > R);
      }
      Arithmetic<double>.MoreThan = func13;
      Func<double, double, bool> func14;
      // ISSUE: reference to a compiler-generated field
      if (Double._Closure\u0024__.\u0024I1\u002D13 != null)
      {
        // ISSUE: reference to a compiler-generated field
        func14 = Double._Closure\u0024__.\u0024I1\u002D13;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Double._Closure\u0024__.\u0024I1\u002D13 = func14 = (Func<double, double, bool>) ((L, R) => L >= R);
      }
      Arithmetic<double>.MoreThanEqual = func14;
    }
  }
}
