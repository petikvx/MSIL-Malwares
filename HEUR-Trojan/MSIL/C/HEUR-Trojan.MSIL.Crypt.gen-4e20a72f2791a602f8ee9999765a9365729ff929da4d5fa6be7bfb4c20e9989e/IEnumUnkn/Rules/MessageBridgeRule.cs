// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Rules.MessageBridgeRule
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Attributes;
using IEnumUnkn.Candidates;
using IEnumUnkn.Collections;
using IEnumUnkn.Definitions;
using IEnumUnkn.Mappers;
using IEnumUnkn.Structs;
using RiskGame;
using RiskGame.Maps;
using RiskGame.Resolver;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;

namespace IEnumUnkn.Rules
{
  public class MessageBridgeRule : Window, IComponentConnector, IStyleConnector
  {
    private List<Player> m_Printer;
    private Human _Test;
    private bool _Writer;
    private bool reponse;
    internal StackPanel panel_MainUI;
    internal TextBox txtRegName;
    internal PasswordBox txtRegPass;
    internal TextBox txtRegPassShow;
    internal Button btnRegPassToggle;
    internal CheckBox chkRegPass;
    internal PasswordBox txtRegPassConf;
    internal TextBox txtRegPassConfShow;
    internal CheckBox chkRegPassConf;
    internal TextBox txtLogName;
    internal PasswordBox txtLogPass;
    internal TextBox txtLogPassShow;
    internal CheckBox chkLogPass;
    internal Label lblError;
    internal TextBlock txtError;
    internal Label lblSuccess;
    internal TextBlock txtSuccess;
    internal DockPanel panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool m_Role;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Writer;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        if (MessageBridgeRule.DisableObject())
          goto label_17;
label_1:
        bool flag = this.m_Printer.Count != 0;
        num1 = 2;
label_17:
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              if (flag)
              {
                num2 = 4;
                goto label_16;
              }
              else
                break;
            case 4:
              try
              {
                ((Human) this.m_Printer[0]).m_Item = value;
                int num3 = 2;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 2:
                      goto label_8;
                    case 1:
                    case 3:
                      goto label_13;
                    default:
                      num3 = 3;
                      continue;
                  }
                }
label_8:
                Human.TestRequest(this.m_Printer[0] as Human);
              }
              catch
              {
                this.ConnectField("An error has occurred. Your music preferences have not been saved.");
              }
label_13:
              break;
            case 5:
            case 6:
label_6:
              this._Writer = value;
              num1 = 7;
              continue;
            case 7:
              goto label_11;
            default:
              if (MessageBridgeRule.DisableObject())
              {
                num1 = 5;
                continue;
              }
              goto label_19;
          }
          if (!value)
          {
            if (!value)
            {
              this.mediaplayer.Pause();
              num2 = 6;
            }
            else
              goto label_6;
          }
          else
          {
            this.mediaplayer.Play();
            goto label_6;
          }
label_16:
          num1 = num2;
        }
label_11:
        return;
label_19:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.reponse;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        if (true)
          goto label_3;
label_1:
        bool flag = this.m_Printer.Count != 0;
        if (true)
        {
          num1 = 2;
          goto label_3;
        }
label_2:
        if (!flag)
          goto label_12;
        else
          goto label_5;
label_3:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              goto label_2;
            case 4:
              goto label_5;
            case 5:
              goto label_13;
            default:
              if (MessageBridgeRule.DisableObject())
              {
                num1 = 4;
                continue;
              }
              goto label_5;
          }
        }
label_13:
        return;
label_5:
        try
        {
          ((Human) this.m_Printer[0]).wrapper = value;
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
              case 3:
                goto label_11;
              default:
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_11;
            }
          }
label_7:
          Human.TestRequest(this.m_Printer[0] as Human);
        }
        catch
        {
          this.ConnectField("An error has occurred. Your music preferences have not been saved.");
        }
label_11:
label_12:
        this.reponse = value;
        int num3 = 5;
        num1 = MessageBridgeRule.ValidateObject() ? num3 : num3;
        goto label_3;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public MessageBridgeRule(bool isres, bool ispol, bool verifycomp)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            ListenerManager.InitStub();
            num1 = 1;
            continue;
          case 1:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 2:
          case 4:
            this.m_Printer = new List<Player>();
            this.DeleteField(isres, ispol, verifycomp);
            num2 = 5;
            break;
          case 5:
            goto label_7;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public MessageBridgeRule(List<Player> item, bool outputcol)
    {
      ListenerManager.InitStub();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.m_Printer = item;
      this.DeleteField(((Human) this.m_Printer[0]).m_Item, ((Human) this.m_Printer[0]).wrapper, outputcol);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteField(bool containsparam, bool evaluatepred, bool iscomp)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              this.InitializeComponent();
              if (!MessageBridgeRule.ValidateObject())
              {
                num2 = 6;
                continue;
              }
              goto label_2;
            case 1:
            case 6:
              AdapterGetterCandidate.PrintMapper();
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_12;
            case 3:
              goto label_7;
            case 4:
              goto label_3;
            case 5:
              goto label_2;
            case 7:
              goto label_12;
            default:
              num2 = 4;
              continue;
          }
        }
label_2:
        ((StubServiceMapper) Application.Current).ConnectRequest((Window) this);
        ((StubServiceMapper) Application.Current).InitRequest((Window) this);
        num1 = 7;
        continue;
label_3:
        this.Hints_enabled = evaluatepred;
        if (this._Writer)
          this.mediaplayer.Play();
        if (iscomp)
        {
          num1 = 5;
          continue;
        }
        break;
label_7:
        this.StateChanged += new EventHandler(((StubServiceMapper) Application.Current).CalcRequest);
        this.DataContext = (object) this;
        this.Music_enabled = containsparam;
        goto label_3;
      }
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConnectField(string init)
    {
      this.txtError.Text = init;
      this.lblError.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StopField(string def)
    {
      this.txtSuccess.Text = def;
      this.lblSuccess.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Login(object sender, RoutedEventArgs e)
    {
      try
      {
        this.lblError.Visibility = Visibility.Collapsed;
        this._Test = Human.FlushRequest(this.txtLogName.Text, this.txtLogPass.Password);
        if (this.m_Printer.Contains((Player) this._Test))
        {
          this.ConnectField("This player is already signed in");
        }
        else
        {
          this.m_Printer.Add((Player) this._Test);
          CreatorStructDef creatorStructDef = new CreatorStructDef(this.m_Printer, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
          Application.Current.MainWindow = (Window) creatorStructDef;
          this.Close();
          creatorStructDef.Show();
        }
      }
      catch (ArgumentNullException ex)
      {
        this.ConnectField("Please enter a username and password.");
      }
      catch (ListBridgeRule ex)
      {
        this.ConnectField(ex.Message);
      }
      catch (Publisher ex)
      {
        this.ConnectField(ex.Message);
      }
      catch (IOException ex)
      {
        this.ConnectField("An error reading or writing from the file has occurred. Please ensure you have registered an account or delete the Usersaves.txt file in the game directory.");
      }
      catch (Exception ex)
      {
        this.ConnectField("An unknown error has occurred.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Register(object sender, RoutedEventArgs e)
    {
      try
      {
        this.lblError.Visibility = Visibility.Collapsed;
        this.lblSuccess.Visibility = Visibility.Collapsed;
        if (this.txtRegName.Text == null || this.txtRegPass.Password == null || this.txtRegPassConf.Password == null || this.txtRegName.Text == "" || this.txtRegPass.Password == "" || this.txtRegPassConf.Password == "")
          throw new ArgumentNullException();
        if (this.txtRegPass.Password == this.txtRegPassConf.Password)
        {
          Human.Register(this.txtRegName.Text, this.txtRegPass.Password, this._Writer, this.reponse);
          this.StopField("Registration successful. Click login to continue.");
          this.txtLogName.Text = this.txtRegName.Text;
          this.txtLogPass.Password = this.txtRegPass.Password;
          this.Login(sender, e);
        }
        else
          this.ConnectField("Passwords do not match");
      }
      catch (Template ex)
      {
        this.ConnectField(ex._CustomerManager);
      }
      catch (IOException ex)
      {
        this.ConnectField("An error reading or writing from the file has occurred. Please try again or delete the Usersaves.txt file in the game directory.");
      }
      catch (ArgumentNullException ex)
      {
        this.ConnectField("Please provide an input for every field.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VisitField(object info, KeyEventArgs col)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              this.Register(info, (RoutedEventArgs) col);
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_7;
            case 1:
            case 3:
              if (!flag)
                goto label_2;
              else
                goto case 0;
            case 4:
              goto label_7;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto case 0;
          }
        }
label_7:
        flag = col.Key == Key.Return;
        num1 = 3;
      }
label_2:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintField(object asset, KeyEventArgs attr)
    {
      int num1 = 3;
      if (!MessageBridgeRule.ValidateObject())
        goto label_3;
label_1:
      bool flag = attr.Key == Key.Return;
      num1 = 1;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
            if (!flag)
              goto label_5;
            else
              goto case 2;
          case 2:
          case 4:
            this.Login(asset, (RoutedEventArgs) attr);
            if (!MessageBridgeRule.ValidateObject())
            {
              num1 = 5;
              continue;
            }
            goto label_7;
          case 5:
            goto label_7;
          default:
            int num2 = 4;
            num1 = MessageBridgeRule.ValidateObject() ? num2 : num2;
            continue;
        }
      }
label_5:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NewField(object key, RoutedEventArgs map)
    {
      int num1 = 2;
      if (MessageBridgeRule.DisableObject())
        goto label_9;
label_1:
      TextBox textBox;
      textBox.Visibility = Visibility.Collapsed;
      int num2 = 10;
label_8:
      num1 = num2;
label_9:
      CheckBox checkBox;
      string name;
      PasswordBox passwordBox;
      bool? isChecked;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 7:
            goto label_1;
          case 1:
            if (name == "chkLogPass")
              goto label_18;
            else
              goto case 4;
          case 2:
            goto label_12;
          case 3:
          case 6:
            goto label_5;
          case 4:
            isChecked = checkBox.IsChecked;
            goto case 5;
          case 5:
            bool flag = true;
            if (!(isChecked.GetValueOrDefault() == flag & isChecked.HasValue))
            {
              passwordBox.Password = textBox.Text;
              passwordBox.Visibility = Visibility.Visible;
              int num3 = 0;
              num1 = MessageBridgeRule.ValidateObject() ? num3 : num3;
              continue;
            }
            textBox.Text = passwordBox.Password;
            passwordBox.Visibility = Visibility.Collapsed;
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 1;
          case 8:
            passwordBox = new PasswordBox();
            if (!MessageBridgeRule.ValidateObject())
            {
              num1 = 9;
              continue;
            }
            goto label_12;
          case 9:
            textBox = new TextBox();
            name = checkBox.Name;
            if (!(name == "chkRegPass"))
            {
              if (!(name == "chkRegPassConf"))
              {
                if (true)
                {
                  num1 = 1;
                  continue;
                }
                goto label_5;
              }
              else
              {
                passwordBox = this.txtRegPassConf;
                textBox = this.txtRegPassConfShow;
                goto case 4;
              }
            }
            else
            {
              passwordBox = this.txtRegPass;
              textBox = this.txtRegPassShow;
              goto case 4;
            }
          case 10:
            goto label_19;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 8;
        }
      }
label_5:
      textBox.Visibility = Visibility.Visible;
      return;
label_12:
      checkBox = (CheckBox) key;
      num2 = 8;
      goto label_8;
label_18:
      passwordBox = this.txtLogPass;
      textBox = this.txtLogPassShow;
      num2 = 4;
      goto label_8;
label_19:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Leaderboard(object sender, RoutedEventArgs e)
    {
      int num = 5;
      if (true)
        goto label_3;
label_1:
label_2:
      StateCallbackCollection callbackCollection;
      Application.Current.MainWindow = (Window) callbackCollection;
      goto label_6;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            goto label_7;
          case 2:
          case 4:
            goto label_1;
          case 3:
            goto label_6;
          case 5:
            callbackCollection = new StateCallbackCollection(this.Music_enabled, this.Hints_enabled, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
            num = 0;
            continue;
          case 6:
            goto label_11;
          default:
            if (!MessageBridgeRule.ValidateObject())
            {
              num = 3;
              continue;
            }
            goto case 5;
        }
      }
label_11:
      return;
label_6:
      this.Close();
      callbackCollection.Show();
      if (true)
      {
        num = 6;
        goto label_3;
      }
label_7:
      if (this.m_Printer.Count > 0)
      {
        callbackCollection = new StateCallbackCollection(this.m_Printer, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
        if (false)
          return;
        num = 4;
        goto label_3;
      }
      else
        goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetField(object value, RoutedEventArgs map)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        Candidate candidate;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag1 = false;
              num2 = 1;
              continue;
            case 1:
              foreach (Window window in Application.Current.Windows)
              {
                int num3 = 2;
                if (true)
                  goto label_7;
label_5:
                bool flag2 = window is Candidate;
                goto label_9;
label_6:
                int num4;
                num3 = num4;
label_7:
                switch (num3)
                {
                  case 0:
                  case 2:
                    goto label_5;
                  case 1:
                  case 3:
                    break;
                  case 4:
                    goto label_15;
                  default:
                    num4 = 3;
                    goto label_6;
                }
label_9:
                if (flag2)
                {
                  flag1 = true;
                  num4 = 4;
                  goto label_6;
                }
              }
label_15:
              if (!flag1)
              {
                if (!MessageBridgeRule.ValidateObject())
                {
                  num2 = 5;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_22;
            case 2:
            case 5:
              if (this.txtLogName.Text == null)
              {
                candidate = new Candidate();
                goto case 4;
              }
              else
                goto label_1;
            case 4:
              candidate.Show();
              num2 = 7;
              continue;
            case 6:
              goto label_1;
            case 7:
              goto label_25;
            default:
              goto label_21;
          }
        }
label_1:
        candidate = new Candidate(this.txtLogName.Text);
        num1 = 4;
        continue;
label_21:
        num1 = 6;
      }
label_22:
      return;
label_25:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrepareField(object v, CancelEventArgs pred)
    {
      foreach (Window window in Application.Current.Windows)
      {
        int num = 3;
        if (MessageBridgeRule.ValidateObject())
          ;
        bool flag;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 3:
              flag = window is Candidate;
              goto case 1;
            case 1:
            case 2:
              if (flag)
              {
                window.Close();
                num = 4;
                continue;
              }
              goto label_9;
            case 4:
              goto label_8;
            default:
              if (true)
              {
                num = 2;
                continue;
              }
              goto label_8;
          }
        }
label_8:
label_9:;
      }
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool role;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (role)
              {
                num2 = 5;
                continue;
              }
              goto label_1;
            case 1:
              goto label_8;
            case 2:
              goto label_10;
            case 3:
            case 4:
              goto label_5;
            case 5:
              goto label_11;
            case 6:
              goto label_9;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
        this.m_Role = true;
        Uri resourceLocator = new Uri("/IEnumUnkn;component/mainmenu.xaml", UriKind.Relative);
label_5:
        Application.LoadComponent((object) this, resourceLocator);
        num1 = 6;
        continue;
label_8:
        role = this.m_Role;
        num1 = 0;
      }
label_10:
      return;
label_11:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int ioffset, object cont)
    {
      int num1 = 12;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_14;
            case 1:
              goto label_4;
            case 2:
              goto label_1;
            case 3:
              goto label_42;
            case 4:
              goto label_43;
            case 5:
              goto label_44;
            case 6:
              switch (num3)
              {
                case 1:
                  goto label_2;
                case 2:
                  goto label_3;
                case 3:
                case 13:
                  goto label_35;
                case 4:
                  goto label_20;
                case 5:
                  goto label_15;
                case 6:
                  goto label_16;
                case 7:
                  this.btnRegPassToggle = (Button) cont;
                  if (!MessageBridgeRule.ValidateObject())
                  {
                    num2 = 4;
                    continue;
                  }
                  goto label_18;
                case 8:
                  goto label_21;
                case 9:
                  goto label_5;
                case 10:
                  goto label_6;
                case 11:
                  goto label_7;
                case 12:
                  goto label_8;
                case 14:
                  goto label_9;
                case 15:
                  goto label_10;
                case 16:
                  goto label_19;
                case 17:
                  goto label_27;
                case 18:
                  goto label_28;
                case 19:
                  goto label_29;
                case 20:
                  ((ButtonBase) cont).Click += new RoutedEventHandler(this.Leaderboard);
                  num2 = 5;
                  continue;
                case 21:
                  goto label_36;
                case 22:
                  goto label_37;
                case 23:
                  goto label_38;
                case 24:
                  goto label_39;
                case 25:
                  goto label_40;
                case 26:
                  goto label_41;
                case 27:
                  goto label_30;
                case 28:
                  goto label_31;
                case 29:
                  goto label_32;
                case 30:
                  goto label_33;
                case 31:
                  goto label_34;
                default:
                  if (true)
                  {
                    num2 = 7;
                    continue;
                  }
                  goto label_25;
              }
            case 7:
              goto label_35;
            case 8:
              goto label_45;
            case 9:
              goto label_46;
            case 10:
              goto label_47;
            case 11:
              goto label_48;
            case 12:
              num3 = ioffset;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 6;
            case 13:
              goto label_49;
            case 14:
              goto label_50;
            default:
              goto label_13;
          }
        }
label_3:
        this.panel_MainUI = (StackPanel) cont;
        num1 = 2;
        continue;
label_13:
        num1 = 10;
        continue;
label_19:
        this.txtLogPassShow = (TextBox) cont;
        this.txtLogPassShow.KeyDown += new KeyEventHandler(this.PrintField);
        num1 = 13;
        continue;
label_20:
        this.txtRegName = (TextBox) cont;
        num1 = 0;
        continue;
label_21:
        this.chkRegPass = (CheckBox) cont;
        num1 = 1;
        continue;
label_29:
        ((ButtonBase) cont).Click += new RoutedEventHandler(this.ResetField);
        num1 = 9;
        continue;
label_35:
        this.m_Role = true;
        num1 = 14;
        continue;
label_41:
        this.lblMediaDetails = (Label) cont;
        num1 = 8;
      }
label_2:
      ((Window) cont).Closing += new CancelEventHandler(this.PrepareField);
      return;
label_4:
      this.chkRegPass.Click += new RoutedEventHandler(this.NewField);
      return;
label_5:
      this.txtRegPassConf = (PasswordBox) cont;
      this.txtRegPassConf.KeyDown += new KeyEventHandler(this.VisitField);
      return;
label_6:
      this.txtRegPassConfShow = (TextBox) cont;
      this.txtRegPassConfShow.KeyDown += new KeyEventHandler(this.VisitField);
      return;
label_7:
      this.chkRegPassConf = (CheckBox) cont;
      this.chkRegPassConf.Click += new RoutedEventHandler(this.NewField);
      return;
label_8:
      ((ButtonBase) cont).Click += new RoutedEventHandler(this.Register);
      return;
label_9:
      this.txtLogName = (TextBox) cont;
      this.txtLogName.KeyDown += new KeyEventHandler(this.PrintField);
      return;
label_10:
      this.txtLogPass = (PasswordBox) cont;
      this.txtLogPass.KeyDown += new KeyEventHandler(this.PrintField);
      return;
label_45:
      return;
label_46:
      return;
label_43:
      return;
label_48:
      return;
label_49:
      return;
label_50:
      return;
label_42:
      return;
label_1:
      return;
label_44:
      return;
label_47:
      return;
label_14:
      this.txtRegName.KeyDown += new KeyEventHandler(this.VisitField);
      return;
label_15:
      this.txtRegPass = (PasswordBox) cont;
      this.txtRegPass.KeyDown += new KeyEventHandler(this.VisitField);
      return;
label_16:
      this.txtRegPassShow = (TextBox) cont;
      this.txtRegPassShow.KeyDown += new KeyEventHandler(this.VisitField);
      return;
label_18:
      return;
label_25:
      return;
label_27:
      this.chkLogPass = (CheckBox) cont;
      this.chkLogPass.Click += new RoutedEventHandler(this.NewField);
      return;
label_28:
      ((ButtonBase) cont).Click += new RoutedEventHandler(this.Login);
      return;
label_30:
      this.mediaplayer = (MediaElement) cont;
      return;
label_31:
      this.slider_Volume = (Slider) cont;
      return;
label_32:
      this.chkMusicEnabled = (CheckBox) cont;
      return;
label_33:
      this.chkFullscreen = (CheckBox) cont;
      return;
label_34:
      this.chkHints = (CheckBox) cont;
      return;
label_36:
      this.lblError = (Label) cont;
      return;
label_37:
      this.txtError = (TextBlock) cont;
      return;
label_38:
      this.lblSuccess = (Label) cont;
      return;
label_39:
      this.txtSuccess = (TextBlock) cont;
      return;
label_40:
      this.panel_Settings = (DockPanel) cont;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int mean_item, object connection)
    {
      int num1 = 5;
      EventSetter eventSetter;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              eventSetter.Event = UIElement.KeyDownEvent;
              eventSetter.Handler = (Delegate) new KeyEventHandler(this.PrintField);
              ((Style) connection).Setters.Add((SetterBase) eventSetter);
              num2 = 7;
              continue;
            case 1:
              switch (num3)
              {
                case 3:
                  goto label_8;
                case 13:
                  eventSetter = new EventSetter();
                  num2 = 0;
                  continue;
                default:
                  goto label_3;
              }
            case 2:
              goto label_7;
            case 3:
            case 6:
              goto label_5;
            case 5:
              num3 = mean_item;
              num2 = 1;
              continue;
            case 7:
              goto label_2;
            default:
              goto label_11;
          }
        }
label_3:
        num1 = 2;
        continue;
label_11:
        num1 = 6;
      }
label_5:
      eventSetter.Event = UIElement.KeyDownEvent;
      eventSetter.Handler = (Delegate) new KeyEventHandler(this.VisitField);
      ((Style) connection).Setters.Add((SetterBase) eventSetter);
      return;
label_8:
      eventSetter = new EventSetter();
      goto label_5;
label_7:
      return;
label_2:;
    }

    internal static bool DisableObject() => true;

    internal static bool ValidateObject() => false;
  }
}
