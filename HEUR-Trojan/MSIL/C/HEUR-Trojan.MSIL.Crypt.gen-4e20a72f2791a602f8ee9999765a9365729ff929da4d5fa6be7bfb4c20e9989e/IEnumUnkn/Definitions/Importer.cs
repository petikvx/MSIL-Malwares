// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Definitions.Importer
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization.Formatters.Binary;

namespace IEnumUnkn.Definitions
{
  [Serializable]
  public class Importer : IComparable<Importer>
  {
    private static readonly string _Producer;
    private readonly string m_Watcher;
    private string interpreter;
    private readonly string m_Product;
    private readonly string singleton;
    private readonly string _Method;
    private readonly string m_Context;
    private readonly string comparator;
    private readonly string value;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Importer(
      string ident,
      string b,
      string rule,
      string ident2,
      string ord3,
      string value4,
      string config5)
    {
      ListenerManager.InitStub();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.interpreter = ident ?? throw new ArgumentNullException("lastsave");
      this.m_Product = b ?? throw new ArgumentNullException("player");
      this.singleton = rule ?? throw new ArgumentNullException("noPlayers");
      this._Method = ident2 ?? throw new ArgumentNullException("score");
      this.m_Context = ord3 ?? throw new ArgumentNullException("turns");
      this.comparator = value4 ?? throw new ArgumentNullException("map");
      this.value = config5 ?? throw new ArgumentNullException("gamemode");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Importer(string res, string second, string role, string res2, string col3)
    {
      ListenerManager.InitStub();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.interpreter = res ?? throw new ArgumentNullException("lastsave");
      this.m_Product = second ?? throw new ArgumentNullException("player");
      this.comparator = role ?? throw new ArgumentNullException("map");
      this.value = res2 ?? throw new ArgumentNullException("gamemode");
      this.m_Watcher = col3 ?? throw new ArgumentNullException("gameID");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void SortMapper(Importer last)
    {
      int num1 = 3;
      FileStream fileStream;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              fileStream = new FileStream(Importer._Producer, FileMode.OpenOrCreate);
              num2 = 2;
              continue;
            case 1:
            case 2:
              goto label_1;
            case 4:
              goto label_10;
            default:
              goto label_8;
          }
        }
label_8:
        num1 = 4;
      }
label_1:
      try
      {
      }
      finally
      {
        fileStream?.Dispose();
      }
      FileStream serializationStream = new FileStream(Importer._Producer, FileMode.Append);
label_10:
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        int num3 = 2;
        while (true)
        {
          int num4 = num3;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                last.interpreter = DateTime.Now.ToString("g");
                goto case 1;
              case 1:
              case 3:
                binaryFormatter.Serialize((Stream) serializationStream, (object) last);
                num4 = 4;
                continue;
              case 4:
                goto label_16;
              default:
                goto label_15;
            }
          }
label_15:
          num3 = 3;
        }
label_16:;
      }
      finally
      {
        serializationStream?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ObservableCollection<Importer> ResolveMapper()
    {
      List<Importer> list = new List<Importer>();
      if (File.Exists(Importer._Producer))
      {
        using (Stream serializationStream = (Stream) new FileStream(Importer._Producer, FileMode.Open))
        {
          BinaryFormatter binaryFormatter = new BinaryFormatter();
          while (serializationStream.Position < serializationStream.Length)
          {
            Importer importer = (Importer) binaryFormatter.Deserialize(serializationStream);
            list.Add(importer);
          }
        }
      }
      list.Sort();
      return new ObservableCollection<Importer>(list);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CompareTo(Importer instance) => int.Parse(instance._Method).CompareTo(int.Parse(this._Method));

    public string NoPlayers
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.singleton;
    }

    public string Player
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Product;
    }

    public string LastSave
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.interpreter;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string AwakeMapper() => this.m_Watcher;

    public string Score
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Method;
    }

    public string Map
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.comparator;
    }

    public string Gamemode
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.value;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static Importer()
    {
      ListenerManager.InitStub();
      Importer._Producer = "Leaderboard.bin";
    }

    internal static bool GetObject() => true;

    internal static bool RegisterObject() => false;
  }
}
