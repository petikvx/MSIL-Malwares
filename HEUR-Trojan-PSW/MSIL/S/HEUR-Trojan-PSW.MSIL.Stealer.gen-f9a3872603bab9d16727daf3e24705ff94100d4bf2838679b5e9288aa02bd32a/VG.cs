// Decompiled with JetBrains decompiler
// Type: ib.VG
// Assembly: ContingentPropert, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10450B75-DDB2-42D8-896D-5D92C0FA5DAE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9a3872603bab9d16727daf3e24705ff94100d4bf2838679b5e9288aa02bd32a.exe

using System.Collections.Generic;
using System.Linq;

namespace ib
{
  public struct VG
  {
    internal SortedList<int, int> WRT;
    internal static object yI;

    private void o3(string _param1, int _param2, int _param3, ref int _param4, out int _param5)
    {
      _param5 = 2;
      int key = _param2 + 1;
      while (key <= _param3)
      {
        while (_param1[key - 1] == '\n')
        {
          this.WRT[key] = ++_param4;
          int num1 = 0;
          if (!VG.Vo())
            goto label_8;
label_1:
          switch (num1)
          {
            case 1:
              continue;
            default:
              _param5 = 1;
              goto label_5;
          }
label_8:
          int num2;
          num1 = num2;
          goto label_1;
        }
label_5:
        ++key;
        ++_param5;
      }
      --_param5;
    }

    public void Lz(string _param1, int _param2, out int _param3, out int _param4)
    {
      int num1 = 4;
label_1:
      int num2 = num1;
      int num3;
      KeyValuePair<int, int> keyValuePair;
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num2)
        {
          case 1:
            if (!flag2)
            {
              flag1 = keyValuePair.Key < _param2;
              num2 = 2;
              continue;
            }
            goto label_9;
          case 2:
            if (!flag1)
            {
              --num3;
              goto case 3;
            }
            else
            {
              _param3 = keyValuePair.Value;
              if (VG.Vo())
              {
                num2 = 0;
                continue;
              }
              goto label_1;
            }
          case 3:
            if (num3 > 0)
            {
              keyValuePair = this.WRT.ElementAt<KeyValuePair<int, int>>(num3 - 1);
              flag2 = keyValuePair.Key == _param2;
              if (VG.Xp() == null)
              {
                num2 = 1;
                continue;
              }
              goto label_1;
            }
            else
              goto label_15;
          case 4:
            num3 = this.WRT.Count<KeyValuePair<int, int>>();
            num2 = !VG.Vo() ? 3 : 3;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.o3(_param1, keyValuePair.Key, _param2, ref _param3, out _param4);
      return;
label_9:
      _param3 = keyValuePair.Value;
      _param4 = 1;
      return;
label_15:
      _param3 = 1;
      this.o3(_param1, 0, _param2, ref _param3, out _param4);
    }

    internal static bool Vo() => VG.yI == null;

    internal static object Xp() => VG.yI;
  }
}
