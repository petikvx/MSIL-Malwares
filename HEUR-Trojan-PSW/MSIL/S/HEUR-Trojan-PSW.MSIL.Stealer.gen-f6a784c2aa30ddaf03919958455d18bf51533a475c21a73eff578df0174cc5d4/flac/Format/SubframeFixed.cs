// Decompiled with JetBrains decompiler
// Type: flac.Format.SubframeFixed
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using flac.Utils;

namespace flac.Format
{
  public class SubframeFixed : Subframe
  {
    private Residual residual_;
    private int bitsPerSample_;
    private int predictorOrder_;

    public int Order => this.predictorOrder_;

    public void Read(
      FlacStream stream,
      FrameHeader frameHeader,
      int predictorOrder,
      int bitsPerSample)
    {
      this.bitsPerSample_ = bitsPerSample;
      this.predictorOrder_ = predictorOrder;
      uint[] numArray = Warmup.ReadSamples(stream, predictorOrder, this.bitsPerSample_);
      this.samples_ = new uint[frameHeader.BlockSize];
      int index = 0;
      foreach (uint num in numArray)
      {
        this.samples_[index] = num;
        ++index;
      }
      this.residual_ = new Residual();
      this.residual_.Read(stream, frameHeader.BlockSize, predictorOrder, ref this.samples_);
    }

    public override void Write(FlacStream stream)
    {
      this.Write_(stream);
      this.residual_.Write(stream, ref this.samples_);
    }

    public override void Write(FlacStream stream, int count)
    {
      this.Write_(stream);
      this.residual_.Write(stream, count, ref this.samples_);
    }

    private void Write_(FlacStream stream)
    {
      base.Write(stream);
      Warmup.WriteSamples(stream, this.samples_, this.bitsPerSample_, this.predictorOrder_);
    }

    public void DecodeSamples()
    {
      for (int order = this.Order; order < this.samples_.Length; ++order)
      {
        uint sample = this.samples_[order];
        switch (this.Order)
        {
          case 0:
            this.samples_[order] = sample;
            break;
          case 1:
            this.samples_[order] = this.samples_[order - 1] + sample;
            break;
          case 2:
            this.samples_[order] = this.samples_[order - 1] * 2U - this.samples_[order - 2] + sample;
            break;
          case 3:
            this.samples_[order] = (uint) ((int) this.samples_[order - 1] * 3 - (int) this.samples_[order - 2] * 3) + this.samples_[order - 3] + sample;
            break;
          case 4:
            this.samples_[order] = (uint) ((int) this.samples_[order - 1] * 4 - (int) this.samples_[order - 2] * 6 + 4 * (int) this.samples_[order - 3]) - this.samples_[order - 4] + sample;
            break;
        }
      }
    }

    public void EncodeSamples(int count)
    {
      int order = this.Order;
      for (int index = count; order < index; ++order)
      {
        uint num;
        switch (this.Order)
        {
          case 0:
            num = this.samples_[order];
            break;
          case 1:
            num = this.samples_[order] - this.samples_[order - 1];
            break;
          case 2:
            num = this.samples_[order] - (2U * this.samples_[order - 1] - this.samples_[order - 2]);
            break;
          case 3:
            num = this.samples_[order] - ((uint) (3 * (int) this.samples_[order - 1] - 3 * (int) this.samples_[order - 2]) + this.samples_[order - 3]);
            break;
          case 4:
            num = this.samples_[order] - ((uint) (4 * (int) this.samples_[order - 1] - 6 * (int) this.samples_[order - 2] + 4 * (int) this.samples_[order - 3]) - this.samples_[order - 4]);
            break;
          default:
            throw new FlacDebugException();
        }
        this.samples_[order] = num;
      }
    }
  }
}
