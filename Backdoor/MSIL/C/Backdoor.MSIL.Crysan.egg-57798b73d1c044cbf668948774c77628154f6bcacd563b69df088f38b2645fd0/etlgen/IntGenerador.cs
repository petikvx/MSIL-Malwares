// Decompiled with JetBrains decompiler
// Type: etlgen.IntGenerador
// Assembly: UCOMIEnumConnecti, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5D827560-3619-4F41-B7F7-70598092DF43
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.Crysan.egg-57798b73d1c044cbf668948774c77628154f6bcacd563b69df088f38b2645fd0.exe

using System;
using System.Xml;

namespace etlgen
{
  public class IntGenerador : ObjGenerador
  {
    private long min;
    private long max;
    private ulong paso;

    public IntGenerador()
    {
      this.entidad = this.id = "int";
      this.min = 0L;
      this.max = 1L;
      this.paso = 1UL;
    }

    public override object Generar(Random random) => (object) ((long) ((double) ((this.max - this.min) / (long) this.paso) * random.NextDouble() * (double) this.paso) + this.min);

    public override ObjGenerador Clonar()
    {
      IntGenerador intGenerador = new IntGenerador();
      intGenerador.entidad = this.entidad;
      intGenerador.id = intGenerador.id;
      intGenerador.min = this.min;
      intGenerador.max = this.max;
      intGenerador.paso = this.paso;
      return (ObjGenerador) intGenerador;
    }

    public override void Cargar(XmlTextReader reader, ETLConfig configuracion)
    {
      if (reader.NodeType != XmlNodeType.Element || reader.Name != this.entidad)
        this.ErrorEntidad(this.entidad);
      string id = (string) null;
      long num1 = -1;
      long num2 = -1;
      long num3 = -1;
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = false;
      while (reader.MoveToNextAttribute())
      {
        string name = reader.Name;
        if (!(name == "id"))
        {
          if (!(name == "min"))
          {
            if (!(name == "max"))
            {
              if (name == "paso")
              {
                num3 = long.Parse(reader.Value);
                flag3 = true;
              }
              else
                this.ErrorAtributo(this.entidad, reader.Name, reader.Value, reader.LineNumber);
            }
            else
            {
              num2 = long.Parse(reader.Value);
              flag2 = true;
            }
          }
          else
          {
            num1 = long.Parse(reader.Value);
            flag1 = true;
          }
        }
        else
          id = reader.Value;
      }
      if (id != null)
        this.id = id;
      if (flag1 & flag2)
      {
        if (num1 > num2)
        {
          this.ErrorValor(this.entidad, id, "max", num2.ToString());
        }
        else
        {
          this.min = num1;
          this.max = num2;
        }
      }
      else if (flag1)
      {
        if (num1 > this.max)
          this.ErrorValor(this.entidad, id, "min", num1.ToString());
        else
          this.min = num1;
      }
      else if (flag2)
      {
        if (this.min > num2)
          this.ErrorValor(this.entidad, id, "max", num2.ToString());
        else
          this.max = num2;
      }
      if (flag3 && num3 >= 0L)
      {
        this.paso = (ulong) (uint) num3;
      }
      else
      {
        if (!flag3)
          return;
        this.ErrorValor(this.entidad, id, "paso", num3.ToString());
      }
    }

    public override string ToString() => "<" + this.entidad + " id=\"" + this.id + "\" min=\"" + this.min.ToString() + "\" max=\"" + this.max.ToString() + "\" paso=\"" + this.paso.ToString() + "\" />";
  }
}
