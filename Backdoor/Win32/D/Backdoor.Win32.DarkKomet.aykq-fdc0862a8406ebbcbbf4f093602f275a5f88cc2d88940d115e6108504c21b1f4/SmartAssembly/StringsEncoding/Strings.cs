// Decompiled with JetBrains decompiler
// Type: SmartAssembly.StringsEncoding.Strings
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using SmartAssembly.Zip;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Text;

namespace SmartAssembly.StringsEncoding
{
  public sealed class Strings
  {
    private static readonly string MustUseCache;
    private static readonly string OffsetValue;
    private static readonly byte[] bytes;
    private static readonly Hashtable hashtable;
    private static readonly bool cacheStrings;
    private static readonly int offset;

    [DoNotPrune]
    [DoNotMove]
    public static string Get(int stringID)
    {
      int index1;
      int num1;
      int count;
      string str1;
      int num2;
      do
      {
        int num3 = stringID;
        int num4;
        while (true)
        {
          int offset = Strings.offset;
          stringID = num3 - offset;
          do
          {
            if (Strings.cacheStrings)
            {
              str1 = (string) Strings.hashtable[(object) stringID];
              switch (str1)
              {
                case null:
                  goto label_5;
                default:
                  continue;
              }
            }
            else
              goto label_5;
          }
          while (false);
          goto label_27;
label_5:
          int num5 = stringID;
          byte[] bytes = Strings.bytes;
          int index2 = num5;
          index1 = index2 + 1;
          num1 = (int) bytes[index2];
          num4 = num1 & 128;
          if (false)
            num3 = num4;
          else
            break;
        }
        if (num4 == 0)
        {
          num2 = num1;
          if (true)
          {
            count = num2;
            if (count != 0)
              goto label_21;
          }
          else
            goto label_28;
        }
        else
          goto label_11;
      }
      while (false);
      return string.Empty;
label_11:
      int num6;
      if ((num1 & 64) == 0)
      {
        int num7 = num1 & 63;
        if (true)
          num7 <<= 8;
        int num8 = (int) Strings.bytes[index1++];
        count = num7 + num8;
        goto label_21;
      }
      else
        num6 = num1;
label_16:
      int num9 = (num6 & 31) << 24;
      byte[] bytes1 = Strings.bytes;
      int index3 = index1;
      int num10 = index3 + 1;
      int num11 = (int) bytes1[index3];
      int num12;
      if (true)
        num12 = 16;
      else
        goto label_19;
label_18:
      int num13 = num11 << num12;
      int num14 = num9 + num13;
      num11 = (int) Strings.bytes[num10++];
      num9 = num14;
label_19:
      num12 = 8;
      if (num12 != 0)
      {
        int num15 = num11 << num12;
        int num16 = num9 + num15;
        byte[] bytes2 = Strings.bytes;
        int index4 = num10;
        index1 = index4 + 1;
        int num17 = (int) bytes2[index4];
        count = num16 + num17;
        goto label_21;
      }
      else
        goto label_18;
label_28:
      num6 = num2;
      goto label_16;
label_21:
      try
      {
        byte[] bytes3 = Convert.FromBase64String(Encoding.UTF8.GetString(Strings.bytes, index1, count));
        string str2 = string.Intern(Encoding.UTF8.GetString(bytes3, 0, bytes3.Length));
        if (Strings.cacheStrings)
        {
          try
          {
            Strings.hashtable.Add((object) stringID, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_27:
      return str1;
    }

    static Strings()
    {
      if (true)
        Strings.MustUseCache = "1";
      else
        goto label_4;
label_2:
      Strings.OffsetValue = "207";
      Strings.bytes = (byte[]) null;
label_3:
      Strings.hashtable = (Hashtable) null;
      Strings.cacheStrings = false;
label_4:
      if (true)
      {
        Strings.offset = 0;
        do
        {
          if (Strings.MustUseCache == "1")
          {
            Strings.cacheStrings = true;
            Strings.hashtable = new Hashtable();
          }
          Strings.offset = Convert.ToInt32(Strings.OffsetValue);
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("{ad8a160f-f3c9-4f7e-a04a-6bac15d60d54}");
          if (true)
            goto label_19;
label_10:
          Stream stream;
          try
          {
            int int32 = Convert.ToInt32(stream.Length);
            byte[] buffer;
            if (true)
              buffer = new byte[int32];
            stream.Read(buffer, 0, int32);
            Strings.bytes = SimpleZip.Unzip(buffer);
            buffer = (byte[]) null;
            stream.Close();
          }
          finally
          {
            do
            {
              stream?.Dispose();
            }
            while (false);
          }
          continue;
label_19:
          stream = manifestResourceStream;
          goto label_10;
        }
        while (false);
        if (false)
          goto label_3;
      }
      else
        goto label_2;
    }
  }
}
