// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 712541170;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2096286535)) % 11U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 442109193 ^ 98388307;
            continue;
          case 1:
            this.b.ClearBoard();
            flag = x == Pieces.King;
            num1 = (int) num2 * 836745759 ^ -644441391;
            continue;
          case 2:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -1673852336 ^ 1523622601;
            continue;
          case 3:
            num1 = (int) num2 * 549056049 ^ -607747463;
            continue;
          case 4:
            goto label_3;
          case 5:
            int num3 = !flag ? 827953987 : (num3 = 1707479439);
            num1 = num3 ^ (int) num2 * -721022303;
            continue;
          case 6:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * -1956740298 ^ 1773984255;
            continue;
          case 7:
            this.b.DisableTurns = true;
            num1 = 1311581492;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 1493310963 ^ 1515112868;
            continue;
          case 10:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -528247981 ^ 968983949;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 735469259;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1195282453)) % 10U)
        {
          case 0:
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * -536822249 ^ -987398130;
            continue;
          case 1:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 395138702 ^ -251588300;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 1564142738 ^ -637930790;
            continue;
          case 4:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * -175058053 ^ 2040376732;
            continue;
          case 5:
            num1 = (int) num2 * -1332137585 ^ 2019486956;
            continue;
          case 7:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -1550273748 ^ 159234993;
            continue;
          case 8:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 135583990 ^ 528194549;
            continue;
          case 9:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 607788364 ^ 117520146;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this.b.lights.FindAllMoves();
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = 714159904;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 611567046)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 88136403 ^ 1415865442;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 358121800 ^ 1890609758;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.addWhite(4, 6, Pieces.Pawn);
            this.b.addBlack(3, 7, Pieces.King);
            this.b.addWhite(3, 0, Pieces.King);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 696041123 ^ -403578699;
            continue;
          case 5:
            num1 = (int) num2 * -100487989 ^ 1242764291;
            continue;
          case 6:
            this.b.ClearBoard();
            num1 = (int) num2 * -281281387 ^ -664320043;
            continue;
          case 7:
            num1 = (int) num2 * -2032894025 ^ -1656187314;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
      this.b.DisableTurns = true;
      this.b.addBlack(0, 7, Pieces.Rook);
label_1:
      int num1 = -2058040210;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -471021447)) % 11U)
        {
          case 0:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1716503750 ^ 1621078896;
            continue;
          case 1:
            num1 = (int) num2 * 360880859 ^ 1465069114;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 659385402 ^ 1988361191;
            continue;
          case 3:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1818619673 ^ -592201495;
            continue;
          case 4:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 1920322003 ^ -1154323784;
            continue;
          case 5:
            num1 = (int) num2 * -1440214546 ^ 935628061;
            continue;
          case 6:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1097937705 ^ -75259719;
            continue;
          case 7:
            goto label_1;
          case 8:
            goto label_3;
          case 9:
            num1 = (int) num2 * 145819194 ^ -230991654;
            continue;
          case 10:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1393071841 ^ 1914511297;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1564930508;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 212324577)) % 5U)
        {
          case 0:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1465187678 ^ 2035138446;
            continue;
          case 1:
            this.b.addWhite(3, 1, Pieces.Pawn);
            this.b.addBlack(0, 4, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1584855357 ^ 1457552007;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            this.b.ClearBoard();
            num1 = (int) num2 * 926286865 ^ -362490602;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -194583341;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -477705028)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -275520610 ^ 787931064;
            continue;
          case 3:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -803481047 ^ -508423222;
            continue;
          case 4:
            num1 = (int) num2 * -2133768392 ^ 705184385;
            continue;
          case 5:
            this.b.ClearBoard();
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1395109418 ^ -1097224920;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -1086704388;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2083354219)) % 13U)
        {
          case 0:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -329756960 ^ 606440239;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * -1824280913 ^ 110345335;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 465262041 ^ -130120691;
            continue;
          case 3:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -178586179 ^ -528343938;
            continue;
          case 6:
            num1 = (int) num2 * -326787877 ^ -1677804973;
            continue;
          case 7:
            num1 = (int) num2 * -150978708 ^ -1303432168;
            continue;
          case 8:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 39167294 ^ 1389478190;
            continue;
          case 9:
            num1 = (int) num2 * -665376914 ^ 554542150;
            continue;
          case 10:
            this.b.addWhite(0, 0, Pieces.Rook);
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1720202681 ^ 1213692676;
            continue;
          case 11:
            this.b.addWhite(7, 0, Pieces.Rook);
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -2136097865 ^ 700485686;
            continue;
          case 12:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * -1356428715 ^ 1364594651;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }
  }
}
