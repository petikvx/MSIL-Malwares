// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.W2d.Opcodes.DrawTextAdvanced
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using System;
using System.IO;
using System.Runtime.InteropServices;

namespace dotXMLToolsWPF.W2d.Opcodes
{
  [StructLayout(LayoutKind.Sequential, Size = 1)]
  public struct DrawTextAdvanced : IOpcode
  {
    public static readonly byte Id = 24;

    public CoordinatesType CoordinatesType => CoordinatesType.Relative;

    public class Factory : OpcodeFactory, ISingleByteOpcodeFactory
    {
      public int OpcodeId => (int) DrawTextAdvanced.Id;

      public override IOpcode ReadOpcode(Stream stream)
      {
        OpcodeFactory.ReadSignedLong(stream);
        OpcodeFactory.ReadSignedLong(stream);
        OpcodeFactory.ReadString(stream);
        int num1 = (int) OpcodeFactory.ReadUnsignedByte(stream);
        if (num1 == 0)
          num1 = 256 + (int) OpcodeFactory.ReadUnsignedShort(stream);
        int num2 = num1 - 1;
        for (int index = 0; index < num2; ++index)
        {
          if (OpcodeFactory.ReadUnsignedByte(stream) == (byte) 0)
          {
            int num3 = 256 + (int) OpcodeFactory.ReadUnsignedShort(stream);
          }
        }
        int num4 = (int) OpcodeFactory.ReadUnsignedByte(stream);
        if (num4 == 0)
          num4 = 256 + (int) OpcodeFactory.ReadUnsignedShort(stream);
        int num5 = num4 - 1;
        for (int index = 0; index < num5; ++index)
        {
          if (OpcodeFactory.ReadUnsignedByte(stream) == (byte) 0)
          {
            int num6 = 256 + (int) OpcodeFactory.ReadUnsignedShort(stream);
          }
        }
        if (OpcodeFactory.ReadUnsignedByte(stream) != (byte) 1)
          throw new InvalidOperationException();
        return (IOpcode) new DrawTextAdvanced();
      }
    }
  }
}
