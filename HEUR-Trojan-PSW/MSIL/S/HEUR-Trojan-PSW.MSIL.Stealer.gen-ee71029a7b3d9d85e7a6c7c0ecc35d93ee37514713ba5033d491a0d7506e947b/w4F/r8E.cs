// Decompiled with JetBrains decompiler
// Type: w4F.r8E
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using m5F8;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using x7X;

namespace w4F
{
  [StandardModule]
  internal sealed class r8E
  {
    public static Af03[] Ⴅ = new Af03[100000];
    public static int Ⴈ = 0;
    public static int Ⴄ = 0;

    public static string Gf6()
    {
      object obj = (object) new Tt1();
      int num = 10001;
      IComparable<string> comparable;
      try
      {
        object enumerator;
        try
        {
          enumerator = (object) ((Tt1) obj).Ⴃ.GetEnumerator();
          while ((enumerator as IEnumerator<Af03>).MoveNext())
          {
            object current = (object) (enumerator as IEnumerator<Af03>).Current;
            checked { ++num; }
          }
        }
        finally
        {
          if (enumerator is IEnumerator<Af03>)
            (enumerator as IEnumerator<Af03>).Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        comparable = (IComparable<string>) "Fail to connect database";
        ProjectData.ClearProjectError();
        goto label_18;
      }
      r8E.Ⴄ = num;
      try
      {
        object enumerator;
        try
        {
          enumerator = (object) ((Tt1) obj).Ⴃ.GetEnumerator();
          while (((IEnumerator) enumerator).MoveNext())
          {
            object current = (object) (enumerator as IEnumerator<Af03>).Current;
            if (r8E.Ⴄ == ((Af03) current).Ⴗ)
              checked { ++r8E.Ⴄ; }
          }
        }
        finally
        {
          if (enumerator is IEnumerator<Af03>)
            ((IDisposable) enumerator).Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        comparable = (IComparable<string>) "Fail to connect database";
        ProjectData.ClearProjectError();
        goto label_18;
      }
      comparable = (IComparable<string>) ((ICloneable) ("STF" + r8E.Ⴄ.ToString()) as string);
label_18:
      return comparable as string;
    }
  }
}
