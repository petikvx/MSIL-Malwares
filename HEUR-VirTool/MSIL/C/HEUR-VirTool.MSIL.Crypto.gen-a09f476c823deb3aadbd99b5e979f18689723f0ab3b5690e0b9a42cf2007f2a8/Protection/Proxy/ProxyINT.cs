// Decompiled with JetBrains decompiler
// Type: Aura.Protection.Proxy.ProxyINT
// Assembly: Kudeta Crypter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 16F9F4AC-EE0C-4DE1-A1E6-B297F2D4338B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-VirTool.MSIL.Crypto.gen-a09f476c823deb3aadbd99b5e979f18689723f0ab3b5690e0b9a42cf2007f2a8.exe

using Aura.Protection.Renamer;
using dnlib.DotNet;
using dnlib.DotNet.Emit;
using System;
using System.Collections.Generic;

namespace Aura.Protection.Proxy
{
  public static class ProxyINT
  {
    public static Random rand = new Random();

    public static void Execute(ModuleDef module)
    {
      foreach (TypeDef type in module.GetTypes())
      {
        if (!type.IsGlobalModuleType)
        {
          foreach (MethodDef method in (IEnumerable<MethodDef>) type.Methods)
          {
            if (method.HasBody)
            {
              IList<Instruction> instructions = method.Body.Instructions;
              for (int index = 0; index < ((ICollection<Instruction>) instructions).Count; ++index)
              {
                if (method.Body.Instructions[index].IsLdcI4())
                {
                  MethodImplAttributes methodImplAttributes = (MethodImplAttributes) 0;
                  MethodAttributes methodAttributes = (MethodAttributes) 150;
                  MethodDefUser methodDefUser = new MethodDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal)), MethodSig.CreateStatic((TypeSig) module.CorLibTypes.Int32), methodImplAttributes, methodAttributes);
                  ((ICollection<MethodDef>) module.GlobalType.Methods).Add((MethodDef) methodDefUser);
                  ((MethodDef) methodDefUser).Body = new CilBody();
                  ((MethodDef) methodDefUser).Body.Variables.Add(new Local((TypeSig) module.CorLibTypes.Int32));
                  ((ICollection<Instruction>) ((MethodDef) methodDefUser).Body.Instructions).Add(Instruction.Create(OpCodes.Ldc_I4, instructions[index].GetLdcI4Value()));
                  ((ICollection<Instruction>) ((MethodDef) methodDefUser).Body.Instructions).Add(Instruction.Create(OpCodes.Ret));
                  instructions[index].OpCode = OpCodes.Call;
                  instructions[index].Operand = (object) methodDefUser;
                }
                else if (method.Body.Instructions[index].OpCode == OpCodes.Ldc_R4)
                {
                  MethodImplAttributes methodImplAttributes = (MethodImplAttributes) 0;
                  MethodAttributes methodAttributes = (MethodAttributes) 150;
                  MethodDefUser methodDefUser = new MethodDefUser(UTF8String.op_Implicit(RenamerPhase.GenerateString(RenamerPhase.RenameMode.Normal)), MethodSig.CreateStatic((TypeSig) module.CorLibTypes.Double), methodImplAttributes, methodAttributes);
                  ((ICollection<MethodDef>) module.GlobalType.Methods).Add((MethodDef) methodDefUser);
                  ((MethodDef) methodDefUser).Body = new CilBody();
                  ((MethodDef) methodDefUser).Body.Variables.Add(new Local((TypeSig) module.CorLibTypes.Double));
                  ((ICollection<Instruction>) ((MethodDef) methodDefUser).Body.Instructions).Add(Instruction.Create(OpCodes.Ldc_R4, (float) method.Body.Instructions[index].Operand));
                  ((ICollection<Instruction>) ((MethodDef) methodDefUser).Body.Instructions).Add(Instruction.Create(OpCodes.Ret));
                  instructions[index].OpCode = OpCodes.Call;
                  instructions[index].Operand = (object) methodDefUser;
                }
              }
            }
          }
        }
      }
    }
  }
}
