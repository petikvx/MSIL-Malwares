// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: ConcurrentS, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: BBECA65A-DDC9-4285-A0F3-1DAD9BE0ED87
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-29a2cecf014cf5640915defd5f1ca82e75089ad0ec89107be8f9144673d99be6.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
        bool flag = this.m_Dict.ContainsKey(aKey);
label_1:
        int num1 = 1913698026;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1358845734)) % 6U)
          {
            case 1:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * -1219704867 ^ 449211878;
              continue;
            case 2:
              int num3 = flag ? 621704327 : (num3 = 636758774);
              num1 = num3 ^ (int) num2 * -1267823184;
              continue;
            case 3:
              goto label_1;
            case 4:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = 1839017878;
              continue;
            case 5:
              num1 = (int) num2 * 1094879680 ^ -653226666;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -1266750458;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1074978317)) % 7U)
          {
            case 0:
              int num3 = flag ? 1746029879 : (num3 = 897097525);
              num1 = num3 ^ (int) num2 * 1030058225;
              continue;
            case 1:
              num1 = (int) num2 * -1222860944 ^ -2033054207;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -689614655 ^ 1123021302;
              continue;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -908207702 ^ -1085657999;
              continue;
            case 6:
              this.m_Dict.Add(aKey, value);
              num1 = -685812111;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -1031262258;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1389760617)) % 8U)
          {
            case 0:
              int num4 = !flag ? 1175542977 : (num4 = 1290695077);
              num1 = num4 ^ (int) num2 * 600212105;
              continue;
            case 1:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -846187673 ^ 2142248764;
                continue;
              }
              num3 = 1;
              break;
            case 2:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -1284408570 ^ -449652922;
              continue;
            case 4:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 5:
              num1 = (int) num2 * -1660993075 ^ -1809944795;
              continue;
            case 6:
              jsonNode = (JSONNode) null;
              num1 = -546910276;
              continue;
            case 7:
              goto label_1;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = -592003945;
        }
label_12:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1717946459;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1866165686)) % 6U)
          {
            case 0:
              int num4 = flag ? -1412635317 : (num4 = -3010598);
              num1 = num4 ^ (int) num2 * 1947386596;
              continue;
            case 1:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -1577257090 ^ 1626652268;
                continue;
              }
              num3 = 1;
              break;
            case 2:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              num1 = (int) num2 * 2023436777 ^ 2084748767;
              continue;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = 1760005502;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = -700971043;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1484293656)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              count = this.m_Dict.Count;
              num1 = (int) num2 * 1601752861 ^ 1168280322;
              continue;
            case 3:
              num1 = (int) num2 * -2079903249 ^ 692322967;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      if (JSONClass.\u200C⁯⁬⁭⁬‏‫‏⁯⁪⁭⁪‏‭‎⁪⁭​⁫‪‪‮⁭‌⁯‏‪‬‍‎‏‪⁪‫‏‮‍‫⁫⁯‮(aKey))
        goto label_4;
label_1:
      int num1 = 193688865;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 409733520)) % 11U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1224914179 ^ -684583197;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_4;
          case 4:
            flag = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -1101297830 ^ 702739379;
            continue;
          case 5:
            int num3 = flag ? 590428574 : (num3 = 1478645901);
            num1 = num3 ^ (int) num2 * 347768285;
            continue;
          case 6:
            num1 = (int) num2 * 1852347452 ^ 261849725;
            continue;
          case 7:
            num1 = (int) num2 * 1866928982 ^ -1041458694;
            continue;
          case 8:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * -1543734926 ^ -268612857;
            continue;
          case 9:
            this.m_Dict.Add(aKey, aItem);
            num1 = 1058908368;
            continue;
          case 10:
            num1 = 757247959;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:
      return;
label_4:
      this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
      num1 = 1687730464;
      goto label_2;
    }

    public override JSONNode Remove(string aKey)
    {
      bool flag = !this.m_Dict.ContainsKey(aKey);
label_1:
      int num1 = -1222968678;
      JSONNode jsonNode1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2008959181)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 1276440680 ^ 560838256;
            continue;
          case 1:
            int num3 = !flag ? 1302326246 : (num3 = 266827003);
            num1 = num3 ^ (int) num2 * 1965084804;
            continue;
          case 2:
            num1 = (int) num2 * -2131421294 ^ 2021632080;
            continue;
          case 3:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * 1754107564 ^ 1601080494;
            continue;
          case 4:
            goto label_1;
          case 5:
            JSONNode jsonNode2 = this.m_Dict[aKey];
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = -779919065;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -149447672;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -2021635036)) % 8U)
        {
          case 0:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 1:
            num1 = (int) num2 * 930160203 ^ -251573219;
            continue;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 1124306993 ^ -1811443170;
            continue;
          case 4:
            if (aIndex < 0)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * -1664016257 ^ 2099289808;
            continue;
          case 5:
            jsonNode = (JSONNode) null;
            num1 = -791938382;
            continue;
          case 6:
            num1 = (int) num2 * 1214925398 ^ -1030685286;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 != 0 ? -1239969465 : (num4 = -1094527295);
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
        jsonNode = (JSONNode) null;
      }
      catch
      {
label_3:
        int num1 = 1372817423;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1951233904)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -298615736 ^ -1650175327;
              continue;
            default:
              goto label_6;
          }
        }
      }
label_6:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = -159364467;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ -1426138298)) % 23U)
            {
              case 0:
                num2 = (int) num3 * 637001689 ^ 2046830230;
                continue;
              case 1:
                int num4 = num1 != 0 ? -1728730775 : (num4 = -393055278);
                num2 = num4 ^ (int) num3 * -362118503;
                continue;
              case 2:
              case 22:
                this.\u003C\u003E1__state = -1;
                num2 = -828194263;
                continue;
              case 3:
                int num5;
                num2 = num5 = enumerator.MoveNext() ? -1702822879 : (num5 = -934600575);
                continue;
              case 4:
              case 21:
                this.\u003C\u003E1__state = -3;
                num2 = -884776812;
                continue;
              case 5:
                N = enumerator.Current;
                this.\u003C\u003E2__current = N.Value;
                this.\u003C\u003E1__state = 1;
                num2 = -1431114553;
                continue;
              case 6:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * 162021441 ^ 1484517727;
                continue;
              case 7:
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * 640924658 ^ 1795341103;
                continue;
              case 8:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * 15469076 ^ -660272751;
                continue;
              case 11:
                num2 = (int) num3 * -1463674970 ^ -1323587088;
                continue;
              case 12:
                childs = true;
                num2 = (int) num3 * -1487318841 ^ -1745546264;
                continue;
              case 13:
                goto label_10;
              case 14:
                childs = false;
                num2 = (int) num3 * 1711635520 ^ 746113532;
                continue;
              case 15:
                num2 = (int) num3 * 1972401339 ^ -1542080191;
                continue;
              case 16:
                num2 = (int) num3 * 852580670 ^ -7594992;
                continue;
              case 17:
                int num6;
                num2 = num6 = num1 != 1 ? -1858140236 : (num6 = -216601262);
                continue;
              case 18:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                num2 = (int) num3 * -1714558476 ^ -918135884;
                continue;
              case 19:
                goto label_1;
              case 20:
                enumerator = this.m_Dict.GetEnumerator();
                num2 = (int) num3 * 1529520511 ^ 880631153;
                continue;
              default:
                goto label_22;
            }
          }
label_10:
          childs = false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_22:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
label_1:
      int num1 = -772354782;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1969410283)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str1 = "{";
            num1 = (int) num2 * 534990527 ^ -1141922169;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_13:
        int num3 = !enumerator.MoveNext() ? -979270485 : (num3 = -1495627104);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1969410283)) % 10U)
          {
            case 1:
              current = enumerator.Current;
              num3 = -1065225660;
              continue;
            case 2:
              str1 = JSONClass.\u206B⁫‍‬⁫⁯⁮‪⁭‭⁭​⁪⁬‫⁮⁭⁬‌⁪⁬‮‭⁬‍‌⁪⁯‭⁯⁬⁬⁪‎‮⁭⁬​‬‭‮(str1, ", ");
              num3 = (int) num4 * 1505702826 ^ 733673832;
              continue;
            case 3:
              int num5 = flag ? -1281167460 : (num5 = -1336070749);
              num3 = num5 ^ (int) num4 * -517599747;
              continue;
            case 4:
              num3 = (int) num4 * -638684583 ^ 249870718;
              continue;
            case 5:
              goto label_13;
            case 6:
              num3 = -1495627104;
              continue;
            case 7:
              str1 = JSONClass.\u200B⁪‪‬‮‏‭‪‫‬‏‫‬⁪​⁫⁬⁯⁭‏‌⁭‏‫⁫⁬‬⁬‍⁫‭⁭⁫⁭‪‎‫‏‫⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206C‫‮‏‪⁪‎‮‪‏​⁬⁫⁫‏‫​‍‪​⁫‫‎‬‫‫‎⁮‎‭⁭⁭‭⁭‪‮⁮⁭‏‏‮((object) current.Value)
              });
              num3 = -193901077;
              continue;
            case 8:
              flag = JSONClass.\u200F⁭‫‪⁪‮⁪⁪‎‌⁮⁭‎‍‬‭⁬⁬⁬‪‍⁭‎​‍‫⁯⁪⁭⁪⁪⁮‏⁫⁬⁭⁫‌‬‭‮(str1) > 2;
              num3 = (int) num4 * 849737450 ^ 1736701174;
              continue;
            case 9:
              num3 = (int) num4 * 1467767518 ^ -1470780909;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      string str2 = JSONClass.\u206B⁫‍‬⁫⁯⁮‪⁭‭⁭​⁪⁬‫⁮⁭⁬‌⁪⁬‮‭⁬‍‌⁪⁯‭⁯⁬⁬⁪‎‮⁭⁬​‬‭‮(str1, "}");
label_18:
      int num6 = -1363989869;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -1969410283)) % 4U)
        {
          case 1:
            num6 = (int) num7 * -464923023 ^ -988871740;
            continue;
          case 2:
            str3 = str2;
            num6 = (int) num7 * 1949172548 ^ 965046804;
            continue;
          case 3:
            goto label_18;
          default:
            goto label_22;
        }
      }
label_22:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_5:
        int num1 = enumerator.MoveNext() ? 351927964 : (num1 = 540539623);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1491356288)) % 10U)
          {
            case 0:
              str1 = JSONClass.\u200B⁪‪‬‮‏‭‪‫‬‏‫‬⁪​⁫⁬⁯⁭‏‌⁭‏‫⁫⁬‬⁬‍⁫‭⁭⁫⁭‪‎‫‏‫⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u206B⁫‍‬⁫⁯⁮‪⁭‭⁭​⁪⁬‫⁮⁭⁬‌⁪⁬‮‭⁬‍‌⁪⁯‭⁯⁬⁬⁪‎‮⁭⁬​‬‭‮(aPrefix, "   "))
              });
              num1 = (int) num2 * 1809393057 ^ 2144939445;
              continue;
            case 1:
              str1 = JSONClass.\u206B⁫‍‬⁫⁯⁮‪⁭‭⁭​⁪⁬‫⁮⁭⁬‌⁪⁬‮‭⁬‍‌⁪⁯‭⁯⁬⁬⁪‎‮⁭⁬​‬‭‮(str1, ", ");
              num1 = (int) num2 * -1900600649 ^ -1082175113;
              continue;
            case 2:
              str1 = JSONClass.\u206D​‭⁭‫‪​‮⁪‮‬‮‬⁭‮⁭⁬⁫‍⁯‮‏⁫‭‎⁫‬‌‮‫⁪‭⁫⁮⁬‌⁬⁪⁬‌‮(str1, "\n", aPrefix, "   ");
              num1 = 1044395678;
              continue;
            case 3:
              num1 = (int) num2 * -2105405955 ^ -1908375765;
              continue;
            case 4:
              goto label_5;
            case 6:
              num1 = 351927964;
              continue;
            case 7:
              int num3 = !flag ? -1034577312 : (num3 = -305981935);
              num1 = num3 ^ (int) num2 * -133469748;
              continue;
            case 8:
              current = enumerator.Current;
              num1 = 1785570069;
              continue;
            case 9:
              flag = JSONClass.\u200F⁭‫‪⁪‮⁪⁪‎‌⁮⁭‎‍‬‭⁬⁬⁬‪‍⁭‎​‍‫⁯⁪⁭⁪⁪⁮‏⁫⁬⁭⁫‌‬‭‮(str1) > 3;
              num1 = (int) num2 * 1633937560 ^ -256596611;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      string str2 = JSONClass.\u206D​‭⁭‫‪​‮⁪‮‬‮‬⁭‮⁭⁬⁫‍⁯‮‏⁫‭‎⁫‬‌‮‫⁪‭⁫⁮⁬‌⁬⁪⁬‌‮(str1, "\n", aPrefix, "}");
label_14:
      int num4 = 1157015971;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ 1491356288)) % 4U)
        {
          case 0:
            goto label_14;
          case 2:
            num4 = (int) num5 * -1868714724 ^ -106739523;
            continue;
          case 3:
            str3 = str2;
            num4 = (int) num5 * -94730327 ^ -1815482555;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONClass.\u202B⁪⁭⁫⁪‮‏​⁭‭⁭‌‬⁮⁭​⁬‮‭⁯‌⁬‮⁫⁮‎⁫‭‮‬‫‪‬⁮‏‮‏‎‍⁯‮(aWriter, (byte) 2);
label_1:
      int num1 = -1898510318;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1559649849)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 255929077 ^ -1473532948;
            continue;
          case 2:
            JSONClass.\u200B‫⁭‍‫‮‏‎⁯⁫⁭‎‎⁪‪⁭‮⁪‬‍⁭⁬‮‭​⁪‬‎‭⁪‎⁯⁪⁬⁫‫‎‪‭⁯‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * 1581773334 ^ 2024040724;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator();
      try
      {
label_10:
        int num3 = !enumerator.MoveNext() ? -266482595 : (num3 = -658466137);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1559649849)) % 5U)
          {
            case 0:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * 1105151442 ^ 1964954215;
              continue;
            case 1:
              goto label_16;
            case 2:
              num3 = -658466137;
              continue;
            case 3:
              goto label_10;
            case 4:
              current = enumerator.Current;
              JSONClass.\u200D‬⁬‭‍⁫‌⁭⁫‏⁫‪‎⁪‬‪⁫⁬‫⁮‭⁬⁬‬⁪⁯‭​‮⁪⁫‌‎‫‌‬⁭⁬‬‍‮(aWriter, current);
              num3 = -1030478386;
              continue;
            default:
              goto label_12;
          }
        }
label_16:
        return;
label_12:;
      }
      finally
      {
        enumerator.Dispose();
label_14:
        int num5 = -511381118;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1559649849)) % 3U)
          {
            case 0:
              goto label_14;
            case 2:
              num5 = (int) num6 * -1040771188 ^ 1546093040;
              continue;
            default:
              goto label_18;
          }
        }
label_18:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = 1203925204;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1924582964)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1785891493 ^ 975526940;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u200C⁯⁬⁭⁬‏‫‏⁯⁪⁭⁪‏‭‎⁪⁭​⁫‪‪‮⁭‌⁯‏‪‬‍‎‏‪⁪‫‏‮‍‫⁫⁯‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u200F⁭‫‪⁪‮⁪⁪‎‌⁮⁭‎‍‬‭⁬⁬⁬‪‍⁭‎​‍‫⁯⁪⁭⁪⁪⁮‏⁫⁬⁭⁫‌‬‭‮([In] string obj0) => obj0.Length;

    static string \u206B⁫‍‬⁫⁯⁮‪⁭‭⁭​⁪⁬‫⁮⁭⁬‌⁪⁬‮‭⁬‍‌⁪⁯‭⁯⁬⁬⁪‎‮⁭⁬​‬‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206C‫‮‏‪⁪‎‮‪‏​⁬⁫⁫‏‫​‍‪​⁫‫‎‬‫‫‎⁮‎‭⁭⁭‭⁭‪‮⁮⁭‏‏‮([In] object obj0) => obj0.ToString();

    static string \u200B⁪‪‬‮‏‭‪‫‬‏‫‬⁪​⁫⁬⁯⁭‏‌⁭‏‫⁫⁬‬⁬‍⁫‭⁭⁫⁭‪‎‫‏‫⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206D​‭⁭‫‪​‮⁪‮‬‮‬⁭‮⁭⁬⁫‍⁯‮‏⁫‭‎⁫‬‌‮‫⁪‭⁫⁮⁬‌⁬⁪⁬‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u202B⁪⁭⁫⁪‮‏​⁭‭⁭‌‬⁮⁭​⁬‮‭⁯‌⁬‮⁫⁮‎⁫‭‮‬‫‪‬⁮‏‮‏‎‍⁯‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200B‫⁭‍‫‮‏‎⁯⁫⁭‎‎⁪‪⁭‮⁪‬‍⁭⁬‮‭​⁪‬‎‭⁪‎⁯⁪⁬⁫‫‎‪‭⁯‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200D‬⁬‭‍⁫‌⁭⁫‏⁫‪‎⁪‬‪⁫⁬‫⁮‭⁬⁬‬⁪⁯‭​‮⁪⁫‌‎‫‌‬⁭⁬‬‍‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
