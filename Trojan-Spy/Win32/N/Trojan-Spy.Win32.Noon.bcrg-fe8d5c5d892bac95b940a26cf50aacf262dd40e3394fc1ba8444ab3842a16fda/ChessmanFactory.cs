// Decompiled with JetBrains decompiler
// Type: ChessBoard.ChessmanFactory
// Assembly: IArraySortHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B08900B5-C53F-4995-B311-D7E8DC4113C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcrg-fe8d5c5d892bac95b940a26cf50aacf262dd40e3394fc1ba8444ab3842a16fda.exe

using ChessBoard.Chessmens;
using System;
using System.Runtime.InteropServices;

namespace ChessBoard
{
  public static class ChessmanFactory
  {
    public static BaseChessman TryToCreateChessman(Colorz color, ChessmenType type)
    {
      ChessmenType chessmenType1 = type;
label_1:
      int num1 = -354377262;
      BaseChessman createChessman;
      ChessmenType chessmenType2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1317431098)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
label_6:
            createChessman = (BaseChessman) new Pawn(color);
            num1 = -1499722113;
            continue;
          case 2:
            switch (chessmenType2)
            {
              case ChessmenType.Pawn:
                goto label_6;
              case ChessmenType.Rook:
                goto label_8;
              case ChessmenType.Knight:
                goto label_9;
              case ChessmenType.Bishop:
                goto label_13;
              case ChessmenType.Queen:
                goto label_14;
              case ChessmenType.King:
                goto label_5;
              default:
                num1 = (int) num2 * 908838622 ^ -1815153835;
                continue;
            }
          case 3:
            num1 = (int) num2 * -584197958 ^ 1205574418;
            continue;
          case 4:
            chessmenType2 = chessmenType1;
            num1 = (int) num2 * -1599104843 ^ -309585408;
            continue;
          case 5:
            num1 = (int) num2 * -1004564267 ^ 89306485;
            continue;
          case 6:
label_14:
            createChessman = (BaseChessman) new Queen(color);
            num1 = -1580072452;
            continue;
          case 7:
label_8:
            createChessman = (BaseChessman) new Rook(color);
            num1 = -1605429725;
            continue;
          case 8:
label_13:
            createChessman = (BaseChessman) new Bishop(color);
            num1 = -1054019286;
            continue;
          case 9:
            num1 = (int) num2 * -254407750 ^ 155022486;
            continue;
          case 11:
label_9:
            createChessman = (BaseChessman) new Knight(color);
            num1 = -350012635;
            continue;
          case 12:
            num1 = (int) num2 * -637013681 ^ 1364515368;
            continue;
          case 13:
            goto label_3;
          case 14:
label_5:
            createChessman = (BaseChessman) new King(color);
            num1 = -1580072452;
            continue;
          case 15:
            num1 = (int) num2 * -1976868285 ^ -700209002;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      throw ChessmanFactory.\u202C⁭‌‎⁬⁯⁪‬‭‭‪⁪⁫‮‬‪⁭⁮⁮‬⁯⁭⁮⁮‮‌⁫⁯⁯⁬‮​‍‎‮‍⁮‍⁮‏‮(\u003CModule\u003E.\u200E‫‭⁪⁪‌‮‍‏⁮‎‮⁯‍‪‏⁪⁭​​⁫‍‫‏‌‌‭‫⁬‫‬‭⁮‮‎‪⁬‍⁫‪‮<string>(1944819410U));
label_18:
      return createChessman;
    }

    public static BaseChessman TryToCreateChessmanOnStartPosition(int row, int column)
    {
label_1:
      int num1 = 997512777;
      BaseChessman chessmanOnStartPosition;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 204132964)) % 22U)
        {
          case 0:
            int num3;
            num1 = num3 = ChessmanFactory.IsStartQueenCell(row, column) ? 1473022448 : (num3 = 556290472);
            continue;
          case 1:
            int num4 = ChessmanFactory.IsStartPawnRow(row) ? -1029389489 : (num4 = -1806922072);
            num1 = num4 ^ (int) num2 * 1227385664;
            continue;
          case 2:
            num1 = (int) num2 * -1992253185 ^ -1095963618;
            continue;
          case 3:
            chessmanOnStartPosition = (BaseChessman) new King();
            num1 = (int) num2 * 1416233402 ^ 1503901548;
            continue;
          case 4:
            flag1 = ChessmanFactory.IsStartKingCell(row, column);
            num1 = 1322809823;
            continue;
          case 5:
            num1 = (int) num2 * -1406181147 ^ -607444239;
            continue;
          case 7:
            int num5 = flag1 ? -808761812 : (num5 = -188942490);
            num1 = num5 ^ (int) num2 * 314133735;
            continue;
          case 8:
            chessmanOnStartPosition = (BaseChessman) new Rook();
            num1 = (int) num2 * -1748031524 ^ -908168222;
            continue;
          case 9:
            chessmanOnStartPosition = (BaseChessman) new Bishop();
            num1 = (int) num2 * 423872493 ^ 1527735615;
            continue;
          case 10:
            num1 = (int) num2 * 1880422323 ^ 265751120;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num2 * -492278427 ^ 430694278;
            continue;
          case 13:
            chessmanOnStartPosition = (BaseChessman) new Knight();
            num1 = (int) num2 * -118111708 ^ 604045732;
            continue;
          case 14:
            int num6;
            num1 = num6 = !ChessmanFactory.IsStartBishopCell(row, column) ? 928647118 : (num6 = 1840864115);
            continue;
          case 15:
            chessmanOnStartPosition = (BaseChessman) new Pawn();
            num1 = (int) num2 * -509363387 ^ 139384831;
            continue;
          case 16:
            flag2 = ChessmanFactory.IsStartRookCell(row, column);
            num1 = 304613133;
            continue;
          case 17:
            chessmanOnStartPosition = (BaseChessman) null;
            num1 = 1335832901;
            continue;
          case 18:
            num1 = (int) num2 * -1410723467 ^ 1220681272;
            continue;
          case 19:
            int num7;
            num1 = num7 = ChessmanFactory.IsStartKnightCell(row, column) ? 705370235 : (num7 = 1531006816);
            continue;
          case 20:
            chessmanOnStartPosition = (BaseChessman) new Queen();
            num1 = (int) num2 * -1002602329 ^ 1031214072;
            continue;
          case 21:
            int num8 = flag2 ? 1878804168 : (num8 = 1846152583);
            num1 = num8 ^ (int) num2 * 918428336;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return chessmanOnStartPosition;
    }

    private static bool IsStartPawnRow(int row)
    {
label_1:
      int num1 = 2146085357;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 354856631)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 757185304 ^ 936882541;
            continue;
          case 2:
            if (row == 1)
            {
              num3 = 1;
              break;
            }
            num1 = (int) num2 * 1406069189 ^ -627725286;
            continue;
          case 4:
            num3 = row == 6 ? 1 : 0;
            break;
          default:
            goto label_9;
        }
        flag = num3 != 0;
        num1 = 1559477483;
      }
label_9:
      return flag;
    }

    private static bool IsStartRookCell(int row, int column)
    {
      if (row != 0)
        goto label_5;
label_1:
      int num1 = 890836705;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 50440131)) % 9U)
        {
          case 0:
            if (column != 7)
            {
              num1 = (int) num2 * 1056991746 ^ -2105111107;
              continue;
            }
            break;
          case 1:
            if (column != 0)
            {
              num1 = (int) num2 * -725739196 ^ 1539972576;
              continue;
            }
            break;
          case 2:
            num3 = column == 7 ? 1 : 0;
            goto label_14;
          case 4:
            if (row != 7)
            {
              num3 = 0;
              goto label_14;
            }
            else
            {
              num1 = 291616030;
              continue;
            }
          case 5:
            goto label_1;
          case 6:
            goto label_5;
          case 7:
            if (column != 0)
            {
              num1 = (int) num2 * -37946645 ^ -928258425;
              continue;
            }
            break;
          case 8:
            int num4;
            num1 = num4 = row != 7 ? 1053151404 : (num4 = 807912962);
            continue;
          default:
            goto label_17;
        }
        num3 = 1;
label_14:
        flag = num3 != 0;
        num1 = 1210490856;
      }
label_17:
      return flag;
label_5:
      num1 = row != 0 ? 774861245 : (num1 = 1220499907);
      goto label_2;
    }

    private static bool IsStartKnightCell(int row, int column)
    {
label_1:
      int num1 = -1988203474;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1905365277)) % 11U)
        {
          case 0:
            if (column != 6)
            {
              num1 = (int) num2 * -922830439 ^ 1479209463;
              continue;
            }
            break;
          case 1:
            num1 = (int) num2 * -1259060052 ^ 154322499;
            continue;
          case 2:
            num3 = column == 6 ? 1 : 0;
            goto label_12;
          case 3:
            if (column != 1)
            {
              num1 = (int) num2 * 1688146132 ^ 973383108;
              continue;
            }
            break;
          case 4:
            if (column != 1)
            {
              num1 = (int) num2 * -1609409219 ^ 1824101827;
              continue;
            }
            break;
          case 5:
            int num4 = row == 0 ? -1923228729 : (num4 = -203779830);
            num1 = num4 ^ (int) num2 * -1044456450;
            continue;
          case 6:
            if (row != 7)
            {
              num3 = 0;
              goto label_12;
            }
            else
            {
              num1 = -1996173950;
              continue;
            }
          case 7:
            goto label_1;
          case 8:
            int num5;
            num1 = num5 = row == 0 ? -1580997262 : (num5 = -229063842);
            continue;
          case 10:
            int num6;
            num1 = num6 = row == 7 ? -1659436676 : (num6 = -1777086944);
            continue;
          default:
            goto label_19;
        }
        num3 = 1;
label_12:
        flag = num3 != 0;
        num1 = -333694273;
      }
label_19:
      return flag;
    }

    private static bool IsStartBishopCell(int row, int column)
    {
label_1:
      int num1 = -743988891;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -994886543)) % 11U)
        {
          case 1:
            if (row != 7)
            {
              num3 = 0;
              goto label_8;
            }
            else
            {
              num1 = -1356561024;
              continue;
            }
          case 2:
            if (column != 2)
            {
              num1 = (int) num2 * -1233917318 ^ -268344258;
              continue;
            }
            break;
          case 3:
            if (column != 5)
            {
              num1 = (int) num2 * -1350330540 ^ 135542955;
              continue;
            }
            break;
          case 4:
            int num4;
            num1 = num4 = row != 0 ? -1259907369 : (num4 = -708129326);
            continue;
          case 5:
            int num5 = row == 0 ? 1949293353 : (num5 = 585658838);
            num1 = num5 ^ (int) num2 * -1505784258;
            continue;
          case 6:
            num3 = column == 5 ? 1 : 0;
            goto label_8;
          case 7:
            int num6;
            num1 = num6 = row != 7 ? -449191368 : (num6 = -145350322);
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 167989137 ^ 1774060275;
            continue;
          case 10:
            if (column != 2)
            {
              num1 = (int) num2 * -1431607506 ^ -1999065586;
              continue;
            }
            break;
          default:
            goto label_19;
        }
        num3 = 1;
label_8:
        flag = num3 != 0;
        num1 = -168077543;
      }
label_19:
      return flag;
    }

    private static bool IsStartQueenCell(int row, int column)
    {
      if (row != 0)
        goto label_9;
label_1:
      int num1 = -203450925;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -601783181)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_9;
          case 3:
            if (column != 3)
            {
              num1 = (int) num2 * -905558615 ^ 1765385756;
              continue;
            }
            goto label_7;
          case 4:
            goto label_5;
          default:
            goto label_11;
        }
      }
label_5:
      int num3 = column == 3 ? 1 : 0;
      goto label_8;
label_7:
      num3 = 1;
      goto label_8;
label_11:
      bool flag;
      return flag;
label_8:
      flag = num3 != 0;
      num1 = -1381722770;
      goto label_2;
label_9:
      if (row != 7)
      {
        num3 = 0;
        goto label_8;
      }
      else
      {
        num1 = -1048478074;
        goto label_2;
      }
    }

    private static bool IsStartKingCell(int row, int column)
    {
label_1:
      int num1 = 1901794411;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 564365435)) % 7U)
        {
          case 0:
            num3 = column == 4 ? 1 : 0;
            break;
          case 1:
            if (row != 7)
            {
              num3 = 0;
              break;
            }
            num1 = 2129414681;
            continue;
          case 2:
            if (column != 4)
            {
              num1 = (int) num2 * -315955818 ^ 1247739461;
              continue;
            }
            num3 = 1;
            break;
          case 3:
            num1 = (int) num2 * 1456790098 ^ 1891200673;
            continue;
          case 5:
            int num4 = row != 0 ? -1986221535 : (num4 = -99390715);
            num1 = num4 ^ (int) num2 * -185377407;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = 508311931;
      }
label_13:
      return flag;
    }

    static ArgumentException \u202C⁭‌‎⁬⁯⁪‬‭‭‪⁪⁫‮‬‪⁭⁮⁮‬⁯⁭⁮⁮‮‌⁫⁯⁯⁬‮​‍‎‮‍⁮‍⁮‏‮(
      [In] string obj0)
    {
      return new ArgumentException(obj0);
    }
  }
}
