// Decompiled with JetBrains decompiler
// Type: SpatialController.SkeletonDraw
// Assembly: Rea, Version=1.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 014AEBFB-7EE8-4B39-A7D6-AE7A18313427
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-fb4fb24a50b7f600c65d2bbc049f44337673fa7b0e6e16b6967c06d0cfb666ad.exe

using OpenNI;
using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Windows;
using System.Windows.Media.Imaging;

namespace SpatialController
{
  public class SkeletonDraw
  {
    private DepthGenerator depthGenerator;

    public void DrawStickFigure(
      ref WriteableBitmap image,
      DepthGenerator depthGenerator,
      DepthMetaData data,
      UserGenerator userGenerator,
      Ray3D[] rays)
    {
      Point3D point3D;
      // ISSUE: explicit constructor call
      ((Point3D) ref point3D).\u002Ector((float) ((MapMetaData) data).XRes, (float) ((MapMetaData) data).YRes, (float) data.ZRes);
      Point3D realWorld = depthGenerator.ConvertProjectiveToRealWorld(point3D);
      this.depthGenerator = depthGenerator;
      int xres = ((MapMetaData) data).XRes;
      int yres = ((MapMetaData) data).YRes;
      foreach (int user in userGenerator.GetUsers())
      {
        if (userGenerator.SkeletonCapability.IsTracking(user))
          this.DrawSingleUser(ref image, user, userGenerator, realWorld);
      }
    }

    public void DrawSingleUser(
      ref WriteableBitmap image,
      int id,
      UserGenerator userGenerator,
      Point3D corner)
    {
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 9, (SkeletonJoint) 7, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 7, (SkeletonJoint) 6, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 6, (SkeletonJoint) 3, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 6, (SkeletonJoint) 12, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 3, (SkeletonJoint) 12, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 12, (SkeletonJoint) 13, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 13, (SkeletonJoint) 15, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 2, (SkeletonJoint) 1, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 3, (SkeletonJoint) 17, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 3, (SkeletonJoint) 21, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 17, (SkeletonJoint) 21, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 17, (SkeletonJoint) 18, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 18, (SkeletonJoint) 20, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 21, (SkeletonJoint) 22, corner);
      this.DrawStickLine(ref image, id, userGenerator, (SkeletonJoint) 22, (SkeletonJoint) 24, corner);
      this.DrawHeadAndHands(ref image, id, userGenerator, this.depthGenerator);
      SkeletonJointPosition skeletonJointPosition1 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition2 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition3 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition4 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition5 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 6);
      SkeletonJointPosition skeletonJointPosition6 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 12);
      skeletonJointPosition3 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 2);
      ref SkeletonJointPosition local = ref skeletonJointPosition4;
      Point3D position = ((SkeletonJointPosition) ref skeletonJointPosition5).Position;
      double x1 = (double) ((Point3D) ref position).X;
      position = ((SkeletonJointPosition) ref skeletonJointPosition6).Position;
      double x2 = (double) ((Point3D) ref position).X;
      double num1 = (x1 + x2) / 2.0;
      position = ((SkeletonJointPosition) ref skeletonJointPosition5).Position;
      double y1 = (double) ((Point3D) ref position).Y;
      position = ((SkeletonJointPosition) ref skeletonJointPosition6).Position;
      double y2 = (double) ((Point3D) ref position).Y;
      double num2 = (y1 + y2) / 2.0;
      position = ((SkeletonJointPosition) ref skeletonJointPosition5).Position;
      double z1 = (double) ((Point3D) ref position).Z;
      position = ((SkeletonJointPosition) ref skeletonJointPosition6).Position;
      double z2 = (double) ((Point3D) ref position).Z;
      double num3 = (z1 + z2) / 2.0;
      Point3D point3D = new Point3D((float) num1, (float) num2, (float) num3);
      ((SkeletonJointPosition) ref local).Position = point3D;
      ((SkeletonJointPosition) ref skeletonJointPosition4).Confidence = (float) (((double) ((SkeletonJointPosition) ref skeletonJointPosition5).Confidence + (double) ((SkeletonJointPosition) ref skeletonJointPosition6).Confidence) / 2.0);
    }

    public void DrawStickLine(
      ref WriteableBitmap image,
      int id,
      UserGenerator userGenerator,
      SkeletonJoint first,
      SkeletonJoint second,
      Point3D corner)
    {
      SkeletonJointPosition skeletonJointPosition1 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition2 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition3 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, first);
      SkeletonJointPosition skeletonJointPosition4 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, second);
      if ((double) ((SkeletonJointPosition) ref skeletonJointPosition3).Confidence != 1.0 || (double) ((SkeletonJointPosition) ref skeletonJointPosition4).Confidence != 1.0)
      {
        Point3D position = ((SkeletonJointPosition) ref skeletonJointPosition3).Position;
        int num;
        if ((double) ((Point3D) ref position).X == 0.0)
        {
          position = ((SkeletonJointPosition) ref skeletonJointPosition3).Position;
          if ((double) ((Point3D) ref position).Y == 0.0)
          {
            position = ((SkeletonJointPosition) ref skeletonJointPosition3).Position;
            if ((double) ((Point3D) ref position).Z == 0.0)
            {
              num = 1;
              goto label_10;
            }
          }
        }
        position = ((SkeletonJointPosition) ref skeletonJointPosition4).Position;
        if ((double) ((Point3D) ref position).X == 0.0)
        {
          position = ((SkeletonJointPosition) ref skeletonJointPosition4).Position;
          if ((double) ((Point3D) ref position).Y == 0.0)
          {
            position = ((SkeletonJointPosition) ref skeletonJointPosition4).Position;
            num = (double) ((Point3D) ref position).Z == 0.0 ? 1 : 0;
            goto label_10;
          }
        }
        num = 0;
label_10:
        if (num != 0)
          return;
      }
      this.DrawTheLine(ref image, ref skeletonJointPosition3, ref skeletonJointPosition4);
    }

    public void DrawTheLine(
      ref WriteableBitmap image,
      ref SkeletonJointPosition joint1,
      ref SkeletonJointPosition joint2)
    {
      this.DrawTheLine(ref image, this.ConvertCoord(joint1, 0), this.ConvertCoord(joint2, 0));
    }

    public void DrawTheLine(ref WriteableBitmap image, int[] joint1Coord, int[] joint2Coord)
    {
      image.Lock();
      using (Graphics graphics = Graphics.FromImage((Image) new Bitmap(image.PixelWidth, image.PixelHeight, image.BackBufferStride, PixelFormat.Format24bppRgb, image.BackBuffer)))
      {
        graphics.SmoothingMode = SmoothingMode.HighSpeed;
        graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
        graphics.CompositingMode = CompositingMode.SourceCopy;
        graphics.CompositingQuality = CompositingQuality.HighSpeed;
        graphics.DrawLine(Pens.BlueViolet, joint1Coord[0], joint1Coord[1], joint2Coord[0], joint2Coord[1]);
        graphics.Dispose();
      }
      image.AddDirtyRect(new Int32Rect(0, 0, image.PixelWidth, image.PixelHeight));
      image.Unlock();
    }

    public void DrawHeadAndHands(
      ref WriteableBitmap image,
      int id,
      UserGenerator userGenerator,
      DepthGenerator depthGenerator)
    {
      int num1 = 40;
      int num2 = 20;
      SkeletonJointPosition skeletonJointPosition1 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition2 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition3 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition4 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 1);
      SkeletonJointPosition skeletonJointPosition5 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 9);
      SkeletonJointPosition skeletonJointPosition6 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, (SkeletonJoint) 15);
      image.Lock();
      using (Graphics graphics = Graphics.FromImage((Image) new Bitmap(image.PixelWidth, image.PixelHeight, image.BackBufferStride, PixelFormat.Format24bppRgb, image.BackBuffer)))
      {
        graphics.SmoothingMode = SmoothingMode.HighSpeed;
        graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
        graphics.CompositingMode = CompositingMode.SourceCopy;
        graphics.CompositingQuality = CompositingQuality.HighSpeed;
        int[] numArray1 = this.ConvertCoord(skeletonJointPosition4, -num1 / 2);
        int[] numArray2 = this.ConvertCoord(skeletonJointPosition5, -num2 / 2);
        int[] numArray3 = this.ConvertCoord(skeletonJointPosition6, -num2 / 2);
        graphics.DrawEllipse(Pens.BlueViolet, numArray1[0], numArray1[1], num1, num1);
        graphics.DrawEllipse(Pens.BlueViolet, numArray2[0], numArray2[1], num2, num2);
        graphics.DrawEllipse(Pens.BlueViolet, numArray3[0], numArray3[1], num2, num2);
        graphics.Dispose();
      }
      image.AddDirtyRect(new Int32Rect(0, 0, image.PixelWidth, image.PixelHeight));
      image.Unlock();
    }

    public int[] ConvertCoord(SkeletonJointPosition joint, int offset)
    {
      Point3D projective = this.depthGenerator.ConvertRealWorldToProjective(((SkeletonJointPosition) ref joint).Position);
      return new int[2]
      {
        (double) ((Point3D) ref projective).X >= 0.0 ? (int) ((double) ((Point3D) ref projective).X + (double) offset) : 0,
        (double) ((Point3D) ref projective).Y >= 0.0 ? (int) ((double) ((Point3D) ref projective).Y + (double) offset) : 0
      };
    }

    public void DrawStickPoint(
      ref WriteableBitmap image,
      SkeletonJointPosition joint,
      Point3D corner)
    {
      byte[] numArray = new byte[36]
      {
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0,
        (byte) 0,
        (byte) 0,
        byte.MaxValue,
        (byte) 0
      };
      image.Lock();
      WriteableBitmap writeableBitmap = image;
      Point3D position = ((SkeletonJointPosition) ref joint).Position;
      int int32_1 = Convert.ToInt32(((Point3D) ref position).X - 1f);
      position = ((SkeletonJointPosition) ref joint).Position;
      int int32_2 = Convert.ToInt32(((Point3D) ref position).Y - 1f);
      Int32Rect sourceRect = new Int32Rect(int32_1, int32_2, 3, 3);
      byte[] pixels = numArray;
      writeableBitmap.WritePixels(sourceRect, (Array) pixels, 4, 0);
      image.Unlock();
    }

    public void DrawOrientation(
      ref WriteableBitmap image,
      int id,
      UserGenerator userGenerator,
      SkeletonJoint joint,
      Point3D corner)
    {
      SkeletonJointOrientation jointOrientation1 = new SkeletonJointOrientation();
      SkeletonJointPosition skeletonJointPosition1 = new SkeletonJointPosition();
      SkeletonJointPosition skeletonJointPosition2 = userGenerator.SkeletonCapability.GetSkeletonJointPosition(id, joint);
      SkeletonJointOrientation jointOrientation2 = userGenerator.SkeletonCapability.GetSkeletonJointOrientation(id, joint);
      if ((double) ((SkeletonJointPosition) ref skeletonJointPosition2).Confidence != 1.0 && (double) ((SkeletonJointOrientation) ref jointOrientation2).Confidence != 1.0)
        return;
      SkeletonJointPosition joint1 = new SkeletonJointPosition();
      SkeletonJointPosition joint2 = new SkeletonJointPosition();
      ((SkeletonJointPosition) ref joint1).Confidence = ((SkeletonJointPosition) ref joint2).Confidence = 1f;
      ((SkeletonJointPosition) ref joint1).Position = ((SkeletonJointPosition) ref skeletonJointPosition2).Position;
      ref SkeletonJointPosition local1 = ref joint2;
      Point3D position1 = ((SkeletonJointPosition) ref joint1).Position;
      double num1 = (double) ((Point3D) ref position1).X + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).X1;
      Point3D position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num2 = (double) ((Point3D) ref position2).Y + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).Y1;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num3 = (double) ((Point3D) ref position2).Z + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).Z1;
      Point3D point3D1 = new Point3D((float) num1, (float) num2, (float) num3);
      ((SkeletonJointPosition) ref local1).Position = point3D1;
      this.DrawTheLine(ref image, ref joint1, ref joint2);
      ((SkeletonJointPosition) ref joint1).Position = ((SkeletonJointPosition) ref skeletonJointPosition2).Position;
      ref SkeletonJointPosition local2 = ref joint2;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num4 = (double) ((Point3D) ref position2).X + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).X2;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num5 = (double) ((Point3D) ref position2).Y + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).Y2;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num6 = (double) ((Point3D) ref position2).Z + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).Z2;
      Point3D point3D2 = new Point3D((float) num4, (float) num5, (float) num6);
      ((SkeletonJointPosition) ref local2).Position = point3D2;
      this.DrawTheLine(ref image, ref joint1, ref joint2);
      ((SkeletonJointPosition) ref joint1).Position = ((SkeletonJointPosition) ref skeletonJointPosition2).Position;
      ref SkeletonJointPosition local3 = ref joint2;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num7 = (double) ((Point3D) ref position2).X + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).X3;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num8 = (double) ((Point3D) ref position2).Y + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).Y3;
      position2 = ((SkeletonJointPosition) ref joint1).Position;
      double num9 = (double) ((Point3D) ref position2).Z + 100.0 * (double) ((SkeletonJointOrientation) ref jointOrientation2).Z3;
      Point3D point3D3 = new Point3D((float) num7, (float) num8, (float) num9);
      ((SkeletonJointPosition) ref local3).Position = point3D3;
      this.DrawTheLine(ref image, ref joint1, ref joint2);
    }
  }
}
