// Decompiled with JetBrains decompiler
// Type: IRefl.Pools.Strategy
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.States;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;

namespace IRefl.Pools
{
  public class Strategy
  {
    private string tests;
    private ElementNameStyle m_Pool;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Strategy(string first, ElementNameStyle selection)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 2;
            case 2:
            case 3:
              this.tests = first;
              this.m_Pool = selection;
              num2 = 5;
              continue;
            case 4:
              goto label_1;
            case 5:
              goto label_7;
            default:
              goto label_5;
          }
        }
label_1:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 0;
        continue;
label_5:
        num1 = 3;
      }
label_7:;
    }

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.tests;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.tests = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ElementNameStyle DisableProcess() => this.m_Pool;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CountProcess(ElementNameStyle reference) => this.m_Pool = reference;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string OrderProcess() => string.Format("AXIS[\"{0}\", {1}]", (object) this.Name, (object) this.DisableProcess().ToString().ToUpper(CultureInfo.InvariantCulture));

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string EnableProcess() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_AxisInfo Name=\"{0}\" Orientation=\"{1}\"/>", new object[2]
    {
      (object) this.Name,
      (object) this.DisableProcess().ToString().ToUpper(CultureInfo.InvariantCulture)
    });

    internal static bool CancelList() => true;

    internal static bool CloneList() => false;
  }
}
