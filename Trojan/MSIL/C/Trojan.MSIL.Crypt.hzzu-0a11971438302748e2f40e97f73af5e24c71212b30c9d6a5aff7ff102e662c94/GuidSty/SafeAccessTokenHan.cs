// Decompiled with JetBrains decompiler
// Type: GuidSty.SafeAccessTokenHan
// Assembly: DictionaryValueCollect, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 264A7E74-FCA9-4101-A215-90F8B6150D1A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan.MSIL.Crypt.hzzu-0a11971438302748e2f40e97f73af5e24c71212b30c9d6a5aff7ff102e662c94.exe

using CriticalHandleMinusOneIsInva;
using EncoderFallb;
using IMoni;
using Impl;
using RemotingConfigHand;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using ThreeElementAsyncLocalValue;
using VerificationExcept;

namespace GuidSty
{
  internal class SafeAccessTokenHan
  {
    private const int BURST = 21;

    public List<UnknownWrap> PrepareDeck()
    {
label_1:
      int num1 = 866851891;
      List<UnknownWrap> unknownWrapList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1427203206)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            unknownWrapList = new List<UnknownWrap>();
            num1 = (int) num2 * 1472481891 ^ -1584382169;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      // ISSUE: type reference
      IEnumerator enumerator1 = SafeAccessTokenHan.\u200C‭⁭‬‍⁯⁯‌⁯‫⁯​⁪​‍‮⁯‎⁫‭⁮​⁬⁮⁯‫‎‪‌‬‎⁬​‬⁬⁯‍‎⁪‮(SafeAccessTokenHan.\u202C‫⁮⁪‪‫⁮⁭⁪‭⁬‌⁮⁭⁭‎⁮⁯‫⁫‬‎⁯‫⁯​⁭‏⁯‬‌⁬‫‮⁫‌‪‫‌‮(SafeAccessTokenHan.\u202D​⁮‫‮‪‬⁭‭‌⁯‏‍‌⁬⁪⁭⁭⁬⁬‬⁭⁫​⁫⁯‬‪‮‍‏‎⁮⁫‎‍‍‍⁯⁯‮(__typeref (PrimaryInteropAssemblyAttrib))));
      try
      {
label_25:
        while (SafeAccessTokenHan.\u206B‭​‎⁭‏⁮‭‭‍⁪‪​‫‬⁬​​‏​‬‫‪⁫‌⁬‬⁪⁬​‫⁪⁮‪​‭⁯⁫‪‫‮(enumerator1))
        {
label_8:
          PrimaryInteropAssemblyAttrib Pip = (PrimaryInteropAssemblyAttrib) SafeAccessTokenHan.\u200F‪⁬‬‮‌⁮⁫⁬​‫‎​‎‍‭‭‍‌‭‮​‭⁫‏⁫⁯‬‬⁮‍‮‍⁫​⁯‌‏‎‍‮(enumerator1);
          int num3 = 1612412494;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 1427203206)) % 3U)
            {
              case 0:
                num3 = 1950156932;
                continue;
              case 1:
                goto label_8;
              default:
                goto label_9;
            }
          }
label_9:
          // ISSUE: type reference
          IEnumerator enumerator2 = SafeAccessTokenHan.\u200C‭⁭‬‍⁯⁯‌⁯‫⁯​⁪​‍‮⁯‎⁫‭⁮​⁬⁮⁯‫‎‪‌‬‎⁬​‬⁬⁯‍‎⁪‮(SafeAccessTokenHan.\u202C‫⁮⁪‪‫⁮⁭⁪‭⁬‌⁮⁭⁭‎⁮⁯‫⁫‬‎⁯‫⁯​⁭‏⁯‬‌⁬‫‮⁫‌‪‫‌‮(SafeAccessTokenHan.\u202D​⁮‫‮‪‬⁭‭‌⁯‏‍‌⁬⁪⁭⁭⁬⁬‬⁭⁫​⁫⁯‬‪‮‍‏‎⁮⁫‎‍‍‍⁯⁯‮(__typeref (RSASignaturePadd))));
          try
          {
label_15:
            int num5 = !SafeAccessTokenHan.\u206B‭​‎⁭‏⁮‭‭‍⁪‪​‫‬⁬​​‏​‬‫‪⁫‌⁬‬⁪⁬​‫⁪⁮‪​‭⁯⁫‪‫‮(enumerator2) ? 481973631 : (num5 = 1956024044);
            RSASignaturePadd Suit;
            UnknownWrap unknownWrap;
            while (true)
            {
              uint num6;
              switch ((num6 = (uint) (num5 ^ 1427203206)) % 7U)
              {
                case 0:
                  unknownWrap = new UnknownWrap(Suit, Pip);
                  num5 = (int) num6 * 1697512596 ^ -533739222;
                  continue;
                case 1:
                  Suit = (RSASignaturePadd) SafeAccessTokenHan.\u200F‪⁬‬‮‌⁮⁫⁬​‫‎​‎‍‭‭‍‌‭‮​‭⁫‏⁫⁯‬‬⁮‍‮‍⁫​⁯‌‏‎‍‮(enumerator2);
                  num5 = 972387634;
                  continue;
                case 2:
                  num5 = (int) num6 * -543456266 ^ 619640320;
                  continue;
                case 3:
                  num5 = 1956024044;
                  continue;
                case 4:
                  unknownWrapList.Add(unknownWrap);
                  num5 = (int) num6 * -542814616 ^ 17508019;
                  continue;
                case 5:
                  goto label_15;
                default:
                  goto label_25;
              }
            }
          }
          finally
          {
            IDisposable disposable = enumerator2 as IDisposable;
label_19:
            int num7 = 198117023;
            while (true)
            {
              uint num8;
              switch ((num8 = (uint) (num7 ^ 1427203206)) % 5U)
              {
                case 0:
                  goto label_19;
                case 2:
                  SafeAccessTokenHan.\u200E⁭⁭‫⁭‬‫⁮⁭‬⁭‫‮‏‎⁬⁭⁬‪‬⁫‭‌‫‏⁯⁫⁯⁬‭‪‭‮‫‎‮‌⁪⁯‫‮(disposable);
                  num7 = (int) num8 * 1823331246 ^ 1595202659;
                  continue;
                case 3:
                  num7 = (int) num8 * 1856600616 ^ 1157803498;
                  continue;
                case 4:
                  int num9 = disposable == null ? -2031177600 : (num9 = -28450073);
                  num7 = num9 ^ (int) num8 * 1268444418;
                  continue;
                default:
                  goto label_24;
              }
            }
label_24:;
          }
        }
      }
      finally
      {
        if (enumerator1 is IDisposable disposable)
        {
label_27:
          int num10 = 1802227592;
          while (true)
          {
            uint num11;
            switch ((num11 = (uint) (num10 ^ 1427203206)) % 4U)
            {
              case 0:
                goto label_27;
              case 2:
                SafeAccessTokenHan.\u200E⁭⁭‫⁭‬‫⁮⁭‬⁭‫‮‏‎⁬⁭⁬‪‬⁫‭‌‫‏⁯⁫⁯⁬‭‪‭‮‫‎‮‌⁪⁯‫‮(disposable);
                num10 = (int) num11 * -1612079187 ^ -1611618585;
                continue;
              case 3:
                num10 = (int) num11 * -1734999430 ^ 1672539545;
                continue;
              default:
                goto label_31;
            }
          }
        }
label_31:;
      }
      return unknownWrapList;
    }

    public List<UnknownWrap> ShuffleDeck(List<UnknownWrap> Deck)
    {
label_1:
      int num1 = -1440408419;
      bool flag;
      int index;
      int num2;
      Random random;
      UnknownWrap unknownWrap;
      List<UnknownWrap> unknownWrapList;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1761337900)) % 14U)
        {
          case 0:
            index = SafeAccessTokenHan.\u200E⁮⁬‏‮‎‪‏‍‬‍⁬‬⁭⁬⁬‪‎‏‮⁭‌‎⁭⁫⁬‮‏‪​‬‏​⁮⁮⁬​‍​⁬‮(random, 0, num2--);
            unknownWrap = Deck.ElementAt<UnknownWrap>(num2 + 1);
            num1 = -1430220981;
            continue;
          case 1:
            random = SafeAccessTokenHan.\u206E‌⁯⁫⁭​⁯‬‎⁮​‬⁭​‎⁮‎‎‬‮​⁭‭⁯‌‍‪‫⁫‍⁮‭⁭‌‫⁪‏‍‎‮‮();
            num2 = Deck.Count - 1;
            num1 = (int) num3 * -1751912751 ^ -51628357;
            continue;
          case 2:
            unknownWrap = (UnknownWrap) null;
            num1 = (int) num3 * -1083244271 ^ -2008051520;
            continue;
          case 3:
            int num4 = !flag ? 954226374 : (num4 = 1427636703);
            num1 = num4 ^ (int) num3 * 2132604809;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num3 * 1860748992 ^ -1665517494;
            continue;
          case 6:
            num1 = (int) num3 * 555300718 ^ -1125275584;
            continue;
          case 7:
            num1 = (int) num3 * -313245447 ^ -547391610;
            continue;
          case 9:
            unknownWrapList = Deck;
            num1 = (int) num3 * -1494518142 ^ -617623261;
            continue;
          case 10:
            Deck[index] = unknownWrap;
            num1 = (int) num3 * 1537414254 ^ -1840856973;
            continue;
          case 11:
            flag = num2 != 0;
            num1 = -1499422457;
            continue;
          case 12:
            index = -1;
            num1 = (int) num3 * 621157044 ^ 2050233537;
            continue;
          case 13:
            Deck[num2 + 1] = Deck.ElementAt<UnknownWrap>(index);
            num1 = (int) num3 * -1874614745 ^ 233822211;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return unknownWrapList;
    }

    public void DealCardsSingleHand(ConfiguredTaskAwaita GameController)
    {
label_1:
      int num1 = 851453233;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        UnknownWrap unknownWrap;
        int num3;
        switch ((num2 = (uint) (num1 ^ 35856882)) % 29U)
        {
          case 0:
            unknownWrap = GameController.Game.Deck.ElementAt<UnknownWrap>(0);
            num1 = (int) num2 * 1084830261 ^ 920135568;
            continue;
          case 1:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = 1624633290;
            continue;
          case 2:
            num1 = (int) num2 * -621025851 ^ -247230554;
            continue;
          case 3:
            num3 = GameController.Game.Machine.Hand1.Count != 2 ? 1 : 0;
            break;
          case 4:
            num1 = 891096282;
            continue;
          case 5:
            num1 = (int) num2 * -1575450969 ^ 1425733221;
            continue;
          case 6:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -2144900831 ^ -381569002;
            continue;
          case 7:
            flag1 = false;
            num1 = (int) num2 * 1949120229 ^ 1415409284;
            continue;
          case 8:
            num1 = (int) num2 * 1466013841 ^ -1603408671;
            continue;
          case 9:
            flag1 = true;
            num1 = (int) num2 * -777982227 ^ -565089267;
            continue;
          case 10:
            GameController.Game.Deck.RemoveAt(0);
            int num4 = flag1 ? 804571484 : (num4 = 2022740437);
            num1 = num4 ^ (int) num2 * 753407823;
            continue;
          case 11:
            int num5 = GameController.Game.Machine.Hand1.Count != 0 ? 2069727372 : (num5 = 1114271834);
            num1 = num5 ^ (int) num2 * 375657023;
            continue;
          case 12:
            if (GameController.Game.Player.Hand1.Count != 2)
            {
              num3 = 1;
              break;
            }
            num1 = 2032054359;
            continue;
          case 13:
            goto label_1;
          case 14:
            num1 = (int) num2 * 987989336 ^ 452501633;
            continue;
          case 15:
            flag2 = GameController.Game.Player.Hand1.Count != 0;
            num1 = 879621367;
            continue;
          case 16:
            flag1 = false;
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Machine.Hand1Flipped);
            num1 = (int) num2 * -476263028 ^ 768464321;
            continue;
          case 17:
            num1 = (int) num2 * -1457647456 ^ 1732395843;
            continue;
          case 18:
            GameController.Game.Machine.Hand1.Add(unknownWrap);
            num1 = 19811394;
            continue;
          case 19:
            unknownWrap.Set = false;
            num1 = (int) num2 * 301456150 ^ -942959018;
            continue;
          case 20:
            GameController.Game.Player.Hand1.Add(unknownWrap);
            num1 = 1087427807;
            continue;
          case 21:
            goto label_3;
          case 22:
            num1 = (int) num2 * -2106294905 ^ -2021340422;
            continue;
          case 23:
            num1 = (int) num2 * -561547396 ^ 92644013;
            continue;
          case 24:
            SafeAccessTokenHan.\u206E‌⁯⁫⁭​⁯‬‎⁮​‬⁭​‎⁮‎‎‬‮​⁭‭⁯‌‍‪‫⁫‍⁮‭⁭‌‫⁪‏‍‎‮‮();
            num1 = (int) num2 * -1286659703 ^ 2140984153;
            continue;
          case 25:
            unknownWrap.Set = false;
            num1 = (int) num2 * -1182767717 ^ -428443467;
            continue;
          case 26:
            num1 = (int) num2 * -1996101246 ^ 244618843;
            continue;
          case 27:
            int num6 = flag2 ? 1722501429 : (num6 = 2006515026);
            num1 = num6 ^ (int) num2 * 47431371;
            continue;
          case 28:
            num1 = (int) num2 * 1912669514 ^ -1919222835;
            continue;
          default:
            goto label_34;
        }
        int num7;
        num1 = num7 = num3 != 0 ? 796425821 : (num7 = 1188420374);
      }
label_3:
      return;
label_34:;
    }

    public void PassPlayerTurn(ConfiguredTaskAwaita GameController)
    {
      ++GameController.Game.TurnWho;
label_1:
      int num1 = -1391938756;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -870890953)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1275928893 ^ 240350742;
            continue;
          case 3:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 1465447752 ^ -1812030074;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.SimulateMachineRoundAsync(GameController);
    }

    public void AllowDraw1Card(ConfiguredTaskAwaita GameController)
    {
label_1:
      int num1 = -252648869;
      DTStr dtStr;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1724672522)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 659716807 ^ -633055620;
            continue;
          case 2:
            num1 = (int) num2 * -1735786556 ^ -1155222435;
            continue;
          case 3:
            goto label_3;
          case 4:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -1322540690 ^ -1361685476;
            continue;
          case 5:
            GameController.GameView.ToogleGameButtonsState(GameController.Game);
            num1 = (int) num2 * -1491764860 ^ 44740025;
            continue;
          case 6:
            int num3 = flag ? 567229374 : (num3 = 1869325416);
            num1 = num3 ^ (int) num2 * 502869941;
            continue;
          case 7:
            num1 = (int) num2 * -1947396510 ^ -793156698;
            continue;
          case 8:
            int num4 = (int) SafeAccessTokenHan.\u206E‌‫⁪⁬⁭⁫‮⁪‍​‫‮‫‍‬‭⁬‌‏‫⁫‎⁪‍‎⁭‫⁪‬‬‪‪⁮‏⁯⁭‫‎⁬‮((Form) dtStr);
            num1 = (int) num2 * -132185224 ^ -1394965939;
            continue;
          case 9:
            dtStr = new DTStr(GameController);
            num1 = (int) num2 * 1275767026 ^ 1734977422;
            continue;
          case 10:
            flag = GameController.Game.Player.Hand2.Count != 0;
            num1 = (int) num2 * -1000161396 ^ 1553751576;
            continue;
          case 11:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = -1919697532;
            continue;
          case 12:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -1788235856 ^ 720482088;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public void DrawToSelectedHand(string Hand, ConfiguredTaskAwaita GameController)
    {
label_1:
      int num1 = 8606287;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1932151760)) % 14U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = (int) num2 * -115793595 ^ -32474286;
            continue;
          case 2:
            num1 = (int) num2 * -1687629853 ^ 878452278;
            continue;
          case 3:
            GameController.UpdateLogs("Hit card Hand2;");
            num1 = (int) num2 * -2138033949 ^ -1686336480;
            continue;
          case 4:
            num1 = (int) num2 * -116965769 ^ 1223312509;
            continue;
          case 5:
            int num3 = !SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? 1418288383 : (num3 = 899510628);
            num1 = num3 ^ (int) num2 * 1407740734;
            continue;
          case 6:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -49629129 ^ -584023746;
            continue;
          case 7:
            num1 = 253762455;
            continue;
          case 8:
            GameController.GameView.SetLabels(GameController.Game);
            GameController.GameView.ToogleGameButtonsState(GameController.Game);
            num1 = 745870778;
            continue;
          case 9:
            this.Draw1CardFor("Player", "Hand2", true, GameController);
            num1 = (int) num2 * 945329489 ^ 1481902621;
            continue;
          case 10:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 1300073973 ^ -4511254;
            continue;
          case 11:
            num1 = (int) num2 * 526019984 ^ -269479378;
            continue;
          case 12:
            GameController.UpdateLogs("Hit card Hand1;");
            num1 = (int) num2 * 1735737191 ^ -1952399563;
            continue;
          case 13:
            goto label_3;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    public void DoubleBetThenFlipHands(ConfiguredTaskAwaita GameController)
    {
label_1:
      int num1 = -1876740511;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -288934958)) % 47U)
        {
          case 0:
            GameController.UpdateLogs("Flip player hands;");
            num1 = (int) num2 * -1147294312 ^ -150130563;
            continue;
          case 1:
            num1 = (int) num2 * 747725518 ^ 237966725;
            continue;
          case 2:
            this.FlipPlayerHands(GameController);
            num1 = (int) num2 * -906491446 ^ 1406358248;
            continue;
          case 3:
            num1 = (int) num2 * 102757313 ^ -326533145;
            continue;
          case 4:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -932513109 ^ -216912497;
            continue;
          case 5:
            int num4 = !flag1 ? 2060082584 : (num4 = 1717181607);
            num1 = num4 ^ (int) num2 * -212703047;
            continue;
          case 6:
            num1 = (int) num2 * -1951589399 ^ -1368927096;
            continue;
          case 7:
            flag1 = GameController.Game.GetHandSumFor(GameController.Game.Player.Hand1) > 21;
            num1 = (int) num2 * 46950690 ^ 1396247966;
            continue;
          case 8:
            num1 = (int) num2 * 135337139 ^ -512168859;
            continue;
          case 9:
            num1 = (int) num2 * -550503604 ^ 351090946;
            continue;
          case 10:
            num1 = (int) num2 * 1708597304 ^ 1081691039;
            continue;
          case 11:
            num1 = (int) num2 * -274747394 ^ 1898868061;
            continue;
          case 12:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -971391749 ^ -1412475275;
            continue;
          case 13:
            num1 = (int) num2 * -1195693233 ^ -139075307;
            continue;
          case 14:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            this.Draw1CardFor("Player", "Hand2", true, GameController);
            num1 = -1141152406;
            continue;
          case 15:
            num3 = !GameController.Game.Player.Hand2Flipped ? 1 : 0;
            break;
          case 16:
            num1 = (int) num2 * 1994532209 ^ 773273107;
            continue;
          case 17:
            int num5 = !flag2 ? -1853152221 : (num5 = -1597951477);
            num1 = num5 ^ (int) num2 * 1813717771;
            continue;
          case 18:
            GameController.UpdateLogs("Flip player hand;");
            num1 = (int) num2 * 2105412369 ^ -2141592590;
            continue;
          case 19:
            num1 = (int) num2 * 266027916 ^ -754679157;
            continue;
          case 20:
            num1 = (int) num2 * -1755088482 ^ -20649195;
            continue;
          case 21:
            num1 = (int) num2 * 1189111849 ^ -1670046840;
            continue;
          case 22:
            goto label_1;
          case 23:
            int num6 = flag3 ? -438216984 : (num6 = -246848619);
            num1 = num6 ^ (int) num2 * 947824423;
            continue;
          case 24:
            flag2 = GameController.Game.GetHandSumFor(GameController.Game.Player.Hand2) > 21;
            num1 = -537855178;
            continue;
          case 25:
            GameController.UpdateLogs("Player burst. Game-over;");
            num1 = (int) num2 * -1554042410 ^ 2109861074;
            continue;
          case 26:
            goto label_3;
          case 27:
            int num7 = GameController.Game.GetHandSumFor(GameController.Game.Player.Hand1) <= 21 ? 383776276 : (num7 = 1170422828);
            num1 = num7 ^ (int) num2 * 1110617264;
            continue;
          case 28:
            this.FlipPlayerHands(GameController);
            num1 = (int) num2 * -601951687 ^ 1085244;
            continue;
          case 29:
            GameController.UpdateLogs("Player burst Hand1;");
            num1 = (int) num2 * -1262591330 ^ -674074002;
            continue;
          case 30:
            this.LooseBurstHand(GameController, "Player", "Hand1");
            num1 = (int) num2 * 110536690 ^ -1678452832;
            continue;
          case 31:
            num1 = (int) num2 * 1652754148 ^ -633858271;
            continue;
          case 32:
            if (GameController.Game.Player.Hand1Flipped)
            {
              num1 = -906677220;
              continue;
            }
            num3 = 1;
            break;
          case 33:
            num1 = (int) num2 * -1246101696 ^ 1188801115;
            continue;
          case 34:
            GameController.Game.Player.Bet *= 2;
            num1 = (int) num2 * 653939890 ^ -1651093828;
            continue;
          case 35:
            flag3 = GameController.Game.Player.Hand2.Count == 0;
            num1 = (int) num2 * -914719659 ^ 355152851;
            continue;
          case 36:
            num1 = -992331105;
            continue;
          case 37:
            GameController.UpdateLogs("Player burst Hand2;");
            this.LooseBurstHand(GameController, "Player", "Hand2");
            num1 = (int) num2 * 655480699 ^ -1092340599;
            continue;
          case 38:
            num1 = (int) num2 * -1972324916 ^ -1379990585;
            continue;
          case 39:
            num1 = -1261871272;
            continue;
          case 40:
            num1 = (int) num2 * -1612996617 ^ -1729727377;
            continue;
          case 41:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = (int) num2 * 2028976326 ^ 546424460;
            continue;
          case 42:
            num1 = -992331105;
            continue;
          case 43:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * 1892631099 ^ 733156997;
            continue;
          case 44:
            num1 = (int) num2 * 424664050 ^ 1517100370;
            continue;
          case 45:
            this.LooseBurstHand(GameController, "Player", "Hand1");
            num1 = (int) num2 * 1043158550 ^ 1954784894;
            continue;
          case 46:
            num1 = (int) num2 * -1404815079 ^ -1462071599;
            continue;
          default:
            goto label_52;
        }
        int num8;
        num1 = num8 = num3 != 0 ? -403571996 : (num8 = -750746793);
      }
label_3:
      return;
label_52:;
    }

    public void SplitPlayerHandThenDraw(ConfiguredTaskAwaita GameController)
    {
      UnknownWrap unknownWrap = GameController.Game.Player.Hand1.ElementAt<UnknownWrap>(1);
      GameController.Game.Player.Hand1.RemoveAt(1);
label_1:
      int num1 = -255561494;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1613704919)) % 10U)
        {
          case 0:
            GameController.GameView.ToogleGameButtonsState(GameController.Game);
            num1 = (int) num2 * 1834182023 ^ -1117120718;
            continue;
          case 1:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -148161006 ^ 1325876313;
            continue;
          case 2:
            num1 = (int) num2 * -1663791821 ^ 547320366;
            continue;
          case 3:
            this.Draw1CardFor("Player", "Hand2", true, GameController);
            num1 = (int) num2 * -1403602046 ^ -2078085309;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.Draw1CardFor("Player", "Hand1", true, GameController);
            num1 = (int) num2 * 531903968 ^ 675907801;
            continue;
          case 6:
            num1 = (int) num2 * -641915314 ^ -2010003812;
            continue;
          case 7:
            GameController.Game.Player.Hand2.Add(unknownWrap);
            num1 = (int) num2 * 1331494722 ^ -2117430979;
            continue;
          case 8:
            num1 = (int) num2 * -1144516211 ^ -2057607682;
            continue;
          case 9:
            goto label_3;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public void FlipPlayerHands(ConfiguredTaskAwaita GameController)
    {
      GameController.Game.Player.Hand1Flipped = true;
label_1:
      int num1 = 2032600372;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 38375493)) % 18U)
        {
          case 0:
            num1 = (int) num2 * 520176551 ^ -1707449662;
            continue;
          case 1:
            num1 = (int) num2 * 935337777 ^ 1096793005;
            continue;
          case 2:
            this.CalculateBalance(GameController.Game);
            num1 = 869011580;
            continue;
          case 3:
            goto label_1;
          case 4:
            GameController.Game.Player.Hand2Flipped = true;
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 386833818 ^ -53870180;
            continue;
          case 5:
            goto label_3;
          case 6:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 510862481;
            continue;
          case 7:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 198051069;
            continue;
          case 8:
            GameController.Game.Machine.Hand1Flipped = true;
            num1 = 405499633;
            continue;
          case 9:
            num1 = (int) num2 * -557749649 ^ -249203442;
            continue;
          case 10:
            int num3 = GameController.Game.Player.Hand2.Count != 0 ? -1910940160 : (num3 = -1140698401);
            num1 = num3 ^ (int) num2 * 86652514;
            continue;
          case 11:
            num1 = (int) num2 * -1723179773 ^ 1101416658;
            continue;
          case 12:
            num1 = (int) num2 * 1735109004 ^ 288669501;
            continue;
          case 13:
            int num4 = GameController.Game.Machine.Hand2.Count != 0 ? 719469428 : (num4 = 1854516701);
            num1 = num4 ^ (int) num2 * -1570532505;
            continue;
          case 14:
            GameController.Game.Machine.Hand2Flipped = true;
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 2006734500 ^ 38286437;
            continue;
          case 15:
            num1 = (int) num2 * -385669421 ^ -461927167;
            continue;
          case 16:
            num1 = (int) num2 * -512717793 ^ -1335500345;
            continue;
          case 17:
            num1 = (int) num2 * -1361456186 ^ -1129231415;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public void LooseBurstHand(ConfiguredTaskAwaita GameController, string Who, string Hand)
    {
label_1:
      int num1 = -1734033096;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2083316249)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Who, "Player");
            num1 = (int) num2 * -255277701 ^ -1676610019;
            continue;
          case 2:
            this.PlayerBurstAsync(GameController, Hand);
            num1 = (int) num2 * 1202270034 ^ 1621795751;
            continue;
          case 3:
            int num3 = flag ? -197288212 : (num3 = -1552577889);
            num1 = num3 ^ (int) num2 * 1174783351;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.MachineBurstAsync(GameController, Hand);
            num1 = -338835901;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    private void PlayerBurstAsync(ConfiguredTaskAwaita GameController, string Hand)
    {
      if (!SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1"))
        goto label_32;
label_1:
      int num1 = 1484020386;
label_2:
      bool hand1Flipped;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 713199788)) % 34U)
        {
          case 0:
            flag = GameController.Game.Player.Hand2.Count == 0;
            num1 = (int) num2 * -307733853 ^ 1698601830;
            continue;
          case 1:
            num1 = 695164619;
            continue;
          case 2:
            hand1Flipped = GameController.Game.Player.Hand1Flipped;
            num1 = (int) num2 * 1443215466 ^ -1968431874;
            continue;
          case 3:
            GameController.Game.Player.Hand2Flipped = true;
            num1 = (int) num2 * -1625912029 ^ 150632439;
            continue;
          case 4:
            this.CalculateBalance(GameController.Game);
            num1 = 1097931061;
            continue;
          case 5:
            goto label_3;
          case 6:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 57816564 ^ -661507229;
            continue;
          case 7:
            int num3 = GameController.Game.Player.Hand2Flipped ? -1578858095 : (num3 = -772982492);
            num1 = num3 ^ (int) num2 * -801038290;
            continue;
          case 8:
            int num4 = !flag ? -715844200 : (num4 = -1977287543);
            num1 = num4 ^ (int) num2 * 2133062777;
            continue;
          case 9:
            GameController.Game.Machine.Hand1Flipped = true;
            GameController.Game.Machine.Hand2Flipped = true;
            int num5 = GameController.Game.Machine.Hand2.Count == 0 ? 977007484 : (num5 = 154221030);
            num1 = num5 ^ (int) num2 * -1578429956;
            continue;
          case 10:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * 1458670022 ^ 1106150953;
            continue;
          case 11:
            num1 = (int) num2 * -2069245981 ^ 1328764216;
            continue;
          case 12:
            GameController.Game.Winner = "Machine";
            num1 = (int) num2 * -597249389 ^ -1250516435;
            continue;
          case 13:
            num1 = (int) num2 * -1816040126 ^ 1629020482;
            continue;
          case 14:
            num1 = (int) num2 * 536062144 ^ -1612151272;
            continue;
          case 15:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * -941254492 ^ -1507567782;
            continue;
          case 16:
            int num6 = !hand1Flipped ? -2129351931 : (num6 = -1196797712);
            num1 = num6 ^ (int) num2 * 252149089;
            continue;
          case 17:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * 553554497 ^ 1126634640;
            continue;
          case 18:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = 1100828266;
            continue;
          case 19:
            goto label_1;
          case 20:
            goto label_32;
          case 21:
            GameController.Game.Player.Hand1Flipped = true;
            num1 = (int) num2 * 167802854 ^ 1500055268;
            continue;
          case 22:
            num1 = 1318056050;
            continue;
          case 23:
            num1 = (int) num2 * -365192145 ^ -265240835;
            continue;
          case 24:
            num1 = (int) num2 * 721028602 ^ 759661427;
            continue;
          case 25:
            num1 = (int) num2 * -1388421187 ^ 1698115496;
            continue;
          case 26:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * -1759283742 ^ -1479154021;
            continue;
          case 27:
            num1 = 695164619;
            continue;
          case 28:
            num1 = 2138853107;
            continue;
          case 29:
            num1 = (int) num2 * 346923343 ^ 307758671;
            continue;
          case 30:
            num1 = (int) num2 * -778010924 ^ 2067088591;
            continue;
          case 31:
            num1 = (int) num2 * 1067739162 ^ -1394178227;
            continue;
          case 32:
            num1 = (int) num2 * 813405015 ^ 571738713;
            continue;
          case 33:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -430177019 ^ 228428947;
            continue;
          default:
            goto label_36;
        }
      }
label_3:
      return;
label_36:
      return;
label_32:
      num1 = 420984419;
      goto label_2;
    }

    private void MachineBurstAsync(ConfiguredTaskAwaita GameController, string Hand)
    {
label_1:
      int num1 = 2094986760;
      bool hand2Flipped;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 43164127)) % 32U)
        {
          case 0:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * -1485068545 ^ 2108120507;
            continue;
          case 1:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            hand2Flipped = GameController.Game.Machine.Hand2Flipped;
            num1 = 532903426;
            continue;
          case 2:
            GameController.Game.Machine.Hand2Flipped = true;
            num1 = 1428942382;
            continue;
          case 3:
            GameController.Game.Player.Hand1Flipped = true;
            GameController.Game.Player.Hand2Flipped = true;
            num1 = (int) num2 * -943417641 ^ 1271040530;
            continue;
          case 4:
            num1 = 402180717;
            continue;
          case 5:
            int num3 = GameController.Game.Machine.Hand1Flipped ? -1545132629 : (num3 = -375605606);
            num1 = num3 ^ (int) num2 * -1152986554;
            continue;
          case 6:
            num1 = (int) num2 * 507492544 ^ 695683759;
            continue;
          case 7:
            int num4 = flag2 ? -1748125465 : (num4 = -340419905);
            num1 = num4 ^ (int) num2 * 33509742;
            continue;
          case 8:
            flag3 = GameController.Game.Player.Hand2.Count == 0;
            num1 = (int) num2 * -911090120 ^ 1921711786;
            continue;
          case 9:
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = 1600428551;
            continue;
          case 10:
            this.CalculateBalance(GameController.Game);
            num1 = (int) num2 * 1542061432 ^ 447909264;
            continue;
          case 11:
            num1 = (int) num2 * 895032063 ^ 1266428582;
            continue;
          case 12:
            num1 = (int) num2 * 1285171150 ^ 489112751;
            continue;
          case 13:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * 427278609 ^ -1403898839;
            continue;
          case 14:
            num1 = (int) num2 * -681830718 ^ -1257927873;
            continue;
          case 15:
            int num5 = flag1 ? -1226072311 : (num5 = -336246722);
            num1 = num5 ^ (int) num2 * -1887468640;
            continue;
          case 16:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = (int) num2 * -50334353 ^ -1310751860;
            continue;
          case 17:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -330817519 ^ -1332741285;
            continue;
          case 18:
            num1 = 2077653484;
            continue;
          case 19:
            goto label_3;
          case 20:
            num1 = (int) num2 * -736735979 ^ 911351945;
            continue;
          case 21:
            int num6 = !flag3 ? -2022831295 : (num6 = -1779657499);
            num1 = num6 ^ (int) num2 * -467592677;
            continue;
          case 22:
            GameController.Game.Winner = "Player";
            num1 = (int) num2 * -587740833 ^ 1677795059;
            continue;
          case 23:
            flag2 = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1");
            num1 = (int) num2 * 1951339218 ^ -1661179322;
            continue;
          case 24:
            this.CalculateBalance(GameController.Game);
            num1 = 2085518758;
            continue;
          case 25:
            num1 = (int) num2 * 1109186919 ^ -1812806620;
            continue;
          case 26:
            GameController.Game.Machine.Hand1Flipped = true;
            num1 = (int) num2 * 272926214 ^ 1411495053;
            continue;
          case 27:
            num1 = 2077653484;
            continue;
          case 28:
            flag1 = GameController.Game.Machine.Hand2.Count == 0;
            num1 = (int) num2 * 530394711 ^ 1989453012;
            continue;
          case 29:
            int num7 = hand2Flipped ? 1068142375 : (num7 = 22080643);
            num1 = num7 ^ (int) num2 * -1328921992;
            continue;
          case 30:
            goto label_1;
          case 31:
            num1 = (int) num2 * -1163526958 ^ -861135382;
            continue;
          default:
            goto label_34;
        }
      }
label_3:
      return;
label_34:;
    }

    public void CalculateBalance(BooleanTypeI Game)
    {
    }

    private void SimulateMachineRoundAsync(ConfiguredTaskAwaita GameController)
    {
label_1:
      int num1 = 1231724580;
      UnknownWrap unknownWrap;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 911086175)) % 24U)
        {
          case 0:
            num1 = (int) num2 * -574949410 ^ 1471214866;
            continue;
          case 1:
            num1 = (int) num2 * 725113174 ^ -1334650443;
            continue;
          case 2:
            ++GameController.Game.TurnWho;
            num1 = 1351939985;
            continue;
          case 3:
            GameController.UpdateLogs("House run 2 hands;");
            num1 = (int) num2 * -423289169 ^ -1467416361;
            continue;
          case 4:
            unknownWrap = GameController.Game.Machine.Hand1.ElementAt<UnknownWrap>(1);
            num1 = (int) num2 * -634986378 ^ 242245935;
            continue;
          case 5:
            this.RunGame1Hand(GameController, "Hand1", true);
            num1 = (int) num2 * -669328725 ^ 995050144;
            continue;
          case 6:
            num1 = (int) num2 * 894933748 ^ 473019349;
            continue;
          case 7:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -717963918 ^ -1171419170;
            continue;
          case 8:
            GameController.Game.Machine.Hand1.RemoveAt(1);
            GameController.Game.Machine.Hand2.Add(unknownWrap);
            num1 = (int) num2 * -1152933437 ^ -87967395;
            continue;
          case 9:
            int num3 = !GameController.Game.CheckIdenticalHand("Machine", "Hand1") ? -1315256829 : (num3 = -1752569236);
            num1 = num3 ^ (int) num2 * 1712159130;
            continue;
          case 10:
            goto label_3;
          case 11:
            int num4 = GameController.Game.Machine.Hand2.Count != 0 ? -1090660606 : (num4 = -1357991185);
            num1 = num4 ^ (int) num2 * 1962874475;
            continue;
          case 12:
            int num5;
            num1 = num5 = GameController.Game.Machine.Hand2.Count != 0 ? 1941930938 : (num5 = 1057401869);
            continue;
          case 13:
            num1 = 1859124331;
            continue;
          case 14:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -2006529367 ^ -32739357;
            continue;
          case 15:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = (int) num2 * -1598787659 ^ 869482527;
            continue;
          case 16:
            this.RunGame1Hand(GameController, "Hand2", true);
            num1 = (int) num2 * 605237440 ^ -1586336655;
            continue;
          case 17:
            this.Draw1CardFor("Machine", "Hand2", true, GameController);
            num1 = (int) num2 * -1475871036 ^ -668389572;
            continue;
          case 18:
            this.Draw1CardFor("Machine", "Hand1", false, GameController);
            num1 = (int) num2 * -557600599 ^ 491467556;
            continue;
          case 19:
            num1 = (int) num2 * 1681021584 ^ 1281461634;
            continue;
          case 20:
            GameController.UpdateLogs("House split hand;");
            num1 = (int) num2 * -264152297 ^ 1049636599;
            continue;
          case 21:
            num1 = (int) num2 * -1790070187 ^ 1658310013;
            continue;
          case 22:
            GameController.UpdateLogs("House run 1 hand;");
            this.RunGame1Hand(GameController, "Hand1", false);
            num1 = 1471413743;
            continue;
          case 23:
            goto label_1;
          default:
            goto label_26;
        }
      }
label_3:
      return;
label_26:;
    }

    private void RunGame1Hand(ConfiguredTaskAwaita GameController, string Hand, bool RenderContext)
    {
      bool flag = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1");
label_1:
      int num1 = 536879782;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1188782185)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            this.SimulateMachine1Hand(GameController, Hand, RenderContext);
            num1 = 196284269;
            continue;
          case 2:
            this.SimulateMachine1Hand(GameController, Hand, RenderContext);
            num1 = (int) num2 * -628172928 ^ 1867220954;
            continue;
          case 3:
            num1 = (int) num2 * 1696250520 ^ -369743980;
            continue;
          case 4:
            num1 = (int) num2 * -1506048613 ^ 1149366875;
            continue;
          case 5:
            num1 = (int) num2 * -1808984382 ^ 1695706141;
            continue;
          case 6:
            goto label_3;
          case 7:
            int num3 = !flag ? 603794157 : (num3 = 922252350);
            num1 = num3 ^ (int) num2 * -1843160245;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void SimulateMachine1Hand(
      ConfiguredTaskAwaita GameController,
      string Hand,
      bool RenderContext)
    {
label_44:
      bool flag1 = GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 11;
      int num1 = 239855007;
      while (true)
      {
        uint num2;
        bool flag2;
        double num3;
        double num4;
        bool flag3;
        bool flag4;
        double num5;
        double num6;
        double num7;
        int num8;
        int num9;
        switch ((num2 = (uint) (num1 ^ 1024375808)) % 61U)
        {
          case 0:
            int num10 = flag2 ? 1995581053 : (num10 = 1534086438);
            num1 = num10 ^ (int) num2 * 978028409;
            continue;
          case 1:
            GameController.Game.Machine.Hand1Flipped = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1");
            num1 = (int) num2 * -509760309 ^ 855258782;
            continue;
          case 2:
            num1 = (int) num2 * -2113224476 ^ -992399377;
            continue;
          case 3:
            num1 = (int) num2 * -369833963 ^ 1486577292;
            continue;
          case 4:
            num1 = (int) num2 * -1462829578 ^ -2093660199;
            continue;
          case 5:
            num1 = (int) num2 * -1068727957 ^ -1743693278;
            continue;
          case 6:
            num1 = 1368118378;
            continue;
          case 7:
            num5 = XmlIgnoreMemberAttrib.Max(new double[4]
            {
              num7,
              num3,
              num6,
              num4
            });
            int num11 = num5 == num7 ? 2033635266 : (num11 = 546704864);
            num1 = num11 ^ (int) num2 * 1126258356;
            continue;
          case 8:
            GameController.UpdateLogs("House stand. Turn: Player;");
            num1 = (int) num2 * -1174261422 ^ 856141684;
            continue;
          case 9:
            num6 = XmlIgnoreMemberAttrib.RandDoubleInRange(0.0, 0.25);
            num1 = (int) num2 * -390046628 ^ -1617284622;
            continue;
          case 10:
            num7 = XmlIgnoreMemberAttrib.RandDoubleInRange(0.0, 1.0);
            num1 = (int) num2 * 1756903289 ^ -1476849228;
            continue;
          case 11:
            num1 = 473547894;
            continue;
          case 12:
            if (GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 17)
            {
              num8 = 0;
              break;
            }
            num1 = 1491091531;
            continue;
          case 13:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * 924703741 ^ 355225228;
            continue;
          case 14:
            num1 = (int) num2 * 1694727684 ^ 578835940;
            continue;
          case 15:
            num4 = XmlIgnoreMemberAttrib.RandDoubleInRange(0.0, 0.75);
            num1 = (int) num2 * -1291373166 ^ 1723193290;
            continue;
          case 16:
            num1 = 903484457;
            continue;
          case 17:
            num1 = (int) num2 * -1462080400 ^ 577247816;
            continue;
          case 18:
            num1 = (int) num2 * -1508507641 ^ 1666926388;
            continue;
          case 19:
            GameController.UpdateLogs("House flip hand;");
            num1 = (int) num2 * 484723521 ^ -504451586;
            continue;
          case 20:
            int num12 = !flag4 ? -1673053841 : (num12 = -1790757955);
            num1 = num12 ^ (int) num2 * 828434035;
            continue;
          case 21:
            num1 = (int) num2 * -1368215265 ^ 29421348;
            continue;
          case 22:
            int num13 = !flag3 ? -1450493993 : (num13 = -1077185856);
            num1 = num13 ^ (int) num2 * 1519121300;
            continue;
          case 23:
            this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * -279447940 ^ -599104898;
            continue;
          case 24:
            this.CheckMachineBurst(GameController, Hand, RenderContext);
            num1 = (int) num2 * 1476939655 ^ 313491704;
            continue;
          case 25:
            num1 = (int) num2 * -3532782 ^ -859676661;
            continue;
          case 26:
            num3 = XmlIgnoreMemberAttrib.RandDoubleInRange(0.0, 0.5);
            num1 = (int) num2 * -1939684219 ^ 543454817;
            continue;
          case 27:
            num1 = 123523624;
            continue;
          case 28:
            GameController.UpdateLogs("House double bet;");
            num1 = 1731934174;
            continue;
          case 29:
            goto label_44;
          case 30:
            num1 = (int) num2 * -883005401 ^ 202265487;
            continue;
          case 31:
            num9 = GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) <= 16 ? 1 : 0;
            goto label_26;
          case 32:
            if (GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) < 11)
            {
              num9 = 0;
              goto label_26;
            }
            else
            {
              num1 = 2089545806;
              continue;
            }
          case 33:
            this.CheckMachineBurst(GameController, Hand, RenderContext);
            num1 = (int) num2 * -2023987458 ^ -1518705656;
            continue;
          case 34:
            GameController.UpdateLogs("House hit card;");
            num1 = (int) num2 * 1982682284 ^ 1737902940;
            continue;
          case 35:
            GameController.UpdateLogs("House flip hand(s);");
            num1 = (int) num2 * 1830568154 ^ 347109257;
            continue;
          case 36:
            int num14 = XmlIgnoreMemberAttrib.RandDoubleInRange(0.4, 1.0) >= XmlIgnoreMemberAttrib.RandDoubleInRange(0.0, 0.6) ? -10136358 : (num14 = -1246474168);
            num1 = num14 ^ (int) num2 * -1378434422;
            continue;
          case 37:
            this.SimulateMachineDoubleBetAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * -284133664 ^ -1244331539;
            continue;
          case 38:
            num1 = (int) num2 * -1516299432 ^ 735703369;
            continue;
          case 39:
            num1 = (int) num2 * -291087762 ^ -1069103728;
            continue;
          case 40:
            num1 = (int) num2 * -1400060156 ^ 1713902931;
            continue;
          case 41:
            num1 = (int) num2 * -701546180 ^ -1029046212;
            continue;
          case 42:
            num1 = (int) num2 * 2020803331 ^ -2047544823;
            continue;
          case 43:
            num1 = (int) num2 * 2141017581 ^ -689781563;
            continue;
          case 44:
            int num15 = flag1 ? 924879523 : (num15 = 932869423);
            num1 = num15 ^ (int) num2 * 426799509;
            continue;
          case 45:
            num1 = (int) num2 * 1557409215 ^ -1072902605;
            continue;
          case 46:
            num8 = GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) <= 19 ? 1 : 0;
            break;
          case 47:
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = (int) num2 * 1538794188 ^ -342326345;
            continue;
          case 48:
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = (int) num2 * 593209929 ^ 1665980507;
            continue;
          case 49:
            goto label_3;
          case 50:
            GameController.UpdateLogs("House hit card;");
            num1 = (int) num2 * -2056721564 ^ -1157610874;
            continue;
          case 51:
            int num16;
            num1 = num16 = num5 != num6 ? 657905184 : (num16 = 1262182338);
            continue;
          case 52:
            GameController.UpdateLogs("House hit card;");
            num1 = (int) num2 * 2134729649 ^ 1434278679;
            continue;
          case 53:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            num1 = (int) num2 * 2053393921 ^ -2004819479;
            continue;
          case 54:
            num1 = 72790874;
            continue;
          case 55:
            flag2 = GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) == 20;
            num1 = 1950581742;
            continue;
          case 56:
            num1 = (int) num2 * -202175990 ^ 933329264;
            continue;
          case 57:
            GameController.Game.Machine.Hand2Flipped = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand2");
            num1 = (int) num2 * 1426064717 ^ -1477208762;
            continue;
          case 58:
            flag3 = num5 == num3;
            num1 = 1213844577;
            continue;
          case 59:
            this.Draw1CardFor("Machine", Hand, true, GameController);
            this.RenderMachine1HandAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * -1245971015 ^ 1246008786;
            continue;
          case 60:
            GameController.UpdateLogs("House double bet;");
            this.SimulateMachineDoubleBetAsync(GameController, Hand, RenderContext);
            num1 = (int) num2 * 1887776351 ^ 203220152;
            continue;
          default:
            goto label_69;
        }
        int num17;
        num1 = num17 = num8 != 0 ? 1668095474 : (num17 = 903484457);
        continue;
label_26:
        flag4 = num9 != 0;
        num1 = 2086986563;
      }
label_3:
      return;
label_69:;
    }

    private void CheckMachineBurst(
      ConfiguredTaskAwaita GameController,
      string Hand,
      bool RenderContext)
    {
      bool flag1 = GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) == 21;
label_1:
      int num1 = 214461567;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 548579330)) % 16U)
        {
          case 0:
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = (int) num2 * -1735128499 ^ -452800874;
            continue;
          case 1:
            GameController.Game.Machine.Hand1Flipped = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1");
            num1 = (int) num2 * -658969246 ^ -1654251130;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -958812763 ^ 970391804;
            continue;
          case 4:
            num1 = (int) num2 * -1038739399 ^ -1041785421;
            continue;
          case 5:
            num1 = (int) num2 * 1452874228 ^ -837884962;
            continue;
          case 6:
            num1 = (int) num2 * -1922895860 ^ -496965427;
            continue;
          case 7:
            GameController.Game.Machine.Hand2Flipped = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand2");
            num1 = (int) num2 * -1461916999 ^ -1437005774;
            continue;
          case 8:
            flag2 = GameController.Game.GetHandSumFor(SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? GameController.Game.Machine.Hand1 : GameController.Game.Machine.Hand2) > 21;
            num1 = 1139653512;
            continue;
          case 9:
            num1 = (int) num2 * 896065833 ^ -1300242287;
            continue;
          case 10:
            int num3 = !flag2 ? -1448147878 : (num3 = -661295260);
            num1 = num3 ^ (int) num2 * 1164830001;
            continue;
          case 11:
            goto label_1;
          case 12:
            GameController.UpdateLogs("House burst hand;");
            this.LooseBurstHand(GameController, "Machine", Hand);
            num1 = (int) num2 * -1107967423 ^ -277043529;
            continue;
          case 13:
            int num4 = flag1 ? -933093817 : (num4 = -1269013588);
            num1 = num4 ^ (int) num2 * 1623260974;
            continue;
          case 14:
            num1 = (int) num2 * 397282588 ^ -1375922726;
            continue;
          case 15:
            GameController.UpdateLogs("House get Jack;");
            num1 = (int) num2 * -912681304 ^ -885009916;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void RenderMachine1HandAsync(
      ConfiguredTaskAwaita GameController,
      string Hand,
      bool RenderContext)
    {
      if (!RenderContext)
        goto label_8;
label_1:
      int num1 = 1377977413;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1897800664)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            GameController.GameView.SetLabels(GameController.Game);
            num1 = 1972667289;
            continue;
          case 2:
            goto label_8;
          case 3:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 438061818 ^ 1039028572;
            continue;
          case 4:
            num1 = (int) num2 * -692504109 ^ -1670664629;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num2 * -1561420938 ^ -1339620789;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:
      return;
label_8:
      GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
      num1 = 1909560212;
      goto label_2;
    }

    private void SimulateMachineDoubleBetAsync(
      ConfiguredTaskAwaita GameController,
      string Hand,
      bool RenderContext)
    {
label_1:
      int num1 = 563677;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 382847101)) % 13U)
        {
          case 0:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 1177530916;
            continue;
          case 1:
            num1 = (int) num2 * 76282758 ^ -1437162002;
            continue;
          case 2:
            GameController.Game.Machine.Bet *= 2;
            num1 = (int) num2 * 722495952 ^ -160803135;
            continue;
          case 3:
            num1 = (int) num2 * -1622461207 ^ -221259035;
            continue;
          case 4:
            int num3 = RenderContext ? 707105396 : (num3 = 1567602120);
            num1 = num3 ^ (int) num2 * 1358227848;
            continue;
          case 5:
            GameController.GameView.SetLabels(GameController.Game);
            this.Draw1CardFor("Machine", Hand, true, GameController);
            num1 = (int) num2 * -1241295858 ^ 676407752;
            continue;
          case 6:
            num1 = (int) num2 * -158472207 ^ -220205212;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * 623242920 ^ 285094609;
            continue;
          case 9:
            this.CheckMachineBurst(GameController, Hand, RenderContext);
            num1 = (int) num2 * -2133794873 ^ -1276305742;
            continue;
          case 10:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * -1509938448 ^ 991032219;
            continue;
          case 11:
            this.SimulateMachineFlipHand(GameController, Hand, RenderContext);
            num1 = 760471942;
            continue;
          case 12:
            goto label_1;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    private void SimulateMachineFlipHand(
      ConfiguredTaskAwaita GameController,
      string Hand,
      bool RenderContext)
    {
label_1:
      int num1 = 1084293127;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 846223587)) % 20U)
        {
          case 0:
            GameController.Game.Machine.Hand2Flipped = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand2");
            num1 = (int) num2 * 212183476 ^ 2136383000;
            continue;
          case 1:
            num1 = (int) num2 * -1715888497 ^ -321510647;
            continue;
          case 2:
            num1 = (int) num2 * -486447779 ^ -1540804420;
            continue;
          case 3:
            goto label_1;
          case 4:
            GameController.Game.Machine.Hand1Flipped = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1");
            num1 = (int) num2 * -858155630 ^ 369199685;
            continue;
          case 5:
            num1 = (int) num2 * -899083925 ^ 913490924;
            continue;
          case 6:
            int num3 = !flag1 ? -1420335482 : (num3 = -1285040948);
            num1 = num3 ^ (int) num2 * -177460681;
            continue;
          case 7:
            goto label_3;
          case 8:
            GameController.Game.Player.Hand2Flipped = true;
            GameController.GameView.RenderDoubleHandAsyncFor("Player", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 2015901618 ^ -1537585651;
            continue;
          case 9:
            GameController.Game.Player.Hand1Flipped = true;
            num1 = 1464639054;
            continue;
          case 10:
            num1 = (int) num2 * -1575429818 ^ -435833625;
            continue;
          case 11:
            GameController.GameView.RenderSingleHandAsyncFor("Machine", GameController.Game.Machine.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 747265094;
            continue;
          case 12:
            this.CalculateBalance(GameController.Game);
            num1 = 1909962736;
            continue;
          case 13:
            num1 = (int) num2 * -1972720390 ^ -524557203;
            continue;
          case 14:
            int num4 = !flag2 ? 1458591568 : (num4 = 101264569);
            num1 = num4 ^ (int) num2 * -82626798;
            continue;
          case 15:
            flag2 = RenderContext;
            num1 = (int) num2 * -773272254 ^ 1580680591;
            continue;
          case 16:
            num1 = (int) num2 * 377461515 ^ -808651661;
            continue;
          case 17:
            flag1 = GameController.Game.Player.Hand2.Count != 0;
            num1 = (int) num2 * 543747413 ^ 2015071808;
            continue;
          case 18:
            GameController.GameView.RenderDoubleHandAsyncFor("Machine", GameController.Game, GameController.Game.Player.Hand1Flipped, GameController.Game.Player.Hand2Flipped);
            num1 = (int) num2 * 668510030 ^ 1453178342;
            continue;
          case 19:
            GameController.GameView.RenderSingleHandAsyncFor("Player", GameController.Game.Player.Hand1, GameController.Game.Player.Hand1Flipped);
            num1 = 1275701039;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    private void Draw1CardFor(
      string Who,
      string Hand,
      bool Set,
      ConfiguredTaskAwaita GameController)
    {
      UnknownWrap unknownWrap = GameController.Game.Deck.ElementAt<UnknownWrap>(0);
label_1:
      int num1 = 1039550415;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 874597486)) % 20U)
        {
          case 0:
            num1 = (int) num2 * -979096080 ^ 1020059852;
            continue;
          case 1:
            GameController.Game.Deck.RemoveAt(0);
            num1 = (int) num2 * -1273336055 ^ -1964103995;
            continue;
          case 2:
            GameController.Game.Player.Hand2.Add(unknownWrap);
            num1 = 423154349;
            continue;
          case 3:
            num1 = (int) num2 * -793652588 ^ 916567304;
            continue;
          case 4:
            int num3 = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? -1302021691 : (num3 = -115011191);
            num1 = num3 ^ (int) num2 * 1258058376;
            continue;
          case 5:
            num1 = 1316729554;
            continue;
          case 6:
            num1 = 1381102962;
            continue;
          case 7:
            GameController.Game.Machine.Hand2.Add(unknownWrap);
            num1 = 1137536790;
            continue;
          case 8:
            num1 = (int) num2 * 1067050860 ^ 526677627;
            continue;
          case 9:
            int num4 = !flag ? -374894251 : (num4 = -211693437);
            num1 = num4 ^ (int) num2 * -59549530;
            continue;
          case 10:
            num1 = 1381102962;
            continue;
          case 11:
            int num5 = !SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Hand, "Hand1") ? 659467275 : (num5 = 71343726);
            num1 = num5 ^ (int) num2 * -1937756055;
            continue;
          case 12:
            goto label_3;
          case 13:
            num1 = (int) num2 * 412430039 ^ 574558023;
            continue;
          case 14:
            flag = SafeAccessTokenHan.\u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮(Who, "Player");
            num1 = (int) num2 * 1463697565 ^ 1341982821;
            continue;
          case 15:
            GameController.Game.Player.Hand1.Add(unknownWrap);
            num1 = (int) num2 * -1790232200 ^ -1054450118;
            continue;
          case 16:
            goto label_1;
          case 17:
            num1 = (int) num2 * 269270480 ^ 961907868;
            continue;
          case 18:
            num1 = (int) num2 * 1925800393 ^ -96641011;
            continue;
          case 19:
            GameController.Game.Machine.Hand1.Add(unknownWrap);
            num1 = (int) num2 * 2080166223 ^ -1460758391;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    static System.Type \u202D​⁮‫‮‪‬⁭‭‌⁯‏‍‌⁬⁪⁭⁭⁬⁬‬⁭⁫​⁫⁯‬‪‮‍‏‎⁮⁫‎‍‍‍⁯⁯‮([In] RuntimeTypeHandle obj0) => System.Type.GetTypeFromHandle(obj0);

    static Array \u202C‫⁮⁪‪‫⁮⁭⁪‭⁬‌⁮⁭⁭‎⁮⁯‫⁫‬‎⁯‫⁯​⁭‏⁯‬‌⁬‫‮⁫‌‪‫‌‮([In] System.Type obj0) => Enum.GetValues(obj0);

    static IEnumerator \u200C‭⁭‬‍⁯⁯‌⁯‫⁯​⁪​‍‮⁯‎⁫‭⁮​⁬⁮⁯‫‎‪‌‬‎⁬​‬⁬⁯‍‎⁪‮([In] Array obj0) => obj0.GetEnumerator();

    static object \u200F‪⁬‬‮‌⁮⁫⁬​‫‎​‎‍‭‭‍‌‭‮​‭⁫‏⁫⁯‬‬⁮‍‮‍⁫​⁯‌‏‎‍‮([In] IEnumerator obj0) => obj0.Current;

    static bool \u206B‭​‎⁭‏⁮‭‭‍⁪‪​‫‬⁬​​‏​‬‫‪⁫‌⁬‬⁪⁬​‫⁪⁮‪​‭⁯⁫‪‫‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u200E⁭⁭‫⁭‬‫⁮⁭‬⁭‫‮‏‎⁬⁭⁬‪‬⁫‭‌‫‏⁯⁫⁯⁬‭‪‭‮‫‎‮‌⁪⁯‫‮([In] IDisposable obj0) => obj0.Dispose();

    static Random \u206E‌⁯⁫⁭​⁯‬‎⁮​‬⁭​‎⁮‎‎‬‮​⁭‭⁯‌‍‪‫⁫‍⁮‭⁭‌‫⁪‏‍‎‮‮() => new Random();

    static int \u200E⁮⁬‏‮‎‪‏‍‬‍⁬‬⁭⁬⁬‪‎‏‮⁭‌‎⁭⁫⁬‮‏‪​‬‏​⁮⁮⁬​‍​⁬‮([In] Random obj0, [In] int obj1, [In] int obj2) => obj0.Next(obj1, obj2);

    static DialogResult \u206E‌‫⁪⁬⁭⁫‮⁪‍​‫‮‫‍‬‭⁬‌‏‫⁫‎⁪‍‎⁭‫⁪‬‬‪‪⁮‏⁯⁭‫‎⁬‮([In] Form obj0) => obj0.ShowDialog();

    static bool \u200D‮‪‎⁭⁮‪‍⁮‍‮‮‌⁫⁬‭‪‮‬​⁯‮⁫‌‭‍‮‮‪‬‎​‭‌‮‬‮⁯‌⁫‮([In] string obj0, [In] string obj1) => obj0 == obj1;
  }
}
