// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteConvert
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Text;

namespace System.Data.SQLite
{
  public abstract class SQLiteConvert
  {
    private static string[] _datetimeFormats = new string[17]
    {
      "THHmmss",
      "THHmm",
      "HH:mm:ss",
      "HH:mm",
      "HH:mm:ss.FFFFFFF",
      "yy-MM-dd",
      "yyyy-MM-dd",
      "yyyy-MM-dd HH:mm:ss.FFFFFFF",
      "yyyy-MM-dd HH:mm:ss",
      "yyyy-MM-dd HH:mm",
      "yyyy-MM-ddTHH:mm:ss.FFFFFFF",
      "yyyy-MM-ddTHH:mm",
      "yyyy-MM-ddTHH:mm:ss",
      "yyyyMMddHHmmss",
      "yyyyMMddHHmm",
      "yyyyMMddTHHmmssFFFFFFF",
      "yyyyMMdd"
    };
    private static Encoding _utf8 = (Encoding) new UTF8Encoding();
    internal SQLiteDateFormats _datetimeFormat;
    private static Type[] _affinitytotype = new Type[8]
    {
      typeof (object),
      typeof (long),
      typeof (double),
      typeof (string),
      typeof (byte[]),
      typeof (object),
      typeof (DateTime),
      typeof (object)
    };
    private static DbType[] _typetodbtype = new DbType[19]
    {
      DbType.Object,
      DbType.Binary,
      DbType.Object,
      DbType.Boolean,
      DbType.SByte,
      DbType.SByte,
      DbType.Byte,
      DbType.Int16,
      DbType.UInt16,
      DbType.Int32,
      DbType.UInt32,
      DbType.Int64,
      DbType.UInt64,
      DbType.Single,
      DbType.Double,
      DbType.Decimal,
      DbType.DateTime,
      DbType.Object,
      DbType.String
    };
    private static int[] _dbtypetocolumnsize = new int[26]
    {
      int.MaxValue,
      int.MaxValue,
      1,
      1,
      8,
      8,
      8,
      8,
      8,
      16,
      2,
      4,
      8,
      int.MaxValue,
      1,
      4,
      int.MaxValue,
      8,
      2,
      4,
      8,
      8,
      int.MaxValue,
      int.MaxValue,
      int.MaxValue,
      int.MaxValue
    };
    private static object[] _dbtypetonumericprecision = new object[25]
    {
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) 3,
      (object) DBNull.Value,
      (object) 19,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) 53,
      (object) 53,
      (object) DBNull.Value,
      (object) 5,
      (object) 10,
      (object) 19,
      (object) DBNull.Value,
      (object) 3,
      (object) 24,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) 5,
      (object) 10,
      (object) 19,
      (object) 53,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) DBNull.Value
    };
    private static object[] _dbtypetonumericscale = new object[25]
    {
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) 0,
      (object) DBNull.Value,
      (object) 4,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) 0,
      (object) 0,
      (object) 0,
      (object) DBNull.Value,
      (object) 0,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) 0,
      (object) 0,
      (object) 0,
      (object) 0,
      (object) DBNull.Value,
      (object) DBNull.Value,
      (object) DBNull.Value
    };
    private static SQLiteTypeNames[] _dbtypeNames = new SQLiteTypeNames[15]
    {
      new SQLiteTypeNames("INTEGER", DbType.Int64),
      new SQLiteTypeNames("TINYINT", DbType.Byte),
      new SQLiteTypeNames("INT", DbType.Int32),
      new SQLiteTypeNames("VARCHAR", DbType.AnsiString),
      new SQLiteTypeNames("NVARCHAR", DbType.String),
      new SQLiteTypeNames("CHAR", DbType.AnsiStringFixedLength),
      new SQLiteTypeNames("NCHAR", DbType.StringFixedLength),
      new SQLiteTypeNames("FLOAT", DbType.Double),
      new SQLiteTypeNames("REAL", DbType.Single),
      new SQLiteTypeNames("BIT", DbType.Boolean),
      new SQLiteTypeNames("DECIMAL", DbType.Decimal),
      new SQLiteTypeNames("DATETIME", DbType.DateTime),
      new SQLiteTypeNames("BLOB", DbType.Binary),
      new SQLiteTypeNames("UNIQUEIDENTIFIER", DbType.Guid),
      new SQLiteTypeNames("SMALLINT", DbType.Int16)
    };
    private static Type[] _dbtypeToType = new Type[26]
    {
      typeof (string),
      typeof (byte[]),
      typeof (byte),
      typeof (bool),
      typeof (Decimal),
      typeof (DateTime),
      typeof (DateTime),
      typeof (Decimal),
      typeof (double),
      typeof (Guid),
      typeof (short),
      typeof (int),
      typeof (long),
      typeof (object),
      typeof (sbyte),
      typeof (float),
      typeof (string),
      typeof (DateTime),
      typeof (ushort),
      typeof (uint),
      typeof (ulong),
      typeof (double),
      typeof (string),
      typeof (string),
      typeof (string),
      typeof (string)
    };
    private static TypeAffinity[] _typecodeAffinities = new TypeAffinity[19]
    {
      TypeAffinity.Null,
      TypeAffinity.Blob,
      TypeAffinity.Null,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Int64,
      TypeAffinity.Double,
      TypeAffinity.Double,
      TypeAffinity.Double,
      TypeAffinity.DateTime,
      TypeAffinity.Null,
      TypeAffinity.Text
    };
    private static SQLiteTypeNames[] _typeNames = new SQLiteTypeNames[43]
    {
      new SQLiteTypeNames("COUNTER", DbType.Int64),
      new SQLiteTypeNames("AUTOINCREMENT", DbType.Int64),
      new SQLiteTypeNames("IDENTITY", DbType.Int64),
      new SQLiteTypeNames("LONGTEXT", DbType.String),
      new SQLiteTypeNames("LONGCHAR", DbType.String),
      new SQLiteTypeNames("LONGVARCHAR", DbType.String),
      new SQLiteTypeNames("LONG", DbType.Int64),
      new SQLiteTypeNames("TINYINT", DbType.Byte),
      new SQLiteTypeNames("INTEGER", DbType.Int64),
      new SQLiteTypeNames("INT", DbType.Int32),
      new SQLiteTypeNames("VARCHAR", DbType.String),
      new SQLiteTypeNames("NVARCHAR", DbType.String),
      new SQLiteTypeNames("CHAR", DbType.String),
      new SQLiteTypeNames("NCHAR", DbType.String),
      new SQLiteTypeNames("TEXT", DbType.String),
      new SQLiteTypeNames("NTEXT", DbType.String),
      new SQLiteTypeNames("STRING", DbType.String),
      new SQLiteTypeNames("DOUBLE", DbType.Double),
      new SQLiteTypeNames("FLOAT", DbType.Double),
      new SQLiteTypeNames("REAL", DbType.Single),
      new SQLiteTypeNames("BIT", DbType.Boolean),
      new SQLiteTypeNames("YESNO", DbType.Boolean),
      new SQLiteTypeNames("LOGICAL", DbType.Boolean),
      new SQLiteTypeNames("BOOL", DbType.Boolean),
      new SQLiteTypeNames("NUMERIC", DbType.Decimal),
      new SQLiteTypeNames("DECIMAL", DbType.Decimal),
      new SQLiteTypeNames("MONEY", DbType.Decimal),
      new SQLiteTypeNames("CURRENCY", DbType.Decimal),
      new SQLiteTypeNames("TIME", DbType.DateTime),
      new SQLiteTypeNames("DATE", DbType.DateTime),
      new SQLiteTypeNames("SMALLDATE", DbType.DateTime),
      new SQLiteTypeNames("BLOB", DbType.Binary),
      new SQLiteTypeNames("BINARY", DbType.Binary),
      new SQLiteTypeNames("VARBINARY", DbType.Binary),
      new SQLiteTypeNames("IMAGE", DbType.Binary),
      new SQLiteTypeNames("GENERAL", DbType.Binary),
      new SQLiteTypeNames("OLEOBJECT", DbType.Binary),
      new SQLiteTypeNames("GUID", DbType.Guid),
      new SQLiteTypeNames("UNIQUEIDENTIFIER", DbType.Guid),
      new SQLiteTypeNames("MEMO", DbType.String),
      new SQLiteTypeNames("NOTE", DbType.String),
      new SQLiteTypeNames("SMALLINT", DbType.Int16),
      new SQLiteTypeNames("BIGINT", DbType.Int64)
    };

    internal SQLiteConvert(SQLiteDateFormats fmt) => this._datetimeFormat = fmt;

    public static byte[] ToUTF8(string sourceText)
    {
      byte[] bytes = new byte[SQLiteConvert._utf8.GetByteCount(sourceText) + 1];
      bytes[SQLiteConvert._utf8.GetBytes(sourceText, 0, sourceText.Length, bytes, 0)] = (byte) 0;
      return bytes;
    }

    public byte[] ToUTF8(DateTime dateTimeValue) => SQLiteConvert.ToUTF8(this.ToString(dateTimeValue));

    public virtual string ToString(IntPtr nativestring, int nativestringlen) => SQLiteConvert.UTF8ToString(nativestring, nativestringlen);

    public static string UTF8ToString(IntPtr nativestring, int nativestringlen)
    {
      if (nativestringlen == 0 || nativestring == IntPtr.Zero)
        return "";
      if (nativestringlen == -1)
      {
        do
        {
          ++nativestringlen;
        }
        while (Marshal.ReadByte(nativestring, nativestringlen) != (byte) 0);
      }
      byte[] numArray = new byte[nativestringlen];
      Marshal.Copy(nativestring, numArray, 0, nativestringlen);
      return SQLiteConvert._utf8.GetString(numArray, 0, nativestringlen);
    }

    public DateTime ToDateTime(string dateText)
    {
      switch (this._datetimeFormat)
      {
        case SQLiteDateFormats.Ticks:
          return new DateTime(Convert.ToInt64(dateText, (IFormatProvider) CultureInfo.InvariantCulture));
        case SQLiteDateFormats.JulianDay:
          return this.ToDateTime(Convert.ToDouble(dateText, (IFormatProvider) CultureInfo.InvariantCulture));
        default:
          return DateTime.ParseExact(dateText, SQLiteConvert._datetimeFormats, (IFormatProvider) DateTimeFormatInfo.InvariantInfo, DateTimeStyles.None);
      }
    }

    public DateTime ToDateTime(double julianDay) => DateTime.FromOADate(julianDay - 2415018.5);

    public double ToJulianDay(DateTime value) => value.ToOADate() + 2415018.5;

    public string ToString(DateTime dateValue)
    {
      switch (this._datetimeFormat)
      {
        case SQLiteDateFormats.Ticks:
          return dateValue.Ticks.ToString((IFormatProvider) CultureInfo.InvariantCulture);
        case SQLiteDateFormats.JulianDay:
          return this.ToJulianDay(dateValue).ToString((IFormatProvider) CultureInfo.InvariantCulture);
        default:
          return dateValue.ToString(SQLiteConvert._datetimeFormats[7], (IFormatProvider) CultureInfo.InvariantCulture);
      }
    }

    internal DateTime ToDateTime(IntPtr ptr, int len) => this.ToDateTime(this.ToString(ptr, len));

    public static string[] Split(string source, char separator)
    {
      char[] anyOf1 = new char[2]{ '"', separator };
      char[] anyOf2 = new char[1]{ '"' };
      int startIndex = 0;
      List<string> stringList = new List<string>();
      while (source.Length > 0)
      {
        int num1 = source.IndexOfAny(anyOf1, startIndex);
        if (num1 != -1)
        {
          if ((int) source[num1] == (int) anyOf1[0])
          {
            int num2 = source.IndexOfAny(anyOf2, num1 + 1);
            if (num2 != -1)
              startIndex = num2 + 1;
            else
              break;
          }
          else
          {
            string str = source.Substring(0, num1).Trim();
            if (str.Length > 1 && (int) str[0] == (int) anyOf2[0] && (int) str[str.Length - 1] == (int) str[0])
              str = str.Substring(1, str.Length - 2);
            source = source.Substring(num1 + 1).Trim();
            if (str.Length > 0)
              stringList.Add(str);
            startIndex = 0;
          }
        }
        else
          break;
      }
      if (source.Length > 0)
      {
        string str = source.Trim();
        if (str.Length > 1 && (int) str[0] == (int) anyOf2[0] && (int) str[str.Length - 1] == (int) str[0])
          str = str.Substring(1, str.Length - 2);
        stringList.Add(str);
      }
      string[] array = new string[stringList.Count];
      stringList.CopyTo(array, 0);
      return array;
    }

    public static bool ToBoolean(object source) => source is bool flag ? flag : SQLiteConvert.ToBoolean(source.ToString());

    public static bool ToBoolean(string source)
    {
      if (string.Compare(source, bool.TrueString, StringComparison.OrdinalIgnoreCase) == 0)
        return true;
      if (string.Compare(source, bool.FalseString, StringComparison.OrdinalIgnoreCase) == 0)
        return false;
      switch (source.ToLower(CultureInfo.InvariantCulture))
      {
        case "yes":
        case "y":
        case "1":
        case "on":
          return true;
        case "no":
        case "n":
        case "0":
        case "off":
          return false;
        default:
          throw new ArgumentException(nameof (source));
      }
    }

    internal static void ColumnToType(SQLiteStatement stmt, int i, SQLiteType typ) => typ.Type = SQLiteConvert.TypeNameToDbType(stmt._sql.ColumnType(stmt, i, out typ.Affinity));

    internal static Type SQLiteTypeToType(SQLiteType t) => t.Type == DbType.Object ? SQLiteConvert._affinitytotype[(int) t.Affinity] : SQLiteConvert.DbTypeToType(t.Type);

    internal static DbType TypeToDbType(Type typ)
    {
      TypeCode typeCode = Type.GetTypeCode(typ);
      if (typeCode != TypeCode.Object)
        return SQLiteConvert._typetodbtype[(int) typeCode];
      if ((object) typ == (object) typeof (byte[]))
        return DbType.Binary;
      return (object) typ == (object) typeof (Guid) ? DbType.Guid : DbType.String;
    }

    internal static int DbTypeToColumnSize(DbType typ) => SQLiteConvert._dbtypetocolumnsize[(int) typ];

    internal static object DbTypeToNumericPrecision(DbType typ) => SQLiteConvert._dbtypetonumericprecision[(int) typ];

    internal static object DbTypeToNumericScale(DbType typ) => SQLiteConvert._dbtypetonumericscale[(int) typ];

    internal static string DbTypeToTypeName(DbType typ)
    {
      for (int index = 0; index < SQLiteConvert._dbtypeNames.Length; ++index)
      {
        if (SQLiteConvert._dbtypeNames[index].dataType == typ)
          return SQLiteConvert._dbtypeNames[index].typeName;
      }
      return string.Empty;
    }

    internal static Type DbTypeToType(DbType typ) => SQLiteConvert._dbtypeToType[(int) typ];

    internal static TypeAffinity TypeToAffinity(Type typ)
    {
      TypeCode typeCode = Type.GetTypeCode(typ);
      if (typeCode != TypeCode.Object)
        return SQLiteConvert._typecodeAffinities[(int) typeCode];
      return (object) typ == (object) typeof (byte[]) || (object) typ == (object) typeof (Guid) ? TypeAffinity.Blob : TypeAffinity.Text;
    }

    internal static DbType TypeNameToDbType(string Name)
    {
      if (string.IsNullOrEmpty(Name))
        return DbType.Object;
      int length = SQLiteConvert._typeNames.Length;
      for (int index = 0; index < length; ++index)
      {
        if (string.Compare(Name, 0, SQLiteConvert._typeNames[index].typeName, 0, SQLiteConvert._typeNames[index].typeName.Length, StringComparison.OrdinalIgnoreCase) == 0)
          return SQLiteConvert._typeNames[index].dataType;
      }
      return DbType.Object;
    }
  }
}
