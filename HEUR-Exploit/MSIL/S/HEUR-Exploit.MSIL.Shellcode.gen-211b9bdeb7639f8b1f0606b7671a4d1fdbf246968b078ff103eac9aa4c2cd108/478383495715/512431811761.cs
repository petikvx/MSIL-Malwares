// Decompiled with JetBrains decompiler
// Type: 478383495715.512431811761
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003073564145303;
using \u003219302172411;
using \u003398049663276;
using \u003402511475581;
using \u003475310219084;
using \u003478383495715;
using \u003493731274116;
using \u003534647440872;
using \u003570935125301;
using \u003715672977127;
using \u003763242632939;
using \u003769200774489;
using \u003948266173665;
using Microsoft.ProgramSynthesis.Translation.Python;
using Microsoft.ProgramSynthesis.Utils;
using Microsoft.ProgramSynthesis.Utils.Interactive;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

namespace \u003478383495715
{
  internal static class \u003512431811761
  {
    private const int \u003966909859784 = 3;

    public static \u003330545282099 \u003260496604219(
      this IRichDataType _param0,
      IPythonColumnInfo _param1,
      \u003392131492675 _param2)
    {
      CodeBuilder codeBuilder = new CodeBuilder(4U);
      using (codeBuilder.NewScope(FormattableString.Invariant(FormattableStringFactory.Create("def {0}(value):", (object) _param1.\u003178507545093())), 1U))
      {
        if (_param0.NullsExpectedInData)
        {
          using (codeBuilder.NewScope(FormattableString.Invariant(FormattableStringFactory.Create("if value is None:")), 1U))
            codeBuilder.AppendLine("return None");
        }
        if (_param1.FixPandasNaNBug)
        {
          codeBuilder.AppendLine("import math");
          using (codeBuilder.NewScope(FormattableString.Invariant(FormattableStringFactory.Create("if isinstance(value, float) and math.isnan(value):")), 1U))
          {
            codeBuilder.AppendLine("# Workaround for pandas issue 14978. See https://github.com/pandas-dev/pandas/issues/14978.");
            codeBuilder.AppendLine("value = str(value)");
          }
        }
        if (_param0.NormalizableStringsExpectedInData)
          codeBuilder.AppendLine("value = value.strip()");
        switch (_param0)
        {
          case \u003415651442941 obj1:
            return obj1.\u003509991265562(_param1, _param2, codeBuilder);
          case \u003418950873144 obj2:
            return obj2.\u003485840937033(_param1, _param2, codeBuilder);
          case \u003477499562484 obj3:
            return obj3.\u003704695864069(_param1, _param2, codeBuilder);
          default:
            throw new NotImplementedException(FormattableString.Invariant(FormattableStringFactory.Create("Out-of-line code generation not supported for type: {0}.", (object) _param0)));
        }
      }
    }

    private static \u003330545282099 \u003704695864069(
      this \u003477499562484 _param0,
      IPythonColumnInfo _param1,
      \u003392131492675 _param2,
      CodeBuilder _param3)
    {
      using (_param3.NewScope(\u003512431811761.\u003812655017923((IReadOnlyList<string>) _param0.\u003304071846640.ToList<string>()), 1U))
        _param3.AppendLine("return True");
      using (_param3.NewScope(\u003512431811761.\u003812655017923((IReadOnlyList<string>) _param0.\u003263248571856.ToList<string>()), 1U))
        _param3.AppendLine("return False");
      List<string> stringList = new List<string>();
      if (!string.IsNullOrEmpty(_param0.\u003417624964401))
        stringList.Add(_param0.\u003417624964401);
      if (_param0.\u003431273125825)
        stringList.Add(string.Empty);
      \u003512431811761.\u003081949035588((IEnumerable<string>) stringList, _param3, _param1);
      \u003512431811761.\u003889786318482(_param3, _param1);
      return new \u003330545282099(_param3, _param1, (IRichDataType) _param0, (IEnumerable<string>) null);
    }

    private static string \u003812655017923(IReadOnlyList<string> _param0) => _param0.Count == 1 ? FormattableString.Invariant(FormattableStringFactory.Create("if value == {0}:", (object) PythonStringUtils.ToPythonLiteral(_param0.Single<string>()))) : FormattableString.Invariant(FormattableStringFactory.Create("if value in {0}:", (object) FormattableString.Invariant(FormattableStringFactory.Create("[{0}]", (object) string.Join(", ", _param0.Select<string, string>((Func<string, string>) (_param1 => PythonStringUtils.ToPythonLiteral(_param1))))))));

    private static \u003330545282099 \u003509991265562(
      this \u003415651442941 _param0,
      IPythonColumnInfo _param1_1,
      \u003392131492675 _param2,
      CodeBuilder _param3)
    {
      // ISSUE: variable of a compiler-generated type
      \u003512431811761.\u003504235320682 obj1;
      // ISSUE: reference to a compiler-generated field
      obj1.\u003431654399856 = _param0;
      // ISSUE: reference to a compiler-generated field
      obj1.\u003462264565357 = _param3;
      // ISSUE: reference to a compiler-generated field
      obj1.\u003306586333156 = _param1_1;
      // ISSUE: reference to a compiler-generated field
      IEnumerable<\u003301664478184> source = obj1.\u003431654399856.\u003245054004157.Where<\u003301664478184>((Func<\u003301664478184, bool>) (_param1_2 => !_param1_2.\u003463227775507));
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      (^(\u003512431811761.\u003648984821546&) ref obj1).\u003253917167985 = obj1.\u003431654399856.\u003245054004157.Where<\u003301664478184>((Func<\u003301664478184, bool>) (_param1_3 => _param1_3.\u003463227775507));
      // ISSUE: reference to a compiler-generated field
      string str1 = obj1.\u003431654399856.\u003758076372869 ? "float" : "int";
      List<string> imports = new List<string>();
      if (source.All<\u003301664478184>((Func<\u003301664478184, bool>) (_param1_5 => _param1_5.\u003029880056196())))
      {
        \u003512431811761.\u003728416809833(ref obj1);
        // ISSUE: reference to a compiler-generated field
        obj1.\u003462264565357.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("return {0}(value)", (object) str1)));
      }
      else
      {
        foreach (\u003301664478184 obj2 in source)
        {
          imports.Add("regex");
          Regex regex = obj2.\u003299534161265;
          // ISSUE: reference to a compiler-generated field
          using (obj1.\u003462264565357.NewScope(FormattableString.Invariant(FormattableStringFactory.Create("if regex.match({0}, value):", (object) PythonStringUtils.ToPythonLiteral(regex.ToString()))), 1U))
          {
            // ISSUE: reference to a compiler-generated field
            obj1.\u003462264565357.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("# Parse values formatted like: {0}...", (object) string.Join(", ", obj2.\u003439893257588.Take<string>(3).Select<string, string>((Func<string, string>) (_param1_4 => FormattableString.Invariant(FormattableStringFactory.Create("\"{0}\"", (object) _param1_4))))))));
            if (obj2.\u003029880056196())
            {
              // ISSUE: reference to a compiler-generated field
              obj1.\u003462264565357.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("return {0}(value)", (object) str1)));
            }
            else
            {
              foreach (KeyValuePair<string, string> keyValuePair in obj2.\u003803720777683.Concat<KeyValuePair<string, string>>((IEnumerable<KeyValuePair<string, string>>) obj2.\u003838478326228))
              {
                // ISSUE: reference to a compiler-generated field
                obj1.\u003462264565357.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("value = value.replace({0}, {1})", (object) PythonStringUtils.ToPythonLiteral(keyValuePair.Key), (object) PythonStringUtils.ToPythonLiteral(keyValuePair.Value))));
              }
              string str2 = obj2.\u003213158464276 ? "-" : string.Empty;
              // ISSUE: reference to a compiler-generated field
              obj1.\u003462264565357.AppendLine("return " + str2 + str1 + "(value)");
            }
            // ISSUE: reference to a compiler-generated field
            obj1.\u003462264565357.AppendLine();
          }
        }
        \u003512431811761.\u003728416809833(ref obj1);
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        \u003512431811761.\u003889786318482(obj1.\u003462264565357, obj1.\u003306586333156);
      }
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      return new \u003330545282099(obj1.\u003462264565357, obj1.\u003306586333156, (IRichDataType) obj1.\u003431654399856, (IEnumerable<string>) imports);
    }

    private static \u003330545282099 \u003485840937033(
      this \u003418950873144 _param0,
      IPythonColumnInfo _param1_1,
      \u003392131492675 _param2,
      CodeBuilder _param3)
    {
      List<IEnumerable<\u003513888654302>> list1 = _param0.\u003237890725016.Where<IEnumerable<\u003513888654302>>((Func<IEnumerable<\u003513888654302>, bool>) (_param1_3 => _param1_3.All<\u003513888654302>((Func<\u003513888654302, bool>) (_param1_2 => !_param1_2.\u003463227775507)))).ToList<IEnumerable<\u003513888654302>>();
      IEnumerable<string> source = _param0.\u003237890725016.Where<IEnumerable<\u003513888654302>>((Func<IEnumerable<\u003513888654302>, bool>) (_param1_5 => _param1_5.Any<\u003513888654302>((Func<\u003513888654302, bool>) (_param1_4 => _param1_4.\u003463227775507)))).Select<IEnumerable<\u003513888654302>, string>((Func<IEnumerable<\u003513888654302>, string>) (_param1_6 => _param1_6.Single<\u003513888654302>().\u003013635168359.Value));
      if (_param0.\u003201028261138)
        source = CollectionUtils.Append<string>(source, string.Empty);
      List<string> list2 = source.ToList<string>();
      if ((list1.Count<IEnumerable<\u003513888654302>>() != 1 ? 0 : (list2.Count<string>() == 0 ? 1 : 0)) != 0)
      {
        \u003512431811761.\u003319077983159(list1.Single<IEnumerable<\u003513888654302>>(), _param0, _param3, _param2);
      }
      else
      {
        for (int index = 0; index < list1.Count; ++index)
        {
          IEnumerable<\u003513888654302> objs = list1[index];
          if (index != list1.Count - 1 || list2.Any<string>())
          {
            using (_param3.NewScope("try:", 1U))
              \u003512431811761.\u003319077983159(objs, _param0, _param3, _param2);
            using (_param3.NewScope("except ValueError:", 1U))
              _param3.AppendLine("pass");
          }
          else
            \u003512431811761.\u003319077983159(objs, _param0, _param3, _param2);
          _param3.AppendLine();
        }
        if (list2.Any<string>())
        {
          \u003512431811761.\u003081949035588((IEnumerable<string>) list2, _param3, _param1_1);
          \u003512431811761.\u003889786318482(_param3, _param1_1);
        }
      }
      return new \u003330545282099(_param3, _param1_1, (IRichDataType) _param0, new string[1]
      {
        "datetime"
      });
    }

    private static void \u003319077983159(
      IEnumerable<\u003513888654302> _param0,
      \u003418950873144 _param1_1,
      CodeBuilder _param2,
      \u003392131492675 _param3)
    {
      IEnumerable<string> source = _param0.SelectMany<\u003513888654302, string>((Func<\u003513888654302, IEnumerable<string>>) (_param1_2 => _param1_2.\u003439893257588));
      \u003513888654302 obj = _param0.First<\u003513888654302>((Func<\u003513888654302, bool>) (_param1_3 => !string.IsNullOrEmpty(_param1_3.\u003075930419454.PosixParsingFormatString)));
      string parsingFormatString = obj.\u003075930419454.PosixParsingFormatString;
      _param2.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("# Parse values formatted like: {0} ...", (object) string.Join(", ", source.Take<string>(3).Select<string, string>((Func<string, string>) (_param1_4 => FormattableString.Invariant(FormattableStringFactory.Create("\"{0}\"", (object) _param1_4))))))));
      \u003512431811761.\u003773121540114(FormattableString.Invariant(FormattableStringFactory.Create("datetime.datetime.strptime({0}, {1})", (object) obj.\u003526529034458.\u003901534488910("value"), (object) PythonStringUtils.ToPythonLiteral(parsingFormatString))), _param3, _param1_1, _param2);
    }

    private static void \u003773121540114(
      string _param0,
      \u003392131492675 _param1,
      \u003418950873144 _param2,
      CodeBuilder _param3)
    {
      if (_param1 == \u003392131492675.PysparkDataFrame)
      {
        if (_param2.\u003780160262527 && !_param2.\u003677979328390)
        {
          _param3.AppendLine("# The data contains only a time. strptime() fills in a default");
          _param3.AppendLine("# value of 1900 for the year, and 01 for the month and day.");
          _param3.AppendLine("# Unfortunately, PySpark does not like dates earlier than the");
          _param3.AppendLine("# UNIX epoch (1970). Further, Python 3.6.x has a bug which does");
          _param3.AppendLine("# not like dates near 1970, so we change the year to 2000 before");
          _param3.AppendLine("# returning the result.");
          _param3.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("_result = {0}", (object) _param0)));
          using (_param3.NewScope("return datetime.datetime(", 1U))
          {
            _param3.AppendLine("2000,");
            _param3.AppendLine("_result.month,");
            _param3.AppendLine("_result.day,");
            _param3.AppendLine("_result.hour,");
            _param3.AppendLine("_result.minute,");
            _param3.AppendLine("_result.second,");
            _param3.AppendLine("_result.microsecond,");
            _param3.AppendLine("_result.tzinfo,");
          }
          _param3.AppendLine(")");
        }
        else
          _param3.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("return {0}", (object) _param0)));
      }
      else
        _param3.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("return {0}", (object) _param2.\u003063549704997(_param0))));
    }

    private static void \u003081949035588(
      IEnumerable<string> _param0,
      CodeBuilder _param1_1,
      IPythonColumnInfo _param2)
    {
      _param0 = (IEnumerable<string>) EnumerableEx.Memoize<string>(_param0);
      if (!_param0.Any<string>())
        return;
      _param1_1.AppendLine("# return None if the value is in the set of identified NA values.");
      string str = FormattableString.Invariant(FormattableStringFactory.Create("[{0}]", (object) string.Join(", ", _param0.Select<string, string>((Func<string, string>) (_param1_2 => PythonStringUtils.ToPythonLiteral(_param1_2))))));
      using (_param1_1.NewScope(FormattableString.Invariant(FormattableStringFactory.Create("if value in {0}:", (object) str)), 1U))
        _param1_1.AppendLine("return None");
    }

    private static void \u003889786318482(CodeBuilder _param0, IPythonColumnInfo _param1)
    {
      _param0.AppendLine("# We didn't encounter a value formatted like this when the datatype detection was performed.");
      if (_param1 == null)
      {
        _param0.AppendLine("raise ValueError(\"Unhandled case in type conversion: '%s'\" % value)");
      }
      else
      {
        using (_param0.NewScope("raise ValueError(", 1U))
          _param0.AppendLine("\"Unhandled case in type conversion for column %s: '%s'\" % (" + PythonStringUtils.ToPythonLiteral(_param1.ColumnName) + ", value)");
        _param0.AppendLine(")");
      }
    }

    [CompilerGenerated]
    internal static void \u003728416809833([In] ref \u003512431811761.\u003504235320682 obj0)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      IEnumerable<string> strings = (^(\u003512431811761.\u003648984821546&) ref obj0).\u003253917167985.Select<\u003301664478184, string>((Func<\u003301664478184, string>) (_param1 => _param1.\u003013635168359.Value));
      // ISSUE: reference to a compiler-generated field
      if (obj0.\u003431654399856.\u003201028261138)
        strings = CollectionUtils.Append<string>(strings, string.Empty);
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      \u003512431811761.\u003081949035588(strings, obj0.\u003462264565357, obj0.\u003306586333156);
    }
  }
}
