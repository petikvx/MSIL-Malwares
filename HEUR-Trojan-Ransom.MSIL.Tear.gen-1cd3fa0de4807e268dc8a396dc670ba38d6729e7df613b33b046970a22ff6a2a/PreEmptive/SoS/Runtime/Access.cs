// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Runtime.Access
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.SoS.Client.Cache;
using PreEmptive.SoS.Client.Messages;
using System;

namespace PreEmptive.SoS.Runtime
{
  public sealed class Access
  {
    public static ApplicationInformation ApplicationInfo;
    public static BusinessInformation BusinessInfo;
    private static CacheService a;
    private static string b;
    private static FeatureCorrelator c;

    public static Guid FeatureGroup(string A_0, bool A_1)
    {
      if (Access.c == null)
        Access.c = new FeatureCorrelator();
      return !A_1 ? Access.c.Remove(A_0) : Access.c.Add(A_0);
    }

    public static BusinessInformation CreateBusinessInformation(
      string A_0,
      string A_1)
    {
      return new BusinessInformation(new Guid(A_0), A_1);
    }

    public static ApplicationInformation CreateApplicationInformation(
      string A_0,
      string A_1,
      string A_2,
      string A_3)
    {
      return new ApplicationInformation(new Guid(A_0), A_1, A_2, A_3);
    }

    public static string GetCompanyName() => Access.BusinessInfo != null ? Access.BusinessInfo.CompanyName : (string) null;

    public static string GetApplicationName() => Access.ApplicationInfo != null ? Access.ApplicationInfo.Name : (string) null;

    public static void Setup(string A_0, BinaryInformation A_1)
    {
      if (Access.a == null)
      {
        Access.b = A_0;
        CacheServiceConfiguration A_0_1 = new CacheServiceConfiguration(Access.b);
        CacheServiceConfiguration configuration = A_0_1;
        A_0_1.SetProperty("webservice.url", (object) "so-s.info/Endpoint");
        A_0_1.UseSSL = false;
        A_0_1.OmitPersonalInformation = true;
        A_0_1.HashSensitiveData = true;
        Access.SetupRuntime(A_0_1, A_1);
        Access.a = CacheServiceFactory.CreateCacheService(configuration);
      }
      if (Access.c != null)
        return;
      Access.c = new FeatureCorrelator();
    }

    public static void SetupRuntime(CacheServiceConfiguration A_0, BinaryInformation A_1)
    {
      A_0.Binary = A_1;
      A_0.Business = Access.BusinessInfo == null ? new BusinessInformation(new Guid("7d2b02e0-064d-49a0-bc1b-4be4381c62d3"), "") : Access.BusinessInfo;
      A_0.Application = Access.ApplicationInfo == null ? new ApplicationInformation(new Guid("510b53a1-069e-4b67-9c03-31b3956c002c"), "Unknown Application", "", "") : Access.ApplicationInfo;
    }

    public static void Teardown()
    {
      if (Access.a == null)
        return;
      Access.a.ShutDown();
      Access.a = (CacheService) null;
    }

    public static void Send(Message A_0, bool A_1)
    {
      if (Access.a == null)
        return;
      Access.a.Send(A_0, A_1);
    }

    public static void Send(Message A_0) => Access.Send(A_0, false);

    public static void SendQueuedMessages()
    {
      if (Access.a == null)
        return;
      Access.a.SendQueuedMessages();
    }

    public static bool IsStarted() => Access.a != null;

    public static bool TeardownIfNeeded(bool A_0)
    {
      if (!A_0)
        return false;
      Access.Teardown();
      return true;
    }
  }
}
