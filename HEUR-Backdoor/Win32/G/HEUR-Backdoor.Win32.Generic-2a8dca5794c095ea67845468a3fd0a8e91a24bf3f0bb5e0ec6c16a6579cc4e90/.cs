// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Protected, Version=6.2.8400.0, Culture=neutral, PublicKeyToken=null
// MVID: 52CBE997-50C3-42B2-A704-C908D57869A5
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-2a8dca5794c095ea67845468a3fd0a8e91a24bf3f0bb5e0ec6c16a6579cc4e90.exe

using System;
using System.Collections;
using System.Reflection;
using System.Reflection.Emit;
using System.Text;

internal sealed class \uE019
{
  private ModuleBuilder \uE000;
  private Hashtable \uE001;

  public \uE019()
  {
    this.\uE001 = new Hashtable();
label_2:
    int num = \uE000.\uE000(56);
    AssemblyName name;
    AssemblyBuilder assemblyBuilder;
    Guid guid;
    while (true)
    {
      switch ((num ^ 45) + 52)
      {
        case 0:
          name.Version = new Version(1, 0, 0, 0);
          num = \uE000.\uE000(49);
          continue;
        case 1:
          this.\uE000 = assemblyBuilder.DefineDynamicModule("~", true);
          num = -4;
          continue;
        case 2:
          assemblyBuilder = AppDomain.CurrentDomain.DefineDynamicAssembly(name, AssemblyBuilderAccess.Run);
          num = -32;
          continue;
        case 3:
          name = new AssemblyName(guid.ToString("N"));
          num = -31;
          continue;
        case 4:
          guid = Guid.NewGuid();
          num = -30;
          continue;
        case 5:
          goto label_5;
        default:
          goto label_2;
      }
    }
label_5:;
  }

  public Type \uE003(string _param1, Type _param2, Type[] _param3)
  {
    string key = \uE019.\uE000(_param2, _param3);
    Type type1 = (Type) this.\uE001[(object) key];
    if (((object) type1 == null ? 1 : 0) == 0)
      return type1;
    Type type2 = this.\uE004(_param1, _param2, _param3);
    this.\uE001[(object) key] = (object) type2;
    return type2;
  }

  private static string \uE000(Type _param0, Type[] _param1)
  {
    if ((_param1.Length == 0 ? 0 : 1) == 0)
      return _param0.FullName;
    StringBuilder stringBuilder = new StringBuilder();
label_6:
    int num1 = \uE01D.\uE000(59);
    int num2 = -15;
    while (true)
    {
      switch ((num2 ^ 58) + 55)
      {
        case 0:
          goto label_6;
        case 1:
          Type type;
          int index;
          Type[] typeArray;
          switch (num1 + 44)
          {
            case 0:
              index = 0;
              num1 = -27;
              goto label_3;
            case 1:
              stringBuilder.Append(type.FullName);
              num1 = -23;
              goto label_3;
            case 2:
              if (index != 0)
              {
                num1 = -22;
                goto label_3;
              }
              else
                break;
            case 3:
              typeArray = _param1;
              num1 = -25;
              goto label_3;
            case 4:
              stringBuilder.Append(_param0.FullName);
              num1 = -28;
              goto label_3;
            case 5:
label_15:
              type = typeArray[index];
              num1 = -26;
              goto label_3;
            case 6:
              ++index;
              break;
            default:
              num2 = -13;
              continue;
          }
          if (index < typeArray.Length)
            goto label_15;
          else
            goto label_18;
        case 2:
label_3:
          num1 ^= 51;
          break;
      }
      num2 = \uE000.\uE000(52);
    }
label_18:
    return stringBuilder.ToString();
  }

  public Type \uE004(string _param1, Type _param2, Type[] _param3)
  {
    TypeBuilder typeBuilder = this.\uE000.DefineType(_param1, TypeAttributes.Public | TypeAttributes.Sealed | TypeAttributes.AutoClass, typeof (MulticastDelegate));
label_2:
    int num = \uE01D.\uE000(62);
    ConstructorBuilder constructorBuilder;
    MethodBuilder methodBuilder;
    while (true)
    {
      switch (num ^ 62)
      {
        case 59:
          methodBuilder = typeBuilder.DefineMethod("Invoke", MethodAttributes.Public | MethodAttributes.Virtual | MethodAttributes.HideBySig | MethodAttributes.VtableLayoutMask, _param2, _param3);
          num = 3;
          continue;
        case 60:
          constructorBuilder = typeBuilder.DefineConstructor(MethodAttributes.Public | MethodAttributes.HideBySig | MethodAttributes.RTSpecialName, CallingConventions.Standard, new Type[2]
          {
            typeof (object),
            typeof (IntPtr)
          });
          num = 0;
          continue;
        case 61:
          methodBuilder.SetImplementationFlags(MethodImplAttributes.CodeTypeMask);
          num = 1;
          continue;
        case 62:
          constructorBuilder.SetImplementationFlags(MethodImplAttributes.CodeTypeMask);
          num = \uE01D.\uE000(60);
          continue;
        case 63:
          goto label_7;
        default:
          goto label_2;
      }
    }
label_7:
    return typeBuilder.CreateType();
  }
}
