// Decompiled with JetBrains decompiler
// Type: mmxAH.WorkForm
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace mmxAH
{
  public class WorkForm : Form
  {
    private RichTextBox lblLeft;
    private RichTextBox lblMid;
    private RichTextBox lblRight;
    private Label lblQ;
    private ComboBox libChoose;
    private CheckedListBox boxMultiChoose;
    private byte neededMultiChooseCount = 0;
    public byte dec;
    private Button btnYes;
    private Button btnNo;
    private Button btnChoose;
    private Button btnStatus;
    private Button btnLog;
    private Button btnInvest;
    private Button btnMonsters;
    private Button btnAo;
    private Button btnOW;
    private Button btnArchemMap;
    private int MaxX;
    private int MaxY;
    private GameEngine en;
    private bool isPauseMode = false;

    public WorkForm(GameEngine eng, bool isAloneMode = false)
    {
      this.en = eng;
      this.en.SetWorkForm(this);
      this.MaxX = SystemInformation.VirtualScreen.Width;
      this.MaxY = SystemInformation.VirtualScreen.Height;
      this.FormBorderStyle = FormBorderStyle.None;
      this.WindowState = FormWindowState.Maximized;
      this.Text = this.en.sysstr.GetString(SSType.Title);
      this.lblLeft = this.CreateLbl();
      this.lblLeft.Location = new Point(0, 0);
      this.lblLeft.Width = this.MaxX;
      this.lblLeft.Visible = true;
      this.lblMid = this.CreateLbl();
      this.lblMid.Location = new Point(this.MaxX / 3, 0);
      this.lblRight = this.CreateLbl();
      this.lblRight.Location = new Point(this.MaxX * 2 / 3, 0);
      Button button = new Button();
      if (isAloneMode)
      {
        button.Text = "Exit";
        button.Click += new EventHandler(this.BtnMMClickExit);
      }
      else
      {
        button.Text = this.en.sysstr.GetString(SSType.MainMenuButton);
        button.Click += new EventHandler(this.BtnMMClick);
      }
      button.Location = new Point(this.MaxX / 2, this.MaxY * 92 / 100);
      button.Width = this.MaxX / 10;
      this.Controls.Add((Control) button);
      this.btnYes = this.CreateButton(new EventHandler(this.BtnYesClick), 20, 89, false, "Yes");
      this.btnNo = this.CreateButton(new EventHandler(this.BtnNoClick), 40, 89, false, "No");
      Label label = new Label();
      label.Visible = false;
      label.Location = new Point(this.MaxX * 2 / 10, this.MaxY * 83 / 100);
      label.Width = this.MaxX * 6 / 10;
      label.Height = this.MaxY * 3 / 100;
      this.lblQ = label;
      this.Controls.Add((Control) label);
      this.libChoose = new ComboBox();
      this.libChoose.Location = new Point(this.MaxX * 2 / 10, this.MaxY * 87 / 100);
      this.libChoose.Width = this.MaxX * 4 / 10;
      this.libChoose.DropDownStyle = ComboBoxStyle.DropDownList;
      this.libChoose.Visible = false;
      this.libChoose.SelectedIndexChanged += new EventHandler(this.LibChooseSelected);
      this.libChoose.MaximumSize = new Size(this.MaxX * 6 / 10, this.MaxY * 6 / 100);
      this.Controls.Add((Control) this.libChoose);
      this.btnChoose = this.CreateButton(new EventHandler(this.BtnChooseClick), 70, 87, false, "Choose");
      this.btnStatus = this.CreateButton(new EventHandler(this.BtnStatusClick), 10, 77, true, this.en.sysstr.GetString(SSType.ButtonStatus));
      this.btnLog = this.CreateButton(new EventHandler(this.BtnLogClick), 20, 77, true, this.en.sysstr.GetString(SSType.ButtonLog));
      this.btnInvest = this.CreateButton(new EventHandler(this.BtnInvestClick), 30, 77, true, this.en.sysstr.GetString(SSType.ButtonInvest));
      this.btnAo = this.CreateButton(new EventHandler(this.BtnAOClick), 40, 77, true, this.en.sysstr.GetString(SSType.ButtonAO));
      this.btnMonsters = this.CreateButton(new EventHandler(this.BtnMonstersClick), 50, 77, true, this.en.sysstr.GetString(SSType.ButtonMonsters));
      this.btnOW = this.CreateButton(new EventHandler(this.BtnOWClick), 10, 80, true, this.en.sysstr.GetString(SSType.ButtonOW));
      this.btnArchemMap = this.CreateButton(new EventHandler(this.BtnArchemMapClick), 20, 80, true, this.en.sysstr.GetString(SSType.ButtonArchemMap));
      this.libChoose.MaxDropDownItems = 5;
      this.boxMultiChoose = new CheckedListBox();
      this.boxMultiChoose.Location = new Point(this.MaxX * 2 / 10, this.MaxY * 86 / 100);
      this.boxMultiChoose.Height = this.MaxY * 5 / 100;
      this.boxMultiChoose.Width = this.MaxX * 4 / 10;
      this.boxMultiChoose.ItemCheck += new ItemCheckEventHandler(this.BoxMultiChooseSelected);
      this.boxMultiChoose.Visible = false;
      this.Controls.Add((Control) this.boxMultiChoose);
    }

    private RichTextBox CreateLbl()
    {
      RichTextBox lbl = new RichTextBox();
      lbl.Width = this.MaxX / 3;
      lbl.Height = this.MaxY * 75 / 100;
      lbl.Text = "";
      lbl.WordWrap = false;
      lbl.ReadOnly = true;
      lbl.ScrollBars = RichTextBoxScrollBars.Both;
      lbl.Visible = false;
      lbl.BackColor = Color.White;
      this.Controls.Add((Control) lbl);
      return lbl;
    }

    private Button CreateButton(
      EventHandler event_handler,
      int x,
      int y,
      bool isVisible,
      string Capiton)
    {
      Button button = new Button();
      button.Click += event_handler;
      button.Text = Capiton;
      button.Location = new Point(this.MaxX * x / 100, this.MaxY * y / 100);
      button.Visible = isVisible;
      button.Width = this.MaxX * 7 / 100;
      this.Controls.Add((Control) button);
      return button;
    }

    private void BtnMMClick(object sender, EventArgs arg)
    {
      this.Hide();
      this.en.io.ShowMainMenu();
    }

    private void BtnMMClickExit(object sender, EventArgs arg) => this.Close();

    private void BtnYesClick(object sender, EventArgs arg)
    {
      this.ClearControls();
      if (this.isPauseMode)
      {
        this.isPauseMode = false;
        this.en.io.PauseEnd();
      }
      else
        this.en.io.Answer(true);
    }

    private void BtnNoClick(object sender, EventArgs arg)
    {
      this.ClearControls();
      this.en.io.Answer(false);
    }

    private void BtnChooseClick(object sender, EventArgs arg)
    {
      this.ClearControls();
      if (this.neededMultiChooseCount > (byte) 0)
      {
        this.neededMultiChooseCount = (byte) 0;
        List<short> outherCodes = new List<short>();
        for (int index = 0; index < this.boxMultiChoose.CheckedIndices.Count; ++index)
          outherCodes.Add((short) this.boxMultiChoose.CheckedIndices[index]);
        this.en.io.MultiChooseEnd(outherCodes);
      }
      else
        this.en.io.ChooseEnd(this.libChoose.SelectedIndex);
    }

    private void BtnStatusClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Status);
      this.en.io.UpdateForm();
    }

    private void BtnLogClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Log);
      this.en.io.UpdateForm();
    }

    private void BtnInvestClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Investigators);
      this.en.io.UpdateForm();
    }

    private void BtnAOClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Ao);
      this.en.io.UpdateForm();
    }

    private void BtnMonstersClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Monsters);
      this.en.io.UpdateForm();
    }

    private void BtnOWClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Ow);
      this.en.io.UpdateForm();
    }

    private void BtnArchemMapClick(object sender, EventArgs arg)
    {
      this.en.io.SetFormMode(FormMode.Map);
      this.en.io.UpdateForm();
    }

    private void LibChooseSelected(object sender, EventArgs arg) => this.btnChoose.Enabled = true;

    private void BoxMultiChooseSelected(object sender, ItemCheckEventArgs arg)
    {
      byte count = (byte) this.boxMultiChoose.CheckedItems.Count;
      if ((arg.NewValue != CheckState.Checked ? (int) (byte) ((uint) count - 1U) : (int) (byte) ((uint) count + 1U)) == (int) this.neededMultiChooseCount)
        this.btnChoose.Enabled = true;
      else
        this.btnChoose.Enabled = false;
    }

    public void ShowLabelText(
      string Text,
      byte fontsize = 12,
      bool isBold = false,
      bool isItalic = false,
      byte label = 1,
      string chooseColor = "Black")
    {
      this.lblLeft.DeselectAll();
      this.lblMid.DeselectAll();
      this.lblRight.DeselectAll();
      Color color = Color.FromName(chooseColor);
      Font font = !(isBold & isItalic) ? (!isBold ? (!isItalic ? new Font("Times New Roman", (float) fontsize, FontStyle.Regular) : new Font("Times New Roman", (float) fontsize, FontStyle.Italic)) : new Font("Times New Roman", (float) fontsize, FontStyle.Bold)) : new Font("Times New Roman", (float) fontsize, FontStyle.Bold | FontStyle.Italic);
      if (label == (byte) 1)
      {
        this.lblLeft.SelectionFont = font;
        this.lblLeft.SelectionColor = color;
        this.lblLeft.AppendText(Text);
      }
      else if (label == (byte) 2)
      {
        this.lblMid.SelectionFont = font;
        this.lblMid.SelectionColor = color;
        this.lblMid.AppendText(Text);
      }
      else
      {
        this.lblRight.SelectionFont = font;
        this.lblRight.SelectionColor = color;
        this.lblRight.AppendText(Text);
      }
    }

    public void mapMode(bool mode)
    {
      this.ClearLabels();
      this.lblMid.Visible = mode;
      this.lblRight.Visible = mode;
      if (mode)
        this.lblLeft.Width = this.MaxX / 3;
      else
        this.lblLeft.Width = this.MaxX;
    }

    public void ArrengeLabels()
    {
      int num = Math.Max(this.lblLeft.Lines.Length, Math.Max(this.lblMid.Lines.Length, this.lblRight.Lines.Length));
      for (int length = this.lblLeft.Lines.Length; length < num; ++length)
        this.ShowLabelText(Environment.NewLine, (byte) 10);
      for (int length = this.lblMid.Lines.Length; length < num; ++length)
        this.ShowLabelText(Environment.NewLine, (byte) 10, label: (byte) 2);
      for (int length = this.lblRight.Lines.Length; length < num; ++length)
        this.ShowLabelText(Environment.NewLine, (byte) 10, label: (byte) 3);
    }

    private void ClearLabels()
    {
      this.lblLeft.Text = "";
      this.lblMid.Text = "";
      this.lblRight.Text = "";
    }

    private void ClearControls()
    {
      this.btnYes.Visible = false;
      this.btnNo.Visible = false;
      this.lblQ.Visible = false;
      this.libChoose.Visible = false;
      this.boxMultiChoose.Visible = false;
      this.btnChoose.Visible = false;
    }

    public void StartPause(string title)
    {
      this.btnYes.Visible = true;
      this.btnYes.Text = title;
      this.isPauseMode = true;
    }

    public void StartYesNo(string title, string YesAnswer, string NoAnswer)
    {
      this.btnYes.Visible = true;
      this.btnYes.Text = YesAnswer;
      this.btnNo.Visible = true;
      this.btnNo.Text = NoAnswer;
      this.lblQ.Visible = true;
      this.lblQ.Text = title;
    }

    public void StartChoose(string title, List<string> chooses, string buttonTitle)
    {
      this.lblQ.Visible = true;
      this.lblQ.Text = title;
      this.libChoose.Visible = true;
      this.libChoose.Items.Clear();
      foreach (object choose in chooses)
        this.libChoose.Items.Add(choose);
      this.btnChoose.Text = buttonTitle;
      this.btnChoose.Visible = true;
      this.btnChoose.Enabled = false;
    }

    public void StartMultiChoose(
      string title,
      List<string> chooses,
      byte needCount,
      string buttonTitle)
    {
      this.lblQ.Visible = true;
      this.lblQ.Text = title;
      this.boxMultiChoose.Visible = true;
      this.boxMultiChoose.Items.Clear();
      foreach (object choose in chooses)
        this.boxMultiChoose.Items.Add(choose);
      this.btnChoose.Text = buttonTitle;
      this.btnChoose.Visible = true;
      this.btnChoose.Enabled = false;
      this.neededMultiChooseCount = needCount;
    }
  }
}
