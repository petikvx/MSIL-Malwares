// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: Encod, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DCFB260-FACB-496A-9BC9-FA9701DCBF71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d5f77ba2b2ad58cfad5ae3111994ad0f889967e6d4f67ecb9cedf1b8f10a6149.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -1657898038;
      int aIndex;
      JSONNode jsonNode;
      int count;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2080269738)) % 18U)
        {
          case 0:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 1369629589 ^ -2133538860;
            continue;
          case 1:
            int num3;
            num1 = num3 = aIndex >= count ? -186537780 : (num3 = -363964155);
            continue;
          case 2:
            goto label_1;
          case 3:
            this._playerStates[index] = new PlayerState();
            num1 = -785192483;
            continue;
          case 4:
            int num4 = flag ? 895181153 : (num4 = 1720567215);
            num1 = num4 ^ (int) num2 * -1134540988;
            continue;
          case 5:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -487782210;
            continue;
          case 6:
            num1 = (int) num2 * 85359429 ^ -827768349;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * -558670575 ^ -137006339;
            continue;
          case 9:
            aIndex = 0;
            num1 = (int) num2 * -794208576 ^ -1053143620;
            continue;
          case 10:
            this.Players = new Player[count];
            num1 = (int) num2 * -188600087 ^ 1981533751;
            continue;
          case 11:
            this._buffer = buffer;
            num1 = (int) num2 * -522861458 ^ 844407361;
            continue;
          case 12:
            flag = index < count;
            num1 = -961524114;
            continue;
          case 13:
            this._random = Game.\u206B‌‬‪⁪⁭⁬‪⁬‪‎⁮‬⁫⁫⁭‫‍‮‎⁯‮‏‎⁪⁭⁪‬⁯‭⁭‪‮‌⁮⁭⁮‫‬‌‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            jsonNode = json["players"];
            num1 = (int) num2 * 381693811 ^ 1855677282;
            continue;
          case 14:
            ++aIndex;
            num1 = (int) num2 * -1250875714 ^ -1539204217;
            continue;
          case 15:
            ++index;
            num1 = (int) num2 * -1955466288 ^ 105830996;
            continue;
          case 16:
            num1 = (int) num2 * -880540790 ^ -1193082140;
            continue;
          case 17:
            count = jsonNode.Count;
            num1 = (int) num2 * -1806811147 ^ -1878395045;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 773473127;
        bool finished2;
        int index;
        bool flag;
        PlayerState[] playerStates;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 923165131)) % 15U)
          {
            case 0:
              goto label_1;
            case 1:
              playerStates = this._playerStates;
              num1 = (int) num2 * -1193060902 ^ -1151233157;
              continue;
            case 2:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * 78179397 ^ 1445849958;
              continue;
            case 3:
              playerState = playerStates[index];
              num1 = 1651771228;
              continue;
            case 4:
              int num3 = finished1 ? -1279506621 : (num3 = -1645788946);
              num1 = num3 ^ (int) num2 * -163220873;
              continue;
            case 5:
              finished2 = true;
              num1 = (int) num2 * -1820755600 ^ -802449173;
              continue;
            case 6:
              finished2 = false;
              num1 = (int) num2 * -1267636782 ^ 1133477543;
              continue;
            case 7:
              index = 0;
              num1 = (int) num2 * -90385665 ^ -1613779923;
              continue;
            case 8:
              num1 = (int) num2 * -626615161 ^ -1891813666;
              continue;
            case 10:
              int num4;
              num1 = num4 = index < playerStates.Length ? 876648125 : (num4 = 233961174);
              continue;
            case 11:
              ++index;
              num1 = 1182634773;
              continue;
            case 12:
              int num5 = flag ? 1984303857 : (num5 = 932366604);
              num1 = num5 ^ (int) num2 * -1700290266;
              continue;
            case 13:
              finished2 = true;
              num1 = (int) num2 * -1278572447 ^ 69948068;
              continue;
            case 14:
              num1 = 1266415463;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -17090645;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1923109956)) % 11U)
        {
          case 0:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1059695424 ^ -774841584;
            continue;
          case 1:
            this.ShuffleCards();
            num1 = (int) num2 * -724680889 ^ -613970673;
            continue;
          case 2:
            this._currentTurn = 0;
            num1 = (int) num2 * 1324342892 ^ 443987298;
            continue;
          case 3:
            goto label_3;
          case 4:
            this._finished = false;
            num1 = (int) num2 * -754866708 ^ 1654986928;
            continue;
          case 5:
            num1 = (int) num2 * 655726747 ^ -380315714;
            continue;
          case 6:
            num1 = (int) num2 * -603972093 ^ -794673951;
            continue;
          case 7:
            this.Losers.Clear();
            num1 = (int) num2 * -1715610020 ^ 838300215;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.Winners.Clear();
            num1 = (int) num2 * 1958318337 ^ 1692251127;
            continue;
          case 10:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 876608217 ^ 483140661;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    public void PlanningState()
    {
      int index = 0;
label_12:
      bool flag1 = index < this.Players.Length;
      int num1 = -516219397;
      Player player;
      int planningCardsCount;
      int num2;
      PlayerState playerState;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1489946692)) % 26U)
        {
          case 0:
            num1 = (int) num3 * 995232752 ^ 240199625;
            continue;
          case 1:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1604152257 ^ 930038589;
            continue;
          case 2:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 1391491011 ^ -823430680;
            continue;
          case 3:
            int num4 = !flag1 ? 218457388 : (num4 = 2089078271);
            num1 = num4 ^ (int) num3 * 527943847;
            continue;
          case 4:
            player = this.Players[index];
            num1 = -1923065202;
            continue;
          case 5:
            int num5 = !flag2 ? -41250260 : (num5 = -675821315);
            num1 = num5 ^ (int) num3 * 1682104222;
            continue;
          case 6:
            num2 = 0;
            num1 = -864814515;
            continue;
          case 7:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * -584071327 ^ 994881421;
            continue;
          case 8:
            num2 = 0;
            int num6 = planningCardsCount == 0 ? 2032317149 : (num6 = 303216740);
            num1 = num6 ^ (int) num3 * 1316873587;
            continue;
          case 9:
            int num7 = player.UseOneMorePlanningSprint ? -847700793 : (num7 = -1854197045);
            num1 = num7 ^ (int) num3 * -1569610253;
            continue;
          case 10:
            num1 = (int) num3 * 189259786 ^ -635278084;
            continue;
          case 11:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 144494828 ^ 1474345707;
            continue;
          case 12:
            num1 = -1657880146;
            continue;
          case 13:
            ++index;
            num1 = (int) num3 * -1996117797 ^ -664435780;
            continue;
          case 14:
            playerState.Sprint = 0;
            num1 = (int) num3 * -309085301 ^ -1173567537;
            continue;
          case 15:
            goto label_3;
          case 16:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 356925645 ^ -1856016174;
            continue;
          case 17:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -2116586169;
            continue;
          case 18:
            num1 = -899307379;
            continue;
          case 19:
            num1 = (int) num3 * -1386685834 ^ 883838351;
            continue;
          case 20:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -2032913351 ^ -297298190;
            continue;
          case 21:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * -312850455 ^ -472568876;
            continue;
          case 22:
            flag2 = num2 > 0;
            num1 = -228418957;
            continue;
          case 23:
            goto label_12;
          case 24:
            num1 = (int) num3 * 875718933 ^ -1158168639;
            continue;
          case 25:
            num1 = -1096279543;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 39481414;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 521139205)) % 15U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentPlayer = 0;
            num1 = (int) num2 * 907644339 ^ 1896412298;
            continue;
          case 2:
            num1 = (int) num2 * 1850423904 ^ 1512284288;
            continue;
          case 3:
            this.Print((object) Game.\u202A‎⁯‬⁯‬‪‬‪‎⁭​‪‬‮⁭⁫‪‭⁬‎‪⁫⁮‏‍⁪⁬‬‍‬⁮‮‪⁭​‭⁯⁮‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 1659539835;
            continue;
          case 4:
            num1 = (int) num2 * 27804057 ^ 18597976;
            continue;
          case 5:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 1874347200 ^ 2065575069;
            continue;
          case 6:
            int num3 = !flag2 ? -849648552 : (num3 = -18003676);
            num1 = num3 ^ (int) num2 * 69327129;
            continue;
          case 7:
            num1 = (int) num2 * 934604529 ^ 796707015;
            continue;
          case 8:
            int num4 = !flag1 ? 276994078 : (num4 = 262379966);
            num1 = num4 ^ (int) num2 * 1686584407;
            continue;
          case 9:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -755958307 ^ -2031116524;
            continue;
          case 11:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1123064642 ^ -2065184966;
            continue;
          case 12:
            num1 = (int) num2 * 1330494184 ^ 1051279901;
            continue;
          case 13:
            ++this._currentPlayer;
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 2008508996 ^ -39391234;
            continue;
          case 14:
            this.Print((object) Game.\u206A‏⁮‫‭‪‭‬‍‍⁫‬‭‬‏⁭‭⁮⁫‏‎‮‫‎⁯‭⁫⁮⁭‭‌‎‫⁬‍⁮‍‭⁮‎‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1320823034 ^ -608025119;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 1464792504;
      while (true)
      {
        uint num2;
        bool onlyOneWinner;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        int index;
        int num3;
        bool flag3;
        PlayerState playerState2;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        Player player;
        Card card;
        int num4;
        bool flag10;
        int num5;
        bool flag11;
        bool flag12;
        int num6;
        switch ((num2 = (uint) (num1 ^ 306936880)) % 87U)
        {
          case 0:
            num1 = (int) num2 * 1476999487 ^ 181269935;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = 1648528551;
            continue;
          case 3:
            int num7 = !flag9 ? -1782916088 : (num7 = -1826509967);
            num1 = num7 ^ (int) num2 * -2097631192;
            continue;
          case 4:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206A‏⁮‫‭‪‭‬‍‍⁫‬‭‬‏⁭‭⁮⁫‏‎‮‫‎⁯‭⁫⁮⁭‭‌‎‫⁬‍⁮‍‭⁮‎‮("\t", playerState3 != null ? Game.\u206E‎⁪​‏⁮⁪‭⁪‫⁬⁫‍‭⁬‮‬‭‏​​‭‫‫‌‏‬⁫⁮⁯‮‬⁪⁭⁪​⁭‏⁮‮((object) playerState3) : (string) null));
            num1 = 23735160;
            continue;
          case 5:
            flag1 = playerState1.Resources >= 0;
            num1 = (int) num2 * -1209106713 ^ 364160704;
            continue;
          case 6:
            flag12 = index < this._playerStates.Length;
            num1 = 1715309617;
            continue;
          case 7:
            int num8 = flag11 ? 2097176453 : (num8 = 1087539063);
            num1 = num8 ^ (int) num2 * -1887215225;
            continue;
          case 8:
            num1 = 14151906;
            continue;
          case 9:
            playerState2.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1976295494 ^ -767077116;
            continue;
          case 10:
            this.Losers.Add(index);
            num1 = (int) num2 * 1505772652 ^ -685968905;
            continue;
          case 11:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -61009764 ^ 701382834;
            continue;
          case 12:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -1331956270 ^ -1469562430;
            continue;
          case 13:
            num1 = (int) num2 * -1558897211 ^ 649482465;
            continue;
          case 14:
            flag7 = !flag10;
            num1 = (int) num2 * -1808883940 ^ -1127385663;
            continue;
          case 15:
            this.Print((object) Game.\u206A‏⁮‫‭‪‭‬‍‍⁫‬‭‬‏⁭‭⁮⁫‏‎‮‫‎⁯‭⁫⁮⁭‭‌‎‫⁬‍⁮‍‭⁮‎‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 676499858 ^ 381916116;
            continue;
          case 16:
            playerState1.State = State.Lose;
            flag11 = !this.Losers.Contains(index);
            num1 = 1788996037;
            continue;
          case 17:
            num1 = (int) num2 * 707356563 ^ 1836465439;
            continue;
          case 18:
            num3 = 0;
            num1 = (int) num2 * 1957144362 ^ -566964137;
            continue;
          case 19:
            num1 = (int) num2 * -1166869226 ^ -263715307;
            continue;
          case 20:
            num1 = (int) num2 * 1491431913 ^ -643578325;
            continue;
          case 21:
            num1 = 15609426;
            continue;
          case 22:
            ++playerState2.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 488692804 ^ 1377771957;
            continue;
          case 23:
            ++playerState2.Sprint;
            num1 = (int) num2 * -689207220 ^ -1428623059;
            continue;
          case 24:
            flag3 = num3 < this._playerStates.Length;
            num1 = 2033111133;
            continue;
          case 25:
            num1 = 1848260360;
            continue;
          case 26:
            num1 = (int) num2 * 86178837 ^ -679838815;
            continue;
          case 27:
            flag2 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -428465949 ^ 58843798;
            continue;
          case 28:
            this._finished = true;
            num1 = (int) num2 * 859956898 ^ 1757154818;
            continue;
          case 29:
            int num9;
            num1 = num9 = flag4 ? 843975148 : (num9 = 737619069);
            continue;
          case 30:
            num1 = 101939253;
            continue;
          case 31:
            int num10;
            num1 = num10 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1327996812 : (num10 = 1866486143);
            continue;
          case 32:
            playerState2.State = State.Lose;
            num1 = (int) num2 * 1235265138 ^ 1778017681;
            continue;
          case 33:
            int num11 = num3 == playerIndex ? -106966754 : (num11 = -1456535302);
            num1 = num11 ^ (int) num2 * -1311933423;
            continue;
          case 34:
            num1 = (int) num2 * -1516915558 ^ -1310254676;
            continue;
          case 35:
            num1 = (int) num2 * -766121373 ^ 1761265544;
            continue;
          case 36:
            flag9 = playerState2.Sprint > this.Rules.SprintCount;
            num1 = 971160016;
            continue;
          case 37:
            num1 = (int) num2 * -2069054480 ^ 1606811587;
            continue;
          case 38:
            playerState2.Resources -= num4;
            num1 = (int) num2 * -1108684942 ^ 185388561;
            continue;
          case 39:
            num1 = 992050739;
            continue;
          case 40:
            int num12 = !flag12 ? -2125566841 : (num12 = -1043482605);
            num1 = num12 ^ (int) num2 * 1679888947;
            continue;
          case 41:
            ++index;
            num1 = 1927504953;
            continue;
          case 42:
            flag6 = !flag5;
            num1 = (int) num2 * 2005360976 ^ 582304044;
            continue;
          case 43:
            int num13 = flag1 ? 1478981645 : (num13 = 928285925);
            num1 = num13 ^ (int) num2 * 980463862;
            continue;
          case 44:
            num4 = Game.\u200C‪⁬‬‪⁭‏⁫⁪⁪⁪⁪⁪‌​⁪⁬⁪‬​⁪‌‌‌⁭⁪‌⁪‏‫⁭⁪‍‬‍‪‪‌⁪⁫‮(0, num5);
            num1 = (int) num2 * -1092544882 ^ 1159167333;
            continue;
          case 45:
            goto label_1;
          case 46:
            flag4 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 928207377 ^ 1078696621;
            continue;
          case 47:
            flag4 = true;
            num4 = card.Impact;
            num1 = 340292373;
            continue;
          case 48:
            flag8 = !this.Losers.Contains(num3);
            num1 = 1190091485;
            continue;
          case 49:
            num1 = (int) num2 * 1193123005 ^ -89887186;
            continue;
          case 50:
            this.Losers.Add(num3);
            num1 = (int) num2 * 1543401758 ^ -54773549;
            continue;
          case 51:
            num1 = (int) num2 * 164936548 ^ 833275927;
            continue;
          case 52:
            num1 = (int) num2 * -1114877043 ^ -130453836;
            continue;
          case 53:
            num1 = (int) num2 * 1114784817 ^ 738616746;
            continue;
          case 54:
            int num14 = playerState2.Resources >= 0 ? 415634997 : (num14 = 1024200424);
            num1 = num14 ^ (int) num2 * 359178279;
            continue;
          case 55:
            playerState1 = this._playerStates[index];
            num1 = (int) num2 * 574191909 ^ -1676848670;
            continue;
          case 56:
            index = 0;
            num1 = 1927504953;
            continue;
          case 57:
            int num15 = flag3 ? -1129528468 : (num15 = -590939476);
            num1 = num15 ^ (int) num2 * 182516051;
            continue;
          case 58:
            card = this.DrawCard();
            flag5 = card.Impact < 0;
            num1 = (int) num2 * -1725870438 ^ 780870604;
            continue;
          case 59:
            int num16 = playerState2.State == 0 ? -79897070 : (num16 = -1589356864);
            num1 = num16 ^ (int) num2 * 721092803;
            continue;
          case 60:
            num1 = (int) num2 * 691576390 ^ 738862460;
            continue;
          case 61:
            num1 = (int) num2 * 2111805541 ^ -1368510822;
            continue;
          case 62:
            num1 = (int) num2 * 1815948095 ^ 327960773;
            continue;
          case 63:
            num1 = (int) num2 * 1929819168 ^ -2091820124;
            continue;
          case 64:
            int num17 = !flag7 ? 1167976922 : (num17 = 139597230);
            num1 = num17 ^ (int) num2 * -1012353089;
            continue;
          case 65:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * 1436741916 ^ 997028708;
            continue;
          case 66:
            int num18 = flag2 ? -738903530 : (num18 = -45511848);
            num1 = num18 ^ (int) num2 * -1913575562;
            continue;
          case 67:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1543470114 ^ 750503535;
            continue;
          case 68:
            flag4 = false;
            num1 = 86534427;
            continue;
          case 69:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 932719036 ^ -1241198516;
              continue;
            }
            num6 = 0;
            break;
          case 70:
            num1 = (int) num2 * 1725713429 ^ 2064909308;
            continue;
          case 71:
            flag4 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 445464357 ^ 312166098;
            continue;
          case 72:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag10 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u206F⁪⁯⁬‭‎⁯‭‫‍⁪‪⁯⁪⁬‭⁬⁭⁮‌‫‌⁯⁫‮‍‏‫‬⁮‌⁮⁯⁬⁯‬⁪⁫‭‌‮(num4), flag4 ? (object) "advance" : (object) "stay");
            num1 = 318473349;
            continue;
          case 73:
            num1 = (int) num2 * 513991698 ^ -406158584;
            continue;
          case 74:
            num1 = (int) num2 * 188204566 ^ -200807849;
            continue;
          case 75:
            num1 = (int) num2 * -481171116 ^ 1425906520;
            continue;
          case 76:
            num1 = (int) num2 * -207222941 ^ -2052546444;
            continue;
          case 77:
            num1 = 1094829245;
            continue;
          case 78:
            int num19 = !flag6 ? -1681412320 : (num19 = -514869581);
            num1 = num19 ^ (int) num2 * -969024361;
            continue;
          case 79:
            int num20;
            num1 = num20 = playerState2.Sprint < 0 ? 1258047562 : (num20 = 1321336802);
            continue;
          case 80:
            num1 = 319501091;
            continue;
          case 81:
            playerState1.Resources -= Game.\u200C‪⁬‬‪⁭‏⁫⁪⁪⁪⁪⁪‌​⁪⁬⁪‬​⁪‌‌‌⁭⁪‌⁪‏‫⁭⁪‍‬‍‪‪‌⁪⁫‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 1398971568 ^ -1379042250;
            continue;
          case 82:
            int num21 = !onlyOneWinner ? 662820773 : (num21 = 1920251389);
            num1 = num21 ^ (int) num2 * -936147374;
            continue;
          case 83:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 84:
            ++num3;
            num1 = 275710516;
            continue;
          case 85:
            int num22 = !flag8 ? -1088243552 : (num22 = -372142828);
            num1 = num22 ^ (int) num2 * 823882754;
            continue;
          case 86:
            player = this.Players[playerIndex];
            playerState2 = this._playerStates[playerIndex];
            num1 = (int) num2 * -1847891430 ^ -288028317;
            continue;
          default:
            goto label_92;
        }
        flag10 = num6 != 0;
        num1 = 1124801504;
      }
label_3:
      return;
label_92:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -81784490;
      Card card1;
      Card card2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1877827439)) % 9U)
        {
          case 0:
            int num3 = !flag ? 245404573 : (num3 = 1173047986);
            num1 = num3 ^ (int) num2 * 1440858314;
            continue;
          case 1:
            num1 = (int) num2 * -2136412797 ^ 1239554954;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -1776800163 ^ 414548736;
            continue;
          case 4:
            card2 = card1;
            num1 = (int) num2 * -1968963765 ^ -1339044517;
            continue;
          case 5:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1455027626 ^ -897667156;
            continue;
          case 6:
            card1 = this._deck[0];
            num1 = -316324549;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * -1472178936 ^ -1526694213;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 921050473;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1646943069)) % 9U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206E‎⁪​‏⁮⁪‭⁪‫⁬⁫‍‭⁬‮‬‭‏​​‭‫‫‌‏‬⁫⁮⁯‮‬⁪⁭⁪​⁭‏⁮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200B‬‫⁪‏‬⁪⁪​⁫⁯‎⁮‮‏⁬‍‏⁪‌‬⁭‫⁭⁭‫‫‪⁪‏‍⁬‮​⁪⁮‮⁮‌‫‮(strArray);
            num1 = 1012164471;
            continue;
          case 1:
            num1 = (int) num2 * -219908898 ^ -1244623243;
            continue;
          case 3:
            goto label_1;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 427562297 ^ 2027164874;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? 918313375 : (num3 = 1551444124);
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * -752438547 ^ -1639855948;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -1222555569 ^ 1532951108;
            continue;
          case 8:
            str1 = "";
            num1 = (int) num2 * -65871309 ^ 24544351;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -304375001;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1564384557)) % 3U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -1826738623 ^ -2129273731;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 1820364349;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1200367491)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            str = Game.\u206C⁬‫⁮‫⁯⁬‍⁯⁬‭⁮⁫⁫‪​⁪⁪⁪‬‎‪⁮‌⁭​⁫‌‬‏⁫‏​‎‏‬‪⁮⁪⁫‮(Game.\u206E‎⁪​‏⁮⁪‭⁪‫⁬⁫‍‭⁬‮‬‭‏​​‭‫‫‌‏‬⁫⁮⁯‮‬⁪⁭⁪​⁭‏⁮‮(text), more);
            num1 = (int) num2 * 615114866 ^ 2067486504;
            continue;
          case 3:
            Game.\u200F‮‌‌​‭‎​‮‎⁮‫‮⁪‬‬⁯‮‮‪‪⁫⁯⁯‬‎‍⁭‎⁯⁪‍‮⁮⁭⁭‏‮‏‮‮(this._buffer, str);
            num1 = (int) num2 * -1847615164 ^ 873507426;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u206B‌‬‪⁪⁭⁬‪⁬‪‎⁮‬⁫⁫⁭‫‍‮‎⁯‮‏‎⁪⁭⁪‬⁯‭⁭‪‮‌⁮⁭⁮‫‬‌‮([In] int obj0) => new Random(obj0);

    static string \u202A‎⁯‬⁯‬‪‬‪‎⁭​‪‬‮⁭⁫‪‭⁬‎‪⁫⁮‏‍⁪⁬‬‍‬⁮‮‪⁭​‭⁯⁮‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206A‏⁮‫‭‪‭‬‍‍⁫‬‭‬‏⁭‭⁮⁫‏‎‮‫‎⁯‭⁫⁮⁭‭‌‎‫⁬‍⁮‍‭⁮‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200C‪⁬‬‪⁭‏⁫⁪⁪⁪⁪⁪‌​⁪⁬⁪‬​⁪‌‌‌⁭⁪‌⁪‏‫⁭⁪‍‬‍‪‪‌⁪⁫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206F⁪⁯⁬‭‎⁯‭‫‍⁪‪⁯⁪⁬‭⁬⁭⁮‌‫‌⁯⁫‮‍‏‫‬⁮‌⁮⁯⁬⁯‬⁪⁫‭‌‮([In] int obj0) => Math.Abs(obj0);

    static string \u206E‎⁪​‏⁮⁪‭⁪‫⁬⁫‍‭⁬‮‬‭‏​​‭‫‫‌‏‬⁫⁮⁯‮‬⁪⁭⁪​⁭‏⁮‮([In] object obj0) => obj0.ToString();

    static string \u200B‬‫⁪‏‬⁪⁪​⁫⁯‎⁮‮‏⁬‍‏⁪‌‬⁭‫⁭⁭‫‫‪⁪‏‍⁬‮​⁪⁮‮⁮‌‫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C⁬‫⁮‫⁯⁬‍⁯⁬‭⁮⁫⁫‪​⁪⁪⁪‬‎‪⁮‌⁭​⁫‌‬‏⁫‏​‎‏‬‪⁮⁪⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200F‮‌‌​‭‎​‮‎⁮‫‮⁪‬‬⁯‮‮‪‪⁫⁯⁯‬‎‍⁭‎⁯⁪‍‮⁮⁭⁭‏‮‏‮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
