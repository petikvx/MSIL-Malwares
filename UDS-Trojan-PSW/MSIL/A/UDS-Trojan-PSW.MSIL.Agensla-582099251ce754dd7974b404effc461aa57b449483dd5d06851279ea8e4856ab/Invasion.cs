// Decompiled with JetBrains decompiler
// Type: SpiritIslandCompanion.Invasion
// Assembly: Bloc, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F47B0E6F-7EB0-44B2-A5A7-3EDCF7737188
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan-PSW.MSIL.Agensla-582099251ce754dd7974b404effc461aa57b449483dd5d06851279ea8e4856ab.exe

using System;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;

namespace SpiritIslandCompanion
{
  public class Invasion : INotifyPropertyChanged, INotifyCollectionChanged
  {
    private static Invasion instance = (Invasion) null;
    private static readonly object padlock = new object();
    private int _fear = 0;
    private int _playerCount = 1;
    private int _blightCount = 2;
    private int _terrorOne = 3;
    private int _terrorTwo = 3;
    private int _terrorThree = 3;
    private AdversaryCard _adversary;
    private bool _highImmigration = false;
    private bool _terrorCardOut = false;
    private ObservableCollection<FearCard> _fearDeck;
    private ObservableCollection<FearCard> _fearEarnedDeck;
    private ObservableCollection<FearCard> _fearDiscardDeck;
    private ObservableCollection<FearCard> _fearBox;
    private ObservableCollection<EventCard> _eventDeck;
    private ObservableCollection<EventCard> _eventDiscardDeck;
    private ObservableCollection<EventCard> _eventBox;
    private ObservableCollection<InvaderCard> _invaderDeck;
    private ObservableCollection<InvaderCard> _invaderHighImmigrationDeck;
    private ObservableCollection<InvaderCard> _invaderRavageDeck;
    private ObservableCollection<InvaderCard> _invaderBuildDeck;
    private ObservableCollection<InvaderCard> _invaderDiscardDeck;
    private ObservableCollection<InvaderCard> _invaderBox;
    private ObservableCollection<BlightCard> _blightCard;
    private ObservableCollection<BlightCard> _blightBox;
    private ObservableCollection<TerrorCard> _terrorCard;
    private ObservableCollection<AdversaryCard> _adversaryDeck;

    public event PropertyChangedEventHandler PropertyChanged;

    public event NotifyCollectionChangedEventHandler CollectionChanged;

    private void NotifyPropertyChanged([CallerMemberName] string propertyName = null)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    private void NotifyCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
      if (this.CollectionChanged == null)
        return;
      this.CollectionChanged((object) this, new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Reset));
    }

    public static Invasion Instance
    {
      get
      {
        lock (Invasion.padlock)
        {
          if (Invasion.instance == null)
            Invasion.instance = new Invasion();
          return Invasion.instance;
        }
      }
    }

    public AdversaryCard MyAdversary
    {
      get => this._adversary;
      set
      {
        this._adversary = value;
        this.NotifyPropertyChanged();
      }
    }

    public int Fear
    {
      get => this._fear;
      set
      {
        this._fear = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("FearUntilNextCard");
      }
    }

    public int FearUntilNextCard => this.MyAdversary != null && this.MyAdversary.Id == 2 && this.MyAdversary.Level == 6 ? this.PlayerCount * 5 - this.Fear : this.PlayerCount * 4 - this.Fear;

    public int PlayerCount
    {
      get => this._playerCount;
      set
      {
        this._playerCount = value;
        this.NotifyPropertyChanged();
      }
    }

    public int Blight
    {
      get => this._blightCount;
      set
      {
        this._blightCount = value;
        this.NotifyPropertyChanged();
      }
    }

    public int TotalFearCardsNeededToWin => this._terrorOne + this._terrorTwo + this._terrorThree;

    public int FirstTerrorThreshold => this._terrorOne;

    public int SecondTerrorThreshold => this._terrorOne + this._terrorTwo;

    public bool HighImmigration
    {
      get => this._highImmigration;
      set
      {
        this._highImmigration = value;
        this.NotifyPropertyChanged();
      }
    }

    public bool TerrorCardOut
    {
      get => this._terrorCardOut;
      set
      {
        this._terrorCardOut = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<FearCard> FearDeck
    {
      get => this._fearDeck;
      set
      {
        this._fearDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopFearCard");
      }
    }

    public ObservableCollection<FearCard> FearEarnedDeck
    {
      get => this._fearEarnedDeck;
      set
      {
        this._fearEarnedDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopFearEarnedCard");
      }
    }

    public ObservableCollection<FearCard> FearDiscardDeck
    {
      get => this._fearDiscardDeck;
      set
      {
        this._fearDiscardDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopFearDisCard");
      }
    }

    public ObservableCollection<EventCard> EventDeck
    {
      get => this._eventDeck;
      set
      {
        this._eventDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopEventCard");
      }
    }

    public ObservableCollection<EventCard> EventDiscardDeck
    {
      get => this._eventDiscardDeck;
      set
      {
        this._eventDiscardDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopEventDisCard");
      }
    }

    public ObservableCollection<InvaderCard> InvaderDeck
    {
      get => this._invaderDeck;
      set
      {
        this._invaderDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopInvaderCard");
      }
    }

    public ObservableCollection<InvaderCard> InvaderHighImmigrationDeck
    {
      get => this._invaderHighImmigrationDeck;
      set
      {
        this._invaderHighImmigrationDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopInvaderCard");
      }
    }

    public ObservableCollection<InvaderCard> InvaderRavageDeck
    {
      get => this._invaderRavageDeck;
      set
      {
        this._invaderRavageDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopInvaderCard");
      }
    }

    public ObservableCollection<InvaderCard> InvaderBuildDeck
    {
      get => this._invaderBuildDeck;
      set
      {
        this._invaderBuildDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopInvaderCard");
      }
    }

    public ObservableCollection<InvaderCard> InvaderDiscardDeck
    {
      get => this._invaderDiscardDeck;
      set
      {
        this._invaderDiscardDeck = value;
        this.NotifyPropertyChanged();
        this.NotifyPropertyChanged("TopInvaderCard");
      }
    }

    public ObservableCollection<BlightCard> BlightDeck
    {
      get => this._blightCard;
      set
      {
        this._blightCard = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<TerrorCard> TerrorDeck
    {
      get => this._terrorCard;
      set
      {
        this._terrorCard = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<AdversaryCard> AdversaryDeck
    {
      get => this._adversaryDeck;
      set
      {
        this._adversaryDeck = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<FearCard> FearBox
    {
      get => this._fearBox;
      set
      {
        this._fearBox = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<InvaderCard> InvaderBox
    {
      get => this._invaderBox;
      set
      {
        this._invaderBox = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<BlightCard> BlightBox
    {
      get => this._blightBox;
      set
      {
        this._blightBox = value;
        this.NotifyPropertyChanged();
      }
    }

    public ObservableCollection<EventCard> EventBox
    {
      get => this._eventBox;
      set
      {
        this._eventBox = value;
        this.NotifyPropertyChanged();
      }
    }

    public Invasion(int players = 1)
    {
      this.Reset();
      this.PlayerCount = players;
      this.Fear = 0;
      this.Blight = players * 2;
      this.HighImmigration = false;
      this.CreateAdversaryDeck();
      this.CreateTerrorCard();
      this.CreateBlightCard();
      this.CreateFearDeck();
      this.CreateEventDeck();
      this.CreateInvaderDeck();
    }

    public Invasion(AdversaryCard adv, int advLevel = 0, int players = 1)
      : this(players)
    {
      this.MyAdversary = adv;
      this.MyAdversary.Level = advLevel;
      if (this.MyAdversary.Id == 0)
        this.SetUpDefaultAdversary();
      else if (this.MyAdversary.Id == 1)
        this.SetUpBrandenburgPrussia(advLevel);
      else if (this.MyAdversary.Id == 2)
        this.SetUpEngland(advLevel);
      else if (this.MyAdversary.Id == 3)
        this.SetUpFrance(advLevel);
      else if (this.MyAdversary.Id == 4)
      {
        this.SetUpSweden(advLevel);
      }
      else
      {
        int num = (int) MessageBox.Show("Error");
      }
    }

    private void SetUpFearCards(int first, int second, int third)
    {
      this._terrorOne = first;
      this._terrorTwo = second;
      this._terrorThree = third;
    }

    private void Reset()
    {
      this.FearDeck = new ObservableCollection<FearCard>();
      this.FearEarnedDeck = new ObservableCollection<FearCard>();
      this.FearDiscardDeck = new ObservableCollection<FearCard>();
      this.FearBox = new ObservableCollection<FearCard>();
      this.EventDeck = new ObservableCollection<EventCard>();
      this.EventDiscardDeck = new ObservableCollection<EventCard>();
      this.EventBox = new ObservableCollection<EventCard>();
      this.InvaderDeck = new ObservableCollection<InvaderCard>();
      this.InvaderHighImmigrationDeck = new ObservableCollection<InvaderCard>();
      this.InvaderRavageDeck = new ObservableCollection<InvaderCard>();
      this.InvaderBuildDeck = new ObservableCollection<InvaderCard>();
      this.InvaderDiscardDeck = new ObservableCollection<InvaderCard>();
      this.InvaderBox = new ObservableCollection<InvaderCard>();
      this.BlightDeck = new ObservableCollection<BlightCard>();
      this.BlightBox = new ObservableCollection<BlightCard>();
      this.TerrorDeck = new ObservableCollection<TerrorCard>();
      this.AdversaryDeck = new ObservableCollection<AdversaryCard>();
    }

    private void SetUpDefaultAdversary()
    {
      this.CreateFearDeck();
      this.SetUpFearCards(3, 3, 3);
    }

    private void SetUpBrandenburgPrussia(int level)
    {
      if (level == 0 || level == 1 || level == 2)
      {
        this.CreateFearDeck();
        this.SetUpFearCards(3, 3, 3);
      }
      switch (level)
      {
        case 2:
          this.InvaderDeck.Move(this.InvaderDeck.Count - 1, 3);
          break;
        case 3:
          this.CreateFearDeck(10);
          this.SetUpFearCards(3, 4, 3);
          this.InvaderDeck.Move(this.InvaderDeck.Count - 1, 3);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          break;
        case 4:
          this.CreateFearDeck(11);
          this.SetUpFearCards(4, 4, 3);
          this.InvaderDeck.Move(this.InvaderDeck.Count - 1, 3);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          this.InvaderBox.Add(this.InvaderDeck[3]);
          this.InvaderDeck.RemoveAt(3);
          break;
        case 5:
          this.CreateFearDeck(11);
          this.SetUpFearCards(4, 4, 3);
          this.InvaderDeck.Move(this.InvaderDeck.Count - 1, 3);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          this.InvaderBox.Add(this.InvaderDeck[3]);
          this.InvaderDeck.RemoveAt(3);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          break;
        case 6:
          this.CreateFearDeck(12);
          this.SetUpFearCards(4, 4, 4);
          this.InvaderDeck.Move(this.InvaderDeck.Count - 1, 3);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          this.InvaderBox.Add(this.InvaderDeck[3]);
          this.InvaderDeck.RemoveAt(3);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          this.InvaderBox.Add(this.InvaderDeck[0]);
          this.InvaderDeck.RemoveAt(0);
          break;
      }
    }

    private void SetUpEngland(int level)
    {
      if (level == 0)
      {
        this.CreateFearDeck();
        this.SetUpFearCards(3, 3, 3);
      }
      else if (level == 1)
      {
        this.CreateFearDeck(10);
        this.SetUpFearCards(3, 4, 3);
      }
      else if (level == 2)
      {
        this.CreateFearDeck(11);
        this.SetUpFearCards(4, 4, 3);
      }
      else if (level == 3)
      {
        this.CreateFearDeck(13);
        this.SetUpFearCards(4, 5, 4);
      }
      else if (level == 4)
      {
        this.CreateFearDeck(14);
        this.SetUpFearCards(4, 5, 5);
      }
      else if (level == 5)
      {
        this.CreateFearDeck(14);
        this.SetUpFearCards(4, 5, 5);
      }
      else if (level == 6)
      {
        this.CreateFearDeck(13);
        this.SetUpFearCards(4, 5, 4);
      }
      if (level < 3)
        return;
      this.HighImmigration = true;
    }

    private void SetUpFrance(int level)
    {
      if (level == 0 || level == 1)
      {
        this.CreateFearDeck();
        this.SetUpFearCards(3, 3, 3);
      }
      else if (level == 2)
      {
        this.CreateFearDeck(10);
        this.SetUpFearCards(3, 4, 3);
      }
      else if (level == 3)
      {
        this.CreateFearDeck(11);
        this.SetUpFearCards(4, 4, 3);
      }
      else if (level == 4)
      {
        this.CreateFearDeck(12);
        this.SetUpFearCards(4, 4, 4);
      }
      else if (level == 5)
      {
        this.CreateFearDeck(13);
        this.SetUpFearCards(4, 5, 4);
      }
      else if (level == 6)
      {
        this.CreateFearDeck(14);
        this.SetUpFearCards(4, 5, 5);
      }
      if (level < 2)
        return;
      this.EventDeck.Insert(3, this.EventBox[0]);
    }

    private void SetUpSweden(int level)
    {
      if (level == 0 || level == 1)
      {
        this.CreateFearDeck();
        this.SetUpFearCards(3, 3, 3);
      }
      else if (level == 2)
      {
        this.CreateFearDeck(10);
        this.SetUpFearCards(3, 4, 3);
      }
      else if (level == 3)
      {
        this.CreateFearDeck(10);
        this.SetUpFearCards(3, 4, 3);
      }
      else if (level == 4)
      {
        this.CreateFearDeck(11);
        this.SetUpFearCards(3, 4, 4);
      }
      else if (level == 5)
      {
        this.CreateFearDeck(12);
        this.SetUpFearCards(4, 4, 4);
      }
      else if (level == 6)
      {
        this.CreateFearDeck(13);
        this.SetUpFearCards(4, 4, 5);
      }
      if (level < 4)
        return;
      this.InvaderBox.Add(this.InvaderDeck[0]);
      this.InvaderDeck.RemoveAt(0);
    }

    private void CreateTerrorCard()
    {
      this.TerrorDeck.Clear();
      this.TerrorDeck.Add(new TerrorCard(0, (ImageSource) new BitmapImage(new Uri("assets/other/board/board-terror-level3.png", UriKind.Relative)), (ImageSource) new BitmapImage(new Uri("assets/other/board/board-terror-level2.png", UriKind.Relative))));
    }

    private void CreateFearDeck(int deckSize = 9)
    {
      this.FearDeck.Clear();
      this.FearBox.Clear();
      for (int id = 1; id <= 30; ++id)
      {
        ImageSource back = (ImageSource) new BitmapImage(new Uri("assets/cards/fear/cards-fear-00.png", UriKind.Relative));
        ImageSource front = (ImageSource) new BitmapImage(new Uri("assets/cards/fear/cards-fear-" + (id >= 10 ? id.ToString() : "0" + id.ToString()) + ".png", UriKind.Relative));
        this.FearDeck.Add(new FearCard(id, front, back));
      }
      this.FearDeck.Shuffle<FearCard>();
      while (this.FearDeck.Count > deckSize)
      {
        this.FearBox.Add(this.FearDeck[0]);
        this.FearDeck.RemoveAt(0);
      }
      this.FearDeck.Shuffle<FearCard>();
    }

    private void CreateEventDeck(int deckSize = 26)
    {
      this.EventBox.Clear();
      this.EventDeck.Clear();
      for (int id = 1; id <= 26; ++id)
      {
        ImageSource back = (ImageSource) new BitmapImage(new Uri("assets/cards/event/cards-event-00.png", UriKind.Relative));
        ImageSource front = (ImageSource) new BitmapImage(new Uri("assets/cards/event/cards-event-" + (id >= 10 ? id.ToString() : "0" + id.ToString()) + ".png", UriKind.Relative));
        this.EventDeck.Add(new EventCard(id, front, back));
      }
      this.EventBox.Add(this.EventDeck[0]);
      this.EventDeck.RemoveAt(0);
      this.EventDeck.Shuffle<EventCard>();
    }

    private void CreateInvaderDeck()
    {
      this.InvaderBox.Clear();
      this.InvaderDeck.Clear();
      for (int id = 1; id <= 4; ++id)
      {
        ImageSource back = (ImageSource) new BitmapImage(new Uri("assets/cards/invader/cards-invader-00.png", UriKind.Relative));
        ImageSource front = (ImageSource) new BitmapImage(new Uri("assets/cards/invader/cards-invader-" + ("0" + id.ToString()) + ".png", UriKind.Relative));
        this.InvaderDeck.Add(new InvaderCard(id, 1, front, back));
      }
      this.InvaderDeck.Shuffle<InvaderCard>();
      this.InvaderBox.Add(this.InvaderDeck[0]);
      this.InvaderDeck.RemoveAt(0);
      ObservableCollection<InvaderCard> list1 = new ObservableCollection<InvaderCard>();
      for (int id = 6; id <= 10; ++id)
      {
        ImageSource back = (ImageSource) new BitmapImage(new Uri("assets/cards/invader/cards-invader-05.png", UriKind.Relative));
        ImageSource front = (ImageSource) new BitmapImage(new Uri("assets/cards/invader/cards-invader-" + (id >= 10 ? id.ToString() : "0" + id.ToString()) + ".png", UriKind.Relative));
        InvaderCard invaderCard = new InvaderCard(id, 2, front, back);
        list1.Add(invaderCard);
      }
      list1.Shuffle<InvaderCard>();
      this.InvaderBox.Add(list1[0]);
      list1.RemoveAt(0);
      foreach (InvaderCard invaderCard in (Collection<InvaderCard>) list1)
        this.InvaderDeck.Add(invaderCard);
      ObservableCollection<InvaderCard> list2 = new ObservableCollection<InvaderCard>();
      for (int id = 12; id <= 17; ++id)
      {
        ImageSource back = (ImageSource) new BitmapImage(new Uri("assets/cards/invader/cards-invader-11.png", UriKind.Relative));
        ImageSource front = (ImageSource) new BitmapImage(new Uri("assets/cards/invader/cards-invader-" + id.ToString() + ".png", UriKind.Relative));
        InvaderCard invaderCard = new InvaderCard(id, 3, front, back);
        list2.Add(invaderCard);
      }
      list2.Shuffle<InvaderCard>();
      this.InvaderBox.Add(list2[0]);
      list2.RemoveAt(0);
      foreach (InvaderCard invaderCard in (Collection<InvaderCard>) list2)
        this.InvaderDeck.Add(invaderCard);
    }

    private void CreateBlightCard(int deckSize = 1)
    {
      this.BlightDeck.Clear();
      this.BlightBox.Clear();
      for (int id = 1; id <= 9; ++id)
      {
        ImageSource back = (ImageSource) new BitmapImage(new Uri("assets/cards/blight/cards-blight-00.png", UriKind.Relative));
        ImageSource front = (ImageSource) new BitmapImage(new Uri("assets/cards/blight/cards-blight-" + (id >= 10 ? id.ToString() : "0" + id.ToString()) + ".png", UriKind.Relative));
        this.BlightDeck.Add(new BlightCard(id, front, back));
      }
      this.BlightDeck.Shuffle<BlightCard>();
      while (this.BlightDeck.Count > deckSize)
      {
        this.BlightBox.Add(this.BlightDeck[0]);
        this.BlightDeck.RemoveAt(0);
      }
    }

    private void CreateAdversaryDeck()
    {
      this.AdversaryDeck.Clear();
      this.AdversaryDeck.Add(new AdversaryCard(0, "Derp", 0, (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-brand-prussia-2.png", UriKind.Relative)), (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-brand-prussia-2.png", UriKind.Relative))));
      this.AdversaryDeck.Add(new AdversaryCard(1, "Brandenburg-Prussia", 0, (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-brand-prussia-1.png", UriKind.Relative)), (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-brand-prussia-2.png", UriKind.Relative))));
      this.AdversaryDeck.Add(new AdversaryCard(2, "England", 0, (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-england-1.png", UriKind.Relative)), (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-england-2.png", UriKind.Relative))));
      this.AdversaryDeck.Add(new AdversaryCard(3, "France", 0, (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-france-1.png", UriKind.Relative)), (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-france-2.png", UriKind.Relative))));
      this.AdversaryDeck.Add(new AdversaryCard(4, "Sweden", 0, (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-sweden-1.png", UriKind.Relative)), (ImageSource) new BitmapImage(new Uri("assets/other/adversaries/adversary-sweden-2.png", UriKind.Relative))));
    }
  }
}
