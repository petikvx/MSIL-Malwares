// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.PlanetaryTravelRoute
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections.Generic;
using System.Linq;

namespace FannyHeirdooBot
{
  public class PlanetaryTravelRoute : List<Route>
  {
    public PlanetaryTravelRoute()
    {
      this.AverageDistancesByNumberOfPlanets = new List<double>();
      this.AverageConnectedGrowthByNumberOfPlanets = new List<double>();
    }

    public double SmallestDistance { get; set; }

    public double GreatestDistance { get; set; }

    public double DistanceRange { get; set; }

    public double AverageDistance { get; set; }

    public List<double> AverageDistancesByNumberOfPlanets { get; set; }

    public List<double> AverageConnectedGrowthByNumberOfPlanets { get; set; }

    public IOrderedEnumerable<IGrouping<int, Route>> PlanetsByNumberOfTurnsDistance { get; private set; }

    public void CreatePlanetsByNumberOfTurnsDistance()
    {
label_1:
      int num1 = 628955587;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 871812402)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.PlanetsByNumberOfTurnsDistance = this.ToLookup<Route, int>((Func<Route, int>) (item => item.DistanceInTurns)).OrderBy<IGrouping<int, Route>, int>((Func<IGrouping<int, Route>, int>) (item => item.Key));
            num1 = 60703092;
            continue;
          case 2:
            num1 = (int) num2 * -122321467 ^ -1174232581;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public IEnumerable<Route> DistanceReversed()
    {
label_1:
      int num1 = 973106193;
      IEnumerable<Route> routes;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 762379765)) % 3U)
        {
          case 1:
            routes = (IEnumerable<Route>) this.OrderBy<Route, double>((Func<Route, double>) (route => -route.ActualDistance));
            num1 = 657045598;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return routes;
    }

    internal Route LastRouteForPlayer(int playerId)
    {
label_1:
      int num1 = -1708479079;
      Route route1;
      int playerId1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -332201711)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 1846937405 ^ 1176637157;
            continue;
          case 1:
            num1 = (int) num2 * 676903924 ^ 374944900;
            continue;
          case 2:
            route1 = this.Where<Route>((Func<Route, bool>) (route => route.Destination.Owner == playerId1)).OrderBy<Route, int>((Func<Route, int>) (route => route.DistanceInTurns)).Last<Route>();
            num1 = -1218398638;
            continue;
          case 4:
            playerId1 = playerId;
            num1 = (int) num2 * 557154264 ^ 853622971;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      return route1;
    }
  }
}
