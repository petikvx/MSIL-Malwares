// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.ComAdminAppInfo
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.Text;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class ComAdminAppInfo
  {
    private string appdir;
    private Guid appid;
    private string appname;
    private bool serverActivated;
    private bool systemApplication;
    private bool processPooled;
    private bool automaticRecycling;
    private bool listenerExists;
    private List<ComAdminClassInfo> classes;
    private RuntimeVersions runtimeVersion;
    private static Guid CLSID_CLRMetaHost = new Guid("{9280188d-0e8e-4867-b30c-7fa83884e8de}");
    private static Guid CLSID_ServiceInitializer = new Guid("{59856830-3ECB-4D29-9CFE-DDD0F74B96A2}");
    private static List<Version> CLRVersions = new List<Version>(2)
    {
      new Version("2.0"),
      new Version("4.0")
    };

    public string ApplicationDirectory => this.appdir;

    public Guid ID => this.appid;

    public string Name => this.appname;

    public List<ComAdminClassInfo> Classes => this.classes;

    public bool IsServerActivated => this.serverActivated;

    public bool IsSystemApplication => this.systemApplication;

    public bool IsProcessPooled => this.processPooled;

    public bool IsAutomaticRecycling => this.automaticRecycling;

    public bool ListenerExists => this.listenerExists;

    public RuntimeVersions RuntimeVersion => this.runtimeVersion;

    public ComAdminAppInfo(ICatalogObject appObj, ICatalogCollection appColl)
    {
      this.appid = new Guid((string) appObj.Key());
      this.appname = (string) appObj.Name();
      this.appdir = (string) appObj.GetValue(PropertyName.ApplicationDirectory);
      this.serverActivated = (int) appObj.GetValue(PropertyName.Activation) == 1;
      this.systemApplication = (bool) appObj.GetValue(PropertyName.IsSystem);
      this.processPooled = (int) appObj.GetValue(PropertyName.ConcurrentApps) > 1;
      this.automaticRecycling = (int) appObj.GetValue(PropertyName.RecycleActivationLimit) > 0 || (int) appObj.GetValue(PropertyName.RecycleCallLimit) > 0 || (int) appObj.GetValue(PropertyName.RecycleLifetimeLimit) > 0 || (int) appObj.GetValue(PropertyName.RecycleMemoryLimit) > 0;
      this.BuildClasses(appObj, appColl);
    }

    private bool TryGetVersionFromString(StringBuilder versionStr, out Version version)
    {
      bool versionFromString = false;
      version = (Version) null;
      string version1;
      if (versionStr[0] == 'v' || versionStr[0] == 'V')
      {
        int length = versionStr.Length - 1;
        version1 = versionStr.ToString(1, length);
      }
      else
        version1 = versionStr.ToString();
      try
      {
        version = new Version(version1);
        versionFromString = true;
      }
      catch (ArgumentException ex)
      {
      }
      catch (FormatException ex)
      {
      }
      catch (OverflowException ex)
      {
      }
      return versionFromString;
    }

    private bool IsCLRVersionInstalled(Version clrVersion)
    {
      bool flag = false;
      object pMetaHost;
      if (SafeNativeMethods.CLRCreateInstance(ComAdminAppInfo.CLSID_CLRMetaHost, typeof (IClrMetaHost).GUID, out pMetaHost) == 0)
      {
        IEnumUnknown enumUnknown = ((IClrMetaHost) pMetaHost).EnumerateInstalledRuntimes();
        object[] elementArray = new object[1];
        while (enumUnknown.Next(1, elementArray, out int _) == 0 && !flag)
        {
          int bufferLength = 256;
          StringBuilder stringBuilder = new StringBuilder(256);
          ((IClrRuntimeInfo) elementArray[0]).GetVersionString(stringBuilder, ref bufferLength);
          Version version;
          if (this.TryGetVersionFromString(stringBuilder, out version) && clrVersion.Major == version.Major && clrVersion.Minor == version.Minor)
            flag = true;
        }
      }
      return flag;
    }

    private bool ValidateCLRVersion(Version clrVersion)
    {
      foreach (Version clrVersion1 in ComAdminAppInfo.CLRVersions)
      {
        if (clrVersion.Major == clrVersion1.Major && clrVersion.Minor == clrVersion1.Minor)
          return true;
      }
      return false;
    }

    private void BuildClasses(ICatalogObject appObj, ICatalogCollection appColl)
    {
      int cchBuffer = 256;
      StringBuilder stringBuilder = new StringBuilder(256);
      bool flag1 = false;
      bool flag2 = false;
      bool flag3 = true;
      int dwLength = 0;
      Version version = (Version) null;
      this.classes = new List<ComAdminClassInfo>();
      ICatalogCollection collection = (ICatalogCollection) appColl.GetCollection(CollectionName.Components, appObj.Key());
      collection.Populate();
      for (int lIndex = 0; lIndex < collection.Count(); ++lIndex)
      {
        ICatalogObject compObj = (ICatalogObject) collection.Item(lIndex);
        ComAdminClassInfo comAdminClassInfo = new ComAdminClassInfo(compObj, collection);
        flag1 = false;
        if (!flag2 && 0 == SafeNativeMethods.GetRequestedRuntimeVersionForCLSID(comAdminClassInfo.Clsid, stringBuilder, cchBuffer, ref dwLength, 0) && this.TryGetVersionFromString(stringBuilder, out version))
        {
          if (this.IsCLRVersionInstalled(version))
            flag2 = true;
          else if (this.ValidateCLRVersion(version))
          {
            flag2 = true;
            flag3 = false;
          }
        }
        if (ComAdminWrapper.IsListenerComponent(compObj))
          this.listenerExists = true;
        else
          this.classes.Add(comAdminClassInfo);
      }
      if (flag2 && flag3)
      {
        if (version.Major == 4 && version.Minor == 0)
          this.runtimeVersion = RuntimeVersions.V40;
        else if (version.Major == 2 && version.Minor == 0)
          this.runtimeVersion = RuntimeVersions.V20;
        else
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("FailedToGetRuntime", (object) version.ToString()), (Exception) null);
      }
      else
      {
        if (!flag3)
          throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("FailedToGetRuntime", (object) version.ToString()), (Exception) null);
        this.runtimeVersion = RuntimeVersions.V40;
      }
    }

    public ComAdminClassInfo FindClass(string classNameOrGuid)
    {
      ComAdminClassInfo comAdminClassInfo1 = (ComAdminClassInfo) null;
      classNameOrGuid = classNameOrGuid.ToLowerInvariant();
      foreach (ComAdminClassInfo comAdminClassInfo2 in this.classes)
      {
        if (comAdminClassInfo2.Clsid.ToString("B").ToLowerInvariant() == classNameOrGuid || comAdminClassInfo2.Name.ToLowerInvariant() == classNameOrGuid)
          comAdminClassInfo1 = comAdminClassInfo1 == null ? comAdminClassInfo2 : throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("AmbiguousComponentName", (object) classNameOrGuid), (Exception) null);
      }
      return comAdminClassInfo1;
    }
  }
}
