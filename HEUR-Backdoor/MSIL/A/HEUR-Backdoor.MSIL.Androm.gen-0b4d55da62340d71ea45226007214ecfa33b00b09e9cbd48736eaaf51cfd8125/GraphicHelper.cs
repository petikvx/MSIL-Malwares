// Decompiled with JetBrains decompiler
// Type: MaterialSurface.GraphicHelper
// Assembly: Func, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EFD38B4B-EBC7-4ADC-A92E-3AF74F6197CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0b4d55da62340d71ea45226007214ecfa33b00b09e9cbd48736eaaf51cfd8125.exe

using System.Drawing;
using System.Drawing.Drawing2D;

namespace MaterialSurface
{
  internal class GraphicHelper
  {
    public static void DrawSymbolMark(
      Graphics graphics,
      Pen pen,
      float x,
      float y,
      float width,
      float height,
      int padding = 0)
    {
      graphics.DrawLine(pen, (float) padding + x, height / 2f, (float) ((double) width / 2.0 - (double) width / 12.0), height - (float) padding);
      graphics.DrawLine(pen, (float) ((double) width / 2.0 - (double) width / 12.0), height - (float) padding, x + width - (float) padding, y + (float) padding);
    }

    public static void DrawSymbolX(
      Graphics graphics,
      Pen pen,
      float x,
      float y,
      float width,
      float height,
      int padding = 0)
    {
      graphics.DrawLine(pen, (float) padding + x, (float) padding + y, x + width - (float) padding, (float) ((double) y + (double) height - (double) padding - 1.0));
      graphics.DrawLine(pen, (float) ((double) x + (double) width - (double) padding - 1.0), y + (float) padding, (float) padding + x, y + height - (float) padding);
    }

    public static GraphicsPath GetPillShape(
      float x,
      float y,
      float width,
      float height,
      int radius)
    {
      if (radius <= 0)
        radius = 1;
      if ((double) (radius * 2) > (double) width)
        radius = (int) width / 2;
      if ((double) (radius * 2) > (double) height)
        radius = (int) height / 2;
      GraphicsPath pillShape = new GraphicsPath();
      pillShape.AddArc(x, y, (float) (radius * 2), height, 270f, -180f);
      pillShape.AddArc(x + width - (float) (radius * 2), y, (float) (radius * 2), height, -270f, -180f);
      pillShape.CloseFigure();
      return pillShape;
    }

    public static GraphicsPath GetRoundedRectangle(
      float x,
      float y,
      float width,
      float height,
      int radius)
    {
      if (radius <= 0)
        radius = 1;
      if ((double) (radius * 2) > (double) width)
        radius = (int) width / 2;
      if ((double) (radius * 2) > (double) height)
        radius = (int) height / 2;
      GraphicsPath roundedRectangle = new GraphicsPath();
      roundedRectangle.AddArc(x + width - (float) (radius * 2), y, (float) (radius * 2), (float) (radius * 2), 270f, 90f);
      roundedRectangle.AddArc(x + width - (float) (radius * 2), y + height - (float) (radius * 2), (float) (radius * 2), (float) (radius * 2), 0.0f, 90f);
      roundedRectangle.AddArc(x, y + height - (float) (radius * 2), (float) (radius * 2), (float) (radius * 2), 90f, 90f);
      roundedRectangle.AddArc(x, y, (float) (radius * 2), (float) (radius * 2), 180f, 90f);
      roundedRectangle.CloseFigure();
      return roundedRectangle;
    }

    public static GraphicsPath GetRoundedRectangle(Rectangle rectangle, int radius)
    {
      float x = (float) rectangle.X;
      float y = (float) rectangle.Y;
      float width = (float) rectangle.Width;
      float height = (float) rectangle.Height;
      if ((double) (radius * 2) > (double) width)
        radius = (int) width / 2;
      if ((double) (radius * 2) > (double) height)
        radius = (int) height / 2;
      GraphicsPath roundedRectangle = new GraphicsPath();
      roundedRectangle.AddArc(x + width - (float) (radius * 2), y, (float) (radius * 2), (float) (radius * 2), 270f, 90f);
      roundedRectangle.AddArc(x + width - (float) (radius * 2), y + height - (float) (radius * 2), (float) (radius * 2), (float) (radius * 2), 0.0f, 90f);
      roundedRectangle.AddArc(x, y + height - (float) (radius * 2), (float) (radius * 2), (float) (radius * 2), 90f, 90f);
      roundedRectangle.AddArc(x, y, (float) (radius * 2), (float) (radius * 2), 180f, 90f);
      roundedRectangle.CloseFigure();
      return roundedRectangle;
    }
  }
}
