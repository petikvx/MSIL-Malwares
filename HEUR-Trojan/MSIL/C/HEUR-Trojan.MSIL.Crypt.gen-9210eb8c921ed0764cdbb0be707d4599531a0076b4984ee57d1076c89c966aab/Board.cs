// Decompiled with JetBrains decompiler
// Type: GUI_Class.Board
// Assembly: sho, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51C27635-B89A-4AD3-9129-401C0F3D3D91
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-9210eb8c921ed0764cdbb0be707d4599531a0076b4984ee57d1076c89c966aab.exe

using System.Diagnostics;

namespace GUI_Class
{
  public static class Board
  {
    public const int NUMBER_OF_SQUARES = 56;
    public const int START_SQUARE_NUMBER = 0;
    public const int FINISH_SQUARE_NUMBER = 55;
    private static Square[] squares = new Square[56];
    public static int[] special = new int[16]
    {
      2,
      3,
      5,
      12,
      16,
      29,
      40,
      45,
      10,
      26,
      30,
      35,
      36,
      49,
      52,
      53
    };
    private static int[,] wormHoles = new int[8, 3]
    {
      {
        2,
        22,
        10
      },
      {
        3,
        9,
        3
      },
      {
        5,
        17,
        6
      },
      {
        12,
        24,
        6
      },
      {
        16,
        47,
        15
      },
      {
        29,
        38,
        4
      },
      {
        40,
        51,
        5
      },
      {
        45,
        54,
        4
      }
    };
    private static int[,] blackHoles = new int[8, 3]
    {
      {
        10,
        4,
        6
      },
      {
        26,
        8,
        18
      },
      {
        30,
        19,
        11
      },
      {
        35,
        11,
        24
      },
      {
        36,
        34,
        2
      },
      {
        49,
        13,
        36
      },
      {
        52,
        41,
        11
      },
      {
        53,
        42,
        11
      }
    };

    public static Square[] Squares
    {
      get
      {
        Debug.Assert(Board.squares != null, "squares != null", "The game board has not been instantiated");
        return Board.squares;
      }
    }

    public static Square StartSquare => Board.squares[0];

    public static void SetUpBoard()
    {
      Board.squares[0] = new Square("Start", 0);
      for (int index1 = 1; index1 < 55; ++index1)
      {
        for (int index2 = 0; index2 < Board.blackHoles.GetLength(0); ++index2)
        {
          int destNum;
          int amount;
          if (index1 == Board.blackHoles[index2, 0])
          {
            Board.FindDestSquare(Board.blackHoles, index1, out destNum, out amount);
            Board.squares[index1] = (Square) new BlackholeSquare(index1.ToString(), index1, destNum, amount);
            break;
          }
          if (index1 == Board.wormHoles[index2, 0])
          {
            Board.FindDestSquare(Board.wormHoles, index1, out destNum, out amount);
            Board.squares[index1] = (Square) new WormholeSquare(index1.ToString(), index1, destNum, amount);
            break;
          }
          Board.squares[index1] = new Square(index1.ToString(), index1);
        }
      }
      Board.squares[55] = new Square("Finish", 55);
    }

    private static void FindDestSquare(
      int[,] holes,
      int squareNum,
      out int destNum,
      out int amount)
    {
      destNum = 0;
      amount = 0;
      for (int index = 0; index < holes.GetLength(0); ++index)
      {
        if (squareNum == holes[index, 0])
        {
          destNum = holes[index, 1];
          amount = holes[index, 2];
          break;
        }
        amount = 2;
      }
    }
  }
}
