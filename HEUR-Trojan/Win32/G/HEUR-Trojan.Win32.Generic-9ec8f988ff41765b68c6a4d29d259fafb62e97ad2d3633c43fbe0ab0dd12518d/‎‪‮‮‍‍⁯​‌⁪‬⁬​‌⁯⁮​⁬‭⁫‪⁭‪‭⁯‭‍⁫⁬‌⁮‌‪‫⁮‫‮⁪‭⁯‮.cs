// Decompiled with JetBrains decompiler
// Type: ‎‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Text;

public class \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ : IDisposable
{
  public bool \u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮;
  public bool \u202D⁪⁯⁫⁭‌‍⁮‌⁪‪‏‭‏​⁯⁫‪⁫⁪‌⁯‌‌⁪‍⁯‪‮⁪‍‪‍⁫⁬‪‫⁪‫⁭‮;
  private List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮> \u200F‪⁫‪⁫⁯⁫‌‏‫‎⁬⁬‮‪‭‬‏​‭‌‌⁪‪⁬‭‪⁯‪‎⁯‫⁮⁯‎‫‮‫‪‬‮ = new List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮>();
  private string \u202E⁮⁬⁬‭‪⁬‪‪⁫​‭⁮‎‪‭⁬⁫​⁯​⁫​​⁪⁫⁬⁭‮‬‍‮⁬​⁪‍​⁬⁬‮‮;
  private Stream \u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮;
  private string \u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮ = "";
  private byte[] \u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮;
  private ushort \u206C‬⁫​‭⁮‏⁬‎⁮‬‬‏⁬⁯‏⁪‍‮‌‮‌‬‍‏‬‏⁬‭‭‮‍‬‍‎‪​⁯‪‏‮;
  private FileAccess \u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮;
  private bool \u200D⁮⁭⁬⁯‍‭‮‫⁫⁬‫‮‎‪⁭‏⁪‮⁬‬‫⁬‍‌‪‭‬⁪⁮‍⁭‌⁮‏‪⁪‫‭⁪‮;
  private static uint[] \u202E‎‭⁪‎⁫‮‍⁪‫⁫⁭‎‬⁪‏‌⁮⁭‭‎‎‭⁮⁫⁪‬⁬⁮‮​‪‪‍‭⁯‫​‪‏‮ = (uint[]) null;
  private static Encoding \u202B⁯⁯‏⁪⁭‌⁪‬⁬⁫⁭‏‪‎‬⁫‌‭‬⁯‏‫⁭​​⁮‭‏⁭⁮‫⁪⁫‎⁫​‭‬‎‮ = Encoding.GetEncoding(437);

  static \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮()
  {
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202E‎‭⁪‎⁫‮‍⁪‫⁫⁭‎‬⁪‏‌⁮⁭‭‎‎‭⁮⁫⁪‬⁬⁮‮​‪‪‍‭⁯‫​‪‏‮ = new uint[256];
    for (int index1 = 0; index1 < \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202E‎‭⁪‎⁫‮‍⁪‫⁫⁭‎‬⁪‏‌⁮⁭‭‎‎‭⁮⁫⁪‬⁬⁮‮​‪‪‍‭⁯‫​‪‏‮.Length; ++index1)
    {
      uint num = (uint) index1;
      for (int index2 = 0; index2 < 8; ++index2)
      {
        if (((int) num & 1) != 0)
          num = 3988292384U ^ num >> 1;
        else
          num >>= 1;
      }
      \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202E‎‭⁪‎⁫‮‍⁪‫⁫⁭‎‬⁪‏‌⁮⁭‭‎‎‭⁮⁫⁪‬⁬⁮‮​‪‪‍‭⁯‫​‪‏‮[index1] = num;
    }
  }

  public static \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ \u202C⁪‮⁬​​⁯⁯​‏‎⁭⁯‭‪​‍‏‍‎⁬⁫⁮⁮‬⁭⁫⁭‪⁮​​‏‫‍‮‬‮‌‬‮(
    string _param0,
    string _param1)
  {
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ obj = \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202C⁪‮⁬​​⁯⁯​‏‎⁭⁯‭‪​‍‏‍‎⁬⁫⁮⁮‬⁭⁫⁭‪⁮​​‏‫‍‮‬‮‌‬‮((Stream) new FileStream(_param0, FileMode.Create, FileAccess.ReadWrite), _param1);
    obj.\u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮ = _param1;
    obj.\u202E⁮⁬⁬‭‪⁬‪‪⁫​‭⁮‎‪‭⁬⁫​⁯​⁫​​⁪⁫⁬⁭‮‬‍‮⁬​⁪‍​⁬⁬‮‮ = _param0;
    return obj;
  }

  public static \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ \u202C⁪‮⁬​​⁯⁯​‏‎⁭⁯‭‪​‍‏‍‎⁬⁫⁮⁮‬⁭⁫⁭‪⁮​​‏‫‍‮‬‮‌‬‮(
    Stream _param0,
    string _param1,
    bool _param2 = false)
  {
    return new \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮()
    {
      \u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮ = _param1,
      \u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮ = _param0,
      \u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮ = FileAccess.Write,
      \u200D⁮⁭⁬⁯‍‭‮‫⁫⁬‫‮‎‪⁭‏⁪‮⁬‬‫⁬‍‌‪‭‬⁪⁮‍⁭‌⁮‏‪⁪‫‭⁪‮ = _param2
    };
  }

  public static \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ \u202E‍‭‬​⁫⁪‏⁫⁮​‬⁬​​‮​‌‪⁬⁬‌‌‬‌‬⁭‌⁬‪‪⁪⁫‫⁮⁮‪⁮⁭⁭‮(
    string _param0,
    FileAccess _param1)
  {
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ obj = \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202E‍‭‬​⁫⁪‏⁫⁮​‬⁬​​‮​‌‪⁬⁬‌‌‬‌‬⁭‌⁬‪‪⁪⁫‫⁮⁮‪⁮⁭⁭‮((Stream) new FileStream(_param0, FileMode.Open, _param1 == FileAccess.Read ? FileAccess.Read : FileAccess.ReadWrite), _param1);
    obj.\u202E⁮⁬⁬‭‪⁬‪‪⁫​‭⁮‎‪‭⁬⁫​⁯​⁫​​⁪⁫⁬⁭‮‬‍‮⁬​⁪‍​⁬⁬‮‮ = _param0;
    return obj;
  }

  public static \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ \u202E‍‭‬​⁫⁪‏⁫⁮​‬⁬​​‮​‌‪⁬⁬‌‌‬‌‬⁭‌⁬‪‪⁪⁫‫⁮⁮‪⁮⁭⁭‮(
    Stream _param0,
    FileAccess _param1,
    bool _param2 = false)
  {
    if (!_param0.CanSeek && _param1 != FileAccess.Read)
      throw new InvalidOperationException("Stream cannot seek");
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ obj = new \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮();
    obj.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮ = _param0;
    obj.\u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮ = _param1;
    obj.\u200D⁮⁭⁬⁯‍‭‮‫⁫⁬‫‮‎‪⁭‏⁪‮⁬‬‫⁬‍‌‪‭‬⁪⁮‍⁭‌⁮‏‪⁪‫‭⁪‮ = _param2;
    return obj.\u200E⁯⁬⁬⁪⁯⁪‬‏⁪⁮⁪⁪‎⁯⁫‫⁪‫‎‪‬⁫‌‌⁬⁬‍⁪‌‍‮‮​⁪​‪⁬‎‏‮() ? obj : throw new InvalidDataException();
  }

  public void \u206E​⁪‎⁯‏‮‫⁪⁪⁭⁬‎‫​‫‌⁫‬‏‌‮⁪‎‍‏⁭‌‪‬‌⁪⁭​​‬‮‭⁯⁬‮(string _param1, string _param2)
  {
    try
    {
      if (string.IsNullOrEmpty(_param1))
        return;
      using (Stream stream = (Stream) new MemoryStream(Encoding.UTF8.GetBytes(_param1)))
        this.\u202E‭‪​‮⁪‬⁪‬‎​‌‫‫‫‏‎⁫⁫‬⁪⁪‬‬⁪‪⁬‍‫⁭‪⁪​‭‌‬⁬‭‭‫‮(\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Deflate, _param2, stream, DateTime.Now, nameof ());
    }
    catch (Exception ex)
    {
    }
  }

  public void \u200D⁮⁪⁮‎‌‫⁯‭‌⁪‏‪⁭⁬‪‬‎‮‫‍‬‮‭⁫‎‬‫‪‏⁪‎‬‍⁪‮⁯‌‌‬‮(List<string> _param1, string _param2)
  {
    try
    {
      if (_param1.Count <= 0)
        return;
      using (Stream stream = (Stream) new MemoryStream(Encoding.UTF8.GetBytes(string.Join(string.Empty, _param1.ToArray()))))
        this.\u202E‭‪​‮⁪‬⁪‬‎​‌‫‫‫‏‎⁫⁫‬⁪⁪‬‬⁪‪⁬‍‫⁭‪⁪​‭‌‬⁬‭‭‫‮(\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Deflate, _param2, stream, DateTime.Now, nameof ());
    }
    catch (Exception ex)
    {
    }
  }

  public void \u200E‎‍‍‮‮‏‭‬‏⁫‌⁫⁬‫‫‏⁬⁬‫‎​​⁬⁭‮⁪​⁭⁯‍‎‫‏⁯‏‭‮​⁬‮(
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮ _param1,
    string _param2,
    string _param3,
    string _param4)
  {
    if (this.\u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮ == FileAccess.Read)
      throw new InvalidOperationException("Writing is not alowed");
    using (FileStream fileStream = new FileStream(_param2, FileMode.Open, FileAccess.Read))
      this.\u202E‭‪​‮⁪‬⁪‬‎​‌‫‫‫‏‎⁫⁫‬⁪⁪‬‬⁪‪⁬‍‫⁭‪⁪​‭‌‬⁬‭‭‫‮(_param1, _param3, (Stream) fileStream, File.GetLastWriteTime(_param2), _param4);
  }

  public void \u202E‭‪​‮⁪‬⁪‬‎​‌‫‫‫‏‎⁫⁫‬⁪⁪‬‬⁪‪⁬‍‫⁭‪⁪​‭‌‬⁬‭‭‫‮(
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮ _param1,
    string _param2,
    Stream _param3,
    DateTime _param4,
    string _param5)
  {
    if (this.\u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮ == FileAccess.Read)
      throw new InvalidOperationException("Writing is not alowed");
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ obj = new \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮();
    obj.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ = _param1;
    obj.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮ = this.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮;
    obj.\u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮ = this.\u200D⁮‫‬⁯‌‪⁮‍‌‌‪⁫‬⁫‍‌‭⁭‬⁪​⁭⁪‏‎‮‬‭‏‬‏‮‏⁪​‬‎‮‮‮(_param2);
    obj.\u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮ = _param5 ?? nameof ();
    obj.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ = 0U;
    obj.\u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮ = (uint) this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
    obj.\u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮ = _param4;
    this.\u202D​‭‍‭⁭⁫‪⁯​‌‭‭‏‭‪⁭⁬‮⁬‫⁮‌‍‫‌⁪⁪‍⁫⁮​‫‭⁭⁯​‏⁬‮(ref obj);
    obj.\u206A‪‮‪​‪⁬‬‎‏‎‪‬⁪‪‏‭‎‪‌⁭⁫‮⁯⁭⁪‏‎‌‍​‌⁭‌⁪​‪‎⁪‎‮ = (uint) this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
    this.\u202D‎⁪​​⁫⁮‎‫‫⁪⁫‫⁪⁫​​⁪‏‬‎⁪‬‫‌⁯⁬⁭‬‮‭⁬‍​⁪‫⁯‎⁮‌‮(ref obj, _param3);
    _param3.Close();
    this.\u202B⁭‮‌⁪‬⁫‮⁮⁪‌⁭⁯‭‏⁯​⁬​⁬‬‎⁯⁫‮‮⁫⁮⁫⁫⁪‎‭⁬⁮‍‌‮⁫‮(ref obj);
    this.\u200F‪⁫‪⁫⁯⁫‌‏‫‎⁬⁬‮‪‭‬‏​‭‌‌⁪‪⁬‭‪⁯‪‎⁯‫⁮⁯‎‫‮‫‪‬‮.Add(obj);
  }

  public void \u202D‏⁬‬​‎‮‌⁯‫‌‎‪⁬⁬‪⁮‪​⁪‍‬‮‎‮⁯⁭⁪⁫⁯‎‏‍⁮⁬​⁫‬‪⁪‮()
  {
    if (this.\u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮ != FileAccess.Read)
    {
      uint position1 = (uint) this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
      uint num = 0;
      if (this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮ != null)
        this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, 0, this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮.Length);
      for (int index = 0; index < this.\u200F‪⁫‪⁫⁯⁫‌‏‫‎⁬⁬‮‪‭‬‏​‭‌‌⁪‪⁬‭‪⁯‪‎⁯‫⁮⁯‎‫‮‫‪‬‮.Count; ++index)
      {
        long position2 = this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
        this.\u206E‫⁭‭⁭‮‭‏⁬⁪⁫⁬⁪‫‌‌⁭⁬‏​‪⁬‭‮⁮​‍‫⁯⁫⁬‍​‌‫⁮‌‮⁪‎‮(this.\u200F‪⁫‪⁫⁯⁫‌‏‫‎⁬⁬‮‪‭‬‏​‭‌‌⁪‪⁬‭‪⁯‪‎⁯‫⁮⁯‎‫‮‫‪‬‮[index]);
        num += (uint) (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position - position2);
      }
      if (this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮ != null)
        this.\u202E‏​⁬⁫⁬⁬‪​⁫⁮⁬⁪‭‫​‎‍⁬⁫⁬⁯‌‍⁮‌‍⁭‮⁫‪‌‫​‬‎⁫⁬‪‍‮(num + (uint) this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮.Length, position1);
      else
        this.\u202E‏​⁬⁫⁬⁬‪​⁫⁮⁬⁪‭‫​‎‍⁬⁫⁬⁯‌‍⁮‌‍⁭‮⁫‪‌‫​‬‎⁫⁬‪‍‮(num, position1);
    }
    if (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮ == null || this.\u200D⁮⁭⁬⁯‍‭‮‫⁫⁬‫‮‎‪⁭‏⁪‮⁬‬‫⁬‍‌‪‭‬⁪⁮‍⁭‌⁮‏‪⁪‫‭⁪‮)
      return;
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Flush();
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Dispose();
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮ = (Stream) null;
  }

  public List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮> \u206A⁪‫⁫⁮‍‪​​⁬‌⁯⁮⁬‍​⁬‭‍‌‏​​‪⁬‍‫​‏‏​⁪​⁫​‎⁮‏‮⁪‮()
  {
    if (this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮ == null)
      throw new InvalidOperationException("Central directory currently does not exist");
    List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮> objList = new List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮>();
    ushort uint16_1;
    ushort uint16_2;
    ushort uint16_3;
    for (int startIndex = 0; startIndex < this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮.Length && BitConverter.ToUInt32(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex) == 33639248U; startIndex += 46 + (int) uint16_1 + (int) uint16_2 + (int) uint16_3)
    {
      int num1 = ((uint) BitConverter.ToUInt16(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 8) & 2048U) > 0U ? 1 : 0;
      ushort uint16_4 = BitConverter.ToUInt16(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 10);
      uint uint32_1 = BitConverter.ToUInt32(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 12);
      uint uint32_2 = BitConverter.ToUInt32(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 16);
      uint uint32_3 = BitConverter.ToUInt32(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 20);
      uint uint32_4 = BitConverter.ToUInt32(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 24);
      uint16_1 = BitConverter.ToUInt16(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 28);
      uint16_2 = BitConverter.ToUInt16(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 30);
      uint16_3 = BitConverter.ToUInt16(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 32);
      uint uint32_5 = BitConverter.ToUInt32(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 42);
      uint num2 = 46U + (uint) uint16_1 + (uint) uint16_2 + (uint) uint16_3;
      Encoding encoding = num1 != 0 ? Encoding.UTF8 : \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202B⁯⁯‏⁪⁭‌⁪‬⁬⁫⁭‏‪‎‬⁫‌‭‬⁯‏‫⁭​​⁮‭‏⁭⁮‫⁪⁫‎⁫​‭‬‎‮;
      \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ obj = new \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮();
      obj.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ = (\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮) uint16_4;
      obj.\u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮ = encoding.GetString(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 46, (int) uint16_1);
      obj.\u206A‪‮‪​‪⁬‬‎‏‎‪‬⁪‪‏‭‎‪‌⁭⁫‮⁯⁭⁪‏‎‌‍​‌⁭‌⁪​‪‎⁪‎‮ = this.\u206B‪‏⁫‪⁭⁮⁯⁫⁯‬⁮⁬⁬‏⁮‪‍‮‏⁪⁯‌‬⁫‍‪‬‮⁪⁬⁫⁭⁭⁫‮‪⁬‪⁫‮(uint32_5);
      obj.\u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮ = uint32_4;
      obj.\u206A⁪‍⁪⁯‭⁯⁪‏⁮‮⁪​⁭‮‭‪‏‮‌⁯⁭⁯‏⁬‭‪‏⁭⁮‎⁬⁫⁭‌⁮‏‌​‬‮ = uint32_3;
      obj.\u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮ = uint32_5;
      obj.\u200C⁬⁯‪​⁯‫‬​‌‪‭‌‍⁫⁮⁭‏⁮‌‎⁭⁫⁫‬‫‍⁫⁬‏‎⁫‬‮⁮‎​‮⁫⁯‮ = num2;
      obj.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ = uint32_2;
      obj.\u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮ = this.\u206C⁯‪⁫‌⁪⁯‏⁯‏‭⁬‭‬‫⁭⁮‪‏⁬⁮⁭⁮​‬‎⁯⁬‬‭⁮⁭⁪​‌‌‬⁮‫‍‮(uint32_1) ?? DateTime.Now;
      if (uint16_3 > (ushort) 0)
        obj.\u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮ = encoding.GetString(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, startIndex + 46 + (int) uint16_1 + (int) uint16_2, (int) uint16_3);
      objList.Add(obj);
    }
    return objList;
  }

  public bool \u206F‬‬‏⁪‬‬‏‪⁪⁯‬‪‏‫‮‎‌​‎​​‎⁭​⁭‌‍‬‭⁭⁯⁫⁪‭⁪⁫‎‎⁯‮(
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1,
    string _param2)
  {
    string directoryName = Path.GetDirectoryName(_param2);
    if (!Directory.Exists(directoryName))
      Directory.CreateDirectory(directoryName);
    if (Directory.Exists(_param2))
      return true;
    bool flag;
    using (FileStream fileStream = new FileStream(_param2, FileMode.Create, FileAccess.Write))
      flag = this.\u206F‬‬‏⁪‬‬‏‪⁪⁯‬‪‏‫‮‎‌​‎​​‎⁭​⁭‌‍‬‭⁭⁯⁫⁪‭⁪⁫‎‎⁯‮(_param1, (Stream) fileStream);
    if (flag)
    {
      File.SetCreationTime(_param2, _param1.\u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮);
      File.SetLastWriteTime(_param2, _param1.\u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮);
    }
    return flag;
  }

  public bool \u206F‬‬‏⁪‬‬‏‪⁪⁯‬‪‏‫‮‎‌​‎​​‎⁭​⁭‌‍‬‭⁭⁯⁫⁪‭⁪⁫‎‎⁯‮(
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1,
    Stream _param2)
  {
    if (!_param2.CanWrite)
      throw new InvalidOperationException("Stream cannot be written");
    byte[] buffer1 = new byte[4];
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek((long) _param1.\u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮, SeekOrigin.Begin);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Read(buffer1, 0, 4);
    if (BitConverter.ToUInt32(buffer1, 0) != 67324752U)
      return false;
    Stream stream;
    if (_param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ == \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Store)
    {
      stream = this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮;
    }
    else
    {
      if (_param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ != \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Deflate)
        return false;
      stream = (Stream) new DeflateStream(this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮, CompressionMode.Decompress, true);
    }
    byte[] buffer2 = new byte[16384];
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek((long) _param1.\u206A‪‮‪​‪⁬‬‎‏‎‪‬⁪‪‏‭‎‪‌⁭⁫‮⁯⁭⁪‏‎‌‍​‌⁭‌⁪​‪‎⁪‎‮, SeekOrigin.Begin);
    int count;
    for (uint val1 = _param1.\u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮; val1 > 0U; val1 -= (uint) count)
    {
      count = stream.Read(buffer2, 0, (int) Math.Min((long) val1, (long) buffer2.Length));
      _param2.Write(buffer2, 0, count);
    }
    _param2.Flush();
    if (_param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ == \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Deflate)
      stream.Dispose();
    return true;
  }

  public bool \u206F‬‬‏⁪‬‬‏‪⁪⁯‬‪‏‫‮‎‌​‎​​‎⁭​⁭‌‍‬‭⁭⁯⁫⁪‭⁪⁫‎‎⁯‮(
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1,
    out byte[] _param2)
  {
    using (MemoryStream memoryStream = new MemoryStream())
    {
      if (this.\u206F‬‬‏⁪‬‬‏‪⁪⁯‬‪‏‫‮‎‌​‎​​‎⁭​⁭‌‍‬‭⁭⁯⁫⁪‭⁪⁫‎‎⁯‮(_param1, (Stream) memoryStream))
      {
        _param2 = memoryStream.ToArray();
        return true;
      }
      _param2 = (byte[]) null;
      return false;
    }
  }

  public static bool \u202A⁮‪‌‭⁮‮‌⁫‌‫⁫‏⁮⁫‎‫‍⁪‮‬​‍‎⁭⁫‌‎‫‌⁭​⁪‏‪⁮‍‌‌⁪‮(
    ref \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ _param0,
    List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮> _param1)
  {
    if (!(_param0.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮ is FileStream))
      throw new InvalidOperationException("RemoveEntries is allowed just over streams of type FileStream");
    List<\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮> objList = _param0.\u206A⁪‫⁫⁮‍‪​​⁬‌⁯⁮⁬‍​⁬‭‍‌‏​​‪⁬‍‫​‏‏​⁪​⁫​‎⁮‏‮⁪‮();
    string tempFileName1 = Path.GetTempFileName();
    string tempFileName2 = Path.GetTempFileName();
    try
    {
      \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮ obj1 = \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202C⁪‮⁬​​⁯⁯​‏‎⁭⁯‭‪​‍‏‍‎⁬⁫⁮⁮‬⁭⁫⁭‪⁮​​‏‫‍‮‬‮‌‬‮(tempFileName1, string.Empty);
      foreach (\u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ obj2 in objList)
      {
        if (!_param1.Contains(obj2) && _param0.\u206F‬‬‏⁪‬‬‏‪⁪⁯‬‪‏‫‮‎‌​‎​​‎⁭​⁭‌‍‬‭⁭⁯⁫⁪‭⁪⁫‎‎⁯‮(obj2, tempFileName2))
          obj1.\u200E‎‍‍‮‮‏‭‬‏⁫‌⁫⁬‫‫‏⁬⁬‫‎​​⁬⁭‮⁪​⁭⁯‍‎‫‏⁯‏‭‮​⁬‮(obj2.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮, tempFileName2, obj2.\u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮, obj2.\u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮);
      }
      _param0.\u202D‏⁬‬​‎‮‌⁯‫‌‎‪⁬⁬‪⁮‪​⁪‍‬‮‎‮⁯⁭⁪⁫⁯‎‏‍⁮⁬​⁫‬‪⁪‮();
      obj1.\u202D‏⁬‬​‎‮‌⁯‫‌‎‪⁬⁬‪⁮‪​⁪‍‬‮‎‮⁯⁭⁪⁫⁯‎‏‍⁮⁬​⁫‬‪⁪‮();
      File.Delete(_param0.\u202E⁮⁬⁬‭‪⁬‪‪⁫​‭⁮‎‪‭⁬⁫​⁯​⁫​​⁪⁫⁬⁭‮‬‍‮⁬​⁪‍​⁬⁬‮‮);
      File.Move(tempFileName1, _param0.\u202E⁮⁬⁬‭‪⁬‪‪⁫​‭⁮‎‪‭⁬⁫​⁯​⁫​​⁪⁫⁬⁭‮‬‍‮⁬​⁪‍​⁬⁬‮‮);
      _param0 = \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202E‍‭‬​⁫⁪‏⁫⁮​‬⁬​​‮​‌‪⁬⁬‌‌‬‌‬⁭‌⁬‪‪⁪⁫‫⁮⁮‪⁮⁭⁭‮(_param0.\u202E⁮⁬⁬‭‪⁬‪‪⁫​‭⁮‎‪‭⁬⁫​⁯​⁫​​⁪⁫⁬⁭‮‬‍‮⁬​⁪‍​⁬⁬‮‮, _param0.\u200E‎‭‍⁭​‭⁫‏⁪⁭‭⁪‭⁫‫‌‪⁭⁮⁪‮⁭‏⁯‫⁭‮​‮‌‭⁯‌⁪⁬⁬‪‫‎‮);
    }
    catch
    {
      return false;
    }
    finally
    {
      if (File.Exists(tempFileName1))
        File.Delete(tempFileName1);
      if (File.Exists(tempFileName2))
        File.Delete(tempFileName2);
    }
    return true;
  }

  private uint \u206B‪‏⁫‪⁭⁮⁯⁫⁯‬⁮⁬⁬‏⁮‪‍‮‏⁪⁯‌‬⁫‍‪‬‮⁪⁬⁫⁭⁭⁫‮‪⁬‪⁫‮(uint _param1)
  {
    byte[] buffer = new byte[2];
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek((long) (_param1 + 26U), SeekOrigin.Begin);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Read(buffer, 0, 2);
    ushort uint16_1 = BitConverter.ToUInt16(buffer, 0);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Read(buffer, 0, 2);
    ushort uint16_2 = BitConverter.ToUInt16(buffer, 0);
    return (uint) ((ulong) (30 + (int) uint16_1 + (int) uint16_2) + (ulong) _param1);
  }

  private void \u202D​‭‍‭⁭⁫‪⁯​‌‭‭‏‭‪⁭⁬‮⁬‫⁮‌‍‫‌⁪⁪‍⁫⁮​‫‭⁭⁯​‏⁬‮(
    ref \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1)
  {
    long position = this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
    byte[] bytes = (_param1.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮ ? Encoding.UTF8 : \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202B⁯⁯‏⁪⁭‌⁪‬⁬⁫⁭‏‪‎‬⁫‌‭‬⁯‏‫⁭​​⁮‭‏⁭⁮‫⁪⁫‎⁫​‭‬‎‮).GetBytes(_param1.\u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(new byte[6]
    {
      (byte) 80,
      (byte) 75,
      (byte) 3,
      (byte) 4,
      (byte) 20,
      (byte) 0
    }, 0, 6);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮ ? (ushort) 2048 : (ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) _param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(this.\u202E‏‏‍‌‏⁫⁪‫⁪‎‍‏⁮⁫‍⁪⁯‌‭​⁯‫‎‍⁯‍⁪⁭⁭‬‮‌‌⁭⁬‌⁫⁮⁮‮(_param1.\u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮)), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(new byte[12], 0, 12);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) bytes.Length), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(bytes, 0, bytes.Length);
    _param1.\u200C⁬⁯‪​⁯‫‬​‌‪‭‌‍⁫⁮⁭‏⁮‌‎⁭⁫⁫‬‫‍⁫⁬‏‎⁫‬‮⁮‎​‮⁫⁯‮ = (uint) (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position - position);
  }

  private void \u206E‫⁭‭⁭‮‭‏⁬⁪⁫⁬⁪‫‌‌⁭⁬‏​‪⁬‭‮⁮​‍‫⁯⁫⁬‍​‌‫⁮‌‮⁪‎‮(
    \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1)
  {
    Encoding encoding = _param1.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮ ? Encoding.UTF8 : \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202B⁯⁯‏⁪⁭‌⁪‬⁬⁫⁭‏‪‎‬⁫‌‭‬⁯‏‫⁭​​⁮‭‏⁭⁮‫⁪⁫‎⁫​‭‬‎‮;
    byte[] bytes1 = encoding.GetBytes(_param1.\u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮);
    byte[] bytes2 = encoding.GetBytes(_param1.\u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(new byte[8]
    {
      (byte) 80,
      (byte) 75,
      (byte) 1,
      (byte) 2,
      (byte) 23,
      (byte) 11,
      (byte) 20,
      (byte) 0
    }, 0, 8);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮ ? (ushort) 2048 : (ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) _param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(this.\u202E‏‏‍‌‏⁫⁪‫⁪‎‍‏⁮⁫‍⁪⁯‌‭​⁯‫‎‍⁯‍⁪⁭⁭‬‮‌‌⁭⁬‌⁫⁮⁮‮(_param1.\u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮)), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u206A⁪‍⁪⁯‭⁯⁪‏⁮‮⁪​⁭‮‭‪‏‮‌⁯⁭⁯‏⁬‭‪‏⁭⁮‎⁬⁫⁭‌⁮‏‌​‬‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) bytes1.Length), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) bytes2.Length), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) 0), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) 33024), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(bytes1, 0, bytes1.Length);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(bytes2, 0, bytes2.Length);
  }

  private void \u202E‏​⁬⁫⁬⁬‪​⁫⁮⁬⁪‭‫​‎‍⁬⁫⁬⁯‌‍⁮‌‍⁭‮⁫‪‌‫​‬‎⁫⁬‪‍‮(uint _param1, uint _param2)
  {
    byte[] bytes = (this.\u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮ ? Encoding.UTF8 : \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202B⁯⁯‏⁪⁭‌⁪‬⁬⁫⁭‏‪‎‬⁫‌‭‬⁯‏‫⁭​​⁮‭‏⁭⁮‫⁪⁫‎⁫​‭‬‎‮).GetBytes(this.\u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(new byte[8]
    {
      (byte) 80,
      (byte) 75,
      (byte) 5,
      (byte) 6,
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 0
    }, 0, 8);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((int) (ushort) this.\u200F‪⁫‪⁫⁯⁫‌‏‫‎⁬⁬‮‪‭‬‏​‭‌‌⁪‪⁬‭‪⁯‪‎⁯‫⁮⁯‎‫‮‫‪‬‮.Count + (int) this.\u206C‬⁫​‭⁮‏⁬‎⁮‬‬‏⁬⁯‏⁪‍‮‌‮‌‬‍‏‬‏⁬‭‭‮‍‬‍‎‪​⁯‪‏‮), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((int) (ushort) this.\u200F‪⁫‪⁫⁯⁫‌‏‫‎⁬⁬‮‪‭‬‏​‭‌‌⁪‪⁬‭‪⁯‪‎⁯‫⁮⁯‎‫‮‫‪‬‮.Count + (int) this.\u206C‬⁫​‭⁮‏⁬‎⁮‬‬‏⁬⁯‏⁪‍‮‌‮‌‬‍‏‬‏⁬‭‭‮‍‬‍‎‪​⁯‪‏‮), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param2), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) bytes.Length), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(bytes, 0, bytes.Length);
  }

  private void \u202D‎⁪​​⁫⁮‎‫‫⁪⁫‫⁪⁫​​⁪‏‬‎⁪‬‫‌⁯⁬⁭‬‮‭⁬‍​⁪‫⁯‎⁮‌‮(
    ref \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1,
    Stream _param2)
  {
    byte[] buffer = new byte[16384];
    uint num1 = 0;
    long position = this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
    long num2 = _param2.CanSeek ? _param2.Position : 0L;
    Stream stream = _param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ != \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Store ? (Stream) new DeflateStream(this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮, CompressionMode.Compress, true) : this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮;
    _param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ = uint.MaxValue;
    int count;
    do
    {
      count = _param2.Read(buffer, 0, buffer.Length);
      num1 += (uint) count;
      if (count > 0)
      {
        stream.Write(buffer, 0, count);
        for (uint index = 0; (long) index < (long) count; ++index)
          _param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ = \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202E‎‭⁪‎⁫‮‍⁪‫⁫⁭‎‬⁪‏‌⁮⁭‭‎‎‭⁮⁫⁪‬⁬⁮‮​‪‪‍‭⁯‫​‪‏‮[((int) _param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ ^ (int) buffer[(int) index]) & (int) byte.MaxValue] ^ _param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ >> 8;
      }
    }
    while (count > 0);
    stream.Flush();
    if (_param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ == \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Deflate)
      stream.Dispose();
    _param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮ ^= uint.MaxValue;
    _param1.\u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮ = num1;
    _param1.\u206A⁪‍⁪⁯‭⁯⁪‏⁮‮⁪​⁭‮‭‪‏‮‌⁯⁭⁯‏⁬‭‪‏⁭⁮‎⁬⁫⁭‌⁮‏‌​‬‮ = (uint) (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position - position);
    if (_param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ != \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Deflate || this.\u202D⁪⁯⁫⁭‌‍⁮‌⁪‪‏‭‏​⁯⁫‪⁫⁪‌⁯‌‌⁪‍⁯‪‮⁪‍‪‍⁫⁬‪‫⁪‫⁭‮ || !_param2.CanSeek || _param1.\u206A⁪‍⁪⁯‭⁯⁪‏⁮‮⁪​⁭‮‭‪‏‮‌⁯⁭⁯‏⁬‭‪‏⁭⁮‎⁬⁫⁭‌⁮‏‌​‬‮ <= _param1.\u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮)
      return;
    _param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮ = \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮.Store;
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position = position;
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.SetLength(position);
    _param2.Position = num2;
    this.\u202D‎⁪​​⁫⁮‎‫‫⁪⁫‫⁪⁫​​⁪‏‬‎⁪‬‫‌⁯⁬⁭‬‮‭⁬‍​⁪‫⁯‎⁮‌‮(ref _param1, _param2);
  }

  private uint \u202E‏‏‍‌‏⁫⁪‫⁪‎‍‏⁮⁫‍⁪⁯‌‭​⁯‫‎‍⁯‍⁪⁭⁭‬‮‌‌⁭⁬‌⁫⁮⁮‮(DateTime _param1) => (uint) (_param1.Second / 2 | _param1.Minute << 5 | _param1.Hour << 11 | _param1.Day << 16 | _param1.Month << 21 | _param1.Year - 1980 << 25);

  private DateTime? \u206C⁯‪⁫‌⁪⁯‏⁯‏‭⁬‭‬‫⁭⁮‪‏⁬⁮⁭⁮​‬‎⁯⁬‬‭⁮⁭⁪​‌‌‬⁮‫‍‮(uint _param1)
  {
    int year = (int) (_param1 >> 25) + 1980;
    int month = (int) (_param1 >> 21) & 15;
    int day = (int) (_param1 >> 16) & 31;
    int hour = (int) (_param1 >> 11) & 31;
    int minute = (int) (_param1 >> 5) & 63;
    int second = ((int) _param1 & 31) * 2;
    return month == 0 || day == 0 ? new DateTime?() : new DateTime?(new DateTime(year, month, day, hour, minute, second));
  }

  private void \u202B⁭‮‌⁪‬⁫‮⁮⁪‌⁭⁯‭‏⁯​⁬​⁬‬‎⁯⁫‮‮⁫⁮⁫⁫⁪‎‭⁬⁮‍‌‮⁫‮(
    ref \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮ _param1)
  {
    long position = this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position;
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position = (long) (_param1.\u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮ + 8U);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes((ushort) _param1.\u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮), 0, 2);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position = (long) (_param1.\u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮ + 14U);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u206A⁪‍⁪⁯‭⁯⁪‏⁮‮⁪​⁭‮‭‪‏‮‌⁯⁭⁯‏⁬‭‪‏⁭⁮‎⁬⁫⁭‌⁮‏‌​‬‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Write(BitConverter.GetBytes(_param1.\u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮), 0, 4);
    this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position = position;
  }

  private string \u200D⁮‫‬⁯‌‪⁮‍‌‌‪⁫‬⁫‍‌‭⁭‬⁪​⁭⁪‏‎‮‬‭‏‬‏‮‏⁪​‬‎‮‮‮(string _param1)
  {
    string str = _param1.Replace('\\', '/');
    int num = str.IndexOf(':');
    if (num >= 0)
      str = str.Remove(0, num + 1);
    return str.Trim('/');
  }

  private bool \u200E⁯⁬⁬⁪⁯⁪‬‏⁪⁮⁪⁪‎⁯⁫‫⁪‫‎‪‬⁫‌‌⁬⁬‍⁪‌‍‮‮​⁪​‪⁬‎‏‮()
  {
    if (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Length < 22L)
      return false;
    try
    {
      this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek(-17L, SeekOrigin.End);
      BinaryReader binaryReader = new BinaryReader(this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮);
      do
      {
        this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek(-5L, SeekOrigin.Current);
        if (binaryReader.ReadUInt32() == 101010256U)
        {
          this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek(6L, SeekOrigin.Current);
          ushort num = binaryReader.ReadUInt16();
          int count = binaryReader.ReadInt32();
          uint offset = binaryReader.ReadUInt32();
          if (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position + (long) binaryReader.ReadUInt16() != this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Length)
            return false;
          this.\u206C‬⁫​‭⁮‏⁬‎⁮‬‬‏⁬⁯‏⁪‍‮‌‮‌‬‍‏‬‏⁬‭‭‮‍‬‍‎‪​⁯‪‏‮ = num;
          this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮ = new byte[count];
          this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek((long) offset, SeekOrigin.Begin);
          this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Read(this.\u200C​⁬‏⁭​‬‪‫‪‭⁪⁭‏‮⁫⁫‎‌⁭‏⁪‬⁪‪⁭​⁪⁭‍‬⁮‫​‎⁫‎‪‏‮‮, 0, count);
          this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Seek((long) offset, SeekOrigin.Begin);
          return true;
        }
      }
      while (this.\u206E​‭‎⁫‫⁯‍‪‬‍⁯⁭‮⁯‌‍‪‫‬⁬‏‫‎⁮‭‪‏⁪⁯‮‫‎⁯⁮⁮‌‭​‫‮.Position > 0L);
    }
    catch
    {
    }
    return false;
  }

  public void Dispose() => this.\u202D‏⁬‬​‎‮‌⁯‫‌‎‪⁬⁬‪⁮‪​⁪‍‬‮‎‮⁯⁭⁪⁫⁯‎‏‍⁮⁬​⁫‬‪⁪‮();

  public enum \u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮ : ushort
  {
    Store = 0,
    Deflate = 8,
  }

  public struct \u200C‎‫⁭​‫⁬‌‬⁫⁮‎‎‭⁮‌‪‎⁪⁬⁮‭‬‫⁭‍⁬​‭⁮‭⁪‮⁫‏⁯​⁭‌‮‮
  {
    public \u200E‪‮‮‍‍⁯​‌⁪‬⁬​‌⁯⁮​⁬‭⁫‪⁭‪‭⁯‭‍⁫⁬‌⁮‌‪‫⁮‫‮⁪‭⁯‮.\u202D‌⁮⁮⁫‎‪‏⁮⁯‍‏⁬‍⁮​‪⁯⁫​⁬‎‪‏‍⁫‎‌‌‭‪⁮‮⁫​‭​‭⁭‏‮ \u200D‭⁯‮‌⁮⁮‪‪‍⁭‌‌‮‏‌‍‮‌​⁮‮‌‎⁮‮‌⁮⁮⁬‍⁫‌⁮⁮⁭‫‮‏‮‮;
    public string \u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮;
    public uint \u202D⁪‬​‪⁯‫‎‫‭‪‎⁮⁯‏⁫⁯⁬‪‏‭‪​⁫⁮‎‏⁭‬‏‎‮⁪⁫‮‌‏‎⁯‮;
    public uint \u206A⁪‍⁪⁯‭⁯⁪‏⁮‮⁪​⁭‮‭‪‏‮‌⁯⁭⁯‏⁬‭‪‏⁭⁮‎⁬⁫⁭‌⁮‏‌​‬‮;
    public uint \u206F‬⁫‍‍⁭‭‌‬‌‏‭⁭‭⁮‍‮⁫⁫⁮‍⁪‬⁫⁯‏‬⁮​‌‏⁪​‎‭‪‮‌‌‭‮;
    public uint \u206A‪‮‪​‪⁬‬‎‏‎‪‬⁪‪‏‭‎‪‌⁭⁫‮⁯⁭⁪‏‎‌‍​‌⁭‌⁪​‪‎⁪‎‮;
    public uint \u200C⁬⁯‪​⁯‫‬​‌‪‭‌‍⁫⁮⁭‏⁮‌‎⁭⁫⁫‬‫‍⁫⁬‏‎⁫‬‮⁮‎​‮⁫⁯‮;
    public uint \u200D‮‪⁯‮‮⁫‪⁪⁬‌‭⁭⁫⁮​‮‮⁭‌‭‮⁮⁬‎‭‏⁮‌⁬‎‍‭‌‬‪‮‬⁫‌‮;
    public DateTime \u206B⁭‎‍⁮⁬‏‍⁬‌‫‎⁬⁬‍⁭‬‮‍⁮⁯​‫‬⁯‬⁮⁪⁪⁪‫‎‎‮‏‭⁭‮⁮‌‮;
    public string \u206F‭⁪​‪⁯‭‌‫⁭⁮‌⁮⁫‌‏‌‬⁬‏⁫⁯⁫⁪‪‮‪⁬‬‮‬‬⁫‭‮‎​⁮‍‮;
    public bool \u206B‎‌⁭⁯⁯‭‏⁬‭‎‬⁪⁬⁮‮‭⁫⁯‫⁮⁫⁫⁭‮⁫‏⁪‫​‌​‬‍⁬⁫⁭‬‭⁬‮;

    string ValueType.\u206E​‎​‭‍‌‌⁮⁪⁫​‎‭‪⁯‬‎⁫⁫‪‪⁫⁯‪⁫‪​​‪‏​​​⁬‌‭‎⁪‮() => this.\u206D‪‍‬‎‍‎⁭‎‭⁪‪‌‭⁬⁭⁯⁯⁬‍‪‍‏⁮‪‪⁬​‫⁬‍⁭‎‭⁯⁪‌‮‬‫‮;
  }
}
