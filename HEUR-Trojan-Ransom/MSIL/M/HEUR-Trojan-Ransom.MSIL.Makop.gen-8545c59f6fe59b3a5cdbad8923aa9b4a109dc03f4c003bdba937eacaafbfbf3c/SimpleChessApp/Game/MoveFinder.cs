// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: NU, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FD10F56-6E8A-4A54-94FE-02843CD215B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-8545c59f6fe59b3a5cdbad8923aa9b4a109dc03f4c003bdba937eacaafbfbf3c.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = -1548983796;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -742587888)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1485580159 ^ -1092060115;
            continue;
          case 2:
            this.board = b;
            num1 = (int) num2 * -1429590181 ^ -1214638996;
            continue;
          case 3:
            num1 = (int) num2 * -357844310 ^ 2046663590;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public void FindAllMoves()
    {
label_1:
      int num1 = -156638375;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1519881571)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            this.Clear();
            num1 = (int) num2 * -1921254573 ^ 1697673593;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_8:
        int num3 = !enumerator.MoveNext() ? -2028191738 : (num3 = -99376040);
        ChessPiece current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1519881571)) % 6U)
          {
            case 0:
              num3 = (int) num4 * 2035190209 ^ 220937881;
              continue;
            case 2:
              goto label_8;
            case 3:
              this.FindMoveFrom(current.Current);
              num3 = (int) num4 * -2050327281 ^ 1678645752;
              continue;
            case 4:
              num3 = -99376040;
              continue;
            case 5:
              current = enumerator.Current;
              num3 = -1224993780;
              continue;
            default:
              goto label_13;
          }
        }
      }
label_13:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_18:
        int num5 = enumerator1.MoveNext() ? -993800588 : (num5 = -641704334);
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1519881571)) % 4U)
          {
            case 0:
              goto label_18;
            case 1:
              this.FindMoveFrom(enumerator1.Current.Current);
              num5 = -1051491159;
              continue;
            case 2:
              num5 = -993800588;
              continue;
            default:
              goto label_26;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_21:
        int num7 = -1609041889;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ -1519881571)) % 3U)
          {
            case 0:
              goto label_21;
            case 1:
              num7 = (int) num8 * 479916324 ^ -314297812;
              continue;
            default:
              goto label_25;
          }
        }
label_25:;
      }
label_26:
      if (!this.board.ShowAllMoves)
        return;
label_27:
      int num9 = -782426684;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ -1519881571)) % 4U)
        {
          case 0:
            goto label_23;
          case 1:
            this.HighLightMoveStyle();
            num9 = (int) num10 * -1371555028 ^ 485923247;
            continue;
          case 2:
            num9 = (int) num10 * -361133008 ^ -1700273771;
            continue;
          case 3:
            goto label_27;
          default:
            goto label_19;
        }
      }
label_23:
      return;
label_19:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = 781293688;
      Pieces kind;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 775677202)) % 19U)
        {
          case 0:
            num1 = (int) num2 * -1005526071 ^ 46013944;
            continue;
          case 1:
            num1 = (int) num2 * 16599877 ^ 1623931193;
            continue;
          case 2:
            num1 = (int) num2 * -1818879877 ^ 718048305;
            continue;
          case 3:
            num1 = (int) num2 * -863680983 ^ 31050226;
            continue;
          case 4:
            goto label_3;
          case 5:
label_21:
            this.handleKing(x);
            num1 = 911588189;
            continue;
          case 6:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_20;
              case Pieces.Knight:
                goto label_9;
              case Pieces.Bishop:
                goto label_16;
              case Pieces.Rook:
                goto label_14;
              case Pieces.King:
                goto label_21;
              case Pieces.Queen:
                goto label_11;
              default:
                num1 = (int) num2 * 978926824 ^ 76052690;
                continue;
            }
          case 7:
            goto label_1;
          case 8:
label_9:
            this.handleKnight(x);
            num1 = 684265795;
            continue;
          case 9:
            num1 = (int) num2 * -1542362889 ^ 1208578270;
            continue;
          case 10:
            kind = x.Piece.Kind;
            num1 = (int) num2 * -1057354873 ^ -284720990;
            continue;
          case 11:
label_16:
            this.handleBishop(x);
            num1 = 2114116132;
            continue;
          case 12:
label_11:
            this.handleQueen(x);
            num1 = 863555891;
            continue;
          case 13:
            num1 = (int) num2 * 1786559812 ^ 220741458;
            continue;
          case 14:
            num1 = (int) num2 * -251147433 ^ -209640352;
            continue;
          case 15:
            num1 = (int) num2 * 1769308918 ^ 173299263;
            continue;
          case 16:
label_14:
            this.handleRook(x);
            num1 = 1977602736;
            continue;
          case 17:
            num1 = (int) num2 * 1450518596 ^ 568748583;
            continue;
          case 18:
label_20:
            this.handlePawn(x);
            num1 = 244887221;
            continue;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = 16265942;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        int num5;
        int num6;
        int b;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num7;
        bool flag5;
        bool flag6;
        int num8;
        bool isEmpty;
        Square square;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ 494796267)) % 66U)
        {
          case 0:
            this.addCapture(num8, b, x, this.board[num8, x.Rank].Piece);
            num1 = (int) num2 * -1689066143 ^ -1599891846;
            continue;
          case 1:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * 1078657172 ^ -1084132630;
            continue;
          case 2:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * -929794618 ^ 995410730;
            continue;
          case 3:
            num9 = num5 < 8 ? 1 : 0;
            goto label_62;
          case 4:
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * 743260388 ^ -1445430913;
              continue;
            }
            num10 = 1;
            goto label_90;
          case 5:
            num11 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            break;
          case 6:
            int num19 = flag9 ? 1822717448 : (num19 = 293978096);
            num1 = num19 ^ (int) num2 * 1459946195;
            continue;
          case 7:
            int num20 = isEmpty ? 734945880 : (num20 = 618187126);
            num1 = num20 ^ (int) num2 * -230666204;
            continue;
          case 8:
            num1 = (int) num2 * 1798161812 ^ 126374260;
            continue;
          case 9:
            num1 = 1254598705;
            continue;
          case 10:
            if (num3 >= 0)
            {
              num1 = (int) num2 * -2120490074 ^ -1210526472;
              continue;
            }
            goto label_61;
          case 11:
            if (num5 >= 0)
            {
              num1 = (int) num2 * -1775980339 ^ -1940232458;
              continue;
            }
            goto label_86;
          case 12:
            num14 = this.board[num8, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_36;
          case 13:
            if (this.board[num8, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * 1762269068 ^ 1414535887;
              continue;
            }
            num14 = 0;
            goto label_36;
          case 14:
            num8 = x.File - 1;
            num6 = x.File + 1;
            num1 = (int) num2 * -193143687 ^ -1843246958;
            continue;
          case 15:
            goto label_1;
          case 16:
            num1 = 910603320;
            continue;
          case 17:
            if (num5 >= 0)
            {
              num1 = (int) num2 * -1506889635 ^ 410569821;
              continue;
            }
            goto label_61;
          case 18:
            if (x.Rank != 3)
            {
              num11 = 0;
              break;
            }
            num1 = (int) num2 * -16023670 ^ -137068636;
            continue;
          case 19:
            flag7 = !square.IsEmpty;
            num1 = (int) num2 * -2031676031 ^ -1961650862;
            continue;
          case 20:
            num5 = x.Rank + num4;
            num1 = (int) num2 * 1621501654 ^ -1900032897;
            continue;
          case 21:
            int num21 = num8 < 0 ? 523413659 : (num21 = 1625309063);
            num1 = num21 ^ (int) num2 * -51794526;
            continue;
          case 22:
            int num22 = !flag4 ? 1937380103 : (num22 = 1364149831);
            num1 = num22 ^ (int) num2 * -2052794393;
            continue;
          case 23:
            int num23 = !flag10 ? -1824911155 : (num23 = -1840027954);
            num1 = num23 ^ (int) num2 * -1162811043;
            continue;
          case 24:
            int num24 = flag7 ? -155618221 : (num24 = -1181504540);
            num1 = num24 ^ (int) num2 * 2043920383;
            continue;
          case 25:
            this.addMove(num3, num5, x);
            num1 = (int) num2 * -875590124 ^ -9655106;
            continue;
          case 26:
            if (x.Piece.Color == PieceColor.White)
            {
              num15 = 1;
              goto label_20;
            }
            else
            {
              num1 = (int) num2 * -1266906936 ^ 1196616698;
              continue;
            }
          case 27:
            num1 = 1292192012;
            continue;
          case 28:
            num13 = num5 < 8 ? 1 : 0;
            goto label_87;
          case 29:
            num3 = x.File + 1;
            num5 = x.Rank + num4;
            num1 = 1261793851;
            continue;
          case 30:
            if (x.Rank == 4)
            {
              num1 = 267788477;
              continue;
            }
            num16 = 0;
            goto label_53;
          case 31:
            num1 = 536494333;
            continue;
          case 32:
            if (num3 < 8)
            {
              num1 = (int) num2 * -910938720 ^ 1377144434;
              continue;
            }
            goto label_86;
          case 33:
            int num25 = flag11 ? -1279966297 : (num25 = -789008182);
            num1 = num25 ^ (int) num2 * 1559487677;
            continue;
          case 34:
            int num26 = this.board.lastPassantPawn != this.board[num8, x.Rank].Piece ? -1951738859 : (num26 = -875131195);
            num1 = num26 ^ (int) num2 * -2063055874;
            continue;
          case 35:
            flag10 = flag3 | flag2;
            num1 = (int) num2 * 493245136 ^ 138404002;
            continue;
          case 36:
            flag5 = num6 < 8;
            num1 = 12611035;
            continue;
          case 37:
            num3 = x.File - 1;
            num1 = 760517965;
            continue;
          case 38:
            int num27 = flag5 ? -1427573765 : (num27 = -1682211179);
            num1 = num27 ^ (int) num2 * 91261662;
            continue;
          case 39:
            square = this.board[num3, num5];
            num1 = (int) num2 * 451444296 ^ 1775854356;
            continue;
          case 40:
            num10 = -1;
            goto label_90;
          case 41:
            num5 = x.Rank + 2 * num4;
            this.addMove(num3, num5, x);
            num1 = (int) num2 * 28400902 ^ -1856097998;
            continue;
          case 42:
            isEmpty = square.IsEmpty;
            num1 = (int) num2 * 1051063014 ^ 1696762746;
            continue;
          case 43:
            int num28 = !flag8 ? 1387769396 : (num28 = 1718586709);
            num1 = num28 ^ (int) num2 * 1603892776;
            continue;
          case 44:
            num16 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_53;
          case 45:
            num15 = 6;
            goto label_20;
          case 46:
            if (this.board[num6, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num17 = 0;
              goto label_24;
            }
            else
            {
              num1 = (int) num2 * 949385904 ^ -1599222498;
              continue;
            }
          case 47:
            square = this.board[num3, num5];
            flag12 = !square.IsEmpty;
            num1 = (int) num2 * -636331595 ^ 157492540;
            continue;
          case 48:
            int num29 = !flag12 ? -935616822 : (num29 = -2086181242);
            num1 = num29 ^ (int) num2 * -401020715;
            continue;
          case 49:
            num18 = num5 < 8 ? 1 : 0;
            goto label_68;
          case 50:
            int num30 = flag6 ? -1353466992 : (num30 = -2115556191);
            num1 = num30 ^ (int) num2 * 1839574774;
            continue;
          case 51:
            num1 = (int) num2 * -759076035 ^ -561895534;
            continue;
          case 52:
            num12 = 2;
            goto label_50;
          case 53:
            num17 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_24;
          case 54:
            goto label_3;
          case 55:
            num3 = 0;
            num5 = 0;
            num1 = (int) num2 * 708855913 ^ -1021980168;
            continue;
          case 56:
            square = this.board[num3, num5];
            num1 = (int) num2 * -1865836160 ^ -1750171577;
            continue;
          case 57:
            num1 = (int) num2 * 1203707705 ^ -1852779198;
            continue;
          case 58:
            int num31 = this.board.lastPassantPawn == this.board[num6, x.Rank].Piece ? 136301674 : (num31 = 1572244789);
            num1 = num31 ^ (int) num2 * 637612894;
            continue;
          case 59:
            num3 = x.File;
            num5 = x.Rank + num4;
            if (num5 >= 0)
            {
              num1 = (int) num2 * 1706681441 ^ 1096430865;
              continue;
            }
            num18 = 0;
            goto label_68;
          case 60:
            num1 = (int) num2 * 489823538 ^ -811836631;
            continue;
          case 61:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num1 = (int) num2 * 1638180541 ^ 734485736;
            continue;
          case 62:
            flag6 = this.board[num8, x.Rank].Piece != null;
            num1 = (int) num2 * 58257288 ^ -897180425;
            continue;
          case 63:
            int num32 = flag1 ? 2097302499 : (num32 = 1105930148);
            num1 = num32 ^ (int) num2 * 1249307151;
            continue;
          case 64:
            int num33 = this.board[num6, x.Rank].Piece == null ? 267825301 : (num33 = 1137998147);
            num1 = num33 ^ (int) num2 * -90666162;
            continue;
          case 65:
            flag9 = x.Rank == num7;
            num1 = 1543543291;
            continue;
          default:
            goto label_100;
        }
        flag2 = num11 != 0;
        if (!flag3)
        {
          num1 = 2084323025;
          continue;
        }
        num12 = 5;
        goto label_50;
label_20:
        num7 = num15;
        num1 = 1474975603;
        continue;
label_24:
        int num34;
        num1 = num34 = num17 == 0 ? 1688704821 : (num34 = 1075937003);
        continue;
label_36:
        flag4 = num14 != 0;
        num1 = 504933513;
        continue;
label_50:
        b = num12;
        num1 = 1528613012;
        continue;
label_53:
        flag3 = num16 != 0;
        num1 = 629934995;
        continue;
label_61:
        num9 = 0;
label_62:
        flag8 = num9 != 0;
        num1 = 1558473296;
        continue;
label_68:
        flag11 = num18 != 0;
        num1 = 1345290748;
        continue;
label_86:
        num13 = 0;
label_87:
        flag1 = num13 != 0;
        num1 = 757751292;
        continue;
label_90:
        num4 = num10;
        num1 = 957140044;
      }
label_3:
      return;
label_100:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = 811690554;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1464322281)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.handleBishop(x);
            num1 = (int) num2 * -661329758 ^ 1766720310;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 2039701924 ^ 2041957936;
            continue;
          case 4:
            this.handleRook(x);
            num1 = (int) num2 * 1156635902 ^ 2041068224;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void handleKing(Square x)
    {
      this.addMove(x.File + 1, x.Rank + 1, x);
      this.addMove(x.File + 1, x.Rank - 1, x);
      this.addMove(x.File - 1, x.Rank + 1, x);
label_1:
      int num1 = -1292710834;
      bool flag1;
      bool flag2;
      bool canCastleQueenSide1;
      bool canCastleQueenSide2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -769237441)) % 26U)
        {
          case 0:
            this.addMove(x.File, x.Rank + 1, x);
            num1 = (int) num2 * 1917782347 ^ -2106521602;
            continue;
          case 1:
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * 944475965 ^ -1551069580;
            continue;
          case 2:
            canCastleQueenSide2 = this.board.WhiteCanCastleQueenSide;
            num1 = -454216400;
            continue;
          case 3:
            int num3 = canCastleQueenSide2 ? 328721749 : (num3 = 1453596343);
            num1 = num3 ^ (int) num2 * -1666589681;
            continue;
          case 4:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 587887350 ^ -544257059;
            continue;
          case 5:
            int num4 = !canCastleQueenSide1 ? 1540809312 : (num4 = 1296446148);
            num1 = num4 ^ (int) num2 * -1771159903;
            continue;
          case 6:
            int num5 = !this.board.BlackCanCastleKingSide ? 313434713 : (num5 = 1437901652);
            num1 = num5 ^ (int) num2 * -867178734;
            continue;
          case 7:
            this.addMove(x.File, x.Rank - 1, x);
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * -1852557470 ^ 991062363;
            continue;
          case 8:
            num1 = -1214169530;
            continue;
          case 9:
            goto label_3;
          case 10:
            num1 = (int) num2 * 365959850 ^ -1294934286;
            continue;
          case 11:
            int num6 = !this.board.WhiteCanCastleKingSide ? 221021466 : (num6 = 684969194);
            num1 = num6 ^ (int) num2 * -1464892657;
            continue;
          case 12:
            canCastleQueenSide1 = this.board.BlackCanCastleQueenSide;
            num1 = -473519682;
            continue;
          case 13:
            num1 = (int) num2 * 162211173 ^ -1381408046;
            continue;
          case 14:
            int num7 = flag1 ? -1822053191 : (num7 = -2059537416);
            num1 = num7 ^ (int) num2 * 567293161;
            continue;
          case 15:
            this.handleBigCastling(x);
            num1 = (int) num2 * 477716544 ^ -837013345;
            continue;
          case 16:
            num1 = (int) num2 * -12671618 ^ 293821421;
            continue;
          case 17:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 1802113828 ^ 1470750487;
            continue;
          case 18:
            int num8 = !flag2 ? -273900546 : (num8 = -748029454);
            num1 = num8 ^ (int) num2 * -1867395006;
            continue;
          case 19:
            num1 = (int) num2 * 401495704 ^ 1755374721;
            continue;
          case 20:
            num1 = (int) num2 * -977602570 ^ 708539158;
            continue;
          case 21:
            goto label_1;
          case 22:
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * -1879701897 ^ -133497419;
            continue;
          case 23:
            num1 = -1745351730;
            continue;
          case 24:
            this.handleBigCastling(x);
            num1 = (int) num2 * 967253066 ^ 1832443308;
            continue;
          case 25:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = -28518045;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
label_1:
      int num1 = 462410107;
      while (true)
      {
        uint num2;
        Square square2;
        Square square3;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 959552421)) % 9U)
        {
          case 0:
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -114850564 ^ -1396302164;
            continue;
          case 1:
            square2 = this.board[x.File - 2, x.Rank];
            num1 = (int) num2 * 712289960 ^ 1161978945;
            continue;
          case 2:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1937622995 ^ 1225519551;
              continue;
            }
            break;
          case 3:
            goto label_1;
          case 4:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * 949714526 ^ 700229044;
            continue;
          case 5:
            goto label_3;
          case 6:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_14;
          case 7:
            int num4 = flag ? -336477365 : (num4 = -1804205939);
            num1 = num4 ^ (int) num2 * -641131839;
            continue;
          case 8:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * -1429388865 ^ 2058254989;
              continue;
            }
            break;
          default:
            goto label_15;
        }
        num3 = 0;
label_14:
        flag = num3 != 0;
        num1 = 766020914;
      }
label_3:
      return;
label_15:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = 1469197047;
      while (true)
      {
        uint num2;
        Square square1;
        bool flag;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1830747301)) % 8U)
        {
          case 0:
            goto label_3;
          case 1:
            num3 = square1.IsEmpty ? 1 : 0;
            break;
          case 2:
            square2 = this.board[x.File + 1, x.Rank];
            num1 = (int) num2 * -1057307135 ^ -862711300;
            continue;
          case 3:
            square1 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * 49610177 ^ -41498430;
            continue;
          case 4:
            if (!square2.IsEmpty)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 20786703 ^ 2011035296;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num4 = flag ? 870698416 : (num4 = 880072687);
            num1 = num4 ^ (int) num2 * -849434069;
            continue;
          case 7:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -883785822 ^ 588176443;
            continue;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = 460270331;
      }
label_3:
      return;
label_13:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = -561893055;
      bool flag1;
      int num2;
      int b1;
      int num3;
      int num4;
      bool flag2;
      int num5;
      int a1;
      bool flag3;
      int a2;
      bool flag4;
      int b2;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -984195292)) % 38U)
        {
          case 0:
            num1 = (int) num6 * 1107683161 ^ -817049356;
            continue;
          case 1:
            int num7;
            num1 = num7 = num2 < 8 ? -1866609644 : (num7 = -373330612);
            continue;
          case 2:
            num1 = -619649052;
            continue;
          case 3:
            num4 = 1;
            num1 = (int) num6 * 2066586446 ^ -1512897845;
            continue;
          case 4:
            num3 = 1;
            num1 = -831596170;
            continue;
          case 5:
            flag3 = this.addMove(a2, x.Rank, x);
            num1 = (int) num6 * 411957836 ^ 1721188744;
            continue;
          case 6:
            num1 = -1583705685;
            continue;
          case 7:
            flag1 = num4 < 8;
            num1 = -1431503850;
            continue;
          case 8:
            num1 = (int) num6 * -1228109139 ^ 1464907306;
            continue;
          case 9:
            num1 = -243979257;
            continue;
          case 10:
            int num8 = flag1 ? 1226277605 : (num8 = 1333329688);
            num1 = num8 ^ (int) num6 * -70124609;
            continue;
          case 11:
            int num9;
            num1 = num9 = num5 < 8 ? -196817454 : (num9 = -884886448);
            continue;
          case 12:
            goto label_3;
          case 13:
            b2 = x.Rank + num4;
            num1 = (int) num6 * -1873273355 ^ -184558662;
            continue;
          case 14:
            ++num4;
            num1 = (int) num6 * -206272907 ^ -1350294323;
            continue;
          case 15:
            int num10 = this.addMove(x.File, b1, x) ? -1006878914 : (num10 = -342038776);
            num1 = num10 ^ (int) num6 * -2122230309;
            continue;
          case 16:
            num1 = -203883334;
            continue;
          case 17:
            int num11 = flag4 ? -1231103166 : (num11 = -432651407);
            num1 = num11 ^ (int) num6 * 2018544021;
            continue;
          case 18:
            num2 = 1;
            num1 = -903677319;
            continue;
          case 19:
            num1 = -1373473537;
            continue;
          case 20:
            int num12 = !flag3 ? 1553111962 : (num12 = 974283770);
            num1 = num12 ^ (int) num6 * 1572693116;
            continue;
          case 21:
            num1 = (int) num6 * 1910291019 ^ -139784040;
            continue;
          case 22:
            flag2 = this.addMove(a1, x.Rank, x);
            num1 = (int) num6 * 549957166 ^ 1353676269;
            continue;
          case 23:
            num1 = (int) num6 * 2059326086 ^ 80109183;
            continue;
          case 24:
            num1 = (int) num6 * 1831952571 ^ -1305818106;
            continue;
          case 25:
            num1 = (int) num6 * -1188983677 ^ -1158306251;
            continue;
          case 26:
            ++num2;
            num1 = -2020272985;
            continue;
          case 27:
            ++num3;
            num1 = (int) num6 * 258333460 ^ 98582490;
            continue;
          case 28:
            goto label_1;
          case 29:
            int num13 = flag2 ? -168567902 : (num13 = -682834830);
            num1 = num13 ^ (int) num6 * -1097881900;
            continue;
          case 30:
            flag4 = num3 < 8;
            num1 = -1169288763;
            continue;
          case 31:
            a2 = x.File + num2;
            num1 = (int) num6 * -1562244002 ^ -2095154939;
            continue;
          case 32:
            num5 = 1;
            num1 = -1122521121;
            continue;
          case 33:
            num1 = -1408521589;
            continue;
          case 34:
            ++num5;
            num1 = (int) num6 * 1211842509 ^ 1767682203;
            continue;
          case 35:
            b1 = x.Rank - num3;
            num1 = (int) num6 * 1363747060 ^ 1023164587;
            continue;
          case 36:
            a1 = x.File - num5;
            num1 = -1422927410;
            continue;
          case 37:
            int num14 = !this.addMove(x.File, b2, x) ? -2121666310 : (num14 = -1570488096);
            num1 = num14 ^ (int) num6 * 1269081206;
            continue;
          default:
            goto label_40;
        }
      }
label_3:
      return;
label_40:;
    }

    private void handleBishop(Square x)
    {
      int num1 = 1;
label_1:
      int num2 = 146750582;
      int num3;
      int a1;
      bool flag1;
      int num4;
      bool flag2;
      int a2;
      int b1;
      bool flag3;
      int num5;
      bool flag4;
      int a3;
      int b2;
      bool flag5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num2 ^ 552929957)) % 39U)
        {
          case 0:
            num2 = 1729470895;
            continue;
          case 1:
            goto label_3;
          case 2:
            int num7;
            num2 = num7 = num1 < 8 ? 1497408995 : (num7 = 134516134);
            continue;
          case 3:
            flag4 = num5 < 8;
            num2 = 1196729116;
            continue;
          case 4:
            ++num5;
            num2 = 1504566550;
            continue;
          case 5:
            num3 = 1;
            num2 = 1155375103;
            continue;
          case 6:
            int num8 = flag2 ? 806796365 : (num8 = 2063177177);
            num2 = num8 ^ (int) num6 * 2005587762;
            continue;
          case 7:
            a2 = x.File - num5;
            num2 = (int) num6 * -694270601 ^ -2077493061;
            continue;
          case 8:
            num2 = (int) num6 * 1826942653 ^ -1766188771;
            continue;
          case 9:
            int b3 = x.Rank - num3;
            flag1 = this.addMove(a1, b3, x);
            num2 = (int) num6 * -32258861 ^ 92637248;
            continue;
          case 10:
            num2 = (int) num6 * 960567630 ^ 791798609;
            continue;
          case 11:
            num2 = (int) num6 * -1515269987 ^ 1907216520;
            continue;
          case 12:
            num2 = (int) num6 * 1263228924 ^ 2072654599;
            continue;
          case 13:
            num2 = (int) num6 * -1646946208 ^ 1672362738;
            continue;
          case 14:
            num4 = 1;
            num2 = 1597288731;
            continue;
          case 15:
            num5 = 1;
            num2 = 2083217936;
            continue;
          case 16:
            ++num1;
            num2 = 1136372763;
            continue;
          case 17:
            ++num4;
            num2 = (int) num6 * -867869073 ^ -525991488;
            continue;
          case 18:
            ++num3;
            num2 = 2120829746;
            continue;
          case 19:
            int num9;
            num2 = num9 = this.addMove(x.File - num4, x.Rank - num4, x) ? 1043637421 : (num9 = 548838534);
            continue;
          case 20:
            num2 = 132528631;
            continue;
          case 21:
            goto label_1;
          case 22:
            int num10 = flag1 ? -2147076173 : (num10 = -1915883634);
            num2 = num10 ^ (int) num6 * -978595460;
            continue;
          case 23:
            b2 = x.Rank + num1;
            num2 = (int) num6 * 850075795 ^ 1510046452;
            continue;
          case 24:
            num2 = (int) num6 * -5526686 ^ 256374440;
            continue;
          case 25:
            flag5 = this.addMove(a3, b2, x);
            num2 = (int) num6 * -793059704 ^ -1733301238;
            continue;
          case 26:
            a1 = x.File + num3;
            num2 = (int) num6 * 333392245 ^ -1077194900;
            continue;
          case 27:
            flag3 = this.addMove(a2, b1, x);
            num2 = (int) num6 * -424901 ^ -1218659625;
            continue;
          case 28:
            num2 = 813675623;
            continue;
          case 29:
            num2 = (int) num6 * 1690404166 ^ -871991448;
            continue;
          case 30:
            int num11 = !flag4 ? 1390669963 : (num11 = 296626234);
            num2 = num11 ^ (int) num6 * -1458992941;
            continue;
          case 31:
            num2 = (int) num6 * -174104503 ^ -538436168;
            continue;
          case 32:
            b1 = x.Rank + num5;
            num2 = (int) num6 * -1582297978 ^ -2138452521;
            continue;
          case 33:
            int num12 = !flag3 ? -315620265 : (num12 = -1516221575);
            num2 = num12 ^ (int) num6 * -1181928196;
            continue;
          case 34:
            num2 = 1539243613;
            continue;
          case 35:
            int num13 = !flag5 ? -1728173595 : (num13 = -668021078);
            num2 = num13 ^ (int) num6 * 1875941160;
            continue;
          case 36:
            a3 = x.File + num1;
            num2 = (int) num6 * -130562225 ^ -1687046508;
            continue;
          case 37:
            int num14;
            num2 = num14 = num3 < 8 ? 1139344246 : (num14 = 1738394470);
            continue;
          case 38:
            flag2 = num4 < 8;
            num2 = 1714162258;
            continue;
          default:
            goto label_41;
        }
      }
label_3:
      return;
label_41:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = 1022126530;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        Square sq;
        bool isEmpty;
        int[] numArray1;
        int index;
        int File;
        int Rank;
        bool flag;
        int[] numArray2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 299966416)) % 24U)
        {
          case 0:
            int num4 = flag ? 717413901 : (num4 = 60355481);
            num1 = num4 ^ (int) num2 * 249897716;
            continue;
          case 1:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -1313572986 ^ 1769561364;
            continue;
          case 2:
            piece = x.Piece;
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206C⁭‫‎‍⁮⁭⁬​‎⁬⁯​‮⁪‍​​‍⁪​‮⁭⁪⁫⁭‎​⁭‍⁬⁭⁭​⁮‏⁭‫‌‍‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray2 = numArray3;
            num1 = (int) num2 * 435107692 ^ -1158875361;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -527993062 ^ -1973265029;
            continue;
          case 5:
            Rank = x.Rank + numArray1[index];
            if (File >= 0)
            {
              num1 = (int) num2 * -926246415 ^ -456625551;
              continue;
            }
            break;
          case 6:
            num3 = Rank > 7 ? 1 : 0;
            goto label_28;
          case 7:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 2133067678 ^ 154931934;
            continue;
          case 8:
            File = x.File + numArray2[index];
            num1 = (int) num2 * 862174769 ^ -1714944923;
            continue;
          case 9:
            sq = this.board[File, Rank];
            num1 = 251180713;
            continue;
          case 10:
            int num5 = !isEmpty ? -1552351365 : (num5 = -934267291);
            num1 = num5 ^ (int) num2 * -716866683;
            continue;
          case 11:
            int num6;
            num1 = num6 = index < 8 ? 413452362 : (num6 = 1421257051);
            continue;
          case 12:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -1046857634 ^ 505214334;
              continue;
            }
            break;
          case 13:
            index = 0;
            num1 = (int) num2 * 119441510 ^ -1273770050;
            continue;
          case 14:
            if (File <= 7)
            {
              num1 = (int) num2 * -1493378193 ^ -28257716;
              continue;
            }
            break;
          case 15:
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206C⁭‫‎‍⁮⁭⁬​‎⁬⁯​‮⁪‍​​‍⁪​‮⁭⁪⁫⁭‎​⁭‍⁬⁭⁭​⁮‏⁭‫‌‍‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray1 = numArray4;
            num1 = (int) num2 * -128059754 ^ -1508362633;
            continue;
          case 16:
            num1 = (int) num2 * -1474698289 ^ -1567287661;
            continue;
          case 17:
            int num7;
            num1 = num7 = sq.Piece.Color != x.Piece.Color ? 1570135444 : (num7 = 2126923587);
            continue;
          case 18:
            num1 = 825342928;
            continue;
          case 19:
            num1 = 771893943;
            continue;
          case 20:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -1483498376 ^ -1819133789;
            continue;
          case 21:
            num1 = (int) num2 * 941050650 ^ -250809723;
            continue;
          case 22:
            goto label_1;
          case 23:
            ++index;
            num1 = 1676269619;
            continue;
          default:
            goto label_31;
        }
        num3 = 1;
label_28:
        flag = num3 != 0;
        num1 = 1512066216;
      }
label_3:
      return;
label_31:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = 936258499;
      ChessPiece piece;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 614957549)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            piece = x.Piece;
            Square sq = this.board[a, b];
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * -1873094898 ^ -1425425958;
            continue;
          case 3:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * 1537182224 ^ -213295288;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = 1650860097;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        UserAction kind;
        Square sq;
        bool flag3;
        bool isEmpty;
        ChessPiece piece;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1410366460)) % 28U)
        {
          case 0:
            flag1 = true;
            num1 = (int) num2 * 566281487 ^ -2030855125;
            continue;
          case 1:
            if (x.Piece.Kind == Pieces.King)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 488345045 ^ -1266760801;
            continue;
          case 2:
            num4 = b > 7 ? 1 : 0;
            goto label_26;
          case 3:
            int num5 = flag3 ? 375606620 : (num5 = 1169765160);
            num1 = num5 ^ (int) num2 * 471462518;
            continue;
          case 4:
            int num6 = flag4 ? -1524137464 : (num6 = -41594633);
            num1 = num6 ^ (int) num2 * 973123513;
            continue;
          case 5:
            kind = UserAction.Capture;
            flag3 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * 807046286 ^ -903082443;
            continue;
          case 6:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -1166160470 ^ -283416096;
            continue;
          case 8:
            flag1 = false;
            num1 = 1946643639;
            continue;
          case 9:
            if (a <= 7)
            {
              num1 = (int) num2 * 642561321 ^ 1665377684;
              continue;
            }
            goto label_25;
          case 10:
            int num7 = !flag2 ? 1219630250 : (num7 = 1006670926);
            num1 = num7 ^ (int) num2 * 643068945;
            continue;
          case 11:
            isEmpty = sq.IsEmpty;
            num1 = (int) num2 * -1421091148 ^ 677632947;
            continue;
          case 12:
            num1 = (int) num2 * 442348260 ^ 509148007;
            continue;
          case 13:
            if (b >= 0)
            {
              num1 = (int) num2 * -1728404616 ^ -480479878;
              continue;
            }
            goto label_25;
          case 14:
            num1 = (int) num2 * 358492183 ^ 2033195463;
            continue;
          case 15:
            int num8 = isEmpty ? -2013081309 : (num8 = -2021657928);
            num1 = num8 ^ (int) num2 * 41584939;
            continue;
          case 16:
            num1 = (int) num2 * 1184430286 ^ 2059459423;
            continue;
          case 17:
            if (a >= 0)
            {
              num1 = (int) num2 * -351043878 ^ -134051661;
              continue;
            }
            goto label_25;
          case 18:
            goto label_1;
          case 19:
            num1 = 1902275986;
            continue;
          case 20:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * -529135313 ^ -1901276;
            continue;
          case 21:
            flag1 = true;
            num1 = (int) num2 * 1727952287 ^ -184259829;
            continue;
          case 22:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = 943385337;
            continue;
          case 23:
            flag1 = true;
            num1 = 1946643639;
            continue;
          case 24:
            piece = x.Piece;
            num1 = 396432507;
            continue;
          case 25:
            int num9;
            num1 = num9 = sq.Piece.Color == x.Piece.Color ? 624205087 : (num9 = 86230141);
            continue;
          case 26:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 27:
            sq = this.board[a, b];
            num1 = (int) num2 * 95585041 ^ 739332584;
            continue;
          default:
            goto label_37;
        }
        flag4 = num3 != 0;
        num1 = 1145583292;
        continue;
label_25:
        num4 = 1;
label_26:
        flag2 = num4 != 0;
        num1 = 654439754;
      }
label_37:
      return flag1;
    }

    static void \u206C⁭‫‎‍⁮⁭⁬​‎⁬⁯​‮⁪‍​​‍⁪​‮⁭⁪⁫⁭‎​⁭‍⁬⁭⁭​⁮‏⁭‫‌‍‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
