// Decompiled with JetBrains decompiler
// Type: SpectraCyber.cSpectraCyberBase
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using System;
using System.IO.Ports;
using System.Windows.Forms;

namespace SpectraCyber
{
  internal abstract class cSpectraCyberBase
  {
    protected bool mbOnline;
    protected bool mbScanning;
    protected int miVersion;
    protected bool mbNoiseSourceStatus;
    protected double mdRestCorrection;
    protected double mdVoltageStepSize;
    protected double mdVoltageMax;
    protected int miVoltageNumSteps;
    protected double mdIFGain;
    protected double mdIFGainMin;
    protected double mdIFGainMax;
    protected double mdPLLRestFrequency;
    protected double mdPLLFrequency;
    protected double mdPLLStepSize;
    protected double mdPLLMaxOffset;
    protected double mdPLLLowerBound;
    protected double mdPLLUpperBound;
    protected enumMode meMode;
    protected enumMode[] meModes;
    protected cCommunication mcommCommunication;
    protected cPriorityQueue mCommandQueue;
    protected cPriorityQueue mReplyQueue;
    protected cDatabaseQueue mDatabaseQueue;
    protected string mstrCommPort;
    protected int miBaudRate = 2400;
    protected int miDataBits = 8;
    protected Parity mparParity = Parity.None;
    protected int miCharInputBufferSize = 4;
    protected SpectraCyber1Form mpForm;

    public void SetCommandWindowText(string strCommand)
    {
      if (this.mpForm.IsClosing)
        return;
      this.mpForm.Invoke((Delegate) new cSpectraCyberBase.SetCommandWindowDelegate(this.mpForm.SetCommandWindowText), (object) strCommand);
    }

    public cSpectraCyberBase()
    {
      this.mcommCommunication = new cCommunication();
      this.mcommCommunication.BaudRate = this.miBaudRate;
      this.mcommCommunication.DataBits = this.miDataBits;
      this.mcommCommunication.Parity = Parity.None;
      this.mcommCommunication.BufferSize = this.miCharInputBufferSize;
      this.mcommCommunication.SpectraCyber = this;
      this.mCommandQueue = this.mcommCommunication.CommandQueue;
      this.mReplyQueue = this.mcommCommunication.ReplyQueue;
      this.mDatabaseQueue = this.mcommCommunication.DatabaseQueue;
      this.mbOnline = false;
      this.mbScanning = false;
    }

    public virtual void Reset()
    {
      this.mcommCommunication.Reset();
      this.SendCommand("!R000", 0, true, 4, eCommandType.Reset);
    }

    public virtual void Scan()
    {
    }

    public virtual void Stop() => this.SendCommand("_STOP", 0, false, 0, eCommandType.ScanStop);

    public virtual void ProcessReply(string strReply, eCommandType eType)
    {
      if (strReply[0] != 'R')
        return;
      this.mbOnline = true;
    }

    public void SetParent(SpectraCyber1Form pForm) => this.mpForm = pForm;

    public void SendCommand(string strCommand) => this.mCommandQueue.Add(new cCommandItem(strCommand, 0, false, 0, eCommandType.GeneralCommunication));

    public void SendCommand(
      string strCommand,
      int iTimeToWaitMS,
      bool bExpectReply,
      int iNumCharsToRead)
    {
      this.mCommandQueue.Add(new cCommandItem(strCommand, iTimeToWaitMS, bExpectReply, iNumCharsToRead, eCommandType.GeneralCommunication));
    }

    public void SendCommand(
      string strCommand,
      int iTimeToWaitMS,
      bool bExpectReply,
      int iNumCharsToRead,
      eCommandType eCommType)
    {
      this.mCommandQueue.Add(new cCommandItem(strCommand, iTimeToWaitMS, bExpectReply, iNumCharsToRead, eCommType));
    }

    public int Version => this.miVersion;

    public enumMode Mode => this.meMode;

    public void SetNoiseSourceStatus(bool bNoiseSourceOn)
    {
      string strCommand = "!N000";
      if (bNoiseSourceOn)
        strCommand = "!N001";
      this.SendCommand(strCommand, 0, false, 0, eCommandType.ChangeSetting);
    }

    public void SetNoiseSourceStatus()
    {
      string strCommand = "!N000";
      if (this.mbNoiseSourceStatus)
        strCommand = "!N001";
      this.SendCommand(strCommand, 0, false, 0, eCommandType.ChangeSetting);
    }

    public bool GetNoiseSourceStatus() => this.mbNoiseSourceStatus;

    protected string IntToHexString(int iValue, int iTotalLength)
    {
      string str = "0123456789ABCDEF";
      string hexString = "";
      for (; iValue > 0; iValue /= 16)
        hexString = str[iValue % 16].ToString() + hexString;
      for (int length = hexString.Length; length < iTotalLength; ++length)
        hexString = "0" + hexString;
      return hexString;
    }

    protected int HexStringToInt(string strHexInput) => Convert.ToInt32(strHexInput, 16);

    public void Connect()
    {
      this.mcommCommunication.Connect();
      this.Reset();
      this.mbOnline = true;
    }

    public void Disconnect()
    {
      this.SendCommand("_DISCONNECT", 0, false, 0, eCommandType.Termination);
      this.mbOnline = false;
    }

    public string CommPort
    {
      get => this.mcommCommunication.CommPort;
      set => this.mcommCommunication.CommPort = value;
    }

    public bool Online => this.mbOnline;

    public bool Scanning => this.mbScanning;

    public double PLLStepSize => this.mdPLLStepSize;

    public double PLLMaxOffset => this.mdPLLMaxOffset;

    public double PLLLowerBound
    {
      get => this.mdPLLLowerBound;
      set
      {
        double num1 = value;
        if (Math.Abs(num1) > this.mdPLLMaxOffset)
        {
          int num2 = (int) MessageBox.Show("Lower PLL bound is out of range.");
        }
        else
          this.mdPLLLowerBound = this.mdPLLRestFrequency + num1;
      }
    }

    public double PLLUpperBound
    {
      get => this.mdPLLUpperBound;
      set
      {
        double num1 = value;
        if (Math.Abs(num1) > this.mdPLLMaxOffset)
        {
          int num2 = (int) MessageBox.Show("Upper PLL bound is out of range.");
        }
        else
          this.mdPLLUpperBound = this.mdPLLRestFrequency + num1;
      }
    }

    protected void ScanComplete()
    {
    }

    protected void UnitOnline()
    {
    }

    public delegate void SetCommandWindowDelegate(string strText);

    public delegate void VoltageTextboxDelegate(string strText);

    public delegate void FrequencyTextboxDelegate(string strText);
  }
}
