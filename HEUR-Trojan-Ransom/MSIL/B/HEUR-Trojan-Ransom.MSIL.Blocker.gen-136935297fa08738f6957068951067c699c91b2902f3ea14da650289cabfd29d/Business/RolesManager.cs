// Decompiled with JetBrains decompiler
// Type: Coache.Business.RolesManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System.ComponentModel;
using System.Configuration;
using System.Data;

namespace Coache.Business
{
  public class RolesManager
  {
    public BindingList<Rol> GetRoles()
    {
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetRoles");
      BindingList<Rol> roles = new BindingList<Rol>();
      FunctionalitiesManager functionalitiesManager = new FunctionalitiesManager();
      foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
      {
        Rol rol = new Rol()
        {
          ID = int.Parse(row["ID"].ToString()),
          Nombre = row["Descripcion"].ToString(),
          Functionalities = functionalitiesManager.GetRoleFunctionalities(int.Parse(row["ID"].ToString()))
        };
        roles.Add(rol);
      }
      return roles;
    }

    public void DeleteRole(Rol rol) => SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.DeleteRole", SqlDataAccessArgs.CreateWith("@Rol_ID", (object) rol.ID).Arguments);

    public void SaveRole(Rol rol)
    {
      if (rol.ID > 0)
        this.UpdateRole(rol);
      else
        this.InsertRole(rol);
    }

    private void InsertRole(Rol rol)
    {
      int num = SqlDataAccess.ExecuteScalarQuery<int>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertRole", SqlDataAccessArgs.CreateWith("@Description", (object) rol.Nombre).Arguments);
      rol.ID = num;
      this.UpdateRoleFunctionalities(rol);
    }

    private void UpdateRole(Rol rol)
    {
      SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.UpdateRole", SqlDataAccessArgs.CreateWith("@Description", (object) rol.Nombre).And("@ID", (object) rol.ID).Arguments);
      this.UpdateRoleFunctionalities(rol);
    }

    private void UpdateRoleFunctionalities(Rol rol)
    {
      FunctionalitiesManager functionalitiesManager = new FunctionalitiesManager();
      if (rol.ID > 0)
        functionalitiesManager.DeleteRoleFunctionalities(rol);
      foreach (Functionalities functionality in rol.Functionalities)
        functionalitiesManager.InsertRoleFunctionality(rol, functionality);
    }

    public int GetDefaultRoleID() => SqlDataAccess.ExecuteScalarQuery<int>(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetDefaultRoleID");
  }
}
