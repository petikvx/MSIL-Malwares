// Decompiled with JetBrains decompiler
// Type: 424393602557.934418144270
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003048520867406;
using \u003053028810657;
using \u003208825527781;
using \u003226094756440;
using \u003277493558513;
using \u003384276752884;
using \u003424393602557;
using \u003545704640419;
using \u003603600525092;
using \u003658692056656;
using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Globalization;
using System.Reflection;

namespace \u003424393602557
{
  public class \u003934418144270 : \u003068562095717
  {
    private const string \u003878793896878 = "System.Data.Linq.Binary";
    private const string \u003165823332084 = "ToArray";
    private static \u003648686010507 \u003896972704693;

    public virtual void \u003346899569599(
      \u003632627526011 _param1,
      object _param2,
      \u003131478599170 _param3)
    {
      if (_param2 == null)
      {
        _param1.\u003876065641053();
      }
      else
      {
        byte[] numArray = this.\u003035533440040(_param2);
        _param1.\u003439461455399(numArray);
      }
    }

    private byte[] \u003035533440040(object _param1)
    {
      if (_param1.GetType().FullName == "System.Data.Linq.Binary")
      {
        \u003934418144270.\u003769916393103(_param1.GetType());
        return (byte[]) \u003934418144270.\u003896972704693.\u003147275448645(_param1, "ToArray");
      }
      return _param1 is SqlBinary sqlBinary ? sqlBinary.Value : throw new \u003479281034910("Unexpected value type when writing binary: {0}".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.GetType()));
    }

    private static void \u003769916393103(Type _param0)
    {
      if (\u003934418144270.\u003896972704693 != null)
        return;
      \u003934418144270.\u003896972704693 = \u003648686010507.\u003926435075433(_param0, (MethodBase) _param0.GetConstructor(new Type[1]
      {
        typeof (byte[])
      }), "ToArray");
    }

    public virtual object \u003888015393411(
      \u003250925846196 _param1,
      Type _param2,
      object _param3,
      \u003131478599170 _param4)
    {
      if (_param1.\u003271751439454 == \u003293768301571.Null)
      {
        if (!\u003560732527318.\u003645351876055(_param2))
          throw \u003479281034910.\u003188723322269(_param1, "Cannot convert null value to {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param2));
        return (object) null;
      }
      byte[] numArray;
      if (_param1.\u003271751439454 == \u003293768301571.StartArray)
        numArray = this.\u003587155199752(_param1);
      else
        numArray = _param1.\u003271751439454 == \u003293768301571.String ? Convert.FromBase64String(_param1.\u003255783382022.ToString()) : throw \u003479281034910.\u003188723322269(_param1, "Unexpected token parsing binary. Expected String or StartArray, got {0}.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003271751439454));
      Type type = \u003560732527318.\u003876583190049(_param2) ? Nullable.GetUnderlyingType(_param2) : _param2;
      if (type.FullName == "System.Data.Linq.Binary")
      {
        \u003934418144270.\u003769916393103(type);
        return \u003934418144270.\u003896972704693.\u003922898233183(new object[1]
        {
          (object) numArray
        });
      }
      if (type == typeof (SqlBinary))
        return (object) new SqlBinary(numArray);
      throw \u003479281034910.\u003188723322269(_param1, "Unexpected object type when writing binary: {0}".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param2));
    }

    private byte[] \u003587155199752(\u003250925846196 _param1)
    {
      List<byte> byteList = new List<byte>();
      while (_param1.\u003776737810718())
      {
        switch (_param1.\u003271751439454)
        {
          case \u003293768301571.Comment:
            continue;
          case \u003293768301571.Integer:
            byteList.Add(Convert.ToByte(_param1.\u003255783382022, (IFormatProvider) CultureInfo.InvariantCulture));
            continue;
          case \u003293768301571.EndArray:
            return byteList.ToArray();
          default:
            throw \u003479281034910.\u003188723322269(_param1, "Unexpected token when reading bytes: {0}".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) _param1.\u003271751439454));
        }
      }
      throw \u003479281034910.\u003188723322269(_param1, "Unexpected end when reading bytes.");
    }

    public virtual bool \u003333426261716(Type _param1) => _param1.FullName == "System.Data.Linq.Binary" || _param1 == typeof (SqlBinary) || _param1 == typeof (SqlBinary?);
  }
}
