// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: Encod, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DCFB260-FACB-496A-9BC9-FA9701DCBF71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d5f77ba2b2ad58cfad5ae3111994ad0f889967e6d4f67ecb9cedf1b8f10a6149.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = 1803180910;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 410418369)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1238396488 ^ -1749734065;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1132928786 ^ 1768293889;
            continue;
          case 4:
            this.m_Node = aNode;
            this.m_Key = (string) null;
            num1 = (int) num2 * -1519895737 ^ -1616028959;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = -181815886;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -361329031)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1509378744 ^ 437212578;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.m_Node = aNode;
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
      bool flag = this.m_Key == null;
label_1:
      int num1 = -509594958;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1861956569)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 1543994405 ^ 1362558306;
            continue;
          case 1:
            num1 = (int) num2 * -593576015 ^ 1099103725;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 1736322315 ^ -514961036;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.m_Node = (JSONNode) null;
            num1 = -725801953;
            continue;
          case 6:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = -1021672639;
            continue;
          case 7:
            num1 = (int) num2 * 690191 ^ -1238734739;
            continue;
          case 8:
            num1 = (int) num2 * -1687041723 ^ 1938855970;
            continue;
          case 9:
            int num3 = flag ? -1348112197 : (num3 = -739821584);
            num1 = num3 ^ (int) num2 * 807969657;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -792376319;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1158180437)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -606066543 ^ -885815933;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1086501688;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 241396334)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              aVal = new JSONArray();
              num1 = (int) num2 * 775165408 ^ -1427250051;
              continue;
            case 3:
              aVal.Add(value);
              num1 = (int) num2 * 1350228358 ^ -56661499;
              continue;
            case 4:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1152945338 ^ 625994061;
              continue;
            case 5:
              num1 = (int) num2 * 1734136708 ^ 1532171668;
              continue;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get
      {
        JSONNode jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
label_1:
        int num1 = 929489523;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 783081030)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 1944386417 ^ 1656032818;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
        JSONClass aVal = new JSONClass();
        aVal.Add(aKey, value);
label_1:
        int num1 = -2070024843;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -746408878)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = (int) num2 * -1427802217 ^ 950281863;
              continue;
            case 2:
              num1 = (int) num2 * 2047536543 ^ -1268936748;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1033570696 ^ 473515386;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override void Add(JSONNode aItem)
    {
label_1:
      int num1 = -1602392739;
      JSONArray aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -688675885)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 2027262214 ^ 1821625358;
            continue;
          case 2:
            num1 = (int) num2 * -1543607243 ^ 1177294222;
            continue;
          case 3:
            aVal = new JSONArray();
            aVal.Add(aItem);
            num1 = (int) num2 * -1890419675 ^ 1951798283;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 1807903890;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1299924239)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            aVal = new JSONClass();
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * 775353475 ^ 1076747066;
            continue;
          case 2:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -2048494238 ^ -1278091172;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = -235157607;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -654017164)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            flag2 = true;
            num1 = (int) num2 * 1280546420 ^ 1053726858;
            continue;
          case 2:
            flag2 = (object) a == b;
            num1 = -1215572111;
            continue;
          case 4:
            num1 = (int) num2 * 272740626 ^ 341460717;
            continue;
          case 5:
            flag1 = b == null;
            num1 = (int) num2 * -1545651127 ^ -1904439616;
            continue;
          case 6:
            int num3 = flag1 ? 1249156296 : (num3 = 345688840);
            num1 = num3 ^ (int) num2 * -971037356;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return flag2;
    }

    public static bool operator !=(JSONLazyCreator a, object b) => !(a == b);

    public override bool Equals(object obj)
    {
      if (obj != null)
        goto label_4;
label_1:
      int num1 = -1143899356;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -25454755)) % 5U)
        {
          case 0:
            goto label_4;
          case 1:
            flag = true;
            num1 = (int) num2 * 464654872 ^ 1747138325;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1959466105 ^ -966956618;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return flag;
label_4:
      flag = (object) this == obj;
      num1 = -1550449370;
      goto label_2;
    }

    public override int GetHashCode()
    {
      int hashCode = base.GetHashCode();
label_1:
      int num1 = 1255262941;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1108122007)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1024897884 ^ 144419177;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
      string str = "";
label_1:
      int num1 = -2056664987;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2012908359)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 752767385 ^ -61551013;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override string ToString(string aPrefix)
    {
      string str = "";
label_1:
      int num1 = 897028096;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1412824425)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -1228677808 ^ -1899555157;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    public override int AsInt
    {
      get
      {
        this.Set((JSONNode) new JSONData(0));
label_1:
        int num1 = -846409;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -584406304)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              asInt = 0;
              num1 = (int) num2 * 348925606 ^ 709195039;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return asInt;
      }
      set
      {
label_1:
        int num1 = 157185658;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1545937399)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -1237984895 ^ -439816781;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = -421131881;
        JSONData aVal;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1166411593)) % 6U)
          {
            case 0:
              num1 = (int) num2 * 769239223 ^ 1561533856;
              continue;
            case 2:
              aVal = new JSONData(0.0f);
              num1 = (int) num2 * 1899746350 ^ 466219670;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -406500789 ^ 589614349;
              continue;
            case 4:
              goto label_1;
            case 5:
              asFloat = 0.0f;
              num1 = (int) num2 * -1212099122 ^ -181594097;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = -1126843312;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -584911651)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 1922930988 ^ 973802731;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override double AsDouble
    {
      get
      {
label_1:
        int num1 = -1953963991;
        double asDouble;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1076666464)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(0.0);
              num1 = (int) num2 * 1480852940 ^ -278280696;
              continue;
            case 2:
              asDouble = 0.0;
              num1 = (int) num2 * -1516988209 ^ 1800896538;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1521972903 ^ 146964408;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = -1606089010;
        JSONData aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1702739588)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              aVal = new JSONData(value);
              num1 = (int) num2 * -616396660 ^ 1061751066;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1171993638 ^ 1155294018;
              continue;
            case 3:
              num1 = (int) num2 * -1453408040 ^ -39002521;
              continue;
            case 4:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public override bool AsBool
    {
      get
      {
label_1:
        int num1 = 150229713;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 563076383)) % 4U)
          {
            case 1:
              num1 = (int) num2 * 222898331 ^ 160146740;
              continue;
            case 2:
              this.Set((JSONNode) new JSONData(false));
              asBool = false;
              num1 = (int) num2 * 370695934 ^ -1899358438;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return asBool;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override JSONArray AsArray
    {
      get
      {
label_1:
        int num1 = -201352433;
        JSONArray aVal;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -128229982)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1772018564 ^ 765508150;
              continue;
            case 2:
              asArray = aVal;
              num1 = (int) num2 * 209362210 ^ -1520584853;
              continue;
            case 3:
              aVal = new JSONArray();
              num1 = (int) num2 * -1352762138 ^ -1430712211;
              continue;
            case 4:
              num1 = (int) num2 * -714372914 ^ -1484690988;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
        this.Set((JSONNode) aVal);
label_1:
        int num1 = -778927330;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -884169153)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -297310322 ^ -310957633;
              continue;
            case 2:
              asObject = aVal;
              num1 = (int) num2 * -1903757065 ^ -1910288258;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asObject;
      }
    }
  }
}
