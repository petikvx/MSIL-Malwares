// Decompiled with JetBrains decompiler
// Type: dotXMLToolsWPF.W2d.Opcodes.DrawPolymarkerShort
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace dotXMLToolsWPF.W2d.Opcodes
{
  public struct DrawPolymarkerShort : IOpcode
  {
    public static readonly byte Id = 141;
    public readonly Point[] Points;

    public DrawPolymarkerShort(IEnumerable<Point> points)
      : this()
    {
      this.Points = points.ToArray<Point>();
    }

    public CoordinatesType CoordinatesType => CoordinatesType.Relative;

    public class Factory : OpcodeFactory, ISingleByteOpcodeFactory
    {
      public int OpcodeId => (int) DrawPolymarkerShort.Id;

      public override IOpcode ReadOpcode(Stream stream)
      {
        int length = (int) OpcodeFactory.ReadUnsignedByte(stream);
        if (length == 0)
          length = 256 + (int) OpcodeFactory.ReadUnsignedShort(stream);
        Point[] pointArray = new Point[length];
        for (int index = 0; index < length; ++index)
        {
          short x = OpcodeFactory.ReadSignedShort(stream);
          short y = OpcodeFactory.ReadSignedShort(stream);
          pointArray[index] = new Point((long) x, (long) y);
        }
        return (IOpcode) new DrawPolymarkerShort((IEnumerable<Point>) pointArray);
      }
    }
  }
}
