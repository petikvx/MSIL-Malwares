// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.IconFile
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public class IconFile
  {
    private Kernel32.FILEGRPICONDIR BlRjJ94Qy;
    private List<IconFileIcon> rLtAxnOgO;

    public IconFile.GroupType Type
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => (IconFile.GroupType) this.BlRjJ94Qy.wType;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.BlRjJ94Qy.wType = (ushort) (byte) value;
    }

    public List<IconFileIcon> Icons
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.rLtAxnOgO;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.rLtAxnOgO = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IconFile(string filename)
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this.BlRjJ94Qy = new Kernel32.FILEGRPICONDIR();
      this.rLtAxnOgO = new List<IconFileIcon>();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.LoadFrom(filename);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoadFrom(string filename)
    {
      byte[] source = File.ReadAllBytes(filename);
      IntPtr num = Marshal.AllocHGlobal(source.Length);
      try
      {
        Marshal.Copy(source, 0, num, source.Length);
        this.Read(num);
      }
      finally
      {
        Marshal.FreeHGlobal(num);
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IntPtr Read(IntPtr lpData)
    {
      this.rLtAxnOgO.Clear();
      this.BlRjJ94Qy = (Kernel32.FILEGRPICONDIR) Marshal.PtrToStructure(lpData, typeof (Kernel32.FILEGRPICONDIR));
      IntPtr lpData1 = new IntPtr(lpData.ToInt32() + Marshal.SizeOf((object) this.BlRjJ94Qy));
      for (int index = 0; index < (int) this.BlRjJ94Qy.wCount; ++index)
      {
        IconFileIcon iconFileIcon = new IconFileIcon();
        lpData1 = iconFileIcon.Read(lpData1, lpData);
        this.rLtAxnOgO.Add(iconFileIcon);
      }
      return lpData1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public GroupIconResource ConvertToGroupIconResource()
    {
      GroupIconResource groupIconResource = new GroupIconResource();
      switch (this.Type)
      {
        case IconFile.GroupType.Icon:
          groupIconResource.GroupIconResourceType = GroupIconResource.GroupType.Icon;
          break;
        case IconFile.GroupType.Cursor:
          groupIconResource.GroupIconResourceType = GroupIconResource.GroupType.Cursor;
          break;
      }
      for (int index = 0; index < this.Icons.Count; ++index)
      {
        IconResource iconResource = this.Icons[index].ConvertToIconResource((ushort) index);
        groupIconResource.Icons.Add(iconResource);
      }
      return groupIconResource;
    }

    public enum GroupType
    {
      Icon = 1,
      Cursor = 2,
    }
  }
}
