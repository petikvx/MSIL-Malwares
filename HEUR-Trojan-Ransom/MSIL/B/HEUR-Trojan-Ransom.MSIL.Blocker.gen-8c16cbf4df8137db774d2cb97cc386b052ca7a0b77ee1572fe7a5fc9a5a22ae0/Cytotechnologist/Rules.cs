// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: SZGenericArrayEnumerat, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E834FD24-872B-47C0-BFE1-9B14E3D5CFBB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-8c16cbf4df8137db774d2cb97cc386b052ca7a0b77ee1572fe7a5fc9a5a22ae0.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      Rules rules = new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
label_1:
      int num1 = -839379342;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1137312820)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1313744573 ^ 1928632232;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1674452273;
      float[] riskChances;
      bool flag;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 480148499)) % 10U)
        {
          case 0:
            ++aIndex;
            num1 = (int) num2 * 1764346874 ^ -1784918638;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag = aIndex < numArray.Length;
            num1 = 1556968134;
            continue;
          case 4:
            num1 = (int) num2 * -2005232881 ^ -1606725238;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * 1347136139 ^ 222310969;
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 233526933;
            continue;
          case 7:
            num1 = (int) num2 * 186301693 ^ -1777480081;
            continue;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * -1475394260 ^ -1214093001;
            continue;
          case 9:
            int num3 = flag ? 2145449556 : (num3 = 1544173439);
            num1 = num3 ^ (int) num2 * 1302775095;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = 19932116;
      bool flag1;
      int aIndex1;
      int num2;
      bool flag2;
      int aIndex2;
      bool flag3;
      JSONNode jsonNode;
      List<Card> cardList;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 199152045)) % 25U)
        {
          case 0:
            num1 = (int) num3 * 747061427 ^ 1611115979;
            continue;
          case 1:
            cardList = new List<Card>();
            num1 = (int) num3 * 1301676950 ^ -932260530;
            continue;
          case 2:
            num1 = (int) num3 * 1497561995 ^ -901636108;
            continue;
          case 3:
            num1 = 286731524;
            continue;
          case 4:
            jsonNode = json[aIndex1];
            num1 = 415427637;
            continue;
          case 5:
            aIndex2 = 0;
            num1 = (int) num3 * -1205640239 ^ 736161913;
            continue;
          case 6:
            ++aIndex1;
            num1 = (int) num3 * -2102258452 ^ -1106001792;
            continue;
          case 7:
            ++num2;
            num1 = (int) num3 * 1366060864 ^ 1936990418;
            continue;
          case 8:
            num2 = 0;
            num1 = (int) num3 * 2014640670 ^ 2133884000;
            continue;
          case 9:
            int num4 = !flag1 ? -306960936 : (num4 = -1103883324);
            num1 = num4 ^ (int) num3 * 1244542805;
            continue;
          case 10:
            flag3 = aIndex2 < maxImpact * 2;
            num1 = 1591546915;
            continue;
          case 11:
            num1 = (int) num3 * -1939299163 ^ -1492463459;
            continue;
          case 12:
            goto label_1;
          case 13:
            int num5 = !flag2 ? -1249698708 : (num5 = -597938456);
            num1 = num5 ^ (int) num3 * -459062408;
            continue;
          case 14:
            num1 = (int) num3 * 1175405201 ^ 225582168;
            continue;
          case 15:
            ++aIndex2;
            num1 = (int) num3 * -1304606000 ^ -579462876;
            continue;
          case 16:
            num1 = (int) num3 * 1220069399 ^ 928392487;
            continue;
          case 17:
            int num6 = flag3 ? 1816907170 : (num6 = 1979201661);
            num1 = num6 ^ (int) num3 * 1798293355;
            continue;
          case 18:
            bool flag4 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag4 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 1840674987;
            continue;
          case 19:
            array = cardList.ToArray();
            num1 = (int) num3 * 821223776 ^ 351810353;
            continue;
          case 20:
            flag1 = num2 < jsonNode[aIndex2].AsInt;
            num1 = 976567979;
            continue;
          case 21:
            num1 = (int) num3 * 405940384 ^ -902923551;
            continue;
          case 22:
            aIndex1 = 0;
            num1 = (int) num3 * 917995433 ^ -489512315;
            continue;
          case 24:
            flag2 = aIndex1 < count;
            num1 = 2104864002;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 2000367531;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 516102000)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -166828664 ^ -716762214;
            continue;
          case 3:
            str = Rules.\u206A⁭⁮⁫⁯⁭⁯⁪‬⁭‍​‌‌⁫⁭​‪⁭‭⁭⁮‫‌‪⁯‪‌⁫‏⁬⁯‫‬‌‮⁫⁫⁭⁭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 59705778 ^ -1465774537;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -961378365;
      string str1;
      string str2;
      bool flag;
      int index;
      Card[] cards;
      Card card1;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -715041213)) % 18U)
        {
          case 0:
            num1 = (int) num3 * 1242869757 ^ -1709246799;
            continue;
          case 1:
            cards = this.Cards;
            num1 = (int) num3 * 1715553014 ^ 833817516;
            continue;
          case 2:
            num1 = (int) num3 * -1226587701 ^ 1730799694;
            continue;
          case 3:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206B‪⁫‏‎‫‌‌‏⁮‮⁪‌⁬​⁫‎‪⁯⁭⁪‮⁬‫⁮⁪‏⁫⁪⁬‫⁭‌‌‍‏⁮‮⁬⁪‮((object) card2) : (string) null;
            str1 = Rules.\u200E‮⁯‮‌‎‎​‌‌‌‪‏⁮⁭‪‬‏‍‎‎‫⁮‏‫⁬⁭‍‌‌‎‮‏​‫‮⁫⁯‬⁬‮(str3, str4, " ");
            num1 = -831660365;
            continue;
          case 4:
            ++index;
            num1 = (int) num3 * 89506697 ^ -538582652;
            continue;
          case 5:
            num2 = card1.Type;
            num1 = (int) num3 * 2143570988 ^ 1198462134;
            continue;
          case 6:
            num1 = (int) num3 * -1687156975 ^ 1358768624;
            continue;
          case 7:
            int num4;
            num1 = num4 = index >= cards.Length ? -1668859350 : (num4 = -596277541);
            continue;
          case 8:
            card1 = cards[index];
            num1 = -1812667192;
            continue;
          case 10:
            num1 = (int) num3 * -479336214 ^ -2111319290;
            continue;
          case 11:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 879957834 ^ -430447397;
            continue;
          case 12:
            str1 = "[\n\t";
            num2 = 0;
            num1 = (int) num3 * -338078008 ^ 1138508135;
            continue;
          case 13:
            index = 0;
            num1 = (int) num3 * 915529414 ^ -1263970271;
            continue;
          case 14:
            str1 = Rules.\u206F​‌‭‭​‌‌‌‭‬‮‪‮​⁫​‪⁮⁫‫⁪⁮‪⁮‮‍​‌​‎⁪‬‍‭‬‬‮⁬⁯‮(str1, "\n\t");
            num1 = (int) num3 * 1345097112 ^ 2114429184;
            continue;
          case 15:
            str2 = Rules.\u206F​‌‭‭​‌‌‌‭‬‮‪‮​⁫​‪⁮⁫‫⁪⁮‪⁮‮‍​‌​‎⁪‬‍‭‬‬‮⁬⁯‮(str1, "\n]");
            num1 = (int) num3 * 1589711274 ^ 1094022399;
            continue;
          case 16:
            int num5 = flag ? -1725880195 : (num5 = -1941108434);
            num1 = num5 ^ (int) num3 * -1754032374;
            continue;
          case 17:
            goto label_1;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1235322514;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 704376162)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            str2 = Rules.\u206F​‌‭‭​‌‌‌‭‬‮‪‮​⁫​‪⁮⁫‫⁪⁮‪⁮‮‍​‌​‎⁪‬‍‭‬‬‮⁬⁯‮(str1, " ]");
            num1 = (int) num2 * -1470711117 ^ 528880324;
            continue;
          case 2:
            num1 = (int) num2 * -1204004392 ^ -631699838;
            continue;
          case 3:
            str1 = Rules.\u200E‮⁯‮‌‎‎​‌‌‌‪‏⁮⁭‪‬‏‍‎‎‫⁮‏‫⁬⁭‍‌‌‎‮‏​‫‮⁫⁯‬⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202C‮‪‭‪⁯⁭‌‍⁬⁫‎⁬⁫‎‍⁪‍⁪‎‬⁭‍‏‎‪⁬‍‎‌‬‎‫​‍‎⁪‎⁫⁫‮()));
            num1 = 586406733;
            continue;
          case 4:
            num1 = (int) num2 * -1325925839 ^ -391358969;
            continue;
          case 6:
            ++index;
            num1 = (int) num2 * -142739153 ^ -1015323202;
            continue;
          case 7:
            int num3;
            num1 = num3 = index < this.RiskChances.Length ? 456071326 : (num3 = 60771917);
            continue;
          case 8:
            str1 = Rules.\u206F​‌‭‭​‌‌‌‭‬‮‪‮​⁫​‪⁮⁫‫⁪⁮‪⁮‮‍​‌​‎⁪‬‍‭‬‬‮⁬⁯‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202C‮‪‭‪⁯⁭‌‍⁬⁫‎⁬⁫‎‍⁪‍⁪‎‬⁭‍‏‎‪⁬‍‎‌‬‎‫​‍‎⁪‎⁫⁫‮()));
            index = 1;
            num1 = (int) num2 * -717075103 ^ 1369597194;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u206A⁭⁮⁫⁯⁭⁯⁪‬⁭‍​‌‌⁫⁭​‪⁭‭⁭⁮‫‌‪⁯‪‌⁫‏⁬⁯‫‬‌‮⁫⁫⁭⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206F​‌‭‭​‌‌‌‭‬‮‪‮​⁫​‪⁮⁫‫⁪⁮‪⁮‮‍​‌​‎⁪‬‍‭‬‬‮⁬⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206B‪⁫‏‎‫‌‌‏⁮‮⁪‌⁬​⁫‎‪⁯⁭⁪‮⁬‫⁮⁪‏⁫⁪⁬‫⁭‌‌‍‏⁮‮⁬⁪‮([In] object obj0) => obj0.ToString();

    static string \u200E‮⁯‮‌‎‎​‌‌‌‪‏⁮⁭‪‬‏‍‎‎‫⁮‏‫⁬⁭‍‌‌‎‮‏​‫‮⁫⁯‬⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202C‮‪‭‪⁯⁭‌‍⁬⁫‎⁬⁫‎‍⁪‍⁪‎‬⁭‍‏‎‪⁬‍‎‌‬‎‫​‍‎⁪‎⁫⁫‮() => CultureInfo.InvariantCulture;
  }
}
