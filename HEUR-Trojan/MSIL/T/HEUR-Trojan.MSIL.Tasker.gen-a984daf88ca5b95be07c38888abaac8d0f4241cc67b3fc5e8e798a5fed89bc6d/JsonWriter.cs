// Decompiled with JetBrains decompiler
// Type: JsonWriter
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;

public sealed class JsonWriter
{
  private int indent;
  private bool isNewLine;
  private HashSet<IEnumerable<JsonValue>> renderingCollections;

  public string IndentString { get; set; }

  public string SpacingString { get; set; }

  public string NewLineString { get; set; }

  public bool SortObjects { get; set; }

  public TextWriter InnerWriter { get; set; }

  public JsonWriter(TextWriter innerWriter)
    : this(innerWriter, false)
  {
  }

  public JsonWriter(TextWriter innerWriter, bool pretty)
  {
    if (pretty)
    {
      this.IndentString = "\t";
      this.SpacingString = " ";
      this.NewLineString = "\n";
    }
    this.renderingCollections = new HashSet<IEnumerable<JsonValue>>();
    this.InnerWriter = innerWriter;
  }

  private void Write(string text)
  {
    if (this.isNewLine)
    {
      this.isNewLine = false;
      this.WriteIndentation();
    }
    this.InnerWriter.Write(text);
  }

  private void WriteEncodedJsonValue(JsonValue value)
  {
    switch (value.Type)
    {
      case JsonValueType.Null:
        this.Write("null");
        break;
      case JsonValueType.Boolean:
        this.Write(value.AsString);
        break;
      case JsonValueType.Number:
        if (!JsonWriter.IsValidNumber((double) value))
          throw new JsonSerializationException(JsonSerializationException.ErrorType.InvalidNumber);
        this.Write(((double) value).ToString((IFormatProvider) CultureInfo.InvariantCulture));
        break;
      case JsonValueType.String:
        this.WriteEncodedString((string) value);
        break;
      case JsonValueType.Object:
        this.Write(string.Format("JsonObject[{0}]", (object) value.AsJsonObject.Count));
        break;
      case JsonValueType.Array:
        this.Write(string.Format("JsonArray[{0}]", (object) value.AsJsonArray.Count));
        break;
      default:
        throw new InvalidOperationException("Invalid value type.");
    }
  }

  private void WriteEncodedString(string text)
  {
    this.Write("\"");
    foreach (char ch in text)
    {
      switch (ch)
      {
        case '\b':
          this.InnerWriter.Write("\\b");
          break;
        case '\t':
          this.InnerWriter.Write("\\t");
          break;
        case '\n':
          this.InnerWriter.Write("\\n");
          break;
        case '\f':
          this.InnerWriter.Write("\\f");
          break;
        case '\r':
          this.InnerWriter.Write("\\r");
          break;
        case '"':
          this.InnerWriter.Write("\\\"");
          break;
        case '/':
          this.InnerWriter.Write("\\/");
          break;
        case '\\':
          this.InnerWriter.Write("\\\\");
          break;
        default:
          this.InnerWriter.Write(ch);
          break;
      }
    }
    this.InnerWriter.Write("\"");
  }

  private void WriteIndentation()
  {
    for (int index = 0; index < this.indent; ++index)
      this.Write(this.IndentString);
  }

  private void WriteSpacing() => this.Write(this.SpacingString);

  private void WriteLine()
  {
    this.Write(this.NewLineString);
    this.isNewLine = true;
  }

  private void WriteLine(string line)
  {
    this.Write(line);
    this.WriteLine();
  }

  private void AddRenderingCollection(IEnumerable<JsonValue> value)
  {
    if (!this.renderingCollections.Add(value))
      throw new JsonSerializationException(JsonSerializationException.ErrorType.CircularReference);
  }

  private void RemoveRenderingCollection(IEnumerable<JsonValue> value) => this.renderingCollections.Remove(value);

  private void Render(JsonValue value)
  {
    switch (value.Type)
    {
      case JsonValueType.Null:
      case JsonValueType.Boolean:
      case JsonValueType.Number:
      case JsonValueType.String:
        this.WriteEncodedJsonValue(value);
        break;
      case JsonValueType.Object:
        this.Render((JsonObject) value);
        break;
      case JsonValueType.Array:
        this.Render((JsonArray) value);
        break;
      default:
        throw new JsonSerializationException(JsonSerializationException.ErrorType.InvalidValueType);
    }
  }

  private void Render(JsonArray value)
  {
    this.AddRenderingCollection((IEnumerable<JsonValue>) value);
    this.WriteLine("[");
    ++this.indent;
    using (IEnumerator<JsonValue> enumerator = value.GetEnumerator())
    {
      bool flag = enumerator.MoveNext();
      while (flag)
      {
        this.Render(enumerator.Current);
        flag = enumerator.MoveNext();
        if (flag)
          this.WriteLine(",");
        else
          this.WriteLine();
      }
    }
    --this.indent;
    this.Write("]");
    this.RemoveRenderingCollection((IEnumerable<JsonValue>) value);
  }

  private void Render(JsonObject value)
  {
    this.AddRenderingCollection((IEnumerable<JsonValue>) value);
    this.WriteLine("{");
    ++this.indent;
    using (IEnumerator<KeyValuePair<string, JsonValue>> objectEnumerator = this.GetJsonObjectEnumerator(value))
    {
      bool flag = objectEnumerator.MoveNext();
      while (flag)
      {
        this.WriteEncodedString(objectEnumerator.Current.Key);
        this.Write(":");
        this.WriteSpacing();
        this.Render(objectEnumerator.Current.Value);
        flag = objectEnumerator.MoveNext();
        if (flag)
          this.WriteLine(",");
        else
          this.WriteLine();
      }
    }
    --this.indent;
    this.Write("}");
    this.RemoveRenderingCollection((IEnumerable<JsonValue>) value);
  }

  private IEnumerator<KeyValuePair<string, JsonValue>> GetJsonObjectEnumerator(
    JsonObject jsonObject)
  {
    if (!this.SortObjects)
      return jsonObject.GetEnumerator();
    SortedDictionary<string, JsonValue> sortedDictionary = new SortedDictionary<string, JsonValue>((IComparer<string>) StringComparer.Ordinal);
    foreach (KeyValuePair<string, JsonValue> keyValuePair in jsonObject)
      sortedDictionary.Add(keyValuePair.Key, keyValuePair.Value);
    return (IEnumerator<KeyValuePair<string, JsonValue>>) sortedDictionary.GetEnumerator();
  }

  public void Write(JsonValue jsonValue)
  {
    this.indent = 0;
    this.isNewLine = true;
    this.Render(jsonValue);
    this.renderingCollections.Clear();
  }

  private static bool IsValidNumber(double number) => !double.IsNaN(number) && !double.IsInfinity(number);

  public static string Serialize(JsonValue value) => JsonWriter.Serialize(value, false);

  public static string Serialize(JsonValue value, bool pretty)
  {
    using (StringWriter innerWriter = new StringWriter())
    {
      new JsonWriter((TextWriter) innerWriter, pretty).Write(value);
      return innerWriter.ToString();
    }
  }
}
