// Decompiled with JetBrains decompiler
// Type: FileLocker.AVProgressBar
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class AVProgressBar : Control
  {
    private static List<WeakReference> __ENCList;
    private int _Value;
    private int _Thickness;
    private int _Angle;
    private string _Symbol;

    [DebuggerNonUserCode]
    static AVProgressBar()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AVProgressBar.__ENCList = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (AVProgressBar.__ENCList)
      {
        if (AVProgressBar.__ENCList.Count == AVProgressBar.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (AVProgressBar.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (AVProgressBar.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                AVProgressBar.__ENCList[index1] = AVProgressBar.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          AVProgressBar.__ENCList.RemoveRange(index1, checked (AVProgressBar.__ENCList.Count - index1));
          AVProgressBar.__ENCList.Capacity = AVProgressBar.__ENCList.Count;
        }
        AVProgressBar.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    public AVProgressBar()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AVProgressBar.__ENCAddToList((object) this);
      this._Value = 50;
      this._Thickness = 5;
      this._Angle = 0;
      this._Symbol = "%";
      this.Size = new Size(65, 65);
      this.Invalidate();
    }

    public int Angle
    {
      get => this._Angle;
      set
      {
        this._Angle = value;
        this.Invalidate();
      }
    }

    public string Symbol
    {
      get => this._Symbol;
      set
      {
        this._Symbol = value;
        this.Invalidate();
      }
    }

    public int Thickness
    {
      get => this._Thickness;
      set
      {
        this._Thickness = value;
        this.Invalidate();
      }
    }

    protected override void OnPaintBackground(PaintEventArgs pevent)
    {
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      this.Width = this.Height;
      using (Bitmap bitmap = new Bitmap(this.Width, this.Height))
      {
        using (Graphics graphics = Graphics.FromImage((Image) bitmap))
        {
          graphics.SmoothingMode = SmoothingMode.AntiAlias;
          graphics.Clear(this.BackColor);
          using (LinearGradientBrush linearGradientBrush = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(217, 217, 217), Color.FromArgb(217, 217, 217), LinearGradientMode.Vertical))
          {
            using (Pen pen = new Pen((Brush) linearGradientBrush, (float) checked (this.Thickness + 3)))
              graphics.DrawArc(pen, checked ((int) Math.Round(unchecked ((double) this.Thickness / 2.0)) + 2), checked ((int) Math.Round(unchecked ((double) this.Thickness / 2.0)) + 2), checked (this.Width - this.Thickness - 4), checked (this.Height - this.Thickness - 4), -90, 360);
          }
          using (LinearGradientBrush linearGradientBrush = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(0, 166, 208), Color.FromArgb(0, 166, 208), LinearGradientMode.Vertical))
          {
            using (Pen pen = new Pen((Brush) linearGradientBrush, (float) checked (this.Thickness + 3)))
              graphics.DrawArc(pen, checked ((int) Math.Round(unchecked ((double) this.Thickness / 2.0)) + 9), checked ((int) Math.Round(unchecked ((double) this.Thickness / 2.0)) + 9), checked (this.Width - this.Thickness - 18), checked (this.Height - this.Thickness - 18), -90, 360);
          }
          using (LinearGradientBrush linearGradientBrush = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue), Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue), LinearGradientMode.Vertical))
          {
            using (Pen pen = new Pen((Brush) linearGradientBrush, (float) checked (this.Thickness - 2)))
            {
              int sweepAngle = checked ((int) Math.Round(unchecked (3.6 * (double) this._Value)));
              graphics.DrawArc(pen, checked ((int) Math.Round(unchecked ((double) this.Thickness / 2.0)) + 9), checked ((int) Math.Round(unchecked ((double) this.Thickness / 2.0)) + 9), checked (this.Width - this.Thickness - 18), checked (this.Height - this.Thickness - 18), -90, sweepAngle);
            }
          }
          graphics.DrawString(Conversions.ToString(this._Value) + this._Symbol, new Font("Arial", 13f), Brushes.Black, (PointF) new Point(checked ((int) Math.Round(unchecked ((double) this.Width / 2.0 - (double) graphics.MeasureString(Conversions.ToString(this._Value) + this._Symbol, new Font("Arial", 13f)).Width / 2.0 + 1.0))), checked ((int) Math.Round(unchecked ((double) this.Height / 2.0 - (double) graphics.MeasureString(Conversions.ToString(this._Value) + "%", new Font("Arial", 13f)).Height / 2.0 + 1.0)))));
        }
        e.Graphics.DrawImage((Image) bitmap, 0, 0);
      }
    }
  }
}
