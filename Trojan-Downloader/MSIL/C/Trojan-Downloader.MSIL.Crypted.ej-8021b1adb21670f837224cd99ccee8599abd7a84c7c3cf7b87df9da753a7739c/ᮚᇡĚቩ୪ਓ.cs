// Decompiled with JetBrains decompiler
// Type: ᥟޱഁेࠃᵷᣚ.ᮚᇡĚቩ୪ਓ
// Assembly: lgy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F6858297-EDCC-46A7-BF64-CBC6BE6B3CD4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\Trojan-Downloader.MSIL.Crypted.ej-8021b1adb21670f837224cd99ccee8599abd7a84c7c3cf7b87df9da753a7739c.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

namespace ᥟޱഁेࠃᵷᣚ
{
  public class ᮚᇡĚቩ୪ਓ : IDisposable
  {
    private const int ݕዃਐ॔\u1CB1ğᵹህ\u05F7 = 1;
    private const int \u0A42s\u1B4Eᢘʧêሳ = 16;
    private const int Дᷨཝ\u0CFBᣵף = 131072;
    private static readonly IntPtr \u106Cᄀඞᘂ႗ᛵṋ = new IntPtr(int.MinValue);
    private static readonly IntPtr \u1DCDɮන\u109E\u0FE2ᠧभ\u0B98\u1718 = new IntPtr(-2147483647);
    private static readonly IntPtr Ǐ = new IntPtr(-2147483646);
    private static readonly IntPtr Ҩ\u1AD3 = new IntPtr(-2147483645);
    private static readonly IntPtr ᰃɅ\u1CB1 = new IntPtr(-2147483644);
    private static readonly IntPtr ᗙۅ\u0F1Eᦚ = new IntPtr(-2147483643);
    private static readonly IntPtr Эᅕ\u0C45ཟ\u0FDBᭃᒟá = new IntPtr(-2147483642);
    private IntPtr ᜦªኖᓘ;
    private string ლᎼጦ;
    private object \u0872ᔥຮࠓ = new object();
    private Thread \u0C71᷌\u0BE2ᤎ\u1AFDᬕ;
    private ManualResetEvent î\u1941ßᵑ = new ManualResetEvent(false);
    private ณถR̚ ߍᇹ᩠ต\u1AF2Ꮅ = ณถR̚.ᮯḇᘷڨᆶᛇᖋ | ณถR̚.ǃ\u1806ᶆ | ณถR̚.ů᜔ᣪᇼ | ณถR̚.Ἄᑶᇠ;

    public ᮚᇡĚቩ୪ਓ(RegistryKey registryKey) => this.\u0825K့ڤᒣᦍ\u1C39\u0008(registryKey.Name);

    public ᮚᇡĚቩ୪ਓ(string name) => this.\u0825K့ڤᒣᦍ\u1C39\u0008(name);

    public ᮚᇡĚቩ୪ਓ(RegistryHive registryHive, string subKey) => this.\u1BF2ᓟᡬ\u000A\u0E4Fૢ(registryHive, subKey);

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyEx", SetLastError = true)]
    private static extern int \u0A04ᷙԄ᱖ᣯ૧\u19ED(
      IntPtr _param0,
      string ᬩʰᏥത,
      uint _param2,
      int _param3,
      out IntPtr _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegNotifyChangeKeyValue", SetLastError = true)]
    private static extern int \u06EAỊך᪵ᏀႴ൧(
      IntPtr _param0,
      bool པᗸᶩ᷄ᶆ,
      ณถR̚ _param2,
      IntPtr _param3,
      bool ÊഏᎯᙴᐾ̦ช);

    [DllImport("advapi32.dll", EntryPoint = "RegCloseKey", SetLastError = true)]
    private static extern int ṕҺᭈ\u0A7AᆱĊ(IntPtr _param0);

    public event EventHandler \u0E69ǧ\u0382᷿ᚬܮṁ;

    protected virtual void OnRegChanged()
    {
      EventHandler ψᘩᐶ = this.ψ\u1CC1ᘩᐶ;
      if (ψᘩᐶ == null)
        return;
      ψᘩᐶ((object) this, (EventArgs) null);
    }

    public event ErrorEventHandler ŹᏄ\u02C4;

    protected virtual void OnError(Exception e)
    {
    }

    public void Dispose()
    {
      this.ᶏ\u0FD1гᵒ();
      GC.SuppressFinalize((object) this);
    }

    public ณถR̚ ᖘ੍\u09D2\u09DE߁ᦦཻԛ
    {
      get => this.ߍᇹ᩠ต\u1AF2Ꮅ;
      set
      {
        lock (this.\u0872ᔥຮࠓ)
          this.ߍᇹ᩠ต\u1AF2Ꮅ = value;
      }
    }

    private void \u1BF2ᓟᡬ\u000A\u0E4Fૢ(RegistryHive _param1, string _param2)
    {
      switch (_param1)
      {
        case RegistryHive.ClassesRoot:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.\u106Cᄀඞᘂ႗ᛵṋ;
          break;
        case RegistryHive.CurrentUser:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.\u1DCDɮන\u109E\u0FE2ᠧभ\u0B98\u1718;
          break;
        case RegistryHive.LocalMachine:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.Ǐ;
          break;
        case RegistryHive.Users:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.Ҩ\u1AD3;
          break;
        case RegistryHive.PerformanceData:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.ᰃɅ\u1CB1;
          break;
        case RegistryHive.CurrentConfig:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.ᗙۅ\u0F1Eᦚ;
          break;
        case RegistryHive.DynData:
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.Эᅕ\u0C45ཟ\u0FDBᭃᒟá;
          break;
      }
      this.ლᎼጦ = _param2;
    }

    private void \u0825K့ڤᒣᦍ\u1C39\u0008(string _param1)
    {
      string[] strArray = _param1.Split('\\');
      switch (strArray[0])
      {
        case "HKEY_CLASSES_ROOT":
        case "HKCR":
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.\u106Cᄀඞᘂ႗ᛵṋ;
          break;
        case "HKEY_CURRENT_USER":
        case "HKCU":
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.\u1DCDɮන\u109E\u0FE2ᠧभ\u0B98\u1718;
          break;
        case "HKEY_LOCAL_MACHINE":
        case "HKLM":
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.Ǐ;
          break;
        case "HKEY_USERS":
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.Ҩ\u1AD3;
          break;
        case "HKEY_CURRENT_CONFIG":
          this.ᜦªኖᓘ = ᮚᇡĚቩ୪ਓ.ᗙۅ\u0F1Eᦚ;
          break;
        default:
          this.ᜦªኖᓘ = IntPtr.Zero;
          break;
      }
      this.ლᎼጦ = string.Join("\\", strArray, 1, strArray.Length - 1);
    }

    public bool ȧẫ̯ྤ\u0003\u19EDխ => this.\u0C71᷌\u0BE2ᤎ\u1AFDᬕ != null;

    public void ቐۂ()
    {
      lock (this.\u0872ᔥຮࠓ)
      {
        if (this.ȧẫ̯ྤ\u0003\u19EDխ)
          return;
        this.î\u1941ßᵑ.Reset();
        this.\u0C71᷌\u0BE2ᤎ\u1AFDᬕ = new Thread(new ThreadStart(this.ڗࠔ\u1ADDcᬗẕᔕ));
        this.\u0C71᷌\u0BE2ᤎ\u1AFDᬕ.IsBackground = true;
        this.\u0C71᷌\u0BE2ᤎ\u1AFDᬕ.Start();
      }
    }

    public void ᶏ\u0FD1гᵒ()
    {
      lock (this.\u0872ᔥຮࠓ)
      {
        Thread thread = this.\u0C71᷌\u0BE2ᤎ\u1AFDᬕ;
        if (thread == null)
          return;
        this.î\u1941ßᵑ.Set();
        thread.Join();
      }
    }

    private void ڗࠔ\u1ADDcᬗẕᔕ()
    {
      try
      {
        this.ᯍଇऎ෨ᡷᰓ۟\u002E\u066D();
      }
      catch (Exception ex)
      {
        this.OnError(ex);
      }
      this.\u0C71᷌\u0BE2ᤎ\u1AFDᬕ = (Thread) null;
    }

    private void ᯍଇऎ෨ᡷᰓ۟\u002E\u066D()
    {
      IntPtr num;
      int error1 = ᮚᇡĚቩ୪ਓ.\u0A04ᷙԄ᱖ᣯ૧\u19ED(this.ᜦªኖᓘ, this.ლᎼጦ, 0U, 131089, out num);
      if (error1 != 0)
        throw new Win32Exception(error1);
      try
      {
        AutoResetEvent autoResetEvent = new AutoResetEvent(false);
        WaitHandle[] waitHandles = new WaitHandle[2]
        {
          (WaitHandle) autoResetEvent,
          (WaitHandle) this.î\u1941ßᵑ
        };
        while (!this.î\u1941ßᵑ.WaitOne(0, true))
        {
          int error2 = ᮚᇡĚቩ୪ਓ.\u06EAỊך᪵ᏀႴ൧(num, true, this.ߍᇹ᩠ต\u1AF2Ꮅ, autoResetEvent.SafeWaitHandle.DangerousGetHandle(), true);
          if (error2 != 0)
            throw new Win32Exception(error2);
          if (WaitHandle.WaitAny(waitHandles) == 0)
            this.OnRegChanged();
        }
      }
      finally
      {
        if (num != IntPtr.Zero)
          ᮚᇡĚቩ୪ਓ.ṕҺᭈ\u0A7AᆱĊ(num);
      }
    }
  }
}
