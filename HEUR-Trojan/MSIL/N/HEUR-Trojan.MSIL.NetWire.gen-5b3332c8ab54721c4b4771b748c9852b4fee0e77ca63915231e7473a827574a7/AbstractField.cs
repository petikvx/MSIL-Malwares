// Decompiled with JetBrains decompiler
// Type: BoardGameBackend.AbstractField
// Assembly: DebuggableAttrib, Version=4.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 31857FCB-0B1B-4445-A158-C519E13994BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.NetWire.gen-5b3332c8ab54721c4b4771b748c9852b4fee0e77ca63915231e7473a827574a7.exe

using System.Collections.Generic;

namespace BoardGameBackend
{
  public abstract class AbstractField
  {
    public AbstractMatchfield Matchfield;

    public bool IsDoubleUseable { get; set; } = false;

    private List<AbstractPiece> Pieces { get; set; }

    public AbstractField() => this.Pieces = new List<AbstractPiece>();

    public bool HasFigureOn
    {
      get
      {
label_1:
        int num1 = -741874562;
        bool hasFigureOn;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -785706732)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              hasFigureOn = this.Pieces.Count > 0;
              num1 = -266540904;
              continue;
            case 3:
              hasFigureOn = false;
              num1 = (int) num2 * -2112493335 ^ 412669762;
              continue;
            case 4:
              int num3 = this.Pieces != null ? 770595245 : (num3 = 230701876);
              num1 = num3 ^ (int) num2 * -935326783;
              continue;
            default:
              goto label_6;
          }
        }
label_6:
        return hasFigureOn;
      }
    }

    public void SetPiece(AbstractPiece figure)
    {
      if (this.Pieces == null)
        return;
label_1:
      int num1 = -159131165;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -718083764)) % 8U)
        {
          case 0:
            this.Pieces.Clear();
            num1 = (int) num2 * -138350684 ^ 1153901034;
            continue;
          case 1:
            num1 = (int) num2 * -948971053 ^ -147765934;
            continue;
          case 2:
            this.Pieces.Add(figure);
            num1 = (int) num2 * -622231429 ^ -196906701;
            continue;
          case 3:
            goto label_10;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -2017590196 ^ -541415813;
            continue;
          case 6:
            num1 = (int) num2 * 1501648712 ^ 1737603542;
            continue;
          case 7:
            num1 = (int) num2 * 551044453 ^ 1427330183;
            continue;
          default:
            goto label_11;
        }
      }
label_10:
      return;
label_11:;
    }

    public void AddPiece(AbstractPiece figure)
    {
label_1:
      int num1 = -709797625;
      bool isDoubleUseable;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1331762946)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1940397995 ^ -179091945;
            continue;
          case 2:
            this.Pieces.Add(figure);
            num1 = (int) num2 * 887479588 ^ -1030804003;
            continue;
          case 3:
            int num3 = !isDoubleUseable ? 1978393400 : (num3 = 173640939);
            num1 = num3 ^ (int) num2 * -963850580;
            continue;
          case 4:
            isDoubleUseable = this.IsDoubleUseable;
            num1 = (int) num2 * 640248726 ^ 532075440;
            continue;
          case 5:
            num1 = (int) num2 * -1288180683 ^ -1237880374;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public AbstractPiece GetPiece()
    {
label_1:
      int num1 = -783812052;
      bool flag;
      AbstractPiece piece;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1248273935)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -4209744 ^ -1389009075;
            continue;
          case 1:
            piece = (AbstractPiece) null;
            num1 = (int) num2 * -590757734 ^ 1111585163;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 51596635 ^ -760457612;
            continue;
          case 5:
            flag = this.Pieces.Count == 0;
            num1 = (int) num2 * -862676122 ^ -154018792;
            continue;
          case 6:
            piece = this.Pieces[0];
            num1 = -633985270;
            continue;
          case 7:
            int num3 = !flag ? -1933192528 : (num3 = -1919637945);
            num1 = num3 ^ (int) num2 * 161428905;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return piece;
    }

    public void MovePieceToField(AbstractField field)
    {
    }
  }
}
