// Decompiled with JetBrains decompiler
// Type: Calculator.Logic.RPNExpression
// Assembly: HۆيكرXCJةo, Version=5.77.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DF65F7D2-76B7-4BCB-BD21-207773274D69
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Agobot.gen-f4ce6b8e02a399ee4807cc2d2d1c259878bedae0381b624a00e6cac2158abd45.exe

using System.Collections.Generic;

namespace Calculator.Logic
{
  public class RPNExpression : IArithmeticExpression
  {
    private readonly Stack<double> r4TU9QNW36;
    private readonly Stack<IOperator> vARU27Yla5;
    private int iduUZlm9fQ;

    public void Add(double value)
    {
      // ISSUE: unable to decompile the method.
    }

    public void Subtract(double value)
    {
      // ISSUE: unable to decompile the method.
    }

    public void Multiply(double byValue)
    {
      // ISSUE: unable to decompile the method.
    }

    public void Divide(double byValue)
    {
      // ISSUE: unable to decompile the method.
    }

    private void uhuUI8kQRr(BinaryOperation _param1, double _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    public double ProduceResult()
    {
      // ISSUE: unable to decompile the method.
    }

    public void OpenParentheses()
    {
      // ISSUE: unable to decompile the method.
    }

    public void CloseParentheses()
    {
      // ISSUE: unable to decompile the method.
    }

    private void n84U0P6hZF()
    {
      // ISSUE: unable to decompile the method.
    }

    private bool FIWUk498us(IOperator _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    private bool PmcUJ9oMgQ()
    {
      // ISSUE: unable to decompile the method.
    }

    private void otZUtJogVR()
    {
      // ISSUE: unable to decompile the method.
    }

    public RPNExpression()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
