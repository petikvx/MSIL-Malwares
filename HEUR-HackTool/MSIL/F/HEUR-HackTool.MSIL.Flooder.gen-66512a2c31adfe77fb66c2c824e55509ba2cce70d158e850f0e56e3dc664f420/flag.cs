// Decompiled with JetBrains decompiler
// Type: Dark_RAT.flag
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class flag : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;

    [DebuggerNonUserCode]
    static flag()
    {
    }

    [DebuggerNonUserCode]
    public flag()
    {
      this.Load += new EventHandler(this.flag_Load);
      flag.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (flag.__ENCList)
      {
        if (flag.__ENCList.Count == flag.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (flag.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (flag.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                flag.__ENCList[index1] = flag.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          flag.__ENCList.RemoveRange(index1, checked (flag.__ENCList.Count - index1));
          flag.__ENCList.Capacity = flag.__ENCList.Count;
        }
        flag.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (flag));
      this.PictureBox1 = new PictureBox();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.PictureBox1.Dock = DockStyle.Fill;
      this.PictureBox1.Location = new Point(0, 0);
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1 = this.PictureBox1;
      Size size1 = new Size(220, 82);
      Size size2 = size1;
      pictureBox1.Size = size2;
      this.PictureBox1.TabIndex = 0;
      this.PictureBox1.TabStop = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(220, 82);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.PictureBox1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MaximizeBox = false;
      this.Name = nameof (flag);
      this.Text = "Flag";
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._PictureBox1 = value;
    }

    public void AutosizeImage(string ImagePath, PictureBox picBox, PictureBoxSizeMode pSizeMode = PictureBoxSizeMode.CenterImage)
    {
      try
      {
        picBox.Image = (Image) null;
        picBox.SizeMode = pSizeMode;
        if (File.Exists(ImagePath))
        {
          Bitmap bitmap1 = (Bitmap) Image.FromFile(ImagePath);
          double num1 = (double) bitmap1.Width / (double) picBox.Width;
          double num2 = (double) bitmap1.Height / (double) picBox.Height;
          Bitmap bitmap2;
          if (num1 > 1.0 | num2 > 1.0)
          {
            double num3 = num1 <= num2 ? num2 : num1;
            bitmap2 = new Bitmap(checked ((int) Math.Round(unchecked ((double) bitmap1.Width / num3))), checked ((int) Math.Round(unchecked ((double) bitmap1.Height / num3))));
            bitmap2.SetResolution(bitmap1.HorizontalResolution, bitmap1.VerticalResolution);
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            graphics.DrawImage((Image) bitmap1, new Rectangle(0, 0, checked ((int) Math.Round(unchecked ((double) bitmap1.Width / num3))), checked ((int) Math.Round(unchecked ((double) bitmap1.Height / num3)))), 0, 0, bitmap1.Width, bitmap1.Height, GraphicsUnit.Pixel);
            graphics.Dispose();
          }
          else
          {
            bitmap2 = new Bitmap(bitmap1.Width, bitmap1.Height);
            bitmap2.SetResolution(bitmap1.HorizontalResolution, bitmap1.VerticalResolution);
            Graphics graphics = Graphics.FromImage((Image) bitmap2);
            graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
            graphics.DrawImage((Image) bitmap1, new Rectangle(0, 0, bitmap1.Width, bitmap1.Height), 0, 0, bitmap1.Width, bitmap1.Height, GraphicsUnit.Pixel);
            graphics.Dispose();
          }
          bitmap1.Dispose();
          picBox.Image = (Image) bitmap2;
        }
        else
          picBox.Image = (Image) null;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.ToString());
        ProjectData.ClearProjectError();
      }
    }

    private void flag_Load(object sender, EventArgs e)
    {
      NewLateBinding.LateCall(NewLateBinding.LateGet((object) MyProject.Forms.program.countryflag.Images, (System.Type) null, "Item", new object[1]
      {
        RuntimeHelpers.GetObjectValue(MyProject.Forms.program.GetFlag(MyProject.Forms.program.Label4.Text.ToLower()))
      }, (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Save", new object[1]
      {
        (object) (Application.StartupPath + "/other/flag.jpg")
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      this.AutosizeImage(Application.StartupPath + "/other/flag.jpg", this.PictureBox1);
    }
  }
}
