// Decompiled with JetBrains decompiler
// Type: Mooreming.JanitorDroid
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Threading;

namespace Mooreming
{
  internal class JanitorDroid : UtilityDroid
  {
    protected bool hasTrashCompactor;
    protected bool hasVacuum;

    public JanitorDroid(
      string Material,
      string Model,
      string Color,
      bool HasToolbox,
      bool HasComputerConnection,
      bool HasArm,
      bool HasTrashCompactor,
      bool HasVacuum)
      : base(Material, Model, Color, HasToolbox, HasComputerConnection, HasArm)
    {
      this.hasTrashCompactor = HasTrashCompactor;
      this.hasVacuum = HasVacuum;
    }

    public JanitorDroid()
    {
      this.model = "Janitor";
      this.hasTrashCompactor = this.RandomTrashCompactor();
      this.hasVacuum = this.RandomVacuum();
      this.CalculateTotalCost();
    }

    protected override Decimal CalculateCostOfOptions()
    {
      Decimal costOfOptions = 0M + base.CalculateCostOfOptions();
      if (this.hasTrashCompactor)
        costOfOptions += 35.00M;
      if (this.hasVacuum)
        costOfOptions += 35.00M;
      return costOfOptions;
    }

    public override string ToString() => base.ToString() + "Has Trash Compactor: " + this.hasTrashCompactor.ToString() + Environment.NewLine + "Has Vacuum: " + this.hasVacuum.ToString() + Environment.NewLine;

    private bool RandomTrashCompactor()
    {
      Random random = new Random();
      Thread.Sleep(5);
      return random.Next(0, 2) == 0;
    }

    private bool RandomVacuum()
    {
      Random random = new Random();
      Thread.Sleep(5);
      return random.Next(0, 2) == 0;
    }
  }
}
