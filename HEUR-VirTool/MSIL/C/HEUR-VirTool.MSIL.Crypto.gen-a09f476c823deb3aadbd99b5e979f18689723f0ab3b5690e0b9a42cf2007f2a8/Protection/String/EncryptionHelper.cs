// Decompiled with JetBrains decompiler
// Type: Aura.Protection.String.EncryptionHelper
// Assembly: Kudeta Crypter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 16F9F4AC-EE0C-4DE1-A1E6-B297F2D4338B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-VirTool.MSIL.Crypto.gen-a09f476c823deb3aadbd99b5e979f18689723f0ab3b5690e0b9a42cf2007f2a8.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

namespace Aura.Protection.String
{
  internal class EncryptionHelper
  {
    private const string PasswordHash = "p7K95451qB88sZ7J";
    private const string SaltKey = "2GM23j301t60Z96T";
    private const string VIKey = "IzTdhG6S8uwg141S";
    private static List<string> _list = new List<string>();

    public static void Generate()
    {
      using (Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("Aura.zero"))
      {
        using (StreamReader streamReader = new StreamReader((Stream) new MemoryStream(EncryptionHelper.UnHush(EncryptionHelper.Read(manifestResourceStream)))))
          EncryptionHelper._list = ((IEnumerable<string>) streamReader.ReadToEnd().Split(new string[1]
          {
            Environment.NewLine
          }, StringSplitOptions.None)).ToList<string>();
      }
    }

    public static string Search(int key) => EncryptionHelper._list.ElementAt<string>(key);

    private static byte[] Read(Stream input)
    {
      using (MemoryStream destination = new MemoryStream())
      {
        input.CopyTo((Stream) destination);
        return destination.ToArray();
      }
    }

    public static byte[] UnHush(byte[] text)
    {
      byte[] bytes = new Rfc2898DeriveBytes("p7K95451qB88sZ7J", Encoding.ASCII.GetBytes("2GM23j301t60Z96T")).GetBytes(32);
      byte[] numArray = new byte[text.Length];
      for (int index = 0; index < text.Length; ++index)
        numArray[index] = (byte) ((uint) text[index] ^ (uint) bytes[index % bytes.Length]);
      return numArray;
    }

    public static string Decrypt(string encryptedText)
    {
      if (Assembly.GetExecutingAssembly() != Assembly.GetCallingAssembly())
        return "Aura.png";
      byte[] buffer = Convert.FromBase64String(encryptedText);
      byte[] bytes = new Rfc2898DeriveBytes("p7K95451qB88sZ7J", Encoding.ASCII.GetBytes("2GM23j301t60Z96T")).GetBytes(32);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.Mode = CipherMode.CBC;
      rijndaelManaged.Padding = PaddingMode.PKCS7;
      ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor(bytes, Encoding.ASCII.GetBytes("IzTdhG6S8uwg141S"));
      MemoryStream memoryStream = new MemoryStream(buffer);
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, decryptor, CryptoStreamMode.Read);
      byte[] numArray = new byte[buffer.Length];
      int count = cryptoStream.Read(numArray, 0, numArray.Length);
      memoryStream.Close();
      cryptoStream.Close();
      return Encoding.UTF8.GetString(numArray, 0, count).TrimEnd("\0".ToCharArray());
    }
  }
}
