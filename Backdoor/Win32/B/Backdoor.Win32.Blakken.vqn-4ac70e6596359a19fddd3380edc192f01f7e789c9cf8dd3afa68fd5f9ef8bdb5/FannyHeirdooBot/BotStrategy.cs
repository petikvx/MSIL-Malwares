// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.BotStrategy
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot
{
  public abstract class BotStrategy : IBotStrategy
  {
    protected Planet WeakestEnemyPlanetWithGrowth;
    protected Planet StrongestEnemyPlanet;
    protected Universe currentUniverse;
    protected bool CanDefendNeutralPlanets;
    protected int MaxTurnLookaheadForNeutralDefense;

    public void DoTurn(Universe uni)
    {
label_1:
      int num1 = 2111914900;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 574050615)) % 7U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -641511555 ^ -2043179685;
            continue;
          case 2:
            List<AttackPlan> sweetnesses = this.BuildActionPlan(uni);
            flag = !this.SortAndMakeMoves(uni, sweetnesses);
            num1 = (int) num2 * -696430546 ^ 461569199;
            continue;
          case 3:
            int num3 = !flag ? -738255086 : (num3 = -1811378201);
            num1 = num3 ^ (int) num2 * -694050621;
            continue;
          case 4:
            this.AttackPlanFailed();
            num1 = (int) num2 * 2010532685 ^ 1699674375;
            continue;
          case 5:
            num1 = (int) num2 * -1331360200 ^ 383409364;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    protected IEnumerable<Planet> OrderedListOfAttackedPlanets(int playerId)
    {
label_1:
      int num1 = 494764496;
      IEnumerable<Planet> planets;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1884922562)) % 5U)
        {
          case 1:
            num1 = (int) num2 * -884030908 ^ 936320219;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -2092787032 ^ -598228084;
            continue;
          case 4:
            planets = (IEnumerable<Planet>) this.currentUniverse.All.Planets.Where<Planet>((Func<Planet, bool>) (planet => planet.IsUnderAttack && planet.Owner == playerId)).OrderBy<Planet, bool>((Func<Planet, bool>) (planet => planet.WinningArmadaIsMine)).ThenBy<Planet, int>((Func<Planet, int>) (planet => -planet.LastAttackTurn.TurnsFromNow));
            num1 = 1941581677;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return planets;
    }

    public void FindWeakestEnemyPlanetWithGrowth() => this.WeakestEnemyPlanetWithGrowth = this.currentUniverse.All.Planets.Where<Planet>((Func<Planet, bool>) (planet => planet.Owner == 2 && planet.GrowthRate > 0)).OrderBy<Planet, int>((Func<Planet, int>) (planet => planet.GrowthRate)).FirstOrDefault<Planet>();

    public void FindStrongestEnemyPlanet() => this.StrongestEnemyPlanet = this.currentUniverse.All.Planets.Where<Planet>((Func<Planet, bool>) (planet => planet.Owner == 2)).OrderBy<Planet, int>((Func<Planet, int>) (planet => -planet.GrowthRate)).FirstOrDefault<Planet>();

    protected static IOrderedEnumerable<IGrouping<int, Route>> PlanetRouteByDistanceDictionary(
      PlanetaryTravelRoute routesFromPlanet)
    {
      IOrderedEnumerable<IGrouping<int, Route>> orderedEnumerable = routesFromPlanet.ToLookup<Route, int>((Func<Route, int>) (item => item.DistanceInTurns)).OrderBy<IGrouping<int, Route>, int>((Func<IGrouping<int, Route>, int>) (item => item.Key));
label_1:
      int num1 = -1627972183;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1351876044)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 788680779 ^ -450112429;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return orderedEnumerable;
    }

    public bool TakeGamble_DoNotCountOutgoingShipsForOneTurn { get; set; }

    protected virtual void StartOfTurn()
    {
    }

    protected virtual bool SourcePlanetSelected(Planet onwedPlanet)
    {
      bool flag = true;
label_1:
      int num1 = 2078187702;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 310920118)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1611993870 ^ 1955978524;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    protected virtual bool PlanetRouteSelected(
      Planet onwedPlanet,
      PlanetaryTravelRoute routesFromPlanet)
    {
label_1:
      int num1 = -1322194443;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1980468570)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -506968257 ^ 1149747203;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag = true;
            num1 = (int) num2 * -222043102 ^ -213182572;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
    }

    protected virtual void PlanetRouteDeSelected(
      Planet onwedPlanet,
      PlanetaryTravelRoute planetTravelMap)
    {
    }

    protected abstract bool OwnedPlanetCanSendAttackForce(Planet ownedPlanet);

    protected abstract void DefendOnwedPlanets();

    protected abstract void DefendNeutralPlanets(int maxTurnLookahead);

    public List<AttackPlan> BuildActionPlan(Universe uni)
    {
      this.currentUniverse = uni;
label_1:
      int num1 = 16248951;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 5745327)) % 6U)
        {
          case 0:
            this.DefendOnwedPlanets();
            num1 = (int) num2 * 573135571 ^ -307318320;
            continue;
          case 1:
            this.DefendNeutralPlanets(this.MaxTurnLookaheadForNeutralDefense);
            num1 = (int) num2 * 920569197 ^ 1350516071;
            continue;
          case 2:
            num1 = (int) num2 * 1852188494 ^ -211134381;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.StartOfTurn();
            num1 = (int) num2 * -1238141215 ^ 690198733;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this.ProcessAttackQueue();
      List<AttackPlan> attackPlanList1 = new List<AttackPlan>();
      IEnumerator<Planet> enumerator1 = this.currentUniverse.Me.Planets.Where<Planet>(new Func<Planet, bool>(this.OwnedPlanetCanSendAttackForce)).GetEnumerator();
      try
      {
label_57:
        Planet current1;
        PlanetaryTravelRoute routes;
        if (BotStrategy.\u206B‏‏‏⁬‪‭‫‫‮⁮⁭‍‭‎‬‎‎​⁫⁬‪‌‏‫⁪⁭‫⁮⁪⁯‏‍⁮‏⁮⁪‮⁬‮‮((IEnumerator) enumerator1))
        {
label_20:
          current1 = enumerator1.Current;
          int num3 = 577557656;
          bool continueRoute;
          AttackPlan attack;
          bool flag1;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 5745327)) % 10U)
            {
              case 0:
                num3 = (int) num4 * 1679530485 ^ 692092076;
                continue;
              case 2:
                if (flag1)
                {
                  num3 = (int) num4 * 1603540232 ^ 590416945;
                  continue;
                }
                goto label_54;
              case 3:
                routes = current1.Routes;
                if (this.PlanetRouteSelected(current1, routes))
                {
                  num3 = (int) num4 * -1910371415 ^ -1879086808;
                  continue;
                }
                goto label_56;
              case 4:
                num3 = 1117527860;
                continue;
              case 5:
                goto label_20;
              case 6:
                num3 = (int) num4 * 209110555 ^ -501866646;
                continue;
              case 7:
                continueRoute = true;
                attack = new AttackPlan();
                num3 = (int) num4 * 1331320769 ^ -1480344854;
                continue;
              case 8:
                num3 = (int) num4 * 1787111870 ^ 642230698;
                continue;
              case 9:
                flag1 = this.SourcePlanetSelected(current1);
                num3 = (int) num4 * -1731430579 ^ 1046425862;
                continue;
              default:
                goto label_21;
            }
          }
label_21:
          IEnumerator<Route> enumerator2 = this.SortRoutesForBattlePlanCreation(routes).GetEnumerator();
          try
          {
label_40:
            int num5 = BotStrategy.\u206B‏‏‏⁬‪‭‫‫‮⁮⁭‍‭‎‬‎‎​⁫⁬‪‌‏‫⁪⁭‫⁮⁪⁯‏‍⁮‏⁮⁪‮⁬‮‮((IEnumerator) enumerator2) ? 814863376 : (num5 = 1717809891);
            Route current2;
            Planet destination;
            bool flag2;
            bool enabled;
            while (true)
            {
              uint num6;
              switch ((num6 = (uint) (num5 ^ 5745327)) % 22U)
              {
                case 0:
                  num5 = (int) num6 * 1329548347 ^ 1332481769;
                  continue;
                case 1:
                  flag2 = !destination.IsMine;
                  num5 = (int) num6 * -2046249405 ^ -310132174;
                  continue;
                case 2:
                  num5 = (int) num6 * -127695901 ^ 1189536106;
                  continue;
                case 3:
                  attack = new AttackPlan();
                  num5 = (int) num6 * 184476297 ^ 1602525989;
                  continue;
                case 5:
                  attack.Reason = "CreateAttackPlanForOwnedPlanet";
                  this.CreateAttackPlanForOwnedPlanet(attack, current2, routes, ref continueRoute);
                  enabled = attack.Enabled;
                  num5 = (int) num6 * 90482929 ^ -1422484127;
                  continue;
                case 6:
                  attack.Target = destination;
                  num5 = (int) num6 * -1135011407 ^ -375087961;
                  continue;
                case 7:
                  int num7 = enabled ? 199382022 : (num7 = 1460754873);
                  num5 = num7 ^ (int) num6 * 283508431;
                  continue;
                case 8:
                  destination = current2.Destination;
                  num5 = (int) num6 * 45046812 ^ 920669682;
                  continue;
                case 9:
                  int num8 = current1.IdleForThisNumberOfTurns >= 15 ? -2082299427 : (num8 = -803301231);
                  num5 = num8 ^ (int) num6 * 1376957202;
                  continue;
                case 10:
                  attackPlanList1.Add(attack);
                  num5 = 979535222;
                  continue;
                case 11:
                  num5 = 1562547834;
                  continue;
                case 12:
                  int num9 = !flag2 ? -1488934396 : (num9 = -1847381965);
                  num5 = num9 ^ (int) num6 * -1523753845;
                  continue;
                case 13:
                  goto label_40;
                case 14:
                  num5 = (int) num6 * -1025281933 ^ 951348947;
                  continue;
                case 15:
                  num5 = 1605208826;
                  continue;
                case 16:
                  num5 = (int) num6 * 798859117 ^ 1717739781;
                  continue;
                case 17:
                  current2 = enumerator2.Current;
                  num5 = 1363244627;
                  continue;
                case 18:
                  attack.Enabled = false;
                  attack.Strategy = BotStrategy.\u200B​​‏‏‎⁮⁪‏‌‫​⁬‫⁫‭‫‭‎​⁭⁭‪⁫⁮⁫‬⁮⁫‌‬‎‫⁫⁮‍‪‫‮‍‮((MemberInfo) BotStrategy.\u206C‍‫‭‮⁭‎‏‫‍‎‬⁫⁮⁮‫‎⁪‎‬‫‪‏‮​⁬‍‬‏‍‫‌‏⁭⁬​‬⁫‫‫‮((object) this));
                  num5 = (int) num6 * -1001445983 ^ -516242328;
                  continue;
                case 19:
                  int num10;
                  num5 = num10 = !continueRoute ? 922062609 : (num10 = 2014616996);
                  continue;
                case 20:
                  attack.Sweetness += (double) current1.IdleForThisNumberOfTurns;
                  num5 = (int) num6 * -1759315984 ^ -1359223473;
                  continue;
                case 21:
                  num5 = 814863376;
                  continue;
                default:
                  goto label_51;
              }
            }
          }
          finally
          {
            if (enumerator2 != null)
            {
label_46:
              int num11 = 881454518;
              while (true)
              {
                uint num12;
                switch ((num12 = (uint) (num11 ^ 5745327)) % 4U)
                {
                  case 1:
                    BotStrategy.\u202A​‬‏⁯⁫‮‪​‬‭⁮⁫⁯⁭⁪‮⁭‪⁫‪‌‫⁬⁯​‎‌‮‪⁬‬⁪‎​‮‌⁮‮‫‮((IDisposable) enumerator2);
                    num11 = (int) num12 * 529584410 ^ -435895297;
                    continue;
                  case 2:
                    num11 = (int) num12 * 1631769781 ^ 498490849;
                    continue;
                  case 3:
                    goto label_46;
                  default:
                    goto label_50;
                }
              }
            }
label_50:;
          }
label_51:;
        }
        else
          goto label_58;
label_52:
        int num13 = 1971471861;
label_53:
        while (true)
        {
          uint num14;
          switch ((num14 = (uint) (num13 ^ 5745327)) % 6U)
          {
            case 0:
              goto label_52;
            case 2:
              goto label_56;
            case 3:
              num13 = (int) num14 * 237496012 ^ -322449174;
              continue;
            case 4:
              goto label_57;
            case 5:
              goto label_54;
            default:
              goto label_64;
          }
        }
label_54:
        num13 = 499391695;
        goto label_53;
label_56:
        this.PlanetRouteDeSelected(current1, routes);
        num13 = 506474386;
        goto label_53;
label_58:
        num13 = 373285278;
        goto label_53;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_60:
          int num15 = 229714580;
          while (true)
          {
            uint num16;
            switch ((num16 = (uint) (num15 ^ 5745327)) % 3U)
            {
              case 1:
                BotStrategy.\u202A​‬‏⁯⁫‮‪​‬‭⁮⁫⁯⁭⁪‮⁭‪⁫‪‌‫⁬⁯​‎‌‮‪⁬‬⁪‎​‮‌⁮‮‫‮((IDisposable) enumerator1);
                num15 = (int) num16 * -1962783035 ^ -20365262;
                continue;
              case 2:
                goto label_60;
              default:
                goto label_63;
            }
          }
        }
label_63:;
      }
label_64:
      bool flag3 = !this.TakeGamble_DoNotCountOutgoingShipsForOneTurn;
label_65:
      int num17 = 1375522294;
      while (true)
      {
        uint num18;
        switch ((num18 = (uint) (num17 ^ 5745327)) % 4U)
        {
          case 1:
            if (flag3)
            {
              num17 = (int) num18 * 58272170 ^ -435535809;
              continue;
            }
            goto label_109;
          case 2:
            num17 = (int) num18 * -2131263797 ^ 1014433957;
            continue;
          case 3:
            goto label_65;
          default:
            goto label_70;
        }
      }
label_70:
      IEnumerator<Planet> enumerator3 = uni.All.Planets.GetEnumerator();
      uint num19;
      try
      {
label_99:
        if (BotStrategy.\u206B‏‏‏⁬‪‭‫‫‮⁮⁭‍‭‎‬‎‎​⁫⁬‪‌‏‫⁪⁭‫⁮⁪⁯‏‍⁮‏⁮⁪‮⁬‮‮((IEnumerator) enumerator3))
        {
label_74:
          Planet current3 = enumerator3.Current;
          int num20 = 1818499449;
          while (true)
          {
            uint num21;
            bool flag4;
            int num22;
            switch ((num21 = (uint) (num20 ^ 5745327)) % 7U)
            {
              case 1:
                goto label_74;
              case 2:
                num22 = current3.Armada.Count != 0 ? 1 : 0;
                break;
              case 3:
                if (flag4)
                {
                  num20 = (int) num21 * 1357195020 ^ 1436261028;
                  continue;
                }
                goto label_98;
              case 4:
                if (current3.IsLost)
                {
                  num22 = 0;
                  break;
                }
                num20 = (int) num21 * 1722143749 ^ 245853565;
                continue;
              case 5:
                num20 = 558464625;
                continue;
              case 6:
                num20 = (int) num21 * 1532413170 ^ 626316475;
                continue;
              default:
                goto label_83;
            }
            flag4 = num22 != 0;
            num20 = 842347210;
          }
label_83:
          using (List<Fleet>.Enumerator enumerator4 = current3.Armada.GetEnumerator())
          {
label_92:
            int num23 = enumerator4.MoveNext() ? 1749492534 : (num23 = 594622186);
            Fleet current4;
            bool isMine;
            while (true)
            {
              uint num24;
              switch ((num24 = (uint) (num23 ^ 5745327)) % 9U)
              {
                case 0:
                  goto label_92;
                case 1:
                  current3.RemoveShips(current4.NumShips);
                  num23 = (int) num24 * -1882048711 ^ 2120503096;
                  continue;
                case 2:
                  num23 = (int) num24 * 1216452422 ^ 695243766;
                  continue;
                case 3:
                  num23 = 961586113;
                  continue;
                case 5:
                  int num25 = !isMine ? 994124511 : (num25 = 1317842888);
                  num23 = num25 ^ (int) num24 * -400881060;
                  continue;
                case 6:
                  num23 = (int) num24 * 1201828642 ^ -1494279953;
                  continue;
                case 7:
                  num23 = 1749492534;
                  continue;
                case 8:
                  current4 = enumerator4.Current;
                  isMine = current4.IsMine;
                  num23 = 852725425;
                  continue;
                default:
                  goto label_95;
              }
            }
          }
label_95:;
        }
        else
          goto label_100;
label_96:
        int num26 = 407738130;
label_97:
        switch ((num19 = (uint) (num26 ^ 5745327)) % 4U)
        {
          case 0:
            goto label_99;
          case 1:
            break;
          case 2:
            goto label_96;
          default:
            goto label_106;
        }
label_98:
        num26 = 1188815015;
        goto label_97;
label_100:
        num26 = 118919752;
        goto label_97;
      }
      finally
      {
        if (enumerator3 != null)
        {
label_102:
          int num27 = 1869577964;
          while (true)
          {
            uint num28;
            switch ((num28 = (uint) (num27 ^ 5745327)) % 3U)
            {
              case 0:
                goto label_102;
              case 2:
                BotStrategy.\u202A​‬‏⁯⁫‮‪​‬‭⁮⁫⁯⁭⁪‮⁭‪⁫‪‌‫⁬⁯​‎‌‮‪⁬‬⁪‎​‮‌⁮‮‫‮((IDisposable) enumerator3);
                num27 = (int) num28 * 846343506 ^ 912172974;
                continue;
              default:
                goto label_105;
            }
          }
        }
label_105:;
      }
label_106:
label_107:
      int num29 = 1340804574;
label_108:
      List<AttackPlan> attackPlanList2;
      switch ((num19 = (uint) (num29 ^ 5745327)) % 3U)
      {
        case 0:
          goto label_107;
        case 1:
          break;
        default:
          return attackPlanList2;
      }
label_109:
      this.TakeGamble_DoNotCountOutgoingShipsForOneTurn = false;
      attackPlanList2 = attackPlanList1;
      num29 = 741248767;
      goto label_108;
    }

    protected virtual void ProcessAttackQueue()
    {
    }

    protected virtual IEnumerable<Route> SortRoutesForBattlePlanCreation(
      PlanetaryTravelRoute planetTravelMap)
    {
label_1:
      int num1 = 1299703292;
      IEnumerable<Route> routes;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1506833458)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            routes = (IEnumerable<Route>) planetTravelMap;
            num1 = (int) num2 * 2051043981 ^ -1726415141;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return routes;
    }

    protected abstract void CreateAttackPlanForOwnedPlanet(
      AttackPlan attack,
      Route attackRoute,
      PlanetaryTravelRoute planetTravelMap,
      ref bool continueRoute);

    public virtual void AttackPlanFailed()
    {
    }

    private bool SortAndMakeMoves(Universe uni, List<AttackPlan> sweetnesses)
    {
label_1:
      int num1 = -930144679;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -925495047)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            flag = this.MakeSweetestMoves(uni, (IEnumerable<AttackPlan>) sweetnesses.OrderBy<AttackPlan, double>((Func<AttackPlan, double>) (item => -item.Sweetness)));
            num1 = -1445173823;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    private bool MakeSweetestMoves(Universe uni, IEnumerable<AttackPlan> attackPlan)
    {
      bool flag1 = false;
      Planet planet = (Planet) null;
      double num1 = double.MaxValue;
label_1:
      int num2 = -222118091;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -184110223)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = (int) num3 * -448898261 ^ 1922784993;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      IEnumerator<AttackPlan> enumerator1 = attackPlan.GetEnumerator();
      try
      {
label_57:
        if (BotStrategy.\u206B‏‏‏⁬‪‭‫‫‮⁮⁭‍‭‎‬‎‎​⁫⁬‪‌‏‫⁪⁭‫⁮⁪⁯‏‍⁮‏⁮⁪‮⁬‮‮((IEnumerator) enumerator1))
        {
label_10:
          AttackPlan current1 = enumerator1.Current;
          int num4 = -830347264;
          double num5;
          bool flag2;
          while (true)
          {
            uint num6;
            switch ((num6 = (uint) (num4 ^ -184110223)) % 14U)
            {
              case 0:
                num4 = -1974480862;
                continue;
              case 1:
                planet = current1.Target;
                int num7 = num1 != double.MaxValue ? -58894368 : (num7 = -2123633885);
                num4 = num7 ^ (int) num6 * -1900967181;
                continue;
              case 2:
                num4 = -1802520735;
                continue;
              case 3:
                goto label_10;
              case 5:
                num1 = current1.Sweetness;
                num4 = (int) num6 * 1063537578 ^ 464902976;
                continue;
              case 6:
                int num8 = flag2 ? 331197309 : (num8 = 1330913115);
                num4 = num8 ^ (int) num6 * -389439608;
                continue;
              case 7:
                num4 = (int) num6 * -177566990 ^ 320882152;
                continue;
              case 8:
                num4 = -612345063;
                continue;
              case 9:
                flag2 = num5 < 0.2;
                num4 = (int) num6 * 709584214 ^ -559345389;
                continue;
              case 10:
                num4 = (int) num6 * -1840080206 ^ 1538554010;
                continue;
              case 11:
                num4 = (int) num6 * -89894641 ^ -1019915672;
                continue;
              case 12:
                num5 = current1.Sweetness / num1;
                num4 = -118153450;
                continue;
              case 13:
                goto label_65;
              default:
                goto label_19;
            }
          }
label_19:
          using (List<AttackPlanParticipant>.Enumerator enumerator2 = current1.Participants.GetEnumerator())
          {
label_26:
            int num9 = enumerator2.MoveNext() ? -1798297449 : (num9 = -1170167318);
            while (true)
            {
              uint num10;
              bool flag3;
              bool flag4;
              AttackPlanParticipant current2;
              Planet source;
              bool attackMovesAllowed;
              int num11;
              int num12;
              int num13;
              switch ((num10 = (uint) (num9 ^ -184110223)) % 23U)
              {
                case 0:
                  num9 = -1798297449;
                  continue;
                case 1:
                  num9 = (int) num10 * 1255067512 ^ -1602525055;
                  continue;
                case 2:
                  int num14 = !flag4 ? -1551492895 : (num14 = -1447410699);
                  num9 = num14 ^ (int) num10 * 1875438726;
                  continue;
                case 3:
                  num9 = -1758387700;
                  continue;
                case 4:
                  num11 = current1.DominationMove ? 1 : 0;
                  goto label_51;
                case 5:
                  flag1 = true;
                  num9 = (int) num10 * 1136021425 ^ -1012976194;
                  continue;
                case 7:
                  num9 = (int) num10 * -1425961250 ^ 642655087;
                  continue;
                case 8:
                  uni.MakeMove(source, planet, source.AttackForce);
                  num9 = (int) num10 * -255649600 ^ 1082124035;
                  continue;
                case 9:
                  flag4 = planet.IsAttackable | flag3;
                  num9 = (int) num10 * 406712028 ^ 1603802830;
                  continue;
                case 10:
                  goto label_26;
                case 11:
                  if (!source.DoesNotChangeOwner)
                  {
                    num12 = 0;
                    goto label_36;
                  }
                  else
                  {
                    num9 = (int) num10 * 1409535429 ^ -1754794905;
                    continue;
                  }
                case 12:
                  num9 = (int) num10 * -1526185526 ^ 168770101;
                  continue;
                case 13:
                  int num15 = !attackMovesAllowed ? 68767954 : (num15 = 690633073);
                  num9 = num15 ^ (int) num10 * 1176706867;
                  continue;
                case 14:
                  source = current2.Source;
                  attackMovesAllowed = source.AttackMovesAllowed;
                  num9 = (int) num10 * 266921659 ^ -2132043742;
                  continue;
                case 15:
                  uni.AddToWishList(planet);
                  num9 = (int) num10 * 750895072 ^ 1201863908;
                  continue;
                case 16:
                  num13 = source.IsLost ? 1 : 0;
                  break;
                case 17:
                  num12 = BotStrategy.\u202D⁭‏⁮⁪⁪⁫⁬‫‭⁭‎‭⁬​⁯‍⁯⁯‏⁮‬⁭‎​‬‫⁬‫‏‎⁪‮‬⁬⁫‪⁭‮‫‮(planet.ShipsRequiredToSurviveAttack, planet.AttackForce) < source.AttackForce ? 1 : 0;
                  goto label_36;
                case 18:
                  num9 = (int) num10 * -1221086441 ^ -1318685150;
                  continue;
                case 19:
                  current2 = enumerator2.Current;
                  num9 = -915271510;
                  continue;
                case 20:
                  if (!this.currentUniverse.IsDominating)
                  {
                    num9 = (int) num10 * 461358766 ^ -1711130748;
                    continue;
                  }
                  num11 = 1;
                  goto label_51;
                case 21:
                  num9 = -914887504;
                  continue;
                case 22:
                  num9 = -1383660574;
                  continue;
                default:
                  goto label_54;
              }
label_33:
              bool flag5;
              int num16 = flag5 ? 1 : 0;
              int num17;
              num9 = num17 = (num13 | num16) != 0 ? -1959036078 : (num17 = -1383660574);
              continue;
label_36:
              flag5 = num12 != 0;
              if (flag3)
              {
                num13 = 1;
                goto label_33;
              }
              else
              {
                num9 = -900338242;
                continue;
              }
label_51:
              flag3 = num11 != 0;
              num9 = -975640563;
            }
          }
label_54:;
        }
        else
          goto label_58;
label_55:
        int num18 = -319731290;
label_56:
        uint num19;
        switch ((num19 = (uint) (num18 ^ -184110223)) % 3U)
        {
          case 0:
            goto label_55;
          case 2:
            goto label_57;
          default:
            goto label_65;
        }
label_58:
        num18 = -478813039;
        goto label_56;
      }
      finally
      {
        if (enumerator1 != null)
        {
label_60:
          int num20 = -1898025982;
          while (true)
          {
            uint num21;
            switch ((num21 = (uint) (num20 ^ -184110223)) % 4U)
            {
              case 0:
                goto label_60;
              case 2:
                num20 = (int) num21 * -1571600914 ^ -522000580;
                continue;
              case 3:
                BotStrategy.\u202A​‬‏⁯⁫‮‪​‬‭⁮⁫⁯⁭⁪‮⁭‪⁫‪‌‫⁬⁯​‎‌‮‪⁬‬⁪‎​‮‌⁮‮‫‮((IDisposable) enumerator1);
                num20 = (int) num21 * -2025576231 ^ 1477103092;
                continue;
              default:
                goto label_64;
            }
          }
        }
label_64:;
      }
label_65:
      bool flag6 = flag1;
label_66:
      int num22 = -1977762414;
      while (true)
      {
        uint num23;
        switch ((num23 = (uint) (num22 ^ -184110223)) % 3U)
        {
          case 0:
            goto label_66;
          case 2:
            num22 = (int) num23 * -1223558856 ^ -1318955310;
            continue;
          default:
            goto label_69;
        }
      }
label_69:
      return flag6;
    }

    static Type \u206C‍‫‭‮⁭‎‏‫‍‎‬⁫⁮⁮‫‎⁪‎‬‫‪‏‮​⁬‍‬‏‍‫‌‏⁭⁬​‬⁫‫‫‮([In] object obj0) => obj0.GetType();

    static string \u200B​​‏‏‎⁮⁪‏‌‫​⁬‫⁫‭‫‭‎​⁭⁭‪⁫⁮⁫‬⁮⁫‌‬‎‫⁫⁮‍‪‫‮‍‮([In] MemberInfo obj0) => obj0.Name;

    static bool \u206B‏‏‏⁬‪‭‫‫‮⁮⁭‍‭‎‬‎‎​⁫⁬‪‌‏‫⁪⁭‫⁮⁪⁯‏‍⁮‏⁮⁪‮⁬‮‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u202A​‬‏⁯⁫‮‪​‬‭⁮⁫⁯⁭⁪‮⁭‪⁫‪‌‫⁬⁯​‎‌‮‪⁬‬⁪‎​‮‌⁮‮‫‮([In] IDisposable obj0) => obj0.Dispose();

    static int \u202D⁭‏⁮⁪⁪⁫⁬‫‭⁭‎‭⁬​⁯‍⁯⁯‏⁮‬⁭‎​‬‫⁬‫‏‎⁪‮‬⁬⁫‪⁭‮‫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);
  }
}
