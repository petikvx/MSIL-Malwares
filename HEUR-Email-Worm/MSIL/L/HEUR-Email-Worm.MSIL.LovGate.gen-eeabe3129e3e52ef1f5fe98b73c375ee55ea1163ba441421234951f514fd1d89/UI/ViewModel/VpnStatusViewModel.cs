// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.ViewModel.VpnStatusViewModel
// Assembly: DateMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 58400F57-44A4-4304-98DA-3FFB3BB4C481
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-eeabe3129e3e52ef1f5fe98b73c375ee55ea1163ba441421234951f514fd1d89.exe

using CiscoAnyconnectControl.Model;
using CiscoAnyconnectControl.UI.Command;
using System;
using System.ComponentModel;

namespace CiscoAnyconnectControl.UI.ViewModel
{
  internal class VpnStatusViewModel : INotifyPropertyChanged, IVpnStatusViewModel
  {
    private DateTime _connectLastClicked;

    public VpnStatusViewModel()
    {
      this.SetupCommands();
      this.CurrStatus = VpnStatusModel.Instance;
      this.CurrStatus.PropertyChanged += new PropertyChangedEventHandler(this.CurrStatus_PropertyChanged);
      this.CurrStatus.GroupRequested += new EventHandler<VpnStatusModel.GroupEventArgs>(this.CurrStatus_GroupRequested);
      this.CurrStatus.Notice += new EventHandler<VpnStatusModel.NoticeEventArgs>(this.CurrStatus_Notice);
      this._connectLastClicked = DateTime.MinValue;
    }

    private void CurrStatus_Notice(object sender, VpnStatusModel.NoticeEventArgs e)
    {
      VpnStatusModel.NoticeType noticeType = e.NoticeType;
    }

    private void CurrStatus_GroupRequested(object sender, VpnStatusModel.GroupEventArgs e)
    {
    }

    public string TimeConnected => this.CurrStatus.Status == VpnStatusModel.VpnStatus.Connected || this.CurrStatus.Status == VpnStatusModel.VpnStatus.Disconnecting ? (!this.CurrStatus.TimeConnected.HasValue ? "loading ..." : string.Format("({0:h\\:mm\\:ss})", (object) this.CurrStatus.TimeConnected)) : "";

    private void CurrStatus_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
      string propertyName = e.PropertyName;
      if (!(propertyName == "Status"))
      {
        if (!(propertyName == "Message"))
        {
          if (!(propertyName == "TimeConnected"))
            return;
          this.OnPropertyChanged("TimeConnected");
        }
        else
        {
          this.OnPropertyChanged(e.PropertyName);
          this.OnPropertyChanged("ActionButtonEnabled");
        }
      }
      else
      {
        this.OnPropertyChanged("Color");
        this.OnPropertyChanged("Status");
        this.OnPropertyChanged("ActionButtonText");
        this.OnPropertyChanged("ActionButtonEnabled");
        this.OnPropertyChanged("TimeConnected");
      }
    }

    private VpnStatusModel CurrStatus { get; set; }

    public string Color
    {
      get
      {
        string color;
        switch (this.CurrStatus.Status)
        {
          case VpnStatusModel.VpnStatus.Disconnected:
            color = "red";
            break;
          case VpnStatusModel.VpnStatus.Connecting:
          case VpnStatusModel.VpnStatus.Disconnecting:
          case VpnStatusModel.VpnStatus.Reconnecting:
            color = "yellow";
            break;
          case VpnStatusModel.VpnStatus.Connected:
            color = "green";
            break;
          case VpnStatusModel.VpnStatus.Unknown:
            color = "purple";
            break;
          default:
            color = "orange";
            break;
        }
        return color;
      }
    }

    public string Status
    {
      get
      {
        string status;
        switch (this.CurrStatus.Status)
        {
          case VpnStatusModel.VpnStatus.Disconnected:
            status = "Disconnected.";
            break;
          case VpnStatusModel.VpnStatus.Connecting:
            status = "Connecting ...";
            break;
          case VpnStatusModel.VpnStatus.Connected:
            status = "Connected.";
            break;
          case VpnStatusModel.VpnStatus.Disconnecting:
            status = "Disconnecting ...";
            break;
          case VpnStatusModel.VpnStatus.Reconnecting:
            status = "Reconnecting ...";
            break;
          case VpnStatusModel.VpnStatus.Unknown:
            status = "Not connected to backend ...";
            break;
          default:
            status = string.Format("Error ... {0} is not defined.", (object) this.CurrStatus.Status);
            break;
        }
        return status;
      }
    }

    public string Message => this.CurrStatus.Message ?? "No messages yet :(";

    public string ActionButtonText
    {
      get
      {
        string actionButtonText;
        switch (this.CurrStatus.Status)
        {
          case VpnStatusModel.VpnStatus.Disconnected:
            actionButtonText = "Connect";
            break;
          case VpnStatusModel.VpnStatus.Connecting:
            actionButtonText = "Connecting ...";
            break;
          case VpnStatusModel.VpnStatus.Connected:
          case VpnStatusModel.VpnStatus.Reconnecting:
            actionButtonText = "Disconnect";
            break;
          case VpnStatusModel.VpnStatus.Disconnecting:
            actionButtonText = "Disconnecting ...";
            break;
          case VpnStatusModel.VpnStatus.Unknown:
            actionButtonText = "Not connected to backend ...";
            break;
          default:
            actionButtonText = "Error ...";
            break;
        }
        return actionButtonText;
      }
    }

    public bool ActionButtonEnabled
    {
      get
      {
        bool actionButtonEnabled;
        switch (this.CurrStatus.Status)
        {
          case VpnStatusModel.VpnStatus.Disconnected:
          case VpnStatusModel.VpnStatus.Connected:
          case VpnStatusModel.VpnStatus.Reconnecting:
          case VpnStatusModel.VpnStatus.Paused:
          case VpnStatusModel.VpnStatus.SsoPolling:
          case VpnStatusModel.VpnStatus.Unknown:
            actionButtonEnabled = true;
            break;
          default:
            actionButtonEnabled = false;
            break;
        }
        return actionButtonEnabled;
      }
    }

    private RelayCommand CommandConnectVpn { get; set; }

    private RelayCommand CommandDisconnectVpn { get; set; }

    private bool CanExecuteAction() => this.ActionButtonEnabled;

    private void SetupCommands()
    {
      this.CommandConnectVpn = new RelayCommand(new Func<bool>(this.CanExecuteAction), (Action) (() => { }));
      this.CommandDisconnectVpn = new RelayCommand(new Func<bool>(this.CanExecuteAction), (Action) (() => VpnStatusModel.Instance.Disconnect()));
    }

    public RelayCommand CurrentActionCommand
    {
      get
      {
        RelayCommand currentActionCommand;
        switch (this.CurrStatus.Status)
        {
          case VpnStatusModel.VpnStatus.Disconnected:
            currentActionCommand = this.CommandConnectVpn;
            break;
          case VpnStatusModel.VpnStatus.Connected:
          case VpnStatusModel.VpnStatus.Reconnecting:
            currentActionCommand = this.CommandDisconnectVpn;
            break;
          default:
            currentActionCommand = RelayCommand.Empty;
            break;
        }
        return currentActionCommand;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    [NotifyPropertyChangedInvocator]
    protected virtual void OnPropertyChanged(string propertyName = null)
    {
      PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
      if (propertyChanged == null)
        return;
      propertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }
  }
}
