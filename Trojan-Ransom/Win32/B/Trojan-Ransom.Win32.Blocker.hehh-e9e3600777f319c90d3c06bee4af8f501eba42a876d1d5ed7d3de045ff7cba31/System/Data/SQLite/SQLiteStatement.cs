// Decompiled with JetBrains decompiler
// Type: System.Data.SQLite.SQLiteStatement
// Assembly: sysrt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F2102D52-57B0-4622-A1CB-9DE0B00E107F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.hehh-e9e3600777f319c90d3c06bee4af8f501eba42a876d1d5ed7d3de045ff7cba31.exe

using System.Globalization;

namespace System.Data.SQLite
{
  internal sealed class SQLiteStatement : IDisposable
  {
    internal SQLiteBase _sql;
    internal string _sqlStatement;
    internal SQLiteStatementHandle _sqlite_stmt;
    internal int _unnamedParameters;
    internal string[] _paramNames;
    internal SQLiteParameter[] _paramValues;
    internal SQLiteCommand _command;
    private string[] _types;

    internal SQLiteStatement(
      SQLiteBase sqlbase,
      SQLiteStatementHandle stmt,
      string strCommand,
      SQLiteStatement previous)
    {
      this._sql = sqlbase;
      this._sqlite_stmt = stmt;
      this._sqlStatement = strCommand;
      int num = 0;
      int length = this._sql.Bind_ParamCount(this);
      if (length <= 0)
        return;
      if (previous != null)
        num = previous._unnamedParameters;
      this._paramNames = new string[length];
      this._paramValues = new SQLiteParameter[length];
      for (int index = 0; index < length; ++index)
      {
        string str = this._sql.Bind_ParamName(this, index + 1);
        if (string.IsNullOrEmpty(str))
        {
          str = string.Format((IFormatProvider) CultureInfo.InvariantCulture, ";{0}", new object[1]
          {
            (object) num
          });
          ++num;
          ++this._unnamedParameters;
        }
        this._paramNames[index] = str;
        this._paramValues[index] = (SQLiteParameter) null;
      }
    }

    internal bool MapParameter(string s, SQLiteParameter p)
    {
      if (this._paramNames == null)
        return false;
      int indexA = 0;
      if (s.Length > 0 && ":$@;".IndexOf(s[0]) == -1)
        indexA = 1;
      int length = this._paramNames.Length;
      for (int index = 0; index < length; ++index)
      {
        if (string.Compare(this._paramNames[index], indexA, s, 0, Math.Max(this._paramNames[index].Length - indexA, s.Length), StringComparison.OrdinalIgnoreCase) == 0)
        {
          this._paramValues[index] = p;
          return true;
        }
      }
      return false;
    }

    public void Dispose()
    {
      if (this._sqlite_stmt != null)
        this._sqlite_stmt.Dispose();
      this._sqlite_stmt = (SQLiteStatementHandle) null;
      this._paramNames = (string[]) null;
      this._paramValues = (SQLiteParameter[]) null;
      this._sql = (SQLiteBase) null;
      this._sqlStatement = (string) null;
    }

    internal void BindParameters()
    {
      if (this._paramNames == null)
        return;
      int length = this._paramNames.Length;
      for (int index = 0; index < length; ++index)
        this.BindParameter(index + 1, this._paramValues[index]);
    }

    private void BindParameter(int index, SQLiteParameter param)
    {
      object blobData = param != null ? param.Value : throw new SQLiteException(1, "Insufficient parameters supplied to the command");
      DbType dbType = param.DbType;
      if (Convert.IsDBNull(blobData) || blobData == null)
      {
        this._sql.Bind_Null(this, index);
      }
      else
      {
        if (dbType == DbType.Object)
          dbType = SQLiteConvert.TypeToDbType(blobData.GetType());
        switch (dbType - 1)
        {
          case DbType.AnsiString:
            this._sql.Bind_Blob(this, index, (byte[]) blobData);
            break;
          case DbType.Binary:
          case DbType.Byte:
          case DbType.Guid:
          case DbType.Int16:
          case DbType.Object:
          case DbType.Time:
          case DbType.UInt16:
            this._sql.Bind_Int32(this, index, Convert.ToInt32(blobData, (IFormatProvider) CultureInfo.CurrentCulture));
            break;
          case DbType.Boolean:
          case DbType.Decimal:
          case DbType.SByte:
            this._sql.Bind_Double(this, index, Convert.ToDouble(blobData, (IFormatProvider) CultureInfo.CurrentCulture));
            break;
          case DbType.Currency:
          case DbType.Date:
          case DbType.String:
            this._sql.Bind_DateTime(this, index, Convert.ToDateTime(blobData, (IFormatProvider) CultureInfo.CurrentCulture));
            break;
          case DbType.DateTime:
            this._sql.Bind_Text(this, index, Convert.ToDecimal(blobData, (IFormatProvider) CultureInfo.CurrentCulture).ToString((IFormatProvider) CultureInfo.InvariantCulture));
            break;
          case DbType.Double:
            if (this._command.Connection._binaryGuid)
            {
              this._sql.Bind_Blob(this, index, ((Guid) blobData).ToByteArray());
              break;
            }
            this._sql.Bind_Text(this, index, blobData.ToString());
            break;
          case DbType.Int32:
          case DbType.UInt32:
            this._sql.Bind_Int64(this, index, Convert.ToInt64(blobData, (IFormatProvider) CultureInfo.CurrentCulture));
            break;
          default:
            this._sql.Bind_Text(this, index, blobData.ToString());
            break;
        }
      }
    }

    internal string[] TypeDefinitions => this._types;

    internal void SetTypes(string typedefs)
    {
      int num = typedefs.IndexOf("TYPES", 0, StringComparison.OrdinalIgnoreCase);
      string[] strArray = num != -1 ? typedefs.Substring(num + 6).Replace(" ", "").Replace(";", "").Replace("\"", "").Replace("[", "").Replace("]", "").Replace("`", "").Split(',', '\r', '\n', '\t') : throw new ArgumentOutOfRangeException();
      for (int index = 0; index < strArray.Length; ++index)
      {
        if (string.IsNullOrEmpty(strArray[index]))
          strArray[index] = (string) null;
      }
      this._types = strArray;
    }
  }
}
