// Decompiled with JetBrains decompiler
// Type: AutoKMS.AutoKMS
// Assembly: AutoKMS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 273AC3B6-BDC9-4F75-A629-36925A25A147
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\HackTool.Win32.KMSAuto.i-471b0f750e4b41e2e2134c3e45695bf3f3bb236d8bfe427a1d8f5b79c6663339.exe

using AutoKMS.Properties;
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace AutoKMS
{
  internal class AutoKMS
  {
    private StreamWriter log = new StreamWriter("AutoKMS.log", true);
    private string logWrite;

    public Result RunAutoKMS()
    {
      Result result = new Result();
      try
      {
        this.logWrite = "------------------------------------";
        this.log.WriteLine(this.logWrite);
        this.logWrite = "AutoKMS Ran At " + (object) DateTime.Now + ".";
        this.log.WriteLine(this.logWrite);
        result = Common.KMSLicCheck(Common.OSPPVBS);
        if (result.HasError)
        {
          this.logWrite = "Failed To Check Installed KMS Products.";
          this.log.Write(this.logWrite);
        }
        else
        {
          this.logWrite = "Successfully Checked Installed KMS Products.";
          if (Common.AccessVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Access KMS Installed.";
          if (Common.ExcelVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Excel KMS Installed.";
          if (Common.GrooveVL)
            this.logWrite = this.logWrite + Environment.NewLine + "SharePoint Workspace KMS Installed.";
          if (Common.InfoPathVL)
            this.logWrite = this.logWrite + Environment.NewLine + "InfoPath KMS Installed.";
          if (Common.OneNoteVL)
            this.logWrite = this.logWrite + Environment.NewLine + "OneNote KMS Installed.";
          if (Common.OutlookVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Outlook KMS Installed.";
          if (Common.PowerPointVL)
            this.logWrite = this.logWrite + Environment.NewLine + "PowerPoint KMS Installed.";
          if (Common.ProjectProVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Project Professional KMS Installed.";
          if (Common.ProjectStdVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Project Standard KMS Installed.";
          if (Common.ProPlusVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Professional Plus KMS Installed.";
          if (Common.PublisherVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Publisher KMS Installed.";
          if (Common.SmallBusBasicsVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Small Business Basics KMS Installed.";
          if (Common.StandardVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Standard KMS Installed.";
          if (Common.VisioPremVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Visio Premium KMS Installed.";
          if (Common.VisioProVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Visio Professional KMS Installed.";
          if (Common.VisioStdVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Visio Standard KMS Installed.";
          if (Common.WordVL)
            this.logWrite = this.logWrite + Environment.NewLine + "Word KMS Installed.";
          this.log.WriteLine(this.logWrite);
        }
        result = Common.ExecuteCommand("cscript /nologo " + Common.OSPPVBS + " /sethst:127.0.0.1", 0, true);
        this.logWrite = !result.HasError ? "Successfully Set KMS Host To 127.0.0.1." : "Failed To Set KMS Host To 127.0.0.1.";
        this.log.WriteLine(this.logWrite);
        byte[] keygen = Resources.Keygen;
        string fileName = Common.TEMP + "\\Keygen.exe";
        FileInfo fileInfo1 = new FileInfo(fileName);
        if (fileInfo1.Exists)
        {
          foreach (Process process in Process.GetProcessesByName("Keygen"))
            Common.KillProcess(process);
          fileInfo1.Delete();
        }
        FileStream fileStream = fileInfo1.OpenWrite();
        fileStream.Write(keygen, 0, keygen.Length);
        fileStream.Close();
        result = Common.ExecuteCommand("start /B " + fileName, 0, false);
        this.logWrite = !result.HasError ? "Started Keygen." : "Failed To Copy Or Start Keygen.";
        this.log.WriteLine(this.logWrite);
        Thread.Sleep(5000);
        if (Common.AccessVL)
        {
          this.logWrite = "Attempting To Activate Access.";
          this.ActivateKMS("8ce7e872-188c-4b98-9d90-f8f90b7aad02");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.ExcelVL)
        {
          this.logWrite = "Attempting To Activate Excel.";
          this.ActivateKMS("cee5d470-6e3b-4fcc-8c2b-d17428568a9f");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.GrooveVL)
        {
          this.logWrite = "Attempting To Activate SharePoint Workspace.";
          this.ActivateKMS("8947d0b8-c33b-43e1-8c56-9b674c052832");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.InfoPathVL)
        {
          this.logWrite = "Attempting To Activate InfoPath.";
          this.ActivateKMS("ca6b6639-4ad6-40ae-a575-14dee07f6430");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.OneNoteVL)
        {
          this.logWrite = "Attempting To Activate OneNote.";
          this.ActivateKMS("ab586f5c-5256-4632-962f-fefd8b49e6f4");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.OutlookVL)
        {
          this.logWrite = "Attempting To Activate Outlook.";
          this.ActivateKMS("ecb7c192-73ab-4ded-acf4-2399b095d0cc");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.PowerPointVL)
        {
          this.logWrite = "Attempting To Activate PowerPoint.";
          this.ActivateKMS("45593b1d-dfb1-4e91-bbfb-2d5d0ce2227a");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.ProjectProVL)
        {
          this.logWrite = "Attempting To Activate Project Professional.";
          this.ActivateKMS("df133ff7-bf14-4f95-afe3-7b48e7e331ef");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.ProjectStdVL)
        {
          this.logWrite = "Attempting To Activate Project Standard.";
          this.ActivateKMS("5dc7bf61-5ec9-4996-9ccb-df806a2d0efe");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.ProPlusVL)
        {
          this.logWrite = "Attempting To Activate Professional Plus.";
          this.ActivateKMS("6f327760-8c5c-417c-9b61-836a98287e0c");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.PublisherVL)
        {
          this.logWrite = "Attempting To Activate Publisher.";
          this.ActivateKMS("b50c4f75-599b-43e8-8dcd-1081a7967241");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.SmallBusBasicsVL)
        {
          this.logWrite = "Attempting To Activate Small Business Basics.";
          this.ActivateKMS("ea509e87-07a1-4a45-9edc-eba5a39f36af");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.StandardVL)
        {
          this.logWrite = "Attempting To Activate Standard.";
          this.ActivateKMS("9da2a678-fb6b-4e67-ab84-60dd6a9c819a");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.VisioPremVL)
        {
          this.logWrite = "Attempting To Activate Visio Premium.";
          this.ActivateKMS("92236105-bb67-494f-94c7-7f7a607929bd");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.VisioProVL)
        {
          this.logWrite = "Attempting To Activate Visio Professional.";
          this.ActivateKMS("e558389c-83c3-4b29-adfe-5e4d7f46c358");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.VisioStdVL)
        {
          this.logWrite = "Attempting To Activate Visio Standard.";
          this.ActivateKMS("9ed833ff-4f92-4f36-b370-8683a4f13275");
          this.log.WriteLine(this.logWrite);
        }
        if (Common.WordVL)
        {
          this.logWrite = "Attempting To Activate Word.";
          this.ActivateKMS("2d0882e7-a4e7-423b-8ccc-70d91e0158b1");
          this.log.WriteLine(this.logWrite);
        }
        foreach (Process process in Process.GetProcessesByName("Keygen"))
          Common.KillProcess(process);
        this.logWrite = "Stopped Keygen.";
        this.log.WriteLine(this.logWrite);
        result = Common.ExecuteCommand("cscript /nologo " + Common.OSPPVBS + " /remhst", 0, true);
        FileInfo fileInfo2 = new FileInfo(Common.TEMP + "\\Keygen.exe");
        if (fileInfo2.Exists)
          File.Delete(fileInfo2.FullName);
        this.logWrite = !result.HasError ? "Removed KMS Host Registry Entry." : "Failed To Remove KMS Host Registry Entry.";
        this.log.WriteLine(this.logWrite);
        this.log.Close();
      }
      catch (Exception ex)
      {
        result.Error = ex.Message;
      }
      if (Common.SomethingFailed)
      {
        int num = (int) MessageBox.Show("One or more Office 2010 products failed KMS activation over 10 times!\nThis is a sign that there is a problem with your licensing!\nTry to use the Office 2010 Toolkit to Rearm, then do Manual Activation.\nAs a last resort reinstall Office 2010 or try using the Office 2010 Toolkit's Delete All License Info under License Management, then open Office 2010 and let it repair several times and try activation after repairs are complete.\n\nSee " + Environment.GetEnvironmentVariable("windir") + "\\AutoKMS.log for more details.", "AutoKMS Error", MessageBoxButtons.OK);
      }
      return result;
    }

    public bool ActivateKMS(string SKUID)
    {
      int num = 1;
      bool flag;
      for (flag = false; num < 11 && !flag; ++num)
      {
        Result result = new Result();
        if (!Common.ExecuteCommand("wmic path OfficeSoftwareProtectionProduct where ID=\"" + SKUID + "\" call Activate", 0, true).HasError)
        {
          this.logWrite = this.logWrite + Environment.NewLine + "Successfully activated after " + (object) num + " attempts.";
          return true;
        }
      }
      if (!flag)
      {
        this.logWrite = this.logWrite + Environment.NewLine + "Failed To Activate 10 Times.";
        Common.SomethingFailed = true;
        return false;
      }
      this.logWrite = this.logWrite + Environment.NewLine + "Successfully activated after " + (object) num + " attempts.";
      return true;
    }
  }
}
