// Decompiled with JetBrains decompiler
// Type: ProjNet.Maps.FacadeStatusMap
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Composer;
using IRefl.Pools;
using IRefl.Resolver;
using ProjNet.Candidates;
using ProjNet.Structs;
using System.Runtime.CompilerServices;

namespace ProjNet.Maps
{
  public class FacadeStatusMap : SpecificationMerchantCandidate
  {
    private string template;
    private string _Dispatcher;
    private long _Helper;
    private OrderValuePool _Factory;
    private string _Schema;
    private string m_Record;
    private Reg _Class;
    private Reg m_Struct;
    private DecoratorTokenizerResolver algo;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal FacadeStatusMap(
      Reg def,
      Reg cfg,
      DecoratorTokenizerResolver util,
      OrderValuePool init2,
      string res3,
      string caller4,
      long indexOf_reg5,
      string attr6,
      string col7)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_8;
            case 1:
              goto label_1;
            case 2:
            case 6:
              goto label_4;
            case 4:
              goto label_3;
            case 5:
              goto label_2;
            case 7:
              goto label_9;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_8;
          }
        }
label_1:
        this._Dispatcher = caller4;
        this._Helper = indexOf_reg5;
        num1 = 5;
        continue;
label_2:
        this.template = attr6;
        this.m_Record = col7;
        num1 = 7;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.m_Struct = cfg;
        this._Class = def;
        this.algo = util;
        this._Factory = init2;
        num1 = 6;
        continue;
label_4:
        this._Schema = res3;
        goto label_1;
label_8:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 4;
      }
label_9:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CloneMerchant() => this.template;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CountItem() => this._Dispatcher;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public long SelectItem() => this._Helper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public OrderValuePool GetMerchant() => this._Factory;

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Schema;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string EnableItem() => this.m_Record;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Reg CompareMerchant() => this._Class;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Reg LoginMerchant() => this.m_Struct;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public DecoratorTokenizerResolver ListMerchant() => this.algo;

    internal static bool IncludeWrapper() => true;

    internal static bool VisitWrapper() => false;
  }
}
