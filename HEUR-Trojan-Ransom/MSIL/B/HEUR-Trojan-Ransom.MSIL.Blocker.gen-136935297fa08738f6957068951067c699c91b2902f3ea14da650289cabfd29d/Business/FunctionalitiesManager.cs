// Decompiled with JetBrains decompiler
// Type: Coache.Business.FunctionalitiesManager
// Assembly: IsCopyConstruc, Version=5.6.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 1DA50973-FF9A-4563-8B8F-74E2573677DF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-136935297fa08738f6957068951067c699c91b2902f3ea14da650289cabfd29d.exe

using Coache.Common;
using Data;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;

namespace Coache.Business
{
  public class FunctionalitiesManager
  {
    public List<Functionalities> GetAllFunctionalities() => Enum.GetValues(typeof (Functionalities)).Cast<Functionalities>().ToList<Functionalities>();

    public void DeleteRoleFunctionalities(Rol rol) => SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.DeleteRoleFunctionalities", SqlDataAccessArgs.CreateWith("@Rol_ID", (object) rol.ID).Arguments);

    public void InsertRoleFunctionality(Rol rol, Functionalities functionality) => SqlDataAccess.ExecuteNonQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.InsertRoleFunctionality", SqlDataAccessArgs.CreateWith("@Rol_ID", (object) rol.ID).And("@Funcionalidad", (object) functionality.ToString()).Arguments);

    public List<Functionalities> GetRoleFunctionalities(int roleId)
    {
      List<Functionalities> roleFunctionalities = new List<Functionalities>();
      DataTable dataTable = SqlDataAccess.ExecuteDataTableQuery(ConfigurationManager.ConnectionStrings["GrouponConnectionString"].ToString(), "GRUPO_N.GetRoleFunctionalities", SqlDataAccessArgs.CreateWith("@Rol_ID", (object) roleId).Arguments);
      if (dataTable != null)
      {
        foreach (DataRow row in (InternalDataCollectionBase) dataTable.Rows)
        {
          Functionalities functionalities = (Functionalities) Enum.Parse(typeof (Functionalities), row["Descripcion"].ToString());
          roleFunctionalities.Add(functionalities);
        }
      }
      return roleFunctionalities;
    }
  }
}
