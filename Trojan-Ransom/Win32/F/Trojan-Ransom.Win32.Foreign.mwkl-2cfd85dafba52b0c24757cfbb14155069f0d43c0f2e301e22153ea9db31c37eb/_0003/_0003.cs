// Decompiled with JetBrains decompiler
// Type: .
// Assembly: NclMSBTSrv, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: D5A0D8E1-C965-4BA1-9359-4A257BEDEA63
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Foreign.mwkl-2cfd85dafba52b0c24757cfbb14155069f0d43c0f2e301e22153ea9db31c37eb.exe

using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0003
{
  [\u0003.\u0001]
  [\u0001.\u0001]
  internal static class \u0003
  {
    [\u0003.\u0001]
    [\u0001.\u0001]
    [\u0002.\u0001]
    public static void \u0001([In] Type obj0)
    {
      FieldInfo[] fields = obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
      if (true)
        goto label_27;
label_1:
      int index1;
      do
      {
        if (true)
          goto label_28;
label_2:
        continue;
label_28:
        index1 = 0;
        goto label_2;
      }
      while (false);
      FieldInfo[] fieldInfoArray;
      while (true)
      {
        int num1 = index1;
        int num2 = fieldInfoArray.Length;
        if (true)
          num2 = num2;
        if (num1 < num2)
        {
          do
          {
            FieldInfo fieldInfo1 = fieldInfoArray[index1];
            if (true)
              goto label_29;
label_4:
            FieldInfo fieldInfo2;
            try
            {
              if ((object) fieldInfo2.FieldType == (object) typeof (\u0004.\u0003))
              {
                DynamicMethod dynamicMethod1;
                ILGenerator ilGenerator1;
                MethodInfo[] methods;
                int index2;
                if (true)
                {
                  string empty = string.Empty;
                  Type returnType = typeof (string);
                  Type[] typeArray1 = new Type[1];
                  if (true)
                    goto label_18;
label_7:
                  Type[] typeArray2;
                  typeArray2[0] = typeof (int);
                  Type[] parameterTypes = typeArray2;
                  Module module = obj0.Module;
                  DynamicMethod dynamicMethod2 = new DynamicMethod(empty, returnType, parameterTypes, module, true);
                  if (true)
                    goto label_19;
label_8:
                  ILGenerator ilGenerator2 = dynamicMethod1.GetILGenerator();
                  if (true)
                    goto label_20;
label_9:
                  ilGenerator1.Emit(OpCodes.Ldarg_0);
                  methods = typeof (\u0002.\u0002).GetMethods(BindingFlags.Static | BindingFlags.Public);
                  index2 = 0;
                  goto label_16;
label_20:
                  ilGenerator1 = ilGenerator2;
                  goto label_9;
label_19:
                  dynamicMethod1 = dynamicMethod2;
                  goto label_8;
label_18:
                  typeArray2 = typeArray1;
                  goto label_7;
                }
label_12:
                MethodInfo meth;
                if ((object) meth.ReturnType == (object) typeof (string))
                {
                  ilGenerator1.Emit(OpCodes.Ldc_I4, fieldInfo2.MetadataToken & 16777215);
                  ilGenerator1.Emit(OpCodes.Sub);
                  if (true)
                  {
                    ilGenerator1.Emit(OpCodes.Call, meth);
                    goto label_17;
                  }
                }
                else
                  ++index2;
label_16:
                if (index2 < methods.Length)
                {
                  meth = methods[index2];
                  goto label_12;
                }
label_17:
                ilGenerator1.Emit(OpCodes.Ret);
                fieldInfo2.SetValue((object) null, (object) dynamicMethod1.CreateDelegate(typeof (\u0004.\u0003)));
                return;
              }
            }
            catch
            {
            }
            continue;
label_29:
            fieldInfo2 = fieldInfo1;
            goto label_4;
          }
          while (false);
          ++index1;
        }
        else
          break;
      }
      return;
label_27:
      fieldInfoArray = fields;
      goto label_1;
    }
  }
}
