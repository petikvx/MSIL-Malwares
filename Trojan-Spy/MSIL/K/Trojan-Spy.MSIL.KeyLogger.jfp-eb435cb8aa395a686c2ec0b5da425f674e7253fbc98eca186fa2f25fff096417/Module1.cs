// Decompiled with JetBrains decompiler
// Type: J_Logger_Public_Stub.Module1
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A1FB8C7A-C4EB-4CE2-93CC-E7DB21982219
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.jfp-eb435cb8aa395a686c2ec0b5da425f674e7253fbc98eca186fa2f25fff096417.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Text;
using System.Threading;

namespace J_Logger_Public_Stub
{
  [StandardModule]
  internal sealed class Module1
  {
    public sealed class Encryption
    {
      private Encryption()
      {
      }

      public static string Encrypt(string message, string key)
      {
        switch (message)
        {
          case "":
          case null:
            throw new ArgumentNullException(nameof (message));
          default:
            switch (key)
            {
              case "":
              case null:
                throw new ArgumentNullException(nameof (key));
              default:
                string empty = string.Empty;
                return Module1.Encryption.StringToHex(Module1.Encryption.EnDeCrypt(message, key));
            }
        }
      }

      public static string Decrypt(string message, string key)
      {
        switch (message)
        {
          case "":
          case null:
            throw new ArgumentNullException(nameof (message));
          default:
            switch (key)
            {
              case "":
              case null:
                throw new ArgumentNullException(nameof (key));
              default:
                string empty = string.Empty;
                return Module1.Encryption.EnDeCrypt(Module1.Encryption.HexToString(message), key);
            }
        }
      }

      private static string EnDeCrypt(string message, string password)
      {
        int index1 = 0;
        int index2 = 0;
        StringBuilder stringBuilder = new StringBuilder();
        string empty = string.Empty;
        int[] numArray1 = new int[257];
        int[] numArray2 = new int[257];
        int length = password.Length;
        int location1 = 0;
        while (location1 <= (int) byte.MaxValue)
        {
          char String = password.Substring(location1 % length, 1).ToCharArray()[0];
          numArray2[location1] = Strings.Asc(String);
          numArray1[location1] = location1;
          Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
        }
        int index3 = 0;
        int location2 = 0;
        while (location2 <= (int) byte.MaxValue)
        {
          index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
          int num = numArray1[location2];
          numArray1[location2] = numArray1[index3];
          numArray1[index3] = num;
          Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
        }
        location1 = 1;
        while (location1 <= message.Length)
        {
          index1 = checked (index1 + 1) % 256;
          index2 = checked (index2 + numArray1[index1]) % 256;
          int num1 = numArray1[index1];
          numArray1[index1] = numArray1[index2];
          numArray1[index2] = num1;
          int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
          int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
          stringBuilder.Append(Strings.Chr(CharCode));
          Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
        }
        string str = stringBuilder.ToString();
        stringBuilder.Length = 0;
        return str;
      }

      private static string StringToHex(string message)
      {
        StringBuilder stringBuilder = new StringBuilder();
        string empty = string.Empty;
        long num = (long) Strings.Len(message);
        long Start = 1;
        while (Start <= num)
        {
          stringBuilder.Append(Strings.Right("0" + Conversion.Hex(Strings.Asc(Strings.Mid(message, checked ((int) Start), 1))), 2));
          checked { ++Start; }
        }
        string hex = stringBuilder.ToString();
        stringBuilder.Length = 0;
        return hex;
      }

      private static string HexToString(string hex)
      {
        StringBuilder stringBuilder = new StringBuilder();
        string empty = string.Empty;
        long num = (long) Strings.Len(hex);
        long Start = 1;
        while (Start <= num)
        {
          stringBuilder.Append(Strings.Chr(Conversions.ToInteger("&h" + Strings.Mid(hex, checked ((int) Start), 2))));
          checked { Start += 2L; }
        }
        string str = stringBuilder.ToString();
        stringBuilder.Length = 0;
        return str;
      }
    }
  }
}
