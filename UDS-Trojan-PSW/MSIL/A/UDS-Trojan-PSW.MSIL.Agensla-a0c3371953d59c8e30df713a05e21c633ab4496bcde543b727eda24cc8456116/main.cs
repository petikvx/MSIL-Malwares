// Decompiled with JetBrains decompiler
// Type: WindowsApplication1.main
// Assembly: 1q54, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FC293CCC-8D98-4BF2-AEBE-6E8F2306BDEF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan-PSW.MSIL.Agensla-a0c3371953d59c8e30df713a05e21c633ab4496bcde543b727eda24cc8456116.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;
using WindowsApplication1.My;

namespace WindowsApplication1
{
  [DesignerGenerated]
  public class main : Form
  {
    private IContainer components;
    public string maploc;
    public string mapsloc;
    public int time;
    public string Mapname;
    public string MapIns;
    public int start1X;
    public int start1Y;
    public int start2X;
    public int start2Y;
    public int CP1X;
    public int CP1Y;
    public int CP2X;
    public int CP2Y;
    public int RX;
    public int RY;
    public bool CP;
    public int Walk;
    public Bitmap bmp;
    public Bitmap cbmp;
    public Color DColor;
    public double Speed;
    public double TSpeed;

    public main()
    {
      this.Load += new EventHandler(this.main_Load);
      this.maploc = "";
      this.mapsloc = "";
      this.time = 0;
      this.Mapname = "";
      this.MapIns = "";
      this.start1X = 0;
      this.start1Y = 0;
      this.start2X = 0;
      this.start2Y = 0;
      this.CP1X = 0;
      this.CP1Y = 0;
      this.CP2X = 0;
      this.CP2Y = 0;
      this.RX = 0;
      this.RY = 0;
      this.CP = false;
      this.Walk = 0;
      this.Speed = 0.0;
      this.TSpeed = 0.0;
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.PictureBox1 = new PictureBox();
      this.StatusStrip1 = new StatusStrip();
      this.MapT = new ToolStripStatusLabel();
      this.TimeLabel = new ToolStripStatusLabel();
      this.SpeedLabel = new ToolStripStatusLabel();
      this.MapLoader = new OpenFileDialog();
      this.Timer1 = new Timer(this.components);
      this.Key7 = new Button();
      this.Key8 = new Button();
      this.Key9 = new Button();
      this.Key1 = new Button();
      this.Key2 = new Button();
      this.Key3 = new Button();
      this.Key6 = new Button();
      this.Key4 = new Button();
      this.Position = new Button();
      this.Key5 = new Button();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.StatusStrip1.SuspendLayout();
      this.SuspendLayout();
      this.PictureBox1.Location = new Point(0, 0);
      this.PictureBox1.Name = "PictureBox1";
      this.PictureBox1.Size = new Size(1024, 768);
      this.PictureBox1.TabIndex = 0;
      this.PictureBox1.TabStop = false;
      this.StatusStrip1.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.MapT,
        (ToolStripItem) this.TimeLabel,
        (ToolStripItem) this.SpeedLabel
      });
      this.StatusStrip1.Location = new Point(0, 788);
      this.StatusStrip1.Name = "StatusStrip1";
      this.StatusStrip1.Size = new Size(1026, 22);
      this.StatusStrip1.TabIndex = 1;
      this.StatusStrip1.Text = "StatusStrip1";
      this.MapT.Name = "MapT";
      this.MapT.Size = new Size(68, 17);
      this.MapT.Text = "当前地图：";
      this.TimeLabel.Name = "TimeLabel";
      this.TimeLabel.Size = new Size(68, 17);
      this.TimeLabel.Text = "游戏时间：";
      this.SpeedLabel.Name = "SpeedLabel";
      this.SpeedLabel.Size = new Size(68, 17);
      this.SpeedLabel.Text = "赛车速度：";
      this.MapLoader.Filter = "纸上赛车地图文件|*.map|所有文件|*.*";
      this.MapLoader.InitialDirectory = "\\Map\\";
      this.MapLoader.Title = "请换取一张地图";
      this.Timer1.Interval = 1000;
      this.Key7.BackColor = Color.White;
      this.Key7.Location = new Point(27, 12);
      this.Key7.Name = "Key7";
      this.Key7.Size = new Size(20, 20);
      this.Key7.TabIndex = 2;
      this.Key7.Text = "↖";
      this.Key7.UseVisualStyleBackColor = false;
      this.Key8.BackColor = Color.White;
      this.Key8.Location = new Point(53, 12);
      this.Key8.Name = "Key8";
      this.Key8.Size = new Size(20, 20);
      this.Key8.TabIndex = 3;
      this.Key8.Text = "↑";
      this.Key8.UseVisualStyleBackColor = false;
      this.Key9.BackColor = Color.White;
      this.Key9.Location = new Point(79, 12);
      this.Key9.Name = "Key9";
      this.Key9.Size = new Size(20, 20);
      this.Key9.TabIndex = 4;
      this.Key9.Text = "↗";
      this.Key9.UseVisualStyleBackColor = false;
      this.Key1.BackColor = Color.White;
      this.Key1.Location = new Point(27, 64);
      this.Key1.Name = "Key1";
      this.Key1.Size = new Size(20, 20);
      this.Key1.TabIndex = 5;
      this.Key1.Text = "↙";
      this.Key1.UseVisualStyleBackColor = false;
      this.Key2.BackColor = Color.White;
      this.Key2.Location = new Point(53, 64);
      this.Key2.Name = "Key2";
      this.Key2.Size = new Size(20, 20);
      this.Key2.TabIndex = 6;
      this.Key2.Text = "↓";
      this.Key2.UseVisualStyleBackColor = false;
      this.Key3.BackColor = Color.White;
      this.Key3.Location = new Point(79, 64);
      this.Key3.Name = "Key3";
      this.Key3.Size = new Size(20, 20);
      this.Key3.TabIndex = 7;
      this.Key3.Text = "↘";
      this.Key3.UseVisualStyleBackColor = false;
      this.Key6.BackColor = Color.White;
      this.Key6.Location = new Point(79, 38);
      this.Key6.Name = "Key6";
      this.Key6.Size = new Size(20, 20);
      this.Key6.TabIndex = 8;
      this.Key6.Text = "→";
      this.Key6.UseVisualStyleBackColor = false;
      this.Key4.BackColor = Color.White;
      this.Key4.Location = new Point(27, 38);
      this.Key4.Name = "Key4";
      this.Key4.Size = new Size(20, 20);
      this.Key4.TabIndex = 9;
      this.Key4.Text = "←";
      this.Key4.UseVisualStyleBackColor = false;
      this.Position.BackColor = Color.White;
      this.Position.Enabled = false;
      this.Position.Location = new Point(53, 149);
      this.Position.Name = "Position";
      this.Position.Size = new Size(20, 20);
      this.Position.TabIndex = 10;
      this.Position.Text = "M";
      this.Position.UseVisualStyleBackColor = false;
      this.Key5.BackColor = Color.White;
      this.Key5.Location = new Point(52, 39);
      this.Key5.Name = "Key5";
      this.Key5.Size = new Size(20, 20);
      this.Key5.TabIndex = 11;
      this.Key5.Text = "○";
      this.Key5.UseVisualStyleBackColor = false;
      this.AutoScaleDimensions = new SizeF(6f, 12f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1026, 810);
      this.Controls.Add((Control) this.Key5);
      this.Controls.Add((Control) this.Position);
      this.Controls.Add((Control) this.Key4);
      this.Controls.Add((Control) this.Key6);
      this.Controls.Add((Control) this.Key3);
      this.Controls.Add((Control) this.Key2);
      this.Controls.Add((Control) this.Key1);
      this.Controls.Add((Control) this.Key9);
      this.Controls.Add((Control) this.Key8);
      this.Controls.Add((Control) this.Key7);
      this.Controls.Add((Control) this.StatusStrip1);
      this.Controls.Add((Control) this.PictureBox1);
      this.Name = nameof (main);
      this.Text = "像素赛车";
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.StatusStrip1.ResumeLayout(false);
      this.StatusStrip1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("PictureBox1")]
    internal virtual PictureBox PictureBox1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("StatusStrip1")]
    internal virtual StatusStrip StatusStrip1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("MapT")]
    internal virtual ToolStripStatusLabel MapT { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("TimeLabel")]
    internal virtual ToolStripStatusLabel TimeLabel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("MapLoader")]
    internal virtual OpenFileDialog MapLoader { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        Timer timer1_1 = this._Timer1;
        if (timer1_1 != null)
          timer1_1.Tick -= eventHandler;
        this._Timer1 = value;
        Timer timer1_2 = this._Timer1;
        if (timer1_2 == null)
          return;
        timer1_2.Tick += eventHandler;
      }
    }

    internal virtual Button Key7
    {
      get => this._Key7;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key7_Click);
        Button key7_1 = this._Key7;
        if (key7_1 != null)
          key7_1.Click -= eventHandler;
        this._Key7 = value;
        Button key7_2 = this._Key7;
        if (key7_2 == null)
          return;
        key7_2.Click += eventHandler;
      }
    }

    internal virtual Button Key8
    {
      get => this._Key8;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key8_Click);
        Button key8_1 = this._Key8;
        if (key8_1 != null)
          key8_1.Click -= eventHandler;
        this._Key8 = value;
        Button key8_2 = this._Key8;
        if (key8_2 == null)
          return;
        key8_2.Click += eventHandler;
      }
    }

    internal virtual Button Key9
    {
      get => this._Key9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key9_Click);
        Button key9_1 = this._Key9;
        if (key9_1 != null)
          key9_1.Click -= eventHandler;
        this._Key9 = value;
        Button key9_2 = this._Key9;
        if (key9_2 == null)
          return;
        key9_2.Click += eventHandler;
      }
    }

    internal virtual Button Key1
    {
      get => this._Key1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key1_Click);
        Button key1_1 = this._Key1;
        if (key1_1 != null)
          key1_1.Click -= eventHandler;
        this._Key1 = value;
        Button key1_2 = this._Key1;
        if (key1_2 == null)
          return;
        key1_2.Click += eventHandler;
      }
    }

    internal virtual Button Key2
    {
      get => this._Key2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key2_Click);
        Button key2_1 = this._Key2;
        if (key2_1 != null)
          key2_1.Click -= eventHandler;
        this._Key2 = value;
        Button key2_2 = this._Key2;
        if (key2_2 == null)
          return;
        key2_2.Click += eventHandler;
      }
    }

    internal virtual Button Key3
    {
      get => this._Key3;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key3_Click);
        Button key3_1 = this._Key3;
        if (key3_1 != null)
          key3_1.Click -= eventHandler;
        this._Key3 = value;
        Button key3_2 = this._Key3;
        if (key3_2 == null)
          return;
        key3_2.Click += eventHandler;
      }
    }

    internal virtual Button Key6
    {
      get => this._Key6;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key6_Click);
        Button key6_1 = this._Key6;
        if (key6_1 != null)
          key6_1.Click -= eventHandler;
        this._Key6 = value;
        Button key6_2 = this._Key6;
        if (key6_2 == null)
          return;
        key6_2.Click += eventHandler;
      }
    }

    internal virtual Button Key4
    {
      get => this._Key4;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key4_Click);
        Button key4_1 = this._Key4;
        if (key4_1 != null)
          key4_1.Click -= eventHandler;
        this._Key4 = value;
        Button key4_2 = this._Key4;
        if (key4_2 == null)
          return;
        key4_2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Position")]
    internal virtual Button Position { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button Key5
    {
      get => this._Key5;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Key5_Click);
        Button key5_1 = this._Key5;
        if (key5_1 != null)
          key5_1.Click -= eventHandler;
        this._Key5 = value;
        Button key5_2 = this._Key5;
        if (key5_2 == null)
          return;
        key5_2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("SpeedLabel")]
    internal virtual ToolStripStatusLabel SpeedLabel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    private void main_Load(object sender, EventArgs e)
    {
      try
      {
        int num1 = (int) this.MapLoader.ShowDialog();
        char[] charArrayRankOne = Conversions.ToCharArrayRankOne(this.MapLoader.FileName);
        int num2 = checked (charArrayRankOne.Length - 4);
        int index = 0;
        while (index <= num2)
        {
          // ISSUE: variable of a reference type
          string& local;
          // ISSUE: explicit reference operation
          string str = ^(local = ref this.maploc) + Conversions.ToString(charArrayRankOne[index]);
          local = str;
          checked { ++index; }
        }
        // ISSUE: variable of a reference type
        string& local1;
        // ISSUE: explicit reference operation
        string str1 = ^(local1 = ref this.maploc) + "bmp";
        local1 = str1;
        this.mapsloc = this.MapLoader.FileName;
        StreamReader streamReader = new StreamReader(this.mapsloc, Encoding.GetEncoding("GB2312"));
        this.Mapname = streamReader.ReadLine();
        this.MapIns = streamReader.ReadLine();
        this.start1X = Conversions.ToInteger(streamReader.ReadLine());
        this.start1Y = Conversions.ToInteger(streamReader.ReadLine());
        this.start2X = Conversions.ToInteger(streamReader.ReadLine());
        this.start2Y = Conversions.ToInteger(streamReader.ReadLine());
        this.CP1X = Conversions.ToInteger(streamReader.ReadLine());
        this.CP1Y = Conversions.ToInteger(streamReader.ReadLine());
        this.CP2X = Conversions.ToInteger(streamReader.ReadLine());
        this.CP2Y = Conversions.ToInteger(streamReader.ReadLine());
        streamReader.Close();
        this.MapT.Text = "地图名称: " + this.Mapname;
        this.Timer1.Enabled = true;
        this.Position.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 10.0))));
        this.Key7.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 30.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 30.0))));
        this.Key8.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 30.0))));
        this.Key9.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 + 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 30.0))));
        this.Key4.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 30.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 10.0))));
        this.Key5.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 10.0))));
        this.Key6.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 + 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 - 10.0))));
        this.Key1.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 30.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 + 10.0))));
        this.Key2.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 - 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 + 10.0))));
        this.Key3.Location = new Point(checked ((int) Math.Round(unchecked ((double) checked (this.start1X + this.start2X) / 2.0 + 10.0))), checked ((int) Math.Round(unchecked ((double) checked (this.start1Y + this.start2Y) / 2.0 + 10.0))));
        this.SpeedLabel.Text = "赛车速度" + Conversions.ToString(Conversion.Int(this.Speed * 100.0) / 100.0) + "像素/每步";
        this.bmp = (Bitmap) Image.FromFile(this.maploc);
        this.cbmp = (Bitmap) Image.FromFile(this.maploc);
        this.DColor = this.bmp.GetPixel(1, 1);
        int num3 = 0;
        do
        {
          int num4 = 0;
          do
          {
            Bitmap bmp = this.bmp;
            Point location = this.Position.Location;
            int x = checked (location.X + num3 + 5);
            location = this.Position.Location;
            int y = checked (location.Y + num4 + 5);
            Color green = Color.Green;
            bmp.SetPixel(x, y, green);
            this.PictureBox1.Image = (Image) this.bmp;
            checked { ++num4; }
          }
          while (num4 <= 9);
          checked { ++num3; }
        }
        while (num3 <= 9);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        MyProject.Forms.LoadForm.Close();
        this.Close();
        ProjectData.ClearProjectError();
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      // ISSUE: variable of a reference type
      int& local;
      // ISSUE: explicit reference operation
      int num = checked (^(local = ref this.time) + 1);
      local = num;
      this.TimeLabel.Text = "游戏时间：" + Conversions.ToString(this.time) + "秒";
    }

    private void Key5_Click(object sender, EventArgs e)
    {
      Point location = this.Key5.Location;
      if (this.Key5.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key7_Click(object sender, EventArgs e)
    {
      Point location = this.Key7.Location;
      if (this.Key7.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key8_Click(object sender, EventArgs e)
    {
      Point location = this.Key8.Location;
      if (this.Key8.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key9_Click(object sender, EventArgs e)
    {
      Point location = this.Key9.Location;
      if (this.Key9.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key4_Click(object sender, EventArgs e)
    {
      Point location = this.Key4.Location;
      if (this.Key4.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key6_Click(object sender, EventArgs e)
    {
      Point location = this.Key6.Location;
      if (this.Key6.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key1_Click(object sender, EventArgs e)
    {
      Point location = this.Key1.Location;
      if (this.Key1.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key2_Click(object sender, EventArgs e)
    {
      Point location = this.Key2.Location;
      if (this.Key2.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void Key3_Click(object sender, EventArgs e)
    {
      Point location = this.Key3.Location;
      if (this.Key3.BackColor == Color.Red)
      {
        this.RX = 0;
        this.RY = 0;
      }
      else
      {
        this.RX = checked (location.X - this.Position.Location.X);
        this.RY = checked (location.Y - this.Position.Location.Y);
      }
      this.MoveAction(location);
    }

    private void MoveAction(Point Go)
    {
      // ISSUE: variable of a reference type
      int& local1;
      // ISSUE: explicit reference operation
      int num1 = checked (^(local1 = ref this.Walk) + 1);
      local1 = num1;
      this.Speed = Math.Sqrt(Math.Pow((double) Math.Abs(checked (Go.X - this.Position.Location.X)), 2.0) + Math.Pow((double) Math.Abs(checked (Go.Y - this.Position.Location.Y)), 2.0));
      this.SpeedLabel.Text = "赛车速度：" + Conversions.ToString(Conversion.Int(this.Speed * 100.0) / 100.0) + "像素/每步";
      // ISSUE: variable of a reference type
      double& local2;
      // ISSUE: explicit reference operation
      double num2 = ^(local2 = ref this.TSpeed) + this.Speed;
      local2 = num2;
      int num3 = checked ((int) Math.Round(unchecked ((double) checked (-Math.Abs(Go.Y - this.Position.Location.Y)) / 40.0)));
      int num4 = checked ((int) Math.Round(unchecked ((double) Math.Abs(checked (Go.Y - this.Position.Location.Y)) / 40.0)));
      int num5 = num3;
      Point location;
      while (num5 <= num4)
      {
        double num6 = 1.0;
        do
        {
          Bitmap bmp = this.bmp;
          int x1 = Go.X;
          location = this.Position.Location;
          int x2 = location.X;
          double num7 = (double) checked (x1 - x2) / num6 + (double) num5;
          location = this.Position.Location;
          double x3 = (double) location.X;
          int x4 = checked ((int) Math.Round(unchecked (num7 + x3 + 10.0)));
          int y1 = Go.Y;
          location = this.Position.Location;
          int y2 = location.Y;
          double num8 = (double) checked (y1 - y2) / num6;
          location = this.Position.Location;
          double y3 = (double) location.Y;
          int y4 = checked ((int) Math.Round(unchecked (num8 + y3 + 10.0)));
          Color green = Color.Green;
          bmp.SetPixel(x4, y4, green);
          int x5 = Go.X;
          location = this.Position.Location;
          int x6 = location.X;
          double num9 = (double) checked (x5 - x6) / num6;
          location = this.Position.Location;
          double x7 = (double) location.X;
          int num10 = Conversion.Int(num9 + x7) >= (double) this.CP1X ? 1 : 0;
          int x8 = Go.X;
          location = this.Position.Location;
          int x9 = location.X;
          double num11 = (double) checked (x8 - x9) / num6;
          location = this.Position.Location;
          double x10 = (double) location.X;
          int num12 = Conversion.Int(num11 + x10) <= (double) this.CP2X ? 1 : 0;
          int num13 = num10 & num12;
          int y5 = Go.Y;
          location = this.Position.Location;
          int y6 = location.Y;
          double num14 = (double) checked (y5 - y6) / num6;
          location = this.Position.Location;
          double y7 = (double) location.Y;
          int num15 = Conversion.Int(num14 + y7) >= (double) this.CP1Y ? 1 : 0;
          int num16 = num13 & num15;
          int y8 = Go.Y;
          location = this.Position.Location;
          int y9 = location.Y;
          double num17 = (double) checked (y8 - y9) / num6;
          location = this.Position.Location;
          double y10 = (double) location.Y;
          int num18 = Conversion.Int(num17 + y10) <= (double) this.CP2Y ? 1 : 0;
          if ((num16 & num18) != 0)
            this.CP = true;
          int x11 = Go.X;
          location = this.Position.Location;
          int x12 = location.X;
          double num19 = (double) checked (x11 - x12) / num6;
          location = this.Position.Location;
          double x13 = (double) location.X;
          int num20 = Conversion.Int(num19 + x13) >= (double) this.start1X ? 1 : 0;
          int x14 = Go.X;
          location = this.Position.Location;
          int x15 = location.X;
          double num21 = (double) checked (x14 - x15) / num6;
          location = this.Position.Location;
          double x16 = (double) location.X;
          int num22 = Conversion.Int(num21 + x16) <= (double) this.start2X ? 1 : 0;
          int num23 = num20 & num22;
          int y11 = Go.Y;
          location = this.Position.Location;
          int y12 = location.Y;
          double num24 = (double) checked (y11 - y12) / num6;
          location = this.Position.Location;
          double y13 = (double) location.Y;
          int num25 = Conversion.Int(num24 + y13) >= (double) this.start1Y ? 1 : 0;
          int num26 = num23 & num25;
          int y14 = Go.Y;
          location = this.Position.Location;
          int y15 = location.Y;
          double num27 = (double) checked (y14 - y15) / num6;
          location = this.Position.Location;
          double y16 = (double) location.Y;
          int num28 = Conversion.Int(num27 + y16) <= (double) this.start2Y ? 1 : 0;
          if ((num26 & num28 & (this.CP ? 1 : 0)) != 0)
          {
            MyProject.Forms.Award.Show();
            this.Visible = false;
          }
          num6 += 0.01;
        }
        while (num6 <= 100.0);
        checked { ++num5; }
      }
      int x17 = Go.X;
      location = this.Position.Location;
      int x18 = location.X;
      int num29 = checked ((int) Math.Round(unchecked ((double) checked (0 - Math.Abs(x17 - x18)) / 40.0)));
      int x19 = Go.X;
      location = this.Position.Location;
      int x20 = location.X;
      int num30 = checked ((int) Math.Round(unchecked ((double) Math.Abs(checked (x19 - x20)) / 40.0)));
      int num31 = num29;
      while (num31 <= num30)
      {
        double num32 = 1.0;
        do
        {
          Bitmap bmp = this.bmp;
          int x21 = Go.X;
          location = this.Position.Location;
          int x22 = location.X;
          double num33 = (double) checked (x21 - x22) / num32;
          location = this.Position.Location;
          double x23 = (double) location.X;
          int x24 = checked ((int) Math.Round(unchecked (num33 + x23 + 10.0)));
          int y17 = Go.Y;
          location = this.Position.Location;
          int y18 = location.Y;
          double num34 = (double) checked (y17 - y18) / num32 + (double) num31;
          location = this.Position.Location;
          double y19 = (double) location.Y;
          int y20 = checked ((int) Math.Round(unchecked (num34 + y19 + 10.0)));
          Color green = Color.Green;
          bmp.SetPixel(x24, y20, green);
          int x25 = Go.X;
          location = this.Position.Location;
          int x26 = location.X;
          double num35 = (double) checked (x25 - x26) / num32;
          location = this.Position.Location;
          double x27 = (double) location.X;
          int num36 = Conversion.Int(num35 + x27) >= (double) this.CP1X ? 1 : 0;
          int x28 = Go.X;
          location = this.Position.Location;
          int x29 = location.X;
          double num37 = (double) checked (x28 - x29) / num32;
          location = this.Position.Location;
          double x30 = (double) location.X;
          int num38 = Conversion.Int(num37 + x30) <= (double) this.CP2X ? 1 : 0;
          int num39 = num36 & num38;
          int y21 = Go.Y;
          location = this.Position.Location;
          int y22 = location.Y;
          double num40 = (double) checked (y21 - y22) / num32;
          location = this.Position.Location;
          double y23 = (double) location.Y;
          int num41 = Conversion.Int(num40 + y23) >= (double) this.CP1Y ? 1 : 0;
          int num42 = num39 & num41;
          int y24 = Go.Y;
          location = this.Position.Location;
          int y25 = location.Y;
          double num43 = (double) checked (y24 - y25) / num32;
          location = this.Position.Location;
          double y26 = (double) location.Y;
          int num44 = Conversion.Int(num43 + y26) <= (double) this.CP2Y ? 1 : 0;
          if ((num42 & num44) != 0)
            this.CP = true;
          int x31 = Go.X;
          location = this.Position.Location;
          int x32 = location.X;
          double num45 = (double) checked (x31 - x32) / num32;
          location = this.Position.Location;
          double x33 = (double) location.X;
          int num46 = Conversion.Int(num45 + x33) >= (double) this.start1X ? 1 : 0;
          int x34 = Go.X;
          location = this.Position.Location;
          int x35 = location.X;
          double num47 = (double) checked (x34 - x35) / num32;
          location = this.Position.Location;
          double x36 = (double) location.X;
          int num48 = Conversion.Int(num47 + x36) <= (double) this.start2X ? 1 : 0;
          int num49 = num46 & num48;
          int y27 = Go.Y;
          location = this.Position.Location;
          int y28 = location.Y;
          double num50 = (double) checked (y27 - y28) / num32;
          location = this.Position.Location;
          double y29 = (double) location.Y;
          int num51 = Conversion.Int(num50 + y29) >= (double) this.start1Y ? 1 : 0;
          int num52 = num49 & num51;
          int y30 = Go.Y;
          location = this.Position.Location;
          int y31 = location.Y;
          double num53 = (double) checked (y30 - y31) / num32;
          location = this.Position.Location;
          double y32 = (double) location.Y;
          int num54 = Conversion.Int(num53 + y32) <= (double) this.start2Y ? 1 : 0;
          if ((num52 & num54 & (this.CP ? 1 : 0)) != 0)
          {
            MyProject.Forms.Award.Show();
            this.Visible = false;
          }
          num32 += 0.005;
        }
        while (num32 <= 50.0);
        checked { ++num31; }
      }
      this.PictureBox1.Image = (Image) this.bmp;
      this.Position.Location = Go;
      this.Key5.Location = new Point(checked (Go.X + this.RX), checked (Go.Y + this.RY));
      this.Key7.Location = new Point(checked (Go.X + this.RX - 20), checked (Go.Y + this.RY - 20));
      this.Key8.Location = new Point(checked (Go.X + this.RX), checked (Go.Y + this.RY - 20));
      this.Key9.Location = new Point(checked (Go.X + this.RX + 20), checked (Go.Y + this.RY - 20));
      this.Key4.Location = new Point(checked (Go.X + this.RX - 20), checked (Go.Y + this.RY));
      this.Key6.Location = new Point(checked (Go.X + this.RX + 20), checked (Go.Y + this.RY));
      this.Key1.Location = new Point(checked (Go.X + this.RX - 20), checked (Go.Y + this.RY + 20));
      this.Key2.Location = new Point(checked (Go.X + this.RX), checked (Go.Y + this.RY + 20));
      this.Key3.Location = new Point(checked (Go.X + this.RX + 20), checked (Go.Y + this.RY + 20));
      location = this.Key1.Location;
      int num55 = location.X > 0 ? 1 : 0;
      location = this.Key1.Location;
      int num56 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num57 = num55 & num56;
      location = this.Key1.Location;
      int num58 = location.Y > 0 ? 1 : 0;
      int num59 = num57 & num58;
      location = this.Key1.Location;
      int num60 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num59 & num60) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key1.Location;
        int x37 = checked (location.X + 10);
        location = this.Key1.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x37, y) == this.DColor)
          this.Key1.BackColor = Color.Red;
        else
          this.Key1.BackColor = Color.White;
        this.Key1.Enabled = true;
      }
      else
        this.Key1.Enabled = false;
      location = this.Key2.Location;
      int num61 = location.X > 0 ? 1 : 0;
      location = this.Key2.Location;
      int num62 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num63 = num61 & num62;
      location = this.Key2.Location;
      int num64 = location.Y > 0 ? 1 : 0;
      int num65 = num63 & num64;
      location = this.Key2.Location;
      int num66 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num65 & num66) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key2.Location;
        int x38 = checked (location.X + 10);
        location = this.Key2.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x38, y) == this.DColor)
          this.Key2.BackColor = Color.Red;
        else
          this.Key2.BackColor = Color.White;
        this.Key2.Enabled = true;
      }
      else
        this.Key2.Enabled = false;
      location = this.Key3.Location;
      int num67 = location.X > 0 ? 1 : 0;
      location = this.Key3.Location;
      int num68 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num69 = num67 & num68;
      location = this.Key3.Location;
      int num70 = location.Y > 0 ? 1 : 0;
      int num71 = num69 & num70;
      location = this.Key3.Location;
      int num72 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num71 & num72) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key3.Location;
        int x39 = checked (location.X + 10);
        location = this.Key3.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x39, y) == this.DColor)
          this.Key3.BackColor = Color.Red;
        else
          this.Key3.BackColor = Color.White;
        this.Key3.Enabled = true;
      }
      else
        this.Key3.Enabled = false;
      location = this.Key4.Location;
      int num73 = location.X > 0 ? 1 : 0;
      location = this.Key4.Location;
      int num74 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num75 = num73 & num74;
      location = this.Key4.Location;
      int num76 = location.Y > 0 ? 1 : 0;
      int num77 = num75 & num76;
      location = this.Key4.Location;
      int num78 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num77 & num78) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key4.Location;
        int x40 = checked (location.X + 10);
        location = this.Key4.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x40, y) == this.DColor)
          this.Key4.BackColor = Color.Red;
        else
          this.Key4.BackColor = Color.White;
        this.Key4.Enabled = true;
      }
      else
        this.Key4.Enabled = false;
      location = this.Key5.Location;
      int num79 = location.X > 0 ? 1 : 0;
      location = this.Key5.Location;
      int num80 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num81 = num79 & num80;
      location = this.Key5.Location;
      int num82 = location.Y > 0 ? 1 : 0;
      int num83 = num81 & num82;
      location = this.Key5.Location;
      int num84 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num83 & num84) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key5.Location;
        int x41 = checked (location.X + 10);
        location = this.Key5.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x41, y) == this.DColor)
          this.Key5.BackColor = Color.Red;
        else
          this.Key5.BackColor = Color.White;
        this.Key5.Enabled = true;
      }
      else
        this.Key5.Enabled = false;
      location = this.Key6.Location;
      int num85 = location.X > 0 ? 1 : 0;
      location = this.Key6.Location;
      int num86 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num87 = num85 & num86;
      location = this.Key6.Location;
      int num88 = location.Y > 0 ? 1 : 0;
      int num89 = num87 & num88;
      location = this.Key6.Location;
      int num90 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num89 & num90) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key6.Location;
        int x42 = checked (location.X + 10);
        location = this.Key6.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x42, y) == this.DColor)
          this.Key6.BackColor = Color.Red;
        else
          this.Key6.BackColor = Color.White;
        this.Key6.Enabled = true;
      }
      else
        this.Key6.Enabled = false;
      location = this.Key7.Location;
      int num91 = location.X > 0 ? 1 : 0;
      location = this.Key7.Location;
      int num92 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num93 = num91 & num92;
      location = this.Key7.Location;
      int num94 = location.Y > 0 ? 1 : 0;
      int num95 = num93 & num94;
      location = this.Key7.Location;
      int num96 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num95 & num96) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key7.Location;
        int x43 = checked (location.X + 10);
        location = this.Key7.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x43, y) == this.DColor)
          this.Key7.BackColor = Color.Red;
        else
          this.Key7.BackColor = Color.White;
        this.Key7.Enabled = true;
      }
      else
        this.Key7.Enabled = false;
      location = this.Key8.Location;
      int num97 = location.X > 0 ? 1 : 0;
      location = this.Key8.Location;
      int num98 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num99 = num97 & num98;
      location = this.Key8.Location;
      int num100 = location.Y > 0 ? 1 : 0;
      int num101 = num99 & num100;
      location = this.Key8.Location;
      int num102 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num101 & num102) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key8.Location;
        int x44 = checked (location.X + 10);
        location = this.Key8.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x44, y) == this.DColor)
          this.Key8.BackColor = Color.Red;
        else
          this.Key8.BackColor = Color.White;
        this.Key8.Enabled = true;
      }
      else
        this.Key8.Enabled = false;
      location = this.Key9.Location;
      int num103 = location.X > 0 ? 1 : 0;
      location = this.Key9.Location;
      int num104 = checked (location.X + 10) < this.PictureBox1.Width ? 1 : 0;
      int num105 = num103 & num104;
      location = this.Key9.Location;
      int num106 = location.Y > 0 ? 1 : 0;
      int num107 = num105 & num106;
      location = this.Key9.Location;
      int num108 = checked (location.Y + 10) < this.PictureBox1.Height ? 1 : 0;
      if ((num107 & num108) != 0)
      {
        Bitmap cbmp = this.cbmp;
        location = this.Key9.Location;
        int x45 = checked (location.X + 10);
        location = this.Key9.Location;
        int y = checked (location.Y + 10);
        if (cbmp.GetPixel(x45, y) == this.DColor)
          this.Key9.BackColor = Color.Red;
        else
          this.Key9.BackColor = Color.White;
        this.Key9.Enabled = true;
      }
      else
        this.Key9.Enabled = false;
      if (!this.Key1.Enabled & !this.Key2.Enabled & !this.Key3.Enabled & !this.Key4.Enabled & !this.Key5.Enabled & !this.Key6.Enabled & !this.Key7.Enabled & !this.Key8.Enabled & !this.Key9.Enabled)
      {
        int num109 = (int) Interaction.MsgBox((object) "你的赛车开出了场地");
        this.Position.Visible = false;
        this.Walk = -1;
        MyProject.Forms.Award.Show();
        this.Close();
      }
      int num110 = 0;
      do
      {
        int num111 = 0;
        do
        {
          Bitmap bmp = this.bmp;
          location = this.Position.Location;
          int x46 = checked (location.X + num110 + 5);
          location = this.Position.Location;
          int y = checked (location.Y + num111 + 5);
          Color green = Color.Green;
          bmp.SetPixel(x46, y, green);
          this.PictureBox1.Image = (Image) this.bmp;
          checked { ++num111; }
        }
        while (num111 <= 9);
        checked { ++num110; }
      }
      while (num110 <= 9);
    }
  }
}
