// Decompiled with JetBrains decompiler
// Type: Echelon.StringExtension
// Assembly: Echelon, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DAEC4C03-F667-4BBB-B546-ED8351172E13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-PSW.MSIL.Coins.gen-d5a7c67747c1d8095b6fb6fef9f446b048a753bfda98e9cf19f265a6203e27cf.exe

using System;
using System.Globalization;
using System.Text;

namespace Echelon
{
  public static class StringExtension
  {
    public static T ForceTo<T>(this object @this) => (T) Convert.ChangeType(@this, typeof (T));

    public static string Remove(this string input, string strToRemove) => input.IsNullOrEmpty() ? (string) null : input.Replace(strToRemove, "");

    public static string Left(this string input, int minusRight = 1) => input.IsNullOrEmpty() || input.Length <= minusRight ? (string) null : input.Substring(0, input.Length - minusRight);

    public static CultureInfo ToCultureInfo(
      this string culture,
      CultureInfo defaultCulture)
    {
      return !culture.IsNullOrEmpty() ? defaultCulture : new CultureInfo(culture);
    }

    public static string ToCamelCasing(this string value) => !string.IsNullOrEmpty(value) ? value.Substring(0, 1).ToUpper() + value.Substring(1, value.Length - 1) : value;

    public static double? ToDouble(this string value, string culture = "en-US")
    {
      try
      {
        return new double?(double.Parse(value, (IFormatProvider) new CultureInfo(culture)));
      }
      catch
      {
        return new double?();
      }
    }

    public static bool? ToBoolean(this string value)
    {
      bool result = false;
      return bool.TryParse(value, out result) ? new bool?(result) : new bool?();
    }

    public static int? ToInt32(this string value)
    {
      int result = 0;
      return int.TryParse(value, out result) ? new int?(result) : new int?();
    }

    public static long? ToInt64(this string value)
    {
      long result = 0;
      return long.TryParse(value, out result) ? new long?(result) : new long?();
    }

    public static string AddQueyString(
      this string url,
      string queryStringKey,
      string queryStringValue)
    {
      string str = url.Split('?').Length <= 1 ? "?" : "&";
      return url + str + queryStringKey + "=" + queryStringValue;
    }

    public static string FormatFirstLetterUpperCase(this string value, string culture = "en-US") => CultureInfo.GetCultureInfo(culture).TextInfo.ToTitleCase(value);

    public static string FillLeftWithZeros(this string value, int decimalDigits)
    {
      if (!string.IsNullOrEmpty(value))
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(value);
        string[] strArray = value.Split(',');
        for (int length = strArray[strArray.Length - 1].Length; length < decimalDigits; ++length)
          stringBuilder.Append("0");
        value = stringBuilder.ToString();
      }
      return value;
    }

    public static string FormatWithDecimalDigits(
      this string value,
      bool removeCurrencySymbol,
      bool returnZero,
      int? decimalDigits)
    {
      if (value.IsNullOrEmpty())
        return value;
      int num = value.IndexOf(",");
      if (!num.Equals(-1))
      {
        string[] strArray = value.Split(',');
        num = strArray.Length;
        if (num.Equals(2) && strArray[1].Length > 0)
          value = strArray[0] + "," + strArray[1].Substring(0, strArray[1].Length >= decimalDigits.Value ? decimalDigits.Value : strArray[1].Length);
      }
      return !decimalDigits.HasValue ? value : value.FillLeftWithZeros(decimalDigits.Value);
    }

    public static string FormatWithoutDecimalDigits(
      this string value,
      bool removeCurrencySymbol,
      bool returnZero,
      int? decimalDigits,
      CultureInfo culture)
    {
      if (removeCurrencySymbol)
        value = value.Remove(culture.NumberFormat.CurrencySymbol).Trim();
      return value;
    }
  }
}
