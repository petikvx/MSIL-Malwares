// Decompiled with JetBrains decompiler
// Type: 942160936230.621632334933
// Assembly: 341658236064, Version=3.1.2.23007, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 307D4BC7-4605-49A1-A696-CC8CC5C1D6BD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-9d52a7814f157b00620b7405701cf26d9edc2be1ad2620905db66c87fcee811b.exe

using \u003172901149592;
using \u003942160936230;
using Microsoft.Build.Framework;
using System;
using System.IO;

namespace \u003942160936230
{
  internal static class \u003621632334933
  {
    private static readonly string[] \u003724675308572 = new string[2]
    {
      "TargetPath",
      "DestinationSubPath"
    };

    public static bool? \u003735341527211(this ITaskItem _param0, string _param1)
    {
      bool? nullable = new bool?();
      bool result;
      if (bool.TryParse(_param0.GetMetadata(_param1), out result))
        nullable = new bool?(result);
      return nullable;
    }

    public static bool \u003911861543320(this ITaskItem _param0, string _param1) => !string.IsNullOrEmpty(_param0.GetMetadata(_param1));

    public static bool \u003981434872072(this ITaskItem _param0, string _param1, string _param2) => string.Equals(_param0.GetMetadata(_param1), _param2, StringComparison.OrdinalIgnoreCase);

    public static string \u003300283336363(ITaskItem _param0)
    {
      if (!string.IsNullOrEmpty(_param0.GetMetadata("Aliases")))
        return (string) null;
      string path = \u003621632334933.\u003701855565446(_param0);
      if (string.IsNullOrEmpty(path))
        return (string) null;
      try
      {
        return Path.GetFileName(path);
      }
      catch (ArgumentException ex)
      {
        return (string) null;
      }
    }

    public static string \u003063121877142(ITaskItem _param0) => !\u003112799371717.\u003308900091958(_param0.GetMetadata("Private"), true) ? (string) null : \u003621632334933.\u003846707379051(_param0);

    public static string \u003304008854687(ITaskItem _param0)
    {
      string path = \u003621632334933.\u003063121877142(_param0);
      return path == null ? (string) null : Path.GetFileName(path);
    }

    public static string \u003701855565446(ITaskItem _param0)
    {
      string str = _param0.GetMetadata("HintPath")?.Trim();
      if (string.IsNullOrWhiteSpace(str))
        str = _param0.ItemSpec;
      return str;
    }

    public static string \u003846707379051(ITaskItem _param0)
    {
      foreach (string metadataName in \u003621632334933.\u003724675308572)
      {
        string str = _param0.GetMetadata(metadataName)?.Trim();
        if (!string.IsNullOrWhiteSpace(str))
          return str.Replace('\\', '/');
      }
      string fileName = Path.GetFileName(\u003621632334933.\u003701855565446(_param0));
      string metadata = _param0.GetMetadata("DestinationSubDirectory");
      return !string.IsNullOrWhiteSpace(metadata) ? Path.Combine(metadata, fileName) : fileName;
    }
  }
}
