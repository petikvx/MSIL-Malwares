// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Channels.JavascriptXmlWriterWrapper
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Globalization;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Channels
{
  internal class JavascriptXmlWriterWrapper : XmlDictionaryWriter
  {
    private Encoding encoding;
    private Stream stream;
    private XmlDictionaryWriter xmlJsonWriter;
    private byte[] encodedClosingFunctionCall;

    public JavascriptXmlWriterWrapper(Encoding encoding)
    {
      this.encoding = encoding;
      this.encodedClosingFunctionCall = this.encoding.GetBytes(");");
    }

    public JavascriptCallbackResponseMessageProperty JavascriptResponseMessageProperty { get; set; }

    public XmlDictionaryWriter XmlJsonWriter => this.xmlJsonWriter;

    public override void Close() => this.xmlJsonWriter.Close();

    public override void Flush() => this.xmlJsonWriter.Flush();

    public override string LookupPrefix(string ns) => this.xmlJsonWriter.LookupPrefix(ns);

    public override void WriteBase64(byte[] buffer, int index, int count) => this.xmlJsonWriter.WriteBase64(buffer, index, count);

    public override void WriteCData(string text) => this.xmlJsonWriter.WriteCData(text);

    public override void WriteCharEntity(char ch) => this.xmlJsonWriter.WriteCharEntity(ch);

    public override void WriteChars(char[] buffer, int index, int count) => this.xmlJsonWriter.WriteChars(buffer, index, count);

    public override void WriteComment(string text) => this.xmlJsonWriter.WriteComment(text);

    public override void WriteDocType(string name, string pubid, string sysid, string subset) => this.xmlJsonWriter.WriteDocType(name, pubid, sysid, subset);

    public override void WriteEndAttribute() => this.xmlJsonWriter.WriteEndAttribute();

    public override void WriteEndDocument()
    {
      this.xmlJsonWriter.WriteEndDocument();
      if (this.JavascriptResponseMessageProperty == null || string.IsNullOrEmpty(this.JavascriptResponseMessageProperty.CallbackFunctionName))
        return;
      this.xmlJsonWriter.Flush();
      HttpStatusCode? statusCode = this.JavascriptResponseMessageProperty.StatusCode;
      if (statusCode.HasValue)
      {
        statusCode = this.JavascriptResponseMessageProperty.StatusCode;
        if (statusCode.Value != HttpStatusCode.OK)
        {
          Encoding encoding = this.encoding;
          CultureInfo invariantCulture = CultureInfo.InvariantCulture;
          object[] objArray = new object[1];
          statusCode = this.JavascriptResponseMessageProperty.StatusCode;
          objArray[0] = (object) (int) statusCode.Value;
          string s = string.Format((IFormatProvider) invariantCulture, ",{0}", objArray);
          byte[] bytes = encoding.GetBytes(s);
          this.stream.Write(bytes, 0, bytes.Length);
        }
      }
      this.stream.Write(this.encodedClosingFunctionCall, 0, this.encodedClosingFunctionCall.Length);
    }

    public override void WriteEndElement() => this.xmlJsonWriter.WriteEndElement();

    public override void WriteEntityRef(string name) => this.xmlJsonWriter.WriteEntityRef(name);

    public override void WriteFullEndElement() => this.xmlJsonWriter.WriteFullEndElement();

    public override void WriteProcessingInstruction(string name, string text) => this.xmlJsonWriter.WriteProcessingInstruction(name, text);

    public override void WriteRaw(string data) => this.xmlJsonWriter.WriteRaw(data);

    public override void WriteRaw(char[] buffer, int index, int count) => this.xmlJsonWriter.WriteRaw(buffer, index, count);

    public override void WriteStartAttribute(string prefix, string localName, string ns) => this.xmlJsonWriter.WriteStartAttribute(prefix, localName, ns);

    public override void WriteStartDocument(bool standalone)
    {
      this.StartJsonMessage();
      this.xmlJsonWriter.WriteStartDocument(standalone);
    }

    public override void WriteStartDocument()
    {
      this.StartJsonMessage();
      this.xmlJsonWriter.WriteStartDocument();
    }

    private void StartJsonMessage()
    {
      if (this.JavascriptResponseMessageProperty == null || string.IsNullOrEmpty(this.JavascriptResponseMessageProperty.CallbackFunctionName))
        return;
      byte[] bytes = this.encoding.GetBytes(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}(", new object[1]
      {
        (object) this.JavascriptResponseMessageProperty.CallbackFunctionName
      }));
      this.stream.Write(bytes, 0, bytes.Length);
    }

    public override void WriteStartElement(string prefix, string localName, string ns) => this.xmlJsonWriter.WriteStartElement(prefix, localName, ns);

    public override WriteState WriteState => this.xmlJsonWriter.WriteState;

    public override void WriteString(string text) => this.xmlJsonWriter.WriteString(text);

    public override void WriteSurrogateCharEntity(char lowChar, char highChar) => this.xmlJsonWriter.WriteSurrogateCharEntity(lowChar, highChar);

    public override void WriteWhitespace(string ws) => this.xmlJsonWriter.WriteWhitespace(ws);

    public void SetOutput(Stream stream, XmlDictionaryWriter writer)
    {
      this.stream = stream;
      this.xmlJsonWriter = writer;
    }
  }
}
