// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.ResourceUtil
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public abstract class ResourceUtil
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static bool IsIntResource(IntPtr value) => (uint) (int) value <= (uint) ushort.MaxValue;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static uint GetResourceID(IntPtr value) => ResourceUtil.IsIntResource(value) ? (uint) (int) value : throw new NotSupportedException(value.ToString());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static string GetResourceName(IntPtr value) => ResourceUtil.IsIntResource(value) ? value.ToString() : Marshal.PtrToStringUni(value);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IntPtr Align(int p) => new IntPtr(p + 3 & -4);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IntPtr Align(IntPtr p) => ResourceUtil.Align(p.ToInt32());

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static long PadToWORD(BinaryWriter w)
    {
      long position = w.BaseStream.Position;
      if (position % 2L != 0L)
      {
        long len = 2L - position % 2L;
        ResourceUtil.Pad(w, (ushort) len);
        position += len;
      }
      return position;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static long PadToDWORD(BinaryWriter w)
    {
      long position = w.BaseStream.Position;
      if (position % 4L != 0L)
      {
        long len = 4L - position % 4L;
        ResourceUtil.Pad(w, (ushort) len);
        position += len;
      }
      return position;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void WriteAt(BinaryWriter w, long value, long address)
    {
      long position = w.BaseStream.Position;
      w.Seek((int) address, SeekOrigin.Begin);
      w.Write((ushort) value);
      w.Seek((int) position, SeekOrigin.Begin);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static long Pad(BinaryWriter w, ushort len)
    {
      while (len-- > (ushort) 0)
        w.Write((byte) 0);
      return w.BaseStream.Position;
    }

    public static int NEUTRALLANGID
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => ResourceUtil.MAKELANGID(0, 0);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static int MAKELANGID(int primary, int sub) => (int) (ushort) sub << 10 | (int) (ushort) primary;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static int PRIMARYLANGID(int lcid) => (int) (ushort) lcid & 1023;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static int SUBLANGID(int lcid) => (int) (ushort) lcid >> 10;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static byte[] GetByts<T>(T anything)
    {
      int length = Marshal.SizeOf((object) anything);
      IntPtr num = Marshal.AllocHGlobal(length);
      Marshal.StructureToPtr((object) anything, num, false);
      byte[] destination = new byte[length];
      Marshal.Copy(num, destination, 0, length);
      Marshal.FreeHGlobal(num);
      return destination;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected ResourceUtil()
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }
  }
}
