// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.ExtendedKeys
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace PreEmptive.Analytics.Common
{
  public class ExtendedKeys
  {
    public IDictionary<string, ExtendedKey> Map
    {
      get
      {
        int num1 = 4574;
        int num2 = num1;
        num1 = 4574;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 29165;
        int num2 = num1;
        num1 = 29165;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ExtendedKeys() => this.Map = (IDictionary<string, ExtendedKey>) new Dictionary<string, ExtendedKey>();

    public void Add(string key, string value)
    {
      int A_1 = 3;
      int num1;
      string key1;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          key1 = this.a(key);
          num2 = 3;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                this.a(value != null ? new ExtendedKey(key1, value) : new ExtendedKey(key1, Utils.a("\uD9B6첸ힺ톼", A_1)));
                num2 = -15233;
                int num3 = num2;
                num2 = -15233;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 2;
                    num1 = num2;
                    continue;
                }
                break;
              case 1:
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = 0;
                num1 = num2;
                continue;
              case 2:
                goto label_8;
              case 3:
                if (string.IsNullOrEmpty(key1))
                  goto label_11;
                else
                  break;
              default:
                goto label_2;
            }
            num2 = 1;
            num1 = num2;
          }
label_8:
          break;
label_11:
          break;
      }
    }

    public void Add(string key, int value)
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      int num2;
      string key1;
      switch (0)
      {
        case 0:
label_3:
          key1 = this.a(key);
          num1 = 2;
          num2 = num1;
          goto default;
        default:
          while (true)
          {
            switch (num2)
            {
              case 0:
                this.a(new ExtendedKey(key1, value));
                num1 = -2419;
                int num3 = num1;
                num1 = -2419;
                int num4 = num1;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num1 = 0;
                    if (num1 == 0)
                      ;
                    num1 = 1;
                    num2 = num1;
                    continue;
                }
                break;
              case 1:
                goto label_6;
              case 2:
                if (string.IsNullOrEmpty(key1))
                  goto label_10;
                else
                  break;
              default:
                goto label_3;
            }
            num1 = 0;
            num2 = num1;
          }
label_6:
          break;
label_10:
          break;
      }
    }

    public void Add(string key, long value)
    {
      int num1;
      string key1;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          key1 = this.a(key);
          num2 = 2;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                this.a(new ExtendedKey(key1, value));
                num2 = -8372;
                int num3 = num2;
                num2 = -8372;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 1;
                    num1 = num2;
                    continue;
                }
                break;
              case 1:
                goto label_5;
              case 2:
                if (string.IsNullOrEmpty(key1))
                  goto label_10;
                else
                  break;
              default:
                goto label_2;
            }
            num2 = 0;
            num1 = num2;
          }
label_5:
          break;
label_10:
          break;
      }
    }

    public void Add(string key, float value)
    {
      int num1;
      string key1;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          key1 = this.a(key);
          num2 = 2;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                this.a(new ExtendedKey(key1, value));
                num2 = 25182;
                int num3 = num2;
                num2 = 25182;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 1;
                    num1 = num2;
                    continue;
                }
                break;
              case 1:
                goto label_5;
              case 2:
                if (string.IsNullOrEmpty(key1))
                  goto label_10;
                else
                  break;
              default:
                goto label_2;
            }
            num2 = 0;
            num1 = num2;
          }
label_5:
          break;
label_10:
          break;
      }
    }

    public void Add(string key, double value)
    {
      int num1;
      int num2;
      string key1;
      switch (0)
      {
        case 0:
label_2:
          num2 = 1;
          if (num2 == 0)
            ;
          key1 = this.a(key);
          num2 = 2;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                this.a(new ExtendedKey(key1, value));
                num2 = 8903;
                int num3 = num2;
                num2 = 8903;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 1;
                    num1 = num2;
                    continue;
                }
                break;
              case 1:
                goto label_6;
              case 2:
                if (string.IsNullOrEmpty(key1))
                  goto label_10;
                else
                  break;
              default:
                goto label_2;
            }
            num2 = 0;
            num1 = num2;
          }
label_6:
          break;
label_10:
          break;
      }
    }

    public void Add(string key, Decimal value)
    {
      int num1;
      string key1;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          key1 = this.a(key);
          num2 = 2;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                this.a(new ExtendedKey(key1, value));
                num2 = 13013;
                int num3 = num2;
                num2 = 13013;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 1;
                    num1 = num2;
                    continue;
                }
                break;
              case 1:
                goto label_5;
              case 2:
                if (string.IsNullOrEmpty(key1))
                  goto label_10;
                else
                  break;
              default:
                goto label_2;
            }
            num2 = 0;
            num1 = num2;
          }
label_5:
          break;
label_10:
          break;
      }
    }

    private void a(ExtendedKey A_0)
    {
      int num1 = -5359;
      int num2 = num1;
      num1 = -5359;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          this.Map[A_0.Key] = A_0;
          break;
        default:
          goto case 1;
      }
    }

    private string a(string A_0)
    {
      int A_1 = 9;
      if (A_0 != null)
        return Regex.Replace(A_0, Utils.a("\uE1BC첾\uEAC0", A_1), Utils.a("鶼", A_1)).Trim();
label_1:
      int num1 = -1817;
      int num2 = num1;
      num1 = -1817;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          goto label_1;
        default:
          num1 = 0;
          if (num1 == 0)
            ;
          num1 = 1;
          if (num1 == 0)
            ;
          return (string) null;
      }
    }

    public List<ExtendedKeyTag> ToTags()
    {
      List<ExtendedKeyTag> tags = new List<ExtendedKeyTag>(this.Map.Count);
      IEnumerator<ExtendedKey> enumerator = this.Map.Values.GetEnumerator();
      try
      {
        int num = 4;
        while (true)
        {
          switch (num)
          {
            case 0:
              num = 3;
              continue;
            case 2:
              switch (true ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_2;
                default:
                  if (true)
                    ;
                  if (enumerator.MoveNext())
                  {
                    ExtendedKey current = enumerator.Current;
                    tags.Add(new ExtendedKeyTag(current.Key, current.Value, current.IsNumeric));
                    num = 1;
                    continue;
                  }
                  num = 0;
                  continue;
              }
            case 3:
              goto label_18;
            case 4:
label_2:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
          }
          num = 2;
        }
      }
      finally
      {
        int num1 = 2;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
              enumerator.Dispose();
              num2 = 1;
              num1 = num2;
              continue;
            case 1:
              goto label_17;
            case 2:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
          }
          if (enumerator != null)
          {
            num2 = 0;
            num1 = num2;
          }
          else
            break;
        }
label_17:;
      }
label_18:
      if (false)
        ;
      return tags;
    }
  }
}
