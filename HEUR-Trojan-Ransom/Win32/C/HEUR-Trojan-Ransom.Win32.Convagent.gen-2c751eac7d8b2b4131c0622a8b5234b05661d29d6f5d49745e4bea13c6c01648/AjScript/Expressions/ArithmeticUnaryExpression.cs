// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.ArithmeticUnaryExpression
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using AjScript.Language;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace AjScript.Expressions
{
  public class ArithmeticUnaryExpression : UnaryExpression
  {
    private Func<object, object> function;
    private ArithmeticOperator operation;

    public ArithmeticUnaryExpression(ArithmeticOperator operation, IExpression expression)
      : base(expression)
    {
      this.operation = operation;
      if (operation != ArithmeticOperator.Plus)
      {
        if (operation != ArithmeticOperator.Minus)
          throw new ArgumentException("Invalid operator");
        this.function = new Func<object, object>(Operators.NegateObject);
      }
      else
        this.function = new Func<object, object>(Operators.PlusObject);
    }

    public ArithmeticOperator Operation => this.operation;

    public override object Apply(object value) => value == null ? value : this.function(value);
  }
}
