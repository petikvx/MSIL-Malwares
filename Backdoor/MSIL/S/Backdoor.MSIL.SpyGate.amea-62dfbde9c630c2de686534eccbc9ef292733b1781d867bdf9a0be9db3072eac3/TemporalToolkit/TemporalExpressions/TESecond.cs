// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TESecond
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;

namespace TemporalToolkit.TemporalExpressions
{
  public class TESecond : TemporalExpression
  {
    public int Start { get; set; }

    public int? End { get; set; }

    public TESecond(int second)
    {
label_1:
      int num1 = -434093475;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -59520828)) % 7U)
        {
          case 0:
            this.Start = second;
            num1 = (int) num2 * 1511738795 ^ -73937031;
            continue;
          case 1:
            num1 = (int) num2 * 110784019 ^ 301977105;
            continue;
          case 2:
            num1 = (int) num2 * -1593008476 ^ -368913817;
            continue;
          case 3:
            num1 = (int) num2 * 736402922 ^ -1879593441;
            continue;
          case 4:
            this.End = new int?();
            num1 = (int) num2 * -1873798430 ^ 1417016787;
            continue;
          case 5:
            goto label_3;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    public TESecond(int start, int end)
    {
label_1:
      int num1 = -1251003870;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -370923736)) % 6U)
        {
          case 0:
            num1 = (int) num2 * 624867425 ^ -1554613627;
            continue;
          case 1:
            this.End = new int?(end);
            num1 = (int) num2 * -1150141370 ^ 445082786;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1244140410 ^ -1161496720;
            continue;
          case 5:
            this.Start = start;
            num1 = (int) num2 * 1064596903 ^ -168871094;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = -1219659210;
      bool flag1;
      while (true)
      {
        uint num2;
        int? end;
        bool flag2;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -661641302)) % 14U)
        {
          case 0:
          case 8:
            flag1 = flag2;
            num1 = -768289465;
            continue;
          case 1:
            flag2 = this.Start == aDate.Second;
            num1 = -740929622;
            continue;
          case 2:
            int num5 = !end.HasValue ? -1425427981 : (num5 = -1195090723);
            num1 = num5 ^ (int) num2 * 1855191268;
            continue;
          case 4:
            int num6 = !flag3 ? -411920180 : (num6 = -2056036429);
            num1 = num6 ^ (int) num2 * -532154912;
            continue;
          case 5:
            int second1 = aDate.Second;
            end = this.End;
            int num7 = end.Value;
            num3 = second1 <= num7 ? 1 : 0;
            goto label_10;
          case 6:
            if (aDate.Second < this.Start)
            {
              num1 = -1723492541;
              continue;
            }
            num4 = 1;
            break;
          case 7:
            int second2 = aDate.Second;
            end = this.End;
            int num8 = end.Value;
            num4 = second2 <= num8 ? 1 : 0;
            break;
          case 9:
            if (aDate.Second < this.Start)
            {
              num3 = 0;
              goto label_10;
            }
            else
            {
              num1 = (int) num2 * -829961062 ^ 1453058257;
              continue;
            }
          case 10:
            end = this.End;
            num1 = (int) num2 * -1155470924 ^ 727796106;
            continue;
          case 11:
            flag3 = end.Value > this.Start;
            num1 = (int) num2 * 606290106 ^ 1919183346;
            continue;
          case 12:
            goto label_1;
          case 13:
            end = this.End;
            num1 = (int) num2 * 633635804 ^ 1118380347;
            continue;
          default:
            goto label_20;
        }
        flag2 = num4 != 0;
        num1 = -1187187580;
        continue;
label_10:
        flag2 = num3 != 0;
        num1 = -1187187580;
      }
label_20:
      return flag1;
    }
  }
}
