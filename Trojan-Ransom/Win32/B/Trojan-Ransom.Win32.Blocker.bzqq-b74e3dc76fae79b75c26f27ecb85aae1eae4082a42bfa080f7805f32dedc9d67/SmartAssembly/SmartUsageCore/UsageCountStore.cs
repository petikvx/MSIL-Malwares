// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageCountStore
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using My;
using SmartAssembly.Shared;
using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.Zip;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.IO.IsolatedStorage;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using Ⴈ;

namespace SmartAssembly.SmartUsageCore
{
  public static class UsageCountStore
  {
    private static readonly string Ⴅ;
    private static readonly string Ⴗ;
    private static readonly string Ⴓ;
    private static readonly string Ⴀ;
    private static readonly IsolatedStorageFile Ⴍ;
    private static readonly Encoding Ⴓ;
    private static readonly HashAlgorithm Ⴗ;

    static UsageCountStore()
    {
      int num1;
      try
      {
        DoNotPruneAttribute.ႰႣ();
        try
        {
          num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                UsageCountStore.Ⴍ.CreateDirectory(UsageCountStore.Ⴅ);
                num1 = 8;
                continue;
              case 1:
                UsageCountStore.Ⴀ = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴅ, Ⴈ.ႳႷ.Ⴗ(2059791108, 6), 1023, 972);
                goto case 7;
              case 3:
                UsageCountStore.Ⴗ = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴅ, Ⴈ.ႷႭ.ႥႭ(490614461, 2), 848, 867);
                UsageCountStore.Ⴓ = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴅ, Ⴈ.Ⴀ.Ⴐ(1468304746, 7), 664, 683);
                num1 = 1;
                continue;
              case 4:
                num1 = 3;
                continue;
              case 5:
                UsageCountStore.Ⴓ = ႷႼ.Ⴗ(355, 318);
                UsageCountStore.Ⴗ = (HashAlgorithm) new MD5CryptoServiceProvider();
                UsageCountStore.Ⴍ = IsolatedStorageFile.GetUserStoreForAssembly();
                goto case 0;
              case 7:
                num1 = 5;
                continue;
              case 8:
                goto label_10;
              default:
                UsageCountStore.Ⴅ = SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴄ(Ⴈ.ႷႭ.ႥႭ(490613365, 5), 1, 8, 324, 307);
                goto case 4;
            }
          }
label_10:
          UsageCountStore.Ⴍ.CreateDirectory(UsageCountStore.Ⴓ);
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
        switch (2)
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num2;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    private static IDisposable Ⴅ()
    {
      try
      {
        IDisposable disposable;
        try
        {
          disposable = (IDisposable) new UsageCountStore.ႣႨ(UsageCountStore.Ⴀ);
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
        return disposable;
      }
      catch (Exception ex)
      {
        IDisposable disposable;
        IDisposable o1 = disposable;
        StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    private static IsolatedStorageFileStream Ⴀ(
      string Ⴅ,
      FileMode Ⴓ,
      FileAccess Ⴄ)
    {
      try
      {
        IsolatedStorageFileStream storageFileStream;
        try
        {
          storageFileStream = new IsolatedStorageFileStream(Ⴅ, Ⴓ, Ⴄ, FileShare.None, UsageCountStore.Ⴍ);
        }
        catch (Exception ex)
        {
          string o1 = Ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<FileMode> o2 = (Enum) Ⴓ;
          // ISSUE: variable of a boxed type
          __Boxed<FileAccess> o3 = (Enum) Ⴄ;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
        return storageFileStream;
      }
      catch (Exception ex)
      {
        IsolatedStorageFileStream storageFileStream;
        IsolatedStorageFileStream o1 = storageFileStream;
        string o2 = Ⴅ;
        // ISSUE: variable of a boxed type
        __Boxed<FileMode> o3 = (Enum) Ⴓ;
        // ISSUE: variable of a boxed type
        __Boxed<FileAccess> o4 = (Enum) Ⴄ;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    private static void Ⴈ(string Ⴅ)
    {
      try
      {
        try
        {
          try
          {
            ReportSender1.Ⴐ(UsageCountStore.Ⴍ, Ⴅ, 559, 519);
          }
          catch (IsolatedStorageException ex)
          {
          }
        }
        catch (Exception ex)
        {
          string o1 = Ⴅ;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
      }
      catch (Exception ex)
      {
        string o1 = Ⴅ;
        StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    private static void Ⴓ(string Ⴅ, long Ⴀ)
    {
      int num1;
      IsolatedStorageFileStream storageFileStream;
      int num2;
      ulong num3;
      int num4;
      int num5;
      try
      {
        try
        {
          num1 = 1;
          switch (num1)
          {
            default:
              storageFileStream = UsageCountStore.Ⴀ(Ⴅ, FileMode.OpenOrCreate, FileAccess.ReadWrite);
              try
              {
                num2 = 3;
                while (true)
                {
                  switch (num2)
                  {
                    case 1:
                    case 5:
                      goto label_7;
                    case 2:
                      num3 = ႳႤ.Ⴍ(new BinaryReader((Stream) storageFileStream), 54, 121);
                      ++num3;
                      num2 = 5;
                      continue;
                    case 4:
                    case 6:
                      num2 = 2;
                      continue;
                    default:
                      ReportExceptionEventArgs.Ⴃ((Stream) storageFileStream, Ⴀ + 8L, 677, 683);
                      ReportExceptionEventArgs.Ⴃ((Stream) storageFileStream, Ⴀ, 187, 181);
                      goto case 4;
                  }
                }
label_7:
                ReportExceptionEventArgs.Ⴃ((Stream) storageFileStream, Ⴀ, 655, 641);
                AppNameFinder.Ⴄ(new BinaryWriter((Stream) storageFileStream), num3, 477, 385);
              }
              finally
              {
                num4 = 5;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                    case 3:
                    case 6:
                      goto label_12;
                    case 1:
                      goto label_11;
                    default:
                      num4 = storageFileStream == null ? 6 : 1;
                      continue;
                  }
                }
label_11:
                storageFileStream.Dispose();
label_12:;
              }
              num5 = 3;
              switch (num5)
              {
              }
              break;
          }
        }
        catch (Exception ex)
        {
          IsolatedStorageFileStream o1 = storageFileStream;
          // ISSUE: variable of a boxed type
          __Boxed<ulong> o2 = (ValueType) num3;
          string o3 = Ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<long> o4 = (ValueType) Ⴀ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
        switch (3)
        {
        }
      }
      catch (Exception ex)
      {
        IsolatedStorageFileStream o1 = storageFileStream;
        // ISSUE: variable of a boxed type
        __Boxed<ulong> o2 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num4;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num5;
        int num6;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) num6;
        string o8 = Ⴅ;
        // ISSUE: variable of a boxed type
        __Boxed<long> o9 = (ValueType) Ⴀ;
        StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
        throw;
      }
    }

    public static void IncrementUsage(uint featureId)
    {
      IDisposable disposable;
      int num;
      try
      {
        try
        {
          disposable = (IDisposable) null;
          try
          {
            disposable = UsageCountStore.Ⴅ();
            UsageCountStore.Ⴓ(UsageCountStore.Ⴗ, (long) (featureId * 8U));
          }
          catch (Exception ex)
          {
          }
          finally
          {
            num = 4;
            while (true)
            {
              switch (num)
              {
                case 0:
                case 2:
                  goto label_6;
                case 1:
                case 3:
                  goto label_7;
                default:
                  num = disposable == null ? 3 : 2;
                  continue;
              }
            }
label_6:
            disposable.Dispose();
label_7:;
          }
        }
        catch (Exception ex)
        {
          IDisposable o1 = disposable;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o2 = (ValueType) featureId;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
          throw;
        }
      }
      catch (Exception ex)
      {
        IDisposable o1 = disposable;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        // ISSUE: variable of a boxed type
        __Boxed<uint> o3 = (ValueType) featureId;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private static string Ⴅ(string Ⴃ)
    {
      int num1;
      byte[] numArray;
      string str1;
      byte[] b;
      Guid guid;
      string str2;
      string str3;
      string Ⴅ;
      IsolatedStorageFileStream storageFileStream;
      int num2;
      int num3;
      int num4;
      int num5;
      string str4;
      try
      {
        try
        {
          num1 = 5;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 6:
                str2 = SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴄ(guid.ToString(), 0, 18, 60, 75);
                num1 = 8;
                continue;
              case 1:
                if (AppPathFinder.Ⴐ(str1, 410, 429) > 50)
                {
                  num1 = 9;
                  continue;
                }
                goto label_19;
              case 3:
              case 4:
                goto label_9;
              case 7:
                num1 = 1;
                continue;
              case 8:
                str3 = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, str2, 492, 479);
                str1 = Ⴈ.ႷႭ.ႰႨ(str3, MyComputer.Ⴗ(834541688, 5), 74, 120);
                num1 = 3;
                continue;
              case 9:
                b = ReportUsageAttribute.Ⴍ(UsageCountStore.Ⴗ, numArray, 56, 111);
                guid = new Guid(b);
                num1 = 0;
                continue;
              default:
                numArray = ႷႨ.Ⴄ(UsageCountStore.Ⴓ, Ⴃ, 118, 0);
                str1 = SimpleZip.ႤႭ.Ⴜ(ႷႨ.Ⴜ(numArray, 66, 57), '\\', '@', 475, 426);
                goto case 7;
            }
          }
label_9:
          Ⴅ = Ⴈ.ႷႭ.ႰႨ(str3, Ⴈ.Ⴀ.Ⴐ(1468304750, 7), 335, 381);
          storageFileStream = (IsolatedStorageFileStream) null;
          try
          {
            try
            {
              num2 = 0;
              switch (num2)
              {
                default:
                  storageFileStream = UsageCountStore.Ⴀ(Ⴅ, FileMode.CreateNew, FileAccess.Write);
                  ReportSender1.Ⴍ((Stream) storageFileStream, numArray, 0, numArray.Length, 608, 542);
                  break;
              }
            }
            catch (IOException ex)
            {
            }
            num3 = 1;
            switch (num3)
            {
              default:
                goto label_22;
            }
          }
          finally
          {
            num4 = 4;
            while (true)
            {
              switch (num4)
              {
                case 0:
                  goto label_18;
                case 1:
                  goto label_17;
                default:
                  num4 = storageFileStream == null ? 0 : 1;
                  continue;
              }
            }
label_17:
            storageFileStream.Close();
label_18:;
          }
label_19:
          num5 = 2;
          while (true)
          {
            switch (num5)
            {
              case 1:
              case 5:
                goto label_24;
              case 4:
                goto label_22;
              default:
                str1 = Path.Combine(UsageCountStore.Ⴓ, str1 + MyComputer.Ⴗ(834541692, 1));
                num5 = 4;
                continue;
            }
          }
label_22:
          str4 = str1;
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray;
          string o2 = str1;
          byte[] o3 = b;
          string o4 = str2;
          string o5 = str3;
          string o6 = Ⴅ;
          IsolatedStorageFileStream o7 = storageFileStream;
          // ISSUE: variable of a boxed type
          __Boxed<Guid> o8 = (ValueType) guid;
          string o9 = Ⴃ;
          StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9);
          throw;
        }
label_24:
        switch (0)
        {
          default:
            return str4;
        }
      }
      catch (Exception ex)
      {
        int num6;
        object[] objects = new object[16]
        {
          (object) numArray,
          (object) str1,
          (object) b,
          (object) str2,
          (object) str3,
          (object) Ⴅ,
          (object) storageFileStream,
          (object) guid,
          (object) str4,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) num5,
          (object) num6,
          (object) Ⴃ
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static void IncrementUsage(string featureName)
    {
      IDisposable disposable;
      string Ⴅ;
      int num;
      try
      {
        try
        {
          disposable = (IDisposable) null;
          try
          {
            disposable = UsageCountStore.Ⴅ();
            Ⴅ = UsageCountStore.Ⴅ(featureName);
            UsageCountStore.Ⴓ(Ⴅ, 0L);
          }
          catch (Exception ex)
          {
          }
          finally
          {
            num = 4;
            while (true)
            {
              switch (num)
              {
                case 1:
                  goto label_6;
                case 2:
                case 3:
                  goto label_7;
                default:
                  num = disposable == null ? 3 : 1;
                  continue;
              }
            }
label_6:
            disposable.Dispose();
label_7:;
          }
        }
        catch (Exception ex)
        {
          IDisposable o1 = disposable;
          string o2 = Ⴅ;
          string o3 = featureName;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }
      catch (Exception ex)
      {
        IDisposable o1 = disposable;
        string o2 = Ⴅ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num;
        string o4 = featureName;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    private static ulong[] Ⴐ(string Ⴍ)
    {
      int num1;
      IsolatedStorageFileStream storageFileStream;
      int num2;
      byte[] numArray1;
      ulong[] numArray2;
      int num3;
      int num4;
      ulong[] numArray3;
      try
      {
        try
        {
          num1 = 3;
          switch (num1)
          {
            default:
              storageFileStream = new IsolatedStorageFileStream(Ⴍ, FileMode.OpenOrCreate, FileAccess.Read, FileShare.None, UsageCountStore.Ⴍ);
              try
              {
                num2 = 4;
                while (true)
                {
                  switch (num2)
                  {
                    case 1:
                      goto label_12;
                    case 3:
                      goto label_5;
                    case 5:
                      goto label_6;
                    default:
                      numArray1 = new byte[Ⴈ.Ⴀ.Ⴄ((Stream) storageFileStream, 467, 506)];
                      SecurityExceptionEventArgs.Ⴓ((Stream) storageFileStream, numArray1, 0, numArray1.Length, 660, 705);
                      num2 = 3;
                      continue;
                  }
                }
label_5:
                numArray2 = new ulong[numArray1.Length / 8];
label_6:
                AppPathFinder.Ⴍ((Array) numArray1, 0, (Array) numArray2, 0, numArray1.Length, 569, 546);
              }
              finally
              {
                num3 = 2;
                while (true)
                {
                  switch (num3)
                  {
                    case 1:
                    case 3:
                      goto label_10;
                    case 4:
                    case 5:
                      goto label_11;
                    default:
                      num3 = storageFileStream == null ? 4 : 3;
                      continue;
                  }
                }
label_10:
                storageFileStream.Dispose();
label_11:;
              }
label_12:
              num4 = 3;
              switch (num4)
              {
                default:
                  numArray3 = numArray2;
                  break;
              }
              break;
          }
        }
        catch (Exception ex)
        {
          ulong[] o1 = numArray2;
          IsolatedStorageFileStream o2 = storageFileStream;
          byte[] o3 = numArray1;
          string o4 = Ⴍ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
        switch (4)
        {
          default:
            return numArray3;
        }
      }
      catch (Exception ex)
      {
        ulong[] o1 = numArray2;
        IsolatedStorageFileStream o2 = storageFileStream;
        byte[] o3 = numArray1;
        ulong[] o4 = numArray3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o7 = (ValueType) num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o8 = (ValueType) num4;
        int num5;
        // ISSUE: variable of a boxed type
        __Boxed<int> o9 = (ValueType) num5;
        string o10 = Ⴍ;
        StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9, (object) o10);
        throw;
      }
    }

    public static UsageCounts GetAllUsageCountsAndReset()
    {
      IDisposable disposable;
      UsageCounts usageCounts1;
      UsageCounts usageCounts2;
      int num;
      try
      {
        UsageCounts usageCountsAndReset;
        try
        {
          disposable = UsageCountStore.Ⴅ();
          try
          {
            usageCounts1 = UsageCountStore.Ⴗ();
            UsageCountStore.Ⴃ();
            usageCounts2 = usageCounts1;
          }
          finally
          {
            num = 0;
            while (true)
            {
              switch (num)
              {
                case 1:
                case 2:
                case 5:
                  goto label_5;
                case 3:
                  goto label_6;
                default:
                  num = disposable == null ? 3 : 1;
                  continue;
              }
            }
label_5:
            disposable.Dispose();
label_6:;
          }
          usageCountsAndReset = usageCounts2;
        }
        catch (Exception ex)
        {
          UsageCounts o1 = usageCounts1;
          UsageCounts o2 = usageCounts2;
          IDisposable o3 = disposable;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
        return usageCountsAndReset;
      }
      catch (Exception ex)
      {
        UsageCounts o1 = usageCounts1;
        UsageCounts o2 = usageCounts2;
        IDisposable o3 = disposable;
        UsageCounts usageCounts3;
        UsageCounts o4 = usageCounts3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    public static UsageCounts GetAllUsageCounts()
    {
      IDisposable disposable;
      UsageCounts usageCounts1;
      int num;
      try
      {
        UsageCounts allUsageCounts;
        try
        {
          disposable = UsageCountStore.Ⴅ();
          try
          {
            usageCounts1 = UsageCountStore.Ⴗ();
          }
          finally
          {
            num = 5;
            while (true)
            {
              switch (num)
              {
                case 0:
                case 4:
                  goto label_6;
                case 2:
                case 3:
                  goto label_5;
                default:
                  num = disposable == null ? 4 : 3;
                  continue;
              }
            }
label_5:
            disposable.Dispose();
label_6:;
          }
          allUsageCounts = usageCounts1;
        }
        catch (Exception ex)
        {
          UsageCounts o1 = usageCounts1;
          IDisposable o2 = disposable;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
          throw;
        }
        return allUsageCounts;
      }
      catch (Exception ex)
      {
        UsageCounts o1 = usageCounts1;
        IDisposable o2 = disposable;
        UsageCounts usageCounts2;
        UsageCounts o3 = usageCounts2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    public static void Reset()
    {
      IDisposable disposable;
      int num;
      try
      {
        try
        {
          disposable = UsageCountStore.Ⴅ();
          try
          {
            UsageCountStore.Ⴃ();
          }
          finally
          {
            num = 3;
            while (true)
            {
              switch (num)
              {
                case 1:
                case 4:
                  goto label_5;
                case 2:
                case 5:
                  goto label_6;
                default:
                  num = disposable == null ? 5 : 1;
                  continue;
              }
            }
label_5:
            disposable.Dispose();
label_6:;
          }
        }
        catch (Exception ex)
        {
          IDisposable o1 = disposable;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
      }
      catch (Exception ex)
      {
        IDisposable o1 = disposable;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    private static UsageCounts Ⴗ()
    {
      int num1;
      ulong[] staticFeatureCounts;
      Dictionary<string, ulong> dynamicFeatureCounts;
      int num2;
      string[] strArray;
      int index;
      string str;
      string key;
      string Ⴍ;
      ulong[] numArray1;
      string Ⴅ;
      IsolatedStorageFileStream storageFileStream;
      int num3;
      byte[] numArray2;
      int num4;
      int num5;
      int num6;
      int num7;
      UsageCounts usageCounts;
      object[] objArray;
      try
      {
        try
        {
          num1 = 1;
          switch (num1)
          {
            default:
              staticFeatureCounts = UsageCountStore.Ⴐ(UsageCountStore.Ⴗ);
              dynamicFeatureCounts = new Dictionary<string, ulong>();
              try
              {
                num2 = 0;
                while (true)
                {
                  switch (num2)
                  {
                    case 1:
                    case 5:
                      index = 0;
                      goto label_28;
                    case 2:
                      Ⴍ = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, str, 195, 240);
                      goto case 6;
                    case 3:
                      num2 = 2;
                      continue;
                    case 6:
                      numArray1 = UsageCountStore.Ⴐ(Ⴍ);
                      num2 = 9;
                      continue;
                    case 7:
                      storageFileStream = (IsolatedStorageFileStream) null;
                      try
                      {
                        try
                        {
                          num3 = 1;
                          while (true)
                          {
                            switch (num3)
                            {
                              case 0:
                                goto label_17;
                              case 2:
                              case 4:
                                numArray2 = new byte[Ⴈ.Ⴀ.Ⴄ((Stream) storageFileStream, 636, 597)];
                                num3 = 5;
                                continue;
                              case 3:
                                goto label_19;
                              case 5:
                                SecurityExceptionEventArgs.Ⴓ((Stream) storageFileStream, numArray2, 0, numArray2.Length, 781, 856);
                                num3 = 0;
                                continue;
                              default:
                                storageFileStream = UsageCountStore.Ⴀ(Ⴅ, FileMode.Open, FileAccess.Read);
                                goto case 2;
                            }
                          }
label_17:
                          key = SendingReportFeedbackEventArgs1.Ⴐ(UsageCountStore.Ⴓ, numArray2, 1021, 964);
                        }
                        catch (FileNotFoundException ex)
                        {
                          key = SendingReportFeedbackEventArgs1.Ⴐ(UsageCountStore.Ⴓ, AppRegistryKeys.Ⴀ(SimpleZip.ႤႭ.Ⴜ(key, '@', '\\', 661, 740), 477, 501), 206, 247);
                        }
label_19:
                        num4 = 2;
                        switch (num4)
                        {
                        }
                      }
                      finally
                      {
                        num5 = 3;
                        while (true)
                        {
                          switch (num5)
                          {
                            case 0:
                            case 1:
                            case 2:
                              goto label_23;
                            case 5:
                            case 6:
                              goto label_24;
                            default:
                              num5 = storageFileStream == null ? 6 : 0;
                              continue;
                          }
                        }
label_23:
                        Ⴈ.Ⴐ.Ⴈ((Stream) storageFileStream, 208, 246);
label_24:;
                      }
                      num6 = 6;
                      break;
                    case 8:
label_6:
                      str = strArray[index];
                      key = DoNotPruneTypeAttribute.Ⴗ(str, 520, 617);
                      goto case 3;
                    case 9:
                      Ⴅ = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, Ⴈ.ႷႭ.ႰႨ(key, Ⴈ.Ⴀ.Ⴐ(1468304751, 6), 37, 23), 680, 667);
                      num2 = 7;
                      continue;
                    default:
                      strArray = ႳႭ.Ⴍ(UsageCountStore.Ⴍ, Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, SimpleZip.Ⴓ(661403351, 5), 122, 72), 112, 87);
                      num2 = 1;
                      continue;
                  }
label_26:
                  while (true)
                  {
                    switch (num6)
                    {
                      case 0:
                        goto label_31;
                      case 3:
                      case 5:
                        goto label_28;
                      default:
                        dynamicFeatureCounts[key] = numArray1[0];
                        ++index;
                        num6 = 3;
                        continue;
                    }
                  }
label_28:
                  if (index >= strArray.Length)
                  {
                    num6 = 0;
                    goto label_26;
                  }
                  else
                    goto label_6;
                }
              }
              catch (DirectoryNotFoundException ex)
              {
              }
label_31:
              num7 = 2;
              switch (num7)
              {
                case 0:
                case 4:
                  break;
                default:
                  usageCounts = new UsageCounts(staticFeatureCounts, dynamicFeatureCounts);
                  break;
              }
              break;
          }
        }
        catch (Exception ex)
        {
          objArray = new object[11]
          {
            (object) staticFeatureCounts,
            (object) dynamicFeatureCounts,
            (object) str,
            (object) key,
            (object) Ⴍ,
            (object) numArray1,
            (object) Ⴅ,
            (object) storageFileStream,
            (object) numArray2,
            (object) strArray,
            (object) index
          };
          object[] objects = objArray;
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
        switch (4)
        {
          default:
            return usageCounts;
        }
      }
      catch (Exception ex)
      {
        int num8;
        object[] objects = new object[21]
        {
          (object) staticFeatureCounts,
          (object) dynamicFeatureCounts,
          (object) str,
          (object) key,
          (object) Ⴍ,
          (object) numArray1,
          (object) Ⴅ,
          (object) storageFileStream,
          (object) numArray2,
          (object) strArray,
          (object) index,
          (object) objArray,
          (object) usageCounts,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) num5,
          (object) num6,
          (object) num7,
          (object) num8
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    private static void Ⴃ()
    {
      int num1;
      int num2;
      string[] strArray;
      int index;
      string str1;
      string str2;
      string Ⴅ1;
      string Ⴅ2;
      int num3;
      int num4;
      try
      {
        try
        {
          num1 = 4;
          switch (num1)
          {
            default:
              UsageCountStore.Ⴈ(UsageCountStore.Ⴗ);
              try
              {
                num2 = 5;
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 8:
                      index = 0;
                      num2 = 6;
                      continue;
                    case 1:
                    case 10:
                      Ⴅ1 = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, str1, 903, 948);
                      UsageCountStore.Ⴈ(Ⴅ1);
                      Ⴅ2 = Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, Ⴈ.ႷႭ.ႰႨ(str2, Ⴈ.Ⴀ.Ⴐ(1468304744, 1), 833, 883), 943, 924);
                      num2 = 2;
                      continue;
                    case 2:
                      UsageCountStore.Ⴈ(Ⴅ2);
                      ++index;
                      num2 = 6;
                      continue;
                    case 3:
                      num2 = 10;
                      continue;
                    case 4:
                      goto label_13;
                    case 6:
                      num2 = index < strArray.Length ? 9 : 4;
                      continue;
                    case 9:
                      str1 = strArray[index];
                      str2 = DoNotPruneTypeAttribute.Ⴗ(str1, 956, 989);
                      goto case 3;
                    default:
                      strArray = ႳႭ.Ⴍ(UsageCountStore.Ⴍ, Ⴈ.ႷႭ.ႰႨ(UsageCountStore.Ⴓ, SimpleZip.Ⴓ(661403344, 2), 39, 21), 704, 743);
                      num2 = 8;
                      continue;
                  }
                }
              }
              catch (DirectoryNotFoundException ex)
              {
              }
label_13:
              try
              {
                num3 = 3;
                switch (num3)
                {
                  default:
                    UsageCountStore.Ⴍ.DeleteDirectory(UsageCountStore.Ⴓ);
                    break;
                }
              }
              catch (IsolatedStorageException ex)
              {
              }
              num4 = 3;
              switch (num4)
              {
                default:
                  UsageCountStore.Ⴍ.CreateDirectory(UsageCountStore.Ⴓ);
                  break;
              }
              break;
          }
        }
        catch (Exception ex)
        {
          string o1 = str1;
          string o2 = str2;
          string o3 = Ⴅ1;
          string o4 = Ⴅ2;
          string[] o5 = strArray;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) index;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
          throw;
        }
        switch (4)
        {
        }
      }
      catch (Exception ex)
      {
        int num5;
        object[] objects = new object[11]
        {
          (object) str1,
          (object) str2,
          (object) Ⴅ1,
          (object) Ⴅ2,
          (object) strArray,
          (object) index,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) num5
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    private sealed class ႣႨ : IDisposable
    {
      private static readonly CultureInfo Ⴐ;
      private FeedbackControl.ႨႰ Ⴈ;

      public ႣႨ(string Ⴈ)
      {
        CultureInfo cultureInfo;
        Mutex mutex;
        try
        {
          try
          {
            cultureInfo = PoweredBy.Ⴐ(DoNotObfuscateTypeAttribute.Ⴈ(768, 843), 560, 530);
            this.Ⴈ.Ⴃ = cultureInfo;
            AppRegistryKeys.Ⴅ(DoNotObfuscateTypeAttribute.Ⴈ(580, 527), UsageCountStore.ႣႨ.Ⴐ, 257, 256);
            if (AppPathFinder.Ⴐ(Ⴈ, 213, 226) > 260)
              Ⴈ = ႳႤ.Ⴗ(Ⴈ, 261, 674, 767);
            Ⴈ = SimpleZip.ႤႭ.Ⴜ(Ⴈ, Path.DirectorySeparatorChar, '_', 1020, 909);
            mutex = new Mutex(false, Ⴈ);
            this.Ⴈ.Ⴗ = mutex;
            try
            {
              this.Ⴈ.Ⴗ.WaitOne();
            }
            catch (AbandonedMutexException ex)
            {
            }
          }
          catch (Exception ex)
          {
            string o2 = Ⴈ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          CultureInfo o1 = cultureInfo;
          Mutex o2 = mutex;
          string o4 = Ⴈ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
          throw;
        }
      }

      public void Dispose()
      {
        int num1;
        try
        {
          try
          {
            num1 = 3;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 5:
                  goto label_6;
                case 1:
                  goto label_3;
                default:
                  SmartAssembly.SmartExceptionsCore.DoNotObfuscateAttribute.Ⴄ(this.Ⴈ.Ⴗ, 427, 401);
                  FeedbackControl.ႨႷ((WaitHandle) this.Ⴈ.Ⴗ, 391, 475);
                  num1 = 1;
                  continue;
              }
            }
label_3:
            DoNotObfuscateTypeAttribute.Ⴈ(461, 390).CurrentUICulture = this.Ⴈ.Ⴃ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
label_6:
          switch (0)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
      }

      static ႣႨ()
      {
        try
        {
          DoNotPruneAttribute.ႰႣ();
          try
          {
            UsageCountStore.ႣႨ.Ⴐ = ႷႤ.Ⴄ(Ⴈ.ႳႷ.Ⴗ(2059791218, 8), 59, 51);
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException0(ex);
            throw;
          }
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }
  }
}
