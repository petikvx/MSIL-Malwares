// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.UnhandledExceptionHandler
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using My;
using SmartAssembly.Attributes;
using SmartAssembly.Shared;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.SmartExceptionsWithUI;
using SmartAssembly.SmartUsageCore;
using SmartAssembly.Zip;
using System;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Security.Permissions;
using System.Threading;
using System.Web.Services.Protocols;
using System.Windows.Forms;
using Ⴈ;

namespace SmartAssembly.SmartExceptionsCore
{
  public abstract class UnhandledExceptionHandler
  {
    public const string ApplicationName = "{1fe9e38e-05cc-46a3-ae48-6cda8fb62056}";
    public const string CompanyName = "{395edd3b-130e-4160-bb08-6931086cea46}";
    private static readonly bool Ⴗ;
    private static readonly string Ⴐ;
    private static UnhandledExceptionHandler Ⴀ;
    private SmartAssembly.SmartUsageCore.ReportUsageAttribute.Ⴈ Ⴅ;

    public event EventHandler DebuggerLaunched
    {
      add
      {
        int num;
        EventHandler eventHandler1;
        EventHandler comparand;
        EventHandler eventHandler2;
        try
        {
          num = 4;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_5;
              case 2:
              case 3:
                comparand = eventHandler1;
                eventHandler2 = (EventHandler) WaitSendingReportControl.Ⴐ((Delegate) comparand, (Delegate) value, 904, 904);
                num = 5;
                continue;
              case 5:
                eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref this.Ⴅ.Ⴃ, eventHandler2, comparand);
                num = eventHandler1 != comparand ? 2 : 6;
                continue;
              case 6:
                goto label_7;
              default:
                eventHandler1 = this.Ⴅ.Ⴃ;
                num = 2;
                continue;
            }
          }
label_5:
          return;
label_7:;
        }
        catch (Exception ex)
        {
          EventHandler o1 = eventHandler1;
          EventHandler o2 = comparand;
          EventHandler o3 = eventHandler2;
          __Boxed<int> o4 = (ValueType) num;
          EventHandler o6 = value;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
      remove
      {
        int num;
        EventHandler eventHandler1;
        EventHandler comparand;
        EventHandler eventHandler2;
        try
        {
          num = 1;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 4:
                eventHandler1 = Interlocked.CompareExchange<EventHandler>(ref this.Ⴅ.Ⴃ, eventHandler2, comparand);
                num = eventHandler1 != comparand ? 3 : 6;
                continue;
              case 2:
              case 3:
                comparand = eventHandler1;
                eventHandler2 = (EventHandler) AutoHeightLabel.Ⴍ((Delegate) comparand, (Delegate) value, 373, 295);
                num = 0;
                continue;
              case 5:
                goto label_5;
              case 6:
                goto label_7;
              default:
                eventHandler1 = this.Ⴅ.Ⴃ;
                num = 3;
                continue;
            }
          }
label_5:
          return;
label_7:;
        }
        catch (Exception ex)
        {
          EventHandler o1 = eventHandler1;
          EventHandler o2 = comparand;
          EventHandler o3 = eventHandler2;
          __Boxed<int> o4 = (ValueType) num;
          EventHandler o6 = value;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
    }

    public event SendingReportFeedbackEventHandler SendingReportFeedback
    {
      add
      {
        int num;
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        SendingReportFeedbackEventHandler comparand;
        SendingReportFeedbackEventHandler feedbackEventHandler2;
        try
        {
          num = 0;
          while (true)
          {
            switch (num)
            {
              case 1:
              case 3:
                num = 6;
                continue;
              case 2:
                comparand = feedbackEventHandler1;
                feedbackEventHandler2 = (SendingReportFeedbackEventHandler) WaitSendingReportControl.Ⴐ((Delegate) comparand, (Delegate) value, 866, 866);
                goto case 1;
              case 4:
                num = feedbackEventHandler1 != comparand ? 2 : 5;
                continue;
              case 5:
                goto label_7;
              case 6:
                feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.Ⴅ.Ⴅ, feedbackEventHandler2, comparand);
                goto case 4;
              default:
                feedbackEventHandler1 = this.Ⴅ.Ⴅ;
                num = 2;
                continue;
            }
          }
label_7:;
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler o1 = feedbackEventHandler1;
          SendingReportFeedbackEventHandler o2 = comparand;
          SendingReportFeedbackEventHandler o3 = feedbackEventHandler2;
          __Boxed<int> o4 = (ValueType) num;
          SendingReportFeedbackEventHandler o6 = value;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
      remove
      {
        int num;
        SendingReportFeedbackEventHandler feedbackEventHandler1;
        SendingReportFeedbackEventHandler comparand;
        SendingReportFeedbackEventHandler feedbackEventHandler2;
        try
        {
          num = 3;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 4:
                comparand = feedbackEventHandler1;
                feedbackEventHandler2 = (SendingReportFeedbackEventHandler) AutoHeightLabel.Ⴍ((Delegate) comparand, (Delegate) value, 22, 68);
                num = 1;
                continue;
              case 1:
              case 2:
                feedbackEventHandler1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler>(ref this.Ⴅ.Ⴅ, feedbackEventHandler2, comparand);
                num = feedbackEventHandler1 != comparand ? 4 : 5;
                continue;
              case 5:
                goto label_5;
              case 6:
                goto label_7;
              default:
                feedbackEventHandler1 = this.Ⴅ.Ⴅ;
                num = 4;
                continue;
            }
          }
label_5:
          return;
label_7:;
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler o1 = feedbackEventHandler1;
          SendingReportFeedbackEventHandler o2 = comparand;
          SendingReportFeedbackEventHandler o3 = feedbackEventHandler2;
          __Boxed<int> o4 = (ValueType) num;
          SendingReportFeedbackEventHandler o6 = value;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }
    }

    protected abstract void OnReportException(ReportExceptionEventArgs e);

    protected abstract void OnFatalException(FatalExceptionEventArgs e);

    protected abstract void OnSecurityException(SecurityExceptionEventArgs e);

    [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
    public static void AttachExceptionHandler(
      UnhandledExceptionHandler unhandledExceptionHandler)
    {
      int num;
      try
      {
        num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
              goto label_5;
            case 1:
            case 6:
              goto label_4;
            case 2:
              UnhandledExceptionHandler.Ⴀ = unhandledExceptionHandler;
              UnhandledExceptionHandlerWithUI.Ⴐ(Ⴈ.Ⴓ.Ⴐ(510, 481), new UnhandledExceptionEventHandler(unhandledExceptionHandler.Ⴄ), 149, 163);
              num = 6;
              continue;
            case 5:
              goto label_7;
            default:
              num = unhandledExceptionHandler == null ? 0 : 2;
              continue;
          }
        }
label_5:
        return;
label_7:
        return;
label_4:
        Application.ThreadException += new ThreadExceptionEventHandler(unhandledExceptionHandler.Ⴀ);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        UnhandledExceptionHandler o2 = unhandledExceptionHandler;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    [SpecialName]
    private static UnhandledExceptionHandler Ⴐ()
    {
      int num1;
      System.Type[] typeArray;
      int index;
      System.Type type;
      int num2;
      int num3;
      try
      {
label_3:
        while (UnhandledExceptionHandler.Ⴀ == null)
        {
          num1 = 3;
          while (true)
          {
            switch (num1)
            {
              case 1:
              case 2:
label_6:
                type = typeArray[index];
                goto case 5;
              case 3:
                typeArray = Ⴈ.Ⴐ.ႥႥ(SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴐ(279, 383), 415, 463);
                index = 0;
                goto label_19;
              case 4:
                // ISSUE: type reference
                if ((object) FatalExceptionEventArgs.Ⴓ(type, 361, 285) == (object) SendingReportFeedbackEventArgs1.Ⴍ(__typeref (UnhandledExceptionHandler), 778, 881))
                {
                  try
                  {
                    num2 = 1;
                    while (true)
                    {
                      switch (num2)
                      {
                        case 0:
                        case 2:
                        case 5:
                          goto label_21;
                        case 3:
                          goto label_16;
                        default:
                          UnhandledExceptionHandler.Ⴀ = (UnhandledExceptionHandler) SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴗ(type, true, 509, 412);
                          num2 = UnhandledExceptionHandler.Ⴀ == null ? 3 : 5;
                          continue;
                      }
                    }
                  }
                  catch
                  {
                    break;
                  }
                }
                else
                  break;
              case 5:
                if ((object) type != null)
                {
                  num1 = 7;
                  continue;
                }
                break;
              case 6:
                goto label_3;
              case 7:
                if ((object) FatalExceptionEventArgs.Ⴓ(type, 857, 813) != null)
                {
                  num1 = 4;
                  continue;
                }
                break;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandler.Ⴐ);
                num1 = 6;
                continue;
            }
label_16:
            num3 = 5;
label_17:
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 1:
                  goto label_19;
                case 3:
                  goto label_21;
                default:
                  ++index;
                  num3 = 1;
                  continue;
              }
            }
label_19:
            if (index >= typeArray.Length)
            {
              num3 = 3;
              goto label_17;
            }
            else
              goto label_6;
          }
        }
label_21:
        return UnhandledExceptionHandler.Ⴀ;
      }
      catch (Exception ex)
      {
        System.Type o1 = type;
        System.Type[] o2 = typeArray;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) index;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    public static void EntryPointException(Exception exception, object[] objects)
    {
      int num1;
      try
      {
        num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 5:
              if (UnhandledExceptionHandler.Ⴐ().Ⴀ((SecurityException) exception))
              {
                num1 = 2;
                continue;
              }
              goto label_10;
            case 2:
              goto label_12;
            case 3:
              goto label_13;
            case 4:
            case 6:
              if (Ⴈ.Ⴅ.Ⴐ(UnhandledExceptionHandler.Ⴐ, Ⴈ.Ⴀ.Ⴐ(1468304320, 4), 887, 813))
              {
                num1 = 1;
                continue;
              }
              goto label_10;
            case 7:
              if (exception is SecurityException)
              {
                num1 = 6;
                continue;
              }
              goto label_10;
            default:
              if (exception != null)
              {
                num1 = 7;
                continue;
              }
              goto label_10;
          }
        }
label_12:
        return;
label_13:
        return;
label_10:
        StackFrameHelper.CreateExceptionN(exception, objects);
        UnhandledExceptionHandler.Ⴐ().Ⴐ(exception, false, false);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num2;
        Exception o3 = exception;
        object[] o4 = objects;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    public static Exception ReportWebMethodException(Exception exception, object[] objects)
    {
      int num;
      try
      {
        try
        {
          num = 6;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_9;
              case 1:
              case 3:
                num = !Ⴈ.Ⴅ.Ⴐ(UsageReportSender.Ⴃ(exception, 834, 894), Ⴈ.ႷႭ.ႥႭ(490613013, 0), 288, 378) ? 5 : 2;
                continue;
              case 2:
                exception = DoNotDistributeAttribute.Ⴐ(exception, 65, 0);
                goto case 7;
              case 4:
                goto label_7;
              case 5:
                goto label_6;
              case 7:
                num = 4;
                continue;
              default:
                // ISSUE: type reference
                num = (object) WaitSendingReportControl.Ⴜ(exception, 846, 804) != (object) SendingReportFeedbackEventArgs1.Ⴍ(__typeref (Exception), 913, 1002) ? 5 : 1;
                continue;
            }
          }
label_6:
          StackFrameHelper.CreateExceptionN(exception, objects);
label_7:
          UnhandledExceptionHandler.Ⴐ().Ⴐ(exception, true, false);
        }
        catch
        {
        }
label_9:
        return (Exception) new SoapException(exception.Message, SoapException.ServerFaultCode);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        Exception o2 = exception;
        object[] o3 = objects;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    public static void ReportException(Exception exception, object[] objects)
    {
      int num;
      try
      {
        try
        {
          num = 2;
          while (true)
          {
            switch (num)
            {
              case 0:
                exception = DoNotDistributeAttribute.Ⴐ(exception, 229, 164);
                num = 6;
                continue;
              case 3:
              case 4:
                num = !Ⴈ.Ⴅ.Ⴐ(UsageReportSender.Ⴃ(exception, 549, 537), Ⴈ.ႷႭ.ႥႭ(490613008, 5), 304, 362) ? 7 : 0;
                continue;
              case 5:
                goto label_7;
              case 6:
                goto label_6;
              case 7:
                goto label_5;
              default:
                // ISSUE: type reference
                num = (object) WaitSendingReportControl.Ⴜ(exception, 490, 384) != (object) SendingReportFeedbackEventArgs1.Ⴍ(__typeref (Exception), 477, 422) ? 7 : 3;
                continue;
            }
          }
label_7:
          return;
label_5:
          StackFrameHelper.CreateExceptionN(exception, objects);
label_6:
          UnhandledExceptionHandler.Ⴐ().Ⴐ(exception, true, true);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        Exception o2 = exception;
        object[] o3 = objects;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private void Ⴀ(object Ⴃ, ThreadExceptionEventArgs Ⴅ)
    {
      int num1;
      Exception exception;
      System.Type type;
      try
      {
        try
        {
          num1 = 11;
          while (true)
          {
            switch (num1)
            {
              case 0:
                num1 = !(exception is SecurityException) ? 2 : 8;
                continue;
              case 1:
              case 8:
                num1 = !(UnhandledExceptionHandler.Ⴐ == Ⴈ.Ⴀ.Ⴐ(1468304332, 8)) ? 2 : 10;
                continue;
              case 2:
                goto label_10;
              case 3:
              case 4:
                exception = (Exception) SmartAssembly.SmartUsageCore.DoNotObfuscateAttribute.Ⴃ(PoweredBy.Ⴈ(type, SimpleZip.Ⴓ(661403505, 8), 182, 134), (object) exception, 260, 328);
                num1 = 0;
                continue;
              case 5:
                goto label_12;
              case 7:
              case 12:
                num1 = !Ⴈ.Ⴅ.Ⴐ(ႳႭ.Ⴀ((MemberInfo) type, 1011, 1013), Ⴈ.ႳႷ.Ⴗ(2059790774, 6), 1023, 933) ? 0 : 9;
                continue;
              case 9:
                num1 = !Ⴈ.Ⴅ.Ⴐ(Ⴈ.Ⴐ.ႥႷ(type, 173, 224), Ⴈ.ႳႷ.Ⴗ(2059790917, 0), 113, 43) ? 0 : 4;
                continue;
              case 10:
                num1 = !this.Ⴀ(exception as SecurityException) ? 2 : 5;
                continue;
              default:
                exception = ႷႠ.Ⴗ(Ⴅ, 353, 305);
                type = WaitSendingReportControl.Ⴜ(exception, 436, 478);
                num1 = 12;
                continue;
            }
          }
label_10:
          this.Ⴐ(exception, true, false);
        }
        catch
        {
        }
label_12:
        switch (1)
        {
        }
      }
      catch (Exception ex)
      {
        Exception o1 = exception;
        System.Type o2 = type;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num1;
        int num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num2;
        object o6 = Ⴃ;
        ThreadExceptionEventArgs o7 = Ⴅ;
        StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, o6, (object) o7);
        throw;
      }
    }

    private void Ⴄ(object Ⴃ, UnhandledExceptionEventArgs Ⴓ)
    {
      int num;
      try
      {
        try
        {
          num = 0;
          while (true)
          {
            switch (num)
            {
              case 1:
              case 3:
              case 7:
                num = !this.Ⴀ(Ⴈ.Ⴓ.Ⴅ(Ⴓ, 498, 476) as SecurityException) ? 6 : 8;
                continue;
              case 2:
                goto label_7;
              case 4:
                num = !Ⴈ.Ⴅ.Ⴐ(UnhandledExceptionHandler.Ⴐ, Ⴈ.Ⴀ.Ⴐ(1468304326, 2), 919, 973) ? 6 : 3;
                continue;
              case 6:
                num = !(Ⴈ.Ⴓ.Ⴅ(Ⴓ, 1023, 977) is Exception) ? 9 : 2;
                continue;
              case 8:
                goto label_8;
              case 9:
                goto label_5;
              default:
                num = !(Ⴈ.Ⴓ.Ⴅ(Ⴓ, 601, 631) is SecurityException) ? 6 : 4;
                continue;
            }
          }
label_8:
          return;
label_5:
          return;
label_7:
          this.Ⴐ((Exception) Ⴓ.ExceptionObject, !Ⴓ.IsTerminating, false);
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        object o3 = Ⴃ;
        UnhandledExceptionEventArgs o4 = Ⴓ;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) this, o3, (object) o4);
        throw;
      }
    }

    public void SetProxy(IWebProxy proxy)
    {
      IWebProxy webProxy;
      try
      {
        webProxy = proxy;
        this.Ⴅ.Ⴍ = webProxy;
      }
      catch (Exception ex)
      {
        IWebProxy o1 = webProxy;
        IWebProxy o3 = proxy;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    protected virtual Guid GetUserID()
    {
      try
      {
        return Guid.Empty;
      }
      catch (Exception ex)
      {
        int num;
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
        throw;
      }
    }

    private bool Ⴀ(SecurityException Ⴅ)
    {
      int num;
      SecurityExceptionEventArgs e;
      try
      {
label_3:
        e = new SecurityExceptionEventArgs(Ⴅ);
        this.OnSecurityException(e);
        num = !e.ReportException ? 0 : 7;
        while (true)
        {
          switch (num)
          {
            case 0:
              num = e.TryToContinue ? 3 : 8;
              continue;
            case 1:
            case 2:
            case 4:
            case 8:
              goto label_6;
            case 3:
              goto label_7;
            case 6:
              goto label_3;
            case 7:
              goto label_4;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (UnhandledExceptionHandler.Ⴀ);
              num = 6;
              continue;
          }
        }
label_4:
        return false;
label_6:
        SimpleZip.ႤႨ.ႤႤ(549, 546);
label_7:
        return true;
      }
      catch (Exception ex)
      {
        SecurityExceptionEventArgs o1 = e;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        SecurityException o4 = Ⴅ;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }

    private void Ⴐ(Exception Ⴃ, bool Ⴗ, bool Ⴅ)
    {
      int num1;
      System.Type type;
      bool flag;
      int num2;
      Ⴈ.Ⴄ Ⴅ1;
      ReportExceptionEventArgs e;
      int num3;
      Assembly[] assemblyArray;
      int index;
      Assembly assembly;
      int num4;
      string str;
      object obj;
      int num5;
      int num6;
      int num7;
      int num8;
      try
      {
        num1 = 8;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              flag = true;
              num1 = Ⴃ == null ? 7 : 6;
              continue;
            case 1:
              Ⴃ = (Exception) SmartAssembly.SmartUsageCore.DoNotObfuscateAttribute.Ⴃ(PoweredBy.Ⴈ(type, SimpleZip.Ⴓ(661403519, 6), 163, 147), (object) Ⴃ, 685, 737);
              num1 = 0;
              continue;
            case 2:
            case 6:
              if (Ⴃ is ThreadAbortException)
              {
                num1 = 7;
                continue;
              }
              goto label_9;
            case 3:
            case 5:
              num1 = !Ⴈ.Ⴅ.Ⴐ(Ⴈ.Ⴐ.ႥႷ(type, 155, 214), Ⴈ.ႳႷ.Ⴗ(2059790925, 8), 450, 408) ? 0 : 1;
              continue;
            case 7:
              goto label_53;
            default:
              ႳႨ.Ⴐ(2U);
              type = WaitSendingReportControl.Ⴜ(Ⴃ, 845, 807);
              num1 = !Ⴈ.Ⴅ.Ⴐ(ႳႭ.Ⴀ((MemberInfo) type, 190, 184), Ⴈ.ႳႷ.Ⴗ(2059790775, 7), 135, 221) ? 0 : 5;
              continue;
          }
        }
label_53:
        return;
label_9:
        try
        {
          num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 9:
                num2 = Ⴗ ? 6 : 8;
                continue;
              case 1:
                num2 = 7;
                continue;
              case 3:
                num2 = !UnhandledExceptionHandler.Ⴗ ? 10 : 11;
                continue;
              case 6:
                num2 = Ⴅ ? 11 : 3;
                continue;
              case 7:
                e = new ReportExceptionEventArgs(Ⴅ1, Ⴃ);
                num2 = AppPathFinder.ReadInstalledSaPath() == null ? 9 : 13;
                continue;
              case 8:
                e.Ⴍ(false);
                e.TryToContinue = false;
                num2 = 10;
                continue;
              case 10:
                goto label_21;
              case 11:
                goto label_20;
              case 12:
                Ⴅ1.ႷႳ(new EventHandler(this.Ⴐ));
                Ⴅ1.ႷႠ(new FatalExceptionEventHandler(this.Ⴅ));
                goto case 1;
              case 13:
                e.Ⴄ();
                goto case 0;
              default:
                Ⴅ1 = new Ⴈ.Ⴄ(this.GetUserID(), Ⴃ, this.Ⴅ.Ⴍ);
                Ⴅ1.SendingReportFeedback += new SendingReportFeedbackEventHandler(this.Ⴍ);
                num2 = 12;
                continue;
            }
          }
label_20:
          e.Ⴍ(false);
          e.TryToContinue = true;
label_21:
          this.OnReportException(e);
          flag = !e.TryToContinue;
        }
        catch (ThreadAbortException ex)
        {
        }
        catch (Exception ex)
        {
          this.OnFatalException(new FatalExceptionEventArgs(ex));
        }
        num3 = 3;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 4:
            case 5:
              goto label_28;
            case 1:
            case 2:
              goto label_29;
            default:
              if (flag)
              {
                num3 = 5;
                continue;
              }
              goto label_52;
          }
        }
label_28:
        assemblyArray = SmartAssembly.SmartUsageCore.ReportUsageAttribute.Ⴅ(Ⴈ.Ⴓ.Ⴐ(801, 830), 770, 859);
        index = 0;
        goto label_41;
label_29:
        assembly = assemblyArray[index];
        try
        {
          num4 = 2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 3:
              case 8:
                num4 = !AppNameFinder.Ⴓ(str, MyComputer.Ⴗ(834543290, 7), 302, 361) ? 5 : 1;
                continue;
              case 1:
              case 4:
                obj = SendingReportFeedbackEventArgs.Ⴈ(ႷႤ.Ⴍ(assembly, Ⴈ.ႷႭ.ႥႳ(1491048631, 3), 259, 291), MyComputer.Ⴗ(834543263, 5), 482, 465).GetGetMethod().Invoke((object) null, (object[]) null);
                num4 = 6;
                continue;
              case 5:
                goto label_38;
              case 6:
                obj.GetType().GetMethod(Ⴈ.Ⴀ.Ⴐ(1468304056, 4), new System.Type[0]).Invoke(obj, (object[]) null);
                num4 = 5;
                continue;
              default:
                str = ႳႳ.Ⴜ(assembly, 904, 954);
                num4 = !SmartAssembly.License.License.Ⴄ(str, SimpleZip.Ⴓ(661403485, 8), 293, 264) ? 5 : 0;
                continue;
            }
          }
        }
        catch
        {
        }
label_38:
        num5 = 0;
        while (true)
        {
          switch (num5)
          {
            case 1:
            case 3:
            case 4:
            case 5:
              goto label_41;
            default:
              ++index;
              num5 = 3;
              continue;
          }
        }
label_41:
        if (index >= assemblyArray.Length)
        {
          try
          {
            num6 = 4;
            switch (num6)
            {
              case 3:
                break;
              default:
                Application.Exit();
                break;
            }
          }
          catch
          {
            try
            {
              num7 = 0;
              switch (num7)
              {
                case 2:
                  break;
                default:
                  Environment.Exit(0);
                  break;
              }
            }
            catch
            {
            }
            num8 = 0;
            switch (num8)
            {
            }
          }
        }
        else
          goto label_29;
label_52:
        switch (4)
        {
        }
      }
      catch (Exception ex)
      {
        int num9;
        object[] objects = new object[23]
        {
          (object) type,
          (object) flag,
          (object) Ⴅ1,
          (object) e,
          (object) ex,
          (object) assembly,
          (object) str,
          obj,
          (object) assemblyArray,
          (object) index,
          (object) num1,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) num5,
          (object) num6,
          (object) num7,
          (object) num8,
          (object) num9,
          (object) this,
          (object) Ⴃ,
          (object) Ⴗ,
          (object) Ⴅ
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    private void Ⴅ(object Ⴃ, FatalExceptionEventArgs Ⴄ)
    {
      try
      {
        this.OnFatalException(Ⴄ);
      }
      catch (Exception ex)
      {
        object o2 = Ⴃ;
        FatalExceptionEventArgs o3 = Ⴄ;
        StackFrameHelper.CreateException3(ex, (object) this, o2, (object) o3);
        throw;
      }
    }

    private void Ⴐ(object Ⴗ, EventArgs Ⴄ)
    {
      int num;
      EventHandler ⴃ;
      try
      {
        num = 0;
        while (true)
        {
          switch (num)
          {
            case 1:
              goto label_5;
            case 2:
              goto label_7;
            case 3:
              num = ⴃ == null ? 5 : 4;
              continue;
            case 4:
              goto label_4;
            case 5:
              goto label_8;
            default:
              ⴃ = this.Ⴅ.Ⴃ;
              goto case 3;
          }
        }
label_5:
        return;
label_7:
        return;
label_8:
        return;
label_4:
        DESCryptoIndirector.Ⴈ(ⴃ, Ⴗ, Ⴄ, 587, 579);
      }
      catch (Exception ex)
      {
        EventHandler o1 = ⴃ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        object o4 = Ⴗ;
        EventArgs o5 = Ⴄ;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, o4, (object) o5);
        throw;
      }
    }

    private void Ⴍ(object Ⴗ, SendingReportFeedbackEventArgs Ⴅ)
    {
      int num;
      SendingReportFeedbackEventHandler ⴅ;
      try
      {
        num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 5:
              goto label_4;
            case 1:
              goto label_5;
            case 2:
              goto label_7;
            case 4:
              num = ⴅ == null ? 1 : 0;
              continue;
            default:
              ⴅ = this.Ⴅ.Ⴅ;
              goto case 4;
          }
        }
label_5:
        return;
label_7:
        return;
label_4:
        ⴅ(Ⴗ, Ⴅ);
      }
      catch (Exception ex)
      {
        SendingReportFeedbackEventHandler o1 = ⴅ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        object o4 = Ⴗ;
        SendingReportFeedbackEventArgs o5 = Ⴅ;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, o4, (object) o5);
        throw;
      }
    }

    protected UnhandledExceptionHandler()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static UnhandledExceptionHandler()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        UnhandledExceptionHandler.Ⴗ = SendingReportFeedbackEventArgs.Ⴀ(Ⴈ.ႷႭ.ႥႭ(490613014, 8), 571, 581);
        UnhandledExceptionHandler.Ⴐ = Ⴈ.Ⴀ.Ⴐ(1468304332, 8);
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }
  }
}
