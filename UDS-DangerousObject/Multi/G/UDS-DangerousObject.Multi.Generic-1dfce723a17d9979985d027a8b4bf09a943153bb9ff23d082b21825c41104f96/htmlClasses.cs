// Decompiled with JetBrains decompiler
// Type: eg2012.htmlClasses
// Assembly: SinkStack, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A02AD0B4-EB98-42A4-95E2-E2AB11E6E27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-1dfce723a17d9979985d027a8b4bf09a943153bb9ff23d082b21825c41104f96.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml.Linq;

namespace eg2012
{
  [StandardModule]
  internal sealed class htmlClasses
  {
    internal class Statistics
    {
      private StringBuilder _html;
      private string _title;
      private bool alt;
      private int count;
      private int RowMode;

      internal Statistics(XElement content)
      {
        this._html = new StringBuilder();
        this.RowMode = 1;
        // ISSUE: reference to a compiler-generated method
        this._title = eg2012.My.InternalXmlHelper.get_AttributeValue(content, XName.Get("title", ""));
        if (string.IsNullOrEmpty(this._title))
          this._title = string.Empty;
        this.Parse(content);
      }

      internal Statistics(string title, XElement content)
      {
        this._html = new StringBuilder();
        this.RowMode = 0;
        this._title = title;
        this.Parse(content);
      }

      internal void Parse(XElement content)
      {
        this._html.Append("<!--StartFragment -->");
        StringBuilder html = this._html;
        XElement xelement = new XElement(XName.Get("span", ""));
        xelement.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-size: 20px; color: #003080; vertical-align: bottom"));
        xelement.Add((object) this._title);
        string str = xelement.ToString();
        html.Append(str);
        if (!content.Elements().Any<XElement>())
          return;
        this._html.Append(Environment.NewLine);
        this._html.Append("<table>");
        this._html.Append("<tbody>");
        this._html.Append(Environment.NewLine);
        this.Header();
        try
        {
          foreach (XElement element in content.Elements())
            this.Row(element);
        }
        finally
        {
          IEnumerator<XElement> enumerator;
          enumerator?.Dispose();
        }
        this._html.Append("</tbody>");
        this._html.Append("</table>");
        this._html.Append("<!--EndFragment -->");
      }

      internal string page() => eg2012.My.Resources.Resources.htmlTemplate.Replace("%title%", this._title).Replace("%content%", this._html.ToString());

      private void Header()
      {
        this._html.Append("<tr style='background-color:#F8F8F8;'>");
        this._html.Append("<td style='font-size: 14px;'></td>");
        this._html.Append("<td style='font-size: 14px; vertical-align: bottom;'>Aeg</td>");
        if (this.RowMode == 1)
          this._html.Append("<td style='font-size: 14px; vertical-align: bottom;'>Nimi</td>");
        this._html.Append("<td style='font-size: 14px; vertical-align: bottom;'>Saade</td>");
        this._html.Append("<td style='font-size: 14px; vertical-align: bottom;'>Ajastus</td>");
      }

      private void Row(XElement content)
      {
        this._html.Append(Microsoft.VisualBasic.Strings.Space(5));
        if (this.alt)
          this._html.Append("<tr style='background-color:#F0F0F0;'>");
        else
          this._html.Append("<tr style='background-color:#E0E0E0;'>");
        this.alt = !this.alt;
        // ISSUE: variable of a reference type
        int& local;
        // ISSUE: explicit reference operation
        int num = checked (^(local = ref this.count) + 1);
        local = num;
        StringBuilder html1 = this._html;
        XElement xelement1 = new XElement(XName.Get("td", ""));
        xelement1.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-size: 14px; vertical-align: bottom; text-align: right;"));
        xelement1.Add((object) string.Format("{0}.", (object) this.count));
        string str1 = xelement1.ToString();
        html1.Append(str1);
        StringBuilder html2 = this._html;
        XElement xelement2 = new XElement(XName.Get("td", ""));
        xelement2.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-size: 14px; vertical-align: bottom;"));
        // ISSUE: reference to a compiler-generated method
        xelement2.Add((object) DateTime.Parse(eg2012.My.InternalXmlHelper.get_AttributeValue(content, XName.Get("time", ""))).ToString("dd.MM.yy HH:mm:ss"));
        string str2 = xelement2.ToString();
        html2.Append(str2);
        if (this.RowMode == 1)
        {
          StringBuilder html3 = this._html;
          XElement xelement3 = new XElement(XName.Get("td", ""));
          xelement3.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-weight: bold; font-size: 14px; vertical-align: bottom;"));
          // ISSUE: reference to a compiler-generated method
          xelement3.Add((object) eg2012.My.InternalXmlHelper.get_AttributeValue(content, XName.Get("id", "")));
          string str3 = xelement3.ToString();
          html3.Append(str3);
        }
        StringBuilder html4 = this._html;
        XElement xelement4 = new XElement(XName.Get("td", ""));
        xelement4.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-weight: bold; font-size: 14px; vertical-align: bottom;"));
        // ISSUE: reference to a compiler-generated method
        xelement4.Add((object) eg2012.My.InternalXmlHelper.get_AttributeValue(content, XName.Get("title", "")));
        string str4 = xelement4.ToString();
        html4.Append(str4);
        // ISSUE: reference to a compiler-generated method
        string content1 = eg2012.My.InternalXmlHelper.get_AttributeValue(content, XName.Get("src", ""));
        if (string.IsNullOrEmpty(content1))
        {
          StringBuilder html5 = this._html;
          XElement xelement5 = new XElement(XName.Get("td", ""));
          xelement5.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-size: 14px; vertical-align: bottom;"));
          // ISSUE: reference to a compiler-generated method
          xelement5.Add((object) this.SlotDescription(eg2012.My.InternalXmlHelper.get_AttributeValue(content, XName.Get("slot", ""))));
          string str5 = xelement5.ToString();
          html5.Append(str5);
        }
        else
        {
          StringBuilder html6 = this._html;
          XElement xelement6 = new XElement(XName.Get("td", ""));
          xelement6.Add((object) new XAttribute(XName.Get("style", ""), (object) "font-size: 14px; vertical-align: bottom;"));
          xelement6.Add((object) content1);
          string str6 = xelement6.ToString();
          html6.Append(str6);
        }
        this._html.Append("</tr>");
        this._html.Append(Environment.NewLine);
      }

      private string SlotDescription(string id)
      {
        int num = int.Parse(id);
        switch (num)
        {
          case 1:
            return "Käsitsi";
          case 3:
            return "Saate algus";
          case 9:
            return "Saate lõpp";
          case 30:
            return "Saatekava";
          case 31:
            return "Etteantud kellaaeg";
          default:
            if (num >= 400 && num <= 499)
              return this.Position(id, "Enne {0}. reklaami");
            if (num >= 500 && num <= 599)
              return string.Format("Peale {0}. reklaami", (object) checked (int.Parse(id.Substring(1, 1)) - 1));
            if (num >= 600 && num <= 699)
              return this.Position(id, "{0}. saateosa algus");
            if (num >= 700 && num <= 799)
              return this.Position(id, "{0}. saateosa ajal");
            if (num >= 800 && num <= 899)
              return this.Position(id, "{0}. saateosa lõpp");
            return num >= 1000 && num <= 1099 ? "Erilahendus" : string.Empty;
        }
      }

      private string Position(string id, string template) => string.Format(template, (object) id.Substring(1, 1));
    }
  }
}
