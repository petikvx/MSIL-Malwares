// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: NU, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5FD10F56-6E8A-4A54-94FE-02843CD215B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-8545c59f6fe59b3a5cdbad8923aa9b4a109dc03f4c003bdba937eacaafbfbf3c.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
      this.b.ClearBoard();
      bool flag = x == Pieces.King;
label_1:
      int num1 = 1645006571;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1709900533)) % 8U)
        {
          case 0:
            num1 = (int) num2 * -1806025263 ^ -156147196;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1130745619 ^ 1091671130;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -291672035 ^ -1993105513;
            continue;
          case 4:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * 891208146 ^ 1993662821;
            continue;
          case 5:
            this.b.DisableTurns = true;
            num1 = 1630593785;
            continue;
          case 6:
            int num3 = flag ? -1078501202 : (num3 = -1539867656);
            num1 = num3 ^ (int) num2 * -1143379428;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 82881896;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1205409079)) % 13U)
        {
          case 0:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 1819698195 ^ -984804891;
            continue;
          case 1:
            num1 = (int) num2 * 525436660 ^ -1282878944;
            continue;
          case 2:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -745179017 ^ -144224299;
            continue;
          case 3:
            this.b.addBlack(2, 3, Pieces.Pawn);
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 485786032 ^ 448384566;
            continue;
          case 4:
            this.b.ClearBoard();
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1283392997 ^ -1339106145;
            continue;
          case 5:
            num1 = (int) num2 * 1823669634 ^ 1357735750;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -1548386007 ^ -540910494;
            continue;
          case 8:
            goto label_3;
          case 9:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * -1394642320 ^ 90732197;
            continue;
          case 10:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1410422376 ^ -32431325;
            continue;
          case 11:
            num1 = (int) num2 * -1936873253 ^ 1265540665;
            continue;
          case 12:
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 334800792 ^ 868025224;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -1583742671;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1216035583)) % 11U)
        {
          case 0:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 1758842648 ^ 2002027697;
            continue;
          case 1:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * -1296288542 ^ 1731150659;
            continue;
          case 2:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 97430315 ^ -1816379316;
            continue;
          case 3:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -476225645 ^ 2065723551;
            continue;
          case 4:
            this.b.ClearBoard();
            num1 = (int) num2 * 1060489865 ^ 1186679902;
            continue;
          case 5:
            num1 = (int) num2 * -1404377664 ^ 465418818;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * -967207862 ^ 1162325070;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 677442598 ^ -100492954;
            continue;
          case 10:
            num1 = (int) num2 * 1080962828 ^ -897392895;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
      this.b.DisableTurns = true;
      this.b.addBlack(0, 7, Pieces.Rook);
label_1:
      int num1 = -1346834146;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -246465545)) % 10U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1728887962 ^ -850348204;
            continue;
          case 1:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -24962043 ^ 485382970;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1515223548 ^ 1887240750;
            continue;
          case 4:
            num1 = (int) num2 * 711711709 ^ -437624412;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num2 * -530168007 ^ 929874285;
            continue;
          case 7:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -291438278 ^ 1052784443;
            continue;
          case 8:
            num1 = (int) num2 * 1114094741 ^ 1425836344;
            continue;
          case 9:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1640679473 ^ 1691194218;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestDiscoverCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 531151256;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 159949235)) % 6U)
        {
          case 0:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * 1736522101 ^ -1089194696;
            continue;
          case 1:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -528500686 ^ 1474186995;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1140099106 ^ 2124605989;
            continue;
          case 4:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 786634883 ^ -1665325983;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
      this.b.addBlack(4, 7, Pieces.King);
label_1:
      int num1 = -2129215781;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -345790763)) % 7U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 220091981 ^ 1777813540;
            continue;
          case 1:
            num1 = (int) num2 * 1058314683 ^ -56267272;
            continue;
          case 2:
            num1 = (int) num2 * 2006203930 ^ 1762675396;
            continue;
          case 3:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * 622272423 ^ 1773796765;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -99727168 ^ -1591948284;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 660913857;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 952487742)) % 12U)
        {
          case 0:
            this.b.addBlack(0, 7, Pieces.Rook);
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 742204670 ^ 1389012943;
            continue;
          case 1:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -1480348982 ^ 986296072;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -1257464304 ^ 992542211;
            continue;
          case 4:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -1092251002 ^ -1171213171;
            continue;
          case 5:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -601376055 ^ -1308163412;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.b.addWhite(0, 0, Pieces.Rook);
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 970065968 ^ 1015207956;
            continue;
          case 8:
            num1 = (int) num2 * 1502953625 ^ -2050253254;
            continue;
          case 9:
            this.b.addWhite(4, 5, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -679535063 ^ -1696645515;
            continue;
          case 10:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 511573728 ^ 1468123302;
            continue;
          case 11:
            num1 = (int) num2 * 1272097869 ^ 1928411880;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }
  }
}
