// Decompiled with JetBrains decompiler
// Type: mmxAH.TrigerCollrecthion
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System.Collections.Generic;

namespace mmxAH
{
  public class TrigerCollrecthion
  {
    private List<MandoratoryTriger> mandaratoryTrigers;
    private List<ChooseTriger> chooseTrigers;

    public TrigerCollrecthion()
    {
      this.mandaratoryTrigers = new List<MandoratoryTriger>();
      this.chooseTrigers = new List<ChooseTriger>();
    }

    public void AddChooseTriger(ChooseTriger t) => this.chooseTrigers.Add(t);

    public void AddMandarotoryTriger(MandoratoryTriger t) => this.mandaratoryTrigers.Add(t);

    public void RemoveTriger(string Code)
    {
      foreach (MandoratoryTriger mandaratoryTriger in this.mandaratoryTrigers)
      {
        if (mandaratoryTriger.GetCodeName() == Code)
        {
          this.mandaratoryTrigers.Remove(mandaratoryTriger);
          return;
        }
      }
      foreach (ChooseTriger chooseTriger in this.chooseTrigers)
      {
        if (chooseTriger.GetCodeName() == Code)
        {
          this.chooseTrigers.Remove(chooseTriger);
          break;
        }
      }
    }

    public List<IOOption> GetChooseOpthions(TrigerEvent even, short CheckCode)
    {
      List<IOOption> chooseOpthions = new List<IOOption>();
      foreach (ChooseTriger chooseTriger in this.chooseTrigers)
      {
        if (chooseTriger.ev == even && chooseTriger.isAvable(CheckCode))
          chooseOpthions.Add(chooseTriger.opt);
      }
      return chooseOpthions;
    }

    public void ExecuteMandeoratory(TrigerEvent even)
    {
      for (int index = 0; index < this.mandaratoryTrigers.Count; ++index)
      {
        MandoratoryTriger mandaratoryTriger = this.mandaratoryTrigers[index];
        mandaratoryTriger.isExecuted = mandaratoryTriger.ev != even;
      }
      do
        ;
      while (this.ExecuteOne());
    }

    private bool ExecuteOne()
    {
      for (int index = 0; index < this.mandaratoryTrigers.Count; ++index)
      {
        MandoratoryTriger mandaratoryTriger = this.mandaratoryTrigers[index];
        if (!mandaratoryTriger.isExecuted)
        {
          mandaratoryTriger.isExecuted = true;
          mandaratoryTriger.Execute();
          return true;
        }
      }
      return false;
    }
  }
}
