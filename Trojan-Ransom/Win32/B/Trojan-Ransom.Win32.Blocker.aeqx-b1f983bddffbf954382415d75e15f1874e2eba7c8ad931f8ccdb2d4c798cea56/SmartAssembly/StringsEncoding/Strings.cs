// Decompiled with JetBrains decompiler
// Type: SmartAssembly.StringsEncoding.Strings
// Assembly: Microsoft Agent, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C1EE5016-57A9-47ED-B119-39E2E5AC9F12
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00028-msil\Trojan-Ransom.Win32.Blocker.aeqx-b1f983bddffbf954382415d75e15f1874e2eba7c8ad931f8ccdb2d4c798cea56.exe

using SmartAssembly.Zip;
using System.Collections;
using System.IO;
using System.Reflection;

namespace SmartAssembly.StringsEncoding
{
  public class Strings
  {
    private static string MustUseCache = "1";
    private static string OffsetValue = "73";
    private static byte[] bytes = (byte[]) null;
    private static Hashtable hashtable = (Hashtable) null;
    private static bool cacheStrings = false;
    private static int offset = 0;

    [DoNotPrune]
    [DoNotMove]
    public static string Get(int stringID)
    {
      int num1 = stringID;
      int num2;
      int num3;
      string str1;
      int num4;
      while (true)
      {
        int offset = Strings.offset;
        int num5 = num1 - offset;
        if (true)
          goto label_19;
label_2:
        if (Strings.cacheStrings)
        {
          str1 = (string) \u0004\u0002.\u007E\u008F\u0002((object) Strings.hashtable, (object) stringID);
          switch (str1)
          {
            case null:
              break;
            default:
              goto label_20;
          }
        }
        int num6 = 0;
        if (num6 == 0)
          goto label_21;
label_9:
        if ((num6 & 64) != 0)
        {
          int num7 = (num3 & 31) << 24;
          byte[] bytes1 = Strings.bytes;
          int index1 = num2;
          int num8 = index1 + 1;
          int num9 = (int) bytes1[index1] << 16;
          int num10 = num7 + num9;
          byte[] bytes2 = Strings.bytes;
          int index2 = num8;
          int num11 = index2 + 1;
          int num12 = (int) bytes2[index2] << 8;
          int num13 = num10 + num12;
          byte[] bytes3 = Strings.bytes;
          int index3 = num11;
          num2 = index3 + 1;
          int num14 = (int) bytes3[index3];
          num4 = num13 + num14;
          if (false)
          {
            num1 = num4;
            continue;
          }
          goto label_12;
        }
        else
          goto label_10;
label_21:
        num2 = stringID;
        if (true)
        {
          num3 = (int) Strings.bytes[num2++];
          if ((num3 & 128) == 0)
            break;
        }
        num6 = num3;
        goto label_9;
label_19:
        stringID = num5;
        goto label_2;
      }
      int num15 = num3;
      if (num15 == 0)
        return string.Empty;
      goto label_13;
label_10:
      num15 = ((num3 & 63) << 8) + (int) Strings.bytes[num2++];
      goto label_13;
label_12:
      num15 = num4;
label_13:
      try
      {
        byte[] numArray = \u0006\u0002.\u0091\u0002(\u0005\u0002.\u007E\u0090\u0002((object) \u0089.\u0015\u0002(), Strings.bytes, num2, num15));
        string str2 = \u000F.\u001F(\u0005\u0002.\u007E\u0090\u0002((object) \u0089.\u0015\u0002(), numArray, 0, numArray.Length));
        if (Strings.cacheStrings)
        {
          try
          {
            \u0007\u0002.\u007E\u0092\u0002((object) Strings.hashtable, (object) stringID, (object) str2);
          }
          catch
          {
          }
        }
        return str2;
      }
      catch
      {
        return (string) null;
      }
label_20:
      return str1;
    }

    static Strings()
    {
      if (\u0010.\u007F(Strings.MustUseCache, "1"))
      {
        Strings.cacheStrings = true;
        Strings.hashtable = new Hashtable();
      }
      Strings.offset = \u0008\u0002.\u0093\u0002(Strings.OffsetValue);
      Assembly assembly = \u0007.\u0015();
      Stream stream = \u000E\u0002.\u007E\u0094\u0002((object) assembly, "{6d29208c-f3a0-4381-b2a1-e30b9ceed692}");
      try
      {
        int length = \u0010\u0002.\u0096\u0002(\u000F\u0002.\u007E\u0095\u0002((object) stream));
        do
        {
          byte[] buffer = new byte[length];
          int num = \u0011\u0002.\u007E\u0097\u0002((object) stream, buffer, 0, length);
          Strings.bytes = SimpleZip.Unzip(buffer);
          \u0006.\u007E\u0014((object) stream);
        }
        while (false);
      }
      finally
      {
        if (stream != null)
          \u0006.\u007E\u0008((object) stream);
      }
    }
  }
}
