// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: 生ث, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8221468-4DC3-4423-BEC3-5B04CD1AB276
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2570b1f0780a754b70c2ec5525da16952c9634a2da6b21c92693380529daffe2.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move
    {
      get
      {
label_1:
        int num1 = 321698796;
        string move;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 313984474)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              move = Notation.\u206D‬‫⁬‪‏‪‍⁬⁪⁫⁮‮⁪​⁬‪‍‭‫​‮⁮​‍⁫⁫‌‫⁭‌⁫⁯‬‭⁪⁬⁪⁬‫‮(this.from.CurrentSquare, \u003CModule\u003E.\u200F​‬⁬‎‭⁮​‌‮‭⁮‌⁭⁮​‏‮⁮‫‍​​‭⁪‬‬‪⁮⁯‬​​⁬‌‫⁯‍⁪⁯‮<string>(1403358123U), this.to.CurrentSquare);
              num1 = (int) num2 * -1691342412 ^ 320996870;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return move;
      }
    }

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = 651288372;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 741806781)) % 5U)
        {
          case 1:
            square2.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            this.from = square1;
            num1 = (int) num2 * -1515549740 ^ 2079402791;
            continue;
          case 2:
            square1 = new Square(f.File, f.Rank, bo);
            square2 = new Square(t.File, t.Rank, bo);
            num1 = (int) num2 * -2003574336 ^ -970282487;
            continue;
          case 3:
            square1.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * -1356249868 ^ 2113601089;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      this.to = square2;
    }

    public override string ToString()
    {
      string move = this.Move;
label_1:
      int num1 = -558886057;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1641877519)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1471948559 ^ -631940714;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u206D‬‫⁬‪‏‪‍⁬⁪⁫⁮‮⁪​⁬‪‍‭‫​‮⁮​‍⁫⁫‌‫⁭‌⁫⁯‬‭⁪⁬⁪⁬‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
