// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: TypeLimitingDeserializationBind, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D6D78DD-B812-498A-928B-6D9E4655E6A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0f32fcee5fe0e98a2f219eac2c9b9c19cbb2f48660a676a0992bf38c59cdf153.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -1808823744;
        bool flag;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1246211330)) % 6U)
          {
            case 0:
              goto label_1;
            case 2:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * 1140504828 ^ 1187365226;
              continue;
            case 3:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 866930613 ^ 803530468;
              continue;
            case 4:
              int num3 = flag ? 1627418347 : (num3 = 780152439);
              num1 = num3 ^ (int) num2 * 354158027;
              continue;
            case 5:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = -519444175;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -266637959;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1321161203)) % 8U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              int num3 = !flag ? -2076697054 : (num3 = -1823090593);
              num1 = num3 ^ (int) num2 * 15297462;
              continue;
            case 3:
              this.m_Dict.Add(aKey, value);
              num1 = -367703830;
              continue;
            case 4:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -1348753365 ^ 516998339;
              continue;
            case 5:
              num1 = (int) num2 * 905733312 ^ 1090681228;
              continue;
            case 6:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 1203461412 ^ -111836400;
              continue;
            case 7:
              num1 = (int) num2 * 937635057 ^ -20454085;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        if (aIndex < 0)
          goto label_4;
label_1:
        int num1 = 1973236775;
label_2:
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2008010666)) % 6U)
          {
            case 1:
              jsonNode = (JSONNode) null;
              num1 = 1366870565;
              continue;
            case 2:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 2121551885 ^ -1866134580;
              continue;
            case 3:
              goto label_3;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 1751562661 ^ -1264365971;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        int num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_5;
label_9:
        return jsonNode;
label_4:
        num3 = 1;
label_5:
        num1 = num3 != 0 ? 1769057432 : (num1 = 1703606313);
        goto label_2;
      }
      set
      {
        if (aIndex < 0)
          goto label_5;
label_1:
        int num1 = -1602617733;
label_2:
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -673474670)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              goto label_4;
            case 2:
              num1 = (int) num2 * -261021945 ^ -1133535696;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_8;
          }
        }
label_3:
        return;
label_8:
        return;
label_4:
        int num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_6;
label_5:
        num3 = 1;
label_6:
        num1 = num3 == 0 ? -434527346 : (num1 = -283512512);
        goto label_2;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = 852164685;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 124070886)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -1079439091 ^ 1671178357;
              continue;
            case 3:
              count = this.m_Dict.Count;
              num1 = (int) num2 * -1984904320 ^ 732328419;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      if (JSONClass.\u200B‏‫⁯⁭‪⁪⁬‏‭‪​⁬⁮⁪‫⁪⁯⁯⁬⁭⁮‭‎‪‬‍‏‪⁭⁭⁮⁫‮‮‮⁫⁫‎⁯‮(aKey))
        goto label_4;
label_1:
      int num1 = -65951654;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -905793905)) % 12U)
        {
          case 0:
            goto label_4;
          case 1:
            num1 = (int) num2 * -1416693056 ^ -1350845887;
            continue;
          case 2:
            num1 = -666582999;
            continue;
          case 3:
            this.m_Dict.Add(aKey, aItem);
            num1 = -919131959;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 436035333 ^ -1515065605;
            continue;
          case 6:
            flag = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -1645362573 ^ 1088972697;
            continue;
          case 7:
            goto label_1;
          case 8:
            int num3 = !flag ? 638583728 : (num3 = 874683674);
            num1 = num3 ^ (int) num2 * -1918329819;
            continue;
          case 9:
            num1 = (int) num2 * -1332821398 ^ 1754482866;
            continue;
          case 10:
            num1 = (int) num2 * -1321680201 ^ -176959267;
            continue;
          case 11:
            num1 = (int) num2 * 793607819 ^ -2035494652;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:
      return;
label_4:
      this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
      num1 = -1611582345;
      goto label_2;
    }

    public override JSONNode Remove(string aKey)
    {
      bool flag = !this.m_Dict.ContainsKey(aKey);
label_1:
      int num1 = 1585379122;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 966358493)) % 6U)
        {
          case 0:
            this.m_Dict.Remove(aKey);
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * -341164841 ^ 1447719447;
            continue;
          case 1:
            int num3 = !flag ? -2015111694 : (num3 = -501379949);
            num1 = num3 ^ (int) num2 * 1022907611;
            continue;
          case 2:
            jsonNode1 = this.m_Dict[aKey];
            num1 = 1336563061;
            continue;
          case 3:
            goto label_1;
          case 5:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * 1861971902 ^ 1821404613;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return jsonNode2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = 2047121062;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 248767769)) % 8U)
        {
          case 0:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 1:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * -1902754446 ^ -761022354;
            continue;
          case 2:
            num1 = (int) num2 * 910608721 ^ -2059998618;
            continue;
          case 3:
            int num4 = !flag ? 1177229844 : (num4 = 1723977345);
            num1 = num4 ^ (int) num2 * -124254781;
            continue;
          case 4:
            jsonNode = (JSONNode) null;
            num1 = 1469536963;
            continue;
          case 6:
            goto label_1;
          case 7:
            if (aIndex >= 0)
            {
              num1 = (int) num2 * -518925333 ^ 1319844452;
              continue;
            }
            num3 = 1;
            break;
          default:
            goto label_12;
        }
        flag = num3 != 0;
        num1 = 1084182570;
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
        jsonNode = (JSONNode) null;
      }
      catch
      {
label_3:
        int num1 = -1516326697;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1040956713)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -1599965388 ^ -823450936;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_6;
          }
        }
      }
label_6:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = 1211159341;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ 2124378862)) % 22U)
            {
              case 0:
                num2 = (int) num3 * -1604769956 ^ 1930802344;
                continue;
              case 1:
                num2 = (int) num3 * -1059531845 ^ 1444081378;
                continue;
              case 2:
                this.\u003C\u003E1__state = 1;
                num2 = (int) num3 * 1072148358 ^ -344696960;
                continue;
              case 3:
                int num4;
                num2 = num4 = !enumerator.MoveNext() ? 271938940 : (num4 = 37244878);
                continue;
              case 4:
                goto label_18;
              case 5:
                this.\u003C\u003E2__current = N.Value;
                num2 = (int) num3 * 398987812 ^ -661137440;
                continue;
              case 6:
                N = enumerator.Current;
                num2 = 788760889;
                continue;
              case 7:
                goto label_1;
              case 8:
                goto label_8;
              case 10:
              case 11:
                this.\u003C\u003E1__state = -3;
                num2 = 709812183;
                continue;
              case 12:
                num2 = (int) num3 * -1597149847 ^ 489917755;
                continue;
              case 13:
              case 16:
                this.\u003C\u003E1__state = -1;
                num2 = 2023431794;
                continue;
              case 14:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * 231334821 ^ 1543138976;
                continue;
              case 15:
                int num5 = num1 != 0 ? -682613686 : (num5 = -1607746993);
                num2 = num5 ^ (int) num3 * -1695944342;
                continue;
              case 17:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * -19007524 ^ 720141451;
                continue;
              case 18:
                num2 = (int) num3 * 460182809 ^ -1682551241;
                continue;
              case 19:
                enumerator = this.m_Dict.GetEnumerator();
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * -606285832 ^ 848410841;
                continue;
              case 20:
                int num6;
                num2 = num6 = num1 != 1 ? 976157301 : (num6 = 1443863107);
                continue;
              case 21:
                num2 = (int) num3 * -1396462618 ^ 488675654;
                continue;
              default:
                goto label_21;
            }
          }
label_8:
          return false;
label_18:
          return true;
label_21:
          enumerator = new Dictionary<string, JSONNode>.Enumerator();
          return false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
      string str1 = "{";
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_7:
        int num1 = !enumerator.MoveNext() ? 2074910618 : (num1 = 1997308998);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 903847528)) % 8U)
          {
            case 0:
              num1 = (int) num2 * -1766814619 ^ -327839405;
              continue;
            case 1:
              goto label_7;
            case 3:
              int num3 = JSONClass.\u200D‌‮⁪⁮⁭‮‎‭⁬‏⁮‏‎‭⁭‬‪‍⁯‭‪⁬​⁯‮⁯‏‭‪⁬⁮‫‮⁫⁬⁮‮‏⁯‮(str1) > 2 ? -914947549 : (num3 = -552470223);
              num1 = num3 ^ (int) num2 * -1167397246;
              continue;
            case 4:
              num1 = 1997308998;
              continue;
            case 5:
              str1 = JSONClass.\u202D‏‫‬⁯​‍​‍‫‮⁭⁭‬‭‫‫⁭‏⁬‭⁪⁯⁫⁭‏⁭⁬⁭‍‭​⁫‭⁮⁮‌⁫​‭‮(str1, ", ");
              num1 = (int) num2 * 1270021126 ^ -1497918583;
              continue;
            case 6:
              current = enumerator.Current;
              num1 = 1947888152;
              continue;
            case 7:
              str1 = JSONClass.\u200E⁮⁬‌⁫⁪⁮​‌⁪‮⁬‍⁪⁭⁭‏⁬‏⁮⁪⁮‎‮⁬⁮⁫‮⁯⁮‫​‏⁭‬⁫⁮⁪⁯‬‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206E‭⁮‮⁮⁭‫‭⁭‏⁭⁪⁬‮‏‪‭⁪‬‎‪⁮⁮⁭‫⁬‬​​‬‍⁫⁪‏‏⁮‍‎⁪‬‮((object) current.Value)
              });
              num1 = 1976087033;
              continue;
            default:
              goto label_15;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_11:
        int num4 = 868184941;
        while (true)
        {
          uint num5;
          switch ((num5 = (uint) (num4 ^ 903847528)) % 3U)
          {
            case 0:
              goto label_11;
            case 2:
              num4 = (int) num5 * 1239662909 ^ 623396944;
              continue;
            default:
              goto label_14;
          }
        }
label_14:;
      }
label_15:
      string str2 = JSONClass.\u202D‏‫‬⁯​‍​‍‫‮⁭⁭‬‭‫‫⁭‏⁬‭⁪⁯⁫⁭‏⁭⁬⁭‍‭​⁫‭⁮⁮‌⁫​‭‮(str1, "}");
label_16:
      int num6 = 1236356536;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ 903847528)) % 3U)
        {
          case 0:
            goto label_16;
          case 2:
            num6 = (int) num7 * -1926166085 ^ -1960487264;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -1660055606;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -141341094)) % 3U)
        {
          case 1:
            str1 = "{ ";
            num1 = (int) num2 * -688169462 ^ 37236276;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_13:
        int num3 = !enumerator.MoveNext() ? -1173019742 : (num3 = -935118157);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -141341094)) % 8U)
          {
            case 1:
              current = enumerator.Current;
              num3 = -1241092978;
              continue;
            case 2:
              num3 = -935118157;
              continue;
            case 3:
              str1 = JSONClass.\u202D‏‫‬⁯​‍​‍‫‮⁭⁭‬‭‫‫⁭‏⁬‭⁪⁯⁫⁭‏⁭⁬⁭‍‭​⁫‭⁮⁮‌⁫​‭‮(str1, ", ");
              num3 = (int) num4 * -1567712269 ^ 184556557;
              continue;
            case 4:
              int num5 = JSONClass.\u200D‌‮⁪⁮⁭‮‎‭⁬‏⁮‏‎‭⁭‬‪‍⁯‭‪⁬​⁯‮⁯‏‭‪⁬⁮‫‮⁫⁬⁮‮‏⁯‮(str1) <= 3 ? 1100356656 : (num5 = 999501405);
              num3 = num5 ^ (int) num4 * -523320941;
              continue;
            case 5:
              goto label_13;
            case 6:
              str1 = JSONClass.\u206A‪⁯‎‌‍‏‭⁪‬​⁬‎‏⁮⁬⁭‮‍⁮‬​⁪‬​⁫⁬⁭‎‎⁯‏​‬‭‭⁮⁫⁬‫‮(str1, "\n", aPrefix, "   ");
              str1 = JSONClass.\u200E⁮⁬‌⁫⁪⁮​‌⁪‮⁬‍⁪⁭⁭‏⁬‏⁮⁪⁮‎‮⁬⁮⁫‮⁯⁮‫​‏⁭‬⁫⁮⁪⁯‬‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u202D‏‫‬⁯​‍​‍‫‮⁭⁭‬‭‫‫⁭‏⁬‭⁪⁯⁫⁭‏⁭⁬⁭‍‭​⁫‭⁮⁮‌⁫​‭‮(aPrefix, "   "))
              });
              num3 = -2048195843;
              continue;
            case 7:
              num3 = (int) num4 * -1532282851 ^ -1091436244;
              continue;
            default:
              goto label_15;
          }
        }
      }
label_15:
      string str2 = JSONClass.\u206A‪⁯‎‌‍‏‭⁪‬​⁬‎‏⁮⁬⁭‮‍⁮‬​⁪‬​⁫⁬⁭‎‎⁯‏​‬‭‭⁮⁫⁬‫‮(str1, "\n", aPrefix, "}");
label_16:
      int num6 = -886892721;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -141341094)) % 4U)
        {
          case 0:
            goto label_16;
          case 1:
            str3 = str2;
            num6 = (int) num7 * 1459162605 ^ 767451584;
            continue;
          case 3:
            num6 = (int) num7 * -1460302898 ^ 935676742;
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -179630069;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1960557057)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 1620382644 ^ 2048641994;
            continue;
          case 1:
            JSONClass.\u202C‫‭⁫‭‍‍‎‫‫⁫⁬‪​‍‏‮‬⁮‭‎‍‬‏⁮⁮⁯⁭‌‮‎‌‌⁪⁯⁪​⁭​⁭‮(aWriter, (byte) 2);
            num1 = (int) num2 * 655226023 ^ -634797650;
            continue;
          case 2:
            JSONClass.\u200C‍‭⁫​⁬​⁫‮‍‬⁪‮⁬‪‭‏​‌‪‭⁬⁬‮‏‎​⁬‬‎⁬‌⁬‪⁯⁪⁪‍‬‌‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * 241683149 ^ 260008771;
            continue;
          case 3:
            num1 = (int) num2 * 899093772 ^ 1108657622;
            continue;
          case 4:
            num1 = (int) num2 * -1128782245 ^ -489397436;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_19:
        int num3 = !enumerator.MoveNext() ? -670480898 : (num3 = -1983251591);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1960557057)) % 9U)
          {
            case 0:
              num3 = -1983251591;
              continue;
            case 1:
              num3 = (int) num4 * -1379473670 ^ -703138524;
              continue;
            case 2:
              goto label_19;
            case 3:
              goto label_20;
            case 4:
              num3 = (int) num4 * -2049140476 ^ 1978195271;
              continue;
            case 5:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * 1601819086 ^ 1925083344;
              continue;
            case 6:
              JSONClass.\u202C‬‮‏‪‎⁫⁯‮‬‎⁬‍⁮⁬‪⁯‏⁪‏‪‬⁫⁪⁭​‮⁯⁮⁪‍​⁯⁯⁫‭‮‪‬⁯‮(aWriter, current);
              num3 = (int) num4 * 1366214588 ^ 1603677818;
              continue;
            case 7:
              num3 = (int) num4 * 723933498 ^ -135097588;
              continue;
            case 8:
              current = enumerator.Current;
              num3 = -264924446;
              continue;
            default:
              goto label_12;
          }
        }
label_20:
        return;
label_12:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = 828793969;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 663680689)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1362250268 ^ 1270636325;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u200B‏‫⁯⁭‪⁪⁬‏‭‪​⁬⁮⁪‫⁪⁯⁯⁬⁭⁮‭‎‪‬‍‏‪⁭⁭⁮⁫‮‮‮⁫⁫‎⁯‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u200D‌‮⁪⁮⁭‮‎‭⁬‏⁮‏‎‭⁭‬‪‍⁯‭‪⁬​⁯‮⁯‏‭‪⁬⁮‫‮⁫⁬⁮‮‏⁯‮([In] string obj0) => obj0.Length;

    static string \u202D‏‫‬⁯​‍​‍‫‮⁭⁭‬‭‫‫⁭‏⁬‭⁪⁯⁫⁭‏⁭⁬⁭‍‭​⁫‭⁮⁮‌⁫​‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206E‭⁮‮⁮⁭‫‭⁭‏⁭⁪⁬‮‏‪‭⁪‬‎‪⁮⁮⁭‫⁬‬​​‬‍⁫⁪‏‏⁮‍‎⁪‬‮([In] object obj0) => obj0.ToString();

    static string \u200E⁮⁬‌⁫⁪⁮​‌⁪‮⁬‍⁪⁭⁭‏⁬‏⁮⁪⁮‎‮⁬⁮⁫‮⁯⁮‫​‏⁭‬⁫⁮⁪⁯‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A‪⁯‎‌‍‏‭⁪‬​⁬‎‏⁮⁬⁭‮‍⁮‬​⁪‬​⁫⁬⁭‎‎⁯‏​‬‭‭⁮⁫⁬‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u202C‫‭⁫‭‍‍‎‫‫⁫⁬‪​‍‏‮‬⁮‭‎‍‬‏⁮⁮⁯⁭‌‮‎‌‌⁪⁯⁪​⁭​⁭‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200C‍‭⁫​⁬​⁫‮‍‬⁪‮⁬‪‭‏​‌‪‭⁬⁬‮‏‎​⁬‬‎⁬‌⁬‪⁯⁪⁪‍‬‌‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u202C‬‮‏‪‎⁫⁯‮‬‎⁬‍⁮⁬‪⁯‏⁪‏‪‬⁫⁪⁭​‮⁯⁮⁪‍​⁯⁯⁫‭‮‪‬⁯‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
