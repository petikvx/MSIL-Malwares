// Decompiled with JetBrains decompiler
// Type: 
// Assembly: BangBang___M, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 769E4E7F-CF46-4B42-AB5D-A0EF27259400
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bsmo-9df471ff26a9958bb60bde1afb1049410db5f4eb196cd454c59722fdb99cb067.exe

using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

internal static class \u0006
{
  private static readonly Dictionary<int, string> \u0002 = new Dictionary<int, string>(41);
  private static BinaryReader \u0003;
  private static byte[] \u0005;
  private static short \u0008;
  private static bool \u0006;
  private static byte[] \u000E;
  private static bool \u000F;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    if (\u0006.\u000F)
    {
      string str;
      \u0006.\u0002.TryGetValue(_param0, out str);
      return str;
    }
    lock (\u0006.\u0002)
    {
      string str;
      if (\u0006.\u0002.TryGetValue(_param0, out str))
        return str;
      if (\u0006.\u0003 == null)
      {
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        \u0006.\u0006 = false;
        \u0006.\u0003 = new BinaryReader(executingAssembly.GetManifestResourceStream(" \u200B          "));
        short count = (short) ((int) \u0006.\u0003.ReadInt16() ^ -14349);
        if (count == (short) 0)
          \u0006.\u0008 = (short) ((int) \u0006.\u0003.ReadInt16() ^ 21608);
        else
          \u0006.\u0005 = \u0006.\u0003.ReadBytes((int) count);
        \u0006.\u000E = executingAssembly.GetName().GetPublicKeyToken();
        if (\u0006.\u000E != null && \u0006.\u000E.Length == 0)
          \u0006.\u000E = (byte[]) null;
      }
      int num1 = _param0 ^ -1073150278;
      \u0006.\u0003.BaseStream.Position = (long) num1;
      byte[] numArray;
      if (\u0006.\u0005 != null)
      {
        numArray = \u0006.\u0005;
      }
      else
      {
        short count = \u0006.\u0008 != (short) -1 ? \u0006.\u0008 : (short) ((int) \u0006.\u0003.ReadInt16() ^ -20618 ^ num1);
        numArray = count != (short) 0 ? \u0006.\u0003.ReadBytes((int) count) : (byte[]) null;
      }
      int count1 = \u0006.\u0003.ReadInt32() ^ num1 ^ -1732278157;
      bool flag = (count1 & int.MinValue) != 0;
      if (flag)
        count1 &= int.MaxValue;
      byte[] bytes = \u000E.\u0002(numArray, \u0006.\u0003.ReadBytes(count1));
      if (\u0006.\u000E != null != \u0006.\u0006)
      {
        for (int index = 0; index < count1; ++index)
        {
          byte num2 = \u0006.\u000E[index & 7];
          byte num3 = (byte) ((int) num2 << 3 | (int) num2 >> 5);
          bytes[index] = (byte) ((uint) bytes[index] ^ (uint) num3);
        }
      }
      if (flag && !\u0006.\u0006)
      {
        char[] chArray = new char[count1];
        for (int index = 0; index < count1; ++index)
          chArray[index] = (char) bytes[index];
        str = new string(chArray);
      }
      else
        str = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
      if (\u0006.\u0006)
        str = (_param0 + count1 ^ 936568).ToString("X");
      str = string.Intern(str);
      \u0006.\u0002.Add(_param0, str);
      if (\u0006.\u0002.Count == 41)
      {
        \u0006.\u0003.Close();
        \u0006.\u0003 = (BinaryReader) null;
        \u0006.\u0005 = \u0006.\u000E = (byte[]) null;
        \u0006.\u000F = true;
      }
      return str;
    }
  }
}
