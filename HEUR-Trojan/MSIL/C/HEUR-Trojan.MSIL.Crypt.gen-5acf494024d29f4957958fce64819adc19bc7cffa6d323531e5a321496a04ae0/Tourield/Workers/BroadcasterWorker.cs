// Decompiled with JetBrains decompiler
// Type: Tourield.Workers.BroadcasterWorker
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Tourield.Workers
{
  public class BroadcasterWorker : Form
  {
    private Stopwatch m_Database;
    private bool rules;
    private IContainer m_State;
    private Label @params;
    private Button _List;
    private Button _Setter;
    private Timer stub;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public BroadcasterWorker()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              RegistryPagePage.ListMethod();
              num2 = 4;
              continue;
            case 1:
            case 3:
              this.CalcOrder();
              if (!BroadcasterWorker.ForgotAttribute())
              {
                num2 = 6;
                continue;
              }
              goto case 5;
            case 4:
              goto label_1;
            case 5:
              this.m_State = (IContainer) null;
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 1;
            case 6:
              goto label_8;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 0;
          }
        }
label_1:
        this.m_Database = new Stopwatch();
        this.rules = false;
        num1 = 5;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotOrder(object v, EventArgs connection)
    {
      int num1 = 4;
      if (true)
        goto label_8;
label_1:
      this.Size = new Size(300, 180);
      int num2 = 7;
label_7:
      num1 = num2;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_6;
          case 1:
          case 2:
            goto label_3;
          case 4:
            goto label_1;
          case 5:
            goto label_11;
          case 6:
            this.@params.Location = new Point(0, 9);
            this.@params.Size = new Size(290, 50);
            this.@params.TextAlign = ContentAlignment.TopCenter;
            this.@params.AutoSize = false;
            num1 = 5;
            continue;
          case 7:
            goto label_4;
          case 8:
            goto label_5;
          case 9:
            goto label_10;
          default:
            int num3 = 8;
            num1 = BroadcasterWorker.ForgotAttribute() ? num3 : num3;
            continue;
        }
      }
label_3:
      this.@params.Text = this.m_Database.Elapsed.ToString();
      num2 = 0;
      goto label_7;
label_4:
      this.Text = "ストップウォッチ";
      num2 = 1;
      goto label_7;
label_5:
      this.@params.BorderStyle = BorderStyle.Fixed3D;
      num2 = 6;
      goto label_7;
label_6:
      this.@params.BackColor = Color.White;
      this.@params.Font = new Font("富士ポップ", 36f);
      goto label_5;
label_10:
      return;
label_11:
      this._List.Text = "スタート";
      this._List.Size = new Size(85, 30);
      this._List.Location = new Point(40, 100);
      this._Setter.Text = "リセット";
      this._Setter.Size = new Size(85, 30);
      this._Setter.Location = new Point(160, 100);
      this._Setter.Enabled = false;
      this.stub.Interval = 10;
      num2 = 9;
      goto label_7;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void EnableOrder(object value, EventArgs connection)
    {
      int num1 = 6;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 4:
            this.rules = false;
            this._Setter.Enabled = true;
            this._List.Text = "スタート";
            num1 = 7;
            continue;
          case 1:
            if (!flag)
            {
              this.m_Database.Stop();
              this.stub.Stop();
              num1 = 0;
              continue;
            }
            this.m_Database.Start();
            num2 = 5;
            break;
          case 2:
          case 3:
            goto label_6;
          case 5:
            goto label_2;
          case 6:
            flag = !this.rules;
            num2 = 1;
            break;
          case 7:
            goto label_11;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_2:
      this.stub.Start();
      this.rules = true;
      this._Setter.Enabled = false;
label_6:
      this._List.Text = "ストップ";
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetOrder(object var1, EventArgs connection)
    {
      this.m_Database.Reset();
      this.@params.Text = this.m_Database.Elapsed.ToString();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void OrderOrder(object init, EventArgs ord) => this.@params.Text = this.m_Database.Elapsed.ToString();

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool isvalue)
    {
      int num1 = 3;
      if (BroadcasterWorker.FindAttribute())
        goto label_6;
label_1:
      int num2 = this.m_State != null ? 1 : 0;
label_3:
      if (num2 != 0)
      {
        this.m_State.Dispose();
        goto label_10;
      }
      else
        goto label_11;
label_6:
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
          case 3:
            if (isvalue)
            {
              num3 = 4;
              break;
            }
            goto label_2;
          case 1:
          case 4:
            goto label_1;
          case 2:
            goto label_10;
          case 5:
            goto label_14;
          default:
            num3 = 2;
            break;
        }
        num1 = num3;
      }
label_2:
      num2 = 0;
      goto label_3;
label_14:
      return;
label_10:
label_11:
      base.Dispose(isvalue);
      if (!BroadcasterWorker.FindAttribute())
        return;
      num1 = 5;
      goto label_6;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcOrder()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        ComponentResourceManager componentResourceManager;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.stub = new Timer(this.m_State);
              this.SuspendLayout();
              this.@params.AutoSize = true;
              this.@params.Location = new Point(312, 114);
              this.@params.Margin = new Padding(8, 0, 8, 0);
              this.@params.Name = "label1";
              num2 = 4;
              continue;
            case 1:
            case 8:
              this._Setter.Size = new Size(200, 59);
              if (true)
              {
                num2 = 10;
                continue;
              }
              goto case 11;
            case 2:
            case 6:
              goto label_13;
            case 3:
              goto label_7;
            case 4:
              goto label_14;
            case 5:
              goto label_2;
            case 7:
              this.Controls.Add((Control) this._List);
              this.Controls.Add((Control) this.@params);
              num2 = 13;
              continue;
            case 9:
              goto label_8;
            case 10:
              goto label_1;
            case 11:
              componentResourceManager = new ComponentResourceManager(typeof (BroadcasterWorker));
              if (!BroadcasterWorker.ForgotAttribute())
              {
                num2 = 6;
                continue;
              }
              goto case 7;
            case 12:
              goto label_6;
            case 13:
              goto label_12;
            case 14:
              goto label_16;
            default:
              goto label_5;
          }
        }
label_1:
        this._Setter.TabIndex = 2;
        this._Setter.Text = "button2";
        this._Setter.UseVisualStyleBackColor = true;
        this._Setter.Click += new EventHandler(this.ResetOrder);
        this.stub.Tick += new EventHandler(this.OrderOrder);
        this.AutoScaleDimensions = new SizeF(16f, 31f);
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(779, 677);
        this.Controls.Add((Control) this._Setter);
        num1 = 7;
        continue;
label_2:
        this._List.Text = "button1";
        this._List.UseVisualStyleBackColor = true;
        this._List.Click += new EventHandler(this.EnableOrder);
        this._Setter.Location = new Point(461, 398);
        this._Setter.Margin = new Padding(8, 8, 8, 8);
        goto label_8;
label_5:
        num1 = 9;
        continue;
label_6:
        this._Setter = new Button();
        num1 = 0;
        continue;
label_7:
        this.m_State = (IContainer) new Container();
        num1 = 11;
        continue;
label_8:
        this._Setter.Name = "button2";
        num1 = 1;
        continue;
label_12:
        this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
        this.Margin = new Padding(8, 8, 8, 8);
        this.Name = "Form2";
        this.Text = "Form1";
        this.Load += new EventHandler(this.ForgotOrder);
        this.ResumeLayout(false);
        this.PerformLayout();
        num1 = 14;
        continue;
label_13:
        this.@params = new Label();
        this._List = new Button();
        num1 = 12;
        continue;
label_14:
        this.@params.Size = new Size(93, 32);
        this.@params.TabIndex = 0;
        this.@params.Text = "label1";
        this._List.Location = new Point(99, 400);
        this._List.Margin = new Padding(8, 8, 8, 8);
        this._List.Name = "button1";
        this._List.Size = new Size(200, 59);
        this._List.TabIndex = 1;
        num1 = 5;
      }
label_16:;
    }

    internal static bool FindAttribute() => true;

    internal static bool ForgotAttribute() => false;
  }
}
