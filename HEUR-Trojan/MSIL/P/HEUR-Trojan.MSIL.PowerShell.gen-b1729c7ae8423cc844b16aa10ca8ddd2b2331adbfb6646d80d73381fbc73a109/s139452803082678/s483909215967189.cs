// Decompiled with JetBrains decompiler
// Type: s139452803082678.s483909215967189
// Assembly: s968508024776124, Version=2.0.47.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: E3596912-35E7-405B-A05A-F5F12AB5E292
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-b1729c7ae8423cc844b16aa10ca8ddd2b2331adbfb6646d80d73381fbc73a109.exe

using s020542426491954;
using s023231967428338;
using s501555885925211;
using s651029396580935;
using System;
using System.Collections.Generic;

namespace s139452803082678
{
  public abstract class s483909215967189
  {
    private double s976901854885735;

    public double s272419933915247
    {
      get
      {
        lock (this)
        {
          if (this.s976901854885735 == 0.0)
            this.s976901854885735 = this.CalculateScale();
        }
        return this.s976901854885735;
      }
    }

    public int s401191633575528 { get; protected set; }

    public int s196803616524542 { get; protected set; }

    public s404626138245365 s817631873652305 { get; protected set; }

    public void s397061875517661() => this.s976901854885735 = 0.0;

    public abstract void s616742540366538(
      s612550122142431 s110234423587288,
      s124232551204041 s593462885609069);

    public abstract string s036441632213380(
      s743460949146767 s725013634493767,
      s743460949146767 s130811950483342,
      s612550122142431 s917511879657864);

    public abstract string s979999144322415(s612550122142431 s019066192868940);

    public static string s188528993080839(
      IEnumerable<float> s211849277139167,
      int s751782467221780,
      double s893727298813297,
      int s651948435544494 = 0)
    {
      if (s211849277139167 == null)
        return "";
      char[] chArray = new char[s751782467221780];
      int index = 0;
      foreach (float num1 in s211849277139167)
      {
        char ch = '_';
        if (0 < s651948435544494 && s651948435544494 <= index)
          ch = '?';
        int num2 = (int) ((double) num1 / s893727298813297 * 10.0);
        if ((double) num1 > 0.0)
        {
          if (num2 < 10)
          {
            ch = (char) (48 + num2);
            if (num2 == 0 && (double) num1 / s893727298813297 < 0.01)
            {
              ch = 'o';
              if ((double) num1 / s893727298813297 < 0.001)
                ch = '.';
            }
          }
          else
          {
            int num3 = num2 - 10;
            ch = num3 >= 25 ? '*' : (char) (65 + num3);
          }
        }
        else if ((double) num1 < 0.0)
        {
          int num4 = -num2;
          ch = num4 >= 25 ? '@' : (char) (97 + num4);
        }
        chArray[index] = ch;
        ++index;
      }
      return new string(chArray);
    }

    public static string s996218342119776(
      float[] s957406938696659,
      double s877877874539562,
      int s977946672908874 = 0)
    {
      return s957406938696659 != null ? s483909215967189.s188528993080839((IEnumerable<float>) s957406938696659, s957406938696659.Length, s877877874539562, s977946672908874) : "";
    }

    protected s483909215967189(s404626138245365 tree)
    {
      this.s401191633575528 = 32;
      this.s196803616524542 = 32;
      this.s817631873652305 = tree;
    }

    protected abstract double CalculateScale();

    protected double CalculateAverageScale(s612550122142431 hist)
    {
      double val2 = 0.0;
      for (int index = 0; index < hist.s609948992631648; ++index)
        val2 = Math.Max((double) Math.Abs(hist.get_Item(index)), val2);
      return val2 / 2.0;
    }
  }
}
