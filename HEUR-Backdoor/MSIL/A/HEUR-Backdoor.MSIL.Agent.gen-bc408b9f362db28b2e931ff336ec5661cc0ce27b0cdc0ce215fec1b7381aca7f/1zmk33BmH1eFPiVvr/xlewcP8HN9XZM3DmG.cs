// Decompiled with JetBrains decompiler
// Type: 1zmk33BmH1eFPiVvr.xlewcP8HN9XZM3DmG
// Assembly: bouNMGxVgGi4SRgWO, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60
// MVID: 3F6A2AF1-3CCB-4F01-AA36-FA31C2E4CFE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Agent.gen-bc408b9f362db28b2e931ff336ec5661cc0ce27b0cdc0ce215fec1b7381aca7f.exe

using Microsoft.TemplateEngine.Core;
using Microsoft.TemplateEngine.Core.Contracts;
using Microsoft.TemplateEngine.Core.Operations;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using zjOMGQo4U7RNSpo2h;
using zpdIRWbRp5AiZJa82;

namespace \u0031zmk33BmH1eFPiVvr
{
  public static class xlewcP8HN9XZM3DmG
  {
    public static List<IOperationProvider> NQ59sgqNY8tQGKZO0(
      JObject HAFWcVOcyHEXYL8BM)
    {
      IReadOnlyList<string> stringList1 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("if");
      IReadOnlyList<string> stringList2 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("else");
      IReadOnlyList<string> stringList3 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("elseif");
      IReadOnlyList<string> stringList4 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("actionableIf");
      IReadOnlyList<string> stringList5 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("actionableElse");
      IReadOnlyList<string> stringList6 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("actionableElseif");
      IReadOnlyList<string> stringList7 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("actions");
      IReadOnlyList<string> stringList8 = ((JToken) HAFWcVOcyHEXYL8BM).Jlc634pwsmus3l0Qh("endif");
      string str = ((JToken) HAFWcVOcyHEXYL8BM).nVxA6yY1QJJUqxmoF("id");
      bool jy8q7qvluuajW9v1 = ((JToken) HAFWcVOcyHEXYL8BM).ToJy8q7qvluuajW9v("trim");
      bool jy8q7qvluuajW9v2 = ((JToken) HAFWcVOcyHEXYL8BM).ToJy8q7qvluuajW9v("wholeLine");
      bool jy8q7qvluuajW9v3 = ((JToken) HAFWcVOcyHEXYL8BM).ToJy8q7qvluuajW9v("onByDefault");
      ConditionEvaluator conditionEvaluator = HM7fHG9SqSJPjYb3N.bEgiIKupMFMDdf04i(((JToken) HAFWcVOcyHEXYL8BM).nVxA6yY1QJJUqxmoF("evaluator"));
      ConditionalTokens conditionalTokens = new ConditionalTokens()
      {
        IfTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList1),
        ElseTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList2),
        ElseIfTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList3),
        EndIfTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList8),
        ActionableElseIfTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList6),
        ActionableElseTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList5),
        ActionableIfTokens = TokenConfigExtensions.TokenConfigs((IEnumerable<string>) stringList4),
        ActionableOperations = stringList7
      };
      List<IOperationProvider> ioperationProviderList = new List<IOperationProvider>();
      ioperationProviderList.Add((IOperationProvider) new Conditional(conditionalTokens, jy8q7qvluuajW9v2, jy8q7qvluuajW9v1, conditionEvaluator, str, jy8q7qvluuajW9v3));
      return ioperationProviderList;
    }
  }
}
