// Decompiled with JetBrains decompiler
// Type: rw.Bc
// Assembly: DynamicMet, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AF763EB9-8CE5-4C8D-A157-180B851AA721
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f9cf1ff0097d861156fd09818614a3bb202741325fc00049356ff51a8388dfd6.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace rw
{
  public class Bc
  {
    private BinaryReader XA;
    private ASCIIEncoding HZ;
    private UTF7Encoding DR;
    private UTF32Encoding qh;
    internal static Bc VI;

    [SpecialName]
    public long BI() => this.im();

    [SpecialName]
    public void eC(long _param1) => this.PL(_param1, SeekOrigin.Begin);

    [SpecialName]
    public long S6() => this.XA.BaseStream.Length;

    [SpecialName]
    public Stream aP() => (Stream) Bc.QL((object) this.XA);

    public Bc(BinaryReader _param1, Bc.OwG _param2)
    {
      ccw.xFvA3V();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.XA = _param1;
      this.k3(_param2);
      this.HZ = new ASCIIEncoding();
      int num1 = 0;
      if (false)
        goto label_2;
label_1:
      switch (num1)
      {
        default:
          this.DR = new UTF7Encoding();
          this.qh = new UTF32Encoding();
          return;
      }
label_2:
      int num2;
      num1 = num2;
      goto label_1;
    }

    [CompilerGenerated]
    [SpecialName]
    public Bc.OwG Nc() => this.kU;

    [CompilerGenerated]
    [SpecialName]
    public void k3(Bc.OwG _param1) => this.kU = _param1;

    public void Ql() => Console.WriteLine("Can seek: " + new GZipStream(this.XA.BaseStream, CompressionMode.Decompress).CanSeek.ToString());

    public void Ha(int _param1) => this.XA.BaseStream.Seek((long) _param1, SeekOrigin.Current);

    public byte[] jE(int _param1) => this.XA.ReadBytes(_param1);

    public bool kX() => this.XA.ReadBoolean();

    public byte I1() => this.XA.ReadByte();

    public byte su() => (byte) this.XA.ReadSByte();

    public short Jo() => this.Nc() == (Bc.OwG) 1 ? IPAddress.HostToNetworkOrder(Bc.mb((object) this.XA)) : this.XA.ReadInt16();

    public short FV()
    {
      if (this.Nc() != (Bc.OwG) 1)
        return (short) this.XA.ReadUInt16();
      int num1 = 0;
      if (Bc.Of() != null)
        goto label_3;
label_1:
      switch (num1)
      {
        default:
          return IPAddress.HostToNetworkOrder(this.XA.ReadInt16());
      }
label_3:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public int nt()
    {
      if (this.Nc() != (Bc.OwG) 1)
        goto label_4;
      else
        goto label_3;
label_2:
      int num1;
      return num1;
label_3:
      num1 = IPAddress.HostToNetworkOrder(this.XA.ReadInt32());
      goto label_2;
label_4:
      num1 = this.XA.ReadInt32();
      int num2 = 0;
      if (!Bc.Y8())
        goto label_5;
label_1:
      switch (num2)
      {
        default:
          goto label_2;
      }
label_5:
      int num3;
      num2 = num3;
      goto label_1;
    }

    public int wy()
    {
      if (this.Nc() != (Bc.OwG) 1)
        return (int) Bc.Mk((object) this.XA);
      int num1 = 0;
      if (Bc.Of() != null)
        goto label_4;
label_1:
      switch (num1)
      {
        default:
          return IPAddress.HostToNetworkOrder(Bc.W3((object) this.XA));
      }
label_4:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public long mJ() => this.Nc() == (Bc.OwG) 1 ? (long) IPAddress.HostToNetworkOrder(Bc.W3((object) this.XA)) : (long) this.XA.ReadInt32();

    public long yd()
    {
      long num1;
      if (this.Nc() != (Bc.OwG) 1)
      {
        num1 = (long) this.XA.ReadUInt64();
      }
      else
      {
        num1 = IPAddress.HostToNetworkOrder(this.XA.ReadInt64());
        int num2 = 0;
        if (!Bc.Y8())
          goto label_4;
label_1:
        switch (num2)
        {
          default:
            goto label_5;
        }
label_4:
        int num3;
        num2 = num3;
        goto label_1;
      }
label_5:
      return num1;
    }

    public string bO(string _param1)
    {
      int num = 1;
      byte[] bytes;
      while (true)
      {
        switch (num)
        {
          case 1:
            bytes = this.XA.ReadBytes(_param1.Length);
            num = Bc.Of() == null ? 0 : 0;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      string str = this.HZ.GetString(bytes);
      return !(str != _param1) ? str : throw new FormatException("Error reading ASCII string! Expected: " + _param1 + ", got: " + str);
    }

    public string Xq(string _param1)
    {
      string str = this.DR.GetString((byte[]) Bc.Bo((object) this.XA, _param1.Length));
      bool flag = str != _param1;
      int num1 = 0;
      if (Bc.Of() != null)
        goto label_3;
label_1:
      switch (num1)
      {
        default:
          if (flag)
            throw new FormatException("Error reading UTF7 string! Expected: " + _param1 + ", got: " + str);
          return str;
      }
label_3:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public string xH(string _param1)
    {
      string str1 = (string) Bc.mi((object) this.qh, (object) this.XA.ReadBytes(_param1.Length * 4));
      string str2 = !Bc.zg((object) str1, (object) _param1) ? str1 : throw new FormatException("Error reading UTF32 string! Expected: " + _param1 + ", got: " + str1);
      int num1 = 0;
      if (!Bc.Y8())
        goto label_4;
label_1:
      switch (num1)
      {
        default:
          return str2;
      }
label_4:
      int num2;
      num1 = num2;
      goto label_1;
    }

    public long im() => this.XA.BaseStream.Position;

    public long PL(long _param1, SeekOrigin _param2) => this.XA.BaseStream.Seek(_param1, _param2);

    internal static bool Y8() => Bc.VI == null;

    internal static Bc Of() => Bc.VI;

    internal static object QL([In] object obj0) => (object) ((BinaryReader) obj0).BaseStream;

    internal static short mb([In] object obj0) => ((BinaryReader) obj0).ReadInt16();

    internal static int W3([In] object obj0) => ((BinaryReader) obj0).ReadInt32();

    internal static uint Mk([In] object obj0) => ((BinaryReader) obj0).ReadUInt32();

    internal static object Bo([In] object obj0, [In] int obj1) => (object) ((BinaryReader) obj0).ReadBytes(obj1);

    internal static object mi([In] object obj0, [In] object obj1) => (object) ((Encoding) obj0).GetString((byte[]) obj1);

    internal static bool zg([In] object obj0, [In] object obj1) => (string) obj0 != (string) obj1;

    public enum OwG
    {
    }
  }
}
