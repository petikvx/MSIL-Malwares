// Decompiled with JetBrains decompiler
// Type: Cradiator.Views.CradiatorWindow
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Config;
using log4net;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Threading;

namespace Cradiator.Views
{
  public partial class CradiatorWindow : Window, ICradiatorView, IConfigObserver, IComponentConnector
  {
    private static readonly ILog _log = LogManager.GetLogger(typeof (CradiatorWindow).Name);
    private int _pollFrequency;
    private bool _isShowProgressConfigured;
    private readonly IConfigSettings _configSettings;
    internal TextBlock titleText;
    internal Hyperlink settingsLink;
    internal TextBlock countdownText;
    internal ProgressBar progressBar;
    private bool _contentLoaded;

    public CradiatorWindow(IConfigSettings configSettings)
    {
      this._configSettings = configSettings;
      try
      {
        this.InitializeComponent();
      }
      catch (Exception ex)
      {
        CradiatorWindow._log.Error((object) ex);
        throw;
      }
      this._pollFrequency = configSettings.PollFrequency;
      this._isShowProgressConfigured = configSettings.ShowProgress;
      configSettings.AddObserver((IConfigObserver) this);
    }

    public CradiatorPresenter Presenter { get; set; }

    bool ICradiatorView.ShowProgress
    {
      set => this.Invoke((Action) (() => this.progressBar.Visibility = !value || !this._isShowProgressConfigured ? Visibility.Hidden : Visibility.Visible));
    }

    object ICradiatorView.DataContext
    {
      set => this.Invoke((Action) (() => this.DataContext = value));
    }

    void ICradiatorView.AddWindowBinding(InputBinding binding) => this.InputBindings.Add(binding);

    void ICradiatorView.AddSettingsLinkBinding(InputBinding binding) => this.settingsLink.InputBindings.Add(binding);

    public event EventHandler ScreenUpdating;

    void ICradiatorView.UpdateScreen()
    {
      this.FireScreenUpdating((EventArgs) null);
      this.Presenter.UpdateScreen();
    }

    private void FireScreenUpdating(EventArgs e)
    {
      if (this.ScreenUpdating == null)
        return;
      this.ScreenUpdating((object) this, e);
    }

    Window ICradiatorView.Window => (Window) this;

    void ICradiatorView.ShowMessage(string message) => new MessageWindow((ICradiatorView) this).ShowMessage(this._pollFrequency, message);

    void ICradiatorView.UpdateCountdownTimer(TimeSpan timeRemaining) => this.countdownText.Text = string.Format("{0:00}:{1:00}", (object) timeRemaining.Minutes, (object) timeRemaining.Seconds);

    public void Invoke(Action action) => this.Dispatcher.Invoke(DispatcherPriority.Normal, (Delegate) action);

    void ICradiatorView.ShowCountdown(bool show) => this.countdownText.Visibility = show ? Visibility.Visible : Visibility.Hidden;

    public void ConfigUpdated(ConfigSettings newSettings)
    {
      this._isShowProgressConfigured = newSettings.ShowProgress;
      this._pollFrequency = newSettings.PollFrequency;
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/EvidenceTypeDescript;component/views/cradiatorwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.titleText = (TextBlock) target;
          break;
        case 2:
          this.settingsLink = (Hyperlink) target;
          break;
        case 3:
          this.countdownText = (TextBlock) target;
          break;
        case 4:
          this.progressBar = (ProgressBar) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    [SpecialName]
    void ICradiatorView.add_Closing(CancelEventHandler value) => this.Closing += value;

    [SpecialName]
    void ICradiatorView.remove_Closing(CancelEventHandler value) => this.Closing -= value;

    [SpecialName]
    void ICradiatorView.add_Activated(EventHandler value) => this.Activated += value;

    [SpecialName]
    void ICradiatorView.remove_Activated(EventHandler value) => this.Activated -= value;
  }
}
