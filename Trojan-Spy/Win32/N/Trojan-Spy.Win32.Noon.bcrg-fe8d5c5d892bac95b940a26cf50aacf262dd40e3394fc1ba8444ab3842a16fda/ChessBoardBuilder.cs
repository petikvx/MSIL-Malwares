// Decompiled with JetBrains decompiler
// Type: ChessBoard.ChessBoardBuilder
// Assembly: IArraySortHel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B08900B5-C53F-4995-B311-D7E8DC4113C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcrg-fe8d5c5d892bac95b940a26cf50aacf262dd40e3394fc1ba8444ab3842a16fda.exe

using ChessBoard.Chessmens;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ChessBoard
{
  public static class ChessBoardBuilder
  {
    public static BoardCell[,] GetStartPositionBoardCells()
    {
      BoardCell[,] boardCellArray = new BoardCell[8, 8];
      int[] numArray = new int[4];
      // ISSUE: field reference
      ChessBoardBuilder.\u206D‬‮‮‌‭​⁮‌⁯‮‪‮⁪‭​⁯‏⁯‎‏⁬​⁫⁭⁫‪‫‎⁪​‎‬⁯‏‬‌⁪‮⁯‮((Array) numArray, __fieldref (\u003CPrivateImplementationDetails\u003E.C496ED8B9201A17A5C94B18E146D84EC15C6E8D53D1C5F58950A92CA0ECC74D7));
      int[] source = numArray;
label_1:
      int num1 = -1524582472;
      int column;
      BaseChessman chessmanOnStartPosition;
      int num2;
      BoardCell[,] positionBoardCells;
      bool flag;
      int row;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1859678538)) % 19U)
        {
          case 0:
            num1 = (int) num3 * -7482998 ^ -1837877545;
            continue;
          case 1:
            row = num2 + 1;
            num1 = (int) num3 * -394077146 ^ -1278694349;
            continue;
          case 3:
            num1 = (int) num3 * -167869696 ^ 365521483;
            continue;
          case 4:
            num1 = (int) num3 * 535614602 ^ 1778611781;
            continue;
          case 5:
            goto label_1;
          case 6:
            column = 0;
            num1 = -99245223;
            continue;
          case 7:
            chessmanOnStartPosition = ChessmanFactory.TryToCreateChessmanOnStartPosition(row, column);
            ChessBoardBuilder.SetColor(chessmanOnStartPosition, row);
            num1 = -1471570193;
            continue;
          case 8:
            int num4;
            num1 = num4 = ((IEnumerable<int>) source).Any<int>((Func<int, bool>) (x => x == row)) ? -1382948042 : (num4 = -288842763);
            continue;
          case 9:
            flag = column <= 7;
            num1 = -905694191;
            continue;
          case 10:
            int num5;
            num1 = num5 = row > 7 ? -904283887 : (num5 = -70308347);
            continue;
          case 11:
            num1 = -1507595327;
            continue;
          case 12:
            int num6 = !flag ? -889381039 : (num6 = -2022092665);
            num1 = num6 ^ (int) num3 * 839623980;
            continue;
          case 13:
            positionBoardCells = boardCellArray;
            num1 = (int) num3 * -496456164 ^ -1382486762;
            continue;
          case 14:
            row = 0;
            num1 = (int) num3 * 109913620 ^ 1201258319;
            continue;
          case 15:
            num2 = row;
            num1 = (int) num3 * 1589974025 ^ 1743169051;
            continue;
          case 16:
            ++column;
            num1 = -99245223;
            continue;
          case 17:
            boardCellArray[row, column] = new BoardCell(row, column, chessmanOnStartPosition);
            num1 = (int) num3 * -1687905325 ^ 186065735;
            continue;
          case 18:
            boardCellArray[row, column] = new BoardCell(row, column);
            num1 = (int) num3 * -1782128702 ^ 919454870;
            continue;
          default:
            goto label_20;
        }
      }
label_20:
      return positionBoardCells;
    }

    public static void NormilizedBoardCells(BoardCell[,] boardCells)
    {
      int index1 = 0;
label_7:
      bool flag1 = index1 <= 7;
      int num1 = -1151359865;
      int index2;
      bool flag2;
      bool flag3;
      BaseChessman chessman;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -906208941)) % 17U)
        {
          case 0:
            flag2 = index2 <= 7;
            num1 = -750016133;
            continue;
          case 1:
            num1 = (int) num2 * -2130200822 ^ 1094503213;
            continue;
          case 2:
            goto label_7;
          case 3:
            boardCells[index1, index2].Chessman = ChessmanFactory.TryToCreateChessman(chessman.Color, chessman.Type);
            num1 = -421561283;
            continue;
          case 4:
            index2 = 0;
            num1 = -1213380474;
            continue;
          case 5:
            ++index2;
            num1 = -1354134331;
            continue;
          case 6:
            int num3 = flag3 ? 37300474 : (num3 = 768809991);
            num1 = num3 ^ (int) num2 * -1524396943;
            continue;
          case 7:
            num1 = (int) num2 * 465652971 ^ 1063013051;
            continue;
          case 8:
            num1 = (int) num2 * -1245273215 ^ 2048535904;
            continue;
          case 9:
            goto label_3;
          case 10:
            num1 = -2147412932;
            continue;
          case 11:
            int num4 = flag1 ? -1461904028 : (num4 = -1090324229);
            num1 = num4 ^ (int) num2 * -1719397314;
            continue;
          case 12:
            num1 = (int) num2 * -683731100 ^ 1241093873;
            continue;
          case 13:
            int num5 = !flag2 ? -67334434 : (num5 = -770678961);
            num1 = num5 ^ (int) num2 * 696159403;
            continue;
          case 14:
            ++index1;
            num1 = (int) num2 * -839353882 ^ -217322369;
            continue;
          case 15:
            chessman = boardCells[index1, index2].Chessman;
            flag3 = chessman == null;
            num1 = (int) num2 * -293936177 ^ -2132708428;
            continue;
          case 16:
            num1 = -1618473812;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    private static void SetColor(BaseChessman chessman, int row) => chessman.Color = ChessBoardBuilder.IsStartBlackRow(row) ? Colorz.Black : Colorz.White;

    private static bool IsStartBlackRow(int row)
    {
label_1:
      int num1 = 1771160413;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 157639936)) % 4U)
        {
          case 0:
            num3 = row == 0 ? 1 : 0;
            break;
          case 1:
            if (row != 1)
            {
              num1 = (int) num2 * 2007733485 ^ -47717631;
              continue;
            }
            num3 = 1;
            break;
          case 2:
            goto label_1;
          default:
            goto label_8;
        }
        flag = num3 != 0;
        num1 = 1420118523;
      }
label_8:
      return flag;
    }

    static void \u206D‬‮‮‌‭​⁮‌⁯‮‪‮⁪‭​⁯‏⁯‎‏⁬​⁫⁭⁫‪‫‎⁪​‎‬⁯‏‬‌⁪‮⁯‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
