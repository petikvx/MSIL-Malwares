// Decompiled with JetBrains decompiler
// Type: odRvpaC.gzMilTR
// Assembly: gO77Fih, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: F43F05C3-DF79-4EF2-8C94-619BF1ED6D3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-83f6c309f411e1aebbdf75c62f67f163231f1b0ee065936230741272cda1cb9a.exe

using \u0033JGJehp;
using \u0039XQfkTy;
using c8S7IfO;
using gvMbjW3;
using iUayWlk;
using OC1w1EV;
using oVkjSvs;
using System;
using System.Collections.Generic;
using System.Linq;
using zi9HJIz;
using ZuqPiTm;

namespace odRvpaC
{
  internal class gzMilTR : YkBa6Sd, IBinarySerializable
  {
    public gzMilTR()
    {
    }

    public gzMilTR(
      long offset,
      string path,
      long timeStamp,
      string resolvedPath,
      long resolvedTimestamp,
      int assemblyNameHash,
      string assemblyFullName,
      int[] referencedAssemblyHashCodes,
      int[] exportedContractHashCodes)
      : base(path, timeStamp)
    {
      this.fTjFlMV = offset;
      if (string.Equals(resolvedPath, path, StringComparison.OrdinalIgnoreCase))
      {
        resolvedPath = (string) null;
        resolvedTimestamp = 0L;
      }
      this.aiBO8Ti = assemblyNameHash;
      this.\u0035qFUYCO = assemblyFullName;
      this.JmSlJXW = resolvedPath;
      this.ftQ1Plf = resolvedTimestamp;
      this.bK3Bhb7 = referencedAssemblyHashCodes ?? Array.Empty<int>();
      this.AZzDpaF = exportedContractHashCodes ?? Array.Empty<int>();
    }

    public long fTjFlMV { get; private set; }

    public long tOcBTrV { get; set; }

    public int[] bK3Bhb7 { get; private set; }

    public string JmSlJXW { get; private set; }

    public long ftQ1Plf { get; private set; }

    public int aiBO8Ti { get; private set; }

    public string \u0035qFUYCO { get; private set; }

    public int[] AZzDpaF { get; private set; }

    public static gzMilTR NTTE7I6(IDictionary<string, object> qjh2Pfk, long ZP5clDX = -1)
    {
      gzMilTR gzMilTr = gzMilTR.rKh5YFF(qjh2Pfk, ZP5clDX);
      if (ZP5clDX != -1L)
        gzMilTr.fTjFlMV = ZP5clDX;
      return gzMilTr;
    }

    public virtual void gi2QJf8(IWriter eUf3AXo)
    {
      this.\u0036cwBXp2(eUf3AXo);
      ((IWriter<long>) eUf3AXo).Write(this.fTjFlMV);
      ((IWriter<string>) eUf3AXo).Write(this.\u0035qFUYCO);
      ((IWriter<int>) eUf3AXo).Write(this.aiBO8Ti);
      ((IWriter<string>) eUf3AXo).Write(this.JmSlJXW);
      ((IWriter<long>) eUf3AXo).Write(this.ftQ1Plf);
      eUf3AXo.qGhmTYk<int>((ICollection<int>) this.bK3Bhb7);
      eUf3AXo.qGhmTYk<int>((ICollection<int>) this.AZzDpaF);
    }

    public virtual void b5z7qQo(IReader gqR8eMA)
    {
      this.s0Oqte0(gqR8eMA);
      this.fTjFlMV = gqR8eMA.ReadInt64();
      this.\u0035qFUYCO = gqR8eMA.ReadString();
      this.aiBO8Ti = gqR8eMA.ReadInt32();
      this.JmSlJXW = gqR8eMA.ReadString();
      this.ftQ1Plf = gqR8eMA.ReadInt64();
      this.bK3Bhb7 = gqR8eMA.buwwQjF<int>();
      this.AZzDpaF = gqR8eMA.buwwQjF<int>();
    }

    private static gzMilTR rKh5YFF(IDictionary<string, object> NJ4mYMJ, long _param1)
    {
      if (NJ4mYMJ is upeMz4J upeMz4J)
        return upeMz4J.uTMKY1D.IaYSGf0;
      IDictionary<string, object> lbhP7rT = NJ4mYMJ.eguvZws<object>("Assembly");
      AV4Iptg? nullable = NJ4mYMJ as AV4Iptg?;
      if (nullable.HasValue)
        return nullable.Value.IaYSGf0;
      string str1 = lbhP7rT.O2sGFwD<string>("Location");
      string str2 = lbhP7rT.O2sGFwD<string>("ResolvedLocation");
      long num1 = lbhP7rT.O2sGFwD<long>("TimeStamp");
      int num2 = lbhP7rT.O2sGFwD<int>("Name");
      string str3 = lbhP7rT.O2sGFwD<string>("FullName");
      long num3 = lbhP7rT.O2sGFwD<long>("ResolvedTimestamp");
      IEnumerable<int> source1 = lbhP7rT.eRY5few<int>("ReferencedAssemblyNames");
      IEnumerable<int> source2 = lbhP7rT.eRY5few<int>("ExportedContractHashCodes");
      long offset = _param1;
      string path = str1;
      long timeStamp = num1;
      int num4 = num2;
      string resolvedPath = str2;
      long resolvedTimestamp = num3;
      int assemblyNameHash = num4;
      string assemblyFullName = str3;
      int[] array1 = source1.ToArray<int>();
      int[] array2 = source2.ToArray<int>();
      return new gzMilTR(offset, path, timeStamp, resolvedPath, resolvedTimestamp, assemblyNameHash, assemblyFullName, array1, array2);
    }
  }
}
