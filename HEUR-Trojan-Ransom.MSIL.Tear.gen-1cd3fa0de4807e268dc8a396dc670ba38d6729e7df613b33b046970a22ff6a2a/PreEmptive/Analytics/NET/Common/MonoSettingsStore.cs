// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.NET.Common.MonoSettingsStore
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.IsolatedStorage;
using System.Linq;
using System.Threading;

namespace PreEmptive.Analytics.NET.Common
{
  public class MonoSettingsStore : ISettingsStore
  {
    private IsolatedStorageFile a;
    private string b;
    private object c;

    public MonoSettingsStore(string appid)
    {
      int A_1 = 10;
      this.c = new object();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.b = Utils.a("\uEEBD늿\uA7C1臃ꯅ룇뻉ꗋ룍뗏ﳑ蛓鿕诗뿙\uA8DBꫝ觟賡菣闥웧", A_1) + appid + (object) Path.DirectorySeparatorChar;
      try
      {
        this.a = IsolatedStorageFile.GetUserStoreForAssembly();
      }
      catch
      {
        this.a = IsolatedStorageFile.GetMachineStoreForAssembly();
      }
      try
      {
        string[] directoryNames = this.a.GetDirectoryNames();
        string dir = this.b.Replace(new string(Path.DirectorySeparatorChar, 1), "");
        if (((IEnumerable<string>) directoryNames).Contains<string>(dir))
          return;
        this.a.CreateDirectory(dir);
      }
      catch
      {
      }
    }

    public string this[string key]
    {
      get
      {
        int num1 = 11601;
        int num2 = num1;
        num1 = 11601;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.b(this.b + key);
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 0;
        int num2;
        while (true)
        {
          num2 = 6319;
          int num3 = num2;
          num2 = 6319;
          int num4 = num2;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
label_12:
              this.a(this.b + key);
              num2 = 2;
              num1 = num2;
              continue;
            default:
              num2 = 0;
              if (num2 == 0)
                ;
              switch (num1)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  goto label_12;
                case 2:
                  if (this.Keys.Count == 0)
                  {
                    num2 = 4;
                    num1 = num2;
                    continue;
                  }
                  goto label_15;
                case 3:
                  goto label_9;
                case 4:
                  goto label_11;
              }
              if (value == null)
              {
                num2 = 1;
                num1 = num2;
                continue;
              }
              this.a(this.b + key, value);
              num2 = 3;
              num1 = num2;
              continue;
          }
        }
label_9:
        num2 = 1;
        if (num2 == 0)
          ;
        return;
label_11:
        this.a.DeleteDirectory(this.b);
        return;
label_15:;
      }
    }

    public int Count
    {
      get
      {
        int num1 = -20188;
        int num2 = num1;
        num1 = -20188;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.Keys.Count;
          default:
            goto case 1;
        }
      }
    }

    public IList<string> Keys
    {
      get
      {
        int A_1 = 0;
        int num1 = 6737;
        int num2 = num1;
        num1 = 6737;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return (IList<string>) ((IEnumerable<string>) this.a.GetFileNames(this.b + Utils.a("麳颵銷", A_1))).ToList<string>();
          default:
            goto case 1;
        }
      }
    }

    public int MaxValueLength
    {
      get
      {
        int num1 = -29688;
        int num2 = num1;
        num1 = -29688;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return int.MaxValue;
          default:
            goto case 1;
        }
      }
    }

    public int MaxKeyLength
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 23337;
        int num2 = num1;
        num1 = 23337;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return int.MaxValue;
          default:
            goto case 1;
        }
      }
    }

    public void Flush()
    {
      int num1 = 25283;
      int num2 = num1;
      num1 = 25283;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            break;
          break;
        default:
          goto case 1;
      }
    }

    private string b(string A_0)
    {
      int num1;
      string str1;
      string str2;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          str1 = (string) null;
          str2 = (string) null;
          num2 = -15489;
          int num3 = num2;
          num2 = -15489;
          int num4 = num2;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
              goto label_1;
            default:
              num2 = 1;
              if (num2 == 0)
                ;
              num2 = 0;
              if (num2 == 0)
                ;
              num2 = 0;
              num1 = num2;
              goto label_1;
          }
        default:
label_1:
          while (true)
          {
            switch (num1)
            {
              case 0:
                try
                {
                  str2 = ((IEnumerable<string>) this.a.GetFileNames(A_0)).FirstOrDefault<string>();
                }
                catch (Exception ex)
                {
                }
                num1 = 1;
                continue;
              case 1:
                if (!string.IsNullOrEmpty(str2))
                {
                  num2 = 2;
                  num1 = num2;
                  continue;
                }
                goto label_21;
              case 2:
                goto label_6;
              default:
                goto label_2;
            }
          }
label_6:
          try
          {
            StreamReader streamReader = new StreamReader((Stream) new IsolatedStorageFileStream(A_0, FileMode.Open, FileAccess.Read, FileShare.Read, this.a));
            try
            {
              str1 = streamReader.ReadToEnd();
            }
            finally
            {
              int num5 = 0;
              while (true)
              {
                switch (num5)
                {
                  case 0:
                    switch (0)
                    {
                      case 0:
                        break;
                      default:
                        continue;
                    }
                    break;
                  case 1:
                    streamReader.Dispose();
                    num5 = 2;
                    continue;
                  case 2:
                    goto label_14;
                }
                if (streamReader != null)
                  num5 = 1;
                else
                  break;
              }
label_14:;
            }
          }
          catch
          {
          }
label_21:
          return str1;
      }
    }

    private void a(string A_0)
    {
      int num1;
      string str;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          str = (string) null;
          num2 = -23541;
          int num3 = num2;
          num2 = -23541;
          int num4 = num2;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
              goto label_1;
            default:
              num2 = 0;
              if (num2 == 0)
                ;
              num2 = 0;
              num1 = num2;
              goto label_1;
          }
        default:
label_1:
          while (true)
          {
            switch (num1)
            {
              case 0:
                num2 = 1;
                if (num2 == 0)
                  ;
                try
                {
                  str = ((IEnumerable<string>) this.a.GetFileNames(A_0)).FirstOrDefault<string>();
                }
                catch
                {
                }
                num1 = 1;
                continue;
              case 1:
                if (!string.IsNullOrEmpty(str))
                {
                  num2 = 2;
                  num1 = num2;
                  continue;
                }
                goto label_13;
              case 2:
                goto label_6;
              default:
                goto label_2;
            }
          }
label_6:
          try
          {
            this.a.DeleteFile(A_0);
            break;
          }
          catch
          {
            break;
          }
label_13:
          break;
      }
    }

    private void a(string A_0, string A_1)
    {
      int num1 = 2375;
      int num2 = num1;
      num1 = 2375;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_3:
          bool lockTaken = false;
          object c;
          try
          {
            Monitor.Enter(c = this.c, ref lockTaken);
            try
            {
              IsolatedStorageFileStream storageFileStream = new IsolatedStorageFileStream(A_0, FileMode.OpenOrCreate, FileAccess.Write, FileShare.None, this.a);
              try
              {
                StreamWriter streamWriter = new StreamWriter((Stream) storageFileStream);
                try
                {
                  streamWriter.Write(A_1);
                  streamWriter.Close();
                }
                finally
                {
                  int num4 = 0;
                  int num5 = num4;
                  while (true)
                  {
                    switch (num5)
                    {
                      case 0:
                        switch (0)
                        {
                          case 0:
                            break;
                          default:
                            continue;
                        }
                        break;
                      case 1:
                        streamWriter.Dispose();
                        num4 = 2;
                        num5 = num4;
                        continue;
                      case 2:
                        goto label_14;
                    }
                    if (streamWriter != null)
                    {
                      num4 = 1;
                      num5 = num4;
                    }
                    else
                      break;
                  }
label_14:;
                }
                storageFileStream.Close();
                break;
              }
              finally
              {
                int num6 = 0;
                int num7 = num6;
                while (true)
                {
                  switch (num7)
                  {
                    case 0:
                      switch (0)
                      {
                        case 0:
                          break;
                        default:
                          continue;
                      }
                      break;
                    case 1:
                      storageFileStream.Dispose();
                      num6 = 2;
                      num7 = num6;
                      continue;
                    case 2:
                      goto label_22;
                  }
                  if (storageFileStream != null)
                  {
                    num6 = 1;
                    num7 = num6;
                  }
                  else
                    break;
                }
label_22:;
              }
            }
            catch
            {
              break;
            }
          }
          finally
          {
            int num8 = 0;
            int num9 = num8;
            while (true)
            {
              switch (num9)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 1:
                  Monitor.Exit(c);
                  num8 = 2;
                  num9 = num8;
                  continue;
                case 2:
                  goto label_31;
              }
              if (lockTaken)
              {
                num8 = 1;
                if (num8 == 0)
                  ;
                num8 = 1;
                num9 = num8;
              }
              else
                break;
            }
label_31:;
          }
        default:
          int num10 = 0;
          if (num10 == 0)
            ;
          num10 = 0;
          switch (num10)
          {
            default:
              goto label_3;
          }
      }
    }
  }
}
