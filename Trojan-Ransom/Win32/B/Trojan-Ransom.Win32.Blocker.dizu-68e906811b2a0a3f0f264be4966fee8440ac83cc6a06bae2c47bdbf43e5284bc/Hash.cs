// Decompiled with JetBrains decompiler
// Type: Handyware.Hash
// Assembly: Handyware, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 79A15AC7-DE29-40AC-9E7A-1719C725BB8B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.dizu-68e906811b2a0a3f0f264be4966fee8440ac83cc6a06bae2c47bdbf43e5284bc.exe

using System.Security.Cryptography;
using System.Text;

namespace Handyware
{
  internal class Hash
  {
    public static string MD5(string input)
    {
      byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(input));
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string MD5(string input, string inputEncoding)
    {
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string MD5(string input, string inputEncoding, out string Error)
    {
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          Error = "inputEncoding: ASCII Unicode UTF7 UTF8 UTF32";
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      string str = stringBuilder.ToString();
      Error = "";
      return str;
    }

    public static string MD5(byte[] input)
    {
      input = new MD5CryptoServiceProvider().ComputeHash(input);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in input)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA1(string input)
    {
      byte[] hash = new SHA1CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(input));
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA1(string input, string inputEncoding)
    {
      SHA1CryptoServiceProvider cryptoServiceProvider = new SHA1CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA1(string input, string inputEncoding, out string Error)
    {
      SHA1CryptoServiceProvider cryptoServiceProvider = new SHA1CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          Error = "inputEncoding: ASCII Unicode UTF7 UTF8 UTF32";
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      string str = stringBuilder.ToString();
      Error = "";
      return str;
    }

    public static string SHA1(byte[] input)
    {
      input = new SHA1CryptoServiceProvider().ComputeHash(input);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in input)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA256(string input)
    {
      byte[] hash = new SHA256CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(input));
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA256(string input, string inputEncoding)
    {
      SHA256CryptoServiceProvider cryptoServiceProvider = new SHA256CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA256(string input, string inputEncoding, out string Error)
    {
      SHA256CryptoServiceProvider cryptoServiceProvider = new SHA256CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          Error = "inputEncoding: ASCII Unicode UTF7 UTF8 UTF32";
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      string str = stringBuilder.ToString();
      Error = "";
      return str;
    }

    public static string SHA256(byte[] input)
    {
      input = new SHA256CryptoServiceProvider().ComputeHash(input);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in input)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA384(string input)
    {
      byte[] hash = new SHA384CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(input));
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA384(string input, string inputEncoding)
    {
      SHA384CryptoServiceProvider cryptoServiceProvider = new SHA384CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA384(string input, string inputEncoding, out string Error)
    {
      SHA384CryptoServiceProvider cryptoServiceProvider = new SHA384CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          Error = "inputEncoding: ASCII Unicode UTF7 UTF8 UTF32";
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      string str = stringBuilder.ToString();
      Error = "";
      return str;
    }

    public static string SHA384(byte[] input)
    {
      input = new SHA384CryptoServiceProvider().ComputeHash(input);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in input)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA512(string input)
    {
      byte[] hash = new SHA512CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(input));
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA512(string input, string inputEncoding)
    {
      SHA512CryptoServiceProvider cryptoServiceProvider = new SHA512CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }

    public static string SHA512(string input, string inputEncoding, out string Error)
    {
      SHA512CryptoServiceProvider cryptoServiceProvider = new SHA512CryptoServiceProvider();
      byte[] bytes;
      switch (inputEncoding)
      {
        case "UTF8":
          bytes = Encoding.UTF8.GetBytes(input);
          break;
        case "ASCII":
          bytes = Encoding.ASCII.GetBytes(input);
          break;
        case "Unicode":
          bytes = Encoding.Unicode.GetBytes(input);
          break;
        case "UTF32":
          bytes = Encoding.UTF32.GetBytes(input);
          break;
        case "UTF7":
          bytes = Encoding.UTF7.GetBytes(input);
          break;
        default:
          Error = "inputEncoding: ASCII Unicode UTF7 UTF8 UTF32";
          return "";
      }
      byte[] hash = cryptoServiceProvider.ComputeHash(bytes);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in hash)
        stringBuilder.Append(num.ToString("x2").ToLower());
      string str = stringBuilder.ToString();
      Error = "";
      return str;
    }

    public static string SHA512(byte[] input)
    {
      input = new SHA512CryptoServiceProvider().ComputeHash(input);
      StringBuilder stringBuilder = new StringBuilder();
      foreach (byte num in input)
        stringBuilder.Append(num.ToString("x2").ToLower());
      return stringBuilder.ToString();
    }
  }
}
