// Decompiled with JetBrains decompiler
// Type: ProjNet.Roles.MerchantEventRole
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Shared;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Identifiers;
using TYPELIBA.Importers;
using TYPELIBA.Lists;

namespace ProjNet.Roles
{
  internal abstract class MerchantEventRole : StateProcess, Factory, Worker
  {
    protected bool _ReaderProcess;
    protected double importerProcess;
    protected double proxyProcess;
    protected double _AnnotationProcess;
    protected double m_ServerProcess;
    protected List<Interceptor> _IteratorProcess;
    protected StateProcess tagProcess;
    private string _MessageProcess;
    private string attributeProcess;
    private string _FacadeProcess;
    private long m_CodeProcess;
    private string descriptorProcess;
    private string _DicProcess;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected MerchantEventRole(List<Interceptor> ident, bool skipcust)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      this.\u002Ector(ident);
      this._ReaderProcess = skipcust;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected MerchantEventRole(List<Interceptor> instance)
    {
      ManagerParamsID.NewExpression();
      this._ReaderProcess = false;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this._IteratorProcess = instance;
      Interceptor interceptor1 = this.VisitConfiguration("semi_major");
      Interceptor interceptor2 = this.VisitConfiguration("semi_minor");
      if (interceptor1 == null)
        throw new ArgumentException("Missing projection parameter 'semi_major'");
      if (interceptor2 == null)
        throw new ArgumentException("Missing projection parameter 'semi_minor'");
      this.proxyProcess = interceptor1.LoginProcess();
      this._AnnotationProcess = interceptor2.LoginProcess();
      this.m_ServerProcess = this.VisitConfiguration("unit").LoginProcess();
      this.importerProcess = 1.0 - this._AnnotationProcess * this._AnnotationProcess / (this.proxyProcess * this.proxyProcess);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Interceptor VisitConfiguration(int asset) => this._IteratorProcess[asset];

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Interceptor VisitConfiguration(string reference)
    {
      int num = 4;
      // ISSUE: variable of a compiler-generated type
      MerchantEventRole.IteratorPropertyImporter propertyImporter;
      Interceptor interceptor;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            // ISSUE: object of a compiler-generated type is created
            propertyImporter = new MerchantEventRole.IteratorPropertyImporter();
            num = 3;
            continue;
          case 1:
          case 3:
            // ISSUE: reference to a compiler-generated field
            propertyImporter.m_ThreadConsumer = reference;
            goto case 2;
          case 2:
            // ISSUE: reference to a compiler-generated method
            interceptor = this._IteratorProcess.Find(new Predicate<Interceptor>(propertyImporter.ChangeError));
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:
      return interceptor;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CloneState() => this._IteratorProcess.Count;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string InitConfiguration() => this.InitConfiguration();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string SortState() => this._MessageProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ResetConsumer(string v) => this._MessageProcess = v;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string EnableState() => this.attributeProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SelectConsumer(string item) => this.attributeProcess = item;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LoginState() => this._FacadeProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConnectConsumer(string setup) => this._FacadeProcess = setup;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public long RestartState() => this.m_CodeProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CountConsumer(long version_v) => this.m_CodeProcess = version_v;

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.descriptorProcess;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.descriptorProcess = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string GetState() => this._DicProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoginConsumer(string setup) => this._DicProcess = setup;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 3;
      string str;
      while (true)
      {
        StringBuilder stringBuilder;
        int num2;
        int asset;
        bool readerProcess;
        switch (num1)
        {
          case 0:
          case 4:
            if (asset >= this.CloneState())
            {
              stringBuilder.Append("]");
              num2 = 7;
              break;
            }
            stringBuilder.AppendFormat(", {0}", (object) this.VisitConfiguration(asset).SortProcess());
            if (MerchantEventRole.InvokeCreator())
            {
              num1 = 1;
              continue;
            }
            goto case 3;
          case 1:
            ++asset;
            goto case 0;
          case 2:
          case 6:
            if (readerProcess)
              stringBuilder.Append("INVERSE_MT[");
            stringBuilder.AppendFormat("PARAM_MT[\"{0}\"", (object) this.Name);
            asset = 0;
            goto case 0;
          case 3:
            stringBuilder = new StringBuilder();
            num2 = 5;
            break;
          case 5:
            readerProcess = this._ReaderProcess;
            num2 = 6;
            break;
          case 7:
            if (this._ReaderProcess)
              stringBuilder.Append("]");
            str = stringBuilder.ToString();
            num2 = 8;
            break;
          case 8:
            goto label_17;
          default:
            num1 = 0;
            continue;
        }
        num1 = num2;
      }
label_17:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState()
    {
      int num1 = 1;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          int asset;
          bool flag;
          switch (num2)
          {
            case 0:
            case 1:
              goto label_5;
            case 2:
              stringBuilder.Append("<CT_MathTransform>");
              if (this._ReaderProcess)
              {
                stringBuilder.AppendFormat("<CT_InverseTransform Name=\"{0}\">", (object) this.InitConfiguration());
                goto case 4;
              }
              else
              {
                stringBuilder.AppendFormat("<CT_ParameterizedMathTransform Name=\"{0}\">", (object) this.InitConfiguration());
                num2 = 4;
                continue;
              }
            case 3:
            case 5:
label_12:
              if (flag)
              {
                stringBuilder.AppendFormat(this.VisitConfiguration(asset).LogoutProcess());
                ++asset;
                break;
              }
              goto label_13;
            case 4:
              asset = 0;
              break;
            case 6:
              goto label_1;
            case 7:
              goto label_4;
            case 8:
              goto label_17;
            default:
              if (!MerchantEventRole.InterruptCreator())
              {
                num2 = 6;
                continue;
              }
              goto label_17;
          }
          flag = asset < this.CloneState();
          if (MerchantEventRole.InvokeCreator())
            num2 = 5;
          else
            goto label_12;
        }
label_1:
        stringBuilder.Append("</CT_InverseTransform>");
label_3:
        stringBuilder.Append("</CT_MathTransform>");
        num1 = 7;
        continue;
label_4:
        str = stringBuilder.ToString();
        num1 = 8;
        continue;
label_5:
        stringBuilder = new StringBuilder();
        num1 = 2;
        continue;
label_13:
        if (!this._ReaderProcess)
        {
          stringBuilder.Append("</CT_ParameterizedMathTransform>");
          goto label_3;
        }
        else
          goto label_1;
      }
label_17:
      return str;
    }

    public abstract double[] ReadConfiguration(double[] init);

    public abstract double[] InvokeConfiguration(double[] task);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void ValidateConfiguration() => this._ReaderProcess = !this._ReaderProcess;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal bool RestartConsumer() => this._ReaderProcess;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override double[] DisableConfiguration(double[] param)
    {
      int num1 = 5;
      double[] numArray1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_8;
            case 1:
            case 3:
              if (this._ReaderProcess)
              {
                numArray1 = this.ReadConfiguration(param);
                num2 = 6;
                continue;
              }
              goto label_7;
            case 2:
            case 6:
              goto label_9;
            case 4:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 2;
        continue;
label_7:
        num1 = 4;
        continue;
label_8:
        double[] numArray2 = new double[3];
        num1 = 3;
      }
label_1:
      numArray1 = this.InvokeConfiguration(param);
label_9:
      return numArray1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override List<double[]> SearchConfiguration(List<double[]> asset)
    {
      List<double[]> numArrayList = new List<double[]>(asset.Count);
      for (int index = 0; index < asset.Count; ++index)
      {
        double[] v = asset[index];
        numArrayList.Add(this.DisableConfiguration(v));
      }
      return numArrayList;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool CompareState(object ident)
    {
      int num1 = 6;
      bool flag1;
      while (true)
      {
        int num2 = num1;
label_5:
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_20;
            case 1:
              goto label_14;
            case 2:
              goto label_1;
            case 3:
            case 9:
              goto label_10;
            case 4:
              goto label_21;
            case 5:
              goto label_17;
            case 7:
              goto label_3;
            case 8:
            case 10:
              goto label_23;
            default:
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto label_23;
          }
        }
label_10:
        // ISSUE: variable of a compiler-generated type
        MerchantEventRole.BaseConsumer baseConsumer;
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        for (; baseConsumer.valConsumer < this._IteratorProcess.Count; baseConsumer.valConsumer++)
        {
          // ISSUE: reference to a compiler-generated method
          Interceptor interceptor = this._IteratorProcess.Find(new Predicate<Interceptor>(baseConsumer.ResolveError));
          if (interceptor != null)
          {
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            if (interceptor.LoginProcess() != baseConsumer.m_AdapterConsumer._ParameterConsumer.VisitConfiguration(baseConsumer.valConsumer).LoginProcess())
            {
              flag1 = false;
              goto label_23;
            }
          }
          else
          {
            int num3 = 7;
            num2 = MerchantEventRole.InterruptCreator() ? num3 : num3;
            goto label_5;
          }
        }
        // ISSUE: variable of a compiler-generated type
        MerchantEventRole.ServiceProcessVisitor serviceProcessVisitor;
        // ISSUE: reference to a compiler-generated field
        bool flag2 = this.RestartConsumer() != serviceProcessVisitor._ParameterConsumer.RestartConsumer();
        num1 = 4;
        continue;
label_14:
        bool flag3;
        if (!flag3)
        {
          // ISSUE: object of a compiler-generated type is created
          baseConsumer = new MerchantEventRole.BaseConsumer();
          // ISSUE: reference to a compiler-generated field
          baseConsumer.m_AdapterConsumer = serviceProcessVisitor;
          // ISSUE: reference to a compiler-generated field
          baseConsumer.valConsumer = 0;
          num1 = 9;
          continue;
        }
        goto label_15;
label_17:
        if (ident is MerchantEventRole)
        {
          // ISSUE: reference to a compiler-generated field
          serviceProcessVisitor._ParameterConsumer = ident as MerchantEventRole;
          // ISSUE: reference to a compiler-generated field
          flag3 = serviceProcessVisitor._ParameterConsumer.CloneState() != this.CloneState();
          num1 = 1;
          continue;
        }
        goto label_18;
label_20:
        // ISSUE: object of a compiler-generated type is created
        serviceProcessVisitor = new MerchantEventRole.ServiceProcessVisitor();
        num1 = 5;
        continue;
label_21:
        if (!flag2)
        {
          flag1 = true;
          num1 = 10;
        }
        else
          num1 = 2;
      }
label_1:
      flag1 = false;
      goto label_23;
label_3:
      flag1 = false;
      goto label_23;
label_15:
      flag1 = false;
      goto label_23;
label_18:
      flag1 = false;
label_23:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double AwakeConsumer(double ident) => Math.Pow(ident, 3.0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double ReflectConsumer(double value) => Math.Pow(value, 4.0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double RemoveConsumer(ref double v, ref double attr) => Math.Max(v, attr);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double UpdateConsumer(ref double init, ref double pol) => init < pol ? init : pol;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double CalcConsumer(double instance, double col) => instance - instance / col * col;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double WriteConsumer(double var1)
    {
      int num1 = 4;
      double num2;
      while (true)
      {
        int num3 = num1;
        bool flag;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
            case 3:
              if (!flag)
              {
                num2 = 1.0;
                num3 = 5;
                continue;
              }
              goto label_2;
            case 4:
              goto label_1;
            case 5:
              goto label_8;
            default:
              goto label_7;
          }
        }
label_1:
        flag = var1 < 0.0;
        num1 = 3;
        continue;
label_7:
        num1 = 0;
      }
label_2:
      num2 = -1.0;
label_8:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double CalculateConsumer(double ident)
    {
      int num1 = 8;
      double consumer;
      while (true)
      {
        int num2 = num1;
        long num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (Math.Abs(ident) <= Math.PI)
              {
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_19;
              }
              else
              {
                if ((long) Math.Abs(ident / Math.PI) < 2L)
                {
                  num2 = 2;
                  continue;
                }
                goto label_7;
              }
            case 1:
              if ((double) num3 > 4.0)
              {
                num2 = 5;
                continue;
              }
              goto case 0;
            case 2:
            case 3:
              goto label_6;
            case 4:
            case 6:
              goto label_13;
            case 5:
            case 7:
              goto label_19;
            case 8:
              goto label_5;
            case 9:
              goto label_22;
            default:
              goto label_12;
          }
        }
label_5:
        num3 = 0L;
        num1 = 0;
        continue;
label_6:
        ident -= MerchantEventRole.WriteConsumer(ident) * (2.0 * Math.PI);
        goto label_18;
label_7:
        bool flag;
        if ((double) (long) Math.Abs(ident / (2.0 * Math.PI)) < (double) int.MaxValue)
        {
          ident -= (double) (long) (ident / (2.0 * Math.PI)) * (2.0 * Math.PI);
          goto label_18;
        }
        else
        {
          flag = (double) (long) Math.Abs(ident / 13493037698.238832) < (double) int.MaxValue;
          goto label_13;
        }
label_12:
        num1 = 6;
        continue;
label_13:
        if (flag)
          ident -= (double) (long) (ident / 13493037698.238832) * 13493037698.238832;
        else if ((double) (long) Math.Abs(ident / 2.8976077779357651E+19) < (double) int.MaxValue)
          ident -= (double) (long) (ident / 2.8976077779357651E+19) * 2.8976077779357651E+19;
        else
          ident -= MerchantEventRole.WriteConsumer(ident) * (2.0 * Math.PI);
label_18:
        ++num3;
        num1 = 1;
        continue;
label_19:
        consumer = ident;
        num1 = 9;
      }
label_22:
      return consumer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double CustomizeConsumer(double instance, double cfg, double dir)
    {
      double num = instance * cfg;
      return dir / Math.Sqrt(1.0 - num * num);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double InvokeConsumer(double ident, double token)
    {
      int num1 = 4;
      double num2;
      while (true)
      {
        bool flag;
        int num3;
        switch (num1)
        {
          case 0:
          case 4:
            flag = ident > 1E-07;
            num3 = 5;
            break;
          case 1:
          case 5:
            if (!flag)
            {
              num2 = 2.0 * token;
              num3 = 6;
              break;
            }
            num3 = 2;
            break;
          case 2:
            goto label_6;
          case 3:
            goto label_2;
          case 6:
            goto label_10;
          default:
            num1 = 3;
            continue;
        }
        num1 = num3;
      }
label_2:
      double num4;
      num2 = (1.0 - ident * ident) * (token / (1.0 - num4 * num4) - 0.5 / ident * Math.Log((1.0 - num4) / (1.0 + num4)));
      goto label_10;
label_6:
      num4 = ident * token;
      goto label_2;
label_10:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static void ReadConsumer(double config, out double cfg, out double state)
    {
      cfg = Math.Sin(config);
      state = Math.Cos(config);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double PostConsumer(double param, double second, double res)
    {
      int num1 = 0;
      double num2;
      double y;
      double num3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num2 = param * res;
            num1 = 4;
            continue;
          case 1:
          case 4:
            y = 0.5 * param;
            goto case 2;
          case 2:
          case 3:
            num2 = Math.Pow((1.0 - num2) / (1.0 + num2), y);
            num3 = Math.Tan(0.5 * (Math.PI / 2.0 - second)) / num2;
            if (MerchantEventRole.InvokeCreator())
            {
              num1 = 5;
              continue;
            }
            goto case 0;
          case 5:
            goto label_6;
          default:
            num1 = 3;
            continue;
        }
      }
label_6:
      return num3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double FlushConsumer(double info, double caller, out long dir)
    {
      int num1 = 8;
      if (true)
        goto label_3;
label_1:
      double num2;
      double num3 = 1.0 - num2 * num2;
      double state;
      double num4;
      double cfg;
      double num5 = 0.5 * num3 * num3 / state * (caller / (1.0 - num4) - cfg / num3 + 0.5 / info * Math.Log((1.0 - num2) / (1.0 + num2)));
      double config;
      config += num5;
      bool flag1 = Math.Abs(num5) <= 1E-07;
      goto label_10;
label_2:
      int num6;
      num1 = num6;
label_3:
      double num7;
      long num8;
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_10;
          case 1:
          case 4:
            config = MerchantEventRole.TestConsumer(0.5 * caller);
            if (info < 1E-10)
            {
              num7 = config;
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto label_18;
            }
            else
            {
              num4 = info * info;
              num8 = 1L;
              goto case 6;
            }
          case 2:
          case 5:
            goto label_18;
          case 3:
            if (!flag2)
            {
              if (true)
              {
                num1 = 9;
                continue;
              }
              goto case 6;
            }
            else
              goto label_9;
          case 6:
            flag2 = num8 <= 25L;
            num1 = 3;
            continue;
          case 7:
            goto label_1;
          case 8:
            goto label_13;
          case 9:
            goto label_17;
          default:
            goto label_4;
        }
      }
label_4:
      num6 = 0;
      goto label_2;
label_9:
      MerchantEventRole.ReadConsumer(config, out cfg, out state);
      num2 = info * cfg;
      num6 = 7;
      goto label_2;
label_17:
      throw new ArgumentException("Convergence error.");
label_10:
      if (flag1)
      {
        num7 = config;
        goto label_18;
      }
      else
      {
        ++num8;
        if (MerchantEventRole.InvokeCreator())
        {
          num1 = 6;
          goto label_3;
        }
      }
label_13:
      dir = 0L;
      num6 = 4;
      goto label_2;
label_18:
      return num7;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double TestConsumer(double v)
    {
      int num1 = 1;
      double num2;
      while (true)
      {
        int num3 = num1;
        bool flag1;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
              flag1 = Math.Abs(v) > 1.0;
              if (MerchantEventRole.InvokeCreator())
              {
                num3 = 5;
                continue;
              }
              goto label_8;
            case 3:
            case 4:
              goto label_8;
            case 5:
              goto label_5;
            case 6:
              goto label_10;
            default:
              goto label_4;
          }
        }
label_1:
        bool flag2;
        v = !flag2 ? -1.0 : 1.0;
        goto label_8;
label_4:
        num1 = 4;
        continue;
label_5:
        if (flag1)
        {
          flag2 = v > 1.0;
          num1 = 0;
          continue;
        }
        goto label_9;
label_8:
label_9:
        num2 = Math.Asin(v);
        num1 = 6;
      }
label_10:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double MoveConsumer(double key, double map, out long consumer)
    {
      int num1 = 3;
      double a;
      while (true)
      {
        int num2 = num1;
        bool flag;
        long num3;
        double y;
        double num4;
        while (true)
        {
          switch (num2)
          {
            case 0:
              flag = Math.Abs(num4) <= 1E-10;
              goto case 6;
            case 1:
            case 7:
              goto label_9;
            case 2:
            case 5:
              goto label_3;
            case 3:
              goto label_7;
            case 4:
              if (num3 > 15L)
              {
                num2 = 8;
                continue;
              }
              double num5 = Math.Sin(a);
              double num6 = key * num5;
              num4 = Math.PI / 2.0 - 2.0 * Math.Atan(map * Math.Pow((1.0 - num6) / (1.0 + num6), y)) - a;
              a += num4;
              if (MerchantEventRole.InvokeCreator())
              {
                num2 = 0;
                continue;
              }
              goto label_9;
            case 6:
              if (!flag)
              {
                ++num3;
                goto case 4;
              }
              else
                goto label_2;
            case 8:
              goto label_14;
            default:
              goto label_13;
          }
        }
label_2:
        num1 = 2;
        continue;
label_7:
        consumer = 0L;
        num1 = 7;
        continue;
label_9:
        y = 0.5 * key;
        a = Math.PI / 2.0 - 2.0 * Math.Atan(map);
        num3 = 0L;
        num1 = 4;
        continue;
label_13:
        num1 = 6;
      }
label_3:
      return a;
label_14:
      throw new ArgumentException("Convergence error - phi2z-conv");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double CollectConsumer(double var1) => 1.0 - 0.25 * var1 * (1.0 + var1 / 16.0 * (3.0 + 1.25 * var1));

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double ConcatConsumer(double config) => 0.375 * config * (1.0 + 0.25 * config * (1.0 + 15.0 / 32.0 * config));

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double DefineConsumer(double setup) => 15.0 / 256.0 * setup * setup * (1.0 + 0.75 * setup);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double VerifyConsumer(double info) => info * info * info * 0.011393229166666666;

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double CreateConsumer(double i)
    {
      int num1 = 0;
      double consumer;
      while (true)
      {
        int num2 = num1;
        double num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num3 = 1.0 + i;
              if (MerchantEventRole.InvokeCreator())
              {
                num2 = 3;
                continue;
              }
              goto label_6;
            case 1:
            case 3:
              goto label_1;
            case 2:
            case 4:
              goto label_6;
            case 5:
              goto label_8;
            default:
              int num4 = 4;
              num2 = MerchantEventRole.InterruptCreator() ? num4 : num4;
              continue;
          }
        }
label_1:
        double num5 = 1.0 - i;
label_6:
        consumer = Math.Sqrt(Math.Pow(num3, num3) * Math.Pow(num5, num5));
        num1 = 5;
      }
label_8:
      return consumer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double NewConsumer(
      double ident,
      double ivk,
      double temp,
      double result2,
      double res3)
    {
      return ident * res3 - ivk * Math.Sin(2.0 * res3) + temp * Math.Sin(4.0 * res3) - result2 * Math.Sin(6.0 * res3);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static long InsertConsumer(double asset) => (long) ((asset + 180.0) / 6.0 + 1.0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double PushConsumer(double ident, bool comparecounter)
    {
      int num1 = 5;
      double num2;
      while (true)
      {
        int num3 = num1;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 4:
              if (ident > -180.0)
              {
                if (true)
                {
                  num3 = 0;
                  continue;
                }
                goto label_15;
              }
              else
                goto label_2;
            case 3:
              goto label_9;
            case 5:
              goto label_10;
            case 6:
              goto label_15;
            default:
              goto label_8;
          }
        }
label_1:
        int num4 = ident < 180.0 ? 1 : 0;
        goto label_5;
label_2:
        num4 = 0;
label_5:
        if (num4 == 0)
          break;
        goto label_9;
label_8:
        num1 = 3;
        continue;
label_9:
        num2 = StateProcess.PopConsumer(ident);
        num1 = 6;
        continue;
label_10:
        if (comparecounter)
        {
          num4 = ident < -180.0 ? 0 : (ident <= 180.0 ? 1 : 0);
          goto label_5;
        }
        else
          num1 = 4;
      }
      throw new ArgumentOutOfRangeException("x", ident.ToString((IFormatProvider) CultureInfo.InvariantCulture) + " not a valid longitude in degrees.");
label_15:
      return num2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected static double QueryConsumer(double res, bool explicitresult)
    {
      int num1 = 4;
      double num2;
      while (true)
      {
        int num3;
        int num4;
        switch (num1)
        {
          case 0:
          case 1:
            if (res <= -90.0)
            {
              num4 = 0;
              break;
            }
            num3 = 3;
            goto label_8;
          case 2:
          case 3:
            num4 = res < 90.0 ? 1 : 0;
            break;
          case 4:
            if (!explicitresult)
            {
              num3 = 0;
              goto label_8;
            }
            else
            {
              num4 = res < -90.0 ? 0 : (res <= 90.0 ? 1 : 0);
              break;
            }
          case 5:
label_3:
            num2 = StateProcess.PopConsumer(res);
            if (MerchantEventRole.InvokeCreator())
            {
              num1 = 6;
              continue;
            }
            goto case 2;
          case 6:
            goto label_15;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 0;
        }
        if (num4 == 0)
          break;
        goto label_3;
label_8:
        num1 = num3;
      }
      throw new ArgumentOutOfRangeException("y", res.ToString((IFormatProvider) CultureInfo.InvariantCulture) + " not a valid latitude in degrees.");
label_15:
      return num2;
    }

    internal static bool InvokeCreator() => true;

    internal static bool InterruptCreator() => false;
  }
}
