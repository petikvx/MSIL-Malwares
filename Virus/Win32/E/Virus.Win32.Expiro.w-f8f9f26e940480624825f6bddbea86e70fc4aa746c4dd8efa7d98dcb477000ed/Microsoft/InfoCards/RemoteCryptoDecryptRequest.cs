// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.RemoteCryptoDecryptRequest
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 1D4D5564-A025-490C-AF1D-DF4FBB709D1F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Expiro.w-f8f9f26e940480624825f6bddbea86e70fc4aa746c4dd8efa7d98dcb477000ed.exe

using System.IO;

namespace Microsoft.InfoCards
{
  internal class RemoteCryptoDecryptRequest : RpcCryptoRequest
  {
    private byte[] m_buffer;
    private int m_index;
    private int m_length;
    private bool m_final;
    private int m_flags;
    private int m_hashAlg;
    private byte[] m_hash;

    public RemoteCryptoDecryptRequest(
      RpcCryptoContext context,
      int flags,
      bool final,
      byte[] buffer,
      int index,
      int length,
      int hashAlg,
      byte[] hashValue)
      : base(context)
    {
      this.m_buffer = buffer;
      this.m_length = length;
      this.m_index = index;
      this.m_flags = flags;
      this.m_final = final;
      this.m_hashAlg = hashAlg;
      this.m_hash = hashValue;
    }

    public override string Name => "RpcCryptoDecryptRequest";

    public byte[] GetBuffer() => this.m_buffer;

    public int Length => this.m_length;

    public int Index => this.m_index;

    protected override void MarshalOutArgs(Stream stream)
    {
      BinaryWriter writer = new BinaryWriter(stream);
      writer.Write(this.m_flags);
      writer.Write(this.m_final);
      writer.Write(this.m_length);
      writer.Write(this.m_buffer, this.m_index, this.m_length);
      writer.Write(this.m_hashAlg);
      Utility.SerializeBytes(writer, this.m_hash);
    }

    protected override void MarshalReturnArgs(Stream stream)
    {
      BinaryReader binaryReader = (BinaryReader) new InfoCardBinaryReader(stream);
      this.m_length = binaryReader.ReadInt32();
      binaryReader.Read(this.m_buffer, this.m_index, this.m_length);
    }
  }
}
