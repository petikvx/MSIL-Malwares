// Decompiled with JetBrains decompiler
// Type: Tourield.Specifications.PrinterPrototypeSpec
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Collections;
using DebuggerTypeProxyAttrib.Mappers;
using DebuggerTypeProxyAttrib.Pages;
using DebuggerTypeProxyAttrib.Resolver;
using DebuggerTypeProxyAttrib.Wrappers;
using System.Runtime.CompilerServices;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using Tourield.Structs;

namespace Tourield.Specifications
{
  public class PrinterPrototypeSpec
  {
    public uint indexer;
    public string m_Interpreter;
    public GlobalErrorCollection m_Exporter;
    public Process _Reg;
    public ListResolverResolver message;
    public Info _Annotation;
    public Collection m_Task;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void StartOrder()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        TranslateTransform3D translateTransform3D;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_8;
            case 1:
              translateTransform3D.OffsetX = this._Reg.m_Descriptor.X + this._Reg._Candidate.X;
              translateTransform3D.OffsetY = this._Reg.m_Descriptor.Y + this._Reg._Candidate.Y;
              translateTransform3D.OffsetZ = this._Reg.m_Descriptor.Z + this._Reg._Candidate.Z;
              this._Reg._Tag.Transform = (Transform3D) translateTransform3D;
              this._Reg.m_Descriptor.X += this._Reg._Candidate.X;
              this._Reg.m_Descriptor.Y += this._Reg._Candidate.Y;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
            case 3:
            case 6:
              this._Reg._Candidate.X = 0.0;
              this._Reg._Candidate.Y = 0.0;
              if (PrinterPrototypeSpec.DestroyAttribute())
              {
                num2 = 5;
                continue;
              }
              goto case 1;
            case 4:
              this._Reg.m_Descriptor.Z += this._Reg._Candidate.Z;
              goto case 3;
            case 5:
              goto label_7;
            case 7:
              goto label_9;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 6;
        continue;
label_7:
        this._Reg._Candidate.Z = 0.0;
        num1 = 7;
        continue;
label_8:
        translateTransform3D = new TranslateTransform3D();
        num1 = 1;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PrinterPrototypeSpec(ref uint setup, GlobalErrorCollection token)
    {
      int num1 = 2;
      if (true)
        goto label_5;
label_1:
      this.message.config = this.indexer;
      token.token.Add(this.indexer, this.message);
      this._Annotation.val = this.indexer;
      token.m_Singleton.Add(this.indexer, this._Annotation);
      this.m_Task.m_Reponse = this.indexer;
      token._Struct.Add(this.indexer, this.m_Task);
      int num2 = 8;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            RegistryPagePage.ListMethod();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 6;
          case 1:
          case 3:
            this.message = new ListResolverResolver();
            this._Annotation = new Info();
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 4;
          case 4:
            this.indexer = setup;
            ++setup;
            goto case 6;
          case 5:
            this.m_Task = new Collection();
            // ISSUE: explicit constructor call
            base.\u002Ector();
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 0;
          case 6:
            this._Reg._Template = this.indexer;
            this._Reg = new Process(setup);
            token._Rule.Add(this.indexer, this._Reg);
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_10;
          case 7:
            goto label_1;
          case 8:
            goto label_12;
          default:
            goto label_6;
        }
      }
label_12:
      return;
label_6:
      num2 = 6;
      goto label_4;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PrinterPrototypeSpec(
      Point3D init,
      Brush map,
      Vector3D third,
      ref uint x2,
      GlobalErrorCollection value3,
      string cont4)
    {
      int num1 = 8;
      if (PrinterPrototypeSpec.DestroyAttribute())
        goto label_6;
label_1:
      this.m_Interpreter = cont4;
      this._Reg.m_Descriptor = init;
      int num2 = 5;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 8:
            RegistryPagePage.ListMethod();
            num1 = 4;
            continue;
          case 1:
            goto label_9;
          case 2:
          case 6:
            this.message.config = this.indexer;
            num1 = 7;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_2;
          case 5:
            goto label_10;
          case 7:
            goto label_4;
          case 9:
            goto label_11;
          default:
            goto label_7;
        }
      }
label_2:
      this.message = new ListResolverResolver();
      this._Annotation = new Info();
      this.m_Task = new Collection();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.indexer = x2;
      ++x2;
      this._Reg = new Process(this.indexer);
      value3._Rule.Add(this.indexer, this._Reg);
      num2 = 6;
      goto label_5;
label_4:
      value3.token.Add(this.indexer, this.message);
      this._Annotation.val = this.indexer;
      value3.m_Singleton.Add(this.indexer, this._Annotation);
      goto label_9;
label_11:
      return;
label_7:
      num2 = 1;
      goto label_5;
label_9:
      this.m_Task.m_Reponse = this.indexer;
      value3._Struct.Add(this.indexer, this.m_Task);
      num2 = 3;
      goto label_5;
label_10:
      this._Reg._Tag = ErrorParserStructBuilder.AwakeOrder(new Point3D(this._Reg.m_Descriptor.X, this._Reg.m_Descriptor.Y, this._Reg.m_Descriptor.Z), map);
      this._Reg._Candidate = third;
      value3.m_Code.Add(this.indexer, this);
      num2 = 9;
      goto label_5;
    }

    internal static bool DestroyAttribute() => true;

    internal static bool CompareAttribute() => false;
  }
}
