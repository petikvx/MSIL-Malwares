// Decompiled with JetBrains decompiler
// Type: ‮‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using Org.BouncyCastle.Asn1;
using System;
using System.Collections;
using System.IO;

public class \u202E‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮ : 
  \u206E⁮‫⁭⁯‎⁬⁯‎‍⁭‪‎⁬‌‪​‎‍‏‌⁫‍‪​⁭⁭​⁫‬‪‫​⁫​⁯⁬‏⁬‍‮,
  \u202A‭‮⁫‎‮‍‌‬⁭⁯‮‍‍‍⁮‮‏‍‪‫‌⁬‪‍⁫‫​‪‍‬‌‮⁭‌‫⁮⁫⁮‪‮,
  \u200C‮⁭‍⁭⁬⁯⁯‬⁮‏⁭‬⁬⁫‍‮‪‫⁪⁬‎‍‬‭​‪⁫‪‭‫‍‏‫‭⁬‎‮​⁪‮
{
  private readonly \u200C‫⁭‮⁫⁬⁫⁫⁫​⁮‏‮‮‬⁯‮​‬‏‬⁮‍‮‮‍‏‬⁪‬⁬‏⁪‮‬⁮⁬⁫‎⁮‮ \u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮;
  private readonly DateTime \u202D‌⁮⁪⁯‮‬‎‪‫‮⁫‫⁬‌‮‏‎‌‪‏‎⁬⁯​⁭⁫⁮‎⁭⁪‫⁭⁭⁭⁬⁯​‪‎‮;
  private readonly DateTime \u200C⁮‪⁮​⁫‌⁬⁬⁮‎‮⁫⁭⁫‮‭⁫⁪⁪⁯⁭⁯⁪‭‮‫‌⁭‮‬⁪⁫‍⁯‎⁮‏‫⁭‮;

  private static \u200C‫⁭‮⁫⁬⁫⁫⁫​⁮‏‮‮‬⁯‮​‬‏‬⁮‍‮‮‍‏‬⁪‬⁬‏⁪‮‬⁮⁬⁫‎⁮‮ \u200C‮‬⁬‏‍‬​⁬‫‫⁫⁯‫⁭‬‍‎⁬‭‏⁪‏‮‫⁯‏​‫⁯‬⁭⁫⁬⁭⁬‌⁫‫‫‮(
    Stream _param0)
  {
    try
    {
      return \u200C‫⁭‮⁫⁬⁫⁫⁫​⁮‏‮‮‬⁯‮​‬‏‬⁮‍‮‮‍‏‬⁪‬⁬‏⁪‮‬⁮⁬⁫‎⁮‮.\u206E‏‫‮‫‫⁫⁬‬⁯‎‮‮‫‏​‬⁭⁭⁯‭‫‍‌‮‎‬‪⁬​⁪‭‪‏‬⁬⁪‏⁬⁭‮((object) \u206C‭‍⁮‪‮⁭‫⁮‮‬‎​‌‮‎‍⁬​⁪‫⁫‪‭‌‌‪⁭⁭⁪‍‮⁯⁭‍‎⁪‬⁬‍‮.\u200E‭‪‬‍⁯‪‍‬‍​⁫⁯⁯‭⁮‪‍‎‮⁮⁮⁬​‮⁭‏⁯⁭‏⁭⁬‬⁮⁯‍⁮⁮‬‪‮(_param0));
    }
    catch (IOException ex)
    {
      throw ex;
    }
    catch (Exception ex)
    {
      throw new IOException("exception decoding certificate structure", ex);
    }
  }

  public \u202E‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮(Stream _param1)
    : this(\u202E‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮.\u200C‮‬⁬‏‍‬​⁬‫‫⁫⁯‫⁭‬‍‎⁬‭‏⁪‏‮‫⁯‏​‫⁯‬⁭⁫⁬⁭⁬‌⁫‫‫‮(_param1))
  {
  }

  public \u202E‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮(byte[] _param1)
    : this((Stream) new MemoryStream(_param1, false))
  {
  }

  internal \u202E‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮(
    \u200C‫⁭‮⁫⁬⁫⁫⁫​⁮‏‮‮‬⁯‮​‬‏‬⁮‍‮‮‍‏‬⁪‬⁬‏⁪‮‬⁮⁬⁫‎⁮‮ _param1)
  {
    this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮ = _param1;
    try
    {
      this.\u200C⁮‪⁮​⁫‌⁬⁬⁮‎‮⁫⁭⁫‮‭⁫⁪⁪⁯⁭⁯⁪‭‮‫‌⁭‮‬⁪⁫‍⁯‎⁮‏‫⁭‮ = _param1.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202A⁬‮⁬‏‏‫‬⁬⁫‌‏‏‪‭⁯⁪​⁫‪‌⁮⁫​‭‎⁫​‭‎⁫‫‪‮‭‎‍⁯‏‮.\u202B⁪‏​⁫‎⁫⁯‍⁪‌‏​‏⁪‭‬‬‭‌‍​⁯‬⁫‫‪⁮⁬⁭⁭‍‌⁬‫⁫‬‭‌‍‮.\u202C‪‮⁭⁭‫⁭‭‎‏⁭‪‫​⁬⁪⁫‪​‌⁬⁮‍⁬‌‎⁭‮‏⁭‮‭‭⁯⁪⁮⁯‎‍‮();
      this.\u202D‌⁮⁪⁯‮‬‎‪‫‮⁫‫⁬‌‮‏‎‌‪‏‎⁬⁯​⁭⁫⁮‎⁭⁪‫⁭⁭⁭⁬⁯​‪‎‮ = _param1.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202A⁬‮⁬‏‏‫‬⁬⁫‌‏‏‪‭⁯⁪​⁫‪‌⁮⁫​‭‎⁫​‭‎⁫‫‪‮‭‎‍⁯‏‮.\u206A⁫⁪‫​‎‏‎⁫‭⁬‮⁮‮‍‍‭‎⁫‭‭‌‎‮⁯‮​​⁫‬‭‭‫‫⁮‮⁪‍‌⁬‮.\u202C‪‮⁭⁭‫⁭‭‎‏⁭‪‫​⁬⁪⁫‪​‌⁬⁮‍⁬‌‎⁭‮‏⁭‮‭‭⁯⁪⁮⁯‎‍‮();
    }
    catch (Exception ex)
    {
      throw new IOException("invalid data structure in certificate!", ex);
    }
  }

  public virtual int \u200F‌⁪​‬‍‌⁯‎‌‬‍‬‬‌⁪⁫‪‫⁯⁬‌⁪‮‬‮‏‍‫⁪‬​‪‮⁮​⁫⁭‮‎‮ => this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u200F‌⁪​‬‍‌⁯‎‌‬‍‬‬‌⁪⁫‪‫⁯⁬‌⁪‮‬‮‏‍‫⁪‬​‪‮⁮​⁫⁭‮‎‮.\u202E‭‫⁪‮​‎⁮‏‬⁬⁫‬‍‍‌‏‍⁭‮‭⁭⁫‮⁭‍‎⁬‫‮‬⁮‌⁪⁬‭⁮⁬‬‪‮ + 1;

  public virtual \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206D⁬​⁮‫⁯​⁪⁫⁫⁯‍⁮‮‬‎‪⁮‏⁮‎⁯‌‭‏⁭⁪⁯⁭‏⁭‏⁫​⁫⁪‪‬​⁭‮ => this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u206D⁬​⁮‫⁯​⁪⁫⁫⁯‍⁮‮‬‎‪⁮‏⁮‎⁯‌‭‏⁭⁪⁯⁭‏⁭‏⁫​⁫⁪‪‬​⁭‮.\u206C‬⁪‬‫​⁪‮‏⁭‏‬‏‭⁭‬‫‍⁮‌‪‌‍‮‮‪‪⁪​⁯‎‫⁮‭⁪‍‌‫⁫‮‮;

  public virtual \u206C⁭⁪​⁪‬‍⁭⁪⁪‌‮⁯⁫​‌‏‭⁯⁮‮‏⁯‌⁮‬‫‫‏‬​⁯⁯‎‎⁯⁯⁯‭‭‮ \u202E‭‎‏⁭‌‍⁮‫‌⁪‌‮⁬⁬⁬‬​‫‬‬‬‪‫‫‎‌‪‬​​‭⁯⁯⁯‍⁯⁫⁪‬‮ => new \u206C⁭⁪​⁪‬‍⁭⁪⁪‌‮⁯⁫​‌‏‭⁯⁮‮‏⁯‌⁮‬‫‫‏‬​⁯⁯‎‎⁯⁯⁯‭‭‮((\u206A‬⁪⁯​⁯‍⁭⁯‮‎‮⁫​‎‬‌‌‏⁪‍⁫‏​⁫​‪​⁯⁫⁮⁯‮​⁬‎‫‌‌⁯‮) ((Asn1Encodable) this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202E‭‎‏⁭‌‍⁮‫‌⁪‌‮⁬⁬⁬‬​‫‬‬‬‪‫‫‎‌‪‬​​‭⁯⁯⁯‍⁯⁫⁪‬‮).ToAsn1Object());

  public virtual \u200B⁭‫‮‭‌‎‏‌‎​⁮‪‭‎⁫⁬⁫‎⁮⁮⁪‭⁫⁭​‎‫⁭‪‭‫‮‏‫‫‎​‏⁭‮ \u202A‎‍‏‮‫‍⁪‍‌‫⁭⁬⁭⁬‏⁮​‎⁭⁫​​‎‪‍⁭‏‭‬‭‌⁬⁫‎‌‬⁮‮‎‮ => new \u200B⁭‫‮‭‌‎‏‌‎​⁮‪‭‎⁫⁬⁫‎⁮⁮⁪‭⁫⁭​‎‫⁭‪‭‫‮‏‫‫‎​‏⁭‮(this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202A‎‍‏‮‫‍⁪‍‌‫⁭⁬⁭⁬‏⁮​‎⁭⁫​​‎‪‍⁭‏‭‬‭‌⁬⁫‎‌‬⁮‮‎‮);

  public virtual DateTime \u206B‏⁮‌‬⁯‮‌​‌⁪⁭‎⁫⁪​‎‮⁮⁪​‬‍⁬‪​​⁯⁪⁯⁮⁫‏‌‪⁬‫⁭‎⁫‮ => this.\u202D‌⁮⁪⁯‮‬‎‪‫‮⁫‫⁬‌‮‏‎‌‪‏‎⁬⁯​⁭⁫⁮‎⁭⁪‫⁭⁭⁭⁬⁯​‪‎‮;

  public virtual DateTime \u202D⁪⁮‮⁮‭​‎⁭⁮⁪⁫⁬‫⁪​‫‫‪‪‏​⁬‪‌‪‮⁪‪⁬​⁬‭‬‍‫⁯⁪‬‍‮ => this.\u200C⁮‪⁮​⁫‌⁬⁬⁮‎‮⁫⁭⁫‮‭⁫⁪⁪⁯⁭⁯⁪‭‮‫‌⁭‮‬⁪⁫‍⁯‎⁮‏‫⁭‮;

  public virtual bool[] \u206B⁬‮⁮‮‌‭⁯⁮⁪‌‮‍‭⁬‌⁪⁬‏‮⁭‪‎⁬⁪​⁫​‎⁮⁬‮⁮⁫‮‍‌⁪‏‭‮()
  {
    \u206B‎‪‭‮⁫⁯​⁮⁯⁬‫​​⁬⁯‬⁭‭‬​⁪⁭⁮​⁪‎⁮⁬‫‭‫⁬‪⁪‬⁭‍‫⁭‮ obj = this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u200F‍⁭‪⁭⁫⁭‮​⁯​⁭‏‏‭⁮‎‫‌‫‌‪‪​‌‪‍⁯‎‎​⁭‍⁯⁮⁪⁮‮‌‎‮;
    if (obj == null)
      return (bool[]) null;
    byte[] numArray = obj.\u202C⁭‌‮‌⁫‮⁮‌‮‮⁯‎‪‍⁬‪⁯‍⁪⁭⁯‬‌⁫⁯⁫‎‫⁪⁫⁬⁫⁯⁮‪‭‮‍‎‮();
    bool[] flagArray = new bool[numArray.Length * 8 - obj.\u202D‭​‌‌‬‭⁮‬​‎‮‌‎⁮‫‪‬‍⁭⁭‫⁪‮⁮⁪‬‮‮‮‫‭‏‍⁯⁭‌‬⁯‌‮];
    for (int index = 0; index != flagArray.Length; ++index)
      flagArray[index] = ((uint) numArray[index / 8] & (uint) (128 >> index % 8)) > 0U;
    return flagArray;
  }

  public virtual bool \u206A‭‭‪⁯‬‎‪⁪⁯‏‮⁬⁬​‫​‬‪⁪‬‬⁮⁮⁮‮‍‭⁪‬‪‬‬‍⁮‭‪‌‌⁬‮ => this.\u200B‎​‮⁭‮‍⁬‎‫‬‌⁪‫​‭‍⁯‭‪‭⁬‍⁬‭⁪‬⁮‬‎‏‮‫⁭‭‎‍⁬⁭⁬‮(DateTime.UtcNow);

  public virtual bool \u200B‎​‮⁭‮‍⁬‎‫‬‌⁪‫​‭‍⁯‭‪‭⁬‍⁬‭⁪‬⁮‬‎‏‮‫⁭‭‎‍⁬⁭⁬‮(DateTime _param1) => _param1.CompareTo(this.\u206B‏⁮‌‬⁯‮‌​‌⁪⁭‎⁫⁪​‎‮⁮⁪​‬‍⁬‪​​⁯⁪⁯⁮⁫‏‌‪⁬‫⁭‎⁫‮) >= 0 && _param1.CompareTo(this.\u202D⁪⁮‮⁮‭​‎⁭⁮⁪⁫⁬‫⁪​‫‫‪‪‏​⁬‪‌‪‮⁪‪⁬​⁬‭‬‍‫⁯⁪‬‍‮) <= 0;

  public virtual void \u200B⁫‍⁭‭⁫‭‌⁪‫⁬‎⁫‍‎‫⁬‭‍‭⁯‏‭⁬‪⁪‬‫‏‮‮⁯⁯⁫⁭‭⁮‌⁮⁯‮() => this.\u200B⁫‍⁭‭⁫‭‌⁪‫⁬‎⁫‍‎‫⁬‭‍‭⁯‏‭⁬‪⁪‬‫‏‮‮⁯⁯⁫⁭‭⁮‌⁮⁯‮(DateTime.UtcNow);

  public virtual void \u200B⁫‍⁭‭⁫‭‌⁪‫⁬‎⁫‍‎‫⁬‭‍‭⁯‏‭⁬‪⁪‬‫‏‮‮⁯⁯⁫⁭‭⁮‌⁮⁯‮(DateTime _param1)
  {
    if (_param1.CompareTo(this.\u202D⁪⁮‮⁮‭​‎⁭⁮⁪⁫⁬‫⁪​‫‫‪‪‏​⁬‪‌‪‮⁪‪⁬​⁬‭‬‍‫⁯⁪‬‍‮) > 0)
      throw new \u206F‏‭​⁮‮⁮⁭‌⁬⁯⁬⁪‏‪⁯‬⁫⁫‬⁮‫⁫⁪⁭‍⁫​‍‭‫⁮⁬‬​‬⁫⁯‍⁯‮("certificate expired on " + this.\u202D⁪⁮‮⁮‭​‎⁭⁮⁪⁫⁬‫⁪​‫‫‪‪‏​⁬‪‌‪‮⁪‪⁬​⁬‭‬‍‫⁯⁪‬‍‮.ToString());
    if (_param1.CompareTo(this.\u206B‏⁮‌‬⁯‮‌​‌⁪⁭‎⁫⁪​‎‮⁮⁪​‬‍⁬‪​​⁯⁪⁯⁮⁫‏‌‪⁬‫⁭‎⁫‮) < 0)
      throw new \u206C‫⁯⁮‭⁫‍⁬​⁬⁭⁬‌‍‬⁭​‮‫‏‎​‫‫‬‮‫‭‫⁮⁭⁪⁬‫‏‎‍⁭‌‮‮("certificate not valid until " + this.\u206B‏⁮‌‬⁯‮‌​‌⁪⁭‎⁫⁪​‎‮⁮⁪​‬‍⁬‪​​⁯⁪⁯⁮⁫‏‌‪⁬‫⁭‎⁫‮.ToString());
  }

  public virtual \u206A​‏⁯⁭⁬⁭‍‌‌‪‮‪‏‬‪⁭⁯⁭⁫‍‍‍‏‭‍‫⁫⁫⁫⁪‭⁮⁫⁫⁬‍‌⁪‪‮ \u206B‫⁫⁭‪⁫‫‎‭‭⁬⁫‭⁭‪‪‪‮‪⁮‍‏‏⁭⁬‍⁮⁫⁪​⁭‍‌​‫⁪‍‏⁭‪‮ => this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206B‫⁫⁭‪⁫‫‎‭‭⁬⁫‭⁭‪‪‪‮‪⁮‍‏‏⁭⁬‍⁮⁫⁪​⁭‍‌​‫⁪‍‏⁭‪‮;

  public virtual byte[] \u200B‬⁬‌⁫‬‭‫⁫‭‎⁮⁬‌‪‏‪‫‏⁪‮⁬⁫‮‎‍⁭‎‍‏‏‍‎⁭‎⁬⁭⁮⁯‮‮() => this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206E⁪‪‫‮‌‭‌⁪‍‍⁬⁯⁬⁪‮‌⁯‭‬‎‍‭​‍‫‫⁪‍⁫⁮⁭‫‍‪‌‪⁪‌‌‮();

  public virtual void \u200F‌⁪⁬⁭⁪‭‍‌‫⁪‏‏‍‌⁫‌‍‏‬‌⁫‮⁬⁪‌‮‫⁪‏‎⁬‫‎⁬⁭‏⁬‮⁬‮(
    \u206D⁬‬⁫‪‎⁭⁭‌​⁬‌⁯‍‍⁯⁭‬‫‪‭‏⁮‏‭‬‫⁮‌‏⁯‫‫⁫⁫‭⁭‏‌‍‮ _param1)
  {
    this.\u200C‍⁪⁯‬‬​⁮⁬‬‏‌‫⁮‭​⁮‫⁮​‌‫‎‏‌​⁯⁭⁬‌⁯‎⁪‮⁯‬​⁯⁫⁮‮((\u206A‍‎‎‬​⁮‪⁯⁯⁭‍⁪‮⁯⁮⁪‏‬‬‮‮‫‮‌‮⁬‎⁮‌⁫‭⁭​‌⁭⁭⁬‪‌‮) new \u200F‏⁪⁮‎‏‎‭​‍‭‌⁯‍‌⁮‏‬⁪‮​⁫‏‏‫‎‌⁭⁫‍‫‍⁮⁪⁯‪‍‮‪⁭‮(this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206B‫⁫⁭‪⁫‫‎‭‭⁬⁫‭⁭‪‪‪‮‪⁮‍‏‏⁭⁬‍⁮⁫⁪​⁭‍‌​‫⁪‍‏⁭‪‮, _param1));
  }

  public virtual void \u200F‌⁪⁬⁭⁪‭‍‌‫⁪‏‏‍‌⁫‌‍‏‬‌⁫‮⁬⁪‌‮‫⁪‏‎⁬‫‎⁬⁭‏⁬‮⁬‮(
    \u202B‫‫‪​⁪⁯‍⁪⁭‬‎‍‪‪⁫‬⁮‭⁬‮‍⁯‌‫⁭⁬⁯‫‎‎⁭‬‭‫⁮​⁫⁯‌‮ _param1)
  {
    this.\u200C‍⁪⁯‬‬​⁮⁬‬‏‌‫⁮‭​⁮‫⁮​‌‫‎‏‌​⁯⁭⁬‌⁯‎⁪‮⁯‬​⁯⁫⁮‮(_param1.\u202C‬‎⁫⁮⁬‍⁭⁭⁫‏‭⁬‫‮‮⁭‫‏⁮‍⁭​⁬‌‬⁫⁫‬‏⁪⁪‮⁪‌⁭‎‬‍‎‮((object) this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206B‫⁫⁭‪⁫‫‎‭‭⁬⁫‭⁭‪‪‪‮‪⁮‍‏‏⁭⁬‍⁮⁫⁪​⁭‍‌​‫⁪‍‏⁭‪‮));
  }

  protected virtual void \u200C‍⁪⁯‬‬​⁮⁬‬‏‌‫⁮‭​⁮‫⁮​‌‫‎‏‌​⁯⁭⁬‌⁯‎⁪‮⁯‬​⁯⁫⁮‮(
    \u206A‍‎‎‬​⁮‪⁯⁯⁭‍⁪‮⁯⁮⁪‏‬‬‮‮‫‮‌‮⁬‎⁮‌⁫‭⁭​‌⁭⁭⁬‪‌‮ _param1)
  {
    if (!((object) this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206B‫⁫⁭‪⁫‫‎‭‭⁬⁫‭⁭‪‪‪‮‪⁮‍‏‏⁭⁬‍⁮⁫⁪​⁭‍‌​‫⁪‍‏⁭‪‮).Equals((object) this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u200B‭‭⁮⁬​⁫⁬‫‏‎​‮‌‌‌‭‏‪‍‌‬‬‫⁭‏⁫⁮⁮​⁯⁬‎‬‮​‭‏‫‎‮))
      throw new \u206F⁯⁪​⁮⁪​‬⁬​⁫‎‫‮⁯‏‎‎‍‭​‍⁪‫‏⁮⁭‎‏‏‌​‮‌⁫‮‫‭​‌‮("Signature algorithm in certificate info not same as outer certificate");
    \u202C⁯‭⁬‏⁭‌⁬⁮‍‌‫‌⁯‬‎⁮‭‍‍⁪​⁫‭‫⁮‮‌⁬‎‍⁫‎‬⁪‎⁭⁬⁪‎‮ obj = _param1.\u202C‌‫⁯⁯‬‌‭‏‭‮⁮‌‌⁪‫‌‭‪⁭⁯⁫‍‪⁫‮‎‪‏‭‫⁭‭⁯‬‫⁮‌‏‎‮();
    try
    {
      byte[] encoded = this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.GetEncoded();
      obj.\u200F⁫‭‭‏‏⁬⁪‏‭‫⁬‭⁬⁫⁬‌⁮⁯‌‪⁭⁯‪‬​⁯⁭‏‌⁬⁮‭​⁫⁯‎⁫‍⁬‮.Write(encoded, 0, encoded.Length);
      \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u202A‎​‬‌‎‬⁫​‭⁮​‍⁫‬‎‍‪‪⁮​⁪⁮‫⁯​​‎​‫‍⁬⁭‏‌​‎‏‏‮‮(obj.\u200F⁫‭‭‏‏⁬⁪‏‭‫⁬‭⁬⁫⁬‌⁮⁯‌‪⁭⁯‪‬​⁯⁭‏‌⁬⁮‭​⁫⁯‎⁫‍⁬‮);
    }
    catch (IOException ex)
    {
      throw new \u202E‪⁮‎​⁮⁬‬‬‭‫‏​‌‭‬⁬⁮‮‪‮⁫​⁮​‭‭⁭‭‬‫‫⁭‌⁭‌‭⁯‏⁫‮("Exception encoding certificate info object", (Exception) ex);
    }
    if (!((\u202B⁭‍‪‫⁯​‪⁭​‭‪‬⁫‬⁯‍‎​⁭‍⁭‌⁫‬⁮‎⁭‌⁪​⁫‮⁪​⁮​‭⁫⁯‮) obj.\u206A​⁮⁬⁭⁫⁬​‬‌​⁫⁫‮‍‎‎⁬⁭⁯‮‪⁮‏‮‌‭‭⁫⁮⁮‏‌‎‭‍⁪⁪‎⁮‮()).\u200D‎‬‎⁫‭⁬‮‮⁮‭‎⁬‮​⁬‫⁪‮‌⁫⁭‮‎‎‍⁪‬⁭‭‬‬⁭⁭‪⁮⁯⁯‌‎‮(this.\u200B‬⁬‌⁫‬‭‫⁫‭‎⁮⁬‌‪‏‪‫‏⁪‮⁬⁫‮‎‍⁭‎‍‏‏‍‎⁭‎⁬⁭⁮⁯‮‮()))
      throw new \u202E‪‍‍‏‬‭‪⁭‭⁯‌⁫‫‏‪⁭​‍​‫‌⁭‪‭‍‮‎‏‮​⁫‎‮‭‪‫⁬‏⁮‮("Public key presented not for certificate signature");
  }

  public virtual byte[] \u206F​‪‪‌‮‬‫⁮​⁭‎‪​‬⁯‫‎⁭‪‌​‮‮‌​‌‮‏‭‎‫‌‮⁭‍‭‫‬‫‮() => this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.GetEncoded();

  \u206A⁭⁪‬‌⁪⁫⁫⁮‬​‌‬‭⁬‪‮⁬‫⁭⁭⁬‪‍⁫‎​⁫⁭⁯‌⁫‏‌⁫⁬⁯‪⁫‫‮ \u206E⁮‫⁭⁯‎⁬⁯‎‍⁭‪‎⁬‌‪​‎‍‏‌⁫‍‪​⁭⁭​⁫‬‪‫​⁫​⁯⁬‏⁬‍‮.\u202E⁭⁯‮⁬‮‍⁯​‍‭⁯‍‍⁫‏‪‌⁬‌‏‏⁮​‏⁫‏‍‬‏‎‏‪‭⁭⁫‎‏⁪⁫‮() => this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202E⁭‍⁯⁫⁯‏⁯‍‬‮⁬‍⁯‌⁪‬‌⁫‎⁭⁭‫‭‪‏⁮​‍‍‎⁪​‪⁪⁮⁪‏‫‬‮;

  public virtual \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[] \u202E‪​⁬⁯‏‮⁪⁭‍⁭⁭‪‌‭‭‮⁮⁮⁮‬‪⁭‪​‭⁮‍⁬⁬⁬‌⁫‬‫⁬⁭‮‎‎‮()
  {
    \u206A‬⁪⁯​⁯‍⁭⁯‮‎‮⁫​‎‬‌‌‏⁪‍⁫‏​⁫​‪​⁯⁫⁮⁯‮​⁬‎‫‌‌⁯‮ obj = this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202C⁭‌‫‪⁪⁫‮‪‍⁫⁯‫⁭⁬⁬⁪‍‍⁮⁮⁬⁬⁫⁯⁪‬‍‪‎⁯⁮‬⁯‫​‭‭‬⁫‮;
    \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[] objArray = new \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[obj.\u200E‪‌‮‪‏⁬‮‫​‪⁪‎⁫‏‭⁭⁭‍⁮‌‬⁪‪⁪‪‎⁭⁯⁭‌‭‪⁪‬‮‬‎​‬‮];
    for (int index = 0; index != obj.\u200E‪‌‮‪‏⁬‮‫​‪⁪‎⁫‏‭⁭⁭‍⁮‌‬⁪‪⁪‪‎⁭⁯⁭‌‭‪⁪‬‮‬‎​‬‮; ++index)
      objArray[index] = new \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮(obj.\u200E‪⁪‮⁮⁭⁯‏​‬⁫⁯‍‭‪‫⁫‏‌⁪⁬‪‫⁯‎⁪‌⁫‭⁫‫⁫‌​‭⁯‫​⁯‭‮(index));
    return objArray;
  }

  public virtual \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[] \u202E‪​⁬⁯‏‮⁪⁭‍⁭⁭‪‌‭‭‮⁮⁮⁮‬‪⁭‪​‭⁮‍⁬⁬⁬‌⁫‬‫⁬⁭‮‎‎‮(
    string _param1)
  {
    \u206A‬⁪⁯​⁯‍⁭⁯‮‎‮⁫​‎‬‌‌‏⁪‍⁫‏​⁫​‪​⁯⁫⁮⁯‮​⁬‎‫‌‌⁯‮ obj1 = this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮.\u206F‏‭‭‪‬‫⁯‬⁮‌⁬⁮‏⁮‪⁭‭‭‪‪‪​⁬​‌‬‪‬‪‍‭‭‬‏​‬‮‫‫‮.\u202C⁭‌‫‪⁪⁫‮‪‍⁫⁯‫⁭⁬⁬⁪‍‍⁮⁮⁬⁬⁫⁯⁪‬‍‪‎⁯⁮‬⁯‫​‭‭‬⁫‮;
    IList list = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
    for (int index = 0; index != obj1.\u200E‪‌‮‪‏⁬‮‫​‪⁪‎⁫‏‭⁭⁭‍⁮‌‬⁪‪⁪‪‎⁭⁯⁭‌‭‪⁪‬‮‬‎​‬‮; ++index)
    {
      \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮ obj2 = new \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮(obj1.\u200E‪⁪‮⁮⁭⁯‏​‬⁫⁯‍‭‪‫⁫‏‌⁪⁬‪‫⁯‎⁪‌⁫‭⁫‫⁫‌​‭⁯‫​⁯‭‮(index));
      if (obj2.\u202B⁪‏‎‪‬‌⁪‪‏⁫‬‭‭⁭⁬‏‌‍​‮‮‭‎⁯​⁪‏⁫​⁯‎‬​‍⁪​⁮‮‪‮.Equals(_param1))
        list.Add((object) obj2);
    }
    if (list.Count < 1)
      return (\u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[]) null;
    \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[] objArray = new \u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮[list.Count];
    for (int index = 0; index < list.Count; ++index)
      objArray[index] = (\u200D⁫‍‮⁪⁮‌‮‪‎‫‭⁮⁪⁮‎‎‍⁬⁫‏⁫‮‮⁬‎‬​‭‏‏‎‬​‪‍‫‏‏‌‮) list[index];
    return objArray;
  }

  bool object.\u200F​⁮‫⁭‌‬‭‬‎‭‍‍‌‭⁮‫‪‫‬⁬‮‬‬‏‮‫⁬‏​⁮⁮‍​⁬⁮⁬‍‪‌‮(object _param1)
  {
    if (_param1 == this)
      return true;
    return _param1 is \u202E‫⁪‍‌⁫⁪⁮​⁫‭⁫⁮‍⁯‌‎⁮‫⁬⁮‌⁪‍‮‎​‮​​‫‌‫⁫‫‌‌⁮⁯⁬‮ obj && ((object) this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮).Equals((object) obj.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮);
  }

  int object.\u202A⁯⁬​⁫⁯‮‭‎⁭⁯‫⁭​​‌‍‪‍⁮‏⁭⁯⁯‮⁭​⁯⁪‫‪‏⁮‪‫‪⁮‌‌‭‮() => ((object) this.\u202E⁪⁪​‍‏⁬⁭‎‭‏⁮‫⁮‪‏‏‎⁮​‭⁬‏⁪​​⁬⁯⁫⁭‭⁫⁯‪‌⁫‪​‮⁭‮).GetHashCode();
}
