// Decompiled with JetBrains decompiler
// Type: IngressoVip.clsFuncoes
// Assembly: IngressoVip, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B67C4084-86FB-4B3F-B072-28F5697F4668
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Sality.ae-115d93ab771edf65ec0d5a50e51f618fc5159020bdb0762845d86c2a74f94f06.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;

namespace IngressoVip
{
  public class clsFuncoes
  {
    [DebuggerNonUserCode]
    public clsFuncoes()
    {
    }

    public string GeraTN(ref string strTN)
    {
      string str;
      try
      {
        str = Operators.CompareString(strTN, "0000000000000000", false) != 0 ? strTN : DateTime.Now.ToString("yyyyMMddHHssffff");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Console.WriteLine(ex.ToString());
        str = "0000000000000000";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public int ValidaTelefone(ref string strTelefone)
    {
      int num1;
      try
      {
        string Left = strTelefone.Substring(0, 3);
        num1 = Operators.CompareString(Left, "629", false) == 0 || Operators.CompareString(Left, "628", false) == 0 || Operators.CompareString(Left, "627", false) == 0 ? 1 : 0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num2 = (int) Interaction.MsgBox((object) ex.ToString());
        num1 = 0;
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    public int RemoveZeros(ref string valor, int qtd)
    {
      clsFuncoes clsFuncoes = new clsFuncoes();
      clsFuncoes.MsgConsole("VALOR DE valor em REMOVEZEROS " + valor);
      int length = checked (valor.Length - qtd);
      string str = valor.Substring(0, length);
      clsFuncoes.MsgConsole("VALOR DE strNum em REMOVEZEROS " + str);
      int integer = Conversions.ToInteger(str);
      clsFuncoes.MsgConsole("VALOR DE valorConv em REMOVEZEROS " + Conversions.ToString(integer));
      return integer;
    }

    public string ZerosEsquerda(int @int, int qtd)
    {
      string str = Conversions.ToString(@int);
      int num1 = qtd;
      int num2 = num1;
      int num3 = 0;
      while (num3 <= num2)
      {
        if (str.Length < num1)
          str = str.Insert(0, "0");
        checked { ++num3; }
      }
      return str;
    }

    public string Calcular_Check_Sum(string texto)
    {
      int num1 = 0;
      clsFuncoes clsFuncoes = new clsFuncoes();
      clsFuncoes.MsgConsole("VALOR DO PAYLOAD " + texto.ToString());
      try
      {
        short num2 = checked ((short) (texto.Length - 1));
        short startIndex = 0;
        while ((int) startIndex <= (int) num2)
        {
          checked { num1 += Strings.Asc(texto.Substring((int) startIndex, 1)); }
          if (num1 > 256)
            checked { num1 -= 256; }
          checked { ++startIndex; }
        }
        int num3 = checked (256 - num1);
        string str = Strings.StrDup(checked (3 - num3.ToString().Length), "0") + num3.ToString();
        clsFuncoes.MsgConsole("VALOR DO CALCULO DO CHECKSUM " + str.ToString());
        return str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num4 = (int) Interaction.MsgBox((object) ex.ToString());
        ProjectData.ClearProjectError();
      }
      return "";
    }

    public void MsgConsole(string texto) => Console.WriteLine("[" + DateTime.Now.ToString() + "] " + texto);

    public string NumeroToExtenso(string strValor)
    {
      string str = strValor.Substring(0, checked (strValor.Length - 2)) + "," + strValor.Substring(checked (strValor.Length - 2));
      string extenso;
      try
      {
        Decimal num1 = new Decimal(Conversions.ToDouble(str));
        if (Decimal.Compare(num1, 0M) == 0)
        {
          extenso = "Zero Reais";
        }
        else
        {
          int int32 = Convert.ToInt32(Decimal.Round(Decimal.Multiply(Decimal.Subtract(num1, Conversion.Int(num1)), 100M), MidpointRounding.ToEven));
          Decimal num2 = Conversion.Int(num1);
          extenso = int32 <= 0 ? (Decimal.Compare(num2, 1M) != 0 ? this.getInteger(num2) + "Reais" : "Um Real") : (Decimal.Compare(num2, 1M) != 0 ? (Decimal.Compare(num2, 0M) != 0 ? this.getInteger(num2) + " Reais e " + this.getDecimal(checked ((byte) int32)) + " centavos" : this.getDecimal(checked ((byte) int32)) + " centavos") : "Um Real e " + this.getDecimal(checked ((byte) int32)) + " centavos");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        extenso = "";
        ProjectData.ClearProjectError();
      }
      return extenso;
    }

    public string getDecimal(byte number)
    {
      string str;
      try
      {
        byte num = number;
        if (num == (byte) 0)
          str = "";
        else if (num >= (byte) 1 && num <= (byte) 19)
          str = new string[19]
          {
            "Um",
            "Dois",
            "Tres",
            "Quatro",
            "Cinco",
            "Seis",
            "Sete",
            "Oito",
            "Nove",
            "Dez",
            "Onze",
            "Doze",
            "Treze",
            "Quatorze",
            "Quinze",
            "Dezesseis",
            "Dezessete",
            "Dezoito",
            "Dezenove"
          }[checked ((int) number - 1)] + " ";
        else if (num >= (byte) 20 && num <= (byte) 99)
        {
          string[] strArray = new string[8]
          {
            "Vinte",
            "Trinta",
            "Quarenta",
            "Cinquenta",
            "Sessenta ",
            "Setenta",
            "Oitenta",
            "Noventa"
          };
          str = (int) number % 10 != 0 ? strArray[checked (unchecked ((int) number / 10) - 2)] + " e " + this.getDecimal(checked ((byte) unchecked ((int) number % 10))) + " " : strArray[checked (unchecked ((int) number / 10) - 2)] + " ";
        }
        else
          str = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public string getInteger(Decimal number)
    {
      string integer;
      try
      {
        number = Conversion.Int(number);
        Decimal d1_1 = number;
        if (Decimal.Compare(d1_1, 0M) < 0)
          integer = "-" + this.getInteger(Decimal.Negate(number));
        else if (Decimal.Compare(d1_1, 0M) == 0)
          integer = "";
        else if (Decimal.Compare(d1_1, 1M) >= 0 && Decimal.Compare(d1_1, 19M) <= 0)
          integer = new string[19]
          {
            "Um",
            "Dois",
            "Tres",
            "Quatro",
            "Cinco",
            "Seis",
            "Sete",
            "Oito",
            "Nove",
            "Dez",
            "Onze",
            "Doze",
            "Treze",
            "Quatorze",
            "Quinze",
            "Dezesseis",
            "Dezessete",
            "Dezoito",
            "Dezenove"
          }[Convert.ToInt32(Decimal.Subtract(number, 1M))] + " ";
        else if (Decimal.Compare(d1_1, 20M) >= 0 && Decimal.Compare(d1_1, 99M) <= 0)
        {
          string[] strArray = new string[8]
          {
            "Vinte",
            "Trinta",
            "Quarenta",
            "Cinquenta",
            "Sessenta",
            "Setenta",
            "Oitenta",
            "Noventa"
          };
          integer = Decimal.Compare(Decimal.Remainder(number, 10M), 0M) != 0 ? strArray[checked ((int) (unchecked (Convert.ToInt64(number) / 10L) - 2L))] + " e " + this.getInteger(Decimal.Remainder(number, 10M)) : strArray[checked ((int) (unchecked (Convert.ToInt64(number) / 10L) - 2L))] + " ";
        }
        else if (Decimal.Compare(d1_1, 100M) == 0)
          integer = "Cem ";
        else if (Decimal.Compare(d1_1, 101M) >= 0 && Decimal.Compare(d1_1, 999M) <= 0)
        {
          string[] strArray = new string[9]
          {
            "Cento",
            "Duzentos",
            "Trezentos",
            "Quatrocentos",
            "Quinhentos",
            "Seiscentos",
            "Setecentos",
            "Oitocentos",
            "Novecentos"
          };
          integer = Decimal.Compare(Decimal.Remainder(number, 100M), 0M) != 0 ? strArray[checked ((int) (unchecked (Convert.ToInt64(number) / 100L) - 1L))] + " e " + this.getInteger(Decimal.Remainder(number, 100M)) : strArray[checked ((int) (unchecked (Convert.ToInt64(number) / 100L) - 1L))] + " ";
        }
        else if (Decimal.Compare(d1_1, 1000M) >= 0 && Decimal.Compare(d1_1, 1999M) <= 0)
        {
          Decimal d1_2 = Decimal.Remainder(number, 1000M);
          integer = Decimal.Compare(d1_2, 0M) != 0 ? (Decimal.Compare(d1_2, 100M) > 0 ? "Mil e " + this.getInteger(Decimal.Remainder(number, 1000M)) : "Mil e " + this.getInteger(Decimal.Remainder(number, 1000M))) : "Mil ";
        }
        else if (Decimal.Compare(d1_1, 2000M) >= 0 && Decimal.Compare(d1_1, 999999M) <= 0)
        {
          Decimal d1_3 = Decimal.Remainder(number, 1000M);
          integer = Decimal.Compare(d1_3, 0M) != 0 ? (Decimal.Compare(d1_3, 100M) > 0 ? this.getInteger(new Decimal(Convert.ToInt64(number) / 1000L)) + "Mil e " + this.getInteger(Decimal.Remainder(number, 1000M)) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000L)) + "Mil e " + this.getInteger(Decimal.Remainder(number, 1000M))) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000L)) + "Mil ";
        }
        else if (Decimal.Compare(d1_1, 1000000M) >= 0 && Decimal.Compare(d1_1, 1999999M) <= 0)
        {
          Decimal d1_4 = Decimal.Remainder(number, 1000000M);
          integer = Decimal.Compare(d1_4, 0M) != 0 ? (Decimal.Compare(d1_4, 100M) > 0 ? this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000L)) + "Milhão e " + this.getInteger(Decimal.Remainder(number, 1000000M)) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000L)) + "Milhão e " + this.getInteger(Decimal.Remainder(number, 1000000M))) : "Um Milhão ";
        }
        else if (Decimal.Compare(d1_1, 2000000M) >= 0 && Decimal.Compare(d1_1, 999999999M) <= 0)
        {
          Decimal d1_5 = Decimal.Remainder(number, 1000000M);
          integer = Decimal.Compare(d1_5, 0M) != 0 ? (Decimal.Compare(d1_5, 100M) > 0 ? this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000L)) + "Milhões e " + this.getInteger(Decimal.Remainder(number, 1000000M)) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000L)) + "Milhões e " + this.getInteger(Decimal.Remainder(number, 1000000M))) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000L)) + "Milhões ";
        }
        else if (Decimal.Compare(d1_1, 1000000000M) >= 0 && Decimal.Compare(d1_1, 1999999999M) <= 0)
        {
          Decimal d1_6 = Decimal.Remainder(number, 1000000000M);
          integer = Decimal.Compare(d1_6, 0M) != 0 ? (Decimal.Compare(d1_6, 100M) > 0 ? this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000000L)) + "Bilhão e " + this.getInteger(Decimal.Remainder(number, 1000000000M)) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000000L)) + "Bilhão e " + this.getInteger(Decimal.Remainder(number, 1000000000M))) : "Um Bilhão ";
        }
        else
        {
          Decimal d1_7 = Decimal.Remainder(number, 1000000000M);
          integer = Decimal.Compare(d1_7, 0M) != 0 ? (Decimal.Compare(d1_7, 100M) > 0 ? this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000000L)) + "Bilhões e " + this.getInteger(Decimal.Remainder(number, 1000000000M)) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000000L)) + "Bilhões e " + this.getInteger(Decimal.Remainder(number, 1000000000M))) : this.getInteger(new Decimal(Convert.ToInt64(number) / 1000000000L)) + "Bilhões ";
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        integer = "";
        ProjectData.ClearProjectError();
      }
      return integer;
    }

    public int ContaPalavras(ref string strFrase)
    {
      int num;
      try
      {
        string Expression = strFrase;
        while (Expression.IndexOf(Strings.Space(2)) >= 0)
          Expression = Expression.Replace(Strings.Space(2), Strings.Space(1));
        num = Strings.Split(Expression, Strings.Space(1)).Length;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        num = 0;
        ProjectData.ClearProjectError();
      }
      return num;
    }
  }
}
