// Decompiled with JetBrains decompiler
// Type: _2012_D2.My.MyProject
// Assembly: 2012, Version=0.0.0.0, Culture=neutral
// MVID: F14E3608-B5E5-47D3-865B-A3D14BFA008F
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Zapchast.ei-53e510fe72a47dce4dbdf7bbe022901a01df6b189c750d49fbf7c68948f4697c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace _2012_D2.My
{
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [StandardModule]
  [HideModuleName]
  internal sealed class MyProject
  {
    private static readonly MyProject.ThreadSafeObjectProvider<MyComputer> m_ComputerObjectProvider = new MyProject.ThreadSafeObjectProvider<MyComputer>();
    private static readonly MyProject.ThreadSafeObjectProvider<MyApplication> m_AppObjectProvider = new MyProject.ThreadSafeObjectProvider<MyApplication>();
    private static readonly MyProject.ThreadSafeObjectProvider<User> m_UserObjectProvider = new MyProject.ThreadSafeObjectProvider<User>();
    private static MyProject.ThreadSafeObjectProvider<MyProject.MyForms> m_MyFormsObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyForms>();
    private static readonly MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices> m_MyWebServicesObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices>();

    [HelpKeyword("My.Computer")]
    internal static MyComputer Computer
    {
      [DebuggerHidden] get => MyProject.m_ComputerObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Application")]
    internal static MyApplication Application
    {
      [DebuggerHidden] get => MyProject.m_AppObjectProvider.GetInstance;
    }

    [HelpKeyword("My.User")]
    internal static User User
    {
      [DebuggerHidden] get => MyProject.m_UserObjectProvider.GetInstance;
    }

    [HelpKeyword("My.Forms")]
    internal static MyProject.MyForms Forms
    {
      [DebuggerHidden] get => MyProject.m_MyFormsObjectProvider.GetInstance;
    }

    [HelpKeyword("My.WebServices")]
    internal static MyProject.MyWebServices WebServices
    {
      [DebuggerHidden] get => MyProject.m_MyWebServicesObjectProvider.GetInstance;
    }

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class MyForms
    {
      public Fo2 m_Fo2;
      public Form1 m_Form1;
      [ThreadStatic]
      private static Hashtable m_FormBeingCreated;

      public Fo2 Fo2
      {
        get
        {
          this.m_Fo2 = MyProject.MyForms.Create__Instance__<Fo2>(this.m_Fo2);
          return this.m_Fo2;
        }
        set
        {
label_2:
          int num = 3;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_10;
              case 1:
                goto label_8;
              case 2:
                if (value != null)
                {
                  if (true)
                  {
                    num = 1;
                    continue;
                  }
                  goto label_11;
                }
                else
                  goto label_9;
              case 3:
                if (value == this.m_Fo2)
                {
                  num = 0;
                  continue;
                }
                goto case 2;
              default:
                goto label_2;
            }
          }
label_10:
          return;
label_11:
          return;
label_8:
          throw new ArgumentException("Property can only be set to Nothing");
label_9:
          this.Dispose__Instance__<Fo2>(ref this.m_Fo2);
        }
      }

      public Form1 Form1
      {
        get
        {
          this.m_Form1 = MyProject.MyForms.Create__Instance__<Form1>(this.m_Form1);
          return this.m_Form1;
        }
        set
        {
label_2:
          int num = 3;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_10;
              case 1:
                goto label_8;
              case 2:
                if (value != null)
                {
                  if (true)
                  {
                    num = 1;
                    continue;
                  }
                  goto label_11;
                }
                else
                  goto label_9;
              case 3:
                if (value == this.m_Form1)
                {
                  num = 0;
                  continue;
                }
                goto case 2;
              default:
                goto label_2;
            }
          }
label_10:
          return;
label_11:
          return;
label_8:
          throw new ArgumentException("Property can only be set to Nothing");
label_9:
          this.Dispose__Instance__<Form1>(ref this.m_Form1);
        }
      }

      [DebuggerHidden]
      private static T Create__Instance__<T>(T Instance) where T : Form, new()
      {
        if ((object) Instance != null && !Instance.IsDisposed)
          return Instance;
        if (MyProject.MyForms.m_FormBeingCreated != null)
        {
          if (MyProject.MyForms.m_FormBeingCreated.ContainsKey((object) typeof (T)))
            throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate"));
        }
        else
          MyProject.MyForms.m_FormBeingCreated = new Hashtable();
        MyProject.MyForms.m_FormBeingCreated.Add((object) typeof (T), (object) null);
        try
        {
          return new T();
        }
        catch (TargetInvocationException ex) when (
        {
          // ISSUE: unable to correctly present filter
          ProjectData.SetProjectError((Exception) ex);
          if (ex.InnerException != null)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          throw new InvalidOperationException(Utils.GetResourceString("WinForms_SeeInnerException", ex.InnerException.Message), ex.InnerException);
        }
        finally
        {
          MyProject.MyForms.m_FormBeingCreated.Remove((object) typeof (T));
        }
      }

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) where T : Form
      {
        instance.Dispose();
        instance = default (T);
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public MyForms()
      {
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (MyProject.MyForms);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    internal sealed class MyWebServices
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (MyProject.MyWebServices);

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override string ToString() => base.ToString();

      [DebuggerHidden]
      private static T Create__Instance__<T>(T instance) where T : new()
      {
label_2:
        int num = 3;
        T instance1;
        while (true)
        {
          switch (num)
          {
            case 0:
              instance1 = new T();
              num = 2;
              continue;
            case 1:
            case 2:
              goto label_7;
            case 3:
              if ((object) instance == null)
              {
                num = 0;
                continue;
              }
              goto label_6;
            default:
              goto label_2;
          }
        }
label_6:
        instance1 = instance;
label_7:
        return instance1;
      }

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) => instance = default (T);

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyWebServices()
      {
      }
    }

    [ComVisible(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class ThreadSafeObjectProvider<T> where T : new()
    {
      internal T GetInstance
      {
        [DebuggerHidden] get
        {
label_2:
          int num = 3;
          T threadStaticValue;
          while (true)
          {
            switch (num)
            {
              case 0:
                MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue = new T();
                num = 2;
                continue;
              case 1:
                goto label_8;
              case 2:
                threadStaticValue = MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue;
                num = 1;
                continue;
              case 3:
                if ((object) MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue == null)
                {
                  if (true)
                  {
                    num = 0;
                    continue;
                  }
                  goto case 0;
                }
                else
                  goto case 2;
              default:
                goto label_2;
            }
          }
label_8:
          return threadStaticValue;
        }
      }

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public ThreadSafeObjectProvider()
      {
      }
    }
  }
}
