// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: ILegacyEvidenceAdapt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C8AEC27-D027-41D5-B71C-E99019A8E594
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a42b3919356aa815980faeac0fc6222bd4a2d6f6cc5bdc01c5a5f55014a9c66e.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -512648022;
        JSONNode jsonNode;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -482262917)) % 6U)
          {
            case 0:
              int num3 = flag ? -1777887909 : (num3 = -706419137);
              num1 = num3 ^ (int) num2 * -386340258;
              continue;
            case 2:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = -1086254132;
              continue;
            case 3:
              goto label_1;
            case 4:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 568215930 ^ 1075971716;
              continue;
            case 5:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * 1207363987 ^ 1941076110;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
      }
      set
      {
        bool flag = this.m_Dict.ContainsKey(aKey);
label_1:
        int num1 = 383932650;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 622320483)) % 8U)
          {
            case 0:
              num1 = (int) num2 * 1616832472 ^ 1838523462;
              continue;
            case 1:
              int num3 = flag ? 940350019 : (num3 = 1745324425);
              num1 = num3 ^ (int) num2 * -322443338;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 4:
              this.m_Dict.Add(aKey, value);
              num1 = 1696731604;
              continue;
            case 5:
              num1 = (int) num2 * -991116118 ^ 2125834747;
              continue;
            case 6:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * -1015254936 ^ -628665773;
              continue;
            case 7:
              num1 = (int) num2 * 37936849 ^ -45535730;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 808821950;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 2069809427)) % 8U)
          {
            case 0:
              int num4 = !flag ? 1215403033 : (num4 = 414716317);
              num1 = num4 ^ (int) num2 * -774079777;
              continue;
            case 1:
              num1 = (int) num2 * 260776163 ^ -1743444305;
              continue;
            case 2:
              jsonNode = (JSONNode) null;
              num1 = 1063001132;
              continue;
            case 3:
              goto label_1;
            case 4:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 5:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * 1369044949 ^ -1266138042;
              continue;
            case 6:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -1428718775 ^ -1646359196;
              continue;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = 1467274123;
        }
label_12:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -756828449;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -2124751062)) % 6U)
          {
            case 0:
              num1 = (int) num2 * -1299864900 ^ -1424345783;
              continue;
            case 1:
              int num4 = flag ? 1933022924 : (num4 = 968579751);
              num1 = num4 ^ (int) num2 * -371781962;
              continue;
            case 2:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 3:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * 1779172765 ^ -808409743;
              continue;
            case 4:
              goto label_1;
            case 5:
              goto label_3;
            default:
              goto label_11;
          }
          flag = num3 != 0;
          num1 = -1231576017;
        }
label_3:
        return;
label_11:;
      }
    }

    public override int Count => this.m_Dict.Count;

    public override void Add(string aKey, JSONNode aItem)
    {
      if (JSONClass.\u200B‎‌⁭​⁬​⁪‫‫‎‭⁫‪⁯⁭‎‭‮‌⁪⁬‪‌‏‏⁯⁭‍​‬‭‌‎⁭⁯​‌‏‍‮(aKey))
        goto label_4;
label_1:
      int num1 = -1198176000;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -843374478)) % 12U)
        {
          case 0:
            int num3 = !flag ? -1006642189 : (num3 = -1668180598);
            num1 = num3 ^ (int) num2 * 2109292523;
            continue;
          case 1:
            this.m_Dict.Add(aKey, aItem);
            num1 = -933171143;
            continue;
          case 2:
            num1 = (int) num2 * 1661236481 ^ 850891987;
            continue;
          case 3:
            num1 = (int) num2 * 1224527253 ^ 2003725433;
            continue;
          case 4:
            num1 = -237094508;
            continue;
          case 5:
            num1 = (int) num2 * 2000047330 ^ 828380575;
            continue;
          case 6:
            goto label_4;
          case 7:
            goto label_3;
          case 8:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * -480285123 ^ -1176144153;
            continue;
          case 9:
            num1 = (int) num2 * 1074217339 ^ -114532319;
            continue;
          case 10:
            flag = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -788860887 ^ 1100266224;
            continue;
          case 11:
            goto label_1;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:
      return;
label_4:
      this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
      num1 = -951042729;
      goto label_2;
    }

    public override JSONNode Remove(string aKey)
    {
      if (this.m_Dict.ContainsKey(aKey))
        goto label_4;
label_1:
      int num1 = -1203602223;
label_2:
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -827639803)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = (int) num2 * -775648196 ^ -57500328;
            continue;
          case 2:
            goto label_4;
          case 4:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * 40689562 ^ -1986095140;
            continue;
          case 5:
            num1 = (int) num2 * 2037739848 ^ 1448577884;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return jsonNode1;
label_4:
      jsonNode2 = this.m_Dict[aKey];
      num1 = -1461461246;
      goto label_2;
    }

    public override JSONNode Remove(int aIndex)
    {
      if (aIndex < 0)
        goto label_4;
label_1:
      int num1 = -482218022;
label_2:
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1973531457)) % 6U)
        {
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 364802822 ^ 1196627735;
            continue;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = -1420345749;
            continue;
          case 4:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 228099856 ^ 700041071;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_3:
      int num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
      goto label_5;
label_9:
      return jsonNode;
label_4:
      num3 = 1;
label_5:
      num1 = num3 != 0 ? -412116745 : (num1 = -467741202);
      goto label_2;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
label_2:
        int num1 = 1399214475;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1099063483)) % 3U)
          {
            case 0:
              goto label_2;
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 1580266158 ^ 1108070897;
              continue;
            default:
              goto label_9;
          }
        }
      }
      catch
      {
label_6:
        int num3 = 1648605264;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1099063483)) % 3U)
          {
            case 0:
              goto label_6;
            case 1:
              jsonNode = (JSONNode) null;
              num3 = (int) num4 * -993379544 ^ 1629314215;
              continue;
            default:
              goto label_9;
          }
        }
      }
label_9:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
          if (num1 == 0)
            goto label_7;
label_1:
          int num2 = -1997833530;
label_2:
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ -1564145310)) % 21U)
            {
              case 0:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * 1514746235 ^ 582596530;
                continue;
              case 2:
                int num4;
                num2 = num4 = !enumerator.MoveNext() ? -1291154173 : (num4 = -994889272);
                continue;
              case 3:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                num2 = (int) num3 * -126813402 ^ -254784771;
                continue;
              case 5:
                this.\u003C\u003E2__current = N.Value;
                this.\u003C\u003E1__state = 1;
                childs = true;
                num2 = (int) num3 * 1669447532 ^ -392500036;
                continue;
              case 6:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * 1295239097 ^ 1540182297;
                continue;
              case 7:
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * -649073420 ^ -343282462;
                continue;
              case 8:
                num2 = (int) num3 * 1103448665 ^ 478685291;
                continue;
              case 9:
                int num5;
                num2 = num5 = num1 != 1 ? -831419 : (num5 = -2025132210);
                continue;
              case 10:
                num2 = (int) num3 * -467305195 ^ 1137207940;
                continue;
              case 11:
                N = enumerator.Current;
                num2 = -1672509295;
                continue;
              case 12:
              case 13:
                this.\u003C\u003E1__state = -3;
                num2 = -1680349036;
                continue;
              case 14:
                childs = false;
                num2 = (int) num3 * 1322955591 ^ -1883159443;
                continue;
              case 15:
                enumerator = this.m_Dict.GetEnumerator();
                num2 = (int) num3 * -1448097484 ^ 1826636367;
                continue;
              case 16:
                num2 = (int) num3 * -1525982481 ^ -1100408957;
                continue;
              case 17:
                goto label_1;
              case 18:
                goto label_18;
              case 19:
              case 20:
                goto label_7;
              default:
                goto label_20;
            }
          }
label_18:
          childs = false;
          goto label_20;
label_7:
          this.\u003C\u003E1__state = -1;
          num2 = -2032639123;
          goto label_2;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_20:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
label_1:
      int num1 = -621328533;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1427344494)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = "{";
            num1 = (int) num2 * -253334413 ^ 1405250547;
            continue;
          case 2:
            num1 = (int) num2 * -1531389354 ^ 145826201;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_11:
        int num3 = enumerator.MoveNext() ? -1487149543 : (num3 = -307393442);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1427344494)) % 7U)
          {
            case 0:
              int num5 = JSONClass.\u206F⁮‫‪‬‏‫⁯‫‮‬‎⁯‪​⁯‍⁪‌⁫‏​‬‏⁮⁪⁭‬⁯⁫​⁬⁫‭⁭‫‭⁪‬‍‮(str1) <= 2 ? 1337299346 : (num5 = 997393172);
              num3 = num5 ^ (int) num4 * 1421141357;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -617236536;
              continue;
            case 2:
              num3 = -1487149543;
              continue;
            case 3:
              str1 = JSONClass.\u200B‮⁮‫‌‍⁭‎⁫‮‮​‮‮‎⁫⁮⁭⁮⁯‪‎​⁪‬⁫‌⁪‏⁮‏‎‪⁮‬⁯​⁫‮(str1, ", ");
              num3 = (int) num4 * -605381743 ^ -254505516;
              continue;
            case 5:
              goto label_11;
            case 6:
              str1 = JSONClass.\u200C⁭⁮⁭⁫⁮⁫​​‭‭⁬‭⁯‮⁮‮‫‍‪⁪‌⁯⁪‮‪‪‪⁮‮‭‏‫⁮⁪‫⁭⁯⁭⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u206F‫⁮‎‬‭‎‫‍‮‫‪‪‪⁬‭‎‮​‮‌⁪⁬‮‫⁭‫‍‬⁫‌‪⁪⁮‫‮‮​‮‮((object) current.Value)
              });
              num3 = -278074820;
              continue;
            default:
              goto label_15;
          }
        }
      }
label_15:
      string str2 = JSONClass.\u200B‮⁮‫‌‍⁭‎⁫‮‮​‮‮‎⁫⁮⁭⁮⁯‪‎​⁪‬⁫‌⁪‏⁮‏‎‪⁮‬⁯​⁫‮(str1, "}");
label_16:
      int num6 = -1475619033;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ -1427344494)) % 3U)
        {
          case 0:
            goto label_16;
          case 2:
            num6 = (int) num7 * -238841506 ^ -1567971305;
            continue;
          default:
            goto label_19;
        }
      }
label_19:
      return str2;
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_4:
        int num1 = enumerator.MoveNext() ? 2022098740 : (num1 = 1530880136);
        KeyValuePair<string, JSONNode> current;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 129048946)) % 9U)
          {
            case 0:
              num1 = 2022098740;
              continue;
            case 1:
              str1 = JSONClass.\u200B‮⁮‫‌‍⁭‎⁫‮‮​‮‮‎⁫⁮⁭⁮⁯‪‎​⁪‬⁫‌⁪‏⁮‏‎‪⁮‬⁯​⁫‮(str1, ", ");
              num1 = (int) num2 * -1782910189 ^ -177294217;
              continue;
            case 2:
              int num3 = !flag ? -1080191390 : (num3 = -1649413315);
              num1 = num3 ^ (int) num2 * -415754379;
              continue;
            case 4:
              str1 = JSONClass.\u200C⁭⁮⁭⁫⁮⁫​​‭‭⁬‭⁯‮⁮‮‫‍‪⁪‌⁯⁪‮‪‪‪⁮‮‭‏‫⁮⁪‫⁭⁯⁭⁪‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u200B‮⁮‫‌‍⁭‎⁫‮‮​‮‮‎⁫⁮⁭⁮⁯‪‎​⁪‬⁫‌⁪‏⁮‏‎‪⁮‬⁯​⁫‮(aPrefix, "   "))
              });
              num1 = (int) num2 * 314460443 ^ 381469366;
              continue;
            case 5:
              str1 = JSONClass.\u202A⁭⁯⁫⁫​‎⁬‫⁫⁪‏⁮‌‭⁭‌‫‌‎⁯‪‮‪⁪‌​‍⁯‪⁪⁪‏⁭⁯⁯‮⁫⁪‬‮(str1, "\n", aPrefix, "   ");
              num1 = 2102258880;
              continue;
            case 6:
              flag = JSONClass.\u206F⁮‫‪‬‏‫⁯‫‮‬‎⁯‪​⁯‍⁪‌⁫‏​‬‏⁮⁪⁭‬⁯⁫​⁬⁫‭⁭‫‭⁪‬‍‮(str1) > 3;
              num1 = (int) num2 * -413558668 ^ -1459266774;
              continue;
            case 7:
              goto label_4;
            case 8:
              current = enumerator.Current;
              num1 = 2075464633;
              continue;
            default:
              goto label_12;
          }
        }
      }
label_12:
      string str2 = JSONClass.\u202A⁭⁯⁫⁫​‎⁬‫⁫⁪‏⁮‌‭⁭‌‫‌‎⁯‪‮‪⁪‌​‍⁯‪⁪⁪‏⁭⁯⁯‮⁫⁪‬‮(str1, "\n", aPrefix, "}");
label_13:
      int num4 = 1289179665;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ 129048946)) % 3U)
        {
          case 0:
            goto label_13;
          case 1:
            str3 = str2;
            num4 = (int) num5 * 519313494 ^ -1450857676;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -1041663910;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1493860283)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            JSONClass.\u206E​‎⁭⁬⁮‌‏‍‫⁪‬⁮‏‌‍⁪‬‏⁯‎⁬​‬⁯‍⁪‮⁮‬‌‫‏⁭‎⁭‮‏‎⁪‮(aWriter, (byte) 2);
            JSONClass.\u202C‭⁭⁪⁭‏⁮⁬​⁪⁪​‌‬⁭‎⁫⁬‍⁪‍‬⁭‍‪‪‎‬‫⁬‪‪⁭‏‏​‌⁯‏‍‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * 1354045849 ^ 1194876241;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_11:
        int num3 = enumerator.MoveNext() ? -1761141716 : (num3 = -979033877);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1493860283)) % 8U)
          {
            case 0:
              num3 = (int) num4 * -1488407343 ^ -310739358;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -513804863;
              continue;
            case 2:
              num3 = -1761141716;
              continue;
            case 3:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -1122673091 ^ 1859078407;
              continue;
            case 4:
              JSONClass.\u200B⁮‪​‍‎⁯⁮‭⁮‮⁯⁪⁪‬⁫‫‪‫‎‌​‏⁯⁫⁮​‏⁪‬‏‮⁫⁯‭‬⁯‌⁮⁮‮(aWriter, current);
              num3 = (int) num4 * -464079015 ^ 197251058;
              continue;
            case 5:
              num3 = (int) num4 * -1702562848 ^ 1375639637;
              continue;
            case 6:
              goto label_15;
            case 7:
              goto label_11;
            default:
              goto label_8;
          }
        }
label_15:
        return;
label_8:;
      }
    }

    static bool \u200B‎‌⁭​⁬​⁪‫‫‎‭⁫‪⁯⁭‎‭‮‌⁪⁬‪‌‏‏⁯⁭‍​‬‭‌‎⁭⁯​‌‏‍‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206F⁮‫‪‬‏‫⁯‫‮‬‎⁯‪​⁯‍⁪‌⁫‏​‬‏⁮⁪⁭‬⁯⁫​⁬⁫‭⁭‫‭⁪‬‍‮([In] string obj0) => obj0.Length;

    static string \u200B‮⁮‫‌‍⁭‎⁫‮‮​‮‮‎⁫⁮⁭⁮⁯‪‎​⁪‬⁫‌⁪‏⁮‏‎‪⁮‬⁯​⁫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F‫⁮‎‬‭‎‫‍‮‫‪‪‪⁬‭‎‮​‮‌⁪⁬‮‫⁭‫‍‬⁫‌‪⁪⁮‫‮‮​‮‮([In] object obj0) => obj0.ToString();

    static string \u200C⁭⁮⁭⁫⁮⁫​​‭‭⁬‭⁯‮⁮‮‫‍‪⁪‌⁯⁪‮‪‪‪⁮‮‭‏‫⁮⁪‫⁭⁯⁭⁪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁭⁯⁫⁫​‎⁬‫⁫⁪‏⁮‌‭⁭‌‫‌‎⁯‪‮‪⁪‌​‍⁯‪⁪⁪‏⁭⁯⁯‮⁫⁪‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206E​‎⁭⁬⁮‌‏‍‫⁪‬⁮‏‌‍⁪‬‏⁯‎⁬​‬⁯‍⁪‮⁮‬‌‫‏⁭‎⁭‮‏‎⁪‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u202C‭⁭⁪⁭‏⁮⁬​⁪⁪​‌‬⁭‎⁫⁬‍⁪‍‬⁭‍‪‪‎‬‫⁬‪‪⁭‏‏​‌⁯‏‍‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200B⁮‪​‍‎⁯⁮‭⁮‮⁯⁪⁪‬⁫‫‪‫‎‌​‏⁯⁫⁮​‏⁪‬‏‮⁫⁯‭‬⁯‌⁮⁮‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
