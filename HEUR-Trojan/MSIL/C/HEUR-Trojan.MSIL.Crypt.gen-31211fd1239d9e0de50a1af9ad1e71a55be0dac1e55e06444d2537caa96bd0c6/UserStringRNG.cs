// Decompiled with JetBrains decompiler
// Type: UserStringRNG
// Assembly: wacYTAgLgQAjexermaa, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8B2A0664-5AE5-48FF-9B05-FC8D65B8BF2C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-31211fd1239d9e0de50a1af9ad1e71a55be0dac1e55e06444d2537caa96bd0c6.exe

using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Digests;
using Org.BouncyCastle.Crypto.Prng;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

public sealed class UserStringRNG : RandomNumberGenerator
{
  private const int TrueInt = 1;
  private const int FalseInt = 0;
  private int disposed;
  private DigestRandomGenerator myRNG;

  public UserStringRNG(string userString)
  {
    this.myRNG = new DigestRandomGenerator((IDigest) new Sha256Digest());
    this.myRNG.AddSeedMaterial(Encoding.UTF8.GetBytes(userString));
  }

  public UserStringRNG(string userString, IDigest digest)
  {
    this.myRNG = new DigestRandomGenerator(digest);
    this.myRNG.AddSeedMaterial(Encoding.UTF8.GetBytes(userString));
  }

  public UserStringRNG(byte[] userBytes, IDigest digest)
  {
    this.myRNG = new DigestRandomGenerator(digest);
    this.myRNG.AddSeedMaterial(userBytes);
  }

  public override void GetBytes(byte[] data) => this.myRNG.NextBytes(data);

  public override void GetNonZeroBytes(byte[] data)
  {
    int index1 = 0;
    while (index1 < data.Length)
    {
      byte[] numArray = new byte[data.Length - index1];
      this.myRNG.NextBytes(numArray);
      for (int index2 = 0; index2 < numArray.Length; ++index2)
      {
        if (numArray[index2] != (byte) 0)
        {
          data[index1] = numArray[index2];
          ++index1;
        }
      }
    }
  }

  protected override void Dispose(bool disposing)
  {
    if (Interlocked.Exchange(ref this.disposed, 1) == 1)
      return;
    base.Dispose(disposing);
  }

  ~UserStringRNG() => this.Dispose(false);
}
