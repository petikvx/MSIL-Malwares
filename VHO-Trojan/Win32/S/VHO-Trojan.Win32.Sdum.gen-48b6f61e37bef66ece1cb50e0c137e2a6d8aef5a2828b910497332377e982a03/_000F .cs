// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Sdevmxl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F0B5D56E-2738-4851-005E-7CC3B980D8C1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-48b6f61e37bef66ece1cb50e0c137e2a6d8aef5a2828b910497332377e982a03.exe

using System;
using System.Collections.Generic;
using System.Reflection;

internal static class \u000F\u200A
{
  public static readonly Type \u0002;
  public static readonly Type \u0003;
  public static readonly Type \u0005;
  public static readonly Type \u0008;
  public static readonly Type \u0006;
  public static readonly Assembly \u000E;

  static \u000F\u200A()
  {
    Type type1 = typeof (object);
    if (true)
      goto label_4;
label_1:
    Type type2 = typeof (ValueType);
    if (true)
      goto label_5;
label_2:
    Type type3 = typeof (Enum);
    if (true)
      goto label_6;
label_3:
    \u000F\u200A.\u0008 = typeof (Nullable<>);
    \u000F\u200A.\u0006 = typeof (void);
    \u000F\u200A.\u000E = typeof (\u000F\u200A).Assembly;
    return;
label_6:
    \u000F\u200A.\u0005 = type3;
    goto label_3;
label_5:
    \u000F\u200A.\u0003 = type2;
    goto label_2;
label_4:
    \u000F\u200A.\u0002 = type1;
    goto label_1;
  }

  public static bool \u0002(Type _param0)
  {
    Type type1 = _param0;
    if (true)
      ;
    if (type1.IsGenericType)
    {
      Type type2 = _param0;
      if (true)
        ;
      if (!type2.IsGenericTypeDefinition)
      {
        Type type3 = _param0;
        if (true)
          ;
        return (object) type3.GetGenericTypeDefinition() == (object) \u000F\u200A.\u0008;
      }
    }
    return false;
  }

  public static Type \u0002(Type _param0)
  {
    while (_param0.HasElementType)
    {
      Type elementType = _param0.GetElementType();
      if (true)
        _param0 = elementType;
    }
    return _param0;
  }

  public static Type \u0003(Type _param0)
  {
    if (_param0.HasElementType && !_param0.IsArray)
    {
      Type elementType = _param0.GetElementType();
      if (true)
        _param0 = elementType;
    }
    return _param0;
  }

  public static Stack<\u000E\u200A> \u0002(Type _param0)
  {
    Stack<\u000E\u200A> objStack1 = new Stack<\u000E\u200A>();
    if (true)
      goto label_2;
label_1:
    Type type1 = _param0;
    Type type2;
    if (true)
      type2 = type1;
    Stack<\u000E\u200A> objStack2;
    while (true)
    {
      \u000E\u200A obj1;
      if (type2.IsArray)
      {
        Stack<\u000E\u200A> objStack3 = objStack2;
        obj1 = new \u000E\u200A();
        ref \u000E\u200A local = ref obj1;
        if (true)
          goto label_7;
label_6:
        obj1.\u0003 = type2.GetArrayRank();
        \u000E\u200A obj2 = obj1;
        objStack3.Push(obj2);
        goto label_12;
label_7:
        local.\u0002 = 0;
        goto label_6;
      }
      else if (type2.IsByRef)
      {
        Stack<\u000E\u200A> objStack4 = objStack2;
        obj1 = new \u000E\u200A();
        obj1.\u0002 = 2;
        \u000E\u200A obj3 = obj1;
        objStack4.Push(obj3);
      }
      else if (type2.IsPointer)
      {
        Stack<\u000E\u200A> objStack5 = objStack2;
        obj1 = new \u000E\u200A();
        obj1.\u0002 = 1;
        \u000E\u200A obj4 = obj1;
        objStack5.Push(obj4);
      }
      else
        break;
label_12:
      type2 = type2.GetElementType();
    }
    return objStack2;
label_2:
    objStack2 = objStack1;
    goto label_1;
  }

  public static Stack<\u000E\u200A> \u0002(string _param0)
  {
    string str1 = _param0;
    if (true)
      goto label_2;
label_1:
    Stack<\u000E\u200A> objStack1 = new Stack<\u000E\u200A>();
    Stack<\u000E\u200A> objStack2;
    if (true)
      objStack2 = objStack1;
    string str2;
    while (true)
    {
      string str3;
      do
      {
        \u000E\u200A obj1;
        while (!str2.EndsWith(\u0008\u2008\u2000.\u0002(-1247411612), StringComparison.Ordinal))
        {
          if (str2.EndsWith(\u0008\u2008\u2000.\u0002(-1247411604), StringComparison.Ordinal))
          {
            Stack<\u000E\u200A> objStack3 = objStack2;
            obj1 = new \u000E\u200A();
            obj1.\u0002 = 1;
            \u000E\u200A obj2 = obj1;
            objStack3.Push(obj2);
            str2 = str2.Substring(0, str2.Length - 1);
          }
          else if (str2.EndsWith(\u0008\u2008\u2000.\u0002(-1247411628), StringComparison.Ordinal))
          {
            Stack<\u000E\u200A> objStack4 = objStack2;
            obj1 = new \u000E\u200A();
            obj1.\u0002 = 0;
            obj1.\u0003 = 1;
            \u000E\u200A obj3 = obj1;
            objStack4.Push(obj3);
            str2 = str2.Substring(0, str2.Length - 2);
          }
          else
          {
            if (!str2.EndsWith(\u0008\u2008\u2000.\u0002(-1247411645), StringComparison.Ordinal))
              return objStack2;
            int num = 1;
            int length = -1;
            for (int index = str2.Length - 2; index >= 0; --index)
            {
              switch (str2[index])
              {
                case ',':
                  ++num;
                  break;
                case '[':
                  length = index;
                  index = -1;
                  break;
                default:
                  throw new InvalidOperationException(\u0008\u2008\u2000.\u0002(-1247411638));
              }
            }
            str2 = length >= 0 ? str2.Substring(0, length) : throw new InvalidOperationException(\u0008\u2008\u2000.\u0002(-1247411660));
            Stack<\u000E\u200A> objStack5 = objStack2;
            obj1 = new \u000E\u200A();
            obj1.\u0002 = 0;
            obj1.\u0003 = num;
            \u000E\u200A obj4 = obj1;
            objStack5.Push(obj4);
          }
        }
        Stack<\u000E\u200A> objStack6 = objStack2;
        obj1 = new \u000E\u200A();
        ref \u000E\u200A local = ref obj1;
        if (true)
          goto label_7;
label_6:
        \u000E\u200A obj5 = obj1;
        objStack6.Push(obj5);
        str3 = str2.Substring(0, str2.Length - 1);
        continue;
label_7:
        local.\u0002 = 2;
        goto label_6;
      }
      while (false);
      str2 = str3;
    }
label_2:
    str2 = str1;
    goto label_1;
  }

  public static Type \u0002(Type _param0, Stack<\u000E\u200A> _param1)
  {
    Type type1 = _param0;
    Type type2;
    if (true)
      type2 = type1;
    while (_param1.Count > 0)
    {
      \u000E\u200A obj1 = _param1.Pop();
      if (true)
        goto label_5;
label_3:
      \u000E\u200A obj2;
      int num1 = obj2.\u0002;
      if (true)
        goto label_6;
label_4:
      int num2;
      switch (num2)
      {
        case 0:
          type2 = obj2.\u0003 != 1 ? type2.MakeArrayType(obj2.\u0003) : type2.MakeArrayType();
          continue;
        case 1:
          type2 = type2.MakePointerType();
          continue;
        case 2:
          type2 = type2.MakeByRefType();
          continue;
        default:
          continue;
      }
label_6:
      num2 = num1;
      goto label_4;
label_5:
      obj2 = obj1;
      goto label_3;
    }
    return type2;
  }

  public static int \u0002(Type _param0)
  {
    Dictionary<Type, int> dictionary = \u000F\u200A.\u0002.\u0002;
    Type key = _param0;
    if (true)
      ;
    int num1;
    ref int local = ref num1;
    if (dictionary.TryGetValue(key, out local))
    {
      int num2 = num1;
      return false ? num2 : num2;
    }
    Type type = _param0;
    if (true)
      ;
    if (type.IsArray)
      return 1;
    if (!_param0.IsValueType)
      return 2;
    if (_param0.IsSubclassOf(\u000F\u200A.\u0005))
      return 15;
    return \u000F\u200A.\u0002(_param0) ? 9 : 4;
  }

  private static class \u0002
  {
    public static readonly Dictionary<Type, int> \u0002;

    static \u0002()
    {
      Dictionary<Type, int> dictionary = new Dictionary<Type, int>();
      dictionary.Add(typeof (object), 8);
      dictionary.Add(typeof (byte), 21);
      dictionary.Add(typeof (sbyte), 19);
      dictionary.Add(typeof (short), 6);
      dictionary.Add(typeof (int), 16);
      dictionary.Add(typeof (long), 26);
      dictionary.Add(typeof (ushort), 25);
      dictionary.Add(typeof (uint), 10);
      dictionary.Add(typeof (ulong), 23);
      dictionary.Add(typeof (IntPtr), 24);
      dictionary.Add(typeof (UIntPtr), 7);
      dictionary.Add(typeof (float), 0);
      dictionary.Add(typeof (double), 14);
      dictionary.Add(typeof (bool), 20);
      dictionary.Add(typeof (char), 11);
      dictionary.Add(typeof (string), 22);
      if (false)
        return;
      \u000F\u200A.\u0002.\u0002 = dictionary;
    }
  }
}
