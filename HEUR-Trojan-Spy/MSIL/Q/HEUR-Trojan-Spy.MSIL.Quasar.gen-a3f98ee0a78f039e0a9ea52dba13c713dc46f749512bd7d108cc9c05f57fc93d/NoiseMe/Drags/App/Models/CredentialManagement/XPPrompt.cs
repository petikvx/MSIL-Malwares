// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.CredentialManagement.XPPrompt
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Text;

namespace NoiseMe.Drags.App.Models.CredentialManagement
{
  public class XPPrompt : BaseCredentialsPrompt
  {
    private string _target;
    private Bitmap _banner;

    public string Target
    {
      get
      {
        this.CheckNotDisposed();
        return this._target;
      }
      set
      {
        this.CheckNotDisposed();
        this._target = !string.IsNullOrEmpty(value) ? value : throw new ArgumentNullException(nameof (value));
      }
    }

    public Bitmap Banner
    {
      get
      {
        this.CheckNotDisposed();
        return this._banner;
      }
      set
      {
        this.CheckNotDisposed();
        if (this._banner != null)
          this._banner.Dispose();
        this._banner = value;
      }
    }

    public bool CompleteUsername
    {
      get
      {
        this.CheckNotDisposed();
        return (2048 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 2048);
      }
    }

    public bool DoNotPersist
    {
      get
      {
        this.CheckNotDisposed();
        return (2 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 2);
      }
    }

    public bool ExcludeCertificates
    {
      get
      {
        this.CheckNotDisposed();
        return (8 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 8);
      }
    }

    public bool ExpectConfirmation
    {
      get
      {
        this.CheckNotDisposed();
        return (131072 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 131072);
      }
    }

    public bool IncorrectPassword
    {
      get
      {
        this.CheckNotDisposed();
        return (1 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 1);
      }
    }

    public bool Persist
    {
      get
      {
        this.CheckNotDisposed();
        return (4096 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 4096);
      }
    }

    public bool RequestAdministrator
    {
      get
      {
        this.CheckNotDisposed();
        return (4 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 4);
      }
    }

    public bool RequireCertificate
    {
      get
      {
        this.CheckNotDisposed();
        return (16 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 16);
      }
    }

    public bool RequireSmartCard
    {
      get
      {
        this.CheckNotDisposed();
        return (256 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 256);
      }
    }

    public bool UsernameReadOnly
    {
      get
      {
        this.CheckNotDisposed();
        return (1048576 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 1048576);
      }
    }

    public bool ValidateUsername
    {
      get
      {
        this.CheckNotDisposed();
        return (1024 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 1024);
      }
    }

    public override bool ShowSaveCheckBox
    {
      get
      {
        this.CheckNotDisposed();
        return (64 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 64);
      }
    }

    public override bool GenericCredentials
    {
      get
      {
        this.CheckNotDisposed();
        return (262144 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 262144);
      }
    }

    public bool AlwaysShowUI
    {
      get
      {
        this.CheckNotDisposed();
        return (128 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 128);
      }
    }

    protected override NativeMethods.CREDUI_INFO CreateCREDUI_INFO(IntPtr owner) => base.CreateCREDUI_INFO(owner) with
    {
      hbmBanner = this.Banner == null ? IntPtr.Zero : this.Banner.GetHbitmap()
    };

    public override DialogResult ShowDialog(IntPtr owner)
    {
      this.CheckNotDisposed();
      NativeMethods.CREDUI_INFO creduiInfo = this.CreateCREDUI_INFO(owner);
      StringBuilder userName = new StringBuilder(1000);
      StringBuilder password = new StringBuilder(1000);
      bool saveChecked = this.SaveChecked;
      if (string.IsNullOrEmpty(this.Target))
        throw new InvalidOperationException("Target must always be specified.");
      if (this.AlwaysShowUI && !this.GenericCredentials)
        throw new InvalidOperationException("AlwaysShowUI must be specified with GenericCredentials property.");
      switch (NativeMethods.CredUIPromptForCredentials(ref creduiInfo, this.Target, IntPtr.Zero, this.ErrorCode, userName, 513, password, 256, ref saveChecked, this.DialogFlags))
      {
        case NativeMethods.CredUIReturnCodes.ERROR_INVALID_PARAMETER:
        case NativeMethods.CredUIReturnCodes.ERROR_INSUFFICIENT_BUFFER:
        case NativeMethods.CredUIReturnCodes.ERROR_BAD_ARGUMENTS:
        case NativeMethods.CredUIReturnCodes.ERROR_INVALID_FLAGS:
        case NativeMethods.CredUIReturnCodes.ERROR_NOT_FOUND:
        case NativeMethods.CredUIReturnCodes.ERROR_NO_SUCH_LOGON_SESSION:
        case NativeMethods.CredUIReturnCodes.ERROR_INVALID_ACCOUNT_NAME:
          throw new InvalidOperationException("Invalid properties were specified.", (Exception) new Win32Exception(Marshal.GetLastWin32Error()));
        case NativeMethods.CredUIReturnCodes.ERROR_CANCELLED:
          return DialogResult.Cancel;
        default:
          this.Username = userName.ToString();
          this.Password = password.ToString();
          if (password.Length > 0)
            password.Remove(0, password.Length);
          return DialogResult.OK;
      }
    }
  }
}
