// Decompiled with JetBrains decompiler
// Type: mmxAH.GlobalActhions
// Assembly: IAsyncLocalValue, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 5C4F3FBF-C751-4B18-BBEA-B1DDBC6F76B9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqk-374874898c5386561d60c3fae0482d1caee783f1096dda6742b1c073175a0a14.exe

using System;
using System.Collections.Generic;

namespace mmxAH
{
  public class GlobalActhions
  {
    private GameEngine en;
    private Func rp;
    private Investigator invest;

    public GlobalActhions(GameEngine eng) => this.en = eng;

    public void ReturnToArchem(short ow, Func retFunc, byte inv = 40)
    {
      this.rp = retFunc;
      if (inv == (byte) 40)
        inv = this.en.clock.GetCurPlayer();
      this.invest = this.en.ActiveInvistigators[(int) inv];
      List<short> shortList = new List<short>();
      foreach (GatePrototype openGate in this.en.openGates)
      {
        if ((int) openGate.GetOW() == (int) ow)
          shortList.Add(openGate.GetArchemLoc());
      }
      if (shortList.Count == 0)
        new EffLitas(this.en).Execute(this.rp, inv);
      else if (shortList.Count == 1)
      {
        this.RetToArchem2(shortList[0]);
      }
      else
      {
        string question = this.invest.GetTitle() + "  " + this.en.sysstr.GetString(SSType.MonsterMovePromt1) + "  " + this.invest.GetPronaun() + "  " + this.en.sysstr.GetString(SSType.MonsterMovePromt2);
        List<IOOption> opts = new List<IOOption>();
        foreach (short num in shortList)
          opts.Add((IOOption) new IOOptionWithParam(this.en.locs[(int) num].GetTitle(), new FuncWithParam(this.RetToArchem2), num));
        this.en.io.StartChoose(opts, question, this.en.sysstr.GetString(SSType.ChooseActhionButton));
      }
    }

    private void RetToArchem2(short loc)
    {
      this.invest.SetLocathion(loc);
      this.en.io.PrintToLog(this.invest.GetTitle(), isBold: true, isItalic: true);
      this.en.io.PrintToLog(" " + this.en.sysstr.GetString(SSType.ReturnToArchem) + " ");
      this.en.io.PrintToLog(this.en.locs[(int) loc].GetTitle() + "." + Environment.NewLine, isItalic: true);
      this.invest.isExploredToken = true;
      this.invest.isCanMove = false;
      this.invest.isMonsterImunity = true;
      this.rp();
    }

    public void Awekeen()
    {
    }

    public void SetupMythos() => this.en.clock.EndTurn();

    public void MonsterSurge(short startLoc) => new MonsterSurgeActhion(this.en, startLoc).Execute();
  }
}
