// Decompiled with JetBrains decompiler
// Type: Mooreming.Droid
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.Threading;

namespace Mooreming
{
  internal abstract class Droid : IDroid, IComparable
  {
    protected string material;
    protected string model;
    protected string color;
    protected Decimal baseCost;
    protected Decimal totalCost;
    protected const int SLEEP_TIME = 5;

    public Decimal TotalCost
    {
      get => this.totalCost;
      set => this.totalCost = value;
    }

    public Droid(string Material, string Model, string Color)
    {
      this.material = Material;
      this.model = Model;
      this.color = Color;
    }

    public Droid()
    {
      this.material = this.RandomMaterial();
      this.color = this.RandomColor();
    }

    protected virtual void CalculateBaseCost()
    {
      string material = this.material;
      if (!(material == "Carbonite"))
      {
        if (!(material == "Vanadium"))
        {
          if (material == "Quadranium")
            this.baseCost = 150.00M;
          else
            this.baseCost = 50.00M;
        }
        else
          this.baseCost = 120.00M;
      }
      else
        this.baseCost = 100.00M;
    }

    public abstract void CalculateTotalCost();

    public override string ToString() => "Material: " + this.material + Environment.NewLine + "Model: " + this.model + Environment.NewLine + "Color: " + this.color + Environment.NewLine;

    private string RandomMaterial()
    {
      Random random = new Random();
      Thread.Sleep(5);
      switch (random.Next(0, 3))
      {
        case 0:
          return "Carbonite";
        case 1:
          return "Vanadium";
        case 2:
          return "Quadranium";
        default:
          return "Material Error";
      }
    }

    private string RandomColor()
    {
      Random random = new Random();
      Thread.Sleep(5);
      switch (random.Next(0, 3))
      {
        case 0:
          return "Bronze";
        case 1:
          return "Silver";
        case 2:
          return "Gold";
        default:
          return "Color Error";
      }
    }

    public int CompareTo(object obj) => this.totalCost.CompareTo(((Droid) obj).totalCost);
  }
}
