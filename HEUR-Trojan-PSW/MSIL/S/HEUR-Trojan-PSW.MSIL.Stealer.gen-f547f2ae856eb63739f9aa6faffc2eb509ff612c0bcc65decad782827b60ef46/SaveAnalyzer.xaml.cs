// Decompiled with JetBrains decompiler
// Type: RemnantSaveManager.SaveAnalyzer
// Assembly: RemnantSaveManager, Version=1.99.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 99FD4FCE-DABC-49CD-8C69-1190642E25EA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f547f2ae856eb63739f9aa6faffc2eb509ff612c0bcc65decad782827b60ef46.exe

using RemnantSaveManager.Properties;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;

namespace RemnantSaveManager
{
  public partial class SaveAnalyzer : Window, IComponentConnector
  {
    private MainWindow mainWindow;
    private List<RemnantCharacter> listCharacters;
    private SaveAnalyzer.AnalyzerColor analyzerColor;
    private Dictionary<string, Dictionary<string, double>> columnWidths;
    private bool initialized;
    internal System.Windows.Controls.ComboBox cmbCharacter;
    internal System.Windows.Controls.TabControl tabAnalyzer;
    internal System.Windows.Controls.DataGrid dgCampaign;
    internal System.Windows.Controls.DataGrid dgAdventure;
    internal System.Windows.Controls.TextBox txtMissingItems;
    internal System.Windows.Controls.TreeView treeMissingItems;
    internal System.Windows.Controls.Label lblCredits;
    internal Slider sliderSize;
    internal System.Windows.Controls.Button btnExport;
    internal System.Windows.Controls.Button btnCopy;
    private bool _contentLoaded;

    public bool ActiveSave { get; set; }

    public SaveAnalyzer(MainWindow mw)
    {
      this.initialized = false;
      this.InitializeComponent();
      this.mainWindow = mw;
      this.listCharacters = new List<RemnantCharacter>();
      this.cmbCharacter.ItemsSource = (IEnumerable) this.listCharacters;
      this.analyzerColor = new SaveAnalyzer.AnalyzerColor();
      this.analyzerColor.backgroundColor = (Color) ColorConverter.ConvertFromString("#343a40");
      this.analyzerColor.textColor = (Color) ColorConverter.ConvertFromString("#f8f9fa");
      this.analyzerColor.headerBackgroundColor = (Color) ColorConverter.ConvertFromString("#70a1ff");
      this.analyzerColor.borderColor = (Color) ColorConverter.ConvertFromString("#dddddd");
      this.dgCampaign.VerticalGridLinesBrush = (Brush) new SolidColorBrush(this.analyzerColor.borderColor);
      this.dgCampaign.HorizontalGridLinesBrush = (Brush) new SolidColorBrush(this.analyzerColor.borderColor);
      this.dgCampaign.RowBackground = (Brush) new SolidColorBrush(this.analyzerColor.backgroundColor);
      this.dgCampaign.RowHeaderStyle = new Style(typeof (DataGridRowHeader));
      this.dgCampaign.RowHeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BackgroundProperty, (object) new SolidColorBrush(this.analyzerColor.backgroundColor)));
      this.dgCampaign.ColumnHeaderStyle = new Style(typeof (DataGridColumnHeader));
      this.dgCampaign.ColumnHeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BackgroundProperty, (object) new SolidColorBrush(this.analyzerColor.headerBackgroundColor)));
      this.dgAdventure.VerticalGridLinesBrush = (Brush) new SolidColorBrush(this.analyzerColor.borderColor);
      this.dgAdventure.HorizontalGridLinesBrush = (Brush) new SolidColorBrush(this.analyzerColor.borderColor);
      this.dgAdventure.RowBackground = (Brush) new SolidColorBrush(this.analyzerColor.backgroundColor);
      this.dgAdventure.RowHeaderStyle = new Style(typeof (DataGridRowHeader));
      this.dgAdventure.RowHeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BackgroundProperty, (object) new SolidColorBrush(this.analyzerColor.backgroundColor)));
      this.dgAdventure.ColumnHeaderStyle = new Style(typeof (DataGridColumnHeader));
      this.dgAdventure.ColumnHeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BackgroundProperty, (object) new SolidColorBrush(this.analyzerColor.headerBackgroundColor)));
      this.lblCredits.Content = (object) "Thanks to /u/hzla00 for the original online implementation.\n\nLots of code used here was adapted from his original javascript (as was the styling!).";
      this.txtMissingItems.BorderThickness = new Thickness(0.0);
      this.columnWidths = new Dictionary<string, Dictionary<string, double>>();
      this.columnWidths.Add(this.dgCampaign.Name, new Dictionary<string, double>());
      this.columnWidths.Add(this.dgAdventure.Name, new Dictionary<string, double>());
      this.sliderSize.Value = Settings.Default.AnalyzerFontSize;
      this.treeMissingItems.FontSize = this.sliderSize.Value - 4.0;
      this.lblCredits.FontSize = this.sliderSize.Value;
      this.initialized = true;
      TreeViewItem newItem1 = new TreeViewItem();
      newItem1.Header = (object) "Normal";
      newItem1.Foreground = this.treeMissingItems.Foreground;
      newItem1.IsExpanded = Settings.Default.NormalExpanded;
      newItem1.Expanded += new RoutedEventHandler(this.GameType_CollapsedExpanded);
      newItem1.Collapsed += new RoutedEventHandler(this.GameType_CollapsedExpanded);
      newItem1.Tag = (object) "mode";
      TreeViewItem newItem2 = new TreeViewItem();
      newItem2.Header = (object) "Hardcore";
      newItem2.Foreground = this.treeMissingItems.Foreground;
      newItem2.IsExpanded = Settings.Default.HardcoreExpanded;
      newItem2.Expanded += new RoutedEventHandler(this.GameType_CollapsedExpanded);
      newItem2.Collapsed += new RoutedEventHandler(this.GameType_CollapsedExpanded);
      newItem2.Tag = (object) "mode";
      TreeViewItem newItem3 = new TreeViewItem();
      newItem3.Header = (object) "Survival";
      newItem3.Foreground = this.treeMissingItems.Foreground;
      newItem3.IsExpanded = Settings.Default.SurvivalExpanded;
      newItem3.Expanded += new RoutedEventHandler(this.GameType_CollapsedExpanded);
      newItem3.Collapsed += new RoutedEventHandler(this.GameType_CollapsedExpanded);
      newItem3.Tag = (object) "mode";
      this.treeMissingItems.Items.Add((object) newItem1);
      this.treeMissingItems.Items.Add((object) newItem2);
      this.treeMissingItems.Items.Add((object) newItem3);
    }

    private void GameType_CollapsedExpanded(object sender, RoutedEventArgs e)
    {
      TreeViewItem treeViewItem = (TreeViewItem) sender;
      if (treeViewItem.Header.ToString().Contains("Normal"))
        Settings.Default.NormalExpanded = treeViewItem.IsExpanded;
      else if (treeViewItem.Header.ToString().Contains("Hardcore"))
        Settings.Default.HardcoreExpanded = treeViewItem.IsExpanded;
      else if (treeViewItem.Header.ToString().Contains("Survival"))
        Settings.Default.SurvivalExpanded = treeViewItem.IsExpanded;
      Settings.Default.Save();
    }

    public void LoadData(List<RemnantCharacter> chars)
    {
      int num = this.cmbCharacter.SelectedIndex;
      this.listCharacters = chars;
      this.cmbCharacter.ItemsSource = (IEnumerable) this.listCharacters;
      if (num == -1 && this.listCharacters.Count > 0)
        num = 0;
      if (num > -1 && this.listCharacters.Count > num)
        this.cmbCharacter.SelectedIndex = num;
      this.cmbCharacter.IsEnabled = this.listCharacters.Count > 1;
    }

    private void Window_Closing(object sender, CancelEventArgs e)
    {
      if (!this.ActiveSave)
        return;
      e.Cancel = true;
      this.Hide();
    }

    private void CmbCharacter_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
      if (this.cmbCharacter.SelectedIndex == -1 && this.listCharacters.Count > 0 || this.cmbCharacter.Items.Count <= 0 || this.cmbCharacter.SelectedIndex <= -1)
        return;
      this.dgCampaign.ItemsSource = (IEnumerable) this.listCharacters[this.cmbCharacter.SelectedIndex].CampaignEvents;
      if (this.listCharacters[this.cmbCharacter.SelectedIndex].AdventureEvents.Count > 0)
      {
        ((UIElement) this.tabAnalyzer.Items[1]).IsEnabled = true;
        this.dgAdventure.ItemsSource = (IEnumerable) this.listCharacters[this.cmbCharacter.SelectedIndex].AdventureEvents;
      }
      else
      {
        ((UIElement) this.tabAnalyzer.Items[1]).IsEnabled = false;
        if (this.tabAnalyzer.SelectedIndex == 1)
          this.tabAnalyzer.SelectedIndex = 0;
      }
      this.txtMissingItems.Text = string.Join<RemnantItem>("\n", (IEnumerable<RemnantItem>) this.listCharacters[this.cmbCharacter.SelectedIndex].GetMissingItems());
      foreach (ItemsControl itemsControl in (IEnumerable) this.treeMissingItems.Items)
        itemsControl.Items.Clear();
      foreach (RemnantItem missingItem in this.listCharacters[this.cmbCharacter.SelectedIndex].GetMissingItems())
      {
        TreeViewItem newItem1 = new TreeViewItem();
        newItem1.Header = (object) missingItem.ItemName;
        if (!missingItem.ItemNotes.Equals(""))
          newItem1.ToolTip = (object) missingItem.ItemNotes;
        newItem1.Foreground = this.treeMissingItems.Foreground;
        newItem1.ContextMenu = this.treeMissingItems.Resources[(object) "ItemContext"] as System.Windows.Controls.ContextMenu;
        newItem1.Tag = (object) "item";
        TreeViewItem treeViewItem1 = (TreeViewItem) this.treeMissingItems.Items[(int) missingItem.ItemMode];
        TreeViewItem newItem2 = (TreeViewItem) null;
        foreach (TreeViewItem treeViewItem2 in (IEnumerable) treeViewItem1.Items)
        {
          if (treeViewItem2.Header.ToString().Equals(missingItem.ItemType))
          {
            newItem2 = treeViewItem2;
            break;
          }
        }
        if (newItem2 == null)
        {
          newItem2 = new TreeViewItem();
          newItem2.Header = (object) missingItem.ItemType;
          newItem2.Foreground = this.treeMissingItems.Foreground;
          newItem2.IsExpanded = true;
          newItem2.ContextMenu = this.treeMissingItems.Resources[(object) "ItemGroupContext"] as System.Windows.Controls.ContextMenu;
          newItem2.Tag = (object) "type";
          ((ItemsControl) this.treeMissingItems.Items[(int) missingItem.ItemMode]).Items.Add((object) newItem2);
        }
        newItem2.Items.Add((object) newItem1);
      }
    }

    private void dgBeginningEdit(object sender, DataGridBeginningEditEventArgs e) => e.Cancel = true;

    private void logMessage(string message) => this.mainWindow.logMessage(this.Title + ": " + message);

    private void autoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
    {
      double num = this.sliderSize.Value;
      e.Column.HeaderStyle = new Style(typeof (DataGridColumnHeader));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BackgroundProperty, (object) new SolidColorBrush(this.analyzerColor.headerBackgroundColor)));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.ForegroundProperty, (object) new SolidColorBrush(Colors.White)));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.PaddingProperty, (object) new Thickness(8.0, 4.0, 8.0, 4.0)));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.FontSizeProperty, (object) num));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.FontWeightProperty, (object) FontWeights.Bold));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BorderBrushProperty, (object) new SolidColorBrush(this.analyzerColor.borderColor)));
      e.Column.HeaderStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BorderThicknessProperty, (object) new Thickness(1.0)));
      e.Column.CellStyle = new Style(typeof (System.Windows.Controls.DataGridCell));
      e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.BackgroundProperty, (object) new SolidColorBrush(this.analyzerColor.backgroundColor)));
      e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.PaddingProperty, (object) new Thickness(4.0)));
      if (e.Column.Header.Equals((object) "MissingItems"))
      {
        e.Column.Header = (object) "Missing Items";
        e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.FontSizeProperty, (object) (num / 3.0 * 2.0)));
        if (Settings.Default.MissingItemColor.Equals("Red"))
          e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.ForegroundProperty, (object) new SolidColorBrush(Colors.Red)));
        else
          e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.ForegroundProperty, (object) new SolidColorBrush(this.analyzerColor.textColor)));
      }
      else if (e.Column.Header.Equals((object) "PossibleItems"))
      {
        if (!Settings.Default.ShowPossibleItems)
        {
          e.Cancel = true;
        }
        else
        {
          e.Column.Header = (object) "All Items";
          e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.FontSizeProperty, (object) (num / 3.0 * 2.0)));
          if (Settings.Default.MissingItemColor.Equals("Red"))
            e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.ForegroundProperty, (object) new SolidColorBrush(Colors.Red)));
          else
            e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.ForegroundProperty, (object) new SolidColorBrush(this.analyzerColor.textColor)));
        }
      }
      else
      {
        e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.FontSizeProperty, (object) num));
        e.Column.CellStyle.Setters.Add((SetterBase) new Setter(System.Windows.Controls.Control.ForegroundProperty, (object) new SolidColorBrush(this.analyzerColor.textColor)));
      }
    }

    private void LblCredits_MouseLeftButtonUp(object sender, MouseButtonEventArgs e) => Process.Start("https://hzla.github.io/Remnant-World-Analyzer/");

    private void dgCampaign_LayoutUpdated(object sender, EventArgs e) => this.saveColumnWidth(this.dgCampaign);

    private void dgAdventure_LayoutUpdated(object sender, EventArgs e) => this.saveColumnWidth(this.dgAdventure);

    private void saveColumnWidth(System.Windows.Controls.DataGrid dg)
    {
    }

    private void autoGeneratedColumns(object sender, EventArgs e)
    {
    }

    private void sliderSize_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
    {
      if (!this.initialized)
        return;
      Settings.Default.AnalyzerFontSize = this.sliderSize.Value;
      Settings.Default.Save();
      this.dgCampaign.ItemsSource = (IEnumerable) null;
      this.dgAdventure.ItemsSource = (IEnumerable) null;
      this.CmbCharacter_SelectionChanged((object) null, (SelectionChangedEventArgs) null);
      this.treeMissingItems.FontSize = this.sliderSize.Value - 4.0;
      this.lblCredits.FontSize = this.sliderSize.Value;
    }

    private void btnExport_Click(object sender, RoutedEventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      string header = (string) ((HeaderedContentControl) this.tabAnalyzer.SelectedItem).Header;
      saveFileDialog.FileName = header + ".md";
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      using (FileStream fileStream = (FileStream) saveFileDialog.OpenFile())
      {
        using (StreamWriter streamWriter = new StreamWriter((Stream) fileStream))
        {
          switch (this.tabAnalyzer.SelectedIndex)
          {
            case 0:
              streamWriter.Write(this.ExportCampaign());
              break;
            case 1:
              streamWriter.Write(this.ExportCampaign(true));
              break;
            case 3:
              streamWriter.Write(this.ExportMissingItems());
              break;
            case 4:
              streamWriter.Write(this.ExportCredits());
              break;
            default:
              throw new Exception("Tab does not exist");
          }
        }
      }
    }

    private string FormatItems(string header, string items)
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (string.IsNullOrEmpty(items))
      {
        stringBuilder.AppendLine(string.Format("- **{0}** - None", (object) header));
      }
      else
      {
        stringBuilder.AppendLine(string.Format("- **{0}:**", (object) header));
        string str1 = items;
        char[] chArray = new char[1]{ '\n' };
        foreach (string str2 in str1.Split(chArray))
          stringBuilder.AppendLine(string.Format("  - {0}", (object) str2));
      }
      return stringBuilder.ToString();
    }

    private string DumpEvents(IEnumerable<RemnantWorldEvent> events)
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (RemnantWorldEvent remnantWorldEvent in events)
      {
        stringBuilder.AppendLine(string.Format("##### {0}", (object) remnantWorldEvent.Name));
        stringBuilder.AppendLine(string.Format("- **Type** - {0}", (object) remnantWorldEvent.Type));
        stringBuilder.Append(this.FormatItems("Missing Items", remnantWorldEvent.MissingItems));
        if (Settings.Default.ShowPossibleItems)
          stringBuilder.Append(this.FormatItems("Possible Items", remnantWorldEvent.PossibleItems));
      }
      return stringBuilder.ToString();
    }

    private string ExportCampaign(bool isAdventure = false)
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (IGrouping<string, RemnantWorldEvent> source1 in (isAdventure ? (IEnumerable<RemnantWorldEvent>) this.listCharacters[this.cmbCharacter.SelectedIndex].AdventureEvents : (IEnumerable<RemnantWorldEvent>) this.listCharacters[this.cmbCharacter.SelectedIndex].CampaignEvents).GroupBy<RemnantWorldEvent, string>((Func<RemnantWorldEvent, string>) (x => x.Location.Split(':')[0].Trim())))
      {
        stringBuilder.AppendLine();
        stringBuilder.AppendLine(string.Format("## {0}", (object) source1.Key));
        stringBuilder.Append(this.DumpEvents(source1.Where<RemnantWorldEvent>((Func<RemnantWorldEvent, bool>) (x => x.Location.Split(':').Length == 1))));
        foreach (IGrouping<string, RemnantWorldEvent> source2 in source1.Where<RemnantWorldEvent>((Func<RemnantWorldEvent, bool>) (x => x.Location.Split(':').Length > 1)).GroupBy<RemnantWorldEvent, string>((Func<RemnantWorldEvent, string>) (x => x.Location.Split(':')[1].Trim())))
        {
          stringBuilder.AppendLine(string.Format("### {0}", (object) source2.Key));
          stringBuilder.Append(this.DumpEvents(source2.Where<RemnantWorldEvent>((Func<RemnantWorldEvent, bool>) (x => x.Location.Split(':').Length == 2))));
          foreach (IGrouping<string, RemnantWorldEvent> events in source2.Where<RemnantWorldEvent>((Func<RemnantWorldEvent, bool>) (x => x.Location.Split(':').Length > 2)).GroupBy<RemnantWorldEvent, string>((Func<RemnantWorldEvent, string>) (x => x.Location.Split(':')[2].Trim())))
          {
            stringBuilder.AppendLine(string.Format("#### {0}", (object) events.Key));
            stringBuilder.Append(this.DumpEvents((IEnumerable<RemnantWorldEvent>) events));
          }
        }
      }
      return stringBuilder.ToString().TrimStart('\r', '\n');
    }

    private string ExportMissingItems()
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (IGrouping<RemnantItem.RemnantItemMode, RemnantItem> source in this.listCharacters[this.cmbCharacter.SelectedIndex].GetMissingItems().GroupBy<RemnantItem, RemnantItem.RemnantItemMode>((Func<RemnantItem, RemnantItem.RemnantItemMode>) (x => x.ItemMode)))
      {
        stringBuilder.AppendLine(string.Format("## {0}", (object) source.Key));
        foreach (IGrouping<string, RemnantItem> grouping in source.GroupBy<RemnantItem, string>((Func<RemnantItem, string>) (x => x.ItemType)))
        {
          stringBuilder.AppendLine(string.Format("- {0}", (object) grouping.Key));
          foreach (RemnantItem remnantItem in (IEnumerable<RemnantItem>) grouping)
          {
            if (string.IsNullOrEmpty(remnantItem.ItemNotes))
              stringBuilder.AppendLine(string.Format("  - {0}", (object) remnantItem.ItemName));
            else
              stringBuilder.AppendLine(string.Format("  - {0} {{{1}}}", (object) remnantItem.ItemName, (object) remnantItem.ItemNotes));
          }
        }
      }
      return stringBuilder.ToString();
    }

    private string ExportCredits() => (string) this.lblCredits.Content;

    private void btnCopy_Click(object sender, RoutedEventArgs e)
    {
      switch (this.tabAnalyzer.SelectedIndex)
      {
        case 0:
          System.Windows.Clipboard.SetText(this.ExportCampaign());
          break;
        case 1:
          System.Windows.Clipboard.SetText(this.ExportCampaign(true));
          break;
        case 3:
          System.Windows.Clipboard.SetText(this.ExportMissingItems());
          break;
        case 4:
          System.Windows.Clipboard.SetText(this.ExportCredits());
          break;
        default:
          throw new Exception("Tab does not exist");
      }
      int num = (int) System.Windows.MessageBox.Show("Content copied.");
    }

    private string GetTreeItem(TreeViewItem item)
    {
      if ((string) item.Tag == nameof (item))
        return item.Header.ToString();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine(item.Header.ToString() + ":");
      foreach (TreeViewItem treeViewItem in (IEnumerable) item.Items)
        stringBuilder.AppendLine("\t- " + this.GetTreeItem(treeViewItem));
      return stringBuilder.ToString();
    }

    private void CopyItem_Click(object sender, RoutedEventArgs e) => System.Windows.Clipboard.SetText(this.GetTreeItem((sender is System.Windows.Controls.MenuItem menuItem ? (System.Windows.Controls.ContextMenu) menuItem.Parent : (System.Windows.Controls.ContextMenu) null)?.PlacementTarget as TreeViewItem));

    private void SearchItem_Click(object sender, RoutedEventArgs e)
    {
      string str1 = ((sender is System.Windows.Controls.MenuItem menuItem ? (System.Windows.Controls.ContextMenu) menuItem.Parent : (System.Windows.Controls.ContextMenu) null)?.PlacementTarget is TreeViewItem placementTarget ? (HeaderedItemsControl) placementTarget.Parent : (HeaderedItemsControl) null)?.Header.ToString();
      string str2 = placementTarget?.Header.ToString();
      if (str1 == "Armor")
        str2 = str2.Substring(0, str2.IndexOf("(")) + "Set";
      Process.Start(string.Format("https://remnantfromtheashes.wiki.fextralife.com/{0}", (object) str2));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/RemnantSaveManager;component/saveanalyzer.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((Window) target).Closing += new CancelEventHandler(this.Window_Closing);
          break;
        case 2:
          this.cmbCharacter = (System.Windows.Controls.ComboBox) target;
          this.cmbCharacter.SelectionChanged += new SelectionChangedEventHandler(this.CmbCharacter_SelectionChanged);
          break;
        case 3:
          this.tabAnalyzer = (System.Windows.Controls.TabControl) target;
          break;
        case 4:
          this.dgCampaign = (System.Windows.Controls.DataGrid) target;
          this.dgCampaign.BeginningEdit += new EventHandler<DataGridBeginningEditEventArgs>(this.dgBeginningEdit);
          this.dgCampaign.AutoGeneratingColumn += new EventHandler<DataGridAutoGeneratingColumnEventArgs>(this.autoGeneratingColumn);
          this.dgCampaign.LayoutUpdated += new EventHandler(this.dgCampaign_LayoutUpdated);
          this.dgCampaign.AutoGeneratedColumns += new EventHandler(this.autoGeneratedColumns);
          break;
        case 5:
          this.dgAdventure = (System.Windows.Controls.DataGrid) target;
          this.dgAdventure.BeginningEdit += new EventHandler<DataGridBeginningEditEventArgs>(this.dgBeginningEdit);
          this.dgAdventure.AutoGeneratingColumn += new EventHandler<DataGridAutoGeneratingColumnEventArgs>(this.autoGeneratingColumn);
          this.dgAdventure.AutoGeneratedColumns += new EventHandler(this.autoGeneratedColumns);
          this.dgAdventure.LayoutUpdated += new EventHandler(this.dgAdventure_LayoutUpdated);
          break;
        case 6:
          this.txtMissingItems = (System.Windows.Controls.TextBox) target;
          break;
        case 7:
          this.treeMissingItems = (System.Windows.Controls.TreeView) target;
          break;
        case 8:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.CopyItem_Click);
          break;
        case 9:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.SearchItem_Click);
          break;
        case 10:
          ((System.Windows.Controls.MenuItem) target).Click += new RoutedEventHandler(this.CopyItem_Click);
          break;
        case 11:
          this.lblCredits = (System.Windows.Controls.Label) target;
          this.lblCredits.MouseLeftButtonUp += new MouseButtonEventHandler(this.LblCredits_MouseLeftButtonUp);
          break;
        case 12:
          this.sliderSize = (Slider) target;
          this.sliderSize.ValueChanged += new RoutedPropertyChangedEventHandler<double>(this.sliderSize_ValueChanged);
          break;
        case 13:
          this.btnExport = (System.Windows.Controls.Button) target;
          this.btnExport.Click += new RoutedEventHandler(this.btnExport_Click);
          break;
        case 14:
          this.btnCopy = (System.Windows.Controls.Button) target;
          this.btnCopy.Click += new RoutedEventHandler(this.btnCopy_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }

    private struct AnalyzerColor
    {
      internal Color backgroundColor;
      internal Color textColor;
      internal Color headerBackgroundColor;
      internal Color borderColor;
    }
  }
}
