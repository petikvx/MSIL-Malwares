// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ClaimTyp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CD146E8-0143-4099-A2FD-F452B55D5FF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-200a5cb8bf6489144c66e3b85eaeec5327dc66321001f4c0fda42840d0f230ec.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206C‍‎‬⁯‍‎⁫‭⁮⁫‏‌‏⁭​​⁮‭‎‫‮⁭‮‌⁪⁬‪‌‭‮‌⁫‍‫‪⁫‭⁯‍‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -914958968;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool flag;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1453846283)) % 14U)
          {
            case 0:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * 2091522997 ^ 1715097249;
              continue;
            case 1:
              ++index;
              num1 = -1614257529;
              continue;
            case 2:
              int num3;
              num1 = num3 = index < playerStates.Length ? -1642826690 : (num3 = -2136255688);
              continue;
            case 3:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -403884924 ^ -1415429455;
              continue;
            case 4:
              num1 = -406732869;
              continue;
            case 5:
              playerState = playerStates[index];
              num1 = -2029768054;
              continue;
            case 6:
              goto label_1;
            case 7:
              finished2 = false;
              num1 = (int) num2 * 2021348621 ^ 1807947543;
              continue;
            case 8:
              finished2 = true;
              num1 = (int) num2 * 1143230866 ^ -879772093;
              continue;
            case 9:
              int num4 = !finished1 ? -1478502142 : (num4 = -1004526884);
              num1 = num4 ^ (int) num2 * 1619246665;
              continue;
            case 10:
              int num5 = !flag ? 1233666564 : (num5 = 1864254118);
              num1 = num5 ^ (int) num2 * -1527127532;
              continue;
            case 12:
              num1 = (int) num2 * 307002086 ^ -438865836;
              continue;
            case 13:
              finished2 = true;
              num1 = (int) num2 * -527674245 ^ -892150785;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -871159546;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1776525905)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -316161749 ^ -1739086215;
            continue;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * 581694426 ^ -1433912347;
            continue;
          case 2:
            this.Winners.Clear();
            num1 = (int) num2 * -643159850 ^ 192585492;
            continue;
          case 3:
            goto label_1;
          case 4:
            this._finished = false;
            num1 = (int) num2 * -21548599 ^ 409343710;
            continue;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * 1364234139 ^ -1639653170;
            continue;
          case 6:
            this._currentTurn = 0;
            num1 = (int) num2 * -458792265 ^ 754892663;
            continue;
          case 7:
            num1 = (int) num2 * -2073540805 ^ 1859167415;
            continue;
          case 8:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 519284998 ^ -85249829;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 1421138271;
      bool flag1;
      PlayerState playerState;
      Player player;
      int planningCardsCount;
      int num2;
      bool flag2;
      bool morePlanningSprint;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 830557519)) % 28U)
        {
          case 0:
            num1 = (int) num3 * -187047468 ^ -578084871;
            continue;
          case 1:
            num1 = (int) num3 * 439510359 ^ 1706993554;
            continue;
          case 2:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1211522010 ^ 1555801356;
            continue;
          case 3:
            num1 = 559671838;
            continue;
          case 4:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 1333400661;
            continue;
          case 5:
            flag1 = num2 > 0;
            num1 = 1588549843;
            continue;
          case 6:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 818449291 ^ -1169234671;
            continue;
          case 7:
            int num4 = morePlanningSprint ? -1516002938 : (num4 = -1850293607);
            num1 = num4 ^ (int) num3 * 767216585;
            continue;
          case 8:
            num1 = (int) num3 * 762728975 ^ -1491523136;
            continue;
          case 9:
            flag3 = planningCardsCount == 0;
            num1 = (int) num3 * 2078428166 ^ 2060820094;
            continue;
          case 10:
            num1 = 1889817072;
            continue;
          case 11:
            int num5 = !flag2 ? 1910480469 : (num5 = 825986036);
            num1 = num5 ^ (int) num3 * 673305292;
            continue;
          case 12:
            playerState.Sprint = 1;
            num1 = (int) num3 * -896899556 ^ 122933311;
            continue;
          case 13:
            playerState.Sprint = -1;
            num1 = (int) num3 * 207157152 ^ -90089427;
            continue;
          case 14:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1035849192 ^ 182870025;
            continue;
          case 15:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1800378390;
            continue;
          case 16:
            int num6 = !flag1 ? -465341325 : (num6 = -1012986735);
            num1 = num6 ^ (int) num3 * -1922075271;
            continue;
          case 17:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 1155476372 ^ -728438748;
            continue;
          case 18:
            num1 = (int) num3 * -154214200 ^ -374435018;
            continue;
          case 19:
            goto label_1;
          case 20:
            num2 = 0;
            num1 = 1507037657;
            continue;
          case 21:
            flag2 = index < this.Players.Length;
            num1 = 780760584;
            continue;
          case 22:
            goto label_3;
          case 23:
            num2 = 0;
            num1 = (int) num3 * 1429867932 ^ -327022390;
            continue;
          case 24:
            num1 = (int) num3 * -1618611851 ^ -964497906;
            continue;
          case 25:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 1438564438 ^ -905946272;
            continue;
          case 26:
            ++index;
            num1 = (int) num3 * 1586067021 ^ -102955356;
            continue;
          case 27:
            int num7 = !flag3 ? -1498412854 : (num7 = -2091411362);
            num1 = num7 ^ (int) num3 * -1209757889;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -1182380404;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -339698902)) % 11U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Print((object) Game.\u206C‫‭⁮‏⁬‫⁬‬⁯⁭⁪‪‍‭‮⁫‍‬‬‭‎‪⁪⁪‍‮‎‌‌‫⁪‎‍⁮‬⁭⁫⁫‫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -1157720042;
            continue;
          case 2:
            num1 = (int) num2 * -129418219 ^ -385694116;
            continue;
          case 3:
            int num3 = flag ? 624273745 : (num3 = 722745897);
            num1 = num3 ^ (int) num2 * -1300352291;
            continue;
          case 4:
            flag = this._currentTurn > 0;
            num1 = (int) num2 * -52736030 ^ 1230274655;
            continue;
          case 5:
            this.PlayerTurn(this._currentPlayer);
            num1 = -2136207846;
            continue;
          case 6:
            this._currentPlayer = 0;
            num1 = (int) num2 * -437880559 ^ -83126275;
            continue;
          case 7:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1853505551 ^ -1163992622;
            continue;
          case 8:
            ++this._currentPlayer;
            int num4 = this._currentPlayer >= this.Players.Length ? 1911535162 : (num4 = 460794437);
            num1 = num4 ^ (int) num2 * -1351778945;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206E⁮⁫​⁯‏‮‮‬​‪⁬‍⁬‏⁮⁫‏⁬‬‍‏‫​⁮⁮‏‬‮⁮‫⁪⁮‌​‎‬‏​‮‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1057670697 ^ 1197179969;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 1542405896;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        int index;
        bool flag4;
        PlayerState playerState1;
        bool onlyOneWinner;
        bool flag5;
        Card card;
        int num4;
        bool flag6;
        PlayerState playerState2;
        bool flag7;
        bool flag8;
        Player player;
        int num5;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        int num6;
        switch ((num2 = (uint) (num1 ^ 71195568)) % 85U)
        {
          case 0:
            flag4 = true;
            num1 = (int) num2 * -1439711386 ^ -1334616514;
            continue;
          case 1:
            ++playerState1.Sprint;
            num1 = (int) num2 * -497011229 ^ 1614415047;
            continue;
          case 2:
            num1 = 331026424;
            continue;
          case 3:
            goto label_1;
          case 4:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 523610651 ^ -75936909;
            continue;
          case 5:
            num1 = (int) num2 * -696526412 ^ 1917678404;
            continue;
          case 6:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -931512249 ^ -890142990;
            continue;
          case 7:
            num1 = (int) num2 * 687357736 ^ -456644391;
            continue;
          case 8:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u202B⁮‌⁭​‎⁭‍⁫‭​‌‪‪‮‪‭‎​⁬⁪⁬‬‍‪‬‍‏‏‌‌⁯‏⁫‌⁬‌⁪‏‍‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            int num7 = playerState2.Resources < 0 ? 987792707 : (num7 = 1633125625);
            num1 = num7 ^ (int) num2 * -564888915;
            continue;
          case 9:
            flag9 = num3 == playerIndex;
            num1 = (int) num2 * -2017056458 ^ -950473865;
            continue;
          case 10:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag10 ? (object) "ALL " : (object) "", flag8 ? (object) "receives" : (object) "pays", (object) Game.\u200D‭‍⁬⁪‭⁪⁬⁬⁬⁫‮‍‮‭‍‭​‍⁮‭⁬‌⁮⁪⁮⁬​‭‎⁭‬‎⁮⁭‌⁭‌‪⁭‮(num4), flag4 ? (object) "advance" : (object) "stay");
            num1 = 1011276502;
            continue;
          case 11:
            flag1 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1750859527 ^ 1439858600;
            continue;
          case 12:
            num1 = (int) num2 * 539466555 ^ 768149584;
            continue;
          case 13:
            num1 = (int) num2 * -1969447485 ^ -936084370;
            continue;
          case 14:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 15:
            int num8 = !flag13 ? -999507091 : (num8 = -129000446);
            num1 = num8 ^ (int) num2 * 2068795908;
            continue;
          case 16:
            int num9 = !flag5 ? -1172469698 : (num9 = -1290808445);
            num1 = num9 ^ (int) num2 * 1184661490;
            continue;
          case 17:
            flag12 = !this.Losers.Contains(num3);
            num1 = 1034626247;
            continue;
          case 18:
            goto label_3;
          case 19:
            index = 0;
            num1 = (int) num2 * 1510389167 ^ -952510761;
            continue;
          case 20:
            num1 = (int) num2 * -2039980395 ^ -301448238;
            continue;
          case 21:
            num1 = 1329627360;
            continue;
          case 22:
            int num10 = flag2 ? 221846013 : (num10 = 143682535);
            num1 = num10 ^ (int) num2 * -1070778641;
            continue;
          case 23:
            num1 = (int) num2 * -51323779 ^ 86938070;
            continue;
          case 24:
            this.Losers.Add(num3);
            num1 = (int) num2 * -843585785 ^ 1394386789;
            continue;
          case 25:
            num3 = 0;
            num1 = (int) num2 * -1089700854 ^ -1572744540;
            continue;
          case 26:
            num1 = 1012572584;
            continue;
          case 27:
            int num11 = !flag12 ? -673842879 : (num11 = -1629054240);
            num1 = num11 ^ (int) num2 * 1453541378;
            continue;
          case 28:
            ++playerState1.Sprint;
            num1 = (int) num2 * 304612326 ^ 1640164468;
            continue;
          case 29:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -343547143 ^ -1477071532;
            continue;
          case 30:
            num1 = (int) num2 * 1614111235 ^ -249074740;
            continue;
          case 31:
            ++num3;
            num1 = 1648041391;
            continue;
          case 32:
            int num12;
            num1 = num12 = playerState1.Sprint >= 0 ? 1976410973 : (num12 = 909713945);
            continue;
          case 33:
            num1 = 1766850357;
            continue;
          case 34:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 829494709 ^ 1641081797;
            continue;
          case 35:
            num1 = 210249061;
            continue;
          case 36:
            card = this.DrawCard();
            num1 = (int) num2 * -2135906049 ^ -1463192685;
            continue;
          case 37:
            int num13 = flag6 ? 1910949023 : (num13 = 208852233);
            num1 = num13 ^ (int) num2 * 1912422549;
            continue;
          case 38:
            flag3 = num3 < this._playerStates.Length;
            num1 = 767820269;
            continue;
          case 39:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 245551147 ^ -934545242;
            continue;
          case 40:
            int num14 = flag10 ? 730562784 : (num14 = 982906910);
            num1 = num14 ^ (int) num2 * 1107930822;
            continue;
          case 41:
            flag5 = flag4;
            num1 = 148062539;
            continue;
          case 42:
            num1 = (int) num2 * 171912771 ^ -226093562;
            continue;
          case 43:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1518755628 ^ 1298157358;
            continue;
          case 44:
            flag4 = true;
            num1 = 1350506508;
            continue;
          case 45:
            num1 = 169645240;
            continue;
          case 46:
            num1 = (int) num2 * 893803537 ^ -1830684600;
            continue;
          case 47:
            num1 = (int) num2 * -1601330986 ^ -1538460234;
            continue;
          case 48:
            num1 = 2076106973;
            continue;
          case 49:
            int num15 = flag3 ? 1421888970 : (num15 = 1772380354);
            num1 = num15 ^ (int) num2 * -100448098;
            continue;
          case 50:
            num1 = (int) num2 * 2143624126 ^ 1908835652;
            continue;
          case 51:
            num1 = 692574737;
            continue;
          case 52:
            int num16 = flag11 ? -975019645 : (num16 = -1011818170);
            num1 = num16 ^ (int) num2 * 856170526;
            continue;
          case 53:
            flag8 = card.Impact < 0;
            num1 = (int) num2 * -1241023932 ^ 551147853;
            continue;
          case 54:
            int num17 = flag1 ? -55110397 : (num17 = -332466922);
            num1 = num17 ^ (int) num2 * -1725818509;
            continue;
          case 55:
            num1 = (int) num2 * 1264578095 ^ -1952808748;
            continue;
          case 56:
            this._finished = true;
            num1 = (int) num2 * 1846393031 ^ -1689127489;
            continue;
          case 57:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206E⁮⁫​⁯‏‮‮‬​‪⁬‍⁬‏⁮⁫‏⁬‬‍‏‫​⁮⁮‏‬‮⁮‫⁪⁮‌​‎‬‏​‮‮("\t", playerState3 != null ? Game.\u202B‮‬⁪⁬⁬⁭‏‏‌‏‬‪⁭⁭​‌‍⁮‪‌⁭⁫⁯⁯⁯⁮‫⁪‬‫⁪⁬‬‍⁪⁫‫​⁯‮((object) playerState3) : (string) null));
            num1 = 1134674958;
            continue;
          case 58:
            int num18 = !flag9 ? -2036331470 : (num18 = -1862304729);
            num1 = num18 ^ (int) num2 * 1946616036;
            continue;
          case 59:
            playerState1.Resources -= num4;
            flag6 = playerState1.Resources < 0;
            num1 = (int) num2 * -1887836437 ^ 1594735644;
            continue;
          case 60:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1554580661 ^ -1630554567;
            continue;
          case 61:
            num1 = (int) num2 * 1889021459 ^ 1740921738;
            continue;
          case 62:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -300642923 ^ -1838483850;
            continue;
          case 63:
            flag11 = index < this._playerStates.Length;
            num1 = 948740420;
            continue;
          case 64:
            num4 = card.Impact;
            num1 = (int) num2 * 1152079726 ^ -431609605;
            continue;
          case 65:
            num1 = (int) num2 * -948115194 ^ 872411942;
            continue;
          case 66:
            num1 = (int) num2 * 1246606287 ^ 1436756057;
            continue;
          case 67:
            num1 = (int) num2 * 1831116523 ^ -367331456;
            continue;
          case 68:
            num1 = 755281070;
            continue;
          case 69:
            num1 = (int) num2 * -955042047 ^ 1639017994;
            continue;
          case 70:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -2042635593 ^ -610115238;
              continue;
            }
            num6 = 0;
            break;
          case 71:
            int num19 = !flag7 ? 327251528 : (num19 = 1520917332);
            num1 = num19 ^ (int) num2 * -1432782298;
            continue;
          case 72:
            num1 = (int) num2 * -123414861 ^ -1434023894;
            continue;
          case 73:
            num1 = (int) num2 * -1437623416 ^ 1638023381;
            continue;
          case 74:
            flag4 = num5 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u202B⁮‌⁭​‎⁭‍⁫‭​‌‪‪‮‪‭‎​⁬⁪⁬‬‍‪‬‍‏‏‌‌⁯‏⁫‌⁬‌⁪‏‍‮(0, num5);
            num1 = (int) num2 * 434091016 ^ -537413495;
            continue;
          case 75:
            ++index;
            num1 = 273848908;
            continue;
          case 76:
            int num20;
            num1 = num20 = this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1972498034 : (num20 = 1768957098);
            continue;
          case 77:
            flag2 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1535213153;
            continue;
          case 78:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206E⁮⁫​⁯‏‮‮‬​‪⁬‍⁬‏⁮⁫‏⁬‬‍‏‫​⁮⁮‏‬‮⁮‫⁪⁮‌​‎‬‏​‮‮("\nPLAYER ", playerIndex.ToString()));
            int num21 = playerState1.State != 0 ? 1797854818 : (num21 = 1468319425);
            num1 = num21 ^ (int) num2 * -1132135448;
            continue;
          case 79:
            playerState2.State = State.Lose;
            flag7 = !this.Losers.Contains(index);
            num1 = 1227614519;
            continue;
          case 80:
            flag4 = false;
            num1 = 717088830;
            continue;
          case 81:
            this.Losers.Add(index);
            num1 = (int) num2 * 661907908 ^ -1152414598;
            continue;
          case 82:
            num1 = (int) num2 * -878544010 ^ -1844749793;
            continue;
          case 83:
            num1 = (int) num2 * 1757414407 ^ -787797412;
            continue;
          case 84:
            int num22 = onlyOneWinner ? 293385040 : (num22 = 1621733374);
            num1 = num22 ^ (int) num2 * -298402040;
            continue;
          default:
            goto label_90;
        }
        flag10 = num6 != 0;
        flag13 = !flag8;
        num1 = 330640913;
      }
label_3:
      return;
label_90:;
    }

    private Card DrawCard()
    {
      bool flag = this._deck.Count <= 0;
label_1:
      int num1 = -1317886341;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1864766333)) % 9U)
        {
          case 0:
            card2 = card1;
            num1 = (int) num2 * -1097749373 ^ -986644903;
            continue;
          case 1:
            int num3 = !flag ? 874247033 : (num3 = 80927940);
            num1 = num3 ^ (int) num2 * 1686727882;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1545531506 ^ 456889609;
            continue;
          case 4:
            this.ShuffleCards();
            num1 = (int) num2 * 1984447038 ^ 900154791;
            continue;
          case 5:
            card1 = this._deck[0];
            num1 = -94116030;
            continue;
          case 6:
            num1 = (int) num2 * -1051623480 ^ -776016135;
            continue;
          case 7:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -1403073131 ^ -1527193855;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -508605908;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -603005214)) % 10U)
        {
          case 0:
            index = 0;
            num1 = (int) num2 * 407819063 ^ 784690737;
            continue;
          case 1:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? -245053714 : (num3 = -1892032546);
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202B‮‬⁪⁬⁬⁭‏‏‌‏‬‪⁭⁭​‌‍⁮‪‌⁭⁫⁯⁯⁯⁮‫⁪‬‫⁪⁬‬‍⁪⁫‫​⁯‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202C‏⁪‫‍‍‌⁪‍‬‬‪⁭⁪⁯‪‮⁬​⁭‪‫‭⁬‎⁯⁭⁭‍‌‪‍‬‍⁬‏‭‪‌⁯‮(strArray);
            num1 = -1932415119;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * 1837673066 ^ 703781563;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 2120743933 ^ -964180471;
            continue;
          case 5:
            num1 = (int) num2 * -448055375 ^ 1532216114;
            continue;
          case 6:
            str1 = "";
            num1 = (int) num2 * -398025529 ^ 989172598;
            continue;
          case 7:
            num1 = (int) num2 * 2020028931 ^ -1679592898;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -323901971;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1222241140)) % 4U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1444708812 ^ -2074683157;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1743337148 ^ -226796772;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u206F⁬‮‭‎‬‍‎⁫‫⁭‌⁪⁪‍‎⁪‪⁬⁮​⁬⁮⁬‭‎‎​‍⁫‭‏⁮⁬⁪⁭⁫‮⁭⁮‮(this._buffer, Game.\u202E‭​‪‏⁮‭⁭‍‮‎‏‭⁭⁯‬‭⁯‮‮⁭⁭‭‍‮⁭‭‫⁭‭⁫‭⁪⁮⁫⁯‏‮‌⁭‮(Game.\u202B‮‬⁪⁬⁬⁭‏‏‌‏‬‪⁭⁭​‌‍⁮‪‌⁭⁫⁯⁯⁯⁮‫⁪‬‫⁪⁬‬‍⁪⁫‫​⁯‮(text), more));

    static Random \u206C‍‎‬⁯‍‎⁫‭⁮⁫‏‌‏⁭​​⁮‭‎‫‮⁭‮‌⁪⁬‪‌‭‮‌⁫‍‫‪⁫‭⁯‍‮([In] int obj0) => new Random(obj0);

    static string \u206C‫‭⁮‏⁬‫⁬‬⁯⁭⁪‪‍‭‮⁫‍‬‬‭‎‪⁪⁪‍‮‎‌‌‫⁪‎‍⁮‬⁭⁫⁫‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206E⁮⁫​⁯‏‮‮‬​‪⁬‍⁬‏⁮⁫‏⁬‬‍‏‫​⁮⁮‏‬‮⁮‫⁪⁮‌​‎‬‏​‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202B⁮‌⁭​‎⁭‍⁫‭​‌‪‪‮‪‭‎​⁬⁪⁬‬‍‪‬‍‏‏‌‌⁯‏⁫‌⁬‌⁪‏‍‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200D‭‍⁬⁪‭⁪⁬⁬⁬⁫‮‍‮‭‍‭​‍⁮‭⁬‌⁮⁪⁮⁬​‭‎⁭‬‎⁮⁭‌⁭‌‪⁭‮([In] int obj0) => Math.Abs(obj0);

    static string \u202B‮‬⁪⁬⁬⁭‏‏‌‏‬‪⁭⁭​‌‍⁮‪‌⁭⁫⁯⁯⁯⁮‫⁪‬‫⁪⁬‬‍⁪⁫‫​⁯‮([In] object obj0) => obj0.ToString();

    static string \u202C‏⁪‫‍‍‌⁪‍‬‬‪⁭⁪⁯‪‮⁬​⁭‪‫‭⁬‎⁯⁭⁭‍‌‪‍‬‍⁬‏‭‪‌⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E‭​‪‏⁮‭⁭‍‮‎‏‭⁭⁯‬‭⁯‮‮⁭⁭‭‍‮⁭‭‫⁭‭⁫‭⁪⁮⁫⁯‏‮‌⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206F⁬‮‭‎‬‍‎⁫‫⁭‌⁪⁪‍‎⁪‪⁬⁮​⁬⁮⁬‭‎‎​‍⁫‭‏⁮⁬⁪⁭⁫‮⁭⁮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
