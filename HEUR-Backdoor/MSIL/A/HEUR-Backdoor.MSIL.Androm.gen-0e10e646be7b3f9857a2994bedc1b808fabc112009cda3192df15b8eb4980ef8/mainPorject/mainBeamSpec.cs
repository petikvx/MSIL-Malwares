// Decompiled with JetBrains decompiler
// Type: mainPorject.mainBeamSpec
// Assembly: MuiResourceTypeIdIntEn, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2C7C9528-88C0-45FF-AB6A-2AC0C29EABCB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0e10e646be7b3f9857a2994bedc1b808fabc112009cda3192df15b8eb4980ef8.exe

using beam;
using forces;
using mainPorject.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace mainPorject
{
  public class mainBeamSpec : Form
  {
    public BeamWrapper beamWrap;
    private double beamLength_DONOTUSE;
    private List<Force> forces;
    private int stage_DONOTUSE;
    private mainBeamSpec.painting p;
    private Size size_paintForces_DONOTUSE;
    private Point upperLeft_paintForces;
    private string oldtextBoxForceLocation;
    private double oldStart;
    private double oldEnd;
    private float scaler_DONOTUSE = -1f;
    private Point oldXY;
    private System.Type forceselectedDONOTUSETHIS;
    private const int stretchLeft = 1;
    private const int stretchRight = 2;
    private const int none = -1;
    private Rectangle mouseClip = Cursor.Clip;
    private bool drawPanelPointForce_RightClickable = false;
    private bool drawPanelPointForce_LeftClickable = true;
    private bool drawPanelPointForce_Catch = false;
    private bool drawPanelDistributedForce_RightClickable = false;
    private bool drawPanelDistributedForce_LeftClickable = true;
    private bool drawPanelDistributedForce_Catch = false;
    private int drawPanelDistributedForce_CatchMood = -1;
    private IContainer components = (IContainer) null;
    private Panel panel1;
    private Button buttonOK;
    private Button buttonCancel;
    private GroupBox groupBox4;
    private Button buttonAddDistributedForce;
    private Label label22;
    private Label label21;
    private Label label20;
    private TextBox textBoxForceEnd;
    private TextBox textBoxForceStart;
    private TextBox textBoxDistributedForce;
    private GroupBox groupBox3;
    private Button buttonAddPointForce;
    private Label label19;
    private Label label18;
    private TextBox textBoxForceLocation;
    private TextBox textBoxPointForce;
    private Label labelpanelWidth;
    private Label labelPanelHeight;
    private Label labelPanelLength;
    private ContextMenuStrip contextMenuStripForce;
    private ToolStripTextBox toolStripTextBoxForce;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripMenuItem toolStripMenuItem1;
    private ToolStripMenuItem cancelToolStripMenuItem;
    private Button button1;
    private Button button2;
    private UserControl_BasicSpec userControl_BasicSpec1;
    private Button button3;
    private Panel panelForces;
    private UserControl_AdvancedSpec userControl_AdvancedSpec1;
    private UserControl_Forces drawPanelDistributedForce;
    private UserControl_Forces drawPanelPointForce;

    public double BeamHeight { private set; get; }

    public double BeamWidth { private set; get; }

    public double BeamLength
    {
      private set
      {
        this.beamLength_DONOTUSE = value;
        this.calculateScaler();
      }
      get => this.beamLength_DONOTUSE;
    }

    public double RenforcementDiameter { private set; get; }

    public double RenforcementDiameter2 { private set; get; }

    public int RenforcementCount { private set; get; }

    public int RenforcementCount2 { private set; get; }

    public double RenforcementA { private set; get; }

    public double RenforcementA2 { private set; get; }

    public Forces Forces { set; get; }

    private int stage
    {
      get => this.stage_DONOTUSE;
      set
      {
        switch (this.stage_DONOTUSE)
        {
          case 0:
            this.desetStage0();
            break;
          case 1:
            this.desetStage1();
            break;
          case 2:
            this.desetStage2();
            break;
        }
        this.stage_DONOTUSE = value;
        switch (this.stage_DONOTUSE)
        {
          case 0:
            this.setStage0();
            break;
          case 1:
            this.setStage1();
            break;
          case 2:
            this.setStage2();
            break;
        }
      }
    }

    public mainBeamSpec()
    {
      this.InitializeComponent();
      this.stage = 0;
      this.forces = new List<Force>();
      this.p = new mainBeamSpec.painting(this.paintLength_V2);
      this.p += new mainBeamSpec.painting(this.paintHeightWidth_V2);
      this.p += new mainBeamSpec.painting(this.paintRenforcement_V2);
    }

    public mainBeamSpec(
      double width,
      double height,
      double As,
      double Asl,
      double fc,
      double fs,
      double a,
      double al)
    {
      this.InitializeComponent();
      this.stage = 0;
      this.forces = new List<Force>();
      this.p = new mainBeamSpec.painting(this.paintLength_V2);
      this.p += new mainBeamSpec.painting(this.paintHeightWidth_V2);
      this.p += new mainBeamSpec.painting(this.paintRenforcement_V2);
      this.userControl_BasicSpec1.setRecText(width, height, 2.0);
      this.userControl_BasicSpec1.setSingelOrDouble(true);
      this.userControl_BasicSpec1.setRenSText(Math.Sqrt(As / 3.0 / Math.PI), 3);
      this.userControl_BasicSpec1.setRenDText(Math.Sqrt(Asl / 3.0 / Math.PI), 3);
      this.userControl_AdvancedSpec1.setAText(a);
      this.userControl_AdvancedSpec1.setA2Text(al);
      this.userControl_AdvancedSpec1.setFcText(fc);
      this.userControl_AdvancedSpec1.setFsText(fs);
    }

    public mainBeamSpec(double width, double height, double As, double fc, double fs, double a)
    {
      this.InitializeComponent();
      this.stage = 0;
      this.forces = new List<Force>();
      this.p = new mainBeamSpec.painting(this.paintLength_V2);
      this.p += new mainBeamSpec.painting(this.paintHeightWidth_V2);
      this.p += new mainBeamSpec.painting(this.paintRenforcement_V2);
      this.userControl_BasicSpec1.setRecText(width, height, 2.0);
      this.userControl_BasicSpec1.setSingelOrDouble(false);
      this.userControl_BasicSpec1.setRenSText(Math.Sqrt(As / 3.0 / Math.PI), 3);
      this.userControl_AdvancedSpec1.setAText(a);
      this.userControl_AdvancedSpec1.setFcText(fc);
      this.userControl_AdvancedSpec1.setFsText(fs);
    }

    private void mainBeamSpec_Load(object sender, EventArgs e)
    {
      this.BeamHeight = this.userControl_BasicSpec1.Height;
      this.BeamLength = this.userControl_BasicSpec1.Length * 100.0;
      this.BeamWidth = this.userControl_BasicSpec1.Width;
      this.RenforcementCount = this.userControl_BasicSpec1.Count;
      this.RenforcementCount2 = this.userControl_BasicSpec1.Count2;
      this.RenforcementDiameter = this.userControl_BasicSpec1.Diameter;
      this.RenforcementDiameter2 = this.userControl_BasicSpec1.Diameter2;
      this.RenforcementA = this.userControl_AdvancedSpec1.A;
      this.RenforcementA2 = this.userControl_AdvancedSpec1.A2;
    }

    private void buttonCancel_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
      this.Close();
    }

    private void buttonOk_Click(object sender, EventArgs e)
    {
      this.beamWrap.forces = new Forces(this.userControl_BasicSpec1.Weight, this.BeamLength);
      foreach (BeamForce force in this.forces)
        this.beamWrap.forces.Add(force);
      this.DialogResult = DialogResult.OK;
      this.Close();
    }

    private void HandleNumberedEntry(object sender, KeyPressEventArgs e)
    {
      if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && e.KeyChar != '.')
        e.Handled = true;
      if (e.KeyChar != '.' || (sender as TextBox).Text.IndexOf('.') <= -1)
        return;
      e.Handled = true;
    }

    private void textChanged(TextBox textbox, Control paintable, out double number, float scalar)
    {
      if (textbox == null)
        throw new NullReferenceException();
      number = double.Parse(textbox.Text) * (double) scalar;
      paintable?.Invalidate();
    }

    private void panel1_Paint(object sender, PaintEventArgs e)
    {
      using (Graphics graphics = this.panel1.CreateGraphics())
        graphics.Clear(SystemColors.Control);
      if (this.p == null)
        return;
      this.p((Control) this.panel1);
    }

    private void labelPanel_TextChanged(object sender, EventArgs e) => this.panel1.Invalidate();

    private void userControl_BasicSpec1_DoubleCheckedChanged(object sender, EventArgs e) => this.panel1.Invalidate();

    private void paintHeightWidth_V2(Control control)
    {
      using (Graphics graphics = control.CreateGraphics())
      {
        double num1 = this.BeamHeight / this.BeamWidth * 10.0;
        int num2;
        int num3;
        if (num1 == 10.0)
          num3 = num2 = 3;
        else if (num1 > 20.0)
        {
          num2 = 2;
          num3 = 4;
        }
        else if (num1 > 10.0)
        {
          num2 = 2;
          num3 = 3;
        }
        else if (num1 > 5.0)
        {
          num2 = 4;
          num3 = 2;
        }
        else
        {
          if (num1 <= 0.0)
            return;
          num2 = 3;
          num3 = 2;
        }
        int height = (int) ((double) control.Width / 1.2 / (double) num2);
        Size size = new Size((int) ((double) control.Width / 1.2 / (double) num3), height);
        Point location = new Point(15, 15);
        graphics.FillRectangle((Brush) new SolidBrush(Color.Gray), new Rectangle(location, size));
        int num4 = 5;
        this.labelpanelWidth.Location = new Point(location.X + size.Width / 2 - this.labelpanelWidth.Width / 2, location.Y + size.Height + num4);
        this.labelPanelHeight.Location = new Point(location.X + size.Width + num4, location.Y + size.Height / 2 - this.labelPanelHeight.Height / 2);
        this.drawPointerV(graphics, Pens.Blue, this.labelPanelHeight.Bounds, new Rectangle(location, size));
        this.drawPointerH(graphics, Pens.Blue, this.labelpanelWidth.Bounds, new Rectangle(location, size));
      }
    }

    private void drawPointerH(Graphics g, Pen p, Rectangle r, Rectangle b)
    {
      List<Point> source = new List<Point>()
      {
        new Point(r.Left - 1, r.Top)
      };
      source.Add(new Point(source.Last<Point>().X, r.Bottom));
      source.Add(new Point(b.Left, source.Last<Point>().Y));
      source.Add(new Point(source.Last<Point>().X, b.Bottom));
      source.Add(new Point(b.Right - 1, source.Last<Point>().Y));
      List<Point> pointList1 = source;
      Point point1 = source.Last<Point>();
      int x1 = point1.X;
      point1 = source[1];
      int y1 = point1.Y;
      Point point2 = new Point(x1, y1);
      pointList1.Add(point2);
      source.Add(new Point(r.Right, source.Last<Point>().Y));
      List<Point> pointList2 = source;
      Point point3 = source.Last<Point>();
      int x2 = point3.X;
      point3 = source[0];
      int y2 = point3.Y;
      Point point4 = new Point(x2, y2);
      pointList2.Add(point4);
      g.DrawLines(p, source.ToArray());
    }

    private void drawPointerV(Graphics g, Pen p, Rectangle r, Rectangle b)
    {
      List<Point> source = new List<Point>()
      {
        new Point(r.Left, r.Top - 1)
      };
      source.Add(new Point(r.Right, source.Last<Point>().Y));
      source.Add(new Point(source.Last<Point>().X, b.Top));
      source.Add(new Point(b.Right, source.Last<Point>().Y));
      source.Add(new Point(source.Last<Point>().X, b.Bottom - 1));
      List<Point> pointList1 = source;
      Point point1 = source[1];
      int x1 = point1.X;
      point1 = source.Last<Point>();
      int y1 = point1.Y;
      Point point2 = new Point(x1, y1);
      pointList1.Add(point2);
      source.Add(new Point(source.Last<Point>().X, r.Bottom));
      List<Point> pointList2 = source;
      Point point3 = source[0];
      int x2 = point3.X;
      point3 = source.Last<Point>();
      int y2 = point3.Y;
      Point point4 = new Point(x2, y2);
      pointList2.Add(point4);
      g.DrawLines(p, source.ToArray());
    }

    private void paintLength_V2(Control control)
    {
      using (Graphics graphics = control.CreateGraphics())
      {
        double num1 = this.BeamHeight / this.BeamLength * 10.0;
        int num2 = 5;
        int height = control.Height / 10;
        Size size = new Size((int) ((double) control.Width / (num1 + 0.1) - (double) (2 * num2)), height);
        Point location = new Point(control.Width / 2 - size.Width / 2, control.Height - size.Height - this.labelPanelLength.Size.Height - 2 * num2);
        graphics.FillRectangle((Brush) new SolidBrush(Color.Gray), new Rectangle(location, size));
        this.labelPanelLength.Location = new Point(location.X + size.Width / 2 - this.labelpanelWidth.Width / 2, location.Y + size.Height + num2);
        this.drawPointerH(graphics, Pens.Blue, this.labelPanelLength.Bounds, new Rectangle(location, size));
      }
    }

    private Size size_paintForces
    {
      get => this.size_paintForces_DONOTUSE;
      set
      {
        this.size_paintForces_DONOTUSE = value;
        this.calculateScaler();
      }
    }

    private void paintForces(Control control)
    {
      using (control.CreateGraphics())
      {
        float num1 = (float) (this.BeamHeight / this.BeamLength);
        int num2 = 5;
        this.size_paintForces = new Size(control.Width - 2 * num2, 10);
        this.upperLeft_paintForces = new Point(control.Width / 2 - this.size_paintForces.Width / 2, 2 * control.Height / 3 + this.size_paintForces.Height + 2 * num2);
        PaintEventArgs e = new PaintEventArgs(control.CreateGraphics(), control.ClientRectangle);
        this.beam_paint((object) control, e, this.upperLeft_paintForces, this.size_paintForces, Brushes.White);
        this.beamSupport_paint((object) control, e, this.upperLeft_paintForces, this.size_paintForces, new Size(25, 25), true);
      }
    }

    private void paintRenforcement_V2(Control control)
    {
      using (Graphics graphics = control.CreateGraphics())
      {
        float num1 = (float) (this.BeamHeight / this.BeamWidth);
        int num2 = 5;
        Size size = new Size(control.Width / 2 - 5 * num2 + 1, control.Height / 2 + 5 * num2 + 1);
        Point location = new Point(control.Width / 2 + num2, 3 * num2);
        graphics.FillRectangle(Brushes.Gray, new Rectangle(location, size));
        if (this.RenforcementCount > 0)
        {
          float num3 = Math.Min((float) size.Width / (float) this.BeamWidth, (float) size.Height / (float) this.BeamHeight);
          int r = (int) (this.RenforcementDiameter * (double) num3) / 2;
          int num4 = size.Width / this.RenforcementCount;
          for (int index = 0; index < this.RenforcementCount; ++index)
            this.drawCircul(location.X + num4 / 2 + index * num4, location.Y + size.Height - (int) (this.RenforcementA * (double) num3), r, graphics);
        }
        if (this.RenforcementCount2 <= 0 || !this.userControl_BasicSpec1.DoubleChecked)
          return;
        float num5 = Math.Min((float) size.Width / (float) this.BeamWidth, (float) size.Height / (float) this.BeamHeight);
        int r1 = (int) (this.RenforcementDiameter2 * (double) num5) / 2;
        int num6 = size.Width / this.RenforcementCount2;
        for (int index = 0; index < this.RenforcementCount2; ++index)
          this.drawCircul(location.X + num6 / 2 + index * num6, location.Y + (int) (this.RenforcementA2 * (double) num5), r1, graphics);
      }
    }

    private void drawCircul(int x, int y, int r, Graphics g) => g.FillEllipse(Brushes.Black, x - r, y - r, 2 * r, 2 * r);

    private void beam_paint(object sender, PaintEventArgs e, Point pos, Size size, Brush brush) => e.Graphics.FillRectangle(brush, pos.X, pos.Y - size.Height / 2, size.Width, size.Height);

    private void beamSupport_paint(
      object sender,
      PaintEventArgs e,
      Point beamPos,
      Size beamSize,
      Size supportSize,
      bool white)
    {
      Image image1 = white ? (Image) Resources.LeftSupportWhite : (Image) Resources.LeftSupport;
      e.Graphics.DrawImage(image1, new Rectangle(beamPos.X - supportSize.Width / 2, beamPos.Y, supportSize.Width, supportSize.Height));
      Image image2 = white ? (Image) Resources.RightSupportWhite : (Image) Resources.RightSupport;
      e.Graphics.DrawImage(image2, new Rectangle(beamPos.X + beamSize.Width - supportSize.Width / 2, beamPos.Y, supportSize.Width, supportSize.Height));
    }

    private void Height_NumberChanged(Control control, double num)
    {
      this.BeamHeight = num / 10.0;
      this.labelPanelHeight.Text = this.BeamHeight.ToString();
    }

    private void Length_NumberChanged(Control control, double num)
    {
      this.BeamLength = num * 100.0;
      this.labelPanelLength.Text = num.ToString();
    }

    private void Width_NumberChanged(Control control, double num)
    {
      this.BeamWidth = num / 10.0;
      this.labelpanelWidth.Text = this.BeamWidth.ToString();
    }

    private void userControl_BasicSpec1_Count2Changed(Control sender, double number)
    {
      this.RenforcementCount2 = (int) number;
      this.panel1.Invalidate();
    }

    private void userControl_BasicSpec1_Diameter2Changed(Control sender, double number)
    {
      this.RenforcementDiameter2 = number / 10.0;
      this.panel1.Invalidate();
    }

    private void Diameter_NumberChanged(Control control, double num)
    {
      this.RenforcementDiameter = num / 10.0;
      this.panel1.Invalidate();
    }

    private void Count_NumberChanged(Control control, double num)
    {
      this.RenforcementCount = (int) num;
      this.panel1.Invalidate();
    }

    private void A_NumberChanged(Control control, double num)
    {
      this.RenforcementA = num / 10.0;
      this.panel1.Invalidate();
    }

    private void userControl_AdvancedSpec1_A2Changed(Control sender, double number)
    {
      this.RenforcementA2 = number / 10.0;
      this.panel1.Invalidate();
    }

    private void userControl_AdvancedSpec1_AChanged(Control sender, double number)
    {
      this.RenforcementA = number / 10.0;
      this.panel1.Invalidate();
    }

    private void resetVariablesOfForcesTab()
    {
      this.oldtextBoxForceLocation = "";
      this.oldEnd = this.BeamLength / 100.0;
      this.oldStart = 0.0;
      this.ForceSelcected = (System.Type) null;
    }

    private void disablePointForce_textBox()
    {
      this.textBoxPointForce.Enabled = false;
      this.textBoxForceLocation.Enabled = false;
    }

    private void enablePointForce_textBox()
    {
      this.textBoxPointForce.Enabled = true;
      this.textBoxForceLocation.Enabled = true;
    }

    private void disableDistributedForce_textBox()
    {
      this.textBoxDistributedForce.Enabled = false;
      this.textBoxForceStart.Enabled = false;
      this.textBoxForceEnd.Enabled = false;
    }

    private void enableDistributedForce_textBox()
    {
      this.textBoxDistributedForce.Enabled = true;
      this.textBoxForceStart.Enabled = true;
      this.textBoxForceEnd.Enabled = true;
    }

    private float scaler
    {
      get => (double) this.scaler_DONOTUSE != -1.0 ? this.scaler_DONOTUSE : throw new DataException("scaler == -1");
      set => this.scaler_DONOTUSE = value;
    }

    private void calculateScaler()
    {
      Size sizePaintForces = this.size_paintForces;
      if (this.size_paintForces.Width == 0)
        this.scaler = -1f;
      this.scaler = (float) (this.BeamLength / 100.0) / (float) this.size_paintForces.Width;
    }

    private void resetPointForceControls()
    {
      this.textBoxForceLocation.Text = "";
      this.textBoxPointForce.Text = "";
      this.buttonAddPointForce.Enabled = false;
    }

    private void resetDistributedControls()
    {
      this.textBoxForceStart.Text = "";
      this.textBoxForceEnd.Text = "";
      this.textBoxDistributedForce.Text = "";
      this.buttonAddDistributedForce.Enabled = false;
    }

    private void tryEnable_ButtonAddDistributedForce()
    {
      if (this.textBoxDistributedForce.Text != null && this.textBoxDistributedForce.Text != "" && this.textBoxForceStart.Text != null && this.textBoxForceStart.Text != "" && this.textBoxForceEnd.Text != null && this.textBoxForceEnd.Text != "" && !this.buttonAddPointForce.Enabled)
      {
        this.buttonAddDistributedForce.Enabled = true;
      }
      else
      {
        if (this.textBoxDistributedForce.Text != null && !(this.textBoxDistributedForce.Text == "") && this.textBoxForceStart.Text != null && !(this.textBoxForceStart.Text == "") && this.textBoxForceEnd.Text != null && !(this.textBoxForceEnd.Text == ""))
          return;
        this.buttonAddDistributedForce.Enabled = false;
      }
    }

    private void tryEnable_buttonAddPointForce()
    {
      if (this.textBoxPointForce.Text != null && this.textBoxPointForce.Text != "" && this.textBoxForceLocation.Text != null && this.textBoxForceLocation.Text != "" && !this.buttonAddPointForce.Enabled)
      {
        this.buttonAddPointForce.Enabled = true;
      }
      else
      {
        if (this.textBoxPointForce.Text != null && !(this.textBoxPointForce.Text == "") && this.textBoxForceLocation.Text != null && !(this.textBoxForceLocation.Text == ""))
          return;
        this.buttonAddPointForce.Enabled = false;
      }
    }

    private void button4_Click(object sender, EventArgs e)
    {
      this.forces.Add((Force) new PointBaemForce(double.Parse(this.textBoxPointForce.Text), double.Parse(this.textBoxForceLocation.Text) * 100.0, this.BeamLength));
      this.resetDrawPanel();
      this.resetPointForceControls();
      this.resetVariablesOfForcesTab();
    }

    private void button3_Click(object sender, EventArgs e)
    {
      this.forces.Add((Force) new DistributedBeamForce(double.Parse(this.textBoxDistributedForce.Text), double.Parse(this.textBoxForceStart.Text) * 100.0, double.Parse(this.textBoxForceEnd.Text) * 100.0, this.BeamLength));
      this.resetDrawPanel();
      this.resetDistributedControls();
      this.resetVariablesOfForcesTab();
    }

    private void AddPointForce_TextChanged(object sender, EventArgs e)
    {
      if ((sender as TextBox).Text == "")
      {
        this.tryEnable_buttonAddPointForce();
        this.tryNull_ForceSelcected();
      }
      else
      {
        if (this.ForceSelcected == (System.Type) null)
          this.ForceSelcected = typeof (PointBaemForce);
        this.tryEnable_buttonAddPointForce();
      }
    }

    private void AddDistributedForce_TextChanged(object sender, EventArgs e)
    {
      if ((sender as TextBox).Text == "")
      {
        this.tryEnable_ButtonAddDistributedForce();
        this.tryNull_ForceSelcected();
      }
      else
      {
        if (this.ForceSelcected == (System.Type) null)
          this.ForceSelcected = typeof (DistributedBeamForce);
        this.tryEnable_ButtonAddDistributedForce();
      }
    }

    private void textBoxForceLocation_textChanged(object sender, EventArgs e)
    {
      TextBox textbox = sender as TextBox;
      if (textbox.Text == "")
      {
        this.tryEnable_buttonAddPointForce();
        this.tryNull_ForceSelcected();
      }
      else
      {
        double number;
        this.textChanged(textbox, (Control) null, out number, 100f);
        if (number > this.BeamLength || number < 0.0)
        {
          this.textBoxForceLocation.Text = this.oldtextBoxForceLocation;
        }
        else
        {
          this.oldtextBoxForceLocation = this.textBoxForceLocation.Text;
          this.moveDrawPanelPointForce((int) (number / (double) this.scaler) / 100);
        }
        if (this.ForceSelcected == (System.Type) null)
          this.ForceSelcected = typeof (PointBaemForce);
        this.tryEnable_buttonAddPointForce();
      }
    }

    private void textBoxForceStart_textChanged(object sender, EventArgs e)
    {
      TextBox textbox = sender as TextBox;
      if (textbox.Text == "")
      {
        this.tryEnable_ButtonAddDistributedForce();
        this.tryNull_ForceSelcected();
      }
      else
      {
        double number;
        this.textChanged(textbox, (Control) null, out number, 1f);
        if (number > this.oldEnd || number < 0.0)
        {
          textbox.Text = this.oldStart.ToString();
        }
        else
        {
          this.oldStart = double.Parse(textbox.Text);
          double result;
          if (!double.TryParse(this.textBoxForceEnd.Text, out result))
            result = this.BeamLength / 100.0;
          this.moveDrawPanelDistributedForce((int) (number / (double) this.scaler), (int) (result / (double) this.scaler));
        }
        this.tryEnable_ButtonAddDistributedForce();
        if (!(this.ForceSelcected == (System.Type) null))
          return;
        this.ForceSelcected = typeof (DistributedBeamForce);
      }
    }

    private void textBoxForceEnd_textChanged(object sender, EventArgs e)
    {
      TextBox textbox = sender as TextBox;
      if (textbox.Text == "")
      {
        this.tryEnable_ButtonAddDistributedForce();
        this.tryNull_ForceSelcected();
      }
      else
      {
        double number;
        this.textChanged(textbox, (Control) null, out number, 100f);
        if (number > this.BeamLength || number < this.oldStart)
        {
          textbox.Text = this.oldEnd.ToString();
        }
        else
        {
          this.oldEnd = double.Parse(textbox.Text);
          double result;
          if (!double.TryParse(this.textBoxForceStart.Text, out result))
            result = 0.0;
          this.moveDrawPanelDistributedForce((int) (result / (double) this.scaler), (int) (number / 100.0 / (double) this.scaler));
        }
        this.tryEnable_ButtonAddDistributedForce();
        if (!(this.ForceSelcected == (System.Type) null))
          return;
        this.ForceSelcected = typeof (DistributedBeamForce);
      }
    }

    private System.Type ForceSelcected
    {
      get => this.forceselectedDONOTUSETHIS;
      set
      {
        this.forceselectedDONOTUSETHIS = value;
        if (this.forceselectedDONOTUSETHIS == typeof (PointBaemForce))
        {
          this.disableDistributedForce_textBox();
          this.enablePointForce_textBox();
        }
        else if (this.forceselectedDONOTUSETHIS == typeof (DistributedBeamForce))
        {
          this.disablePointForce_textBox();
          this.enableDistributedForce_textBox();
        }
        else
        {
          this.enableDistributedForce_textBox();
          this.enablePointForce_textBox();
        }
      }
    }

    private void tryNull_ForceSelcected()
    {
      if (this.ForceSelcected == (System.Type) null)
        return;
      if (this.ForceSelcected == typeof (PointBaemForce) && this.textBoxForceLocation.Text == "" && this.textBoxPointForce.Text == "")
      {
        this.ForceSelcected = (System.Type) null;
      }
      else
      {
        if (!(this.ForceSelcected == typeof (DistributedBeamForce)) || !(this.textBoxForceStart.Text == "") || !(this.textBoxForceEnd.Text == "") || !(this.textBoxDistributedForce.Text == ""))
          return;
        this.ForceSelcected = (System.Type) null;
      }
    }

    private void resetDrawPanel()
    {
      this.drawPanelPointForce_LeftClickable = true;
      this.drawPanelPointForce_RightClickable = false;
      this.drawPanelDistributedForce_LeftClickable = true;
      this.drawPanelDistributedForce_RightClickable = false;
      this.toolStripTextBoxForce.Text = "";
      this.drawPanelPointForce.Location = new Point(281, 0);
      this.drawPanelPointForce.Cursor = Cursors.Hand;
      this.drawPanelDistributedForce.Location = new Point(175, 0);
      this.drawPanelDistributedForce.Width = 100;
      this.drawPanelDistributedForce.Cursor = Cursors.Hand;
    }

    private void moveDrawPanelPointForce(int x)
    {
      this.drawPanelPointForce.MouseMove -= new MouseEventHandler(this.drawPanelPointForce_MouseMove);
      this.drawPanelPointForce.Location = new Point(x + this.upperLeft_paintForces.X - this.drawPanelPointForce.Width / 2, this.upperLeft_paintForces.Y - this.drawPanelPointForce.Height);
      this.drawPanelPointForce.MouseMove += new MouseEventHandler(this.drawPanelPointForce_MouseMove);
      if (this.drawPanelPointForce_RightClickable)
        return;
      this.drawPanelPointForce_RightClickable = true;
      this.drawPanelPointForce_LeftClickable = false;
      this.drawPanelDistributedForce_LeftClickable = false;
    }

    private void moveDrawPanelDistributedForce(int start, int end)
    {
      this.drawPanelDistributedForce.Width = end - start;
      this.drawPanelDistributedForce.Location = new Point(start + this.upperLeft_paintForces.X, this.upperLeft_paintForces.Y - this.drawPanelDistributedForce.Height);
      if (this.drawPanelDistributedForce_RightClickable)
        return;
      this.drawPanelDistributedForce_RightClickable = true;
      this.drawPanelDistributedForce_LeftClickable = false;
      this.drawPanelPointForce_LeftClickable = false;
    }

    private void drawPanelPointForce_MouseClick(object sender, MouseEventArgs e)
    {
      Control control = sender as Control;
      switch (e.Button)
      {
        case MouseButtons.Left:
          if (this.drawPanelPointForce_LeftClickable)
          {
            this.ForceSelcected = typeof (PointBaemForce);
            this.textBoxForceLocation.Text = "0";
            control.Cursor = Cursors.SizeAll;
            break;
          }
          if (!this.drawPanelDistributedForce_RightClickable)
            break;
          this.resetDrawPanel();
          this.resetDistributedControls();
          this.drawPanelPointForce_MouseClick((object) this.drawPanelDistributedForce, e);
          break;
        case MouseButtons.Right:
          if (!this.drawPanelPointForce_RightClickable)
            break;
          this.contextMenuStripForce.Show((Control) this.drawPanelPointForce, e.X, e.Y);
          break;
      }
    }

    private void drawPanelPointForce_MouseDown(object sender, MouseEventArgs e)
    {
      if (!this.drawPanelPointForce_RightClickable)
        return;
      this.drawPanelPointForce_Catch = true;
      this.oldXY = e.Location;
    }

    private void drawPanelPointForce_MouseMove(object sender, MouseEventArgs e)
    {
      Control control = sender as Control;
      if (!this.drawPanelPointForce_Catch)
        return;
      int num = this.drawPanelPointForce.Left + e.X - control.Width / 2;
      if (num >= this.upperLeft_paintForces.X - control.Width / 2 && num <= this.upperLeft_paintForces.X + this.size_paintForces.Width - control.Width / 2)
        this.textBoxForceLocation.Text = ((float) (num + control.Width / 2 - this.upperLeft_paintForces.X) * this.scaler).ToString();
    }

    private void drawPanelPointForce_MouseUp(object sender, MouseEventArgs e)
    {
      Control control = sender as Control;
      if (!this.drawPanelPointForce_RightClickable)
        return;
      this.drawPanelPointForce_Catch = false;
      this.drawPanelPointForce.Cursor = Cursors.SizeAll;
    }

    private void drawPanelDistributedForce_MouseClick(object sender, MouseEventArgs e)
    {
      switch (e.Button)
      {
        case MouseButtons.Left:
          if (this.drawPanelDistributedForce_LeftClickable)
          {
            this.ForceSelcected = typeof (DistributedBeamForce);
            this.textBoxForceStart.Text = "0";
            this.textBoxForceEnd.Text = ((float) this.drawPanelDistributedForce.Width * this.scaler).ToString();
            break;
          }
          if (!this.drawPanelPointForce_RightClickable)
            break;
          this.resetDrawPanel();
          this.resetPointForceControls();
          this.drawPanelDistributedForce_MouseClick((object) this.drawPanelPointForce, e);
          break;
        case MouseButtons.Right:
          if (!this.drawPanelDistributedForce_RightClickable)
            break;
          this.contextMenuStripForce.Show((Control) this.drawPanelDistributedForce, e.X, e.Y);
          break;
      }
    }

    private void drawPanelDistributedForce_MouseDown(object sender, MouseEventArgs e)
    {
      Control control = sender as Control;
      if (!this.drawPanelDistributedForce_RightClickable)
        return;
      this.drawPanelDistributedForce_Catch = true;
      this.oldXY = e.Location;
      if (e.X < control.Width / 4)
        this.drawPanelDistributedForce_CatchMood = 1;
      else if (e.X > 3 * control.Width / 4)
        this.drawPanelDistributedForce_CatchMood = 2;
    }

    private void drawPanelDistributedForce_MouseMove(object sender, MouseEventArgs e)
    {
      Control control = sender as Control;
      if (this.drawPanelDistributedForce_Catch)
      {
        switch (this.drawPanelDistributedForce_CatchMood)
        {
          case 1:
            int num1 = this.drawPanelDistributedForce.Width - (e.X - this.oldXY.X);
            int num2 = this.drawPanelDistributedForce.Left + e.X;
            if (num1 <= 0 || num2 < this.upperLeft_paintForces.X)
              break;
            this.textBoxForceStart.Text = ((float) (num2 - this.upperLeft_paintForces.X) * this.scaler).ToString();
            break;
          case 2:
            int left = this.drawPanelDistributedForce.Left;
            int num3 = e.X;
            Size sizePaintForces;
            int num4;
            if (num3 > 0)
            {
              int num5 = num3 + left;
              int x = this.upperLeft_paintForces.X;
              sizePaintForces = this.size_paintForces;
              int width = sizePaintForces.Width;
              int num6 = x + width;
              num4 = num5 <= num6 ? 1 : 0;
            }
            else
              num4 = 0;
            if (num4 != 0)
            {
              Cursor.Clip = this.mouseClip;
            }
            else
            {
              sizePaintForces = this.size_paintForces;
              num3 = sizePaintForces.Width - (int) (this.oldStart / (double) this.scaler);
              Cursor.Clip = new Rectangle(this.drawPanelDistributedForce.PointToScreen(new Point(0, 0)), this.drawPanelDistributedForce.Size);
            }
            this.textBoxForceEnd.Text = ((float) (left - this.upperLeft_paintForces.X + num3) * this.scaler).ToString();
            this.oldXY.X = e.X;
            break;
        }
      }
      else
      {
        if (!this.drawPanelDistributedForce_RightClickable)
          return;
        if (e.X < this.drawPanelDistributedForce.Width / 4)
          this.drawPanelDistributedForce.Cursor = Cursors.SizeWE;
        else if (e.X > 3 * this.drawPanelDistributedForce.Width / 4)
          this.drawPanelDistributedForce.Cursor = Cursors.SizeWE;
      }
    }

    private void drawPanelDistributedForce_MouseUp(object sender, MouseEventArgs e)
    {
      Control control = sender as Control;
      this.drawPanelDistributedForce_Catch = false;
      this.drawPanelDistributedForce_CatchMood = -1;
      control.Cursor = Cursors.Hand;
      Cursor.Clip = this.mouseClip;
    }

    private void addToolStrip_SetEnable()
    {
      if (this.toolStripMenuItem1.Enabled)
      {
        if (this.buttonAddPointForce.Enabled || this.buttonAddDistributedForce.Enabled)
          return;
        this.toolStripMenuItem1.Enabled = false;
      }
      else if (this.buttonAddPointForce.Enabled || this.buttonAddDistributedForce.Enabled)
        this.toolStripMenuItem1.Enabled = true;
    }

    private void buttonAddPointForce_EnabledChanged(object sender, EventArgs e) => this.addToolStrip_SetEnable();

    private void buttonAddDistributedForce_EnabledChanged(object sender, EventArgs e) => this.addToolStrip_SetEnable();

    private void contextMenuStripForce_Opening(object sender, CancelEventArgs e)
    {
      if (this.ForceSelcected == typeof (PointBaemForce))
      {
        this.toolStripTextBoxForce.Text = this.textBoxPointForce.Text;
      }
      else
      {
        if (!(this.ForceSelcected == typeof (DistributedBeamForce)))
          return;
        this.toolStripTextBoxForce.Text = this.textBoxDistributedForce.Text;
      }
    }

    private void toolStripTextBoxForce_TextChanged(object sender, EventArgs e)
    {
      if (this.ForceSelcected == typeof (PointBaemForce))
      {
        this.textBoxPointForce.Text = (sender as ToolStripTextBox).Text;
      }
      else
      {
        if (!(this.ForceSelcected == typeof (DistributedBeamForce)))
          return;
        this.textBoxDistributedForce.Text = (sender as ToolStripTextBox).Text;
      }
    }

    private void toolStripMenuItem1_Click(object sender, EventArgs e)
    {
      if (this.ForceSelcected == typeof (PointBaemForce))
      {
        this.button4_Click(sender, e);
      }
      else
      {
        if (!(this.ForceSelcected == typeof (DistributedBeamForce)))
          return;
        this.button3_Click(sender, e);
      }
    }

    private void cancelToolStripMenuItem_Click(object sender, EventArgs e)
    {
      this.resetVariablesOfForcesTab();
      this.resetDrawPanel();
      this.resetDistributedControls();
      this.resetPointForceControls();
    }

    private void setStage0()
    {
      this.userControl_AdvancedSpec1.Visible = false;
      this.userControl_BasicSpec1.Visible = true;
      this.panelForces.Visible = false;
      this.button1.Visible = true;
      this.button2.Visible = true;
      this.button3.Visible = false;
      this.buttonOK.Visible = false;
      this.buttonCancel.Visible = true;
      this.p = new mainBeamSpec.painting(this.paintLength_V2);
      this.p += new mainBeamSpec.painting(this.paintHeightWidth_V2);
      this.p += new mainBeamSpec.painting(this.paintRenforcement_V2);
      this.panel1.Width = 530;
      this.labelPanelHeight.Visible = true;
      this.labelPanelLength.Visible = true;
      this.labelpanelWidth.Visible = true;
      this.panel1.Invalidate();
    }

    private void setStage1()
    {
      this.userControl_AdvancedSpec1.Visible = true;
      this.userControl_BasicSpec1.Visible = false;
      this.panelForces.Visible = false;
      this.button1.Visible = false;
      this.button2.Visible = true;
      this.button3.Visible = true;
      this.buttonOK.Visible = false;
      this.buttonCancel.Visible = true;
      this.panel1.Width = 530;
      this.labelPanelHeight.Visible = true;
      this.labelPanelLength.Visible = true;
      this.labelpanelWidth.Visible = true;
    }

    private void setStage2()
    {
      this.panelForces.Visible = true;
      this.userControl_AdvancedSpec1.Visible = false;
      this.userControl_BasicSpec1.Visible = false;
      this.button1.Visible = false;
      this.button2.Visible = false;
      this.button3.Visible = true;
      this.buttonOK.Visible = true;
      this.buttonCancel.Visible = true;
      this.drawPanelDistributedForce.Visible = true;
      this.drawPanelPointForce.Visible = true;
      this.panel1.Width = 435;
      this.p = new mainBeamSpec.painting(this.paintForces);
      this.panel1.Invalidate();
      this.resetVariablesOfForcesTab();
      this.forces = new List<Force>();
      this.resetDistributedControls();
      this.resetDrawPanel();
      this.resetPointForceControls();
    }

    private void desetStage0()
    {
      this.labelPanelHeight.Visible = false;
      this.labelPanelLength.Visible = false;
      this.labelpanelWidth.Visible = false;
    }

    private void desetStage1()
    {
      this.labelPanelHeight.Visible = false;
      this.labelPanelLength.Visible = false;
      this.labelpanelWidth.Visible = false;
    }

    private void desetStage2()
    {
      this.drawPanelDistributedForce.Visible = false;
      this.drawPanelPointForce.Visible = false;
      this.p = (mainBeamSpec.painting) null;
    }

    private void button3_Click_1(object sender, EventArgs e) => this.stage = this.stage - 2 + this.stage % 2;

    private void button1_Click(object sender, EventArgs e)
    {
      if (!this.userControl_BasicSpec1.IsErrorFree())
      {
        int num = (int) MessageBox.Show("something wrong", "error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
      else
        this.stage = 1;
    }

    private void button2_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.stage == 0)
        {
          if (!this.userControl_BasicSpec1.IsErrorFree())
          {
            int num1 = (int) MessageBox.Show("something wrong", "error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else if (!this.userControl_AdvancedSpec1.IsErrorFree())
          {
            int num2 = (int) MessageBox.Show("something wrong", "error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
            this.stage = 1;
          }
          else
          {
            if (this.beamWrap == null)
              this.beamWrap = new BeamWrapper();
            this.beamWrap.beam = !this.userControl_BasicSpec1.DoubleChecked ? (RenforcedBeem) new SinReinRecBeem(this.BeamHeight, this.BeamLength, this.BeamWidth, this.userControl_BasicSpec1.Diameter, this.userControl_BasicSpec1.Count) : (RenforcedBeem) new DoubReinRecBeem(this.BeamHeight, this.BeamLength, this.BeamWidth, this.userControl_BasicSpec1.Diameter, this.userControl_BasicSpec1.Diameter2, this.userControl_BasicSpec1.Count, this.userControl_BasicSpec1.Count2);
            this.stage = 2;
          }
        }
        else
        {
          if (this.stage != 1)
            return;
          if (!this.userControl_AdvancedSpec1.IsErrorFree())
          {
            int num3 = (int) MessageBox.Show("something wrong", "error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          }
          else
          {
            if (this.beamWrap == null)
              this.beamWrap = new BeamWrapper();
            this.beamWrap.beam = !this.userControl_BasicSpec1.DoubleChecked ? (RenforcedBeem) new SinReinRecBeem(this.userControl_AdvancedSpec1.Fc, this.userControl_AdvancedSpec1.Fs, this.BeamHeight, this.BeamLength, this.BeamWidth, this.userControl_AdvancedSpec1.Es, this.userControl_BasicSpec1.Diameter, this.userControl_BasicSpec1.Count, this.userControl_AdvancedSpec1.A, this.userControl_AdvancedSpec1.Chose) : (RenforcedBeem) new DoubReinRecBeem(this.userControl_AdvancedSpec1.Fc, this.userControl_AdvancedSpec1.Fs, this.BeamHeight, this.BeamLength, this.BeamWidth, this.userControl_AdvancedSpec1.Es, this.userControl_BasicSpec1.Diameter, this.userControl_BasicSpec1.Diameter2, this.userControl_BasicSpec1.Count, this.userControl_BasicSpec1.Count2, this.userControl_AdvancedSpec1.A, this.userControl_AdvancedSpec1.A2, this.userControl_AdvancedSpec1.Chose);
            this.stage = 2;
          }
        }
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message, "error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.groupBox4 = new GroupBox();
      this.buttonAddDistributedForce = new Button();
      this.label22 = new Label();
      this.label21 = new Label();
      this.label20 = new Label();
      this.textBoxForceEnd = new TextBox();
      this.textBoxForceStart = new TextBox();
      this.textBoxDistributedForce = new TextBox();
      this.groupBox3 = new GroupBox();
      this.buttonAddPointForce = new Button();
      this.label19 = new Label();
      this.label18 = new Label();
      this.textBoxForceLocation = new TextBox();
      this.textBoxPointForce = new TextBox();
      this.panel1 = new Panel();
      this.drawPanelDistributedForce = new UserControl_Forces();
      this.drawPanelPointForce = new UserControl_Forces();
      this.labelPanelLength = new Label();
      this.labelpanelWidth = new Label();
      this.labelPanelHeight = new Label();
      this.buttonOK = new Button();
      this.buttonCancel = new Button();
      this.contextMenuStripForce = new ContextMenuStrip(this.components);
      this.toolStripTextBoxForce = new ToolStripTextBox();
      this.toolStripSeparator1 = new ToolStripSeparator();
      this.toolStripMenuItem1 = new ToolStripMenuItem();
      this.cancelToolStripMenuItem = new ToolStripMenuItem();
      this.button1 = new Button();
      this.button2 = new Button();
      this.button3 = new Button();
      this.panelForces = new Panel();
      this.userControl_BasicSpec1 = new UserControl_BasicSpec();
      this.userControl_AdvancedSpec1 = new UserControl_AdvancedSpec();
      this.groupBox4.SuspendLayout();
      this.groupBox3.SuspendLayout();
      this.panel1.SuspendLayout();
      this.contextMenuStripForce.SuspendLayout();
      this.panelForces.SuspendLayout();
      this.SuspendLayout();
      this.groupBox4.Controls.Add((Control) this.buttonAddDistributedForce);
      this.groupBox4.Controls.Add((Control) this.label22);
      this.groupBox4.Controls.Add((Control) this.label21);
      this.groupBox4.Controls.Add((Control) this.label20);
      this.groupBox4.Controls.Add((Control) this.textBoxForceEnd);
      this.groupBox4.Controls.Add((Control) this.textBoxForceStart);
      this.groupBox4.Controls.Add((Control) this.textBoxDistributedForce);
      this.groupBox4.Location = new Point(3, 76);
      this.groupBox4.Name = "groupBox4";
      this.groupBox4.Size = new Size(327, 100);
      this.groupBox4.TabIndex = 3;
      this.groupBox4.TabStop = false;
      this.groupBox4.Text = "distributed force";
      this.buttonAddDistributedForce.Enabled = false;
      this.buttonAddDistributedForce.Location = new Point(6, 65);
      this.buttonAddDistributedForce.Name = "buttonAddDistributedForce";
      this.buttonAddDistributedForce.Size = new Size(299, 23);
      this.buttonAddDistributedForce.TabIndex = 6;
      this.buttonAddDistributedForce.Text = "add";
      this.buttonAddDistributedForce.UseVisualStyleBackColor = true;
      this.buttonAddDistributedForce.EnabledChanged += new EventHandler(this.buttonAddDistributedForce_EnabledChanged);
      this.buttonAddDistributedForce.Click += new EventHandler(this.button3_Click);
      this.label22.AutoSize = true;
      this.label22.Location = new Point(234, 23);
      this.label22.Name = "label22";
      this.label22.Size = new Size(59, 13);
      this.label22.TabIndex = 5;
      this.label22.Text = "end locatin";
      this.label21.AutoSize = true;
      this.label21.Location = new Point(125, 23);
      this.label21.Name = "label21";
      this.label21.Size = new Size(70, 13);
      this.label21.TabIndex = 4;
      this.label21.Text = "start location";
      this.label20.AutoSize = true;
      this.label20.Location = new Point(16, 23);
      this.label20.Name = "label20";
      this.label20.Size = new Size(78, 13);
      this.label20.TabIndex = 3;
      this.label20.Text = "foce in newten";
      this.textBoxForceEnd.Location = new Point(220, 39);
      this.textBoxForceEnd.Name = "textBoxForceEnd";
      this.textBoxForceEnd.Size = new Size(85, 20);
      this.textBoxForceEnd.TabIndex = 2;
      this.textBoxForceEnd.TextChanged += new EventHandler(this.textBoxForceEnd_textChanged);
      this.textBoxForceEnd.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.textBoxForceStart.Location = new Point(113, 39);
      this.textBoxForceStart.Name = "textBoxForceStart";
      this.textBoxForceStart.Size = new Size(85, 20);
      this.textBoxForceStart.TabIndex = 1;
      this.textBoxForceStart.TextChanged += new EventHandler(this.textBoxForceStart_textChanged);
      this.textBoxForceStart.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.textBoxDistributedForce.Location = new Point(6, 39);
      this.textBoxDistributedForce.Name = "textBoxDistributedForce";
      this.textBoxDistributedForce.Size = new Size(85, 20);
      this.textBoxDistributedForce.TabIndex = 0;
      this.textBoxDistributedForce.TextChanged += new EventHandler(this.AddDistributedForce_TextChanged);
      this.textBoxDistributedForce.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.groupBox3.Controls.Add((Control) this.buttonAddPointForce);
      this.groupBox3.Controls.Add((Control) this.label19);
      this.groupBox3.Controls.Add((Control) this.label18);
      this.groupBox3.Controls.Add((Control) this.textBoxForceLocation);
      this.groupBox3.Controls.Add((Control) this.textBoxPointForce);
      this.groupBox3.Location = new Point(3, 3);
      this.groupBox3.Name = "groupBox3";
      this.groupBox3.Size = new Size(327, 67);
      this.groupBox3.TabIndex = 2;
      this.groupBox3.TabStop = false;
      this.groupBox3.Text = "point force";
      this.buttonAddPointForce.Enabled = false;
      this.buttonAddPointForce.Location = new Point(218, 30);
      this.buttonAddPointForce.Name = "buttonAddPointForce";
      this.buttonAddPointForce.Size = new Size(87, 23);
      this.buttonAddPointForce.TabIndex = 4;
      this.buttonAddPointForce.Text = "add";
      this.buttonAddPointForce.UseVisualStyleBackColor = true;
      this.buttonAddPointForce.EnabledChanged += new EventHandler(this.buttonAddPointForce_EnabledChanged);
      this.buttonAddPointForce.Click += new EventHandler(this.button4_Click);
      this.label19.AutoSize = true;
      this.label19.Location = new Point(128, 16);
      this.label19.Name = "label19";
      this.label19.Size = new Size(44, 13);
      this.label19.TabIndex = 3;
      this.label19.Text = "location";
      this.label18.AutoSize = true;
      this.label18.Location = new Point(16, 16);
      this.label18.Name = "label18";
      this.label18.Size = new Size(78, 13);
      this.label18.TabIndex = 2;
      this.label18.Text = "foce in newten";
      this.textBoxForceLocation.Location = new Point(112, 33);
      this.textBoxForceLocation.Name = "textBoxForceLocation";
      this.textBoxForceLocation.Size = new Size(100, 20);
      this.textBoxForceLocation.TabIndex = 1;
      this.textBoxForceLocation.TextChanged += new EventHandler(this.textBoxForceLocation_textChanged);
      this.textBoxForceLocation.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.textBoxPointForce.Location = new Point(6, 32);
      this.textBoxPointForce.Name = "textBoxPointForce";
      this.textBoxPointForce.Size = new Size(100, 20);
      this.textBoxPointForce.TabIndex = 0;
      this.textBoxPointForce.TextChanged += new EventHandler(this.AddPointForce_TextChanged);
      this.textBoxPointForce.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.panel1.BackColor = SystemColors.Control;
      this.panel1.BorderStyle = BorderStyle.FixedSingle;
      this.panel1.Controls.Add((Control) this.drawPanelDistributedForce);
      this.panel1.Controls.Add((Control) this.drawPanelPointForce);
      this.panel1.Controls.Add((Control) this.labelPanelLength);
      this.panel1.Controls.Add((Control) this.labelpanelWidth);
      this.panel1.Controls.Add((Control) this.labelPanelHeight);
      this.panel1.Dock = DockStyle.Right;
      this.panel1.Location = new Point(260, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(530, 548);
      this.panel1.TabIndex = 1;
      this.panel1.Paint += new PaintEventHandler(this.panel1_Paint);
      this.drawPanelDistributedForce.Location = new Point(345, 99);
      this.drawPanelDistributedForce.Name = "drawPanelDistributedForce";
      this.drawPanelDistributedForce.Size = new Size(125, 40);
      this.drawPanelDistributedForce.TabIndex = 6;
      this.drawPanelDistributedForce.Type = forceType.distributed;
      this.drawPanelDistributedForce.Visible = false;
      this.drawPanelDistributedForce.MouseClick += new MouseEventHandler(this.drawPanelDistributedForce_MouseClick);
      this.drawPanelDistributedForce.MouseDown += new MouseEventHandler(this.drawPanelDistributedForce_MouseDown);
      this.drawPanelDistributedForce.MouseMove += new MouseEventHandler(this.drawPanelDistributedForce_MouseMove);
      this.drawPanelDistributedForce.MouseUp += new MouseEventHandler(this.drawPanelDistributedForce_MouseUp);
      this.drawPanelPointForce.Location = new Point(319, 47);
      this.drawPanelPointForce.Name = "drawPanelPointForce";
      this.drawPanelPointForce.Size = new Size(20, 92);
      this.drawPanelPointForce.TabIndex = 5;
      this.drawPanelPointForce.Type = forceType.point;
      this.drawPanelPointForce.Visible = false;
      this.drawPanelPointForce.MouseClick += new MouseEventHandler(this.drawPanelPointForce_MouseClick);
      this.drawPanelPointForce.MouseDown += new MouseEventHandler(this.drawPanelPointForce_MouseDown);
      this.drawPanelPointForce.MouseMove += new MouseEventHandler(this.drawPanelPointForce_MouseMove);
      this.drawPanelPointForce.MouseUp += new MouseEventHandler(this.drawPanelPointForce_MouseUp);
      this.labelPanelLength.AutoSize = true;
      this.labelPanelLength.Location = new Point(134, 306);
      this.labelPanelLength.Name = "labelPanelLength";
      this.labelPanelLength.Size = new Size(13, 13);
      this.labelPanelLength.TabIndex = 2;
      this.labelPanelLength.Text = "2";
      this.labelPanelLength.TextChanged += new EventHandler(this.labelPanel_TextChanged);
      this.labelpanelWidth.AutoSize = true;
      this.labelpanelWidth.Location = new Point(95, 169);
      this.labelpanelWidth.Name = "labelpanelWidth";
      this.labelpanelWidth.Size = new Size(19, 13);
      this.labelpanelWidth.TabIndex = 1;
      this.labelpanelWidth.Text = "25";
      this.labelpanelWidth.TextAlign = ContentAlignment.MiddleCenter;
      this.labelpanelWidth.TextChanged += new EventHandler(this.labelPanel_TextChanged);
      this.labelPanelHeight.AutoSize = true;
      this.labelPanelHeight.Location = new Point(137, 130);
      this.labelPanelHeight.Name = "labelPanelHeight";
      this.labelPanelHeight.Size = new Size(19, 13);
      this.labelPanelHeight.TabIndex = 0;
      this.labelPanelHeight.Text = "55";
      this.labelPanelHeight.TextAlign = ContentAlignment.MiddleCenter;
      this.labelPanelHeight.TextChanged += new EventHandler(this.labelPanel_TextChanged);
      this.buttonOK.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonOK.Location = new Point(12, 459);
      this.buttonOK.Name = "buttonOK";
      this.buttonOK.Size = new Size(100, 55);
      this.buttonOK.TabIndex = 2;
      this.buttonOK.Text = "OK";
      this.buttonOK.UseVisualStyleBackColor = true;
      this.buttonOK.Visible = false;
      this.buttonOK.Click += new EventHandler(this.buttonOk_Click);
      this.buttonCancel.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
      this.buttonCancel.Location = new Point(138, 459);
      this.buttonCancel.Name = "buttonCancel";
      this.buttonCancel.Size = new Size(101, 55);
      this.buttonCancel.TabIndex = 3;
      this.buttonCancel.Text = "Cancel";
      this.buttonCancel.UseVisualStyleBackColor = true;
      this.buttonCancel.Visible = false;
      this.buttonCancel.Click += new EventHandler(this.buttonCancel_Click);
      this.contextMenuStripForce.Items.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.toolStripTextBoxForce,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.toolStripMenuItem1,
        (ToolStripItem) this.cancelToolStripMenuItem
      });
      this.contextMenuStripForce.Name = "contextMenuStripForce";
      this.contextMenuStripForce.Size = new Size(161, 79);
      this.contextMenuStripForce.Opening += new CancelEventHandler(this.contextMenuStripForce_Opening);
      this.toolStripTextBoxForce.Name = "toolStripTextBoxForce";
      this.toolStripTextBoxForce.Size = new Size(100, 23);
      this.toolStripTextBoxForce.KeyPress += new KeyPressEventHandler(this.HandleNumberedEntry);
      this.toolStripTextBoxForce.TextChanged += new EventHandler(this.toolStripTextBoxForce_TextChanged);
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      this.toolStripSeparator1.Size = new Size(157, 6);
      this.toolStripMenuItem1.Enabled = false;
      this.toolStripMenuItem1.Name = "toolStripMenuItem1";
      this.toolStripMenuItem1.Size = new Size(160, 22);
      this.toolStripMenuItem1.Text = "Add";
      this.toolStripMenuItem1.Click += new EventHandler(this.toolStripMenuItem1_Click);
      this.cancelToolStripMenuItem.Name = "cancelToolStripMenuItem";
      this.cancelToolStripMenuItem.Size = new Size(160, 22);
      this.cancelToolStripMenuItem.Text = "Cancel";
      this.cancelToolStripMenuItem.Click += new EventHandler(this.cancelToolStripMenuItem_Click);
      this.button1.Location = new Point(28, 372);
      this.button1.Name = "button1";
      this.button1.Size = new Size(200, 39);
      this.button1.TabIndex = 50;
      this.button1.Text = "Show Advanced";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.button1_Click);
      this.button2.Location = new Point(138, 417);
      this.button2.Name = "button2";
      this.button2.Size = new Size(101, 36);
      this.button2.TabIndex = 51;
      this.button2.Text = "Next";
      this.button2.UseVisualStyleBackColor = true;
      this.button2.Click += new EventHandler(this.button2_Click);
      this.button3.Location = new Point(11, 417);
      this.button3.Name = "button3";
      this.button3.Size = new Size(101, 36);
      this.button3.TabIndex = 51;
      this.button3.Text = "Back";
      this.button3.UseVisualStyleBackColor = true;
      this.button3.Visible = false;
      this.button3.Click += new EventHandler(this.button3_Click_1);
      this.panelForces.Controls.Add((Control) this.groupBox4);
      this.panelForces.Controls.Add((Control) this.groupBox3);
      this.panelForces.Location = new Point(12, 12);
      this.panelForces.Name = "panelForces";
      this.panelForces.Size = new Size(335, 183);
      this.panelForces.TabIndex = 5;
      this.userControl_BasicSpec1.Location = new Point(11, 12);
      this.userControl_BasicSpec1.Name = "userControl_BasicSpec1";
      this.userControl_BasicSpec1.Size = new Size(228, 333);
      this.userControl_BasicSpec1.TabIndex = 52;
      this.userControl_BasicSpec1.HeightChanged += new UserControl_BasicSpec.NumberChangedHandler(this.Height_NumberChanged);
      this.userControl_BasicSpec1.WidthChanged += new UserControl_BasicSpec.NumberChangedHandler(this.Width_NumberChanged);
      this.userControl_BasicSpec1.LengthChanged += new UserControl_BasicSpec.NumberChangedHandler(this.Length_NumberChanged);
      this.userControl_BasicSpec1.DiameterChanged += new UserControl_BasicSpec.NumberChangedHandler(this.Diameter_NumberChanged);
      this.userControl_BasicSpec1.CountChanged += new UserControl_BasicSpec.NumberChangedHandler(this.Count_NumberChanged);
      this.userControl_BasicSpec1.Diameter2Changed += new UserControl_BasicSpec.NumberChangedHandler(this.userControl_BasicSpec1_Diameter2Changed);
      this.userControl_BasicSpec1.Count2Changed += new UserControl_BasicSpec.NumberChangedHandler(this.userControl_BasicSpec1_Count2Changed);
      this.userControl_BasicSpec1.DoubleCheckedChanged += new EventHandler(this.userControl_BasicSpec1_DoubleCheckedChanged);
      this.userControl_AdvancedSpec1.Basic = this.userControl_BasicSpec1;
      this.userControl_AdvancedSpec1.Location = new Point(12, 12);
      this.userControl_AdvancedSpec1.Name = "userControl_AdvancedSpec1";
      this.userControl_AdvancedSpec1.Size = new Size(221, 208);
      this.userControl_AdvancedSpec1.TabIndex = 5;
      this.userControl_AdvancedSpec1.AChanged += new UserControl_AdvancedSpec.NumberChangedHandler(this.userControl_AdvancedSpec1_AChanged);
      this.userControl_AdvancedSpec1.A2Changed += new UserControl_AdvancedSpec.NumberChangedHandler(this.userControl_AdvancedSpec1_A2Changed);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(790, 548);
      this.ControlBox = false;
      this.Controls.Add((Control) this.userControl_BasicSpec1);
      this.Controls.Add((Control) this.button3);
      this.Controls.Add((Control) this.button2);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.buttonCancel);
      this.Controls.Add((Control) this.userControl_AdvancedSpec1);
      this.Controls.Add((Control) this.buttonOK);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.panelForces);
      this.FormBorderStyle = FormBorderStyle.Fixed3D;
      this.MaximumSize = new Size(800, 580);
      this.MinimumSize = new Size(800, 580);
      this.Name = nameof (mainBeamSpec);
      this.ShowIcon = false;
      this.Text = nameof (mainBeamSpec);
      this.Load += new EventHandler(this.mainBeamSpec_Load);
      this.groupBox4.ResumeLayout(false);
      this.groupBox4.PerformLayout();
      this.groupBox3.ResumeLayout(false);
      this.groupBox3.PerformLayout();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.contextMenuStripForce.ResumeLayout(false);
      this.contextMenuStripForce.PerformLayout();
      this.panelForces.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    private delegate void painting(Control control);
  }
}
