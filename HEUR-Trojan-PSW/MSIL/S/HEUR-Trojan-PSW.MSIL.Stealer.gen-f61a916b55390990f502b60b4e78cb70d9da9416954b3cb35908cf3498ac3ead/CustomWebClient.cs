// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.CustomWebClient
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using System;
using System.Net;
using System.Threading.Tasks;

namespace SimpleVideoCutter
{
  internal class CustomWebClient : WebClient
  {
    private readonly System.Windows.Forms.Timer timeoutTimer;

    public int TimeoutMs { get; set; }

    public CustomWebClient()
    {
      this.timeoutTimer = new System.Windows.Forms.Timer();
      this.timeoutTimer.Tick += (EventHandler) ((sender, e) => this.CancelAsync());
    }

    protected override WebRequest GetWebRequest(Uri address)
    {
      WebRequest webRequest = base.GetWebRequest(address);
      webRequest.Timeout = this.TimeoutMs;
      return webRequest;
    }

    public new async Task DownloadFileTaskAsync(Uri address, string fileName)
    {
      this.timeoutTimer.Interval = this.TimeoutMs;
      this.timeoutTimer.Start();
      await base.DownloadFileTaskAsync(address, fileName);
      this.timeoutTimer.Stop();
    }

    protected override void OnDownloadProgressChanged(DownloadProgressChangedEventArgs e)
    {
      this.timeoutTimer.Stop();
      this.timeoutTimer.Start();
      base.OnDownloadProgressChanged(e);
    }

    private async Task RunWithTimeout(Task task)
    {
      object obj = (object) task;
      Task task1 = await Task.WhenAny(task, Task.Delay(this.TimeoutMs));
      if (obj == task1)
      {
        obj = (object) null;
        task1 = (Task) null;
        await task;
      }
      else
      {
        this.CancelAsync();
        throw new TimeoutException();
      }
    }
  }
}
