// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Core.ExtendedPathFilter
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Core
{
  public class ExtendedPathFilter : PathFilter
  {
    private long \uE003;
    private long \uE002 = long.MaxValue;
    private DateTime \uE001 = DateTime.MinValue;
    private DateTime \uE000 = DateTime.MaxValue;

    public ExtendedPathFilter(string filter, long minSize, long maxSize)
      : base(filter)
    {
      this.MinSize = minSize;
      this.MaxSize = maxSize;
    }

    public ExtendedPathFilter(string filter, DateTime minDate, DateTime maxDate)
      : base(filter)
    {
      this.MinDate = minDate;
      this.MaxDate = maxDate;
    }

    public ExtendedPathFilter(
      string filter,
      long minSize,
      long maxSize,
      DateTime minDate,
      DateTime maxDate)
      : base(filter)
    {
      this.MinSize = minSize;
      this.MaxSize = maxSize;
      this.MinDate = minDate;
      this.MaxDate = maxDate;
    }

    public override bool IsMatch(string name)
    {
      bool flag = base.IsMatch(name);
      if (flag)
      {
        FileInfo fileInfo = new FileInfo(name);
        flag = this.MinSize <= fileInfo.Length && this.MaxSize >= fileInfo.Length && this.MinDate <= fileInfo.LastWriteTime && this.MaxDate >= fileInfo.LastWriteTime;
      }
      return flag;
    }

    public long MinSize
    {
      get => this.\uE003;
      set => this.\uE003 = value >= 0L && this.\uE002 >= value ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }

    public long MaxSize
    {
      get => this.\uE002;
      set => this.\uE002 = value >= 0L && this.\uE003 <= value ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }

    public DateTime MinDate
    {
      get => this.\uE001;
      set => this.\uE001 = !(value > this.\uE000) ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002), \uE01B.\uE000("\uF658\uF665\uF67E\uF678\uF678\uF679\uF66E\uF63D\uF650\uF67C\uF665\uF659\uF67C\uF669\uF678", 63005));
    }

    public DateTime MaxDate
    {
      get => this.\uE000;
      set => this.\uE000 = !(this.\uE001 > value) ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002), \uE01B.\uE000("\uF83F\uF802\uF819\uF81F\uF81F\uF81E\uF809\uF85A\uF837\uF813\uF814\uF83E\uF81B\uF80E\uF81F", 63610));
    }
  }
}
