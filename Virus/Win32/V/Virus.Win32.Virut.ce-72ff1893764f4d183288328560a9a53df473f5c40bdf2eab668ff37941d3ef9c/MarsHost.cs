// Decompiled with JetBrains decompiler
// Type: Com.HP.PLS.UsageTracking.PE.MarsHost
// Assembly: hppusg, Version=1.0.2680.22021, Culture=neutral, PublicKeyToken=null
// MVID: 70D0B824-0174-41FD-8984-AD6133AB72F5
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Virut.ce-72ff1893764f4d183288328560a9a53df473f5c40bdf2eab668ff37941d3ef9c.exe

using Com.HP.App.HPTools;
using Com.HP.App.HPTools.HPDebug;
using Interop.MarsCore;
using Microsoft.Win32;
using System;
using System.Collections.Specialized;
using System.IO;
using System.Runtime.InteropServices;
using System.Timers;
using System.Windows.Forms;

namespace Com.HP.PLS.UsageTracking.PE
{
  public class MarsHost
  {
    private System.Timers.Timer _appTimer = new System.Timers.Timer(OrwellConstants.MAIN_SLEEP_TIME);
    private System.Timers.Timer _appShutdownTimer = new System.Timers.Timer(OrwellConstants.ONE_TIME_OPTOUT_SHUTDOWN_CHECK_INTERVAL);
    private UsageTrackingManager _utMgr;
    private Mars _mars;
    private short _intervalCounter = 0;
    private uint prevCapabilities = 0;

    public MarsHost()
    {
      this._appTimer.Elapsed += new ElapsedEventHandler(this._appTimer_Elapsed);
      this._appShutdownTimer.Elapsed += new ElapsedEventHandler(this._appShutdownTimer_Elapsed);
      this._appShutdownTimer.AutoReset = false;
      this._appShutdownTimer.Enabled = true;
      Application.ApplicationExit += new EventHandler(this.Application_ApplicationExit);
    }

    public void StartHosting()
    {
      try
      {
        DebugOutput.WriteLine("StartHosting() >>", 3);
        this._mars = (Mars) new MarsClass();
        this._utMgr = new UsageTrackingManager(this._mars);
        DebugOutput.WriteLine("After calling the UsageTrackingManager constructor", 3);
        this._utMgr.CreateTrackers();
        this._utMgr.InitTrackers();
        this._appTimer.Start();
        UniqueStringCollection stringCollection = new UniqueStringCollection();
        stringCollection.Add(OrwellConstants.IS_FIRST_RUN);
        PersistenceManager.SetObject(OrwellConstants.ANY_STRINGS_DATA, (IObjectPersistence) stringCollection);
        DebugOutput.WriteLine("StartHosting() <<", 3);
      }
      catch (COMException ex)
      {
        DebugOutput.WriteLine("COM Exception caught - {0}", 1, new object[1]
        {
          (object) ex.Message
        });
      }
    }

    public void StopHosting()
    {
    }

    private bool DidUserDeclineOrOptOut()
    {
      bool flag1 = false;
      RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey(OrwellConstants.HPPUSG_REG_KEY_NAME, true);
      if (registryKey1.GetValue(OrwellConstants.STOP_RUNNING_VALUE_NAME) != null)
      {
        DebugOutput.WriteLine("The stop running value exists.  Stop running!", 3);
        registryKey1.DeleteValue(OrwellConstants.STOP_RUNNING_VALUE_NAME);
        flag1 = true;
      }
      if ((int) ++this._intervalCounter >= (int) OrwellConstants.INTERVAL_TO_CHECK_OPT_OUT)
      {
        this._intervalCounter = (short) 0;
        try
        {
          uint num = 0;
          bool flag2 = true;
          try
          {
            if (this._mars != null)
            {
              ((IMars) this._mars).GetEnabledCapabilities(ref num);
              flag2 = true;
              if ((int) this.prevCapabilities != (int) num)
              {
                DebugOutput.WriteLine("capabilities = {0}", 3, new object[1]
                {
                  (object) num
                });
                this.prevCapabilities = num;
              }
            }
          }
          catch (Exception ex)
          {
            flag2 = false;
            DebugOutput.WriteLine("Mars object is not null, but method call throws an exception! - {0}", 1, new object[1]
            {
              (object) ex.Message
            });
          }
          bool flag3 = false;
          bool flag4 = false;
          RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey(MarsConstants.USG_REG_KEY_NAME);
          if (registryKey2 != null)
          {
            int subKeyCount = registryKey2.SubKeyCount;
            string[] subKeyNames = registryKey2.GetSubKeyNames();
            RegistryKey registryKey3 = (RegistryKey) null;
            DebugOutput.WriteLine("The number of Mars device keys in the registry is {0}", 3, new object[1]
            {
              (object) subKeyCount
            });
            for (int index = 0; index < subKeyCount; ++index)
            {
              RegistryKey registryKey4 = registryKey2.OpenSubKey(subKeyNames[index]);
              if (registryKey4 != null)
              {
                DebugOutput.WriteLine("product Instance ID Key - {0}", 3, new object[1]
                {
                  (object) registryKey4.ToString()
                });
                if (registryKey4.Name.IndexOf(OrwellConstants.LASERJET_NAME) != -1)
                {
                  flag4 = true;
                  if (((string) registryKey4.GetValue(MarsConstants.DATA_FOLDER)).IndexOf(OrwellConstants.HPPUSG) != -1)
                  {
                    string str1 = (string) registryKey4.GetValue(MarsConstants.PROPERTY_USER_OPTED_IN_NAME);
                    if (str1 != null)
                    {
                      if (!str1.Equals(MarsConstants.OPTED_IN_DEVICE_YES))
                      {
                        DebugOutput.WriteLine("The user is opted out for the device", 3);
                        flag3 = true;
                        string str2 = (string) registryKey4.GetValue(MarsConstants.INSTANCE_ID);
                        DebugOutput.WriteLine("ProdInstanceIDKeyValue = {0}", 3, new object[1]
                        {
                          (object) str2
                        });
                        if (str2 != null)
                        {
                          string str3 = str2.Substring(str2.LastIndexOf('#') + 1);
                          if (str3 != null)
                          {
                            DebugOutput.WriteLine("User has opted out of device - serial number = {0}", 3, new object[1]
                            {
                              (object) str3
                            });
                            this.CleanUpAfterOptOutUninstall();
                          }
                        }
                      }
                      else
                        DebugOutput.WriteLine("The user is opted in for the device", 3);
                    }
                    else if (this._mars != null && flag2 && ((int) this.prevCapabilities & (int) MarsConstants.MARS_CAPABILITY_MARKET_RESEARCH) == (int) MarsConstants.MARS_CAPABILITY_MARKET_RESEARCH)
                      DebugOutput.WriteLine("optedInDevice object is null - Mars capabilities = {0} - user has probably not opted in!", 3, new object[1]
                      {
                        (object) this.prevCapabilities.ToString()
                      });
                  }
                }
                else
                  DebugOutput.WriteLine("The string - LaserJet - was not found in the product instance ID - {0}", 3, new object[1]
                  {
                    (object) registryKey4.ToString()
                  });
                registryKey4.Close();
                registryKey3 = (RegistryKey) null;
              }
            }
            registryKey2.Close();
            if (!flag2 && !flag4 && subKeyCount == 0 && 0 < ((StringCollection) this._utMgr.InstalledSerialNumbers).Count)
            {
              DebugOutput.WriteLine("It appears that  HP Extended Capabilities - Mars - has been uninstalled - shutdown Orwell", 3);
              DebugOutput.WriteLine("isPLSDeviceInMarsUsg = {0}, number of subkeys in usg folder = {1}", 3, new object[2]
              {
                (object) flag4.ToString(),
                (object) subKeyCount.ToString()
              });
              DebugOutput.WriteLine("Number of persisted serial numbers/installed PLS devices = {0}", 3, new object[1]
              {
                (object) ((StringCollection) this._utMgr.InstalledSerialNumbers).Count
              });
              this.CleanUpAfterOptOutUninstall();
              flag3 = true;
            }
          }
          if (flag3)
            DebugOutput.WriteLine("The user has opted out of UsageTracking or uninstalled HP Extended Capabilities - shutdown the program", 3);
          flag1 = flag3;
        }
        catch (Exception ex)
        {
          DebugOutput.WriteLine("Exception caught in DidUserDeclineOrOptOut!!! - {0}", 1, new object[1]
          {
            (object) ex.Message
          });
        }
      }
      return flag1;
    }

    private static void SetPrefs(string[] args)
    {
      string path;
      if (args.Length > 0)
      {
        path = args[0].TrimEnd('"').TrimStart('"').TrimEnd('\\');
        if (!Directory.Exists(path))
          throw new HPUsageTrackingException("The directory - {0} - does not exist.", new object[1]
          {
            (object) path
          });
      }
      else
        path = "..";
      Preferences.SetElement((object) "RootDirectory", (object) path);
      Preferences.SetElement((object) "DefaultsDirectory", (object) (path + "\\defaults"));
      Preferences.SetElement((object) "ProductsDirectory", (object) (path + "\\products"));
      Preferences preferences = new Preferences(path);
    }

    public bool CheckStuff()
    {
      bool flag = true;
      if (!this.DidUserDeclineOrOptOut())
      {
        this._utMgr.CheckStuff();
        flag = true;
      }
      else if (this._utMgr.NumberOfOutstandingDevices < 1)
      {
        DebugOutput.WriteLine("User does not want to participate - shut down.", 1);
        this.Disable();
        flag = false;
      }
      UsageTrackingManager.ReSetWorkingSet();
      return flag;
    }

    public void Disable()
    {
      try
      {
        Registry.LocalMachine.OpenSubKey(OrwellConstants.WINDOWS_RUN_KEY, true).DeleteValue(OrwellConstants.HP_USAGE_VALUE_NAME, false);
      }
      catch (Exception ex)
      {
        DebugOutput.WriteLine("Exception caught trying to disable usage tracking - {0}", 1, new object[1]
        {
          (object) ex.Message
        });
      }
    }

    private void CheckIfUserHasAlreadyOptedOut()
    {
      if (!this.CheckStuff())
        Application.Exit();
      else
        this._appShutdownTimer.Dispose();
    }

    private void CleanUpAfterOptOutUninstall()
    {
      ((StringCollection) this._utMgr.InstalledSerialNumbers).Clear();
      ((StringCollection) this._utMgr.FoundSerialNumbers).Clear();
      ((StringCollection) PersistenceManager.GetObject(OrwellConstants.ANY_STRINGS_DATA))?.Clear();
    }

    [STAThread]
    private static void Main(string[] args)
    {
      try
      {
        MarsHost.SetPrefs(args);
        new MarsHost().StartHosting();
        UsageTrackingManager.ReSetWorkingSet();
        Application.Run();
      }
      catch (Exception ex)
      {
        string message = ex.Message;
        if (ex.InnerException != null)
          message += ex.InnerException.Message;
        DebugOutput.WriteLine("Exception caught in main! - {0}", 1, new object[1]
        {
          (object) message
        });
      }
    }

    private void _appTimer_Elapsed(object sender, ElapsedEventArgs e)
    {
      if (this.CheckStuff())
        return;
      Application.Exit();
    }

    private void _appShutdownTimer_Elapsed(object sender, ElapsedEventArgs e) => this.CheckIfUserHasAlreadyOptedOut();

    private void Application_ApplicationExit(object sender, EventArgs e)
    {
      DebugOutput.WriteLine("Application is exiting - close timer.", 3);
      this._appTimer.Stop();
      this._appTimer.Close();
      this._appTimer.Dispose();
      this._appShutdownTimer.Stop();
      this._appShutdownTimer.Close();
      this._appShutdownTimer.Dispose();
    }
  }
}
