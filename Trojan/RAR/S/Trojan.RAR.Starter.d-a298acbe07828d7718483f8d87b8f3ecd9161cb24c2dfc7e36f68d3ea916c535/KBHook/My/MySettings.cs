// Decompiled with JetBrains decompiler
// Type: KBHook.My.MySettings
// Assembly: Stub, Version=2.5.8.1, Culture=neutral, PublicKeyToken=null
// MVID: A6B1F4A7-80BB-4A23-8237-78C4C1443F0A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.RAR.Starter.d-a298acbe07828d7718483f8d87b8f3ecd9161cb24c2dfc7e36f68d3ea916c535.exe

using CGtrUno7sMKTXSccDo;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using MWnUoWqWd4YtidC4Tw;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;

namespace KBHook.My
{
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "9.0.0.0")]
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings \u0031k3dsoDA4 = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool rPUH8Yfaw;
    private static object x3I9RJUyi = RuntimeHelpers.GetObjectValue(new object());

    [MethodImpl(MethodImplOptions.NoInlining)]
    static MySettings()
    {
    }

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public MySettings()
    {
    }

    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void KAtxQ7R2e([In] object obj0, [In] EventArgs obj1)
    {
      if (!nxSNK5vZrTb5JD2mxR.FAZZilFIO.SaveMySettingsOnExit)
        return;
      XGjtnEVfTwMr1QcOyW.\u0031k3dsoDA4.Save();
    }

    public static MySettings Default
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        if (!MySettings.rPUH8Yfaw)
        {
          object x3I9RjUyi = MySettings.x3I9RJUyi;
          ObjectFlowControl.CheckForSyncLockOnValueType(x3I9RjUyi);
          Monitor.Enter(x3I9RjUyi);
          try
          {
            if (!MySettings.rPUH8Yfaw)
            {
              nxSNK5vZrTb5JD2mxR.FAZZilFIO.Shutdown += (ShutdownEventHandler) delegate
              {
                if (!nxSNK5vZrTb5JD2mxR.FAZZilFIO.SaveMySettingsOnExit)
                  return;
                XGjtnEVfTwMr1QcOyW.\u0031k3dsoDA4.Save();
              };
              MySettings.rPUH8Yfaw = true;
            }
          }
          finally
          {
            Monitor.Exit(x3I9RjUyi);
          }
        }
        return MySettings.\u0031k3dsoDA4;
      }
    }
  }
}
