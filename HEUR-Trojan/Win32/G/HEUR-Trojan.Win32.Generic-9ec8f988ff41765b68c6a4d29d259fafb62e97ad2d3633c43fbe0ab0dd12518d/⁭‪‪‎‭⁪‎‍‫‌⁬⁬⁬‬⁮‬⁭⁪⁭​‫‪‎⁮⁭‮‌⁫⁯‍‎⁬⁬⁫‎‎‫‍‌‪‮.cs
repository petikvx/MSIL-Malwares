// Decompiled with JetBrains decompiler
// Type: ⁭‪‪‎‭⁪‎‍‫‌⁬⁬⁬‬⁮‬⁭⁪⁭​‫‪‎⁮⁭‮‌⁫⁯‍‎⁬⁬⁫‎‎‫‍‌‪‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Collections;

public class \u206D‪‪‎‭⁪‎‍‫‌⁬⁬⁬‬⁮‬⁭⁪⁭​‫‪‎⁮⁭‮‌⁫⁯‍‎⁬⁬⁫‎‎‫‍‌‪‮ : 
  \u200C⁮‏‍⁮⁬⁭⁭​‏⁪⁭⁮⁮‫⁪⁪‬⁭⁯‏‭⁮‪​⁪⁬‫‌‫‏⁯⁫⁬‌‮​‪⁫⁯‮
{
  private bool \u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮;
  private \u200C⁮‌‌⁮‍‮⁪⁫‎⁬‍‪‫⁯‬‮⁫‮‪​⁮⁪⁬‮‫‎‎‪‌‭⁮⁯‮⁫⁭⁪⁮‮‮ \u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮;
  private IList[] \u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮;

  public string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => "NaccacheStern";

  public virtual void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    bool _param1,
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param2)
  {
    this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮ = _param1;
    if (_param2 is \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮)
      _param2 = ((\u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮) _param2).\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮;
    this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮ = (\u200C⁮‌‌⁮‍‮⁪⁫‎⁬‍‪‫⁯‬‮⁫‮‪​⁮⁪⁬‮‫‎‎‪‌‭⁮⁯‮⁫⁭⁪⁮‮‮) _param2;
    if (this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮)
      return;
    \u206D⁫‍‮​⁬⁪⁭⁬‮‪⁮‮⁫‪⁪​⁪​‪‮⁮‫‬‪‭‏‭⁫‍‭‌​⁪​⁯⁪‬⁭‏‮ obj1 = (\u206D⁫‍‮​⁬⁪⁭⁬‮‪⁮‮⁫‪⁪​⁪​‪‮⁮‫‬‪‭‏‭⁫‍‭‌​⁪​⁯⁪‬⁭‏‮) this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮;
    IList list = obj1.\u202D⁬‬‮⁬⁪‍⁫‭⁮‪‌‏‬‏⁫⁯⁫‎‪⁪⁯‏⁯‪​‍⁭‌⁪⁫‎⁬⁯⁭⁬⁭⁮​⁬‮;
    this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮ = new IList[list.Count];
    for (int index1 = 0; index1 < list.Count; ++index1)
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = (\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) list[index1];
      int num = obj2.\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮;
      this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮[index1] = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮(num);
      this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮[index1].Add((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
      for (int index2 = 1; index2 < num; ++index2)
      {
        obj3 = obj3.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(obj1.\u200F⁫‭‭‭‌⁬⁫‭⁫‍‍‌‍⁯⁭‫​⁪⁭⁮‮⁯‬⁭‫‫‮⁭‫‏⁭⁬‎⁮‬⁮‌⁫‫‮);
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4 = obj3.\u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(obj2);
        this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮[index1].Add((object) obj1.\u202D⁭‏‬‌‪⁫⁮‪​‎‍⁭⁮⁯⁫⁯‪‏‎⁭‬​‫⁪‏⁮⁮⁫‏⁬‭‬‎‭⁯​‫‏⁫‮.\u206B‫‌‍⁮​‌‮‮​⁬‏​⁯‍‮‍⁯‪‌⁬​⁯‏⁬‎⁬‌​⁪‬‮‭‎‎⁪​⁫‫‪‮(obj4, obj1.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮));
      }
    }
  }

  [Obsolete("Remove: no longer used")]
  public virtual bool \u200D⁭⁪⁭‎‏‎⁬‏⁫‍‎⁫‪⁯‫‎⁫​​‎‭‎⁪‍⁫⁪⁫⁯⁯‬⁯‎⁭⁫‮‬‍‫⁪‮
  {
    set
    {
    }
  }

  public virtual int \u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮() => this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮ ? (this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200B‭‫‬‪‌‍‫⁫⁮⁯‭‌⁫⁪⁪‭‍‎​⁬‪‬​‌​⁯⁪‎⁫‍⁬‫⁮⁭‪⁯‮‮‮ + 7) / 8 - 1 : this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ / 8 + 1;

  public virtual int \u206B⁯‏‭⁮‍‫​⁪⁮‬‭⁬‎⁬⁬‮‎⁫⁫​​‫‏‏⁯‍‎⁯⁬‌​⁬‬⁯‫‫⁬‏⁯‮() => this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮ ? this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ / 8 + 1 : (this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200B‭‫‬‪‌‍‫⁫⁮⁯‭‌⁫⁪⁪‭‍‎​⁬‪‬​‌​⁯⁪‎⁫‍⁬‫⁮⁭‪⁯‮‮‮ + 7) / 8 - 1;

  public virtual byte[] \u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮ == null)
      throw new InvalidOperationException("NaccacheStern engine not initialised");
    if (_param3 > this.\u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮() + 1)
      throw new \u202A⁯⁬⁬‪⁫‌‏‎‬⁮‬⁪⁬‬⁯‍‍‍‌‎‍‍‬‍‮‬⁫​⁬‎⁯‪‏‏‫‍‫‌‫‮("input too large for Naccache-Stern cipher.\n");
    if (!this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮ && _param3 < this.\u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮())
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("BlockLength does not match modulus for Naccache-Stern cipher.\n");
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, _param1, _param2, _param3);
    byte[] numArray;
    if (this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮)
    {
      numArray = this.\u200B⁬‭‌‌‪‍⁪‫⁮⁫⁬⁮⁮‌‏​⁫‬‬⁮‎‪‬‬‭‏‮⁯⁮‎⁪‬‫⁯⁪⁮⁭‏‭‮(obj1);
    }
    else
    {
      IList list1 = \u206F‫‍⁮‍‏‭‌‫⁯‎‎​⁮‏⁮‎‮​⁭⁬⁬⁭‌‎‎‎‬⁯⁮‏⁮‭‎⁫⁯‭‌⁯‍‮.\u200C⁮‬‎⁪‌⁮‬​⁬⁭​‏⁮​‍‌⁮‮⁪⁪⁫‪‫‎⁮‎⁬​​‏⁪‪‍‬‪⁬⁫⁪‏‮();
      \u206D⁫‍‮​⁬⁪⁭⁬‮‪⁮‮⁫‪⁪​⁪​‪‮⁮‫‬‪‭‏‭⁫‍‭‌​⁪​⁯⁪‬⁭‏‮ obj2 = (\u206D⁫‍‮​⁬⁪⁭⁬‮‪⁮‮⁫‪⁪​⁪​‪‮⁮‫‬‪‭‏‭⁫‍‭‌​⁪​⁯⁪‬⁭‏‮) this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮;
      IList list2 = obj2.\u202D⁬‬‮⁬⁪‍⁫‭⁮‪‌‏‬‏⁫⁯⁫‎‪⁪⁯‏⁯‪​‍⁭‌⁪⁫‎⁬⁯⁭⁬⁭⁮​⁬‮;
      for (int index = 0; index < list2.Count; ++index)
      {
        \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = obj1.\u206B‫‌‍⁮​‌‮‮​⁬‏​⁯‍‮‍⁯‪‌⁬​⁯‏⁬‎⁬‌​⁪‬‮‭‎‎⁪​⁫‫‪‮(obj2.\u200F⁫‭‭‭‌⁬⁫‭⁫‍‍‌‍⁯⁭‫​⁪⁭⁮‮⁯‬⁭‫‫‮⁭‫‏⁭⁬‎⁮‬⁮‌⁫‫‮.\u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) list2[index]), obj2.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮);
        IList list3 = this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮[index];
        if (this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮[index].Count != ((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) list2[index]).\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮)
        {
          string[] strArray = new string[6];
          strArray[0] = "Error in lookup Array for ";
          int count = ((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) list2[index]).\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮;
          strArray[1] = count.ToString();
          strArray[2] = ": Size mismatch. Expected ArrayList with length ";
          count = ((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) list2[index]).\u200E‬‫‫‪⁮⁭‎‮⁫⁫⁭‍‍⁮⁫‫‫⁪⁬‎‏‭‭⁪⁪​⁫⁪‍⁫⁪⁪‏‎‪‎⁫‪⁮‮;
          strArray[3] = count.ToString();
          strArray[4] = " but found ArrayList of length ";
          count = this.\u206A‫‎‎‭‌⁮‫‪‪⁬‭‏‍‌‮​‮‬‌⁫⁯⁭‮‫⁮‭‫⁬‫⁪​⁪‌⁪‫​‏‫‮[index].Count;
          strArray[5] = count.ToString();
          throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮(string.Concat(strArray));
        }
        int num = list3.IndexOf((object) obj3);
        if (num == -1)
          throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Lookup failed");
        list1.Add((object) \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.\u202C⁬‍‫‪‎‍‮⁮‍​⁮⁯⁯​‎‫‫‮⁮​‮‌‏‎‫⁯⁮‎‬‫‮⁪⁭⁫⁪‌‪⁫‫‮((long) num));
      }
      numArray = \u206D‪‪‎‭⁪‎‍‫‌⁬⁬⁬‬⁮‬⁭⁪⁭​‫‪‎⁮⁭‮‌⁫⁯‍‎⁬⁬⁫‎‎‫‍‌‪‮.\u206D‌‬‪⁬⁬⁫⁬​‫⁮⁬‭⁭⁮‫⁬⁮‏⁬‮‭‌‌⁭‎‍‌⁪⁮⁬⁫⁭‮⁭‬⁪​‎⁫‮(list1, list2).\u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮();
    }
    return numArray;
  }

  public virtual byte[] \u200B⁬‭‌‌‪‍⁪‫⁮⁫⁬⁮⁮‌‏​⁫‬‬⁮‎‪‬‬‭‏‮⁯⁮‎⁪‬‫⁯⁪⁮⁭‏‭‮(
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ _param1)
  {
    byte[] destinationArray = new byte[this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ / 8 + 1];
    byte[] sourceArray = this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u202D⁭‏‬‌‪⁫⁮‪​‎‍⁭⁮⁯⁫⁯‪‏‎⁭‬​‫⁪‏⁮⁮⁫‏⁬‭‬‎‭⁯​‫‏⁫‮.\u206B‫‌‍⁮​‌‮‮​⁬‏​⁯‍‮‍⁯‪‌⁬​⁯‏⁬‎⁬‌​⁪‬‮‭‎‎⁪​⁫‫‪‮(_param1, this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮).\u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮();
    Array.Copy((Array) sourceArray, 0, (Array) destinationArray, destinationArray.Length - sourceArray.Length, sourceArray.Length);
    return destinationArray;
  }

  public virtual byte[] \u206E‏‭‪⁫⁪⁮⁭​‍‏​⁬‪‍‏‭‭⁭​⁮‭‌‏‎⁫⁮⁮⁯‪‮⁯‮⁯‫‭‬‪‬⁯‮(
    byte[] _param1,
    byte[] _param2)
  {
    if (this.\u206F⁬⁪‪‪‫‎⁪‍​‭​⁭⁫‍⁪⁮‮⁫‮⁭⁪‌‫‮​⁯‬‬⁪‭‮​​‌‎‬⁬‮‮‮)
    {
      if (_param1.Length > this.\u206B⁯‏‭⁮‍‫​⁪⁮‬‭⁬‎⁬⁬‮‎⁫⁫​​‫‏‏⁯‍‎⁯⁬‌​⁬‬⁯‫‫⁬‏⁯‮() || _param2.Length > this.\u206B⁯‏‭⁮‍‫​⁪⁮‬‭⁬‎⁬⁬‮‎⁫⁫​​‫‏‏⁯‍‎⁯⁬‌​⁬‬⁯‫‫⁬‏⁯‮())
        throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("BlockLength too large for simple addition.\n");
    }
    else if (_param1.Length > this.\u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮() || _param2.Length > this.\u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮())
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("BlockLength too large for simple addition.\n");
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj = new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, _param1).\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(new \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮(1, _param2)).\u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮);
    byte[] destinationArray = new byte[this.\u206D‮‌‍‪‭‭‏‌‪​‮‏⁪‭‫‬⁫​⁭‫‭‪‬⁬‫‭⁮‏‮⁪‬‏‎⁫⁮‮‎⁪⁫‮.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮ / 8 + 1];
    byte[] sourceArray = obj.\u202E‫‪⁭‍​‌‬⁯⁬‏‪⁪⁯‭⁭​‍⁮‎‬‌‏⁭⁯‌⁬‮​‭‭⁮‫‫⁮‍‭⁮⁬⁬‮();
    Array.Copy((Array) sourceArray, 0, (Array) destinationArray, destinationArray.Length - sourceArray.Length, sourceArray.Length);
    return destinationArray;
  }

  public virtual byte[] \u200B‪‎⁭‮‭‮⁪⁫‪‍‮‎‮⁭‭‎⁯⁫⁫‎​‫‬‎‫‏‭‭‫‬‍‭‏⁫⁪‮​‮⁪‮(byte[] _param1)
  {
    if (_param1.Length <= this.\u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮())
      return this.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, 0, _param1.Length);
    int num1 = this.\u202D‌⁭⁯‎⁭⁯‫⁬⁭‌‪⁫⁮‏‍⁭‭⁬‫‌​‬⁬⁬​‍​​⁫⁪‭‫‏‭⁪⁫‎⁪⁪‮();
    int num2 = this.\u206B⁯‏‭⁮‍‫​⁪⁮‬‭⁬‎⁬⁬‮‎⁫⁫​​‫‏‏⁯‍‎⁯⁬‌​⁬‬⁯‫‫⁬‏⁯‮();
    int num3 = 0;
    int length = 0;
    byte[] sourceArray = new byte[(_param1.Length / num1 + 1) * num2];
    while (num3 < _param1.Length)
    {
      byte[] numArray;
      if (num3 + num1 < _param1.Length)
      {
        numArray = this.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, num3, num1);
        num3 += num1;
      }
      else
      {
        numArray = this.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, num3, _param1.Length - num3);
        num3 += _param1.Length - num3;
      }
      if (numArray == null)
        throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("cipher returned null");
      numArray.CopyTo((Array) sourceArray, length);
      length += numArray.Length;
    }
    byte[] destinationArray = new byte[length];
    Array.Copy((Array) sourceArray, 0, (Array) destinationArray, 0, length);
    return destinationArray;
  }

  private static \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ \u206D‌‬‪⁬⁬⁫⁬​‫⁮⁬‭⁭⁮‫⁬⁮‏⁬‮‭‌‌⁭‎‍‌⁪⁮⁬⁫⁭‮⁭‬⁪​‎⁫‮(
    IList _param0,
    IList _param1)
  {
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj1 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.Zero;
    \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj2 = \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮.One;
    for (int index = 0; index < _param1.Count; ++index)
      obj2 = obj2.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) _param1[index]);
    for (int index = 0; index < _param1.Count; ++index)
    {
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj3 = (\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) _param1[index];
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj4 = obj2.\u206C⁯‬⁪⁯‫‬⁫‮‭⁭‫⁭⁪⁬‌‏⁭‭⁫‍‪⁯‮‎‍‮⁭⁮‌‍⁬‌⁮‭​⁯​‬‮(obj3);
      \u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮ obj5 = obj4.\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮(obj4.\u200B⁫‮‍‬‎​‏‪‏​‏‫⁪⁫⁯‍‬⁯⁪‎‪​⁬‫‌‍‌‪⁭‭‪‫‫‪‮⁬‬‍‪‮(obj3)).\u202D⁫‪​‏‍⁯⁭⁪‪‭‭‏‭​​‭⁫‌‍⁮‬‮‬⁭⁬‪‎‪⁪⁪‌​‫⁫‫‍‏‍⁪‮((\u200B‌‏⁫⁬⁬‬⁬‌‎‪⁮‭​‎​‬‎⁯⁮‏​‫‬‫⁫⁫‫⁫​‮‫⁭​⁬⁬⁬‎‭‍‮) _param0[index]);
      obj1 = obj1.\u206E‬‫‪‍‬​⁯⁪‫‍⁮⁮‌‫‮‭⁯​‫‫⁬⁫⁯‭‌⁪⁬⁮​⁯⁮‮‏⁫‏‪⁮⁯‬‮(obj5);
    }
    return obj1.\u206A‎‏⁫⁪‫‪‎⁭‮‮‭⁬⁮⁪⁬‮‍‫‏‮‎⁯‏‏‭⁯‭⁯‍‪⁮‬⁭‏⁬‎‍‭⁮‮(obj2);
  }
}
