// Decompiled with JetBrains decompiler
// Type: ProjNet.States.InitializerItemState
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Composer;
using IRefl.Definitions;
using IRefl.Managers;
using IRefl.Pools;
using IRefl.Producers;
using IRefl.Wrappers;
using ProjNet.Bridges;
using ProjNet.Candidates;
using ProjNet.Common;
using ProjNet.Structs;
using ProjNet.Templates;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.States
{
  public class InitializerItemState : 
    IdentifierRegistryBridge,
    ReaderItemState,
    Attr,
    Reg,
    CodeObjectProducer
  {
    private StructTokenizerDef m_Definition;
    private DispatcherValueManager _Context;
    private List<FieldTemplate> m_Printer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal InitializerItemState(
      StructTokenizerDef def,
      Initializer selection,
      DispatcherValueManager template,
      List<Strategy> cont2,
      string second3,
      string reference4,
      long cust5,
      string x6,
      string attr7,
      string ivk8)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector(selection, cont2, second3, reference4, cust5, x6, attr7, ivk8);
      this.m_Definition = def;
      this._Context = template;
    }

    public static InitializerItemState WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        int num1 = 3;
        InitializerItemState initializerItemState;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                goto label_5;
              case 1:
              case 4:
                goto label_1;
              case 2:
                goto label_6;
              case 5:
                goto label_7;
              default:
                if (true)
                {
                  num2 = 2;
                  continue;
                }
                goto label_5;
            }
          }
label_1:
          List<Strategy> cont2;
          cont2.Add(new Strategy("Lon", ElementNameStyle.East));
          goto label_6;
label_5:
          cont2 = new List<Strategy>(2);
          num1 = 4;
          continue;
label_6:
          cont2.Add(new Strategy("Lat", ElementNameStyle.North));
          initializerItemState = new InitializerItemState((StructTokenizerDef) Message.RunProcess(), (Initializer) Token.WGS84, (DispatcherValueManager) HelperValueManager.Greenwich, cont2, "WGS 84", "EPSG", 4326L, string.Empty, string.Empty, string.Empty);
          num1 = 5;
        }
label_7:
        return initializerItemState;
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public StructTokenizerDef ComputeItem() => this.m_Definition;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ConcatItem(StructTokenizerDef var1) => this.m_Definition = var1;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override Candidate WriteItem(int reference_low) => (Candidate) this.m_Definition;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public DispatcherValueManager MoveItem() => this._Context;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CustomizeItem(DispatcherValueManager item) => this._Context = item;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CheckItem() => this.m_Printer.Count;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal List<FieldTemplate> ConnectRegistry() => this.m_Printer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void AddRegistry(List<FieldTemplate> last) => this.m_Printer = last;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public FieldTemplate QueryItem(int mean_param) => this.m_Printer[mean_param];

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num1 = 0;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          int asset_length;
          bool flag;
          int num3;
          switch (num2)
          {
            case 0:
              goto label_16;
            case 1:
            case 6:
label_11:
              stringBuilder.AppendFormat("GEOGCS[\"{0}\", {1}, {2}, {3}", (object) this.Name, (object) this.ValidateItem().RevertStatus(), (object) this.MoveItem().RevertStatus(), (object) this.ComputeItem().RevertStatus());
              if (this.ForgotProcess().Count != 2)
                break;
              goto label_12;
            case 2:
              goto label_17;
            case 3:
            case 4:
              flag = asset_length < this.ForgotProcess().Count;
              goto case 5;
            case 5:
              if (flag)
              {
                stringBuilder.AppendFormat(", {0}", (object) this.ChangeItem(asset_length).OrderProcess());
                ++asset_length;
                goto case 3;
              }
              else
                goto label_14;
            case 7:
              if (!(this.ForgotProcess()[0].Name != "Lon") && this.ForgotProcess()[0].DisableProcess() == ElementNameStyle.East && !(this.ForgotProcess()[1].Name != "Lat"))
              {
                num3 = this.ForgotProcess()[1].DisableProcess() != ElementNameStyle.North ? 1 : 0;
                goto label_9;
              }
              else
                break;
            case 8:
              goto label_18;
            default:
              goto label_5;
          }
          num3 = 1;
label_9:
          if (num3 != 0)
          {
            asset_length = 0;
            if (InitializerItemState.ManageList())
            {
              num2 = 4;
              continue;
            }
            goto label_11;
          }
label_14:
          if (!string.IsNullOrEmpty(this.CountItem()) && this.SelectItem() > 0L)
          {
            stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
            int num4 = 2;
            num2 = InitializerItemState.CountList() ? num4 : num4;
          }
          else
            goto label_17;
        }
label_5:
        num1 = 5;
        continue;
label_12:
        num1 = 7;
        continue;
label_16:
        stringBuilder = new StringBuilder();
        num1 = 6;
        continue;
label_17:
        stringBuilder.Append("]");
        str = stringBuilder.ToString();
        num1 = 8;
      }
label_18:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem()
    {
      int num1 = 1;
      if (true)
        goto label_10;
label_1:
      StringBuilder stringBuilder;
      using (List<Strategy>.Enumerator enumerator = this.ForgotProcess().GetEnumerator())
      {
label_7:
        while (enumerator.MoveNext())
        {
          Strategy current = enumerator.Current;
          int num2 = 2;
          if (InitializerItemState.ManageList())
            goto label_5;
label_4:
          stringBuilder.Append(current.EnableProcess());
          continue;
label_5:
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_4;
              case 1:
              case 3:
                goto label_7;
              default:
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_7;
            }
          }
        }
      }
      stringBuilder.AppendFormat("{0}{1}{2}</CS_GeographicCoordinateSystem></CS_CoordinateSystem>", (object) this.ValidateItem().AssetItem(), (object) this.ComputeItem().AssetItem(), (object) this.MoveItem().AssetItem());
      goto label_13;
label_10:
      while (true)
      {
        switch (num1)
        {
          case 0:
            stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_CoordinateSystem Dimension=\"{0}\"><CS_GeographicCoordinateSystem>{1}", new object[2]
            {
              (object) this.InsertItem(),
              (object) this.ListRegistry()
            });
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_16;
          case 1:
            stringBuilder = new StringBuilder();
            num1 = 0;
            continue;
          case 2:
          case 4:
            goto label_1;
          case 3:
          case 5:
            goto label_13;
          case 6:
            goto label_16;
          default:
            num1 = 5;
            continue;
        }
      }
label_16:
      string str;
      return str;
label_13:
      str = stringBuilder.ToString();
      num1 = 6;
      goto label_10;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object i)
    {
      int num1 = 2;
      if (true)
        goto label_26;
label_1:
      int index1;
      bool flag1 = index1 < this.ConnectRegistry().Count;
      int num2 = 8;
label_25:
      num1 = num2;
label_26:
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_11;
          case 1:
          case 12:
            goto label_31;
          case 2:
            flag2 = !(i is InitializerItemState);
            num1 = 12;
            continue;
          case 3:
          case 11:
            goto label_4;
          case 4:
            goto label_1;
          case 5:
            goto label_44;
          case 6:
            goto label_8;
          case 7:
            goto label_2;
          case 8:
            goto label_28;
          case 9:
            goto label_39;
          case 10:
            goto label_16;
          case 13:
            goto label_41;
          default:
            goto label_27;
        }
      }
label_2:
      InitializerItemState initializerItemState;
      if (initializerItemState.ValidateItem().InvokeItem((object) this.ValidateItem()))
      {
        num2 = 13;
        goto label_25;
      }
      else
        goto label_42;
label_4:
      int num3 = initializerItemState.ConnectRegistry() != null ? 1 : 0;
label_6:
      bool flag3;
      if (num3 != 0)
      {
        flag3 = this.ConnectRegistry().Count != initializerItemState.ConnectRegistry().Count;
        num2 = 9;
        goto label_25;
      }
      else
        goto label_29;
label_8:
      bool flag4 = false;
      goto label_44;
label_11:
      flag4 = false;
      goto label_44;
label_16:
      flag4 = false;
      goto label_44;
label_27:
      num2 = 4;
      goto label_25;
label_28:
      if (flag1)
      {
        if (!initializerItemState.ConnectRegistry()[index1].Equals(this.ConnectRegistry()[index1]))
        {
          flag4 = false;
          goto label_44;
        }
        else
        {
          ++index1;
          goto label_1;
        }
      }
label_29:
      if (this.ForgotProcess().Count == initializerItemState.ForgotProcess().Count)
      {
        for (int index2 = 0; index2 < initializerItemState.ForgotProcess().Count; ++index2)
        {
          if (initializerItemState.ForgotProcess()[index2].DisableProcess() != this.ForgotProcess()[index2].DisableProcess())
          {
            num1 = 10;
            goto label_26;
          }
        }
        if (initializerItemState.ComputeItem().InvokeItem((object) this.ComputeItem()))
        {
          num2 = 7;
          goto label_25;
        }
        else
          goto label_42;
      }
      else
      {
        num2 = 0;
        goto label_25;
      }
label_31:
      if (flag2)
      {
        flag4 = false;
        goto label_44;
      }
      else
      {
        initializerItemState = i as InitializerItemState;
        if (initializerItemState.InsertItem() != this.InsertItem())
        {
          flag4 = false;
          goto label_44;
        }
        else if (this.ConnectRegistry() != null && initializerItemState.ConnectRegistry() == null)
        {
          flag4 = false;
          goto label_44;
        }
        else if (this.ConnectRegistry() != null || initializerItemState.ConnectRegistry() == null)
        {
          if (this.ConnectRegistry() == null)
          {
            num3 = 0;
            goto label_6;
          }
          else
          {
            num2 = 11;
            goto label_25;
          }
        }
        else
        {
          num2 = 6;
          goto label_25;
        }
      }
label_39:
      if (!flag3)
      {
        index1 = 0;
        goto label_1;
      }
      else
      {
        flag4 = false;
        num2 = 5;
        goto label_25;
      }
label_41:
      int num4 = initializerItemState.MoveItem().InvokeItem((object) this.MoveItem()) ? 1 : 0;
      goto label_43;
label_42:
      num4 = 0;
label_43:
      flag4 = num4 != 0;
label_44:
      return flag4;
    }

    internal static bool ManageList() => true;

    internal static bool CountList() => false;
  }
}
