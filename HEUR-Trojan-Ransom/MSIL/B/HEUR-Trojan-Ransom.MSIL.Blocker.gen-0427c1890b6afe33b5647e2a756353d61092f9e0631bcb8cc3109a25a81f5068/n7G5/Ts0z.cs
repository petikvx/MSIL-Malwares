// Decompiled with JetBrains decompiler
// Type: n7G5.Ts0z
// Assembly: Kw9, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 454AB7CE-9D73-4F30-B915-379BCB1A28FE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0427c1890b6afe33b5647e2a756353d61092f9e0631bcb8cc3109a25a81f5068.exe

using g8L;
using Hq5a;
using Mc43;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace n7G5
{
  [DesignerGenerated]
  public class Ts0z : Form
  {
    private IContainer components;

    public Ts0z() => this.Se82();

    [DebuggerNonUserCode]
    protected virtual void Sy25(bool x3ET)
    {
      try
      {
        if (!x3ET || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        this.Dispose(x3ET);
      }
    }

    [field: AccessedThroughProperty("LogoPictureBox")]
    internal virtual PictureBox LogoPictureBox { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("UsernameLabel")]
    internal virtual Label UsernameLabel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("PasswordLabel")]
    internal virtual Label PasswordLabel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("UsernameTextBox")]
    internal virtual TextBox UsernameTextBox { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("PasswordTextBox")]
    internal virtual TextBox PasswordTextBox { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button OK
    {
      get => this._OK;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Hn1j);
        Button ok1 = this._OK;
        if (ok1 != null)
          ok1.Click -= eventHandler;
        this._OK = value;
        Button ok2 = this._OK;
        if (ok2 == null)
          return;
        ok2.Click += eventHandler;
      }
    }

    internal virtual Button Cancel
    {
      get => this._Cancel;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.i6W2);
        Button cancel1 = this._Cancel;
        if (cancel1 != null)
          cancel1.Click -= eventHandler;
        this._Cancel = value;
        Button cancel2 = this._Cancel;
        if (cancel2 == null)
          return;
        cancel2.Click += eventHandler;
      }
    }

    [DebuggerStepThrough]
    private void Se82()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Ts0z));
      this.LogoPictureBox = new PictureBox();
      this.UsernameLabel = new Label();
      this.PasswordLabel = new Label();
      this.UsernameTextBox = new TextBox();
      this.PasswordTextBox = new TextBox();
      this.OK = new Button();
      this.Cancel = new Button();
      ((ISupportInitialize) this.LogoPictureBox).BeginInit();
      this.SuspendLayout();
      this.LogoPictureBox.Image = (Image) componentResourceManager.GetObject("LogoPictureBox.Image");
      this.LogoPictureBox.Location = new Point(0, 0);
      this.LogoPictureBox.Name = "LogoPictureBox";
      this.LogoPictureBox.Size = new Size(165, 193);
      this.LogoPictureBox.TabIndex = 0;
      this.LogoPictureBox.TabStop = false;
      this.UsernameLabel.Location = new Point(172, 24);
      this.UsernameLabel.Name = "UsernameLabel";
      this.UsernameLabel.Size = new Size(220, 23);
      this.UsernameLabel.TabIndex = 0;
      this.UsernameLabel.Text = "&User name";
      this.UsernameLabel.TextAlign = ContentAlignment.MiddleLeft;
      this.PasswordLabel.Location = new Point(172, 81);
      this.PasswordLabel.Name = "PasswordLabel";
      this.PasswordLabel.Size = new Size(220, 23);
      this.PasswordLabel.TabIndex = 2;
      this.PasswordLabel.Text = "&Password";
      this.PasswordLabel.TextAlign = ContentAlignment.MiddleLeft;
      this.UsernameTextBox.Location = new Point(174, 44);
      this.UsernameTextBox.Name = "UsernameTextBox";
      this.UsernameTextBox.Size = new Size(220, 20);
      this.UsernameTextBox.TabIndex = 1;
      this.PasswordTextBox.Location = new Point(174, 101);
      this.PasswordTextBox.Name = "PasswordTextBox";
      this.PasswordTextBox.PasswordChar = '*';
      this.PasswordTextBox.Size = new Size(220, 20);
      this.PasswordTextBox.TabIndex = 3;
      this.OK.Location = new Point(197, 161);
      this.OK.Name = "OK";
      this.OK.Size = new Size(94, 23);
      this.OK.TabIndex = 4;
      this.OK.Text = "&OK";
      this.Cancel.DialogResult = DialogResult.Cancel;
      this.Cancel.Location = new Point(300, 161);
      this.Cancel.Name = "Cancel";
      this.Cancel.Size = new Size(94, 23);
      this.Cancel.TabIndex = 5;
      this.Cancel.Text = "&Cancel";
      this.AcceptButton = (IButtonControl) this.OK;
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.Cancel;
      this.ClientSize = new Size(401, 192);
      this.Controls.Add((Control) this.Cancel);
      this.Controls.Add((Control) this.OK);
      this.Controls.Add((Control) this.PasswordTextBox);
      this.Controls.Add((Control) this.UsernameTextBox);
      this.Controls.Add((Control) this.PasswordLabel);
      this.Controls.Add((Control) this.UsernameLabel);
      this.Controls.Add((Control) this.LogoPictureBox);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = "LoginDailog";
      this.SizeGripStyle = SizeGripStyle.Hide;
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "LoginDailog";
      ((ISupportInitialize) this.LogoPictureBox).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private void Hn1j(object Qk1x, EventArgs Tr5y)
    {
      if (Operators.CompareString(this.UsernameTextBox.Text, "", false) == 0 | Operators.CompareString(this.PasswordTextBox.Text, "", false) == 0)
      {
        int num1 = (int) Interaction.MsgBox((object) "Enter username & Password", MsgBoxStyle.Exclamation, (object) MsgBoxStyle.OkOnly);
      }
      else
      {
        ParameterExpression parameterExpression;
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: method reference
        if (new w6C().Users.Where<Xp31>(Expression.Lambda<Func<Xp31, bool>>((Expression) Expression.And((Expression) Expression.Equal(Operators.CompareString(p.Username, this.UsernameTextBox.Text, false), 0, false, (MethodInfo) null), (Expression) Expression.Equal((Expression) Expression.Call((Expression) null, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Operators.CompareString)), new Expression[3]
        {
          (Expression) Expression.Property((Expression) parameterExpression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Xp31.Zm45))),
          (Expression) Expression.Property((Expression) Expression.Property((Expression) Expression.Constant((object) this, typeof (Ts0z)), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Ts0z.Jg79))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (TextBox.get_Text))),
          (Expression) Expression.Constant((object) false, typeof (bool))
        }), (Expression) Expression.Constant((object) 0, typeof (int)), false, (MethodInfo) null)), parameterExpression)).Count<Xp31>() == 0)
        {
          int num2 = (int) Interaction.MsgBox((object) "Invalid Username & Password Entered", MsgBoxStyle.Critical, (object) MsgBoxStyle.OkOnly);
        }
        else
        {
          Pi14.Forms.MainInterface.Show();
          this.Close();
        }
      }
    }

    internal static byte[] j7QF(int[] Ge68, int d0K8)
    {
      byte[] numArray = new byte[checked (d0K8 + 1)];
      int num = checked (Ge68.Length - 1);
      int index = 0;
      while (index <= num)
      {
        numArray[index] = checked ((byte) Ge68[index]);
        checked { ++index; }
      }
      return numArray;
    }

    private void i6W2(object Kw24, EventArgs Zg28) => this.Close();

    static void Zs15()
    {
      // ISSUE: unable to decompile the method.
    }

    static void Lk69()
    {
      // ISSUE: unable to decompile the method.
    }

    static void Px21()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
