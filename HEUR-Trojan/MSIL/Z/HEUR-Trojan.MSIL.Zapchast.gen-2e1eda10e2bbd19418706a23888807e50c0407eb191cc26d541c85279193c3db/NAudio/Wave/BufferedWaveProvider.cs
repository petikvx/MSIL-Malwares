// Decompiled with JetBrains decompiler
// Type: NAudio.Wave.BufferedWaveProvider
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zapchast.gen-2e1eda10e2bbd19418706a23888807e50c0407eb191cc26d541c85279193c3db.exe

using System;

namespace NAudio.Wave
{
  public class BufferedWaveProvider : ᒅ憁ܳ䥿䣘ꅤ\u288C裬\uF406턉\u2752쉢煫\uF31F\u2B91杔蕨蹯鈭쭫
  {
    private 천ꢮ\u2DBF\u2B32\u25F6撫昸ୃ\u0FDE賃䉖\uE6CA䠯ꊀ쯖௨㙏녕贅鲢 circularBuffer;
    private readonly 裞䨖觤㥟㛴먰\uEC41\u136C嵹乢\uE98Cᘁቫ륺끂볃\uF732\uFFFD枽侏 waveFormat;

    public BufferedWaveProvider(
      裞䨖觤㥟㛴먰\uEC41\u136C嵹乢\uE98Cᘁቫ륺끂볃\uF732\uFFFD枽侏 waveFormat)
    {
      this.waveFormat = waveFormat;
      this.BufferLength = waveFormat.AverageBytesPerSecond * 5;
      this.ReadFully = true;
    }

    public bool ReadFully { get; set; }

    public int BufferLength { get; set; }

    public TimeSpan BufferDuration
    {
      get => TimeSpan.FromSeconds((double) this.BufferLength / (double) this.WaveFormat.AverageBytesPerSecond);
      set => this.BufferLength = (int) (value.TotalSeconds * (double) this.WaveFormat.AverageBytesPerSecond);
    }

    public bool DiscardOnBufferOverflow { get; set; }

    public int BufferedBytes => this.circularBuffer != null ? this.circularBuffer.Count : 0;

    public TimeSpan BufferedDuration => TimeSpan.FromSeconds((double) this.BufferedBytes / (double) this.WaveFormat.AverageBytesPerSecond);

    public 裞䨖觤㥟㛴먰\uEC41\u136C嵹乢\uE98Cᘁቫ륺끂볃\uF732\uFFFD枽侏 WaveFormat => this.waveFormat;

    public void AddSamples(byte[] buffer, int offset, int count)
    {
      if (this.circularBuffer == null)
        this.circularBuffer = new 천ꢮ\u2DBF\u2B32\u25F6撫昸ୃ\u0FDE賃䉖\uE6CA䠯ꊀ쯖௨㙏녕贅鲢(this.BufferLength);
      if (this.circularBuffer.\uFFFDሪ䴬詣簘\u0FF8㐀퍄깚ằ澽㗶噈\uE6CC覫\uE335㲷\uF235ꦶ\uE9A7(buffer, offset, count) < count && !this.DiscardOnBufferOverflow)
        throw new InvalidOperationException("Buffer full");
    }

    public int Read(byte[] buffer, int offset, int count)
    {
      int num = 0;
      if (this.circularBuffer != null)
        num = this.circularBuffer.\uEC22\u2043멉䛁匇ꁬ\u2CE8牝花깻牚\uF76D输\uF1B7Ｅ㺞摕芟薦侮(buffer, offset, count);
      if (this.ReadFully && num < count)
      {
        Array.Clear((Array) buffer, offset + num, count - num);
        num = count;
      }
      return num;
    }

    public void ClearBuffer()
    {
      if (this.circularBuffer == null)
        return;
      this.circularBuffer.擲峡滞ﮇ쒒᱖兔ᦧ\uFFFDⷈ䱻咟\uF210눽驩䀅쒫腅钁\u17F2();
    }
  }
}
