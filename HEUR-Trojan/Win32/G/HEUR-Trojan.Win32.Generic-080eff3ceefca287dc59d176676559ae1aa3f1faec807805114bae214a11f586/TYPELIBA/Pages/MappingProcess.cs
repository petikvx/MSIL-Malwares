// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Pages.MappingProcess
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using TYPELIBA.Identifiers;
using TYPELIBA.Wrappers;

namespace TYPELIBA.Pages
{
  public class MappingProcess : Form
  {
    private IContainer m_TestsProcess;
    private TextBox _MapperProcess;
    private TextBox procProcess;
    private Button objectConsumer;
    private Label processConsumer;
    private Label m_ConsumerConsumer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public MappingProcess()
    {
      int num1 = 4;
      if (!MappingProcess.CreateCreator())
        goto label_3;
label_1:
      this.m_TestsProcess = (IContainer) null;
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            ManagerParamsID.NewExpression();
            num1 = 3;
            continue;
          case 1:
          case 2:
            goto label_6;
          case 3:
            goto label_1;
          case 5:
            goto label_7;
          default:
            goto label_4;
        }
      }
label_7:
      return;
label_4:
      num2 = 1;
      goto label_2;
label_6:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.DefineRepository();
      num2 = 5;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatRepository(object var1, EventArgs vis)
    {
      try
      {
        string text1 = this.procProcess.Text;
        int num1 = 4;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 4:
              string text2 = this._MapperProcess.Text;
              MethodProcess.DeleteAuthorISBN(text1, int.Parse(text2));
              num2 = 2;
              break;
            case 1:
            case 2:
              int num3 = (int) MessageBox.Show("Deletion successful.");
              goto case 3;
            case 3:
              this.procProcess.Text = "";
              this._MapperProcess.Text = "";
              num2 = 5;
              break;
            case 5:
              goto label_6;
            default:
              int num4 = 3;
              num1 = MappingProcess.CreateCreator() ? num4 : num4;
              continue;
          }
          num1 = num2;
        }
label_6:;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Deletion Failed.");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool hasi)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_3;
            case 1:
            case 3:
              goto label_5;
            case 4:
              goto label_1;
            case 5:
              goto label_12;
            default:
              num2 = 0;
              continue;
          }
        }
label_1:
        if (hasi)
        {
          num1 = 3;
          continue;
        }
        int num3 = 0;
        goto label_7;
label_3:
label_4:
        base.Dispose(hasi);
        num1 = 5;
        continue;
label_5:
        num3 = this.m_TestsProcess != null ? 1 : 0;
label_7:
        if (num3 != 0)
        {
          this.m_TestsProcess.Dispose();
          goto label_3;
        }
        else
          goto label_4;
      }
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DefineRepository()
    {
      int num1 = 12;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this.processConsumer.Name = "label2";
            this.processConsumer.Size = new Size(55, 13);
            this.processConsumer.TabIndex = 6;
            this.processConsumer.Text = "Author ID:";
            this.m_ConsumerConsumer.AutoSize = true;
            this.m_ConsumerConsumer.Location = new Point(45, 9);
            num2 = 4;
            break;
          case 1:
            this.processConsumer.Location = new Point(25, 40);
            goto case 0;
          case 2:
            this.Controls.Add((Control) this._MapperProcess);
            this.Controls.Add((Control) this.procProcess);
            this.Controls.Add((Control) this.objectConsumer);
            num2 = 14;
            break;
          case 3:
            this.objectConsumer.Name = "DeleteButton";
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto label_17;
          case 4:
            this.m_ConsumerConsumer.Name = "label1";
            this.m_ConsumerConsumer.Size = new Size(35, 13);
            this.m_ConsumerConsumer.TabIndex = 5;
            this.m_ConsumerConsumer.Text = "ISBN:";
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto case 1;
          case 5:
          case 8:
            this.objectConsumer.Size = new Size(75, 23);
            this.objectConsumer.TabIndex = 7;
            this.objectConsumer.Text = "Delete";
            this.objectConsumer.UseVisualStyleBackColor = true;
            this.objectConsumer.Click += new EventHandler(this.ConcatRepository);
            this.processConsumer.AutoSize = true;
            num2 = 1;
            break;
          case 6:
            this._MapperProcess.Name = "AuthorIDTextBox";
            this._MapperProcess.Size = new Size(100, 20);
            this._MapperProcess.TabIndex = 9;
            this.procProcess.Location = new Point(86, 9);
            this.procProcess.Name = "ISBNTextBox";
            num1 = 9;
            continue;
          case 7:
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(219, 99);
            num1 = 2;
            continue;
          case 9:
            this.procProcess.Size = new Size(100, 20);
            this.procProcess.TabIndex = 8;
            this.objectConsumer.Location = new Point(86, 66);
            num1 = 3;
            continue;
          case 10:
            this.Text = "Delete AuthorISBN";
            this.ResumeLayout(false);
            this.PerformLayout();
            num2 = 15;
            break;
          case 11:
          case 14:
            this.Controls.Add((Control) this.processConsumer);
            this.Controls.Add((Control) this.m_ConsumerConsumer);
            this.Name = "DeleteAuthorISBN";
            if (true)
            {
              num1 = 10;
              continue;
            }
            goto case 7;
          case 12:
            this._MapperProcess = new TextBox();
            if (!MappingProcess.CreateCreator())
            {
              num1 = 13;
              continue;
            }
            goto case 13;
          case 13:
            this.procProcess = new TextBox();
            this.objectConsumer = new Button();
            this.processConsumer = new Label();
            this.m_ConsumerConsumer = new Label();
            this.SuspendLayout();
            this._MapperProcess.Location = new Point(86, 40);
            num2 = 6;
            break;
          case 15:
            goto label_18;
          default:
            if (MappingProcess.EnableCreator())
            {
              num1 = 0;
              continue;
            }
            goto case 11;
        }
        num1 = num2;
      }
label_18:
      return;
label_17:;
    }

    internal static bool EnableCreator() => true;

    internal static bool CreateCreator() => false;
  }
}
