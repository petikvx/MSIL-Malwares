// Decompiled with JetBrains decompiler
// Type: 
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using ICSharpCode.SharpZipLib.Zip;
using System;
using System.IO;

internal class \uE00B : Stream
{
  private bool \uE001;
  private Stream \uE000;

  public \uE00B(string _param1)
  {
    this.\uE000 = (Stream) new FileStream(_param1, FileMode.Open, FileAccess.ReadWrite);
    this.\uE001 = true;
  }

  public \uE00B(Stream _param1) => this.\uE000 = _param1;

  public bool \uE000
  {
    get => this.\uE001;
    set => this.\uE001 = value;
  }

  public override bool CanRead => this.\uE000.CanRead;

  public override bool CanSeek => this.\uE000.CanSeek;

  public override bool CanTimeout => this.\uE000.CanTimeout;

  public override long Length => this.\uE000.Length;

  public override long Position
  {
    get => this.\uE000.Position;
    set => this.\uE000.Position = value;
  }

  public override bool CanWrite => this.\uE000.CanWrite;

  public override void Flush() => this.\uE000.Flush();

  public override long Seek(long offset, SeekOrigin origin) => this.\uE000.Seek(offset, origin);

  public override void SetLength(long value) => this.\uE000.SetLength(value);

  public override int Read(byte[] buffer, int offset, int count) => this.\uE000.Read(buffer, offset, count);

  public override void Write(byte[] buffer, int offset, int count) => this.\uE000.Write(buffer, offset, count);

  public override void Close()
  {
    Stream stream = this.\uE000;
    this.\uE000 = (Stream) null;
    if (!this.\uE001 || stream == null)
      return;
    this.\uE001 = false;
    stream.Close();
  }

  private void \uE000(ZipEntry _param1, \uE00A _param2)
  {
    CompressionMethod compressionMethod = _param1.CompressionMethod;
    bool flag1 = true;
    bool flag2 = false;
    this.\uE002(67324752);
    this.\uE004(_param1.Version);
    this.\uE004(_param1.Flags);
    this.\uE004((int) (byte) compressionMethod);
    this.\uE002((int) _param1.DosTime);
    if (flag1)
    {
      this.\uE002((int) _param1.Crc);
      if (_param1.LocalHeaderRequiresZip64)
      {
        this.\uE002(-1);
        this.\uE002(-1);
      }
      else
      {
        this.\uE002(_param1.IsCrypted ? (int) _param1.CompressedSize + 12 : (int) _param1.CompressedSize);
        this.\uE002((int) _param1.Size);
      }
    }
    else
    {
      if (_param2 != null)
        _param2.\uE000 = this.\uE000.Position;
      this.\uE002(0);
      if (_param2 != null)
        _param2.\uE001 = this.\uE000.Position;
      if (_param1.LocalHeaderRequiresZip64 && flag2)
      {
        this.\uE002(-1);
        this.\uE002(-1);
      }
      else
      {
        this.\uE002(0);
        this.\uE002(0);
      }
    }
    byte[] array = ZipConstants.ConvertToArray(_param1.Flags, _param1.Name);
    if (array.Length > (int) ushort.MaxValue)
      throw new ZipException(\uE01B.\uE000("\uF179\uF152\uF148\uF14E\uF145\uF11C\uF152\uF15D\uF151\uF159\uF11C\uF148\uF153\uF153\uF11C\uF150\uF153\uF152\uF15B\uF112", 61756));
    ZipExtraData zipExtraData = new ZipExtraData(_param1.ExtraData);
    if (_param1.LocalHeaderRequiresZip64 && (flag1 || flag2))
    {
      zipExtraData.StartNewEntry();
      if (flag1)
      {
        zipExtraData.AddLeLong(_param1.Size);
        zipExtraData.AddLeLong(_param1.CompressedSize);
      }
      else
      {
        zipExtraData.AddLeLong(-1L);
        zipExtraData.AddLeLong(-1L);
      }
      zipExtraData.AddNewEntry(1);
      if (!zipExtraData.Find(1))
        throw new ZipException(\uE01B.\uE000("\uE2ED\uE2CA\uE2D0\uE2C1\uE2D6\uE2CA\uE2C5\uE2C8\uE284\uE2C1\uE2D6\uE2D6\uE2CB\uE2D6\uE284\uE2C7\uE2C5\uE2CA\uE2D0\uE284\uE2C2\uE2CD\uE2CA\uE2C0\uE284\uE2C1\uE2DC\uE2D0\uE2D6\uE2C5\uE284\uE2C0\uE2C5\uE2D0\uE2C5", 58020));
      if (_param2 != null)
        _param2.\uE001 = (long) zipExtraData.CurrentReadIndex;
    }
    else
      zipExtraData.Delete(1);
    byte[] entryData = zipExtraData.GetEntryData();
    this.\uE004(array.Length);
    this.\uE004(entryData.Length);
    if (array.Length > 0)
      this.\uE000.Write(array, 0, array.Length);
    if (_param1.LocalHeaderRequiresZip64 && flag2)
      _param2.\uE001 += this.\uE000.Position;
    if (entryData.Length <= 0)
      return;
    this.\uE000.Write(entryData, 0, entryData.Length);
  }

  public long \uE000(int _param1, long _param2, int _param3, int _param4)
  {
    long num1 = _param2 - (long) _param3;
    if (num1 < 0L)
      return -1;
    long num2 = Math.Max(num1 - (long) _param4, 0L);
    while (num1 >= num2)
    {
      this.Seek(num1--, SeekOrigin.Begin);
      if (this.\uE005() == _param1)
        return this.Position;
    }
    return -1;
  }

  public void \uE000(long _param1, long _param2, long _param3)
  {
    long position = this.\uE000.Position;
    this.\uE002(101075792);
    this.\uE000(44L);
    this.\uE004(45);
    this.\uE004(45);
    this.\uE002(0);
    this.\uE002(0);
    this.\uE000(_param1);
    this.\uE000(_param1);
    this.\uE000(_param2);
    this.\uE000(_param3);
    this.\uE002(117853008);
    this.\uE002(0);
    this.\uE000(position);
    this.\uE002(1);
  }

  public void \uE000(long _param1, long _param2, long _param3, byte[] _param4)
  {
    if (_param1 >= (long) ushort.MaxValue || _param3 >= (long) uint.MaxValue || _param2 >= (long) uint.MaxValue)
      this.\uE000(_param1, _param2, _param3);
    this.\uE002(101010256);
    this.\uE004(0);
    this.\uE004(0);
    if (_param1 >= (long) ushort.MaxValue)
    {
      this.\uE003(ushort.MaxValue);
      this.\uE003(ushort.MaxValue);
    }
    else
    {
      this.\uE004((int) (short) _param1);
      this.\uE004((int) (short) _param1);
    }
    if (_param2 >= (long) uint.MaxValue)
      this.\uE001(uint.MaxValue);
    else
      this.\uE002((int) _param2);
    if (_param3 >= (long) uint.MaxValue)
      this.\uE001(uint.MaxValue);
    else
      this.\uE002((int) _param3);
    int num = _param4 != null ? _param4.Length : 0;
    if (num > (int) ushort.MaxValue)
      throw new ZipException(string.Format(\uE01B.\uE000("\uE8AD\uE881\uE883\uE883\uE88B\uE880\uE89A\uE8CE\uE882\uE88B\uE880\uE889\uE89A\uE886\uE8C6\uE895\uE8DE\uE893\uE8C7\uE8CE\uE887\uE89D\uE8CE\uE89A\uE881\uE881\uE8CE\uE882\uE881\uE880\uE889\uE8CE\uE88D\uE88F\uE880\uE8CE\uE881\uE880\uE882\uE897\uE8CE\uE88C\uE88B\uE8CE\uE8D8\uE8DA\uE8A5", 59630), (object) num));
    this.\uE004(num);
    if (num <= 0)
      return;
    this.Write(_param4, 0, _param4.Length);
  }

  public int \uE006()
  {
    int num1 = this.\uE000.ReadByte();
    if (num1 < 0)
      throw new EndOfStreamException();
    int num2 = this.\uE000.ReadByte();
    if (num2 < 0)
      throw new EndOfStreamException();
    return num1 | num2 << 8;
  }

  public int \uE005() => this.\uE006() | this.\uE006() << 16;

  public long \uE000() => (long) (uint) this.\uE005() | (long) this.\uE005() << 32;

  public void \uE004(int _param1)
  {
    this.\uE000.WriteByte((byte) (_param1 & (int) byte.MaxValue));
    this.\uE000.WriteByte((byte) (_param1 >> 8 & (int) byte.MaxValue));
  }

  public void \uE003(ushort _param1)
  {
    this.\uE000.WriteByte((byte) ((int) _param1 & (int) byte.MaxValue));
    this.\uE000.WriteByte((byte) ((uint) _param1 >> 8));
  }

  public void \uE002(int _param1)
  {
    this.\uE004(_param1);
    this.\uE004(_param1 >> 16);
  }

  public void \uE001(uint _param1)
  {
    this.\uE003((ushort) (_param1 & (uint) ushort.MaxValue));
    this.\uE003((ushort) (_param1 >> 16));
  }

  public void \uE000(long _param1)
  {
    this.\uE002((int) _param1);
    this.\uE002((int) (_param1 >> 32));
  }

  public void \uE000(ulong _param1)
  {
    this.\uE001((uint) (_param1 & (ulong) uint.MaxValue));
    this.\uE001((uint) (_param1 >> 32));
  }

  public int \uE000(ZipEntry _param1)
  {
    if (_param1 == null)
      throw new ArgumentNullException(\uE01B.\uE000("\uEEB7\uEEBC\uEEA6\uEEA0\uEEAB", 61138));
    int num1 = 0;
    if ((_param1.Flags & 8) != 0)
    {
      this.\uE002(134695760);
      this.\uE002((int) _param1.Crc);
      int num2 = num1 + 8;
      if (_param1.LocalHeaderRequiresZip64)
      {
        this.\uE000(_param1.CompressedSize);
        this.\uE000(_param1.Size);
        num1 = num2 + 16;
      }
      else
      {
        this.\uE002((int) _param1.CompressedSize);
        this.\uE002((int) _param1.Size);
        num1 = num2 + 8;
      }
    }
    return num1;
  }

  public void \uE000(bool _param1, DescriptorData _param2)
  {
    if (this.\uE005() != 134695760)
      throw new ZipException(\uE01B.\uE000("\uE0BB\uE09E\uE08B\uE09E\uE0DF\uE09B\uE09A\uE08C\uE09C\uE08D\uE096\uE08F\uE08B\uE090\uE08D\uE0DF\uE08C\uE096\uE098\uE091\uE09E\uE08B\uE08A\uE08D\uE09A\uE0DF\uE091\uE090\uE08B\uE0DF\uE099\uE090\uE08A\uE091\uE09B", 57599));
    _param2.Crc = (long) this.\uE005();
    if (_param1)
    {
      _param2.CompressedSize = this.\uE000();
      _param2.Size = this.\uE000();
    }
    else
    {
      _param2.CompressedSize = (long) this.\uE005();
      _param2.Size = (long) this.\uE005();
    }
  }
}
