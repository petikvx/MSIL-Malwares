// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.FlowController
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using System;

namespace PreEmptive.Analytics.Common
{
  public class FlowController : IFlowController
  {
    private int a;
    private int b;
    private int c;
    private int d;
    private int e;
    private int f;
    private int g;

    public int QueueSize
    {
      get
      {
        int num1 = -8863;
        int num2 = num1;
        num1 = -8863;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 2439;
        int num2 = num1;
        num1 = 2439;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.a = Math.Max(3, value);
            this.HighWater = this.a * 2 / 3;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int HighWater
    {
      get
      {
        int num1 = 28819;
        int num2 = num1;
        num1 = 28819;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num = 3;
        while (true)
        {
          switch (num)
          {
            case 0:
              switch (true ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_1;
                default:
                  if (false)
                    ;
                  if (true)
                    ;
                  if (value >= this.a)
                  {
                    num = 2;
                    continue;
                  }
                  goto label_11;
              }
            case 1:
              goto label_10;
            case 2:
              goto label_4;
            case 3:
label_1:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
          }
          num = value >= 1 ? 0 : 1;
        }
label_4:
        this.b = this.a - 1;
        return;
label_10:
        this.b = 1;
        return;
label_11:
        this.b = value;
      }
    }

    public int MaximumBatchSize
    {
      get
      {
        int num1 = 24327;
        int num2 = num1;
        num1 = 24327;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -7588;
        int num2 = num1;
        num1 = -7588;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int MaximumInterval
    {
      get
      {
        int num1 = 29081;
        int num2 = num1;
        num1 = 29081;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
label_0:
        int num;
        switch (0)
        {
          case 0:
label_2:
            this.c = Math.Max(1, value);
            num = 0;
            goto default;
          default:
            while (true)
            {
              switch (num)
              {
                case 0:
                  if (this.c < this.MinimumInterval)
                  {
                    switch (true ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_0;
                      default:
                        if (false)
                          ;
                        if (true)
                          ;
                        num = 2;
                        continue;
                    }
                  }
                  else
                    goto label_10;
                case 1:
                  goto label_8;
                case 2:
                  this.MinimumInterval = this.c;
                  num = 1;
                  continue;
                default:
                  goto label_2;
              }
            }
label_8:
            break;
label_10:
            break;
        }
      }
    }

    public int MinimumInterval
    {
      get
      {
        int num1 = -2603;
        int num2 = num1;
        num1 = -2603;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 18597;
        int num2 = num1;
        num1 = 18597;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.d = Math.Max(1, value);
            this.d = Math.Min(this.d, this.MaximumInterval);
            break;
          default:
            goto case 1;
        }
      }
    }

    public int Gain
    {
      get
      {
        int num1 = -26922;
        int num2 = num1;
        num1 = -26922;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -22773;
        int num2 = num1;
        num1 = -22773;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.e = Math.Max(1, value);
            break;
          default:
            goto case 1;
        }
      }
    }

    public int QuietGain
    {
      get
      {
        int num1 = -9011;
        int num2 = num1;
        num1 = -9011;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.f;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -11506;
        int num2 = num1;
        num1 = -11506;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.f = value < 1 ? 1 : (value > 100 ? 100 : value);
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool Offline
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -16148;
        int num2 = num1;
        num1 = -16148;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.i;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 20546;
        int num2 = num1;
        num1 = 20546;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.i = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool SupportOfflineStorage
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 15107;
        int num2 = num1;
        num1 = 15107;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.j;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 31157;
        int num2 = num1;
        num1 = 31157;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.j = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public bool SendDisabled
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -1146;
        int num2 = num1;
        num1 = -1146;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.k;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 6545;
        int num2 = num1;
        num1 = 6545;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.k = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int MaximumSequentialFailureCount
    {
      get
      {
        int num1 = -28678;
        int num2 = num1;
        num1 = -28678;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.l;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -29023;
        int num2 = num1;
        num1 = -29023;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.l = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int RetryTimeout
    {
      get
      {
        int num1 = -1474;
        int num2 = num1;
        num1 = -1474;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.g;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -29760;
        int num2 = num1;
        num1 = -29760;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.g = Math.Max(0, value);
            break;
          default:
            goto case 1;
        }
      }
    }

    public long LastSendTime
    {
      get
      {
        int num1 = -21422;
        int num2 = num1;
        num1 = -21422;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.m;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 27278;
        int num2 = num1;
        num1 = 27278;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.m = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int Interval
    {
      get
      {
        int num1 = -15065;
        int num2 = num1;
        num1 = -15065;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.n;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 19148;
        int num2 = num1;
        num1 = 19148;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.n = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int SequentialFailureCount
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -14056;
        int num2 = num1;
        num1 = -14056;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.o;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1755;
        int num2 = num1;
        num1 = 1755;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.o = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public long RetryTime
    {
      get
      {
        int num1 = -15907;
        int num2 = num1;
        num1 = -15907;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.p;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 29487;
        int num2 = num1;
        num1 = 29487;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.p = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int MinimumFailureCount
    {
      get
      {
        int num1 = 77;
        int num2 = num1;
        num1 = 77;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.q;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 2178;
        int num2 = num1;
        num1 = 2178;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.q = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int MinimumTimeToLive
    {
      get
      {
        int num1 = -27509;
        int num2 = num1;
        num1 = -27509;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.r;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -17672;
        int num2 = num1;
        num1 = -17672;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.r = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public FlowController() => this.a();

    private void a()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = -31239;
      int num2 = num1;
      num1 = -31239;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.QueueSize = 30;
          this.HighWater = 20;
          this.MaximumInterval = 30000;
          this.MinimumInterval = 1;
          this.Gain = 66;
          this.QuietGain = 33;
          this.Offline = false;
          this.SupportOfflineStorage = true;
          this.SendDisabled = false;
          this.MaximumSequentialFailureCount = 3;
          this.RetryTimeout = 60000;
          this.LastSendTime = 0L;
          this.Interval = 0;
          this.SequentialFailureCount = 0;
          this.RetryTime = 0L;
          this.MinimumFailureCount = 150;
          this.MinimumTimeToLive = 259200;
          this.MaximumBatchSize = 4190208;
          break;
        default:
          goto case 1;
      }
    }

    public bool CanStartClient()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 13025;
      int num2 = num1;
      num1 = 13025;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          return true;
        default:
          num1 = 0;
          if (num1 == 0)
            ;
          if (this.Offline)
            return this.SupportOfflineStorage;
          goto case 0;
      }
    }

    public bool BatchHasExpired(MessageBatch batch)
    {
      int num1 = 854;
      int num2 = num1;
      num1 = 854;
      int num3 = num1;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
          return false;
        default:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          if (batch.FailureCount >= this.MinimumFailureCount)
            return this.a(batch);
          goto case 0;
      }
    }

    private bool a(MessageBatch A_0)
    {
      int num1 = 16491;
      int num2 = num1;
      num1 = 16491;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return A_0.DateCreated.AddSeconds((double) this.MinimumTimeToLive) < DateTime.UtcNow;
        default:
          goto case 1;
      }
    }

    public int GetInterval(int numberOfMessages)
    {
      switch (0)
      {
        default:
          int num1 = 2;
          while (true)
          {
            int num2;
            long num3;
            int num4;
            long ticks;
            switch (num1)
            {
              case 0:
                num4 = (int) (Math.Abs(ticks - this.LastSendTime) / 10000L / (long) numberOfMessages * (long) this.HighWater);
                num3 = (long) this.Gain;
                num2 = 7;
                num1 = num2;
                continue;
              case 1:
                this.LastSendTime = DateTime.Now.Ticks;
                this.Interval = this.c;
                num2 = 12;
                num1 = num2;
                continue;
              case 2:
                switch (0)
                {
                  case 0:
                    goto label_4;
                  default:
                    continue;
                }
              case 3:
                this.Interval = this.MinimumInterval;
                num2 = 4;
                num1 = num2;
                continue;
              case 4:
              case 11:
                this.LastSendTime = ticks;
                num2 = -16069;
                int num5 = num2;
                num2 = -16069;
                int num6 = num2;
                switch (num5 == num6 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    num2 = 5;
                    num1 = num2;
                    continue;
                }
                break;
              case 5:
              case 12:
                goto label_24;
              case 6:
                if (numberOfMessages > 0)
                {
                  num2 = 0;
                  num1 = num2;
                  continue;
                }
                num4 = this.MaximumInterval;
                num3 = (long) this.QuietGain;
                num2 = 8;
                num1 = num2;
                continue;
              case 7:
              case 8:
                this.Interval += (int) (num3 * (long) (num4 - this.Interval) / 100L);
                num2 = 10;
                num1 = num2;
                continue;
              case 9:
                if (this.Interval < this.MinimumInterval)
                {
                  num2 = 3;
                  num1 = num2;
                  continue;
                }
                goto case 4;
              case 10:
                if (this.Interval <= this.MaximumInterval)
                {
                  num2 = 9;
                  num1 = num2;
                  continue;
                }
                num2 = 13;
                num1 = num2;
                continue;
              case 13:
                this.Interval = this.MaximumInterval;
                num2 = 11;
                num1 = num2;
                continue;
              default:
label_4:
                num2 = 1;
                if (num2 == 0)
                  ;
                if (this.LastSendTime != 0L)
                {
                  ticks = DateTime.Now.Ticks;
                  num4 = 0;
                  num3 = 0L;
                  num2 = 6;
                  num1 = num2;
                  continue;
                }
                break;
            }
            num2 = 1;
            num1 = num2;
          }
label_24:
          return this.Interval;
      }
    }

    public int MessagesToDrop(int currentMessageCount)
    {
      int num1 = -1813;
      int num2 = num1;
      num1 = -1813;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return Math.Max(currentMessageCount - this.QueueSize, 0);
        default:
          goto case 1;
      }
    }

    public bool ShouldSendNow(int messageCount)
    {
      int num1 = 785;
      int num2 = num1;
      num1 = 785;
      int num3 = num1;
      int num4;
      int num5;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_10:
          num4 = 1;
          num5 = num4;
          break;
        default:
          num4 = 0;
          if (num4 == 0)
            ;
          num4 = 0;
          num5 = num4;
          break;
      }
      while (true)
      {
        switch (num5)
        {
          case 0:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
          case 1:
            goto label_11;
          case 2:
            goto label_9;
          case 3:
            num4 = 2;
            num5 = num4;
            continue;
        }
        if (messageCount >= this.HighWater)
        {
          num4 = 3;
          num5 = num4;
        }
        else
          goto label_12;
      }
label_9:
      if (this.SendDisabled)
        goto label_12;
      else
        goto label_10;
label_11:
      num4 = 1;
      if (num4 == 0)
        ;
      return !this.Offline;
label_12:
      return false;
    }

    public virtual bool OkToTransmit()
    {
      int num1 = 0;
      int num2;
      while (true)
      {
        DateTime now;
        switch (num1)
        {
          case 0:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
          case 1:
            if (this.SequentialFailureCount >= this.MaximumSequentialFailureCount)
            {
              num2 = 4;
              num1 = num2;
              continue;
            }
            goto label_22;
          case 2:
            now = DateTime.Now;
            num2 = 6;
            num1 = num2;
            continue;
          case 3:
            if (this.g != 0)
            {
              num2 = 2;
              num1 = num2;
              continue;
            }
            goto label_15;
          case 4:
            num2 = 3;
            num1 = num2;
            continue;
          case 5:
            num2 = 8;
            num1 = num2;
            continue;
          case 6:
            if (now.Ticks < this.RetryTime)
            {
              num2 = 9;
              num1 = num2;
              continue;
            }
            goto label_22;
          case 7:
            goto label_16;
          case 8:
            num2 = 1;
            if (num2 == 0)
              ;
            if (!this.SendDisabled)
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            num2 = 7;
            num1 = num2;
            continue;
          case 9:
            goto label_15;
        }
        if (!this.Offline)
        {
          num2 = 5;
          num1 = num2;
        }
        else
          goto label_16;
      }
label_15:
      return false;
label_16:
      num2 = -25467;
      int num3 = num2;
      num2 = -25467;
      int num4 = num2;
      switch (num3 == num4 ? 1 : 0)
      {
        case 0:
        case 2:
          goto label_15;
        default:
          num2 = 0;
          if (num2 == 0)
            ;
          return false;
      }
label_22:
      return true;
    }

    public virtual void OnSend(bool sendSucceeded)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            ++this.SequentialFailureCount;
            num2 = 1;
            num1 = num2;
            continue;
          case 1:
            if (this.SequentialFailureCount >= this.MaximumSequentialFailureCount)
            {
              num2 = 7;
              num1 = num2;
              continue;
            }
            goto label_19;
          case 2:
            if (this.MaximumSequentialFailureCount > 0)
            {
              num2 = 0;
              num1 = num2;
              continue;
            }
            goto label_13;
          case 3:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
          case 4:
            goto label_14;
          case 5:
            if (this.RetryTimeout > 0)
            {
              num2 = 8;
              num1 = num2;
              continue;
            }
            goto label_23;
          case 6:
            goto label_9;
          case 7:
            num2 = 5;
            num1 = num2;
            continue;
          case 8:
            this.RetryTime = DateTime.Now.Ticks + (long) (this.RetryTimeout * 10000);
            num2 = -30189;
            int num3 = num2;
            num2 = -30189;
            int num4 = num2;
            switch (num3 == num4 ? 1 : 0)
            {
              case 0:
                goto label_5;
              case 2:
                goto label_24;
              default:
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = 0;
                if (num2 == 0)
                  ;
                num2 = 6;
                num1 = num2;
                continue;
            }
        }
        if (sendSucceeded)
        {
          num2 = 4;
          num1 = num2;
        }
        else
        {
          num2 = 2;
          num1 = num2;
        }
      }
label_9:
      return;
label_23:
      return;
label_19:
      return;
label_14:
      this.SequentialFailureCount = 0;
      this.RetryTime = 0L;
      return;
label_5:
      return;
label_24:
      return;
label_13:;
    }

    public virtual IFlowController Copy()
    {
      int num1 = -19626;
      int num2 = num1;
      num1 = -19626;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return (IFlowController) this.MemberwiseClone();
        default:
          goto case 1;
      }
    }
  }
}
