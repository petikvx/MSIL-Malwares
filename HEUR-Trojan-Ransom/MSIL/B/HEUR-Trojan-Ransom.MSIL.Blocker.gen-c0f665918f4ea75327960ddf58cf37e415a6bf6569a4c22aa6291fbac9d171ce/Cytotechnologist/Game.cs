// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: SafeArrayTypeMismatchExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: FE98C20D-A437-4C5F-9849-D190358A66A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c0f665918f4ea75327960ddf58cf37e415a6bf6569a4c22aa6291fbac9d171ce.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 1187241950;
      int aIndex;
      JSONNode jsonNode;
      int count;
      bool flag1;
      int index;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1671200987)) % 16U)
        {
          case 0:
            flag2 = index < count;
            num1 = 1076346966;
            continue;
          case 1:
            this._playerStates[index] = new PlayerState();
            ++index;
            num1 = 623463531;
            continue;
          case 2:
            this._buffer = buffer;
            num1 = (int) num2 * -77781924 ^ -1855826041;
            continue;
          case 3:
            goto label_3;
          case 4:
            this._random = Game.\u200F⁫⁫⁫⁫​⁫​⁫‭‭⁮‬‬‮‍‬‎‫‭‪‮⁭‏‏‍‌‭⁪‌⁭⁯‪‪‎‬‭⁪‎‎‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 1432723259 ^ -1598189685;
            continue;
          case 5:
            num1 = (int) num2 * 1213916764 ^ -1246384328;
            continue;
          case 6:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -220916341 ^ -1779819728;
            continue;
          case 7:
            int num3 = !flag1 ? -1673523070 : (num3 = -1828225889);
            num1 = num3 ^ (int) num2 * -1471537879;
            continue;
          case 8:
            flag1 = aIndex < count;
            num1 = 1942925996;
            continue;
          case 9:
            index = 0;
            num1 = (int) num2 * -1607758789 ^ 1017082344;
            continue;
          case 10:
            goto label_1;
          case 11:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            ++aIndex;
            num1 = 1089085139;
            continue;
          case 12:
            this._dice = new Dice();
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 809130325 ^ -1062388583;
            continue;
          case 13:
            int num4 = !flag2 ? 989444049 : (num4 = 756097299);
            num1 = num4 ^ (int) num2 * -164228115;
            continue;
          case 14:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * 147109198 ^ 743542167;
            continue;
          case 15:
            num1 = (int) num2 * 1222462710 ^ -1926786109;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 107322083;
        PlayerState[] playerStates;
        int index;
        bool finished;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 95383020)) % 14U)
          {
            case 0:
              goto label_1;
            case 1:
              int num3;
              num1 = num3 = index < playerStates.Length ? 647407850 : (num3 = 1807566132);
              continue;
            case 2:
              num1 = (int) num2 * 188381787 ^ -20907860;
              continue;
            case 3:
              int num4 = this._finished ? 847900316 : (num4 = 658687096);
              num1 = num4 ^ (int) num2 * -2088733701;
              continue;
            case 4:
              finished = true;
              num1 = (int) num2 * 1385861224 ^ -1028010707;
              continue;
            case 5:
              finished = false;
              num1 = (int) num2 * -651633509 ^ -1865340481;
              continue;
            case 6:
              ++index;
              num1 = 1723606039;
              continue;
            case 7:
              num1 = (int) num2 * -689013082 ^ 1738044780;
              continue;
            case 8:
              int num5 = playerState.State == State.Playing ? -1987445077 : (num5 = -1747984794);
              num1 = num5 ^ (int) num2 * 296519567;
              continue;
            case 9:
              playerStates = this._playerStates;
              index = 0;
              num1 = 1723606039;
              continue;
            case 11:
              finished = true;
              num1 = (int) num2 * -9029485 ^ 100850512;
              continue;
            case 12:
              playerState = playerStates[index];
              num1 = 922831680;
              continue;
            case 13:
              num1 = (int) num2 * 414829085 ^ -2067267139;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = -1186614009;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1635221771)) % 8U)
        {
          case 1:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 681916971 ^ -534915966;
            continue;
          case 2:
            num1 = (int) num2 * -617843970 ^ -1430803076;
            continue;
          case 3:
            num1 = (int) num2 * -20156941 ^ -1062097371;
            continue;
          case 4:
            this._currentTurn = 0;
            num1 = (int) num2 * 206328208 ^ 651782643;
            continue;
          case 5:
            this.Losers.Clear();
            num1 = (int) num2 * -2125901086 ^ -1173837756;
            continue;
          case 6:
            this._finished = false;
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1365616920 ^ 281757605;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 557194740;
      bool flag;
      PlayerState playerState;
      Player player;
      int num2;
      int planningCardsCount;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1301596813)) % 25U)
        {
          case 0:
            num2 = 0;
            num1 = 1078026751;
            continue;
          case 1:
            num2 = 0;
            int num4 = planningCardsCount != 0 ? 1362754128 : (num4 = 1886831048);
            num1 = num4 ^ (int) num3 * 631327374;
            continue;
          case 2:
            playerState.Sprint = -1;
            num1 = (int) num3 * 248208524 ^ -815682518;
            continue;
          case 3:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1121838405 ^ -244813860;
            continue;
          case 4:
            num1 = 1328124063;
            continue;
          case 5:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1135165867 ^ 164022356;
            continue;
          case 6:
            num1 = (int) num3 * 2037054880 ^ 794674668;
            continue;
          case 7:
            int num5 = !flag ? -1081894388 : (num5 = -2086409612);
            num1 = num5 ^ (int) num3 * 350885410;
            continue;
          case 8:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 497585920;
            continue;
          case 9:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = (int) num3 * 419956617 ^ 71357247;
            continue;
          case 10:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1377992206 ^ 1082098133;
            continue;
          case 11:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -658243450 ^ 1854810805;
            continue;
          case 12:
            flag = num2 > 0;
            num1 = 1117513265;
            continue;
          case 13:
            num1 = (int) num3 * -1114509845 ^ -659379757;
            continue;
          case 14:
            num1 = 1720580741;
            continue;
          case 15:
            int num6;
            num1 = num6 = index >= this.Players.Length ? 1348511922 : (num6 = 611474927);
            continue;
          case 16:
            num1 = 1324214380;
            continue;
          case 17:
            int num7 = player.UseOneMorePlanningSprint ? 1184923066 : (num7 = 869221952);
            num1 = num7 ^ (int) num3 * 1975309328;
            continue;
          case 18:
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -863216929 ^ 652530923;
            continue;
          case 19:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 929194238 ^ 1930967159;
            continue;
          case 20:
            num1 = (int) num3 * 185837554 ^ 655864063;
            continue;
          case 21:
            num1 = (int) num3 * 1208807402 ^ 308410900;
            continue;
          case 22:
            ++index;
            num1 = (int) num3 * -950641310 ^ 1305148670;
            continue;
          case 23:
            goto label_1;
          case 24:
            goto label_3;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag1 = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = 1869348823;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 710599842)) % 12U)
        {
          case 0:
            this.Print((object) Game.\u200E‏‫‍‎‫⁪​‎⁭‫⁮‎‭‏‮⁮‪‫‎​‪⁯‎‎‬‮‎‍⁮⁭‌‮‫‍‏‍‏‌‮‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1179550475 ^ 984061805;
            continue;
          case 1:
            int num3 = flag1 ? 1476986075 : (num3 = 513857527);
            num1 = num3 ^ (int) num2 * -127327525;
            continue;
          case 2:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1018675955;
            continue;
          case 3:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -1806271294 ^ 1509908632;
            continue;
          case 4:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1420249690 ^ 354607286;
            continue;
          case 5:
            int num4 = !flag2 ? 436018974 : (num4 = 233195741);
            num1 = num4 ^ (int) num2 * -205810921;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = (int) num2 * -970797641 ^ -2092425739;
            continue;
          case 8:
            num1 = (int) num2 * 1237354521 ^ -2078129615;
            continue;
          case 9:
            goto label_3;
          case 10:
            this._currentPlayer = 0;
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * -1137628556 ^ -25686881;
            continue;
          case 11:
            this.Print((object) Game.\u200E‫‬‪‫‪‎‫‮​‌‭‬⁭​⁫⁪⁬‏‫‭⁭⁫‭‍⁭‫‍⁯⁫‬⁫⁪‮‏‎‬⁬⁯⁪‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 141742633;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
      PlayerState playerState1 = this._playerStates[playerIndex];
      this.Print((object) Game.\u200E‏‫‍‎‫⁪​‎⁭‫⁮‎‭‏‮⁮‪‫‎​‪⁯‎‎‬‮‎‍⁮⁭‌‮‫‍‏‍‏‌‮‮("\nPLAYER ", playerIndex.ToString()));
label_1:
      int num1 = 321498869;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        int num4;
        int num5;
        Card card;
        bool flag8;
        int index;
        PlayerState playerState2;
        bool flag9;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        bool flag15;
        int num6;
        switch ((num2 = (uint) (num1 ^ 392167688)) % 84U)
        {
          case 0:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 2055977591 ^ 910893686;
            continue;
          case 1:
            ++playerState1.Sprint;
            num1 = (int) num2 * 734709401 ^ -958784014;
            continue;
          case 2:
            int num7 = flag1 ? 1374694140 : (num7 = 956538568);
            num1 = num7 ^ (int) num2 * -537469117;
            continue;
          case 3:
            num5 = card.Impact;
            num1 = (int) num2 * -979985489 ^ 2032623190;
            continue;
          case 4:
            flag14 = !flag8;
            num1 = (int) num2 * 116033619 ^ -1944350780;
            continue;
          case 5:
            int num8 = flag15 ? -933395346 : (num8 = -1986655942);
            num1 = num8 ^ (int) num2 * -1020471873;
            continue;
          case 6:
            ++index;
            num1 = 1299504464;
            continue;
          case 7:
            num1 = (int) num2 * 1585296842 ^ 998901439;
            continue;
          case 8:
            int num9 = !flag14 ? 964916599 : (num9 = 1764963311);
            num1 = num9 ^ (int) num2 * -374812575;
            continue;
          case 9:
            num1 = (int) num2 * 2144374712 ^ -807665599;
            continue;
          case 10:
            flag15 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -248441336 ^ 1086450153;
            continue;
          case 11:
            flag11 = playerState1.Sprint < 0;
            num1 = 1193528266;
            continue;
          case 12:
            num1 = (int) num2 * -1117870288 ^ -1707613322;
            continue;
          case 13:
            flag5 = false;
            num1 = 806999140;
            continue;
          case 14:
            num1 = 1252052854;
            continue;
          case 15:
            flag12 = flag5;
            num1 = 1836958723;
            continue;
          case 16:
            num1 = (int) num2 * -392404411 ^ 1150508962;
            continue;
          case 17:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            flag5 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -972476212 ^ 847893690;
            continue;
          case 18:
            flag5 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1323651716 ^ 1335242694;
            continue;
          case 19:
            ++num3;
            num1 = 1029916969;
            continue;
          case 20:
            playerState1.Resources -= num5;
            num1 = (int) num2 * -369493898 ^ 258040985;
            continue;
          case 21:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -2074898050 ^ -919579429;
            continue;
          case 22:
            num1 = 1833370998;
            continue;
          case 23:
            int num10 = flag3 ? 1546087974 : (num10 = 1954704001);
            num1 = num10 ^ (int) num2 * -1439009057;
            continue;
          case 24:
            num1 = (int) num2 * 1451053097 ^ 249878415;
            continue;
          case 25:
            flag7 = playerState1.State != 0;
            num1 = (int) num2 * -425025789 ^ -213079579;
            continue;
          case 26:
            flag4 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 913409284;
            continue;
          case 27:
            num1 = 1069751591;
            continue;
          case 28:
            index = 0;
            num1 = 1664642746;
            continue;
          case 29:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag2 ? (object) "ALL " : (object) "", flag8 ? (object) "receives" : (object) "pays", (object) Game.\u202B⁮⁫‫‫⁭‬‎‍‮​‌‍⁯⁬‌‮‎‌⁪‫‪⁮​‎‪‫‏⁪‮‫⁫‮⁪⁪‬⁬‫‭⁫‮(num5), flag5 ? (object) "advance" : (object) "stay");
            num1 = 1856576749;
            continue;
          case 30:
            num1 = 566982671;
            continue;
          case 31:
            num1 = (int) num2 * -273025001 ^ 904349517;
            continue;
          case 32:
            this._finished = true;
            num1 = (int) num2 * -868371510 ^ -1719533447;
            continue;
          case 33:
            flag1 = num3 < this._playerStates.Length;
            num1 = 827816082;
            continue;
          case 34:
            num1 = 70836213;
            continue;
          case 35:
            flag5 = true;
            num1 = (int) num2 * 1849140193 ^ -281616696;
            continue;
          case 36:
            int num11 = flag10 ? 1220880486 : (num11 = 812803366);
            num1 = num11 ^ (int) num2 * 1743132692;
            continue;
          case 37:
            num1 = (int) num2 * -1410566480 ^ -787942589;
            continue;
          case 38:
            num1 = (int) num2 * -543217117 ^ -2007022918;
            continue;
          case 39:
            int num12 = playerState2.Resources >= 0 ? -1583746525 : (num12 = -1973389891);
            num1 = num12 ^ (int) num2 * 1560605517;
            continue;
          case 40:
            goto label_3;
          case 41:
            int num13 = playerState1.Resources >= 0 ? 1177073879 : (num13 = 2096744357);
            num1 = num13 ^ (int) num2 * 2126435969;
            continue;
          case 42:
            playerState2.State = State.Lose;
            flag6 = !this.Losers.Contains(index);
            num1 = 1329025713;
            continue;
          case 43:
            flag9 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 41547696;
            continue;
          case 44:
            flag13 = !this.Losers.Contains(num3);
            num1 = 2111658705;
            continue;
          case 45:
            num3 = 0;
            num1 = (int) num2 * 439235520 ^ -650003221;
            continue;
          case 46:
            num1 = (int) num2 * -2011041730 ^ 1097281612;
            continue;
          case 47:
            num1 = 1220441587;
            continue;
          case 48:
            this.Winners.Add(playerIndex);
            int num14 = !this.Rules.OnlyOneWinner ? 510411496 : (num14 = 2076486096);
            num1 = num14 ^ (int) num2 * 1975577602;
            continue;
          case 49:
            flag3 = !flag2;
            num1 = (int) num2 * -697235596 ^ 1084145803;
            continue;
          case 50:
            num1 = (int) num2 * -102812470 ^ 685113347;
            continue;
          case 51:
            num1 = (int) num2 * -114769483 ^ 927559314;
            continue;
          case 52:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1969309521 ^ -1043244430;
            continue;
          case 53:
            this.Losers.Add(index);
            num1 = (int) num2 * -1604883821 ^ 1954251274;
            continue;
          case 54:
            int num15 = flag11 ? 1984665811 : (num15 = 396418986);
            num1 = num15 ^ (int) num2 * -1149806094;
            continue;
          case 55:
            card = this.DrawCard();
            flag8 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 358804298 ^ 229096889;
              continue;
            }
            num6 = 0;
            break;
          case 56:
            int num16 = !flag9 ? -1512793724 : (num16 = -2129859791);
            num1 = num16 ^ (int) num2 * 1427060972;
            continue;
          case 57:
            int num17 = flag13 ? 546541432 : (num17 = 1135432908);
            num1 = num17 ^ (int) num2 * -1683512323;
            continue;
          case 58:
            num1 = (int) num2 * -1842050723 ^ 17354666;
            continue;
          case 59:
            num1 = (int) num2 * 1095282710 ^ -1686775027;
            continue;
          case 60:
            num1 = 192620580;
            continue;
          case 61:
            num1 = 1121673395;
            continue;
          case 62:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u202A‪‎‏‮‮‎⁮‪⁮​‮⁪‏‌‌⁯​⁭‍⁭‌⁮​‌‍‮‫‮‍⁪‮⁪⁭‏‭‭⁯‪⁪‮(0, num5 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -2009604165 ^ -895026507;
            continue;
          case 63:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 64:
            goto label_1;
          case 65:
            int num18 = !flag6 ? 1686517363 : (num18 = 1140365300);
            num1 = num18 ^ (int) num2 * 771497441;
            continue;
          case 66:
            num1 = 712316339;
            continue;
          case 67:
            num1 = (int) num2 * -629168522 ^ 167539386;
            continue;
          case 68:
            int num19 = flag4 ? 428579318 : (num19 = 690707530);
            num1 = num19 ^ (int) num2 * 1577387427;
            continue;
          case 69:
            int num20 = num3 != playerIndex ? -100693250 : (num20 = -1193956346);
            num1 = num20 ^ (int) num2 * -1033613638;
            continue;
          case 70:
            num5 = Game.\u202A‪‎‏‮‮‎⁮‪⁮​‮⁪‏‌‌⁯​⁭‍⁭‌⁮​‌‍‮‫‮‍⁪‮⁪⁭‏‭‭⁯‪⁪‮(0, num4);
            num1 = (int) num2 * -1567651091 ^ 1091156095;
            continue;
          case 71:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -827436486 ^ 567781477;
            continue;
          case 72:
            num1 = (int) num2 * 64834416 ^ 1779399592;
            continue;
          case 73:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1372387967 ^ 177958932;
            continue;
          case 74:
            int num21 = !flag7 ? -1634604647 : (num21 = -2004795735);
            num1 = num21 ^ (int) num2 * -378710045;
            continue;
          case 75:
            ++playerState1.Sprint;
            num1 = (int) num2 * 878655952 ^ -898644952;
            continue;
          case 76:
            flag10 = index < this._playerStates.Length;
            num1 = 657373696;
            continue;
          case 77:
            num1 = (int) num2 * -864022490 ^ 2110103908;
            continue;
          case 78:
            num1 = (int) num2 * -322008518 ^ -513476747;
            continue;
          case 79:
            num1 = (int) num2 * -1015878119 ^ 488504898;
            continue;
          case 80:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200E‏‫‍‎‫⁪​‎⁭‫⁮‎‭‏‮⁮‪‫‎​‪⁯‎‎‬‮‎‍⁮⁭‌‮‫‍‏‍‏‌‮‮("\t", playerState3 != null ? Game.\u200F‮‍‮​‎‌‎⁪⁮⁪‍‫‮‬⁫‭⁫⁯⁮⁪⁭‬⁬‎‪‎⁫⁭‌⁪‌‍⁯⁭⁬⁯‎‮((object) playerState3) : (string) null));
            num1 = 673048144;
            continue;
          case 81:
            num1 = (int) num2 * -1594512125 ^ -855315847;
            continue;
          case 82:
            playerState1.State = State.Won;
            num1 = (int) num2 * 295418423 ^ 1457688162;
            continue;
          case 83:
            int num22 = !flag12 ? -1300275357 : (num22 = -115470847);
            num1 = num22 ^ (int) num2 * 1902888244;
            continue;
          default:
            goto label_89;
        }
        flag2 = num6 != 0;
        num1 = 1263055864;
      }
label_3:
      return;
label_89:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -813304233;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1179828361)) % 9U)
        {
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1335483003 ^ 910832469;
            continue;
          case 2:
            card1 = this._deck[0];
            num1 = -1112131817;
            continue;
          case 3:
            int num3 = !flag ? -523925613 : (num3 = -1339823980);
            num1 = num3 ^ (int) num2 * 1288269794;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * 259231923 ^ 671803620;
            continue;
          case 6:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * -54161482 ^ 1907842694;
            continue;
          case 7:
            num1 = (int) num2 * 826131946 ^ -1266625717;
            continue;
          case 8:
            num1 = (int) num2 * -1996967091 ^ 440654466;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = 1175283520;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 96405353)) % 9U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200F‮‍‮​‎‌‎⁪⁮⁪‍‫‮‬⁫‭⁫⁯⁮⁪⁭‬⁬‎‪‎⁫⁭‌⁪‌‍⁯⁭⁬⁯‎‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200D⁬⁮‏⁫‬‬‫‏‪‫‮⁫⁯‮⁮⁪‮⁯‪⁮‍‎‮‎⁭‬‬⁯‍‏‮‎⁫‬‮⁪​‎‌‮(strArray);
            num1 = 1569813225;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * -1680759007 ^ 904256839;
            continue;
          case 3:
            flag = index < this._playerStates.Length;
            num1 = 1440979702;
            continue;
          case 4:
            num1 = (int) num2 * 413226313 ^ 1481764304;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * -849701543 ^ 1906135974;
            continue;
          case 6:
            goto label_1;
          case 7:
            ++index;
            num1 = (int) num2 * 1624674232 ^ -791606002;
            continue;
          case 8:
            int num3 = flag ? -2029509098 : (num3 = -99234985);
            num1 = num3 ^ (int) num2 * 1039219160;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more)
    {
      string str = Game.\u206F‫‭‏‬‌⁪‮‎⁬‫‍⁮‍​⁬⁪⁯‪⁯⁫‬⁬‫⁯‎‬⁬⁯⁯⁪⁬‌⁪⁪⁪⁪‬⁪‌‮(Game.\u200F‮‍‮​‎‌‎⁪⁮⁪‍‫‮‬⁫‭⁫⁯⁮⁪⁭‬⁬‎‪‎⁫⁭‌⁪‌‍⁯⁭⁬⁯‎‮(text), more);
label_1:
      int num1 = 83150331;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1034110829)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u206C‏‌​‎⁯‫⁪‪‍‪⁮‪⁪‪‮⁮⁪‭‌⁯⁪‌‎‌​⁪‫‭‮⁭‌⁯​‌⁬‭⁯⁪⁬‮(this._buffer, str);
            num1 = (int) num2 * -766531538 ^ 1117428371;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u200F⁫⁫⁫⁫​⁫​⁫‭‭⁮‬‬‮‍‬‎‫‭‪‮⁭‏‏‍‌‭⁪‌⁭⁯‪‪‎‬‭⁪‎‎‮([In] int obj0) => new Random(obj0);

    static string \u200E‫‬‪‫‪‎‫‮​‌‭‬⁭​⁫⁪⁬‏‫‭⁭⁫‭‍⁭‫‍⁯⁫‬⁫⁪‮‏‎‬⁬⁯⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200E‏‫‍‎‫⁪​‎⁭‫⁮‎‭‏‮⁮‪‫‎​‪⁯‎‎‬‮‎‍⁮⁭‌‮‫‍‏‍‏‌‮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202A‪‎‏‮‮‎⁮‪⁮​‮⁪‏‌‌⁯​⁭‍⁭‌⁮​‌‍‮‫‮‍⁪‮⁪⁭‏‭‭⁯‪⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202B⁮⁫‫‫⁭‬‎‍‮​‌‍⁯⁬‌‮‎‌⁪‫‪⁮​‎‪‫‏⁪‮‫⁫‮⁪⁪‬⁬‫‭⁫‮([In] int obj0) => Math.Abs(obj0);

    static string \u200F‮‍‮​‎‌‎⁪⁮⁪‍‫‮‬⁫‭⁫⁯⁮⁪⁭‬⁬‎‪‎⁫⁭‌⁪‌‍⁯⁭⁬⁯‎‮([In] object obj0) => obj0.ToString();

    static string \u200D⁬⁮‏⁫‬‬‫‏‪‫‮⁫⁯‮⁮⁪‮⁯‪⁮‍‎‮‎⁭‬‬⁯‍‏‮‎⁫‬‮⁪​‎‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206F‫‭‏‬‌⁪‮‎⁬‫‍⁮‍​⁬⁪⁯‪⁯⁫‬⁬‫⁯‎‬⁬⁯⁯⁪⁬‌⁪⁪⁪⁪‬⁪‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206C‏‌​‎⁯‫⁪‪‍‪⁮‪⁪‪‮⁮⁪‭‌⁯⁪‌‎‌​⁪‫‭‮⁭‌⁯​‌⁬‭⁯⁪⁬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
