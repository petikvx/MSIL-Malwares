// Decompiled with JetBrains decompiler
// Type: SmartAssembly.MemoryManagement.MemoryManager
// Assembly: server_crypt, Version=4.9.8.2, Culture=neutral, PublicKeyToken=null
// MVID: 36C2637B-DE89-4420-A7CB-B065199976E0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.gsj-5632e5708cedc69518233e01f82b49a8af5106159562858865b70c4ce76aff94.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace SmartAssembly.MemoryManagement
{
  public sealed class MemoryManager
  {
    private static MemoryManager \u0001;
    private long \u0001 = DateTime.Now.Ticks;

    [DllImport("kernel32", EntryPoint = "SetProcessWorkingSetSize")]
    private static extern int \u0001(
      IntPtr process,
      int minimumWorkingSetSize,
      int maximumWorkingSetSize);

    private void \u0001()
    {
      try
      {
        using (Process currentProcess = Process.GetCurrentProcess())
        {
          do
          {
            if (true)
              goto label_4;
label_2:
            continue;
label_4:
            MemoryManager.\u0001(currentProcess.Handle, -1, -1);
            goto label_2;
          }
          while (false);
        }
      }
      catch
      {
      }
    }

    private void \u0001(object sender, EventArgs e)
    {
      try
      {
        long num1;
        if (true)
        {
          DateTime now = DateTime.Now;
          if (true)
            goto label_9;
label_1:
          DateTime dateTime;
          num1 = dateTime.Ticks;
          goto label_10;
label_9:
          dateTime = now;
          goto label_1;
        }
        else
          goto label_11;
label_10:
        long num2 = num1;
label_11:
        num1 = num2;
        if (true)
          goto label_12;
label_4:
        long num3;
        if (true)
          num3 = 10000000L;
        else
          goto label_10;
label_6:
        if (num1 <= num3)
          return;
        this.\u0001 = num2;
        this.\u0001();
        return;
label_12:
        long num4 = this.\u0001;
        if (true)
        {
          num1 -= num4;
          goto label_4;
        }
        else
        {
          num3 = num4;
          goto label_6;
        }
      }
      catch
      {
      }
    }

    private MemoryManager()
    {
      Application.Idle += new EventHandler(this.\u0001);
      this.\u0001();
    }

    public static void \u0001()
    {
      try
      {
        if (Environment.OSVersion.Platform != PlatformID.Win32NT)
          return;
        MemoryManager.\u0001 = new MemoryManager();
      }
      catch
      {
      }
    }
  }
}
