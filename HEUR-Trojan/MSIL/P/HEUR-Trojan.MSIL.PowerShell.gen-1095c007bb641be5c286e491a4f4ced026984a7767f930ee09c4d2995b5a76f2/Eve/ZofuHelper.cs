// Decompiled with JetBrains decompiler
// Type: HeavyDuck.Eve.ZofuHelper
// Assembly: RemotingFieldCachedD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EDD4CF72-357A-47DC-BB8E-50FC31FC092E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-1095c007bb641be5c286e491a4f4ced026984a7767f930ee09c4d2995b5a76f2.exe

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Xml.XPath;

namespace HeavyDuck.Eve
{
  public class ZofuHelper : IPriceProvider
  {
    private static string m_cachePath = Path.Combine(Resources.CacheRoot, "zofu");
    private static readonly Uri m_root30d = new Uri("http://eve.no-ip.de/prices/30d/");
    private static readonly TimeSpan m_cacheTtl = TimeSpan.FromHours(4.0);
    private static readonly Dictionary<int, Dictionary<int, ZofuHelper.ZofuEntry>> m_cache = new Dictionary<int, Dictionary<int, ZofuHelper.ZofuEntry>>();
    private static readonly Regex m_cacheFileRegex = new Regex("^prices-(\\d+|all|chs)\\.xml$");
    public static readonly ZofuHelper Instance = new ZofuHelper();

    private ZofuHelper()
    {
    }

    private static string GetRegionFileName(int regionID)
    {
      if (regionID == -1)
        return "prices-all.xml";
      return regionID == -2 ? "prices-chs.xml" : string.Format("prices-{0}.xml", (object) regionID);
    }

    private static Uri GetRegionUri(int regionID) => new Uri(ZofuHelper.m_root30d, ZofuHelper.GetRegionFileName(regionID));

    private static int GetRegionID(string match)
    {
      if (match == "all")
        return -1;
      return match == "chs" ? -2 : int.Parse(match, (IFormatProvider) CultureInfo.InvariantCulture);
    }

    private static Dictionary<int, ZofuHelper.ZofuEntry> ParseFile(string path)
    {
      Dictionary<int, ZofuHelper.ZofuEntry> file = new Dictionary<int, ZofuHelper.ZofuEntry>();
      using (FileStream fileStream = File.OpenRead(path))
      {
        XPathNodeIterator xpathNodeIterator = new XPathDocument((Stream) fileStream).CreateNavigator().Select("/eveapi/result/rowset[@name = 'prices']/row");
        while (xpathNodeIterator.MoveNext())
        {
          int key = int.Parse(xpathNodeIterator.Current.SelectSingleNode("@typeID").Value, (IFormatProvider) CultureInfo.InvariantCulture);
          file[key] = new ZofuHelper.ZofuEntry()
          {
            Avg = Decimal.Parse(xpathNodeIterator.Current.SelectSingleNode("@avg").Value, (IFormatProvider) CultureInfo.InvariantCulture),
            Median = Decimal.Parse(xpathNodeIterator.Current.SelectSingleNode("@median").Value, (IFormatProvider) CultureInfo.InvariantCulture),
            Volume = long.Parse(xpathNodeIterator.Current.SelectSingleNode("@vol").Value, (IFormatProvider) CultureInfo.InvariantCulture),
            Low = Decimal.Parse(xpathNodeIterator.Current.SelectSingleNode("@lo").Value, (IFormatProvider) CultureInfo.InvariantCulture),
            High = Decimal.Parse(xpathNodeIterator.Current.SelectSingleNode("@hi").Value, (IFormatProvider) CultureInfo.InvariantCulture),
            First = DateTime.Parse(xpathNodeIterator.Current.SelectSingleNode("@first").Value, (IFormatProvider) CultureInfo.InvariantCulture),
            Last = DateTime.Parse(xpathNodeIterator.Current.SelectSingleNode("@last").Value, (IFormatProvider) CultureInfo.InvariantCulture)
          };
        }
      }
      return file;
    }

    private void OnUpdateProgress(int progress, int max)
    {
      EventHandler<ProgressEventArgs> updateProgress = this.UpdateProgress;
      if (updateProgress == null)
        return;
      updateProgress((object) this, new ProgressEventArgs(progress, max));
    }

    private CacheResult DownloadRegionFile(int regionID)
    {
      string str = Path.Combine(ZofuHelper.m_cachePath, ZofuHelper.GetRegionFileName(regionID));
      string url = ZofuHelper.GetRegionUri(regionID).ToString();
      Directory.CreateDirectory(ZofuHelper.m_cachePath);
      if (Resources.IsFileCached(str, ZofuHelper.m_cacheTtl).State != 0)
        this.OnUpdateProgress(0, 1);
      return Resources.CacheFile(url, str, ZofuHelper.m_cacheTtl, (PostDownloadAction) (tempPath =>
      {
        lock (ZofuHelper.m_cache)
          ZofuHelper.m_cache[regionID] = ZofuHelper.ParseFile(tempPath);
      }));
    }

    private Decimal GetPriceInternal(int typeID, int regionID, PriceStat stat)
    {
      Decimal priceInternal;
      if (!this.GetPricesInternal((IEnumerable<int>) new int[1]
      {
        typeID
      }, regionID, stat).TryGetValue(typeID, out priceInternal))
        throw new PriceProviderException(PriceProviderFailureReason.PriceMissing, "No price for typeID " + typeID.ToString());
      return priceInternal;
    }

    private Dictionary<int, Decimal> GetPricesInternal(
      IEnumerable<int> typeIDs,
      int regionID,
      PriceStat stat)
    {
      Dictionary<int, Decimal> pricesInternal = new Dictionary<int, Decimal>();
      CacheResult cacheResult = this.DownloadRegionFile(regionID);
      lock (ZofuHelper.m_cache)
      {
        Dictionary<int, ZofuHelper.ZofuEntry> dictionary;
        if (!ZofuHelper.m_cache.TryGetValue(regionID, out dictionary))
          throw new PriceProviderException(PriceProviderFailureReason.CacheEmpty, "No prices available for region " + regionID.ToString(), cacheResult.Exception);
        foreach (int typeId in typeIDs)
        {
          ZofuHelper.ZofuEntry zofuEntry;
          if (dictionary.TryGetValue(typeId, out zofuEntry))
          {
            switch (stat)
            {
              case PriceStat.Mean:
                pricesInternal[typeId] = zofuEntry.Avg;
                break;
              case PriceStat.Median:
                pricesInternal[typeId] = zofuEntry.Median;
                break;
              case PriceStat.High:
                pricesInternal[typeId] = zofuEntry.High;
                break;
              case PriceStat.Low:
                pricesInternal[typeId] = zofuEntry.Low;
                break;
              default:
                throw new ApplicationException("Unknown stat " + stat.ToString());
            }
          }
        }
      }
      return pricesInternal;
    }

    public event EventHandler<ProgressEventArgs> UpdateProgress;

    public void LoadCache()
    {
      if (!Directory.Exists(ZofuHelper.m_cachePath))
        return;
      lock (ZofuHelper.m_cache)
      {
        foreach (string file in Directory.GetFiles(ZofuHelper.m_cachePath))
        {
          Match match = ZofuHelper.m_cacheFileRegex.Match(Path.GetFileName(file));
          if (match.Success)
          {
            try
            {
              int regionId = ZofuHelper.GetRegionID(match.Groups[1].Value);
              ZofuHelper.m_cache[regionId] = ZofuHelper.ParseFile(file);
            }
            catch (Exception ex)
            {
            }
          }
        }
      }
    }

    public void SaveCache()
    {
    }

    public Decimal GetPrice(int typeID, PriceStat stat) => this.GetPriceByRegion(typeID, -1, stat);

    public Decimal GetPriceHighSec(int typeID, PriceStat stat) => this.GetPriceByRegion(typeID, -2, stat);

    public Decimal GetPriceByRegion(int typeID, int regionID, PriceStat stat) => this.GetPriceInternal(typeID, regionID, stat);

    public Dictionary<int, Decimal> GetPrices(
      IEnumerable<int> typeIDs,
      PriceStat stat)
    {
      return this.GetPricesByRegion(typeIDs, -1, stat);
    }

    public Dictionary<int, Decimal> GetPricesHighSec(
      IEnumerable<int> typeIDs,
      PriceStat stat)
    {
      return this.GetPricesByRegion(typeIDs, -2, stat);
    }

    public Dictionary<int, Decimal> GetPricesByRegion(
      IEnumerable<int> typeIDs,
      int regionID,
      PriceStat stat)
    {
      return this.GetPricesInternal(typeIDs, regionID, stat);
    }

    private class ZofuEntry
    {
      public Decimal Avg;
      public Decimal Median;
      public long Volume;
      public Decimal Low;
      public Decimal High;
      public DateTime First;
      public DateTime Last;
    }
  }
}
