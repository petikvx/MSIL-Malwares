// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: ةE, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B83DFD6-FCF7-4EFA-B68A-746E3BD488E0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-0ae22d4877231b64b2e9e1252bbe8636ea43fe5692ca899733e715ccfc82e224.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b)
    {
label_1:
      int num1 = -916763396;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -460878689)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -148590773 ^ 810356583;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this.board = b;
    }

    public void FindAllMoves()
    {
      this.Clear();
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.WhitePieces.Values.GetEnumerator();
      try
      {
label_7:
        int num1 = enumerator1.MoveNext() ? 865184003 : (num1 = 1432447311);
        ChessPiece current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1324591778)) % 6U)
          {
            case 0:
              goto label_7;
            case 1:
              num1 = (int) num2 * 1283768611 ^ -555489923;
              continue;
            case 2:
              num1 = 865184003;
              continue;
            case 3:
              current = enumerator1.Current;
              num1 = 901704114;
              continue;
            case 4:
              this.FindMoveFrom(current.Current);
              num1 = (int) num2 * -1868774492 ^ -36861955;
              continue;
            default:
              goto label_13;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_9:
        int num3 = 479859960;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1324591778)) % 3U)
          {
            case 0:
              goto label_9;
            case 2:
              num3 = (int) num4 * -307950637 ^ 45708906;
              continue;
            default:
              goto label_12;
          }
        }
label_12:;
      }
label_13:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator2 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_17:
        int num5 = !enumerator2.MoveNext() ? 1248075266 : (num5 = 1428057459);
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1324591778)) % 5U)
          {
            case 1:
              num5 = (int) num6 * -2036594517 ^ 1832572544;
              continue;
            case 2:
              this.FindMoveFrom(enumerator2.Current.Current);
              num5 = 497090331;
              continue;
            case 3:
              goto label_17;
            case 4:
              num5 = 1428057459;
              continue;
            default:
              goto label_27;
          }
        }
      }
      finally
      {
        enumerator2.Dispose();
label_22:
        int num7 = 1249590981;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 1324591778)) % 3U)
          {
            case 1:
              num7 = (int) num8 * -1945041772 ^ -339861451;
              continue;
            case 2:
              goto label_22;
            default:
              goto label_26;
          }
        }
label_26:;
      }
label_27:
      if (!this.board.ShowAllMoves)
        return;
label_28:
      int num9 = 1378993580;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ 1324591778)) % 4U)
        {
          case 0:
            goto label_24;
          case 1:
            num9 = (int) num10 * 1251529208 ^ 1444187554;
            continue;
          case 2:
            this.HighLightMoveStyle();
            num9 = (int) num10 * 1787701332 ^ 1545161487;
            continue;
          case 3:
            goto label_28;
          default:
            goto label_20;
        }
      }
label_24:
      return;
label_20:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = -378623358;
      Pieces kind;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1277482123)) % 16U)
        {
          case 0:
            num1 = (int) num2 * -18951197 ^ 858249491;
            continue;
          case 1:
label_6:
            this.handleKing(x);
            num1 = -960462173;
            continue;
          case 2:
            num1 = (int) num2 * 1266706965 ^ 120914697;
            continue;
          case 3:
            switch (kind)
            {
              case Pieces.Pawn:
                goto label_5;
              case Pieces.Knight:
                goto label_12;
              case Pieces.Bishop:
                goto label_10;
              case Pieces.Rook:
                goto label_4;
              case Pieces.King:
                goto label_6;
              case Pieces.Queen:
                goto label_7;
              default:
                num1 = (int) num2 * -271461431 ^ 1984363514;
                continue;
            }
          case 4:
            num1 = (int) num2 * 214519690 ^ 1933628491;
            continue;
          case 5:
label_10:
            this.handleBishop(x);
            num1 = -1543122971;
            continue;
          case 6:
            goto label_3;
          case 7:
            kind = x.Piece.Kind;
            num1 = (int) num2 * -1032492381 ^ -672007773;
            continue;
          case 8:
label_4:
            this.handleRook(x);
            num1 = -2049261655;
            continue;
          case 9:
            num1 = (int) num2 * 1724730004 ^ 1165859479;
            continue;
          case 10:
            goto label_1;
          case 11:
label_5:
            this.handlePawn(x);
            num1 = -18941861;
            continue;
          case 12:
            num1 = (int) num2 * 1573431091 ^ -997414537;
            continue;
          case 13:
label_12:
            this.handleKnight(x);
            num1 = -824967945;
            continue;
          case 14:
            num1 = (int) num2 * -253425868 ^ 282830331;
            continue;
          case 15:
label_7:
            this.handleQueen(x);
            num1 = -752879044;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
      int num1 = 0;
label_1:
      int num2 = 1476187056;
      while (true)
      {
        uint num3;
        int num4;
        bool flag1;
        bool flag2;
        int num5;
        bool flag3;
        int num6;
        bool flag4;
        bool flag5;
        int num7;
        int num8;
        bool flag6;
        bool flag7;
        bool flag8;
        int b;
        bool flag9;
        Square square;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num3 = (uint) (num2 ^ 1924311731)) % 59U)
        {
          case 0:
            num9 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_78;
          case 1:
            this.addCapture(num4, b, x, this.board[num4, x.Rank].Piece);
            num2 = (int) num3 * 661713877 ^ 1431133524;
            continue;
          case 2:
            num5 = x.File - 1;
            num4 = x.File + 1;
            num2 = (int) num3 * -480329600 ^ 1392657954;
            continue;
          case 3:
            int num19 = flag5 ? -908715707 : (num19 = -1276951845);
            num2 = num19 ^ (int) num3 * 458339886;
            continue;
          case 4:
            num1 = x.File + 1;
            num2 = 1858049518;
            continue;
          case 5:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num2 = (int) num3 * -893070942 ^ 191165372;
            continue;
          case 6:
            int num20 = num5 < 0 ? -1513411345 : (num20 = -1729700564);
            num2 = num20 ^ (int) num3 * 466719973;
            continue;
          case 7:
            flag5 = flag8 | flag9;
            num2 = (int) num3 * -1305742746 ^ -674817671;
            continue;
          case 8:
            goto label_3;
          case 9:
            num2 = (int) num3 * -1025370179 ^ 942865063;
            continue;
          case 10:
            square = this.board[num1, num6];
            num2 = (int) num3 * 1158256876 ^ -45950845;
            continue;
          case 11:
            int num21 = flag4 ? -163032541 : (num21 = -1275446071);
            num2 = num21 ^ (int) num3 * -435260126;
            continue;
          case 12:
            num2 = (int) num3 * -1833716022 ^ 1485394781;
            continue;
          case 13:
            num2 = 1826117841;
            continue;
          case 14:
            num10 = 2;
            goto label_49;
          case 15:
            if (num6 >= 0)
            {
              num2 = (int) num3 * 3823911 ^ -563980058;
              continue;
            }
            goto label_89;
          case 16:
            int num22;
            num2 = num22 = num4 < 8 ? 2043724681 : (num22 = 1502235818);
            continue;
          case 17:
            this.addMove(num1, num6, x);
            num2 = (int) num3 * -1537201805 ^ -1848828469;
            continue;
          case 18:
            int num23 = !flag2 ? -1931359242 : (num23 = -45249154);
            num2 = num23 ^ (int) num3 * 1485043081;
            continue;
          case 19:
            int num24 = !flag1 ? -714094500 : (num24 = -1224459876);
            num2 = num24 ^ (int) num3 * -149545322;
            continue;
          case 20:
            num6 = x.Rank + num7;
            if (num1 >= 0)
            {
              num2 = (int) num3 * -1101058227 ^ 1123591014;
              continue;
            }
            goto label_59;
          case 21:
            num11 = num6 < 8 ? 1 : 0;
            goto label_90;
          case 22:
            num6 = x.Rank + 2 * num7;
            num2 = (int) num3 * -987585022 ^ 1689485447;
            continue;
          case 23:
            num2 = 1793578566;
            continue;
          case 24:
            flag4 = x.Rank == num8;
            num2 = 1384092324;
            continue;
          case 25:
            if (x.Piece.Color != PieceColor.White)
            {
              num2 = (int) num3 * 962505121 ^ 431021608;
              continue;
            }
            num13 = 1;
            goto label_24;
          case 26:
            num12 = num6 < 8 ? 1 : 0;
            goto label_60;
          case 27:
            this.addMove(num1, num6, x);
            num2 = (int) num3 * -2003474025 ^ 449744218;
            continue;
          case 28:
            num1 = x.File - 1;
            num2 = 502550056;
            continue;
          case 29:
            int num25 = this.board.lastPassantPawn == this.board[num4, x.Rank].Piece ? -2077447418 : (num25 = -1029246906);
            num2 = num25 ^ (int) num3 * 1525292236;
            continue;
          case 30:
            flag7 = this.board[num4, x.Rank].Piece != null;
            num2 = (int) num3 * 2089854711 ^ 2110218107;
            continue;
          case 31:
            num16 = this.board[num4, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            break;
          case 32:
            int num26 = flag3 ? 32055349 : (num26 = 174040970);
            num2 = num26 ^ (int) num3 * 314949218;
            continue;
          case 33:
            num2 = 1820659387;
            continue;
          case 34:
            num2 = 991914225;
            continue;
          case 35:
            int num27 = !square.IsEmpty ? -1832756810 : (num27 = -530307100);
            num2 = num27 ^ (int) num3 * 1452168359;
            continue;
          case 36:
            square = this.board[num1, num6];
            int num28 = !square.IsEmpty ? 296260364 : (num28 = 1084913109);
            num2 = num28 ^ (int) num3 * -1515568010;
            continue;
          case 37:
            if (this.board[num5, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num2 = (int) num3 * -1618182313 ^ 1847829386;
              continue;
            }
            num17 = 0;
            goto label_86;
          case 38:
            num15 = num6 < 8 ? 1 : 0;
            goto label_28;
          case 39:
            goto label_1;
          case 40:
            num6 = x.Rank + num7;
            if (num1 < 8)
            {
              num2 = (int) num3 * -1418364573 ^ 519341711;
              continue;
            }
            goto label_89;
          case 41:
            if (x.Rank != 4)
            {
              num18 = 0;
              goto label_35;
            }
            else
            {
              num2 = 997071433;
              continue;
            }
          case 42:
            num13 = 6;
            goto label_24;
          case 43:
            num18 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_35;
          case 44:
            square = this.board[num1, num6];
            int num29 = square.IsEmpty ? 1544483781 : (num29 = 920029145);
            num2 = num29 ^ (int) num3 * -2026899708;
            continue;
          case 45:
            num14 = -1;
            goto label_69;
          case 46:
            num17 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_86;
          case 47:
            num2 = (int) num3 * 1295651734 ^ 472787778;
            continue;
          case 48:
            if (num6 >= 0)
            {
              num2 = (int) num3 * 1410343837 ^ 2009832968;
              continue;
            }
            goto label_59;
          case 49:
            num6 = 0;
            num2 = (int) num3 * 675954597 ^ -931737999;
            continue;
          case 50:
            this.addMove(num1, num6, x);
            num2 = (int) num3 * -1417556059 ^ -13457481;
            continue;
          case 51:
            num2 = (int) num3 * -1838908156 ^ 1694056923;
            continue;
          case 52:
            int num30 = !flag6 ? 1375567609 : (num30 = 2139698185);
            num2 = num30 ^ (int) num3 * 837026349;
            continue;
          case 53:
            flag3 = this.board[num5, x.Rank].Piece != null;
            num2 = (int) num3 * 853178392 ^ 2473131;
            continue;
          case 54:
            num2 = (int) num3 * -1777767779 ^ -1171321816;
            continue;
          case 55:
            int num31 = this.board.lastPassantPawn == this.board[num5, x.Rank].Piece ? -526573688 : (num31 = -1012868766);
            num2 = num31 ^ (int) num3 * -2057632204;
            continue;
          case 56:
            if (this.board[num4, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num16 = 0;
              break;
            }
            num2 = (int) num3 * 1098644599 ^ 1886408777;
            continue;
          case 57:
            int num32 = !flag7 ? -117787304 : (num32 = -1915545229);
            num2 = num32 ^ (int) num3 * 221237351;
            continue;
          case 58:
            this.addMove(num1, num6, x);
            num2 = (int) num3 * 885194922 ^ 1947364958;
            continue;
          default:
            goto label_93;
        }
        flag1 = num16 != 0;
        num2 = 1272578338;
        continue;
label_24:
        num8 = num13;
        if (x.Piece.Color != PieceColor.White)
        {
          num2 = 1219967004;
          continue;
        }
        num14 = 1;
        goto label_69;
label_28:
        flag6 = num15 != 0;
        num2 = 712002728;
        continue;
label_35:
        flag8 = num18 != 0;
        if (x.Rank == 3)
        {
          num2 = 675826901;
          continue;
        }
        num9 = 0;
        goto label_78;
label_49:
        b = num10;
        num2 = 1634448844;
        continue;
label_59:
        num12 = 0;
label_60:
        flag2 = num12 != 0;
        num2 = 506194620;
        continue;
label_69:
        num7 = num14;
        num1 = x.File;
        num6 = x.Rank + num7;
        if (num6 < 0)
        {
          num15 = 0;
          goto label_28;
        }
        else
        {
          num2 = 1386697607;
          continue;
        }
label_78:
        flag9 = num9 != 0;
        if (flag8)
        {
          num10 = 5;
          goto label_49;
        }
        else
        {
          num2 = 1595537669;
          continue;
        }
label_86:
        int num33;
        num2 = num33 = num17 != 0 ? 1365033589 : (num33 = 1021523290);
        continue;
label_89:
        num11 = 0;
label_90:
        int num34;
        num2 = num34 = num11 == 0 ? 1826117841 : (num34 = 668882449);
      }
label_3:
      return;
label_93:;
    }

    private void handleQueen(Square x)
    {
      this.handleRook(x);
label_1:
      int num1 = -785456473;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -793803463)) % 5U)
        {
          case 0:
            this.handleBishop(x);
            num1 = (int) num2 * -1307923248 ^ 1754920134;
            continue;
          case 1:
            num1 = (int) num2 * -1347150108 ^ -397976191;
            continue;
          case 2:
            num1 = (int) num2 * 1799892310 ^ 995412334;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = -2064862147;
      bool canCastleKingSide1;
      bool canCastleKingSide2;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1435817214)) % 26U)
        {
          case 0:
            goto label_1;
          case 1:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1174535643 ^ -592371677;
            continue;
          case 2:
            num1 = -1877887519;
            continue;
          case 3:
            num1 = -1984889092;
            continue;
          case 4:
            num1 = (int) num2 * 878482943 ^ -742042049;
            continue;
          case 5:
            num1 = (int) num2 * -1987877297 ^ -1512301383;
            continue;
          case 6:
            num1 = (int) num2 * 398138349 ^ -544960699;
            continue;
          case 7:
            this.handleBigCastling(x);
            num1 = (int) num2 * 956602973 ^ 560890112;
            continue;
          case 8:
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            flag1 = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 652066400 ^ -274315827;
            continue;
          case 9:
            int num3 = canCastleKingSide1 ? 2140030228 : (num3 = 1501526331);
            num1 = num3 ^ (int) num2 * -258709119;
            continue;
          case 10:
            num1 = (int) num2 * 994936736 ^ -937466002;
            continue;
          case 11:
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * 684345478 ^ 141754302;
            continue;
          case 12:
            this.addMove(x.File + 1, x.Rank - 1, x);
            this.addMove(x.File - 1, x.Rank + 1, x);
            this.addMove(x.File - 1, x.Rank - 1, x);
            this.addMove(x.File + 1, x.Rank, x);
            num1 = (int) num2 * -1717625084 ^ 129184299;
            continue;
          case 13:
            int num4 = flag2 ? 488422874 : (num4 = 732398613);
            num1 = num4 ^ (int) num2 * -1753088164;
            continue;
          case 14:
            int num5;
            num1 = num5 = !this.board.BlackCanCastleQueenSide ? -169481234 : (num5 = -1679751755);
            continue;
          case 15:
            int num6 = !canCastleKingSide2 ? 587438885 : (num6 = 297137856);
            num1 = num6 ^ (int) num2 * 1802299497;
            continue;
          case 16:
            flag2 = x.Piece.Color == PieceColor.Black;
            num1 = -183717687;
            continue;
          case 17:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1014566998 ^ -1698078508;
            continue;
          case 18:
            canCastleKingSide2 = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * 1837077949 ^ -1881597965;
            continue;
          case 19:
            goto label_3;
          case 20:
            num1 = (int) num2 * 45096290 ^ 1960547680;
            continue;
          case 21:
            this.addMove(x.File + 1, x.Rank + 1, x);
            num1 = (int) num2 * 915116602 ^ 9408702;
            continue;
          case 22:
            int num7;
            num1 = num7 = !this.board.WhiteCanCastleQueenSide ? -948004127 : (num7 = -1234201118);
            continue;
          case 23:
            canCastleKingSide1 = this.board.BlackCanCastleKingSide;
            num1 = (int) num2 * -241091632 ^ -1221875039;
            continue;
          case 24:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1720686795 ^ -1407807424;
            continue;
          case 25:
            int num8 = !flag1 ? -280302619 : (num8 = -1697296909);
            num1 = num8 ^ (int) num2 * 344213847;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    private void handleBigCastling(Square x)
    {
label_1:
      int num1 = -856704478;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        Square square3;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1105174855)) % 8U)
        {
          case 0:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * 582994039 ^ 785184907;
            continue;
          case 1:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_10;
          case 2:
            goto label_3;
          case 3:
            square1 = this.board[x.File - 1, x.Rank];
            square2 = this.board[x.File - 2, x.Rank];
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -881646175 ^ 1312231726;
            continue;
          case 4:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * 1610139087 ^ -140075134;
              continue;
            }
            break;
          case 5:
            goto label_1;
          case 6:
            int num4 = !flag ? 1759347179 : (num4 = 496205241);
            num1 = num4 ^ (int) num2 * -500288776;
            continue;
          case 7:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * -865234853 ^ -540975907;
              continue;
            }
            break;
          default:
            goto label_14;
        }
        num3 = 0;
label_10:
        flag = num3 != 0;
        num1 = -613253385;
      }
label_3:
      return;
label_14:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = -548408621;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1966227462)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num3 = square1.IsEmpty ? 1 : 0;
            break;
          case 2:
            square1 = this.board[x.File + 2, x.Rank];
            if (!square2.IsEmpty)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 819418034 ^ -1875370167;
            continue;
          case 3:
            square2 = this.board[x.File + 1, x.Rank];
            num1 = (int) num2 * 1847778051 ^ -29172599;
            continue;
          case 4:
            goto label_3;
          case 5:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * 1359837036 ^ 899530560;
            continue;
          default:
            goto label_11;
        }
        int num4;
        num1 = num4 = num3 != 0 ? -2097155353 : (num4 = -619201412);
      }
label_3:
      return;
label_11:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = 260321665;
      bool flag1;
      int num2;
      int a1;
      bool flag2;
      int num3;
      bool flag3;
      int num4;
      int b1;
      bool flag4;
      int b2;
      int a2;
      bool flag5;
      int num5;
      bool flag6;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 1944721810)) % 36U)
        {
          case 0:
            ++num2;
            num1 = (int) num6 * -576819030 ^ -50798206;
            continue;
          case 1:
            b1 = x.Rank + num4;
            num1 = (int) num6 * 836456304 ^ -800598968;
            continue;
          case 2:
            flag4 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * -648984018 ^ 1478768202;
            continue;
          case 3:
            num1 = 197406649;
            continue;
          case 4:
            int num7;
            num1 = num7 = num2 < 8 ? 490479052 : (num7 = 1546777468);
            continue;
          case 5:
            ++num4;
            num1 = 914892659;
            continue;
          case 6:
            num3 = 1;
            num1 = 1325844570;
            continue;
          case 7:
            int num8 = flag1 ? -328012969 : (num8 = -339105782);
            num1 = num8 ^ (int) num6 * -1718872732;
            continue;
          case 8:
            a1 = x.File - num3;
            num1 = 1084445611;
            continue;
          case 9:
            goto label_1;
          case 10:
            flag5 = num5 < 8;
            num1 = 853058824;
            continue;
          case 11:
            num4 = 1;
            num1 = (int) num6 * -172971559 ^ -534886484;
            continue;
          case 12:
            flag3 = num3 < 8;
            num1 = 788834242;
            continue;
          case 13:
            flag6 = num4 < 8;
            num1 = 1146767890;
            continue;
          case 14:
            num1 = (int) num6 * 1477468997 ^ -1832669137;
            continue;
          case 15:
            int num9 = flag2 ? 1926594513 : (num9 = 127399651);
            num1 = num9 ^ (int) num6 * -1428720753;
            continue;
          case 16:
            ++num3;
            num1 = 1325844570;
            continue;
          case 17:
            num1 = (int) num6 * 919579530 ^ -1827306202;
            continue;
          case 18:
            num5 = 1;
            num1 = 1801592552;
            continue;
          case 19:
            num1 = (int) num6 * -2123642730 ^ 1620525683;
            continue;
          case 20:
            num1 = 1913460254;
            continue;
          case 21:
            num1 = 1076421707;
            continue;
          case 22:
            flag1 = this.addMove(x.File, b2, x);
            num1 = (int) num6 * 455719144 ^ 335560761;
            continue;
          case 23:
            int num10 = !this.addMove(a2, x.Rank, x) ? 2036188074 : (num10 = 670668249);
            num1 = num10 ^ (int) num6 * -155395713;
            continue;
          case 24:
            int num11 = flag3 ? 503251318 : (num11 = 1636886761);
            num1 = num11 ^ (int) num6 * 1192639970;
            continue;
          case 25:
            num1 = (int) num6 * -709443454 ^ -1657656391;
            continue;
          case 26:
            b2 = x.Rank - num2;
            num1 = 1705094548;
            continue;
          case 27:
            goto label_3;
          case 28:
            int num12 = !flag6 ? -1498729431 : (num12 = -553184197);
            num1 = num12 ^ (int) num6 * -309834556;
            continue;
          case 29:
            ++num5;
            num1 = 1801592552;
            continue;
          case 30:
            num1 = (int) num6 * -1518154353 ^ 1583740186;
            continue;
          case 31:
            num2 = 1;
            num1 = 844985210;
            continue;
          case 32:
            int num13 = flag4 ? 1227401417 : (num13 = 1585188347);
            num1 = num13 ^ (int) num6 * -62415789;
            continue;
          case 33:
            flag2 = this.addMove(a1, x.Rank, x);
            num1 = (int) num6 * -1811522921 ^ -1873365938;
            continue;
          case 34:
            int num14 = flag5 ? 1446656007 : (num14 = 1749659786);
            num1 = num14 ^ (int) num6 * -495313265;
            continue;
          case 35:
            a2 = x.File + num5;
            num1 = (int) num6 * 2050129620 ^ 30655025;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = -477780531;
      int num2;
      int num3;
      bool flag1;
      int num4;
      int num5;
      bool flag2;
      bool flag3;
      int a1;
      int b1;
      bool flag4;
      int a2;
      int b2;
      int b3;
      int a3;
      bool flag5;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -523433690)) % 36U)
        {
          case 0:
            ++num2;
            num1 = (int) num6 * 127887778 ^ -1107602074;
            continue;
          case 1:
            int num7 = flag3 ? 1744524036 : (num7 = 1531403868);
            num1 = num7 ^ (int) num6 * -422450927;
            continue;
          case 2:
            b3 = x.Rank - num4;
            num1 = (int) num6 * -656025381 ^ 1007556430;
            continue;
          case 3:
            num5 = 1;
            num1 = -53008447;
            continue;
          case 4:
            a1 = x.File - num5;
            b1 = x.Rank + num5;
            num1 = -1588195705;
            continue;
          case 5:
            num1 = -1201253141;
            continue;
          case 6:
            flag5 = this.addMove(a3, b3, x);
            num1 = (int) num6 * 464293124 ^ 439361123;
            continue;
          case 7:
            int num8;
            num1 = num8 = num3 >= 8 ? -1414264801 : (num8 = -1364388840);
            continue;
          case 8:
            goto label_3;
          case 9:
            int num9 = !flag5 ? 635285092 : (num9 = 47140487);
            num1 = num9 ^ (int) num6 * 813606105;
            continue;
          case 10:
            flag1 = this.addMove(x.File + num3, x.Rank - num3, x);
            num1 = -1878716967;
            continue;
          case 11:
            a3 = x.File - num4;
            num1 = -1185332524;
            continue;
          case 12:
            num3 = 1;
            num1 = -944910862;
            continue;
          case 13:
            num1 = -1597462570;
            continue;
          case 14:
            flag3 = num4 < 8;
            num1 = -1041300557;
            continue;
          case 15:
            num1 = -38105473;
            continue;
          case 16:
            num1 = (int) num6 * 444641533 ^ -1200719257;
            continue;
          case 17:
            ++num3;
            num1 = (int) num6 * -673622564 ^ 2131774705;
            continue;
          case 18:
            num1 = (int) num6 * -102616651 ^ 754321256;
            continue;
          case 19:
            int num10 = !flag1 ? 761351941 : (num10 = 642243056);
            num1 = num10 ^ (int) num6 * -1403500302;
            continue;
          case 20:
            flag4 = num2 < 8;
            num1 = -1926847300;
            continue;
          case 21:
            int num11;
            num1 = num11 = num5 < 8 ? -1440857546 : (num11 = -1936376554);
            continue;
          case 22:
            ++num5;
            num1 = -831628785;
            continue;
          case 23:
            a2 = x.File + num2;
            b2 = x.Rank + num2;
            num1 = -818625964;
            continue;
          case 24:
            num1 = (int) num6 * 1919403920 ^ 1082483357;
            continue;
          case 25:
            flag2 = this.addMove(a1, b1, x);
            num1 = (int) num6 * -1166221343 ^ -1353951620;
            continue;
          case 26:
            int num12 = flag4 ? -1233000483 : (num12 = -490802974);
            num1 = num12 ^ (int) num6 * 304584858;
            continue;
          case 27:
            int num13 = flag2 ? -1830661347 : (num13 = -752758315);
            num1 = num13 ^ (int) num6 * 1942385287;
            continue;
          case 28:
            goto label_1;
          case 29:
            num4 = 1;
            num1 = -1220949476;
            continue;
          case 30:
            num1 = (int) num6 * -1506694556 ^ -784922578;
            continue;
          case 31:
            num1 = (int) num6 * 989789586 ^ 135614641;
            continue;
          case 32:
            num1 = (int) num6 * -106341296 ^ 1090129145;
            continue;
          case 33:
            ++num4;
            num1 = (int) num6 * 1914855458 ^ -280325170;
            continue;
          case 34:
            int num14 = !this.addMove(a2, b2, x) ? 1816689565 : (num14 = 949174310);
            num1 = num14 ^ (int) num6 * 1576052221;
            continue;
          case 35:
            num2 = 1;
            num1 = (int) num6 * -1585249115 ^ 895379953;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = 3509787;
      while (true)
      {
        uint num2;
        int[] numArray1;
        int index;
        int Rank;
        int File;
        bool flag1;
        int[] numArray2;
        bool flag2;
        Square sq;
        bool isEmpty;
        ChessPiece piece;
        int num3;
        switch ((num2 = (uint) (num1 ^ 120344010)) % 24U)
        {
          case 0:
            goto label_3;
          case 1:
            piece = x.Piece;
            num1 = (int) num2 * -99535096 ^ -1851566454;
            continue;
          case 2:
            num1 = (int) num2 * 929140963 ^ -1313009542;
            continue;
          case 3:
            File = x.File + numArray2[index];
            num1 = (int) num2 * -1136352047 ^ 1596972130;
            continue;
          case 4:
            sq = this.board[File, Rank];
            isEmpty = sq.IsEmpty;
            num1 = 1087393196;
            continue;
          case 5:
            int num4 = !flag2 ? -1825978482 : (num4 = -1969103843);
            num1 = num4 ^ (int) num2 * -1686489324;
            continue;
          case 6:
            int num5 = flag1 ? -332782671 : (num5 = -781828480);
            num1 = num5 ^ (int) num2 * 1373481685;
            continue;
          case 7:
            if (Rank >= 0)
            {
              num1 = (int) num2 * -291045228 ^ -377970540;
              continue;
            }
            break;
          case 8:
            num1 = (int) num2 * -1440333816 ^ -1304309579;
            continue;
          case 9:
            goto label_1;
          case 10:
            if (File <= 7)
            {
              num1 = (int) num2 * 1560046051 ^ 258770760;
              continue;
            }
            break;
          case 11:
            Rank = x.Rank + numArray1[index];
            if (File >= 0)
            {
              num1 = (int) num2 * -1549098864 ^ 38913845;
              continue;
            }
            break;
          case 12:
            num3 = Rank > 7 ? 1 : 0;
            goto label_9;
          case 13:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1956191424 ^ -1285075160;
            continue;
          case 14:
            int num6 = isEmpty ? 1488307435 : (num6 = 993762314);
            num1 = num6 ^ (int) num2 * -615129606;
            continue;
          case 15:
            flag2 = index < 8;
            num1 = 887394551;
            continue;
          case 16:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D‫⁬‍‫‭​‎⁯⁯⁪⁯‪‏⁮‏⁬⁯‬‬‭‎‌⁯‎⁭​⁬⁫‏⁯⁬⁯‍⁪⁭‍​‮‫‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray2 = numArray3;
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D‫⁬‍‫‭​‎⁯⁯⁪⁯‪‏⁮‏⁬⁯‬‬‭‎‌⁯‎⁭​⁬⁫‏⁯⁬⁯‍⁪⁭‍​‮‫‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray1 = numArray4;
            index = 0;
            num1 = (int) num2 * 393975555 ^ -702540182;
            continue;
          case 17:
            ++index;
            num1 = 29339509;
            continue;
          case 18:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * -520879988 ^ 590047717;
            continue;
          case 19:
            num1 = 1987010281;
            continue;
          case 20:
            int num7;
            num1 = num7 = sq.Piece.Color == x.Piece.Color ? 1719377756 : (num7 = 80531568);
            continue;
          case 21:
            num1 = (int) num2 * -1645335060 ^ -1201473233;
            continue;
          case 22:
            num1 = 819422739;
            continue;
          case 23:
            num1 = (int) num2 * 102584867 ^ 73785081;
            continue;
          default:
            goto label_31;
        }
        num3 = 1;
label_9:
        flag1 = num3 != 0;
        num1 = 1545962852;
      }
label_3:
      return;
label_31:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
      ChessPiece piece = x.Piece;
label_1:
      int num1 = 176234918;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 224907155)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * -1527180436 ^ 835981052;
            continue;
          case 2:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * -271050901 ^ -748484332;
            continue;
          case 3:
            sq = this.board[a, b];
            num1 = (int) num2 * -1868753286 ^ -1645452675;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = 2129972067;
      bool flag1;
      while (true)
      {
        uint num2;
        bool flag2;
        Square sq;
        UserAction kind;
        ChessPiece piece;
        bool flag3;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1732309893)) % 30U)
        {
          case 0:
            num1 = (int) num2 * 633771704 ^ 381777929;
            continue;
          case 1:
            flag1 = true;
            num1 = 1079854767;
            continue;
          case 2:
            int num5;
            num1 = num5 = sq.Piece.Color != x.Piece.Color ? 1439276138 : (num5 = 372475682);
            continue;
          case 3:
            sq = this.board[a, b];
            int num6 = !sq.IsEmpty ? -1226837816 : (num6 = -29139420);
            num1 = num6 ^ (int) num2 * -2031716769;
            continue;
          case 4:
            if (x.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -2016957653 ^ 548329532;
              continue;
            }
            num3 = 0;
            goto label_33;
          case 5:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = 622227309;
            continue;
          case 7:
            int num7 = flag3 ? 740637400 : (num7 = 622758087);
            num1 = num7 ^ (int) num2 * 1009229661;
            continue;
          case 8:
            flag2 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * 1527421458 ^ 403491216;
            continue;
          case 9:
            int num8 = flag2 ? -607387732 : (num8 = -572149187);
            num1 = num8 ^ (int) num2 * -32618345;
            continue;
          case 10:
            num1 = (int) num2 * 206887993 ^ 198067003;
            continue;
          case 11:
            num1 = 758664642;
            continue;
          case 12:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 1694232505 ^ -865685237;
            continue;
          case 13:
            flag1 = false;
            num1 = 1140615601;
            continue;
          case 14:
            this.IsOnCheck = true;
            num1 = (int) num2 * -1226358319 ^ -1217109078;
            continue;
          case 15:
            num1 = (int) num2 * 2003757929 ^ -950445972;
            continue;
          case 16:
            num1 = (int) num2 * -2026197325 ^ 809674116;
            continue;
          case 17:
            piece = x.Piece;
            num1 = 1548110754;
            continue;
          case 18:
            if (b >= 0)
            {
              num1 = (int) num2 * -95334957 ^ 505155839;
              continue;
            }
            break;
          case 19:
            num3 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            goto label_33;
          case 20:
            flag1 = true;
            num1 = (int) num2 * -1255738421 ^ -1521901348;
            continue;
          case 21:
            this.KingColorOnCheck = sq.Piece.Color;
            num1 = (int) num2 * 1356026995 ^ -2060245280;
            continue;
          case 22:
            flag1 = true;
            num1 = (int) num2 * 1161028794 ^ -457212009;
            continue;
          case 23:
            kind = UserAction.Capture;
            num1 = (int) num2 * 1932475832 ^ 293715435;
            continue;
          case 24:
            num4 = b > 7 ? 1 : 0;
            goto label_5;
          case 25:
            if (a <= 7)
            {
              num1 = (int) num2 * 956941632 ^ 1271955439;
              continue;
            }
            break;
          case 26:
            if (a >= 0)
            {
              num1 = (int) num2 * -80789088 ^ -665605452;
              continue;
            }
            break;
          case 27:
            num1 = (int) num2 * -2107818993 ^ 1565408729;
            continue;
          case 28:
            num1 = (int) num2 * 1989876065 ^ 1741466410;
            continue;
          case 29:
            goto label_1;
          default:
            goto label_39;
        }
        num4 = 1;
label_5:
        int num9;
        num1 = num9 = num4 != 0 ? 319985267 : (num9 = 848822634);
        continue;
label_33:
        flag3 = num3 != 0;
        num1 = 757936920;
      }
label_39:
      return flag1;
    }

    static void \u206D‫⁬‍‫‭​‎⁯⁯⁪⁯‪‏⁮‏⁬⁯‬‬‭‎‌⁯‎⁭​⁬⁫‏⁯⁬⁯‍⁪⁭‍​‮‫‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
