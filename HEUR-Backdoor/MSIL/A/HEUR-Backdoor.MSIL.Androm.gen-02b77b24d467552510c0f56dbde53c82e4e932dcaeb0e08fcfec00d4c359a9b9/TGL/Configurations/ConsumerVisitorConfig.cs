// Decompiled with JetBrains decompiler
// Type: TGL.Configurations.ConsumerVisitorConfig
// Assembly: InvalidOleVariantTypeExcept, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9E82E8E9-C8CD-41F7-BA61-2A9379AE4148
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-02b77b24d467552510c0f56dbde53c82e4e932dcaeb0e08fcfec00d4c359a9b9.exe

using System.Runtime.CompilerServices;
using TGL.Bridges;
using TGL.Licensing;
using TGL.Services;

namespace TGL.Configurations
{
  public class ConsumerVisitorConfig : Attr
  {
    private long[] _Queue;
    private int container;
    private int[] _Param;
    private byte[] consumer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ConsumerVisitorConfig()
    {
      int num1 = 1;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 5:
            this.reset();
            num2 = 8;
            break;
          case 1:
            UtilsContextLicense.ListWorker();
            num2 = 2;
            break;
          case 2:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            num2 = 4;
            break;
          case 3:
          case 7:
            this.consumer = new byte[7];
            goto case 6;
          case 4:
            this._Queue = new long[2];
            num2 = 7;
            break;
          case 6:
            this._Param = new int[42];
            if (ConsumerVisitorConfig.CustomizeInfo())
            {
              num1 = 0;
              continue;
            }
            goto case 0;
          case 8:
            goto label_10;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 4;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void reset()
    {
      int num1 = 8;
      if (ConsumerVisitorConfig.CustomizeInfo())
        goto label_4;
      else
        goto label_12;
label_3:
      int num2;
      num1 = num2;
label_4:
      int index;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_6;
          case 1:
            goto label_8;
          case 2:
          case 4:
            index = 0;
            if (ConsumerVisitorConfig.CustomizeInfo())
            {
              num1 = 6;
              continue;
            }
            goto label_12;
          case 3:
            goto label_9;
          case 5:
          case 6:
          case 7:
            goto label_12;
          case 8:
            goto label_10;
          case 9:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_1:
      return;
label_5:
      num2 = 3;
      goto label_3;
label_6:
      bool flag;
      if (flag)
      {
        this.consumer[index] = (byte) (7 * index);
        goto label_9;
      }
      else
      {
        num2 = 9;
        goto label_3;
      }
label_8:
      this._Queue[0] = this._Queue[1] = 0L;
      num2 = 4;
      goto label_3;
label_9:
      ++index;
      num2 = 7;
      goto label_3;
label_10:
      this.container = 0;
      num2 = 1;
      goto label_3;
label_12:
      flag = index < 7;
      num2 = 0;
      goto label_3;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public long FindComparator() => 2L * this._Queue[0] + this._Queue[1] + 4432676798593L;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool NewComparator(int task_end) => this.ViewComparator(this._Queue[this.container & 1] | 1L << (int) this.consumer[task_end]);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool OrderComparator()
    {
      int num1 = 6;
      if (ConsumerVisitorConfig.CustomizeInfo())
        goto label_7;
label_1:
      bool flag1;
      int num2;
      int task_end;
      if (flag1)
      {
        num2 = 9;
      }
      else
      {
        ++task_end;
        goto label_10;
      }
label_6:
      num1 = num2;
label_7:
      bool flag2;
      bool flag3;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            goto label_10;
          case 4:
          case 7:
            flag2 = false;
            if (ConsumerVisitorConfig.CustomizeInfo())
            {
              num1 = 10;
              continue;
            }
            goto label_10;
          case 5:
            if (flag3)
            {
              flag1 = this.NewComparator(task_end);
              int num3 = 0;
              num1 = ConsumerVisitorConfig.FindInfo() ? num3 : num3;
              continue;
            }
            goto label_13;
          case 6:
            task_end = 0;
            if (!ConsumerVisitorConfig.FindInfo())
            {
              num1 = 1;
              continue;
            }
            goto label_10;
          case 8:
          case 10:
            goto label_14;
          case 9:
            flag2 = true;
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 5;
          default:
            goto label_8;
        }
      }
label_8:
      num2 = 3;
      goto label_6;
label_13:
      num2 = 4;
      goto label_6;
label_14:
      return flag2;
label_10:
      flag3 = task_end < 7;
      num1 = 5;
      goto label_7;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool ViewComparator(long lengthparam) => (lengthparam & 283691315109952L) == 0L;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool AddComparator(long flags_def) => this.ViewComparator(flags_def) && this.CompareComparator(flags_def);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool CompareComparator(long maxsetup)
    {
      int num1 = 10;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        long num3;
        bool flag2;
        bool flag3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
            case 8:
            case 11:
            case 14:
              goto label_18;
            case 1:
              goto label_17;
            case 2:
              if ((num3 & num3 >> 16) != 0L)
              {
                num2 = 13;
                continue;
              }
              goto label_6;
            case 3:
              goto label_13;
            case 5:
            case 6:
              if (!flag2)
              {
                num3 = maxsetup & maxsetup >> 8;
                num2 = 2;
                continue;
              }
              goto case 7;
            case 7:
              flag1 = true;
              num2 = 8;
              continue;
            case 9:
              goto label_2;
            case 10:
              goto label_16;
            case 12:
              if (flag3)
              {
                if (ConsumerVisitorConfig.CustomizeInfo())
                {
                  num2 = 1;
                  continue;
                }
                goto label_18;
              }
              else
                goto label_12;
            case 13:
              goto label_1;
            default:
              num2 = 7;
              continue;
          }
        }
label_1:
        flag1 = true;
        num1 = 4;
        continue;
label_2:
        flag2 = (num3 & num3 >> 14) != 0L;
        num1 = 5;
        continue;
label_6:
        num3 = maxsetup & maxsetup >> 1;
        flag1 = (num3 & num3 >> 2) != 0L;
        num1 = 14;
        continue;
label_12:
        num3 = maxsetup & maxsetup >> 7;
        num1 = 9;
        continue;
label_13:
        flag3 = (num3 & num3 >> 12) != 0L;
        num1 = 12;
        continue;
label_16:
        num3 = maxsetup & maxsetup >> 6;
        num1 = 3;
        continue;
label_17:
        flag1 = true;
        num1 = 0;
      }
label_18:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResolveComparator() => this._Queue[this.container & 1] ^= 1L << (int) --this.consumer[this._Param[--this.container]];

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AssetComparator(int max_setup, int token_end)
    {
      this._Queue[this.container & 1] ^= 1L << (int) this.consumer[max_setup]++;
      this._Param[this.container++] = max_setup;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public long[] VisitComparator() => this._Queue;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override SqlParameterType updateMove()
    {
      int num1 = 3;
      SqlParameterType sqlParameterType;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          bool flag;
          int num3;
          switch (num2)
          {
            case 0:
            case 3:
              if (this.CompareComparator(this._Queue[0]))
              {
                num3 = 1;
                break;
              }
              goto label_2;
            case 1:
            case 8:
              num3 = this.CompareComparator(this._Queue[1]) ? 1 : 0;
              break;
            case 2:
            case 5:
            case 9:
              goto label_16;
            case 4:
label_13:
              if (flag)
              {
                num2 = 7;
                continue;
              }
              goto label_3;
            case 6:
              sqlParameterType = (SqlParameterType) 0;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_16;
            case 7:
              goto label_4;
            default:
              goto label_12;
          }
          if (num3 == 0)
          {
            flag = this.OrderComparator();
            goto label_13;
          }
          else
            goto label_8;
        }
label_2:
        num1 = 8;
        continue;
label_3:
        sqlParameterType = (SqlParameterType) 2;
        num1 = 9;
        continue;
label_4:
        sqlParameterType = (SqlParameterType) 3;
        num1 = 2;
        continue;
label_8:
        num1 = 6;
        continue;
label_12:
        num1 = 4;
      }
label_16:
      return sqlParameterType;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void setLastMove(object instance, int startselection) => this.AssetComparator((int) instance, startselection);

    internal static bool CustomizeInfo() => true;

    internal static bool FindInfo() => false;
  }
}
