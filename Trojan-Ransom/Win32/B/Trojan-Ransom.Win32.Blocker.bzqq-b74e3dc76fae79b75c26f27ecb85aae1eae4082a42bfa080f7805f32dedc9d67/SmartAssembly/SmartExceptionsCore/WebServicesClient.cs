// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.WebServicesClient
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.Net;

namespace SmartAssembly.SmartExceptionsCore
{
  internal class WebServicesClient
  {
    internal static readonly string UploadReportServer = "http://sawebservice.red-gate.com/";
    private string licenseID;
    private string m_ServerURL;
    private IWebProxy proxy;

    public void SetProxy(IWebProxy proxy) => this.proxy = proxy;

    public void LoginToServer(StringCallback whenDone)
    {
      if (this.m_ServerURL == null)
      {
        try
        {
          UploadReportLoginService reportLoginService = new UploadReportLoginService();
          if (this.proxy != null)
            reportLoginService.Proxy = this.proxy;
          this.m_ServerURL = reportLoginService.GetServerURL(this.licenseID);
          if (this.m_ServerURL.Length == 0)
            throw new ApplicationException("Cannot connect to webservice");
          if (this.m_ServerURL == "ditto")
            this.m_ServerURL = WebServicesClient.UploadReportServer;
        }
        catch (Exception ex)
        {
          whenDone("ERR 2001: " + ex.Message);
          return;
        }
      }
      whenDone(this.m_ServerURL.StartsWith("ERR") ? this.m_ServerURL : "OK");
    }

    public void Upload(
      byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber,
      StringCallback whenDone)
    {
      try
      {
        ReportingService reportingService = new ReportingService(this.m_ServerURL);
        if (this.proxy != null)
          reportingService.Proxy = this.proxy;
        whenDone(reportingService.UploadReport2(this.licenseID, data, email, appFriendlyName, buildFriendlyNumber));
      }
      catch (Exception ex)
      {
        whenDone("ERR 2002: " + ex.Message);
      }
    }

    public WebServicesClient(string licenseID) => this.licenseID = licenseID;
  }
}
