// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: IOExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 72674A88-3F84-4927-9D84-82118D6CBF01
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-49811dca565bead069108819f9ad132a2214364381f97dcf7f0f439614cc8ff4.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202A‮‌‏‏⁪⁪‌‭‍⁯⁯‎‎‮‎⁫‬‮‮‪‍⁭⁫‮⁫⁬‬⁭‪‬‬‭‪‪⁬⁫​‎⁫‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -802793184;
        int index;
        bool finished2;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1426592553)) % 14U)
          {
            case 0:
              num1 = (int) num2 * 1546476087 ^ 1505964707;
              continue;
            case 1:
              num1 = (int) num2 * 1408593103 ^ 1671268606;
              continue;
            case 3:
              num1 = (int) num2 * -320820939 ^ -1229466542;
              continue;
            case 4:
              int num3;
              num1 = num3 = index < playerStates.Length ? -131730590 : (num3 = -1257946901);
              continue;
            case 5:
              ++index;
              num1 = -1265547699;
              continue;
            case 6:
              goto label_1;
            case 7:
              finished2 = true;
              num1 = (int) num2 * 414042421 ^ -393172435;
              continue;
            case 8:
              finished2 = false;
              num1 = (int) num2 * 1937925516 ^ 503549456;
              continue;
            case 9:
              int num4;
              num1 = num4 = playerStates[index].State == State.Playing ? -1959605665 : (num4 = -1189383118);
              continue;
            case 10:
              finished2 = true;
              num1 = (int) num2 * -759613902 ^ -1473766680;
              continue;
            case 11:
              num1 = (int) num2 * 605881399 ^ 558471990;
              continue;
            case 12:
              playerStates = this._playerStates;
              index = 0;
              num1 = -1487671467;
              continue;
            case 13:
              int num5 = !finished1 ? 403667501 : (num5 = 1114296734);
              num1 = num5 ^ (int) num2 * -339812774;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -1811424976;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -334392794)) % 7U)
        {
          case 0:
            goto label_1;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * 477206110 ^ -2077275319;
            continue;
          case 3:
            this.ShuffleCards();
            this.Winners.Clear();
            num1 = (int) num2 * 1837812418 ^ -1305182759;
            continue;
          case 4:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -442260978 ^ -1620818067;
            continue;
          case 5:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * -1910927629 ^ -2085426581;
            continue;
          case 6:
            num1 = (int) num2 * -1091418214 ^ 1987414579;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -1077319488;
      Player player;
      bool morePlanningSprint;
      PlayerState playerState;
      int num2;
      int planningCardsCount;
      int index;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -516897241)) % 25U)
        {
          case 0:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 1407144651 ^ 922104942;
            continue;
          case 1:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1235803022 ^ 1268901247;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num3 * -1893461488 ^ 1504884441;
            continue;
          case 4:
            playerState.Sprint = 1;
            num1 = (int) num3 * 523219307 ^ -159529890;
            continue;
          case 5:
            num1 = (int) num3 * -684124272 ^ 1999591652;
            continue;
          case 6:
            num1 = (int) num3 * -555991832 ^ -1239094818;
            continue;
          case 7:
            goto label_1;
          case 8:
            num2 = 0;
            num1 = -1142523132;
            continue;
          case 9:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 308469469 ^ 1729561573;
            continue;
          case 10:
            int num4 = planningCardsCount != 0 ? -566142066 : (num4 = -267948293);
            num1 = num4 ^ (int) num3 * 567412694;
            continue;
          case 11:
            int num5 = !flag2 ? 157294299 : (num5 = 1070796145);
            num1 = num5 ^ (int) num3 * 1501716988;
            continue;
          case 12:
            int num6 = flag1 ? 675387158 : (num6 = 1293465278);
            num1 = num6 ^ (int) num3 * -161347734;
            continue;
          case 13:
            num1 = -1874776384;
            continue;
          case 14:
            int num7 = morePlanningSprint ? -1344216543 : (num7 = -263812509);
            num1 = num7 ^ (int) num3 * 587820157;
            continue;
          case 15:
            player = this.Players[index];
            num1 = -326600537;
            continue;
          case 16:
            num1 = -203051187;
            continue;
          case 17:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 341817030 ^ 753821772;
            continue;
          case 18:
            index = 0;
            num1 = (int) num3 * 1185705781 ^ 750482385;
            continue;
          case 19:
            flag1 = index < this.Players.Length;
            num1 = -1104943202;
            continue;
          case 20:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1480728886 ^ 2054859828;
            continue;
          case 21:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1368429033 ^ -164797941;
            continue;
          case 22:
            num1 = (int) num3 * 37783723 ^ 984985016;
            continue;
          case 23:
            flag2 = num2 > 0;
            num1 = -678069165;
            continue;
          case 24:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = -1258279678;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 2083654568;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1343102109)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = !flag1 ? 2147089203 : (num3 = 78684300);
            num1 = num3 ^ (int) num2 * 1289507882;
            continue;
          case 2:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1679649496 ^ 344274253;
            continue;
          case 3:
            ++this._currentPlayer;
            num1 = (int) num2 * 67098369 ^ 135995339;
            continue;
          case 4:
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 204422330 ^ 1732006360;
            continue;
          case 5:
            this._currentPlayer = 0;
            num1 = (int) num2 * 230033540 ^ 2062498805;
            continue;
          case 6:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u200D​‫⁫‭‭‫‍⁯‪‌‭‪​‭⁫‏​‏‬‮‭‍⁮⁯⁮‏‫‬‌⁮‫⁬⁯‍⁪⁮‭⁯⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 619985442 ^ -2127660843;
            continue;
          case 7:
            this.Print((object) Game.\u202A⁮‌⁬​‮⁪‍‍⁪‭‍‫⁫‮‌⁭⁯⁬⁬⁯⁪⁮⁪⁭⁭‎‭‏‌​⁭⁭‭⁮⁯‭‫⁫⁭‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 477390869;
            continue;
          case 8:
            num1 = (int) num2 * 32030752 ^ -423038081;
            continue;
          case 9:
            int num4 = flag2 ? 111216419 : (num4 = 1995021375);
            num1 = num4 ^ (int) num2 * 1662546516;
            continue;
          case 10:
            num1 = (int) num2 * -1366617659 ^ -1000423807;
            continue;
          case 11:
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 273573208 ^ 207236845;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
      PlayerState playerState1 = this._playerStates[playerIndex];
label_1:
      int num1 = -227915651;
      while (true)
      {
        uint num2;
        bool flag1;
        PlayerState playerState2;
        bool flag2;
        int num3;
        int index;
        Card card;
        bool flag3;
        bool flag4;
        bool flag5;
        int num4;
        int num5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1233331610)) % 76U)
        {
          case 0:
            num1 = -59203862;
            continue;
          case 1:
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -1009858600 ^ -983492192;
            continue;
          case 2:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -1647779961 ^ -1858551058;
            continue;
          case 3:
            this.Losers.Add(num4);
            num1 = (int) num2 * 670785012 ^ 1839579995;
            continue;
          case 4:
            playerState1.State = State.Lose;
            flag5 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1410395833 ^ -1433743925;
            continue;
          case 5:
            ++num4;
            num1 = -2093781031;
            continue;
          case 6:
            num1 = -710150837;
            continue;
          case 7:
            goto label_3;
          case 8:
            card = this.DrawCard();
            num1 = -803876796;
            continue;
          case 9:
            ++playerState1.Sprint;
            num1 = (int) num2 * -731165762 ^ 1446007511;
            continue;
          case 10:
            num1 = (int) num2 * 1585733783 ^ -956220391;
            continue;
          case 11:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag3 ? (object) "ALL " : (object) "", flag4 ? (object) "receives" : (object) "pays", (object) Game.\u206D​​⁮⁭‪‎⁫‍⁫⁫⁫‎‏‏‫‬‌‌‎‍‫‏⁪⁭⁬⁭⁬‭⁮‏⁫‮‎‪​⁪⁪⁪⁪‮(num3), flag1 ? (object) "advance" : (object) "stay");
            int num7;
            num1 = num7 = flag3 ? -698447292 : (num7 = -1304708077);
            continue;
          case 12:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -188134773 ^ -254909634;
            continue;
          case 13:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200D​‫⁫‭‭‫‍⁯‪‌‭‪​‭⁫‏​‏‬‮‭‍⁮⁯⁮‏‫‬‌⁮‫⁬⁯‍⁪⁮‭⁯⁪‮("\t", playerState3 != null ? Game.\u206D⁯‏‎​‮‎‌​​‬‬‭‌⁫‭‎‌⁫⁬⁪‫‎‬⁮‪‏‪‬‭‫‮‪⁬‬‪‎⁫‏‭‮((object) playerState3) : (string) null));
            num1 = -191067147;
            continue;
          case 14:
            flag4 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -2044081196 ^ 66548545;
              continue;
            }
            num6 = 0;
            break;
          case 15:
            flag8 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -1770144357;
            continue;
          case 16:
            int num8;
            num1 = num8 = num4 == playerIndex ? -36879040 : (num8 = -982251034);
            continue;
          case 17:
            num1 = (int) num2 * -2015234002 ^ 1439760479;
            continue;
          case 18:
            num1 = (int) num2 * -1248272645 ^ -469083080;
            continue;
          case 19:
            num1 = (int) num2 * 1947180101 ^ 875739143;
            continue;
          case 20:
            num1 = (int) num2 * 1110737566 ^ 779285723;
            continue;
          case 21:
            flag7 = playerState2.Resources >= 0;
            num1 = (int) num2 * -1478300277 ^ -421655677;
            continue;
          case 22:
            int num9 = flag10 ? -1158735546 : (num9 = -81605334);
            num1 = num9 ^ (int) num2 * 186878890;
            continue;
          case 23:
            num1 = (int) num2 * -1267984995 ^ -805343974;
            continue;
          case 24:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1327841860 ^ 1989892590;
            continue;
          case 25:
            flag10 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1839381204;
            continue;
          case 26:
            playerState2.State = State.Lose;
            num1 = -601498935;
            continue;
          case 27:
            this.Print((object) Game.\u200D​‫⁫‭‭‫‍⁯‪‌‭‪​‭⁫‏​‏‬‮‭‍⁮⁯⁮‏‫‬‌⁮‫⁬⁯‍⁪⁮‭⁯⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1100459235 ^ 364233641;
            continue;
          case 28:
            num1 = (int) num2 * 1247306894 ^ -2099973258;
            continue;
          case 29:
            num1 = -1082709523;
            continue;
          case 30:
            num1 = (int) num2 * 1915401437 ^ -1353334411;
            continue;
          case 31:
            flag9 = flag1;
            num1 = -603553554;
            continue;
          case 32:
            num1 = (int) num2 * 1872635472 ^ 44720419;
            continue;
          case 33:
            flag2 = playerState1.Sprint < 0;
            num1 = -1786110658;
            continue;
          case 34:
            num3 = Game.\u202B⁪‏⁮⁭⁯‏‍‭‭⁬⁬‭⁪‌‪⁫‬‮⁫‍⁪‍‏⁮⁫‫‎‎‮‬‭‬⁬‎‏‎‭‎‬‮(0, num5);
            num1 = (int) num2 * 1575056976 ^ 814866813;
            continue;
          case 35:
            num1 = (int) num2 * 11197841 ^ -540332832;
            continue;
          case 36:
            ++index;
            num1 = -354448835;
            continue;
          case 37:
            num1 = (int) num2 * 1920041401 ^ -1407221005;
            continue;
          case 38:
            index = 0;
            num1 = -354448835;
            continue;
          case 39:
            flag1 = true;
            num1 = (int) num2 * 1034330273 ^ -704301795;
            continue;
          case 40:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1540866039 ^ -1757966045;
            continue;
          case 41:
            int num10 = flag8 ? 2090008394 : (num10 = 1583000425);
            num1 = num10 ^ (int) num2 * 846871370;
            continue;
          case 42:
            int num11 = flag7 ? -1478117172 : (num11 = -857794712);
            num1 = num11 ^ (int) num2 * -2011325460;
            continue;
          case 43:
            num1 = -1129530779;
            continue;
          case 44:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 843551461 ^ 602302224;
            continue;
          case 45:
            flag1 = false;
            num1 = -1261255807;
            continue;
          case 46:
            playerState2 = this._playerStates[index];
            num1 = -363875591;
            continue;
          case 47:
            int num12;
            num1 = num12 = index >= this._playerStates.Length ? -1274895282 : (num12 = -189381352);
            continue;
          case 48:
            int num13 = flag2 ? 1390221210 : (num13 = 31901227);
            num1 = num13 ^ (int) num2 * -838751621;
            continue;
          case 49:
            goto label_1;
          case 50:
            int num14 = !flag6 ? 1939841215 : (num14 = 1695262956);
            num1 = num14 ^ (int) num2 * 940337901;
            continue;
          case 51:
            int num15 = this.Losers.Contains(index) ? 1729532878 : (num15 = 1745920491);
            num1 = num15 ^ (int) num2 * -1187436112;
            continue;
          case 52:
            flag6 = !flag4;
            num1 = (int) num2 * 1890806123 ^ 822462952;
            continue;
          case 53:
            int num16 = !flag5 ? -1748334132 : (num16 = -88646224);
            num1 = num16 ^ (int) num2 * 76997163;
            continue;
          case 54:
            num1 = (int) num2 * 1129563240 ^ -1940067526;
            continue;
          case 55:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 56:
            int num17 = flag9 ? -1173191905 : (num17 = -605831023);
            num1 = num17 ^ (int) num2 * 852228655;
            continue;
          case 57:
            int num18 = this.Rules.OnlyOneWinner ? 1636201077 : (num18 = 1020287981);
            num1 = num18 ^ (int) num2 * -1709064659;
            continue;
          case 58:
            int num19 = playerState1.State == 0 ? -1041105083 : (num19 = -1948836709);
            num1 = num19 ^ (int) num2 * 949244177;
            continue;
          case 59:
            int num20;
            num1 = num20 = num4 >= this._playerStates.Length ? -1301319475 : (num20 = -1755827338);
            continue;
          case 60:
            int num21;
            num1 = num21 = this.Losers.Contains(num4) ? -803832326 : (num21 = -2118021647);
            continue;
          case 61:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1961825152 ^ 176134467;
            continue;
          case 62:
            num1 = -893414686;
            continue;
          case 63:
            num1 = (int) num2 * -320327462 ^ 342898427;
            continue;
          case 64:
            num3 = card.Impact;
            num1 = (int) num2 * 977596840 ^ 1092617097;
            continue;
          case 65:
            this.Losers.Add(index);
            num1 = (int) num2 * 967679670 ^ 1267939200;
            continue;
          case 66:
            num1 = (int) num2 * -484414148 ^ -2140861135;
            continue;
          case 67:
            num1 = (int) num2 * 923986923 ^ 1888382845;
            continue;
          case 68:
            num1 = (int) num2 * -519909087 ^ -640512187;
            continue;
          case 69:
            playerState1.Resources -= num3;
            num1 = (int) num2 * -1185119827 ^ -1261273310;
            continue;
          case 70:
            num1 = (int) num2 * -1371169743 ^ 1685909167;
            continue;
          case 71:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1765052814 ^ -326347453;
            continue;
          case 72:
            num1 = -2113264781;
            continue;
          case 73:
            int num22 = playerState1.Resources >= 0 ? 603239721 : (num22 = 1566735493);
            num1 = num22 ^ (int) num2 * -478719243;
            continue;
          case 74:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * 458656139 ^ -1019868294;
            continue;
          case 75:
            playerState2.Resources -= Game.\u202B⁪‏⁮⁭⁯‏‍‭‭⁬⁬‭⁪‌‪⁫‬‮⁫‍⁪‍‏⁮⁫‫‎‎‮‬‭‬⁬‎‏‎‭‎‬‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -1053657155 ^ -1894470580;
            continue;
          default:
            goto label_81;
        }
        flag3 = num6 != 0;
        num1 = -51380186;
      }
label_3:
      return;
label_81:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 710682823;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 866713257)) % 10U)
        {
          case 0:
            this.ShuffleCards();
            num1 = (int) num2 * 100385901 ^ 1303444267;
            continue;
          case 2:
            card2 = card1;
            num1 = (int) num2 * 607532589 ^ -1509646688;
            continue;
          case 3:
            num1 = (int) num2 * -249381727 ^ -479258338;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = 1482251600;
            continue;
          case 5:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -652483204 ^ -1708038342;
            continue;
          case 6:
            num1 = (int) num2 * 1932683986 ^ 953579661;
            continue;
          case 7:
            goto label_1;
          case 8:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1852898015 ^ -907440340;
            continue;
          case 9:
            int num3 = flag ? -104297217 : (num3 = -1988218719);
            num1 = num3 ^ (int) num2 * -249518252;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1068441656;
      string str1;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -286845640)) % 10U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206D⁯‏‎​‮‎‌​​‬‬‭‌⁫‭‎‌⁫⁬⁪‫‎‬⁮‪‏‪‬‭‫‮‪⁬‬‪‎⁫‏‭‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202C⁬‍⁯⁯‭‍⁮‬‏⁯‪⁮​⁬‏‭⁭‭⁭‮‬⁫‫⁪⁬‮‫‮⁬‬⁭⁬⁪‮​‬‪⁫‪‮(strArray);
            num1 = -318931131;
            continue;
          case 2:
            num1 = (int) num2 * 773160879 ^ -1134241095;
            continue;
          case 3:
            int num3;
            num1 = num3 = index < this._playerStates.Length ? -1961995772 : (num3 = -107981383);
            continue;
          case 4:
            goto label_1;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 1833565040 ^ 1427649969;
            continue;
          case 6:
            str1 = "";
            num1 = (int) num2 * -1735592257 ^ 536542730;
            continue;
          case 7:
            num1 = (int) num2 * -343303592 ^ 1182408909;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * -1548339370 ^ 1677773004;
            continue;
          case 9:
            ++index;
            num1 = (int) num2 * -260740119 ^ 1860650900;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 982083117;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1236262996)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1724308810 ^ -1700523066;
            continue;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1645132602 ^ -1618765098;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -1024149479;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -334677065)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u202E⁮⁬⁮‪​‎⁯‍⁮⁮‭⁯‌‫⁫⁯‭⁫⁯⁮⁮‪‮‫‪​‮⁭‎⁮‫‪‬‮‎‎⁪‮⁫‮(this._buffer, str);
            num1 = (int) num2 * 615914837 ^ -1372905275;
            continue;
          case 2:
            str = Game.\u206D‪‎​‭‌‎‏‫⁫‎‪⁫‫⁯‌‪‮‬‬‍⁯‍‫⁮‌‎‬⁫⁭‮‪‭⁫‭‭‏‏⁯‬‮(Game.\u206D⁯‏‎​‮‎‌​​‬‬‭‌⁫‭‎‌⁫⁬⁪‫‎‬⁮‪‏‪‬‭‫‮‪⁬‬‪‎⁫‏‭‮(text), more);
            num1 = (int) num2 * 1061398119 ^ 875230212;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u202A‮‌‏‏⁪⁪‌‭‍⁯⁯‎‎‮‎⁫‬‮‮‪‍⁭⁫‮⁫⁬‬⁭‪‬‬‭‪‪⁬⁫​‎⁫‮([In] int obj0) => new Random(obj0);

    static string \u202A⁮‌⁬​‮⁪‍‍⁪‭‍‫⁫‮‌⁭⁯⁬⁬⁯⁪⁮⁪⁭⁭‎‭‏‌​⁭⁭‭⁮⁯‭‫⁫⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200D​‫⁫‭‭‫‍⁯‪‌‭‪​‭⁫‏​‏‬‮‭‍⁮⁯⁮‏‫‬‌⁮‫⁬⁯‍⁪⁮‭⁯⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202B⁪‏⁮⁭⁯‏‍‭‭⁬⁬‭⁪‌‪⁫‬‮⁫‍⁪‍‏⁮⁫‫‎‎‮‬‭‬⁬‎‏‎‭‎‬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206D​​⁮⁭‪‎⁫‍⁫⁫⁫‎‏‏‫‬‌‌‎‍‫‏⁪⁭⁬⁭⁬‭⁮‏⁫‮‎‪​⁪⁪⁪⁪‮([In] int obj0) => Math.Abs(obj0);

    static string \u206D⁯‏‎​‮‎‌​​‬‬‭‌⁫‭‎‌⁫⁬⁪‫‎‬⁮‪‏‪‬‭‫‮‪⁬‬‪‎⁫‏‭‮([In] object obj0) => obj0.ToString();

    static string \u202C⁬‍⁯⁯‭‍⁮‬‏⁯‪⁮​⁬‏‭⁭‭⁭‮‬⁫‫⁪⁬‮‫‮⁬‬⁭⁬⁪‮​‬‪⁫‪‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206D‪‎​‭‌‎‏‫⁫‎‪⁫‫⁯‌‪‮‬‬‍⁯‍‫⁮‌‎‬⁫⁭‮‪‭⁫‭‭‏‏⁯‬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202E⁮⁬⁮‪​‎⁯‍⁮⁮‭⁯‌‫⁫⁯‭⁫⁯⁮⁮‪‮‫‪​‮⁭‎⁮‫‪‬‮‎‎⁪‮⁫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
