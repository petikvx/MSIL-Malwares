// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0004;
using \u0008;
using \u000F;
using \u0011;
using \u0012;
using \u0014;
using \u0015;
using Newtonsoft.Json;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u0011
{
  internal sealed class \u0003 : \u0007, \u0001
  {
    internal readonly TextReader \u0001;
    internal char[] \u0001;
    internal int \u0001;
    internal int \u0002;
    internal int \u0003;
    internal int \u0004;
    internal new bool \u0001;
    internal \u0007 \u0001;
    internal \u0015.\u0008 \u0001;
    internal \u0003<char> \u0001;
    internal \u0005 \u0001;
    [NonSerialized]
    internal static GetString \u0081;

    public \u0003([In] TextReader obj0)
    {
      this.\u0001 = obj0 != null ? obj0 : throw new ArgumentNullException(\u0003.\u0081(3021));
      this.\u0004 = 1;
    }

    public override bool \u0001()
    {
      \u0006.\u0001(this);
      int num1;
      int num2;
      do
      {
        switch (base.\u0001)
        {
          case \u0007.\u0001.\u0001:
          case \u0007.\u0001.\u0003:
          case \u0007.\u0001.\u0006:
          case \u0007.\u0001.\u0007:
          case \u0007.\u0001.\u000F:
          case \u0007.\u0001.\u0010:
            goto label_21;
          case \u0007.\u0001.\u0002:
          case \u0007.\u0001.\u0008:
          case \u0007.\u0001.\u0011:
            goto label_19;
          case \u0007.\u0001.\u0004:
          case \u0007.\u0001.\u0005:
            goto label_22;
          case \u0007.\u0001.\u000E:
            num1 = \u0006.\u0001(this) ? 1 : 0;
            break;
          case \u0007.\u0001.\u0012:
            int num3 = \u0006.\u0001(this, 0, false) ? 1 : 0;
            if (true)
            {
              if (num3 != 0)
                num3 = \u0006.\u0001(this, false) ? 1 : 0;
              else
                goto label_18;
            }
            if (!this.\u0001)
            {
              int num4 = (int) this.\u0001[this.\u0002];
              while (true)
              {
                if (true)
                {
                  if (num4 == 47)
                  {
                    if (true)
                    {
                      \u0006.\u0001(this, true);
                      if (true)
                      {
                        num2 = 1;
                        if (num2 == 0)
                          num4 = num2;
                        else
                          goto label_2;
                      }
                      else
                        goto label_18;
                    }
                    else
                      goto label_19;
                  }
                  else
                    goto label_17;
                }
                else
                  break;
              }
              num1 = num4;
              break;
            }
            goto label_10;
          default:
            goto label_1;
        }
      }
      while (num1 == 0);
      goto label_5;
label_1:
      if (false)
        goto label_19;
      else
        goto label_19;
label_5:
      return true;
label_10:
      \u0006.\u0001((\u0007) this, JsonToken.None);
      return false;
label_2:
      return num2 != 0;
label_17:
      throw \u0006.\u0001((\u0007) this, \u0002.\u0002.\u0001(\u0003.\u0081(3030), (IFormatProvider) \u0098.\u0002\u0004(), (object) this.\u0001[this.\u0002]));
label_18:
      \u0006.\u0001((\u0007) this, JsonToken.None);
      return false;
label_19:
      throw \u0006.\u0001((\u0007) this, \u0002.\u0002.\u0001(\u0003.\u0081(3123), (IFormatProvider) \u0098.\u0002\u0004(), (object) base.\u0001));
label_21:
      return \u0006.\u0001(this);
label_22:
      return \u0006.\u0001(this);
    }

    public override int? \u0001() => (int?) \u0006.\u0001(\u0005.\u0002, this);

    public override DateTime? \u0001() => (DateTime?) \u0006.\u0001(\u0005.\u0006, this);

    public override string \u0002() => (string) \u0006.\u0001(\u0005.\u0004, this);

    public override byte[] \u0001()
    {
      \u0006.\u0001(this);
      bool flag = false;
      switch (base.\u0001)
      {
        case \u0007.\u0001.\u0001:
        case \u0007.\u0001.\u0003:
        case \u0007.\u0001.\u0006:
        case \u0007.\u0001.\u0007:
        case \u0007.\u0001.\u000E:
        case \u0007.\u0001.\u000F:
        case \u0007.\u0001.\u0010:
          char ch;
          do
          {
            do
              ;
            while (false);
            ch = this.\u0001[this.\u0002];
            int num1;
            if (ch <= '\'')
            {
              if (ch <= '\r')
              {
                if (ch != char.MinValue)
                {
                  switch ((int) ch - 9)
                  {
                    case 0:
                      break;
                    case 1:
                      \u0006.\u0001(this);
                      continue;
                    case 4:
                      \u0006.\u0001(this, false);
                      continue;
                    default:
                      goto label_36;
                  }
                }
                else
                {
                  if (\u0006.\u0001(this))
                  {
                    \u0006.\u0001((\u0007) this, JsonToken.None, (object) null, false);
                    return (byte[]) null;
                  }
                  continue;
                }
              }
              else if (ch != ' ')
              {
                num1 = (int) ch;
                goto label_7;
              }
              ++this.\u0002;
              continue;
            }
            goto label_8;
label_7:
            if (num1 == 34 || ch == '\'')
            {
              \u0006.\u0001(this, ch, \u0005.\u0003);
              byte[] numArray = (byte[]) this.\u0001();
              if (flag)
              {
                \u0006.\u0001((\u0007) this);
                if (this.\u0001() != JsonToken.EndObject)
                  throw \u0006.\u0001((\u0007) this, \u0002.\u0002.\u0001(\u0003.\u0081(3156), (IFormatProvider) \u0098.\u0002\u0004(), (object) this.\u0001()));
                \u0006.\u0001((\u0007) this, JsonToken.Bytes, (object) numArray, false);
              }
              return numArray;
            }
            goto label_36;
label_8:
            int num2;
            if (ch <= '[')
            {
              if (ch != ',')
              {
                if (ch != '/')
                {
                  num2 = (int) ch;
                }
                else
                {
                  \u0006.\u0001(this, false);
                  continue;
                }
              }
              else
              {
                \u0006.\u0001(this);
                continue;
              }
            }
            else
              goto label_13;
label_12:
            if (num2 == 91)
            {
              ++this.\u0002;
              \u0006.\u0001((\u0007) this, JsonToken.StartArray);
              return \u0006.\u0001((\u0007) this);
            }
            goto label_36;
label_13:
            if (ch != ']')
            {
              if (ch != 'n')
              {
                num1 = (int) ch;
                if (true)
                {
                  if (num1 == 123)
                  {
                    ++this.\u0002;
                    \u0006.\u0001((\u0007) this, JsonToken.StartObject);
                    \u0006.\u0001((\u0007) this);
                    num2 = 1;
                    if (num2 != 0)
                    {
                      flag = num2 != 0;
                      continue;
                    }
                    goto label_12;
                  }
                }
                else
                  goto label_7;
              }
              else
              {
                \u0006.\u0001(this);
                return (byte[]) null;
              }
            }
            else
            {
              ++this.\u0002;
              if (base.\u0001 != \u0007.\u0001.\u0007 && base.\u0001 != \u0007.\u0001.\u0006 && base.\u0001 != \u0007.\u0001.\u000E)
                throw \u0006.\u0001(this, ch);
              \u0006.\u0001((\u0007) this, JsonToken.EndArray);
              return (byte[]) null;
            }
label_36:
            ++this.\u0002;
          }
          while (\u009A.\u0005\u0004(ch));
          throw \u0006.\u0001(this, ch);
        case \u0007.\u0001.\u0012:
          \u0006.\u0001(this);
          return (byte[]) null;
        default:
          throw \u0006.\u0001((\u0007) this, \u0002.\u0002.\u0001(\u0003.\u0081(3123), (IFormatProvider) \u0098.\u0002\u0004(), (object) base.\u0001));
      }
    }

    public override unsafe bool? \u0001()
    {
      int num1 = 2;
      char c;
      void* voidPtr;
      int num2;
      while (true)
      {
        // ISSUE: untyped stack allocation
        voidPtr = (void*) __untypedstackalloc(num1);
        do
        {
          if (true)
            \u0006.\u0001(this);
          switch (base.\u0001)
          {
            case \u0007.\u0001.\u0001:
            case \u0007.\u0001.\u0003:
            case \u0007.\u0001.\u0006:
            case \u0007.\u0001.\u0007:
            case \u0007.\u0001.\u000E:
            case \u0007.\u0001.\u000F:
            case \u0007.\u0001.\u0010:
              while (true)
              {
                do
                {
                  do
                  {
                    do
                    {
                      c = this.\u0001[this.\u0002];
                      switch (c)
                      {
                        case char.MinValue:
                          continue;
                        case '\t':
                        case ' ':
                          goto label_32;
                        case '\n':
                          goto label_31;
                        case '\r':
                          goto label_29;
                        case '"':
                        case '\'':
                          goto label_6;
                        case ',':
                          goto label_25;
                        case '-':
                        case '.':
                        case '0':
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                          goto label_10;
                        case '/':
                          goto label_24;
                        case ']':
                          goto label_26;
                        case 'f':
                        case 't':
                          goto label_15;
                        case 'n':
                          goto label_8;
                        default:
                          goto label_33;
                      }
                    }
                    while (!\u0006.\u0001(this));
                    goto label_3;
label_33:
                    ++this.\u0002;
                  }
                  while (char.IsWhiteSpace(c));
                  goto label_34;
label_29:
                  \u0006.\u0001(this, false);
                }
                while (true);
                goto label_14;
label_24:
                \u0006.\u0001(this, false);
                continue;
label_25:
                \u0006.\u0001(this);
                continue;
label_31:
                \u0006.\u0001(this);
                continue;
label_32:
                ++this.\u0002;
              }
label_3:
              \u0006.\u0001((\u0007) this, JsonToken.None, (object) null, false);
              continue;
            case \u0007.\u0001.\u0012:
              goto label_35;
            default:
              goto label_38;
          }
        }
        while (false);
        break;
label_15:
        *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) (c == 't');
        num2 = (int) *(sbyte*) ((IntPtr) voidPtr + 1);
        if (false)
          num1 = num2;
        else
          goto label_16;
      }
      if (true)
        return new bool?();
      goto label_9;
label_6:
      \u0006.\u0001(this, c, \u0005.\u0001);
label_7:
      return \u0006.\u0001((\u0007) this, this.\u0001.ToString());
label_8:
      \u0006.\u0001(this);
      bool? nullable1 = new bool?();
label_9:
      return nullable1;
label_10:
      \u0006.\u0001(this, \u0005.\u0001);
      if (true)
        *(sbyte*) voidPtr = (sbyte) Convert.ToBoolean(this.\u0001(), (IFormatProvider) CultureInfo.InvariantCulture);
      else
        goto label_21;
label_12:
      if (true)
        \u0006.\u0001((\u0007) this, JsonToken.Boolean, (object) (bool) *(sbyte*) voidPtr, false);
      else
        goto label_7;
label_14:
      return new bool?((bool) *(sbyte*) voidPtr);
label_16:
      string str1;
      if (num2 == 0)
      {
        if (true)
          str1 = \u0006.\u0002;
        else
          goto label_12;
      }
      else
        str1 = \u0006.\u0001;
      string str2 = str1;
label_21:
      if (!\u0006.\u0001(this, str2))
        throw \u0006.\u0001(this, this.\u0001[this.\u0002]);
      \u0006.\u0001((\u0007) this, JsonToken.Boolean, (object) (bool) *(sbyte*) ((IntPtr) voidPtr + 1));
      return new bool?((bool) *(sbyte*) ((IntPtr) voidPtr + 1));
label_26:
      ++this.\u0002;
      if (base.\u0001 != \u0007.\u0001.\u0007 && base.\u0001 != \u0007.\u0001.\u0006 && base.\u0001 != \u0007.\u0001.\u000E)
        throw \u0006.\u0001(this, c);
      \u0006.\u0001((\u0007) this, JsonToken.EndArray);
      return new bool?();
label_34:
      throw \u0006.\u0001(this, c);
label_35:
      bool? nullable2;
      if (true)
      {
        \u0006.\u0001(this);
        nullable2 = new bool?();
      }
      return nullable2;
label_38:
      throw \u0006.\u0001((\u0007) this, \u0002.\u0002.\u0001(\u0003.\u0081(3123), (IFormatProvider) CultureInfo.InvariantCulture, (object) base.\u0001));
    }

    public override DateTimeOffset? \u0001() => (DateTimeOffset?) \u0006.\u0001(\u0005.\u0007, this);

    public override Decimal? \u0001() => (Decimal?) \u0006.\u0001(\u0005.\u0005, this);

    public override double? \u0001() => (double?) \u0006.\u0001(\u0005.\u0008, this);

    public override void \u0001()
    {
      base.\u0001();
      if (this.\u0001 != null)
      {
        \u0006.\u0001(this.\u0001, this.\u0001);
        this.\u0001 = (char[]) null;
      }
      if (base.\u0003() && this.\u0001 != null)
        global::\u0011.\u007E\u000E\u0002((object) this.\u0001);
      this.\u0001.\u0001(this.\u0001);
    }

    public bool \u0002() => true;

    [SpecialName]
    public int \u0002()
    {
      if (base.\u0001 != \u0007.\u0001.\u0001)
        goto label_5;
label_1:
      if (true)
      {
        int num = this.\u0003();
        if (false)
          return num;
        if (num != 0)
          goto label_5;
      }
      while (this.\u0001() != JsonToken.Comment)
      {
        if (true)
          return 0;
      }
label_5:
      if (true)
        return this.\u0004;
      goto label_1;
    }

    [SpecialName]
    public int \u0003() => this.\u0002 - this.\u0003;

    static \u0003() => Strings.CreateGetStringDelegate(typeof (\u0003));
  }
}
