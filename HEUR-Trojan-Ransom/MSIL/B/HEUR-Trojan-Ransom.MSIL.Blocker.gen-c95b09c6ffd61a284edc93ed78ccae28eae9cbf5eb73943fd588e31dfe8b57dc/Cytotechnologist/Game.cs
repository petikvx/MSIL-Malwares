// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: WaitHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: A25291C7-A109-4713-B14B-FDD04827C77F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c95b09c6ffd61a284edc93ed78ccae28eae9cbf5eb73943fd588e31dfe8b57dc.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206C‌⁮‏‍‏⁮‮‭‭‮‏‍‏‫⁬⁫⁬‌⁪‌‫‌⁮⁫⁫‏‍‬‮‍⁭⁪⁮‫⁪‪⁪⁮‮‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_8;
label_1:
        int num1 = 1685945125;
label_2:
        int index;
        bool finished;
        PlayerState[] playerStates;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1230233518)) % 12U)
          {
            case 0:
              finished = false;
              num1 = (int) num2 * 1115141193 ^ 1114644021;
              continue;
            case 1:
              index = 0;
              num1 = (int) num2 * 2105079492 ^ -747116096;
              continue;
            case 3:
              num1 = (int) num2 * 694156086 ^ -732574046;
              continue;
            case 4:
              playerStates = this._playerStates;
              num1 = (int) num2 * -1604678701 ^ 1731959239;
              continue;
            case 5:
              goto label_8;
            case 6:
              int num3;
              num1 = num3 = index >= playerStates.Length ? 1643561098 : (num3 = 67425067);
              continue;
            case 7:
              finished = true;
              num1 = (int) num2 * -1716612305 ^ -1657612667;
              continue;
            case 8:
              finished = true;
              num1 = (int) num2 * -175769383 ^ 1801622916;
              continue;
            case 9:
              int num4;
              num1 = num4 = playerStates[index].State != State.Playing ? 896663156 : (num4 = 624162550);
              continue;
            case 10:
              ++index;
              num1 = 1424902484;
              continue;
            case 11:
              goto label_1;
            default:
              goto label_13;
          }
        }
label_13:
        return finished;
label_8:
        num1 = 991182234;
        goto label_2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -1221753967;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -934072035)) % 10U)
        {
          case 0:
            this._finished = false;
            num1 = (int) num2 * -42010087 ^ 911408303;
            continue;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * 337505435 ^ 859826040;
            continue;
          case 2:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 2033878848 ^ 1403600581;
            continue;
          case 3:
            num1 = (int) num2 * -1171890278 ^ -2082761364;
            continue;
          case 4:
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 252841516 ^ 1992767070;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * -934159140 ^ -591467628;
            continue;
          case 7:
            this.Winners.Clear();
            num1 = (int) num2 * 1782970174 ^ 1863260316;
            continue;
          case 8:
            this._currentTurn = 0;
            num1 = (int) num2 * 1975355126 ^ -155413459;
            continue;
          case 9:
            goto label_3;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = -276208309;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool flag1;
      bool flag2;
      int index;
      Player player;
      bool flag3;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -258892197)) % 29U)
        {
          case 0:
            num1 = -1750384140;
            continue;
          case 1:
            playerState.State = State.Playing;
            num1 = (int) num3 * 910608261 ^ -1216660040;
            continue;
          case 2:
            num1 = (int) num3 * 1067542524 ^ -1846087996;
            continue;
          case 3:
            num1 = (int) num3 * 2036346527 ^ 1274426067;
            continue;
          case 4:
            num2 = 0;
            num1 = -687189466;
            continue;
          case 5:
            int num4 = !morePlanningSprint ? 961223791 : (num4 = 1746264583);
            num1 = num4 ^ (int) num3 * -290522949;
            continue;
          case 6:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1427919148 ^ 855442462;
            continue;
          case 7:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1224842585 ^ 1203788988;
            continue;
          case 8:
            ++index;
            num1 = (int) num3 * 274671891 ^ -419762079;
            continue;
          case 9:
            goto label_1;
          case 10:
            index = 0;
            num1 = (int) num3 * -212898492 ^ 490543777;
            continue;
          case 11:
            playerState.Sprint = 0;
            num1 = (int) num3 * 310821933 ^ -1390619357;
            continue;
          case 12:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * -1445413162 ^ 648062957;
            continue;
          case 13:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -2011793216;
            continue;
          case 14:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1960782187 ^ 1639321320;
            continue;
          case 15:
            int num5 = flag2 ? 763230711 : (num5 = 17373209);
            num1 = num5 ^ (int) num3 * -372369842;
            continue;
          case 16:
            int num6 = !flag3 ? 1893606749 : (num6 = 418410349);
            num1 = num6 ^ (int) num3 * -904084130;
            continue;
          case 17:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -104536824 ^ -30718482;
            continue;
          case 18:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 462830623 ^ 477411841;
            continue;
          case 19:
            num1 = -1785575432;
            continue;
          case 20:
            int num7 = !flag1 ? -121215560 : (num7 = -308147275);
            num1 = num7 ^ (int) num3 * -1493137128;
            continue;
          case 21:
            flag1 = num2 > 0;
            num1 = -1632078738;
            continue;
          case 22:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 773405652 ^ -347873069;
            continue;
          case 23:
            player = this.Players[index];
            num1 = -1726185071;
            continue;
          case 24:
            num1 = (int) num3 * 943123618 ^ -50109022;
            continue;
          case 25:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 778780107 ^ 1799357888;
            continue;
          case 26:
            flag3 = index < this.Players.Length;
            num1 = -1744079210;
            continue;
          case 27:
            playerState.Sprint = -1;
            num1 = (int) num3 * 693633958 ^ -1912448785;
            continue;
          case 28:
            goto label_3;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 1087334951;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1212319554)) % 16U)
        {
          case 0:
            this._currentPlayer = 0;
            num1 = (int) num2 * -2070282124 ^ 1648032620;
            continue;
          case 1:
            this.Print((object) Game.\u200E‫‫‪‫⁯⁬⁭​‎‮⁪‎‭⁮⁫‬⁬⁭‪‌⁭⁭‪⁯⁮⁬​‪⁪‍‏‏⁭⁭​‪‍‪⁯‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 967313020 ^ -1398785428;
            continue;
          case 2:
            num1 = (int) num2 * -293947716 ^ -762833586;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1803092019 ^ 1374259324;
            continue;
          case 5:
            ++this._currentPlayer;
            flag2 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * 1674072118 ^ -1635112476;
            continue;
          case 6:
            num1 = (int) num2 * 1174978500 ^ -963740909;
            continue;
          case 7:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1506392931 ^ -1368362234;
            continue;
          case 8:
            int num3 = flag2 ? -1708906182 : (num3 = -1866625584);
            num1 = num3 ^ (int) num2 * -2118039499;
            continue;
          case 9:
            goto label_3;
          case 10:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1704458852;
            continue;
          case 11:
            this.Print((object) Game.\u200C⁪⁭⁪‍‫‬‮‍‪‌⁪⁯‪‫‏‫‪‫⁫⁯‍‭⁮⁯‭‍‏⁭‭‬⁯⁭⁫⁫⁯⁯⁫⁬⁭‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 2055523597;
            continue;
          case 12:
            int num4 = flag1 ? -1674873665 : (num4 = -2021606919);
            num1 = num4 ^ (int) num2 * -1377584808;
            continue;
          case 13:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -484700268 ^ 1557311133;
            continue;
          case 14:
            flag1 = this._currentTurn > 0;
            num1 = (int) num2 * -238698612 ^ 167790774;
            continue;
          case 15:
            num1 = (int) num2 * -1580124026 ^ 1671871551;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 271915810;
      while (true)
      {
        uint num2;
        int index;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        int num3;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        PlayerState playerState2;
        Card card;
        int num4;
        bool flag7;
        bool flag8;
        Player player;
        int num5;
        bool flag9;
        bool onlyOneWinner;
        bool flag10;
        int num6;
        switch ((num2 = (uint) (num1 ^ 269367508)) % 84U)
        {
          case 0:
            num1 = (int) num2 * -1523770836 ^ -1566360231;
            continue;
          case 1:
            num1 = (int) num2 * 1692084538 ^ 1304771836;
            continue;
          case 2:
            this.Losers.Add(index);
            num1 = (int) num2 * 388559263 ^ -1272958400;
            continue;
          case 3:
            num1 = (int) num2 * -1110474750 ^ -2141577232;
            continue;
          case 4:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 434063582 ^ 1184320747;
            continue;
          case 5:
            int num7 = this.Losers.Contains(playerIndex) ? -243864241 : (num7 = -1652147096);
            num1 = num7 ^ (int) num2 * -964812703;
            continue;
          case 6:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1843782789 ^ 1142417294;
            continue;
          case 7:
            num1 = 316892680;
            continue;
          case 8:
            ++index;
            num1 = 1656409949;
            continue;
          case 9:
            this.Losers.Add(num4);
            num1 = (int) num2 * 1544232455 ^ 2090382502;
            continue;
          case 10:
            flag8 = card.Impact < 0;
            num1 = (int) num2 * -1690311185 ^ 598784487;
            continue;
          case 11:
            int num8 = onlyOneWinner ? -312702002 : (num8 = -1528208987);
            num1 = num8 ^ (int) num2 * -82011104;
            continue;
          case 12:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u202D⁮‍⁮⁭⁪​⁫‏‌⁫‫‍‭⁬‮‎‬⁬⁬‮‎‮‫‬‍⁫‎‍‫‭‮⁯​‌‫‬‭‫‬‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            num1 = 1468964497;
            continue;
          case 13:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -865246048 ^ 648379419;
            continue;
          case 14:
            flag4 = false;
            num1 = 618940700;
            continue;
          case 15:
            playerState1.Resources -= num3;
            flag3 = playerState1.Resources < 0;
            num1 = (int) num2 * -955031460 ^ -436377448;
            continue;
          case 16:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 824350419 ^ -1464060940;
            continue;
          case 17:
            int num9 = playerState2.Resources < 0 ? -914822620 : (num9 = -1971109087);
            num1 = num9 ^ (int) num2 * -1638544486;
            continue;
          case 18:
            num3 = Game.\u202D⁮‍⁮⁭⁪​⁫‏‌⁫‫‍‭⁬‮‎‬⁬⁬‮‎‮‫‬‍⁫‎‍‫‭‮⁯​‌‫‬‭‫‬‮(0, num5);
            num1 = (int) num2 * -1537598928 ^ 1002771055;
            continue;
          case 19:
            num1 = 587897730;
            continue;
          case 20:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1733289388 ^ -131988219;
            continue;
          case 21:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1931513711 ^ 443639074;
            continue;
          case 22:
            flag2 = !this.Losers.Contains(index);
            num1 = (int) num2 * 1528688835 ^ 1091466069;
            continue;
          case 23:
            flag1 = playerState1.Sprint < 0;
            num1 = 564589142;
            continue;
          case 24:
            num1 = (int) num2 * -600043732 ^ 1377429747;
            continue;
          case 25:
            int num10 = !flag5 ? -1730341405 : (num10 = -921656782);
            num1 = num10 ^ (int) num2 * 1026440895;
            continue;
          case 26:
            playerState1.State = State.Won;
            num1 = (int) num2 * 1290504396 ^ 375455356;
            continue;
          case 27:
            flag9 = num4 == playerIndex;
            num1 = 357202296;
            continue;
          case 28:
            num1 = (int) num2 * -1944847778 ^ -1408192107;
            continue;
          case 29:
            num1 = (int) num2 * -1404155953 ^ -1394434245;
            continue;
          case 30:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * -430692751 ^ 1525107534;
            continue;
          case 31:
            int num11 = flag10 ? -701110884 : (num11 = -1598687447);
            num1 = num11 ^ (int) num2 * 1372366265;
            continue;
          case 32:
            int num12 = !flag3 ? -310016683 : (num12 = -1631896739);
            num1 = num12 ^ (int) num2 * -1541780249;
            continue;
          case 33:
            num1 = (int) num2 * -869566277 ^ -963121773;
            continue;
          case 34:
            flag4 = true;
            num3 = card.Impact;
            num1 = (int) num2 * -585740805 ^ -2013748858;
            continue;
          case 35:
            num1 = (int) num2 * 374046858 ^ -911961345;
            continue;
          case 36:
            flag4 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 2025654178 ^ 1473996798;
            continue;
          case 37:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200E‫‫‪‫⁯⁬⁭​‎‮⁪‎‭⁮⁫‬⁬⁭‪‌⁭⁭‪⁯⁮⁬​‪⁪‍‏‏⁭⁭​‪‍‪⁯‮("\t", playerState3 != null ? Game.\u200E⁬⁮​⁫⁮‪‏‌⁮⁭‬‍⁭‍⁮‮‎‪‎​‪‍‫‏‬‌⁯‪⁯‎⁯‌⁬‎​⁯‫‪‪‮((object) playerState3) : (string) null));
            num1 = 488805376;
            continue;
          case 38:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 39:
            num1 = (int) num2 * 538456506 ^ 1553648747;
            continue;
          case 40:
            flag4 = true;
            num1 = (int) num2 * 450355260 ^ 1939395342;
            continue;
          case 41:
            num1 = (int) num2 * 639201408 ^ 13370094;
            continue;
          case 42:
            int num13 = flag1 ? -1045997057 : (num13 = -2037262840);
            num1 = num13 ^ (int) num2 * 175992771;
            continue;
          case 43:
            num1 = (int) num2 * -1499416604 ^ 867508521;
            continue;
          case 44:
            num1 = (int) num2 * -1209323052 ^ 205683802;
            continue;
          case 45:
            int num14;
            num1 = num14 = index < this._playerStates.Length ? 1084369664 : (num14 = 2056870776);
            continue;
          case 46:
            int num15 = flag6 ? 1670429926 : (num15 = 1682627919);
            num1 = num15 ^ (int) num2 * 975418172;
            continue;
          case 47:
            num1 = (int) num2 * -804592130 ^ 1562869809;
            continue;
          case 48:
            num1 = (int) num2 * -1894986514 ^ 1576843275;
            continue;
          case 49:
            num1 = (int) num2 * 1126081409 ^ 145639344;
            continue;
          case 50:
            num1 = 793308684;
            continue;
          case 51:
            flag10 = !flag7;
            num1 = (int) num2 * 791385182 ^ -1880584327;
            continue;
          case 52:
            num1 = 1420211310;
            continue;
          case 53:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 277951487 ^ 1037585024;
            continue;
          case 54:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -204852581 ^ 375716671;
            continue;
          case 55:
            num1 = (int) num2 * -953215111 ^ 1204661734;
            continue;
          case 56:
            int num16 = playerState1.State != 0 ? -1273812717 : (num16 = -174232649);
            num1 = num16 ^ (int) num2 * -1877711651;
            continue;
          case 57:
            num1 = 1660606993;
            continue;
          case 58:
            ++num4;
            num1 = 88998027;
            continue;
          case 59:
            int num17;
            num1 = num17 = playerState1.Sprint <= this.Rules.SprintCount ? 1660606993 : (num17 = 497964308);
            continue;
          case 60:
            flag5 = !this.Losers.Contains(num4);
            num1 = 637224553;
            continue;
          case 61:
            int num18;
            num1 = num18 = !flag4 ? 1271576611 : (num18 = 1947930775);
            continue;
          case 62:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag7 ? (object) "ALL " : (object) "", flag8 ? (object) "receives" : (object) "pays", (object) Game.\u200D‏‍‍⁫‌⁭⁮⁬⁪‫‍⁮‌‮⁫‪​‪‎⁬‎⁮‏‏‎⁯‭⁯⁫⁮‌​‬‮‪⁬⁮‏‮(num3), flag4 ? (object) "advance" : (object) "stay");
            num1 = 1616457935;
            continue;
          case 63:
            num1 = (int) num2 * -455873961 ^ 1972068733;
            continue;
          case 64:
            card = this.DrawCard();
            num1 = (int) num2 * -18768188 ^ 1980928650;
            continue;
          case 65:
            num1 = (int) num2 * 1337923806 ^ 1914953471;
            continue;
          case 66:
            playerState2.State = State.Lose;
            num1 = 70952174;
            continue;
          case 67:
            int num19 = !flag2 ? 565349025 : (num19 = 2144408969);
            num1 = num19 ^ (int) num2 * -1776270699;
            continue;
          case 68:
            goto label_1;
          case 69:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -756440737 ^ 1516263217;
            continue;
          case 70:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u200E‫‫‪‫⁯⁬⁭​‎‮⁪‎‭⁮⁫‬⁬⁭‪‌⁭⁭‪⁯⁮⁬​‪⁪‍‏‏⁭⁭​‪‍‪⁯‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1861815980 ^ -959298223;
            continue;
          case 71:
            num1 = (int) num2 * 711644639 ^ 1950783531;
            continue;
          case 72:
            num1 = (int) num2 * -743627094 ^ 1306030238;
            continue;
          case 73:
            goto label_3;
          case 74:
            index = 0;
            num1 = 1989122051;
            continue;
          case 75:
            ++playerState1.Sprint;
            num1 = (int) num2 * -2139876668 ^ -1867959953;
            continue;
          case 76:
            int num20 = flag9 ? 2089681069 : (num20 = 1088844488);
            num1 = num20 ^ (int) num2 * -884241001;
            continue;
          case 77:
            num1 = 255188323;
            continue;
          case 78:
            flag6 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 387187986;
            continue;
          case 79:
            num1 = 1246476229;
            continue;
          case 80:
            num1 = (int) num2 * 1852785264 ^ -1110305619;
            continue;
          case 81:
            num1 = (int) num2 * 1925942739 ^ 1199755395;
            continue;
          case 82:
            num1 = (int) num2 * 831781793 ^ -249724346;
            continue;
          case 83:
            int num21;
            num1 = num21 = num4 < this._playerStates.Length ? 892972715 : (num21 = 1570851916);
            continue;
          default:
            goto label_89;
        }
        flag7 = num6 != 0;
        int num22;
        num1 = num22 = !flag8 ? 1552730703 : (num22 = 324109887);
      }
label_3:
      return;
label_89:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1861551879;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 262132426)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 2010303377 ^ -961625384;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * -1331804296 ^ 1340913872;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * 846638094 ^ 908805324;
            continue;
          case 4:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1448842329 ^ -1113896129;
            continue;
          case 5:
            goto label_1;
          case 6:
            card1 = this._deck[0];
            num1 = 2109117120;
            continue;
          case 7:
            card2 = card1;
            num1 = (int) num2 * -1704863566 ^ -1791998890;
            continue;
          case 8:
            int num3 = !flag ? -1872910386 : (num3 = -418032871);
            num1 = num3 ^ (int) num2 * -1440399604;
            continue;
          case 9:
            num1 = (int) num2 * 387315104 ^ -725247839;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 2048579887;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 795756328)) % 9U)
        {
          case 1:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200E⁬⁮​⁫⁮‪‏‌⁮⁭‬‍⁭‍⁮‮‎‪‎​‪‍‫‏‬‌⁯‪⁯‎⁯‌⁬‎​⁯‫‪‪‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206F‎‍‬‎‍‎⁯⁪‪‏⁭‌‌‫‪‪‏​‮⁫⁫⁮‬‎‎‎‭⁭⁭⁪‎⁮‍⁫⁯⁮⁫⁭⁯‮(strArray);
            ++index;
            num1 = 1542961474;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * 824153724 ^ -1759318266;
            continue;
          case 3:
            num1 = (int) num2 * 2098918953 ^ -752027462;
            continue;
          case 4:
            index = 0;
            num1 = (int) num2 * -514788718 ^ -801789652;
            continue;
          case 5:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? 1620313165 : (num3 = 1010939732);
            continue;
          case 6:
            str1 = "";
            num1 = (int) num2 * -1403900408 ^ -787511633;
            continue;
          case 7:
            num1 = (int) num2 * -1413104269 ^ -458851236;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1257801935;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 360139042)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = this.ToString(false);
            num1 = (int) num2 * -830086601 ^ -996730971;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
      string str = Game.\u206A⁬‏‎‌‍‫‫‮‭⁮‬‮‫​⁮‌‌​‭‭‏⁯⁫⁭‫‮⁯‬‏⁮⁬‮‭‫‮⁫‍⁯‭‮(Game.\u200E⁬⁮​⁫⁮‪‏‌⁮⁭‬‍⁭‍⁮‮‎‪‎​‪‍‫‏‬‌⁯‪⁯‎⁯‌⁬‎​⁯‫‪‪‮(text), more);
label_1:
      int num1 = -792298297;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2002965455)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u206A⁯⁪‬‏⁭‏‪⁬⁪‫‮​⁪‪‌⁬⁪​‎‏⁮‍⁭⁫‏‫‬⁮‫⁪⁯‎⁭⁬⁭‌‫⁬⁪‮(this._buffer, str);
            num1 = (int) num2 * 978119504 ^ -284684419;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u206C‌⁮‏‍‏⁮‮‭‭‮‏‍‏‫⁬⁫⁬‌⁪‌‫‌⁮⁫⁫‏‍‬‮‍⁭⁪⁮‫⁪‪⁪⁮‮‮([In] int obj0) => new Random(obj0);

    static string \u200C⁪⁭⁪‍‫‬‮‍‪‌⁪⁯‪‫‏‫‪‫⁫⁯‍‭⁮⁯‭‍‏⁭‭‬⁯⁭⁫⁫⁯⁯⁫⁬⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200E‫‫‪‫⁯⁬⁭​‎‮⁪‎‭⁮⁫‬⁬⁭‪‌⁭⁭‪⁯⁮⁬​‪⁪‍‏‏⁭⁭​‪‍‪⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202D⁮‍⁮⁭⁪​⁫‏‌⁫‫‍‭⁬‮‎‬⁬⁬‮‎‮‫‬‍⁫‎‍‫‭‮⁯​‌‫‬‭‫‬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200D‏‍‍⁫‌⁭⁮⁬⁪‫‍⁮‌‮⁫‪​‪‎⁬‎⁮‏‏‎⁯‭⁯⁫⁮‌​‬‮‪⁬⁮‏‮([In] int obj0) => Math.Abs(obj0);

    static string \u200E⁬⁮​⁫⁮‪‏‌⁮⁭‬‍⁭‍⁮‮‎‪‎​‪‍‫‏‬‌⁯‪⁯‎⁯‌⁬‎​⁯‫‪‪‮([In] object obj0) => obj0.ToString();

    static string \u206F‎‍‬‎‍‎⁯⁪‪‏⁭‌‌‫‪‪‏​‮⁫⁫⁮‬‎‎‎‭⁭⁭⁪‎⁮‍⁫⁯⁮⁫⁭⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A⁬‏‎‌‍‫‫‮‭⁮‬‮‫​⁮‌‌​‭‭‏⁯⁫⁭‫‮⁯‬‏⁮⁬‮‭‫‮⁫‍⁯‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206A⁯⁪‬‏⁭‏‪⁬⁪‫‮​⁪‪‌⁬⁪​‎‏⁮‍⁭⁫‏‫‬⁮‫⁪⁯‎⁭⁬⁭‌‫⁬⁪‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
