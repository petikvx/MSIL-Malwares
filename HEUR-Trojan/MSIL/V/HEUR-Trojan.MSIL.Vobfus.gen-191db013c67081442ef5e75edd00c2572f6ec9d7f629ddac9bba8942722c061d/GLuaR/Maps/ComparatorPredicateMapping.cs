// Decompiled with JetBrains decompiler
// Type: GLuaR.Maps.ComparatorPredicateMapping
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Adapter;
using c.Connections;
using c.States;
using c.Wrappers;
using GLuaR.Database;
using GLuaR.Exporters;
using GLuaR.Importers;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Xml.Serialization;

namespace GLuaR.Maps
{
  public class ComparatorPredicateMapping
  {
    public List<Param> reader;
    public List<RepositoryInfoWrapper> _Map;
    public List<string> _Task;

    [Obsolete("Use CodeProvider.Load instead", false)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public ComparatorPredicateMapping()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_6;
            case 1:
            case 2:
              this.reader = new List<Param>();
              if (!ComparatorPredicateMapping.RateManager())
              {
                num2 = 5;
                continue;
              }
              goto case 3;
            case 3:
              // ISSUE: explicit constructor call
              base.\u002Ector();
              goto case 1;
            case 5:
              goto label_7;
            default:
              num2 = 1;
              continue;
          }
        }
label_6:
        ImporterMapper.InitAccount();
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool DefineFactory(string reference)
    {
      int num1 = 1;
      if (!ComparatorPredicateMapping.RateManager())
        goto label_12;
label_1:
      bool flag1;
      bool flag2;
      int num2;
      int index;
      if (flag1)
      {
        flag2 = false;
        num2 = 5;
        goto label_11;
      }
      else
        index = 0;
label_3:
      bool flag3 = index < this.reader.Count;
      num2 = 4;
label_11:
      num1 = num2;
label_12:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            flag1 = reference == "global";
            num1 = 6;
            continue;
          case 2:
          case 3:
            goto label_3;
          case 4:
            goto label_4;
          case 5:
          case 7:
            goto label_14;
          case 6:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_4:
      if (!flag3)
      {
        flag2 = false;
        num2 = 7;
        goto label_11;
      }
      else if (this.reader[index]._Mapping == reference)
      {
        flag2 = true;
        goto label_14;
      }
      else
      {
        ++index;
        goto label_3;
      }
label_13:
      num2 = 2;
      goto label_11;
label_14:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public PolicyExporter[] InterruptFactory(string spec)
    {
      int num1 = 5;
      int index;
      PolicyExporter[] policyExporterArray;
      while (true)
      {
        bool flag;
        int num2;
        switch (num1)
        {
          case 0:
          case 5:
            index = 0;
            if (ComparatorPredicateMapping.PrintManager())
            {
              num1 = 2;
              continue;
            }
            goto case 1;
          case 1:
          case 2:
            flag = index < this.reader.Count;
            num2 = 4;
            break;
          case 3:
            policyExporterArray = new PolicyExporter[0];
            num2 = 6;
            break;
          case 4:
            if (flag)
            {
              if (!(this.reader[index]._Mapping == spec))
              {
                ++index;
                goto case 1;
              }
              else
                goto label_3;
            }
            else
              goto case 3;
          case 6:
            goto label_12;
          default:
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto label_12;
        }
        num1 = num2;
      }
label_3:
      policyExporterArray = this.reader[index].m_Resolver.ToArray();
label_12:
      return policyExporterArray;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StubRuleEntry[] QueryFactory(string spec)
    {
      int num1 = 7;
      StubRuleEntry[] array;
      while (true)
      {
        int num2 = num1;
        List<StubRuleEntry> stubRuleEntryList;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              stubRuleEntryList = new List<StubRuleEntry>();
              num2 = 5;
              continue;
            case 1:
            case 5:
              goto label_6;
            case 2:
              goto label_9;
            case 3:
              goto label_4;
            case 4:
              goto label_14;
            case 6:
              goto label_1;
            case 8:
              goto label_16;
            default:
              goto label_12;
          }
        }
label_1:
        int index1 = 0;
label_4:
        int index2;
        if (index1 < this.reader[index2].m_Resolver.Count)
        {
          if (this.reader[index2].m_Resolver[index1] is StubRuleEntry)
          {
            stubRuleEntryList.Add((StubRuleEntry) this.reader[index2].m_Resolver[index1]);
            num1 = 2;
            continue;
          }
          goto label_9;
        }
label_5:
        ++index2;
        num1 = 4;
        continue;
label_6:
        index2 = 0;
        goto label_14;
label_9:
        ++index1;
        goto label_4;
label_12:
        num1 = 3;
        continue;
label_14:
        if (index2 < this.reader.Count)
        {
          if (this.reader[index2]._Mapping == spec)
            num1 = 6;
          else
            goto label_5;
        }
        else
        {
          array = stubRuleEntryList.ToArray();
          num1 = 8;
        }
      }
label_16:
      return array;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Error[] MapFactory(string param)
    {
      int num1 = 4;
      if (true)
        goto label_12;
      else
        goto label_16;
label_11:
      int num2;
      num1 = num2;
label_12:
      int index1;
      int index2;
      bool flag;
      List<Error> errorList;
      Error[] array;
      switch (num1)
      {
        case 0:
        case 2:
          goto label_16;
        case 1:
        case 7:
          index1 = 0;
          num2 = 0;
          goto label_11;
        case 3:
          for (; index2 < this.reader[index1].m_Resolver.Count; ++index2)
          {
            if (this.reader[index1].m_Resolver[index2] is Error)
              errorList.Add((Error) this.reader[index1].m_Resolver[index2]);
          }
          goto case 6;
        case 4:
          errorList = new List<Error>();
          num2 = 7;
          goto label_11;
        case 5:
          if (flag)
          {
            if (this.reader[index1]._Mapping == param)
            {
              index2 = 0;
              num2 = 3;
              goto label_11;
            }
            else
              break;
          }
          else
          {
            array = errorList.ToArray();
            num2 = 8;
            goto label_11;
          }
        case 6:
          break;
        case 8:
          return array;
        default:
          num2 = 6;
          goto label_11;
      }
      ++index1;
label_16:
      flag = index1 < this.reader.Count;
      num2 = 5;
      goto label_11;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StubRuleEntry DisableFactory(string value, string ord)
    {
      int num1 = 5;
      StubRuleEntry stubRuleEntry;
      while (true)
      {
        int num2 = num1;
        int index1;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_5;
            case 1:
            case 2:
              goto label_11;
            case 3:
              if (!flag1)
              {
                stubRuleEntry = (StubRuleEntry) null;
                num2 = 9;
                continue;
              }
              goto label_17;
            case 4:
              goto label_14;
            case 6:
              goto label_4;
            case 7:
            case 9:
              goto label_30;
            case 8:
              index1 = 0;
              if (ComparatorPredicateMapping.PrintManager())
              {
                num2 = 4;
                continue;
              }
              goto case 3;
            default:
              goto label_10;
          }
        }
label_4:
        StubRuleEntry[] stubRuleEntryArray;
        stubRuleEntry = stubRuleEntryArray[index1];
        num1 = 7;
        continue;
label_5:
        bool flag2 = value == "";
        num1 = 2;
        continue;
label_10:
        num1 = 6;
        continue;
label_11:
        if (flag2)
        {
          stubRuleEntryArray = this.QueryFactory("globals");
          num1 = 8;
          continue;
        }
        int index2 = 0;
        goto label_29;
label_14:
        for (; index1 < stubRuleEntryArray.Length; ++index1)
        {
          if (stubRuleEntryArray[index1].bridge == ord)
            goto label_4;
        }
        break;
label_17:
        if (this.reader[index2]._Mapping == value)
        {
          using (List<PolicyExporter>.Enumerator enumerator = this.reader[index2].m_Resolver.GetEnumerator())
          {
label_26:
            while (enumerator.MoveNext())
            {
              StubRuleEntry current = (StubRuleEntry) enumerator.Current;
              int num3 = 3;
              while (true)
              {
                int num4 = num3;
                while (true)
                {
                  switch (num4)
                  {
                    case 0:
                    case 3:
                      if (!(current.bridge == ord))
                        goto label_26;
                      else
                        goto case 1;
                    case 1:
                    case 2:
                      stubRuleEntry = current;
                      if (true)
                      {
                        num4 = 4;
                        continue;
                      }
                      goto label_30;
                    case 4:
                      goto label_30;
                    default:
                      goto label_24;
                  }
                }
label_24:
                num3 = 2;
              }
            }
          }
        }
        ++index2;
label_29:
        flag1 = index2 < this.reader.Count;
        num1 = 3;
      }
      stubRuleEntry = (StubRuleEntry) null;
label_30:
      return stubRuleEntry;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ComparatorPredicateMapping Load(string file)
    {
      int num1 = 0;
      if (ComparatorPredicateMapping.RateManager())
        ;
      ComparatorPredicateMapping predicateMapping1;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            num2 = 3;
            break;
          case 1:
          case 3:
            num2 = 4;
            break;
          case 2:
          case 4:
            goto case 5;
          case 5:
            FileStream fileStream;
            try
            {
              fileStream = File.Open(file, FileMode.Open, FileAccess.Read, FileShare.Read);
            }
            catch (Exception ex)
            {
              int num3 = (int) new IndexerStateStatus(ex).ShowDialog();
              predicateMapping1 = (ComparatorPredicateMapping) null;
              goto label_27;
            }
            XmlSerializer xmlSerializer;
            try
            {
              xmlSerializer = new XmlSerializer(typeof (ComparatorPredicateMapping));
            }
            catch (Exception ex)
            {
              int num4 = (int) new IndexerStateStatus(ex).ShowDialog();
              fileStream.Close();
              predicateMapping1 = (ComparatorPredicateMapping) null;
              goto label_27;
            }
            ComparatorPredicateMapping predicateMapping2;
            try
            {
              predicateMapping2 = (ComparatorPredicateMapping) xmlSerializer.Deserialize((Stream) fileStream);
            }
            catch (Exception ex)
            {
              int num5 = (int) new IndexerStateStatus(ex).ShowDialog();
              fileStream.Close();
              predicateMapping1 = (ComparatorPredicateMapping) null;
              goto label_27;
            }
            foreach (Param obj in predicateMapping2.reader)
            {
              foreach (PolicyExporter policyExporter in obj.m_Resolver)
              {
                int num6 = 2;
                if (true)
                  goto label_14;
label_13:
                policyExporter.m_Status = obj;
                goto label_16;
label_14:
                while (true)
                {
                  switch (num6)
                  {
                    case 0:
                    case 2:
                      goto label_13;
                    case 1:
                    case 3:
                      goto label_16;
                    default:
                      num6 = 3;
                      continue;
                  }
                }
label_16:;
              }
            }
            predicateMapping1 = predicateMapping2;
            if (ComparatorPredicateMapping.PrintManager())
            {
              num1 = 6;
              continue;
            }
            goto case 1;
          case 6:
            goto label_27;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_27;
        }
        num1 = num2;
      }
label_27:
      return predicateMapping1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static ComparatorPredicateMapping Load(
      string file,
      bool suppressErrors)
    {
      int num1 = 4;
      ComparatorPredicateMapping predicateMapping1;
      while (true)
      {
        ComparatorPredicateMapping predicateMapping2;
        List<Param>.Enumerator enumerator;
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            FileStream fileStream;
            try
            {
              fileStream = File.Open(file, FileMode.Open, FileAccess.Read, FileShare.Read);
            }
            catch (Exception ex)
            {
              if (!suppressErrors)
              {
                int num3 = (int) new IndexerStateStatus(ex).ShowDialog();
              }
              predicateMapping1 = (ComparatorPredicateMapping) null;
              goto label_32;
            }
            XmlSerializer xmlSerializer;
            try
            {
              xmlSerializer = new XmlSerializer(typeof (ComparatorPredicateMapping));
            }
            catch (Exception ex)
            {
              if (!suppressErrors)
              {
                int num4 = (int) new IndexerStateStatus(ex).ShowDialog();
              }
              fileStream.Close();
              predicateMapping1 = (ComparatorPredicateMapping) null;
              goto label_32;
            }
            try
            {
              predicateMapping2 = (ComparatorPredicateMapping) xmlSerializer.Deserialize((Stream) fileStream);
            }
            catch (Exception ex)
            {
              if (!suppressErrors)
              {
                int num5 = (int) new IndexerStateStatus(ex).ShowDialog();
              }
              fileStream.Close();
              predicateMapping1 = (ComparatorPredicateMapping) null;
              goto label_32;
            }
            enumerator = predicateMapping2.reader.GetEnumerator();
            goto case 3;
          case 1:
          case 5:
            predicateMapping2 = (ComparatorPredicateMapping) null;
            num2 = 0;
            break;
          case 3:
            try
            {
              while (enumerator.MoveNext())
              {
                Param current = enumerator.Current;
                foreach (PolicyExporter policyExporter in current.m_Resolver)
                {
                  int num6 = 2;
                  while (true)
                  {
                    switch (num6)
                    {
                      case 0:
                      case 2:
                        goto label_23;
                      case 1:
                      case 3:
                        goto label_26;
                      default:
                        if (ComparatorPredicateMapping.PrintManager())
                        {
                          num6 = 3;
                          continue;
                        }
                        goto label_26;
                    }
                  }
label_23:
                  policyExporter.m_Status = current;
label_26:;
                }
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            predicateMapping1 = predicateMapping2;
            num2 = 6;
            break;
          case 4:
            num2 = 5;
            break;
          case 6:
            goto label_32;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_32:
      return predicateMapping1;
    }

    [Obsolete("Should not be called from user code", true)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Save(string file, ComparatorPredicateMapping code)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        FileStream fileStream;
        while (true)
        {
          switch (num2)
          {
            case 0:
              fileStream = File.Create(file);
              int num3 = 4;
              num2 = ComparatorPredicateMapping.RateManager() ? num3 : num3;
              continue;
            case 1:
            case 4:
              goto label_3;
            case 2:
            case 3:
              goto label_7;
            case 5:
              goto label_2;
            default:
              goto label_6;
          }
        }
label_3:
        new XmlSerializer(typeof (ComparatorPredicateMapping)).Serialize((Stream) fileStream, (object) code);
        goto label_7;
label_6:
        num1 = 3;
        continue;
label_7:
        fileStream.Close();
        num1 = 5;
      }
label_2:;
    }

    internal static bool PrintManager() => true;

    internal static bool RateManager() => false;
  }
}
