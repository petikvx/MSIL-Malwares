// Decompiled with JetBrains decompiler
// Type: .
// Assembly: BitGenerator, Version=37.0.2.5583, Culture=neutral, PublicKeyToken=70e4c26ef2031892
// MVID: D3922F89-E00A-4D10-8BC9-9309D5539F14
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan.Win32.Scar.nxii-31823040d8ccb20eab0b8653d01af370a6537017e69ead69f6f7b73d6ef7ac14.exe

using \u0004;
using \u000E;
using \u000F;
using \u0014;
using \u0015;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;

namespace \u0004
{
  internal abstract class \u0011 : 
    \u0013,
    IEnumerable,
    IList,
    ICollection,
    IEnumerable<\u0013>,
    IList<\u0013>,
    ICollection<\u0013>,
    ITypedList,
    IBindingList
  {
    internal ListChangedEventHandler \u0001;
    internal AddingNewEventHandler \u0001;
    private new object \u0001;
    internal bool \u0001;
    [NonSerialized]
    internal static GetString \u0094;

    [SpecialName]
    public void \u0001([In] ListChangedEventHandler obj0) => this.\u0001 = (ListChangedEventHandler) \u007F\u0005.\u001B\u000E((Delegate) this.\u0001, (Delegate) obj0);

    [SpecialName]
    public void \u0002([In] ListChangedEventHandler obj0) => this.\u0001 = (ListChangedEventHandler) \u007F\u0005.\u001C\u000E((Delegate) this.\u0001, (Delegate) obj0);

    [SpecialName]
    protected abstract IList<\u0013> \u0001();

    internal \u0011()
    {
    }

    internal \u0011([In] \u0011 obj0)
      : this()
    {
      \u0006.\u0001((object) obj0, \u0011.\u0094(25768));
      int num = 0;
      foreach (\u0013 obj in (IEnumerable<\u0013>) obj0)
      {
        \u0006.\u0001(num, this, (object) obj, false);
        ++num;
      }
    }

    protected virtual void \u0001([In] AddingNewEventArgs obj0)
    {
label_0:
      AddingNewEventHandler addingNewEventHandler;
      if (true)
        addingNewEventHandler = this.\u0001;
      do
      {
        if (addingNewEventHandler != null)
        {
          if (true)
          {
            if (true)
              \u0080\u0005.\u007E\u001D\u000E((object) addingNewEventHandler, (object) this, obj0);
          }
          else
            goto label_0;
        }
      }
      while (false);
    }

    protected virtual void \u0001([In] ListChangedEventArgs obj0)
    {
      do
      {
        if (true)
          goto label_7;
label_1:
        ListChangedEventHandler changedEventHandler;
        if (true)
        {
          this.\u0001 = true;
          try
          {
            \u0081\u0005.\u007E\u001E\u000E((object) changedEventHandler, (object) this, obj0);
          }
          finally
          {
            do
            {
              this.\u0001 = false;
            }
            while (false);
          }
        }
label_6:
        continue;
label_7:
        changedEventHandler = this.\u0001;
        if (changedEventHandler == null)
          goto label_6;
        else
          goto label_1;
      }
      while (false);
    }

    [SpecialName]
    public override bool \u0001() => this.\u0001().Count > 0;

    [SpecialName]
    public override \u0013 \u0002()
    {
      IList<\u0013> objList1 = this.\u0001();
      IList<\u0013> objList2;
      if (true)
        objList2 = objList1;
      return objList2.Count <= 0 ? (\u0013) null : objList2[0];
    }

    [SpecialName]
    public override \u0013 \u0003()
    {
      IList<\u0013> objList1;
      int num1;
      do
      {
        IList<\u0013> objList2 = this.\u0001();
        if (true)
          objList1 = objList2;
        int num2 = objList1.Count;
        if (true)
          goto label_7;
label_1:
        if (num2 <= 0)
        {
          if (true)
            return (\u0013) null;
          continue;
        }
        continue;
label_7:
        num1 = num2;
        num2 = num1;
        goto label_1;
      }
      while (false);
      return objList1[num1 - 1];
    }

    public override \u0008<\u0013> \u0001() => new \u0008<\u0013>((IEnumerable<\u0013>) this.\u0001());

    internal int \u0001([In] \u0013 obj0) => \u0008.\u0001<\u0013>((IEnumerable<\u0013>) this.\u0001(), obj0, (IEqualityComparer<\u0013>) \u0011.\u0001.\u0001);

    internal virtual void \u0001([In] int obj0, [In] \u0013 obj1, [In] bool obj2)
    {
      IList<\u0013> objList1 = this.\u0001();
      IList<\u0013> objList2;
      if (true)
        objList2 = objList1;
      if (obj0 > objList2.Count)
        throw new ArgumentOutOfRangeException(\u0011.\u0094(12209), \u0011.\u0094(25777));
      \u0006.\u0001(this);
      obj1 = \u0006.\u0001(obj1, this, obj2);
      if (obj0 == 0)
        goto label_5;
label_4:
      \u0013 obj3 = objList2[obj0 - 1];
      goto label_6;
label_5:
      obj3 = (\u0013) null;
label_6:
      \u0013 obj4 = obj3;
      \u0013 obj5 = obj0 == objList2.Count ? (\u0013) null : objList2[obj0];
      this.\u0001(obj1, (\u0013) null);
      obj1.\u0001 = this;
      obj1.\u0001 = obj4;
      if (obj4 != null)
      {
        if (true)
          obj4.\u0002 = obj1;
        else
          goto label_4;
      }
      obj1.\u0002 = obj5;
      if (obj5 != null)
        obj5.\u0001 = obj1;
      objList2.Insert(obj0, obj1);
      if (this.\u0001 == null)
        return;
      this.\u0001(new ListChangedEventArgs(ListChangedType.ItemAdded, obj0));
    }

    internal virtual void \u0001([In] int obj0)
    {
      do
      {
        IList<\u0013> objList = this.\u0001();
        int num1 = obj0;
        int num2;
        int num3;
        while (true)
        {
          num2 = 0;
          if (num2 == 0)
          {
            if (num1 >= num2)
            {
              num3 = obj0;
              if (false)
                num1 = num3;
              else
                goto label_15;
            }
            else
              break;
          }
          else
            goto label_5;
        }
        throw new ArgumentOutOfRangeException(\u0011.\u0094(12209), \u0011.\u0094(25838));
label_5:
        if (num1 >= num2)
          throw new ArgumentOutOfRangeException(\u0011.\u0094(12209), \u0011.\u0094(25867));
        \u0006.\u0001(this);
        \u0013 obj1 = objList[obj0];
        \u0013 obj2 = obj0 == 0 ? (\u0013) null : objList[obj0 - 1];
        \u0013 obj3 = obj0 == objList.Count - 1 ? (\u0013) null : objList[obj0 + 1];
        if (obj2 != null)
          obj2.\u0002 = obj3;
        if (obj3 != null)
          obj3.\u0001 = obj2;
        obj1.\u0001 = (\u0011) null;
        obj1.\u0001 = (\u0013) null;
        obj1.\u0002 = (\u0013) null;
        objList.RemoveAt(obj0);
        if (this.\u0001 != null)
          this.\u0001(new ListChangedEventArgs(ListChangedType.ItemDeleted, obj0));
        continue;
label_15:
        num2 = objList.Count;
        num1 = num3;
        goto label_5;
      }
      while (false);
    }

    internal virtual bool \u0001([In] \u0013 obj0)
    {
      if (true)
        goto label_6;
label_5:
      return false;
label_6:
      int num1 = this.\u0001(obj0);
      int num2;
      int num3;
      while (true)
      {
        num2 = num1;
        num3 = num2;
        if (false)
          num1 = num3;
        else
          break;
      }
      if (num3 >= 0)
      {
        while (true)
        {
          this.\u0001(num2);
          if (true)
            return true;
        }
        goto label_5;
      }
      else
        goto label_5;
    }

    internal virtual \u0013 \u0001([In] int obj0) => this.\u0001()[obj0];

    internal virtual void \u0001([In] int obj0, [In] \u0013 obj1)
    {
      IList<\u0013> objList = this.\u0001();
      if (obj0 >= 0)
        goto label_2;
label_1:
      throw new ArgumentOutOfRangeException(\u0011.\u0094(12209), \u0011.\u0094(25838));
label_2:
      if (true)
        goto label_25;
label_23:
      this.\u0001(new ListChangedEventArgs(ListChangedType.ItemChanged, obj0));
      return;
label_25:
      \u0013 obj2;
      if (obj0 >= objList.Count)
      {
        if (true)
          throw new ArgumentOutOfRangeException(\u0011.\u0094(12209), \u0011.\u0094(25867));
        goto label_19;
      }
      else
      {
        obj2 = objList[obj0];
        if (\u0006.\u0001(obj2, obj1))
          return;
        \u0006.\u0001(this);
        obj1 = \u0006.\u0001(obj1, this, false);
        if (true)
          this.\u0001(obj1, obj2);
      }
label_10:
      int num1 = obj0;
      \u0013 obj3;
      int num2;
      while (true)
      {
        obj3 = num1 == 0 ? (\u0013) null : objList[obj0 - 1];
        num2 = obj0;
        if (false)
          num1 = num2;
        else
          break;
      }
      int num3 = objList.Count - 1;
      \u0013 obj4;
      if (num2 != num3)
      {
        if (true)
        {
          if (true)
            obj4 = objList[obj0 + 1];
          else
            goto label_1;
        }
        else
          goto label_18;
      }
      else
        obj4 = (\u0013) null;
      \u0013 obj5 = obj4;
      obj1.\u0001 = this;
      obj1.\u0001 = obj3;
      if (obj3 == null)
        goto label_19;
label_18:
      obj3.\u0002 = obj1;
label_19:
      obj1.\u0002 = obj5;
      if (obj5 != null)
        obj5.\u0001 = obj1;
      objList[obj0] = obj1;
      obj2.\u0001 = (\u0011) null;
      obj2.\u0001 = (\u0013) null;
      obj2.\u0002 = (\u0013) null;
      if (true)
      {
        if (this.\u0001 != null)
          goto label_23;
      }
      else
        goto label_10;
    }

    internal virtual void \u0001()
    {
      \u0006.\u0001(this);
      do
      {
        if (true)
          goto label_15;
label_11:
        IList<\u0013> objList;
        objList.Clear();
        if (true)
          continue;
        goto label_14;
label_15:
        objList = this.\u0001();
        if (true)
        {
          IEnumerator<\u0013> enumerator = objList.GetEnumerator();
          try
          {
            while (\u0015\u0002.\u007E\u009E\u0004((object) enumerator))
            {
              \u0013 current = enumerator.Current;
              current.\u0001 = (\u0011) null;
              current.\u0001 = (\u0013) null;
              current.\u0002 = (\u0013) null;
            }
            goto label_11;
          }
          finally
          {
            do
            {
              if (enumerator != null)
                \u0011.\u007E\u0007\u0002((object) enumerator);
            }
            while (false);
          }
        }
        else
          goto label_5;
      }
      while (false);
      goto label_13;
label_5:
      return;
label_13:
      if (this.\u0001 == null)
        return;
label_14:
      this.\u0001(new ListChangedEventArgs(ListChangedType.Reset, -1));
    }

    internal virtual void \u0002([In] \u0013 obj0, [In] \u0013 obj1)
    {
      if (obj0 == null || obj0.\u0001() != this)
        return;
      do
      {
        if (true)
          goto label_6;
label_4:
        if (true)
          continue;
        goto label_7;
label_6:
        int num = this.\u0001(obj0);
label_7:
        this.\u0001(num, obj1);
        goto label_4;
      }
      while (false);
    }

    internal virtual bool \u0002([In] \u0013 obj0) => this.\u0001(obj0) != -1;

    internal virtual void \u0001([In] Array obj0, [In] int obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(\u0011.\u0094(25924));
      int num1 = obj1;
      do
      {
        if (true)
        {
          int num2;
          for (int index = 0; num1 >= index; num1 = num2)
          {
            num2 = obj1;
            int num3 = \u001F.\u007E\u0019\u0003((object) obj0);
            if (false)
            {
              index = num3;
            }
            else
            {
              if (num2 >= num3 && obj1 != 0)
                throw new ArgumentException(\u0011.\u0094(25987));
              num1 = this.get_Count();
              goto label_11;
            }
          }
          throw new ArgumentOutOfRangeException(\u0011.\u0094(25933), \u0011.\u0094(25950));
        }
label_11:;
      }
      while (false);
      int num4 = \u001F.\u007E\u0019\u0003((object) obj0);
      int num5;
      while (true)
      {
        int num6 = obj1;
        num5 = num4 - num6;
        if (false)
          num4 = num5;
        else
          break;
      }
      if (num1 > num5)
        throw new ArgumentException(\u0011.\u0094(26068));
      int num7 = 0;
      IEnumerator<\u0013> enumerator = this.\u0001().GetEnumerator();
      try
      {
        while (\u0015\u0002.\u007E\u009E\u0004((object) enumerator))
        {
          \u0013 current = enumerator.Current;
          \u0082\u0005.\u007E\u001F\u000E((object) obj0, (object) current, obj1 + num7);
          ++num7;
        }
      }
      finally
      {
        if (enumerator == null)
          goto label_23;
label_22:
        \u0011.\u007E\u0007\u0002((object) enumerator);
label_23:
        if (false)
          goto label_22;
      }
    }

    internal virtual void \u0001([In] \u0013 obj0, [In] \u0013 obj1)
    {
      \u0013 obj = obj0;
      string str = \u0011.\u0094(26250);
      if (true)
        \u0006.\u0001((object) obj, str);
      if (obj0.\u0001() == JTokenType.Property)
        throw new ArgumentException(\u0002.\u0002.\u0001(\u0011.\u0094(26255), (IFormatProvider) \u0098.\u0002\u0004(), (object) \u0001\u0002.\u007E\u0017\u0004((object) obj0), (object) \u0001\u0002.\u0017\u0004((object) this)));
    }

    public virtual void Add([In] object obj0) => \u0006.\u0001(this.\u0001().Count, this, obj0, false);

    internal void \u0001([In] \u0013 obj0) => \u0006.\u0001(this.\u0001().Count, this, (object) obj0, true);

    string ITypedList.\u0001([In] PropertyDescriptor[] obj0) => string.Empty;

    PropertyDescriptorCollection ITypedList.\u0001(
      [In] PropertyDescriptor[] obj0)
    {
      ICustomTypeDescriptor customTypeDescriptor;
      do
      {
        if (true)
          goto label_6;
label_1:
        continue;
label_6:
        customTypeDescriptor = base.\u0002() as ICustomTypeDescriptor;
        goto label_1;
      }
      while (false);
      if (customTypeDescriptor == null)
        goto label_4;
label_2:
      if (true)
        return \u0083\u0005.\u007E\u007F\u000E((object) customTypeDescriptor);
label_4:
      if (true)
        return (PropertyDescriptorCollection) null;
      goto label_2;
    }

    int IList<\u0013>.\u0002([In] \u0013 obj0) => this.\u0001(obj0);

    void IList<\u0013>.\u0002([In] int obj0, [In] \u0013 obj1) => this.\u0001(obj0, obj1, false);

    void IList<\u0013>.\u0002([In] int obj0) => this.\u0001(obj0);

    [SpecialName]
    \u0013 IList<\u0013>.\u0002([In] int obj0) => this.\u0001(obj0);

    [SpecialName]
    void IList<\u0013>.\u0003([In] int obj0, [In] \u0013 obj1) => this.\u0001(obj0, obj1);

    void ICollection<\u0013>.\u0002([In] \u0013 obj0) => this.Add((object) obj0);

    void ICollection<\u0013>.\u0002() => this.\u0001();

    bool ICollection<\u0013>.\u0003([In] \u0013 obj0) => this.\u0002(obj0);

    void ICollection<\u0013>.\u0001([In] \u0013[] obj0, [In] int obj1) => this.\u0001((Array) obj0, obj1);

    [SpecialName]
    bool ICollection<\u0013>.\u0003() => false;

    bool ICollection<\u0013>.\u0004([In] \u0013 obj0) => this.\u0001(obj0);

    int IList.\u0001([In] object obj0)
    {
      this.Add((object) \u0006.\u0001(obj0, this));
      return this.get_Count() - 1;
    }

    void IList.\u0003() => this.\u0001();

    bool IList.\u0001([In] object obj0) => this.\u0002(\u0006.\u0001(obj0, this));

    int IList.\u0002([In] object obj0) => this.\u0001(\u0006.\u0001(obj0, this));

    void IList.\u0001([In] int obj0, [In] object obj1) => this.\u0001(obj0, \u0006.\u0001(obj1, this), false);

    [SpecialName]
    bool IList.\u0004() => false;

    [SpecialName]
    bool IList.\u0005() => false;

    void IList.\u0001([In] object obj0) => this.\u0001(\u0006.\u0001(obj0, this));

    void IList.\u0003([In] int obj0) => this.\u0001(obj0);

    [SpecialName]
    object IList.\u0001([In] int obj0) => (object) this.\u0001(obj0);

    [SpecialName]
    void IList.\u0002([In] int obj0, [In] object obj1) => this.\u0001(obj0, \u0006.\u0001(obj1, this));

    void ICollection.\u0002([In] Array obj0, [In] int obj1) => this.\u0001(obj0, obj1);

    [SpecialName]
    public int get_Count() => this.\u0001().Count;

    [SpecialName]
    bool ICollection.\u0006() => false;

    [SpecialName]
    object ICollection.\u0001()
    {
      if (this.\u0001 == null)
      {
        object obj = \u0080\u0002.\u0091\u0005(ref this.\u0001, new object(), (object) null);
      }
      return this.\u0001;
    }

    void IBindingList.\u0001([In] PropertyDescriptor obj0)
    {
    }

    object IBindingList.\u0002()
    {
      AddingNewEventArgs addingNewEventArgs = new AddingNewEventArgs();
      this.\u0001(addingNewEventArgs);
      if (\u0084\u0002.\u007E\u0097\u0005((object) addingNewEventArgs) == null)
        throw new JsonException(\u0002.\u0002.\u0001(\u0011.\u0094(26288), (IFormatProvider) \u0098.\u0002\u0004(), (object) \u0001\u0002.\u0017\u0004((object) this)));
      if (!(\u0084\u0002.\u007E\u0097\u0005((object) addingNewEventArgs) is \u0013))
      {
        // ISSUE: type reference
        throw new JsonException(\u0002.\u0002.\u0001(\u0011.\u0094(26353), (IFormatProvider) \u0098.\u0002\u0004(), (object) \u0004\u0002.\u0084\u0004(__typeref (\u0013))));
      }
      \u0013 obj = (\u0013) \u0084\u0002.\u007E\u0097\u0005((object) addingNewEventArgs);
      this.Add((object) obj);
      return (object) obj;
    }

    [SpecialName]
    bool IBindingList.\u0007() => true;

    [SpecialName]
    bool IBindingList.\u0008() => true;

    [SpecialName]
    bool IBindingList.\u000E() => true;

    void IBindingList.\u0001([In] PropertyDescriptor obj0, [In] ListSortDirection obj1) => throw new NotSupportedException();

    int IBindingList.\u0001([In] PropertyDescriptor obj0, [In] object obj1) => throw new NotSupportedException();

    [SpecialName]
    bool IBindingList.\u000F() => false;

    void IBindingList.\u0002([In] PropertyDescriptor obj0)
    {
    }

    void IBindingList.\u0004() => throw new NotSupportedException();

    [SpecialName]
    ListSortDirection IBindingList.\u0001() => ListSortDirection.Ascending;

    [SpecialName]
    PropertyDescriptor IBindingList.\u0001() => (PropertyDescriptor) null;

    [SpecialName]
    bool IBindingList.\u0010() => true;

    [SpecialName]
    bool IBindingList.\u0011() => false;

    [SpecialName]
    bool IBindingList.\u0012() => false;

    static \u0011() => Strings.CreateGetStringDelegate(typeof (\u0011));

    private new sealed class \u0001 : IEqualityComparer<\u0013>
    {
      public static readonly \u0011.\u0001 \u0001;
      [NonSerialized]
      internal static GetString \u009D;

      public bool \u0001([In] \u0013 obj0, [In] \u0013 obj1) => obj0 == obj1;

      public int \u0001([In] \u0013 obj0) => obj0 == null ? 0 : \u001F.\u007E\u0014\u0003((object) obj0);

      static \u0001()
      {
        if (true)
        {
          if (true)
            Strings.CreateGetStringDelegate(typeof (\u0011.\u0001));
          else
            goto label_4;
        }
        bool flag = false;
label_4:
        Assembly assembly = \u0013.\u008B\u0002();
        if (!\u0006.\u0001(\u0001.\u007E\u0002((object) assembly), true, out flag) || !flag || !global::\u0014.\u007E\u008C\u0002((object) \u0001.\u007E\u0003((object) assembly), \u0011.\u0001.\u009D(2776)))
          throw new SecurityException(\u0011.\u0001.\u009D(2801));
        \u0011.\u0001.\u0001 = new \u0011.\u0001();
      }
    }
  }
}
