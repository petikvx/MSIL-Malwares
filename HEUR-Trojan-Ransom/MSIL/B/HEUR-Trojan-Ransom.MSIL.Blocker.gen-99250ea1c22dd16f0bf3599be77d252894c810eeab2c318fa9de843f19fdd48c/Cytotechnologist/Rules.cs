// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: IClientChannelSinkSta, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: C2D4B9C8-45F5-4E7C-86BD-063D9CE5A365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-99250ea1c22dd16f0bf3599be77d252894c810eeab2c318fa9de843f19fdd48c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 576959618;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 881588004)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -495214519 ^ -521310742;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1320922804;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1074153631)) % 5U)
        {
          case 1:
            num1 = (int) num2 * -523780846 ^ 1135111474;
            continue;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1028095258 ^ -1569815377;
            continue;
          case 3:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -569449249 ^ 1666502297;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 795478511;
      bool flag;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 970602920)) % 9U)
        {
          case 1:
            int num3 = !flag ? -494384265 : (num3 = -25460166);
            num1 = num3 ^ (int) num2 * -424759012;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -2061439614 ^ -831443357;
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * -1567290434 ^ -436222065;
            continue;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * -809884404 ^ 516005940;
            continue;
          case 6:
            riskChances = numArray;
            num1 = (int) num2 * 825956061 ^ -1623873194;
            continue;
          case 7:
            flag = aIndex < numArray.Length;
            num1 = 1980613590;
            continue;
          case 8:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 408703786;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -754218226;
      int aIndex1;
      List<Card> cardList;
      int aIndex2;
      JSONNode jsonNode;
      bool flag1;
      int num2;
      Card[] array;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -163912996)) % 21U)
        {
          case 0:
            ++aIndex2;
            num1 = (int) num3 * 357571835 ^ 673565005;
            continue;
          case 1:
            jsonNode = json[aIndex2];
            num1 = -1896315411;
            continue;
          case 2:
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * -1129833820 ^ 9483495;
            continue;
          case 3:
            array = cardList.ToArray();
            num1 = (int) num3 * -1424898725 ^ -404636619;
            continue;
          case 4:
            int num4 = !flag2 ? -1404688394 : (num4 = -921751976);
            num1 = num4 ^ (int) num3 * -2016559631;
            continue;
          case 5:
            goto label_1;
          case 6:
            flag2 = aIndex2 < count;
            num1 = -627083166;
            continue;
          case 7:
            int num5 = !flag1 ? -763103251 : (num5 = -1311061864);
            num1 = num5 ^ (int) num3 * -1057121844;
            continue;
          case 8:
            num1 = (int) num3 * -1743161103 ^ 584533117;
            continue;
          case 9:
            num1 = (int) num3 * 1433841637 ^ -1246949357;
            continue;
          case 10:
            aIndex1 = 0;
            num1 = (int) num3 * -168054798 ^ -1939978260;
            continue;
          case 11:
            num1 = -513329662;
            continue;
          case 12:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = -1882380423;
            continue;
          case 13:
            num1 = -174944370;
            continue;
          case 14:
            ++num2;
            num1 = (int) num3 * -1503003714 ^ 390725691;
            continue;
          case 16:
            ++aIndex1;
            num1 = (int) num3 * 1470409522 ^ 858025744;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * 236624656 ^ 1208088499;
            continue;
          case 18:
            int num6;
            num1 = num6 = num2 >= jsonNode[aIndex1].AsInt ? -1365693060 : (num6 = -856492180);
            continue;
          case 19:
            bool flag3 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -1065533712;
            continue;
          case 20:
            num1 = (int) num3 * -1163239385 ^ -1415613234;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -808994592;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -17498883)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u206E‏⁬‫‫⁫‪‫‫‭‭‍⁮‪‌‬‪‍‍‌⁫‮‎⁮‎‮⁫⁫‌‪⁮‪‭‍‬‎⁫​‏‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 22430194 ^ 1844901377;
            continue;
          case 2:
            num1 = (int) num2 * -94678427 ^ 883759036;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -1463932195;
      Card card1;
      int num2;
      int index;
      Card[] cards;
      string str2;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -2014844399)) % 16U)
        {
          case 0:
            goto label_1;
          case 1:
            str2 = Rules.\u202D‫⁮‌⁮‫⁭‌‫⁬⁯⁪⁪‌‌⁮‭‍⁫‍‏⁮‪‏‬⁬‌‍‏‪‌‏‭⁭⁭‎​‍‌‮(str1, "\n]");
            num1 = (int) num3 * -110412933 ^ 767117616;
            continue;
          case 2:
            num1 = (int) num3 * 1116567789 ^ 442035251;
            continue;
          case 4:
            int num4 = !flag ? 1449466871 : (num4 = 754127372);
            num1 = num4 ^ (int) num3 * -1983414390;
            continue;
          case 5:
            str1 = Rules.\u202D‫⁮‌⁮‫⁭‌‫⁬⁯⁪⁪‌‌⁮‭‍⁫‍‏⁮‪‏‬⁬‌‍‏‪‌‏‭⁭⁭‎​‍‌‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -1000178172 ^ 697230411;
            continue;
          case 6:
            index = 0;
            num1 = (int) num3 * -1072275485 ^ 1655017441;
            continue;
          case 7:
            num1 = (int) num3 * -551201134 ^ -1852884844;
            continue;
          case 8:
            int num5;
            num1 = num5 = index < cards.Length ? -457033256 : (num5 = -2077169856);
            continue;
          case 9:
            card1 = cards[index];
            num1 = -1448033572;
            continue;
          case 10:
            num1 = (int) num3 * 1288418463 ^ 826263780;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * -1560760936 ^ 1605970465;
            continue;
          case 12:
            num2 = 0;
            num1 = (int) num3 * -560893371 ^ 174024162;
            continue;
          case 13:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 1902683430 ^ -1917863973;
            continue;
          case 14:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206A⁬‎‫‬‏⁫⁭​⁬⁫⁪‬⁫‫‎⁯⁯⁯​⁪‭⁯‏‏​‍⁮‎⁭‬⁯⁯⁭‮⁫⁫‪⁮‏‮((object) card2) : (string) null;
            str1 = Rules.\u206E⁬⁬‍⁫‫⁬‪‍⁭​⁫‍‬‪‏‏⁯‌‬‍‪​⁮‭⁫⁫‏⁮‍⁭​‎‏⁪⁭⁯‭‬⁫‮(str3, str4, " ");
            num1 = -1314716314;
            continue;
          case 15:
            cards = this.Cards;
            num1 = (int) num3 * 1471839731 ^ 845075978;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202D‫⁮‌⁮‫⁭‌‫⁬⁯⁪⁪‌‌⁮‭‍⁫‍‏⁮‪‏‬⁬‌‍‏‪‌‏‭⁭⁭‎​‍‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200F‮‍‮‮⁯⁮‬⁪⁬​​​‫‬‍‪‫‭⁯‌‍‏​‬⁭‪⁭‮‬‎⁪⁫‫‮⁯‎‭⁯‮()));
      int index = 1;
label_1:
      int num1 = -50009148;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -36019240)) % 7U)
        {
          case 0:
            flag = index < this.RiskChances.Length;
            num1 = -1109323145;
            continue;
          case 1:
            num1 = (int) num2 * -795515020 ^ 1745186471;
            continue;
          case 2:
            goto label_1;
          case 3:
            str2 = Rules.\u202D‫⁮‌⁮‫⁭‌‫⁬⁯⁪⁪‌‌⁮‭‍⁫‍‏⁮‪‏‬⁬‌‍‏‪‌‏‭⁭⁭‎​‍‌‮(str1, " ]");
            num1 = (int) num2 * -1896358048 ^ 1792875713;
            continue;
          case 4:
            int num3 = flag ? -1265598037 : (num3 = -1507408501);
            num1 = num3 ^ (int) num2 * -482512393;
            continue;
          case 5:
            str1 = Rules.\u206E⁬⁬‍⁫‫⁬‪‍⁭​⁫‍‬‪‏‏⁯‌‬‍‪​⁮‭⁫⁫‏⁮‍⁭​‎‏⁪⁭⁯‭‬⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200F‮‍‮‮⁯⁮‬⁪⁬​​​‫‬‍‪‫‭⁯‌‍‏​‬⁭‪⁭‮‬‎⁪⁫‫‮⁯‎‭⁯‮()));
            ++index;
            num1 = -1914593769;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    static string \u206E‏⁬‫‫⁫‪‫‫‭‭‍⁮‪‌‬‪‍‍‌⁫‮‎⁮‎‮⁫⁫‌‪⁮‪‭‍‬‎⁫​‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202D‫⁮‌⁮‫⁭‌‫⁬⁯⁪⁪‌‌⁮‭‍⁫‍‏⁮‪‏‬⁬‌‍‏‪‌‏‭⁭⁭‎​‍‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206A⁬‎‫‬‏⁫⁭​⁬⁫⁪‬⁫‫‎⁯⁯⁯​⁪‭⁯‏‏​‍⁮‎⁭‬⁯⁯⁭‮⁫⁫‪⁮‏‮([In] object obj0) => obj0.ToString();

    static string \u206E⁬⁬‍⁫‫⁬‪‍⁭​⁫‍‬‪‏‏⁯‌‬‍‪​⁮‭⁫⁫‏⁮‍⁭​‎‏⁪⁭⁯‭‬⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200F‮‍‮‮⁯⁮‬⁪⁬​​​‫‬‍‪‫‭⁯‌‍‏​‬⁭‪⁭‮‬‎⁪⁫‫‮⁯‎‭⁯‮() => CultureInfo.InvariantCulture;
  }
}
