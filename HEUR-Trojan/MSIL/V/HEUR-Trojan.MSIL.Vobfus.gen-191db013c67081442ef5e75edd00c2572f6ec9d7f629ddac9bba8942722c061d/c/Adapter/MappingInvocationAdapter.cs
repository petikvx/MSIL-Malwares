// Decompiled with JetBrains decompiler
// Type: c.Adapter.MappingInvocationAdapter
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using GLuaR.Importers;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace c.Adapter
{
  [XmlInclude(typeof (MappingInvocationAdapter.AdvisorStateStatus))]
  public class MappingInvocationAdapter
  {
    [XmlIgnore]
    public ListViewItem _Advisor;
    private MappingInvocationAdapter.AdvisorStateStatus filter;
    private bool m_Model;
    private string m_Test;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public MappingInvocationAdapter()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_7;
            case 1:
              goto label_5;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_6;
            case 6:
              goto label_8;
            default:
              num2 = 1;
              continue;
          }
        }
label_1:
        this.filter = MappingInvocationAdapter.AdvisorStateStatus.Normal;
        this.m_Model = false;
label_5:
        this.m_Test = "Enter your task name here";
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this._Advisor.SubItems.Add("");
        this._Advisor.SubItems.Add("");
        num1 = 6;
        continue;
label_6:
        this._Advisor = new ListViewItem();
        num1 = 4;
        continue;
label_7:
        ImporterMapper.InitAccount();
        num1 = 3;
      }
label_8:;
    }

    public MappingInvocationAdapter.AdvisorStateStatus Priority
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.filter;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        this.filter = value;
        this._Advisor.SubItems[1].Text = this.filter.ToString();
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool PopField() => this.m_Model;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void NewField(bool verifyvar1)
    {
      int num = 2;
      if (MappingInvocationAdapter.CountManager())
        goto label_5;
label_1:
      this.m_Model = verifyvar1;
      num = 3;
label_5:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 3:
            if (this._Advisor.Checked == this.m_Model)
              goto label_4;
            else
              goto case 4;
          case 4:
            this._Advisor.Checked = this.m_Model;
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num = 4;
            continue;
        }
      }
label_4:
      return;
label_7:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string RevertField() => this.m_Test;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void EnableWrapper(string res)
    {
      this.m_Test = res;
      this._Advisor.SubItems[2].Text = this.m_Test;
    }

    internal static bool CountManager() => true;

    internal static bool PatchManager() => false;

    public enum AdvisorStateStatus
    {
      Later,
      ToDo,
      Normal,
      LessImportant,
      MoreImportant,
    }
  }
}
