// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.Notation
// Assembly: 司6, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E96108F1-63B0-49D9-ABCC-EB6314F0AFE2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-81e7927ab5ca518d06687dc18d5c4df22198011494322486e562136344d2513b.exe

using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class Notation
  {
    public Square from;
    public Square to;

    public string Move => Notation.\u200B​⁯⁫⁯⁫‌⁮‬⁮‍‭⁭‌‪‭‌‏‏‍⁭‮⁫⁮‍‍⁫​⁭⁪​‌‏‏⁯‍⁮‬⁬‫‮(this.from.CurrentSquare, \u003CModule\u003E.\u200C‏‮‬‮⁭‎⁯‎‫‏⁬⁯⁬⁬‏‌‏⁪‬⁫‎‫⁮‮‎‎‏‮‎‭⁬‫⁯⁬⁭⁮‎‪‎‮<string>(3469096048U), this.to.CurrentSquare);

    public Notation(Square f, Square t, Board bo)
    {
label_1:
      int num1 = -1380810080;
      Square square1;
      Square square2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -450771618)) % 9U)
        {
          case 1:
            num1 = (int) num2 * -1640537580 ^ -1621035635;
            continue;
          case 2:
            square2 = new Square(t.File, t.Rank, bo);
            square1.Piece = new ChessPiece(f, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 763882299 ^ 612661376;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.from = square1;
            num1 = (int) num2 * 911090457 ^ -204442046;
            continue;
          case 5:
            square2.Piece = new ChessPiece(t, t.Piece.Kind, t.Piece.Color);
            num1 = (int) num2 * 1392062213 ^ -2118794770;
            continue;
          case 6:
            square1 = new Square(f.File, f.Rank, bo);
            num1 = (int) num2 * -1715531456 ^ -1857736988;
            continue;
          case 7:
            num1 = (int) num2 * -355793478 ^ 1457983901;
            continue;
          case 8:
            num1 = (int) num2 * 1660916212 ^ -1634142493;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      this.to = square2;
    }

    public override string ToString()
    {
      string move = this.Move;
label_1:
      int num1 = 136035077;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1311644285)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1428391678 ^ -17875478;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return move;
    }

    static string \u200B​⁯⁫⁯⁫‌⁮‬⁮‍‭⁭‌‪‭‌‏‏‍⁭‮⁫⁮‍‍⁫​⁭⁪​‌‏‏⁯‍⁮‬⁬‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }
  }
}
