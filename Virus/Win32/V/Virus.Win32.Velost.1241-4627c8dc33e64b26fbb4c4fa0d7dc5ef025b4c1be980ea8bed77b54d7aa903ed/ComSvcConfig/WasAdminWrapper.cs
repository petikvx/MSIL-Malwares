// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.WasAdminWrapper
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.DirectoryServices;
using System.Runtime.InteropServices;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal static class WasAdminWrapper
  {
    private const string webService = "IIS://localhost/w3svc";
    private const string defaultWebServer = "1";

    public static string DefaultWebServer => "IIS://localhost/w3svc/1";

    public static bool IsIISInstalled()
    {
      try
      {
        IEnumerator enumerator = new DirectoryEntry("IIS://localhost/w3svc").Children.GetEnumerator();
        try
        {
          if (enumerator.MoveNext())
          {
            DirectoryEntry current = (DirectoryEntry) enumerator.Current;
            return true;
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            disposable.Dispose();
        }
      }
      catch (COMException ex)
      {
        return false;
      }
      return true;
    }

    public static string[] GetWebServerNames()
    {
      if (!WasAdminWrapper.IsIISInstalled())
        return (string[]) null;
      try
      {
        List<string> stringList = new List<string>();
        foreach (DirectoryEntry child in new DirectoryEntry("IIS://localhost/w3svc").Children)
        {
          if (child.SchemaClassName.ToUpperInvariant() == "IISWEBSERVER")
            stringList.Add("IIS://localhost/w3svc/" + child.Name);
        }
        return stringList.ToArray();
      }
      catch (COMException ex)
      {
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotGetWebServersIgnoringWas", (object) ex.ErrorCode, (object) ex.Message));
        return (string[]) null;
      }
    }

    public static string[] GetWebDirectoryNames(string webServer)
    {
      if (!WasAdminWrapper.IsIISInstalled())
        return (string[]) null;
      try
      {
        List<string> stringList = new List<string>();
        foreach (DirectoryEntry child1 in new DirectoryEntry(webServer).Children)
        {
          if (child1.SchemaClassName.ToUpperInvariant() == "IISWEBDIRECTORY" || child1.SchemaClassName.ToUpperInvariant() == "IISWEBVIRTUALDIR")
          {
            stringList.Add(child1.Name);
            if (child1.Name.ToUpperInvariant() == "ROOT")
            {
              foreach (DirectoryEntry child2 in child1.Children)
              {
                if (child2.SchemaClassName.ToUpperInvariant() == "IISWEBDIRECTORY" || child2.SchemaClassName.ToUpperInvariant() == "IISWEBVIRTUALDIR")
                  stringList.Add("ROOT/" + child2.Name);
              }
            }
          }
        }
        return stringList.ToArray();
      }
      catch (COMException ex)
      {
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotGetWebDirectoryForServer", (object) webServer, (object) ex.ErrorCode, (object) ex.Message));
        return (string[]) null;
      }
    }

    public static bool GetWebDirectoryPath(
      string webServer,
      string webDirectory,
      out string webDirectoryPath)
    {
      webDirectoryPath = (string) null;
      if (!WasAdminWrapper.IsIISInstalled())
        return false;
      if (!webDirectory.ToUpperInvariant().StartsWith("ROOT", StringComparison.Ordinal))
        webDirectory = "root/" + webDirectory;
      string[] webDirectoryNames = WasAdminWrapper.GetWebDirectoryNames(webServer);
      if (webDirectoryNames == null)
        return false;
      bool flag = false;
      foreach (string str in webDirectoryNames)
      {
        if (str.ToUpperInvariant() == webDirectory.ToUpperInvariant())
        {
          flag = true;
          break;
        }
      }
      if (!flag)
        return false;
      DirectoryEntry directoryEntry = new DirectoryEntry(webServer + "/" + webDirectory);
      try
      {
        if (!directoryEntry.Properties.Contains("Path"))
          return false;
        webDirectoryPath = (string) directoryEntry.Properties["Path"].Value;
        return true;
      }
      catch (COMException ex)
      {
        ToolConsole.WriteWarning(Microsoft.Tools.ServiceModel.SR.GetString("CannotGetWebDirectoryPathOnWebDirOfWebServIgnoring", (object) webServer, (object) webDirectory, (object) ex.ErrorCode, (object) ex.Message));
        return false;
      }
    }
  }
}
