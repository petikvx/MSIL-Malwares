// Decompiled with JetBrains decompiler
// Type: GLuaR.Maps.StatePredicateMapping
// Assembly: c, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCB3E154-F36D-403E-8019-8861E9AEB8FC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Vobfus.gen-191db013c67081442ef5e75edd00c2572f6ec9d7f629ddac9bba8942722c061d.exe

using c.Adapter;
using c.Configurations;
using c.Filter;
using Fireball.Docking;
using GLuaR.Importers;
using GLuaR.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace GLuaR.Maps
{
  public class StatePredicateMapping : DockableWindow
  {
    private readonly InterceptorThreadFilter dispatcherField;
    private IContainer candidateField;
    private ToolStrip messageField;
    private ToolStripButton _ProcField;
    private ToolStripButton _FactoryWrapper;
    private ToolStripButton m_FieldWrapper;
    private ColumnHeader m_WrapperWrapper;
    public ListView _MapperWrapper;
    private ColumnHeader m_RuleWrapper;
    private ColumnHeader definitionWrapper;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StatePredicateMapping(InterceptorThreadFilter init)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              ImporterMapper.InitAccount();
              num2 = 1;
              continue;
            case 1:
              this.candidateField = (IContainer) null;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 2:
            case 4:
              goto label_2;
            case 5:
              goto label_6;
            case 6:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_2:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.PushRule();
        goto label_6;
label_5:
        num1 = 5;
        continue;
label_6:
        this.dispatcherField = init;
        num1 = 6;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallRule(object ident, EventArgs cfg)
    {
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ManageRule(object task, EventArgs caller) => this.dispatcherField.WriteMapper();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateRule(object config, EventArgs ord)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_9;
            case 1:
            case 3:
              goto label_5;
            case 4:
              if (!flag)
              {
                int num3 = (int) ConsumerConfigConfig.EnableFactory("You need to select a task to edit!");
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_9;
              }
              else
              {
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_12;
              }
            case 5:
              goto label_1;
            case 6:
              goto label_7;
            default:
              int num4 = 1;
              num2 = StatePredicateMapping.SetupRegistry() ? num4 : num4;
              continue;
          }
        }
label_9:
        flag = this._MapperWrapper.SelectedItems.Count > 0;
        num1 = 4;
      }
label_1:
      if (this._MapperWrapper.SelectedItems.Count <= 1)
      {
        this.dispatcherField.RegisterMapper(this._MapperWrapper.SelectedItems[0]);
        return;
      }
      goto label_5;
label_7:
      return;
label_5:
      int num5 = (int) ConsumerConfigConfig.EnableFactory("You can only edit 1 task at a time!");
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReflectRule(object info, EventArgs ivk)
    {
      int num1 = 0;
      if (true)
        goto label_4;
label_1:
      bool flag;
      int num2;
      if (!flag)
      {
        int num3 = (int) ConsumerConfigConfig.EnableFactory("You need to select a task to delete!");
        num2 = 5;
      }
      else
        goto label_7;
label_3:
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
            flag = this._MapperWrapper.SelectedItems.Count > 0;
            if (StatePredicateMapping.TestRegistry())
            {
              num1 = 3;
              continue;
            }
            goto label_7;
          case 1:
          case 3:
            goto label_1;
          case 2:
          case 4:
            goto label_7;
          case 5:
            goto label_2;
          default:
            goto label_5;
        }
      }
label_2:
      return;
label_5:
      num2 = 4;
      goto label_3;
label_7:
      this.dispatcherField.LogoutMapper(this._MapperWrapper.SelectedItems);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void OrderRule()
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            this._MapperWrapper.Items.Clear();
            num1 = 3;
            continue;
          case 1:
          case 3:
            goto label_2;
          case 4:
            goto label_5;
          default:
            num1 = 4;
            continue;
        }
      }
label_2:
      List<MappingInvocationAdapter>.Enumerator enumerator = this.dispatcherField.merchant._Helper.GetEnumerator();
label_5:
      try
      {
label_10:
        while (enumerator.MoveNext())
        {
          MappingInvocationAdapter current = enumerator.Current;
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
              case 3:
                goto label_10;
              default:
                num2 = 3;
                continue;
            }
          }
label_7:
          this._MapperWrapper.Items.Add(current._Advisor);
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartRule(object v, ItemCheckedEventArgs pol)
    {
      using (List<MappingInvocationAdapter>.Enumerator enumerator = this.dispatcherField.merchant._Helper.GetEnumerator())
      {
label_9:
        while (enumerator.MoveNext())
        {
          MappingInvocationAdapter current = enumerator.Current;
          int num = 2;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 2:
                if (current._Advisor != pol.Item)
                  goto label_9;
                else
                  goto case 1;
              case 1:
              case 3:
                current.NewField(pol.Item.Checked);
                if (!StatePredicateMapping.SetupRegistry())
                {
                  num = 4;
                  continue;
                }
                goto label_7;
              case 4:
                goto label_8;
              default:
                num = 3;
                continue;
            }
          }
label_8:
          break;
label_7:
          break;
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void Dispose(bool comparesetup)
    {
      int num1 = 2;
      if (true)
        goto label_7;
label_1:
label_2:
      // ISSUE: explicit non-virtual call
      __nonvirtual (((Form) this).Dispose(comparesetup));
      num1 = 5;
label_7:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            if (comparesetup)
            {
              num1 = 4;
              continue;
            }
            goto label_4;
          case 1:
          case 4:
            goto label_3;
          case 3:
            goto label_1;
          case 5:
            goto label_11;
          default:
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 0;
        }
      }
label_3:
      int num2 = this.candidateField != null ? 1 : 0;
      goto label_5;
label_4:
      num2 = 0;
label_5:
      if (num2 != 0)
      {
        this.candidateField.Dispose();
        goto label_1;
      }
      else
        goto label_2;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PushRule()
    {
      int num1 = 11;
      if (StatePredicateMapping.TestRegistry())
        goto label_14;
label_1:
      this._ProcField = new ToolStripButton();
      int num2 = 17;
label_13:
      num1 = num2;
label_14:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
            goto label_20;
          case 2:
            goto label_9;
          case 3:
            ((Control) this).Controls.Add((Control) this._MapperWrapper);
            ((Control) this).Controls.Add((Control) this.messageField);
            ((Form) this).FormBorderStyle = FormBorderStyle.FixedToolWindow;
            ((Form) this).HelpButton = true;
            this.HideOnClose = true;
            ((Control) this).Name = "TaskWindow";
            this.TabText = "Task Window";
            ((Control) this).Text = "Task Window";
            ((Form) this).Load += new EventHandler(this.CallRule);
            this.messageField.ResumeLayout(false);
            num1 = 1;
            continue;
          case 4:
          case 7:
            this.messageField.Location = new Point(0, 0);
            this.messageField.Name = "toolStrip1";
            int num3 = 19;
            num1 = StatePredicateMapping.SetupRegistry() ? num3 : num3;
            continue;
          case 5:
            this.definitionWrapper = new ColumnHeader();
            this.m_RuleWrapper = new ColumnHeader();
            this.messageField.SuspendLayout();
            ((Control) this).SuspendLayout();
            this.messageField.Items.AddRange(new ToolStripItem[3]
            {
              (ToolStripItem) this._ProcField,
              (ToolStripItem) this._FactoryWrapper,
              (ToolStripItem) this.m_FieldWrapper
            });
            num1 = 7;
            continue;
          case 6:
            this._ProcField.ImageTransparentColor = Color.Magenta;
            this._ProcField.Name = "btnAddTask";
            this._ProcField.Size = new Size(23, 22);
            this._ProcField.Text = "Add a Task";
            num1 = 8;
            continue;
          case 8:
            this._ProcField.Click += new EventHandler(this.ManageRule);
            this._FactoryWrapper.DisplayStyle = ToolStripItemDisplayStyle.Image;
            // ISSUE: reference to a compiler-generated method
            this._FactoryWrapper.Image = (Image) Resources.ResolveFactory();
            this._FactoryWrapper.ImageTransparentColor = Color.Magenta;
            this._FactoryWrapper.Name = "btnEditTask";
            this._FactoryWrapper.Size = new Size(23, 22);
            this._FactoryWrapper.Text = "Edit Task";
            this._FactoryWrapper.Click += new EventHandler(this.InstantiateRule);
            this.m_FieldWrapper.DisplayStyle = ToolStripItemDisplayStyle.Image;
            num1 = 13;
            continue;
          case 9:
            goto label_12;
          case 10:
          case 14:
            goto label_2;
          case 11:
            goto label_11;
          case 12:
            goto label_1;
          case 13:
            goto label_3;
          case 15:
            goto label_6;
          case 16:
            this.m_WrapperWrapper.Width = 55;
            this.definitionWrapper.Text = "Task";
            this.definitionWrapper.Width = 427;
            this.m_RuleWrapper.Text = "Priority";
            this.m_RuleWrapper.Width = 78;
            if (StatePredicateMapping.TestRegistry())
            {
              num1 = 0;
              continue;
            }
            goto case 17;
          case 17:
            this._FactoryWrapper = new ToolStripButton();
            this.m_FieldWrapper = new ToolStripButton();
            this._MapperWrapper = new ListView();
            this.m_WrapperWrapper = new ColumnHeader();
            num1 = 5;
            continue;
          case 18:
            this._MapperWrapper.Size = new Size(570, 112);
            this._MapperWrapper.TabIndex = 2;
            this._MapperWrapper.UseCompatibleStateImageBehavior = false;
            this._MapperWrapper.View = View.Details;
            this._MapperWrapper.ItemChecked += new ItemCheckedEventHandler(this.StartRule);
            this.m_WrapperWrapper.Text = "Done?";
            if (true)
            {
              num1 = 16;
              continue;
            }
            goto label_20;
          case 19:
            goto label_22;
          case 20:
            goto label_5;
          default:
            goto label_15;
        }
      }
label_2:
      this.m_FieldWrapper.Size = new Size(23, 22);
      this.m_FieldWrapper.Text = "Delete Task";
      this.m_FieldWrapper.Click += new EventHandler(this.ReflectRule);
      this._MapperWrapper.CheckBoxes = true;
      this._MapperWrapper.Columns.AddRange(new ColumnHeader[3]
      {
        this.m_WrapperWrapper,
        this.m_RuleWrapper,
        this.definitionWrapper
      });
      this._MapperWrapper.Dock = DockStyle.Fill;
      this._MapperWrapper.FullRowSelect = true;
      this._MapperWrapper.GridLines = true;
      this._MapperWrapper.Location = new Point(0, 25);
      num2 = 15;
      goto label_13;
label_3:
      // ISSUE: reference to a compiler-generated method
      this.m_FieldWrapper.Image = (Image) Resources.StartField();
      num2 = 9;
      goto label_13;
label_6:
      this._MapperWrapper.Name = "lstTasks";
      num2 = 18;
      goto label_13;
label_8:
      ((ContainerControl) this).AutoScaleDimensions = new SizeF(6f, 13f);
      ((ContainerControl) this).AutoScaleMode = AutoScaleMode.Font;
      num2 = 2;
      goto label_13;
label_9:
      ((Form) this).ClientSize = new Size(570, 137);
      num2 = 3;
      goto label_13;
label_11:
      this.messageField = new ToolStrip();
      num2 = 12;
      goto label_13;
label_12:
      this.m_FieldWrapper.ImageTransparentColor = Color.Magenta;
      this.m_FieldWrapper.Name = "btnDeleteTask";
      goto label_2;
label_5:
      return;
label_15:
      num2 = 14;
      goto label_13;
label_20:
      this.messageField.PerformLayout();
      ((Control) this).ResumeLayout(false);
      ((Control) this).PerformLayout();
      num2 = 20;
      goto label_13;
label_22:
      this.messageField.Size = new Size(570, 25);
      this.messageField.TabIndex = 1;
      this.messageField.Text = "toolStrip1";
      this._ProcField.DisplayStyle = ToolStripItemDisplayStyle.Image;
      // ISSUE: reference to a compiler-generated method
      this._ProcField.Image = (Image) Resources.InitFactory();
      num2 = 6;
      goto label_13;
    }

    internal static bool TestRegistry() => true;

    internal static bool SetupRegistry() => false;
  }
}
