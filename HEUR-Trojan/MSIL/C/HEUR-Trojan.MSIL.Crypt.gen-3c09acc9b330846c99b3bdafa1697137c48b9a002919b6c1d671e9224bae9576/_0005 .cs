// Decompiled with JetBrains decompiler
// Type:  
// Assembly: SafeHeapHandleCa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 86070057-00F7-426E-5B63-54B8EF531843
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-3c09acc9b330846c99b3bdafa1697137c48b9a002919b6c1d671e9224bae9576.exe

using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

public class \u0005\u2000 : Form
{
  private IContainer \u0002;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0005\u2000()
  {
    int num = 3;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 3:
          this.\u0002 = (IContainer) null;
          if (\u0005\u2000.\u0002())
          {
            num = 2;
            continue;
          }
          goto label_6;
        case 1:
        case 2:
          // ISSUE: explicit constructor call
          base.\u002Ector();
          goto case 4;
        case 4:
          this.\u0003();
          num = 5;
          continue;
        case 5:
          goto label_8;
        default:
          if (\u0005\u2000.\u0002())
          {
            num = 4;
            continue;
          }
          goto case 4;
      }
    }
label_8:
    return;
label_6:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  public void \u0002() => Process.Start(\u0002\u2003.\u0002(-1094103803));

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void Dispose(bool _param1)
  {
    int num1 = 1;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
        case 1:
          if (!_param1)
          {
            num2 = 0;
            break;
          }
          num1 = 4;
          continue;
        case 2:
        case 5:
          this.\u0002.Dispose();
          goto case 3;
        case 3:
label_1:
          base.Dispose(_param1);
          num1 = 6;
          continue;
        case 4:
          num2 = this.\u0002 != null ? 1 : 0;
          break;
        case 6:
          goto label_11;
        default:
          num1 = 3;
          continue;
      }
      if (num2 != 0)
        num1 = 5;
      else
        goto label_1;
    }
label_11:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0003()
  {
    int num1 = 5;
    if (\u0005\u2000.\u0002())
      goto label_8;
label_1:
    this.AutoScaleDimensions = new SizeF(8f, 16f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.ClientSize = new Size(1067, 554);
    num1 = 8;
label_8:
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
          this.MinimizeBox = false;
          this.Name = \u0002\u2003.\u0002(-1094103723);
          num1 = 1;
          continue;
        case 1:
          this.StartPosition = FormStartPosition.CenterScreen;
          num1 = 2;
          continue;
        case 2:
        case 6:
          this.Text = \u0002\u2003.\u0002(-1094103723);
          this.ResumeLayout(false);
          num2 = 9;
          break;
        case 3:
        case 4:
          this.MaximizeBox = false;
          goto case 0;
        case 5:
          this.SuspendLayout();
          num1 = 7;
          continue;
        case 7:
          goto label_1;
        case 8:
          this.Margin = new Padding(4, 4, 4, 4);
          num2 = 4;
          break;
        case 9:
          goto label_11;
        default:
          if (!\u0005\u2000.\u0003())
          {
            num1 = 0;
            continue;
          }
          goto case 0;
      }
      num1 = num2;
    }
label_11:;
  }

  internal static bool \u0002() => true;

  internal static bool \u0003() => false;
}
