// Decompiled with JetBrains decompiler
// Type: SMALLR.Descriptors.InterceptorOrderDescriptor
// Assembly: SMALLR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6D2A6844-DF52-4C3E-A39E-6BCAB729CFBF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-cb64837983ad6cdbc07df3dc8272a72b4d1b41314b797cc4f9bb67cd37f7b0f5.exe

using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace SMALLR.Descriptors
{
  public class InterceptorOrderDescriptor
  {
    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool SetupServer() => this.watcher;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ForgotServer() => this.m_Merchant;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ResolveServer() => this.test;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool PatchServer() => this._Wrapper;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public bool ListServer() => this.m_Definition;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FindServer(Keys param)
    {
      int num1 = 7;
      if (InterceptorOrderDescriptor.ComparePrototype())
        goto label_10;
label_1:
      // ISSUE: reference to a compiler-generated method
      this.CancelServer(true);
      num1 = 2;
label_10:
      while (true)
      {
        int num2;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        switch (num1)
        {
          case 0:
            if (flag2)
            {
              // ISSUE: reference to a compiler-generated method
              this.ResetServer(true);
            }
            if (param == Keys.Up)
            {
              num1 = 9;
              continue;
            }
            goto case 8;
          case 1:
label_17:
            if (flag4)
            {
              // ISSUE: reference to a compiler-generated method
              this.RevertServer(true);
              num1 = 11;
              continue;
            }
            goto label_14;
          case 2:
label_15:
            num3 = -60419844;
            goto label_12;
          case 3:
            if (flag1)
            {
              // ISSUE: reference to a compiler-generated method
              this.ExcludeServer(true);
            }
            flag2 = param == Keys.Right;
            num2 = 0;
            break;
          case 4:
          case 5:
            if (flag3)
            {
              if (!InterceptorOrderDescriptor.StopPrototype())
              {
                num1 = 10;
                continue;
              }
              goto case 3;
            }
            else
              goto label_16;
          case 6:
          case 10:
            goto label_1;
          case 7:
            flag1 = param == Keys.Left;
            num2 = 3;
            break;
          case 8:
            flag3 = param == Keys.Down;
            goto case 4;
          case 9:
            // ISSUE: reference to a compiler-generated method
            this.InsertServer(true);
            num2 = 8;
            break;
          case 11:
            goto label_24;
          default:
label_11:
            num3 = -1600694682;
            goto label_12;
        }
label_9:
        num1 = num2;
        continue;
label_12:
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1595668773)) % 5U)
          {
            case 0:
              goto label_11;
            case 1:
              goto label_9;
            case 2:
              goto label_15;
            case 4:
              num2 = 4;
              num3 = (int) num4 * -563848913 ^ 343630183;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        flag4 = param == Keys.Space;
        if (!InterceptorOrderDescriptor.StopPrototype())
          num1 = 1;
        else
          goto label_17;
      }
label_14:
      return;
label_24:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcServer()
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            // ISSUE: reference to a compiler-generated method
            this.ExcludeServer(false);
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto label_9;
          case 1:
            // ISSUE: reference to a compiler-generated method
            this.ResetServer(false);
            if (!InterceptorOrderDescriptor.StopPrototype())
            {
              num1 = 6;
              continue;
            }
            goto case 5;
          case 2:
          case 6:
            // ISSUE: reference to a compiler-generated method
            this.InsertServer(false);
            goto case 5;
          case 3:
            // ISSUE: reference to a compiler-generated method
            this.RevertServer(false);
            num2 = 7;
            break;
          case 5:
            // ISSUE: reference to a compiler-generated method
            this.CancelServer(false);
            num2 = 3;
            break;
          case 7:
            goto label_11;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 3;
        }
        num1 = num2;
      }
label_11:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public InterceptorOrderDescriptor()
    {
    }

    internal static bool ComparePrototype() => true;

    internal static bool StopPrototype() => false;
  }
}
