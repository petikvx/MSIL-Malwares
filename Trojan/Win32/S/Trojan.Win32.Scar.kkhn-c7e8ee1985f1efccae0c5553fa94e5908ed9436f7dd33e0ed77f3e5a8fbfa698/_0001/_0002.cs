// Decompiled with JetBrains decompiler
// Type: .
// Assembly: PloxR@T Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=698412109f987773
// MVID: 2E09760C-A660-44B9-9687-856D82185CB8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Scar.kkhn-c7e8ee1985f1efccae0c5553fa94e5908ed9436f7dd33e0ed77f3e5a8fbfa698.exe

using \u0001;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0001
{
  internal sealed class \u0002
  {
    private static Stream \u0001;
    private static int \u0001 = 0;

    public static string \u0003([In] int obj0)
    {
      byte[] numArray;
      lock (typeof (\u0002))
      {
        if (\u0002.\u0001 == null)
        {
          Assembly executingAssembly = Assembly.GetExecutingAssembly();
          \u0002.\u0001 = executingAssembly.GetManifestResourceStream(executingAssembly.ManifestModule.ModuleVersionId.ToString("B"));
          byte[] publicKeyToken = executingAssembly.GetName().GetPublicKeyToken();
          if (publicKeyToken != null)
          {
            for (int index = 0; index < publicKeyToken.Length - 1; index += 2)
              \u0002.\u0001 ^= ((int) publicKeyToken[index] << 8) + (int) publicKeyToken[index + 1];
          }
          int num = ((MethodBase.GetCurrentMethod().MetadataToken & 16777215) - 1) % (int) ushort.MaxValue;
          \u0002.\u0001 ^= num;
        }
        \u0002.\u0001.Position = (long) (obj0 - \u0002.\u0001);
        int num1 = \u0002.\u0001.ReadByte();
        int count = (num1 & 128) != 0 ? ((num1 & 64) != 0 ? ((num1 & 31) << 24) + (\u0002.\u0001.ReadByte() << 16) + (\u0002.\u0001.ReadByte() << 8) + \u0002.\u0001.ReadByte() : ((num1 & 63) << 8) + \u0002.\u0001.ReadByte()) : num1;
        numArray = new byte[count];
        \u0002.\u0001.Read(numArray, 0, count);
      }
      if (numArray.Length == 0)
        return string.Empty;
      byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(numArray, 0, numArray.Length));
      return string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
    }
  }
}
