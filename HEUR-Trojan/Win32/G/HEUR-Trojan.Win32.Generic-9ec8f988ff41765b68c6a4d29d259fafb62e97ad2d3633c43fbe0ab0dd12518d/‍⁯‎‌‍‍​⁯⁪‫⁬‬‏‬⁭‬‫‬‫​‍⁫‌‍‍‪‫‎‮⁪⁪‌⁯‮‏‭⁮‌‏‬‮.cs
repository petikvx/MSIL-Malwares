// Decompiled with JetBrains decompiler
// Type: ‍⁯‎‌‍‍​⁯⁪‫⁬‬‏‬⁭‬‫‬‫​‍⁫‌‍‍‪‫‎‮⁪⁪‌⁯‮‏‭⁮‌‏‬‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

internal sealed class \u200D⁯‎‌‍‍​⁯⁪‫⁬‬‏‬⁭‬‫‬‫​‍⁫‌‍‍‪‫‎‮⁪⁪‌⁯‮‏‭⁮‌‏‬‮
{
  private const int \u202D‮‪‎​⁮⁬‎‭‫‍‫⁬‪⁮‎⁫‭‫‫⁭‮‍‫‏⁭‪⁮‫‮⁬⁫‬⁮⁯⁬⁫⁪⁯‏‮ = 15;
  private const int \u200F‏⁮‪⁯‮⁮⁫‫‎‪⁭‎⁭‌‭‮‪⁮⁭‭‏‪‫‎​⁪‎⁮‭​‭‭‬‎‎⁭‮⁭‪‮ = 19;
  private const int \u200E‍‮‬‮⁬‪⁪‪‏⁪⁬​‏‫‭⁫‌⁮⁯⁯‌‫⁪‬​‍‎‬‏‌⁬⁭‫⁮‫⁪​⁫‮ = 30;
  private const int \u200D‎‪‮‭‫‎⁪‬‭⁭‏‍‫‬⁫‍‏‍‬⁫‎‫‫‬​‎​‮⁬‬⁮⁮‫⁪‪‬‬‎‌‮ = 256;
  private const int \u200F‍‪‪‌‭⁬⁯‍⁭​‍⁫‫⁫​⁬​​⁭​‭⁪‬‬⁮‬‪‪‬⁫‎‌⁭‫‮⁯⁪⁫⁮‮ = 29;
  private const int \u206C‬⁪⁪‭‏​‬‍‮⁬​‭⁯‪​⁭⁮‫‮‏​⁯‮‭‏⁬⁭‪‮⁪‮⁮⁫⁮⁬‭‬‫⁯‮ = 286;
  private const int \u206E‬‏‍⁯⁪⁪‮‮‬​‌‫‏‏‪​⁭‏‫⁭‪⁮‮‎⁪⁮⁭‮⁮‌‪⁯⁮‬⁭‬⁭‌‬‮ = 573;
  internal const int \u200F‬‭‭‪‮​‬‎‎⁬‍‌‍‬‭‭​⁮⁮‮⁭‫‏‎‎‎‭⁮⁪‭‪‌⁬‪‫‭‮⁮‭‮ = 7;
  internal const int \u202C⁮‫‪⁮‍‫‭‮‮‍​‮⁭‎‍⁭‌‏‮⁫⁬⁪⁯​‮⁭‫‮⁪⁮‍‬‬⁬⁬‎​‌⁭‮ = 256;
  internal const int \u202D‪⁮‭⁮⁬‎‏‪​‫​⁮⁫‭‫⁫⁯‎⁬⁫‭​‌⁬‮⁪‪‭‏⁬‏‬⁭⁫⁯⁭‫‏‫‮ = 16;
  internal const int \u200F‬⁪‌‫​‮‫‮⁫⁬⁫⁬‎‎‬⁫⁭⁪‬‎⁯‬‮‮‬‎‭⁮​⁫‌‫⁮‌‌⁮⁪‏‭‮ = 17;
  internal const int \u200F‎‮⁪‍‭⁯‍‫⁫‪‎⁮‮⁬‫‍‫‪⁮‍‪⁭‎⁬⁪‍‫​⁪‪‍‏⁭⁯‮⁬‫‬⁭‮ = 18;
  internal static readonly int[] \u202A‍‮‍‏⁫‫⁪‍‎‌⁮⁮⁭‌⁯‪‎⁮‌‪‍⁬‭‌⁮⁬‫⁮‎‭⁫‭⁯⁯‬‏⁭‌⁪‮ = new int[29]
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    2,
    2,
    2,
    2,
    3,
    3,
    3,
    3,
    4,
    4,
    4,
    4,
    5,
    5,
    5,
    5,
    0
  };
  internal static readonly int[] \u200D‍⁮‬‭‏‬⁮‭‏​‬‌‎‍‍‭‎‭‮‫⁬‍‫⁮‎‏​⁮‪‍⁯⁫‫⁭‬⁫​⁯‬‮ = new int[30]
  {
    0,
    0,
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
    8,
    8,
    9,
    9,
    10,
    10,
    11,
    11,
    12,
    12,
    13,
    13
  };
  internal static readonly int[] \u206D⁯‮⁮⁭⁪⁪‪‌‮‏‌‭⁮‮‎‭‎‎⁬‬​‍‌‌​‫⁬‫‌‎⁭⁭‭‮⁬‭⁪‏⁬‮ = new int[19]
  {
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    2,
    3,
    7
  };
  internal static readonly byte[] \u200B‏⁫‌⁬‎‌‮⁬⁫‎‫⁫​‪‏⁮‬⁭‍‍⁮‌⁮‭‎‏‫⁮​⁮⁯‮​⁭⁮⁪‬‫‮‮ = new byte[19]
  {
    (byte) 16,
    (byte) 17,
    (byte) 18,
    (byte) 0,
    (byte) 8,
    (byte) 7,
    (byte) 9,
    (byte) 6,
    (byte) 10,
    (byte) 5,
    (byte) 11,
    (byte) 4,
    (byte) 12,
    (byte) 3,
    (byte) 13,
    (byte) 2,
    (byte) 14,
    (byte) 1,
    (byte) 15
  };
  internal const int \u202D⁯‬‬⁭⁮⁭⁭‮‎⁫‍⁪‮⁪‬​⁫‍‪‏‌⁬‮⁮‮‎‌‭⁯⁫‎⁯⁭⁮‪‍‪‫‎‮ = 16;
  internal const int \u206B‌⁮‌‏⁭⁮‎⁬⁫‍⁮‎‌‮⁮‭‎‪⁭‍⁯‪‮‌‭⁫⁪⁮‌⁯⁭‍‮‬⁪⁯⁯‭‌‮ = 512;
  internal static readonly byte[] \u200B⁬​⁬⁬⁬​‬⁯⁪⁪‬⁮‬‫⁫⁫‎‎⁭‭‮⁯​‌‪‏⁫‌⁮⁬⁪‏‏⁯⁪‎‮‏‍‮ = new byte[512]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 4,
    (byte) 5,
    (byte) 5,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 6,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 8,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 9,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 10,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 11,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 0,
    (byte) 0,
    (byte) 16,
    (byte) 17,
    (byte) 18,
    (byte) 18,
    (byte) 19,
    (byte) 19,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 28,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29,
    (byte) 29
  };
  internal static readonly byte[] \u202C‪‌⁭‌‮‍‭⁭⁫⁫⁯‪⁭‮‏‮‪‍‪‏‏‬‏‍⁯‬‌⁪‭‮⁪‎‏⁪‮‮⁪‮‮‮ = new byte[256]
  {
    (byte) 0,
    (byte) 1,
    (byte) 2,
    (byte) 3,
    (byte) 4,
    (byte) 5,
    (byte) 6,
    (byte) 7,
    (byte) 8,
    (byte) 8,
    (byte) 9,
    (byte) 9,
    (byte) 10,
    (byte) 10,
    (byte) 11,
    (byte) 11,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 12,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 13,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 14,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 15,
    (byte) 16,
    (byte) 16,
    (byte) 16,
    (byte) 16,
    (byte) 16,
    (byte) 16,
    (byte) 16,
    (byte) 16,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 17,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 18,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 19,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 20,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 21,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 22,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 23,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 24,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 25,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 26,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 27,
    (byte) 28
  };
  internal static readonly int[] \u206B​​⁬‏‍‬⁫‬‭​‮⁮​⁪⁬‫‫⁫⁭‬‫​‭‏⁫⁫⁫⁫⁮‍‭‬⁬⁭‪⁯‍‬‪‮ = new int[29]
  {
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    10,
    12,
    14,
    16,
    20,
    24,
    28,
    32,
    40,
    48,
    56,
    64,
    80,
    96,
    112,
    128,
    160,
    192,
    224,
    0
  };
  internal static readonly int[] \u202A⁬‭⁪‍‌‎‌‏⁫‎‮‮⁭‮​‬⁬⁭⁪⁭⁪‎⁭‬‏‍‮‮‬‫‌‌⁯‪‮⁪‏‬‍‮ = new int[30]
  {
    0,
    1,
    2,
    3,
    4,
    6,
    8,
    12,
    16,
    24,
    32,
    48,
    64,
    96,
    128,
    192,
    256,
    384,
    512,
    768,
    1024,
    1536,
    2048,
    3072,
    4096,
    6144,
    8192,
    12288,
    16384,
    24576
  };
  internal short[] \u202C⁮‭‭‮‍‫‮‪⁪‌‏⁬‎‪‎‭‏⁮‏‪⁪‫⁮‍‮‫⁫⁮‏​‬​‍‎‌‎⁫⁭⁯‮;
  internal int \u202A⁬‪‬‫⁭‍‌⁭‫⁫⁭⁮⁫‭‭⁬‭‏⁭‭‮‏‮‎‎​⁬‫⁯⁫⁮‫‭‪⁫⁪⁮‬‎‮;
  internal \u206E⁭⁬‍⁯‏‏‍‍​‎⁮⁫‫‫‎‫‎‫‌‍‏‍‮⁬‎‫‪‏‬⁭‭‭⁭⁪‎​‬⁯‎‮ \u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮;

  internal static int \u200E​⁪⁮⁯⁯⁪‪‪⁭‮⁪‍‫‫‍‭​‍​⁮‍‬​‎⁪‏‍⁬⁬⁫⁪‏‪⁭⁬‌‏⁬⁫‮(int _param0) => _param0 >= 256 ? (int) \u200D⁯‎‌‍‍​⁯⁪‫⁬‬‏‬⁭‬‫‬‫​‍⁫‌‍‍‪‫‎‮⁪⁪‌⁯‮‏‭⁮‌‏‬‮.\u200B⁬​⁬⁬⁬​‬⁯⁪⁪‬⁮‬‫⁫⁫‎‎⁭‭‮⁯​‌‪‏⁫‌⁮⁬⁪‏‏⁯⁪‎‮‏‍‮[256 + (_param0 >> 7)] : (int) \u200D⁯‎‌‍‍​⁯⁪‫⁬‬‏‬⁭‬‫‬‫​‍⁫‌‍‍‪‫‎‮⁪⁪‌⁯‮‏‭⁮‌‏‬‮.\u200B⁬​⁬⁬⁬​‬⁯⁪⁪‬⁮‬‫⁫⁫‎‎⁭‭‮⁯​‌‪‏⁫‌⁮⁬⁪‏‏⁯⁪‎‮‏‍‮[_param0];

  internal void \u206A‏‍‪‏‌​⁮‎‮⁭​‮⁪‫‌‍⁫‎‏‪‌‌‎‌⁭⁮‫‍⁮⁭‫⁭⁪⁯‭⁭‮‎‌‮(
    \u206A‪⁯⁭‪⁫⁯‪⁭‍​⁭⁭‫‍‬​‌⁬​⁪‫​⁬⁮‫⁬‬‌‍‏⁮⁮⁬‭‌⁭‪⁮⁪‮ _param1)
  {
    short[] numArray1 = this.\u202C⁮‭‭‮‍‫‮‪⁪‌‏⁬‎‪‎‭‏⁮‏‪⁪‫⁮‍‮‫⁫⁮‏​‬​‍‎‌‎⁫⁭⁯‮;
    short[] numArray2 = this.\u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮.\u206C‮‍‪‌⁮‪‮⁭‫⁪⁫‬‫​‎​​⁮⁯‍⁮⁯‭‬‏⁮‪​⁪‬⁬‏⁯​⁫‏‬‍‎‮;
    int[] numArray3 = this.\u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮.\u206F‮⁯⁮‬‎⁪‎⁪‏​‭⁯‭⁬⁫‌‎⁯⁫⁫⁭⁯‬⁫⁮‬‫⁯⁭‌⁯⁯‮‫⁪​‮‫⁭‮;
    int num1 = this.\u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮.\u200E⁬⁭⁪‍‍‭‍‎‏⁭​⁫​⁭⁭‪‫‮‍⁫⁬⁬⁫‏‫⁮‪⁫‮‮‎‫‫‍‏‫‬​⁯‮;
    int index1 = this.\u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮.\u200C​‫‫‌⁯‭⁬‬‬‫‍‎‍‍‪​‍​‌‎‏‮⁪‮‭‬⁬​‌‬‍​⁭‮‬​‌⁬⁫‮;
    int num2 = 0;
    for (int index2 = 0; index2 <= 15; ++index2)
      _param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index2] = (short) 0;
    numArray1[_param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[_param1.\u206C⁭⁮⁫⁪‪‮‮‮‌⁪⁪‍‎‫⁯‬‮‬⁭‎‭⁯⁫‏‍⁪‪⁪​‪‪⁫‍⁫‍‏⁪‫‎‮] * 2 + 1] = (short) 0;
    int index3;
    for (index3 = _param1.\u206C⁭⁮⁫⁪‪‮‮‮‌⁪⁪‍‎‫⁯‬‮‬⁭‎‭⁯⁫‏‍⁪‪⁪​‪‪⁫‍⁫‍‏⁪‫‎‮ + 1; index3 < 573; ++index3)
    {
      int num3 = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[index3];
      int index4 = (int) numArray1[(int) numArray1[num3 * 2 + 1] * 2 + 1] + 1;
      if (index4 > index1)
      {
        index4 = index1;
        ++num2;
      }
      numArray1[num3 * 2 + 1] = (short) index4;
      if (num3 <= this.\u202A⁬‪‬‫⁭‍‌⁭‫⁫⁭⁮⁫‭‭⁬‭‏⁭‭‮‏‮‎‎​⁬‫⁯⁫⁮‫‭‪⁫⁪⁮‬‎‮)
      {
        ++_param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index4];
        int num4 = 0;
        if (num3 >= num1)
          num4 = numArray3[num3 - num1];
        short num5 = numArray1[num3 * 2];
        _param1.\u200D‏‏‍‭‌‬‎⁯‭⁬⁫‬‬‮‍‪‬‮‏‎⁪‍‏‪‫⁭⁯⁮⁫‎‭​⁯‏​‍⁯​‍‮ += (int) num5 * (index4 + num4);
        if (numArray2 != null)
          _param1.\u200D⁯⁮‎⁬‬‪‫‌‍⁪⁬‎⁫‮‮⁪⁮‮‮‪⁪‏​‭⁮⁫‮‍‬⁯‭⁫‎‮‪‌‮⁮⁪‮ += (int) num5 * ((int) numArray2[num3 * 2 + 1] + num4);
      }
    }
    if (num2 == 0)
      return;
    do
    {
      int index5 = index1 - 1;
      while (_param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index5] == (short) 0)
        --index5;
      --_param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index5];
      _param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index5 + 1] += (short) 2;
      --_param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index1];
      num2 -= 2;
    }
    while (num2 > 0);
    for (int index6 = index1; index6 != 0; --index6)
    {
      int num6 = (int) _param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮[index6];
      while (num6 != 0)
      {
        int num7 = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[--index3];
        if (num7 <= this.\u202A⁬‪‬‫⁭‍‌⁭‫⁫⁭⁮⁫‭‭⁬‭‏⁭‭‮‏‮‎‎​⁬‫⁯⁫⁮‫‭‪⁫⁪⁮‬‎‮)
        {
          if ((int) numArray1[num7 * 2 + 1] != index6)
          {
            _param1.\u200D‏‏‍‭‌‬‎⁯‭⁬⁫‬‬‮‍‪‬‮‏‎⁪‍‏‪‫⁭⁯⁮⁫‎‭​⁯‏​‍⁯​‍‮ += (int) (((long) index6 - (long) numArray1[num7 * 2 + 1]) * (long) numArray1[num7 * 2]);
            numArray1[num7 * 2 + 1] = (short) index6;
          }
          --num6;
        }
      }
    }
  }

  internal void \u206A⁬⁭⁬⁫‏‬​‫⁬‌‭⁫‏⁮‮‭‬⁪‌⁫‮⁭‎‌‍‭‭⁯‌​‌‍⁫⁪​⁯‭‍‭‮(
    \u206A‪⁯⁭‪⁫⁯‪⁭‍​⁭⁭‫‍‬​‌⁬​⁪‫​⁬⁮‫⁬‬‌‍‏⁮⁮⁬‭‌⁭‪⁮⁪‮ _param1)
  {
    short[] numArray1 = this.\u202C⁮‭‭‮‍‫‮‪⁪‌‏⁬‎‪‎‭‏⁮‏‪⁪‫⁮‍‮‫⁫⁮‏​‬​‍‎‌‎⁫⁭⁯‮;
    short[] numArray2 = this.\u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮.\u206C‮‍‪‌⁮‪‮⁭‫⁪⁫‬‫​‎​​⁮⁯‍⁮⁯‭‬‏⁮‪​⁪‬⁬‏⁯​⁫‏‬‍‎‮;
    int num1 = this.\u200E⁫‌‫​⁭‬‪‏⁮⁮⁭‬‭⁮⁭⁯‭‌‌⁫‍⁯⁬‌​⁫‌‌‭⁭⁬‫‫‫‍‬⁬‭‪‮.\u206B⁮‍​⁪⁬‬‏⁭⁬‮⁭‬⁬‮‎⁬‌⁪⁭‫‍‎⁫‍⁭‍⁮⁭⁯⁯‏‏‍‌⁮⁪‪‌⁬‮;
    int num2 = -1;
    _param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮ = 0;
    _param1.\u206C⁭⁮⁫⁪‪‮‮‮‌⁪⁪‍‎‫⁯‬‮‬⁭‎‭⁯⁫‏‍⁪‪⁪​‪‪⁫‍⁫‍‏⁪‫‎‮ = 573;
    for (int index = 0; index < num1; ++index)
    {
      if (numArray1[index * 2] != (short) 0)
      {
        _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[++_param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮] = num2 = index;
        _param1.\u202D‮⁯⁮⁯​‍‭‬‏‫‪‍‪‬‮‍⁬‏⁮⁯⁬‬‬⁯‏⁫‌‪‫‪⁯⁭‪‏‍⁮⁬‮⁮‮[index] = (byte) 0;
      }
      else
        numArray1[index * 2 + 1] = (short) 0;
    }
    while (_param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮ < 2)
    {
      int[] numArray3 = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮;
      int index1 = ++_param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮;
      int num3;
      if (num2 >= 2)
        num3 = 0;
      else
        num2 = num3 = num2 + 1;
      int num4 = num3;
      numArray3[index1] = num3;
      int index2 = num4;
      numArray1[index2 * 2] = (short) 1;
      _param1.\u202D‮⁯⁮⁯​‍‭‬‏‫‪‍‪‬‮‍⁬‏⁮⁯⁬‬‬⁯‏⁫‌‪‫‪⁯⁭‪‏‍⁮⁬‮⁮‮[index2] = (byte) 0;
      --_param1.\u200D‏‏‍‭‌‬‎⁯‭⁬⁫‬‬‮‍‪‬‮‏‎⁪‍‏‪‫⁭⁯⁮⁫‎‭​⁯‏​‍⁯​‍‮;
      if (numArray2 != null)
        _param1.\u200D⁯⁮‎⁬‬‪‫‌‍⁪⁬‎⁫‮‮⁪⁮‮‮‪⁪‏​‭⁮⁫‮‍‬⁯‭⁫‎‮‪‌‮⁮⁪‮ -= (int) numArray2[index2 * 2 + 1];
    }
    this.\u202A⁬‪‬‫⁭‍‌⁭‫⁫⁭⁮⁫‭‭⁬‭‏⁭‭‮‏‮‎‎​⁬‫⁯⁫⁮‫‭‪⁫⁪⁮‬‎‮ = num2;
    for (int index = _param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮ / 2; index >= 1; --index)
      _param1.\u200C⁭​‭‫‎​‪⁫‍⁫‮‌⁯⁫‌‫‫‎‬‬‍⁮‪⁭⁪⁪‬‮⁭⁪‬‎⁮‬​‌⁪⁬‬‮(numArray1, index);
    int index3 = num1;
    do
    {
      int index4 = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[1];
      _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[1] = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[_param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮--];
      _param1.\u200C⁭​‭‫‎​‪⁫‍⁫‮‌⁯⁫‌‫‫‎‬‬‍⁮‪⁭⁪⁪‬‮⁭⁪‬‎⁮‬​‌⁪⁬‬‮(numArray1, 1);
      int index5 = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[1];
      _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[--_param1.\u206C⁭⁮⁫⁪‪‮‮‮‌⁪⁪‍‎‫⁯‬‮‬⁭‎‭⁯⁫‏‍⁪‪⁪​‪‪⁫‍⁫‍‏⁪‫‎‮] = index4;
      _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[--_param1.\u206C⁭⁮⁫⁪‪‮‮‮‌⁪⁪‍‎‫⁯‬‮‬⁭‎‭⁯⁫‏‍⁪‪⁪​‪‪⁫‍⁫‍‏⁪‫‎‮] = index5;
      numArray1[index3 * 2] = (short) ((int) numArray1[index4 * 2] + (int) numArray1[index5 * 2]);
      _param1.\u202D‮⁯⁮⁯​‍‭‬‏‫‪‍‪‬‮‍⁬‏⁮⁯⁬‬‬⁯‏⁫‌‪‫‪⁯⁭‪‏‍⁮⁬‮⁮‮[index3] = (byte) ((uint) Math.Max(_param1.\u202D‮⁯⁮⁯​‍‭‬‏‫‪‍‪‬‮‍⁬‏⁮⁯⁬‬‬⁯‏⁫‌‪‫‪⁯⁭‪‏‍⁮⁬‮⁮‮[index4], _param1.\u202D‮⁯⁮⁯​‍‭‬‏‫‪‍‪‬‮‍⁬‏⁮⁯⁬‬‬⁯‏⁫‌‪‫‪⁯⁭‪‏‍⁮⁬‮⁮‮[index5]) + 1U);
      numArray1[index4 * 2 + 1] = numArray1[index5 * 2 + 1] = (short) index3;
      _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[1] = index3++;
      _param1.\u200C⁭​‭‫‎​‪⁫‍⁫‮‌⁯⁫‌‫‫‎‬‬‍⁮‪⁭⁪⁪‬‮⁭⁪‬‎⁮‬​‌⁪⁬‬‮(numArray1, 1);
    }
    while (_param1.\u202C‪‪⁪⁭‎⁯‍‌‭‬⁬‭⁮‏‍​‫⁪⁬⁭‎⁬‬‫⁫⁫‍​‫‍⁯⁪⁪‮⁯‬⁯⁪‮‮ >= 2);
    _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[--_param1.\u206C⁭⁮⁫⁪‪‮‮‮‌⁪⁪‍‎‫⁯‬‮‬⁭‎‭⁯⁫‏‍⁪‪⁪​‪‪⁫‍⁫‍‏⁪‫‎‮] = _param1.\u202D‎‮⁪​‬⁭‬‍‫‌‎‏‬‍‎⁯‭‮‍⁬⁫‎⁮‌‮‏‭⁪​‬⁭​‌⁪‍‭‌‫⁯‮[1];
    this.\u206A‏‍‪‏‌​⁮‎‮⁭​‮⁪‫‌‍⁫‎‏‪‌‌‎‌⁭⁮‫‍⁮⁭‫⁭⁪⁯‭⁭‮‎‌‮(_param1);
    \u200D⁯‎‌‍‍​⁯⁪‫⁬‬‏‬⁭‬‫‬‫​‍⁫‌‍‍‪‫‎‮⁪⁪‌⁯‮‏‭⁮‌‏‬‮.\u202A⁫⁯‎‬⁬‪‭‍‍‎⁯‪⁪‫⁬‏‭⁪‪‎‫‮‪⁬⁫‍‬‫‫‬‬‮‭⁭‎⁮‌⁬‌‮(numArray1, num2, _param1.\u202E‎‭​‫⁯​‪‮⁪‍⁮‮‍‭‫⁬⁮​⁪⁮‎​‭⁭⁪‭⁬​⁭‌‮‭⁬‫⁪⁪⁯‎⁬‮);
  }

  internal static void \u202A⁫⁯‎‬⁬‪‭‍‍‎⁯‪⁪‫⁬‏‭⁪‪‎‫‮‪⁬⁫‍‬‫‫‬‬‮‭⁭‎⁮‌⁬‌‮(
    short[] _param0,
    int _param1,
    short[] _param2)
  {
    short[] numArray = new short[16];
    short num = 0;
    for (int index = 1; index <= 15; ++index)
      numArray[index] = num = (short) ((int) num + (int) _param2[index - 1] << 1);
    for (int index1 = 0; index1 <= _param1; ++index1)
    {
      int index2 = (int) _param0[index1 * 2 + 1];
      if (index2 != 0)
        _param0[index1 * 2] = (short) \u200D⁯‎‌‍‍​⁯⁪‫⁬‬‏‬⁭‬‫‬‫​‍⁫‌‍‍‪‫‎‮⁪⁪‌⁯‮‏‭⁮‌‏‬‮.\u202A​‍‮⁪‮‭‏‪⁫‌‮‌‫‎⁫‌‍⁬‪⁭⁮⁮⁮‎‮⁪⁫⁭‎‮‍‭⁫⁯‪⁬‭‎⁮‮((int) numArray[index2]++, index2);
    }
  }

  internal static int \u202A​‍‮⁪‮‭‏‪⁫‌‮‌‫‎⁫‌‍⁬‪⁭⁮⁮⁮‎‮⁪⁫⁭‎‮‍‭⁫⁯‪⁬‭‎⁮‮(int _param0, int _param1)
  {
    int num1 = 0;
    do
    {
      int num2 = num1 | _param0 & 1;
      _param0 >>= 1;
      num1 = num2 << 1;
    }
    while (--_param1 > 0);
    return num1 >> 1;
  }
}
