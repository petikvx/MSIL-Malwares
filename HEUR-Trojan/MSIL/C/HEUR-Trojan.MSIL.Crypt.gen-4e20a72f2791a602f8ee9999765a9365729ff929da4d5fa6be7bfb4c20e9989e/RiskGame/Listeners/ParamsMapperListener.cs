// Decompiled with JetBrains decompiler
// Type: RiskGame.Listeners.ParamsMapperListener
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Attributes;
using IEnumUnkn.Bridges;
using IEnumUnkn.Candidates;
using IEnumUnkn.Collections;
using IEnumUnkn.Definitions;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame.Common;
using RiskGame.Game;
using RiskGame.Maps;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace RiskGame.Listeners
{
  public class ParamsMapperListener : Window, IComponentConnector, IStyleConnector
  {
    private AdapterGetterCandidate m_Database;
    private static Random annotation;
    private static List<AuthenticationBridgeRule> m_Merchant;
    private bool m_Params;
    private bool policy;
    private BackgroundWorker m_Thread;
    private bool _System;
    private SingletonVisitorStruct _Record;
    private SingletonVisitorStruct dic;
    private SingletonVisitorStruct m_Collection;
    private GetterBridgeBridge _Schema;
    private GetterBridgeBridge m_Account;
    private int _Configuration;
    private int _Expression;
    private List<FactoryIdentifierAttribute> _Rules;
    internal StackPanel panel_MainUI;
    internal Grid GameGrid;
    internal ImageBrush m_Listener;
    internal Button btnAlaska;
    internal Button btnAlberta;
    internal Button btnCentral_America;
    internal Button btnEastern_US;
    internal Button btnGreenland;
    internal Button btnNorthwest_Canada;
    internal Button btnOntario;
    internal Button btnQuebec;
    internal Button btnWestern_US;
    internal Button btnArgentina;
    internal Button btnBrazil;
    internal Button btnPeru;
    internal Button btnVenezuela;
    internal Button btnUK_Ireland;
    internal Button btnIceland;
    internal Button btnNorthern_Europe;
    internal Button btnScandinavia;
    internal Button btnSouthern_Europe;
    internal Button btnSoviet_Bloc;
    internal Button btnWestern_Europe;
    internal Button btnCentral_Africa;
    internal Button btnEast_Africa;
    internal Button btnMadagascar;
    internal Button btnEgypt;
    internal Button btnNorth_Africa;
    internal Button btnSouth_Africa;
    internal Button btnAfghanistan;
    internal Button btnChina;
    internal Button btnIndia;
    internal Button btnJapan;
    internal Button btnMiddle_East;
    internal Button btnMongolia;
    internal Button btnSoutheast_Asia;
    internal Button btnSiberia;
    internal Button btnUral;
    internal Button btnEastern_Australia;
    internal Button btnWestern_Australia;
    internal Button btnNew_Guinea;
    internal Button btnIndonesia;
    internal Button btnIrkutsk;
    internal Button btnKamchatka;
    internal Button btnYakutsk;
    internal ProgressBar pb_Timer;
    internal StackPanel panel_UI;
    internal Border brd_Players;
    internal StackPanel panel_Players;
    internal Border brd_Player1;
    internal StackPanel panel_Player1;
    internal Rectangle rectPlayerColor1;
    internal Label lblPlayerName1;
    internal Label lblPlayer1Territories;
    internal Label lblPlayer1Strength;
    internal Border brd_Player2;
    internal StackPanel panel_Player2;
    internal Rectangle rectPlayerColor2;
    internal Label lblPlayerName2;
    internal Label lblPlayer2Territories;
    internal Label lblPlayer2Strength;
    internal Border brd_Player3;
    internal StackPanel panel_Player3;
    internal Rectangle rectPlayerColor3;
    internal Label lblPlayerName3;
    internal Label lblPlayer3Territories;
    internal Label lblPlayer3Strength;
    internal Border brd_Player4;
    internal StackPanel panel_Player4;
    internal Rectangle rectPlayerColor4;
    internal Label lblPlayerName4;
    internal Label lblPlayer4Territories;
    internal Label lblPlayer4Strength;
    internal Border brd_Player5;
    internal StackPanel panel_Player5;
    internal Rectangle rectPlayerColor5;
    internal Label lblPlayerName5;
    internal Label lblPlayer5Territories;
    internal Label lblPlayer5Strength;
    internal Border brd_Player6;
    internal StackPanel panel_Player6;
    internal Rectangle rectPlayerColor6;
    internal Label lblPlayerName6;
    internal Label lblPlayer6Territories;
    internal Label lblPlayer6Strength;
    internal Border brd_ActionPanel;
    internal StackPanel panel_NumberSelection;
    internal Button btnStateDisp;
    internal Button btnNumber;
    internal Button btnState;
    internal Grid panel_Die;
    internal Button btnPlayerDie;
    internal StackPanel panel_Die_Player;
    internal Image imgPlayerDie1;
    internal Image imgPlayerDie2;
    internal Image imgPlayerDie3;
    internal Button btnEnemyDie;
    internal StackPanel panel_Die_Enemy;
    internal Image imgEnemyDie1;
    internal Image imgEnemyDie2;
    internal Button btnDieStatus;
    internal ScrollViewer scrlOutput;
    internal TextBlock txtOutput;
    internal Viewbox panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool param;

    private List<Player> Players
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Database.worker;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.m_Database.worker = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private List<AuthenticationBridgeRule> CheckManager() => this.m_Database.m_Connection;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ValidateManager(List<AuthenticationBridgeRule> param) => this.m_Database.m_Connection = param;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private List<Registry> AssetManager() => this.m_Database.exporter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindManager(List<Registry> setup) => this.m_Database.exporter = setup;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private AuthenticationBridgeRule InstantiateManager() => this.m_Database.m_Base;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeManager(AuthenticationBridgeRule first) => this.m_Database.m_Base = first;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private AuthenticationBridgeRule RestartManager() => this.m_Database._Server;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PublishManager(AuthenticationBridgeRule v) => this.m_Database._Server = v;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private Player IncludeManager() => this.m_Database.dispatcher;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CreateManager(Player config) => this.m_Database.dispatcher = config;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private GameState ViewManager() => this.m_Database.authentication;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MapManager(GameState reference) => this.m_Database.authentication = reference;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private double GetManager() => this.m_Database.proxy;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MoveManager(double last) => this.m_Database.proxy = last;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private int InsertField() => this.m_Database.m_Attr;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupField(int max_def) => this.m_Database.m_Attr = max_def;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private int QueryField() => this.m_Database.client;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ExcludeField(int mininit) => this.m_Database.client = mininit;

    private SecurityPermissionFlag Map
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Database.m_Container;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.m_Database.m_Container = value;
    }

    private GameMode Gamemode
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Database.m_List;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.m_Database.m_List = value;
    }

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Params;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 5;
        while (true)
        {
          int num2 = num1;
          bool flag1;
          bool flag2;
          while (true)
          {
            switch (num2)
            {
              case 0:
                if (flag1)
                {
                  this.mediaplayer.Pause();
                  goto case 3;
                }
                else
                  goto case 3;
              case 1:
              case 2:
                this.mediaplayer.Play();
                goto case 3;
              case 3:
              case 4:
                this.m_Params = value;
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto case 5;
              case 5:
                flag2 = this.Players.Count != 0;
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 6;
                  continue;
                }
                goto case 1;
              case 6:
                if (flag2)
                {
                  try
                  {
                    ((Human) this.Players[0]).m_Item = value;
                    int num3 = 2;
                    while (true)
                    {
                      switch (num3)
                      {
                        case 0:
                        case 2:
                          goto label_11;
                        case 1:
                        case 3:
                          goto label_16;
                        default:
                          num3 = 3;
                          continue;
                      }
                    }
label_11:
                    Human.TestRequest(this.Players[0] as Human);
                  }
                  catch
                  {
                  }
label_16:;
                }
                if (!value)
                {
                  flag1 = !value;
                  num2 = 0;
                  continue;
                }
                goto label_18;
              case 7:
                goto label_19;
              default:
                goto label_8;
            }
          }
label_8:
          num1 = 4;
          continue;
label_18:
          num1 = 1;
        }
label_19:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.policy;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        if (true)
          goto label_2;
label_1:
        bool flag;
        if (!flag)
          goto label_13;
        else
          goto label_5;
label_2:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 4:
              flag = this.Players.Count != 0;
              if (true)
              {
                num1 = 3;
                continue;
              }
              goto label_5;
            case 1:
            case 3:
              goto label_1;
            case 2:
              goto label_5;
            case 5:
              goto label_10;
            default:
              num1 = 2;
              continue;
          }
        }
label_10:
        return;
label_5:
        try
        {
          ((Human) this.Players[0]).wrapper = value;
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_7;
              case 1:
              case 3:
                goto label_12;
              default:
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_12;
            }
          }
label_7:
          Human.TestRequest(this.Players[0] as Human);
        }
        catch
        {
        }
label_12:
label_13:
        this.policy = value;
        if (false)
          return;
        num1 = 5;
        goto label_2;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ParamsMapperListener(AdapterGetterCandidate res)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              ListenerManager.InitStub();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_3;
            case 1:
              goto label_1;
            case 2:
            case 3:
              goto label_6;
            case 4:
              goto label_3;
            case 6:
              goto label_5;
            case 7:
              goto label_7;
            default:
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 4;
                continue;
              }
              goto label_11;
          }
        }
label_1:
        this.m_Thread = (BackgroundWorker) null;
        this._Rules = new List<FactoryIdentifierAttribute>();
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this.m_Database = res;
        this.CalculateRequest();
        this.m_Database.m_Connection.Sort();
        bool flag = this.InsertField() > 0;
        num1 = 3;
        continue;
label_3:
        this.RevertRequest();
        this.InterruptManager();
label_4:
        this.AwakeManager();
        num1 = 6;
        continue;
label_5:
        this.PrintManager("The game has loaded.");
        num1 = 7;
        continue;
label_6:
        if (!flag)
          goto label_4;
        else
          goto label_3;
      }
label_7:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ParamsMapperListener(
      List<Player> config,
      bool deletevis,
      SecurityPermissionFlag role,
      GameMode first2,
      int sumcfg3,
      double info4)
    {
      ListenerManager.InitStub();
      this.m_Thread = (BackgroundWorker) null;
      this._Rules = new List<FactoryIdentifierAttribute>();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AdapterGetterCandidate.PrintMapper();
      this.m_Database = new AdapterGetterCandidate();
      this.SetupField(sumcfg3 * 100);
      this.Players = config;
      this.Gamemode = first2;
      this.MoveManager(info4);
      this.Map = role;
      this.CalculateRequest();
      this.ExcludeField(0);
      try
      {
        this.GetRequest(false);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("An error occurred loading the map.");
        this.Close();
        return;
      }
      if (this.InsertField() > 0)
        this.RevertRequest();
      this.InsertManager(deletevis);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalculateRequest()
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_12;
            case 2:
            case 5:
              this.DataContext = (object) this;
              this.chkFullscreen.IsChecked = new bool?(true);
              this.m_Params = ((Human) this.Players[0]).m_Item;
              flag = this.m_Params;
              num2 = 7;
              continue;
            case 3:
              this.m_Collection = new SingletonVisitorStruct(this.imgPlayerDie3);
              this._Schema = new GetterBridgeBridge(this.imgEnemyDie1);
              this.m_Account = new GetterBridgeBridge(this.imgEnemyDie2);
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 8;
                continue;
              }
              goto case 2;
            case 4:
              goto label_4;
            case 6:
              this.InitializeComponent();
              if (!ParamsMapperListener.AssetObject())
              {
                num2 = 0;
                continue;
              }
              goto case 3;
            case 7:
              goto label_5;
            case 8:
              goto label_13;
            default:
              num2 = 4;
              continue;
          }
        }
label_4:
        this.dic = new SingletonVisitorStruct(this.imgPlayerDie2);
        num1 = 3;
        continue;
label_5:
        if (flag)
          this.mediaplayer.Play();
        if (this.Gamemode == GameMode.Classic)
        {
          this._Record = new SingletonVisitorStruct(this.imgPlayerDie1);
          goto label_4;
        }
        else
          break;
label_12:
        this._System = false;
        num1 = 5;
      }
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void GetRequest(bool allowinstance)
    {
      int num1 = 18;
      List<Button> buttonList;
      string str;
      List<AuthenticationBridgeRule>.Enumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        AuthenticationBridgeRule authenticationBridgeRule1;
        AuthenticationBridgeRule authenticationBridgeRule2;
        AuthenticationBridgeRule authenticationBridgeRule3;
        AuthenticationBridgeRule authenticationBridgeRule4;
        AuthenticationBridgeRule authenticationBridgeRule5;
        AuthenticationBridgeRule authenticationBridgeRule6;
        AuthenticationBridgeRule authenticationBridgeRule7;
        Registry registry1;
        AuthenticationBridgeRule authenticationBridgeRule8;
        AuthenticationBridgeRule authenticationBridgeRule9;
        AuthenticationBridgeRule authenticationBridgeRule10;
        AuthenticationBridgeRule authenticationBridgeRule11;
        Registry registry2;
        AuthenticationBridgeRule authenticationBridgeRule12;
        AuthenticationBridgeRule authenticationBridgeRule13;
        AuthenticationBridgeRule authenticationBridgeRule14;
        AuthenticationBridgeRule authenticationBridgeRule15;
        Registry registry3;
        AuthenticationBridgeRule authenticationBridgeRule16;
        AuthenticationBridgeRule authenticationBridgeRule17;
        AuthenticationBridgeRule authenticationBridgeRule18;
        AuthenticationBridgeRule authenticationBridgeRule19;
        AuthenticationBridgeRule authenticationBridgeRule20;
        AuthenticationBridgeRule authenticationBridgeRule21;
        AuthenticationBridgeRule authenticationBridgeRule22;
        AuthenticationBridgeRule authenticationBridgeRule23;
        AuthenticationBridgeRule authenticationBridgeRule24;
        AuthenticationBridgeRule authenticationBridgeRule25;
        Button comp1;
        AuthenticationBridgeRule authenticationBridgeRule26;
        AuthenticationBridgeRule authenticationBridgeRule27;
        AuthenticationBridgeRule authenticationBridgeRule28;
        Button comp2;
        AuthenticationBridgeRule authenticationBridgeRule29;
        Button comp3;
        AuthenticationBridgeRule authenticationBridgeRule30;
        Button comp4;
        AuthenticationBridgeRule authenticationBridgeRule31;
        Button comp5;
        AuthenticationBridgeRule authenticationBridgeRule32;
        Button comp6;
        AuthenticationBridgeRule authenticationBridgeRule33;
        AuthenticationBridgeRule authenticationBridgeRule34;
        AuthenticationBridgeRule authenticationBridgeRule35;
        AuthenticationBridgeRule authenticationBridgeRule36;
        AuthenticationBridgeRule authenticationBridgeRule37;
        AuthenticationBridgeRule authenticationBridgeRule38;
        AuthenticationBridgeRule authenticationBridgeRule39;
        AuthenticationBridgeRule authenticationBridgeRule40;
        AuthenticationBridgeRule authenticationBridgeRule41;
        AuthenticationBridgeRule authenticationBridgeRule42;
        AuthenticationBridgeRule authenticationBridgeRule43;
        AuthenticationBridgeRule authenticationBridgeRule44;
        AuthenticationBridgeRule authenticationBridgeRule45;
        AuthenticationBridgeRule authenticationBridgeRule46;
        AuthenticationBridgeRule authenticationBridgeRule47;
        AuthenticationBridgeRule authenticationBridgeRule48;
        AuthenticationBridgeRule authenticationBridgeRule49;
        AuthenticationBridgeRule authenticationBridgeRule50;
        AuthenticationBridgeRule authenticationBridgeRule51;
        AuthenticationBridgeRule authenticationBridgeRule52;
        AuthenticationBridgeRule authenticationBridgeRule53;
        Button comp7;
        Button comp8;
        Button comp9;
        Button comp10;
        Button comp11;
        Button comp12;
        Button comp13;
        Button comp14;
        Button comp15;
        Button comp16;
        Button comp17;
        Button comp18;
        Button comp19;
        Button comp20;
        Button comp21;
        Button comp22;
        Button comp23;
        Button comp24;
        Button comp25;
        Button comp26;
        Button comp27;
        AuthenticationBridgeRule authenticationBridgeRule54;
        AuthenticationBridgeRule authenticationBridgeRule55;
        AuthenticationBridgeRule authenticationBridgeRule56;
        AuthenticationBridgeRule authenticationBridgeRule57;
        Registry registry4;
        Registry registry5;
        Registry registry6;
        Registry registry7;
        bool flag;
        AuthenticationBridgeRule authenticationBridgeRule58;
        AuthenticationBridgeRule authenticationBridgeRule59;
        AuthenticationBridgeRule authenticationBridgeRule60;
        AuthenticationBridgeRule authenticationBridgeRule61;
        AuthenticationBridgeRule authenticationBridgeRule62;
        AuthenticationBridgeRule authenticationBridgeRule63;
        AuthenticationBridgeRule authenticationBridgeRule64;
        AuthenticationBridgeRule authenticationBridgeRule65;
        AuthenticationBridgeRule authenticationBridgeRule66;
        AuthenticationBridgeRule authenticationBridgeRule67;
        AuthenticationBridgeRule authenticationBridgeRule68;
        AuthenticationBridgeRule authenticationBridgeRule69;
        AuthenticationBridgeRule authenticationBridgeRule70;
        AuthenticationBridgeRule authenticationBridgeRule71;
        AuthenticationBridgeRule authenticationBridgeRule72;
        AuthenticationBridgeRule authenticationBridgeRule73;
        AuthenticationBridgeRule authenticationBridgeRule74;
        AuthenticationBridgeRule authenticationBridgeRule75;
        AuthenticationBridgeRule authenticationBridgeRule76;
        AuthenticationBridgeRule authenticationBridgeRule77;
        AuthenticationBridgeRule authenticationBridgeRule78;
        AuthenticationBridgeRule authenticationBridgeRule79;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 36:
              registry1 = new Registry("Queens", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule1,
                authenticationBridgeRule2,
                authenticationBridgeRule3,
                authenticationBridgeRule4,
                authenticationBridgeRule5,
                authenticationBridgeRule6,
                authenticationBridgeRule7
              }, 5);
              registry2 = new Registry("Staten_Island", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule8,
                authenticationBridgeRule9,
                authenticationBridgeRule10,
                authenticationBridgeRule11
              }, 2);
              registry3 = new Registry("Bronx", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule12,
                authenticationBridgeRule13,
                authenticationBridgeRule14,
                authenticationBridgeRule15
              }, 2);
              num2 = 17;
              continue;
            case 1:
              goto label_68;
            case 2:
              goto label_63;
            case 3:
              authenticationBridgeRule42 = new AuthenticationBridgeRule("Canarsie", new List<string>()
              {
                "East_New_York",
                "Flatbush",
                "Bedford_Stuyvesant",
                "Flatlands"
              }, comp25);
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 29;
                continue;
              }
              goto label_45;
            case 4:
              comp4 = this.MoveRequest("btnBorough_Park", new Thickness(441.0, 243.0, 613.0, 251.0));
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 6;
            case 5:
              authenticationBridgeRule5 = new AuthenticationBridgeRule("Flushing", new List<string>()
              {
                "Bayside",
                "Middle_Village",
                "Unionport"
              }, comp11);
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 30;
                continue;
              }
              goto case 35;
            case 6:
              this.ValidateManager(new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule1,
                authenticationBridgeRule2,
                authenticationBridgeRule3,
                authenticationBridgeRule4,
                authenticationBridgeRule5,
                authenticationBridgeRule6,
                authenticationBridgeRule7,
                authenticationBridgeRule8,
                authenticationBridgeRule9,
                authenticationBridgeRule10,
                authenticationBridgeRule11,
                authenticationBridgeRule12,
                authenticationBridgeRule13,
                authenticationBridgeRule14,
                authenticationBridgeRule15,
                authenticationBridgeRule34,
                authenticationBridgeRule35,
                authenticationBridgeRule36,
                authenticationBridgeRule37,
                authenticationBridgeRule38,
                authenticationBridgeRule39,
                authenticationBridgeRule40,
                authenticationBridgeRule41,
                authenticationBridgeRule42,
                authenticationBridgeRule29,
                authenticationBridgeRule30,
                authenticationBridgeRule32,
                authenticationBridgeRule33,
                authenticationBridgeRule43,
                authenticationBridgeRule44,
                authenticationBridgeRule45,
                authenticationBridgeRule26,
                authenticationBridgeRule27,
                authenticationBridgeRule31,
                authenticationBridgeRule28,
                authenticationBridgeRule46,
                authenticationBridgeRule47,
                authenticationBridgeRule48,
                authenticationBridgeRule49,
                authenticationBridgeRule50,
                authenticationBridgeRule51,
                authenticationBridgeRule52,
                authenticationBridgeRule53
              });
              num2 = 0;
              continue;
            case 7:
              goto label_54;
            case 8:
              goto label_56;
            case 9:
              goto label_11;
            case 10:
              goto label_45;
            case 11:
              goto label_3;
            case 12:
              goto label_41;
            case 13:
              if (this.Map == SecurityPermissionFlag.Default && !allowinstance)
              {
                authenticationBridgeRule24 = new AuthenticationBridgeRule("Alaska", new List<string>()
                {
                  "Kamchatka",
                  "Alberta",
                  "Northwest_Canada"
                }, this.btnAlaska);
                authenticationBridgeRule25 = new AuthenticationBridgeRule("Northwest_Canada", new List<string>()
                {
                  "Alaska",
                  "Alberta",
                  "Greenland",
                  "Ontario"
                }, this.btnNorthwest_Canada);
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 32;
                  continue;
                }
                goto case 14;
              }
              else if (this.Map != 0)
              {
                this.GameGrid.Children.Clear();
                flag = this.Map == SecurityPermissionFlag.NewYork;
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 35;
                  continue;
                }
                goto case 3;
              }
              else
                goto label_27;
            case 14:
              comp1 = this.MoveRequest("btnEast_New_York", new Thickness(506.0, 339.0, 541.0, 155.0));
              num2 = 40;
              continue;
            case 15:
              authenticationBridgeRule75 = new AuthenticationBridgeRule("Mongolia", new List<string>()
              {
                "China",
                "Siberia",
                "Irkutsk",
                "Kamchatka",
                "Japan"
              }, this.btnMongolia);
              authenticationBridgeRule79 = new AuthenticationBridgeRule("Japan", new List<string>()
              {
                "Mongolia",
                "Kamchatka"
              }, this.btnJapan);
              authenticationBridgeRule76 = new AuthenticationBridgeRule("Irkutsk", new List<string>()
              {
                "Siberia",
                "Yakutsk",
                "Kamchatka",
                "Mongolia"
              }, this.btnIrkutsk);
              authenticationBridgeRule77 = new AuthenticationBridgeRule("Yakutsk", new List<string>()
              {
                "Siberia",
                "Kamchatka",
                "Irkutsk"
              }, this.btnYakutsk);
              authenticationBridgeRule78 = new AuthenticationBridgeRule("Kamchatka", new List<string>()
              {
                "Yakutsk",
                "Alaska",
                "Japan",
                "Mongolia",
                "Irkutsk"
              }, this.btnKamchatka);
              authenticationBridgeRule67 = new AuthenticationBridgeRule("Indonesia", new List<string>()
              {
                "New_Guinea",
                "Southeast_Asia",
                "Western_Australia"
              }, this.btnIndonesia);
              num2 = 16;
              continue;
            case 16:
              goto label_49;
            case 17:
              goto label_70;
            case 18:
              buttonList = new List<Button>();
              num2 = 13;
              continue;
            case 19:
              registry4 = new Registry("Europe", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule55,
                authenticationBridgeRule54,
                authenticationBridgeRule16,
                authenticationBridgeRule56,
                authenticationBridgeRule66,
                authenticationBridgeRule57,
                authenticationBridgeRule17
              }, 5);
              registry5 = new Registry("Africa", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule20,
                authenticationBridgeRule21,
                authenticationBridgeRule19,
                authenticationBridgeRule23,
                authenticationBridgeRule18,
                authenticationBridgeRule22
              }, 3);
              registry6 = new Registry("Asia", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule69,
                authenticationBridgeRule73,
                authenticationBridgeRule70,
                authenticationBridgeRule76,
                authenticationBridgeRule79,
                authenticationBridgeRule78,
                authenticationBridgeRule68,
                authenticationBridgeRule75,
                authenticationBridgeRule74,
                authenticationBridgeRule72,
                authenticationBridgeRule71,
                authenticationBridgeRule77
              }, 7);
              registry7 = new Registry("Australia", new List<AuthenticationBridgeRule>()
              {
                authenticationBridgeRule60,
                authenticationBridgeRule67,
                authenticationBridgeRule58,
                authenticationBridgeRule59
              }, 2);
              num2 = 12;
              continue;
            case 20:
            case 24:
              goto label_53;
            case 21:
              authenticationBridgeRule61 = new AuthenticationBridgeRule("Alberta", new List<string>()
              {
                "Alaska",
                "Northwest_Canada",
                "Ontario",
                "Western_US"
              }, this.btnAlberta);
              authenticationBridgeRule62 = new AuthenticationBridgeRule("Quebec", new List<string>()
              {
                "Ontario",
                "Greenland",
                "Eastern_US"
              }, this.btnQuebec);
              authenticationBridgeRule63 = new AuthenticationBridgeRule("Ontario", new List<string>()
              {
                "Greenland",
                "Quebec",
                "Eastern_US",
                "Western_US",
                "Northwest_Canada",
                "Alberta"
              }, this.btnOntario);
              authenticationBridgeRule64 = new AuthenticationBridgeRule("Western_US", new List<string>()
              {
                "Quebec",
                "Ontario",
                "Eastern_US",
                "Central_America",
                "Alberta"
              }, this.btnWestern_US);
              authenticationBridgeRule65 = new AuthenticationBridgeRule("Eastern_US", new List<string>()
              {
                "Western_US",
                "Ontario",
                "Central America",
                "Quebec"
              }, this.btnEastern_US);
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 37;
                continue;
              }
              goto label_70;
            case 22:
              if (!allowinstance)
              {
                authenticationBridgeRule1 = new AuthenticationBridgeRule("Rockaway", new List<string>()
                {
                  "Sheepshead_Bay",
                  "South_Queens"
                }, comp7);
                authenticationBridgeRule2 = new AuthenticationBridgeRule("Saint_Albans", new List<string>()
                {
                  "South_Queens",
                  "Bayside"
                }, comp8);
                authenticationBridgeRule3 = new AuthenticationBridgeRule("Bayside", new List<string>()
                {
                  "Saint_Albans",
                  "Flushing",
                  "South_Queens"
                }, comp9);
                authenticationBridgeRule4 = new AuthenticationBridgeRule("South_Queens", new List<string>()
                {
                  "East_New_York",
                  "Rockaway",
                  "Middle_Village",
                  "Saint_Albans",
                  "Bayside"
                }, comp10);
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto case 34;
              }
              else
                goto label_26;
            case 23:
              authenticationBridgeRule43 = new AuthenticationBridgeRule("Bay_Ridge", new List<string>()
              {
                "Dongan_Hills",
                "Borough_Park",
                "Park_Slope",
                "Sheepshead_Bay"
              }, comp26);
              authenticationBridgeRule44 = new AuthenticationBridgeRule("Coney_Island", new List<string>()
              {
                "Sheepshead_Bay"
              }, comp27);
              num2 = 33;
              continue;
            case 25:
              goto label_24;
            case 26:
              goto label_23;
            case 27:
              goto label_72;
            case 28:
              authenticationBridgeRule10 = new AuthenticationBridgeRule("Dongan_Hills", new List<string>()
              {
                "Woodrow",
                "Emerson_Hill",
                "Port_Richmond",
                "Bay_Ridge"
              }, comp12);
              authenticationBridgeRule11 = new AuthenticationBridgeRule("Port_Richmond", new List<string>()
              {
                "Bayonne",
                "Dongan_Hills",
                "Emerson_Hill"
              }, comp13);
              authenticationBridgeRule12 = new AuthenticationBridgeRule("Unionport", new List<string>()
              {
                "Flushing",
                "Laconia",
                "Concourse"
              }, comp14);
              authenticationBridgeRule13 = new AuthenticationBridgeRule("Laconia", new List<string>()
              {
                "Unionport",
                "Concourse",
                "Riverdale"
              }, comp15);
              authenticationBridgeRule14 = new AuthenticationBridgeRule("Concourse", new List<string>()
              {
                "Unionport",
                "Astoria",
                "Washington_Heights",
                "Riverdale",
                "Laconia"
              }, comp16);
              authenticationBridgeRule15 = new AuthenticationBridgeRule("Riverdale", new List<string>()
              {
                "Laconia",
                "Concourse"
              }, comp17);
              authenticationBridgeRule34 = new AuthenticationBridgeRule("Bayonne", new List<string>()
              {
                "Port_Richmond",
                "Jersey_City"
              }, comp18);
              authenticationBridgeRule35 = new AuthenticationBridgeRule("Jersey_City", new List<string>()
              {
                "Bayonne",
                "Hoboken",
                "North_Bergen"
              }, comp19);
              authenticationBridgeRule36 = new AuthenticationBridgeRule("Hoboken", new List<string>()
              {
                "Jersey_City",
                "Union_City",
                "North_Bergen"
              }, comp20);
              authenticationBridgeRule38 = new AuthenticationBridgeRule("Union_City", new List<string>()
              {
                "Hoboken",
                "North_Bergen"
              }, comp22);
              authenticationBridgeRule37 = new AuthenticationBridgeRule("North_Bergen", new List<string>()
              {
                "Hoboken",
                "Union_City",
                "Palisades_Park",
                "Jersey_City"
              }, comp21);
              authenticationBridgeRule39 = new AuthenticationBridgeRule("Palisades_Park", new List<string>()
              {
                "North_Bergen",
                "Washington_Heights",
                "Englewood"
              }, comp23);
              num2 = 34;
              continue;
            case 29:
              authenticationBridgeRule29 = new AuthenticationBridgeRule("Bedford_Stuyvesant", new List<string>()
              {
                "Canarsie",
                "East_New_York",
                "Flatbush",
                "Park_Slope",
                "Williamsburg",
                "Red_Hook",
                "Middle_Village"
              }, comp2);
              authenticationBridgeRule30 = new AuthenticationBridgeRule("Flatbush", new List<string>()
              {
                "Canarsie",
                "Bedford_Stuyvesant",
                "Flatlands",
                "Borough_Park",
                "Park_Slope"
              }, comp3);
              authenticationBridgeRule31 = new AuthenticationBridgeRule("Borough_Park", new List<string>()
              {
                "Park_Slope",
                "Flatbush",
                "Flatlands",
                "Sheepshead_Bay",
                "Bay_Ridge"
              }, comp4);
              authenticationBridgeRule32 = new AuthenticationBridgeRule("Flatlands", new List<string>()
              {
                "Canarsie",
                "Flatbush",
                "Borough_Park",
                "Sheepshead_Bay"
              }, comp5);
              authenticationBridgeRule33 = new AuthenticationBridgeRule("Sheepshead_Bay", new List<string>()
              {
                "Bay_Ridge",
                "Borough_Park",
                "Flatlands",
                "Coney_Island",
                "Rockaway"
              }, comp6);
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 23;
                continue;
              }
              goto case 4;
            case 30:
              goto label_57;
            case 31:
              goto label_66;
            case 32:
              goto label_61;
            case 33:
              goto label_64;
            case 34:
              authenticationBridgeRule40 = new AuthenticationBridgeRule("Englewood", new List<string>()
              {
                "Palisades_Park"
              }, comp24);
              authenticationBridgeRule41 = new AuthenticationBridgeRule("East_New_York", new List<string>()
              {
                "Canarsie",
                "Bedford_Stuyvesant",
                "Middle_Village",
                "South_Queens"
              }, comp1);
              num2 = 3;
              continue;
            case 35:
              if (flag)
              {
                this.m_Listener.ImageSource = (ImageSource) new BitmapImage(new Uri("pack://siteoforigin:,,,/Images/Maps/NewYork.jpg"));
                this.m_Listener.Stretch = Stretch.Uniform;
                comp7 = this.MoveRequest("btnRockaway", new Thickness(376.0, 395.0, 667.0, 98.0));
                num2 = 31;
                continue;
              }
              goto label_25;
            case 37:
              goto label_55;
            case 38:
              goto label_7;
            case 39:
              goto label_67;
            case 40:
              goto label_62;
            case 41:
              goto label_73;
            default:
              if (true)
              {
                num2 = 24;
                continue;
              }
              goto label_49;
          }
        }
label_3:
        authenticationBridgeRule16 = new AuthenticationBridgeRule("Northern_Europe", new List<string>()
        {
          "UK_Ireland",
          "Scandinavia",
          "Soviet_Bloc",
          "Southern_Europe",
          "Western_Europe"
        }, this.btnNorthern_Europe);
        authenticationBridgeRule17 = new AuthenticationBridgeRule("Western_Europe", new List<string>()
        {
          "UK_Ireland",
          "Northern_Europe",
          "Southern_Europe",
          "North_Africa"
        }, this.btnWestern_Europe);
        authenticationBridgeRule18 = new AuthenticationBridgeRule("North_Africa", new List<string>()
        {
          "Brazil",
          "Egypt",
          "East_Africa",
          "Central_Africa",
          "Western_Europe",
          "Southern_Europe"
        }, this.btnNorth_Africa);
        authenticationBridgeRule19 = new AuthenticationBridgeRule("Egypt", new List<string>()
        {
          "North_Africa",
          "Southern_Europe",
          "Middle_East",
          "East_Africa"
        }, this.btnEgypt);
        authenticationBridgeRule20 = new AuthenticationBridgeRule("Central_Africa", new List<string>()
        {
          "North_Africa",
          "East_Africa",
          "South_Africa"
        }, this.btnCentral_Africa);
        authenticationBridgeRule21 = new AuthenticationBridgeRule("East_Africa", new List<string>()
        {
          "Egypt",
          "Middle_East",
          "Madagascar",
          "South_Africa",
          "Central_Africa",
          "North_Africa"
        }, this.btnEast_Africa);
        authenticationBridgeRule22 = new AuthenticationBridgeRule("South_Africa", new List<string>()
        {
          "Central_Africa",
          "East_Africa",
          "Madagascar"
        }, this.btnSouth_Africa);
        authenticationBridgeRule23 = new AuthenticationBridgeRule("Madagascar", new List<string>()
        {
          "South_Africa",
          "East_Africa"
        }, this.btnMadagascar);
        num1 = 8;
        continue;
label_7:
        Button comp28;
        authenticationBridgeRule26 = new AuthenticationBridgeRule("Red_Hook", new List<string>()
        {
          "Park_Slope",
          "Bedford_Stuyvesant"
        }, comp28);
        Button comp29;
        authenticationBridgeRule27 = new AuthenticationBridgeRule("Williamsburg", new List<string>()
        {
          "Bedford_Stuyvesant",
          "Lower_East_Side",
          "Middle_Village"
        }, comp29);
        Button comp30;
        authenticationBridgeRule28 = new AuthenticationBridgeRule("Lower_East_Side", new List<string>()
        {
          "Williamsburg",
          "Financial_District",
          "Midtown_East"
        }, comp30);
        num1 = 7;
        continue;
label_11:
        Button comp31 = this.MoveRequest("btnUpper_West_Side", new Thickness(651.0, 228.0, 399.0, 273.0));
        Button comp32 = this.MoveRequest("btnCentral_Park", new Thickness(668.0, 247.0, 382.0, 253.0));
        Button comp33 = this.MoveRequest("btnUpper_East_Side", new Thickness(639.0, 257.0, 412.0, 244.0));
        Button comp34;
        Button comp35;
        Button comp36;
        Button comp37;
        Button comp38;
        Button comp39;
        Button comp40;
        Button comp41;
        Button comp42;
        Button comp43;
        buttonList = new List<Button>()
        {
          comp7,
          comp8,
          comp9,
          comp10,
          comp11,
          comp34,
          comp35,
          comp36,
          comp37,
          comp12,
          comp13,
          comp14,
          comp15,
          comp16,
          comp17,
          comp18,
          comp19,
          comp20,
          comp21,
          comp22,
          comp23,
          comp24,
          comp1,
          comp25,
          comp2,
          comp3,
          comp5,
          comp6,
          comp26,
          comp27,
          comp38,
          comp28,
          comp29,
          comp4,
          comp30,
          comp39,
          comp40,
          comp41,
          comp33,
          comp31,
          comp32,
          comp42,
          comp43
        };
        foreach (Button element in buttonList)
        {
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                goto label_14;
              case 1:
              case 3:
                goto label_17;
              default:
                if (true)
                {
                  num3 = 3;
                  continue;
                }
                goto label_17;
            }
          }
label_14:
          this.GameGrid.Children.Add((UIElement) element);
label_17:;
        }
        this.GameGrid.UpdateLayout();
        num1 = 22;
        continue;
label_23:
        AuthenticationBridgeRule authenticationBridgeRule80 = new AuthenticationBridgeRule("Venezuela", new List<string>()
        {
          "Central_America",
          "Peru",
          "Brazil"
        }, this.btnVenezuela);
        AuthenticationBridgeRule authenticationBridgeRule81 = new AuthenticationBridgeRule("Peru", new List<string>()
        {
          "Venezuela",
          "Brazil",
          "Argentina"
        }, this.btnPeru);
        AuthenticationBridgeRule authenticationBridgeRule82 = new AuthenticationBridgeRule("Brazil", new List<string>()
        {
          "Venezuela",
          "Peru",
          "Argentina",
          "North_Africa"
        }, this.btnBrazil);
        AuthenticationBridgeRule authenticationBridgeRule83 = new AuthenticationBridgeRule("Argentina", new List<string>()
        {
          "Peru",
          "Brazil"
        }, this.btnArgentina);
        authenticationBridgeRule54 = new AuthenticationBridgeRule("Iceland", new List<string>()
        {
          "Greenland",
          "Scandinavia",
          "UK_Ireland"
        }, this.btnIceland);
        authenticationBridgeRule55 = new AuthenticationBridgeRule("UK_Ireland", new List<string>()
        {
          "Iceland",
          "Western_Europe",
          "Northern_Europe",
          "Scandinavia"
        }, this.btnUK_Ireland);
        authenticationBridgeRule56 = new AuthenticationBridgeRule("Scandinavia", new List<string>()
        {
          "Iceland",
          "UK_Ireland",
          "Northern_Europe",
          "Soviet_Bloc"
        }, this.btnScandinavia);
        authenticationBridgeRule57 = new AuthenticationBridgeRule("Soviet_Bloc", new List<string>()
        {
          "Scandinavia",
          "Northern_Europe",
          "Southern_Europe",
          "Ural",
          "Afghanistan",
          "Middle_East"
        }, this.btnSoviet_Bloc);
        num1 = 2;
        continue;
label_24:
        Registry registry8 = new Registry("Manhattan", new List<AuthenticationBridgeRule>()
        {
          authenticationBridgeRule28,
          authenticationBridgeRule46,
          authenticationBridgeRule47,
          authenticationBridgeRule48,
          authenticationBridgeRule49,
          authenticationBridgeRule50,
          authenticationBridgeRule51,
          authenticationBridgeRule52,
          authenticationBridgeRule53
        }, 5);
        Registry registry9 = new Registry("Brooklyn", new List<AuthenticationBridgeRule>()
        {
          authenticationBridgeRule41,
          authenticationBridgeRule42,
          authenticationBridgeRule29,
          authenticationBridgeRule30,
          authenticationBridgeRule32,
          authenticationBridgeRule33,
          authenticationBridgeRule43,
          authenticationBridgeRule44,
          authenticationBridgeRule45,
          authenticationBridgeRule26,
          authenticationBridgeRule27
        }, 7);
        Registry registry10;
        this.FindManager(new List<Registry>()
        {
          registry1,
          registry2,
          registry3,
          registry10,
          registry8,
          registry9
        });
label_26:
label_27:
        if (allowinstance)
        {
          str = "btn";
          if (this.Map != SecurityPermissionFlag.Default)
          {
            enumerator1 = this.CheckManager().GetEnumerator();
            num1 = 41;
            continue;
          }
          goto label_29;
        }
        else
          goto label_81;
label_41:
        Registry registry11;
        Registry registry12;
        this.FindManager(new List<Registry>()
        {
          registry11,
          registry12,
          registry4,
          registry5,
          registry6,
          registry7
        });
        goto label_27;
label_45:
        comp18 = this.MoveRequest("btnBayonne", new Thickness(474.0, 116.0, 578.0, 382.0));
        comp19 = this.MoveRequest("btnJersey_City", new Thickness(544.0, 147.0, 488.0, 347.0));
        comp21 = this.MoveRequest("btnNorth_Bergen", new Thickness(637.0, 165.0, 392.0, 329.0));
        comp20 = this.MoveRequest("btnHoboken", new Thickness(586.0, 186.0, 460.0, 312.0));
        goto label_53;
label_49:
        authenticationBridgeRule58 = new AuthenticationBridgeRule("New_Guinea", new List<string>()
        {
          "Indonesia",
          "Eastern_Australia",
          "Western_Australia"
        }, this.btnNew_Guinea);
        authenticationBridgeRule59 = new AuthenticationBridgeRule("Western_Australia", new List<string>()
        {
          "Eastern_Australia",
          "New_Guinea",
          "Indonesia"
        }, this.btnWestern_Australia);
        authenticationBridgeRule60 = new AuthenticationBridgeRule("Eastern_Australia", new List<string>()
        {
          "Western_Australia",
          "New_Guinea"
        }, this.btnEastern_Australia);
        AuthenticationBridgeRule authenticationBridgeRule84;
        AuthenticationBridgeRule authenticationBridgeRule85;
        this.ValidateManager(new List<AuthenticationBridgeRule>()
        {
          authenticationBridgeRule24,
          authenticationBridgeRule25,
          authenticationBridgeRule84,
          authenticationBridgeRule61,
          authenticationBridgeRule62,
          authenticationBridgeRule63,
          authenticationBridgeRule64,
          authenticationBridgeRule65,
          authenticationBridgeRule85,
          authenticationBridgeRule80,
          authenticationBridgeRule81,
          authenticationBridgeRule82,
          authenticationBridgeRule83,
          authenticationBridgeRule54,
          authenticationBridgeRule56,
          authenticationBridgeRule55,
          authenticationBridgeRule57,
          authenticationBridgeRule16,
          authenticationBridgeRule17,
          authenticationBridgeRule66,
          authenticationBridgeRule18,
          authenticationBridgeRule19,
          authenticationBridgeRule21,
          authenticationBridgeRule20,
          authenticationBridgeRule22,
          authenticationBridgeRule23,
          authenticationBridgeRule67,
          authenticationBridgeRule58,
          authenticationBridgeRule60,
          authenticationBridgeRule59,
          authenticationBridgeRule68,
          authenticationBridgeRule69,
          authenticationBridgeRule70,
          authenticationBridgeRule71,
          authenticationBridgeRule72,
          authenticationBridgeRule73,
          authenticationBridgeRule74,
          authenticationBridgeRule75,
          authenticationBridgeRule76,
          authenticationBridgeRule77,
          authenticationBridgeRule78,
          authenticationBridgeRule79
        });
        registry11 = new Registry("North America", new List<AuthenticationBridgeRule>()
        {
          authenticationBridgeRule24,
          authenticationBridgeRule61,
          authenticationBridgeRule85,
          authenticationBridgeRule65,
          authenticationBridgeRule84,
          authenticationBridgeRule25,
          authenticationBridgeRule63,
          authenticationBridgeRule62,
          authenticationBridgeRule64
        }, 5);
        registry12 = new Registry("South America", new List<AuthenticationBridgeRule>()
        {
          authenticationBridgeRule83,
          authenticationBridgeRule82,
          authenticationBridgeRule81,
          authenticationBridgeRule80
        }, 2);
        num1 = 19;
        continue;
label_53:
        comp22 = this.MoveRequest("btnUnion_City", new Thickness(653.0, 199.0, 394.0, 300.0));
        comp23 = this.MoveRequest("btnPalisades_Park", new Thickness(742.0, 211.0, 293.0, 283.0));
        comp24 = this.MoveRequest("btnEnglewood", new Thickness(802.0, 224.0, 239.0, 270.0));
        num1 = 27;
        continue;
label_54:
        authenticationBridgeRule46 = new AuthenticationBridgeRule("Financial_District", new List<string>()
        {
          "Midtown_East",
          "Lower_East_Side",
          "Hells_Kitchen"
        }, comp39);
        authenticationBridgeRule47 = new AuthenticationBridgeRule("Midtown_East", new List<string>()
        {
          "Financial_District",
          "Lower_East_Side",
          "Hells_Kitchen",
          "Upper_West_Side",
          "Central_Park",
          "Upper_East_Side"
        }, comp40);
        num1 = 39;
        continue;
label_55:
        authenticationBridgeRule85 = new AuthenticationBridgeRule("Central_America", new List<string>()
        {
          "Western_US",
          "Eastern_US",
          "Venezuela"
        }, this.btnCentral_America);
        num1 = 26;
        continue;
label_56:
        authenticationBridgeRule68 = new AuthenticationBridgeRule("Middle_East", new List<string>()
        {
          "Southern_Europe",
          "Soviet_Bloc",
          "Afghanistan",
          "India",
          "East_Africa",
          "Egypt"
        }, this.btnMiddle_East);
        authenticationBridgeRule69 = new AuthenticationBridgeRule("Afghanistan", new List<string>()
        {
          "Middle_East",
          "Soviet_Bloc",
          "Ural",
          "China",
          "India"
        }, this.btnAfghanistan);
        authenticationBridgeRule70 = new AuthenticationBridgeRule("India", new List<string>()
        {
          "Middle_East",
          "Afghanistan",
          "China",
          "Southeast_Asia"
        }, this.btnIndia);
        authenticationBridgeRule74 = new AuthenticationBridgeRule("Southeast_Asia", new List<string>()
        {
          "India",
          "China",
          "Indonesia"
        }, this.btnSoutheast_Asia);
        authenticationBridgeRule73 = new AuthenticationBridgeRule("China", new List<string>()
        {
          "Afghanistan",
          "Ural",
          "Siberia",
          "Mongolia",
          "Southeast_Asia",
          "India"
        }, this.btnChina);
        authenticationBridgeRule71 = new AuthenticationBridgeRule("Ural", new List<string>()
        {
          "Soviet_Bloc",
          "Siberia",
          "China",
          "Afghanistan"
        }, this.btnUral);
        authenticationBridgeRule72 = new AuthenticationBridgeRule("Siberia", new List<string>()
        {
          "Ural",
          "Yakutsk",
          "Irkutsk",
          "Mongolia",
          "China"
        }, this.btnSiberia);
        num1 = 15;
        continue;
label_57:
        authenticationBridgeRule6 = new AuthenticationBridgeRule("Middle_Village", new List<string>()
        {
          "Flushing",
          "Bayside",
          "South_Queens",
          "East_New_York",
          "Bedford_Stuyvesant",
          "Williamsburg",
          "Astoria"
        }, comp34);
        authenticationBridgeRule7 = new AuthenticationBridgeRule("Astoria", new List<string>()
        {
          "Middle_Village",
          "Upper_East_Side",
          "Concourse"
        }, comp35);
        authenticationBridgeRule8 = new AuthenticationBridgeRule("Woodrow", new List<string>()
        {
          "Emerson_Hill",
          "Dongan_Hills"
        }, comp36);
        authenticationBridgeRule9 = new AuthenticationBridgeRule("Emerson_Hill", new List<string>()
        {
          "Dongan_Hills",
          "Woodrow",
          "Port_Richmond"
        }, comp37);
        num1 = 28;
        continue;
label_61:
        authenticationBridgeRule84 = new AuthenticationBridgeRule("Greenland", new List<string>()
        {
          "Northwest_Canada",
          "Quebec",
          "Ontario",
          "Iceland"
        }, this.btnGreenland);
        num1 = 21;
        continue;
label_62:
        comp25 = this.MoveRequest("btnCanarsie", new Thickness(457.0, 325.0, 596.0, 171.0));
        comp5 = this.MoveRequest("btnFlatlands", new Thickness(430.0, 299.0, 622.0, 194.0));
        comp6 = this.MoveRequest("btnSheepshead_Bay", new Thickness(390.0, 276.0, 658.0, 217.0));
        comp27 = this.MoveRequest("btnConey_Island", new Thickness(358.0, 252.0, 694.0, 242.0));
        comp26 = this.MoveRequest("btnBay_Ridge", new Thickness(411.0, 208.0, 632.0, 286.0));
        comp3 = this.MoveRequest("btnFlatbush", new Thickness(469.0, 283.0, 585.0, 211.0));
        comp38 = this.MoveRequest("btnPark_Slope", new Thickness(494.0, 244.0, 564.0, 254.0));
        num1 = 4;
        continue;
label_63:
        authenticationBridgeRule66 = new AuthenticationBridgeRule("Southern_Europe", new List<string>()
        {
          "Western_Europe",
          "Northern_Europe",
          "Soviet_Bloc",
          "Middle_East",
          "Egypt"
        }, this.btnSouthern_Europe);
        num1 = 11;
        continue;
label_64:
        authenticationBridgeRule45 = new AuthenticationBridgeRule("Park_Slope", new List<string>()
        {
          "Red_Hook",
          "Bedford_Stuyvesant",
          "Flatbush",
          "Borough_Park",
          "Bay_Ridge"
        }, comp38);
        num1 = 38;
        continue;
label_66:
        comp8 = this.MoveRequest("btnSaint_Albans", new Thickness(521.0, 458.0, 488.0, 36.0));
        comp10 = this.MoveRequest("btnSouth_Queens", new Thickness(518.0, 384.0, 514.0, 110.0));
        comp9 = this.MoveRequest("btnBayside", new Thickness(606.0, 445.0, 413.0, 49.0));
        comp11 = this.MoveRequest("btnFlushing", new Thickness(618.0, 386.0, 377.0, 108.0));
        comp34 = this.MoveRequest("btnMiddle_Village", new Thickness(565.0, 340.0, 478.0, 154.0));
        comp35 = this.MoveRequest("btnAstoria", new Thickness(614.0, 305.0, 418.0, 189.0));
        num1 = 14;
        continue;
label_67:
        authenticationBridgeRule48 = new AuthenticationBridgeRule("Hells_Kitchen", new List<string>()
        {
          "Financial_District",
          "Midtown_East",
          "Upper_West_Side"
        }, comp41);
        authenticationBridgeRule50 = new AuthenticationBridgeRule("Upper_West_Side", new List<string>()
        {
          "Midtown_East",
          "Hells_Kitchen",
          "Central_Park",
          "Harlem"
        }, comp31);
        authenticationBridgeRule51 = new AuthenticationBridgeRule("Central_Park", new List<string>()
        {
          "Midtown_East",
          "Harlem",
          "Upper_West_Side",
          "Upper_East_Side"
        }, comp32);
        authenticationBridgeRule49 = new AuthenticationBridgeRule("Upper_East_Side", new List<string>()
        {
          "Midtown_East",
          "Harlem",
          "Central_Park",
          "Astoria"
        }, comp33);
        authenticationBridgeRule52 = new AuthenticationBridgeRule("Harlem", new List<string>()
        {
          "Upper_West_Side",
          "Central_Park",
          "Upper_East_Side",
          "Washington_Heights"
        }, comp42);
        authenticationBridgeRule53 = new AuthenticationBridgeRule("Washington_Heights", new List<string>()
        {
          "Harlem",
          "Concourse",
          "Palisades_Park"
        }, comp43);
        num1 = 6;
        continue;
label_68:
        comp2 = this.MoveRequest("btnBedford_Stuyvesant", new Thickness(522.0, 282.0, 528.0, 212.0));
        comp28 = this.MoveRequest("btnRed_Hook", new Thickness(520.0, 230.0, 534.0, 268.0));
        comp29 = this.MoveRequest("btnWilliamsburg", new Thickness(562.0, 266.0, 486.0, 228.0));
        comp36 = this.MoveRequest("btnWoodrow", new Thickness(274.0, 55.0, 747.0, 439.0));
        comp12 = this.MoveRequest("btnDongan_Hills", new Thickness(367.0, 163.0, 665.0, 331.0));
        comp13 = this.MoveRequest("btnPort_Richmond", new Thickness(413.0, 129.0, 625.0, 365.0));
        comp37 = this.MoveRequest("btnEmerson_Hill", new Thickness(350.0, 99.0, 683.0, 395.0));
        num1 = 10;
        continue;
label_70:
        registry10 = new Registry("New_Jersey", new List<AuthenticationBridgeRule>()
        {
          authenticationBridgeRule34,
          authenticationBridgeRule35,
          authenticationBridgeRule36,
          authenticationBridgeRule37,
          authenticationBridgeRule38,
          authenticationBridgeRule39,
          authenticationBridgeRule40
        }, 3);
        num1 = 25;
        continue;
label_72:
        comp17 = this.MoveRequest("btnRiverdale", new Thickness(824.0, 293.0, 223.0, 201.0));
        comp15 = this.MoveRequest("btnLaconia", new Thickness(787.0, 337.0, 241.0, 157.0));
        comp43 = this.MoveRequest("btnWashington_Heights", new Thickness(764.0, 266.0, 275.0, 232.0));
        comp14 = this.MoveRequest("btnUnionport", new Thickness(741.0, 356.0, 307.0, 138.0));
        comp16 = this.MoveRequest("btnConcourse", new Thickness(723.0, 293.0, 292.0, 201.0));
        comp42 = this.MoveRequest("btnHarlem", new Thickness(707.0, 256.0, 347.0, 244.0));
        comp39 = this.MoveRequest("btnFinancial_District", new Thickness(569.0, 210.0, 486.0, 288.0));
        comp30 = this.MoveRequest("btnLower_East_Side", new Thickness(566.0, 240.0, 488.0, 259.0));
        comp41 = this.MoveRequest("btnHells_Kitchen", new Thickness(612.0, 210.0, 434.0, 291.0));
        comp40 = this.MoveRequest("btnMidtown_East", new Thickness(610.0, 234.0, 442.0, 266.0));
        num1 = 9;
      }
label_25:
      throw new Exception("An error has occured");
label_81:
      return;
label_29:
      using (List<AuthenticationBridgeRule>.Enumerator enumerator2 = this.CheckManager().GetEnumerator())
      {
        while (enumerator2.MoveNext())
        {
          AuthenticationBridgeRule current = enumerator2.Current;
          int num4 = 2;
          string name;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                name = str + current._Pool;
                goto case 1;
              case 1:
              case 3:
                current.composer = (Button) this.GameGrid.FindName(name);
                num4 = 4;
                continue;
              case 4:
                goto label_36;
              default:
                if (!ParamsMapperListener.AssetObject())
                {
                  num4 = 3;
                  continue;
                }
                goto label_36;
            }
          }
label_36:;
        }
        goto label_83;
      }
label_73:
      try
      {
        while (enumerator1.MoveNext())
        {
          AuthenticationBridgeRule current = enumerator1.Current;
          int num5 = 3;
          if (true)
            goto label_76;
label_75:
          // ISSUE: object of a compiler-generated type is created
          // ISSUE: variable of a compiler-generated type
          ParamsMapperListener.ComposerIdentifierAttribute identifierAttribute = new ParamsMapperListener.ComposerIdentifierAttribute();
          goto label_78;
label_76:
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 3:
                goto label_75;
              case 1:
              case 2:
                goto label_78;
              case 4:
                goto label_79;
              default:
                num5 = 2;
                continue;
            }
          }
label_78:
          // ISSUE: reference to a compiler-generated field
          identifierAttribute.m_BridgeManager = str + current._Pool;
          // ISSUE: reference to a compiler-generated method
          current.composer = buttonList.Find(new Predicate<Button>(identifierAttribute.ForgotMapper));
          if (true)
          {
            num5 = 4;
            goto label_76;
          }
label_79:;
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
label_83:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Button MoveRequest(string i, Thickness ivk)
    {
      int num = 5;
      if (ParamsMapperListener.CompareObject())
        goto label_2;
label_1:
      Button button1;
      button1.Margin = ivk;
      button1.Content = (object) "0";
      Button button2 = button1;
      ToolTip toolTip1 = new ToolTip();
      toolTip1.Content = (object) i.Replace("_", " ").TrimStart('b', 't', 'n');
      ToolTip toolTip2 = toolTip1;
      button2.ToolTip = (object) toolTip2;
      Button button3 = button1;
      goto label_4;
label_2:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 4:
            button1.Name = i;
            if (true)
            {
              num = 0;
              continue;
            }
            goto label_7;
          case 3:
            goto label_4;
          case 5:
            button1 = new Button();
            if (true)
            {
              num = 4;
              continue;
            }
            goto case 1;
          case 6:
            goto label_7;
          default:
            if (true)
            {
              num = 3;
              continue;
            }
            goto label_4;
        }
      }
label_7:
      Button button4;
      return button4;
label_4:
      button4 = button3;
      num = 6;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RevertRequest()
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            this.m_Thread = new BackgroundWorker()
            {
              WorkerReportsProgress = true,
              WorkerSupportsCancellation = true
            };
            num2 = 4;
            break;
          case 1:
          case 4:
            this.m_Thread.DoWork += new DoWorkEventHandler(this.EnableManager);
            this.m_Thread.ProgressChanged += new ProgressChangedEventHandler(this.WriteManager);
            goto case 3;
          case 3:
            this.m_Thread.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CloneManager);
            num2 = 5;
            break;
          case 5:
            goto label_7;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertManager(bool isitem)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_15;
            case 1:
            case 2:
              goto label_16;
            case 3:
            case 5:
              goto label_29;
            case 4:
              goto label_1;
            case 6:
              if (this.IncludeManager() is Human && ((Human) this.IncludeManager()).wrapper)
              {
                this.PrintManager("Place armies around the map using left click.");
                this.PrintManager("You can capture any territory not already taken by another player.");
                num2 = 9;
                continue;
              }
              goto label_32;
            case 7:
              goto label_28;
            case 8:
              goto label_31;
            case 9:
              goto label_32;
            default:
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto case 6;
          }
        }
label_1:
        List<Player>.Enumerator enumerator1;
        int num3;
        try
        {
          while (enumerator1.MoveNext())
          {
            Player current = enumerator1.Current;
            int num4 = 2;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 2:
                  goto label_3;
                case 1:
                case 3:
                  goto label_6;
                default:
                  if (true)
                  {
                    num4 = 3;
                    continue;
                  }
                  goto label_6;
              }
            }
label_3:
            current._Setter = num3;
label_6:;
          }
        }
        finally
        {
          enumerator1.Dispose();
        }
        this.ResetManager(GameState.InitialArmyPlace);
        if (!isitem)
        {
          this.CheckManager().Sort();
          num1 = 6;
          continue;
        }
        goto label_28;
label_15:
        int num5 = 0;
        num1 = 8;
        continue;
label_16:
        List<Player>.Enumerator enumerator2;
        try
        {
          while (enumerator2.MoveNext())
          {
            Player current = enumerator2.Current;
            int num6 = 2;
            while (true)
            {
              int num7 = num6;
              bool flag;
              while (true)
              {
                switch (num7)
                {
                  case 0:
                  case 2:
                    flag = !(current is Val);
                    goto case 1;
                  case 1:
                  case 3:
                    if (flag)
                    {
                      ++num5;
                      num7 = 4;
                      continue;
                    }
                    goto label_24;
                  case 4:
                    goto label_24;
                  default:
                    goto label_21;
                }
              }
label_21:
              num6 = 3;
            }
label_24:;
          }
        }
        finally
        {
          enumerator2.Dispose();
        }
        num3 = 50 - 5 * num5;
        this.CreateManager(this.Players[0]);
        this.UpdateManager();
        enumerator1 = this.Players.GetEnumerator();
        num1 = 4;
        continue;
label_28:
        this.SetManager();
        num1 = 3;
        continue;
label_31:
        enumerator2 = this.Players.GetEnumerator();
        num1 = 1;
      }
label_29:
      this.CheckManager().Sort();
      this.SetupManager();
      return;
label_32:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetupManager()
    {
      int num1 = 4;
      if (ParamsMapperListener.CompareObject())
        goto label_4;
label_1:
      this.PrintManager("The Game is beginning.");
      int num2 = 0;
label_3:
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            this.MapManager(GameState.PlacingArmy);
            goto case 2;
          case 2:
          case 3:
            this.InvokeManager();
            if (!ParamsMapperListener.AssetObject())
            {
              num1 = 5;
              continue;
            }
            goto label_7;
          case 4:
            goto label_1;
          case 5:
            goto label_9;
          default:
            goto label_5;
        }
      }
label_9:
      return;
label_5:
      num2 = 3;
      goto label_3;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetManager()
    {
      int num1 = 3;
      if (ParamsMapperListener.AssetObject())
        ;
      List<Player>.Enumerator enumerator1;
      while (true)
      {
        List<AuthenticationBridgeRule>.Enumerator enumerator2;
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            this.CheckManager().DefineRequest<AuthenticationBridgeRule>();
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 1;
          case 1:
          case 4:
            enumerator2 = this.CheckManager().GetEnumerator();
            goto case 2;
          case 2:
            try
            {
              while (enumerator2.MoveNext())
              {
                AuthenticationBridgeRule current = enumerator2.Current;
                int num3 = 5;
                while (true)
                {
                  int num4 = num3;
                  bool flag1;
                  while (true)
                  {
                    switch (num4)
                    {
                      case 0:
                      case 5:
                        flag1 = false;
                        if (!ParamsMapperListener.AssetObject())
                        {
                          num4 = 3;
                          continue;
                        }
                        goto label_18;
                      case 1:
                        goto label_10;
                      case 2:
                      case 4:
                        goto label_8;
                      case 3:
                        goto label_13;
                      case 6:
                        goto label_18;
                      default:
                        if (!ParamsMapperListener.AssetObject())
                        {
                          num4 = 4;
                          continue;
                        }
                        goto case 0;
                    }
                  }
label_8:
                  bool flag2;
                  if (flag2)
                  {
                    num3 = 1;
                    continue;
                  }
                  goto label_11;
label_10:
                  this.CollectManager(current, 1);
                  flag1 = true;
label_11:
                  if (flag1)
                  {
                    num3 = 6;
                    continue;
                  }
label_13:
                  this.SortManager();
                  flag2 = this.IncludeManager()._Setter > 0;
                  goto label_8;
                }
label_18:;
              }
            }
            finally
            {
              enumerator2.Dispose();
            }
            enumerator1 = this.Players.GetEnumerator();
            num2 = 5;
            break;
          case 5:
            goto label_22;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_22:
      try
      {
        while (enumerator1.MoveNext())
        {
          Player current = enumerator1.Current;
          this.CreateManager(current);
          while (current._Setter > 0)
          {
            foreach (AuthenticationBridgeRule reference in this.CheckManager())
            {
              int num5 = 4;
              if (!ParamsMapperListener.AssetObject())
                goto label_31;
label_27:
              bool flag3 = current._Setter > 0;
              int num6 = 2;
label_30:
              num5 = num6;
label_31:
              bool flag4;
              switch (num5)
              {
                case 0:
                case 4:
                  goto label_27;
                case 1:
                case 2:
                  if (flag3)
                  {
                    flag4 = reference.info == current;
                    goto case 3;
                  }
                  else
                    goto label_39;
                case 3:
                  if (flag4)
                  {
                    this.CollectManager(reference, ParamsMapperListener.annotation.Next(1, Math.Min(current._Setter, 4)));
                    num6 = 5;
                    goto label_30;
                  }
                  else
                    goto case 5;
                case 5:
                  continue;
                default:
                  num6 = 3;
                  goto label_30;
              }
            }
label_39:;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void QueryManager()
    {
      int num1 = 1;
      List<Player>.Enumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        List<AuthenticationBridgeRule>.Enumerator enumerator2;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_2;
            case 2:
              enumerator2 = this.CheckManager().GetEnumerator();
              num2 = 5;
              continue;
            case 3:
            case 4:
              if (flag2)
              {
                enumerator1 = this.Players.GetEnumerator();
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 6;
                  continue;
                }
                goto label_27;
              }
              else
                goto label_49;
            case 5:
              try
              {
                while (enumerator2.MoveNext())
                {
                  AuthenticationBridgeRule current = enumerator2.Current;
                  int num3 = 0;
                  while (true)
                  {
                    int num4 = num3;
                    while (true)
                    {
                      switch (num4)
                      {
                        case 0:
                          goto label_5;
                        case 1:
                        case 5:
                          flag1 = false;
                          goto case 2;
                        case 2:
                        case 4:
                          this.CollectManager(current, 1);
                          num4 = 3;
                          continue;
                        case 3:
                          goto label_14;
                        case 6:
                          goto label_18;
                        default:
                          goto label_13;
                      }
                    }
label_5:
                    bool flag3 = false;
label_6:
                    if (current.info == null)
                    {
                      this.ExcludeManager();
                      if (this.IncludeManager()._Setter > 0)
                      {
                        num3 = 5;
                        continue;
                      }
                      goto label_15;
                    }
                    else
                      break;
label_13:
                    num3 = 4;
                    continue;
label_14:
                    flag3 = true;
label_15:
                    if (flag3)
                      num3 = 6;
                    else
                      goto label_6;
                  }
label_18:;
                }
              }
              finally
              {
                enumerator2.Dispose();
              }
              flag2 = !flag1;
              goto case 3;
            case 6:
              goto label_27;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto case 3;
          }
        }
label_2:
        flag1 = true;
        num1 = 2;
      }
label_49:
      return;
label_27:
      try
      {
        while (enumerator1.MoveNext())
        {
          Player current = enumerator1.Current;
          if (current is Val)
          {
            this.CreateManager(current);
            while (current._Setter > 0)
            {
              foreach (AuthenticationBridgeRule reference in this.CheckManager())
              {
                int num5 = 4;
                while (true)
                {
                  int num6 = num5;
                  bool flag;
                  while (true)
                  {
                    switch (num6)
                    {
                      case 0:
                      case 4:
                        flag = current._Setter > 0;
                        if (ParamsMapperListener.CompareObject())
                        {
                          num6 = 1;
                          continue;
                        }
                        goto label_41;
                      case 1:
                        goto label_35;
                      case 2:
                      case 3:
                        goto label_33;
                      case 5:
                        goto label_41;
                      default:
                        if (ParamsMapperListener.CompareObject())
                        {
                          num6 = 3;
                          continue;
                        }
                        goto case 0;
                    }
                  }
label_33:
                  if (reference.info == current)
                  {
                    this.CollectManager(reference, ParamsMapperListener.annotation.Next(1, Math.Min(current._Setter, 4)));
                    num5 = 5;
                    continue;
                  }
                  goto label_42;
label_35:
                  if (!flag)
                    goto label_45;
                  else
                    goto label_33;
                }
label_41:
label_42:;
              }
label_45:;
            }
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ExcludeManager()
    {
      int num1 = 4;
      if (true)
        goto label_3;
label_1:
      bool flag = !(this.IncludeManager() is Val);
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      switch (num1)
      {
        case 0:
        case 4:
          this.SortManager();
          num2 = 2;
          goto label_2;
        case 1:
        case 2:
          goto label_1;
        case 3:
          break;
        case 5:
          return;
        default:
          num2 = 3;
          goto label_2;
      }
label_6:
      if (!flag)
        return;
      this.ExcludeManager();
      num2 = 5;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void UpdateManager()
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        bool flag;
        int size_instance;
        Thickness selection;
        int lastmin;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 10:
              goto label_6;
            case 2:
              goto label_13;
            case 3:
              goto label_12;
            case 4:
              goto label_2;
            case 5:
              this.Players[3].ComputeField(this.lblPlayer4Strength);
              this.Players[3].RemoveField(this.lblPlayer4Territories);
              if (this.Players.Count >= 5)
              {
                size_instance = 17;
                selection = new Thickness(10.0, 3.0, 0.0, 3.0);
                lastmin = 2;
                this.lblPlayerName5.Content = (object) this.Players[4].WriteField();
                this.rectPlayerColor5.Fill = (Brush) this.Players[4].Color;
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_6;
              }
              else
                goto label_21;
            case 6:
            case 9:
              this.Players[4].ComputeField(this.lblPlayer5Strength);
              goto case 8;
            case 7:
              goto label_10;
            case 8:
              this.Players[4].RemoveField(this.lblPlayer5Territories);
              flag = this.Players.Count >= 6;
              if (true)
              {
                num2 = 12;
                continue;
              }
              goto label_2;
            case 11:
              if (this.Players.Count >= 4)
              {
                this.lblPlayerName4.Content = (object) this.Players[3].WriteField();
                this.rectPlayerColor4.Fill = (Brush) this.Players[3].Color;
                this.brd_Player4.Visibility = Visibility.Visible;
                num2 = 5;
                continue;
              }
              goto label_18;
            case 12:
              goto label_19;
            case 13:
              this.PopManager(size_instance, selection);
              num2 = 14;
              continue;
            case 14:
              goto label_21;
            default:
              int num3 = 8;
              num2 = ParamsMapperListener.AssetObject() ? num3 : num3;
              continue;
          }
        }
label_2:
        this.brd_Player5.Visibility = Visibility.Visible;
        num1 = 9;
        continue;
label_3:
        this.lblPlayerName1.Content = (object) this.Players[0].WriteField();
        num1 = 10;
        continue;
label_6:
        this.Players[0].ComputeField(this.lblPlayer1Strength);
        this.Players[0].RemoveField(this.lblPlayer1Territories);
        this.lblPlayerName2.Content = (object) this.Players[1].WriteField();
        this.Players[1].ComputeField(this.lblPlayer2Strength);
        this.Players[1].RemoveField(this.lblPlayer2Territories);
        this.rectPlayerColor1.Fill = (Brush) this.Players[0].Color;
        this.rectPlayerColor2.Fill = (Brush) this.Players[1].Color;
        this.lblPlayerName3.Content = (object) this.Players[2].WriteField();
        num1 = 2;
        continue;
label_10:
        int firstX;
        this.DisableManager(firstX);
label_11:
        this.CustomizeManager(lastmin);
        num1 = 13;
        continue;
label_12:
        this.Players[5].ComputeField(this.lblPlayer6Strength);
        this.Players[5].RemoveField(this.lblPlayer6Territories);
        num1 = 7;
        continue;
label_13:
        this.rectPlayerColor3.Fill = (Brush) this.Players[2].Color;
        this.Players[2].ComputeField(this.lblPlayer3Strength);
        this.Players[2].RemoveField(this.lblPlayer3Territories);
        num1 = 11;
        continue;
label_19:
        if (flag)
        {
          firstX = 11;
          lastmin = 0;
          this.rectPlayerColor6.Fill = (Brush) this.Players[5].Color;
          this.lblPlayerName6.Content = (object) this.Players[5].WriteField();
          this.brd_Player6.Visibility = Visibility.Visible;
          num1 = 3;
        }
        else
          goto label_11;
      }
label_18:
      return;
label_21:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DisableManager(int firstX)
    {
      int num1 = 2;
      if (!ParamsMapperListener.AssetObject())
        goto label_29;
label_1:
      IEnumerator enumerator1;
      try
      {
        while (enumerator1.MoveNext())
        {
          UIElement current = (UIElement) enumerator1.Current;
          int num2 = 2;
          while (true)
          {
            int num3 = num2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_5;
                case 1:
                case 3:
                  goto label_3;
                case 4:
                  goto label_9;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_3:
            bool flag;
            if (flag)
            {
              ((Control) current).FontSize = (double) firstX;
              num2 = 4;
              continue;
            }
            break;
label_5:
            flag = current is Label;
            goto label_3;
          }
label_9:;
        }
      }
      finally
      {
        if (enumerator1 is IDisposable disposable)
          disposable.Dispose();
      }
      IEnumerator enumerator2 = this.panel_Player2.Children.GetEnumerator();
      if (true)
      {
        num1 = 5;
        goto label_29;
      }
label_15:
      try
      {
        while (enumerator2.MoveNext())
        {
          UIElement current = (UIElement) enumerator2.Current;
          int num4 = 3;
          while (true)
          {
            int num5 = num4;
            while (true)
            {
              switch (num5)
              {
                case 0:
                case 3:
                  goto label_17;
                case 1:
                case 2:
                  goto label_21;
                case 4:
                  goto label_23;
                default:
                  if (!ParamsMapperListener.AssetObject())
                  {
                    num5 = 2;
                    continue;
                  }
                  goto label_21;
              }
            }
label_17:
            bool flag = current is Label;
label_21:
            if (flag)
            {
              ((Control) current).FontSize = (double) firstX;
              num4 = 4;
            }
            else
              break;
          }
label_23:;
        }
      }
      finally
      {
        if (enumerator2 is IDisposable disposable)
          disposable.Dispose();
      }
      IEnumerator enumerator3 = this.panel_Player3.Children.GetEnumerator();
      goto label_31;
label_29:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_31;
          case 1:
          case 4:
            goto label_1;
          case 2:
            goto label_71;
          case 5:
            goto label_15;
          case 6:
            goto label_72;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_31;
        }
      }
label_72:
      IEnumerator enumerator4;
      try
      {
        while (enumerator4.MoveNext())
        {
          UIElement current = (UIElement) enumerator4.Current;
          int num6 = 2;
          while (true)
          {
            int num7 = num6;
            while (true)
            {
              switch (num7)
              {
                case 0:
                case 2:
                  if (!(current is Label))
                    goto label_79;
                  else
                    goto case 1;
                case 1:
                case 3:
                  ((Control) current).FontSize = (double) firstX;
                  if (true)
                  {
                    num7 = 4;
                    continue;
                  }
                  goto case 0;
                case 4:
                  goto label_79;
                default:
                  goto label_78;
              }
            }
label_78:
            num6 = 3;
          }
label_79:;
        }
        return;
      }
      finally
      {
        if (enumerator4 is IDisposable disposable)
          disposable.Dispose();
      }
label_31:
      try
      {
        while (enumerator3.MoveNext())
        {
          UIElement current = (UIElement) enumerator3.Current;
          int num8 = 3;
          bool flag;
          while (true)
          {
            switch (num8)
            {
              case 0:
              case 3:
                flag = current is Label;
                goto case 1;
              case 1:
              case 2:
                if (flag)
                {
                  ((Control) current).FontSize = (double) firstX;
                  num8 = 4;
                  continue;
                }
                goto label_38;
              case 4:
                goto label_38;
              default:
                num8 = 2;
                continue;
            }
          }
label_38:;
        }
      }
      finally
      {
        if (enumerator3 is IDisposable disposable)
          disposable.Dispose();
      }
      foreach (UIElement child in this.panel_Player4.Children)
      {
        int num9 = 2;
        while (true)
        {
          int num10 = num9;
          while (true)
          {
            switch (num10)
            {
              case 0:
              case 2:
                if (!(child is Label))
                  goto label_51;
                else
                  goto case 1;
              case 1:
              case 3:
                ((Control) child).FontSize = (double) firstX;
                if (ParamsMapperListener.CompareObject())
                {
                  num10 = 4;
                  continue;
                }
                goto case 0;
              case 4:
                goto label_51;
              default:
                goto label_50;
            }
          }
label_50:
          num9 = 3;
        }
label_51:;
      }
      foreach (UIElement child in this.panel_Player5.Children)
      {
        int num11 = 3;
        while (true)
        {
          int num12 = num11;
          bool flag;
          while (true)
          {
            switch (num12)
            {
              case 0:
              case 3:
                flag = child is Label;
                goto case 1;
              case 1:
              case 2:
                if (flag)
                {
                  ((Control) child).FontSize = (double) firstX;
                  num12 = 4;
                  continue;
                }
                goto label_65;
              case 4:
                goto label_65;
              default:
                goto label_62;
            }
          }
label_62:
          num11 = 2;
        }
label_65:;
      }
      enumerator4 = this.panel_Player6.Children.GetEnumerator();
      if (true)
      {
        num1 = 6;
        goto label_29;
      }
label_71:
      enumerator1 = this.panel_Player1.Children.GetEnumerator();
      num1 = 4;
      goto label_29;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopManager(int size_instance, Thickness selection)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 2:
              goto label_5;
            case 3:
            case 4:
              this.rectPlayerColor4.Margin = selection;
              this.rectPlayerColor5.Margin = selection;
              this.rectPlayerColor6.Margin = selection;
              if (!ParamsMapperListener.AssetObject())
              {
                num2 = 7;
                continue;
              }
              goto label_2;
            case 5:
              this.rectPlayerColor2.Height = (double) size_instance;
              this.rectPlayerColor3.Height = (double) size_instance;
              this.rectPlayerColor4.Height = (double) size_instance;
              this.rectPlayerColor5.Height = (double) size_instance;
              this.rectPlayerColor6.Height = (double) size_instance;
              num2 = 1;
              continue;
            case 6:
              goto label_2;
            case 7:
              goto label_9;
            default:
              goto label_8;
          }
        }
label_2:
        this.rectPlayerColor1.Height = (double) size_instance;
        num1 = 5;
        continue;
label_3:
        this.rectPlayerColor2.Margin = selection;
        this.rectPlayerColor3.Margin = selection;
        num1 = 3;
        continue;
label_5:
        this.rectPlayerColor1.Margin = selection;
        goto label_3;
label_8:
        num1 = 0;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CustomizeManager(int lastmin)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        Thickness thickness;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              this.brd_Player1.Margin = new Thickness(5.0, (double) lastmin, 5.0, (double) lastmin);
              break;
            case 1:
              this.brd_Player1.Margin = thickness;
              this.brd_Players.BorderThickness = new Thickness(0.0);
              break;
            case 2:
              goto label_12;
            case 4:
            case 5:
              goto label_1;
            case 6:
              if (flag)
              {
                thickness = new Thickness(0.0, 0.0, 0.0, 0.0);
                if (true)
                {
                  num2 = 1;
                  continue;
                }
                goto case 1;
              }
              else
              {
                thickness = new Thickness(5.0, 0.0, 5.0, (double) lastmin);
                goto case 0;
              }
            case 7:
              goto label_11;
            default:
              goto label_8;
          }
          this.brd_Player2.Margin = thickness;
          this.brd_Player3.Margin = thickness;
          this.brd_Player4.Margin = thickness;
          int num3 = 5;
          num2 = ParamsMapperListener.AssetObject() ? num3 : num3;
        }
label_1:
        this.brd_Player5.Margin = thickness;
        this.brd_Player6.Margin = thickness;
        num1 = 7;
        continue;
label_8:
        num1 = 0;
        continue;
label_12:
        flag = lastmin == 0;
        num1 = 6;
      }
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SortManager()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_12;
            case 1:
              goto label_1;
            case 2:
            case 3:
              goto label_7;
            case 4:
              goto label_5;
            case 6:
              goto label_2;
            default:
              num2 = 1;
              continue;
          }
        }
label_1:
label_4:
        this.CalcManager();
        num1 = 6;
        continue;
label_5:
        bool flag;
        if (!flag)
        {
          this.CreateManager(this.Players[this.Players.IndexOf(this.IncludeManager()) + 1]);
          goto label_4;
        }
        else
        {
          this.CreateManager(this.Players[0]);
          num1 = 3;
          continue;
        }
label_7:
        if (this.ViewManager() != GameState.InitialArmyPlace)
        {
          this.ExcludeField(this.QueryField() + 1);
          goto label_1;
        }
        else
          goto label_4;
label_12:
        flag = this.Players.IndexOf(this.IncludeManager()) + 1 == this.Players.Count;
        num1 = 4;
      }
label_2:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool ResolveManager()
    {
      int num1 = 0;
      if (!ParamsMapperListener.AssetObject())
        goto label_3;
label_1:
      List<Player>.Enumerator enumerator = this.Players.GetEnumerator();
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      bool flag1;
      bool flag2;
      switch (num1)
      {
        case 0:
          flag1 = true;
          num2 = 4;
          goto label_2;
        case 1:
        case 4:
          goto label_1;
        case 2:
        case 3:
          break;
        case 5:
          return flag2;
        default:
          num2 = 3;
          goto label_2;
      }
label_6:
      try
      {
label_13:
        while (enumerator.MoveNext())
        {
          Player current = enumerator.Current;
          int num3 = 2;
          while (true)
          {
            int num4 = num3;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 2:
                  if (current._Setter <= 0 || current is Val)
                    goto label_13;
                  else
                    goto case 1;
                case 1:
                case 3:
                  flag1 = false;
                  num4 = 4;
                  continue;
                case 4:
                  goto label_15;
                default:
                  goto label_11;
              }
            }
label_11:
            num3 = 3;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
label_15:
      flag2 = flag1;
      num2 = 5;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallManager()
    {
      int num1 = 4;
      if (false)
        return;
      while (true)
      {
        int num2;
        bool flag;
        int num3;
        switch (num1)
        {
          case 0:
            num3 = this.m_Thread.IsBusy ? 1 : 0;
            goto label_16;
          case 1:
          case 6:
            if (!flag)
            {
              this.InvokeManager();
              num2 = 7;
              break;
            }
            if (this.ViewManager() == GameState.InitialArmyPlace)
            {
              this.InvokeManager();
              if (true)
              {
                num1 = 5;
                continue;
              }
              goto label_9;
            }
            else if (this.m_Thread == null)
            {
              num3 = 0;
              goto label_16;
            }
            else
              goto case 0;
          case 2:
            goto label_2;
          case 3:
            goto label_19;
          case 4:
            flag = this.InsertField() > 0;
            num2 = 6;
            break;
          case 5:
            goto label_20;
          case 7:
            goto label_18;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        continue;
label_16:
        if (num3 != 0)
        {
          this.m_Thread.CancelAsync();
          num1 = 3;
        }
        else
          break;
      }
      this.InvokeManager();
      return;
label_9:
      return;
label_2:
      return;
label_19:
      return;
label_20:
      return;
label_18:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InvokeManager()
    {
      int num1 = 7;
      while (true)
      {
        int num2 = num1;
        int count;
        List<string> stringList;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_11;
            case 1:
              goto label_45;
            case 2:
              goto label_3;
            case 3:
            case 8:
            case 9:
              goto label_10;
            case 5:
              count = stringList.Count;
              goto case 6;
            case 6:
              switch (count)
              {
                case 1:
                  goto label_48;
                case 2:
                  goto label_6;
                case 3:
                  goto label_7;
                case 4:
                  goto label_8;
                case 5:
                  goto label_9;
                default:
                  int num3 = 9;
                  num2 = ParamsMapperListener.AssetObject() ? num3 : num3;
                  continue;
              }
            case 7:
              this.ConnectManager();
              if (true)
              {
                num2 = 11;
                continue;
              }
              goto label_10;
            case 10:
              goto label_52;
            case 11:
              goto label_46;
            case 12:
              goto label_49;
            case 13:
              goto label_54;
            default:
              num2 = 6;
              continue;
          }
        }
label_3:
        if (!(this.IncludeManager() is Val) && this.IncludeManager()._Setter > 0)
        {
          num1 = 12;
          continue;
        }
        if (this.IncludeManager() is Val)
        {
          this.SortManager();
          this.CallManager();
          num1 = 0;
          continue;
        }
        goto label_12;
label_6:
        int num4;
        this.PrintManager(string.Format("You have received {0} bonus armies from capturing all of {1} and {2}", (object) num4, (object) stringList[0], (object) stringList[1]));
        goto label_10;
label_7:
        this.PrintManager(string.Format("You have received {0} bonus armies from {1}, {2}, and {3}", (object) num4, (object) stringList[0], (object) stringList[1], (object) stringList[2]));
        goto label_10;
label_8:
        this.PrintManager(string.Format("You have received {0} bonus armies from {1}, {2}, {3}", (object) num4, (object) stringList[0], (object) stringList[1], (object) stringList[2]));
        this.PrintManager(string.Format("and {0}", (object) stringList[3]));
        goto label_10;
label_9:
        this.PrintManager(string.Format("You have received {0} bonus armies from {1}, {2}, {3}", (object) num4, (object) stringList[0], (object) stringList[1], (object) stringList[2]));
        this.PrintManager(string.Format("{0} and {1}", (object) stringList[3], (object) stringList[4]));
label_10:
        bool flag = this.InsertField() > 0;
        num1 = 10;
        continue;
label_45:
        this.InterruptManager();
        num1 = 13;
        continue;
label_46:
        if (this.ViewManager() != GameState.InitialArmyPlace)
        {
          this.SortManager();
          if (!(this.IncludeManager() is Val))
          {
            stringList = new List<string>();
            num4 = 0;
            foreach (Registry info in this.AssetManager())
            {
              int num5 = 4;
              while (true)
              {
                switch (num5)
                {
                  case 0:
                  case 4:
                    if (this.DestroyManager(info))
                    {
                      num5 = 1;
                      continue;
                    }
                    goto label_37;
                  case 1:
                    stringList.Add(info.@class);
                    goto case 2;
                  case 2:
                  case 3:
                    num4 += info._Predicate;
                    num5 = 5;
                    continue;
                  case 5:
                    goto label_37;
                  default:
                    num5 = 3;
                    continue;
                }
              }
label_37:;
            }
            this.IncludeManager()._Setter += this.IncludeManager().Territoriesowned / 3 + num4;
            this.ResetManager(GameState.PlacingArmy);
            num1 = 5;
            continue;
          }
          goto label_27;
        }
        else
        {
          num1 = 2;
          continue;
        }
label_48:
        this.PrintManager(string.Format("You have received {0} bonus armies from capturing all of {1}", (object) num4, (object) stringList[0]));
        num1 = 3;
        continue;
label_52:
        if (flag)
          num1 = 1;
        else
          goto label_54;
      }
label_11:
label_12:
      if (this.ResolveManager())
      {
        using (List<Player>.Enumerator enumerator = this.Players.GetEnumerator())
        {
label_21:
          while (enumerator.MoveNext())
          {
            Player current = enumerator.Current;
            int num6 = 3;
            while (true)
            {
              int num7 = num6;
              while (true)
              {
                switch (num7)
                {
                  case 0:
                  case 3:
                    if (!(current is Val))
                      goto label_21;
                    else
                      goto case 1;
                  case 1:
                  case 2:
                    this.QueryManager();
                    if (true)
                    {
                      num7 = 4;
                      continue;
                    }
                    goto label_24;
                  case 4:
                    goto label_24;
                  default:
                    goto label_19;
                }
              }
label_19:
              num6 = 2;
            }
          }
        }
label_24:
        this.CheckManager().Sort();
        this.CreateManager(this.Players[this.Players.Count - 1]);
        this.SetupManager();
      }
      return;
label_27:
      this.CallManager();
      goto label_55;
label_49:
      this.PrintManager(string.Format("It is now {0}'s turn.", (object) this.IncludeManager().WriteField()));
      return;
label_54:
label_55:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReflectManager()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        Importer importer;
        StateCallbackCollection callbackCollection;
        while (true)
        {
          switch (num2)
          {
            case 0:
              Application.Current.MainWindow = (Window) callbackCollection;
              this.Close();
              callbackCollection.Show();
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 7;
                continue;
              }
              goto label_5;
            case 1:
            case 5:
              int num3 = this.IncludeManager().definition / this.QueryField();
              string ident = DateTime.Now.ToString();
              string b = this.IncludeManager().WriteField();
              int num4 = this.Players.Count;
              string rule = num4.ToString();
              string ident2 = num3.ToString();
              num4 = this.QueryField();
              string ord3 = num4.ToString();
              string str = this.Map.ToString();
              string config5 = this.Gamemode.ToString();
              importer = new Importer(ident, b, rule, ident2, ord3, str, config5);
              num2 = 3;
              continue;
            case 2:
            case 3:
              goto label_5;
            case 4:
              goto label_2;
            case 6:
              goto label_1;
            case 7:
              goto label_11;
            default:
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 6;
                continue;
              }
              goto label_9;
          }
        }
label_1:
        callbackCollection = new StateCallbackCollection(importer, this.Players);
        num1 = 0;
        continue;
label_2:
        this.IncludeManager().definition += this.IncludeManager().Army_strength / 3;
        num1 = 5;
        continue;
label_5:
        Importer.SortMapper(importer);
        AdapterGetterCandidate.DeleteMapper(this.m_Database.NewMapper());
        goto label_1;
      }
label_11:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AwakeManager()
    {
      int num1 = 4;
      List<AuthenticationBridgeRule>.Enumerator enumerator;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 2:
              goto label_10;
            case 3:
            case 5:
              goto label_7;
            case 4:
              this.UpdateManager();
              if (!ParamsMapperListener.AssetObject())
              {
                num2 = 2;
                continue;
              }
              goto label_12;
            case 6:
              goto label_12;
            default:
              goto label_6;
          }
        }
label_1:
        try
        {
          this.GetRequest(true);
        }
        catch (Exception ex)
        {
          int num3 = (int) MessageBox.Show("An error occurred loading the map.");
          this.Close();
          return;
        }
        this.ResetManager(this.m_Database.authentication);
        goto label_7;
label_6:
        num1 = 5;
        continue;
label_7:
        if (this.ViewManager() == GameState.PlacingArmy)
          this.InitManager();
        enumerator = this.CheckManager().GetEnumerator();
        num1 = 6;
        continue;
label_10:
        this.CalcManager();
        num1 = 0;
      }
label_12:
      try
      {
        while (enumerator.MoveNext())
        {
          AuthenticationBridgeRule current = enumerator.Current;
          int num4 = 3;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 3:
                current.composer.Background = (Brush) current.info.Color;
                goto case 1;
              case 1:
              case 2:
                current.composer.Content = (object) current.process;
                if (ParamsMapperListener.CompareObject())
                {
                  num4 = 4;
                  continue;
                }
                goto label_18;
              case 4:
                goto label_18;
              default:
                num4 = 2;
                continue;
            }
          }
label_18:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectManager()
    {
      this.RestartManager().composer.Background = (Brush) this.RestartManager().info.Color;
      this.RestartManager().composer.Content = (object) this.RestartManager().factory;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void OrderManager() => this.InstantiateManager().composer.Content = (object) this.InstantiateManager().process;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CancelManager()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        GameState gameState1;
        GameState gameState2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              gameState1 = this.ViewManager();
              num2 = 3;
              continue;
            case 2:
            case 5:
              switch (gameState2)
              {
                case GameState.Attacking:
                case GameState.Conquer:
                case GameState.Move:
                  this.btnNumber.Content = (object) this.RestartManager().factory;
                  int num3 = 6;
                  num2 = ParamsMapperListener.AssetObject() ? num3 : num3;
                  continue;
                case GameState.PlacingArmy:
                  goto label_8;
                default:
                  goto label_6;
              }
            case 3:
              gameState2 = gameState1;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 2;
            case 4:
              goto label_7;
            case 6:
              goto label_3;
            default:
              goto label_11;
          }
        }
label_11:
        num1 = 4;
      }
label_6:
      return;
label_8:
      this.btnNumber.Content = (object) this.InstantiateManager().factory;
      return;
label_7:
      return;
label_3:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcManager()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_13;
            case 1:
            case 2:
              goto label_6;
            case 3:
              goto label_3;
            case 4:
              goto label_26;
            case 5:
              num3 = this.Players.IndexOf(this.IncludeManager());
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 0;
                continue;
              }
              goto label_2;
            case 6:
              goto label_28;
            case 7:
              goto label_29;
            default:
              int num4 = 6;
              num2 = ParamsMapperListener.AssetObject() ? num4 : num4;
              continue;
          }
        }
label_6:
        switch (num3)
        {
          case 0:
            goto label_7;
          case 1:
            goto label_8;
          case 2:
            goto label_9;
          case 3:
            goto label_4;
          case 4:
            this.brd_Player5.Background = (Brush) Brushes.LightBlue;
            num1 = 4;
            continue;
          case 5:
            this.brd_Player6.Background = (Brush) Brushes.LightBlue;
            num1 = 7;
            continue;
          default:
            goto label_27;
        }
label_13:
        foreach (Border child in this.panel_Players.Children)
        {
          int num5 = 2;
          if (ParamsMapperListener.CompareObject())
            goto label_17;
label_16:
          child.Background = this.panel_Players.Background;
          goto label_19;
label_17:
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 2:
                goto label_16;
              case 1:
              case 3:
                goto label_19;
              default:
                if (true)
                {
                  num5 = 3;
                  continue;
                }
                goto label_19;
            }
          }
label_19:;
        }
        this.panel_UI.Background = (Brush) this.IncludeManager().Color;
        num1 = 1;
      }
label_2:
      return;
label_4:
      this.brd_Player4.Background = (Brush) Brushes.LightBlue;
      return;
label_27:
      return;
label_7:
      this.brd_Player1.Background = (Brush) Brushes.LightBlue;
      return;
label_8:
      this.brd_Player2.Background = (Brush) Brushes.LightBlue;
      return;
label_9:
      this.brd_Player3.Background = (Brush) Brushes.LightBlue;
      return;
label_3:
      return;
label_26:
      return;
label_28:
      return;
label_29:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitManager() => this.PrintManager(string.Format("You have {0} armies to place.", (object) this.IncludeManager()._Setter));

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteManager()
    {
      int num1 = 9;
      while (true)
      {
        int num2 = num1;
        bool wrapper;
        GameState gameState;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_19;
            case 1:
              goto label_29;
            case 2:
              switch (gameState)
              {
                case GameState.Attacking:
                  this.btnStateDisp.Content = (object) "Attack";
                  this.btnStateDisp.Background = (Brush) new SolidColorBrush(Color.FromRgb((byte) 235, (byte) 64, (byte) 45));
                  this.btnState.Content = (object) "Confirm Attack";
                  if (this.IncludeManager() is Human)
                  {
                    num2 = 15;
                    continue;
                  }
                  goto label_30;
                case GameState.Conquer:
                  this.btnStateDisp.Content = (object) "Conquer";
                  num2 = 10;
                  continue;
                case GameState.Move:
                  goto label_25;
                case GameState.PlacingArmy:
                  goto label_35;
                case GameState.InitialArmyPlace:
                  goto label_10;
                default:
                  goto label_16;
              }
            case 3:
            case 8:
              goto label_4;
            case 4:
            case 6:
              if (((Human) this.IncludeManager()).wrapper)
              {
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto case 11;
              }
              else
                goto label_34;
            case 5:
              if (wrapper)
              {
                this.PrintManager("Use Click, Right-Click, + and -");
                num2 = 12;
                continue;
              }
              goto label_36;
            case 7:
              goto label_34;
            case 9:
              gameState = this.ViewManager();
              if (!ParamsMapperListener.AssetObject())
              {
                num2 = 2;
                continue;
              }
              goto label_21;
            case 10:
              goto label_32;
            case 11:
              this.btnState.Content = (object) "Confirm Army Placement";
              if (this.IncludeManager() is Human)
              {
                num2 = 6;
                continue;
              }
              goto label_37;
            case 12:
              goto label_21;
            case 13:
              goto label_3;
            case 14:
              goto label_22;
            case 15:
              goto label_6;
            case 16:
              goto label_36;
            default:
              num2 = 3;
              continue;
          }
        }
label_3:
        this.PrintManager("to move armies from.");
        this.PrintManager("Click again to select where you");
        this.PrintManager("wish to move them to.");
        this.PrintManager("Use +- and L/R click");
        num1 = 1;
        continue;
label_4:
        bool flag;
        if (flag && ((Human) this.IncludeManager()).wrapper)
        {
          this.PrintManager("Click to select a territory");
          num1 = 13;
          continue;
        }
        break;
label_10:
        this.btnStateDisp.Content = (object) "Setup Game Board";
        this.btnStateDisp.Background = (Brush) new SolidColorBrush((Color) ColorConverter.ConvertFromString("#FF00B9FF"));
        num1 = 11;
        continue;
label_19:
        this.PrintManager(string.Format("{0}, Click to place army.", (object) this.IncludeManager().WriteField()));
        num1 = 7;
        continue;
label_21:
        this.PrintManager("to move armies to or from");
        this.PrintManager("your new territory.");
        num1 = 16;
        continue;
label_25:
        this.btnStateDisp.Content = (object) "Move";
        this.btnStateDisp.Background = (Brush) new SolidColorBrush(Color.FromRgb((byte) 245, (byte) 245, (byte) 78));
        this.btnState.Content = (object) "Confirm Fortify";
        flag = this.IncludeManager() is Human;
        goto label_4;
label_32:
        this.btnStateDisp.Background = (Brush) new SolidColorBrush(Color.FromRgb((byte) 50, (byte) 250, (byte) 93));
        this.btnState.Content = (object) "Confirm Conquer";
        if (this.IncludeManager() is Human)
        {
          wrapper = ((Human) this.IncludeManager()).wrapper;
          num1 = 5;
          continue;
        }
        goto label_38;
label_35:
        this.btnStateDisp.Content = (object) "Place Armies";
        this.btnStateDisp.Background = (Brush) new SolidColorBrush((Color) ColorConverter.ConvertFromString("#FF00B9FF"));
        num1 = 14;
      }
      return;
label_6:
      if (((Human) this.IncludeManager()).wrapper)
      {
        this.PrintManager("Click on the territory you wish to attack from.");
        this.PrintManager("The territories you can attack will be highlighted.");
      }
      return;
label_37:
      return;
label_16:
      return;
label_30:
      return;
label_22:
      this.btnState.Content = (object) "Confirm Army Placement";
      if (this.IncludeManager() is Human && ((Human) this.IncludeManager()).wrapper)
      {
        this.PrintManager("Click or + to select a territory and place armies.");
        this.PrintManager("Right-Click or - to remove.");
      }
      this.PrintManager(string.Format("You have {0} armies to place.", (object) this.IncludeManager()._Setter));
      return;
label_29:
      this.PrintManager("to adjust the number moved.");
      return;
label_38:
      return;
label_34:
      return;
label_36:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConnectManager()
    {
      int num1 = 4;
      if (true)
        goto label_12;
label_1:
      List<AuthenticationBridgeRule>.Enumerator enumerator;
      try
      {
        while (enumerator.MoveNext())
        {
          AuthenticationBridgeRule current = enumerator.Current;
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 3:
                goto label_6;
              default:
                num2 = 3;
                continue;
            }
          }
label_3:
          current.composer.BorderBrush = (Brush) Brushes.Black;
label_6:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      this.btnNumber.Content = (object) 0;
      goto label_15;
label_12:
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
          case 4:
            enumerator = this.CheckManager().GetEnumerator();
            num3 = 3;
            break;
          case 1:
          case 3:
            goto label_1;
          case 2:
            goto label_15;
          case 5:
            goto label_8;
          default:
            num3 = 2;
            break;
        }
        num1 = num3;
      }
label_8:
      return;
label_15:
      this.NewManager();
      num1 = 5;
      goto label_12;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private AuthenticationBridgeRule StopManager(string info)
    {
      info = info.Replace(' ', '_');
      AuthenticationBridgeRule authenticationBridgeRule;
      try
      {
        int num1 = 0;
        int num2 = this.CheckManager().Count - 1;
        while (num1 <= num2)
        {
          int int32 = Decimal.ToInt32(Math.Floor((Decimal) (num1 + num2) / 2M));
          if (string.Compare(info, this.CheckManager()[int32]._Pool) < 0)
            num2 = int32 - 1;
          else if (string.Compare(info, this.CheckManager()[int32]._Pool) > 0)
          {
            num1 = int32 + 1;
          }
          else
          {
            authenticationBridgeRule = this.CheckManager()[int32];
            goto label_22;
          }
        }
        throw new MapperCustomerMapping();
      }
      catch (MapperCustomerMapping ex)
      {
        using (List<AuthenticationBridgeRule>.Enumerator enumerator = this.CheckManager().GetEnumerator())
        {
label_19:
          while (enumerator.MoveNext())
          {
            AuthenticationBridgeRule current = enumerator.Current;
            int num3 = 2;
            while (true)
            {
              int num4 = num3;
              bool flag;
              while (true)
              {
                switch (num4)
                {
                  case 0:
                  case 2:
                    flag = current._Pool == info;
                    goto case 1;
                  case 1:
                  case 3:
                    if (flag)
                    {
                      authenticationBridgeRule = current;
                      num4 = 4;
                      continue;
                    }
                    goto label_19;
                  case 4:
                    goto label_22;
                  default:
                    goto label_16;
                }
              }
label_16:
              num3 = 3;
            }
          }
        }
        throw new Exception();
      }
label_22:
      return authenticationBridgeRule;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VisitManager(
      AuthenticationBridgeRule config,
      Button reg,
      Brush rule,
      bool isconfig2)
    {
      int num1 = 5;
      if (true)
        goto label_5;
label_1:
      bool flag;
      if (flag)
      {
        this.PublishManager(config);
        int num2 = 1;
        num1 = ParamsMapperListener.AssetObject() ? num2 : num2;
      }
      else
      {
        this.ChangeManager(config);
        goto label_7;
      }
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            flag = isconfig2;
            if (!ParamsMapperListener.AssetObject())
            {
              num1 = 2;
              continue;
            }
            goto label_10;
          case 1:
            goto label_8;
          case 2:
            goto label_1;
          case 3:
          case 4:
            goto label_7;
          case 6:
            goto label_3;
          default:
            num1 = 4;
            continue;
        }
      }
label_3:
      return;
label_10:
      return;
label_7:
label_8:
      reg.BorderBrush = rule;
      num1 = 6;
      goto label_5;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintManager(string reference)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
              if (this.txtOutput.Text == null)
              {
                num3 = 1;
                break;
              }
              goto label_7;
            case 1:
              num3 = this.txtOutput.Text == "" ? 1 : 0;
              break;
            case 2:
            case 5:
              this.scrlOutput.ScrollToEnd();
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_14;
            case 3:
            case 4:
label_12:
              goto case 2;
            case 6:
              goto label_1;
            default:
              goto label_5;
          }
          if (num3 == 0)
          {
            TextBlock txtOutput = this.txtOutput;
            txtOutput.Text = txtOutput.Text + "\n" + reference;
            goto label_12;
          }
          else
            goto label_11;
        }
label_5:
        num1 = 4;
        continue;
label_7:
        num1 = 1;
        continue;
label_11:
        this.txtOutput.Text = reference;
        num1 = 5;
      }
label_1:
      return;
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NewManager()
    {
      this.ChangeManager((AuthenticationBridgeRule) null);
      this.PublishManager((AuthenticationBridgeRule) null);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetManager(GameState first)
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            this.MapManager(first);
            num2 = 3;
            break;
          case 1:
          case 3:
            if (this.ViewManager() == GameState.Conquer)
            {
              num2 = 2;
              break;
            }
            goto label_9;
          case 2:
            this.SelectManager();
            goto case 5;
          case 5:
            goto label_9;
          case 6:
            goto label_10;
          default:
            num2 = 5;
            break;
        }
label_4:
        num1 = num2;
        continue;
label_9:
        this.DeleteManager();
        num2 = 6;
        goto label_4;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrepareManager()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              flag1 = false;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_3;
            case 1:
            case 5:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              goto label_15;
            case 6:
              goto label_20;
            default:
              goto label_19;
          }
        }
label_1:
        this.PrintManager("There is nowhere to attack from here.");
        num1 = 6;
        continue;
label_3:
        foreach (string info in this.InstantiateManager().issuer)
        {
          int num3 = 2;
          bool flag2;
          AuthenticationBridgeRule authenticationBridgeRule;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                authenticationBridgeRule = this.StopManager(info);
                flag2 = authenticationBridgeRule.info != this.IncludeManager();
                num3 = 4;
                continue;
              case 1:
              case 4:
                if (!flag2)
                  goto label_11;
                else
                  goto case 3;
              case 3:
                flag1 = true;
                authenticationBridgeRule.composer.BorderBrush = (Brush) Brushes.Aqua;
                num3 = 5;
                continue;
              case 5:
                goto label_11;
              default:
                num3 = 3;
                continue;
            }
          }
label_11:;
        }
        bool flag3 = !flag1;
        num1 = 3;
        continue;
label_15:
        if (!flag3)
          break;
        goto label_1;
label_19:
        num1 = 2;
      }
      return;
label_20:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool ForgotManager(AuthenticationBridgeRule var1)
    {
      int num1 = 2;
      if (!ParamsMapperListener.AssetObject())
        goto label_21;
label_1:
      ParamsMapperListener.m_Merchant.Add(var1);
      if (true)
      {
        num1 = 4;
        goto label_21;
      }
label_2:
      List<string>.Enumerator enumerator;
      bool flag1;
      try
      {
        while (enumerator.MoveNext())
        {
          string current = enumerator.Current;
          int num2 = 4;
          if (ParamsMapperListener.CompareObject())
            goto label_10;
label_4:
          AuthenticationBridgeRule var1_1 = this.StopManager(current);
          int num3 = 5;
label_9:
          num2 = num3;
label_10:
          bool flag2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                if (flag2)
                {
                  flag1 = true;
                  int num4 = 1;
                  num2 = ParamsMapperListener.AssetObject() ? num4 : num4;
                  continue;
                }
                goto label_14;
              case 1:
              case 3:
                var1_1.composer.BorderBrush = (Brush) Brushes.Aqua;
                this.ForgotManager(var1_1);
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 6;
                  continue;
                }
                goto label_13;
              case 4:
                goto label_4;
              case 5:
                if (!ParamsMapperListener.m_Merchant.Contains(var1_1))
                {
                  ParamsMapperListener.m_Merchant.Add(var1_1);
                  flag2 = var1_1.info == this.IncludeManager();
                  goto case 0;
                }
                else
                  goto label_15;
              case 6:
                goto label_13;
              default:
                goto label_11;
            }
          }
label_11:
          num3 = 0;
          goto label_9;
label_13:
label_14:
label_15:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      bool flag3 = flag1;
      int num5 = 5;
label_20:
      num1 = num5;
label_21:
      switch (num1)
      {
        case 0:
        case 2:
          goto label_1;
        case 1:
        case 4:
          flag1 = false;
          enumerator = var1.issuer.GetEnumerator();
          goto label_2;
        case 3:
          goto label_2;
        case 5:
          return flag3;
        default:
          num5 = 3;
          goto label_20;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadManager(int reference_Y)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        List<FactoryIdentifierAttribute>.Enumerator enumerator;
        int num3;
        while (true)
        {
          bool flag2;
          int num4;
          int num5;
          switch (num2)
          {
            case 0:
              if (this.ViewManager() == GameState.Attacking)
              {
                num4 = this.RestartManager().factory >= 3 ? 1 : 0;
                goto label_33;
              }
              else
                goto label_32;
            case 1:
              if (flag2)
              {
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 11;
                  continue;
                }
                goto case 9;
              }
              else
                goto label_35;
            case 2:
            case 6:
label_38:
              num5 = this.ViewManager() == GameState.Conquer ? 1 : 0;
              goto label_40;
            case 3:
              goto label_48;
            case 4:
              goto label_1;
            case 5:
label_42:
              flag2 = reference_Y >= 1;
              int num6 = 1;
              num2 = ParamsMapperListener.AssetObject() ? num6 : num6;
              continue;
            case 7:
            case 8:
              goto label_19;
            case 9:
              this.OrderManager();
              if (this.ViewManager() == GameState.Conquer)
              {
                this.SelectManager();
                if (true)
                {
                  num2 = 12;
                  continue;
                }
                goto label_47;
              }
              else
                goto label_11;
            case 10:
              if (!flag1)
                break;
              goto label_7;
            case 11:
              if (this.InstantiateManager().process >= 2)
              {
                if (this.Gamemode == GameMode.Classic)
                {
                  if (true)
                  {
                    num2 = 0;
                    continue;
                  }
                  goto label_19;
                }
                else
                  goto label_32;
              }
              else
                goto label_16;
            case 12:
              goto label_47;
            default:
              goto label_14;
          }
label_8:
label_9:
          this.InstantiateManager().process -= reference_Y;
          this.RestartManager().factory += reference_Y;
          this.CancelManager();
          int num7 = 9;
          num2 = ParamsMapperListener.AssetObject() ? num7 : num7;
          continue;
label_32:
          num4 = 0;
label_33:
          if (num4 != 0)
            goto label_34;
label_35:
          if (reference_Y <= -1)
          {
            if (this.RestartManager().factory > 1)
            {
              if (this.Gamemode != GameMode.Classic)
                num5 = 0;
              else
                goto label_38;
            }
            else
              goto label_37;
          }
          else
            goto label_9;
label_40:
          if (num5 != 0)
          {
            num3 = 0;
            enumerator = this._Rules.GetEnumerator();
            if (true)
              num2 = 8;
            else
              goto label_42;
          }
          else
            goto label_8;
        }
label_1:
        GameState gameState;
        switch (gameState)
        {
          case GameState.Attacking:
            goto label_3;
          case GameState.Conquer:
            goto label_4;
          case GameState.Move:
            this.PrintManager("You must move at least one army, if you wish to cancel click 'cancel'");
            num1 = 3;
            continue;
          default:
            goto label_2;
        }
label_14:
        num1 = 2;
        continue;
label_19:
        try
        {
          while (enumerator.MoveNext())
          {
            FactoryIdentifierAttribute current = enumerator.Current;
            int num8 = 3;
            if (true)
              goto label_23;
label_21:
            if (!(current is SingletonVisitorStruct))
              goto label_26;
            else
              goto label_25;
label_22:
            int num9;
            num8 = num9;
label_23:
            switch (num8)
            {
              case 0:
              case 3:
                goto label_21;
              case 1:
              case 2:
                break;
              case 4:
                goto label_26;
              default:
                num9 = 2;
                goto label_22;
            }
label_25:
            ++num3;
            num9 = 4;
            goto label_22;
label_26:;
          }
        }
        finally
        {
          enumerator.Dispose();
        }
        flag1 = this.RestartManager().factory <= num3;
        num1 = 10;
        continue;
label_37:
        gameState = this.ViewManager();
        num1 = 4;
      }
label_2:
      return;
label_3:
      this.PrintManager("You cannot attack with less than one army.");
      this.PrintManager("Click cancel to stop the attack.");
      return;
label_4:
      this.PrintManager("You must keep at least one army in the new territory.");
      return;
label_7:
      this.PrintManager("You must move at least as many armies used to attack into the new territory.");
      return;
label_48:
      return;
label_16:
      this.PrintManager("At least one army must remain in a friendly territory.");
      return;
label_34:
      this.PrintManager("You can attack with a maximum of 3 armies at once.");
      return;
label_11:
      return;
label_47:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartManager()
    {
      int num1 = 9;
      if (ParamsMapperListener.CompareObject())
        goto label_33;
label_1:
      bool flag1;
      if (!flag1)
        return;
      int num2;
      if (this.RestartManager() != null)
      {
        num2 = 3;
        goto label_32;
      }
label_25:
      this.ConnectManager();
      if (ParamsMapperListener.CompareObject())
      {
        num1 = 10;
        goto label_33;
      }
label_26:
      if (this.RestartManager() != null)
      {
        this.InstantiateManager().process += this.RestartManager().factory;
        this.RestartManager().factory = 0;
        this.OrderManager();
        this.RestartManager().composer.Content = (object) this.RestartManager().process;
      }
      this.ConnectManager();
      num2 = 0;
label_32:
      num1 = num2;
label_33:
      GameState gameState1;
      GameState gameState2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_29;
          case 1:
          case 8:
            gameState1 = gameState2;
            if (ParamsMapperListener.CompareObject())
            {
              num1 = 6;
              continue;
            }
            goto case 9;
          case 2:
          case 6:
            goto label_5;
          case 3:
            goto label_4;
          case 4:
            goto label_1;
          case 5:
            goto label_24;
          case 7:
            goto label_26;
          case 9:
            gameState2 = this.ViewManager();
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto label_24;
          case 10:
            goto label_35;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_35;
        }
      }
label_4:
      this.InstantiateManager().process += this.RestartManager().factory;
      this.OrderManager();
      num2 = 5;
      goto label_32;
label_5:
      switch (gameState1)
      {
        case GameState.Attacking:
          if (this.InstantiateManager() == null)
            return;
          num2 = 7;
          goto label_32;
        case GameState.Conquer:
          this.PrintManager("You must move armies into the newly captured territory.");
          return;
        case GameState.Move:
          flag1 = this.InstantiateManager() != null;
          goto label_1;
        case GameState.PlacingArmy:
          foreach (AuthenticationBridgeRule authenticationBridgeRule in this.CheckManager())
          {
            int num3 = 0;
            bool flag2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                  flag2 = authenticationBridgeRule.info == this.IncludeManager();
                  num3 = 4;
                  continue;
                case 1:
                case 4:
                  if (!flag2)
                    goto label_15;
                  else
                    goto case 2;
                case 2:
                case 3:
                  this.IncludeManager()._Setter += authenticationBridgeRule.factory;
                  authenticationBridgeRule.factory = 0;
                  if (true)
                  {
                    num3 = 5;
                    continue;
                  }
                  goto case 1;
                case 5:
                  goto label_15;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_15:;
          }
          this.ConnectManager();
          return;
        default:
          return;
      }
label_24:
      this.RestartManager().factory = 0;
      goto label_25;
label_29:
      return;
label_35:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool DestroyManager(Registry info)
    {
      int num1 = 0;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              flag2 = true;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 1:
            case 4:
              goto label_2;
            case 2:
            case 3:
              goto label_6;
            case 5:
              goto label_17;
            default:
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 3;
                continue;
              }
              goto label_6;
          }
        }
label_2:
        List<AuthenticationBridgeRule>.Enumerator enumerator = info._Creator.GetEnumerator();
label_6:
        try
        {
          while (enumerator.MoveNext())
          {
            AuthenticationBridgeRule current = enumerator.Current;
            int num3 = 2;
            if (true)
              goto label_9;
label_8:
            if (current.info == this.IncludeManager())
              continue;
            goto label_11;
label_9:
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_8;
                case 1:
                case 3:
                  goto label_11;
                case 4:
                  goto label_15;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_11:
            flag2 = false;
            if (ParamsMapperListener.CompareObject())
            {
              num3 = 4;
              goto label_9;
            }
            else
              break;
          }
        }
        finally
        {
          enumerator.Dispose();
        }
label_15:
        flag1 = flag2;
        num1 = 5;
      }
label_17:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool PatchManager()
    {
      int num1 = 6;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        bool flag3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_13;
            case 1:
            case 3:
              goto label_1;
            case 2:
              if (!flag3)
              {
                flag1 = false;
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_4;
              }
              else
              {
                flag2 = (string) this.btnDieStatus.Content == "Continue to Attack";
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 4;
                  continue;
                }
                goto label_13;
              }
            case 4:
              goto label_4;
            case 5:
            case 7:
              goto label_14;
            default:
              goto label_10;
          }
        }
label_1:
label_2:
        flag1 = true;
        num1 = 5;
        continue;
label_4:
        if (flag2)
        {
          this.PrintManager("Click \"continue to attack\" to proceed.");
          goto label_2;
        }
        else if ((string) this.btnDieStatus.Content == "Continue to Conquer")
        {
          this.PrintManager("You must conquer the territory.");
          goto label_1;
        }
        else
          goto label_2;
label_10:
        num1 = 1;
        continue;
label_13:
        flag3 = this.panel_Die.Visibility == Visibility.Visible;
        num1 = 2;
      }
label_14:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InterruptManager()
    {
      int num = 3;
      if (ParamsMapperListener.AssetObject())
        ;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            this.pb_Timer.Value = 0.0;
            num = 1;
            continue;
          case 1:
            this.m_Thread.CancelAsync();
            goto case 2;
          case 2:
          case 4:
            this.m_Thread.RunWorkerAsync();
            if (true)
            {
              num = 5;
              continue;
            }
            goto case 1;
          case 5:
            goto label_1;
          default:
            if (true)
            {
              num = 4;
              continue;
            }
            goto label_7;
        }
      }
label_1:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void EnableManager(object reference, DoWorkEventArgs selection)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_13;
            case 1:
            case 5:
              goto label_15;
            case 2:
            case 3:
              goto label_3;
            case 4:
              if (!flag)
              {
                num2 = 7;
                continue;
              }
              goto label_9;
            case 6:
              goto label_14;
            case 7:
              goto label_11;
            default:
              goto label_8;
          }
        }
label_3:
label_4:
        int num3;
        if (!this._System)
        {
          int int32 = Convert.ToInt32((double) num3 / (double) this.InsertField() * 100.0);
          (reference as BackgroundWorker).ReportProgress(int32);
          Thread.Sleep(10);
          goto label_14;
        }
        else
        {
          Thread.Sleep(100);
          num1 = 3;
          continue;
        }
label_8:
        num1 = 6;
        continue;
label_9:
        if (!this.m_Thread.CancellationPending)
          goto label_4;
        else
          goto label_10;
label_13:
        num3 = 0;
        num1 = 5;
        continue;
label_14:
        ++num3;
label_15:
        flag = num3 < this.InsertField();
        num1 = 4;
      }
label_11:
      return;
label_10:
      selection.Cancel = true;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WriteManager(object value, ProgressChangedEventArgs token) => this.pb_Timer.Value = (double) token.ProgressPercentage;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneManager(object reference, RunWorkerCompletedEventArgs connection)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (!flag)
              {
                if (!this.PatchManager())
                {
                  this.StartManager();
                  goto case 3;
                }
                else
                  goto label_12;
              }
              else
              {
                num2 = 5;
                continue;
              }
            case 1:
              flag = this.ViewManager() == GameState.Conquer;
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto case 0;
            case 2:
            case 5:
              goto label_1;
            case 3:
            case 4:
              this.InvokeManager();
              num2 = 6;
              continue;
            case 6:
              goto label_11;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 4;
      }
label_1:
      this.PrintManager("Move your armies to end your turn.");
      return;
label_12:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatManager(object res, RoutedEventArgs token)
    {
      int num1 = 19;
label_37:
      AuthenticationBridgeRule authenticationBridgeRule;
      Button composer;
      bool wrapper;
      while (true)
      {
        int num2 = num1;
label_38:
        bool flag1;
        bool flag2;
        GameState gameState;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_36;
            case 1:
              goto label_78;
            case 2:
              goto label_53;
            case 3:
              goto label_35;
            case 4:
              goto label_21;
            case 5:
              switch (gameState)
              {
                case GameState.Attacking:
                  if (this.PatchManager())
                  {
                    if (ParamsMapperListener.CompareObject())
                    {
                      num2 = 18;
                      continue;
                    }
                    goto label_8;
                  }
                  else
                    goto label_32;
                case GameState.Conquer:
                  goto label_81;
                case GameState.Move:
                  if (authenticationBridgeRule.info == this.IncludeManager())
                  {
                    if (this.InstantiateManager() == null)
                    {
                      this.ConnectManager();
                      this.VisitManager(authenticationBridgeRule, composer, (Brush) Brushes.Lime, false);
                      if (this.ForgotManager(this.InstantiateManager()))
                      {
                        if (this.IncludeManager() is Human)
                        {
                          num2 = 11;
                          continue;
                        }
                        goto label_21;
                      }
                      else
                      {
                        this.PrintManager("There are no friendly territories to move to from here.");
                        this.ConnectManager();
                        num2 = 4;
                        continue;
                      }
                    }
                    else if (composer.BorderBrush != Brushes.Green)
                    {
                      if (composer.BorderBrush != Brushes.Aqua)
                      {
                        this.PrintManager("You cannot move armies to here from your selected territory.");
                        if (true)
                        {
                          num2 = 25;
                          continue;
                        }
                        goto label_29;
                      }
                      else
                        goto label_25;
                    }
                    else
                      goto label_23;
                  }
                  else
                    goto label_31;
                case GameState.PlacingArmy:
                  goto label_50;
                case GameState.InitialArmyPlace:
                  goto label_46;
                default:
                  goto label_45;
              }
            case 6:
              goto label_68;
            case 7:
              goto label_62;
            case 8:
              goto label_58;
            case 9:
              goto label_65;
            case 10:
              while (!flag2)
              {
                if (this.InstantiateManager() == null)
                {
                  this.PrintManager("You do not own this territory");
                  this.PrintManager("Select where you wish to attack from");
                  if (true)
                  {
                    num2 = 12;
                    goto label_38;
                  }
                }
                else
                {
                  num1 = 0;
                  goto label_37;
                }
              }
              flag1 = authenticationBridgeRule.process > 1;
              int num3 = 24;
              num2 = ParamsMapperListener.AssetObject() ? num3 : num3;
              continue;
            case 11:
              goto label_33;
            case 12:
              goto label_29;
            case 13:
            case 15:
              goto label_57;
            case 14:
              goto label_3;
            case 16:
              goto label_49;
            case 17:
              goto label_15;
            case 18:
              goto label_5;
            case 19:
              goto label_77;
            case 20:
              if (this.Gamemode != GameMode.NewRisk)
              {
                if (this.Gamemode == GameMode.Classic)
                {
                  this.ReadManager(Math.Min(this.InstantiateManager().process - 1, 3));
                  int num4 = 13;
                  num2 = ParamsMapperListener.AssetObject() ? num4 : num4;
                  continue;
                }
                goto label_58;
              }
              else
              {
                this.ReadManager(this.InstantiateManager().process - 1);
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 8;
                  continue;
                }
                goto label_62;
              }
            case 21:
              goto label_1;
            case 22:
              goto label_52;
            case 23:
              goto label_40;
            case 24:
              if (flag1)
              {
                this.StartManager();
                this.VisitManager(authenticationBridgeRule, composer, (Brush) Brushes.Lime, false);
                this.PrepareManager();
                num2 = 9;
                continue;
              }
              goto label_2;
            case 25:
              goto label_80;
            default:
              goto label_39;
          }
        }
label_2:
        this.PrintManager("You do not have enough armies to attack from here.");
        num1 = 21;
        continue;
label_31:
        this.PrintManager("You do not own this territory.");
        num1 = 16;
        continue;
label_32:
        flag2 = authenticationBridgeRule.info == this.IncludeManager();
        num1 = 10;
        continue;
label_33:
        if (((Human) this.IncludeManager()).wrapper)
        {
          this.PrintManager("You can move armies to the highlighted territories.");
          num1 = 1;
          continue;
        }
        goto label_78;
label_35:
        wrapper = ((Human) this.IncludeManager()).wrapper;
        num1 = 7;
        continue;
label_36:
        bool flag3 = this.RestartManager() == null;
        goto label_53;
label_39:
        num1 = 2;
        continue;
label_40:
        int num5 = authenticationBridgeRule.info == this.IncludeManager() ? 1 : 0;
label_42:
        if (num5 != 0)
        {
          this.VisitManager(authenticationBridgeRule, composer, (Brush) Brushes.Lime, false);
          num1 = 14;
          continue;
        }
        goto label_4;
label_50:
        if (authenticationBridgeRule != this.InstantiateManager())
        {
          this.ConnectManager();
          if (authenticationBridgeRule.info != null)
          {
            num1 = 23;
            continue;
          }
          num5 = 1;
          goto label_42;
        }
        else
        {
          num1 = 17;
          continue;
        }
label_52:
        composer = authenticationBridgeRule.composer;
        gameState = this.ViewManager();
        num1 = 5;
        continue;
label_53:
        if (flag3)
        {
          if (authenticationBridgeRule.info != null)
          {
            if (composer.BorderBrush == Brushes.Aqua)
            {
              this.VisitManager(authenticationBridgeRule, composer, (Brush) Brushes.Red, true);
              num1 = 20;
              continue;
            }
            goto label_66;
          }
          else
            goto label_67;
        }
        else
          goto label_69;
label_57:
label_58:
        if (this.IncludeManager() is Human)
        {
          num1 = 3;
          continue;
        }
        goto label_18;
label_77:
        authenticationBridgeRule = this.StopManager(((FrameworkElement) res).Name.TrimStart('b', 't', 'n'));
        num1 = 22;
      }
label_3:
      this.ComputeManager(true);
      this.CancelManager();
      return;
label_4:
      this.PrintManager("This is not your territory.");
      this.ConnectManager();
      return;
label_8:
      return;
label_15:
      this.ComputeManager(true);
      return;
label_21:
      ParamsMapperListener.m_Merchant = new List<AuthenticationBridgeRule>();
      return;
label_23:
      this.ComputeManager(true);
      return;
label_25:
      if (this.RestartManager() != null)
      {
        this.PrintManager("You must finish or cancel your current move before selecting another territory.");
        return;
      }
      this.VisitManager(authenticationBridgeRule, composer, (Brush) Brushes.Green, true);
      this.ReadManager(1);
      return;
label_29:
      return;
label_68:
      return;
label_65:
      return;
label_49:
      return;
label_5:
      return;
label_1:
      return;
label_45:
      return;
label_46:
      this.ChangeManager(authenticationBridgeRule);
      if (this.InstantiateManager().info == null || this.InstantiateManager().info == this.IncludeManager())
      {
        this.CollectManager(this.InstantiateManager(), 1);
        this.SortManager();
        this.CallManager();
        return;
      }
      this.PrintManager("You cannot capture this territory.");
      this.ConnectManager();
      return;
label_18:
      return;
label_62:
      if (wrapper)
        this.PrintManager("Select the number of armies you wish to attack with.");
      return;
label_66:
      this.PrintManager("You cannot attack this territory from here");
      return;
label_67:
      this.PrintManager("There is nothing here to attack.");
      return;
label_69:
      if (this.RestartManager() == authenticationBridgeRule && composer.BorderBrush == Brushes.Red)
      {
        this.ComputeManager(true);
        return;
      }
      this.PrintManager("You must cancel your previous selection before attacking a different territory.");
      return;
label_78:
      goto label_21;
label_80:
      return;
label_81:
      try
      {
        bool flag4 = authenticationBridgeRule == this.RestartManager();
        int num6 = 1;
        if (ParamsMapperListener.AssetObject())
          ;
        bool flag5;
        while (true)
        {
          switch (num6)
          {
            case 0:
            case 1:
              if (!flag4)
              {
                flag5 = authenticationBridgeRule == this.InstantiateManager();
                num6 = 3;
                continue;
              }
              goto label_84;
            case 2:
            case 4:
              this.ComputeManager(false);
              int num7 = 5;
              num6 = ParamsMapperListener.AssetObject() ? num7 : num7;
              continue;
            case 3:
              if (!flag5)
                goto label_91;
              else
                goto case 2;
            case 5:
              goto label_89;
            default:
              if (true)
              {
                num6 = 4;
                continue;
              }
              goto label_89;
          }
        }
label_84:
        this.ComputeManager(true);
        return;
label_91:
        return;
label_89:;
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RunManager(object init, MouseEventArgs selection)
    {
      int num1 = 7;
      AuthenticationBridgeRule authenticationBridgeRule;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 7:
label_6:
              authenticationBridgeRule = this.StopManager(((FrameworkElement) init).Name.TrimStart('b', 't', 'n'));
              num2 = 2;
              continue;
            case 1:
              goto label_7;
            case 2:
              Button composer = authenticationBridgeRule.composer;
              switch (this.ViewManager())
              {
                case GameState.Attacking:
                  goto label_8;
                case GameState.Conquer:
                  goto label_28;
                case GameState.Move:
                  if (this.InstantiateManager() == null)
                  {
                    num3 = 0;
                    break;
                  }
                  goto label_1;
                case GameState.PlacingArmy:
                  goto label_46;
                default:
                  goto label_53;
              }
              break;
            case 3:
label_1:
              num3 = this.RestartManager() != null ? 1 : 0;
              break;
            case 4:
              if (flag)
              {
                this.ComputeManager(false);
                num2 = 1;
                continue;
              }
              goto label_39;
            case 5:
            case 6:
            case 8:
              goto label_51;
            default:
              goto label_44;
          }
          if (num3 != 0)
          {
            if (authenticationBridgeRule == this.InstantiateManager())
            {
              this.ComputeManager(true);
              if (ParamsMapperListener.CompareObject())
                num2 = 6;
              else
                goto label_6;
            }
            else if (authenticationBridgeRule == this.RestartManager())
            {
              this.ComputeManager(false);
              num2 = 8;
            }
            else
              goto label_51;
          }
          else
            goto label_54;
        }
label_44:
        num1 = 3;
        continue;
label_46:
        flag = authenticationBridgeRule == this.InstantiateManager();
        num1 = 4;
      }
label_54:
      return;
label_7:
      return;
label_8:
      try
      {
        bool flag = !this.PatchManager();
        int num4 = 3;
        while (true)
        {
          int num5 = num4;
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 3:
                goto label_18;
              case 1:
              case 2:
                if (authenticationBridgeRule != this.RestartManager())
                {
                  if (authenticationBridgeRule == this.InstantiateManager())
                  {
                    if (this.Gamemode == GameMode.Classic)
                    {
                      num5 = 5;
                      continue;
                    }
                    goto label_21;
                  }
                  else
                    goto label_34;
                }
                else
                  goto label_14;
              case 4:
                goto label_26;
              case 5:
                goto label_20;
              case 6:
                goto label_25;
              default:
                if (true)
                {
                  num5 = 4;
                  continue;
                }
                goto label_18;
            }
          }
label_18:
          if (flag)
          {
            num4 = 2;
            continue;
          }
          goto label_9;
label_20:
          int num6 = this.RestartManager().factory == 3 ? 1 : 0;
          goto label_22;
label_21:
          num6 = 0;
label_22:
          if (num6 == 0)
          {
            this.ComputeManager(true);
            num4 = 6;
          }
          else
            goto label_23;
        }
label_34:
        return;
label_14:
        this.ComputeManager(false);
        return;
label_26:
        return;
label_9:
        return;
label_23:
        this.PrintManager("You cannot attack with more than 3 armies at a time.");
        return;
label_25:
        return;
      }
      catch (NullReferenceException ex)
      {
        return;
      }
label_28:
      try
      {
        bool flag1 = authenticationBridgeRule == this.RestartManager();
        int num7 = 3;
        while (true)
        {
          int num8 = num7;
          bool flag2;
          while (true)
          {
            switch (num8)
            {
              case 0:
              case 2:
                goto label_32;
              case 1:
              case 4:
                goto label_33;
              case 3:
                if (!flag1)
                {
                  flag2 = authenticationBridgeRule == this.InstantiateManager();
                  if (ParamsMapperListener.CompareObject())
                  {
                    num8 = 4;
                    continue;
                  }
                  goto label_32;
                }
                else
                  goto label_30;
              case 5:
                goto label_38;
              default:
                goto label_37;
            }
          }
label_32:
          this.ComputeManager(true);
          num7 = 5;
          continue;
label_33:
          if (!flag2)
            goto label_52;
          else
            goto label_32;
label_37:
          num7 = 0;
        }
label_30:
        this.ComputeManager(false);
        return;
label_52:
        return;
label_38:
        return;
      }
      catch (NullReferenceException ex)
      {
        return;
      }
label_53:
      return;
label_39:
      return;
label_51:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ListManager(object info, RoutedEventArgs token)
    {
      int num1 = 19;
      List<FactoryIdentifierAttribute>.Enumerator enumerator1;
      int num2;
      int num3;
      int num4;
      while (true)
      {
        int num5 = num1;
        bool flag1;
        GameState gameState;
        Style style1;
        Style resource;
        double num6;
        double num7;
        while (true)
        {
          switch (num5)
          {
            case 0:
              if (!flag1)
              {
                this.imgPlayerDie3.Visibility = Visibility.Collapsed;
                num5 = 16;
                continue;
              }
              goto label_82;
            case 1:
label_59:
              if (num7 > num6)
              {
                this.RestartManager().factory = 0;
                num3 = (int) Math.Ceiling((1.0 - num6) * (double) this.RestartManager().process);
                num4 = this.RestartManager().process - num3;
                num5 = 10;
                continue;
              }
              goto label_60;
            case 2:
            case 8:
              goto label_7;
            case 3:
              goto label_84;
            case 4:
              goto label_61;
            case 5:
              goto label_21;
            case 6:
              goto label_33;
            case 7:
            case 12:
              goto label_46;
            case 9:
              goto label_70;
            case 10:
              goto label_65;
            case 11:
              if (this.RestartManager().process <= 1)
              {
                this.imgEnemyDie2.Visibility = Visibility.Collapsed;
                goto case 15;
              }
              else
                goto label_78;
            case 13:
              this.TestManager();
              if (true)
              {
                num5 = 25;
                continue;
              }
              goto label_33;
            case 14:
              if (this.Gamemode == GameMode.NewRisk)
              {
                num7 = ParamsMapperListener.annotation.NextDouble();
                num6 = 1.0 / (1.0 + Math.Exp(-3.0 * ((double) (this.RestartManager().factory - this.RestartManager().process) / (double) this.RestartManager().process - this.GetManager())));
                if (true)
                {
                  num5 = 1;
                  continue;
                }
                goto case 21;
              }
              else
                goto label_66;
            case 15:
              if (this.RestartManager().factory > 1)
              {
                this.imgPlayerDie2.Visibility = Visibility.Visible;
                this._Rules.Add((FactoryIdentifierAttribute) this.dic);
              }
              else
                this.imgPlayerDie2.Visibility = Visibility.Collapsed;
              flag1 = this.RestartManager().factory > 2;
              if (true)
              {
                num5 = 0;
                continue;
              }
              goto case 19;
            case 16:
              goto label_34;
            case 17:
              goto label_25;
            case 18:
              goto label_30;
            case 19:
              gameState = this.ViewManager();
              if (ParamsMapperListener.CompareObject())
              {
                num5 = 21;
                continue;
              }
              goto label_7;
            case 20:
              ++this.IncludeManager().definition;
              bool flag2 = true;
              using (List<Player>.Enumerator enumerator2 = this.Players.GetEnumerator())
              {
label_42:
                while (enumerator2.MoveNext())
                {
                  Player current = enumerator2.Current;
                  int num8 = 3;
                  if (ParamsMapperListener.AssetObject())
                    ;
                  while (true)
                  {
                    switch (num8)
                    {
                      case 0:
                      case 3:
                        if (current == this.IncludeManager() || current.Territoriesowned <= 0)
                          goto label_42;
                        else
                          goto case 1;
                      case 1:
                      case 2:
                        flag2 = false;
                        num8 = 4;
                        continue;
                      case 4:
                        goto label_44;
                      default:
                        num8 = 2;
                        continue;
                    }
                  }
                }
              }
label_44:
              if (flag2)
              {
                if (ParamsMapperListener.CompareObject())
                {
                  num5 = 9;
                  continue;
                }
                goto label_46;
              }
              else
                goto label_71;
            case 21:
              switch (gameState)
              {
                case GameState.Attacking:
                  if (this.InstantiateManager() == null || this.RestartManager() == null)
                  {
                    this.PrintManager("You must select the territories you wish to attack to/from first.");
                    if (ParamsMapperListener.CompareObject())
                    {
                      num5 = 22;
                      continue;
                    }
                    goto label_59;
                  }
                  else
                  {
                    if (true)
                    {
                      num5 = 14;
                      continue;
                    }
                    goto label_65;
                  }
                case GameState.Conquer:
                  goto label_80;
                case GameState.Move:
                  goto label_28;
                case GameState.PlacingArmy:
                  goto label_76;
                default:
                  goto label_62;
              }
            case 22:
              goto label_79;
            case 23:
              goto label_49;
            case 24:
              style1.Setters.Add((SetterBase) new Setter(Border.BackgroundProperty, (object) this.IncludeManager().Color));
              this.panel_Die.Resources[(object) "btnPlayerDie"] = (object) style1;
              Style style2 = new Style(typeof (Button), resource);
              style2.Setters.Add((SetterBase) new Setter(Border.BackgroundProperty, (object) this.RestartManager().info.Color));
              this.panel_Die.Resources[(object) "btnEnemyDie"] = (object) style2;
              this.CalcField(this._Rules.Count);
              this.SelectField(0);
              this._System = true;
              enumerator1 = this._Rules.GetEnumerator();
              num5 = 23;
              continue;
            case 25:
              goto label_85;
            default:
              num5 = 7;
              continue;
          }
        }
label_7:
        List<AuthenticationBridgeRule>.Enumerator enumerator3;
        try
        {
          while (enumerator3.MoveNext())
          {
            AuthenticationBridgeRule current = enumerator3.Current;
            int num9 = 4;
            bool flag3;
            while (true)
            {
              switch (num9)
              {
                case 0:
                case 4:
                  flag3 = current.info == this.IncludeManager();
                  num9 = 3;
                  continue;
                case 1:
                case 3:
                  if (!flag3)
                    goto label_14;
                  else
                    goto case 2;
                case 2:
                  this.CollectManager(current, current.factory);
                  current.factory = 0;
                  num9 = 5;
                  continue;
                case 5:
                  goto label_14;
                default:
                  if (true)
                  {
                    num9 = 2;
                    continue;
                  }
                  goto case 0;
              }
            }
label_14:;
          }
        }
        finally
        {
          enumerator3.Dispose();
        }
        if (this.IncludeManager()._Setter != 0)
        {
          this.ConnectManager();
          num1 = 4;
          continue;
        }
        break;
label_28:
        if (this.InstantiateManager() != null)
        {
          if (this.RestartManager() != null)
          {
            this.CollectManager(this.RestartManager(), this.RestartManager().factory);
            this.RestartManager().factory = 0;
            num1 = 13;
            continue;
          }
          goto label_23;
        }
        else
        {
          num1 = 5;
          continue;
        }
label_33:
        this.RestartManager().info.Army_strength -= this.RestartManager().process;
        this.RestartManager().process = 0;
        this.RestartManager().info = this.IncludeManager();
        num1 = 3;
        continue;
label_34:
        this.btnPlayerDie.Content = (object) this.IncludeManager().WriteField();
        this.btnEnemyDie.Content = (object) this.RestartManager().info.WriteField();
        resource = this.panel_Die.Resources[(object) "btnDie"] as Style;
        style1 = new Style(typeof (Button), resource);
        num1 = 24;
        continue;
label_46:
        if (!this.PatchManager())
        {
          this.panel_NumberSelection.Visibility = Visibility.Collapsed;
          this.panel_Die.Visibility = Visibility.Visible;
          this._Rules.Clear();
          this._Rules = new List<FactoryIdentifierAttribute>()
          {
            (FactoryIdentifierAttribute) this._Record,
            (FactoryIdentifierAttribute) this._Schema
          };
          num1 = 11;
          continue;
        }
        goto label_75;
label_60:
        --this.RestartManager().info.Territoriesowned;
        num1 = 6;
        continue;
label_66:
        if (this.Gamemode != GameMode.Classic)
          goto label_47;
        else
          goto label_46;
label_70:
        this.ReflectManager();
label_71:
        num2 = (int) Math.Floor((1.0 - num6) * (double) this.RestartManager().factory);
        num1 = 18;
        continue;
label_76:
        enumerator3 = this.CheckManager().GetEnumerator();
        num1 = 8;
        continue;
label_78:
        this.imgEnemyDie2.Visibility = Visibility.Visible;
        this._Rules.Add((FactoryIdentifierAttribute) this.m_Account);
        num1 = 15;
        continue;
label_80:
        this.CollectManager(this.RestartManager(), this.RestartManager().factory);
        this.RestartManager().factory = 0;
        this.RestartManager().composer.Background = (Brush) this.RestartManager().info.Color;
        num1 = 17;
        continue;
label_82:
        this.imgPlayerDie3.Visibility = Visibility.Visible;
        this._Rules.Add((FactoryIdentifierAttribute) this.m_Collection);
        goto label_34;
label_84:
        ++this.IncludeManager().Territoriesowned;
        num1 = 20;
      }
      this.TestManager();
      return;
label_21:
      this.PrintManager("You must select a territory to move armies from.");
      return;
label_23:
      this.PrintManager("You must select a territory to move armies to.");
      return;
label_25:
      this.RestartManager().composer.Content = (object) this.RestartManager().process;
      if (this.InsertField() > 0 && !this.m_Thread.IsBusy)
      {
        this.InvokeManager();
        return;
      }
      this.TestManager();
      return;
label_30:
      this.RestartManager().factory -= num2;
      this.PrintManager(string.Format("You have captured this territory and lost {0} armies in battle.", (object) num2));
      this.ResetManager(GameState.Conquer);
      return;
label_75:
      return;
label_49:
      try
      {
label_55:
        while (enumerator1.MoveNext())
        {
          FactoryIdentifierAttribute current = enumerator1.Current;
          int num10 = 2;
          if (ParamsMapperListener.CompareObject())
            goto label_53;
label_51:
          current.DisableMapper();
          if (true)
          {
            num10 = 4;
            goto label_53;
          }
label_52:
          current.tests.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.CompareManager);
          goto label_51;
label_53:
          while (true)
          {
            switch (num10)
            {
              case 0:
              case 2:
                goto label_52;
              case 1:
              case 3:
                goto label_51;
              case 4:
                goto label_55;
              default:
                num10 = 3;
                continue;
            }
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
      return;
label_61:
      return;
label_65:
      this.PrintManager(string.Format("You have lost this battle, the enemy suffered {0} casualties.", (object) num4));
      this.RestartManager().process = num3;
      this.RestartManager().composer.Content = (object) this.RestartManager().process;
      this.ConnectManager();
      return;
label_47:
      return;
label_62:
      return;
label_79:
      return;
label_85:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Continue(object sender, RoutedEventArgs e)
    {
      int num = 5;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            if (!flag)
            {
              if (this.ViewManager() == GameState.Conquer)
              {
                this.PrintManager("You must finish conquering the territory.");
                num = 6;
                continue;
              }
              goto label_4;
            }
            else
            {
              num = 2;
              continue;
            }
          case 2:
            goto label_2;
          case 3:
            goto label_11;
          case 4:
            goto label_12;
          case 5:
            flag = this.PatchManager();
            num = 0;
            continue;
          case 6:
            goto label_10;
          default:
            if (ParamsMapperListener.CompareObject())
            {
              num = 4;
              continue;
            }
            goto case 0;
        }
      }
label_4:
      this.StartManager();
      this.TestManager();
      return;
label_2:
      return;
label_11:
      return;
label_12:
      return;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Cancel(object sender, RoutedEventArgs e)
    {
      int num = 3;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_3;
          case 1:
          case 4:
            if (!flag)
            {
              this.StartManager();
              num = 5;
              continue;
            }
            goto label_9;
          case 2:
            goto label_8;
          case 3:
            flag = this.PatchManager();
            num = 4;
            continue;
          case 5:
            goto label_7;
          default:
            num = 0;
            continue;
        }
      }
label_9:
      return;
label_3:
      return;
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FillManager(object var1, RoutedEventArgs cont) => this.ComputeManager(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SearchManager(object key, RoutedEventArgs attr) => this.ComputeManager(false);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Settings(object sender, RoutedEventArgs e)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              this._System = true;
              if (!ParamsMapperListener.AssetObject())
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 1:
            case 2:
              goto label_3;
            case 4:
              goto label_2;
            case 5:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_2:
        this.panel_Settings.Visibility = Visibility.Visible;
        num1 = 5;
        continue;
label_3:
        this.panel_MainUI.Visibility = Visibility.Collapsed;
        goto label_2;
label_6:
        num1 = 4;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Return(object sender, RoutedEventArgs e)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              this._System = false;
              num2 = 1;
              continue;
            case 1:
              goto label_2;
            case 2:
            case 3:
              goto label_1;
            case 5:
              goto label_7;
            default:
              goto label_5;
          }
        }
label_1:
        this.panel_Settings.Visibility = Visibility.Collapsed;
        num1 = 5;
        continue;
label_2:
        this.panel_MainUI.Visibility = Visibility.Visible;
        goto label_1;
label_5:
        num1 = 3;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FlushManager(object key, RoutedEventArgs vis)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          bool flag;
          int num3;
          switch (num2)
          {
            case 0:
            case 2:
              flag = this.ViewManager() == GameState.InitialArmyPlace;
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 3;
                continue;
              }
              goto case 3;
            case 1:
              num3 = this.Gamemode == GameMode.Classic ? 1 : 0;
              break;
            case 3:
              if (!flag)
              {
                if (this.ViewManager() != GameState.Conquer)
                {
                  if (this.ViewManager() != GameState.Attacking)
                  {
                    num3 = 0;
                    break;
                  }
                  goto case 1;
                }
                else
                  goto label_16;
              }
              else
                goto label_14;
            case 4:
            case 6:
              goto label_11;
            case 5:
              goto label_6;
            case 7:
              goto label_25;
            default:
              goto label_10;
          }
          if (num3 != 0)
          {
            if (ParamsMapperListener.CompareObject())
              num2 = 6;
            else
              goto label_5;
          }
          else
            goto label_17;
        }
label_10:
        num1 = 1;
        continue;
label_11:
        this.PrintManager("You must finish your attack before saving.");
        num1 = 7;
        continue;
label_16:
        this.PrintManager("You must finish conquering before saving.");
        num1 = 5;
      }
label_5:
      return;
label_6:
      return;
label_25:
      return;
label_14:
      this.PrintManager("You must finish setup before attempting to save.");
      return;
label_17:
      try
      {
        this.StartManager();
        int num4 = 2;
        while (true)
        {
          switch (num4)
          {
            case 0:
            case 2:
              AdapterGetterCandidate.ConnectMapper(this.m_Database);
              goto case 1;
            case 1:
            case 3:
              this.PrintManager("Game saved successfully");
              num4 = 4;
              continue;
            case 4:
              goto label_23;
            default:
              num4 = 3;
              continue;
          }
        }
      }
      catch
      {
        this.PrintManager("An error has occurred. The game may not have saved, please try again.");
      }
label_23:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Quit(object sender, RoutedEventArgs e) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectManager(AuthenticationBridgeRule reference, int indexOf_result)
    {
      int num1 = 1;
      if (true)
        goto label_13;
label_1:
      this.IncludeManager()._Setter -= indexOf_result;
label_2:
      reference.composer.Content = (object) reference.process;
      if (true)
      {
        num1 = 8;
        goto label_13;
      }
label_3:
      if (this.ViewManager() == GameState.InitialArmyPlace)
        num1 = 6;
      else
        goto label_2;
label_13:
      while (true)
      {
        bool flag;
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 1:
            flag = reference.info != this.IncludeManager();
            if (ParamsMapperListener.CompareObject())
            {
              num1 = 4;
              continue;
            }
            goto case 2;
          case 2:
            num3 = this.ViewManager() == GameState.PlacingArmy ? 1 : 0;
            break;
          case 3:
          case 7:
            goto label_10;
          case 4:
            if (flag)
            {
              if (reference.info != null)
                --reference.info.Territoriesowned;
              reference.info = this.IncludeManager();
              reference.composer.Background = (Brush) reference.info.Color;
              this.IncludeManager().Territoriesowned += indexOf_result;
              ++this.IncludeManager().definition;
            }
            if (this.ViewManager() == GameState.InitialArmyPlace)
            {
              num3 = 1;
              break;
            }
            num2 = 2;
            goto label_12;
          case 5:
            goto label_3;
          case 6:
            goto label_1;
          case 8:
            goto label_22;
          default:
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 4;
        }
        if (num3 != 0)
          num2 = 7;
        else
          goto label_11;
label_12:
        num1 = num2;
      }
label_10:
      this.IncludeManager().Army_strength += indexOf_result;
label_11:
      reference.process += indexOf_result;
      goto label_3;
label_22:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void TestManager()
    {
      int num1 = 4;
      if (true)
        goto label_7;
label_1:
      this.ConnectManager();
      int num2 = 3;
label_6:
      num1 = num2;
label_7:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
            goto label_4;
          case 2:
            goto label_2;
          case 3:
            switch (this.ViewManager())
            {
              case GameState.Attacking:
                goto label_13;
              case GameState.Conquer:
                this.ResetManager(GameState.Attacking);
                if (!ParamsMapperListener.AssetObject())
                {
                  num1 = 6;
                  continue;
                }
                goto label_15;
              case GameState.Move:
                this.CallManager();
                num1 = 7;
                continue;
              case GameState.PlacingArmy:
                goto label_12;
              case GameState.InitialArmyPlace:
                goto label_5;
              default:
                if (true)
                {
                  num1 = 5;
                  continue;
                }
                goto label_11;
            }
          case 5:
            goto label_16;
          case 6:
            goto label_17;
          case 7:
            goto label_18;
          default:
            goto label_8;
        }
      }
label_5:
      this.PrintManager("You must place all of your armies.");
      return;
label_4:
      return;
label_2:
      return;
label_16:
      return;
label_17:
      return;
label_18:
      return;
label_8:
      num2 = 1;
      goto label_6;
label_11:
      return;
label_12:
      this.ResetManager(GameState.Attacking);
      return;
label_13:
      this.ResetManager(GameState.Move);
      return;
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ComputeManager(bool isident)
    {
      int num1 = 2;
      if (true)
        goto label_9;
label_1:
      int reference_Y;
      this.IncludeManager()._Setter -= reference_Y;
      int num2 = 9;
label_8:
      num1 = num2;
label_9:
      GameState gameState;
      bool flag1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_2;
          case 1:
          case 7:
            if (flag1)
            {
              reference_Y = -1;
              gameState = this.ViewManager();
              num1 = 6;
              continue;
            }
            this.PrintManager("Please select a territory.");
            if (ParamsMapperListener.CompareObject())
            {
              num1 = 11;
              continue;
            }
            goto case 2;
          case 2:
            flag1 = this.InstantiateManager() != null;
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_31;
          case 3:
          case 8:
            goto label_17;
          case 4:
            goto label_13;
          case 5:
            goto label_1;
          case 6:
            switch (gameState)
            {
              case GameState.Attacking:
                goto label_21;
              case GameState.Conquer:
              case GameState.Move:
                goto label_26;
              case GameState.PlacingArmy:
                if (isident)
                {
                  if (this.IncludeManager()._Setter > 0)
                  {
                    if (true)
                    {
                      num1 = 8;
                      continue;
                    }
                    goto label_17;
                  }
                  else
                  {
                    this.PrintManager("You do not have any armies left to place");
                    num1 = 10;
                    continue;
                  }
                }
                else
                  goto label_7;
              default:
                goto label_6;
            }
          case 9:
            goto label_11;
          case 10:
            goto label_5;
          case 11:
            goto label_31;
          default:
            if (true)
            {
              num1 = 0;
              continue;
            }
            goto label_11;
        }
      }
label_2:
      bool flag2;
      if (flag2)
      {
        this.PrintManager("You must place at least one army");
        return;
      }
label_4:
      this.InstantiateManager().factory += reference_Y;
      num2 = 5;
      goto label_8;
label_7:
      flag2 = this.InstantiateManager().factory <= 1;
      goto label_2;
label_13:
      return;
label_5:
      return;
label_11:
      this.CancelManager();
      num2 = 4;
      goto label_8;
label_6:
      return;
label_17:
      reference_Y = 1;
      goto label_4;
label_21:
      if (this.RestartManager() != null)
      {
        if (isident)
          reference_Y = 1;
        this.ReadManager(reference_Y);
        return;
      }
      this.PrintManager("You must select the territories you wish to attack to/from.");
      return;
label_26:
      if (isident)
        reference_Y = 1;
      this.ReadManager(reference_Y);
      return;
label_31:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int AwakeField() => this._Configuration;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SelectField(int var1_offset)
    {
      int num1 = 1;
      if (ParamsMapperListener.CompareObject())
        goto label_6;
label_1:
      this._Configuration = var1_offset;
      int num2 = 3;
label_5:
      num1 = num2;
label_6:
      switch (num1)
      {
        case 0:
        case 1:
          goto label_1;
        case 2:
        case 4:
          this.PostManager();
          num2 = 5;
          goto label_5;
        case 3:
          if (this._Configuration != this._Expression)
            break;
          goto case 2;
        case 5:
          break;
        default:
          num2 = 4;
          goto label_5;
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int CancelField() => this._Expression;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CalcField(int ID_setup) => this._Expression = ID_setup;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CompareManager(object i, RunWorkerCompletedEventArgs b) => this.SelectField(this.AwakeField() + 1);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostManager()
    {
      int num1 = 13;
      while (true)
      {
        int num2 = num1;
        int num3;
        int tag1;
        int result1;
        int tag2;
        int result2;
        int num4;
        while (true)
        {
          bool flag;
          switch (num2)
          {
            case 0:
              goto label_7;
            case 1:
              break;
            case 2:
              this.RestartManager().process -= num4;
              this.RestartManager().composer.Content = (object) this.RestartManager().process;
              this.PrintManager(string.Format("You lost {0} armies in battle. The enemy lost {1}", (object) num3, (object) num4));
              flag = this.RestartManager().process == 0;
              num2 = 7;
              continue;
            case 3:
            case 8:
label_25:
              this.IncludeManager().Army_strength -= num3;
              this.RestartManager().factory -= num3;
              this.RestartManager().info.Army_strength -= num4;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto case 2;
            case 4:
              goto label_27;
            case 5:
            case 10:
              goto label_21;
            case 6:
              goto label_5;
            case 7:
              if (flag)
              {
                this.PrintManager("You have successfully captured this territory.");
                this.btnDieStatus.Content = (object) "Continue to Conquer";
                if (ParamsMapperListener.CompareObject())
                {
                  num2 = 11;
                  continue;
                }
                goto case 3;
              }
              else
              {
                this.btnDieStatus.Content = (object) "Continue to Attack";
                goto case 11;
              }
            case 9:
              goto case 1;
            case 11:
              this.btnDieStatus.Visibility = Visibility.Visible;
              this._System = false;
              if (ParamsMapperListener.CompareObject())
              {
                num2 = 14;
                continue;
              }
              goto case 12;
            case 12:
              num4 = 0;
              if (result1 != -1 && result2 != -1)
              {
                if (!this.AddManager(result1, result2))
                {
                  ++num3;
                  goto case 9;
                }
                else
                  goto label_34;
              }
              else
                break;
            case 13:
              goto label_39;
            case 14:
              goto label_29;
            default:
              goto label_4;
          }
          if (!this.AddManager(tag1, tag2))
          {
            ++num3;
            goto label_25;
          }
          else
            goto label_38;
        }
label_4:
        num1 = 9;
        continue;
label_5:
        bool flag1;
        if (flag1)
        {
          num1 = 0;
          continue;
        }
        goto label_8;
label_7:
        this.RateManager(ref tag1, ref result1, this.m_Collection._Tag);
label_8:
        if (this.m_Account._Tag != -1)
          this.RateManager(ref tag2, ref result2, this.m_Account._Tag);
label_11:
        foreach (FactoryIdentifierAttribute rule in this._Rules)
        {
          int num5 = 2;
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 2:
                goto label_14;
              case 1:
              case 3:
                goto label_17;
              default:
                num5 = 3;
                continue;
            }
          }
label_14:
          rule._Tag = -1;
label_17:;
        }
        num3 = 0;
        num1 = 12;
        continue;
label_21:
        ++this.IncludeManager().definition;
        num1 = 1;
        continue;
label_27:
        tag2 = this._Schema._Tag;
        result1 = -1;
        result2 = -1;
        if (this.dic._Tag != -1)
        {
          this.RateManager(ref tag1, ref result1, this.dic._Tag);
          flag1 = this.m_Collection._Tag != -1;
          num1 = 6;
          continue;
        }
        goto label_11;
label_34:
        ++num4;
        num1 = 10;
        continue;
label_38:
        ++num4;
        ++this.IncludeManager().definition;
        num1 = 3;
        continue;
label_39:
        tag1 = this._Record._Tag;
        num1 = 4;
      }
label_29:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RemoveManager(object ident, RoutedEventArgs ord)
    {
      int num1 = 9;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        while (true)
        {
          bool flag2;
          bool flag3;
          switch (num2)
          {
            case 0:
            case 5:
              flag2 = true;
              num2 = 4;
              continue;
            case 1:
            case 6:
label_20:
              if (!flag3)
              {
                this.btnDieStatus.Visibility = Visibility.Collapsed;
                this.panel_Die.Visibility = Visibility.Collapsed;
                this.panel_NumberSelection.Visibility = Visibility.Visible;
                if (!((string) ((ContentControl) ident).Content == "Continue to Attack"))
                {
                  --this.RestartManager().info.Territoriesowned;
                  if (ParamsMapperListener.CompareObject())
                  {
                    num2 = 8;
                    continue;
                  }
                  goto label_25;
                }
                else
                  goto label_28;
              }
              else
                goto label_21;
            case 2:
              goto label_26;
            case 3:
              if (flag1 && !this.m_Thread.IsBusy)
              {
                this.InvokeManager();
                break;
              }
              break;
            case 4:
              foreach (Player player in this.Players)
              {
                int num3 = 3;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 3:
                      if (player == this.IncludeManager() || player.Territoriesowned <= 0)
                        goto label_8;
                      else
                        goto case 1;
                    case 1:
                    case 2:
                      flag2 = false;
                      num3 = 4;
                      continue;
                    case 4:
                      goto label_8;
                    default:
                      num3 = 2;
                      continue;
                  }
                }
label_8:;
              }
              if (!flag2)
                goto case 7;
              else
                goto label_13;
            case 7:
              this.ResetManager(GameState.Conquer);
              break;
            case 8:
              this.RestartManager().info = this.IncludeManager();
              ++this.IncludeManager().Territoriesowned;
              goto case 0;
            case 9:
              flag3 = (string) ((ContentControl) ident).Content == "Dice Rolling...";
              int num4 = 6;
              num2 = ParamsMapperListener.AssetObject() ? num4 : num4;
              continue;
            case 10:
              goto label_31;
            default:
              goto label_17;
          }
          this.btnDieStatus.Content = (object) "Outcome";
          if (true)
            num2 = 10;
          else
            goto label_20;
        }
label_13:
        this.ReflectManager();
        num1 = 7;
        continue;
label_17:
        num1 = 0;
        continue;
label_21:
        num1 = 2;
        continue;
label_28:
        this.StartManager();
        flag1 = this.InsertField() > 0;
        num1 = 3;
      }
label_26:
      return;
label_25:
      return;
label_31:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateManager(ref int instance, ref int result, int filtersize)
    {
      int num1 = 5;
      if (true)
      {
        while (true)
        {
          bool flag1;
          bool flag2;
          int num2;
          switch (num1)
          {
            case 0:
            case 1:
              if (flag1)
              {
                flag2 = filtersize > instance;
                num2 = 4;
                break;
              }
              goto label_1;
            case 2:
            case 4:
              if (!flag2)
              {
                result = filtersize;
                if (ParamsMapperListener.CompareObject())
                {
                  num1 = 6;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_7;
            case 3:
            case 6:
              goto label_11;
            case 5:
              flag1 = filtersize > result;
              num2 = 0;
              break;
            default:
              num1 = 3;
              continue;
          }
          num1 = num2;
        }
label_1:
        return;
label_7:
        result = instance;
        instance = filtersize;
      }
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool AddManager(int configstart, int position_caller)
    {
      int num1 = 3;
      bool flag1;
      while (true)
      {
        bool flag2;
        int num2;
        switch (num1)
        {
          case 0:
          case 1:
            if (!flag2)
            {
              flag1 = true;
              num1 = 5;
              continue;
            }
            goto label_3;
          case 2:
          case 4:
          case 5:
            goto label_8;
          case 3:
            flag2 = position_caller >= configstart;
            num2 = 0;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_3:
      flag1 = false;
label_8:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void LogoutManager(object setup, RoutedEventArgs pred) => this.ReflectManager();

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 5;
      if (ParamsMapperListener.AssetObject())
        return;
      while (true)
      {
        Uri resourceLocator;
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
            Application.LoadComponent((object) this, resourceLocator);
            num2 = 6;
            break;
          case 1:
          case 3:
            if (!flag)
            {
              this.param = true;
              resourceLocator = new Uri("/IEnumUnkn;component/gamewindow.xaml", UriKind.Relative);
              goto case 0;
            }
            else
            {
              num2 = 4;
              break;
            }
          case 2:
            goto label_11;
          case 4:
            goto label_12;
          case 5:
            flag = this.param;
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 0;
          case 6:
            goto label_10;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
      }
label_11:
      return;
label_12:
      return;
label_10:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int max_value, object visitor)
    {
      int num1 = 30;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            goto label_133;
          case 1:
            goto label_134;
          case 2:
            goto label_135;
          case 3:
            goto label_136;
          case 4:
            goto label_137;
          case 5:
            goto label_138;
          case 6:
            goto label_139;
          case 7:
            goto label_140;
          case 8:
            goto label_141;
          case 9:
            goto label_142;
          case 10:
            goto label_143;
          case 11:
            goto label_144;
          case 12:
            switch (num3)
            {
              case 1:
                goto label_19;
              case 2:
                goto label_20;
              case 4:
                this.m_Listener = (ImageBrush) visitor;
                if (true)
                {
                  num1 = 8;
                  continue;
                }
                goto label_22;
              case 5:
                goto label_121;
              case 6:
                goto label_122;
              case 7:
                goto label_123;
              case 8:
                this.btnEastern_US = (Button) visitor;
                num1 = 9;
                continue;
              case 9:
                goto label_81;
              case 10:
                this.btnNorthwest_Canada = (Button) visitor;
                num2 = 17;
                break;
              case 11:
                goto label_72;
              case 12:
                goto label_73;
              case 13:
                goto label_74;
              case 14:
                this.btnArgentina = (Button) visitor;
                num2 = 3;
                break;
              case 15:
                goto label_25;
              case 16:
                goto label_26;
              case 17:
                goto label_27;
              case 18:
                this.btnUK_Ireland = (Button) visitor;
                num2 = 25;
                break;
              case 19:
                this.btnIceland = (Button) visitor;
                num2 = 11;
                break;
              case 20:
                goto label_49;
              case 21:
                this.btnScandinavia = (Button) visitor;
                num1 = 31;
                continue;
              case 22:
                goto label_110;
              case 23:
                goto label_111;
              case 24:
                goto label_112;
              case 25:
                goto label_113;
              case 26:
                this.btnEast_Africa = (Button) visitor;
                num2 = 4;
                break;
              case 27:
                goto label_13;
              case 28:
                goto label_14;
              case 29:
                this.btnNorth_Africa = (Button) visitor;
                if (!ParamsMapperListener.AssetObject())
                {
                  num1 = 20;
                  continue;
                }
                goto label_16;
              case 30:
                goto label_115;
              case 31:
                goto label_116;
              case 32:
                goto label_117;
              case 33:
                goto label_118;
              case 34:
                this.btnJapan = (Button) visitor;
                if (true)
                {
                  num1 = 15;
                  continue;
                }
                goto label_120;
              case 35:
                this.btnMiddle_East = (Button) visitor;
                num1 = 5;
                continue;
              case 36:
                goto label_65;
              case 37:
                goto label_66;
              case 38:
                goto label_67;
              case 39:
                goto label_68;
              case 40:
                this.btnEastern_Australia = (Button) visitor;
                num2 = 14;
                break;
              case 41:
                goto label_51;
              case 42:
                this.btnNew_Guinea = (Button) visitor;
                num1 = 23;
                continue;
              case 43:
                this.btnIndonesia = (Button) visitor;
                if (true)
                {
                  num1 = 28;
                  continue;
                }
                goto label_24;
              case 44:
                goto label_98;
              case 45:
                goto label_99;
              case 46:
                goto label_100;
              case 47:
                goto label_101;
              case 48:
                goto label_102;
              case 49:
                goto label_103;
              case 50:
                goto label_104;
              case 51:
                goto label_105;
              case 52:
                goto label_106;
              case 53:
                goto label_32;
              case 54:
                goto label_33;
              case 55:
                goto label_34;
              case 56:
                goto label_35;
              case 57:
                goto label_36;
              case 58:
                goto label_37;
              case 59:
                goto label_38;
              case 60:
                goto label_39;
              case 61:
                this.lblPlayer2Territories = (Label) visitor;
                int num4 = 13;
                num1 = ParamsMapperListener.AssetObject() ? num4 : num4;
                continue;
              case 62:
                this.lblPlayer2Strength = (Label) visitor;
                num1 = 6;
                continue;
              case 63:
                goto label_85;
              case 64:
                goto label_86;
              case 65:
                goto label_87;
              case 66:
                goto label_88;
              case 67:
                goto label_89;
              case 68:
                goto label_90;
              case 69:
                goto label_91;
              case 70:
                this.panel_Player4 = (StackPanel) visitor;
                if (!ParamsMapperListener.AssetObject())
                {
                  num1 = 22;
                  continue;
                }
                goto label_93;
              case 71:
                goto label_76;
              case 72:
                goto label_77;
              case 73:
                goto label_78;
              case 74:
                goto label_79;
              case 75:
                this.brd_Player5 = (Border) visitor;
                num2 = 0;
                break;
              case 76:
                goto label_53;
              case 77:
                goto label_54;
              case 78:
                goto label_55;
              case 79:
                goto label_56;
              case 80:
                goto label_57;
              case 81:
                goto label_58;
              case 82:
                goto label_59;
              case 83:
                goto label_60;
              case 84:
                goto label_61;
              case 85:
                goto label_62;
              case 86:
                this.lblPlayer6Strength = (Label) visitor;
                num1 = 24;
                continue;
              case 87:
                goto label_41;
              case 88:
                goto label_42;
              case 89:
                goto label_43;
              case 90:
                goto label_44;
              case 91:
                goto label_45;
              case 92:
                goto label_46;
              case 93:
                this.btnState = (Button) visitor;
                this.btnState.Click += new RoutedEventHandler(this.ListManager);
                if (true)
                {
                  num1 = 16;
                  continue;
                }
                goto label_48;
              case 94:
                goto label_4;
              case 95:
                goto label_5;
              case 96:
                this.panel_Die_Player = (StackPanel) visitor;
                num1 = 1;
                continue;
              case 97:
                goto label_94;
              case 98:
                goto label_95;
              case 99:
                goto label_96;
              case 100:
                this.btnEnemyDie = (Button) visitor;
                num2 = 7;
                break;
              case 101:
                goto label_29;
              case 102:
                goto label_30;
              case 103:
                this.imgEnemyDie2 = (Image) visitor;
                num1 = 2;
                continue;
              case 104:
                goto label_125;
              case 105:
                goto label_126;
              case 106:
                goto label_127;
              case 107:
                goto label_128;
              case 108:
                ((ButtonBase) visitor).Click += new RoutedEventHandler(this.Settings);
                num2 = 21;
                break;
              case 109:
                ((ButtonBase) visitor).Click += new RoutedEventHandler(this.Quit);
                if (true)
                {
                  num1 = 18;
                  continue;
                }
                goto label_84;
              case 110:
                goto label_130;
              case 111:
                goto label_131;
              case 112:
                this.panel_Settings = (Viewbox) visitor;
                num2 = 29;
                break;
              case 113:
                goto label_2;
              case 114:
                this.mediaplayer = (MediaElement) visitor;
                num2 = 10;
                break;
              case 115:
                goto label_7;
              case 116:
                goto label_8;
              case 117:
                goto label_9;
              case 118:
                goto label_10;
              case 119:
                goto label_11;
              default:
                this.param = true;
                num2 = 32;
                break;
            }
            break;
          case 13:
            goto label_145;
          case 14:
            goto label_146;
          case 15:
            goto label_147;
          case 16:
            goto label_148;
          case 17:
            goto label_149;
          case 18:
            goto label_150;
          case 19:
            goto label_151;
          case 20:
            goto label_152;
          case 21:
            goto label_153;
          case 22:
            goto label_154;
          case 23:
            goto label_155;
          case 24:
            goto label_156;
          case 25:
            goto label_157;
          case 26:
            goto label_158;
          case 27:
            goto label_159;
          case 28:
            goto label_160;
          case 29:
            goto label_161;
          case 30:
            num3 = max_value;
            if (ParamsMapperListener.CompareObject())
            {
              num1 = 12;
              continue;
            }
            goto label_71;
          case 31:
            goto label_162;
          case 32:
            goto label_163;
          default:
            num2 = 26;
            break;
        }
        num1 = num2;
      }
label_2:
      this.lblMediaDetails = (Label) visitor;
      return;
label_4:
      this.panel_Die = (Grid) visitor;
      return;
label_5:
      this.btnPlayerDie = (Button) visitor;
      return;
label_7:
      this.slider_Volume = (Slider) visitor;
      return;
label_8:
      this.chkMusicEnabled = (CheckBox) visitor;
      return;
label_9:
      this.chkFullscreen = (CheckBox) visitor;
      return;
label_10:
      this.chkHints = (CheckBox) visitor;
      return;
label_11:
      ((ButtonBase) visitor).Click += new RoutedEventHandler(this.Return);
      return;
label_13:
      this.btnMadagascar = (Button) visitor;
      return;
label_14:
      this.btnEgypt = (Button) visitor;
      return;
label_16:
      return;
label_19:
      this.panel_MainUI = (StackPanel) visitor;
      return;
label_20:
      this.GameGrid = (Grid) visitor;
      return;
label_22:
      return;
label_24:
      return;
label_25:
      this.btnBrazil = (Button) visitor;
      return;
label_26:
      this.btnPeru = (Button) visitor;
      return;
label_27:
      this.btnVenezuela = (Button) visitor;
      return;
label_29:
      this.panel_Die_Enemy = (StackPanel) visitor;
      return;
label_30:
      this.imgEnemyDie1 = (Image) visitor;
      return;
label_32:
      this.rectPlayerColor1 = (Rectangle) visitor;
      return;
label_33:
      this.lblPlayerName1 = (Label) visitor;
      return;
label_34:
      this.lblPlayer1Territories = (Label) visitor;
      return;
label_35:
      this.lblPlayer1Strength = (Label) visitor;
      return;
label_36:
      this.brd_Player2 = (Border) visitor;
      return;
label_37:
      this.panel_Player2 = (StackPanel) visitor;
      return;
label_38:
      this.rectPlayerColor2 = (Rectangle) visitor;
      return;
label_39:
      this.lblPlayerName2 = (Label) visitor;
      return;
label_41:
      this.brd_ActionPanel = (Border) visitor;
      return;
label_42:
      this.panel_NumberSelection = (StackPanel) visitor;
      return;
label_43:
      this.btnStateDisp = (Button) visitor;
      return;
label_44:
      ((ButtonBase) visitor).Click += new RoutedEventHandler(this.SearchManager);
      return;
label_45:
      this.btnNumber = (Button) visitor;
      return;
label_46:
      ((ButtonBase) visitor).Click += new RoutedEventHandler(this.FillManager);
      return;
label_48:
      return;
label_49:
      this.btnNorthern_Europe = (Button) visitor;
      return;
label_51:
      this.btnWestern_Australia = (Button) visitor;
      return;
label_53:
      this.panel_Player5 = (StackPanel) visitor;
      return;
label_54:
      this.rectPlayerColor5 = (Rectangle) visitor;
      return;
label_55:
      this.lblPlayerName5 = (Label) visitor;
      return;
label_56:
      this.lblPlayer5Territories = (Label) visitor;
      return;
label_57:
      this.lblPlayer5Strength = (Label) visitor;
      return;
label_58:
      this.brd_Player6 = (Border) visitor;
      return;
label_59:
      this.panel_Player6 = (StackPanel) visitor;
      return;
label_60:
      this.rectPlayerColor6 = (Rectangle) visitor;
      return;
label_61:
      this.lblPlayerName6 = (Label) visitor;
      return;
label_62:
      this.lblPlayer6Territories = (Label) visitor;
      return;
label_65:
      this.btnMongolia = (Button) visitor;
      return;
label_66:
      this.btnSoutheast_Asia = (Button) visitor;
      return;
label_67:
      this.btnSiberia = (Button) visitor;
      return;
label_68:
      this.btnUral = (Button) visitor;
      return;
label_71:
      return;
label_72:
      this.btnOntario = (Button) visitor;
      return;
label_73:
      this.btnQuebec = (Button) visitor;
      return;
label_74:
      this.btnWestern_US = (Button) visitor;
      return;
label_76:
      this.rectPlayerColor4 = (Rectangle) visitor;
      return;
label_77:
      this.lblPlayerName4 = (Label) visitor;
      return;
label_78:
      this.lblPlayer4Territories = (Label) visitor;
      return;
label_79:
      this.lblPlayer4Strength = (Label) visitor;
      return;
label_81:
      this.btnGreenland = (Button) visitor;
      return;
label_84:
      return;
label_85:
      this.brd_Player3 = (Border) visitor;
      return;
label_86:
      this.panel_Player3 = (StackPanel) visitor;
      return;
label_87:
      this.rectPlayerColor3 = (Rectangle) visitor;
      return;
label_88:
      this.lblPlayerName3 = (Label) visitor;
      return;
label_89:
      this.lblPlayer3Territories = (Label) visitor;
      return;
label_90:
      this.lblPlayer3Strength = (Label) visitor;
      return;
label_91:
      this.brd_Player4 = (Border) visitor;
      return;
label_93:
      return;
label_94:
      this.imgPlayerDie1 = (Image) visitor;
      return;
label_95:
      this.imgPlayerDie2 = (Image) visitor;
      return;
label_96:
      this.imgPlayerDie3 = (Image) visitor;
      return;
label_98:
      this.btnIrkutsk = (Button) visitor;
      return;
label_99:
      this.btnKamchatka = (Button) visitor;
      return;
label_100:
      this.btnYakutsk = (Button) visitor;
      return;
label_101:
      this.pb_Timer = (ProgressBar) visitor;
      return;
label_102:
      this.panel_UI = (StackPanel) visitor;
      return;
label_103:
      this.brd_Players = (Border) visitor;
      return;
label_104:
      this.panel_Players = (StackPanel) visitor;
      return;
label_105:
      this.brd_Player1 = (Border) visitor;
      return;
label_106:
      this.panel_Player1 = (StackPanel) visitor;
      return;
label_151:
      return;
label_150:
      return;
label_149:
      return;
label_148:
      return;
label_147:
      return;
label_146:
      return;
label_145:
      return;
label_144:
      return;
label_143:
      return;
label_142:
      return;
label_141:
      return;
label_140:
      return;
label_139:
      return;
label_138:
      return;
label_137:
      return;
label_136:
      return;
label_135:
      return;
label_134:
      return;
label_153:
      return;
label_154:
      return;
label_152:
      return;
label_156:
      return;
label_155:
      return;
label_163:
      return;
label_162:
      return;
label_161:
      return;
label_133:
      return;
label_159:
      return;
label_158:
      return;
label_157:
      return;
label_160:
      return;
label_110:
      this.btnSouthern_Europe = (Button) visitor;
      return;
label_111:
      this.btnSoviet_Bloc = (Button) visitor;
      return;
label_112:
      this.btnWestern_Europe = (Button) visitor;
      return;
label_113:
      this.btnCentral_Africa = (Button) visitor;
      return;
label_115:
      this.btnSouth_Africa = (Button) visitor;
      return;
label_116:
      this.btnAfghanistan = (Button) visitor;
      return;
label_117:
      this.btnChina = (Button) visitor;
      return;
label_118:
      this.btnIndia = (Button) visitor;
      return;
label_120:
      return;
label_121:
      this.btnAlaska = (Button) visitor;
      return;
label_122:
      this.btnAlberta = (Button) visitor;
      return;
label_123:
      this.btnCentral_America = (Button) visitor;
      return;
label_125:
      this.btnDieStatus = (Button) visitor;
      this.btnDieStatus.Click += new RoutedEventHandler(this.RemoveManager);
      return;
label_126:
      ((ButtonBase) visitor).Click += new RoutedEventHandler(this.Continue);
      return;
label_127:
      ((ButtonBase) visitor).Click += new RoutedEventHandler(this.Cancel);
      return;
label_128:
      ((ButtonBase) visitor).Click += new RoutedEventHandler(this.FlushManager);
      return;
label_130:
      this.scrlOutput = (ScrollViewer) visitor;
      return;
label_131:
      this.txtOutput = (TextBlock) visitor;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int res, object result)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        int num3;
        EventSetter eventSetter;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 6:
              goto label_10;
            case 1:
            case 3:
              if (num3 != 3)
              {
                num2 = 4;
                continue;
              }
              eventSetter = new EventSetter();
              eventSetter.Event = ButtonBase.ClickEvent;
              eventSetter.Handler = (Delegate) new RoutedEventHandler(this.ConcatManager);
              goto case 5;
            case 2:
              goto label_8;
            case 4:
              goto label_11;
            case 5:
              ((Style) result).Setters.Add((SetterBase) eventSetter);
              eventSetter = new EventSetter();
              eventSetter.Event = UIElement.MouseRightButtonDownEvent;
              eventSetter.Handler = (Delegate) new MouseButtonEventHandler(this.RunManager);
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_10;
            case 7:
              goto label_3;
            default:
              goto label_7;
          }
        }
label_7:
        num1 = 5;
        continue;
label_8:
        ((Style) result).Setters.Add((SetterBase) eventSetter);
        num1 = 7;
        continue;
label_10:
        num3 = res;
        num1 = 3;
      }
label_11:
      return;
label_3:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ParamsMapperListener()
    {
      int num1 = 0;
      if (true)
        goto label_4;
label_1:
      ListenerManager.InitStub();
      int num2 = 4;
label_3:
      num1 = num2;
label_4:
      switch (num1)
      {
        case 0:
          goto label_1;
        case 1:
        case 4:
          ParamsMapperListener.annotation = new Random();
          goto case 2;
        case 2:
        case 3:
          ParamsMapperListener.m_Merchant = new List<AuthenticationBridgeRule>();
          num2 = 5;
          goto label_3;
        case 5:
          break;
        default:
          num2 = 3;
          goto label_3;
      }
    }

    internal static bool CompareObject() => true;

    internal static bool AssetObject() => false;
  }
}
