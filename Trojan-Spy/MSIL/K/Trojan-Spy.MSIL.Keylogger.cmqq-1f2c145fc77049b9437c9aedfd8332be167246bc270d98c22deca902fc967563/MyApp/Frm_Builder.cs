// Decompiled with JetBrains decompiler
// Type: MyApp.Frm_Builder
// Assembly: CobianRAT, Version=1.0.40.7, Culture=neutral, PublicKeyToken=null
// MVID: E2EA0EB9-E35B-43B8-8108-8D71E6EED121
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\Trojan-Spy.MSIL.Keylogger.cmqq-1f2c145fc77049b9437c9aedfd8332be167246bc270d98c22deca902fc967563.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace MyApp
{
  [DesignerGenerated]
  public sealed class Frm_Builder : Form
  {
    private static List<WeakReference> Qpe69buO8G;
    private IContainer y2t6vI4MpW;
    [AccessedThroughProperty("Button3")]
    private Button RcE6ugLuMR;
    [AccessedThroughProperty("B_startup")]
    private CheckBox F8l67eP3R5;
    [AccessedThroughProperty("Label3")]
    private Label fce6N8aLuO;
    [AccessedThroughProperty("Label5")]
    private Label ADA6z1vfsg;
    [AccessedThroughProperty("Label2")]
    private Label ocX8KLZ3Lx;
    [AccessedThroughProperty("B_Dir")]
    private ComboBox Sch8MdkW1s;
    [AccessedThroughProperty("B_host")]
    private TextBox PxF8YxGKYW;
    [AccessedThroughProperty("Label4")]
    private Label GWW8tDCLBt;
    [AccessedThroughProperty("B_exe")]
    private TextBox oxP86Z4YkD;
    [AccessedThroughProperty("B_port")]
    private NumericUpDown iaZ8867Chu;
    [AccessedThroughProperty("Label7")]
    private Label NeB8BbPf6j;
    [AccessedThroughProperty("B_ID")]
    private TextBox q928JX7F5k;
    [AccessedThroughProperty("B_P")]
    private PictureBox cpq8U78UXU;
    [AccessedThroughProperty("B_Cicon")]
    private CheckBox ASV8QedOqT;
    [AccessedThroughProperty("Button1")]
    private Button OJx8GncqcC;
    [AccessedThroughProperty("ContextMenuStrip1")]
    private ContextMenuStrip H2a8pVEaLg;
    [AccessedThroughProperty("ClearConnectionToolStripMenuItem")]
    private ToolStripMenuItem g5y8VXCaZ5;
    [AccessedThroughProperty("Button2")]
    private Button aGL8wNpiRO;
    [AccessedThroughProperty("Label1")]
    private Label OE282XJgXp;
    [AccessedThroughProperty("GroupBox1")]
    private GroupBox XR88kJhlOt;
    [AccessedThroughProperty("GroupBox2")]
    private GroupBox UtI8LWlR2j;
    [AccessedThroughProperty("ListBox1")]
    private ListBox va48xYCERC;
    [AccessedThroughProperty("Button4")]
    private Button JIi8d0xYyL;
    [AccessedThroughProperty("B_CSTP")]
    private CheckBox iJL8mtrBTq;
    public string CON;
    private string v0S8EYoDHU;

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    static Frm_Builder()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Frm_Builder()
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool disposing)
    {
      // ISSUE: unable to decompile the method.
    }

    [DebuggerStepThrough]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void H2s60hSF1l()
    {
      // ISSUE: unable to decompile the method.
    }

    internal virtual Button Button3
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual CheckBox B_startup
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Label Label3
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Label Label5
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Label Label2
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual ComboBox B_Dir
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual TextBox B_host
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Label Label4
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual TextBox B_exe
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual NumericUpDown B_port
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Label Label7
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual TextBox B_ID
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual PictureBox B_P
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual CheckBox B_Cicon
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual ContextMenuStrip ContextMenuStrip1
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual ToolStripMenuItem ClearConnectionToolStripMenuItem
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Button Button2
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual GroupBox GroupBox1
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual GroupBox GroupBox2
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual ListBox ListBox1
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual Button Button4
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    internal virtual CheckBox B_CSTP
    {
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.NoInlining)] get
      {
        // ISSUE: unable to decompile the method.
      }
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized | MethodImplOptions.NoInlining)] set
      {
        // ISSUE: unable to decompile the method.
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void refreshCON()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Builder_Save()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void Builder_Load()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void enF6F9aGkM(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string Randomkey()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Pgk6IRVsgX(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void mgW6rXiWeb(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void oZL6HmaaIV(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void k9S63aInVM(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void G0y6ebDI0R(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void pYx6sCwYCL(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NJs6bKv2pP(object _param1, EventArgs _param2)
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
