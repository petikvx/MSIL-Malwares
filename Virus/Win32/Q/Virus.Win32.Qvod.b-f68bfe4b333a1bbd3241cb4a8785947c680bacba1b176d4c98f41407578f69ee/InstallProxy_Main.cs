// Decompiled with JetBrains decompiler
// Type: ATI.ACE.MOM.InstallProxy.InstallProxy_Main
// Assembly: MOM.InstallProxy, Version=2.0.0.0, Culture=neutral, PublicKeyToken=90ba9c70f846762e
// MVID: 5446EB96-4C55-42A7-ABE4-31FC19F3A149
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Virus.Win32.Qvod.b-f68bfe4b333a1bbd3241cb4a8785947c680bacba1b176d4c98f41407578f69ee.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;

namespace ATI.ACE.MOM.InstallProxy
{
  internal class InstallProxy_Main
  {
    private readonly string[] MainInputArguments;
    private readonly string RegistryMOMInstall = "SOFTWARE\\ATI\\ACE\\Settings\\MOM\\Install";
    private RegistryNotification RegistryNotification_;
    private readonly int ERROR_FILE_NOT_FOUND = 2;
    private readonly int ERROR_ACCESS_DENIED = 5;
    private static readonly string Software_Name = "software";
    private static readonly string Software_Wow6432Node_Name = "software\\wow6432node";

    public InstallProxy_Main(string[] args)
    {
      this.MainInputArguments = args;
      this.RegistryNotification_ = new RegistryNotification(this.RegistryMOMInstall);
      if (this.MainInputArguments == null)
        return;
      int length = this.MainInputArguments.Length;
    }

    internal void Run()
    {
      if (!this.IsRegistryKeyExist(this.RegistryMOMInstall))
        return;
      this.RegistryNotification_.WaitForKeyChange();
      this.RunMOM();
    }

    private void RunMOM()
    {
      Process process1 = new Process();
      try
      {
        ProcessStartInfo processStartInfo = new ProcessStartInfo("mom.exe");
        Process process2 = new Process();
        process2.StartInfo = processStartInfo;
        process2.Start();
        int id = process2.Id;
        process2.Close();
      }
      catch (Win32Exception ex)
      {
        if (ex.NativeErrorCode == this.ERROR_FILE_NOT_FOUND)
        {
          Console.WriteLine(ex.Message + ". Check the path.");
          throw new Exception("MOM File not found");
        }
        if (ex.NativeErrorCode == this.ERROR_ACCESS_DENIED)
        {
          Console.WriteLine(ex.Message + ". You do not have permission to run MOM.");
          throw new Exception("You do not have permission to run MOM.");
        }
        throw ex;
      }
    }

    private bool IsRegistryKeyExist(string key)
    {
      if (IntPtr.Size == 8)
      {
        key = key.ToLower(CultureInfo.InvariantCulture);
        if (!key.Contains(InstallProxy_Main.Software_Wow6432Node_Name))
          key = key.Replace(InstallProxy_Main.Software_Name.ToLower(CultureInfo.InvariantCulture), InstallProxy_Main.Software_Wow6432Node_Name.ToLower(CultureInfo.InvariantCulture));
      }
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(key);
      if (registryKey == null)
        return false;
      registryKey.Close();
      return true;
    }
  }
}
