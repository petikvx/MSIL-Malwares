// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: DigitShap, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AB9237C5-7B14-44B1-B37B-A2ADF34FB693
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-ed844cfae2c80b291651f15b71e1c0608612446513cb527a5753bfa831a2e348.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -1133412196;
      int aIndex;
      int count;
      int index;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -242738536)) % 18U)
        {
          case 0:
            this._dice = new Dice();
            num1 = (int) num2 * -1184990253 ^ -218715562;
            continue;
          case 1:
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * -44400799 ^ -1865579390;
            continue;
          case 2:
            int num3;
            num1 = num3 = index >= count ? -274555660 : (num3 = -62409962);
            continue;
          case 3:
            this._random = Game.\u202D‪‏‭⁮⁭‮‍‍‪⁬​​‏‍⁯‮‫‎‌‎‏⁭⁭⁮⁬⁯⁫‭⁭‬‬⁮​‪⁭‫‫‬‬‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * -2016103873 ^ -1161530372;
            continue;
          case 4:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * 782497333 ^ 1822951207;
            continue;
          case 5:
            int num4;
            num1 = num4 = aIndex >= count ? -479186042 : (num4 = -1846101533);
            continue;
          case 6:
            jsonNode = json["players"];
            num1 = (int) num2 * 1109879652 ^ -428867257;
            continue;
          case 7:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -828575918;
            continue;
          case 8:
            ++aIndex;
            num1 = (int) num2 * -1060335952 ^ -1573970367;
            continue;
          case 9:
            ++index;
            num1 = (int) num2 * -865419381 ^ -988815869;
            continue;
          case 10:
            num1 = (int) num2 * -1479585177 ^ -1828303476;
            continue;
          case 11:
            goto label_1;
          case 12:
            this._playerStates[index] = new PlayerState();
            num1 = -1867607817;
            continue;
          case 13:
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * 468765652 ^ 280928514;
            continue;
          case 14:
            goto label_3;
          case 15:
            count = jsonNode.Count;
            num1 = (int) num2 * 538875105 ^ -1785167180;
            continue;
          case 16:
            this._buffer = buffer;
            num1 = (int) num2 * -163119234 ^ 1599405655;
            continue;
          case 17:
            index = 0;
            num1 = (int) num2 * -440061386 ^ 1670209440;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 1388648694;
        bool flag;
        bool finished2;
        int index;
        PlayerState[] playerStates;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 196945544)) % 15U)
          {
            case 0:
              int num3 = flag ? -1870916330 : (num3 = -1810189213);
              num1 = num3 ^ (int) num2 * -2006181787;
              continue;
            case 1:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -557091644 ^ -1850970779;
              continue;
            case 2:
              num1 = 527602481;
              continue;
            case 4:
              num1 = (int) num2 * 492611367 ^ 1429534672;
              continue;
            case 5:
              goto label_1;
            case 6:
              playerState = playerStates[index];
              num1 = 1180616294;
              continue;
            case 7:
              int num4 = !finished1 ? 1762945132 : (num4 = 1137730468);
              num1 = num4 ^ (int) num2 * -1164536982;
              continue;
            case 8:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * 1894274411 ^ 1905120601;
              continue;
            case 9:
              ++index;
              num1 = 943895562;
              continue;
            case 10:
              num1 = (int) num2 * 1208703146 ^ -1359653622;
              continue;
            case 11:
              finished2 = false;
              num1 = (int) num2 * 576170877 ^ 52434991;
              continue;
            case 12:
              int num5;
              num1 = num5 = index < playerStates.Length ? 55175755 : (num5 = 2024445316);
              continue;
            case 13:
              finished2 = true;
              num1 = (int) num2 * 2043194453 ^ 2081238886;
              continue;
            case 14:
              finished2 = true;
              num1 = (int) num2 * 755647184 ^ -1252396462;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = 35703791;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 779368918)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * 1619335776 ^ 1878410379;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = 1439846443;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2080481988)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1247936503 ^ -1137625603;
            continue;
          case 3:
            this._currentTurn = 0;
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 1318744708 ^ -1647653079;
            continue;
          case 4:
            this.Winners.Clear();
            num1 = (int) num2 * -2074241898 ^ -664524151;
            continue;
          case 5:
            num1 = (int) num2 * 239320185 ^ -2132568393;
            continue;
          case 6:
            this.Losers.Clear();
            num1 = (int) num2 * -1590301507 ^ 1076741744;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * -137077747 ^ 474368499;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
      int index = 0;
label_1:
      int num1 = 963059618;
      int num2;
      bool morePlanningSprint;
      bool flag;
      Player player;
      PlayerState playerState;
      int planningCardsCount;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1532245633)) % 25U)
        {
          case 0:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -1365065436 ^ 1098934283;
            continue;
          case 1:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * -850201999 ^ 2005264735;
            continue;
          case 2:
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * -1139777501 ^ -949741750;
            continue;
          case 3:
            num1 = (int) num3 * 1432942642 ^ -1797098021;
            continue;
          case 4:
            num1 = 1957518006;
            continue;
          case 5:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1435579487 ^ 1780976627;
            continue;
          case 6:
            num1 = 1386108852;
            continue;
          case 7:
            player = this.Players[index];
            num1 = 893285712;
            continue;
          case 8:
            goto label_1;
          case 9:
            num2 = 0;
            num1 = 1504949476;
            continue;
          case 10:
            num1 = (int) num3 * -1685324368 ^ -1386118013;
            continue;
          case 11:
            goto label_3;
          case 12:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 2054047292 ^ -442342294;
            continue;
          case 13:
            int num4;
            num1 = num4 = num2 > 0 ? 1678250499 : (num4 = 29455299);
            continue;
          case 14:
            int num5 = morePlanningSprint ? -1845290744 : (num5 = -1031004832);
            num1 = num5 ^ (int) num3 * 1644962615;
            continue;
          case 15:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 1974098465 ^ -1412072868;
            continue;
          case 16:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -344065230 ^ -1191763072;
            continue;
          case 17:
            flag = planningCardsCount == 0;
            num1 = (int) num3 * 334871428 ^ 1315571716;
            continue;
          case 18:
            playerState.Sprint = 0;
            num1 = (int) num3 * 588232738 ^ -1091519135;
            continue;
          case 19:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            ++index;
            num1 = 884300691;
            continue;
          case 20:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 1124139582 ^ -809190432;
            continue;
          case 21:
            num2 = 0;
            num1 = (int) num3 * -573781386 ^ 1071597019;
            continue;
          case 22:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1499473814 ^ -1069329908;
            continue;
          case 23:
            int num6;
            num1 = num6 = index < this.Players.Length ? 2022899346 : (num6 = 1720274171);
            continue;
          case 24:
            int num7 = !flag ? -269230755 : (num7 = -1088106977);
            num1 = num7 ^ (int) num3 * 866969315;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 555257338;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1246530552)) % 11U)
        {
          case 0:
            this.Print((object) Game.\u206F⁬⁪‭‫‎​‎‎‏​‪‭‏‬⁬‬‭‪⁬‎⁭‪‎⁮⁫‌‬⁫⁬⁮⁮‫⁯‪⁬​‭‬‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 2022031408;
            continue;
          case 1:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 329941304 ^ 1667361885;
            continue;
          case 2:
            ++this._currentPlayer;
            flag = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -634678232 ^ 1943906852;
            continue;
          case 3:
            num1 = (int) num2 * -679912252 ^ -166338447;
            continue;
          case 4:
            this._currentPlayer = 0;
            int num3 = this._currentTurn <= 0 ? 1871107847 : (num3 = 96058867);
            num1 = num3 ^ (int) num2 * -15457366;
            continue;
          case 5:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1079878571;
            continue;
          case 6:
            num1 = (int) num2 * -562050189 ^ -690527427;
            continue;
          case 7:
            int num4 = flag ? -781629872 : (num4 = -1405397683);
            num1 = num4 ^ (int) num2 * 1502372868;
            continue;
          case 8:
            goto label_1;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206F⁬⁭‫‭‫‍​‭‍⁪‮‍​‪‏‮⁮‪‬⁬⁫⁫⁪‫‎‫⁭‌‏‭‮⁮‬‌⁬⁬‮‬‍‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 830686042 ^ -373785189;
            continue;
          case 10:
            goto label_3;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -1376128962;
      while (true)
      {
        uint num2;
        Card card;
        bool flag1;
        int num3;
        bool flag2;
        PlayerState playerState1;
        int index;
        PlayerState playerState2;
        bool flag3;
        int num4;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool onlyOneWinner;
        bool flag8;
        bool flag9;
        int num5;
        switch ((num2 = (uint) (num1 ^ -317347365)) % 82U)
        {
          case 0:
            int num6 = onlyOneWinner ? -617586550 : (num6 = -1210740224);
            num1 = num6 ^ (int) num2 * -1311717865;
            continue;
          case 1:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 362259657 ^ -1107101965;
            continue;
          case 2:
            flag6 = !flag2;
            num1 = (int) num2 * 1399870584 ^ -1497626412;
            continue;
          case 3:
            num1 = (int) num2 * 243628666 ^ 1270875326;
            continue;
          case 4:
            num1 = (int) num2 * 357551831 ^ 1830371424;
            continue;
          case 5:
            num1 = -1951976585;
            continue;
          case 6:
            playerState2.Resources -= num3;
            num1 = (int) num2 * 593441649 ^ -128240718;
            continue;
          case 7:
            playerState1.Resources -= Game.\u200D‎‍‏‮⁪⁫⁮‮‫‏‪⁭⁮‌‫‍⁫‍⁪​‌‬⁮‎‬⁮‎‌⁬⁫⁯⁫‪⁭‪⁬‭​⁪‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            int num7 = playerState1.Resources >= 0 ? -1296933508 : (num7 = -989679411);
            num1 = num7 ^ (int) num2 * -1423383587;
            continue;
          case 8:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 9:
            num1 = (int) num2 * 1700901611 ^ -896362502;
            continue;
          case 10:
            num1 = (int) num2 * 1756912474 ^ -1004929633;
            continue;
          case 11:
            num1 = -260726372;
            continue;
          case 12:
            num1 = -1073370618;
            continue;
          case 13:
            this.Print((object) Game.\u206F⁬⁭‫‭‫‍​‭‍⁪‮‍​‪‏‮⁮‪‬⁬⁫⁫⁪‫‎‫⁭‌‏‭‮⁮‬‌⁬⁬‮‬‍‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1175273154 ^ 992730893;
            continue;
          case 14:
            num1 = -867082779;
            continue;
          case 15:
            int num8 = playerState2.Resources >= 0 ? -642412541 : (num8 = -2090199633);
            num1 = num8 ^ (int) num2 * -1316595623;
            continue;
          case 16:
            num1 = (int) num2 * -925400216 ^ -780012596;
            continue;
          case 17:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag9 ? (object) "ALL " : (object) "", flag2 ? (object) "receives" : (object) "pays", (object) Game.\u200D⁮‬⁫⁪‫‮⁫⁭‍‪‭‭​⁭⁮‎‎⁯⁬⁯‏‮​‮‬‮‌⁬⁬⁯‍⁯‏‌​​⁮​⁮‮(num3), flag1 ? (object) "advance" : (object) "stay");
            num1 = -1180333284;
            continue;
          case 18:
            flag7 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -450650903;
            continue;
          case 19:
            num1 = (int) num2 * 652151638 ^ 731672487;
            continue;
          case 20:
            flag5 = !this.Losers.Contains(num4);
            num1 = -373926555;
            continue;
          case 21:
            num1 = (int) num2 * -1207671650 ^ 2037894670;
            continue;
          case 22:
            num1 = (int) num2 * 188653063 ^ 1011884213;
            continue;
          case 23:
            num1 = (int) num2 * -1719351753 ^ 1568955794;
            continue;
          case 24:
            this.Losers.Add(num4);
            num1 = (int) num2 * 153490550 ^ -1328325737;
            continue;
          case 25:
            num1 = (int) num2 * -1525995731 ^ 1205844226;
            continue;
          case 26:
            int num9;
            num1 = num9 = index < this._playerStates.Length ? -1396325998 : (num9 = -1130403528);
            continue;
          case 27:
            int num10;
            num1 = num10 = num4 != playerIndex ? -863080939 : (num10 = -1514859733);
            continue;
          case 28:
            int num11;
            num1 = num11 = playerState2.Sprint > this.Rules.SprintCount ? -2087687446 : (num11 = -1977364890);
            continue;
          case 29:
            ++num4;
            num1 = -586883406;
            continue;
          case 30:
            int num12 = playerState2.State == 0 ? 900855405 : (num12 = 1667537409);
            num1 = num12 ^ (int) num2 * 1153098097;
            continue;
          case 31:
            playerState1.State = State.Lose;
            flag3 = !this.Losers.Contains(index);
            num1 = -1460163846;
            continue;
          case 32:
            num1 = (int) num2 * 1869151430 ^ 3183096;
            continue;
          case 33:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1767825667 ^ 1478090162;
            continue;
          case 34:
            int num13 = card.Impact - player.PlannedForCard(card.Type);
            flag1 = num13 < this.Rules.StayOnSprintMinDiff;
            num3 = Game.\u200D‎‍‏‮⁪⁫⁮‮‫‏‪⁭⁮‌‫‍⁫‍⁪​‌‬⁮‎‬⁮‎‌⁬⁫⁯⁫‪⁭‪⁬‭​⁪‮(0, num13);
            num1 = (int) num2 * 1058556055 ^ 1661303130;
            continue;
          case 35:
            num1 = (int) num2 * 769691017 ^ 514541058;
            continue;
          case 36:
            num1 = (int) num2 * 1321565791 ^ -976611105;
            continue;
          case 37:
            int num14 = !flag8 ? 1073228114 : (num14 = 1389180314);
            num1 = num14 ^ (int) num2 * 1253870935;
            continue;
          case 38:
            num1 = -817817748;
            continue;
          case 39:
            ++index;
            num1 = -1977619223;
            continue;
          case 40:
            int num15 = !flag7 ? -1588423240 : (num15 = -121959595);
            num1 = num15 ^ (int) num2 * -1392004011;
            continue;
          case 41:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 1860595317 ^ -541575814;
            continue;
          case 42:
            flag2 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -438328672 ^ 289176759;
              continue;
            }
            num5 = 0;
            break;
          case 43:
            num1 = (int) num2 * 1992548259 ^ 1937338015;
            continue;
          case 44:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1969543600 ^ 947727283;
            continue;
          case 45:
            num1 = -1977364890;
            continue;
          case 46:
            num1 = (int) num2 * -2626400 ^ 2143050871;
            continue;
          case 47:
            index = 0;
            num1 = (int) num2 * 1023135269 ^ -851920726;
            continue;
          case 48:
            flag8 = playerState2.Sprint < 0;
            num1 = -355282632;
            continue;
          case 49:
            int num16 = !flag9 ? 1138639008 : (num16 = 1313503981);
            num1 = num16 ^ (int) num2 * -433494117;
            continue;
          case 50:
            int num17 = flag5 ? -1570915655 : (num17 = -1832011273);
            num1 = num17 ^ (int) num2 * -1058471634;
            continue;
          case 51:
            ++playerState2.Sprint;
            num1 = (int) num2 * -1900261063 ^ 172063590;
            continue;
          case 52:
            num1 = (int) num2 * -916085655 ^ -158046840;
            continue;
          case 53:
            this.Losers.Add(index);
            num1 = (int) num2 * -516015197 ^ 1067651194;
            continue;
          case 54:
            goto label_1;
          case 55:
            int num18 = flag6 ? 1788105010 : (num18 = 2059575609);
            num1 = num18 ^ (int) num2 * 1328291065;
            continue;
          case 56:
            goto label_3;
          case 57:
            playerState2.State = State.Won;
            num1 = (int) num2 * -334632620 ^ -592257338;
            continue;
          case 58:
            flag1 = false;
            num1 = -1292116281;
            continue;
          case 59:
            playerState2.State = State.Lose;
            int num19 = this.Losers.Contains(playerIndex) ? -574144443 : (num19 = -256138708);
            num1 = num19 ^ (int) num2 * 194937766;
            continue;
          case 60:
            num1 = (int) num2 * 120266844 ^ 1836030312;
            continue;
          case 61:
            num1 = -1336167140;
            continue;
          case 62:
            this._finished = true;
            num4 = 0;
            num1 = (int) num2 * -1448354029 ^ 33514356;
            continue;
          case 63:
            flag1 = true;
            num3 = card.Impact;
            num1 = (int) num2 * 2042679058 ^ -1532096069;
            continue;
          case 64:
            num1 = (int) num2 * 89638800 ^ -1018422010;
            continue;
          case 65:
            num1 = (int) num2 * -1103677417 ^ 1042176502;
            continue;
          case 66:
            num1 = (int) num2 * 1549237348 ^ 1274283720;
            continue;
          case 67:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206F⁬⁭‫‭‫‍​‭‍⁪‮‍​‪‏‮⁮‪‬⁬⁫⁫⁪‫‎‫⁭‌‏‭‮⁮‬‌⁬⁬‮‬‍‮("\t", playerState3 != null ? Game.\u200C‎‎​‪‌⁭⁯‎⁬​‪‬⁪‬‌‭⁭‪‎⁫⁬⁬⁯‫⁭‍⁫‬‫⁮‌⁭‮​‏⁯⁭​‬‮((object) playerState3) : (string) null));
            num1 = -235610390;
            continue;
          case 68:
            num1 = (int) num2 * 709290997 ^ -1334749823;
            continue;
          case 69:
            int num20 = !flag3 ? 1052188938 : (num20 = 890102177);
            num1 = num20 ^ (int) num2 * -760117833;
            continue;
          case 70:
            card = this.DrawCard();
            num1 = (int) num2 * -1287125199 ^ -1887535051;
            continue;
          case 71:
            num1 = -1718743690;
            continue;
          case 72:
            int num21;
            num1 = num21 = !flag1 ? -2034460849 : (num21 = -1859318870);
            continue;
          case 73:
            flag4 = num4 < this._playerStates.Length;
            num1 = -241623827;
            continue;
          case 74:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * -1195702014 ^ -392504508;
            continue;
          case 75:
            playerState1 = this._playerStates[index];
            num1 = -1425803404;
            continue;
          case 76:
            int num22 = flag4 ? -802519002 : (num22 = -1686844751);
            num1 = num22 ^ (int) num2 * 1138421626;
            continue;
          case 77:
            playerState2 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1012934323 ^ 231450729;
            continue;
          case 78:
            ++playerState2.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 165960708 ^ -617244243;
            continue;
          case 79:
            num1 = (int) num2 * -1552294371 ^ -555054886;
            continue;
          case 80:
            num1 = (int) num2 * -803526935 ^ 1578679992;
            continue;
          case 81:
            num1 = (int) num2 * -1102679496 ^ -1472363203;
            continue;
          default:
            goto label_87;
        }
        flag9 = num5 != 0;
        num1 = -1059691951;
      }
label_3:
      return;
label_87:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1461600919;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1973952429)) % 8U)
        {
          case 0:
            card1 = this._deck[0];
            num1 = -181832380;
            continue;
          case 2:
            int num3 = this._deck.Count > 0 ? -748067465 : (num3 = -76619902);
            num1 = num3 ^ (int) num2 * 591227994;
            continue;
          case 3:
            num1 = (int) num2 * 1670650382 ^ -577763744;
            continue;
          case 4:
            num1 = (int) num2 * 1918710105 ^ -1370525745;
            continue;
          case 5:
            this.ShuffleCards();
            num1 = (int) num2 * -1229628301 ^ 787575840;
            continue;
          case 6:
            goto label_1;
          case 7:
            this._deck.RemoveAt(0);
            card2 = card1;
            num1 = (int) num2 * -2089926200 ^ 697586880;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 862306071;
      string str1;
      bool flag;
      string str2;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 180531211)) % 10U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * -1638512272 ^ -785230498;
            continue;
          case 1:
            index = 0;
            num1 = (int) num2 * 418974177 ^ 2024842115;
            continue;
          case 2:
            str1 = "";
            num1 = (int) num2 * -102397384 ^ 1813794110;
            continue;
          case 3:
            num1 = (int) num2 * 544590535 ^ -1823818059;
            continue;
          case 4:
            int num3 = flag ? 300720994 : (num3 = 1154897027);
            num1 = num3 ^ (int) num2 * -1513006746;
            continue;
          case 5:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200C‎‎​‪‌⁭⁯‎⁬​‪‬⁪‬‌‭⁭‪‎⁫⁬⁬⁯‫⁭‍⁫‬‫⁮‌⁭‮​‏⁯⁭​‬‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202C⁯‎‍⁮‮⁫​‭‫‫​‫‌⁫‍‌‎‍‌⁪⁭‌‬‬⁪‍‬‍‌‏‫⁪⁯⁬‮‮​⁯‌‮(strArray);
            ++index;
            num1 = 512715550;
            continue;
          case 6:
            goto label_1;
          case 7:
            flag = index < this._playerStates.Length;
            num1 = 934423983;
            continue;
          case 9:
            num1 = (int) num2 * -212332183 ^ 201352246;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -119166983;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2082953586)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -2034024359 ^ -1577080175;
            continue;
          case 3:
            str = this.ToString(false);
            num1 = (int) num2 * -358120081 ^ 288160194;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -975518995;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -437735180)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Game.\u200E‎⁬‬‮‫‏‮‎⁯⁫‪⁫⁯‬⁫‪‮‭‫⁪‌‪‌‎⁪‬‎​⁭‬‫‬⁯‎⁯‬⁬‭‪‮(Game.\u200C‎‎​‪‌⁭⁯‎⁬​‪‬⁪‬‌‭⁭‪‎⁫⁬⁬⁯‫⁭‍⁫‬‫⁮‌⁭‮​‏⁯⁭​‬‮(text), more);
            num1 = (int) num2 * 467423238 ^ -1541586590;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      Game.\u202E⁮‭‏⁯⁯‪‬‪⁮‫​​‭⁭‭‮​‮⁪​‎‫⁫‎‫⁬‮⁯​​​‮⁯⁫‫‮⁬‎⁫‮(this._buffer, str);
    }

    static Random \u202D‪‏‭⁮⁭‮‍‍‪⁬​​‏‍⁯‮‫‎‌‎‏⁭⁭⁮⁬⁯⁫‭⁭‬‬⁮​‪⁭‫‫‬‬‮([In] int obj0) => new Random(obj0);

    static string \u206F⁬⁪‭‫‎​‎‎‏​‪‭‏‬⁬‬‭‪⁬‎⁭‪‎⁮⁫‌‬⁫⁬⁮⁮‫⁯‪⁬​‭‬‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206F⁬⁭‫‭‫‍​‭‍⁪‮‍​‪‏‮⁮‪‬⁬⁫⁫⁪‫‎‫⁭‌‏‭‮⁮‬‌⁬⁬‮‬‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200D‎‍‏‮⁪⁫⁮‮‫‏‪⁭⁮‌‫‍⁫‍⁪​‌‬⁮‎‬⁮‎‌⁬⁫⁯⁫‪⁭‪⁬‭​⁪‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200D⁮‬⁫⁪‫‮⁫⁭‍‪‭‭​⁭⁮‎‎⁯⁬⁯‏‮​‮‬‮‌⁬⁬⁯‍⁯‏‌​​⁮​⁮‮([In] int obj0) => Math.Abs(obj0);

    static string \u200C‎‎​‪‌⁭⁯‎⁬​‪‬⁪‬‌‭⁭‪‎⁫⁬⁬⁯‫⁭‍⁫‬‫⁮‌⁭‮​‏⁯⁭​‬‮([In] object obj0) => obj0.ToString();

    static string \u202C⁯‎‍⁮‮⁫​‭‫‫​‫‌⁫‍‌‎‍‌⁪⁭‌‬‬⁪‍‬‍‌‏‫⁪⁯⁬‮‮​⁯‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200E‎⁬‬‮‫‏‮‎⁯⁫‪⁫⁯‬⁫‪‮‭‫⁪‌‪‌‎⁪‬‎​⁭‬‫‬⁯‎⁯‬⁬‭‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202E⁮‭‏⁯⁯‪‬‪⁮‫​​‭⁭‭‮​‮⁪​‎‫⁫‎‫⁬‮⁯​​​‮⁯⁫‫‮⁬‎⁫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
