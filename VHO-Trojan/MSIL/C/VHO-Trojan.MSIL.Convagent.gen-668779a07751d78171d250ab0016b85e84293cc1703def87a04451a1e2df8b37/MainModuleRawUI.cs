// Decompiled with JetBrains decompiler
// Type: ModuleNameSpace.MainModuleRawUI
// Assembly: installer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BE36CCF7-21FD-4261-9C31-8B7F15D1A5A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\VHO-Trojan.MSIL.Convagent.gen-668779a07751d78171d250ab0016b85e84293cc1703def87a04451a1e2df8b37.exe

using System;
using System.Management.Automation.Host;
using System.Windows.Forms;

namespace ModuleNameSpace
{
  internal class MainModuleRawUI : PSHostRawUserInterface
  {
    private ConsoleColor GUIBackgroundColor = ConsoleColor.White;
    private ConsoleColor GUIForegroundColor;
    private Form Invisible_Form;

    public override ConsoleColor BackgroundColor
    {
      get => this.GUIBackgroundColor;
      set => this.GUIBackgroundColor = value;
    }

    public override Size BufferSize
    {
      get => new Size(120, 50);
      set
      {
      }
    }

    public override Coordinates CursorPosition
    {
      get => new Coordinates(0, 0);
      set
      {
      }
    }

    public override int CursorSize
    {
      get => 25;
      set
      {
      }
    }

    public override void FlushInputBuffer()
    {
      if (this.Invisible_Form != null)
      {
        this.Invisible_Form.Close();
        this.Invisible_Form = (Form) null;
      }
      else
      {
        this.Invisible_Form = new Form();
        this.Invisible_Form.Opacity = 0.0;
        this.Invisible_Form.ShowInTaskbar = false;
        this.Invisible_Form.Visible = true;
      }
    }

    public override ConsoleColor ForegroundColor
    {
      get => this.GUIForegroundColor;
      set => this.GUIForegroundColor = value;
    }

    public override BufferCell[,] GetBufferContents(Rectangle rectangle)
    {
      BufferCell[,] bufferContents = new BufferCell[rectangle.Bottom - rectangle.Top + 1, rectangle.Right - rectangle.Left + 1];
      for (int index1 = 0; index1 <= rectangle.Bottom - rectangle.Top; ++index1)
      {
        for (int index2 = 0; index2 <= rectangle.Right - rectangle.Left; ++index2)
          bufferContents[index1, index2] = new BufferCell(' ', this.GUIForegroundColor, this.GUIBackgroundColor, BufferCellType.Complete);
      }
      return bufferContents;
    }

    public override bool KeyAvailable => true;

    public override Size MaxPhysicalWindowSize => new Size(240, 84);

    public override Size MaxWindowSize => new Size(120, 84);

    public override KeyInfo ReadKey(ReadKeyOptions options) => (options & ReadKeyOptions.IncludeKeyDown) != (ReadKeyOptions) 0 ? ReadKey_Box.Show("", "", true) : ReadKey_Box.Show("", "", false);

    public override void ScrollBufferContents(
      Rectangle source,
      Coordinates destination,
      Rectangle clip,
      BufferCell fill)
    {
    }

    public override void SetBufferContents(Rectangle rectangle, BufferCell fill)
    {
    }

    public override void SetBufferContents(Coordinates origin, BufferCell[,] contents)
    {
    }

    public override Coordinates WindowPosition
    {
      get => new Coordinates() { X = 0, Y = 0 };
      set
      {
      }
    }

    public override Size WindowSize
    {
      get => new Size() { Height = 50, Width = 120 };
      set
      {
      }
    }

    public override string WindowTitle
    {
      get => AppDomain.CurrentDomain.FriendlyName;
      set
      {
      }
    }
  }
}
