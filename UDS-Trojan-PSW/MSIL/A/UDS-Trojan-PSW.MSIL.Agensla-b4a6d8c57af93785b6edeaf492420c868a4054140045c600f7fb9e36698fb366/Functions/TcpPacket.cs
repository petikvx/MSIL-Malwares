// Decompiled with JetBrains decompiler
// Type: coffee_machine_control.Functions.TcpPacket
// Assembly: EnumBuil, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FBEB9EA3-01CE-4899-B996-D20A537C4F89
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\UDS-Trojan-PSW.MSIL.Agensla-b4a6d8c57af93785b6edeaf492420c868a4054140045c600f7fb9e36698fb366.exe

using System;
using System.Diagnostics;

namespace coffee_machine_control.Functions
{
  public class TcpPacket
  {
    private byte[] Data;
    private string IP;
    private int Delay;

    public TcpPacket(byte[] data, int Len)
    {
      this.Data = new byte[Len];
      Array.Copy((Array) data, 0, (Array) this.Data, 0, Len);
      this.IP = "";
      this.Delay = 0;
    }

    public TcpPacket(
      string IP,
      byte ClassID,
      byte CommandID,
      int Length,
      byte[] data,
      int delay)
    {
      this.Delay = delay;
      this.IP = IP;
      int num = 0;
      if (data != null)
        num = data.Length;
      this.Data = new byte[4 + num];
      this.Data[0] = ClassID;
      this.Data[1] = CommandID;
      this.Data[2] = (byte) Length;
      this.Data[3] = (byte) (Length >> 8);
      if (data == null)
        return;
      Array.Copy((Array) data, 0, (Array) this.Data, 4, data.Length);
    }

    public int getDelay() => this.Delay;

    public string getIP() => this.IP;

    public int getId() => (int) this.Data[0] << 8 | (int) this.Data[1];

    public byte getClassId() => this.Data[0];

    public byte getCommandId() => this.Data[1];

    public int getDataLength() => (int) this.Data[3] | (int) this.Data[2];

    public byte[] getBuffer()
    {
      Debug.WriteLine("Packet:" + BitConverter.ToString(this.Data));
      return this.Data;
    }

    public byte[] getData()
    {
      int dataLength = this.getDataLength();
      if (this.Data.Length < dataLength + 4)
        return (byte[]) null;
      byte[] destinationArray = new byte[dataLength];
      Array.Copy((Array) this.Data, 4, (Array) destinationArray, 0, dataLength);
      return destinationArray;
    }
  }
}
