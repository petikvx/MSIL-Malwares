// Decompiled with JetBrains decompiler
// Type: DShowNET.Device.DsDev
// Assembly: p, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 91D63E37-42E0-404C-97F4-07116ACD2D57
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Trojan.MSIL.KillAV.ao-27eafab1bfbe5012a9dd5eb6a22a5e09a25b91a1b79c55ba29e0e7098dcc6f9f.exe

using System;
using System.Collections;
using System.Runtime.InteropServices;

namespace DShowNET.Device
{
  [ComVisible(false)]
  public class DsDev
  {
    public static bool GetDevicesOfCat(Guid cat, out ArrayList devs)
    {
      devs = (ArrayList) null;
      object o = (object) null;
      ICreateDevEnum createDevEnum = (ICreateDevEnum) null;
      UCOMIEnumMoniker ppEnumMoniker = (UCOMIEnumMoniker) null;
      UCOMIMoniker[] rgelt = new UCOMIMoniker[1];
      try
      {
        o = Activator.CreateInstance(Type.GetTypeFromCLSID(Clsid.SystemDeviceEnum));
        ((ICreateDevEnum) o).CreateClassEnumerator(ref cat, out ppEnumMoniker, 0);
        int num = 0;
        while (ppEnumMoniker.Next(1, rgelt, out int _) == 0 && rgelt[0] != null)
        {
          DsDevice dsDevice = new DsDevice();
          dsDevice.Name = DsDev.GetFriendlyName(rgelt[0]);
          if (devs == null)
            devs = new ArrayList();
          dsDevice.Mon = rgelt[0];
          rgelt[0] = (UCOMIMoniker) null;
          devs.Add((object) dsDevice);
          ++num;
        }
        return num > 0;
      }
      catch (Exception ex)
      {
        if (devs != null)
        {
          foreach (DsDevice dsDevice in devs)
            dsDevice.Dispose();
          devs = (ArrayList) null;
        }
        return false;
      }
      finally
      {
        createDevEnum = (ICreateDevEnum) null;
        if (rgelt[0] != null)
          Marshal.ReleaseComObject((object) rgelt[0]);
        rgelt[0] = (UCOMIMoniker) null;
        if (ppEnumMoniker != null)
          Marshal.ReleaseComObject((object) ppEnumMoniker);
        if (o != null)
          Marshal.ReleaseComObject(o);
      }
    }

    private static string GetFriendlyName(UCOMIMoniker mon)
    {
      object ppvObj = (object) null;
      IPropertyBag propertyBag1 = (IPropertyBag) null;
      try
      {
        Guid guid = typeof (IPropertyBag).GUID;
        mon.BindToStorage((UCOMIBindCtx) null, (UCOMIMoniker) null, ref guid, out ppvObj);
        IPropertyBag propertyBag2 = (IPropertyBag) ppvObj;
        object pVar = (object) "";
        int errorCode = propertyBag2.Read("FriendlyName", ref pVar, IntPtr.Zero);
        if (errorCode != 0)
          Marshal.ThrowExceptionForHR(errorCode);
        return pVar as string;
      }
      catch (Exception ex)
      {
        return (string) null;
      }
      finally
      {
        propertyBag1 = (IPropertyBag) null;
        if (ppvObj != null)
          Marshal.ReleaseComObject(ppvObj);
      }
    }
  }
}
