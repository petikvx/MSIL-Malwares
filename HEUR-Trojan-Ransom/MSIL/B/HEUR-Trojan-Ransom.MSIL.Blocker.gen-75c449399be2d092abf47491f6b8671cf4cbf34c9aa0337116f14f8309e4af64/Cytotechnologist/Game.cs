// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: SystemThreadingSpinLockDebugVi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4BC7AA9F-A353-4AE7-9558-F3A117D261BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-75c449399be2d092abf47491f6b8671cf4cbf34c9aa0337116f14f8309e4af64.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = 529625407;
      int index;
      int aIndex;
      int count;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 519118248)) % 14U)
        {
          case 0:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = 2114758145;
            continue;
          case 1:
            goto label_3;
          case 2:
            this._random = Game.\u200D⁫⁭⁬‪‪⁫‬⁫⁭​‏‌⁫⁮‮‬‌‭‎​‎⁪‫‎⁭‏‌​‎⁫‬‬⁭⁪‍⁪⁮‭⁯‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            jsonNode = json["players"];
            num1 = (int) num2 * -1284674318 ^ -343729248;
            continue;
          case 3:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -352556094 ^ -1673459198;
            continue;
          case 4:
            this._playerStates[index] = new PlayerState();
            num1 = 380678164;
            continue;
          case 5:
            int num3;
            num1 = num3 = aIndex >= count ? 1790385659 : (num3 = 1977972676);
            continue;
          case 6:
            count = jsonNode.Count;
            this.Players = new Player[count];
            aIndex = 0;
            num1 = (int) num2 * -133741390 ^ 792103113;
            continue;
          case 7:
            ++aIndex;
            num1 = (int) num2 * -363682647 ^ 734947752;
            continue;
          case 8:
            int num4;
            num1 = num4 = index >= count ? 1925512883 : (num4 = 1660397280);
            continue;
          case 9:
            goto label_1;
          case 10:
            ++index;
            num1 = (int) num2 * -1732990475 ^ 1709185216;
            continue;
          case 11:
            this._buffer = buffer;
            num1 = (int) num2 * -1425347197 ^ 1797911325;
            continue;
          case 12:
            index = 0;
            num1 = (int) num2 * 472871927 ^ 1624755576;
            continue;
          case 13:
            num1 = (int) num2 * 1545488251 ^ 583103018;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = -280064124;
        bool finished2;
        PlayerState[] playerStates;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1539849856)) % 14U)
          {
            case 0:
              num1 = (int) num2 * 2021273592 ^ -2085380666;
              continue;
            case 1:
              int num3;
              num1 = num3 = index < playerStates.Length ? -1365175043 : (num3 = -780809034);
              continue;
            case 2:
              finished2 = true;
              num1 = (int) num2 * -1894229762 ^ -1821783303;
              continue;
            case 3:
              num1 = -369660205;
              continue;
            case 4:
              goto label_1;
            case 5:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * -919066027 ^ 131904072;
              continue;
            case 7:
              finished2 = false;
              num1 = (int) num2 * 1527092525 ^ -1133333699;
              continue;
            case 8:
              num1 = (int) num2 * -78873089 ^ -818508742;
              continue;
            case 9:
              num1 = (int) num2 * -1116854170 ^ 974609048;
              continue;
            case 10:
              int num4 = finished1 ? 1133683934 : (num4 = 1527099319);
              num1 = num4 ^ (int) num2 * -383108333;
              continue;
            case 11:
              ++index;
              num1 = -180787513;
              continue;
            case 12:
              finished2 = true;
              num1 = (int) num2 * -738542320 ^ 1323501572;
              continue;
            case 13:
              int num5;
              num1 = num5 = playerStates[index].State != State.Playing ? -2021374803 : (num5 = -846093027);
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = -2090700266;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -637100861)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * 1127195567 ^ 426327629;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = -1985207604;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -15076458)) % 9U)
        {
          case 0:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1754674503 ^ -1037906395;
            continue;
          case 1:
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -1076109369 ^ 24705086;
            continue;
          case 2:
            this._currentTurn = 0;
            num1 = (int) num2 * -2068348124 ^ 403838432;
            continue;
          case 3:
            num1 = (int) num2 * -1535816037 ^ -67333167;
            continue;
          case 4:
            this.Losers.Clear();
            num1 = (int) num2 * 1430694984 ^ 515081564;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.Winners.Clear();
            num1 = (int) num2 * -50454929 ^ 1122749623;
            continue;
          case 7:
            this.ShuffleCards();
            num1 = (int) num2 * 1242262111 ^ -1734054651;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1424684200;
      int num2;
      Player player;
      int planningCardsCount;
      bool flag1;
      int index;
      bool flag2;
      bool flag3;
      PlayerState playerState;
      bool morePlanningSprint;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 527307585)) % 29U)
        {
          case 0:
            playerState.Sprint = 1;
            num1 = (int) num3 * 69216417 ^ 2051915217;
            continue;
          case 1:
            int num4 = !flag2 ? 469599991 : (num4 = 182138051);
            num1 = num4 ^ (int) num3 * -1528966121;
            continue;
          case 2:
            num2 = 0;
            num1 = (int) num3 * -535984025 ^ 785433513;
            continue;
          case 3:
            int num5 = !flag1 ? 1396041549 : (num5 = 1771082433);
            num1 = num5 ^ (int) num3 * 411445308;
            continue;
          case 4:
            num2 = 0;
            num1 = 795843168;
            continue;
          case 5:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = 818528548;
            continue;
          case 6:
            goto label_1;
          case 7:
            num1 = 436618944;
            continue;
          case 8:
            num1 = (int) num3 * 747911854 ^ 1052883027;
            continue;
          case 9:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 1962752609 ^ -310876727;
            continue;
          case 10:
            num1 = (int) num3 * -1867564010 ^ 322439111;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * -266529174 ^ -540089149;
            continue;
          case 12:
            goto label_3;
          case 13:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 1842427159 ^ 1893212341;
            continue;
          case 14:
            num1 = 1910936409;
            continue;
          case 15:
            flag3 = planningCardsCount == 0;
            num1 = (int) num3 * 1446710959 ^ -433639774;
            continue;
          case 16:
            flag2 = index < this.Players.Length;
            num1 = 1541274898;
            continue;
          case 17:
            flag1 = num2 > 0;
            num1 = 961294909;
            continue;
          case 18:
            int num6 = !flag3 ? -2113196745 : (num6 = -157842799);
            num1 = num6 ^ (int) num3 * -2064683849;
            continue;
          case 19:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -989679883 ^ 175102438;
            continue;
          case 20:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1664081870 ^ -1508428401;
            continue;
          case 21:
            index = 0;
            num1 = (int) num3 * 229055813 ^ -232526443;
            continue;
          case 22:
            num1 = (int) num3 * 274931024 ^ 776589184;
            continue;
          case 23:
            int num7 = !morePlanningSprint ? 662047244 : (num7 = 1124919587);
            num1 = num7 ^ (int) num3 * -655927917;
            continue;
          case 24:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1167516178 ^ -382495129;
            continue;
          case 25:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1152380282;
            continue;
          case 26:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * -684201308 ^ -433995938;
            continue;
          case 27:
            num1 = (int) num3 * -530967736 ^ 1669342864;
            continue;
          case 28:
            playerState.State = State.Playing;
            num1 = (int) num3 * -1625708870 ^ -1456488786;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -1517905985;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -801832091)) % 11U)
        {
          case 1:
            this.Print((object) Game.\u206E‏‍​‪‬‫⁪⁯‎⁯‬⁫‍⁫‍‫‎‬⁫⁯‌‭⁪‎⁫⁭‎‬‎‬⁭‭‬‎⁬​‮⁮⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -587764572 ^ 480586680;
            continue;
          case 2:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -95143701 ^ 25667085;
            continue;
          case 3:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -496143324 ^ 603703052;
            continue;
          case 4:
            goto label_1;
          case 5:
            int num3 = flag ? -1953876485 : (num3 = -2063092480);
            num1 = num3 ^ (int) num2 * 1931121858;
            continue;
          case 6:
            this._currentPlayer = 0;
            num1 = (int) num2 * -1502802149 ^ -1456625026;
            continue;
          case 7:
            flag = this._currentTurn > 0;
            num1 = (int) num2 * -1132029597 ^ -1860428333;
            continue;
          case 8:
            num1 = (int) num2 * -2089470613 ^ 429352289;
            continue;
          case 9:
            ++this._currentPlayer;
            int num4 = this._currentPlayer >= this.Players.Length ? 1318249968 : (num4 = 559053922);
            num1 = num4 ^ (int) num2 * 689307376;
            continue;
          case 10:
            this.Print((object) Game.\u200C‬‮‬‬‮‬‏‎⁭⁬⁭⁯‍‪‫⁭⁫⁬⁫‌⁭​‪‌⁬⁭‫‭‭‭⁪‮⁯⁯‍‬⁫‫‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -2089674270;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.PlayerTurn(this._currentPlayer);
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
label_1:
      int num1 = -1581229650;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        PlayerState playerState1;
        int index;
        bool flag3;
        bool flag4;
        Card card;
        PlayerState playerState2;
        int num3;
        int num4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        int num5;
        bool flag10;
        bool flag11;
        bool flag12;
        bool onlyOneWinner;
        int num6;
        switch ((num2 = (uint) (num1 ^ -1030884706)) % 85U)
        {
          case 0:
            playerState2.State = State.Lose;
            int num7 = !this.Losers.Contains(playerIndex) ? 1477773572 : (num7 = 1007945879);
            num1 = num7 ^ (int) num2 * -1497600518;
            continue;
          case 1:
            flag2 = !flag1;
            num1 = (int) num2 * -687174625 ^ 1161220171;
            continue;
          case 2:
            num1 = (int) num2 * 1866979030 ^ 1253576575;
            continue;
          case 3:
            flag6 = num3 < this._playerStates.Length;
            num1 = -276346816;
            continue;
          case 4:
            num1 = (int) num2 * -1984339799 ^ -1120932931;
            continue;
          case 5:
            num1 = (int) num2 * -965341503 ^ -1076467798;
            continue;
          case 6:
            int num8 = flag4 ? 1828049520 : (num8 = 1170029905);
            num1 = num8 ^ (int) num2 * -2144452660;
            continue;
          case 7:
            num1 = -478999007;
            continue;
          case 8:
            this.Print((object) playerState2.State);
            num1 = (int) num2 * 2083668109 ^ 18436619;
            continue;
          case 9:
            ++num3;
            num1 = -1534114436;
            continue;
          case 10:
            num1 = (int) num2 * 19675983 ^ 999896635;
            continue;
          case 11:
            int num9 = !flag12 ? -1256746134 : (num9 = -529488255);
            num1 = num9 ^ (int) num2 * 1230115524;
            continue;
          case 12:
            playerState2.Resources -= num5;
            num1 = (int) num2 * 722735798 ^ 1532749718;
            continue;
          case 13:
            num1 = (int) num2 * 287068447 ^ -1315022025;
            continue;
          case 14:
            num5 = card.Impact;
            num1 = (int) num2 * 281489432 ^ -438787039;
            continue;
          case 15:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -1793765547 ^ -1335852635;
            continue;
          case 16:
            num1 = (int) num2 * 921798817 ^ 2038863474;
            continue;
          case 17:
            flag5 = num4 < this.Rules.StayOnSprintMinDiff;
            num5 = Game.\u200C‮‮⁫⁭‍‎⁬⁯​‏‭⁬⁮‏‎‌‪⁪‭‍⁫​‏​⁬‬‎⁬⁯⁭‏‫⁯⁫‌⁫‬⁬‫‮(0, num4);
            num1 = (int) num2 * 28716193 ^ 1960632847;
            continue;
          case 18:
            num1 = -1265927909;
            continue;
          case 19:
            flag4 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = -1767357883;
            continue;
          case 20:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 490482717 ^ 201691755;
            continue;
          case 21:
            int num10 = !onlyOneWinner ? -1712760845 : (num10 = -482463517);
            num1 = num10 ^ (int) num2 * 1813539585;
            continue;
          case 22:
            num1 = (int) num2 * 1840136847 ^ 2127333716;
            continue;
          case 23:
            num1 = (int) num2 * -1724006545 ^ 389764903;
            continue;
          case 24:
            flag5 = false;
            num1 = -1626451672;
            continue;
          case 25:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 428528822 ^ -144618129;
            continue;
          case 26:
            int num11 = flag11 ? -1311532711 : (num11 = -1573584093);
            num1 = num11 ^ (int) num2 * -1981290279;
            continue;
          case 27:
            num1 = (int) num2 * -370979591 ^ -752006079;
            continue;
          case 28:
            playerState1.State = State.Lose;
            flag3 = !this.Losers.Contains(index);
            num1 = -938326771;
            continue;
          case 29:
            int num12 = playerState2.Resources >= 0 ? -2000476122 : (num12 = -944720144);
            num1 = num12 ^ (int) num2 * -445533951;
            continue;
          case 30:
            this._finished = true;
            num1 = (int) num2 * -12391833 ^ 173050005;
            continue;
          case 31:
            int num13 = !flag7 ? 200409703 : (num13 = 769491036);
            num1 = num13 ^ (int) num2 * -518824623;
            continue;
          case 32:
            flag12 = playerState2.Sprint < 0;
            num1 = -890640980;
            continue;
          case 33:
            flag1 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 2140541234 ^ 1775081930;
              continue;
            }
            num6 = 0;
            break;
          case 34:
            num1 = (int) num2 * -525613173 ^ -11782132;
            continue;
          case 35:
            num1 = -2015886513;
            continue;
          case 36:
            flag5 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1737114709 ^ 461570413;
            continue;
          case 37:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -262643440 ^ 945451874;
            continue;
          case 38:
            int num14 = !flag6 ? 459499510 : (num14 = 976096462);
            num1 = num14 ^ (int) num2 * -2013146532;
            continue;
          case 39:
            flag10 = !this.Losers.Contains(num3);
            num1 = -1301339760;
            continue;
          case 40:
            ++playerState2.Sprint;
            num1 = (int) num2 * 1132790026 ^ -1427455640;
            continue;
          case 41:
            num1 = (int) num2 * -466482731 ^ 554866566;
            continue;
          case 42:
            playerState2.State = State.Won;
            num1 = (int) num2 * -1393869548 ^ 206101369;
            continue;
          case 43:
            flag7 = index < this._playerStates.Length;
            num1 = -837066123;
            continue;
          case 44:
            num1 = (int) num2 * -2083241923 ^ -174244361;
            continue;
          case 45:
            PlayerState playerState3 = playerState2;
            this.Print((object) Game.\u206E‏‍​‪‬‫⁪⁯‎⁯‬⁫‍⁫‍‫‎‬⁫⁯‌‭⁪‎⁫⁭‎‬‎‬⁭‭‬‎⁬​‮⁮⁪‮("\t", playerState3 != null ? Game.\u202B‪‬⁪‎‮‌‎⁬⁫⁬⁫⁫‌‌⁭⁬‌‬‪⁫‭‭‮⁮‫‫‏‮‪⁮⁪‌⁪‬‪⁬⁭‍‏‮((object) playerState3) : (string) null));
            num1 = -1658139607;
            continue;
          case 46:
            ++playerState2.Sprint;
            num1 = (int) num2 * -316821566 ^ 969456305;
            continue;
          case 47:
            num1 = -645576560;
            continue;
          case 48:
            num1 = (int) num2 * -529320321 ^ -1417145169;
            continue;
          case 49:
            num1 = -944390811;
            continue;
          case 50:
            card = this.DrawCard();
            num1 = (int) num2 * 1950063878 ^ 481119938;
            continue;
          case 51:
            ++index;
            num1 = -534506784;
            continue;
          case 52:
            int num15 = !flag2 ? -210788229 : (num15 = -770343935);
            num1 = num15 ^ (int) num2 * -323437499;
            continue;
          case 53:
            int num16 = flag10 ? -53812602 : (num16 = -819707823);
            num1 = num16 ^ (int) num2 * 34203750;
            continue;
          case 54:
            int num17 = playerState2.State == 0 ? -980328227 : (num17 = -396775725);
            num1 = num17 ^ (int) num2 * 1977067886;
            continue;
          case 55:
            playerState2 = this._playerStates[playerIndex];
            this.Print((object) Game.\u206E‏‍​‪‬‫⁪⁯‎⁯‬⁫‍⁫‍‫‎‬⁫⁯‌‭⁪‎⁫⁭‎‬‎‬⁭‭‬‎⁬​‮⁮⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 1851385181 ^ 2048409578;
            continue;
          case 56:
            flag5 = true;
            num1 = (int) num2 * -1612606744 ^ 1167342002;
            continue;
          case 57:
            num1 = (int) num2 * 389150678 ^ 493784107;
            continue;
          case 58:
            playerState1 = this._playerStates[index];
            playerState1.Resources -= Game.\u200C‮‮⁫⁭‍‎⁬⁯​‏‭⁬⁮‏‎‌‪⁪‭‍⁫​‏​⁬‬‎⁬⁯⁭‏‫⁯⁫‌⁫‬⁬‫‮(0, num5 - this.Players[index].PlannedForCard(card.Type));
            flag11 = playerState1.Resources >= 0;
            num1 = -612279490;
            continue;
          case 59:
            num1 = (int) num2 * -1409893205 ^ -1326676084;
            continue;
          case 60:
            int num18;
            num1 = num18 = playerState2.Sprint > this.Rules.SprintCount ? -1420724614 : (num18 = -1249416924);
            continue;
          case 61:
            num1 = (int) num2 * -1688763542 ^ 1551664750;
            continue;
          case 62:
            num1 = (int) num2 * 1340957397 ^ -292235818;
            continue;
          case 63:
            num1 = (int) num2 * -344027610 ^ -1826489813;
            continue;
          case 64:
            int num19 = flag9 ? -1211448202 : (num19 = -520513486);
            num1 = num19 ^ (int) num2 * 318298508;
            continue;
          case 65:
            num1 = -1238968431;
            continue;
          case 66:
            num1 = (int) num2 * -835219220 ^ -1374627041;
            continue;
          case 67:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * 1069404540 ^ -676422448;
            continue;
          case 68:
            num1 = (int) num2 * 1279030654 ^ -884758482;
            continue;
          case 69:
            this.Losers.Add(index);
            num1 = (int) num2 * -581720918 ^ 629203196;
            continue;
          case 70:
            goto label_1;
          case 71:
            num1 = -1952545874;
            continue;
          case 72:
            index = 0;
            num1 = -370525419;
            continue;
          case 73:
            num1 = (int) num2 * 1218436642 ^ 2140373577;
            continue;
          case 74:
            int num20 = flag3 ? 1409203266 : (num20 = 393510657);
            num1 = num20 ^ (int) num2 * -1052582447;
            continue;
          case 75:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag9 ? (object) "ALL " : (object) "", flag1 ? (object) "receives" : (object) "pays", (object) Game.\u200D⁫‎⁭‭⁮⁮‫‮​‌‌‎‫‮‪‮‬‮‪‌‏‫⁭‪⁭‭‏‪‍‌⁬‌‬‎⁬⁭‭‫‮(num5), flag5 ? (object) "advance" : (object) "stay");
            num1 = -2069301144;
            continue;
          case 76:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 77:
            int num21 = !flag8 ? -155272984 : (num21 = -504141993);
            num1 = num21 ^ (int) num2 * 615365179;
            continue;
          case 78:
            this.Losers.Add(num3);
            num1 = (int) num2 * 2114134634 ^ 499320576;
            continue;
          case 79:
            num1 = -1249416924;
            continue;
          case 80:
            num3 = 0;
            num1 = (int) num2 * -1339226289 ^ 1654611639;
            continue;
          case 81:
            num1 = (int) num2 * 1395905280 ^ 182634185;
            continue;
          case 82:
            goto label_3;
          case 83:
            flag8 = num3 == playerIndex;
            num1 = (int) num2 * 1762193376 ^ -250542550;
            continue;
          case 84:
            int num22;
            num1 = num22 = flag5 ? -316144756 : (num22 = -1117960427);
            continue;
          default:
            goto label_90;
        }
        flag9 = num6 != 0;
        num1 = -740286965;
      }
label_3:
      return;
label_90:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1794348302;
      bool flag;
      Card card1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1384263897)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 118960209 ^ 1378257737;
            continue;
          case 2:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1169313114 ^ 1006936652;
            continue;
          case 3:
            int num3 = flag ? 1412411123 : (num3 = 925402615);
            num1 = num3 ^ (int) num2 * 957635820;
            continue;
          case 4:
            goto label_1;
          case 5:
            Card card2 = this._deck[0];
            this._deck.RemoveAt(0);
            card1 = card2;
            num1 = 223439629;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * -441706985 ^ -1832776223;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card1;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = -1827953783;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -239405092)) % 9U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202B‪‬⁪‎‮‌‎⁬⁫⁬⁫⁫‌‌⁭⁬‌‬‪⁫‭‭‮⁮‫‫‏‮‪⁮⁪‌⁪‬‪⁬⁭‍‏‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200E‫⁬‭⁮‏‍‌⁬‮⁯‭‭‮‍​‎‭⁫‭‌​‪‮‏⁬⁯‮⁭⁭⁯‬‬⁬⁭​‍⁬​⁫‮(strArray);
            num1 = -1718495525;
            continue;
          case 1:
            int num3 = !flag ? 1076128068 : (num3 = 773168963);
            num1 = num3 ^ (int) num2 * -1365490716;
            continue;
          case 2:
            goto label_1;
          case 3:
            index = 0;
            num1 = (int) num2 * 989711353 ^ -1811422334;
            continue;
          case 4:
            ++index;
            num1 = (int) num2 * -326262063 ^ 1487661720;
            continue;
          case 6:
            num1 = (int) num2 * 2013961546 ^ -327010604;
            continue;
          case 7:
            str2 = str1;
            num1 = (int) num2 * 1380711253 ^ 1844707990;
            continue;
          case 8:
            flag = index < this._playerStates.Length;
            num1 = -38670641;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
      string str = this.ToString(false);
label_1:
      int num1 = 1660989600;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 158520874)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 2023991679 ^ 2022756322;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
      string str = Game.\u206B⁪‍⁪‮‏‏‪‫‌‫⁬‫⁯⁯‪‎‪‫‏⁭‮‪⁭‪‪‪‏‏⁯‌‮⁫⁮‌⁮‌‍‏⁬‮(Game.\u202B‪‬⁪‎‮‌‎⁬⁫⁬⁫⁫‌‌⁭⁬‌‬‪⁫‭‭‮⁮‫‫‏‮‪⁮⁪‌⁪‬‪⁬⁭‍‏‮(text), more);
label_1:
      int num1 = 1660698126;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1658285231)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u200E‪‪⁮‮‬‫‍‫​‮‍‪⁮‪⁯‭‬‫‌⁫⁪‌‬⁭⁪‍⁯⁬⁭‎‌‍⁯‭‏‮‫‏‍‮(this._buffer, str);
            num1 = (int) num2 * -430775962 ^ 514457377;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Random \u200D⁫⁭⁬‪‪⁫‬⁫⁭​‏‌⁫⁮‮‬‌‭‎​‎⁪‫‎⁭‏‌​‎⁫‬‬⁭⁪‍⁪⁮‭⁯‮([In] int obj0) => new Random(obj0);

    static string \u200C‬‮‬‬‮‬‏‎⁭⁬⁭⁯‍‪‫⁭⁫⁬⁫‌⁭​‪‌⁬⁭‫‭‭‭⁪‮⁯⁯‍‬⁫‫‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206E‏‍​‪‬‫⁪⁯‎⁯‬⁫‍⁫‍‫‎‬⁫⁯‌‭⁪‎⁫⁭‎‬‎‬⁭‭‬‎⁬​‮⁮⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u200C‮‮⁫⁭‍‎⁬⁯​‏‭⁬⁮‏‎‌‪⁪‭‍⁫​‏​⁬‬‎⁬⁯⁭‏‫⁯⁫‌⁫‬⁬‫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200D⁫‎⁭‭⁮⁮‫‮​‌‌‎‫‮‪‮‬‮‪‌‏‫⁭‪⁭‭‏‪‍‌⁬‌‬‎⁬⁭‭‫‮([In] int obj0) => Math.Abs(obj0);

    static string \u202B‪‬⁪‎‮‌‎⁬⁫⁬⁫⁫‌‌⁭⁬‌‬‪⁫‭‭‮⁮‫‫‏‮‪⁮⁪‌⁪‬‪⁬⁭‍‏‮([In] object obj0) => obj0.ToString();

    static string \u200E‫⁬‭⁮‏‍‌⁬‮⁯‭‭‮‍​‎‭⁫‭‌​‪‮‏⁬⁯‮⁭⁭⁯‬‬⁬⁭​‍⁬​⁫‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206B⁪‍⁪‮‏‏‪‫‌‫⁬‫⁯⁯‪‎‪‫‏⁭‮‪⁭‪‪‪‏‏⁯‌‮⁫⁮‌⁮‌‍‏⁬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200E‪‪⁮‮‬‫‍‫​‮‍‪⁮‪⁯‭‬‫‌⁫⁪‌‬⁭⁪‍⁯⁬⁭‎‌‍⁯‭‏‮‫‏‍‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
