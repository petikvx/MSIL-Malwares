// Decompiled with JetBrains decompiler
// Type: activation.snActivation
// Assembly: Activation, Version=1.0.0.10170, Culture=neutral, PublicKeyToken=null
// MVID: 2DB4F8B3-8DF5-4A65-8363-C3E1D25DD750
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Patched.mf-c52e82677cc3d54771a15fa75737ddef96beb5ff2886b9713a0cf08605c947fc.exe

using activation.eu.vaio.activation;
using Microsoft.Win32;
using NETWORKLIST;
using System;
using System.Management;
using System.Net;
using System.Net.Security;
using System.Runtime.InteropServices;
using System.Security.Cryptography.X509Certificates;
using System.Threading;

namespace activation
{
  internal class snActivation
  {
    private const int iRetryTimes = 4;
    private NetworkListManagerClass __networklistmanager = new NetworkListManagerClass();
    private string strActivationKeyName = "Software\\Sony Corporation\\UserInfoUnit";
    private string strActivationValueName = "GotValidID";

    public string GetDetectiveProxyAddress()
    {
      IntPtr ppwszAutoConfigUrl = IntPtr.Zero;
      string detectiveProxyAddress = "";
      if (Win32Api.WinHttpDetectAutoProxyConfigUrl(3, out ppwszAutoConfigUrl))
      {
        string stringUni = Marshal.PtrToStringUni(ppwszAutoConfigUrl);
        if (!string.IsNullOrEmpty(stringUni))
        {
          detectiveProxyAddress = this.GetProxyForUrlUsingPac("https://activation.vaio.eu:443/", stringUni);
          Win32Api.GlobalFree(ppwszAutoConfigUrl);
        }
        if (!string.IsNullOrEmpty(detectiveProxyAddress))
          return detectiveProxyAddress;
      }
      return "";
    }

    public bool SendSerialNumber2Server(string serrialnumber)
    {
      bool flag = false;
      Activation activation = new Activation();
      string[] strArray1 = new string[3];
      string strLANProxyServer = "";
      string detectiveProxyAddress = this.GetDetectiveProxyAddress();
      string strAutoConfigProxy = "";
      int num1 = 0;
      strArray1[0] = strArray1[1] = strArray1[2] = "";
      UserInfo.CreateProcessAsActiveUserImpersonated(ref strAutoConfigProxy, ref strLANProxyServer);
      if (!string.IsNullOrEmpty(strLANProxyServer))
        strArray1[num1++] = strLANProxyServer;
      if (!string.IsNullOrEmpty(detectiveProxyAddress))
        strArray1[num1++] = detectiveProxyAddress;
      if (!string.IsNullOrEmpty(strAutoConfigProxy))
      {
        string[] strArray2 = strArray1;
        int index = num1;
        int num2 = index + 1;
        string str = strAutoConfigProxy;
        strArray2[index] = str;
      }
      for (int index = 0; index < 3 && !string.IsNullOrEmpty(strArray1[index]); ++index)
      {
        if (this.SendSerialNumberwithSpecificProxy2Server(activation, strArray1[index], serrialnumber))
        {
          flag = true;
          break;
        }
      }
      if (!flag && this.SendSerialNumberwithSpecificProxy2Server(activation, "", serrialnumber))
        flag = true;
      return flag;
    }

    public string GetSerialNumberbyWMI()
    {
      string serialNumberbyWmi = "";
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("select * from Win32_ComputerSystemProduct").Get())
      {
        foreach (PropertyData property in managementBaseObject.Properties)
        {
          if ("IDENTIFYINGNUMBER" == property.Name.ToUpper())
          {
            serialNumberbyWmi = property.Value.ToString();
            break;
          }
        }
        if (serialNumberbyWmi.Length > 0)
          break;
      }
      return serialNumberbyWmi;
    }

    public bool IsInternetConnected() => this.__networklistmanager.IsConnectedToInternet | this.__networklistmanager.IsConnected;

    public bool DoActivate()
    {
      int num = 4;
      bool flag = false;
      string serialNumberbyWmi = this.GetSerialNumberbyWMI();
      if (!string.IsNullOrEmpty(serialNumberbyWmi))
      {
        do
        {
          if (this.IsInternetConnected())
            flag = this.SendSerialNumber2Server(serialNumberbyWmi);
          if (!flag)
            Thread.Sleep(120000);
          --num;
        }
        while (!flag && num > 0);
      }
      return flag;
    }

    public bool IsActivated()
    {
      bool flag = false;
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(this.strActivationKeyName, true);
        if (registryKey != null && "1" == registryKey.GetValue(this.strActivationValueName).ToString())
          flag = true;
      }
      catch
      {
      }
      return flag;
    }

    public void SetActivateStatus()
    {
      string str = string.Format("{0}", (object) 1);
      RegistryKey registryKey;
      try
      {
        registryKey = Registry.LocalMachine.OpenSubKey(this.strActivationKeyName, true);
      }
      catch
      {
        return;
      }
      if (null == registryKey)
        registryKey = Registry.LocalMachine.CreateSubKey(this.strActivationKeyName);
      try
      {
        registryKey.SetValue(this.strActivationValueName, (object) str);
      }
      catch
      {
        registryKey.Close();
        return;
      }
      registryKey.Close();
    }

    public void ValidCertiCheck() => ServicePointManager.ServerCertificateValidationCallback += new RemoteCertificateValidationCallback(this.ValidateServerCertificate);

    public bool ValidateServerCertificate(
      object sender,
      X509Certificate certificate,
      X509Chain chain,
      SslPolicyErrors sslPolicyErrors)
    {
      return true;
    }

    public string GetProxyForUrlUsingPac(string DestinationUrl, string PacUri)
    {
      IntPtr num = Win32Api.WinHttpOpen("User", 0, IntPtr.Zero, IntPtr.Zero, 0);
      Win32Api.WINHTTP_AUTOPROXY_OPTIONS pAutoProxyOptions = new Win32Api.WINHTTP_AUTOPROXY_OPTIONS();
      Win32Api.WINHTTP_PROXY_INFO pProxyInfo = new Win32Api.WINHTTP_PROXY_INFO();
      pAutoProxyOptions.dwFlags = 2;
      pAutoProxyOptions.dwAutoDetectFlags = 3;
      pAutoProxyOptions.lpszAutoConfigUrl = PacUri;
      bool proxyForUrl = Win32Api.WinHttpGetProxyForUrl(num, DestinationUrl, ref pAutoProxyOptions, ref pProxyInfo);
      Win32Api.WinHttpCloseHandle(num);
      if (!proxyForUrl)
        return "";
      string stringUni = Marshal.PtrToStringUni(pProxyInfo.lpszProxy);
      if (!string.IsNullOrEmpty(Marshal.PtrToStringUni(pProxyInfo.lpszProxy)))
        Win32Api.GlobalFree(pProxyInfo.lpszProxy);
      if (!string.IsNullOrEmpty(Marshal.PtrToStringUni(pProxyInfo.lpszProxyBypass)))
        Win32Api.GlobalFree(pProxyInfo.lpszProxyBypass);
      return stringUni;
    }

    public bool SendSerialNumberwithSpecificProxy2Server(
      Activation activation,
      string strProxy,
      string strSerialNumber)
    {
      bool flag = false;
      if (!string.IsNullOrEmpty(strProxy))
      {
        try
        {
          activation.Proxy = (IWebProxy) new WebProxy(strProxy);
        }
        catch (Exception ex)
        {
          activation.Proxy = WebRequest.DefaultWebProxy;
          return flag;
        }
      }
      try
      {
        activation.registerUnit(strSerialNumber);
        flag = true;
      }
      catch (WebException ex)
      {
        activation.Proxy = WebRequest.DefaultWebProxy;
      }
      return flag;
    }
  }
}
