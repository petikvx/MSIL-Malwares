// Decompiled with JetBrains decompiler
// Type: Appointments.Add
// Assembly: Appointments, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 296A15D6-EEB9-4ED6-B937-9857DD43439A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Sality.sil-945d5753743a3047bb1a01ad46cdb8207c84735e9ce10c7dfb9156bab7ca7d05.exe

using Microsoft.Windows.Controls;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;

namespace Appointments
{
  [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
  public partial class Add : Window, IComponentConnector
  {
    private myAppointmentsDataContext DC = new myAppointmentsDataContext();
    internal GroupBox groupBox_addAppointment;
    internal Label label1;
    internal Label label2;
    internal Label label3;
    internal Label label4;
    internal Label label5;
    internal ComboBox comboBox_addAppointmentDoctor;
    internal Separator separator1;
    internal ComboBox comboBox_addAppointmentPatient;
    internal DatePicker datePicker_addAppointmentDate;
    internal TextBox textBox_addAppointmentHour;
    internal TextBox textBox_addAppointmentMinute;
    internal Label label7;
    internal RadioButton radioButton_addAppointmentAM;
    internal RadioButton radioButton_addAppointmentPM;
    internal TextBox textBox_addAppointmentNotes;
    internal Button button_addAppointment;
    internal Button button1;
    internal Button button_close;
    private bool _contentLoaded;

    public Add() => this.InitializeComponent();

    private bool is_Numeric(string text)
    {
      bool flag = true;
      foreach (char c in text.ToCharArray())
      {
        if (!char.IsNumber(c))
          return false;
      }
      return flag;
    }

    private bool checkTime(TimeSpan Registered, TimeSpan notRegistered, string span) => !(notRegistered <= Registered.Subtract(TimeSpan.Parse(span))) && !(notRegistered >= Registered.Add(TimeSpan.Parse(span)));

    private void button_addAppointment_Click(object sender, RoutedEventArgs e)
    {
      if (this.comboBox_addAppointmentDoctor.SelectedIndex == -1)
      {
        int num = (int) MessageBox.Show("لم يتم تحديد اسم الطبيب , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
        this.comboBox_addAppointmentDoctor.Focus();
      }
      else if (string.IsNullOrWhiteSpace(this.comboBox_addAppointmentPatient.Text))
      {
        int num = (int) MessageBox.Show("لم يتم تحديد اسم المريض , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
        this.comboBox_addAppointmentPatient.Focus();
      }
      else
      {
        DateTime? nullable1 = this.datePicker_addAppointmentDate.SelectedDate;
        if (!nullable1.HasValue)
        {
          int num = (int) MessageBox.Show("لم يتم تحديد تاريخ الموعد , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
          this.datePicker_addAppointmentDate.Focus();
        }
        else if (!this.is_Numeric(this.textBox_addAppointmentHour.Text))
        {
          int num = (int) MessageBox.Show("يرجى تحديد ساعة الموعد بالشكل الصحيح", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
          this.textBox_addAppointmentHour.Text = "ساعة";
          this.textBox_addAppointmentHour.Focus();
        }
        else if (int.Parse(this.textBox_addAppointmentHour.Text.Trim()) > 12 || int.Parse(this.textBox_addAppointmentHour.Text.Trim()) < 1)
        {
          int num = (int) MessageBox.Show("الساعة المدخلة خاطئة , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
          this.textBox_addAppointmentHour.Text = "";
          this.textBox_addAppointmentHour.Focus();
        }
        else if (!this.is_Numeric(this.textBox_addAppointmentMinute.Text))
        {
          int num = (int) MessageBox.Show("يرجى تحديد ساعة الموعد بالشكل الصحيح", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
          this.textBox_addAppointmentMinute.Text = "دقيقة";
          this.textBox_addAppointmentMinute.Focus();
        }
        else if (int.Parse(this.textBox_addAppointmentMinute.Text.Trim()) > 60 || int.Parse(this.textBox_addAppointmentMinute.Text.Trim()) < 0)
        {
          int num = (int) MessageBox.Show("الدقائق المدخلة خاطئة , يرجى إعادة المحاولة", "خطأ في الإدخال", MessageBoxButton.OK, MessageBoxImage.Hand);
          this.textBox_addAppointmentMinute.Text = "";
          this.textBox_addAppointmentMinute.Focus();
        }
        else
        {
          Appointment entity = new Appointment();
          entity.ID = Guid.NewGuid();
          Doctor doctor = this.DC.Doctors.Single<Doctor>((System.Linq.Expressions.Expression<Func<Doctor, bool>>) (D => D.Name == this.comboBox_addAppointmentDoctor.SelectedItem.ToString()));
          this.comboBox_addAppointmentPatient.Text = this.comboBox_addAppointmentPatient.Text.Trim();
          if (this.comboBox_addAppointmentPatient.SelectedIndex == -1)
          {
            this.DC.Patients.InsertOnSubmit(new Patient()
            {
              ID = Guid.NewGuid(),
              Name = this.comboBox_addAppointmentPatient.Text
            });
            this.DC.SubmitChanges();
          }
          Patient patient = this.DC.Patients.Single<Patient>((System.Linq.Expressions.Expression<Func<Patient, bool>>) (P => P.Name == this.comboBox_addAppointmentPatient.Text));
          entity.Doctor_ID = new Guid?(doctor.ID);
          entity.Patient_ID = new Guid?(patient.ID);
          Appointment appointment = entity;
          nullable1 = this.datePicker_addAppointmentDate.SelectedDate;
          DateTime dateTime = nullable1.Value;
          appointment.Appointment_Date = dateTime;
          if (this.textBox_addAppointmentNotes.Text != "")
            entity.Notes = this.textBox_addAppointmentNotes.Text;
          bool? isChecked = this.radioButton_addAppointmentAM.IsChecked;
          string timeFormat;
          if ((!isChecked.GetValueOrDefault() ? 0 : (isChecked.HasValue ? 1 : 0)) != 0)
          {
            entity.Timing_Zone = 'A';
            timeFormat = !(this.textBox_addAppointmentHour.Text.Trim() == "12") ? this.textBox_addAppointmentHour.Text.Trim() + ":" + this.textBox_addAppointmentMinute.Text.Trim() : "00:" + this.textBox_addAppointmentMinute.Text.Trim();
          }
          else
          {
            entity.Timing_Zone = 'P';
            if (this.textBox_addAppointmentHour.Text.Trim() != "12")
              timeFormat = (int.Parse(this.textBox_addAppointmentHour.Text.Trim()) + 12).ToString() + ":" + this.textBox_addAppointmentMinute.Text.Trim();
            else
              timeFormat = this.textBox_addAppointmentHour.Text.Trim() + ":" + this.textBox_addAppointmentMinute.Text.Trim();
          }
          entity.Appointment_Time = TimeSpan.Parse(timeFormat);
          Management Options = new Management();
          if (this.DC.Appointments.Where<Appointment>((System.Linq.Expressions.Expression<Func<Appointment, bool>>) (myMatch => myMatch.Doctor.Name == this.comboBox_addAppointmentDoctor.SelectedItem.ToString() && (DateTime?) myMatch.Appointment_Date == this.datePicker_addAppointmentDate.SelectedDate && myMatch.Appointment_Time == TimeSpan.Parse(timeFormat))).Count<Appointment>() != 0)
          {
            int num = (int) MessageBox.Show("يوجد موعد آخر يتضارب مع الموعد الذي تحاول إضافته\nيرجى إجراء التعديلات في الموعد السابق ثم إعادة المحاولة", "خطأ في الموعد", MessageBoxButton.OK, MessageBoxImage.Hand);
          }
          else if (this.DC.Appointments.Where<Appointment>((System.Linq.Expressions.Expression<Func<Appointment, bool>>) (myMatch => myMatch.Doctor.Name == this.comboBox_addAppointmentDoctor.SelectedItem.ToString() && (DateTime?) myMatch.Appointment_Date == this.datePicker_addAppointmentDate.SelectedDate && this.checkTime(myMatch.Appointment_Time, TimeSpan.Parse(timeFormat), Options.textBox_separateMinutes.Text))).Count<Appointment>() != 0 && MessageBox.Show(" انت تحاول إضافة موعد يتعارض مع الحد الأدنى الفاصل بين المواعيد الذي قمت بتحديده من خلال إدارة البرنامج\nهل تود تثبيت الموعد السابق أم إجراء تعديلات على التوقيت", "تنبيه", MessageBoxButton.YesNo, MessageBoxImage.Exclamation) == MessageBoxResult.No)
          {
            this.textBox_addAppointmentHour.Focus();
          }
          else
          {
            this.DC.Appointments.InsertOnSubmit(entity);
            this.DC.SubmitChanges();
            if (this.comboBox_addAppointmentDoctor.Items.Count > 1)
              this.comboBox_addAppointmentDoctor.SelectedIndex = -1;
            this.comboBox_addAppointmentPatient.SelectedIndex = -1;
            this.comboBox_addAppointmentPatient.Text = "";
            this.textBox_addAppointmentHour.Text = "ساعة";
            this.textBox_addAppointmentMinute.Text = "دقيقة";
            DatePicker addAppointmentDate = this.datePicker_addAppointmentDate;
            nullable1 = new DateTime?();
            DateTime? nullable2 = nullable1;
            addAppointmentDate.SelectedDate = nullable2;
            this.radioButton_addAppointmentPM.IsChecked = new bool?(true);
            this.textBox_addAppointmentNotes.Text = "";
            this.Close();
          }
        }
      }
    }

    private void comboBox_addAppointmentDoctor_DropDownOpened(object sender, EventArgs e)
    {
      IQueryable<string> source = this.DC.Doctors.Select<Doctor, string>((System.Linq.Expressions.Expression<Func<Doctor, string>>) (doc => doc.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_addAppointmentDoctor.ItemsSource = (IEnumerable) source;
    }

    private void comboBox_addAppointmentPatient_DropDownOpened(object sender, EventArgs e)
    {
      IQueryable<string> source = this.DC.Patients.Select<Patient, string>((System.Linq.Expressions.Expression<Func<Patient, string>>) (pat => pat.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_addAppointmentPatient.ItemsSource = (IEnumerable) source;
    }

    private void textBox_addAppointmentHour_GotFocus(object sender, RoutedEventArgs e)
    {
      if (!(this.textBox_addAppointmentHour.Text == "ساعة"))
        return;
      this.textBox_addAppointmentHour.Text = "";
    }

    private void textBox_addAppointmentMinute_GotFocus(object sender, RoutedEventArgs e)
    {
      if (!(this.textBox_addAppointmentMinute.Text == "دقيقة"))
        return;
      this.textBox_addAppointmentMinute.Text = "";
    }

    private void textBox_addAppointmentHour_LostFocus(object sender, RoutedEventArgs e)
    {
      if (!(this.textBox_addAppointmentHour.Text == ""))
        return;
      this.textBox_addAppointmentHour.Text = "ساعة";
    }

    private void textBox_addAppointmentMinute_LostFocus(object sender, RoutedEventArgs e)
    {
      if (!(this.textBox_addAppointmentMinute.Text == ""))
        return;
      this.textBox_addAppointmentMinute.Text = "دقيقة";
    }

    private void comboBox_addAppointmentPatient_GotFocus(object sender, RoutedEventArgs e)
    {
      IQueryable<string> source = this.DC.Patients.Select<Patient, string>((System.Linq.Expressions.Expression<Func<Patient, string>>) (pat => pat.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_addAppointmentPatient.ItemsSource = (IEnumerable) source;
    }

    private void Window_Loaded(object sender, RoutedEventArgs e)
    {
      InputLanguageManager.SetInputLanguage((DependencyObject) this.textBox_addAppointmentHour, CultureInfo.CreateSpecificCulture("ar"));
      InputLanguageManager.SetInputLanguage((DependencyObject) this.textBox_addAppointmentMinute, CultureInfo.CreateSpecificCulture("ar"));
      InputLanguageManager.SetInputLanguage((DependencyObject) this.comboBox_addAppointmentPatient, CultureInfo.CreateSpecificCulture("ar"));
      InputLanguageManager.SetInputLanguage((DependencyObject) this.textBox_addAppointmentNotes, CultureInfo.CreateSpecificCulture("ar"));
      IQueryable<string> source = this.DC.Doctors.Select<Doctor, string>((System.Linq.Expressions.Expression<Func<Doctor, string>>) (doc => doc.Name));
      if (source.Count<string>() == 0)
        return;
      this.comboBox_addAppointmentDoctor.ItemsSource = (IEnumerable) source;
      this.comboBox_addAppointmentDoctor.SelectedIndex = -1;
      if (source.Count<string>() == 1)
        this.comboBox_addAppointmentDoctor.SelectedIndex = 0;
    }

    private void button_close_Click(object sender, RoutedEventArgs e) => this.Close();

    private void button1_Click(object sender, RoutedEventArgs e)
    {
    }

    [DebuggerNonUserCode]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/Appointments;component/add.xaml", UriKind.Relative));
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          ((FrameworkElement) target).Loaded += new RoutedEventHandler(this.Window_Loaded);
          break;
        case 2:
          this.groupBox_addAppointment = (GroupBox) target;
          break;
        case 3:
          this.label1 = (Label) target;
          break;
        case 4:
          this.label2 = (Label) target;
          break;
        case 5:
          this.label3 = (Label) target;
          break;
        case 6:
          this.label4 = (Label) target;
          break;
        case 7:
          this.label5 = (Label) target;
          break;
        case 8:
          this.comboBox_addAppointmentDoctor = (ComboBox) target;
          this.comboBox_addAppointmentDoctor.DropDownOpened += new EventHandler(this.comboBox_addAppointmentDoctor_DropDownOpened);
          break;
        case 9:
          this.separator1 = (Separator) target;
          break;
        case 10:
          this.comboBox_addAppointmentPatient = (ComboBox) target;
          this.comboBox_addAppointmentPatient.DropDownOpened += new EventHandler(this.comboBox_addAppointmentPatient_DropDownOpened);
          this.comboBox_addAppointmentPatient.GotFocus += new RoutedEventHandler(this.comboBox_addAppointmentPatient_GotFocus);
          break;
        case 11:
          this.datePicker_addAppointmentDate = (DatePicker) target;
          break;
        case 12:
          this.textBox_addAppointmentHour = (TextBox) target;
          this.textBox_addAppointmentHour.GotFocus += new RoutedEventHandler(this.textBox_addAppointmentHour_GotFocus);
          this.textBox_addAppointmentHour.LostFocus += new RoutedEventHandler(this.textBox_addAppointmentHour_LostFocus);
          break;
        case 13:
          this.textBox_addAppointmentMinute = (TextBox) target;
          this.textBox_addAppointmentMinute.GotFocus += new RoutedEventHandler(this.textBox_addAppointmentMinute_GotFocus);
          this.textBox_addAppointmentMinute.LostFocus += new RoutedEventHandler(this.textBox_addAppointmentMinute_LostFocus);
          break;
        case 14:
          this.label7 = (Label) target;
          break;
        case 15:
          this.radioButton_addAppointmentAM = (RadioButton) target;
          break;
        case 16:
          this.radioButton_addAppointmentPM = (RadioButton) target;
          break;
        case 17:
          this.textBox_addAppointmentNotes = (TextBox) target;
          break;
        case 18:
          this.button_addAppointment = (Button) target;
          this.button_addAppointment.Click += new RoutedEventHandler(this.button_addAppointment_Click);
          break;
        case 19:
          this.button1 = (Button) target;
          this.button1.Click += new RoutedEventHandler(this.button1_Click);
          break;
        case 20:
          this.button_close = (Button) target;
          this.button_close.Click += new RoutedEventHandler(this.button_close_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
