// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: Yo, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C4B4A9-DF91-4C66-8221-B310119D49D7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9fa98d845147978f040107c6d725a2b12ba15c204c54ed6d726c0780b40c68c3.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
    bool flag1 = (ImageUtil.\u206B⁯‪⁪‌‭‌⁬⁮‌​‪‍‬‫⁫‌‮‫⁮⁬‮‌‭⁯‫‪⁫‭⁫​⁮‪⁮⁪‭‪‮⁯‪‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed;
label_1:
    int num1 = -1656427009;
    Bitmap bitmap;
    int num2;
    Image image;
    IntPtr num3;
    byte[] numArray;
    int length;
    int num4;
    bool flag2;
    Rectangle rectangle;
    PixelFormat pixelFormat;
    BitmapData bitmapData;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -121951045)) % 26U)
      {
        case 0:
          num2 = num2 + 1 + 1;
          num1 = (int) num5 * 3350316 ^ 1593083238;
          continue;
        case 1:
          image = originalImage;
          num1 = (int) num5 * -2058054726 ^ -2035307607;
          continue;
        case 2:
          num1 = (int) num5 * 1769499959 ^ -700305906;
          continue;
        case 3:
          num1 = (int) num5 * -415675489 ^ -698048019;
          continue;
        case 4:
          num2 = 0;
          num1 = -474882705;
          continue;
        case 5:
          goto label_1;
        case 6:
          int num6 = !flag1 ? -1416451212 : (num6 = -1571943488);
          num1 = num6 ^ (int) num5 * -1343496216;
          continue;
        case 7:
          bitmap = (Bitmap) ImageUtil.\u200C‍⁪‭​‭‫‌​‫‎‫‭​‌‮‌‪‎‍⁫‭‮‬‫⁮‪‬‍⁫​‬‮‎⁯⁬​‬‭‮‮(originalImage);
          num1 = -584008912;
          continue;
        case 8:
          num1 = (int) num5 * -1295054699 ^ 1011841701;
          continue;
        case 9:
          int num7 = flag2 ? -1055197681 : (num7 = -1954259027);
          num1 = num7 ^ (int) num5 * -2141442364;
          continue;
        case 10:
          num4 = 0;
          num1 = (int) num5 * -2016847529 ^ 852194872;
          continue;
        case 11:
          num1 = -1421646679;
          continue;
        case 12:
          bitmapData = ImageUtil.\u202D‬⁭‎⁬⁯‎⁯‮‏‏‫‪⁮‍‪‫⁯​⁭‫⁬⁪‪​‏⁪⁫‪⁪‪‭‬⁫⁬‎​‪‬‬‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num3 = ImageUtil.\u200C‌‬‬⁯‫⁬‌⁭‭‌‎⁭⁮‏‎‬⁯‮‬‎‌‍‬‮‌‌‮⁯‭​‮‬⁮‪‮⁮‬‏‌‮(bitmapData);
          length = ImageUtil.\u202C‍‮‮‮⁯‫⁪‫‮‫‬‌⁭⁪‫⁪‍​⁬⁭‫‫⁮‌​‬⁭‮‎⁯⁬‍‎‮‏⁬‫‭⁪‮((Image) bitmap) * ImageUtil.\u200F‬‌⁯‭⁬‎⁭‫⁮⁫‭‭‌‭⁮⁫‏‫‬‮‭‬‫⁪‪‎⁮‍‪‬‍⁬⁬‫‫‮‭‍‭‮((Image) bitmap) * 4;
          num1 = (int) num5 * -103247535 ^ 1434463558;
          continue;
        case 13:
          num1 = (int) num5 * 565620995 ^ 1927914166;
          continue;
        case 14:
          num1 = (int) num5 * 576621945 ^ -1607928569;
          continue;
        case 15:
          pixelFormat = PixelFormat.Format32bppArgb;
          rectangle = new Rectangle(0, 0, ImageUtil.\u202C‍‮‮‮⁯‫⁪‫‮‫‬‌⁭⁪‫⁪‍​⁬⁭‫‫⁮‌​‬⁭‮‎⁯⁬‍‎‮‏⁬‫‭⁪‮((Image) bitmap), ImageUtil.\u200F‬‌⁯‭⁬‎⁭‫⁮⁫‭‭‌‭⁮⁫‏‫‬‮‭‬‫⁪‪‎⁮‍‪‬‍⁬⁬‫‫‮‭‍‭‮((Image) bitmap));
          num1 = (int) num5 * -1680397331 ^ 1034332664;
          continue;
        case 16:
          num4 += 4;
          num1 = -1093139020;
          continue;
        case 17:
          ImageUtil.\u206A⁯⁮‬⁭‏‍⁫⁯⁭‭‎‭⁫‬‪⁪‬​⁬‪​⁯⁪‬‍⁮⁭‬⁪‭⁯⁮‮⁬‮⁭‭​⁪‮(numArray, 0, num3, length);
          num1 = (int) num5 * -13676192 ^ 794671287;
          continue;
        case 18:
          ImageUtil.\u206C‫‭‎⁯‍⁪‏⁭⁮‌⁯⁯‪‫⁫‫⁫⁬⁪‍⁮‭‏‭​⁫⁬‪‍⁯‬⁭‏‭‎​‎‪‬‮(num3, numArray, 0, length);
          num1 = (int) num5 * -1410115782 ^ -1822939301;
          continue;
        case 19:
          numArray[num4 + num2] = (byte) ((double) numArray[num4 + num2] * opacity);
          num1 = (int) num5 * 1096080360 ^ 20698113;
          continue;
        case 20:
          ++num2;
          num1 = (int) num5 * 1721044699 ^ 1957571727;
          continue;
        case 21:
          ImageUtil.\u206E⁫‎‎⁮​‪⁭⁭⁭⁪​‏⁫‪​⁭‌⁭⁪⁫‪‍‪‭‭⁮‭‌⁮‏⁬‍‎‍⁫⁯⁫‏‪‮(bitmap, bitmapData);
          image = (Image) bitmap;
          num1 = (int) num5 * 36873549 ^ 428789293;
          continue;
        case 23:
          int num8;
          num1 = num8 = num4 < numArray.Length ? -188097680 : (num8 = -224454852);
          continue;
        case 24:
          flag2 = numArray[num4 + 4 - 1] == (byte) 0;
          num1 = (int) num5 * -522022628 ^ -1229511920;
          continue;
        case 25:
          numArray = new byte[length];
          num1 = (int) num5 * -1079467770 ^ 792499455;
          continue;
        default:
          goto label_27;
      }
    }
label_27:
    return image;
  }

  static PixelFormat \u206B⁯‪⁪‌‭‌⁬⁮‌​‪‍‬‫⁫‌‮‫⁮⁬‮‌‭⁯‫‪⁫‭⁫​⁮‪⁮⁪‭‪‮⁯‪‮([In] Image obj0) => obj0.PixelFormat;

  static object \u200C‍⁪‭​‭‫‌​‫‎‫‭​‌‮‌‪‎‍⁫‭‮‬‫⁮‪‬‍⁫​‬‮‎⁯⁬​‬‭‮‮([In] Image obj0) => obj0.Clone();

  static int \u202C‍‮‮‮⁯‫⁪‫‮‫‬‌⁭⁪‫⁪‍​⁬⁭‫‫⁮‌​‬⁭‮‎⁯⁬‍‎‮‏⁬‫‭⁪‮([In] Image obj0) => obj0.Width;

  static int \u200F‬‌⁯‭⁬‎⁭‫⁮⁫‭‭‌‭⁮⁫‏‫‬‮‭‬‫⁪‪‎⁮‍‪‬‍⁬⁬‫‫‮‭‍‭‮([In] Image obj0) => obj0.Height;

  static BitmapData \u202D‬⁭‎⁬⁯‎⁯‮‏‏‫‪⁮‍‪‫⁯​⁭‫⁬⁪‪​‏⁪⁫‪⁪‪‭‬⁫⁬‎​‪‬‬‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200C‌‬‬⁯‫⁬‌⁭‭‌‎⁭⁮‏‎‬⁯‮‬‎‌‍‬‮‌‌‮⁯‭​‮‬⁮‪‮⁮‬‏‌‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u206C‫‭‎⁯‍⁪‏⁭⁮‌⁯⁯‪‫⁫‫⁫⁬⁪‍⁮‭‏‭​⁫⁬‪‍⁯‬⁭‏‭‎​‎‪‬‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206A⁯⁮‬⁭‏‍⁫⁯⁭‭‎‭⁫‬‪⁪‬​⁬‪​⁯⁪‬‍⁮⁭‬⁪‭⁯⁮‮⁬‮⁭‭​⁪‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206E⁫‎‎⁮​‪⁭⁭⁭⁪​‏⁫‪​⁭‌⁭⁪⁫‪‍‪‭‭⁮‭‌⁮‏⁬‍‎‍⁫⁯⁫‏‪‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
