// Decompiled with JetBrains decompiler
// Type: JsonObject
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;

[DebuggerDisplay("Count = {Count}")]
[DebuggerTypeProxy(typeof (JsonObject.JsonObjectDebugView))]
public sealed class JsonObject : 
  IEnumerable<KeyValuePair<string, JsonValue>>,
  IEnumerable,
  IEnumerable<JsonValue>
{
  private IDictionary<string, JsonValue> properties;

  public int Count => this.properties.Count;

  public JsonValue this[string key]
  {
    get
    {
      JsonValue jsonValue;
      return this.properties.TryGetValue(key, out jsonValue) ? jsonValue : JsonValue.Null;
    }
    set => this.properties[key] = value;
  }

  public JsonObject() => this.properties = (IDictionary<string, JsonValue>) new Dictionary<string, JsonValue>();

  public JsonObject Add(string key) => this.Add(key, JsonValue.Null);

  public JsonObject Add(string key, JsonValue value)
  {
    this.properties.Add(key, value);
    return this;
  }

  public JsonObject AddIfNotNull(string key, JsonValue value)
  {
    if (!value.IsNull)
      this.Add(key, value);
    return this;
  }

  public bool Remove(string key) => this.properties.Remove(key);

  public JsonObject Clear()
  {
    this.properties.Clear();
    return this;
  }

  public JsonObject Rename(string oldKey, string newKey)
  {
    JsonValue jsonValue;
    if (this.properties.TryGetValue(oldKey, out jsonValue))
    {
      this.Remove(oldKey);
      this[newKey] = jsonValue;
    }
    return this;
  }

  public bool ContainsKey(string key) => this.properties.ContainsKey(key);

  public bool ContainsKey(string key, out JsonValue value) => this.properties.TryGetValue(key, out value);

  public bool Contains(JsonValue value) => this.properties.Values.Contains(value);

  public IEnumerator<KeyValuePair<string, JsonValue>> GetEnumerator() => this.properties.GetEnumerator();

  IEnumerator<JsonValue> IEnumerable<JsonValue>.GetEnumerator() => this.properties.Values.GetEnumerator();

  IEnumerator IEnumerable.GetEnumerator() => (IEnumerator) this.GetEnumerator();

  public override string ToString() => this.ToString(false);

  public string ToString(bool pretty) => JsonWriter.Serialize((JsonValue) this, pretty);

  private class JsonObjectDebugView
  {
    private JsonObject jsonObject;

    [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
    public JsonObject.JsonObjectDebugView.KeyValuePair[] Keys
    {
      get
      {
        JsonObject.JsonObjectDebugView.KeyValuePair[] keys = new JsonObject.JsonObjectDebugView.KeyValuePair[this.jsonObject.Count];
        int index = 0;
        foreach (KeyValuePair<string, JsonValue> keyValuePair in this.jsonObject)
        {
          keys[index] = new JsonObject.JsonObjectDebugView.KeyValuePair(keyValuePair.Key, keyValuePair.Value);
          ++index;
        }
        return keys;
      }
    }

    public JsonObjectDebugView(JsonObject jsonObject) => this.jsonObject = jsonObject;

    [DebuggerDisplay("{value.ToString(),nq}", Name = "{key}", Type = "JsonValue({Type})")]
    public class KeyValuePair
    {
      [DebuggerBrowsable(DebuggerBrowsableState.Never)]
      private string key;
      [DebuggerBrowsable(DebuggerBrowsableState.Never)]
      private JsonValue value;

      [DebuggerBrowsable(DebuggerBrowsableState.Never)]
      private JsonValueType Type => this.value.Type;

      [DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
      public object View
      {
        get
        {
          if (this.value.IsJsonObject)
            return (object) (JsonObject) this.value;
          return this.value.IsJsonArray ? (object) (JsonArray) this.value : (object) this.value;
        }
      }

      public KeyValuePair(string key, JsonValue value)
      {
        this.key = key;
        this.value = value;
      }
    }
  }
}
