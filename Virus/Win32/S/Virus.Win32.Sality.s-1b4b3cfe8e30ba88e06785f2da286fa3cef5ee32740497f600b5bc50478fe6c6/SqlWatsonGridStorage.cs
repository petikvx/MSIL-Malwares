// Decompiled with JetBrains decompiler
// Type: WatsonDialog.SqlWatsonGridStorage
// Assembly: SQLWTSN, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
// MVID: B7E612C0-B21E-4017-B4A7-EBA59D4A8946
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Sality.s-1b4b3cfe8e30ba88e06785f2da286fa3cef5ee32740497f600b5bc50478fe6c6.exe

using Microsoft.SqlServer;
using Microsoft.SqlServer.Management.Diagnostics;
using Microsoft.SqlServer.Management.UI.Grid;
using Microsoft.Win32;
using MSClusterLib;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Text;

namespace WatsonDialog
{
  internal class SqlWatsonGridStorage : IGridStorage
  {
    private List<Instance> m_instances;
    private InstanceComparer m_comparer;

    internal SqlWatsonGridStorage()
    {
      this.m_instances = new List<Instance>();
      this.m_comparer = new InstanceComparer((IComparer) Comparer.Default);
      this.InitializeInstanceAgnosticComponents(false);
      this.InitializeInstanceAgnosticComponents(true);
      this.InitializeInstanceAwareComponents(false);
      this.InitializeInstanceAwareComponents(true);
    }

    internal void SortByColumn(int column, bool descending)
    {
      this.m_comparer.Column = column;
      this.m_comparer.Descending = descending;
      this.m_instances.Sort((IComparer<Instance>) this.m_comparer);
    }

    private void InitializeInstanceAgnosticComponents(bool wow)
    {
      string str = wow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90" : "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90";
      if (!RegistryInteractor.KeyExists(Constants.BASE_REGKEY, str))
        return;
      Instance instance = new Instance();
      instance.instanceName = Constants.INSTANCE_AGNOSTIC_STRING;
      instance.instanceType = wow ? Constants.WOW_COMPONENT_AGNOSTIC_STRING : Constants.COMPONENT_AGNOSTIC_STRING;
      instance.instanceID = wow ? "<WOW_AGNOSTIC>" : "<AGNOSTIC>";
      object regKeyValue1 = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, str, "CustomerFeedback", Constants.USAGE_CHECKBOX_COLUMN_HEADER, instance.DisplayName);
      instance.usageChecked = 1.Equals(regKeyValue1) ? (GridCheckBoxState) 0 : (GridCheckBoxState) 1;
      object regKeyValue2 = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, str, "EnableErrorReporting", Constants.ERROR_CHECKBOX_COLUMN_HEADER, instance.DisplayName);
      instance.errorChecked = 1.Equals(regKeyValue2) ? (GridCheckBoxState) 0 : (GridCheckBoxState) 1;
      object regKeyValue3 = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, str, "ErrorReportingDir", Constants.ERROR_REPORTS_COLUMN_HEADER, instance.DisplayName);
      instance.errorDir = regKeyValue3 != null ? regKeyValue3.ToString() : "";
      instance.isWow = wow;
      instance.canWrite = true;
      this.m_instances.Add(instance);
    }

    private void InitializeInstanceAwareComponents(bool wow)
    {
      string keyStr1 = wow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\Instance Names" : "SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names";
      RegistryKey regKey = RegistryInteractor.GetRegKey(Constants.BASE_REGKEY, keyStr1, (string) null, false);
      if (regKey == null)
        return;
      RegistryKey[] subRegKeys = RegistryInteractor.GetSubRegKeys(regKey);
      if (subRegKeys == null)
        return;
      foreach (RegistryKey registryKey in subRegKeys)
      {
        foreach (string valueName in registryKey.GetValueNames())
        {
          Instance instance = new Instance();
          instance.instanceID = registryKey.GetValue(valueName, (object) "") as string;
          if (instance.instanceID == null)
            instance.instanceID = "";
          if (!(instance.instanceID == "MSSQL.2005"))
          {
            instance.instanceName = !"MSSQLSERVER".Equals(valueName) ? valueName : Constants.DEFAULT_INSTANCE_DISPLAY_NAME;
            string str1 = registryKey.Name ?? "";
            try
            {
              str1 = registryKey.Name.Substring(registryKey.Name.LastIndexOf("\\") + 1);
            }
            catch (ArgumentOutOfRangeException ex)
            {
              STrace.LogExCatch((Exception) ex);
            }
            string str2 = "";
            switch (str1)
            {
              case "SQL":
                str2 = Constants.COMPONENT_SQL_SERVER_STRING;
                break;
              case "OLAP":
                str2 = Constants.COMPONENT_ANALYSIS_SERVER_STRING;
                break;
              case "RS":
                str2 = Constants.COMPONENT_REPORT_SERVER_STRING;
                break;
            }
            instance.instanceType = str2;
            string str3 = wow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server" : "SOFTWARE\\Microsoft\\Microsoft SQL Server";
            string keyStr2 = str3 + "\\" + instance.instanceID + "\\CPE";
            string keyStr3 = str3 + "\\" + instance.instanceID + "\\Cluster";
            if (!(RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, keyStr3, "ClusterName") is string regKeyValue1))
              instance.canWrite = true;
            else if (instance.instanceType == Constants.COMPONENT_SQL_SERVER_STRING)
              instance.canWrite = SqlWatsonGridStorage.IsSqlServerInstanceWriteable(regKeyValue1);
            else if (instance.instanceType == Constants.COMPONENT_ANALYSIS_SERVER_STRING)
            {
              string instanceFriendlyName = instance.instanceName == Constants.DEFAULT_INSTANCE_DISPLAY_NAME ? "MSSQLSERVER" : instance.instanceName;
              instance.canWrite = SqlWatsonGridStorage.IsOlapInstanceWriteable(instanceFriendlyName);
            }
            else
              instance.canWrite = true;
            if (instance.canWrite)
            {
              object regKeyValue2 = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, keyStr2, "CustomerFeedback", Constants.USAGE_CHECKBOX_COLUMN_HEADER, instance.DisplayName);
              instance.usageChecked = 1.Equals(regKeyValue2) ? (GridCheckBoxState) 0 : (GridCheckBoxState) 1;
              object regKeyValue3 = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, keyStr2, "EnableErrorReporting", Constants.ERROR_CHECKBOX_COLUMN_HEADER, instance.DisplayName);
              instance.errorChecked = 1.Equals(regKeyValue3) ? (GridCheckBoxState) 0 : (GridCheckBoxState) 1;
              object regKeyValue4 = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, keyStr2, "ErrorDumpDir", Constants.ERROR_REPORTS_COLUMN_HEADER, instance.DisplayName);
              instance.errorDir = regKeyValue4 == null ? "" : regKeyValue4 as string;
            }
            else
            {
              instance.usageChecked = (GridCheckBoxState) 3;
              instance.errorChecked = (GridCheckBoxState) 3;
              instance.errorDir = "";
            }
            instance.isWow = wow;
            this.m_instances.Add(instance);
          }
        }
      }
    }

    private static ISClusResource FindResourceFromPrivateProperty(
      string resourceType,
      string propertyName,
      string propertyValue)
    {
      ISCluster isCluster = (ISCluster) new ClusterClass();
      isCluster.Open(string.Empty);
      foreach (ISClusResource resource in (ISClusResTypeResources) ((ISClusResType) ((ISClusResTypes) isCluster.ResourceTypes)[(object) resourceType]).Resources)
      {
        if (string.Compare((string) ((ISClusProperty) ((ISClusProperties) resource.PrivateProperties)[(object) propertyName]).Value, propertyValue, true, CultureInfo.InvariantCulture) == 0)
          return resource;
      }
      return (ISClusResource) null;
    }

    private static bool IsInstanceWriteable(
      string resourceType,
      string propertyName,
      string propertyValue)
    {
      try
      {
        ISClusResource fromPrivateProperty = SqlWatsonGridStorage.FindResourceFromPrivateProperty(resourceType, propertyName, propertyValue);
        if (fromPrivateProperty == null)
        {
          int num = (int) ErrorHandler.Error(Constants.GENERIC_CONFIGURATION_ERROR);
          return false;
        }
        return string.Compare(Environment.MachineName, ((ISClusNode) fromPrivateProperty.OwnerNode).Name, true, CultureInfo.InvariantCulture) == 0 && fromPrivateProperty.State == 2;
      }
      catch (COMException ex)
      {
        STrace.LogExCatch((Exception) ex);
        int num = (int) ErrorHandler.Error(Constants.GENERIC_CONFIGURATION_ERROR);
        return false;
      }
    }

    private static bool IsSqlServerInstanceWriteable(string networkName) => SqlWatsonGridStorage.IsInstanceWriteable("SQL Server", "VirtualServerName", networkName);

    private static bool IsOlapInstanceWriteable(string instanceFriendlyName)
    {
      INST_ID instId = new INST_ID();
      if (!InstAPI.GetSvcInstanceIDFromName(instanceFriendlyName, (SQL_SVCS) 3, instId))
      {
        int num = (int) ErrorHandler.Error(Constants.GENERIC_CONFIGURATION_ERROR);
        return false;
      }
      StringBuilder stringBuilder = new StringBuilder();
      uint capacity = (uint) stringBuilder.Capacity;
      bool sqlServiceById = InstAPI.GetSQLServiceByID(instId, (SQL_SVCS) 3, stringBuilder, ref capacity);
      if (!sqlServiceById && (int) capacity > stringBuilder.Capacity)
      {
        stringBuilder.Capacity = (int) capacity;
        sqlServiceById = InstAPI.GetSQLServiceByID(instId, (SQL_SVCS) 3, stringBuilder, ref capacity);
      }
      if (sqlServiceById)
        return SqlWatsonGridStorage.IsInstanceWriteable("Generic Service", "ServiceName", stringBuilder.ToString());
      int num1 = (int) ErrorHandler.Error(Constants.GENERIC_CONFIGURATION_ERROR);
      return false;
    }

    public long NumRows() => (long) this.m_instances.Count;

    public long EnsureRowsInBuf(long FirstRowIndex, long LastRowIndex) => (long) this.m_instances.Count;

    public string GetCellDataAsString(long nRowIndex, int nColIndex) => this.GetInstanceData(nRowIndex, nColIndex) as string;

    public int IsCellEditable(long nRowIndex, int nColIndex) => nColIndex == 0 || nColIndex == 1 || nColIndex == 5 || nColIndex == 2 || nColIndex == 3 || !this.GetInstance(nRowIndex).canWrite ? 0 : 1;

    public Bitmap GetCellDataAsBitmap(long nRowIndex, int nColIndex) => (Bitmap) null;

    public void GetCellDataForButton(
      long nRowIndex,
      int nColIndex,
      out ButtonCellState state,
      out Bitmap image,
      out string buttonLabel)
    {
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      ^(int&) ref state = 1;
      image = (Bitmap) null;
      buttonLabel = Constants.BROWSE_BUTTON_TEXT;
    }

    public GridCheckBoxState GetCellDataForCheckBox(long nRowIndex, int nColIndex)
    {
      SqlWatsonGridStorage.AssertColumnIsCheckBox(nColIndex);
      return (GridCheckBoxState) this.GetInstanceData(nRowIndex, nColIndex);
    }

    public void FillControlWithData(long nRowIndex, int nColIndex, IGridEmbeddedControl control) => control.AddDataAsString(this.GetInstanceData(nRowIndex, nColIndex) as string);

    public bool SetCellDataFromControl(long nRowIndex, int nColIndex, IGridEmbeddedControl control)
    {
      this.SetInstanceData(nRowIndex, nColIndex, (object) SqlWatsonGridStorage.TruncateString((object) control.GetCurSelectionAsString()));
      return true;
    }

    private static void AssertColumnIsCheckBox(int nColIndex)
    {
    }

    private static GridCheckBoxState GetResultingState(
      GridCheckBoxState initialState)
    {
      if (initialState == null)
        return (GridCheckBoxState) 1;
      return initialState == 1 ? (GridCheckBoxState) 0 : (GridCheckBoxState) 4;
    }

    internal void ToggleCheckBox(long nRowIndex, int nColIndex)
    {
      SqlWatsonGridStorage.AssertColumnIsCheckBox(nColIndex);
      this.SetInstanceData(nRowIndex, nColIndex, (object) SqlWatsonGridStorage.GetResultingState((GridCheckBoxState) this.GetInstanceData(nRowIndex, nColIndex)));
    }

    internal bool AreAllCheckBoxesChecked(int nColIndex)
    {
      SqlWatsonGridStorage.AssertColumnIsCheckBox(nColIndex);
      for (int index = 0; index < this.m_instances.Count; ++index)
      {
        if (this.m_instances[index].canWrite && !((object) (GridCheckBoxState) 0).Equals(this.GetInstanceData((long) index, nColIndex)))
          return false;
      }
      return true;
    }

    internal bool AreAllCheckBoxesUnchecked(int nColIndex)
    {
      SqlWatsonGridStorage.AssertColumnIsCheckBox(nColIndex);
      for (int index = 0; index < this.m_instances.Count; ++index)
      {
        if (this.m_instances[index].canWrite && !((object) (GridCheckBoxState) 1).Equals(this.GetInstanceData((long) index, nColIndex)))
          return false;
      }
      return true;
    }

    internal void SelectAllCheckBoxes(int nColIndex, bool toCheck)
    {
      SqlWatsonGridStorage.AssertColumnIsCheckBox(nColIndex);
      GridCheckBoxState gridCheckBoxState = toCheck ? (GridCheckBoxState) 0 : (GridCheckBoxState) 1;
      for (int index = 0; index < this.m_instances.Count; ++index)
      {
        if (this.m_instances[index].canWrite)
          this.SetInstanceData((long) index, nColIndex, (object) gridCheckBoxState);
      }
    }

    internal Instance GetInstance(long nRowIndex) => this.m_instances[(int) nRowIndex];

    internal long GetRow(Instance inst) => (long) this.m_instances.IndexOf(inst);

    internal object GetInstanceData(long nRowIndex, int nColIndex)
    {
      Instance instance = this.GetInstance(nRowIndex);
      switch (nColIndex)
      {
        case 0:
          return (object) instance.instanceName;
        case 1:
          return (object) instance.instanceType;
        case 2:
          return (object) instance.usageChecked;
        case 3:
          return (object) instance.errorChecked;
        case 4:
          return (object) instance.errorDir;
        default:
          return (object) null;
      }
    }

    internal void SetInstanceData(long nRowIndex, int nColIndex, object value)
    {
      Instance instance = this.GetInstance(nRowIndex);
      string str = value as string;
      switch (nColIndex)
      {
        case 0:
          instance.instanceName = str;
          break;
        case 1:
          instance.instanceType = str;
          break;
        case 2:
          instance.usageChecked = (GridCheckBoxState) value;
          break;
        case 3:
          instance.errorChecked = (GridCheckBoxState) value;
          break;
        case 4:
          instance.errorDir = SqlWatsonGridStorage.TruncateString(value);
          break;
      }
    }

    private static string TruncateString(object obj)
    {
      if (obj is string str && str.Length > 247)
        str = str.Substring(0, 247);
      return str;
    }
  }
}
