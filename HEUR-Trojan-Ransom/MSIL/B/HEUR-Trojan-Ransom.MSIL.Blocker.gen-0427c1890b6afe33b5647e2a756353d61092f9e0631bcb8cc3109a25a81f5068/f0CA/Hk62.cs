// Decompiled with JetBrains decompiler
// Type: f0CA.Hk62
// Assembly: Kw9, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 454AB7CE-9D73-4F30-B915-379BCB1A28FE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0427c1890b6afe33b5647e2a756353d61092f9e0631bcb8cc3109a25a81f5068.exe

using System;
using System.ComponentModel;
using System.Data.Linq.Mapping;

namespace f0CA
{
  [Table(Name = "dbo.Fees")]
  public class Hk62 : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);
    private int _Id;
    private string _Registration_No;
    private string _Full_Name;
    private string _Class;
    private Decimal? _Fees;
    private Decimal? _Fees_Paid;
    private Decimal? _Balance;
    private string _Status;

    [Column(AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsDbGenerated = true, IsPrimaryKey = true, Storage = "_Id")]
    public int Id
    {
      get => this._Id;
      set
      {
        if (this._Id == value)
          return;
        this.Bc92();
        this._Id = value;
        this.m8R1(nameof (Id));
      }
    }

    [Column(DbType = "NVarChar(50)", Name = "[Registration No]", Storage = "_Registration_No")]
    public string Registration_No
    {
      get => this._Registration_No;
      set
      {
        if (string.Equals(this._Registration_No, value))
          return;
        this.Bc92();
        this._Registration_No = value;
        this.m8R1(nameof (Registration_No));
      }
    }

    [Column(DbType = "NVarChar(50)", Name = "[Full Name]", Storage = "_Full_Name")]
    public string Full_Name
    {
      get => this._Full_Name;
      set
      {
        if (string.Equals(this._Full_Name, value))
          return;
        this.Bc92();
        this._Full_Name = value;
        this.m8R1(nameof (Full_Name));
      }
    }

    [Column(DbType = "NVarChar(50)", Name = "Class", Storage = "_Class")]
    public string Class
    {
      get => this._Class;
      set
      {
        if (string.Equals(this._Class, value))
          return;
        this.Bc92();
        this._Class = value;
        this.m8R1("[Class]");
      }
    }

    [Column(DbType = "Decimal(18,2)", Storage = "_Fees")]
    public Decimal? Fees
    {
      get => this._Fees;
      set
      {
        if (this._Fees.Equals((object) value))
          return;
        this.Bc92();
        this._Fees = value;
        this.m8R1(nameof (Fees));
      }
    }

    [Column(DbType = "Decimal(18,2)", Name = "[Fees Paid]", Storage = "_Fees_Paid")]
    public Decimal? Fees_Paid
    {
      get => this._Fees_Paid;
      set
      {
        if (this._Fees_Paid.Equals((object) value))
          return;
        this.Bc92();
        this._Fees_Paid = value;
        this.m8R1(nameof (Fees_Paid));
      }
    }

    [Column(DbType = "Decimal(18,2)", Storage = "_Balance")]
    public Decimal? Balance
    {
      get => this._Balance;
      set
      {
        if (this._Balance.Equals((object) value))
          return;
        this.Bc92();
        this._Balance = value;
        this.m8R1(nameof (Balance));
      }
    }

    [Column(DbType = "NVarChar(50)", Storage = "_Status")]
    public string Status
    {
      get => this._Status;
      set
      {
        if (string.Equals(this._Status, value))
          return;
        this.Bc92();
        this._Status = value;
        this.m8R1(nameof (Status));
      }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void Bc92()
    {
      // ISSUE: reference to a compiler-generated field
      if (this.PropertyChangingEvent == null)
        return;
      // ISSUE: reference to a compiler-generated field
      PropertyChangingEventHandler propertyChangingEvent = this.PropertyChangingEvent;
      if (propertyChangingEvent != null)
        propertyChangingEvent((object) this, Hk62.emptyChangingEventArgs);
    }

    protected virtual void m8R1(string c0T9)
    {
      // ISSUE: reference to a compiler-generated field
      if (this.PropertyChangedEvent == null)
        return;
      // ISSUE: reference to a compiler-generated field
      PropertyChangedEventHandler propertyChangedEvent = this.PropertyChangedEvent;
      if (propertyChangedEvent != null)
        propertyChangedEvent((object) this, new PropertyChangedEventArgs(c0T9));
    }

    static void m7ZK()
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
