// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.InfocardExtendedInformationCollection
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: ADE0A079-11DB-4A46-8BDE-D2A592CA8DEA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Expiro.w-a9ceb75b1ba9b52d39d656b826723457de718e998c1868360dc2339052b9ef02.exe

using Microsoft.InfoCards.Diagnostics;
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;

namespace Microsoft.InfoCards
{
  internal class InfocardExtendedInformationCollection : List<InfocardExtendedInformationEntry>
  {
    private const int InvalidRow = 0;
    private Uri m_infoCardId;
    private int m_rowId;

    public InfocardExtendedInformationCollection(Uri infoCardId) => this.m_infoCardId = !((Uri) null == infoCardId) ? infoCardId : throw InfoCardTrace.ThrowHelperArgumentNull(nameof (infoCardId));

    public void Get(StoreConnection con)
    {
      DataRow dataRow = con != null ? this.TryGetRow(con, QueryDetails.FullRow) : throw InfoCardTrace.ThrowHelperArgumentNull(nameof (con));
      if (dataRow == null)
        return;
      this.Deserialize((Stream) new MemoryStream(dataRow.GetDataField()));
      this.m_rowId = dataRow.LocalId;
    }

    public void Serialize(Stream stream)
    {
      BinaryWriter writer = new BinaryWriter(stream, Encoding.Unicode);
      writer.Write(this.Count);
      for (int index = 0; index < this.Count; ++index)
        this[index].Serialize(writer);
    }

    public void Deserialize(Stream stream)
    {
      BinaryReader reader = new BinaryReader(stream, Encoding.Unicode);
      int num = reader.ReadInt32();
      for (int index = 0; index < num; ++index)
      {
        InfocardExtendedInformationEntry informationEntry = new InfocardExtendedInformationEntry();
        informationEntry.Deserialize(reader);
        this.Add(informationEntry);
      }
    }

    public void Save(StoreConnection con)
    {
      DataRow row = con != null ? this.TryGetRow(con, QueryDetails.FullHeader) : throw InfoCardTrace.ThrowHelperArgumentNull(nameof (con));
      if (row == null)
      {
        row = new DataRow();
        row.ObjectType = 4;
        row.GlobalId = (GlobalId) Guid.NewGuid();
      }
      row.SetIndexValue("ix_parentid", (object) GlobalId.DeriveFrom(this.m_infoCardId.ToString()));
      MemoryStream memoryStream = new MemoryStream();
      this.Serialize((Stream) memoryStream);
      row.SetDataField(memoryStream.ToArray());
      con.Save(row);
      this.m_rowId = row.LocalId;
    }

    public string GetIssuerInformationElement()
    {
      for (int index = 0; index < this.Count; ++index)
      {
        XmlReader reader = InfoCardSchemas.CreateReader(this[index].GetXml());
        reader.Read();
        if (reader.IsStartElement("IssuerInformation", "http://schemas.xmlsoap.org/ws/2007/01/identity"))
        {
          reader.Close();
          return this[index].GetXml();
        }
        reader.Close();
      }
      return string.Empty;
    }

    protected DataRow TryGetRow(StoreConnection con, QueryDetails details)
    {
      InfoCardTrace.Assert((Uri) null != this.m_infoCardId, "null infocard id");
      return con.GetSingleRow(details, new QueryParameter("ix_objecttype", new object[1]
      {
        (object) 4
      }), new QueryParameter("ix_parentid", new object[1]
      {
        (object) GlobalId.DeriveFrom(this.m_infoCardId.ToString())
      }));
    }
  }
}
