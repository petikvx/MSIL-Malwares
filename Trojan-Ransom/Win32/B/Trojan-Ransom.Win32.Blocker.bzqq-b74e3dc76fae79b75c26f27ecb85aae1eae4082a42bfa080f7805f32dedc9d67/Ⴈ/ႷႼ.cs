// Decompiled with JetBrains decompiler
// Type: Ⴈ.ႷႼ
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.VisualBasic.CompilerServices;
using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Windows.Forms;
using System.Xml.Serialization;

namespace Ⴈ
{
  [WebServiceBinding(Name = "ReportingServiceSoap", Namespace = "http://www.smartassembly.com/webservices/Reporting/")]
  internal sealed class ႷႼ : SoapHttpClientProtocol
  {
    public ႷႼ(string Ⴃ)
    {
      try
      {
        try
        {
          SmartAssembly.SmartExceptionsCore.Win32.ႣႳ((WebClientProtocol) this, ႷႭ.ႰႨ(Ⴃ, ႳႷ.Ⴗ(2059790973, 0), 1009, 963), 808, 782);
          SmartAssembly.SmartExceptionsCore.DoNotPruneAttribute.Ⴐ((WebClientProtocol) this, 180000, 711, 733);
        }
        catch (Exception ex)
        {
          string o2 = Ⴃ;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }
      catch (Exception ex)
      {
        string o2 = Ⴃ;
        StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
        throw;
      }
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/Reporting/UploadReport2")]
    public string Ⴀ(string Ⴃ, [XmlElement(DataType = "base64Binary")] byte[] Ⴓ, string Ⴗ, string Ⴀ, string Ⴍ)
    {
      object[] objArray;
      try
      {
        string str;
        try
        {
          string methodName = ႳႷ.Ⴗ(2059790860, 2);
          objArray = new object[5]
          {
            (object) Ⴃ,
            (object) Ⴓ,
            (object) Ⴗ,
            (object) Ⴀ,
            (object) Ⴍ
          };
          object[] parameters = objArray;
          str = (string) this.Invoke(methodName, parameters)[0];
        }
        catch (Exception ex)
        {
          object[] o1 = objArray;
          string o3 = Ⴃ;
          byte[] o4 = Ⴓ;
          string o5 = Ⴗ;
          string o6 = Ⴀ;
          string o7 = Ⴍ;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7);
          throw;
        }
        return str;
      }
      catch (Exception ex)
      {
        object[] o1 = objArray;
        string str;
        string o2 = str;
        string o4 = Ⴃ;
        byte[] o5 = Ⴓ;
        string o6 = Ⴗ;
        string o7 = Ⴀ;
        string o8 = Ⴍ;
        StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8);
        throw;
      }
    }

    protected override WebRequest GetWebRequest(Uri Ⴗ)
    {
      int num;
      WebRequest webRequest1;
      HttpWebRequest httpWebRequest;
      try
      {
        WebRequest webRequest2;
        try
        {
          num = 2;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_8;
              case 1:
                goto label_6;
              case 3:
                num = httpWebRequest == null ? 1 : 5;
                continue;
              case 4:
                httpWebRequest = webRequest1 as HttpWebRequest;
                goto case 3;
              case 5:
                goto label_5;
              default:
                webRequest1 = base.GetWebRequest(Ⴗ);
                goto case 4;
            }
          }
label_5:
          HeaderControl.Ⴐ(ႷႭ.ႰႷ(httpWebRequest, 501, 386), false, 193, 198);
label_6:
          webRequest2 = webRequest1;
        }
        catch (Exception ex)
        {
          WebRequest o1 = webRequest1;
          HttpWebRequest o2 = httpWebRequest;
          Uri o4 = Ⴗ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
          throw;
        }
label_8:
        return webRequest2;
      }
      catch (Exception ex)
      {
        WebRequest o1 = webRequest1;
        HttpWebRequest o2 = httpWebRequest;
        WebRequest webRequest3;
        WebRequest o3 = webRequest3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num;
        Uri o6 = Ⴗ;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
        throw;
      }
    }

    static ႷႼ()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static Encoding Ⴗ([In] int obj0, [In] int obj1)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj1 ^ obj0)
        {
          case 93:
            num2 = 1;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              num1 = 2;
              continue;
            case 1:
            case 7:
              goto label_8;
            case 2:
            case 5:
              goto label_3;
            case 4:
              num1 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႼ.Ⴗ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return Encoding.UTF8;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    internal static Exception Ⴄ([In] int obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 115:
            num2 = 1;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_3;
            case 1:
            case 6:
              goto label_8;
            case 3:
            case 5:
              num1 = 0;
              continue;
            case 7:
              num1 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႼ.Ⴄ);
              num1 = 0;
              continue;
          }
        }
label_8:
        return ProjectData.CreateProjectError(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴈ([In] System.Windows.Forms.Timer obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 5;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 4:
              goto label_7;
            case 2:
              num1 = 5;
              continue;
            case 3:
              goto label_8;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 88:
                  num2 = 1;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_7:
        obj0.Enabled = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        System.Windows.Forms.Timer o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static int Ⴐ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 90:
            num2 = 0;
            break;
          case 91:
            num2 = 6;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 1:
            case 5:
              goto label_9;
            case 2:
              num1 = 4;
              continue;
            case 3:
            case 8:
              num1 = 4;
              continue;
            case 4:
              goto label_3;
            case 6:
              goto label_10;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႼ.Ⴐ);
              num1 = 4;
              continue;
          }
        }
label_9:
        return obj0.Width;
label_10:
        return obj0.Height;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Control o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int Ⴍ([In] ref Rectangle obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 99:
            num2 = 0;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
            case 5:
              goto label_8;
            case 4:
              num1 = 6;
              continue;
            case 6:
              goto label_3;
            case 7:
              num1 = 6;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႼ.Ⴍ);
              num1 = 6;
              continue;
          }
        }
label_8:
        return obj0.Bottom;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<Rectangle> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int Ⴃ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 48:
            num2 = 7;
            break;
          default:
            num2 = 6;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 3:
            case 4:
            case 6:
              num1 = 5;
              continue;
            case 2:
              num1 = 5;
              continue;
            case 5:
              goto label_3;
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႼ.Ⴃ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return obj0.Width;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Control o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴅ
    {
      internal Label Ⴃ;
      internal Button Ⴈ;
      internal Button Ⴗ;
      internal IContainer Ⴍ;
    }
  }
}
