// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: CustomA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1ABC0B0F-8965-48BE-A39F-300B4A85D17D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-78d292113f7af44c7c14bdfb7bbae779df2f657bf2a687bc874dd6f9c9aecefd.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = -1149952991;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1225115885)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -54473234 ^ 1873807509;
            continue;
          case 2:
            num1 = (int) num2 * 1274315473 ^ 253442956;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = -1692248946;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -668258443)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 64665922 ^ -1066533351;
            continue;
          case 3:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * 1453754204 ^ 277749456;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = -806422429;
      float[] numArray;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -906955320)) % 8U)
        {
          case 0:
            riskChances = numArray;
            num1 = (int) num2 * -1718517935 ^ 1996308453;
            continue;
          case 1:
            aIndex = 0;
            num1 = (int) num2 * 946902108 ^ 1463625622;
            continue;
          case 2:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -470464641 : (num3 = -141863120);
            continue;
          case 3:
            numArray = new float[json.Count];
            num1 = (int) num2 * 1095107177 ^ 1397417378;
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * 792364416 ^ -355322966;
            continue;
          case 6:
            goto label_1;
          case 7:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -825322692;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = 373597819;
      int num2;
      int aIndex1;
      JSONNode jsonNode;
      int aIndex2;
      bool flag1;
      List<Card> cardList;
      Card[] array;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 947881251)) % 22U)
        {
          case 0:
            num1 = 1773434309;
            continue;
          case 1:
            array = cardList.ToArray();
            num1 = (int) num3 * 902845691 ^ 454069123;
            continue;
          case 2:
            ++aIndex1;
            num1 = (int) num3 * -655731786 ^ 1258653508;
            continue;
          case 3:
            ++aIndex2;
            num1 = (int) num3 * -2006237749 ^ 1465246831;
            continue;
          case 4:
            int num4 = !flag2 ? -1603444628 : (num4 = -763245055);
            num1 = num4 ^ (int) num3 * 1540132278;
            continue;
          case 5:
            bool flag3 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 88229430;
            continue;
          case 6:
            goto label_1;
          case 7:
            flag1 = aIndex2 < count;
            num1 = 1954818506;
            continue;
          case 8:
            cardList = new List<Card>();
            aIndex2 = 0;
            num1 = (int) num3 * -1671584373 ^ -198491814;
            continue;
          case 9:
            num1 = (int) num3 * 1272949199 ^ 344721776;
            continue;
          case 10:
            aIndex1 = 0;
            num1 = (int) num3 * -194350336 ^ 1162960102;
            continue;
          case 11:
            int num5 = !flag1 ? 649708634 : (num5 = 2121318371);
            num1 = num5 ^ (int) num3 * 1933084156;
            continue;
          case 12:
            num1 = (int) num3 * -1236191445 ^ 192380041;
            continue;
          case 13:
            ++num2;
            num1 = (int) num3 * 1260707027 ^ 913688244;
            continue;
          case 14:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * 932062399 ^ -815788325;
            continue;
          case 15:
            flag2 = aIndex1 < maxImpact * 2;
            num1 = 1077594951;
            continue;
          case 16:
            int num6;
            num1 = num6 = num2 >= jsonNode[aIndex1].AsInt ? 1121511899 : (num6 = 1989106236);
            continue;
          case 17:
            num1 = (int) num3 * -1036784040 ^ -98885933;
            continue;
          case 18:
            num2 = 0;
            num1 = 1024011952;
            continue;
          case 19:
            num1 = (int) num3 * -348698427 ^ -2057233175;
            continue;
          case 21:
            num1 = (int) num3 * -344825144 ^ -1189948480;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1783436375;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1284159337)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            str = Rules.\u206E⁬‏‭‌‭⁫​⁫⁭‪‌‬‬⁭‎‌‭‭⁯‮‍⁭‭⁬⁯‭​‭‬​‏⁬‬⁮‍‎⁫‌‪‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * 571756697 ^ -234544164;
            continue;
          case 3:
            num1 = (int) num2 * -1723152530 ^ -1722125682;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -1180314369;
      string str2;
      bool flag;
      Card card1;
      int num2;
      Card[] cards;
      int index;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1919421571)) % 14U)
        {
          case 0:
            int num4;
            num1 = num4 = index >= cards.Length ? -993089012 : (num4 = -1061368370);
            continue;
          case 1:
            cards = this.Cards;
            num1 = (int) num3 * -2127110815 ^ 1288685629;
            continue;
          case 2:
            num1 = (int) num3 * 1382119193 ^ -1023092180;
            continue;
          case 3:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206F‪‮‮‫‫‮⁬⁭‪⁫⁮⁫​‍‫‬⁯‍⁫‫⁫⁪‍⁮‌‍⁯‎⁪‌⁭‌‭⁬⁪⁮‎‏⁮‮((object) card2) : (string) null;
            str1 = Rules.\u202C‪⁪‭‌⁬⁯‏‬⁮⁫⁯‫⁬⁪⁫‪‮⁫⁯⁬⁮‏‪‮‎⁯‭‎‫‌⁬⁭⁫‮⁯⁪⁭​‎‮(str3, str4, " ");
            num1 = -293431993;
            continue;
          case 4:
            num2 = 0;
            num1 = (int) num3 * 897456216 ^ -2024702029;
            continue;
          case 6:
            num1 = (int) num3 * 1014816759 ^ -942290634;
            continue;
          case 7:
            index = 0;
            num1 = (int) num3 * 966377616 ^ -565854843;
            continue;
          case 8:
            str1 = Rules.\u206E⁪‮‌⁪⁬‏​‏‪‎​‬⁯⁬​⁯‍‭⁭​⁬⁫‬‪⁯‬⁯‏‏⁬‏⁪⁭‫‫‪⁭⁪‏‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * 1941230675 ^ 775046426;
            continue;
          case 9:
            card1 = cards[index];
            flag = num2 != card1.Type;
            num1 = -228838630;
            continue;
          case 10:
            goto label_1;
          case 11:
            int num5 = flag ? 1885252356 : (num5 = 20377123);
            num1 = num5 ^ (int) num3 * 1453595775;
            continue;
          case 12:
            ++index;
            num1 = (int) num3 * 878307860 ^ 1804503325;
            continue;
          case 13:
            str2 = Rules.\u206E⁪‮‌⁪⁬‏​‏‪‎​‬⁯⁬​⁯‍‭⁭​⁬⁫‬‪⁯‬⁯‏‏⁬‏⁪⁭‫‫‪⁭⁪‏‮(str1, "\n]");
            num1 = (int) num3 * -1527332714 ^ -1379193745;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = 1407843165;
      string str1;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1596603373)) % 7U)
        {
          case 1:
            str1 = Rules.\u202C‪⁪‭‌⁬⁯‏‬⁮⁫⁯‫⁬⁪⁫‪‮⁫⁯⁬⁮‏‪‮‎⁯‭‎‫‌⁬⁭⁫‮⁯⁪⁭​‎‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202A‍⁯‬‮‌‎​‎‍‬‪‏‪⁫⁪⁮⁯​‭‫⁭‬⁭⁮‬‫‫​⁮‮​⁬⁮‮‫‏‭⁫‮()));
            ++index;
            num1 = 370275748;
            continue;
          case 2:
            str1 = Rules.\u206E⁪‮‌⁪⁬‏​‏‪‎​‬⁯⁬​⁯‍‭⁭​⁬⁫‬‪⁯‬⁯‏‏⁬‏⁪⁭‫‫‪⁭⁪‏‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202A‍⁯‬‮‌‎​‎‍‬‪‏‪⁫⁪⁮⁯​‭‫⁭‬⁭⁮‬‫‫​⁮‮​⁬⁮‮‫‏‭⁫‮()));
            index = 1;
            num1 = (int) num2 * -1927888490 ^ -1744412028;
            continue;
          case 3:
            flag = index < this.RiskChances.Length;
            num1 = 1065190767;
            continue;
          case 4:
            str2 = Rules.\u206E⁪‮‌⁪⁬‏​‏‪‎​‬⁯⁬​⁯‍‭⁭​⁬⁫‬‪⁯‬⁯‏‏⁬‏⁪⁭‫‫‪⁭⁪‏‮(str1, " ]");
            num1 = (int) num2 * -1837050302 ^ 1219817659;
            continue;
          case 5:
            int num3 = !flag ? -150906076 : (num3 = -2017626659);
            num1 = num3 ^ (int) num2 * -610046960;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    static string \u206E⁬‏‭‌‭⁫​⁫⁭‪‌‬‬⁭‎‌‭‭⁯‮‍⁭‭⁬⁯‭​‭‬​‏⁬‬⁮‍‎⁫‌‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206E⁪‮‌⁪⁬‏​‏‪‎​‬⁯⁬​⁯‍‭⁭​⁬⁫‬‪⁯‬⁯‏‏⁬‏⁪⁭‫‫‪⁭⁪‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206F‪‮‮‫‫‮⁬⁭‪⁫⁮⁫​‍‫‬⁯‍⁫‫⁫⁪‍⁮‌‍⁯‎⁪‌⁭‌‭⁬⁪⁮‎‏⁮‮([In] object obj0) => obj0.ToString();

    static string \u202C‪⁪‭‌⁬⁯‏‬⁮⁫⁯‫⁬⁪⁫‪‮⁫⁯⁬⁮‏‪‮‎⁯‭‎‫‌⁬⁭⁫‮⁯⁪⁭​‎‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202A‍⁯‬‮‌‎​‎‍‬‪‏‪⁫⁪⁮⁯​‭‫⁭‬⁭⁮‬‫‫​⁮‮​⁬⁮‮‫‏‭⁫‮() => CultureInfo.InvariantCulture;
  }
}
