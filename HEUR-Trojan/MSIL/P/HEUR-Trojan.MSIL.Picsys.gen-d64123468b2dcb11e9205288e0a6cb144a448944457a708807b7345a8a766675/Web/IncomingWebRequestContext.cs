// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.IncomingWebRequestContext
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Net;
using System.Runtime.InteropServices;
using System.ServiceModel.Channels;

namespace System.ServiceModel.Web
{
  [ComVisible(false)]
  public class IncomingWebRequestContext
  {
    private static readonly string HttpGetMethod = "GET";
    private static readonly string HttpHeadMethod = "HEAD";
    private static readonly string HttpPutMethod = "PUT";
    private static readonly string HttpPostMethod = "POST";
    private static readonly string HttpDeleteMethod = "DELETE";
    private Collection<System.Net.Mime.ContentType> cachedAcceptHeaderElements;
    private string acceptHeaderWhenHeaderElementsCached;
    internal const string UriTemplateMatchResultsPropertyName = "UriTemplateMatchResults";
    private OperationContext operationContext;

    internal IncomingWebRequestContext(OperationContext operationContext) => this.operationContext = operationContext;

    public string Accept => this.EnsureMessageProperty().Headers[HttpRequestHeader.Accept];

    public long ContentLength => long.Parse(this.EnsureMessageProperty().Headers[HttpRequestHeader.ContentLength], (IFormatProvider) CultureInfo.InvariantCulture);

    public string ContentType => this.EnsureMessageProperty().Headers[HttpRequestHeader.ContentType];

    public IEnumerable<string> IfMatch
    {
      get
      {
        string header = this.MessageProperty.Headers[HttpRequestHeader.IfMatch];
        return !string.IsNullOrEmpty(header) ? (IEnumerable<string>) Utility.QuoteAwareStringSplit(header) : (IEnumerable<string>) null;
      }
    }

    public IEnumerable<string> IfNoneMatch
    {
      get
      {
        string header = this.MessageProperty.Headers[HttpRequestHeader.IfNoneMatch];
        return !string.IsNullOrEmpty(header) ? (IEnumerable<string>) Utility.QuoteAwareStringSplit(header) : (IEnumerable<string>) null;
      }
    }

    public DateTime? IfModifiedSince
    {
      get
      {
        string header = this.MessageProperty.Headers[HttpRequestHeader.IfModifiedSince];
        DateTime dtOut;
        return !string.IsNullOrEmpty(header) && HttpDateParse.ParseHttpDate(header, out dtOut) ? new DateTime?(dtOut) : new DateTime?();
      }
    }

    public DateTime? IfUnmodifiedSince
    {
      get
      {
        string header = this.MessageProperty.Headers[HttpRequestHeader.IfUnmodifiedSince];
        DateTime dtOut;
        return !string.IsNullOrEmpty(header) && HttpDateParse.ParseHttpDate(header, out dtOut) ? new DateTime?(dtOut) : new DateTime?();
      }
    }

    public WebHeaderCollection Headers => this.EnsureMessageProperty().Headers;

    public string Method => this.EnsureMessageProperty().Method;

    public UriTemplateMatch UriTemplateMatch
    {
      get => this.operationContext.IncomingMessageProperties.ContainsKey("UriTemplateMatchResults") ? this.operationContext.IncomingMessageProperties["UriTemplateMatchResults"] as UriTemplateMatch : (UriTemplateMatch) null;
      set => this.operationContext.IncomingMessageProperties["UriTemplateMatchResults"] = (object) value;
    }

    public string UserAgent => this.EnsureMessageProperty().Headers[HttpRequestHeader.UserAgent];

    private HttpRequestMessageProperty MessageProperty
    {
      get
      {
        if (this.operationContext.IncomingMessageProperties == null)
          return (HttpRequestMessageProperty) null;
        return !this.operationContext.IncomingMessageProperties.ContainsKey(HttpRequestMessageProperty.Name) ? (HttpRequestMessageProperty) null : this.operationContext.IncomingMessageProperties[HttpRequestMessageProperty.Name] as HttpRequestMessageProperty;
      }
    }

    public void CheckConditionalRetrieve(string entityTag) => this.CheckConditionalRetrieveWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtagFromString(entityTag));

    public void CheckConditionalRetrieve(int entityTag) => this.CheckConditionalRetrieveWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtag((object) entityTag));

    public void CheckConditionalRetrieve(long entityTag) => this.CheckConditionalRetrieveWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtag((object) entityTag));

    public void CheckConditionalRetrieve(Guid entityTag) => this.CheckConditionalRetrieveWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtag((object) entityTag));

    public void CheckConditionalRetrieve(DateTime lastModified)
    {
      if (!string.Equals(this.Method, IncomingWebRequestContext.HttpGetMethod, StringComparison.OrdinalIgnoreCase) && !string.Equals(this.Method, IncomingWebRequestContext.HttpHeadMethod, StringComparison.OrdinalIgnoreCase))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.ConditionalRetrieveGetAndHeadOnly, (object) this.Method)));
      }
      DateTime? ifModifiedSince = this.IfModifiedSince;
      if (!ifModifiedSince.HasValue)
        return;
      long ticks1 = lastModified.ToUniversalTime().Ticks;
      DateTime universalTime = ifModifiedSince.Value;
      universalTime = universalTime.ToUniversalTime();
      long ticks2 = universalTime.Ticks;
      if (ticks1 - ticks2 < 10000000L)
      {
        WebOperationContext.Current.OutgoingResponse.LastModified = lastModified;
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new WebFaultException(HttpStatusCode.NotModified));
      }
    }

    public void CheckConditionalUpdate(string entityTag) => this.CheckConditionalUpdateWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtagFromString(entityTag));

    public void CheckConditionalUpdate(int entityTag) => this.CheckConditionalUpdateWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtag((object) entityTag));

    public void CheckConditionalUpdate(long entityTag) => this.CheckConditionalUpdateWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtag((object) entityTag));

    public void CheckConditionalUpdate(Guid entityTag) => this.CheckConditionalUpdateWithValidatedEtag(OutgoingWebResponseContext.GenerateValidEtag((object) entityTag));

    public Collection<System.Net.Mime.ContentType> GetAcceptHeaderElements()
    {
      string accept = this.Accept;
      if (this.cachedAcceptHeaderElements == null || !string.Equals(this.acceptHeaderWhenHeaderElementsCached, accept, StringComparison.OrdinalIgnoreCase))
      {
        if (string.IsNullOrEmpty(accept))
        {
          this.cachedAcceptHeaderElements = new Collection<System.Net.Mime.ContentType>();
          this.acceptHeaderWhenHeaderElementsCached = accept;
        }
        else
        {
          List<System.Net.Mime.ContentType> list = new List<System.Net.Mime.ContentType>();
          int offset = 0;
          while (true)
          {
            System.Net.Mime.ContentType contentTypeOrNull;
            do
            {
              string contentType = Utility.QuoteAwareSubString(accept, ref offset);
              if (contentType != null)
                contentTypeOrNull = Utility.GetContentTypeOrNull(contentType);
              else
                goto label_7;
            }
            while (contentTypeOrNull == null);
            list.Add(contentTypeOrNull);
          }
label_7:
          list.Sort((IComparer<System.Net.Mime.ContentType>) new AcceptHeaderElementComparer());
          this.cachedAcceptHeaderElements = new Collection<System.Net.Mime.ContentType>((IList<System.Net.Mime.ContentType>) list);
          this.acceptHeaderWhenHeaderElementsCached = accept;
        }
      }
      return this.cachedAcceptHeaderElements;
    }

    private HttpRequestMessageProperty EnsureMessageProperty() => this.MessageProperty != null ? this.MessageProperty : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.HttpContextNoIncomingMessageProperty, (object) typeof (HttpRequestMessageProperty).Name)));

    private void CheckConditionalRetrieveWithValidatedEtag(string entityTag)
    {
      if (!string.Equals(this.Method, IncomingWebRequestContext.HttpGetMethod, StringComparison.OrdinalIgnoreCase) && !string.Equals(this.Method, IncomingWebRequestContext.HttpHeadMethod, StringComparison.OrdinalIgnoreCase))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.ConditionalRetrieveGetAndHeadOnly, (object) this.Method)));
      }
      if (string.IsNullOrEmpty(entityTag))
        return;
      string header = this.Headers[HttpRequestHeader.IfNoneMatch];
      if (!string.IsNullOrEmpty(header) && (IncomingWebRequestContext.IsWildCardCharacter(header) || IncomingWebRequestContext.DoesHeaderContainEtag(header, entityTag)))
      {
        WebOperationContext.Current.OutgoingResponse.ETag = entityTag;
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new WebFaultException(HttpStatusCode.NotModified));
      }
    }

    private void CheckConditionalUpdateWithValidatedEtag(string entityTag)
    {
      bool flag = string.Equals(this.Method, IncomingWebRequestContext.HttpPutMethod, StringComparison.OrdinalIgnoreCase);
      if (!flag && !string.Equals(this.Method, IncomingWebRequestContext.HttpPostMethod, StringComparison.OrdinalIgnoreCase) && !string.Equals(this.Method, IncomingWebRequestContext.HttpDeleteMethod, StringComparison.OrdinalIgnoreCase))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.ConditionalUpdatePutPostAndDeleteOnly, (object) this.Method)));
      }
      if (flag && string.IsNullOrEmpty(entityTag))
      {
        string header = this.Headers[HttpRequestHeader.IfNoneMatch];
        if (string.IsNullOrEmpty(header) || !IncomingWebRequestContext.IsWildCardCharacter(header))
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new WebFaultException(HttpStatusCode.PreconditionFailed));
      }
      else
      {
        string header = this.Headers[HttpRequestHeader.IfMatch];
        if (string.IsNullOrEmpty(header) || !IncomingWebRequestContext.IsWildCardCharacter(header) && !IncomingWebRequestContext.DoesHeaderContainEtag(header, entityTag))
        {
          WebOperationContext.Current.OutgoingResponse.ETag = entityTag;
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new WebFaultException(HttpStatusCode.PreconditionFailed));
        }
      }
    }

    private static bool DoesHeaderContainEtag(string header, string entityTag)
    {
      int offset = 0;
      string a;
      do
      {
        a = Utility.QuoteAwareSubString(header, ref offset);
        if (a == null)
          goto label_4;
      }
      while (!string.Equals(a, entityTag, StringComparison.Ordinal));
      return true;
label_4:
      return false;
    }

    private static bool IsWildCardCharacter(string header) => header.Trim() == "*";
  }
}
