// Decompiled with JetBrains decompiler
// Type: x95.w65
// Assembly: uc5uTlQKZwvBJeUwoIoxWYL1o3uBI8gaMfnT9AO, Version=9.8.6.0, Culture=neutral, PublicKeyToken=null
// MVID: 66B519F9-803D-46C9-8343-EC24850CA08A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-de0d24df79f99286da0234aa1536470d7596c53e531173d693d6ccc60b98e84c.exe

using \u003526;
using \u0036b3;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using X5s;

namespace x95
{
  internal sealed class w65 : Stream
  {
    private static readonly int \u0034tf = 4;
    private int AiG;
    private bool \u0031f9;
    private int \u003842;
    private int \u003969;
    private int Sm2;
    private int \u0036zn;
    private volatile Exception NK7;
    private bool C93;
    private bool \u0036NL;
    private Queue<int> \u003714;
    private Queue<int> vhw;
    private List<\u003647> \u0036X4;
    private object aec = new object();
    private object osJ = new object();
    private object I62 = new object();
    private AutoResetEvent \u00383f;
    private long \u003746;
    private long C27;
    private bool \u0033ve;
    private uint rxB;
    private Stream \u0031ME;
    private p59 \u003381;
    private int \u003288;
    private w65.\u0036u2 \u0035Zh = w65.\u0036u2.\u0023b | w65.\u0036u2.\u0023c;

    public w65([In] Stream obj0, [In] bool obj1)
      : this(obj0, ky4.L75, obj1)
    {
    }

    public w65([In] Stream obj0, [In] int obj1, [In] bool obj2)
    {
      if (obj1 < ky4.ifp || obj1 > ky4.L75)
        throw new ArgumentException(string.Format("blockSize={0} is out of range; must be between {1} and {2}", (object) obj1, (object) ky4.ifp, (object) ky4.L75), "blockSize");
      this.\u0031ME = obj0;
      this.\u003381 = this.\u0031ME.CanWrite ? new p59(this.\u0031ME) : throw new ArgumentException("The stream is not writable.", "output");
      this.\u003288 = obj1;
      this.\u0033ve = obj2;
      this.rxB = 0U;
      this.\u00352K(16);
      this.p73();
    }

    private void w59()
    {
      this.\u003714 = new Queue<int>();
      this.vhw = new Queue<int>();
      this.\u0036X4 = new List<\u003647>();
      int num = Math.Min(w65.\u0034tf * Environment.ProcessorCount, this.g8a());
      for (int index = 0; index < num; ++index)
      {
        this.\u0036X4.Add(new \u003647(index, this.\u003288));
        this.vhw.Enqueue(index);
      }
      this.\u00383f = new AutoResetEvent(false);
      this.\u0036zn = -1;
      this.\u003842 = -1;
      this.\u003969 = -1;
      this.Sm2 = -1;
    }

    [SpecialName]
    public int g8a() => this.AiG;

    [SpecialName]
    public void \u00352K([In] int obj0) => this.AiG = obj0 >= 4 ? obj0 : throw new ArgumentException("MaxWorkers", "Value must be 4 or greater.");

    void Stream.\u0032G6()
    {
      if (this.NK7 != null)
      {
        this.C93 = true;
        Exception nk7 = this.NK7;
        this.NK7 = (Exception) null;
        throw nk7;
      }
      if (this.C93 || this.\u0031ME == null)
        return;
      Stream stream = this.\u0031ME;
      try
      {
        this.A86(true);
      }
      finally
      {
        this.\u0031ME = (Stream) null;
        this.\u003381 = (p59) null;
      }
      if (this.\u0033ve)
        return;
      stream.Close();
    }

    private void A86([In] bool obj0)
    {
      if (this.\u0036NL)
        return;
      if (this.\u0036zn >= 0)
      {
        this.m92((object) this.\u0036X4[this.\u0036zn]);
        this.\u0036zn = -1;
      }
      if (obj0)
      {
        this.\u0031OO(true, false);
        this.DMP();
      }
      else
        this.\u0031OO(false, false);
    }

    void Stream.rBT()
    {
      if (this.\u0031ME == null)
        return;
      this.A86(false);
      this.\u003381.\u00333G();
      this.\u0031ME.Flush();
    }

    private void p73()
    {
      byte[] buffer = new byte[4]
      {
        (byte) 66,
        (byte) 90,
        (byte) 104,
        (byte) (48 + this.\u003288)
      };
      this.\u0031ME.Write(buffer, 0, buffer.Length);
    }

    private void DMP()
    {
      this.\u003381.\u003411((byte) 23);
      this.\u003381.\u003411((byte) 114);
      this.\u003381.\u003411((byte) 69);
      this.\u003381.\u003411((byte) 56);
      this.\u003381.\u003411((byte) 80);
      this.\u003381.\u003411((byte) 144);
      this.\u003381.V67(this.rxB);
      this.\u003381.\u0038o4();
    }

    void Stream.\u0039o7([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
      bool flag = false;
      if (this.\u0031ME == null)
        throw new IOException("the stream is not open");
      if (this.NK7 != null)
      {
        this.C93 = true;
        Exception nk7 = this.NK7;
        this.NK7 = (Exception) null;
        throw nk7;
      }
      if (obj1 < 0)
        throw new IndexOutOfRangeException(string.Format("offset ({0}) must be > 0", (object) obj1));
      if (obj2 < 0)
        throw new IndexOutOfRangeException(string.Format("count ({0}) must be > 0", (object) obj2));
      if (obj1 + obj2 > obj0.Length)
        throw new IndexOutOfRangeException(string.Format("offset({0}) count({1}) bLength({2})", (object) obj1, (object) obj2, (object) obj0.Length));
      if (obj2 == 0)
        return;
      if (!this.\u0031f9)
      {
        this.w59();
        this.\u0031f9 = true;
      }
      int num1 = 0;
      int num2 = obj2;
      do
      {
        this.\u0031OO(false, flag);
        flag = false;
        int index;
        if (this.\u0036zn >= 0)
          index = this.\u0036zn;
        else if (this.vhw.Count == 0)
        {
          flag = true;
          goto label_25;
        }
        else
        {
          index = this.vhw.Dequeue();
          ++this.\u003842;
        }
        \u003647 state = this.\u0036X4[index];
        state.\u0034wx = this.\u003842;
        int num3 = state.E79().fkB(obj0, obj1, num2);
        if (num3 != num2)
        {
          if (!ThreadPool.QueueUserWorkItem(new WaitCallback(this.m92), (object) state))
            throw new Exception("Cannot enqueue workitem");
          this.\u0036zn = -1;
          obj1 += num3;
        }
        else
          this.\u0036zn = index;
        num2 -= num3;
        num1 += num3;
label_25:;
      }
      while (num2 > 0);
      this.\u003746 += (long) num1;
    }

    private void \u0031OO([In] bool obj0, [In] bool obj1)
    {
      if (this.\u0036NL)
        return;
      this.\u0036NL = true;
      if (obj0 | obj1)
        this.\u00383f.WaitOne();
      do
      {
        int num1 = -1;
        int millisecondsTimeout = obj0 ? 200 : (obj1 ? -1 : 0);
        int index1;
        do
        {
          if (Monitor.TryEnter((object) this.\u003714, millisecondsTimeout))
          {
            index1 = -1;
            try
            {
              if (this.\u003714.Count > 0)
                index1 = this.\u003714.Dequeue();
            }
            finally
            {
              Monitor.Exit((object) this.\u003714);
            }
            if (index1 >= 0)
            {
              \u003647 obj = this.\u0036X4[index1];
              if (obj.\u0034wx != this.\u003969 + 1)
              {
                lock (this.\u003714)
                  this.\u003714.Enqueue(index1);
                if (num1 == index1)
                {
                  this.\u00383f.WaitOne();
                  num1 = -1;
                }
                else if (num1 == -1)
                  num1 = index1;
              }
              else
              {
                num1 = -1;
                p59 fth = obj.Fth;
                fth.\u00333G();
                MemoryStream memoryStream = obj.\u0034p7;
                memoryStream.Seek(0L, SeekOrigin.Begin);
                long num2 = 0;
                byte[] buffer = new byte[1024];
                int num3;
                while ((num3 = memoryStream.Read(buffer, 0, buffer.Length)) > 0)
                {
                  for (int index2 = 0; index2 < num3; ++index2)
                    this.\u003381.\u003411(buffer[index2]);
                  num2 += (long) num3;
                }
                if (fth.\u0031T2() > 0)
                  this.\u003381.SH2(fth.\u0031T2(), (uint) fth.\u0032d5());
                this.rxB = this.rxB << 1 | this.rxB >> 31;
                this.rxB ^= obj.E79().ceY();
                this.C27 += num2;
                fth.\u0036iP();
                this.\u003969 = obj.\u0034wx;
                obj.\u0034wx = -1;
                this.vhw.Enqueue(obj.\u0036Vk);
                if (millisecondsTimeout == -1)
                  millisecondsTimeout = 0;
              }
            }
          }
          else
            index1 = -1;
        }
        while (index1 >= 0);
      }
      while (obj0 && this.\u003969 != this.Sm2);
      int num = obj0 ? 1 : 0;
      this.\u0036NL = false;
    }

    private void m92([In] object obj0)
    {
      \u003647 obj = (\u003647) obj0;
      try
      {
        obj.E79().GFk();
        lock (this.aec)
        {
          if (obj.\u0034wx > this.Sm2)
            this.Sm2 = obj.\u0034wx;
        }
        lock (this.\u003714)
          this.\u003714.Enqueue(obj.\u0036Vk);
        this.\u00383f.Set();
      }
      catch (Exception ex)
      {
        lock (this.osJ)
        {
          if (this.NK7 == null)
            return;
          this.NK7 = ex;
        }
      }
    }

    [SpecialName]
    bool Stream.\u003375() => false;

    [SpecialName]
    bool Stream.vM3() => false;

    [SpecialName]
    bool Stream.\u00315e() => this.\u0031ME != null ? this.\u0031ME.CanWrite : throw new ObjectDisposedException("BZip2Stream");

    [SpecialName]
    long Stream.x64() => throw new NotImplementedException();

    [SpecialName]
    long Stream.b8E() => this.\u003746;

    [SpecialName]
    void Stream.\u0039G3([In] long obj0) => throw new NotImplementedException();

    long Stream.Xaf([In] long obj0, [In] SeekOrigin obj1) => throw new NotImplementedException();

    void Stream.\u0038Tk([In] long obj0) => throw new NotImplementedException();

    int Stream.S9Q([In] byte[] obj0, [In] int obj1, [In] int obj2) => throw new NotImplementedException();

    [System.Flags]
    private enum \u0036u2 : uint
    {
      \u0023a = 0,
      \u0023b = 1,
      \u0023c = 2,
      \u0023d = 4294967295, // 0xFFFFFFFF
    }
  }
}
