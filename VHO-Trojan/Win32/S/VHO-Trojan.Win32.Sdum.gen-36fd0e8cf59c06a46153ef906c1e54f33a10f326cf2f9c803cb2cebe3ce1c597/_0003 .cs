// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Ajlbzsprazkudye, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 074BCB68-5832-4D3E-2067-BA519DB97273
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-36fd0e8cf59c06a46153ef906c1e54f33a10f326cf2f9c803cb2cebe3ce1c597.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;

internal static class \u0003\u2002
{
  private static readonly uint[] \u0002;

  static \u0003\u2002()
  {
    uint[] numArray = new uint[5];
    // ISSUE: field reference
    RuntimeFieldHandle fldHandle = __fieldref (\u0006\u2006.\u0002);
    if (true)
      goto label_3;
label_1:
    if (false)
      return;
    \u0003\u2002.\u0002 = numArray;
    return;
label_3:
    RuntimeHelpers.InitializeArray((Array) numArray, fldHandle);
    goto label_1;
  }

  public static byte[] \u0002(string _param0)
  {
    MemoryStream memoryStream1 = _param0 != null ? new MemoryStream(_param0.Length * 4 / 5) : throw new Exception();
    MemoryStream memoryStream2;
    if (true)
      memoryStream2 = memoryStream1;
    try
    {
      if (true)
        goto label_7;
label_5:
      if (true)
        goto label_8;
label_6:
      int index1;
      uint num;
      foreach (char ch in _param0)
      {
        if (ch == 'z' && index1 == 0)
        {
          \u0003\u2002.\u0002((Stream) memoryStream2, num, 0);
        }
        else
        {
          if (ch < '!' || ch > 'u')
            throw new Exception();
          checked { num += (uint) ((long) \u0003\u2002.\u0002[index1] * (long) ((int) ch - 33)); }
          ++index1;
          if (index1 == 5)
          {
            \u0003\u2002.\u0002((Stream) memoryStream2, num, 0);
            index1 = 0;
            num = 0U;
          }
        }
      }
      if (index1 == 1)
        throw new Exception();
      if (index1 > 1)
      {
        for (int index2 = index1; index2 < 5; ++index2)
          checked { num += 84U * \u0003\u2002.\u0002[index2]; }
        \u0003\u2002.\u0002((Stream) memoryStream2, num, 5 - index1);
      }
      return memoryStream2.ToArray();
label_8:
      num = 0U;
      goto label_6;
label_7:
      index1 = 0;
      goto label_5;
    }
    finally
    {
      memoryStream2.Dispose();
    }
  }

  private static void \u0002(Stream _param0, uint _param1, int _param2)
  {
    Stream stream = _param0;
    if (true)
      ;
    int num1 = (int) _param1;
    if (true)
      ;
    int num2 = (int) (byte) ((uint) num1 >> 24);
    stream.WriteByte((byte) num2);
    int num3 = _param2;
    if (true)
      ;
    if (num3 == 3)
      return;
    _param0.WriteByte((byte) (_param1 >> 16));
    if (_param2 == 2)
      return;
    _param0.WriteByte((byte) (_param1 >> 8));
    if (_param2 == 1)
      return;
    _param0.WriteByte((byte) _param1);
  }
}
