// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: جY, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4509E19C-3738-48CD-AFB9-B77E11D0C93B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-64fa23f22cfa820eb89b80e1db1502fcaebcb66c1731e92f550c12ca940e8075.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board) => this.b = board;

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = 996794094;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1219904301)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 469363239 ^ 570709449;
            continue;
          case 2:
            this.b.DisableTurns = true;
            this.b.addWhite(4, 4, x);
            num1 = 778807011;
            continue;
          case 3:
            this.b.ClearBoard();
            num1 = (int) num2 * -1292549333 ^ -1896734291;
            continue;
          case 4:
            num1 = (int) num2 * -904452227 ^ 1911569843;
            continue;
          case 5:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1076536108 ^ 1225832024;
            continue;
          case 6:
            num1 = (int) num2 * -312586657 ^ -809999492;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * 420971640 ^ 840422392;
            continue;
          case 9:
            flag = x == Pieces.King;
            num1 = (int) num2 * -1650213916 ^ -1676707669;
            continue;
          case 10:
            int num3 = !flag ? 1777621982 : (num3 = 784704465);
            num1 = num3 ^ (int) num2 * 871674963;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1370947304;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -919102568)) % 9U)
        {
          case 0:
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 683833468 ^ -1308770419;
            continue;
          case 1:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 1271653647 ^ -1557496348;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 951494318 ^ 323365899;
            continue;
          case 3:
            num1 = (int) num2 * 448163620 ^ -623418742;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_1;
          case 6:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 213401185 ^ 346795315;
            continue;
          case 7:
            this.b.addBlack(2, 3, Pieces.Pawn);
            this.b.addBlack(4, 6, Pieces.Pawn);
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * -202642913 ^ 1482205432;
            continue;
          case 8:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 299797618 ^ -1762191928;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -1611202947;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -581901403)) % 10U)
        {
          case 0:
            num1 = (int) num2 * -752635380 ^ 1764264975;
            continue;
          case 1:
            num1 = (int) num2 * -1099769705 ^ -902928964;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * 1845568698 ^ 1376206163;
            continue;
          case 3:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 684351948 ^ -947532996;
            continue;
          case 4:
            this.b.addBlack(3, 7, Pieces.King);
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 204137696 ^ -1569763522;
            continue;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -2110136518 ^ -1536054186;
            continue;
          case 6:
            num1 = (int) num2 * -1835081643 ^ -1210058498;
            continue;
          case 7:
            goto label_1;
          case 8:
            goto label_3;
          case 9:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1909219134 ^ 563873615;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1938057359;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1152293104)) % 10U)
        {
          case 0:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1800437289 ^ -2047255403;
            continue;
          case 1:
            this.b.addBlack(4, 7, Pieces.King);
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -875326326 ^ -2019550753;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 1418973188 ^ -368156566;
            continue;
          case 4:
            num1 = (int) num2 * 216630460 ^ 1732602817;
            continue;
          case 5:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -1447861695 ^ 705702905;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1661940465 ^ 808796099;
            continue;
          case 8:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 2073073848 ^ 1187931273;
            continue;
          case 9:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -258816307 ^ -1834238801;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 567909070;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 825787778)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1666052825 ^ -711517786;
            continue;
          case 2:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 442420649 ^ -1325703545;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.b.ClearBoard();
            num1 = (int) num2 * -941699477 ^ 699371515;
            continue;
          case 5:
            num1 = (int) num2 * -2031252360 ^ -218283008;
            continue;
          case 6:
            this.b.addWhite(3, 1, Pieces.Pawn);
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * 1941699571 ^ 1261198745;
            continue;
          case 7:
            num1 = (int) num2 * -1449724480 ^ 1167649708;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCheck()
    {
      this.b.ClearBoard();
label_1:
      int num1 = -1865036235;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1949316074)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1492015709 ^ 634203538;
            continue;
          case 2:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -1590332491 ^ -2064857960;
            continue;
          case 3:
            num1 = (int) num2 * -2087337696 ^ -426143692;
            continue;
          case 4:
            num1 = (int) num2 * -1470267707 ^ -2030556396;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * 1631794775 ^ 551611789;
            continue;
          case 7:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1283759687 ^ 2101010972;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void CheckOnCastling()
    {
label_1:
      int num1 = -190034226;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1373325372)) % 14U)
        {
          case 0:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 1611004155 ^ 913208704;
            continue;
          case 1:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * 279361725 ^ -343018788;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 151397525 ^ 2106890965;
            continue;
          case 4:
            num1 = (int) num2 * 75985701 ^ 267069231;
            continue;
          case 5:
            num1 = (int) num2 * -569886281 ^ -674406416;
            continue;
          case 6:
            this.b.addBlack(7, 7, Pieces.Rook);
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 1537058033 ^ -303474189;
            continue;
          case 7:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 1041745299 ^ -1697471463;
            continue;
          case 8:
            goto label_3;
          case 9:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1878727437 ^ -170129996;
            continue;
          case 10:
            this.b.ClearBoard();
            num1 = (int) num2 * 728617731 ^ 636885925;
            continue;
          case 11:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1507953205 ^ 1029736028;
            continue;
          case 12:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -346570313 ^ 385336304;
            continue;
          case 13:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 609582071 ^ -1760329755;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }
  }
}
