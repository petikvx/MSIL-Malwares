// Decompiled with JetBrains decompiler
// Type: Winter_Sports_Rental.Controller
// Assembly: CLRIPropertyValueImpl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 890FDB68-4B7D-4035-A759-8056CF611D6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\Trojan.MSIL.Crypt.hwnc-988ec5d9bc02691882a3180947ee76fabc3629413f79a2e4768b9adb58ba432c.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;

namespace Winter_Sports_Rental
{
  public sealed class Controller : IController
  {
    private SimulationClock Timer;
    private BusyTable BusyTable;
    private FreeTable FreeTable;
    private List<IJob> JobQueue;
    private int _LastJobID;
    private int _LastPartitionID;
    private int _MemoryCap;

    private Controller()
    {
      this.Timer = SimulationClock.Instance;
      this.BusyTable = (BusyTable) BusyTable.Instance;
      this.BusyTable = this.BusyTable;
      this.FreeTable = (FreeTable) FreeTable.Instance;
      this.FreeTable = this.FreeTable;
      this.JobQueue = new List<IJob>();
      this._LastJobID = 0;
      this._LastPartitionID = 0;
      this._MemoryCap = 500;
    }

    public void IncrementTime()
    {
      this.Timer.IncrementClock();
      this.CleanPartitions();
      this.AssignJobs();
    }

    public void NewJob(int JobSize)
    {
      checked { ++this._LastJobID; }
      this.JobQueue.Add((IJob) new Job(this._LastJobID, JobSize));
    }

    public bool NewPartition(int PartitionSize)
    {
      if (PartitionSize > this.getAvailableMemory())
        return false;
      checked { ++this._LastPartitionID; }
      IPartition Partition = (IPartition) new Partition(this._LastPartitionID, PartitionSize);
      this.FreeTable.AddPartition(ref Partition);
      return true;
    }

    public List<IPartition> getPartitionList(Partition.State PartitionType)
    {
      List<IPartition> partitionList = new List<IPartition>();
      return PartitionType != Partition.State.Busy ? this.FreeTable.getPartitionList() : this.BusyTable.getPartitionList();
    }

    public int getMemoryCap() => this._MemoryCap;

    public int getAvailableMemory()
    {
      int num = 0;
      return checked (this.getMemoryCap() - num);
    }

    private void CleanPartitions()
    {
      try
      {
        try
        {
          foreach (IPartition partition in this.BusyTable.getPartitionList())
          {
            if (partition.getState() == Partition.State.Free || partition.getCurJob().isComplete())
            {
              if (partition.getCurJob() != null)
              {
                SimulationClock timer = this.Timer;
                IJob curJob = partition.getCurJob();
                ref IJob local = ref curJob;
                timer.Detach(ref local);
              }
              partition.ResetPartition();
              this.FreeTable.AddPartition(ref partition);
              this.BusyTable.RemovePartition(ref partition);
            }
          }
        }
        finally
        {
          List<IPartition>.Enumerator enumerator;
          enumerator.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.CleanPartitions();
        ProjectData.ClearProjectError();
      }
    }

    private void AssignJobs()
    {
      if (this.JobQueue.Count <= 0)
        return;
      try
      {
        foreach (IJob job in this.JobQueue)
          ;
      }
      finally
      {
        List<IJob>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    public List<IJob> getJobQueue() => this.JobQueue;

    public int getTime() => this.Timer.getTime();

    public static IController Instance
    {
      get
      {
        IController instance;
        return instance;
      }
    }
  }
}
