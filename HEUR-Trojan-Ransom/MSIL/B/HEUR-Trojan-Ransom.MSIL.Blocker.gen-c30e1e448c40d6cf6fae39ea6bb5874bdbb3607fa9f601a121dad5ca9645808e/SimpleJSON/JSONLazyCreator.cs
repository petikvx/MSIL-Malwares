// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: SingleArrayTypeIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 96646636-5181-465D-A45F-CFFED007E535
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c30e1e448c40d6cf6fae39ea6bb5874bdbb3607fa9f601a121dad5ca9645808e.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node = (JSONNode) null;
    private string m_Key = (string) null;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = -1185805439;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -240983072)) % 6U)
        {
          case 0:
            this.m_Node = aNode;
            num1 = (int) num2 * 542142817 ^ 287531150;
            continue;
          case 1:
            num1 = (int) num2 * 814073218 ^ 727058856;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          case 4:
            this.m_Key = (string) null;
            num1 = (int) num2 * -2005259877 ^ -50135134;
            continue;
          case 5:
            num1 = (int) num2 * 1027402358 ^ -309637779;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = -723732688;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1223588298)) % 4U)
        {
          case 1:
            this.m_Node = aNode;
            num1 = (int) num2 * -1359291085 ^ -1026108567;
            continue;
          case 2:
            num1 = (int) num2 * 422682225 ^ 180977477;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.m_Key = aKey;
    }

    private void Set(JSONNode aVal)
    {
label_1:
      int num1 = -18295302;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -567966104)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Node.Add(this.m_Key, aVal);
            num1 = -1352215727;
            continue;
          case 2:
            flag = this.m_Key == null;
            num1 = (int) num2 * 1032830248 ^ -1186453438;
            continue;
          case 4:
            num1 = (int) num2 * -1804073946 ^ -741495170;
            continue;
          case 5:
            int num3 = flag ? -1178520257 : (num3 = -930835611);
            num1 = num3 ^ (int) num2 * 973063792;
            continue;
          case 6:
            num1 = (int) num2 * -1599939923 ^ -110419624;
            continue;
          case 7:
            num1 = (int) num2 * 1022175656 ^ -1326505571;
            continue;
          case 8:
            num1 = (int) num2 * 768530897 ^ -1125814828;
            continue;
          case 9:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * -663626010 ^ -509234741;
            continue;
          case 10:
            num1 = (int) num2 * 967081434 ^ 571293170;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      this.m_Node = (JSONNode) null;
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -1421100446;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -546930120)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this);
              num1 = (int) num2 * -1436049653 ^ 733675247;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1451476716;
        JSONArray aVal;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 653134057)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              aVal = new JSONArray();
              num1 = (int) num2 * -1281308606 ^ 437577417;
              continue;
            case 2:
              aVal.Add(value);
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1283816599 ^ -643241109;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public override JSONNode this[string aKey]
    {
      get => (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
      set
      {
        JSONClass aVal = new JSONClass();
label_1:
        int num1 = -544984760;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1520983886)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              aVal.Add(aKey, value);
              num1 = (int) num2 * -1967109951 ^ -1800150885;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        this.Set((JSONNode) aVal);
      }
    }

    public override void Add(JSONNode aItem)
    {
label_1:
      int num1 = 1723478690;
      JSONArray aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 168833828)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -1244236908 ^ -1873737969;
            continue;
          case 2:
            aVal = new JSONArray();
            aVal.Add(aItem);
            num1 = (int) num2 * -900832358 ^ 1968061660;
            continue;
          case 3:
            num1 = (int) num2 * 1578616110 ^ 1909595485;
            continue;
          case 4:
            num1 = (int) num2 * 1737133126 ^ -1378794215;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 89038729;
      JSONClass aVal;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1524142474)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * -1060010143 ^ -676191606;
            continue;
          case 2:
            aVal = new JSONClass();
            num1 = (int) num2 * -1714142651 ^ -1477410202;
            continue;
          case 3:
            aVal.Add(aKey, aItem);
            num1 = (int) num2 * -1015020332 ^ -2128037447;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      if (b != null)
        goto label_4;
label_1:
      int num1 = 393021113;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 989519068)) % 4U)
        {
          case 1:
            flag = true;
            num1 = (int) num2 * -1381162099 ^ -2100720263;
            continue;
          case 2:
            goto label_4;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return flag;
label_4:
      flag = (object) a == b;
      num1 = 873043416;
      goto label_2;
    }

    public static bool operator !=(JSONLazyCreator a, object b)
    {
label_1:
      int num1 = 1308681307;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 564047460)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = !(a == b);
            num1 = (int) num2 * -2016170513 ^ -495496795;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override bool Equals(object obj)
    {
      bool flag1 = obj == null;
label_1:
      int num1 = 1105252658;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2085949097)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -275904131 ^ -1728548955;
            continue;
          case 1:
            flag2 = (object) this == obj;
            num1 = 1028450549;
            continue;
          case 2:
            goto label_1;
          case 3:
            flag2 = true;
            num1 = (int) num2 * -13053465 ^ -988374016;
            continue;
          case 5:
            int num3 = flag1 ? -1136070968 : (num3 = -1828195656);
            num1 = num3 ^ (int) num2 * -260572134;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return flag2;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = -346052723;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2082712204)) % 4U)
        {
          case 1:
            hashCode = base.GetHashCode();
            num1 = (int) num2 * -589711593 ^ 111975196;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -122347294 ^ -2104223742;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return hashCode;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1987014678;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1002906319)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -109441384 ^ -686444867;
            continue;
          case 1:
            str = "";
            num1 = (int) num2 * -1667318998 ^ 1809878505;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = -1407093254;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1623501129)) % 4U)
        {
          case 1:
            str = "";
            num1 = (int) num2 * 179294336 ^ 1980296949;
            continue;
          case 2:
            num1 = (int) num2 * 1138333483 ^ -343252611;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    public override int AsInt
    {
      get
      {
label_1:
        int num1 = -1208257850;
        int asInt;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -438108803)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -166148210 ^ 227102168;
              continue;
            case 2:
              goto label_1;
            case 3:
              this.Set((JSONNode) new JSONData(0));
              asInt = 0;
              num1 = (int) num2 * -1645127223 ^ -367613722;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asInt;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override float AsFloat
    {
      get
      {
label_1:
        int num1 = 289157918;
        JSONData aVal;
        float asFloat;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 929433316)) % 7U)
          {
            case 0:
              asFloat = 0.0f;
              num1 = (int) num2 * 446023601 ^ 1423373149;
              continue;
            case 1:
              aVal = new JSONData(0.0f);
              num1 = (int) num2 * -202733618 ^ 1062605242;
              continue;
            case 2:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 502019372 ^ 646681311;
              continue;
            case 4:
              num1 = (int) num2 * 651800752 ^ 1069157638;
              continue;
            case 5:
              goto label_1;
            case 6:
              num1 = (int) num2 * -1760294945 ^ 1469861663;
              continue;
            default:
              goto label_8;
          }
        }
label_8:
        return asFloat;
      }
      set
      {
label_1:
        int num1 = 1215635279;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1529373751)) % 3U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * -2049915422 ^ -1575234015;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override double AsDouble
    {
      get
      {
        this.Set((JSONNode) new JSONData(0.0));
label_1:
        int num1 = 1117151450;
        double asDouble;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1979394631)) % 4U)
          {
            case 0:
              num1 = (int) num2 * -777014144 ^ 419264156;
              continue;
            case 1:
              asDouble = 0.0;
              num1 = (int) num2 * 1970615356 ^ 1040748479;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return asDouble;
      }
      set
      {
label_1:
        int num1 = 1030440306;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1748763157)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) new JSONData(value));
              num1 = (int) num2 * 1657148893 ^ 932073028;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override bool AsBool
    {
      get
      {
        this.Set((JSONNode) new JSONData(false));
label_1:
        int num1 = -57722838;
        bool asBool;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1215107871)) % 4U)
          {
            case 0:
              asBool = false;
              num1 = (int) num2 * 1012399095 ^ 782770180;
              continue;
            case 2:
              goto label_1;
            case 3:
              num1 = (int) num2 * 373095193 ^ 700758746;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return asBool;
      }
      set
      {
        JSONData aVal = new JSONData(value);
label_1:
        int num1 = -1465491072;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1850485421)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 251813651 ^ -734433511;
              continue;
            case 2:
              goto label_3;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override JSONArray AsArray
    {
      get
      {
label_1:
        int num1 = 1312434847;
        JSONArray aVal;
        JSONArray asArray;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 551178579)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -2070531157 ^ 217998561;
              continue;
            case 3:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -734330710 ^ 1939498162;
              continue;
            case 4:
              aVal = new JSONArray();
              num1 = (int) num2 * 115318405 ^ -1120989076;
              continue;
            case 5:
              asArray = aVal;
              num1 = (int) num2 * -1423884324 ^ -2035508993;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asArray;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
label_1:
        int num1 = -1238393191;
        JSONClass aVal;
        JSONClass asObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1163616420)) % 6U)
          {
            case 0:
              asObject = aVal;
              num1 = (int) num2 * 1202666730 ^ 1654009109;
              continue;
            case 1:
              aVal = new JSONClass();
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1118952315 ^ -445881201;
              continue;
            case 2:
              num1 = (int) num2 * -858823973 ^ -1678645586;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * 1969430122 ^ -525228855;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return asObject;
      }
    }
  }
}
