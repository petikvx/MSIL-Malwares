// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CtextBox
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CtextBox : CControls
  {
    public CtextBox(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedTextBox control = (CEnhancedTextBox) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      string str;
      if (this.CRunner.CheckNextWord(place))
      {
        if (this.CRunner.nextWord(false, ref place).Value != ".")
        {
          str = "text";
        }
        else
        {
          ++place.WordI;
          str = this.CRunner.nextWord(true, ref place).Value;
        }
      }
      else
        str = "text";
      if (assign)
        ++place.WordI;
      if (this.CRunner.htSharedProperties.Contains((object) str))
        return this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals);
      switch (str)
      {
        case "multiline":
          if (!assign)
            return new MethodReturn(place, control.Multiline.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.Multiline = bool.Parse(runReturn1.vString);
          if (control.Multiline)
            control.ScrollBars = ScrollBars.Vertical;
          else
            control.ScrollBars = ScrollBars.None;
          return new MethodReturn(place);
        case "scrolltocaret":
          control.ScrollToCaret();
          return new MethodReturn(place);
        case "selectionstart":
          if (!assign)
            return new MethodReturn(place, control.SelectionStart.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          control.SelectionStart = (int) runReturn2.vDouble;
          return new MethodReturn(place);
        case "selectionlength":
          if (!assign)
            return new MethodReturn(place, control.SelectionLength.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          control.SelectionLength = (int) runReturn3.vDouble;
          return new MethodReturn(place);
        case "ignorekey":
          control.handled = true;
          return new MethodReturn(place);
        default:
          return new MethodReturn();
      }
    }

    public MethodReturn addTextBox(Place place, ref Locals locals)
    {
      Color black = Color.Black;
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn1.place;
      string lower2 = runReturn1.vString.ToLower(CRunner.cul);
      ++place.WordI;
      RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble1 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble2 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble3 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn2.place;
      int vDouble4 = (int) runReturn2.vDouble;
      ++place.WordI;
      runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn2.place;
      string vString = runReturn2.vString;
      Color color = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      ++place.WordI;
      CEnhancedTextBox cenhancedTextBox = new CEnhancedTextBox();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedTextBox, (CControls) this));
      cenhancedTextBox.name = lower2;
      cenhancedTextBox.Left = vDouble1;
      cenhancedTextBox.Top = vDouble2;
      cenhancedTextBox.Height = vDouble4;
      cenhancedTextBox.Width = vDouble3;
      cenhancedTextBox.Text = vString;
      cenhancedTextBox.BackColor = color;
      cenhancedTextBox.ForeColor = black;
      cenhancedTextBox.Visible = true;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedTextBox);
      this.AddEvents(cenhancedTextBox);
      return new MethodReturn(place);
    }

    private void AddEvents(CEnhancedTextBox txt)
    {
      if (this.CRunner.htSubs.Contains((object) (txt.name + "_keypress")))
        txt.KeyPress += new KeyPressEventHandler(this.KeyPress);
      if (this.CRunner.htSubs.Contains((object) (txt.name + "_gotfocus")))
        txt.GotFocus += new EventHandler(this.GotFocus);
      if (!this.CRunner.htSubs.Contains((object) (txt.name + "_lostfocus")))
        return;
      txt.LostFocus += new EventHandler(this.LostFocus);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedTextBox cenhancedTextBox = (CEnhancedTextBox) sender;
      switch (eventName)
      {
        case "keypress":
          cenhancedTextBox.KeyPress += new KeyPressEventHandler(this.KeyPress);
          break;
        case "gotfocus":
          cenhancedTextBox.GotFocus += new EventHandler(this.GotFocus);
          break;
        case "lostfocus":
          cenhancedTextBox.LostFocus += new EventHandler(this.LostFocus);
          break;
      }
    }

    private void KeyPress(object sender, KeyPressEventArgs e)
    {
      CEnhancedTextBox cenhancedTextBox = (CEnhancedTextBox) sender;
      cenhancedTextBox.handled = false;
      Place htSub = (Place) this.CRunner.htSubs[(object) (cenhancedTextBox.name + "_keypress")];
      this.CRunner.StartSub(htSub, new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedTextBox.name
        },
        {
          (object) ((Word) ((Line) this.CRunner.lines[htSub.LineI]).words[2]).Value,
          (object) e.KeyChar.ToString((IFormatProvider) CRunner.cul)
        }
      });
      if (!cenhancedTextBox.handled)
        return;
      e.Handled = true;
    }

    private void GotFocus(object sender, EventArgs e)
    {
      CEnhancedTextBox cenhancedTextBox = (CEnhancedTextBox) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedTextBox.name + "_gotfocus")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedTextBox.name
        }
      });
    }

    private void LostFocus(object sender, EventArgs e)
    {
      CEnhancedTextBox cenhancedTextBox = (CEnhancedTextBox) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedTextBox.name + "_lostfocus")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedTextBox.name
        }
      });
    }

    public void ShortAdd(string s)
    {
      CEnhancedTextBox cenhancedTextBox = new CEnhancedTextBox();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int Height;
      string Text;
      Color BackColor;
      Color ForeColor;
      bool myEnabled;
      bool myVisible;
      bool MultiLine;
      float FontSize;
      CBuildDesigner.TextBoxGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out Height, out Text, out BackColor, out ForeColor, out myEnabled, out myVisible, out MultiLine, out FontSize);
      cenhancedTextBox.name = Name.ToLower(CRunner.cul);
      cenhancedTextBox.Left = Left;
      cenhancedTextBox.Top = Top;
      cenhancedTextBox.Width = Width;
      cenhancedTextBox.Height = Height;
      cenhancedTextBox.Text = Text;
      cenhancedTextBox.BackColor = BackColor;
      cenhancedTextBox.ForeColor = ForeColor;
      cenhancedTextBox.Enabled = myEnabled;
      cenhancedTextBox.Visible = myVisible;
      cenhancedTextBox.Multiline = MultiLine;
      if (MultiLine)
        cenhancedTextBox.ScrollBars = ScrollBars.Vertical;
      cenhancedTextBox.Font = new Font(cenhancedTextBox.Font.Name, FontSize, cenhancedTextBox.Font.Style);
      this.CRunner.htControls.Add((object) cenhancedTextBox.name, (object) new WrapControl((object) cenhancedTextBox, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedTextBox);
      this.AddEvents(cenhancedTextBox);
    }
  }
}
