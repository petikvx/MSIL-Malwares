// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.Security.Cryptography;

namespace ICSharpCode.SharpZipLib.Encryption
{
  public sealed class PkzipClassicManaged : PkzipClassic
  {
    private byte[] \uE000;

    public override int BlockSize
    {
      get => 8;
      set
      {
        if (value != 8)
          throw new CryptographicException(\uE01B.\uE000("\uF5AC\uF582\uF581\uF58D\uF585\uF5CE\uF59D\uF587\uF594\uF58B\uF5CE\uF587\uF59D\uF5CE\uF587\uF580\uF598\uF58F\uF582\uF587\uF58A", 62958));
      }
    }

    public override KeySizes[] LegalKeySizes => new KeySizes[1]
    {
      new KeySizes(96, 96, 0)
    };

    public override void GenerateIV()
    {
    }

    public override KeySizes[] LegalBlockSizes => new KeySizes[1]
    {
      new KeySizes(8, 8, 0)
    };

    public override byte[] Key
    {
      get
      {
        if (this.\uE000 == null)
          this.GenerateKey();
        return (byte[]) this.\uE000.Clone();
      }
      set
      {
        if (value == null)
          throw new ArgumentNullException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
        this.\uE000 = value.Length == 12 ? (byte[]) value.Clone() : throw new CryptographicException(\uE01B.\uE000("\uE35F\uE371\uE36D\uE334\uE367\uE37D\uE36E\uE371\uE334\uE37D\uE367\uE334\uE37D\uE378\uE378\uE371\uE373\uE375\uE378", 58132));
      }
    }

    public override void GenerateKey()
    {
      this.\uE000 = new byte[12];
      new Random().NextBytes(this.\uE000);
    }

    public override ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)
    {
      this.\uE000 = rgbKey;
      return (ICryptoTransform) new \uE008(this.Key);
    }

    public override ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)
    {
      this.\uE000 = rgbKey;
      return (ICryptoTransform) new \uE009(this.Key);
    }
  }
}
