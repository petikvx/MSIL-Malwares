// Decompiled with JetBrains decompiler
// Type: ExceptionHandlingClauseOptions.Encoding
// Assembly: RegistrySecurity, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CE443B41-988D-4319-9971-B451F2F12365
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\UDS-DangerousObject.Multi.Generic-48aa8fd75e2be7fad2e1df3d81dc1653380a546611a53afbf6092ec9c104c324.exe

using HijriCalendar;
using InternalRM;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using SYSKIND;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using System.Xml.Linq;

namespace ExceptionHandlingClauseOptions
{
  [DesignerGenerated]
  public class Encoding : Form
  {
    private IContainer components;
    private List<CheckBox> chkDays;
    private Dictionary<CheckBox, int> ChkValues;
    private Dictionary<int, CheckBox> ValueChks;
    private List<CheckBox> chkFineSlots;
    private List<CheckBox> chkMainSlots;
    private Func.PlanRuleEditor ActiveEditor;
    private HashSet<string> ChangeSet;
    private bool prTextBlock;
    private bool prListBlock;
    private bool PriorityChange;

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.TableLayoutPanel1 = new TableLayoutPanel();
      this.OK_Button = new Button();
      this.Cancel_Button = new Button();
      this.tID = new TextBox();
      this.tFromPart = new TextBox();
      this.tToPart = new TextBox();
      this.cVias = new ComboBox();
      this.cFromTime = new ComboBox();
      this.cToTime = new ComboBox();
      this.dFromDate = new DateTimePicker();
      this.dToDate = new DateTimePicker();
      this.chkE = new CheckBox();
      this.ChkT = new CheckBox();
      this.ChkK = new CheckBox();
      this.ChkN = new CheckBox();
      this.ChkR = new CheckBox();
      this.ChkL = new CheckBox();
      this.ChkP = new CheckBox();
      this.bDel = new Button();
      this.bAll = new Button();
      this.chkManual = new CheckBox();
      this.ChkEnd = new CheckBox();
      this.Label1 = new Label();
      this.Label2 = new Label();
      this.ChkTime = new CheckBox();
      this.gSlotMain = new GroupBox();
      this.ChkDisabled = new CheckBox();
      this.ChkFix = new CheckBox();
      this.tmFix = new DateTimePicker();
      this.chkSK = new CheckBox();
      this.gSlotSelect = new GroupBox();
      this.bEnd = new Button();
      this.bCntr = new Button();
      this.bBeg = new Button();
      this.chkEndMain = new CheckBox();
      this.chkCntrMain = new CheckBox();
      this.chkBegMain = new CheckBox();
      this.bPost = new Button();
      this.chkPostMain = new CheckBox();
      this.bPre = new Button();
      this.chkPreMain = new CheckBox();
      this.nSpecial = new NumericUpDown();
      this.chkSpecial = new CheckBox();
      this.ChkStart = new CheckBox();
      this.chkAllSlots = new CheckBox();
      this.lRules = new ListBox();
      this.lPrs = new ListBox();
      this.bDelPr = new Button();
      this.bAddPr = new Button();
      this.ToolTip1 = new ToolTip(this.components);
      this.chkNext = new CheckBox();
      this.lPriority = new ListBox();
      this.bUp = new Button();
      this.bDown = new Button();
      this.lblPrg = new Label();
      this.TableLayoutPanel1.SuspendLayout();
      this.gSlotMain.SuspendLayout();
      this.gSlotSelect.SuspendLayout();
      this.nSpecial.BeginInit();
      this.SuspendLayout();
      this.TableLayoutPanel1.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.TableLayoutPanel1.ColumnCount = 2;
      this.TableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.Controls.Add((Control) this.OK_Button, 0, 0);
      this.TableLayoutPanel1.Controls.Add((Control) this.Cancel_Button, 1, 0);
      this.TableLayoutPanel1.Location = new Point(442, 480);
      this.TableLayoutPanel1.Name = "TableLayoutPanel1";
      this.TableLayoutPanel1.RowCount = 1;
      this.TableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.Size = new Size(146, 29);
      this.TableLayoutPanel1.TabIndex = 0;
      this.OK_Button.Anchor = AnchorStyles.None;
      this.OK_Button.Location = new Point(3, 3);
      this.OK_Button.Name = "OK_Button";
      this.OK_Button.Size = new Size(67, 23);
      this.OK_Button.TabIndex = 0;
      this.OK_Button.Text = "OK";
      this.Cancel_Button.Anchor = AnchorStyles.None;
      this.Cancel_Button.DialogResult = DialogResult.Cancel;
      this.Cancel_Button.Location = new Point(76, 3);
      this.Cancel_Button.Name = "Cancel_Button";
      this.Cancel_Button.Size = new Size(67, 23);
      this.Cancel_Button.TabIndex = 1;
      this.Cancel_Button.Text = "Cancel";
      this.tID.Location = new Point(249, 189);
      this.tID.Name = "tID";
      this.tID.Size = new Size(78, 20);
      this.tID.TabIndex = 1;
      this.tID.Text = "12/100/00948";
      this.ToolTip1.SetToolTip((Control) this.tID, "Saate ID");
      this.tFromPart.Location = new Point(333, 189);
      this.tFromPart.Name = "tFromPart";
      this.tFromPart.Size = new Size(40, 20);
      this.tFromPart.TabIndex = 2;
      this.tFromPart.Tag = (object) "12/100/00948";
      this.tFromPart.Text = "12345";
      this.ToolTip1.SetToolTip((Control) this.tFromPart, "Max osa nr");
      this.tToPart.Location = new Point(379, 189);
      this.tToPart.Name = "tToPart";
      this.tToPart.Size = new Size(40, 20);
      this.tToPart.TabIndex = 3;
      this.tToPart.Tag = (object) "12/100/00948";
      this.tToPart.Text = "12345";
      this.ToolTip1.SetToolTip((Control) this.tToPart, "Min osa nr");
      this.cVias.FormattingEnabled = true;
      this.cVias.Location = new Point(249, 117);
      this.cVias.Name = "cVias";
      this.cVias.Size = new Size(170, 21);
      this.cVias.TabIndex = 12;
      this.cFromTime.FormattingEnabled = true;
      this.cFromTime.Items.AddRange(new object[24]
      {
        (object) "06",
        (object) "07",
        (object) "08",
        (object) "09",
        (object) "10",
        (object) "11",
        (object) "12",
        (object) "13",
        (object) "14",
        (object) "15",
        (object) "16",
        (object) "17",
        (object) "18",
        (object) "19",
        (object) "20",
        (object) "21",
        (object) "22",
        (object) "23",
        (object) "00",
        (object) "01",
        (object) "02",
        (object) "03",
        (object) "04",
        (object) "05"
      });
      this.cFromTime.Location = new Point(329, 245);
      this.cFromTime.Name = "cFromTime";
      this.cFromTime.Size = new Size(41, 21);
      this.cFromTime.TabIndex = 13;
      this.cFromTime.Visible = false;
      this.cToTime.FormattingEnabled = true;
      this.cToTime.Items.AddRange(new object[24]
      {
        (object) "06",
        (object) "07",
        (object) "08",
        (object) "09",
        (object) "10",
        (object) "11",
        (object) "12",
        (object) "13",
        (object) "14",
        (object) "15",
        (object) "16",
        (object) "17",
        (object) "18",
        (object) "19",
        (object) "20",
        (object) "21",
        (object) "22",
        (object) "23",
        (object) "00",
        (object) "01",
        (object) "02",
        (object) "03",
        (object) "04",
        (object) "05"
      });
      this.cToTime.Location = new Point(377, 245);
      this.cToTime.Name = "cToTime";
      this.cToTime.Size = new Size(41, 21);
      this.cToTime.TabIndex = 14;
      this.cToTime.Visible = false;
      this.dFromDate.Format = DateTimePickerFormat.Short;
      this.dFromDate.Location = new Point(104, 245);
      this.dFromDate.Name = "dFromDate";
      this.dFromDate.Size = new Size(78, 20);
      this.dFromDate.TabIndex = 15;
      this.dToDate.Format = DateTimePickerFormat.Short;
      this.dToDate.Location = new Point(188, 245);
      this.dToDate.Name = "dToDate";
      this.dToDate.Size = new Size(78, 20);
      this.dToDate.TabIndex = 16;
      this.chkE.AutoSize = true;
      this.chkE.Location = new Point(12, 280);
      this.chkE.Name = "chkE";
      this.chkE.Size = new Size(33, 17);
      this.chkE.TabIndex = 19;
      this.chkE.Text = "E";
      this.chkE.UseVisualStyleBackColor = true;
      this.ChkT.AutoSize = true;
      this.ChkT.Location = new Point(51, 280);
      this.ChkT.Name = "ChkT";
      this.ChkT.Size = new Size(33, 17);
      this.ChkT.TabIndex = 20;
      this.ChkT.Text = "T";
      this.ChkT.UseVisualStyleBackColor = true;
      this.ChkK.AutoSize = true;
      this.ChkK.Location = new Point(90, 280);
      this.ChkK.Name = "ChkK";
      this.ChkK.Size = new Size(33, 17);
      this.ChkK.TabIndex = 21;
      this.ChkK.Text = "K";
      this.ChkK.UseVisualStyleBackColor = true;
      this.ChkN.AutoSize = true;
      this.ChkN.Location = new Point(129, 280);
      this.ChkN.Name = "ChkN";
      this.ChkN.Size = new Size(34, 17);
      this.ChkN.TabIndex = 22;
      this.ChkN.Text = "N";
      this.ChkN.UseVisualStyleBackColor = true;
      this.ChkR.AutoSize = true;
      this.ChkR.Location = new Point(168, 280);
      this.ChkR.Name = "ChkR";
      this.ChkR.Size = new Size(34, 17);
      this.ChkR.TabIndex = 23;
      this.ChkR.Text = "R";
      this.ChkR.UseVisualStyleBackColor = true;
      this.ChkL.AutoSize = true;
      this.ChkL.Location = new Point(207, 280);
      this.ChkL.Name = "ChkL";
      this.ChkL.Size = new Size(32, 17);
      this.ChkL.TabIndex = 24;
      this.ChkL.Text = "L";
      this.ChkL.UseVisualStyleBackColor = true;
      this.ChkP.AutoSize = true;
      this.ChkP.Location = new Point(246, 280);
      this.ChkP.Name = "ChkP";
      this.ChkP.Size = new Size(33, 17);
      this.ChkP.TabIndex = 25;
      this.ChkP.Text = "P";
      this.ChkP.UseVisualStyleBackColor = true;
      this.bDel.Location = new Point(335, 39);
      this.bDel.Name = "bDel";
      this.bDel.Size = new Size(41, 25);
      this.bDel.TabIndex = 6;
      this.bDel.Text = "reset";
      this.bDel.UseVisualStyleBackColor = true;
      this.bAll.Location = new Point(276, 39);
      this.bAll.Name = "bAll";
      this.bAll.Size = new Size(51, 25);
      this.bAll.TabIndex = 5;
      this.bAll.Text = "default";
      this.bAll.UseVisualStyleBackColor = true;
      this.chkManual.AutoSize = true;
      this.chkManual.Location = new Point(147, 19);
      this.chkManual.Name = "chkManual";
      this.chkManual.Size = new Size(95, 17);
      this.chkManual.TabIndex = 4;
      this.chkManual.Text = "Käsitsi käivitus";
      this.chkManual.UseVisualStyleBackColor = true;
      this.ChkEnd.AutoSize = true;
      this.ChkEnd.Location = new Point(270, 16);
      this.ChkEnd.Name = "ChkEnd";
      this.ChkEnd.Size = new Size(51, 17);
      this.ChkEnd.TabIndex = 1;
      this.ChkEnd.Text = "lõpus";
      this.ChkEnd.UseVisualStyleBackColor = true;
      this.Label1.AutoSize = true;
      this.Label1.Location = new Point(288, 281);
      this.Label1.Name = "Label1";
      this.Label1.Size = new Size(47, 13);
      this.Label1.TabIndex = 29;
      this.Label1.Text = "prioriteet";
      this.Label2.AutoSize = true;
      this.Label2.Location = new Point(9, 248);
      this.Label2.Name = "Label2";
      this.Label2.Size = new Size(97, 13);
      this.Label2.TabIndex = 30;
      this.Label2.Text = "Kuupäevadel (k.a.)";
      this.ChkTime.AutoSize = true;
      this.ChkTime.Location = new Point(284, 247);
      this.ChkTime.Name = "ChkTime";
      this.ChkTime.Size = new Size(43, 17);
      this.ChkTime.TabIndex = 18;
      this.ChkTime.Text = "Kell";
      this.ChkTime.UseVisualStyleBackColor = true;
      this.gSlotMain.Controls.Add((Control) this.ChkDisabled);
      this.gSlotMain.Controls.Add((Control) this.ChkFix);
      this.gSlotMain.Controls.Add((Control) this.tmFix);
      this.gSlotMain.Controls.Add((Control) this.chkSK);
      this.gSlotMain.Controls.Add((Control) this.gSlotSelect);
      this.gSlotMain.Controls.Add((Control) this.chkAllSlots);
      this.gSlotMain.Controls.Add((Control) this.chkManual);
      this.gSlotMain.Controls.Add((Control) this.bAll);
      this.gSlotMain.Controls.Add((Control) this.bDel);
      this.gSlotMain.Location = new Point(12, 306);
      this.gSlotMain.Name = "gSlotMain";
      this.gSlotMain.Size = new Size(408, 203);
      this.gSlotMain.TabIndex = 31;
      this.gSlotMain.TabStop = false;
      this.gSlotMain.Text = "Lubatud";
      this.ChkDisabled.AutoSize = true;
      this.ChkDisabled.ForeColor = Color.Red;
      this.ChkDisabled.Location = new Point(147, 42);
      this.ChkDisabled.Name = "ChkDisabled";
      this.ChkDisabled.Size = new Size(97, 17);
      this.ChkDisabled.TabIndex = 40;
      this.ChkDisabled.Text = "MÄÄRAMATA!";
      this.ChkDisabled.UseVisualStyleBackColor = true;
      this.ChkDisabled.Visible = false;
      this.ChkFix.AutoSize = true;
      this.ChkFix.Location = new Point(17, 42);
      this.ChkFix.Name = "ChkFix";
      this.ChkFix.Size = new Size(42, 17);
      this.ChkFix.TabIndex = 45;
      this.ChkFix.Text = "kell";
      this.ChkFix.UseVisualStyleBackColor = true;
      this.tmFix.Format = DateTimePickerFormat.Time;
      this.tmFix.Location = new Point(57, 39);
      this.tmFix.Name = "tmFix";
      this.tmFix.ShowUpDown = true;
      this.tmFix.Size = new Size(68, 20);
      this.tmFix.TabIndex = 46;
      this.tmFix.Visible = false;
      this.chkSK.AutoSize = true;
      this.chkSK.Location = new Point(276, 19);
      this.chkSK.Name = "chkSK";
      this.chkSK.Size = new Size(95, 17);
      this.chkSK.TabIndex = 14;
      this.chkSK.Text = "saatekava ajal";
      this.chkSK.UseVisualStyleBackColor = true;
      this.gSlotSelect.Controls.Add((Control) this.bEnd);
      this.gSlotSelect.Controls.Add((Control) this.bCntr);
      this.gSlotSelect.Controls.Add((Control) this.bBeg);
      this.gSlotSelect.Controls.Add((Control) this.chkEndMain);
      this.gSlotSelect.Controls.Add((Control) this.chkCntrMain);
      this.gSlotSelect.Controls.Add((Control) this.chkBegMain);
      this.gSlotSelect.Controls.Add((Control) this.bPost);
      this.gSlotSelect.Controls.Add((Control) this.chkPostMain);
      this.gSlotSelect.Controls.Add((Control) this.bPre);
      this.gSlotSelect.Controls.Add((Control) this.chkPreMain);
      this.gSlotSelect.Controls.Add((Control) this.nSpecial);
      this.gSlotSelect.Controls.Add((Control) this.chkSpecial);
      this.gSlotSelect.Controls.Add((Control) this.ChkStart);
      this.gSlotSelect.Controls.Add((Control) this.ChkEnd);
      this.gSlotSelect.Location = new Point(6, 68);
      this.gSlotSelect.Name = "gSlotSelect";
      this.gSlotSelect.Size = new Size(396, 129);
      this.gSlotSelect.TabIndex = 5;
      this.gSlotSelect.TabStop = false;
      this.gSlotSelect.Text = "Valikuliselt";
      this.gSlotSelect.Visible = false;
      this.bEnd.Enabled = false;
      this.bEnd.Location = new Point(270, 102);
      this.bEnd.Name = "bEnd";
      this.bEnd.Size = new Size(100, 20);
      this.bEnd.TabIndex = 44;
      this.bEnd.UseVisualStyleBackColor = true;
      this.bCntr.Enabled = false;
      this.bCntr.Location = new Point(141, 102);
      this.bCntr.Name = "bCntr";
      this.bCntr.Size = new Size(100, 20);
      this.bCntr.TabIndex = 43;
      this.bCntr.UseVisualStyleBackColor = true;
      this.bBeg.Enabled = false;
      this.bBeg.Location = new Point(11, 102);
      this.bBeg.Name = "bBeg";
      this.bBeg.Size = new Size(100, 20);
      this.bBeg.TabIndex = 42;
      this.bBeg.UseVisualStyleBackColor = true;
      this.chkEndMain.AutoSize = true;
      this.chkEndMain.Location = new Point(270, 85);
      this.chkEndMain.Name = "chkEndMain";
      this.chkEndMain.Size = new Size(97, 17);
      this.chkEndMain.TabIndex = 41;
      this.chkEndMain.Text = "saateosa lõpus";
      this.chkEndMain.UseVisualStyleBackColor = true;
      this.chkCntrMain.AutoSize = true;
      this.chkCntrMain.Location = new Point(141, 85);
      this.chkCntrMain.Name = "chkCntrMain";
      this.chkCntrMain.Size = new Size(103, 17);
      this.chkCntrMain.TabIndex = 40;
      this.chkCntrMain.Text = "saateosa keskel";
      this.chkCntrMain.UseVisualStyleBackColor = true;
      this.chkBegMain.AutoSize = true;
      this.chkBegMain.Location = new Point(11, 85);
      this.chkBegMain.Name = "chkBegMain";
      this.chkBegMain.Size = new Size(108, 17);
      this.chkBegMain.TabIndex = 39;
      this.chkBegMain.Text = "saateosa alguses";
      this.chkBegMain.UseVisualStyleBackColor = true;
      this.bPost.Enabled = false;
      this.bPost.Location = new Point(270, 59);
      this.bPost.Name = "bPost";
      this.bPost.Size = new Size(100, 20);
      this.bPost.TabIndex = 38;
      this.bPost.UseVisualStyleBackColor = true;
      this.chkPostMain.AutoSize = true;
      this.chkPostMain.Location = new Point(270, 42);
      this.chkPostMain.Name = "chkPostMain";
      this.chkPostMain.Size = new Size(80, 17);
      this.chkPostMain.TabIndex = 37;
      this.chkPostMain.Text = "peale pausi";
      this.chkPostMain.UseVisualStyleBackColor = true;
      this.bPre.Enabled = false;
      this.bPre.Location = new Point(11, 59);
      this.bPre.Name = "bPre";
      this.bPre.Size = new Size(100, 20);
      this.bPre.TabIndex = 36;
      this.bPre.UseVisualStyleBackColor = true;
      this.chkPreMain.AutoSize = true;
      this.chkPreMain.Location = new Point(11, 42);
      this.chkPreMain.Name = "chkPreMain";
      this.chkPreMain.Size = new Size(78, 17);
      this.chkPreMain.TabIndex = 30;
      this.chkPreMain.Text = "enne pausi";
      this.chkPreMain.UseVisualStyleBackColor = true;
      this.nSpecial.Location = new Point(218, 14);
      this.nSpecial.Maximum = new Decimal(new int[4]
      {
        99,
        0,
        0,
        0
      });
      this.nSpecial.Name = "nSpecial";
      this.nSpecial.Size = new Size(40, 20);
      this.nSpecial.TabIndex = 29;
      this.nSpecial.Visible = false;
      this.chkSpecial.AutoSize = true;
      this.chkSpecial.Location = new Point(141, 16);
      this.chkSpecial.Name = "chkSpecial";
      this.chkSpecial.Size = new Size(73, 17);
      this.chkSpecial.TabIndex = 1;
      this.chkSpecial.Text = "special id:";
      this.chkSpecial.UseVisualStyleBackColor = true;
      this.ChkStart.AutoSize = true;
      this.ChkStart.Location = new Point(11, 19);
      this.ChkStart.Name = "ChkStart";
      this.ChkStart.Size = new Size(62, 17);
      this.ChkStart.TabIndex = 1;
      this.ChkStart.Text = "alguses";
      this.ChkStart.UseVisualStyleBackColor = true;
      this.chkAllSlots.AutoSize = true;
      this.chkAllSlots.Location = new Point(17, 19);
      this.chkAllSlots.Name = "chkAllSlots";
      this.chkAllSlots.Size = new Size(93, 17);
      this.chkAllSlots.TabIndex = 0;
      this.chkAllSlots.Text = "alati saate ajal";
      this.chkAllSlots.UseVisualStyleBackColor = true;
      this.lRules.FormattingEnabled = true;
      this.lRules.Location = new Point(12, 8);
      this.lRules.Name = "lRules";
      this.lRules.Size = new Size(407, 108);
      this.lRules.TabIndex = 32;
      this.lPrs.FormattingEnabled = true;
      this.lPrs.Location = new Point(12, 117);
      this.lPrs.Name = "lPrs";
      this.lPrs.Size = new Size(231, 121);
      this.lPrs.TabIndex = 33;
      this.bDelPr.Location = new Point(249, 215);
      this.bDelPr.Name = "bDelPr";
      this.bDelPr.Size = new Size(36, 23);
      this.bDelPr.TabIndex = 34;
      this.bDelPr.Text = "- id";
      this.bDelPr.UseVisualStyleBackColor = true;
      this.bAddPr.Location = new Point(291, 215);
      this.bAddPr.Name = "bAddPr";
      this.bAddPr.Size = new Size(36, 23);
      this.bAddPr.TabIndex = 35;
      this.bAddPr.Text = "+ id";
      this.bAddPr.UseVisualStyleBackColor = true;
      this.chkNext.AutoSize = true;
      this.chkNext.Location = new Point(333, 219);
      this.chkNext.Name = "chkNext";
      this.chkNext.Size = new Size(85, 17);
      this.chkNext.TabIndex = 36;
      this.chkNext.Text = "enne saadet";
      this.chkNext.UseVisualStyleBackColor = true;
      this.lPriority.FormattingEnabled = true;
      this.lPriority.Location = new Point(426, 10);
      this.lPriority.Name = "lPriority";
      this.lPriority.Size = new Size(161, 459);
      this.lPriority.TabIndex = 37;
      this.bUp.Image = (Image) ICustomAttributeProvider.up;
      this.bUp.Location = new Point(334, 272);
      this.bUp.Name = "bUp";
      this.bUp.Size = new Size(36, 30);
      this.bUp.TabIndex = 38;
      this.bUp.UseVisualStyleBackColor = true;
      this.bDown.Image = (Image) ICustomAttributeProvider.down;
      this.bDown.Location = new Point(382, 272);
      this.bDown.Name = "bDown";
      this.bDown.Size = new Size(36, 30);
      this.bDown.TabIndex = 39;
      this.bDown.UseVisualStyleBackColor = true;
      this.lblPrg.AutoSize = true;
      this.lblPrg.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 186);
      this.lblPrg.Location = new Point(249, 163);
      this.lblPrg.Name = "lblPrg";
      this.lblPrg.Size = new Size(13, 16);
      this.lblPrg.TabIndex = 40;
      this.lblPrg.Text = "-";
      this.AcceptButton = (IButtonControl) this.OK_Button;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.Cancel_Button;
      this.ClientSize = new Size(600, 520);
      this.Controls.Add((Control) this.lblPrg);
      this.Controls.Add((Control) this.bDown);
      this.Controls.Add((Control) this.bUp);
      this.Controls.Add((Control) this.lPriority);
      this.Controls.Add((Control) this.chkNext);
      this.Controls.Add((Control) this.bAddPr);
      this.Controls.Add((Control) this.bDelPr);
      this.Controls.Add((Control) this.lPrs);
      this.Controls.Add((Control) this.lRules);
      this.Controls.Add((Control) this.Label1);
      this.Controls.Add((Control) this.gSlotMain);
      this.Controls.Add((Control) this.Label2);
      this.Controls.Add((Control) this.ChkP);
      this.Controls.Add((Control) this.ChkL);
      this.Controls.Add((Control) this.ChkR);
      this.Controls.Add((Control) this.ChkN);
      this.Controls.Add((Control) this.ChkK);
      this.Controls.Add((Control) this.ChkT);
      this.Controls.Add((Control) this.chkE);
      this.Controls.Add((Control) this.ChkTime);
      this.Controls.Add((Control) this.dToDate);
      this.Controls.Add((Control) this.dFromDate);
      this.Controls.Add((Control) this.cToTime);
      this.Controls.Add((Control) this.cFromTime);
      this.Controls.Add((Control) this.cVias);
      this.Controls.Add((Control) this.tToPart);
      this.Controls.Add((Control) this.tFromPart);
      this.Controls.Add((Control) this.tID);
      this.Controls.Add((Control) this.TableLayoutPanel1);
      this.FormBorderStyle = FormBorderStyle.FixedDialog;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = "Dialog1";
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterParent;
      this.Text = "Dialog1";
      this.TableLayoutPanel1.ResumeLayout(false);
      this.gSlotMain.ResumeLayout(false);
      this.gSlotMain.PerformLayout();
      this.gSlotSelect.ResumeLayout(false);
      this.gSlotSelect.PerformLayout();
      this.nSpecial.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("TableLayoutPanel1")]
    internal virtual TableLayoutPanel TableLayoutPanel1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button OK_Button
    {
      get => this._OK_Button;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.OK_Button_Click);
        Button okButton1 = this._OK_Button;
        if (okButton1 != null)
          okButton1.Click -= eventHandler;
        this._OK_Button = value;
        Button okButton2 = this._OK_Button;
        if (okButton2 == null)
          return;
        okButton2.Click += eventHandler;
      }
    }

    internal virtual Button Cancel_Button
    {
      get => this._Cancel_Button;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Cancel_Button_Click);
        Button cancelButton1 = this._Cancel_Button;
        if (cancelButton1 != null)
          cancelButton1.Click -= eventHandler;
        this._Cancel_Button = value;
        Button cancelButton2 = this._Cancel_Button;
        if (cancelButton2 == null)
          return;
        cancelButton2.Click += eventHandler;
      }
    }

    internal virtual TextBox tID
    {
      get => this._tID;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.pr_changed);
        TextBox tId1 = this._tID;
        if (tId1 != null)
          tId1.TextChanged -= eventHandler;
        this._tID = value;
        TextBox tId2 = this._tID;
        if (tId2 == null)
          return;
        tId2.TextChanged += eventHandler;
      }
    }

    internal virtual TextBox tFromPart
    {
      get => this._tFromPart;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.pr_changed);
        TextBox tFromPart1 = this._tFromPart;
        if (tFromPart1 != null)
          tFromPart1.TextChanged -= eventHandler;
        this._tFromPart = value;
        TextBox tFromPart2 = this._tFromPart;
        if (tFromPart2 == null)
          return;
        tFromPart2.TextChanged += eventHandler;
      }
    }

    internal virtual TextBox tToPart
    {
      get => this._tToPart;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.pr_changed);
        TextBox tToPart1 = this._tToPart;
        if (tToPart1 != null)
          tToPart1.TextChanged -= eventHandler;
        this._tToPart = value;
        TextBox tToPart2 = this._tToPart;
        if (tToPart2 == null)
          return;
        tToPart2.TextChanged += eventHandler;
      }
    }

    internal virtual ComboBox cVias
    {
      get => this._cVias;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.file_changed);
        ComboBox cVias1 = this._cVias;
        if (cVias1 != null)
          cVias1.SelectedIndexChanged -= eventHandler;
        this._cVias = value;
        ComboBox cVias2 = this._cVias;
        if (cVias2 == null)
          return;
        cVias2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual ComboBox cFromTime
    {
      get => this._cFromTime;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.time_changed);
        ComboBox cFromTime1 = this._cFromTime;
        if (cFromTime1 != null)
          cFromTime1.SelectedIndexChanged -= eventHandler;
        this._cFromTime = value;
        ComboBox cFromTime2 = this._cFromTime;
        if (cFromTime2 == null)
          return;
        cFromTime2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual ComboBox cToTime
    {
      get => this._cToTime;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.time_changed);
        ComboBox cToTime1 = this._cToTime;
        if (cToTime1 != null)
          cToTime1.SelectedIndexChanged -= eventHandler;
        this._cToTime = value;
        ComboBox cToTime2 = this._cToTime;
        if (cToTime2 == null)
          return;
        cToTime2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual DateTimePicker dFromDate
    {
      get => this._dFromDate;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.date_changed);
        DateTimePicker dFromDate1 = this._dFromDate;
        if (dFromDate1 != null)
          dFromDate1.ValueChanged -= eventHandler;
        this._dFromDate = value;
        DateTimePicker dFromDate2 = this._dFromDate;
        if (dFromDate2 == null)
          return;
        dFromDate2.ValueChanged += eventHandler;
      }
    }

    internal virtual DateTimePicker dToDate
    {
      get => this._dToDate;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.date_changed);
        DateTimePicker dToDate1 = this._dToDate;
        if (dToDate1 != null)
          dToDate1.ValueChanged -= eventHandler;
        this._dToDate = value;
        DateTimePicker dToDate2 = this._dToDate;
        if (dToDate2 == null)
          return;
        dToDate2.ValueChanged += eventHandler;
      }
    }

    internal virtual CheckBox chkE
    {
      get => this._chkE;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkE1 = this._chkE;
        if (chkE1 != null)
          chkE1.CheckedChanged -= eventHandler;
        this._chkE = value;
        CheckBox chkE2 = this._chkE;
        if (chkE2 == null)
          return;
        chkE2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkT
    {
      get => this._ChkT;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkT1 = this._ChkT;
        if (chkT1 != null)
          chkT1.CheckedChanged -= eventHandler;
        this._ChkT = value;
        CheckBox chkT2 = this._ChkT;
        if (chkT2 == null)
          return;
        chkT2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkK
    {
      get => this._ChkK;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkK1 = this._ChkK;
        if (chkK1 != null)
          chkK1.CheckedChanged -= eventHandler;
        this._ChkK = value;
        CheckBox chkK2 = this._ChkK;
        if (chkK2 == null)
          return;
        chkK2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkN
    {
      get => this._ChkN;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkN1 = this._ChkN;
        if (chkN1 != null)
          chkN1.CheckedChanged -= eventHandler;
        this._ChkN = value;
        CheckBox chkN2 = this._ChkN;
        if (chkN2 == null)
          return;
        chkN2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkR
    {
      get => this._ChkR;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkR1 = this._ChkR;
        if (chkR1 != null)
          chkR1.CheckedChanged -= eventHandler;
        this._ChkR = value;
        CheckBox chkR2 = this._ChkR;
        if (chkR2 == null)
          return;
        chkR2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkL
    {
      get => this._ChkL;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkL1 = this._ChkL;
        if (chkL1 != null)
          chkL1.CheckedChanged -= eventHandler;
        this._ChkL = value;
        CheckBox chkL2 = this._ChkL;
        if (chkL2 == null)
          return;
        chkL2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkP
    {
      get => this._ChkP;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.day_changed);
        CheckBox chkP1 = this._ChkP;
        if (chkP1 != null)
          chkP1.CheckedChanged -= eventHandler;
        this._ChkP = value;
        CheckBox chkP2 = this._ChkP;
        if (chkP2 == null)
          return;
        chkP2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox ChkEnd
    {
      get => this._ChkEnd;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.slot_changed);
        CheckBox chkEnd1 = this._ChkEnd;
        if (chkEnd1 != null)
          chkEnd1.CheckedChanged -= eventHandler;
        this._ChkEnd = value;
        CheckBox chkEnd2 = this._ChkEnd;
        if (chkEnd2 == null)
          return;
        chkEnd2.CheckedChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Label1")]
    internal virtual Label Label1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label2")]
    internal virtual Label Label2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual CheckBox ChkTime
    {
      get => this._ChkTime;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.ChkTime_CheckedChanged);
        CheckBox chkTime1 = this._ChkTime;
        if (chkTime1 != null)
          chkTime1.CheckedChanged -= eventHandler;
        this._ChkTime = value;
        CheckBox chkTime2 = this._ChkTime;
        if (chkTime2 == null)
          return;
        chkTime2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox chkManual
    {
      get => this._chkManual;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.slot_changed);
        CheckBox chkManual1 = this._chkManual;
        if (chkManual1 != null)
          chkManual1.CheckedChanged -= eventHandler;
        this._chkManual = value;
        CheckBox chkManual2 = this._chkManual;
        if (chkManual2 == null)
          return;
        chkManual2.CheckedChanged += eventHandler;
      }
    }

    internal virtual Button bDel
    {
      get => this._bDel;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bDel_Click);
        Button bDel1 = this._bDel;
        if (bDel1 != null)
          bDel1.Click -= eventHandler;
        this._bDel = value;
        Button bDel2 = this._bDel;
        if (bDel2 == null)
          return;
        bDel2.Click += eventHandler;
      }
    }

    internal virtual Button bAll
    {
      get => this._bAll;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bAll_Click);
        Button bAll1 = this._bAll;
        if (bAll1 != null)
          bAll1.Click -= eventHandler;
        this._bAll = value;
        Button bAll2 = this._bAll;
        if (bAll2 == null)
          return;
        bAll2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("gSlotMain")]
    internal virtual GroupBox gSlotMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual NumericUpDown nSpecial
    {
      get => this._nSpecial;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.nSpecial_ValueChanged);
        NumericUpDown nSpecial1 = this._nSpecial;
        if (nSpecial1 != null)
          nSpecial1.ValueChanged -= eventHandler;
        this._nSpecial = value;
        NumericUpDown nSpecial2 = this._nSpecial;
        if (nSpecial2 == null)
          return;
        nSpecial2.ValueChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("gSlotSelect")]
    internal virtual GroupBox gSlotSelect { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual CheckBox ChkStart
    {
      get => this._ChkStart;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.slot_changed);
        CheckBox chkStart1 = this._ChkStart;
        if (chkStart1 != null)
          chkStart1.CheckedChanged -= eventHandler;
        this._ChkStart = value;
        CheckBox chkStart2 = this._ChkStart;
        if (chkStart2 == null)
          return;
        chkStart2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox chkSpecial
    {
      get => this._chkSpecial;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.chkSpecial_CheckedChanged);
        CheckBox chkSpecial1 = this._chkSpecial;
        if (chkSpecial1 != null)
          chkSpecial1.CheckedChanged -= eventHandler;
        this._chkSpecial = value;
        CheckBox chkSpecial2 = this._chkSpecial;
        if (chkSpecial2 == null)
          return;
        chkSpecial2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox chkAllSlots
    {
      get => this._chkAllSlots;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.chkAllSlots_CheckedChanged);
        CheckBox chkAllSlots1 = this._chkAllSlots;
        if (chkAllSlots1 != null)
          chkAllSlots1.CheckedChanged -= eventHandler;
        this._chkAllSlots = value;
        CheckBox chkAllSlots2 = this._chkAllSlots;
        if (chkAllSlots2 == null)
          return;
        chkAllSlots2.CheckedChanged += eventHandler;
      }
    }

    internal virtual CheckBox chkSK
    {
      get => this._chkSK;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.chkSK_CheckedChanged);
        CheckBox chkSk1 = this._chkSK;
        if (chkSk1 != null)
          chkSk1.CheckedChanged -= eventHandler;
        this._chkSK = value;
        CheckBox chkSk2 = this._chkSK;
        if (chkSk2 == null)
          return;
        chkSk2.CheckedChanged += eventHandler;
      }
    }

    internal virtual ListBox lRules
    {
      get => this._lRules;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.lRules_SelectedIndexChanged);
        ListBox lRules1 = this._lRules;
        if (lRules1 != null)
          lRules1.SelectedIndexChanged -= eventHandler;
        this._lRules = value;
        ListBox lRules2 = this._lRules;
        if (lRules2 == null)
          return;
        lRules2.SelectedIndexChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ToolTip1")]
    internal virtual ToolTip ToolTip1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ListBox lPrs
    {
      get => this._lPrs;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.lPrs_SelectedIndexChanged);
        ListBox lPrs1 = this._lPrs;
        if (lPrs1 != null)
          lPrs1.SelectedIndexChanged -= eventHandler;
        this._lPrs = value;
        ListBox lPrs2 = this._lPrs;
        if (lPrs2 == null)
          return;
        lPrs2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual Button bDelPr
    {
      get => this._bDelPr;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bDelPr_Click);
        Button bDelPr1 = this._bDelPr;
        if (bDelPr1 != null)
          bDelPr1.Click -= eventHandler;
        this._bDelPr = value;
        Button bDelPr2 = this._bDelPr;
        if (bDelPr2 == null)
          return;
        bDelPr2.Click += eventHandler;
      }
    }

    internal virtual Button bAddPr
    {
      get => this._bAddPr;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bAddPr_Click);
        Button bAddPr1 = this._bAddPr;
        if (bAddPr1 != null)
          bAddPr1.Click -= eventHandler;
        this._bAddPr = value;
        Button bAddPr2 = this._bAddPr;
        if (bAddPr2 == null)
          return;
        bAddPr2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("bPre")]
    internal virtual Button bPre { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("bPost")]
    internal virtual Button bPost { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkPostMain")]
    internal virtual CheckBox chkPostMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkPreMain")]
    internal virtual CheckBox chkPreMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("bEnd")]
    internal virtual Button bEnd { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("bCntr")]
    internal virtual Button bCntr { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("bBeg")]
    internal virtual Button bBeg { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkEndMain")]
    internal virtual CheckBox chkEndMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkCntrMain")]
    internal virtual CheckBox chkCntrMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkBegMain")]
    internal virtual CheckBox chkBegMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual CheckBox ChkFix
    {
      get => this._ChkFix;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.ChkFix_CheckedChanged);
        CheckBox chkFix1 = this._ChkFix;
        if (chkFix1 != null)
          chkFix1.CheckedChanged -= eventHandler;
        this._ChkFix = value;
        CheckBox chkFix2 = this._ChkFix;
        if (chkFix2 == null)
          return;
        chkFix2.CheckedChanged += eventHandler;
      }
    }

    internal virtual DateTimePicker tmFix
    {
      get => this._tmFix;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tmFix_ValueChanged);
        DateTimePicker tmFix1 = this._tmFix;
        if (tmFix1 != null)
          tmFix1.ValueChanged -= eventHandler;
        this._tmFix = value;
        DateTimePicker tmFix2 = this._tmFix;
        if (tmFix2 == null)
          return;
        tmFix2.ValueChanged += eventHandler;
      }
    }

    internal virtual CheckBox chkNext
    {
      get => this._chkNext;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.chkNext_CheckedChanged);
        CheckBox chkNext1 = this._chkNext;
        if (chkNext1 != null)
          chkNext1.CheckedChanged -= eventHandler;
        this._chkNext = value;
        CheckBox chkNext2 = this._chkNext;
        if (chkNext2 == null)
          return;
        chkNext2.CheckedChanged += eventHandler;
      }
    }

    internal virtual ListBox lPriority
    {
      get => this._lPriority;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.lPriority_SelectedIndexChanged);
        ListBox lPriority1 = this._lPriority;
        if (lPriority1 != null)
          lPriority1.SelectedIndexChanged -= eventHandler;
        this._lPriority = value;
        ListBox lPriority2 = this._lPriority;
        if (lPriority2 == null)
          return;
        lPriority2.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual Button bUp
    {
      get => this._bUp;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bUp_Click);
        Button bUp1 = this._bUp;
        if (bUp1 != null)
          bUp1.Click -= eventHandler;
        this._bUp = value;
        Button bUp2 = this._bUp;
        if (bUp2 == null)
          return;
        bUp2.Click += eventHandler;
      }
    }

    internal virtual Button bDown
    {
      get => this._bDown;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.bDown_Click);
        Button bDown1 = this._bDown;
        if (bDown1 != null)
          bDown1.Click -= eventHandler;
        this._bDown = value;
        Button bDown2 = this._bDown;
        if (bDown2 == null)
          return;
        bDown2.Click += eventHandler;
      }
    }

    internal virtual CheckBox ChkDisabled
    {
      get => this._ChkDisabled;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.ChkDisabled_CheckedChanged);
        CheckBox chkDisabled1 = this._ChkDisabled;
        if (chkDisabled1 != null)
          chkDisabled1.CheckedChanged -= eventHandler;
        this._ChkDisabled = value;
        CheckBox chkDisabled2 = this._ChkDisabled;
        if (chkDisabled2 == null)
          return;
        chkDisabled2.CheckedChanged += eventHandler;
      }
    }

    [field: AccessedThroughProperty("lblPrg")]
    internal virtual Label lblPrg { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public Encoding()
    {
      this.Load += new EventHandler(this.Dialog1_Load);
      this.ChkValues = new Dictionary<CheckBox, int>();
      this.ValueChks = new Dictionary<int, CheckBox>();
      this.chkFineSlots = new List<CheckBox>();
      this.chkMainSlots = new List<CheckBox>();
      this.ChangeSet = new HashSet<string>();
      this.InitializeComponent();
      this.chkDays = new List<CheckBox>()
      {
        this.chkE,
        this.ChkT,
        this.ChkK,
        this.ChkN,
        this.ChkR,
        this.ChkL,
        this.ChkP
      };
      this.InitSlotChecks();
    }

    private void Dialog1_Load(object sender, EventArgs e)
    {
      this.lRules.SelectedIndex = checked (this.lRules.Items.Count - 1);
      this.SyncPriority();
    }

    private void OK_Button_Click(object sender, EventArgs e)
    {
      if (this.WarnDisable())
        return;
      this.DialogResult = DialogResult.OK;
      this.SaveRule();
      this.Close();
    }

    private void Cancel_Button_Click(object sender, EventArgs e)
    {
      this.DialogResult = DialogResult.Cancel;
      this.ChangeSet.Clear();
      this.Close();
    }

    internal void FillPriority(List<string> l)
    {
      ListBox lPriority = this.lPriority;
      lPriority.BeginUpdate();
      lPriority.Items.Clear();
      try
      {
        foreach (string str in l)
          lPriority.Items.Add((object) str);
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      lPriority.EndUpdate();
      this.PriorityChange = false;
    }

    internal void GetPriorities(List<string> l)
    {
      if (!this.PriorityChange)
        return;
      l.Clear();
      try
      {
        foreach (object obj in this.lPriority.Items)
        {
          string str = Conversions.ToString(obj);
          l.Add(str);
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    private void lRules_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.lRules.SelectedIndex < 0)
        return;
      if (this.ActiveEditor != null)
      {
        if (this.WarnDisable())
          return;
        this.SaveRule();
      }
      this.ActiveEditor = (Func.PlanRuleEditor) this.lRules.SelectedItem;
      string str = string.Empty;
      this.prTextBlock = true;
      this.lPrs.Items.Clear();
      this.tID.Text = string.Empty;
      this.tFromPart.Text = string.Empty;
      this.tToPart.Text = string.Empty;
      this.prTextBlock = false;
      this.chkNext.Enabled = true;
      this.ChkTime.Checked = false;
      this.gSlotMain.Visible = false;
      this.cFromTime.SelectedIndex = 0;
      this.cToTime.SelectedIndex = 23;
      this.tmFix.Value = DateAndTime.Now.Date.AddHours(6.0);
      try
      {
        foreach (XAttribute attribute in this.ActiveEditor.Rule.Source.Attributes())
        {
          string empty = string.Empty;
          if (!this.ActiveEditor.Changes.TryGetValue(attribute.Name.LocalName, out empty))
            empty = attribute.Value;
          string localName = attribute.Name.LocalName;
          // ISSUE: reference to a compiler-generated method
          switch (ChannelServicesData.IWellKnownStringEqualityComparer.ComputeStringHash(localName))
          {
            case 925853980:
              if (Operators.CompareString(localName, "timeselect", false) == 0)
                break;
              goto default;
            case 1040727111:
              if (Operators.CompareString(localName, "prselect", false) == 0)
                break;
              goto default;
            case 1191156800:
              if (Operators.CompareString(localName, "choose", false) == 0)
                break;
              goto default;
            case 1564253156:
              if (Operators.CompareString(localName, "time", false) == 0)
              {
                string[] source = empty.Split('-');
                this.cFromTime.Text = Conversion.Val(source[0]).ToString("00");
                this.cToTime.Text = ((IEnumerable<string>) source).Count<string>() <= 1 ? this.cFromTime.Text : Conversion.Val(source[1]).ToString("00");
                this.ChkTime.Checked = true;
                goto default;
              }
              else
                goto default;
            case 1598976039:
              if (Operators.CompareString(localName, "pr", false) == 0)
              {
                if (empty.Contains(","))
                {
                  string[] strArray = empty.Split(',');
                  int index = 0;
                  while (index < strArray.Length)
                  {
                    this.lPrs.Items.Add((object) strArray[index].Trim());
                    checked { ++index; }
                  }
                }
                else
                  this.lPrs.Items.Add((object) empty.Trim());
                this.lPrs.SelectedIndex = checked (this.lPrs.Items.Count - 1);
                goto default;
              }
              else
                goto default;
            case 1888831345:
              if (Operators.CompareString(localName, "slot", false) == 0)
              {
                this.SetSlotControl(empty);
                this.chkNext.Enabled = false;
                goto default;
              }
              else
                goto default;
            case 2767164497:
              TimeSpan result1;
              if (Operators.CompareString(localName, "fixtime", false) == 0 && TimeSpan.TryParse(empty, out result1))
              {
                this.tmFix.Value = DateAndTime.Now.Date + result1;
                goto default;
              }
              else
                goto default;
            case 2867484483:
              if (Operators.CompareString(localName, "file", false) == 0)
              {
                if (!this.cVias.Items.Contains((object) empty))
                  this.cVias.Items.Add((object) empty);
                this.cVias.SelectedItem = (object) empty;
                goto default;
              }
              else
                goto default;
            case 3564297305:
              if (Operators.CompareString(localName, "date", false) == 0)
              {
                string[] source = empty.Split('-');
                DateTime result2;
                if (!DateTime.TryParse(source[0], out result2))
                  result2 = DateAndTime.Today;
                this.dFromDate.Value = result2;
                DateTime result3;
                if (((IEnumerable<string>) source).Count<string>() == 1 || !DateTime.TryParse(source[1], out result3))
                  result3 = result2;
                this.dToDate.Value = result3;
                goto default;
              }
              else
                goto default;
            case 3830391293:
              if (Operators.CompareString(localName, "day", false) == 0)
              {
                str = empty;
                goto default;
              }
              else
                goto default;
            default:
label_39:
              continue;
          }
          this.chkNext.Checked = attribute.Value.StartsWith("next");
          goto label_39;
        }
      }
      finally
      {
        IEnumerator<XAttribute> enumerator;
        enumerator?.Dispose();
      }
      try
      {
        foreach (CheckBox chkDay in this.chkDays)
          chkDay.Checked = str.Contains(chkDay.Text);
      }
      finally
      {
        List<CheckBox>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.ChangeSet.Clear();
    }

    private void lPrs_SelectedIndexChanged(object sender, EventArgs e)
    {
      if (this.prListBlock || this.lPrs.SelectedIndex < 0)
        return;
      this.prTextBlock = true;
      this.tID.Text = string.Empty;
      this.tFromPart.Text = string.Empty;
      this.tToPart.Text = string.Empty;
      string str1 = this.lPrs.SelectedItem.ToString();
      if (str1.Contains("/"))
      {
        try
        {
          string[] source = str1.Split('/');
          this.tID.Text = string.Format("{0}/{1}/{2}", (object) source[0], (object) source[1], (object) source[2]);
          this.lblPrg.Text = Func.Guide.Find(this.tID.Text);
          if (((IEnumerable<string>) source).Count<string>() > 3)
          {
            if (source[3].Contains("-"))
            {
              string[] strArray = source[3].Split('-');
              TextBox tFromPart = this.tFromPart;
              double num = Conversion.Val(strArray[0]);
              string str2 = num.ToString();
              tFromPart.Text = str2;
              TextBox tToPart = this.tToPart;
              num = Conversion.Val(strArray[1]);
              string str3 = num.ToString();
              tToPart.Text = str3;
            }
            else
              this.tFromPart.Text = Conversion.Val(source[3]).ToString();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        this.tID.Text = str1;
        this.lblPrg.Text = str1;
      }
      this.prTextBlock = false;
      this.SetTitle();
    }

    private void SetTitle() => this.Text = string.Format("{0} ({1})", (object) this.cVias.Text, (object) this.lblPrg.Text);

    private void SaveRule()
    {
      if (this.ChangeSet.Count == 0)
        return;
      try
      {
        foreach (string change in this.ChangeSet)
        {
          // ISSUE: reference to a compiler-generated method
          switch (ChannelServicesData.IWellKnownStringEqualityComparer.ComputeStringHash(change))
          {
            case 1555467752:
              if (Operators.CompareString(change, "next", false) == 0)
              {
                this.ActiveEditor.Changes["timeselect"] = this.chkNext.Checked ? "next" : (string) null;
                this.ActiveEditor.Changes["choose"] = this.chkNext.Checked ? "nextsk" : (string) null;
                break;
              }
              break;
            case 1564253156:
              if (Operators.CompareString(change, "time", false) == 0)
              {
                this.ActiveEditor.Changes[change] = !this.ChkTime.Checked ? (string) null : string.Format("{0}-{1}", RuntimeHelpers.GetObjectValue(this.cFromTime.SelectedItem), RuntimeHelpers.GetObjectValue(this.cToTime.SelectedItem));
                break;
              }
              break;
            case 1598976039:
              if (Operators.CompareString(change, "pr", false) == 0)
              {
                List<string> values = new List<string>();
                try
                {
                  foreach (object obj in this.lPrs.Items)
                  {
                    string str = RuntimeHelpers.GetObjectValue(obj).ToString();
                    if (!string.IsNullOrWhiteSpace(str))
                      values.Add(str);
                  }
                }
                finally
                {
                  IEnumerator enumerator;
                  if (enumerator is IDisposable)
                    (enumerator as IDisposable).Dispose();
                }
                this.ActiveEditor.Changes[change] = values.Count <= 0 ? (string) null : string.Join(",", (IEnumerable<string>) values);
                break;
              }
              break;
            case 1888831345:
              if (Operators.CompareString(change, "slot", false) == 0)
              {
                this.GetSlotValues(change);
                break;
              }
              break;
            case 2498028297:
              if (Operators.CompareString(change, "priority", false) == 0)
                break;
              break;
            case 2767164497:
              if (Operators.CompareString(change, "fixtime", false) == 0)
              {
                this.ActiveEditor.Changes[change] = !this.ChkFix.Checked ? (string) null : this.tmFix.Value.ToString("HH:mm:ss");
                break;
              }
              break;
            case 2867484483:
              if (Operators.CompareString(change, "file", false) == 0)
              {
                this.ActiveEditor.Changes[change] = this.cVias.Text;
                break;
              }
              break;
            case 3564297305:
              if (Operators.CompareString(change, "date", false) == 0)
              {
                if (DateTime.Compare(this.dToDate.Value, this.dFromDate.Value) < 0)
                  this.dToDate.Value = this.dFromDate.Value;
                this.ActiveEditor.Changes[change] = string.Format("{0:dd.MM.yyyy}-{1:dd.MM.yyyy}", (object) this.dFromDate.Value, (object) this.dToDate.Value);
                break;
              }
              break;
            case 3830391293:
              if (Operators.CompareString(change, "day", false) == 0)
              {
                string empty = string.Empty;
                try
                {
                  foreach (CheckBox chkDay in this.chkDays)
                  {
                    if (chkDay.Checked)
                      empty += chkDay.Text;
                  }
                }
                finally
                {
                  List<CheckBox>.Enumerator enumerator;
                  enumerator.Dispose();
                }
                this.ActiveEditor.Changes[change] = empty.Length <= 0 ? (string) null : empty;
                break;
              }
              break;
          }
        }
      }
      finally
      {
        HashSet<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.OK_Button.Enabled = true;
      this.ChangeSet.Clear();
      this.ActiveEditor = (Func.PlanRuleEditor) null;
    }

    private void bAll_Click(object sender, EventArgs e) => this.ActivateRule(true);

    private void bDel_Click(object sender, EventArgs e)
    {
      this.ActivateRule(false);
      this.chkManual.Checked = false;
    }

    private void ActivateRule(bool state)
    {
      try
      {
        foreach (CheckBox key in this.ChkValues.Keys)
          key.Checked = false;
      }
      finally
      {
        Dictionary<CheckBox, int>.KeyCollection.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.chkAllSlots.Checked = state;
    }

    private void InitSlotChecks()
    {
      this.SetupCheckValue(this.chkManual, 1, false);
      this.SetupCheckValue(this.chkAllSlots, 2, true);
      this.SetupCheckValue(this.ChkDisabled, 38, true);
      this.SetupCheckValue(this.chkSK, 30, true);
      this.SetupCheckValue(this.ChkFix, 31, true);
      this.SetupCheckValue(this.ChkStart, 3, false);
      this.SetupSlotFineControl(this.chkPreMain, this.bPre, 4);
      this.SetupSlotFineControl(this.chkPostMain, this.bPost, 5);
      this.SetupSlotFineControl(this.chkBegMain, this.bBeg, 6);
      this.SetupSlotFineControl(this.chkCntrMain, this.bCntr, 7);
      this.SetupSlotFineControl(this.chkEndMain, this.bEnd, 8);
      this.SetupCheckValue(this.ChkEnd, 9, false);
      this.SetupCheckValue(this.chkSpecial, 1000, false);
    }

    private void SetupCheckValue(CheckBox chk, int value, bool MainList)
    {
      this.ChkValues[chk] = value;
      this.ValueChks[value] = chk;
      if (!MainList)
        return;
      this.chkMainSlots.Add(chk);
    }

    private void SetupSlotFineControl(CheckBox c, Button b, int v)
    {
      c.Tag = (object) b;
      b.Tag = (object) c;
      this.ChkValues[c] = v;
      this.chkFineSlots.Add(c);
      c.CheckedChanged += new EventHandler(this.chkFine_CheckedChanged);
      b.Click += new EventHandler(this.bFine_Click);
    }

    private void SetSlotControl(string setup)
    {
      this.chkAllSlots.Checked = true;
      try
      {
        foreach (CheckBox key in this.ChkValues.Keys)
          key.Checked = false;
      }
      finally
      {
        Dictionary<CheckBox, int>.KeyCollection.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (string.IsNullOrWhiteSpace(setup))
        return;
      string[] slots = setup.Split(',');
      string[] strArray = slots;
      int index = 0;
      while (index < strArray.Length)
      {
        int key = int.Parse(strArray[index]);
        if (this.ValueChks.ContainsKey(key))
          this.ValueChks[key].Checked = true;
        if (key > 999)
        {
          this.chkSpecial.Checked = true;
          this.nSpecial.Value = new Decimal(checked (key - 1000));
        }
        checked { ++index; }
      }
      try
      {
        foreach (CheckBox chkFineSlot in this.chkFineSlots)
        {
          Button tag = (Button) chkFineSlot.Tag;
          chkFineSlot.Checked = AssemblyFileVersionAttribute.Forms.Dialog3.InitialValue(slots, this.ChkValues[chkFineSlot], tag);
        }
      }
      finally
      {
        List<CheckBox>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.gSlotMain.Visible = true;
    }

    private void GetSlotValues(string key)
    {
      List<string> stringList = new List<string>();
      this.GetSlotValue(this.chkManual, stringList);
      if (this.chkAllSlots.Checked)
        this.GetSlotValue(this.chkAllSlots, stringList);
      else if (this.chkSK.Checked)
        this.GetSlotValue(this.chkSK, stringList);
      else if (this.ChkFix.Checked)
      {
        this.GetSlotValue(this.ChkFix, stringList);
      }
      else
      {
        this.GetSlotValue(this.chkSK, stringList);
        this.GetSlotValue(this.ChkStart, stringList);
        try
        {
          foreach (CheckBox chkFineSlot in this.chkFineSlots)
          {
            if (chkFineSlot.Checked)
              this.GetSlotGroupValue(chkFineSlot, stringList);
          }
        }
        finally
        {
          List<CheckBox>.Enumerator enumerator;
          enumerator.Dispose();
        }
        this.GetSlotValue(this.ChkEnd, stringList);
        this.GetSlotValue(this.chkSpecial, stringList);
      }
      if (stringList.Count > 0)
        this.ActiveEditor.Changes[key] = string.Join(",", (IEnumerable<string>) stringList);
      else
        this.ActiveEditor.Changes[key] = string.Empty;
    }

    private void GetSlotGroupValue(CheckBox chk, List<string> values)
    {
      Button tag = (Button) chk.Tag;
      AssemblyFileVersionAttribute.Forms.Dialog3.ValueSlots(this.ChkValues[chk], tag.Text, values);
    }

    private void GetSlotValue(CheckBox chk, List<string> lst)
    {
      if (!chk.Checked)
        return;
      lst.Add(this.ChkValues[chk].ToString());
    }

    private void pr_changed(object sender, EventArgs e)
    {
      if (this.prTextBlock || this.lPrs.SelectedIndex < 0)
        return;
      this.prListBlock = true;
      this.ChangeSet.Add("pr");
      string str = this.tID.Text;
      int num1 = checked ((int) Math.Round(Conversion.Val(this.tFromPart.Text)));
      if (str.Contains("/") && num1 > 0)
      {
        int num2 = checked ((int) Math.Round(Conversion.Val(this.tToPart.Text)));
        if (num2 > num1)
          str = str + "/" + num1.ToString() + "-" + num2.ToString();
        else
          str = str + "/" + num1.ToString("0000");
      }
      this.lPrs.Items[this.lPrs.SelectedIndex] = (object) str;
      this.prListBlock = false;
    }

    private void bDelPr_Click(object sender, EventArgs e)
    {
      if (this.lPrs.SelectedIndex < 0)
        return;
      this.ChangeSet.Add("pr");
      this.lPrs.Items.Remove(RuntimeHelpers.GetObjectValue(this.lPrs.SelectedItem));
      this.lPrs.SelectedIndex = checked (this.lPrs.Items.Count - 1);
    }

    private void bAddPr_Click(object sender, EventArgs e)
    {
      this.ChangeSet.Add("pr");
      string str = string.Empty;
      if (AssemblyFileVersionAttribute.Forms.Dialog2.ShowDialog() == DialogResult.OK)
        str = AssemblyFileVersionAttribute.Forms.Dialog2.lId.Text;
      AssemblyFileVersionAttribute.Forms.Dialog2.lId.Text = string.Empty;
      AssemblyFileVersionAttribute.Forms.Dialog2.lName.Text = string.Empty;
      if (string.IsNullOrWhiteSpace(str))
        return;
      this.lPrs.Items.Add((object) str);
      this.lPrs.SelectedIndex = checked (this.lPrs.Items.Count - 1);
    }

    private void date_changed(object sender, EventArgs e) => this.ChangeSet.Add("date");

    private void ChkTime_CheckedChanged(object sender, EventArgs e)
    {
      this.cFromTime.Visible = this.ChkTime.Checked;
      this.cToTime.Visible = this.ChkTime.Checked;
      this.ChangeSet.Add("time");
    }

    private void time_changed(object sender, EventArgs e) => this.ChangeSet.Add("time");

    private void day_changed(object sender, EventArgs e) => this.ChangeSet.Add("day");

    private void file_changed(object sender, EventArgs e)
    {
      this.ChangeSet.Add("file");
      this.SetTitle();
      this.SyncPriority();
    }

    private void SyncPriority()
    {
      string text = this.cVias.Text;
      if (!this.lPriority.Items.Contains((object) text))
      {
        if (string.IsNullOrWhiteSpace(text) || text.StartsWith("["))
        {
          this.lPriority.SelectedIndex = -1;
          return;
        }
        this.lPriority.Items.Add((object) text);
      }
      this.lPriority.SelectedIndex = this.lPriority.Items.IndexOf((object) text);
    }

    private void ChkDisabled_CheckedChanged(object sender, EventArgs e)
    {
      this.chkMain_CheckedChanged(this.ChkDisabled);
      this.ChkDisabled.Visible = this.ChkDisabled.Checked;
    }

    private void chkAllSlots_CheckedChanged(object sender, EventArgs e) => this.chkMain_CheckedChanged(this.chkAllSlots);

    private void chkSK_CheckedChanged(object sender, EventArgs e)
    {
      this.chkMain_CheckedChanged(this.chkSK);
      this.chkNext.Checked = this.chkSK.Checked;
    }

    private void ChkFix_CheckedChanged(object sender, EventArgs e)
    {
      this.ChangeSet.Add("fixtime");
      this.chkMain_CheckedChanged(this.ChkFix);
      this.tmFix.Visible = this.ChkFix.Checked;
    }

    private void chkMain_CheckedChanged(CheckBox chk)
    {
      this.ChangeSet.Add("slot");
      this.gSlotSelect.Visible = !this.chkAllSlots.Checked && !this.chkSK.Checked && !this.ChkFix.Checked && !this.ChkDisabled.Checked;
      bool flag = false;
      try
      {
        foreach (CheckBox chkMainSlot in this.chkMainSlots)
        {
          if (chk.Checked && chkMainSlot != chk)
            chkMainSlot.Checked = false;
          if (chkMainSlot.Checked)
            flag = true;
        }
      }
      finally
      {
        List<CheckBox>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.gSlotSelect.Visible = !flag;
    }

    private void tmFix_ValueChanged(object sender, EventArgs e) => this.ChangeSet.Add("fixtime");

    private void slot_changed(object sender, EventArgs e) => this.ChangeSet.Add("slot");

    private void nSpecial_ValueChanged(object sender, EventArgs e)
    {
      this.ChangeSet.Add("slot");
      this.ChkValues[this.chkSpecial] = checked (1000 + Decimal.ToInt32(this.nSpecial.Value));
    }

    private void chkSpecial_CheckedChanged(object sender, EventArgs e)
    {
      this.ChangeSet.Add("slot");
      this.nSpecial.Visible = this.chkSpecial.Checked;
    }

    private void chkFine_CheckedChanged(object sender, EventArgs e)
    {
      this.ChangeSet.Add("slot");
      CheckBox checkBox = (CheckBox) sender;
      ((Control) checkBox.Tag).Enabled = checkBox.Checked;
    }

    private void bFine_Click(object sender, EventArgs e)
    {
      Button button = (Button) sender;
      AssemblyFileVersionAttribute.Forms.Dialog3.Text = ((ButtonBase) button.Tag).Text;
      AssemblyFileVersionAttribute.Forms.Dialog3.Init(button.Text);
      if (AssemblyFileVersionAttribute.Forms.Dialog3.ShowDialog() == DialogResult.OK)
      {
        string Left = AssemblyFileVersionAttribute.Forms.Dialog3.Value();
        if (Operators.CompareString(Left, button.Text, false) == 0)
          return;
        this.ChangeSet.Add("slot");
        button.Text = Left;
      }
    }

    private void chkNext_CheckedChanged(object sender, EventArgs e) => this.ChangeSet.Add("next");

    private void bUp_Click(object sender, EventArgs e)
    {
      ListBox lPriority = this.lPriority;
      if (lPriority.SelectedIndex < 1)
        return;
      this.PriorityChange = true;
      object objectValue = RuntimeHelpers.GetObjectValue(lPriority.SelectedItem);
      int selectedIndex = lPriority.SelectedIndex;
      lPriority.Items.RemoveAt(lPriority.SelectedIndex);
      lPriority.Items.Insert(checked (selectedIndex - 1), RuntimeHelpers.GetObjectValue(objectValue));
      lPriority.SelectedIndex = checked (selectedIndex - 1);
      lPriority.Tag = (object) 1;
    }

    private void bDown_Click(object sender, EventArgs e)
    {
      ListBox lPriority = this.lPriority;
      if (lPriority.SelectedIndex < 0 | lPriority.SelectedIndex == checked (lPriority.Items.Count - 1))
        return;
      this.PriorityChange = true;
      object objectValue = RuntimeHelpers.GetObjectValue(lPriority.SelectedItem);
      int index = checked (lPriority.SelectedIndex + 1);
      lPriority.Items.RemoveAt(lPriority.SelectedIndex);
      lPriority.Items.Insert(index, RuntimeHelpers.GetObjectValue(objectValue));
      lPriority.SelectedIndex = index;
    }

    private void lPriority_SelectedIndexChanged(object sender, EventArgs e)
    {
      ListBox lPriority = this.lPriority;
      this.bUp.Enabled = lPriority.SelectedIndex > 0;
      this.bDown.Enabled = lPriority.SelectedIndex > -1 && lPriority.SelectedIndex < checked (lPriority.Items.Count - 1);
    }

    private bool WarnDisable()
    {
      if (!this.gSlotMain.Visible)
        return false;
      if (this.ChkDisabled.Checked)
      {
        int num = (int) MessageBox.Show("Käivitusajad määramata!", "Hoiatus", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
      return this.ChkDisabled.Checked;
    }
  }
}
