// Decompiled with JetBrains decompiler
// Type: .
// Assembly: syncui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cab8849a7bf7875b
// MVID: B8136FDA-4EB0-4CA7-9502-281BC34A634B
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hjc-f20e5d33e431ce6f4aedcb085c959ae1bda3809f8f5bbdd4d18dd58683a28d4d.exe

using \u0001;
using \u0002;
using \u0007;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0005
{
  [\u0001.\u0002]
  [\u0001.\u0001]
  internal static class \u0002
  {
    [\u0001.\u0002]
    [\u0001.\u0001]
    public static unsafe void \u0001([In] Type obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      Type[] typeArray1;
      DynamicMethod dynamicMethod1;
      ILGenerator ilGenerator1;
      MethodInfo[] methods;
      MethodInfo meth;
      FieldInfo fieldInfo1;
      FieldInfo[] fieldInfoArray1;
      try
      {
        FieldInfo[] fields = obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
        if (true)
          fieldInfoArray1 = fields;
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < fieldInfoArray1.Length)
        {
          fieldInfo1 = fieldInfoArray1[*(int*) voidPtr];
          try
          {
            if ((object) fieldInfo1.FieldType == (object) typeof (\u0003))
            {
              string empty = string.Empty;
              Type returnType = typeof (string);
              typeArray1 = new Type[1]{ typeof (int) };
              Type[] parameterTypes = typeArray1;
              Module module = obj0.Module;
              dynamicMethod1 = new DynamicMethod(empty, returnType, parameterTypes, module, true);
              ilGenerator1 = dynamicMethod1.GetILGenerator();
              ilGenerator1.Emit(OpCodes.Ldarg_0);
              methods = typeof (\u0003).GetMethods(BindingFlags.Static | BindingFlags.Public);
              *(int*) ((IntPtr) voidPtr + 4) = 0;
              while (*(int*) ((IntPtr) voidPtr + 4) < methods.Length)
              {
                meth = methods[*(int*) ((IntPtr) voidPtr + 4)];
                if ((object) meth.ReturnType == (object) typeof (string))
                {
                  ilGenerator1.Emit(OpCodes.Ldc_I4, fieldInfo1.MetadataToken & 16777215);
                  ilGenerator1.Emit(OpCodes.Sub);
                  ilGenerator1.Emit(OpCodes.Call, meth);
                  break;
                }
                *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) + 1;
              }
              ilGenerator1.Emit(OpCodes.Ret);
              fieldInfo1.SetValue((object) null, (object) dynamicMethod1.CreateDelegate(typeof (\u0003)));
              break;
            }
          }
          catch
          {
          }
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
      }
      catch (Exception ex)
      {
        FieldInfo fieldInfo2 = fieldInfo1;
        DynamicMethod dynamicMethod2 = dynamicMethod1;
        ILGenerator ilGenerator2 = ilGenerator1;
        MethodInfo methodInfo = meth;
        FieldInfo[] fieldInfoArray2 = fieldInfoArray1;
        // ISSUE: variable of a boxed type
        __Boxed<int> local1 = (ValueType) *(int*) voidPtr;
        Type[] typeArray2 = typeArray1;
        MethodInfo[] methodInfoArray = methods;
        // ISSUE: variable of a boxed type
        __Boxed<int> local2 = (ValueType) *(int*) ((IntPtr) voidPtr + 4);
        Type type = obj0;
        \u0012.\u0001(ex, (object) fieldInfo2, (object) dynamicMethod2, (object) ilGenerator2, (object) methodInfo, (object) fieldInfoArray2, (object) local1, (object) typeArray2, (object) methodInfoArray, (object) local2, (object) type);
        throw;
      }
    }
  }
}
