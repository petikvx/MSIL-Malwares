// Decompiled with JetBrains decompiler
// Type: RiskGame.Maps.Token
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Authentication;
using ArrayWithOff.Database;
using ArrayWithOff.Dictionaries;
using ArrayWithOff.Licensing;
using RiskGame.Composer;
using RiskGame.Factories;
using RiskGame.Game;
using RiskGame.Producers;
using RiskGame.Serialization;
using RiskGame.Shared;
using RiskGame.Visitors;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Input;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace RiskGame.Maps
{
  public class Token : Window, IComponentConnector, IStyleConnector
  {
    private AuthenticationContainerProducer _Candidate;
    private static Random interceptor;
    private static List<Role> m_Error;
    private bool m_Mapping;
    private bool wrapper;
    private BackgroundWorker config;
    private bool visitor;
    private ParserContainerDeSerializer _Invocation;
    private ParserContainerDeSerializer @base;
    private ParserContainerDeSerializer strategy;
    private ArrayWithOff.Database.Resolver list;
    private ArrayWithOff.Database.Resolver m_Param;
    private int m_Proxy;
    private int database;
    private List<PredicateMessageComp> reg;
    internal StackPanel panel_MainUI;
    internal Grid GameGrid;
    internal ImageBrush _Definition;
    internal Button btnAlaska;
    internal Button btnAlberta;
    internal Button btnCentral_America;
    internal Button btnEastern_US;
    internal Button btnGreenland;
    internal Button btnNorthwest_Canada;
    internal Button btnOntario;
    internal Button btnQuebec;
    internal Button btnWestern_US;
    internal Button btnArgentina;
    internal Button btnBrazil;
    internal Button btnPeru;
    internal Button btnVenezuela;
    internal Button btnUK_Ireland;
    internal Button btnIceland;
    internal Button btnNorthern_Europe;
    internal Button btnScandinavia;
    internal Button btnSouthern_Europe;
    internal Button btnSoviet_Bloc;
    internal Button btnWestern_Europe;
    internal Button btnCentral_Africa;
    internal Button btnEast_Africa;
    internal Button btnMadagascar;
    internal Button btnEgypt;
    internal Button btnNorth_Africa;
    internal Button btnSouth_Africa;
    internal Button btnAfghanistan;
    internal Button btnChina;
    internal Button btnIndia;
    internal Button btnJapan;
    internal Button btnMiddle_East;
    internal Button btnMongolia;
    internal Button btnSoutheast_Asia;
    internal Button btnSiberia;
    internal Button btnUral;
    internal Button btnEastern_Australia;
    internal Button btnWestern_Australia;
    internal Button btnNew_Guinea;
    internal Button btnIndonesia;
    internal Button btnIrkutsk;
    internal Button btnKamchatka;
    internal Button btnYakutsk;
    internal ProgressBar pb_Timer;
    internal StackPanel panel_UI;
    internal Border brd_Players;
    internal StackPanel panel_Players;
    internal Border brd_Player1;
    internal StackPanel panel_Player1;
    internal Rectangle rectPlayerColor1;
    internal Label lblPlayerName1;
    internal Label lblPlayer1Territories;
    internal Label lblPlayer1Strength;
    internal Border brd_Player2;
    internal StackPanel panel_Player2;
    internal Rectangle rectPlayerColor2;
    internal Label lblPlayerName2;
    internal Label lblPlayer2Territories;
    internal Label lblPlayer2Strength;
    internal Border brd_Player3;
    internal StackPanel panel_Player3;
    internal Rectangle rectPlayerColor3;
    internal Label lblPlayerName3;
    internal Label lblPlayer3Territories;
    internal Label lblPlayer3Strength;
    internal Border brd_Player4;
    internal StackPanel panel_Player4;
    internal Rectangle rectPlayerColor4;
    internal Label lblPlayerName4;
    internal Label lblPlayer4Territories;
    internal Label lblPlayer4Strength;
    internal Border brd_Player5;
    internal StackPanel panel_Player5;
    internal Rectangle rectPlayerColor5;
    internal Label lblPlayerName5;
    internal Label lblPlayer5Territories;
    internal Label lblPlayer5Strength;
    internal Border brd_Player6;
    internal StackPanel panel_Player6;
    internal Rectangle rectPlayerColor6;
    internal Label lblPlayerName6;
    internal Label lblPlayer6Territories;
    internal Label lblPlayer6Strength;
    internal Border brd_ActionPanel;
    internal StackPanel panel_NumberSelection;
    internal Button btnStateDisp;
    internal Button btnNumber;
    internal Button btnState;
    internal Grid panel_Die;
    internal Button btnPlayerDie;
    internal StackPanel panel_Die_Player;
    internal Image imgPlayerDie1;
    internal Image imgPlayerDie2;
    internal Image imgPlayerDie3;
    internal Button btnEnemyDie;
    internal StackPanel panel_Die_Enemy;
    internal Image imgEnemyDie1;
    internal Image imgEnemyDie2;
    internal Button btnDieStatus;
    internal ScrollViewer scrlOutput;
    internal TextBlock txtOutput;
    internal Viewbox panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool m_Predicate;

    private List<Player> Players
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Candidate._Stub;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._Candidate._Stub = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private List<Role> RegisterParser() => this._Candidate.attribute;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void LogoutParser(List<Role> config) => this._Candidate.attribute = config;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private List<Account> InsertParser() => this._Candidate.authentication;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectParser(List<Account> ident) => this._Candidate.authentication = ident;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private Role ListParser() => this._Candidate.adapter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CheckParser(Role last) => this._Candidate.adapter = last;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private Role PatchParser() => this._Candidate.m_System;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectParser(Role value) => this._Candidate.m_System = value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private Player ViewParser() => this._Candidate.m_Getter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CustomizeParser(Player first) => this._Candidate.m_Getter = first;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private GameState TestParser() => this._Candidate._Repository;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AwakeParser(GameState spec) => this._Candidate._Repository = spec;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private double PushParser() => this._Candidate.parameter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RunParser(double last) => this._Candidate.parameter = last;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private int ReadExpression() => this._Candidate.observer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DisableExpression(int mean_info) => this._Candidate.observer = mean_info;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private int MapExpression() => this._Candidate._Attr;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResolveExpression(int value) => this._Candidate._Attr = value;

    private REGKIND Map
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Candidate.descriptor;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._Candidate.descriptor = value;
    }

    private GameMode Gamemode
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Candidate.algo;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._Candidate.algo = value;
    }

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Mapping;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 0;
        while (true)
        {
          int num2 = num1;
          bool flag1;
          bool flag2;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_11;
              case 1:
                if (flag1)
                {
                  try
                  {
                    ((Human) this.Players[0]).m_Publisher = value;
                    int num3 = 2;
                    while (true)
                    {
                      switch (num3)
                      {
                        case 0:
                        case 2:
                          goto label_3;
                        case 1:
                        case 3:
                          goto label_8;
                        default:
                          if (true)
                          {
                            num3 = 3;
                            continue;
                          }
                          goto label_8;
                      }
                    }
label_3:
                    Human.QuerySerializer(this.Players[0] as Human);
                  }
                  catch
                  {
                  }
label_8:;
                }
                if (!value)
                {
                  flag2 = !value;
                  goto case 3;
                }
                else
                  goto label_10;
              case 2:
                goto label_12;
              case 3:
              case 6:
                if (flag2)
                {
                  this.mediaplayer.Pause();
                  if (Token.ViewContainer())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto label_19;
                }
                else
                  goto label_20;
              case 4:
              case 5:
                goto label_19;
              case 7:
                goto label_6;
              default:
                goto label_16;
            }
          }
label_10:
          num1 = 2;
          continue;
label_11:
          flag1 = this.Players.Count != 0;
          num1 = 1;
          continue;
label_12:
          this.mediaplayer.Play();
          goto label_20;
label_16:
          num1 = 6;
          continue;
label_19:
label_20:
          this.m_Mapping = value;
          num1 = 7;
        }
label_6:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.wrapper;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_5;
              case 1:
              case 4:
                goto label_1;
              case 3:
                flag = this.Players.Count != 0;
                if (Token.ViewContainer())
                {
                  num2 = 4;
                  continue;
                }
                goto label_15;
              case 5:
                goto label_10;
              default:
                goto label_4;
            }
          }
label_1:
          if (!flag)
            goto label_13;
          else
            goto label_5;
label_4:
          num1 = 0;
          continue;
label_5:
          try
          {
            ((Human) this.Players[0]).policy = value;
            int num3 = 2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_7;
                case 1:
                case 3:
                  goto label_12;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_7:
            Human.QuerySerializer(this.Players[0] as Human);
          }
          catch
          {
          }
label_12:
label_13:
          this.wrapper = value;
          num1 = 5;
        }
label_10:
        return;
label_15:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Token(AuthenticationContainerProducer instance)
    {
      int num1 = 3;
      if (Token.ViewContainer())
        goto label_8;
label_1:
      this._Candidate = instance;
      this.PrintSerializer();
      this._Candidate.attribute.Sort();
      if (this.ReadExpression() > 0)
      {
        this.RevertSerializer();
        this.WriteParser();
      }
      this.RestartParser();
      if (true)
      {
        num1 = 6;
        goto label_8;
      }
label_4:
      ProxyParser.NewPool();
      int num2 = 4;
label_7:
      num1 = num2;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
          case 4:
            this.config = (BackgroundWorker) null;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_11;
          case 2:
          case 5:
            goto label_6;
          case 3:
            goto label_4;
          case 6:
            this.InitParser("The game has loaded.");
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_6;
          case 7:
            goto label_13;
          default:
            goto label_9;
        }
      }
label_6:
      this.reg = new List<PredicateMessageComp>();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_1;
label_13:
      return;
label_9:
      num2 = 0;
      goto label_7;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Token(
      List<Player> first,
      bool removecust,
      REGKIND dir,
      GameMode info2,
      int connection3_Low,
      double attr4)
    {
      ProxyParser.NewPool();
      this.config = (BackgroundWorker) null;
      this.reg = new List<PredicateMessageComp>();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AuthenticationContainerProducer.InitModel();
      this._Candidate = new AuthenticationContainerProducer();
      this.DisableExpression(connection3_Low * 100);
      this.Players = first;
      this.Gamemode = info2;
      this.RunParser(attr4);
      this.Map = dir;
      this.PrintSerializer();
      this.ResolveExpression(0);
      try
      {
        this.PushSerializer(false);
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("An error occurred loading the map.");
        this.Close();
        return;
      }
      if (this.ReadExpression() > 0)
        this.RevertSerializer();
      this.ReadParser(removecust);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintSerializer()
    {
      int num1 = 1;
      if (true)
        goto label_12;
label_1:
      this.visitor = false;
      this.DataContext = (object) this;
      this.chkFullscreen.IsChecked = new bool?(true);
      int num2 = 0;
      num1 = Token.WriteContainer() ? num2 : num2;
label_12:
      while (true)
      {
        bool mapping;
        int num3;
        switch (num1)
        {
          case 0:
            this.m_Mapping = ((Human) this.Players[0]).m_Publisher;
            mapping = this.m_Mapping;
            num3 = 7;
            goto label_11;
          case 1:
            this.InitializeComponent();
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 7;
          case 2:
          case 5:
            this.list = new ArrayWithOff.Database.Resolver(this.imgEnemyDie1);
            this.m_Param = new ArrayWithOff.Database.Resolver(this.imgEnemyDie2);
            if (!Token.WriteContainer())
            {
              num1 = 8;
              continue;
            }
            goto case 3;
          case 3:
          case 4:
            break;
          case 6:
            goto label_1;
          case 7:
            if (mapping)
            {
              this.mediaplayer.Play();
              goto case 3;
            }
            else
              break;
          case 8:
            goto label_14;
          default:
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto label_14;
        }
        if (this.Gamemode == GameMode.Classic)
        {
          this._Invocation = new ParserContainerDeSerializer(this.imgPlayerDie1);
          this.@base = new ParserContainerDeSerializer(this.imgPlayerDie2);
          this.strategy = new ParserContainerDeSerializer(this.imgPlayerDie3);
          num3 = 2;
        }
        else
          break;
label_11:
        num1 = num3;
      }
      return;
label_14:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PushSerializer(bool loadident)
    {
      int num1 = 31;
      if (!Token.WriteContainer())
        goto label_23;
label_1:
      Button tag1 = this.RunSerializer("btnEmerson_Hill", new Thickness(350.0, 99.0, 683.0, 395.0));
      Button tag2 = this.RunSerializer("btnBayonne", new Thickness(474.0, 116.0, 578.0, 382.0));
      Button tag3 = this.RunSerializer("btnJersey_City", new Thickness(544.0, 147.0, 488.0, 347.0));
      Button tag4 = this.RunSerializer("btnNorth_Bergen", new Thickness(637.0, 165.0, 392.0, 329.0));
      Button tag5 = this.RunSerializer("btnHoboken", new Thickness(586.0, 186.0, 460.0, 312.0));
      Button tag6 = this.RunSerializer("btnUnion_City", new Thickness(653.0, 199.0, 394.0, 300.0));
      int num2 = 18;
label_22:
      num1 = num2;
label_23:
      Button tag7;
      Role role1;
      Role role2;
      Role role3;
      Role role4;
      Role role5;
      Button tag8;
      Role role6;
      Role role7;
      Role role8;
      Role role9;
      Role role10;
      Role role11;
      Role role12;
      Role role13;
      Role role14;
      Role role15;
      Role role16;
      Role role17;
      Role role18;
      Role role19;
      Role role20;
      Role role21;
      Role role22;
      Role role23;
      Role role24;
      Role role25;
      string str;
      List<Role>.Enumerator enumerator1;
      Button tag9;
      Button tag10;
      Role role26;
      Role role27;
      Role role28;
      Account account1;
      Role role29;
      Role role30;
      Role role31;
      Account account2;
      Account account3;
      Button tag11;
      Button tag12;
      Button tag13;
      Button tag14;
      Role role32;
      Button tag15;
      Button tag16;
      Button tag17;
      Button tag18;
      Button tag19;
      Button tag20;
      Button tag21;
      Button tag22;
      Button tag23;
      Button tag24;
      Button tag25;
      Button tag26;
      Button tag27;
      Button tag28;
      Button tag29;
      Button tag30;
      Button tag31;
      Button tag32;
      Button tag33;
      Button tag34;
      Button tag35;
      Button tag36;
      Button tag37;
      Button tag38;
      Button tag39;
      Button tag40;
      List<Button> buttonList;
      Account account4;
      Account account5;
      while (true)
      {
        Button tag41;
        Role role33;
        Role role34;
        Role role35;
        Role role36;
        Role role37;
        Role role38;
        Role role39;
        Role role40;
        Role role41;
        Role role42;
        Role role43;
        Role role44;
        Role role45;
        Role role46;
        Role role47;
        Role role48;
        Role role49;
        Role role50;
        Role role51;
        Role role52;
        Role role53;
        Button tag42;
        Account account6;
        Button tag43;
        switch (num1)
        {
          case 0:
            goto label_30;
          case 1:
            role38 = new Role("Unionport", new List<string>()
            {
              "Flushing",
              "Laconia",
              "Concourse"
            }, tag43);
            role39 = new Role("Laconia", new List<string>()
            {
              "Unionport",
              "Concourse",
              "Riverdale"
            }, tag24);
            role40 = new Role("Concourse", new List<string>()
            {
              "Unionport",
              "Astoria",
              "Washington_Heights",
              "Riverdale",
              "Laconia"
            }, tag15);
            role41 = new Role("Riverdale", new List<string>()
            {
              "Laconia",
              "Concourse"
            }, tag25);
            if (true)
            {
              num1 = 30;
              continue;
            }
            goto label_47;
          case 2:
            tag16 = this.RunSerializer("btnHells_Kitchen", new Thickness(612.0, 210.0, 434.0, 291.0));
            tag17 = this.RunSerializer("btnMidtown_East", new Thickness(610.0, 234.0, 442.0, 266.0));
            tag18 = this.RunSerializer("btnUpper_West_Side", new Thickness(651.0, 228.0, 399.0, 273.0));
            tag19 = this.RunSerializer("btnCentral_Park", new Thickness(668.0, 247.0, 382.0, 253.0));
            tag42 = this.RunSerializer("btnUpper_East_Side", new Thickness(639.0, 257.0, 412.0, 244.0));
            buttonList = new List<Button>()
            {
              tag20,
              tag9,
              tag21,
              tag10,
              tag22,
              tag23,
              tag11,
              tag12,
              tag1,
              tag13,
              tag14,
              tag43,
              tag24,
              tag15,
              tag25,
              tag2,
              tag3,
              tag5,
              tag4,
              tag6,
              tag26,
              tag27,
              tag28,
              tag29,
              tag30,
              tag31,
              tag32,
              tag33,
              tag34,
              tag35,
              tag36,
              tag37,
              tag38,
              tag39,
              tag7,
              tag40,
              tag17,
              tag16,
              tag42,
              tag18,
              tag19,
              tag8,
              tag41
            };
            foreach (Button element in buttonList)
            {
              int num3 = 2;
              if (true)
                goto label_39;
label_38:
              this.GameGrid.Children.Add((UIElement) element);
              goto label_41;
label_39:
              while (true)
              {
                switch (num3)
                {
                  case 0:
                  case 2:
                    goto label_38;
                  case 1:
                  case 3:
                    goto label_41;
                  default:
                    if (true)
                    {
                      num3 = 3;
                      continue;
                    }
                    goto label_41;
                }
              }
label_41:;
            }
            this.GameGrid.UpdateLayout();
            if (loadident)
              break;
            goto label_45;
          case 3:
            goto label_61;
          case 4:
            Role role54 = new Role("Harlem", new List<string>()
            {
              "Upper_West_Side",
              "Central_Park",
              "Upper_East_Side",
              "Washington_Heights"
            }, tag8);
            Role role55 = new Role("Washington_Heights", new List<string>()
            {
              "Harlem",
              "Concourse",
              "Palisades_Park"
            }, tag41);
            this.LogoutParser(new List<Role>()
            {
              role6,
              role7,
              role8,
              role9,
              role10,
              role11,
              role33,
              role34,
              role35,
              role36,
              role37,
              role38,
              role39,
              role40,
              role41,
              role42,
              role43,
              role44,
              role45,
              role46,
              role47,
              role48,
              role49,
              role50,
              role51,
              role52,
              role12,
              role13,
              role14,
              role15,
              role16,
              role17,
              role18,
              role19,
              role20,
              role21,
              role22,
              role23,
              role53,
              role24,
              role25,
              role54,
              role55
            });
            this.CollectParser(new List<Account>()
            {
              new Account("Queens", new List<Role>()
              {
                role6,
                role7,
                role8,
                role9,
                role10,
                role11,
                role33
              }, 5),
              new Account("Staten_Island", new List<Role>()
              {
                role34,
                role35,
                role36,
                role37
              }, 2),
              new Account("Bronx", new List<Role>()
              {
                role38,
                role39,
                role40,
                role41
              }, 2),
              new Account("New_Jersey", new List<Role>()
              {
                role42,
                role43,
                role44,
                role45,
                role46,
                role47,
                role48
              }, 3),
              new Account("Manhattan", new List<Role>()
              {
                role20,
                role21,
                role22,
                role23,
                role53,
                role24,
                role25,
                role54,
                role55
              }, 5),
              new Account("Brooklyn", new List<Role>()
              {
                role49,
                role50,
                role51,
                role52,
                role12,
                role13,
                role14,
                role15,
                role16,
                role17,
                role18
              }, 7)
            });
            break;
          case 5:
            goto label_27;
          case 6:
            role31 = new Role("Venezuela", new List<string>()
            {
              "Central_America",
              "Peru",
              "Brazil"
            }, this.btnVenezuela);
            role30 = new Role("Peru", new List<string>()
            {
              "Venezuela",
              "Brazil",
              "Argentina"
            }, this.btnPeru);
            role29 = new Role("Brazil", new List<string>()
            {
              "Venezuela",
              "Peru",
              "Argentina",
              "North_Africa"
            }, this.btnBrazil);
            num1 = 20;
            continue;
          case 7:
            tag20 = this.RunSerializer("btnRockaway", new Thickness(376.0, 395.0, 667.0, 98.0));
            num1 = 10;
            continue;
          case 8:
            if (this.Map != REGKIND.Default || loadident)
            {
              if (this.Map != 0)
              {
                num1 = 27;
                continue;
              }
              goto label_7;
            }
            else
            {
              role27 = new Role("Alaska", new List<string>()
              {
                "Kamchatka",
                "Alberta",
                "Northwest_Canada"
              }, this.btnAlaska);
              role28 = new Role("Northwest_Canada", new List<string>()
              {
                "Alaska",
                "Alberta",
                "Greenland",
                "Ontario"
              }, this.btnNorthwest_Canada);
              if (true)
              {
                num1 = 0;
                continue;
              }
              goto label_61;
            }
          case 9:
          case 22:
            goto label_1;
          case 10:
            goto label_21;
          case 11:
            goto label_28;
          case 12:
            goto label_3;
          case 13:
            role53 = new Role("Upper_East_Side", new List<string>()
            {
              "Midtown_East",
              "Harlem",
              "Central_Park",
              "Astoria"
            }, tag42);
            num1 = 4;
            continue;
          case 14:
            goto label_52;
          case 15:
            this.CollectParser(new List<Account>()
            {
              account1,
              account2,
              account3,
              account6,
              account4,
              account5
            });
            goto label_7;
          case 16:
            tag40 = this.RunSerializer("btnFinancial_District", new Thickness(569.0, 210.0, 486.0, 288.0));
            if (Token.ViewContainer())
            {
              num1 = 17;
              continue;
            }
            goto case 33;
          case 17:
            tag7 = this.RunSerializer("btnLower_East_Side", new Thickness(566.0, 240.0, 488.0, 259.0));
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto label_3;
          case 18:
            goto label_55;
          case 19:
            goto label_58;
          case 20:
            goto label_54;
          case 21:
            goto label_68;
          case 23:
            goto label_47;
          case 24:
            tag41 = this.RunSerializer("btnWashington_Heights", new Thickness(764.0, 266.0, 275.0, 232.0));
            tag43 = this.RunSerializer("btnUnionport", new Thickness(741.0, 356.0, 307.0, 138.0));
            if (Token.ViewContainer())
            {
              num1 = 32;
              continue;
            }
            goto label_58;
          case 25:
            goto label_66;
          case 26:
            role33 = new Role("Astoria", new List<string>()
            {
              "Middle_Village",
              "Upper_East_Side",
              "Concourse"
            }, tag11);
            role34 = new Role("Woodrow", new List<string>()
            {
              "Emerson_Hill",
              "Dongan_Hills"
            }, tag12);
            role35 = new Role("Emerson_Hill", new List<string>()
            {
              "Dongan_Hills",
              "Woodrow",
              "Port_Richmond"
            }, tag1);
            role36 = new Role("Dongan_Hills", new List<string>()
            {
              "Woodrow",
              "Emerson_Hill",
              "Port_Richmond",
              "Bay_Ridge"
            }, tag13);
            role37 = new Role("Port_Richmond", new List<string>()
            {
              "Bayonne",
              "Dongan_Hills",
              "Emerson_Hill"
            }, tag14);
            if (!Token.WriteContainer())
            {
              num1 = 1;
              continue;
            }
            goto label_30;
          case 27:
            goto label_62;
          case 28:
          case 34:
            role51 = new Role("Bedford_Stuyvesant", new List<string>()
            {
              "Canarsie",
              "East_New_York",
              "Flatbush",
              "Park_Slope",
              "Williamsburg",
              "Red_Hook",
              "Middle_Village"
            }, tag30);
            role52 = new Role("Flatbush", new List<string>()
            {
              "Canarsie",
              "Bedford_Stuyvesant",
              "Flatlands",
              "Borough_Park",
              "Park_Slope"
            }, tag31);
            if (true)
            {
              num1 = 23;
              continue;
            }
            goto label_71;
          case 29:
            goto label_56;
          case 30:
            role42 = new Role("Bayonne", new List<string>()
            {
              "Port_Richmond",
              "Jersey_City"
            }, tag2);
            role43 = new Role("Jersey_City", new List<string>()
            {
              "Bayonne",
              "Hoboken",
              "North_Bergen"
            }, tag3);
            num1 = 37;
            continue;
          case 31:
            goto label_48;
          case 32:
            goto label_34;
          case 33:
            role47 = new Role("Palisades_Park", new List<string>()
            {
              "North_Bergen",
              "Washington_Heights",
              "Englewood"
            }, tag26);
            role48 = new Role("Englewood", new List<string>()
            {
              "Palisades_Park"
            }, tag27);
            role49 = new Role("East_New_York", new List<string>()
            {
              "Canarsie",
              "Bedford_Stuyvesant",
              "Middle_Village",
              "South_Queens"
            }, tag28);
            role50 = new Role("Canarsie", new List<string>()
            {
              "East_New_York",
              "Flatbush",
              "Bedford_Stuyvesant",
              "Flatlands"
            }, tag29);
            num1 = 28;
            continue;
          case 35:
            this._Definition.ImageSource = (ImageSource) new BitmapImage(new Uri("pack://siteoforigin:,,,/Images/Maps/NewYork.jpg"));
            this._Definition.Stretch = Stretch.Uniform;
            num1 = 7;
            continue;
          case 36:
            goto label_71;
          case 37:
            role44 = new Role("Hoboken", new List<string>()
            {
              "Jersey_City",
              "Union_City",
              "North_Bergen"
            }, tag5);
            role46 = new Role("Union_City", new List<string>()
            {
              "Hoboken",
              "North_Bergen"
            }, tag6);
            role45 = new Role("North_Bergen", new List<string>()
            {
              "Hoboken",
              "Union_City",
              "Palisades_Park",
              "Jersey_City"
            }, tag4);
            if (!Token.WriteContainer())
            {
              num1 = 33;
              continue;
            }
            goto case 39;
          case 38:
            account6 = new Account("Africa", new List<Role>()
            {
              role2,
              role3,
              role1,
              role5,
              role32,
              role4
            }, 3);
            if (true)
            {
              num1 = 19;
              continue;
            }
            goto label_33;
          case 39:
            role26 = new Role("Japan", new List<string>()
            {
              "Mongolia",
              "Kamchatka"
            }, this.btnJapan);
            if (true)
            {
              num1 = 25;
              continue;
            }
            goto label_27;
          case 40:
            goto label_33;
          case 41:
            goto label_72;
          default:
            num1 = 3;
            continue;
        }
label_7:
        if (loadident)
        {
          str = "btn";
          if (this.Map != REGKIND.Default)
          {
            enumerator1 = this.RegisterParser().GetEnumerator();
            num1 = 41;
          }
          else
            goto label_9;
        }
        else
          goto label_80;
      }
label_3:
      role1 = new Role("Egypt", new List<string>()
      {
        "North_Africa",
        "Southern_Europe",
        "Middle_East",
        "East_Africa"
      }, this.btnEgypt);
      role2 = new Role("Central_Africa", new List<string>()
      {
        "North_Africa",
        "East_Africa",
        "South_Africa"
      }, this.btnCentral_Africa);
      role3 = new Role("East_Africa", new List<string>()
      {
        "Egypt",
        "Middle_East",
        "Madagascar",
        "South_Africa",
        "Central_Africa",
        "North_Africa"
      }, this.btnEast_Africa);
      role4 = new Role("South_Africa", new List<string>()
      {
        "Central_Africa",
        "East_Africa",
        "Madagascar"
      }, this.btnSouth_Africa);
      role5 = new Role("Madagascar", new List<string>()
      {
        "South_Africa",
        "East_Africa"
      }, this.btnMadagascar);
      Role role56 = new Role("Middle_East", new List<string>()
      {
        "Southern_Europe",
        "Soviet_Bloc",
        "Afghanistan",
        "India",
        "East_Africa",
        "Egypt"
      }, this.btnMiddle_East);
      Role role57 = new Role("Afghanistan", new List<string>()
      {
        "Middle_East",
        "Soviet_Bloc",
        "Ural",
        "China",
        "India"
      }, this.btnAfghanistan);
      Role role58 = new Role("India", new List<string>()
      {
        "Middle_East",
        "Afghanistan",
        "China",
        "Southeast_Asia"
      }, this.btnIndia);
      Role role59 = new Role("Southeast_Asia", new List<string>()
      {
        "India",
        "China",
        "Indonesia"
      }, this.btnSoutheast_Asia);
      Role role60 = new Role("China", new List<string>()
      {
        "Afghanistan",
        "Ural",
        "Siberia",
        "Mongolia",
        "Southeast_Asia",
        "India"
      }, this.btnChina);
      Role role61 = new Role("Ural", new List<string>()
      {
        "Soviet_Bloc",
        "Siberia",
        "China",
        "Afghanistan"
      }, this.btnUral);
      Role role62 = new Role("Siberia", new List<string>()
      {
        "Ural",
        "Yakutsk",
        "Irkutsk",
        "Mongolia",
        "China"
      }, this.btnSiberia);
      num2 = 14;
      goto label_22;
label_80:
      return;
label_9:
      using (List<Role>.Enumerator enumerator2 = this.RegisterParser().GetEnumerator())
      {
label_16:
        while (enumerator2.MoveNext())
        {
          Role current = enumerator2.Current;
          int num4 = 3;
          if (Token.ViewContainer())
            goto label_14;
label_12:
          string name;
          current.configuration = (Button) this.GameGrid.FindName(name);
          num4 = 4;
label_14:
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 3:
                goto label_13;
              case 1:
              case 2:
                goto label_12;
              case 4:
                goto label_16;
              default:
                num4 = 2;
                continue;
            }
          }
label_13:
          name = str + current._Exporter;
          goto label_12;
        }
        goto label_82;
      }
label_21:
      tag9 = this.RunSerializer("btnSaint_Albans", new Thickness(521.0, 458.0, 488.0, 36.0));
      tag10 = this.RunSerializer("btnSouth_Queens", new Thickness(518.0, 384.0, 514.0, 110.0));
      goto label_61;
label_27:
      Role role63;
      Role role64;
      Role role65;
      Role role66;
      Role role67;
      Role role68;
      Role role69;
      account1 = new Account("North America", new List<Role>()
      {
        role27,
        role63,
        role64,
        role65,
        role66,
        role28,
        role67,
        role68,
        role69
      }, 5);
      Role role70;
      account2 = new Account("South America", new List<Role>()
      {
        role70,
        role29,
        role30,
        role31
      }, 2);
      Role role71;
      Role role72;
      Role role73;
      Role role74;
      Role role75;
      Role role76;
      Role role77;
      account3 = new Account("Europe", new List<Role>()
      {
        role71,
        role72,
        role73,
        role74,
        role75,
        role76,
        role77
      }, 5);
      num2 = 38;
      goto label_22;
label_28:
      role67 = new Role("Ontario", new List<string>()
      {
        "Greenland",
        "Quebec",
        "Eastern_US",
        "Western_US",
        "Northwest_Canada",
        "Alberta"
      }, this.btnOntario);
      role69 = new Role("Western_US", new List<string>()
      {
        "Quebec",
        "Ontario",
        "Eastern_US",
        "Central_America",
        "Alberta"
      }, this.btnWestern_US);
      role65 = new Role("Eastern_US", new List<string>()
      {
        "Western_US",
        "Ontario",
        "Central America",
        "Quebec"
      }, this.btnEastern_US);
      role64 = new Role("Central_America", new List<string>()
      {
        "Western_US",
        "Eastern_US",
        "Venezuela"
      }, this.btnCentral_America);
      num2 = 6;
      goto label_22;
label_30:
      role66 = new Role("Greenland", new List<string>()
      {
        "Northwest_Canada",
        "Quebec",
        "Ontario",
        "Iceland"
      }, this.btnGreenland);
      role63 = new Role("Alberta", new List<string>()
      {
        "Alaska",
        "Northwest_Canada",
        "Ontario",
        "Western_US"
      }, this.btnAlberta);
      role68 = new Role("Quebec", new List<string>()
      {
        "Ontario",
        "Greenland",
        "Eastern_US"
      }, this.btnQuebec);
      num2 = 11;
      goto label_22;
label_33:
      role32 = new Role("North_Africa", new List<string>()
      {
        "Brazil",
        "Egypt",
        "East_Africa",
        "Central_Africa",
        "Western_Europe",
        "Southern_Europe"
      }, this.btnNorth_Africa);
      num2 = 12;
      goto label_22;
label_34:
      tag15 = this.RunSerializer("btnConcourse", new Thickness(723.0, 293.0, 292.0, 201.0));
      tag8 = this.RunSerializer("btnHarlem", new Thickness(707.0, 256.0, 347.0, 244.0));
      num2 = 16;
      goto label_22;
label_45:
      role6 = new Role("Rockaway", new List<string>()
      {
        "Sheepshead_Bay",
        "South_Queens"
      }, tag20);
      role7 = new Role("Saint_Albans", new List<string>()
      {
        "South_Queens",
        "Bayside"
      }, tag9);
      role8 = new Role("Bayside", new List<string>()
      {
        "Saint_Albans",
        "Flushing",
        "South_Queens"
      }, tag21);
      role9 = new Role("South_Queens", new List<string>()
      {
        "East_New_York",
        "Rockaway",
        "Middle_Village",
        "Saint_Albans",
        "Bayside"
      }, tag10);
      role10 = new Role("Flushing", new List<string>()
      {
        "Bayside",
        "Middle_Village",
        "Unionport"
      }, tag22);
      role11 = new Role("Middle_Village", new List<string>()
      {
        "Flushing",
        "Bayside",
        "South_Queens",
        "East_New_York",
        "Bedford_Stuyvesant",
        "Williamsburg",
        "Astoria"
      }, tag23);
      num2 = 26;
      goto label_22;
label_47:
      role19 = new Role("Borough_Park", new List<string>()
      {
        "Park_Slope",
        "Flatbush",
        "Flatlands",
        "Sheepshead_Bay",
        "Bay_Ridge"
      }, tag39);
      num2 = 36;
      goto label_22;
label_48:
      buttonList = new List<Button>();
      num2 = 8;
      goto label_22;
label_52:
      Role role78 = new Role("Mongolia", new List<string>()
      {
        "China",
        "Siberia",
        "Irkutsk",
        "Kamchatka",
        "Japan"
      }, this.btnMongolia);
      num2 = 39;
      goto label_22;
label_54:
      role70 = new Role("Argentina", new List<string>()
      {
        "Peru",
        "Brazil"
      }, this.btnArgentina);
      role72 = new Role("Iceland", new List<string>()
      {
        "Greenland",
        "Scandinavia",
        "UK_Ireland"
      }, this.btnIceland);
      role71 = new Role("UK_Ireland", new List<string>()
      {
        "Iceland",
        "Western_Europe",
        "Northern_Europe",
        "Scandinavia"
      }, this.btnUK_Ireland);
      role74 = new Role("Scandinavia", new List<string>()
      {
        "Iceland",
        "UK_Ireland",
        "Northern_Europe",
        "Soviet_Bloc"
      }, this.btnScandinavia);
      role76 = new Role("Soviet_Bloc", new List<string>()
      {
        "Scandinavia",
        "Northern_Europe",
        "Southern_Europe",
        "Ural",
        "Afghanistan",
        "Middle_East"
      }, this.btnSoviet_Bloc);
      role75 = new Role("Southern_Europe", new List<string>()
      {
        "Western_Europe",
        "Northern_Europe",
        "Soviet_Bloc",
        "Middle_East",
        "Egypt"
      }, this.btnSouthern_Europe);
      role73 = new Role("Northern_Europe", new List<string>()
      {
        "UK_Ireland",
        "Scandinavia",
        "Soviet_Bloc",
        "Southern_Europe",
        "Western_Europe"
      }, this.btnNorthern_Europe);
      role77 = new Role("Western_Europe", new List<string>()
      {
        "UK_Ireland",
        "Northern_Europe",
        "Southern_Europe",
        "North_Africa"
      }, this.btnWestern_Europe);
      num2 = 40;
      goto label_22;
label_55:
      tag26 = this.RunSerializer("btnPalisades_Park", new Thickness(742.0, 211.0, 293.0, 283.0));
      tag27 = this.RunSerializer("btnEnglewood", new Thickness(802.0, 224.0, 239.0, 270.0));
      tag25 = this.RunSerializer("btnRiverdale", new Thickness(824.0, 293.0, 223.0, 201.0));
      tag24 = this.RunSerializer("btnLaconia", new Thickness(787.0, 337.0, 241.0, 157.0));
      num2 = 24;
      goto label_22;
label_56:
      tag31 = this.RunSerializer("btnFlatbush", new Thickness(469.0, 283.0, 585.0, 211.0));
      tag36 = this.RunSerializer("btnPark_Slope", new Thickness(494.0, 244.0, 564.0, 254.0));
      tag39 = this.RunSerializer("btnBorough_Park", new Thickness(441.0, 243.0, 613.0, 251.0));
      tag30 = this.RunSerializer("btnBedford_Stuyvesant", new Thickness(522.0, 282.0, 528.0, 212.0));
      tag37 = this.RunSerializer("btnRed_Hook", new Thickness(520.0, 230.0, 534.0, 268.0));
      tag38 = this.RunSerializer("btnWilliamsburg", new Thickness(562.0, 266.0, 486.0, 228.0));
      tag12 = this.RunSerializer("btnWoodrow", new Thickness(274.0, 55.0, 747.0, 439.0));
      tag13 = this.RunSerializer("btnDongan_Hills", new Thickness(367.0, 163.0, 665.0, 331.0));
      tag14 = this.RunSerializer("btnPort_Richmond", new Thickness(413.0, 129.0, 625.0, 365.0));
      num2 = 9;
      goto label_22;
label_58:
      Role role79;
      Role role80;
      Role role81;
      account4 = new Account("Asia", new List<Role>()
      {
        role57,
        role60,
        role58,
        role79,
        role26,
        role80,
        role56,
        role78,
        role59,
        role62,
        role61,
        role81
      }, 7);
      Role role82;
      Role role83;
      Role role84;
      Role role85;
      account5 = new Account("Australia", new List<Role>()
      {
        role82,
        role83,
        role84,
        role85
      }, 2);
      num2 = 15;
      goto label_22;
label_61:
      tag21 = this.RunSerializer("btnBayside", new Thickness(606.0, 445.0, 413.0, 49.0));
      tag22 = this.RunSerializer("btnFlushing", new Thickness(618.0, 386.0, 377.0, 108.0));
      tag23 = this.RunSerializer("btnMiddle_Village", new Thickness(565.0, 340.0, 478.0, 154.0));
      tag11 = this.RunSerializer("btnAstoria", new Thickness(614.0, 305.0, 418.0, 189.0));
      tag28 = this.RunSerializer("btnEast_New_York", new Thickness(506.0, 339.0, 541.0, 155.0));
      tag29 = this.RunSerializer("btnCanarsie", new Thickness(457.0, 325.0, 596.0, 171.0));
      tag32 = this.RunSerializer("btnFlatlands", new Thickness(430.0, 299.0, 622.0, 194.0));
      tag33 = this.RunSerializer("btnSheepshead_Bay", new Thickness(390.0, 276.0, 658.0, 217.0));
      tag35 = this.RunSerializer("btnConey_Island", new Thickness(358.0, 252.0, 694.0, 242.0));
      tag34 = this.RunSerializer("btnBay_Ridge", new Thickness(411.0, 208.0, 632.0, 286.0));
      num2 = 29;
      goto label_22;
label_62:
      this.GameGrid.Children.Clear();
      if (this.Map != REGKIND.NewYork)
        throw new Exception("An error has occured");
      num2 = 35;
      goto label_22;
label_66:
      role79 = new Role("Irkutsk", new List<string>()
      {
        "Siberia",
        "Yakutsk",
        "Kamchatka",
        "Mongolia"
      }, this.btnIrkutsk);
      role81 = new Role("Yakutsk", new List<string>()
      {
        "Siberia",
        "Kamchatka",
        "Irkutsk"
      }, this.btnYakutsk);
      role80 = new Role("Kamchatka", new List<string>()
      {
        "Yakutsk",
        "Alaska",
        "Japan",
        "Mongolia",
        "Irkutsk"
      }, this.btnKamchatka);
      role83 = new Role("Indonesia", new List<string>()
      {
        "New_Guinea",
        "Southeast_Asia",
        "Western_Australia"
      }, this.btnIndonesia);
      num2 = 21;
      goto label_22;
label_68:
      role84 = new Role("New_Guinea", new List<string>()
      {
        "Indonesia",
        "Eastern_Australia",
        "Western_Australia"
      }, this.btnNew_Guinea);
      role85 = new Role("Western_Australia", new List<string>()
      {
        "Eastern_Australia",
        "New_Guinea",
        "Indonesia"
      }, this.btnWestern_Australia);
      role82 = new Role("Eastern_Australia", new List<string>()
      {
        "Western_Australia",
        "New_Guinea"
      }, this.btnEastern_Australia);
      this.LogoutParser(new List<Role>()
      {
        role27,
        role28,
        role66,
        role63,
        role68,
        role67,
        role69,
        role65,
        role64,
        role31,
        role30,
        role29,
        role70,
        role72,
        role74,
        role71,
        role76,
        role73,
        role77,
        role75,
        role32,
        role1,
        role3,
        role2,
        role4,
        role5,
        role83,
        role84,
        role82,
        role85,
        role56,
        role57,
        role58,
        role61,
        role62,
        role60,
        role59,
        role78,
        role79,
        role81,
        role80,
        role26
      });
      num2 = 5;
      goto label_22;
label_71:
      role12 = new Role("Flatlands", new List<string>()
      {
        "Canarsie",
        "Flatbush",
        "Borough_Park",
        "Sheepshead_Bay"
      }, tag32);
      role13 = new Role("Sheepshead_Bay", new List<string>()
      {
        "Bay_Ridge",
        "Borough_Park",
        "Flatlands",
        "Coney_Island",
        "Rockaway"
      }, tag33);
      role14 = new Role("Bay_Ridge", new List<string>()
      {
        "Dongan_Hills",
        "Borough_Park",
        "Park_Slope",
        "Sheepshead_Bay"
      }, tag34);
      role15 = new Role("Coney_Island", new List<string>()
      {
        "Sheepshead_Bay"
      }, tag35);
      role16 = new Role("Park_Slope", new List<string>()
      {
        "Red_Hook",
        "Bedford_Stuyvesant",
        "Flatbush",
        "Borough_Park",
        "Bay_Ridge"
      }, tag36);
      role17 = new Role("Red_Hook", new List<string>()
      {
        "Park_Slope",
        "Bedford_Stuyvesant"
      }, tag37);
      role18 = new Role("Williamsburg", new List<string>()
      {
        "Bedford_Stuyvesant",
        "Lower_East_Side",
        "Middle_Village"
      }, tag38);
      role20 = new Role("Lower_East_Side", new List<string>()
      {
        "Williamsburg",
        "Financial_District",
        "Midtown_East"
      }, tag7);
      role21 = new Role("Financial_District", new List<string>()
      {
        "Midtown_East",
        "Lower_East_Side",
        "Hells_Kitchen"
      }, tag40);
      role22 = new Role("Midtown_East", new List<string>()
      {
        "Financial_District",
        "Lower_East_Side",
        "Hells_Kitchen",
        "Upper_West_Side",
        "Central_Park",
        "Upper_East_Side"
      }, tag17);
      role23 = new Role("Hells_Kitchen", new List<string>()
      {
        "Financial_District",
        "Midtown_East",
        "Upper_West_Side"
      }, tag16);
      role24 = new Role("Upper_West_Side", new List<string>()
      {
        "Midtown_East",
        "Hells_Kitchen",
        "Central_Park",
        "Harlem"
      }, tag18);
      role25 = new Role("Central_Park", new List<string>()
      {
        "Midtown_East",
        "Harlem",
        "Upper_West_Side",
        "Upper_East_Side"
      }, tag19);
      num2 = 13;
      goto label_22;
label_72:
      try
      {
label_79:
        while (enumerator1.MoveNext())
        {
          Role current = enumerator1.Current;
          int num5 = 2;
          while (true)
          {
            // ISSUE: variable of a compiler-generated type
            Token.MockPropertyCollection propertyCollection;
            int num6;
            switch (num5)
            {
              case 0:
              case 2:
                // ISSUE: object of a compiler-generated type is created
                propertyCollection = new Token.MockPropertyCollection();
                goto case 1;
              case 1:
              case 3:
                // ISSUE: reference to a compiler-generated field
                propertyCollection.m_SpecificationParser = str + current._Exporter;
                // ISSUE: reference to a compiler-generated method
                current.configuration = buttonList.Find(new Predicate<Button>(propertyCollection.SetupModel));
                num6 = 4;
                break;
              case 4:
                goto label_79;
              default:
                num6 = 3;
                break;
            }
            num5 = num6;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
label_82:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Button RunSerializer(string param, Thickness col)
    {
      int num1 = 5;
      Button button1;
      while (true)
      {
        int num2 = num1;
        Button button2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              button2.Name = param;
              button2.Margin = col;
              if (!Token.WriteContainer())
              {
                num2 = 1;
                continue;
              }
              goto label_3;
            case 1:
            case 2:
              goto label_4;
            case 3:
            case 4:
              goto label_3;
            case 5:
              goto label_1;
            case 6:
              goto label_9;
            default:
              goto label_7;
          }
        }
label_1:
        button2 = new Button();
        num1 = 0;
        continue;
label_3:
        Button button3;
        button1 = button3;
        num1 = 6;
        continue;
label_4:
        button2.Content = (object) "0";
        Button button4 = button2;
        ToolTip toolTip1 = new ToolTip();
        toolTip1.Content = (object) param.Replace("_", " ").TrimStart('b', 't', 'n');
        ToolTip toolTip2 = toolTip1;
        button4.ToolTip = (object) toolTip2;
        button3 = button2;
        goto label_3;
label_7:
        num1 = 4;
      }
label_9:
      return button1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RevertSerializer()
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            this.config = new BackgroundWorker()
            {
              WorkerReportsProgress = true,
              WorkerSupportsCancellation = true
            };
            num2 = 4;
            break;
          case 1:
          case 2:
            this.config.ProgressChanged += new ProgressChangedEventHandler(this.ResetParser);
            this.config.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.InterruptParser);
            num1 = 5;
            continue;
          case 4:
            this.config.DoWork += new DoWorkEventHandler(this.ValidateParser);
            goto case 1;
          case 5:
            goto label_7;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReadParser(bool assetclose)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        int num3;
        int num4;
        bool policy;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num3 = 0;
              if (!Token.WriteContainer())
              {
                num2 = 5;
                continue;
              }
              goto case 4;
            case 1:
              goto label_18;
            case 2:
              this.ForgotParser();
              foreach (Player player in this.Players)
              {
                int num5 = 2;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                    case 2:
                      goto label_28;
                    case 1:
                    case 3:
                      goto label_31;
                    default:
                      num5 = 3;
                      continue;
                  }
                }
label_28:
                player.m_Producer = num4;
label_31:;
              }
              this.ReflectParser(GameState.InitialArmyPlace);
              if (!assetclose)
              {
                this.RegisterParser().Sort();
                if (this.ViewParser() is Human)
                {
                  policy = ((Human) this.ViewParser()).policy;
                  num2 = 8;
                  continue;
                }
                goto label_38;
              }
              else
              {
                if (true)
                {
                  num2 = 7;
                  continue;
                }
                goto label_36;
              }
            case 3:
            case 7:
              this.SetParser();
              goto case 4;
            case 4:
              this.RegisterParser().Sort();
              this.DisableParser();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 2;
            case 5:
              goto label_5;
            case 6:
            case 8:
              if (policy)
              {
                this.InitParser("Place armies around the map using left click.");
                this.InitParser("You can capture any territory not already taken by another player.");
                if (true)
                {
                  num2 = 9;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_37;
            case 9:
              goto label_36;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_5;
          }
        }
label_5:
        foreach (Player player in this.Players)
        {
          int num6 = 3;
          while (true)
          {
            switch (num6)
            {
              case 0:
              case 3:
                if (player is Service)
                  goto label_13;
                else
                  goto case 1;
              case 1:
              case 2:
                ++num3;
                if (!Token.WriteContainer())
                {
                  num6 = 4;
                  continue;
                }
                goto case 0;
              case 4:
                goto label_12;
              default:
                if (true)
                {
                  num6 = 2;
                  continue;
                }
                goto label_12;
            }
          }
label_12:
label_13:;
        }
        num4 = 50 - 5 * num3;
        this.CustomizeParser(this.Players[0]);
        num1 = 2;
      }
label_18:
      return;
label_36:
label_37:
label_38:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DisableParser()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              this.InitParser("The Game is beginning.");
              num2 = 4;
              continue;
            case 1:
            case 4:
              goto label_2;
            case 2:
              goto label_6;
            case 5:
              goto label_7;
            default:
              if (Token.ViewContainer())
              {
                num2 = 2;
                continue;
              }
              goto label_6;
          }
        }
label_2:
        this.AwakeParser(GameState.PlacingArmy);
label_6:
        this.SortParser();
        num1 = 5;
      }
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SetParser()
    {
      int num1 = 0;
      List<Role>.Enumerator enumerator1;
      List<Player>.Enumerator enumerator2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            this.RegisterParser().InvokeSerializer<Role>();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 2;
          case 1:
          case 3:
            enumerator1 = this.RegisterParser().GetEnumerator();
            goto case 2;
          case 2:
          case 4:
            try
            {
label_14:
              while (enumerator1.MoveNext())
              {
                Role current = enumerator1.Current;
                int num2 = 3;
                while (true)
                {
                  int num3 = num2;
                  bool flag1;
                  while (true)
                  {
                    bool flag2;
                    switch (num3)
                    {
                      case 0:
                        this.ConnectParser(current, 1);
                        flag1 = true;
                        break;
                      case 1:
                      case 4:
label_8:
                        this.VerifyParser();
                        flag2 = this.ViewParser().m_Producer > 0;
                        goto case 2;
                      case 2:
                      case 5:
                        if (flag2)
                        {
                          num3 = 0;
                          continue;
                        }
                        break;
                      case 3:
                        goto label_4;
                      case 6:
                        goto label_14;
                      default:
                        goto label_11;
                    }
                    if (!flag1)
                      goto label_8;
                    else
                      goto label_7;
                  }
label_4:
                  flag1 = false;
                  num2 = 4;
                  continue;
label_7:
                  num2 = 6;
                  continue;
label_11:
                  num2 = 5;
                }
              }
            }
            finally
            {
              enumerator1.Dispose();
            }
            enumerator2 = this.Players.GetEnumerator();
            if (!Token.WriteContainer())
            {
              num1 = 5;
              continue;
            }
            goto case 1;
          case 5:
            goto label_20;
          default:
            if (Token.ViewContainer())
            {
              num1 = 4;
              continue;
            }
            goto label_20;
        }
      }
label_20:
      try
      {
        while (enumerator2.MoveNext())
        {
          Player current = enumerator2.Current;
          this.CustomizeParser(current);
          while (current.m_Producer > 0)
          {
            foreach (Role config in this.RegisterParser())
            {
              int num4 = 3;
              while (true)
              {
                int num5 = num4;
                bool flag;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                    case 2:
                      this.ConnectParser(config, Token.interceptor.Next(1, Math.Min(current.m_Producer, 4)));
                      if (Token.ViewContainer())
                      {
                        num5 = 5;
                        continue;
                      }
                      goto case 3;
                    case 1:
                    case 4:
                      if (!flag)
                        goto label_33;
                      else
                        goto case 0;
                    case 3:
                      if (current.m_Producer > 0)
                      {
                        flag = config.@class == current;
                        if (true)
                        {
                          num5 = 4;
                          continue;
                        }
                        goto label_32;
                      }
                      else
                        goto label_36;
                    case 5:
                      goto label_32;
                    default:
                      goto label_28;
                  }
                }
label_28:
                num4 = 0;
              }
label_32:
label_33:;
            }
label_36:;
          }
        }
      }
      finally
      {
        enumerator2.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MapParser()
    {
      int num1 = 1;
      List<Player>.Enumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        List<Role>.Enumerator enumerator2;
        bool flag1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
              flag1 = true;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_25;
            case 3:
            case 4:
              goto label_23;
            case 5:
              enumerator2 = this.RegisterParser().GetEnumerator();
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_2;
            case 6:
              goto label_25;
            default:
              if (Token.ViewContainer())
              {
                num2 = 4;
                continue;
              }
              goto label_23;
          }
        }
label_2:
        try
        {
          while (enumerator2.MoveNext())
          {
            Role current = enumerator2.Current;
            int num3 = 4;
            bool flag2;
            while (true)
            {
              int num4 = num3;
              bool flag3;
              while (true)
              {
                switch (num4)
                {
                  case 0:
                  case 1:
                    goto label_10;
                  case 2:
                  case 3:
                    goto label_7;
                  case 4:
                    goto label_4;
                  case 5:
                    if (!flag3)
                    {
                      if (true)
                      {
                        num4 = 6;
                        continue;
                      }
                      goto label_7;
                    }
                    else
                      goto label_10;
                  case 6:
                    goto label_16;
                  default:
                    int num5 = 3;
                    num4 = Token.WriteContainer() ? num5 : num5;
                    continue;
                }
              }
label_4:
              flag2 = false;
              num3 = 0;
              continue;
label_7:
              bool flag4;
              if (flag4)
              {
                flag1 = false;
                this.ConnectParser(current, 1);
                flag2 = true;
              }
              flag3 = !flag2;
              num3 = 5;
              continue;
label_10:
              if (current.@class == null)
              {
                this.ResolveParser();
                flag4 = this.ViewParser().m_Producer > 0;
                goto label_7;
              }
              else
                break;
            }
            flag2 = true;
label_16:;
          }
        }
        finally
        {
          enumerator2.Dispose();
        }
        if (flag1)
          break;
label_23:
        enumerator1 = this.Players.GetEnumerator();
        num1 = 6;
      }
      return;
label_25:
      try
      {
        while (enumerator1.MoveNext())
        {
          Player current = enumerator1.Current;
          if (current is Service)
          {
            this.CustomizeParser(current);
            while (current.m_Producer > 0)
            {
              foreach (Role config in this.RegisterParser())
              {
                int num6 = 4;
                while (true)
                {
                  bool flag5;
                  int num7;
                  bool flag6;
                  switch (num6)
                  {
                    case 0:
                    case 4:
                      flag5 = current.m_Producer > 0;
                      num7 = 1;
                      break;
                    case 1:
                      if (flag5)
                      {
                        flag6 = config.@class == current;
                        goto case 2;
                      }
                      else
                        goto label_42;
                    case 2:
                    case 3:
                      if (flag6)
                      {
                        this.ConnectParser(config, Token.interceptor.Next(1, Math.Min(current.m_Producer, 4)));
                        num6 = 5;
                        continue;
                      }
                      goto label_39;
                    case 5:
                      goto label_39;
                    default:
                      num7 = 3;
                      break;
                  }
                  num6 = num7;
                }
label_39:;
              }
label_42:;
            }
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResolveParser()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              flag = !(this.ViewParser() is Service);
              goto case 2;
            case 2:
            case 3:
              if (flag)
              {
                this.ResolveParser();
                if (Token.ViewContainer())
                {
                  num2 = 5;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_10;
            case 4:
              this.VerifyParser();
              num2 = 0;
              continue;
            case 5:
              goto label_8;
            default:
              goto label_6;
          }
        }
label_6:
        num1 = 3;
      }
label_10:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ForgotParser()
    {
      int num1 = 1;
      while (true)
      {
        int minsetup;
        Thickness pol;
        int init_X;
        int num2;
        int position_item;
        switch (num1)
        {
          case 0:
            this.lblPlayerName6.Content = (object) this.Players[5].ResetExpression();
            this.brd_Player6.Visibility = Visibility.Visible;
            this.Players[5].FindExpression(this.lblPlayer6Strength);
            int num3 = 13;
            num1 = Token.WriteContainer() ? num3 : num3;
            continue;
          case 1:
            this.lblPlayerName1.Content = (object) this.Players[0].ResetExpression();
            if (Token.ViewContainer())
            {
              num1 = 7;
              continue;
            }
            goto case 11;
          case 2:
            this.brd_Player4.Visibility = Visibility.Visible;
            num1 = 5;
            continue;
          case 3:
          case 9:
            this.rectPlayerColor2.Fill = (Brush) this.Players[1].Color;
            this.lblPlayerName3.Content = (object) this.Players[2].ResetExpression();
            num2 = 8;
            break;
          case 4:
            this.Players[4].FindExpression(this.lblPlayer5Strength);
            this.Players[4].ChangeExpression(this.lblPlayer5Territories);
            if (this.Players.Count >= 6)
            {
              num2 = 12;
              break;
            }
            goto label_18;
          case 5:
            this.Players[3].FindExpression(this.lblPlayer4Strength);
            this.Players[3].ChangeExpression(this.lblPlayer4Territories);
            if (this.Players.Count >= 5)
            {
              minsetup = 17;
              pol = new Thickness(10.0, 3.0, 0.0, 3.0);
              init_X = 2;
              this.lblPlayerName5.Content = (object) this.Players[4].ResetExpression();
              this.rectPlayerColor5.Fill = (Brush) this.Players[4].Color;
              this.brd_Player5.Visibility = Visibility.Visible;
              goto case 4;
            }
            else
              goto label_21;
          case 6:
            this.Players[0].ChangeExpression(this.lblPlayer1Territories);
            this.lblPlayerName2.Content = (object) this.Players[1].ResetExpression();
            this.Players[1].FindExpression(this.lblPlayer2Strength);
            this.Players[1].ChangeExpression(this.lblPlayer2Territories);
            this.rectPlayerColor1.Fill = (Brush) this.Players[0].Color;
            if (true)
            {
              num1 = 9;
              continue;
            }
            goto case 3;
          case 7:
            this.Players[0].FindExpression(this.lblPlayer1Strength);
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 5;
          case 8:
            this.rectPlayerColor3.Fill = (Brush) this.Players[2].Color;
            this.Players[2].FindExpression(this.lblPlayer3Strength);
            this.Players[2].ChangeExpression(this.lblPlayer3Territories);
            if (this.Players.Count >= 4)
            {
              this.lblPlayerName4.Content = (object) this.Players[3].ResetExpression();
              this.rectPlayerColor4.Fill = (Brush) this.Players[3].Color;
              num2 = 2;
              break;
            }
            goto label_13;
          case 10:
          case 13:
            this.Players[5].ChangeExpression(this.lblPlayer6Territories);
            num2 = 11;
            break;
          case 11:
            this.PrepareParser(position_item);
            goto label_18;
          case 12:
            position_item = 11;
            init_X = 0;
            this.rectPlayerColor6.Fill = (Brush) this.Players[5].Color;
            if (Token.ViewContainer())
            {
              num1 = 0;
              continue;
            }
            goto case 10;
          case 14:
            goto label_21;
          default:
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 12;
        }
label_5:
        num1 = num2;
        continue;
label_18:
        this.ConcatParser(init_X);
        this.PopParser(minsetup, pol);
        num2 = 14;
        goto label_5;
      }
label_13:
      return;
label_21:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrepareParser(int position_item)
    {
      int num1 = 5;
      IEnumerator enumerator1;
      while (true)
      {
        int num2 = num1;
        IEnumerator enumerator2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              enumerator2 = this.panel_Player1.Children.GetEnumerator();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 1:
            case 4:
              goto label_2;
            case 2:
              goto label_43;
            case 3:
              goto label_15;
            case 6:
              goto label_69;
            default:
              num2 = 2;
              continue;
          }
        }
label_2:
        try
        {
          while (enumerator2.MoveNext())
          {
            UIElement current = (UIElement) enumerator2.Current;
            int num3 = 2;
            if (!Token.WriteContainer())
              goto label_5;
label_4:
            if (!(current is Label))
              goto label_8;
            else
              goto label_7;
label_5:
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_4;
                case 1:
                case 3:
                  goto label_7;
                case 4:
                  goto label_8;
                default:
                  if (true)
                  {
                    num3 = 3;
                    continue;
                  }
                  goto label_7;
              }
            }
label_7:
            ((Control) current).FontSize = (double) position_item;
            num3 = 4;
            goto label_5;
label_8:;
          }
        }
        finally
        {
          if (enumerator2 is IDisposable disposable)
            disposable.Dispose();
        }
        IEnumerator enumerator3 = this.panel_Player2.Children.GetEnumerator();
        num1 = 3;
        continue;
label_15:
        try
        {
          while (enumerator3.MoveNext())
          {
            UIElement current = (UIElement) enumerator3.Current;
            int num4 = 2;
            bool flag;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 2:
                  flag = current is Label;
                  goto case 1;
                case 1:
                case 3:
                  if (flag)
                  {
                    ((Control) current).FontSize = (double) position_item;
                    num4 = 4;
                    continue;
                  }
                  goto label_22;
                case 4:
                  goto label_22;
                default:
                  num4 = 3;
                  continue;
              }
            }
label_22:;
          }
        }
        finally
        {
          if (enumerator3 is IDisposable disposable)
            disposable.Dispose();
        }
        foreach (UIElement child in this.panel_Player3.Children)
        {
          int num5 = 2;
          while (true)
          {
            switch (num5)
            {
              case 0:
              case 2:
                if (!(child is Label))
                  goto label_34;
                else
                  goto case 1;
              case 1:
              case 3:
                ((Control) child).FontSize = (double) position_item;
                num5 = 4;
                continue;
              case 4:
                goto label_34;
              default:
                num5 = 3;
                continue;
            }
          }
label_34:;
        }
        IEnumerator enumerator4 = this.panel_Player4.Children.GetEnumerator();
label_43:
        try
        {
          while (enumerator4.MoveNext())
          {
            UIElement current = (UIElement) enumerator4.Current;
            int num6 = 3;
            bool flag;
            while (true)
            {
              switch (num6)
              {
                case 0:
                case 3:
                  flag = current is Label;
                  goto case 1;
                case 1:
                case 2:
                  if (flag)
                  {
                    ((Control) current).FontSize = (double) position_item;
                    num6 = 4;
                    continue;
                  }
                  goto label_51;
                case 4:
                  goto label_50;
                default:
                  if (true)
                  {
                    num6 = 2;
                    continue;
                  }
                  goto label_50;
              }
            }
label_50:
label_51:;
          }
        }
        finally
        {
          if (enumerator4 is IDisposable disposable)
            disposable.Dispose();
        }
        foreach (UIElement child in this.panel_Player5.Children)
        {
          int num7 = 2;
          while (true)
          {
            switch (num7)
            {
              case 0:
              case 2:
                if (!(child is Label))
                  goto label_63;
                else
                  goto case 1;
              case 1:
              case 3:
                ((Control) child).FontSize = (double) position_item;
                if (true)
                {
                  num7 = 4;
                  continue;
                }
                goto case 0;
              case 4:
                goto label_63;
              default:
                num7 = 3;
                continue;
            }
          }
label_63:;
        }
        enumerator1 = this.panel_Player6.Children.GetEnumerator();
        num1 = 6;
      }
label_69:
      try
      {
        while (enumerator1.MoveNext())
        {
          UIElement current = (UIElement) enumerator1.Current;
          int num8 = 3;
          while (true)
          {
            switch (num8)
            {
              case 0:
              case 3:
                if (!(current is Label))
                  goto label_76;
                else
                  goto case 1;
              case 1:
              case 2:
                ((Control) current).FontSize = (double) position_item;
                if (true)
                {
                  num8 = 4;
                  continue;
                }
                goto label_75;
              case 4:
                goto label_75;
              default:
                if (true)
                {
                  num8 = 2;
                  continue;
                }
                goto case 1;
            }
          }
label_75:
label_76:;
        }
      }
      finally
      {
        if (enumerator1 is IDisposable disposable)
          disposable.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PopParser(int minsetup, Thickness pol)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.rectPlayerColor5.Margin = pol;
              this.rectPlayerColor6.Margin = pol;
              num2 = 7;
              continue;
            case 1:
            case 3:
              goto label_9;
            case 2:
            case 5:
              goto label_5;
            case 4:
              this.rectPlayerColor1.Height = (double) minsetup;
              int num3 = 6;
              num2 = Token.WriteContainer() ? num3 : num3;
              continue;
            case 6:
              this.rectPlayerColor2.Height = (double) minsetup;
              int num4 = 5;
              num2 = Token.WriteContainer() ? num4 : num4;
              continue;
            case 7:
              goto label_3;
            default:
              goto label_8;
          }
        }
label_5:
        this.rectPlayerColor3.Height = (double) minsetup;
        goto label_9;
label_8:
        num1 = 1;
        continue;
label_9:
        this.rectPlayerColor4.Height = (double) minsetup;
        this.rectPlayerColor5.Height = (double) minsetup;
        this.rectPlayerColor6.Height = (double) minsetup;
        this.rectPlayerColor1.Margin = pol;
        this.rectPlayerColor2.Margin = pol;
        this.rectPlayerColor3.Margin = pol;
        this.rectPlayerColor4.Margin = pol;
        num1 = 0;
      }
label_3:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConcatParser(int init_X)
    {
      int num1 = 5;
      if (true)
        goto label_10;
label_1:
      bool flag = init_X == 0;
      int num2 = 0;
label_9:
      num1 = num2;
label_10:
      Thickness thickness;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_4;
          case 1:
          case 2:
            goto label_6;
          case 3:
          case 6:
            goto label_3;
          case 4:
            this.brd_Player6.Margin = thickness;
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto label_3;
          case 5:
            goto label_1;
          case 7:
            goto label_13;
          default:
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_12;
        }
      }
label_3:
      this.brd_Player4.Margin = thickness;
      this.brd_Player5.Margin = thickness;
      num2 = 4;
      goto label_9;
label_4:
      if (flag)
      {
        num2 = 1;
        goto label_9;
      }
      else
      {
        thickness = new Thickness(5.0, 0.0, 5.0, (double) init_X);
        this.brd_Player1.Margin = new Thickness(5.0, (double) init_X, 5.0, (double) init_X);
        goto label_8;
      }
label_6:
      thickness = new Thickness(0.0, 0.0, 0.0, 0.0);
      this.brd_Player1.Margin = thickness;
      this.brd_Players.BorderThickness = new Thickness(0.0);
label_8:
      this.brd_Player2.Margin = thickness;
      this.brd_Player3.Margin = thickness;
      goto label_3;
label_13:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VerifyParser()
    {
      int num = 5;
      while (true)
      {
        bool flag;
        switch (num)
        {
          case 0:
          case 1:
            if (flag)
            {
              if (true)
              {
                num = 4;
                continue;
              }
              goto case 3;
            }
            else
            {
              this.CustomizeParser(this.Players[this.Players.IndexOf(this.ViewParser()) + 1]);
              break;
            }
          case 2:
          case 4:
            this.CustomizeParser(this.Players[0]);
            goto case 3;
          case 3:
            if (this.TestParser() != GameState.InitialArmyPlace)
            {
              this.ResolveExpression(this.MapExpression() + 1);
              break;
            }
            break;
          case 5:
            flag = this.Players.IndexOf(this.ViewParser()) + 1 == this.Players.Count;
            if (Token.ViewContainer())
            {
              num = 0;
              continue;
            }
            goto case 2;
          case 6:
            goto label_5;
          default:
            if (Token.ViewContainer())
            {
              num = 3;
              continue;
            }
            goto label_12;
        }
        this.CloneParser();
        num = 6;
      }
label_5:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool UpdateParser()
    {
      int num1 = 4;
      if (Token.ViewContainer())
        goto label_4;
label_1:
      bool flag1 = true;
      int num2 = 2;
label_3:
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_1;
          case 1:
          case 2:
            goto label_2;
          case 3:
            goto label_6;
          case 5:
            goto label_19;
          default:
            int num3 = 3;
            num1 = Token.WriteContainer() ? num3 : num3;
            continue;
        }
      }
label_2:
      List<Player>.Enumerator enumerator = this.Players.GetEnumerator();
label_6:
      try
      {
label_16:
        while (enumerator.MoveNext())
        {
          Player current = enumerator.Current;
          int num4 = 3;
          while (true)
          {
            int num5;
            int num6;
            switch (num4)
            {
              case 0:
              case 3:
                if (current.m_Producer <= 0)
                {
                  num6 = 0;
                  break;
                }
                goto case 1;
              case 1:
              case 2:
                num6 = !(current is Service) ? 1 : 0;
                break;
              case 4:
                goto label_18;
              default:
                num5 = 2;
                goto label_13;
            }
            if (num6 != 0)
            {
              flag1 = false;
              num5 = 4;
            }
            else
              goto label_16;
label_13:
            num4 = num5;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
label_18:
      bool flag2 = flag1;
      num2 = 5;
      goto label_3;
label_19:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CallParser()
    {
      int num1 = 6;
      while (true)
      {
        int num2;
        bool flag;
        int num3;
        switch (num1)
        {
          case 0:
          case 6:
            flag = this.ReadExpression() > 0;
            num2 = 2;
            goto label_4;
          case 1:
          case 2:
            if (flag)
            {
              if (this.TestParser() != GameState.InitialArmyPlace)
              {
                if (this.config == null)
                {
                  num3 = 0;
                  break;
                }
                if (true)
                {
                  num1 = 3;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_9;
            }
            else
            {
              this.SortParser();
              num1 = 7;
              continue;
            }
          case 3:
            num3 = this.config.IsBusy ? 1 : 0;
            break;
          case 4:
            goto label_15;
          case 5:
            goto label_13;
          case 7:
            goto label_17;
          default:
            num2 = 4;
            goto label_4;
        }
        if (num3 == 0)
        {
          this.SortParser();
          num2 = 5;
        }
        else
          goto label_15;
label_4:
        num1 = num2;
      }
label_9:
      this.SortParser();
      return;
label_13:
      return;
label_15:
      this.config.CancelAsync();
      return;
label_17:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SortParser()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        int num3;
        List<string> stringList;
        int count;
        int num4;
        List<Account>.Enumerator enumerator1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_36;
            case 1:
            case 3:
label_35:
              enumerator1 = this.InsertParser().GetEnumerator();
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_36;
            case 2:
            case 6:
              switch (num4)
              {
                case 1:
                  goto label_18;
                case 2:
                  goto label_19;
                case 3:
                  this.InitParser(string.Format("You have received {0} bonus armies from {1}, {2}, and {3}", (object) num3, (object) stringList[0], (object) stringList[1], (object) stringList[2]));
                  num2 = 10;
                  continue;
                case 4:
                  goto label_38;
                case 5:
                  goto label_39;
                default:
                  if (true)
                  {
                    num2 = 12;
                    continue;
                  }
                  goto label_35;
              }
            case 4:
              num4 = count;
              goto case 2;
            case 5:
              this.GetParser();
              if (Token.ViewContainer())
              {
                num2 = 8;
                continue;
              }
              goto case 2;
            case 7:
              goto label_40;
            case 8:
              if (this.TestParser() != GameState.InitialArmyPlace)
              {
                this.VerifyParser();
                if (!(this.ViewParser() is Service))
                {
                  stringList = new List<string>();
                  num3 = 0;
                  if (Token.ViewContainer())
                  {
                    num2 = 1;
                    continue;
                  }
                  goto label_31;
                }
                else
                  goto label_29;
              }
              else
                goto label_2;
            case 9:
              goto label_25;
            case 10:
            case 11:
            case 12:
              goto label_31;
            case 13:
              goto label_53;
            default:
              goto label_24;
          }
        }
label_2:
        if (this.ViewParser() is Service || this.ViewParser().m_Producer <= 0)
        {
          if (this.ViewParser() is Service)
          {
            this.VerifyParser();
            this.CallParser();
          }
          if (this.UpdateParser())
          {
            using (List<Player>.Enumerator enumerator2 = this.Players.GetEnumerator())
            {
label_15:
              while (enumerator2.MoveNext())
              {
                Player current = enumerator2.Current;
                int num5 = 3;
                bool flag;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                    case 3:
                      flag = current is Service;
                      goto case 1;
                    case 1:
                    case 2:
                      if (flag)
                      {
                        this.MapParser();
                        if (true)
                        {
                          num5 = 4;
                          continue;
                        }
                        goto case 0;
                      }
                      else
                        goto label_15;
                    case 4:
                      goto label_17;
                    default:
                      num5 = 2;
                      continue;
                  }
                }
              }
            }
label_17:
            this.RegisterParser().Sort();
            this.CustomizeParser(this.Players[this.Players.Count - 1]);
            num1 = 9;
            continue;
          }
          goto label_26;
        }
        else
          break;
label_18:
        this.InitParser(string.Format("You have received {0} bonus armies from capturing all of {1}", (object) num3, (object) stringList[0]));
        goto label_31;
label_19:
        this.InitParser(string.Format("You have received {0} bonus armies from capturing all of {1} and {2}", (object) num3, (object) stringList[0], (object) stringList[1]));
        goto label_31;
label_24:
        num1 = 2;
        continue;
label_31:
        bool flag1 = this.ReadExpression() > 0;
        num1 = 0;
        continue;
label_36:
        if (flag1)
        {
          this.WriteParser();
          num1 = 13;
          continue;
        }
        goto label_53;
label_38:
        this.InitParser(string.Format("You have received {0} bonus armies from {1}, {2}, {3}", (object) num3, (object) stringList[0], (object) stringList[1], (object) stringList[2]));
        this.InitParser(string.Format("and {0}", (object) stringList[3]));
        goto label_31;
label_39:
        this.InitParser(string.Format("You have received {0} bonus armies from {1}, {2}, {3}", (object) num3, (object) stringList[0], (object) stringList[1], (object) stringList[2]));
        this.InitParser(string.Format("{0} and {1}", (object) stringList[3], (object) stringList[4]));
        num1 = 11;
        continue;
label_40:
        try
        {
          while (enumerator1.MoveNext())
          {
            Account current = enumerator1.Current;
            int num6 = 3;
            while (true)
            {
              int num7 = num6;
              while (true)
              {
                switch (num7)
                {
                  case 0:
                  case 3:
                    goto label_47;
                  case 1:
                  case 2:
                    num3 += current._Reponse;
                    num7 = 5;
                    continue;
                  case 4:
                    stringList.Add(current.process);
                    goto case 1;
                  case 5:
                    goto label_49;
                  default:
                    goto label_45;
                }
              }
label_45:
              num6 = 1;
              continue;
label_47:
              if (this.AddParser(current))
                num6 = 4;
              else
                break;
            }
label_49:;
          }
        }
        finally
        {
          enumerator1.Dispose();
        }
        this.ViewParser().m_Producer += this.ViewParser().Territoriesowned / 3 + num3;
        this.ReflectParser(GameState.PlacingArmy);
        count = stringList.Count;
        num1 = 4;
      }
      this.InitParser(string.Format("It is now {0}'s turn.", (object) this.ViewParser().ResetExpression()));
      return;
label_25:
      this.DisableParser();
label_26:
      return;
label_29:
      this.CallParser();
      goto label_54;
label_53:
label_54:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PublishParser()
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_7;
            case 2:
              goto label_8;
            case 3:
            case 4:
              goto label_2;
            case 5:
              goto label_3;
            case 6:
              this.ViewParser()._Instance += this.ViewParser().Army_strength / 3;
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_2;
            case 7:
              goto label_9;
            default:
              goto label_6;
          }
        }
label_2:
        DateTime now;
        int num3;
        InitializerItemAuth initializerItemAuth = new InitializerItemAuth(now.ToString(), this.ViewParser().ResetExpression(), this.Players.Count.ToString(), num3.ToString(), this.MapExpression().ToString(), this.Map.ToString(), this.Gamemode.ToString());
        InitializerItemAuth.VerifyModel(initializerItemAuth);
        num1 = 2;
        continue;
label_3:
        now = DateTime.Now;
        goto label_2;
label_6:
        num1 = 4;
        continue;
label_7:
        num3 = this.ViewParser()._Instance / this.MapExpression();
        num1 = 5;
        continue;
label_8:
        AuthenticationContainerProducer.CompareModel(this._Candidate.MoveModel());
        RiskGame.Visitors.Decorator decorator = new RiskGame.Visitors.Decorator(initializerItemAuth, this.Players);
        Application.Current.MainWindow = (Window) decorator;
        this.Close();
        decorator.Show();
        num1 = 7;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RestartParser()
    {
      int num1 = 3;
      List<Role>.Enumerator enumerator;
      while (true)
      {
        bool flag;
        switch (num1)
        {
          case 0:
          case 1:
            this.CloneParser();
            try
            {
              this.PushSerializer(true);
            }
            catch (Exception ex)
            {
              int num2 = (int) MessageBox.Show("An error occurred loading the map.");
              this.Close();
              return;
            }
            this.ReflectParser(this._Candidate._Repository);
            flag = this.TestParser() == GameState.PlacingArmy;
            num1 = 4;
            continue;
          case 2:
          case 4:
            if (!flag)
              break;
            goto case 5;
          case 3:
            this.ForgotParser();
            num1 = 0;
            continue;
          case 5:
            this.CalcParser();
            break;
          case 6:
            goto label_12;
          default:
            num1 = 5;
            continue;
        }
        enumerator = this.RegisterParser().GetEnumerator();
        num1 = 6;
      }
label_12:
      try
      {
label_18:
        while (enumerator.MoveNext())
        {
          Role current = enumerator.Current;
          int num3 = 3;
          if (true)
            goto label_16;
label_14:
          current.configuration.Content = (object) current.writer;
          if (Token.ViewContainer())
          {
            num3 = 4;
            goto label_16;
          }
label_15:
          current.configuration.Background = (Brush) current.@class.Color;
          goto label_14;
label_16:
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 3:
                goto label_15;
              case 1:
              case 2:
                goto label_14;
              case 4:
                goto label_18;
              default:
                num3 = 2;
                continue;
            }
          }
        }
      }
      finally
      {
        enumerator.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CreateParser()
    {
      this.PatchParser().configuration.Background = (Brush) this.PatchParser().@class.Color;
      this.PatchParser().configuration.Content = (object) this.PatchParser().advisor;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void EnableParser() => this.ListParser().configuration.Content = (object) this.ListParser().writer;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateParser()
    {
      int num1 = 0;
      if (true)
        goto label_10;
label_1:
      GameState gameState1 = this.TestParser();
      int num2 = 3;
label_9:
      num1 = num2;
label_10:
      GameState gameState2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_1;
          case 1:
          case 3:
            goto label_6;
          case 2:
          case 5:
            if ((uint) (gameState2 - 1) <= 2U)
            {
              this.btnNumber.Content = (object) this.PatchParser().advisor;
              if (Token.ViewContainer())
              {
                num1 = 6;
                continue;
              }
              goto label_6;
            }
            else
              goto label_2;
          case 4:
            goto label_2;
          case 6:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_2:
      if (gameState2 != GameState.PlacingArmy)
        return;
      this.btnNumber.Content = (object) this.ListParser().advisor;
      return;
label_6:
      gameState2 = gameState1;
      num2 = 5;
      goto label_9;
label_3:
      return;
label_11:
      num2 = 4;
      goto label_9;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CloneParser()
    {
      int num1 = 0;
      if (false)
        return;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
label_26:
            num3 = this.Players.IndexOf(this.ViewParser());
            num2 = 5;
            break;
          case 1:
          case 5:
            foreach (Border child in this.panel_Players.Children)
            {
              int num4 = 2;
              if (true)
                goto label_14;
label_13:
              child.Background = this.panel_Players.Background;
              goto label_16;
label_14:
              while (true)
              {
                switch (num4)
                {
                  case 0:
                  case 2:
                    goto label_13;
                  case 1:
                  case 3:
                    goto label_16;
                  default:
                    num4 = 3;
                    continue;
                }
              }
label_16:;
            }
            this.panel_UI.Background = (Brush) this.ViewParser().Color;
            switch (num3)
            {
              case 0:
                this.brd_Player1.Background = (Brush) Brushes.LightBlue;
                num2 = 4;
                break;
              case 1:
                goto label_5;
              case 2:
                goto label_6;
              case 3:
                goto label_24;
              case 4:
                this.brd_Player5.Background = (Brush) Brushes.LightBlue;
                if (Token.ViewContainer())
                {
                  num1 = 6;
                  continue;
                }
                goto label_26;
              case 5:
                this.brd_Player6.Background = (Brush) Brushes.LightBlue;
                num1 = 7;
                continue;
              default:
                goto label_27;
            }
            break;
          case 2:
            goto label_18;
          case 3:
            goto label_4;
          case 4:
            goto label_2;
          case 6:
            goto label_28;
          case 7:
            goto label_29;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_5:
      this.brd_Player2.Background = (Brush) Brushes.LightBlue;
      return;
label_6:
      this.brd_Player3.Background = (Brush) Brushes.LightBlue;
      return;
label_18:
      return;
label_4:
      return;
label_2:
      return;
label_28:
      return;
label_29:
      return;
label_27:
      return;
label_24:
      this.brd_Player4.Background = (Brush) Brushes.LightBlue;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalcParser() => this.InitParser(string.Format("You have {0} armies to place.", (object) this.ViewParser().m_Producer));

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CompareParser()
    {
      int num1 = 3;
      bool policy;
      while (true)
      {
        int num2 = num1;
        GameState gameState;
        while (true)
        {
          switch (num2)
          {
            case 0:
              switch (gameState)
              {
                case GameState.Attacking:
                  this.btnStateDisp.Content = (object) "Attack";
                  this.btnStateDisp.Background = (Brush) new SolidColorBrush(Color.FromRgb((byte) 235, (byte) 64, (byte) 45));
                  this.btnState.Content = (object) "Confirm Attack";
                  int num3 = 14;
                  num2 = Token.WriteContainer() ? num3 : num3;
                  continue;
                case GameState.Conquer:
                  goto label_34;
                case GameState.Move:
                  this.btnStateDisp.Content = (object) "Move";
                  this.btnStateDisp.Background = (Brush) new SolidColorBrush(Color.FromRgb((byte) 245, (byte) 245, (byte) 78));
                  if (Token.ViewContainer())
                  {
                    num2 = 13;
                    continue;
                  }
                  goto label_14;
                case GameState.PlacingArmy:
                  this.btnStateDisp.Content = (object) "Place Armies";
                  this.btnStateDisp.Background = (Brush) new SolidColorBrush((Color) ColorConverter.ConvertFromString("#FF00B9FF"));
                  this.btnState.Content = (object) "Confirm Army Placement";
                  num2 = 1;
                  continue;
                case GameState.InitialArmyPlace:
                  this.btnStateDisp.Content = (object) "Setup Game Board";
                  this.btnStateDisp.Background = (Brush) new SolidColorBrush((Color) ColorConverter.ConvertFromString("#FF00B9FF"));
                  this.btnState.Content = (object) "Confirm Army Placement";
                  if (true)
                  {
                    num2 = 4;
                    continue;
                  }
                  goto label_30;
                default:
                  num2 = 15;
                  continue;
              }
            case 1:
              goto label_7;
            case 2:
              goto label_28;
            case 3:
              goto label_20;
            case 4:
              goto label_3;
            case 5:
            case 11:
              goto label_30;
            case 6:
label_14:
              this.InitParser("to move armies to or from");
              this.InitParser("your new territory.");
              if (Token.ViewContainer())
              {
                num2 = 16;
                continue;
              }
              goto label_15;
            case 7:
              goto label_11;
            case 8:
              goto label_21;
            case 9:
              goto label_25;
            case 10:
            case 13:
              this.btnState.Content = (object) "Confirm Fortify";
              if (this.ViewParser() is Human)
              {
                policy = ((Human) this.ViewParser()).policy;
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_20;
              }
              else
                goto label_36;
            case 12:
              goto label_5;
            case 14:
              if (this.ViewParser() is Human && ((Human) this.ViewParser()).policy)
              {
                this.InitParser("Click on the territory you wish to attack from.");
                if (Token.ViewContainer())
                {
                  num2 = 2;
                  continue;
                }
                goto label_25;
              }
              else
                goto label_16;
            case 15:
              goto label_33;
            case 16:
              goto label_35;
            default:
              goto label_10;
          }
        }
label_3:
        if (this.ViewParser() is Human && ((Human) this.ViewParser()).policy)
        {
          num1 = 9;
          continue;
        }
        break;
label_5:
        if (((Human) this.ViewParser()).policy)
        {
          this.InitParser("Click or + to select a territory and place armies.");
          this.InitParser("Right-Click or - to remove.");
          num1 = 7;
          continue;
        }
        goto label_11;
label_7:
        if (!(this.ViewParser() is Human))
          goto label_12;
        else
          goto label_5;
label_10:
        num1 = 12;
        continue;
label_20:
        gameState = this.TestParser();
        num1 = 0;
        continue;
label_21:
        this.btnStateDisp.Background = (Brush) new SolidColorBrush(Color.FromRgb((byte) 50, (byte) 250, (byte) 93));
        this.btnState.Content = (object) "Confirm Conquer";
        if (this.ViewParser() is Human && ((Human) this.ViewParser()).policy)
        {
          this.InitParser("Use Click, Right-Click, + and -");
          num1 = 6;
          continue;
        }
        goto label_37;
label_34:
        this.btnStateDisp.Content = (object) "Conquer";
        num1 = 8;
      }
      return;
label_33:
      return;
label_11:
label_12:
      this.InitParser(string.Format("You have {0} armies to place.", (object) this.ViewParser().m_Producer));
      return;
label_15:
      return;
label_36:
      return;
label_37:
      return;
label_16:
      return;
label_25:
      this.InitParser(string.Format("{0}, Click to place army.", (object) this.ViewParser().ResetExpression()));
      return;
label_28:
      this.InitParser("The territories you can attack will be highlighted.");
      return;
label_30:
      if (policy)
      {
        this.InitParser("Click to select a territory");
        this.InitParser("to move armies from.");
        this.InitParser("Click again to select where you");
        this.InitParser("wish to move them to.");
        this.InitParser("Use +- and L/R click");
        this.InitParser("to adjust the number moved.");
      }
      return;
label_35:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void GetParser()
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        List<Role>.Enumerator enumerator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 4:
              goto label_2;
            case 3:
              enumerator = this.RegisterParser().GetEnumerator();
              if (!Token.WriteContainer())
              {
                num2 = 4;
                continue;
              }
              goto label_16;
            case 5:
              goto label_9;
            default:
              goto label_14;
          }
        }
label_1:
        this.MoveParser();
        num1 = 5;
        continue;
label_2:
        try
        {
          while (enumerator.MoveNext())
          {
            Role current = enumerator.Current;
            int num3 = 2;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_4;
                case 1:
                case 3:
                  goto label_7;
                default:
                  int num4 = 3;
                  num3 = Token.WriteContainer() ? num4 : num4;
                  continue;
              }
            }
label_4:
            current.configuration.BorderBrush = (Brush) Brushes.Black;
label_7:;
          }
        }
        finally
        {
          enumerator.Dispose();
        }
        this.btnNumber.Content = (object) 0;
        goto label_1;
label_14:
        num1 = 0;
      }
label_9:
      return;
label_16:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private Role OrderParser(string spec)
    {
      spec = spec.Replace(' ', '_');
      Role role;
      try
      {
        int num1 = 0;
        int num2 = this.RegisterParser().Count - 1;
        while (num1 <= num2)
        {
          int int32 = Decimal.ToInt32(Math.Floor((Decimal) (num1 + num2) / 2M));
          if (string.Compare(spec, this.RegisterParser()[int32]._Exporter) < 0)
            num2 = int32 - 1;
          else if (string.Compare(spec, this.RegisterParser()[int32]._Exporter) > 0)
          {
            num1 = int32 + 1;
          }
          else
          {
            role = this.RegisterParser()[int32];
            goto label_22;
          }
        }
        throw new Schema();
      }
      catch (Schema ex)
      {
        using (List<Role>.Enumerator enumerator = this.RegisterParser().GetEnumerator())
        {
label_19:
          while (enumerator.MoveNext())
          {
            Role current = enumerator.Current;
            int num3 = 3;
            while (true)
            {
              int num4 = num3;
              while (true)
              {
                switch (num4)
                {
                  case 0:
                  case 3:
                    goto label_13;
                  case 1:
                  case 2:
                    goto label_17;
                  case 4:
                    goto label_22;
                  default:
                    if (Token.ViewContainer())
                    {
                      num4 = 2;
                      continue;
                    }
                    goto label_17;
                }
              }
label_13:
              bool flag = current._Exporter == spec;
label_17:
              if (flag)
              {
                role = current;
                num3 = 4;
              }
              else
                goto label_19;
            }
          }
        }
        throw new Exception();
      }
label_22:
      return role;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void NewParser(Role i, Button reg, Brush util, bool calcspec2)
    {
      int num1 = 1;
      if (true)
        goto label_6;
label_1:
label_2:
      reg.BorderBrush = util;
      int num2 = 6;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_10;
          case 1:
            goto label_9;
          case 2:
          case 4:
            goto label_3;
          case 3:
          case 5:
            goto label_1;
          case 6:
            goto label_8;
          default:
            int num3 = 5;
            num1 = Token.WriteContainer() ? num3 : num3;
            continue;
        }
      }
label_3:
      this.SelectParser(i);
      goto label_2;
label_8:
      return;
label_9:
      bool flag = calcspec2;
      num2 = 0;
      goto label_5;
label_10:
      if (!flag)
      {
        this.CheckParser(i);
        goto label_1;
      }
      else
      {
        num2 = 4;
        goto label_5;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InitParser(string first)
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            if (this.txtOutput.Text != null)
            {
              num1 = 1;
              continue;
            }
            num2 = 1;
            break;
          case 1:
            num2 = this.txtOutput.Text == "" ? 1 : 0;
            break;
          case 2:
          case 3:
label_1:
            goto case 5;
          case 5:
            this.scrlOutput.ScrollToEnd();
            num1 = 6;
            continue;
          case 6:
            goto label_5;
          default:
            num1 = 2;
            continue;
        }
        if (num2 == 0)
        {
          TextBlock txtOutput = this.txtOutput;
          txtOutput.Text = txtOutput.Text + "\n" + first;
          goto label_1;
        }
        else
        {
          this.txtOutput.Text = first;
          num1 = 5;
        }
      }
label_5:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MoveParser()
    {
      this.CheckParser((Role) null);
      this.SelectParser((Role) null);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ReflectParser(GameState res)
    {
      int num1 = 3;
      if (Token.ViewContainer())
        goto label_6;
label_1:
      bool flag = this.TestParser() == GameState.Conquer;
      int num2 = 2;
label_5:
      num1 = num2;
label_6:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            this.AwakeParser(res);
            int num3 = 4;
            num1 = Token.WriteContainer() ? num3 : num3;
            continue;
          case 1:
          case 4:
            goto label_1;
          case 2:
            if (!flag)
              break;
            goto case 5;
          case 5:
            this.CreateParser();
            break;
          case 6:
            goto label_4;
          default:
            goto label_7;
        }
        this.CompareParser();
        if (true)
          num1 = 6;
        else
          goto label_10;
      }
label_4:
      return;
label_7:
      num2 = 5;
      goto label_5;
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ManageParser()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              foreach (string spec in this.ListParser().m_Worker)
              {
                int num3 = 4;
                if (Token.ViewContainer())
                  goto label_14;
label_10:
                Role role = this.OrderParser(spec);
                if (Token.ViewContainer())
                {
                  num3 = 2;
                  goto label_14;
                }
label_11:
                role.configuration.BorderBrush = (Brush) Brushes.Aqua;
                num3 = 5;
label_14:
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 4:
                      goto label_10;
                    case 1:
                    case 2:
                      goto label_12;
                    case 3:
                      goto label_11;
                    case 5:
                      goto label_16;
                    default:
                      if (Token.ViewContainer())
                      {
                        num3 = 3;
                        continue;
                      }
                      goto label_16;
                  }
                }
label_12:
                if (role.@class != this.ViewParser())
                {
                  flag1 = true;
                  goto label_11;
                }
                else
                  goto label_17;
label_16:
label_17:;
              }
              flag2 = !flag1;
              num2 = 1;
              continue;
            case 1:
            case 2:
              goto label_3;
            case 3:
            case 5:
              goto label_1;
            case 4:
              flag1 = false;
              int num4 = 0;
              num2 = Token.WriteContainer() ? num4 : num4;
              continue;
            case 6:
              goto label_22;
            default:
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 0;
          }
        }
label_1:
        this.InitParser("There is nowhere to attack from here.");
        num1 = 6;
        continue;
label_3:
        if (!flag2)
          break;
        goto label_1;
      }
      return;
label_22:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool SetupParser(Role item)
    {
      int num1 = 3;
      if (Token.ViewContainer())
        goto label_4;
label_1:
      Token.m_Error.Add(item);
      int num2 = 0;
label_3:
      num1 = num2;
label_4:
      bool flag1;
      List<string>.Enumerator enumerator;
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            flag1 = false;
            enumerator = item.m_Worker.GetEnumerator();
            goto case 2;
          case 2:
          case 4:
            try
            {
              while (enumerator.MoveNext())
              {
                string current = enumerator.Current;
                int num3 = 0;
                if (true)
                  goto label_11;
label_8:
                Role role;
                if (role.@class == this.ViewParser())
                {
                  flag1 = true;
                  role.configuration.BorderBrush = (Brush) Brushes.Aqua;
                  this.SetupParser(role);
                  num3 = 6;
                }
                else
                  goto label_15;
label_11:
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                      role = this.OrderParser(current);
                      num3 = 3;
                      continue;
                    case 1:
                    case 3:
                      if (Token.m_Error.Contains(role))
                        goto label_16;
                      else
                        goto case 2;
                    case 2:
                    case 5:
                      Token.m_Error.Add(role);
                      num3 = 4;
                      continue;
                    case 4:
                      goto label_8;
                    case 6:
                      goto label_15;
                    default:
                      if (Token.ViewContainer())
                      {
                        num3 = 5;
                        continue;
                      }
                      goto case 2;
                  }
                }
label_15:
label_16:;
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            flag2 = flag1;
            if (Token.ViewContainer())
            {
              num1 = 5;
              continue;
            }
            goto label_20;
          case 3:
            goto label_1;
          case 5:
            goto label_20;
          default:
            goto label_5;
        }
      }
label_5:
      num2 = 4;
      goto label_3;
label_20:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void IncludeParser(int positioni)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        GameState gameState;
        int num3;
        List<PredicateMessageComp>.Enumerator enumerator;
        bool flag1;
        while (true)
        {
          bool flag2;
          bool flag3;
          switch (num2)
          {
            case 0:
            case 6:
              flag2 = positioni >= 1;
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto case 8;
            case 1:
            case 2:
              goto label_1;
            case 3:
              if (flag1)
              {
                this.CreateParser();
                if (true)
                {
                  num2 = 12;
                  continue;
                }
                goto label_33;
              }
              else
                goto label_20;
            case 4:
              goto label_44;
            case 5:
              if (!flag3)
                break;
              goto label_35;
            case 7:
              if (flag2)
              {
                if (this.ListParser().writer >= 2)
                {
                  if (this.Gamemode == GameMode.Classic && this.TestParser() == GameState.Attacking && this.PatchParser().advisor >= 3)
                    goto label_27;
                }
                else
                  goto label_25;
              }
              if (positioni <= -1)
              {
                if (this.PatchParser().advisor > 1)
                {
                  if (this.Gamemode != GameMode.Classic || this.TestParser() != GameState.Conquer)
                    break;
                  goto label_10;
                }
                else
                {
                  gameState = this.TestParser();
                  int num4 = 1;
                  num2 = Token.WriteContainer() ? num4 : num4;
                  continue;
                }
              }
              else
                goto label_41;
            case 8:
              this.PatchParser().advisor += positioni;
              this.InstantiateParser();
              this.EnableParser();
              if (Token.ViewContainer())
              {
                num2 = 9;
                continue;
              }
              goto label_8;
            case 9:
              goto label_33;
            case 10:
              try
              {
                while (enumerator.MoveNext())
                {
                  PredicateMessageComp current = enumerator.Current;
                  int num5 = 3;
                  while (true)
                  {
                    switch (num5)
                    {
                      case 0:
                      case 3:
                        if (!(current is ParserContainerDeSerializer))
                          goto label_18;
                        else
                          goto case 1;
                      case 1:
                      case 2:
                        ++num3;
                        if (true)
                        {
                          num5 = 4;
                          continue;
                        }
                        goto case 0;
                      case 4:
                        goto label_17;
                      default:
                        if (Token.ViewContainer())
                        {
                          num5 = 2;
                          continue;
                        }
                        goto label_17;
                    }
                  }
label_17:
label_18:;
                }
              }
              finally
              {
                enumerator.Dispose();
              }
              flag3 = this.PatchParser().advisor <= num3;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto case 7;
            case 11:
              goto label_45;
            case 12:
              goto label_42;
            default:
              if (Token.ViewContainer())
              {
                num2 = 4;
                continue;
              }
              goto label_39;
          }
label_41:
          this.ListParser().writer -= positioni;
          if (true)
            num2 = 8;
          else
            goto label_42;
        }
label_1:
        switch (gameState)
        {
          case GameState.Attacking:
            goto label_3;
          case GameState.Conquer:
            goto label_4;
          case GameState.Move:
            this.InitParser("You must move at least one army, if you wish to cancel click 'cancel'");
            num1 = 11;
            continue;
          default:
            goto label_2;
        }
label_10:
        num3 = 0;
        enumerator = this.reg.GetEnumerator();
        num1 = 10;
        continue;
label_33:
        flag1 = this.TestParser() == GameState.Conquer;
        num1 = 3;
      }
label_2:
      return;
label_3:
      this.InitParser("You cannot attack with less than one army.");
      this.InitParser("Click cancel to stop the attack.");
      return;
label_4:
      this.InitParser("You must keep at least one army in the new territory.");
      return;
label_8:
      return;
label_25:
      this.InitParser("At least one army must remain in a friendly territory.");
      return;
label_27:
      this.InitParser("You can attack with a maximum of 3 armies at once.");
      return;
label_20:
      return;
label_35:
      this.InitParser("You must move at least as many armies used to attack into the new territory.");
      return;
label_44:
      return;
label_45:
      return;
label_39:
      return;
label_42:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RateParser()
    {
      int num1 = 9;
      List<Role>.Enumerator enumerator;
      while (true)
      {
        int num2 = num1;
        GameState gameState;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 9:
              goto label_26;
            case 1:
              goto label_27;
            case 2:
            case 5:
              goto label_1;
            case 3:
              goto label_31;
            case 4:
              goto label_17;
            case 6:
              goto label_19;
            case 7:
              switch (gameState)
              {
                case GameState.Attacking:
                  goto label_15;
                case GameState.Conquer:
                  goto label_33;
                case GameState.Move:
                  if (this.ListParser() != null)
                  {
                    num2 = 1;
                    continue;
                  }
                  goto label_37;
                case GameState.PlacingArmy:
                  enumerator = this.RegisterParser().GetEnumerator();
                  if (true)
                  {
                    num2 = 5;
                    continue;
                  }
                  goto label_26;
                default:
                  goto label_24;
              }
            case 8:
              goto label_28;
            case 10:
              goto label_36;
            default:
              goto label_22;
          }
        }
label_15:
        if (this.ListParser() != null)
        {
          num1 = 4;
          continue;
        }
        goto label_12;
label_17:
        if (this.PatchParser() != null)
        {
          this.ListParser().writer += this.PatchParser().advisor;
          this.PatchParser().advisor = 0;
          num1 = 6;
          continue;
        }
        goto label_32;
label_22:
        num1 = 3;
        continue;
label_26:
        gameState = this.TestParser();
        num1 = 7;
        continue;
label_27:
        bool flag = this.PatchParser() != null;
        num1 = 8;
        continue;
label_28:
        if (flag)
        {
          this.ListParser().writer += this.PatchParser().advisor;
          this.EnableParser();
          this.PatchParser().advisor = 0;
        }
        this.GetParser();
        num1 = 10;
      }
label_1:
      try
      {
        while (enumerator.MoveNext())
        {
          Role current = enumerator.Current;
          int num3 = 4;
          while (true)
          {
            int num4 = num3;
            bool flag;
            while (true)
            {
              switch (num4)
              {
                case 0:
                case 4:
                  goto label_9;
                case 1:
                case 3:
                  if (flag)
                  {
                    this.ViewParser().m_Producer += current.advisor;
                    goto case 2;
                  }
                  else
                    goto label_10;
                case 2:
                  current.advisor = 0;
                  int num5 = 5;
                  num4 = Token.WriteContainer() ? num5 : num5;
                  continue;
                case 5:
                  goto label_10;
                default:
                  goto label_7;
              }
            }
label_7:
            num3 = 2;
            continue;
label_9:
            flag = current.@class == this.ViewParser();
            num3 = 3;
          }
label_10:;
        }
      }
      finally
      {
        enumerator.Dispose();
      }
      this.GetParser();
      return;
label_12:
      return;
label_19:
      this.EnableParser();
      this.PatchParser().configuration.Content = (object) this.PatchParser().writer;
      goto label_31;
label_24:
      return;
label_31:
label_32:
      this.GetParser();
      return;
label_33:
      this.InitParser("You must move armies into the newly captured territory.");
      return;
label_37:
      return;
label_36:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool AddParser(Account var1)
    {
      int num1 = 3;
      bool flag1;
      List<Role>.Enumerator enumerator;
      bool flag2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            flag1 = true;
            num1 = 4;
            continue;
          case 1:
          case 2:
            try
            {
label_8:
              while (enumerator.MoveNext())
              {
                Role current = enumerator.Current;
                int num2 = 3;
                while (true)
                {
                  switch (num2)
                  {
                    case 0:
                    case 3:
                      if (current.@class == this.ViewParser())
                        goto label_8;
                      else
                        goto case 1;
                    case 1:
                    case 2:
                      flag1 = false;
                      num2 = 4;
                      continue;
                    case 4:
                      goto label_10;
                    default:
                      num2 = 2;
                      continue;
                  }
                }
              }
            }
            finally
            {
              enumerator.Dispose();
            }
label_10:
            flag2 = flag1;
            num1 = 5;
            continue;
          case 4:
            enumerator = var1._Product.GetEnumerator();
            goto case 1;
          case 5:
            goto label_14;
          default:
            num1 = 1;
            continue;
        }
      }
label_14:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool ExcludeParser()
    {
      int num1 = 3;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        bool flag3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              flag1 = true;
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_8;
            case 1:
            case 6:
              if (!flag3)
              {
                flag1 = false;
                num2 = 7;
                continue;
              }
              if (!((string) this.btnDieStatus.Content == "Continue to Attack"))
              {
                flag2 = (string) this.btnDieStatus.Content == "Continue to Conquer";
                goto case 2;
              }
              else
                goto label_12;
            case 2:
              if (flag2)
              {
                this.InitParser("You must conquer the territory.");
                goto case 0;
              }
              else
                goto case 0;
            case 3:
              goto label_8;
            case 4:
            case 5:
            case 7:
              goto label_14;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 2;
        continue;
label_8:
        flag3 = this.panel_Die.Visibility == Visibility.Visible;
        num1 = 6;
        continue;
label_12:
        this.InitParser("Click \"continue to attack\" to proceed.");
        num1 = 0;
      }
label_14:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void WriteParser()
    {
      int num1 = 4;
      if (true)
        goto label_3;
label_1:
      this.config.CancelAsync();
      goto label_6;
label_2:
      int num2;
      num1 = num2;
label_3:
      switch (num1)
      {
        case 0:
        case 2:
          break;
        case 1:
        case 3:
          goto label_1;
        case 4:
          this.pb_Timer.Value = 0.0;
          num2 = 3;
          goto label_2;
        case 5:
          return;
        default:
          num2 = 0;
          goto label_2;
      }
label_6:
      this.config.RunWorkerAsync();
      num2 = 5;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ValidateParser(object ident, DoWorkEventArgs cont)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              num3 = 0;
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 1;
            case 1:
            case 3:
            case 4:
              if (num3 < this.ReadExpression())
              {
                if (this.config.CancellationPending)
                {
                  if (Token.ViewContainer())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto case 0;
                }
                else
                  goto label_10;
              }
              else
                goto label_7;
            case 2:
            case 5:
              goto label_8;
            case 6:
              goto label_1;
            case 7:
              goto label_2;
            default:
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto label_15;
          }
        }
label_1:
        int int32;
        (ident as BackgroundWorker).ReportProgress(int32);
        Thread.Sleep(10);
        ++num3;
        num1 = 4;
        continue;
label_7:
        num1 = 7;
        continue;
label_10:
        while (this.visitor)
          Thread.Sleep(100);
        int32 = Convert.ToInt32((double) num3 / (double) this.ReadExpression() * 100.0);
        goto label_1;
      }
label_8:
      cont.Cancel = true;
      return;
label_2:
      return;
label_15:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResetParser(object reference, ProgressChangedEventArgs ord) => this.pb_Timer.Value = (double) ord.ProgressPercentage;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InterruptParser(object param, RunWorkerCompletedEventArgs visitor)
    {
      int num1 = 3;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 3:
            flag = this.TestParser() == GameState.Conquer;
            num2 = 4;
            break;
          case 1:
          case 4:
            if (!flag)
            {
              if (!this.ExcludeParser())
              {
                num1 = 5;
                continue;
              }
              goto label_12;
            }
            else
              goto label_7;
          case 2:
            this.SortParser();
            num2 = 6;
            break;
          case 5:
            this.RateParser();
            goto case 2;
          case 6:
            goto label_11;
          default:
            num1 = 2;
            continue;
        }
        num1 = num2;
      }
label_7:
      this.InitParser("Move your armies to end your turn.");
      return;
label_12:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DeleteParser(object info, RoutedEventArgs cust)
    {
      int num1 = 23;
      Role role;
      Button configuration;
      while (true)
      {
        int num2 = num1;
        GameState gameState;
        bool flag1;
        bool flag2;
        bool flag3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_50;
            case 1:
              goto label_1;
            case 2:
              goto label_40;
            case 3:
            case 16:
              goto label_6;
            case 4:
              goto label_34;
            case 5:
              if (!flag1)
              {
                if (this.ListParser() == null)
                {
                  this.GetParser();
                  this.NewParser(role, configuration, (Brush) Brushes.Lime, false);
                  num2 = 14;
                  continue;
                }
                if (configuration.BorderBrush != Brushes.Green)
                {
                  if (configuration.BorderBrush != Brushes.Aqua)
                  {
                    this.InitParser("You cannot move armies to here from your selected territory.");
                    num2 = 25;
                    continue;
                  }
                  if (this.PatchParser() == null)
                  {
                    this.NewParser(role, configuration, (Brush) Brushes.Green, true);
                    this.IncludeParser(1);
                    if (true)
                    {
                      num2 = 18;
                      continue;
                    }
                    goto label_13;
                  }
                  else
                    goto label_33;
                }
                else
                  goto label_30;
              }
              else
                goto label_25;
            case 6:
              if (flag2)
              {
                if (this.ViewParser() is Human)
                {
                  if (true)
                  {
                    num2 = 24;
                    continue;
                  }
                  goto label_38;
                }
                else
                  goto label_75;
              }
              else
                goto label_74;
            case 7:
              goto label_43;
            case 8:
              goto label_28;
            case 9:
              goto label_89;
            case 10:
              goto label_60;
            case 11:
              goto label_26;
            case 12:
              goto label_64;
            case 13:
              goto label_8;
            case 14:
              goto label_56;
            case 15:
              goto label_69;
            case 17:
              configuration = role.configuration;
              gameState = this.TestParser();
              int num3 = 20;
              num2 = Token.WriteContainer() ? num3 : num3;
              continue;
            case 18:
              goto label_90;
            case 19:
              this.CallParser();
              int num4 = 9;
              num2 = Token.WriteContainer() ? num4 : num4;
              continue;
            case 20:
              switch (gameState)
              {
                case GameState.Attacking:
                  flag3 = this.ExcludeParser();
                  num2 = 10;
                  continue;
                case GameState.Conquer:
                  goto label_77;
                case GameState.Move:
                  goto label_27;
                case GameState.PlacingArmy:
                  if (role == this.ListParser())
                  {
                    if (true)
                    {
                      num2 = 12;
                      continue;
                    }
                    goto label_43;
                  }
                  else
                    goto label_65;
                case GameState.InitialArmyPlace:
                  this.CheckParser(role);
                  if (Token.ViewContainer())
                  {
                    num2 = 16;
                    continue;
                  }
                  goto label_4;
                default:
                  goto label_54;
              }
            case 21:
              goto label_57;
            case 22:
              goto label_91;
            case 23:
              goto label_38;
            case 24:
              goto label_71;
            case 25:
              goto label_76;
            default:
              goto label_23;
          }
        }
label_1:
        bool flag4 = role.writer > 1;
        num1 = 21;
        continue;
label_6:
        if (this.ListParser().@class == null || this.ListParser().@class == this.ViewParser())
        {
          this.ConnectParser(this.ListParser(), 1);
          this.VerifyParser();
          num1 = 19;
          continue;
        }
        goto label_39;
label_23:
        num1 = 15;
        continue;
label_25:
        num1 = 13;
        continue;
label_27:
        flag1 = role.@class != this.ViewParser();
        num1 = 5;
        continue;
label_33:
        this.InitParser("You must finish or cancel your current move before selecting another territory.");
        num1 = 0;
        continue;
label_34:
        this.ManageParser();
        num1 = 2;
        continue;
label_38:
        role = this.OrderParser(((FrameworkElement) info).Name.TrimStart('b', 't', 'n'));
        num1 = 17;
        continue;
label_56:
        flag2 = this.SetupParser(this.ListParser());
        num1 = 6;
        continue;
label_57:
        if (flag4)
        {
          this.RateParser();
          this.NewParser(role, configuration, (Brush) Brushes.Lime, false);
          num1 = 4;
          continue;
        }
        goto label_14;
label_60:
        if (!flag3)
        {
          if (role.@class != this.ViewParser())
          {
            if (this.ListParser() != null)
            {
              if (this.PatchParser() == null)
              {
                if (role.@class != null)
                {
                  if (configuration.BorderBrush == Brushes.Aqua)
                    this.NewParser(role, configuration, (Brush) Brushes.Red, true);
                  else
                    goto label_48;
                }
                else
                  goto label_49;
              }
              else
                goto label_51;
            }
            else
            {
              this.InitParser("You do not own this territory");
              this.InitParser("Select where you wish to attack from");
              num1 = 11;
              continue;
            }
          }
          else
          {
            num1 = 1;
            continue;
          }
        }
        else
          goto label_11;
label_69:
        if (this.Gamemode == GameMode.NewRisk)
        {
          num1 = 7;
          continue;
        }
        goto label_44;
label_71:
        if (((Human) this.ViewParser()).policy)
          this.InitParser("You can move armies to the highlighted territories.");
        goto label_75;
label_74:
        this.InitParser("There are no friendly territories to move to from here.");
        this.GetParser();
label_75:
        Token.m_Error = new List<Role>();
        num1 = 8;
      }
label_54:
      return;
label_4:
      return;
label_8:
      this.InitParser("You do not own this territory.");
      return;
label_13:
      return;
label_14:
      this.InitParser("You do not have enough armies to attack from here.");
      return;
label_50:
      return;
label_40:
      return;
label_28:
      return;
label_89:
      return;
label_90:
      return;
label_91:
      return;
label_26:
      return;
label_30:
      this.FindParser(true);
      return;
label_39:
      this.InitParser("You cannot capture this territory.");
      this.GetParser();
      return;
label_43:
      this.IncludeParser(this.ListParser().writer - 1);
      goto label_46;
label_44:
      if (this.Gamemode == GameMode.Classic)
        this.IncludeParser(Math.Min(this.ListParser().writer - 1, 3));
label_46:
      if (!(this.ViewParser() is Human) || !((Human) this.ViewParser()).policy)
        return;
      this.InitParser("Select the number of armies you wish to attack with.");
      return;
label_48:
      this.InitParser("You cannot attack this territory from here");
      return;
label_49:
      this.InitParser("There is nothing here to attack.");
      return;
label_51:
      if (this.PatchParser() == role && configuration.BorderBrush == Brushes.Red)
      {
        this.FindParser(true);
        return;
      }
      this.InitParser("You must cancel your previous selection before attacking a different territory.");
      return;
label_11:
      return;
label_64:
      this.FindParser(true);
      return;
label_65:
      this.GetParser();
      if (role.@class == null || role.@class == this.ViewParser())
      {
        this.NewParser(role, configuration, (Brush) Brushes.Lime, false);
        this.FindParser(true);
        this.InstantiateParser();
        return;
      }
      this.InitParser("This is not your territory.");
      this.GetParser();
      return;
label_76:
      return;
label_77:
      try
      {
        bool flag5 = role == this.PatchParser();
        int num5 = 2;
        while (true)
        {
          int num6 = num5;
          bool flag6;
          while (true)
          {
            switch (num6)
            {
              case 0:
              case 2:
                if (!flag5)
                {
                  flag6 = role == this.ListParser();
                  goto case 4;
                }
                else
                  goto label_81;
              case 1:
              case 3:
                goto label_82;
              case 4:
                if (flag6)
                {
                  this.FindParser(false);
                  int num7 = 5;
                  num6 = Token.WriteContainer() ? num7 : num7;
                  continue;
                }
                goto label_92;
              case 5:
                goto label_87;
              default:
                num6 = 4;
                continue;
            }
          }
label_81:
          num5 = 3;
        }
label_92:
        return;
label_82:
        this.FindParser(true);
        return;
label_87:;
      }
      catch (NullReferenceException ex)
      {
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountParser(object init, MouseEventArgs reg)
    {
      int num1 = 3;
      Role role;
      bool flag1;
      while (true)
      {
        GameState gameState;
        int num2;
        switch (num1)
        {
          case 0:
            goto label_42;
          case 1:
          case 2:
            Button configuration = role.configuration;
            gameState = this.TestParser();
            num2 = 6;
            break;
          case 3:
            role = this.OrderParser(((FrameworkElement) init).Name.TrimStart('b', 't', 'n'));
            num2 = 2;
            break;
          case 4:
            goto label_2;
          case 5:
          case 7:
            if (role != this.ListParser())
            {
              if (role == this.PatchParser())
              {
                this.FindParser(false);
                num2 = 8;
                break;
              }
              goto label_50;
            }
            else
              goto label_39;
          case 6:
            switch (gameState)
            {
              case GameState.Attacking:
                goto label_4;
              case GameState.Conquer:
                goto label_22;
              case GameState.Move:
                if (this.ListParser() != null && this.PatchParser() != null)
                {
                  num1 = 7;
                  continue;
                }
                goto label_57;
              case GameState.PlacingArmy:
                flag1 = role == this.ListParser();
                if (true)
                {
                  num1 = 0;
                  continue;
                }
                goto label_49;
              default:
                goto label_56;
            }
          case 8:
            goto label_49;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_2:
      return;
label_4:
      try
      {
        bool flag2 = !this.ExcludeParser();
        int num3 = 5;
        while (true)
        {
          int num4 = num3;
          while (true)
          {
            switch (num4)
            {
              case 0:
                goto label_21;
              case 1:
                goto label_19;
              case 2:
                goto label_3;
              case 3:
                goto label_51;
              case 4:
                goto label_9;
              case 5:
                if (flag2)
                {
                  if (role == this.PatchParser())
                  {
                    num4 = 4;
                    continue;
                  }
                  if (role == this.ListParser())
                  {
                    if (this.Gamemode != GameMode.Classic || this.PatchParser().advisor != 3)
                    {
                      this.FindParser(true);
                      num4 = 6;
                      continue;
                    }
                    goto label_16;
                  }
                  else
                    goto label_18;
                }
                else
                  goto label_52;
              case 6:
                goto label_17;
              default:
                if (true)
                {
                  num4 = 1;
                  continue;
                }
                goto label_13;
            }
          }
label_16:
          this.InitParser("You cannot attack with more than 3 armies at a time.");
          num3 = 0;
        }
label_52:
        return;
label_9:
        this.FindParser(false);
        return;
label_21:
        return;
label_19:
        return;
label_3:
        return;
label_51:
        return;
label_13:
        return;
label_18:
        return;
label_17:
        return;
      }
      catch (NullReferenceException ex)
      {
        return;
      }
label_22:
      try
      {
        bool flag3 = role == this.PatchParser();
        int num5 = 3;
        while (true)
        {
          int num6 = num5;
          bool flag4;
          while (true)
          {
            switch (num6)
            {
              case 0:
              case 2:
                if (flag4)
                {
                  this.FindParser(true);
                  if (true)
                  {
                    num6 = 5;
                    continue;
                  }
                  goto label_27;
                }
                else
                  goto label_53;
              case 1:
                goto label_54;
              case 3:
                if (flag3)
                {
                  this.FindParser(false);
                  num6 = 4;
                  continue;
                }
                flag4 = role == this.ListParser();
                goto case 0;
              case 4:
                goto label_55;
              case 5:
                goto label_33;
              default:
                goto label_32;
            }
          }
label_32:
          num5 = 0;
        }
label_53:
        return;
label_27:
        return;
label_54:
        return;
label_55:
        return;
label_33:
        return;
      }
      catch (NullReferenceException ex)
      {
        return;
      }
label_57:
      return;
label_39:
      this.FindParser(true);
      goto label_50;
label_42:
      if (!flag1)
        return;
      this.FindParser(false);
      goto label_2;
label_56:
      return;
label_49:
label_50:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DestroyParser(object spec, RoutedEventArgs caller)
    {
      int num1 = 2;
      if (Token.ViewContainer())
        goto label_22;
label_1:
      bool flag1;
      if (flag1)
      {
        this.InitParser("You must select a territory to move armies to.");
        return;
      }
      this.ConnectParser(this.PatchParser(), this.PatchParser().advisor);
      this.PatchParser().advisor = 0;
      this.QueryParser();
      if (true)
      {
        num1 = 25;
        goto label_22;
      }
label_4:
      int num2;
      int num3 = this.PatchParser().writer - num2;
      num1 = 5;
label_22:
      int num4;
      double num5;
      Style style1;
      while (true)
      {
        bool flag2;
        int num6;
        Style resource;
        bool flag3;
        List<Player>.Enumerator enumerator;
        GameState gameState;
        bool flag4;
        bool flag5;
        bool flag6;
        Style style2;
        switch (num1)
        {
          case 0:
            goto label_59;
          case 1:
            goto label_4;
          case 2:
            gameState = this.TestParser();
            num6 = 4;
            break;
          case 3:
            if (!flag6)
            {
              if (this.Gamemode == GameMode.Classic && !this.ExcludeParser())
              {
                this.panel_NumberSelection.Visibility = Visibility.Collapsed;
                this.panel_Die.Visibility = Visibility.Visible;
                this.reg.Clear();
                this.reg = new List<PredicateMessageComp>()
                {
                  (PredicateMessageComp) this._Invocation,
                  (PredicateMessageComp) this.list
                };
                flag2 = this.PatchParser().writer > 1;
                num6 = 21;
                break;
              }
              goto label_53;
            }
            else
            {
              double num7 = Token.interceptor.NextDouble();
              num5 = 1.0 / (1.0 + Math.Exp(-3.0 * ((double) (this.PatchParser().advisor - this.PatchParser().writer) / (double) this.PatchParser().writer - this.PushParser())));
              flag3 = num7 <= num5;
              num6 = 20;
              break;
            }
          case 4:
            switch (gameState)
            {
              case GameState.Attacking:
                if (this.ListParser() != null && this.PatchParser() != null)
                {
                  flag6 = this.Gamemode == GameMode.NewRisk;
                  num6 = 3;
                  break;
                }
                goto label_34;
              case GameState.Conquer:
                this.ConnectParser(this.PatchParser(), this.PatchParser().advisor);
                num6 = 10;
                break;
              case GameState.Move:
                if (this.ListParser() != null)
                {
                  flag1 = this.PatchParser() == null;
                  num6 = 17;
                  break;
                }
                num6 = 7;
                break;
              case GameState.PlacingArmy:
                foreach (Role config in this.RegisterParser())
                {
                  int num8 = 3;
                  while (true)
                  {
                    int num9 = num8;
                    bool flag7;
                    while (true)
                    {
                      switch (num9)
                      {
                        case 0:
                        case 2:
                          config.advisor = 0;
                          if (Token.ViewContainer())
                          {
                            num9 = 5;
                            continue;
                          }
                          goto label_68;
                        case 1:
                        case 4:
                          if (flag7)
                          {
                            this.ConnectParser(config, config.advisor);
                            goto case 0;
                          }
                          else
                            goto label_74;
                        case 3:
                          goto label_68;
                        case 5:
                          goto label_74;
                        default:
                          goto label_73;
                      }
                    }
label_68:
                    flag7 = config.@class == this.ViewParser();
                    num8 = 4;
                    continue;
label_73:
                    num8 = 0;
                  }
label_74:;
                }
                if (this.ViewParser().m_Producer != 0)
                {
                  this.GetParser();
                  num6 = 12;
                  break;
                }
                num6 = 0;
                break;
              default:
                goto label_7;
            }
            break;
          case 5:
          case 13:
            this.InitParser(string.Format("You have lost this battle, the enemy suffered {0} casualties.", (object) num3));
            this.PatchParser().writer = num2;
            if (true)
            {
              num1 = 18;
              continue;
            }
            goto case 23;
          case 6:
            goto label_82;
          case 7:
            goto label_38;
          case 8:
            goto label_24;
          case 9:
            enumerator = this.Players.GetEnumerator();
            num6 = 24;
            break;
          case 10:
            this.PatchParser().advisor = 0;
            this.PatchParser().configuration.Background = (Brush) this.PatchParser().@class.Color;
            this.PatchParser().configuration.Content = (object) this.PatchParser().writer;
            num6 = 6;
            break;
          case 11:
          case 22:
            goto label_19;
          case 12:
            goto label_56;
          case 14:
            style2 = new Style(typeof (Button), resource);
            style2.Setters.Add((SetterBase) new Setter(Border.BackgroundProperty, (object) this.ViewParser().Color));
            num6 = 15;
            break;
          case 15:
            this.panel_Die.Resources[(object) "btnPlayerDie"] = (object) style2;
            style1 = new Style(typeof (Button), resource);
            style1.Setters.Add((SetterBase) new Setter(Border.BackgroundProperty, (object) this.PatchParser().@class.Color));
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 16;
          case 16:
            this.PatchParser().@class.Army_strength -= this.PatchParser().writer;
            this.PatchParser().writer = 0;
            this.PatchParser().@class = this.ViewParser();
            ++this.ViewParser().Territoriesowned;
            ++this.ViewParser()._Instance;
            flag4 = true;
            if (true)
            {
              num1 = 9;
              continue;
            }
            goto label_82;
          case 17:
            goto label_1;
          case 18:
            goto label_5;
          case 19:
            this.PatchParser().advisor -= num4;
            num1 = 22;
            continue;
          case 20:
            if (flag3)
            {
              --this.PatchParser().@class.Territoriesowned;
              num6 = 16;
              break;
            }
            goto label_20;
          case 21:
            if (flag2)
            {
              this.imgEnemyDie2.Visibility = Visibility.Visible;
              this.reg.Add((PredicateMessageComp) this.m_Param);
            }
            else
              this.imgEnemyDie2.Visibility = Visibility.Collapsed;
            if (this.PatchParser().advisor > 1)
            {
              this.imgPlayerDie2.Visibility = Visibility.Visible;
              this.reg.Add((PredicateMessageComp) this.@base);
            }
            else
              this.imgPlayerDie2.Visibility = Visibility.Collapsed;
            if (this.PatchParser().advisor > 2)
            {
              this.imgPlayerDie3.Visibility = Visibility.Visible;
              this.reg.Add((PredicateMessageComp) this.strategy);
            }
            else
              this.imgPlayerDie3.Visibility = Visibility.Collapsed;
            this.btnPlayerDie.Content = (object) this.ViewParser().ResetExpression();
            this.btnEnemyDie.Content = (object) this.PatchParser().@class.ResetExpression();
            resource = this.panel_Die.Resources[(object) "btnDie"] as Style;
            num6 = 14;
            break;
          case 23:
            if (flag5)
              this.PublishParser();
            num4 = (int) Math.Floor((1.0 - num5) * (double) this.PatchParser().advisor);
            num1 = 19;
            continue;
          case 24:
            try
            {
label_52:
              while (enumerator.MoveNext())
              {
                Player current = enumerator.Current;
                int num10 = 2;
                while (true)
                {
                  int num11;
                  switch (num10)
                  {
                    case 0:
                    case 2:
                      if (current == this.ViewParser())
                      {
                        num11 = 0;
                        break;
                      }
                      goto case 1;
                    case 1:
                    case 3:
                      num11 = current.Territoriesowned > 0 ? 1 : 0;
                      break;
                    case 4:
                      goto label_55;
                    default:
                      num10 = 3;
                      continue;
                  }
                  if (num11 != 0)
                  {
                    flag4 = false;
                    num10 = 4;
                  }
                  else
                    goto label_52;
                }
              }
            }
            finally
            {
              enumerator.Dispose();
            }
label_55:
            flag5 = flag4;
            if (Token.ViewContainer())
            {
              num1 = 23;
              continue;
            }
            goto label_56;
          case 25:
            goto label_92;
          default:
            num6 = 1;
            break;
        }
        num1 = num6;
      }
label_5:
      this.PatchParser().configuration.Content = (object) this.PatchParser().writer;
      this.GetParser();
      return;
label_53:
      return;
label_19:
      this.InitParser(string.Format("You have captured this territory and lost {0} armies in battle.", (object) num4));
      this.ReflectParser(GameState.Conquer);
      return;
label_20:
      this.PatchParser().advisor = 0;
      num2 = (int) Math.Ceiling((1.0 - num5) * (double) this.PatchParser().writer);
      goto label_4;
label_24:
      this.panel_Die.Resources[(object) "btnEnemyDie"] = (object) style1;
      this.CloneExpression(this.reg.Count);
      this.CreateExpression(0);
      this.visitor = true;
      using (List<PredicateMessageComp>.Enumerator enumerator = this.reg.GetEnumerator())
      {
label_31:
        while (enumerator.MoveNext())
        {
          PredicateMessageComp current = enumerator.Current;
          int num12 = 2;
          if (true)
            goto label_29;
label_27:
          current.PrepareModel();
          if (Token.ViewContainer())
          {
            num12 = 4;
            goto label_29;
          }
label_28:
          current.m_Thread.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.SearchParser);
          goto label_27;
label_29:
          while (true)
          {
            switch (num12)
            {
              case 0:
              case 2:
                goto label_28;
              case 1:
              case 3:
                goto label_27;
              case 4:
                goto label_31;
              default:
                num12 = 3;
                continue;
            }
          }
        }
      }
      return;
label_34:
      this.InitParser("You must select the territories you wish to attack to/from first.");
      return;
label_38:
      this.InitParser("You must select a territory to move armies from.");
      return;
label_56:
      return;
label_59:
      this.QueryParser();
      return;
label_7:
      return;
label_82:
      if (this.ReadExpression() > 0 && !this.config.IsBusy)
      {
        this.SortParser();
        return;
      }
      this.QueryParser();
      return;
label_92:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Continue(object sender, RoutedEventArgs e)
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (!flag)
              {
                if (this.TestParser() != GameState.Conquer)
                {
                  this.RateParser();
                  if (true)
                  {
                    num2 = 4;
                    continue;
                  }
                  goto label_5;
                }
                else
                  goto label_10;
              }
              else
                goto label_2;
            case 2:
              goto label_12;
            case 3:
              goto label_13;
            case 4:
              goto label_5;
            case 5:
              goto label_9;
            case 6:
              goto label_11;
            default:
              goto label_8;
          }
        }
label_8:
        num1 = 2;
        continue;
label_9:
        flag = this.ExcludeParser();
        num1 = 0;
        continue;
label_10:
        this.InitParser("You must finish conquering the territory.");
        num1 = 6;
      }
label_2:
      return;
label_5:
      this.QueryParser();
      return;
label_12:
      return;
label_13:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Cancel(object sender, RoutedEventArgs e)
    {
      int num = 3;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            flag = this.ExcludeParser();
            num = 1;
            continue;
          case 1:
            if (!flag)
            {
              this.RateParser();
              num = 5;
              continue;
            }
            goto label_9;
          case 2:
            goto label_1;
          case 4:
            goto label_8;
          case 5:
            goto label_7;
          default:
            num = 4;
            continue;
        }
      }
label_9:
      return;
label_1:
      return;
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StopParser(object first, RoutedEventArgs cont) => this.FindParser(true);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void RemoveParser(object var1, RoutedEventArgs reg) => this.FindParser(false);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Settings(object sender, RoutedEventArgs e)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_2;
            case 2:
            case 3:
              goto label_1;
            case 4:
              this.visitor = true;
              if (!Token.WriteContainer())
              {
                num2 = 0;
                continue;
              }
              goto label_7;
            case 5:
              goto label_8;
            default:
              num2 = 3;
              continue;
          }
        }
label_1:
        this.panel_Settings.Visibility = Visibility.Visible;
        num1 = 5;
        continue;
label_2:
        this.panel_MainUI.Visibility = Visibility.Collapsed;
        goto label_1;
      }
label_8:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Return(object sender, RoutedEventArgs e)
    {
      int num1 = 4;
      if (!Token.WriteContainer())
        goto label_4;
label_1:
      this.visitor = false;
      int num2 = 3;
label_3:
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            this.panel_Settings.Visibility = Visibility.Collapsed;
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto label_7;
          case 1:
          case 3:
            this.panel_MainUI.Visibility = Visibility.Visible;
            goto case 0;
          case 4:
            goto label_1;
          case 5:
            goto label_9;
          default:
            goto label_5;
        }
      }
label_9:
      return;
label_5:
      num2 = 0;
      goto label_3;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FlushParser(object init, RoutedEventArgs cfg)
    {
      int num1 = 6;
      if (Token.ViewContainer())
        goto label_8;
label_1:
      bool flag = this.TestParser() == GameState.InitialArmyPlace;
      int num2 = 1;
label_7:
      num1 = num2;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_14;
          case 1:
            if (!flag)
            {
              if (this.TestParser() == GameState.Conquer)
              {
                this.InitParser("You must finish conquering before saving.");
                if (!Token.WriteContainer())
                {
                  num1 = 5;
                  continue;
                }
                goto label_13;
              }
              else
                goto label_2;
            }
            else
              goto label_5;
          case 2:
          case 3:
            goto label_6;
          case 4:
            goto label_10;
          case 5:
            goto label_22;
          case 6:
            goto label_1;
          case 7:
            goto label_23;
          default:
            num1 = 0;
            continue;
        }
      }
label_2:
      if (this.TestParser() == GameState.Attacking && this.Gamemode == GameMode.Classic)
      {
        this.InitParser("You must finish your attack before saving.");
        num2 = 7;
        goto label_7;
      }
      else
      {
        try
        {
          this.RateParser();
          int num3 = 2;
          while (true)
          {
            switch (num3)
            {
              case 0:
              case 2:
                AuthenticationContainerProducer.GetModel(this._Candidate);
                goto case 1;
              case 1:
              case 3:
                this.InitParser("Game saved successfully");
                num3 = 4;
                continue;
              case 4:
                goto label_21;
              default:
                if (true)
                {
                  num3 = 3;
                  continue;
                }
                goto label_21;
            }
          }
        }
        catch
        {
          this.InitParser("An error has occurred. The game may not have saved, please try again.");
        }
label_21:
        return;
      }
label_5:
      num2 = 3;
      goto label_7;
label_6:
      this.InitParser("You must finish setup before attempting to save.");
      return;
label_14:
      return;
label_10:
      return;
label_22:
      return;
label_23:
      return;
label_13:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void Quit(object sender, RoutedEventArgs e) => this.Close();

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ConnectParser(Role config, int insert_BAt)
    {
      int num1 = 1;
      if (true)
        goto label_15;
label_1:
      bool flag1 = config.@class != this.ViewParser();
      int num2 = 6;
label_14:
      num1 = num2;
label_15:
      bool flag2;
      while (true)
      {
        int num3;
        switch (num1)
        {
          case 0:
          case 1:
            goto label_1;
          case 2:
            config.@class = this.ViewParser();
            config.configuration.Background = (Brush) config.@class.Color;
            this.ViewParser().Territoriesowned += insert_BAt;
            ++this.ViewParser()._Instance;
            break;
          case 3:
label_8:
            goto label_9;
          case 4:
label_10:
            num3 = this.TestParser() == GameState.PlacingArmy ? 1 : 0;
            goto label_12;
          case 5:
          case 7:
            goto label_5;
          case 6:
            if (flag1)
            {
              if (config.@class != null)
              {
                --config.@class.Territoriesowned;
                num1 = 2;
                continue;
              }
              goto case 2;
            }
            else
              break;
          case 8:
            goto label_20;
          default:
            num1 = 3;
            continue;
        }
        if (this.TestParser() == GameState.InitialArmyPlace)
        {
          num3 = 1;
          goto label_12;
        }
        else
          break;
label_9:
        config.writer += insert_BAt;
        flag2 = this.TestParser() == GameState.InitialArmyPlace;
        if (Token.ViewContainer())
        {
          num1 = 7;
          continue;
        }
        goto label_10;
label_12:
        if (num3 != 0)
        {
          this.ViewParser().Army_strength += insert_BAt;
          goto label_8;
        }
        else
          goto label_9;
      }
      num2 = 4;
      goto label_14;
label_5:
      if (flag2)
        this.ViewParser().m_Producer -= insert_BAt;
      config.configuration.Content = (object) config.writer;
      num2 = 8;
      goto label_14;
label_20:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void QueryParser()
    {
      int num1 = 6;
      if (!Token.ViewContainer())
        return;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            switch (this.TestParser())
            {
              case GameState.Attacking:
                this.ReflectParser(GameState.Move);
                num1 = 5;
                continue;
              case GameState.Conquer:
                goto label_14;
              case GameState.Move:
                this.CallParser();
                num2 = 7;
                break;
              case GameState.PlacingArmy:
                goto label_3;
              case GameState.InitialArmyPlace:
                this.InitParser("You must place all of your armies.");
                if (!Token.WriteContainer())
                {
                  num1 = 1;
                  continue;
                }
                goto label_10;
              default:
                goto label_2;
            }
            break;
          case 1:
            goto label_11;
          case 2:
            goto label_8;
          case 3:
            goto label_16;
          case 4:
            goto label_17;
          case 5:
            goto label_18;
          case 6:
            this.GetParser();
            num2 = 0;
            break;
          case 7:
            goto label_19;
          default:
            num1 = 4;
            continue;
        }
        num1 = num2;
      }
label_3:
      this.ReflectParser(GameState.Attacking);
      return;
label_11:
      return;
label_8:
      return;
label_16:
      return;
label_17:
      return;
label_18:
      return;
label_19:
      return;
label_2:
      return;
label_10:
      return;
label_14:
      this.ReflectParser(GameState.Attacking);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindParser(bool loadasset)
    {
      int num1 = 0;
      if (true)
        goto label_27;
label_1:
      return;
label_27:
      bool flag1;
      int positioni;
      while (true)
      {
        bool flag2;
        int num2;
        switch (num1)
        {
          case 0:
            flag2 = this.ListParser() != null;
            num2 = 7;
            goto label_26;
          case 1:
            goto label_5;
          case 2:
          case 9:
            positioni = 1;
            break;
          case 3:
            goto label_30;
          case 4:
            goto label_18;
          case 5:
            goto label_25;
          case 6:
            goto label_31;
          case 7:
label_9:
            if (flag2)
            {
              positioni = -1;
              switch (this.TestParser())
              {
                case GameState.Attacking:
                  if (this.PatchParser() != null)
                  {
                    if (loadasset)
                      positioni = 1;
                    this.IncludeParser(positioni);
                    if (true)
                    {
                      num1 = 1;
                      continue;
                    }
                    goto label_18;
                  }
                  else
                  {
                    this.InitParser("You must select the territories you wish to attack to/from.");
                    num2 = 8;
                    goto label_26;
                  }
                case GameState.Conquer:
                case GameState.Move:
                  flag1 = loadasset;
                  num1 = 4;
                  continue;
                case GameState.PlacingArmy:
                  if (!loadasset)
                  {
                    if (this.ListParser().advisor > 1)
                      break;
                    goto label_7;
                  }
                  else if (this.ViewParser().m_Producer > 0)
                  {
                    num2 = 9;
                    goto label_26;
                  }
                  else
                  {
                    this.InitParser("You do not have any armies left to place");
                    num1 = 10;
                    continue;
                  }
                default:
                  goto label_4;
              }
            }
            else
            {
              this.InitParser("Please select a territory.");
              num2 = 11;
              goto label_26;
            }
            break;
          case 8:
            goto label_1;
          case 10:
            goto label_32;
          case 11:
            goto label_29;
          default:
            if (Token.ViewContainer())
            {
              num1 = 3;
              continue;
            }
            goto label_29;
        }
        this.ListParser().advisor += positioni;
        if (true)
        {
          num1 = 5;
          continue;
        }
        goto label_9;
label_26:
        num1 = num2;
      }
label_7:
      this.InitParser("You must place at least one army");
      return;
label_4:
      return;
label_18:
      if (flag1)
        positioni = 1;
      this.IncludeParser(positioni);
      return;
label_25:
      this.ViewParser().m_Producer -= positioni;
      this.InstantiateParser();
      return;
label_5:
      return;
label_30:
      return;
label_31:
      return;
label_32:
      return;
label_29:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int RestartExpression() => this.m_Proxy;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CreateExpression(int startasset)
    {
      int num = 0;
      while (true)
      {
        switch (num)
        {
          case 0:
            this.m_Proxy = startasset;
            num = 4;
            continue;
          case 1:
          case 4:
            if (this.m_Proxy != this.database)
              goto label_2;
            else
              goto case 2;
          case 2:
          case 3:
            this.AssetParser();
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_2:
      return;
label_7:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int InstantiateExpression() => this.database;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneExpression(int no__ident) => this.database = no__ident;

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SearchParser(object key, RunWorkerCompletedEventArgs reg) => this.CreateExpression(this.RestartExpression() + 1);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AssetParser()
    {
      int num1 = 9;
      if (Token.WriteContainer())
        ;
      while (true)
      {
        int collection1;
        int collection2;
        int token1;
        List<PredicateMessageComp>.Enumerator enumerator;
        int num2;
        int num3;
        int token2;
        int num4;
        bool flag1;
        bool flag2;
        switch (num1)
        {
          case 0:
            break;
          case 1:
            if (this.VisitParser(token2, token1))
            {
              ++num3;
              ++this.ViewParser()._Instance;
            }
            else
              ++num2;
            goto label_29;
          case 2:
            if (this.m_Param.m_Collection != -1)
            {
              this.PostParser(ref collection2, ref token1, this.m_Param.m_Collection);
              num1 = 0;
              continue;
            }
            break;
          case 3:
          case 7:
            if (this.@base.m_Collection != -1)
            {
              this.PostParser(ref collection1, ref token2, this.@base.m_Collection);
              flag2 = this.strategy.m_Collection != -1;
              if (true)
              {
                num1 = 4;
                continue;
              }
              goto case 4;
            }
            else
              goto label_16;
          case 4:
            if (flag2)
            {
              this.PostParser(ref collection1, ref token2, this.strategy.m_Collection);
              num4 = 2;
              goto label_17;
            }
            else
              goto case 2;
          case 5:
label_4:
            try
            {
              while (enumerator.MoveNext())
              {
                PredicateMessageComp current = enumerator.Current;
                int num5 = 2;
                while (true)
                {
                  switch (num5)
                  {
                    case 0:
                    case 2:
                      goto label_6;
                    case 1:
                    case 3:
                      goto label_9;
                    default:
                      if (Token.ViewContainer())
                      {
                        num5 = 3;
                        continue;
                      }
                      goto label_9;
                  }
                }
label_6:
                current.m_Collection = -1;
label_9:;
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            num2 = 0;
            num3 = 0;
            if (token2 != -1 && token1 != -1)
            {
              if (true)
              {
                num1 = 1;
                continue;
              }
              goto case 0;
            }
            else
              goto label_29;
          case 6:
            collection2 = this.list.m_Collection;
            num4 = 12;
            goto label_17;
          case 8:
            ++this.ViewParser()._Instance;
            goto label_22;
          case 9:
            collection1 = this._Invocation.m_Collection;
            int num6 = 6;
            num1 = Token.WriteContainer() ? num6 : num6;
            continue;
          case 10:
            if (flag1)
            {
              this.InitParser("You have successfully captured this territory.");
              this.btnDieStatus.Content = (object) "Continue to Conquer";
            }
            else
              this.btnDieStatus.Content = (object) "Continue to Attack";
            this.btnDieStatus.Visibility = Visibility.Visible;
            num1 = 13;
            continue;
          case 11:
          case 13:
            this.visitor = false;
            if (true)
            {
              num1 = 14;
              continue;
            }
            goto case 10;
          case 12:
            token2 = -1;
            token1 = -1;
            if (Token.ViewContainer())
            {
              num1 = 7;
              continue;
            }
            goto case 6;
          case 14:
            goto label_31;
          default:
            num4 = 5;
            goto label_17;
        }
label_16:
        enumerator = this.reg.GetEnumerator();
        goto label_4;
label_17:
        num1 = num4;
        continue;
label_22:
        this.ViewParser().Army_strength -= num2;
        this.PatchParser().advisor -= num2;
        this.PatchParser().@class.Army_strength -= num3;
        this.PatchParser().writer -= num3;
        this.PatchParser().configuration.Content = (object) this.PatchParser().writer;
        this.InitParser(string.Format("You lost {0} armies in battle. The enemy lost {1}", (object) num2, (object) num3));
        flag1 = this.PatchParser().writer == 0;
        num4 = 10;
        goto label_17;
label_29:
        if (!this.VisitParser(collection1, collection2))
        {
          ++num2;
          goto label_22;
        }
        else
        {
          ++num3;
          int num7 = 8;
          num1 = Token.WriteContainer() ? num7 : num7;
        }
      }
label_31:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeParser(object v, RoutedEventArgs caller)
    {
      int num1 = 8;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        List<Player>.Enumerator enumerator;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              try
              {
                while (enumerator.MoveNext())
                {
                  Player current = enumerator.Current;
                  int num3 = 3;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 3:
                        if (current == this.ViewParser() || current.Territoriesowned <= 0)
                          goto label_11;
                        else
                          goto case 1;
                      case 1:
                      case 2:
                        flag1 = false;
                        num3 = 4;
                        continue;
                      case 4:
                        goto label_11;
                      default:
                        num3 = 2;
                        continue;
                    }
                  }
label_11:;
                }
              }
              finally
              {
                enumerator.Dispose();
              }
              if (flag1)
              {
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_17;
              }
              else
                goto label_18;
            case 1:
            case 5:
              if (flag2)
              {
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_26;
              }
              else
                goto label_30;
            case 2:
            case 4:
              goto label_26;
            case 3:
              goto label_17;
            case 6:
              goto label_13;
            case 7:
              goto label_1;
            case 8:
              goto label_23;
            case 9:
              goto label_20;
            case 10:
              goto label_31;
            default:
              goto label_29;
          }
        }
label_1:
        bool flag3;
        if (flag3)
          this.SortParser();
        goto label_19;
label_17:
        this.PublishParser();
label_18:
        this.ReflectParser(GameState.Conquer);
label_19:
        this.btnDieStatus.Content = (object) "Outcome";
        num1 = 10;
        continue;
label_20:
        this.panel_Die.Visibility = Visibility.Collapsed;
        this.panel_NumberSelection.Visibility = Visibility.Visible;
        if (!((string) ((ContentControl) v).Content == "Continue to Attack"))
        {
          --this.PatchParser().@class.Territoriesowned;
          this.PatchParser().@class = this.ViewParser();
          ++this.ViewParser().Territoriesowned;
          flag1 = true;
          enumerator = this.Players.GetEnumerator();
          num1 = 0;
          continue;
        }
        this.RateParser();
        if (this.ReadExpression() > 0)
        {
          num1 = 2;
          continue;
        }
        goto label_19;
label_23:
        flag2 = (string) ((ContentControl) v).Content == "Dice Rolling...";
        num1 = 5;
        continue;
label_26:
        flag3 = !this.config.IsBusy;
        goto label_1;
label_29:
        num1 = 7;
        continue;
label_30:
        this.btnDieStatus.Visibility = Visibility.Collapsed;
        num1 = 9;
      }
label_13:
      return;
label_31:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PostParser(ref int key, ref int token, int taglength)
    {
      int num1 = 5;
      if (true)
      {
        while (true)
        {
          int num2;
          bool flag1;
          bool flag2;
          switch (num1)
          {
            case 0:
            case 5:
              flag1 = taglength > token;
              num1 = 3;
              continue;
            case 1:
            case 3:
              if (flag1)
              {
                flag2 = taglength > key;
                num2 = 4;
                break;
              }
              goto label_1;
            case 2:
            case 6:
              goto label_11;
            case 4:
              if (!flag2)
              {
                token = taglength;
                num2 = 6;
                break;
              }
              goto label_7;
            default:
              num2 = 2;
              break;
          }
          num1 = num2;
        }
label_1:
        return;
label_7:
        token = key;
        key = taglength;
      }
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private bool VisitParser(int indexasset, int polHigh)
    {
      int num = 3;
label_5:
      bool flag1;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            flag1 = polHigh >= indexasset;
            num = 4;
            continue;
          case 1:
          case 2:
            goto label_2;
          case 4:
            goto label_4;
          case 5:
            goto label_7;
          default:
            if (true)
            {
              num = 1;
              continue;
            }
            goto label_7;
        }
      }
label_2:
      bool flag2 = false;
      goto label_7;
label_4:
      while (!flag1)
      {
        flag2 = true;
        if (true)
        {
          num = 5;
          goto label_5;
        }
      }
      goto label_2;
label_7:
      return flag2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CalculateParser(object param, RoutedEventArgs visitor) => this.PublishParser();

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 0;
      if (true)
        goto label_4;
label_1:
      bool predicate = this.m_Predicate;
      int num2 = 5;
label_3:
      num1 = num2;
label_4:
      Uri resourceLocator;
      switch (num1)
      {
        case 0:
          goto label_1;
        case 1:
        case 5:
          if (predicate)
            break;
          this.m_Predicate = true;
          num2 = 4;
          goto label_3;
        case 2:
        case 3:
          Application.LoadComponent((object) this, resourceLocator);
          num2 = 6;
          goto label_3;
        case 4:
          resourceLocator = new Uri("/ArrayWithOff;component/gamewindow.xaml", UriKind.Relative);
          goto case 2;
        case 6:
          break;
        default:
          num2 = 2;
          goto label_3;
      }
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int flagsreference, object second)
    {
      int num1 = 13;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_134;
          case 1:
            goto label_135;
          case 2:
            goto label_136;
          case 3:
label_113:
            this.m_Predicate = true;
            if (Token.ViewContainer())
            {
              num1 = 32;
              continue;
            }
            goto label_114;
          case 4:
            goto label_137;
          case 5:
            goto label_138;
          case 6:
            goto label_139;
          case 7:
            int num3;
            switch (num2)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_113;
              case 4:
                goto label_3;
              case 5:
                this.btnAlaska = (Button) second;
                num3 = 1;
                break;
              case 6:
                goto label_76;
              case 7:
                goto label_77;
              case 8:
                goto label_78;
              case 9:
                goto label_79;
              case 10:
                goto label_80;
              case 11:
                goto label_81;
              case 12:
                goto label_82;
              case 13:
                goto label_83;
              case 14:
                goto label_84;
              case 15:
                goto label_85;
              case 16:
                goto label_86;
              case 17:
                goto label_87;
              case 18:
                goto label_88;
              case 19:
                this.btnIceland = (Button) second;
                num3 = 0;
                break;
              case 20:
                goto label_5;
              case 21:
                goto label_6;
              case 22:
                goto label_7;
              case 23:
                goto label_8;
              case 24:
                this.btnWestern_Europe = (Button) second;
                num3 = 23;
                break;
              case 25:
                goto label_121;
              case 26:
                goto label_122;
              case 27:
                goto label_123;
              case 28:
                this.btnEgypt = (Button) second;
                if (true)
                {
                  num1 = 19;
                  continue;
                }
                goto label_125;
              case 29:
                goto label_107;
              case 30:
                this.btnSouth_Africa = (Button) second;
                num3 = 22;
                break;
              case 31:
                goto label_101;
              case 32:
                this.btnChina = (Button) second;
                if (true)
                {
                  num1 = 6;
                  continue;
                }
                goto label_103;
              case 33:
                goto label_70;
              case 34:
                goto label_71;
              case 35:
                goto label_72;
              case 36:
                goto label_73;
              case 37:
                goto label_74;
              case 38:
                this.btnSiberia = (Button) second;
                int num4 = 10;
                num1 = Token.WriteContainer() ? num4 : num4;
                continue;
              case 39:
                goto label_104;
              case 40:
                this.btnEastern_Australia = (Button) second;
                num3 = 12;
                break;
              case 41:
                goto label_96;
              case 42:
                goto label_97;
              case 43:
                goto label_98;
              case 44:
                this.btnIrkutsk = (Button) second;
                num3 = 20;
                break;
              case 45:
                this.btnKamchatka = (Button) second;
                if (Token.ViewContainer())
                {
                  num1 = 16;
                  continue;
                }
                goto label_110;
              case 46:
                goto label_92;
              case 47:
                this.pb_Timer = (ProgressBar) second;
                num3 = 24;
                break;
              case 48:
                goto label_49;
              case 49:
                goto label_50;
              case 50:
                goto label_51;
              case 51:
                goto label_52;
              case 52:
                goto label_53;
              case 53:
                goto label_54;
              case 54:
                goto label_55;
              case 55:
                goto label_56;
              case 56:
                this.lblPlayer1Strength = (Label) second;
                num3 = 5;
                break;
              case 57:
                this.brd_Player2 = (Border) second;
                num3 = 15;
                break;
              case 58:
                goto label_126;
              case 59:
                goto label_127;
              case 60:
                goto label_128;
              case 61:
                goto label_66;
              case 62:
                goto label_67;
              case 63:
                this.brd_Player3 = (Border) second;
                if (true)
                {
                  num1 = 14;
                  continue;
                }
                goto label_69;
              case 64:
                goto label_94;
              case 65:
                this.rectPlayerColor3 = (Rectangle) second;
                num1 = 26;
                continue;
              case 66:
                goto label_21;
              case 67:
                goto label_22;
              case 68:
                goto label_23;
              case 69:
                goto label_24;
              case 70:
                goto label_25;
              case 71:
                goto label_26;
              case 72:
                goto label_27;
              case 73:
                goto label_28;
              case 74:
                goto label_29;
              case 75:
                goto label_30;
              case 76:
                goto label_31;
              case 77:
                this.rectPlayerColor5 = (Rectangle) second;
                num3 = 27;
                break;
              case 78:
                goto label_90;
              case 79:
                this.lblPlayer5Territories = (Label) second;
                num3 = 31;
                break;
              case 80:
                this.lblPlayer5Strength = (Label) second;
                num3 = 2;
                break;
              case 81:
                goto label_12;
              case 82:
                goto label_13;
              case 83:
                goto label_14;
              case 84:
                goto label_15;
              case 85:
                goto label_16;
              case 86:
                goto label_17;
              case 87:
                goto label_18;
              case 88:
                goto label_19;
              case 89:
                this.btnStateDisp = (Button) second;
                num1 = 8;
                continue;
              case 90:
                goto label_39;
              case 91:
                goto label_40;
              case 92:
                goto label_41;
              case 93:
                goto label_42;
              case 94:
                goto label_43;
              case 95:
                goto label_44;
              case 96:
                goto label_45;
              case 97:
                goto label_46;
              case 98:
                this.imgPlayerDie2 = (Image) second;
                if (true)
                {
                  num1 = 25;
                  continue;
                }
                goto label_48;
              case 99:
                this.imgPlayerDie3 = (Image) second;
                num1 = 21;
                continue;
              case 100:
                goto label_58;
              case 101:
                goto label_59;
              case 102:
                goto label_60;
              case 103:
                goto label_61;
              case 104:
                goto label_62;
              case 105:
                goto label_63;
              case 106:
                ((ButtonBase) second).Click += new RoutedEventHandler(this.Cancel);
                num3 = 30;
                break;
              case 107:
                goto label_118;
              case 108:
                ((ButtonBase) second).Click += new RoutedEventHandler(this.Settings);
                if (true)
                {
                  num1 = 4;
                  continue;
                }
                goto label_120;
              case 109:
                goto label_115;
              case 110:
                this.scrlOutput = (ScrollViewer) second;
                num1 = 9;
                continue;
              case 111:
                this.txtOutput = (TextBlock) second;
                num3 = 11;
                break;
              case 112:
                goto label_33;
              case 113:
                goto label_34;
              case 114:
                goto label_35;
              case 115:
                goto label_36;
              case 116:
                goto label_37;
              case 117:
                this.chkFullscreen = (CheckBox) second;
                num3 = 18;
                break;
              case 118:
                goto label_111;
              case 119:
                goto label_112;
              default:
                num3 = 3;
                break;
            }
            num1 = num3;
            continue;
          case 8:
            goto label_140;
          case 9:
            goto label_141;
          case 10:
            goto label_142;
          case 11:
            goto label_143;
          case 12:
            goto label_144;
          case 13:
label_125:
            num2 = flagsreference;
            num1 = 7;
            continue;
          case 14:
            goto label_145;
          case 15:
            goto label_146;
          case 16:
            goto label_147;
          case 17:
            goto label_148;
          case 18:
            goto label_149;
          case 19:
            goto label_150;
          case 20:
            goto label_151;
          case 21:
            goto label_152;
          case 22:
            goto label_153;
          case 23:
            goto label_154;
          case 24:
            goto label_155;
          case 25:
            goto label_156;
          case 26:
            goto label_157;
          case 27:
            goto label_158;
          case 28:
            goto label_159;
          case 29:
            goto label_160;
          case 30:
            goto label_161;
          case 31:
            goto label_162;
          case 32:
            goto label_163;
          default:
            if (true)
            {
              num1 = 28;
              continue;
            }
            goto label_132;
        }
      }
label_1:
      this.panel_MainUI = (StackPanel) second;
      return;
label_2:
      this.GameGrid = (Grid) second;
      return;
label_3:
      this._Definition = (ImageBrush) second;
      return;
label_5:
      this.btnNorthern_Europe = (Button) second;
      return;
label_6:
      this.btnScandinavia = (Button) second;
      return;
label_7:
      this.btnSouthern_Europe = (Button) second;
      return;
label_8:
      this.btnSoviet_Bloc = (Button) second;
      return;
label_12:
      this.brd_Player6 = (Border) second;
      return;
label_13:
      this.panel_Player6 = (StackPanel) second;
      return;
label_14:
      this.rectPlayerColor6 = (Rectangle) second;
      return;
label_15:
      this.lblPlayerName6 = (Label) second;
      return;
label_16:
      this.lblPlayer6Territories = (Label) second;
      return;
label_17:
      this.lblPlayer6Strength = (Label) second;
      return;
label_18:
      this.brd_ActionPanel = (Border) second;
      return;
label_19:
      this.panel_NumberSelection = (StackPanel) second;
      return;
label_21:
      this.lblPlayerName3 = (Label) second;
      return;
label_22:
      this.lblPlayer3Territories = (Label) second;
      return;
label_23:
      this.lblPlayer3Strength = (Label) second;
      return;
label_24:
      this.brd_Player4 = (Border) second;
      return;
label_25:
      this.panel_Player4 = (StackPanel) second;
      return;
label_26:
      this.rectPlayerColor4 = (Rectangle) second;
      return;
label_27:
      this.lblPlayerName4 = (Label) second;
      return;
label_28:
      this.lblPlayer4Territories = (Label) second;
      return;
label_29:
      this.lblPlayer4Strength = (Label) second;
      return;
label_30:
      this.brd_Player5 = (Border) second;
      return;
label_31:
      this.panel_Player5 = (StackPanel) second;
      return;
label_33:
      this.panel_Settings = (Viewbox) second;
      return;
label_34:
      this.lblMediaDetails = (Label) second;
      return;
label_35:
      this.mediaplayer = (MediaElement) second;
      return;
label_36:
      this.slider_Volume = (Slider) second;
      return;
label_37:
      this.chkMusicEnabled = (CheckBox) second;
      return;
label_39:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.RemoveParser);
      return;
label_40:
      this.btnNumber = (Button) second;
      return;
label_41:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.StopParser);
      return;
label_42:
      this.btnState = (Button) second;
      this.btnState.Click += new RoutedEventHandler(this.DestroyParser);
      return;
label_43:
      this.panel_Die = (Grid) second;
      return;
label_44:
      this.btnPlayerDie = (Button) second;
      return;
label_45:
      this.panel_Die_Player = (StackPanel) second;
      return;
label_46:
      this.imgPlayerDie1 = (Image) second;
      return;
label_48:
      return;
label_49:
      this.panel_UI = (StackPanel) second;
      return;
label_50:
      this.brd_Players = (Border) second;
      return;
label_51:
      this.panel_Players = (StackPanel) second;
      return;
label_52:
      this.brd_Player1 = (Border) second;
      return;
label_53:
      this.panel_Player1 = (StackPanel) second;
      return;
label_54:
      this.rectPlayerColor1 = (Rectangle) second;
      return;
label_55:
      this.lblPlayerName1 = (Label) second;
      return;
label_56:
      this.lblPlayer1Territories = (Label) second;
      return;
label_58:
      this.btnEnemyDie = (Button) second;
      return;
label_59:
      this.panel_Die_Enemy = (StackPanel) second;
      return;
label_60:
      this.imgEnemyDie1 = (Image) second;
      return;
label_61:
      this.imgEnemyDie2 = (Image) second;
      return;
label_62:
      this.btnDieStatus = (Button) second;
      this.btnDieStatus.Click += new RoutedEventHandler(this.ChangeParser);
      return;
label_63:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.Continue);
      return;
label_66:
      this.lblPlayer2Territories = (Label) second;
      return;
label_67:
      this.lblPlayer2Strength = (Label) second;
      return;
label_69:
      return;
label_70:
      this.btnIndia = (Button) second;
      return;
label_71:
      this.btnJapan = (Button) second;
      return;
label_72:
      this.btnMiddle_East = (Button) second;
      return;
label_73:
      this.btnMongolia = (Button) second;
      return;
label_74:
      this.btnSoutheast_Asia = (Button) second;
      return;
label_76:
      this.btnAlberta = (Button) second;
      return;
label_77:
      this.btnCentral_America = (Button) second;
      return;
label_78:
      this.btnEastern_US = (Button) second;
      return;
label_79:
      this.btnGreenland = (Button) second;
      return;
label_80:
      this.btnNorthwest_Canada = (Button) second;
      return;
label_81:
      this.btnOntario = (Button) second;
      return;
label_82:
      this.btnQuebec = (Button) second;
      return;
label_83:
      this.btnWestern_US = (Button) second;
      return;
label_84:
      this.btnArgentina = (Button) second;
      return;
label_85:
      this.btnBrazil = (Button) second;
      return;
label_86:
      this.btnPeru = (Button) second;
      return;
label_87:
      this.btnVenezuela = (Button) second;
      return;
label_88:
      this.btnUK_Ireland = (Button) second;
      return;
label_90:
      this.lblPlayerName5 = (Label) second;
      return;
label_92:
      this.btnYakutsk = (Button) second;
      return;
label_94:
      this.panel_Player3 = (StackPanel) second;
      return;
label_96:
      this.btnWestern_Australia = (Button) second;
      return;
label_97:
      this.btnNew_Guinea = (Button) second;
      return;
label_98:
      this.btnIndonesia = (Button) second;
      return;
label_101:
      this.btnAfghanistan = (Button) second;
      return;
label_103:
      return;
label_104:
      this.btnUral = (Button) second;
      return;
label_107:
      this.btnNorth_Africa = (Button) second;
      return;
label_110:
      return;
label_111:
      this.chkHints = (CheckBox) second;
      return;
label_112:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.Return);
      return;
label_114:
      return;
label_115:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.Quit);
      return;
label_118:
      ((ButtonBase) second).Click += new RoutedEventHandler(this.FlushParser);
      return;
label_120:
      return;
label_121:
      this.btnCentral_Africa = (Button) second;
      return;
label_122:
      this.btnEast_Africa = (Button) second;
      return;
label_123:
      this.btnMadagascar = (Button) second;
      return;
label_126:
      this.panel_Player2 = (StackPanel) second;
      return;
label_127:
      this.rectPlayerColor2 = (Rectangle) second;
      return;
label_128:
      this.lblPlayerName2 = (Label) second;
      return;
label_134:
      return;
label_162:
      return;
label_135:
      return;
label_136:
      return;
label_137:
      return;
label_138:
      return;
label_139:
      return;
label_140:
      return;
label_141:
      return;
label_142:
      return;
label_143:
      return;
label_144:
      return;
label_145:
      return;
label_146:
      return;
label_147:
      return;
label_148:
      return;
label_149:
      return;
label_150:
      return;
label_151:
      return;
label_152:
      return;
label_153:
      return;
label_154:
      return;
label_155:
      return;
label_156:
      return;
label_157:
      return;
label_158:
      return;
label_159:
      return;
label_160:
      return;
label_161:
      return;
label_163:
      return;
label_132:;
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int start_setup, object caller)
    {
      int num1 = 6;
      if (Token.ViewContainer())
        goto label_9;
label_1:
      int num2 = start_setup;
      int num3 = 2;
      num1 = Token.WriteContainer() ? num3 : num3;
label_9:
      while (true)
      {
        EventSetter eventSetter;
        int num4;
        switch (num1)
        {
          case 0:
          case 6:
            goto label_1;
          case 1:
          case 2:
            if (num2 == 3)
            {
              eventSetter = new EventSetter();
              eventSetter.Event = ButtonBase.ClickEvent;
              num4 = 5;
              break;
            }
            goto label_11;
          case 3:
            ((Style) caller).Setters.Add((SetterBase) eventSetter);
            num4 = 4;
            break;
          case 4:
            eventSetter = new EventSetter();
            eventSetter.Event = UIElement.MouseRightButtonDownEvent;
            eventSetter.Handler = (Delegate) new MouseButtonEventHandler(this.CountParser);
            ((Style) caller).Setters.Add((SetterBase) eventSetter);
            num4 = 7;
            break;
          case 5:
            eventSetter.Handler = (Delegate) new RoutedEventHandler(this.DeleteParser);
            goto case 3;
          case 7:
            goto label_3;
          default:
            num4 = 3;
            break;
        }
        num1 = num4;
      }
label_11:
      return;
label_3:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static Token()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              ProxyParser.NewPool();
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 1:
            case 2:
              goto label_3;
            case 3:
              goto label_2;
            case 5:
              goto label_9;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_7;
          }
        }
label_2:
        Token.m_Error = new List<Role>();
        num1 = 5;
        continue;
label_3:
        Token.interceptor = new Random();
        goto label_2;
      }
label_9:
      return;
label_7:;
    }

    internal static bool ViewContainer() => true;

    internal static bool WriteContainer() => false;
  }
}
