// Decompiled with JetBrains decompiler
// Type: Cradiator.ViewModels.ViewDataViewModel
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Config;
using Cradiator.Model;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace Cradiator.ViewModels
{
  public class ViewDataViewModel : NotifyingClass
  {
    private List<ProjectStatusViewModel> _projects = new List<ProjectStatusViewModel>();
    private Decimal _okPercentage;
    private string _AmountHeader;
    private int _AmountTotal;
    private int _AmountOK;
    private int _AmountNotOK;
    private bool _ShowOnlyBroken;
    private bool _ShowOutOfDate;
    private Visibility _ShowProjects;
    private Visibility _ShowAllOK;
    private Visibility _ShowOutOfDateProjects;
    private string _viewName;
    private int _outOfDateDifferenceInMinutes;

    [Obsolete("only used by XAML")]
    public ViewDataViewModel()
    {
    }

    public ViewDataViewModel(IViewSettings vs, IEnumerable<ProjectStatus> projects)
    {
      this._viewName = vs.ViewName;
      this._ShowOnlyBroken = vs.ShowOnlyBroken;
      this._ShowOutOfDate = vs.ShowOutOfDate;
      this._outOfDateDifferenceInMinutes = vs.OutOfDateDifferenceInMinutes;
      List<ProjectStatusViewModel> projectStatusViewModelList = new List<ProjectStatusViewModel>();
      foreach (ProjectStatus project in projects)
        projectStatusViewModelList.Add(new ProjectStatusViewModel(project, vs));
      this.Projects = projectStatusViewModelList;
    }

    public string ViewName
    {
      get => this._viewName;
      set
      {
        if (this._viewName == value)
          return;
        this._viewName = value;
        this.Notify(nameof (ViewName));
      }
    }

    public List<ProjectStatusViewModel> Projects
    {
      get
      {
        if (this.ShowOnlyBroken)
          return this._projects.Where<ProjectStatusViewModel>((Func<ProjectStatusViewModel, bool>) (p => p.IsBroken)).ToList<ProjectStatusViewModel>();
        if (!this.ShowOutOfDate)
          return this._projects;
        DateTime highestBuildDate = this._projects.Max<ProjectStatusViewModel, DateTime>((Func<ProjectStatusViewModel, DateTime>) (d => d.LastBuildTime));
        return this._projects.Where<ProjectStatusViewModel>((Func<ProjectStatusViewModel, bool>) (p => highestBuildDate.Subtract(p.LastBuildTime).TotalMinutes > (double) this.OutOfDateDifferenceInMinutes)).ToList<ProjectStatusViewModel>();
      }
      set
      {
        this._projects = value;
        this.Notify(nameof (Projects));
        this.CalculateProperties();
      }
    }

    public Decimal OKPercentage
    {
      get => this._okPercentage;
      set
      {
        if (this._okPercentage == value)
          return;
        this._okPercentage = value;
        this.Notify(nameof (OKPercentage));
      }
    }

    public string AmountHeader
    {
      get => this._AmountHeader;
      set
      {
        if (this._AmountHeader == value)
          return;
        this._AmountHeader = value;
        this.Notify(nameof (AmountHeader));
      }
    }

    public int AmountTotal
    {
      get => this._AmountTotal;
      set
      {
        if (this._AmountTotal == value)
          return;
        this._AmountTotal = value;
        this.Notify(nameof (AmountTotal));
      }
    }

    public int AmountOK
    {
      get => this._AmountOK;
      set
      {
        if (this._AmountOK == value)
          return;
        this._AmountOK = value;
        this.Notify(nameof (AmountOK));
      }
    }

    public int AmountNotOK
    {
      get => this._AmountNotOK;
      set
      {
        if (this._AmountNotOK == value)
          return;
        this._AmountNotOK = value;
        this.Notify(nameof (AmountNotOK));
      }
    }

    public bool ShowOnlyBroken
    {
      get => this._ShowOnlyBroken;
      set
      {
        if (this._ShowOnlyBroken == value)
          return;
        this._ShowOnlyBroken = value;
        this.Notify(nameof (ShowOnlyBroken));
      }
    }

    public bool ShowOutOfDate
    {
      get => this._ShowOutOfDate;
      set
      {
        if (this._ShowOutOfDate == value)
          return;
        this._ShowOutOfDate = value;
        this.Notify(nameof (ShowOutOfDate));
      }
    }

    public Visibility ShowProjects
    {
      get => this._ShowProjects;
      set
      {
        if (this._ShowProjects == value)
          return;
        this._ShowProjects = value;
        this.Notify(nameof (ShowProjects));
      }
    }

    public Visibility ShowAllOK
    {
      get => this._ShowAllOK;
      set
      {
        if (this._ShowAllOK == value)
          return;
        this._ShowAllOK = value;
        this.Notify(nameof (ShowAllOK));
      }
    }

    public Visibility ShowOutOfDateProjects
    {
      get => this._ShowOutOfDateProjects;
      set
      {
        if (this._ShowOutOfDateProjects == value)
          return;
        this._ShowOutOfDateProjects = value;
        this.Notify(nameof (ShowOutOfDateProjects));
      }
    }

    public int OutOfDateDifferenceInMinutes
    {
      get => this._outOfDateDifferenceInMinutes;
      set
      {
        if (this._outOfDateDifferenceInMinutes == value)
          return;
        this._outOfDateDifferenceInMinutes = value;
        this.Notify(nameof (OutOfDateDifferenceInMinutes));
      }
    }

    private void CalculateProperties()
    {
      this.AmountTotal = this._projects.Count;
      this.AmountOK = this._projects.Count<ProjectStatusViewModel>((Func<ProjectStatusViewModel, bool>) (x => x.IsSuccessful));
      this.AmountNotOK = this._projects.Count - this.AmountOK;
      if (this.AmountTotal == 0)
      {
        this.OKPercentage = 100M;
      }
      else
      {
        this.OKPercentage = (Decimal) (this.AmountOK / this.AmountTotal);
        this.OKPercentage *= 100M;
        this.OKPercentage = Decimal.Round(this.OKPercentage, 4);
      }
      if (this.ShowOutOfDate)
      {
        DateTime highestBuildDate = this._projects.Max<ProjectStatusViewModel, DateTime>((Func<ProjectStatusViewModel, DateTime>) (d => d.LastBuildTime));
        if (this._projects.Where<ProjectStatusViewModel>((Func<ProjectStatusViewModel, bool>) (p => highestBuildDate.Subtract(p.LastBuildTime).TotalMinutes > (double) this.OutOfDateDifferenceInMinutes)).ToList<ProjectStatusViewModel>().Count == 0)
        {
          this.ShowAllOK = Visibility.Visible;
          this.ShowOutOfDateProjects = Visibility.Collapsed;
          this.ShowProjects = Visibility.Collapsed;
        }
        else
        {
          this.ShowAllOK = Visibility.Collapsed;
          this.ShowOutOfDateProjects = Visibility.Visible;
          this.ShowProjects = Visibility.Collapsed;
        }
      }
      else if (this.ShowOnlyBroken && this.OKPercentage == 100M)
      {
        this.ShowAllOK = Visibility.Visible;
        this.ShowProjects = Visibility.Collapsed;
        this.ShowOutOfDateProjects = Visibility.Collapsed;
      }
      else
      {
        this.ShowAllOK = Visibility.Collapsed;
        this.ShowProjects = Visibility.Visible;
        this.ShowOutOfDateProjects = Visibility.Collapsed;
      }
      this.AmountHeader = string.Format("Project Count : {0} ", (object) this.AmountTotal);
    }
  }
}
