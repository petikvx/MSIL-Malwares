// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: SafeArrayTypeMismatchExcepti, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: FE98C20D-A437-4C5F-9849-D190358A66A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c0f665918f4ea75327960ddf58cf37e415a6bf6569a4c22aa6291fbac9d171ce.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = -906402596;
        JSONNode jsonNode;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1260581185)) % 8U)
          {
            case 0:
              num1 = (int) num2 * 307962754 ^ -1839469280;
              continue;
            case 1:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 650320114 ^ -767980200;
              continue;
            case 2:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = -1351453985;
              continue;
            case 3:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * -1276770762 ^ -1445446015;
              continue;
            case 4:
              int num3 = !flag ? -193259627 : (num3 = -1685607450);
              num1 = num3 ^ (int) num2 * -1448594206;
              continue;
            case 5:
              num1 = (int) num2 * 1473614851 ^ 232916767;
              continue;
            case 6:
              goto label_1;
            default:
              goto label_9;
          }
        }
label_9:
        return jsonNode;
      }
      set
      {
        bool flag = this.m_Dict.ContainsKey(aKey);
label_1:
        int num1 = -1660354596;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -859662165)) % 7U)
          {
            case 0:
              goto label_3;
            case 1:
              int num3 = flag ? -958727685 : (num3 = -1442702595);
              num1 = num3 ^ (int) num2 * -1502939307;
              continue;
            case 2:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 209920883 ^ -508952616;
              continue;
            case 3:
              goto label_1;
            case 4:
              this.m_Dict.Add(aKey, value);
              num1 = -1745015372;
              continue;
            case 5:
              num1 = (int) num2 * -1046068311 ^ -765587482;
              continue;
            case 6:
              num1 = (int) num2 * 427449245 ^ 1173298223;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = -1963591469;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1194315825)) % 8U)
          {
            case 0:
              int num4 = flag ? 947771102 : (num4 = 1511759240);
              num1 = num4 ^ (int) num2 * -1588205657;
              continue;
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 1227006063 ^ -2019008243;
              continue;
            case 2:
              num1 = (int) num2 * -736795337 ^ 632777156;
              continue;
            case 3:
              goto label_1;
            case 4:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * 859587264 ^ -1670281167;
                continue;
              }
              num3 = 1;
              break;
            case 6:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 7:
              jsonNode = (JSONNode) null;
              num1 = -480824307;
              continue;
            default:
              goto label_12;
          }
          flag = num3 != 0;
          num1 = -1723233177;
        }
label_12:
        return jsonNode;
      }
      set
      {
        if (aIndex < 0)
          goto label_7;
label_1:
        int num1 = 1154286877;
label_2:
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1643372917)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              goto label_6;
            case 2:
              int num3 = flag ? 219216442 : (num3 = 164229996);
              num1 = num3 ^ (int) num2 * 1939169543;
              continue;
            case 3:
              goto label_1;
            case 4:
              num1 = (int) num2 * 1035418537 ^ -386169493;
              continue;
            default:
              goto label_9;
          }
        }
label_3:
        return;
label_9:
        return;
label_6:
        int num4 = aIndex >= this.m_Dict.Count ? 1 : 0;
        goto label_8;
label_7:
        num4 = 1;
label_8:
        flag = num4 != 0;
        num1 = 2048945721;
        goto label_2;
      }
    }

    public override int Count => this.m_Dict.Count;

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 2040456375;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 548933795)) % 15U)
        {
          case 0:
            num1 = (int) num2 * -91942661 ^ -1044675667;
            continue;
          case 1:
            flag1 = !JSONClass.\u200C⁭‬‪‮⁯‏⁭⁮‭⁪‮⁬‬‍⁫⁫‫⁯⁪⁪‎‬⁮⁯‍⁬‍⁪‪⁭‬‌⁯⁯‌‮‬‪⁭‮(aKey);
            num1 = (int) num2 * -1477257678 ^ -2011275742;
            continue;
          case 2:
            num1 = (int) num2 * 853251469 ^ 1065063758;
            continue;
          case 3:
            num1 = (int) num2 * -1284156506 ^ 269583769;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          case 6:
            flag2 = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * 2050915481 ^ 1019787254;
            continue;
          case 7:
            this.m_Dict.Add(aKey, aItem);
            num1 = 1805025936;
            continue;
          case 8:
            num1 = (int) num2 * 1874102937 ^ 1171389171;
            continue;
          case 9:
            num1 = 1711701817;
            continue;
          case 10:
            int num3 = !flag2 ? -2036549712 : (num3 = -1650033928);
            num1 = num3 ^ (int) num2 * -1141620906;
            continue;
          case 11:
            int num4 = !flag1 ? 1741565083 : (num4 = 437721566);
            num1 = num4 ^ (int) num2 * -1743022357;
            continue;
          case 12:
            num1 = (int) num2 * 1056840086 ^ 523571113;
            continue;
          case 13:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 3080192 ^ 1898054064;
            continue;
          case 14:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 1548241266;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 631656876;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2142291053)) % 8U)
        {
          case 0:
            int num3 = flag ? 73955530 : (num3 = 1858672025);
            num1 = num3 ^ (int) num2 * -1595166407;
            continue;
          case 1:
            flag = !this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -1341738083 ^ 1322181552;
            continue;
          case 2:
            num1 = (int) num2 * 1739937959 ^ 1153706560;
            continue;
          case 4:
            jsonNode1 = this.m_Dict[aKey];
            this.m_Dict.Remove(aKey);
            num1 = 652925856;
            continue;
          case 5:
            jsonNode2 = jsonNode1;
            num1 = (int) num2 * -1544678792 ^ 1554224567;
            continue;
          case 6:
            goto label_1;
          case 7:
            jsonNode2 = (JSONNode) null;
            num1 = (int) num2 * -730777208 ^ -2020400522;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode2;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = -1428833983;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1058750167)) % 6U)
        {
          case 0:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 722161358 ^ -1698251990;
            continue;
          case 1:
            jsonNode = (JSONNode) null;
            num1 = -2130947158;
            continue;
          case 2:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 3:
            goto label_1;
          case 4:
            if (aIndex >= 0)
            {
              num1 = (int) num2 * -1521042322 ^ -1718868937;
              continue;
            }
            num3 = 1;
            break;
          default:
            goto label_10;
        }
        int num4;
        num1 = num4 = num3 == 0 ? -376572970 : (num4 = -1697169175);
      }
label_10:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        JSONClass.\u003Cget_Childs\u003Ed__14 getChildsD14 = new JSONClass.\u003Cget_Childs\u003Ed__14(-2);
label_1:
        int num1 = 2011542102;
        IEnumerable<JSONNode> childs;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 66798494)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              getChildsD14.\u003C\u003E4__this = this;
              childs = (IEnumerable<JSONNode>) getChildsD14;
              num1 = (int) num2 * -603603413 ^ 233831775;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return childs;
      }
    }

    public IEnumerator GetEnumerator()
    {
      bool enumerator1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
label_1:
        int num2 = 715402341;
        Dictionary<string, JSONNode>.Enumerator enumerator;
        KeyValuePair<string, JSONNode> N;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 2046627462)) % 19U)
          {
            case 0:
              goto label_9;
            case 1:
              int num4 = num1 == 0 ? 2058798086 : (num4 = 179006132);
              num2 = num4 ^ (int) num3 * 1916882731;
              continue;
            case 2:
              goto label_1;
            case 3:
              num2 = (int) num3 * 340354184 ^ 1028411114;
              continue;
            case 4:
              int num5;
              num2 = num5 = enumerator.MoveNext() ? 1735857539 : (num5 = 270332983);
              continue;
            case 5:
              int num6;
              num2 = num6 = num1 != 1 ? 1838670619 : (num6 = 1112225473);
              continue;
            case 6:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * 1953758436 ^ 1526879843;
              continue;
            case 7:
              enumerator = new Dictionary<string, JSONNode>.Enumerator();
              num2 = (int) num3 * 1984754294 ^ -96545497;
              continue;
            case 8:
              N = enumerator.Current;
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = (object) N;
              num2 = 420056755;
              continue;
            case 9:
              goto label_15;
            case 10:
              enumerator1 = false;
              num2 = (int) num3 * 40985191 ^ 1823286472;
              continue;
            case 11:
            case 18:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -1;
              enumerator = this.m_Dict.GetEnumerator();
              num2 = 1205859607;
              continue;
            case 12:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * 2138900971 ^ 20032811;
              continue;
            case 13:
              N = new KeyValuePair<string, JSONNode>();
              num2 = (int) num3 * -773522456 ^ 1620021071;
              continue;
            case 15:
              num2 = (int) num3 * 1360571528 ^ -603716733;
              continue;
            case 16:
            case 17:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = 992654675;
              continue;
            default:
              goto label_19;
          }
        }
label_9:
        // ISSUE: reference to a compiler-generated field
        this.\u003C\u003E1__state = 1;
        enumerator1 = true;
        goto label_19;
label_15:
        enumerator1 = false;
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_19:
      return enumerator1;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1428887137;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -628549768)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -717710256 ^ -1341744027;
            continue;
          case 3:
            str1 = "{";
            num1 = (int) num2 * 2065246312 ^ -2002325382;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator();
      try
      {
label_12:
        int num3 = enumerator.MoveNext() ? -1679349159 : (num3 = -305541609);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -628549768)) % 8U)
          {
            case 0:
              str1 = JSONClass.\u202E‮‬‬‫‭⁬‌‭⁮⁫‌⁬‏⁭‭​⁭‍‬⁮⁭⁭‌‬‍‍⁬‏⁭‍‌‌‌‌‏‬‍‌⁬‮(str1, ", ");
              num3 = (int) num4 * -1867718046 ^ 2028903182;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -1626291501;
              continue;
            case 2:
              num3 = -1679349159;
              continue;
            case 3:
              int num5 = JSONClass.\u206A‫‍‌‍‌‌‮‍⁯‏⁭‍‫⁯‏⁪‏‭⁯‬​‮‎‮‬‌‭‮⁬‭‫‬‏‌‌⁪⁪⁬‍‮(str1) <= 2 ? -368600145 : (num5 = -1919249023);
              num3 = num5 ^ (int) num4 * 2133527955;
              continue;
            case 4:
              goto label_12;
            case 5:
              num3 = (int) num4 * -1544534454 ^ -587356106;
              continue;
            case 6:
              str1 = JSONClass.\u200E‎‌‍⁫‌‫⁬⁪‬⁮​​⁫⁬⁪⁭‮‎‫⁭‏⁮‎⁯⁯‪‎‭⁯‮‏‎‍⁪⁮‌‍⁫⁭‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202D‬⁫⁬⁮‬⁮‌⁫‬‭‭​‫‫⁯‭⁬‫⁬‎‌⁭‬​⁬‫‮‌⁯‭⁬‏⁫‎​‏⁯‫⁬‮((object) current.Value)
              });
              num3 = -1761175315;
              continue;
            default:
              goto label_20;
          }
        }
      }
      finally
      {
        enumerator.Dispose();
label_16:
        int num6 = -716786349;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -628549768)) % 3U)
          {
            case 0:
              goto label_16;
            case 1:
              num6 = (int) num7 * -877712342 ^ -1557042327;
              continue;
            default:
              goto label_19;
          }
        }
label_19:;
      }
label_20:
      string str2 = JSONClass.\u202E‮‬‬‫‭⁬‌‭⁮⁫‌⁬‏⁭‭​⁭‍‬⁮⁭⁭‌‬‍‍⁬‏⁭‍‌‌‌‌‏‬‍‌⁬‮(str1, "}");
label_21:
      int num8 = -918133359;
      string str3;
      while (true)
      {
        uint num9;
        switch ((num9 = (uint) (num8 ^ -628549768)) % 4U)
        {
          case 0:
            num8 = (int) num9 * -1707578071 ^ -454043637;
            continue;
          case 1:
            str3 = str2;
            num8 = (int) num9 * 160697032 ^ -1060122496;
            continue;
          case 2:
            goto label_21;
          default:
            goto label_25;
        }
      }
label_25:
      return str3;
    }

    public override string ToString(string aPrefix)
    {
label_1:
      int num1 = 1653540812;
      string str1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 826660929)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1991359222 ^ 41144566;
            continue;
          case 1:
            str1 = "{ ";
            num1 = (int) num2 * -1811182688 ^ -538373563;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_12:
        int num3 = enumerator.MoveNext() ? 439559540 : (num3 = 1263473901);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 826660929)) % 9U)
          {
            case 0:
              str1 = JSONClass.\u202E‮‬‬‫‭⁬‌‭⁮⁫‌⁬‏⁭‭​⁭‍‬⁮⁭⁭‌‬‍‍⁬‏⁭‍‌‌‌‌‏‬‍‌⁬‮(str1, ", ");
              num3 = (int) num4 * 159212808 ^ 1948097529;
              continue;
            case 2:
              str1 = JSONClass.\u206D⁭‍‪‍⁪⁭‬‮‪⁭‫⁫‎‮‏⁬⁮‭⁮⁪⁮⁯‪‌⁬‬⁮⁫‫‏⁪‏‎‎⁯⁯‫⁭‬‮(str1, "\n", aPrefix, "   ");
              str1 = JSONClass.\u200E‎‌‍⁫‌‫⁬⁪‬⁮​​⁫⁬⁪⁭‮‎‫⁭‏⁮‎⁯⁯‪‎‭⁯‮‏‎‍⁪⁮‌‍⁫⁭‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u202E‮‬‬‫‭⁬‌‭⁮⁫‌⁬‏⁭‭​⁭‍‬⁮⁭⁭‌‬‍‍⁬‏⁭‍‌‌‌‌‏‬‍‌⁬‮(aPrefix, "   "))
              });
              num3 = 1813688429;
              continue;
            case 3:
              num3 = (int) num4 * 1578832711 ^ 1104872421;
              continue;
            case 4:
              flag = JSONClass.\u206A‫‍‌‍‌‌‮‍⁯‏⁭‍‫⁯‏⁪‏‭⁯‬​‮‎‮‬‌‭‮⁬‭‫‬‏‌‌⁪⁪⁬‍‮(str1) > 3;
              num3 = (int) num4 * 1373412092 ^ -1681858631;
              continue;
            case 5:
              goto label_12;
            case 6:
              int num5 = !flag ? 1098620497 : (num5 = 1702108209);
              num3 = num5 ^ (int) num4 * 2042600526;
              continue;
            case 7:
              num3 = 439559540;
              continue;
            case 8:
              current = enumerator.Current;
              num3 = 1540165386;
              continue;
            default:
              goto label_17;
          }
        }
      }
label_17:
      string str2 = JSONClass.\u206D⁭‍‪‍⁪⁭‬‮‪⁭‫⁫‎‮‏⁬⁮‭⁮⁪⁮⁯‪‌⁬‬⁮⁫‫‏⁪‏‎‎⁯⁯‫⁭‬‮(str1, "\n", aPrefix, "}");
label_18:
      int num6 = 1275407460;
      string str3;
      while (true)
      {
        uint num7;
        switch ((num7 = (uint) (num6 ^ 826660929)) % 4U)
        {
          case 0:
            goto label_18;
          case 1:
            str3 = str2;
            num6 = (int) num7 * -1945442619 ^ -1429111097;
            continue;
          case 3:
            num6 = (int) num7 * 436311075 ^ 763604474;
            continue;
          default:
            goto label_22;
        }
      }
label_22:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -2132622181;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -316706703)) % 7U)
        {
          case 0:
            JSONClass.\u206C‭‭‏⁫⁪​‎‌‪‮⁪⁭‭‮‍​‬⁫‫⁬⁭‍⁭‪‪‍⁭‫‌‪‭⁫‌‬‫‍‬⁮⁫‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -1373847743 ^ 553952510;
            continue;
          case 1:
            JSONClass.\u206F⁭‮⁪⁫⁬‍​‏​‍‮‫​‭‌⁫‪⁪‎‌⁫‮⁪⁬‫‬⁯⁮​⁭‏⁪​⁬‎​⁪⁭‬‮(aWriter, (byte) 2);
            num1 = (int) num2 * 752822311 ^ -475650120;
            continue;
          case 2:
            num1 = (int) num2 * 1335938335 ^ -8533083;
            continue;
          case 4:
            num1 = (int) num2 * -1498987764 ^ 1165240141;
            continue;
          case 5:
            num1 = (int) num2 * 1840808307 ^ 207794569;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_17:
        int num3 = enumerator.MoveNext() ? -527820368 : (num3 = -843681209);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -316706703)) % 10U)
          {
            case 0:
              JSONClass.\u206F‏‍⁬⁫‫‬‫⁮​⁯‬⁪⁫⁪⁫‏​⁬⁫⁪⁫‪⁫‍‪​‌⁫‮​‫⁬⁪​⁫​⁬‬⁯‮(aWriter, current);
              num3 = (int) num4 * 1881767799 ^ -425101312;
              continue;
            case 1:
              goto label_17;
            case 2:
              goto label_21;
            case 3:
              num3 = -527820368;
              continue;
            case 4:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -549628989 ^ 1388809849;
              continue;
            case 5:
              current = enumerator.Current;
              num3 = -1421407363;
              continue;
            case 6:
              num3 = (int) num4 * 1516875038 ^ 1690418356;
              continue;
            case 7:
              num3 = (int) num4 * -1361983644 ^ 95938894;
              continue;
            case 8:
              num3 = (int) num4 * -1764591925 ^ 308459183;
              continue;
            case 9:
              num3 = (int) num4 * 1359678651 ^ 856677950;
              continue;
            default:
              goto label_12;
          }
        }
label_21:
        return;
label_12:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = 1502508273;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 882374342)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -208539314 ^ 1529700879;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u200C⁭‬‪‮⁯‏⁭⁮‭⁪‮⁬‬‍⁫⁫‫⁯⁪⁪‎‬⁮⁯‍⁬‍⁪‪⁭‬‌⁯⁯‌‮‬‪⁭‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u206A‫‍‌‍‌‌‮‍⁯‏⁭‍‫⁯‏⁪‏‭⁯‬​‮‎‮‬‌‭‮⁬‭‫‬‏‌‌⁪⁪⁬‍‮([In] string obj0) => obj0.Length;

    static string \u202E‮‬‬‫‭⁬‌‭⁮⁫‌⁬‏⁭‭​⁭‍‬⁮⁭⁭‌‬‍‍⁬‏⁭‍‌‌‌‌‏‬‍‌⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D‬⁫⁬⁮‬⁮‌⁫‬‭‭​‫‫⁯‭⁬‫⁬‎‌⁭‬​⁬‫‮‌⁯‭⁬‏⁫‎​‏⁯‫⁬‮([In] object obj0) => obj0.ToString();

    static string \u200E‎‌‍⁫‌‫⁬⁪‬⁮​​⁫⁬⁪⁭‮‎‫⁭‏⁮‎⁯⁯‪‎‭⁯‮‏‎‍⁪⁮‌‍⁫⁭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206D⁭‍‪‍⁪⁭‬‮‪⁭‫⁫‎‮‏⁬⁮‭⁮⁪⁮⁯‪‌⁬‬⁮⁫‫‏⁪‏‎‎⁯⁯‫⁭‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206F⁭‮⁪⁫⁬‍​‏​‍‮‫​‭‌⁫‪⁪‎‌⁫‮⁪⁬‫‬⁯⁮​⁭‏⁪​⁬‎​⁪⁭‬‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u206C‭‭‏⁫⁪​‎‌‪‮⁪⁭‭‮‍​‬⁫‫⁬⁭‍⁭‪‪‍⁭‫‌‪‭⁫‌‬‫‍‬⁮⁫‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u206F‏‍⁬⁫‫‬‫⁮​⁯‬⁪⁫⁪⁫‏​⁬⁫⁪⁫‪⁫‍‪​‌⁫‮​‫⁬⁪​⁫​⁬‬⁯‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
