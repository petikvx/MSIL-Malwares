// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: ةE, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5B83DFD6-FCF7-4EFA-B68A-746E3BD488E0
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-0ae22d4877231b64b2e9e1252bbe8636ea43fe5692ca899733e715ccfc82e224.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = -668335313;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -683679679)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -1267729870 ^ -1733963173;
            continue;
          case 2:
            num1 = (int) num2 * -703569538 ^ 702595992;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.b = board;
    }

    internal void TestSinglePiece(Pieces x)
    {
      this.b.ClearBoard();
label_1:
      int num1 = 826768500;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 447556494)) % 9U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b.WhiteCanCastleKingSide = false;
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * 1000544792 ^ -1447484315;
            continue;
          case 2:
            int num3 = x != Pieces.King ? -979915771 : (num3 = -2009778479);
            num1 = num3 ^ (int) num2 * -350890600;
            continue;
          case 3:
            num1 = (int) num2 * 1322871969 ^ -1827685865;
            continue;
          case 4:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * 1334937995 ^ 1461629772;
            continue;
          case 5:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1412806254 ^ -317483367;
            continue;
          case 6:
            goto label_1;
          case 7:
            this.b.DisableTurns = true;
            num1 = 2687229;
            continue;
          case 8:
            num1 = (int) num2 * 1031964748 ^ -1876127452;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = 666232930;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 321672678)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * 684660303 ^ 414374809;
            continue;
          case 3:
            num1 = (int) num2 * -1580577425 ^ -1990135277;
            continue;
          case 4:
            this.b.addBlack(4, 6, Pieces.Pawn);
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * -943729685 ^ -1345472746;
            continue;
          case 5:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -346637573 ^ 2082136736;
            continue;
          case 6:
            this.b.ClearBoard();
            this.b.DisableTurns = true;
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 514588376 ^ -1383667937;
            continue;
          case 7:
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 772405450 ^ 1487441635;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1697499331 ^ 786930527;
            continue;
          case 9:
            num1 = (int) num2 * 1125751785 ^ -1361409545;
            continue;
          default:
            goto label_12;
        }
      }
label_3:
      return;
label_12:;
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1864106282;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 278262957)) % 8U)
        {
          case 0:
            this.b.addWhite(4, 6, Pieces.Pawn);
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * 586299587 ^ 828941020;
            continue;
          case 1:
            num1 = (int) num2 * -758427001 ^ -1315165836;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 669991422 ^ 1976564036;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * -460287082 ^ -1224516427;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * -931121302 ^ -761374597;
            continue;
          case 7:
            num1 = (int) num2 * -1932047701 ^ 1627340228;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    internal void TestCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 560080550;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2138932131)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -759509480 ^ -1023365007;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 685836010 ^ 753156471;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 682218617 ^ 805111107;
            continue;
          case 5:
            this.b.addWhite(0, 0, Pieces.Rook);
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 653809441 ^ 1216696983;
            continue;
          case 6:
            num1 = (int) num2 * 1668123404 ^ -1137182104;
            continue;
          case 7:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * -1589777751 ^ 1730266580;
            continue;
          case 8:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 564642127 ^ 1549939577;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 797289410;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 692728126)) % 9U)
        {
          case 0:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * 1753522287 ^ -1796452091;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * 1668290123 ^ 111405735;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addBlack(0, 4, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 956629186 ^ -104181657;
            continue;
          case 4:
            num1 = (int) num2 * 461375300 ^ -709320074;
            continue;
          case 5:
            num1 = (int) num2 * -1405501060 ^ -929817739;
            continue;
          case 6:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * 1849368458 ^ 1977008672;
            continue;
          case 7:
            num1 = (int) num2 * 600018335 ^ -1141861764;
            continue;
          case 8:
            goto label_3;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -1096181255;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -201763670)) % 6U)
        {
          case 0:
            num1 = (int) num2 * -1101377679 ^ -1808754834;
            continue;
          case 1:
            this.b.ClearBoard();
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -722187800 ^ 755228756;
            continue;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -69781690 ^ 174298369;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -429329422 ^ 374110174;
            continue;
          case 5:
            goto label_3;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1522078947;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1729718263)) % 13U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -886197986 ^ -5590477;
            continue;
          case 2:
            this.b.DisableTurns = true;
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -1524439054 ^ 1012453870;
            continue;
          case 3:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -605317773 ^ -583167889;
            continue;
          case 4:
            this.b.addBlack(7, 7, Pieces.Rook);
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1843477114 ^ 1227216573;
            continue;
          case 5:
            num1 = (int) num2 * -1912311315 ^ 1482700527;
            continue;
          case 6:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -971933002 ^ 1210715252;
            continue;
          case 7:
            goto label_1;
          case 8:
            this.b.addWhite(4, 5, Pieces.Bishop);
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -76840518 ^ 39799074;
            continue;
          case 9:
            num1 = (int) num2 * -1210558413 ^ -1702514261;
            continue;
          case 10:
            num1 = (int) num2 * 1220400373 ^ 174826601;
            continue;
          case 11:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * -1308276864 ^ 325519752;
            continue;
          case 12:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -1121533339 ^ -1141982740;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }
  }
}
