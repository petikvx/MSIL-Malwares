// Decompiled with JetBrains decompiler
// Type: .
// Assembly: C, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F25E1EAB-EB04-4ECD-A70E-0143E63DFF03
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Refroso.hrpz-e40496d5f84ff83ebc4a14536714c2842f292149aa58d7861f48ee8d2476be88.exe

using \u0007;
using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace \u000E
{
  internal sealed class \u0007
  {
    private static bool \u0001;
    private static \u000E.\u0007.\u0002 \u0001;

    [DllImport("shell32", EntryPoint = "ExtractIconEx")]
    private static extern int \u0002([In] string obj0, [In] int obj1, [In] ref int obj2, [In] ref int obj3, [In] int obj4);

    [DllImport("user32", EntryPoint = "DrawText", CharSet = CharSet.Unicode)]
    private static extern int \u0002(
      [In] IntPtr obj0,
      [In] string obj1,
      [In] int obj2,
      [In] ref \u000E.\u0007.\u0001 obj3,
      [In] int obj4);

    [DllImport("gdi32.dll", EntryPoint = "SelectObject")]
    private static extern IntPtr \u0002([In] IntPtr obj0, [In] IntPtr obj1);

    [DllImport("kernel32.Dll", EntryPoint = "GetVersionEx")]
    private static extern short \u0002([In] ref \u000E.\u0007.\u0002 obj0);

    [DllImport("user32.dll", EntryPoint = "GetSystemMetrics")]
    private static extern int \u0002([In] int obj0);

    [DllImport("kernel32.dll", EntryPoint = "GetSystemInfo")]
    private static extern void \u0002([In] ref \u000E.\u0007.\u0003 obj0);

    [SpecialName]
    private static \u000E.\u0007.\u0002 \u0002()
    {
      if (!\u000E.\u0007.\u0001)
      {
        \u000E.\u0007.\u0001 = new \u000E.\u0007.\u0002();
        try
        {
          \u000E.\u0007.\u0001.\u0001 = Marshal.SizeOf(typeof (\u000E.\u0007.\u0002));
          do
          {
            if (true)
            {
              int num = (int) \u000E.\u0007.\u0002(ref \u000E.\u0007.\u0001);
            }
            if (false)
              goto label_9;
          }
          while (false);
          \u000E.\u0007.\u0001 = true;
        }
        catch
        {
        }
      }
label_9:
      return \u000E.\u0007.\u0001;
    }

    [SpecialName]
    internal static bool \u0002()
    {
      bool flag;
      try
      {
        \u000E.\u0007.\u0003 obj;
        do
        {
          obj = new \u000E.\u0007.\u0003();
          \u000E.\u0007.\u0002(ref obj);
        }
        while (false);
        do
        {
          int num1 = (int) obj.\u0001;
          int num2;
          do
          {
            num2 = 9;
label_3:
            int num3;
            for (; num2 != 0; num2 = num3)
            {
              num3 = 0;
              if (num3 == 0)
              {
                if (num3 == 0)
                {
                  int num4 = num1 == num2 ? 1 : 0;
                  num2 = 0;
                  num1 = num4;
                  break;
                }
                goto label_3;
              }
            }
          }
          while (num2 != 0);
          flag = num1 != 0;
          if (true)
            ;
        }
        while (false);
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    [SpecialName]
    internal static bool \u0003()
    {
      bool flag;
      try
      {
        int num1;
        for (int index = 0; index == 0; index = num1)
        {
          num1 = 89;
          if (num1 != 0)
          {
            if (false)
              continue;
            num1 = \u000E.\u0007.\u0002(num1) == 0 ? 1 : 0;
          }
          else
            goto label_8;
label_4:
          int num2 = 0;
label_5:
          int num3 = 2;
          num3 = num2;
label_6:
          if (num3 != 0)
            num1 = num1 == num3 ? 1 : 0;
          else
            goto label_10;
label_8:
          num3 = 0;
          if (true)
          {
            if (num3 != 0)
            {
              num2 = num3;
              goto label_5;
            }
          }
          else
            goto label_6;
label_10:
          if (num3 == 0)
          {
            flag = num1 != 0;
            break;
          }
          goto label_4;
        }
      }
      catch
      {
        flag = false;
      }
      return flag;
    }

    [SpecialName]
    internal static bool \u0004() => \u000E.\u0007.\u0002().\u0001 == (byte) 1;

    [SpecialName]
    internal static string \u0002() => \u000E.\u0007.\u0002().\u0001;

    public static Icon \u0002()
    {
      Icon icon1;
      try
      {
        Icon icon2 = \u000E.\u0007.\u0003();
        if (true)
          icon1 = icon2;
      }
      catch (Exception ex)
      {
        icon1 = \u0008.\u0002("default");
      }
      return icon1;
    }

    private static Icon \u0003()
    {
      int num1;
      int num2;
      if (true)
      {
        int num3 = 0;
        if (num3 == 0)
        {
          if (true)
            num1 = num3;
        }
        else
        {
          num2 = num3;
          goto label_6;
        }
      }
      else
        goto label_14;
label_3:
      int num4;
      if (true)
      {
        if (true)
          num4 = 0;
      }
      int num5 = \u000E.\u0007.\u0002(\u0089\u0005.\u0002\u0008(), -1, ref num4, ref num4, 1);
      int num6;
      if (true)
        num6 = num5;
      if (num6 <= 0)
        goto label_7;
      else
        goto label_14;
label_6:
      if (num2 != 0)
        return Icon.FromHandle(new IntPtr(num1));
label_7:
      if (true)
        return (Icon) null;
      goto label_3;
label_14:
      \u000E.\u0007.\u0002(\u0089\u0005.\u0002\u0008(), 0, ref num1, ref num4, 1);
      num2 = num1;
      goto label_6;
    }

    internal static int \u0002([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      int num;
      try
      {
        while (true)
        {
          num = \u000E.\u0007.\u0004(obj0, obj1, obj2, obj3);
          if (true)
          {
            if (true)
              break;
          }
        }
        goto label_9;
      }
      catch (Exception ex1)
      {
        try
        {
          if (false)
            goto label_6;
label_5:
          num = \u0016\u0004.\u001F\u0003((double) \u000E.\u0007.\u0003(obj0, obj1, obj2, obj3) * 1.1);
label_6:
          if (false)
            goto label_5;
          else
            goto label_9;
        }
        catch (Exception ex2)
        {
        }
      }
label_8:
      return 0;
label_9:
      if (true)
        return num;
      goto label_8;
    }

    private static int \u0003([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      if (true)
        goto label_2;
label_1:
      Size size1;
      return size1.Height;
label_2:
      Size size2 = Size.Ceiling(obj0.MeasureString(obj1, obj2, obj3));
      if (true)
      {
        size1 = size2;
        goto label_1;
      }
      else
        goto label_1;
    }

    private static int \u0004([In] Graphics obj0, [In] string obj1, [In] Font obj2, [In] int obj3)
    {
      \u000E.\u0007.\u0001 obj = new \u000E.\u0007.\u0001(new Rectangle(0, 0, obj3, 10000));
      int num1 = 3088;
      int num2;
      while (true)
      {
        int num3;
        if (true)
          num3 = num1;
        IntPtr hdc = obj0.GetHdc();
        IntPtr num4;
        if (true)
          num4 = hdc;
        IntPtr hfont = obj2.ToHfont();
        IntPtr num5;
        if (true)
          num5 = hfont;
        IntPtr num6 = num4;
        IntPtr num7 = num5;
        while (true)
        {
          IntPtr num8 = \u000E.\u0007.\u0002(num6, num7);
          if (true)
            goto label_14;
label_5:
          IntPtr num9;
          IntPtr num10;
          IntPtr num11;
          do
          {
            num10 = num4;
            if (true)
            {
              string str = obj1;
              ref \u000E.\u0007.\u0001 local = ref obj;
              int num12 = num3;
              \u000E.\u0007.\u0002(num10, str, -1, ref local, num12);
              num10 = num4;
            }
            num11 = num9;
            if (true)
              \u000E.\u0007.\u0002(num10, num11);
            else
              goto label_3;
          }
          while (false);
          break;
label_3:
          num7 = num11;
          num6 = num10;
          continue;
label_14:
          num9 = num8;
          goto label_5;
        }
        \u0089\u0006.\u007E\u0004\u000F((object) obj0, num4);
        num2 = obj.\u0004;
        if (false)
          num1 = num2;
        else
          break;
      }
      int num13 = obj.\u0002;
      return num2 - num13;
    }

    private struct \u0001
    {
      public int \u0001;
      public int \u0002;
      public int \u0003;
      public int \u0004;

      public \u0001([In] Rectangle obj0)
      {
        this.\u0001 = obj0.Left;
        this.\u0002 = obj0.Top;
        this.\u0004 = obj0.Bottom;
        this.\u0003 = obj0.Right;
      }
    }

    private struct \u0002
    {
      public int \u0001;
      public uint \u0001;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string \u0001;
      public ushort \u0001;
      public ushort \u0002;
      public ushort \u0003;
      public byte \u0001;
      private byte \u0002;
    }

    internal struct \u0003
    {
      public ushort \u0001;
      private ushort \u0002;
      public uint \u0001;
      public IntPtr \u0001;
      public IntPtr \u0002;
      public IntPtr \u0003;
      public uint \u0002;
      public uint \u0003;
      public uint \u0004;
      public ushort \u0003;
      public ushort \u0004;
    }
  }
}
