// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Messages.ApplicationInformation
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Runtime.InteropServices;

namespace PreEmptive.SoS.Client.Messages
{
  public class ApplicationInformation
  {
    public Guid Id
    {
      get
      {
        int num1 = 12688;
        int num2 = num1;
        num1 = 12688;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 14830;
        int num2 = num1;
        num1 = 14830;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Name
    {
      get
      {
        int num1 = 15309;
        int num2 = num1;
        num1 = 15309;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 295;
        int num2 = num1;
        num1 = 295;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Version
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -28403;
        int num2 = num1;
        num1 = -28403;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 10460;
        int num2 = num1;
        num1 = 10460;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string ApplicationType
    {
      get
      {
        int num1 = -18830;
        int num2 = num1;
        num1 = -18830;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -14129;
        int num2 = num1;
        num1 = -14129;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ApplicationInformation(Guid id, [Optional] string name, [Optional] string version, [Optional] string applicationType)
    {
      int A_1 = 17;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Id = !(id == Guid.Empty) ? id : throw new ArgumentException(Utils.a("蓄뗆껈뻊ꃌ\uAACE뿐\uA7D2\uF5D4듖룘뗚돜냞闠쏢蟤苦짨藪飬菮鷰폲髴藶\uD9F8黺郼迾甀稂", A_1), Utils.a("계ꏆ", A_1));
      this.Name = name;
      this.Version = version;
      this.ApplicationType = applicationType;
    }
  }
}
