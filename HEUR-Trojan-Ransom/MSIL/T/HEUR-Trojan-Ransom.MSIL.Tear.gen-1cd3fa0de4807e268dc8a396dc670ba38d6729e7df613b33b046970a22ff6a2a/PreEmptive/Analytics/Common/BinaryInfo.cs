// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.BinaryInfo
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common
{
  public class BinaryInfo
  {
    public static BinaryInfo GetCurrent()
    {
      int num1 = -267;
      int num2 = num1;
      num1 = -267;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          Assembly callingAssembly = Assembly.GetCallingAssembly();
          BinaryInfo current = new BinaryInfo();
          current.LoadFromAssembly(callingAssembly);
          return current;
        default:
          goto case 1;
      }
    }

    public void LoadFromAssembly(Assembly asm)
    {
      int A_1_1 = 8;
      switch (0)
      {
        default:
          int num1 = 4;
          object obj1;
          while (true)
          {
            List<string> list;
            switch (num1)
            {
              case 0:
                num1 = !(this.Name == Utils.a("\uECBB첽ꖿ蟁꧃뛅볇ꏉ뫋ꯍﻏ鏑뫓럕듗ꏙ\uA8DB럝菟釡쫣뇥臧蓩뻫뫭", A_1_1)) ? 5 : 8;
                continue;
              case 1:
                if (obj1 != null)
                {
                  num1 = 3;
                  continue;
                }
                goto label_18;
              case 2:
                try
                {
                  int num2 = 4;
                  while (true)
                  {
                    object obj2;
                    int num3;
                    switch (num2)
                    {
                      case 0:
                        num3 = 3;
                        num2 = num3;
                        continue;
                      case 1:
                        if (obj2 != null)
                        {
                          num3 = 2;
                          num2 = num3;
                          continue;
                        }
                        goto case 0;
                      case 2:
                        num3 = -13955;
                        int num4 = num3;
                        num3 = -13955;
                        int num5 = num3;
                        switch (num4 == num5 ? 1 : 0)
                        {
                          case 0:
                          case 2:
                            goto label_8;
                          default:
                            num3 = 0;
                            if (num3 == 0)
                              ;
                            this.ID = new Guid?(new Guid((string) obj2.GetType().GetProperty(Utils.a("\uEABB\uDFBD겿럁ꇃ", A_1_1)).GetValue(obj2, (object[]) null)));
                            num3 = 0;
                            num2 = num3;
                            continue;
                        }
                      case 3:
                        goto label_5;
                      case 4:
label_8:
                        switch (0)
                        {
                          case 0:
                            break;
                          default:
                            continue;
                        }
                        break;
                    }
                    obj2 = ((IEnumerable<object>) asm.GetCustomAttributes(true)).FirstOrDefault<object>((Func<object, bool>) (A_0 =>
                    {
                      int A_1_2 = 17;
                      int num6 = -31381;
                      int num7 = num6;
                      num6 = -31381;
                      int num8 = num6;
                      switch (num7 == num8)
                      {
                        case true:
                          if (false)
                            ;
                          if (true)
                            ;
                          return A_0.GetType().ToString() == Utils.a("雄뻆뫈뿊\uA8CCꋎ\uFFD0臒ꃔ맖귘닚냜뫞쿠ꫢ诤鏦賨駪苬\u9FEEꋰ雲蟴臶郸飺飼賾⼀䐂瀄渆洈䨊礌笎挐稒眔或洘縚", A_1_2);
                        default:
                          goto case 1;
                      }
                    }));
                    num3 = 1;
                    num2 = num3;
                  }
                }
                catch
                {
                }
label_5:
                num1 = 9;
                continue;
              case 3:
                goto label_24;
              case 4:
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
              case 5:
                this.Version = list.Skip<string>(1).SingleOrDefault<string>((Func<string, bool>) (A_0 =>
                {
                  int A_1_3 = 3;
                  int num9 = 17659;
                  int num10 = num9;
                  num9 = 17659;
                  int num11 = num9;
                  switch (num10 == num11)
                  {
                    case true:
                      if (false)
                        ;
                      if (true)
                        ;
                      return A_0.ToLower().StartsWith(Utils.a("솶\uDCB8즺캼횾껀귂\uF8C4", A_1_3));
                    default:
                      goto case 1;
                  }
                }));
                num1 = 6;
                continue;
              case 6:
                if (this.Version != null)
                {
                  num1 = 7;
                  continue;
                }
                goto case 2;
              case 7:
                this.Version = this.Version.Substring(Utils.a("쪻\uDBBD늿뇁귃꧅ꛇ\uF7C9", A_1_1).Length);
                num1 = 2;
                continue;
              case 8:
                goto label_29;
              case 9:
                obj1 = ((IEnumerable<object>) asm.GetCustomAttributes(true)).FirstOrDefault<object>((Func<object, bool>) (A_0 =>
                {
                  int A_1_4 = 6;
                  int num12 = 18128;
                  int num13 = num12;
                  num12 = 18128;
                  int num14 = num12;
                  switch (num13 == num14)
                  {
                    case true:
                      if (false)
                        ;
                      if (true)
                        ;
                      return A_0.GetType().FullName == Utils.a("\uEAB9캻\uDBBD薿꿁듃닅ꇇ볉꧋\uE0CD量ꛑꃓꓕ뇗룙\uA9DBꫝ藟釡쫣ꓥ臧蓩跫鳭觯돱胳苵諷鏹黻诽瓿朁", A_1_4);
                    default:
                      goto case 1;
                  }
                }));
                num1 = 1;
                continue;
            }
            list = ((IEnumerable<string>) asm.FullName.Split(',')).Select<string, string>((Func<string, string>) (A_0 =>
            {
              int num15 = -4436;
              int num16 = num15;
              num15 = -4436;
              int num17 = num15;
              switch (num16 == num17)
              {
                case true:
                  int num18 = 1;
                  if (num18 == 0)
                    ;
                  num18 = 0;
                  if (num18 == 0)
                    ;
                  return A_0.Trim();
                default:
                  goto case 1;
              }
            })).ToList<string>();
            this.Name = list[0];
            num1 = 0;
          }
label_29:
          break;
label_18:
          break;
label_24:
          try
          {
            if (false)
              ;
            this.ID = new Guid?(new Guid((string) obj1.GetType().GetProperty(Utils.a("﮻쮽ꦿꛁ", A_1_1)).GetValue(obj1, (object[]) null)));
            break;
          }
          catch
          {
            break;
          }
      }
    }

    public BinaryInfo(
      [Optional] string method,
      [Optional] string @class,
      [Optional] string asmnam,
      [Optional] string version,
      [Optional] Guid? id,
      [Optional] DateTime? modified)
    {
      this.Name = asmnam;
      this.ClassName = @class;
      this.MethodName = method;
      this.Version = version;
      this.ID = id;
      this.LastModified = modified;
    }

    public Guid? ID
    {
      get
      {
        int num1 = -31640;
        int num2 = num1;
        num1 = -31640;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 25833;
        int num2 = num1;
        num1 = 25833;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public DateTime? LastModified
    {
      get
      {
        int num1 = -5903;
        int num2 = num1;
        num1 = -5903;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 7485;
        int num2 = num1;
        num1 = 7485;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Name
    {
      get
      {
        int num1 = -19680;
        int num2 = num1;
        num1 = -19680;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 7766;
        int num2 = num1;
        num1 = 7766;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Version
    {
      get
      {
        int num1 = 25852;
        int num2 = num1;
        num1 = 25852;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 15858;
        int num2 = num1;
        num1 = 15858;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string ClassName
    {
      get
      {
        int num1 = -14755;
        int num2 = num1;
        num1 = -14755;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 12734;
        int num2 = num1;
        num1 = 12734;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.e = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string MethodName
    {
      get
      {
        int num1 = -28510;
        int num2 = num1;
        num1 = -28510;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.f;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -5460;
        int num2 = num1;
        num1 = -5460;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.f = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public BinaryInfoTag ToTag()
    {
      int num1 = 9328;
      int num2 = num1;
      num1 = 9328;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return new BinaryInfoTag(this);
        default:
          goto case 1;
      }
    }
  }
}
