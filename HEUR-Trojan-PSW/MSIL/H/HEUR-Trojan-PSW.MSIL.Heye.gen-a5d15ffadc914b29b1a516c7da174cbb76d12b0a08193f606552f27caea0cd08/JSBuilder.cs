// Decompiled with JetBrains decompiler
// Type: StaggeringIsometricMap.JSBuilder
// Assembly: MethodToken, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C6648534-03E9-4D82-90D8-09C2DA46DB59
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Heye.gen-a5d15ffadc914b29b1a516c7da174cbb76d12b0a08193f606552f27caea0cd08.exe

using System.Text;

namespace StaggeringIsometricMap
{
  public class JSBuilder
  {
    private bool VueLight;
    private StringBuilder sb;
    private object CompLst;

    public JSBuilder()
    {
      this.VueLight = false;
      this.sb = new StringBuilder();
    }

    public JSBuilder(bool vueLight)
    {
      this.VueLight = false;
      this.sb = new StringBuilder();
      this.VueLight = vueLight;
    }

    public void AddVueFileComponent(string file, string name = null)
    {
      modHelpers.ParseVueFileResult vueFile = modHelpers.ParseVueFile(file);
      if (string.IsNullOrEmpty(name))
      {
        name = file.Substring(checked (file.LastIndexOf("/") + 1));
        name = name.Substring(0, name.IndexOf(".")).ToLower();
      }
      this.RenderComponent(name, vueFile.Template, vueFile.Script);
    }

    public void AddComponent(string name, string template, string script = "{}") => this.RenderComponent(name, template, script);

    private void RenderComponent(string name, string tmpl, string scrpt)
    {
      if (this.VueLight)
      {
        CompilerOptions co = new CompilerOptions();
        this.sb.AppendLine("var VLC_" + name + "=" + Compiler.Compile(tmpl, co) + ";");
      }
      else
        this.sb.AppendLine("Vue.component('" + name + "', {\r\n  template: " + modHelpers.JSStringEncode(tmpl) + ",\r\n" + scrpt.Substring(1).Trim() + ");");
    }

    public void AddVueFileApp(string file, string dataJS, string name = "app")
    {
      modHelpers.ParseVueFileResult vueFile = modHelpers.ParseVueFile(file);
      this.RenderApp(name, dataJS, vueFile.Template, vueFile.Script);
    }

    public void AddApp(string dataJS, string template, string script = "{}", string name = "app") => this.RenderApp(name, dataJS, template, script);

    private void RenderApp(string name, string dataJS, string tmpl, string scrpt)
    {
      if (this.VueLight)
      {
        CompilerOptions co = new CompilerOptions();
        this.sb.AppendLine("(function() {");
        this.sb.AppendLine("  var data=" + dataJS + ";");
        this.sb.AppendLine("  var render=" + Compiler.Compile(tmpl, co) + ";");
        this.sb.AppendLine("  document.write(render(data));");
        this.sb.AppendLine("})();");
      }
      else
        this.sb.AppendLine("var " + name + "=new Vue({\r\n  el: '#" + name + "',\r\n  template: " + modHelpers.JSStringEncode(tmpl) + ",\r\n  data: " + dataJS + ",\r\n" + scrpt.Substring(1).Trim() + ");");
    }

    public override string ToString() => this.sb.ToString();
  }
}
