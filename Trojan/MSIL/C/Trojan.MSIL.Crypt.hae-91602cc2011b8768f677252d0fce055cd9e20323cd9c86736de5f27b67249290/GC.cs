// Decompiled with JetBrains decompiler
// Type: A.GC
// Assembly: N0$Crypter, Version=3.0.7.1, Culture=neutral, PublicKeyToken=null
// MVID: FD276B3A-BCAA-4176-AE7A-13B114112E73
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hae-91602cc2011b8768f677252d0fce055cd9e20323cd9c86736de5f27b67249290.exe

using System;
using System.Reflection;
using System.Reflection.Emit;

namespace A
{
  internal sealed class GC
  {
    private static ModuleHandle A;

    static GC()
    {
      if ((object) typeof (MulticastDelegate) == null)
        return;
label_1:
      switch (1)
      {
        case 0:
          goto label_1;
        default:
          if (false)
          {
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (GC.\u002Ecctor);
          }
          GC.A = Assembly.GetExecutingAssembly().GetModules()[0].ModuleHandle;
          break;
      }
    }

    public static void A(int _param0, int _param1, int _param2)
    {
      Type typeFromHandle;
      MethodInfo method;
      try
      {
        typeFromHandle = Type.GetTypeFromHandle(GC.A.ResolveTypeHandle(_param0));
        object methodFromHandle;
        if (_param2 == 16777215)
        {
label_1:
          switch (5)
          {
            case 0:
              goto label_1;
            default:
              if (false)
              {
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (GC.A);
              }
              methodFromHandle = (object) MethodBase.GetMethodFromHandle(GC.A.ResolveMethodHandle(_param1));
              break;
          }
        }
        else
          methodFromHandle = (object) MethodBase.GetMethodFromHandle(GC.A.ResolveMethodHandle(_param1), GC.A.ResolveTypeHandle(_param2));
        method = (MethodInfo) methodFromHandle;
      }
      catch (Exception ex)
      {
        throw;
      }
      foreach (FieldInfo field in typeFromHandle.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          Delegate @delegate;
          if (method.IsStatic)
          {
label_11:
            switch (1)
            {
              case 0:
                goto label_11;
              default:
                @delegate = Delegate.CreateDelegate(field.FieldType, method);
                break;
            }
          }
          else
          {
            ParameterInfo[] parameters = method.GetParameters();
            int length = parameters.Length + 1;
            Type[] parameterTypes = new Type[length];
            if (method.DeclaringType.IsValueType)
            {
label_14:
              switch (4)
              {
                case 0:
                  goto label_14;
                default:
                  parameterTypes[0] = method.DeclaringType.MakeByRefType();
                  break;
              }
            }
            else
              parameterTypes[0] = typeof (object);
            for (int index = 1; index < length; ++index)
              parameterTypes[index] = parameters[index - 1].ParameterType;
label_20:
            switch (5)
            {
              case 0:
                goto label_20;
              default:
                DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, method.ReturnType, parameterTypes, typeFromHandle, true);
                ILGenerator ilGenerator1 = dynamicMethod.GetILGenerator();
                ilGenerator1.Emit(OpCodes.Ldarg_0);
                if (length > 1)
                {
label_22:
                  switch (4)
                  {
                    case 0:
                      goto label_22;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_1);
                      break;
                  }
                }
                if (length > 2)
                {
label_25:
                  switch (2)
                  {
                    case 0:
                      goto label_25;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_2);
                      break;
                  }
                }
                if (length > 3)
                {
label_28:
                  switch (1)
                  {
                    case 0:
                      goto label_28;
                    default:
                      ilGenerator1.Emit(OpCodes.Ldarg_3);
                      break;
                  }
                }
                if (length > 4)
                {
label_31:
                  switch (1)
                  {
                    case 0:
                      goto label_31;
                    default:
                      for (int index = 4; index < length; ++index)
                        ilGenerator1.Emit(OpCodes.Ldarg_S, index);
label_35:
                      switch (1)
                      {
                        case 0:
                          goto label_35;
                      }
                      break;
                  }
                }
                ILGenerator ilGenerator2 = ilGenerator1;
                OpCode opcode;
                if (!field.IsFamilyOrAssembly)
                {
label_37:
                  switch (1)
                  {
                    case 0:
                      goto label_37;
                    default:
                      opcode = OpCodes.Call;
                      break;
                  }
                }
                else
                  opcode = OpCodes.Callvirt;
                MethodInfo meth = method;
                ilGenerator2.Emit(opcode, meth);
                ilGenerator1.Emit(OpCodes.Ret);
                @delegate = dynamicMethod.CreateDelegate(typeFromHandle);
                break;
            }
          }
          field.SetValue((object) null, (object) @delegate);
        }
        catch (Exception ex)
        {
        }
      }
label_45:
      switch (2)
      {
        case 0:
          goto label_45;
      }
    }
  }
}
