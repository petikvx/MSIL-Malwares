// Decompiled with JetBrains decompiler
// Type: TagMp3Saito.MusicFile
// Assembly: ManualResetEv, Version=0.7.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 555BB952-8DEA-4CDE-87A4-0E642B4B65E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-1e9b14262f935e7f822b39afe45842ceac9c584e70a3b520d8f391d975d600ee.exe

using Id3Tag;
using Id3Tag.HighLevel;
using System;
using System.Collections.Generic;
using System.IO;

namespace TagMp3Saito
{
  [Serializable]
  public class MusicFile
  {
    public MusicFile()
    {
    }

    public MusicFile(string filePath, List<Mp3Field> mp3FieldsSelecionados)
    {
      this.FullPath = filePath;
      this.LoadId3Tags(mp3FieldsSelecionados);
    }

    protected Id3V1Tag TagV1 { get; set; }

    protected TagContainer TagV2 { get; set; }

    public List<Mp3Field> Mp3Fields { get; set; }

    public string FullPath { get; set; }

    public void LoadId3Tags(List<Mp3Field> mp3FieldsSelecionados)
    {
      this.Mp3Fields = new List<Mp3Field>();
      Id3TagManager id3TagManager = Id3TagFactory.CreateId3TagManager();
      FileState tagsStatus = id3TagManager.GetTagsStatus(this.FullPath);
      if (tagsStatus.Id3V1TagFound)
        this.TagV1 = id3TagManager.ReadV1Tag(this.FullPath);
      if (tagsStatus.Id3V2TagFound)
        this.TagV2 = id3TagManager.ReadV2Tag(this.FullPath);
      if (this.TagV2 == null)
        return;
      foreach (Mp3Field fieldsSelecionado in mp3FieldsSelecionados)
      {
        if (fieldsSelecionado.FrameTypeString == "TextFrame" && this.TagV2.SearchFrame(fieldsSelecionado.TagName) != null)
        {
          fieldsSelecionado.Valor = (object) FrameUtilities.ConvertToText(this.TagV2.SearchFrame(fieldsSelecionado.TagName)).Content;
          this.Mp3Fields.Add(fieldsSelecionado);
        }
      }
    }

    public void Save(List<Mp3Field> fieldList)
    {
      FileInfo fileInfo = new FileInfo(this.FullPath);
      if (fileInfo.IsReadOnly)
        fileInfo.IsReadOnly = false;
      Id3TagManager id3TagManager = Id3TagFactory.CreateId3TagManager();
      id3TagManager.WriteV1Tag(fileInfo.FullName, this.TagV1);
      id3TagManager.WriteV2Tag(fileInfo.FullName, this.TagV2);
      Id3TagFactory.CreateId3TagManager().ReadV2Tag(fileInfo.FullName);
    }
  }
}
