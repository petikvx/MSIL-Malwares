// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: fC, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2BFFC2A0-BEF7-47FD-8B55-B5339EE53E65
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-a1558391914f4235dfdcdddcdf0de915a800541a4271feb4aff34af82b83a935.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
label_1:
    int num1 = -708798261;
    Bitmap bitmap;
    BitmapData bitmapData;
    Image image;
    byte[] numArray;
    int num2;
    int num3;
    bool flag;
    PixelFormat pixelFormat;
    IntPtr num4;
    int length;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -2072183142)) % 25U)
      {
        case 0:
          num1 = (int) num5 * -1054389172 ^ 349353222;
          continue;
        case 1:
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = (int) num5 * -2024021154 ^ -777322158;
          continue;
        case 2:
          goto label_1;
        case 3:
          Rectangle rectangle = new Rectangle(0, 0, ImageUtil.\u200C‬​‌‌‬‮‎⁯‫⁮⁫⁬‬‏‮‎‌‭‫‌‬‬‌​‏‌‎‮⁫⁯‪‫‏​‭‭‮‪‮((Image) bitmap), ImageUtil.\u200F‍‭⁫⁪‏⁬‪⁬‬⁪‫‫‫‌⁯‏‎⁪⁫⁫⁮⁪‏‌‌‏⁫⁭​‍⁪‎‍​‫‍‬⁫‎‮((Image) bitmap));
          bitmapData = ImageUtil.\u202C⁫⁬‬‫‭⁪⁭‎⁮⁯‫⁫‪‪⁯‏‮⁫‍⁭‪‎‬‮⁫⁬⁭‮‮⁬⁮‮‪⁮​⁪⁪‬‮‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num4 = ImageUtil.\u200E⁭‮‎‌⁮⁫‮⁫⁭‬‫⁪⁮‪⁫‏⁪‬‬⁫⁭⁮​‪‮⁮​‏‭‮⁯‎‪⁮⁯‪‭​‪‮(bitmapData);
          length = ImageUtil.\u200C‬​‌‌‬‮‎⁯‫⁮⁫⁬‬‏‮‎‌‭‫‌‬‬‌​‏‌‎‮⁫⁯‪‫‏​‭‭‮‪‮((Image) bitmap) * ImageUtil.\u200F‍‭⁫⁪‏⁬‪⁬‬⁪‫‫‫‌⁯‏‎⁪⁫⁫⁮⁪‏‌‌‏⁫⁭​‍⁪‎‍​‫‍‬⁫‎‮((Image) bitmap) * 4;
          num1 = (int) num5 * 1536615485 ^ 1468259594;
          continue;
        case 4:
          num2 += 4;
          num1 = -1182444500;
          continue;
        case 5:
          int num6 = flag ? -1492314237 : (num6 = -1013074169);
          num1 = num6 ^ (int) num5 * -1501512758;
          continue;
        case 6:
          num1 = (int) num5 * -1771299342 ^ 1460992041;
          continue;
        case 7:
          int num7 = (ImageUtil.\u206F‫​​‪‏⁪‬⁮⁬⁯‬⁮⁭‏‬⁮‫‭‏‎‍‭⁯⁭‪‮‫⁮‪⁭‌‮‍⁫⁫‏⁯‫‮‮(originalImage) & PixelFormat.Indexed) != PixelFormat.Indexed ? 1296128331 : (num7 = 722840994);
          num1 = num7 ^ (int) num5 * -374522520;
          continue;
        case 8:
          num2 = 0;
          num1 = (int) num5 * -1285518162 ^ -1121394614;
          continue;
        case 9:
          numArray[num2 + num3] = (byte) ((double) numArray[num2 + num3] * opacity);
          num1 = (int) num5 * -1790982162 ^ 1278954619;
          continue;
        case 10:
          num1 = (int) num5 * -652701403 ^ -1961967417;
          continue;
        case 11:
          num1 = -1999580384;
          continue;
        case 12:
          numArray = new byte[length];
          ImageUtil.\u200E⁫‮‮‏‏‏‫‌⁭‬⁪‏‌⁫‮⁬‪‍⁮⁭⁮⁯⁮‌‪⁪‪‪⁯‭‏⁬‍⁪⁪‬⁯‍‏‮(num4, numArray, 0, length);
          num1 = (int) num5 * -992325859 ^ -1941751215;
          continue;
        case 13:
          num3 = num3 + 1 + 1 + 1;
          num1 = (int) num5 * 2015191040 ^ 1871072032;
          continue;
        case 14:
          ImageUtil.\u206E‮‌⁫‬⁮⁯⁪‎⁪⁬‪⁮⁪‍⁮‮⁯​⁪‭‪‬‏‍‎‌‭‍​‫‭‍⁪⁫‭‎‪‏‌‮(bitmap, bitmapData);
          image = (Image) bitmap;
          num1 = (int) num5 * 2137354709 ^ -53271509;
          continue;
        case 15:
          int num8 = numArray[num2 + 4 - 1] != (byte) 0 ? 833962668 : (num8 = 1938326527);
          num1 = num8 ^ (int) num5 * -853858666;
          continue;
        case 16:
          bitmap = (Bitmap) ImageUtil.\u202A⁮‪⁮‪‎‫‪‫​‎​⁯​‮⁫‪⁭⁫⁬‎⁮⁬⁬⁭‫‮⁬‎‏⁮‭‭⁮⁯⁪‏⁬​⁮‮(originalImage);
          num1 = -29938401;
          continue;
        case 17:
          flag = num2 < numArray.Length;
          num1 = -586985182;
          continue;
        case 18:
          ImageUtil.\u206B⁫⁯⁯‭‬‎​⁭‪‭​⁬‎‮‮⁯⁮⁮⁪‫‪‪⁪‌‬⁯⁫⁮‏⁫‮⁭⁫⁫⁮​⁭⁬‬‮(numArray, 0, num4, length);
          num1 = (int) num5 * 203777357 ^ 812389791;
          continue;
        case 19:
          image = originalImage;
          num1 = (int) num5 * 1784106761 ^ 155619935;
          continue;
        case 20:
          num1 = (int) num5 * 188904365 ^ -1907089334;
          continue;
        case 22:
          num1 = (int) num5 * 356310561 ^ 499750394;
          continue;
        case 23:
          num3 = 0;
          num1 = -513841357;
          continue;
        case 24:
          num1 = (int) num5 * -1806327001 ^ -2064697311;
          continue;
        default:
          goto label_26;
      }
    }
label_26:
    return image;
  }

  static PixelFormat \u206F‫​​‪‏⁪‬⁮⁬⁯‬⁮⁭‏‬⁮‫‭‏‎‍‭⁯⁭‪‮‫⁮‪⁭‌‮‍⁫⁫‏⁯‫‮‮([In] Image obj0) => obj0.PixelFormat;

  static object \u202A⁮‪⁮‪‎‫‪‫​‎​⁯​‮⁫‪⁭⁫⁬‎⁮⁬⁬⁭‫‮⁬‎‏⁮‭‭⁮⁯⁪‏⁬​⁮‮([In] Image obj0) => obj0.Clone();

  static int \u200C‬​‌‌‬‮‎⁯‫⁮⁫⁬‬‏‮‎‌‭‫‌‬‬‌​‏‌‎‮⁫⁯‪‫‏​‭‭‮‪‮([In] Image obj0) => obj0.Width;

  static int \u200F‍‭⁫⁪‏⁬‪⁬‬⁪‫‫‫‌⁯‏‎⁪⁫⁫⁮⁪‏‌‌‏⁫⁭​‍⁪‎‍​‫‍‬⁫‎‮([In] Image obj0) => obj0.Height;

  static BitmapData \u202C⁫⁬‬‫‭⁪⁭‎⁮⁯‫⁫‪‪⁯‏‮⁫‍⁭‪‎‬‮⁫⁬⁭‮‮⁬⁮‮‪⁮​⁪⁪‬‮‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200E⁭‮‎‌⁮⁫‮⁫⁭‬‫⁪⁮‪⁫‏⁪‬‬⁫⁭⁮​‪‮⁮​‏‭‮⁯‎‪⁮⁯‪‭​‪‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u200E⁫‮‮‏‏‏‫‌⁭‬⁪‏‌⁫‮⁬‪‍⁮⁭⁮⁯⁮‌‪⁪‪‪⁯‭‏⁬‍⁪⁪‬⁯‍‏‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206B⁫⁯⁯‭‬‎​⁭‪‭​⁬‎‮‮⁯⁮⁮⁪‫‪‪⁪‌‬⁯⁫⁮‏⁫‮⁭⁫⁫⁮​⁭⁬‬‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206E‮‌⁫‬⁮⁯⁪‎⁪⁬‪⁮⁪‍⁮‮⁯​⁪‭‪‬‏‍‎‌‭‍​‫‭‍⁪⁫‭‎‪‏‌‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
