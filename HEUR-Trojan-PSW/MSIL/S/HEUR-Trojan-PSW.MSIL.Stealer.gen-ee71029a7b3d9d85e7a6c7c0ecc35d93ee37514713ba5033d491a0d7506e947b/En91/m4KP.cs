// Decompiled with JetBrains decompiler
// Type: En91.m4KP
// Assembly: k3F4, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EF2862A8-7088-4F2B-ADD5-AFDC446098D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee71029a7b3d9d85e7a6c7c0ecc35d93ee37514713ba5033d491a0d7506e947b.exe

using An9;
using Fe7;
using m5F8;
using Microsoft.VisualBasic.CompilerServices;
using s4J;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Linq;
using System.Drawing;
using System.Linq;
using System.Linq.Expressions;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using x7X;
using Yg8;

namespace En91
{
  [DesignerGenerated]
  public class m4KP : Form
  {
    private IContainer ႳႣ;
    [AccessedThroughProperty("Ⴃ")]
    private ComboBox ႳႳ;
    [AccessedThroughProperty("Ⴐ")]
    private Label ႳႰ;
    [AccessedThroughProperty("Ⴍ")]
    private TextBox ႳႼ;
    [AccessedThroughProperty("Ⴜ")]
    private ComboBox ႥႣ;
    [AccessedThroughProperty("ႨႷ")]
    private Button ႥႷ;
    [AccessedThroughProperty("ႨႠ")]
    private ErrorProvider ႥႤ;
    private Ca9.So3 Ⴃ = new Ca9.So3();

    public m4KP()
    {
      this.Load += new EventHandler(this.b3Q2);
      this.j8R9();
    }

    protected virtual void m2JZ([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.ႳႣ == null)
          return;
        this.ႳႣ.Dispose();
      }
      finally
      {
        this.Dispose(obj0);
      }
    }

    private void j8R9()
    {
      this.ႳႣ = (IContainer) new System.ComponentModel.Container();
      this.Ⴃ = new ComboBox();
      this.Ⴈ = new Label();
      this.Ⴗ = new Label();
      this.Ⴐ = new Label();
      this.Ⴅ = new Label();
      this.Ⴀ = new Label();
      this.Ⴓ = new Label();
      this.Ⴄ = new TextBox();
      this.Ⴍ = new TextBox();
      this.Ⴜ = new ComboBox();
      this.ႨႣ = new Label();
      this.ႨႨ = new Label();
      this.ႨႷ = new Button();
      this.ႨႰ = new Button();
      this.ႨႥ = new Button();
      this.ႨႠ = new ErrorProvider(this.ႳႣ);
      ((ISupportInitialize) this.ႨႠ).BeginInit();
      this.SuspendLayout();
      this.Ⴃ.DropDownStyle = ComboBoxStyle.DropDownList;
      this.Ⴃ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴃ.FormattingEnabled = true;
      this.Ⴃ.Items.AddRange(new object[2]
      {
        (object) "money",
        (object) "percentage"
      });
      this.Ⴃ.Location = new Point(317, 185);
      this.Ⴃ.Name = "cBoxFormat";
      this.Ⴃ.Size = new Size(198, 28);
      this.Ⴃ.TabIndex = 2;
      this.Ⴈ.AutoSize = true;
      this.Ⴈ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴈ.Location = new Point(170, 38);
      this.Ⴈ.Name = "Label1";
      this.Ⴈ.Size = new Size(125, 20);
      this.Ⴈ.TabIndex = 1;
      this.Ⴈ.Text = "Deduction ID :";
      this.Ⴗ.AutoSize = true;
      this.Ⴗ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴗ.Location = new Point(230, 88);
      this.Ⴗ.Name = "Label2";
      this.Ⴗ.Size = new Size(57, 20);
      this.Ⴗ.TabIndex = 2;
      this.Ⴗ.Text = "Type :";
      this.Ⴐ.AutoSize = true;
      this.Ⴐ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴐ.Location = new Point(223, 138);
      this.Ⴐ.Name = "Label3";
      this.Ⴐ.Size = new Size(65, 20);
      this.Ⴐ.TabIndex = 3;
      this.Ⴐ.Text = "Value :";
      this.Ⴅ.AutoSize = true;
      this.Ⴅ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴅ.Location = new Point(221, 188);
      this.Ⴅ.Name = "Label4";
      this.Ⴅ.Size = new Size(66, 20);
      this.Ⴅ.TabIndex = 4;
      this.Ⴅ.Text = "Format";
      this.Ⴀ.AutoSize = true;
      this.Ⴀ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴀ.Location = new Point(229, 238);
      this.Ⴀ.Name = "Label5";
      this.Ⴀ.Size = new Size(58, 20);
      this.Ⴀ.TabIndex = 5;
      this.Ⴀ.Text = "Date :";
      this.Ⴓ.AutoSize = true;
      this.Ⴓ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴓ.Location = new Point(172, 288);
      this.Ⴓ.Name = "Label6";
      this.Ⴓ.Size = new Size(124, 20);
      this.Ⴓ.TabIndex = 6;
      this.Ⴓ.Text = "Applied to ID :";
      this.Ⴄ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴄ.Location = new Point(317, 138);
      this.Ⴄ.Name = "txtValue";
      this.Ⴄ.Size = new Size(198, 26);
      this.Ⴄ.TabIndex = 1;
      this.Ⴍ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴍ.Location = new Point(317, 88);
      this.Ⴍ.MaxLength = 30;
      this.Ⴍ.Name = "txtType";
      this.Ⴍ.Size = new Size(198, 26);
      this.Ⴍ.TabIndex = 0;
      this.Ⴜ.DropDownStyle = ComboBoxStyle.DropDownList;
      this.Ⴜ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Ⴜ.FormattingEnabled = true;
      this.Ⴜ.Location = new Point(317, 285);
      this.Ⴜ.Name = "cBoxPplID";
      this.Ⴜ.Size = new Size(198, 28);
      this.Ⴜ.TabIndex = 3;
      this.ႨႣ.BorderStyle = BorderStyle.FixedSingle;
      this.ႨႣ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႨႣ.Location = new Point(317, 35);
      this.ႨႣ.Name = "lblID";
      this.ႨႣ.Size = new Size(198, 26);
      this.ႨႣ.TabIndex = 10;
      this.ႨႣ.Text = "20000";
      this.ႨႣ.TextAlign = ContentAlignment.MiddleLeft;
      this.ႨႨ.BorderStyle = BorderStyle.FixedSingle;
      this.ႨႨ.Font = new Font("Microsoft Sans Serif", 8f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႨႨ.Location = new Point(317, 235);
      this.ႨႨ.Name = "lblDate";
      this.ႨႨ.Size = new Size(198, 26);
      this.ႨႨ.TabIndex = 11;
      this.ႨႨ.Text = "16/4/2018";
      this.ႨႨ.TextAlign = ContentAlignment.MiddleLeft;
      this.ႨႷ.AutoSize = true;
      this.ႨႷ.BackColor = Color.MediumSeaGreen;
      this.ႨႷ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႨႷ.ForeColor = SystemColors.ControlLightLight;
      this.ႨႷ.Location = new Point(198, 330);
      this.ႨႷ.Name = "btnAdd";
      this.ႨႷ.Size = new Size(98, 47);
      this.ႨႷ.TabIndex = 4;
      this.ႨႷ.Text = "&Add";
      this.ႨႷ.UseVisualStyleBackColor = false;
      this.ႨႰ.AutoSize = true;
      this.ႨႰ.BackColor = Color.Goldenrod;
      this.ႨႰ.CausesValidation = false;
      this.ႨႰ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႨႰ.ForeColor = SystemColors.ControlLightLight;
      this.ႨႰ.Location = new Point(317, 328);
      this.ႨႰ.Name = "btnReset";
      this.ႨႰ.Size = new Size(99, 47);
      this.ႨႰ.TabIndex = 5;
      this.ႨႰ.Text = "&Reset";
      this.ႨႰ.UseVisualStyleBackColor = false;
      this.ႨႥ.AutoSize = true;
      this.ႨႥ.BackColor = Color.IndianRed;
      this.ႨႥ.CausesValidation = false;
      this.ႨႥ.DialogResult = DialogResult.Cancel;
      this.ႨႥ.Font = new Font("Microsoft Sans Serif", 10f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.ႨႥ.ForeColor = SystemColors.ControlLightLight;
      this.ႨႥ.Location = new Point(436, 328);
      this.ႨႥ.Name = "btnExit";
      this.ႨႥ.Size = new Size(113, 47);
      this.ႨႥ.TabIndex = 6;
      this.ႨႥ.Text = "E&xit";
      this.ႨႥ.UseVisualStyleBackColor = false;
      this.ႨႠ.BlinkStyle = ErrorBlinkStyle.NeverBlink;
      this.ႨႠ.ContainerControl = (ContainerControl) this;
      this.AcceptButton = (IButtonControl) this.ႨႷ;
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.AutoValidate = AutoValidate.EnableAllowFocusChange;
      this.BackColor = Color.LightSteelBlue;
      this.CancelButton = (IButtonControl) this.ႨႥ;
      this.ClientSize = new Size(677, 411);
      this.Controls.Add((Control) this.ႨႥ);
      this.Controls.Add((Control) this.ႨႰ);
      this.Controls.Add((Control) this.ႨႷ);
      this.Controls.Add((Control) this.ႨႨ);
      this.Controls.Add((Control) this.ႨႣ);
      this.Controls.Add((Control) this.Ⴜ);
      this.Controls.Add((Control) this.Ⴍ);
      this.Controls.Add((Control) this.Ⴄ);
      this.Controls.Add((Control) this.Ⴓ);
      this.Controls.Add((Control) this.Ⴀ);
      this.Controls.Add((Control) this.Ⴅ);
      this.Controls.Add((Control) this.Ⴐ);
      this.Controls.Add((Control) this.Ⴗ);
      this.Controls.Add((Control) this.Ⴈ);
      this.Controls.Add((Control) this.Ⴃ);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.Name = "ႰႭ";
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "HRDeductionAdd";
      ((ISupportInitialize) this.ႨႠ).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual ComboBox Ⴃ
    {
      get => this.ႳႳ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new CancelEventHandler(this.t7D4);
        ListControl ⴓⴓ1 = (ListControl) this.ႳႳ;
        if (ⴓⴓ1 is ComboBox)
          ⴓⴓ1.Validating -= (CancelEventHandler) multicastDelegate;
        this.ႳႳ = value;
        ListControl ⴓⴓ2 = (ListControl) this.ႳႳ;
        if (!(ⴓⴓ2 is ComboBox))
          return;
        (ⴓⴓ2 as ComboBox).Validating += (CancelEventHandler) multicastDelegate;
      }
    }

    internal virtual Label Ⴈ
    {
      get => this.Ⴃ.Ⴐ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴐ = value;
    }

    internal virtual Label Ⴗ
    {
      get => this.Ⴃ.Ⴗ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴗ = value;
    }

    internal virtual Label Ⴐ
    {
      get => this.ႳႰ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႳႰ = value;
    }

    internal virtual Label Ⴅ
    {
      get => this.Ⴃ.Ⴓ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴓ = value;
    }

    internal virtual Label Ⴀ
    {
      get => this.Ⴃ.Ⴍ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴍ = (Control) value as Label;
    }

    internal virtual Label Ⴓ
    {
      get => this.Ⴃ.Ⴀ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴀ = (Control) value as Label;
    }

    internal virtual TextBox Ⴄ
    {
      get => this.Ⴃ.Ⴈ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new CancelEventHandler(this.b1B0);
        TextBoxBase ⴈ1 = (TextBoxBase) this.Ⴃ.Ⴈ;
        if (ⴈ1 is TextBox)
          (ⴈ1 as TextBox).Validating -= obj as CancelEventHandler;
        this.Ⴃ.Ⴈ = (object) value as TextBox;
        TextBoxBase ⴈ2 = (TextBoxBase) this.Ⴃ.Ⴈ;
        if ((TextBox) ⴈ2 == null)
          return;
        ⴈ2.Validating += (CancelEventHandler) obj;
      }
    }

    internal virtual TextBox Ⴍ
    {
      get => this.ႳႼ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new CancelEventHandler(this.r3W7);
        TextBoxBase ⴓⴜ1 = (TextBoxBase) this.ႳႼ;
        if (ⴓⴜ1 is TextBox)
          ⴓⴜ1.Validating -= (CancelEventHandler) multicastDelegate;
        this.ႳႼ = value;
        TextBoxBase ⴓⴜ2 = (TextBoxBase) this.ႳႼ;
        if ((TextBox) ⴓⴜ2 == null)
          return;
        (ⴓⴜ2 as TextBox).Validating += multicastDelegate as CancelEventHandler;
      }
    }

    internal virtual ComboBox Ⴜ
    {
      get => this.ႥႣ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new CancelEventHandler(this.Eg8d);
        ListControl ⴅⴃ1 = (ListControl) this.ႥႣ;
        if ((ComboBox) ⴅⴃ1 != null)
          (ⴅⴃ1 as ComboBox).Validating -= obj as CancelEventHandler;
        this.ႥႣ = value;
        ListControl ⴅⴃ2 = (ListControl) this.ႥႣ;
        if (!(ⴅⴃ2 is ComboBox))
          return;
        ⴅⴃ2.Validating += (CancelEventHandler) obj;
      }
    }

    internal virtual Label ႨႣ
    {
      get => this.Ⴃ.Ⴄ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴄ = value;
    }

    internal virtual Label ႨႨ
    {
      get => this.Ⴃ.Ⴃ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.Ⴃ.Ⴃ = value;
    }

    internal virtual Button ႨႷ
    {
      get => this.ႥႷ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        object obj = (object) new EventHandler(this.o2W9);
        object ⴅⴗ1 = (object) this.ႥႷ;
        if ((Button) ⴅⴗ1 != null)
          (ⴅⴗ1 as Button).Click -= (EventHandler) obj;
        this.ႥႷ = value;
        object ⴅⴗ2 = (object) this.ႥႷ;
        if (!(ⴅⴗ2 is Button))
          return;
        ((Control) ⴅⴗ2).Click += (EventHandler) obj;
      }
    }

    internal virtual Button ႨႰ
    {
      get => this.Ⴃ.Ⴅ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.Ea8s);
        object ⴅ1 = (object) this.Ⴃ.Ⴅ;
        if (ⴅ1 is Button)
          ((Control) ⴅ1).Click -= multicastDelegate as EventHandler;
        this.Ⴃ.Ⴅ = (ButtonBase) value as Button;
        object ⴅ2 = (object) this.Ⴃ.Ⴅ;
        if (!(ⴅ2 is Button))
          return;
        ((Control) ⴅ2).Click += (EventHandler) multicastDelegate;
      }
    }

    internal virtual Button ႨႥ
    {
      get => this.Ⴃ.Ⴜ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set
      {
        MulticastDelegate multicastDelegate = (MulticastDelegate) new EventHandler(this.x9H5);
        IButtonControl ⴜ1 = (IButtonControl) this.Ⴃ.Ⴜ;
        if ((Button) ⴜ1 != null)
          (ⴜ1 as Button).Click -= (EventHandler) multicastDelegate;
        this.Ⴃ.Ⴜ = value;
        IButtonControl ⴜ2 = (IButtonControl) this.Ⴃ.Ⴜ;
        if (!(ⴜ2 is Button))
          return;
        (ⴜ2 as Button).Click += (EventHandler) multicastDelegate;
      }
    }

    internal virtual ErrorProvider ႨႠ
    {
      get => this.ႥႤ;
      [MethodImpl(MethodImplOptions.Synchronized)] [param: In] set => this.ႥႤ = value;
    }

    private void b3Q2([In] object obj0, [In] EventArgs obj1)
    {
      Table<Af03> ⴃ = ((object) new Tt1() as Tt1).Ⴃ;
      object body = (object) Expression.Parameter(typeof (Af03), "d");
      Expression<Func<Af03, Af03>> selector = Expression.Lambda<Func<Af03, Af03>>((Expression) body, body as ParameterExpression);
      object list = (object) ⴃ.Select<Af03, Af03>(selector).ToList<Af03>();
      try
      {
        foreach (Af03 af03 in (List<Af03>) list)
          this.Ⴜ.Items.Add((object) af03.Ⴐ);
      }
      finally
      {
        List<Af03>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.ႨႣ.Text = y0P.Wd4();
      this.Fi42();
    }

    private void Fi42()
    {
      this.Ⴍ.Text = "";
      this.Ⴄ.Text = "";
      this.Ⴃ.SelectedIndex = 0;
      this.ႨႨ.Text = DateTime.Now.ToShortDateString();
      this.Ⴜ.SelectedIndex = -1;
      this.ႨႠ.Clear();
      this.Ⴍ.Focus();
    }

    private void o2W9([In] object obj0, [In] EventArgs obj1)
    {
      if (!this.ValidateChildren())
        return;
      try
      {
        IConvertible text1 = (IConvertible) this.Ⴍ.Text;
        IEquatable<string> text2 = (IEquatable<string>) this.Ⴄ.Text;
        IEquatable<string> equatable = (IEquatable<string>) this.Ⴃ.SelectedItem.ToString();
        DateTime now = DateTime.Now;
        IComparable comparable = (IComparable) this.Ⴜ.SelectedItem.ToString();
        object entity = (object) new Wf2();
        (entity as Wf2).Ⴗ = int.Parse(this.ႨႣ.Text);
        ((Wf2) entity).Ⴗ = (string) text1;
        ((Wf2) entity).Ⴓ = double.Parse(text2 as string);
        (entity as Wf2).Ⴍ = (string) equatable;
        ((Wf2) entity).Ⴄ = new DateTime?(now);
        ((Wf2) entity).Ⴃ = (string) comparable;
        object obj = (object) new Tt1();
        (obj as Tt1).Ⴃ.InsertOnSubmit(entity as Wf2);
        (obj as Tt1).SubmitChanges();
        int num = (int) MessageBox.Show("Deduction added to " + (comparable as string), "Success");
        En6.Ⴈ.Ⴗ.Wc8z();
        this.Fi42();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) MessageBox.Show("Deduction failed :" + ex.Message, "Fail");
        ProjectData.ClearProjectError();
      }
    }

    private void Ea8s([In] object obj0, [In] EventArgs obj1) => this.Fi42();

    private void x9H5([In] object obj0, [In] EventArgs obj1) => this.Close();

    private void r3W7([In] object obj0, [In] CancelEventArgs obj1)
    {
      if (string.IsNullOrEmpty((object) this.Ⴍ.Text as string))
      {
        this.ႨႠ.SetError((Control) this.Ⴍ, "Type should not left blank");
        obj1.Cancel = true;
      }
      else
        this.ႨႠ.SetError((Control) this.Ⴍ, (string) null);
    }

    private void b1B0([In] object obj0, [In] CancelEventArgs obj1)
    {
      IComparable text = (IComparable) this.Ⴄ.Text;
      if (string.IsNullOrEmpty(text as string))
      {
        this.ႨႠ.SetError((Control) this.Ⴄ, "Value should not left blank");
        obj1.Cancel = true;
      }
      else if (!Versioned.IsNumeric((object) (string) text))
      {
        this.ႨႠ.SetError((Control) this.Ⴄ, "Value should be made of numeric");
        obj1.Cancel = true;
      }
      else
        this.ႨႠ.SetError((Control) this.Ⴄ, (string) null);
    }

    private void Eg8d([In] object obj0, [In] CancelEventArgs obj1)
    {
      if (this.Ⴜ.SelectedIndex < 0)
      {
        this.ႨႠ.SetError((Control) this.Ⴜ, "Please select a people to applied.");
        obj1.Cancel = true;
      }
      else
        this.ႨႠ.SetError((Control) this.Ⴜ, (string) null);
    }

    private void t7D4([In] object obj0, [In] CancelEventArgs obj1)
    {
      if (this.Ⴃ.SelectedIndex < 0)
      {
        this.ႨႠ.SetError((Control) this.Ⴃ, "Please select a format before proceeding.");
        obj1.Cancel = true;
      }
      else
        this.ႨႠ.SetError((Control) this.Ⴃ, (string) null);
    }
  }
}
