// Decompiled with JetBrains decompiler
// Type: System.Web.RegBrowsers.RegBrowsers
// Assembly: aspnet_regbrowsers, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 47E0B7AA-8190-4F0E-A943-3E87CF0C3AC8
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Sality.t-b699be57b251de8c56c4a7dde1f68f142cb0e85ea1c84b1593959aace38c9487.exe

using System.Configuration;
using System.Globalization;
using System.IO;
using System.Threading;
using System.Web.Configuration;

namespace System.Web.RegBrowsers
{
  internal class RegBrowsers
  {
    private const int leftMargin = 4;
    private static bool _installMode;
    private static bool _showDetailUsage;
    private static int maxLineLength = 80;

    public static int Main(string[] args)
    {
      try
      {
        System.Web.RegBrowsers.RegBrowsers.maxLineLength = Console.BufferWidth;
      }
      catch
      {
      }
      System.Web.RegBrowsers.RegBrowsers.SetThreadUICulture();
      Console.WriteLine(SR.GetString("Header_text"));
      Console.WriteLine(SR.GetString("Copyright"));
      if (args.Length != 1 || !System.Web.RegBrowsers.RegBrowsers.ParseArguments(args))
      {
        System.Web.RegBrowsers.RegBrowsers.ShowUsage();
        return 1;
      }
      BrowserCapabilitiesCodeGenerator capabilitiesCodeGenerator = new BrowserCapabilitiesCodeGenerator();
      try
      {
        string path = HttpRuntime.ClrInstallDirectory + "\\config\\browsers";
        DirectoryInfo directoryInfo = new DirectoryInfo(path);
        if (!directoryInfo.Exists)
        {
          System.Web.RegBrowsers.RegBrowsers.DumpError("1001", SR.GetString("Directory_does_not_exist", (object) path));
          return 1;
        }
        if (!System.Web.RegBrowsers.RegBrowsers._installMode)
        {
          try
          {
            if (!capabilitiesCodeGenerator.Uninstall())
              System.Web.RegBrowsers.RegBrowsers.DumpError("1002", SR.GetString("BrowserAssembly_Not_Installed"));
            else
              Console.WriteLine(SR.GetString("RegBrowser_uninstalled"));
          }
          catch (Exception ex)
          {
            System.Web.RegBrowsers.RegBrowsers.DumpError("1003", SR.GetString("Uninstallation_failed"));
            return 1;
          }
          return 0;
        }
        FileInfo[] files = directoryInfo.GetFiles("*.browser");
        if (files == null || files.Length == 0)
        {
          System.Web.RegBrowsers.RegBrowsers.DumpError("1004", SR.GetString("Directory_has_no_browser_files", (object) path));
          return 1;
        }
        capabilitiesCodeGenerator.Create();
        Console.WriteLine(SR.GetString("RegBrowser_installed"));
        return 0;
      }
      catch (Exception ex)
      {
        Exception exception = System.Web.RegBrowsers.RegBrowsers.GetFormattableException(ex) ?? ex;
        switch (exception)
        {
          case ConfigurationException configurationException:
            System.Web.RegBrowsers.RegBrowsers.DumpError("ASPCONFIG", configurationException.Filename, configurationException.Line, configurationException.BareMessage);
            return 1;
          case HttpParseException httpParseException:
            System.Web.RegBrowsers.RegBrowsers.DumpError("ASPPARSE", httpParseException.VirtualPath, httpParseException.Line, httpParseException.Message);
            return 1;
          default:
            System.Web.RegBrowsers.RegBrowsers.DumpError("ASPRUNTIME", (string) null, 0, exception.Message);
            break;
        }
      }
      return 1;
    }

    private static void DumpError(string errorNumber, string message) => System.Web.RegBrowsers.RegBrowsers.DumpError(errorNumber, (string) null, 0, message);

    private static void DumpError(string errorNumber, string filename, int line, string message)
    {
      if (filename != null)
      {
        Console.Write(filename);
        Console.Write("(" + (object) line + "): ");
      }
      Console.Write(errorNumber + ": ");
      Console.WriteLine(message);
    }

    private static Exception GetFormattableException(Exception e)
    {
      switch (e)
      {
        case ConfigurationException _:
        case HttpParseException _:
          return e;
        default:
          Exception innerException = e.InnerException;
          return innerException == null ? (Exception) null : System.Web.RegBrowsers.RegBrowsers.GetFormattableException(innerException);
      }
    }

    private static bool ParseArguments(string[] args)
    {
      if (args.Length == 0)
        return false;
      for (int index = 0; index < args.Length; ++index)
      {
        string str = args[0];
        if (str.Length != 2 || str[0] != '-' && str[0] != '/')
          return false;
        string a = str.Substring(1, 1);
        if (string.Equals(a, "i", StringComparison.OrdinalIgnoreCase))
        {
          System.Web.RegBrowsers.RegBrowsers._installMode = true;
          return true;
        }
        if (string.Equals(a, "h", StringComparison.OrdinalIgnoreCase) || string.Equals(a, "?", StringComparison.OrdinalIgnoreCase))
        {
          System.Web.RegBrowsers.RegBrowsers._showDetailUsage = true;
          return false;
        }
        if (!string.Equals(a, "u", StringComparison.OrdinalIgnoreCase))
          return true;
      }
      return true;
    }

    private static void SetThreadUICulture()
    {
      Thread.CurrentThread.CurrentUICulture = CultureInfo.CurrentUICulture.GetConsoleFallbackUICulture();
      if (Console.OutputEncoding.CodePage == 65001 || Console.OutputEncoding.CodePage == Thread.CurrentThread.CurrentUICulture.TextInfo.OEMCodePage || Console.OutputEncoding.CodePage == Thread.CurrentThread.CurrentUICulture.TextInfo.ANSICodePage)
        return;
      Thread.CurrentThread.CurrentUICulture = new CultureInfo("en-US");
    }

    private static void ShowUsage()
    {
      if (!System.Web.RegBrowsers.RegBrowsers._showDetailUsage)
      {
        Console.WriteLine("aspnet_regbrowsers [-? | -i | -u]");
      }
      else
      {
        Console.WriteLine(SR.GetString("Usage"));
        Console.WriteLine("aspnet_regbrowsers [-? | -i | -u]");
        System.Web.RegBrowsers.RegBrowsers.DisplaySwitchWithHelp("-?", SR.GetString("questionmark_help"));
        System.Web.RegBrowsers.RegBrowsers.DisplaySwitchWithHelp("-i", SR.GetString("RegBrowser_install_usage"));
        System.Web.RegBrowsers.RegBrowsers.DisplaySwitchWithHelp("-u", SR.GetString("RegBrowser_uninstall_usage"));
      }
    }

    private static void DisplaySwitchWithHelp(string switchString, string stringHelpString)
    {
      Console.Write(switchString);
      System.Web.RegBrowsers.RegBrowsers.DisplayWordWrappedString(stringHelpString, switchString.Length, 4);
    }

    private static void DisplayWordWrappedString(string s, int currentOffset, int leftMargin)
    {
      string[] strArray = s.Split(' ');
      bool flag = true;
      foreach (string str in strArray)
      {
        int length = str.Length;
        if (!flag)
          ++length;
        if (currentOffset + length >= System.Web.RegBrowsers.RegBrowsers.maxLineLength)
        {
          Console.WriteLine();
          currentOffset = 0;
          flag = true;
        }
        if (flag)
        {
          for (; currentOffset < leftMargin; ++currentOffset)
            Console.Write(' ');
        }
        else
        {
          Console.Write(' ');
          ++currentOffset;
        }
        Console.Write(str);
        currentOffset += str.Length;
        flag = false;
      }
      Console.WriteLine();
    }
  }
}
