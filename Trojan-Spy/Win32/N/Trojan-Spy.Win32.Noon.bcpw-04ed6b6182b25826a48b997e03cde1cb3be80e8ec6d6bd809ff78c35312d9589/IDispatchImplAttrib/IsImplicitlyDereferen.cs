// Decompiled with JetBrains decompiler
// Type: IDispatchImplAttrib.IsImplicitlyDereferen
// Assembly: RSACspObj, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4F5485A2-22DD-4A3A-83EE-265873F291A8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcpw-04ed6b6182b25826a48b997e03cde1cb3be80e8ec6d6bd809ff78c35312d9589.exe

using DateTimeTypeI;
using System.Collections.Generic;

namespace IDispatchImplAttrib
{
  public class IsImplicitlyDereferen
  {
    public int Bet { get; set; }

    public int Insurance { get; set; }

    internal List<IPropertyVa> Hand1 { get; set; }

    internal List<IPropertyVa> Hand2 { get; set; }

    public bool Hand1Flipped { get; set; }

    public bool Hand2Flipped { get; set; }

    public IsImplicitlyDereferen()
    {
label_1:
      int num1 = -830635152;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -271428296)) % 11U)
        {
          case 0:
            this.Hand2 = new List<IPropertyVa>();
            num1 = (int) num2 * -2008327751 ^ 1100017730;
            continue;
          case 1:
            this.Bet = 0;
            num1 = (int) num2 * -572127946 ^ -796960015;
            continue;
          case 2:
            num1 = (int) num2 * 117672862 ^ -253076393;
            continue;
          case 3:
            this.Insurance = 0;
            num1 = (int) num2 * 495662671 ^ -819935016;
            continue;
          case 4:
            num1 = (int) num2 * 1662833786 ^ 762972242;
            continue;
          case 5:
            this.Hand1 = new List<IPropertyVa>();
            num1 = (int) num2 * 1222222798 ^ -2039638894;
            continue;
          case 6:
            num1 = (int) num2 * 1632403936 ^ 1279265279;
            continue;
          case 7:
            goto label_1;
          case 8:
            this.Hand1Flipped = false;
            num1 = (int) num2 * 1173061549 ^ -1810005590;
            continue;
          case 9:
            this.Hand2Flipped = false;
            num1 = (int) num2 * -1487658416 ^ 836083522;
            continue;
          case 10:
            goto label_3;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void AddHand1(IPropertyVa Card) => this.Hand1.Add(Card);

    internal void AddHand2(IPropertyVa Card)
    {
label_1:
      int num1 = 1719423287;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1412202979)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Hand2.Add(Card);
            num1 = (int) num2 * 1284092246 ^ 947764585;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }
  }
}
