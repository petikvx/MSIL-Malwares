// Decompiled with JetBrains decompiler
// Type: 885349723817.487586627016
// Assembly: 582573968022, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 22949299-4A50-46F6-851E-C2A296093D37
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-35a63266858befa3a9a9f8f0684d53a6905ab1fbfd8df949e6989c20107cc290.exe

using \u003885349723817;
using Microsoft.VisualStudio.TestPlatform.CoreUtilities.Extensions;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.Utilities.Helpers;
using Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

namespace \u003885349723817
{
  public class \u003487586627016
  {
    internal static readonly \u003487586627016 \u003929606578394 = new \u003487586627016();
    private string \u003442087269382;
    private IFileHelper \u003165164850042;

    public \u003487586627016()
      : this((IFileHelper) new FileHelper())
    {
    }

    public \u003487586627016(IFileHelper fileHelper) => this.\u003165164850042 = fileHelper;

    public Dictionary<string, string> \u003663456235789 { get; set; }

    public TraceLevel \u003563575408926 { get; set; } = TraceLevel.Verbose;

    public string \u003533474731570
    {
      get => this.\u003442087269382;
      set
      {
        ValidateArg.NotNullOrEmpty(value, "LogFilePath");
        this.\u003442087269382 = string.IsNullOrEmpty(Path.GetDirectoryName(value)) || this.\u003165164850042.DirectoryExists(Path.GetDirectoryName(value)) ? StringExtensions.AddDoubleQuote(value) : throw new ArgumentException("LogFilePath must point to a valid directory for logging!");
      }
    }

    internal int \u003087355123483 { get; set; }

    internal int \u003056443432085 { get; set; }
  }
}
