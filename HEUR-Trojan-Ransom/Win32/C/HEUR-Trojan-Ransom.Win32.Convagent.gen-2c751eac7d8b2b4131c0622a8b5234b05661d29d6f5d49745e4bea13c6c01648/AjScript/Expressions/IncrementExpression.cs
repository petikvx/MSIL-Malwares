// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.IncrementExpression
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using AjScript.Language;
using Microsoft.VisualBasic.CompilerServices;
using System;

namespace AjScript.Expressions
{
  public class IncrementExpression : UnaryExpression
  {
    private IncrementOperator oper;

    public IncrementExpression(IExpression expression, IncrementOperator oper)
      : base(expression)
    {
      this.oper = oper;
    }

    public IncrementOperator Operator => this.oper;

    public override object Apply(object value) => throw new NotImplementedException();

    public object Apply(object value, IContext context)
    {
      if (value == null)
        value = (object) 0;
      object obj1 = (object) null;
      object obj2 = (object) null;
      switch (this.oper)
      {
        case IncrementOperator.PreIncrement:
        case IncrementOperator.PostIncrement:
          obj1 = Operators.AddObject(value, (object) 1);
          break;
        case IncrementOperator.PreDecrement:
        case IncrementOperator.PostDecrement:
          obj1 = Operators.SubtractObject(value, (object) 1);
          break;
      }
      ExpressionUtilities.SetValue(this.Expression, obj1, context);
      switch (this.oper)
      {
        case IncrementOperator.PreIncrement:
        case IncrementOperator.PreDecrement:
          obj2 = obj1;
          break;
        case IncrementOperator.PostIncrement:
        case IncrementOperator.PostDecrement:
          obj2 = value;
          break;
      }
      return obj2;
    }

    public override object Evaluate(IContext context) => this.Apply(this.Expression.Evaluate(context), context);
  }
}
