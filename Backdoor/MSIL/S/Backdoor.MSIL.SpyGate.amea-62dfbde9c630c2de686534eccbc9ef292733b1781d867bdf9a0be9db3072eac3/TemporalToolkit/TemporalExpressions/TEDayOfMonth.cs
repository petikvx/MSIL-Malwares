// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEDayOfMonth
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using System.Runtime.InteropServices;
using TemporalToolkit.Extensions;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEDayOfMonth : TemporalExpression
  {
    public DayOfWeek Day { get; set; }

    public int Occurrence { get; set; }

    public TEDayOfMonth(DateTime date)
    {
label_1:
      int num1 = -316995029;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -800081017)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -1348962686 ^ 861922878;
            continue;
          case 2:
            this.Day = date.DayOfWeek;
            num1 = (int) num2 * -768778193 ^ 2073061937;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -2084593871 ^ 1030209676;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      this.Occurrence = date.OccurrenceOfDayInMonth();
    }

    public TEDayOfMonth(DayOfWeek day, int occurrence)
    {
label_1:
      int num1 = 1325941474;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1811463355)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1793130615 ^ 1002820087;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.Day = day;
            this.Occurrence = occurrence;
            num1 = (int) num2 * -5639121 ^ -367540374;
            continue;
          case 4:
            num1 = (int) num2 * -1443427477 ^ -518453654;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = -342081069;
      bool flag;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -1423884833)) % 10U)
        {
          case 1:
            num4 = aDate.OccurrenceOfDayInMonth() == this.Occurrence ? 1 : 0;
            break;
          case 2:
            if (aDate.DayOfWeek != this.Day)
            {
              num5 = 0;
              goto label_11;
            }
            else
            {
              num1 = (int) num2 * -297506911 ^ -1163462258;
              continue;
            }
          case 3:
            goto label_1;
          case 4:
            int num6 = this.Occurrence >= 0 ? -1870309130 : (num6 = -2025955307);
            num1 = num6 ^ (int) num2 * 958625578;
            continue;
          case 5:
            num3 = (num3 - 1) / 7 + 1;
            num1 = (int) num2 * 941649641 ^ -119744934;
            continue;
          case 6:
            num3 = DateTime.DaysInMonth(aDate.Year, aDate.Month) - aDate.Day + 1;
            num1 = (int) num2 * 1970955399 ^ 1344727508;
            continue;
          case 7:
            num5 = num3 == TEDayOfMonth.\u202C‮‌‏‎⁭​⁫‭‮​​⁫⁫⁯⁬‮‎‭‪⁬⁮‭⁭⁪⁫⁬‮⁮‪‬⁬⁭⁬⁯⁬‬⁬‪‬‮(this.Occurrence) ? 1 : 0;
            goto label_11;
          case 8:
            num1 = (int) num2 * -1085625423 ^ 2013544813;
            continue;
          case 9:
            if (aDate.DayOfWeek == this.Day)
            {
              num1 = -912627466;
              continue;
            }
            num4 = 0;
            break;
          default:
            goto label_17;
        }
        flag = num4 != 0;
        num1 = -2117619537;
        continue;
label_11:
        flag = num5 != 0;
        num1 = -2015984195;
      }
label_17:
      return flag;
    }

    static int \u202C‮‌‏‎⁭​⁫‭‮​​⁫⁫⁯⁬‮‎‭‪⁬⁮‭⁭⁪⁫⁬‮⁮‪‬⁬⁭⁬⁯⁬‬⁬‪‬‮([In] int obj0) => Math.Abs(obj0);
  }
}
