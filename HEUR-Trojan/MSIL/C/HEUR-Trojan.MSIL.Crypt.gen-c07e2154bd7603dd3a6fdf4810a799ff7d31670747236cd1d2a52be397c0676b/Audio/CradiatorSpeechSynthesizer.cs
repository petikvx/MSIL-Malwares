// Decompiled with JetBrains decompiler
// Type: Cradiator.Audio.CradiatorSpeechSynthesizer
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using log4net;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Speech.Synthesis;

namespace Cradiator.Audio
{
  public class CradiatorSpeechSynthesizer : ISpeechSynthesizer
  {
    private static readonly ILog _log = LogManager.GetLogger(typeof (CradiatorSpeechSynthesizer).Name);
    private readonly SpeechSynthesizer _speechSynth;

    public CradiatorSpeechSynthesizer(SpeechSynthesizer speechSynth) => this._speechSynth = speechSynth;

    public void SpeakAsync(PromptBuilder promptBuilder) => this._speechSynth.SpeakAsync(promptBuilder);

    public CradiatorInstalledVoice SelectedVoice => new CradiatorInstalledVoice(this._speechSynth.Voice.Name);

    public void SelectVoice(string voiceName)
    {
      try
      {
        this._speechSynth.SelectVoice(voiceName);
      }
      catch (Exception ex)
      {
        CradiatorSpeechSynthesizer._log.Error((object) ex.Message, ex);
      }
    }

    public IEnumerable<CradiatorInstalledVoice> GetInstalledVoices() => this._speechSynth.GetInstalledVoices().Select<InstalledVoice, CradiatorInstalledVoice>((Func<InstalledVoice, CradiatorInstalledVoice>) (voice => new CradiatorInstalledVoice(voice.VoiceInfo.Name)));

    public int Rate
    {
      set => this._speechSynth.Rate = value;
    }
  }
}
