// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Sdevmxl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F0B5D56E-2738-4851-005E-7CC3B980D8C1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-48b6f61e37bef66ece1cb50e0c137e2a6d8aef5a2828b910497332377e982a03.exe

using System;
using System.Collections.Generic;
using System.Threading;

internal sealed class \u0002\u2003
{
  private readonly object \u0002;
  private \u000F\u2003[] \u0003;
  private Dictionary<int, \u000F\u2003> \u0005;
  private volatile bool \u0008;
  private \u0006\u2003 \u0006;
  private Dictionary<int, WeakReference> \u000E;
  private object \u000F;
  private int \u0002\u2000;
  private object[] \u0003\u2000;
  private int \u0005\u2000;

  public \u0002\u2003(\u0006\u2003 _param1)
  {
    object obj1 = new object();
    if (true)
      goto label_3;
label_1:
    // ISSUE: explicit constructor call
    base.\u002Ector();
    \u0006\u2003 obj2 = _param1;
    if (false)
      return;
    this.\u0006 = obj2;
    return;
label_3:
    this.\u0002 = obj1;
    goto label_1;
  }

  private void \u0002()
  {
    if (this.\u0008)
      return;
    object obj1 = this.\u0002;
    if (true)
      goto label_3;
label_2:
    object obj2;
    object obj3 = obj2;
    if (true)
      Monitor.Enter(obj3);
    try
    {
      if (this.\u0008)
        return;
      \u000F\u2003[] objArray = new \u000F\u2003[this.\u0006.\u0005()];
      if (true)
        goto label_9;
label_8:
      for (int index = 0; index < this.\u0006.\u0005(); ++index)
        this.\u0003[index] = new \u000F\u2003();
      this.\u0005 = new Dictionary<int, \u000F\u2003>();
      this.\u000E = new Dictionary<int, WeakReference>();
      this.\u000F = new object();
      this.\u0002\u2000 = this.\u0006.\u0008();
      this.\u0003\u2000 = new object[this.\u0006.\u0006()];
      this.\u0008 = true;
      return;
label_9:
      this.\u0003 = objArray;
      goto label_8;
    }
    finally
    {
      Monitor.Exit(obj2);
    }
label_3:
    obj2 = obj1;
    goto label_2;
  }

  public void \u0002(\u000F\u2003 _param1)
  {
    if (true)
      goto label_3;
label_1:
    object obj1 = this.\u0002;
    if (true)
      goto label_4;
label_2:
    object obj2;
    object obj3 = obj2;
    if (true)
      Monitor.Enter(obj3);
    try
    {
      \u000F\u2003 obj4;
      if (this.\u0005.TryGetValue(_param1.\u0003, out obj4) && obj4 != null)
      {
        obj4.\u0008 = _param1.\u0008;
        return;
      }
      int index1 = 0;
      DateTime dateTime = this.\u0003[0].\u0008;
      for (int index2 = 1; index2 < this.\u0006.\u0005(); ++index2)
      {
        if (this.\u0003[index2].\u0008 < dateTime)
          index1 = index2;
      }
      obj4 = this.\u0003[index1];
      if (obj4.\u0002 == null)
        obj4.\u0002 = new byte[this.\u0006.\u0002()];
      else
        this.\u0005[obj4.\u0003] = (\u000F\u2003) null;
      this.\u0002(_param1, obj4);
      this.\u0005[obj4.\u0003] = obj4;
      if (this.\u0005.Count <= this.\u0006.\u0005() * 2)
        return;
      this.\u0003();
      return;
    }
    finally
    {
      Monitor.Exit(obj2);
    }
label_4:
    obj2 = obj1;
    goto label_2;
label_3:
    this.\u0002();
    goto label_1;
  }

  private void \u0003()
  {
    Dictionary<int, \u000F\u2003> dictionary1 = this.\u0005;
    if (true)
      goto label_3;
label_1:
    List<int> intList1 = new List<int>();
    if (true)
      goto label_4;
label_2:
    Dictionary<int, \u000F\u2003> dictionary2;
    Dictionary<int, \u000F\u2003>.Enumerator enumerator1 = dictionary2.GetEnumerator();
    Dictionary<int, \u000F\u2003>.Enumerator enumerator2;
    if (true)
      enumerator2 = enumerator1;
    List<int> intList2;
    try
    {
      while (enumerator2.MoveNext())
      {
        KeyValuePair<int, \u000F\u2003> current = enumerator2.Current;
        if (current.Value == null)
          intList2.Add(current.Key);
      }
    }
    finally
    {
      enumerator2.Dispose();
    }
    using (List<int>.Enumerator enumerator3 = intList2.GetEnumerator())
    {
      while (enumerator3.MoveNext())
      {
        int current = enumerator3.Current;
        dictionary2.Remove(current);
      }
      return;
    }
label_4:
    intList2 = intList1;
    goto label_2;
label_3:
    dictionary2 = dictionary1;
    goto label_1;
  }

  public bool \u0002(int _param1, ref \u000F\u2003 _param2)
  {
    if (!this.\u0008)
      return false;
    object obj1 = this.\u0002;
    if (true)
      goto label_4;
label_3:
    object obj2;
    object obj3 = obj2;
    if (true)
      Monitor.Enter(obj3);
    try
    {
      \u000F\u2003 obj4;
      if (this.\u0005.TryGetValue(_param1, out obj4))
      {
        if (obj4 != null)
        {
          \u000F\u2003 obj5 = obj4;
          \u000F\u2003 obj6 = _param2;
          if (true)
            goto label_10;
label_9:
          return true;
label_10:
          this.\u0002(obj5, obj6);
          goto label_9;
        }
      }
    }
    finally
    {
      Monitor.Exit(obj2);
    }
    return false;
label_4:
    obj2 = obj1;
    goto label_3;
  }

  private void \u0002(\u000F\u2003 _param1, \u000F\u2003 _param2)
  {
    \u000F\u2003 obj1 = _param1;
    DateTime utcNow = DateTime.UtcNow;
    if (true)
      goto label_4;
label_1:
    \u000F\u2003 obj2 = _param2;
    int num1 = _param1.\u0003;
    if (true)
      goto label_5;
label_2:
    \u000F\u2003 obj3 = _param2;
    int num2 = _param1.\u0005;
    if (true)
      goto label_6;
label_3:
    _param2.\u0008 = _param1.\u0008;
    Buffer.BlockCopy((Array) _param1.\u0002, 0, (Array) _param2.\u0002, 0, this.\u0006.\u0002());
    return;
label_6:
    obj3.\u0005 = num2;
    goto label_3;
label_5:
    obj2.\u0003 = num1;
    goto label_2;
label_4:
    obj1.\u0008 = utcNow;
    goto label_1;
  }

  private void \u0002(object _param1)
  {
    int index;
    if (true)
      index = 0;
    while (index < this.\u0003\u2000.Length)
    {
      if (this.\u0003\u2000[index] == _param1)
        return;
      int num = index + 1;
      if (true)
        index = num;
    }
    this.\u0003\u2000[this.\u0005\u2000] = _param1;
    int num1 = this.\u0005\u2000 + 1;
    if (true)
      goto label_10;
label_8:
    if (this.\u0005\u2000 != this.\u0003\u2000.Length)
      return;
    this.\u0005\u2000 = 0;
    return;
label_10:
    this.\u0005\u2000 = num1;
    goto label_8;
  }

  private void \u0005()
  {
    if (this.\u000E.Count < this.\u0002\u2000)
      return;
    Dictionary<int, WeakReference> dictionary1 = new Dictionary<int, WeakReference>();
    if (true)
      goto label_3;
label_2:
    Dictionary<int, WeakReference>.Enumerator enumerator1 = this.\u000E.GetEnumerator();
    Dictionary<int, WeakReference>.Enumerator enumerator2;
    if (true)
      enumerator2 = enumerator1;
    Dictionary<int, WeakReference> dictionary2;
    try
    {
      while (enumerator2.MoveNext())
      {
        KeyValuePair<int, WeakReference> current = enumerator2.Current;
        if (true)
          goto label_8;
label_7:
        KeyValuePair<int, WeakReference> keyValuePair;
        if (keyValuePair.Value.IsAlive)
        {
          dictionary2.Add(keyValuePair.Key, keyValuePair.Value);
          continue;
        }
        continue;
label_8:
        keyValuePair = current;
        goto label_7;
      }
    }
    finally
    {
      enumerator2.Dispose();
    }
    this.\u000E = dictionary2;
    this.\u0002\u2000 = Math.Max(dictionary2.Count * 2, 10);
    return;
label_3:
    dictionary2 = dictionary1;
    goto label_2;
  }

  public void \u0002(int _param1, byte[] _param2, int _param3, int _param4, bool _param5)
  {
    if (true)
      goto label_3;
label_1:
    object obj1 = this.\u000F;
    if (true)
      goto label_4;
label_2:
    object obj2;
    object obj3 = obj2;
    if (true)
      Monitor.Enter(obj3);
    try
    {
      WeakReference weakReference;
      if (this.\u000E.TryGetValue(_param1, out weakReference) && weakReference.Target is \u0002\u2003.\u0002 target)
      {
        if (target.\u0002.Length < _param4)
          target.\u0002(_param2, _param3, _param4, _param5);
      }
      else
      {
        this.\u0005();
        target = new \u0002\u2003.\u0002(_param2, _param3, _param4, _param5);
        this.\u000E[_param1] = new WeakReference((object) target);
      }
      this.\u0002((object) target);
      return;
    }
    finally
    {
      Monitor.Exit(obj2);
    }
label_4:
    obj2 = obj1;
    goto label_2;
label_3:
    this.\u0002();
    goto label_1;
  }

  public bool \u0002(int _param1, byte[] _param2, int _param3, int _param4, out int _param5)
  {
    _param5 = 0;
    if (!this.\u0008)
      return false;
    object obj1 = this.\u000F;
    if (true)
      goto label_4;
label_3:
    object obj2;
    object obj3 = obj2;
    if (true)
      Monitor.Enter(obj3);
    bool flag;
    try
    {
      WeakReference weakReference;
      if (!this.\u000E.TryGetValue(_param1, out weakReference))
      {
        if (true)
          flag = false;
      }
      else if (!(weakReference.Target is \u0002\u2003.\u0002 target))
      {
        flag = false;
      }
      else
      {
        int length = target.\u0002.Length;
        _param5 = _param4;
        if (length < _param4)
        {
          if (!target.\u0003)
          {
            flag = false;
            goto label_17;
          }
          else
            _param5 = length;
        }
        Buffer.BlockCopy((Array) target.\u0002, 0, (Array) _param2, _param3, _param5);
        this.\u0002((object) target);
        flag = true;
      }
    }
    finally
    {
      Monitor.Exit(obj2);
    }
label_17:
    return flag;
label_4:
    obj2 = obj1;
    goto label_3;
  }

  private sealed class \u0002
  {
    public byte[] \u0002;
    public bool \u0003;

    public \u0002()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    public \u0002(byte[] _param1, int _param2, int _param3, bool _param4)
    {
      byte[] numArray = _param1;
      int num1 = _param2;
      int num2 = _param3;
      int num3 = _param4 ? 1 : 0;
      if (false)
        return;
      this.\u0002(numArray, num1, num2, num3 != 0);
    }

    public void \u0002(byte[] _param1, int _param2, int _param3, bool _param4)
    {
      byte[] numArray = new byte[_param3];
      if (true)
        goto label_4;
label_1:
      byte[] src = _param1;
      int srcOffset = _param2;
      byte[] dst = this.\u0002;
      int count = _param3;
      if (true)
        goto label_5;
label_2:
      int num = _param4 ? 1 : 0;
      if (false)
        return;
      this.\u0003 = num != 0;
      return;
label_5:
      Buffer.BlockCopy((Array) src, srcOffset, (Array) dst, 0, count);
      goto label_2;
label_4:
      this.\u0002 = numArray;
      goto label_1;
    }
  }
}
