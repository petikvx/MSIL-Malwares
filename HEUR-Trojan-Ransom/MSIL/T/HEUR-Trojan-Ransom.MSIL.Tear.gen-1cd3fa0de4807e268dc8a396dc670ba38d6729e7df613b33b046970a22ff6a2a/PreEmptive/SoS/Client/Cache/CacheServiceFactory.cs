// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Cache.CacheServiceFactory
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using System;

namespace PreEmptive.SoS.Client.Cache
{
  public static class CacheServiceFactory
  {
    public static CacheService CreateCacheService(
      CacheServiceConfiguration configuration)
    {
      int A_1 = 11;
      int num1 = 0;
      switch (num1)
      {
        default:
          Configuration apiConfiguration;
          int num2;
          switch (0)
          {
            case 0:
label_3:
              apiConfiguration = new Configuration(configuration.Business.CompanyId, configuration.Application.Id);
              apiConfiguration.CompanyName = configuration.Business.CompanyName;
              apiConfiguration.ApplicationName = configuration.Application.Name;
              apiConfiguration.ApplicationType = configuration.Application.ApplicationType;
              apiConfiguration.ApplicationVersion = configuration.Application.Version;
              apiConfiguration.Endpoint = configuration.GetProperty(Utils.a("좾꓀ꇂ뛄ꋆ믈뷊\uA4CC곎듐\uFDD2ꃔꗖ뗘", A_1)) as string;
              apiConfiguration.UseSSL = configuration.UseSSL;
              apiConfiguration.FullData = true;
              apiConfiguration.InstanceID = configuration.InstanceId;
              apiConfiguration.OmitPersonalInfo = configuration.OmitPersonalInformation;
              apiConfiguration.SupportOfflineStorage = (bool) configuration.GetProperty(Utils.a("킾\uA7C0ꗂ꧄껆\uA7C8껊\uE3CC볎ꓐꏒꗔ룖ꯘ꿚", A_1), (object) false);
              num2 = 2;
              num1 = num2;
              goto default;
            default:
              bool property;
              PlatformClient platformClient;
              CacheService cacheService;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    goto label_22;
                  case 1:
                    platformClient = PlatformFactory.GetPlatformClient(apiConfiguration, (bool) configuration.GetProperty(Utils.a("펾껀꓂\uEBC4\uAAC6곈룊뻌껎뛐뛒ꛔ", A_1), (object) false));
                    cacheService = new CacheService();
                    cacheService.Client = platformClient;
                    cacheService.SendLifeCycleMessages = property;
                    num2 = 11;
                    num1 = num2;
                    continue;
                  case 2:
                    if (apiConfiguration.SupportOfflineStorage)
                    {
                      num2 = 8;
                      num1 = num2;
                      continue;
                    }
                    goto case 7;
                  case 3:
                    if (!property)
                    {
                      num2 = 5;
                      num1 = num2;
                      continue;
                    }
                    goto case 9;
                  case 4:
                    if (configuration.FlowController is ImmediateFlowController)
                    {
                      num2 = 6;
                      num1 = num2;
                      continue;
                    }
                    goto case 1;
                  case 5:
                    apiConfiguration.DefaultSession = Guid.NewGuid();
                    num2 = 9;
                    num1 = num2;
                    continue;
                  case 6:
                    num2 = 1;
                    if (num2 == 0)
                      ;
                    Configuration.ApplicationStopBehavior stopBehavior = apiConfiguration.StopBehavior;
                    stopBehavior.SessionExtensionWindow = new int?(0);
                    stopBehavior.DefaultsToSynchronousStop = new bool?(true);
                    stopBehavior.NeededTimeForSavingAtStop = new int?(50);
                    stopBehavior.StopTimeout = new int?(50);
                    num2 = -24442;
                    int num3 = num2;
                    num2 = -24442;
                    int num4 = num2;
                    switch (num3 == num4 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_16;
                      default:
                        num2 = 0;
                        if (num2 == 0)
                          ;
                        num2 = 1;
                        num1 = num2;
                        continue;
                    }
                  case 7:
                    property = (bool) configuration.GetProperty(Utils.a("\uD9BEꣀ뇂ꃄ\uE9C6ꗈꋊꯌ\uAACE닐\uAAD2뛔믖볘\uF5DA룜꧞蓠跢釤铦", A_1), (object) true);
                    num2 = 3;
                    num1 = num2;
                    continue;
                  case 8:
                    apiConfiguration.Offline = (bool) configuration.GetProperty(Utils.a("킾\uA7C0ꗂ꧄껆\uA7C8껊\uE3CC볎ꗐ닒ꇔ닖", A_1), (object) false);
                    num2 = 7;
                    num1 = num2;
                    continue;
                  case 9:
                    num2 = 4;
                    num1 = num2;
                    continue;
                  case 10:
label_16:
                    platformClient.ApplicationStart((ExtendedKeys) null, (BinaryInfo) null, (PreEmptive.Analytics.Common.IFlowController) null);
                    num2 = 0;
                    num1 = num2;
                    continue;
                  case 11:
                    if (!property)
                    {
                      num2 = 10;
                      num1 = num2;
                      continue;
                    }
                    goto label_22;
                  default:
                    goto label_3;
                }
              }
label_22:
              return cacheService;
          }
      }
    }
  }
}
