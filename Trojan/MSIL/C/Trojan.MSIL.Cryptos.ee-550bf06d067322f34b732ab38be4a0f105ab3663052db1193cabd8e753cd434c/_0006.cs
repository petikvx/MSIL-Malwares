// Decompiled with JetBrains decompiler
// Type: 
// Assembly: 18, Version=1.1.1.1, Culture=neutral, PublicKeyToken=null
// MVID: F162A374-52C4-452F-A306-4A975A4C8F99
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Cryptos.ee-550bf06d067322f34b732ab38be4a0f105ab3663052db1193cabd8e753cd434c.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Threading;

internal static class \u0006
{
  private static readonly Assembly \u0002;
  private static volatile Dictionary<string, \u0006.\u0002> \u0003;

  static \u0006()
  {
    Assembly assembly = typeof (\u0006).Assembly;
    if (false)
      return;
    \u0006.\u0002 = assembly;
  }

  internal static void \u0002() => AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u0006.\u0002);

  private static Assembly \u0002(object _param0, ResolveEventArgs _param1)
  {
    \u0006.\u0003();
    Dictionary<string, \u0006.\u0002> dictionary = \u0006.\u0003;
    ResolveEventArgs resolveEventArgs = _param1;
    if (true)
      ;
    string name = resolveEventArgs.Name;
    \u0006.\u0002 obj1;
    ref \u0006.\u0002 local = ref obj1;
    if (!dictionary.TryGetValue(name, out local))
      return (Assembly) null;
    if (!\u0006.\u0002())
      return (Assembly) null;
    \u0006.\u0002 obj2 = obj1;
    if (true)
      ;
    return obj2.\u0002();
  }

  private static void \u0003()
  {
    if (\u0006.\u0003 != null)
      return;
    Assembly assembly1 = \u0006.\u0002;
    if (true)
      goto label_3;
label_2:
    Monitor.Enter((object) assembly1);
    Assembly assembly2;
    try
    {
      if (\u0006.\u0003 != null)
        return;
      string str1 = \u0002\u2000.\u0002(-651756547);
      if (true)
        goto label_8;
label_6:
      string str2;
      string str3 = str2;
      char[] chArray1 = new char[1];
      if (true)
        goto label_9;
label_7:
      char[] chArray2;
      chArray2[0] = ':';
      char[] chArray3 = chArray2;
      string[] strArray1 = str3.Split(chArray3);
      int length1 = strArray1.Length;
      Dictionary<string, \u0006.\u0002> dictionary = new Dictionary<string, \u0006.\u0002>(1, (IEqualityComparer<string>) StringComparer.Ordinal);
      for (int index1 = 0; index1 != length1; ++index1)
      {
        string[] strArray2 = strArray1[index1].Split('|');
        \u0006.\u0002 obj = new \u0006.\u0002(strArray2[0]);
        int length2 = strArray2.Length;
        for (int index2 = 1; index2 != length2; ++index2)
        {
          string key = strArray2[index2];
          dictionary.Add(key, obj);
        }
      }
      \u0006.\u0003 = dictionary;
      return;
label_9:
      chArray2 = chArray1;
      goto label_7;
label_8:
      str2 = str1;
      goto label_6;
    }
    finally
    {
      Monitor.Exit((object) assembly2);
    }
label_3:
    assembly2 = assembly1;
    goto label_2;
  }

  private static bool \u0002()
  {
    try
    {
      StackFrame[] frames = new StackTrace().GetFrames();
      if (true)
        goto label_2;
label_1:
      int index;
      if (true)
        index = 2;
      StackFrame[] stackFrameArray;
      for (; index < stackFrameArray.Length; ++index)
      {
        StackFrame stackFrame1 = stackFrameArray[index];
        if (true)
          goto label_6;
label_5:
        StackFrame stackFrame2;
        if ((object) stackFrame2.GetMethod().Module.Assembly == (object) \u0006.\u0002)
          return true;
        continue;
label_6:
        stackFrame2 = stackFrame1;
        goto label_5;
      }
      return false;
label_2:
      stackFrameArray = frames;
      goto label_1;
    }
    catch
    {
      return true;
    }
  }

  private sealed class \u0002
  {
    private readonly string \u0002;
    private volatile Assembly \u0003;

    internal \u0002(string _param1)
    {
      string str = _param1;
      if (false)
        return;
      this.\u0002 = str;
    }

    internal Assembly \u0002()
    {
      if ((object) this.\u0003 == null)
      {
        \u0006.\u0002 obj1 = this;
        if (true)
          goto label_3;
label_2:
        Monitor.Enter((object) obj1);
        \u0006.\u0002 obj2;
        try
        {
          if ((object) this.\u0003 == null)
          {
            this.\u0003 = Assembly.Load(this.\u0002);
            goto label_7;
          }
          else
            goto label_7;
        }
        finally
        {
          Monitor.Exit((object) obj2);
        }
label_3:
        obj2 = obj1;
        goto label_2;
      }
label_7:
      return this.\u0003;
    }
  }
}
