// Decompiled with JetBrains decompiler
// Type: IngressoVip.clsServidor
// Assembly: IngressoVip, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B67C4084-86FB-4B3F-B072-28F5697F4668
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Sality.ae-115d93ab771edf65ec0d5a50e51f618fc5159020bdb0762845d86c2a74f94f06.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace IngressoVip
{
  public class clsServidor
  {
    private Hashtable listaConexao;
    private clsFuncoes objFuncoes;
    private TcpClient Cnn;

    public clsServidor()
    {
      this.listaConexao = new Hashtable();
      this.objFuncoes = new clsFuncoes();
    }

    private TcpClient Conectar()
    {
      TcpClient tcpClient1 = new TcpClient();
      TcpClient tcpClient2;
      try
      {
        if (!tcpClient1.Connected)
        {
          tcpClient1.Connect("172.16.0.7", 64380);
          this.objFuncoes.MsgConsole("Conectado ao servidor remoto...");
        }
        tcpClient2 = tcpClient1;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.objFuncoes.MsgConsole("NÃO - Conectado ao servidor remoto...");
        tcpClient2 = tcpClient1;
        ProjectData.ClearProjectError();
      }
      return tcpClient2;
    }

    public void Escuta()
    {
      try
      {
        TcpListener tcpListener = new TcpListener(7777);
        tcpListener.Start();
        while (true)
        {
          TcpClient SkClient;
          string TrataString;
          do
          {
            SkClient = tcpListener.AcceptTcpClient();
            SkClient.NoDelay = false;
            NetworkStream stream = SkClient.GetStream();
            byte[] numArray = new byte[checked (SkClient.ReceiveBufferSize + 1)];
            Thread.Sleep(2000);
            while (stream.DataAvailable)
              stream.Read(numArray, 0, numArray.Length);
            int index = 0;
            TrataString = (string) null;
            while (Encoding.ASCII.GetString(numArray, 0, SkClient.ReceiveBufferSize)[index] != char.MinValue)
            {
              TrataString += Conversions.ToString(Encoding.ASCII.GetString(numArray, 0, SkClient.ReceiveBufferSize)[index]);
              checked { ++index; }
            }
          }
          while (Operators.CompareString(TrataString, "", false) == 0);
          try
          {
            if (!this.Cnn.Connected)
            {
              this.Cnn = this.Conectar();
            }
            else
            {
              new StreamWriter((Stream) this.Cnn.GetStream()).WriteLine("99");
              this.objFuncoes.MsgConsole("99");
            }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            this.Cnn = this.Conectar();
            ProjectData.ClearProjectError();
          }
          this.listaConexao[(object) TrataString] = (object) SkClient;
          new clsExecuta().TrataString(ref SkClient, ref this.Cnn, ref TrataString, ref this.listaConexao);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        FileSystem.WriteLine(Conversions.ToInteger(ex.ToString()));
        ProjectData.ClearProjectError();
      }
    }
  }
}
