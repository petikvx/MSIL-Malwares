// Decompiled with JetBrains decompiler
// Type: Mario_KS.frmSettings
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Mario_KS
{
  [DesignerGenerated]
  public class frmSettings : Form
  {
    private IContainer components;
    public NumbericTextbox Numberic;

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.frameBoard = new GroupBox();
      this.tblBoard = new TableLayoutPanel();
      this.lblWidth = new Label();
      this.txtHeight = new TextBox();
      this.lblHeight = new Label();
      this.txtWidth = new TextBox();
      this.frameGame = new GroupBox();
      this.tblDefaultValues = new TableLayoutPanel();
      this.lblLevel = new Label();
      this.txtBonusValue = new TextBox();
      this.txtIntervalMilliseconds = new TextBox();
      this.lblBonus = new Label();
      this.txtStartLevel = new TextBox();
      this.lblIntervalMilliseconds = new Label();
      this.lblToNextLevel = new Label();
      this.txtToNextLevel = new TextBox();
      this.lblntervalDecrease = new Label();
      this.txtIntervalDecrease = new TextBox();
      this.toolTip = new ToolTip(this.components);
      this.txtToNextIncrease = new TextBox();
      this.txtIntervalMultiplicator = new TextBox();
      this.txtBonusMultiplicator = new TextBox();
      this.txtSpeedDestruction = new TextBox();
      this.txtSpeedSwap = new TextBox();
      this.txtSpeedShift = new TextBox();
      this.chkEnableAnimations = new CheckBox();
      this.chkEnableSound = new CheckBox();
      this.frameMultiplyers = new GroupBox();
      this.TableLayoutPanel1 = new TableLayoutPanel();
      this.lblToNextIncrease = new Label();
      this.lblBonusMultiplicator = new Label();
      this.lblIntervalMultiplicator = new Label();
      this.frameAnimation = new GroupBox();
      this.tblAnimation = new TableLayoutPanel();
      this.lblSpeedDestruction = new Label();
      this.lblSpeedSwap = new Label();
      this.lblSpeedShift = new Label();
      this.cmdCancel = new Button();
      this.cmdOK = new Button();
      this.tblControls = new TableLayoutPanel();
      this.tblFrames = new TableLayoutPanel();
      this.chkRandomizeRotation = new CheckBox();
      this.frameBoard.SuspendLayout();
      this.tblBoard.SuspendLayout();
      this.frameGame.SuspendLayout();
      this.tblDefaultValues.SuspendLayout();
      this.frameMultiplyers.SuspendLayout();
      this.TableLayoutPanel1.SuspendLayout();
      this.frameAnimation.SuspendLayout();
      this.tblAnimation.SuspendLayout();
      this.tblControls.SuspendLayout();
      this.tblFrames.SuspendLayout();
      this.SuspendLayout();
      this.frameBoard.Controls.Add((Control) this.tblBoard);
      this.frameBoard.Dock = DockStyle.Fill;
      this.frameBoard.Location = new Point(3, 3);
      this.frameBoard.Name = "frameBoard";
      this.frameBoard.Size = new Size(492, 145);
      this.frameBoard.TabIndex = 0;
      this.frameBoard.TabStop = false;
      this.frameBoard.Text = "Board:";
      this.tblBoard.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tblBoard.ColumnCount = 2;
      this.tblBoard.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblBoard.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblBoard.Controls.Add((Control) this.lblWidth, 0, 0);
      this.tblBoard.Controls.Add((Control) this.txtHeight, 1, 1);
      this.tblBoard.Controls.Add((Control) this.lblHeight, 0, 1);
      this.tblBoard.Controls.Add((Control) this.txtWidth, 1, 0);
      this.tblBoard.Location = new Point(6, 19);
      this.tblBoard.Name = "tblBoard";
      this.tblBoard.RowCount = 2;
      this.tblBoard.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
      this.tblBoard.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
      this.tblBoard.Size = new Size(480, 120);
      this.tblBoard.TabIndex = 4;
      this.lblWidth.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblWidth.AutoSize = true;
      this.lblWidth.Location = new Point(3, 23);
      this.lblWidth.Name = "lblWidth";
      this.lblWidth.Size = new Size(234, 13);
      this.lblWidth.TabIndex = 0;
      this.lblWidth.Text = "&Width:";
      this.txtHeight.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtHeight.Location = new Point(243, 80);
      this.txtHeight.Name = "txtHeight";
      this.txtHeight.Size = new Size(234, 20);
      this.txtHeight.TabIndex = 3;
      this.toolTip.SetToolTip((Control) this.txtHeight, "Contains the amount of rows to use when creating the game board.");
      this.lblHeight.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblHeight.AutoSize = true;
      this.lblHeight.Location = new Point(3, 83);
      this.lblHeight.Name = "lblHeight";
      this.lblHeight.Size = new Size(234, 13);
      this.lblHeight.TabIndex = 2;
      this.lblHeight.Text = "&Height:";
      this.txtWidth.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtWidth.Location = new Point(243, 20);
      this.txtWidth.Name = "txtWidth";
      this.txtWidth.Size = new Size(234, 20);
      this.txtWidth.TabIndex = 1;
      this.toolTip.SetToolTip((Control) this.txtWidth, "Contains the amount of columns to be used when creating the game board.");
      this.frameGame.Controls.Add((Control) this.tblDefaultValues);
      this.frameGame.Dock = DockStyle.Fill;
      this.frameGame.Location = new Point(3, 154);
      this.frameGame.Name = "frameGame";
      this.frameGame.Size = new Size(492, 298);
      this.frameGame.TabIndex = 1;
      this.frameGame.TabStop = false;
      this.frameGame.Text = "Default values:";
      this.tblDefaultValues.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tblDefaultValues.ColumnCount = 2;
      this.tblDefaultValues.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblDefaultValues.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblDefaultValues.Controls.Add((Control) this.chkRandomizeRotation, 0, 5);
      this.tblDefaultValues.Controls.Add((Control) this.lblLevel, 0, 0);
      this.tblDefaultValues.Controls.Add((Control) this.txtBonusValue, 1, 4);
      this.tblDefaultValues.Controls.Add((Control) this.txtIntervalMilliseconds, 1, 3);
      this.tblDefaultValues.Controls.Add((Control) this.lblBonus, 0, 4);
      this.tblDefaultValues.Controls.Add((Control) this.txtStartLevel, 1, 0);
      this.tblDefaultValues.Controls.Add((Control) this.lblIntervalMilliseconds, 0, 3);
      this.tblDefaultValues.Controls.Add((Control) this.lblToNextLevel, 0, 1);
      this.tblDefaultValues.Controls.Add((Control) this.txtToNextLevel, 1, 1);
      this.tblDefaultValues.Controls.Add((Control) this.lblntervalDecrease, 0, 2);
      this.tblDefaultValues.Controls.Add((Control) this.txtIntervalDecrease, 1, 2);
      this.tblDefaultValues.Location = new Point(6, 20);
      this.tblDefaultValues.Name = "tblDefaultValues";
      this.tblDefaultValues.RowCount = 6;
      this.tblDefaultValues.RowStyles.Add(new RowStyle(SizeType.Percent, 16.66667f));
      this.tblDefaultValues.RowStyles.Add(new RowStyle(SizeType.Percent, 16.66667f));
      this.tblDefaultValues.RowStyles.Add(new RowStyle(SizeType.Percent, 16.66667f));
      this.tblDefaultValues.RowStyles.Add(new RowStyle(SizeType.Percent, 16.66667f));
      this.tblDefaultValues.RowStyles.Add(new RowStyle(SizeType.Percent, 16.66667f));
      this.tblDefaultValues.RowStyles.Add(new RowStyle(SizeType.Percent, 16.66667f));
      this.tblDefaultValues.Size = new Size(480, 272);
      this.tblDefaultValues.TabIndex = 12;
      this.lblLevel.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblLevel.AutoSize = true;
      this.lblLevel.Location = new Point(3, 16);
      this.lblLevel.Name = "lblLevel";
      this.lblLevel.Size = new Size(234, 13);
      this.lblLevel.TabIndex = 4;
      this.lblLevel.Text = "&Level:";
      this.txtBonusValue.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtBonusValue.Location = new Point(243, 192);
      this.txtBonusValue.Name = "txtBonusValue";
      this.txtBonusValue.Size = new Size(234, 20);
      this.txtBonusValue.TabIndex = 9;
      this.toolTip.SetToolTip((Control) this.txtBonusValue, "Set to change the default bonus.");
      this.txtIntervalMilliseconds.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtIntervalMilliseconds.Location = new Point(243, 147);
      this.txtIntervalMilliseconds.Name = "txtIntervalMilliseconds";
      this.txtIntervalMilliseconds.Size = new Size(234, 20);
      this.txtIntervalMilliseconds.TabIndex = 11;
      this.toolTip.SetToolTip((Control) this.txtIntervalMilliseconds, "Set to change the interval (in milliseconds) of which to decrease the points in timed mode.");
      this.lblBonus.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblBonus.AutoSize = true;
      this.lblBonus.Location = new Point(3, 196);
      this.lblBonus.Name = "lblBonus";
      this.lblBonus.Size = new Size(234, 13);
      this.lblBonus.TabIndex = 8;
      this.lblBonus.Text = "&Bonus:";
      this.txtStartLevel.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtStartLevel.Location = new Point(243, 12);
      this.txtStartLevel.Name = "txtStartLevel";
      this.txtStartLevel.Size = new Size(234, 20);
      this.txtStartLevel.TabIndex = 3;
      this.toolTip.SetToolTip((Control) this.txtStartLevel, "Contains the level to start at.");
      this.lblIntervalMilliseconds.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblIntervalMilliseconds.AutoSize = true;
      this.lblIntervalMilliseconds.Location = new Point(3, 151);
      this.lblIntervalMilliseconds.Name = "lblIntervalMilliseconds";
      this.lblIntervalMilliseconds.Size = new Size(234, 13);
      this.lblIntervalMilliseconds.TabIndex = 10;
      this.lblIntervalMilliseconds.Text = "&Interval (ms):";
      this.lblToNextLevel.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblToNextLevel.AutoSize = true;
      this.lblToNextLevel.Location = new Point(3, 61);
      this.lblToNextLevel.Name = "lblToNextLevel";
      this.lblToNextLevel.Size = new Size(234, 13);
      this.lblToNextLevel.TabIndex = 2;
      this.lblToNextLevel.Text = "&Points to next level:";
      this.txtToNextLevel.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtToNextLevel.Location = new Point(243, 57);
      this.txtToNextLevel.Name = "txtToNextLevel";
      this.txtToNextLevel.Size = new Size(234, 20);
      this.txtToNextLevel.TabIndex = 5;
      this.toolTip.SetToolTip((Control) this.txtToNextLevel, "Contains the amount of points that at the first level is required to level up.");
      this.lblntervalDecrease.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblntervalDecrease.AutoSize = true;
      this.lblntervalDecrease.Location = new Point(3, 106);
      this.lblntervalDecrease.Name = "lblntervalDecrease";
      this.lblntervalDecrease.Size = new Size(234, 13);
      this.lblntervalDecrease.TabIndex = 6;
      this.lblntervalDecrease.Text = "&Timed decrease:";
      this.txtIntervalDecrease.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtIntervalDecrease.Location = new Point(243, 102);
      this.txtIntervalDecrease.Name = "txtIntervalDecrease";
      this.txtIntervalDecrease.Size = new Size(234, 20);
      this.txtIntervalDecrease.TabIndex = 7;
      this.toolTip.SetToolTip((Control) this.txtIntervalDecrease, "In timed mode, sets the amount of points to decrease at each interval.");
      this.txtToNextIncrease.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtToNextIncrease.Location = new Point(240, 10);
      this.txtToNextIncrease.Name = "txtToNextIncrease";
      this.txtToNextIncrease.Size = new Size(232, 20);
      this.txtToNextIncrease.TabIndex = 5;
      this.toolTip.SetToolTip((Control) this.txtToNextIncrease, "Set to change the number that is multiplied with the required amount of points to reach the next level (upon reaching a new level).");
      this.txtIntervalMultiplicator.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtIntervalMultiplicator.Location = new Point(240, 50);
      this.txtIntervalMultiplicator.Name = "txtIntervalMultiplicator";
      this.txtIntervalMultiplicator.Size = new Size(232, 20);
      this.txtIntervalMultiplicator.TabIndex = 7;
      this.toolTip.SetToolTip((Control) this.txtIntervalMultiplicator, "Set to change the factor to increase the interval at which to remove points with.");
      this.txtBonusMultiplicator.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtBonusMultiplicator.Location = new Point(240, 90);
      this.txtBonusMultiplicator.Name = "txtBonusMultiplicator";
      this.txtBonusMultiplicator.Size = new Size(232, 20);
      this.txtBonusMultiplicator.TabIndex = 9;
      this.toolTip.SetToolTip((Control) this.txtBonusMultiplicator, "Cells that are removed as a consequence of another row of cells being removed will have its bonus increased by this factor.");
      this.txtSpeedDestruction.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtSpeedDestruction.Location = new Point(243, 17);
      this.txtSpeedDestruction.Name = "txtSpeedDestruction";
      this.txtSpeedDestruction.Size = new Size(235, 20);
      this.txtSpeedDestruction.TabIndex = 7;
      this.toolTip.SetToolTip((Control) this.txtSpeedDestruction, "Contains the amount of frames to use when drawing the destruction of cells.");
      this.txtSpeedSwap.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtSpeedSwap.Location = new Point(243, 71);
      this.txtSpeedSwap.Name = "txtSpeedSwap";
      this.txtSpeedSwap.Size = new Size(235, 20);
      this.txtSpeedSwap.TabIndex = 9;
      this.toolTip.SetToolTip((Control) this.txtSpeedSwap, "Sets the amount of frames to use when drawing a swap between two cells.");
      this.txtSpeedShift.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.txtSpeedShift.Location = new Point(243, 125);
      this.txtSpeedShift.Name = "txtSpeedShift";
      this.txtSpeedShift.Size = new Size(235, 20);
      this.txtSpeedShift.TabIndex = 11;
      this.toolTip.SetToolTip((Control) this.txtSpeedShift, "Sets the amount of frames to use when moving a column one row down.");
      this.chkEnableAnimations.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.chkEnableAnimations.AutoSize = true;
      this.chkEnableAnimations.Location = new Point(3, 180);
      this.chkEnableAnimations.Name = "chkEnableAnimations";
      this.chkEnableAnimations.Size = new Size(234, 17);
      this.chkEnableAnimations.TabIndex = 13;
      this.chkEnableAnimations.Text = "Enable animations";
      this.toolTip.SetToolTip((Control) this.chkEnableAnimations, "Check to enable the usage of animations.");
      this.chkEnableAnimations.UseVisualStyleBackColor = true;
      this.chkEnableSound.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.chkEnableSound.AutoSize = true;
      this.chkEnableSound.Location = new Point(3, 236);
      this.chkEnableSound.Name = "chkEnableSound";
      this.chkEnableSound.Size = new Size(234, 17);
      this.chkEnableSound.TabIndex = 14;
      this.chkEnableSound.Text = "Enable sound";
      this.toolTip.SetToolTip((Control) this.chkEnableSound, "Check to enable sounds.");
      this.chkEnableSound.UseVisualStyleBackColor = true;
      this.frameMultiplyers.Controls.Add((Control) this.TableLayoutPanel1);
      this.frameMultiplyers.Dock = DockStyle.Fill;
      this.frameMultiplyers.Location = new Point(501, 3);
      this.frameMultiplyers.Name = "frameMultiplyers";
      this.frameMultiplyers.Size = new Size(493, 145);
      this.frameMultiplyers.TabIndex = 2;
      this.frameMultiplyers.TabStop = false;
      this.frameMultiplyers.Text = "Multiplyers:";
      this.TableLayoutPanel1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.TableLayoutPanel1.ColumnCount = 2;
      this.TableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.TableLayoutPanel1.Controls.Add((Control) this.lblToNextIncrease, 0, 0);
      this.TableLayoutPanel1.Controls.Add((Control) this.txtBonusMultiplicator, 1, 2);
      this.TableLayoutPanel1.Controls.Add((Control) this.lblBonusMultiplicator, 0, 2);
      this.TableLayoutPanel1.Controls.Add((Control) this.txtToNextIncrease, 1, 0);
      this.TableLayoutPanel1.Controls.Add((Control) this.lblIntervalMultiplicator, 0, 1);
      this.TableLayoutPanel1.Controls.Add((Control) this.txtIntervalMultiplicator, 1, 1);
      this.TableLayoutPanel1.Location = new Point(9, 19);
      this.TableLayoutPanel1.Name = "TableLayoutPanel1";
      this.TableLayoutPanel1.RowCount = 3;
      this.TableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33333f));
      this.TableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33333f));
      this.TableLayoutPanel1.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33333f));
      this.TableLayoutPanel1.Size = new Size(475, 120);
      this.TableLayoutPanel1.TabIndex = 11;
      this.lblToNextIncrease.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblToNextIncrease.AutoSize = true;
      this.lblToNextIncrease.Location = new Point(3, 13);
      this.lblToNextIncrease.Name = "lblToNextIncrease";
      this.lblToNextIncrease.Size = new Size(231, 13);
      this.lblToNextIncrease.TabIndex = 6;
      this.lblToNextIncrease.Text = "&Requirements factor:";
      this.lblBonusMultiplicator.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblBonusMultiplicator.AutoSize = true;
      this.lblBonusMultiplicator.Location = new Point(3, 93);
      this.lblBonusMultiplicator.Name = "lblBonusMultiplicator";
      this.lblBonusMultiplicator.Size = new Size(231, 13);
      this.lblBonusMultiplicator.TabIndex = 10;
      this.lblBonusMultiplicator.Text = "Bonus factor:";
      this.lblIntervalMultiplicator.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblIntervalMultiplicator.AutoSize = true;
      this.lblIntervalMultiplicator.Location = new Point(3, 53);
      this.lblIntervalMultiplicator.Name = "lblIntervalMultiplicator";
      this.lblIntervalMultiplicator.Size = new Size(231, 13);
      this.lblIntervalMultiplicator.TabIndex = 8;
      this.lblIntervalMultiplicator.Text = "Decrease factor:";
      this.frameAnimation.Controls.Add((Control) this.tblAnimation);
      this.frameAnimation.Dock = DockStyle.Fill;
      this.frameAnimation.Location = new Point(501, 154);
      this.frameAnimation.Name = "frameAnimation";
      this.frameAnimation.Size = new Size(493, 298);
      this.frameAnimation.TabIndex = 3;
      this.frameAnimation.TabStop = false;
      this.frameAnimation.Text = "Animation:";
      this.tblAnimation.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tblAnimation.ColumnCount = 2;
      this.tblAnimation.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblAnimation.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblAnimation.Controls.Add((Control) this.lblSpeedDestruction, 0, 0);
      this.tblAnimation.Controls.Add((Control) this.chkEnableSound, 0, 4);
      this.tblAnimation.Controls.Add((Control) this.txtSpeedDestruction, 1, 0);
      this.tblAnimation.Controls.Add((Control) this.chkEnableAnimations, 0, 3);
      this.tblAnimation.Controls.Add((Control) this.lblSpeedSwap, 0, 1);
      this.tblAnimation.Controls.Add((Control) this.txtSpeedShift, 1, 2);
      this.tblAnimation.Controls.Add((Control) this.lblSpeedShift, 0, 2);
      this.tblAnimation.Controls.Add((Control) this.txtSpeedSwap, 1, 1);
      this.tblAnimation.Location = new Point(6, 19);
      this.tblAnimation.Name = "tblAnimation";
      this.tblAnimation.RowCount = 5;
      this.tblAnimation.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tblAnimation.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tblAnimation.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tblAnimation.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tblAnimation.RowStyles.Add(new RowStyle(SizeType.Percent, 20f));
      this.tblAnimation.Size = new Size(481, 273);
      this.tblAnimation.TabIndex = 15;
      this.lblSpeedDestruction.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblSpeedDestruction.AutoSize = true;
      this.lblSpeedDestruction.Location = new Point(3, 20);
      this.lblSpeedDestruction.Name = "lblSpeedDestruction";
      this.lblSpeedDestruction.Size = new Size(234, 13);
      this.lblSpeedDestruction.TabIndex = 8;
      this.lblSpeedDestruction.Text = "&Cell destruction (frames).";
      this.lblSpeedSwap.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblSpeedSwap.AutoSize = true;
      this.lblSpeedSwap.Location = new Point(3, 74);
      this.lblSpeedSwap.Name = "lblSpeedSwap";
      this.lblSpeedSwap.Size = new Size(234, 13);
      this.lblSpeedSwap.TabIndex = 10;
      this.lblSpeedSwap.Text = "&Cell swap:";
      this.lblSpeedShift.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.lblSpeedShift.AutoSize = true;
      this.lblSpeedShift.Location = new Point(3, 128);
      this.lblSpeedShift.Name = "lblSpeedShift";
      this.lblSpeedShift.Size = new Size(234, 13);
      this.lblSpeedShift.TabIndex = 12;
      this.lblSpeedShift.Text = "&Row remove:";
      this.cmdCancel.DialogResult = DialogResult.Cancel;
      this.cmdCancel.Dock = DockStyle.Fill;
      this.cmdCancel.Location = new Point(91, 3);
      this.cmdCancel.Name = "cmdCancel";
      this.cmdCancel.Size = new Size(82, 27);
      this.cmdCancel.TabIndex = 4;
      this.cmdCancel.Text = "&Cancel";
      this.cmdCancel.UseVisualStyleBackColor = true;
      this.cmdOK.Dock = DockStyle.Fill;
      this.cmdOK.Location = new Point(3, 3);
      this.cmdOK.Name = "cmdOK";
      this.cmdOK.Size = new Size(82, 27);
      this.cmdOK.TabIndex = 5;
      this.cmdOK.Text = "&Ok";
      this.cmdOK.UseVisualStyleBackColor = true;
      this.tblControls.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.tblControls.ColumnCount = 2;
      this.tblControls.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblControls.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblControls.Controls.Add((Control) this.cmdOK, 0, 0);
      this.tblControls.Controls.Add((Control) this.cmdCancel, 1, 0);
      this.tblControls.Location = new Point(838, 491);
      this.tblControls.Name = "tblControls";
      this.tblControls.RowCount = 1;
      this.tblControls.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
      this.tblControls.Size = new Size(176, 33);
      this.tblControls.TabIndex = 6;
      this.tblFrames.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
      this.tblFrames.ColumnCount = 2;
      this.tblFrames.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblFrames.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 50f));
      this.tblFrames.Controls.Add((Control) this.frameBoard, 0, 0);
      this.tblFrames.Controls.Add((Control) this.frameMultiplyers, 1, 0);
      this.tblFrames.Controls.Add((Control) this.frameGame, 0, 1);
      this.tblFrames.Controls.Add((Control) this.frameAnimation, 1, 1);
      this.tblFrames.Location = new Point(12, 12);
      this.tblFrames.Name = "tblFrames";
      this.tblFrames.RowCount = 2;
      this.tblFrames.RowStyles.Add(new RowStyle(SizeType.Percent, 33.33333f));
      this.tblFrames.RowStyles.Add(new RowStyle(SizeType.Percent, 66.66666f));
      this.tblFrames.Size = new Size(997, 455);
      this.tblFrames.TabIndex = 7;
      this.chkRandomizeRotation.Anchor = AnchorStyles.Left | AnchorStyles.Right;
      this.chkRandomizeRotation.AutoSize = true;
      this.chkRandomizeRotation.Location = new Point(3, 240);
      this.chkRandomizeRotation.Name = "chkRandomizeRotation";
      this.chkRandomizeRotation.Size = new Size(234, 17);
      this.chkRandomizeRotation.TabIndex = 15;
      this.chkRandomizeRotation.Text = "&Randomize rotation";
      this.toolTip.SetToolTip((Control) this.chkRandomizeRotation, "Check to enable sounds.");
      this.chkRandomizeRotation.UseVisualStyleBackColor = true;
      this.AcceptButton = (IButtonControl) this.cmdOK;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.CancelButton = (IButtonControl) this.cmdCancel;
      this.ClientSize = new Size(1026, 536);
      this.Controls.Add((Control) this.tblFrames);
      this.Controls.Add((Control) this.tblControls);
      this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
      this.MaximizeBox = false;
      this.MinimumSize = new Size(640, 480);
      this.Name = nameof (frmSettings);
      this.Text = "Settings";
      this.frameBoard.ResumeLayout(false);
      this.tblBoard.ResumeLayout(false);
      this.tblBoard.PerformLayout();
      this.frameGame.ResumeLayout(false);
      this.tblDefaultValues.ResumeLayout(false);
      this.tblDefaultValues.PerformLayout();
      this.frameMultiplyers.ResumeLayout(false);
      this.TableLayoutPanel1.ResumeLayout(false);
      this.TableLayoutPanel1.PerformLayout();
      this.frameAnimation.ResumeLayout(false);
      this.tblAnimation.ResumeLayout(false);
      this.tblAnimation.PerformLayout();
      this.tblControls.ResumeLayout(false);
      this.tblFrames.ResumeLayout(false);
      this.ResumeLayout(false);
    }

    [field: AccessedThroughProperty("frameBoard")]
    internal virtual GroupBox frameBoard { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtWidth")]
    internal virtual TextBox txtWidth { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblWidth")]
    internal virtual Label lblWidth { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtHeight")]
    internal virtual TextBox txtHeight { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblHeight")]
    internal virtual Label lblHeight { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("frameGame")]
    internal virtual GroupBox frameGame { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblToNextLevel")]
    internal virtual Label lblToNextLevel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblLevel")]
    internal virtual Label lblLevel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblntervalDecrease")]
    internal virtual Label lblntervalDecrease { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblBonus")]
    internal virtual Label lblBonus { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("toolTip")]
    internal virtual ToolTip toolTip { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblIntervalMilliseconds")]
    internal virtual Label lblIntervalMilliseconds { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("frameMultiplyers")]
    internal virtual GroupBox frameMultiplyers { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblToNextIncrease")]
    internal virtual Label lblToNextIncrease { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtToNextIncrease")]
    internal virtual TextBox txtToNextIncrease { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblBonusMultiplicator")]
    internal virtual Label lblBonusMultiplicator { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtBonusMultiplicator")]
    internal virtual TextBox txtBonusMultiplicator { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblIntervalMultiplicator")]
    internal virtual Label lblIntervalMultiplicator { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtIntervalMultiplicator")]
    internal virtual TextBox txtIntervalMultiplicator { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("frameAnimation")]
    internal virtual GroupBox frameAnimation { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblSpeedDestruction")]
    internal virtual Label lblSpeedDestruction { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtSpeedDestruction")]
    internal virtual TextBox txtSpeedDestruction { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblSpeedSwap")]
    internal virtual Label lblSpeedSwap { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtSpeedSwap")]
    internal virtual TextBox txtSpeedSwap { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblSpeedShift")]
    internal virtual Label lblSpeedShift { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtSpeedShift")]
    internal virtual TextBox txtSpeedShift { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkEnableAnimations")]
    internal virtual CheckBox chkEnableAnimations { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkEnableSound")]
    internal virtual CheckBox chkEnableSound { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button cmdCancel
    {
      get => this._cmdCancel;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cmdCancel_Click);
        Button cmdCancel1 = this._cmdCancel;
        if (cmdCancel1 != null)
          cmdCancel1.Click -= eventHandler;
        this._cmdCancel = value;
        Button cmdCancel2 = this._cmdCancel;
        if (cmdCancel2 == null)
          return;
        cmdCancel2.Click += eventHandler;
      }
    }

    internal virtual Button cmdOK
    {
      get => this._cmdOK;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.cmdOK_Click);
        Button cmdOk1 = this._cmdOK;
        if (cmdOk1 != null)
          cmdOk1.Click -= eventHandler;
        this._cmdOK = value;
        Button cmdOk2 = this._cmdOK;
        if (cmdOk2 == null)
          return;
        cmdOk2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("tblControls")]
    internal virtual TableLayoutPanel tblControls { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("tblDefaultValues")]
    internal virtual TableLayoutPanel tblDefaultValues { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("tblFrames")]
    internal virtual TableLayoutPanel tblFrames { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtBonusValue")]
    internal virtual TextBox txtBonusValue { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtIntervalMilliseconds")]
    internal virtual TextBox txtIntervalMilliseconds { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtStartLevel")]
    internal virtual TextBox txtStartLevel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtToNextLevel")]
    internal virtual TextBox txtToNextLevel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtIntervalDecrease")]
    internal virtual TextBox txtIntervalDecrease { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("tblBoard")]
    internal virtual TableLayoutPanel tblBoard { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("TableLayoutPanel1")]
    internal virtual TableLayoutPanel TableLayoutPanel1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("tblAnimation")]
    internal virtual TableLayoutPanel tblAnimation { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkRandomizeRotation")]
    internal virtual CheckBox chkRandomizeRotation { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public frmSettings()
    {
      this.Load += new EventHandler(this.frmSettings_Load);
      this.Numberic = new NumbericTextbox();
      this.InitializeComponent();
      this.LoadSettings();
    }

    private void LoadSettings()
    {
    }

    private void SaveSettings()
    {
    }

    private void frmSettings_Load(object sender, EventArgs e)
    {
      this.Numberic.SetNumberic(this.txtWidth, true);
      this.Numberic.SetNumberic(this.txtHeight, true);
      this.Numberic.SetNumberic(this.txtStartLevel, true);
      this.Numberic.SetNumberic(this.txtToNextLevel, true);
      this.Numberic.SetNumberic(this.txtIntervalDecrease, true);
      this.Numberic.SetNumberic(this.txtIntervalMilliseconds, true);
      this.Numberic.SetNumberic(this.txtBonusValue, true);
      this.Numberic.SetNumberic(this.txtSpeedDestruction, true);
      this.Numberic.SetNumberic(this.txtSpeedSwap, true);
      this.Numberic.SetNumberic(this.txtSpeedShift, true);
    }

    private void cmdOK_Click(object sender, EventArgs e)
    {
      this.SaveSettings();
      this.Close();
    }

    private void cmdCancel_Click(object sender, EventArgs e) => this.Close();
  }
}
