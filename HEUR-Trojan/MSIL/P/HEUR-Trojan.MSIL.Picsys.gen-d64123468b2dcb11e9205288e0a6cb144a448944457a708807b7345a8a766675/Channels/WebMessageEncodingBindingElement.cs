// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Channels.WebMessageEncodingBindingElement
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Runtime.InteropServices;
using System.ServiceModel.Administration;
using System.ServiceModel.Description;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Channels
{
  [ComVisible(false)]
  public sealed class WebMessageEncodingBindingElement : 
    MessageEncodingBindingElement,
    IWsdlExportExtension,
    IWmiInstanceProvider
  {
    private WebContentTypeMapper contentTypeMapper;
    private int maxReadPoolSize;
    private int maxWritePoolSize;
    private XmlDictionaryReaderQuotas readerQuotas;
    private Encoding writeEncoding;

    public WebMessageEncodingBindingElement()
      : this(TextEncoderDefaults.Encoding)
    {
    }

    public WebMessageEncodingBindingElement(Encoding writeEncoding)
    {
      if (writeEncoding == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (writeEncoding));
      TextEncoderDefaults.ValidateEncoding(writeEncoding);
      this.maxReadPoolSize = 64;
      this.maxWritePoolSize = 16;
      this.readerQuotas = new XmlDictionaryReaderQuotas();
      EncoderDefaults.ReaderQuotas.CopyTo(this.readerQuotas);
      this.writeEncoding = writeEncoding;
    }

    private WebMessageEncodingBindingElement(WebMessageEncodingBindingElement elementToBeCloned)
      : base((MessageEncodingBindingElement) elementToBeCloned)
    {
      this.maxReadPoolSize = elementToBeCloned.maxReadPoolSize;
      this.maxWritePoolSize = elementToBeCloned.maxWritePoolSize;
      this.readerQuotas = new XmlDictionaryReaderQuotas();
      elementToBeCloned.readerQuotas.CopyTo(this.readerQuotas);
      this.writeEncoding = elementToBeCloned.writeEncoding;
      this.contentTypeMapper = elementToBeCloned.contentTypeMapper;
      this.CrossDomainScriptAccessEnabled = elementToBeCloned.CrossDomainScriptAccessEnabled;
    }

    public WebContentTypeMapper ContentTypeMapper
    {
      get => this.contentTypeMapper;
      set => this.contentTypeMapper = value;
    }

    public int MaxReadPoolSize
    {
      get => this.maxReadPoolSize;
      set => this.maxReadPoolSize = value > 0 ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value), (object) value, SR2.GetString(SR2.ValueMustBePositive)));
    }

    public int MaxWritePoolSize
    {
      get => this.maxWritePoolSize;
      set => this.maxWritePoolSize = value > 0 ? value : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value), (object) value, SR2.GetString(SR2.ValueMustBePositive)));
    }

    public override MessageVersion MessageVersion
    {
      get => MessageVersion.None;
      set
      {
        if (value == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (value));
        if (value != MessageVersion.None)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument(nameof (value), SR2.GetString(SR2.JsonOnlySupportsMessageVersionNone));
      }
    }

    internal override bool IsWsdlExportable => false;

    public XmlDictionaryReaderQuotas ReaderQuotas => this.readerQuotas;

    public Encoding WriteEncoding
    {
      get => this.writeEncoding;
      set
      {
        if (value == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (value));
        TextEncoderDefaults.ValidateEncoding(value);
        this.writeEncoding = value;
      }
    }

    public bool CrossDomainScriptAccessEnabled { get; set; }

    public override IChannelFactory<TChannel> BuildChannelFactory<TChannel>(
      BindingContext context)
    {
      return this.InternalBuildChannelFactory<TChannel>(context);
    }

    public override IChannelListener<TChannel> BuildChannelListener<TChannel>(
      BindingContext context)
    {
      return this.InternalBuildChannelListener<TChannel>(context);
    }

    public override bool CanBuildChannelListener<TChannel>(BindingContext context) => this.InternalCanBuildChannelListener<TChannel>(context);

    public override BindingElement Clone() => (BindingElement) new WebMessageEncodingBindingElement(this);

    public override MessageEncoderFactory CreateMessageEncoderFactory() => (MessageEncoderFactory) new WebMessageEncoderFactory(this.WriteEncoding, this.MaxReadPoolSize, this.MaxWritePoolSize, this.ReaderQuotas, this.ContentTypeMapper, this.CrossDomainScriptAccessEnabled);

    public override T GetProperty<T>(BindingContext context)
    {
      if (context == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (context));
      return typeof (T) == typeof (XmlDictionaryReaderQuotas) ? (T) this.readerQuotas : base.GetProperty<T>(context);
    }

    void IWmiInstanceProvider.FillInstance(IWmiInstance wmiInstance)
    {
      wmiInstance.SetProperty("MessageVersion", (object) this.MessageVersion.ToString());
      wmiInstance.SetProperty("Encoding", (object) this.writeEncoding.WebName);
      wmiInstance.SetProperty("MaxReadPoolSize", (object) this.maxReadPoolSize);
      wmiInstance.SetProperty("MaxWritePoolSize", (object) this.maxWritePoolSize);
      if (this.ReaderQuotas == null)
        return;
      IWmiInstance wmiInstance1 = wmiInstance.NewInstance("XmlDictionaryReaderQuotas");
      wmiInstance1.SetProperty("MaxArrayLength", (object) this.readerQuotas.MaxArrayLength);
      wmiInstance1.SetProperty("MaxBytesPerRead", (object) this.readerQuotas.MaxBytesPerRead);
      wmiInstance1.SetProperty("MaxDepth", (object) this.readerQuotas.MaxDepth);
      wmiInstance1.SetProperty("MaxNameTableCharCount", (object) this.readerQuotas.MaxNameTableCharCount);
      wmiInstance1.SetProperty("MaxStringContentLength", (object) this.readerQuotas.MaxStringContentLength);
      wmiInstance.SetProperty("ReaderQuotas", (object) wmiInstance1);
    }

    string IWmiInstanceProvider.GetInstanceType() => typeof (WebMessageEncodingBindingElement).Name;

    void IWsdlExportExtension.ExportContract(
      WsdlExporter exporter,
      WsdlContractConversionContext context)
    {
    }

    void IWsdlExportExtension.ExportEndpoint(
      WsdlExporter exporter,
      WsdlEndpointConversionContext context)
    {
      if (context == null)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (context));
      SoapHelper.SetSoapVersion(context, exporter, this.MessageVersion.Envelope);
    }

    internal override bool CheckEncodingVersion(EnvelopeVersion version) => this.MessageVersion.Envelope == version;

    internal override bool IsMatch(BindingElement b) => base.IsMatch(b) && b is WebMessageEncodingBindingElement encodingBindingElement && this.maxReadPoolSize == encodingBindingElement.MaxReadPoolSize && this.maxWritePoolSize == encodingBindingElement.MaxWritePoolSize && this.readerQuotas.MaxStringContentLength == encodingBindingElement.ReaderQuotas.MaxStringContentLength && this.readerQuotas.MaxArrayLength == encodingBindingElement.ReaderQuotas.MaxArrayLength && this.readerQuotas.MaxBytesPerRead == encodingBindingElement.ReaderQuotas.MaxBytesPerRead && this.readerQuotas.MaxDepth == encodingBindingElement.ReaderQuotas.MaxDepth && this.readerQuotas.MaxNameTableCharCount == encodingBindingElement.ReaderQuotas.MaxNameTableCharCount && !(this.WriteEncoding.EncodingName != encodingBindingElement.WriteEncoding.EncodingName) && this.MessageVersion.IsMatch(encodingBindingElement.MessageVersion) && this.ContentTypeMapper == encodingBindingElement.ContentTypeMapper;
  }
}
