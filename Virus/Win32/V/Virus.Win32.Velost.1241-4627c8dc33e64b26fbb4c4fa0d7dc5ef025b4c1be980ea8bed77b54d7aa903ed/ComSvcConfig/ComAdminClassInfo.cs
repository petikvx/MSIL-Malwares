// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.ComAdminClassInfo
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;
using System.EnterpriseServices;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class ComAdminClassInfo
  {
    private Guid clsid;
    private List<ComAdminInterfaceInfo> interfaces;
    private bool isPrivate;
    private string progid;
    private TransactionOption transactionOption;

    public Guid Clsid => this.clsid;

    public bool IsPrivate => this.isPrivate;

    public string Name => this.progid;

    public List<ComAdminInterfaceInfo> Interfaces => this.interfaces;

    public bool SupportsTransactionFlow => this.transactionOption == TransactionOption.Required || this.transactionOption == TransactionOption.Supported;

    public ComAdminClassInfo(ICatalogObject compObj, ICatalogCollection compColl)
    {
      this.clsid = new Guid((string) compObj.Key());
      this.progid = (string) compObj.Name();
      this.isPrivate = (bool) compObj.GetValue(PropertyName.IsPrivateComponent);
      this.transactionOption = (TransactionOption) compObj.GetValue(PropertyName.TransactionOption);
      this.BuildInterfaces(compObj, compColl);
    }

    private void BuildInterfaces(ICatalogObject compObj, ICatalogCollection compColl)
    {
      this.interfaces = new List<ComAdminInterfaceInfo>();
      ICatalogCollection collection = (ICatalogCollection) compColl.GetCollection(CollectionName.InterfacesForComponent, compObj.Key());
      collection.Populate();
      for (int lIndex = 0; lIndex < collection.Count(); ++lIndex)
      {
        ICatalogObject catalogObject = (ICatalogObject) collection.Item(lIndex);
        this.interfaces.Add(new ComAdminInterfaceInfo(new Guid((string) catalogObject.Key()), (string) catalogObject.Name()));
      }
    }

    public ComAdminInterfaceInfo FindInterface(string interfaceNameOrGuid)
    {
      ComAdminInterfaceInfo adminInterfaceInfo1 = (ComAdminInterfaceInfo) null;
      interfaceNameOrGuid = interfaceNameOrGuid.ToLowerInvariant();
      foreach (ComAdminInterfaceInfo adminInterfaceInfo2 in this.interfaces)
      {
        if (adminInterfaceInfo2.Iid.ToString("B").ToLowerInvariant() == interfaceNameOrGuid.ToLowerInvariant() || adminInterfaceInfo2.Name.ToLowerInvariant() == interfaceNameOrGuid)
          adminInterfaceInfo1 = adminInterfaceInfo1 == null ? adminInterfaceInfo2 : throw Tool.CreateException(Microsoft.Tools.ServiceModel.SR.GetString("AmbiguousInterfaceName", (object) interfaceNameOrGuid), (Exception) null);
      }
      return adminInterfaceInfo1;
    }
  }
}
