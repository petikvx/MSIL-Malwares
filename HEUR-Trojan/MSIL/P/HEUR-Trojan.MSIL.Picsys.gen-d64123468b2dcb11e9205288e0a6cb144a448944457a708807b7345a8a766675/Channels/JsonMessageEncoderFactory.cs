// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Channels.JsonMessageEncoderFactory
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Globalization;
using System.IO;
using System.Net;
using System.Runtime;
using System.Runtime.Diagnostics;
using System.Runtime.Serialization.Json;
using System.ServiceModel.Diagnostics;
using System.Text;
using System.Xml;

namespace System.ServiceModel.Channels
{
  internal class JsonMessageEncoderFactory : MessageEncoderFactory
  {
    private static readonly TextMessageEncoderFactory.ContentEncoding[] ApplicationJsonContentEncoding = JsonMessageEncoderFactory.GetContentEncodingMap("application/json");
    private JsonMessageEncoderFactory.JsonMessageEncoder messageEncoder;

    public JsonMessageEncoderFactory(
      Encoding writeEncoding,
      int maxReadPoolSize,
      int maxWritePoolSize,
      XmlDictionaryReaderQuotas quotas,
      bool crossDomainScriptAccessEnabled)
    {
      this.messageEncoder = new JsonMessageEncoderFactory.JsonMessageEncoder(writeEncoding, maxReadPoolSize, maxWritePoolSize, quotas, crossDomainScriptAccessEnabled);
    }

    public override MessageEncoder Encoder => (MessageEncoder) this.messageEncoder;

    public override MessageVersion MessageVersion => this.messageEncoder.MessageVersion;

    internal static string GetContentType(WebMessageEncodingBindingElement encodingElement) => encodingElement == null ? WebMessageEncoderFactory.GetContentType("application/json", TextEncoderDefaults.Encoding) : WebMessageEncoderFactory.GetContentType("application/json", encodingElement.WriteEncoding);

    private static TextMessageEncoderFactory.ContentEncoding[] GetContentEncodingMap(
      string mediaType)
    {
      Encoding[] supportedEncodings = TextMessageEncoderFactory.GetSupportedEncodings();
      TextMessageEncoderFactory.ContentEncoding[] contentEncodingMap = new TextMessageEncoderFactory.ContentEncoding[supportedEncodings.Length];
      for (int index = 0; index < supportedEncodings.Length; ++index)
        contentEncodingMap[index] = new TextMessageEncoderFactory.ContentEncoding()
        {
          contentType = WebMessageEncoderFactory.GetContentType(mediaType, supportedEncodings[index]),
          encoding = supportedEncodings[index]
        };
      return contentEncodingMap;
    }

    private class JsonMessageEncoder : MessageEncoder
    {
      private const int maxPooledXmlReadersPerMessage = 2;
      private volatile SynchronizedPool<JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageData> bufferedReaderPool;
      private volatile SynchronizedPool<JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageWriter> bufferedWriterPool;
      private string contentType;
      private int maxReadPoolSize;
      private int maxWritePoolSize;
      private OnXmlDictionaryReaderClose onStreamedReaderClose;
      private XmlDictionaryReaderQuotas readerQuotas;
      private XmlDictionaryReaderQuotas bufferedReadReaderQuotas;
      private volatile SynchronizedPool<RecycledMessageState> recycledStatePool;
      private volatile SynchronizedPool<XmlDictionaryReader> streamedReaderPool;
      private volatile SynchronizedPool<XmlDictionaryWriter> streamedWriterPool;
      private object thisLock;
      private Encoding writeEncoding;
      private bool crossDomainScriptAccessEnabled;
      private byte[] encodedClosingFunctionCall;

      public JsonMessageEncoder(
        Encoding writeEncoding,
        int maxReadPoolSize,
        int maxWritePoolSize,
        XmlDictionaryReaderQuotas quotas,
        bool crossDomainScriptAccessEnabled)
      {
        if (writeEncoding == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (writeEncoding));
        this.thisLock = new object();
        TextEncoderDefaults.ValidateEncoding(writeEncoding);
        this.writeEncoding = writeEncoding;
        this.maxReadPoolSize = maxReadPoolSize;
        this.maxWritePoolSize = maxWritePoolSize;
        this.readerQuotas = new XmlDictionaryReaderQuotas();
        this.onStreamedReaderClose = new OnXmlDictionaryReaderClose(this.ReturnStreamedReader);
        quotas.CopyTo(this.readerQuotas);
        this.bufferedReadReaderQuotas = EncoderHelpers.GetBufferedReadQuotas(this.readerQuotas);
        this.contentType = WebMessageEncoderFactory.GetContentType("application/json", writeEncoding);
        this.crossDomainScriptAccessEnabled = crossDomainScriptAccessEnabled;
        this.encodedClosingFunctionCall = this.writeEncoding.GetBytes(");");
      }

      public override string ContentType => this.contentType;

      public override string MediaType => "application/json";

      public override MessageVersion MessageVersion => MessageVersion.None;

      private SynchronizedPool<RecycledMessageState> RecycledStatePool
      {
        get
        {
          if (this.recycledStatePool == null)
          {
            lock (this.ThisLock)
            {
              if (this.recycledStatePool == null)
                this.recycledStatePool = new SynchronizedPool<RecycledMessageState>(this.maxReadPoolSize);
            }
          }
          return this.recycledStatePool;
        }
      }

      private object ThisLock => this.thisLock;

      public override bool IsContentTypeSupported(string contentType) => contentType != null ? this.IsJsonContentType(contentType) : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (contentType));

      public override Message ReadMessage(
        ArraySegment<byte> buffer,
        BufferManager bufferManager,
        string contentType)
      {
        if (bufferManager == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (bufferManager)));
        if (System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageDecodingStartIsEnabled())
          System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageDecodingStart();
        JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageData bufferedReader = this.TakeBufferedReader();
        bufferedReader.Encoding = TextMessageEncoderFactory.GetEncodingFromContentType(contentType, JsonMessageEncoderFactory.ApplicationJsonContentEncoding);
        bufferedReader.Open(buffer, bufferManager);
        RecycledMessageState recycledMessageState = bufferedReader.TakeMessageState() ?? new RecycledMessageState();
        Message message = (Message) new BufferedMessage((IBufferedMessageData) bufferedReader, recycledMessageState);
        message.Properties.Encoder = (MessageEncoder) this;
        if (System.ServiceModel.Diagnostics.Application.TD.MessageReadByEncoderIsEnabled())
          System.ServiceModel.Diagnostics.Application.TD.MessageReadByEncoder(EventTraceActivityHelper.TryExtractActivity(message, true), buffer.Count, (object) this);
        if (MessageLogger.LogMessagesAtTransportLevel)
          MessageLogger.LogMessage(ref message, MessageLoggingSource.TransportReceive);
        return message;
      }

      public override Message ReadMessage(
        Stream stream,
        int maxSizeOfHeaders,
        string contentType)
      {
        if (stream == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (stream)));
        if (System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageDecodingStartIsEnabled())
          System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageDecodingStart();
        Message message = Message.CreateMessage((XmlReader) this.TakeStreamedReader(stream, TextMessageEncoderFactory.GetEncodingFromContentType(contentType, JsonMessageEncoderFactory.ApplicationJsonContentEncoding)), maxSizeOfHeaders, MessageVersion.None);
        message.Properties.Encoder = (MessageEncoder) this;
        if (System.ServiceModel.Diagnostics.Application.TD.StreamedMessageReadByEncoderIsEnabled())
          System.ServiceModel.Diagnostics.Application.TD.StreamedMessageReadByEncoder(EventTraceActivityHelper.TryExtractActivity(message, true));
        if (MessageLogger.LogMessagesAtTransportLevel)
          MessageLogger.LogMessage(ref message, MessageLoggingSource.TransportReceive);
        return message;
      }

      public override ArraySegment<byte> WriteMessage(
        Message message,
        int maxMessageSize,
        BufferManager bufferManager,
        int messageOffset)
      {
        if (message == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (message)));
        if (bufferManager == null)
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (bufferManager)), message);
        if (maxMessageSize < 0)
        {
          // ISSUE: reference to a compiler-generated method
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (maxMessageSize), (object) maxMessageSize, SR2.GetString(SR2.ValueMustBeNonNegative)), message);
        }
        if (messageOffset < 0 || messageOffset > maxMessageSize)
        {
          // ISSUE: reference to a compiler-generated method
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (messageOffset), (object) messageOffset, SR2.GetString(SR2.JsonValueMustBeInRange, (object) 0, (object) maxMessageSize)), message);
        }
        EventTraceActivity eventTraceActivity = (EventTraceActivity) null;
        if (System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageEncodingStartIsEnabled())
        {
          eventTraceActivity = EventTraceActivityHelper.TryExtractActivity(message);
          System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageEncodingStart(eventTraceActivity);
        }
        this.ThrowIfMismatchedMessageVersion(message);
        message.Properties.Encoder = (MessageEncoder) this;
        JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageWriter bufferedWriter = this.TakeBufferedWriter();
        JavascriptCallbackResponseMessageProperty property;
        if (message.Properties.TryGetValue<JavascriptCallbackResponseMessageProperty>(JavascriptCallbackResponseMessageProperty.Name, out property) && property != null)
        {
          if (!this.crossDomainScriptAccessEnabled)
            throw TraceUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.JavascriptCallbackNotEnabled), message);
          bufferedWriter.SetJavascriptCallbackProperty(property);
        }
        ArraySegment<byte> arraySegment = bufferedWriter.WriteMessage(message, bufferManager, messageOffset, maxMessageSize);
        this.ReturnMessageWriter(bufferedWriter);
        if (System.ServiceModel.Diagnostics.Application.TD.MessageWrittenByEncoderIsEnabled())
          System.ServiceModel.Diagnostics.Application.TD.MessageWrittenByEncoder(eventTraceActivity ?? EventTraceActivityHelper.TryExtractActivity(message), arraySegment.Count, (object) this);
        if (MessageLogger.LogMessagesAtTransportLevel)
        {
          XmlDictionaryReader jsonReader = JsonReaderWriterFactory.CreateJsonReader(arraySegment.Array, arraySegment.Offset, arraySegment.Count, (Encoding) null, XmlDictionaryReaderQuotas.Max, (OnXmlDictionaryReaderClose) null);
          MessageLogger.LogMessage(ref message, (XmlReader) jsonReader, MessageLoggingSource.TransportSend);
        }
        return arraySegment;
      }

      public override void WriteMessage(Message message, Stream stream)
      {
        if (message == null)
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (message)));
        if (stream == null)
          throw TraceUtility.ThrowHelperError((Exception) new ArgumentNullException(nameof (stream)), message);
        this.ThrowIfMismatchedMessageVersion(message);
        EventTraceActivity eventTraceActivity = (EventTraceActivity) null;
        if (System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageEncodingStartIsEnabled())
        {
          eventTraceActivity = EventTraceActivityHelper.TryExtractActivity(message);
          System.ServiceModel.Web.Diagnostics.Application.TD.JsonMessageEncodingStart(eventTraceActivity);
        }
        message.Properties.Encoder = (MessageEncoder) this;
        XmlDictionaryWriter streamedWriter = this.TakeStreamedWriter(stream);
        JavascriptCallbackResponseMessageProperty property;
        if (message.Properties.TryGetValue<JavascriptCallbackResponseMessageProperty>(JavascriptCallbackResponseMessageProperty.Name, out property) && property != null && !string.IsNullOrEmpty(property.CallbackFunctionName))
        {
          if (!this.crossDomainScriptAccessEnabled)
            throw TraceUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.JavascriptCallbackNotEnabled), message);
          byte[] bytes = this.writeEncoding.GetBytes(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}(", new object[1]
          {
            (object) property.CallbackFunctionName
          }));
          stream.Write(bytes, 0, bytes.Length);
        }
        streamedWriter.WriteStartDocument();
        message.WriteMessage(streamedWriter);
        streamedWriter.WriteEndDocument();
        streamedWriter.Flush();
        this.ReturnStreamedWriter((XmlWriter) streamedWriter);
        if (property != null && !string.IsNullOrEmpty(property.CallbackFunctionName))
        {
          if (property.StatusCode.HasValue && property.StatusCode.Value != HttpStatusCode.OK)
          {
            byte[] bytes = this.writeEncoding.GetBytes(string.Format((IFormatProvider) CultureInfo.InvariantCulture, ",{0}", new object[1]
            {
              (object) (int) property.StatusCode.Value
            }));
            stream.Write(bytes, 0, bytes.Length);
          }
          stream.Write(this.encodedClosingFunctionCall, 0, this.encodedClosingFunctionCall.Length);
        }
        if (System.ServiceModel.Diagnostics.Application.TD.StreamedMessageWrittenByEncoderIsEnabled())
          System.ServiceModel.Diagnostics.Application.TD.StreamedMessageWrittenByEncoder(eventTraceActivity ?? EventTraceActivityHelper.TryExtractActivity(message));
        if (!MessageLogger.LogMessagesAtTransportLevel)
          return;
        MessageLogger.LogMessage(ref message, MessageLoggingSource.TransportSend);
      }

      internal override bool IsCharSetSupported(string charSet) => TextEncoderDefaults.TryGetEncoding(charSet, out Encoding _);

      private bool IsJsonContentType(string contentType) => this.IsContentTypeSupported(contentType, "application/json", "application/json") || this.IsContentTypeSupported(contentType, "text/json", "text/json");

      private void ReturnBufferedData(
        JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageData messageData)
      {
        this.bufferedReaderPool.Return(messageData);
      }

      private void ReturnMessageWriter(
        JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageWriter messageWriter)
      {
        this.bufferedWriterPool.Return(messageWriter);
      }

      private void ReturnStreamedReader(XmlDictionaryReader xmlReader) => this.streamedReaderPool.Return(xmlReader);

      private void ReturnStreamedWriter(XmlWriter xmlWriter)
      {
        xmlWriter.Close();
        this.streamedWriterPool.Return((XmlDictionaryWriter) xmlWriter);
      }

      private JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageData TakeBufferedReader()
      {
        if (this.bufferedReaderPool == null)
        {
          lock (this.ThisLock)
          {
            if (this.bufferedReaderPool == null)
              this.bufferedReaderPool = new SynchronizedPool<JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageData>(this.maxReadPoolSize);
          }
        }
        return this.bufferedReaderPool.Take() ?? new JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageData(this, 2);
      }

      private JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageWriter TakeBufferedWriter()
      {
        if (this.bufferedWriterPool == null)
        {
          lock (this.ThisLock)
          {
            if (this.bufferedWriterPool == null)
              this.bufferedWriterPool = new SynchronizedPool<JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageWriter>(this.maxWritePoolSize);
          }
        }
        return this.bufferedWriterPool.Take() ?? new JsonMessageEncoderFactory.JsonMessageEncoder.JsonBufferedMessageWriter(this);
      }

      private XmlDictionaryReader TakeStreamedReader(Stream stream, Encoding enc)
      {
        if (this.streamedReaderPool == null)
        {
          lock (this.ThisLock)
          {
            if (this.streamedReaderPool == null)
              this.streamedReaderPool = new SynchronizedPool<XmlDictionaryReader>(this.maxReadPoolSize);
          }
        }
        XmlDictionaryReader jsonReader = this.streamedReaderPool.Take();
        if (jsonReader == null)
          jsonReader = JsonReaderWriterFactory.CreateJsonReader(stream, enc, this.readerQuotas, this.onStreamedReaderClose);
        else
          ((IXmlJsonReaderInitializer) jsonReader).SetInput(stream, enc, this.readerQuotas, this.onStreamedReaderClose);
        return jsonReader;
      }

      private XmlDictionaryWriter TakeStreamedWriter(Stream stream)
      {
        if (this.streamedWriterPool == null)
        {
          lock (this.ThisLock)
          {
            if (this.streamedWriterPool == null)
              this.streamedWriterPool = new SynchronizedPool<XmlDictionaryWriter>(this.maxWritePoolSize);
          }
        }
        XmlDictionaryWriter jsonWriter = this.streamedWriterPool.Take();
        if (jsonWriter == null)
          jsonWriter = JsonReaderWriterFactory.CreateJsonWriter(stream, this.writeEncoding, false);
        else
          ((IXmlJsonWriterInitializer) jsonWriter).SetOutput(stream, this.writeEncoding, false);
        return jsonWriter;
      }

      private class JsonBufferedMessageData : BufferedMessageData
      {
        private Encoding encoding;
        private JsonMessageEncoderFactory.JsonMessageEncoder messageEncoder;
        private OnXmlDictionaryReaderClose onClose;
        private Pool<XmlDictionaryReader> readerPool;

        public JsonBufferedMessageData(
          JsonMessageEncoderFactory.JsonMessageEncoder messageEncoder,
          int maxReaderPoolSize)
          : base(messageEncoder.RecycledStatePool)
        {
          this.messageEncoder = messageEncoder;
          this.readerPool = new Pool<XmlDictionaryReader>(maxReaderPoolSize);
          this.onClose = new OnXmlDictionaryReaderClose(((BufferedMessageData) this).OnXmlReaderClosed);
        }

        public override MessageEncoder MessageEncoder => (MessageEncoder) this.messageEncoder;

        public override XmlDictionaryReaderQuotas Quotas => this.messageEncoder.bufferedReadReaderQuotas;

        internal Encoding Encoding
        {
          set => this.encoding = value;
        }

        protected override void OnClosed() => this.messageEncoder.ReturnBufferedData(this);

        protected override void ReturnXmlReader(XmlDictionaryReader xmlReader)
        {
          if (xmlReader == null)
            return;
          this.readerPool.Return(xmlReader);
        }

        protected override XmlDictionaryReader TakeXmlReader()
        {
          ArraySegment<byte> buffer = this.Buffer;
          XmlDictionaryReader jsonReader = this.readerPool.Take();
          if (jsonReader == null)
            jsonReader = JsonReaderWriterFactory.CreateJsonReader(buffer.Array, buffer.Offset, buffer.Count, this.encoding, this.Quotas, this.onClose);
          else
            ((IXmlJsonReaderInitializer) jsonReader).SetInput(buffer.Array, buffer.Offset, buffer.Count, this.encoding, this.Quotas, this.onClose);
          return jsonReader;
        }
      }

      private class JsonBufferedMessageWriter : BufferedMessageWriter
      {
        private JsonMessageEncoderFactory.JsonMessageEncoder messageEncoder;
        private XmlDictionaryWriter returnedWriter;
        private JavascriptXmlWriterWrapper javascriptWrapper;

        public JsonBufferedMessageWriter(
          JsonMessageEncoderFactory.JsonMessageEncoder messageEncoder)
        {
          this.messageEncoder = messageEncoder;
        }

        public void SetJavascriptCallbackProperty(
          JavascriptCallbackResponseMessageProperty javascriptResponseMessageProperty)
        {
          if (this.javascriptWrapper == null)
            this.javascriptWrapper = new JavascriptXmlWriterWrapper(this.messageEncoder.writeEncoding)
            {
              JavascriptResponseMessageProperty = javascriptResponseMessageProperty
            };
          else
            this.javascriptWrapper.JavascriptResponseMessageProperty = javascriptResponseMessageProperty;
        }

        protected override void OnWriteEndMessage(XmlDictionaryWriter writer) => writer.WriteEndDocument();

        protected override void OnWriteStartMessage(XmlDictionaryWriter writer) => writer.WriteStartDocument();

        protected override void ReturnXmlWriter(XmlDictionaryWriter writer)
        {
          writer.Close();
          if (writer is JavascriptXmlWriterWrapper && this.javascriptWrapper == null)
          {
            this.javascriptWrapper = (JavascriptXmlWriterWrapper) writer;
            this.javascriptWrapper.JavascriptResponseMessageProperty = (JavascriptCallbackResponseMessageProperty) null;
            writer = this.javascriptWrapper.XmlJsonWriter;
          }
          if (this.returnedWriter != null)
            return;
          this.returnedWriter = writer;
        }

        protected override XmlDictionaryWriter TakeXmlWriter(Stream stream)
        {
          XmlDictionaryWriter writer;
          if (this.returnedWriter == null)
          {
            writer = JsonReaderWriterFactory.CreateJsonWriter(stream, this.messageEncoder.writeEncoding, false);
          }
          else
          {
            writer = this.returnedWriter;
            ((IXmlJsonWriterInitializer) writer).SetOutput(stream, this.messageEncoder.writeEncoding, false);
            this.returnedWriter = (XmlDictionaryWriter) null;
          }
          if (this.javascriptWrapper != null && this.javascriptWrapper.JavascriptResponseMessageProperty != null)
          {
            this.javascriptWrapper.SetOutput(stream, writer);
            writer = (XmlDictionaryWriter) this.javascriptWrapper;
            this.javascriptWrapper = (JavascriptXmlWriterWrapper) null;
          }
          return writer;
        }
      }
    }
  }
}
