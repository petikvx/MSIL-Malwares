// Decompiled with JetBrains decompiler
// Type: Dbasic.KeyWords.CkwLet
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.Other;
using System;

namespace Dbasic.KeyWords
{
  public class CkwLet : CkeyWords
  {
    public CkwLet(CRunner CRunner)
      : base(CRunner)
    {
    }

    public override MethodReturn Method(Place place, ref Locals locals)
    {
      Word word1 = this.CRunner.nextWord(true, ref place);
      string key = word1.Value;
      int keyWord = word1.KeyWord;
      int num1 = 0;
      int index = 0;
      int num2 = 0;
      int num3 = 0;
      Word word2 = this.CRunner.nextWord(true, ref place);
      RunReturn runReturn;
      if (word2.Value == "(")
      {
        if (this.CRunner.nextWord(false, ref place).Value == ")")
        {
          place.WordI += 2;
          if (this.CRunner.nextWord(false, ref place).KeyWord == 131)
          {
            this.CRunner.globals.Arrays[(object) key] = (object) this.HandleArrayKeyword(ref place, ref locals, ((Array) this.CRunner.globals.Arrays[(object) key]).GetType().GetElementType());
          }
          else
          {
            place = this.CRunner.RunCode(place, true, true, ref locals).place;
            this.CRunner.globals.Arrays[(object) key] = this.CRunner.returnObject;
          }
          return new MethodReturn(place);
        }
        ++num1;
        runReturn = this.CRunner.RunCode(place, false, true, ref locals);
        place = runReturn.place;
        index = (int) runReturn.vDouble;
        Word word3 = this.CRunner.nextWord(true, ref place);
        if (word3.Value == ",")
        {
          ++num1;
          runReturn = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn.place;
          num2 = (int) runReturn.vDouble;
          word3 = this.CRunner.nextWord(true, ref place);
          if (word3.Value == ",")
          {
            ++num1;
            runReturn = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn.place;
            num3 = (int) runReturn.vDouble;
            ++place.WordI;
          }
        }
        word2 = this.CRunner.nextWord(true, ref place);
      }
      if (word2.Value != "=")
        this.CRunner.ThrowError("Syntax error.", place.LineI);
      if (num1 > 0)
      {
        Array array = (Array) this.CRunner.globals.Arrays[(object) key];
        Type elementType = array.GetType().GetElementType();
        object obj;
        if ((object) elementType == (object) typeof (string) || (object) elementType == (object) typeof (char) || (object) elementType == (object) typeof (bool))
        {
          runReturn = this.CRunner.RunCode(place, true, true, ref locals);
          obj = Convert.ChangeType((object) runReturn.vString, elementType, (IFormatProvider) CRunner.cul);
        }
        else
        {
          runReturn = this.CRunner.RunCode(place, false, true, ref locals);
          obj = Convert.ChangeType((object) runReturn.vDouble, elementType, (IFormatProvider) CRunner.cul);
        }
        place = runReturn.place;
        switch (num1)
        {
          case 1:
            array.SetValue(obj, index);
            break;
          case 2:
            int[] numArray1 = new int[2]{ index, num2 };
            array.SetValue(obj, numArray1);
            break;
          case 3:
            int[] numArray2 = new int[3]
            {
              index,
              num2,
              num3
            };
            array.SetValue(obj, numArray2);
            break;
        }
      }
      else if ((keyWord & CConstants.Global) == CConstants.Global)
      {
        runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        string vString = runReturn.vString;
        this.CRunner.globals.Reg[(object) key] = (object) vString;
      }
      else
      {
        runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        string vString = runReturn.vString;
        locals.Reg[(object) key] = (object) vString;
      }
      return new MethodReturn(place);
    }

    public Array HandleArrayKeyword(ref Place place, ref Locals locals, Type arrayType)
    {
      ++place.WordI;
      ++place.WordI;
      Place place1 = place;
      if (this.CRunner.nextWord(false, ref place).Value == "(")
      {
        int num1 = 1;
        int num2 = 1;
        int num3 = 1;
        bool flag = true;
        while (num3 > 0)
        {
          string str = this.CRunner.nextWord(true, ref place).Value;
          if (str == "(")
            ++num3;
          else if (str == ")")
            --num3;
          if (str == ",")
          {
            if (num3 == 1)
            {
              ++num2;
              flag = false;
            }
            else if (flag && num3 == 2)
              ++num1;
          }
        }
        place = place1;
        Array instance = Array.CreateInstance(arrayType, new int[2]
        {
          num2,
          num1
        });
        int[] numArray = new int[2];
        --place.WordI;
        for (int index1 = 0; index1 < num2; ++index1)
        {
          numArray[0] = index1;
          place.WordI += 2;
          for (int index2 = 0; index2 < num1; ++index2)
          {
            numArray[1] = index2;
            RunReturn runReturn;
            if ((object) arrayType == (object) typeof (string) || (object) arrayType == (object) typeof (char) || (object) arrayType == (object) typeof (bool))
            {
              runReturn = this.CRunner.RunCode(place, true, true, ref locals);
              instance.SetValue(Convert.ChangeType((object) runReturn.vString, arrayType, (IFormatProvider) CRunner.cul), numArray);
            }
            else
            {
              runReturn = this.CRunner.RunCode(place, false, true, ref locals);
              instance.SetValue(Convert.ChangeType((object) runReturn.vDouble, arrayType, (IFormatProvider) CRunner.cul), numArray);
            }
            place = runReturn.place;
            ++place.WordI;
          }
        }
        ++place.WordI;
        return instance;
      }
      int num4 = 1;
      int num5 = 1;
      while (num5 > 0)
      {
        string str = this.CRunner.nextWord(true, ref place).Value;
        if (str == "(")
          ++num5;
        else if (str == ")")
          --num5;
        else if (str == "," && num5 == 1)
          ++num4;
      }
      place = place1;
      Array instance1 = Array.CreateInstance(arrayType, new int[1]
      {
        num4
      });
      int index = 0;
      do
      {
        RunReturn runReturn;
        if ((object) arrayType == (object) typeof (string) || (object) arrayType == (object) typeof (char) || (object) arrayType == (object) typeof (bool))
        {
          runReturn = this.CRunner.RunCode(place, true, true, ref locals);
          instance1.SetValue(Convert.ChangeType((object) runReturn.vString, arrayType, (IFormatProvider) CRunner.cul), index);
        }
        else
        {
          runReturn = this.CRunner.RunCode(place, false, true, ref locals);
          instance1.SetValue(Convert.ChangeType((object) runReturn.vDouble, arrayType, (IFormatProvider) CRunner.cul), index);
        }
        ++index;
        place = runReturn.place;
      }
      while (this.CRunner.nextWord(true, ref place).Value != ")");
      return instance1;
    }
  }
}
