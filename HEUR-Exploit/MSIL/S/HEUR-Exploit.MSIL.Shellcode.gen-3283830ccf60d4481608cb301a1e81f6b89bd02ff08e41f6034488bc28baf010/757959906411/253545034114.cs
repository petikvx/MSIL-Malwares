// Decompiled with JetBrains decompiler
// Type: 757959906411.253545034114
// Assembly: 087135227926, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed
// MVID: 0DB320EA-9C28-4716-BA63-69641BABDE67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-3283830ccf60d4481608cb301a1e81f6b89bd02ff08e41f6034488bc28baf010.exe

using \u003048520867406;
using \u003172091972983;
using \u003208825527781;
using \u003519320077417;
using \u003545704640419;
using \u003757959906411;
using \u003965968889669;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;

namespace \u003757959906411
{
  public class \u003253545034114 : SerializationBinder, ISerializationBinder
  {
    internal static readonly \u003253545034114 \u003521686053047 = new \u003253545034114();
    private readonly \u003991605103082<\u003934567152648, Type> \u003041785721599;

    public \u003253545034114() => this.\u003041785721599 = new \u003991605103082<\u003934567152648, Type>(new Func<\u003934567152648, Type>(this.\u003030147881130));

    private Type \u003030147881130(\u003934567152648 _param1)
    {
      string partialName = _param1.\u003539241724593;
      string str = _param1.\u003488235307963;
      if (partialName == null)
        return Type.GetType(str);
      Assembly assembly1 = Assembly.LoadWithPartialName(partialName);
      if (assembly1 == (Assembly) null)
      {
        foreach (Assembly assembly2 in AppDomain.CurrentDomain.GetAssemblies())
        {
          if (assembly2.FullName == partialName || assembly2.GetName().Name == partialName)
          {
            assembly1 = assembly2;
            break;
          }
        }
      }
      Type type = !(assembly1 == (Assembly) null) ? assembly1.GetType(str) : throw new \u003479281034910("Could not load assembly '{0}'.".\u003212424921759((IFormatProvider) CultureInfo.InvariantCulture, (object) partialName));
      if (type == (Type) null)
      {
        if (str.IndexOf('`') >= 0)
        {
          try
          {
            type = this.\u003187654983776(str, assembly1);
          }
          catch (Exception ex)
          {
            throw new \u003479281034910("Could not find type '{0}' in assembly '{1}'.".\u003937370926224((IFormatProvider) CultureInfo.InvariantCulture, (object) str, (object) assembly1.FullName), ex);
          }
        }
        if (type == (Type) null)
          throw new \u003479281034910("Could not find type '{0}' in assembly '{1}'.".\u003937370926224((IFormatProvider) CultureInfo.InvariantCulture, (object) str, (object) assembly1.FullName));
      }
      return type;
    }

    private Type \u003187654983776(string _param1, Assembly _param2)
    {
      Type type1 = (Type) null;
      int length = _param1.IndexOf('[');
      if (length >= 0)
      {
        string name = _param1.Substring(0, length);
        Type type2 = _param2.GetType(name);
        if (type2 != (Type) null)
        {
          List<Type> typeList = new List<Type>();
          int num1 = 0;
          int startIndex = 0;
          int num2 = _param1.Length - 1;
          for (int index = length + 1; index < num2; ++index)
          {
            switch (_param1[index])
            {
              case '[':
                if (num1 == 0)
                  startIndex = index + 1;
                ++num1;
                break;
              case ']':
                --num1;
                if (num1 == 0)
                {
                  \u003934567152648 obj = \u003560732527318.\u003698077723905(_param1.Substring(startIndex, index - startIndex));
                  typeList.Add(this.\u003427311569248(obj));
                  break;
                }
                break;
            }
          }
          type1 = type2.MakeGenericType(typeList.ToArray());
        }
      }
      return type1;
    }

    private Type \u003427311569248(\u003934567152648 _param1) => this.\u003041785721599.Get(_param1);

    public virtual Type \u003649415954608(string _param1, string _param2) => this.\u003427311569248(new \u003934567152648(_param1, _param2));

    public virtual void \u003411068135367(Type _param1, out string _param2, out string _param3)
    {
      _param2 = _param1.Assembly.FullName;
      _param3 = _param1.FullName;
    }
  }
}
