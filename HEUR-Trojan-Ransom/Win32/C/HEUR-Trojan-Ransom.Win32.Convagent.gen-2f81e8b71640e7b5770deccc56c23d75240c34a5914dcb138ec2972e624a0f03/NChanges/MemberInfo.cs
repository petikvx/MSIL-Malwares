// Decompiled with JetBrains decompiler
// Type: NChanges.MemberInfo
// Assembly: FUNCD, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 38B3918C-7BBD-4048-BF6D-F5A856A1A18A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.Win32.Convagent.gen-2f81e8b71640e7b5770deccc56c23d75240c34a5914dcb138ec2972e624a0f03.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Xml;

namespace NChanges
{
  [DebuggerDisplay("{Name}")]
  public class MemberInfo
  {
    private List<ParameterInfo> _parameters = new List<ParameterInfo>();
    private List<MemberChangeInfo> _changes = new List<MemberChangeInfo>();

    public string Name { get; set; }

    public MemberKind Kind { get; set; }

    public string Type { get; set; }

    public bool Obsolete { get; set; }

    public string ObsoleteMessage { get; set; }

    public IList<ParameterInfo> Parameters => (IList<ParameterInfo>) this._parameters;

    public ICollection<MemberChangeInfo> Changes => (ICollection<MemberChangeInfo>) this._changes;

    public void ReadMember(System.Reflection.MemberInfo memberInfo)
    {
      this.Name = memberInfo.Name;
      if ((object) (memberInfo as ConstructorInfo) != null)
      {
        this.Kind = MemberKind.Constructor;
        this.Type = "";
        this.ReadParameters((IEnumerable<System.Reflection.ParameterInfo>) ((MethodBase) memberInfo).GetParameters());
      }
      else if ((object) (memberInfo as MethodInfo) != null)
      {
        this.Kind = MemberKind.Method;
        this.Type = ((MethodInfo) memberInfo).ReturnType.FullName;
        this.ReadParameters((IEnumerable<System.Reflection.ParameterInfo>) ((MethodBase) memberInfo).GetParameters());
      }
      else if ((object) (memberInfo as PropertyInfo) != null)
      {
        this.Kind = MemberKind.Property;
        this.Type = ((PropertyInfo) memberInfo).PropertyType.FullName;
      }
      else if ((object) (memberInfo as EventInfo) != null)
      {
        this.Kind = MemberKind.Event;
        this.Type = ((EventInfo) memberInfo).EventHandlerType.FullName;
      }
      else if ((object) (memberInfo as System.Reflection.FieldInfo) != null)
      {
        this.Kind = MemberKind.Field;
        this.Type = ((System.Reflection.FieldInfo) memberInfo).FieldType.FullName;
      }
      ObsoleteAttribute customAttribute = (ObsoleteAttribute) Attribute.GetCustomAttribute(memberInfo, typeof (ObsoleteAttribute));
      if (customAttribute == null)
        return;
      this.Obsolete = true;
      this.ObsoleteMessage = customAttribute.Message;
    }

    private void ReadParameters(IEnumerable<System.Reflection.ParameterInfo> parameters)
    {
      foreach (System.Reflection.ParameterInfo parameter in parameters)
        this.Parameters.Add(new ParameterInfo()
        {
          Name = parameter.Name,
          Type = TypeHelpers.CleanUpGenericTypes(parameter.ParameterType.FullName ?? parameter.ParameterType.Name)
        });
    }

    public void WriteXml(XmlWriter xmlWriter)
    {
      xmlWriter.WriteStartElement("member");
      xmlWriter.WriteAttributeString("name", this.Name);
      xmlWriter.WriteAttributeString("kind", this.Kind.ToString());
      xmlWriter.WriteAttributeString("type", this.Type);
      if (this.Obsolete)
        xmlWriter.WriteAttributeString("obsolete", this.Obsolete.ToString());
      if (this.ObsoleteMessage != null)
        xmlWriter.WriteAttributeString("obsoleteMessage", this.ObsoleteMessage);
      foreach (MemberChangeInfo change in (IEnumerable<MemberChangeInfo>) this.Changes)
        change.WriteXml(xmlWriter);
      foreach (ParameterInfo parameter in (IEnumerable<ParameterInfo>) this.Parameters)
        parameter.WriteXml(xmlWriter);
      xmlWriter.WriteEndElement();
    }

    public void ReadXml(XmlReader xmlReader)
    {
      this.Name = xmlReader.GetAttribute("name");
      this.Kind = (MemberKind) Enum.Parse(typeof (MemberKind), xmlReader.GetAttribute("kind"));
      this.Type = xmlReader.GetAttribute("type");
      this.Obsolete = string.Equals(xmlReader.GetAttribute("obsolete"), "true", StringComparison.OrdinalIgnoreCase);
      this.ObsoleteMessage = xmlReader.GetAttribute("obsoleteMessage");
      if (xmlReader.IsEmptyElement)
        return;
      XmlReader xmlReader1 = xmlReader.ReadSubtree();
      while (xmlReader1.Read())
      {
        if (xmlReader1.NodeType == XmlNodeType.Element)
        {
          if (xmlReader1.Name == "change")
          {
            MemberChangeInfo memberChangeInfo = new MemberChangeInfo();
            memberChangeInfo.ReadXml(xmlReader);
            this.Changes.Add(memberChangeInfo);
          }
          else if (xmlReader1.Name == "param")
          {
            ParameterInfo parameterInfo = new ParameterInfo();
            parameterInfo.ReadXml(xmlReader);
            this.Parameters.Add(parameterInfo);
          }
        }
      }
    }

    public MemberInfo Clone()
    {
      MemberInfo memberInfo = (MemberInfo) this.MemberwiseClone();
      memberInfo._parameters = new List<ParameterInfo>(this.Parameters.Select<ParameterInfo, ParameterInfo>((Func<ParameterInfo, ParameterInfo>) (p => p.Clone())));
      memberInfo._changes = new List<MemberChangeInfo>(this.Changes.Select<MemberChangeInfo, MemberChangeInfo>((Func<MemberChangeInfo, MemberChangeInfo>) (c => c.Clone())));
      return memberInfo;
    }

    public void UpdateParameters(MemberInfo memberInfo) => this._parameters = new List<ParameterInfo>(memberInfo.Parameters.Select<ParameterInfo, ParameterInfo>((Func<ParameterInfo, ParameterInfo>) (p => p.Clone())));
  }
}
