// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.GeoLocationHelper
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using NoiseMe.Drags.App.Models.JSON;
using System;
using System.IO;
using System.Net;

namespace NoiseMe.Drags.App.Models
{
  public static class GeoLocationHelper
  {
    public static readonly string[] ImageList = new string[247]
    {
      "ad",
      "ae",
      "af",
      "ag",
      "ai",
      "al",
      "am",
      "an",
      "ao",
      "ar",
      "as",
      "at",
      "au",
      "aw",
      "ax",
      "az",
      "ba",
      "bb",
      "bd",
      "be",
      "bf",
      "bg",
      "bh",
      "bi",
      "bj",
      "bm",
      "bn",
      "bo",
      "br",
      "bs",
      "bt",
      "bv",
      "bw",
      "by",
      "bz",
      "ca",
      "catalonia",
      "cc",
      "cd",
      "cf",
      "cg",
      "ch",
      "ci",
      "ck",
      "cl",
      "cm",
      "cn",
      "co",
      "cr",
      "cs",
      "cu",
      "cv",
      "cx",
      "cy",
      "cz",
      "de",
      "dj",
      "dk",
      "dm",
      "do",
      "dz",
      "ec",
      "ee",
      "eg",
      "eh",
      "england",
      "er",
      "es",
      "et",
      "europeanunion",
      "fam",
      "fi",
      "fj",
      "fk",
      "fm",
      "fo",
      "fr",
      "ga",
      "gb",
      "gd",
      "ge",
      "gf",
      "gh",
      "gi",
      "gl",
      "gm",
      "gn",
      "gp",
      "gq",
      "gr",
      "gs",
      "gt",
      "gu",
      "gw",
      "gy",
      "hk",
      "hm",
      "hn",
      "hr",
      "ht",
      "hu",
      "id",
      "ie",
      "il",
      "in",
      "io",
      "iq",
      "ir",
      "is",
      "it",
      "jm",
      "jo",
      "jp",
      "ke",
      "kg",
      "kh",
      "ki",
      "km",
      "kn",
      "kp",
      "kr",
      "kw",
      "ky",
      "kz",
      "la",
      "lb",
      "lc",
      "li",
      "lk",
      "lr",
      "ls",
      "lt",
      "lu",
      "lv",
      "ly",
      "ma",
      "mc",
      "md",
      "me",
      "mg",
      "mh",
      "mk",
      "ml",
      "mm",
      "mn",
      "mo",
      "mp",
      "mq",
      "mr",
      "ms",
      "mt",
      "mu",
      "mv",
      "mw",
      "mx",
      "my",
      "mz",
      "na",
      "nc",
      "ne",
      "nf",
      "ng",
      "ni",
      "nl",
      "no",
      "np",
      "nr",
      "nu",
      "nz",
      "om",
      "pa",
      "pe",
      "pf",
      "pg",
      "ph",
      "pk",
      "pl",
      "pm",
      "pn",
      "pr",
      "ps",
      "pt",
      "pw",
      "py",
      "qa",
      "re",
      "ro",
      "rs",
      "ru",
      "rw",
      "sa",
      "sb",
      "sc",
      "scotland",
      "sd",
      "se",
      "sg",
      "sh",
      "si",
      "sj",
      "sk",
      "sl",
      "sm",
      "sn",
      "so",
      "sr",
      "st",
      "sv",
      "sy",
      "sz",
      "tc",
      "td",
      "tf",
      "tg",
      "th",
      "tj",
      "tk",
      "tl",
      "tm",
      "tn",
      "to",
      "tr",
      "tt",
      "tv",
      "tw",
      "tz",
      "ua",
      "ug",
      "um",
      "us",
      "uy",
      "uz",
      "va",
      "vc",
      "ve",
      "vg",
      "vi",
      "vn",
      "vu",
      "wales",
      "wf",
      "ws",
      "ye",
      "yt",
      "za",
      "zm",
      "zw"
    };

    public static int ImageIndex { get; set; }

    public static GeoInformation GeoInfo { get; private set; }

    public static DateTime LastLocated { get; private set; }

    public static bool LocationCompleted { get; private set; }

    static GeoLocationHelper()
    {
      GeoLocationHelper.GeoInfo = new GeoInformation();
      GeoLocationHelper.LastLocated = new DateTime(1, 1, 1, 0, 0, 0, DateTimeKind.Utc);
    }

    public static void Initialize()
    {
      GeoLocationHelper.TryLocate();
      GeoLocationHelper.GeoInfo.Query = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.Query) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.Query;
      GeoLocationHelper.GeoInfo.Country = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.Country) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.Country;
      GeoLocationHelper.GeoInfo.CountryCode = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.CountryCode) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.CountryCode;
      GeoLocationHelper.GeoInfo.Region = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.Region) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.Region;
      GeoLocationHelper.GeoInfo.City = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.City) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.City;
      GeoLocationHelper.GeoInfo.Timezone = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.Timezone) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.Timezone;
      GeoLocationHelper.GeoInfo.Isp = string.IsNullOrEmpty(GeoLocationHelper.GeoInfo.Isp) ? "UNKNOWN" : GeoLocationHelper.GeoInfo.Isp;
    }

    private static void TryLocate()
    {
      GeoLocationHelper.LocationCompleted = false;
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create("http://ip-api.com/json/");
        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 6.3; rv:48.0) Gecko/20100101 Firefox/48.0";
        httpWebRequest.Timeout = 10000;
        using (HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse())
        {
          using (Stream responseStream = response.GetResponseStream())
          {
            using (StreamReader streamReader = new StreamReader(responseStream))
            {
              JsonValue jsonValue = streamReader.ReadToEnd().FromJSON();
              GeoLocationHelper.GeoInfo = new GeoInformation();
              GeoLocationHelper.GeoInfo.City = jsonValue["city"].ToString(false);
              GeoLocationHelper.GeoInfo.Country = jsonValue["country"].ToString(false);
              GeoLocationHelper.GeoInfo.CountryCode = jsonValue["countryCode"].ToString(false);
              GeoLocationHelper.GeoInfo.Isp = jsonValue["isp"].ToString(false);
              GeoLocationHelper.GeoInfo.Query = jsonValue["query"].ToString(false);
              GeoLocationHelper.GeoInfo.Region = jsonValue["region"].ToString(false);
              GeoLocationHelper.GeoInfo.Timezone = jsonValue["timezone"].ToString(false);
            }
          }
        }
        GeoLocationHelper.LastLocated = DateTime.UtcNow;
        GeoLocationHelper.LocationCompleted = true;
      }
      catch
      {
        GeoLocationHelper.TryGetWanIp();
      }
    }

    private static void TryGetWanIp()
    {
      string str = "";
      try
      {
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create("http://api.ipify.org/");
        httpWebRequest.Timeout = 5000;
        using (HttpWebResponse response = (HttpWebResponse) httpWebRequest.GetResponse())
        {
          using (Stream responseStream = response.GetResponseStream())
          {
            using (StreamReader streamReader = new StreamReader(responseStream))
              str = streamReader.ReadToEnd();
          }
        }
      }
      catch
      {
      }
      GeoLocationHelper.GeoInfo.Query = str;
    }
  }
}
