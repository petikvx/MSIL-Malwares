// Decompiled with JetBrains decompiler
// Type: 330500677039.567284788507
// Assembly: 942981470147, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 92EB186D-EC33-4501-B5FF-A65C9233BC32
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Exploit.MSIL.Shellcode.gen-f8bb0d6e016074f6759f74d8950983793a87aec3cd6d56569fa8809d5c55396a.exe

using \u003271601668933;
using \u003312159205690;
using \u003321063983049;
using \u003330500677039;
using \u003479473472496;
using \u003484267871453;
using \u003703682515837;
using \u003785947670411;
using \u003788284974361;
using \u003840130082634;
using \u003871896905930;
using \u003942981470147.Core;
using \u003966871253857;
using Microsoft.PythonTools;
using Microsoft.PythonTools.Infrastructure;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Adapter;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using System.Xml.XPath;

namespace \u003330500677039
{
  [ExtensionUri("executor://PythonPyTestExecutor/v1")]
  public class \u003567284788507 : ITestExecutor
  {
    private static readonly Guid \u003351175789898 = new Guid("{FEB76325-D127-4E02-B59D-B16D93D46CF5}");
    private static readonly Guid \u003945898782924 = new Guid("EC1375B7-E2CE-43E8-BF75-DC638DE1F1F9");
    private static readonly Guid \u003172062091903 = new Guid("3B476D35-A401-11D2-AAD4-00C04F990171");
    private static readonly string \u003712346913870 = PythonToolsInstallPath.GetFile("visualstudio_py_testlauncher.py", (Assembly) null);
    private readonly ManualResetEvent \u003595338260599 = new ManualResetEvent(false);
    private readonly \u003803592471815 \u003656610836219;

    public \u003567284788507() => this.\u003656610836219 = \u003803592471815.\u003269632878397("_PTVS_PID");

    public void \u003446390944855() => this.\u003595338260599.Set();

    public void \u003665035320111(
      IEnumerable<string> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      // ISSUE: variable of a compiler-generated type
      \u003567284788507.\u003967201168965 obj1 = (\u003567284788507.\u003967201168965) new \u003934650028661();
      if (_param1 == null)
        throw new ArgumentNullException("sources");
      if (_param2 == null)
        throw new ArgumentNullException("runContext");
      if (_param3 == null)
        throw new ArgumentNullException("frameworkHandle");
      this.\u003595338260599.Reset();
      // ISSUE: reference to a compiler-generated field
      ((\u003732268745406) obj1).\u003372324350328 = \u003388106528341.\u003392492734249(((IDiscoveryContext) _param2).RunSettings, \u003196266377257.Pytest);
      \u003383960945124 obj2 = new \u003383960945124();
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      foreach (IGrouping<\u003064588995134, string> grouping in _param1.GroupBy<string, \u003064588995134>(obj1.\u003472112585648 ?? (obj1.\u003472112585648 = new Func<string, \u003064588995134>(obj1.\u003153148693988))))
      {
        \u003064588995134 key = grouping.Key;
        try
        {
          new \u003145675680789().\u003882301074999((IEnumerable<string>) grouping, key, (IMessageLogger) _param3, (ITestCaseDiscoverySink) obj2);
        }
        catch (Exception ex)
        {
          ((IMessageLogger) _param3).SendMessage((TestMessageLevel) 2, ex.Message);
        }
        if (this.\u003595338260599.WaitOne(0))
          return;
      }
      this.\u003129521833447((IEnumerable<TestCase>) obj2.\u003107848819816, _param2, _param3);
    }

    public void \u003710380042725(
      IEnumerable<TestCase> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      if (_param1 == null)
        throw new ArgumentNullException("tests");
      if (_param2 == null)
        throw new ArgumentNullException("runContext");
      if (_param3 == null)
        throw new ArgumentNullException("frameworkHandle");
      this.\u003129521833447(_param1, _param2, _param3);
      this.\u003595338260599.Reset();
    }

    private void \u003129521833447(
      IEnumerable<TestCase> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003567284788507.\u003650502175766 obj = (\u003567284788507.\u003650502175766) new \u003567284788507.\u003967201168965();
      // ISSUE: reference to a compiler-generated field
      ((\u003567284788507.\u003967201168965) obj).\u003901861706130 = \u003388106528341.\u003392492734249(((IDiscoveryContext) _param2).RunSettings, \u003196266377257.Pytest);
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated field
      // ISSUE: reference to a compiler-generated method
      foreach (IGrouping<\u003064588995134, TestCase> grouping in _param1.GroupBy<TestCase, \u003064588995134>(obj.\u003421463467136 ?? (obj.\u003421463467136 = new Func<TestCase, \u003064588995134>(obj.\u003589689505581))))
      {
        \u003064588995134 key = grouping.Key;
        if (this.\u003595338260599.WaitOne(0))
          break;
        this.\u003895560914671(grouping, _param2, _param3);
      }
    }

    private void \u003895560914671(
      IGrouping<\u003064588995134, TestCase> _param1,
      IRunContext _param2,
      IFrameworkHandle _param3)
    {
      \u003064588995134 key = _param1.Key;
      if (key == null || key.\u003487150642898 != \u003196266377257.Pytest)
        return;
      \u003017821964017 config = new \u003017821964017(_param2);
      using (\u003198191743587 obj = new \u003198191743587((ITestConfiguration) config, key, _param3, _param2))
        obj.\u003282770258166((IEnumerable<TestCase>) _param1, this.\u003595338260599);
      foreach (TestResult testResult in this.\u003124693686181(config.\u003409779200828, (IEnumerable<TestCase>) _param1, _param3))
      {
        if (this.\u003595338260599.WaitOne(0))
          break;
        ((ITestExecutionRecorder) _param3).RecordResult(testResult);
      }
    }

    private IEnumerable<TestResult> \u003124693686181(
      string _param1_1,
      IEnumerable<TestCase> _param2,
      IFrameworkHandle _param3)
    {
      Dictionary<string, TestResult> dictionary = _param2.Select<TestCase, TestResult>((Func<TestCase, TestResult>) (_param1_2 => new TestResult(_param1_2)
      {
        Outcome = (TestOutcome) 3
      })).ToDictionary<TestResult, string, TestResult>((Func<TestResult, string>) (_param1_3 => ((TestObject) _param1_3.TestCase).GetPropertyValue<string>(\u003492676733657.\u003490125617522, string.Empty)), (Func<TestResult, TestResult>) (_param1_4 => _param1_4));
      if (File.Exists(_param1_1))
      {
        try
        {
          this.\u003574972020368(\u003049454438711.\u003923081814115(_param1_1), dictionary, _param3);
        }
        catch (Exception ex)
        {
          ((IMessageLogger) _param3).SendMessage((TestMessageLevel) 2, ex.Message);
        }
      }
      else
        ((IMessageLogger) _param3).SendMessage((TestMessageLevel) 2, StringExtensions.FormatUI(Strings.PytestResultsXmlNotFound, (object) _param1_1));
      return (IEnumerable<TestResult>) dictionary.Values;
    }

    private void \u003574972020368(
      XPathDocument _param1,
      Dictionary<string, TestResult> _param2,
      IFrameworkHandle _param3)
    {
      foreach (XPathNavigator selectDescendant in _param1.CreateNavigator().SelectDescendants("testcase", "", false))
      {
        if (this.\u003595338260599.WaitOne(0))
          break;
        try
        {
          string key = \u003049454438711.\u003272300324837(selectDescendant);
          TestResult testResult;
          if (key != null && _param2.TryGetValue(key, out testResult))
            \u003049454438711.\u003712214871668(testResult, selectDescendant);
          else
            ((IMessageLogger) _param3).SendMessage((TestMessageLevel) 2, StringExtensions.FormatUI(Strings.ErrorTestCaseNotFound, (object) selectDescendant.OuterXml));
        }
        catch (Exception ex)
        {
          ((IMessageLogger) _param3).SendMessage((TestMessageLevel) 2, ex.Message);
        }
      }
    }
  }
}
