// Decompiled with JetBrains decompiler
// Type: ‫‬‍‪‪‭‪⁬‮⁯‌‮‪⁯‌⁫‭‌‫⁬‏‪‪​⁬⁯⁯‬‬‏‪⁪​‪​⁮‎⁬‭‫‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;
using System.Threading;

public class \u202B‬‍‪‪‭‪⁬‮⁯‌‮‪⁯‌⁫‭‌‫⁬‏‪‪​⁬⁯⁯‬‬‏‪⁪​‪​⁮‎⁬‭‫‮
{
  public byte[] \u202E‬‪⁯‭⁯‎‮‍‎‫‎‏‮​⁫⁪‎‍⁭‬‎‫​‌‮‭⁯‭‭⁮‮‬​⁪‪‌⁪⁬‮‮(int _param1, bool _param2) => new \u202B‬‍‪‪‭‪⁬‮⁯‌‮‪⁯‌⁫‭‌‫⁬‏‪‪​⁬⁯⁯‬‬‏‪⁪​‪​⁮‎⁬‭‫‮.\u206D⁮‍⁭‍​‪‭‮‬‫‬⁮⁬⁪⁭⁮⁬‌‍‫‏⁪⁯‪​​‪‬‎⁬‎⁬⁫‎⁬‬⁭⁭⁮‮().\u202E‬‪⁯‭⁯‎‮‍‎‫‎‏‮​⁫⁪‎‍⁭‬‎‫​‌‮‭⁯‭‭⁮‮‬​⁪‪‌⁪⁬‮‮(_param1, _param2);

  private class \u206D⁮‍⁭‍​‪‭‮‬‫‬⁮⁬⁪⁭⁮⁬‌‍‫‏⁪⁯‪​​‪‬‎⁬‎⁬⁫‎⁬‬⁭⁭⁮‮
  {
    private volatile int \u202A‎‍‫⁮‮‏‍‏‫‌‬‪‪‏⁯‭⁯⁮‪‭⁭​⁯‭‮‫‪⁫⁮⁪⁬‫‎‪‎⁮‏‬‪‮;
    private volatile bool \u206A⁯‌‬‪⁯⁪‏‫‭‭⁯⁭‍‌⁭‍‍‏⁮‏⁪‏​‎‪‫⁬⁫​⁫‭⁫⁪⁮⁭‭‎⁬‮;

    private void \u200C​‫‍⁮⁭⁬‫⁭⁯‮‏​⁬⁫‎⁬⁭‏‮⁭‮‭⁫⁮‏‍⁪‏‭‮‪‮⁪⁮‍‭‪‫⁪‮(object _param1)
    {
      while (!this.\u206A⁯‌‬‪⁯⁪‏‫‭‭⁯⁭‍‌⁭‍‍‏⁮‏⁪‏​‎‪‫⁬⁫​⁫‭⁫⁪⁮⁭‭‎⁬‮)
        ++this.\u202A‎‍‫⁮‮‏‍‏‫‌‬‪‪‏⁯‭⁯⁮‪‭⁭​⁯‭‮‫‪⁫⁮⁪⁬‫‎‪‎⁮‏‬‪‮;
    }

    public byte[] \u202E‬‪⁯‭⁯‎‮‍‎‫‎‏‮​⁫⁪‎‍⁭‬‎‫​‌‮‭⁯‭‭⁮‮‬​⁪‪‌⁪⁬‮‮(int _param1, bool _param2)
    {
      ThreadPriority priority = Thread.CurrentThread.Priority;
      try
      {
        Thread.CurrentThread.Priority = ThreadPriority.Normal;
        return this.\u200F‮‫‍‍‪‪⁭‍​⁭‪​‎‫‏‏‎‮‪‪⁯‪‫‫‬⁭‫‍⁪​‬‍⁭‬‏⁯‍‪‎‮(_param1, _param2);
      }
      finally
      {
        Thread.CurrentThread.Priority = priority;
      }
    }

    private byte[] \u200F‮‫‍‍‪‪⁭‍​⁭‪​‎‫‏‏‎‮‪‪⁯‪‫‫‬⁭‫‍⁪​‬‍⁭‬‏⁯‍‪‎‮(int _param1, bool _param2)
    {
      this.\u202A‎‍‫⁮‮‏‍‏‫‌‬‪‪‏⁯‭⁯⁮‪‭⁭​⁯‭‮‫‪⁫⁮⁪⁬‫‎‪‎⁮‏‬‪‮ = 0;
      this.\u206A⁯‌‬‪⁯⁪‏‫‭‭⁯⁭‍‌⁭‍‍‏⁮‏⁪‏​‎‪‫⁬⁫​⁫‭⁫⁪⁮⁭‭‎⁬‮ = false;
      byte[] numArray = new byte[_param1];
      int num1 = 0;
      int num2 = _param2 ? _param1 : _param1 * 8;
      ThreadPool.QueueUserWorkItem(new WaitCallback(this.\u200C​‫‍⁮⁭⁬‫⁭⁯‮‏​⁬⁫‎⁬⁭‏‮⁭‮‭⁫⁮‏‍⁪‏‭‮‪‮⁪⁮‍‭‪‫⁪‮));
      for (int index1 = 0; index1 < num2; ++index1)
      {
        while (this.\u202A‎‍‫⁮‮‏‍‏‫‌‬‪‪‏⁯‭⁯⁮‪‭⁭​⁯‭‮‫‪⁫⁮⁪⁬‫‎‪‎⁮‏‬‪‮ == num1)
        {
          try
          {
            Thread.Sleep(1);
          }
          catch (Exception ex)
          {
          }
        }
        num1 = this.\u202A‎‍‫⁮‮‏‍‏‫‌‬‪‪‏⁯‭⁯⁮‪‭⁭​⁯‭‮‫‪⁫⁮⁪⁬‫‎‪‎⁮‏‬‪‮;
        if (_param2)
        {
          numArray[index1] = (byte) num1;
        }
        else
        {
          int index2 = index1 / 8;
          numArray[index2] = (byte) ((int) numArray[index2] << 1 | num1 & 1);
        }
      }
      this.\u206A⁯‌‬‪⁯⁪‏‫‭‭⁯⁭‍‌⁭‍‍‏⁮‏⁪‏​‎‪‫⁬⁫​⁫‭⁫⁪⁮⁭‭‎⁬‮ = true;
      return numArray;
    }
  }
}
