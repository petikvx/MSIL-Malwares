// Decompiled with JetBrains decompiler
// Type: DataAccessFramework.Querying.IsNullClause
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System.Runtime.InteropServices;
using System.Text;

namespace DataAccessFramework.Querying
{
  public class IsNullClause : WherePart
  {
    private readonly FieldReference _field;

    public IsNullClause(FieldReference field)
    {
label_1:
      int num1 = -757738843;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1863166062)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -897192390 ^ -445764745;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      this._field = field;
    }

    internal override void BuildSql(BuildSqlContext context)
    {
      this._field.BuildSql(context);
label_1:
      int num1 = 2036046168;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1297481429)) % 4U)
        {
          case 0:
            IsNullClause.\u200E⁪⁪⁯‏⁯⁬‭‌⁬‎‭⁯‎⁫​‏‮⁫⁪⁯⁫‫‭⁬⁬⁫⁫‌‍‎​‏⁬⁮⁯‭‪​‫‮(context.Builder, \u003CModule\u003E.\u200C‍⁯​‫⁪‏⁭‫⁪‫‮‭‫‮‌‮⁮‭​‎⁬‬‌⁫‭‫‏⁮‍⁮‍‪‏⁬⁮‎‮⁮⁬‮<string>(537767325U));
            num1 = (int) num2 * -1590601040 ^ -1451470681;
            continue;
          case 1:
            num1 = (int) num2 * -483667563 ^ 1381763544;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static StringBuilder \u200E⁪⁪⁯‏⁯⁬‭‌⁬‎‭⁯‎⁫​‏‮⁫⁪⁯⁫‫‭⁬⁬⁫⁫‌‍‎​‏⁬⁮⁯‭‪​‫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.Append(obj1);
    }
  }
}
