// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: gorzl, Version=4.1.1.3, Culture=neutral, PublicKeyToken=null
// MVID: CF0AFC9B-4D32-4624-9DAC-B07A0673C34F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\Trojan.MSIL.Crypt.hzmc-2575c468d59f53fac40b730a8a53d9ed5c76b3b85faa2d43ab7d352e9b57d61c.exe

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;

internal class \u003CModule\u003E
{
  private static \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮ \u206B⁬⁮‌‏​⁭‮‫‪‬‌‫‬⁬⁪‌‍⁯⁯⁮⁯‏⁯⁮⁬⁮‮‏‮‮‏‮⁯⁯​​‌⁬‫‮;

  static \u003CModule\u003E() => \u003CModule\u003E.\u202B⁯‬‪‪⁯⁬‍‫⁭‮‮‫‭⁫‬‭‏‬​‏‍​​‍⁮‍⁮‌‌⁫‪‮⁬⁬‏‮⁪‫‪‮();

  private static void \u202B⁯‬‪‪⁯⁬‍‫⁭‮‮‫‭⁫‬‭‏‬​‏‍​​‍⁮‍⁮‌‌⁫‪‮⁬⁬‏‮⁪‫‪‮()
  {
    string str = "COR";
    if (\u003CModule\u003E.\u206D⁭​⁫​⁫‬‫⁬⁭‎‎⁯‪‫‭⁭‮⁪‫‎‮‎‍⁯‏⁫‌⁮⁬‬‭⁫‎⁫⁫‎‬⁫‌‮(\u003CModule\u003E.\u206B‪‎‎‫‮‮‍‏⁮‫⁬⁬⁬⁫⁯‫⁫⁬‌⁮⁪‬‪⁪‪⁭‎⁯⁬‎‭‎‮‍⁭‏⁭⁯‌‮(str, "_PROFILER")) != null || \u003CModule\u003E.\u206F​⁬‎⁯‮‬‍‎​⁬‌‬⁯‍‏‬‪‮​‏‭⁭‭⁬‍⁬‌‪‏‭‎⁯⁮⁮⁯‏⁯⁭⁫‮(\u003CModule\u003E.\u200C​‎‬‬⁫⁪⁭⁬​‫‭‏‍‬‎⁮⁯‌‬⁭‮⁮‍‫⁫⁬⁭⁬‌⁭‬⁭‫‏‫⁬‭⁮‮(str, "_ENABLE_PROFILING")) != null)
      \u003CModule\u003E.\u200D‭‌⁮​‮⁮‬⁮⁫⁮‭‬⁯‎‭‬‍‎⁭‫⁭‭⁭‏⁫​‍‮⁪‍‭‮⁮‎⁬⁭‪⁮‭‮((string) null);
    Process process = \u003CModule\u003E.\u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮();
    if (process != null && \u003CModule\u003E.\u202A⁫‏‫‪‬⁯⁪⁬‍⁮‮‪‫⁫⁮⁯⁭⁮‬⁭‎‭‪​‪⁪‮⁬‍‌⁪⁯⁬‪‮⁮⁭‭⁯‮(\u003CModule\u003E.\u202C​‮⁫⁮‬‎‎⁫⁮‌⁭‍⁭‏‏​‭‪⁫‪‮⁭‌⁪⁪⁯⁪‪⁬⁭‏‫‪​​‬⁫‪⁯‮(\u003CModule\u003E.\u200D‭‭‏‪‬‭⁯​​‍‬‮‮​‪⁭⁪‮‮‎‫‫⁬‌⁭‮‬⁭‍‭‫‎⁬‮⁭‬‫⁪⁯‮(process)), "dnspy"))
      \u003CModule\u003E.\u206F⁮​‭‬​⁫⁫‫‭‪⁬⁫‬‍‍‮‮⁫⁭⁫‏⁫⁬‎⁯⁮‫⁭⁯‎⁫​⁫⁮​‭‬⁯‪‮("");
    Thread thread = \u003CModule\u003E.\u206F⁫⁮‪‎‍⁭⁫⁫⁫⁬‎‭⁫‎⁪⁬‌‏‍‌⁬⁫‫⁮⁬⁬⁫⁭‎⁯⁪‮‮‏⁮‭‮⁬⁭‮(new ParameterizedThreadStart(\u003CModule\u003E.\u200D‏⁪‍‪‏⁯‪‭‪⁪⁯‍⁪‪‌⁫​⁭‪⁮⁪‎⁮‮⁬‭‪⁮‍‏⁪‎⁭‫‮‮⁪‮‫‮));
    \u003CModule\u003E.\u202E⁬⁬‌⁬⁪‏​‪‮⁭⁫⁯⁫‮⁪‏⁯​⁪‎⁫⁫‮‏‍‪‭‏‮‬⁭​‭⁮‍‬⁯⁫⁮‮(thread, true);
    \u003CModule\u003E.\u200F‏⁪⁯​⁪‬⁬‪‪‎‌⁯‌‮‬⁪⁪‍​⁫‏‎‫‭⁪‮‏​‌‮⁯‭⁬‮‭‌⁪​‍‮(thread, (object) null);
  }

  internal static Process \u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮() => \u003CModule\u003E.\u206B⁬⁮‌‏​⁭‮‫‪‬‌‫‬⁬⁪‌‍⁯⁯⁮⁯‏⁯⁮⁬⁮‮‏‮‮‏‮⁯⁯​​‌⁬‫‮.\u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮();

  [DllImport("kernel32.dll", EntryPoint = "CloseHandle")]
  private static extern bool \u202D‮⁯‎⁮⁭⁫‌‭⁭⁫‌⁪⁬‏⁬⁯​‏‭‎⁬‎⁪⁯⁬‬⁫‭‏‎⁫‎⁮‭‏‭‪⁭‭‮([In] IntPtr obj0);

  [DllImport("kernel32.dll", EntryPoint = "IsDebuggerPresent")]
  private static extern bool \u202B‭⁮⁫⁬⁭⁭‏⁪‬‪⁭⁮⁪‬⁮‎‌‬⁬‪⁮‬‪‭‫⁬‮‌‮⁫‌‫‭‮‌⁭‍‌⁬‮();

  [DllImport("kernel32.dll", EntryPoint = "OutputDebugString", CharSet = CharSet.Auto)]
  private static extern int \u202A⁭​⁪⁫‫‎⁪‭‎⁪⁭⁬‭‫‮⁯‭⁯‪⁬⁬⁪⁪‬⁯​‌‪‌⁪​⁪‌⁬‮⁯⁪‎⁯‮([In] string obj0);

  private static void \u200D‏⁪‍‪‏⁯‪‭‪⁪⁯‍⁪‪‌⁫​⁭‪⁮⁪‎⁮‮⁬‭‪⁮‍‏⁪‎⁭‫‮‮⁪‮‫‮([In] object obj0)
  {
    if (!(obj0 is Thread thread))
    {
      thread = \u003CModule\u003E.\u206D⁭⁬‎‪‏⁫⁫‌⁫‎‌⁬‍‏‭‬⁬‮⁭‍‭‪‌‫‌‬⁭‏‌⁫‬‪⁯‭⁬⁭‎⁯‪‮(new ParameterizedThreadStart(\u003CModule\u003E.\u200D‏⁪‍‪‏⁯‪‭‪⁪⁯‍⁪‪‌⁫​⁭‪⁮⁪‎⁮‮⁬‭‪⁮‍‏⁪‎⁭‫‮‮⁪‮‫‮));
      \u003CModule\u003E.\u202D⁭‮‌‭‮⁮‪‎⁬​⁫⁪‌‍⁬‮‫‏⁯‍‪⁯‪‎‍‌‬​‎⁯⁫‭⁫​‮‎​‬‬‮(thread, true);
      \u003CModule\u003E.\u206D‮‭‍⁪‮⁫‪‫‭‌‪⁯‮‬​‭​‭‮‬⁬‍‪‮‬⁮‪‬⁬⁭⁪‫‬‮‏⁭‫⁬‭‮(thread, (object) \u003CModule\u003E.\u200E‏‏‏​‬‮‪‭⁫⁯‍‫‎‏⁫⁮⁯‮‮⁯‭‍⁮⁫‭‏​‫⁮‬‏‮‫⁬⁫‏⁪‭‎‮());
      \u003CModule\u003E.\u202E‪‍⁮⁮⁫‬⁯‎‪‍‮⁯‮⁯⁬‬‪⁫‎⁭‬⁭‮‪‍‌‬‬⁮‌‮‍‫‫‎⁯‏⁪⁫‮(500);
    }
    while (true)
    {
      if (\u003CModule\u003E.\u200B‭⁪‫‭​⁫‫​‮‬‍‍‭⁫‬‮‎‪‫⁬⁫‫‎⁬‏‮⁫‬‭‫‏⁭‬⁯‏‮‪‍⁬‮() || \u003CModule\u003E.\u200D‏⁯‬‍⁮‏‌⁯⁮‭‭‍⁮⁪⁪⁭⁮⁮‏‭‫‍‏​⁫‍‭⁫​‬‌‪​‫‍‭⁪​⁬‮())
        \u003CModule\u003E.\u202E⁯⁯⁪‭‮⁭‎⁬​‪⁭‪⁬⁬‪‮‭⁪‬⁮‬⁯⁯‮‫‮⁪‪⁮‌‮‌⁪‎⁪‮‭‫⁬‮("");
      if (\u003CModule\u003E.\u202B‭⁮⁫⁬⁭⁭‏⁪‬‪⁭⁮⁪‬⁮‎‌‬⁬‪⁮‬‪‭‫⁬‮‌‮⁫‌‫‭‮‌⁭‍‌⁬‮())
        \u003CModule\u003E.\u202E‫‬‪⁭‬⁬⁮⁪⁭‬‭‏⁮‮‍​‬‫​‬‮‌​‬‮‮⁫‮‏⁪⁮‮‏‪⁬‌‮‪‮("");
      Process process = \u003CModule\u003E.\u200E⁮‬‮⁬⁮‎‎⁭‭‫‫‬‮‫‪⁫‭‌⁬‌‮‫‪‏‫‌⁫⁯‭‌‬⁪​⁭‏⁪‎⁪‌‮();
      if (\u003CModule\u003E.\u202B‪‪‌‫‎⁭⁮⁫‮‮‏‮​‬⁪⁪‍‎⁬‌⁬‮⁪‏‏⁭⁫‌⁭‍‫⁮​⁯‍⁭⁯‭⁬‮(process) == IntPtr.Zero)
        \u003CModule\u003E.\u202B⁭⁯‬⁮⁮⁯⁫⁪‏​‎‪⁮‫⁮⁬‌⁮‌‎⁮​⁯⁮⁯‏‭‮⁪‫‭⁯‌⁮⁮⁫⁪​⁫‮("");
      \u003CModule\u003E.\u200E‮⁪⁮⁮‫⁪‪‬⁮‏⁪​‮‌⁫‭‎‌⁫⁫⁮⁬‪​‌​‭⁬⁫‪⁫⁭‌‬⁫‏⁮​‬‮(process);
      if (\u003CModule\u003E.\u202A⁭​⁪⁫‫‎⁪‭‎⁪⁭⁬‭‫‮⁯‭⁯‪⁬⁬⁪⁪‬⁯​‌‪‌⁪​⁪‌⁬‮⁯⁪‎⁯‮("") > IntPtr.Size)
        \u003CModule\u003E.\u206B⁯⁭⁬‍‬⁭‍⁫‮‍‫​‏⁫‪‏‌⁮⁭⁭‍‮‮‏⁮⁪‫‬‎‬‍‍​⁬⁯⁯‌‌⁪‮("");
      try
      {
        \u003CModule\u003E.\u202D‮⁯‎⁮⁭⁫‌‭⁭⁫‌⁪⁬‏⁬⁯​‏‭‎⁬‎⁪⁯⁬‬⁫‭‏‎⁫‎⁮‭‏‭‪⁭‭‮(IntPtr.Zero);
      }
      catch
      {
        \u003CModule\u003E.\u200C‎⁮⁯‌‪⁭‎⁬‍⁭⁯⁯​‬‎​⁮⁪‮‏⁪‏⁮‌⁯​⁫⁫‏‮​⁭‎‭‏⁯​‭‬‮("");
      }
      if (!\u003CModule\u003E.\u206D​⁯⁭⁫⁫‬‬⁫‪⁫‭‪​‬‮‪⁪‭⁯‮⁭​‪⁯‭‫‬‪‬‌⁭‎‪‍‍‍‍⁬⁯‮(thread))
        \u003CModule\u003E.\u206C⁭⁪‮⁫​‎‫‎‭‎‮‪⁭‫‫‬‌‭‌‫‌‭‮⁭⁬‍⁫‮⁭‌⁯‪⁯⁬‫‌‫‮⁮‮("");
      \u003CModule\u003E.\u200E⁬​‮‌‪⁫⁪​⁯‬⁮‮‮‬‫‭‍⁮⁫‪⁮⁯‏‫⁭‌⁯‏‎‮⁮⁯‪⁬‭‌⁪‌‎‮(1000);
    }
  }

  static string \u206B‪‎‎‫‮‮‍‏⁮‫⁬⁬⁬⁫⁯‫⁫⁬‌⁮⁪‬‪⁪‪⁭‎⁯⁬‎‭‎‮‍⁭‏⁭⁯‌‮([In] string obj0, [In] string obj1) => obj0 + obj1;

  static string \u206D⁭​⁫​⁫‬‫⁬⁭‎‎⁯‪‫‭⁭‮⁪‫‎‮‎‍⁯‏⁫‌⁮⁬‬‭⁫‎⁫⁫‎‬⁫‌‮([In] string obj0) => Environment.GetEnvironmentVariable(obj0);

  static string \u200C​‎‬‬⁫⁪⁭⁬​‫‭‏‍‬‎⁮⁯‌‬⁭‮⁮‍‫⁫⁬⁭⁬‌⁭‬⁭‫‏‫⁬‭⁮‮([In] string obj0, [In] string obj1) => obj0 + obj1;

  static string \u206F​⁬‎⁯‮‬‍‎​⁬‌‬⁯‍‏‬‪‮​‏‭⁭‭⁬‍⁬‌‪‏‭‎⁯⁮⁮⁯‏⁯⁭⁫‮([In] string obj0) => Environment.GetEnvironmentVariable(obj0);

  static void \u200D‭‌⁮​‮⁮‬⁮⁫⁮‭‬⁯‎‭‬‍‎⁭‫⁭‭⁭‏⁫​‍‮⁪‍‭‮⁮‎⁬⁭‪⁮‭‮([In] string obj0) => Environment.FailFast(obj0);

  static string \u200D‭‭‏‪‬‭⁯​​‍‬‮‮​‪⁭⁪‮‮‎‫‫⁬‌⁭‮‬⁭‍‭‫‎⁬‮⁭‬‫⁪⁯‮([In] Process obj0) => obj0.ProcessName;

  static string \u202C​‮⁫⁮‬‎‎⁫⁮‌⁭‍⁭‏‏​‭‪⁫‪‮⁭‌⁪⁪⁯⁪‪⁬⁭‏‫‪​​‬⁫‪⁯‮([In] string obj0) => obj0.ToLower();

  static bool \u202A⁫‏‫‪‬⁯⁪⁬‍⁮‮‪‫⁫⁮⁯⁭⁮‬⁭‎‭‪​‪⁪‮⁬‍‌⁪⁯⁬‪‮⁮⁭‭⁯‮([In] string obj0, [In] string obj1) => obj0.Contains(obj1);

  static void \u206F⁮​‭‬​⁫⁫‫‭‪⁬⁫‬‍‍‮‮⁫⁭⁫‏⁫⁬‎⁯⁮‫⁭⁯‎⁫​⁫⁮​‭‬⁯‪‮([In] string obj0) => Environment.FailFast(obj0);

  static Thread \u206F⁫⁮‪‎‍⁭⁫⁫⁫⁬‎‭⁫‎⁪⁬‌‏‍‌⁬⁫‫⁮⁬⁬⁫⁭‎⁯⁪‮‮‏⁮‭‮⁬⁭‮([In] ParameterizedThreadStart obj0) => new Thread(obj0);

  static void \u202E⁬⁬‌⁬⁪‏​‪‮⁭⁫⁯⁫‮⁪‏⁯​⁪‎⁫⁫‮‏‍‪‭‏‮‬⁭​‭⁮‍‬⁯⁫⁮‮([In] Thread obj0, [In] bool obj1) => obj0.IsBackground = obj1;

  static void \u200F‏⁪⁯​⁪‬⁬‪‪‎‌⁯‌‮‬⁪⁪‍​⁫‏‎‫‭⁪‮‏​‌‮⁯‭⁬‮‭‌⁪​‍‮([In] Thread obj0, [In] object obj1) => obj0.Start(obj1);

  static Thread \u206D⁭⁬‎‪‏⁫⁫‌⁫‎‌⁬‍‏‭‬⁬‮⁭‍‭‪‌‫‌‬⁭‏‌⁫‬‪⁯‭⁬⁭‎⁯‪‮([In] ParameterizedThreadStart obj0) => new Thread(obj0);

  static void \u202D⁭‮‌‭‮⁮‪‎⁬​⁫⁪‌‍⁬‮‫‏⁯‍‪⁯‪‎‍‌‬​‎⁯⁫‭⁫​‮‎​‬‬‮([In] Thread obj0, [In] bool obj1) => obj0.IsBackground = obj1;

  static Thread \u200E‏‏‏​‬‮‪‭⁫⁯‍‫‎‏⁫⁮⁯‮‮⁯‭‍⁮⁫‭‏​‫⁮‬‏‮‫⁬⁫‏⁪‭‎‮() => Thread.CurrentThread;

  static void \u206D‮‭‍⁪‮⁫‪‫‭‌‪⁯‮‬​‭​‭‮‬⁬‍‪‮‬⁮‪‬⁬⁭⁪‫‬‮‏⁭‫⁬‭‮([In] Thread obj0, [In] object obj1) => obj0.Start(obj1);

  static void \u202E‪‍⁮⁮⁫‬⁯‎‪‍‮⁯‮⁯⁬‬‪⁫‎⁭‬⁭‮‪‍‌‬‬⁮‌‮‍‫‫‎⁯‏⁪⁫‮([In] int obj0) => Thread.Sleep(obj0);

  static bool \u200B‭⁪‫‭​⁫‫​‮‬‍‍‭⁫‬‮‎‪‫⁬⁫‫‎⁬‏‮⁫‬‭‫‏⁭‬⁯‏‮‪‍⁬‮() => Debugger.IsAttached;

  static bool \u200D‏⁯‬‍⁮‏‌⁯⁮‭‭‍⁮⁪⁪⁭⁮⁮‏‭‫‍‏​⁫‍‭⁫​‬‌‪​‫‍‭⁪​⁬‮() => Debugger.IsLogging();

  static void \u202E⁯⁯⁪‭‮⁭‎⁬​‪⁭‪⁬⁬‪‮‭⁪‬⁮‬⁯⁯‮‫‮⁪‪⁮‌‮‌⁪‎⁪‮‭‫⁬‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u202E‫‬‪⁭‬⁬⁮⁪⁭‬‭‏⁮‮‍​‬‫​‬‮‌​‬‮‮⁫‮‏⁪⁮‮‏‪⁬‌‮‪‮([In] string obj0) => Environment.FailFast(obj0);

  static Process \u200E⁮‬‮⁬⁮‎‎⁭‭‫‫‬‮‫‪⁫‭‌⁬‌‮‫‪‏‫‌⁫⁯‭‌‬⁪​⁭‏⁪‎⁪‌‮() => Process.GetCurrentProcess();

  static IntPtr \u202B‪‪‌‫‎⁭⁮⁫‮‮‏‮​‬⁪⁪‍‎⁬‌⁬‮⁪‏‏⁭⁫‌⁭‍‫⁮​⁯‍⁭⁯‭⁬‮([In] Process obj0) => obj0.Handle;

  static void \u202B⁭⁯‬⁮⁮⁯⁫⁪‏​‎‪⁮‫⁮⁬‌⁮‌‎⁮​⁯⁮⁯‏‭‮⁪‫‭⁯‌⁮⁮⁫⁪​⁫‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u200E‮⁪⁮⁮‫⁪‪‬⁮‏⁪​‮‌⁫‭‎‌⁫⁫⁮⁬‪​‌​‭⁬⁫‪⁫⁭‌‬⁫‏⁮​‬‮([In] Process obj0) => obj0.Close();

  static void \u206B⁯⁭⁬‍‬⁭‍⁫‮‍‫​‏⁫‪‏‌⁮⁭⁭‍‮‮‏⁮⁪‫‬‎‬‍‍​⁬⁯⁯‌‌⁪‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u200C‎⁮⁯‌‪⁭‎⁬‍⁭⁯⁯​‬‎​⁮⁪‮‏⁪‏⁮‌⁯​⁫⁫‏‮​⁭‎‭‏⁯​‭‬‮([In] string obj0) => Environment.FailFast(obj0);

  static bool \u206D​⁯⁭⁫⁫‬‬⁫‪⁫‭‪​‬‮‪⁪‭⁯‮⁭​‪⁯‭‫‬‪‬‌⁭‎‪‍‍‍‍⁬⁯‮([In] Thread obj0) => obj0.IsAlive;

  static void \u206C⁭⁪‮⁫​‎‫‎‭‎‮‪⁭‫‫‬‌‭‌‫‌‭‮⁭⁬‍⁫‮⁭‌⁯‪⁯⁬‫‌‫‮⁮‮([In] string obj0) => Environment.FailFast(obj0);

  static void \u200E⁬​‮‌‪⁫⁪​⁯‬⁮‮‮‬‫‭‍⁮⁫‪⁮⁯‏‫⁭‌⁯‏‎‮⁮⁯‪⁬‭‌⁪‌‎‮([In] int obj0) => Thread.Sleep(obj0);

  private struct \u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮
  {
    internal IntPtr \u206F‬‭​‍‫⁪‪‭‬‎⁬‮‭‮‌‭⁬​‌⁮‬‮⁮‮⁯‌‎⁮‭⁮‍‫⁪⁯⁪⁯‍‎‬‮;
    internal IntPtr \u202C‮​⁪‪‏⁯‌‫​⁫‎​⁯⁬‬‎​‎⁯⁬‬‪‍​⁯‌‎⁫‭⁪⁭‪‎‍⁬⁭​‮⁯‮;
    internal IntPtr \u202B‎⁬⁫⁮‫‎⁬‫⁯⁯‬​‪⁮⁫⁫‌⁮​‫‭‌‫⁫‮⁭⁭​‌⁮​‏⁫⁮⁪⁫⁬‪⁬‮;
    internal IntPtr \u206A⁫‪‌‮​⁫⁬⁯⁫⁪‭‏‭⁫⁪⁮‍⁪⁮⁬⁮⁯‎‎‬⁪‮‫⁯‏‎‍⁪‏‭⁪‬‫⁭‮;
    internal IntPtr \u202C‏‪​⁪​⁪‭‬‬‮‍⁯‮​‭⁫⁫⁭‌⁭‌⁮‪⁪⁬⁯‫‮‭‎⁯‫⁯‬‮‫‍⁫‎‮;
    internal IntPtr \u206E⁬⁯​⁪‮⁮⁬⁭‪‮⁯⁭‌⁪⁭‮‏​‫‬⁯​⁮⁬⁮⁫‮‏‫‭‫‫‫‏‏⁪⁭⁭⁮‮;

    [DllImport("ntdll.dll", EntryPoint = "NtQueryInformationProcess")]
    private static extern int \u202C‫⁮‫⁫‭‏⁮‫‍‭⁬‎​⁯⁮‪⁫⁮⁫‪⁯⁭‫‮‫‭⁭⁮⁮‮‎​‏​⁬​⁬‭⁪‮(
      [In] IntPtr obj0,
      [In] int obj1,
      [In] ref \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮ obj2,
      [In] int obj3,
      [In] ref int obj4);

    internal Process \u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮() => \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮(\u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u202D‌‪‫‍⁪⁭‏⁪​⁯‮‍⁯‍‏‎‬‪‭‮‪‪⁭⁭⁮‌⁭​‏⁯⁪‮​‬‭‬‪‏‎‮(\u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u200E⁯‫⁫⁬​⁬‬⁭⁮‍‍​‭⁯‏⁮​‬‌‭‬⁮⁫‭‫‌‪‌‏‭‬⁭⁮​⁭​⁮⁫‮()));

    internal static Process \u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮([In] int obj0) => \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮(\u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u206D⁫‭⁭‫⁭​‬⁫‭‮⁮⁭‭‏⁮‫‪‍‬​⁬‮‪‬⁮‌​‏‏⁯⁪‬‬‏‪⁯‭⁪⁯‮(\u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u206C⁯‭⁪​‭⁭‏‫‌‫⁫⁪‭‎⁪‪⁫⁬‍⁯⁭⁭‪‭⁪‮‌⁯‮⁫‍⁯⁪‌⁬‌‮‬‎‮(obj0)));

    internal static Process \u206F‮⁪⁪‮‬‮‌​⁪​‭⁪‪‌​‮‌⁪‫⁫‍‮⁮‌‌‬‬‬‭‏⁫⁯‎‭⁭​‫‍⁫‮([In] IntPtr obj0)
    {
      \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮ obj = new \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮();
      int num1;
      int num2 = \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u202C‫⁮‫⁫‭‏⁮‫‍‭⁬‎​⁯⁮‪⁫⁮⁫‪⁯⁭‫‮‫‭⁭⁮⁮‮‎​‏​⁬​⁬‭⁪‮(obj0, 0, ref obj, \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u200F‬​⁪⁫⁯‎⁫‍‬‌‫‎‎‭‫‪⁮‍⁯‌‬‍⁭‭‫‍‏‌‌‭‏‭⁬‪⁯⁭‮‮⁬‮((object) obj), ref num1);
      if (num2 != 0)
        throw \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u206F‪‍‎‎‌‮⁭‪‬‮‬⁫‫‭‫‪‌​​⁯⁬⁪⁭‫​⁯‬‬‪⁮‎‍​‍‪⁪‍‬‮(num2);
      try
      {
        return \u003CModule\u003E.\u202B‍‮‌⁯‮‫⁯⁬‌‎‫‎⁭‫‬⁫‌‫⁮‎‎‪⁭‬‌‭⁪‫‍‏‏‏​‪⁯‬‎⁪⁮‮.\u206C⁫‫‬⁯⁪‌‭⁪‬‪⁪‌‬⁮‎‭⁪⁫⁬⁫⁫‬⁫⁬⁯‎​⁭⁬‭⁪⁪‎​‏​‌⁬⁯‮(obj.\u206E⁬⁯​⁪‮⁮⁬⁭‪‮⁯⁭‌⁪⁭‮‏​‫‬⁯​⁮⁬⁮⁫‮‏‫‭‫‫‫‏‏⁪⁭⁭⁮‮.ToInt32());
      }
      catch (ArgumentException ex)
      {
        return (Process) null;
      }
    }

    static Process \u200E⁯‫⁫⁬​⁬‬⁭⁮‍‍​‭⁯‏⁮​‬‌‭‬⁮⁫‭‫‌‪‌‏‭‬⁭⁮​⁭​⁮⁫‮() => Process.GetCurrentProcess();

    static IntPtr \u202D‌‪‫‍⁪⁭‏⁪​⁯‮‍⁯‍‏‎‬‪‭‮‪‪⁭⁭⁮‌⁭​‏⁯⁪‮​‬‭‬‪‏‎‮([In] Process obj0) => obj0.Handle;

    static Process \u206C⁯‭⁪​‭⁭‏‫‌‫⁫⁪‭‎⁪‪⁫⁬‍⁯⁭⁭‪‭⁪‮‌⁯‮⁫‍⁯⁪‌⁬‌‮‬‎‮([In] int obj0) => Process.GetProcessById(obj0);

    static IntPtr \u206D⁫‭⁭‫⁭​‬⁫‭‮⁮⁭‭‏⁮‫‪‍‬​⁬‮‪‬⁮‌​‏‏⁯⁪‬‬‏‪⁯‭⁪⁯‮([In] Process obj0) => obj0.Handle;

    static int \u200F‬​⁪⁫⁯‎⁫‍‬‌‫‎‎‭‫‪⁮‍⁯‌‬‍⁭‭‫‍‏‌‌‭‏‭⁬‪⁯⁭‮‮⁬‮([In] object obj0) => Marshal.SizeOf(obj0);

    static Win32Exception \u206F‪‍‎‎‌‮⁭‪‬‮‬⁫‫‭‫‪‌​​⁯⁬⁪⁭‫​⁯‬‬‪⁮‎‍​‍‪⁪‍‬‮([In] int obj0) => new Win32Exception(obj0);

    static Process \u206C⁫‫‬⁯⁪‌‭⁪‬‪⁪‌‬⁮‎‭⁪⁫⁬⁫⁫‬⁫⁬⁯‎​⁭⁬‭⁪⁪‎​‏​‌⁬⁯‮([In] int obj0) => Process.GetProcessById(obj0);
  }
}
