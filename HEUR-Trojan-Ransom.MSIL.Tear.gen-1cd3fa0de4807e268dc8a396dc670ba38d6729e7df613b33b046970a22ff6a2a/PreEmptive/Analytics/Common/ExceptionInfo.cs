// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.ExceptionInfo
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Runtime.InteropServices;

namespace PreEmptive.Analytics.Common
{
  public class ExceptionInfo
  {
    public Exception Exception
    {
      get
      {
        int num1 = 6736;
        int num2 = num1;
        num1 = 6736;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -9197;
        int num2 = num1;
        num1 = -9197;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ExceptionType ExceptionType
    {
      get
      {
        int num1 = 7757;
        int num2 = num1;
        num1 = 7757;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 19558;
        int num2 = num1;
        num1 = 19558;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Message
    {
      get
      {
        int num1 = 31500;
        int num2 = num1;
        num1 = 31500;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -30840;
        int num2 = num1;
        num1 = -30840;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Contact
    {
      get
      {
        int num1 = -8342;
        int num2 = num1;
        num1 = -8342;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -21334;
        int num2 = num1;
        num1 = -21334;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string Comment
    {
      get
      {
        int num1 = 1717;
        int num2 = num1;
        num1 = 1717;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -16562;
        int num2 = num1;
        num1 = -16562;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.e = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ExceptionInfo()
      : this(ExceptionType.Caught)
    {
    }

    public ExceptionInfo(
      ExceptionType type,
      [Optional] Exception exception,
      [Optional] string contact,
      [Optional] string comment,
      [Optional] string message)
    {
      this.ExceptionType = type;
      this.Exception = exception;
      if (message == null)
      {
        if (exception != null)
          this.Message = exception.Message;
      }
      else
        this.Message = message;
      this.Contact = contact;
      this.Comment = comment;
    }

    public static ExceptionInfo Caught(
      [Optional] Exception exception,
      [Optional] string contact,
      [Optional] string comment,
      [Optional] string message)
    {
      int num1 = -32097;
      int num2 = num1;
      num1 = -32097;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return new ExceptionInfo(ExceptionType.Caught, exception, contact, comment, message);
        default:
          goto case 1;
      }
    }

    public static ExceptionInfo Caught(
      string name,
      [Optional] string message,
      [Optional] string callstack,
      [Optional] string callstackregex,
      [Optional] string contact,
      [Optional] string comment)
    {
      int num1 = -13224;
      int num2 = num1;
      num1 = -13224;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return ExceptionInfo.Caught(ExceptionInfo.CreateException(name, message, callstack, callstackregex), contact, comment, message);
        default:
          goto case 1;
      }
    }

    public static ExceptionInfo Uncaught(
      [Optional] Exception exception,
      [Optional] string contact,
      [Optional] string comment,
      [Optional] string message)
    {
      int num1 = -11210;
      int num2 = num1;
      num1 = -11210;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return new ExceptionInfo(ExceptionType.Uncaught, exception, contact, comment, message);
        default:
          goto case 1;
      }
    }

    public static ExceptionInfo Uncaught(
      string name,
      [Optional] string message,
      [Optional] string callstack,
      [Optional] string callstackregex,
      [Optional] string contact,
      [Optional] string comment)
    {
      int num1 = 15337;
      int num2 = num1;
      num1 = 15337;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return ExceptionInfo.Uncaught(ExceptionInfo.CreateException(name, message, callstack, callstackregex), contact, comment, message);
        default:
          goto case 1;
      }
    }

    public static ExceptionInfo Thrown(
      [Optional] Exception exception,
      [Optional] string contact,
      [Optional] string comment,
      [Optional] string message)
    {
      int num1 = 18429;
      int num2 = num1;
      num1 = 18429;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return new ExceptionInfo(ExceptionType.Thrown, exception, contact, comment, message);
        default:
          goto case 1;
      }
    }

    public static ExceptionInfo Thrown(
      string name,
      [Optional] string message,
      [Optional] string callstack,
      [Optional] string callstackregex,
      [Optional] string contact,
      [Optional] string comment)
    {
      int num1 = 21462;
      int num2 = num1;
      num1 = 21462;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return ExceptionInfo.Thrown(ExceptionInfo.CreateException(name, message, callstack, callstackregex), contact, comment, message);
        default:
          goto case 1;
      }
    }

    public static Exception CreateException(
      string name,
      string exceptionmessage,
      string callstack,
      string callstackregex)
    {
      int A_1 = 2;
      int num1;
      int num2;
      Exception exception;
      switch (0)
      {
        case 0:
label_2:
          num2 = 32100;
          int num3 = num2;
          num2 = 32100;
          int num4 = num2;
          switch (num3 == num4 ? 1 : 0)
          {
            case 0:
            case 2:
              break;
            default:
              num2 = 0;
              if (num2 == 0)
                ;
              exception = new Exception(exceptionmessage);
              exception.Data[(object) Utils.a("\uF3B5삷\uD9B9\uD9BB캽뒿ꯁꯃ\uA8C5蛇ꯉꇋꯍ", A_1)] = (object) name;
              num2 = 5;
              num1 = num2;
              goto label_1;
          }
          break;
        default:
label_1:
          while (true)
          {
            switch (num1)
            {
              case 0:
                exception.Data[(object) Utils.a("\uE5B5첷\uDBB9\uDFBB햽钿냁ꗃꗅ귇", A_1)] = (object) callstack;
                num2 = 4;
                num1 = num2;
                continue;
              case 1:
                goto label_11;
              case 2:
                if (callstackregex != null)
                {
                  num2 = 1;
                  num1 = num2;
                  continue;
                }
                goto label_13;
              case 3:
                goto label_13;
              case 4:
                num2 = 2;
                num1 = num2;
                continue;
              case 5:
                if (callstack != null)
                {
                  num2 = 0;
                  num1 = num2;
                  continue;
                }
                goto case 4;
              default:
                goto label_2;
            }
          }
label_13:
          return exception;
      }
label_11:
      num2 = 1;
      if (num2 == 0)
        ;
      exception.Data[(object) Utils.a("\uE5B5첷\uDBB9\uDFBB햽钿냁ꗃꗅ귇飉꧋꧍뗏\uAAD1", A_1)] = (object) callstackregex;
      num2 = 3;
      num1 = num2;
      goto label_1;
    }
  }
}
