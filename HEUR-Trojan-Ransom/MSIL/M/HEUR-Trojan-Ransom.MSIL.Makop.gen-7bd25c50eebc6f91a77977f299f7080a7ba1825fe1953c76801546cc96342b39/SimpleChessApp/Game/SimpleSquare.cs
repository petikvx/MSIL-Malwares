// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = -1487902645;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2003915131)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              comparand = eventHandler;
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u200E‫‏​⁬⁭‪⁯​‮⁭‫‫‌⁭‎‭‫⁭‬⁯⁫‪‭‌​‪⁯‭‌⁮⁯‎​‫‏‏‫‍‪‮((Delegate) comparand, (Delegate) value), comparand);
              num1 = -1985287706;
              continue;
            case 3:
              int num3 = eventHandler != comparand ? 845802025 : (num3 = 1483148358);
              num1 = num3 ^ (int) num2 * -1210657098;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = 1292372946;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 337956557)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              comparand = eventHandler;
              num1 = 1595324878;
              continue;
            case 2:
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u206F‪‍‏‍⁯⁯‫⁪‎‫‮‎⁪‫⁬‬‍‫⁫⁭‫‭​‬‫​‫⁬⁯⁯‮⁫⁭⁮‮⁮‏‍⁯‮((Delegate) comparand, (Delegate) value), comparand);
              num1 = (int) num2 * 434057974 ^ 1566977395;
              continue;
            case 3:
              goto label_1;
            case 4:
              int num3 = eventHandler != comparand ? -987385294 : (num3 = -450606487);
              num1 = num3 ^ (int) num2 * 1246476872;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
label_1:
        int num1 = -1557248486;
        ChessPiece piece;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -142295087)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 1357814372 ^ 1871845400;
              continue;
            case 2:
              goto label_1;
            case 3:
              piece = this.piece;
              num1 = (int) num2 * -996585367 ^ 1627349874;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return piece;
      }
      set
      {
        this.piece = value;
label_1:
        int num1 = 1055282723;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 742065842)) % 8U)
          {
            case 0:
              int num3 = flag ? -38913904 : (num3 = -219253466);
              num1 = num3 ^ (int) num2 * -122262088;
              continue;
            case 1:
              flag = this.piece == null;
              num1 = (int) num2 * 138579335 ^ 1643665557;
              continue;
            case 2:
              this.piece = (ChessPiece) null;
              SimpleSquare.\u206B⁬⁮‭‎⁫⁮⁪‬⁫‏​‍‭‍⁮‭‎⁭‮⁬⁭⁪⁭‭⁭‌‭⁫‌⁬⁯‎⁫⁮‏⁮‎⁬⁯‮((Control) this, (Image) null);
              num1 = (int) num2 * 668623888 ^ 88029863;
              continue;
            case 3:
              goto label_3;
            case 4:
              SimpleSquare.\u206B⁬⁮‭‎⁫⁮⁪‬⁫‏​‍‭‍⁮‭‎⁭‮⁬⁭⁪⁭‭⁭‌‭⁫‌⁬⁯‎⁫⁮‏⁮‎⁬⁯‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = 1500905669;
              continue;
            case 5:
              num1 = (int) num2 * 265489891 ^ 1362803246;
              continue;
            case 6:
              goto label_1;
            case 7:
              num1 = (int) num2 * 930845342 ^ -653133661;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public void colorSquare()
    {
      this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
      SimpleSquare.\u202E⁫‭⁮‭⁪​‭‍‮⁬‫‎‬‬⁫⁯‮‏⁪‌‏​⁭‬‭‍⁫‎‪‪‌‪⁬‍‏‮‪⁬‫‮((Control) this, this.DefaultColor);
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = 1192644090;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1542966610)) % 5U)
          {
            case 0:
              this.Piece = this.Piece;
              num1 = (int) num2 * -215361000 ^ 1948483565;
              continue;
            case 1:
              goto label_3;
            case 2:
              num1 = (int) num2 * 120026532 ^ -250050131;
              continue;
            case 3:
              goto label_1;
            case 4:
              this.Piece.Kind = value;
              num1 = (int) num2 * 427235490 ^ -1828959335;
              continue;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
        bool isBlackSquare = this.isBlackSquare;
label_1:
        int num1 = 881237579;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1198276950)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * 338007057 ^ -60986277;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return isBlackSquare;
      }
      set
      {
label_1:
        int num1 = -107412954;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1373538921)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              this.isBlackSquare = value;
              this.colorSquare();
              num1 = (int) num2 * 87938056 ^ -1467224131;
              continue;
            case 2:
              num1 = (int) num2 * 2081928963 ^ 1790542322;
              continue;
            case 3:
              goto label_3;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public Repository repo
    {
      get
      {
label_1:
        int num1 = -99156664;
        Repository repo;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -503405784)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              repo = ChessContext.repo;
              num1 = (int) num2 * 920081704 ^ -276696674;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return repo;
      }
    }

    public SimpleSquare()
    {
label_1:
      int num1 = 859882987;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1048967686)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 2102096461 ^ 1512830461;
            continue;
          case 1:
            SimpleSquare.\u200D‍‏‮⁮⁫⁮⁬⁬⁬‬⁭⁭‎‌⁯⁯⁫‬‬‏⁭‌⁮⁭⁫‬‮⁯‪⁭​⁬‫⁬‭⁭‌⁪‏‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -1308080949 ^ -721929995;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          case 4:
            this.InitializeComponent();
            num1 = (int) num2 * -1040722028 ^ 1998749985;
            continue;
          case 5:
            num1 = (int) num2 * 1733451733 ^ 1295412129;
            continue;
          case 6:
            num1 = (int) num2 * 1133139374 ^ 229309494;
            continue;
          case 7:
            SimpleSquare.\u206B‍⁪⁮‮‏‫‪‎⁯​⁫⁮⁫‍‬‌‎‌⁪​⁭‎‍‮⁭⁬‎⁮‭‮⁫‍‭‪‪‬⁯‌⁪‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -1220026951 ^ 149381112;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = 871833537;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 947104867)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * 1016902104 ^ -878413936;
              continue;
            }
            goto label_5;
          case 3:
            num1 = (int) num2 * 1351410490 ^ 1152907140;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public void HighLight()
    {
      SimpleSquare.\u202E⁫‭⁮‭⁪​‭‍‮⁬‫‎‬‬⁫⁯‮‏⁪‌‏​⁭‬‭‍⁫‎‪‪‌‪⁬‍‏‮‪⁬‫‮((Control) this, Color.ForestGreen);
label_1:
      int num1 = -712046108;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -772700474)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 897005245 ^ 632955348;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void ClearHighLight()
    {
      SimpleSquare.\u202E⁫‭⁮‭⁪​‭‍‮⁬‫‎‬‬⁫⁯‮‏⁪‌‏​⁭‬‭‍⁫‎‪‪‌‪⁬‍‏‮‪⁬‫‮((Control) this, this.DefaultColor);
label_1:
      int num1 = -1321605981;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -324203885)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1211207212 ^ -1619982237;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public bool IsEmpty
    {
      get
      {
label_1:
        int num1 = 49450717;
        bool isEmpty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2018586406)) % 3U)
          {
            case 1:
              isEmpty = this.Piece == null;
              num1 = (int) num2 * -1286140942 ^ -356925830;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
label_1:
      int num1 = 833136980;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1421068988)) % 11U)
        {
          case 0:
            num3 = this.components != null ? 1 : 0;
            break;
          case 1:
            if (!disposing)
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * 773490034 ^ 1243458811;
            continue;
          case 2:
            num1 = (int) num2 * -364248433 ^ 179130239;
            continue;
          case 3:
            num1 = (int) num2 * -222908887 ^ -2085551559;
            continue;
          case 4:
            goto label_3;
          case 5:
            SimpleSquare.\u202C‬​‭‮⁭‏⁮‍‎⁭​‏‪⁬⁫‎‫⁪‏⁪‬⁪​‍​⁬⁪‎​⁭‪⁫‏⁭⁬‍⁫‏‌‮((IDisposable) this.components);
            num1 = (int) num2 * -224263933 ^ 1121323591;
            continue;
          case 6:
            num1 = (int) num2 * -341525910 ^ 670184283;
            continue;
          case 7:
            base.Dispose(disposing);
            num1 = 1535602469;
            continue;
          case 8:
            num1 = (int) num2 * -1508124438 ^ 497331212;
            continue;
          case 9:
            int num4 = flag ? -901889164 : (num4 = -607924010);
            num1 = num4 ^ (int) num2 * -1009970467;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_16;
        }
        flag = num3 != 0;
        num1 = 1436052473;
      }
label_3:
      return;
label_16:;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = -1509707062;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1095344067)) % 27U)
        {
          case 0:
            num1 = (int) num2 * 936466008 ^ -131426868;
            continue;
          case 1:
            SimpleSquare.\u200F‪‫‏⁪⁫⁭‮⁫‍‎‎‌⁬⁮‎‍‬‬‭‬‍‌‍‎⁭⁬⁪⁯‪⁯‪⁮‍‪‌⁫‬‪⁫‮(SimpleSquare.\u200B⁮‭⁪‏⁭‫‌⁪⁭⁯‍‮⁭⁬‌‫⁭‭‮‌‫⁫‭⁭‎⁬‍‬⁪‍‬​‏‫⁬⁬⁯‭⁭‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * 720799915 ^ 121426045;
            continue;
          case 2:
            this.panel1 = SimpleSquare.\u202D‎⁭‍⁪⁬⁪‬​‏‭‎⁮⁭‌⁮‫⁫⁭⁯⁯‮‎‬⁮‪⁪‬‮‬‌‮‫⁭​⁮‬⁬‬‮();
            num1 = (int) num2 * -1769322768 ^ -981211738;
            continue;
          case 3:
            SimpleSquare.\u200D‭‮⁫⁫⁯⁪‬‪⁪‫‍⁬⁮​‎⁭‪‪‌‬⁪‪‏⁫⁭​⁭‭‌‍‮⁮⁬‫​⁭‍⁯‮‮((Control) this, \u003CModule\u003E.\u200F⁪⁭‮⁭‎‌⁯⁬⁪‬⁫‬‍⁬‎⁯⁯‌​⁪‫⁬⁫⁮‌‍⁫⁫​⁯‪⁬‌⁭‭‎​‪‮<string>(2272894816U));
            num1 = (int) num2 * -630819818 ^ 828877651;
            continue;
          case 4:
            SimpleSquare.\u202C⁫‍​⁭⁭‮⁬⁯⁬​⁪⁬‏⁮‍‌⁪⁮​​⁯‏‬‍‫⁬​⁪‭⁮‭⁯‫‏⁭⁮⁮‍‪‮((Control) this, new Padding(0));
            num1 = (int) num2 * -2106825433 ^ -2079212700;
            continue;
          case 5:
            SimpleSquare.\u206E‭‬‫‬‍⁯​‌‍‌⁫⁭‌‭⁬‍‫‪‎⁮⁫‪‌‬‫⁭⁮‌‍‪‏⁭⁬‌‎‏⁬‌⁭‮((Control) this);
            num1 = (int) num2 * 1322261966 ^ -1882356087;
            continue;
          case 6:
            SimpleSquare.\u202C‎‎‏⁬‎‎​⁮⁪‎‌⁫‌⁪⁮‬⁭​‮⁮​‬‎‭‍‭​⁯‍‍⁫⁭⁬⁮‪‍‏⁭⁭‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * -1021444324 ^ 505553546;
            continue;
          case 7:
            SimpleSquare.\u200C‮‭⁮⁮​⁪‍‍⁬​⁪‫⁫⁪‏‮‎‍‮⁭‪‎‬‍​‎‍‪‎‌‬⁮⁫‍‮‎‭‮‮((Control) this.panel1, \u003CModule\u003E.\u200F‫⁪‏⁪⁭⁬‮⁭⁪‎‌‌⁮‭‮​‭⁮‎‫‍‌‍‫‎⁫⁯⁫‭‭⁭⁬⁮‮‫⁮​⁯⁮‮<string>(896742308U));
            num1 = (int) num2 * -1062694148 ^ 848089902;
            continue;
          case 8:
            SimpleSquare.\u202D⁭⁭‏‏‮‫‌‪​‮⁫⁮‪​⁯‎‮‍‏‮‪‌⁯‭⁮​⁭‌‬‎⁫⁪‌‌‮​‫‬‮((Control) this, false);
            num1 = (int) num2 * 733400838 ^ 632476070;
            continue;
          case 9:
            SimpleSquare.\u206E⁯‌‬⁯‫⁯‎‭‍⁫⁬⁮⁬⁭‭‬⁫‬⁪⁮⁯⁮⁫⁭⁪⁭⁮‮‍‌⁮⁭⁯‮⁪‍‬⁫‏‮((Control) this.panel1, 0);
            num1 = (int) num2 * 1788051908 ^ -129989511;
            continue;
          case 10:
            num1 = (int) num2 * -1980685316 ^ -426460311;
            continue;
          case 11:
            SimpleSquare.\u202D‫​​‎‏​⁭⁯‬‬‍⁮⁪⁫‭⁬‬​‎‍‌⁫‫⁬​⁫‎​⁫‌‭⁬‫‪⁬‫⁬‪⁮‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * -2034087700 ^ 1904994853;
            continue;
          case 12:
            SimpleSquare.\u206B​‏‭‭‭‮‎⁫‌‍⁬‍⁭⁯‍‎‎‮⁬⁫‏‭⁪⁪⁮‫⁫⁭‬‌⁯‪⁬‏​‪​⁮⁯‮((ContainerControl) this, AutoScaleMode.Font);
            num1 = (int) num2 * 304020631 ^ 474039486;
            continue;
          case 13:
            SimpleSquare.\u206A​‭​‫‬‏⁬⁮‬‫‮‪‎⁮⁭⁮⁮​​⁯⁯⁬​⁭‍‬‎‍‮‌‏⁬‌⁬‪⁪‭⁪⁭‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * -1418074512 ^ 1896674128;
            continue;
          case 14:
            num1 = (int) num2 * 2400581 ^ 1172544899;
            continue;
          case 15:
            goto label_3;
          case 16:
            SimpleSquare.\u200E‌​‎‪⁫⁭‭⁬⁮‮⁯​‍‪‎⁬‎‬​⁫‎‫‫‍‏‍⁬‍‏‫‪‭‬⁫⁪‮⁫⁮‭‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * -1638349931 ^ 1831751636;
            continue;
          case 17:
            num1 = (int) num2 * -1228870439 ^ -1599575200;
            continue;
          case 18:
            SimpleSquare.\u202E⁫‏⁫‌⁮⁪⁪‭‬‭⁫‍‫‮‌‭‮‪‎‭⁪‪‌‍‎‮‮⁪‍‏‬⁮⁫⁮‍‭‬‭‬‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1717482893 ^ -2117673699;
            continue;
          case 19:
            num1 = (int) num2 * -1568188525 ^ -240055008;
            continue;
          case 20:
            SimpleSquare.\u202C‎‎‏⁬‎‎​⁮⁪‎‌⁫‌⁪⁮‬⁭​‮⁮​‬‎‭‍‭​⁯‍‍⁫⁭⁬⁮‪‍‏⁭⁭‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * -284061846 ^ 1051548000;
            continue;
          case 21:
            goto label_1;
          case 22:
            num1 = (int) num2 * -1225289309 ^ -163180831;
            continue;
          case 23:
            SimpleSquare.\u206E⁮‫⁪⁯‬​​⁪‌‍⁪⁫​‎⁪‫⁭‮⁭⁭⁪⁮‍‎‫‭‪‬⁯⁬​⁬⁯‎​​‬⁫⁯‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * 485659622 ^ -1839967982;
            continue;
          case 24:
            SimpleSquare.\u202E⁫‭⁮‭⁪​‭‍‮⁬‫‎‬‬⁫⁯‮‏⁪‌‏​⁭‬‭‍⁫‎‪‪‌‪⁬‍‏‮‪⁬‫‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * -289179988 ^ 1121030330;
            continue;
          case 25:
            num1 = (int) num2 * 147895302 ^ 53950234;
            continue;
          case 26:
            num1 = (int) num2 * -308417637 ^ -1503173088;
            continue;
          default:
            goto label_29;
        }
      }
label_3:
      return;
label_29:;
    }

    static Delegate \u200E‫‏​⁬⁭‪⁯​‮⁭‫‫‌⁭‎‭‫⁭‬⁯⁫‪‭‌​‪⁯‭‌⁮⁯‎​‫‏‏‫‍‪‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206F‪‍‏‍⁯⁯‫⁪‎‫‮‎⁪‫⁬‬‍‫⁫⁭‫‭​‬‫​‫⁬⁯⁯‮⁫⁭⁮‮⁮‏‍⁯‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u206B⁬⁮‭‎⁫⁮⁪‬⁫‏​‍‭‍⁮‭‎⁭‮⁬⁭⁪⁭‭⁭‌‭⁫‌⁬⁯‎⁫⁮‏⁮‎⁬⁯‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u202E⁫‭⁮‭⁪​‭‍‮⁬‫‎‬‬⁫⁯‮‏⁪‌‏​⁭‬‭‍⁫‎‪‪‌‪⁬‍‏‮‪⁬‫‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u206B‍⁪⁮‮‏‫‪‎⁯​⁫⁮⁫‍‬‌‎‌⁪​⁭‎‍‮⁭⁬‎⁮‭‮⁫‍‭‪‪‬⁯‌⁪‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u200D‍‏‮⁮⁫⁮⁬⁬⁬‬⁭⁭‎‌⁯⁯⁫‬‬‏⁭‌⁮⁭⁫‬‮⁯‪⁭​⁬‫⁬‭⁭‌⁪‏‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202C‬​‭‮⁭‏⁮‍‎⁭​‏‪⁬⁫‎‫⁪‏⁪‬⁪​‍​⁬⁪‎​⁭‪⁫‏⁭⁬‍⁫‏‌‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u202D‎⁭‍⁪⁬⁪‬​‏‭‎⁮⁭‌⁮‫⁫⁭⁯⁯‮‎‬⁮‪⁪‬‮‬‌‮‫⁭​⁮‬⁬‬‮() => new Panel();

    static void \u206E‭‬‫‬‍⁯​‌‍‌⁫⁭‌‭⁬‍‫‪‎⁮⁫‪‌‬‫⁭⁮‌‍‪‏⁭⁬‌‎‏⁬‌⁭‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u202C‎‎‏⁬‎‎​⁮⁪‎‌⁫‌⁪⁮‬⁭​‮⁮​‬‎‭‍‭​⁯‍‍⁫⁭⁬⁮‪‍‏⁭⁭‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206E⁮‫⁪⁯‬​​⁪‌‍⁪⁫​‎⁪‫⁭‮⁭⁭⁪⁮‍‎‫‭‪‬⁯⁬​⁬⁯‎​​‬⁫⁯‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u206A​‭​‫‬‏⁬⁮‬‫‮‪‎⁮⁭⁮⁮​​⁯⁯⁬​⁭‍‬‎‍‮‌‏⁬‌⁬‪⁪‭⁪⁭‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u200C‮‭⁮⁮​⁪‍‍⁬​⁪‫⁫⁪‏‮‎‍‮⁭‪‎‬‍​‎‍‪‎‌‬⁮⁫‍‮‎‭‮‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202D‫​​‎‏​⁭⁯‬‬‍⁮⁪⁫‭⁬‬​‎‍‌⁫‫⁬​⁫‎​⁫‌‭⁬‫‪⁬‫⁬‪⁮‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u206E⁯‌‬⁯‫⁯‎‭‍⁫⁬⁮⁬⁭‭‬⁫‬⁪⁮⁯⁮⁫⁭⁪⁭⁮‮‍‌⁮⁭⁯‮⁪‍‬⁫‏‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u200E‌​‎‪⁫⁭‭⁬⁮‮⁯​‍‪‎⁬‎‬​⁫‎‫‫‍‏‍⁬‍‏‫‪‭‬⁫⁪‮⁫⁮‭‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u206B​‏‭‭‭‮‎⁫‌‍⁬‍⁭⁯‍‎‎‮⁬⁫‏‭⁪⁪⁮‫⁫⁭‬‌⁯‪⁬‏​‪​⁮⁯‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u200B⁮‭⁪‏⁭‫‌⁪⁭⁯‍‮⁭⁬‌‫⁭‭‮‌‫⁫‭⁭‎⁬‍‬⁪‍‬​‏‫⁬⁬⁯‭⁭‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u200F‪‫‏⁪⁫⁭‮⁫‍‎‎‌⁬⁮‎‍‬‬‭‬‍‌‍‎⁭⁬⁪⁯‪⁯‪⁮‍‪‌⁫‬‪⁫‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u202C⁫‍​⁭⁭‮⁬⁯⁬​⁪⁬‏⁮‍‌⁪⁮​​⁯‏‬‍‫⁬​⁪‭⁮‭⁯‫‏⁭⁮⁮‍‪‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u200D‭‮⁫⁫⁯⁪‬‪⁪‫‍⁬⁮​‎⁭‪‪‌‬⁪‪‏⁫⁭​⁭‭‌‍‮⁮⁬‫​⁭‍⁯‮‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202E⁫‏⁫‌⁮⁪⁪‭‬‭⁫‍‫‮‌‭‮‪‎‭⁪‪‌‍‎‮‮⁪‍‏‬⁮⁫⁮‍‭‬‭‬‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u202D⁭⁭‏‏‮‫‌‪​‮⁫⁮‪​⁯‎‮‍‏‮‪‌⁯‭⁮​⁭‌‬‎⁫⁪‌‌‮​‫‬‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
