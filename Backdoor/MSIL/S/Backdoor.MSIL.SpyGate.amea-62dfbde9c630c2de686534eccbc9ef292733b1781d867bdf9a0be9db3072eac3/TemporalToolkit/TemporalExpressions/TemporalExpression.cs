// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TemporalExpression
// Assembly: AssertFilt, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D82097A6-A4CE-4A4A-9933-E78378BA7CC6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.SpyGate.amea-62dfbde9c630c2de686534eccbc9ef292733b1781d867bdf9a0be9db3072eac3.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace TemporalToolkit.TemporalExpressions
{
  public abstract class TemporalExpression
  {
    public abstract bool Includes(DateTime aDate);

    public TemporalExpression Or(TemporalExpression expr)
    {
      // ISSUE: type reference
      bool flag = TemporalExpression.\u200F‏⁮‌​⁭⁪‭‮‏‍‎⁬‫⁬​‫‍‎‏‌⁮⁬​‬⁪‫‫⁪​⁫⁪⁯‍‪‫⁬⁭‏‬‮(TemporalExpression.\u200C⁬‫⁪⁫‌⁬‭‍⁫​‍⁯‏⁫⁮‬‬⁬‭⁬‬‫⁬⁯‍⁯‍‫⁬⁭‏⁭⁪⁮‬‬⁬‏⁮‮((object) this), TemporalExpression.\u200E⁪​⁯‪‭​‏‪⁮⁪⁫⁭‫⁬⁯‎⁪‭⁫⁪‬⁮‍⁬‬‍⁬‫⁮⁬⁫‎‌‭⁯‪‍‪‎‮(__typeref (TEUnion)));
label_1:
      int num1 = 58787196;
      TEUnion teUnion;
      TemporalExpression temporalExpression;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 545506940)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 1634368082 ^ -342348607;
            continue;
          case 1:
            teUnion = new TEUnion();
            teUnion.Add(this);
            num1 = (int) num2 * -775145754 ^ 869524421;
            continue;
          case 2:
            teUnion.Add(expr);
            temporalExpression = (TemporalExpression) teUnion;
            num1 = (int) num2 * -127644564 ^ -498374350;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3 = flag ? 752471764 : (num3 = 185542129);
            num1 = num3 ^ (int) num2 * -1078948537;
            continue;
          case 5:
            num1 = 502133477;
            continue;
          case 6:
            num1 = (int) num2 * -415083302 ^ 306243867;
            continue;
          case 8:
            temporalExpression = this;
            num1 = (int) num2 * 92614689 ^ 1168015123;
            continue;
          case 9:
            ((TEList) this).Add(expr);
            num1 = (int) num2 * -1457656815 ^ 1505255759;
            continue;
          case 10:
            num1 = (int) num2 * -805357222 ^ 2122200420;
            continue;
          case 11:
            num1 = (int) num2 * 1630968560 ^ -1218762202;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return temporalExpression;
    }

    public TemporalExpression And(TemporalExpression expr)
    {
label_1:
      int num1 = 1054136303;
      TEIntersect teIntersect;
      TemporalExpression temporalExpression;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1563217226)) % 12U)
        {
          case 0:
            num1 = (int) num2 * 1213975899 ^ 1831760162;
            continue;
          case 1:
            // ISSUE: type reference
            flag = TemporalExpression.\u200F‏⁮‌​⁭⁪‭‮‏‍‎⁬‫⁬​‫‍‎‏‌⁮⁬​‬⁪‫‫⁪​⁫⁪⁯‍‪‫⁬⁭‏‬‮(TemporalExpression.\u200C⁬‫⁪⁫‌⁬‭‍⁫​‍⁯‏⁫⁮‬‬⁬‭⁬‬‫⁬⁯‍⁯‍‫⁬⁭‏⁭⁪⁮‬‬⁬‏⁮‮((object) this), TemporalExpression.\u200E⁪​⁯‪‭​‏‪⁮⁪⁫⁭‫⁬⁯‎⁪‭⁫⁪‬⁮‍⁬‬‍⁬‫⁮⁬⁫‎‌‭⁯‪‍‪‎‮(__typeref (TEIntersect)));
            num1 = (int) num2 * 2033081126 ^ -2139237274;
            continue;
          case 2:
            num1 = 2060218212;
            continue;
          case 3:
            goto label_1;
          case 4:
            ((TEList) this).Add(expr);
            num1 = (int) num2 * 1175547262 ^ -11182727;
            continue;
          case 6:
            teIntersect = new TEIntersect();
            teIntersect.Add(this);
            num1 = (int) num2 * -135491699 ^ 397904169;
            continue;
          case 7:
            temporalExpression = this;
            num1 = (int) num2 * -275898146 ^ 1735763665;
            continue;
          case 8:
            num1 = (int) num2 * 609307630 ^ -1125185013;
            continue;
          case 9:
            teIntersect.Add(expr);
            num1 = (int) num2 * -1166943447 ^ -385451224;
            continue;
          case 10:
            int num3 = flag ? 1256026264 : (num3 = 1429650838);
            num1 = num3 ^ (int) num2 * 108746849;
            continue;
          case 11:
            temporalExpression = (TemporalExpression) teIntersect;
            num1 = (int) num2 * 350783173 ^ -244696079;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return temporalExpression;
    }

    public TemporalExpression Minus(TemporalExpression expr)
    {
      TemporalExpression temporalExpression = (TemporalExpression) new TEDifference(this, expr);
label_1:
      int num1 = -1688502452;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -434638472)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -2028081463 ^ -360805070;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return temporalExpression;
    }

    public static TemporalExpression operator &(
      TemporalExpression exprA,
      TemporalExpression exprB)
    {
      return exprA.And(exprB);
    }

    public static TemporalExpression operator -(
      TemporalExpression exprA,
      TemporalExpression exprB)
    {
      TemporalExpression temporalExpression = exprA.Minus(exprB);
label_1:
      int num1 = -1322922534;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1317900579)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * -628017241 ^ -496161100;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return temporalExpression;
    }

    public static TemporalExpression operator |(
      TemporalExpression exprA,
      TemporalExpression exprB)
    {
      return exprA.Or(exprB);
    }

    public List<DateTime> Occurrences(
      DateTime start,
      int maxOccurrences,
      IntervalPrecision precision)
    {
label_1:
      int num1 = 2000387068;
      List<DateTime> dateTimeList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 261572134)) % 3U)
        {
          case 1:
            dateTimeList = this.Occurrences(start, new DateTime?(), maxOccurrences, precision);
            num1 = (int) num2 * 1049865919 ^ 749791530;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return dateTimeList;
    }

    public List<DateTime> Occurrences(
      DateTime rangeStart,
      DateTime rangeEnd,
      IntervalPrecision precision)
    {
label_1:
      int num1 = 583496037;
      List<DateTime> dateTimeList;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1921474019)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            dateTimeList = this.Occurrences(rangeStart, new DateTime?(rangeEnd), 0, precision);
            num1 = (int) num2 * -819096562 ^ -1722424257;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return dateTimeList;
    }

    public List<DateTime> Occurrences(
      DateTime rangeStart,
      DateTime? rangeEnd,
      int maxOccurrences,
      IntervalPrecision precision)
    {
label_1:
      int num1 = -807590884;
      List<DateTime> dateTimeList1;
      while (true)
      {
        uint num2;
        TimeSpan timeSpan;
        DateTime dateTime;
        DateTime? nullable;
        bool flag1;
        List<DateTime> dateTimeList2;
        DateTime aDate;
        IntervalPrecision intervalPrecision;
        bool flag2;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        int num5;
        switch ((num2 = (uint) (num1 ^ -2036484750)) % 41U)
        {
          case 0:
            goto label_40;
          case 1:
            num3 = 0;
            break;
          case 2:
          case 3:
            dateTime = aDate;
            num1 = -1952572366;
            continue;
          case 4:
            int num6 = !flag2 ? -1869140225 : (num6 = -1175972600);
            num1 = num6 ^ (int) num2 * -1993505695;
            continue;
          case 5:
            switch (intervalPrecision)
            {
              case IntervalPrecision.Seconds:
                goto label_39;
              case IntervalPrecision.Minutes:
                goto label_20;
              case IntervalPrecision.Hours:
                goto label_3;
              case IntervalPrecision.Days:
                goto label_28;
              case IntervalPrecision.Weeks:
                goto label_48;
              default:
                num1 = (int) num2 * 678449429 ^ -1651362672;
                continue;
            }
          case 6:
            goto label_21;
          case 7:
            nullable = rangeEnd;
            num1 = (int) num2 * -538225444 ^ 2004048926;
            continue;
          case 8:
            num1 = (int) num2 * -1572611492 ^ -22596636;
            continue;
          case 9:
            num4 = dateTimeList2.Count == maxOccurrences ? 1 : 0;
            goto label_43;
          case 10:
            num1 = (int) num2 * -675215188 ^ -1788201219;
            continue;
          case 11:
label_3:
            timeSpan = new TimeSpan(1, 0, 0);
            num1 = -2111201528;
            continue;
          case 12:
            aDate = new DateTime(rangeStart.Ticks);
            flag3 = !rangeEnd.HasValue;
            num1 = -905330535;
            continue;
          case 13:
            num1 = -989048527;
            continue;
          case 14:
label_48:
            timeSpan = new TimeSpan(7, 0, 0, 0);
            num1 = -1329966511;
            continue;
          case 15:
            num5 = maxOccurrences < 1 ? 1 : 0;
            goto label_10;
          case 16:
            num1 = (int) num2 * -307085148 ^ 770648148;
            continue;
          case 17:
            rangeEnd = new DateTime?(DateTime.MaxValue);
            num1 = (int) num2 * -2045414272 ^ 471407523;
            continue;
          case 18:
            goto label_1;
          case 19:
            aDate = aDate.Add(timeSpan);
            num1 = -1574251466;
            continue;
          case 20:
            if (nullable.HasValue)
            {
              num3 = dateTime <= nullable.GetValueOrDefault() ? 1 : 0;
              break;
            }
            num1 = (int) num2 * -1687704118 ^ 594868516;
            continue;
          case 21:
            num1 = (int) num2 * 241649771 ^ 1797206316;
            continue;
          case 22:
            num1 = (int) num2 * -1849813318 ^ -1545055368;
            continue;
          case 23:
            dateTimeList2 = new List<DateTime>();
            num1 = -1924069819;
            continue;
          case 24:
label_28:
            timeSpan = new TimeSpan(1, 0, 0, 0);
            num1 = -507239675;
            continue;
          case 25:
label_39:
            timeSpan = new TimeSpan(0, 0, 1);
            num1 = -271660461;
            continue;
          case 26:
            if (rangeEnd.HasValue)
            {
              num5 = 0;
              goto label_10;
            }
            else
            {
              num1 = (int) num2 * 1847665913 ^ -1426885014;
              continue;
            }
          case 27:
            dateTimeList2.Add(aDate);
            num1 = (int) num2 * 752608335 ^ -755087113;
            continue;
          case 28:
label_20:
            timeSpan = new TimeSpan(0, 1, 0);
            num1 = -1696316594;
            continue;
          case 29:
            if (maxOccurrences > 0)
            {
              num1 = (int) num2 * 1149051793 ^ -245791807;
              continue;
            }
            num4 = 0;
            goto label_43;
          case 31:
            num1 = (int) num2 * -1076206663 ^ -637388089;
            continue;
          case 32:
            int num7 = !flag1 ? -973013891 : (num7 = -813344268);
            num1 = num7 ^ (int) num2 * 403885531;
            continue;
          case 33:
            num1 = (int) num2 * -1417977278 ^ -267231924;
            continue;
          case 34:
            flag2 = this.Includes(aDate);
            num1 = -1859585573;
            continue;
          case 35:
            intervalPrecision = precision;
            num1 = (int) num2 * 2087503753 ^ 288329460;
            continue;
          case 36:
            num1 = (int) num2 * 873188500 ^ 1771719062;
            continue;
          case 37:
            int num8 = flag3 ? -1188547504 : (num8 = -1912376160);
            num1 = num8 ^ (int) num2 * 1927168713;
            continue;
          case 38:
            num1 = (int) num2 * 2012291197 ^ 26871836;
            continue;
          case 39:
            dateTimeList1 = dateTimeList2;
            num1 = -2122162730;
            continue;
          case 40:
            int num9 = !flag4 ? -916846218 : (num9 = -806692812);
            num1 = num9 ^ (int) num2 * -668292572;
            continue;
          default:
            goto label_51;
        }
        flag1 = num3 != 0;
        num1 = -1218749879;
        continue;
label_10:
        int num10;
        num1 = num10 = num5 == 0 ? -1005020276 : (num10 = -922874460);
        continue;
label_43:
        flag4 = num4 != 0;
        num1 = -505607562;
      }
label_21:
      throw TemporalExpression.\u200C‬‭‬​⁯‍⁫⁭⁫‫⁯‍‎‫⁬⁪‮⁪⁫​⁭‍‫‎⁭‌‪⁯⁪‌‏⁪⁬‮⁪‍‭⁫‌‮();
label_40:
      throw TemporalExpression.\u202C‬‎‏‏‫⁬‫⁬⁯‪‭⁬⁮⁬​‍‎‪‌‬‫⁯‪⁫​‍‌‪​‍⁬‏‪‮‎‮⁮‌‭‮(\u003CModule\u003E.\u202B‌‍⁯‮‭‫‎‌‏⁫‭‮⁮‏‎‫⁯⁯⁫‪‬‌‏‌⁭⁮‎‎⁪⁫‫⁯‮‍⁮⁬​‮⁫‮<string>(3468400106U));
label_51:
      return dateTimeList1;
    }

    protected TemporalExpression()
    {
label_1:
      int num1 = 792523359;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 141607492)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1678908045 ^ 1109393798;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static Type \u200C⁬‫⁪⁫‌⁬‭‍⁫​‍⁯‏⁫⁮‬‬⁬‭⁬‬‫⁬⁯‍⁯‍‫⁬⁭‏⁭⁪⁮‬‬⁬‏⁮‮([In] object obj0) => obj0.GetType();

    static Type \u200E⁪​⁯‪‭​‏‪⁮⁪⁫⁭‫⁬⁯‎⁪‭⁫⁪‬⁮‍⁬‬‍⁬‫⁮⁬⁫‎‌‭⁯‪‍‪‎‮([In] RuntimeTypeHandle obj0) => Type.GetTypeFromHandle(obj0);

    static bool \u200F‏⁮‌​⁭⁪‭‮‏‍‎⁬‫⁬​‫‍‎‏‌⁮⁬​‬⁪‫‫⁪​⁫⁪⁯‍‪‫⁬⁭‏‬‮([In] Type obj0, [In] Type obj1) => obj0 == obj1;

    static ArgumentException \u202C‬‎‏‏‫⁬‫⁬⁯‪‭⁬⁮⁬​‍‎‪‌‬‫⁯‪⁫​‍‌‪​‍⁬‏‪‮‎‮⁮‌‭‮(
      [In] string obj0)
    {
      return new ArgumentException(obj0);
    }

    static NotImplementedException \u200C‬‭‬​⁯‍⁫⁭⁫‫⁯‍‎‫⁬⁪‮⁪⁫​⁭‍‫‎⁭‌‪⁯⁪‌‏⁪⁬‮⁪‍‭⁫‌‮() => new NotImplementedException();
  }
}
