// Decompiled with JetBrains decompiler
// Type: SmartAssembly.StringsEncoding.Strings
// Assembly: viBrowser Elite, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E65FEE22-663C-4BB1-B104-49ABF096C78C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.iann-3199eae16d9701edf72ed2073c259ab24ccfc6d3fec4ed61ee52d2853f600edd.exe

using SmartAssembly.Zip;
using System.Collections;
using System.IO;
using System.Reflection;

namespace SmartAssembly.StringsEncoding
{
  public class Strings
  {
    private static string MustUseCache = "0";
    private static string OffsetValue = "131";
    private static byte[] bytes = (byte[]) null;
    private static Hashtable hashtable = (Hashtable) null;
    private static bool cacheStrings = false;
    private static int offset = 0;

    [DoNotPrune]
    [DoNotMove]
    public static string Get(int stringID)
    {
      stringID -= Strings.offset;
      if (Strings.cacheStrings)
      {
        string str = (string) \u0007\u0002.\u007E\u0096\u0002((object) Strings.hashtable, (object) stringID);
        if (str != null)
          return str;
      }
      int num1 = stringID;
      byte[] bytes1 = Strings.bytes;
      int index1 = num1;
      int num2 = index1 + 1;
      int num3 = (int) bytes1[index1];
      int num4;
      if ((num3 & 128) == 0)
      {
        num4 = num3;
        if (num4 == 0)
          return string.Empty;
      }
      else if ((num3 & 64) == 0)
      {
        num4 = ((num3 & 63) << 8) + (int) Strings.bytes[num2++];
      }
      else
      {
        int num5 = (num3 & 31) << 24;
        byte[] bytes2 = Strings.bytes;
        int index2 = num2;
        int num6 = index2 + 1;
        int num7 = (int) bytes2[index2] << 16;
        int num8 = num5 + num7;
        byte[] bytes3 = Strings.bytes;
        int index3 = num6;
        int num9 = index3 + 1;
        int num10 = (int) bytes3[index3] << 8;
        int num11 = num8 + num10;
        byte[] bytes4 = Strings.bytes;
        int index4 = num9;
        num2 = index4 + 1;
        int num12 = (int) bytes4[index4];
        num4 = num11 + num12;
      }
      try
      {
        byte[] numArray = \u000E\u0002.\u0098\u0002(\u0008\u0002.\u007E\u0097\u0002((object) \u0089.\u0017\u0002(), Strings.bytes, num2, num4));
        string str = \u000F.\u001F(\u0008\u0002.\u007E\u0097\u0002((object) \u0089.\u0017\u0002(), numArray, 0, numArray.Length));
        if (Strings.cacheStrings)
        {
          try
          {
            \u000F\u0002.\u007E\u0099\u0002((object) Strings.hashtable, (object) stringID, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static Strings()
    {
      if (\u0010.\u007F(Strings.MustUseCache, "1"))
      {
        Strings.cacheStrings = true;
        Strings.hashtable = new Hashtable();
      }
      Strings.offset = \u0010\u0002.\u009A\u0002(Strings.OffsetValue);
      Assembly assembly = \u0007.\u0015();
      Stream stream = \u0011\u0002.\u007E\u009B\u0002((object) assembly, "{9c242d38-0ab8-4340-9398-16978fcc09fd}");
      try
      {
        int length = \u0013\u0002.\u009D\u0002(\u0012\u0002.\u007E\u009C\u0002((object) stream));
        byte[] buffer = new byte[length];
        int num = \u0014\u0002.\u007E\u009E\u0002((object) stream, buffer, 0, length);
        Strings.bytes = SimpleZip.Unzip(buffer);
        \u0006.\u007E\u0014((object) stream);
      }
      finally
      {
        if (stream != null)
          \u0006.\u007E\u0008((object) stream);
      }
    }
  }
}
