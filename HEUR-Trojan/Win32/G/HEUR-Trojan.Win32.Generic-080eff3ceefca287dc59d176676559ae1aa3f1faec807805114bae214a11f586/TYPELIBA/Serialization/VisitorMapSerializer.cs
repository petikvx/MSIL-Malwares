// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Serialization.VisitorMapSerializer
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Pools;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Lists;

namespace TYPELIBA.Serialization
{
  public abstract class VisitorMapSerializer : Field, Listener, Worker
  {
    private List<AdapterErrorPool> m_Task;
    private double[] m_Reponse;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal VisitorMapSerializer(
      string v,
      string ivk,
      long utilamount,
      string config2,
      string last3,
      string setup4)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector(v, ivk, utilamount, config2, last3, setup4);
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int IncludeState() => this.m_Task.Count;

    public abstract ProccesorAccountCollection RunState(int offset_v);

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal List<AdapterErrorPool> SetupObject() => this.m_Task;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void FindObject(List<AdapterErrorPool> def) => this.m_Task = def;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AdapterErrorPool InitState(int mindef)
    {
      int num1 = 4;
      AdapterErrorPool adapterErrorPool;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            if (mindef >= this.m_Task.Count)
            {
              num2 = 1;
              break;
            }
            num1 = 1;
            continue;
          case 1:
            num2 = mindef < 0 ? 1 : 0;
            break;
          case 2:
          case 3:
            goto label_6;
          case 5:
            goto label_10;
          default:
            num1 = 3;
            continue;
        }
        if (num2 == 0)
        {
          adapterErrorPool = this.m_Task[mindef];
          num1 = 5;
        }
        else
          break;
      }
label_6:
      throw new ArgumentException("AxisInfo not available for dimension " + mindef.ToString((IFormatProvider) CultureInfo.InvariantCulture));
label_10:
      return adapterErrorPool;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double[] VisitState() => this.m_Reponse;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CloneObject(double[] first) => this.m_Reponse = first;

    internal static bool VerifyDispatcher() => true;

    internal static bool SetupDispatcher() => false;
  }
}
