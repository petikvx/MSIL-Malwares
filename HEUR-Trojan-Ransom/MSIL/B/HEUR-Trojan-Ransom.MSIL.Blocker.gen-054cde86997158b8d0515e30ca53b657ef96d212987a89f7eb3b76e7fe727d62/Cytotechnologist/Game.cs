// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: InternalSi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: F44F14A9-876B-4F73-A898-F3E4E8A5FAFC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-054cde86997158b8d0515e30ca53b657ef96d212987a89f7eb3b76e7fe727d62.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206E⁪⁮‪‭‌​⁬‏⁪‮⁫⁯​‏⁭⁬‌⁫‬⁫‎⁫‍​‬⁮​⁫⁪​​⁬⁫‍‬‌‮‫‌‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -1972810538;
        bool finished;
        PlayerState[] playerStates;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1788581703)) % 14U)
          {
            case 0:
              num1 = -1706331926;
              continue;
            case 1:
              playerStates = this._playerStates;
              num1 = (int) num2 * 747907458 ^ 773827128;
              continue;
            case 2:
              ++index;
              num1 = -1481363258;
              continue;
            case 3:
              int num3;
              num1 = num3 = playerStates[index].State != State.Playing ? -21754833 : (num3 = -44846468);
              continue;
            case 4:
              finished = true;
              num1 = (int) num2 * 1104080127 ^ 651169368;
              continue;
            case 5:
              index = 0;
              num1 = (int) num2 * -1318377108 ^ -1889121870;
              continue;
            case 6:
              finished = true;
              num1 = (int) num2 * -1924870245 ^ -2132768861;
              continue;
            case 7:
              int num4;
              num1 = num4 = index < playerStates.Length ? -1334643990 : (num4 = -30304401);
              continue;
            case 8:
              num1 = (int) num2 * 1559998243 ^ -1557424963;
              continue;
            case 9:
              finished = false;
              num1 = (int) num2 * -232868590 ^ 394820095;
              continue;
            case 10:
              goto label_1;
            case 11:
              int num5 = this._finished ? -1734225021 : (num5 = -2015038953);
              num1 = num5 ^ (int) num2 * 737676070;
              continue;
            case 13:
              num1 = (int) num2 * 614975320 ^ 1512049021;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished;
      }
    }

    public void ShuffleCards()
    {
label_1:
      int num1 = 1813835807;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 426460767)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);
            num1 = (int) num2 * -1990826477 ^ -2077249166;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public void StartNew()
    {
label_1:
      int num1 = -922561768;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1972018029)) % 10U)
        {
          case 0:
            this.Winners.Clear();
            num1 = (int) num2 * -1862836160 ^ -787811338;
            continue;
          case 1:
            num1 = (int) num2 * 1847736900 ^ -1318212609;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * 1254572905 ^ -556823856;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * 1243157030 ^ 2133132075;
            continue;
          case 4:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -2047369154 ^ 1832399418;
            continue;
          case 5:
            num1 = (int) num2 * 805685506 ^ -1781742409;
            continue;
          case 6:
            goto label_1;
          case 7:
            this._currentTurn = 0;
            num1 = (int) num2 * -1570620975 ^ 318379459;
            continue;
          case 9:
            this._finished = false;
            num1 = (int) num2 * -1848713513 ^ -564063634;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1539536950;
      int num2;
      Player player;
      bool morePlanningSprint;
      int index;
      bool flag1;
      int planningCardsCount;
      bool flag2;
      PlayerState playerState;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1401790641)) % 28U)
        {
          case 0:
            playerState.Sprint = -1;
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -586713332 ^ -1194170310;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * -1439910151 ^ -1301211915;
            continue;
          case 2:
            num2 = 0;
            num1 = 784857820;
            continue;
          case 3:
            num1 = (int) num3 * 1683900906 ^ -538506609;
            continue;
          case 4:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = 12254493;
            continue;
          case 5:
            flag1 = index < this.Players.Length;
            num1 = 544766537;
            continue;
          case 6:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1783251502 ^ -500567456;
            continue;
          case 7:
            int num4;
            num1 = num4 = num2 <= 0 ? 1984364975 : (num4 = 1390964195);
            continue;
          case 8:
            playerState.State = State.Playing;
            num1 = (int) num3 * -397247975 ^ -441113868;
            continue;
          case 9:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -463512337 ^ 1083980927;
            continue;
          case 10:
            playerState.Sprint = 0;
            num1 = (int) num3 * 1438564580 ^ 241133436;
            continue;
          case 11:
            num1 = (int) num3 * -606894233 ^ 20836081;
            continue;
          case 12:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1611207962;
            continue;
          case 13:
            int num5 = flag2 ? -673857004 : (num5 = -1980146109);
            num1 = num5 ^ (int) num3 * 2122434590;
            continue;
          case 14:
            player = this.Players[index];
            num1 = 113455507;
            continue;
          case 15:
            index = 0;
            num1 = (int) num3 * 594542957 ^ 187535151;
            continue;
          case 16:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -721107453 ^ 1652666105;
            continue;
          case 17:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 1937064950 ^ 523304987;
            continue;
          case 18:
            goto label_3;
          case 19:
            goto label_1;
          case 20:
            int num6 = morePlanningSprint ? -2081278005 : (num6 = -686153218);
            num1 = num6 ^ (int) num3 * 695465549;
            continue;
          case 21:
            num1 = 581263433;
            continue;
          case 22:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 1990936055 ^ 823751549;
            continue;
          case 23:
            playerState.Sprint = 1;
            num1 = (int) num3 * -625552061 ^ -600679537;
            continue;
          case 24:
            int num7 = !flag1 ? 1806834519 : (num7 = 412504695);
            num1 = num7 ^ (int) num3 * 12428864;
            continue;
          case 25:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 1580759093 ^ 715249805;
            continue;
          case 26:
            num1 = (int) num3 * -2001539005 ^ -1640398189;
            continue;
          case 27:
            ++index;
            num1 = (int) num3 * -1332398261 ^ -466042547;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 1868105258;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1604593060)) % 18U)
        {
          case 0:
            flag1 = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -1399781497 ^ 1262531644;
            continue;
          case 1:
            num1 = (int) num2 * -427941573 ^ 253087284;
            continue;
          case 2:
            int num3 = !flag1 ? -578865002 : (num3 = -281588208);
            num1 = num3 ^ (int) num2 * 2120726958;
            continue;
          case 3:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -1012614027 ^ 985898813;
            continue;
          case 4:
            ++this._currentPlayer;
            num1 = (int) num2 * 1444023806 ^ -640404376;
            continue;
          case 5:
            num1 = (int) num2 * 957808058 ^ 1399116531;
            continue;
          case 6:
            num1 = (int) num2 * 1384224314 ^ 1554330111;
            continue;
          case 7:
            this._currentPlayer = 0;
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 1030883176 ^ -1443341210;
            continue;
          case 8:
            int num4 = !flag2 ? 826083533 : (num4 = 1950359209);
            num1 = num4 ^ (int) num2 * -1940189287;
            continue;
          case 9:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1091652409 ^ -313486276;
            continue;
          case 10:
            num1 = (int) num2 * -489259712 ^ -316250602;
            continue;
          case 11:
            this.Print((object) Game.\u202C‪⁫‮‫⁫⁬‬‭⁭⁮‏​‍‮⁫⁮⁭⁭‭‭‭⁪⁫​‫‭⁬⁪​‌⁪⁭‌​​⁭‭⁫‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 608520379;
            continue;
          case 12:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1973329652;
            continue;
          case 13:
            goto label_1;
          case 14:
            this.Print((object) Game.\u206A⁮​‍‪‏⁬⁪​‎‍⁫‪‏⁬‭‪⁪⁪​‏​‭⁬⁯‪‎⁯⁮⁭‫⁫‍‍⁫⁭⁬​⁯⁪‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 804000397 ^ 2125685489;
            continue;
          case 15:
            num1 = (int) num2 * 452478373 ^ 135906991;
            continue;
          case 16:
            num1 = (int) num2 * -1719776961 ^ 1392635521;
            continue;
          case 17:
            goto label_3;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 978788814;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        bool flag3;
        bool flag4;
        Player player;
        int index;
        Card card;
        bool flag5;
        int num3;
        PlayerState playerState2;
        bool flag6;
        bool flag7;
        int num4;
        bool flag8;
        bool flag9;
        int num5;
        bool onlyOneWinner;
        bool flag10;
        bool flag11;
        bool flag12;
        bool flag13;
        bool flag14;
        int num6;
        switch ((num2 = (uint) (num1 ^ 965903677)) % 87U)
        {
          case 0:
            flag3 = true;
            num4 = card.Impact;
            num1 = (int) num2 * 1045189748 ^ -1651616204;
            continue;
          case 1:
            flag11 = !flag12;
            num1 = (int) num2 * -1533502887 ^ -1663555690;
            continue;
          case 2:
            this._finished = true;
            num1 = (int) num2 * -107839165 ^ -1898049214;
            continue;
          case 3:
            num1 = 850033749;
            continue;
          case 4:
            num1 = (int) num2 * -499177398 ^ 2072258826;
            continue;
          case 5:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -1108190579 ^ -2005111782;
            continue;
          case 6:
            playerState1.Resources -= num4;
            flag9 = playerState1.Resources < 0;
            num1 = (int) num2 * -257735834 ^ 1000472026;
            continue;
          case 7:
            num1 = (int) num2 * -1286613603 ^ -1859321545;
            continue;
          case 8:
            num1 = 1035571724;
            continue;
          case 9:
            flag2 = !this.Losers.Contains(num3);
            num1 = 1631460169;
            continue;
          case 10:
            num1 = 645094157;
            continue;
          case 11:
            int num7 = flag4 ? -648994859 : (num7 = -1521907669);
            num1 = num7 ^ (int) num2 * -1114762584;
            continue;
          case 12:
            ++playerState1.Sprint;
            num1 = (int) num2 * 2111378806 ^ -441262061;
            continue;
          case 13:
            num1 = (int) num2 * 2083276614 ^ 616776795;
            continue;
          case 14:
            int num8 = flag1 ? 800214717 : (num8 = 1619965030);
            num1 = num8 ^ (int) num2 * 1138292172;
            continue;
          case 15:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 574546973 ^ 1673632735;
            continue;
          case 16:
            playerState1.State = State.Won;
            num1 = (int) num2 * 18660999 ^ 2139124702;
            continue;
          case 17:
            num1 = (int) num2 * -1580440162 ^ -1550517924;
            continue;
          case 18:
            flag8 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -1538128425 ^ -1043650363;
            continue;
          case 19:
            int num9;
            num1 = num9 = playerState1.Sprint <= this.Rules.SprintCount ? 1290227343 : (num9 = 1564602939);
            continue;
          case 20:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -802680386 ^ 968393310;
            continue;
          case 21:
            int num10 = flag2 ? -853673152 : (num10 = -697989591);
            num1 = num10 ^ (int) num2 * -1479859543;
            continue;
          case 22:
            num1 = (int) num2 * 1460975697 ^ -801594240;
            continue;
          case 23:
            num4 = Game.\u206C‮‌⁯‏‮‪‭‬⁫⁫‭⁪⁫⁫⁪⁬⁭‍‌‭⁭⁭‪⁮‮‍⁪⁮‌‎⁯‏⁮‭⁬‬​​⁭‮(0, num5);
            num1 = (int) num2 * 523325554 ^ -1708441993;
            continue;
          case 24:
            flag6 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 1897533696;
            continue;
          case 25:
            num1 = (int) num2 * -1886162549 ^ -426413637;
            continue;
          case 26:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * 2103549062 ^ 439180723;
            continue;
          case 27:
            int num11 = !flag11 ? 529555600 : (num11 = 240109510);
            num1 = num11 ^ (int) num2 * 1128947055;
            continue;
          case 28:
            int num12 = !flag13 ? -311563019 : (num12 = -1401715297);
            num1 = num12 ^ (int) num2 * 262099117;
            continue;
          case 29:
            int num13 = playerState1.State == 0 ? 351511151 : (num13 = 1346089597);
            num1 = num13 ^ (int) num2 * 1063569756;
            continue;
          case 30:
            playerState2.Resources -= Game.\u206C‮‌⁯‏‮‪‭‬⁫⁫‭⁪⁫⁫⁪⁬⁭‍‌‭⁭⁭‪⁮‮‍⁪⁮‌‎⁯‏⁮‭⁬‬​​⁭‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag10 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1705914730 ^ 515684793;
            continue;
          case 31:
            int num14;
            num1 = num14 = index < this._playerStates.Length ? 2035975108 : (num14 = 1190966642);
            continue;
          case 32:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag3 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 228218514 ^ -550401746;
            continue;
          case 33:
            int num15 = flag7 ? 1530185765 : (num15 = 787805458);
            num1 = num15 ^ (int) num2 * 1344708761;
            continue;
          case 34:
            this.Losers.Add(num3);
            num1 = (int) num2 * -472736170 ^ -1597553225;
            continue;
          case 35:
            int num16 = !flag9 ? 814502654 : (num16 = 181684613);
            num1 = num16 ^ (int) num2 * -814443926;
            continue;
          case 36:
            playerState2.State = State.Lose;
            int num17;
            num1 = num17 = this.Losers.Contains(index) ? 294681352 : (num17 = 1123988833);
            continue;
          case 37:
            num1 = (int) num2 * -1095316927 ^ -1748767695;
            continue;
          case 38:
            num1 = (int) num2 * 300171936 ^ 909236062;
            continue;
          case 39:
            num1 = (int) num2 * -628328098 ^ 1773898096;
            continue;
          case 40:
            num1 = (int) num2 * 38160947 ^ 812500196;
            continue;
          case 41:
            goto label_1;
          case 42:
            num1 = (int) num2 * 1371738316 ^ -4081050;
            continue;
          case 43:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 716019598 ^ -1579887265;
            continue;
          case 44:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 1525214535 ^ -1517397857;
            continue;
          case 45:
            flag13 = !flag5;
            num1 = (int) num2 * -977127992 ^ 1035448924;
            continue;
          case 46:
            num1 = 1410426974;
            continue;
          case 47:
            num1 = 33262006;
            continue;
          case 48:
            num1 = 261764198;
            continue;
          case 49:
            num1 = (int) num2 * -1423219552 ^ -23360048;
            continue;
          case 50:
            num1 = 1300815690;
            continue;
          case 51:
            flag4 = flag3;
            num1 = 188199898;
            continue;
          case 52:
            flag1 = num3 < this._playerStates.Length;
            num1 = 1773853500;
            continue;
          case 53:
            this.Losers.Add(index);
            num1 = (int) num2 * -485429423 ^ -1179563500;
            continue;
          case 54:
            ++num3;
            num1 = 2032075425;
            continue;
          case 55:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 768372796 ^ 140802738;
            continue;
          case 56:
            flag3 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -835976636 ^ 1264722234;
            continue;
          case 57:
            flag14 = num3 == playerIndex;
            num1 = 759092076;
            continue;
          case 58:
            player = this.Players[playerIndex];
            num1 = (int) num2 * -2108023881 ^ -1696988570;
            continue;
          case 59:
            int num18 = !flag14 ? -262839083 : (num18 = -2118733278);
            num1 = num18 ^ (int) num2 * 1683063040;
            continue;
          case 60:
            num1 = (int) num2 * 2063342519 ^ -1570965281;
            continue;
          case 61:
            num1 = (int) num2 * -722107568 ^ -64460931;
            continue;
          case 62:
            goto label_3;
          case 63:
            num1 = 1290227343;
            continue;
          case 64:
            int num19 = onlyOneWinner ? 1438759640 : (num19 = 1456726665);
            num1 = num19 ^ (int) num2 * -1373260445;
            continue;
          case 65:
            int num20 = !flag10 ? 1543835845 : (num20 = 153426692);
            num1 = num20 ^ (int) num2 * -1748718963;
            continue;
          case 66:
            num1 = (int) num2 * 1234959754 ^ 1838721525;
            continue;
          case 67:
            num1 = (int) num2 * -607415807 ^ 1795274905;
            continue;
          case 68:
            num1 = (int) num2 * -995422801 ^ -880265239;
            continue;
          case 69:
            this.Print((object) Game.\u206A⁮​‍‪‏⁬⁪​‎‍⁫‪‏⁬‭‪⁪⁪​‏​‭⁬⁯‪‎⁯⁮⁭‫⁫‍‍⁫⁭⁬​⁯⁪‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -987200686 ^ -24172896;
            continue;
          case 70:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1812167121 ^ -975701238;
            continue;
          case 71:
            num1 = (int) num2 * -537349950 ^ -1497731827;
            continue;
          case 72:
            int num21 = flag6 ? -1455105825 : (num21 = -1734536414);
            num1 = num21 ^ (int) num2 * 244328977;
            continue;
          case 73:
            num3 = 0;
            num1 = (int) num2 * -87493984 ^ -373845485;
            continue;
          case 74:
            index = 0;
            num1 = (int) num2 * -1782732655 ^ 211662949;
            continue;
          case 75:
            num1 = (int) num2 * 1100444909 ^ 1878564613;
            continue;
          case 76:
            num1 = (int) num2 * 1041749930 ^ 156239968;
            continue;
          case 77:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 78:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206A⁮​‍‪‏⁬⁪​‎‍⁫‪‏⁬‭‪⁪⁪​‏​‭⁬⁯‪‎⁯⁮⁭‫⁫‍‍⁫⁭⁬​⁯⁪‮("\t", playerState3 != null ? Game.\u202D⁪⁭⁪‏‌⁯‏‪⁪‫⁯‎‎‪‍‪⁯‬⁭‫⁫⁪‪‬‪⁭​‌⁭‭‎‫‪‭‬‪⁪‫⁬‮((object) playerState3) : (string) null));
            num1 = 849304099;
            continue;
          case 79:
            ++index;
            num1 = 1560535802;
            continue;
          case 80:
            card = this.DrawCard();
            flag12 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = 605466051;
            continue;
          case 81:
            int num22 = !flag8 ? 626337651 : (num22 = 968109011);
            num1 = num22 ^ (int) num2 * -403089425;
            continue;
          case 82:
            num1 = (int) num2 * 1414447279 ^ 2096420410;
            continue;
          case 83:
            num1 = (int) num2 * -1860664109 ^ -1210990945;
            continue;
          case 84:
            flag3 = false;
            num1 = 591284504;
            continue;
          case 85:
            flag7 = playerState1.Sprint < 0;
            num1 = 674042350;
            continue;
          case 86:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag5 ? (object) "ALL " : (object) "", flag12 ? (object) "receives" : (object) "pays", (object) Game.\u206D​‪‌⁯‪⁯⁯‭⁬⁫‎⁬⁪‭‫‌‭⁭‍⁭‭⁯‫​‫‮​​⁮‎‮⁮‏‏⁭‫⁮⁯⁫‮(num4), flag3 ? (object) "advance" : (object) "stay");
            num1 = 1884052877;
            continue;
          default:
            goto label_92;
        }
        flag5 = num6 != 0;
        num1 = 2047120938;
      }
label_3:
      return;
label_92:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1252567911;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1774220432)) % 9U)
        {
          case 1:
            card2 = card1;
            num1 = (int) num2 * -414274928 ^ -1716550636;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -1459295530 ^ -1545361391;
            continue;
          case 3:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 520586193 ^ -309239399;
            continue;
          case 4:
            card1 = this._deck[0];
            num1 = 1230845264;
            continue;
          case 5:
            goto label_1;
          case 6:
            num1 = (int) num2 * 1959488392 ^ -731347233;
            continue;
          case 7:
            int num3 = !flag ? -269044667 : (num3 = -1664940995);
            num1 = num3 ^ (int) num2 * 1444691783;
            continue;
          case 8:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -1202412564 ^ -418285102;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = -223284832;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -865344448)) % 10U)
        {
          case 0:
            str2 = str1;
            num1 = (int) num2 * 1935116766 ^ -1479847485;
            continue;
          case 1:
            int num3 = !flag ? 1790251456 : (num3 = 1723081922);
            num1 = num3 ^ (int) num2 * 1546858582;
            continue;
          case 2:
            num1 = (int) num2 * 1026799911 ^ 37648334;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * -23903009 ^ -1965542313;
            continue;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202D⁪⁭⁪‏‌⁯‏‪⁪‫⁯‎‎‪‍‪⁯‬⁭‫⁫⁪‪‬‪⁭​‌⁭‭‎‫‪‭‬‪⁪‫⁬‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206E‍‌​‏⁬‌‭‬‮‫⁯⁯‪​⁮‮​‍‭‏⁯⁭‌⁮⁯‮⁮‎‭⁪‎⁯⁫⁭‪⁪⁭⁪‌‮(strArray);
            num1 = -2012956973;
            continue;
          case 6:
            index = 0;
            num1 = (int) num2 * -1435075377 ^ 1786755628;
            continue;
          case 7:
            num1 = (int) num2 * -511249070 ^ -2042454725;
            continue;
          case 8:
            flag = index < this._playerStates.Length;
            num1 = -1187556823;
            continue;
          case 9:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more) => Game.\u202E⁫⁬‪‭‮⁫⁬‌⁬‮‫‎‌‮‫‪⁫​⁪‌​‮‍‫⁯⁬⁭‭‎‫‎‌‭⁫‌‌‫‭⁯‮(this._buffer, Game.\u202E⁬⁫⁪⁮‪⁯​‮⁫‭‫⁫⁬⁮⁪‭⁪​‫‪⁭‮‭‌⁯‭⁮⁫‬​‫⁯⁯‮⁯⁪‭⁮‪‮(Game.\u202D⁪⁭⁪‏‌⁯‏‪⁪‫⁯‎‎‪‍‪⁯‬⁭‫⁫⁪‪‬‪⁭​‌⁭‭‎‫‪‭‬‪⁪‫⁬‮(text), more));

    static Random \u206E⁪⁮‪‭‌​⁬‏⁪‮⁫⁯​‏⁭⁬‌⁫‬⁫‎⁫‍​‬⁮​⁫⁪​​⁬⁫‍‬‌‮‫‌‮([In] int obj0) => new Random(obj0);

    static string \u202C‪⁫‮‫⁫⁬‬‭⁭⁮‏​‍‮⁫⁮⁭⁭‭‭‭⁪⁫​‫‭⁬⁪​‌⁪⁭‌​​⁭‭⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206A⁮​‍‪‏⁬⁪​‎‍⁫‪‏⁬‭‪⁪⁪​‏​‭⁬⁯‪‎⁯⁮⁭‫⁫‍‍⁫⁭⁬​⁯⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206C‮‌⁯‏‮‪‭‬⁫⁫‭⁪⁫⁫⁪⁬⁭‍‌‭⁭⁭‪⁮‮‍⁪⁮‌‎⁯‏⁮‭⁬‬​​⁭‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206D​‪‌⁯‪⁯⁯‭⁬⁫‎⁬⁪‭‫‌‭⁭‍⁭‭⁯‫​‫‮​​⁮‎‮⁮‏‏⁭‫⁮⁯⁫‮([In] int obj0) => Math.Abs(obj0);

    static string \u202D⁪⁭⁪‏‌⁯‏‪⁪‫⁯‎‎‪‍‪⁯‬⁭‫⁫⁪‪‬‪⁭​‌⁭‭‎‫‪‭‬‪⁪‫⁬‮([In] object obj0) => obj0.ToString();

    static string \u206E‍‌​‏⁬‌‭‬‮‫⁯⁯‪​⁮‮​‍‭‏⁯⁭‌⁮⁯‮⁮‎‭⁪‎⁯⁫⁭‪⁪⁭⁪‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E⁬⁫⁪⁮‪⁯​‮⁫‭‫⁫⁬⁮⁪‭⁪​‫‪⁭‮‭‌⁯‭⁮⁫‬​‫⁯⁯‮⁯⁪‭⁮‪‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202E⁫⁬‪‭‮⁫⁬‌⁬‮‫‎‌‮‫‪⁫​⁪‌​‮‍‫⁯⁬⁭‭‎‫‎‌‭⁫‌‌‫‭⁯‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
