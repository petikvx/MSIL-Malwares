// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportingService
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using SmartAssembly.Delegates;
using System;
using System.Net;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;

namespace SmartAssembly.SmartExceptionsCore
{
  [WebServiceBinding(Name = "ReportingServiceSoap", Namespace = "http://www.smartassembly.com/webservices/Reporting/")]
  internal sealed class ReportingService : SoapHttpClientProtocol
  {
    [NonSerialized]
    internal static GetString \u008A;

    public ReportingService(string serverUrl)
    {
      this.Url = serverUrl + ReportingService.\u008A(1243);
      this.Timeout = 180000;
    }

    [SoapDocumentMethod("http://www.smartassembly.com/webservices/Reporting/UploadReport2")]
    public string UploadReport2(
      string licenseID,
      [XmlElement(DataType = "base64Binary")] byte[] data,
      string email,
      string appFriendlyName,
      string buildFriendlyNumber)
    {
      return (string) this.Invoke(ReportingService.\u008A(1264), new object[5]
      {
        (object) licenseID,
        (object) data,
        (object) email,
        (object) appFriendlyName,
        (object) buildFriendlyNumber
      })[0];
    }

    protected override WebRequest GetWebRequest(Uri uri)
    {
      WebRequest webRequest = base.GetWebRequest(uri);
      if (webRequest is HttpWebRequest httpWebRequest)
        goto label_2;
label_1:
      return webRequest;
label_2:
      httpWebRequest.ServicePoint.Expect100Continue = false;
      goto label_1;
    }

    static ReportingService() => SmartAssembly.HouseOfCards.Strings.CreateGetStringDelegate(typeof (ReportingService));
  }
}
