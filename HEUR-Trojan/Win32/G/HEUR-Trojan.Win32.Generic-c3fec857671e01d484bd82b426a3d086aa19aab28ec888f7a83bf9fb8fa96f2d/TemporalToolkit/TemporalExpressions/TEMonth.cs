// Decompiled with JetBrains decompiler
// Type: TemporalToolkit.TemporalExpressions.TEMonth
// Assembly: TaskSchedulerExcept, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C99F8105-AF21-447F-A90A-9B9B26790CA7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan.Win32.Generic-c3fec857671e01d484bd82b426a3d086aa19aab28ec888f7a83bf9fb8fa96f2d.exe

using System;
using System.Runtime.InteropServices;

namespace TemporalToolkit.TemporalExpressions
{
  public class TEMonth : TemporalExpression
  {
    public Month Start { get; set; }

    public Month? End { get; set; }

    public TEMonth(DateTime date)
    {
      this.Start = Month.January;
      this.End = new Month?();
    }

    public TEMonth(int month)
    {
label_1:
      int num1 = -736484675;
      while (true)
      {
        uint num2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1265150972)) % 10U)
        {
          case 0:
            if (month <= 12)
            {
              num1 = (int) num2 * 1711494186 ^ -1530920454;
              continue;
            }
            num3 = 1;
            break;
          case 1:
            int num4 = !flag ? -933480424 : (num4 = -533773528);
            num1 = num4 ^ (int) num2 * -383195750;
            continue;
          case 2:
            num1 = (int) num2 * 1289696641 ^ 1075749669;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_9;
          case 5:
            num1 = (int) num2 * -1402732906 ^ -620987808;
            continue;
          case 6:
            this.Start = (Month) month;
            num1 = -887707733;
            continue;
          case 7:
            goto label_3;
          case 8:
            num3 = month < 1 ? 1 : 0;
            break;
          case 9:
            this.End = new Month?();
            num1 = (int) num2 * 656483129 ^ -312088583;
            continue;
          default:
            goto label_15;
        }
        flag = num3 != 0;
        num1 = -1691072525;
      }
label_3:
      return;
label_15:
      return;
label_9:
      throw TEMonth.\u200D​‪⁪⁮‎⁬⁬‎‬⁮‫‬‍‪‍‪‭‫⁭‭⁭‎‏⁬‍​‪‏‌‍‮⁭‬​‌‌‭‏‌‮(\u003CModule\u003E.\u202C‎‍‍⁬‬‏‌‮⁯‬‬⁮⁮⁫‭‍⁭⁭⁭‏⁭⁪‮⁬⁫⁬⁪‫​‎‌‎‬‎‪​‍‌⁯‮<string>(2747075978U));
    }

    public TEMonth(Month month)
    {
      this.Start = month;
      this.End = new Month?();
    }

    public TEMonth(Month start, Month end)
    {
label_1:
      int num1 = 156240959;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2092319759)) % 5U)
        {
          case 0:
            this.End = new Month?(end);
            num1 = (int) num2 * -680823792 ^ 128968208;
            continue;
          case 1:
            num1 = (int) num2 * -736754348 ^ -365012081;
            continue;
          case 2:
            this.Start = start;
            num1 = (int) num2 * -1963436880 ^ 2138924405;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public override bool Includes(DateTime aDate)
    {
label_1:
      int num1 = 1631055025;
      bool flag;
      while (true)
      {
        uint num2;
        Month? end;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ 1106587974)) % 14U)
        {
          case 0:
            end = this.End;
            num1 = (int) num2 * -895021900 ^ -2009865689;
            continue;
          case 1:
            int num5 = end.Value < this.Start ? -76046964 : (num5 = -781891);
            num1 = num5 ^ (int) num2 * 205292551;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = 1870478298;
            continue;
          case 4:
            num1 = (int) num2 * 911400307 ^ -386155924;
            continue;
          case 5:
            num3 = (Month) aDate.Month >= this.Start ? 1 : 0;
            break;
          case 6:
            num1 = (int) num2 * -85060747 ^ 661871675;
            continue;
          case 7:
            num4 = (Month) aDate.Month >= this.Start ? 1 : 0;
            goto label_17;
          case 8:
            flag = this.Start == (Month) aDate.Month;
            num1 = 642016216;
            continue;
          case 9:
            int month1 = aDate.Month;
            end = this.End;
            int num6 = (int) end.Value;
            if (month1 > num6)
            {
              num4 = 0;
              goto label_17;
            }
            else
            {
              num1 = (int) num2 * 1296205264 ^ -180153131;
              continue;
            }
          case 10:
            int month2 = aDate.Month;
            end = this.End;
            int num7 = (int) end.Value;
            if (month2 > num7)
            {
              num1 = (int) num2 * 13709375 ^ -552415147;
              continue;
            }
            num3 = 1;
            break;
          case 11:
            end = this.End;
            int num8 = !end.HasValue ? -1536705676 : (num8 = -967180423);
            num1 = num8 ^ (int) num2 * 500634454;
            continue;
          case 13:
            num1 = (int) num2 * -1023665335 ^ -963035355;
            continue;
          default:
            goto label_21;
        }
        flag = num3 != 0;
        num1 = 266249018;
        continue;
label_17:
        flag = num4 != 0;
        num1 = 642016216;
      }
label_21:
      return flag;
    }

    static ArgumentOutOfRangeException \u200D​‪⁪⁮‎⁬⁬‎‬⁮‫‬‍‪‍‪‭‫⁭‭⁭‎‏⁬‍​‪‏‌‍‮⁭‬​‌‌‭‏‌‮(
      [In] string obj0)
    {
      return new ArgumentOutOfRangeException(obj0);
    }
  }
}
