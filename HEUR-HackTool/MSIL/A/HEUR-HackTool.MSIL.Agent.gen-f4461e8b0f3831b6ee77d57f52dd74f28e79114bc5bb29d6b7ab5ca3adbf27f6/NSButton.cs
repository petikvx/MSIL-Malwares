// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSButton
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  internal class NSButton : Control
  {
    private bool IsMouseDown;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private SizeF SZ1;
    private PointF PT1;
    private Pen P1;
    private Pen P2;
    private PathGradientBrush PB1;
    private LinearGradientBrush GB1;

    public NSButton()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.P1 = new Pen(Color.FromArgb(24, 24, 24));
      this.P2 = new Pen(Color.FromArgb(65, 65, 65));
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.GP1 = ThemeModule.CreateRound(0, 0, checked (this.Width - 1), checked (this.Height - 1), 7);
      this.GP2 = ThemeModule.CreateRound(1, 1, checked (this.Width - 3), checked (this.Height - 3), 7);
      if (this.IsMouseDown)
      {
        this.PB1 = new PathGradientBrush(this.GP1);
        this.PB1.CenterColor = Color.FromArgb(60, 60, 60);
        this.PB1.SurroundColors = new Color[1]
        {
          Color.FromArgb(55, 55, 55)
        };
        this.PB1.FocusScales = new PointF(0.8f, 0.5f);
        ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      }
      else
      {
        this.GB1 = new LinearGradientBrush(this.ClientRectangle, Color.FromArgb(60, 60, 60), Color.FromArgb(55, 55, 55), 90f);
        ThemeModule.G.FillPath((Brush) this.GB1, this.GP1);
      }
      ThemeModule.G.DrawPath(this.P1, this.GP1);
      ThemeModule.G.DrawPath(this.P2, this.GP2);
      this.SZ1 = ThemeModule.G.MeasureString(this.Text, this.Font);
      this.PT1 = new PointF(5f, (float) (this.Height / 2) - this.SZ1.Height / 2f);
      if (this.IsMouseDown)
      {
        ++this.PT1.X;
        ++this.PT1.Y;
      }
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.Black, this.PT1.X + 1f, this.PT1.Y + 1f);
      ThemeModule.G.DrawString(this.Text, this.Font, Brushes.WhiteSmoke, this.PT1);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.IsMouseDown = true;
      this.Invalidate();
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this.IsMouseDown = false;
      this.Invalidate();
    }
  }
}
