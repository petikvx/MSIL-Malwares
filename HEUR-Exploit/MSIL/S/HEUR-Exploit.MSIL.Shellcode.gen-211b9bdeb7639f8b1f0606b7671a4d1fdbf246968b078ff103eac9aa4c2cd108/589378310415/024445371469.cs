// Decompiled with JetBrains decompiler
// Type: 589378310415.024445371469
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003056364933363;
using \u003073564145303;
using \u003083977589061;
using \u003245148583549;
using \u003385746634584;
using \u003398049663276;
using \u003402511475581;
using \u003475310219084;
using \u003570935125301;
using \u003589378310415;
using \u003610305698080;
using \u003715672977127;
using \u003763242632939;
using \u003769200774489;
using \u003948266173665;
using Microsoft.ProgramSynthesis.Translation.Python;
using Microsoft.ProgramSynthesis.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;

namespace \u003589378310415
{
  public static class \u003024445371469
  {
    private const string \u003552286332619 = "_df";

    public static string \u003885038061892(
      this \u003590324994887 _param0,
      \u003392131492675 _param1,
      bool _param2 = false,
      string _param3 = "df")
    {
      return \u003024445371469.\u003284044544867(_param0, _param1, _param2, _param3);
    }

    private static string \u003284044544867(
      \u003590324994887 _param0,
      \u003392131492675 _param1,
      bool _param2,
      string _param3)
    {
      string str;
      switch (_param1)
      {
        case \u003392131492675.List:
          str = \u003024445371469.\u003819194018673(_param0, _param3);
          break;
        case \u003392131492675.Dictionary:
          str = \u003024445371469.\u003498228521821(_param0, _param3);
          break;
        case \u003392131492675.PandasDataFrame:
          str = \u003024445371469.\u003311189240770(_param0, _param2, _param3);
          break;
        case \u003392131492675.PysparkDataFrame:
          str = \u003024445371469.\u003090321650431(_param0, _param3);
          break;
        default:
          throw new NotImplementedException(FormattableString.Invariant(FormattableStringFactory.Create("Code generation mode \"{0}\" is not supported.", (object) _param1)));
      }
      if (string.IsNullOrEmpty(str))
        return str;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine(str);
      stringBuilder.Append("_df");
      return stringBuilder.ToString();
    }

    private static string \u003819194018673(\u003590324994887 _param0, string _param1)
    {
      IColumnInfo columnInfo1;
      IRichDataType richDataType1;
      CollectionUtils.Deconstruct<IColumnInfo, IRichDataType>(_param0.\u003723639815637.Single<KeyValuePair<IColumnInfo, IRichDataType>>(), ref columnInfo1, ref richDataType1);
      IColumnInfo columnInfo2 = columnInfo1;
      IRichDataType richDataType2 = richDataType1;
      if (!(columnInfo2 is IPythonColumnInfo pythonColumnInfo))
        throw new ArgumentException(FormattableString.Invariant(FormattableStringFactory.Create("Expected a {0} with {1} objects.", (object) "DetectTypesLearnResult", (object) "IPythonColumnInfo")));
      CodeBuilder codeBuilder = new CodeBuilder(4U);
      if (!columnInfo2.UseColumnForLearning)
      {
        codeBuilder.AppendLine("# The input data was not string-valued. Return the input list as-is");
        codeBuilder.AppendLine("_df = " + _param1);
      }
      else if (richDataType2 is \u003804667841946)
      {
        codeBuilder.AppendLine("# The input data was detected as being string-valued. Return the input list as-is");
        codeBuilder.AppendLine("_df = " + _param1);
      }
      else
      {
        \u003330545282099 obj = richDataType2.\u003891841082175(pythonColumnInfo, \u003392131492675.List);
        \u003024445371469.\u003465722419308(codeBuilder, (IReadOnlyList<\u003330545282099>) new \u003330545282099[1]
        {
          obj
        });
        string str;
        if (obj.\u003596185537324 == \u003984453720581.OutOfLineFunction)
        {
          codeBuilder.Append(obj.\u003560600266133);
          codeBuilder.AppendLine();
          str = FormattableString.Invariant(FormattableStringFactory.Create("{0}(_x)", (object) obj.\u003013735539155()));
        }
        else
          str = string.Format(obj.\u003345011787051, (object) "_x");
        codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("{0} = [{1} for _x in {2}]", (object) "_df", (object) str, (object) _param1)));
      }
      return codeBuilder.GetCode();
    }

    private static void \u003465722419308(
      CodeBuilder _param0,
      IReadOnlyList<\u003330545282099> _param1,
      params string[] _param2)
    {
      PythonImports pythonImports = new PythonImports();
      foreach (\u003330545282099 obj in (IEnumerable<\u003330545282099>) _param1)
        pythonImports.AddImports((IEnumerable<string>) obj.\u003589273514810);
      pythonImports.AddImports(_param2);
      _param0.Append(pythonImports.GetCode(true, 0U));
    }

    private static void \u003047853124236(
      CodeBuilder _param0,
      IReadOnlyList<\u003330545282099> _param1_1)
    {
      foreach (\u003330545282099 obj in _param1_1.Where<\u003330545282099>((Func<\u003330545282099, bool>) (_param1_2 => _param1_2.\u003596185537324 == \u003984453720581.OutOfLineFunction)))
      {
        _param0.Append(obj.\u003560600266133);
        _param0.AppendLine();
      }
    }

    private static string \u003630495835071(string _param0, string _param1)
    {
      CodeBuilder codeBuilder = new CodeBuilder(4U);
      codeBuilder.AppendLine("# No possible type conversions were detected.");
      codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("# Return the {0} as is.", (object) _param1)));
      codeBuilder.AppendLine();
      codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("{0} = {1}", (object) "_df", (object) _param0)));
      return codeBuilder.GetCode();
    }

    private static List<\u003330545282099> \u003367384421068(
      \u003590324994887 _param0,
      \u003392131492675 _param1)
    {
      // ISSUE: object of a compiler-generated type is created
      // ISSUE: variable of a compiler-generated type
      \u003024445371469.\u003340876206206 obj = (\u003024445371469.\u003340876206206) new \u003024445371469.\u003428695059986();
      // ISSUE: reference to a compiler-generated field
      ((\u003024445371469.\u003428695059986) obj).\u003139684368631 = _param1;
      // ISSUE: reference to a compiler-generated method
      return _param0.\u003723639815637.Select<KeyValuePair<IColumnInfo, IRichDataType>, \u003330545282099>(new Func<KeyValuePair<IColumnInfo, IRichDataType>, \u003330545282099>(obj.\u003452860784928)).ToList<\u003330545282099>();
    }

    private static string \u003498228521821(\u003590324994887 _param0, string _param1_1)
    {
      if (_param0.\u003723639815637.All<KeyValuePair<IColumnInfo, IRichDataType>>((Func<KeyValuePair<IColumnInfo, IRichDataType>, bool>) (_param1_2 => _param1_2.Value == null || _param1_2.Value is \u003804667841946)))
        return \u003024445371469.\u003630495835071(_param1_1, "dictionary");
      List<\u003330545282099> objList = \u003024445371469.\u003367384421068(_param0, \u003392131492675.Dictionary);
      CodeBuilder codeBuilder = new CodeBuilder(4U);
      \u003024445371469.\u003465722419308(codeBuilder, (IReadOnlyList<\u003330545282099>) objList);
      \u003024445371469.\u003047853124236(codeBuilder, (IReadOnlyList<\u003330545282099>) objList);
      using (codeBuilder.NewScope("_df = {", 1U))
      {
        foreach (\u003330545282099 obj in objList)
        {
          string columnNameLiteral = obj.\u003765453338998.ColumnNameLiteral;
          string str1 = FormattableString.Invariant(FormattableStringFactory.Create("{0}[{1}]", (object) _param1_1, (object) columnNameLiteral));
          IRichDataType richDataType = obj.\u003594360904917;
          string str2 = (richDataType != null ? richDataType.\u003954748566909() : (string) null) ?? "pass-through for non-string values";
          if (obj.\u003594360904917 == null || obj.\u003594360904917 is \u003804667841946)
          {
            codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("{0}: {1},  # {2}", (object) columnNameLiteral, (object) str1, (object) str2)));
          }
          else
          {
            string str3;
            if (obj.\u003596185537324 != \u003984453720581.OutOfLineFunction)
              str3 = string.Format(obj.\u003345011787051, (object) "_x");
            else
              str3 = FormattableString.Invariant(FormattableStringFactory.Create("{0}(_x)", (object) obj.\u003013735539155()));
            string str4 = str3;
            codeBuilder.Append(FormattableString.Invariant(FormattableStringFactory.Create("{0}: [{1} for _x in {2}]", (object) columnNameLiteral, (object) str4, (object) str1)));
            codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create(",  # {0}", (object) str2)));
          }
        }
      }
      codeBuilder.AppendLine("}");
      return codeBuilder.GetCode();
    }

    private static string \u003311189240770(
      \u003590324994887 _param0,
      bool _param1_1,
      string _param2)
    {
      if (_param0.\u003723639815637.All<KeyValuePair<IColumnInfo, IRichDataType>>((Func<KeyValuePair<IColumnInfo, IRichDataType>, bool>) (_param1_2 => _param1_2.Value == null || _param1_2.Value is \u003804667841946)))
        return !_param1_1 ? \u003024445371469.\u003630495835071(_param2, "DataFrame") : string.Empty;
      List<\u003330545282099> objList = \u003024445371469.\u003367384421068(_param0, \u003392131492675.PandasDataFrame);
      CodeBuilder codeBuilder = new CodeBuilder(4U);
      \u003024445371469.\u003465722419308(codeBuilder, (IReadOnlyList<\u003330545282099>) objList, "pandas");
      \u003024445371469.\u003047853124236(codeBuilder, (IReadOnlyList<\u003330545282099>) objList);
      using (codeBuilder.NewScope("_df = pandas.DataFrame(", 1U))
      {
        codeBuilder.AppendLine("{");
        codeBuilder.PushIndent(1U);
        foreach (\u003330545282099 obj in objList)
        {
          string columnNameLiteral = obj.\u003765453338998.ColumnNameLiteral;
          string str1 = FormattableString.Invariant(FormattableStringFactory.Create("{0}[{1}]", (object) _param2, (object) columnNameLiteral));
          IRichDataType richDataType = obj.\u003594360904917;
          string str2 = (richDataType != null ? richDataType.\u003954748566909() : (string) null) ?? "pass-through for non-string values";
          if (obj.\u003594360904917 == null || obj.\u003594360904917 is \u003804667841946)
          {
            codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("{0}: {1},  # {2}", (object) columnNameLiteral, (object) str1, (object) str2)));
          }
          else
          {
            string str3 = obj.\u003013735539155();
            codeBuilder.Append(FormattableString.Invariant(FormattableStringFactory.Create("{0}: {1}.apply({2})", (object) columnNameLiteral, (object) str1, (object) str3)));
            codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create(",  # {0}", (object) str2)));
          }
        }
        codeBuilder.PopIndent();
        codeBuilder.AppendLine("},");
        codeBuilder.AppendLine("columns=" + _param2 + ".columns,");
      }
      codeBuilder.AppendLine(")");
      return codeBuilder.GetCode();
    }

    private static string \u003090321650431(\u003590324994887 _param0, string _param1_1)
    {
      if (_param0.\u003723639815637.All<KeyValuePair<IColumnInfo, IRichDataType>>((Func<KeyValuePair<IColumnInfo, IRichDataType>, bool>) (_param1_2 => _param1_2.Value == null || _param1_2.Value is \u003804667841946)))
        return \u003024445371469.\u003630495835071(_param1_1, "Pyspark DataFrame");
      List<\u003330545282099> source = \u003024445371469.\u003367384421068(_param0, \u003392131492675.PysparkDataFrame);
      CodeBuilder codeBuilder = new CodeBuilder(4U);
      \u003024445371469.\u003465722419308(codeBuilder, (IReadOnlyList<\u003330545282099>) source, "pyspark.sql.types", "pyspark.sql.functions");
      \u003024445371469.\u003047853124236(codeBuilder, (IReadOnlyList<\u003330545282099>) source);
      using (codeBuilder.NewScope("_df = (", 1U))
      {
        codeBuilder.Append(_param1_1);
        foreach (\u003330545282099 obj in source.Where<\u003330545282099>((Func<\u003330545282099, bool>) (_param1_3 => _param1_3.\u003594360904917 != null && !(_param1_3.\u003594360904917 is \u003804667841946))).ToList<\u003330545282099>())
        {
          using (codeBuilder.NewScope(".withColumn(", 1U))
          {
            string columnNameLiteral = obj.\u003765453338998.ColumnNameLiteral;
            codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("{0},", (object) columnNameLiteral)));
            using (codeBuilder.NewScope("pyspark.sql.functions.udf(", 1U))
              codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create("{0}, {1}", (object) obj.\u003013735539155(), (object) obj.\u003594360904917.\u003875763543739())));
            codeBuilder.AppendLine(FormattableString.Invariant(FormattableStringFactory.Create(")({0}),", (object) columnNameLiteral)));
          }
          codeBuilder.AppendLine(")");
        }
      }
      codeBuilder.AppendLine(")");
      return codeBuilder.GetCode();
    }

    public static IRichDataType \u003341475145312(IRichDataType _param0)
    {
      switch (_param0)
      {
        case \u003418950873144 obj1:
          return \u003024445371469.\u003146551517059(obj1);
        case \u003415651442941 obj2:
          return \u003024445371469.\u003332090455773(obj2);
        default:
          return _param0;
      }
    }

    private static IRichDataType \u003146551517059(\u003418950873144 _param0) => _param0.\u003237890725016.Where<IEnumerable<\u003513888654302>>((Func<IEnumerable<\u003513888654302>, bool>) (_param1 => _param1.All<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => !_param1.\u003463227775507)))).Any<IEnumerable<\u003513888654302>>((Func<IEnumerable<\u003513888654302>, bool>) (_param1 => _param1.All<\u003513888654302>((Func<\u003513888654302, bool>) (_param1 => string.IsNullOrEmpty(_param1.\u003075930419454.PosixParsingFormatString))))) ? (IRichDataType) new \u003804667841946() : (IRichDataType) _param0;

    private static IRichDataType \u003332090455773(\u003415651442941 _param0) => _param0.\u003245054004157.All<\u003301664478184>((Func<\u003301664478184, bool>) (_param1 => _param1.\u003241991174453 || _param1.\u003463227775507)) ? (IRichDataType) new \u003804667841946() : (IRichDataType) _param0;
  }
}
