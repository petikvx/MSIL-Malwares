// Decompiled with JetBrains decompiler
// Type: WindowsFormsComponentLibrary.ComponentWordMultyTable
// Assembly: IClosableToIDisposableAdap, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A617983-3D9C-4057-8AD9-58124F2A75C3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4c93747030e17a8581b15cce2fd3aee28eb12dab9a8ec33839d083cda679487d.exe

using System;
using System.ComponentModel;
using WindowsFormsComponentLibrary.HelperModels.Configs;

namespace WindowsFormsComponentLibrary
{
  public class ComponentWordMultyTable : Component
  {
    private IContainer components = (IContainer) null;

    public ComponentWordMultyTable() => this.InitializeComponent();

    public ComponentWordMultyTable(IContainer container)
    {
      container.Add((IComponent) this);
      this.InitializeComponent();
    }

    public void CreateTable<T>(ComponentWordTableConfig<T> config)
    {
      if (string.IsNullOrEmpty(config.WordInfo.Path) || string.IsNullOrEmpty(config.WordInfo.Title))
        throw new Exception("Empty path or titel");
      if (config.Headers == null || config.Headers.Count == 0)
        throw new Exception("Not found table heder");
      if (config.PropertiesQueue == null || config.PropertiesQueue.Count == 0)
        throw new Exception("Not found property queue");
      if (config.ColumnsWidth == null || config.ColumnsWidth.Count == 0)
        throw new Exception("Not found columns width");
      if (config.RowsHeight == null || config.RowsHeight.Count == 0)
        throw new Exception("Not found rows height");
      if (config.ListData == null || config.ListData.Count == 0)
        throw new Exception("Not found list data");
      if (config.PropertiesQueue.Count != config.ColumnsWidth.Count || config.ColumnsWidth.Count != config.Headers.Count || config.RowsHeight.Count != config.ListData.Count)
        throw new Exception("Invalid all property! Data inconsistent");
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent() => this.components = (IContainer) new Container();
  }
}
