// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: DESCUNI, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: AF116ADB-6018-4560-80A5-0C66813DC3F1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-4f6383c6ae7c88ff6ab189dc208b3f159d87b824011a697f438a218fc07fa3bb.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
label_1:
        int num1 = 1934479245;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1861619696)) % 6U)
          {
            case 0:
              goto label_1;
            case 1:
              jsonNode = this.m_Dict[aKey];
              num1 = (int) num2 * 864076537 ^ -615839693;
              continue;
            case 2:
              num1 = (int) num2 * 1317421888 ^ -2048739632;
              continue;
            case 3:
              jsonNode = (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
              num1 = 1337609808;
              continue;
            case 5:
              int num3 = !this.m_Dict.ContainsKey(aKey) ? -443062547 : (num3 = -557624731);
              num1 = num3 ^ (int) num2 * 1162615796;
              continue;
            default:
              goto label_7;
          }
        }
label_7:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = 1048273685;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 260463839)) % 8U)
          {
            case 0:
              this.m_Dict.Add(aKey, value);
              num1 = 2071236939;
              continue;
            case 1:
              int num3 = flag ? 2131126149 : (num3 = 1727202448);
              num1 = num3 ^ (int) num2 * -10177721;
              continue;
            case 2:
              flag = this.m_Dict.ContainsKey(aKey);
              num1 = (int) num2 * 1266664243 ^ -497583936;
              continue;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 107187032 ^ 145733625;
              continue;
            case 6:
              num1 = (int) num2 * -812596822 ^ 179973204;
              continue;
            case 7:
              num1 = (int) num2 * -2067360198 ^ 509296925;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
label_1:
        int num1 = 892919214;
        JSONNode jsonNode;
        while (true)
        {
          uint num2;
          bool flag;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1515527204)) % 9U)
          {
            case 0:
              int num4 = !flag ? -220063387 : (num4 = -905699834);
              num1 = num4 ^ (int) num2 * 1135268444;
              continue;
            case 1:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 2:
              if (aIndex < 0)
              {
                num3 = 1;
                break;
              }
              num1 = (int) num2 * 860247260 ^ 1844985547;
              continue;
            case 3:
              jsonNode = (JSONNode) null;
              num1 = 1268463683;
              continue;
            case 4:
              goto label_1;
            case 5:
              num1 = (int) num2 * -1268752737 ^ -822581789;
              continue;
            case 7:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * -1555407602 ^ 1030124088;
              continue;
            case 8:
              num1 = (int) num2 * -1753823811 ^ 2048291538;
              continue;
            default:
              goto label_13;
          }
          flag = num3 != 0;
          num1 = 1841898519;
        }
label_13:
        return jsonNode;
      }
      set
      {
label_1:
        int num1 = -2059164692;
        while (true)
        {
          uint num2;
          int num3;
          switch ((num2 = (uint) (num1 ^ -1121227712)) % 5U)
          {
            case 0:
              num1 = (int) num2 * 1039934521 ^ -377121902;
              continue;
            case 1:
              num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
              break;
            case 2:
              goto label_3;
            case 3:
              goto label_1;
            case 4:
              if (aIndex >= 0)
              {
                num1 = (int) num2 * -1596961662 ^ 1384943866;
                continue;
              }
              num3 = 1;
              break;
            default:
              goto label_10;
          }
          int num4;
          num1 = num4 = num3 == 0 ? -1338057012 : (num4 = -268892146);
        }
label_3:
        return;
label_10:;
      }
    }

    public override int Count
    {
      get
      {
label_1:
        int num1 = 1343401152;
        int count;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1703812550)) % 4U)
          {
            case 1:
              num1 = (int) num2 * -1767395712 ^ 726835218;
              continue;
            case 2:
              count = this.m_Dict.Count;
              num1 = (int) num2 * -1377640242 ^ -1442399345;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return count;
      }
    }

    public override void Add(string aKey, JSONNode aItem)
    {
label_1:
      int num1 = 1962999615;
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 485431496)) % 13U)
        {
          case 0:
            this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
            num1 = 1133709373;
            continue;
          case 1:
            flag2 = this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -950637588 ^ -136875002;
            continue;
          case 2:
            flag1 = !JSONClass.\u206C⁮‮‫⁪⁬‬‬⁮‍⁬‬‌‫⁯‎‎​‪⁫‏‌‪‏⁮⁮‎‍​‫‬‌⁭⁯⁬⁯‭‮‌‮(aKey);
            num1 = (int) num2 * -1199768050 ^ -1038398608;
            continue;
          case 3:
            int num3 = flag1 ? 801929678 : (num3 = 1823575606);
            num1 = num3 ^ (int) num2 * 1534692405;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * -514310502 ^ 1497165792;
            continue;
          case 6:
            int num4 = flag2 ? 457588413 : (num4 = 888260401);
            num1 = num4 ^ (int) num2 * 2080194702;
            continue;
          case 7:
            this.m_Dict.Add(aKey, aItem);
            num1 = 1128071868;
            continue;
          case 8:
            num1 = (int) num2 * 837537231 ^ -687018180;
            continue;
          case 9:
            num1 = 1798261659;
            continue;
          case 10:
            goto label_1;
          case 11:
            num1 = (int) num2 * -756831641 ^ -1169961208;
            continue;
          case 12:
            this.m_Dict[aKey] = aItem;
            num1 = (int) num2 * 1857334355 ^ 70962091;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    public override JSONNode Remove(string aKey)
    {
label_1:
      int num1 = 2039924640;
      bool flag;
      JSONNode jsonNode1;
      JSONNode jsonNode2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1763262881)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = !this.m_Dict.ContainsKey(aKey);
            num1 = (int) num2 * -924429741 ^ -557134185;
            continue;
          case 2:
            jsonNode2 = this.m_Dict[aKey];
            num1 = 2006017434;
            continue;
          case 3:
            this.m_Dict.Remove(aKey);
            jsonNode1 = jsonNode2;
            num1 = (int) num2 * 2120876696 ^ 488237967;
            continue;
          case 4:
            jsonNode1 = (JSONNode) null;
            num1 = (int) num2 * -526238349 ^ 408611938;
            continue;
          case 5:
            int num3 = flag ? -2034702441 : (num3 = -1496218023);
            num1 = num3 ^ (int) num2 * -2044098318;
            continue;
          case 6:
            num1 = (int) num2 * 651568555 ^ 1853033252;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return jsonNode1;
    }

    public override JSONNode Remove(int aIndex)
    {
label_1:
      int num1 = 170065169;
      JSONNode jsonNode;
      while (true)
      {
        uint num2;
        int num3;
        switch ((num2 = (uint) (num1 ^ 1047889021)) % 8U)
        {
          case 0:
            num1 = (int) num2 * 165108480 ^ -547140286;
            continue;
          case 1:
            num1 = (int) num2 * -829022859 ^ -1678774825;
            continue;
          case 2:
            goto label_1;
          case 3:
            jsonNode = (JSONNode) null;
            num1 = (int) num2 * 738255361 ^ 1144945207;
            continue;
          case 4:
            if (aIndex >= 0)
            {
              num1 = (int) num2 * -1257799090 ^ 1677513168;
              continue;
            }
            num3 = 1;
            break;
          case 5:
            num3 = aIndex >= this.m_Dict.Count ? 1 : 0;
            break;
          case 6:
            jsonNode = (JSONNode) null;
            num1 = 1707906229;
            continue;
          default:
            goto label_12;
        }
        int num4;
        num1 = num4 = num3 == 0 ? 2038790427 : (num4 = 131062422);
      }
label_12:
      return jsonNode;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      JSONNode jsonNode;
      try
      {
label_2:
        int num1 = -1657931984;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1522066606)) % 3U)
          {
            case 1:
              jsonNode = (JSONNode) null;
              num1 = (int) num2 * 30535179 ^ -226600471;
              continue;
            case 2:
              goto label_2;
            default:
              goto label_10;
          }
        }
      }
      catch
      {
label_6:
        int num3 = -103417779;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1522066606)) % 4U)
          {
            case 0:
              jsonNode = (JSONNode) null;
              num3 = (int) num4 * -882703744 ^ 112350019;
              continue;
            case 2:
              goto label_6;
            case 3:
              num3 = (int) num4 * 713051953 ^ 2074785009;
              continue;
            default:
              goto label_10;
          }
        }
      }
label_10:
      return jsonNode;
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = 70019764;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          KeyValuePair<string, JSONNode> N;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ 77823966)) % 22U)
            {
              case 0:
                childs = false;
                num2 = 1239042611;
                continue;
              case 1:
                int num4;
                num2 = num4 = !enumerator.MoveNext() ? 1358671993 : (num4 = 1916302913);
                continue;
              case 2:
                num2 = (int) num3 * 1264559837 ^ 1666783411;
                continue;
              case 3:
              case 13:
                this.\u003C\u003E1__state = -3;
                num2 = 1920355066;
                continue;
              case 4:
                int num5 = num1 != 0 ? 1607378383 : (num5 = 1574625598);
                num2 = num5 ^ (int) num3 * 802733817;
                continue;
              case 5:
                num2 = (int) num3 * -227051150 ^ -1634692274;
                continue;
              case 6:
                enumerator = this.m_Dict.GetEnumerator();
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * 317914009 ^ -1840941593;
                continue;
              case 7:
                goto label_1;
              case 8:
                this.\u003C\u003E2__current = N.Value;
                this.\u003C\u003E1__state = 1;
                childs = true;
                num2 = (int) num3 * -881046376 ^ 1646689796;
                continue;
              case 9:
                this.\u003C\u003Em__Finally1();
                num2 = (int) num3 * -3798866 ^ 1656064865;
                continue;
              case 11:
              case 12:
                goto label_21;
              case 14:
                int num6;
                num2 = num6 = num1 == 1 ? 625272635 : (num6 = 664313179);
                continue;
              case 15:
                N = enumerator.Current;
                num2 = 2120120340;
                continue;
              case 16:
              case 20:
                this.\u003C\u003E1__state = -1;
                num2 = 426188618;
                continue;
              case 17:
                num2 = (int) num3 * -1749200794 ^ -894375986;
                continue;
              case 18:
                N = new KeyValuePair<string, JSONNode>();
                num2 = (int) num3 * 1027393552 ^ 2054865957;
                continue;
              case 19:
                enumerator = new Dictionary<string, JSONNode>.Enumerator();
                num2 = (int) num3 * -1632136289 ^ -1873538689;
                continue;
              case 21:
                num2 = (int) num3 * 463633743 ^ 280459485;
                continue;
              default:
                goto label_19;
            }
          }
label_19:
          childs = false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_21:
        return childs;
      }
    }

    public IEnumerator GetEnumerator() => (IEnumerator) new JSONClass.\u003CGetEnumerator\u003Ed__15(0)
    {
      \u003C\u003E4__this = this
    };

    public override string ToString()
    {
label_1:
      int num1 = -1893703070;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -992049405)) % 4U)
        {
          case 1:
            str = "{";
            num1 = (int) num2 * 465259176 ^ -702060563;
            continue;
          case 2:
            num1 = (int) num2 * 1829068704 ^ 1619164475;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_13:
        int num3 = enumerator.MoveNext() ? -854076013 : (num3 = -373148730);
        bool flag;
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -992049405)) % 10U)
          {
            case 0:
              num3 = -854076013;
              continue;
            case 1:
              int num5 = flag ? -1264017616 : (num5 = -1087809848);
              num3 = num5 ^ (int) num4 * 1315133823;
              continue;
            case 2:
              str = JSONClass.\u206A⁭‍‏‬‍‫‍⁪‫​‌‍⁪⁬‏‭⁪⁯⁯⁪⁯‫‌‬‍⁮⁬⁬‬‬⁪‍‭‏‭‭​‭‍‮(new string[5]
              {
                str,
                "\"",
                JSONNode.Escape(current.Key),
                "\":",
                JSONClass.\u202A⁮‮⁪‌⁯‎‪‍‪​⁫‌⁪‪‫‭‎⁮⁭⁭‏⁬‌⁫​​⁯‫⁯⁬​⁪‮⁯‮‎⁪⁮‫‮((object) current.Value)
              });
              num3 = -1187021047;
              continue;
            case 3:
              goto label_13;
            case 4:
              str = JSONClass.\u206D‪‍‍⁫⁯⁬‪​‮‌‏⁭‫⁪‏‮⁪‍⁮‫⁪‮⁭‫‫‭‌‎‌‭​‬‮⁬⁫⁬‮‭‏‮(str, ", ");
              num3 = (int) num4 * -162141220 ^ -1651825607;
              continue;
            case 6:
              current = enumerator.Current;
              num3 = -1525320032;
              continue;
            case 7:
              flag = JSONClass.\u200D‏‍⁫⁭‎‍‭⁪‭​⁬⁬‭‏⁮⁮‭​‎‮‎⁪⁯⁬‍⁬⁮⁫⁭‮⁭⁪‫‍⁫⁯‎‭⁮‮(str) > 2;
              num3 = (int) num4 * 323101920 ^ -2026642060;
              continue;
            case 8:
              num3 = (int) num4 * -476139596 ^ 1998940288;
              continue;
            case 9:
              num3 = (int) num4 * -619732243 ^ -804682049;
              continue;
            default:
              goto label_18;
          }
        }
      }
label_18:
      return JSONClass.\u206D‪‍‍⁫⁯⁬‪​‮‌‏⁭‫⁪‏‮⁪‍⁮‫⁪‮⁭‫‫‭‌‎‌‭​‬‮⁬⁫⁬‮‭‏‮(str, "}");
    }

    public override string ToString(string aPrefix)
    {
      string str1 = "{ ";
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_5:
        int num1 = !enumerator.MoveNext() ? -244366997 : (num1 = -350101884);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1813465779)) % 8U)
          {
            case 0:
              num1 = -350101884;
              continue;
            case 1:
              current = enumerator.Current;
              num1 = -583147062;
              continue;
            case 2:
              num1 = (int) num2 * 448863161 ^ 1608733764;
              continue;
            case 3:
              goto label_5;
            case 4:
              str1 = JSONClass.\u202B‬‪‌‌​⁭‪⁮⁭‫‮⁭⁭‮‏‎‭‮⁮‬‍​‎‍‌‍‮⁭⁭‎​⁯‪⁯‍‏‬‫⁯‮(str1, "\n", aPrefix, "   ");
              str1 = JSONClass.\u206A⁭‍‏‬‍‫‍⁪‫​‌‍⁪⁬‏‭⁪⁯⁯⁪⁯‫‌‬‍⁮⁬⁬‬‬⁪‍‭‏‭‭​‭‍‮(new string[5]
              {
                str1,
                "\"",
                JSONNode.Escape(current.Key),
                "\" : ",
                current.Value.ToString(JSONClass.\u206D‪‍‍⁫⁯⁬‪​‮‌‏⁭‫⁪‏‮⁪‍⁮‫⁪‮⁭‫‫‭‌‎‌‭​‬‮⁬⁫⁬‮‭‏‮(aPrefix, "   "))
              });
              num1 = -1291928905;
              continue;
            case 5:
              str1 = JSONClass.\u206D‪‍‍⁫⁯⁬‪​‮‌‏⁭‫⁪‏‮⁪‍⁮‫⁪‮⁭‫‫‭‌‎‌‭​‬‮⁬⁫⁬‮‭‏‮(str1, ", ");
              num1 = (int) num2 * -1730211059 ^ 330153592;
              continue;
            case 7:
              int num3 = JSONClass.\u200D‏‍⁫⁭‎‍‭⁪‭​⁬⁬‭‏⁮⁮‭​‎‮‎⁪⁯⁬‍⁬⁮⁫⁭‮⁭⁪‫‍⁫⁯‎‭⁮‮(str1) > 3 ? 1825319796 : (num3 = 247072037);
              num1 = num3 ^ (int) num2 * 99112652;
              continue;
            default:
              goto label_11;
          }
        }
      }
label_11:
      string str2 = JSONClass.\u202B‬‪‌‌​⁭‪⁮⁭‫‮⁭⁭‮‏‎‭‮⁮‬‍​‎‍‌‍‮⁭⁭‎​⁯‪⁯‍‏‬‫⁯‮(str1, "\n", aPrefix, "}");
label_12:
      int num4 = -760202740;
      string str3;
      while (true)
      {
        uint num5;
        switch ((num5 = (uint) (num4 ^ -1813465779)) % 4U)
        {
          case 0:
            num4 = (int) num5 * -2087006591 ^ -1719121722;
            continue;
          case 1:
            str3 = str2;
            num4 = (int) num5 * -410669843 ^ -1158951516;
            continue;
          case 2:
            goto label_12;
          default:
            goto label_16;
        }
      }
label_16:
      return str3;
    }

    public override void Serialize(BinaryWriter aWriter)
    {
label_1:
      int num1 = -668437070;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1952926761)) % 6U)
        {
          case 1:
            num1 = (int) num2 * -1232692256 ^ 803412841;
            continue;
          case 2:
            JSONClass.\u200B⁪‫⁯⁬‫‮‎‌‭​​‫‮⁮‮⁬⁭‌‭‮⁭‍‌‏⁬⁮⁫‮‏‍‭‌‭‍​⁬‭‏⁮‮(aWriter, this.m_Dict.Count);
            num1 = (int) num2 * -573448830 ^ -876836015;
            continue;
          case 3:
            JSONClass.\u200B​‍‏‭‫‬⁬‬‏⁫‬‬⁬​⁯‬⁮‮⁮‎‍⁪‬⁫‎‌⁭‫‌​‫⁯‬‍‫⁯⁭‭⁬‮(aWriter, (byte) 2);
            num1 = (int) num2 * 993397468 ^ 1646283423;
            continue;
          case 4:
            num1 = (int) num2 * 741720910 ^ 165638766;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_7:
      Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator();
      try
      {
label_14:
        int num3 = enumerator.MoveNext() ? -1701154618 : (num3 = -1250325295);
        string current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ -1952926761)) % 8U)
          {
            case 0:
              this.m_Dict[current].Serialize(aWriter);
              num3 = (int) num4 * -732213108 ^ -1467302296;
              continue;
            case 1:
              current = enumerator.Current;
              num3 = -1858951397;
              continue;
            case 2:
              JSONClass.\u200F‭‬⁬‍‫‮⁯‭⁮​​‫‌‮‪⁫‮⁭‭⁯⁭‎⁫‍​‭⁫⁯⁬‭⁬‍‍‬‪‎⁮‪‭‮(aWriter, current);
              num3 = (int) num4 * 185527296 ^ -1185155649;
              continue;
            case 3:
              goto label_14;
            case 4:
              num3 = (int) num4 * -2137471783 ^ -767025943;
              continue;
            case 5:
              num3 = -1701154618;
              continue;
            case 6:
              goto label_21;
            case 7:
              num3 = (int) num4 * 1809948435 ^ -147463143;
              continue;
            default:
              goto label_17;
          }
        }
label_21:
        return;
label_17:;
      }
      finally
      {
        enumerator.Dispose();
label_19:
        int num5 = -2055518241;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ -1952926761)) % 3U)
          {
            case 1:
              num5 = (int) num6 * -2019917696 ^ -239772491;
              continue;
            case 2:
              goto label_19;
            default:
              goto label_23;
          }
        }
label_23:;
      }
    }

    public JSONClass()
    {
label_1:
      int num1 = -2106304317;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1106125838)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 296347940 ^ 1643331355;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static bool \u206C⁮‮‫⁪⁬‬‬⁮‍⁬‬‌‫⁯‎‎​‪⁫‏‌‪‏⁮⁮‎‍​‫‬‌⁭⁯⁬⁯‭‮‌‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u200D‏‍⁫⁭‎‍‭⁪‭​⁬⁬‭‏⁮⁮‭​‎‮‎⁪⁯⁬‍⁬⁮⁫⁭‮⁭⁪‫‍⁫⁯‎‭⁮‮([In] string obj0) => obj0.Length;

    static string \u206D‪‍‍⁫⁯⁬‪​‮‌‏⁭‫⁪‏‮⁪‍⁮‫⁪‮⁭‫‫‭‌‎‌‭​‬‮⁬⁫⁬‮‭‏‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202A⁮‮⁪‌⁯‎‪‍‪​⁫‌⁪‪‫‭‎⁮⁭⁭‏⁬‌⁫​​⁯‫⁯⁬​⁪‮⁯‮‎⁪⁮‫‮([In] object obj0) => obj0.ToString();

    static string \u206A⁭‍‏‬‍‫‍⁪‫​‌‍⁪⁬‏‭⁪⁯⁯⁪⁯‫‌‬‍⁮⁬⁬‬‬⁪‍‭‏‭‭​‭‍‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202B‬‪‌‌​⁭‪⁮⁭‫‮⁭⁭‮‏‎‭‮⁮‬‍​‎‍‌‍‮⁭⁭‎​⁯‪⁯‍‏‬‫⁯‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u200B​‍‏‭‫‬⁬‬‏⁫‬‬⁬​⁯‬⁮‮⁮‎‍⁪‬⁫‎‌⁭‫‌​‫⁯‬‍‫⁯⁭‭⁬‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200B⁪‫⁯⁬‫‮‎‌‭​​‫‮⁮‮⁬⁭‌‭‮⁭‍‌‏⁬⁮⁫‮‏‍‭‌‭‍​⁬‭‏⁮‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200F‭‬⁬‍‫‮⁯‭⁮​​‫‌‮‪⁫‮⁭‭⁯⁭‎⁫‍​‭⁫⁯⁬‭⁬‍‍‬‪‎⁮‪‭‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
