// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: BaseConfigHandl, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 8D741A15-4AC4-4AEF-B040-FB58D745B7BF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d821a006c277a3233bf056c5fcd528f49e8482ec7c153568c098d86915113f2c.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -1356666935;
      bool flag1;
      int index;
      int count;
      int aIndex;
      JSONNode jsonNode;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -366064206)) % 19U)
        {
          case 0:
            goto label_3;
          case 1:
            int num3 = !flag2 ? -1813310331 : (num3 = -941256485);
            num1 = num3 ^ (int) num2 * 1159019760;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * -490462312 ^ -1125768547;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * -1812785726 ^ 1948241361;
            continue;
          case 4:
            this._random = Game.\u206D‌‎‮⁪‍⁪‌⁬‌⁭‪⁫⁭‎‎⁭‫‮⁮‎‬​‎‏‏‬⁮​‌‎⁯‫‬‪⁬‎⁪‮⁬‮((int) DateTime.Now.Ticks);
            this.Rules = Rules.Deserialize(json["rules"]);
            num1 = (int) num2 * -382534685 ^ 1981868572;
            continue;
          case 5:
            this._playerStates[index] = new PlayerState();
            num1 = -372097255;
            continue;
          case 6:
            aIndex = 0;
            num1 = (int) num2 * 676643797 ^ -28880671;
            continue;
          case 7:
            flag2 = aIndex < count;
            num1 = -1833073704;
            continue;
          case 8:
            ++index;
            num1 = (int) num2 * -258728833 ^ -1712995280;
            continue;
          case 9:
            num1 = (int) num2 * -2086164698 ^ -537326150;
            continue;
          case 10:
            jsonNode = json["players"];
            count = jsonNode.Count;
            this.Players = new Player[count];
            num1 = (int) num2 * 2004259559 ^ -101739936;
            continue;
          case 11:
            num1 = (int) num2 * -2003303393 ^ -1912657872;
            continue;
          case 12:
            this._buffer = buffer;
            num1 = (int) num2 * -6830045 ^ 1317183444;
            continue;
          case 13:
            goto label_1;
          case 14:
            this._playerStates = new PlayerState[count];
            num1 = (int) num2 * -1899819991 ^ -1112657273;
            continue;
          case 15:
            this._dice = new Dice();
            num1 = (int) num2 * 294061082 ^ 480731596;
            continue;
          case 16:
            int num4 = flag1 ? -2109508245 : (num4 = -1832748420);
            num1 = num4 ^ (int) num2 * -2106665052;
            continue;
          case 17:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -1700649602;
            continue;
          case 18:
            flag1 = index < count;
            num1 = -853277526;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public bool Finished
    {
      get
      {
        bool finished1 = this._finished;
label_1:
        int num1 = 2033545080;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1333691307)) % 15U)
          {
            case 0:
              finished2 = true;
              num1 = (int) num2 * -331061428 ^ 1100863133;
              continue;
            case 1:
              num1 = (int) num2 * 708462035 ^ -1277553720;
              continue;
            case 2:
              ++index;
              num1 = 1493248780;
              continue;
            case 3:
              finished2 = true;
              num1 = (int) num2 * 1292861390 ^ 1728826888;
              continue;
            case 4:
              int num3;
              num1 = num3 = index < playerStates.Length ? 942391134 : (num3 = 532861248);
              continue;
            case 5:
              playerStates = this._playerStates;
              num1 = 2135035883;
              continue;
            case 6:
              int num4 = !finished1 ? -1233494021 : (num4 = -1875694114);
              num1 = num4 ^ (int) num2 * -183889656;
              continue;
            case 8:
              num1 = (int) num2 * -589276051 ^ 125110429;
              continue;
            case 9:
              goto label_1;
            case 10:
              finished2 = false;
              num1 = (int) num2 * 1902272716 ^ -389853867;
              continue;
            case 11:
              num1 = (int) num2 * -2123986997 ^ -6601252;
              continue;
            case 12:
              index = 0;
              num1 = (int) num2 * 367699734 ^ 725429022;
              continue;
            case 13:
              int num5 = playerState.State != State.Playing ? -1595018914 : (num5 = -1785584957);
              num1 = num5 ^ (int) num2 * -1478094638;
              continue;
            case 14:
              playerState = playerStates[index];
              num1 = 1163587350;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = 766595157;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1266808036)) % 8U)
        {
          case 0:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1491714325 ^ 1923761294;
            continue;
          case 1:
            this.Winners.Clear();
            num1 = (int) num2 * 1158832922 ^ 1432734905;
            continue;
          case 2:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * 169077065 ^ 1403797448;
            continue;
          case 3:
            goto label_1;
          case 4:
            this._finished = false;
            num1 = (int) num2 * 2004883010 ^ -1360127396;
            continue;
          case 5:
            this._currentTurn = 0;
            num1 = (int) num2 * 531143540 ^ -437000092;
            continue;
          case 6:
            goto label_3;
          case 7:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1036738096 ^ 1652145841;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1778163005;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      int index;
      Player player;
      bool flag;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1929605108)) % 28U)
        {
          case 0:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1374413965 ^ 1799752717;
            continue;
          case 1:
            num1 = (int) num3 * -1945103477 ^ 732512692;
            continue;
          case 2:
            int num4;
            num1 = num4 = num2 <= 0 ? 1390771140 : (num4 = 957304992);
            continue;
          case 3:
            int num5 = flag ? -566923575 : (num5 = -266531682);
            num1 = num5 ^ (int) num3 * 333706968;
            continue;
          case 4:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1585364456 ^ 334112198;
            continue;
          case 5:
            playerState.State = State.Playing;
            num1 = (int) num3 * 47271496 ^ 287158644;
            continue;
          case 6:
            num1 = (int) num3 * 16132950 ^ -193178125;
            continue;
          case 7:
            flag = index < this.Players.Length;
            num1 = 865972567;
            continue;
          case 8:
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            num1 = (int) num3 * -292948028 ^ -934041285;
            continue;
          case 9:
            num1 = (int) num3 * 705028594 ^ 1316460729;
            continue;
          case 10:
            num1 = 1909002144;
            continue;
          case 11:
            goto label_1;
          case 12:
            num2 = 0;
            num1 = 554683155;
            continue;
          case 13:
            num1 = (int) num3 * 1052288590 ^ 1327943181;
            continue;
          case 14:
            num1 = (int) num3 * -389686574 ^ -1676680302;
            continue;
          case 15:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 16180383 ^ 309756068;
            continue;
          case 16:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -1895153096 ^ 1661726086;
            continue;
          case 17:
            num1 = (int) num3 * 1965846244 ^ -494074029;
            continue;
          case 18:
            num2 = 0;
            int num6 = planningCardsCount != 0 ? -1318475066 : (num6 = -1015843720);
            num1 = num6 ^ (int) num3 * 2038423982;
            continue;
          case 19:
            ++index;
            num1 = (int) num3 * -411657489 ^ 704219222;
            continue;
          case 20:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num7 = !player.UseOneMorePlanningSprint ? 325095750 : (num7 = 826369122);
            num1 = num7 ^ (int) num3 * -596193724;
            continue;
          case 21:
            player = this.Players[index];
            num1 = 2087591612;
            continue;
          case 22:
            goto label_3;
          case 23:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1538637741 ^ -85618035;
            continue;
          case 24:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -257076564 ^ 98624289;
            continue;
          case 25:
            index = 0;
            num1 = (int) num3 * 885158365 ^ 975423628;
            continue;
          case 26:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 1905080805;
            continue;
          case 27:
            num1 = 212694422;
            continue;
          default:
            goto label_30;
        }
      }
label_3:
      return;
label_30:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
      bool flag1 = this._currentPlayer >= this.Players.Length;
label_1:
      int num1 = 649882019;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 667249975)) % 12U)
        {
          case 0:
            this.Print((object) Game.\u200C‏‍⁯‬‪​⁫⁮‪‎‬⁪⁯‌‏⁯‌‍‌‏‬⁯‍‏‏‍‬⁭⁬‍‭‏⁪‍⁪‫‍⁭‍‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * -1913281452 ^ -875153527;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            int num3 = flag2 ? -1973934549 : (num3 = -1958927750);
            num1 = num3 ^ (int) num2 * 1472289515;
            continue;
          case 4:
            int num4 = flag1 ? 420432337 : (num4 = 1274048424);
            num1 = num4 ^ (int) num2 * 1836111723;
            continue;
          case 5:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * 1007396492 ^ 1909082031;
            continue;
          case 6:
            this._currentPlayer = 0;
            flag2 = this._currentTurn > 0;
            num1 = (int) num2 * 1431361279 ^ 1234138098;
            continue;
          case 7:
            this.PlayerTurn(this._currentPlayer);
            num1 = 593066258;
            continue;
          case 8:
            this.Print((object) Game.\u202A‬‪⁬‬⁮⁯‬‫‫⁪⁪‍‌‎⁭⁯‬‭⁬⁭⁪‬‪‫‏‍‎‫⁪‌⁪⁯‍‭‎⁬‪‬⁮‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 1971931326;
            continue;
          case 9:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 1058646737 ^ 1428809686;
            continue;
          case 10:
            num1 = (int) num2 * 1596388831 ^ -855962502;
            continue;
          case 11:
            num1 = (int) num2 * 158518076 ^ -1456819408;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = -139107927;
      while (true)
      {
        uint num2;
        int index;
        PlayerState playerState1;
        bool flag1;
        bool flag2;
        bool flag3;
        int num3;
        bool flag4;
        bool flag5;
        bool flag6;
        Card card;
        bool flag7;
        bool flag8;
        bool flag9;
        Player player;
        int num4;
        bool flag10;
        bool flag11;
        bool flag12;
        PlayerState playerState2;
        bool flag13;
        bool flag14;
        int num5;
        switch ((num2 = (uint) (num1 ^ -71931240)) % 83U)
        {
          case 0:
            playerState1.State = State.Lose;
            flag12 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * 248442001 ^ 1068833142;
            continue;
          case 1:
            this.Losers.Add(num3);
            num1 = (int) num2 * 1858461144 ^ 1511522425;
            continue;
          case 2:
            flag1 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -2120380536;
            continue;
          case 3:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1987818502 ^ -111208599;
            continue;
          case 4:
            num1 = (int) num2 * 709344882 ^ -1186937299;
            continue;
          case 5:
            int num6 = !flag1 ? -1571744515 : (num6 = -892287980);
            num1 = num6 ^ (int) num2 * 1117849717;
            continue;
          case 6:
            this.Losers.Add(index);
            num1 = (int) num2 * -1155100413 ^ -572472510;
            continue;
          case 7:
            goto label_3;
          case 8:
            flag14 = !this.Losers.Contains(num3);
            num1 = -1884899047;
            continue;
          case 9:
            num1 = (int) num2 * 1883419460 ^ 1221522690;
            continue;
          case 10:
            num1 = (int) num2 * 1488235048 ^ 46139149;
            continue;
          case 11:
            num5 = card.Type == 4 ? 1 : 0;
            break;
          case 12:
            num1 = -2077388589;
            continue;
          case 13:
            int num7 = playerState1.State == 0 ? 291923627 : (num7 = 563733832);
            num1 = num7 ^ (int) num2 * -577939771;
            continue;
          case 14:
            int num8 = !flag14 ? 2031038128 : (num8 = 640911069);
            num1 = num8 ^ (int) num2 * 1537776745;
            continue;
          case 15:
            int num9 = flag13 ? -729319999 : (num9 = -1481055873);
            num1 = num9 ^ (int) num2 * -163544547;
            continue;
          case 16:
            num1 = -1724708554;
            continue;
          case 17:
            num1 = -648886491;
            continue;
          case 18:
            num1 = -386309796;
            continue;
          case 19:
            num4 = card.Impact;
            num1 = (int) num2 * 1358836077 ^ -158930865;
            continue;
          case 20:
            int num10 = !flag7 ? 57599048 : (num10 = 326938205);
            num1 = num10 ^ (int) num2 * 1666897355;
            continue;
          case 21:
            this._finished = true;
            num1 = (int) num2 * 191951409 ^ -1184075503;
            continue;
          case 22:
            num1 = (int) num2 * 762502121 ^ 1997142908;
            continue;
          case 23:
            num1 = -971430739;
            continue;
          case 24:
            flag13 = index < this._playerStates.Length;
            num1 = -1498289451;
            continue;
          case 25:
            flag8 = card.Impact < 0;
            num1 = (int) num2 * -1257222983 ^ 1763670044;
            continue;
          case 26:
            ++playerState1.Sprint;
            num1 = (int) num2 * 770032570 ^ 1002924888;
            continue;
          case 27:
            ++num3;
            num1 = -1852627656;
            continue;
          case 28:
            int num11 = flag4 ? 800952338 : (num11 = 1145158124);
            num1 = num11 ^ (int) num2 * 1323758400;
            continue;
          case 29:
            num1 = (int) num2 * 1269049994 ^ 1516130645;
            continue;
          case 30:
            int num12 = flag12 ? -765464212 : (num12 = -1503591518);
            num1 = num12 ^ (int) num2 * 1890682155;
            continue;
          case 31:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 1972906419 ^ 1056952008;
            continue;
          case 32:
            card = this.DrawCard();
            num1 = -1258702407;
            continue;
          case 33:
            num1 = (int) num2 * 1654133409 ^ -1487792917;
            continue;
          case 34:
            num1 = (int) num2 * 299871224 ^ -451325728;
            continue;
          case 35:
            if (!this.Rules.EconomicsAffectsAll)
            {
              num5 = 0;
              break;
            }
            num1 = (int) num2 * 320286766 ^ -2085426823;
            continue;
          case 36:
            flag10 = playerState1.Sprint < 0;
            num1 = -332517651;
            continue;
          case 37:
            flag5 = true;
            num1 = (int) num2 * 127558029 ^ -2127131945;
            continue;
          case 38:
            num1 = (int) num2 * -727543141 ^ 1619132809;
            continue;
          case 39:
            int num13 = card.Impact - player.PlannedForCard(card.Type);
            flag5 = num13 < this.Rules.StayOnSprintMinDiff;
            num4 = Game.\u206F⁪‪⁫‮​‮⁭⁪‌⁫⁬​‌‌‬‪⁯‬⁮‪‭‎⁬‎⁮​⁪⁫‌‍‏‬⁫⁮⁫⁮‬⁫‏‮(0, num13);
            num1 = (int) num2 * 822180413 ^ 1908618886;
            continue;
          case 40:
            flag9 = num3 < this._playerStates.Length;
            num1 = -305366794;
            continue;
          case 41:
            num1 = -96043117;
            continue;
          case 42:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag7 ? (object) "ALL " : (object) "", flag8 ? (object) "receives" : (object) "pays", (object) Game.\u206F‌​⁪⁮⁬‌‍‮‮​‏‌​‍‌‏⁬‭‫⁮⁭‌‫‪⁪​⁫‎‫​⁮⁭⁯⁭‍⁪⁯⁬‪‮(num4), flag5 ? (object) "advance" : (object) "stay");
            num1 = -473671340;
            continue;
          case 43:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * -2119308692 ^ 1771478417;
            continue;
          case 44:
            goto label_1;
          case 45:
            num1 = (int) num2 * 552111235 ^ 746847556;
            continue;
          case 46:
            num1 = (int) num2 * -1555203341 ^ 1984263087;
            continue;
          case 47:
            int num14 = flag6 ? 452708560 : (num14 = 1679645576);
            num1 = num14 ^ (int) num2 * -1300919727;
            continue;
          case 48:
            flag5 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1326301233 ^ -824061468;
            continue;
          case 49:
            int num15 = this.Rules.OnlyOneWinner ? 323496039 : (num15 = 1231599404);
            num1 = num15 ^ (int) num2 * 32662625;
            continue;
          case 50:
            flag3 = !this.Losers.Contains(index);
            num1 = (int) num2 * 961069714 ^ -753488877;
            continue;
          case 51:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200C‏‍⁯‬‪​⁫⁮‪‎‬⁪⁯‌‏⁯‌‍‌‏‬⁯‍‏‏‍‬⁭⁬‍‭‏⁪‍⁪‫‍⁭‍‮("\t", playerState3 != null ? Game.\u206C⁬‏⁬‏⁬‫‬‏‪⁪⁮⁯⁮⁯⁬‬‪​‮‮‭‏​​‪‬​‎‫⁪‮⁬‎‭‮⁫⁮‭‭‮((object) playerState3) : (string) null));
            num1 = -736456861;
            continue;
          case 52:
            num3 = 0;
            num1 = (int) num2 * -1517039259 ^ 38263210;
            continue;
          case 53:
            int num16;
            num1 = num16 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? -1614792682 : (num16 = -1698292546);
            continue;
          case 54:
            num1 = (int) num2 * -1840194149 ^ -883792364;
            continue;
          case 55:
            int num17 = playerState2.Resources < 0 ? -339555806 : (num17 = -735152117);
            num1 = num17 ^ (int) num2 * -284143557;
            continue;
          case 56:
            int num18 = flag2 ? -1251088152 : (num18 = -1157798819);
            num1 = num18 ^ (int) num2 * 741399547;
            continue;
          case 57:
            num1 = (int) num2 * -907280191 ^ -186448359;
            continue;
          case 58:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1042435602 ^ -565475259;
            continue;
          case 59:
            int num19 = flag3 ? -2037339721 : (num19 = -342622458);
            num1 = num19 ^ (int) num2 * -738932267;
            continue;
          case 60:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206F⁪‪⁫‮​‮⁭⁪‌⁫⁬​‌‌‬‪⁯‬⁮‪‭‎⁬‎⁮​⁪⁫‌‍‏‬⁫⁮⁫⁮‬⁫‏‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * -2102497324 ^ 816732242;
            continue;
          case 61:
            num1 = -183477558;
            continue;
          case 62:
            playerState2.State = State.Lose;
            num1 = -432865659;
            continue;
          case 63:
            flag5 = false;
            num1 = -1713013555;
            continue;
          case 64:
            num1 = (int) num2 * -1342512830 ^ 1402718727;
            continue;
          case 65:
            int num20 = !flag9 ? 1288520890 : (num20 = 757132197);
            num1 = num20 ^ (int) num2 * 1245947572;
            continue;
          case 66:
            num1 = (int) num2 * 1788919959 ^ -1884005892;
            continue;
          case 67:
            flag11 = playerState1.Resources < 0;
            num1 = (int) num2 * -510588583 ^ -1620280177;
            continue;
          case 68:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -800033166 ^ -795914717;
            continue;
          case 69:
            flag6 = flag5;
            num1 = -503238376;
            continue;
          case 70:
            this.Print((object) Game.\u200C‏‍⁯‬‪​⁫⁮‪‎‬⁪⁯‌‏⁯‌‍‌‏‬⁯‍‏‏‍‬⁭⁬‍‭‏⁪‍⁪‫‍⁭‍‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 32063331 ^ -393525252;
            continue;
          case 71:
            int num21 = !flag11 ? 1995304434 : (num21 = 1517149062);
            num1 = num21 ^ (int) num2 * -1053925779;
            continue;
          case 72:
            num1 = -497762418;
            continue;
          case 73:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1031334074 ^ -2057351337;
            continue;
          case 74:
            index = 0;
            num1 = (int) num2 * 149004624 ^ -893052542;
            continue;
          case 75:
            num1 = (int) num2 * -257008006 ^ -566381249;
            continue;
          case 76:
            ++playerState1.Sprint;
            num1 = (int) num2 * -509566028 ^ -2041901145;
            continue;
          case 77:
            int num22 = !flag10 ? 1768455994 : (num22 = 593527709);
            num1 = num22 ^ (int) num2 * -1141250049;
            continue;
          case 78:
            num1 = (int) num2 * 2041931375 ^ 1135107423;
            continue;
          case 79:
            flag4 = num3 == playerIndex;
            num1 = (int) num2 * 82859614 ^ -1031350385;
            continue;
          case 80:
            num1 = -13495667;
            continue;
          case 81:
            ++index;
            num1 = -358501854;
            continue;
          case 82:
            num1 = (int) num2 * -331561 ^ 1203814817;
            continue;
          default:
            goto label_88;
        }
        flag7 = num5 != 0;
        flag2 = !flag8;
        num1 = -1609944529;
      }
label_3:
      return;
label_88:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1456401275;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1961497341)) % 7U)
        {
          case 1:
            card2 = card1;
            num1 = (int) num2 * -12380936 ^ 400875513;
            continue;
          case 2:
            int num3 = !flag ? 944310604 : (num3 = 2013990665);
            num1 = num3 ^ (int) num2 * 406965019;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1944315964 ^ 1198256057;
            continue;
          case 5:
            card1 = this._deck[0];
            this._deck.RemoveAt(0);
            num1 = -167534991;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * -455552544 ^ 427316458;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -1383652284;
      bool flag;
      int index;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -86718266)) % 8U)
        {
          case 0:
            goto label_1;
          case 2:
            str1 = "";
            index = 0;
            num1 = (int) num2 * 865441514 ^ 200735532;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * 1982703563 ^ -7867391;
            continue;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206C⁬‏⁬‏⁬‫‬‏‪⁪⁮⁯⁮⁯⁬‬‪​‮‮‭‏​​‪‬​‎‫⁪‮⁬‎‭‮⁫⁮‭‭‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206D​‬‭‪‪⁭⁬‮‫‬‏⁪⁮⁮​⁫‪⁫⁪⁬‬​‬⁬⁬‏​‭⁬⁮‭⁪‫‌⁮‮‍⁯‍‮(strArray);
            num1 = -391245811;
            continue;
          case 5:
            int num3 = !flag ? 1069945311 : (num3 = 1540845636);
            num1 = num3 ^ (int) num2 * -660745922;
            continue;
          case 6:
            flag = index < this._playerStates.Length;
            num1 = -1270326005;
            continue;
          case 7:
            str2 = str1;
            num1 = (int) num2 * 817715369 ^ -1931638680;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1400254363;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2048899508)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -954544926 ^ 1923732630;
            continue;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -1000748137 ^ 1309680859;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -273429000;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1998793651)) % 4U)
        {
          case 0:
            Game.\u202D⁭‍‌​⁫⁯⁭‫‭‎⁪‎​‏‎⁭​‎⁬⁮‏⁪‪⁬‍‎‭‌‌‌⁭‍⁮‍‫‏⁬‮‬‮(this._buffer, str);
            num1 = (int) num2 * 181702919 ^ -1014646329;
            continue;
          case 1:
            str = Game.\u202A⁯‭‏‎‬⁬‍⁯⁪‬⁪‫⁬‪‫‫‪⁭⁬​‭‫⁮‎⁯‌⁭‬‭⁮⁯‬⁯‌‎‫‍⁫‮‮(Game.\u206C⁬‏⁬‏⁬‫‬‏‪⁪⁮⁯⁮⁯⁬‬‪​‮‮‭‏​​‪‬​‎‫⁪‮⁬‎‭‮⁫⁮‭‭‮(text), more);
            num1 = (int) num2 * 1898121755 ^ 8936082;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u206D‌‎‮⁪‍⁪‌⁬‌⁭‪⁫⁭‎‎⁭‫‮⁮‎‬​‎‏‏‬⁮​‌‎⁯‫‬‪⁬‎⁪‮⁬‮([In] int obj0) => new Random(obj0);

    static string \u202A‬‪⁬‬⁮⁯‬‫‫⁪⁪‍‌‎⁭⁯‬‭⁬⁭⁪‬‪‫‏‍‎‫⁪‌⁪⁯‍‭‎⁬‪‬⁮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200C‏‍⁯‬‪​⁫⁮‪‎‬⁪⁯‌‏⁯‌‍‌‏‬⁯‍‏‏‍‬⁭⁬‍‭‏⁪‍⁪‫‍⁭‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206F⁪‪⁫‮​‮⁭⁪‌⁫⁬​‌‌‬‪⁯‬⁮‪‭‎⁬‎⁮​⁪⁫‌‍‏‬⁫⁮⁫⁮‬⁫‏‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206F‌​⁪⁮⁬‌‍‮‮​‏‌​‍‌‏⁬‭‫⁮⁭‌‫‪⁪​⁫‎‫​⁮⁭⁯⁭‍⁪⁯⁬‪‮([In] int obj0) => Math.Abs(obj0);

    static string \u206C⁬‏⁬‏⁬‫‬‏‪⁪⁮⁯⁮⁯⁬‬‪​‮‮‭‏​​‪‬​‎‫⁪‮⁬‎‭‮⁫⁮‭‭‮([In] object obj0) => obj0.ToString();

    static string \u206D​‬‭‪‪⁭⁬‮‫‬‏⁪⁮⁮​⁫‪⁫⁪⁬‬​‬⁬⁬‏​‭⁬⁮‭⁪‫‌⁮‮‍⁯‍‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202A⁯‭‏‎‬⁬‍⁯⁪‬⁪‫⁬‪‫‫‪⁭⁬​‭‫⁮‎⁯‌⁭‬‭⁮⁯‬⁯‌‎‫‍⁫‮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202D⁭‍‌​⁫⁯⁭‫‭‎⁪‎​‏‎⁭​‎⁬⁮‏⁪‪⁬‍‎‭‌‌‌⁭‍⁮‍‫‏⁬‮‬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
