// Decompiled with JetBrains decompiler
// Type: Appointments.Appointment
// Assembly: Appointments, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 296A15D6-EEB9-4ED6-B937-9857DD43439A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Virus.Win32.Sality.sil-945d5753743a3047bb1a01ad46cdb8207c84735e9ce10c7dfb9156bab7ca7d05.exe

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;

namespace Appointments
{
  [Table(Name = "dbo.Appointments")]
  public class Appointment : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(string.Empty);
    private Guid _ID;
    private Guid? _Patient_ID;
    private Guid? _Doctor_ID;
    private DateTime _Appointment_Date;
    private TimeSpan _Appointment_Time;
    private char _Timing_Zone;
    private string _Notes;
    private EntityRef<Doctor> _Doctor;
    private EntityRef<Patient> _Patient;

    public Appointment()
    {
      this._Doctor = new EntityRef<Doctor>();
      this._Patient = new EntityRef<Patient>();
    }

    [Column(DbType = "UniqueIdentifier NOT NULL", IsPrimaryKey = true, Storage = "_ID")]
    public Guid ID
    {
      get => this._ID;
      set
      {
        if (!(this._ID != value))
          return;
        this.SendPropertyChanging();
        this._ID = value;
        this.SendPropertyChanged(nameof (ID));
      }
    }

    [Column(DbType = "UniqueIdentifier", Storage = "_Patient_ID")]
    public Guid? Patient_ID
    {
      get => this._Patient_ID;
      set
      {
        Guid? patientId = this._Patient_ID;
        Guid? nullable = value;
        if ((patientId.HasValue != nullable.HasValue ? 1 : (!patientId.HasValue ? 0 : (patientId.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0))) == 0)
          return;
        if (this._Patient.HasLoadedOrAssignedValue)
          throw new ForeignKeyReferenceAlreadyHasValueException();
        this.SendPropertyChanging();
        this._Patient_ID = value;
        this.SendPropertyChanged(nameof (Patient_ID));
      }
    }

    [Column(DbType = "UniqueIdentifier", Storage = "_Doctor_ID")]
    public Guid? Doctor_ID
    {
      get => this._Doctor_ID;
      set
      {
        Guid? doctorId = this._Doctor_ID;
        Guid? nullable = value;
        if ((doctorId.HasValue != nullable.HasValue ? 1 : (!doctorId.HasValue ? 0 : (doctorId.GetValueOrDefault() != nullable.GetValueOrDefault() ? 1 : 0))) == 0)
          return;
        if (this._Doctor.HasLoadedOrAssignedValue)
          throw new ForeignKeyReferenceAlreadyHasValueException();
        this.SendPropertyChanging();
        this._Doctor_ID = value;
        this.SendPropertyChanged(nameof (Doctor_ID));
      }
    }

    [Column(DbType = "Date NOT NULL", Storage = "_Appointment_Date")]
    public DateTime Appointment_Date
    {
      get => this._Appointment_Date;
      set
      {
        if (!(this._Appointment_Date != value))
          return;
        this.SendPropertyChanging();
        this._Appointment_Date = value;
        this.SendPropertyChanged(nameof (Appointment_Date));
      }
    }

    [Column(DbType = "Time NOT NULL", Storage = "_Appointment_Time")]
    public TimeSpan Appointment_Time
    {
      get => this._Appointment_Time;
      set
      {
        if (!(this._Appointment_Time != value))
          return;
        this.SendPropertyChanging();
        this._Appointment_Time = value;
        this.SendPropertyChanged(nameof (Appointment_Time));
      }
    }

    [Column(DbType = "Char(1) NOT NULL", Storage = "_Timing_Zone")]
    public char Timing_Zone
    {
      get => this._Timing_Zone;
      set
      {
        if ((int) this._Timing_Zone == (int) value)
          return;
        this.SendPropertyChanging();
        this._Timing_Zone = value;
        this.SendPropertyChanged(nameof (Timing_Zone));
      }
    }

    [Column(DbType = "Text", Storage = "_Notes", UpdateCheck = UpdateCheck.Never)]
    public string Notes
    {
      get => this._Notes;
      set
      {
        if (!(this._Notes != value))
          return;
        this.SendPropertyChanging();
        this._Notes = value;
        this.SendPropertyChanged(nameof (Notes));
      }
    }

    [Association(IsForeignKey = true, Name = "Doctor_Appointment", OtherKey = "ID", Storage = "_Doctor", ThisKey = "Doctor_ID")]
    public Doctor Doctor
    {
      get => this._Doctor.Entity;
      set
      {
        Doctor entity = this._Doctor.Entity;
        if (entity == value && this._Doctor.HasLoadedOrAssignedValue)
          return;
        this.SendPropertyChanging();
        if (entity != null)
        {
          this._Doctor.Entity = (Doctor) null;
          entity.Appointments.Remove(this);
        }
        this._Doctor.Entity = value;
        if (value != null)
        {
          value.Appointments.Add(this);
          this._Doctor_ID = new Guid?(value.ID);
        }
        else
          this._Doctor_ID = new Guid?();
        this.SendPropertyChanged(nameof (Doctor));
      }
    }

    [Association(IsForeignKey = true, Name = "Patient_Appointment", OtherKey = "ID", Storage = "_Patient", ThisKey = "Patient_ID")]
    public Patient Patient
    {
      get => this._Patient.Entity;
      set
      {
        Patient entity = this._Patient.Entity;
        if (entity == value && this._Patient.HasLoadedOrAssignedValue)
          return;
        this.SendPropertyChanging();
        if (entity != null)
        {
          this._Patient.Entity = (Patient) null;
          entity.Appointments.Remove(this);
        }
        this._Patient.Entity = value;
        if (value != null)
        {
          value.Appointments.Add(this);
          this._Patient_ID = new Guid?(value.ID);
        }
        else
          this._Patient_ID = new Guid?();
        this.SendPropertyChanged(nameof (Patient));
      }
    }

    public event PropertyChangingEventHandler PropertyChanging;

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void SendPropertyChanging()
    {
      if (this.PropertyChanging == null)
        return;
      this.PropertyChanging((object) this, Appointment.emptyChangingEventArgs);
    }

    protected virtual void SendPropertyChanged(string propertyName)
    {
      if (this.PropertyChanged == null)
        return;
      this.PropertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }
  }
}
