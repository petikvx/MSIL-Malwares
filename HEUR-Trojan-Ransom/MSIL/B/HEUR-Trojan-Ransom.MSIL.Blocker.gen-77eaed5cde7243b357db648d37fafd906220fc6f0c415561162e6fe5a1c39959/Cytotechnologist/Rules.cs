// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: IMuiResourceTypeIdIntEnt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 108B0C51-A542-4D1F-972B-8772D9255CD7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-77eaed5cde7243b357db648d37fafd906220fc6f0c415561162e6fe5a1c39959.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1270796885;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 290554563)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 808963770 ^ 1391885892;
            continue;
          case 3:
            num1 = (int) num2 * 257136281 ^ 1121721105;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      Rules rules = new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
label_1:
      int num1 = 1824787458;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1168910364)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -191186175 ^ -949258682;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1137529586;
      int aIndex;
      bool flag;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1825734783)) % 9U)
        {
          case 0:
            flag = aIndex < numArray.Length;
            num1 = 89545836;
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1670966229;
            continue;
          case 2:
            int num3 = !flag ? 1973180814 : (num3 = 440721856);
            num1 = num3 ^ (int) num2 * -1197372885;
            continue;
          case 3:
            aIndex = 0;
            num1 = (int) num2 * -1997925316 ^ -654216444;
            continue;
          case 4:
            num1 = (int) num2 * -1452198373 ^ 1790439342;
            continue;
          case 6:
            ++aIndex;
            num1 = (int) num2 * -957634929 ^ 549155326;
            continue;
          case 7:
            goto label_1;
          case 8:
            riskChances = numArray;
            num1 = (int) num2 * 872700598 ^ 2082839612;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = -585453480;
      bool flag1;
      int aIndex1;
      List<Card> cardList;
      bool flag2;
      int aIndex2;
      int num2;
      bool flag3;
      Card[] array;
      JSONNode jsonNode;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -368221096)) % 22U)
        {
          case 0:
            ++aIndex1;
            num1 = (int) num3 * -1651858910 ^ 1651158211;
            continue;
          case 1:
            int num4 = !flag1 ? 250182382 : (num4 = 1944261833);
            num1 = num4 ^ (int) num3 * 911598552;
            continue;
          case 2:
            num1 = -932158140;
            continue;
          case 3:
            num2 = 0;
            num1 = -937886933;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num3 * 1623153808 ^ -1439096167;
            continue;
          case 6:
            flag2 = aIndex1 < maxImpact;
            num1 = (int) num3 * 1936239175 ^ 949001851;
            continue;
          case 7:
            int num5;
            num1 = num5 = num2 < jsonNode[aIndex1].AsInt ? -1985430586 : (num5 = -905345492);
            continue;
          case 8:
            flag1 = aIndex2 < count;
            num1 = -866414291;
            continue;
          case 9:
            num1 = (int) num3 * -2124894740 ^ 1689015959;
            continue;
          case 10:
            num1 = (int) num3 * 1016811749 ^ -1283689725;
            continue;
          case 11:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            ++num2;
            num1 = -1568856535;
            continue;
          case 12:
            int num6 = !flag3 ? -452575452 : (num6 = -917934733);
            num1 = num6 ^ (int) num3 * 1719434869;
            continue;
          case 13:
            aIndex2 = 0;
            num1 = (int) num3 * -1162142387 ^ -1992643729;
            continue;
          case 15:
            num1 = (int) num3 * -561051389 ^ 1117002515;
            continue;
          case 16:
            num1 = (int) num3 * -494676208 ^ -1021624960;
            continue;
          case 17:
            flag3 = aIndex1 < maxImpact * 2;
            num1 = -130802738;
            continue;
          case 18:
            cardList = new List<Card>();
            num1 = (int) num3 * -462602913 ^ -717994897;
            continue;
          case 19:
            ++aIndex2;
            num1 = (int) num3 * 1510455114 ^ -1438747446;
            continue;
          case 20:
            array = cardList.ToArray();
            num1 = (int) num3 * 1767876352 ^ 1958816935;
            continue;
          case 21:
            jsonNode = json[aIndex2];
            aIndex1 = 0;
            num1 = -1094801307;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u200D⁭​‫‌‬‏⁫‬‍‏​‪‫​⁮‫‬‮‫‭‬​​‏‫‎⁬‎⁯‏​⁮⁪‌‮‭‭⁫‌‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = 1493315961;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1092410538)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1843989652 ^ -1973443270;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = 1581991501;
      string str1;
      int num2;
      Card[] cards;
      int index;
      Card card1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1351406919)) % 16U)
        {
          case 0:
            str1 = Rules.\u202D‎‏⁫⁯​⁯⁮‮⁮‪⁬‍⁯‍⁯‬‌‭⁫‌‌⁪‏⁫⁬‭‮‌‌⁮‫‫⁯​‪‬‬⁬‭‮(str1, "\n\t");
            num1 = (int) num3 * -228989142 ^ -1495788438;
            continue;
          case 1:
            num1 = (int) num3 * 40772163 ^ -1956361077;
            continue;
          case 2:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * 1096289760 ^ -1595625857;
            continue;
          case 3:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206B⁬‍‎⁫⁫‌​‭⁮⁫​‍⁫‮⁪‏⁪‬‏⁮‫⁮‭‎⁫‪⁪⁫‏‭‫⁪⁯‮‍‍⁭‍‌‮((object) card2) : (string) null;
            str1 = Rules.\u200B⁯⁮⁫⁭⁫‏‮⁪‏⁫‪‫​‏⁭‬‮‮‫‍‫⁭‪‏⁭⁬‏⁮‌‭​⁮⁮‬⁫‬‎⁯‫‮(str3, str4, " ");
            num1 = 2147329974;
            continue;
          case 5:
            str2 = Rules.\u202D‎‏⁫⁯​⁯⁮‮⁮‪⁬‍⁯‍⁯‬‌‭⁫‌‌⁪‏⁫⁬‭‮‌‌⁮‫‫⁯​‪‬‬⁬‭‮(str1, "\n]");
            num1 = (int) num3 * -1986999966 ^ -1109288502;
            continue;
          case 6:
            int num4 = num2 != card1.Type ? -178569307 : (num4 = -1245142186);
            num1 = num4 ^ (int) num3 * -765809277;
            continue;
          case 7:
            num1 = (int) num3 * -1625197523 ^ -1172821000;
            continue;
          case 8:
            int num5;
            num1 = num5 = index >= cards.Length ? 286273602 : (num5 = 594616238);
            continue;
          case 9:
            card1 = cards[index];
            num1 = 2063160731;
            continue;
          case 10:
            str1 = "[\n\t";
            num2 = 0;
            num1 = (int) num3 * 784977118 ^ 798977865;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num3 * 1053016580 ^ 953595505;
            continue;
          case 13:
            num2 = card1.Type;
            num1 = (int) num3 * -1923337920 ^ -1926677191;
            continue;
          case 14:
            num1 = (int) num3 * 1215747252 ^ -1295959780;
            continue;
          case 15:
            ++index;
            num1 = (int) num3 * 789491019 ^ 1426450410;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202D‎‏⁫⁯​⁯⁮‮⁮‪⁬‍⁯‍⁯‬‌‭⁫‌‌⁪‏⁫⁬‭‮‌‌⁮‫‫⁯​‪‬‬⁬‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200B‪‮⁫⁪⁮⁯⁫⁭⁯‬‪‬‎‮​‬‬⁫‪‎‬‌⁮⁯⁮‎‬⁭​‬⁫⁬‬⁪‎​‪‫⁭‮()));
label_1:
      int num1 = 145702947;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 601658108)) % 9U)
        {
          case 0:
            ++index;
            num1 = (int) num2 * 1196911521 ^ -642341490;
            continue;
          case 1:
            num1 = (int) num2 * 1842188096 ^ 413014361;
            continue;
          case 2:
            str2 = Rules.\u202D‎‏⁫⁯​⁯⁮‮⁮‪⁬‍⁯‍⁯‬‌‭⁫‌‌⁪‏⁫⁬‭‮‌‌⁮‫‫⁯​‪‬‬⁬‭‮(str1, " ]");
            num1 = (int) num2 * 1403027937 ^ 1667248384;
            continue;
          case 3:
            index = 1;
            num1 = (int) num2 * 1209246142 ^ 674396888;
            continue;
          case 4:
            flag = index < this.RiskChances.Length;
            num1 = 1977919202;
            continue;
          case 5:
            int num3 = !flag ? -117299297 : (num3 = -1750444918);
            num1 = num3 ^ (int) num2 * 218485501;
            continue;
          case 6:
            goto label_1;
          case 7:
            str1 = Rules.\u200B⁯⁮⁫⁭⁫‏‮⁪‏⁫‪‫​‏⁭‬‮‮‫‍‫⁭‪‏⁭⁬‏⁮‌‭​⁮⁮‬⁫‬‎⁯‫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200B‪‮⁫⁪⁮⁯⁫⁭⁯‬‪‬‎‮​‬‬⁫‪‎‬‌⁮⁯⁮‎‬⁭​‬⁫⁬‬⁪‎​‪‫⁭‮()));
            num1 = 555398411;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200D⁭​‫‌‬‏⁫‬‍‏​‪‫​⁮‫‬‮‫‭‬​​‏‫‎⁬‎⁯‏​⁮⁪‌‮‭‭⁫‌‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202D‎‏⁫⁯​⁯⁮‮⁮‪⁬‍⁯‍⁯‬‌‭⁫‌‌⁪‏⁫⁬‭‮‌‌⁮‫‫⁯​‪‬‬⁬‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206B⁬‍‎⁫⁫‌​‭⁮⁫​‍⁫‮⁪‏⁪‬‏⁮‫⁮‭‎⁫‪⁪⁫‏‭‫⁪⁯‮‍‍⁭‍‌‮([In] object obj0) => obj0.ToString();

    static string \u200B⁯⁮⁫⁭⁫‏‮⁪‏⁫‪‫​‏⁭‬‮‮‫‍‫⁭‪‏⁭⁬‏⁮‌‭​⁮⁮‬⁫‬‎⁯‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200B‪‮⁫⁪⁮⁯⁫⁭⁯‬‪‬‎‮​‬‬⁫‪‎‬‌⁮⁯⁮‎‬⁭​‬⁫⁬‬⁪‎​‪‫⁭‮() => CultureInfo.InvariantCulture;
  }
}
