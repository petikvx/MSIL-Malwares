// Decompiled with JetBrains decompiler
// Type: 126857893763.624422200549
// Assembly: 903211523809, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 9299602E-5CAC-472E-8784-954A0E70F0DC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-930e3513275891a4d2d1e51b0fb588f4b7f0b665bd972c7e0ccfececc5c3933e.exe

using \u003126857893763;
using \u003426934634418;
using \u003883241009814;
using Microsoft.VisualStudio.TaskRunnerExplorer;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace \u003126857893763
{
  internal static class \u003624422200549
  {
    internal static Task<ITaskRunnerNode> \u003207180896800(
      ITaskRunnerCommandContext _param0,
      string _param1)
    {
      // ISSUE: variable of a compiler-generated type
      \u003624422200549.\u003849522935567 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003026449996299 = _param0;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003850825725928 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003967495632670 = AsyncTaskMethodBuilder<ITaskRunnerNode>.Create();
      // ISSUE: cast to a reference type
      // ISSUE: explicit reference operation
      // ISSUE: reference to a compiler-generated field
      (^(\u003714592325948.\u003926744011651&) ref stateMachine).\u003229530559601 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u003967495632670.Start<\u003624422200549.\u003849522935567>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u003967495632670.Task;
    }

    private static void \u003949502178778(List<ITaskRunnerNode> _param0) => _param0?.Sort((Comparison<ITaskRunnerNode>) ((_param1, _param2) =>
    {
      if (string.Compare(_param1.Name, "default", StringComparison.OrdinalIgnoreCase) == 0)
        return -1;
      return string.Compare(_param2.Name, "default", StringComparison.OrdinalIgnoreCase) == 0 ? 1 : string.Compare(_param1.Name, _param2.Name, StringComparison.Ordinal);
    }));

    private static TaskRunnerNode \u003011245585752(
      string _param0,
      \u003969070247281 _param1)
    {
      TaskRunnerNode taskRunnerNode = new TaskRunnerNode(_param1.\u003032362452874, false);
      string directoryName = Path.GetDirectoryName(_param0);
      string str1 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "/c grunt -b \"{0}\" --gruntfile \"{1}\" {2} --color", (object) directoryName, (object) _param0, (object) _param1.\u003032362452874);
      taskRunnerNode.Description = _param1.\u003862901152077;
      taskRunnerNode.Command = (ITaskRunnerCommand) new TaskRunnerCommand(directoryName, "cmd.exe", str1, (string) null);
      taskRunnerNode.Invokable = true;
      foreach (string str2 in _param1.\u003361418396284)
      {
        string str3 = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "/c grunt -b \"{0}\" --gruntfile \"{1}\" {2}:{3} --color", (object) directoryName, (object) _param0, (object) _param1.\u003032362452874, (object) str2);
        taskRunnerNode.Children.Add((ITaskRunnerNode) new TaskRunnerNode(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}:{1}", (object) _param1.\u003032362452874, (object) str2), false)
        {
          Description = _param1.\u003862901152077,
          Command = (ITaskRunnerCommand) new TaskRunnerCommand(directoryName, "cmd.exe", str3, (string) null),
          Invokable = true
        });
      }
      return taskRunnerNode;
    }
  }
}
