// Decompiled with JetBrains decompiler
// Type: Cradiator.Services.CradiatorNinjaModule
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using Cradiator.Audio;
using Cradiator.Config;
using Cradiator.Config.ChangeHandlers;
using Cradiator.Extensions;
using Cradiator.Model;
using Cradiator.Views;
using Ninject.Modules;
using Ninject.Syntax;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Cradiator.Services
{
  public class CradiatorNinjaModule : NinjectModule
  {
    private readonly ICradiatorView _view;
    private readonly IConfigSettings _configSettings;

    public CradiatorNinjaModule(ICradiatorView view, IConfigSettings settings)
    {
      this._view = view;
      this._configSettings = settings;
    }

    public virtual void Load()
    {
      ((BindingRoot) this).Bind<ICradiatorView>().ToConstant(this._view);
      ((BindingRoot) this).Bind<IConfigSettings>().ToConstant(this._configSettings);
      ((IBindingInSyntax<IWebClientFactory>) ((BindingRoot) this).Bind<IWebClientFactory>().To<WebClientFactory>()).InSingletonScope();
      ((IBindingInSyntax<IAudioPlayer>) ((BindingRoot) this).Bind<IAudioPlayer>().To<AudioPlayer>()).InSingletonScope();
      ((IBindingInSyntax<ICountdownTimer>) ((BindingRoot) this).Bind<ICountdownTimer>().To<CountdownTimer>()).InSingletonScope();
      ((IBindingInSyntax<IPollTimer>) ((BindingRoot) this).Bind<IPollTimer>().To<PollTimer>()).InSingletonScope();
      ((IBindingInSyntax<ISpeechSynthesizer>) ((BindingRoot) this).Bind<ISpeechSynthesizer>().To<CradiatorSpeechSynthesizer>()).InSingletonScope();
      ((IBindingInSyntax<ISkinLoader>) ((BindingRoot) this).Bind<ISkinLoader>().To<SkinLoader>()).InSingletonScope();
      ((IBindingInSyntax<IScreenUpdater>) ((BindingRoot) this).Bind<IScreenUpdater>().To<ScreenUpdater>()).InSingletonScope();
      ((IBindingInSyntax<ISettingsWindow>) ((BindingRoot) this).Bind<ISettingsWindow>().To<SettingsWindow>()).InSingletonScope();
      ((IBindingInSyntax<ISpeechTextParser>) ((BindingRoot) this).Bind<ISpeechTextParser>().To<SpeechTextParser>()).InSingletonScope();
      ((IBindingInSyntax<IAppLocation>) ((BindingRoot) this).Bind<IAppLocation>().To<AppLocation>()).InSingletonScope();
      IConfigLocation configLocation = (IConfigLocation) new ConfigLocation();
      ((IBindingInSyntax<IConfigLocation>) ((BindingRoot) this).Bind<IConfigLocation>().ToConstant(configLocation)).InSingletonScope();
      ((BindingRoot) this).Bind<IConfigFileWatcher>().ToConstant((IConfigFileWatcher) new ConfigFileWatcher(this._configSettings, configLocation.FileName));
      ((IBindingInSyntax<IBuildBuster>) ((IBindingWhenSyntax<IBuildBuster>) ((BindingRoot) this).Bind<IBuildBuster>().To<BuildBuster>()).WhenTargetHas<InjectBuildBusterAttribute>()).InSingletonScope();
      ((IBindingInSyntax<IBuildBuster>) ((IBindingWhenSyntax<IBuildBuster>) ((BindingRoot) this).Bind<IBuildBuster>().To<BuildBusterImageDecorator>()).WhenTargetHas<InjectBuildBusterImageDecoratorAttribute>()).InSingletonScope();
      ((IBindingInSyntax<IBuildBuster>) ((IBindingWhenSyntax<IBuildBuster>) ((BindingRoot) this).Bind<IBuildBuster>().To<BuildBusterFullNameDecorator>()).WhenTargetHas<InjectBuildBusterFullNameDecoratorAttribute>()).InSingletonScope();
      ((IBindingInSyntax<CradiatorPresenter>) ((BindingRoot) this).Bind<CradiatorPresenter>().ToSelf()).InSingletonScope();
      this.BindConfigChangeHandlers();
    }

    private void BindConfigChangeHandlers() => ((IEnumerable<Type>) typeof (ConfigChangeHandlerFarm).Assembly.GetExportedTypes()).Where<Type>((Func<Type, bool>) (type => !type.IsInterface)).Where<Type>((Func<Type, bool>) (type => typeof (IConfigChangeHandler).IsAssignableFrom(type))).ForEach<Type>((Action<Type>) (handler => ((IBindingInSyntax<IConfigChangeHandler>) ((BindingRoot) this).Bind<IConfigChangeHandler>().To(handler)).InSingletonScope()));
  }
}
