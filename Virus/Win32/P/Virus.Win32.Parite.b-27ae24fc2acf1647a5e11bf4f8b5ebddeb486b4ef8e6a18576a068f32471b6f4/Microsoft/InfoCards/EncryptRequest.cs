// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.EncryptRequest
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: ADE0A079-11DB-4A46-8BDE-D2A592CA8DEA
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Parite.b-27ae24fc2acf1647a5e11bf4f8b5ebddeb486b4ef8e6a18576a068f32471b6f4.exe

using Microsoft.InfoCards.Diagnostics;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;

namespace Microsoft.InfoCards
{
  internal class EncryptRequest : ClientRequest
  {
    private int m_cryptoSession;
    private bool m_useOAEP;
    private byte[] m_cleartext;
    private byte[] m_encrypted;

    public EncryptRequest(
      Process callingProcess,
      WindowsIdentity callingIdentity,
      IntPtr rpcHandle,
      Stream inArgs,
      Stream outArgs)
      : base(callingProcess, callingIdentity, rpcHandle, inArgs, outArgs)
    {
      this.m_cryptoSession = 0;
      this.m_useOAEP = false;
      this.m_cleartext = (byte[]) null;
      this.m_encrypted = (byte[]) null;
    }

    protected override void OnMarshalInArgs()
    {
      BinaryReader binaryReader = (BinaryReader) new InfoCardBinaryReader(this.InArgs);
      this.m_cryptoSession = binaryReader.ReadInt32();
      this.m_useOAEP = binaryReader.ReadBoolean();
      int count = binaryReader.ReadInt32();
      this.m_cleartext = binaryReader.ReadBytes(count);
      InfoCardTrace.ThrowInvalidArgumentConditional(0 == this.m_cryptoSession, "cryptoSession");
      InfoCardTrace.ThrowInvalidArgumentConditional(this.m_cleartext == null || 0 == this.m_cleartext.Length, "clearText");
    }

    protected override void OnProcess()
    {
      try
      {
        this.m_encrypted = ((AsymmetricCryptoSession) CryptoSession.Find(this.m_cryptoSession, this.CallerPid, this.RequestorIdentity.User)).Encrypt(this.m_useOAEP, this.m_cleartext);
      }
      finally
      {
        Array.Clear((Array) this.m_cleartext, 0, this.m_cleartext.Length);
      }
    }

    protected override void OnMarshalOutArgs() => Utility.SerializeBytes(new BinaryWriter(this.OutArgs), this.m_encrypted);
  }
}
