// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 4a5c2017-21d9-4074-b899-32a29b0f3c26, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0A04E507-2FF2-4D9E-ACC3-5B6E2C54765E
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-a2dcc8321dba5ad48f0b385f3c7883ebaa9f53591488c132ead66b3d626d69c2.exe

using \u0001;
using SmartAssembly.SmartExceptionsCore;
using System;
using System.Diagnostics;
using System.Reflection;
using System.Reflection.Emit;

namespace \u0001
{
  internal static class \u0003
  {
    public static void \u0003()
    {
      StackFrame frame;
      Type declaringType;
      FieldInfo[] fields;
      int index1;
      FieldInfo fieldInfo;
      Type[] typeArray;
      DynamicMethod dynamicMethod;
      ILGenerator ilGenerator;
      MethodInfo[] methods;
      int index2;
      MethodInfo meth;
      StackTrace stackTrace;
      try
      {
        stackTrace = new StackTrace();
        frame = stackTrace.GetFrame(1);
        declaringType = frame.GetMethod().DeclaringType;
        fields = declaringType.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
        for (index1 = 0; index1 < fields.Length; ++index1)
        {
          fieldInfo = fields[index1];
          try
          {
            if ((object) fieldInfo.FieldType == (object) typeof (\u0002))
            {
              string empty = string.Empty;
              Type returnType = typeof (string);
              typeArray = new Type[1]{ typeof (int) };
              Type[] parameterTypes = typeArray;
              Type owner = declaringType;
              dynamicMethod = new DynamicMethod(empty, returnType, parameterTypes, owner, true);
              ilGenerator = dynamicMethod.GetILGenerator();
              ilGenerator.Emit(OpCodes.Ldarg_0);
              methods = typeof (\u0006).GetMethods(BindingFlags.Static | BindingFlags.Public);
              for (index2 = 0; index2 < methods.Length; ++index2)
              {
                meth = methods[index2];
                if ((object) meth.ReturnType == (object) typeof (string))
                {
                  ilGenerator.Emit(OpCodes.Ldc_I4, fieldInfo.MetadataToken & 16777215);
                  ilGenerator.Emit(OpCodes.Sub);
                  ilGenerator.Emit(OpCodes.Call, meth);
                  break;
                }
              }
              ilGenerator.Emit(OpCodes.Ret);
              fieldInfo.SetValue((object) null, (object) (\u0002) dynamicMethod.CreateDelegate(typeof (\u0002)));
              break;
            }
          }
          catch
          {
          }
        }
      }
      catch (Exception ex)
      {
        object[] objArray = new object[12]
        {
          (object) stackTrace,
          (object) frame,
          (object) declaringType,
          (object) fieldInfo,
          (object) dynamicMethod,
          (object) ilGenerator,
          (object) meth,
          (object) fields,
          (object) index1,
          (object) typeArray,
          (object) methods,
          (object) index2
        };
        throw UnhandledException.\u0003(ex, objArray);
      }
    }
  }
}
