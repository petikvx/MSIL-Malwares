// Decompiled with JetBrains decompiler
// Type: ProjNet.Candidates.Message
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Definitions;
using IRefl.Producers;
using ProjNet.Common;
using ProjNet.Structs;
using System;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;

namespace ProjNet.Candidates
{
  public class Message : Rule, StructTokenizerDef, Candidate, CodeObjectProducer
  {
    private double _Reponse;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Message(double v)
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      this.\u002Ector(v, string.Empty, string.Empty, -1L, string.Empty, string.Empty, string.Empty);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Message(
      double asset,
      string pol,
      string proc,
      long reg2_Z,
      string config3,
      string caller4,
      string value5)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_3;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_2;
            case 5:
              goto label_8;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_1:
        this._Reponse = asset;
        num1 = 5;
        continue;
label_2:
        PageAdvisorStructBuilder.PrepareCreator();
        num1 = 0;
        continue;
label_3:
        // ISSUE: explicit constructor call
        base.\u002Ector(pol, proc, reg2_Z, config3, caller4, value5);
        goto label_1;
      }
label_8:
      return;
label_7:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Message RunProcess() => new Message(Math.PI / 180.0, "degree", "EPSG", 9102L, "deg", string.Empty, "=pi/180 radians");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Message NewProcess() => new Message(1.0, "radian", "EPSG", 9101L, "rad", string.Empty, "SI standard unit.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Message ResolveProcess() => new Message(Math.PI / 200.0, "grad", "EPSG", 9105L, "gr", string.Empty, "=pi/200 radians.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Message PatchProcess() => new Message(Math.PI / 200.0, "gon", "EPSG", 9106L, "g", string.Empty, "=pi/200 radians.");

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public double SortStatus() => this._Reponse;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InterruptStatus(double item) => this._Reponse = item;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertStatus()
    {
      int num = 5;
      if (Message.ReflectList())
        goto label_4;
label_1:
      StringBuilder stringBuilder = new StringBuilder();
      num = 4;
label_4:
      string str;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 5:
            goto label_1;
          case 1:
          case 2:
            if (!string.IsNullOrEmpty(this.CountItem()) && this.SelectItem() > 0L)
            {
              stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.CountItem(), (object) this.SelectItem());
              goto case 3;
            }
            else
              goto case 3;
          case 3:
            stringBuilder.Append("]");
            str = stringBuilder.ToString();
            if (true)
            {
              num = 6;
              continue;
            }
            goto case 4;
          case 4:
            stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "UNIT[\"{0}\", {1}", new object[2]
            {
              (object) this.Name,
              (object) this.SortStatus()
            });
            if (Message.ReflectList())
            {
              num = 1;
              continue;
            }
            goto label_8;
          case 6:
            goto label_8;
          default:
            num = 3;
            continue;
        }
      }
label_8:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string AssetItem() => string.Format((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_AngularUnit RadiansPerUnit=\"{0}\">{1}</CS_AngularUnit>", new object[2]
    {
      (object) this.SortStatus(),
      (object) this.ListRegistry()
    });

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool InvokeItem(object info)
    {
      int num = 0;
      bool flag1;
      bool flag2;
      while (true)
      {
        switch (num)
        {
          case 0:
            flag1 = !(info is Message);
            if (Message.ReflectList())
            {
              num = 4;
              continue;
            }
            goto case 1;
          case 1:
          case 4:
            if (!flag1)
            {
              flag2 = (info as Message).SortStatus() == this.SortStatus();
              if (true)
              {
                num = 5;
                continue;
              }
              goto label_9;
            }
            else
              goto label_6;
          case 2:
          case 3:
            goto label_6;
          case 5:
            goto label_9;
          default:
            num = 3;
            continue;
        }
      }
label_6:
      flag2 = false;
label_9:
      return flag2;
    }

    internal static bool ReflectList() => true;

    internal static bool ChangeList() => false;
  }
}
