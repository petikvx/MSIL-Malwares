// Decompiled with JetBrains decompiler
// Type: TexasHoldem.GameManager
// Assembly: EventComm, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 230F04B0-E761-4388-A1F3-FE85FC156328
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.MSIL.NanoBot.bezt-158185cef899d67faabf1e968de02b3a8cbd0446c0fdf0e3579cb4533dd3768d.exe

using System.Collections.Generic;

namespace TexasHoldem
{
  public class GameManager
  {
    private AbstractGameState gameState;
    private DiceRoller roller;
    private Dictionary<ScoringCategory, int> rollScores;
    private ScoreCard scoreCard;

    public GameManager()
    {
      this.gameState = (AbstractGameState) new FirstMoveState();
      this.scoreCard = new ScoreCard();
      this.roller = new DiceRoller();
      this.rollScores = new Dictionary<ScoringCategory, int>((IDictionary<ScoringCategory, int>) this.scoreCard.Scores);
    }

    public List<int> Rolls => this.roller.Dice;

    public Dictionary<ScoringCategory, int> RollScores => this.rollScores;

    public int RollsRemaining => this.roller.RollsRemaining;

    public Dictionary<ScoringCategory, int> Scores => this.scoreCard.Scores;

    public int TotalScore
    {
      get
      {
        int totalScore = 0;
        foreach (ScoringCategory key in ScoringCategories.All)
          totalScore += this.scoreCard.Scores[key];
        return totalScore;
      }
    }

    public bool AcceptScore(ScoringCategory category)
    {
      if (!this.gameState.AcceptScore(this, this.scoreCard, category, this.rollScores))
        return false;
      this.roller = new DiceRoller();
      this.rollScores = ScoreCalculator.CalculateDice(this.roller.SortedDice);
      this.scoreCard.AcceptScore(ScoringCategory.Bonus, ScoreCalculator.CalculateBonus(this.scoreCard.Scores));
      this.rollScores.Add(ScoringCategory.Bonus, ScoreCalculator.CalculateBonus(this.scoreCard.Scores));
      return true;
    }

    public bool CalculateNextRollScores()
    {
      if (!this.gameState.RollDice(this, this.roller))
        return false;
      this.rollScores = ScoreCalculator.CalculateDice(this.roller.SortedDice);
      this.rollScores.Add(ScoringCategory.Bonus, ScoreCalculator.CalculateBonus(this.scoreCard.Scores));
      return true;
    }

    public bool IsOver()
    {
      bool flag = true;
      foreach (ScoringCategory category in ScoringCategories.All)
      {
        flag &= this.scoreCard.IsScoreAccepted(category);
        if (!flag)
          return flag;
      }
      return flag;
    }

    public bool IsScoreAccepted(ScoringCategory category) => this.scoreCard.IsScoreAccepted(category);

    public void NextState(AbstractGameState gameState) => this.gameState = gameState;

    public bool SetWillKeep(int die, bool keep) => this.gameState.SetWillKeep(this, this.roller, die, keep);

    public bool WillKeep(int die) => this.roller.WillKeep(die);
  }
}
