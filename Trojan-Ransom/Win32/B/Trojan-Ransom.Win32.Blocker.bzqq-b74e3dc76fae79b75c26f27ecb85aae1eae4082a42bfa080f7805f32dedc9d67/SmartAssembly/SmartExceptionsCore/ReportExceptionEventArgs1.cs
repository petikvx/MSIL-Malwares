// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartExceptionsCore.ReportExceptionEventArgs1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using System;
using System.IO;

namespace SmartAssembly.SmartExceptionsCore
{
  public class ReportExceptionEventArgs1 : EventArgs
  {
    private ErrorReportSender m_ReportSender;
    private Exception exception;
    private bool canDebug;
    private bool canSendReport = true;
    private bool showContinueCheckBox = true;
    private bool tryToContinue;

    public Exception Exception => this.exception;

    public bool CanDebug => this.canDebug;

    public bool CanSendReport => this.canSendReport;

    public bool ShowContinueCheckbox => this.showContinueCheckBox;

    [Obsolete("Use ShowContinueCheckbox instead, as this is now also false when the builder has chosen not to show the checkbox.")]
    public bool CanContinue => this.showContinueCheckBox;

    internal void SetShowContinueCheckBox(bool value) => this.showContinueCheckBox = value;

    internal void EnableDebug() => this.canDebug = true;

    internal void DisableSendReport() => this.canSendReport = false;

    public bool TryToContinue
    {
      get => this.tryToContinue;
      set => this.tryToContinue = value;
    }

    public void LaunchDebugger()
    {
      if (!this.canDebug)
        return;
      this.m_ReportSender.LaunchDebugger();
    }

    public bool SaveEncryptedReport(string fileName)
    {
      if (File.Exists(fileName))
        File.Delete(fileName);
      return this.m_ReportSender.SaveEncryptedReport(fileName);
    }

    public byte[] GetReportRawData() => this.m_ReportSender.GetReportRawData();

    public bool SendReport() => this.canSendReport && this.m_ReportSender.SendReport();

    public void AddCustomProperty(string name, string value) => this.m_ReportSender.AddCustomProperty(name, (object) value);

    public void AttachFile(string name, string fileName) => this.m_ReportSender.AttachFile(name, fileName);

    internal ReportExceptionEventArgs1(ErrorReportSender reportSender, Exception exception)
    {
      this.m_ReportSender = reportSender;
      this.exception = exception;
    }
  }
}
