// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Messages.Message
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using PreEmptive.Analytics.Common.Utilities;
using PreEmptive.SoS.Client.Cache;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;

namespace PreEmptive.SoS.Client.Messages
{
  public abstract class Message
  {
    private IDictionary<string, string> a;
    internal EventInformation b;
    private static Regex c;

    public BinaryInformation Binary
    {
      get
      {
        int num1 = 6760;
        int num2 = num1;
        num1 = 6760;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 29619;
        int num2 = num1;
        num1 = 29619;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public EventInformation Event
    {
      get
      {
        int num1 = 0;
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
            case 1:
label_5:
              num2 = 17470;
              int num3 = num2;
              num2 = 17470;
              int num4 = num2;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_5;
                default:
                  num2 = 1;
                  if (num2 == 0)
                    ;
                  num2 = 0;
                  if (num2 == 0)
                    ;
                  this.b = new EventInformation();
                  num2 = 2;
                  num1 = num2;
                  continue;
              }
            case 2:
              goto label_9;
          }
          if (this.b == null)
          {
            num2 = 1;
            num1 = num2;
          }
          else
            break;
        }
label_9:
        return this.b;
      }
      set
      {
        int num1 = 8150;
        int num2 = num1;
        num1 = 8150;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public void AddExtendedKeys(IDictionary<string, string> dict)
    {
      int num1 = 0;
      IEnumerator<string> enumerator;
      while (true)
      {
        switch (num1)
        {
          case 0:
            switch (0)
            {
              case 0:
                break;
              default:
                continue;
            }
            break;
          case 1:
            goto label_26;
          case 2:
            goto label_5;
        }
        if (this.a == null)
        {
          num1 = 1;
        }
        else
        {
          switch (true ? 1 : 0)
          {
            case 0:
            case 2:
              num1 = 2;
              continue;
            default:
              if (true)
                ;
              if (false)
                ;
              enumerator = dict.Keys.GetEnumerator();
              goto case 0;
          }
        }
      }
label_5:
      try
      {
        int num2 = 1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 1:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
            case 2:
              if (enumerator.MoveNext())
              {
                string current = enumerator.Current;
                this.a.Add(current, dict[current]);
                num3 = 0;
                num2 = num3;
                continue;
              }
              num3 = 4;
              num2 = num3;
              continue;
            case 3:
              goto label_25;
            case 4:
              num3 = 3;
              num2 = num3;
              continue;
          }
          num3 = 2;
          num2 = num3;
        }
label_25:
        return;
      }
      finally
      {
        int num4 = 0;
        while (true)
        {
          int num5;
          switch (num4)
          {
            case 0:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
            case 1:
              enumerator.Dispose();
              num5 = 2;
              num4 = num5;
              continue;
            case 2:
              goto label_19;
          }
          if (enumerator != null)
          {
            num5 = 1;
            num4 = num5;
          }
          else
            break;
        }
label_19:;
      }
label_26:
      this.a = (IDictionary<string, string>) new Dictionary<string, string>(dict);
    }

    public void AddExtendedKeys(IDictionary dict)
    {
      int num1 = 0;
      int num2;
      IEnumerator enumerator;
      while (true)
      {
        num2 = 1;
        if (num2 == 0)
          ;
        switch (num1)
        {
          case 0:
            switch (0)
            {
              case 0:
                goto label_4;
              default:
                continue;
            }
          case 1:
            this.a = (IDictionary<string, string>) new Dictionary<string, string>(dict.Count);
            num2 = 3;
            num1 = num2;
            continue;
          case 2:
            goto label_6;
          case 3:
            enumerator = dict.Keys.GetEnumerator();
            num2 = 2;
            num1 = num2;
            continue;
          default:
label_4:
            if (this.a == null)
            {
              num2 = 1;
              num1 = num2;
              continue;
            }
            goto case 3;
        }
      }
label_6:
      try
      {
        num2 = 1;
        num1 = num2;
        while (true)
        {
          switch (num1)
          {
            case 0:
              if (enumerator.MoveNext())
              {
                string current = (string) enumerator.Current;
                this.a.Add(current, Message.a(dict[(object) current]));
                num2 = 3;
                num1 = num2;
                continue;
              }
              num2 = 4;
              num1 = num2;
              continue;
            case 1:
              switch (0)
              {
                case 0:
                  break;
                default:
                  continue;
              }
              break;
            case 2:
              goto label_25;
            case 4:
              num2 = 2;
              num1 = num2;
              continue;
          }
          num2 = 0;
          num1 = num2;
        }
label_25:;
      }
      finally
      {
        int num3;
        switch (true ? 1 : 0)
        {
          case 0:
          case 2:
label_20:
            num3 = 2;
            num1 = num3;
            break;
          default:
            if (true)
              ;
            switch (0)
            {
              case 0:
                goto label_18;
            }
            break;
        }
label_17:
        IDisposable disposable;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_22;
            case 1:
              goto label_19;
            case 2:
              disposable.Dispose();
              num3 = 0;
              num1 = num3;
              continue;
            default:
              goto label_18;
          }
        }
label_19:
        if (disposable != null)
          goto label_20;
label_22:
label_18:
        disposable = enumerator as IDisposable;
        num3 = 1;
        num1 = num3;
        goto label_17;
      }
    }

    public void AddExtendedKeyObjectAsString(string key, object value)
    {
      int num1 = 20293;
      int num2 = num1;
      num1 = 20293;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.AddExtendedKey(key, Message.a(value));
          break;
        default:
          goto case 1;
      }
    }

    public void AddExtendedKey(string key, string value)
    {
      int num1 = 1;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_9;
          case 1:
label_1:
            switch (0)
            {
              case 0:
                goto label_3;
              default:
                continue;
            }
          case 2:
            this.a = (IDictionary<string, string>) new Dictionary<string, string>();
            num2 = 0;
            num1 = num2;
            continue;
          default:
label_3:
            num2 = 1;
            if (num2 == 0)
              ;
            if (this.a == null)
            {
              num2 = 7683;
              int num3 = num2;
              num2 = 7683;
              int num4 = num2;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_1;
                default:
                  num2 = 0;
                  if (num2 == 0)
                    ;
                  num2 = 2;
                  num1 = num2;
                  continue;
              }
            }
            else
              goto label_9;
        }
      }
label_9:
      this.a.Add(key, value);
    }

    public IDictionary<string, string> GetExtendedKeys()
    {
      int num1 = 31707;
      int num2 = num1;
      num1 = 31707;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return this.a;
        default:
          goto case 1;
      }
    }

    public abstract void Send(CacheService cache, PlatformClient paclient);

    protected static BinaryInfo ConvertBinaryInfo(BinaryInformation binaryInformation)
    {
      int num1 = 2261;
      int num2 = num1;
      num1 = 2261;
      int num3 = num1;
      int num4;
      int num5;
      switch (num2 == num3 ? 1 : 0)
      {
        case 0:
        case 2:
label_7:
          num4 = 2;
          num5 = num4;
          break;
        default:
          num4 = 0;
          if (num4 == 0)
            ;
          switch (0)
          {
            case 0:
              goto label_4;
          }
          break;
      }
label_3:
      BinaryInfo binaryInfo;
      while (true)
      {
        switch (num5)
        {
          case 0:
            goto label_9;
          case 1:
            goto label_6;
          case 2:
            binaryInfo = new BinaryInfo();
            binaryInfo.ID = new Guid?(binaryInformation.Id);
            binaryInfo.Name = binaryInformation.Name;
            binaryInfo.Version = binaryInformation.Version;
            binaryInfo.LastModified = new DateTime?(binaryInformation.ModifiedDate);
            num4 = 0;
            num5 = num4;
            continue;
          default:
            goto label_4;
        }
      }
label_6:
      if (binaryInformation != null)
        goto label_7;
label_9:
      return binaryInfo;
label_4:
      num4 = 1;
      if (num4 == 0)
        ;
      binaryInfo = (BinaryInfo) null;
      num4 = 1;
      num5 = num4;
      goto label_3;
    }

    protected static bool IsNumeric(string inputString)
    {
      int num1 = 5278;
      int num2 = num1;
      num1 = 5278;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          return Message.c.IsMatch(inputString);
        default:
          goto case 1;
      }
    }

    protected static ExtendedKeys ConvertExtendedKeys(
      IDictionary<string, string> dictionary)
    {
      int A_1 = 2;
      switch (0)
      {
        default:
          int num1 = 1;
          int num2;
          IEnumerator<string> enumerator;
          ExtendedKeys extendedKeys;
          while (true)
          {
            switch (num1)
            {
              case 0:
                goto label_6;
              case 1:
                switch (0)
                {
                  case 0:
                    break;
                  default:
                    continue;
                }
                break;
              case 2:
                goto label_37;
            }
            if (dictionary == null)
            {
              num2 = 2;
              num1 = num2;
            }
            else
            {
              extendedKeys = new ExtendedKeys();
              enumerator = dictionary.Keys.GetEnumerator();
              num2 = 0;
              num1 = num2;
            }
          }
label_6:
          try
          {
            num2 = 0;
            int num3 = num2;
            while (true)
            {
              string current;
              string inputString;
              switch (num3)
              {
                case 0:
                  switch (0)
                  {
                    case 0:
                      break;
                    default:
                      continue;
                  }
                  break;
                case 2:
                  goto label_38;
                case 3:
                  if (Message.IsNumeric(inputString))
                  {
                    num2 = 5;
                    num3 = num2;
                    continue;
                  }
                  extendedKeys.Add(current, inputString);
                  num2 = 1;
                  num3 = num2;
                  continue;
                case 4:
                  num2 = 1;
                  if (num2 == 0)
                    ;
                  num2 = 2;
                  num3 = num2;
                  continue;
                case 5:
                  try
                  {
                    num2 = 1;
                    int num4 = num2;
                    while (true)
                    {
                      switch (num4)
                      {
                        case 0:
                        case 4:
                          num2 = 2;
                          num4 = num2;
                          continue;
                        case 1:
                          switch (0)
                          {
                            case 0:
                              break;
                            default:
                              continue;
                          }
                          break;
                        case 2:
                          goto label_13;
                        case 3:
                          extendedKeys.Add(current, Convert.ToDouble(inputString));
                          num2 = 4;
                          num4 = num2;
                          continue;
                      }
                      if (inputString.Contains(Utils.a("颵", A_1)))
                      {
                        num2 = 3;
                        num4 = num2;
                      }
                      else
                      {
                        extendedKeys.Add(current, Convert.ToInt64(inputString));
                        num2 = 0;
                        num4 = num2;
                      }
                    }
                  }
                  catch (Exception ex)
                  {
                    extendedKeys.Add(current, inputString);
                    break;
                  }
                case 6:
                  if (enumerator.MoveNext())
                  {
                    current = enumerator.Current;
                    inputString = dictionary[current];
                    num2 = 3;
                    num3 = num2;
                    continue;
                  }
                  num2 = 4;
                  num3 = num2;
                  continue;
              }
label_13:
              num2 = 6;
              num3 = num2;
            }
          }
          finally
          {
            int num5 = 1;
            int num6;
            while (true)
            {
              switch (num5)
              {
                case 0:
                  goto label_35;
                case 1:
label_28:
                  switch (0)
                  {
                    case 0:
                      goto label_30;
                    default:
                      continue;
                  }
                case 2:
                  enumerator.Dispose();
                  num6 = 0;
                  num5 = num6;
                  continue;
                default:
label_30:
                  if (enumerator != null)
                  {
                    num6 = 1643;
                    int num7 = num6;
                    num6 = 1643;
                    int num8 = num6;
                    switch (num7 == num8 ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_28;
                      default:
                        num6 = 0;
                        if (num6 == 0)
                          ;
                        num6 = 2;
                        num5 = num6;
                        continue;
                    }
                  }
                  else
                    goto label_35;
              }
            }
label_35:;
          }
label_38:
          return extendedKeys;
label_37:
          return (ExtendedKeys) null;
      }
    }

    private static string a(object A_0)
    {
      int A_1 = 19;
      int num1;
      string str;
      int num2;
      switch (0)
      {
        case 0:
label_2:
          str = (string) null;
          num2 = 1;
          num1 = num2;
          goto default;
        default:
          while (true)
          {
            switch (num1)
            {
              case 0:
                if (!(A_0 is DateTime))
                {
                  num2 = 2;
                  num1 = num2;
                  continue;
                }
                num2 = 9;
                num1 = num2;
                continue;
              case 1:
                if (A_0 == null)
                {
                  num2 = 4;
                  num1 = num2;
                  continue;
                }
                num2 = 5;
                num1 = num2;
                continue;
              case 2:
                if (A_0 is IFormattable)
                {
                  num2 = 11;
                  num1 = num2;
                  continue;
                }
                break;
              case 3:
              case 6:
              case 7:
              case 8:
                goto label_23;
              case 4:
                str = Utils.a("꧆볈\uA7CAꇌ", A_1);
                num2 = 6;
                num1 = num2;
                continue;
              case 5:
                num2 = 29106;
                int num3 = num2;
                num2 = 29106;
                int num4 = num2;
                switch (num3 == num4 ? 1 : 0)
                {
                  case 0:
                  case 2:
                    break;
                  default:
                    num2 = 0;
                    if (num2 == 0)
                      ;
                    if (A_0 is string)
                    {
                      num2 = 10;
                      num1 = num2;
                      continue;
                    }
                    num2 = 0;
                    num1 = num2;
                    continue;
                }
                break;
              case 9:
                DateTime dateTime = (DateTime) A_0;
                dateTime = dateTime.ToUniversalTime();
                str = dateTime.ToString(Utils.a("闆", A_1), (IFormatProvider) CultureInfo.InvariantCulture);
                num2 = 1;
                if (num2 == 0)
                  ;
                num2 = 8;
                num1 = num2;
                continue;
              case 10:
                str = A_0 as string;
                num2 = 7;
                num1 = num2;
                continue;
              case 11:
                goto label_5;
              default:
                goto label_2;
            }
            str = A_0.ToString();
            num2 = 3;
            num1 = num2;
          }
label_5:
          try
          {
            str = ((IFormattable) A_0).ToString(Utils.a("胆", A_1), (IFormatProvider) CultureInfo.InvariantCulture);
          }
          catch (FormatException ex)
          {
            str = A_0.ToString();
          }
label_23:
          return str;
      }
    }

    static Message()
    {
      int A_1 = 3;
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 6822;
      int num2 = num1;
      num1 = 6822;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          Message.c = new Regex(Utils.a("\uE9B6\uE2B8隺隼\uE2BEﻀ飂\uF5C4\uEAC6\uF0C8雊\uE6CC铎\uFFD0軒\uEAD4賖\uE9D8\uF6DA\uE4DC苞쯠쯢뻤苦골뛪뛬싮\uDAF0껲쫴곶째훺쓼ꋾ⨀⨂㨄⌆", A_1));
          break;
        default:
          goto case 1;
      }
    }
  }
}
