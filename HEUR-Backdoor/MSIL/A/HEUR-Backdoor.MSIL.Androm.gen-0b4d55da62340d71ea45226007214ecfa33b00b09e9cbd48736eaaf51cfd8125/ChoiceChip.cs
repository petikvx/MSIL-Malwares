// Decompiled with JetBrains decompiler
// Type: MaterialSurface.ChoiceChip
// Assembly: Func, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EFD38B4B-EBC7-4ADC-A92E-3AF74F6197CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0b4d55da62340d71ea45226007214ecfa33b00b09e9cbd48736eaaf51cfd8125.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class ChoiceChip : RadioButton, IMaterialControl
  {
    protected readonly StringFormat textAlignment = new StringFormat()
    {
      LineAlignment = StringAlignment.Center,
      Alignment = StringAlignment.Center
    };
    private ChoiceChip.ChipStyle style = ChoiceChip.ChipStyle.Filled;
    private Color primaryColor = Color.BlueViolet;

    [Category("Appearance Material")]
    [Description("")]
    public Color PrimaryColor
    {
      get => this.primaryColor;
      set
      {
        this.primaryColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("")]
    public ChoiceChip.ChipStyle ChipType
    {
      get => this.style;
      set
      {
        this.style = value;
        this.Invalidate();
      }
    }

    public MouseState MouseState { get; set; }

    public ChoiceChip()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.MinimumSize = new Size(25, 24);
      this.AutoSize = false;
      this.Size = new Size(165, 30);
      this.Font = new Font("Segoe UI", 11f, FontStyle.Regular);
      this.MouseState = MouseState.OUT;
    }

    protected override void OnPaint(PaintEventArgs pevent)
    {
      base.OnPaint(pevent);
      Graphics graphics = pevent.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      if (this.Parent is MaterialCard parent)
        graphics.Clear(parent.CardColor);
      else
        graphics.Clear(this.Parent.BackColor);
      GraphicsPath pillShape = GraphicHelper.GetPillShape(0.0f, 0.0f, (float) (this.Width - 1), (float) (this.Height - 1), this.Height);
      switch (this.style)
      {
        case ChoiceChip.ChipStyle.Filled:
          graphics.FillPath((Brush) new SolidBrush(this.Enabled ? (this.Checked ? Color.FromArgb(100, this.primaryColor) : Color.WhiteSmoke) : (this.Checked ? Color.FromArgb(220, Color.Gainsboro) : Color.WhiteSmoke)), pillShape);
          break;
        case ChoiceChip.ChipStyle.Outlined:
          graphics.DrawPath(new Pen((Brush) new SolidBrush(this.Enabled ? (this.Checked ? this.primaryColor : Color.DimGray) : Color.Silver)), pillShape);
          if (this.Checked)
          {
            graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(100, this.Enabled ? this.primaryColor : Color.Gainsboro)), pillShape);
            break;
          }
          break;
      }
      if (this.MouseState == MouseState.HOVER)
        graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.Checked ? 25 : 100, Color.Gray)), pillShape);
      if (this.Focused)
        graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(25, Color.Gray)), pillShape);
      graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(this.Enabled ? Color.Black : Color.Gray), new RectangleF(0.0f, 0.0f, (float) this.Width, (float) this.Height), this.textAlignment);
      if (!this.Checked || !this.Enabled)
        return;
      graphics.DrawString(this.Text, this.Font, (Brush) new SolidBrush(Color.FromArgb(140, this.primaryColor)), new RectangleF(0.0f, 0.0f, (float) this.Width, (float) this.Height), this.textAlignment);
    }

    protected override void OnFontChanged(EventArgs e)
    {
      base.OnFontChanged(e);
      if (this.AutoSize)
        this.AutoSize = false;
      SizeF sizeF = this.CreateGraphics().MeasureString(this.Text, this.Font);
      this.Height = (int) ((double) sizeF.Height * 1.7999999523162842);
      this.Width = (int) sizeF.Width + this.Height;
      this.Invalidate();
    }

    protected override void OnCreateControl()
    {
      base.OnCreateControl();
      this.Font = new Font("Segoe UI", 11f, FontStyle.Regular);
      this.Invalidate();
    }

    protected override void OnCheckedChanged(EventArgs e)
    {
      base.OnCheckedChanged(e);
      this.Invalidate();
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.MouseState = MouseState.HOVER;
      this.Invalidate();
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      if (!this.Focused)
        this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      this.Invalidate();
    }

    protected override void OnLostFocus(EventArgs e)
    {
      base.OnLostFocus(e);
      this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    public enum ChipStyle
    {
      Filled,
      Outlined,
    }
  }
}
