// Decompiled with JetBrains decompiler
// Type: 102510812463.184744610213
// Assembly: 903211523809, Version=16.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 9299602E-5CAC-472E-8784-954A0E70F0DC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-930e3513275891a4d2d1e51b0fb588f4b7f0b665bd972c7e0ccfececc5c3933e.exe

using \u003102510812463;
using \u003378784898127;
using EnvDTE;
using Microsoft.VisualStudio.TextManager.Interop;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;

namespace \u003102510812463
{
  internal static class \u003184744610213
  {
    internal const string \u003030054324314 = "binding";
    internal const string \u003173769613999 = "///\\s*<binding.*/>";

    public static bool \u003710225625961(string _param0, string _param1)
    {
      IVsTextView ivsTextView = \u003599879936423.\u003437666061317(_param0);
      return ivsTextView != null ? \u003184744610213.\u003120556174388(ivsTextView, _param1) : \u003184744610213.\u003280885671309(_param0, _param1);
    }

    private static bool \u003120556174388(IVsTextView _param0, string _param1)
    {
      string str1 = "/// " + _param1;
      int num;
      string str2;
      if (!\u003184744610213.\u003090310261804(_param0, out num, out str2))
        return \u003184744610213.\u003644729409710(_param0, 0, str1 + "\r\n");
      string str3 = str2.TrimEnd();
      return \u003184744610213.\u003262915619398(_param0, num, str3.Length, str1);
    }

    private static bool \u003090310261804(IVsTextView _param0, out int _param1, out string _param2)
    {
      _param2 = (string) null;
      _param1 = 0;
      while (string.IsNullOrWhiteSpace(_param2) && _param0.GetTextStream(_param1, 0, _param1 + 1, 0, ref _param2) == 0 && _param2 != null)
      {
        if (\u003184744610213.\u003157389623559(_param2))
          return true;
        ++_param1;
      }
      _param1 = -1;
      _param2 = (string) null;
      return false;
    }

    private static bool \u003262915619398(
      IVsTextView _param0,
      int _param1,
      int _param2,
      string _param3)
    {
      EditPoint editPoint;
      if (\u003184744610213.\u003043488303347(_param0, _param1, out editPoint))
      {
        try
        {
          editPoint.ReplaceText((object) _param2, _param3, 0);
          return true;
        }
        catch
        {
        }
      }
      return false;
    }

    private static bool \u003644729409710(IVsTextView _param0, int _param1, string _param2)
    {
      EditPoint editPoint;
      if (\u003184744610213.\u003043488303347(_param0, _param1, out editPoint))
      {
        try
        {
          editPoint.Insert(_param2);
          return true;
        }
        catch
        {
        }
      }
      return false;
    }

    private static bool \u003043488303347(IVsTextView _param0, int _param1, out EditPoint _param2)
    {
      IVsTextLines ivsTextLines;
      object obj;
      if (_param0.GetBuffer(ref ivsTextLines) == 0 && ivsTextLines != null && ivsTextLines.CreateEditPoint(_param1, 0, ref obj) == 0)
      {
        _param2 = obj as EditPoint;
        return _param2 != null;
      }
      _param2 = (EditPoint) null;
      return false;
    }

    private static bool \u003280885671309(string _param0, string _param1)
    {
      string str1 = string.Empty;
      try
      {
        if (File.Exists(_param0))
          str1 = File.ReadAllText(_param0);
        string str2;
        if (!\u003184744610213.\u003546808154399(str1, out str2))
          str2 = str1;
        File.WriteAllText(_param0, \u003184744610213.\u003059071348992(str2, _param1));
        return true;
      }
      catch
      {
        return false;
      }
    }

    private static string \u003059071348992(string _param0, string _param1)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("/// ");
      stringBuilder.Append(_param1);
      stringBuilder.Append("\r\n");
      stringBuilder.Append(_param0);
      return stringBuilder.ToString();
    }

    public static string \u003157925326607(string _param0)
    {
      try
      {
        using (StreamReader streamReader = new StreamReader(_param0))
          return \u003184744610213.\u003212686382105((TextReader) streamReader);
      }
      catch
      {
        return (string) null;
      }
    }

    internal static bool \u003157389623559(string _param0) => Regex.Match(_param0, "///\\s*<binding.*/>").Success;

    private static void \u003252714274481(string _param0, ref int _param1, ref int _param2)
    {
      _param1 = 0;
      while (_param1 < _param0.Length && char.IsWhiteSpace(_param0[_param1]))
        ++_param1;
      _param2 = _param1 + 1;
      while (_param2 < _param0.Length)
      {
        if (_param0[_param2] == '\n' || _param0[_param2] == '\r')
        {
          --_param2;
          break;
        }
        ++_param2;
      }
    }

    internal static bool \u003041009069766(string _param0, out int _param1, out int _param2)
    {
      _param1 = 0;
      _param2 = 0;
      if (string.IsNullOrEmpty(_param0))
        return false;
      \u003184744610213.\u003252714274481(_param0, ref _param1, ref _param2);
      return \u003184744610213.\u003157389623559(_param0.Substring(_param1, _param2 - _param1 + 1));
    }

    private static string \u003212686382105(TextReader _param0)
    {
      string str = (string) null;
      string end = _param0.ReadToEnd();
      int startIndex;
      int num;
      if (\u003184744610213.\u003041009069766(end, out startIndex, out num))
        str = end.Substring(startIndex, num - startIndex + 1).Substring(3);
      return str;
    }

    private static bool \u003546808154399(string _param0, out string _param1)
    {
      _param1 = _param0;
      int length;
      int num1;
      if (!\u003184744610213.\u003041009069766(_param0, out length, out num1))
        return false;
      StringBuilder stringBuilder = new StringBuilder();
      if (length > 0)
        stringBuilder.Append(_param0.Substring(0, length));
      int num2 = num1 + 1;
      while (num2 < _param0.Length && (_param0[num2] == '\n' || _param0[num2] == '\r'))
        ++num2;
      if (num2 < _param0.Length - 1)
        stringBuilder.Append(_param0.Substring(num2));
      _param1 = stringBuilder.ToString();
      return true;
    }
  }
}
