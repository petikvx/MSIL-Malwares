// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.VerifyHashRequest
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: ADE0A079-11DB-4A46-8BDE-D2A592CA8DEA
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Virus.Win32.Parite.b-27ae24fc2acf1647a5e11bf4f8b5ebddeb486b4ef8e6a18576a068f32471b6f4.exe

using Microsoft.InfoCards.Diagnostics;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.Principal;
using System.Text;

namespace Microsoft.InfoCards
{
  internal class VerifyHashRequest : ClientRequest
  {
    private int m_cryptoSession;
    private byte[] m_hash;
    private string m_hashAlgorithmOid;
    private byte[] m_signature;
    private bool m_verified;

    public VerifyHashRequest(
      Process callingProcess,
      WindowsIdentity callingIdentity,
      IntPtr rpcHandle,
      Stream inArgs,
      Stream outArgs)
      : base(callingProcess, callingIdentity, rpcHandle, inArgs, outArgs)
    {
      this.m_cryptoSession = 0;
      this.m_hash = (byte[]) null;
      this.m_hashAlgorithmOid = (string) null;
      this.m_signature = (byte[]) null;
      this.m_verified = false;
    }

    protected override void OnMarshalInArgs()
    {
      BinaryReader reader = (BinaryReader) new InfoCardBinaryReader(this.InArgs, Encoding.Unicode);
      this.m_cryptoSession = reader.ReadInt32();
      int count1 = reader.ReadInt32();
      this.m_hash = reader.ReadBytes(count1);
      int count2 = reader.ReadInt32();
      this.m_signature = reader.ReadBytes(count2);
      this.m_hashAlgorithmOid = Utility.DeserializeString(reader);
      InfoCardTrace.ThrowInvalidArgumentConditional(0 == this.m_cryptoSession, "cryptoSession");
      InfoCardTrace.ThrowInvalidArgumentConditional(this.m_hash == null || 0 == this.m_hash.Length, "hash");
      InfoCardTrace.ThrowInvalidArgumentConditional(this.m_signature == null || 0 == this.m_signature.Length, "signature");
      InfoCardTrace.ThrowInvalidArgumentConditional(null == this.m_hashAlgorithmOid, "hashAlgorithmOid");
    }

    protected override void OnProcess() => this.m_verified = ((AsymmetricCryptoSession) CryptoSession.Find(this.m_cryptoSession, this.CallerPid, this.RequestorIdentity.User)).VerifyHash(this.m_hash, this.m_hashAlgorithmOid, this.m_signature);

    protected override void OnMarshalOutArgs()
    {
      BinaryWriter binaryWriter = new BinaryWriter(this.OutArgs, Encoding.Unicode);
      binaryWriter.Write(this.m_verified);
      binaryWriter.Flush();
    }
  }
}
