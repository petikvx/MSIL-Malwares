// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.SystemProfileTags.ScreenInfoTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags.SystemProfileTags
{
  public class ScreenInfoTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 11;
        int num1 = 7371;
        int num2 = num1;
        num1 = 7371;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("첾ꋀ뇂ꃄꋆ\uA7C8", A_1);
          default:
            goto case 1;
        }
      }
    }

    public ScreenInfo Screen
    {
      get
      {
        int num1 = -2325;
        int num2 = num1;
        num1 = -2325;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -18652;
        int num2 = num1;
        num1 = -18652;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public ScreenInfoTag(ScreenInfo screen)
    {
      int A_1 = 19;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.AddOptionalAttribute<int?>(Utils.a("냆ꃈ꿊만\uA7CE", A_1), screen.Width);
      this.AddOptionalAttribute<int?>(Utils.a("꿆곈ꋊ\uAACC\uA7CEꗐ", A_1), screen.Height);
      this.AddOptionalAttribute(Utils.a("꧆\uA8C8ꛊ\uA8CC", A_1), screen.Name);
      this.AddOptionalAttribute<int?>(Utils.a("뗆곈귊뿌\uAACEꋐ믒", A_1), screen.RefreshRate);
      this.Screen = screen;
    }
  }
}
