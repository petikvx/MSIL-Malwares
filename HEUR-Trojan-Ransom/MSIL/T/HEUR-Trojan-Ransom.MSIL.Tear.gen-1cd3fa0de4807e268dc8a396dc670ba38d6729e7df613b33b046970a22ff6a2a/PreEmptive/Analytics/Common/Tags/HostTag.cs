// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.HostTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags
{
  public class HostTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 14;
        int num1 = -24767;
        int num2 = num1;
        num1 = -24767;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (true)
              ;
            if (false)
              ;
            return Utils.a("꫁ꯃ뗅볇", A_1);
          default:
            goto case 1;
        }
      }
    }

    public HostInfo HostInfo
    {
      get
      {
        int num1 = -30138;
        int num2 = num1;
        num1 = -30138;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -14810;
        int num2 = num1;
        num1 = -14810;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public HostTag(HostInfo hostInfo, OSInfo osInfo, bool omitPII)
    {
      int A_1 = 6;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (omitPII)
        goto label_3;
label_2:
      this.HostInfo = hostInfo;
      this.AddAttribute(Utils.a("펹첻", A_1), hostInfo.IPAddress);
      this.AddAttribute(Utils.a("횹펻\uDDBDꆿ껁ꇃ", A_1), hostInfo.Locale);
      this.AddOptionalAttribute(Utils.a("풹\uDDBB펽ꖿ", A_1), hostInfo.Name);
      if (hostInfo.Virtualized.HasValue)
        this.AddAttribute(Utils.a("첹햻첽뒿럁ꗃ\uAAC5ꇇ냉꧋\uAACD", A_1), hostInfo.Virtualized.ToString().ToLowerInvariant());
      this.AddAttribute(Utils.a("즹캻\uDDBD\uEDBF껁ꗃ\uA8C5꿇", A_1), hostInfo.SourceLangName);
      this.AddAttribute(Utils.a("즹캻\uDDBD\uEDBF껁ꗃ\uA8C5꿇\uE7C9뫋ꯍꋏ", A_1), hostInfo.SourceLangVersion);
      this.InnerTags.Add((Tag) new OSTag(osInfo, omitPII));
      return;
label_3:
      hostInfo.IPAddress = Utils.a("讹躻覽\uEEBF\uF2C1\uEAC3\uF6C5\uE6C7\uFBC9", A_1);
      hostInfo.Name = Utils.a("\uF4B9鎻ﾽ", A_1);
      goto label_2;
    }
  }
}
