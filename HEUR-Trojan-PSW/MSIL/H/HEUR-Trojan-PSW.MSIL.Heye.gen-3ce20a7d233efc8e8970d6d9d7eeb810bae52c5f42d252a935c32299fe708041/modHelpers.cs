// Decompiled with JetBrains decompiler
// Type: StaggeringIsometricMap.modHelpers
// Assembly: MethodRental, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AE514D88-1D27-426C-B393-9775A20FC38F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Heye.gen-3ce20a7d233efc8e8970d6d9d7eeb810bae52c5f42d252a935c32299fe708041.exe

using Microsoft.VisualBasic.CompilerServices;
using StaggeringIsometricMap.My;
using System;
using System.Runtime.CompilerServices;
using System.Web;

namespace StaggeringIsometricMap
{
  [StandardModule]
  internal sealed class modHelpers
  {
    internal static object GetContextComponentList()
    {
      HttpContext current = HttpContext.Current;
      object contextComponentList;
      if (!current.Items.Contains((object) "VueLightComponents"))
        current.Items[(object) "VueLightComponents"] = RuntimeHelpers.GetObjectValue(contextComponentList);
      return contextComponentList;
    }

    internal static modHelpers.ParseVueFileResult ParseVueFile(string file)
    {
      HttpContext current = HttpContext.Current;
      string str1 = MyProject.Computer.FileSystem.ReadAllText(current.Server.MapPath(file)).Trim();
      string str2 = str1.EndsWith("</script>") ? str1.Substring(0, checked (str1.Length - 9)).Trim() : throw new Exception(".vue file '" + file + "' does not end with </script>");
      int length1 = str2.LastIndexOf("<script");
      string str3 = length1 >= 0 ? str2.Substring(checked (length1 + 7)).Trim() : throw new Exception("Start <script> tag not found in .vue file '" + file + "'");
      string str4 = str2.Substring(0, length1).Trim();
      string str5;
      string path;
      if (str3.StartsWith(">"))
      {
        str5 = str3.Substring(1).Trim();
        path = file;
      }
      else
      {
        string str6 = str3.StartsWith("src=\"") ? str3.Substring(5) : throw new Exception("Invalid <script> tag in .vue file '" + file + "' - must be <script> or <script src=\"...\">");
        int length2 = str6.IndexOf('"');
        if (length2 < 0)
          throw new Exception("Invalid <script> tag in .vue file '" + file + "' - must be <script> or <script src=\"...\">");
        path = modHelpers.ResolveVP(file, str6.Substring(0, length2).Trim());
        if (Operators.CompareString(str6.Substring(checked (length2 + 1)), ">", false) != 0)
          throw new Exception("Invalid <script> tag in .vue file '" + file + "' - must be <script> or <script src=\"...\">");
        str5 = MyProject.Computer.FileSystem.ReadAllText(current.Server.MapPath(path)).Trim();
      }
      string str7 = str5.StartsWith("export ") ? str5.Substring(7).Trim() : throw new Exception("Script does not start with 'export default {' in file '" + path + "'");
      string str8 = str7.StartsWith("default") ? str7.Substring(7).Trim() : throw new Exception("Script does not start with 'export default {' in file '" + path + "'");
      if (!str8.StartsWith("{"))
        throw new Exception("Script does not start with 'export default {' in file '" + path + "'");
      if (str8.EndsWith(";"))
        str8 = str8.Substring(0, checked (str8.Length - 1)).Trim();
      string str9 = str4.StartsWith("<template>") ? str4.Substring(10) : throw new Exception(".vue file '" + file + "' does not start with <template>");
      string str10 = str9.EndsWith("</template>") ? str9.Substring(0, checked (str9.Length - 11)).Trim() : throw new Exception(".vue file '" + file + "' does not end with </template> (after script is extracted)");
      return new modHelpers.ParseVueFileResult()
      {
        Template = str10,
        Script = str8
      };
    }

    private static string ResolveVP(string curFileVP, string p)
    {
      if (p.Contains("//") || p.Contains("\\"))
        throw new Exception("Invalid path");
      if (p.StartsWith("/"))
        return p;
      int num = curFileVP.LastIndexOf('/');
      if (num < 0)
        return p;
      if (p.StartsWith("./"))
        p = p.Substring(2);
      return curFileVP.Substring(0, checked (num + 1)) + p;
    }

    internal static string JSStringEncode(string x) => "'" + x.Replace("\\", "\\\\").Replace("\r\n", "\\n").Replace("\r", "\\n").Replace("\n", "\\n").Replace("\t", "\\t").Replace("'", "\\'") + "'";

    internal struct ParseVueFileResult
    {
      public string Template;
      public string Script;
    }
  }
}
