// Decompiled with JetBrains decompiler
// Type: SpatialController.ScriptGenerator
// Assembly: Rea, Version=1.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 014AEBFB-7EE8-4B39-A7D6-AE7A18313427
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-fb4fb24a50b7f600c65d2bbc049f44337673fa7b0e6e16b6967c06d0cfb666ad.exe

using System;
using System.Data;
using System.Data.OleDb;
using System.IO;
using System.Text;

namespace SpatialController
{
  public class ScriptGenerator
  {
    private string _connectionString;
    private string _columnToExclude = string.Empty;
    private IDataProvider _provider;
    private const string SCHEMA_COLUMN_NAME = "COLUMN_NAME";
    private const string SCHEMA_DATA_TYPE = "DATA_TYPE";
    private const char DELIMITTER = ',';
    private const int BUFFERMAX = 10000;
    private TextWriter _outPutFile;

    public string ConnectionString
    {
      get => this._connectionString;
      set => this._connectionString = value;
    }

    public string ColumnToExclude
    {
      get => this._columnToExclude;
      set => this._columnToExclude = value;
    }

    private void Initialize()
    {
      this._provider = (IDataProvider) new OleDbDataProvider();
      this._provider.OpenConnection(this._connectionString);
    }

    private StringBuilder GetColumnList(string tableName)
    {
      DataTable schema = this._provider.GetSchema(tableName);
      StringBuilder stringBuilder = new StringBuilder(string.Empty);
      foreach (DataRow row in (InternalDataCollectionBase) schema.Rows)
      {
        OleDbType int16 = (OleDbType) Convert.ToInt16(row["DATA_TYPE"].ToString(), 10);
        string str = string.Format(",{0},", (object) row["COLUMN_NAME"].ToString());
        if (int16 != OleDbType.Binary && this._columnToExclude.IndexOf(str) < 0)
          stringBuilder.AppendFormat("{0}{1}", (object) row["COLUMN_NAME"].ToString(), (object) ',');
      }
      return stringBuilder.Remove(stringBuilder.Length - 1, 1);
    }

    private DataTable FormAndRunQuery(
      string tableName,
      string colList,
      string whereClause)
    {
      return this._provider.GetDataTable(!string.IsNullOrEmpty(whereClause) ? string.Format("Select {0} From {1} Where {2}", (object) colList, (object) tableName, (object) whereClause) : string.Format("Select {0} From {1}", (object) colList, (object) tableName));
    }

    private void FormInserts(DataTable dTable, string tableName, string columnList)
    {
      string format = string.Format("INSERT INTO {0} ({1}) VALUES ", (object) tableName, (object) columnList) + "({2});\n";
      StringBuilder stringBuilder1 = new StringBuilder(string.Empty);
      long num = 0;
      foreach (DataRow row in (InternalDataCollectionBase) dTable.Rows)
      {
        StringBuilder stringBuilder2 = new StringBuilder(string.Empty);
        foreach (DataColumn column in (InternalDataCollectionBase) dTable.Columns)
        {
          if (row[column.ColumnName] == DBNull.Value)
            stringBuilder2.AppendFormat("{0},", (object) "NULL");
          else
            stringBuilder2.AppendFormat("'{0}',", (object) row[column.ColumnName].ToString().Replace("'", "''"));
        }
        stringBuilder1.AppendFormat(format, (object) tableName, (object) columnList, (object) stringBuilder2.Remove(stringBuilder2.Length - 1, 1));
        ++num;
        if (num == 10000L)
        {
          this._outPutFile.Write((object) stringBuilder1);
          this._outPutFile.Flush();
          stringBuilder1.Length = 0;
          num = 0L;
        }
      }
      if ((ulong) num % 10000UL <= 0UL)
        return;
      this._outPutFile.Write((object) stringBuilder1);
      this._outPutFile.Flush();
    }

    public void GenerateInsertStatement(
      string tableName,
      string whereClause,
      string outputFileName)
    {
      try
      {
        this.Initialize();
        this._outPutFile = (TextWriter) new StreamWriter(outputFileName);
        string str = this.GetColumnList(tableName).ToString();
        this.FormInserts(this.FormAndRunQuery(tableName, str, whereClause), tableName, str);
        this._outPutFile.Close();
        this._outPutFile = (TextWriter) null;
      }
      catch (Exception ex)
      {
        if (this._outPutFile != null)
          this._outPutFile.Dispose();
        throw ex;
      }
    }
  }
}
