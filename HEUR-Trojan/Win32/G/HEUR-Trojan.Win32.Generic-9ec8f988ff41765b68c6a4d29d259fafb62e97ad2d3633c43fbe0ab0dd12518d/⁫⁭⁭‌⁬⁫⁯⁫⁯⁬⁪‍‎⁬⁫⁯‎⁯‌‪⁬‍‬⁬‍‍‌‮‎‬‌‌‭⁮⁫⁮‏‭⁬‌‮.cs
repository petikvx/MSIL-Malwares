// Decompiled with JetBrains decompiler
// Type: ⁫⁭⁭‌⁬⁫⁯⁫⁯⁬⁪‍‎⁬⁫⁯‎⁯‌‪⁬‍‬⁬‍‍‌‮‎‬‌‌‭⁮⁫⁮‏‭⁬‌‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u206B⁭⁭‌⁬⁫⁯⁫⁯⁬⁪‍‎⁬⁫⁯‎⁯‌‪⁬‍‬⁬‍‍‌‮‎‬‌‌‭⁮⁫⁮‏‭⁬‌‮ : 
  \u202C‎‬⁮⁬‪⁫⁫⁬‎‪⁪​⁭‪‌⁫‌⁬​‎‮​⁬⁯‌⁯‪‎‪‪⁪⁮⁭‪‮‎‬‭‎‮,
  \u206B⁭⁮‍‪‎‮⁪‎​⁬‭⁪‫‫⁫⁪‬⁬‎​​‬‭‍‌‭‎⁪‫‭‏⁫⁭⁬‪‍‌⁬⁮‮
{
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u206F‮‍‍‪⁫⁭‬⁯⁮‌‌⁬⁬⁭⁯‌‬⁭⁬⁯‎‬‏⁮⁪‎‪⁫‮‫‏‬⁬⁪‎‫⁮​‭‮ = 188;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u200E‬​⁯‏‏‏⁮⁬⁯⁯⁭‎‪‎⁯⁪⁪⁬⁯‭‪‫​⁯‫⁮⁮⁭‎‍⁮‏⁮‫⁪⁭​⁫‮ = 12748;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u206A‎‍‬⁬‭⁬‌‫⁯⁬⁬⁪‫‏⁮⁫‪‭​‭⁫⁯‪⁬⁯⁯​⁯‏‫⁯‪‮‭‭​‍‏‮‮ = 13004;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u206D‏‬‌‍⁬‍⁯‫‬‬‎⁯‭‮‌‏⁯⁮‫​​⁬‭‫‮⁫‏‮‏‎‮‭‭⁭​‍⁫⁬⁮‮ = 13260;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u206A‮‏⁭‫⁭‪‏‌‫‫⁪⁯⁮‮‎⁯⁫‍‬⁯⁮‭‌⁭‌‍⁪‮‏‭⁮⁯‏‏‮⁮‪⁫‪‮ = 13516;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u200B⁭​⁬‍​‮⁫⁭‮⁮⁪⁪‮​⁯⁫‮⁭‬⁬‪⁪⁬‎‭⁫​‬⁮⁬‬‭‌⁬‏‮⁭‎‭‮ = 13772;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u206E⁪‫⁮‌⁯‍‭‬‫⁫‭⁬‏‫⁬‍⁬‬⁫⁬‪⁮‎⁯⁮​‬​⁭⁪‬‏‬‏‎⁬⁯‫‍‮ = 14028;
  [Obsolete("Use 'IsoTrailers' instead")]
  public const int \u206F⁭‏‏‌⁭⁯‭‎⁪‎‌‌⁭⁯​⁯⁫‭‌⁫‌‮⁮⁮‌‪‭⁮‌⁭⁮‬⁫‌⁮⁪‮⁪‬‮ = 14284;
  private \u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮ \u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮;
  private \u200C⁮‏‍⁮⁬⁭⁭​‏⁪⁭⁮⁮‫⁪⁪‬⁭⁯‏‭⁮‪​⁪⁬‫‌‫‏⁯⁫⁬‌‮​‪⁫⁯‮ \u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮;
  private int \u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮;
  private int \u202E⁬⁬​⁪⁬⁮‫⁮⁪​‮‮⁮‏‍​​‪‭⁫⁮⁪⁮​‎‮⁮⁬⁬‭⁬‭⁪‮⁬‪‍‍⁫‮;
  private byte[] \u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮;
  private byte[] \u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮;
  private int \u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮;
  private bool \u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮;
  private byte[] \u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮;
  private byte[] \u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮;
  private byte[] \u206C‭‬‬‮⁮‭⁬⁬‏⁬⁭⁯‏‭‪‮⁭‎​‭⁫‮‭‎⁪‍‏‭‭‬‎⁬‏‪‎⁫‬​‏‮;

  public byte[] \u206F‮⁮‫⁬⁫‮⁫⁮⁫⁫⁭⁪​‪‭‎‍⁭⁯‮‬‬⁮⁮‭‪‫⁪⁪‬​‎​⁮⁯​⁭‫‬‮() => this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮;

  public \u206B⁭⁭‌⁬⁫⁯⁫⁯⁬⁪‍‎⁬⁫⁯‎⁯‌‪⁬‍‬⁬‍‍‌‮‎‬‌‌‭⁮⁫⁮‏‭⁬‌‮(
    \u200C⁮‏‍⁮⁬⁭⁭​‏⁪⁭⁮⁮‫⁪⁪‬⁭⁯‏‭⁮‪​⁪⁬‫‌‫‏⁯⁫⁬‌‮​‪⁫⁯‮ _param1,
    \u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮ _param2,
    bool _param3)
  {
    this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮ = _param1;
    this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮ = _param2;
    if (_param3)
      this.\u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮ = 188;
    else
      this.\u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮ = !\u200F‎⁯‏⁭‮‭‭⁯⁬‬⁪‌⁭⁭‮‏⁭⁫‭‏⁬⁭‫‌‪​⁭⁬‭⁮⁭⁮⁯‬‌⁮⁫‬‫‮.\u206E⁭‪⁮‪‍‌‮‮‏⁪‎⁫‌‌⁫⁫⁫⁫⁭‎⁪⁯⁪⁭‭⁪⁫⁬⁬‮​‮⁯⁪⁯⁪⁫⁯‭‮(_param2) ? \u200F‎⁯‏⁭‮‭‭⁯⁬‬⁪‌⁭⁭‮‏⁭⁫‭‏⁬⁭‫‌‪​⁭⁬‭⁮⁭⁮⁯‬‌⁮⁫‬‫‮.\u206B‮⁭‭⁬‎‫‎⁯⁮‌‬‪⁯‏‎​⁪‏‬‮⁬⁪‮‎‭‪⁬⁪⁫⁬‎‌‫‬​‬‭⁪‫‮(_param2) : throw new ArgumentException("no valid trailer", "digest");
  }

  public \u206B⁭⁭‌⁬⁫⁯⁫⁯⁬⁪‍‎⁬⁫⁯‎⁯‌‪⁬‍‬⁬‍‍‌‮‎‬‌‌‭⁮⁫⁮‏‭⁬‌‮(
    \u200C⁮‏‍⁮⁬⁭⁭​‏⁪⁭⁮⁮‫⁪⁪‬⁭⁯‏‭⁮‪​⁪⁬‫‌‫‏⁯⁫⁬‌‮​‪⁫⁯‮ _param1,
    \u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮ _param2)
    : this(_param1, _param2, false)
  {
  }

  public virtual string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ + "withISO9796-2S1";

  public virtual void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    bool _param1,
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param2)
  {
    \u202A⁫‎⁯‎⁪‫‬​⁪⁫‭⁪‎‬‪‎⁬⁭⁪​⁬⁪⁪‫‪⁯‏⁪⁬⁫‪​‬‮‫⁬‌⁬‎‮ obj = (\u202A⁫‎⁯‎⁪‫‬​⁪⁫‭⁪‎‬‪‎⁬⁭⁪​⁬⁪⁪‫‪⁯‏⁪⁬⁫‪​‬‮‫⁬‌⁬‎‮) _param2;
    this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(_param1, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) obj);
    this.\u202E⁬⁬​⁪⁬⁮‫⁮⁪​‮‮⁮‏‍​​‪‭⁫⁮⁪⁮​‎‮⁮⁬⁬‭⁬‭⁪‮⁬‪‍‍⁫‮ = obj.\u200D‌⁯‍‭‪‍⁭⁪​‭‮⁬‌⁯⁮⁮‏⁬⁯‪‪‏⁪‏⁬‍​‌‎⁮‬⁬‍‭‎‫‪‮‏‮.\u200B‌⁮⁫‪‎⁬⁮​⁯⁬⁪‭⁯‌‌⁪‪⁬⁬‭‏⁮‬‬‏⁫‬‫‏⁭⁭‫‫⁪‬‏⁯⁬‮;
    this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮ = new byte[(this.\u202E⁬⁬​⁪⁬⁮‫⁮⁪​‮‮⁮‏‍​​‪‭⁫⁮⁪⁮​‎‮⁮⁬⁬‭⁬‭⁪‮⁬‪‍‍⁫‮ + 7) / 8];
    this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮ = this.\u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮ != 188 ? new byte[this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202D‏‬‪⁬‪‌⁭‌​‪‍‭‮‪‫‌⁫‌​⁭‫⁭‫‍⁫⁪⁪‫‮‌⁮⁭⁪‭​‫‍‌‭‮() - 3] : new byte[this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202D‏‬‪⁬‪‌⁭‌​‪‍‭‮‪‫‌⁫‌​⁭‫⁭‫‍⁫⁪⁪‫‮‌⁮⁭⁪‭​‫‍‌‭‮() - 2];
    this.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
  }

  private bool \u206B⁫​⁯‍‎‫⁬‌⁭‌⁯‭⁭⁬‭‭⁭‍⁯‏‌‬⁮⁮⁮‌‍‌⁬⁮⁪‪​‪‮‍‭​⁮‮(byte[] _param1, byte[] _param2)
  {
    int length;
    if (this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ > this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮.Length)
    {
      if (this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮.Length > _param2.Length)
        return false;
      length = this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮.Length;
    }
    else
    {
      if (this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ != _param2.Length)
        return false;
      length = _param2.Length;
    }
    bool flag = true;
    for (int index = 0; index != length; ++index)
    {
      if ((int) _param1[index] != (int) _param2[index])
        flag = false;
    }
    return flag;
  }

  private void \u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(byte[] _param1) => Array.Clear((Array) _param1, 0, _param1.Length);

  public virtual void \u202C​⁯‮‭⁮⁬‮‏‏‌⁬⁬‫⁯⁮‪⁮⁭⁬‪‎⁬⁬​⁬‌‍⁯⁬⁯‮‬⁪⁯‬⁬​‌⁬‮(byte[] _param1)
  {
    byte[] sourceArray = this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, 0, _param1.Length);
    if (((int) sourceArray[0] & 192 ^ 64) != 0)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("malformed signature");
    if (((int) sourceArray[sourceArray.Length - 1] & 15 ^ 12) != 0)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("malformed signature");
    int num1;
    if (((int) sourceArray[sourceArray.Length - 1] & (int) byte.MaxValue ^ 188) == 0)
    {
      num1 = 1;
    }
    else
    {
      int num2 = ((int) sourceArray[sourceArray.Length - 2] & (int) byte.MaxValue) << 8 | (int) sourceArray[sourceArray.Length - 1] & (int) byte.MaxValue;
      if (\u200F‎⁯‏⁭‮‭‭⁯⁬‬⁪‌⁭⁭‮‏⁭⁫‭‏⁬⁭‫‌‪​⁭⁬‭⁮⁭⁮⁯‬‌⁮⁫‬‫‮.\u206E⁭‪⁮‪‍‌‮‮‏⁪‎⁫‌‌⁫⁫⁫⁫⁭‎⁪⁯⁪⁭‭⁪⁫⁬⁬‮​‮⁯⁪⁯⁪⁫⁯‭‮(this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮))
        throw new ArgumentException("unrecognised hash in signature");
      if (num2 != \u200F‎⁯‏⁭‮‭‭⁯⁬‬⁪‌⁭⁭‮‏⁭⁫‭‏⁬⁭‫‌‪​⁭⁬‭⁮⁭⁮⁯‬‌⁮⁫‬‫‮.\u206B‮⁭‭⁬‎‫‎⁯⁮‌‬‪⁯‏‎​⁪‏‬‮⁬⁪‮‎‭‪⁬⁪⁫⁬‎‌‫‬​‬‭⁪‫‮(this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮))
        throw new InvalidOperationException("signer initialised with wrong digest for trailer " + num2.ToString());
      num1 = 2;
    }
    int index = 0;
    while (index != sourceArray.Length && ((int) sourceArray[index] & 15 ^ 10) != 0)
      ++index;
    int sourceIndex = index + 1;
    int num3 = sourceArray.Length - num1 - this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202D‏‬‪⁬‪‌⁭‌​‪‍‭‮‪‫‌⁫‌​⁭‫⁭‫‍⁫⁪⁪‫‮‌⁮⁭⁪‭​‫‍‌‭‮();
    if (num3 - sourceIndex <= 0)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("malformed block");
    if (((int) sourceArray[0] & 32) == 0)
    {
      this.\u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮ = true;
      this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮ = new byte[num3 - sourceIndex];
      Array.Copy((Array) sourceArray, sourceIndex, (Array) this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮, 0, this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.Length);
    }
    else
    {
      this.\u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮ = false;
      this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮ = new byte[num3 - sourceIndex];
      Array.Copy((Array) sourceArray, sourceIndex, (Array) this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮, 0, this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.Length);
    }
    this.\u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮ = _param1;
    this.\u206C‭‬‬‮⁮‭⁬⁬‏⁬⁭⁯‏‭‪‮⁭‎​‭⁫‮‭‎⁪‍‏‭‭‬‎⁬‏‪‎⁫‬​‏‮ = sourceArray;
    this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮, 0, this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.Length);
    this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ = this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.Length;
    this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.CopyTo((Array) this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮, 0);
  }

  public virtual void \u200E‍⁬‍‮‍⁮⁮​‭‪⁫‬⁭​⁯‭⁯‪‬⁮‬‏​⁪⁫‎‮​⁬⁮‪‎‮⁭​‏⁯‬⁮‮(byte _param1)
  {
    this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u200E‍⁬‍‮‍⁮⁮​‭‪⁫‬⁭​⁯‭⁯‪‬⁮‬‏​⁪⁫‎‮​⁬⁮‪‎‮⁭​‏⁯‬⁮‮(_param1);
    if (this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ < this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮.Length)
      this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮[this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮] = _param1;
    ++this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮;
  }

  public virtual void \u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    for (; _param3 > 0 && this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ < this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮.Length; --_param3)
    {
      this.\u200E‍⁬‍‮‍⁮⁮​‭‪⁫‬⁭​⁯‭⁯‪‬⁮‬‏​⁪⁫‎‮​⁬⁮‪‎‮⁭​‏⁯‬⁮‮(_param1[_param2]);
      ++_param2;
    }
    this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(_param1, _param2, _param3);
    this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ += _param3;
  }

  public virtual void \u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮()
  {
    this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
    this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ = 0;
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮);
    if (this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮ != null)
      this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮);
    this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮ = (byte[]) null;
    this.\u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮ = false;
    if (this.\u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮ == null)
      return;
    this.\u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮ = (byte[]) null;
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u206C‭‬‬‮⁮‭⁬⁬‏⁬⁭⁯‏‭‪‮⁭‎​‭⁫‮‭‎⁪‍‏‭‭‬‎⁬‏‪‎⁫‬​‏‮);
    this.\u206C‭‬‬‮⁮‭⁬⁬‏⁬⁭⁯‏‭‪‮⁭‎​‭⁫‮‭‎⁪‍‏‭‭‬‎⁬‏‪‎⁫‬​‏‮ = (byte[]) null;
  }

  public virtual byte[] \u202B‌‮‫⁬‏⁫‍⁯‎‍⁪⁮​⁭⁪⁮⁮‮⁭​⁯‭‍‫‍‏⁮‬‏⁭‫⁮⁬‍‪‬⁬‫‪‮()
  {
    int num1 = this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202D‏‬‪⁬‪‌⁭‌​‪‍‭‮‪‫‌⁫‌​⁭‫⁭‫‍⁫⁪⁪‫‮‌⁮⁭⁪‭​‫‍‌‭‮();
    int num2;
    int num3;
    if (this.\u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮ == 188)
    {
      num2 = 8;
      num3 = this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - num1 - 1;
      this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮, num3);
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - 1] = (byte) 188;
    }
    else
    {
      num2 = 16;
      num3 = this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - num1 - 2;
      this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮, num3);
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - 2] = (byte) ((uint) this.\u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮ >> 8);
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length - 1] = (byte) this.\u206D⁫⁫⁬⁯‬⁮‎‬‪‬‭‫‏​⁪‎‎⁮‮⁯⁪‪‍‫‭‌‎‏⁮⁫‮‌​‏‎‏‬⁫‭‮;
    }
    int num4 = (num1 + this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮) * 8 + num2 + 4 - this.\u202E⁬⁬​⁪⁬⁮‫⁮⁪​‮‮⁮‏‍​​‪‭⁫⁮⁪⁮​‎‮⁮⁬⁬‭⁬‭⁪‮⁬‪‍‍⁫‮;
    byte num5;
    int destinationIndex;
    if (num4 > 0)
    {
      int length = this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ - (num4 + 7) / 8;
      num5 = (byte) 96;
      destinationIndex = num3 - length;
      Array.Copy((Array) this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮, 0, (Array) this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮, destinationIndex, length);
    }
    else
    {
      num5 = (byte) 64;
      destinationIndex = num3 - this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮;
      Array.Copy((Array) this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮, 0, (Array) this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮, destinationIndex, this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮);
    }
    if (destinationIndex - 1 > 0)
    {
      for (int index = destinationIndex - 1; index != 0; --index)
        this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[index] = (byte) 187;
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[destinationIndex - 1] ^= (byte) 1;
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[0] = (byte) 11;
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[0] |= num5;
    }
    else
    {
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[0] = (byte) 10;
      this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮[0] |= num5;
    }
    byte[] numArray = this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮, 0, this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮.Length);
    this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ = 0;
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮);
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u202B⁪‪‏⁬⁮‌⁮⁯‏⁪⁪⁮⁮‭⁯‏‍​‮⁭⁮‌‪‭⁭‬‍‪⁪⁯⁭‍⁯‌‫‪⁮⁯‌‮);
    return numArray;
  }

  public virtual bool \u202C⁯‫‪‬⁪‮‌⁫‮‬‍⁬⁬⁪‏⁫‌⁭‭‍‪‎‮​‏‮‍⁬⁮‏⁭⁮‪‭‍​‫‍⁪‮(byte[] _param1)
  {
    byte[] sourceArray;
    if (this.\u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮ == null)
    {
      try
      {
        sourceArray = this.\u200F⁫‭⁫‪⁪‬‮⁪⁬​‌‫‌‭‮⁮⁯​‏‫‪‬⁮⁪‬⁬⁪⁭⁭‌⁮⁯​‬​⁪‍‮⁯‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, 0, _param1.Length);
      }
      catch (Exception ex)
      {
        return false;
      }
    }
    else
    {
      if (!\u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u200D‮‫‏⁮‮‪‎⁬‪‌⁮‏⁬⁫⁪‮‎⁪‫‬⁫‌‎​‏⁪⁫‎‎‫⁬‌⁭‫⁯⁭‪⁫‏‮(this.\u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮, _param1))
        throw new InvalidOperationException("updateWithRecoveredMessage called on different signature");
      sourceArray = this.\u206C‭‬‬‮⁮‭⁬⁬‏⁬⁭⁯‏‭‪‮⁭‎​‭⁫‮‭‎⁪‍‏‭‭‬‎⁬‏‪‎⁫‬​‏‮;
      this.\u200B‪⁭​⁫‭​‎‍⁮⁭‌‌‍‏⁮⁮‮⁯⁮‍‮⁬‌‎‮‮⁮⁬⁪​⁪‎‬⁫‮‮‍⁪‮‮ = (byte[]) null;
      this.\u206C‭‬‬‮⁮‭⁬⁬‏⁬⁭⁯‏‭‪‮⁭‎​‭⁫‮‭‎⁪‍‏‭‭‬‎⁬‏‪‎⁫‬​‏‮ = (byte[]) null;
    }
    if (((int) sourceArray[0] & 192 ^ 64) != 0 || ((int) sourceArray[sourceArray.Length - 1] & 15 ^ 12) != 0)
      return this.\u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(sourceArray);
    int num1;
    if (((int) sourceArray[sourceArray.Length - 1] & (int) byte.MaxValue ^ 188) == 0)
    {
      num1 = 1;
    }
    else
    {
      int num2 = ((int) sourceArray[sourceArray.Length - 2] & (int) byte.MaxValue) << 8 | (int) sourceArray[sourceArray.Length - 1] & (int) byte.MaxValue;
      if (\u200F‎⁯‏⁭‮‭‭⁯⁬‬⁪‌⁭⁭‮‏⁭⁫‭‏⁬⁭‫‌‪​⁭⁬‭⁮⁭⁮⁯‬‌⁮⁫‬‫‮.\u206E⁭‪⁮‪‍‌‮‮‏⁪‎⁫‌‌⁫⁫⁫⁫⁭‎⁪⁯⁪⁭‭⁪⁫⁬⁬‮​‮⁯⁪⁯⁪⁫⁯‭‮(this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮))
        throw new ArgumentException("unrecognised hash in signature");
      if (num2 != \u200F‎⁯‏⁭‮‭‭⁯⁬‬⁪‌⁭⁭‮‏⁭⁫‭‏⁬⁭‫‌‪​⁭⁬‭⁮⁭⁮⁯‬‌⁮⁫‬‫‮.\u206B‮⁭‭⁬‎‫‎⁯⁮‌‬‪⁯‏‎​⁪‏‬‮⁬⁪‮‎‭‪⁬⁪⁫⁬‎‌‫‬​‬‭⁪‫‮(this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮))
        throw new InvalidOperationException("signer initialised with wrong digest for trailer " + num2.ToString());
      num1 = 2;
    }
    int index1 = 0;
    while (index1 != sourceArray.Length && ((int) sourceArray[index1] & 15 ^ 10) != 0)
      ++index1;
    int sourceIndex = index1 + 1;
    byte[] numArray = new byte[this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202D‏‬‪⁬‪‌⁭‌​‪‍‭‮‪‫‌⁫‌​⁭‫⁭‫‍⁫⁪⁪‫‮‌⁮⁭⁪‭​‫‍‌‭‮()];
    int num3 = sourceArray.Length - num1 - numArray.Length;
    if (num3 - sourceIndex <= 0)
      return this.\u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(sourceArray);
    if (((int) sourceArray[0] & 32) == 0)
    {
      this.\u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮ = true;
      if (this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ > num3 - sourceIndex)
        return this.\u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(sourceArray);
      this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u202C‬‎⁪​​‌‎‍⁯⁯​‮‪‮​⁭‬‭​⁮‬‍⁬⁬⁫‭​‎‌⁪⁬‬‮⁬⁫‮⁮‪‪‮();
      this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(sourceArray, sourceIndex, num3 - sourceIndex);
      this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(numArray, 0);
      bool flag = true;
      for (int index2 = 0; index2 != numArray.Length; ++index2)
      {
        sourceArray[num3 + index2] ^= numArray[index2];
        if (sourceArray[num3 + index2] != (byte) 0)
          flag = false;
      }
      if (!flag)
        return this.\u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(sourceArray);
      this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮ = new byte[num3 - sourceIndex];
      Array.Copy((Array) sourceArray, sourceIndex, (Array) this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮, 0, this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.Length);
    }
    else
    {
      this.\u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮ = false;
      this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮.\u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(numArray, 0);
      bool flag = true;
      for (int index3 = 0; index3 != numArray.Length; ++index3)
      {
        sourceArray[num3 + index3] ^= numArray[index3];
        if (sourceArray[num3 + index3] != (byte) 0)
          flag = false;
      }
      if (!flag)
        return this.\u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(sourceArray);
      this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮ = new byte[num3 - sourceIndex];
      Array.Copy((Array) sourceArray, sourceIndex, (Array) this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮, 0, this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮.Length);
    }
    if (this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ != 0 && !this.\u206B⁫​⁯‍‎‫⁬‌⁭‌⁯‭⁭⁬‭‭⁭‍⁯‏‌‬⁮⁮⁮‌‍‌⁬⁮⁪‪​‪‮‍‭​⁮‮(this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮, this.\u206F‌⁭‪⁫‫⁭​‪‭‭‎⁯‪‎⁮‬‍‬‌‭‪‬⁮‬‬‍⁮⁬‎‭⁫‪‎‎‎‪‬⁯⁫‮))
      return this.\u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(sourceArray);
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮);
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(sourceArray);
    this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ = 0;
    return true;
  }

  private bool \u200F‮​⁯‬‎‭‎⁪⁮‍⁫⁯⁫‎‍‫⁬‬⁮‎‪‍‭‌‎‏⁮‎‭⁪⁭‪‏‍‬‏‎‪‎‮(byte[] _param1)
  {
    this.\u200C⁬‪‪‌⁫‏⁭⁭‭‭‫‮​⁭⁭⁪‍‬⁪‍‫‎‎‭⁭‏​‮⁯⁯‌‍⁫⁮⁬⁯​⁫⁮‮ = 0;
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(this.\u202E‍‪‭‫⁯‮‎‏⁫⁮‮⁫‍⁫‎‍‮⁯‮⁫‏‮‬‎‍⁪‎‬‮‎‏⁮⁫⁫‪‍‏⁫‏‮);
    this.\u200C‭‎⁮‬‮⁫‬‫‎‬‪‮‮​‌⁯⁯‪‪⁭⁫​​​⁫‬‪‌‍⁯⁫⁭⁪⁭⁪⁭⁭‎‭‮(_param1);
    return false;
  }

  public virtual bool \u202B‬​⁯⁪⁭‍⁪‭‬‮⁬‮⁬⁮‌⁪⁮⁪⁮‪‫‮⁪⁯‌⁮‮⁭⁫⁮‍⁮‌‏‍‬​⁮‌‮() => this.\u206D‎‪‮‬‭‍‍⁭⁮‏​⁬‍‏‍‍‪‎‭⁬⁫‬‍⁮⁪‬‎⁫‌⁫⁫⁭‌‬‏⁯‬​‎‮;
}
