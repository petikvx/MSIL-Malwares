// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.EndpointAttributeLimits
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System.Collections.Generic;

namespace PreEmptive.Analytics.Common
{
  public static class EndpointAttributeLimits
  {
    static EndpointAttributeLimits()
    {
      int A_1 = 17;
      int num1 = 14805;
      int num2 = num1;
      num1 = 14805;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (true)
            ;
          if (false)
            ;
          DictionaryAttributeLimiter attributeLimiter1 = new DictionaryAttributeLimiter();
          attributeLimiter1.Set(Utils.a("ꛄ\uA8C6\uA4C8믊곌ꇎ꣐", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 600);
          attributeLimiter1.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 300);
          attributeLimiter1.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("도ꋆ믈룊\uA4CCꃎ뿐", A_1), 50);
          attributeLimiter1.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("뇄뻆마껊", A_1), 50);
          attributeLimiter1.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter1.Set(Utils.a("냄듆곈맊", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter1.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("뛄뗆\uAAC8\uE6CAꇌ껎뿐듒\uF8D4ꇖ볘\uA9DA", A_1), 200);
          attributeLimiter1.Set(Utils.a("\uAAC4듆", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 200);
          attributeLimiter1.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("계꧆뫈뿊곌ꇎ닐뛒", A_1), 100);
          attributeLimiter1.Set(Utils.a("ꛄ\uA8C6\uA4C8믊ꋌꇎ듐뷒ꇔ", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter1.Set(Utils.a("ꛄ\uA8C6\uA4C8믊ꋌꇎ듐뷒ꇔ", A_1), Utils.a("도ꋆ믈룊\uA4CCꃎ뿐", A_1), 30);
          attributeLimiter1.Set(Utils.a("ꛄ\uA8C6\uA4C8믊ꋌꇎ듐뷒ꇔ", A_1), Utils.a("ꏄ닆ꗈ\uA7CA菌껎볐뛒", A_1), 200);
          attributeLimiter1.Set(Utils.a("뗄뗆ꛈ믊\uA8CC뷎ꗐ\uAAD2", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 2000);
          attributeLimiter1.Set(Utils.a("뗄뗆ꛈ믊\uA8CC뷎ꗐ\uAAD2", A_1), Utils.a("도ꛆꗈ뻊\uA8CC", A_1), 4000);
          attributeLimiter1.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("계럆", A_1), 100);
          attributeLimiter1.Set(Utils.a("ꃄ뿆\uAAC8껊뷌믎룐볒믔", A_1), Utils.a("ꃄ뿆\uAAC8껊뷌믎룐볒믔菖ꃘꯚ룜", A_1), 200);
          EndpointAttributeLimits.PATFS = (IAttributeLimiter) attributeLimiter1;
          DictionaryAttributeLimiter attributeLimiter2 = new DictionaryAttributeLimiter();
          attributeLimiter2.Set(Utils.a("ꛄ\uA8C6\uA4C8믊곌ꇎ꣐", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), (int) byte.MaxValue);
          attributeLimiter2.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), (int) byte.MaxValue);
          attributeLimiter2.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("도ꋆ믈룊\uA4CCꃎ뿐", A_1), 50);
          attributeLimiter2.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("뇄뻆마껊", A_1), 50);
          attributeLimiter2.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter2.Set(Utils.a("냄듆곈맊", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter2.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("뛄뗆\uAAC8\uE6CAꇌ껎뿐듒\uF8D4ꇖ볘\uA9DA", A_1), 100);
          attributeLimiter2.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("뛄뗆\uAAC8\uE6CAꇌ껎뿐듒", A_1), 50);
          attributeLimiter2.Set(Utils.a("\uAAC4듆", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter2.Set(Utils.a("꓄럆마\uA7CA\uA4CC곎냐\uA7D2볔룖럘", A_1), Utils.a("계꧆뫈뿊곌ꇎ닐뛒", A_1), 100);
          attributeLimiter2.Set(Utils.a("ꛄ\uA8C6\uA4C8믊ꋌꇎ듐뷒ꇔ", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 250);
          attributeLimiter2.Set(Utils.a("ꛄ\uA8C6\uA4C8믊ꋌꇎ듐뷒ꇔ", A_1), Utils.a("도ꋆ믈룊\uA4CCꃎ뿐", A_1), 50);
          attributeLimiter2.Set(Utils.a("ꛄ\uA8C6\uA4C8믊ꋌꇎ듐뷒ꇔ", A_1), Utils.a("ꏄ닆ꗈ\uA7CA菌껎볐뛒", A_1), 400);
          attributeLimiter2.Set(Utils.a("귄\uA8C6뫈뿊", A_1), Utils.a("계럆", A_1), 15);
          attributeLimiter2.Set(Utils.a("ꏄꛆ볈\uA7CA만", A_1), Utils.a("ꛄ\uA8C6\uA4C8ꛊ\uA8CCꇎꗐ", A_1), 500);
          attributeLimiter2.Set(Utils.a("ꏄꛆ볈\uA7CA만", A_1), Utils.a("ꛄ\uA8C6\uA7C8뿊곌곎ꗐ", A_1), 500);
          attributeLimiter2.Set(Utils.a("ꃄ뿆\uAAC8껊뷌믎룐볒믔", A_1), Utils.a("ꃄ뿆\uAAC8껊뷌믎룐볒믔菖ꃘꯚ룜", A_1), 200);
          attributeLimiter2.Set(Utils.a("ꃄ뿆\uAAC8껊뷌믎룐볒믔", A_1), Utils.a("꣄ꋆ뫈룊곌꣎듐", A_1), 500);
          attributeLimiter2.Set(Utils.a("뛄돆\uA8C8\uA8CAꛌ", A_1), Utils.a("뇄뻆마껊", A_1), 200);
          attributeLimiter2.Set(Utils.a("뛄돆\uA8C8\uA8CAꛌ", A_1), Utils.a("뛄껆껈ꗊ곌믎ꓐꇒ냔", A_1), 200);
          attributeLimiter2.Set(Utils.a("뛄돆\uA8C8\uA8CAꛌ", A_1), Utils.a("꣄ꋆ뷈ꏊꋌꯎ", A_1), 200);
          attributeLimiter2.Set(Utils.a("뛄돆\uA8C8\uA8CAꛌ", A_1), Utils.a("ꏄ껆ꗈ껊", A_1), 256);
          attributeLimiter2.Set(Utils.a("ꏄꋆ\uA8C8뿊료뷎듐", A_1), Utils.a("ꋄ뗆ꛈ뻊뷌", A_1), 50);
          attributeLimiter2.Set(Utils.a("ꏄꋆ\uA8C8뿊료뷎듐", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 100);
          attributeLimiter2.Set(Utils.a("뗄뗆ꛈ믊\uA8CC뷎ꗐ\uAAD2", A_1), Utils.a("ꯄꛆ\uA4C8껊", A_1), 2000);
          attributeLimiter2.Set(Utils.a("뗄뗆ꛈ믊\uA8CC뷎ꗐ\uAAD2", A_1), Utils.a("도ꛆꗈ뻊\uA8CC", A_1), 4000);
          EndpointAttributeLimits.RI = (IAttributeLimiter) attributeLimiter2;
          EndpointAttributeLimits.None = (IAttributeLimiter) new DictionaryAttributeLimiter();
          EndpointAttributeLimits.a();
          break;
        default:
          goto case 1;
      }
    }

    private static void a()
    {
      switch (0)
      {
        default:
          DictionaryAttributeLimiter attributeLimiter = new DictionaryAttributeLimiter((IDictionary<string, Dictionary<string, int>>) EndpointAttributeLimits.RI);
          DictionaryAttributeLimiter patfs = (DictionaryAttributeLimiter) EndpointAttributeLimits.PATFS;
          using (Dictionary<string, Dictionary<string, int>>.KeyCollection.Enumerator enumerator1 = patfs.Keys.GetEnumerator())
          {
            int num1 = 3;
            while (true)
            {
              string current1;
              Dictionary<string, int>.KeyCollection.Enumerator enumerator2;
              switch (num1)
              {
                case 0:
                  goto label_29;
                case 1:
                  if (enumerator1.MoveNext())
                  {
                    current1 = enumerator1.Current;
                    enumerator2 = patfs[current1].Keys.GetEnumerator();
                    switch (true ? 1 : 0)
                    {
                      case 0:
                      case 2:
                        goto label_27;
                      default:
                        if (true)
                          ;
                        num1 = 4;
                        continue;
                    }
                  }
                  else
                  {
                    num1 = 2;
                    continue;
                  }
                case 2:
label_27:
                  num1 = 0;
                  continue;
                case 3:
                  switch (0)
                  {
                    case 0:
                      goto label_5;
                    default:
                      continue;
                  }
                case 4:
                  try
                  {
                    int num2 = 3;
                    while (true)
                    {
                      int num3;
                      int? nullable;
                      string current2;
                      switch (num2)
                      {
                        case 0:
                          if (nullable.Value >= patfs[current1][current2])
                          {
                            num3 = 4;
                            num2 = num3;
                            continue;
                          }
                          break;
                        case 1:
                          goto label_9;
                        case 2:
                          if (nullable.HasValue)
                          {
                            num3 = 5;
                            num2 = num3;
                            continue;
                          }
                          goto case 4;
                        case 3:
                          switch (0)
                          {
                            case 0:
                              break;
                            default:
                              continue;
                          }
                          break;
                        case 4:
                          attributeLimiter.Set(current1, current2, patfs[current1][current2]);
                          num3 = 6;
                          num2 = num3;
                          continue;
                        case 5:
                          num3 = 0;
                          num2 = num3;
                          continue;
                        case 7:
                          if (!enumerator2.MoveNext())
                          {
                            num3 = 8;
                            num2 = num3;
                            continue;
                          }
                          current2 = enumerator2.Current;
                          nullable = attributeLimiter.MaxSize(current1, current2);
                          num3 = 2;
                          num2 = num3;
                          continue;
                        case 8:
                          num3 = 1;
                          num2 = num3;
                          continue;
                      }
                      num3 = 7;
                      num2 = num3;
                    }
                  }
                  finally
                  {
                    enumerator2.Dispose();
                  }
                default:
label_5:
                  if (false)
                    break;
                  break;
              }
label_9:
              num1 = 1;
            }
          }
label_29:
          EndpointAttributeLimits.Common = (IAttributeLimiter) attributeLimiter;
          break;
      }
    }

    public static IAttributeLimiter Common
    {
      get
      {
        int num1 = -996;
        int num2 = num1;
        num1 = -996;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return EndpointAttributeLimits.a;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -16645;
        int num2 = num1;
        num1 = -16645;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            EndpointAttributeLimits.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public static IAttributeLimiter PATFS
    {
      get
      {
        int num1 = -23289;
        int num2 = num1;
        num1 = -23289;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return EndpointAttributeLimits.b;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -31062;
        int num2 = num1;
        num1 = -31062;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            EndpointAttributeLimits.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public static IAttributeLimiter RI
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -20252;
        int num2 = num1;
        num1 = -20252;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return EndpointAttributeLimits.c;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 5911;
        int num2 = num1;
        num1 = 5911;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            EndpointAttributeLimits.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public static IAttributeLimiter None
    {
      get
      {
        int num1 = 15912;
        int num2 = num1;
        num1 = 15912;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return EndpointAttributeLimits.d;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -10882;
        int num2 = num1;
        num1 = -10882;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            EndpointAttributeLimits.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }
  }
}
