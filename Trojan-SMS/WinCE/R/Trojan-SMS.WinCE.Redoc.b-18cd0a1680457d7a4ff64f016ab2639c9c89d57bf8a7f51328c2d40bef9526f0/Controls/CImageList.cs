// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CImageList
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System;
using System.Collections;
using System.Drawing;

namespace Dbasic.Controls
{
  public class CImageList : CControls
  {
    public CImageList(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      ArrayList control = (ArrayList) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "add":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          ++place.WordI;
          control.Add((object) this.CRunner.BitmapFromString(runReturn1.vString));
          return new MethodReturn(place);
        case "insert":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          ++place.WordI;
          int vDouble1 = (int) runReturn2.vDouble;
          runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn2.place;
          ++place.WordI;
          control.Insert(vDouble1, (object) this.CRunner.BitmapFromString(runReturn2.vString));
          return new MethodReturn(place);
        case "count":
          return new MethodReturn(place, control.Count.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "removeat":
          if (this.CRunner.GetWord(place.LineI, place.WordI).Value != "(")
            this.CRunner.ThrowError("Missing \"(\".", place.LineI);
          RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          ++place.WordI;
          control.RemoveAt((int) runReturn3.vDouble);
          return new MethodReturn(place);
        case "clear":
          control.Clear();
          return new MethodReturn(place);
        case "item":
          if (assign)
          {
            RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn4.place;
            int vDouble2 = (int) runReturn4.vDouble;
            ++place.WordI;
            ++place.WordI;
            runReturn4 = this.CRunner.RunCode(place, true, true, ref locals);
            place = runReturn4.place;
            control[vDouble2] = (object) this.CRunner.BitmapFromString(runReturn4.vString);
            return new MethodReturn(place);
          }
          ++place.WordI;
          RunReturn runReturn5 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn5.place;
          int vDouble3 = (int) runReturn5.vDouble;
          ++place.WordI;
          this.CRunner.returnObject = control[vDouble3];
          return new MethodReturn(place, "~" + name + "." + vDouble3.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "pixel":
          ++place.WordI;
          RunReturn runReturn6 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn6.place;
          return this.CRunner.Cform.GetPixel((Bitmap) control[(int) runReturn6.vDouble], place, ref locals);
        case "width":
          ++place.WordI;
          RunReturn runReturn7 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn7.place;
          ++place.WordI;
          return new MethodReturn(place, ((Image) control[(int) runReturn7.vDouble]).Width.ToString((IFormatProvider) CRunner.cul), 0.0);
        case "height":
          ++place.WordI;
          RunReturn runReturn8 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn8.place;
          ++place.WordI;
          return new MethodReturn(place, ((Image) control[(int) runReturn8.vDouble]).Height.ToString((IFormatProvider) CRunner.cul), 0.0);
        default:
          return new MethodReturn();
      }
    }

    public override void AddRunTimeEvent(object sender, string name)
    {
    }

    public MethodReturn addImageList(Place place, ref Locals locals)
    {
      ++place.WordI;
      RunReturn runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      ArrayList control = new ArrayList();
      this.CRunner.htControls.Add((object) lower, (object) new WrapControl((object) control, (CControls) this));
      return new MethodReturn(place);
    }

    public void ShortAdd(string s)
    {
      ArrayList control = new ArrayList();
      string Name;
      string[] Images;
      CBuildDesigner.ImageListGetProperties(s, out string _, out Name, out int _, out int _, out int _, out int _, out Images);
      foreach (string s1 in Images)
        control.Add((object) this.CRunner.BitmapFromString(s1));
      this.CRunner.htControls.Add((object) Name.ToLower(CRunner.cul), (object) new WrapControl((object) control, (CControls) this));
    }
  }
}
