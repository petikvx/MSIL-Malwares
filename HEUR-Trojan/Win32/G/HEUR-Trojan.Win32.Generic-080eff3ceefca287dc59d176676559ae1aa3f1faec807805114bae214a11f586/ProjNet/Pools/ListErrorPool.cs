// Decompiled with JetBrains decompiler
// Type: ProjNet.Pools.ListErrorPool
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using ProjNet.Adapter;
using ProjNet.Consumers;
using ProjNet.Objects;
using ProjNet.Roles;
using ProjNet.Structs;
using ProjNet.Visitors;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Collections;
using TYPELIBA.Identifiers;
using TYPELIBA.Listeners;
using TYPELIBA.Lists;

namespace ProjNet.Pools
{
  public class ListErrorPool : 
    Message,
    RulesAccountCollection,
    ReponseRepositoryConsumer,
    Listener,
    Worker
  {
    private FieldConsumerAdapter m_Importer;
    private PrototypeEventRole proxy;
    private List<AccountTokenStructBuilder> annotation;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal ListErrorPool(
      FieldConsumerAdapter info,
      RegistryPolicyList result,
      PrototypeEventRole dic,
      List<AdapterErrorPool> config2,
      string info3,
      string value4,
      long sizesetup5,
      string second6,
      string setup7,
      string cfg8)
    {
      ManagerParamsID.NewExpression();
      // ISSUE: explicit constructor call
      base.\u002Ector(result, config2, info3, value4, sizesetup5, second6, setup7, cfg8);
      this.m_Importer = info;
      this.proxy = dic;
    }

    public static ListErrorPool WGS84
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        int num1 = 4;
        ListErrorPool listErrorPool;
        while (true)
        {
          int num2 = num1;
          List<AdapterErrorPool> config2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 4:
                config2 = new List<AdapterErrorPool>(2);
                if (true)
                {
                  num2 = 2;
                  continue;
                }
                goto label_8;
              case 1:
              case 2:
                goto label_1;
              case 3:
                goto label_5;
              case 5:
                goto label_8;
              default:
                num2 = 3;
                continue;
            }
          }
label_1:
          config2.Add(new AdapterErrorPool("Lon", LinkTransactionType.East));
label_5:
          config2.Add(new AdapterErrorPool("Lat", LinkTransactionType.North));
          listErrorPool = new ListErrorPool((FieldConsumerAdapter) ProducerEventRole.VerifyObject(), (RegistryPolicyList) TYPELIBA.Messages.Attribute.WGS84, (PrototypeEventRole) PageProcessVisitor.Greenwich, config2, "WGS 84", "EPSG", 4326L, string.Empty, string.Empty, string.Empty);
          num1 = 5;
        }
label_8:
        return listErrorPool;
      }
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public FieldConsumerAdapter InvokeState() => this.m_Importer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ReadState(FieldConsumerAdapter param) => this.m_Importer = param;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override ProccesorAccountCollection RunState(int taskstart) => (ProccesorAccountCollection) this.m_Importer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public PrototypeEventRole CalculateState() => this.proxy;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void CustomizeState(PrototypeEventRole first) => this.proxy = first;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int PostState() => this.annotation.Count;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal List<AccountTokenStructBuilder> ChangeProcess() => this.annotation;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void ResolveProcess(List<AccountTokenStructBuilder> info) => this.annotation = info;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public AccountTokenStructBuilder FlushState(int taskoffset) => this.annotation[taskoffset];

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string RevertError()
    {
      int num1 = 0;
      if (true)
        goto label_18;
label_1:
      bool flag;
      StringBuilder stringBuilder;
      int mindef;
      if (flag)
      {
        stringBuilder.AppendFormat(", {0}", (object) this.InitState(mindef).EnableObject());
        ++mindef;
        goto label_16;
      }
label_2:
      int num2;
      if (!string.IsNullOrEmpty(this.LoginState()) && this.RestartState() > 0L)
      {
        num2 = 4;
        goto label_17;
      }
label_9:
      stringBuilder.Append("]");
      string str = stringBuilder.ToString();
      if (true)
      {
        num1 = 8;
        goto label_18;
      }
label_10:
      int num3;
      if (!(this.SetupObject()[1].Name != "Lat"))
      {
        num3 = this.SetupObject()[1].PrintObject() != LinkTransactionType.North ? 1 : 0;
        goto label_13;
      }
label_12:
      num3 = 1;
label_13:
      if (num3 != 0)
        mindef = 0;
      else
        goto label_2;
label_16:
      flag = mindef < this.SetupObject().Count;
      goto label_1;
label_17:
      num1 = num2;
label_18:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_6;
          case 1:
            goto label_10;
          case 2:
          case 7:
            if (this.SetupObject().Count == 2 && !(this.SetupObject()[0].Name != "Lon") && this.SetupObject()[0].PrintObject() == LinkTransactionType.East)
            {
              num1 = 1;
              continue;
            }
            goto label_12;
          case 3:
            goto label_7;
          case 4:
          case 5:
            goto label_8;
          case 6:
            goto label_1;
          case 8:
            goto label_20;
          default:
            num1 = 6;
            continue;
        }
      }
label_6:
      stringBuilder = new StringBuilder();
      num2 = 3;
      goto label_17;
label_7:
      stringBuilder.AppendFormat("GEOGCS[\"{0}\", {1}, {2}, {3}", (object) this.Name, (object) this.RemoveState().RevertError(), (object) this.CalculateState().RevertError(), (object) this.InvokeState().RevertError());
      num2 = 7;
      goto label_17;
label_8:
      stringBuilder.AppendFormat(", AUTHORITY[\"{0}\", \"{1}\"]", (object) this.LoginState(), (object) this.RestartState());
      goto label_9;
label_20:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string InterruptState()
    {
      int num1 = 3;
      string str;
      while (true)
      {
        StringBuilder stringBuilder;
        List<AdapterErrorPool>.Enumerator enumerator;
        int num2;
        switch (num1)
        {
          case 0:
          case 3:
            stringBuilder = new StringBuilder();
            num2 = 5;
            break;
          case 1:
          case 5:
            stringBuilder.AppendFormat((IFormatProvider) CultureInfo.InvariantCulture.NumberFormat, "<CS_CoordinateSystem Dimension=\"{0}\"><CS_GeographicCoordinateSystem>{1}", new object[2]
            {
              (object) this.IncludeState(),
              (object) this.AddProcess()
            });
            enumerator = this.SetupObject().GetEnumerator();
            num2 = 4;
            break;
          case 2:
            str = stringBuilder.ToString();
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 1;
          case 4:
            try
            {
label_9:
              while (enumerator.MoveNext())
              {
                AdapterErrorPool current = enumerator.Current;
                int num3 = 2;
                while (true)
                {
                  switch (num3)
                  {
                    case 0:
                    case 2:
                      goto label_6;
                    case 1:
                    case 3:
                      goto label_9;
                    default:
                      num3 = 3;
                      continue;
                  }
                }
label_6:
                stringBuilder.Append(current.GetObject());
              }
            }
            finally
            {
              enumerator.Dispose();
            }
            stringBuilder.AppendFormat("{0}{1}{2}</CS_GeographicCoordinateSystem></CS_CoordinateSystem>", (object) this.RemoveState().InterruptState(), (object) this.InvokeState().InterruptState(), (object) this.CalculateState().InterruptState());
            goto case 2;
          case 6:
            goto label_15;
          default:
            if (true)
            {
              num1 = 2;
              continue;
            }
            goto label_15;
        }
        num1 = num2;
      }
label_15:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override bool CompareState(object value)
    {
      int num1 = 7;
      ListErrorPool listErrorPool;
      bool flag1;
      while (true)
      {
        int num2 = num1;
        int index1;
        bool flag2;
        bool flag3;
        while (true)
        {
          bool flag4;
          int index2;
          int num3;
          switch (num2)
          {
            case 0:
              if (!flag2)
              {
                ++index1;
                goto case 4;
              }
              else
                goto label_12;
            case 1:
            case 2:
            case 9:
            case 11:
              goto label_40;
            case 3:
              if (!flag4)
              {
                if (listErrorPool.InvokeState().CompareState((object) this.InvokeState()) && listErrorPool.RemoveState().CompareState((object) this.RemoveState()))
                {
                  int num4 = 13;
                  num2 = ListErrorPool.PushDispatcher() ? num4 : num4;
                  continue;
                }
                goto label_38;
              }
              else
              {
                if (listErrorPool.SetupObject()[index2].PrintObject() != this.SetupObject()[index2].PrintObject())
                {
                  flag1 = false;
                  num2 = 1;
                  continue;
                }
                ++index2;
                goto case 10;
              }
            case 4:
            case 6:
label_14:
              if (index1 < this.ChangeProcess().Count)
                goto label_25;
              else
                break;
            case 5:
              num3 = listErrorPool.ChangeProcess() != null ? 1 : 0;
              goto label_20;
            case 7:
              goto label_24;
            case 8:
              goto label_30;
            case 10:
              flag4 = index2 < listErrorPool.SetupObject().Count;
              num2 = 3;
              continue;
            case 12:
              if (!flag3)
              {
                listErrorPool = value as ListErrorPool;
                if (listErrorPool.IncludeState() == this.IncludeState())
                {
                  if (this.ChangeProcess() == null || listErrorPool.ChangeProcess() != null)
                  {
                    if (this.ChangeProcess() != null)
                    {
                      num3 = 0;
                      goto label_20;
                    }
                    else
                    {
                      num2 = 5;
                      continue;
                    }
                  }
                  else
                    goto label_29;
                }
                else
                  goto label_27;
              }
              else
                goto label_34;
            case 13:
              goto label_37;
            default:
              goto label_10;
          }
label_15:
          if (this.SetupObject().Count == listErrorPool.SetupObject().Count)
          {
            index2 = 0;
            int num5 = 10;
            num2 = ListErrorPool.PushDispatcher() ? num5 : num5;
            continue;
          }
          goto label_16;
label_20:
          if (num3 == 0)
          {
            if (this.ChangeProcess() != null && listErrorPool.ChangeProcess() != null)
            {
              if (this.ChangeProcess().Count == listErrorPool.ChangeProcess().Count)
              {
                index1 = 0;
                goto label_14;
              }
              else
                goto label_6;
            }
            else
              goto label_15;
          }
          else
            goto label_21;
        }
label_10:
        num1 = 4;
        continue;
label_21:
        flag1 = false;
        num1 = 11;
        continue;
label_24:
        flag3 = !(value is ListErrorPool);
        num1 = 12;
        continue;
label_25:
        flag2 = !listErrorPool.ChangeProcess()[index1].Equals(this.ChangeProcess()[index1]);
        num1 = 0;
        continue;
label_29:
        num1 = 8;
        continue;
label_34:
        flag1 = false;
        num1 = 2;
      }
label_6:
      flag1 = false;
      goto label_40;
label_12:
      flag1 = false;
      goto label_40;
label_16:
      flag1 = false;
      goto label_40;
label_27:
      flag1 = false;
      goto label_40;
label_30:
      flag1 = false;
      goto label_40;
label_37:
      int num6 = listErrorPool.CalculateState().CompareState((object) this.CalculateState()) ? 1 : 0;
      goto label_39;
label_38:
      num6 = 0;
label_39:
      flag1 = num6 != 0;
label_40:
      return flag1;
    }

    internal static bool CheckDispatcher() => true;

    internal static bool PushDispatcher() => false;
  }
}
