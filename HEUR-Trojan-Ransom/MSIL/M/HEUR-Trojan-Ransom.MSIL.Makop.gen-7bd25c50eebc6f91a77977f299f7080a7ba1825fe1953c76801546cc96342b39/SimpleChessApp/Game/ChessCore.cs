// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
label_1:
      int num1 = 1228743305;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1350718855)) % 4U)
        {
          case 1:
            this.ChessBoard = b;
            num1 = (int) num2 * 621545382 ^ -1910325335;
            continue;
          case 2:
            num1 = (int) num2 * -1935020298 ^ -2079609414;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.resetFlags();
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
label_1:
      int num1 = -1635804564;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1383077069)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1283111705 ^ 704021744;
            continue;
          case 3:
            this.resetFlags();
            num1 = (int) num2 * 75953681 ^ -1722879827;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      this.ChessBoard.Restart();
    }

    private void resetFlags(bool turn = false)
    {
      this.DisableTurn = turn;
label_1:
      int num1 = -1170260919;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1349215248)) % 6U)
        {
          case 0:
            this.TurnId = 1;
            num1 = (int) num2 * -585290614 ^ -968224459;
            continue;
          case 1:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * 1990149098 ^ -1454972694;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.lastCheckPiece = (Square) null;
            this.Turns.Clear();
            num1 = (int) num2 * 123335235 ^ -1922802737;
            continue;
          case 4:
            num1 = (int) num2 * -1425086891 ^ 1895675760;
            continue;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    internal void TestPassant()
    {
      new DebugChess(this.ChessBoard).TestPassant();
label_1:
      int num1 = -1152147290;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1722089922)) % 5U)
        {
          case 0:
            num1 = (int) num2 * 1113102033 ^ 1311276825;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 501846715 ^ 145786063;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 2120699160 ^ 119912407;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -730064494;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1616113993)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            new DebugChess(this.ChessBoard).TestSinglePiece(x);
            this.resetFlags(true);
            num1 = (int) num2 * -1100708042 ^ -606595527;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -1090670962;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1991386688)) % 5U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 1598542313 ^ 310976658;
            continue;
          case 1:
            num1 = (int) num2 * 1568728582 ^ -880580538;
            continue;
          case 2:
            goto label_1;
          case 3:
            new DebugChess(this.ChessBoard).TestCastling();
            num1 = (int) num2 * 1822563529 ^ -1575451052;
            continue;
          case 4:
            goto label_3;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestCheck()
    {
      new DebugChess(this.ChessBoard).TestCheck();
label_1:
      int num1 = 1477642773;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1290000635)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 803627541 ^ -1817387179;
            continue;
          case 2:
            num1 = (int) num2 * 1906075667 ^ -934963136;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestDiscoverCheck()
    {
      new DebugChess(this.ChessBoard).TestDiscoverCheck();
label_1:
      int num1 = -623912920;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1543987328)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 400770049 ^ 1624762355;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      this.resetFlags(true);
    }

    internal void TestPromotion()
    {
      new DebugChess(this.ChessBoard).TestPromotion();
label_1:
      int num1 = 1674581295;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1494097295)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1538267544 ^ 1115106369;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * -1330104532 ^ 1593686911;
            continue;
          case 3:
            num1 = (int) num2 * 1363234439 ^ -259383037;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void CheckOnCastling()
    {
      new DebugChess(this.ChessBoard).CheckOnCastling();
label_1:
      int num1 = -223007272;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -508367579)) % 4U)
        {
          case 0:
            this.resetFlags(true);
            num1 = (int) num2 * 1331051496 ^ 1717340106;
            continue;
          case 1:
            num1 = (int) num2 * -2103499418 ^ -423093517;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }
  }
}
