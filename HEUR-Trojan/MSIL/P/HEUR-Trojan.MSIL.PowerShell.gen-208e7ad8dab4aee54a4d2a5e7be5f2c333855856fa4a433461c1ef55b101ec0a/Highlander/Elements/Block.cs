// Decompiled with JetBrains decompiler
// Type: Highlander.Elements.Block
// Assembly: SHA384Mana, Version=2.1.4.10, Culture=neutral, PublicKeyToken=null
// MVID: B6D2A9B2-9B43-4C18-A521-64033E474772
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.PowerShell.gen-208e7ad8dab4aee54a4d2a5e7be5f2c333855856fa4a433461c1ef55b101ec0a.exe

using Game.Elements;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;

namespace Highlander.Elements
{
  public class Block : Sprite
  {
    public Block(Image image, Size size)
      : base(image, Point.Empty)
    {
label_1:
      int num1 = -1681536205;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2065505219)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Block_Size = size;
            num1 = (int) num2 * 1922324855 ^ 85898882;
            continue;
          case 2:
            this.MatrixIndex = 0;
            num1 = (int) num2 * 798634542 ^ -93352471;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = (int) num2 * -1893805739 ^ -1803881927;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public int[,] Matrix
    {
      get
      {
label_1:
        int num1 = 1485194740;
        int[,] matrix;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1342560754)) % 3U)
          {
            case 1:
              matrix = this.Matrices[this.MatrixIndex];
              num1 = (int) num2 * -552360204 ^ 1233438100;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return matrix;
      }
    }

    protected List<int[,]> Matrices { get; set; }

    private int MatrixIndex { get; set; }

    public Point Location { get; set; }

    public Size Matrix_Size
    {
      get
      {
label_1:
        int num1 = -527688919;
        Size matrixSize;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1331418588)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              matrixSize = new Size(Block.\u202A‎‏⁮​‮⁮‌‏​​⁯‪⁬‏⁪⁫⁯‍‏‬‬⁯⁪⁯‪‬⁯⁪‪‏⁮⁭‮⁪⁭⁯‌⁯‫‮((Array) this.Matrix, 1), Block.\u202A‎‏⁮​‮⁮‌‏​​⁯‪⁬‏⁪⁫⁯‍‏‬‬⁯⁪⁯‪‬⁯⁪‪‏⁮⁭‮⁪⁭⁯‌⁯‫‮((Array) this.Matrix, 0));
              num1 = (int) num2 * -1005259088 ^ 180234542;
              continue;
            case 2:
              num1 = (int) num2 * -620399016 ^ 1102781975;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return matrixSize;
      }
    }

    public Size Block_Size { get; private set; }

    public void Rotate(int value)
    {
      int num1 = this.MatrixIndex + value;
      if (num1 >= 0)
        goto label_4;
label_1:
      int num2 = -927777164;
label_2:
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ -396265693)) % 5U)
        {
          case 0:
            num1 = 0;
            num2 = (int) num3 * 2031580140 ^ 787658130;
            continue;
          case 2:
            num1 = this.Matrices.Count - 1;
            num2 = (int) num3 * 1596120975 ^ 1232205591;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_4;
          default:
            goto label_6;
        }
      }
label_6:
      this.MatrixIndex = num1;
      return;
label_4:
      num2 = num1 == this.Matrices.Count ? -2081525926 : (num2 = -46833890);
      goto label_2;
    }

    public void SetDefault()
    {
label_1:
      int num1 = 385502768;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 651201579)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.MatrixIndex = 0;
            num1 = (int) num2 * -299849149 ^ 1594865477;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public override void Draw(DrawHandler drawHandler)
    {
      int index1 = 0;
label_8:
      int num1 = index1;
      Size size = this.Matrix_Size;
      int height1 = size.Height;
      bool flag = num1 < height1;
      int num2 = 1319538590;
      int index2;
      Point position;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num2 ^ 701631875)) % 14U)
        {
          case 0:
            goto label_8;
          case 1:
            num2 = (int) num3 * 603296866 ^ -1925854483;
            continue;
          case 2:
            int num4;
            num2 = num4 = this.Matrix[index1, index2] > 0 ? 2118852344 : (num4 = 1316175263);
            continue;
          case 3:
            num2 = (int) num3 * 109898178 ^ -1628637304;
            continue;
          case 4:
            int num5 = index2;
            size = this.Matrix_Size;
            int width1 = size.Width;
            int num6;
            num2 = num6 = num5 < width1 ? 347999339 : (num6 = 541580317);
            continue;
          case 5:
            num2 = (int) num3 * 1625316298 ^ -729431819;
            continue;
          case 6:
            ++index1;
            num2 = (int) num3 * -1201641475 ^ -1077882759;
            continue;
          case 7:
            goto label_3;
          case 8:
            ++index2;
            num2 = 26530935;
            continue;
          case 9:
            int num7 = flag ? 1192880269 : (num7 = 1842159043);
            num2 = num7 ^ (int) num3 * -989204153;
            continue;
          case 10:
            drawHandler.Draw(this.Image, position);
            num2 = (int) num3 * 1920068241 ^ -1683152310;
            continue;
          case 11:
            ref Point local = ref position;
            int num8 = index2 + this.Location.X;
            size = this.Block_Size;
            int width2 = size.Width;
            int x = num8 * width2;
            int num9 = index1 + this.Location.Y;
            size = this.Block_Size;
            int height2 = size.Height;
            int y = num9 * height2;
            local = new Point(x, y);
            num2 = (int) num3 * 460189342 ^ -1390534771;
            continue;
          case 12:
            num2 = 80448390;
            continue;
          case 13:
            index2 = 0;
            num2 = 1970175582;
            continue;
          default:
            goto label_16;
        }
      }
label_3:
      return;
label_16:;
    }

    static int \u202A‎‏⁮​‮⁮‌‏​​⁯‪⁬‏⁪⁫⁯‍‏‬‬⁯⁪⁯‪‬⁯⁪‪‏⁮⁭‮⁪⁭⁯‌⁯‫‮([In] Array obj0, [In] int obj1) => obj0.GetLength(obj1);
  }
}
