// Decompiled with JetBrains decompiler
// Type: SMALLR.Messages.PagePolicyMessage
// Assembly: SMALLR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6D2A6844-DF52-4C3E-A39E-6BCAB729CFBF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-cb64837983ad6cdbc07df3dc8272a72b4d1b41314b797cc4f9bb67cd37f7b0f5.exe

using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Tetris.Managers;
using Tetris.Producers;

namespace SMALLR.Messages
{
  public class PagePolicyMessage : ContainerValueProducer
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public PagePolicyMessage(Image setup, Size cust)
    {
      int num1 = 2;
      if (true)
        goto label_4;
label_1:
      // ISSUE: reference to a compiler-generated method
      this.ReadAttr(0);
      if (true)
      {
        num1 = 5;
        goto label_4;
      }
label_2:
      // ISSUE: reference to a compiler-generated method
      this.ForgotAttr(cust);
      goto label_1;
label_4:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 2:
            // ISSUE: explicit constructor call
            base.\u002Ector(setup, Point.Empty);
            num2 = 3;
            break;
          case 1:
          case 3:
            goto label_2;
          case 4:
            goto label_1;
          case 5:
            goto label_7;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_7:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public int[,] NewAttr() => this.CloneAttr()[this.CustomizeAttr()];

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected List<int[,]> CloneAttr() => this.annotation;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    protected void DestroyAttr(List<int[,]> value) => this.annotation = value;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Point CountAttr() => this.strategy;

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void FindAttr(Point init) => this.strategy = init;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Size SetupAttr()
    {
      Size size = new Size(PagePolicyMessage.\u206B⁮⁭⁯​⁪⁪‮⁫‏⁬⁪‍⁬‍‫⁪⁯⁭⁮​⁭⁭‏⁪‫​‬​⁯⁪⁬‪‌⁭‪⁮​‬‮‮((Array) this.NewAttr(), 1), PagePolicyMessage.\u206B⁮⁭⁯​⁪⁪‮⁫‏⁬⁪‍⁬‍‫⁪⁯⁭⁮​⁭⁭‏⁪‫​‬​⁯⁪⁬‪‌⁭‪⁮​‬‮‮((Array) this.NewAttr(), 0));
label_1:
      int num1 = -1136599177;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -698348397)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1346328891 ^ 1824453811;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return size;
    }

    [CompilerGenerated]
    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public Size StartAttr() => this.system;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InterruptAttr(int ID_init)
    {
      int num1 = 4;
label_5:
      while (true)
      {
        int num2 = num1;
        int length_init;
        while (true)
        {
          bool flag;
          int num3;
          switch (num2)
          {
            case 0:
            case 1:
              if (length_init >= 0)
                goto case 3;
              else
                goto label_20;
            case 2:
label_17:
              length_init = 0;
              if (PagePolicyMessage.MapPrototype())
              {
                num2 = 6;
                continue;
              }
              goto label_18;
            case 3:
label_11:
              flag = length_init == this.CloneAttr().Count;
              num3 = 548968486;
              break;
            case 4:
label_12:
              // ISSUE: reference to a compiler-generated method
              length_init = this.CustomizeAttr() + ID_init;
              num3 = 1627010251;
              break;
            case 5:
            case 6:
label_15:
              // ISSUE: reference to a compiler-generated method
              this.ReadAttr(length_init);
              int num4 = 8;
              num2 = PagePolicyMessage.UpdatePrototype() ? num4 : num4;
              continue;
            case 7:
              goto label_18;
            case 8:
              goto label_16;
            default:
              num3 = 1378402692;
              break;
          }
          while (true)
          {
            uint num5;
            switch ((num5 = (uint) (num3 ^ 1337100823)) % 10U)
            {
              case 0:
                num3 = (int) num5 * 1344188674 ^ -710861301;
                continue;
              case 1:
                goto label_17;
              case 2:
                goto label_5;
              case 3:
                if (flag)
                {
                  num3 = (int) num5 * 372567793 ^ -867345227;
                  continue;
                }
                goto label_15;
              case 4:
                num1 = 0;
                num3 = (int) num5 * 1854190249 ^ -1152910187;
                continue;
              case 6:
                goto label_12;
              case 7:
                num1 = 4;
                num3 = (int) num5 * -936824285 ^ 1679923304;
                continue;
              case 8:
                num3 = 1019994689;
                continue;
              case 9:
                goto label_11;
              default:
                goto label_14;
            }
          }
label_14:
          if (true)
            num2 = 2;
          else
            goto label_15;
        }
label_18:
        length_init = this.CloneAttr().Count - 1;
        num1 = 3;
        continue;
label_20:
        num1 = 7;
      }
label_16:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void PublishAttr()
    {
      // ISSUE: reference to a compiler-generated method
      this.ReadAttr(0);
label_1:
      int num1 = -1356219884;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1940190055)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1096759997 ^ -2028368281;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void Draw(Mock instance)
    {
      int num1 = 8;
label_10:
      while (true)
      {
        int num2 = num1;
        int index1;
        int index2;
        bool flag1;
        while (true)
        {
          bool flag2;
          int num3;
          bool flag3;
          int num4;
          switch (num2)
          {
            case 0:
              goto label_8;
            case 1:
            case 5:
label_14:
              flag3 = index2 < this.SetupAttr().Height;
              num4 = -2098472383;
              break;
            case 2:
            case 4:
            case 6:
label_3:
              flag2 = index1 < this.SetupAttr().Width;
              num4 = -2060134987;
              break;
            case 3:
              goto label_5;
            case 7:
label_19:
              flag1 = num3 > 0;
              num4 = -1243893915;
              break;
            case 8:
label_15:
              num4 = -185185172;
              break;
            case 9:
label_18:
              ++index2;
              num4 = -325697307;
              break;
            case 10:
              goto label_17;
            default:
              num4 = -1740249138;
              break;
          }
          while (true)
          {
            uint num5;
            switch ((num5 = (uint) (num4 ^ -1002511413)) % 19U)
            {
              case 0:
                index2 = 0;
                num4 = (int) num5 * 1292745227 ^ -2088482496;
                continue;
              case 1:
                goto label_21;
              case 2:
                if (!flag3)
                {
                  num4 = (int) num5 * -266460774 ^ -774032476;
                  continue;
                }
                goto label_7;
              case 3:
                goto label_4;
              case 4:
                goto label_18;
              case 5:
                goto label_15;
              case 6:
                num4 = -76296943;
                continue;
              case 7:
              case 12:
                goto label_3;
              case 8:
                goto label_23;
              case 9:
                num1 = 9;
                num4 = (int) num5 * 145869779 ^ -2031640837;
                continue;
              case 10:
                goto label_28;
              case 11:
                goto label_14;
              case 13:
              case 16:
                goto label_10;
              case 14:
                goto label_19;
              case 15:
                int num6 = flag2 ? 355254192 : (num6 = 9149321);
                num4 = num6 ^ (int) num5 * -832692369;
                continue;
              case 17:
                goto label_22;
              case 18:
                num1 = 10;
                num4 = (int) num5 * 1917690134 ^ 1899669745;
                continue;
              default:
                goto label_16;
            }
          }
label_4:
          num3 = this.NewAttr()[index2, index1];
          num2 = 7;
          continue;
label_7:
          index1 = 0;
          if (true)
            num2 = 2;
          else
            goto label_8;
        }
label_5:
        Point result;
        instance.GetServer(this.WriteVisitor(), result);
label_6:
        ++index1;
        num1 = 4;
        continue;
label_8:
        if (flag1)
        {
          ref Point local = ref result;
          int num7 = index1;
          Point point = this.CountAttr();
          int x1 = point.X;
          int x2 = (num7 + x1) * this.StartAttr().Width;
          int num8 = index2;
          point = this.CountAttr();
          int y1 = point.Y;
          int y2 = (num8 + y1) * this.StartAttr().Height;
          local = new Point(x2, y2);
          goto label_5;
        }
        else
          goto label_6;
label_21:
        num1 = 0;
        continue;
label_23:
        num1 = 3;
        continue;
label_28:
        num1 = 5;
      }
label_22:
      return;
label_16:
      return;
label_17:;
    }

    internal static bool MapPrototype() => true;

    internal static bool UpdatePrototype() => false;

    static int \u206B⁮⁭⁯​⁪⁪‮⁫‏⁬⁪‍⁬‍‫⁪⁯⁭⁮​⁭⁭‏⁪‫​‬​⁯⁪⁬‪‌⁭‪⁮​‬‮‮([In] Array obj0, [In] int obj1) => obj0.GetLength(obj1);
  }
}
