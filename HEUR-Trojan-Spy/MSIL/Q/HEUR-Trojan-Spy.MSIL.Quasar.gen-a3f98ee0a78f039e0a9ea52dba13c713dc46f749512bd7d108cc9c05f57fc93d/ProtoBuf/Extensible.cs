// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Extensible
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf.Meta;
using System;
using System.Collections;
using System.Collections.Generic;

namespace ProtoBuf
{
  public abstract class Extensible : IExtensible
  {
    private IExtension extensionObject;

    IExtension IExtensible.GetExtensionObject(bool createIfMissing) => this.GetExtensionObject(createIfMissing);

    protected virtual IExtension GetExtensionObject(bool createIfMissing) => Extensible.GetExtensionObject(ref this.extensionObject, createIfMissing);

    public static IExtension GetExtensionObject(
      ref IExtension extensionObject,
      bool createIfMissing)
    {
      if (createIfMissing && extensionObject == null)
        extensionObject = (IExtension) new BufferExtension();
      return extensionObject;
    }

    public static void AppendValue<TValue>(IExtensible instance, int tag, TValue value) => Extensible.AppendValue<TValue>(instance, tag, DataFormat.Default, value);

    public static void AppendValue<TValue>(
      IExtensible instance,
      int tag,
      DataFormat format,
      TValue value)
    {
      ExtensibleUtil.AppendExtendValue((TypeModel) RuntimeTypeModel.Default, instance, tag, format, (object) value);
    }

    public static TValue GetValue<TValue>(IExtensible instance, int tag) => Extensible.GetValue<TValue>(instance, tag, DataFormat.Default);

    public static TValue GetValue<TValue>(IExtensible instance, int tag, DataFormat format)
    {
      TValue obj;
      Extensible.TryGetValue<TValue>(instance, tag, format, out obj);
      return obj;
    }

    public static bool TryGetValue<TValue>(IExtensible instance, int tag, out TValue value) => Extensible.TryGetValue<TValue>(instance, tag, DataFormat.Default, out value);

    public static bool TryGetValue<TValue>(
      IExtensible instance,
      int tag,
      DataFormat format,
      out TValue value)
    {
      return Extensible.TryGetValue<TValue>(instance, tag, format, false, out value);
    }

    public static bool TryGetValue<TValue>(
      IExtensible instance,
      int tag,
      DataFormat format,
      bool allowDefinedTag,
      out TValue value)
    {
      value = default (TValue);
      bool flag = false;
      foreach (TValue extendedValue in ExtensibleUtil.GetExtendedValues<TValue>(instance, tag, format, true, allowDefinedTag))
      {
        value = extendedValue;
        flag = true;
      }
      return flag;
    }

    public static IEnumerable<TValue> GetValues<TValue>(IExtensible instance, int tag) => ExtensibleUtil.GetExtendedValues<TValue>(instance, tag, DataFormat.Default, false, false);

    public static IEnumerable<TValue> GetValues<TValue>(
      IExtensible instance,
      int tag,
      DataFormat format)
    {
      return ExtensibleUtil.GetExtendedValues<TValue>(instance, tag, format, false, false);
    }

    public static bool TryGetValue(
      TypeModel model,
      Type type,
      IExtensible instance,
      int tag,
      DataFormat format,
      bool allowDefinedTag,
      out object value)
    {
      value = (object) null;
      bool flag = false;
      foreach (object extendedValue in ExtensibleUtil.GetExtendedValues(model, type, instance, tag, format, true, allowDefinedTag))
      {
        value = extendedValue;
        flag = true;
      }
      return flag;
    }

    public static IEnumerable GetValues(
      TypeModel model,
      Type type,
      IExtensible instance,
      int tag,
      DataFormat format)
    {
      return ExtensibleUtil.GetExtendedValues(model, type, instance, tag, format, false, false);
    }

    public static void AppendValue(
      TypeModel model,
      IExtensible instance,
      int tag,
      DataFormat format,
      object value)
    {
      ExtensibleUtil.AppendExtendValue(model, instance, tag, format, value);
    }
  }
}
