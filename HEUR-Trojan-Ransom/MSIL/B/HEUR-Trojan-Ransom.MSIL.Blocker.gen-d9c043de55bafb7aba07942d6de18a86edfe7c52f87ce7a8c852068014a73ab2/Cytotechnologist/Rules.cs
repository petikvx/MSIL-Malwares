// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: CORINFOEHCLAU, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CA1C166-25B8-418F-B14D-0C0D6D66CCB2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d9c043de55bafb7aba07942d6de18a86edfe7c52f87ce7a8c852068014a73ab2.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1550957132;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1466563589)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 369100711 ^ 425016444;
            continue;
          case 2:
            num1 = (int) num2 * -1508103482 ^ -146841510;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      return new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = -1885559767;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2123392841)) % 9U)
        {
          case 1:
            ++aIndex;
            num1 = (int) num2 * -892137140 ^ 992652446;
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * -1356212806 ^ -739694387;
            continue;
          case 3:
            num1 = (int) num2 * -1759554376 ^ -1883170500;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = -1039331745;
            continue;
          case 5:
            goto label_1;
          case 6:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? -1240071298 : (num3 = -1075837738);
            continue;
          case 7:
            aIndex = 0;
            num1 = (int) num2 * -1803563246 ^ -1871034003;
            continue;
          case 8:
            num1 = (int) num2 * -551852329 ^ 47582772;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -559665588;
      int aIndex1;
      bool flag1;
      bool flag2;
      List<Card> cardList;
      Card[] array;
      int aIndex2;
      int num2;
      int count;
      JSONNode jsonNode;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1305867735)) % 25U)
        {
          case 0:
            int num4;
            num1 = num4 = num2 >= jsonNode[aIndex1].AsInt ? -961301926 : (num4 = -294480774);
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * -837118928 ^ 57102700;
            continue;
          case 2:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -1280228453;
            continue;
          case 3:
            num1 = -1979680973;
            continue;
          case 4:
            ++num2;
            num1 = (int) num3 * -869863064 ^ 100275196;
            continue;
          case 5:
            array = cardList.ToArray();
            num1 = (int) num3 * 2002659728 ^ -1828787783;
            continue;
          case 7:
            count = json.Count;
            num1 = (int) num3 * -1983061266 ^ -1358915272;
            continue;
          case 8:
            ++aIndex1;
            num1 = (int) num3 * 1837289738 ^ 1534348833;
            continue;
          case 9:
            jsonNode = json[aIndex2];
            num1 = (int) num3 * 714044497 ^ -1598171419;
            continue;
          case 10:
            aIndex1 = 0;
            num1 = (int) num3 * -72592611 ^ 599103630;
            continue;
          case 11:
            cardList = new List<Card>();
            num1 = (int) num3 * 1621368728 ^ 2106686390;
            continue;
          case 12:
            num1 = (int) num3 * 622560131 ^ 2037296435;
            continue;
          case 13:
            flag1 = aIndex2 < count;
            num1 = -391711330;
            continue;
          case 14:
            num1 = (int) num3 * 1557785311 ^ 467879932;
            continue;
          case 15:
            aIndex2 = 0;
            num1 = (int) num3 * 858127424 ^ -713179843;
            continue;
          case 16:
            num1 = (int) num3 * 822750659 ^ 1160473182;
            continue;
          case 17:
            num1 = -1831247644;
            continue;
          case 18:
            int num5 = flag1 ? -1463816106 : (num5 = -2068497572);
            num1 = num5 ^ (int) num3 * -474749227;
            continue;
          case 19:
            num1 = (int) num3 * -389257514 ^ -2047094151;
            continue;
          case 20:
            int num6;
            num1 = num6 = aIndex1 < maxImpact * 2 ? -2100058859 : (num6 = -1345214186);
            continue;
          case 21:
            flag2 = aIndex1 < maxImpact;
            num1 = -1428315013;
            continue;
          case 22:
            goto label_1;
          case 23:
            num1 = (int) num3 * -1970496108 ^ -1589861487;
            continue;
          case 24:
            ++aIndex2;
            num1 = (int) num3 * 160242192 ^ -1312691807;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u200C⁬⁯‫‮​‬‭‌⁭‮‌‎⁭‎⁯‭‫‌‏⁮‭‎⁯⁮​⁪‮‪‏⁭⁫‪‫⁯⁬⁪‬‏⁮‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = -1162017443;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -629469267)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -2129575801 ^ -1042370277;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -1308488625;
      Card[] cards;
      int index;
      string str1;
      Card card1;
      int num2;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1978617343)) % 20U)
        {
          case 0:
            str2 = Rules.\u202D‏⁯‬⁬⁮‭⁭⁫⁭‪⁪‪⁫‪‭‫‎⁪​⁪⁫​‬⁯‮‭‍‬‎‏‪⁯⁮‮‪⁫‫‪‎‮(str1, "\n]");
            num1 = (int) num3 * 969958115 ^ -1083970323;
            continue;
          case 1:
            num2 = 0;
            num1 = (int) num3 * -814530808 ^ -842495595;
            continue;
          case 2:
            str1 = "[\n\t";
            num1 = (int) num3 * 1053358728 ^ 1431024424;
            continue;
          case 3:
            ++index;
            num1 = (int) num3 * 823899057 ^ 809935700;
            continue;
          case 4:
            num1 = (int) num3 * 1757323304 ^ -617672142;
            continue;
          case 5:
            num1 = (int) num3 * 409932528 ^ 252730191;
            continue;
          case 6:
            flag = num2 != card1.Type;
            num1 = (int) num3 * -1933070318 ^ -1684686107;
            continue;
          case 7:
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1745191837 ^ -1468577071;
            continue;
          case 8:
            int num4 = flag ? 1444788704 : (num4 = 1051069966);
            num1 = num4 ^ (int) num3 * 1254032272;
            continue;
          case 9:
            num1 = (int) num3 * 1279882721 ^ 1477697543;
            continue;
          case 10:
            int num5;
            num1 = num5 = index < cards.Length ? -1131487586 : (num5 = -88644831);
            continue;
          case 11:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200B⁫‭⁬⁪‫‬‪‮⁬‌‫⁬‪‌‬⁬‌⁭⁮‭‫‬⁭‏‌⁯⁪⁭‮‪‏‌⁬⁪‭‍‬‏⁪‮((object) card2) : (string) null;
            str1 = Rules.\u202D‌‮‍⁪⁯​‫‎‎⁬⁬⁫‮⁮‫⁪‬⁭‏‍‪‬⁪⁬‭‎‮‮‪⁯‭⁬‍⁫⁫‌⁬​⁪‮(str3, str4, " ");
            num1 = -183755652;
            continue;
          case 12:
            goto label_1;
          case 13:
            num1 = (int) num3 * 227865057 ^ -1000170418;
            continue;
          case 14:
            num1 = (int) num3 * 587040285 ^ 1210786684;
            continue;
          case 15:
            num2 = card1.Type;
            num1 = (int) num3 * 1683495072 ^ 898599931;
            continue;
          case 16:
            num1 = (int) num3 * -1419339456 ^ -844639629;
            continue;
          case 17:
            str1 = Rules.\u202D‏⁯‬⁬⁮‭⁭⁫⁭‪⁪‪⁫‪‭‫‎⁪​⁪⁫​‬⁯‮‭‍‬‎‏‪⁯⁮‮‪⁫‫‪‎‮(str1, "\n\t");
            num1 = (int) num3 * -1584629653 ^ -656608331;
            continue;
          case 19:
            card1 = cards[index];
            num1 = -2124516708;
            continue;
          default:
            goto label_21;
        }
      }
label_21:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -844025119;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -48215425)) % 11U)
        {
          case 0:
            int num3 = !flag ? 1601933641 : (num3 = 145684274);
            num1 = num3 ^ (int) num2 * 286518786;
            continue;
          case 1:
            str1 = Rules.\u202D‌‮‍⁪⁯​‫‎‎⁬⁬⁫‮⁮‫⁪‬⁭‏‍‪‬⁪⁬‭‎‮‮‪⁯‭⁬‍⁫⁫‌⁬​⁪‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202E‫‭‏⁯‍⁯‏‏‌‎‏​‮​⁪‍‪‍⁫‪‮‌‎‬‫⁭⁫⁫‪⁮⁪⁮‎⁫⁭‎​‮⁭‮()));
            num1 = -839702494;
            continue;
          case 2:
            str2 = Rules.\u202D‏⁯‬⁬⁮‭⁭⁫⁭‪⁪‪⁫‪‭‫‎⁪​⁪⁫​‬⁯‮‭‍‬‎‏‪⁯⁮‮‪⁫‫‪‎‮(str1, " ]");
            num1 = (int) num2 * -728493634 ^ 119282065;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag = index < this.RiskChances.Length;
            num1 = -692874413;
            continue;
          case 6:
            str1 = Rules.\u202D‏⁯‬⁬⁮‭⁭⁫⁭‪⁪‪⁫‪‭‫‎⁪​⁪⁫​‬⁯‮‭‍‬‎‏‪⁯⁮‮‪⁫‫‪‎‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202E‫‭‏⁯‍⁯‏‏‌‎‏​‮​⁪‍‪‍⁫‪‮‌‎‬‫⁭⁫⁫‪⁮⁪⁮‎⁫⁭‎​‮⁭‮()));
            num1 = (int) num2 * -253438990 ^ -1584849364;
            continue;
          case 7:
            ++index;
            num1 = (int) num2 * -970560098 ^ 387994825;
            continue;
          case 8:
            num1 = (int) num2 * -36788293 ^ -219904350;
            continue;
          case 9:
            index = 1;
            num1 = (int) num2 * -713807482 ^ -925495353;
            continue;
          case 10:
            num1 = (int) num2 * -1547513065 ^ 1951239009;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    static string \u200C⁬⁯‫‮​‬‭‌⁭‮‌‎⁭‎⁯‭‫‌‏⁮‭‎⁯⁮​⁪‮‪‏⁭⁫‪‫⁯⁬⁪‬‏⁮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202D‏⁯‬⁬⁮‭⁭⁫⁭‪⁪‪⁫‪‭‫‎⁪​⁪⁫​‬⁯‮‭‍‬‎‏‪⁯⁮‮‪⁫‫‪‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200B⁫‭⁬⁪‫‬‪‮⁬‌‫⁬‪‌‬⁬‌⁭⁮‭‫‬⁭‏‌⁯⁪⁭‮‪‏‌⁬⁪‭‍‬‏⁪‮([In] object obj0) => obj0.ToString();

    static string \u202D‌‮‍⁪⁯​‫‎‎⁬⁬⁫‮⁮‫⁪‬⁭‏‍‪‬⁪⁬‭‎‮‮‪⁯‭⁬‍⁫⁫‌⁬​⁪‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202E‫‭‏⁯‍⁯‏‏‌‎‏​‮​⁪‍‪‍⁫‪‮‌‎‬‫⁭⁫⁫‪⁮⁪⁮‎⁫⁭‎​‮⁭‮() => CultureInfo.InvariantCulture;
  }
}
