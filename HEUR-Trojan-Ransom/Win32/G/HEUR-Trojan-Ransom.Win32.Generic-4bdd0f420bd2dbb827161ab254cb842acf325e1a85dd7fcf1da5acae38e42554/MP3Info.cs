// Decompiled with JetBrains decompiler
// Type: ตลก.MP3Info
// Assembly: ตลก, Version=8.5.7.4, Culture=neutral, PublicKeyToken=null
// MVID: 59D1803A-8DC9-4DAB-9DAF-43740E5262BC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4bdd0f420bd2dbb827161ab254cb842acf325e1a85dd7fcf1da5acae38e42554.exe

using Microsoft.VisualBasic.CompilerServices;
using System.IO;
using System.Text;

namespace ตลก
{
  public class MP3Info
  {
    private string mFileName;

    public void SetID3v1Tag(ID3V1 Tag, string FileName = "")
    {
      if (Operators.CompareString(FileName, "", false) == 0)
        FileName = this.mFileName;
      FileStream fileStream = new FileStream(FileName, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite);
      BinaryReader binaryReader = new BinaryReader((Stream) fileStream);
      fileStream.Seek((long) sbyte.MinValue, SeekOrigin.End);
      if (Operators.CompareString(this.ByteToString(binaryReader.ReadBytes(3)).ToUpper(), "TAG", false) == 0)
        fileStream.Seek(-3L, SeekOrigin.Current);
      else
        fileStream.Seek(0L, SeekOrigin.End);
      BinaryWriter binaryWriter = new BinaryWriter((Stream) fileStream);
      binaryWriter.Write("TAG".ToCharArray());
      binaryWriter.Write(Tag.Title.PadRight(30, char.MinValue).ToCharArray());
      binaryWriter.Write(Tag.Artist.PadRight(30, char.MinValue).ToCharArray());
      binaryWriter.Write(Tag.Album.PadRight(30, char.MinValue).ToCharArray());
      binaryWriter.Write(Tag.Year.PadRight(4, char.MinValue).ToCharArray());
      switch (Tag.TagVersion)
      {
        case ID3V1.ID3Version.ID3V10:
          binaryWriter.Write(Tag.Comment.PadRight(30, char.MinValue).ToCharArray());
          break;
        case ID3V1.ID3Version.ID3V11:
          binaryWriter.Write(Tag.Comment.PadRight(28, char.MinValue).ToCharArray());
          binaryWriter.Write(char.MinValue);
          binaryWriter.Write(Tag.Track);
          break;
      }
      binaryWriter.Write(Tag.Genre);
      binaryWriter.Flush();
      binaryWriter.Close();
      binaryReader.Close();
    }

    private string ByteToString(byte[] Expression, int Index = 0, int Length = 0)
    {
      if (Length == 0)
        Length = Expression.Length;
      return Encoding.Default.GetString(Expression, Index, Length);
    }
  }
}
