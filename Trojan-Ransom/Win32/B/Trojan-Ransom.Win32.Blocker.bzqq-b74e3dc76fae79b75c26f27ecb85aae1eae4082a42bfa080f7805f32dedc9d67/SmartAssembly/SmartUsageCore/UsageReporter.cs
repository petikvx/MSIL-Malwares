// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageReporter
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using SmartAssembly.SmartExceptionsCore.UI;
using System;
using System.Threading;
using Ⴈ;

namespace SmartAssembly.SmartUsageCore
{
  public abstract class UsageReporter
  {
    private static bool Ⴀ;
    private static readonly object Ⴃ;
    private WaitSendingReportControl.ႥႨ Ⴍ;

    public event SendingReportFeedbackEventHandler1 SendingReportFeedback
    {
      add
      {
        int num1;
        SendingReportFeedbackEventHandler1 feedbackEventHandler1_1;
        SendingReportFeedbackEventHandler1 comparand;
        SendingReportFeedbackEventHandler1 feedbackEventHandler1_2;
        try
        {
          try
          {
            num1 = 3;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  feedbackEventHandler1_2 = (SendingReportFeedbackEventHandler1) WaitSendingReportControl.Ⴐ((Delegate) comparand, (Delegate) value, 564, 564);
                  num1 = 6;
                  continue;
                case 1:
                  num1 = feedbackEventHandler1_1 != comparand ? 5 : 2;
                  continue;
                case 2:
                  goto label_9;
                case 4:
                case 6:
                  feedbackEventHandler1_1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler1>(ref this.Ⴍ.Ⴗ, feedbackEventHandler1_2, comparand);
                  goto case 1;
                case 5:
                  comparand = feedbackEventHandler1_1;
                  goto case 0;
                default:
                  feedbackEventHandler1_1 = this.Ⴍ.Ⴗ;
                  num1 = 5;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            SendingReportFeedbackEventHandler1 o1 = feedbackEventHandler1_1;
            SendingReportFeedbackEventHandler1 o2 = comparand;
            SendingReportFeedbackEventHandler1 o3 = feedbackEventHandler1_2;
            SendingReportFeedbackEventHandler1 o5 = value;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
            throw;
          }
label_9:
          switch (1)
          {
          }
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler1 o1 = feedbackEventHandler1_1;
          SendingReportFeedbackEventHandler1 o2 = comparand;
          SendingReportFeedbackEventHandler1 o3 = feedbackEventHandler1_2;
          __Boxed<int> o4 = (ValueType) num1;
          int num2;
          __Boxed<int> o5 = (ValueType) num2;
          SendingReportFeedbackEventHandler1 o7 = value;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
          throw;
        }
      }
      remove
      {
        int num1;
        SendingReportFeedbackEventHandler1 feedbackEventHandler1_1;
        SendingReportFeedbackEventHandler1 comparand;
        SendingReportFeedbackEventHandler1 feedbackEventHandler1_2;
        try
        {
          try
          {
            num1 = 2;
            while (true)
            {
              switch (num1)
              {
                case 0:
                  goto label_8;
                case 3:
                case 7:
                  num1 = feedbackEventHandler1_1 != comparand ? 5 : 0;
                  continue;
                case 4:
                  feedbackEventHandler1_1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler1>(ref this.Ⴍ.Ⴗ, feedbackEventHandler1_2, comparand);
                  goto case 3;
                case 5:
                  comparand = feedbackEventHandler1_1;
                  feedbackEventHandler1_2 = (SendingReportFeedbackEventHandler1) AutoHeightLabel.Ⴍ((Delegate) comparand, (Delegate) value, 318, 364);
                  num1 = 4;
                  continue;
                default:
                  feedbackEventHandler1_1 = this.Ⴍ.Ⴗ;
                  num1 = 5;
                  continue;
              }
            }
          }
          catch (Exception ex)
          {
            SendingReportFeedbackEventHandler1 o1 = feedbackEventHandler1_1;
            SendingReportFeedbackEventHandler1 o2 = comparand;
            SendingReportFeedbackEventHandler1 o3 = feedbackEventHandler1_2;
            SendingReportFeedbackEventHandler1 o5 = value;
            StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
            throw;
          }
label_8:
          switch (2)
          {
          }
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler1 o1 = feedbackEventHandler1_1;
          SendingReportFeedbackEventHandler1 o2 = comparand;
          SendingReportFeedbackEventHandler1 o3 = feedbackEventHandler1_2;
          __Boxed<int> o4 = (ValueType) num1;
          int num2;
          __Boxed<int> o5 = (ValueType) num2;
          SendingReportFeedbackEventHandler1 o7 = value;
          StackFrameHelper.CreateException7(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) o5, (object) this, (object) o7);
          throw;
        }
      }
    }

    protected void RecordFeatureUsed(uint featureId)
    {
      object ⴃ;
      try
      {
        try
        {
          try
          {
            ႷႨ.ႰႥ(ⴃ = UsageReporter.Ⴃ, 696, 728);
            try
            {
              this.Ⴃ();
              UsageCountStore.IncrementUsage(featureId);
            }
            finally
            {
              ReportSender.Ⴍ(ⴃ, 142, 219);
            }
          }
          catch
          {
          }
        }
        catch (Exception ex)
        {
          object o1 = ⴃ;
          // ISSUE: variable of a boxed type
          __Boxed<uint> o3 = (ValueType) featureId;
          StackFrameHelper.CreateException3(ex, o1, (object) this, (object) o3);
          throw;
        }
      }
      catch (Exception ex)
      {
        object o1 = ⴃ;
        // ISSUE: variable of a boxed type
        __Boxed<uint> o3 = (ValueType) featureId;
        StackFrameHelper.CreateException3(ex, o1, (object) this, (object) o3);
        throw;
      }
    }

    protected void RecordFeatureUsed(string featureName)
    {
      object ⴃ;
      try
      {
        try
        {
          try
          {
            ႷႨ.ႰႥ(ⴃ = UsageReporter.Ⴃ, 292, 324);
            try
            {
              this.Ⴃ();
              UsageCountStore.IncrementUsage(featureName);
            }
            finally
            {
              ReportSender.Ⴍ(ⴃ, 547, 630);
            }
          }
          catch
          {
          }
        }
        catch (Exception ex)
        {
          object o1 = ⴃ;
          string o3 = featureName;
          StackFrameHelper.CreateException3(ex, o1, (object) this, (object) o3);
          throw;
        }
      }
      catch (Exception ex)
      {
        object o1 = ⴃ;
        string o3 = featureName;
        StackFrameHelper.CreateException3(ex, o1, (object) this, (object) o3);
        throw;
      }
    }

    private void Ⴃ()
    {
      int num1;
      UsageReporter.ႣႼ ⴃⴜ;
      Thread thread;
      try
      {
        try
        {
          num1 = 3;
          while (true)
          {
            switch (num1)
            {
              case 0:
              case 2:
                UsageReportSender.Ⴜ(thread, 540, 530);
                goto case 1;
              case 1:
                Ⴓ.Ⴐ(469, 458).ProcessExit += new EventHandler(this.Ⴃ);
                num1 = 7;
                continue;
              case 4:
                num1 = 9;
                continue;
              case 5:
                ⴃⴜ = new UsageReporter.ႣႼ();
                ⴃⴜ.Ⴐ = this;
                ⴃⴜ.Ⴐ = UsageCountStore.GetAllUsageCountsAndReset();
                thread = new Thread(new ThreadStart(ⴃⴜ.Ⴓ));
                goto case 4;
              case 6:
                goto label_11;
              case 7:
                UsageReporter.Ⴀ = true;
                num1 = 6;
                continue;
              case 9:
                ႷႣ.Ⴅ(thread, true, 440, 423);
                DoNotPruneAttribute.Ⴈ(thread, ApartmentState.STA, 773, 878);
                num1 = 0;
                continue;
              default:
                num1 = UsageReporter.Ⴀ ? 6 : 5;
                continue;
            }
          }
        }
        catch (Exception ex)
        {
          Thread o1 = thread;
          UsageReporter.ႣႼ o2 = ⴃⴜ;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
          throw;
        }
label_11:
        switch (2)
        {
        }
      }
      catch (Exception ex)
      {
        Thread o1 = thread;
        UsageReporter.ႣႼ o2 = ⴃⴜ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num1;
        int num2;
        // ISSUE: variable of a boxed type
        __Boxed<int> o4 = (ValueType) num2;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) o4, (object) this);
        throw;
      }
    }

    private void Ⴃ(object Ⴈ, EventArgs Ⴃ)
    {
      int num;
      UsageCounts allUsageCounts;
      UsageReportSender sender;
      try
      {
        try
        {
          num = 4;
          while (true)
          {
            switch (num)
            {
              case 0:
              case 5:
                sender = new UsageReportSender(allUsageCounts);
                sender.SendingReportFeedback += new SendingReportFeedbackEventHandler1(this.Ⴈ);
                num = !this.CanReportUsage() ? 3 : 6;
                continue;
              case 1:
              case 2:
                num = allUsageCounts.IsEmpty ? 3 : 0;
                continue;
              case 3:
                goto label_7;
              case 6:
                goto label_5;
              default:
                allUsageCounts = UsageCountStore.GetAllUsageCounts();
                goto case 1;
            }
          }
label_7:
          return;
label_5:
          this.ReportUsage(sender);
          UsageCountStore.Reset();
        }
        catch (Exception ex)
        {
          UsageCounts o1 = allUsageCounts;
          UsageReportSender o2 = sender;
          object o4 = Ⴈ;
          EventArgs o5 = Ⴃ;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, o4, (object) o5);
          throw;
        }
      }
      catch (Exception ex)
      {
        UsageCounts o1 = allUsageCounts;
        UsageReportSender o2 = sender;
        // ISSUE: variable of a boxed type
        __Boxed<int> o3 = (ValueType) num;
        object o5 = Ⴈ;
        EventArgs o6 = Ⴃ;
        StackFrameHelper.CreateException6(ex, (object) o1, (object) o2, (object) o3, (object) this, o5, (object) o6);
        throw;
      }
    }

    protected abstract void ReportUsage(UsageReportSender sender);

    protected abstract bool CanReportUsage();

    private void Ⴐ(UsageCounts Ⴅ)
    {
      int num;
      UsageReportSender sender;
      try
      {
        try
        {
          num = 0;
          while (true)
          {
            switch (num)
            {
              case 1:
                goto label_4;
              case 3:
              case 4:
                goto label_3;
              case 5:
                goto label_6;
              default:
                sender = new UsageReportSender(Ⴅ);
                sender.SendingReportFeedback += new SendingReportFeedbackEventHandler1(this.Ⴈ);
                num = !this.CanReportUsage() ? 1 : 4;
                continue;
            }
          }
label_6:
          return;
label_3:
          ႷႣ.Ⴅ(DoNotObfuscateTypeAttribute.Ⴈ(545, 618), false, 851, 844);
          this.ReportUsage(sender);
label_4:
          ႳႳ.Ⴅ();
        }
        catch (Exception ex)
        {
          UsageReportSender o1 = sender;
          UsageCounts o3 = Ⴅ;
          StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
          throw;
        }
      }
      catch (Exception ex)
      {
        UsageReportSender o1 = sender;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        UsageCounts o4 = Ⴅ;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) o2, (object) this, (object) o4);
        throw;
      }
    }

    private void Ⴈ(object Ⴗ, SendingReportFeedbackEventArgs1 Ⴍ)
    {
      int num;
      SendingReportFeedbackEventHandler1 ⴗ;
      try
      {
        try
        {
          num = 1;
          while (true)
          {
            switch (num)
            {
              case 0:
                goto label_7;
              case 2:
                goto label_4;
              case 3:
              case 5:
                num = ⴗ == null ? 0 : 2;
                continue;
              case 4:
                goto label_5;
              default:
                ⴗ = this.Ⴍ.Ⴗ;
                goto case 3;
            }
          }
label_7:
          return;
label_5:
          return;
label_4:
          ⴗ(Ⴗ, Ⴍ);
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler1 o1 = ⴗ;
          object o3 = Ⴗ;
          SendingReportFeedbackEventArgs1 o4 = Ⴍ;
          StackFrameHelper.CreateException4(ex, (object) o1, (object) this, o3, (object) o4);
          throw;
        }
      }
      catch (Exception ex)
      {
        SendingReportFeedbackEventHandler1 o1 = ⴗ;
        // ISSUE: variable of a boxed type
        __Boxed<int> o2 = (ValueType) num;
        object o4 = Ⴗ;
        SendingReportFeedbackEventArgs1 o5 = Ⴍ;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, o4, (object) o5);
        throw;
      }
    }

    protected UsageReporter()
    {
      try
      {
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException1(ex, (object) this);
        throw;
      }
    }

    static UsageReporter()
    {
      try
      {
        try
        {
          UsageReporter.Ⴃ = new object();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }

    private sealed class ႣႼ
    {
      public UsageCounts Ⴐ;
      public UsageReporter Ⴐ;

      public ႣႼ()
      {
        try
        {
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      public void Ⴓ()
      {
        try
        {
          try
          {
            this.Ⴐ.Ⴐ(this.Ⴐ);
          }
          catch (Exception ex)
          {
            StackFrameHelper.CreateException1(ex, (object) this);
            throw;
          }
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException1(ex, (object) this);
          throw;
        }
      }

      static ႣႼ()
      {
        try
        {
          DoNotPruneAttribute.ႰႣ();
        }
        catch (Exception ex)
        {
          StackFrameHelper.CreateException0(ex);
          throw;
        }
      }
    }
  }
}
