// Decompiled with JetBrains decompiler
// Type: SmartAssembly.SmartUsageCore.UsageReporter1
// Assembly: o4tdggb3, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA0844EB-EF82-404C-B76C-C092ABDB9392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.bzqq-b74e3dc76fae79b75c26f27ecb85aae1eae4082a42bfa080f7805f32dedc9d67.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.Threading;

namespace SmartAssembly.SmartUsageCore
{
  public abstract class UsageReporter1
  {
    private static bool s_SessionStarted;
    private SendingReportFeedbackEventHandler3 SendingReportFeedback;
    private static readonly object s_RecordFeatureUsedLock;

    public event SendingReportFeedbackEventHandler3 SendingReportFeedback
    {
      add
      {
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_1;
        SendingReportFeedbackEventHandler3 comparand;
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_2;
        try
        {
          feedbackEventHandler3_1 = this.SendingReportFeedback;
          do
          {
            comparand = feedbackEventHandler3_1;
            feedbackEventHandler3_2 = comparand + value;
            feedbackEventHandler3_1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler3>(ref this.SendingReportFeedback, feedbackEventHandler3_2, comparand);
          }
          while (feedbackEventHandler3_1 != comparand);
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler3 o1 = feedbackEventHandler3_1;
          SendingReportFeedbackEventHandler3 o2 = comparand;
          SendingReportFeedbackEventHandler3 o3 = feedbackEventHandler3_2;
          SendingReportFeedbackEventHandler3 o5 = value;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }
      remove
      {
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_1;
        SendingReportFeedbackEventHandler3 comparand;
        SendingReportFeedbackEventHandler3 feedbackEventHandler3_2;
        try
        {
          feedbackEventHandler3_1 = this.SendingReportFeedback;
          do
          {
            comparand = feedbackEventHandler3_1;
            feedbackEventHandler3_2 = comparand - value;
            feedbackEventHandler3_1 = Interlocked.CompareExchange<SendingReportFeedbackEventHandler3>(ref this.SendingReportFeedback, feedbackEventHandler3_2, comparand);
          }
          while (feedbackEventHandler3_1 != comparand);
        }
        catch (Exception ex)
        {
          SendingReportFeedbackEventHandler3 o1 = feedbackEventHandler3_1;
          SendingReportFeedbackEventHandler3 o2 = comparand;
          SendingReportFeedbackEventHandler3 o3 = feedbackEventHandler3_2;
          SendingReportFeedbackEventHandler3 o5 = value;
          StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) o3, (object) this, (object) o5);
          throw;
        }
      }
    }

    protected void RecordFeatureUsed(uint featureId)
    {
      object recordFeatureUsedLock;
      try
      {
        try
        {
          Monitor.Enter(recordFeatureUsedLock = UsageReporter1.s_RecordFeatureUsedLock);
          try
          {
            this.ReportUsageIfNewSession();
            UsageCountStore1.IncrementUsage(featureId);
          }
          finally
          {
            Monitor.Exit(recordFeatureUsedLock);
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object o1 = recordFeatureUsedLock;
        // ISSUE: variable of a boxed type
        __Boxed<uint> o3 = (ValueType) featureId;
        StackFrameHelper.CreateException3(ex, o1, (object) this, (object) o3);
        throw;
      }
    }

    protected void RecordFeatureUsed(string featureName)
    {
      object recordFeatureUsedLock;
      try
      {
        try
        {
          Monitor.Enter(recordFeatureUsedLock = UsageReporter1.s_RecordFeatureUsedLock);
          try
          {
            this.ReportUsageIfNewSession();
            UsageCountStore1.IncrementUsage(featureName);
          }
          finally
          {
            Monitor.Exit(recordFeatureUsedLock);
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        object o1 = recordFeatureUsedLock;
        string o3 = featureName;
        StackFrameHelper.CreateException3(ex, o1, (object) this, (object) o3);
        throw;
      }
    }

    private void ReportUsageIfNewSession()
    {
      // ISSUE: variable of a compiler-generated type
      UsageReporter1.\u003C\u003Ec__DisplayClass1 o2;
      Thread thread;
      try
      {
        if (UsageReporter1.s_SessionStarted)
          return;
        // ISSUE: object of a compiler-generated type is created
        o2 = new UsageReporter1.\u003C\u003Ec__DisplayClass1();
        // ISSUE: reference to a compiler-generated field
        o2.\u003C\u003E4__this = this;
        // ISSUE: reference to a compiler-generated field
        o2.prevUsageCounts = UsageCountStore1.GetAllUsageCountsAndReset();
        // ISSUE: reference to a compiler-generated method
        thread = new Thread(new ThreadStart(o2.\u003CReportUsageIfNewSession\u003Eb__0));
        thread.IsBackground = true;
        thread.SetApartmentState(ApartmentState.STA);
        thread.Start();
        AppDomain.CurrentDomain.ProcessExit += new EventHandler(this.CurrentDomainOnProcessExit);
        UsageReporter1.s_SessionStarted = true;
      }
      catch (Exception ex)
      {
        Thread o1 = thread;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) o2, (object) this);
        throw;
      }
    }

    private void CurrentDomainOnProcessExit(object sender, EventArgs eventArgs)
    {
      UsageCounts1 allUsageCounts;
      UsageReportSender1 sender1;
      try
      {
        allUsageCounts = UsageCountStore1.GetAllUsageCounts();
        if (allUsageCounts.IsEmpty)
          return;
        sender1 = new UsageReportSender1(allUsageCounts);
        sender1.SendingReportFeedback += new SendingReportFeedbackEventHandler3(this.InvokeSendingReportFeedback);
        if (!this.CanReportUsage())
          return;
        this.ReportUsage(sender1);
        UsageCountStore1.Reset();
      }
      catch (Exception ex)
      {
        UsageCounts1 o1 = allUsageCounts;
        UsageReportSender1 o2 = sender1;
        object o4 = sender;
        EventArgs o5 = eventArgs;
        StackFrameHelper.CreateException5(ex, (object) o1, (object) o2, (object) this, o4, (object) o5);
        throw;
      }
    }

    protected abstract void ReportUsage(UsageReportSender1 sender);

    protected abstract bool CanReportUsage();

    private void OnSessionStart(UsageCounts1 usageCounts)
    {
      UsageReportSender1 sender;
      try
      {
        sender = new UsageReportSender1(usageCounts);
        sender.SendingReportFeedback += new SendingReportFeedbackEventHandler3(this.InvokeSendingReportFeedback);
        if (this.CanReportUsage())
        {
          Thread.CurrentThread.IsBackground = false;
          this.ReportUsage(sender);
        }
        PlatformUsageCounter.CountPlatformUsages();
      }
      catch (Exception ex)
      {
        UsageReportSender1 o1 = sender;
        UsageCounts1 o3 = usageCounts;
        StackFrameHelper.CreateException3(ex, (object) o1, (object) this, (object) o3);
        throw;
      }
    }

    private void InvokeSendingReportFeedback(
      object sender,
      SendingReportFeedbackEventArgs3 sendingReportFeedbackEventArgs)
    {
      SendingReportFeedbackEventHandler3 sendingReportFeedback;
      try
      {
        sendingReportFeedback = this.SendingReportFeedback;
        if (sendingReportFeedback == null)
          return;
        sendingReportFeedback(sender, sendingReportFeedbackEventArgs);
      }
      catch (Exception ex)
      {
        SendingReportFeedbackEventHandler3 o1 = sendingReportFeedback;
        object o3 = sender;
        SendingReportFeedbackEventArgs3 o4 = sendingReportFeedbackEventArgs;
        StackFrameHelper.CreateException4(ex, (object) o1, (object) this, o3, (object) o4);
        throw;
      }
    }

    static UsageReporter1()
    {
      try
      {
        UsageReporter1.s_RecordFeatureUsedLock = new object();
      }
      catch (Exception ex)
      {
        StackFrameHelper.CreateException0(ex);
        throw;
      }
    }
  }
}
