// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.Mazes
// Assembly: W2E901dpqsgg43z, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E3EDE543-33A5-3966-9367-08505E2DD4BA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-9a55287be3d6c8a74a0aa6ee3a5ea4e288ba968e44c271c9ea5d2293c8300d07.exe

using System;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class Mazes
  {
    public static bool[] Empty()
    {
label_5:
      int num1 = 0;
      int num2 = 7;
      bool[] flagArray1;
      while (true)
      {
        switch (num2 ^ 42)
        {
          case 42:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2);
            num2 = 0;
            continue;
          case 43:
            goto label_5;
          case 44:
            bool[] flagArray2;
            switch (num1)
            {
              case 46:
                flagArray2 = new bool[checked (Console.WindowWidth * Console.WindowHeight + 1)];
                num1 = 31;
                goto label_1;
              case 47:
              case 50:
                goto label_11;
              case 48:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2);
                num1 = 30;
                goto label_1;
              case 49:
                flagArray1 = flagArray2;
                num1 = 1;
                goto label_1;
              default:
                num2 = 1;
                continue;
            }
          case 45:
label_1:
            num1 ^= 46;
            break;
        }
        num2 = 6;
      }
label_11:
      return flagArray1;
    }

    public static bool[] Corners()
    {
label_4:
      int num1 = 3;
      int num2 = 3;
      bool[] flagArray1;
      while (true)
      {
        switch (num2 ^ 47)
        {
          case 41:
            goto label_4;
          case 42:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Boxes2);
            num2 = 5;
            continue;
          case 43:
            int windowHeight;
            int num3;
            int windowWidth;
            int num4;
            bool[] flagArray2;
            int num5;
            int num6;
            switch (num1)
            {
              case 44:
                num3 = checked ((int) Math.Round(unchecked ((double) windowHeight / 12.0)));
                num1 = 0;
                goto label_1;
              case 45:
                windowWidth = Console.WindowWidth;
                num1 = 30;
                goto label_1;
              case 46:
                num4 = checked ((int) Math.Round(unchecked ((double) windowWidth / 8.0)));
                num1 = 27;
                goto label_1;
              case 47:
              case 62:
                goto label_25;
              case 48:
                windowHeight = Console.WindowHeight;
                num1 = 23;
                goto label_1;
              case 49:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D3(flagArray2, true, checked (windowWidth - num4 - num5), num3, num4, num6);
                num1 = 25;
                goto label_1;
              case 50:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D3(flagArray2, true, num5, num3, num4, num6);
                num1 = 20;
                goto label_1;
              case 51:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D3(flagArray2, true, num5, checked (windowHeight - num6 - num3 - 1), num4, num6);
                num1 = 22;
                goto label_1;
              case 52:
                flagArray1 = flagArray2;
                num1 = 1;
                goto label_1;
              case 53:
                num6 = checked ((int) Math.Round(unchecked ((double) windowHeight / 8.0)));
                num1 = 28;
                goto label_1;
              case 54:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.Corners);
                num1 = 24;
                goto label_1;
              case 55:
                num1 = 29;
                goto label_1;
              case 56:
                num1 = 19;
                goto label_1;
              case 57:
                flagArray2 = new bool[checked (windowWidth * windowHeight - 1 + 1)];
                num1 = 21;
                goto label_1;
              case 58:
                num1 = 31;
                goto label_1;
              case 59:
                num5 = checked ((int) Math.Round(unchecked ((double) windowWidth / 12.0)));
                num1 = 2;
                goto label_1;
              case 60:
                num1 = 26;
                goto label_1;
              case 61:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D3(flagArray2, true, checked (windowWidth - num4 - num5), checked (windowHeight - num6 - num3 - 1), num4, num6);
                num1 = 18;
                goto label_1;
              default:
                num2 = 6;
                continue;
            }
          case 44:
label_1:
            num1 ^= 46;
            break;
        }
        num2 = 4;
      }
label_25:
      return flagArray1;
    }

    public static bool[] Boxes1()
    {
label_2:
      int num1 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(54);
label_1:
      bool[] flagArray1;
      int windowWidth;
      int num2;
      int windowHeight;
      int num3;
      bool[] flagArray2;
      while (true)
      {
        num1 ^= 42;
        switch (num1 + 38)
        {
          case 0:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (windowWidth - num2), checked (windowHeight - num3), checked (windowWidth - num2), checked (windowHeight - num3 * 2));
            num1 = -53;
            continue;
          case 1:
            flagArray2 = flagArray1;
            num1 = -64;
            continue;
          case 2:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (num2 * 2), checked (windowHeight - num3), checked (num2 * 2), checked (windowHeight - num3 * 2));
            num1 = -11;
            continue;
          case 3:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (windowWidth - num2 * 2), num3, checked (windowWidth - num2 * 2), checked (num3 * 2));
            num1 = -62;
            continue;
          case 4:
            num3 = checked ((int) Math.Round(unchecked ((double) windowHeight / 5.0)));
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, num2, num3, checked (num2 * 2), num3);
            num1 = -49;
            continue;
          case 5:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (windowWidth - num2), checked (windowHeight - num3), checked (windowWidth - num2 * 2), checked (windowHeight - num3));
            num1 = -16;
            continue;
          case 6:
            flagArray1 = new bool[checked (windowWidth * windowHeight - 1 + 1)];
            num2 = checked ((int) Math.Round(unchecked ((double) windowWidth / 5.0)));
            num1 = -12;
            continue;
          case 7:
            goto label_11;
          case 8:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (windowWidth - num2), num3, checked (windowWidth - num2), checked (num3 * 2));
            num1 = -9;
            continue;
          case 9:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, num2, checked (windowHeight - num3), num2, checked (windowHeight - num3 * 2));
            num1 = -10;
            continue;
          case 10:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D3);
            num1 = -50;
            continue;
          case 11:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, num2, num3, num2, checked (num3 * 2));
            num1 = -51;
            continue;
          case 12:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (windowWidth - num2), num3, checked (windowWidth - num2 * 2), num3);
            num1 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(58);
            continue;
          case 13:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (num2 * 2), num3, checked (num2 * 2), checked (num3 * 2));
            num1 = -52;
            continue;
          case 14:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, num2, checked (windowHeight - num3), checked (num2 * 2), checked (windowHeight - num3));
            num1 = -55;
            continue;
          case 15:
            windowWidth = Console.WindowWidth;
            windowHeight = Console.WindowHeight;
            num1 = -54;
            continue;
          case 16:
            goto label_23;
          default:
            goto label_2;
        }
      }
label_11:
      int num4 = 7;
      while (true)
      {
        switch (num4 ^ 52)
        {
          case 51:
            Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (windowWidth - num2 * 2), checked (windowHeight - num3), checked (windowWidth - num2 * 2), checked (windowHeight - num3 * 2));
            num4 = 0;
            continue;
          case 52:
            num1 = -15;
            num4 = 2;
            continue;
          case 53:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Corners);
            num4 = 1;
            continue;
          case 54:
            goto label_1;
          default:
            goto label_11;
        }
      }
label_23:
      return flagArray2;
    }

    public static bool[] Boxes2()
    {
label_6:
      int num1 = 2;
      int num2 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(11);
      bool[] flagArray1;
      while (true)
      {
        switch ((num2 ^ 49) + 48)
        {
          case 0:
            int windowWidth;
            int num3;
            bool[] flagArray2;
            int num4;
            int windowHeight;
            switch (num1)
            {
              case 50:
                num1 = 3;
                goto label_1;
              case 51:
                num3 = checked ((int) Math.Round(unchecked ((double) windowWidth / 5.0)));
                num1 = 14;
                goto label_1;
              case 52:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D1);
                num1 = 0;
                goto label_1;
              case 53:
                flagArray1 = flagArray2;
                num1 = 15;
                goto label_1;
              case 54:
                windowWidth = Console.WindowWidth;
                num1 = 13;
                goto label_1;
              case 55:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray2, true, checked ((int) Math.Round(unchecked ((double) checked (windowWidth - num3) - (double) num3 / 2.0))), checked (num4 - 1), checked ((int) Math.Round(unchecked ((double) checked (windowWidth - num3) - (double) num3 / 2.0))), checked (windowHeight - num4 + 1));
                num1 = 9;
                goto label_1;
              case 56:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray2, true, checked ((int) Math.Round(unchecked ((double) num3 + (double) num3 / 2.0))), checked (num4 - 1), checked ((int) Math.Round(unchecked ((double) num3 + (double) num3 / 2.0))), checked (windowHeight - num4 + 1));
                num1 = 6;
                goto label_1;
              case 57:
                windowHeight = Console.WindowHeight;
                num1 = 8;
                goto label_1;
              case 58:
                num4 = checked ((int) Math.Round(unchecked ((double) windowHeight / 5.0)));
                num1 = 12;
                goto label_1;
              case 59:
              case 62:
                goto label_19;
              case 60:
                flagArray2 = Mazes.Boxes1();
                num1 = 7;
                goto label_1;
              case 61:
                num1 = 1;
                goto label_1;
              default:
                num2 = -32;
                continue;
            }
          case 1:
            goto label_6;
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.Stars);
            num2 = -29;
            continue;
          case 3:
label_1:
            num1 ^= 52;
            break;
        }
        num2 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(46);
      }
label_19:
      return flagArray1;
    }

    public static bool[] Stars()
    {
label_2:
      int num1 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(59);
      bool[] flagArray1;
      while (true)
      {
        int num2;
        int windowHeight;
        int num3;
        int windowWidth;
        int num4;
        switch ((num1 ^ 61) + 52)
        {
          case 0:
            num2 = 6;
            num1 = -14;
            continue;
          case 1:
            num3 = checked (windowHeight - 6);
            num1 = -15;
            continue;
          case 2:
            bool[] flagArray2 = new bool[9]
            {
              false,
              true,
              false,
              true,
              true,
              true,
              false,
              true,
              false
            };
            num1 = -16;
            continue;
          case 3:
            if (num2 == 0)
            {
              num1 = -20;
              continue;
            }
            goto label_28;
          case 4:
            windowWidth = Console.WindowWidth;
            num1 = -18;
            continue;
          case 5:
label_9:
            if ((double) num2 >= (double) windowHeight / 2.0 - 1.0)
            {
              num1 = -24;
              continue;
            }
            num4 = 0;
            break;
          case 6:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Boxes1);
            num1 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF2.\uEA6D\uEF21\uE194\uF646\uE037\uE8F7\uEA59\uE01F\uE593\uEFE2\uE294\uF565(43);
            continue;
          case 7:
            windowHeight = Console.WindowHeight;
            num1 = -23;
            continue;
          case 8:
            flagArray1 = new bool[checked (windowWidth * windowHeight - 1 + 1)];
            num1 = -13;
            continue;
          case 9:
            num4 = (double) num2 <= (double) windowHeight / 2.0 + 1.0 ? 1 : 0;
            break;
          default:
            goto label_2;
        }
        if ((num4 == 0 ? 1 : 0) != 0)
        {
          int num5 = checked (windowWidth - 6);
          int num6 = 6;
          if (num6 != 0)
            goto label_26;
label_18:
          Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, checked (num6 - 1), num2, checked (num6 + 1), num2);
label_20:
          int num7 = AsciiSnake.\uE408\uF03E\uE1B2\uF83C\uE1B5\uEB23\uF0B7\uEA31\uF287\uEA34\uE6A2\uF14E(51);
          while (true)
          {
            switch ((num7 ^ 62) + 48)
            {
              case 0:
                num7 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF2.\uEA6D\uEF21\uE194\uF646\uE037\uE8F7\uEA59\uE01F\uE593\uEFE2\uE294\uF565(43);
                continue;
              case 1:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(flagArray1, true, num6, checked (num2 - 1), num6, checked (num2 + 1));
                num7 = -19;
                continue;
              case 2:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.\u002Ector);
                num7 = -20;
                continue;
              case 3:
                num7 = -22;
                continue;
              case 4:
                goto label_25;
              default:
                goto label_20;
            }
          }
label_25:
          checked { num6 += 12; }
label_26:
          if (num6 <= num5)
            goto label_18;
        }
        checked { num2 += 12; }
label_28:
        if (num2 <= num3)
          goto label_9;
        else
          break;
      }
      return flagArray1;
    }

    private static void \uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D1(
      bool[] _param0,
      bool _param1,
      int _param2,
      int _param3)
    {
      _param0[checked (_param3 * Console.WindowWidth + _param2)] = _param1;
    }

    private static void \uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(
      bool[] _param0,
      bool _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5)
    {
label_5:
      int num1 = 1;
      int num2 = 14;
      while (true)
      {
        switch (num2 ^ 55)
        {
          case 54:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.\u002Ector);
            num2 = 1;
            continue;
          case 55:
            goto label_5;
          case 56:
            int y;
            int x;
            double a;
            int num3;
            int num4;
            int num5;
            switch (num1)
            {
              case 59:
                a = Math.Atan2((double) y, (double) x);
                num1 = 3;
                goto label_1;
              case 60:
                num1 = 121;
                goto label_1;
              case 61:
                x = checked (_param4 - _param2);
                num1 = 126;
                goto label_1;
              case 62:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D1);
                num1 = 2;
                goto label_1;
              case 63:
                num4 = num3;
                num1 = 120;
                goto label_1;
              case 64:
                num3 = checked ((int) Math.Round(Math.Sqrt(unchecked ((double) checked (x * x + y * y)))));
                num1 = 7;
                goto label_1;
              case 65:
label_14:
                Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D1(_param0, _param1, checked ((int) Math.Round(unchecked ((double) _param2 + (double) num5 * Math.Cos(-a)))), checked ((int) Math.Round(unchecked ((double) _param3 + (double) num5 * Math.Sin(a)))));
                num1 = 0;
                goto label_1;
              case 66:
                y = checked (_param5 - _param3);
                num1 = 124;
                goto label_1;
              case 67:
                if (num5 != 0)
                {
                  num1 = 125;
                  goto label_1;
                }
                else
                  break;
              case 68:
                num5 = 0;
                num1 = (int) sbyte.MaxValue;
                goto label_1;
              case 69:
                checked { ++num5; }
                break;
              default:
                num2 = 0;
                continue;
            }
            if (num5 <= num4)
              goto label_14;
            else
              goto label_19;
          case 57:
label_1:
            num1 ^= 60;
            break;
        }
        num2 = 15;
      }
label_19:;
    }

    private static void \uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D3(
      bool[] _param0,
      bool _param1,
      int _param2,
      int _param3,
      int _param4,
      int _param5)
    {
label_4:
      int num1 = 13;
      int num2 = -4;
      int num3;
      int num4;
      while (true)
      {
        switch ((num2 ^ 54) + 57)
        {
          case 0:
            goto label_4;
          case 1:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (Mazes.Empty);
            num2 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF1.\uEEF5\uEA0C\uEADA\uE1C9\uE289\uEDEB\uE9AB\uE1F5\uE72E\uE67B\uF500\uE550(37);
            continue;
          case 2:
            int num5;
            switch (num1)
            {
              case 57:
                num3 = checked (_param3 + _param5);
                num1 = 10;
                goto label_1;
              case 58:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (Mazes.Boxes2);
                num1 = 11;
                goto label_1;
              case 59:
                num4 = num5;
                num1 = 12;
                goto label_1;
              case 60:
                num5 = _param3;
                num1 = 8;
                goto label_1;
              case 61:
                goto label_14;
              default:
                num2 = -15;
                continue;
            }
          case 3:
label_1:
            num1 ^= 49;
            break;
        }
        num2 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF1.\uEEF5\uEA0C\uEADA\uE1C9\uE289\uEDEB\uE9AB\uE1F5\uE72E\uE67B\uF500\uE550(30);
      }
label_14:
      while (num4 <= num3)
      {
        Mazes.\uF819\uF572\uE3DD\uF586\uE371\uF17A\uF4A6\uE31B\uE588\uE328\uF4C1\uF3D2(_param0, _param1, _param2, num4, checked (_param2 + _param4), num4);
        checked { ++num4; }
      }
    }
  }
}
