// Decompiled with JetBrains decompiler
// Type: mmxAH.EffToNearGate
// Assembly: PermissionTokenFact, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 0E8B010F-DA1B-42FA-9C31-C1DCAF557A03
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqm-2f77bf5e4f961cc5be052ad8dc7fd08c90151230df1a0324df453d4e1d3a2056.exe

using System.Collections.Generic;

namespace mmxAH
{
  public class EffToNearGate : Effect
  {
    public EffToNearGate(GameEngine eng)
      : base(eng)
    {
    }

    public override void Execute(Func f, byte pInvnum = 40)
    {
      base.Execute(f, pInvnum);
      if (this.en.locs[(int) this.en.ActiveInvistigators[(int) this.invnum].GetLocathion()].GetLocType() == LocathionType.OW)
      {
        this.en.ga.ReturnToArchem(this.en.ActiveInvistigators[(int) this.invnum].GetLocathion(), f, this.invnum);
      }
      else
      {
        List<short> shortList = new PathFinder(this.en).Find(this.en.ActiveInvistigators[(int) this.invnum].GetLocathion(), new FuncBoolReturn(this.Check));
        if (shortList.Count == 0)
        {
          f();
        }
        else
        {
          if (shortList.Count == 1)
          {
            ((ArchemUnstableLoc) this.en.locs[(int) shortList[0]]).DrawFromGate(this.invnum, false);
            f();
          }
          string question = this.en.ActiveInvistigators[(int) this.invnum].GetTitle() + "  " + this.en.sysstr.GetString(SSType.MonsterMovePromt1) + "  " + this.en.ActiveInvistigators[(int) this.invnum].GetPronaun() + "  " + this.en.sysstr.GetString(SSType.MonsterMovePromt2);
          List<IOOption> opts = new List<IOOption>();
          foreach (short num in shortList)
            opts.Add((IOOption) new IOOptionWithParam(this.en.locs[(int) num].GetTitle(), new FuncWithParam(this.Execute2), num));
          this.en.io.StartChoose(opts, question, this.en.sysstr.GetString(SSType.ChooseActhionButton));
        }
      }
    }

    private void Execute2(short loc)
    {
      ((ArchemUnstableLoc) this.en.locs[(int) loc]).DrawFromGate(this.invnum, false);
      this.rp();
    }

    private bool Check(short loc) => this.en.locs[(int) loc].GetLocType() == LocathionType.ArchamUnstable && ((ArchemUnstableLoc) this.en.locs[(int) loc]).isGate();
  }
}
