// Decompiled with JetBrains decompiler
// Type: GUI_Class.SpaceRaceGame
// Assembly: sho, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51C27635-B89A-4AD3-9129-401C0F3D3D91
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-9210eb8c921ed0764cdbb0be707d4599531a0076b4984ee57d1076c89c966aab.exe

using System;
using System.ComponentModel;
using System.Drawing;

namespace GUI_Class
{
  public static class SpaceRaceGame
  {
    public const int MIN_PLAYERS = 2;
    public const int MAX_PLAYERS = 6;
    private static int numberOfPlayers = 2;
    public static string[] names = new string[6]
    {
      "One",
      "Two",
      "Three",
      "Four",
      "Five",
      "Six"
    };
    private static Brush[] playerTokenColours = new Brush[6]
    {
      Brushes.Yellow,
      Brushes.Red,
      Brushes.Orange,
      Brushes.White,
      Brushes.Green,
      Brushes.DarkViolet
    };
    private static BindingList<Player> players = new BindingList<Player>();
    private static Die die1 = new Die();
    private static Die die2 = new Die();

    public static int NumberOfPlayers
    {
      get => SpaceRaceGame.numberOfPlayers;
      set => SpaceRaceGame.numberOfPlayers = value;
    }

    public static BindingList<Player> Players => SpaceRaceGame.players;

    public static void SetUpPlayers()
    {
      for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
      {
        SpaceRaceGame.players.Add(new Player(SpaceRaceGame.names[index]));
        SpaceRaceGame.players[index].Location = Board.Squares[0];
        SpaceRaceGame.players[index].PlayerTokenColour = SpaceRaceGame.playerTokenColours[index];
      }
    }

    public static void PlayOneRound()
    {
      for (int i = 0; i < SpaceRaceGame.players.Count; ++i)
        SpaceRaceGame.PlayOneTurn(i);
    }

    public static void PlayOneTurn(int i)
    {
      if (SpaceRaceGame.players[i].RocketFuel != 0)
        SpaceRaceGame.players[i].Play(SpaceRaceGame.die1, SpaceRaceGame.die2);
      for (int index = 0; index < Board.Squares.Length; ++index)
      {
        if (Board.Squares[index].Number == SpaceRaceGame.players[i].Position)
        {
          SpaceRaceGame.players[i].Location = Board.Squares[index];
          break;
        }
      }
      bool flag = false;
      for (int index = 0; index < Board.special.Length; ++index)
      {
        if (SpaceRaceGame.players[i].Location.Number == Board.special[index])
        {
          SpaceRaceGame.players[i].Location.LandOn(SpaceRaceGame.players[i]);
          flag = true;
        }
      }
      if (!flag)
        SpaceRaceGame.players[i].ConsumeFuel(2);
      if (SpaceRaceGame.players[i].Position >= 55)
        SpaceRaceGame.players[i].Position = 55;
      if (SpaceRaceGame.players[i].RocketFuel != 0)
        return;
      Console.WriteLine("{0} is removed as there is zero fuel left.", (object) SpaceRaceGame.players[i].Name);
    }

    public static bool AllPlayerFuel()
    {
      int[] numArray = new int[SpaceRaceGame.NumberOfPlayers];
      int num = 0;
      for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
      {
        numArray[index] = SpaceRaceGame.Players[index].RocketFuel != 0 ? 0 : 1;
        num += numArray[index];
      }
      return num == SpaceRaceGame.NumberOfPlayers;
    }
  }
}
