// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Zip.ZipExtraData
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Zip
{
  public sealed class ZipExtraData : IDisposable
  {
    private int \uE004;
    private int \uE003;
    private int \uE002;
    private MemoryStream \uE001;
    private byte[] \uE000;

    public ZipExtraData() => this.Clear();

    public ZipExtraData(byte[] data)
    {
      if (data == null)
        this.\uE000 = new byte[0];
      else
        this.\uE000 = data;
    }

    public byte[] GetEntryData()
    {
      if (this.Length > (int) ushort.MaxValue)
        throw new ZipException(\uE01B.\uE000("\uED69\uED4C\uED59\uED4C\uED0D\uED48\uED55\uED4E\uED48\uED48\uED49\uED5E\uED0D\uED40\uED4C\uED55\uED44\uED40\uED58\uED40\uED0D\uED41\uED48\uED43\uED4A\uED59\uED45", 60717));
      return (byte[]) this.\uE000.Clone();
    }

    public void Clear()
    {
      if (this.\uE000 != null && this.\uE000.Length == 0)
        return;
      this.\uE000 = new byte[0];
    }

    public int Length => this.\uE000.Length;

    public Stream GetStreamForTag(int tag)
    {
      Stream streamForTag = (Stream) null;
      if (this.Find(tag))
        streamForTag = (Stream) new MemoryStream(this.\uE000, this.\uE004, this.\uE002, false);
      return streamForTag;
    }

    private ITaggedData \uE000(short _param1)
    {
      ITaggedData taggedData = (ITaggedData) null;
      if (this.Find((int) _param1))
        taggedData = ZipExtraData.\uE000(_param1, this.\uE000, this.\uE003, this.\uE002);
      return taggedData;
    }

    private static ITaggedData \uE000(
      short _param0,
      byte[] _param1,
      int _param2,
      int _param3)
    {
      short num = _param0;
      ITaggedData taggedData = num == (short) 10 ? (ITaggedData) new NTTaggedData() : (num == (short) 21589 ? (ITaggedData) new ExtendedUnixData() : (ITaggedData) new RawTaggedData(_param0));
      taggedData.SetData(_param1, _param2, _param3);
      return taggedData;
    }

    public int ValueLength => this.\uE002;

    public int CurrentReadIndex => this.\uE004;

    public int UnreadCount
    {
      get
      {
        if (this.\uE003 > this.\uE000.Length || this.\uE003 < 4)
          throw new ZipException(\uE01B.\uE000("\uF2AE\uF281\uF286\uF28C\uF2C8\uF285\uF29D\uF29B\uF29C\uF2C8\uF28A\uF28D\uF2C8\uF28B\uF289\uF284\uF284\uF28D\uF28C\uF2C8\uF28A\uF28D\uF28E\uF287\uF29A\uF28D\uF2C8\uF28B\uF289\uF284\uF284\uF281\uF286\uF28F\uF2C8\uF289\uF2C8\uF2BA\uF28D\uF289\uF28C\uF2C8\uF285\uF28D\uF29C\uF280\uF287\uF28C", 62184));
        return this.\uE003 + this.\uE002 - this.\uE004;
      }
    }

    public bool Find(int headerID)
    {
      this.\uE003 = this.\uE000.Length;
      this.\uE002 = 0;
      this.\uE004 = 0;
      int num1 = this.\uE003;
      int num2 = headerID - 1;
      while (num2 != headerID && this.\uE004 < this.\uE000.Length - 3)
      {
        num2 = this.\uE000();
        num1 = this.\uE000();
        if (num2 != headerID)
          this.\uE004 += num1;
      }
      bool flag = num2 == headerID && this.\uE004 + num1 <= this.\uE000.Length;
      if (flag)
      {
        this.\uE003 = this.\uE004;
        this.\uE002 = num1;
      }
      return flag;
    }

    public void AddEntry(ITaggedData taggedData)
    {
      if (taggedData == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uF187\uF192\uF194\uF194\uF196\uF197\uF1B7\uF192\uF187\uF192", 61939));
      this.AddEntry((int) taggedData.TagID, taggedData.GetData());
    }

    public void AddEntry(int headerID, byte[] fieldData)
    {
      if (headerID > (int) ushort.MaxValue || headerID < 0)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uF14F\uF142\uF146\uF143\uF142\uF155\uF16E\uF163", 61735));
      int num = fieldData == null ? 0 : fieldData.Length;
      if (num > (int) ushort.MaxValue)
        throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uE65E\uE651\uE65D\uE654\uE65C\uE67C\uE659\uE64C\uE659", 58936), \uE01B.\uE000("\uE4E6\uE4FB\uE4E0\uE4E6\uE4E6\uE4E7\uE4F0\uE4A3\uE4EE\uE4E2\uE4FB\uE4EA\uE4EE\uE4F6\uE4EE\uE4A3\uE4EF\uE4E6\uE4ED\uE4E4\uE4F7\uE4EB", 58499));
      int length1 = this.\uE000.Length + num + 4;
      if (this.Find(headerID))
        length1 -= this.ValueLength + 4;
      if (length1 > (int) ushort.MaxValue)
        throw new ZipException(\uE01B.\uE000("\uED69\uED4C\uED59\uED4C\uED0D\uED48\uED55\uED4E\uED48\uED48\uED49\uED5E\uED0D\uED40\uED4C\uED55\uED44\uED40\uED58\uED40\uED0D\uED41\uED48\uED43\uED4A\uED59\uED45", 60717));
      this.Delete(headerID);
      byte[] numArray = new byte[length1];
      this.\uE000.CopyTo((Array) numArray, 0);
      int length2 = this.\uE000.Length;
      this.\uE000 = numArray;
      this.\uE000(ref length2, headerID);
      this.\uE000(ref length2, num);
      fieldData?.CopyTo((Array) numArray, length2);
    }

    public void StartNewEntry() => this.\uE001 = new MemoryStream();

    public void AddNewEntry(int headerID)
    {
      byte[] array = this.\uE001.ToArray();
      this.\uE001 = (MemoryStream) null;
      this.AddEntry(headerID, array);
    }

    public void AddData(byte data) => this.\uE001.WriteByte(data);

    public void AddData(byte[] data)
    {
      if (data == null)
        throw new ArgumentNullException(\uE01B.\uE000("\uE847\uE842\uE857\uE842", 59427));
      this.\uE001.Write(data, 0, data.Length);
    }

    public void AddLeShort(int toAdd)
    {
      this.\uE001.WriteByte((byte) toAdd);
      this.\uE001.WriteByte((byte) (toAdd >> 8));
    }

    public void AddLeInt(int toAdd)
    {
      this.AddLeShort((int) (short) toAdd);
      this.AddLeShort((int) (short) (toAdd >> 16));
    }

    public void AddLeLong(long toAdd)
    {
      this.AddLeInt((int) (toAdd & (long) uint.MaxValue));
      this.AddLeInt((int) (toAdd >> 32));
    }

    public bool Delete(int headerID)
    {
      bool flag = false;
      if (this.Find(headerID))
      {
        flag = true;
        int num = this.\uE003 - 4;
        byte[] destinationArray = new byte[this.\uE000.Length - (this.ValueLength + 4)];
        Array.Copy((Array) this.\uE000, 0, (Array) destinationArray, 0, num);
        int sourceIndex = num + this.ValueLength + 4;
        Array.Copy((Array) this.\uE000, sourceIndex, (Array) destinationArray, num, this.\uE000.Length - sourceIndex);
        this.\uE000 = destinationArray;
      }
      return flag;
    }

    public long ReadLong()
    {
      this.\uE000(8);
      return (long) this.ReadInt() & (long) uint.MaxValue | (long) this.ReadInt() << 32;
    }

    public int ReadInt()
    {
      this.\uE000(4);
      int num = (int) this.\uE000[this.\uE004] + ((int) this.\uE000[this.\uE004 + 1] << 8) + ((int) this.\uE000[this.\uE004 + 2] << 16) + ((int) this.\uE000[this.\uE004 + 3] << 24);
      this.\uE004 += 4;
      return num;
    }

    public int ReadShort()
    {
      this.\uE000(2);
      int num = (int) this.\uE000[this.\uE004] + ((int) this.\uE000[this.\uE004 + 1] << 8);
      this.\uE004 += 2;
      return num;
    }

    public int ReadByte()
    {
      int num = -1;
      if (this.\uE004 < this.\uE000.Length && this.\uE003 + this.\uE002 > this.\uE004)
      {
        num = (int) this.\uE000[this.\uE004];
        ++this.\uE004;
      }
      return num;
    }

    public void Skip(int amount)
    {
      this.\uE000(amount);
      this.\uE004 += amount;
    }

    private void \uE000(int _param1)
    {
      if (this.\uE003 > this.\uE000.Length || this.\uE003 < 4)
        throw new ZipException(\uE01B.\uE000("\uF2AE\uF281\uF286\uF28C\uF2C8\uF285\uF29D\uF29B\uF29C\uF2C8\uF28A\uF28D\uF2C8\uF28B\uF289\uF284\uF284\uF28D\uF28C\uF2C8\uF28A\uF28D\uF28E\uF287\uF29A\uF28D\uF2C8\uF28B\uF289\uF284\uF284\uF281\uF286\uF28F\uF2C8\uF289\uF2C8\uF2BA\uF28D\uF289\uF28C\uF2C8\uF285\uF28D\uF29C\uF280\uF287\uF28C", 62184));
      if (this.\uE004 > this.\uE003 + this.\uE002 - _param1)
        throw new ZipException(\uE01B.\uE000("\uE409\uE422\uE428\uE46C\uE423\uE42A\uE46C\uE429\uE434\uE438\uE43E\uE42D\uE46C\uE428\uE42D\uE438\uE42D", 58444));
    }

    private int \uE000()
    {
      if (this.\uE004 > this.\uE000.Length - 2)
        throw new ZipException(\uE01B.\uE000("\uE409\uE422\uE428\uE46C\uE423\uE42A\uE46C\uE429\uE434\uE438\uE43E\uE42D\uE46C\uE428\uE42D\uE438\uE42D", 58444));
      int num = (int) this.\uE000[this.\uE004] + ((int) this.\uE000[this.\uE004 + 1] << 8);
      this.\uE004 += 2;
      return num;
    }

    private void \uE000(ref int _param1, int _param2)
    {
      this.\uE000[_param1] = (byte) _param2;
      this.\uE000[_param1 + 1] = (byte) (_param2 >> 8);
      _param1 += 2;
    }

    public void Dispose()
    {
      if (this.\uE001 == null)
        return;
      this.\uE001.Close();
    }
  }
}
