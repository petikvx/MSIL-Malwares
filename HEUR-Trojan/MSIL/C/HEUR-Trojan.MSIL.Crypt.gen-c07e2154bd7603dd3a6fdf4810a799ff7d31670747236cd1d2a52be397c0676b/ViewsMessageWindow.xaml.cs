// Decompiled with JetBrains decompiler
// Type: Cradiator.Views.MessageWindow
// Assembly: FileOptio, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0135208B-21B4-457A-BFCD-FFD93FD8BA14
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c07e2154bd7603dd3a6fdf4810a799ff7d31670747236cd1d2a52be397c0676b.exe

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Markup;
using System.Windows.Media.Animation;
using System.Windows.Threading;

namespace Cradiator.Views
{
  public partial class MessageWindow : Window, IComponentConnector
  {
    private const double PercentageOfPollFrequency = 1.2;
    private readonly ICradiatorView _mainView;
    private DispatcherTimer _timer;
    internal Border Container;
    internal TextBlock Message;
    private bool _contentLoaded;

    public MessageWindow() => this.InitializeComponent();

    public MessageWindow(ICradiatorView view)
      : this()
    {
      this._mainView = view;
    }

    public void ShowMessage(int pollFrequency, string message)
    {
      this.Message.Text = message;
      this._timer = new DispatcherTimer()
      {
        Interval = TimeSpan.FromSeconds((double) pollFrequency / 1.2)
      };
      this._timer.Tick += new EventHandler(this.Timer_Tick);
      this._timer.Start();
      if (this._mainView != null)
      {
        this._mainView.ScreenUpdating += new EventHandler(this.MainScreenUpdating);
        this._mainView.Closing += new CancelEventHandler(this.MainWindowClosing);
      }
      this.Show();
    }

    private void MainWindowClosing(object sender, CancelEventArgs e) => this.Close();

    private void MainScreenUpdating(object sender, EventArgs e)
    {
      this._timer.Stop();
      this.CloseWithFade();
    }

    private void Timer_Tick(object timer, EventArgs e)
    {
      ((DispatcherTimer) timer).Stop();
      this.CloseWithFade();
    }

    private void CloseWithFade() => this.Dispatcher.Invoke(DispatcherPriority.Normal, (Delegate) (() =>
    {
      Storyboard resource = (Storyboard) this.FindResource((object) "FadeAway");
      resource.Completed += new EventHandler(this.FadeAway_Completed);
      this.BeginStoryboard(resource);
    }));

    private void FadeAway_Completed(object sender, EventArgs e) => this.Dispatcher.Invoke(DispatcherPriority.Normal, (Delegate) new Action(((Window) this).Close));

    protected override void OnClosing(CancelEventArgs e) => this._mainView.ScreenUpdating -= new EventHandler(this.MainScreenUpdating);

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/FileOptio;component/views/messagewindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.Container = (Border) target;
          break;
        case 2:
          this.Message = (TextBlock) target;
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
