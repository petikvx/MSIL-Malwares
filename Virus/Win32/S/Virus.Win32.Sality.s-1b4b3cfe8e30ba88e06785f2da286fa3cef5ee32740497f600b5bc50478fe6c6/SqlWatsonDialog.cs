// Decompiled with JetBrains decompiler
// Type: WatsonDialog.SqlWatsonDialog
// Assembly: SQLWTSN, Version=9.0.242.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91
// MVID: B7E612C0-B21E-4017-B4A7-EBA59D4A8946
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Sality.s-1b4b3cfe8e30ba88e06785f2da286fa3cef5ee32740497f600b5bc50478fe6c6.exe

using Microsoft.NetEnterpriseServers;
using Microsoft.SqlServer.Management.Diagnostics;
using Microsoft.SqlServer.Management.UI;
using Microsoft.SqlServer.Management.UI.Grid;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Windows.Forms;

namespace WatsonDialog
{
  internal class SqlWatsonDialog : Form
  {
    private bool m_showGrid;
    private SqlWatsonGridStorage m_gridStorage;
    private bool m_sortInstanceDescending;
    private bool m_sortComponentDescending;
    private int m_expandedHeight;
    private string m_helpFilePath;
    private IContainer components;
    private CheckBox featureCheckBox;
    private CheckBox errorCheckBox;
    private Button optionsButton;
    private Panel gridPanel;
    private Label labelAboveGrid;
    private Label labelBelowGrid;
    private Button okButton;
    private Button cancelButton;
    private Button helpButton;
    private Separator separator1;
    private Panel panelUpper;
    private Panel panelTopControls;
    private Panel panelOptionsButton;
    private SqlWatsonGridControl instanceGrid;
    private SqlWatsonLinkLabel privacyLinkLabel;

    internal static void LaunchDialog()
    {
      if (!SqlWatsonDialog.IsCurrentUserAdmin())
      {
        int num1 = (int) ErrorHandler.Error(Constants.USER_IS_NOT_ADMIN);
      }
      else if (!SqlWatsonDialog.CheckRegistry())
      {
        int num2 = (int) ErrorHandler.Error(Constants.CORRUPT_REGISTRY);
      }
      else
      {
        int num3 = (int) new SqlWatsonDialog().ShowDialog();
      }
    }

    private static bool IsCurrentUserAdmin() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

    private static bool CheckRegistry() => RegistryInteractor.KeyExists(Constants.BASE_REGKEY, "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90") || RegistryInteractor.KeyExists(Constants.BASE_REGKEY, "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90");

    internal SqlWatsonDialog()
    {
      this.InitializeState();
      this.InitializeComponent();
      this.InitializeGrid();
      this.InitializeHelpFilePath();
      this.InitializePrivacyLink();
      this.UpdateGridLayout();
      this.UpdateMainCheckBoxes();
    }

    private void InitializeState()
    {
      this.m_showGrid = false;
      this.m_sortInstanceDescending = true;
      this.m_sortComponentDescending = true;
      this.m_expandedHeight = 528;
    }

    private void InitializeGrid()
    {
      this.instanceGrid.AddColumn(new GridColumnInfo()
      {
        IsUserResizable = true,
        IsWithRightGridLine = true,
        IsHeaderMergedWithRight = false,
        IsHeaderClickable = true,
        ColumnAlignment = HorizontalAlignment.Left,
        ColumnWidth = 100,
        WidthType = (GridColumnWidthType) 0,
        ColumnType = 1,
        HeaderType = (GridColumnHeaderType) 0
      });
      this.instanceGrid.AddColumn(new GridColumnInfo()
      {
        IsUserResizable = true,
        IsWithRightGridLine = true,
        IsHeaderMergedWithRight = false,
        IsHeaderClickable = true,
        ColumnAlignment = HorizontalAlignment.Left,
        ColumnWidth = 100,
        WidthType = (GridColumnWidthType) 0,
        ColumnType = 1,
        HeaderType = (GridColumnHeaderType) 0
      });
      this.instanceGrid.AddColumn(new GridColumnInfo()
      {
        IsUserResizable = true,
        IsWithRightGridLine = true,
        IsHeaderMergedWithRight = false,
        IsHeaderClickable = false,
        ColumnAlignment = HorizontalAlignment.Center,
        ColumnWidth = 80,
        WidthType = (GridColumnWidthType) 0,
        ColumnType = 4,
        IsWithSelectionBackground = false,
        HeaderType = (GridColumnHeaderType) 0
      });
      this.instanceGrid.AddColumn(new GridColumnInfo()
      {
        IsUserResizable = true,
        IsWithRightGridLine = true,
        IsHeaderMergedWithRight = false,
        IsHeaderClickable = false,
        ColumnAlignment = HorizontalAlignment.Center,
        ColumnWidth = 80,
        WidthType = (GridColumnWidthType) 0,
        ColumnType = 4,
        IsWithSelectionBackground = false,
        HeaderType = (GridColumnHeaderType) 0
      });
      this.instanceGrid.AddColumn(new GridColumnInfo()
      {
        IsUserResizable = false,
        IsWithRightGridLine = true,
        IsHeaderMergedWithRight = true,
        IsHeaderClickable = false,
        ColumnAlignment = HorizontalAlignment.Left,
        ColumnWidth = 146,
        WidthType = (GridColumnWidthType) 0,
        ColumnType = 1,
        HeaderType = (GridColumnHeaderType) 0
      });
      this.instanceGrid.AddColumn(new GridColumnInfo()
      {
        IsUserResizable = false,
        IsWithRightGridLine = true,
        IsHeaderMergedWithRight = false,
        IsHeaderClickable = false,
        ColumnAlignment = HorizontalAlignment.Left,
        ColumnWidth = 18,
        WidthType = (GridColumnWidthType) 0,
        ColumnType = 2,
        HeaderType = (GridColumnHeaderType) 0
      });
      this.instanceGrid.SetHeaderInfo(0, Constants.INSTANCE_COLUMN_HEADER, (Bitmap) null);
      this.instanceGrid.SetHeaderInfo(1, Constants.COMPONENT_COLUMN_HEADER, (Bitmap) null);
      this.instanceGrid.SetHeaderInfo(2, Constants.USAGE_CHECKBOX_COLUMN_HEADER, (Bitmap) null);
      this.instanceGrid.SetHeaderInfo(3, Constants.ERROR_CHECKBOX_COLUMN_HEADER, (Bitmap) null);
      this.instanceGrid.SetHeaderInfo(5, Constants.ERROR_REPORTS_COLUMN_HEADER, (Bitmap) null);
      this.m_gridStorage = new SqlWatsonGridStorage();
      this.instanceGrid.GridStorage = (IGridStorage) this.m_gridStorage;
      // ISSUE: method pointer
      this.instanceGrid.MouseButtonClicked += new MouseButtonClickedEventHandler((object) this, __methodptr(instanceGrid_CellClicked));
      // ISSUE: method pointer
      this.instanceGrid.HeaderButtonClicked += new HeaderButtonClickedEventHandler((object) this, __methodptr(instanceGrid_HeaderButtonClicked));
      this.Resize += new EventHandler(this.SqlWatsonDialog_Resize);
      // ISSUE: method pointer
      this.instanceGrid.ColumnWidthChanged += new ColumnWidthChangedEventHandler((object) this, __methodptr(instanceGrid_ColumnWidthChanged));
      ((Control) this.instanceGrid).GotFocus += new EventHandler(this.instanceGrid_GotFocus);
      // ISSUE: method pointer
      this.instanceGrid.StandardKeyProcessing += new StandardKeyProcessingEventHandler((object) this, __methodptr(instanceGrid_StandardKeyProcessing));
      // ISSUE: method pointer
      this.instanceGrid.EmbeddedControlContentsChanged += new EmbeddedControlContentsChangedEventHandler((object) this, __methodptr(instanceGrid_EmbeddedControlContentsChanged));
      ((Control) this.instanceGrid).AccessibleName = Constants.GRID_ACCESSIBLE_NAME;
    }

    private void InitializeHelpFilePath()
    {
      object regKeyValue = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90\\Bootstrap", "BootstrapDir");
      if (regKeyValue == null)
      {
        regKeyValue = RegistryInteractor.GetRegKeyValue(Constants.BASE_REGKEY, "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90\\Bootstrap", "BootstrapDir", Constants.CORRUPT_REGISTRY_BOOTSTRAP);
        if (regKeyValue == null)
          return;
      }
      this.m_helpFilePath = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}\\{1}\\{2}\\{3}", regKeyValue, (object) Constants.HELP_DIR_SUFFIX, (object) CultureInfo.CurrentCulture.LCID, (object) Constants.HELP_FILE_NAME);
    }

    private void InitializePrivacyLink()
    {
      this.privacyLinkLabel.Text = string.Format((IFormatProvider) CultureInfo.CurrentCulture, "{0}{1}", new object[2]
      {
        (object) this.privacyLinkLabel.Text,
        (object) Constants.PRIVACY_LINK
      });
      this.privacyLinkLabel.LinkArea = new LinkArea(this.privacyLinkLabel.Text.IndexOf(Constants.PRIVACY_LINK), Constants.PRIVACY_LINK.Length);
      this.privacyLinkLabel.Links[0].LinkData = (object) Constants.PRIVACY_POLICY_LINK;
    }

    private void privacyLinkLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) => Process.Start(e.Link.LinkData.ToString());

    private void optionsButton_Click(object sender, EventArgs e)
    {
      this.m_showGrid = !this.m_showGrid;
      this.UpdateGridLayout();
    }

    private void cancelButton_Click(object sender, EventArgs e) => this.Close();

    private void okButton_Click(object sender, EventArgs e)
    {
      if (!this.SaveValues())
        return;
      this.Close();
    }

    private void helpButton_Click(object sender, EventArgs e)
    {
      if (this.m_helpFilePath == null)
      {
        this.InitializeHelpFilePath();
        if (this.m_helpFilePath == null)
          return;
      }
      try
      {
        Help.ShowHelp((Control) this, this.m_helpFilePath, HelpNavigator.Topic, (object) "html\\e72c43b6-a2bd-4545-9aff-79c83b21180d.htm");
      }
      catch (ArgumentException ex)
      {
        STrace.LogExCatch((Exception) ex);
        int num = (int) ErrorHandler.Error(ex.Message);
      }
    }

    protected override void OnKeyDown(KeyEventArgs kea)
    {
      if (kea.KeyData == (Keys.F | Keys.Control))
        this.featureCheckBox.Checked = !this.featureCheckBox.Checked;
      if (kea.KeyData != (Keys.E | Keys.Control))
        return;
      this.errorCheckBox.Checked = !this.errorCheckBox.Checked;
    }

    private void instanceGrid_GotFocus(object sender, EventArgs e)
    {
      long num1;
      int num2;
      this.instanceGrid.GetCurrentCell(ref num1, ref num2);
      if (num1 != -1L && num2 != -1)
        return;
      this.instanceGrid.SelectedCells = new BlockOfCellsCollection(new BlockOfCells[1]
      {
        new BlockOfCells(0L, 0)
      });
    }

    private void instanceGrid_StandardKeyProcessing(
      object sender,
      StandardKeyProcessingEventArgs args)
    {
      if (args.Key != Keys.Space)
        return;
      long rowIndex;
      int colIndex;
      this.instanceGrid.GetCurrentCell(ref rowIndex, ref colIndex);
      if (colIndex != 3 && colIndex != 2)
        return;
      this.HandleClickOnCheckBoxCell(rowIndex, colIndex);
      this.instanceGrid.UpdateGrid();
    }

    private void instanceGrid_EmbeddedControlContentsChanged(
      object sender,
      EmbeddedControlContentsChangedEventArgs args)
    {
      IGridEmbeddedControl embeddedControl = args.EmbeddedControl;
      string selectionAsString = embeddedControl.GetCurSelectionAsString();
      if (selectionAsString == null || selectionAsString.Length <= 247)
        return;
      embeddedControl.SetCurSelectionAsString(selectionAsString.Substring(0, 247));
    }

    private void instanceGrid_HeaderButtonClicked(object sender, HeaderButtonClickedEventArgs args)
    {
      this.instanceGrid.StopCellEdit(true);
      long nRowIndex;
      int num;
      this.instanceGrid.GetCurrentCell(ref nRowIndex, ref num);
      Instance inst = (Instance) null;
      if (nRowIndex != -1L)
        inst = this.m_gridStorage.GetInstance(nRowIndex);
      if (args.ColumnIndex == 0)
      {
        this.m_gridStorage.SortByColumn(args.ColumnIndex, this.m_sortInstanceDescending);
        this.m_sortInstanceDescending = !this.m_sortInstanceDescending;
      }
      else if (args.ColumnIndex == 1)
      {
        this.m_gridStorage.SortByColumn(args.ColumnIndex, this.m_sortComponentDescending);
        this.m_sortComponentDescending = !this.m_sortComponentDescending;
      }
      if (nRowIndex != -1L)
        this.instanceGrid.SelectedCells = new BlockOfCellsCollection(new BlockOfCells[1]
        {
          new BlockOfCells(this.m_gridStorage.GetRow(inst), num)
        });
      this.instanceGrid.UpdateGrid();
    }

    private void instanceGrid_CellClicked(object sender, MouseButtonClickedEventArgs args)
    {
      if (args.Button != MouseButtons.Left || args.ColumnIndex == 0 || args.ColumnIndex == 1)
        return;
      Instance instance = this.m_gridStorage.GetInstance(args.RowIndex);
      if (!instance.canWrite)
      {
        string str = "";
        switch (args.ColumnIndex)
        {
          case 2:
            str = Constants.USAGE_CHECKBOX_COLUMN_HEADER;
            break;
          case 3:
            str = Constants.ERROR_CHECKBOX_COLUMN_HEADER;
            break;
          case 4:
          case 5:
            str = Constants.ERROR_REPORTS_COLUMN_HEADER;
            break;
        }
        int num = (int) ErrorHandler.Error(string.Format((IFormatProvider) CultureInfo.InvariantCulture, Constants.CANNOT_UPDATE_NON_ACTIVE_NODE, new object[2]
        {
          (object) str,
          (object) instance.DisplayName
        }));
      }
      else
      {
        if (args.ColumnIndex == 2 || args.ColumnIndex == 3)
          this.HandleClickOnCheckBoxCell(args.RowIndex, args.ColumnIndex);
        if (args.ColumnIndex != 5)
          return;
        this.instanceGrid.StopCellEdit(true);
        FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
        folderBrowserDialog.Description = Constants.BROWSE_DESCRIPTION;
        string instanceData = this.m_gridStorage.GetInstanceData(args.RowIndex, args.ColumnIndex - 1) as string;
        folderBrowserDialog.SelectedPath = instanceData;
        if (folderBrowserDialog.ShowDialog() != DialogResult.OK)
          return;
        this.m_gridStorage.SetInstanceData(args.RowIndex, args.ColumnIndex - 1, (object) folderBrowserDialog.SelectedPath);
      }
    }

    private void featureCheckBox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.featureCheckBox.CheckState == CheckState.Indeterminate)
        return;
      this.m_gridStorage.SelectAllCheckBoxes(2, this.featureCheckBox.CheckState == CheckState.Checked);
      this.instanceGrid.UpdateGrid();
    }

    private void errorCheckBox_CheckedChanged(object sender, EventArgs e)
    {
      if (this.errorCheckBox.CheckState == CheckState.Indeterminate)
        return;
      this.m_gridStorage.SelectAllCheckBoxes(3, this.errorCheckBox.CheckState == CheckState.Checked);
      this.instanceGrid.UpdateGrid();
    }

    private void SqlWatsonDialog_Resize(object sender, EventArgs e)
    {
      if (this.WindowState != FormWindowState.Minimized)
        this.StretchErrorDirColumn();
      if (this.instanceGrid != null)
      {
        if (this.labelAboveGrid != null)
          this.labelAboveGrid.MaximumSize = new Size(((Control) this.instanceGrid).Width - 5, 0);
        if (this.labelBelowGrid != null)
          this.labelBelowGrid.MaximumSize = new Size(((Control) this.instanceGrid).Width - 5, 0);
      }
      if (this.panelUpper == null || this.privacyLinkLabel == null)
        return;
      this.privacyLinkLabel.MaximumSize = new Size(this.panelUpper.Width - 5, 0);
    }

    private void instanceGrid_ColumnWidthChanged(object sender, ColumnWidthChangedEventArgs args)
    {
      if (args.ColumnIndex == 4)
        return;
      this.StretchErrorDirColumn();
    }

    private void UpdateGridLayout()
    {
      if (this.m_showGrid)
      {
        this.Height = this.m_expandedHeight;
        this.gridPanel.Visible = true;
        this.optionsButton.Text = Constants.OPTIONS_BUTTON_TEXT_HIDE;
      }
      else
      {
        if (this.WindowState != FormWindowState.Maximized)
        {
          this.m_expandedHeight = this.Height;
          if (this.m_expandedHeight < 528)
            this.m_expandedHeight = 528;
        }
        this.Height = 324;
        this.gridPanel.Visible = false;
        this.optionsButton.Text = Constants.OPTIONS_BUTTON_TEXT_SHOW;
      }
    }

    private void UpdateMainCheckBoxes()
    {
      CheckBox featureCheckBox = this.featureCheckBox;
      int nColIndex1 = 2;
      featureCheckBox.CheckState = !this.m_gridStorage.AreAllCheckBoxesChecked(nColIndex1) ? (!this.m_gridStorage.AreAllCheckBoxesUnchecked(nColIndex1) ? CheckState.Indeterminate : CheckState.Unchecked) : CheckState.Checked;
      CheckBox errorCheckBox = this.errorCheckBox;
      int nColIndex2 = 3;
      if (this.m_gridStorage.AreAllCheckBoxesChecked(nColIndex2))
        errorCheckBox.CheckState = CheckState.Checked;
      else if (this.m_gridStorage.AreAllCheckBoxesUnchecked(nColIndex2))
        errorCheckBox.CheckState = CheckState.Unchecked;
      else
        errorCheckBox.CheckState = CheckState.Indeterminate;
    }

    private void HandleClickOnCheckBoxCell(long rowIndex, int colIndex)
    {
      this.m_gridStorage.ToggleCheckBox(rowIndex, colIndex);
      this.UpdateMainCheckBoxes();
    }

    private void StretchErrorDirColumn()
    {
      if (!this.m_showGrid)
        return;
      int width = ((Control) this.instanceGrid).Width;
      for (int index = 0; index < 6; ++index)
      {
        if (index != 4)
          width -= this.instanceGrid.GetColumnWidth(index);
      }
      int num = width - 11;
      if ((long) this.instanceGrid.VisibleRowsNum < this.instanceGrid.GridStorage.NumRows())
        num -= 16;
      if (num <= 0)
        return;
      this.instanceGrid.SetColumnWidth(4, (GridColumnWidthType) 0, num);
    }

    private bool VerifyDirectory(string path, Instance inst)
    {
      if (string.IsNullOrEmpty(path))
      {
        int num = (int) ErrorHandler.Error(Constants.INVALID_BLANK_DIRECTORY);
        return false;
      }
      if (Directory.Exists(path))
        return this.SetDirectoryAcls(path, inst);
      if (ErrorHandler.Error(string.Format((IFormatProvider) CultureInfo.InvariantCulture, Constants.CONFIRM_FOLDER_CREATE, new object[1]
      {
        (object) path
      }), Constants.CREATE_FOLDER_CAPTION, (ExceptionMessageBoxButtons) 3, (ExceptionMessageBoxSymbol) 6) == DialogResult.No)
        return false;
      DialogResult dialogResult;
      do
      {
        try
        {
          string fullName = Directory.CreateDirectory(path).FullName;
          if (fullName != path)
            inst.errorDir = fullName;
          return this.SetDirectoryAcls(path, inst);
        }
        catch (Exception ex)
        {
          STrace.LogExCatch(ex);
          dialogResult = ErrorHandler.Error(string.Format((IFormatProvider) CultureInfo.InvariantCulture, Constants.INVALID_DIRECTORY, new object[1]
          {
            (object) path
          }), (ExceptionMessageBoxButtons) 5, ex);
        }
      }
      while (dialogResult == DialogResult.Retry);
      return false;
    }

    private bool SetDirectoryAcls(string path, Instance inst)
    {
      DirectorySecurity directorySecurity = new DirectorySecurity();
      if (inst.IsAgnostic)
      {
        for (long nRowIndex = 0; nRowIndex < this.m_gridStorage.NumRows(); ++nRowIndex)
        {
          Instance instance = this.m_gridStorage.GetInstance(nRowIndex);
          if (inst.isWow == instance.isWow)
          {
            if (instance.instanceType == Constants.COMPONENT_SQL_SERVER_STRING)
            {
              SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005MSSQLUser" + instance.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
              SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005SQLAgentUser" + instance.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
            }
            else if (instance.instanceType == Constants.COMPONENT_ANALYSIS_SERVER_STRING)
              SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005MSOLAPUser" + instance.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
            else if (instance.instanceType == Constants.COMPONENT_REPORT_SERVER_STRING)
              SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005ReportServerUser" + instance.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
          }
        }
        if (SqlWatsonDialog.IsNSInstalled(inst.isWow))
          SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005NotificationServicesUser", FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
        if (SqlWatsonDialog.IsDtsInstalled(inst.isWow))
          SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005DTSUser", FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
        if (SqlWatsonDialog.IsSqlBrowserInstalled(inst.isWow))
          SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005SQLBrowserUser", FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
      }
      else if (Constants.COMPONENT_SQL_SERVER_STRING == inst.instanceType)
      {
        SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005MSSQLUser" + inst.UserGroupSuffix, FileSystemRights.FullControl, AccessControlType.Allow, directorySecurity);
        SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005SQLAgentUser" + inst.UserGroupSuffix, FileSystemRights.FullControl, AccessControlType.Allow, directorySecurity);
      }
      else if (Constants.COMPONENT_ANALYSIS_SERVER_STRING == inst.instanceType)
        SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005MSOLAPUser" + inst.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write, AccessControlType.Allow, directorySecurity);
      else if (Constants.COMPONENT_REPORT_SERVER_STRING == inst.instanceType)
      {
        SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005ReportServerUser" + inst.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write | FileSystemRights.Delete, AccessControlType.Allow, directorySecurity);
        SqlWatsonDialog.AddAccessRuleToDirectorySecurity("SQLServer2005ReportingServicesWebServiceUser" + inst.UserGroupSuffix, FileSystemRights.Read | FileSystemRights.Write | FileSystemRights.Delete, AccessControlType.Allow, directorySecurity);
      }
      Directory.SetAccessControl(path, directorySecurity);
      return true;
    }

    private static bool AddAccessRuleToDirectorySecurity(
      string identity,
      FileSystemRights rights,
      AccessControlType type,
      DirectorySecurity ds)
    {
      try
      {
        ds.AddAccessRule(new FileSystemAccessRule(identity, rights, type));
      }
      catch (IdentityNotMappedException ex)
      {
        STrace.LogExCatch((Exception) ex);
        return false;
      }
      catch (SystemException ex)
      {
        STrace.LogExCatch((Exception) ex);
        return false;
      }
      return true;
    }

    private static bool IsNSInstalled(bool wow)
    {
      string keyName = wow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90\\NS" : "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90\\NS";
      return RegistryInteractor.KeyExists(Registry.LocalMachine, keyName);
    }

    private static bool IsDtsInstalled(bool wow)
    {
      string keyName = wow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90\\DTS" : "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90\\DTS";
      return RegistryInteractor.KeyExists(Registry.LocalMachine, keyName);
    }

    private static bool IsSqlBrowserInstalled(bool wow)
    {
      string keyName = wow ? "SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SQL Server\\90\\SQL Browser" : "SOFTWARE\\Microsoft\\Microsoft SQL Server\\90\\SQL Browser";
      return RegistryInteractor.KeyExists(Registry.LocalMachine, keyName);
    }

    private bool SaveValues()
    {
      for (int nRowIndex = 0; (long) nRowIndex < this.m_gridStorage.NumRows(); ++nRowIndex)
      {
        Instance instance = this.m_gridStorage.GetInstance((long) nRowIndex);
        if (instance.canWrite && !this.VerifyDirectory((instance.errorDir == null ? (object) "" : (object) instance.errorDir).ToString(), instance))
          return false;
      }
      for (int nRowIndex = 0; (long) nRowIndex < this.m_gridStorage.NumRows(); ++nRowIndex)
      {
        if (!this.m_gridStorage.GetInstance((long) nRowIndex).SaveData())
          return false;
      }
      return true;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (SqlWatsonDialog));
      this.featureCheckBox = new CheckBox();
      this.errorCheckBox = new CheckBox();
      this.optionsButton = new Button();
      this.gridPanel = new Panel();
      this.instanceGrid = new SqlWatsonGridControl();
      this.labelAboveGrid = new Label();
      this.labelBelowGrid = new Label();
      this.okButton = new Button();
      this.cancelButton = new Button();
      this.helpButton = new Button();
      this.separator1 = new Separator();
      this.panelUpper = new Panel();
      this.panelTopControls = new Panel();
      this.panelOptionsButton = new Panel();
      this.privacyLinkLabel = new SqlWatsonLinkLabel();
      this.gridPanel.SuspendLayout();
      ((ISupportInitialize) this.instanceGrid).BeginInit();
      this.panelUpper.SuspendLayout();
      this.panelTopControls.SuspendLayout();
      this.panelOptionsButton.SuspendLayout();
      this.SuspendLayout();
      componentResourceManager.ApplyResources((object) this.featureCheckBox, "featureCheckBox");
      this.featureCheckBox.Name = "featureCheckBox";
      this.featureCheckBox.Padding = new Padding(0, 20, 0, 0);
      this.featureCheckBox.CheckedChanged += new EventHandler(this.featureCheckBox_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.errorCheckBox, "errorCheckBox");
      this.errorCheckBox.Name = "errorCheckBox";
      this.errorCheckBox.CheckedChanged += new EventHandler(this.errorCheckBox_CheckedChanged);
      componentResourceManager.ApplyResources((object) this.optionsButton, "optionsButton");
      this.optionsButton.Name = "optionsButton";
      this.optionsButton.Click += new EventHandler(this.optionsButton_Click);
      componentResourceManager.ApplyResources((object) this.gridPanel, "gridPanel");
      this.gridPanel.Controls.Add((Control) this.instanceGrid);
      this.gridPanel.Controls.Add((Control) this.labelAboveGrid);
      this.gridPanel.Controls.Add((Control) this.labelBelowGrid);
      this.gridPanel.Name = "gridPanel";
      componentResourceManager.ApplyResources((object) this.instanceGrid, "instanceGrid");
      ((Control) this.instanceGrid).AccessibleRole = AccessibleRole.Table;
      ((Control) this.instanceGrid).BackColor = SystemColors.Window;
      ((Control) this.instanceGrid).Name = "instanceGrid";
      componentResourceManager.ApplyResources((object) this.labelAboveGrid, "labelAboveGrid");
      this.labelAboveGrid.MaximumSize = new Size(535, 0);
      this.labelAboveGrid.Name = "labelAboveGrid";
      this.labelAboveGrid.Padding = new Padding(0, 5, 0, 8);
      componentResourceManager.ApplyResources((object) this.labelBelowGrid, "labelBelowGrid");
      this.labelBelowGrid.MaximumSize = new Size(490, 0);
      this.labelBelowGrid.MinimumSize = new Size(0, 30);
      this.labelBelowGrid.Name = "labelBelowGrid";
      this.labelBelowGrid.Padding = new Padding(0, 5, 0, 0);
      componentResourceManager.ApplyResources((object) this.okButton, "okButton");
      this.okButton.Name = "okButton";
      this.okButton.Click += new EventHandler(this.okButton_Click);
      componentResourceManager.ApplyResources((object) this.cancelButton, "cancelButton");
      this.cancelButton.DialogResult = DialogResult.Cancel;
      this.cancelButton.Name = "cancelButton";
      this.cancelButton.Click += new EventHandler(this.cancelButton_Click);
      componentResourceManager.ApplyResources((object) this.helpButton, "helpButton");
      this.helpButton.Name = "helpButton";
      this.helpButton.Click += new EventHandler(this.helpButton_Click);
      componentResourceManager.ApplyResources((object) this.separator1, "separator1");
      ((Control) this.separator1).Name = "separator1";
      componentResourceManager.ApplyResources((object) this.panelUpper, "panelUpper");
      this.panelUpper.Controls.Add((Control) this.panelTopControls);
      this.panelUpper.Controls.Add((Control) this.privacyLinkLabel);
      this.panelUpper.MinimumSize = new Size(0, 224);
      this.panelUpper.Name = "panelUpper";
      this.panelTopControls.BackColor = SystemColors.Control;
      this.panelTopControls.Controls.Add((Control) this.panelOptionsButton);
      this.panelTopControls.Controls.Add((Control) this.featureCheckBox);
      this.panelTopControls.Controls.Add((Control) this.errorCheckBox);
      componentResourceManager.ApplyResources((object) this.panelTopControls, "panelTopControls");
      this.panelTopControls.MinimumSize = new Size(540, 0);
      this.panelTopControls.Name = "panelTopControls";
      this.panelOptionsButton.AutoSizeMode = AutoSizeMode.GrowAndShrink;
      this.panelOptionsButton.Controls.Add((Control) this.optionsButton);
      componentResourceManager.ApplyResources((object) this.panelOptionsButton, "panelOptionsButton");
      this.panelOptionsButton.MinimumSize = new Size(0, 29);
      this.panelOptionsButton.Name = "panelOptionsButton";
      componentResourceManager.ApplyResources((object) this.privacyLinkLabel, "privacyLinkLabel");
      this.privacyLinkLabel.MaximumSize = new Size(535, 0);
      this.privacyLinkLabel.MinimumSize = new Size(0, 67);
      this.privacyLinkLabel.Name = "privacyLinkLabel";
      this.privacyLinkLabel.Tag = (object) "";
      this.privacyLinkLabel.UseCompatibleTextRendering = true;
      this.privacyLinkLabel.LinkClicked += new LinkLabelLinkClickedEventHandler(this.privacyLinkLabel_LinkClicked);
      componentResourceManager.ApplyResources((object) this, "$this");
      this.Controls.Add((Control) this.panelUpper);
      this.Controls.Add((Control) this.separator1);
      this.Controls.Add((Control) this.okButton);
      this.Controls.Add((Control) this.cancelButton);
      this.Controls.Add((Control) this.helpButton);
      this.Controls.Add((Control) this.gridPanel);
      this.KeyPreview = true;
      this.Name = nameof (SqlWatsonDialog);
      this.SizeGripStyle = SizeGripStyle.Show;
      this.gridPanel.ResumeLayout(false);
      this.gridPanel.PerformLayout();
      ((ISupportInitialize) this.instanceGrid).EndInit();
      this.panelUpper.ResumeLayout(false);
      this.panelUpper.PerformLayout();
      this.panelTopControls.ResumeLayout(false);
      this.panelOptionsButton.ResumeLayout(false);
      this.ResumeLayout(false);
    }
  }
}
