// Decompiled with JetBrains decompiler
// Type: Microsoft.MediaCenter.TV.Tuners.SafeTunerEventHandler
// Assembly: Microsoft.MediaCenter.TV.Tuners.Interop, Version=6.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 4545DFBD-7834-4511-B0E8-46F2D6BF39B8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Virus.Win32.Xpaj.gena-cd1c6eac0092a3981efe696f4cd6bf740246c6dcb9698d78918623e86d74734f.exe

using ATL;
using System;
using System.Runtime.InteropServices;

namespace Microsoft.MediaCenter.TV.Tuners
{
  internal class SafeTunerEventHandler : MTASafeComWrapper
  {
    public unsafe SafeTunerEventHandler(IntPtr ptr)
      : base((_GUID*) &\u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822, ptr)
    {
    }

    public unsafe SafeTunerEventHandler(ITunerEvents2* pEvents)
      : base((_GUID*) &\u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822, (IUnknown*) pEvents)
    {
    }

    private SafeTunerEventHandler()
    {
    }

    private unsafe CComPtr\u003CITunerEvents2\u003E* TPGetTEPtr(
      [In] CComPtr\u003CITunerEvents2\u003E* obj0)
    {
      uint num1 = 0;
      CComPtr\u003CITunerEvents2\u003E ptrItunerEvents2_1;
      CComPtr\u003CITunerEvents2\u003E* ptrItunerEvents2_2 = SafeComWrapper.GetNativePtr\u003CITunerEvents2\u003E(&ptrItunerEvents2_1, (SafeComWrapper) this);
      // ISSUE: fault handler
      try
      {
        // ISSUE: fault handler
        try
        {
          \u003CModule\u003E.ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bctor\u007D(obj0, ptrItunerEvents2_2);
          num1 = 1U;
        }
        __fault
        {
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) &ptrItunerEvents2_1);
        }
        \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) &ptrItunerEvents2_1);
        return obj0;
      }
      __fault
      {
        if (((int) num1 & 1) != 0)
        {
          uint num2 = num1 & 4294967294U;
          // ISSUE: method pointer
          // ISSUE: cast to a function pointer type
          \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) obj0);
        }
      }
    }

    private void \u007ESafeTunerEventHandler()
    {
    }

    public override unsafe Guid PrimaryIID => *(Guid*) (int) &\u003CModule\u003E._GUID_7eab3a3d_0900_43a5_9189_631ac98ed822;

    public unsafe void TPAdvise(Guid g)
    {
      CComPtr\u003CITunerEvents2\u003E ptrItunerEvents2;
      this.TPGetTEPtr(&ptrItunerEvents2);
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        MarshalHelper.ComException(\u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAdvise(^(int&) ref ptrItunerEvents2 == 0 ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) (^(int&) ref ptrItunerEvents2 - 12), g));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) &ptrItunerEvents2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) &ptrItunerEvents2);
    }

    public unsafe void TPAdvise(Tuner t)
    {
      CComPtr\u003CITunerEvents2\u003E ptrItunerEvents2;
      this.TPGetTEPtr(&ptrItunerEvents2);
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        MarshalHelper.ComException(\u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EAdvise(^(int&) ref ptrItunerEvents2 == 0 ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) (^(int&) ref ptrItunerEvents2 - 12), t));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) &ptrItunerEvents2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) &ptrItunerEvents2);
    }

    public unsafe void TPUnadvise(Tuner t)
    {
      CComPtr\u003CITunerEvents2\u003E ptrItunerEvents2;
      this.TPGetTEPtr(&ptrItunerEvents2);
      // ISSUE: fault handler
      try
      {
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        // ISSUE: cast to a reference type
        // ISSUE: explicit reference operation
        MarshalHelper.ComException(\u003CModule\u003E.Microsoft\u002EMediaCenter\u002ETV\u002ETuners\u002ETPTunerEventHandler\u002EUnadvise(^(int&) ref ptrItunerEvents2 == 0 ? (TPTunerEventHandler*) 0 : (TPTunerEventHandler*) (^(int&) ref ptrItunerEvents2 - 12), t));
      }
      __fault
      {
        // ISSUE: method pointer
        // ISSUE: cast to a function pointer type
        \u003CModule\u003E.___CxxCallUnwindDtor((__FnPtr<void (void*)>) __methodptr(ATL\u002ECComPtr\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D), (void*) &ptrItunerEvents2);
      }
      \u003CModule\u003E.ATL\u002ECComPtrBase\u003CITunerEvents2\u003E\u002E\u007Bdtor\u007D((CComPtrBase\u003CITunerEvents2\u003E*) &ptrItunerEvents2);
    }

    protected override void Dispose([MarshalAs(UnmanagedType.U1)] bool _param1)
    {
      if (_param1)
      {
        try
        {
        }
        finally
        {
          base.Dispose(true);
        }
      }
      else
        base.Dispose(false);
    }
  }
}
