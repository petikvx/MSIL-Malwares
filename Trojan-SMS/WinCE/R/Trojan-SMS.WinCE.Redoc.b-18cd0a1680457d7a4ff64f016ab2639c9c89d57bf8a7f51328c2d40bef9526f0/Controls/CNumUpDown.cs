// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CNumUpDown
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using Dbasic.Other;
using System;
using System.Collections;
using System.Drawing;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CNumUpDown : CControls
  {
    public CNumUpDown(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedNumUpDown control = (CEnhancedNumUpDown) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      if (this.CRunner.htSharedProperties.Contains((object) str))
        return this.CRunner.SharedProperties((Control) control, str, ref place, assign, ref locals);
      switch (str)
      {
        case "value":
          if (!assign)
            return new MethodReturn(place, control.Value.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn1.place;
          control.Value = (Decimal) runReturn1.vDouble;
          return new MethodReturn(place);
        case "minimum":
          if (!assign)
            return new MethodReturn(place, control.Minimum.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn2.place;
          control.Minimum = (Decimal) runReturn2.vDouble;
          return new MethodReturn(place);
        case "maximum":
          if (!assign)
            return new MethodReturn(place, control.Maximum.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn3 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn3.place;
          control.Maximum = (Decimal) runReturn3.vDouble;
          return new MethodReturn(place);
        case "increment":
          if (!assign)
            return new MethodReturn(place, control.Increment.ToString((IFormatProvider) CRunner.cul), 0.0);
          RunReturn runReturn4 = this.CRunner.RunCode(place, false, true, ref locals);
          place = runReturn4.place;
          control.Increment = (Decimal) runReturn4.vDouble;
          return new MethodReturn(place);
        default:
          return new MethodReturn();
      }
    }

    private void AddEvents(CEnhancedNumUpDown num)
    {
      if (!this.CRunner.htSubs.Contains((object) (num.name + "_valuechanged")))
        return;
      num.ValueChanged += new EventHandler(this.ValueChanged);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedNumUpDown cenhancedNumUpDown = (CEnhancedNumUpDown) sender;
      switch (eventName)
      {
        case "valuechanged":
          cenhancedNumUpDown.ValueChanged += new EventHandler(this.ValueChanged);
          break;
      }
    }

    private void ValueChanged(object sender, EventArgs e)
    {
      CEnhancedNumUpDown cenhancedNumUpDown = (CEnhancedNumUpDown) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedNumUpDown.name + "_valuechanged")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedNumUpDown.name
        }
      });
    }

    public void ShortAdd(string s)
    {
      CEnhancedNumUpDown cenhancedNumUpDown = new CEnhancedNumUpDown();
      string FrmName;
      string Name;
      int Left;
      int Top;
      int Width;
      int num;
      int Maximum;
      Color BackColor;
      bool myEnabled;
      bool myVisible;
      CBuildDesigner.NumUpDownGetProperties(s, out FrmName, out Name, out Left, out Top, out Width, out num, out Maximum, out BackColor, out myEnabled, out myVisible);
      cenhancedNumUpDown.name = Name.ToLower(CRunner.cul);
      cenhancedNumUpDown.Left = Left;
      cenhancedNumUpDown.Top = Top;
      cenhancedNumUpDown.Width = Width;
      cenhancedNumUpDown.Maximum = (Decimal) Maximum;
      cenhancedNumUpDown.Value = (Decimal) num;
      cenhancedNumUpDown.BackColor = BackColor;
      cenhancedNumUpDown.Enabled = myEnabled;
      cenhancedNumUpDown.Visible = myVisible;
      this.CRunner.htControls.Add((object) cenhancedNumUpDown.name, (object) new WrapControl((object) cenhancedNumUpDown, (CControls) this));
      ((Control) ((WrapControl) this.CRunner.htControls[(object) FrmName]).control).Controls.Add((Control) cenhancedNumUpDown);
      this.AddEvents(cenhancedNumUpDown);
    }

    public MethodReturn addNumUpDown(Place place, ref Locals locals)
    {
      ++place.WordI;
      Word word = this.CRunner.nextWord(false, ref place);
      string lower1;
      RunReturn runReturn;
      if ((word.KeyWord & CConstants.Immediate) == CConstants.Immediate && this.CRunner.htControls.Contains((object) word.Value.ToLower(CRunner.cul)))
      {
        lower1 = this.CRunner.nextWord(true, ref place).Value.ToLower(CRunner.cul);
      }
      else
      {
        runReturn = this.CRunner.RunCode(place, true, true, ref locals);
        place = runReturn.place;
        lower1 = runReturn.vString.ToLower(CRunner.cul);
      }
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, true, true, ref locals);
      place = runReturn.place;
      string lower2 = runReturn.vString.ToLower(CRunner.cul);
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble1 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble2 = (int) runReturn.vDouble;
      ++place.WordI;
      runReturn = this.CRunner.RunCode(place, false, true, ref locals);
      place = runReturn.place;
      int vDouble3 = (int) runReturn.vDouble;
      ++place.WordI;
      CEnhancedNumUpDown cenhancedNumUpDown = new CEnhancedNumUpDown();
      this.CRunner.htControls.Add((object) lower2, (object) new WrapControl((object) cenhancedNumUpDown, (CControls) this));
      cenhancedNumUpDown.name = lower2;
      cenhancedNumUpDown.Left = vDouble1;
      cenhancedNumUpDown.Top = vDouble2;
      cenhancedNumUpDown.Width = vDouble3;
      cenhancedNumUpDown.Visible = true;
      cenhancedNumUpDown.Value = 0M;
      cenhancedNumUpDown.Maximum = 100M;
      cenhancedNumUpDown.Minimum = 0M;
      ((Control) ((WrapControl) this.CRunner.htControls[(object) lower1]).control).Controls.Add((Control) cenhancedNumUpDown);
      this.AddEvents(cenhancedNumUpDown);
      return new MethodReturn(place);
    }
  }
}
