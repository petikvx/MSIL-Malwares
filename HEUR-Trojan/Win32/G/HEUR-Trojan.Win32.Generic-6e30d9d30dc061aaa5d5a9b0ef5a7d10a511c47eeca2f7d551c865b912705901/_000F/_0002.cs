// Decompiled with JetBrains decompiler
// Type: .
// Assembly: serLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EB10F7D0-661D-4A45-B90F-D464336E900E
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-6e30d9d30dc061aaa5d5a9b0ef5a7d10a511c47eeca2f7d551c865b912705901.exe

using \u0007;
using \u0008;
using \u000E;
using \u000F;
using System;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Threading;
using System.Web.Services.Protocols;

namespace \u000F
{
  internal abstract class \u0002
  {
    private static readonly bool \u0001 = Convert.ToBoolean(\u0001.\u0008.\u0002(5567));
    private static readonly string \u0001 = \u0001.\u0008.\u0002(3423);
    private static \u0002 \u0001;
    private IWebProxy \u0001;
    private EventHandler \u0001;
    private \u0008.\u0007 \u0001;

    [SpecialName]
    public void \u0002([In] EventHandler obj0)
    {
      if (false)
        goto label_4;
      else
        goto label_10;
label_1:
      if (true)
        goto label_11;
label_4:
      EventHandler comparand;
      EventHandler eventHandler1;
      if (true)
      {
        if (eventHandler1 == comparand)
          return;
        goto label_1;
      }
      else
        goto label_11;
label_10:
      EventHandler eventHandler2 = this.\u0001;
      if (true)
      {
        eventHandler1 = eventHandler2;
        goto label_1;
      }
      else
        goto label_1;
label_11:
      EventHandler eventHandler3 = eventHandler1;
      if (true)
        comparand = eventHandler3;
      EventHandler eventHandler4 = comparand + obj0;
      if (true)
        goto label_8;
label_3:
      EventHandler eventHandler5;
      EventHandler eventHandler6 = Interlocked.CompareExchange<EventHandler>(ref this.\u0001, eventHandler5, comparand);
      if (true)
      {
        eventHandler1 = eventHandler6;
        goto label_4;
      }
      else
        goto label_4;
label_8:
      eventHandler5 = eventHandler4;
      goto label_3;
    }

    [SpecialName]
    public void \u0002([In] \u0008.\u0007 obj0)
    {
      if (false)
        goto label_4;
      else
        goto label_10;
label_1:
      if (true)
        goto label_11;
label_4:
      \u0008.\u0007 comparand;
      \u0008.\u0007 obj1;
      if (true)
      {
        if (obj1 == comparand)
          return;
        goto label_1;
      }
      else
        goto label_11;
label_10:
      \u0008.\u0007 obj2 = this.\u0001;
      if (true)
      {
        obj1 = obj2;
        goto label_1;
      }
      else
        goto label_1;
label_11:
      \u0008.\u0007 obj3 = obj1;
      if (true)
        comparand = obj3;
      \u0008.\u0007 obj4 = comparand + obj0;
      if (true)
        goto label_8;
label_3:
      \u0008.\u0007 obj5;
      \u0008.\u0007 obj6 = Interlocked.CompareExchange<\u0008.\u0007>(ref this.\u0001, obj5, comparand);
      if (true)
      {
        obj1 = obj6;
        goto label_4;
      }
      else
        goto label_4;
label_8:
      obj5 = obj4;
      goto label_3;
    }

    protected abstract void \u0002([In] \u0004 obj0);

    protected abstract void \u0002([In] \u0002 obj0);

    protected abstract void \u0002([In] \u0008.\u0006 obj0);

    [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
    public static void \u0002([In] \u0002 obj0)
    {
      if (obj0 == null)
        return;
      \u0002.\u0001 = obj0;
      \u0004\u0004.\u0095\u0002().UnhandledException += new UnhandledExceptionEventHandler(obj0.\u0002);
      \u0097\u0005.\u0091\u0007(new ThreadExceptionEventHandler(obj0.\u0002));
    }

    [SpecialName]
    private static \u0002 \u0002()
    {
      int index;
      Type[] typeArray;
      if (true)
      {
        if (\u0002.\u0001 == null)
        {
          Type[] types = \u009C\u0004.\u0084\u0005().GetTypes();
          if (true)
            goto label_15;
label_2:
          if (true)
          {
            index = 0;
            goto label_12;
          }
          else
            goto label_12;
label_15:
          typeArray = types;
          goto label_2;
        }
        else
          goto label_14;
      }
label_4:
      Type type;
      // ISSUE: type reference
      if ((object) \u0018\u0003.\u007E\u0092\u0003((object) type) == (object) \u0084\u0004.\u008E\u0003(__typeref (\u0002)))
      {
        try
        {
          if (true)
          {
            if (true)
            {
              \u0002.\u0001 = (\u0002) \u0001\u0004.\u008D\u0002(type, true);
              if (\u0002.\u0001 != null)
                goto label_14;
            }
            else
              goto label_14;
          }
          else
            goto label_14;
        }
        catch
        {
        }
      }
label_10:
      int num1 = index;
      int num2 = 1;
label_11:
      int num3 = num1 + num2;
      if (true)
        index = num3;
label_12:
      int num4 = index;
      int length = typeArray.Length;
      if (false)
      {
        num2 = length;
        num1 = num4;
        goto label_11;
      }
      else if (num4 < length)
      {
        object obj = (object) typeArray[index];
        if (true)
          goto label_17;
label_3:
        if ((object) type == null || (object) \u0018\u0003.\u007E\u0092\u0003((object) type) == null)
          goto label_10;
        else
          goto label_4;
label_17:
        type = (Type) obj;
        goto label_3;
      }
label_14:
      return \u0002.\u0001;
    }

    public static void \u0002([In] Exception obj0, [In] object[] obj1)
    {
      if (obj0 != null)
        goto label_10;
label_8:
      \u0002.\u0002(obj0, obj1);
      do
      {
        \u0002.\u0002().\u0002(obj0, false);
      }
      while (false);
      return;
label_10:
      if (obj0 is SecurityException)
      {
        int num;
        for (int index = \u0002.\u0001 == \u0001.\u0008.\u0002(3423) ? 1 : 0; index != 0; index = num)
        {
          num = \u0002.\u0002().\u0002((SecurityException) obj0) ? 1 : 0;
          if (true)
          {
            if (num != 0)
            {
              if (true)
                return;
              goto label_10;
            }
            else
              break;
          }
        }
        goto label_8;
      }
      else
        goto label_8;
    }

    public static Exception \u0002([In] Exception obj0, [In] object[] obj1)
    {
      \u0002.\u0003(obj0, obj1);
      return (Exception) new SoapException(\u0016\u0003.\u007E\u0017\u0002((object) obj0), SoapException.ServerFaultCode);
    }

    public static void \u0003([In] Exception obj0, [In] object[] obj1)
    {
      try
      {
        if ((object) obj0.GetType() == (object) typeof (Exception) && \u0081\u0003.\u008F(\u0016\u0003.\u007E\u0017\u0002((object) obj0), \u0001.\u0008.\u0002(5338)))
          obj0 = \u0099\u0003.\u007E\u0019\u0002((object) obj0);
        else
          \u0002.\u0002(obj0, obj1);
        \u0002.\u0002().\u0002(obj0, true);
      }
      catch
      {
      }
    }

    private void \u0002([In] object obj0, [In] ThreadExceptionEventArgs obj1)
    {
      try
      {
        Exception exception1;
        do
        {
          Exception exception2 = obj1.Exception;
          if (true)
            goto label_7;
label_1:
          continue;
label_7:
          exception1 = exception2;
          goto label_1;
        }
        while (false);
        Type type1 = exception1.GetType();
        if (true)
          goto label_8;
label_3:
        Type type2;
        if (\u0081\u0003.\u008F(\u0016\u0003.\u007E\u0087\u0003((object) type2), \u0001.\u0008.\u0002(5351)) && \u0081\u0003.\u008F(\u0016\u0003.\u007E\u0090\u0003((object) type2), \u0001.\u0008.\u0002(5376)))
        {
          Exception exception3 = (Exception) \u008F\u0004.\u007E\u0099\u0005((object) \u0088\u0004.\u007E\u0095\u0003((object) type2, \u0001.\u0008.\u0002(5421)), (object) exception1);
          if (true)
            exception1 = exception3;
        }
        if (exception1 is SecurityException && \u0081\u0003.\u008F(\u0002.\u0001, \u0001.\u0008.\u0002(3423)) && this.\u0002(exception1 as SecurityException))
          return;
        this.\u0002(exception1, true);
        return;
label_8:
        type2 = type1;
        goto label_3;
      }
      catch
      {
      }
    }

    private void \u0002([In] object obj0, [In] UnhandledExceptionEventArgs obj1)
    {
      try
      {
        if (obj1.ExceptionObject is SecurityException)
        {
          while (true)
          {
            int num = \u0002.\u0001 == \u0001.\u0008.\u0002(3423) ? 1 : 0;
            if (true)
            {
              if (num != 0 && this.\u0002(\u007F\u0003.\u007E\u000F\u0004((object) obj1) as SecurityException))
                num = 5;
              else
                goto label_8;
            }
            if (num != 0)
              break;
          }
          return;
        }
label_8:
        while (\u007F\u0003.\u007E\u000F\u0004((object) obj1) is Exception)
        {
          if (true)
          {
            this.\u0002((Exception) \u007F\u0003.\u007E\u000F\u0004((object) obj1), !\u001F\u0003.\u007E\u0010\u0004((object) obj1));
            break;
          }
        }
      }
      catch
      {
      }
    }

    protected virtual Guid \u0002() => Guid.Empty;

    private bool \u0002([In] SecurityException obj0)
    {
      \u0008.\u0006 obj1 = new \u0008.\u0006(obj0);
      \u0008.\u0006 obj2;
      if (true)
        obj2 = obj1;
      this.\u0002(obj2);
      int num1;
      do
      {
        int num2 = obj2.\u0004() ? 1 : 0;
        while (true)
        {
          if (num2 != 0)
          {
            num1 = 0;
            if (num1 == 0)
            {
              if (false)
                num2 = num1;
              else
                break;
            }
            else
              goto label_6;
          }
          else
            goto label_7;
        }
        return num1 != 0;
label_7:
        if (obj2.\u0003())
          goto label_10;
      }
      while (false);
      goto label_9;
label_6:
      return num1 != 0;
label_9:
      \u0098\u0005.\u0092\u0007();
label_10:
      return true;
    }

    private void \u0002([In] Exception obj0, [In] bool obj1)
    {
      \u0006.\u0006.\u0003(2U);
      Type type1 = obj0.GetType();
      Type type2;
      if (true)
        type2 = type1;
      if (type2.Name == \u0001.\u0008.\u0002(5351) && \u0081\u0003.\u008F(\u0016\u0003.\u007E\u0090\u0003((object) type2), \u0001.\u0008.\u0002(5376)))
        obj0 = (Exception) \u008F\u0004.\u007E\u0099\u0005((object) \u0088\u0004.\u007E\u0095\u0003((object) type2, \u0001.\u0008.\u0002(5421)), (object) obj0);
      if (true)
        goto label_38;
label_3:
      if (obj0 == null)
        return;
      if (obj0 is ThreadAbortException)
        return;
      bool flag;
      try
      {
        \u0007.\u0008 obj2 = new \u0007.\u0008(this.\u0002(), obj0, this.\u0001);
        if (true)
          goto label_18;
label_7:
        \u0007.\u0008 obj3;
        obj3.\u0002(new \u0008.\u0007(this.\u0002));
        obj3.\u0002(new EventHandler(this.\u0002));
        obj3.\u0002(new \u0003(this.\u0002));
        \u0004 obj4 = new \u0004(obj3, obj0);
        if (true)
          goto label_16;
label_8:
        \u0004 obj5;
        if (\u0004.\u0002() != null)
          obj5.\u0002();
        if (!obj1)
        {
          obj5.\u0002(false);
          obj5.\u0003(false);
        }
        else if (\u0002.\u0001)
        {
          obj5.\u0002(false);
          obj5.\u0003(true);
        }
        this.\u0002(obj5);
        int num = !obj5.\u0005() ? 1 : 0;
        if (true)
        {
          flag = num != 0;
          goto label_21;
        }
        else
          goto label_21;
label_16:
        obj5 = obj4;
        goto label_8;
label_18:
        obj3 = obj2;
        goto label_7;
      }
      catch (ThreadAbortException ex)
      {
      }
      catch (Exception ex)
      {
        this.\u0002(new \u0002(ex));
      }
label_21:
      if (!flag)
        return;
      foreach (Assembly assembly in \u0005\u0004.\u007E\u0096\u0002((object) \u0004\u0004.\u0095\u0002()))
      {
        try
        {
          string str = \u0016\u0003.\u007E\u001B\u0005((object) assembly);
          if (\u0087\u0003.\u007E\u0096((object) str, \u0001.\u0008.\u0002(5446)))
          {
            if (\u0087\u0003.\u007E\u009A((object) str, \u0001.\u0008.\u0002(5471)))
            {
              object obj6 = \u0003\u0005.\u007E\u0095\u0005((object) \u0004\u0005.\u007E\u009E\u0005((object) \u008A\u0004.\u007E\u0097\u0003((object) \u0095\u0004.\u007E\u001C\u0005((object) assembly, \u0001.\u0008.\u0002(5504)), \u0001.\u0008.\u0002(5541))), (object) null, (object[]) null);
              object obj7 = \u0003\u0005.\u007E\u0095\u0005((object) \u0086\u0004.\u007E\u0093\u0003((object) \u0018\u0003.\u007E\u0081(obj6), \u0001.\u0008.\u0002(5554), new Type[0]), obj6, (object[]) null);
            }
          }
        }
        catch
        {
        }
        if (false)
          return;
      }
      try
      {
        \u0098\u0005.\u0092\u0007();
        return;
      }
      catch
      {
        try
        {
          \u0016\u0004.\u000E\u0003(0);
          return;
        }
        catch
        {
          return;
        }
      }
label_38:
      flag = true;
      goto label_3;
    }

    private void \u0002([In] object obj0, [In] \u0002 obj1) => this.\u0002(obj1);

    private void \u0002([In] object obj0, [In] EventArgs obj1)
    {
      EventHandler eventHandler1 = this.\u0001;
      EventHandler eventHandler2;
      if (true)
        eventHandler2 = eventHandler1;
      if (eventHandler2 == null)
        return;
      eventHandler2(obj0, obj1);
    }

    private void \u0002([In] object obj0, [In] \u0008.\u0008 obj1)
    {
      \u0008.\u0007 obj2 = this.\u0001;
      \u0008.\u0007 obj3;
      if (true)
        obj3 = obj2;
      if (obj3 == null)
        return;
      obj3(obj0, obj1);
    }
  }
}
