// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.PackOfCards
// Assembly: W2E901dpqsgg43z, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E3EDE543-33A5-3966-9367-08505E2DD4BA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-9a55287be3d6c8a74a0aa6ee3a5ea4e288ba968e44c271c9ea5d2293c8300d07.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Runtime.CompilerServices;
using System.Threading;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class PackOfCards
  {
    public ArrayList Cards;
    public ArrayList LayedCards;

    public event PackOfCards.OnClearEventHandler OnClear
    {
      add
      {
        PackOfCards.OnClearEventHandler clearEventHandler1 = this.OnClearEvent;
label_1:
        PackOfCards.OnClearEventHandler comparand = clearEventHandler1;
label_6:
        int num1 = 9;
        int num2 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(31);
        while (true)
        {
          switch ((num2 ^ 54) + 57)
          {
            case 0:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.add_OnClear);
              num2 = -15;
              continue;
            case 1:
              goto label_6;
            case 2:
              PackOfCards.OnClearEventHandler clearEventHandler2;
              switch (num1)
              {
                case 50:
                  if (clearEventHandler1 == comparand)
                  {
                    num1 = 10;
                    goto label_2;
                  }
                  else
                    goto label_1;
                case 51:
                  clearEventHandler1 = Interlocked.CompareExchange<PackOfCards.OnClearEventHandler>(ref this.OnClearEvent, clearEventHandler2, comparand);
                  num1 = 14;
                  goto label_2;
                case 52:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.Bland);
                  num1 = 8;
                  goto label_2;
                case 53:
                  clearEventHandler2 = comparand + value;
                  num1 = 15;
                  goto label_2;
                case 54:
                  goto label_9;
                default:
                  num2 = -2;
                  continue;
              }
            case 3:
label_2:
              num1 ^= 60;
              break;
          }
          num2 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF1.\uEEF5\uEA0C\uEADA\uE1C9\uE289\uEDEB\uE9AB\uE1F5\uE72E\uE67B\uF500\uE550(30);
        }
label_9:;
      }
      remove
      {
        PackOfCards.OnClearEventHandler clearEventHandler1 = this.OnClearEvent;
label_1:
        PackOfCards.OnClearEventHandler comparand = clearEventHandler1;
label_8:
        int num1 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(11);
        int num2 = 3;
        while (true)
        {
          switch (num2 ^ 61)
          {
            case 59:
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.add_OnClear);
              num2 = 6;
              continue;
            case 60:
              PackOfCards.OnClearEventHandler clearEventHandler2;
              switch (num1 + 49)
              {
                case 0:
                  clearEventHandler1 = Interlocked.CompareExchange<PackOfCards.OnClearEventHandler>(ref this.OnClearEvent, clearEventHandler2, comparand);
                  num1 = -32;
                  goto label_2;
                case 1:
                  if (clearEventHandler1 == comparand)
                  {
                    num1 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(16);
                    goto label_2;
                  }
                  else
                    goto label_1;
                case 2:
                  RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.remove_OnClear);
                  num1 = -31;
                  goto label_2;
                case 3:
                  clearEventHandler2 = comparand - value;
                  num1 = -1;
                  goto label_2;
                case 4:
                  goto label_9;
                default:
                  num2 = 0;
                  continue;
              }
            case 61:
              goto label_8;
            case 62:
label_2:
              num1 ^= 48;
              break;
          }
          num2 = 1;
        }
label_9:;
      }
    }

    public PackOfCards()
    {
label_2:
      int num1 = 14;
      string str;
      while (true)
      {
        switch (num1 ^ 55)
        {
          case 54:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.Bland);
            num1 = 1;
            continue;
          case 55:
            str = "Hjärter";
            num1 = 13;
            continue;
          case 56:
            this.LayedCards = new ArrayList();
            num1 = 0;
            continue;
          case 57:
            this.Cards = new ArrayList();
            num1 = 15;
            continue;
          case 58:
            goto label_7;
          default:
            goto label_2;
        }
      }
label_7:
      int num2 = 1;
      do
      {
        int Number = 1;
label_9:
        this.Cards.Add((object) new Card(str, Number));
label_11:
        int num3 = 3;
        while (true)
        {
          switch (num3 ^ 49)
          {
            case 48:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.add_OnClear);
              num3 = 1;
              continue;
            case 49:
              num3 = 5;
              continue;
            case 50:
              checked { ++Number; }
              num3 = 2;
              continue;
            case 51:
              if (Number > 13)
              {
                num3 = 0;
                continue;
              }
              goto label_9;
            case 52:
              if (Operators.CompareString(str, "Hjärter", false) != 0)
              {
                num3 = 4;
                continue;
              }
              goto label_20;
            case 53:
              goto label_19;
            default:
              goto label_11;
          }
        }
label_19:
        int num4 = 0;
        goto label_21;
label_20:
        num4 = 1;
label_21:
        if (num4 == 0)
        {
          if ((Operators.CompareString(str, "Spader", false) == 0 ? 1 : 0) == 0)
          {
            if ((Operators.CompareString(str, "Ruter", false) == 0 ? 1 : 0) != 0)
              str = "Klöver";
          }
          else
            str = "Ruter";
        }
        else
          str = "Spader";
        checked { ++num2; }
      }
      while (num2 <= 4);
    }

    public void Bland()
    {
      ArrayList c = new ArrayList();
      Random random = new Random();
label_9:
      while ((c.Count >= this.Cards.Count ? 0 : 1) != 0)
      {
        int int32 = Convert.ToInt32(Math.Floor(random.NextDouble() * (double) this.Cards.Count));
        IEnumerator enumerator;
        try
        {
          enumerator = c.GetEnumerator();
          while ((!enumerator.MoveNext() ? 0 : 1) != 0)
          {
            if ((!Operators.ConditionalCompareObjectEqual((object) ((Card) enumerator.Current).Merged, NewLateBinding.LateGet(this.Cards[int32], (Type) null, "Merged", new object[0], (string[]) null, (Type[]) null, (bool[]) null), false) ? 1 : 0) == 0)
              goto label_9;
          }
        }
        finally
        {
          if ((!(enumerator is IDisposable) ? 1 : 0) == 0)
            (enumerator as IDisposable).Dispose();
        }
        c.Add(RuntimeHelpers.GetObjectValue(this.Cards[int32]));
      }
      this.Cards.Clear();
label_16:
      int num1 = \uE847\uECAC\uE5EA\uE594\uE61D\uF865\uF65E\uF025\uEE4F\uF357\uE1B2\uE961.\uEC90\uE830\uED92\uEA5B\uF4EC\uE676\uF441\uE7AB\uE952\uF03A\uEEBD\uEFF1.\uEEF5\uEA0C\uEADA\uE1C9\uE289\uEDEB\uE9AB\uE1F5\uE72E\uE67B\uF500\uE550(30);
      int num2 = 112;
      while (true)
      {
        switch (num2 ^ 49)
        {
          case 62:
            switch (num1 + 59)
            {
              case 0:
                num1 = -16;
                goto label_11;
              case 1:
                num1 = -2;
                goto label_11;
              case 2:
                this.Cards.AddRange((ICollection) c);
                num1 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(31);
                goto label_11;
              case 3:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.\u002Ector);
                num1 = -15;
                goto label_11;
              case 4:
                goto label_18;
              default:
                num2 = 14;
                continue;
            }
          case 63:
            goto label_16;
          case 64:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.Bland);
            num2 = 113;
            continue;
          case 65:
label_11:
            num1 ^= 57;
            break;
        }
        num2 = 15;
      }
label_18:;
    }

    public Card GetNext()
    {
      Card next;
      try
      {
        Card card = (Card) this.Cards[checked (this.Cards.Count - 1)];
label_8:
        int num1 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(19);
        int num2 = 9;
        while (true)
        {
          switch (num2 ^ 50)
          {
            case 56:
              bool flag;
              switch (num1 + 60)
              {
                case 0:
                  this.Cards.Remove((object) card);
                  num1 = -3;
                  goto label_2;
                case 1:
                  if (flag)
                  {
                    num1 = -4;
                    goto label_2;
                  }
                  else
                    goto label_16;
                case 2:
                  flag = this.Cards.Count == 0;
                  num1 = -16;
                  goto label_2;
                case 3:
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (PackOfCards.remove_OnClear);
                  num1 = -14;
                  goto label_2;
                case 4:
                  num1 = Form2.\uE7F6\uEE5A\uF13B\uE62C\uE9E0\uF23D\uEBB4\uF419\uF674\uED40\uE0AF\uE3A4(24);
                  goto label_2;
                case 5:
                  goto label_15;
                default:
                  num2 = 8;
                  continue;
              }
            case 57:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (PackOfCards.remove_OnClear);
              num2 = 11;
              continue;
            case 58:
              goto label_8;
            case 59:
label_2:
              num1 ^= 53;
              break;
          }
          num2 = 10;
        }
label_15:
        int num3 = 0;
        goto label_17;
label_16:
        num3 = 1;
label_17:
        if (num3 == 0)
        {
          // ISSUE: reference to a compiler-generated field
          PackOfCards.OnClearEventHandler onClearEvent = this.OnClearEvent;
          if ((onClearEvent == null ? 1 : 0) == 0)
            onClearEvent();
        }
        next = card;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        next = (Card) null;
        ProjectData.ClearProjectError();
      }
      return next;
    }

    public delegate void OnClearEventHandler();
  }
}
