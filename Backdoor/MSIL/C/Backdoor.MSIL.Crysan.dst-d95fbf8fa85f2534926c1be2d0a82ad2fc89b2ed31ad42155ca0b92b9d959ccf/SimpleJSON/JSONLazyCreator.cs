// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONLazyCreator
// Assembly: MemberAccessExcepti, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 46220647-D1CE-4792-A51F-9B328C1E60FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.MSIL.Crysan.dst-d95fbf8fa85f2534926c1be2d0a82ad2fc89b2ed31ad42155ca0b92b9d959ccf.exe

namespace SimpleJSON
{
  internal class JSONLazyCreator : JSONNode
  {
    private JSONNode m_Node;
    private string m_Key;

    public JSONLazyCreator(JSONNode aNode)
    {
label_1:
      int num1 = -1642305963;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1674221926)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Key = (string) null;
            num1 = (int) num2 * 501212800 ^ -1614824020;
            continue;
          case 2:
            goto label_3;
          case 3:
            this.m_Node = aNode;
            num1 = (int) num2 * -386894990 ^ 2125046705;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public JSONLazyCreator(JSONNode aNode, string aKey)
    {
label_1:
      int num1 = -1579547028;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1233850026)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            this.m_Node = aNode;
            this.m_Key = aKey;
            num1 = (int) num2 * 961564648 ^ 801894905;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    private void Set(JSONNode aVal)
    {
      if (this.m_Key != null)
        goto label_5;
label_1:
      int num1 = -1066325406;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1538690229)) % 5U)
        {
          case 0:
            num1 = (int) num2 * -444217628 ^ 1916530249;
            continue;
          case 1:
            this.m_Node.Add(aVal);
            num1 = (int) num2 * 1335648553 ^ -763784730;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_5;
          default:
            goto label_6;
        }
      }
label_6:
      this.m_Node = (JSONNode) null;
      return;
label_5:
      this.m_Node.Add(this.m_Key, aVal);
      num1 = -2065642695;
      goto label_2;
    }

    public override JSONNode this[int aIndex]
    {
      get => (JSONNode) new JSONLazyCreator((JSONNode) this);
      set
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = -1899704319;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -612754999)) % 3U)
          {
            case 1:
              aVal.Add(value);
              num1 = (int) num2 * -1839541729 ^ 1998085580;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        this.Set((JSONNode) aVal);
      }
    }

    public override JSONNode this[string aKey]
    {
      get => (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
      set
      {
        JSONClass aVal = new JSONClass();
label_1:
        int num1 = 1915627593;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 434443820)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              aVal.Add(aKey, value);
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 1823623966 ^ 1672250272;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public override void Add(JSONNode aItem)
    {
      JSONArray aVal = new JSONArray();
      aVal.Add(aItem);
      this.Set((JSONNode) aVal);
    }

    public override void Add(string aKey, JSONNode aItem)
    {
      JSONClass aVal = new JSONClass();
      aVal.Add(aKey, aItem);
label_1:
      int num1 = -2022300936;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -552015472)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Set((JSONNode) aVal);
            num1 = (int) num2 * 1234485643 ^ 1857124741;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public static bool operator ==(JSONLazyCreator a, object b)
    {
      if (b == null)
      {
label_1:
        uint num;
        switch ((num = (uint) (-1092161729 ^ -862268525)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            return true;
        }
      }
      return (object) a == b;
    }

    public static bool operator !=(JSONLazyCreator a, object b) => !(a == b);

    public override bool Equals(object obj)
    {
      if (obj == null)
      {
label_1:
        uint num;
        switch ((num = (uint) (1551655043 ^ 507968103)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            return true;
        }
      }
      return (object) this == obj;
    }

    public override int GetHashCode() => base.GetHashCode();

    public override string ToString() => "";

    public override string ToString(string aPrefix) => "";

    public override int AsInt
    {
      get
      {
        this.Set((JSONNode) new JSONData(0));
        return 0;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override float AsFloat
    {
      get
      {
        JSONData aVal = new JSONData(0.0f);
label_1:
        int num1 = -1569419331;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1046465835)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * -1658210138 ^ 925629178;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return 0.0f;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override double AsDouble
    {
      get
      {
        this.Set((JSONNode) new JSONData(0.0));
        return 0.0;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override bool AsBool
    {
      get
      {
        this.Set((JSONNode) new JSONData(false));
        return false;
      }
      set => this.Set((JSONNode) new JSONData(value));
    }

    public override JSONArray AsArray
    {
      get
      {
        JSONArray aVal = new JSONArray();
label_1:
        int num1 = 1193405164;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1175914407)) % 3U)
          {
            case 1:
              this.Set((JSONNode) aVal);
              num1 = (int) num2 * 688508141 ^ 1471944731;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return aVal;
      }
    }

    public override JSONClass AsObject
    {
      get
      {
        JSONClass aVal = new JSONClass();
        this.Set((JSONNode) aVal);
        return aVal;
      }
    }
  }
}
