// Decompiled with JetBrains decompiler
// Type: MyApp.Getcountry
// Assembly: CobianRAT, Version=1.0.40.7, Culture=neutral, PublicKeyToken=null
// MVID: E2EA0EB9-E35B-43B8-8108-8D71E6EED121
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\Trojan-Spy.MSIL.Keylogger.cmqq-1f2c145fc77049b9437c9aedfd8332be167246bc270d98c22deca902fc967563.exe

using System.IO;
using System.Net;
using System.Runtime.CompilerServices;

namespace MyApp
{
  public sealed class Getcountry
  {
    public MemoryStream MS;
    private static long Sg3d9ZpGy3;
    private static string[] Kx4dvsxCPg;
    private static string[] u7BduMjZVV;
    private static string[] yaod7CC5J2;

    [MethodImpl(MethodImplOptions.NoInlining)]
    static Getcountry()
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Getcountry(MemoryStream mss)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public Getcountry(string FileLocation)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private long i31dHZjLmp(IPAddress _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private string zI2d3mL1Kt(long _param1)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static MemoryStream FileToMemory(string FileLocation)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LookupCountryCode(IPAddress IPA)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LookupCountryNump(IPAddress IPA)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LookupCountryNump(string IPA)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LookupCountryCode(string IPA)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LookupCountryName(IPAddress addr)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LookupCountryName(string IPA)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private long HnedejATpb(long _param1, int _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private long H72dssVGqa(long _param1, int _param2)
    {
      // ISSUE: unable to decompile the method.
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private long cKmdbP8tXJ(long _param1, long _param2, int _param3)
    {
      // ISSUE: unable to decompile the method.
    }
  }
}
