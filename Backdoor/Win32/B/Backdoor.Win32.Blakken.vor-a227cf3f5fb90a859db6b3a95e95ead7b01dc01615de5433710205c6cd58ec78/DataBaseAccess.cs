// Decompiled with JetBrains decompiler
// Type: ManagerMarket.DataBaseAccess
// Assembly: cDisplayClass310, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8C7A4461-A171-4409-B75B-AB5BE5ABB986
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.04-msil\Backdoor.Win32.Blakken.vor-a227cf3f5fb90a859db6b3a95e95ead7b01dc01615de5433710205c6cd58ec78.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ManagerMarket
{
  public class DataBaseAccess
  {
    protected SqlConnection SqlCon;
    protected SqlCommand SqlCom;
    protected SqlDataReader Sqldreader;
    protected SqlDataAdapter SqlDa;
    protected SqlCommandBuilder SqlComb;
    private string ConnectionString;

    public DataBaseAccess()
    {
      this.ConnectionString = "Data Source=BK-PC;Initial Catalog=manager_ass;Integrated Security=True";
      this.SqlCon = new SqlConnection();
      this.SqlCon.ConnectionString = this.ConnectionString;
    }

    public bool OpenConnection()
    {
      bool flag;
      try
      {
        if (this.SqlCon.State != ConnectionState.Open)
        {
          this.SqlCon.ConnectionString = this.ConnectionString;
          this.SqlCon.Open();
          flag = true;
        }
        else
          flag = false;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) MessageBox.Show("Can not connect to database, please choose a database!", "Connect Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    protected bool CloseConnection()
    {
      bool flag;
      try
      {
        if (this.SqlCon.State != 0)
        {
          this.SqlCon.Close();
          flag = true;
        }
        else
          flag = false;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Close Database");
        flag = false;
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public bool ExecuteNoneQuery(string v_sSqlString, bool ShowErrorMessage = false)
    {
      bool flag;
      if (this.OpenConnection())
      {
        try
        {
          this.SqlCom = new SqlCommand(v_sSqlString, this.SqlCon);
          this.SqlCom.ExecuteNonQuery();
          flag = true;
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          SqlException sqlException = ex;
          if (ShowErrorMessage)
          {
            int num = (int) Interaction.MsgBox((object) sqlException.Message, MsgBoxStyle.Critical, (object) "Execute!");
          }
          flag = false;
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.CloseConnection();
          this.SqlCom.Dispose();
        }
      }
      return flag;
    }

    public SqlDataReader GetDataReader(string v_sSqlString)
    {
      SqlDataReader dataReader;
      try
      {
        if (this.OpenConnection())
        {
          this.SqlCom = new SqlCommand(v_sSqlString, this.SqlCon);
          this.Sqldreader = this.SqlCom.ExecuteReader();
        }
        dataReader = this.Sqldreader;
      }
      catch (SqlException ex)
      {
        ProjectData.SetProjectError((Exception) ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get DataReader");
        dataReader = (SqlDataReader) null;
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.CloseConnection();
        this.SqlCom.Dispose();
      }
      return dataReader;
    }

    public object GetScalar(string v_sSqlString)
    {
      object scalar = (object) null;
      try
      {
        if (this.OpenConnection())
        {
          this.SqlCom = new SqlCommand(v_sSqlString, this.SqlCon);
          scalar = RuntimeHelpers.GetObjectValue(this.SqlCom.ExecuteScalar());
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get Scalar");
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.CloseConnection();
        this.SqlCom.Dispose();
      }
      return scalar;
    }

    public DataTable GetDataTable(string v_sSqlString)
    {
      string tableName = string.Empty;
      try
      {
        tableName = v_sSqlString.Substring(14);
        tableName = tableName.Substring(0, checked (tableName.IndexOf(" ") + 1));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      DataTable dataTable = new DataTable(tableName);
      this.SqlDa = new SqlDataAdapter(v_sSqlString, this.SqlCon);
      if (this.OpenConnection())
      {
        try
        {
          this.SqlDa.Fill(dataTable);
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get Datatable");
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.CloseConnection();
          this.SqlDa.Dispose();
        }
      }
      return dataTable;
    }

    public DataTable GetDataTable(string TableName, string Condition)
    {
      DataTable dataTable = new DataTable(TableName);
      this.SqlDa = new SqlDataAdapter("Select * from " + TableName + " Where " + Condition, this.SqlCon);
      if (this.OpenConnection())
      {
        try
        {
          this.SqlDa.Fill(dataTable);
        }
        catch (SqlException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          int num = (int) Interaction.MsgBox((object) ex.Message, MsgBoxStyle.Critical, (object) "Get DataTable");
          ProjectData.ClearProjectError();
        }
        finally
        {
          this.CloseConnection();
          this.SqlDa.Dispose();
        }
      }
      return dataTable;
    }

    public bool UpdateDataTable(string v_sSqlString, DataTable v_dtable, bool ShowErrorMessage = false)
    {
      this.SqlDa = new SqlDataAdapter();
      this.SqlDa.SelectCommand = new SqlCommand(v_sSqlString, this.SqlCon);
      this.SqlComb = new SqlCommandBuilder(this.SqlDa);
      bool flag;
      try
      {
        if (this.OpenConnection())
        {
          this.SqlDa.Update(v_dtable);
          flag = true;
        }
        else
          flag = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Exception exception = ex;
        if (ShowErrorMessage)
        {
          int num = (int) Interaction.MsgBox((object) exception.Message, MsgBoxStyle.Critical, (object) "Warning");
        }
        flag = false;
        ProjectData.ClearProjectError();
      }
      finally
      {
        this.CloseConnection();
        this.SqlDa.Dispose();
        this.SqlComb.Dispose();
      }
      return flag;
    }

    protected void Dispose()
    {
      this.CloseConnection();
      GC.SuppressFinalize((object) this);
    }
  }
}
