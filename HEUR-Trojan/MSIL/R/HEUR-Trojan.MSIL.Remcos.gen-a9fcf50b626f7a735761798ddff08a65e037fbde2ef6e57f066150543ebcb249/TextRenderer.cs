// Decompiled with JetBrains decompiler
// Type: Vändtia_Live_Server.TextRenderer
// Assembly: yDseEhTG5bnen4G, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4C5C9DF7-D67E-851A-F932-4F9F562A97E6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.MSIL.Remcos.gen-a9fcf50b626f7a735761798ddff08a65e037fbde2ef6e57f066150543ebcb249.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using Vändtia_Live_Server.My;

namespace Vändtia_Live_Server
{
  public class TextRenderer
  {
    private string mDefaultFont;
    private Dictionary<TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F, string> alphabet;

    public TextRenderer(string defaultFont = "Consolas")
    {
label_7:
      int num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
      int num2 = 20;
      while (true)
      {
        switch (num2 ^ 44)
        {
          case 53:
            switch (num1 + 47)
            {
              case 0:
                this.alphabet = new Dictionary<TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F, string>();
                num1 = -3;
                goto label_1;
              case 1:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.get_DefaultFont);
                num1 = -4;
                goto label_1;
              case 2:
                this.mDefaultFont = defaultFont;
                num1 = -6;
                goto label_1;
              case 3:
                goto label_11;
              default:
                num2 = 27;
                continue;
            }
          case 54:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.\uE61C\uE953\uF75D\uE8DD\uEAD5\uEED5\uE3CC\uEB56\uE8C3\uE009\uE83C\uF4B1);
            num2 = 26;
            continue;
          case 55:
            goto label_7;
          case 56:
label_1:
            num1 ^= 46;
            break;
        }
        num2 = 25;
      }
label_11:;
    }

    public string DefaultFont
    {
      get
      {
label_7:
        int num1 = 25;
        int num2 = 4;
        string mDefaultFont;
        while (true)
        {
          switch (num2 ^ 52)
          {
            case 45:
              switch (num1)
              {
                case 53:
                  mDefaultFont = this.mDefaultFont;
                  num1 = 27;
                  goto label_1;
                case 54:
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.\u002Ector);
                  num1 = 26;
                  goto label_1;
                case 55:
                case 56:
                  goto label_10;
                default:
                  num2 = 27;
                  continue;
              }
            case 46:
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.get_DefaultFont);
              num2 = 26;
              continue;
            case 47:
              goto label_7;
            case 48:
label_1:
              num1 ^= 44;
              break;
          }
          num2 = 25;
        }
label_10:
        return mDefaultFont;
      }
    }

    public Size MeassureText(string value, string fontFamily = "", float fontSize = 8f, double kerning = 0.6)
    {
      if ((Operators.CompareString(fontFamily, "", false) != 0 ? 1 : 0) == 0)
        fontFamily = this.mDefaultFont;
      this.\uE61C\uE953\uF75D\uE8DD\uEAD5\uEED5\uE3CC\uEB56\uE8C3\uE009\uE83C\uF4B1(Conversions.ToString(value[0]), fontFamily, fontSize);
label_6:
      int num1 = 8;
      int num2 = -31;
      Size size1;
      while (true)
      {
        switch ((num2 ^ 47) + 53)
        {
          case 0:
            goto label_6;
          case 1:
            TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F obj;
            switch (num1)
            {
              case 52:
                obj = new TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F(value[0], fontFamily, fontSize);
                num1 = 7;
                goto label_3;
              case 53:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.\uE61C\uE953\uF75D\uE8DD\uEAD5\uEED5\uE3CC\uEB56\uE8C3\uE009\uE83C\uF4B1);
                num1 = 5;
                goto label_3;
              case 54:
              case 57:
                goto label_14;
              case 55:
                ref Size local = ref size1;
                Size size2 = obj.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778;
                int width = checked ((int) Math.Round(unchecked ((double) size2.Width * kerning * (double) value.Length + 0.6)));
                size2 = obj.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778;
                int height = size2.Height;
                local = new Size(width, height);
                num1 = 6;
                goto label_3;
              case 56:
                num1 = 4;
                goto label_3;
              default:
                num2 = -28;
                continue;
            }
          case 2:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.MeassureText);
            num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(19);
            continue;
          case 3:
label_3:
            num1 ^= 48;
            break;
        }
        num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(29);
      }
label_14:
      return size1;
    }

    public void Write(
      string value,
      int x,
      int y,
      ConsoleColor fc,
      string fontFamily = "",
      float fontSize = 8f,
      string f = "█",
      double kerning = 0.6)
    {
      if ((Operators.CompareString(fontFamily, "", false) != 0 ? 1 : 0) == 0)
        fontFamily = this.mDefaultFont;
      this.\uE61C\uE953\uF75D\uE8DD\uEAD5\uEED5\uE3CC\uEB56\uE8C3\uE009\uE83C\uF4B1(value, fontFamily, fontSize);
      Console.ForegroundColor = fc;
      try
      {
        int num1 = checked (value.Length - 1);
label_5:
        int num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7F.\uE88C\uF46E\uE801\uEA56\uF2FE\uF668\uF1B6\uE38C\uE50C\uEB39\uF762\uF415.\uF354\uF214\uF8A8\uEDF0\uE733\uF32A\uF55B\uF1F9\uE459\uE072\uF874\uECBB(7);
        while (true)
        {
          int index1;
          TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F key;
          switch ((num2 ^ 45) + 48)
          {
            case 0:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.Write);
              num2 = -3;
              continue;
            case 1:
label_7:
              key = new TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F(value[index1], fontFamily, fontSize);
              num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(11);
              continue;
            case 2:
              index1 = 0;
              num2 = -2;
              continue;
            case 3:
              if (index1 != 0)
              {
                num2 = -4;
                continue;
              }
              break;
            case 4:
label_13:
              int num3 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(5);
              Size size;
              while (true)
              {
                bool flag;
                int num4;
                int num5;
                string str1;
                int num6;
                int num7;
                int num8;
                switch ((num3 ^ 45) + 49)
                {
                  case 0:
                    if (flag)
                    {
                      num3 = -14;
                      continue;
                    }
                    num8 = 1;
                    break;
                  case 1:
                    num4 = checked (size.Height - 1);
                    num3 = -6;
                    continue;
                  case 2:
                    num3 = -13;
                    continue;
                  case 3:
label_18:
                    Console.CursorTop = checked (num5 + y);
                    num3 = -11;
                    continue;
                  case 4:
                    Console.CursorLeft = x;
                    num3 = -4;
                    continue;
                  case 5:
                    // ISSUE: method reference
                    RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.get_DefaultFont);
                    num3 = -7;
                    continue;
                  case 6:
                    str1 = this.alphabet[key];
                    num3 = -10;
                    continue;
                  case 7:
label_22:
                    string str2 = str1;
                    int num9 = num6;
                    int num10 = num5;
                    size = key.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778;
                    int width = size.Width;
                    int num11 = checked (num10 * width);
                    int index2 = checked (num9 + num11);
                    flag = Operators.CompareString(Conversions.ToString(str2[index2]), "1", false) == 0;
                    num3 = -30;
                    continue;
                  case 8:
                    num5 = 0;
                    num3 = -9;
                    continue;
                  case 9:
                    num3 = -2;
                    continue;
                  case 10:
                    num7 = checked (size.Width - 1);
                    num3 = -16;
                    continue;
                  case 11:
                    if (num5 != 0)
                    {
                      num3 = -1;
                      continue;
                    }
                    goto label_41;
                  case 12:
                    size = key.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778;
                    num3 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
                    continue;
                  case 13:
                    if (num6 != 0)
                    {
                      num3 = -5;
                      continue;
                    }
                    goto label_39;
                  case 14:
                    num6 = 0;
                    num3 = -15;
                    continue;
                  case 15:
                    size = key.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778;
                    num3 = -12;
                    continue;
                  case 16:
                    num8 = 0;
                    break;
                  default:
                    goto label_13;
                }
                if (num8 == 0)
                  Console.Write(f);
                else
                  checked { ++Console.CursorLeft; }
                checked { ++num6; }
label_39:
                if (num6 > num7)
                  checked { ++num5; }
                else
                  goto label_22;
label_41:
                if (num5 <= num4)
                  goto label_18;
                else
                  break;
              }
              double num12 = (double) x;
              size = key.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778;
              double num13 = (double) size.Width * kerning;
              x = checked ((int) Math.Round(unchecked (num12 + num13)));
              checked { ++index1; }
              break;
            default:
              goto label_5;
          }
          if (index1 <= num1)
            goto label_7;
          else
            break;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void \uE61C\uE953\uF75D\uE8DD\uEAD5\uEED5\uE3CC\uEB56\uE8C3\uE009\uE83C\uF4B1(
      string _param1,
      string _param2,
      float _param3)
    {
      Point point = new Point(0, 0);
      SolidBrush solidBrush = new SolidBrush(Color.White);
      try
      {
        Font font = new Font(_param2, _param3, FontStyle.Regular);
        try
        {
          Size size = new Size(font.Height, font.Height);
label_4:
          int num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
          while (true)
          {
            switch ((num1 ^ 53) + 44)
            {
              case 0:
                num1 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(44);
                continue;
              case 1:
                checked { --size.Width; }
                num1 = -29;
                continue;
              case 2:
                num1 = -19;
                continue;
              case 3:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.MeassureText);
                num1 = -30;
                continue;
              case 4:
                checked { --size.Height; }
                num1 = -31;
                continue;
              case 5:
                num1 = -17;
                continue;
              case 6:
                goto label_11;
              default:
                goto label_4;
            }
          }
label_11:
          Bitmap bitmap = new Bitmap(size.Width, size.Height, PixelFormat.Format16bppRgb555);
          try
          {
            Rectangle rect = new Rectangle(0, 0, bitmap.Width, bitmap.Height);
            Graphics graphics = Graphics.FromImage((Image) bitmap);
            try
            {
              int num2 = checked (_param1.Length - 1);
              int index = 0;
              if (index == 0)
                goto label_47;
label_14:
              char ch = _param1[index];
              TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F key = new TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F(ch, _param2, _param3);
              if ((!this.alphabet.ContainsKey(key) ? 1 : 0) != 0)
              {
                graphics.Clear(Color.Black);
label_17:
                int num3 = 27;
                string str;
                object Instance;
                while (true)
                {
                  object objectValue1;
                  object Right;
                  int Left1;
                  int num4;
                  object objectValue2;
                  int integer;
                  bool flag;
                  int Left2;
                  int num5;
                  int num6;
                  switch (num3 ^ 46)
                  {
                    case 49:
                      Right = Operators.IntDivideObject(objectValue1, (object) bitmap.Width);
                      num3 = 25;
                      continue;
                    case 50:
                      if (Left1 != 0)
                      {
                        num3 = 29;
                        continue;
                      }
                      goto label_44;
                    case 51:
label_21:
                      num4 = checked (bitmap.Width - 1);
                      num3 = 24;
                      continue;
                    case 52:
                      flag = Marshal.ReadByte(RuntimeHelpers.GetObjectValue(objectValue2), checked (integer + 0)) == (byte) 0;
                      num3 = 23;
                      continue;
                    case 53:
                      num3 = 18;
                      continue;
                    case 54:
                      Left2 = 0;
                      num3 = 22;
                      continue;
                    case 55:
                      str = "";
                      num3 = 20;
                      continue;
                    case 56:
                      if (Left2 != 0)
                      {
                        num3 = 19;
                        continue;
                      }
                      goto label_42;
                    case 57:
                      if (flag)
                      {
                        num3 = 109;
                        continue;
                      }
                      num6 = 1;
                      break;
                    case 58:
                      num5 = checked (bitmap.Height - 1);
                      num3 = 111;
                      continue;
                    case 59:
                      Instance = (object) bitmap.LockBits(rect, ImageLockMode.ReadOnly, bitmap.PixelFormat);
                      num3 = 17;
                      continue;
                    case 60:
                      graphics.DrawString(Conversions.ToString(ch), font, (Brush) solidBrush, (PointF) point);
                      num3 = 16;
                      continue;
                    case 61:
label_33:
                      integer = Conversions.ToInteger(Operators.AddObject(Operators.MultiplyObject((object) Left2, Right), Operators.MultiplyObject((object) Left1, objectValue1)));
                      num3 = 26;
                      continue;
                    case 62:
                      num3 = 21;
                      continue;
                    case 63:
                      objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (Type) null, "Scan0", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
                      num3 = 108;
                      continue;
                    case 64:
                      // ISSUE: method reference
                      RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.Write);
                      num3 = 110;
                      continue;
                    case 65:
                      Left1 = 0;
                      num3 = 28;
                      continue;
                    case 66:
                      objectValue1 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(Instance, (Type) null, "Stride", new object[0], (string[]) null, (Type[]) null, (bool[]) null));
                      num3 = 31;
                      continue;
                    case 67:
                      num6 = 0;
                      break;
                    default:
                      goto label_17;
                  }
                  str = num6 != 0 ? str + "1" : str + "0";
                  checked { ++Left2; }
label_42:
                  if (Left2 > num4)
                  {
                    str += "\r\n";
                    checked { ++Left1; }
                  }
                  else
                    goto label_33;
label_44:
                  if (Left1 <= num5)
                    goto label_21;
                  else
                    break;
                }
                this.alphabet.Add(key, str.Replace("\r\n", ""));
                bitmap.UnlockBits((BitmapData) Instance);
              }
              checked { ++index; }
label_47:
              if (index <= num2)
                goto label_14;
            }
            finally
            {
              if ((graphics == null ? 1 : 0) == 0)
                graphics.Dispose();
            }
          }
          finally
          {
            if ((bitmap == null ? 1 : 0) == 0)
              bitmap.Dispose();
          }
        }
        finally
        {
          if ((font == null ? 1 : 0) == 0)
            font.Dispose();
        }
      }
      finally
      {
        if ((solidBrush == null ? 1 : 0) == 0)
          solidBrush.Dispose();
      }
    }

    private class \uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F : 
      IEquatable<TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F>
    {
      private int hashCode;

      public char \uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE775 { get; }

      public string \uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE776 { get; }

      public float \uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE777 { get; }

      public Size \uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778 { get; }

      public \uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F(
        char _param1,
        string _param2,
        float _param3)
      {
label_2:
        int num1 = 3;
        while (true)
        {
          switch (num1 ^ 49)
          {
            case 47:
              num1 = 5;
              continue;
            case 48:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.Equals);
              num1 = 1;
              continue;
            case 49:
              this.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE776 = _param2;
              num1 = 2;
              continue;
            case 50:
              this.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE775 = _param1;
              num1 = 0;
              continue;
            case 51:
              this.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE777 = _param3;
              num1 = 30;
              continue;
            case 52:
              goto label_8;
            default:
              goto label_2;
          }
        }
label_8:
        SHA256Managed shA256Managed = new SHA256Managed();
        try
        {
          string s = string.Format("{0}{1}{2}", (object) _param1, (object) _param2, (object) _param3);
label_11:
          int num2 = \uF1FC\uEEA7\uF50F\uF2C7\uEBC6\uE0A9\uE31B\uEC49\uE500\uEAD5\uE960\uED7D.\uE123\uEF7F\uEEEB\uE230\uE2DD\uE2EA\uF079\uF000\uF4BC\uF8BE\uF536\uE7F1(45);
          byte[] bytes;
          while (true)
          {
            switch ((num2 ^ 44) + 52)
            {
              case 0:
                bytes = Encoding.Unicode.GetBytes(s);
                num2 = -30;
                continue;
              case 1:
                // ISSUE: method reference
                RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.op_Inequality);
                num2 = -31;
                continue;
              case 2:
                shA256Managed.ComputeHash(bytes);
                num2 = -29;
                continue;
              case 3:
                goto label_18;
              default:
                goto label_11;
            }
          }
        }
        finally
        {
          if ((shA256Managed == null ? 1 : 0) == 0)
            shA256Managed.Dispose();
        }
label_18:
        Font font = new Font(_param2, _param3, FontStyle.Regular);
        try
        {
          this.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE778 = new Size(checked (font.Height - 1), checked (font.Height - 1));
        }
        finally
        {
          if ((font == null ? 1 : 0) == 0)
            font.Dispose();
        }
      }

      public static bool operator ==(
        TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F ct1,
        TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F ct2)
      {
        return (int) ct1.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE775 == (int) ct2.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE775 && (Operators.CompareString(ct1.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE776, ct2.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE776, false) == 0 ? 0 : 1) == 0 && (double) ct1.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE777 == (double) ct2.\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE777;
      }

      public static bool operator !=(
        TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F ct1,
        TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F ct2)
      {
label_6:
        int num1 = 1;
        int num2 = 1;
        bool flag;
        while (true)
        {
          switch (num2 ^ 50)
          {
            case 48:
              switch (num1)
              {
                case 50:
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.GetHashCode);
                  num1 = 7;
                  goto label_1;
                case 51:
                case 53:
                  goto label_10;
                case 52:
                  flag = !(ct1 == ct2);
                  num1 = 6;
                  goto label_1;
                default:
                  num2 = 3;
                  continue;
              }
            case 49:
              goto label_6;
            case 50:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.Equals);
              num2 = 0;
              continue;
            case 51:
label_1:
              num1 ^= 53;
              break;
          }
          num2 = 2;
        }
label_10:
        return flag;
      }

      public override int GetHashCode()
      {
label_6:
        int num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(20);
        int num2 = -26;
        int hashCode;
        while (true)
        {
          switch ((num2 ^ 50) + 47)
          {
            case 0:
              switch (num1 + 50)
              {
                case 0:
                case 3:
                  goto label_10;
                case 1:
                  hashCode = this.hashCode;
                  num1 = -4;
                  goto label_1;
                case 2:
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.op_Equality);
                  num1 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(19);
                  goto label_1;
                default:
                  num2 = -32;
                  continue;
              }
            case 1:
              goto label_6;
            case 2:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.op_Equality);
              num2 = -31;
              continue;
            case 3:
label_1:
              num1 ^= 50;
              break;
          }
          num2 = AsciiSnake.\uE5FF\uF096\uF68D\uF781\uF534\uEBFB\uF0C7\uE1C4\uE26D\uE19D\uE793\uED35(29);
        }
label_10:
        return hashCode;
      }

      public bool Equals(
        TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F other)
      {
label_6:
        int num1 = 29;
        int num2 = 9;
        bool flag;
        while (true)
        {
          switch (num2 ^ 49)
          {
            case 53:
              switch (num1)
              {
                case 47:
                  flag = this == other;
                  num1 = 3;
                  goto label_1;
                case 48:
                  // ISSUE: method reference
                  RuntimeMethodHandle runtimeMethodHandle1 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.get_\uEB76\uEBF8\uF01E\uE8F4\uE779\uE145\uF3C8\uF491\uF52E\uEA97\uED22\uE777);
                  num1 = 2;
                  goto label_1;
                case 49:
                case 50:
                  goto label_10;
                default:
                  num2 = 7;
                  continue;
              }
            case 54:
              goto label_6;
            case 55:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle2 = __methodref (TextRenderer.\uE38C\uEF91\uF8CA\uE302\uF5EF\uF349\uE807\uE3C6\uE1DC\uE10A\uE3DD\uE89F.Equals);
              num2 = 6;
              continue;
            case 56:
label_1:
              num1 ^= 50;
              break;
          }
          num2 = 4;
        }
label_10:
        return flag;
      }
    }
  }
}
