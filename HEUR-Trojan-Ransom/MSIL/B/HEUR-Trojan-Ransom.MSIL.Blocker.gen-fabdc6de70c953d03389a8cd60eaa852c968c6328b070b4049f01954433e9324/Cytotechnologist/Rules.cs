// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: WhenAllPromi, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: EC39505B-F84A-4834-9FA9-F8C42A2FB5BC
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-fabdc6de70c953d03389a8cd60eaa852c968c6328b070b4049f01954433e9324.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = -504150117;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1950857864)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -329189074 ^ -1474768295;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 1200746844 ^ -1095466388;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      Rules rules = new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
label_1:
      int num1 = -447073876;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1438032639)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1703386972 ^ 857463738;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
label_1:
      int num1 = 1341846738;
      float[] numArray;
      int aIndex;
      float[] riskChances;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1412423577)) % 8U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex >= numArray.Length ? 763825148 : (num3 = 97330416);
            continue;
          case 1:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1158653083;
            continue;
          case 2:
            ++aIndex;
            num1 = (int) num2 * -1505343628 ^ -542643015;
            continue;
          case 3:
            numArray = new float[json.Count];
            aIndex = 0;
            num1 = (int) num2 * -19117427 ^ -564788614;
            continue;
          case 4:
            num1 = (int) num2 * -1371073282 ^ 1606468345;
            continue;
          case 5:
            riskChances = numArray;
            num1 = (int) num2 * -668900400 ^ -1866539706;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = 108343565;
      int aIndex1;
      int aIndex2;
      bool flag1;
      bool flag2;
      int num2;
      bool flag3;
      JSONNode jsonNode;
      List<Card> cardList;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 895274300)) % 23U)
        {
          case 0:
            num1 = 2092169845;
            continue;
          case 1:
            num1 = 120663087;
            continue;
          case 2:
            ++aIndex2;
            num1 = (int) num3 * 85069825 ^ -1802192126;
            continue;
          case 3:
            cardList.Add(new Card()
            {
              Impact = flag3 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 80695508;
            continue;
          case 5:
            ++num2;
            num1 = (int) num3 * 1103363421 ^ -412378360;
            continue;
          case 6:
            int num4;
            num1 = num4 = num2 >= jsonNode[aIndex2].AsInt ? 524937186 : (num4 = 1083411764);
            continue;
          case 7:
            num1 = (int) num3 * -138539450 ^ 106964284;
            continue;
          case 8:
            int num5 = flag1 ? -457076995 : (num5 = -1084209563);
            num1 = num5 ^ (int) num3 * 1998391988;
            continue;
          case 9:
            flag1 = aIndex2 < maxImpact * 2;
            num1 = 1699787356;
            continue;
          case 10:
            flag2 = aIndex1 < count;
            num1 = 492224631;
            continue;
          case 11:
            goto label_1;
          case 12:
            flag3 = aIndex2 < maxImpact;
            num1 = (int) num3 * -1488696367 ^ -837229834;
            continue;
          case 13:
            num2 = 0;
            num1 = (int) num3 * 1654855164 ^ -2137925126;
            continue;
          case 14:
            num1 = (int) num3 * -731592576 ^ -1030784198;
            continue;
          case 15:
            num1 = (int) num3 * 1879840533 ^ 1381919886;
            continue;
          case 16:
            ++aIndex1;
            num1 = (int) num3 * 345736809 ^ -594758467;
            continue;
          case 17:
            jsonNode = json[aIndex1];
            num1 = 577924119;
            continue;
          case 18:
            aIndex1 = 0;
            num1 = (int) num3 * 1252049130 ^ -642936322;
            continue;
          case 19:
            int num6 = flag2 ? 479900439 : (num6 = 424291416);
            num1 = num6 ^ (int) num3 * 1284285084;
            continue;
          case 20:
            aIndex2 = 0;
            num1 = (int) num3 * -1919780612 ^ 1993433810;
            continue;
          case 21:
            cardList = new List<Card>();
            num1 = (int) num3 * 1002023087 ^ 1113540126;
            continue;
          case 22:
            array = cardList.ToArray();
            num1 = (int) num3 * 1131671982 ^ -449530555;
            continue;
          default:
            goto label_24;
        }
      }
label_24:
      return array;
    }

    public override string ToString() => Rules.\u206F⁫⁬‎‏‭‌‫​⁪‫⁭⁮‎⁬​⁫⁫⁯⁭‏‫​⁮‏‍‌⁬⁮‎⁪‎‭⁪⁯‬‮​‬‏‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
    {
      (object) this.SprintCount,
      (object) this.MaxImpact,
      (object) this.CardsToString(),
      (object) this.InitialResources,
      (object) this.NormalPlanningCount,
      (object) this.NormalPlanningCost,
      (object) this.OverPlanningCost,
      (object) this.SprintsWonWithoutPlanning,
      (object) this.RiskChancesToString(),
      (object) this.EconomicsAffectsAll,
      (object) this.StayOnSprintMinDiff,
      (object) this.OnlyOneWinner
    });

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -432217250;
      int index;
      Card[] cards;
      Card card1;
      int num2;
      bool flag;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -2053338734)) % 14U)
        {
          case 1:
            str2 = Rules.\u206E⁯‪⁮⁮‫‍‫⁫‬⁪‮⁬‮⁫⁮⁬‬‪⁯⁬⁮⁭‭⁪‭‍‭‎‬⁯‮‫‮‪⁪‪⁭‏‭‮(str1, "\n]");
            num1 = (int) num3 * 663231744 ^ 1619936400;
            continue;
          case 2:
            index = 0;
            num1 = (int) num3 * 1851382665 ^ 1187792986;
            continue;
          case 3:
            card1 = cards[index];
            num1 = -1986910616;
            continue;
          case 4:
            num2 = 0;
            num1 = (int) num3 * -346149038 ^ 1770938152;
            continue;
          case 5:
            goto label_1;
          case 6:
            cards = this.Cards;
            num1 = (int) num3 * -68462302 ^ 1619091956;
            continue;
          case 7:
            num2 = card1.Type;
            num1 = (int) num3 * 2086455720 ^ 1897120941;
            continue;
          case 8:
            int num4;
            num1 = num4 = index >= cards.Length ? -401349175 : (num4 = -1747460933);
            continue;
          case 9:
            ++index;
            num1 = (int) num3 * 1216492019 ^ 1581492831;
            continue;
          case 10:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 572873609 ^ -56371154;
            continue;
          case 11:
            str1 = Rules.\u206E⁯‪⁮⁮‫‍‫⁫‬⁪‮⁬‮⁫⁮⁬‬‪⁯⁬⁮⁭‭⁪‭‍‭‎‬⁯‮‫‮‪⁪‪⁭‏‭‮(str1, "\n\t");
            num1 = (int) num3 * -1881900218 ^ 675180871;
            continue;
          case 12:
            int num5 = !flag ? -372391965 : (num5 = -146311517);
            num1 = num5 ^ (int) num3 * 1876465521;
            continue;
          case 13:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206A‏⁬‫‮‍‎‪⁫​​⁫‪‌⁮⁪‌‮⁮⁮⁯‬⁪‏‏‫⁭‎‍‎‫⁭‪⁮⁬‫‫⁪‌‫‮((object) card2) : (string) null;
            str1 = Rules.\u202E‍‌⁯‌‮⁫‎⁫⁮‌‏‮‌‫⁫⁫‪⁪‬‌⁮⁫‭‮‍‮‍‭⁭‎‎​​‮‍‍⁪⁫‎‮(str3, str4, " ");
            num1 = -117570561;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -1953503435;
      int index;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -794828692)) % 9U)
        {
          case 1:
            int num3 = flag ? -1953608986 : (num3 = -2113040436);
            num1 = num3 ^ (int) num2 * -1940065893;
            continue;
          case 2:
            num1 = (int) num2 * -250548138 ^ -1123932660;
            continue;
          case 3:
            str1 = Rules.\u202E‍‌⁯‌‮⁫‎⁫⁮‌‏‮‌‫⁫⁫‪⁪‬‌⁮⁫‭‮‍‮‍‭⁭‎‎​​‮‍‍⁪⁫‎‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u202C‬‍⁪​‬‭‌‎‭⁪⁮⁬⁬‏‬‬‮‭‌‮‬‬‫‮⁫‪​‎​​​‭‫‮‮⁪‫⁯‫‮()));
            ++index;
            num1 = -1680023072;
            continue;
          case 4:
            flag = index < this.RiskChances.Length;
            num1 = -1989716596;
            continue;
          case 5:
            str1 = Rules.\u206E⁯‪⁮⁮‫‍‫⁫‬⁪‮⁬‮⁫⁮⁬‬‪⁯⁬⁮⁭‭⁪‭‍‭‎‬⁯‮‫‮‪⁪‪⁭‏‭‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u202C‬‍⁪​‬‭‌‎‭⁪⁮⁬⁬‏‬‬‮‭‌‮‬‬‫‮⁫‪​‎​​​‭‫‮‮⁪‫⁯‫‮()));
            index = 1;
            num1 = (int) num2 * -1185525519 ^ 1603121223;
            continue;
          case 6:
            str2 = Rules.\u206E⁯‪⁮⁮‫‍‫⁫‬⁪‮⁬‮⁫⁮⁬‬‪⁯⁬⁮⁭‭⁪‭‍‭‎‬⁯‮‫‮‪⁪‪⁭‏‭‮(str1, " ]");
            num1 = (int) num2 * -1237213468 ^ 2126410321;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * -2051948018 ^ -2029571259;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u206F⁫⁬‎‏‭‌‫​⁪‫⁭⁮‎⁬​⁫⁫⁯⁭‏‫​⁮‏‍‌⁬⁮‎⁪‎‭⁪⁯‬‮​‬‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u206E⁯‪⁮⁮‫‍‫⁫‬⁪‮⁬‮⁫⁮⁬‬‪⁯⁬⁮⁭‭⁪‭‍‭‎‬⁯‮‫‮‪⁪‪⁭‏‭‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206A‏⁬‫‮‍‎‪⁫​​⁫‪‌⁮⁪‌‮⁮⁮⁯‬⁪‏‏‫⁭‎‍‎‫⁭‪⁮⁬‫‫⁪‌‫‮([In] object obj0) => obj0.ToString();

    static string \u202E‍‌⁯‌‮⁫‎⁫⁮‌‏‮‌‫⁫⁫‪⁪‬‌⁮⁫‭‮‍‮‍‭⁭‎‎​​‮‍‍⁪⁫‎‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u202C‬‍⁪​‬‭‌‎‭⁪⁮⁬⁬‏‬‬‮‭‌‮‬‬‫‮⁫‪​‎​​​‭‫‮‮⁪‫⁯‫‮() => CultureInfo.InvariantCulture;
  }
}
