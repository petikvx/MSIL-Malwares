// Decompiled with JetBrains decompiler
// Type: SmartAssembly.HouseOfCards.Strings
// Assembly: Intel(R) GFX, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CC091627-EE5B-4936-A09E-8A0DFCC67467
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ianl-aa5167e6e06a959ea93b440dce1e8d49463422ca45b543de0cfc4944c63e3419.exe

using \u0001;
using SmartAssembly.Delegates;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace SmartAssembly.HouseOfCards
{
  [\u0002]
  [\u0001.\u0001]
  public static class Strings
  {
    [\u0002]
    [\u0001.\u0001]
    public static void CreateGetStringDelegate([In] Type obj0)
    {
      foreach (FieldInfo field in obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField))
      {
        try
        {
          if ((object) field.FieldType == (object) typeof (GetString))
          {
            DynamicMethod dynamicMethod = new DynamicMethod(string.Empty, typeof (string), new Type[1]
            {
              typeof (int)
            }, obj0.Module, true);
            ILGenerator ilGenerator = dynamicMethod.GetILGenerator();
            ilGenerator.Emit(OpCodes.Ldarg_0);
            foreach (MethodInfo method in typeof (SmartAssembly.StringsEncoding.Strings).GetMethods(BindingFlags.Static | BindingFlags.Public))
            {
              if ((object) method.ReturnType == (object) typeof (string))
              {
                ilGenerator.Emit(OpCodes.Ldc_I4, field.MetadataToken & 16777215);
                ilGenerator.Emit(OpCodes.Sub);
                ilGenerator.Emit(OpCodes.Call, method);
                break;
              }
            }
            ilGenerator.Emit(OpCodes.Ret);
            field.SetValue((object) null, (object) dynamicMethod.CreateDelegate(typeof (GetString)));
            break;
          }
        }
        catch
        {
        }
      }
    }
  }
}
