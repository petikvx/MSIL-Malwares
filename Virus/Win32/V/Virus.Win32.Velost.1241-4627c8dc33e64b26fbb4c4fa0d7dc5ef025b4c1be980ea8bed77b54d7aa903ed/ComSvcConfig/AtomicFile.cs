// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.AtomicFile
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.IO;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class AtomicFile
  {
    private bool prepared;
    private string originalFileName;
    private bool originalFileExists;
    private string tempFileName;
    private string backupOfOriginalFileName;
    private bool deleteOriginalFile;

    public string OriginalFileName => this.originalFileName;

    public bool OriginalFileExists => this.originalFileExists;

    public AtomicFile(string fileName)
    {
      this.originalFileName = fileName;
      this.originalFileExists = File.Exists(this.originalFileName);
      this.tempFileName = (string) null;
      this.backupOfOriginalFileName = (string) null;
      this.deleteOriginalFile = false;
      this.prepared = false;
    }

    public bool CurrentExists() => this.tempFileName != null || this.originalFileExists;

    public void Delete()
    {
      if (this.tempFileName != null)
        throw new InvalidOperationException();
      if (!this.originalFileExists)
        throw new InvalidOperationException();
      this.deleteOriginalFile = true;
    }

    public string GetCurrentFileName(bool readOnly)
    {
      if (this.deleteOriginalFile)
        throw new InvalidOperationException();
      if (this.tempFileName != null)
        return this.tempFileName;
      if (this.originalFileExists)
      {
        if (readOnly)
          return this.originalFileName;
        this.tempFileName = this.GetTempFileName();
        File.Copy(this.originalFileName, this.tempFileName);
        return this.tempFileName;
      }
      if (readOnly)
        return (string) null;
      this.tempFileName = this.GetTempFileName();
      return this.tempFileName;
    }

    public bool HasBeenModified()
    {
      if (this.tempFileName != null)
        return true;
      return this.originalFileExists && this.deleteOriginalFile;
    }

    public void Prepare()
    {
      if (this.tempFileName != null)
      {
        if (this.originalFileExists)
        {
          this.backupOfOriginalFileName = this.GetTempFileName();
          File.Copy(this.originalFileName, this.backupOfOriginalFileName);
          AtomicFile.SafeDeleteFile(this.originalFileName);
        }
        File.Copy(this.tempFileName, this.originalFileName);
        AtomicFile.SafeDeleteFile(this.tempFileName);
      }
      else if (this.deleteOriginalFile)
      {
        this.backupOfOriginalFileName = this.GetTempFileName();
        File.Copy(this.originalFileName, this.backupOfOriginalFileName);
        AtomicFile.SafeDeleteFile(this.originalFileName);
      }
      this.prepared = true;
    }

    public void Commit()
    {
      if (!this.prepared)
        throw new InvalidOperationException();
      AtomicFile.SafeDeleteFile(this.backupOfOriginalFileName);
    }

    public void Abort()
    {
      if (this.originalFileExists)
      {
        if (this.backupOfOriginalFileName != null && File.Exists(this.backupOfOriginalFileName))
        {
          AtomicFile.SafeDeleteFile(this.originalFileName);
          File.Copy(this.backupOfOriginalFileName, this.originalFileName);
        }
      }
      else
        AtomicFile.SafeDeleteFile(this.originalFileName);
      AtomicFile.SafeDeleteFile(this.backupOfOriginalFileName);
      AtomicFile.SafeDeleteFile(this.tempFileName);
    }

    internal static void SafeDeleteFile(string fileName)
    {
      if (string.IsNullOrEmpty(fileName) || !File.Exists(fileName))
        return;
      File.Delete(fileName);
    }

    private string GetTempFileName() => Path.Combine(Path.GetTempPath(), Path.GetRandomFileName());
  }
}
