// Decompiled with JetBrains decompiler
// Type: AutoJack.Controller.GameController
// Assembly: ComAliasNameAttrib, Version=537.36.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B820B6E9-23AF-4643-975D-980B086C72E1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-0b37275104e988e90c25a836760e67a665acd79fa7f08899ccef66ad899ffdb0.exe

using AutoJack.common;
using AutoJack.Model;
using AutoJack.View;
using System;

namespace AutoJack.Controller
{
  public class GameController
  {
    internal GameCallback Callback = new GameCallback();

    public GameView GameView { get; }

    public Game Game { get; }

    public GameController(User User)
    {
      Machine Machine = new Machine();
      this.Game = new Game(new Player(User.Id, User.Name, User.Balance, User.Winstreak, User.WinCount, User.LoseCount, User.Games, User.Owing, User.AverageBet, User.MaxBet, User.MinBet, User.LastPlay, User.CurrentStreak), Machine);
      this.Game.Deck = this.Callback.PrepareDeck();
      this.GameView = new GameView(this);
    }

    public void UpdateLogs(string newLog)
    {
      this.Game.Logs += newLog;
      this.GameView.SetLogText(this.Game.Logs);
    }

    public void StartGame()
    {
      this.GameView.Show();
      this.GameView.SetLabels(this.Game);
      this.UpdateLogs("Game started;");
    }

    ~GameController()
    {
    }

    public void BeginGame()
    {
      new DeckShuffle().Show();
      this.Game.ShouldWarn = true;
      this.Game.Deck = this.Callback.ShuffleDeck(this.Game.Deck);
      this.GameView.SetLabels(this.Game);
      this.GameView.ToggleButtonsOnGameBegin();
      this.UpdateLogs("Deck shuffled. Wait for bet;");
    }

    public void TakeBet()
    {
      BetController betController = new BetController(this);
      this.GameView.DisableQuit();
      this.GameView.DisableBetButtons();
      betController.TakeBet();
      this.UpdateLogs("Player set bet;");
    }

    public void AutoSetBetAsync()
    {
      Random random = new Random();
      this.Game.Player.Bet = this.Game.Player.Balance <= 0 ? random.Next(100, 1001) : random.Next((int) ((double) this.Game.Player.Balance * 0.05), (int) ((double) this.Game.Player.Balance * 0.25));
      this.UpdateLogs("Player set bet auto;");
    }

    public void ContinueGameAsync(bool context)
    {
      this.GameView.EnableQuit();
      if (context)
      {
        this.GameView.DisableBetButtons();
        this.SetMachineBet();
        this.GameView.EnableSurrender();
        ++this.Game.TurnWho;
        this.GameView.SetLabels(this.Game);
        this.GameView.EnableHitAndDoubleButtons();
        this.GameView.ToogleGameButtonsState(this.Game);
        this.UpdateLogs("Deal cards 1 hand. Turn: Player;");
      }
      else
        this.GameView.EnableBetButtons();
    }

    private void SetMachineBet()
    {
      this.Game.Machine.Bet = (int) ((double) this.Game.Player.Bet * (1.0 + Utility.RandDoubleInRange(-0.15, 0.15)));
      this.UpdateLogs("House set bet.;");
    }

    public void ControlButtonsClick(string ClickedButton)
    {
      string str = ClickedButton;
      if (!(str == "StandButton"))
      {
        if (!(str == "HitButton"))
        {
          if (!(str == "DoubleButton"))
          {
            if (!(str == "SplitButton"))
            {
              if (str == "FlipButton")
              {
                this.UpdateLogs("Player flip hand(s);");
                this.Callback.FlipPlayerHands(this);
              }
              else
                this.Game.Winner = "Machine";
            }
            else
            {
              this.UpdateLogs("Player split hand;");
              this.Callback.SplitPlayerHandThenDraw(this);
            }
          }
          else
          {
            this.UpdateLogs("Player double bet;");
            this.Callback.DoubleBetThenFlipHands(this);
          }
        }
        else
        {
          this.UpdateLogs("Player hit card;");
          this.Callback.AllowDraw1Card(this);
        }
      }
      else
      {
        this.UpdateLogs("Player stand. Turn: House;");
        this.Callback.PassPlayerTurn(this);
      }
      if (!(this.Game.Winner != string.Empty))
        return;
      this.Callback.CalculateBalance(this.Game);
    }
  }
}
