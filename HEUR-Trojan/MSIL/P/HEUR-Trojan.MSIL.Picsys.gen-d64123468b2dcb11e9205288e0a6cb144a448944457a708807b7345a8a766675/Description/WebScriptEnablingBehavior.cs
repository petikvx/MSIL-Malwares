// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Description.WebScriptEnablingBehavior
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Globalization;
using System.Net;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Json;
using System.Security;
using System.ServiceModel.Channels;
using System.ServiceModel.Dispatcher;
using System.ServiceModel.Web;
using System.Xml;

namespace System.ServiceModel.Description
{
  [ComVisible(false)]
  public sealed class WebScriptEnablingBehavior : WebHttpBehavior
  {
    private static readonly DataContractJsonSerializer jsonFaultSerializer = new DataContractJsonSerializer(typeof (JsonFaultDetail));
    private static readonly WebMessageBodyStyle webScriptBodyStyle = WebMessageBodyStyle.WrappedRequest;
    private static readonly WebMessageFormat webScriptDefaultMessageFormat = WebMessageFormat.Json;
    private const int MaxMetadataEndpointBufferSize = 2048;
    private WebMessageFormat requestMessageFormat = WebScriptEnablingBehavior.webScriptDefaultMessageFormat;
    private WebMessageFormat responseMessageFormat = WebScriptEnablingBehavior.webScriptDefaultMessageFormat;

    public override WebMessageBodyStyle DefaultBodyStyle
    {
      get => WebScriptEnablingBehavior.webScriptBodyStyle;
      set
      {
        if (value != WebScriptEnablingBehavior.webScriptBodyStyle)
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.BodyStyleNotSupportedByWebScript, (object) value, (object) this.GetType().Name, (object) WebScriptEnablingBehavior.webScriptBodyStyle)));
      }
    }

    public override WebMessageFormat DefaultOutgoingRequestFormat
    {
      get => this.requestMessageFormat;
      set => this.requestMessageFormat = WebMessageFormatHelper.IsDefined(value) ? value : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
    }

    public override WebMessageFormat DefaultOutgoingResponseFormat
    {
      get => this.responseMessageFormat;
      set => this.responseMessageFormat = WebMessageFormatHelper.IsDefined(value) ? value : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new ArgumentOutOfRangeException(nameof (value)));
    }

    public override bool HelpEnabled
    {
      get => false;
      set
      {
        if (value)
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.HelpPageNotSupportedInScripts)));
      }
    }

    public override bool AutomaticFormatSelectionEnabled
    {
      get => false;
      set
      {
        if (value)
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.AutomaticFormatSelectionNotSupportedInScripts)));
      }
    }

    public override bool FaultExceptionEnabled
    {
      get => false;
      set
      {
        if (value)
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.FaultExceptionEnabledNotSupportedInScripts)));
      }
    }

    public override void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime)
    {
      base.ApplyClientBehavior(endpoint, clientRuntime);
      clientRuntime.MessageInspectors.Add((IClientMessageInspector) new WebScriptEnablingBehavior.JsonClientMessageInspector());
    }

    public override void ApplyDispatchBehavior(
      ServiceEndpoint endpoint,
      EndpointDispatcher endpointDispatcher)
    {
      base.ApplyDispatchBehavior(endpoint, endpointDispatcher);
      try
      {
        this.AddMetadataEndpoint(endpoint, endpointDispatcher, false);
        this.AddMetadataEndpoint(endpoint, endpointDispatcher, true);
      }
      catch (XmlException ex)
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.InvalidXmlCharactersInNameUsedWithPOSTMethod, (object) string.Empty, (object) string.Empty, (object) string.Empty), (Exception) ex));
      }
    }

    public override void Validate(ServiceEndpoint endpoint)
    {
      base.Validate(endpoint);
      foreach (OperationDescription operation in (Collection<OperationDescription>) endpoint.Contract.Operations)
      {
        // ISSUE: reference to a compiler-generated method
        string str = operation.Behaviors.Find<XmlSerializerOperationBehavior>() == null ? WebHttpBehavior.GetWebMethod(operation) : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebScriptNotSupportedForXmlSerializerFormat, (object) typeof (XmlSerializerFormatAttribute).Name, (object) this.GetType().ToString())));
        if (str != "GET" && str != "POST")
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebScriptInvalidHttpRequestMethod, (object) operation.Name, (object) endpoint.Contract.Name, (object) str, (object) this.GetType().ToString())));
        }
        WebGetAttribute webGetAttribute = operation.Behaviors.Find<WebGetAttribute>();
        if (webGetAttribute != null && webGetAttribute.UriTemplate != null)
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebScriptNotSupportedForXmlSerializerFormat, (object) typeof (UriTemplate).Name, (object) this.GetType().ToString())));
        }
        WebInvokeAttribute webInvokeAttribute = operation.Behaviors.Find<WebInvokeAttribute>();
        if (webInvokeAttribute != null && webInvokeAttribute.UriTemplate != null)
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebScriptNotSupportedForXmlSerializerFormat, (object) typeof (UriTemplate).Name, (object) this.GetType().ToString())));
        }
        WebMessageBodyStyle bodyStyle = this.GetBodyStyle(operation);
        if (bodyStyle != WebScriptEnablingBehavior.webScriptBodyStyle)
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.BodyStyleNotSupportedByWebScript, (object) bodyStyle, (object) this.GetType().Name, (object) WebScriptEnablingBehavior.webScriptBodyStyle)));
        }
        foreach (MessageDescription message in (Collection<MessageDescription>) operation.Messages)
        {
          if (!message.IsTypedMessage && message.Direction == MessageDirection.Output && message.Body.Parts.Count > 0)
          {
            // ISSUE: reference to a compiler-generated method
            throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.WebScriptOutRefOperationsNotSupported, (object) operation.Name, (object) endpoint.Contract.Name)));
          }
        }
      }
    }

    internal override DataContractJsonSerializerOperationFormatter CreateDataContractJsonSerializerOperationFormatter(
      OperationDescription od,
      DataContractSerializerOperationBehavior dcsob,
      bool isWrapped)
    {
      return new DataContractJsonSerializerOperationFormatter(od, dcsob.MaxItemsInObjectGraph, dcsob.IgnoreExtensionDataObject, dcsob.DataContractSurrogate, isWrapped, true, this.JavascriptCallbackParameterName);
    }

    internal override string GetWmiTypeName() => nameof (WebScriptEnablingBehavior);

    internal override bool UseBareReplyFormatter(
      WebMessageBodyStyle style,
      OperationDescription operationDescription,
      WebMessageFormat responseFormat,
      out System.Type parameterType)
    {
      if (responseFormat != WebMessageFormat.Json)
        return base.UseBareReplyFormatter(style, operationDescription, responseFormat, out parameterType);
      parameterType = (System.Type) null;
      return false;
    }

    protected override void AddClientErrorInspector(
      ServiceEndpoint endpoint,
      ClientRuntime clientRuntime)
    {
      clientRuntime.MessageInspectors.Add((IClientMessageInspector) new WebScriptEnablingBehavior.JsonClientMessageInspector());
    }

    protected override void AddServerErrorHandlers(
      ServiceEndpoint endpoint,
      EndpointDispatcher endpointDispatcher)
    {
      if (endpointDispatcher.ChannelDispatcher == null)
      {
        // ISSUE: reference to a compiler-generated method
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgument(nameof (endpointDispatcher), SR2.GetString(SR2.ChannelDispatcherMustBePresent));
      }
      endpointDispatcher.ChannelDispatcher.ErrorHandlers.Add((IErrorHandler) new WebScriptEnablingBehavior.JsonErrorHandler(endpoint, endpointDispatcher.ChannelDispatcher.IncludeExceptionDetailInFaults));
    }

    protected override QueryStringConverter GetQueryStringConverter(
      OperationDescription operationDescription)
    {
      return (QueryStringConverter) new JsonQueryStringConverter(operationDescription);
    }

    private void AddMetadataEndpoint(
      ServiceEndpoint endpoint,
      EndpointDispatcher endpointDispatcher,
      bool debugMode)
    {
      Uri uri = endpoint.Address.Uri;
      if (uri == (Uri) null)
        return;
      ServiceHostBase host = endpointDispatcher.ChannelDispatcher.Host;
      UriBuilder uriBuilder = new UriBuilder(uri);
      uriBuilder.Path += uriBuilder.Path.EndsWith("/", StringComparison.OrdinalIgnoreCase) ? WebScriptClientGenerator.GetMetadataEndpointSuffix(debugMode) : "/" + WebScriptClientGenerator.GetMetadataEndpointSuffix(debugMode);
      EndpointAddress address = new EndpointAddress(uriBuilder.Uri, new AddressHeader[0]);
      foreach (ServiceEndpoint endpoint1 in (Collection<ServiceEndpoint>) host.Description.Endpoints)
      {
        if (EndpointAddress.UriEquals(endpoint1.Address.Uri, address.Uri, true, false))
        {
          // ISSUE: reference to a compiler-generated method
          throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.JsonNoEndpointAtMetadataAddress, (object) this.GetType().ToString(), (object) endpoint1.Address, (object) endpoint1.Name, (object) host.Description.Name)));
        }
      }
      HttpTransportBindingElement transportBindingElement1 = endpoint.Binding.CreateBindingElements().Find<HttpTransportBindingElement>();
      HttpTransportBindingElement transportBindingElement2 = transportBindingElement1 == null ? (!(uri.Scheme == "https") ? new HttpTransportBindingElement() : (HttpTransportBindingElement) new HttpsTransportBindingElement()) : (HttpTransportBindingElement) transportBindingElement1.Clone();
      transportBindingElement2.HostNameComparisonMode = HostNameComparisonMode.StrongWildcard;
      transportBindingElement2.TransferMode = TransferMode.Buffered;
      transportBindingElement2.MaxBufferSize = 2048;
      transportBindingElement2.MaxReceivedMessageSize = 2048L;
      Binding binding = (Binding) new CustomBinding(new BindingElement[2]
      {
        (BindingElement) new WebScriptMetadataMessageEncodingBindingElement(),
        (BindingElement) transportBindingElement2
      });
      BindingParameterCollection bindingParameters = host.GetBindingParameters(endpoint);
      ContractDescription contract = ContractDescription.GetContract(typeof (ServiceMetadataExtension.IHttpGetMetadata));
      OperationDescription operation = contract.Operations[0];
      EndpointDispatcher endpointDispatcher1 = new EndpointDispatcher(address, contract.Name, contract.Namespace);
      endpointDispatcher1.DispatchRuntime.Operations.Add(new DispatchOperation(endpointDispatcher1.DispatchRuntime, operation.Name, operation.Messages[0].Action, operation.Messages[1].Action)
      {
        Formatter = (IDispatchMessageFormatter) new WebScriptMetadataFormatter(),
        Invoker = (IOperationInvoker) new SyncMethodInvoker(operation.SyncMethod)
      });
      endpointDispatcher1.DispatchRuntime.SingletonInstanceContext = new InstanceContext(host, (object) new WebScriptClientGenerator(endpoint, debugMode, !string.IsNullOrEmpty(this.JavascriptCallbackParameterName)));
      endpointDispatcher1.DispatchRuntime.InstanceContextProvider = (IInstanceContextProvider) new SingletonInstanceContextProvider(endpointDispatcher1.DispatchRuntime);
      IChannelListener<IReplyChannel> listener = (IChannelListener<IReplyChannel>) null;
      if (binding.CanBuildChannelListener<IReplyChannel>(bindingParameters))
        listener = binding.BuildChannelListener<IReplyChannel>(address.Uri, bindingParameters);
      host.ChannelDispatchers.Add((ChannelDispatcherBase) new ChannelDispatcher((IChannelListener) listener)
      {
        MessageVersion = MessageVersion.None,
        Endpoints = {
          endpointDispatcher1
        }
      });
    }

    private class JsonClientMessageInspector : WebFaultClientMessageInspector
    {
      public override void AfterReceiveReply(ref Message reply, object correlationState)
      {
        bool flag = true;
        if (reply != null)
        {
          object property = reply.Properties[HttpResponseMessageProperty.Name];
          if (property != null && ((HttpResponseMessageProperty) property).Headers["jsonerror"] == "true")
          {
            XmlDictionaryReader readerAtBodyContents = reply.GetReaderAtBodyContents();
            JsonFaultDetail jsonFaultDetail = WebScriptEnablingBehavior.jsonFaultSerializer.ReadObject(readerAtBodyContents) as JsonFaultDetail;
            FaultCode receiverFaultCode = FaultCode.CreateReceiverFaultCode(new FaultCode("InternalServiceFault", "http://schemas.microsoft.com/net/2005/12/windowscommunicationfoundation/dispatcher"));
            if (jsonFaultDetail == null)
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new FaultException(MessageFault.CreateFault(receiverFaultCode, System.ServiceModel.SR.GetString("SFxInternalServerError"))));
            if (jsonFaultDetail.ExceptionDetail != null)
              throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new FaultException<ExceptionDetail>(jsonFaultDetail.ExceptionDetail, jsonFaultDetail.Message, receiverFaultCode));
            throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new FaultException(MessageFault.CreateFault(receiverFaultCode, jsonFaultDetail.Message)));
          }
        }
        if (!flag)
          return;
        base.AfterReceiveReply(ref reply, correlationState);
      }
    }

    private class JsonErrorHandler : IErrorHandler
    {
      private bool includeExceptionDetailInFaults;
      private string outgoingContentType;

      public JsonErrorHandler(ServiceEndpoint endpoint, bool includeExceptionDetailInFaults)
      {
        this.outgoingContentType = JsonMessageEncoderFactory.GetContentType(endpoint.Binding.CreateBindingElements().Find<WebMessageEncodingBindingElement>());
        this.includeExceptionDetailInFaults = includeExceptionDetailInFaults;
      }

      public bool HandleError(Exception error) => false;

      public void ProvideFault(Exception error, MessageVersion version, ref Message fault)
      {
        HttpResponseMessageProperty property;
        if (fault == null)
        {
          FaultCode receiverFaultCode = FaultCode.CreateReceiverFaultCode(new FaultCode("InternalServiceFault", "http://schemas.microsoft.com/net/2005/12/windowscommunicationfoundation/dispatcher"));
          string action = "http://schemas.microsoft.com/net/2005/12/windowscommunicationfoundation/dispatcher/fault";
          MessageFault fault1 = MessageFault.CreateFault(receiverFaultCode, new FaultReason(error.Message, CultureInfo.CurrentCulture), (object) new ExceptionDetail(error));
          fault = Message.CreateMessage(version, action, (BodyWriter) new WebScriptEnablingBehavior.JsonErrorHandler.JsonFaultBodyWriter(fault1, this.includeExceptionDetailInFaults));
          property = new HttpResponseMessageProperty();
          fault.Properties.Add(HttpResponseMessageProperty.Name, (object) property);
        }
        else
        {
          MessageFault fault2 = MessageFault.CreateFault(fault, 65536);
          Message message = Message.CreateMessage(version, fault.Headers.Action, (BodyWriter) new WebScriptEnablingBehavior.JsonErrorHandler.JsonFaultBodyWriter(fault2, this.includeExceptionDetailInFaults));
          message.Headers.To = fault.Headers.To;
          message.Properties.CopyProperties(fault.Properties);
          object obj = (object) null;
          if (message.Properties.TryGetValue(HttpResponseMessageProperty.Name, out obj))
          {
            property = (HttpResponseMessageProperty) obj;
          }
          else
          {
            property = new HttpResponseMessageProperty();
            message.Properties.Add(HttpResponseMessageProperty.Name, (object) property);
          }
          fault.Close();
          fault = message;
        }
        property.Headers.Add(HttpResponseHeader.ContentType, this.outgoingContentType);
        property.Headers.Add("jsonerror", "true");
        property.StatusCode = HttpStatusCode.InternalServerError;
        object obj1;
        if (fault.Properties.TryGetValue("WebBodyFormatMessageProperty", out obj1))
        {
          if (obj1 is WebBodyFormatMessageProperty formatMessageProperty && formatMessageProperty.Format == WebContentFormat.Json)
            return;
          fault.Properties["WebBodyFormatMessageProperty"] = (object) WebBodyFormatMessageProperty.JsonProperty;
        }
        else
          fault.Properties.Add("WebBodyFormatMessageProperty", (object) WebBodyFormatMessageProperty.JsonProperty);
      }

      private class JsonFaultBodyWriter : BodyWriter
      {
        private JsonFaultDetail faultDetail;

        public JsonFaultBodyWriter(MessageFault fault, bool includeExceptionDetailInFaults)
          : base(false)
        {
          this.faultDetail = new JsonFaultDetail();
          if (includeExceptionDetailInFaults)
          {
            this.faultDetail.Message = fault.Reason.ToString();
            if (!fault.HasDetail)
              return;
            try
            {
              ExceptionDetail detail = fault.GetDetail<ExceptionDetail>();
              this.faultDetail.StackTrace = detail.StackTrace;
              this.faultDetail.ExceptionType = detail.Type;
              this.faultDetail.ExceptionDetail = detail;
            }
            catch (SerializationException ex)
            {
              System.ServiceModel.DiagnosticUtility.TraceHandledException((Exception) ex, TraceEventType.Information);
            }
            catch (SecurityException ex)
            {
              System.ServiceModel.DiagnosticUtility.TraceHandledException((Exception) ex, TraceEventType.Information);
            }
          }
          else
            this.faultDetail.Message = System.ServiceModel.SR.GetString("SFxInternalServerError");
        }

        protected override void OnWriteBodyContents(XmlDictionaryWriter writer) => WebScriptEnablingBehavior.jsonFaultSerializer.WriteObject(writer, (object) this.faultDetail);
      }
    }
  }
}
