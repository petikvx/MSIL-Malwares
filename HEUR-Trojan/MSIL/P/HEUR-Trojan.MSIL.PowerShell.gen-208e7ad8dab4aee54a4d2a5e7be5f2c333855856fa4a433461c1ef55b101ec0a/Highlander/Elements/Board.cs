// Decompiled with JetBrains decompiler
// Type: Highlander.Elements.Board
// Assembly: SHA384Mana, Version=2.1.4.10, Culture=neutral, PublicKeyToken=null
// MVID: B6D2A9B2-9B43-4C18-A521-64033E474772
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.PowerShell.gen-208e7ad8dab4aee54a4d2a5e7be5f2c333855856fa4a433461c1ef55b101ec0a.exe

using Game.Elements;
using System.Drawing;

namespace Highlander.Elements
{
  public class Board : Sprite
  {
    private Image[] _blocks;

    public Board(Resources resources)
      : base((Image) null, Point.Empty)
    {
      this.Block_Size = new Size(40, 40);
      this.Grid_Size = new Size(10, 15);
      Size gridSize = this.Grid_Size;
      int width = gridSize.Width;
      gridSize = this.Grid_Size;
      int height = gridSize.Height;
      this.Matrix = new int[width, height];
      this._blocks = new Image[7]
      {
        resources.Block_Blue,
        resources.Block_Cyan,
        resources.Block_Green,
        resources.Block_Orange,
        resources.Block_Red,
        resources.Block_Violet,
        resources.Block_Yellow
      };
    }

    public Size Block_Size { get; private set; }

    public Size Grid_Size { get; private set; }

    private int[,] Matrix { get; set; }

    public int Lines { get; set; }

    public bool HasBlock(Point location)
    {
      if (location.Y >= this.Grid_Size.Height)
        goto label_7;
label_1:
      int num1 = 274617377;
label_2:
      bool flag1;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1090605065)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            flag1 = true;
            num1 = (int) num2 * -1056318832 ^ 1427416713;
            continue;
          case 3:
            flag1 = this.Matrix[location.X, location.Y] > 0;
            num1 = 4873811;
            continue;
          case 4:
            num1 = (int) num2 * 15620581 ^ -1856616101;
            continue;
          case 5:
            goto label_6;
          case 6:
            int num3 = !flag2 ? 1167002991 : (num3 = 1085805668);
            num1 = num3 ^ (int) num2 * -348246904;
            continue;
          default:
            goto label_10;
        }
      }
label_6:
      int num4 = location.X >= this.Grid_Size.Width ? 1 : 0;
      goto label_8;
label_10:
      return flag1;
label_7:
      num4 = 1;
label_8:
      flag2 = num4 != 0;
      num1 = 1685415689;
      goto label_2;
    }

    public void Add_Block(Block block)
    {
label_1:
      int num1 = -79330093;
      int index1;
      bool flag1;
      int index2;
      int num2;
      bool flag2;
      bool flag3;
      bool flag4;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -691083739)) % 20U)
        {
          case 0:
            ++index2;
            num1 = (int) num3 * -453296558 ^ -304298460;
            continue;
          case 1:
            flag3 = index2 < block.Matrix_Size.Width;
            num1 = -1911338732;
            continue;
          case 2:
            int num4 = flag1 ? 388275468 : (num4 = 914584288);
            num1 = num4 ^ (int) num3 * -651523653;
            continue;
          case 3:
            Point point = new Point(index2 + block.Location.X, index1 + block.Location.Y);
            this.Matrix[point.X, point.Y] = num2;
            num1 = (int) num3 * 1154285352 ^ -1007666856;
            continue;
          case 4:
            num1 = (int) num3 * 104448342 ^ -1245993494;
            continue;
          case 5:
            goto label_3;
          case 6:
            int num5 = !flag4 ? -2135425220 : (num5 = -640320991);
            num1 = num5 ^ (int) num3 * -1891646834;
            continue;
          case 7:
            num1 = (int) num3 * -911943942 ^ 759044622;
            continue;
          case 8:
            index2 = 0;
            num1 = -2104840101;
            continue;
          case 9:
            flag4 = index1 < block.Matrix_Size.Height;
            num1 = -1834711821;
            continue;
          case 10:
            num2 = block.Matrix[index1, index2];
            flag2 = num2 > 0;
            num1 = (int) num3 * -393250840 ^ 31367237;
            continue;
          case 11:
            num1 = -48557029;
            continue;
          case 12:
            int num6 = !flag2 ? 1461141488 : (num6 = 1543170485);
            num1 = num6 ^ (int) num3 * -608901101;
            continue;
          case 13:
            int num7 = flag3 ? 1534760740 : (num7 = 424279067);
            num1 = num7 ^ (int) num3 * 1718550938;
            continue;
          case 14:
            num1 = (int) num3 * 2083610080 ^ -982765044;
            continue;
          case 15:
            index1 = 0;
            num1 = -199767760;
            continue;
          case 16:
            ++index1;
            num1 = (int) num3 * 722995507 ^ -628002116;
            continue;
          case 17:
            num1 = -1390932175;
            continue;
          case 18:
            flag1 = block == null;
            num1 = (int) num3 * 138270220 ^ 1076102991;
            continue;
          case 19:
            goto label_1;
          default:
            goto label_22;
        }
      }
label_3:
      return;
label_22:;
    }

    public void Rotate(Block block, int value)
    {
label_1:
      int num1 = 373051669;
      Point location1;
      Size matrixSize1;
      Size matrixSize2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1600382924)) % 19U)
        {
          case 0:
            block.Rotate(value * -1);
            num1 = (int) num2 * 199356600 ^ 2058779494;
            continue;
          case 1:
            block.Location = location1;
            num1 = (int) num2 * 30290099 ^ -154310483;
            continue;
          case 2:
            num1 = (int) num2 * 1185198155 ^ 1525031458;
            continue;
          case 3:
            num1 = 1885812831;
            continue;
          case 4:
            num1 = (int) num2 * -2075843724 ^ 1162193946;
            continue;
          case 5:
            block.Rotate(value);
            num1 = (int) num2 * -1669708600 ^ 410077469;
            continue;
          case 6:
            matrixSize1 = block.Matrix_Size;
            num1 = (int) num2 * -1151581184 ^ 1186702769;
            continue;
          case 7:
            matrixSize2 = block.Matrix_Size;
            num1 = (int) num2 * 156137151 ^ -2102602161;
            continue;
          case 8:
            Block block1 = block;
            Point location2 = block.Location;
            int x = location2.X - (matrixSize1.Width - matrixSize2.Width);
            location2 = block.Location;
            int y = location2.Y;
            Point point = new Point(x, y);
            block1.Location = point;
            num1 = (int) num2 * 1696344773 ^ -2118122803;
            continue;
          case 9:
            num1 = (int) num2 * 1502498558 ^ 629829623;
            continue;
          case 10:
            int num3 = block != null ? -440572399 : (num3 = -1742562613);
            num1 = num3 ^ (int) num2 * 1228296099;
            continue;
          case 11:
            num1 = (int) num2 * 251735015 ^ -887970795;
            continue;
          case 12:
            int num4 = this.BlockCollition(block, Point.Empty) ? 1006000214 : (num4 = 22104285);
            num1 = num4 ^ (int) num2 * -311348772;
            continue;
          case 13:
            num1 = (int) num2 * -1091383700 ^ 309817503;
            continue;
          case 14:
            goto label_3;
          case 15:
            flag = this.BlockCollition(block, Point.Empty);
            num1 = (int) num2 * -444602816 ^ -943970907;
            continue;
          case 16:
            int num5 = !flag ? -1480549634 : (num5 = -1045682705);
            num1 = num5 ^ (int) num2 * 1197896249;
            continue;
          case 17:
            goto label_1;
          case 18:
            location1 = block.Location;
            num1 = 104930498;
            continue;
          default:
            goto label_21;
        }
      }
label_3:
      return;
label_21:;
    }

    public bool BlockCollition(Block block, Point locationAdjust)
    {
label_1:
      int num1 = 635786820;
      int index1;
      int index2;
      bool flag1;
      bool flag2;
      bool flag3;
      bool flag4;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 834951743)) % 22U)
        {
          case 0:
            num1 = 906177057;
            continue;
          case 1:
            num1 = (int) num2 * 755652738 ^ -52137;
            continue;
          case 2:
            flag2 = index2 < block.Matrix_Size.Width;
            num1 = 819123258;
            continue;
          case 3:
            ++index1;
            num1 = (int) num2 * 1886091148 ^ 1350813585;
            continue;
          case 4:
            num1 = (int) num2 * 31515099 ^ -402564350;
            continue;
          case 6:
            num1 = 8749541;
            continue;
          case 7:
            int num3 = flag2 ? 723320324 : (num3 = 18650687);
            num1 = num3 ^ (int) num2 * -174534441;
            continue;
          case 8:
            index1 = 0;
            num1 = 940566382;
            continue;
          case 9:
            int num4 = flag3 ? -1761966492 : (num4 = -26040047);
            num1 = num4 ^ (int) num2 * -1851688244;
            continue;
          case 10:
            num1 = (int) num2 * -108452324 ^ 594970002;
            continue;
          case 11:
            int num5 = !flag1 ? -1937185599 : (num5 = -1804163780);
            num1 = num5 ^ (int) num2 * 364217116;
            continue;
          case 12:
            flag3 = block.Matrix[index1, index2] > 0;
            num1 = 400159088;
            continue;
          case 13:
            flag4 = true;
            num1 = (int) num2 * 1872693358 ^ 1259038229;
            continue;
          case 14:
            ++index2;
            num1 = (int) num2 * 184811037 ^ 1247416633;
            continue;
          case 15:
            flag1 = this.HasBlock(new Point(block.Location.X + index2 + locationAdjust.X, block.Location.Y + index1 + locationAdjust.Y));
            num1 = (int) num2 * 1414687605 ^ 1053469815;
            continue;
          case 16:
            index2 = 0;
            num1 = 393569887;
            continue;
          case 17:
            int num6 = block != null ? -1236030437 : (num6 = -2097531388);
            num1 = num6 ^ (int) num2 * -448237748;
            continue;
          case 18:
            goto label_1;
          case 19:
            flag4 = false;
            num1 = (int) num2 * 1681101232 ^ 1667835137;
            continue;
          case 20:
            int num7;
            num1 = num7 = index1 >= block.Matrix_Size.Height ? 2039103838 : (num7 = 854361615);
            continue;
          case 21:
            flag4 = true;
            num1 = (int) num2 * 1644089925 ^ -710005663;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      return flag4;
    }

    public void CheckLines()
    {
label_1:
      int num1 = 692450438;
      int index1;
      int index2;
      bool flag1;
      int index3;
      bool flag2;
      int num2;
      int index4;
      int lines;
      int num3;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num1 ^ 1643897914)) % 35U)
        {
          case 0:
            flag1 = num2 == this.Grid_Size.Width;
            num1 = (int) num4 * -1025059347 ^ -552531329;
            continue;
          case 1:
            ++index4;
            num1 = (int) num4 * -558105809 ^ -303764534;
            continue;
          case 2:
            lines = this.Lines;
            num1 = (int) num4 * -108282953 ^ -1781357855;
            continue;
          case 3:
            num3 = this.Matrix[index2, index3];
            num1 = (int) num4 * -1751186994 ^ -1639837722;
            continue;
          case 4:
            this.Matrix[index4, index1] = 0;
            num1 = 422473026;
            continue;
          case 5:
            num1 = (int) num4 * 457097347 ^ -260284794;
            continue;
          case 6:
            int num5 = index1 > 0 ? 1369282903 : (num5 = 1331611693);
            num1 = num5 ^ (int) num4 * 409231777;
            continue;
          case 7:
            flag2 = index4 < this.Grid_Size.Width;
            num1 = 1312432400;
            continue;
          case 8:
            int num6 = !flag1 ? -52879453 : (num6 = -841466876);
            num1 = num6 ^ (int) num4 * 514525736;
            continue;
          case 9:
            int num7;
            num1 = num7 = index1 >= 0 ? 954072349 : (num7 = 1087613543);
            continue;
          case 10:
            num1 = 2016935184;
            continue;
          case 11:
            index3 = 0;
            num1 = (int) num4 * -1053066714 ^ -1651773275;
            continue;
          case 12:
            ++index3;
            num1 = 1644913026;
            continue;
          case 13:
            index2 = 0;
            num1 = (int) num4 * 998649532 ^ -439090740;
            continue;
          case 14:
            num1 = (int) num4 * -1213659580 ^ -386405545;
            continue;
          case 15:
            num1 = 1753786309;
            continue;
          case 16:
            num1 = (int) num4 * -1453084899 ^ -3190535;
            continue;
          case 17:
            num1 = 140056572;
            continue;
          case 18:
            goto label_3;
          case 19:
            goto label_1;
          case 20:
            num1 = 1574518238;
            continue;
          case 21:
            num2 += num3 > 0 ? 1 : 0;
            num1 = 265317789;
            continue;
          case 22:
            num1 = (int) num4 * 1348245516 ^ -117328627;
            continue;
          case 23:
            num1 = (int) num4 * -342616396 ^ 396929030;
            continue;
          case 24:
            int num8 = !flag2 ? 1364123182 : (num8 = 487246068);
            num1 = num8 ^ (int) num4 * 874225094;
            continue;
          case 25:
            this.Matrix[index4, index1] = this.Matrix[index4, index1 - 1];
            num1 = (int) num4 * -1194266391 ^ 1629783565;
            continue;
          case 26:
            ++index2;
            num1 = (int) num4 * 1948771844 ^ 466807924;
            continue;
          case 27:
            int num9;
            num1 = num9 = index2 >= this.Grid_Size.Width ? 1102435643 : (num9 = 551707164);
            continue;
          case 28:
            num1 = (int) num4 * 873625093 ^ -531457970;
            continue;
          case 29:
            num1 = (int) num4 * 1560586618 ^ 2017290316;
            continue;
          case 30:
            int num10;
            num1 = num10 = index3 < this.Grid_Size.Height ? 1215275763 : (num10 = 265259285);
            continue;
          case 31:
            index4 = 0;
            num1 = 1437721392;
            continue;
          case 32:
            --index1;
            num1 = (int) num4 * -1491194369 ^ 668422732;
            continue;
          case 33:
            this.Lines = lines + 1;
            index1 = index3;
            num1 = (int) num4 * 455758622 ^ 2047509930;
            continue;
          case 34:
            num2 = 0;
            num1 = (int) num4 * -252315834 ^ 1569551273;
            continue;
          default:
            goto label_37;
        }
      }
label_3:
      return;
label_37:;
    }

    public override void Draw(DrawHandler drawHandler)
    {
      int index1 = 0;
label_10:
      int num1 = index1;
      Size size = this.Grid_Size;
      int width1 = size.Width;
      bool flag1 = num1 < width1;
      int num2 = -1644537064;
      int index2;
      int num3;
      Point position;
      Image block;
      bool flag2;
      while (true)
      {
        uint num4;
        switch ((num4 = (uint) (num2 ^ -272076995)) % 17U)
        {
          case 0:
            num2 = -436446887;
            continue;
          case 1:
            goto label_10;
          case 2:
            num2 = -1140298559;
            continue;
          case 3:
            index2 = 0;
            num2 = -1845161895;
            continue;
          case 4:
            ++index2;
            num2 = -1845161895;
            continue;
          case 5:
            drawHandler.Draw(block, position);
            num2 = (int) num4 * 1641268601 ^ -189774097;
            continue;
          case 6:
            ref Point local = ref position;
            int num5 = index1;
            size = this.Block_Size;
            int width2 = size.Width;
            int x = num5 * width2;
            int num6 = index2;
            size = this.Block_Size;
            int height1 = size.Height;
            int y = num6 * height1;
            local = new Point(x, y);
            block = this._blocks[num3 - 1];
            num2 = (int) num4 * -1187273797 ^ 1261635744;
            continue;
          case 7:
            int num7 = num3 <= 0 ? -449208713 : (num7 = -601108181);
            num2 = num7 ^ (int) num4 * 1362738161;
            continue;
          case 8:
            int num8 = flag2 ? 1930175429 : (num8 = 1960376365);
            num2 = num8 ^ (int) num4 * 798932356;
            continue;
          case 9:
            goto label_3;
          case 10:
            ++index1;
            num2 = (int) num4 * 1556301080 ^ -1582613945;
            continue;
          case 11:
            num2 = (int) num4 * -1778114895 ^ -1564338703;
            continue;
          case 12:
            num3 = this.Matrix[index1, index2];
            num2 = (int) num4 * -204757633 ^ 562167667;
            continue;
          case 13:
            int num9 = index2;
            size = this.Grid_Size;
            int height2 = size.Height;
            flag2 = num9 < height2;
            num2 = -218721904;
            continue;
          case 14:
            num2 = (int) num4 * -1252919190 ^ -389730453;
            continue;
          case 15:
            int num10 = flag1 ? -254036839 : (num10 = -1805762902);
            num2 = num10 ^ (int) num4 * 2131073912;
            continue;
          case 16:
            num2 = (int) num4 * 606162982 ^ -306673764;
            continue;
          default:
            goto label_19;
        }
      }
label_3:
      return;
label_19:;
    }
  }
}
