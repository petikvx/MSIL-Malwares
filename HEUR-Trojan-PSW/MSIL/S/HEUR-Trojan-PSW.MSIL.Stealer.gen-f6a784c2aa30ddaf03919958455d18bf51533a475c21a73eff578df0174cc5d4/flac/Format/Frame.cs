// Decompiled with JetBrains decompiler
// Type: flac.Format.Frame
// Assembly: STAThreadAttrib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6EE3DE1A-E148-4FBA-A193-65BEA1824C00
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f6a784c2aa30ddaf03919958455d18bf51533a475c21a73eff578df0174cc5d4.exe

using System.Collections.Generic;

namespace flac.Format
{
  public class Frame
  {
    private FrameHeader header_ = new FrameHeader();
    private List<Subframe> subframes_ = new List<Subframe>();
    private FrameFooter footer_ = new FrameFooter();

    public FrameHeader Header => this.header_;

    public void ReadHeader(FlacStream stream) => this.header_.Read(stream);

    public void ReadData(FlacStream stream)
    {
      Debug.Assert(this.subframes_.Count == 0);
      int channels = stream.StreamInfo.Channels;
      Validation.IsValid(channels >= 1);
      for (; channels > 0; --channels)
      {
        int bps = this.GetBps();
        this.subframes_.Add(Subframe.New(stream, this.header_, bps));
      }
      stream.Reader.SkipToByteBoundary();
    }

    public void ReadFooter(FlacStream stream) => this.footer_.Read(stream);

    public void Write(FlacStream stream)
    {
      this.header_.Write(stream);
      foreach (Subframe subframe in this.subframes_)
        subframe.Write(stream);
      stream.Writer.WriteBits(0, stream.Writer.BitsToByteBoundary);
      this.footer_.Write(stream);
    }

    public void Write(FlacStream stream, int startSample, int count)
    {
      this.header_.Write(stream);
      foreach (Subframe subframe in this.subframes_)
      {
        if (!(subframe is SubframeConstant))
        {
          if (subframe is SubframeVerbatim sf1)
            Frame.ShiftSamples(startSample, count, (Subframe) sf1);
          if (subframe is SubframeFixed sf2)
          {
            sf2.DecodeSamples();
            Frame.ShiftSamples(startSample, count, (Subframe) sf2);
            sf2.EncodeSamples(count);
          }
          if (subframe is SubframeLpc sf3)
          {
            sf3.DecodeSamples();
            Frame.ShiftSamples(startSample, count, (Subframe) sf3);
            sf3.EncodeSamples(count);
          }
        }
        subframe.Write(stream, count);
      }
      stream.Writer.WriteBits(0, stream.Writer.BitsToByteBoundary);
      this.footer_.Write(stream);
    }

    private static void ShiftSamples(int startSample, int count, Subframe sf)
    {
      for (int index = 0; index < count; ++index)
        sf.Samples[index] = sf.Samples[index + startSample];
    }

    private int GetBps()
    {
      int bitsPerSample = this.header_.BitsPerSample;
      switch (this.header_.ChannelAssignment)
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          return bitsPerSample;
        case 8:
        case 10:
          if (this.subframes_.Count == 1)
          {
            ++bitsPerSample;
            goto case 0;
          }
          else
            goto case 0;
        case 9:
          if (this.subframes_.Count == 0)
          {
            ++bitsPerSample;
            goto case 0;
          }
          else
            goto case 0;
        default:
          throw new FlacFormatReservedException();
      }
    }
  }
}
