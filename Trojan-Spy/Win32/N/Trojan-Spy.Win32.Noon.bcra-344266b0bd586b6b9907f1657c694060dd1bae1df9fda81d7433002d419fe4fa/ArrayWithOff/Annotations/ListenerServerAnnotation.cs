// Decompiled with JetBrains decompiler
// Type: ArrayWithOff.Annotations.ListenerServerAnnotation
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System;
using System.Runtime.CompilerServices;

namespace ArrayWithOff.Annotations
{
  [Serializable]
  internal class ListenerServerAnnotation : Exception
  {
    private static readonly string _Mapper;
    private static readonly string _Prototype;
    private static readonly string m_Struct;
    private static readonly string _Dispatcher;
    private static readonly string proc;
    private static readonly string m_SerializerParser;
    private static readonly string _ParserParser;
    public string expressionParser;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ListenerServerAnnotation(
      bool acceptasset,
      bool createcol,
      bool isdir,
      bool skipcounter2,
      bool ignorecaller3,
      bool selection4needed)
    {
      int num1 = 8;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.expressionParser += ListenerServerAnnotation.m_SerializerParser;
              goto label_12;
            case 1:
            case 2:
              this.expressionParser = "";
              // ISSUE: explicit constructor call
              base.\u002Ector();
              if (!acceptasset)
                this.expressionParser += ListenerServerAnnotation._Mapper;
              if (!createcol)
                this.expressionParser += ListenerServerAnnotation._Prototype;
              if (!isdir)
              {
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_24;
              }
              else
                goto label_6;
            case 3:
            case 6:
              goto label_6;
            case 4:
              goto label_8;
            case 5:
label_14:
              this.expressionParser += ListenerServerAnnotation._Dispatcher;
              goto case 9;
            case 7:
label_9:
              if (!selection4needed)
              {
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto case 0;
              }
              else
                goto label_12;
            case 8:
              goto label_4;
            case 9:
              break;
            case 10:
              goto label_24;
            default:
              goto label_17;
          }
label_2:
          if (!ignorecaller3)
          {
            this.expressionParser += ListenerServerAnnotation.proc;
            if (ListenerServerAnnotation.LogoutPool())
            {
              num2 = 7;
              continue;
            }
            break;
          }
          goto label_9;
label_6:
          if (!skipcounter2)
          {
            if (ListenerServerAnnotation.LogoutPool())
            {
              num2 = 5;
              continue;
            }
            goto label_8;
          }
          else
            goto label_2;
label_12:
          if (!ignorecaller3 || !selection4needed)
          {
            this.expressionParser += ListenerServerAnnotation._ParserParser;
            if (!ListenerServerAnnotation.ComparePool())
              num2 = 10;
            else
              goto label_14;
          }
          else
            goto label_26;
        }
label_4:
        ProxyParser.NewPool();
        num1 = 2;
        continue;
label_8:
        this.expressionParser += ListenerServerAnnotation.m_Struct;
        num1 = 6;
        continue;
label_17:
        num1 = 9;
      }
label_26:
      return;
label_24:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ListenerServerAnnotation()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              ProxyParser.NewPool();
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto label_6;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_7;
            case 5:
              goto label_6;
            case 6:
              goto label_9;
            default:
              num2 = 5;
              continue;
          }
        }
label_1:
        ListenerServerAnnotation.m_Struct = "This username is taken. ";
label_6:
        ListenerServerAnnotation._Dispatcher = "Passwords must be between 8 and 15 characters. ";
        ListenerServerAnnotation.proc = "Password must consist of letters, numbers and symbols. ";
        ListenerServerAnnotation.m_SerializerParser = "Passwords must contain a minimum of one number, symbol, upper and lower case character. ";
        ListenerServerAnnotation._ParserParser = "Refer to the tutorial window for the list of allowed symbols.";
        num1 = 6;
        continue;
label_7:
        ListenerServerAnnotation._Mapper = "Usernames must be between 3 and 10 characters.";
        ListenerServerAnnotation._Prototype = "Only letters, numbers and seperator characters (Underscore, dash, period, comma, slash) allowed in usernames. ";
        num1 = 4;
      }
label_9:;
    }

    internal static bool LogoutPool() => true;

    internal static bool ComparePool() => false;
  }
}
