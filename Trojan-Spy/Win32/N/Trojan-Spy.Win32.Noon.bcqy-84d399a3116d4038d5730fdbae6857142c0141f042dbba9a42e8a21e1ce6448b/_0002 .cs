// Decompiled with JetBrains decompiler
// Type:  
// Assembly: ProgIdRedirectionEn, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: B81F1514-ABAD-442F-0D6D-30821B04B8DB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqy-84d399a3116d4038d5730fdbae6857142c0141f042dbba9a42e8a21e1ce6448b.exe

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;

public sealed class \u0002\u2001 : \u000F\u2000
{
  private string \u0002;
  private bool \u0003;
  private string \u0005;
  private string \u0008;
  private string \u0006;
  private string \u000E;
  private int \u000F;
  private bool \u0002\u2000;
  private string \u0003\u2000;
  private BindingList<\u0003\u2006> \u0005\u2000;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0002\u2001(\u0002\u2002 _param1)
  {
    \u0003\u2004.\u0002();
    // ISSUE: explicit constructor call
    base.\u002Ector(_param1);
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string RunAccount() => this.\u0002;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool PushAccount() => this.\u0003;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string InitAccount() => this.\u0005;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string ViewAccount() => this.\u0008;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string FillAccount() => this.\u0006;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string IncludeAccount() => this.\u000E;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int DeleteAccount() => this.\u000F;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool CancelAccount()
  {
    int num = 0;
    if (\u0002\u2001.\u0002())
      goto label_4;
label_1:
    bool flag1 = base.\u0002 >= 10;
    num = 4;
label_4:
    bool flag2;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_1;
        case 1:
        case 4:
          if (!flag1)
            goto label_6;
          else
            goto case 2;
        case 2:
        case 3:
          flag2 = this.\u0002\u2000;
          num = 5;
          continue;
        case 5:
          goto label_7;
        default:
          num = 3;
          continue;
      }
    }
label_6:
    throw new NotSupportedException();
label_7:
    return flag2;
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string PopAccount()
  {
    int num = 3;
    bool flag;
    string str;
    while (true)
    {
      switch (num)
      {
        case 0:
        case 2:
          str = this.\u0003\u2000;
          num = 5;
          continue;
        case 1:
        case 4:
          if (!flag)
            goto label_6;
          else
            goto case 0;
        case 3:
          flag = base.\u0002 >= 11;
          num = 4;
          continue;
        case 5:
          goto label_7;
        default:
          num = 0;
          continue;
      }
    }
label_6:
    throw new NotSupportedException();
label_7:
    return str;
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public BindingList<\u0003\u2006> CallAccount()
  {
    if (this.\u0005\u2000 == null)
      this.\u0005\u2000 = new BindingList<\u0003\u2006>();
    return this.\u0005\u2000;
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public bool CalculateAccount() => this.FindAccount() == (byte) 99;

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void \u000F\u2000\u2007\u2001\u2003\u2008\u0002(\u000F\u2001 _param1)
  {
    int num1 = 0;
    if (!\u0002\u2001.\u0003())
      goto label_3;
label_1:
    this.\u0005 = _param1.\u0002();
    this.\u0008 = _param1.\u0002();
    this.\u0006 = _param1.\u0002();
    this.\u000E = _param1.\u0002();
    this.\u000F = _param1.\u0002();
    goto label_11;
label_2:
    int num2;
    num1 = num2;
label_3:
    while (true)
    {
      switch (num1)
      {
        case 0:
          goto label_10;
        case 1:
          goto label_6;
        case 2:
        case 4:
          goto label_1;
        case 3:
        case 5:
          goto label_11;
        case 6:
          this.\u0003 = _param1.\u0002();
          if (\u0002\u2001.\u0002())
          {
            num1 = 4;
            continue;
          }
          goto label_6;
        case 7:
          goto label_12;
        default:
          num1 = 5;
          continue;
      }
    }
label_12:
    return;
label_6:
    bool flag;
    if (flag)
      this.\u0002\u2000 = _param1.\u0002();
    if (base.\u0002 < 11)
      return;
    this.\u0003\u2000 = _param1.\u0002();
    num2 = 7;
    goto label_2;
label_10:
    this.\u0002 = _param1.\u0002();
    num2 = 6;
    goto label_2;
label_11:
    flag = base.\u0002 >= 10;
    num2 = 1;
    goto label_2;
  }

  internal new static bool \u0002() => true;

  internal new static bool \u0003() => false;
}
