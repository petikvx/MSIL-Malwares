// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: TimeSpanTok, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: ECAE311E-CE0C-4BF9-8C57-F98A452B360E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7480e4ba962590b3f14f4516861bb1aa80ffa08223a944ee6599cfe3b4e89bce.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202A‍‎‪⁬‭⁭‮‌‍⁪‭​⁫‏⁪​⁯‭⁪⁪‫​‎⁪‭‏‫⁭⁬‌‭‬⁪‪‎⁮‏‪⁬‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 210575004;
        bool finished;
        bool flag;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1129688114)) % 17U)
          {
            case 0:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -976665165 ^ 1465318584;
              continue;
            case 1:
              int num3 = this._finished ? 1407457075 : (num3 = 263840942);
              num1 = num3 ^ (int) num2 * 1901208950;
              continue;
            case 2:
              finished = true;
              num1 = (int) num2 * 1896405437 ^ -649705107;
              continue;
            case 3:
              finished = true;
              num1 = (int) num2 * 1925807940 ^ 1904608188;
              continue;
            case 4:
              goto label_1;
            case 5:
              playerState = playerStates[index];
              num1 = 780443583;
              continue;
            case 6:
              int num4 = flag ? 1935103929 : (num4 = 1542686992);
              num1 = num4 ^ (int) num2 * 991082614;
              continue;
            case 7:
              num1 = (int) num2 * 1440996026 ^ -1479101242;
              continue;
            case 8:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * 1769658270 ^ -1379191378;
              continue;
            case 9:
              ++index;
              num1 = 1834991550;
              continue;
            case 10:
              finished = false;
              num1 = (int) num2 * 947930729 ^ -1977342874;
              continue;
            case 11:
              int num5;
              num1 = num5 = index >= playerStates.Length ? 1711264160 : (num5 = 145796550);
              continue;
            case 13:
              num1 = (int) num2 * 23267804 ^ 151265284;
              continue;
            case 14:
              num1 = (int) num2 * 1664179334 ^ -1195557656;
              continue;
            case 15:
              num1 = (int) num2 * -465703689 ^ -234220234;
              continue;
            case 16:
              num1 = 145846908;
              continue;
            default:
              goto label_18;
          }
        }
label_18:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -815106360;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -367151042)) % 9U)
        {
          case 0:
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -2075201307 ^ 719713809;
            continue;
          case 1:
            num1 = (int) num2 * -1931935269 ^ 1932036354;
            continue;
          case 2:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * -1400179138 ^ -486243855;
            continue;
          case 3:
            goto label_3;
          case 4:
            this.Losers.Clear();
            num1 = (int) num2 * -1231749181 ^ -1971220737;
            continue;
          case 5:
            this.Winners.Clear();
            num1 = (int) num2 * 1252694262 ^ 1793307567;
            continue;
          case 6:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * 1052742747 ^ -1521443503;
            continue;
          case 7:
            goto label_1;
          case 8:
            this._currentTurn = 0;
            this._finished = false;
            num1 = (int) num2 * 1945339727 ^ 134613475;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 1084830432;
      Player player;
      bool morePlanningSprint;
      PlayerState playerState;
      int planningCardsCount;
      int num2;
      bool flag1;
      int index;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 703952057)) % 30U)
        {
          case 0:
            num1 = (int) num3 * -1776818594 ^ 1057579101;
            continue;
          case 1:
            ++index;
            num1 = (int) num3 * -542061381 ^ -1213175778;
            continue;
          case 2:
            num1 = (int) num3 * -463635629 ^ 265784137;
            continue;
          case 3:
            num1 = 268254153;
            continue;
          case 4:
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * -1041648827 ^ 1692777628;
            continue;
          case 5:
            num1 = 741320292;
            continue;
          case 6:
            num1 = (int) num3 * -92199658 ^ 66018790;
            continue;
          case 7:
            int num4 = planningCardsCount != 0 ? -618640119 : (num4 = -1636559506);
            num1 = num4 ^ (int) num3 * -1047544975;
            continue;
          case 8:
            playerState.Sprint = -1;
            num1 = (int) num3 * 1822903974 ^ 843815431;
            continue;
          case 9:
            player = this.Players[index];
            num1 = (int) num3 * 967269509 ^ 1747192050;
            continue;
          case 10:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * -1652332893 ^ 763622104;
            continue;
          case 11:
            index = 0;
            num1 = (int) num3 * 41597434 ^ -408825485;
            continue;
          case 12:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * -1082518636 ^ 864397211;
            continue;
          case 13:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 443652364;
            continue;
          case 14:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 2094192809 ^ 418504021;
            continue;
          case 15:
            int num5 = flag1 ? -1585436644 : (num5 = -1572146784);
            num1 = num5 ^ (int) num3 * 759866908;
            continue;
          case 16:
            flag1 = index < this.Players.Length;
            num1 = 1416885356;
            continue;
          case 17:
            num2 = 0;
            num1 = 1263832184;
            continue;
          case 18:
            int num6 = !flag2 ? 1904414490 : (num6 = 570119619);
            num1 = num6 ^ (int) num3 * -1811314921;
            continue;
          case 19:
            num1 = (int) num3 * -1374810088 ^ 1662427824;
            continue;
          case 20:
            num1 = (int) num3 * 1819180461 ^ 1083031882;
            continue;
          case 21:
            goto label_1;
          case 22:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -1248811414 ^ 2137482575;
            continue;
          case 23:
            goto label_3;
          case 24:
            playerState.Sprint = 1;
            num1 = (int) num3 * 791715565 ^ -194605543;
            continue;
          case 25:
            num1 = 635790346;
            continue;
          case 26:
            playerState = this._playerStates[index];
            num1 = (int) num3 * 2081757675 ^ -1376029976;
            continue;
          case 27:
            flag2 = num2 > 0;
            num1 = 426115485;
            continue;
          case 28:
            int num7 = morePlanningSprint ? 1229412719 : (num7 = 2095684556);
            num1 = num7 ^ (int) num3 * 1458208843;
            continue;
          case 29:
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * -83898247 ^ 1265603334;
            continue;
          default:
            goto label_32;
        }
      }
label_3:
      return;
label_32:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 1777562020;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1713750818)) % 11U)
        {
          case 0:
            num1 = (int) num2 * 438665725 ^ 1931762629;
            continue;
          case 1:
            this.PlayerTurn(this._currentPlayer);
            num1 = 471411587;
            continue;
          case 2:
            this.Print((object) Game.\u206F‍‌‏⁮‮‮‬⁫⁯⁬⁭⁬⁪⁯⁫⁫‭⁬⁬⁫‪⁫⁪‬​‪‎​⁬‌⁭‬⁬⁪‬‫⁬‭⁭‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 1631166296;
            continue;
          case 3:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u202A‪‬⁬‮⁫‍‎‫​‬‏⁬‍⁭⁫‍‍⁯‮⁭⁮⁪‌‮⁪‭‍‎⁭​‭⁪‌‌⁭‫‎⁫‍‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 235646096 ^ -1144567234;
            continue;
          case 4:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1105108752 ^ 861939128;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num2 * -703499705 ^ -1449633390;
            continue;
          case 7:
            int num3 = this._currentPlayer >= this.Players.Length ? 13610566 : (num3 = 605142602);
            num1 = num3 ^ (int) num2 * -1936728723;
            continue;
          case 8:
            this._currentPlayer = 0;
            int num4 = this._currentTurn > 0 ? 1099302016 : (num4 = 1025068692);
            num1 = num4 ^ (int) num2 * -726247736;
            continue;
          case 9:
            num1 = (int) num2 * -1023249672 ^ 489354455;
            continue;
          case 10:
            goto label_1;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 73174527;
      while (true)
      {
        uint num2;
        bool flag1;
        int num3;
        bool flag2;
        bool flag3;
        bool flag4;
        bool flag5;
        bool flag6;
        bool flag7;
        bool onlyOneWinner;
        PlayerState playerState1;
        bool flag8;
        Card card;
        int index;
        bool flag9;
        bool flag10;
        PlayerState playerState2;
        bool flag11;
        bool flag12;
        bool flag13;
        int num4;
        bool flag14;
        bool flag15;
        bool flag16;
        Player player;
        int num5;
        int num6;
        switch ((num2 = (uint) (num1 ^ 314462699)) % 89U)
        {
          case 0:
            num1 = (int) num2 * -148334207 ^ -2057877010;
            continue;
          case 1:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag6 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 83522173 ^ 1482296658;
            continue;
          case 2:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 3:
            int num7 = !flag14 ? -1955992765 : (num7 = -2121500491);
            num1 = num7 ^ (int) num2 * -2111010628;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = 253120835;
            continue;
          case 6:
            num1 = (int) num2 * -1706086985 ^ 369120619;
            continue;
          case 7:
            num1 = 162186229;
            continue;
          case 8:
            int num8 = !flag4 ? 174493104 : (num8 = 916652656);
            num1 = num8 ^ (int) num2 * 1423587286;
            continue;
          case 9:
            num1 = (int) num2 * -796534149 ^ -674898666;
            continue;
          case 10:
            num4 = Game.\u206D‪‏‪‪‍‭⁫‏​‬⁬⁭‪​‮‏⁮⁫⁮⁪‎‏‏‫⁭​‫⁭‭⁪⁮‌‪​‭​⁫‮⁮‮(0, num5);
            num1 = (int) num2 * -460557196 ^ -276091765;
            continue;
          case 11:
            flag7 = !this.Losers.Contains(num3);
            num1 = 178250189;
            continue;
          case 12:
            flag6 = true;
            num1 = (int) num2 * 982783504 ^ 1609974753;
            continue;
          case 13:
            playerState2.State = State.Lose;
            num1 = 604252720;
            continue;
          case 14:
            num1 = 97824270;
            continue;
          case 15:
            int num9 = !flag8 ? 1434918427 : (num9 = 1332570828);
            num1 = num9 ^ (int) num2 * -588774957;
            continue;
          case 16:
            ++index;
            num1 = 363660137;
            continue;
          case 17:
            flag11 = num3 == playerIndex;
            num1 = 176166297;
            continue;
          case 18:
            ++num3;
            num1 = 142982250;
            continue;
          case 19:
            num1 = (int) num2 * -1426454226 ^ 1164648362;
            continue;
          case 20:
            num1 = (int) num2 * 1480654786 ^ -1331813549;
            continue;
          case 21:
            flag16 = !flag15;
            num1 = (int) num2 * 1484843580 ^ -415299177;
            continue;
          case 22:
            int num10 = flag11 ? -1977300704 : (num10 = -841193206);
            num1 = num10 ^ (int) num2 * -261050789;
            continue;
          case 23:
            flag3 = card.Impact < 0;
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -188621175 ^ 1121524421;
              continue;
            }
            num6 = 0;
            break;
          case 24:
            num1 = (int) num2 * 87695801 ^ 1326908466;
            continue;
          case 25:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u202A‪‬⁬‮⁫‍‎‫​‬‏⁬‍⁭⁫‍‍⁯‮⁭⁮⁪‌‮⁪‭‍‎⁭​‭⁪‌‌⁭‫‎⁫‍‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 632122067 ^ 1133014156;
            continue;
          case 26:
            card = this.DrawCard();
            num1 = 1359062183;
            continue;
          case 27:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 2067202751 ^ 565410845;
            continue;
          case 28:
            flag6 = true;
            num4 = card.Impact;
            num1 = (int) num2 * 193873272 ^ -1497422922;
            continue;
          case 29:
            num1 = (int) num2 * -1419121583 ^ 2114088537;
            continue;
          case 30:
            int num11 = flag5 ? -1496351375 : (num11 = -272048556);
            num1 = num11 ^ (int) num2 * 2124132149;
            continue;
          case 31:
            ++playerState1.Sprint;
            num1 = (int) num2 * 915719229 ^ 291871583;
            continue;
          case 32:
            num1 = (int) num2 * 457244712 ^ -1884927375;
            continue;
          case 33:
            num1 = (int) num2 * 1452292178 ^ -325301379;
            continue;
          case 34:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 1453960609 ^ -1832101764;
            continue;
          case 35:
            flag8 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -692427041 ^ 764153903;
            continue;
          case 36:
            num1 = (int) num2 * 738216079 ^ 317448471;
            continue;
          case 37:
            this._finished = true;
            num3 = 0;
            num1 = (int) num2 * -1236163846 ^ 1314603338;
            continue;
          case 38:
            num1 = 1472945396;
            continue;
          case 39:
            num1 = (int) num2 * 1389716896 ^ -1271906514;
            continue;
          case 40:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -1250899939 ^ -1925777119;
            continue;
          case 41:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1714329106 ^ -1562170334;
            continue;
          case 42:
            flag5 = index < this._playerStates.Length;
            num1 = 927099449;
            continue;
          case 43:
            num1 = 1540337803;
            continue;
          case 44:
            int num12 = !flag12 ? 792606327 : (num12 = 499581658);
            num1 = num12 ^ (int) num2 * -1773855286;
            continue;
          case 45:
            num1 = (int) num2 * 1050766986 ^ -129644065;
            continue;
          case 46:
            num1 = (int) num2 * -1453889851 ^ -502533909;
            continue;
          case 47:
            num1 = (int) num2 * -1111524829 ^ 606582781;
            continue;
          case 48:
            flag14 = num3 < this._playerStates.Length;
            num1 = 2032163935;
            continue;
          case 49:
            int num13;
            num1 = num13 = !flag6 ? 873381385 : (num13 = 1351711715);
            continue;
          case 50:
            flag10 = !this.Losers.Contains(index);
            num1 = (int) num2 * 807320367 ^ -956734206;
            continue;
          case 51:
            int num14 = !flag10 ? -261640848 : (num14 = -1776240172);
            num1 = num14 ^ (int) num2 * 1675749388;
            continue;
          case 52:
            flag12 = playerState1.Sprint < 0;
            num1 = 53957199;
            continue;
          case 53:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202A‪‬⁬‮⁫‍‎‫​‬‏⁬‍⁭⁫‍‍⁯‮⁭⁮⁪‌‮⁪‭‍‎⁭​‭⁪‌‌⁭‫‎⁫‍‮("\t", playerState3 != null ? Game.\u202C⁫⁯‮‮‍‬⁪‍‬​⁯‍‏⁯‬‏‎‪‮‏⁭⁭⁫⁮‍‪⁪‬‫‬‎‪‌‏‫‌‍‌‎‮((object) playerState3) : (string) null));
            num1 = 889830273;
            continue;
          case 54:
            num1 = 220646078;
            continue;
          case 55:
            int num15 = flag7 ? 1820488491 : (num15 = 223070167);
            num1 = num15 ^ (int) num2 * 1924550217;
            continue;
          case 56:
            num1 = (int) num2 * -230069160 ^ 58097097;
            continue;
          case 57:
            int num16 = !flag9 ? -1883960721 : (num16 = -1091251612);
            num1 = num16 ^ (int) num2 * -817098267;
            continue;
          case 58:
            num1 = 2127120562;
            continue;
          case 59:
            flag9 = playerState1.State != 0;
            num1 = (int) num2 * -284999468 ^ 1369262736;
            continue;
          case 60:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -294225619 ^ -1288313840;
            continue;
          case 61:
            int num17 = !flag1 ? -372758447 : (num17 = -1917583892);
            num1 = num17 ^ (int) num2 * -441911067;
            continue;
          case 62:
            num1 = (int) num2 * 1856108058 ^ 1378036545;
            continue;
          case 63:
            flag2 = playerState2.Resources >= 0;
            num1 = (int) num2 * 1737695042 ^ -1169198648;
            continue;
          case 64:
            playerState1.State = State.Won;
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 695836978 ^ -786514987;
            continue;
          case 65:
            int num18 = !onlyOneWinner ? 204260345 : (num18 = 209252748);
            num1 = num18 ^ (int) num2 * -254560364;
            continue;
          case 66:
            flag1 = playerState1.Resources < 0;
            num1 = (int) num2 * 375953128 ^ -998962160;
            continue;
          case 67:
            this.Losers.Add(num3);
            num1 = (int) num2 * -1303470898 ^ 2012789780;
            continue;
          case 68:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1783805317 ^ 1245265873;
            continue;
          case 69:
            this.Losers.Add(index);
            num1 = (int) num2 * -1097421385 ^ -2135279751;
            continue;
          case 70:
            num1 = (int) num2 * -549488285 ^ 1699874402;
            continue;
          case 71:
            num1 = (int) num2 * -1768746169 ^ -1343430972;
            continue;
          case 72:
            flag4 = !flag3;
            num1 = (int) num2 * -791605109 ^ -393852563;
            continue;
          case 73:
            goto label_3;
          case 74:
            playerState1.Resources -= num4;
            num1 = (int) num2 * 839076612 ^ 1668518841;
            continue;
          case 75:
            index = 0;
            num1 = (int) num2 * 1733788245 ^ -322781616;
            continue;
          case 76:
            int num19;
            num1 = num19 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? 1401501218 : (num19 = 1690098156);
            continue;
          case 77:
            num1 = 1995655650;
            continue;
          case 78:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag15 ? (object) "ALL " : (object) "", flag3 ? (object) "receives" : (object) "pays", (object) Game.\u202C⁮⁯‬⁫‬‍⁬‬‌‭‭‎‭‍‍⁯‍‮‪‭‌‪⁮⁮‌‬‬‮‏⁪⁬​‎‌‎⁬⁮‬‎‮(num4), flag6 ? (object) "advance" : (object) "stay");
            num1 = 416535059;
            continue;
          case 79:
            int num20 = !flag2 ? -1104071092 : (num20 = -656930369);
            num1 = num20 ^ (int) num2 * 356420175;
            continue;
          case 80:
            num1 = (int) num2 * -1004696669 ^ -2101736185;
            continue;
          case 81:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u206D‪‏‪‪‍‭⁫‏​‬⁬⁭‪​‮‏⁮⁫⁮⁪‎‏‏‫⁭​‫⁭‭⁪⁮‌‪​‭​⁫‮⁮‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 50415828 ^ -1109932183;
            continue;
          case 82:
            num1 = (int) num2 * 1516017059 ^ 1142519250;
            continue;
          case 83:
            int num21 = !flag16 ? 909670142 : (num21 = 2144433329);
            num1 = num21 ^ (int) num2 * -1020363774;
            continue;
          case 84:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -1364649331 ^ -1944624815;
            continue;
          case 85:
            int num22 = !flag13 ? -1298667342 : (num22 = -86601368);
            num1 = num22 ^ (int) num2 * -1280921133;
            continue;
          case 86:
            flag6 = false;
            num1 = 632493926;
            continue;
          case 87:
            num1 = (int) num2 * -1623797927 ^ 1324147831;
            continue;
          case 88:
            flag13 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 150230848;
            continue;
          default:
            goto label_94;
        }
        flag15 = num6 != 0;
        num1 = 1543502144;
      }
label_3:
      return;
label_94:;
    }

    private Card DrawCard()
    {
      if (this._deck.Count > 0)
        goto label_9;
label_1:
      int num1 = 1090321519;
label_2:
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1080756100)) % 9U)
        {
          case 1:
            this.ShuffleCards();
            num1 = (int) num2 * -1881949254 ^ 2087328000;
            continue;
          case 2:
            goto label_1;
          case 3:
            goto label_9;
          case 4:
            num1 = (int) num2 * 1350608117 ^ -769475588;
            continue;
          case 5:
            num1 = (int) num2 * 1909453345 ^ 1691593217;
            continue;
          case 6:
            card2 = card1;
            num1 = (int) num2 * 1134877336 ^ -1262066357;
            continue;
          case 7:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 652386049 ^ -1634163918;
            continue;
          case 8:
            num1 = (int) num2 * -1044689399 ^ 607812048;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return card2;
label_9:
      card1 = this._deck[0];
      num1 = 1993547853;
      goto label_2;
    }

    public string ToString(bool initial)
    {
      string str1 = "";
      int index = 0;
label_1:
      int num1 = -1253579028;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -870409297)) % 8U)
        {
          case 1:
            flag = index < this._playerStates.Length;
            num1 = -1622006293;
            continue;
          case 2:
            ++index;
            num1 = (int) num2 * -249312731 ^ -696076180;
            continue;
          case 3:
            num1 = (int) num2 * -1517292985 ^ -1749145533;
            continue;
          case 4:
            int num3 = !flag ? 274118789 : (num3 = 712566094);
            num1 = num3 ^ (int) num2 * 834181927;
            continue;
          case 5:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202C⁫⁯‮‮‍‬⁪‍‬​⁯‍‏⁯‬‏‎‪‮‏⁭⁭⁫⁮‍‪⁪‬‫‬‎‪‌‏‫‌‍‌‎‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u202C‮‭⁬⁪⁬‬‬⁯‮‍‏⁫‏‮‌‍⁭​⁭‮‬⁪‫‭‪​⁫‪⁯⁫‌​⁬⁬‫⁫‍⁯‮(strArray);
            num1 = -1062755043;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 550250040 ^ -1798378825;
            continue;
          case 7:
            goto label_1;
          default:
            goto label_9;
        }
      }
label_9:
      return str2;
    }

    public override string ToString() => this.ToString(false);

    private void Print(object text, params object[] more) => Game.\u206D‫⁭‮⁬⁮​⁪‭‬‍‏⁭‭⁯‎⁬⁯⁪‎‌​‪‫⁮‭⁪⁫‪‌​⁭‌⁪⁪⁫‏‬‫‫‮(this._buffer, Game.\u202B⁮​⁭‌‪​⁯‮⁬‌⁮⁫⁭⁪⁫⁫‌‮‪⁯⁪‌‭‏​⁫‎⁪‭⁫‭‭⁮⁪⁮⁪‌‎‮‮(Game.\u202C⁫⁯‮‮‍‬⁪‍‬​⁯‍‏⁯‬‏‎‪‮‏⁭⁭⁫⁮‍‪⁪‬‫‬‎‪‌‏‫‌‍‌‎‮(text), more));

    static Random \u202A‍‎‪⁬‭⁭‮‌‍⁪‭​⁫‏⁪​⁯‭⁪⁪‫​‎⁪‭‏‫⁭⁬‌‭‬⁪‪‎⁮‏‪⁬‮([In] int obj0) => new Random(obj0);

    static string \u206F‍‌‏⁮‮‮‬⁫⁯⁬⁭⁬⁪⁯⁫⁫‭⁬⁬⁫‪⁫⁪‬​‪‎​⁬‌⁭‬⁬⁪‬‫⁬‭⁭‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202A‪‬⁬‮⁫‍‎‫​‬‏⁬‍⁭⁫‍‍⁯‮⁭⁮⁪‌‮⁪‭‍‎⁭​‭⁪‌‌⁭‫‎⁫‍‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206D‪‏‪‪‍‭⁫‏​‬⁬⁭‪​‮‏⁮⁫⁮⁪‎‏‏‫⁭​‫⁭‭⁪⁮‌‪​‭​⁫‮⁮‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u202C⁮⁯‬⁫‬‍⁬‬‌‭‭‎‭‍‍⁯‍‮‪‭‌‪⁮⁮‌‬‬‮‏⁪⁬​‎‌‎⁬⁮‬‎‮([In] int obj0) => Math.Abs(obj0);

    static string \u202C⁫⁯‮‮‍‬⁪‍‬​⁯‍‏⁯‬‏‎‪‮‏⁭⁭⁫⁮‍‪⁪‬‫‬‎‪‌‏‫‌‍‌‎‮([In] object obj0) => obj0.ToString();

    static string \u202C‮‭⁬⁪⁬‬‬⁯‮‍‏⁫‏‮‌‍⁭​⁭‮‬⁪‫‭‪​⁫‪⁯⁫‌​⁬⁬‫⁫‍⁯‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202B⁮​⁭‌‪​⁯‮⁬‌⁮⁫⁭⁪⁫⁫‌‮‪⁯⁪‌‭‏​⁫‎⁪‭⁫‭‭⁮⁪⁮⁪‌‎‮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u206D‫⁭‮⁬⁮​⁪‭‬‍‏⁭‭⁯‎⁬⁯⁪‎‌​‪‫⁮‭⁪⁫‪‌​⁭‌⁪⁪⁫‏‬‫‫‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
