// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSTabControl
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  internal class NSTabControl : TabControl
  {
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private GraphicsPath GP3;
    private GraphicsPath GP4;
    private Rectangle R1;
    private Rectangle R2;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private SolidBrush B1;
    private SolidBrush B2;
    private SolidBrush B3;
    private SolidBrush B4;
    private PathGradientBrush PB1;
    private TabPage TP1;
    private StringFormat SF1;
    private int Offset;
    private int ItemHeight;

    public NSTabControl()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.SizeMode = TabSizeMode.Fixed;
      this.Alignment = TabAlignment.Left;
      this.ItemSize = new Size(28, 115);
      this.DrawMode = TabDrawMode.OwnerDrawFixed;
      this.P1 = new Pen(Color.FromArgb(55, 55, 55));
      this.P2 = new Pen(Color.FromArgb(24, 24, 24));
      this.P3 = new Pen(Color.FromArgb(45, 45, 45), 2f);
      this.B1 = new SolidBrush(Color.FromArgb(50, 50, 50));
      this.B2 = new SolidBrush(Color.FromArgb(24, 24, 24));
      this.B3 = new SolidBrush(Color.FromArgb(51, 181, 229));
      this.B4 = new SolidBrush(Color.FromArgb(65, 65, 65));
      this.SF1 = new StringFormat();
      this.SF1.LineAlignment = StringAlignment.Center;
    }

    protected override void OnControlAdded(ControlEventArgs e)
    {
      if (e.Control is TabPage)
        e.Control.BackColor = Color.FromArgb(50, 50, 50);
      base.OnControlAdded(e);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(Color.FromArgb(50, 50, 50));
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      this.ItemHeight = checked (this.ItemSize.Height + 2);
      this.GP1 = ThemeModule.CreateRound(0, 0, checked (this.ItemHeight + 3), checked (this.Height - 1), 7);
      this.GP2 = ThemeModule.CreateRound(1, 1, checked (this.ItemHeight + 3), checked (this.Height - 3), 7);
      this.PB1 = new PathGradientBrush(this.GP1);
      this.PB1.CenterColor = Color.FromArgb(50, 50, 50);
      this.PB1.SurroundColors = new Color[1]
      {
        Color.FromArgb(45, 45, 45)
      };
      this.PB1.FocusScales = new PointF(0.8f, 0.95f);
      ThemeModule.G.FillPath((Brush) this.PB1, this.GP1);
      ThemeModule.G.DrawPath(this.P1, this.GP1);
      ThemeModule.G.DrawPath(this.P2, this.GP2);
      int num1 = checked (this.TabCount - 1);
      int index = 0;
      while (index <= num1)
      {
        this.R1 = this.GetTabRect(index);
        checked { this.R1.Y += 2; }
        checked { this.R1.Height -= 3; }
        checked { ++this.R1.Width; }
        checked { --this.R1.X; }
        this.TP1 = this.TabPages[index];
        this.Offset = 0;
        if (this.SelectedIndex == index)
        {
          ThemeModule.G.FillRectangle((Brush) this.B1, this.R1);
          int num2 = 0;
          do
          {
            ThemeModule.G.FillRectangle((Brush) this.B2, checked (this.R1.X + 5 + num2 * 5), checked (this.R1.Y + 6), 2, checked (this.R1.Height - 9));
            ThemeModule.G.SmoothingMode = SmoothingMode.None;
            ThemeModule.G.FillRectangle((Brush) this.B3, checked (this.R1.X + 5 + num2 * 5), checked (this.R1.Y + 5), 2, checked (this.R1.Height - 9));
            ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
            checked { this.Offset += 5; }
            checked { ++num2; }
          }
          while (num2 <= 1);
          ThemeModule.G.DrawRectangle(this.P3, checked (this.R1.X + 1), checked (this.R1.Y - 1), this.R1.Width, checked (this.R1.Height + 2));
          ThemeModule.G.DrawRectangle(this.P1, checked (this.R1.X + 1), checked (this.R1.Y + 1), checked (this.R1.Width - 2), checked (this.R1.Height - 2));
          ThemeModule.G.DrawRectangle(this.P2, this.R1);
        }
        else
        {
          int num3 = 0;
          do
          {
            ThemeModule.G.FillRectangle((Brush) this.B2, checked (this.R1.X + 5 + num3 * 5), checked (this.R1.Y + 6), 2, checked (this.R1.Height - 9));
            ThemeModule.G.SmoothingMode = SmoothingMode.None;
            ThemeModule.G.FillRectangle((Brush) this.B4, checked (this.R1.X + 5 + num3 * 5), checked (this.R1.Y + 5), 2, checked (this.R1.Height - 9));
            ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
            checked { this.Offset += 5; }
            checked { ++num3; }
          }
          while (num3 <= 1);
        }
        checked { this.R1.X += 5 + this.Offset; }
        this.R2 = this.R1;
        checked { ++this.R2.Y; }
        checked { ++this.R2.X; }
        ThemeModule.G.DrawString(this.TP1.Text, this.Font, Brushes.Black, (RectangleF) this.R2, this.SF1);
        ThemeModule.G.DrawString(this.TP1.Text, this.Font, Brushes.WhiteSmoke, (RectangleF) this.R1, this.SF1);
        checked { ++index; }
      }
      this.GP3 = ThemeModule.CreateRound(this.ItemHeight, 0, checked (this.Width - this.ItemHeight - 1), checked (this.Height - 1), 7);
      this.GP4 = ThemeModule.CreateRound(checked (this.ItemHeight + 1), 1, checked (this.Width - this.ItemHeight - 3), checked (this.Height - 3), 7);
      ThemeModule.G.DrawPath(this.P2, this.GP3);
      ThemeModule.G.DrawPath(this.P1, this.GP4);
    }
  }
}
