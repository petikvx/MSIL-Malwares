// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.SimpleSquare
// Assembly: Xe, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E8DDD59-A67B-4ABD-99CD-92D28751A620
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2fdfbfc735f43a4e2dce0c849b41ab83dd17228f6df983f7a95d6e427cdc77b0.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace SimpleChessApp.Game
{
  public class SimpleSquare : UserControl
  {
    private Color DefaultColor;
    private ChessPiece piece;
    private bool isBlackSquare;
    private IContainer components = (IContainer) null;
    public Panel panel1;

    public event EventHandler<MouseEventArgs> Click
    {
      add
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = -644949773;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -299312168)) % 4U)
          {
            case 0:
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u202B⁬‍‌‫⁪⁮‌⁯⁭‬⁬‎⁭‌⁮‎⁭⁮‍‫⁯‌⁬‏⁬‏⁫⁬⁫⁬‭‬‬‭⁮⁭‭⁬‮‮((Delegate) comparand, (Delegate) value), comparand);
              int num3 = eventHandler != comparand ? -1348374033 : (num3 = -1872049731);
              num1 = num3 ^ (int) num2 * 1652984937;
              continue;
            case 1:
              goto label_3;
            case 2:
              goto label_1;
            case 3:
              comparand = eventHandler;
              num1 = -44927132;
              continue;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
      remove
      {
        EventHandler<MouseEventArgs> eventHandler = this.Click;
label_1:
        int num1 = -2099119776;
        EventHandler<MouseEventArgs> comparand;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1359879350)) % 5U)
          {
            case 0:
              eventHandler = Interlocked.CompareExchange<EventHandler<MouseEventArgs>>(ref this.Click, (EventHandler<MouseEventArgs>) SimpleSquare.\u206A​‫⁭‌⁭⁭⁯⁭⁪‏‬‬⁭‌‌⁪⁪‎⁭⁪‎‎‌‌​‮⁪⁫⁬‏‭‮‭‍⁭‌‍‬‎‮((Delegate) comparand, (Delegate) value), comparand);
              num1 = (int) num2 * 54046734 ^ 732383917;
              continue;
            case 1:
              int num3 = eventHandler == comparand ? 1271976229 : (num3 = 2066994295);
              num1 = num3 ^ (int) num2 * -666546783;
              continue;
            case 2:
              goto label_3;
            case 3:
              comparand = eventHandler;
              num1 = -874775854;
              continue;
            case 4:
              goto label_1;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_7:;
      }
    }

    public ChessPiece Piece
    {
      get
      {
label_1:
        int num1 = -1393082996;
        ChessPiece piece;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1669264609)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -1859375258 ^ -1729599682;
              continue;
            case 3:
              piece = this.piece;
              num1 = (int) num2 * -29468147 ^ -2015176362;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return piece;
      }
      set
      {
label_1:
        int num1 = 1938228981;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 766913323)) % 8U)
          {
            case 0:
              this.piece = (ChessPiece) null;
              SimpleSquare.\u202D‫‮⁯⁯‍⁯⁭‭‬‭⁬‍⁯⁬⁮‬‌‎‎‭‌⁭‍⁯⁮‫‎⁬⁭⁯‎⁮‬‫​‭⁭‭⁪‮((Control) this, (Image) null);
              num1 = (int) num2 * -158467400 ^ 308283266;
              continue;
            case 1:
              num1 = (int) num2 * 1069787487 ^ -166109727;
              continue;
            case 2:
              SimpleSquare.\u202D‫‮⁯⁯‍⁯⁭‭‬‭⁬‍⁯⁬⁮‬‌‎‎‭‌⁭‍⁯⁮‫‎⁬⁭⁯‎⁮‬‫​‭⁭‭⁪‮((Control) this, this.repo.GetPiece(this.piece.Kind, this.piece.Color));
              num1 = 1987478743;
              continue;
            case 3:
              goto label_1;
            case 4:
              goto label_3;
            case 5:
              num1 = (int) num2 * 1731240425 ^ 1241848530;
              continue;
            case 6:
              this.piece = value;
              num1 = (int) num2 * -1539752717 ^ 1016888814;
              continue;
            case 7:
              int num3 = this.piece != null ? -638999799 : (num3 = -1574095365);
              num1 = num3 ^ (int) num2 * -1146270184;
              continue;
            default:
              goto label_10;
          }
        }
label_3:
        return;
label_10:;
      }
    }

    public void colorSquare()
    {
      this.DefaultColor = this.IsBlackSquare ? Color.CornflowerBlue : Color.WhiteSmoke;
label_1:
      int num1 = 169350145;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 205684073)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            SimpleSquare.\u200E‏‏‎‮‭⁯‌⁫‮‌⁯‍⁯⁫⁮⁫‪‪⁫⁬‏‭‍‎‭‫⁮‫⁬‮‏⁬‮⁪‭‌‪‎‍‮((Control) this, this.DefaultColor);
            num1 = (int) num2 * 251915840 ^ -1062877468;
            continue;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public Pieces Kind
    {
      set
      {
label_1:
        int num1 = 1269888279;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 2115514125)) % 4U)
          {
            case 0:
              goto label_3;
            case 1:
              this.Piece = this.Piece;
              num1 = (int) num2 * -671942033 ^ -580910906;
              continue;
            case 2:
              this.Piece.Kind = value;
              num1 = (int) num2 * -326859457 ^ 973138254;
              continue;
            case 3:
              goto label_1;
            default:
              goto label_6;
          }
        }
label_3:
        return;
label_6:;
      }
    }

    public bool IsBlackSquare
    {
      get
      {
label_1:
        int num1 = -1973190558;
        bool isBlackSquare;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -2086384471)) % 4U)
          {
            case 0:
              goto label_1;
            case 2:
              num1 = (int) num2 * -464703480 ^ 1779655676;
              continue;
            case 3:
              isBlackSquare = this.isBlackSquare;
              num1 = (int) num2 * 1717400063 ^ -721475046;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return isBlackSquare;
      }
      set
      {
        this.isBlackSquare = value;
label_1:
        int num1 = -2035849854;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -480234222)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_3;
            case 2:
              this.colorSquare();
              num1 = (int) num2 * 702400733 ^ -1129903767;
              continue;
            default:
              goto label_5;
          }
        }
label_3:
        return;
label_5:;
      }
    }

    public Repository repo
    {
      get
      {
label_1:
        int num1 = 96568161;
        Repository repo;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 499868217)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              repo = ChessContext.repo;
              num1 = (int) num2 * -1625874088 ^ -1858285747;
              continue;
            default:
              goto label_4;
          }
        }
label_4:
        return repo;
      }
    }

    public SimpleSquare()
    {
label_1:
      int num1 = 627755669;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 348883988)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            SimpleSquare.\u202B‫​‍‫​‮‌⁬‪⁮⁬​‏⁬​​⁪⁪‮⁬‌‮⁯‎‭⁬‌‪⁫​​⁫⁫‭‎⁫‮‮‌‮((Control) this.panel1, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * -1169833780 ^ -750846149;
            continue;
          case 2:
            this.InitializeComponent();
            num1 = (int) num2 * -1086902626 ^ -1490120378;
            continue;
          case 3:
            num1 = (int) num2 * -1075583487 ^ -1002787098;
            continue;
          case 4:
            SimpleSquare.\u202E‍‏‍‍⁫‪‎‪​‎​⁭‏⁭‏⁬‬⁪⁫⁫‪‭⁮‪⁬⁯‬​‭‫‌‍⁮‬‎⁮⁫‌‮‮((Control) this, new MouseEventHandler(this.Square_MouseClick));
            num1 = (int) num2 * 840865119 ^ -861147235;
            continue;
          case 5:
            num1 = (int) num2 * 16027336 ^ -446504461;
            continue;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    private void Square_MouseClick(object sender, MouseEventArgs e)
    {
label_1:
      int num1 = -1332901599;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1099379850)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * -1056765631 ^ 1818599033;
            continue;
          case 3:
            EventHandler<MouseEventArgs> click = this.Click;
            if (click != null)
            {
              click((object) this, e);
              num1 = (int) num2 * 129887122 ^ -695893934;
              continue;
            }
            goto label_5;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_5:;
    }

    public void HighLight()
    {
label_1:
      int num1 = 1024409161;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 358520207)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            SimpleSquare.\u200E‏‏‎‮‭⁯‌⁫‮‌⁯‍⁯⁫⁮⁫‪‪⁫⁬‏‭‍‎‭‫⁮‫⁬‮‏⁬‮⁪‭‌‪‎‍‮((Control) this, Color.ForestGreen);
            num1 = (int) num2 * -1804274013 ^ 1986747358;
            continue;
          case 3:
            num1 = (int) num2 * -1569962051 ^ 1262018349;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public void ClearHighLight() => SimpleSquare.\u200E‏‏‎‮‭⁯‌⁫‮‌⁯‍⁯⁫⁮⁫‪‪⁫⁬‏‭‍‎‭‫⁮‫⁬‮‏⁬‮⁪‭‌‪‎‍‮((Control) this, this.DefaultColor);

    public bool IsEmpty
    {
      get
      {
label_1:
        int num1 = -1117172298;
        bool isEmpty;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1821150516)) % 4U)
          {
            case 0:
              goto label_1;
            case 1:
              num1 = (int) num2 * -229636985 ^ 174619460;
              continue;
            case 2:
              isEmpty = this.Piece == null;
              num1 = (int) num2 * 1433758382 ^ 1439724757;
              continue;
            default:
              goto label_5;
          }
        }
label_5:
        return isEmpty;
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (!disposing)
        goto label_12;
label_1:
      int num1 = -1313668100;
label_2:
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2021245310)) % 10U)
        {
          case 0:
            num1 = (int) num2 * 250408164 ^ 1200880759;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num2 * 1927479300 ^ 1004585405;
            continue;
          case 3:
            num1 = (int) num2 * 882912257 ^ -19800198;
            continue;
          case 4:
            goto label_11;
          case 5:
            int num3 = !flag ? -684570063 : (num3 = -280422690);
            num1 = num3 ^ (int) num2 * 1294432004;
            continue;
          case 6:
            num1 = (int) num2 * 1659210966 ^ -1687712725;
            continue;
          case 7:
            base.Dispose(disposing);
            num1 = -2105796684;
            continue;
          case 8:
            goto label_1;
          case 9:
            SimpleSquare.\u206E⁯⁯⁯‭⁯‮‬​⁯⁯‍​⁫⁬‪⁪⁪​‫​‪⁯‬⁫‪⁪‬‏⁭‌‬⁪⁫⁪‬⁪⁮‭‍‮((IDisposable) this.components);
            num1 = (int) num2 * 380953188 ^ -1155263080;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:
      return;
label_11:
      int num4 = this.components != null ? 1 : 0;
      goto label_13;
label_12:
      num4 = 0;
label_13:
      flag = num4 != 0;
      num1 = -1796495807;
      goto label_2;
    }

    private void InitializeComponent()
    {
label_1:
      int num1 = 1057053830;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 589264478)) % 24U)
        {
          case 0:
            SimpleSquare.\u206C‫‭⁮‎‭⁯‭⁪‬⁭⁭‪⁯‫‏‮​‬⁪‪‬⁮‬⁭⁮‌⁭‬⁫⁭‪‭⁫‪‬‌⁯‌‫‮((ContainerControl) this, new SizeF(6f, 13f));
            num1 = (int) num2 * 818149891 ^ 1122312285;
            continue;
          case 1:
            SimpleSquare.\u200E‏‏‎‮‭⁯‌⁫‮‌⁯‍⁯⁫⁮⁫‪‪⁫⁬‏‭‍‎‭‫⁮‫⁬‮‏⁬‮⁪‭‌‪‎‍‮((Control) this.panel1, Color.Transparent);
            num1 = (int) num2 * -1753348696 ^ -931730876;
            continue;
          case 2:
            num1 = (int) num2 * -1229949434 ^ 421756380;
            continue;
          case 3:
            num1 = (int) num2 * 392053313 ^ 1866508800;
            continue;
          case 4:
            SimpleSquare.\u200F⁫‮‪⁭⁬⁫⁫‮⁫⁮⁮⁫‏‪‫⁬‪‮⁮​​⁪‎‍⁮‬⁮‫⁪‪‮‭‬‫⁫⁯⁮‎‍‮((Control) this.panel1, \u003CModule\u003E.\u202E‏‬‌⁯‪‬​⁭‌‎‬‮‮‍⁬‭​‍‭⁫‫‭⁫‮‪‮‏⁫‭⁬‎⁬​‏​‪‍‏‬‮<string>(4114509592U));
            num1 = (int) num2 * 447153039 ^ -1751055152;
            continue;
          case 5:
            SimpleSquare.\u202E⁭⁫‫‏‫⁫‎⁭‌‮⁯​⁭​⁬⁬‪⁫‌‮⁭‍‮⁭⁫‎‪⁬⁯⁭‫‬⁭‮‭‍⁪⁬⁭‮((ContainerControl) this, AutoScaleMode.Font);
            SimpleSquare.\u206B‍‮‬‮⁮‮‪​‬⁯‎‪⁫⁭‭‬‮‪‍‌‌⁪‏⁭⁬‪‏‫‏‏‏⁭‫‍‍⁭‭‎⁭‮((Control) this, ImageLayout.Center);
            num1 = (int) num2 * 994189706 ^ -1662571426;
            continue;
          case 6:
            goto label_3;
          case 7:
            SimpleSquare.\u202A⁮‎⁪‮‪‬‌‌‬⁯⁬⁫‏‬‫‭⁯‎‫‪⁭⁬‌‪⁬‬⁫⁫‎⁬⁮‏‎⁯⁫⁮‫⁬‮‮((Control) this);
            num1 = (int) num2 * 1128266604 ^ 1279503107;
            continue;
          case 8:
            num1 = (int) num2 * -1624841227 ^ 1576821640;
            continue;
          case 9:
            SimpleSquare.\u200C⁪​⁭‍‪⁭‪⁭‫‭⁬‮⁪⁬‌‏‌‭⁯​‪⁭‍⁭‪⁯‍‎‮​⁪⁮⁬‭⁫⁮​‫⁯‮((Control) this.panel1, 0);
            num1 = (int) num2 * -1313902051 ^ -1633011853;
            continue;
          case 10:
            SimpleSquare.\u206B‍‮‬‮⁮‮‪​‬⁯‎‪⁫⁭‭‬‮‪‍‌‌⁪‏⁭⁬‪‏‫‏‏‏⁭‫‍‍⁭‭‎⁭‮((Control) this.panel1, ImageLayout.Center);
            num1 = (int) num2 * 800325395 ^ 794979315;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num2 * -1966722047 ^ -1910386141;
            continue;
          case 13:
            SimpleSquare.\u202E‮⁭​‭‬​⁮‭‮‫‏⁬‭‍⁯‌‎‮‌⁬⁫⁫‎‎‏‫‌⁭‭‌⁮⁫‭‏⁭‪⁪⁬‏‮((Control) this, false);
            num1 = (int) num2 * 816086050 ^ -1593755453;
            continue;
          case 14:
            SimpleSquare.\u202C‎‭‭‫​‫‏⁮⁬⁯⁫‪‬‎⁫⁪⁪‫‎⁭‎‭‏‮‌⁭‫‌‬⁫‍‫⁬‫‍‪‎‎⁬‮(SimpleSquare.\u200E‮‎​⁪‮⁭⁭⁭‪⁬​‌‍⁬⁮‌​⁪‎‬⁯‬⁪⁪‍⁭⁬‪⁭‬⁯‭‭‫⁮⁫⁯‎‮‮((Control) this), (Control) this.panel1);
            num1 = (int) num2 * -817934436 ^ -1928775490;
            continue;
          case 15:
            num1 = (int) num2 * 181592303 ^ 689188217;
            continue;
          case 16:
            this.panel1 = SimpleSquare.\u202B‎‬‍​‪⁮‎‏⁮‌⁬‪​‪​⁪‬⁯‏‫‍⁬‭‌‭⁫‪⁯‏⁭⁫⁮‬⁮‮‪‪‮⁫‮();
            num1 = (int) num2 * -678786446 ^ 1553220081;
            continue;
          case 17:
            SimpleSquare.\u200E⁭⁮⁮⁮‪⁬⁫‬‌‏‫‭⁬‪⁪⁪​‬‍‎​‬‪⁬‪⁮‮‪​⁬‫⁮‎⁭‎‍‏‫⁮‮((Control) this, \u003CModule\u003E.\u200E‎⁯‪‍‏‫‎‮⁭​‬‫‌‮‭⁬‪⁪⁬⁭‮‏‎​‫‏‏‭‌⁫⁭⁮⁭‫⁯‭‫‭‫‮<string>(231268262U));
            num1 = (int) num2 * -1666945872 ^ 1223783561;
            continue;
          case 18:
            SimpleSquare.\u200B‏‪‏‮‌​⁪⁭​⁫‫‍‫‬⁫‬‏‎‪‏‎​​⁯‮‭⁪⁯⁪‍‪⁮‬​⁫‍⁯⁪⁭‮((Control) this.panel1, new Size(137, 132));
            num1 = (int) num2 * -2092691747 ^ -1345121551;
            continue;
          case 19:
            SimpleSquare.\u206C‏‎‭‍‫‫‏‏‮‬‏⁪‏‌‍‬‍⁬⁬‬⁮​‮‎‍‬⁫⁬⁬⁪​⁬‪‪⁫⁯‪‫‏‮((Control) this.panel1, DockStyle.Fill);
            num1 = (int) num2 * -479381296 ^ -1918919014;
            continue;
          case 20:
            SimpleSquare.\u200B⁭‎⁪‪⁯‎⁪⁮‎​‍⁭⁪⁭‮⁬‮‮⁯‌​⁬‍‬‎‫‬⁫​‌‫‎⁯‫⁪⁫⁯‮‏‮((Control) this.panel1, new Point(0, 0));
            num1 = (int) num2 * 234982378 ^ -1784266654;
            continue;
          case 21:
            num1 = (int) num2 * 512905911 ^ 313835844;
            continue;
          case 22:
            SimpleSquare.\u202A⁬‪‎⁫⁮‫⁮‮⁭⁬⁪⁯⁮⁫⁪‬⁬‍‪⁫‭‭‎‮⁫⁯⁮‌⁭‪‎‬‫⁭‭‫⁭‭‫‮((Control) this, new Padding(0));
            num1 = (int) num2 * 726967503 ^ 1515603840;
            continue;
          case 23:
            SimpleSquare.\u202A‬⁪‌‬‌‏​‫⁪⁮‮⁯‪‏‪‍‭‏‪⁭‫⁫‪⁮⁬‌​‫‫‬‫⁫‫‍‫⁯‭‫‏‮((Control) this, new Size(137, 132));
            num1 = (int) num2 * 1266902319 ^ 1321284690;
            continue;
          default:
            goto label_26;
        }
      }
label_3:
      return;
label_26:;
    }

    static Delegate \u202B⁬‍‌‫⁪⁮‌⁯⁭‬⁬‎⁭‌⁮‎⁭⁮‍‫⁯‌⁬‏⁬‏⁫⁬⁫⁬‭‬‬‭⁮⁭‭⁬‮‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Combine(obj0, obj1);
    }

    static Delegate \u206A​‫⁭‌⁭⁭⁯⁭⁪‏‬‬⁭‌‌⁪⁪‎⁭⁪‎‎‌‌​‮⁪⁫⁬‏‭‮‭‍⁭‌‍‬‎‮(
      [In] Delegate obj0,
      [In] Delegate obj1)
    {
      return Delegate.Remove(obj0, obj1);
    }

    static void \u202D‫‮⁯⁯‍⁯⁭‭‬‭⁬‍⁯⁬⁮‬‌‎‎‭‌⁭‍⁯⁮‫‎⁬⁭⁯‎⁮‬‫​‭⁭‭⁪‮([In] Control obj0, [In] Image obj1) => obj0.BackgroundImage = obj1;

    static void \u200E‏‏‎‮‭⁯‌⁫‮‌⁯‍⁯⁫⁮⁫‪‪⁫⁬‏‭‍‎‭‫⁮‫⁬‮‏⁬‮⁪‭‌‪‎‍‮([In] Control obj0, [In] Color obj1) => obj0.BackColor = obj1;

    static void \u202E‍‏‍‍⁫‪‎‪​‎​⁭‏⁭‏⁬‬⁪⁫⁫‪‭⁮‪⁬⁯‬​‭‫‌‍⁮‬‎⁮⁫‌‮‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u202B‫​‍‫​‮‌⁬‪⁮⁬​‏⁬​​⁪⁪‮⁬‌‮⁯‎‭⁬‌‪⁫​​⁫⁫‭‎⁫‮‮‌‮([In] Control obj0, [In] MouseEventHandler obj1) => obj0.MouseClick += obj1;

    static void \u206E⁯⁯⁯‭⁯‮‬​⁯⁯‍​⁫⁬‪⁪⁪​‫​‪⁯‬⁫‪⁪‬‏⁭‌‬⁪⁫⁪‬⁪⁮‭‍‮([In] IDisposable obj0) => obj0.Dispose();

    static Panel \u202B‎‬‍​‪⁮‎‏⁮‌⁬‪​‪​⁪‬⁯‏‫‍⁬‭‌‭⁫‪⁯‏⁭⁫⁮‬⁮‮‪‪‮⁫‮() => new Panel();

    static void \u202A⁮‎⁪‮‪‬‌‌‬⁯⁬⁫‏‬‫‭⁯‎‫‪⁭⁬‌‪⁬‬⁫⁫‎⁬⁮‏‎⁯⁫⁮‫⁬‮‮([In] Control obj0) => obj0.SuspendLayout();

    static void \u206B‍‮‬‮⁮‮‪​‬⁯‎‪⁫⁭‭‬‮‪‍‌‌⁪‏⁭⁬‪‏‫‏‏‏⁭‫‍‍⁭‭‎⁭‮([In] Control obj0, [In] ImageLayout obj1) => obj0.BackgroundImageLayout = obj1;

    static void \u206C‏‎‭‍‫‫‏‏‮‬‏⁪‏‌‍‬‍⁬⁬‬⁮​‮‎‍‬⁫⁬⁬⁪​⁬‪‪⁫⁯‪‫‏‮([In] Control obj0, [In] DockStyle obj1) => obj0.Dock = obj1;

    static void \u200B⁭‎⁪‪⁯‎⁪⁮‎​‍⁭⁪⁭‮⁬‮‮⁯‌​⁬‍‬‎‫‬⁫​‌‫‎⁯‫⁪⁫⁯‮‏‮([In] Control obj0, [In] Point obj1) => obj0.Location = obj1;

    static void \u200F⁫‮‪⁭⁬⁫⁫‮⁫⁮⁮⁫‏‪‫⁬‪‮⁮​​⁪‎‍⁮‬⁮‫⁪‪‮‭‬‫⁫⁯⁮‎‍‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u200B‏‪‏‮‌​⁪⁭​⁫‫‍‫‬⁫‬‏‎‪‏‎​​⁯‮‭⁪⁯⁪‍‪⁮‬​⁫‍⁯⁪⁭‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u200C⁪​⁭‍‪⁭‪⁭‫‭⁬‮⁪⁬‌‏‌‭⁯​‪⁭‍⁭‪⁯‍‎‮​⁪⁮⁬‭⁫⁮​‫⁯‮([In] Control obj0, [In] int obj1) => obj0.TabIndex = obj1;

    static void \u206C‫‭⁮‎‭⁯‭⁪‬⁭⁭‪⁯‫‏‮​‬⁪‪‬⁮‬⁭⁮‌⁭‬⁫⁭‪‭⁫‪‬‌⁯‌‫‮([In] ContainerControl obj0, [In] SizeF obj1) => obj0.AutoScaleDimensions = obj1;

    static void \u202E⁭⁫‫‏‫⁫‎⁭‌‮⁯​⁭​⁬⁬‪⁫‌‮⁭‍‮⁭⁫‎‪⁬⁯⁭‫‬⁭‮‭‍⁪⁬⁭‮(
      [In] ContainerControl obj0,
      [In] AutoScaleMode obj1)
    {
      obj0.AutoScaleMode = obj1;
    }

    static Control.ControlCollection \u200E‮‎​⁪‮⁭⁭⁭‪⁬​‌‍⁬⁮‌​⁪‎‬⁯‬⁪⁪‍⁭⁬‪⁭‬⁯‭‭‫⁮⁫⁯‎‮‮(
      [In] Control obj0)
    {
      return obj0.Controls;
    }

    static void \u202C‎‭‭‫​‫‏⁮⁬⁯⁫‪‬‎⁫⁪⁪‫‎⁭‎‭‏‮‌⁭‫‌‬⁫‍‫⁬‫‍‪‎‎⁬‮(
      [In] Control.ControlCollection obj0,
      [In] Control obj1)
    {
      obj0.Add(obj1);
    }

    static void \u202A⁬‪‎⁫⁮‫⁮‮⁭⁬⁪⁯⁮⁫⁪‬⁬‍‪⁫‭‭‎‮⁫⁯⁮‌⁭‪‎‬‫⁭‭‫⁭‭‫‮([In] Control obj0, [In] Padding obj1) => obj0.Margin = obj1;

    static void \u200E⁭⁮⁮⁮‪⁬⁫‬‌‏‫‭⁬‪⁪⁪​‬‍‎​‬‪⁬‪⁮‮‪​⁬‫⁮‎⁭‎‍‏‫⁮‮([In] Control obj0, [In] string obj1) => obj0.Name = obj1;

    static void \u202A‬⁪‌‬‌‏​‫⁪⁮‮⁯‪‏‪‍‭‏‪⁭‫⁫‪⁮⁬‌​‫‫‬‫⁫‫‍‫⁯‭‫‏‮([In] Control obj0, [In] Size obj1) => obj0.Size = obj1;

    static void \u202E‮⁭​‭‬​⁮‭‮‫‏⁬‭‍⁯‌‎‮‌⁬⁫⁫‎‎‏‫‌⁭‭‌⁮⁫‭‏⁭‪⁪⁬‏‮([In] Control obj0, [In] bool obj1) => obj0.ResumeLayout(obj1);
  }
}
