// Decompiled with JetBrains decompiler
// Type: ?2?
// Assembly: wLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89823795-D5B3-4CC9-949D-6649607AF138
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bndr-d893b556a8d0493f8839c80049bd91fd0bdbcb93646edcc7b2f28d89325ced11.exe

using System;
using System.IO;

public class \u003F2\u003F
{
  public byte[] \u003F1\u003F;
  private Stream \u003F0\u003F;
  private uint \u003F0\u003F;
  private bool \u003F0\u003F;
  private uint \u003F5\u003F;
  public uint \u003F4\u003F;
  public uint \u003F86\u003F;
  public uint \u003F7\u003F;
  private uint \u003F9\u003F;
  private uint \u003F11\u003F;
  private uint \u003F12\u003F;
  public uint \u003F87\u003F;

  public virtual void \u0003\u2009\u2001\u0002()
  {
  }

  public virtual void \u0003\u2009\u2001\u0003()
  {
  }

  public void \u003F50\u003F()
  {
    this.\u0003\u2009\u2001\u0002();
    int num1 = 0;
    uint num2;
    uint num3;
    uint index;
    while (true)
    {
      switch (num1)
      {
        case 0:
          num2 = this.\u003F4\u003F + this.\u003F7\u003F - this.\u003F9\u003F;
          num1 = 1;
          continue;
        case 1:
          num3 = this.\u003F4\u003F + this.\u003F87\u003F - num2;
          num1 = 2;
          continue;
        case 2:
          index = 0U;
          num1 = 3;
          continue;
        case 3:
          if (index < num3)
          {
            this.\u003F1\u003F[(IntPtr) index] = this.\u003F1\u003F[(IntPtr) (num2 + index)];
            num1 = 4;
            continue;
          }
          this.\u003F4\u003F -= num2;
          num1 = 5;
          continue;
        case 4:
          ++index;
          goto case 3;
        case 5:
          this.\u0003\u2009\u2001\u0003();
          num1 = 6;
          continue;
        default:
          goto label_10;
      }
    }
label_10:;
  }

  public virtual void \u0003\u2009\u2001\u0008()
  {
    if (this.\u003F0\u003F)
      return;
label_1:
    int count = -(int) this.\u003F4\u003F + (int) this.\u003F86\u003F - (int) this.\u003F87\u003F;
    int num1 = 0;
    int num2;
    uint num3;
    while (true)
    {
      switch (num1)
      {
        case 0:
          if (count != 0)
          {
            num2 = this.\u003F0\u003F.Read(this.\u003F1\u003F, (int) this.\u003F4\u003F + (int) this.\u003F87\u003F, count);
            num1 = 1;
            continue;
          }
          goto label_12;
        case 1:
          if (num2 != 0)
          {
            this.\u003F87\u003F += (uint) num2;
            num1 = 5;
            continue;
          }
          this.\u003F0\u003F = this.\u003F87\u003F;
          num1 = 2;
          continue;
        case 2:
          num3 = this.\u003F4\u003F + this.\u003F0\u003F;
          num1 = 3;
          continue;
        case 3:
          if (num3 > this.\u003F5\u003F)
            goto label_14;
label_8:
          this.\u003F0\u003F = true;
          num1 = 4;
          continue;
label_14:
          this.\u003F0\u003F = this.\u003F5\u003F - this.\u003F4\u003F;
          goto label_8;
        case 4:
          goto label_16;
        case 5:
          if (this.\u003F87\u003F >= this.\u003F7\u003F + this.\u003F11\u003F)
          {
            this.\u003F0\u003F = this.\u003F87\u003F - this.\u003F11\u003F;
            num1 = 6;
            continue;
          }
          goto label_1;
        default:
          goto label_1;
      }
    }
label_16:
    return;
label_12:;
  }

  private void \u003F0\u003F() => this.\u003F1\u003F = (byte[]) null;

  public void \u003F1\u003F(uint _param1, uint _param2, uint _param3)
  {
    this.\u003F9\u003F = _param1;
    int num1 = 0;
    while (true)
    {
      uint num2;
      switch (num1)
      {
        case 0:
          this.\u003F11\u003F = _param2;
          num1 = 1;
          continue;
        case 1:
          this.\u003F12\u003F = _param3;
          num1 = 2;
          continue;
        case 2:
          num2 = _param1 + _param2 + _param3;
          num1 = 3;
          continue;
        case 3:
          if (this.\u003F1\u003F == null || (int) this.\u003F86\u003F != (int) num2)
          {
            this.\u003F0\u003F();
            num1 = 4;
            continue;
          }
          break;
        case 4:
          this.\u003F86\u003F = num2;
          num1 = 5;
          continue;
        case 5:
          this.\u003F1\u003F = new byte[(IntPtr) this.\u003F86\u003F];
          break;
        default:
          goto label_10;
      }
      this.\u003F5\u003F = this.\u003F86\u003F - _param2;
      num1 = 6;
    }
label_10:;
  }

  public void \u003F51\u003F(Stream _param1)
  {
    this.\u003F0\u003F = _param1;
    this.\u003F4\u003F = 0U;
    this.\u003F7\u003F = 0U;
    this.\u003F87\u003F = 0U;
    this.\u003F0\u003F = false;
    this.\u0003\u2009\u2001\u0008();
  }

  public void \u003F51\u003F() => this.\u003F0\u003F = (Stream) null;

  public void \u003F52\u003F()
  {
    ++this.\u003F7\u003F;
    if (this.\u003F7\u003F <= this.\u003F0\u003F)
      return;
    if (this.\u003F4\u003F + this.\u003F7\u003F > this.\u003F5\u003F)
      goto label_3;
label_2:
    this.\u0003\u2009\u2001\u0008();
    return;
label_3:
    this.\u003F50\u003F();
    goto label_2;
  }

  public byte \u003F51\u003F(int _param1) => this.\u003F1\u003F[(long) (this.\u003F4\u003F + this.\u003F7\u003F) + (long) _param1];

  public uint \u003F51\u003F(int _param1, uint _param2, uint _param3)
  {
    if (this.\u003F0\u003F && (long) this.\u003F7\u003F + (long) _param1 + (long) _param3 > (long) this.\u003F87\u003F)
      goto label_8;
label_1:
    ++_param2;
    int num1 = 0;
    uint num2;
    uint num3;
    while (true)
    {
      switch (num1)
      {
        case 0:
          num2 = (uint) ((int) this.\u003F4\u003F + (int) this.\u003F7\u003F + _param1);
          num1 = 1;
          continue;
        case 1:
          num3 = 0U;
          num1 = 2;
          continue;
        default:
          goto label_6;
      }
    }
label_6:
    while (num3 < _param3 && (int) this.\u003F1\u003F[(IntPtr) (num2 + num3)] == (int) this.\u003F1\u003F[(IntPtr) (num2 + num3 - _param2)])
      ++num3;
    return num3;
label_8:
    _param3 = this.\u003F87\u003F - (uint) ((ulong) this.\u003F7\u003F + (ulong) _param1);
    goto label_1;
  }

  public uint \u003F51\u003F() => this.\u003F87\u003F - this.\u003F7\u003F;

  public void \u003F1\u003F(int _param1)
  {
    this.\u003F4\u003F += (uint) _param1;
    this.\u003F0\u003F -= (uint) _param1;
    this.\u003F7\u003F -= (uint) _param1;
    this.\u003F87\u003F -= (uint) _param1;
  }
}
