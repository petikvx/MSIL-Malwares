// Decompiled with JetBrains decompiler
// Type: IntersectingShapes.Shape
// Assembly: 太城hضd氏bTنH, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FB883643-FAF4-44BB-B4FC-F1B0FC1059A6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\Backdoor.Win32.Androm.uluz-2b99f5aaaa6cfc4766e8c7eaafe2cabccccd31ced962d84f0bc1cf97bc9a1e23.exe

using System;

namespace IntersectingShapes
{
  public abstract class Shape
  {
    public int NoOfSides { get; set; }

    public int Dimension { get; set; }

    public string ShapeName { get; set; }

    public Point[] Coordinates { get; set; }

    public Point[][] Segments { get; set; }

    public Vector[] Edges { get; set; }

    public abstract bool IsShapeValid();

    public void PrintCoordinates()
    {
      if (!this.IsShapeValid())
        return;
      Console.Write(string.Format("{0}: ", (object) this.ShapeName));
      for (int index = 0; index < this.NoOfSides; ++index)
      {
        Console.Write(string.Format("({0},", (object) this.Coordinates[index].x));
        Console.Write(this.Coordinates[index].y);
        if (this.Dimension == 3)
          Console.Write(string.Format(",{0}", (object) this.Coordinates[index].z));
        Console.Write(")");
      }
      Console.WriteLine();
    }

    public Shape(int dimension = 2) => this.Dimension = dimension;
  }
}
