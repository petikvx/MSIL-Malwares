// Decompiled with JetBrains decompiler
// Type: SC_aio.ct
// Assembly: SCaio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4039BEB0-723F-44D4-B6A2-6115173D2A3D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.asho-8d599606a9e08d397b994f3c1f6ab611585cb198.exe

using Microsoft.VisualBasic.CompilerServices;
using SC_aio.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace SC_aio
{
  [DesignerGenerated]
  public class ct : Form
  {
    private IContainer components;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    [AccessedThroughProperty("ListBox1")]
    private ListBox _ListBox1;
    [AccessedThroughProperty("ListBox2")]
    private ListBox _ListBox2;
    [AccessedThroughProperty("ListBox3")]
    private ListBox _ListBox3;

    public ct() => this.InitializeComponent();

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.Button2 = new Button();
      this.ListBox1 = new ListBox();
      this.ListBox2 = new ListBox();
      this.ListBox3 = new ListBox();
      this.SuspendLayout();
      Button button2_1 = this.Button2;
      Point point1 = new Point(12, 387);
      Point point2 = point1;
      button2_1.Location = point2;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      Size size1 = new Size(313, 23);
      Size size2 = size1;
      button2_2.Size = size2;
      this.Button2.TabIndex = 7;
      this.Button2.Text = "Get contests";
      this.Button2.UseVisualStyleBackColor = true;
      this.ListBox1.FormattingEnabled = true;
      ListBox listBox1_1 = this.ListBox1;
      point1 = new Point(12, 12);
      Point point3 = point1;
      listBox1_1.Location = point3;
      this.ListBox1.Name = "ListBox1";
      ListBox listBox1_2 = this.ListBox1;
      size1 = new Size(313, 121);
      Size size3 = size1;
      listBox1_2.Size = size3;
      this.ListBox1.TabIndex = 4;
      this.ListBox2.FormattingEnabled = true;
      ListBox listBox2_1 = this.ListBox2;
      point1 = new Point(12, 136);
      Point point4 = point1;
      listBox2_1.Location = point4;
      this.ListBox2.Name = "ListBox2";
      ListBox listBox2_2 = this.ListBox2;
      size1 = new Size(313, 121);
      Size size4 = size1;
      listBox2_2.Size = size4;
      this.ListBox2.TabIndex = 4;
      this.ListBox3.FormattingEnabled = true;
      ListBox listBox3_1 = this.ListBox3;
      point1 = new Point(12, 260);
      Point point5 = point1;
      listBox3_1.Location = point5;
      this.ListBox3.Name = "ListBox3";
      ListBox listBox3_2 = this.ListBox3;
      size1 = new Size(313, 121);
      Size size5 = size1;
      listBox3_2.Size = size5;
      this.ListBox3.TabIndex = 8;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(337, 417);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.ListBox3);
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.ListBox2);
      this.Controls.Add((Control) this.ListBox1);
      this.Name = nameof (ct);
      this.Text = "Contests";
      this.ResumeLayout(false);
    }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    internal virtual ListBox ListBox1
    {
      get => this._ListBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox1 = value;
    }

    internal virtual ListBox ListBox2
    {
      get => this._ListBox2;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox2 = value;
    }

    internal virtual ListBox ListBox3
    {
      get => this._ListBox3;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox3 = value;
    }

    public object getJackpot(bool str = false)
    {
      string str1 = Conversions.ToString(MyProject.Forms.aio.sendPost("http://" + MyProject.Forms.aio.domain + "/members/pts/jackpot/index.php", ""));
      string str2 = "<div><b>";
      List<string> jackpot1 = new List<string>();
      while (str1.Contains(str2))
      {
        string str3 = str1.Remove(0, checked (str1.IndexOf(str2) + 8));
        string str4 = str3.Split('<')[0];
        str1 = str3.Remove(0, checked (str3.IndexOf("$") + 1));
        string[] strArray = str1.Split('<');
        jackpot1.Add(str4 + "|" + strArray[0]);
      }
      if (!str)
        return (object) jackpot1;
      string jackpot2 = jackpot1[0];
      bool flag = true;
      try
      {
        foreach (string str5 in jackpot1)
        {
          if (!flag)
            jackpot2 = jackpot2 + "|" + str5;
          else
            flag = false;
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return (object) jackpot2;
    }

    public object getContest(string type, bool str = false)
    {
      if (Operators.CompareString(type, "offer", false) == 0)
        type = "pts.php";
      else if (Operators.CompareString(type, "referral", false) == 0)
        type = "ref.php";
      else if (Operators.CompareString(type, "click", false) == 0)
        type = "ptc.php";
      string str1 = Conversions.ToString(MyProject.Forms.aio.sendPost("http://" + MyProject.Forms.aio.domain + "/contests/" + type, ""));
      string str2 = "<td><b>";
      List<string> contest1 = new List<string>();
      while (str1.Contains(str2))
      {
        str1 = str1.Remove(0, checked (str1.IndexOf(str2) + 7));
        string[] strArray = str1.Split('<');
        contest1.Add(strArray[0]);
      }
      if (!str)
        return (object) contest1;
      string contest2 = contest1[0];
      bool flag = true;
      try
      {
        foreach (string str3 in contest1)
        {
          if (!flag)
            contest2 = contest2 + "|" + str3;
          else
            flag = false;
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return (object) contest2;
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      List<string> contest1 = (List<string>) this.getContest("offer");
      List<string> contest2 = (List<string>) this.getContest("referral");
      List<string> contest3 = (List<string>) this.getContest("click");
      List<string> jackpot = (List<string>) this.getJackpot();
      try
      {
        foreach (object obj in contest1)
          this.ListBox1.Items.Add(obj);
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (object obj in contest2)
          this.ListBox2.Items.Add(obj);
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (object obj in contest3)
          this.ListBox3.Items.Add(obj);
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      try
      {
        foreach (object obj in jackpot)
          this.ListBox3.Items.Add(obj);
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }
  }
}
