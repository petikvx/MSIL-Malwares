// Decompiled with JetBrains decompiler
// Type: 896890811494.281886728672
// Assembly: 341658236064, Version=3.1.2.23007, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 307D4BC7-4605-49A1-A696-CC8CC5C1D6BD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-9d52a7814f157b00620b7405701cf26d9edc2be1ad2620905db66c87fcee811b.exe

using \u003194072293457;
using \u003253358266500;
using \u003896890811494;
using \u003993883713165;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.Globalization;

namespace \u003896890811494
{
  public abstract class \u003281886728672 : Task
  {
    private \u003764798047079 \u003042999024399;

    internal \u003281886728672(\u003764798047079 logger = null) => this.\u003042999024399 = logger;

    internal \u003764798047079 \u003868242702593
    {
      get
      {
        if (this.\u003042999024399 == null)
          this.\u003042999024399 = (\u003764798047079) new \u003583718589958(base.Log);
        return this.\u003042999024399;
      }
    }

    public virtual bool \u003061072687706()
    {
      try
      {
        this.ExecuteCore();
      }
      catch (\u003606057521981 ex)
      {
        this.\u003868242702593.\u003546249343367(ex.Message);
      }
      catch (Exception ex)
      {
        this.\u003556530384287("taskBaseCatchException", ex);
        throw;
      }
      return !this.\u003868242702593.\u003700094655109;
    }

    private void \u003556530384287(string _param1, Exception _param2)
    {
      if (!(this.BuildEngine is IBuildEngine5 buildEngine))
        return;
      string str = _param1;
      buildEngine.LogTelemetry(str, (IDictionary<string, string>) new Dictionary<string, string>()
      {
        {
          "exceptionType",
          _param2.GetType().ToString()
        },
        {
          "detail",
          \u003281886728672.\u003533471453300(_param2)
        }
      });
    }

    private static string \u003533471453300(Exception _param0)
    {
      if (!(_param0 is AggregateException aggregateException))
        return \u003281886728672.\u003307810156818(_param0);
      string str = \u003281886728672.\u003307810156818((Exception) aggregateException);
      for (int index = 0; index < aggregateException.InnerExceptions.Count; ++index)
        str = string.Format((IFormatProvider) CultureInfo.InvariantCulture, "{0}{1}---> (Inner Exception #{2}) {3}{4}{5}", (object) str, (object) Environment.NewLine, (object) index, (object) \u003281886728672.\u003533471453300(aggregateException.InnerExceptions[index]), (object) "<---", (object) Environment.NewLine);
      return str;
    }

    private static string \u003307810156818(Exception _param0)
    {
      string str = _param0.GetType().ToString();
      if (_param0.InnerException != null)
        str = str + " ---> " + \u003281886728672.\u003533471453300(_param0.InnerException) + Environment.NewLine + "   --- End of inner exception stack trace ---";
      string stackTrace = _param0.StackTrace;
      if (stackTrace != null)
        str = str + Environment.NewLine + stackTrace;
      return str;
    }

    protected abstract void ExecuteCore();
  }
}
