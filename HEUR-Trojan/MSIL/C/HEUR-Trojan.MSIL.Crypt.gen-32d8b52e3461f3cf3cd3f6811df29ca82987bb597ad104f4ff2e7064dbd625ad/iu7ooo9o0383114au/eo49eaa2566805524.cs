// Decompiled with JetBrains decompiler
// Type: iu7ooo9o0383114au.eo49eaa2566805524
// Assembly: e52a71747iaa0aa11, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cac503e1823ce71c
// MVID: 0D894068-CF68-44D1-88F9-023D8A694267
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan.MSIL.Crypt.gen-32d8b52e3461f3cf3cd3f6811df29ca82987bb597ad104f4ff2e7064dbd625ad.exe

using a48ua21au4782980o;
using Microsoft;
using Microsoft.VisualStudio.Threading;
using System;
using System.Buffers;
using System.IO;
using System.IO.Pipelines;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;

namespace iu7ooo9o0383114au
{
  internal class eo49eaa2566805524 : Stream, IDisposableObservable, IDisposable
  {
    private readonly PipeWriter au13e4e9ua2u8ua6u;
    private readonly PipeReader \u0033u6i9i11o78aa30o2;
    private bool \u00370u54i02478111906;

    internal eo49eaa2566805524(PipeReader reader)
    {
      Requires.NotNull<PipeReader>(reader, nameof (reader));
      this.\u0033u6i9i11o78aa30o2 = reader;
    }

    internal eo49eaa2566805524(IDuplexPipe pipe)
    {
      Requires.NotNull<IDuplexPipe>(pipe, nameof (pipe));
      this.au13e4e9ua2u8ua6u = pipe.Output;
      this.\u0033u6i9i11o78aa30o2 = pipe.Input;
    }

    public bool \u00321u91au11ioa80908 { get; private set; }

    public virtual bool \u0036e0377i09344i801a => !this.\u00321u91au11ioa80908 && this.\u0033u6i9i11o78aa30o2 != null;

    public virtual bool aoo48u6ie1391iu8u => false;

    public virtual bool \u003775512324e62873a2 => !this.\u00321u91au11ioa80908 && this.au13e4e9ua2u8ua6u != null;

    public virtual long \u0038u14938016iao9o36 => throw this.\u0030o2o218ue97oe6376((Exception) new NotSupportedException());

    public virtual long \u00368a44i6e7615329e1
    {
      get => throw this.\u0030o2o218ue97oe6376((Exception) new NotSupportedException());
      set => throw this.\u0030o2o218ue97oe6376((Exception) new NotSupportedException());
    }

    public virtual Task e65uuua2o5921a4ou(CancellationToken i3a9a96857uouaea6)
    {
      // ISSUE: variable of a compiler-generated type
      eo49eaa2566805524.\u003107e7aee8o77306a1 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0033i02473552ou2i508 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u00389421961i437e4574 = i3a9a96857uouaea6;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u00347ao31e26958u3aao = AsyncTaskMethodBuilder.Create();
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0031uu8o10uuo059i99o = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u00347ao31e26958u3aao.Start<eo49eaa2566805524.\u003107e7aee8o77306a1>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u00347ao31e26958u3aao.Task;
    }

    public virtual long ao660396338uu420i(long _param1, SeekOrigin _param2) => throw this.\u0030o2o218ue97oe6376((Exception) new NotSupportedException());

    public virtual void \u00300a2e1eu3668io923(long _param1) => throw this.\u0030o2o218ue97oe6376((Exception) new NotSupportedException());

    public virtual Task iio3a4524340o3a83(
      byte[] _param1,
      int _param2,
      int _param3,
      CancellationToken _param4)
    {
      Requires.NotNull<byte[]>(_param1, "buffer");
      Requires.Range(_param2 + _param3 <= _param1.Length, "count", (string) null);
      Requires.Range(_param2 >= 0, "offset", (string) null);
      Requires.Range(_param3 >= 0, "count", (string) null);
      Verify.NotDisposed((IDisposableObservable) this, (string) null);
      if (this.au13e4e9ua2u8ua6u == null)
        throw new NotSupportedException();
      _param4.ThrowIfCancellationRequested();
      BuffersExtensions.Write<byte>((IBufferWriter<byte>) this.au13e4e9ua2u8ua6u, Span<byte>.op_Implicit(MemoryExtensions.AsSpan<byte>(_param1, _param2, _param3)));
      return TplExtensions.CompletedTask;
    }

    public virtual Task<int> \u003427993ei62eo3848e(
      byte[] _param1,
      int _param2,
      int _param3,
      CancellationToken _param4)
    {
      // ISSUE: variable of a compiler-generated type
      eo49eaa2566805524.a1ooo37i7148620a9 stateMachine;
      // ISSUE: reference to a compiler-generated field
      stateMachine.uui2oe16049u8a3u3 = this;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0036216u214eoa4o96e5 = _param1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.i838651776u452a96 = _param2;
      // ISSUE: reference to a compiler-generated field
      stateMachine.a232775941ee1307i = _param3;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0036o9o17a6870i22u60 = _param4;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0031o0212898ue83e42o = AsyncTaskMethodBuilder<int>.Create();
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0033e2059654ouua6502 = -1;
      // ISSUE: reference to a compiler-generated field
      stateMachine.\u0031o0212898ue83e42o.Start<eo49eaa2566805524.a1ooo37i7148620a9>(ref stateMachine);
      // ISSUE: reference to a compiler-generated field
      return stateMachine.\u0031o0212898ue83e42o.Task;
    }

    public virtual void \u003965596e2i9eo8246u() => this.au13e4e9ua2u8ua6u.FlushAsync(new CancellationToken()).GetAwaiter().GetResult();

    public virtual int \u0033i78oa26647510oao(byte[] _param1, int _param2, int _param3) => this.ReadAsync(_param1, _param2, _param3).GetAwaiter().GetResult();

    public virtual void \u003062e18i52o9039ueo(
      byte[] o317u983i3995oiau,
      int u161io818aa469oa7,
      int _param3)
    {
      this.WriteAsync(o317u983i3995oiau, u161io818aa469oa7, _param3).GetAwaiter().GetResult();
    }

    protected override void Dispose(bool disposing)
    {
      this.\u00321u91au11ioa80908 = true;
      this.\u0033u6i9i11o78aa30o2?.CancelPendingRead();
      this.\u0033u6i9i11o78aa30o2?.Complete((Exception) null);
      this.au13e4e9ua2u8ua6u?.CancelPendingFlush();
      this.au13e4e9ua2u8ua6u?.Complete((Exception) null);
      base.Dispose(disposing);
    }

    private T \u00356o6889aeioa50a22<T>(T _param1)
    {
      Verify.NotDisposed((IDisposableObservable) this, (string) null);
      return _param1;
    }

    private Exception \u0030o2o218ue97oe6376(Exception _param1)
    {
      Verify.NotDisposed((IDisposableObservable) this, (string) null);
      throw _param1;
    }

    private int \u00339aa913ii345o1iei(Span<byte> _param1, ReadResult aeea39647aea4ua36)
    {
      if (((ReadResult) ref aeea39647aea4ua36).IsCanceled && this.\u00321u91au11ioa80908)
        return 0;
      long num = Math.Min((long) _param1.Length, ((ReadResult) ref aeea39647aea4ua36).Buffer.Length);
      ReadOnlySequence<byte> readOnlySequence = ((ReadResult) ref aeea39647aea4ua36).Buffer.Slice(0L, num);
      BuffersExtensions.CopyTo<byte>(ref readOnlySequence, _param1);
      this.\u0033u6i9i11o78aa30o2.AdvanceTo(readOnlySequence.End);
      if (((ReadResult) ref aeea39647aea4ua36).IsCompleted)
      {
        this.\u0033u6i9i11o78aa30o2.Complete((Exception) null);
        this.\u00370u54i02478111906 = true;
      }
      return (int) num;
    }

    public eo49eaa2566805524(
      IBufferWriter<T0> innerWriter,
      int prefixSize,
      int payloadSizeHint = 0,
      MemoryPool<T0> memoryPool = null)
    {
      if (prefixSize <= 0)
        throw new ArgumentOutOfRangeException(nameof (prefixSize));
      ((\u0034i5u247ui920952ue<T0>) this).innerWriter = innerWriter ?? throw new ArgumentNullException(nameof (innerWriter));
      ((\u0034i5u247ui920952ue<T0>) this).expectedPrefixSize = prefixSize;
      ((\u0034i5u247ui920952ue<T0>) this).payloadSizeHint = payloadSizeHint;
      ((\u0034i5u247ui920952ue<T0>) this).memoryPool = memoryPool ?? MemoryPool<T0>.Shared;
    }
  }
}
