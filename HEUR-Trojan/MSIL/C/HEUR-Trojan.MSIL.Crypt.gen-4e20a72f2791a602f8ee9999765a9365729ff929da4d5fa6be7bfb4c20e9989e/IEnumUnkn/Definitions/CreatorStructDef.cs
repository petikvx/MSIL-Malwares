// Decompiled with JetBrains decompiler
// Type: IEnumUnkn.Definitions.CreatorStructDef
// Assembly: IEnumUnkn, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FA80F1E7-116A-4A8E-96EA-FFB7A6C2BB6E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-4e20a72f2791a602f8ee9999765a9365729ff929da4d5fa6be7bfb4c20e9989e.exe

using IEnumUnkn.Attributes;
using IEnumUnkn.Candidates;
using IEnumUnkn.Collections;
using IEnumUnkn.Mappers;
using IEnumUnkn.Rules;
using IEnumUnkn.Structs;
using RiskGame;
using RiskGame.Connections;
using RiskGame.Game;
using RiskGame.Listeners;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Shapes;

namespace IEnumUnkn.Definitions
{
  public class CreatorStructDef : Window, IComponentConnector, IStyleConnector
  {
    private List<Player> m_Exception;
    private List<SolidColorBrush> strategy;
    private bool _Property;
    private bool observer;
    private bool resolver;
    internal StackPanel panel_MainUI;
    internal StackPanel stckPlayers;
    internal Button btnPlayer1Back;
    internal Rectangle rectPlayer1Color;
    internal Button btnPlayer1Forward;
    internal Label lblPlayer1;
    internal Border panelPlayer2;
    internal Button btnPlayer2Back;
    internal Rectangle rectPlayer2Color;
    internal Button btnPlayer2Forward;
    internal Label lblPlayer2;
    internal Border panelPlayer3;
    internal Button btnPlayer3Back;
    internal Rectangle rectPlayer3Color;
    internal Button btnPlayer3Forward;
    internal Label lblPlayer3;
    internal Border panelPlayer4;
    internal Button btnPlayer4Back;
    internal Rectangle rectPlayer4Color;
    internal Button btnPlayer4Forward;
    internal Label lblPlayer4;
    internal Border panelPlayer5;
    internal Button btnPlayer5Back;
    internal Rectangle rectPlayer5Color;
    internal Button btnPlayer5Forward;
    internal Label lblPlayer5;
    internal Border panelPlayer6;
    internal Button btnPlayer6Back;
    internal Rectangle rectPlayer6Color;
    internal Button btnPlayer6Forward;
    internal Label lblPlayer6;
    internal Label lblPlayer6Type;
    internal ComboBox cmbPlayer6;
    internal Button btnAddPlayer;
    internal ComboBox cmbMap;
    internal ComboBox cmbGameMode;
    internal CheckBox chkTimerEnabled;
    internal StackPanel panel_Time;
    internal Slider sldTime;
    internal StackPanel panel_Bias;
    internal Slider sldBias;
    internal CheckBox chkRandomise;
    internal Button btnNewGame;
    internal Button btnNewGameSettings;
    internal Label lblErrorAlt;
    internal TextBlock txtErrorAlt;
    internal StackPanel panel_LoadGame;
    internal DataGrid GameList;
    internal Label lblError;
    internal TextBlock txtError;
    internal DockPanel panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool specification;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Property;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        if (!CreatorStructDef.CalculateObject())
          goto label_3;
label_1:
        this.mediaplayer.Play();
        goto label_7;
label_3:
        bool flag1;
        while (true)
        {
          int num2;
          bool flag2;
          switch (num1)
          {
            case 0:
            case 1:
              if (flag2)
              {
                try
                {
                  ((Human) this.m_Exception[0]).m_Item = value;
                  int num3 = 2;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 2:
                        goto label_11;
                      case 1:
                      case 3:
                        goto label_16;
                      default:
                        num3 = 3;
                        continue;
                    }
                  }
label_11:
                  Human.TestRequest(this.m_Exception[0] as Human);
                }
                catch
                {
                  this.ChangeRequest("An error has occurred. Your music preferences have not been saved.");
                }
label_16:;
              }
              if (!value)
              {
                flag1 = !value;
                num2 = 6;
                break;
              }
              num2 = 4;
              break;
            case 2:
            case 4:
              goto label_1;
            case 3:
              flag2 = this.m_Exception.Count != 0;
              if (CreatorStructDef.IncludeObject())
              {
                num1 = 0;
                continue;
              }
              goto label_20;
            case 5:
              goto label_7;
            case 6:
              goto label_5;
            case 7:
              goto label_14;
            default:
              num2 = 5;
              break;
          }
          num1 = num2;
        }
label_14:
        return;
label_5:
        if (flag1)
        {
          this.mediaplayer.Pause();
          goto label_7;
        }
        else
          goto label_7;
label_20:
        return;
label_7:
        this._Property = value;
        num1 = 7;
        goto label_3;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.observer;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        if (true)
          goto label_11;
label_1:
        try
        {
          ((Human) this.m_Exception[0]).wrapper = value;
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                goto label_3;
              case 1:
              case 3:
                goto label_7;
              default:
                num2 = 3;
                continue;
            }
          }
label_3:
          Human.TestRequest(this.m_Exception[0] as Human);
        }
        catch
        {
          this.ChangeRequest("An error has occurred. Your music preferences have not been saved.");
        }
label_7:
label_8:
        this.observer = value;
        if (CreatorStructDef.IncludeObject())
        {
          num1 = 5;
          goto label_11;
        }
label_9:
        bool flag;
        if (!flag)
          goto label_8;
        else
          goto label_1;
label_11:
        while (true)
        {
          switch (num1)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
            case 3:
              goto label_9;
            case 4:
              flag = this.m_Exception.Count != 0;
              num1 = 3;
              continue;
            case 5:
              goto label_10;
            default:
              num1 = 0;
              continue;
          }
        }
label_10:;
      }
    }

    public bool Timer_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.resolver;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                flag = !value;
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_12;
              case 1:
              case 2:
                goto label_3;
              case 4:
                if (!flag)
                {
                  this.sldTime.Minimum = 20.0;
                  if (CreatorStructDef.IncludeObject())
                  {
                    num2 = 5;
                    continue;
                  }
                  goto label_3;
                }
                else
                  goto label_10;
              case 5:
                goto label_7;
              case 6:
                goto label_8;
              case 7:
                goto label_1;
              default:
                goto label_6;
            }
          }
label_3:
          this.sldTime.Minimum = 0.0;
          this.sldTime.Value = 0.0;
          this.panel_Time.Visibility = Visibility.Collapsed;
          goto label_8;
label_6:
          num1 = 6;
          continue;
label_7:
          this.sldTime.Value = 30.0;
          this.panel_Time.Visibility = Visibility.Visible;
label_8:
          this.resolver = value;
          num1 = 7;
          continue;
label_10:
          num1 = 1;
        }
label_1:
        return;
label_12:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CreatorStructDef(List<Player> config, bool forcevisitor)
    {
      ListenerManager.InitStub();
      this.m_Exception = new List<Player>();
      this.strategy = new List<SolidColorBrush>()
      {
        Brushes.OrangeRed,
        Brushes.DeepSkyBlue,
        Brushes.LimeGreen,
        Brushes.Gold,
        Brushes.Red,
        Brushes.Violet,
        Brushes.Blue
      };
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.InitializeComponent();
      this.m_Exception = config;
      this.StateChanged += new EventHandler(((StubServiceMapper) Application.Current).CalcRequest);
      this.DataContext = (object) this;
      this.resolver = true;
      this.Music_enabled = ((Human) this.m_Exception[0]).m_Item;
      this.Hints_enabled = ((Human) this.m_Exception[0]).wrapper;
      if (this._Property)
        this.mediaplayer.Play();
      List<Human> reference = new List<Human>();
      foreach (Player player in this.m_Exception)
      {
        if (player is Human)
          reference.Add(player as Human);
      }
      ObservableCollection<Importer> observableCollection = AdapterGetterCandidate.VisitMapper(reference);
      if (observableCollection == null || observableCollection.Count == 0)
      {
        this.panel_LoadGame.Visibility = Visibility.Collapsed;
        this.btnNewGameSettings.Visibility = Visibility.Visible;
        this.btnNewGame.Width = 150.0;
      }
      this.GameList.ItemsSource = (IEnumerable) observableCollection;
      this.lblPlayer1.Content = (object) this.m_Exception[0].WriteField();
      if (this.m_Exception.Count >= 2)
      {
        this.panelPlayer2.Visibility = Visibility.Visible;
        this.InstantiateRequest((object) this.btnPlayer2Forward);
        this.lblPlayer2.Content = (object) this.m_Exception[1].WriteField();
        this.lblPlayer6.Content = (object) "Player 3";
      }
      if (this.m_Exception.Count >= 3)
      {
        this.panelPlayer3.Visibility = Visibility.Visible;
        this.InstantiateRequest((object) this.btnPlayer3Forward);
        this.lblPlayer3.Content = (object) this.m_Exception[2].WriteField();
        this.lblPlayer6.Content = (object) "Player 4";
      }
      if (this.m_Exception.Count >= 4)
      {
        this.panelPlayer4.Visibility = Visibility.Visible;
        this.InstantiateRequest((object) this.btnPlayer4Forward);
        this.lblPlayer4.Content = (object) this.m_Exception[3].WriteField();
        this.lblPlayer6.Content = (object) "Player 5";
      }
      if (this.m_Exception.Count >= 5)
      {
        this.panelPlayer5.Visibility = Visibility.Visible;
        this.InstantiateRequest((object) this.btnPlayer5Forward);
        this.lblPlayer5.Content = (object) this.m_Exception[4].WriteField();
        this.lblPlayer6.Content = (object) "Player 6";
      }
      if (this.m_Exception.Count >= 6)
      {
        this.panelPlayer6.Visibility = Visibility.Visible;
        this.InstantiateRequest((object) this.btnPlayer6Forward);
        this.lblPlayer6.Content = (object) this.m_Exception[5].WriteField();
        this.lblPlayer6Type.Visibility = Visibility.Visible;
        this.cmbPlayer6.Visibility = Visibility.Collapsed;
        this.btnAddPlayer.IsEnabled = false;
      }
      if (!forcevisitor)
        return;
      ((StubServiceMapper) Application.Current).ConnectRequest((Window) this);
      ((StubServiceMapper) Application.Current).InitRequest((Window) this);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AssetRequest(object res, RoutedEventArgs connection) => this.InstantiateRequest(res);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AddPlayer(object sender, RoutedEventArgs e)
    {
      int num1 = 6;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_2;
            case 1:
            case 4:
              if (!flag)
              {
                if (this.cmbPlayer6.SelectedIndex == 0)
                {
                  if (true)
                  {
                    num2 = 0;
                    continue;
                  }
                  goto label_6;
                }
                else
                  goto label_3;
              }
              else
                goto label_11;
            case 2:
            case 3:
              goto label_6;
            case 5:
              goto label_13;
            case 6:
              goto label_1;
            case 7:
              goto label_12;
            default:
              goto label_9;
          }
        }
label_1:
        flag = this.cmbPlayer6.SelectedIndex == 1;
        num1 = 4;
        continue;
label_2:
        MessageBridgeRule messageBridgeRule = new MessageBridgeRule(this.m_Exception, ((StubServiceMapper) Application.Current).VisitRequest((Window) this));
        Application.Current.MainWindow = (Window) messageBridgeRule;
        this.Close();
        messageBridgeRule.Show();
        num1 = 7;
        continue;
label_9:
        num1 = 5;
        continue;
label_11:
        num1 = 3;
      }
label_3:
      return;
label_6:
      this.ChangeRequest("AI is not yet implemented. Please select a human player.");
      return;
label_13:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void FindRequest(object var1, RoutedEventArgs b)
    {
      int num1 = 6;
      if (true)
        goto label_9;
label_1:
      this.m_Exception[3].Color = (SolidColorBrush) this.rectPlayer4Color.Fill;
label_2:
      if (this.m_Exception.Count >= 5)
        num1 = 3;
      else
        goto label_22;
label_9:
      while (true)
      {
        bool flag1;
        int num2;
        bool flag2;
        switch (num1)
        {
          case 0:
          case 6:
            this.CountRequest();
            if (true)
            {
              num1 = 7;
              continue;
            }
            goto case 8;
          case 1:
          case 4:
            break;
          case 2:
            if (this.m_Exception.Count >= 4)
            {
              num1 = 5;
              continue;
            }
            goto label_2;
          case 3:
            goto label_21;
          case 5:
            goto label_1;
          case 7:
            flag1 = this.m_Exception.Count >= 2;
            num2 = 10;
            goto label_8;
          case 8:
            this.InstantiateRequest((object) this.btnPlayer3Forward);
            num2 = 1;
            goto label_8;
          case 9:
label_16:
            if (!flag2)
            {
              this.m_Exception[0].Color = (SolidColorBrush) this.rectPlayer1Color.Fill;
              this.m_Exception[1].Color = (SolidColorBrush) this.rectPlayer2Color.Fill;
              this.m_Exception[2].Color = (SolidColorBrush) this.rectPlayer3Color.Fill;
              num2 = 2;
              goto label_8;
            }
            else
              goto label_17;
          case 10:
            if (flag1)
            {
              if (this.m_Exception.Count == 2)
              {
                this.m_Exception.Add((Player) new Val("Neutral"));
                num2 = 8;
                goto label_8;
              }
              else
                break;
            }
            else
            {
              this.ChangeRequest("There must be at least two players to start a game.");
              if (true)
              {
                num1 = 11;
                continue;
              }
              goto label_34;
            }
          case 11:
            goto label_34;
          default:
            num2 = 9;
            goto label_8;
        }
        if (this.cmbMap.SelectedIndex != -1)
        {
          flag2 = this.cmbGameMode.SelectedIndex == -1;
          goto label_16;
        }
        else
          goto label_32;
label_8:
        num1 = num2;
      }
label_17:
      this.ChangeRequest("Please select a Gamemode.");
      return;
label_21:
      this.m_Exception[4].Color = (SolidColorBrush) this.rectPlayer5Color.Fill;
      goto label_22;
label_32:
      this.ChangeRequest("Please select a map.");
      return;
label_34:
      return;
label_22:
      if (this.m_Exception.Count >= 6)
        this.m_Exception[5].Color = (SolidColorBrush) this.rectPlayer6Color.Fill;
      ParamsMapperListener paramsMapperListener = new ParamsMapperListener(this.m_Exception, this.chkRandomise.IsChecked.Value, (SecurityPermissionFlag) this.cmbMap.SelectedIndex, (GameMode) this.cmbGameMode.SelectedIndex, (int) this.sldTime.Value, this.sldBias.Value);
      try
      {
        Application.Current.MainWindow = (Window) paramsMapperListener;
        int num3 = 3;
        while (true)
        {
          int num4 = num3;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 3:
                goto label_26;
              case 1:
              case 2:
                goto label_30;
              case 4:
                goto label_36;
              default:
                if (true)
                {
                  num4 = 2;
                  continue;
                }
                goto label_30;
            }
          }
label_26:
          paramsMapperListener.Show();
label_30:
          this.Close();
          num3 = 4;
        }
label_36:;
      }
      catch (Exception ex)
      {
        this.ChangeRequest("An error has occurred");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ManageRequest(object last, RoutedEventArgs second)
    {
      int num1 = 2;
      ParamsMapperListener paramsMapperListener1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_5;
            case 1:
            case 4:
              if (flag)
              {
                num2 = 5;
                continue;
              }
              goto label_6;
            case 2:
              goto label_12;
            case 5:
              goto label_1;
            case 6:
              goto label_15;
            default:
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_5;
          }
        }
label_1:
        this.CountRequest();
label_5:
label_6:
        AdapterGetterCandidate res = new AdapterGetterCandidate();
        try
        {
          res = AdapterGetterCandidate.StopMapper(int.Parse(((Importer) this.GameList.SelectedItem).AwakeMapper()));
        }
        catch (PublisherConnector ex)
        {
          this.ChangeRequest("The selected game could not be loaded.");
        }
        catch (NullReferenceException ex)
        {
          this.ChangeRequest("Please select a game to load by clicking on the details of the game you wish to load and then 'Load Game'");
        }
        catch (Exception ex)
        {
          this.ChangeRequest("Something went wrong.");
        }
        ParamsMapperListener paramsMapperListener2 = new ParamsMapperListener(res);
        paramsMapperListener2.WindowStartupLocation = WindowStartupLocation.CenterScreen;
        paramsMapperListener1 = paramsMapperListener2;
        num1 = 6;
        continue;
label_12:
        flag = this.txtError.Visibility == Visibility.Visible;
        num1 = 4;
      }
label_15:
      try
      {
        Application.Current.MainWindow = (Window) paramsMapperListener1;
        int num3 = 2;
        while (true)
        {
          int num4 = num3;
          while (true)
          {
            switch (num4)
            {
              case 0:
              case 2:
                goto label_16;
              case 1:
              case 3:
                goto label_20;
              case 4:
                goto label_22;
              default:
                if (true)
                {
                  num4 = 3;
                  continue;
                }
                goto label_20;
            }
          }
label_16:
          paramsMapperListener1.Show();
label_20:
          this.Close();
          num3 = 4;
        }
label_22:;
      }
      catch (Exception ex)
      {
        this.ChangeRequest("An error has occurred");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InstantiateRequest(object res)
    {
      int num1 = 2;
      if (!CreatorStructDef.CalculateObject())
        goto label_27;
label_1:
      Rectangle rectangle;
      if (rectangle.Fill == this.rectPlayer1Color.Fill)
        goto label_9;
label_2:
      if ((rectangle == this.rectPlayer2Color || rectangle.Fill != this.rectPlayer2Color.Fill) && (rectangle == this.rectPlayer3Color || rectangle.Fill != this.rectPlayer3Color.Fill))
      {
        if (rectangle != this.rectPlayer4Color)
        {
          num1 = 11;
          goto label_27;
        }
      }
      else
        goto label_9;
label_7:
      int num2;
      if (rectangle == this.rectPlayer5Color || rectangle.Fill != this.rectPlayer5Color.Fill)
      {
        num2 = rectangle == this.rectPlayer6Color ? 0 : (rectangle.Fill == this.rectPlayer6Color.Fill ? 1 : 0);
        goto label_10;
      }
label_9:
      num2 = 1;
label_10:
      bool flag1;
      if (num2 != 0)
        flag1 = true;
      bool flag2 = flag1;
      int num3 = 7;
label_26:
      num1 = num3;
label_27:
      Button button;
      bool flag3;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_13;
          case 1:
          case 4:
          case 10:
            goto label_30;
          case 2:
            goto label_5;
          case 3:
            break;
          case 5:
            goto label_21;
          case 6:
          case 12:
            goto label_41;
          case 7:
            if (!flag2)
            {
              num1 = 13;
              continue;
            }
            break;
          case 8:
            goto label_14;
          case 9:
            goto label_1;
          case 11:
            goto label_6;
          case 13:
            goto label_33;
          default:
            num1 = 12;
            continue;
        }
        flag1 = false;
        if (!button.Name.Contains("1"))
        {
          if (button.Name.Contains("2"))
          {
            if (true)
              num1 = 0;
            else
              goto label_30;
          }
          else
          {
            flag3 = button.Name.Contains("3");
            num1 = 5;
          }
        }
        else if (CreatorStructDef.IncludeObject())
          num1 = 8;
        else
          goto label_21;
      }
label_5:
      button = (Button) res;
      num3 = 3;
      goto label_26;
label_6:
      if (rectangle.Fill == this.rectPlayer4Color.Fill)
        goto label_9;
      else
        goto label_7;
label_13:
      rectangle = this.rectPlayer2Color;
      num3 = 10;
      goto label_26;
label_14:
      rectangle = this.rectPlayer1Color;
      goto label_30;
label_21:
      if (flag3)
      {
        rectangle = this.rectPlayer3Color;
        goto label_30;
      }
      else if (button.Name.Contains("4"))
      {
        rectangle = this.rectPlayer4Color;
        goto label_30;
      }
      else if (!button.Name.Contains("5"))
      {
        rectangle = this.rectPlayer6Color;
        goto label_30;
      }
      else
        goto label_41;
label_33:
      return;
label_30:
      if (button.Name.Contains("Forward"))
      {
        try
        {
          rectangle.Fill = (Brush) this.strategy[this.strategy.IndexOf((SolidColorBrush) rectangle.Fill) + 1];
        }
        catch (ArgumentOutOfRangeException ex)
        {
          rectangle.Fill = (Brush) this.strategy[0];
        }
      }
      else
      {
        try
        {
          rectangle.Fill = (Brush) this.strategy[this.strategy.IndexOf((SolidColorBrush) rectangle.Fill) - 1];
        }
        catch (ArgumentOutOfRangeException ex)
        {
          rectangle.Fill = (Brush) this.strategy[this.strategy.Count - 1];
        }
      }
      if (rectangle != this.rectPlayer1Color)
      {
        num3 = 9;
        goto label_26;
      }
      else
        goto label_2;
label_41:
      rectangle = this.rectPlayer5Color;
      num3 = 1;
      goto label_26;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ChangeRequest(string config)
    {
      int num1 = 0;
      if (CreatorStructDef.CalculateObject())
        ;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
            flag = this.panel_LoadGame.Visibility == Visibility.Collapsed;
            num2 = 4;
            break;
          case 1:
          case 2:
            goto label_1;
          case 3:
            goto label_10;
          case 4:
            if (!flag)
            {
              this.lblError.Visibility = Visibility.Visible;
              this.txtError.Text = config;
              num1 = 6;
              continue;
            }
            this.lblErrorAlt.Visibility = Visibility.Visible;
            num1 = 1;
            continue;
          case 5:
            goto label_11;
          case 6:
            goto label_9;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_1:
      this.txtErrorAlt.Text = config;
      return;
label_10:
      return;
label_11:
      return;
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountRequest()
    {
      int num1 = 2;
      while (true)
      {
        int num2;
        bool flag;
        switch (num1)
        {
          case 0:
          case 2:
            flag = this.panel_LoadGame.Visibility == Visibility.Collapsed;
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 1;
          case 1:
          case 3:
            if (flag)
            {
              num2 = 4;
              break;
            }
            this.lblError.Visibility = Visibility.Collapsed;
            this.txtError.Text = "";
            num2 = 6;
            break;
          case 4:
            goto label_1;
          case 5:
            goto label_8;
          case 6:
            goto label_10;
          default:
            num2 = 5;
            break;
        }
        num1 = num2;
      }
label_1:
      this.lblErrorAlt.Visibility = Visibility.Collapsed;
label_8:
      this.txtErrorAlt.Text = "";
      return;
label_10:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        bool specification;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              if (specification)
              {
                num2 = 4;
                continue;
              }
              this.specification = true;
              goto case 3;
            case 2:
              goto label_3;
            case 3:
            case 5:
              Application.LoadComponent((object) this, new Uri("/IEnumUnkn;component/gamesetup.xaml", UriKind.Relative));
              if (!CreatorStructDef.CalculateObject())
              {
                num2 = 6;
                continue;
              }
              goto label_9;
            case 4:
              goto label_11;
            case 6:
              goto label_9;
            default:
              if (CreatorStructDef.IncludeObject())
              {
                num2 = 5;
                continue;
              }
              goto case 3;
          }
        }
label_3:
        specification = this.specification;
        num1 = 0;
      }
label_11:
      return;
label_9:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int suminfo, object selection)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_68;
            case 1:
              switch (num3)
              {
                case 1:
                  goto label_34;
                case 2:
                  goto label_35;
                case 4:
                  goto label_36;
                case 5:
                  goto label_37;
                case 6:
                  goto label_38;
                case 7:
                  goto label_27;
                case 8:
                  goto label_28;
                case 9:
                  goto label_29;
                case 10:
                  goto label_30;
                case 11:
                  goto label_31;
                case 12:
                  goto label_32;
                case 13:
                  this.panelPlayer3 = (Border) selection;
                  num2 = 7;
                  continue;
                case 14:
                  goto label_59;
                case 15:
                  goto label_60;
                case 16:
                  goto label_7;
                case 17:
                  goto label_8;
                case 18:
                  this.panelPlayer4 = (Border) selection;
                  if (true)
                  {
                    num2 = 3;
                    continue;
                  }
                  goto label_10;
                case 19:
                  goto label_56;
                case 20:
                  goto label_57;
                case 21:
                  goto label_58;
                case 22:
                  goto label_64;
                case 23:
                  goto label_39;
                case 24:
                  goto label_40;
                case 25:
                  goto label_41;
                case 26:
                  goto label_42;
                case 27:
                  goto label_43;
                case 28:
                  goto label_44;
                case 29:
                  goto label_45;
                case 30:
                  goto label_46;
                case 31:
                  goto label_47;
                case 32:
                  goto label_48;
                case 33:
                  goto label_49;
                case 34:
                  goto label_50;
                case 35:
                  goto label_51;
                case 36:
                  goto label_62;
                case 37:
                  goto label_63;
                case 38:
                  goto label_1;
                case 39:
                  goto label_2;
                case 40:
                  goto label_3;
                case 41:
                  goto label_4;
                case 42:
                  goto label_67;
                case 43:
                  goto label_12;
                case 44:
                  goto label_13;
                case 45:
                  goto label_14;
                case 46:
                  goto label_15;
                case 47:
                  goto label_16;
                case 48:
                  goto label_17;
                case 49:
                  goto label_18;
                case 50:
                  goto label_19;
                case 51:
                  goto label_20;
                case 52:
                  goto label_21;
                case 53:
                  goto label_22;
                case 54:
                  goto label_66;
                case 55:
                  goto label_11;
                case 56:
                  goto label_23;
                case 57:
                  goto label_24;
                case 58:
                  goto label_25;
                case 59:
                  this.chkHints = (CheckBox) selection;
                  num2 = 13;
                  continue;
                default:
                  this.specification = true;
                  num2 = 19;
                  continue;
              }
            case 2:
              goto label_69;
            case 3:
              goto label_70;
            case 4:
              goto label_5;
            case 5:
              goto label_71;
            case 6:
              goto label_61;
            case 7:
              goto label_72;
            case 8:
              goto label_73;
            case 9:
              goto label_74;
            case 10:
              goto label_75;
            case 11:
              goto label_76;
            case 12:
              goto label_77;
            case 13:
              goto label_78;
            case 14:
              goto label_79;
            case 15:
              goto label_80;
            case 16:
              goto label_81;
            case 17:
              goto label_82;
            case 18:
              goto label_83;
            case 19:
              goto label_84;
            default:
              if (CreatorStructDef.IncludeObject())
              {
                num2 = 6;
                continue;
              }
              goto label_55;
          }
        }
label_4:
        this.panel_Bias = (StackPanel) selection;
        num1 = 2;
        continue;
label_5:
        num3 = suminfo;
        num1 = 1;
        continue;
label_11:
        this.mediaplayer = (MediaElement) selection;
        num1 = 8;
        continue;
label_22:
        this.panel_Settings = (DockPanel) selection;
        num1 = 5;
        continue;
label_32:
        this.lblPlayer2 = (Label) selection;
        num1 = 10;
        continue;
label_38:
        this.btnPlayer1Forward = (Button) selection;
        num1 = 17;
        continue;
label_58:
        this.btnPlayer4Forward = (Button) selection;
        num1 = 14;
        continue;
label_60:
        this.rectPlayer3Color = (Rectangle) selection;
        num1 = 16;
        continue;
label_63:
        this.cmbGameMode = (ComboBox) selection;
        num1 = 18;
        continue;
label_64:
        this.lblPlayer4 = (Label) selection;
        num1 = 0;
        continue;
label_66:
        this.lblMediaDetails = (Label) selection;
        num1 = 9;
        continue;
label_67:
        this.sldBias = (Slider) selection;
        num1 = 12;
      }
label_1:
      this.chkTimerEnabled = (CheckBox) selection;
      return;
label_2:
      this.panel_Time = (StackPanel) selection;
      return;
label_3:
      this.sldTime = (Slider) selection;
      return;
label_7:
      this.btnPlayer3Forward = (Button) selection;
      return;
label_8:
      this.lblPlayer3 = (Label) selection;
      return;
label_10:
      return;
label_12:
      this.chkRandomise = (CheckBox) selection;
      return;
label_13:
      this.btnNewGame = (Button) selection;
      this.btnNewGame.Click += new RoutedEventHandler(this.FindRequest);
      return;
label_14:
      this.btnNewGameSettings = (Button) selection;
      return;
label_15:
      this.lblErrorAlt = (Label) selection;
      return;
label_16:
      this.txtErrorAlt = (TextBlock) selection;
      return;
label_17:
      this.panel_LoadGame = (StackPanel) selection;
      return;
label_18:
      this.GameList = (DataGrid) selection;
      return;
label_19:
      ((ButtonBase) selection).Click += new RoutedEventHandler(this.ManageRequest);
      return;
label_20:
      this.lblError = (Label) selection;
      return;
label_21:
      this.txtError = (TextBlock) selection;
      return;
label_23:
      this.slider_Volume = (Slider) selection;
      return;
label_24:
      this.chkMusicEnabled = (CheckBox) selection;
      return;
label_25:
      this.chkFullscreen = (CheckBox) selection;
      return;
label_27:
      this.lblPlayer1 = (Label) selection;
      return;
label_28:
      this.panelPlayer2 = (Border) selection;
      return;
label_29:
      this.btnPlayer2Back = (Button) selection;
      return;
label_30:
      this.rectPlayer2Color = (Rectangle) selection;
      return;
label_31:
      this.btnPlayer2Forward = (Button) selection;
      return;
label_34:
      this.panel_MainUI = (StackPanel) selection;
      return;
label_35:
      this.stckPlayers = (StackPanel) selection;
      return;
label_36:
      this.btnPlayer1Back = (Button) selection;
      return;
label_37:
      this.rectPlayer1Color = (Rectangle) selection;
      return;
label_39:
      this.panelPlayer5 = (Border) selection;
      return;
label_40:
      this.btnPlayer5Back = (Button) selection;
      return;
label_41:
      this.rectPlayer5Color = (Rectangle) selection;
      return;
label_42:
      this.btnPlayer5Forward = (Button) selection;
      return;
label_43:
      this.lblPlayer5 = (Label) selection;
      return;
label_44:
      this.panelPlayer6 = (Border) selection;
      return;
label_45:
      this.btnPlayer6Back = (Button) selection;
      return;
label_46:
      this.rectPlayer6Color = (Rectangle) selection;
      return;
label_47:
      this.btnPlayer6Forward = (Button) selection;
      return;
label_48:
      this.lblPlayer6 = (Label) selection;
      return;
label_49:
      this.lblPlayer6Type = (Label) selection;
      return;
label_50:
      this.cmbPlayer6 = (ComboBox) selection;
      return;
label_51:
      this.btnAddPlayer = (Button) selection;
      goto label_61;
label_72:
      return;
label_74:
      return;
label_71:
      return;
label_70:
      return;
label_69:
      return;
label_73:
      return;
label_75:
      return;
label_82:
      return;
label_77:
      return;
label_81:
      return;
label_78:
      return;
label_79:
      return;
label_80:
      return;
label_84:
      return;
label_83:
      return;
label_76:
      return;
label_68:
      return;
label_55:
      return;
label_56:
      this.btnPlayer4Back = (Button) selection;
      return;
label_57:
      this.rectPlayer4Color = (Rectangle) selection;
      return;
label_59:
      this.btnPlayer3Back = (Button) selection;
      return;
label_61:
      this.btnAddPlayer.Click += new RoutedEventHandler(this.AddPlayer);
      return;
label_62:
      this.cmbMap = (ComboBox) selection;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int endinstance, object pred)
    {
      int num1 = 2;
      while (true)
      {
        int num2 = num1;
        int num3;
        EventSetter eventSetter;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              num3 = endinstance;
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto case 5;
            case 1:
              goto label_1;
            case 3:
            case 4:
              ((Style) pred).Setters.Add((SetterBase) eventSetter);
              num2 = 6;
              continue;
            case 5:
              eventSetter.Event = ButtonBase.ClickEvent;
              eventSetter.Handler = (Delegate) new RoutedEventHandler(this.AssetRequest);
              goto case 3;
            case 6:
              goto label_2;
            default:
              goto label_9;
          }
        }
label_1:
        if (num3 == 3)
        {
          eventSetter = new EventSetter();
          num1 = 5;
          continue;
        }
        break;
label_9:
        num1 = 4;
      }
      return;
label_2:;
    }

    internal static bool IncludeObject() => true;

    internal static bool CalculateObject() => false;
  }
}
