// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ASMNA, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 756C4858-C1DF-4594-BBF4-94321F458D9F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-b15de477cfbeebb8bbdc45f252c7c6bc6d2897ab737240c78a82a618f6e85508.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202C‮‏‮‏‎‍⁪⁫‌‎‫‌‍⁪‪⁭‫⁮⁬⁭⁯‌‌⁪⁭‍‭‏⁮⁫⁪⁮⁯​⁪‭‎‫‌‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 295616495;
        int index;
        PlayerState[] playerStates;
        bool flag;
        bool finished1;
        bool finished2;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 486885888)) % 15U)
          {
            case 0:
              num1 = (int) num2 * -1798000011 ^ 503422668;
              continue;
            case 1:
              num1 = (int) num2 * -933373323 ^ -1638268876;
              continue;
            case 2:
              index = 0;
              num1 = (int) num2 * 1146392691 ^ 1303693153;
              continue;
            case 3:
              playerStates = this._playerStates;
              num1 = 1230218783;
              continue;
            case 4:
              goto label_1;
            case 5:
              int num3 = finished2 ? 722558398 : (num3 = 1751615544);
              num1 = num3 ^ (int) num2 * 146870946;
              continue;
            case 6:
              finished2 = this._finished;
              num1 = (int) num2 * -2070200173 ^ 510683272;
              continue;
            case 7:
              int num4;
              num1 = num4 = index < playerStates.Length ? 1064873182 : (num4 = 1995840836);
              continue;
            case 8:
              int num5 = flag ? -209653684 : (num5 = -1238976349);
              num1 = num5 ^ (int) num2 * -421049722;
              continue;
            case 9:
              ++index;
              num1 = 868042380;
              continue;
            case 10:
              finished1 = true;
              num1 = (int) num2 * 835379673 ^ 737764850;
              continue;
            case 11:
              flag = playerStates[index].State == State.Playing;
              num1 = 955120171;
              continue;
            case 13:
              finished1 = true;
              num1 = (int) num2 * 1246821460 ^ -1417875054;
              continue;
            case 14:
              finished1 = false;
              num1 = (int) num2 * -338006349 ^ 1308521236;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return finished1;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
      this.ShuffleCards();
label_1:
      int num1 = -104566942;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1063030796)) % 8U)
        {
          case 0:
            goto label_1;
          case 1:
            this.Losers.Clear();
            num1 = (int) num2 * -920509867 ^ 1901201947;
            continue;
          case 2:
            num1 = (int) num2 * -246074814 ^ -2025668269;
            continue;
          case 3:
            this._currentPlayer = this.Players.Length;
            num1 = (int) num2 * 1161190738 ^ 1269732861;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 1568377164 ^ 133299009;
            continue;
          case 6:
            this.Winners.Clear();
            num1 = (int) num2 * 1687912857 ^ -1474816665;
            continue;
          case 7:
            this._currentTurn = 0;
            this._finished = false;
            this._currentChanceIndex = -1;
            this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
            num1 = (int) num2 * -1040103757 ^ 1871478461;
            continue;
          default:
            goto label_10;
        }
      }
label_3:
      return;
label_10:;
    }

    public void PlanningState()
    {
label_1:
      int num1 = 2137873640;
      int planningCardsCount;
      int num2;
      bool flag;
      PlayerState playerState;
      bool morePlanningSprint;
      int index;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1122507911)) % 30U)
        {
          case 0:
            num1 = 1038913133;
            continue;
          case 1:
            num2 = 0;
            int num4 = planningCardsCount == 0 ? -55444428 : (num4 = -1540687900);
            num1 = num4 ^ (int) num3 * 82930115;
            continue;
          case 2:
            flag = index < this.Players.Length;
            num1 = 1068957895;
            continue;
          case 3:
            num1 = 1469408342;
            continue;
          case 4:
            playerState.Sprint = 0;
            num1 = (int) num3 * -2112858636 ^ 2041324154;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num3 * 1759981961 ^ -266419204;
            continue;
          case 7:
            num1 = (int) num3 * -1290196145 ^ 1112201748;
            continue;
          case 8:
            ++index;
            num1 = (int) num3 * -782860382 ^ 763002841;
            continue;
          case 9:
            index = 0;
            num1 = (int) num3 * 2008689228 ^ -1937097520;
            continue;
          case 10:
            playerState = this._playerStates[index];
            num1 = (int) num3 * -748734963 ^ 479016735;
            continue;
          case 11:
            num1 = (int) num3 * 1772943342 ^ 1073351136;
            continue;
          case 12:
            int num5 = !flag ? -1741811760 : (num5 = -505045458);
            num1 = num5 ^ (int) num3 * 1858109660;
            continue;
          case 13:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1421029700 ^ -771090658;
            continue;
          case 14:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * -600510734 ^ -1130311579;
            continue;
          case 15:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 708482329 ^ 1540232729;
            continue;
          case 16:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = (int) num3 * 1036885731 ^ -2058822613;
            continue;
          case 17:
            num1 = (int) num3 * -1459456642 ^ 1489208788;
            continue;
          case 18:
            playerState.Sprint = 1;
            num1 = (int) num3 * -1049778368 ^ 2077008861;
            continue;
          case 19:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1557164945 ^ 1900893152;
            continue;
          case 20:
            int num6 = !morePlanningSprint ? -1926229345 : (num6 = -2067044715);
            num1 = num6 ^ (int) num3 * 1743683127;
            continue;
          case 21:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = 53355719;
            continue;
          case 22:
            int num7;
            num1 = num7 = num2 > 0 ? 676477612 : (num7 = 1145997281);
            continue;
          case 23:
            playerState.State = State.Playing;
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * 873356052 ^ 1898531214;
            continue;
          case 24:
            num2 = 0;
            num1 = 347390530;
            continue;
          case 25:
            player = this.Players[index];
            num1 = (int) num3 * 1889335417 ^ -2070130828;
            continue;
          case 26:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -1002677807 ^ 303199994;
            continue;
          case 27:
            num1 = 818374082;
            continue;
          case 28:
            num1 = (int) num3 * -2031024642 ^ -2109997426;
            continue;
          case 29:
            goto label_1;
          default:
            goto label_32;
        }
      }
label_3:
      return;
label_32:;
    }

    public void TurnState()
    {
label_1:
      int num1 = -1246566502;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1871856760)) % 16U)
        {
          case 0:
            num1 = (int) num2 * 1628045438 ^ -1391443977;
            continue;
          case 1:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u206B‫⁫⁬‪⁯‏‮‭⁭‮⁭‪‮‏‫​⁬‌‫‬⁪⁭‌‎⁪⁯⁯‍‭‬⁫⁮‌⁯⁭⁭‫‎‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1065825142 ^ 1004253705;
            continue;
          case 2:
            ++this._currentPlayer;
            num1 = (int) num2 * 1209027410 ^ -568972971;
            continue;
          case 3:
            num1 = (int) num2 * 892464770 ^ -1853043558;
            continue;
          case 4:
            this.PlayerTurn(this._currentPlayer);
            num1 = -1546120;
            continue;
          case 5:
            num1 = (int) num2 * 1176932349 ^ -159466625;
            continue;
          case 6:
            this._currentPlayer = 0;
            num1 = (int) num2 * -506947636 ^ -2138249074;
            continue;
          case 7:
            num1 = (int) num2 * 1944029854 ^ 715740537;
            continue;
          case 8:
            this.Print((object) Game.\u206E‬‪‏‌⁯‪‏​‍⁫‪‌‏​‮‪‫‍‌⁪⁯‬⁮‫‏⁬‪‬‏‪‫⁬‌‬‍‎​⁯⁬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = -391990183;
            continue;
          case 9:
            flag = this._currentPlayer >= this.Players.Length;
            num1 = (int) num2 * -95634195 ^ -996361;
            continue;
          case 10:
            int num3 = !flag ? -1793482272 : (num3 = -834395055);
            num1 = num3 ^ (int) num2 * 1581097078;
            continue;
          case 11:
            goto label_1;
          case 12:
            num1 = (int) num2 * 2037847372 ^ 1352099200;
            continue;
          case 13:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -583713363 ^ -1413422163;
            continue;
          case 14:
            int num4 = this._currentTurn <= 0 ? 1793365756 : (num4 = 2013522473);
            num1 = num4 ^ (int) num2 * 1225465306;
            continue;
          case 15:
            goto label_3;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 1220413078;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        bool flag1;
        int num3;
        int index;
        PlayerState playerState2;
        int num4;
        Card card;
        bool flag2;
        bool flag3;
        Player player;
        bool flag4;
        int num5;
        bool flag5;
        bool flag6;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        bool onlyOneWinner;
        int num6;
        switch ((num2 = (uint) (num1 ^ 136114442)) % 85U)
        {
          case 0:
            num1 = (int) num2 * 1991355629 ^ 20510771;
            continue;
          case 1:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1296036403 ^ -1172092003;
            continue;
          case 2:
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * -13277547 ^ -392783084;
            continue;
          case 3:
            int num7 = !flag9 ? 1834182954 : (num7 = 2096644746);
            num1 = num7 ^ (int) num2 * -332342900;
            continue;
          case 4:
            num1 = (int) num2 * 392678204 ^ -1859746474;
            continue;
          case 5:
            num4 = Game.\u202C‎⁬‮⁮⁭‬⁭‪‌‌⁭⁪‍⁭⁮‪‭‎⁭⁮‭⁮‭⁬‬‬‌⁪⁪⁪⁮‭‭⁭⁫‌⁫‍‫‮(0, num5);
            num1 = (int) num2 * -1260474500 ^ -2101696341;
            continue;
          case 6:
            playerState1 = this._playerStates[playerIndex];
            num1 = (int) num2 * 1881913604 ^ -425233192;
            continue;
          case 7:
            num1 = (int) num2 * 881546484 ^ 420642883;
            continue;
          case 8:
            num5 = card.Impact - player.PlannedForCard(card.Type);
            flag1 = num5 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * 1748998257 ^ 118727304;
            continue;
          case 9:
            num1 = 150291550;
            continue;
          case 10:
            int num8 = flag6 ? 978962694 : (num8 = 126037366);
            num1 = num8 ^ (int) num2 * 742117090;
            continue;
          case 11:
            num1 = (int) num2 * -914739757 ^ -1675818051;
            continue;
          case 12:
            int num9;
            num1 = num9 = num3 != playerIndex ? 1512476166 : (num9 = 613648263);
            continue;
          case 13:
            num1 = (int) num2 * -317609368 ^ -255983431;
            continue;
          case 14:
            flag1 = true;
            num1 = (int) num2 * 483032272 ^ -1643960325;
            continue;
          case 15:
            num1 = (int) num2 * 1459322530 ^ 640614590;
            continue;
          case 16:
            int num10 = !flag5 ? -177106617 : (num10 = -1983580166);
            num1 = num10 ^ (int) num2 * -470916398;
            continue;
          case 17:
            num1 = (int) num2 * 1127713691 ^ 375045955;
            continue;
          case 18:
            playerState1.State = State.Lose;
            flag5 = !this.Losers.Contains(playerIndex);
            num1 = (int) num2 * -988975736 ^ 1589907572;
            continue;
          case 19:
            num1 = (int) num2 * -525452507 ^ -1001257942;
            continue;
          case 20:
            num1 = 1576641633;
            continue;
          case 21:
            num1 = (int) num2 * -1710464047 ^ 1205920322;
            continue;
          case 22:
            flag11 = num3 < this._playerStates.Length;
            num1 = 849719871;
            continue;
          case 23:
            int num11 = flag11 ? -2139135763 : (num11 = -1641735284);
            num1 = num11 ^ (int) num2 * -1699543703;
            continue;
          case 24:
            int num12;
            num1 = num12 = this.Losers.Contains(num3) ? 1691488176 : (num12 = 1469626290);
            continue;
          case 25:
            num4 = card.Impact;
            num1 = (int) num2 * 153187645 ^ -19571980;
            continue;
          case 26:
            goto label_1;
          case 27:
            int num13;
            num1 = num13 = playerState1.Sprint >= 0 ? 1666757008 : (num13 = 1614507016);
            continue;
          case 28:
            num1 = (int) num2 * 1094981920 ^ 838150337;
            continue;
          case 29:
            num1 = (int) num2 * 83803510 ^ 2004858167;
            continue;
          case 30:
            num1 = (int) num2 * 228802412 ^ -198750251;
            continue;
          case 31:
            ++num3;
            num1 = 1755217071;
            continue;
          case 32:
            this.Losers.Add(index);
            num1 = (int) num2 * -1185564273 ^ -1036559498;
            continue;
          case 33:
            int num14 = !flag2 ? -292869444 : (num14 = -1506136632);
            num1 = num14 ^ (int) num2 * 389726890;
            continue;
          case 34:
            player = this.Players[playerIndex];
            num1 = (int) num2 * 629843140 ^ -952152027;
            continue;
          case 35:
            num1 = (int) num2 * 1248381522 ^ 661026879;
            continue;
          case 36:
            this._finished = true;
            num1 = (int) num2 * -130996476 ^ -51027266;
            continue;
          case 37:
            int num15 = playerState1.Resources >= 0 ? 1023786958 : (num15 = 1169619719);
            num1 = num15 ^ (int) num2 * -1667625597;
            continue;
          case 38:
            flag1 = false;
            num1 = 1550688989;
            continue;
          case 39:
            this.Print((object) Game.\u206B‫⁫⁬‪⁯‏‮‭⁭‮⁭‪‮‏‫​⁬‌‫‬⁪⁭‌‎⁪⁯⁯‍‭‬⁫⁮‌⁯⁭⁭‫‎‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * 882676025 ^ 331093664;
            continue;
          case 40:
            playerState2.State = State.Lose;
            flag8 = !this.Losers.Contains(index);
            num1 = 2021392141;
            continue;
          case 41:
            int num16 = !flag7 ? -1946995764 : (num16 = -1146567326);
            num1 = num16 ^ (int) num2 * 1875670628;
            continue;
          case 42:
            num1 = (int) num2 * 764106750 ^ -34905433;
            continue;
          case 43:
            playerState1.Resources -= num4;
            num1 = (int) num2 * -1117042561 ^ -421435592;
            continue;
          case 44:
            card = this.DrawCard();
            flag9 = card.Impact < 0;
            num1 = 288834277;
            continue;
          case 45:
            num1 = (int) num2 * 2038266491 ^ -554720161;
            continue;
          case 46:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * 1607245915 ^ 240437100;
            continue;
          case 47:
            num1 = (int) num2 * -1092759029 ^ -1579916943;
            continue;
          case 48:
            int num17 = playerState2.Resources >= 0 ? -606834793 : (num17 = -1016205102);
            num1 = num17 ^ (int) num2 * 266261197;
            continue;
          case 49:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag3 ? (object) "ALL " : (object) "", flag9 ? (object) "receives" : (object) "pays", (object) Game.\u206C‬‎‪‌⁯⁫‭‭⁫⁫⁭⁭⁬‎‭‭⁯⁬⁪‭⁮‬‌‏⁮​⁭⁭‌⁫‪​‪​‏‌‍⁪‍‮(num4), flag1 ? (object) "advance" : (object) "stay");
            num1 = 1263852607;
            continue;
          case 50:
            num1 = (int) num2 * 293963559 ^ 2129223754;
            continue;
          case 51:
            num1 = (int) num2 * 240327924 ^ 453063500;
            continue;
          case 52:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 253946652 ^ -755922529;
            continue;
          case 53:
            flag7 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 2012551462;
            continue;
          case 54:
            flag4 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = 1819836954;
            continue;
          case 55:
            num3 = 0;
            num1 = (int) num2 * 2099460469 ^ -782927002;
            continue;
          case 56:
            this.Losers.Add(num3);
            num1 = (int) num2 * -334025101 ^ -1015358696;
            continue;
          case 57:
            num1 = (int) num2 * 94642528 ^ 1608723661;
            continue;
          case 58:
            index = 0;
            num1 = 747245020;
            continue;
          case 59:
            playerState1.State = State.Won;
            num1 = (int) num2 * -1865965598 ^ 2001037759;
            continue;
          case 60:
            flag6 = flag1;
            num1 = 412811487;
            continue;
          case 61:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * -110757908 ^ -1428759341;
              continue;
            }
            num6 = 0;
            break;
          case 62:
            int num18 = flag10 ? -187208669 : (num18 = -1031634319);
            num1 = num18 ^ (int) num2 * -2125187796;
            continue;
          case 63:
            flag2 = playerState1.State != 0;
            num1 = (int) num2 * 1092329114 ^ 405637006;
            continue;
          case 64:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1046691700 ^ 1587288628;
            continue;
          case 65:
            num1 = 714264402;
            continue;
          case 66:
            int num19 = !flag8 ? -945685796 : (num19 = -1598726893);
            num1 = num19 ^ (int) num2 * 1420654612;
            continue;
          case 67:
            int num20 = flag3 ? -2014653710 : (num20 = -727424574);
            num1 = num20 ^ (int) num2 * 2103295751;
            continue;
          case 68:
            num1 = 2141502077;
            continue;
          case 69:
            goto label_3;
          case 70:
            num1 = (int) num2 * -416142277 ^ 2035405606;
            continue;
          case 71:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u206B‫⁫⁬‪⁯‏‮‭⁭‮⁭‪‮‏‫​⁬‌‫‬⁪⁭‌‎⁪⁯⁯‍‭‬⁫⁮‌⁯⁭⁭‫‎‮("\t", playerState3 != null ? Game.\u206D‍⁪‭⁫⁫‌‪‪‎‮‌⁯⁬‌‍⁯‭‍‮‮‫‍⁪⁮‎‌‬​⁫‌‏‬⁬‬‌⁮⁭‫‪‮((object) playerState3) : (string) null));
            num1 = 103177061;
            continue;
          case 72:
            num1 = 2125252311;
            continue;
          case 73:
            playerState2 = this._playerStates[index];
            playerState2.Resources -= Game.\u202C‎⁬‮⁮⁭‬⁭‪‌‌⁭⁪‍⁭⁮‪‭‎⁭⁮‭⁮‭⁬‬‬‌⁪⁪⁪⁮‭‭⁭⁫‌⁫‍‫‮(0, num4 - this.Players[index].PlannedForCard(card.Type));
            num1 = (int) num2 * 1929231620 ^ 442197213;
            continue;
          case 74:
            num1 = 2071245407;
            continue;
          case 75:
            flag10 = index < this._playerStates.Length;
            num1 = 1172003105;
            continue;
          case 76:
            int num21 = flag4 ? -1639973357 : (num21 = -1362894174);
            num1 = num21 ^ (int) num2 * 1618581263;
            continue;
          case 77:
            this.Print((object) "Still planning");
            num1 = (int) num2 * -463369206 ^ 38174179;
            continue;
          case 78:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 79:
            int num22 = !onlyOneWinner ? 1768603044 : (num22 = 762786261);
            num1 = num22 ^ (int) num2 * -449342973;
            continue;
          case 80:
            num1 = (int) num2 * 144677169 ^ 1102280387;
            continue;
          case 81:
            ++index;
            num1 = 162351757;
            continue;
          case 82:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * 1521562076 ^ 383098353;
            continue;
          case 83:
            flag1 = true;
            num1 = 34511920;
            continue;
          case 84:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1890448255 ^ 169876118;
            continue;
          default:
            goto label_90;
        }
        flag3 = num6 != 0;
        num1 = 1307615863;
      }
label_3:
      return;
label_90:;
    }

    private Card DrawCard()
    {
      if (this._deck.Count > 0)
        goto label_5;
label_1:
      int num1 = -2123816916;
label_2:
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1621560207)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1073844219 ^ -274323141;
            continue;
          case 2:
            goto label_5;
          case 3:
            this.ShuffleCards();
            num1 = (int) num2 * -907025584 ^ 1520250387;
            continue;
          case 4:
            card2 = card1;
            num1 = (int) num2 * -190951051 ^ -538308722;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      return card2;
label_5:
      card1 = this._deck[0];
      this._deck.RemoveAt(0);
      num1 = -1930453151;
      goto label_2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -888421497;
      string str1;
      int index;
      string str2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -326610250)) % 10U)
        {
          case 0:
            int num3 = !flag ? 1926361334 : (num3 = 485572308);
            num1 = num3 ^ (int) num2 * -545906732;
            continue;
          case 1:
            num1 = (int) num2 * -934913083 ^ -2002360976;
            continue;
          case 2:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u206D‍⁪‭⁫⁫‌‪‪‎‮‌⁯⁬‌‍⁯‭‍‮‮‫‍⁪⁮‎‌‬​⁫‌‏‬⁬‬‌⁮⁭‫‪‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u206C​⁭⁫⁯‭⁬⁭‫‪‎‍⁪‪‏‌‫⁭‍‍​⁪⁮‭‬⁭​​‍‍⁪⁭⁭​⁮‌⁯⁮⁫‎‮(strArray);
            num1 = -661567240;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * 1643067858 ^ -1621345527;
            continue;
          case 4:
            str2 = str1;
            num1 = (int) num2 * 113873064 ^ -1694102854;
            continue;
          case 5:
            flag = index < this._playerStates.Length;
            num1 = -1788008284;
            continue;
          case 6:
            ++index;
            num1 = (int) num2 * 1052376678 ^ 1586549573;
            continue;
          case 7:
            goto label_1;
          case 9:
            str1 = "";
            num1 = (int) num2 * -1854657050 ^ -1514305647;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1439872427;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1190340796)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1337174014 ^ 278104952;
            continue;
          case 3:
            str = this.ToString(false);
            num1 = (int) num2 * 825016378 ^ -1626542537;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more) => Game.\u200D‮⁮⁬‬‮‫‬⁮‭‪⁯‬⁭​​‏⁮‏​⁫‍‮‎​⁭⁯⁫⁫‏‫‪⁯‭‌​‭‍‎‍‮(this._buffer, Game.\u202D​‫⁮​‫⁮‎‍⁯‏‪⁭‍‌‪‫⁪⁫‮​‪‍‬⁬‌⁪​‎‏‌‪‭⁮⁯‮‍​‬⁯‮(Game.\u206D‍⁪‭⁫⁫‌‪‪‎‮‌⁯⁬‌‍⁯‭‍‮‮‫‍⁪⁮‎‌‬​⁫‌‏‬⁬‬‌⁮⁭‫‪‮(text), more));

    static Random \u202C‮‏‮‏‎‍⁪⁫‌‎‫‌‍⁪‪⁭‫⁮⁬⁭⁯‌‌⁪⁭‍‭‏⁮⁫⁪⁮⁯​⁪‭‎‫‌‮([In] int obj0) => new Random(obj0);

    static string \u206E‬‪‏‌⁯‪‏​‍⁫‪‌‏​‮‪‫‍‌⁪⁯‬⁮‫‏⁬‪‬‏‪‫⁬‌‬‍‎​⁯⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u206B‫⁫⁬‪⁯‏‮‭⁭‮⁭‪‮‏‫​⁬‌‫‬⁪⁭‌‎⁪⁯⁯‍‭‬⁫⁮‌⁯⁭⁭‫‎‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u202C‎⁬‮⁮⁭‬⁭‪‌‌⁭⁪‍⁭⁮‪‭‎⁭⁮‭⁮‭⁬‬‬‌⁪⁪⁪⁮‭‭⁭⁫‌⁫‍‫‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206C‬‎‪‌⁯⁫‭‭⁫⁫⁭⁭⁬‎‭‭⁯⁬⁪‭⁮‬‌‏⁮​⁭⁭‌⁫‪​‪​‏‌‍⁪‍‮([In] int obj0) => Math.Abs(obj0);

    static string \u206D‍⁪‭⁫⁫‌‪‪‎‮‌⁯⁬‌‍⁯‭‍‮‮‫‍⁪⁮‎‌‬​⁫‌‏‬⁬‬‌⁮⁭‫‪‮([In] object obj0) => obj0.ToString();

    static string \u206C​⁭⁫⁯‭⁬⁭‫‪‎‍⁪‪‏‌‫⁭‍‍​⁪⁮‭‬⁭​​‍‍⁪⁭⁭​⁮‌⁯⁮⁫‎‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202D​‫⁮​‫⁮‎‍⁯‏‪⁭‍‌‪‫⁪⁫‮​‪‍‬⁬‌⁪​‎‏‌‪‭⁮⁯‮‍​‬⁯‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u200D‮⁮⁬‬‮‫‬⁮‭‪⁯‬⁭​​‏⁮‏​⁫‍‮‎​⁭⁯⁫⁫‏‫‪⁯‭‌​‭‍‎‍‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
