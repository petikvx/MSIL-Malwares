// Decompiled with JetBrains decompiler
// Type: MaterialSurface.MaterialComboBox
// Assembly: Func, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EFD38B4B-EBC7-4ADC-A92E-3AF74F6197CA
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Backdoor.MSIL.Androm.gen-0b4d55da62340d71ea45226007214ecfa33b00b09e9cbd48736eaaf51cfd8125.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace MaterialSurface
{
  public class MaterialComboBox : ComboBox, IMaterialControl
  {
    private const string TEXT_TO_MEASURE = "DUONG BINH TRONG";
    private readonly StringFormat textAglignment = new StringFormat()
    {
      Alignment = StringAlignment.Near,
      LineAlignment = StringAlignment.Center
    };
    private readonly Timer animationDirector = new Timer()
    {
      Interval = 1
    };
    private Color primaryColor = Color.BlueViolet;
    private Font floatingLabelFont;
    private Font hintFont;
    private int firstDot;
    private int middleDot;
    private int lastDot;
    private int incSize;
    private int curIndex = -1;
    private int topPadding;
    private int hintLocation;
    private int incLocation;
    private float incFontSize = 0.315f;
    private string hintText = "";
    private bool autoSize = false;
    private readonly Point[] trianglePoints = new Point[3];
    private BoxType comboBoxType = BoxType.Normal;

    [Category("Appearance Material")]
    [Description("Primary color.")]
    public Color PrimaryColor
    {
      get => this.primaryColor;
      set
      {
        this.primaryColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("Hint-text is displayed when textfield is empty.")]
    public string HintText
    {
      get => this.hintText;
      set
      {
        this.hintText = value;
        if (this.autoSize)
          this.ReCalculateWidth(this.hintText);
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("")]
    public BoxType ComboBoxType
    {
      get => this.comboBoxType;
      set
      {
        this.comboBoxType = value;
        this.Invalidate();
      }
    }

    [Category("Appearance Material")]
    [Description("")]
    public bool AutoSizing
    {
      get => this.autoSize;
      set
      {
        this.autoSize = value;
        this.ReCalculateWidth();
      }
    }

    public MouseState MouseState { get; set; }

    public MaterialComboBox()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.ResizeRedraw | ControlStyles.SupportsTransparentBackColor | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.DoubleBuffered = true;
      this.Font = new Font("Segoe UI", 12f, FontStyle.Regular);
      this.MouseState = MouseState.OUT;
      this.incSize = this.Width / 24;
      this.incFontSize = (float) ((double) this.Font.Size * 0.25 / 8.0);
      this.firstDot = this.Width / 2;
      this.middleDot = this.firstDot;
      this.lastDot = this.firstDot;
      this.DrawMode = DrawMode.OwnerDrawVariable;
      this.DropDownStyle = ComboBoxStyle.DropDownList;
      this.DropDownWidth = this.Width;
      this.MaxDropDownItems = 4;
      this.hintLocation = this.Height / 2 + this.topPadding / 2 - 2;
      this.floatingLabelFont = new Font(this.Font.FontFamily, this.Font.Size * 0.75f, this.Font.Style);
      this.topPadding = (int) this.floatingLabelFont.Size * 2;
      this.ItemHeight = (int) this.CreateGraphics().MeasureString("DUONG BINH TRONG", this.Font).Height + this.topPadding;
      this.trianglePoints[0] = new Point(this.Width - 8 - 10, this.Height / 2 + this.topPadding / 2 - 4 - 2);
      this.trianglePoints[1] = new Point(this.Width - 8 - 5, this.Height / 2 + this.topPadding / 2 + 2 - 2);
      this.trianglePoints[2] = new Point(this.Width - 8, this.Height / 2 + this.topPadding / 2 - 4 - 2);
      this.animationDirector.Tick += new EventHandler(this.OnAnimate);
    }

    private void OnAnimate(object sender, EventArgs e)
    {
      if (this.Focused)
      {
        if (this.firstDot > 0)
        {
          if ((double) this.hintFont.Size - (double) this.incFontSize > (double) this.floatingLabelFont.Size)
            this.hintFont = new Font(this.hintFont.FontFamily, this.hintFont.Size - this.incFontSize, this.hintFont.Style);
          if (this.hintLocation - this.incLocation > this.topPadding / 2)
            this.hintLocation -= this.incLocation;
          this.firstDot -= this.incSize;
          this.lastDot += this.incSize;
        }
        else
        {
          this.hintFont = this.floatingLabelFont;
          this.hintLocation = this.topPadding / 2;
          this.animationDirector.Stop();
        }
      }
      else if (this.firstDot < this.middleDot)
      {
        if (this.SelectedItem == null && (double) this.hintFont.Size + (double) this.incFontSize < (double) this.Font.Size)
          this.hintFont = new Font(this.hintFont.FontFamily, this.hintFont.Size + this.incFontSize, this.hintFont.Style);
        if (this.SelectedItem == null && this.hintLocation + this.incLocation < this.Height / 2 + this.topPadding / 2 - 2)
          this.hintLocation += this.incLocation;
        this.firstDot += this.incSize;
        this.lastDot -= this.incSize;
      }
      else
      {
        if (this.SelectedItem == null)
        {
          this.hintFont = this.Font;
          this.hintLocation = this.Height / 2 + this.topPadding / 2 - 2;
        }
        this.firstDot = this.middleDot;
        this.lastDot = this.middleDot;
        this.animationDirector.Stop();
      }
      this.Invalidate();
    }

    protected override void OnPaint(PaintEventArgs e)
    {
      base.OnPaint(e);
      Graphics graphics = e.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      Pen pen = new Pen((Brush) new SolidBrush(Color.FromArgb(180, Color.Gray)), 1.5f);
      GraphicsPath path1 = new GraphicsPath();
      float[] numArray = new float[2]{ 4f, 2f };
      pen.DashPattern = numArray;
      Color color = !(this.Parent is IMaterialControl) ? this.Parent.BackColor : ((MaterialCard) this.Parent).CardColor;
      graphics.Clear(color);
      if (this.Enabled)
      {
        switch (this.comboBoxType)
        {
          case BoxType.Normal:
            graphics.DrawLine(new Pen((Brush) new SolidBrush(this.MouseState == MouseState.OUT ? Color.Gray : this.primaryColor), this.MouseState == MouseState.OUT ? 1.3f : 1.6f), 0, this.Height - 4, this.Width, this.Height - 4);
            break;
          case BoxType.Outlined:
            path1 = GraphicHelper.GetRoundedRectangle(2f, (float) (this.topPadding / 2), (float) (this.Width - 4), (float) (this.Height - this.topPadding / 2 - 2), 4);
            if (this.Focused)
            {
              graphics.DrawPath(new Pen(this.primaryColor, 2.2f), path1);
              break;
            }
            graphics.DrawPath(new Pen(this.MouseState == MouseState.OUT ? Color.DimGray : this.primaryColor, this.MouseState == MouseState.OUT ? 1.3f : 1.6f), path1);
            break;
          case BoxType.Filled:
            path1 = GraphicHelper.GetRoundedRectangle(0.0f, 0.0f, (float) this.Width, (float) (this.Height - 2), 4);
            graphics.FillPath((Brush) new SolidBrush(Color.FromArgb(this.Focused ? (int) byte.MaxValue : 200, Color.WhiteSmoke)), path1);
            graphics.DrawLine(new Pen((Brush) new SolidBrush(this.MouseState == MouseState.OUT ? Color.Gray : this.primaryColor), this.MouseState == MouseState.OUT ? 1.3f : 1.6f), 0, this.Height - 4, this.Width, this.Height - 4);
            break;
        }
      }
      else
      {
        switch (this.comboBoxType)
        {
          case BoxType.Normal:
            graphics.DrawLine(pen, 0, this.Height - 4, this.Width, this.Height - 4);
            break;
          case BoxType.Outlined:
            path1 = GraphicHelper.GetRoundedRectangle(2f, (float) (this.topPadding / 2), (float) (this.Width - 4), (float) (this.Height - this.topPadding / 2 - 2), 4);
            graphics.DrawPath(pen, path1);
            break;
          case BoxType.Filled:
            path1 = GraphicHelper.GetRoundedRectangle(0.0f, 0.0f, (float) this.Width, (float) (this.Height - 2), 4);
            graphics.FillPath((Brush) new SolidBrush(Color.WhiteSmoke), path1);
            graphics.DrawLine(pen, 0, this.Height - 4, this.Width, this.Height - 4);
            break;
        }
      }
      if (this.comboBoxType == BoxType.Outlined)
      {
        SizeF sizeF = this.CreateGraphics().MeasureString(this.hintText, this.hintFont);
        graphics.FillRectangle((Brush) new SolidBrush(color), 7f, (float) (this.hintLocation / 2), sizeF.Width, sizeF.Height);
      }
      graphics.DrawString(this.hintText, this.hintFont, (Brush) new SolidBrush(this.Focused ? this.primaryColor : (this.SelectedItem != null ? Color.Gray : Color.Silver)), 8f, (float) this.hintLocation, this.textAglignment);
      if (this.SelectedItem != null)
        graphics.DrawString(this.SelectedItem.ToString(), this.Font, (Brush) new SolidBrush(this.ForeColor), 8f, (float) (this.Height / 2 + this.topPadding / 2 - 2), this.textAglignment);
      GraphicsPath path2 = new GraphicsPath();
      path2.AddLine(this.trianglePoints[0], this.trianglePoints[1]);
      path2.AddLine(this.trianglePoints[1], this.trianglePoints[2]);
      path2.AddLine(this.trianglePoints[0], this.trianglePoints[2]);
      path2.CloseFigure();
      graphics.FillPath((Brush) new SolidBrush(this.Focused || this.MouseState == MouseState.HOVER ? this.primaryColor : Color.Gray), path2);
      if (this.comboBoxType != BoxType.Outlined)
      {
        graphics.DrawLine(new Pen((Brush) new SolidBrush(this.primaryColor), 2.6f), this.firstDot, this.Height - 4, this.middleDot, this.Height - 4);
        graphics.DrawLine(new Pen((Brush) new SolidBrush(this.primaryColor), 2.6f), this.middleDot, this.Height - 4, this.lastDot, this.Height - 4);
      }
      path1.Dispose();
      pen.Dispose();
    }

    protected override void OnDrawItem(DrawItemEventArgs e)
    {
      base.OnDrawItem(e);
      if (e.Index < 0 || e.Index > this.Items.Count || !this.Focused)
        return;
      Graphics graphics = e.Graphics;
      graphics.SmoothingMode = SmoothingMode.HighQuality;
      graphics.FillRectangle((Brush) new SolidBrush(Color.White), e.Bounds);
      if (e.State.HasFlag((Enum) DrawItemState.Focus) || this.curIndex == e.Index)
        graphics.FillRectangle((Brush) new SolidBrush(Color.FromArgb(75, Color.Gray)), e.Bounds);
      if (this.curIndex == e.Index)
        graphics.FillRectangle((Brush) new SolidBrush(Color.FromArgb(100, Color.Gray)), e.Bounds);
      graphics.DrawString(" " + this.Items[e.Index].ToString(), this.Font, (Brush) new SolidBrush(Color.Black), (RectangleF) e.Bounds, this.textAglignment);
    }

    protected override void OnControlAdded(ControlEventArgs e)
    {
      base.OnControlAdded(e);
      if (!this.autoSize)
        return;
      this.ReCalculateWidth();
    }

    protected override void OnDropDownStyleChanged(EventArgs e)
    {
      base.OnDropDownStyleChanged(e);
      this.DropDownStyle = ComboBoxStyle.DropDownList;
    }

    protected override void OnDropDown(EventArgs e)
    {
      base.OnDropDown(e);
      this.curIndex = this.SelectedIndex;
      int y = this.trianglePoints[1].Y;
      this.trianglePoints[1].Y = !this.DroppedDown ? this.trianglePoints[0].Y : this.trianglePoints[1].Y;
      this.trianglePoints[0].Y = this.trianglePoints[2].Y = !this.DroppedDown ? y : this.trianglePoints[0].Y;
    }

    protected override void OnDropDownClosed(EventArgs e)
    {
      base.OnDropDownClosed(e);
      int y = this.trianglePoints[1].Y;
      this.trianglePoints[1].Y = !this.DroppedDown ? this.trianglePoints[0].Y : this.trianglePoints[1].Y;
      this.trianglePoints[0].Y = this.trianglePoints[2].Y = !this.DroppedDown ? y : this.trianglePoints[0].Y;
      this.Invalidate();
    }

    protected override void OnSelectedIndexChanged(EventArgs e)
    {
      base.OnSelectedIndexChanged(e);
      if (this.animationDirector.Enabled)
        return;
      if (this.SelectedIndex > -1)
      {
        this.hintFont = this.floatingLabelFont;
        this.hintLocation = this.topPadding / 2;
      }
      else
      {
        this.hintFont = this.Font;
        this.hintLocation = this.Height / 2 + this.topPadding / 2 - 2;
      }
      this.Invalidate();
    }

    protected override void OnSizeChanged(EventArgs e)
    {
      base.OnSizeChanged(e);
      this.incSize = this.Width / 24;
      this.firstDot = this.Width / 2;
      this.middleDot = this.firstDot;
      this.lastDot = this.firstDot;
      if (this.SelectedItem == null)
        this.hintLocation = this.Height / 2 + this.topPadding / 2 - 2;
      this.trianglePoints[0] = new Point(this.Width - 8 - 10, this.Height / 2 + this.topPadding / 2 - 4 - 2);
      this.trianglePoints[1] = new Point(this.Width - 8 - 5, this.Height / 2 + this.topPadding / 2 + 2 - 2);
      this.trianglePoints[2] = new Point(this.Width - 8, this.Height / 2 + this.topPadding / 2 - 4 - 2);
    }

    protected override void OnFontChanged(EventArgs e)
    {
      base.OnFontChanged(e);
      this.floatingLabelFont = new Font(this.Font.FontFamily, this.Font.Size * 0.75f, this.Font.Style);
      this.hintFont = this.SelectedItem != null ? this.floatingLabelFont : this.Font;
      this.incFontSize = (float) ((double) this.Font.Size * 0.25 / 8.0);
      this.topPadding = (int) this.floatingLabelFont.Size * 2;
      this.incLocation = this.topPadding / 8;
      this.ItemHeight = (int) this.CreateGraphics().MeasureString("DUONG BINH TRONG", this.Font).Height + this.topPadding;
      this.Invalidate();
    }

    protected override void OnGotFocus(EventArgs e)
    {
      base.OnGotFocus(e);
      this.MouseState = MouseState.HOVER;
      this.firstDot -= this.incSize * 3;
      this.lastDot += this.incSize * 3;
      this.animationDirector.Start();
    }

    protected override void OnLostFocus(EventArgs e)
    {
      base.OnLostFocus(e);
      this.MouseState = MouseState.OUT;
      this.animationDirector.Start();
    }

    protected override void OnMouseEnter(EventArgs e)
    {
      base.OnMouseEnter(e);
      this.MouseState = MouseState.HOVER;
      this.Invalidate();
    }

    protected override void OnMouseLeave(EventArgs e)
    {
      base.OnMouseLeave(e);
      this.MouseState = MouseState.OUT;
      this.Invalidate();
    }

    private void ReCalculateWidth()
    {
      int num1 = 150;
      int num2 = (int) this.CreateGraphics().MeasureString(this.hintText, this.Font).Width + 30;
      if (num2 > num1)
        num1 = num2;
      foreach (object obj in this.Items)
      {
        int num3 = (int) this.CreateGraphics().MeasureString(obj.ToString(), this.Font).Width + 30;
        if (num3 > num1)
          num1 = num3;
      }
      this.Width = num1;
      this.Invalidate();
    }

    private void ReCalculateWidth(string text)
    {
      int num = (int) this.CreateGraphics().MeasureString(text, this.Font).Width + 30;
      if (num > this.Width)
        this.Width = num;
      else
        this.ReCalculateWidth();
      this.Invalidate();
    }
  }
}
