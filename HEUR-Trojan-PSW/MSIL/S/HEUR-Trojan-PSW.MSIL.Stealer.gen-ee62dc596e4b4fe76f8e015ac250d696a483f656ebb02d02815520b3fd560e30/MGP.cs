// Decompiled with JetBrains decompiler
// Type: wG.MGP
// Assembly: Type, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 716CE3A9-BAD1-470D-912F-B421D403F66E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-ee62dc596e4b4fe76f8e015ac250d696a483f656ebb02d02815520b3fd560e30.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace wG
{
  internal class MGP : pGN
  {
    private static MGP WNw;

    public void QCS(mI _param1)
    {
      IEnumerator<MW> enumerator1 = _param1.Kek().GetEnumerator();
      try
      {
        while (enumerator1.MoveNext())
        {
          MW current1 = enumerator1.Current;
          if (!(current1 is PK))
            goto label_21;
          else
            goto label_38;
label_18:
          continue;
label_21:
          bool flag1 = current1 is Ph;
          int num1 = 2;
label_2:
          int num2 = num1;
          bool flag2;
          IEnumerator<B8> enumerator2;
          while (true)
          {
            switch (num2)
            {
              case 1:
                goto label_18;
              case 2:
                if (!flag1)
                {
                  flag2 = current1 is yO;
                  if (MGP.zN5() == null)
                  {
                    num2 = 0;
                    continue;
                  }
                  goto label_2;
                }
                else
                  goto label_23;
              case 3:
                goto label_12;
              default:
                if (flag2)
                {
                  enumerator2 = (current1 as yO).BfJ().GetEnumerator();
                  num2 = MGP.zN5() == null ? 3 : 3;
                  continue;
                }
                goto label_18;
            }
          }
label_12:
          try
          {
            while (MGP.VNf((object) enumerator2))
              MGP.cR2(enumerator2.Current.Uyo(), current1);
            goto label_18;
          }
          finally
          {
            enumerator2?.Dispose();
          }
label_23:
          using (IEnumerator<Hl> enumerator3 = (current1 as Ph).NfN().GetEnumerator())
          {
            while (enumerator3.MoveNext())
              MGP.cR2(enumerator3.Current.tyn(), current1);
            goto label_18;
          }
label_38:
          using (Dictionary<string, G6>.ValueCollection.Enumerator enumerator4 = (current1 as PK).ACA().Values.GetEnumerator())
          {
            while (enumerator4.MoveNext())
            {
              G6 current2 = enumerator4.Current;
              if (current2.qyA() is gi)
                goto label_30;
              else
                goto label_34;
label_25:
              HL hl;
              gi gi;
              int num3;
              switch (num3)
              {
                case 1:
                  continue;
                case 2:
                  MGP.lN0((object) hl, MGP.zNE((object) gi));
                  hl.J1F(gi.f19());
                  current2.fye((PJ) hl);
                  break;
                default:
                  goto label_33;
              }
label_27:
              continue;
label_30:
              gi = (gi) current2.qyA();
              if (_param1.PeH().ContainsKey(gi.ffO()))
              {
                hl = new HL();
                hl.vfb(_param1.PeH()[gi.ffO()]);
                num3 = 1;
                if (MGP.CNo())
                {
                  num3 = 2;
                  goto label_25;
                }
                else
                  goto label_25;
              }
label_33:
              RG2.u91(gi.f19(), "Could not resolve '" + gi.ffO() + "' to a type.");
              goto label_27;
label_34:
              int num4;
              num3 = MGP.CNo() ? 1 : num4;
              goto label_25;
            }
            goto label_18;
          }
        }
      }
      finally
      {
        if (enumerator1 != null)
          MGP.NNj((object) enumerator1);
      }
    }

    private static void cR2(IList<zq> _param0, MW _param1)
    {
      if (_param0 == null)
        return;
      for (int index = 0; index < _param0.Count; ++index)
      {
        zq zq = _param0[index];
        if (zq is lGR)
        {
          lGR lGr = zq as lGR;
          RG4 rg4 = new RG4();
          rg4.z92(lGr.s9A());
          rg4.J1F(lGr.f19());
          if (_param1.R1z().ContainsKey(lGr.F9a()))
            rg4.Q99(_param1.R1z()[lGr.F9a()]);
          else
            RG2.u91(rg4.f19(), "Could not find local variable: '" + lGr.F9a() + "'");
          _param0.Insert(index, (zq) rg4);
          _param0.Remove(zq);
        }
      }
    }

    public MGP()
    {
      XTG.fvQjdC();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static object zNE([In] object obj0) => (object) ((gi) obj0).XCX();

    internal static void lN0([In] object obj0, [In] object obj1) => ((HL) obj0).kCn((Q5) obj1);

    internal static bool VNf([In] object obj0) => ((IEnumerator) obj0).MoveNext();

    internal static void NNj([In] object obj0) => ((IDisposable) obj0).Dispose();

    internal static bool CNo() => MGP.WNw == null;

    internal static MGP zN5() => MGP.WNw;
  }
}
