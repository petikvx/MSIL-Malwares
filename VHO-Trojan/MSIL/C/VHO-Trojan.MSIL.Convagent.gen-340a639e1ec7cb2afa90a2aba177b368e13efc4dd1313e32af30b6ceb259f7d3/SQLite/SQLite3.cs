// Decompiled with JetBrains decompiler
// Type: SQLite.SQLite3
// Assembly: SharpChrome, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: D938FA4A-3611-4CA7-B3BE-AF9F6D845B7B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\VHO-Trojan.MSIL.Convagent.gen-340a639e1ec7cb2afa90a2aba177b368e13efc4dd1313e32af30b6ceb259f7d3.exe

using Community.CsharpSqlite;
using System;

namespace SQLite
{
  public static class SQLite3
  {
    public static SQLite3.Result Open(string filename, out Sqlite3.sqlite3 db) => (SQLite3.Result) Sqlite3.sqlite3_open(filename, out db);

    public static SQLite3.Result Open(
      string filename,
      out Sqlite3.sqlite3 db,
      int flags,
      IntPtr zVfs)
    {
      return (SQLite3.Result) Sqlite3.sqlite3_open_v2(filename, out db, flags, (string) null);
    }

    public static SQLite3.Result Close(Sqlite3.sqlite3 db) => (SQLite3.Result) Sqlite3.sqlite3_close(db);

    public static SQLite3.Result BusyTimeout(Sqlite3.sqlite3 db, int milliseconds) => (SQLite3.Result) Sqlite3.sqlite3_busy_timeout(db, milliseconds);

    public static int Changes(Sqlite3.sqlite3 db) => Sqlite3.sqlite3_changes(db);

    public static Sqlite3.Vdbe Prepare2(Sqlite3.sqlite3 db, string query)
    {
      Sqlite3.Vdbe ppStmt = new Sqlite3.Vdbe();
      int r = Sqlite3.sqlite3_prepare_v2(db, query, -1, ref ppStmt, 0);
      if (r != 0)
        throw SQLiteException.New((SQLite3.Result) r, SQLite3.GetErrmsg(db));
      return ppStmt;
    }

    public static SQLite3.Result Step(Sqlite3.Vdbe stmt) => (SQLite3.Result) Sqlite3.sqlite3_step(stmt);

    public static SQLite3.Result Reset(Sqlite3.Vdbe stmt) => (SQLite3.Result) Sqlite3.sqlite3_reset(stmt);

    public static SQLite3.Result Finalize(Sqlite3.Vdbe stmt) => (SQLite3.Result) Sqlite3.sqlite3_finalize(stmt);

    public static long LastInsertRowid(Sqlite3.sqlite3 db) => Sqlite3.sqlite3_last_insert_rowid(db);

    public static string GetErrmsg(Sqlite3.sqlite3 db) => Sqlite3.sqlite3_errmsg(db);

    public static int BindParameterIndex(Sqlite3.Vdbe stmt, string name) => Sqlite3.sqlite3_bind_parameter_index(stmt, name);

    public static int BindNull(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_bind_null(stmt, index);

    public static int BindInt(Sqlite3.Vdbe stmt, int index, int val) => Sqlite3.sqlite3_bind_int(stmt, index, val);

    public static int BindInt64(Sqlite3.Vdbe stmt, int index, long val) => Sqlite3.sqlite3_bind_int64(stmt, index, val);

    public static int BindDouble(Sqlite3.Vdbe stmt, int index, double val) => Sqlite3.sqlite3_bind_double(stmt, index, val);

    public static int BindText(Sqlite3.Vdbe stmt, int index, string val, int n, IntPtr free) => Sqlite3.sqlite3_bind_text(stmt, index, val, n, (Sqlite3.dxDel) null);

    public static int BindBlob(Sqlite3.Vdbe stmt, int index, byte[] val, int n, IntPtr free) => Sqlite3.sqlite3_bind_blob(stmt, index, val, n, (Sqlite3.dxDel) null);

    public static int ColumnCount(Sqlite3.Vdbe stmt) => Sqlite3.sqlite3_column_count(stmt);

    public static string ColumnName(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_name(stmt, index);

    public static string ColumnName16(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_name(stmt, index);

    public static SQLite3.ColType ColumnType(Sqlite3.Vdbe stmt, int index) => (SQLite3.ColType) Sqlite3.sqlite3_column_type(stmt, index);

    public static int ColumnInt(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_int(stmt, index);

    public static long ColumnInt64(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_int64(stmt, index);

    public static double ColumnDouble(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_double(stmt, index);

    public static string ColumnText(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_text(stmt, index);

    public static string ColumnText16(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_text(stmt, index);

    public static byte[] ColumnBlob(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_blob(stmt, index);

    public static int ColumnBytes(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_bytes(stmt, index);

    public static string ColumnString(Sqlite3.Vdbe stmt, int index) => Sqlite3.sqlite3_column_text(stmt, index);

    public static byte[] ColumnByteArray(Sqlite3.Vdbe stmt, int index) => SQLite3.ColumnBlob(stmt, index);

    public static SQLite3.Result EnableLoadExtension(Sqlite3.sqlite3 db, int onoff) => (SQLite3.Result) Sqlite3.sqlite3_enable_load_extension(db, onoff);

    public enum Result
    {
      OK = 0,
      Error = 1,
      Internal = 2,
      Perm = 3,
      Abort = 4,
      Busy = 5,
      Locked = 6,
      NoMem = 7,
      ReadOnly = 8,
      Interrupt = 9,
      IOError = 10, // 0x0000000A
      Corrupt = 11, // 0x0000000B
      NotFound = 12, // 0x0000000C
      Full = 13, // 0x0000000D
      CannotOpen = 14, // 0x0000000E
      LockErr = 15, // 0x0000000F
      Empty = 16, // 0x00000010
      SchemaChngd = 17, // 0x00000011
      TooBig = 18, // 0x00000012
      Constraint = 19, // 0x00000013
      Mismatch = 20, // 0x00000014
      Misuse = 21, // 0x00000015
      NotImplementedLFS = 22, // 0x00000016
      AccessDenied = 23, // 0x00000017
      Format = 24, // 0x00000018
      Range = 25, // 0x00000019
      NonDBFile = 26, // 0x0000001A
      Row = 100, // 0x00000064
      Done = 101, // 0x00000065
    }

    public enum ConfigOption
    {
      SingleThread = 1,
      MultiThread = 2,
      Serialized = 3,
    }

    public enum ColType
    {
      Integer = 1,
      Float = 2,
      Text = 3,
      Blob = 4,
      Null = 5,
    }
  }
}
