// Decompiled with JetBrains decompiler
// Type: IRefl.Resolver.ConnectionTokenizerResolver
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using ProjNet.Services;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace IRefl.Resolver
{
  public class ConnectionTokenizerResolver : Form
  {
    private IContainer _ParamAdvisor;
    private Label m_DescriptorAdvisor;
    private Button resolverAdvisor;
    private Label importerAdvisor;
    private Label m_ProductAdvisor;
    private Label m_DicAdvisor;
    private TextBox m_ExceptionAdvisor;
    private TextBox m_ErrorAdvisor;
    private TextBox m_ModelAdvisor;
    private TextBox _MessageAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ConnectionTokenizerResolver()
    {
      int num1 = 3;
      if (true)
        goto label_4;
label_1:
      this.MapFacade();
      int num2 = 5;
label_3:
      num1 = num2;
label_4:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 4:
            goto label_2;
          case 3:
            PageAdvisorStructBuilder.PrepareCreator();
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto label_7;
          case 5:
            goto label_8;
          default:
            goto label_5;
        }
      }
label_2:
      this._ParamAdvisor = (IContainer) null;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      goto label_1;
label_8:
      return;
label_5:
      num2 = 0;
      goto label_3;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void VisitFacade(object param, EventArgs visitor)
    {
      try
      {
        string text1 = this.m_ExceptionAdvisor.Text;
        int num1 = 4;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                this.m_ExceptionAdvisor.Text = "";
                this.m_ErrorAdvisor.Text = "";
                num2 = 5;
                continue;
              case 1:
              case 3:
                int num3 = (int) MessageBox.Show("Title Added.");
                goto case 0;
              case 4:
                string text2 = this.m_ErrorAdvisor.Text;
                string text3 = this._MessageAdvisor.Text;
                int dic_count = int.Parse(this.m_ModelAdvisor.Text);
                CallbackRegistry.StopAdvisor(text1, text2, dic_count, text3);
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_9;
              case 5:
                goto label_7;
              case 6:
                goto label_11;
              default:
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_7;
            }
          }
label_7:
          this._MessageAdvisor.Text = "";
          this.m_ModelAdvisor.Text = "";
          num1 = 6;
        }
label_11:
        return;
label_9:;
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show("Unable to Insert Title");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool assetstop)
    {
      int num1 = 0;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
label_9:
            if (!assetstop)
            {
              num2 = 0;
              break;
            }
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto label_11;
          case 1:
          case 3:
            num2 = this._ParamAdvisor != null ? 1 : 0;
            break;
          case 2:
          case 4:
label_7:
            this._ParamAdvisor.Dispose();
            goto label_8;
          case 5:
            goto label_4;
          default:
            num1 = 4;
            continue;
        }
        if (num2 != 0)
          goto label_7;
label_8:
        base.Dispose(assetstop);
        if (ConnectionTokenizerResolver.FillModel())
          num1 = 5;
        else
          goto label_9;
      }
label_4:
      return;
label_11:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void MapFacade()
    {
      int num1 = 3;
      if (ConnectionTokenizerResolver.FillModel())
        goto label_11;
label_1:
      this.m_DescriptorAdvisor = new Label();
      num1 = 11;
label_11:
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
            this.resolverAdvisor.TabIndex = 1;
            this.resolverAdvisor.Text = "Insert";
            this.resolverAdvisor.UseVisualStyleBackColor = true;
            this.resolverAdvisor.Click += new EventHandler(this.VisitFacade);
            this.importerAdvisor.AutoSize = true;
            if (!ConnectionTokenizerResolver.AssetModel())
            {
              num1 = 16;
              continue;
            }
            goto case 20;
          case 1:
            this.resolverAdvisor.Margin = new Padding(8, 7, 8, 7);
            this.resolverAdvisor.Name = "InsertButton";
            this.resolverAdvisor.Size = new Size(200, 55);
            if (ConnectionTokenizerResolver.FillModel())
            {
              num1 = 0;
              continue;
            }
            goto case 11;
          case 2:
            this._MessageAdvisor.Location = new Point(269, 289);
            num2 = 17;
            break;
          case 3:
            goto label_1;
          case 4:
            this._MessageAdvisor.Name = "CopyrightTextBox";
            this._MessageAdvisor.Size = new Size(260, 38);
            if (true)
            {
              num1 = 8;
              continue;
            }
            goto case 5;
          case 5:
            this.m_ModelAdvisor.Name = "EditionTextBox";
            this.m_ModelAdvisor.Size = new Size(260, 38);
            num2 = 12;
            break;
          case 6:
          case 10:
            this.m_ProductAdvisor.Text = "Edition Number:";
            num1 = 15;
            continue;
          case 7:
            this.AutoScaleDimensions = new SizeF(16f, 31f);
            this.AutoScaleMode = AutoScaleMode.Font;
            this.ClientSize = new Size(779, 451);
            this.Controls.Add((Control) this._MessageAdvisor);
            this.Controls.Add((Control) this.m_ModelAdvisor);
            this.Controls.Add((Control) this.m_ErrorAdvisor);
            this.Controls.Add((Control) this.m_ExceptionAdvisor);
            this.Controls.Add((Control) this.m_DicAdvisor);
            this.Controls.Add((Control) this.m_ProductAdvisor);
            num1 = 18;
            continue;
          case 8:
            this._MessageAdvisor.TabIndex = 8;
            num2 = 7;
            break;
          case 9:
            this.Name = "InsertTitle";
            this.Text = "Insert Title";
            this.ResumeLayout(false);
            this.PerformLayout();
            num2 = 23;
            break;
          case 11:
            this.resolverAdvisor = new Button();
            this.importerAdvisor = new Label();
            this.m_ProductAdvisor = new Label();
            this.m_DicAdvisor = new Label();
            this.m_ExceptionAdvisor = new TextBox();
            this.m_ErrorAdvisor = new TextBox();
            int num3 = 20;
            num1 = ConnectionTokenizerResolver.AssetModel() ? num3 : num3;
            continue;
          case 12:
            this.m_ModelAdvisor.TabIndex = 7;
            num2 = 2;
            break;
          case 13:
            this.m_ExceptionAdvisor.Location = new Point(269, 83);
            this.m_ExceptionAdvisor.Margin = new Padding(8, 7, 8, 7);
            this.m_ExceptionAdvisor.Name = "ISBNTextBox";
            num2 = 22;
            break;
          case 14:
            this.m_ErrorAdvisor.TabIndex = 6;
            this.m_ModelAdvisor.Location = new Point(269, 227);
            this.m_ModelAdvisor.Margin = new Padding(8, 7, 8, 7);
            num2 = 5;
            break;
          case 15:
            this.m_DicAdvisor.AutoSize = true;
            this.m_DicAdvisor.Location = new Point(117, 293);
            this.m_DicAdvisor.Margin = new Padding(8, 0, 8, 0);
            this.m_DicAdvisor.Name = "label4";
            this.m_DicAdvisor.Size = new Size(137, 32);
            this.m_DicAdvisor.TabIndex = 4;
            this.m_DicAdvisor.Text = "Copyright";
            if (true)
            {
              num1 = 13;
              continue;
            }
            goto case 7;
          case 16:
            this.importerAdvisor.Location = new Point(99, 153);
            this.importerAdvisor.Margin = new Padding(8, 0, 8, 0);
            this.importerAdvisor.Name = "label2";
            this.importerAdvisor.Size = new Size(150, 32);
            this.importerAdvisor.TabIndex = 2;
            this.importerAdvisor.Text = "Book Title:";
            this.m_ProductAdvisor.AutoSize = true;
            this.m_ProductAdvisor.Location = new Point(35, 227);
            this.m_ProductAdvisor.Margin = new Padding(8, 0, 8, 0);
            this.m_ProductAdvisor.Name = "label3";
            this.m_ProductAdvisor.Size = new Size(219, 32);
            this.m_ProductAdvisor.TabIndex = 3;
            num1 = 10;
            continue;
          case 17:
            this._MessageAdvisor.Margin = new Padding(8, 7, 8, 7);
            num1 = 4;
            continue;
          case 18:
          case 19:
            this.Controls.Add((Control) this.importerAdvisor);
            this.Controls.Add((Control) this.resolverAdvisor);
            this.Controls.Add((Control) this.m_DescriptorAdvisor);
            this.Margin = new Padding(8, 7, 8, 7);
            if (ConnectionTokenizerResolver.FillModel())
            {
              num1 = 9;
              continue;
            }
            goto case 17;
          case 20:
            this.m_ModelAdvisor = new TextBox();
            this._MessageAdvisor = new TextBox();
            this.SuspendLayout();
            this.m_DescriptorAdvisor.AutoSize = true;
            this.m_DescriptorAdvisor.Location = new Point(160, 83);
            this.m_DescriptorAdvisor.Margin = new Padding(8, 0, 8, 0);
            this.m_DescriptorAdvisor.Name = "label1";
            this.m_DescriptorAdvisor.Size = new Size(88, 32);
            this.m_DescriptorAdvisor.TabIndex = 0;
            this.m_DescriptorAdvisor.Text = "ISBN:";
            this.resolverAdvisor.Location = new Point(269, 351);
            num2 = 1;
            break;
          case 21:
            this.m_ExceptionAdvisor.TabIndex = 5;
            this.m_ErrorAdvisor.Location = new Point(269, 153);
            this.m_ErrorAdvisor.Margin = new Padding(8, 7, 8, 7);
            this.m_ErrorAdvisor.Name = "BookTitleTextBox";
            this.m_ErrorAdvisor.Size = new Size(260, 38);
            goto case 14;
          case 22:
            this.m_ExceptionAdvisor.Size = new Size(260, 38);
            num1 = 21;
            continue;
          case 23:
            goto label_25;
          default:
            if (true)
            {
              num1 = 14;
              continue;
            }
            goto case 8;
        }
        num1 = num2;
      }
label_25:;
    }

    internal static bool FillModel() => true;

    internal static bool AssetModel() => false;
  }
}
