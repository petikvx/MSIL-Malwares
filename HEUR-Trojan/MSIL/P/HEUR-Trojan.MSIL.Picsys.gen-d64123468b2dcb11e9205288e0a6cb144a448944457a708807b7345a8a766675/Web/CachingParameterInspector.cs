// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Web.CachingParameterInspector
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Diagnostics;
using System.Security;
using System.ServiceModel.Activation;
using System.ServiceModel.Channels;
using System.ServiceModel.Diagnostics;
using System.ServiceModel.Dispatcher;
using System.Web;
using System.Web.Caching;
using System.Web.Configuration;
using System.Web.UI;

namespace System.ServiceModel.Web
{
  internal class CachingParameterInspector : IParameterInspector
  {
    private const char seperatorChar = ';';
    private const char escapeChar = '\\';
    private const char tableDbSeperatorChar = ':';
    private const string invalidSqlDependencyString = "Invalid Sql dependency string.";
    [SecurityCritical]
    private OutputCacheProfile cacheProfile;
    private CachingParameterInspector.SqlDependencyInfo[] cacheDependencyInfoArray;

    [SecuritySafeCritical]
    public CachingParameterInspector(string cacheProfileName)
    {
      if (string.IsNullOrEmpty(cacheProfileName))
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.CacheProfileNameNullOrEmpty));
      if (!(AspNetEnvironment.Current.UnsafeGetConfigurationSection("system.web/caching/outputCacheSettings") is OutputCacheSettingsSection configurationSection))
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.CacheProfileNotConfigured, (object) cacheProfileName)));
      }
      this.cacheProfile = configurationSection.OutputCacheProfiles[cacheProfileName];
      if (this.cacheProfile == null)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.CacheProfileNotConfigured, (object) cacheProfileName)));
      }
      if (this.cacheProfile.Location != OutputCacheLocation.None)
      {
        if (this.cacheProfile.Duration == -1)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.CacheProfileValueMissing, (object) this.cacheProfile.Name, (object) "Duration")));
        }
        if (this.cacheProfile.VaryByParam == null)
        {
          // ISSUE: reference to a compiler-generated method
          throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.CacheProfileValueMissing, (object) this.cacheProfile.Name, (object) "VaryByParam")));
        }
      }
      if (string.Equals(this.cacheProfile.SqlDependency, "CommandNotification", StringComparison.OrdinalIgnoreCase))
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.CommandNotificationSqlDependencyNotSupported));
      if (string.IsNullOrEmpty(this.cacheProfile.SqlDependency))
        return;
      CachingParameterInspector.ParseSqlDependencyString(this.cacheProfile.SqlDependency);
    }

    [SecuritySafeCritical]
    public void AfterCall(
      string operationName,
      object[] outputs,
      object returnValue,
      object correlationState)
    {
      if (this.cacheProfile == null || !this.cacheProfile.Enabled || OperationContext.Current.IncomingMessage.Version != MessageVersion.None)
        return;
      if (DiagnosticUtility.ShouldTraceWarning && !this.IsAnonymous())
      {
        // ISSUE: reference to a compiler-generated method
        TraceUtility.TraceEvent(TraceEventType.Information, 983093, SR2.GetString(SR2.TraceCodeAddingAuthenticatedResponseToOutputCache, (object) operationName));
      }
      else if (DiagnosticUtility.ShouldTraceInformation)
      {
        // ISSUE: reference to a compiler-generated method
        TraceUtility.TraceEvent(TraceEventType.Information, 983092, SR2.GetString(SR2.TraceCodeAddingResponseToOutputCache, (object) operationName));
      }
      this.SetCacheFromCacheProfile();
    }

    public object BeforeCall(string operationName, object[] inputs) => (object) null;

    private bool IsAnonymous()
    {
      if (HttpContext.Current.User.Identity.IsAuthenticated)
        return false;
      return OperationContext.Current.ServiceSecurityContext == null || OperationContext.Current.ServiceSecurityContext.IsAnonymous;
    }

    private static CachingParameterInspector.SqlDependencyInfo[] ParseSqlDependencyString(
      string sqlDependencyString)
    {
      List<CachingParameterInspector.SqlDependencyInfo> sqlDependencyInfoList = new List<CachingParameterInspector.SqlDependencyInfo>();
      bool flag = false;
      int startIndex1 = 0;
      int startIndex2 = -1;
      string str1 = (string) null;
      try
      {
        for (int index = 0; index < sqlDependencyString.Length + 1; ++index)
        {
          if (flag)
            flag = false;
          else if (index != sqlDependencyString.Length && sqlDependencyString[index] == '\\')
          {
            flag = true;
          }
          else
          {
            if (index == sqlDependencyString.Length || sqlDependencyString[index] == ';')
            {
              if (str1 == null)
                throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument("Invalid Sql dependency string.");
              int length = index - startIndex2;
              if (length == 0)
                throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument("Invalid Sql dependency string.");
              string str2 = sqlDependencyString.Substring(startIndex2, length);
              sqlDependencyInfoList.Add(new CachingParameterInspector.SqlDependencyInfo()
              {
                Database = CachingParameterInspector.VerifyAndRemoveEscapeCharacters(str1),
                Table = CachingParameterInspector.VerifyAndRemoveEscapeCharacters(str2)
              });
              startIndex1 = index + 1;
              str1 = (string) null;
            }
            if (index != sqlDependencyString.Length)
            {
              if (sqlDependencyString[index] == ':')
              {
                if (str1 != null)
                  throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument("Invalid Sql dependency string.");
                int length = index - startIndex1;
                if (length == 0)
                  throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument("Invalid Sql dependency string.");
                str1 = sqlDependencyString.Substring(startIndex1, length);
                startIndex2 = index + 1;
              }
            }
            else
              break;
          }
        }
      }
      catch (ArgumentException ex)
      {
        // ISSUE: reference to a compiler-generated method
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.CacheProfileSqlDependencyIsInvalid, (object) sqlDependencyString)));
      }
      // ISSUE: reference to a compiler-generated method
      return sqlDependencyInfoList.Count != 0 ? sqlDependencyInfoList.ToArray() : throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new InvalidOperationException(SR2.GetString(SR2.CacheProfileSqlDependencyIsInvalid, (object) sqlDependencyString)));
    }

    private static string VerifyAndRemoveEscapeCharacters(string str)
    {
      bool flag = false;
      for (int index = 0; index < str.Length; ++index)
      {
        if (flag)
        {
          if (str[index] != '\\' && str[index] != ':' && str[index] != ';')
            throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument(str);
          flag = false;
        }
        else if (str[index] == '\\')
        {
          if (index + 1 == str.Length)
            throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgument(str);
          flag = true;
          str = str.Remove(index, 1);
          --index;
        }
      }
      return str;
    }

    private CacheDependency CreateSingleCacheDependency(string sqlDependency)
    {
      if (this.cacheDependencyInfoArray == null)
        this.cacheDependencyInfoArray = CachingParameterInspector.ParseSqlDependencyString(sqlDependency);
      if (this.cacheDependencyInfoArray.Length == 1)
        return (CacheDependency) new SqlCacheDependency(this.cacheDependencyInfoArray[0].Database, this.cacheDependencyInfoArray[0].Table);
      AggregateCacheDependency singleCacheDependency = new AggregateCacheDependency();
      foreach (CachingParameterInspector.SqlDependencyInfo cacheDependencyInfo in this.cacheDependencyInfoArray)
        singleCacheDependency.Add((CacheDependency) new SqlCacheDependency(cacheDependencyInfo.Database, cacheDependencyInfo.Table));
      return (CacheDependency) singleCacheDependency;
    }

    [SecuritySafeCritical]
    private void SetCacheFromCacheProfile()
    {
      HttpCachePolicy cache = HttpContext.Current.Response.Cache;
      if (this.cacheProfile.NoStore)
        cache.SetNoStore();
      if (this.cacheProfile.Location == ~OutputCacheLocation.Any)
      {
        cache.SetCacheability(HttpCacheability.Public);
      }
      else
      {
        switch (this.cacheProfile.Location)
        {
          case OutputCacheLocation.Any:
            cache.SetCacheability(HttpCacheability.Public);
            break;
          case OutputCacheLocation.Client:
            cache.SetCacheability(HttpCacheability.Private);
            break;
          case OutputCacheLocation.Downstream:
            cache.SetCacheability(HttpCacheability.Public);
            cache.SetNoServerCaching();
            break;
          case OutputCacheLocation.Server:
            cache.SetCacheability(HttpCacheability.Server);
            break;
          case OutputCacheLocation.None:
            cache.SetCacheability(HttpCacheability.NoCache);
            break;
          case OutputCacheLocation.ServerAndClient:
            cache.SetCacheability(HttpCacheability.ServerAndPrivate);
            break;
          default:
            // ISSUE: reference to a compiler-generated method
            throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.GetString(SR2.CacheProfileLocationNotSupported, (object) this.cacheProfile.Location)));
        }
      }
      if (this.cacheProfile.Location == OutputCacheLocation.None)
        return;
      cache.SetExpires(HttpContext.Current.Timestamp.AddSeconds((double) this.cacheProfile.Duration));
      cache.SetMaxAge(new TimeSpan(0, 0, this.cacheProfile.Duration));
      cache.SetValidUntilExpires(true);
      cache.SetLastModified(HttpContext.Current.Timestamp);
      if (this.cacheProfile.Location == OutputCacheLocation.Client)
        return;
      if (!string.IsNullOrEmpty(this.cacheProfile.VaryByContentEncoding))
      {
        string byContentEncoding = this.cacheProfile.VaryByContentEncoding;
        char[] chArray = new char[1]{ ';' };
        foreach (string str in byContentEncoding.Split(chArray))
          cache.VaryByContentEncodings[str.Trim()] = true;
      }
      if (!string.IsNullOrEmpty(this.cacheProfile.VaryByHeader))
      {
        string varyByHeader = this.cacheProfile.VaryByHeader;
        char[] chArray = new char[1]{ ';' };
        foreach (string str in varyByHeader.Split(chArray))
          cache.VaryByHeaders[str.Trim()] = true;
      }
      if (this.cacheProfile.Location == OutputCacheLocation.Downstream)
        return;
      if (!string.IsNullOrEmpty(this.cacheProfile.VaryByCustom))
        cache.SetVaryByCustom(this.cacheProfile.VaryByCustom);
      if (!string.IsNullOrEmpty(this.cacheProfile.VaryByParam))
      {
        string varyByParam = this.cacheProfile.VaryByParam;
        char[] chArray = new char[1]{ ';' };
        foreach (string str in varyByParam.Split(chArray))
          cache.VaryByParams[str.Trim()] = true;
      }
      if (string.IsNullOrEmpty(this.cacheProfile.SqlDependency))
        return;
      HttpContext.Current.Response.AddCacheDependency(this.CreateSingleCacheDependency(this.cacheProfile.SqlDependency));
    }

    private struct SqlDependencyInfo
    {
      public string Database;
      public string Table;
    }
  }
}
