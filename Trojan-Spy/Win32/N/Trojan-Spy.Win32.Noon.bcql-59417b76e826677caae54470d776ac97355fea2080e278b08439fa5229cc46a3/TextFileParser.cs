// Decompiled with JetBrains decompiler
// Type: mmxAH.TextFileParser
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System.IO;
using System.Windows.Forms;

namespace mmxAH
{
  public class TextFileParser
  {
    private string WorkFileName;
    private string CommentString;
    private FileStream fs;
    private StreamReader rd;
    private string CurStr;
    public bool isMultiName = false;

    public TextFileParser(string FileName, string pComment = "//")
    {
      this.WorkFileName = TextFileParser.CreatePath(FileName);
      this.CommentString = pComment;
    }

    public bool Open()
    {
      if (!File.Exists(this.WorkFileName))
        return false;
      this.fs = new FileStream(this.WorkFileName, FileMode.Open, FileAccess.Read);
      this.rd = new StreamReader((Stream) this.fs);
      this.CurStr = this.rd.ReadLine();
      return this.CurStr != null;
    }

    public string GetToken()
    {
      this.GetNewString();
      int num = this.CurStr.IndexOf(" ");
      if (num == -1)
      {
        string curStr = this.CurStr;
        this.CurStr = "";
        return curStr;
      }
      string token = this.CurStr.Substring(0, num);
      this.CurStr = this.CurStr.Remove(0, num);
      return token;
    }

    public string GetCurString()
    {
      this.GetNewString();
      string curStr = this.CurStr;
      this.CurStr = "";
      return curStr;
    }

    private void GetNewString()
    {
      do
      {
        this.CurStr = this.CurStr.Trim();
      }
      while ((this.CurStr == "" || this.CurStr.StartsWith(this.CommentString)) && (this.CurStr = this.rd.ReadLine()) != null);
    }

    public void Close()
    {
      this.rd.Close();
      this.fs.Close();
    }

    public static string CreatePath(string filename)
    {
      filename = filename.Trim();
      if (filename[0] == '/' || filename[0] == '\\')
        filename = filename.Remove(0, 1);
      filename = filename.Replace('\\', '/');
      filename = filename.Replace('/', Path.DirectorySeparatorChar);
      return Path.Combine(Application.StartupPath, filename);
    }
  }
}
