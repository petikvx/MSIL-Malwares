// Decompiled with JetBrains decompiler
// Type: Repository.BaseRepository`2
// Assembly: AnsiCharMarsha, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 45449883-CB33-464D-BFFF-85C1D8F95247
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.Win32.Stealer.aipl-731355759034e0ae5cff6011792f40d5154dccd99fac792da878777bbc532ce2.exe

using Core.Helpers;
using Core.Infrastructure.Logging;
using log4net;

namespace Repository
{
  public abstract class BaseRepository<TInterface, TClass> : IRepository<TInterface> where TClass : class
  {
    private readonly ILog log = LogManager.GetLogger(typeof (TClass));
    private readonly IDatabase _database;

    protected BaseRepository(IDatabase database)
    {
      Checks.Argument.IsNotNull((object) database, nameof (database));
      this._database = database;
    }

    protected BaseRepository(IDatabaseFactory factory)
      : this(factory.Get())
    {
    }

    protected internal IDatabase Database => this._database;

    public virtual void Remove(TInterface entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      LoggedActionFactory.BeforeEntityRemove<TClass>(this.log, (object) entity as TClass);
      this.Database.Delete<TClass>((object) entity as TClass);
      LoggedActionFactory.AfterEntityRemove<TClass>(this.log, (object) entity as TClass);
    }

    public virtual void Add(TInterface entity)
    {
      Checks.Argument.IsNotNull((object) entity, nameof (entity));
      LoggedActionFactory.BeforeEntityAdd<TClass>(this.log, (object) entity as TClass);
      this.Database.Insert<TClass>((object) entity as TClass);
      LoggedActionFactory.AfterEntityAdd<TClass>(this.log, (object) entity as TClass);
    }
  }
}
