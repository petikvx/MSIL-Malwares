// Decompiled with JetBrains decompiler
// Type: MentQ.MentQGroupBox
// Assembly: جdk6氏صڤSnb, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC493AC2-8E19-4B7E-8F8B-A7CB6CD6346F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Fareit.gen-125c88c0a34185a8a6c38ba5e7d461ccc5b9d8a1acc87871a618c3e15c32be42.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Windows.Forms.Layout;

namespace MentQ
{
  [Category("MentQ")]
  public class MentQGroupBox : ContainerControl
  {
    private readonly Image downArrow = GlobalHelpers.TuneTransparency(GlobalHelpers.Base64ToImage(GlobalHelpers.DownArrowBase64String), 80, true);
    private readonly List<Control> invisibleControls = new List<Control>();
    private readonly Image upArrow = GlobalHelpers.TuneTransparency(GlobalHelpers.Base64ToImage(GlobalHelpers.DownArrowBase64String), 80, true);
    private bool _closed;
    private int lastHeight;

    public MentQGroupBox()
    {
      this.BackColor = Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, (int) byte.MaxValue);
      this.ForeColor = Color.FromArgb(20, 20, 20);
      this.BorderColor = Color.FromArgb(180, 180, 180);
      this.Font = new Font("Segoe UI", 8.25f);
      this.SetStyle(ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.CacheText | ControlStyles.OptimizedDoubleBuffer, true);
      this.Size = new Size(150, 100);
      this.Closable = false;
      this.upArrow.RotateFlip(RotateFlipType.Rotate180FlipX);
    }

    private Color _borderColor { get; set; }

    [Category("Appearance")]
    public Color BorderColor
    {
      get => this._borderColor;
      set
      {
        this._borderColor = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public override string Text
    {
      get => base.Text;
      set
      {
        base.Text = value;
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public bool Closed
    {
      get => this._closed;
      set
      {
        this._closed = value;
        this.OnCloseChanged();
        this.Invalidate();
      }
    }

    [Category("Appearance")]
    public bool Closable { get; set; }

    [Category("Appearance")]
    public Color UpperColor { get; set; }

    [Category("Appearance")]
    public Image Icon { get; set; }

    public event MentQGroupBox.CloseChangedEventHandler ClosedChanged;

    protected override void OnPaint(PaintEventArgs e)
    {
      Graphics graphics = e.Graphics;
      graphics.Clear(this.Parent.BackColor);
      using (SolidBrush solidBrush = new SolidBrush(this.BackColor))
        graphics.FillRectangle((Brush) solidBrush, 0, 0, this.Width, this.Height);
      using (SolidBrush solidBrush = new SolidBrush(this.UpperColor))
        graphics.FillRectangle((Brush) solidBrush, 0, 0, this.Width, 26);
      using (Pen pen = new Pen(this.BorderColor))
      {
        graphics.DrawRectangle(pen, 0, 0, this.Width - 1, this.Height - 1);
        graphics.DrawLine(pen, 0, 26, this.Width - 1, 26);
      }
      using (SolidBrush solidBrush = new SolidBrush(this.ForeColor))
        graphics.DrawString(this.Text, this.Font, (Brush) solidBrush, this.Icon == null ? 7f : 28f, (float) ((26.0 - (double) graphics.MeasureString(this.Text, this.Font).Height) / 2.0));
      if (this.Icon != null)
        graphics.DrawImage(this.Icon, new Rectangle(8, 5, 16, 16));
      if (!this.Closable)
        return;
      if (this.Closed)
        graphics.DrawImage(this.upArrow, this.Width - this.downArrow.Width - 8, (26 - this.downArrow.Height) / 2);
      else
        graphics.DrawImage(this.downArrow, this.Width - this.downArrow.Width - 8, (26 - this.downArrow.Height) / 2);
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      if (this.Closable && e.X > this.Width - this.downArrow.Width - 8 && e.X < this.Width - 8 && e.Y > (26 - this.downArrow.Height) / 2 && e.Y < (26 - this.downArrow.Height) / 2 + this.downArrow.Height)
        this.Closed = !this.Closed;
      base.OnMouseDown(e);
    }

    public void OnCloseChanged()
    {
      if (this.Closed)
      {
        this.lastHeight = this.Size.Height;
        foreach (Control control in (ArrangedElementCollection) this.Controls)
        {
          if (control.Location.Y > 27)
          {
            if (control.Visible)
              control.Visible = false;
            else
              this.invisibleControls.Add(control);
          }
        }
        this.Size = new Size(this.Width, 27);
      }
      else
      {
        foreach (Control control in (ArrangedElementCollection) this.Controls)
        {
          if (!this.invisibleControls.Contains(control))
            control.Visible = true;
        }
        this.Size = new Size(this.Width, this.lastHeight);
        this.invisibleControls.Clear();
      }
      if (this.ClosedChanged == null)
        return;
      this.ClosedChanged((object) this, new EventArgs());
    }

    public delegate void CloseChangedEventHandler(object sender, EventArgs e);
  }
}
