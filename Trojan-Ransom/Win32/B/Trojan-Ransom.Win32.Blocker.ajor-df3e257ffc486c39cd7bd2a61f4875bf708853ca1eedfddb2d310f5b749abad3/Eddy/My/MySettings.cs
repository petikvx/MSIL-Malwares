// Decompiled with JetBrains decompiler
// Type: Eddy.My.MySettings
// Assembly: Eddy, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BA1BD374-C676-4844-903D-376C0C3142C1
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.ajor-df3e257ffc486c39cd7bd2a61f4875bf708853ca1eedfddb2d310f5b749abad3.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Eddy.My
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [CompilerGenerated]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      if (!MyProject.Application.SaveMySettingsOnExit)
        return;
      MySettingsProperty.Settings.Save();
    }

    public static MySettings Default
    {
      get
      {
        while (!MySettings.addedHandler)
        {
          object handlerLockObject = MySettings.addedHandlerLockObject;
          object Expression = handlerLockObject;
          if (true)
            goto label_11;
label_2:
          if (true)
          {
            Monitor.Enter(handlerLockObject);
            try
            {
              do
              {
                if (MySettings.addedHandler)
                  goto label_6;
label_4:
                if (true)
                {
                  MyProject.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
                  {
                    if (!MyProject.Application.SaveMySettingsOnExit)
                      return;
                    MySettingsProperty.Settings.Save();
                  });
                  if (true)
                    MySettings.addedHandler = true;
                  else
                    continue;
                }
                else
                  continue;
label_6:
                if (false)
                  goto label_4;
              }
              while (false);
              break;
            }
            finally
            {
              Monitor.Exit(handlerLockObject);
            }
          }
          else
            continue;
label_11:
          ObjectFlowControl.CheckForSyncLockOnValueType(Expression);
          goto label_2;
        }
        return MySettings.defaultInstance;
      }
    }
  }
}
