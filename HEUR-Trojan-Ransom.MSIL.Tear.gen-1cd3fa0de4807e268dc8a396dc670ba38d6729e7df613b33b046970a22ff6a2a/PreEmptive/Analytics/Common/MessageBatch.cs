// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.MessageBatch
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Tags;
using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;

namespace PreEmptive.Analytics.Common
{
  public class MessageBatch
  {
    public string ID = Guid.NewGuid().ToString();

    public DateTime DateCreated
    {
      get
      {
        int num1 = 20160;
        int num2 = num1;
        num1 = 20160;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.a;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 3912;
        int num2 = num1;
        num1 = 3912;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.a = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public int FailureCount
    {
      get
      {
        int num1 = -6958;
        int num2 = num1;
        num1 = -6958;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 25;
        int num2 = num1;
        num1 = 25;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public AgentInfo AgentInfo
    {
      get
      {
        int num1 = -2952;
        int num2 = num1;
        num1 = -2952;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = 7477;
        int num2 = num1;
        num1 = 7477;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Configuration Configuration
    {
      get
      {
        int num1 = 9933;
        int num2 = num1;
        num1 = 9933;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 10509;
        int num2 = num1;
        num1 = 10509;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public IList<Message> Messages
    {
      get
      {
        int num1 = -4359;
        int num2 = num1;
        num1 = -4359;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -31032;
        int num2 = num1;
        num1 = -31032;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.e = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public MessageBatch(AgentInfo agentInfo, Configuration configuration, IList<Message> messages)
    {
      this.AgentInfo = agentInfo;
      this.Configuration = configuration;
      this.Messages = messages;
      this.DateCreated = DateTime.UtcNow;
      this.FailureCount = 0;
    }

    public MessageBatch()
    {
      this.AgentInfo = new AgentInfo();
      this.Configuration = new Configuration();
      this.Messages = (IList<Message>) new List<Message>();
    }

    public MessageBatch(IList<Message> messages)
      : this()
    {
      this.Messages = messages;
    }

    public override string ToString()
    {
      int num1 = 9126;
      int num2 = num1;
      num1 = 9126;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          return this.ToString((IAttributeLimiter) null);
        default:
          goto case 1;
      }
    }

    public string ToString(IAttributeLimiter limiter)
    {
      int A_1 = 17;
      int num1 = -22851;
      int num2 = num1;
      num1 = -22851;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (false)
            ;
          if (true)
            ;
          StringBuilder stringBuilder = new StringBuilder();
          stringBuilder.AppendLine(string.Format(Utils.a("龍\uAAC6곈룊뻌껎뛐뛒럔뛖귘룚뗜\uFFDE裠蟢\uD8E4엦鋨\uDBEA郬췮퇰闲铴黶闸裺샼\uDDFE稀㈂砄┆⤈栊缌樎瀐朒瀔猖␘㤚昜ⴞ尠ĢԤᤦ", A_1), new object[3]
          {
            (object) this.ID,
            (object) this.FailureCount,
            (object) this.DateCreated.ToString(Utils.a("별뻆냈닊背苎뗐럒鷔\u9FD6듘뛚껜곞蟠藢菤臦迨跪诬", A_1))
          }));
          stringBuilder.AppendLine(new MessagesTag(this.Configuration, this.AgentInfo, (IEnumerable<Message>) this.Messages).ToString(limiter));
          stringBuilder.AppendLine(Utils.a("龍\uE8C6\uA4C8껊뻌볎냐듒냔뗖룘꿚뻜럞\uDFE0", A_1));
          return stringBuilder.ToString();
        default:
          goto case 1;
      }
    }

    public static MessageBatch FromString(string str)
    {
      int A_1_1 = 11;
      int num1 = 0;
      switch (num1)
      {
        default:
          MessageBatch messageBatch = new MessageBatch();
          try
          {
            Tag tag1;
            int num2;
            switch (0)
            {
              case 0:
label_5:
                tag1 = Tag.FromString(str);
                messageBatch.ID = tag1.Attributes[Utils.a("횾ꗀ", A_1_1)].Value;
                num2 = 4;
                num1 = num2;
                goto default;
              default:
                AgentInfo agentInfo;
                Tag tag2;
                Configuration configuration;
                List<Message> messageList;
                IEnumerator<Tag> enumerator;
                while (true)
                {
                  switch (num1)
                  {
                    case 0:
                      goto label_2;
                    case 1:
                      IEnumerable<Tag> tags = tag2.InnerTags.Where<Tag>((Func<Tag, bool>) (A_0 =>
                      {
                        int A_1_2 = 5;
                        while (!(A_0.TagName != Utils.a("\uDAB8풺킼쾾ꃀ귂별", A_1_2)))
                        {
                          int num3 = 2082;
                          int num4 = num3;
                          num3 = 2082;
                          int num5 = num3;
                          switch (num4 == num5 ? 1 : 0)
                          {
                            case 0:
                            case 2:
                              continue;
                            default:
                              int num6 = 1;
                              if (num6 == 0)
                                ;
                              num6 = 0;
                              if (num6 == 0)
                                ;
                              return false;
                          }
                        }
                        return A_0.TagName != Utils.a("\uD8B8쮺춼펾ꣀꃂ꓄돆ꃈ\uA4CAꏌ", A_1_2);
                      }));
                      messageList = new List<Message>();
                      enumerator = tags.GetEnumerator();
                      num2 = 1;
                      if (num2 == 0)
                        ;
                      num2 = 6;
                      num1 = num2;
                      continue;
                    case 2:
                      tag2 = tag1.InnerTags.First<Tag>((Func<Tag, bool>) (A_0 =>
                      {
                        int A_1_3 = 14;
                        int num7 = 16002;
                        int num8 = num7;
                        num7 = 16002;
                        int num9 = num7;
                        switch (num8 == num9)
                        {
                          case true:
                            if (false)
                              ;
                            if (true)
                              ;
                            return A_0.TagName == Utils.a("꿁ꇃ뗅믇ꯉꯋꯍꏏ", A_1_3);
                          default:
                            goto case 1;
                        }
                      }));
                      agentInfo.Name = tag2.Attributes[Utils.a("\uDEBEꛀꛂꯄ돆\uE4C8ꗊ곌ꋎ듐", A_1_1)].Value;
                      agentInfo.Version = tag2.Attributes[Utils.a("\uDEBEꛀꛂꯄ돆\uE4C8뷊\uA8CC뷎ꋐ뫒뫔맖", A_1_1)].Value;
                      messageBatch.AgentInfo = agentInfo;
                      configuration = new Configuration();
                      num2 = 5;
                      num1 = num2;
                      continue;
                    case 3:
                      Tag tag3 = tag2.InnerTags.First<Tag>((Func<Tag, bool>) (A_0 =>
                      {
                        int A_1_4 = 13;
                        int num10 = -13751;
                        int num11 = num10;
                        num10 = -13751;
                        int num12 = num10;
                        switch (num11 == num12)
                        {
                          case true:
                            if (true)
                              ;
                            if (false)
                              ;
                            return A_0.TagName == Utils.a("ꃀ돂뗄ꯆꃈ\uA8CA곌믎룐볒믔", A_1_4);
                          default:
                            goto case 1;
                        }
                      }));
                      configuration.ApplicationID = new Guid(tag3.Attributes[Utils.a("횾ꗀ", A_1_1)].Value);
                      configuration.ApplicationName = tag3.Attributes[Utils.a("톾ꃀ껂ꃄ", A_1_1)].Value;
                      configuration.ApplicationVersion = tag3.Attributes[Utils.a("즾꓀뇂뛄껆ꛈꗊ", A_1_1)].Value;
                      configuration.ApplicationType = tag3.Attributes[Utils.a("쮾룀돂ꃄ", A_1_1)].Value;
                      configuration.InstanceID = tag3.Attributes[Utils.a("횾꿀냂뇄ꛆ\uA7C8\uA8CA\uA8CC", A_1_1)].Value;
                      configuration.MessageGroup = new Guid(tag2.Attributes[Utils.a("튾꓀냂뛄ꛆ껈껊\uE0CC꣎ꏐ볒ꃔ\uA7D6", A_1_1)].Value);
                      messageBatch.Configuration = configuration;
                      num2 = 1;
                      num1 = num2;
                      continue;
                    case 4:
                      try
                      {
                        messageBatch.FailureCount = int.Parse(tag1.Attributes[Utils.a("\uD9BEꃀꫂ꧄듆", A_1_1)].Value);
                        messageBatch.DateCreated = DateTime.ParseExact(tag1.Attributes[Utils.a("\uDCBE돀ꛂ꓄돆곈꿊", A_1_1)].Value, Utils.a("욾룀뫂별諆蓈꿊꧌蟎駐뻒룔ꓖ\uAAD8뷚믜맞蟠藢菤臦", A_1_1), (IFormatProvider) CultureInfo.InvariantCulture);
                      }
                      catch
                      {
                        messageBatch.FailureCount = 0;
                        messageBatch.DateCreated = DateTime.Now.ToUniversalTime();
                      }
                      agentInfo = new AgentInfo();
                      num1 = 2;
                      continue;
                    case 5:
                      Tag tag4 = tag2.InnerTags.First<Tag>((Func<Tag, bool>) (A_0 =>
                      {
                        int A_1_5 = 12;
                        int num13 = 1523;
                        int num14 = num13;
                        num13 = 1523;
                        int num15 = num13;
                        switch (num14 == num15)
                        {
                          case true:
                            if (false)
                              ;
                            if (true)
                              ;
                            return A_0.TagName == Utils.a("ꎿ귁꧃뛅꧇\uA4C9뗋", A_1_5);
                          default:
                            goto case 1;
                        }
                      }));
                      configuration.CompanyName = tag4.Attributes[Utils.a("톾ꃀ껂ꃄ", A_1_1)].Value;
                      configuration.CompanyID = new Guid(tag4.Attributes[Utils.a("횾ꗀ", A_1_1)].Value);
                      num2 = 3;
                      num1 = num2;
                      continue;
                    case 6:
                      try
                      {
                        num2 = 2;
                        int num16 = num2;
                        while (true)
                        {
                          switch (num16)
                          {
                            case 0:
                              if (enumerator.MoveNext())
                              {
                                Tag current = enumerator.Current;
                                messageList.Add(Message.FromTag(current));
                                num2 = 3;
                                num16 = num2;
                                continue;
                              }
                              num2 = 4;
                              num16 = num2;
                              continue;
                            case 1:
                              goto label_31;
                            case 2:
                              switch (0)
                              {
                                case 0:
                                  break;
                                default:
                                  continue;
                              }
                              break;
                            case 4:
                              num2 = 1;
                              num16 = num2;
                              continue;
                          }
                          num2 = 0;
                          num16 = num2;
                        }
                      }
                      finally
                      {
                        int num17 = 1;
                        int num18;
                        while (true)
                        {
                          switch (num17)
                          {
                            case 0:
                              enumerator.Dispose();
                              num18 = 2;
                              num17 = num18;
                              continue;
                            case 1:
                              switch (0)
                              {
                                case 0:
                                  goto label_25;
                                default:
                                  continue;
                              }
                            case 2:
                              num18 = -11190;
                              int num19 = num18;
                              num18 = -11190;
                              int num20 = num18;
                              switch (num19 == num20 ? 1 : 0)
                              {
                                case 0:
                                case 2:
                                  break;
                                default:
                                  goto label_29;
                              }
                              break;
                            default:
label_25:
                              if (enumerator == null)
                                goto case 2;
                              else
                                break;
                          }
                          num18 = 0;
                          num17 = num18;
                        }
label_29:
                        num18 = 0;
                        if (num18 == 0)
                          ;
                      }
label_31:
                      messageBatch.Messages = (IList<Message>) messageList;
                      num2 = 0;
                      num1 = num2;
                      continue;
                    default:
                      goto label_5;
                  }
                }
            }
          }
          catch (Exception ex)
          {
            return (MessageBatch) null;
          }
label_2:
          return messageBatch;
      }
    }
  }
}
