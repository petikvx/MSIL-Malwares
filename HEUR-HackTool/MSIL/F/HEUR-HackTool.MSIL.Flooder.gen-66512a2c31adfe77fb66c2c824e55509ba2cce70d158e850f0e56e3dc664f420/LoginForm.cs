// Decompiled with JetBrains decompiler
// Type: Dark_RAT.LoginForm
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [DesignerGenerated]
  public class LoginForm : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("StatusStrip1")]
    private StatusStrip _StatusStrip1;
    [AccessedThroughProperty("ToolStripStatusLabel1")]
    private ToolStripStatusLabel _ToolStripStatusLabel1;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("TextBox2")]
    private TextBox _TextBox2;
    [AccessedThroughProperty("Label2")]
    private Label _Label2;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    [AccessedThroughProperty("PictureBox1")]
    private PictureBox _PictureBox1;
    [AccessedThroughProperty("CheckBox1")]
    private CheckBox _CheckBox1;
    public bool loggedin;
    private object version;
    private iniAPI INI;
    private Point Point;
    private int X;
    private int Y;

    [DebuggerNonUserCode]
    static LoginForm()
    {
    }

    public LoginForm()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.MouseDown += new MouseEventHandler(this.Me_MouseDown);
      this.MouseMove += new MouseEventHandler(this.Me_MouseMove);
      LoginForm.__ENCAddToList((object) this);
      this.loggedin = false;
      this.version = (object) "3.1";
      this.INI = new iniAPI();
      this.Point = new Point();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    private static void __ENCAddToList(object value)
    {
      lock (LoginForm.__ENCList)
      {
        if (LoginForm.__ENCList.Count == LoginForm.__ENCList.Capacity)
        {
          int index1 = 0;
          int num = checked (LoginForm.__ENCList.Count - 1);
          int index2 = 0;
          while (index2 <= num)
          {
            if (LoginForm.__ENCList[index2].IsAlive)
            {
              if (index2 != index1)
                LoginForm.__ENCList[index1] = LoginForm.__ENCList[index2];
              checked { ++index1; }
            }
            checked { ++index2; }
          }
          LoginForm.__ENCList.RemoveRange(index1, checked (LoginForm.__ENCList.Count - index1));
          LoginForm.__ENCList.Capacity = LoginForm.__ENCList.Count;
        }
        LoginForm.__ENCList.Add(new WeakReference(RuntimeHelpers.GetObjectValue(value)));
      }
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (LoginForm));
      this.StatusStrip1 = new StatusStrip();
      this.ToolStripStatusLabel1 = new ToolStripStatusLabel();
      this.Label1 = new Label();
      this.TextBox1 = new TextBox();
      this.TextBox2 = new TextBox();
      this.Label2 = new Label();
      this.Button1 = new Button();
      this.Button2 = new Button();
      this.PictureBox1 = new PictureBox();
      this.CheckBox1 = new CheckBox();
      this.StatusStrip1.SuspendLayout();
      ((ISupportInitialize) this.PictureBox1).BeginInit();
      this.SuspendLayout();
      this.StatusStrip1.BackColor = Color.Transparent;
      this.StatusStrip1.Items.AddRange(new ToolStripItem[1]
      {
        (ToolStripItem) this.ToolStripStatusLabel1
      });
      StatusStrip statusStrip1_1 = this.StatusStrip1;
      Point point1 = new Point(0, 155);
      Point point2 = point1;
      statusStrip1_1.Location = point2;
      this.StatusStrip1.Name = "StatusStrip1";
      StatusStrip statusStrip1_2 = this.StatusStrip1;
      Size size1 = new Size(320, 22);
      Size size2 = size1;
      statusStrip1_2.Size = size2;
      this.StatusStrip1.TabIndex = 0;
      this.StatusStrip1.Text = "StatusStrip1";
      this.ToolStripStatusLabel1.ForeColor = Color.White;
      this.ToolStripStatusLabel1.Name = "ToolStripStatusLabel1";
      ToolStripStatusLabel stripStatusLabel1 = this.ToolStripStatusLabel1;
      size1 = new Size(42, 17);
      Size size3 = size1;
      stripStatusLabel1.Size = size3;
      this.ToolStripStatusLabel1.Text = "Status:";
      this.Label1.AutoSize = true;
      this.Label1.BackColor = Color.Transparent;
      this.Label1.ForeColor = Color.White;
      Label label1_1 = this.Label1;
      point1 = new Point(12, 42);
      Point point3 = point1;
      label1_1.Location = point3;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(58, 13);
      Size size4 = size1;
      label1_2.Size = size4;
      this.Label1.TabIndex = 1;
      this.Label1.Text = "Username:";
      TextBox textBox1_1 = this.TextBox1;
      point1 = new Point(12, 58);
      Point point4 = point1;
      textBox1_1.Location = point4;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      size1 = new Size(296, 20);
      Size size5 = size1;
      textBox1_2.Size = size5;
      this.TextBox1.TabIndex = 2;
      TextBox textBox2_1 = this.TextBox2;
      point1 = new Point(12, 97);
      Point point5 = point1;
      textBox2_1.Location = point5;
      this.TextBox2.Name = "TextBox2";
      TextBox textBox2_2 = this.TextBox2;
      size1 = new Size(296, 20);
      Size size6 = size1;
      textBox2_2.Size = size6;
      this.TextBox2.TabIndex = 4;
      this.TextBox2.UseSystemPasswordChar = true;
      this.Label2.AutoSize = true;
      this.Label2.BackColor = Color.Transparent;
      this.Label2.ForeColor = Color.White;
      Label label2_1 = this.Label2;
      point1 = new Point(12, 81);
      Point point6 = point1;
      label2_1.Location = point6;
      this.Label2.Name = "Label2";
      Label label2_2 = this.Label2;
      size1 = new Size(56, 13);
      Size size7 = size1;
      label2_2.Size = size7;
      this.Label2.TabIndex = 3;
      this.Label2.Text = "Password:";
      this.Button1.ForeColor = Color.Black;
      Button button1_1 = this.Button1;
      point1 = new Point(15, 122);
      Point point7 = point1;
      button1_1.Location = point7;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(143, 23);
      Size size8 = size1;
      button1_2.Size = size8;
      this.Button1.TabIndex = 5;
      this.Button1.Text = "Login";
      this.Button1.UseVisualStyleBackColor = true;
      this.Button2.ForeColor = Color.Black;
      Button button2_1 = this.Button2;
      point1 = new Point(165, 122);
      Point point8 = point1;
      button2_1.Location = point8;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(143, 23);
      Size size9 = size1;
      button2_2.Size = size9;
      this.Button2.TabIndex = 6;
      this.Button2.Text = "Register/Extend License";
      this.Button2.UseVisualStyleBackColor = true;
      this.PictureBox1.BackColor = Color.Transparent;
      this.PictureBox1.Image = (Image) componentResourceManager.GetObject("PictureBox1.Image");
      PictureBox pictureBox1_1 = this.PictureBox1;
      point1 = new Point(300, 4);
      Point point9 = point1;
      pictureBox1_1.Location = point9;
      this.PictureBox1.Name = "PictureBox1";
      PictureBox pictureBox1_2 = this.PictureBox1;
      size1 = new Size(22, 22);
      Size size10 = size1;
      pictureBox1_2.Size = size10;
      this.PictureBox1.TabIndex = 7;
      this.PictureBox1.TabStop = false;
      this.CheckBox1.AutoSize = true;
      this.CheckBox1.BackColor = Color.Transparent;
      this.CheckBox1.ForeColor = Color.White;
      CheckBox checkBox1_1 = this.CheckBox1;
      point1 = new Point(70, 79);
      Point point10 = point1;
      checkBox1_1.Location = point10;
      this.CheckBox1.Name = "CheckBox1";
      CheckBox checkBox1_2 = this.CheckBox1;
      size1 = new Size(77, 17);
      Size size11 = size1;
      checkBox1_2.Size = size11;
      this.CheckBox1.TabIndex = 8;
      this.CheckBox1.Text = "Auto-Login";
      this.CheckBox1.UseVisualStyleBackColor = false;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.Black;
      this.BackgroundImage = (Image) componentResourceManager.GetObject("$this.BackgroundImage");
      size1 = new Size(320, 177);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.CheckBox1);
      this.Controls.Add((Control) this.PictureBox1);
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.TextBox2);
      this.Controls.Add((Control) this.Label2);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.Label1);
      this.Controls.Add((Control) this.StatusStrip1);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.Name = nameof (LoginForm);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = "DarkRAT Private HWID Login";
      this.StatusStrip1.ResumeLayout(false);
      this.StatusStrip1.PerformLayout();
      ((ISupportInitialize) this.PictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual StatusStrip StatusStrip1
    {
      [DebuggerNonUserCode] get => this._StatusStrip1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        ToolStripItemClickedEventHandler clickedEventHandler = new ToolStripItemClickedEventHandler(this.StatusStrip1_ItemClicked);
        if (this._StatusStrip1 != null)
          this._StatusStrip1.ItemClicked -= clickedEventHandler;
        this._StatusStrip1 = value;
        if (this._StatusStrip1 == null)
          return;
        this._StatusStrip1.ItemClicked += clickedEventHandler;
      }
    }

    internal virtual ToolStripStatusLabel ToolStripStatusLabel1
    {
      [DebuggerNonUserCode] get => this._ToolStripStatusLabel1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._ToolStripStatusLabel1 = value;
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual TextBox TextBox1
    {
      [DebuggerNonUserCode] get => this._TextBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox1 = value;
    }

    internal virtual TextBox TextBox2
    {
      [DebuggerNonUserCode] get => this._TextBox2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._TextBox2 = value;
    }

    internal virtual Label Label2
    {
      [DebuggerNonUserCode] get => this._Label2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label2 = value;
    }

    internal virtual Button Button1
    {
      [DebuggerNonUserCode] get => this._Button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      [DebuggerNonUserCode] get => this._Button2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    internal virtual PictureBox PictureBox1
    {
      [DebuggerNonUserCode] get => this._PictureBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.PictureBox1_Click);
        if (this._PictureBox1 != null)
          this._PictureBox1.Click -= eventHandler;
        this._PictureBox1 = value;
        if (this._PictureBox1 == null)
          return;
        this._PictureBox1.Click += eventHandler;
      }
    }

    internal virtual CheckBox CheckBox1
    {
      [DebuggerNonUserCode] get => this._CheckBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.CheckBox1_CheckedChanged);
        if (this._CheckBox1 != null)
          this._CheckBox1.CheckedChanged -= eventHandler;
        this._CheckBox1 = value;
        if (this._CheckBox1 == null)
          return;
        this._CheckBox1.CheckedChanged += eventHandler;
      }
    }

    [DllImport("kernel32.dll")]
    public static extern bool IsDebuggerPresent();

    private void Button2_Click(object sender, EventArgs e)
    {
      MyProject.Forms.SerialCheck.Show();
      this.Close();
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void Form1_Load(object sender, EventArgs e)
    {
      string str = (string) null;
      try
      {
        StreamReader streamReader = new StreamReader(Application.StartupPath + "/Version.txt");
        str = streamReader.ReadLine();
        streamReader.Close();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      this.Enabled = false;
      if (LoginForm.IsDebuggerPresent())
      {
        int num = (int) MessageBox.Show("A debugger was found", "Error");
        Process.Start("www.Darkrat.info/reported.php");
        ProjectData.EndApp();
      }
      antis.AllAntis();
      Host_file_check.CheckBlacklist("http://darkrat.info/blacklist.php");
      Host_file_check.CheckHost("DarkRAT", "46.4.23.136");
      object objectValue = RuntimeHelpers.GetObjectValue(Host_file_check.CheckUpdate("http://darkrat.info/update.php?q=" + str));
      this.TextBox1.Text = Conversions.ToString(this.INI.GetUsername());
      this.TextBox2.Text = Conversions.ToString(this.INI.GetPassword());
      if (!Operators.ConditionalCompareObjectEqual(this.INI.ReadSettings("Login", "Auto Login"), (object) "1", false) || !Operators.ConditionalCompareObjectEqual(objectValue, (object) "No", false) || MyProject.Forms.program.Visible || !Conversions.ToBoolean(Operators.NotObject(Operators.CompareObjectEqual(this.INI.GetUsername(), (object) "", false))))
        return;
      this.Button1.PerformClick();
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      antis.AllAntis();
      Host_file_check.CheckHost("DarkRAT", "46.4.23.136");
      Host_file_check.CheckBlacklist("http://darkrat.info/blacklist.php");
      this.Button1.Enabled = false;
      this.Button2.Enabled = false;
      this.TextBox1.ReadOnly = true;
      this.TextBox2.ReadOnly = true;
      LoginSystem.Login(this.TextBox1.Text, this.TextBox2.Text, "http://darkrat.info/validate.php");
      try
      {
        this.Button1.Enabled = true;
        this.Button2.Enabled = true;
        this.TextBox1.ReadOnly = false;
        this.TextBox2.ReadOnly = false;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void Me_MouseDown(object sender, MouseEventArgs e)
    {
      this.X = checked (Control.MousePosition.X - this.Location.X);
      this.Y = checked (Control.MousePosition.Y - this.Location.Y);
    }

    private void Me_MouseMove(object sender, MouseEventArgs e)
    {
      if (e.Button != MouseButtons.Left)
        return;
      this.Point = Control.MousePosition;
      checked { this.Point.X -= this.X; }
      checked { this.Point.Y -= this.Y; }
      this.Location = this.Point;
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    private void PictureBox1_Click(object sender, EventArgs e) => ProjectData.EndApp();

    private void CheckBox1_CheckedChanged(object sender, EventArgs e)
    {
      if (this.CheckBox1.Checked)
        this.INI.WriteSettings("Login", "Auto Login", "1");
      else
        this.INI.WriteSettings("Login", "Auto Login", "0");
    }

    private void StatusStrip1_ItemClicked(object sender, ToolStripItemClickedEventArgs e)
    {
    }
  }
}
