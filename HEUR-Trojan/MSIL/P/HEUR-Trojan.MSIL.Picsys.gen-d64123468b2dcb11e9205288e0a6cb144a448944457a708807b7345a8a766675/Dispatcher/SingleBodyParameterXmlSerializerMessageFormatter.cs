// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.SingleBodyParameterXmlSerializerMessageFormatter
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel.Description;

namespace System.ServiceModel.Dispatcher
{
  internal class SingleBodyParameterXmlSerializerMessageFormatter : 
    SingleBodyParameterMessageFormatter
  {
    private XmlObjectSerializer cachedOutputSerializer;
    private Type cachedOutputSerializerType;
    private List<Type> knownTypes;
    private Type parameterType;
    private UnwrappedTypesXmlSerializerManager serializerManager;
    private XmlObjectSerializer[] serializers;
    private object thisLock;
    private UnwrappedTypesXmlSerializerManager.TypeSerializerPair[] typeSerializerPairs;

    public SingleBodyParameterXmlSerializerMessageFormatter(
      OperationDescription operation,
      Type parameterType,
      bool isRequestFormatter,
      XmlSerializerOperationBehavior xsob,
      UnwrappedTypesXmlSerializerManager serializerManager)
      : base(operation, isRequestFormatter, "XmlSerializer")
    {
      if (operation == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (operation));
      if (parameterType == (Type) null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (parameterType));
      if (xsob == null)
        throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (xsob));
      this.serializerManager = serializerManager != null ? serializerManager : throw System.ServiceModel.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (serializerManager));
      this.parameterType = parameterType;
      List<Type> types = new List<Type>();
      types.Add(parameterType);
      this.knownTypes = new List<Type>();
      if (operation.KnownTypes != null)
      {
        foreach (Type knownType in operation.KnownTypes)
        {
          this.knownTypes.Add(knownType);
          types.Add(knownType);
        }
      }
      Type type = SingleBodyParameterDataContractMessageFormatter.UnwrapNullableType(this.parameterType);
      if (type != this.parameterType)
      {
        this.knownTypes.Add(type);
        types.Add(type);
      }
      this.serializerManager.RegisterType((object) this, (IList<Type>) types);
      this.thisLock = new object();
    }

    protected override XmlObjectSerializer[] GetInputSerializers()
    {
      lock (this.thisLock)
      {
        this.EnsureSerializers();
        return this.serializers;
      }
    }

    protected override XmlObjectSerializer GetOutputSerializer(Type type)
    {
      lock (this.thisLock)
      {
        if (this.cachedOutputSerializerType != type)
        {
          Type typeForSerializer = this.GetTypeForSerializer(type, this.parameterType, (IList<Type>) this.knownTypes);
          this.EnsureSerializers();
          bool flag = false;
          if (this.typeSerializerPairs != null)
          {
            for (int index = 0; index < this.typeSerializerPairs.Length; ++index)
            {
              if (typeForSerializer == this.typeSerializerPairs[index].Type)
              {
                this.cachedOutputSerializer = this.typeSerializerPairs[index].Serializer;
                this.cachedOutputSerializerType = type;
                flag = true;
                break;
              }
            }
          }
          if (!flag)
            return (XmlObjectSerializer) null;
        }
        return this.cachedOutputSerializer;
      }
    }

    private void EnsureSerializers()
    {
      if (this.typeSerializerPairs != null)
        return;
      this.typeSerializerPairs = this.serializerManager.GetOperationSerializers((object) this);
      this.serializers = new XmlObjectSerializer[this.typeSerializerPairs.Length];
      for (int index = 0; index < this.typeSerializerPairs.Length; ++index)
        this.serializers[index] = this.typeSerializerPairs[index].Serializer;
    }
  }
}
