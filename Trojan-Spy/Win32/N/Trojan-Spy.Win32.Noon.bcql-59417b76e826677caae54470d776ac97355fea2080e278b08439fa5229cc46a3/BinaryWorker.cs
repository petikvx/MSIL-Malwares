// Decompiled with JetBrains decompiler
// Type: mmxAH.BinaryWorker
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.IO;
using System.Windows.Forms;

namespace mmxAH
{
  public class BinaryWorker
  {
    private string filePath;
    private GameEngine en;
    private const string TitleString = "===Mmx Game Emulator Data File Game: Archem Horror===";
    private const string SaveTitleString = "===Mmx Game Emulator Game: Archem Horror  Save File===";
    private int ver = 1;

    public BinaryWorker(GameEngine eng, string fp)
    {
      this.filePath = Application.StartupPath + Path.DirectorySeparatorChar.ToString() + fp;
      this.en = eng;
    }

    public void ToBin()
    {
      this.en.io.Print("Output file name : " + this.filePath + Environment.NewLine);
      try
      {
        BinaryWriter wr = new BinaryWriter((Stream) new FileStream(this.filePath, FileMode.Create));
        wr.Write("===Mmx Game Emulator Data File Game: Archem Horror===");
        wr.Write(this.ver);
        this.en.sysstr.ToBinary(wr);
        this.en.colors.ToBinary(wr);
        this.en.ds.ToBinary(wr);
        this.en.LimitsToBinary(wr);
        this.en.ows.ToBin(wr);
        this.en.map.ToBin(wr);
        this.en.gates.ToBin(wr);
        wr.Write(this.en.archEncs.Length);
        wr.Close();
      }
      catch (Exception ex)
      {
        this.en.io.Print("Error:" + ex.Message, (byte) 16, true);
      }
      this.en.io.Print("Binary Converthion succesfully complete. " + Environment.NewLine);
    }

    public void ToSave()
    {
      BinaryWriter wr = new BinaryWriter((Stream) new FileStream(this.filePath, FileMode.Create));
      wr.Write("===Mmx Game Emulator Game: Archem Horror  Save File===");
      wr.Write(this.ver);
      this.en.clock.WriteToSave(wr);
      this.en.SaveActive(wr);
      foreach (Locathion loc in this.en.locs)
        loc.WriteToSave(wr);
      this.en.mythosDeck.ToSave(wr);
      this.en.owEnc.ToSave(wr);
      this.en.status.ToSave(wr);
      wr.Close();
    }

    public bool BinaryInit()
    {
      BinaryReader rd;
      try
      {
        rd = new BinaryReader((Stream) new FileStream(this.filePath, FileMode.Open));
      }
      catch
      {
        return false;
      }
      this.en.locs.Add((Locathion) new Litas(this.en));
      if (rd.ReadString() != "===Mmx Game Emulator Data File Game: Archem Horror===" || rd.ReadInt32() != this.ver)
        return false;
      this.en.sysstr.FromBinary(rd);
      this.en.colors.FromBinary(rd);
      this.en.ds.FromBinary(rd);
      this.en.LimitsFromBinary(rd);
      this.en.ows.FromBin(rd);
      this.en.map = new MapOfCity(this.en);
      this.en.map.FromBin(rd);
      this.InitGates(rd);
      int length = rd.ReadInt32();
      this.en.archEncs = new Deck<ArcEncCard>[length];
      for (int index = 0; index < length; ++index)
        this.en.archEncs[index] = new Deck<ArcEncCard>(true);
      rd.Close();
      return true;
    }

    public bool FromSave()
    {
      try
      {
        BinaryReader rd = new BinaryReader((Stream) new FileStream(this.filePath, FileMode.Open));
        if (rd.ReadString() != "===Mmx Game Emulator Game: Archem Horror  Save File===" || rd.ReadInt32() != this.ver)
          return false;
        this.en.Reset();
        this.en.clock.ReadFromSave(rd);
        this.en.LoadActive(rd);
        foreach (Locathion loc in this.en.locs)
          loc.ReadFromSave(rd);
        this.en.mythosDeck.FromSave(rd);
        this.en.owEnc.FromSave(rd);
        this.en.status.FromSave(rd);
        rd.Close();
      }
      catch (Exception ex)
      {
        int num = (int) MessageBox.Show(ex.Message);
        return false;
      }
      return true;
    }

    private void InitGates(BinaryReader rd)
    {
      int num = rd.ReadInt32();
      for (int index = 0; index < num; ++index)
      {
        GatePrototype c = new GatePrototype(this.en);
        c.FromBin(rd);
        this.en.gates.Add(c);
      }
      this.en.gates.Shuffle();
    }
  }
}
