// Decompiled with JetBrains decompiler
// Type: ۼ薈깐㦡ﱾ綱﫽ή⃒蔦띌⌠瀮껧଼遃瞫都
// Assembly: $77-Venom, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DC8E8704-647D-4CA7-99AB-BB7BE936B486
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Zapchast.gen-defbae45ea8e71f8a50123f382f4538afc9db836de09bab316464d4793394f19.exe

using System;
using System.IO;

public class ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都
{
  private int \u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶;
  private readonly object ఎᐽ奦㚻绦ꭡΝ헝랞ᇘ䦪쾶蟍涛쮕ﰪ뙃\uF714省陴 = new object();
  private const int \uE06B\uE628쁝휝䂜煖駶뜺豟龜អ퀹㮿\uF101\uA7F5稜\u2323\u25BC몞\u2E2D = 65535;

  public string Path { get; private set; }

  public string LastError { get; private set; }

  public int MaxBlocks
  {
    get
    {
      if (this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶 <= 0)
      {
        if (this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶 != -1)
        {
          try
          {
            FileInfo fileInfo = new FileInfo(this.Path);
            this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶 = fileInfo.Exists ? (int) Math.Ceiling((double) fileInfo.Length / (double) ushort.MaxValue) : throw new FileNotFoundException();
          }
          catch (UnauthorizedAccessException ex)
          {
            this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶 = -1;
            this.LastError = "Access denied";
          }
          catch (IOException ex)
          {
            this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶 = -1;
            if (ex is FileNotFoundException)
              this.LastError = "File not found";
            if (ex is PathTooLongException)
              this.LastError = "Path is too long";
          }
          return this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶;
        }
      }
      return this.\u173C\uEF44\u1A9F렦搡휘崍뿰떹ய\uABFF\uFFFD焋쓶\uE560\uF4AB㠂͠\u2899䊶;
    }
  }

  public ۼ薈깐㦡\uE0D2ﱾ綱\uFAFDή⃒蔦띌\u2320瀮\uE91F껧଼遃瞫都(string path) => this.Path = path;

  private int 駁蒠턇\uFFFDੜ蚂濺\uEB34\uE58A짉\uE6E1\uE34D艔\u20C3䦃ﱓጹⴗ\u166D\u1CCD(long length) => length >= (long) ushort.MaxValue ? (int) ushort.MaxValue : (int) length;

  public bool 룦퉒ꌗ蓹膡\u2F27櫈觌\uE8DAཔ\uF151뫸곹\uFFFD廌圔填ᗽ\uF33E\u2E78(
    int blockNumber,
    out byte[] readBytes)
  {
    try
    {
      if (blockNumber > this.MaxBlocks)
        throw new ArgumentOutOfRangeException();
      lock (this.ఎᐽ奦㚻绦ꭡΝ헝랞ᇘ䦪쾶蟍涛쮕ﰪ뙃\uF714省陴)
      {
        using (FileStream fileStream = File.OpenRead(this.Path))
        {
          if (blockNumber == 0)
          {
            fileStream.Seek(0L, SeekOrigin.Begin);
            long length = fileStream.Length - fileStream.Position;
            readBytes = length >= 0L ? new byte[this.駁蒠턇\uFFFDੜ蚂濺\uEB34\uE58A짉\uE6E1\uE34D艔\u20C3䦃ﱓጹⴗ\u166D\u1CCD(length)] : throw new IOException("negative length");
            fileStream.Read(readBytes, 0, readBytes.Length);
          }
          else
          {
            fileStream.Seek((long) (blockNumber * (int) ushort.MaxValue), SeekOrigin.Begin);
            long length = fileStream.Length - fileStream.Position;
            readBytes = length >= 0L ? new byte[this.駁蒠턇\uFFFDੜ蚂濺\uEB34\uE58A짉\uE6E1\uE34D艔\u20C3䦃ﱓጹⴗ\u166D\u1CCD(length)] : throw new IOException("negative length");
            fileStream.Read(readBytes, 0, readBytes.Length);
          }
        }
      }
      return true;
    }
    catch (ArgumentOutOfRangeException ex)
    {
      readBytes = new byte[0];
      this.LastError = "BlockNumber bigger than MaxBlocks";
    }
    catch (UnauthorizedAccessException ex)
    {
      readBytes = new byte[0];
      this.LastError = "Access denied";
    }
    catch (IOException ex)
    {
      readBytes = new byte[0];
      switch (ex)
      {
        case FileNotFoundException _:
          this.LastError = "File not found";
          break;
        case DirectoryNotFoundException _:
          this.LastError = "Directory not found";
          break;
        case PathTooLongException _:
          this.LastError = "Path is too long";
          break;
        default:
          this.LastError = "Unable to read from File Stream";
          break;
      }
    }
    return false;
  }

  public bool 㳨䣙쇶냷舚퍋䪨䎝婒潂\uE642꣔\u2451끯\uF437ᱯᝏ物\u0EA4켪(byte[] block, int blockNumber)
  {
    try
    {
      if (!File.Exists(this.Path) && blockNumber > 0)
        throw new FileNotFoundException();
      lock (this.ఎᐽ奦㚻绦ꭡΝ헝랞ᇘ䦪쾶蟍涛쮕ﰪ뙃\uF714省陴)
      {
        if (blockNumber == 0)
        {
          using (FileStream fileStream = File.Open(this.Path, FileMode.Create, FileAccess.Write))
          {
            fileStream.Seek(0L, SeekOrigin.Begin);
            fileStream.Write(block, 0, block.Length);
          }
          return true;
        }
        using (FileStream fileStream = File.Open(this.Path, FileMode.Append, FileAccess.Write))
        {
          fileStream.Seek((long) (blockNumber * (int) ushort.MaxValue), SeekOrigin.Begin);
          fileStream.Write(block, 0, block.Length);
        }
      }
      return true;
    }
    catch (UnauthorizedAccessException ex)
    {
      this.LastError = "Access denied";
    }
    catch (IOException ex)
    {
      switch (ex)
      {
        case FileNotFoundException _:
          this.LastError = "File not found";
          break;
        case DirectoryNotFoundException _:
          this.LastError = "Directory not found";
          break;
        case PathTooLongException _:
          this.LastError = "Path is too long";
          break;
        default:
          this.LastError = "Unable to write to File Stream";
          break;
      }
    }
    return false;
  }
}
