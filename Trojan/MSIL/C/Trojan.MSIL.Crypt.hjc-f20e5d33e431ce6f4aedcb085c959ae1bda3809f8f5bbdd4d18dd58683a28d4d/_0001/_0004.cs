// Decompiled with JetBrains decompiler
// Type: .
// Assembly: syncui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cab8849a7bf7875b
// MVID: B8136FDA-4EB0-4CA7-9502-281BC34A634B
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hjc-f20e5d33e431ce6f4aedcb085c959ae1bda3809f8f5bbdd4d18dd58683a28d4d.exe

using \u0001;
using System;
using System.Collections;
using System.Diagnostics;
using System.Text;

namespace \u0001
{
  internal class \u0004
  {
    internal const string \u0001 = "{71461f04-2faa-4bb9-a0dd-28a79101b599}";
    private const int \u0001 = 4;
    internal static Hashtable \u0001;

    internal static unsafe bool IsWebApplication
    {
      get
      {
        void* voidPtr = (void*) __untypedstackalloc(2);
        string lower;
        try
        {
          try
          {
            lower = Process.GetCurrentProcess().MainModule.ModuleName.ToLower();
            if (!(lower == "w3wp.exe"))
            {
              if (lower == "aspnet_wp.exe")
              {
                if (true)
                {
                  *(sbyte*) voidPtr = (sbyte) 1;
                  goto label_8;
                }
                else
                  goto label_8;
              }
            }
            else
            {
              *(sbyte*) voidPtr = (sbyte) 1;
              goto label_8;
            }
          }
          catch
          {
          }
          *(sbyte*) ((IntPtr) voidPtr + 1) = (sbyte) 0;
          goto label_11;
label_8:
          if (true)
            *(sbyte*) ((IntPtr) voidPtr + 1) = *(sbyte*) voidPtr;
        }
        catch (Exception ex)
        {
          string str = lower;
          __Boxed<bool> local = (ValueType) (bool) *(sbyte*) voidPtr;
          \u0012.\u0001(ex, (object) str, (object) local);
          throw;
        }
label_11:
        return (bool) *(sbyte*) ((IntPtr) voidPtr + 1);
      }
    }

    static \u0004()
    {
      try
      {
        \u0004.\u0001 = new Hashtable();
      }
      catch (Exception ex)
      {
        \u0012.\u0001(ex);
        throw;
      }
    }

    internal struct \u0001
    {
      public string \u0001;
      public Version \u0001;
      public string \u0002;
      public string \u0003;

      public string \u0001(bool includeVersion)
      {
        StringBuilder stringBuilder1;
        try
        {
          stringBuilder1 = new StringBuilder();
          stringBuilder1.Append(this.\u0001);
          if (includeVersion && this.\u0001 != (Version) null)
            goto label_2;
label_1:
          stringBuilder1.Append(", Culture=");
          stringBuilder1.Append(this.\u0002.Length == 0 ? "neutral" : this.\u0002);
          stringBuilder1.Append(", PublicKeyToken=");
          stringBuilder1.Append(this.\u0003.Length == 0 ? "null" : this.\u0003);
          return stringBuilder1.ToString();
label_2:
          stringBuilder1.Append(", Version=");
          stringBuilder1.Append((object) this.\u0001);
          goto label_1;
        }
        catch (Exception ex)
        {
          StringBuilder stringBuilder2 = stringBuilder1;
          // ISSUE: variable of a boxed type
          __Boxed<\u0004.\u0001> local1 = (ValueType) this;
          // ISSUE: variable of a boxed type
          __Boxed<bool> local2 = (ValueType) includeVersion;
          \u0012.\u0001(ex, (object) stringBuilder2, (object) local1, (object) local2);
          throw;
        }
      }

      public \u0001(string assemblyFullName)
      {
        char[] chArray1;
        string[] strArray1;
        int index;
        string str1;
        string str2;
        try
        {
          this.\u0001 = (Version) null;
          this.\u0002 = string.Empty;
          this.\u0003 = string.Empty;
          this.\u0001 = string.Empty;
          string str3 = assemblyFullName;
          chArray1 = new char[1]{ ',' };
          char[] chArray2 = chArray1;
          strArray1 = str3.Split(chArray2);
          for (index = 0; index < strArray1.Length; ++index)
          {
            str1 = strArray1[index];
            str2 = str1.Trim();
            if (str2.StartsWith("Version="))
              this.\u0001 = new Version(str2.Substring(8));
            else if (str2.StartsWith("Culture="))
            {
              this.\u0002 = str2.Substring(8);
              if (this.\u0002 == "neutral")
                this.\u0002 = string.Empty;
            }
            else if (str2.StartsWith("PublicKeyToken="))
            {
              this.\u0003 = str2.Substring(15);
              if (this.\u0003 == "null")
                this.\u0003 = string.Empty;
            }
            else
              this.\u0001 = str2;
          }
        }
        catch (Exception ex)
        {
          string str4 = str1;
          string str5 = str2;
          char[] chArray3 = chArray1;
          string[] strArray2 = strArray1;
          // ISSUE: variable of a boxed type
          __Boxed<int> local1 = (ValueType) index;
          // ISSUE: variable of a boxed type
          __Boxed<\u0004.\u0001> local2 = (ValueType) this;
          string str6 = assemblyFullName;
          \u0012.\u0001(ex, (object) str4, (object) str5, (object) chArray3, (object) strArray2, (object) local1, (object) local2, (object) str6);
          throw;
        }
      }
    }
  }
}
