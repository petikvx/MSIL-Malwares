// Decompiled with JetBrains decompiler
// Type: Alero.Querying.Join
// Assembly: AssemblyCopyrightAttrib, Version=2005.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6DE54395-8B54-4A88-80DE-363C4128FB08
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqx-d67265883ffb3f3129132bfe1dad4a828c887266a0a005e814bcda58c525625b.exe

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Alero.Querying
{
  public class Join : TableBase
  {
    private readonly TableBase _left;
    private readonly QueryTable _right;
    private readonly JoinType _joinType;
    private WherePart _wherePart;

    public Join(TableBase left, QueryTable right, JoinType joinType)
    {
      this._left = left;
      this._right = right;
      this._joinType = joinType;
    }

    public QueryTable Right => this._right;

    public TableBase Left => this._left;

    public Join On(WherePart clause)
    {
      this._wherePart = clause;
      return this;
    }

    public override string TableName => "JOIN";

    internal override void BuildSql(BuildSqlContext sqlContext)
    {
      this.Left.BuildSql(sqlContext);
      StringBuilder builder = sqlContext.Builder;
      switch (this._joinType)
      {
        case JoinType.Inner:
          builder.Append(" inner join ");
          break;
        case JoinType.Left:
          builder.Append(" left outer join ");
          break;
        default:
          throw new InvalidOperationException("Unknown join type");
      }
      this.Right.BuildSql(sqlContext);
      if (this._wherePart == null)
        return;
      builder.Append(" on ");
      this._wherePart.BuildSql(sqlContext);
    }

    protected internal override IEnumerable<FieldReference> Fields => this._left.Fields.Union<FieldReference>(this._right.Fields);
  }
}
