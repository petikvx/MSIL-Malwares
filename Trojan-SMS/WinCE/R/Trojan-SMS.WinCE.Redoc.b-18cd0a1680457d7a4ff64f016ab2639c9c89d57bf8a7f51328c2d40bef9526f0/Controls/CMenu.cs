// Decompiled with JetBrains decompiler
// Type: Dbasic.Controls.CMenu
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using Dbasic.EnhancedControls;
using System;
using System.Collections;
using System.Windows.Forms;

namespace Dbasic.Controls
{
  public class CMenu : CControls
  {
    public CMenu(CRunner CRunner)
      : base(CRunner)
    {
    }

    protected override MethodReturn Property(
      string name,
      Place place,
      bool assign,
      ref Locals locals)
    {
      CEnhancedMenu control = (CEnhancedMenu) ((WrapControl) this.CRunner.htControls[(object) name]).control;
      ++place.WordI;
      string str = this.CRunner.nextWord(true, ref place).Value;
      if (assign)
        ++place.WordI;
      switch (str)
      {
        case "text":
          if (!assign)
            return new MethodReturn(place, control.Text, 0.0);
          RunReturn runReturn1 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn1.place;
          control.Text = runReturn1.vString;
          return new MethodReturn(place);
        case "enabled":
          if (!assign)
            return new MethodReturn(place, control.Enabled.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          RunReturn runReturn2 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn2.place;
          if (runReturn2.vString == "false" || runReturn2.vString == "0")
          {
            control.Enabled = false;
            return new MethodReturn(place);
          }
          if (runReturn2.vString == "true" || runReturn2.vString == "1")
          {
            control.Enabled = true;
            return new MethodReturn(place);
          }
          this.CRunner.ThrowError("Syntax error", place.LineI);
          break;
        case "checked":
          if (!assign)
            return new MethodReturn(place, control.Checked.ToString((IFormatProvider) CRunner.cul).ToLower(CRunner.cul), 0.0);
          if (control.Parent is MainMenu || control.MenuItems.Count > 0)
            this.CRunner.ThrowError("Can't set checked property for main menu items or menus with child menus.", place.LineI);
          RunReturn runReturn3 = this.CRunner.RunCode(place, true, true, ref locals);
          place = runReturn3.place;
          if (runReturn3.vString == "false" || runReturn3.vString == "0")
          {
            control.Checked = false;
            return new MethodReturn(place);
          }
          if (runReturn3.vString == "true" || runReturn3.vString == "1")
          {
            control.Checked = true;
            return new MethodReturn(place);
          }
          this.CRunner.ThrowError("Syntax error", place.LineI);
          break;
        case nameof (name):
          return new MethodReturn(place, control.name, 0.0);
      }
      return new MethodReturn(place);
    }

    private void AddEvents(CEnhancedMenu mnu)
    {
      if (!this.CRunner.htSubs.Contains((object) (mnu.name + "_click")))
        return;
      mnu.Click += new EventHandler(this.Click);
    }

    public override void AddRunTimeEvent(object sender, string eventName)
    {
      CEnhancedMenu cenhancedMenu = (CEnhancedMenu) sender;
      switch (eventName)
      {
        case "click":
          cenhancedMenu.Click += new EventHandler(this.Click);
          break;
      }
    }

    private void Click(object sender, EventArgs e)
    {
      CEnhancedMenu cenhancedMenu = (CEnhancedMenu) sender;
      this.CRunner.StartSub((Place) this.CRunner.htSubs[(object) (cenhancedMenu.name + "_click")], new Hashtable()
      {
        {
          (object) nameof (sender),
          (object) cenhancedMenu.name
        }
      });
    }

    public void ShortAdd(string s)
    {
      CEnhancedMenu cenhancedMenu = new CEnhancedMenu();
      string parent;
      string Name;
      string Text;
      bool myEnabled;
      bool myChecked;
      CBuildDesigner.MenuGetProperties(s, out parent, out Name, out Text, out myEnabled, out myChecked);
      cenhancedMenu.name = Name.ToLower(CRunner.cul);
      cenhancedMenu.Text = Text;
      cenhancedMenu.Enabled = myEnabled;
      cenhancedMenu.Checked = myChecked;
      this.CRunner.htControls.Add((object) cenhancedMenu.name, (object) new WrapControl((object) cenhancedMenu, (CControls) this));
      object control = ((WrapControl) this.CRunner.htControls[(object) parent]).control;
      if (control is CEnhancedForm)
        ((CEnhancedForm) control).mainMenu1.MenuItems.Add((MenuItem) cenhancedMenu);
      else
        ((Menu) control).MenuItems.Add((MenuItem) cenhancedMenu);
      this.AddEvents(cenhancedMenu);
    }
  }
}
