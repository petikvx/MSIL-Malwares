// Decompiled with JetBrains decompiler
// Type: DirectX.Capture.AudioSource
// Assembly: yes, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 83EB8C5F-168C-47FA-93FE-E25AA6C64B02
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\Trojan.MSIL.KillAV.ao-c83dfee0b35be414b2ecb0a3b5fff41c790bb356c2774a2fc681a8981978b48b.exe

using DShowNET;
using System;
using System.Runtime.InteropServices;

namespace DirectX.Capture
{
  public class AudioSource : Source
  {
    internal IPin Pin;

    internal AudioSource(IPin pin)
    {
      this.Pin = pin is IAMAudioInputMixer ? pin : throw new NotSupportedException("The input pin does not support the IAMAudioInputMixer interface");
      this.name = this.getName(pin);
    }

    public override bool Enabled
    {
      get
      {
        bool pfEnable;
        ((IAMAudioInputMixer) this.Pin).get_Enable(out pfEnable);
        return pfEnable;
      }
      set => ((IAMAudioInputMixer) this.Pin).put_Enable(value);
    }

    private string getName(IPin pin)
    {
      string name = "Unknown pin";
      PinInfo pInfo = new PinInfo();
      int errorCode = pin.QueryPinInfo(out pInfo);
      if (errorCode == 0)
        name = pInfo.name ?? "";
      else
        Marshal.ThrowExceptionForHR(errorCode);
      if (pInfo.filter != null)
        Marshal.ReleaseComObject((object) pInfo.filter);
      pInfo.filter = (IBaseFilter) null;
      return name;
    }

    public override void Dispose()
    {
      if (this.Pin != null)
        Marshal.ReleaseComObject((object) this.Pin);
      this.Pin = (IPin) null;
      base.Dispose();
    }
  }
}
