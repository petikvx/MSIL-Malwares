// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.ChessCore
// Assembly: Yo, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 35C4B4A9-DF91-4C66-8221-B310119D49D7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-9fa98d845147978f040107c6d725a2b12ba15c204c54ed6d726c0780b40c68c3.exe

namespace SimpleChessApp.Game
{
  public class ChessCore
  {
    public Board ChessBoard;
    public PieceColor WhosPlaying;
    public bool DisableTurn;
    public int TurnId = 1;
    public Square lastCheckPiece;
    public Square ghostCheckPiece;
    public Square LastMove;
    public NotationManager Turns = new NotationManager();
    public bool firstClick = true;
    public Square lastSquare;

    public ChessCore(Board b)
    {
      this.ChessBoard = b;
      this.resetFlags();
    }

    public ChessCore()
    {
    }

    public void RestartGame()
    {
      this.resetFlags();
label_1:
      int num1 = 1734997718;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1054140096)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            this.ChessBoard.Restart();
            num1 = (int) num2 * -2084461918 ^ 16364966;
            continue;
          case 2:
            num1 = (int) num2 * 1051574038 ^ -391348599;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void resetFlags(bool turn = false)
    {
label_1:
      int num1 = 1208624719;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2051691609)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.TurnId = 1;
            num1 = (int) num2 * 280112403 ^ 2050505600;
            continue;
          case 3:
            this.lastCheckPiece = (Square) null;
            num1 = (int) num2 * -442034313 ^ -1333694645;
            continue;
          case 4:
            this.Turns.Clear();
            num1 = (int) num2 * -1685316943 ^ -1238061753;
            continue;
          case 5:
            this.DisableTurn = turn;
            num1 = (int) num2 * 743341350 ^ 1317959546;
            continue;
          case 6:
            this.WhosPlaying = PieceColor.White;
            num1 = (int) num2 * -1502290704 ^ 732347865;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void TestPassant()
    {
label_1:
      int num1 = -1958458652;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1459423873)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1978139197 ^ 41200504;
            continue;
          case 2:
            goto label_3;
          case 3:
            new DebugChess(this.ChessBoard).TestPassant();
            num1 = (int) num2 * 1892449625 ^ 1451778505;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestSinglePiece(Pieces x)
    {
      new DebugChess(this.ChessBoard).TestSinglePiece(x);
label_1:
      int num1 = 147456438;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2137806741)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            this.resetFlags(true);
            num1 = (int) num2 * 1228620328 ^ -164735469;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -333290659 ^ 650689975;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestCastling()
    {
      new DebugChess(this.ChessBoard).TestCastling();
      this.resetFlags(true);
label_1:
      int num1 = -1324622387;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1843765949)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1794355102 ^ 140645104;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = -573557464;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -13519599)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestCheck();
            num1 = (int) num2 * 1769843950 ^ 1124225005;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 580531978 ^ -1797556959;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1361207499;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 453669923)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestDiscoverCheck();
            num1 = (int) num2 * 1749097755 ^ -1007956357;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 1345415672 ^ -1602287839;
            continue;
          case 4:
            num1 = (int) num2 * 1808270276 ^ -1260354860;
            continue;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestPromotion()
    {
label_1:
      int num1 = -1015370340;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1157210255)) % 4U)
        {
          case 0:
            goto label_3;
          case 1:
            new DebugChess(this.ChessBoard).TestPromotion();
            num1 = (int) num2 * -1312386995 ^ -405695161;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.resetFlags(true);
            num1 = (int) num2 * 2000355670 ^ 2069231187;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    internal void CheckOnCastling()
    {
      new DebugChess(this.ChessBoard).CheckOnCastling();
label_1:
      int num1 = -730576725;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -417121167)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1095627335 ^ 2138395143;
            continue;
          case 2:
            this.resetFlags(true);
            num1 = (int) num2 * 1243446914 ^ -961180268;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }
  }
}
