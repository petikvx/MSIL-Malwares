// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.PlanetTurnPredictions
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot
{
  public class PlanetTurnPredictions : List<PlanetTurn>
  {
    public PlanetTurnPredictions(int maxTurns)
    {
label_1:
      int num1 = -938643301;
      PlanetTurn planetTurn1;
      PlanetTurn planetTurn2;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1454116396)) % 14U)
        {
          case 0:
            planetTurn1.Prior = planetTurn2;
            planetTurn2 = planetTurn1;
            num1 = -342560607;
            continue;
          case 1:
            num1 = (int) num2 * 1009092905 ^ -508049489;
            continue;
          case 2:
            planetTurn1 = new PlanetTurn(this.Count);
            int num3 = planetTurn2 == null ? 134129376 : (num3 = 1592132201);
            num1 = num3 ^ (int) num2 * 586381686;
            continue;
          case 3:
            goto label_1;
          case 4:
            flag = --maxTurns > -1;
            num1 = (int) num2 * -1103556864 ^ 865237056;
            continue;
          case 5:
            planetTurn2 = (PlanetTurn) null;
            num1 = (int) num2 * 993289887 ^ 2057791690;
            continue;
          case 6:
            int num4 = flag ? 1012799511 : (num4 = 1231527905);
            num1 = num4 ^ (int) num2 * -46696393;
            continue;
          case 7:
            planetTurn2.Next = planetTurn1;
            num1 = (int) num2 * -1561081064 ^ -516887737;
            continue;
          case 9:
            num1 = -973083994;
            continue;
          case 10:
            num1 = (int) num2 * 1777705426 ^ 1999185836;
            continue;
          case 11:
            this.Add(planetTurn1);
            num1 = (int) num2 * 898619985 ^ 11096407;
            continue;
          case 12:
            num1 = (int) num2 * 1470273298 ^ 1321290786;
            continue;
          case 13:
            this.FirstTurn = this[0];
            num1 = (int) num2 * 1120944159 ^ -933736635;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      this.LastTurn = this[this.Count - 1];
    }

    public int GrowthRate { get; private set; }

    public PlanetTurn FirstTurn { get; private set; }

    public PlanetTurn LastTurn { get; private set; }

    public PlanetTurn LastAttackTurn { get; private set; }

    public void ResetStats()
    {
    }

    public void CreateTurnPredictionsForPlanet(Planet planet)
    {
label_1:
      int num1 = 1084272498;
      PlanetTurn lastCalculatedTurn;
      int planetId;
      int num2;
      bool flag1;
      PlanetTurn current1;
      bool flag2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 419997201)) % 21U)
        {
          case 0:
            goto label_1;
          case 1:
            num2 = 1;
            num1 = (int) num3 * -866540018 ^ -79524899;
            continue;
          case 2:
            lastCalculatedTurn = this[0];
            lastCalculatedTurn.SetValues(planet.Owner, planet.NumShips);
            num1 = (int) num3 * -279286106 ^ 903293251;
            continue;
          case 3:
            planet.MaxDesertersAllowed = planet.NumShips;
            num1 = (int) num3 * -546074868 ^ 581309345;
            continue;
          case 4:
            this.GrowthRate = planet.GrowthRate;
            num1 = (int) num3 * 2122222227 ^ -1695934707;
            continue;
          case 5:
            flag1 = planetId == 15;
            num1 = (int) num3 * 139404769 ^ -17041669;
            continue;
          case 6:
            planet.IdleForThisNumberOfTurns = 0;
            num1 = (int) num3 * -2000639505 ^ -1793828118;
            continue;
          case 7:
            flag2 = planet.Armada.Count > 0;
            num1 = 569685965;
            continue;
          case 8:
            if (flag2)
            {
              num1 = (int) num3 * -2138435620 ^ 97352788;
              continue;
            }
            goto label_52;
          case 9:
            planet.ShipsRequiredToSurviveAttack = planet.NumShips;
            num1 = (int) num3 * -1195372752 ^ 294735266;
            continue;
          case 10:
            num1 = (int) num3 * -1714395841 ^ -704412935;
            continue;
          case 11:
            planet.LastAttackTurn = lastCalculatedTurn;
            num1 = (int) num3 * -219593727 ^ -1885347424;
            continue;
          case 12:
            current1 = lastCalculatedTurn.Next;
            num1 = (int) num3 * 1016434675 ^ -1962090168;
            continue;
          case 14:
            planetId = planet.PlanetID;
            num1 = (int) num3 * 36711310 ^ 1624989937;
            continue;
          case 15:
            num1 = (int) num3 * -1774172801 ^ -1041941658;
            continue;
          case 16:
            planet.DoesNotChangeOwner = true;
            num1 = (int) num3 * 1067691391 ^ -903640783;
            continue;
          case 17:
            int num4 = flag1 ? -1604406699 : (num4 = -1136148118);
            num1 = num4 ^ (int) num3 * -2029786784;
            continue;
          case 18:
            num1 = (int) num3 * -1494774826 ^ 1376847152;
            continue;
          case 19:
            num1 = (int) num3 * 1840805472 ^ -592551620;
            continue;
          case 20:
            this.ResetStats();
            num1 = (int) num3 * 1673798030 ^ -601049022;
            continue;
          default:
            goto label_23;
        }
      }
label_23:
      IEnumerator<IGrouping<int, Fleet>> enumerator = planet.FleetArrivalByTurnsRemaining.GetEnumerator();
      try
      {
label_38:
        int num5 = !PlanetTurnPredictions.\u206C⁫⁭‭‍⁯⁮‭⁭⁮‫⁪⁪‫‬​⁯⁯‎‮‍⁫‌⁮⁫⁬⁯‮‏‎⁯⁮‫⁫‬⁫⁯⁬‎‮‮((IEnumerator) enumerator) ? 754442817 : (num5 = 1658912880);
        IGrouping<int, Fleet> current2;
        bool flag3;
        bool flag4;
        bool isMine;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 419997201)) % 18U)
          {
            case 0:
              this.LastAttackTurn = lastCalculatedTurn;
              flag4 = Universe.FightBattleAndOwnerSurvived(lastCalculatedTurn, current2);
              num5 = (int) num6 * -1631755698 ^ -857663882;
              continue;
            case 1:
              int num7 = flag3 ? -884884512 : (num7 = -145349287);
              num5 = num7 ^ (int) num6 * 812292585;
              continue;
            case 2:
              int num8 = isMine ? -735960690 : (num8 = -1381428177);
              num5 = num8 ^ (int) num6 * -2145094027;
              continue;
            case 3:
              planet.DoesNotChangeOwner = false;
              num5 = (int) num6 * -63023494 ^ -1374978726;
              continue;
            case 4:
              num5 = (int) num6 * -905481629 ^ 1237109294;
              continue;
            case 5:
              num5 = 1658912880;
              continue;
            case 6:
              flag3 = !flag4;
              num5 = 1823176068;
              continue;
            case 7:
              goto label_38;
            case 8:
              int num9 = num2++ >= current2.Key ? 135387773 : (num9 = 1947158438);
              num5 = num9 ^ (int) num6 * -1676564447;
              continue;
            case 9:
              num5 = 1250083181;
              continue;
            case 10:
              lastCalculatedTurn = current1;
              num5 = (int) num6 * 1503845406 ^ 1342790089;
              continue;
            case 11:
              planet.MaxDesertersAllowed = PlanetTurnPredictions.\u206C⁬‬‎‫⁬‎​‫‌⁫⁭⁫⁯⁮⁫⁮‫⁮⁫⁭‫‪‬‌‮⁮⁯⁭⁮‮‏‪⁮⁪‍‭⁬‌⁮‮(planet.MaxDesertersAllowed, lastCalculatedTurn.NumShips);
              num5 = (int) num6 * -173335510 ^ 1270870923;
              continue;
            case 13:
              current2 = enumerator.Current;
              num5 = 883482818;
              continue;
            case 14:
              current1 = PlanetTurnPredictions.GrowTurn(this.GrowthRate, current1);
              num5 = (int) num6 * 53917001 ^ -2070202667;
              continue;
            case 15:
              isMine = lastCalculatedTurn.IsMine;
              num5 = (int) num6 * -1643406823 ^ 1329959192;
              continue;
            case 16:
              num5 = (int) num6 * -2132120231 ^ 1550660353;
              continue;
            case 17:
              num5 = 388275156;
              continue;
            default:
              goto label_48;
          }
        }
      }
      finally
      {
        if (enumerator != null)
        {
label_44:
          int num10 = 534463096;
          while (true)
          {
            uint num11;
            switch ((num11 = (uint) (num10 ^ 419997201)) % 3U)
            {
              case 1:
                PlanetTurnPredictions.\u200E‫⁯⁮⁭‏⁮‌⁭⁯⁮‪‪‭‭‏⁮⁭​⁮⁬‭⁪‍‎⁮⁮‭⁫⁯⁯‌‎‭‫‎‫‏‬‮‮((IDisposable) enumerator);
                num10 = (int) num11 * 1029739678 ^ 617599648;
                continue;
              case 2:
                goto label_44;
              default:
                goto label_47;
            }
          }
        }
label_47:;
      }
label_48:
label_49:
      int num12 = 773605965;
label_50:
      while (true)
      {
        uint num13;
        switch ((num13 = (uint) (num12 ^ 419997201)) % 8U)
        {
          case 0:
            current1 = PlanetTurnPredictions.GrowTurn(this.GrowthRate, current1);
            num12 = (int) num13 * 531183131 ^ -1064801328;
            continue;
          case 1:
            num12 = (int) num13 * -879589494 ^ 1512406062;
            continue;
          case 2:
            lastCalculatedTurn = current1;
            num12 = 2079728097;
            continue;
          case 3:
            planet.WinningArmadaIsMine = lastCalculatedTurn.Owner == 1;
            num12 = (int) num13 * 1624657041 ^ 166550573;
            continue;
          case 4:
          case 5:
            goto label_52;
          case 6:
            goto label_49;
          case 7:
            goto label_54;
          default:
            goto label_51;
        }
      }
label_54:
      return;
label_51:
      return;
label_52:
      num12 = current1 == null ? 2030534538 : (num12 = 560659275);
      goto label_50;
    }

    private static PlanetTurn GrowTurn(int growthRate, PlanetTurn current)
    {
label_1:
      int num1 = 971231033;
      PlanetTurn prior;
      bool flag;
      PlanetTurn next;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1724122861)) % 8U)
        {
          case 0:
            flag = prior != null;
            num1 = (int) num2 * -1708265767 ^ 635879859;
            continue;
          case 1:
            current.SetValues(prior.Owner, prior.NumShips);
            current.Grow(growthRate);
            num1 = (int) num2 * 653262825 ^ -1720192271;
            continue;
          case 2:
            goto label_1;
          case 4:
            prior = current.Prior;
            num1 = (int) num2 * 449456681 ^ -435670271;
            continue;
          case 5:
            next = current.Next;
            num1 = 1675750994;
            continue;
          case 6:
            int num3 = flag ? 249728914 : (num3 = 1469249878);
            num1 = num3 ^ (int) num2 * 620309857;
            continue;
          case 7:
            num1 = (int) num2 * -1850254683 ^ 1054153053;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return next;
    }

    internal PlanetTurn CalcMaxGainUsingThisManyShips(
      PlanetTurn lowBoundFleetArrival,
      int attackShipCount,
      PlanetTurnPredictions prediction)
    {
label_1:
      int num1 = 2009089232;
      PlanetTurn current;
      bool flag;
      PlanetTurn planetTurn1;
      PlanetTurn planetTurn2;
      PlanetTurn planetTurn3;
      int turnsFromNow;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1699973179)) % 21U)
        {
          case 0:
            planetTurn2 = current;
            num1 = 1766828711;
            continue;
          case 1:
            current = planetTurn1;
            num1 = (int) num2 * -652792364 ^ 1406813324;
            continue;
          case 2:
            current = current.Next;
            planetTurn1 = planetTurn1.Next;
            num1 = (int) num2 * -1808030046 ^ 285600784;
            continue;
          case 3:
            current = this.FirstTurn;
            planetTurn1 = prediction.FirstTurn;
            num1 = (int) num2 * 1053030427 ^ -1102923344;
            continue;
          case 4:
            planetTurn1.SetValues(current.Owner, current.NumShips);
            num1 = (int) num2 * -1824021289 ^ 700314002;
            continue;
          case 5:
            num1 = (int) num2 * 278548921 ^ 2055128446;
            continue;
          case 6:
            num1 = 1031485761;
            continue;
          case 7:
            planetTurn2 = current;
            num1 = (int) num2 * 2136031984 ^ -1463995249;
            continue;
          case 8:
            flag = current != null;
            num1 = 1934947048;
            continue;
          case 9:
            int num3;
            num1 = num3 = turnsFromNow-- <= 0 ? 1404230724 : (num3 = 1432606840);
            continue;
          case 10:
            num1 = (int) num2 * 800534955 ^ -1051205058;
            continue;
          case 12:
            planetTurn1.Prior.SetValues(1, attackShipCount - current.NumShips);
            num1 = (int) num2 * -1418782484 ^ -1309927533;
            continue;
          case 13:
            num1 = (int) num2 * 592644095 ^ 1817104393;
            continue;
          case 14:
            int num4 = flag ? -523996422 : (num4 = -153580848);
            num1 = num4 ^ (int) num2 * 1852661692;
            continue;
          case 15:
            num1 = (int) num2 * 501551306 ^ -1750513720;
            continue;
          case 16:
            planetTurn3 = planetTurn2;
            num1 = (int) num2 * -1876833414 ^ -1723694026;
            continue;
          case 17:
            current = PlanetTurnPredictions.GrowTurn(this.GrowthRate, current);
            num1 = (int) num2 * -1965261900 ^ -297067312;
            continue;
          case 18:
            num1 = (int) num2 * 90496149 ^ 513299226;
            continue;
          case 19:
            turnsFromNow = lowBoundFleetArrival.TurnsFromNow;
            num1 = (int) num2 * -2122832947 ^ -1054042987;
            continue;
          case 20:
            goto label_1;
          default:
            goto label_22;
        }
      }
label_22:
      return planetTurn3;
    }

    internal PlanetTurn FindCheapestTakeOverPoint(
      int shipsCanNotArriveBeforeThisTurn,
      PlanetTurnPredictions prediction)
    {
label_1:
      int num1 = 1741519088;
      PlanetTurn cheapestTakeOverPoint;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 735445151)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1386677362 ^ -1451163162;
            continue;
          case 3:
            cheapestTakeOverPoint = this[shipsCanNotArriveBeforeThisTurn].Clone();
            num1 = (int) num2 * 1891641035 ^ 1097347084;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return cheapestTakeOverPoint;
    }

    static int \u206C⁬‬‎‫⁬‎​‫‌⁫⁭⁫⁯⁮⁫⁮‫⁮⁫⁭‫‪‬‌‮⁮⁯⁭⁮‮‏‪⁮⁪‍‭⁬‌⁮‮([In] int obj0, [In] int obj1) => Math.Min(obj0, obj1);

    static bool \u206C⁫⁭‭‍⁯⁮‭⁭⁮‫⁪⁪‫‬​⁯⁯‎‮‍⁫‌⁮⁫⁬⁯‮‏‎⁯⁮‫⁫‬⁫⁯⁬‎‮‮([In] IEnumerator obj0) => obj0.MoveNext();

    static void \u200E‫⁯⁮⁭‏⁮‌⁭⁯⁮‪‪‭‭‏⁮⁭​⁮⁬‭⁪‍‎⁮⁮‭⁫⁯⁯‌‎‭‫‎‫‏‬‮‮([In] IDisposable obj0) => obj0.Dispose();
  }
}
