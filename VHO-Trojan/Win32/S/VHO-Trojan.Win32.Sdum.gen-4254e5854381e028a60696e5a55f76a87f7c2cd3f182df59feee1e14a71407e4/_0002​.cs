// Decompiled with JetBrains decompiler
// Type: ​
// Assembly: Geuohxlmylmazmxloypoatjz, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8CA089DF-C4D9-4B1E-E7CA-2914077BCF28
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\VHO-Trojan.Win32.Sdum.gen-4254e5854381e028a60696e5a55f76a87f7c2cd3f182df59feee1e14a71407e4.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;

internal sealed class \u0002​ : \u0005\u2004
{
  private readonly int \u0002;
  private readonly Stream \u0003;

  public \u0002​(Stream _param1, int _param2)
  {
    Stream stream = _param1;
    if (true)
      goto label_3;
label_1:
    int num = _param2 ^ -559030707;
    if (false)
      return;
    this.\u0002 = num;
    return;
label_3:
    this.\u0003 = stream;
    goto label_1;
  }

  public Stream \u0002()
  {
    if (true)
      ;
    return this.\u0003;
  }

  [SpecialName]
  public override bool \u0005\u2004\u2007\u2000\u2008\u0002()
  {
    if (true)
      ;
    return this.\u0002().CanRead;
  }

  [SpecialName]
  public override bool \u0005\u2004\u2007\u2000\u2008\u0005()
  {
    if (true)
      ;
    return this.\u0002().CanSeek;
  }

  [SpecialName]
  public override bool \u0005\u2004\u2007\u2000\u2008\u0003()
  {
    if (true)
      ;
    return this.\u0002().CanWrite;
  }

  public override void \u0005\u2004\u2007\u2000\u2008\u0003()
  {
    if (true)
      ;
    this.\u0002().Flush();
  }

  [SpecialName]
  public override long \u0005\u2004\u2007\u2000\u2008\u0002()
  {
    if (true)
      ;
    return this.\u0002().Length;
  }

  [SpecialName]
  public override long \u0005\u2004\u2007\u2000\u2008\u0003()
  {
    if (true)
      ;
    return this.\u0002().Position;
  }

  [SpecialName]
  public override void \u0005\u2004\u2007\u2000\u2008\u0002(long _param1)
  {
    if (true)
      ;
    Stream stream = this.\u0002();
    long num = _param1;
    if (true)
      ;
    stream.Position = num;
  }

  private byte \u0002(byte _param1, uint _param2)
  {
    int num1 = (int) (byte) ((uint) this.\u0002 ^ _param2);
    if (true)
      goto label_2;
label_1:
    byte num2;
    return (byte) ((uint) _param1 ^ (uint) num2);
label_2:
    num2 = (byte) num1;
    goto label_1;
  }

  public override void \u0005\u2004\u2007\u2000\u2008\u0002(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    int num1 = (int) (uint) this.\u0005\u2004\u2007\u2000\u2008\u0003();
    if (true)
      goto label_3;
label_1:
    byte[] numArray = new byte[_param3];
    if (true)
      goto label_4;
label_2:
    uint index;
    if (true)
      index = 0U;
    uint num2;
    byte[] buffer;
    for (; (long) index < (long) _param3; ++index)
      buffer[(int) index] = this.\u0002(_param1[(long) index + (long) _param2], num2 + index);
    this.\u0002().Write(buffer, 0, _param3);
    return;
label_4:
    buffer = numArray;
    goto label_2;
label_3:
    num2 = (uint) num1;
    goto label_1;
  }

  public override int \u0005\u2004\u2007\u2000\u2008\u0002(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    int num1 = (int) (uint) this.\u0005\u2004\u2007\u2000\u2008\u0003();
    if (true)
      goto label_4;
label_1:
    int num2 = this.\u0002().Read(_param1, _param2, _param3);
    if (true)
      goto label_5;
label_2:
    int num3;
    int num4 = _param2 + num3;
    if (true)
      goto label_6;
label_3:
    uint num5;
    int num6;
    for (int index = _param2; index < num6; ++index)
      _param1[index] = this.\u0002(_param1[index], num5++);
    return num3;
label_6:
    num6 = num4;
    goto label_3;
label_5:
    num3 = num2;
    goto label_2;
label_4:
    num5 = (uint) num1;
    goto label_1;
  }

  public override long \u0005\u2004\u2007\u2000\u2008\u0002(long _param1, int _param2)
  {
    SeekOrigin origin;
    switch (_param2)
    {
      case 0:
        if (true)
        {
          origin = SeekOrigin.Begin;
          break;
        }
        break;
      case 1:
        if (true)
        {
          origin = SeekOrigin.Current;
          break;
        }
        break;
      case 2:
        if (true)
        {
          origin = SeekOrigin.End;
          break;
        }
        break;
      default:
        throw new ArgumentException();
    }
    return this.\u0002().Seek(_param1, origin);
  }

  public override void \u0005\u2004\u2007\u2000\u2008\u0003(long _param1)
  {
    if (true)
      ;
    Stream stream = this.\u0002();
    long num = _param1;
    if (true)
      ;
    stream.SetLength(num);
  }
}
