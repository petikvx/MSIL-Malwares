// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.DebugChess
// Assembly: غج, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 646F7626-F199-493A-B5BB-FA317F4F75E5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7bd25c50eebc6f91a77977f299f7080a7ba1825fe1953c76801546cc96342b39.exe

namespace SimpleChessApp.Game
{
  internal class DebugChess
  {
    private Board b;

    internal DebugChess(Board board)
    {
label_1:
      int num1 = 1826778418;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 125176544)) % 5U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b = board;
            num1 = (int) num2 * 232598391 ^ 1149886225;
            continue;
          case 2:
            num1 = (int) num2 * -1167496974 ^ -1374715909;
            continue;
          case 3:
            num1 = (int) num2 * 873256676 ^ 709695239;
            continue;
          case 4:
            goto label_1;
          default:
            goto label_7;
        }
      }
label_3:
      return;
label_7:;
    }

    internal void TestSinglePiece(Pieces x)
    {
label_1:
      int num1 = -12514898;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1197227244)) % 11U)
        {
          case 0:
            num1 = (int) num2 * -137246941 ^ 558089435;
            continue;
          case 1:
            this.b.DisableTurns = true;
            num1 = -1751237417;
            continue;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * -1795083226 ^ 1271631365;
            continue;
          case 3:
            goto label_1;
          case 4:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -119357657 ^ 1612616633;
            continue;
          case 5:
            goto label_3;
          case 6:
            this.b.addWhite(4, 4, x);
            num1 = (int) num2 * 998582558 ^ -1170261190;
            continue;
          case 7:
            this.b.WhiteCanCastleKingSide = false;
            num1 = (int) num2 * -647319177 ^ 1984686838;
            continue;
          case 8:
            num1 = (int) num2 * 407043800 ^ -505798937;
            continue;
          case 9:
            this.b.WhiteCanCastleQueenSide = false;
            num1 = (int) num2 * -656090105 ^ 882003684;
            continue;
          case 10:
            int num3 = x != Pieces.King ? 1487679482 : (num3 = 859576600);
            num1 = num3 ^ (int) num2 * 267012739;
            continue;
          default:
            goto label_13;
        }
      }
label_3:
      return;
label_13:;
    }

    internal void TestPassant()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 1111292401;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2087727580)) % 13U)
        {
          case 0:
            num1 = (int) num2 * -893580917 ^ 1471901907;
            continue;
          case 1:
            num1 = (int) num2 * 929991013 ^ -61922256;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 426383702 ^ -112473204;
            continue;
          case 4:
            this.b.addBlack(4, 6, Pieces.Pawn);
            num1 = (int) num2 * 1288739730 ^ 1066347535;
            continue;
          case 5:
            goto label_3;
          case 6:
            num1 = (int) num2 * 251301177 ^ -1504509421;
            continue;
          case 7:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -606437573 ^ 290110597;
            continue;
          case 8:
            this.b.addWhite(1, 1, Pieces.Pawn);
            num1 = (int) num2 * 971261956 ^ -1971682454;
            continue;
          case 9:
            this.b.addBlack(6, 6, Pieces.Pawn);
            num1 = (int) num2 * 440480377 ^ -487479604;
            continue;
          case 10:
            this.b.addWhite(3, 1, Pieces.Pawn);
            this.b.addWhite(5, 4, Pieces.Pawn);
            num1 = (int) num2 * 1759212140 ^ -763105700;
            continue;
          case 11:
            this.b.addBlack(2, 3, Pieces.Pawn);
            num1 = (int) num2 * -1847707328 ^ 704496759;
            continue;
          case 12:
            num1 = (int) num2 * 1757958721 ^ 1371983418;
            continue;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    internal void TestPromotion()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 299666101;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1788007109)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            goto label_3;
          case 2:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 59690564 ^ -934923855;
            continue;
          case 3:
            this.b.addWhite(3, 0, Pieces.King);
            num1 = (int) num2 * 1021459691 ^ 2085250960;
            continue;
          case 4:
            this.b.addBlack(3, 7, Pieces.King);
            num1 = (int) num2 * -645237553 ^ -1967790443;
            continue;
          case 5:
            this.b.addWhite(4, 6, Pieces.Pawn);
            num1 = (int) num2 * -15858687 ^ 1027562917;
            continue;
          case 6:
            num1 = (int) num2 * -141431084 ^ -126828927;
            continue;
          case 7:
            this.b.addBlack(4, 1, Pieces.Pawn);
            num1 = (int) num2 * 1677191276 ^ -1756905596;
            continue;
          case 8:
            num1 = (int) num2 * 1928268590 ^ -1001281247;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCastling()
    {
label_1:
      int num1 = -1350981713;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -130617422)) % 15U)
        {
          case 0:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -793177230 ^ 545153419;
            continue;
          case 1:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -1250912679 ^ -991224874;
            continue;
          case 2:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * -846021585 ^ -616906058;
            continue;
          case 3:
            this.b.DisableTurns = true;
            num1 = (int) num2 * 881283561 ^ -1350427293;
            continue;
          case 4:
            goto label_1;
          case 5:
            goto label_3;
          case 6:
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * -764614906 ^ -1810348827;
            continue;
          case 7:
            num1 = (int) num2 * -177498031 ^ -973468533;
            continue;
          case 8:
            num1 = (int) num2 * -828358471 ^ -1738065853;
            continue;
          case 9:
            num1 = (int) num2 * -1207218322 ^ -567220838;
            continue;
          case 10:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1555374757 ^ -1091091168;
            continue;
          case 11:
            num1 = (int) num2 * -1875757589 ^ -1398434977;
            continue;
          case 12:
            this.b.ClearBoard();
            num1 = (int) num2 * 1706771390 ^ 1767189458;
            continue;
          case 13:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 1569851990 ^ 1449210632;
            continue;
          case 14:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * 219464985 ^ 1186810519;
            continue;
          default:
            goto label_17;
        }
      }
label_3:
      return;
label_17:;
    }

    internal void TestDiscoverCheck()
    {
label_1:
      int num1 = 1924124629;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 343735285)) % 9U)
        {
          case 0:
            num1 = (int) num2 * 1995077653 ^ -278398622;
            continue;
          case 1:
            this.b.ClearBoard();
            num1 = (int) num2 * -1335500012 ^ -1509371304;
            continue;
          case 2:
            goto label_1;
          case 3:
            this.b.addWhite(3, 1, Pieces.Pawn);
            num1 = (int) num2 * -738429757 ^ 588391068;
            continue;
          case 4:
            this.b.addBlack(0, 4, Pieces.Bishop);
            num1 = (int) num2 * 1537890101 ^ 561114103;
            continue;
          case 5:
            num1 = (int) num2 * 857263636 ^ 1561008343;
            continue;
          case 6:
            goto label_3;
          case 7:
            this.b.addWhite(4, 0, Pieces.King);
            num1 = (int) num2 * -1241516573 ^ -892951626;
            continue;
          case 8:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1261523801 ^ 209234285;
            continue;
          default:
            goto label_11;
        }
      }
label_3:
      return;
label_11:;
    }

    internal void TestCheck()
    {
label_1:
      int num1 = 1012831589;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1402796952)) % 7U)
        {
          case 0:
            num1 = (int) num2 * -639771059 ^ -984645018;
            continue;
          case 1:
            goto label_3;
          case 2:
            this.b.ClearBoard();
            num1 = (int) num2 * 1550083615 ^ 123634591;
            continue;
          case 3:
            this.b.addWhite(3, 0, Pieces.Bishop);
            num1 = (int) num2 * -2029561470 ^ -1705517070;
            continue;
          case 4:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * -791580102 ^ 1739480445;
            continue;
          case 5:
            goto label_1;
          case 6:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * 73367704 ^ 1164747188;
            continue;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    internal void CheckOnCastling()
    {
      this.b.ClearBoard();
label_1:
      int num1 = 456678160;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1221856683)) % 16U)
        {
          case 0:
            goto label_3;
          case 1:
            this.b.addBlack(0, 7, Pieces.Rook);
            num1 = (int) num2 * 1252016496 ^ 1822830625;
            continue;
          case 2:
            num1 = (int) num2 * -1711782306 ^ -953492492;
            continue;
          case 3:
            this.b.addBlack(4, 2, Pieces.Bishop);
            num1 = (int) num2 * 1994211937 ^ 671585838;
            continue;
          case 4:
            num1 = (int) num2 * 1182862138 ^ 562657062;
            continue;
          case 5:
            this.b.addWhite(0, 0, Pieces.Rook);
            num1 = (int) num2 * -1080943080 ^ -382485730;
            continue;
          case 6:
            this.b.addWhite(4, 5, Pieces.Bishop);
            num1 = (int) num2 * -1471268556 ^ 240003082;
            continue;
          case 7:
            this.b.addBlack(4, 7, Pieces.King);
            num1 = (int) num2 * -427622523 ^ -1594093945;
            continue;
          case 8:
            this.b.addWhite(4, 0, Pieces.King);
            this.b.addWhite(7, 0, Pieces.Rook);
            num1 = (int) num2 * 1231101968 ^ -1549486183;
            continue;
          case 9:
            num1 = (int) num2 * 2008000262 ^ 626679889;
            continue;
          case 10:
            num1 = (int) num2 * -2053058158 ^ 398285704;
            continue;
          case 11:
            this.b.DisableTurns = true;
            num1 = (int) num2 * -682274089 ^ 1262921911;
            continue;
          case 12:
            this.b.lights.FindAllMoves();
            num1 = (int) num2 * 1402227248 ^ -1886199397;
            continue;
          case 13:
            num1 = (int) num2 * -1444963710 ^ -1226749751;
            continue;
          case 14:
            goto label_1;
          case 15:
            this.b.addBlack(7, 7, Pieces.Rook);
            num1 = (int) num2 * 214382860 ^ -1389139301;
            continue;
          default:
            goto label_18;
        }
      }
label_3:
      return;
label_18:;
    }
  }
}
