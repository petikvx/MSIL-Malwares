// Decompiled with JetBrains decompiler
// Type: RiskGame.Roles.IssuerExceptionRole
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Database;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace RiskGame.Roles
{
  internal class IssuerExceptionRole : Form
  {
    private IContainer m_Model;
    private TableLayoutPanel m_Method;
    private PictureBox exception;
    private Label _Specification;
    private Label _Message;
    private Label _Helper;
    private Label comparator;
    private TextBox _Server;
    private Button m_Property;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IssuerExceptionRole()
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              goto label_4;
            case 1:
              this._Server.Text = this.VerifySerializer();
              if (true)
              {
                num2 = 7;
                continue;
              }
              goto label_4;
            case 2:
            case 6:
              goto label_5;
            case 3:
              this.m_Model = (IContainer) null;
              // ISSUE: explicit constructor call
              base.\u002Ector();
              this.ResolveSerializer();
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 1;
            case 5:
              goto label_1;
            case 7:
              goto label_10;
            default:
              if (!IssuerExceptionRole.ComputeContainer())
              {
                num2 = 5;
                continue;
              }
              goto label_9;
          }
        }
label_1:
        this._Specification.Text = this.CallSerializer();
        this._Message.Text = string.Format("Version {0}", (object) this.PopSerializer());
        this._Helper.Text = this.PublishSerializer();
        this.comparator.Text = this.CreateSerializer();
        num1 = 1;
        continue;
label_4:
        ProxyParser.NewPool();
        num1 = 3;
        continue;
label_5:
        this.Text = string.Format("About {0}", (object) this.ForgotSerializer());
        goto label_1;
      }
label_10:
      return;
label_9:;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string ForgotSerializer()
    {
      int num1 = 0;
      if (true)
        goto label_8;
label_1:
      object[] customAttributes;
      int num2;
      if (customAttributes.Length != 0)
      {
        num2 = 2;
        goto label_7;
      }
label_5:
      string str = Path.GetFileNameWithoutExtension(Assembly.GetExecutingAssembly().CodeBase);
      num2 = 6;
label_7:
      num1 = num2;
label_8:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_3;
          case 1:
          case 5:
            goto label_1;
          case 2:
            goto label_6;
          case 3:
          case 4:
            goto label_4;
          case 6:
            goto label_10;
          default:
            if (!IssuerExceptionRole.ComputeContainer())
            {
              num1 = 4;
              continue;
            }
            goto label_10;
        }
      }
label_3:
      customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyTitleAttribute), false);
      num2 = 5;
      goto label_7;
label_4:
      AssemblyTitleAttribute assemblyTitleAttribute;
      str = assemblyTitleAttribute.Title;
      goto label_10;
label_6:
      assemblyTitleAttribute = (AssemblyTitleAttribute) customAttributes[0];
      if (!(assemblyTitleAttribute.Title != ""))
        goto label_5;
      else
        goto label_4;
label_10:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PopSerializer() => Assembly.GetExecutingAssembly().GetName().Version.ToString();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string VerifySerializer()
    {
      int num1 = 5;
      string str;
      while (true)
      {
        int num2 = num1;
        bool flag;
        object[] customAttributes;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_6;
            case 1:
            case 2:
              flag = customAttributes.Length == 0;
              if (IssuerExceptionRole.RateContainer())
              {
                num2 = 3;
                continue;
              }
              goto label_10;
            case 3:
              if (!flag)
              {
                str = ((AssemblyDescriptionAttribute) customAttributes[0]).Description;
                if (true)
                {
                  num2 = 6;
                  continue;
                }
                goto label_10;
              }
              else
                goto label_2;
            case 4:
            case 6:
              goto label_10;
            default:
              goto label_5;
          }
        }
label_5:
        num1 = 4;
        continue;
label_6:
        customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyDescriptionAttribute), false);
        num1 = 2;
      }
label_2:
      str = "";
label_10:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CallSerializer()
    {
      int num1 = 2;
      string str;
      while (true)
      {
        int num2 = num1;
        object[] customAttributes;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyProductAttribute), false);
              num2 = 5;
              continue;
            case 1:
              goto label_4;
            case 3:
            case 4:
            case 6:
              goto label_9;
            case 5:
              if (customAttributes.Length == 0)
              {
                num2 = 1;
                continue;
              }
              goto label_3;
            default:
              goto label_7;
          }
        }
label_3:
        str = ((AssemblyProductAttribute) customAttributes[0]).Product;
        num1 = 6;
        continue;
label_7:
        num1 = 4;
      }
label_4:
      str = "";
label_9:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string PublishSerializer()
    {
      int num1 = 1;
      string str;
      while (true)
      {
        int num2 = num1;
label_5:
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_7;
            case 2:
            case 5:
              goto label_2;
            case 3:
              goto label_8;
            case 4:
            case 6:
              goto label_9;
            default:
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_7;
          }
        }
label_2:
        object[] customAttributes;
        bool flag;
        while (!flag)
        {
          str = ((AssemblyCopyrightAttribute) customAttributes[0]).Copyright;
          if (IssuerExceptionRole.RateContainer())
          {
            num2 = 6;
            goto label_5;
          }
        }
        break;
label_7:
        customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyCopyrightAttribute), false);
        num1 = 3;
        continue;
label_8:
        flag = customAttributes.Length == 0;
        num1 = 5;
      }
      str = "";
label_9:
      return str;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string CreateSerializer()
    {
      int num = 0;
      string serializer;
      object[] customAttributes;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
            customAttributes = Assembly.GetExecutingAssembly().GetCustomAttributes(typeof (AssemblyCompanyAttribute), false);
            num = 3;
            continue;
          case 1:
          case 3:
            flag = customAttributes.Length == 0;
            if (IssuerExceptionRole.RateContainer())
            {
              num = 4;
              continue;
            }
            goto label_9;
          case 2:
          case 4:
            if (!flag)
            {
              serializer = ((AssemblyCompanyAttribute) customAttributes[0]).Company;
              if (true)
              {
                num = 6;
                continue;
              }
              goto case 0;
            }
            else
              goto label_1;
          case 5:
            goto label_1;
          case 6:
            goto label_9;
          default:
            num = 5;
            continue;
        }
      }
label_1:
      serializer = "";
label_9:
      return serializer;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool verifytask)
    {
      int num1 = 4;
      if (IssuerExceptionRole.ComputeContainer())
        ;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
          case 4:
            if (!verifytask)
            {
              num3 = 0;
              break;
            }
            num2 = 3;
            goto label_5;
          case 1:
          case 3:
            num3 = this.m_Model != null ? 1 : 0;
            break;
          case 2:
label_8:
            this.m_Model.Dispose();
            goto label_9;
          case 5:
            goto label_4;
          default:
            num2 = 2;
            goto label_5;
        }
        if (num3 == 0)
          goto label_9;
        else
          goto label_8;
label_5:
        num1 = num2;
        continue;
label_9:
        base.Dispose(verifytask);
        num2 = 5;
        goto label_5;
      }
label_4:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ResolveSerializer()
    {
      int num1 = 7;
      while (true)
      {
        int num2 = num1;
        ComponentResourceManager componentResourceManager;
        while (true)
        {
          switch (num2)
          {
            case 0:
              this._Specification.Size = new Size(271, 17);
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto case 4;
            case 1:
              goto label_9;
            case 2:
              goto label_12;
            case 3:
              this._Helper.Size = new Size(271, 17);
              this._Helper.TabIndex = 21;
              this._Helper.Text = "Copyright";
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto label_28;
            case 4:
              this._Message.Margin = new Padding(6, 0, 3, 0);
              num2 = 16;
              continue;
            case 5:
              this.AutoScaleMode = AutoScaleMode.Font;
              this.ClientSize = new Size(435, 283);
              this.Controls.Add((Control) this.m_Method);
              this.FormBorderStyle = FormBorderStyle.FixedDialog;
              this.MaximizeBox = false;
              this.MinimizeBox = false;
              if (!IssuerExceptionRole.ComputeContainer())
              {
                num2 = 27;
                continue;
              }
              goto case 29;
            case 6:
              goto label_7;
            case 7:
              componentResourceManager = new ComponentResourceManager(typeof (IssuerExceptionRole));
              int num3 = 13;
              num2 = IssuerExceptionRole.ComputeContainer() ? num3 : num3;
              continue;
            case 8:
              this.ShowIcon = false;
              this.ShowInTaskbar = false;
              this.StartPosition = FormStartPosition.CenterParent;
              this.Text = "AboutBox1";
              this.m_Method.ResumeLayout(false);
              this.m_Method.PerformLayout();
              ((ISupportInitialize) this.exception).EndInit();
              this.ResumeLayout(false);
              if (true)
              {
                num2 = 30;
                continue;
              }
              goto case 14;
            case 9:
            case 20:
              this._Helper.TextAlign = ContentAlignment.MiddleLeft;
              this.comparator.Dock = DockStyle.Fill;
              this.comparator.Location = new Point(143, 78);
              this.comparator.Margin = new Padding(6, 0, 3, 0);
              this.comparator.MaximumSize = new Size(0, 17);
              this.comparator.Name = "labelCompanyName";
              num2 = 28;
              continue;
            case 10:
              goto label_6;
            case 11:
              this.m_Method.Size = new Size(417, 265);
              if (true)
              {
                num2 = 29;
                continue;
              }
              goto case 5;
            case 12:
              this.m_Method.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
              num2 = 25;
              continue;
            case 13:
              goto label_1;
            case 14:
              this._Server.TabIndex = 23;
              this._Server.TabStop = false;
              num2 = 21;
              continue;
            case 15:
              goto label_30;
            case 16:
              this._Message.MaximumSize = new Size(0, 17);
              this._Message.Name = "labelVersion";
              this._Message.Size = new Size(271, 17);
              if (true)
              {
                num2 = 19;
                continue;
              }
              goto label_30;
            case 17:
              goto label_22;
            case 18:
              goto label_8;
            case 19:
              goto label_5;
            case 21:
              goto label_28;
            case 22:
              goto label_31;
            case 23:
            case 24:
              this.AcceptButton = (IButtonControl) this.m_Property;
              this.AutoScaleDimensions = new SizeF(6f, 13f);
              if (true)
              {
                num2 = 5;
                continue;
              }
              goto label_33;
            case 25:
              this.m_Method.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
              this.m_Method.RowStyles.Add(new RowStyle(SizeType.Percent, 50f));
              this.m_Method.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
              if (IssuerExceptionRole.RateContainer())
              {
                num2 = 11;
                continue;
              }
              goto case 3;
            case 26:
              this.m_Method.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 67f));
              this.m_Method.Controls.Add((Control) this.exception, 0, 0);
              this.m_Method.Controls.Add((Control) this._Specification, 1, 0);
              this.m_Method.Controls.Add((Control) this._Message, 1, 1);
              this.m_Method.Controls.Add((Control) this._Helper, 1, 2);
              this.m_Method.Controls.Add((Control) this.comparator, 1, 3);
              if (IssuerExceptionRole.RateContainer())
              {
                num2 = 1;
                continue;
              }
              goto case 9;
            case 27:
              this.Name = "AboutBox1";
              this.Padding = new Padding(9);
              if (true)
              {
                num2 = 8;
                continue;
              }
              goto case 26;
            case 28:
              this.comparator.Size = new Size(271, 17);
              this.comparator.TabIndex = 22;
              this.comparator.Text = "Company Name";
              this.comparator.TextAlign = ContentAlignment.MiddleLeft;
              this._Server.Dock = DockStyle.Fill;
              this._Server.Location = new Point(143, 107);
              this._Server.Margin = new Padding(6, 3, 3, 3);
              this._Server.Multiline = true;
              this._Server.Name = "textBoxDescription";
              this._Server.ReadOnly = true;
              this._Server.ScrollBars = ScrollBars.Both;
              this._Server.Size = new Size(271, 126);
              num2 = 14;
              continue;
            case 29:
              this.m_Method.TabIndex = 0;
              this.exception.Dock = DockStyle.Fill;
              this.exception.Image = (Image) componentResourceManager.GetObject("logoPictureBox.Image");
              this.exception.Location = new Point(3, 3);
              this.exception.Name = "logoPictureBox";
              this.m_Method.SetRowSpan((Control) this.exception, 6);
              this.exception.Size = new Size(131, 259);
              this.exception.SizeMode = PictureBoxSizeMode.StretchImage;
              if (IssuerExceptionRole.RateContainer())
              {
                num2 = 6;
                continue;
              }
              goto label_22;
            case 30:
              goto label_17;
            default:
              if (true)
              {
                num2 = 10;
                continue;
              }
              goto case 7;
          }
        }
label_1:
        this.m_Method = new TableLayoutPanel();
        this.exception = new PictureBox();
        this._Specification = new Label();
        this._Message = new Label();
        this._Helper = new Label();
        this.comparator = new Label();
        this._Server = new TextBox();
        this.m_Property = new Button();
        this.m_Method.SuspendLayout();
        ((ISupportInitialize) this.exception).BeginInit();
        num1 = 17;
        continue;
label_5:
        this._Message.TabIndex = 0;
        this._Message.Text = "Version";
        this._Message.TextAlign = ContentAlignment.MiddleLeft;
        this._Helper.Dock = DockStyle.Fill;
        this._Helper.Location = new Point(143, 52);
        this._Helper.Margin = new Padding(6, 0, 3, 0);
        this._Helper.MaximumSize = new Size(0, 17);
        this._Helper.Name = "labelCopyright";
        num1 = 3;
        continue;
label_6:
        this._Message.Location = new Point(143, 26);
        num1 = 4;
        continue;
label_7:
        this.exception.TabIndex = 12;
        this.exception.TabStop = false;
        this._Specification.Dock = DockStyle.Fill;
        this._Specification.Location = new Point(143, 0);
        this._Specification.Margin = new Padding(6, 0, 3, 0);
        this._Specification.MaximumSize = new Size(0, 17);
        this._Specification.Name = "labelProductName";
        num1 = 0;
        continue;
label_8:
        this.m_Method.RowCount = 6;
        num1 = 15;
        continue;
label_9:
        this.m_Method.Controls.Add((Control) this._Server, 1, 4);
        this.m_Method.Controls.Add((Control) this.m_Property, 1, 5);
        this.m_Method.Dock = DockStyle.Fill;
        this.m_Method.Location = new Point(9, 9);
        num1 = 22;
        continue;
label_12:
        this._Specification.TabIndex = 19;
        this._Specification.Text = "Product Name";
        this._Specification.TextAlign = ContentAlignment.MiddleLeft;
        this._Message.Dock = DockStyle.Fill;
        goto label_6;
label_22:
        this.SuspendLayout();
        this.m_Method.ColumnCount = 2;
        this.m_Method.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 33f));
        num1 = 26;
        continue;
label_28:
        this._Server.Text = "Description";
        this.m_Property.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
        this.m_Property.DialogResult = DialogResult.Cancel;
        this.m_Property.Location = new Point(339, 239);
        this.m_Property.Name = "okButton";
        this.m_Property.Size = new Size(75, 23);
        this.m_Property.TabIndex = 24;
        this.m_Property.Text = "&OK";
        num1 = 23;
        continue;
label_30:
        this.m_Method.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
        this.m_Method.RowStyles.Add(new RowStyle(SizeType.Percent, 10f));
        num1 = 12;
        continue;
label_31:
        this.m_Method.Name = "tableLayoutPanel";
        num1 = 18;
      }
label_17:
      return;
label_33:;
    }

    internal static bool RateContainer() => true;

    internal static bool ComputeContainer() => false;
  }
}
