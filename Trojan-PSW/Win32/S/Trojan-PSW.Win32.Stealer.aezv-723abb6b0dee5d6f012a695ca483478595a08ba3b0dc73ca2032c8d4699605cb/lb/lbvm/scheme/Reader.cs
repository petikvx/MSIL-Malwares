// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.scheme.Reader
// Assembly: ISectionEnt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 94D57F93-A342-4E0D-9A4D-9518717BA689
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezv-723abb6b0dee5d6f012a695ca483478595a08ba3b0dc73ca2032c8d4699605cb.exe

using org.lb.lbvm.exceptions;
using org.lb.lbvm.runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;

namespace org.lb.lbvm.scheme
{
  internal sealed class Reader
  {
    private StringReader expressionReader;

    public IEnumerable<object> ReadAll(string expression)
    {
      this.expressionReader = new StringReader(expression);
      while (this.expressionReader.Peek() != -1)
      {
        object read = this.Read();
        if (read == null)
          break;
        yield return read;
        read = (object) null;
      }
    }

    private char Peek() => (char) this.expressionReader.Peek();

    private object Read()
    {
      this.SkipWhitespace();
      if (this.expressionReader.Peek() == -1)
        return (object) null;
      switch (this.Peek())
      {
        case '"':
          return this.ReadString();
        case '#':
          return this.ReadSpecial();
        case '\'':
          this.expressionReader.Read();
          return (object) new List<object>()
          {
            (object) Symbol.fromString("quote"),
            this.Read()
          };
        case '(':
          return this.ReadList();
        case ';':
          this.SkipComment();
          return this.Read();
        default:
          return this.ReadSymbol();
      }
    }

    private void SkipComment()
    {
      while (this.Peek() != '\n')
        this.expressionReader.Read();
    }

    private void SkipWhitespace()
    {
      while (char.IsWhiteSpace(this.Peek()))
        this.expressionReader.Read();
    }

    private object ReadSpecial()
    {
      this.expressionReader.Read();
      return this.Peek() == '\\' ? this.ReadChar() : this.ReadSymbol("#");
    }

    private object ReadChar()
    {
      this.expressionReader.Read();
      if (!char.IsLetter(this.Peek()))
        return (object) (char) this.expressionReader.Read();
      string str = "";
      while (this.expressionReader.Peek() != -1 && this.Peek() != ')' && !char.IsWhiteSpace(this.Peek()))
        str += ((char) this.expressionReader.Read()).ToString();
      if (str == "space")
        str = " ";
      else if (str == "newline")
        str = "\n";
      else if (str == "cr")
        str = "\r";
      else if (str == "tab")
        str = "\t";
      else if (str.Length > 1)
        throw new ReaderException("Invalid character constant #\\" + str);
      return (object) str[0];
    }

    private object ReadList()
    {
      List<object> objectList = new List<object>();
      this.expressionReader.Read();
      this.SkipWhitespace();
      while (this.Peek() != ')')
      {
        if (this.expressionReader.Peek() == -1)
          throw new ReaderException("Unexpected end of stream in reader");
        objectList.Add(this.Read());
        this.SkipWhitespace();
      }
      this.expressionReader.Read();
      return (object) objectList;
    }

    private object ReadSymbol(string prefix = "")
    {
      string str = prefix + ((char) this.expressionReader.Read()).ToString();
      while (this.expressionReader.Peek() != -1 && this.Peek() != ')' && !char.IsWhiteSpace(this.Peek()))
        str += ((char) this.expressionReader.Read()).ToString();
      if (str == "#t")
        return (object) true;
      if (str == "#f")
        return (object) false;
      int result1;
      if (!str.Contains(".") && int.TryParse(str, NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture, out result1))
        return (object) result1;
      double result2;
      return double.TryParse(str, NumberStyles.Any, (IFormatProvider) CultureInfo.InvariantCulture, out result2) ? (object) result2 : (object) Symbol.fromString(str);
    }

    private object ReadString()
    {
      StringBuilder stringBuilder = new StringBuilder();
      this.expressionReader.Read();
      while (this.Peek() != '"')
      {
        char ch = this.expressionReader.Peek() != -1 ? (char) this.expressionReader.Read() : throw new ReaderException("Unexpected end of stream in reader");
        if (ch == '\\')
        {
          ch = (char) this.expressionReader.Read();
          if (ch == 'n')
            ch = '\n';
        }
        stringBuilder.Append(ch);
      }
      this.expressionReader.Read();
      return (object) stringBuilder.ToString();
    }
  }
}
