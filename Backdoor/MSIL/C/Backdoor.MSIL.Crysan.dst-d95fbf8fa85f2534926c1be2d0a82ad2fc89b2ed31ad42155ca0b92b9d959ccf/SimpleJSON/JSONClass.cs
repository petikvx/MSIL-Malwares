// Decompiled with JetBrains decompiler
// Type: SimpleJSON.JSONClass
// Assembly: MemberAccessExcepti, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 46220647-D1CE-4792-A51F-9B328C1E60FB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.MSIL.Crysan.dst-d95fbf8fa85f2534926c1be2d0a82ad2fc89b2ed31ad42155ca0b92b9d959ccf.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;

namespace SimpleJSON
{
  public class JSONClass : JSONNode, IEnumerable
  {
    private Dictionary<string, JSONNode> m_Dict = new Dictionary<string, JSONNode>();

    public override JSONNode this[string aKey]
    {
      get
      {
        if (this.m_Dict.ContainsKey(aKey))
        {
label_1:
          uint num;
          switch ((num = (uint) (291697195 ^ 283578026)) % 3U)
          {
            case 0:
              goto label_1;
            case 2:
              return this.m_Dict[aKey];
          }
        }
        return (JSONNode) new JSONLazyCreator((JSONNode) this, aKey);
      }
      set
      {
        if (!this.m_Dict.ContainsKey(aKey))
          goto label_4;
label_1:
        int num1 = 45885772;
label_2:
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1610940562)) % 5U)
          {
            case 0:
              goto label_3;
            case 1:
              this.m_Dict[aKey] = value;
              num1 = (int) num2 * 1401692950 ^ -606375911;
              continue;
            case 2:
              goto label_4;
            case 3:
              goto label_1;
            case 4:
              goto label_5;
            default:
              goto label_7;
          }
        }
label_3:
        return;
label_5:
        return;
label_7:
        return;
label_4:
        this.m_Dict.Add(aKey, value);
        num1 = 1489554687;
        goto label_2;
      }
    }

    public override JSONNode this[int aIndex]
    {
      get
      {
        if (aIndex >= 0)
        {
label_1:
          int num1 = 1249279016;
          while (true)
          {
            uint num2;
            switch ((num2 = (uint) (num1 ^ 275440689)) % 3U)
            {
              case 1:
                int count = this.m_Dict.Count;
                num1 = (int) num2 * 1372552758 ^ -411615094;
                continue;
              case 2:
                goto label_1;
              default:
                goto label_4;
            }
          }
        }
label_4:
        return (JSONNode) null;
      }
      set
      {
        if (aIndex < 0)
          return;
label_1:
        int num1 = 57973413;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1019526803)) % 3U)
          {
            case 0:
              goto label_1;
            case 1:
              goto label_5;
            case 2:
              int count = this.m_Dict.Count;
              num1 = (int) num2 * 317367820 ^ 431176651;
              continue;
            default:
              goto label_6;
          }
        }
label_5:
        return;
label_6:;
      }
    }

    public override int Count => this.m_Dict.Count;

    public override void Add(string aKey, JSONNode aItem)
    {
      if (JSONClass.\u206F⁮⁬⁫‌‭⁬‬⁯‮‫⁯⁬‪⁫​‬‮‌‎⁯⁫⁬⁬⁮‎⁭⁬⁮⁯‮‫‭⁫‬‫‏⁬⁭‮(aKey))
        goto label_5;
label_1:
      int num1 = 1760012051;
label_2:
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1868155082)) % 6U)
        {
          case 0:
            goto label_3;
          case 1:
            goto label_4;
          case 2:
            goto label_7;
          case 3:
            int num3 = this.m_Dict.ContainsKey(aKey) ? 1005597823 : (num3 = 1795000028);
            num1 = num3 ^ (int) num2 * 1786988471;
            continue;
          case 4:
            goto label_5;
          case 5:
            goto label_1;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:
      return;
label_4:
      this.m_Dict.Add(aKey, aItem);
      return;
label_7:
      this.m_Dict[aKey] = aItem;
      return;
label_5:
      this.m_Dict.Add(Guid.NewGuid().ToString(), aItem);
      num1 = 1094372038;
      goto label_2;
    }

    public override JSONNode Remove(string aKey)
    {
      if (!this.m_Dict.ContainsKey(aKey))
      {
label_1:
        uint num;
        switch ((num = (uint) (1905227488 ^ 630101313)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            return (JSONNode) null;
        }
      }
      JSONNode jsonNode = this.m_Dict[aKey];
      this.m_Dict.Remove(aKey);
      return jsonNode;
    }

    public override JSONNode Remove(int aIndex)
    {
      if (aIndex >= 0)
      {
label_1:
        int num1 = 1527051865;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 1104814990)) % 3U)
          {
            case 1:
              int count = this.m_Dict.Count;
              num1 = (int) num2 * 90417677 ^ 160234830;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
      }
label_4:
      return (JSONNode) null;
    }

    public override JSONNode Remove(JSONNode aNode)
    {
      try
      {
        return (JSONNode) null;
      }
      catch
      {
        return (JSONNode) null;
      }
    }

    public override IEnumerable<JSONNode> Childs
    {
      get
      {
        bool childs;
        try
        {
          int num1 = this.\u003C\u003E1__state;
label_1:
          int num2 = 50122400;
          Dictionary<string, JSONNode>.Enumerator enumerator;
          while (true)
          {
            uint num3;
            switch ((num3 = (uint) (num2 ^ 1150729327)) % 15U)
            {
              case 0:
                int num4;
                num2 = num4 = !enumerator.MoveNext() ? 1042974895 : (num4 = 607283993);
                continue;
              case 1:
                this.\u003C\u003E1__state = -3;
                num2 = (int) num3 * -293497064 ^ -1841424109;
                continue;
              case 2:
                int num5 = num1 == 0 ? 1954120561 : (num5 = 613452230);
                num2 = num5 ^ (int) num3 * 175578334;
                continue;
              case 3:
              case 10:
                goto label_16;
              case 4:
                int num6 = num1 != 1 ? 1912576243 : (num6 = 210284999);
                num2 = num6 ^ (int) num3 * -828990578;
                continue;
              case 5:
                childs = false;
                num2 = (int) num3 * -1927861982 ^ -1286517333;
                continue;
              case 6:
                this.\u003C\u003E1__state = -1;
                enumerator = this.m_Dict.GetEnumerator();
                num2 = 1217901468;
                continue;
              case 7:
                goto label_1;
              case 8:
                this.\u003C\u003E2__current = enumerator.Current.Value;
                num2 = 1765836822;
                continue;
              case 9:
                this.\u003C\u003E1__state = -3;
                num2 = 70805278;
                continue;
              case 11:
                num2 = (int) num3 * 1621527257 ^ 942522762;
                continue;
              case 12:
                this.\u003C\u003E1__state = 1;
                num2 = (int) num3 * 1946318007 ^ 1796093403;
                continue;
              case 13:
                childs = true;
                num2 = (int) num3 * 374699405 ^ 2035797922;
                continue;
              default:
                goto label_14;
            }
          }
label_14:
          this.\u003C\u003Em__Finally1();
          enumerator = new Dictionary<string, JSONNode>.Enumerator();
          childs = false;
        }
        __fault
        {
          this.System\u002EIDisposable\u002EDispose();
        }
label_16:
        return childs;
      }
    }

    public IEnumerator GetEnumerator()
    {
      bool enumerator1;
      // ISSUE: fault handler
      try
      {
        // ISSUE: reference to a compiler-generated field
        int num1 = this.\u003C\u003E1__state;
label_1:
        int num2 = 413641806;
        Dictionary<string, JSONNode>.Enumerator enumerator;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num2 ^ 1866891703)) % 15U)
          {
            case 0:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E2__current = (object) enumerator.Current;
              num2 = 1041900120;
              continue;
            case 1:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -1;
              enumerator = this.m_Dict.GetEnumerator();
              num2 = 1805918971;
              continue;
            case 3:
              enumerator = new Dictionary<string, JSONNode>.Enumerator();
              num2 = (int) num3 * 1331367236 ^ 1053802999;
              continue;
            case 4:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = (int) num3 * -1354694776 ^ 216102938;
              continue;
            case 5:
              goto label_13;
            case 6:
              goto label_1;
            case 7:
              // ISSUE: reference to a compiler-generated field
              this.\u003C\u003E1__state = -3;
              num2 = 753798266;
              continue;
            case 8:
              int num4 = num1 == 0 ? -667713126 : (num4 = -737678701);
              num2 = num4 ^ (int) num3 * 1689458938;
              continue;
            case 10:
              int num5 = num1 == 1 ? 1421950086 : (num5 = 240135419);
              num2 = num5 ^ (int) num3 * 1650833613;
              continue;
            case 11:
              int num6;
              num2 = num6 = enumerator.MoveNext() ? 279836345 : (num6 = 689507489);
              continue;
            case 12:
              enumerator1 = false;
              num2 = (int) num3 * 786997247 ^ -1696771739;
              continue;
            case 13:
              // ISSUE: reference to a compiler-generated method
              this.\u003C\u003Em__Finally1();
              num2 = (int) num3 * 1476350618 ^ -2083577644;
              continue;
            case 14:
              enumerator1 = false;
              num2 = (int) num3 * 248796973 ^ -1312393807;
              continue;
            default:
              goto label_16;
          }
        }
label_13:
        // ISSUE: reference to a compiler-generated field
        this.\u003C\u003E1__state = 1;
        enumerator1 = true;
      }
      __fault
      {
        // ISSUE: reference to a compiler-generated method
        this.System\u002EIDisposable\u002EDispose();
      }
label_16:
      return enumerator1;
    }

    public override string ToString()
    {
      string str = \u003CModule\u003E.\u202D​‎⁫‭‏​‬‍⁪‭‌‪⁭‫‮⁯‫‎‪‬‍‎‮‍​‫‌‬‫‌‭‫⁫⁮‎‎⁬⁯‎‮<string>(2278999289U);
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_7:
        int num1 = !enumerator.MoveNext() ? 1968936878 : (num1 = 1927108919);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 676860718)) % 7U)
          {
            case 0:
              num1 = 1927108919;
              continue;
            case 1:
              str = JSONClass.\u206D‫⁪​‪‏⁭‍⁫‮‌‌‍‮‮‎‌‍‪⁬‮‍‏⁭‮⁫⁯⁮‏‫⁪‭‌⁪‌⁮⁮⁯⁭‌‮(new string[5]
              {
                str,
                \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(3561655002U),
                JSONNode.Escape(current.Key),
                \u003CModule\u003E.\u200C​‏⁮‪⁪‍‍‎‎‌‎‎‫‌‬⁫⁮‮‌⁮‌‎⁭‮‌‌‬⁪⁬‭⁮‮‪⁭⁪‭‬‏‬‮<string>(1962059750U),
                JSONClass.\u202B‏⁬‎‎⁪⁪⁬‮⁭‪⁫⁯‪⁯‏⁬‭⁯⁮‍‪‮⁬​⁬‬⁭‎‭⁭‪‪⁯​‏⁬‮‫‮‮((object) current.Value)
              });
              num1 = 37094178;
              continue;
            case 2:
              goto label_7;
            case 3:
              str = JSONClass.\u202D​‌‌​⁬‪⁮⁯‬‬⁯‮‌⁯‭‍‪⁯‍‪‪‪‬‎⁭⁮⁬⁬⁬⁮‪⁭‎⁫⁮⁮⁫‮‫‮(str, \u003CModule\u003E.\u206C⁭⁭⁪‫⁮‭‍⁮‏⁬‫⁬‎⁯⁭⁬​⁯‌‮‪‫‎⁫⁪​‏‌⁮⁯​⁫‮‌⁮‍‫‪⁭‮<string>(1818787664U));
              num1 = (int) num2 * -1638362097 ^ -1562783486;
              continue;
            case 4:
              int num3 = JSONClass.\u202D‫⁬​⁫‏‫‪⁫‌⁬⁮⁫‮⁪​‌⁬‬‪‌‪​‎‫⁯‏⁮⁭‌⁯‍⁪‬‪‪‮‍‫⁯‮(str) > 2 ? 1765897758 : (num3 = 1541426314);
              num1 = num3 ^ (int) num2 * -893935906;
              continue;
            case 5:
              current = enumerator.Current;
              num1 = 682020652;
              continue;
            default:
              goto label_10;
          }
        }
      }
label_10:
      return JSONClass.\u202D​‌‌​⁬‪⁮⁯‬‬⁯‮‌⁯‭‍‪⁯‍‪‪‪‬‎⁭⁮⁬⁬⁬⁮‪⁭‎⁫⁮⁮⁫‮‫‮(str, \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(4020144710U));
    }

    public override string ToString(string aPrefix)
    {
      string str = \u003CModule\u003E.\u206C⁭⁭⁪‫⁮‭‍⁮‏⁬‫⁬‎⁯⁭⁬​⁯‌‮‪‫‎⁫⁪​‏‌⁮⁯​⁫‮‌⁮‍‫‪⁭‮<string>(4019957184U);
      using (Dictionary<string, JSONNode>.Enumerator enumerator = this.m_Dict.GetEnumerator())
      {
label_8:
        int num1 = enumerator.MoveNext() ? 664317468 : (num1 = 1420420255);
        KeyValuePair<string, JSONNode> current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 171326362)) % 7U)
          {
            case 1:
              str = JSONClass.\u202D​‌‌​⁬‪⁮⁯‬‬⁯‮‌⁯‭‍‪⁯‍‪‪‪‬‎⁭⁮⁬⁬⁬⁮‪⁭‎⁫⁮⁮⁫‮‫‮(str, \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(726436792U));
              num1 = (int) num2 * 925427542 ^ 222696846;
              continue;
            case 2:
              num1 = 664317468;
              continue;
            case 3:
              current = enumerator.Current;
              num1 = 504592893;
              continue;
            case 4:
              str = JSONClass.\u206B⁪⁫‭‎‫‫‬‬‌⁬‫‭‮‮‫‮‎‍‮⁫‫‬⁪⁬‏‍⁮⁫⁪⁮‎‏⁪‪‎⁭⁫‏‮‮(str, \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(2578940573U), aPrefix, \u003CModule\u003E.\u200C‪⁪‎‏‍‬‬‪‮‎‮⁯⁯‮⁫⁪‬‭⁫​⁭​‏⁯⁬⁪⁮⁮⁯‬‭‏‌‏‭⁪⁪‍‮<string>(1184926500U));
              str = JSONClass.\u206D‫⁪​‪‏⁭‍⁫‮‌‌‍‮‮‎‌‍‪⁬‮‍‏⁭‮⁫⁯⁮‏‫⁪‭‌⁪‌⁮⁮⁯⁭‌‮(new string[5]
              {
                str,
                \u003CModule\u003E.\u200C​‏⁮‪⁪‍‍‎‎‌‎‎‫‌‬⁫⁮‮‌⁮‌‎⁭‮‌‌‬⁪⁬‭⁮‮‪⁭⁪‭‬‏‬‮<string>(2600585588U),
                JSONNode.Escape(current.Key),
                \u003CModule\u003E.\u200C​‏⁮‪⁪‍‍‎‎‌‎‎‫‌‬⁫⁮‮‌⁮‌‎⁭‮‌‌‬⁪⁬‭⁮‮‪⁭⁪‭‬‏‬‮<string>(28884524U),
                current.Value.ToString(JSONClass.\u202D​‌‌​⁬‪⁮⁯‬‬⁯‮‌⁯‭‍‪⁯‍‪‪‪‬‎⁭⁮⁬⁬⁬⁮‪⁭‎⁫⁮⁮⁫‮‫‮(aPrefix, \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(2850688944U)))
              });
              num1 = 563460818;
              continue;
            case 5:
              goto label_8;
            case 6:
              int num3 = JSONClass.\u202D‫⁬​⁫‏‫‪⁫‌⁬⁮⁫‮⁪​‌⁬‬‪‌‪​‎‫⁯‏⁮⁭‌⁯‍⁪‬‪‪‮‍‫⁯‮(str) > 3 ? 360718989 : (num3 = 897511812);
              num1 = num3 ^ (int) num2 * 18564016;
              continue;
            default:
              goto label_10;
          }
        }
      }
label_10:
      return JSONClass.\u206B⁪⁫‭‎‫‫‬‬‌⁬‫‭‮‮‫‮‎‍‮⁫‫‬⁪⁬‏‍⁮⁫⁪⁮‎‏⁪‪‎⁭⁫‏‮‮(str, \u003CModule\u003E.\u200C​‏⁮‪⁪‍‍‎‎‌‎‎‫‌‬⁫⁮‮‌⁮‌‎⁭‮‌‌‬⁪⁬‭⁮‮‪⁭⁪‭‬‏‬‮<string>(2723137797U), aPrefix, \u003CModule\u003E.\u200B⁫⁯⁫⁪‏‪⁯⁬‏‍‮‭⁯‎⁬‍⁫⁮⁪‌‮‏‬⁮‭⁮⁯⁬‭‎‍‪​⁭‎‬⁮⁮‎‮<string>(3247807994U));
    }

    public override void Serialize(BinaryWriter aWriter)
    {
      JSONClass.\u206B‎‏⁯‮⁯‫‬‮‬⁮‬‏⁫‏⁯⁫‭‌‫‏‭​‍‮‌⁪‌‭⁮‬⁯⁬⁫‭⁫⁯⁯‭‪‮(aWriter, (byte) 2);
      JSONClass.\u200B⁯‪‏​​​‪​⁪‏⁫‏⁬​‎⁪‭​⁭⁯​⁮‬‭⁮⁪‌⁮‭⁪⁪⁮⁬‫‏⁬‭‮‍‮(aWriter, this.m_Dict.Count);
      using (Dictionary<string, JSONNode>.KeyCollection.Enumerator enumerator = this.m_Dict.Keys.GetEnumerator())
      {
label_5:
        int num1 = !enumerator.MoveNext() ? -322406059 : (num1 = -712793018);
        string current;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -587509730)) % 5U)
          {
            case 0:
              goto label_8;
            case 1:
              current = enumerator.Current;
              JSONClass.\u200B‪‍⁭​‍⁯‎⁬⁮⁮⁯‏‎⁪‌‫‏‭‭‍⁮⁮⁪⁫⁫​⁬​‫⁪⁬⁫‪‬‬‫‬‫⁮‮(aWriter, current);
              num1 = -661424146;
              continue;
            case 2:
              this.m_Dict[current].Serialize(aWriter);
              num1 = (int) num2 * -1305423610 ^ 365286971;
              continue;
            case 3:
              goto label_5;
            case 4:
              num1 = -712793018;
              continue;
            default:
              goto label_4;
          }
        }
label_8:
        return;
label_4:;
      }
    }

    static bool \u206F⁮⁬⁫‌‭⁬‬⁯‮‫⁯⁬‪⁫​‬‮‌‎⁯⁫⁬⁬⁮‎⁭⁬⁮⁯‮‫‭⁫‬‫‏⁬⁭‮([In] string obj0) => string.IsNullOrEmpty(obj0);

    static int \u202D‫⁬​⁫‏‫‪⁫‌⁬⁮⁫‮⁪​‌⁬‬‪‌‪​‎‫⁯‏⁮⁭‌⁯‍⁪‬‪‪‮‍‫⁯‮([In] string obj0) => obj0.Length;

    static string \u202D​‌‌​⁬‪⁮⁯‬‬⁯‮‌⁯‭‍‪⁯‍‪‪‪‬‎⁭⁮⁬⁬⁬⁮‪⁭‎⁫⁮⁮⁫‮‫‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202B‏⁬‎‎⁪⁪⁬‮⁭‪⁫⁯‪⁯‏⁬‭⁯⁮‍‪‮⁬​⁬‬⁭‎‭⁭‪‪⁯​‏⁬‮‫‮‮([In] object obj0) => obj0.ToString();

    static string \u206D‫⁪​‪‏⁭‍⁫‮‌‌‍‮‮‎‌‍‪⁬‮‍‏⁭‮⁫⁯⁮‏‫⁪‭‌⁪‌⁮⁮⁯⁭‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u206B⁪⁫‭‎‫‫‬‬‌⁬‫‭‮‮‫‮‎‍‮⁫‫‬⁪⁬‏‍⁮⁫⁪⁮‎‏⁪‪‎⁭⁫‏‮‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2,
      [In] string obj3)
    {
      return obj0 + obj1 + obj2 + obj3;
    }

    static void \u206B‎‏⁯‮⁯‫‬‮‬⁮‬‏⁫‏⁯⁫‭‌‫‏‭​‍‮‌⁪‌‭⁮‬⁯⁬⁫‭⁫⁯⁯‭‪‮([In] BinaryWriter obj0, [In] byte obj1) => obj0.Write(obj1);

    static void \u200B⁯‪‏​​​‪​⁪‏⁫‏⁬​‎⁪‭​⁭⁯​⁮‬‭⁮⁪‌⁮‭⁪⁪⁮⁬‫‏⁬‭‮‍‮([In] BinaryWriter obj0, [In] int obj1) => obj0.Write(obj1);

    static void \u200B‪‍⁭​‍⁯‎⁬⁮⁮⁯‏‎⁪‌‫‏‭‭‍⁮⁮⁪⁫⁫​⁬​‫⁪⁬⁫‪‬‬‫‬‫⁮‮([In] BinaryWriter obj0, [In] string obj1) => obj0.Write(obj1);
  }
}
