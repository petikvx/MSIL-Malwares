// Decompiled with JetBrains decompiler
// Type: VenomRAT_HVNC.Server.Helper.CreateCertificate
// Assembly: VenomRAT_HVNC, Version=5.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 364FC72B-4DB8-403E-BB7F-732199A12380
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Alien.gen-666d190a7059c03b3572dd66e51b8232537a8650bbdcbfbe3f8335c830f3aeae.exe

using Org.BouncyCastle.Asn1;
using Org.BouncyCastle.Asn1.X509;
using Org.BouncyCastle.Crypto;
using Org.BouncyCastle.Crypto.Generators;
using Org.BouncyCastle.Crypto.Operators;
using Org.BouncyCastle.Crypto.Parameters;
using Org.BouncyCastle.Math;
using Org.BouncyCastle.Security;
using Org.BouncyCastle.X509;
using Org.BouncyCastle.X509.Extension;
using System;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;

namespace VenomRAT_HVNC.Server.Helper
{
  public static class CreateCertificate
  {
    public static X509Certificate2 CreateCertificateAuthority(
      string caName,
      int keyStrength)
    {
      SecureRandom secureRandom = new SecureRandom();
      RsaKeyPairGenerator keyPairGenerator = new RsaKeyPairGenerator();
      keyPairGenerator.Init(new KeyGenerationParameters(secureRandom, keyStrength));
      AsymmetricCipherKeyPair keyPair = keyPairGenerator.GenerateKeyPair();
      X509V3CertificateGenerator certificateGenerator = new X509V3CertificateGenerator();
      X509Name x509Name1 = new X509Name("CN=" + caName + ",OU=qwqdanchun,O=DcRat By qwqdanchun,L=SH,C=CN");
      X509Name x509Name2 = new X509Name("CN=DcRat");
      BigInteger bigInteger = BigInteger.ProbablePrime(160, (Random) new SecureRandom());
      certificateGenerator.SetSerialNumber(bigInteger);
      certificateGenerator.SetSubjectDN(x509Name2);
      certificateGenerator.SetIssuerDN(x509Name1);
      certificateGenerator.SetNotAfter(DateTime.UtcNow.Subtract(new TimeSpan(-3650, 0, 0, 0)));
      certificateGenerator.SetNotBefore(DateTime.UtcNow.Subtract(new TimeSpan(285, 0, 0, 0)));
      certificateGenerator.SetPublicKey(keyPair.Public);
      certificateGenerator.AddExtension(X509Extensions.SubjectKeyIdentifier, false, (Asn1Encodable) new SubjectKeyIdentifierStructure(keyPair.Public));
      certificateGenerator.AddExtension(X509Extensions.BasicConstraints, true, (Asn1Encodable) new BasicConstraints(true));
      ISignatureFactory isignatureFactory = (ISignatureFactory) new Asn1SignatureFactory("SHA512WITHRSA", keyPair.Private, secureRandom);
      return new X509Certificate2(DotNetUtilities.ToX509Certificate(certificateGenerator.Generate(isignatureFactory)))
      {
        PrivateKey = (AsymmetricAlgorithm) DotNetUtilities.ToRSA(keyPair.Private as RsaPrivateCrtKeyParameters)
      };
    }
  }
}
