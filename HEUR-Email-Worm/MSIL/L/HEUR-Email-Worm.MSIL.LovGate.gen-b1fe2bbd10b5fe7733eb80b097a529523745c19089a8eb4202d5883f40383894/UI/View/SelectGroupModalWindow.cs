// Decompiled with JetBrains decompiler
// Type: CiscoAnyconnectControl.UI.View.SelectGroupModalWindow
// Assembly: PermissionSetEntryFiel, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: FE7870A8-3D72-435A-B1B6-C43A7BD9D85D
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Email-Worm.MSIL.LovGate.gen-b1fe2bbd10b5fe7733eb80b097a529523745c19089a8eb4202d5883f40383894.exe

using CiscoAnyconnectControl.UI.Command;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Markup;

namespace CiscoAnyconnectControl.UI.View
{
  public class SelectGroupModalWindow : Window, IComponentConnector
  {
    private readonly ComboBox _cbGroups;
    internal ComboBox CbGroups;
    private bool _contentLoaded;

    public SelectGroupModalWindow(IEnumerable<string> options)
    {
      this.InitCommands();
      this.InitializeComponent();
      this._cbGroups = (ComboBox) this.FindName(nameof (CbGroups));
      if (this._cbGroups == null)
        throw new Exception("Error initializing window, CbGroups not found.");
      this._cbGroups.ItemsSource = (IEnumerable) options;
    }

    public SelectGroupModalWindow()
      : this((IEnumerable<string>) new List<string>()
      {
        "ExampleItem"
      })
    {
    }

    public string SelectedGroup { get; private set; }

    public int SelectedGroupIndex { get; private set; }

    private void InitCommands()
    {
      this.OkCommand = (ICommand) new RelayCommand((Func<bool>) (() => true), (Action) (() =>
      {
        this.DialogResult = new bool?(true);
        this.SelectedGroup = (string) this._cbGroups.SelectedItem;
        this.SelectedGroupIndex = this._cbGroups.SelectedIndex;
        this.Close();
      }));
      this.CancelCommand = (ICommand) new RelayCommand((Func<bool>) (() => true), (Action) (() =>
      {
        this.DialogResult = new bool?(false);
        this.SelectedGroup = (string) null;
        this.Close();
      }));
    }

    public ICommand OkCommand { get; set; }

    public ICommand CancelCommand { get; set; }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      Application.LoadComponent((object) this, new Uri("/PermissionSetEntryFiel;component/view/selectgroupmodalwindow.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      if (connectionId == 1)
        this.CbGroups = (ComboBox) target;
      else
        this._contentLoaded = true;
    }
  }
}
