// Decompiled with JetBrains decompiler
// Type: uypeog7.LcIcxyD
// Assembly: aO8BSlP, Version=2.0.0.0, Culture=neutral, PublicKeyToken=0a613f4dd989e8ae
// MVID: 26D80EA7-FF8D-466E-8999-D26AD81041E3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.DOTHETUK.gen-37c04e3821fcaedfc79bce018910dfdb141a491f2e2e18102353a3e3e74ebde6.exe

using \u0032KjROU9;
using SWswj9r;
using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace uypeog7
{
  internal sealed class LcIcxyD : IDisposable
  {
    private bool Zlem0f1;
    private byte[] m58xtSa;
    private static readonly LcIcxyD.SndPanC[] GJyXfV4 = new LcIcxyD.SndPanC[9]
    {
      null,
      null,
      (LcIcxyD.SndPanC) new AKWzGCu.fwtQuKk((object) null, __methodptr(lhtMQgI)),
      null,
      (LcIcxyD.SndPanC) new AKWzGCu.fwtQuKk((object) null, __methodptr(xs3Ey2I)),
      null,
      null,
      null,
      (LcIcxyD.SndPanC) new AKWzGCu.fwtQuKk((object) null, __methodptr(\u0035fNZ5TC))
    };
    private static Dictionary<Type, List<Tuple<int, TypeCode>>> \u00384dRyZB = new Dictionary<Type, List<Tuple<int, TypeCode>>>();

    public Stream ZkkXUWY { get; private set; }

    public QufvTHV VWRIlLZ { get; set; }

    public static QufvTHV cLUeAai => BitConverter.IsLittleEndian ? QufvTHV.LittleEndian : QufvTHV.BigEndian;

    private bool UjaUsyn => LcIcxyD.cLUeAai != this.VWRIlLZ;

    public LcIcxyD(Stream baseStream)
      : this(baseStream, QufvTHV.BigEndian)
    {
    }

    public LcIcxyD(Stream baseStream, QufvTHV endianness)
    {
      if (baseStream == null)
        throw new ArgumentNullException(nameof (baseStream));
      this.ZkkXUWY = baseStream.CanRead ? baseStream : throw new ArgumentException("base stream is not readable.", nameof (baseStream));
      this.VWRIlLZ = endianness;
    }

    ~LcIcxyD() => this.ShEhdka(false);

    private void dA1ADPB(int rpzRmZM, int ku0hIUe)
    {
      if (this.m58xtSa == null || this.m58xtSa.Length < rpzRmZM)
        this.m58xtSa = new byte[rpzRmZM];
      int offset = 0;
      int num;
      for (; offset < rpzRmZM; offset += num)
      {
        num = this.ZkkXUWY.Read(this.m58xtSa, offset, rpzRmZM - offset);
        if (num <= 0)
          throw new EndOfStreamException();
      }
      if (!this.UjaUsyn)
        return;
      if (LcIcxyD.GJyXfV4[ku0hIUe] != null)
      {
        LcIcxyD.GJyXfV4[ku0hIUe](this.m58xtSa, rpzRmZM);
      }
      else
      {
        for (int index = 0; index < rpzRmZM; index += ku0hIUe)
          Array.Reverse((Array) this.m58xtSa, index, ku0hIUe);
      }
    }

    private static void lhtMQgI(byte[] KOsbj5S, int yxqC9oL)
    {
      for (; yxqC9oL > 0; yxqC9oL -= 2)
      {
        byte num = KOsbj5S[yxqC9oL - 2];
        KOsbj5S[yxqC9oL - 2] = KOsbj5S[yxqC9oL - 1];
        KOsbj5S[yxqC9oL - 1] = num;
      }
    }

    private static void xs3Ey2I(byte[] WQ4oOEd, int _param1)
    {
      for (; _param1 > 0; _param1 -= 4)
      {
        byte num1 = WQ4oOEd[_param1 - 3];
        WQ4oOEd[_param1 - 3] = WQ4oOEd[_param1 - 2];
        WQ4oOEd[_param1 - 2] = num1;
        byte num2 = WQ4oOEd[_param1 - 4];
        WQ4oOEd[_param1 - 4] = WQ4oOEd[_param1 - 1];
        WQ4oOEd[_param1 - 1] = num2;
      }
    }

    private static void \u0035fNZ5TC(byte[] _param0, int U1RXO2O)
    {
      for (; U1RXO2O > 0; U1RXO2O -= 8)
      {
        byte num1 = _param0[U1RXO2O - 5];
        _param0[U1RXO2O - 5] = _param0[U1RXO2O - 4];
        _param0[U1RXO2O - 4] = num1;
        byte num2 = _param0[U1RXO2O - 6];
        _param0[U1RXO2O - 6] = _param0[U1RXO2O - 3];
        _param0[U1RXO2O - 3] = num2;
        byte num3 = _param0[U1RXO2O - 7];
        _param0[U1RXO2O - 7] = _param0[U1RXO2O - 2];
        _param0[U1RXO2O - 2] = num3;
        byte num4 = _param0[U1RXO2O - 8];
        _param0[U1RXO2O - 8] = _param0[U1RXO2O - 1];
        _param0[U1RXO2O - 1] = num4;
      }
    }

    public byte iHfcWtz()
    {
      this.dA1ADPB(1, 1);
      return this.m58xtSa[0];
    }

    public byte[] WdIDGkM(int PeJdi2J)
    {
      this.dA1ADPB(PeJdi2J, 1);
      byte[] destinationArray = new byte[PeJdi2J];
      Array.Copy((Array) this.m58xtSa, 0, (Array) destinationArray, 0, PeJdi2J);
      return destinationArray;
    }

    public sbyte zc6pECm()
    {
      this.dA1ADPB(1, 1);
      return (sbyte) this.m58xtSa[0];
    }

    public sbyte[] \u0033pV3zjm(int KLEV5EO)
    {
      sbyte[] numArray = new sbyte[KLEV5EO];
      this.dA1ADPB(KLEV5EO, 1);
      for (int index = 0; index < KLEV5EO; ++index)
        numArray[index] = (sbyte) this.m58xtSa[index];
      return numArray;
    }

    public char TwiepNI(Encoding wW6gNY8)
    {
      int num = wW6gNY8 != null ? LcIcxyD.vQ4uG3d(wW6gNY8) : throw new ArgumentNullException("encoding");
      this.dA1ADPB(num, num);
      return wW6gNY8.GetChars(this.m58xtSa, 0, num)[0];
    }

    public char[] f9dyLSs(Encoding hLp5OxC, int kH2FKr1)
    {
      int ku0hIUe = hLp5OxC != null ? LcIcxyD.vQ4uG3d(hLp5OxC) : throw new ArgumentNullException("encoding");
      this.dA1ADPB(ku0hIUe * kH2FKr1, ku0hIUe);
      return hLp5OxC.GetChars(this.m58xtSa, 0, ku0hIUe * kH2FKr1);
    }

    private static int vQ4uG3d(Encoding _param0) => _param0 == Encoding.UTF8 || _param0 == Encoding.ASCII || _param0 != Encoding.Unicode && _param0 != Encoding.BigEndianUnicode ? 1 : 2;

    public string jZysztr(Encoding y6d62zS)
    {
      string str = "";
      do
      {
        str += this.TwiepNI(y6d62zS).ToString();
      }
      while (!str.EndsWith("\0", StringComparison.Ordinal));
      return str.Remove(str.Length - 1);
    }

    public string SuPcc6b(Encoding oGkfVsh, int _param2) => new string(this.f9dyLSs(oGkfVsh, _param2));

    public double \u0038IM2KND()
    {
      this.dA1ADPB(8, 8);
      return BitConverter.ToDouble(this.m58xtSa, 0);
    }

    public double[] SpqZA7a(int XZu4GHn)
    {
      double[] numArray = new double[XZu4GHn];
      this.dA1ADPB(8 * XZu4GHn, 8);
      for (int index = 0; index < XZu4GHn; ++index)
        numArray[index] = BitConverter.ToDouble(this.m58xtSa, 8 * index);
      return numArray;
    }

    public float T6clEQW()
    {
      this.dA1ADPB(4, 4);
      return BitConverter.ToSingle(this.m58xtSa, 0);
    }

    public float[] rhSpai8(int pWi2USA)
    {
      float[] numArray = new float[pWi2USA];
      this.dA1ADPB(4 * pWi2USA, 4);
      for (int index = 0; index < pWi2USA; ++index)
        numArray[index] = BitConverter.ToSingle(this.m58xtSa, 4 * index);
      return numArray;
    }

    public int \u0035Mo00BO()
    {
      this.dA1ADPB(4, 4);
      return BitConverter.ToInt32(this.m58xtSa, 0);
    }

    public int[] lKsSkQt(int xtpOdsy)
    {
      int[] numArray = new int[xtpOdsy];
      this.dA1ADPB(4 * xtpOdsy, 4);
      for (int index = 0; index < xtpOdsy; ++index)
        numArray[index] = BitConverter.ToInt32(this.m58xtSa, 4 * index);
      return numArray;
    }

    public long vmPKovw()
    {
      this.dA1ADPB(8, 8);
      return BitConverter.ToInt64(this.m58xtSa, 0);
    }

    public long[] l1mjynz(int Pqc6Vo0)
    {
      long[] numArray = new long[Pqc6Vo0];
      this.dA1ADPB(8 * Pqc6Vo0, 8);
      for (int index = 0; index < Pqc6Vo0; ++index)
        numArray[index] = BitConverter.ToInt64(this.m58xtSa, 8 * index);
      return numArray;
    }

    public short VrtBwcP()
    {
      this.dA1ADPB(2, 2);
      return BitConverter.ToInt16(this.m58xtSa, 0);
    }

    public short[] jhSIH6l(int _param1)
    {
      short[] numArray = new short[_param1];
      this.dA1ADPB(2 * _param1, 2);
      for (int index = 0; index < _param1; ++index)
        numArray[index] = BitConverter.ToInt16(this.m58xtSa, 2 * index);
      return numArray;
    }

    public ushort vJczPHN()
    {
      this.dA1ADPB(2, 2);
      return BitConverter.ToUInt16(this.m58xtSa, 0);
    }

    public ushort[] VQcCvqV(int N67YpNE)
    {
      ushort[] numArray = new ushort[N67YpNE];
      this.dA1ADPB(2 * N67YpNE, 2);
      for (int index = 0; index < N67YpNE; ++index)
        numArray[index] = BitConverter.ToUInt16(this.m58xtSa, 2 * index);
      return numArray;
    }

    public uint mdiC0c4()
    {
      this.dA1ADPB(4, 4);
      return BitConverter.ToUInt32(this.m58xtSa, 0);
    }

    public uint[] za55efP(int Q6QQz03)
    {
      uint[] numArray = new uint[Q6QQz03];
      this.dA1ADPB(4 * Q6QQz03, 4);
      for (int index = 0; index < Q6QQz03; ++index)
        numArray[index] = BitConverter.ToUInt32(this.m58xtSa, 4 * index);
      return numArray;
    }

    public ulong \u0039TlkGZ4()
    {
      this.dA1ADPB(8, 8);
      return BitConverter.ToUInt64(this.m58xtSa, 0);
    }

    public ulong[] mKcGVUV(int _param1)
    {
      ulong[] numArray = new ulong[_param1];
      this.dA1ADPB(8 * _param1, 8);
      for (int index = 0; index < _param1; ++index)
        numArray[index] = BitConverter.ToUInt64(this.m58xtSa, 8 * index);
      return numArray;
    }

    private List<Tuple<int, TypeCode>> emFqsON(Type jNZOAoe)
    {
      List<Tuple<int, TypeCode>> tupleList;
      try
      {
        tupleList = LcIcxyD.\u00384dRyZB[jNZOAoe];
      }
      catch (KeyNotFoundException ex)
      {
        tupleList = new List<Tuple<int, TypeCode>>();
        if (this.VWRIlLZ != LcIcxyD.cLUeAai)
        {
          int num1 = 0;
          foreach (FieldInfo field in jNZOAoe.GetFields())
          {
            int int32 = Marshal.OffsetOf(jNZOAoe, field.Name).ToInt32();
            if (int32 != num1)
            {
              tupleList.Add(new Tuple<int, TypeCode>(int32 - num1, TypeCode.Empty));
              num1 = int32;
            }
            switch (Type.GetTypeCode(field.FieldType))
            {
              case TypeCode.Object:
                if (field.FieldType.IsArray)
                {
                  MarshalAsAttribute[] customAttributes = (MarshalAsAttribute[]) field.GetCustomAttributes(typeof (MarshalAsAttribute), false);
                  MarshalAsAttribute marshalAsAttribute = customAttributes.Length == 1 ? customAttributes[0] : throw new ArgumentException(string.Format("Field `{0}' is an array without a MarshalAs attribute.", (object) field.Name), "type");
                  if (marshalAsAttribute.Value != UnmanagedType.ByValArray)
                    throw new ArgumentException(string.Format("Field `{0}' is not a ByValArray.", (object) field.Name), "type");
                  Type elementType = field.FieldType.GetElementType();
                  switch (Type.GetTypeCode(elementType))
                  {
                    case TypeCode.Object:
                      for (int index = 0; index < marshalAsAttribute.SizeConst; ++index)
                      {
                        num1 += Marshal.SizeOf(elementType);
                        tupleList.AddRange((IEnumerable<Tuple<int, TypeCode>>) this.emFqsON(elementType));
                      }
                      continue;
                    case TypeCode.SByte:
                    case TypeCode.Byte:
                      num1 += marshalAsAttribute.SizeConst;
                      tupleList.Add(new Tuple<int, TypeCode>(marshalAsAttribute.SizeConst, Type.GetTypeCode(elementType)));
                      continue;
                    case TypeCode.Int16:
                    case TypeCode.UInt16:
                      num1 += 2 * marshalAsAttribute.SizeConst;
                      tupleList.Add(new Tuple<int, TypeCode>(marshalAsAttribute.SizeConst, Type.GetTypeCode(elementType)));
                      continue;
                    case TypeCode.Int32:
                    case TypeCode.UInt32:
                    case TypeCode.Single:
                      num1 += 4 * marshalAsAttribute.SizeConst;
                      tupleList.Add(new Tuple<int, TypeCode>(marshalAsAttribute.SizeConst, Type.GetTypeCode(elementType)));
                      continue;
                    case TypeCode.Int64:
                    case TypeCode.UInt64:
                    case TypeCode.Double:
                      num1 += 8 * marshalAsAttribute.SizeConst;
                      tupleList.Add(new Tuple<int, TypeCode>(marshalAsAttribute.SizeConst, Type.GetTypeCode(elementType)));
                      continue;
                    default:
                      continue;
                  }
                }
                else
                {
                  num1 += Marshal.SizeOf(field.FieldType);
                  tupleList.AddRange((IEnumerable<Tuple<int, TypeCode>>) this.emFqsON(field.FieldType));
                  break;
                }
              case TypeCode.SByte:
              case TypeCode.Byte:
                ++num1;
                tupleList.Add(new Tuple<int, TypeCode>(1, Type.GetTypeCode(field.FieldType)));
                break;
              case TypeCode.Int16:
              case TypeCode.UInt16:
                num1 += 2;
                tupleList.Add(new Tuple<int, TypeCode>(1, Type.GetTypeCode(field.FieldType)));
                break;
              case TypeCode.Int32:
              case TypeCode.UInt32:
              case TypeCode.Single:
                num1 += 4;
                tupleList.Add(new Tuple<int, TypeCode>(1, Type.GetTypeCode(field.FieldType)));
                break;
              case TypeCode.Int64:
              case TypeCode.UInt64:
              case TypeCode.Double:
                num1 += 8;
                tupleList.Add(new Tuple<int, TypeCode>(1, Type.GetTypeCode(field.FieldType)));
                break;
              default:
                throw new NotImplementedException();
            }
          }
          int num2 = Marshal.SizeOf(jNZOAoe);
          if (num2 != num1)
            tupleList.Add(new Tuple<int, TypeCode>(num2 - num1, TypeCode.Empty));
        }
        else
        {
          int num = Marshal.SizeOf(jNZOAoe);
          tupleList.Add(new Tuple<int, TypeCode>(num, TypeCode.Byte));
        }
        LcIcxyD.\u00384dRyZB.Add(jNZOAoe, tupleList);
      }
      return tupleList;
    }

    private void \u00397LtDw5(List<Tuple<int, TypeCode>> ZV2gnZA, BinaryWriter zHE40NF)
    {
      foreach (Tuple<int, TypeCode> tuple in ZV2gnZA)
      {
        switch (tuple.Item2)
        {
          case TypeCode.Empty:
            this.ZkkXUWY.Seek((long) tuple.Item1, SeekOrigin.Current);
            zHE40NF.BaseStream.Seek((long) tuple.Item1, SeekOrigin.Current);
            break;
          case TypeCode.SByte:
          case TypeCode.Byte:
            zHE40NF.Write(this.WdIDGkM(tuple.Item1), 0, tuple.Item1);
            break;
          case TypeCode.Int16:
          case TypeCode.UInt16:
            foreach (short num in this.jhSIH6l(tuple.Item1))
              zHE40NF.Write(num);
            break;
          case TypeCode.Int32:
          case TypeCode.UInt32:
          case TypeCode.Single:
            foreach (int num in this.lKsSkQt(tuple.Item1))
              zHE40NF.Write(num);
            break;
          case TypeCode.Int64:
          case TypeCode.UInt64:
          case TypeCode.Double:
            foreach (long num in this.l1mjynz(tuple.Item1))
              zHE40NF.Write(num);
            break;
          default:
            throw new NotImplementedException();
        }
      }
    }

    public object FoFF3wx(Type _param1)
    {
      object structure;
      using (MemoryStream output = new MemoryStream())
      {
        using (BinaryWriter zHE40NF = new BinaryWriter((Stream) output))
          this.\u00397LtDw5(this.emFqsON(_param1), zHE40NF);
        structure = Marshal.PtrToStructure(Marshal.UnsafeAddrOfPinnedArrayElement<byte>(output.ToArray(), 0), _param1);
      }
      return structure;
    }

    public Array \u0038WswvzX(Type PJ0edWz, int _param2)
    {
      List<Tuple<int, TypeCode>> ZV2gnZA = this.emFqsON(PJ0edWz);
      Array instance = Array.CreateInstance(PJ0edWz, _param2);
      using (MemoryStream output = new MemoryStream())
      {
        using (BinaryWriter zHE40NF = new BinaryWriter((Stream) output))
        {
          for (int index = 0; index < _param2; ++index)
          {
            output.Seek(0L, SeekOrigin.Begin);
            this.\u00397LtDw5(ZV2gnZA, zHE40NF);
            instance.SetValue(Marshal.PtrToStructure(Marshal.UnsafeAddrOfPinnedArrayElement<byte>(output.ToArray(), 0), PJ0edWz), index);
          }
        }
      }
      return instance;
    }

    public void k0vb9e5() => this.ZkkXUWY.Close();

    public void J43PO18()
    {
      this.ShEhdka(true);
      GC.SuppressFinalize((object) this);
    }

    private void ShEhdka(bool qrCUy03)
    {
      if (this.Zlem0f1)
        return;
      if (!qrCUy03)
        ;
      this.ZkkXUWY = (Stream) null;
      this.m58xtSa = (byte[]) null;
      this.Zlem0f1 = true;
    }

    private delegate void SndPanC(byte[] array, int count);
  }
}
