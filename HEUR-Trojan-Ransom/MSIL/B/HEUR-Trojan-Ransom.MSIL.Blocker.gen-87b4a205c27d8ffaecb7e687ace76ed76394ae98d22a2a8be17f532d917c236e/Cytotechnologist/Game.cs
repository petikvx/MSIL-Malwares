// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: ObjRefSurroga, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 1D36518F-5F0C-4DDD-80AA-3BF17FC6E8B1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-87b4a205c27d8ffaecb7e687ace76ed76394ae98d22a2a8be17f532d917c236e.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u202D‫⁬‪‬‮‌⁮⁪‏⁯‬‍⁯⁮‭‏‏⁮‏⁯⁪‍‪⁭‪‏‏‪‏⁯⁯‎​‌‫‍​‍⁫‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = -41394083;
        int index;
        bool finished1;
        bool finished2;
        PlayerState[] playerStates;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -539911546)) % 14U)
          {
            case 0:
              goto label_1;
            case 1:
              int num3 = !flag ? 1202544525 : (num3 = 579642128);
              num1 = num3 ^ (int) num2 * -2025108891;
              continue;
            case 2:
              ++index;
              num1 = -954342100;
              continue;
            case 3:
              finished1 = this._finished;
              num1 = (int) num2 * -77429170 ^ -718208973;
              continue;
            case 4:
              int num4;
              num1 = num4 = index < playerStates.Length ? -2137226830 : (num4 = -1056412590);
              continue;
            case 5:
              int num5 = finished1 ? 584847244 : (num5 = 350161295);
              num1 = num5 ^ (int) num2 * -2008220005;
              continue;
            case 7:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * 440201920 ^ 1537506867;
              continue;
            case 8:
              finished2 = true;
              num1 = (int) num2 * -96718581 ^ 131445166;
              continue;
            case 9:
              num1 = (int) num2 * 96803179 ^ 1263103691;
              continue;
            case 10:
              flag = playerStates[index].State == State.Playing;
              num1 = -1046568149;
              continue;
            case 11:
              finished2 = true;
              num1 = (int) num2 * 1049739349 ^ 728709369;
              continue;
            case 12:
              num1 = -2057423785;
              continue;
            case 13:
              finished2 = false;
              num1 = (int) num2 * -2080755918 ^ 92268620;
              continue;
            default:
              goto label_15;
          }
        }
label_15:
        return finished2;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = 207060768;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 398654481)) % 6U)
        {
          case 0:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * -1980404258 ^ -1866363244;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * -1730955633 ^ -547452480;
            continue;
          case 3:
            num1 = (int) num2 * -972480058 ^ 1369989419;
            continue;
          case 4:
            goto label_1;
          case 5:
            this.ShuffleCards();
            this.Winners.Clear();
            num1 = (int) num2 * -1507203811 ^ -335383094;
            continue;
          default:
            goto label_7;
        }
      }
label_7:
      this._finished = false;
      this._currentChanceIndex = -1;
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
label_1:
      int num1 = -924702243;
      int planningCardsCount;
      int num2;
      bool morePlanningSprint;
      PlayerState playerState;
      int index;
      bool flag1;
      bool flag2;
      Player player;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1299421659)) % 29U)
        {
          case 0:
            int num4 = !flag1 ? 853592637 : (num4 = 720709328);
            num1 = num4 ^ (int) num3 * -1899519394;
            continue;
          case 1:
            playerState.Sprint = 0;
            num1 = (int) num3 * -111366680 ^ -625761508;
            continue;
          case 2:
            playerState.Resources = this.Rules.InitialResources;
            num1 = (int) num3 * 915538332 ^ -2034180577;
            continue;
          case 3:
            morePlanningSprint = player.UseOneMorePlanningSprint;
            num1 = (int) num3 * 701198629 ^ -366259762;
            continue;
          case 4:
            playerState.State = State.Playing;
            num1 = (int) num3 * -563288739 ^ 1073124125;
            continue;
          case 5:
            num1 = -1251210475;
            continue;
          case 6:
            num1 = -1292543171;
            continue;
          case 7:
            playerState.Sprint = -1;
            num1 = (int) num3 * 1172149081 ^ 928796624;
            continue;
          case 8:
            int num5 = !flag2 ? -1191928017 : (num5 = -477356205);
            num1 = num5 ^ (int) num3 * 152088994;
            continue;
          case 9:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            num1 = -304807276;
            continue;
          case 10:
            flag2 = planningCardsCount == 0;
            num1 = (int) num3 * 230965979 ^ 1519251989;
            continue;
          case 11:
            num1 = (int) num3 * 454161293 ^ -1485426244;
            continue;
          case 12:
            flag1 = index < this.Players.Length;
            num1 = -1920136513;
            continue;
          case 13:
            goto label_3;
          case 14:
            goto label_1;
          case 15:
            num2 = 0;
            num1 = (int) num3 * -1784025928 ^ 911605342;
            continue;
          case 16:
            num2 = 0;
            num1 = -1596914646;
            continue;
          case 17:
            planningCardsCount = player.PlanningCardsCount;
            num1 = (int) num3 * -802910730 ^ 1099236788;
            continue;
          case 18:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -1852996386;
            continue;
          case 19:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * 862110731 ^ 678906079;
            continue;
          case 20:
            num1 = (int) num3 * -33347099 ^ -2086950603;
            continue;
          case 21:
            int num6;
            num1 = num6 = num2 > 0 ? -65205432 : (num6 = -583231575);
            continue;
          case 22:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1929145845 ^ -1079849190;
            continue;
          case 23:
            player = this.Players[index];
            playerState = this._playerStates[index];
            num1 = (int) num3 * 1872053221 ^ -1363435728;
            continue;
          case 24:
            ++index;
            num1 = (int) num3 * -1484557850 ^ -403203886;
            continue;
          case 25:
            num1 = (int) num3 * -233717246 ^ 1173675082;
            continue;
          case 26:
            index = 0;
            num1 = (int) num3 * -1746335376 ^ 1342617336;
            continue;
          case 27:
            int num7 = !morePlanningSprint ? -318294490 : (num7 = -2071608874);
            num1 = num7 ^ (int) num3 * 1391985464;
            continue;
          case 28:
            playerState.Sprint = 1;
            num1 = (int) num3 * 1135777250 ^ 1411274261;
            continue;
          default:
            goto label_31;
        }
      }
label_3:
      return;
label_31:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 1660668604;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 581625121)) % 12U)
        {
          case 0:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            this.Print((object) Game.\u200E⁬‪⁫⁫​⁭‬‏⁯‫‬‮‏‎‫⁪‫‎⁭⁬‏‌‏‪‍‬‍‌⁪‮‬‏‮‮‮‎‏⁮‬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1342251175 ^ 1496284765;
            continue;
          case 1:
            int num3 = this._currentPlayer < this.Players.Length ? -776960881 : (num3 = -1989791346);
            num1 = num3 ^ (int) num2 * 1800620982;
            continue;
          case 2:
            num1 = (int) num2 * -2139895301 ^ -936584379;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -1385841773 ^ -1214483527;
            continue;
          case 5:
            num1 = (int) num2 * 333883027 ^ 929695984;
            continue;
          case 6:
            goto label_3;
          case 7:
            num1 = (int) num2 * -1378064668 ^ -1419385855;
            continue;
          case 8:
            this.PlayerTurn(this._currentPlayer);
            num1 = 274679667;
            continue;
          case 9:
            this.Print((object) Game.\u202D⁯‪‏​‍‏⁪‮‍⁮⁫‌‪‌⁭‌‪‬​⁪‎‮⁭‫⁪⁮⁪‏​⁯⁯‭‬​⁯‭‍⁯‬‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 805783878;
            continue;
          case 10:
            this._currentPlayer = 0;
            int num4 = this._currentTurn <= 0 ? 491423924 : (num4 = 348156178);
            num1 = num4 ^ (int) num2 * -710179768;
            continue;
          case 11:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * -1151996492 ^ -1492741320;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    private void PlayerTurn(int playerIndex)
    {
      Player player = this.Players[playerIndex];
      PlayerState playerState1 = this._playerStates[playerIndex];
      this.Print((object) Game.\u200E⁬‪⁫⁫​⁭‬‏⁯‫‬‮‏‎‫⁪‫‎⁭⁬‏‌‏‪‍‬‍‌⁪‮‬‏‮‮‮‎‏⁮‬‮("\nPLAYER ", playerIndex.ToString()));
label_1:
      int num1 = -2028213885;
      while (true)
      {
        uint num2;
        int num3;
        bool flag1;
        Card card;
        bool flag2;
        bool flag3;
        bool onlyOneWinner;
        int num4;
        int num5;
        bool flag4;
        bool flag5;
        bool flag6;
        PlayerState playerState2;
        int index;
        bool flag7;
        bool flag8;
        bool flag9;
        bool flag10;
        bool flag11;
        int num6;
        switch ((num2 = (uint) (num1 ^ -2001806980)) % 82U)
        {
          case 0:
            num1 = -333657635;
            continue;
          case 1:
            num1 = (int) num2 * 1655579718 ^ -829483844;
            continue;
          case 2:
            num1 = -820622408;
            continue;
          case 3:
            num1 = (int) num2 * 730069911 ^ 1804676394;
            continue;
          case 4:
            num1 = -2034231048;
            continue;
          case 5:
            num1 = (int) num2 * 811318179 ^ 1880913527;
            continue;
          case 6:
            playerState2.Resources -= Game.\u206A‍⁫‎‬‭‎⁫⁪‬⁯​‬⁮⁬‌‪‎‌‍‪‮​‪⁭⁫‏‌‪⁭​‫⁪‬⁫‪​‎⁯‬‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            flag11 = playerState2.Resources >= 0;
            num1 = (int) num2 * -1817453734 ^ 1308061846;
            continue;
          case 7:
            num1 = (int) num2 * 1600535229 ^ -126459305;
            continue;
          case 8:
            card = this.DrawCard();
            flag2 = card.Impact < 0;
            num1 = -1183914988;
            continue;
          case 9:
            num1 = (int) num2 * -1700404759 ^ 1634659953;
            continue;
          case 10:
            int num7 = flag10 ? 629379420 : (num7 = 820590773);
            num1 = num7 ^ (int) num2 * -355175936;
            continue;
          case 11:
            flag8 = !this.Losers.Contains(num5);
            num1 = -879242380;
            continue;
          case 12:
            playerState2.State = State.Lose;
            int num8;
            num1 = num8 = this.Losers.Contains(index) ? -439573883 : (num8 = -1509948962);
            continue;
          case 13:
            ++index;
            num1 = -1005233444;
            continue;
          case 14:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -2019199907 ^ 2066032589;
            continue;
          case 15:
            int num9;
            num1 = num9 = !this._dice.Roll(this._chances[this._currentChanceIndex]) ? -1890645501 : (num9 = -2066518594);
            continue;
          case 16:
            playerState1.State = State.Lose;
            num1 = (int) num2 * -2058101852 ^ 1226030851;
            continue;
          case 17:
            int num10;
            num1 = num10 = playerState1.Sprint >= 0 ? -1331669629 : (num10 = -1658943539);
            continue;
          case 18:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u200E⁬‪⁫⁫​⁭‬‏⁯‫‬‮‏‎‫⁪‫‎⁭⁬‏‌‏‪‍‬‍‌⁪‮‬‏‮‮‮‎‏⁮‬‮("\t", playerState3 != null ? Game.\u200F⁮⁮‭‏​‏⁮‪‪‬‌‏‪‪‎​​⁮⁫​‍‎‮​‭‎‪‪⁬‪⁮⁪‎‍​‌‪⁯‬‮((object) playerState3) : (string) null));
            num1 = -1408422844;
            continue;
          case 19:
            this.Losers.Add(num5);
            num1 = (int) num2 * -315392364 ^ 1069147372;
            continue;
          case 20:
            ++num5;
            num1 = -184816184;
            continue;
          case 21:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag4 ? (object) "ALL " : (object) "", flag2 ? (object) "receives" : (object) "pays", (object) Game.\u206E‌‭‬⁭‏‬‎⁭⁮‍‫⁪⁯⁫⁬⁬⁪‎⁪⁭⁬‌‌‫⁭‍‬‎⁮⁪‭⁪⁭‪⁪‍‮​‌‮(num3), flag1 ? (object) "advance" : (object) "stay");
            num1 = -1680601602;
            continue;
          case 22:
            int num11 = !flag9 ? -138607368 : (num11 = -1352169677);
            num1 = num11 ^ (int) num2 * 886485746;
            continue;
          case 23:
            playerState1.Resources -= num3;
            num1 = (int) num2 * 2066964763 ^ 1932073330;
            continue;
          case 24:
            num1 = (int) num2 * -1818163208 ^ 1162605401;
            continue;
          case 25:
            index = 0;
            num1 = -150874149;
            continue;
          case 26:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -785148101 ^ -2054649030;
            continue;
          case 27:
            int num12 = !flag7 ? 119151986 : (num12 = 753674899);
            num1 = num12 ^ (int) num2 * -405328193;
            continue;
          case 28:
            num1 = (int) num2 * -1005156715 ^ 625497125;
            continue;
          case 29:
            num1 = (int) num2 * -393499145 ^ 913729458;
            continue;
          case 30:
            goto label_3;
          case 31:
            num1 = -1116078748;
            continue;
          case 32:
            flag5 = num5 < this._playerStates.Length;
            num1 = -488966241;
            continue;
          case 33:
            num1 = (int) num2 * -1430755117 ^ -164037176;
            continue;
          case 34:
            if (this.Rules.EconomicsAffectsAll)
            {
              num1 = (int) num2 * 938555672 ^ 12446053;
              continue;
            }
            num6 = 0;
            break;
          case 35:
            flag9 = playerState1.Sprint > this.Rules.SprintCount;
            num1 = -753359678;
            continue;
          case 36:
            flag6 = flag1;
            num1 = -1034923186;
            continue;
          case 37:
            int num13 = this.Losers.Contains(playerIndex) ? 1504391030 : (num13 = 1830289540);
            num1 = num13 ^ (int) num2 * -1194968694;
            continue;
          case 38:
            int num14 = flag11 ? 1139955378 : (num14 = 870943332);
            num1 = num14 ^ (int) num2 * -2086490466;
            continue;
          case 39:
            int num15 = onlyOneWinner ? -1711169717 : (num15 = -648739185);
            num1 = num15 ^ (int) num2 * 494460748;
            continue;
          case 40:
            this.Losers.Add(index);
            num1 = (int) num2 * -1927723178 ^ 1235860867;
            continue;
          case 41:
            flag1 = true;
            num3 = card.Impact;
            num1 = (int) num2 * -464920694 ^ 1579892060;
            continue;
          case 42:
            flag1 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -1753659366 ^ 206159361;
            continue;
          case 43:
            int num16 = !flag5 ? -686384682 : (num16 = -33555717);
            num1 = num16 ^ (int) num2 * 570168781;
            continue;
          case 44:
            flag1 = false;
            num1 = -1903232776;
            continue;
          case 45:
            num3 = Game.\u206A‍⁫‎‬‭‎⁫⁪‬⁯​‬⁮⁬‌‪‎‌‍‪‮​‪⁭⁫‏‌‪⁭​‫⁪‬⁫‪​‎⁯‬‮(0, num4);
            num1 = (int) num2 * 59830086 ^ -831372096;
            continue;
          case 46:
            goto label_1;
          case 47:
            num1 = (int) num2 * -1478646012 ^ 1397130697;
            continue;
          case 48:
            playerState1.State = State.Won;
            num1 = (int) num2 * -408263240 ^ -830576065;
            continue;
          case 49:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1935453613 ^ -439980601;
            continue;
          case 50:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * -1121324818 ^ 782977465;
            continue;
          case 51:
            int num17 = playerState1.State == 0 ? 585341584 : (num17 = 1678406069);
            num1 = num17 ^ (int) num2 * -1635440517;
            continue;
          case 52:
            int num18 = !flag6 ? -1007610781 : (num18 = -631765551);
            num1 = num18 ^ (int) num2 * 1429569282;
            continue;
          case 53:
            num1 = (int) num2 * 583320301 ^ 565327341;
            continue;
          case 54:
            num1 = (int) num2 * 1436910142 ^ -1588316771;
            continue;
          case 55:
            ++playerState1.Sprint;
            num1 = (int) num2 * -837847340 ^ -1951182221;
            continue;
          case 56:
            int num19;
            num1 = num19 = num5 != playerIndex ? -776735689 : (num19 = -1938725083);
            continue;
          case 57:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 58:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 935733714 ^ -1285416045;
            continue;
          case 59:
            num1 = (int) num2 * 2062222707 ^ 1794204268;
            continue;
          case 60:
            num1 = (int) num2 * -19560223 ^ 1886038911;
            continue;
          case 61:
            int num20 = playerState1.Resources < 0 ? 1766774307 : (num20 = 1966346497);
            num1 = num20 ^ (int) num2 * 1026767607;
            continue;
          case 62:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            num1 = (int) num2 * -944186627 ^ -1348157202;
            continue;
          case 63:
            num1 = -1633942396;
            continue;
          case 64:
            num1 = (int) num2 * -186577635 ^ 1169920499;
            continue;
          case 65:
            this._finished = true;
            num5 = 0;
            num1 = (int) num2 * 2623439 ^ -1067892033;
            continue;
          case 66:
            flag10 = index < this._playerStates.Length;
            num1 = -273196994;
            continue;
          case 67:
            num1 = -593900183;
            continue;
          case 68:
            num1 = (int) num2 * 1253913178 ^ -706669378;
            continue;
          case 69:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 2031714724 ^ 76583556;
            continue;
          case 70:
            num1 = (int) num2 * 57467909 ^ 667752307;
            continue;
          case 71:
            num1 = (int) num2 * 259598974 ^ 1010058918;
            continue;
          case 72:
            int num21 = flag3 ? -1491683801 : (num21 = -274155696);
            num1 = num21 ^ (int) num2 * -1172288235;
            continue;
          case 73:
            flag3 = !flag2;
            num1 = (int) num2 * -1752887546 ^ 1655492198;
            continue;
          case 74:
            int num22 = !flag8 ? 130987739 : (num22 = 166262605);
            num1 = num22 ^ (int) num2 * 409042604;
            continue;
          case 75:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1114382157 ^ -1772913295;
            continue;
          case 76:
            flag7 = !flag4;
            num1 = (int) num2 * -1870052389 ^ 296058321;
            continue;
          case 77:
            num1 = (int) num2 * -1877712871 ^ -155822957;
            continue;
          case 78:
            num1 = -1255249828;
            continue;
          case 79:
            num1 = (int) num2 * -907754327 ^ -111638370;
            continue;
          case 80:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * -1478584775 ^ 525222146;
            continue;
          case 81:
            num1 = (int) num2 * 1435785924 ^ 1647379104;
            continue;
          default:
            goto label_87;
        }
        flag4 = num6 != 0;
        num1 = -584147453;
      }
label_3:
      return;
label_87:;
    }

    private Card DrawCard()
    {
label_1:
      int num1 = -1685878620;
      bool flag;
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -68101623)) % 10U)
        {
          case 0:
            int num3 = flag ? 759730664 : (num3 = 1819860769);
            num1 = num3 ^ (int) num2 * -1385495611;
            continue;
          case 1:
            flag = this._deck.Count <= 0;
            num1 = (int) num2 * 1603597295 ^ 460260704;
            continue;
          case 2:
            card2 = card1;
            num1 = (int) num2 * 269852278 ^ -1471699544;
            continue;
          case 3:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * 1770092409 ^ 365330734;
            continue;
          case 4:
            num1 = (int) num2 * -799113608 ^ -59120491;
            continue;
          case 5:
            num1 = (int) num2 * -1177547190 ^ 154345341;
            continue;
          case 6:
            card1 = this._deck[0];
            num1 = -1591491636;
            continue;
          case 8:
            goto label_1;
          case 9:
            this.ShuffleCards();
            num1 = (int) num2 * 1137971268 ^ 1488754014;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return card2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = -462592164;
      int index;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -351789393)) % 10U)
        {
          case 0:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u200F⁮⁮‭‏​‏⁮‪‪‬‌‏‪‪‎​​⁮⁫​‍‎‮​‭‎‪‪⁬‪⁮⁪‎‍​‌‪⁯‬‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200B‮‪⁭​⁪⁫‫‍‏‫⁫‎‬‪‬⁮⁪⁫‏⁮‫⁮⁯‏⁮‭‏‍​⁬⁭‏‎⁫⁭​⁪⁬‮(strArray);
            num1 = -151085043;
            continue;
          case 1:
            flag = index < this._playerStates.Length;
            num1 = -11110593;
            continue;
          case 2:
            ++index;
            num1 = (int) num2 * -1776010609 ^ -706959960;
            continue;
          case 3:
            index = 0;
            num1 = (int) num2 * 1151458877 ^ 2035510837;
            continue;
          case 4:
            goto label_1;
          case 5:
            str1 = "";
            num1 = (int) num2 * 1874694666 ^ 901202766;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * -1002580036 ^ -1946222282;
            continue;
          case 8:
            int num3 = flag ? 1030559785 : (num3 = 1273543213);
            num1 = num3 ^ (int) num2 * -1217909891;
            continue;
          case 9:
            num1 = (int) num2 * -107176647 ^ -1104716101;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1419147908;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1145129501)) % 4U)
        {
          case 1:
            str = this.ToString(false);
            num1 = (int) num2 * 1211005901 ^ -1636832445;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * 974424810 ^ 1038189999;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 59435092;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 896491277)) % 4U)
        {
          case 0:
            Game.\u202C⁪‍‫⁪‫​⁯‍‏‫⁮‪‎‪⁪​⁫‏‬⁫‮⁭‏​‬‏⁮⁫‭‏⁬‍‍⁭⁮‭‮​‬‮(this._buffer, str);
            num1 = (int) num2 * 203614119 ^ -384016537;
            continue;
          case 1:
            str = Game.\u202B‭‮‎⁬‌⁪⁫‎⁬‍‍‌‭‏⁯‍⁪‍‮⁭⁯⁪‫⁯‌⁬​‬⁯⁯⁫⁮‪⁭​‎‌⁭‏‮(Game.\u200F⁮⁮‭‏​‏⁮‪‪‬‌‏‪‪‎​​⁮⁫​‍‎‮​‭‎‪‪⁬‪⁮⁪‎‍​‌‪⁯‬‮(text), more);
            num1 = (int) num2 * 1864641663 ^ 1826847226;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u202D‫⁬‪‬‮‌⁮⁪‏⁯‬‍⁯⁮‭‏‏⁮‏⁯⁪‍‪⁭‪‏‏‪‏⁯⁯‎​‌‫‍​‍⁫‮([In] int obj0) => new Random(obj0);

    static string \u202D⁯‪‏​‍‏⁪‮‍⁮⁫‌‪‌⁭‌‪‬​⁪‎‮⁭‫⁪⁮⁪‏​⁯⁯‭‬​⁯‭‍⁯‬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u200E⁬‪⁫⁫​⁭‬‏⁯‫‬‮‏‎‫⁪‫‎⁭⁬‏‌‏‪‍‬‍‌⁪‮‬‏‮‮‮‎‏⁮‬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206A‍⁫‎‬‭‎⁫⁪‬⁯​‬⁮⁬‌‪‎‌‍‪‮​‪⁭⁫‏‌‪⁭​‫⁪‬⁫‪​‎⁯‬‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u206E‌‭‬⁭‏‬‎⁭⁮‍‫⁪⁯⁫⁬⁬⁪‎⁪⁭⁬‌‌‫⁭‍‬‎⁮⁪‭⁪⁭‪⁪‍‮​‌‮([In] int obj0) => Math.Abs(obj0);

    static string \u200F⁮⁮‭‏​‏⁮‪‪‬‌‏‪‪‎​​⁮⁫​‍‎‮​‭‎‪‪⁬‪⁮⁪‎‍​‌‪⁯‬‮([In] object obj0) => obj0.ToString();

    static string \u200B‮‪⁭​⁪⁫‫‍‏‫⁫‎‬‪‬⁮⁪⁫‏⁮‫⁮⁯‏⁮‭‏‍​⁬⁭‏‎⁫⁭​⁪⁬‮([In] string[] obj0) => string.Concat(obj0);

    static string \u202B‭‮‎⁬‌⁪⁫‎⁬‍‍‌‭‏⁯‍⁪‍‮⁭⁯⁪‫⁯‌⁬​‬⁯⁯⁫⁮‪⁭​‎‌⁭‏‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202C⁪‍‫⁪‫​⁯‍‏‫⁮‪‎‪⁪​⁫‏‬⁫‮⁭‏​‬‏⁮⁫‭‏⁬‍‍⁭⁮‭‮​‬‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
