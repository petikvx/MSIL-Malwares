// Decompiled with JetBrains decompiler
// Type: _7Wonders.AgeDeck
// Assembly: No, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A0F00D95-9767-4554-B865-5A1BEBFA378F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan.MSIL.Taskun.am-5fabf5c9fcceb520d7023eaf53122959f42bdb4b1c82bc916baa4bbb94f787ae.exe

using System;

namespace _7Wonders
{
  internal class AgeDeck
  {
    public Card[] theDeck;
    private int nPlayers;
    private int version;

    public AgeDeck(int nP, int v, int age)
    {
      this.nPlayers = nP;
      this.version = v;
      this.theDeck = new Card[this.nPlayers * (this.version <= 1 ? 7 : 8)];
      switch (age)
      {
        case 1:
          this.InitializeAge1();
          break;
        case 2:
          this.InitializeAge2();
          break;
        case 3:
          this.InitializeAge3();
          break;
      }
      this.Shuffle(this.theDeck);
    }

    private void InitializeAge1()
    {
      switch (this.nPlayers)
      {
        case 3:
          this.theDeck[0] = new Card("Brown", "Lumber Yard", "", new int[8], 1, 0, "Wood");
          this.theDeck[1] = new Card("Brown", "Clay Pool", "", new int[8], 2, 0, "Clay");
          this.theDeck[2] = new Card("Brown", "Stone Pit", "", new int[8], 3, 0, "Stone");
          this.theDeck[3] = new Card("Brown", "Ore Vein", "", new int[8], 4, 0, "Ore");
          Card[] theDeck1 = this.theDeck;
          int[] ct1 = new int[8];
          ct1[0] = 1;
          Card card1 = new Card("Brown", "Clay Pit", "", ct1, 5, 0, "Clay/Ore");
          theDeck1[4] = card1;
          Card[] theDeck2 = this.theDeck;
          int[] ct2 = new int[8];
          ct2[0] = 1;
          Card card2 = new Card("Brown", "Timber Yard", "", ct2, 6, 0, "Stone/Wood");
          theDeck2[5] = card2;
          this.theDeck[6] = new Card("Grey", "Loom", "", new int[8], 7, 0, "Silk");
          this.theDeck[7] = new Card("Grey", "Glassworks", "", new int[8], 8, 0, "Glass");
          this.theDeck[8] = new Card("Grey", "Press", "", new int[8], 9, 0, "Papyrus");
          Card[] theDeck3 = this.theDeck;
          int[] ct3 = new int[8];
          ct3[3] = 1;
          Card card3 = new Card("Blue", "Baths", "", ct3, 0, 3, "3p, leads to Aqueduct");
          theDeck3[9] = card3;
          this.theDeck[10] = new Card("Blue", "Altar", "", new int[8], 0, 2, "2p, leads to Temple");
          this.theDeck[11] = new Card("Blue", "Theatre", "", new int[8], 0, 2, "2p, leads to Statue");
          this.theDeck[12] = new Card("Yellow", "West Trading Post", "", new int[8], 10, 0, "1 coin discount on purchases of basic resources from your left neighbour, leads to Forum");
          this.theDeck[13] = new Card("Yellow", "East Trading Post", "", new int[8], 11, 0, "1 coin discount on purchases of basic resources from your right neighbour, leads to Forum");
          this.theDeck[14] = new Card("Yellow", "Marketplace", "", new int[8], 12, 0, "1 coin discount on purchases of luxury resources from neighbours, leads to Caravansery");
          Card[] theDeck4 = this.theDeck;
          int[] ct4 = new int[8];
          ct4[4] = 1;
          Card card4 = new Card("Red", "Stockade", "", ct4, 13, 0, "1 shield");
          theDeck4[15] = card4;
          Card[] theDeck5 = this.theDeck;
          int[] ct5 = new int[8];
          ct5[2] = 1;
          Card card5 = new Card("Red", "Barracks", "", ct5, 13, 0, "1 shield");
          theDeck5[16] = card5;
          Card[] theDeck6 = this.theDeck;
          int[] ct6 = new int[8];
          ct6[1] = 1;
          Card card6 = new Card("Red", "Guard Tower", "", ct6, 13, 0, "1 shield");
          theDeck6[17] = card6;
          Card[] theDeck7 = this.theDeck;
          int[] ct7 = new int[8];
          ct7[7] = 1;
          Card card7 = new Card("Green", "Apothecary", "", ct7, 0, 10, 1, "1 Compass, leads to Stables and Dispensary");
          theDeck7[18] = card7;
          Card[] theDeck8 = this.theDeck;
          int[] ct8 = new int[8];
          ct8[5] = 1;
          Card card8 = new Card("Green", "Workshop", "", ct8, 0, 10, 2, "1 Gear, leads to Archery Range and Laboratory");
          theDeck8[19] = card8;
          Card[] theDeck9 = this.theDeck;
          int[] ct9 = new int[8];
          ct9[6] = 1;
          Card card9 = new Card("Green", "Scriptorium", "", ct9, 0, 10, 3, "1 Tablet, leads to Courthouse and Library");
          theDeck9[20] = card9;
          break;
        case 4:
          Card[] theDeck10 = this.theDeck;
          int[] ct10 = new int[8];
          ct10[0] = 1;
          Card card10 = new Card("Brown", "Excavation", "", ct10, 14, 0, "Clay/Stone");
          theDeck10[21] = card10;
          this.theDeck[22] = new Card("Brown", "Lumber Yard", "", new int[8], 1, 0, "Wood");
          this.theDeck[23] = new Card("Brown", "Ore Vein", "", new int[8], 4, 0, "Ore");
          this.theDeck[24] = new Card("Blue", "Pawnshop", "", new int[8], 0, 3, "3p");
          this.theDeck[25] = new Card("Yellow", "Tavern", "", new int[8], 0, 15, "Gain 5 coins");
          Card[] theDeck11 = this.theDeck;
          int[] ct11 = new int[8];
          ct11[1] = 1;
          Card card11 = new Card("Red", "Guard Tower", "", ct11, 13, 0, "1 shield");
          theDeck11[26] = card11;
          Card[] theDeck12 = this.theDeck;
          int[] ct12 = new int[8];
          ct12[6] = 1;
          Card card12 = new Card("Green", "Scriptorium", "", ct12, 0, 10, 3, "1 Tablet, leads to Courthouse and Library");
          theDeck12[27] = card12;
          goto case 3;
        case 5:
          this.theDeck[28] = new Card("Brown", "Clay Pool", "", new int[8], 2, 0, "Clay");
          this.theDeck[29] = new Card("Brown", "Stone Pit", "", new int[8], 3, 0, "Stone");
          Card[] theDeck13 = this.theDeck;
          int[] ct13 = new int[8];
          ct13[0] = 1;
          Card card13 = new Card("Brown", "Forest Cave", "", ct13, 16, 0, "Ore/Wood");
          theDeck13[30] = card13;
          this.theDeck[31] = new Card("Blue", "Altar", "", new int[8], 0, 2, "2p, leads to Temple");
          this.theDeck[32] = new Card("Yellow", "Tavern", "", new int[8], 0, 15, "Gain 5 coins");
          Card[] theDeck14 = this.theDeck;
          int[] ct14 = new int[8];
          ct14[2] = 1;
          Card card14 = new Card("Red", "Barracks", "", ct14, 13, 0, "1 shield");
          theDeck14[33] = card14;
          Card[] theDeck15 = this.theDeck;
          int[] ct15 = new int[8];
          ct15[7] = 1;
          Card card15 = new Card("Green", "Apothecary", "", ct15, 0, 10, 1, "1 Compass, leads to Stables and Dispensary");
          theDeck15[34] = card15;
          goto case 4;
        case 6:
          Card[] theDeck16 = this.theDeck;
          int[] ct16 = new int[8];
          ct16[0] = 1;
          Card card16 = new Card("Brown", "Tree Farm", "", ct16, 17, 0, "Clay/Wood");
          theDeck16[35] = card16;
          Card[] theDeck17 = this.theDeck;
          int[] ct17 = new int[8];
          ct17[0] = 1;
          Card card17 = new Card("Brown", "Mine", "", ct17, 18, 0, "Ore/Stone");
          theDeck17[36] = card17;
          this.theDeck[37] = new Card("Grey", "Loom", "", new int[8], 7, 0, "Silk");
          this.theDeck[38] = new Card("Grey", "Glassworks", "", new int[8], 8, 0, "Glass");
          this.theDeck[39] = new Card("Grey", "Press", "", new int[8], 9, 0, "Papyrus");
          this.theDeck[40] = new Card("Blue", "Theatre", "", new int[8], 0, 2, "2p, leads to Statue");
          this.theDeck[41] = new Card("Yellow", "Marketplace", "", new int[8], 12, 0, "1 coin discount on purchases of luxury resources from neighbours, leads to Caravansery");
          goto case 5;
        case 7:
          Card[] theDeck18 = this.theDeck;
          int[] ct18 = new int[8];
          ct18[3] = 1;
          Card card18 = new Card("Blue", "Baths", "", ct18, 0, 3, "3p, leads to Aqueduct");
          theDeck18[42] = card18;
          this.theDeck[43] = new Card("Blue", "Pawnshop", "", new int[8], 0, 3, "3p");
          this.theDeck[44] = new Card("Yellow", "West Trading Post", "", new int[8], 10, 0, "1 coin discount on purchases of basic resources from your left neighbour, leads to Forum");
          this.theDeck[45] = new Card("Yellow", "East Trading Post", "", new int[8], 11, 0, "1 coin discount on purchases of basic resources from your right neighbour, leada to Forum");
          this.theDeck[46] = new Card("Yellow", "Tavern", "", new int[8], 0, 15, "Gain 5 coins");
          Card[] theDeck19 = this.theDeck;
          int[] ct19 = new int[8];
          ct19[4] = 1;
          Card card19 = new Card("Red", "Stockade", "", ct19, 13, 0, "1 shield");
          theDeck19[47] = card19;
          Card[] theDeck20 = this.theDeck;
          int[] ct20 = new int[8];
          ct20[5] = 1;
          Card card20 = new Card("Green", "Workshop", "", ct20, 0, 10, 2, "1 Gear, leads to Archery Range and Laboratory");
          theDeck20[48] = card20;
          goto case 6;
      }
      if (this.version < 2)
        return;
      Card[] theDeck21 = new BlackDeck(1).theDeck;
      this.Shuffle(theDeck21);
      int num = this.nPlayers * 7;
      for (int index = 0; index < this.nPlayers; ++index)
        this.theDeck[num + index] = theDeck21[index];
    }

    private void InitializeAge2()
    {
      switch (this.nPlayers)
      {
        case 3:
          Card[] theDeck1 = this.theDeck;
          int[] ct1 = new int[8];
          ct1[0] = 1;
          Card card1 = new Card("Brown", "Sawmill", "", ct1, 19, 0, "2 Wood");
          theDeck1[0] = card1;
          Card[] theDeck2 = this.theDeck;
          int[] ct2 = new int[8];
          ct2[0] = 1;
          Card card2 = new Card("Brown", "Brickyard", "", ct2, 20, 0, "2 Clay");
          theDeck2[1] = card2;
          Card[] theDeck3 = this.theDeck;
          int[] ct3 = new int[8];
          ct3[0] = 1;
          Card card3 = new Card("Brown", "Quarry", "", ct3, 21, 0, "2 Stone");
          theDeck3[2] = card3;
          Card[] theDeck4 = this.theDeck;
          int[] ct4 = new int[8];
          ct4[0] = 1;
          Card card4 = new Card("Brown", "Foundry", "", ct4, 22, 0, "2 Ore");
          theDeck4[3] = card4;
          this.theDeck[4] = new Card("Grey", "Loom", "", new int[8], 7, 0, "Silk");
          this.theDeck[5] = new Card("Grey", "Glassworks", "", new int[8], 8, 0, "Glass");
          this.theDeck[6] = new Card("Grey", "Press", "", new int[8], 9, 0, "Papyrus");
          Card[] theDeck5 = this.theDeck;
          int[] ct5 = new int[8];
          ct5[3] = 3;
          Card card5 = new Card("Blue", "Aqueduct", "Baths", ct5, 0, 5, "5p");
          theDeck5[7] = card5;
          this.theDeck[8] = new Card("Blue", "Temple", "Altar", new int[8]
          {
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0
          }, 0, 3, "3p, leads to Parthenon");
          Card[] theDeck6 = this.theDeck;
          int[] ct6 = new int[8];
          ct6[2] = 2;
          ct6[4] = 1;
          Card card6 = new Card("Blue", "Statue", "Theatre", ct6, 0, 4, "4p leads to Gardens");
          theDeck6[9] = card6;
          Card[] theDeck7 = this.theDeck;
          int[] ct7 = new int[8];
          ct7[1] = 2;
          ct7[7] = 1;
          Card card7 = new Card("Blue", "Courthouse", "Scriptorium", ct7, 0, 4, "4p");
          theDeck7[10] = card7;
          Card[] theDeck8 = this.theDeck;
          int[] ct8 = new int[8];
          ct8[1] = 2;
          Card card8 = new Card("Yellow", "Forum", "Trading Post", ct8, 23, 0, "Counts as any one luxury resource, leads to Haven");
          theDeck8[11] = card8;
          Card[] theDeck9 = this.theDeck;
          int[] ct9 = new int[8];
          ct9[4] = 2;
          Card card9 = new Card("Yellow", "Caravansery", "Marketplace", ct9, 24, 0, "Counts as any one basic resource, leads to Lighthouse");
          theDeck9[12] = card9;
          this.theDeck[13] = new Card("Yellow", "Vineyard", "", new int[8], 25, 0, "1 coin for each brown card in yours and your neighbours' cities");
          Card[] theDeck10 = this.theDeck;
          int[] ct10 = new int[8];
          ct10[3] = 3;
          Card card10 = new Card("Red", "Walls", "", ct10, 26, 0, "2 Shields, leads to Fortifications");
          theDeck10[14] = card10;
          this.theDeck[15] = new Card("Red", "Stables", "Apothecary", new int[8]
          {
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0
          }, 26, 0, "2 Shields");
          Card[] theDeck11 = this.theDeck;
          int[] ct11 = new int[8];
          ct11[2] = 1;
          ct11[4] = 2;
          Card card11 = new Card("Red", "Archery Range", "Workshop", ct11, 26, 0, "2 Shields");
          theDeck11[16] = card11;
          Card[] theDeck12 = this.theDeck;
          int[] ct12 = new int[8];
          ct12[2] = 2;
          ct12[5] = 1;
          Card card12 = new Card("Green", "Dispensary", "Apothecary", ct12, 0, 10, 1, "1 Compass, leads to Lodge and Arena");
          theDeck12[17] = card12;
          Card[] theDeck13 = this.theDeck;
          int[] ct13 = new int[8];
          ct13[1] = 2;
          ct13[6] = 1;
          Card card13 = new Card("Green", "Laboratory", "Workshop", ct13, 0, 10, 2, "1 Gear, leads to Siege Workshop and Observatory");
          theDeck13[18] = card13;
          Card[] theDeck14 = this.theDeck;
          int[] ct14 = new int[8];
          ct14[3] = 2;
          ct14[7] = 1;
          Card card14 = new Card("Green", "Library", "Scriptorium", ct14, 0, 10, 3, "1 Tablet, leads to Senate and University");
          theDeck14[19] = card14;
          Card[] theDeck15 = this.theDeck;
          int[] ct15 = new int[8];
          ct15[4] = 1;
          ct15[6] = 1;
          Card card15 = new Card("Green", "School", "", ct15, 0, 10, 3, "1 Tablet, leads to Academy and Study");
          theDeck15[20] = card15;
          break;
        case 4:
          Card[] theDeck16 = this.theDeck;
          int[] ct16 = new int[8];
          ct16[0] = 1;
          Card card16 = new Card("Brown", "Sawmill", "", ct16, 19, 0, "2 Wood");
          theDeck16[21] = card16;
          Card[] theDeck17 = this.theDeck;
          int[] ct17 = new int[8];
          ct17[0] = 1;
          Card card17 = new Card("Brown", "Brickyard", "", ct17, 20, 0, "2 Clay");
          theDeck17[22] = card17;
          Card[] theDeck18 = this.theDeck;
          int[] ct18 = new int[8];
          ct18[0] = 1;
          Card card18 = new Card("Brown", "Quarry", "", ct18, 21, 0, "2 Stone");
          theDeck18[23] = card18;
          Card[] theDeck19 = this.theDeck;
          int[] ct19 = new int[8];
          ct19[0] = 1;
          Card card19 = new Card("Brown", "Foundry", "", ct19, 22, 0, "2 Ore");
          theDeck19[24] = card19;
          this.theDeck[25] = new Card("Yellow", "Bazar", "", new int[8], 27, 0, "2 coins for each grey card in yours and your neighbours' cities");
          Card[] theDeck20 = this.theDeck;
          int[] ct20 = new int[8];
          ct20[2] = 2;
          ct20[4] = 1;
          Card card20 = new Card("Red", "Training Ground", "", ct20, 26, 0, "2 Shields, leads to Circus");
          theDeck20[26] = card20;
          Card[] theDeck21 = this.theDeck;
          int[] ct21 = new int[8];
          ct21[2] = 2;
          ct21[5] = 1;
          Card card21 = new Card("Green", "Dispensary", "Apothecary", ct21, 0, 10, 1, "1 Compass, leads to Lodge and Arena");
          theDeck21[27] = card21;
          goto case 3;
        case 5:
          this.theDeck[28] = new Card("Grey", "Loom", "", new int[8], 7, 0, "Silk");
          this.theDeck[29] = new Card("Grey", "Glassworks", "", new int[8], 8, 0, "Glass");
          this.theDeck[30] = new Card("Grey", "Press", "", new int[8], 9, 0, "Papyrus");
          Card[] theDeck22 = this.theDeck;
          int[] ct22 = new int[8];
          ct22[1] = 2;
          ct22[7] = 1;
          Card card22 = new Card("Blue", "Courthouse", "Scriptorium", ct22, 0, 4, "4p");
          theDeck22[31] = card22;
          Card[] theDeck23 = this.theDeck;
          int[] ct23 = new int[8];
          ct23[4] = 2;
          Card card23 = new Card("Yellow", "Caravansery", "Marketplace", ct23, 24, 0, "Counts as any one basic resource, leads to Lighthouse");
          theDeck23[32] = card23;
          this.theDeck[33] = new Card("Red", "Stables", "Apothecary", new int[8]
          {
            0,
            1,
            1,
            0,
            1,
            0,
            0,
            0
          }, 26, 0, "2 Shields");
          Card[] theDeck24 = this.theDeck;
          int[] ct24 = new int[8];
          ct24[1] = 2;
          ct24[6] = 1;
          Card card24 = new Card("Green", "Laboratory", "Workshop", ct24, 0, 10, 2, "1 Gear, leads to Siege Workshop and Observatory");
          theDeck24[34] = card24;
          goto case 4;
        case 6:
          this.theDeck[35] = new Card("Blue", "Temple", "Altar", new int[8]
          {
            0,
            1,
            0,
            0,
            1,
            1,
            0,
            0
          }, 0, 3, "3p, leads to Parthenon");
          Card[] theDeck25 = this.theDeck;
          int[] ct25 = new int[8];
          ct25[1] = 2;
          Card card25 = new Card("Yellow", "Forum", "Trading Post", ct25, 23, 0, "Counts as any one luxury resource, leads to Haven");
          theDeck25[36] = card25;
          Card[] theDeck26 = this.theDeck;
          int[] ct26 = new int[8];
          ct26[4] = 2;
          Card card26 = new Card("Yellow", "Caravansery", "Marketplace", ct26, 24, 0, "Counts as any one basic resource, leads to Lighthouse");
          theDeck26[37] = card26;
          this.theDeck[38] = new Card("Yellow", "Vineyard", "", new int[8], 25, 0, "1 coin for each brown card in yours and your neighbours' cities");
          Card[] theDeck27 = this.theDeck;
          int[] ct27 = new int[8];
          ct27[2] = 1;
          ct27[4] = 2;
          Card card27 = new Card("Red", "Archery Range", "Workshop", ct27, 26, 0, "2 Shields");
          theDeck27[39] = card27;
          Card[] theDeck28 = this.theDeck;
          int[] ct28 = new int[8];
          ct28[2] = 2;
          ct28[4] = 1;
          Card card28 = new Card("Red", "Training Ground", "", ct28, 26, 0, "2 Shields, leads to Circus");
          theDeck28[40] = card28;
          Card[] theDeck29 = this.theDeck;
          int[] ct29 = new int[8];
          ct29[3] = 2;
          ct29[7] = 1;
          Card card29 = new Card("Green", "Library", "Scriptorium", ct29, 0, 10, 3, "1 Tablet, leads to Senate and University");
          theDeck29[41] = card29;
          goto case 5;
        case 7:
          Card[] theDeck30 = this.theDeck;
          int[] ct30 = new int[8];
          ct30[3] = 3;
          Card card30 = new Card("Blue", "Aqueduct", "Baths", ct30, 0, 5, "5p");
          theDeck30[42] = card30;
          Card[] theDeck31 = this.theDeck;
          int[] ct31 = new int[8];
          ct31[2] = 2;
          ct31[4] = 1;
          Card card31 = new Card("Blue", "Statue", "Theatre", ct31, 0, 4, "4p, leads to Gardens");
          theDeck31[43] = card31;
          Card[] theDeck32 = this.theDeck;
          int[] ct32 = new int[8];
          ct32[1] = 2;
          Card card32 = new Card("Yellow", "Forum", "Trading Post", ct32, 23, 0, "Counts as any one luxury resource, leads to Haven");
          theDeck32[44] = card32;
          this.theDeck[45] = new Card("Yellow", "Bazar", "", new int[8], 27, 0, "2 coins for each grey card in yours and your neighbours' cities");
          Card[] theDeck33 = this.theDeck;
          int[] ct33 = new int[8];
          ct33[3] = 3;
          Card card33 = new Card("Red", "Walls", "", ct33, 26, 0, "2 Shields, leads to Fortifications");
          theDeck33[46] = card33;
          Card[] theDeck34 = this.theDeck;
          int[] ct34 = new int[8];
          ct34[2] = 2;
          ct34[4] = 1;
          Card card34 = new Card("Red", "Training Ground", "", ct34, 26, 0, "2 Shields, leads to Circus");
          theDeck34[47] = card34;
          Card[] theDeck35 = this.theDeck;
          int[] ct35 = new int[8];
          ct35[4] = 1;
          ct35[6] = 1;
          Card card35 = new Card("Green", "School", "", ct35, 0, 10, 3, "1 Tablet, leads to Academy and Study");
          theDeck35[48] = card35;
          goto case 6;
      }
      if (this.version < 2)
        return;
      Card[] theDeck36 = new BlackDeck(2).theDeck;
      this.Shuffle(theDeck36);
      int num = this.nPlayers * 7;
      for (int index = 0; index < this.nPlayers; ++index)
        this.theDeck[num + index] = theDeck36[index];
    }

    private void InitializeAge3()
    {
      switch (this.nPlayers)
      {
        case 3:
          this.theDeck[0] = new Card("Blue", "Pantheon", "Temple", new int[8]
          {
            0,
            2,
            1,
            0,
            0,
            1,
            1,
            1
          }, 0, 7, "7p");
          Card[] theDeck1 = this.theDeck;
          int[] ct1 = new int[8];
          ct1[1] = 2;
          ct1[4] = 1;
          Card card1 = new Card("Blue", "Gardens", "Statue", ct1, 0, 5, "5p");
          theDeck1[1] = card1;
          this.theDeck[2] = new Card("Blue", "Town Hall", "", new int[8]
          {
            0,
            0,
            1,
            2,
            0,
            1,
            0,
            0
          }, 0, 6, "6p");
          this.theDeck[3] = new Card("Blue", "Palace", "", new int[8]
          {
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          }, 0, 8, "8p");
          this.theDeck[4] = new Card("Blue", "Senate", "Library", new int[8]
          {
            0,
            0,
            1,
            1,
            2,
            0,
            0,
            0
          }, 0, 6, "6p");
          this.theDeck[5] = new Card("Yellow", "Haven", "Forum", new int[8]
          {
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1
          }, 28, 9, "1 Coin and 1p for each brown card in your city");
          Card[] theDeck2 = this.theDeck;
          int[] ct2 = new int[8];
          ct2[3] = 1;
          ct2[5] = 1;
          Card card2 = new Card("Yellow", "Lighthouse", "Caravansery", ct2, 29, 11, "1 Coin and 1p for each yellow card in your city");
          theDeck2[6] = card2;
          Card[] theDeck3 = this.theDeck;
          int[] ct3 = new int[8];
          ct3[2] = 1;
          ct3[3] = 2;
          Card card3 = new Card("Yellow", "Arena", "Dispensary", ct3, 30, 12, "3 Coins and 1p for each built wonder stage");
          theDeck3[7] = card3;
          Card[] theDeck4 = this.theDeck;
          int[] ct4 = new int[8];
          ct4[2] = 3;
          ct4[3] = 1;
          Card card4 = new Card("Red", "Fortifications", "Walls", ct4, 31, 0, "3 Shields");
          theDeck4[8] = card4;
          this.theDeck[9] = new Card("Red", "Arsenal", "", new int[8]
          {
            0,
            0,
            1,
            0,
            2,
            0,
            0,
            1
          }, 31, 0, "3 Shields");
          this.theDeck[10] = new Card("Red", "Siege Workshop", "Laboratory", new int[8]
          {
            0,
            3,
            0,
            0,
            1,
            0,
            0,
            1
          }, 31, 0, "3 Shields");
          this.theDeck[11] = new Card("Green", "Lodge", "Dispensary", new int[8]
          {
            0,
            2,
            0,
            0,
            0,
            0,
            1,
            1
          }, 0, 10, 1, "1 Compass");
          this.theDeck[12] = new Card("Green", "Observatory", "Laboratory", new int[8]
          {
            0,
            0,
            2,
            0,
            0,
            1,
            0,
            1
          }, 0, 10, 2, "1 Gear");
          this.theDeck[13] = new Card("Green", "University", "Library", new int[8]
          {
            0,
            0,
            0,
            0,
            2,
            1,
            1,
            0
          }, 0, 10, 3, "1 Tablet");
          Card[] theDeck5 = this.theDeck;
          int[] ct5 = new int[8];
          ct5[3] = 3;
          ct5[5] = 1;
          Card card5 = new Card("Green", "Academy", "School", ct5, 0, 10, 1, "1 Compass");
          theDeck5[14] = card5;
          this.theDeck[15] = new Card("Green", "Study", "School", new int[8]
          {
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
          }, 0, 10, 2, "1 Gear");
          break;
        case 4:
          Card[] theDeck6 = this.theDeck;
          int[] ct6 = new int[8];
          ct6[1] = 2;
          ct6[4] = 1;
          Card card6 = new Card("Blue", "Gardens", "Statue", ct6, 0, 5, "5p");
          theDeck6[16] = card6;
          this.theDeck[17] = new Card("Yellow", "Haven", "Forum", new int[8]
          {
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            1
          }, 28, 9, "1 Coin and 1p for each brown card in your city");
          Card[] theDeck7 = this.theDeck;
          int[] ct7 = new int[8];
          ct7[1] = 2;
          ct7[6] = 1;
          Card card7 = new Card("Yellow", "Chamber of Commerce", "", ct7, 32, 13, "2 Coins and 2p for each grey card in your city");
          theDeck7[18] = card7;
          this.theDeck[19] = new Card("Red", "Arsenal", "", new int[8]
          {
            0,
            0,
            1,
            0,
            2,
            0,
            0,
            1
          }, 31, 0, "3 Shields");
          Card[] theDeck8 = this.theDeck;
          int[] ct8 = new int[8];
          ct8[2] = 1;
          ct8[3] = 3;
          Card card8 = new Card("Red", "Circus", "Training Ground", ct8, 31, 0, "3 Shields");
          theDeck8[20] = card8;
          this.theDeck[21] = new Card("Green", "University", "Library", new int[8]
          {
            0,
            0,
            0,
            0,
            2,
            1,
            1,
            0
          }, 0, 10, 3, "1 Tablet");
          goto case 3;
        case 5:
          this.theDeck[22] = new Card("Blue", "Town Hall", "", new int[8]
          {
            0,
            0,
            1,
            2,
            0,
            1,
            0,
            0
          }, 0, 6, "6p");
          this.theDeck[23] = new Card("Blue", "Senate", "Library", new int[8]
          {
            0,
            0,
            1,
            1,
            2,
            0,
            0,
            0
          }, 0, 6, "6p");
          Card[] theDeck9 = this.theDeck;
          int[] ct9 = new int[8];
          ct9[2] = 1;
          ct9[3] = 2;
          Card card9 = new Card("Yellow", "Arena", "Dispensary", ct9, 30, 12, "3 Coins and 1p for each built wonder stage");
          theDeck9[24] = card9;
          Card[] theDeck10 = this.theDeck;
          int[] ct10 = new int[8];
          ct10[2] = 1;
          ct10[3] = 3;
          Card card10 = new Card("Red", "Circus", "Training Ground", ct10, 31, 0, "3 Shields");
          theDeck10[25] = card10;
          this.theDeck[26] = new Card("Red", "Siege Workshop", "Laboratory", new int[8]
          {
            0,
            3,
            0,
            0,
            1,
            0,
            0,
            1
          }, 31, 0, 2, "3 Shields");
          this.theDeck[27] = new Card("Green", "Study", "School", new int[8]
          {
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1
          }, 0, 10, 2, "1 Gear");
          goto case 4;
        case 6:
          this.theDeck[28] = new Card("Blue", "Town Hall", "", new int[8]
          {
            0,
            0,
            1,
            2,
            0,
            1,
            0,
            0
          }, 0, 6, "6p");
          this.theDeck[29] = new Card("Blue", "Pantheon", "Temple", new int[8]
          {
            0,
            2,
            1,
            0,
            0,
            1,
            1,
            1
          }, 0, 7, "7p");
          Card[] theDeck11 = this.theDeck;
          int[] ct11 = new int[8];
          ct11[3] = 1;
          ct11[5] = 1;
          Card card11 = new Card("Yellow", "Lighthouse", "Caravansery", ct11, 29, 11, "1 Coin and 1p for each yellow card in your city");
          theDeck11[30] = card11;
          Card[] theDeck12 = this.theDeck;
          int[] ct12 = new int[8];
          ct12[1] = 2;
          ct12[6] = 1;
          Card card12 = new Card("Yellow", "Chamber of Commerce", "", ct12, 32, 13, "2 Coins and 2p for each grey card in your city");
          theDeck12[31] = card12;
          Card[] theDeck13 = this.theDeck;
          int[] ct13 = new int[8];
          ct13[2] = 1;
          ct13[3] = 3;
          Card card13 = new Card("Red", "Circus", "Training Ground", ct13, 31, 0, "3 Shields");
          theDeck13[32] = card13;
          this.theDeck[33] = new Card("Green", "Lodge", "Dispensary", new int[8]
          {
            0,
            2,
            0,
            0,
            0,
            0,
            1,
            1
          }, 0, 10, 1, "1 Compass");
          goto case 5;
        case 7:
          this.theDeck[34] = new Card("Blue", "Palace", "", new int[8]
          {
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1
          }, 0, 8, "8p");
          Card[] theDeck14 = this.theDeck;
          int[] ct14 = new int[8];
          ct14[2] = 1;
          ct14[3] = 2;
          Card card14 = new Card("Yellow", "Arena", "Dispensary", ct14, 30, 12, "3 Coins and 1p for each built wonder stage");
          theDeck14[35] = card14;
          Card[] theDeck15 = this.theDeck;
          int[] ct15 = new int[8];
          ct15[2] = 3;
          ct15[3] = 1;
          Card card15 = new Card("Red", "Fortifications", "Walls", ct15, 31, 0, "3 Shields");
          theDeck15[36] = card15;
          this.theDeck[37] = new Card("Red", "Arsenal", "", new int[8]
          {
            0,
            0,
            1,
            0,
            2,
            0,
            0,
            1
          }, 31, 0, "3 Shields");
          this.theDeck[38] = new Card("Green", "Observatory", "Laboratory", new int[8]
          {
            0,
            0,
            2,
            0,
            0,
            1,
            0,
            1
          }, 0, 10, 2, "1 Gear");
          Card[] theDeck16 = this.theDeck;
          int[] ct16 = new int[8];
          ct16[3] = 3;
          ct16[5] = 1;
          Card card16 = new Card("Green", "Academy", "School", ct16, 0, 10, 1, "1 Compass");
          theDeck16[39] = card16;
          goto case 6;
      }
      Card[] theDeck17 = new GuildDeck(this.version).theDeck;
      this.Shuffle(theDeck17);
      int num1 = this.nPlayers * 6 - 2;
      for (int index = 0; index < this.nPlayers + 2; ++index)
        this.theDeck[num1 + index] = theDeck17[index];
      if (this.version < 2)
        return;
      Card[] theDeck18 = new BlackDeck(3).theDeck;
      this.Shuffle(theDeck18);
      int num2 = this.nPlayers * 7;
      for (int index = 0; index < this.nPlayers; ++index)
        this.theDeck[num2 + index] = theDeck18[index];
    }

    public void Shuffle(Card[] aDeck)
    {
      Random random = new Random();
      int length = aDeck.Length;
      for (int index1 = 0; index1 < length; ++index1)
      {
        int index2 = random.Next(0, length);
        int index3 = random.Next(0, length);
        Card card = aDeck[index2];
        aDeck[index2] = aDeck[index3];
        aDeck[index3] = card;
      }
    }
  }
}
