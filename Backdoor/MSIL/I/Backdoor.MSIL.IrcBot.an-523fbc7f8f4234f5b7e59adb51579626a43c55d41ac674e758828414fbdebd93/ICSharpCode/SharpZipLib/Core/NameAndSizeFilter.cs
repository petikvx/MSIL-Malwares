// Decompiled with JetBrains decompiler
// Type: ICSharpCode.SharpZipLib.Core.NameAndSizeFilter
// Assembly: TheBot, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 7E6D888C-8D83-46CE-907A-18F99381A0FA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Backdoor.MSIL.IrcBot.an-523fbc7f8f4234f5b7e59adb51579626a43c55d41ac674e758828414fbdebd93.exe

using System;
using System.IO;

namespace ICSharpCode.SharpZipLib.Core
{
  [Obsolete("Use ExtendedPathFilter instead")]
  public class NameAndSizeFilter : PathFilter
  {
    private long \uE001;
    private long \uE000 = long.MaxValue;

    public NameAndSizeFilter(string filter, long minSize, long maxSize)
      : base(filter)
    {
      this.MinSize = minSize;
      this.MaxSize = maxSize;
    }

    public override bool IsMatch(string name)
    {
      bool flag = base.IsMatch(name);
      if (flag)
      {
        long length = new FileInfo(name).Length;
        flag = this.MinSize <= length && this.MaxSize >= length;
      }
      return flag;
    }

    public long MinSize
    {
      get => this.\uE001;
      set => this.\uE001 = value >= 0L && this.\uE000 >= value ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }

    public long MaxSize
    {
      get => this.\uE000;
      set => this.\uE000 = value >= 0L && this.\uE001 <= value ? value : throw new ArgumentOutOfRangeException(\uE01B.\uE000("\uEA14\uEA03\uEA0E\uEA17\uEA07", 60002));
    }
  }
}
