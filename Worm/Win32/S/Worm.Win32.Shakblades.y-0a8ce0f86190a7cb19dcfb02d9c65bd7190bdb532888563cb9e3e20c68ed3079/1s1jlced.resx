<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="1s1jlced" type="System.Byte[], mscorlib">
    <value>
        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
</value>
  </data>
</root>