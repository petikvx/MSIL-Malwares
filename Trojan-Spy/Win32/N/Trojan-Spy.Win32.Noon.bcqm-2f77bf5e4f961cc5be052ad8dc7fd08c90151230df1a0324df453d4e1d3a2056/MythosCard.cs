// Decompiled with JetBrains decompiler
// Type: mmxAH.MythosCard
// Assembly: PermissionTokenFact, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 0E8B010F-DA1B-42FA-9C31-C1DCAF557A03
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqm-2f77bf5e4f961cc5be052ad8dc7fd08c90151230df1a0324df453d4e1d3a2056.exe

using System;
using System.Collections.Generic;

namespace mmxAH
{
  public abstract class MythosCard : Card
  {
    protected GameEngine en;
    private short GateLoc;
    private short ClueLoc;
    private List<byte> MoveBlack;
    private List<byte> MoveWhite;
    protected string Title;

    public MythosCard(GameEngine eng, short pID)
    {
      this.en = eng;
      this.ID = pID;
      this.MoveBlack = new List<byte>();
      this.MoveWhite = new List<byte>();
    }

    public virtual void Execute()
    {
      this.en.curs.resolvingMythos = this;
      this.en.io.PrintToLog(Environment.NewLine + this.Title + "  ", (byte) 16, true);
      this.PrintType();
      this.en.io.PrintToLog(Environment.NewLine + this.en.sysstr.GetString(SSType.MythosStep1) + Environment.NewLine, isBold: true);
      ArchemUnstableLoc loc = (ArchemUnstableLoc) this.en.locs[(int) this.GateLoc];
      if (loc.isGate())
      {
        this.en.ga.MonsterSurge(this.GateLoc);
      }
      else
      {
        if (!loc.OpenGate())
          return;
        this.Step2();
      }
    }

    public void Step2()
    {
      this.en.io.PrintToLog(Environment.NewLine + this.en.sysstr.GetString(SSType.MythosStep2) + Environment.NewLine, isBold: true);
      ((ArchemArea) this.en.locs[(int) this.ClueLoc]).MythosClues();
    }

    public void Step3()
    {
      this.en.io.PrintToLog(Environment.NewLine + this.en.sysstr.GetString(SSType.MythosStep3) + Environment.NewLine, isBold: true);
      foreach (MonsterIndivid activeMonster in this.en.ActiveMonsters)
        activeMonster.isEncountred = false;
      this.Step3Circle();
    }

    public void Step3Circle()
    {
      foreach (MonsterIndivid activeMonster in this.en.ActiveMonsters)
      {
        if (!activeMonster.isEncountred)
        {
          activeMonster.isEncountred = true;
          byte ds = activeMonster.GetDs();
          if (this.MoveBlack.IndexOf(ds) >= 0)
          {
            activeMonster.Move(false);
            return;
          }
          if (this.MoveWhite.IndexOf(ds) >= 0)
          {
            activeMonster.Move(true);
            return;
          }
          this.Step3Circle();
          return;
        }
      }
      this.Step4();
    }

    protected abstract void Step4();

    protected abstract void PrintType();

    public virtual bool FromTextFile(TextFileParser data, TextFileParser text)
    {
      this.Title = text.GetCurString();
      this.GateLoc = this.en.map.GetNumberByCodeName(data.GetToken());
      this.ClueLoc = this.en.map.GetNumberByCodeName(data.GetToken());
      short result;
      if (this.GateLoc == (short) -1 || this.ClueLoc == (short) -1 || this.en.locs[(int) this.GateLoc].GetLocType() != LocathionType.ArchamUnstable || !short.TryParse(data.GetToken(), out result))
        return false;
      for (short index1 = 0; (int) index1 < (int) result; ++index1)
      {
        short index2 = (short) this.en.ds.GetIndex(data.GetToken());
        if (index2 == (short) -1)
          return false;
        this.MoveWhite.Add((byte) index2);
      }
      if (!short.TryParse(data.GetToken(), out result))
        return false;
      for (short index3 = 0; (int) index3 < (int) result; ++index3)
      {
        short index4 = (short) this.en.ds.GetIndex(data.GetToken());
        if (index4 == (short) -1)
          return false;
        this.MoveBlack.Add((byte) index4);
      }
      return true;
    }
  }
}
