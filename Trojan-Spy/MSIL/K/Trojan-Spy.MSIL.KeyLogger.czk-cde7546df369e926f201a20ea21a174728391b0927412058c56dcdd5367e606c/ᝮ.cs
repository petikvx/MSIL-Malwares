// Decompiled with JetBrains decompiler
// Type: ᝮ
// Assembly: dskl, Version=1.71.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5380AAD3-568D-45D6-B9BC-59CE5C1E3490
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.czk-cde7546df369e926f201a20ea21a174728391b0927412058c56dcdd5367e606c.exe

using System;
using System.Runtime.Serialization;

[Serializable]
internal class ᝮ : ISerializable, IDisposable
{
  private string ᡆᙃ;
  private string ᡇᙃ;
  private string ᡈᙃ;
  private bool ᡉᙃ;
  private string ᡊᙃ;
  private int ᡋᙃ;
  private bool ᡘᙃ;
  private int ᡍᙃ;
  private bool ᡎᙃ;
  private bool ᡏᙃ;
  private string \u187Eᙃ;
  private int ᡑᙃ;

  public bool KeyCombinationDisabled
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡘᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡘᙃ = value;
    }
  }

  public string ActivationCode
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡆᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡆᙃ = value;
    }
  }

  public string Username
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡇᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡇᙃ = value;
    }
  }

  public string Password
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡈᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡈᙃ = value;
    }
  }

  public int MaxImageFolderSize
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡑᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡑᙃ = value;
    }
  }

  public bool RemoteAccess
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡉᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡉᙃ = value;
    }
  }

  public string PassPhrase
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡊᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡊᙃ = value;
    }
  }

  public int KeyCombination
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡋᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡋᙃ = value;
    }
  }

  public string ConsolePassword
  {
    get
    {
      do
        ;
      while (false);
      return this.\u187Eᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.\u187Eᙃ = value;
    }
  }

  public bool ScreenShotUploadOnly
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡏᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡏᙃ = value;
    }
  }

  public bool UploadImages
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡎᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡎᙃ = value;
    }
  }

  public int ScreenShotDuration
  {
    get
    {
      do
        ;
      while (false);
      return this.ᡍᙃ;
    }
    set
    {
      do
        ;
      while (false);
      this.ᡍᙃ = value;
    }
  }

  public ᝮ()
  {
    do
      ;
    while (false);
    this.ᡆᙃ = "";
    this.ᡇᙃ = "";
    this.ᡈᙃ = "";
    this.ᡊᙃ = "";
    this.ᡋᙃ = -1;
    this.ᡍᙃ = -1;
    this.\u187Eᙃ = "";
    this.ᡑᙃ = -1;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  public ᝮ(SerializationInfo info, StreamingContext ctxt)
  {
    do
      ;
    while (false);
    this.ᡆᙃ = "";
    this.ᡇᙃ = "";
    this.ᡈᙃ = "";
    this.ᡊᙃ = "";
    this.ᡋᙃ = -1;
    this.ᡍᙃ = -1;
    this.\u187Eᙃ = "";
    this.ᡑᙃ = -1;
    // ISSUE: explicit constructor call
    base.\u002Ector();
    try
    {
      this.ᡆᙃ = (string) info.GetValue("activationCode", typeof (string));
      this.ᡇᙃ = (string) info.GetValue("username", typeof (string));
      this.ᡈᙃ = (string) info.GetValue("password", typeof (string));
      this.ᡉᙃ = (bool) info.GetValue("remoteAccess", typeof (bool));
      this.ᡊᙃ = (string) info.GetValue("passPhrase", typeof (string));
      this.ᡋᙃ = (int) info.GetValue("keyCombination", typeof (int));
      this.ᡘᙃ = (bool) info.GetValue("keyCombinationDisabled", typeof (bool));
      this.\u187Eᙃ = (string) info.GetValue("consolePassword", typeof (string));
      this.ᡏᙃ = (bool) info.GetValue("screenShotUploadOnly", typeof (bool));
      this.ᡎᙃ = (bool) info.GetValue("uploadImages", typeof (bool));
      this.ᡍᙃ = (int) info.GetValue("screenShotDuration", typeof (int));
      this.ᡑᙃ = (int) info.GetValue("maxImageSize", typeof (int));
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public void GetObjectData(SerializationInfo info, StreamingContext ctxt)
  {
    do
      ;
    while (false);
    try
    {
      info.AddValue("activationCode", (object) this.ᡆᙃ);
      info.AddValue("username", (object) this.ᡇᙃ);
      info.AddValue("password", (object) this.ᡈᙃ);
      info.AddValue("remoteAccess", this.ᡉᙃ);
      info.AddValue("passPhrase", (object) this.ᡊᙃ);
      info.AddValue("keyCombination", this.ᡋᙃ);
      info.AddValue("keyCombinationDisabled", this.ᡘᙃ);
      info.AddValue("consolePassword", (object) this.\u187Eᙃ);
      info.AddValue("screenShotUploadOnly", this.ᡏᙃ);
      info.AddValue("uploadImages", this.ᡎᙃ);
      info.AddValue("screenShotDuration", this.ᡍᙃ);
      info.AddValue("maxImageSize", this.ᡑᙃ);
    }
    catch
    {
    }
    int num1;
    int num2;
    while (num1 == num2)
    {
      num2 = 1;
      int num3 = num2;
      int num4 = num1;
      num1 = num3;
      if (num1 > num4)
        break;
    }
  }

  public void Dispose()
  {
    do
      ;
    while (false);
  }
}
