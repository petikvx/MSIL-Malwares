// Decompiled with JetBrains decompiler
// Type: ProjNet.Services.CallbackRegistry
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Collections;
using IRefl.Lists;
using IRefl.Objects;
using IRefl.Specifications;
using IRefl.Watchers;
using ProjNet.Candidates;
using ProjNet.States;
using ProjNet.Structs;
using System;
using System.Collections.Generic;
using System.Data.Linq;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Services
{
  internal class CallbackRegistry
  {
    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Table<IteratorThreadCollection> RestartAdvisor() => new RuleItemState().GetTable<IteratorThreadCollection>();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void EnableAdvisor(string def, string ivk)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        Table<IteratorThreadCollection> table;
        while (true)
        {
          switch (num2)
          {
            case 0:
              table = CallbackRegistry.RestartAdvisor();
              num2 = 5;
              continue;
            case 1:
              goto label_7;
            case 2:
            case 5:
              goto label_2;
            case 3:
            case 4:
              goto label_6;
            case 6:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_2:
        IteratorThreadCollection entity = new IteratorThreadCollection();
        goto label_6;
label_5:
        num1 = 4;
        continue;
label_6:
        entity.FirstName = def;
        entity.LastName = ivk;
        table.InsertOnSubmit(entity);
        table.Context.SubmitChanges();
        RuleItemState ruleItemState;
        ruleItemState.SubmitChanges();
        num1 = 6;
        continue;
label_7:
        ruleItemState = new RuleItemState();
        num1 = 0;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void DeleteAuthor(int authorID)
    {
      int num1 = 4;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.ProccesorMerchantCandidate merchantCandidate;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              // ISSUE: object of a compiler-generated type is created
              merchantCandidate = new CallbackRegistry.ProccesorMerchantCandidate();
              num2 = 2;
              continue;
            case 1:
            case 3:
              goto label_6;
            case 2:
              goto label_1;
            case 5:
              goto label_2;
            case 6:
              goto label_8;
            default:
              goto label_5;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        merchantCandidate.producerAdvisor = authorID;
        RuleItemState ruleItemState = new RuleItemState();
        // ISSUE: reference to a compiler-generated field
        IteratorThreadCollection entity = ruleItemState.GetTable<IteratorThreadCollection>().Where<IteratorThreadCollection>((Expression<Func<IteratorThreadCollection, bool>>) (a => a.AuthorID == merchantCandidate.producerAdvisor)).SingleOrDefault<IteratorThreadCollection>();
        num1 = 5;
        continue;
label_2:
        ruleItemState.Authors.DeleteOnSubmit(entity);
        goto label_6;
label_5:
        num1 = 1;
        continue;
label_6:
        ruleItemState.SubmitChanges();
        num1 = 6;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void StopAdvisor(string def, string attr, int dic_count, string cfg2)
    {
      int num = 3;
      ExceptionOrderList entity;
      Table<ExceptionOrderList> table;
      RuleItemState ruleItemState;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 1:
            table = CallbackRegistry.InitAdvisor();
            if (true)
            {
              num = 6;
              continue;
            }
            goto case 3;
          case 2:
          case 6:
            entity = new ExceptionOrderList();
            entity.ISBN = def;
            entity.BookTitle = attr;
            goto case 4;
          case 3:
            ruleItemState = new RuleItemState();
            num = 0;
            continue;
          case 4:
            entity.EditionNumber = dic_count;
            entity.Copyright = cfg2;
            table.InsertOnSubmit(entity);
            if (CallbackRegistry.SortModel())
            {
              num = 5;
              continue;
            }
            goto label_8;
          case 5:
            table.Context.SubmitChanges();
            ruleItemState.SubmitChanges();
            if (true)
            {
              num = 7;
              continue;
            }
            goto case 0;
          case 7:
            goto label_10;
          default:
            num = 4;
            continue;
        }
      }
label_10:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void ForgotAdvisor(string first)
    {
      int num1 = 5;
      while (true)
      {
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.AttributeAdvisor attributeAdvisor;
        int num2;
        RuleItemState ruleItemState;
        switch (num1)
        {
          case 0:
          case 5:
            // ISSUE: object of a compiler-generated type is created
            attributeAdvisor = new CallbackRegistry.AttributeAdvisor();
            num2 = 2;
            break;
          case 1:
          case 2:
            // ISSUE: reference to a compiler-generated field
            attributeAdvisor.baseAdvisor = first;
            if (true)
            {
              num1 = 4;
              continue;
            }
            goto case 0;
          case 3:
            // ISSUE: reference to a compiler-generated field
            ExceptionOrderList entity = ruleItemState.GetTable<ExceptionOrderList>().Where<ExceptionOrderList>((Expression<Func<ExceptionOrderList, bool>>) (t => t.ISBN == attributeAdvisor.baseAdvisor)).SingleOrDefault<ExceptionOrderList>();
            ruleItemState.Titles.DeleteOnSubmit(entity);
            ruleItemState.SubmitChanges();
            if (true)
            {
              num1 = 6;
              continue;
            }
            goto label_8;
          case 4:
            ruleItemState = new RuleItemState();
            goto case 3;
          case 6:
            goto label_9;
          default:
            num2 = 3;
            break;
        }
        num1 = num2;
      }
label_9:
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void CallAdvisor(string var1, int idx_pol)
    {
      int num1 = 5;
      while (true)
      {
        RuleItemState ruleItemState;
        ManagerObserverObject entity;
        Table<ManagerObserverObject> table;
        int num2;
        switch (num1)
        {
          case 0:
          case 5:
            ruleItemState = new RuleItemState();
            if (true)
            {
              num1 = 3;
              continue;
            }
            goto case 4;
          case 1:
          case 2:
            entity = new ManagerObserverObject();
            entity.AuthorID = idx_pol;
            goto case 4;
          case 3:
            table = ruleItemState.GetTable<ManagerObserverObject>();
            num2 = 1;
            break;
          case 4:
            entity.ISBN = var1;
            table.InsertOnSubmit(entity);
            table.Context.SubmitChanges();
            ruleItemState.SubmitChanges();
            num1 = 6;
            continue;
          case 6:
            goto label_9;
          default:
            num2 = 4;
            break;
        }
        num1 = num2;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void DeleteAuthorISBN(string isbn, int id)
    {
      int num1 = 4;
      while (true)
      {
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.SetterObserverObject setterObserverObject;
        RuleItemState ruleItemState;
        int num2;
        switch (num1)
        {
          case 0:
            // ISSUE: reference to a compiler-generated field
            setterObserverObject._SetterAdvisor = id;
            ruleItemState = new RuleItemState();
            // ISSUE: reference to a compiler-generated field
            // ISSUE: reference to a compiler-generated field
            ManagerObserverObject entity = ruleItemState.GetTable<ManagerObserverObject>().Where<ManagerObserverObject>((Expression<Func<ManagerObserverObject, bool>>) (authorisbn => authorisbn.ISBN == setterObserverObject.m_ManagerAdvisor && authorisbn.AuthorID == setterObserverObject._SetterAdvisor)).SingleOrDefault<ManagerObserverObject>();
            ruleItemState.FindFacade().DeleteOnSubmit(entity);
            goto case 2;
          case 1:
          case 5:
            // ISSUE: reference to a compiler-generated field
            setterObserverObject.m_ManagerAdvisor = isbn;
            num1 = 0;
            continue;
          case 2:
          case 3:
            ruleItemState.SubmitChanges();
            num2 = 6;
            break;
          case 4:
            // ISSUE: object of a compiler-generated type is created
            setterObserverObject = new CallbackRegistry.SetterObserverObject();
            num1 = 5;
            continue;
          case 6:
            goto label_8;
          default:
            num2 = 2;
            break;
        }
        num1 = num2;
      }
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static Table<ExceptionOrderList> InitAdvisor() => new RuleItemState().GetTable<ExceptionOrderList>();

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IQueryable CreateAdvisor()
    {
      int num1 = 0;
      IQueryable advisor;
      while (true)
      {
        int num2 = num1;
        RuleItemState ruleItemState;
        while (true)
        {
          switch (num2)
          {
            case 0:
              ruleItemState = new RuleItemState();
              if (CallbackRegistry.SortModel())
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 1:
            case 4:
              goto label_2;
            case 2:
            case 3:
              goto label_6;
            case 5:
              goto label_8;
            default:
              num2 = 3;
              continue;
          }
        }
label_2:
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: object of a compiler-generated type is created
        IQueryable<Facade<string, string, string>> queryable = ruleItemState.GetTable<IteratorThreadCollection>().Join<IteratorThreadCollection, ManagerObserverObject, int, Process<IteratorThreadCollection, ManagerObserverObject>>((IEnumerable<ManagerObserverObject>) ruleItemState.GetTable<ManagerObserverObject>(), (Expression<Func<IteratorThreadCollection, int>>) (author => author.AuthorID), (Expression<Func<ManagerObserverObject, int>>) (book => book.AuthorID), (Expression<Func<IteratorThreadCollection, ManagerObserverObject, Process<IteratorThreadCollection, ManagerObserverObject>>>) ((author, book) => new Process<IteratorThreadCollection, ManagerObserverObject>(author, book))).OrderBy<Process<IteratorThreadCollection, ManagerObserverObject>, string>((Expression<Func<Process<IteratorThreadCollection, ManagerObserverObject>, string>>) (process => process.author.LastName)).ThenBy<Process<IteratorThreadCollection, ManagerObserverObject>, string>((Expression<Func<Process<IteratorThreadCollection, ManagerObserverObject>, string>>) (process => process.author.FirstName)).Select<Process<IteratorThreadCollection, ManagerObserverObject>, Facade<string, string, string>>((Expression<Func<Process<IteratorThreadCollection, ManagerObserverObject>, Facade<string, string, string>>>) (process => new Facade<string, string, string>(process.author.FirstName, process.author.LastName, process.book.ISBN)));
label_6:
        advisor = (IQueryable) queryable;
        num1 = 5;
      }
label_8:
      return advisor;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static string InstantiateAdvisor(string spec)
    {
      int num1 = 4;
      string str;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.StatusStatusMap statusStatusMap;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 4:
              // ISSUE: object of a compiler-generated type is created
              statusStatusMap = new CallbackRegistry.StatusStatusMap();
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_7;
            case 1:
              // ISSUE: reference to a compiler-generated field
              statusStatusMap.m_DispatcherAdvisor = spec;
              if (!CallbackRegistry.ViewModel())
              {
                num2 = 2;
                continue;
              }
              goto label_2;
            case 2:
              goto label_2;
            case 3:
            case 5:
              goto label_7;
            case 6:
              goto label_9;
            default:
              goto label_5;
          }
        }
label_2:
        RuleItemState ruleItemState = new RuleItemState();
        goto label_7;
label_5:
        num1 = 5;
        continue;
label_7:
        // ISSUE: reference to a compiler-generated field
        str = ruleItemState.GetTable<IteratorThreadCollection>().Where<IteratorThreadCollection>((Expression<Func<IteratorThreadCollection, bool>>) (author => author.AuthorID == int.Parse(statusStatusMap.m_DispatcherAdvisor))).Select<IteratorThreadCollection, string>((Expression<Func<IteratorThreadCollection, string>>) (author => author.FirstName + " " + author.LastName)).SingleOrDefault<string>();
        num1 = 6;
      }
label_9:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static string RateAdvisor(string first)
    {
      int num1 = 1;
      string str;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.HelperAdvisor helperAdvisor;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_1;
            case 1:
              goto label_6;
            case 3:
            case 4:
              goto label_7;
            case 5:
              // ISSUE: reference to a compiler-generated field
              helperAdvisor.m_FactoryAdvisor = first;
              num2 = 0;
              continue;
            case 6:
              goto label_8;
            default:
              goto label_4;
          }
        }
label_1:
        RuleItemState ruleItemState = new RuleItemState();
        goto label_7;
label_4:
        num1 = 4;
        continue;
label_6:
        // ISSUE: object of a compiler-generated type is created
        helperAdvisor = new CallbackRegistry.HelperAdvisor();
        num1 = 5;
        continue;
label_7:
        // ISSUE: reference to a compiler-generated field
        str = ruleItemState.GetTable<IteratorThreadCollection>().Where<IteratorThreadCollection>((Expression<Func<IteratorThreadCollection, bool>>) (author => author.LastName.CompareTo(helperAdvisor.m_FactoryAdvisor) == 0)).Select<IteratorThreadCollection, string>((Expression<Func<IteratorThreadCollection, string>>) (author => (object) author.AuthorID + ", " + author.FirstName + " " + author.LastName)).First<string>();
        num1 = 6;
      }
label_8:
      return str;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static void TestAdvisor() => new RuleItemState().GetTable<ExceptionOrderList>().SelectMany<ExceptionOrderList, ManagerObserverObject, ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>>((Expression<Func<ExceptionOrderList, IEnumerable<ManagerObserverObject>>>) (title => title.AuthorISBNs), (Expression<Func<ExceptionOrderList, ManagerObserverObject, ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>>>) ((title, book) => new ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>(title, book))).Select<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>>((Expression<Func<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>>>) (objectObserverWatcher => new StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>(objectObserverWatcher, objectObserverWatcher.book.Author))).OrderBy<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>>) (stubStatusService => stubStatusService.author.LastName)).ThenBy<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>>) (stubStatusService => stubStatusService.author.FirstName)).ThenBy<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>>) (stubStatusService => stubStatusService.\u003C\u003Eh__TransparentIdentifier0.title.BookTitle)).Select<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, Prototype<string, string, string>>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, Prototype<string, string, string>>>) (stubStatusService => new Prototype<string, string, string>(stubStatusService.author.FirstName, stubStatusService.author.LastName, stubStatusService.\u003C\u003Eh__TransparentIdentifier0.title.BookTitle)));

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IQueryable SortAdvisor()
    {
      int num1 = 2;
      IQueryable queryable1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 2:
              goto label_5;
            case 1:
            case 3:
              goto label_1;
            case 4:
              goto label_6;
            case 5:
              goto label_7;
            default:
              int num3 = 4;
              num2 = CallbackRegistry.ViewModel() ? num3 : num3;
              continue;
          }
        }
label_1:
        RuleItemState ruleItemState;
        ParameterExpression parameterExpression;
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: method reference
        // ISSUE: type reference
        IQueryable<ReponseAdvisor.MessageFacadeSerializer> queryable2 = ruleItemState.GetTable<IteratorThreadCollection>().OrderBy<IteratorThreadCollection, string>((Expression<Func<IteratorThreadCollection, string>>) (author => author.LastName)).ThenBy<IteratorThreadCollection, string>((Expression<Func<IteratorThreadCollection, string>>) (author => author.FirstName)).Select<IteratorThreadCollection, Order<IteratorThreadCollection, string>>((Expression<Func<IteratorThreadCollection, Order<IteratorThreadCollection, string>>>) (author => new Order<IteratorThreadCollection, string>(author, author.FirstName + " " + author.LastName))).Select<Order<IteratorThreadCollection, string>, ReponseAdvisor.MessageFacadeSerializer>(Expression.Lambda<Func<Order<IteratorThreadCollection, string>, ReponseAdvisor.MessageFacadeSerializer>>((Expression) Expression.MemberInit(Expression.New(typeof (ReponseAdvisor.MessageFacadeSerializer)), (MemberBinding) Expression.Bind((MethodInfo) MethodBase.GetMethodFromHandle(__methodref (ReponseAdvisor.MessageFacadeSerializer.set_Author)), )))); //unable to render the statement
        goto label_6;
label_5:
        ruleItemState = new RuleItemState();
        num1 = 3;
        continue;
label_6:
        queryable1 = (IQueryable) queryable2;
        num1 = 5;
      }
label_7:
      return queryable1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IQueryable InterruptAdvisor()
    {
      int num1 = 2;
      if (CallbackRegistry.SortModel())
        goto label_5;
label_1:
      RuleItemState ruleItemState = new RuleItemState();
      int num2 = 4;
label_4:
      num1 = num2;
label_5:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 2:
            goto label_1;
          case 1:
          case 4:
            goto label_3;
          case 3:
            goto label_2;
          case 5:
            goto label_7;
          default:
            if (CallbackRegistry.SortModel())
            {
              num1 = 3;
              continue;
            }
            goto label_7;
        }
      }
label_2:
      IOrderedQueryable<ExceptionOrderList> orderedQueryable;
      IQueryable queryable = (IQueryable) orderedQueryable;
      num2 = 5;
      goto label_4;
label_3:
      orderedQueryable = ruleItemState.GetTable<ExceptionOrderList>().OrderBy<ExceptionOrderList, string>((Expression<Func<ExceptionOrderList, string>>) (title => title.BookTitle));
      goto label_2;
label_7:
      return queryable;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IEnumerable<ExceptionOrderList> RevertAdvisor(
      IteratorThreadCollection var1)
    {
      RuleItemState ruleItemState = new RuleItemState();
      return var1.AuthorISBNs.Select<ManagerObserverObject, ExceptionOrderList>((Func<ManagerObserverObject, ExceptionOrderList>) (reference => reference.Title));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IEnumerable<IteratorThreadCollection> AssetFacade(
      ExceptionOrderList ident)
    {
      RuleItemState ruleItemState = new RuleItemState();
      return ident.AuthorISBNs.Select<ManagerObserverObject, IteratorThreadCollection>((Func<ManagerObserverObject, IteratorThreadCollection>) (config => config.Author));
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IQueryable InvokeFacade()
    {
      int num1 = 3;
      if (CallbackRegistry.ViewModel())
        ;
      IQueryable queryable;
      while (true)
      {
        RuleItemState ruleItemState;
        int num2;
        IOrderedQueryable<ExceptionOrderList> orderedQueryable;
        switch (num1)
        {
          case 0:
          case 3:
            ruleItemState = new RuleItemState();
            num2 = 4;
            break;
          case 1:
          case 2:
            queryable = (IQueryable) orderedQueryable;
            num1 = 5;
            continue;
          case 4:
            orderedQueryable = ruleItemState.GetTable<ExceptionOrderList>().OrderBy<ExceptionOrderList, string>((Expression<Func<ExceptionOrderList, string>>) (title => title.Copyright));
            goto case 1;
          case 5:
            goto label_7;
          default:
            num2 = 1;
            break;
        }
        num1 = num2;
      }
label_7:
      return queryable;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IQueryable InsertFacade(string setup)
    {
      int num1 = 4;
      IQueryable queryable1;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.SchemaAdvisor schemaAdvisor;
        IQueryable<ExceptionOrderList> queryable2;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              queryable1 = (IQueryable) queryable2;
              if (true)
              {
                num2 = 6;
                continue;
              }
              goto case 1;
            case 1:
            case 5:
              // ISSUE: reference to a compiler-generated field
              schemaAdvisor._RecordAdvisor = setup;
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_7;
            case 2:
              // ISSUE: reference to a compiler-generated field
              queryable2 = new RuleItemState().GetTable<ExceptionOrderList>().Where<ExceptionOrderList>((Expression<Func<ExceptionOrderList, bool>>) (title => title.BookTitle.Contains(schemaAdvisor._RecordAdvisor)));
              goto case 0;
            case 4:
              goto label_7;
            case 6:
              goto label_9;
            default:
              goto label_4;
          }
        }
label_4:
        num1 = 0;
        continue;
label_7:
        // ISSUE: object of a compiler-generated type is created
        schemaAdvisor = new CallbackRegistry.SchemaAdvisor();
        num1 = 5;
      }
label_9:
      return queryable1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static IQueryable WriteFacade()
    {
      int num = 4;
      RuleItemState ruleItemState;
      IQueryable<Facade<string, string, string>> queryable1;
      IQueryable queryable2;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 4:
            ruleItemState = new RuleItemState();
            num = 2;
            continue;
          case 1:
          case 2:
            // ISSUE: object of a compiler-generated type is created
            // ISSUE: object of a compiler-generated type is created
            queryable1 = ruleItemState.GetTable<IteratorThreadCollection>().Join<IteratorThreadCollection, ManagerObserverObject, int, Process<IteratorThreadCollection, ManagerObserverObject>>((IEnumerable<ManagerObserverObject>) ruleItemState.GetTable<ManagerObserverObject>(), (Expression<Func<IteratorThreadCollection, int>>) (author => author.AuthorID), (Expression<Func<ManagerObserverObject, int>>) (book => book.AuthorID), (Expression<Func<IteratorThreadCollection, ManagerObserverObject, Process<IteratorThreadCollection, ManagerObserverObject>>>) ((author, book) => new Process<IteratorThreadCollection, ManagerObserverObject>(author, book))).OrderBy<Process<IteratorThreadCollection, ManagerObserverObject>, string>((Expression<Func<Process<IteratorThreadCollection, ManagerObserverObject>, string>>) (process => process.author.LastName)).ThenBy<Process<IteratorThreadCollection, ManagerObserverObject>, string>((Expression<Func<Process<IteratorThreadCollection, ManagerObserverObject>, string>>) (process => process.author.FirstName)).Select<Process<IteratorThreadCollection, ManagerObserverObject>, Facade<string, string, string>>((Expression<Func<Process<IteratorThreadCollection, ManagerObserverObject>, Facade<string, string, string>>>) (process => new Facade<string, string, string>(process.author.FirstName, process.author.LastName, process.book.ISBN)));
            goto case 3;
          case 3:
            queryable2 = (IQueryable) queryable1;
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 3;
            continue;
        }
      }
label_6:
      return queryable2;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static RichTextBox ChangeFacade()
    {
      int num1 = 1;
      RichTextBox richTextBox1;
      while (true)
      {
        int num2 = num1;
        // ISSUE: variable of a compiler-generated type
        CallbackRegistry.IssuerAdvisorStructBuilder advisorStructBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              // ISSUE: object of a compiler-generated type is created
              advisorStructBuilder = new CallbackRegistry.IssuerAdvisorStructBuilder();
              if (!CallbackRegistry.ViewModel())
              {
                num2 = 5;
                continue;
              }
              goto label_2;
            case 2:
            case 4:
              goto label_14;
            case 3:
              goto label_2;
            case 5:
              goto label_13;
            case 6:
              goto label_19;
            default:
              num2 = 3;
              continue;
          }
        }
label_2:
        IEnumerator<Prototype<string, string, string>> enumerator;
        RichTextBox richTextBox2;
        try
        {
          while (enumerator.MoveNext())
          {
            // ISSUE: variable of a compiler-generated type
            Prototype<string, string, string> current = enumerator.Current;
            int num3 = 2;
            if (CallbackRegistry.ViewModel())
              ;
            while (true)
            {
              switch (num3)
              {
                case 0:
                case 2:
                  goto label_4;
                case 1:
                case 3:
                  goto label_7;
                default:
                  num3 = 3;
                  continue;
              }
            }
label_4:
            richTextBox2.AppendText(string.Format("\t{0,-10} {1,-15} {2}\n", (object) current.FirstName, (object) current.LastName, (object) current.BookTitle));
label_7:;
          }
        }
        finally
        {
          enumerator?.Dispose();
        }
        richTextBox1 = richTextBox2;
        num1 = 6;
        continue;
label_13:
        // ISSUE: reference to a compiler-generated field
        advisorStructBuilder.m_ClassAdvisor = new RuleItemState();
        // ISSUE: reference to a compiler-generated field
        // ISSUE: reference to a compiler-generated field
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: object of a compiler-generated type is created
        IQueryable<Prototype<string, string, string>> queryable = advisorStructBuilder.m_ClassAdvisor.GetTable<ExceptionOrderList>().SelectMany<ExceptionOrderList, ManagerObserverObject, ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>>((Expression<Func<ExceptionOrderList, IEnumerable<ManagerObserverObject>>>) (title => advisorStructBuilder.m_ClassAdvisor.GetTable<ManagerObserverObject>()), (Expression<Func<ExceptionOrderList, ManagerObserverObject, ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>>>) ((title, book) => new ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>(title, book))).Select<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>>((Expression<Func<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>>>) (objectObserverWatcher => new StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>(objectObserverWatcher, objectObserverWatcher.book.Author))).OrderBy<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>>) (stubStatusService => stubStatusService.author.LastName)).ThenBy<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>>) (stubStatusService => stubStatusService.author.FirstName)).ThenBy<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, string>>) (stubStatusService => stubStatusService.\u003C\u003Eh__TransparentIdentifier0.title.BookTitle)).Select<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, Prototype<string, string, string>>((Expression<Func<StubStatusService<ObjectObserverWatcher<ExceptionOrderList, ManagerObserverObject>, IteratorThreadCollection>, Prototype<string, string, string>>>) (stubStatusService => new Prototype<string, string, string>(stubStatusService.author.FirstName, stubStatusService.author.LastName, stubStatusService.\u003C\u003Eh__TransparentIdentifier0.title.BookTitle)));
        num1 = 4;
        continue;
label_14:
        richTextBox2 = new RichTextBox();
        richTextBox2.AppendText("Authors and titles:\n\n");
        enumerator = queryable.GetEnumerator();
        goto label_2;
      }
label_19:
      return richTextBox1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public static RichTextBox PushFacade()
    {
      int num1 = 3;
      RichTextBox richTextBox1;
      while (true)
      {
        int num2 = num1;
        RichTextBox richTextBox2;
        IQueryable<Mapping<string, IEnumerable<string>>> queryable;
        IEnumerator<Mapping<string, IEnumerable<string>>> enumerator;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 2:
              goto label_6;
            case 4:
              try
              {
                while (enumerator.MoveNext())
                {
                  // ISSUE: variable of a compiler-generated type
                  Mapping<string, IEnumerable<string>> current = enumerator.Current;
                  richTextBox2.AppendText("\t" + current.Name + ":\n");
                  foreach (string title in current.Titles)
                  {
                    int num3 = 2;
                    while (true)
                    {
                      switch (num3)
                      {
                        case 0:
                        case 2:
                          goto label_11;
                        case 1:
                        case 3:
                          goto label_14;
                        default:
                          num3 = 3;
                          continue;
                      }
                    }
label_11:
                    richTextBox2.AppendText("\t\t" + title + "\n");
label_14:;
                  }
                }
              }
              finally
              {
                enumerator?.Dispose();
              }
              richTextBox1 = richTextBox2;
              if (!CallbackRegistry.ViewModel())
              {
                num2 = 6;
                continue;
              }
              goto label_24;
            case 5:
              richTextBox2 = new RichTextBox();
              richTextBox2.AppendText("Titles Grouped by Author:\n");
              enumerator = queryable.GetEnumerator();
              goto case 4;
            case 6:
              goto label_24;
            default:
              if (!CallbackRegistry.ViewModel())
              {
                num2 = 4;
                continue;
              }
              goto label_6;
          }
        }
label_1:
        RuleItemState ruleItemState = new RuleItemState();
        num1 = 2;
        continue;
label_6:
        ParameterExpression parameterExpression;
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: object of a compiler-generated type is created
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: type reference
        // ISSUE: method reference
        // ISSUE: type reference
        queryable = ruleItemState.GetTable<IteratorThreadCollection>().OrderBy<IteratorThreadCollection, string>((Expression<Func<IteratorThreadCollection, string>>) (author => author.LastName)).ThenBy<IteratorThreadCollection, string>((Expression<Func<IteratorThreadCollection, string>>) (author => author.FirstName)).Select<IteratorThreadCollection, Order<IteratorThreadCollection, string>>((Expression<Func<IteratorThreadCollection, Order<IteratorThreadCollection, string>>>) (author => new Order<IteratorThreadCollection, string>(author, author.FirstName + " " + author.LastName))).Select<Order<IteratorThreadCollection, string>, Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>>((Expression<Func<Order<IteratorThreadCollection, string>, Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>>>) (order => new Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>(order, order.author.AuthorISBNs.OrderBy<ManagerObserverObject, string>((Func<ManagerObserverObject, string>) (book => book.Title.BookTitle)).Select<ManagerObserverObject, string>((Func<ManagerObserverObject, string>) (book => book.Title.BookTitle))))).Select<Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>, Mapping<string, IEnumerable<string>>>(Expression.Lambda<Func<Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>, Mapping<string, IEnumerable<string>>>>((Expression) Expression.New((ConstructorInfo) MethodBase.GetMethodFromHandle(__methodref (Mapping<string, IEnumerable<string>>.\u002Ector), __typeref (Mapping<string, IEnumerable<string>>)), (IEnumerable<Expression>) new Expression[2]
        {
          (Expression) Expression.Property((Expression) Expression.Property((Expression) parameterExpression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>.IncludeProcess), __typeref (Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>))), (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Order<IteratorThreadCollection, string>.StartProcess), __typeref (Order<IteratorThreadCollection, string>))),
          (Expression) Expression.Property((Expression) parameterExpression, (MethodInfo) MethodBase.GetMethodFromHandle(__methodref (Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>.PublishProcess), __typeref (Indexer<Order<IteratorThreadCollection, string>, IEnumerable<string>>)))
        }, (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Mapping<string, IEnumerable<string>>.CalcProcess), __typeref (Mapping<string, IEnumerable<string>>)), (MemberInfo) MethodBase.GetMethodFromHandle(__methodref (Mapping<string, IEnumerable<string>>.CloneProcess), __typeref (Mapping<string, IEnumerable<string>>))), parameterExpression));
        num1 = 5;
      }
label_24:
      return richTextBox1;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public CallbackRegistry()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static bool SortModel() => true;

    internal static bool ViewModel() => false;
  }
}
