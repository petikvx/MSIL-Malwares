// Decompiled with JetBrains decompiler
// Type: D3DHelper.IFFWriter
// Assembly: jW4W, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F794319B-26EC-4D2B-9F2A-1AE265F208BE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.Crypt.gen-c21d98b14bd6be43d4ecc4cdaed93b309043c07a9d4653e05bd952006f8b6597.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;

namespace D3DHelper
{
  public sealed class IFFWriter : BinaryWriter
  {
    private ChunkStack m_ChunkStack;

    public IFFWriter(Stream output)
      : base(output)
    {
      this.m_ChunkStack = new ChunkStack(this);
    }

    public static IFFWriter Open(string Filename)
    {
      IFFWriter iffWriter1;
      IFFWriter iffWriter2;
      try
      {
        iffWriter1 = new IFFWriter((Stream) File.OpenWrite(Filename));
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        iffWriter2 = (IFFWriter) null;
        ProjectData.ClearProjectError();
        goto label_4;
      }
      iffWriter2 = iffWriter1;
label_4:
      return iffWriter2;
    }

    public void Push(string ID) => this.m_ChunkStack.Push(ID, ChunkType.Default);

    public void Push(string ID, ChunkType Type, uint Version = 0) => this.m_ChunkStack.Push(ID, Type, Version);

    public string Pop() => this.m_ChunkStack.Pop().ID;

    public void Write(string String, int Length)
    {
      if (Length < 0)
        throw new ArgumentOutOfRangeException(nameof (Length));
      if (Length == 0)
        return;
      byte[] buffer = new byte[checked (Length - 1 + 1)];
      if (String != null)
      {
        int num = checked (Length - 1);
        int index = 0;
        while (index <= num && index != String.Length)
        {
          buffer[index] = checked ((byte) (Strings.Asc(String[index]) & (int) byte.MaxValue));
          checked { ++index; }
        }
      }
      this.Write(buffer);
    }

    public override void Write(string String)
    {
      this.WriteInt32<int>(String.Length);
      int num = checked (String.Length - 1);
      int index = 0;
      while (index <= num)
      {
        this.Write(checked ((byte) ((int) byte.MaxValue & Strings.Asc(String[index]))));
        checked { ++index; }
      }
    }

    public void WriteInt16<T>(T Value) where T : struct => this.Write(Conversions.ToShort((object) Value));

    public void WriteUInt16<T>(T Value) where T : struct => this.Write(Conversions.ToUShort((object) Value));

    public void WriteInt32<T>(T Value) where T : struct => this.Write(Conversions.ToInteger((object) Value));

    public void WriteUInt32<T>(T Value) where T : struct => this.Write(Conversions.ToUInteger((object) Value));
  }
}
