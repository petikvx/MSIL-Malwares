// Decompiled with JetBrains decompiler
// Type: MiniGames_Team9.Attacker
// Assembly: DependentHan, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A86A1B94-F21E-4DD9-9B87-E146CFB070D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-3c000108374c842e22e4bf480441d013e260c170c6d87defb15c322a4d136adb.exe

using System.Drawing;
using System.Windows.Forms;

namespace MiniGames_Team9
{
  internal abstract class Attacker : Enemy
  {
    public static bool isStand;
    protected Point vt;
    public double attackerHealth = 100.0;
    public FigureState state;
    protected int maxHealth = 100;
    protected int timeDelay;
    private int timeStand = 0;

    public Attacker(PictureBox MAP) => this.Map = MAP;

    public Attacker(PictureBox MAP, Point vt, Direction direc)
      : base(MAP)
    {
      this.vt = vt;
      this.direction = direc;
    }

    public override void MakeAvatar()
    {
      this.MakeDirection();
      this.Avatar.Height = 40;
      this.Avatar.Width = 40;
      this.Avatar.Tag = (object) "attacker";
      this.Avatar.Location = new Point(this.vt.X, this.vt.Y);
      this.Map.Controls.Add((Control) this.Avatar);
    }

    private void MakeDirection()
    {
      if (this.direction == Direction.left)
        this.Avatar.Image = this.skin.imleft;
      else if (this.direction == Direction.right)
        this.Avatar.Image = this.skin.imright;
      else if (this.direction == Direction.up)
      {
        this.Avatar.Image = this.skin.imup;
      }
      else
      {
        if (this.direction != Direction.down)
          return;
        this.Avatar.Image = this.skin.imdown;
      }
    }

    public void Shoot()
    {
      Bullet bullet = (Bullet) new BulletSimple(this.direction, this.Avatar, "Orange");
      bullet.speed = this.speed + 3;
      bullet.BulletControl(this.Map);
    }

    private Point SetLocationBullet(Direction direct)
    {
      Point point = new Point();
      switch (direct)
      {
        case Direction.up:
          point.X = this.Avatar.Left + this.Avatar.Width / 2;
          point.Y = this.Avatar.Top;
          break;
        case Direction.down:
          point.X = this.Avatar.Left + this.Avatar.Width / 2;
          point.Y = this.Avatar.Top + this.Avatar.Height;
          break;
        case Direction.left:
          point.X = this.Avatar.Left;
          point.Y = this.Avatar.Top + this.Avatar.Height / 2;
          break;
        case Direction.right:
          point.X = this.Avatar.Left + this.Avatar.Width;
          point.Y = this.Avatar.Top + this.Avatar.Height / 2;
          break;
      }
      return point;
    }

    public override void MoveEnemy()
    {
      if (!Attacker.isStand)
      {
        switch (this.direction)
        {
          case Direction.up:
            this.Avatar.Top -= this.speed;
            this.Avatar.Image = this.skin.imup;
            break;
          case Direction.down:
            this.Avatar.Top += this.speed;
            this.Avatar.Image = this.skin.imdown;
            break;
          case Direction.left:
            this.Avatar.Left -= this.speed;
            this.Avatar.Image = this.skin.imleft;
            break;
          case Direction.right:
            this.Avatar.Left += this.speed;
            this.Avatar.Image = this.skin.imright;
            break;
        }
        this.AttackerShoot();
        this.timeStand = 0;
      }
      else if (this.timeStand == 0)
      {
        this.Shoot();
        this.timeStand = 50;
      }
      else
        --this.timeStand;
    }

    public override void DownState()
    {
      if (this.state == FigureState.strong)
      {
        this.state = FigureState.medium;
        --this.speed;
      }
      else if (this.state == FigureState.medium)
      {
        this.state = FigureState.weak;
        --this.speed;
      }
      this.MakeAttacker();
    }

    public abstract void MakeAttacker();

    public abstract void AttackerShoot();
  }
}
