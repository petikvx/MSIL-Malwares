// Decompiled with JetBrains decompiler
// Type: NoiseMe.Drags.App.Models.WebSocket4Net.Protocol.ProtocolProcessorBase
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using System;
using System.Collections.Generic;

namespace NoiseMe.Drags.App.Models.WebSocket4Net.Protocol
{
  internal abstract class ProtocolProcessorBase : IProtocolProcessor
  {
    protected const string HeaderItemFormat = "{0}: {1}";
    private static char[] s_SpaceSpliter = new char[1]
    {
      ' '
    };

    public ProtocolProcessorBase(WebSocketVersion version, ICloseStatusCode closeStatusCode)
    {
      this.CloseStatusCode = closeStatusCode;
      this.Version = version;
      this.VersionTag = ((int) version).ToString();
    }

    public abstract void SendHandshake(WebSocket websocket);

    public abstract ReaderBase CreateHandshakeReader(WebSocket websocket);

    public abstract bool VerifyHandshake(
      WebSocket websocket,
      WebSocketCommandInfo handshakeInfo,
      out string description);

    public abstract void SendMessage(WebSocket websocket, string message);

    public abstract void SendCloseHandshake(
      WebSocket websocket,
      int statusCode,
      string closeReason);

    public abstract void SendPing(WebSocket websocket, string ping);

    public abstract void SendPong(WebSocket websocket, string pong);

    public abstract void SendData(WebSocket websocket, byte[] data, int offset, int length);

    public abstract void SendData(WebSocket websocket, IList<ArraySegment<byte>> segments);

    public abstract bool SupportBinary { get; }

    public abstract bool SupportPingPong { get; }

    public ICloseStatusCode CloseStatusCode { get; private set; }

    public WebSocketVersion Version { get; private set; }

    protected string VersionTag { get; private set; }

    protected virtual bool ValidateVerbLine(string verbLine)
    {
      string[] strArray = verbLine.Split(ProtocolProcessorBase.s_SpaceSpliter, 3, StringSplitOptions.RemoveEmptyEntries);
      if (strArray.Length < 2 || !strArray[0].StartsWith("HTTP/"))
        return false;
      int result = 0;
      return int.TryParse(strArray[1], out result) && result == 101;
    }
  }
}
