// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: EraIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: DF309F35-9A6B-48AA-8FAD-6A916AD051A5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-58c054c4226f2a650a02bbf4b2db908c7317491c91a4f3254cc0d835c474897d.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 895374470;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 280716991)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 353236512 ^ 388818996;
            continue;
          case 2:
            goto label_3;
          case 3:
            num1 = (int) num2 * -423918325 ^ -935101260;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
      int asInt = json["max-impact"].AsInt;
      return new Rules()
      {
        SprintCount = json["sprints"].AsInt,
        MaxImpact = asInt,
        Cards = Rules.ParseDeck(json["deck"], asInt),
        InitialResources = json["initial-resources"].AsInt,
        NormalPlanningCount = json["normal-planning-count"].AsInt,
        NormalPlanningCost = json["normal-planning-cost"].AsInt,
        OverPlanningCost = json["over-planning-cost"].AsInt,
        SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
        RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
        EconomicsAffectsAll = json["economics-affects-all"].AsBool,
        StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
        OnlyOneWinner = json["only-one-winner"].AsBool
      };
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 813999975;
      float[] riskChances;
      int aIndex;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1867644848)) % 8U)
        {
          case 0:
            riskChances = numArray;
            num1 = (int) num2 * -151661947 ^ -421983754;
            continue;
          case 2:
            num1 = (int) num2 * 1719197266 ^ -961689288;
            continue;
          case 3:
            goto label_1;
          case 4:
            int num3;
            num1 = num3 = aIndex < numArray.Length ? 1592915877 : (num3 = 118360176);
            continue;
          case 5:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = 114262492;
            continue;
          case 6:
            num1 = (int) num2 * -2089816772 ^ -528202207;
            continue;
          case 7:
            aIndex = 0;
            num1 = (int) num2 * 224950421 ^ -321324111;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
label_1:
      int num1 = -2110119713;
      bool flag1;
      int num2;
      JSONNode jsonNode;
      int aIndex1;
      int aIndex2;
      List<Card> cardList;
      bool flag2;
      Card[] array;
      int count;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1275563313)) % 25U)
        {
          case 0:
            flag1 = num2 < jsonNode[aIndex1].AsInt;
            num1 = -308125099;
            continue;
          case 1:
            count = json.Count;
            cardList = new List<Card>();
            num1 = (int) num3 * 2109039710 ^ -1305506328;
            continue;
          case 3:
            flag3 = aIndex2 < count;
            num1 = -1535537093;
            continue;
          case 4:
            flag2 = aIndex1 < maxImpact;
            num1 = (int) num3 * -546396231 ^ 1847130004;
            continue;
          case 5:
            ++aIndex1;
            num1 = (int) num3 * 1118502564 ^ -553691136;
            continue;
          case 6:
            num1 = (int) num3 * 763561792 ^ -36149717;
            continue;
          case 7:
            aIndex1 = 0;
            num1 = (int) num3 * 1504627144 ^ 1783169302;
            continue;
          case 8:
            num1 = (int) num3 * -1697959373 ^ 1002875041;
            continue;
          case 9:
            num1 = (int) num3 * -1522027771 ^ 1395746097;
            continue;
          case 10:
            array = cardList.ToArray();
            num1 = (int) num3 * -342834719 ^ 916576016;
            continue;
          case 11:
            num1 = (int) num3 * -2076251040 ^ 2047179819;
            continue;
          case 12:
            int num4 = !flag3 ? 1139051872 : (num4 = 904910801);
            num1 = num4 ^ (int) num3 * 1528900265;
            continue;
          case 13:
            ++num2;
            num1 = (int) num3 * 1015522623 ^ 1170481991;
            continue;
          case 14:
            jsonNode = json[aIndex2];
            num1 = -1217909920;
            continue;
          case 15:
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = -990073833;
            continue;
          case 16:
            aIndex2 = 0;
            num1 = (int) num3 * -119159242 ^ 1848970709;
            continue;
          case 17:
            num1 = -1044796296;
            continue;
          case 18:
            num2 = 0;
            num1 = -352424047;
            continue;
          case 19:
            int num5 = flag1 ? 1877419285 : (num5 = 539382234);
            num1 = num5 ^ (int) num3 * 779142380;
            continue;
          case 20:
            num1 = (int) num3 * -458123577 ^ -401158237;
            continue;
          case 21:
            num1 = (int) num3 * -1743798056 ^ -1152219918;
            continue;
          case 22:
            ++aIndex2;
            num1 = (int) num3 * -1150286530 ^ -390239459;
            continue;
          case 23:
            goto label_1;
          case 24:
            int num6;
            num1 = num6 = aIndex1 >= maxImpact * 2 ? -1763289600 : (num6 = -270798601);
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
      string str = Rules.\u200E⁬‌‍⁪‭⁪‍⁮‌⁪‪‬‮‭​‭⁫‍⁫‭​⁮⁮‌‭⁪⁭‌‬⁭⁪⁯‭‍⁪‫‎‬⁮‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
      {
        (object) this.SprintCount,
        (object) this.MaxImpact,
        (object) this.CardsToString(),
        (object) this.InitialResources,
        (object) this.NormalPlanningCount,
        (object) this.NormalPlanningCost,
        (object) this.OverPlanningCost,
        (object) this.SprintsWonWithoutPlanning,
        (object) this.RiskChancesToString(),
        (object) this.EconomicsAffectsAll,
        (object) this.StayOnSprintMinDiff,
        (object) this.OnlyOneWinner
      });
label_1:
      int num1 = 69378036;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1713751708)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * 1197523998 ^ 641343773;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -883974523;
      int index;
      string str1;
      Card card1;
      Card[] cards;
      int num2;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -211604626)) % 17U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = Rules.\u202A⁫​‭‬​‪‎‭‪‌​‏⁮‪‌⁮​⁯‪‌​⁪‏​‫⁪‌‍‎‍‏⁫‏‌‎⁬‬⁪⁪‮(str1, "\n\t");
            num1 = (int) num3 * 1564877483 ^ -1143424262;
            continue;
          case 2:
            num1 = (int) num3 * -1089549330 ^ 204829832;
            continue;
          case 3:
            cards = this.Cards;
            num1 = (int) num3 * 262501893 ^ -666655717;
            continue;
          case 4:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u202D‪⁬‌‏‮⁮‌⁪‍‮‬‭⁯⁪⁪‏‮‎‎‍⁭‮‭‪‭⁭‬‎‭‎‫‌​⁯⁭‍‭‮⁮‮((object) card2) : (string) null;
            str1 = Rules.\u200F‭‪‫‎⁪‍‬⁪‎‭‍‪⁪⁪⁫‮‮⁪‎‎‎‮⁬‎‏​‌​‭⁫⁮⁯‏‪⁮‌‬⁫⁫‮(str3, str4, " ");
            num1 = -94653515;
            continue;
          case 6:
            str1 = "[\n\t";
            num2 = 0;
            num1 = (int) num3 * -14669563 ^ -174306801;
            continue;
          case 7:
            str2 = Rules.\u202A⁫​‭‬​‪‎‭‪‌​‏⁮‪‌⁮​⁯‪‌​⁪‏​‫⁪‌‍‎‍‏⁫‏‌‎⁬‬⁪⁪‮(str1, "\n]");
            num1 = (int) num3 * -326533319 ^ -877401937;
            continue;
          case 8:
            index = 0;
            num1 = (int) num3 * -993065881 ^ -287548768;
            continue;
          case 9:
            num1 = (int) num3 * -480965013 ^ 1298900016;
            continue;
          case 10:
            num1 = (int) num3 * 1748961352 ^ 134178304;
            continue;
          case 11:
            num1 = (int) num3 * 1227108952 ^ -661275647;
            continue;
          case 12:
            num2 = card1.Type;
            num1 = (int) num3 * 1474230107 ^ -676797232;
            continue;
          case 13:
            num1 = (int) num3 * -1178852602 ^ -5876441;
            continue;
          case 14:
            card1 = cards[index];
            int num4;
            num1 = num4 = num2 != card1.Type ? -258153097 : (num4 = -116913816);
            continue;
          case 15:
            ++index;
            num1 = (int) num3 * 874764247 ^ -1407564409;
            continue;
          case 16:
            int num5;
            num1 = num5 = index >= cards.Length ? -2031560374 : (num5 = -1686430188);
            continue;
          default:
            goto label_18;
        }
      }
label_18:
      return str2;
    }

    private string RiskChancesToString()
    {
label_1:
      int num1 = -741042556;
      string str1;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -851943168)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            ++index;
            num1 = (int) num2 * 2093912155 ^ 1813557021;
            continue;
          case 3:
            str1 = Rules.\u202A⁫​‭‬​‪‎‭‪‌​‏⁮‪‌⁮​⁯‪‌​⁪‏​‫⁪‌‍‎‍‏⁫‏‌‎⁬‬⁪⁪‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u200E​‬‫‍​‭⁯‏‬‮⁪⁯⁫‏⁮‭‮‬‭‏⁬⁫⁪⁬⁮‬⁯⁪‌​‍‫‮‭⁯⁬⁮⁬⁪‮()));
            num1 = (int) num2 * -1025210508 ^ -29500011;
            continue;
          case 4:
            str1 = Rules.\u200F‭‪‫‎⁪‍‬⁪‎‭‍‪⁪⁪⁫‮‮⁪‎‎‎‮⁬‎‏​‌​‭⁫⁮⁯‏‪⁮‌‬⁫⁫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u200E​‬‫‍​‭⁯‏‬‮⁪⁯⁫‏⁮‭‮‬‭‏⁬⁫⁪⁬⁮‬⁯⁪‌​‍‫‮‭⁯⁬⁮⁬⁪‮()));
            num1 = -1090512139;
            continue;
          case 5:
            flag = index < this.RiskChances.Length;
            num1 = -407847368;
            continue;
          case 6:
            index = 1;
            num1 = (int) num2 * -591643191 ^ 1145377063;
            continue;
          case 7:
            int num3 = !flag ? 1753832717 : (num3 = 1332920339);
            num1 = num3 ^ (int) num2 * 1609630918;
            continue;
          case 8:
            str2 = Rules.\u202A⁫​‭‬​‪‎‭‪‌​‏⁮‪‌⁮​⁯‪‌​⁪‏​‫⁪‌‍‎‍‏⁫‏‌‎⁬‬⁪⁪‮(str1, " ]");
            num1 = (int) num2 * 1563283186 ^ 1432511028;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200E⁬‌‍⁪‭⁪‍⁮‌⁪‪‬‮‭​‭⁫‍⁫‭​⁮⁮‌‭⁪⁭‌‬⁭⁪⁯‭‍⁪‫‎‬⁮‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202A⁫​‭‬​‪‎‭‪‌​‏⁮‪‌⁮​⁯‪‌​⁪‏​‫⁪‌‍‎‍‏⁫‏‌‎⁬‬⁪⁪‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u202D‪⁬‌‏‮⁮‌⁪‍‮‬‭⁯⁪⁪‏‮‎‎‍⁭‮‭‪‭⁭‬‎‭‎‫‌​⁯⁭‍‭‮⁮‮([In] object obj0) => obj0.ToString();

    static string \u200F‭‪‫‎⁪‍‬⁪‎‭‍‪⁪⁪⁫‮‮⁪‎‎‎‮⁬‎‏​‌​‭⁫⁮⁯‏‪⁮‌‬⁫⁫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u200E​‬‫‍​‭⁯‏‬‮⁪⁯⁫‏⁮‭‮‬‭‏⁬⁫⁪⁬⁮‬⁯⁪‌​‍‫‮‭⁯⁬⁮⁬⁪‮() => CultureInfo.InvariantCulture;
  }
}
