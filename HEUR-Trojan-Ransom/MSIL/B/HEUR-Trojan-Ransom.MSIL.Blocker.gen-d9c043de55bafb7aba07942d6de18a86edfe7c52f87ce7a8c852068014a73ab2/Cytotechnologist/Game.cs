// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Game
// Assembly: CORINFOEHCLAU, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CA1C166-25B8-418F-B14D-0C0D6D66CCB2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-d9c043de55bafb7aba07942d6de18a86edfe7c52f87ce7a8c852068014a73ab2.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Text;

namespace Cytotechnologist
{
  public class Game
  {
    public readonly Rules Rules;
    public readonly Player[] Players;
    private readonly PlayerState[] _playerStates;
    private readonly Dice _dice;
    private List<Card> _deck;
    public readonly List<int> Winners = new List<int>();
    public readonly List<int> Losers = new List<int>();
    private int _currentPlayer = 2147483645;
    private int _currentTurn;
    private List<float> _chances;
    private readonly Random _random;
    private readonly StringBuilder _buffer;
    private bool _finished;
    private int _currentChanceIndex;

    public Game(JSONNode json, StringBuilder buffer)
    {
      this._buffer = buffer;
      this._random = Game.\u206D‍⁮‬⁯‭‬⁭‫‫‮‫‎‎‏​⁫⁯⁮‪‬⁮‏⁫⁯⁯‎‪⁭⁪⁯‮‮⁫⁭‏⁯‮‮⁭‮((int) DateTime.Now.Ticks);
      this.Rules = Rules.Deserialize(json["rules"]);
      this._dice = new Dice();
      JSONNode jsonNode = json["players"];
      int count = jsonNode.Count;
      this.Players = new Player[count];
      for (int aIndex = 0; aIndex < count; ++aIndex)
        this.Players[aIndex] = Player.Deserialize(jsonNode[aIndex]);
      this._playerStates = new PlayerState[count];
      for (int index = 0; index < count; ++index)
        this._playerStates[index] = new PlayerState();
    }

    public bool Finished
    {
      get
      {
label_1:
        int num1 = 1654322428;
        PlayerState[] playerStates;
        int index;
        PlayerState playerState;
        bool finished;
        bool flag;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 771723782)) % 16U)
          {
            case 0:
              finished = true;
              num1 = (int) num2 * 838500395 ^ -1067585696;
              continue;
            case 1:
              num1 = 2077382207;
              continue;
            case 2:
              num1 = (int) num2 * -800265448 ^ -1538957458;
              continue;
            case 3:
              goto label_1;
            case 4:
              finished = false;
              num1 = (int) num2 * -835491920 ^ -943020247;
              continue;
            case 5:
              num1 = (int) num2 * -1219165 ^ 230908374;
              continue;
            case 6:
              num1 = (int) num2 * 409271193 ^ -55501633;
              continue;
            case 7:
              finished = true;
              num1 = (int) num2 * -1867428162 ^ 1874911393;
              continue;
            case 8:
              int num3;
              num1 = num3 = index >= playerStates.Length ? 366743057 : (num3 = 71883995);
              continue;
            case 9:
              playerStates = this._playerStates;
              index = 0;
              num1 = (int) num2 * -1476184158 ^ 1486635382;
              continue;
            case 10:
              int num4 = this._finished ? 188690516 : (num4 = 1199584165);
              num1 = num4 ^ (int) num2 * -145486579;
              continue;
            case 11:
              ++index;
              num1 = 1746821214;
              continue;
            case 12:
              int num5 = flag ? 663345066 : (num5 = 248528901);
              num1 = num5 ^ (int) num2 * 1672383330;
              continue;
            case 13:
              playerState = playerStates[index];
              num1 = 167955336;
              continue;
            case 14:
              flag = playerState.State == State.Playing;
              num1 = (int) num2 * -1882833725 ^ 476928112;
              continue;
            default:
              goto label_17;
          }
        }
label_17:
        return finished;
      }
    }

    public void ShuffleCards() => this._deck = new List<Card>((IEnumerable<Card>) this.Rules.Cards);

    public void StartNew()
    {
label_1:
      int num1 = -2095248961;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -348365378)) % 9U)
        {
          case 0:
            this.Winners.Clear();
            num1 = (int) num2 * 949058760 ^ 18686844;
            continue;
          case 1:
            this._currentChanceIndex = -1;
            num1 = (int) num2 * -1437325086 ^ -313653548;
            continue;
          case 2:
            this.Losers.Clear();
            num1 = (int) num2 * 1754892276 ^ -46639911;
            continue;
          case 4:
            num1 = (int) num2 * -884568777 ^ 1339753216;
            continue;
          case 5:
            this._finished = false;
            num1 = (int) num2 * -586331631 ^ 495348153;
            continue;
          case 6:
            this.ShuffleCards();
            num1 = (int) num2 * 56055781 ^ -229642306;
            continue;
          case 7:
            this._currentPlayer = this.Players.Length;
            this._currentTurn = 0;
            num1 = (int) num2 * 169493704 ^ -876398408;
            continue;
          case 8:
            goto label_1;
          default:
            goto label_10;
        }
      }
label_10:
      this._chances = new List<float>((IEnumerable<float>) this.Rules.RiskChances);
    }

    public void PlanningState()
    {
      int index = 0;
label_12:
      bool flag1 = index < this.Players.Length;
      int num1 = -1906446338;
      PlayerState playerState;
      int num2;
      bool flag2;
      Player player;
      bool flag3;
      int planningCardsCount;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -645463365)) % 23U)
        {
          case 0:
            playerState.Resources -= (planningCardsCount - num2) * this.Rules.NormalPlanningCost;
            num1 = -757390211;
            continue;
          case 1:
            num1 = -1155884306;
            continue;
          case 2:
            playerState.Resources -= num2 * this.Rules.OverPlanningCost;
            num1 = (int) num3 * 1251871803 ^ -1044034689;
            continue;
          case 3:
            flag3 = planningCardsCount == 0;
            num1 = (int) num3 * -1784502883 ^ -1062772036;
            continue;
          case 4:
            num1 = (int) num3 * -1490492720 ^ 1160912910;
            continue;
          case 5:
            num2 = planningCardsCount - this.Rules.NormalPlanningCount;
            int num4 = player.UseOneMorePlanningSprint ? 2130752992 : (num4 = 415868996);
            num1 = num4 ^ (int) num3 * -1314466451;
            continue;
          case 6:
            goto label_3;
          case 7:
            player = this.Players[index];
            playerState = this._playerStates[index];
            playerState.Sprint = 0;
            playerState.Resources = this.Rules.InitialResources;
            playerState.State = State.Playing;
            num1 = -744234670;
            continue;
          case 8:
            int num5 = flag1 ? 1114665980 : (num5 = 358047642);
            num1 = num5 ^ (int) num3 * 2036210575;
            continue;
          case 9:
            num2 = 0;
            num1 = -373732490;
            continue;
          case 10:
            int num6 = !flag3 ? -1011666414 : (num6 = -1381805119);
            num1 = num6 ^ (int) num3 * 459111281;
            continue;
          case 11:
            ++index;
            num1 = (int) num3 * 277851729 ^ -532462623;
            continue;
          case 12:
            playerState.Sprint = 1;
            num1 = (int) num3 * -935498921 ^ -1490913987;
            continue;
          case 13:
            planningCardsCount = player.PlanningCardsCount;
            num2 = 0;
            num1 = (int) num3 * 1723872106 ^ -1370175680;
            continue;
          case 14:
            num1 = (int) num3 * -1912681089 ^ 961760535;
            continue;
          case 15:
            goto label_12;
          case 16:
            num1 = -1529437321;
            continue;
          case 17:
            flag2 = num2 > 0;
            num1 = -1031668556;
            continue;
          case 18:
            playerState.Resources -= num2 * this.Rules.NormalPlanningCost;
            num1 = (int) num3 * -382339745 ^ 2038547124;
            continue;
          case 19:
            int num7 = !flag2 ? 1797527602 : (num7 = 1531211390);
            num1 = num7 ^ (int) num3 * -1679544110;
            continue;
          case 20:
            num1 = -1196042945;
            continue;
          case 21:
            playerState.Sprint = -1;
            num1 = (int) num3 * -1919163830 ^ 849156921;
            continue;
          case 22:
            num1 = (int) num3 * -990832453 ^ 1091558412;
            continue;
          default:
            goto label_25;
        }
      }
label_3:
      return;
label_25:;
    }

    public void TurnState()
    {
      ++this._currentPlayer;
label_1:
      int num1 = 980781658;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 991647836)) % 13U)
        {
          case 0:
            goto label_1;
          case 1:
            this._currentPlayer = 0;
            int num3 = this._currentTurn <= 0 ? 1437932473 : (num3 = 771865919);
            num1 = num3 ^ (int) num2 * -1775931727;
            continue;
          case 2:
            num1 = (int) num2 * -723942080 ^ 824012290;
            continue;
          case 3:
            this.Print((object) "\n\nGAME STATE\n{0}\n\n-- END OF TURN {1} --\n\n", (object) this, (object) this._currentTurn);
            num1 = (int) num2 * 574057257 ^ 323226954;
            continue;
          case 4:
            int num4 = this._currentPlayer >= this.Players.Length ? -360135393 : (num4 = -361995961);
            num1 = num4 ^ (int) num2 * -4950686;
            continue;
          case 5:
            num1 = (int) num2 * 1706190109 ^ 209285693;
            continue;
          case 6:
            num1 = (int) num2 * 470057116 ^ 247618685;
            continue;
          case 7:
            num1 = (int) num2 * -1100846533 ^ -1768104532;
            continue;
          case 8:
            this.Print((object) Game.\u202D‭⁯⁮‌⁮⁭⁮⁭‏⁫‍‍⁪‏⁮‍‪‭⁮‫‏⁫​‏⁫⁮‍⁯‫‍‫‭‪⁯‫⁫⁬⁫⁬‮("RISK CHANCE: ", this.Rules.RiskChances[this._currentChanceIndex].ToString()));
            num1 = (int) num2 * 1815773226 ^ -519681844;
            continue;
          case 9:
            this._currentChanceIndex = (this._currentChanceIndex + 1) % this._chances.Count;
            num1 = (int) num2 * -696196801 ^ 509105565;
            continue;
          case 10:
            this.Print((object) Game.\u200C‎‮⁭‮​⁬‬⁭‎‎‍‫⁭⁫‌⁯‫‪⁭​⁪‮‮⁪‫‫‪⁯‬⁬​‪⁭⁯‫‭⁮⁪‏‮("-- BEGINNING OF TURN ", (++this._currentTurn).ToString(), " --"));
            num1 = 148931173;
            continue;
          case 11:
            this.PlayerTurn(this._currentPlayer);
            num1 = 1089976949;
            continue;
          case 12:
            goto label_3;
          default:
            goto label_15;
        }
      }
label_3:
      return;
label_15:;
    }

    private void PlayerTurn(int playerIndex)
    {
label_1:
      int num1 = 211552799;
      while (true)
      {
        uint num2;
        PlayerState playerState1;
        Card card;
        int num3;
        int num4;
        int index;
        bool flag1;
        bool flag2;
        PlayerState playerState2;
        bool flag3;
        int num5;
        bool flag4;
        bool flag5;
        bool flag6;
        Player player;
        bool flag7;
        bool onlyOneWinner;
        int num6;
        switch ((num2 = (uint) (num1 ^ 1250897019)) % 77U)
        {
          case 0:
            flag5 = card.Impact < 0;
            if (!this.Rules.EconomicsAffectsAll)
            {
              num6 = 0;
              break;
            }
            num1 = (int) num2 * -782469331 ^ 708541434;
            continue;
          case 1:
            this._finished = true;
            num1 = (int) num2 * 371112199 ^ -1145491194;
            continue;
          case 2:
            PlayerState playerState3 = playerState1;
            this.Print((object) Game.\u202D‭⁯⁮‌⁮⁭⁮⁭‏⁫‍‍⁪‏⁮‍‪‭⁮‫‏⁫​‏⁫⁮‍⁯‫‍‫‭‪⁯‫⁫⁬⁫⁬‮("\t", playerState3 != null ? Game.\u202B‌⁮‏⁭⁬‭⁪⁯⁬‌⁮⁯‫‎‫‫⁯​‪‍‮⁭⁮‫⁭‏‭⁮⁯⁫‬⁮‎‌‭⁪‫⁪‪‮((object) playerState3) : (string) null));
            num1 = 1952767470;
            continue;
          case 3:
            num1 = (int) num2 * 1810785831 ^ 698975800;
            continue;
          case 4:
            num1 = (int) num2 * -2073809187 ^ -676532498;
            continue;
          case 5:
            playerState2.Resources -= Game.\u206E‍⁯⁪​‎⁬⁫‎⁪⁯‭‭‎⁪‏‏‎⁭‭​‪‌‍⁪⁮⁫‫⁪‌‏‌‮‍‌⁮‬‭‮‭‮(0, num3 - this.Players[index].PlannedForCard(card.Type));
            int num7 = playerState2.Resources >= 0 ? -82184553 : (num7 = -868195617);
            num1 = num7 ^ (int) num2 * 1031763140;
            continue;
          case 6:
            num1 = (int) num2 * -157971645 ^ 1558847411;
            continue;
          case 7:
            index = 0;
            num1 = 211816506;
            continue;
          case 8:
            num1 = (int) num2 * 672147308 ^ -1438312082;
            continue;
          case 9:
            num1 = (int) num2 * -1735766805 ^ 1406737134;
            continue;
          case 10:
            num1 = 1579330538;
            continue;
          case 11:
            flag1 = false;
            num1 = 1701222639;
            continue;
          case 12:
            int num8;
            num1 = num8 = num5 < this._playerStates.Length ? 324638362 : (num8 = 1482606099);
            continue;
          case 13:
            flag6 = !this._dice.Roll(this._chances[this._currentChanceIndex]);
            num1 = 1787401177;
            continue;
          case 14:
            int num9 = playerState1.Resources >= 0 ? 1371862431 : (num9 = 378074077);
            num1 = num9 ^ (int) num2 * 615692910;
            continue;
          case 15:
            this.Print((object) "CARD: {0}, {1}{2} {3} and {4}", (object) card, flag4 ? (object) "ALL " : (object) "", flag5 ? (object) "receives" : (object) "pays", (object) Game.\u200E‏‭‍‌⁯⁬‏⁪​‭⁪‭⁫‏‍⁯‮‏‌‮‮⁭⁯‮‮⁬⁭‎‮⁬⁫‬⁮‎​⁮⁭⁭‮‮(num3), flag1 ? (object) "advance" : (object) "stay");
            flag7 = !flag4;
            num1 = 1127822474;
            continue;
          case 16:
            onlyOneWinner = this.Rules.OnlyOneWinner;
            num1 = (int) num2 * -285740628 ^ 1867566901;
            continue;
          case 17:
            playerState2 = this._playerStates[index];
            num1 = (int) num2 * 884937686 ^ -1949738785;
            continue;
          case 18:
            int num10 = num5 == playerIndex ? 1286692840 : (num10 = 1548791605);
            num1 = num10 ^ (int) num2 * 1904969629;
            continue;
          case 19:
            num1 = (int) num2 * 1253415262 ^ -1168898941;
            continue;
          case 20:
            playerState1.State = State.Lose;
            int num11 = !this.Losers.Contains(playerIndex) ? 553937709 : (num11 = 1406200230);
            num1 = num11 ^ (int) num2 * 1747027609;
            continue;
          case 21:
            this.Losers.Add(num5);
            num1 = (int) num2 * 633977411 ^ 219753103;
            continue;
          case 22:
            flag1 = true;
            num1 = (int) num2 * 1903903218 ^ 1909633361;
            continue;
          case 23:
            int num12 = playerState1.State == 0 ? 246081363 : (num12 = 79666319);
            num1 = num12 ^ (int) num2 * 859487909;
            continue;
          case 24:
            num1 = 1834573959;
            continue;
          case 25:
            int num13 = !flag6 ? 1844998565 : (num13 = 1964237634);
            num1 = num13 ^ (int) num2 * 1840131488;
            continue;
          case 26:
            num1 = 1119442658;
            continue;
          case 27:
            num1 = (int) num2 * 1064931853 ^ 691884950;
            continue;
          case 28:
            num1 = (int) num2 * -2067220377 ^ -900556610;
            continue;
          case 29:
            ++num5;
            num1 = 1611382886;
            continue;
          case 30:
            num1 = 2145482068;
            continue;
          case 31:
            player = this.Players[playerIndex];
            playerState1 = this._playerStates[playerIndex];
            this.Print((object) Game.\u202D‭⁯⁮‌⁮⁭⁮⁭‏⁫‍‍⁪‏⁮‍‪‭⁮‫‏⁫​‏⁫⁮‍⁯‫‍‫‭‪⁯‫⁫⁬⁫⁬‮("\nPLAYER ", playerIndex.ToString()));
            num1 = (int) num2 * -1078003573 ^ -1481914808;
            continue;
          case 32:
            int num14 = !flag2 ? 1239862470 : (num14 = 1246465856);
            num1 = num14 ^ (int) num2 * -125352277;
            continue;
          case 33:
            int num15;
            num1 = num15 = playerState1.Sprint <= this.Rules.SprintCount ? 2082377107 : (num15 = 599383606);
            continue;
          case 34:
            int num16;
            num1 = num16 = index >= this._playerStates.Length ? 1587814034 : (num16 = 1794112474);
            continue;
          case 35:
            num1 = (int) num2 * 568749491 ^ -1286904937;
            continue;
          case 36:
            this.Losers.Add(index);
            num1 = (int) num2 * 140361127 ^ -304079796;
            continue;
          case 37:
            int num17;
            num1 = num17 = this.Losers.Contains(num5) ? 1259740438 : (num17 = 26745406);
            continue;
          case 38:
            int num18 = !flag7 ? -454975576 : (num18 = -1665343868);
            num1 = num18 ^ (int) num2 * 126550824;
            continue;
          case 39:
            this.Winners.Add(playerIndex);
            num1 = (int) num2 * 1180718371 ^ 246176351;
            continue;
          case 40:
            this.Losers.Add(playerIndex);
            num1 = (int) num2 * -78396519 ^ -154139504;
            continue;
          case 41:
            num1 = (int) num2 * -245311800 ^ 1226314218;
            continue;
          case 42:
            goto label_3;
          case 43:
            playerState1.Resources -= num3;
            num1 = (int) num2 * -401563691 ^ -1871254544;
            continue;
          case 44:
            ++index;
            num1 = 222654105;
            continue;
          case 45:
            num1 = (int) num2 * -713862557 ^ 2076193321;
            continue;
          case 46:
            ++playerState1.Sprint;
            num1 = (int) num2 * -2008172557 ^ 52571523;
            continue;
          case 47:
            num3 = Game.\u206E‍⁯⁪​‎⁬⁫‎⁪⁯‭‭‎⁪‏‏‎⁭‭​‪‌‍⁪⁮⁫‫⁪‌‏‌‮‍‌⁮‬‭‮‭‮(0, num4);
            num1 = (int) num2 * -1110237844 ^ -1250906683;
            continue;
          case 48:
            num1 = 1932733377;
            continue;
          case 49:
            num4 = card.Impact - player.PlannedForCard(card.Type);
            flag1 = num4 < this.Rules.StayOnSprintMinDiff;
            num1 = (int) num2 * -45660240 ^ 1675505248;
            continue;
          case 50:
            num1 = (int) num2 * 1929294257 ^ 1634149260;
            continue;
          case 51:
            playerState2.State = State.Lose;
            num1 = 143020307;
            continue;
          case 52:
            flag2 = flag1;
            num1 = 1944935952;
            continue;
          case 53:
            num1 = (int) num2 * 2046945686 ^ -1969416221;
            continue;
          case 54:
            playerState1.State = State.Won;
            num1 = (int) num2 * -1185253853 ^ -1075474888;
            continue;
          case 55:
            this.Print((object) "Still planning");
            num1 = (int) num2 * 1688297285 ^ -452306938;
            continue;
          case 56:
            num1 = (int) num2 * -1524645414 ^ 2017158125;
            continue;
          case 57:
            num1 = 909757290;
            continue;
          case 58:
            int num19 = !flag3 ? -623941052 : (num19 = -1081782349);
            num1 = num19 ^ (int) num2 * 533739211;
            continue;
          case 59:
            flag1 = true;
            this.Print((object) "CARD: none, advance");
            num1 = (int) num2 * 1571503771 ^ -618307070;
            continue;
          case 60:
            this.Print((object) playerState1.State);
            num1 = (int) num2 * 1556862965 ^ -224713283;
            continue;
          case 61:
            flag3 = playerState1.Sprint < 0;
            num1 = 191933834;
            continue;
          case 62:
            num6 = card.Type == 4 ? 1 : 0;
            break;
          case 63:
            num1 = (int) num2 * 844784322 ^ 1901010860;
            continue;
          case 64:
            card = this.DrawCard();
            num1 = (int) num2 * -1931207319 ^ -982908141;
            continue;
          case 65:
            int num20 = !this.Losers.Contains(index) ? 1176718086 : (num20 = 1840014903);
            num1 = num20 ^ (int) num2 * 904348183;
            continue;
          case 66:
            num1 = 1955073515;
            continue;
          case 67:
            num5 = 0;
            num1 = (int) num2 * 405871187 ^ -1951965160;
            continue;
          case 68:
            num1 = (int) num2 * 1938431832 ^ -1791598799;
            continue;
          case 69:
            ++playerState1.Sprint;
            num1 = (int) num2 * -1456777874 ^ 1919634915;
            continue;
          case 70:
            goto label_1;
          case 71:
            num1 = 1851760332;
            continue;
          case 72:
            num1 = (int) num2 * -836850788 ^ -1571007039;
            continue;
          case 73:
            num1 = 2082377107;
            continue;
          case 74:
            num1 = (int) num2 * 32990224 ^ 1167030510;
            continue;
          case 75:
            int num21 = !onlyOneWinner ? 244474462 : (num21 = 998073044);
            num1 = num21 ^ (int) num2 * -70807872;
            continue;
          case 76:
            num3 = card.Impact;
            num1 = (int) num2 * 379275997 ^ 640384843;
            continue;
          default:
            goto label_82;
        }
        flag4 = num6 != 0;
        int num22;
        num1 = num22 = !flag5 ? 2072001283 : (num22 = 1801788855);
      }
label_3:
      return;
label_82:;
    }

    private Card DrawCard()
    {
      if (this._deck.Count > 0)
        goto label_4;
label_1:
      int num1 = 189374841;
label_2:
      Card card1;
      Card card2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1100337443)) % 7U)
        {
          case 0:
            num1 = (int) num2 * -1098620666 ^ 653132802;
            continue;
          case 1:
            card2 = card1;
            num1 = (int) num2 * -2057426838 ^ -1341793874;
            continue;
          case 2:
            this.ShuffleCards();
            num1 = (int) num2 * -1083197759 ^ 367558069;
            continue;
          case 3:
            goto label_1;
          case 5:
            goto label_4;
          case 6:
            this._deck.RemoveAt(0);
            num1 = (int) num2 * -1126652829 ^ 15313675;
            continue;
          default:
            goto label_8;
        }
      }
label_8:
      return card2;
label_4:
      card1 = this._deck[0];
      num1 = 1419997475;
      goto label_2;
    }

    public string ToString(bool initial)
    {
label_1:
      int num1 = 684939385;
      int index;
      bool flag;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1726874167)) % 9U)
        {
          case 0:
            goto label_1;
          case 2:
            int num3 = flag ? -1231493354 : (num3 = -301903620);
            num1 = num3 ^ (int) num2 * -695623183;
            continue;
          case 3:
            num1 = (int) num2 * 771034036 ^ -2116613277;
            continue;
          case 4:
            string[] strArray = new string[5]
            {
              str1,
              index.ToString(),
              ": ",
              null,
              null
            };
            PlayerState playerState = this._playerStates[index];
            strArray[3] = playerState != null ? Game.\u202B‌⁮‏⁭⁬‭⁪⁯⁬‌⁮⁯‫‎‫‫⁯​‪‍‮⁭⁮‫⁭‏‭⁮⁯⁫‬⁮‎‌‭⁪‫⁪‪‮((object) playerState) : (string) null;
            strArray[4] = "\n";
            str1 = Game.\u200B‌‪⁬⁮‭‍‏‬‫‬‫⁪‌​⁮‌​‎⁬‬⁯‪​‏‮‫‮⁫⁪⁭‍⁫​⁫⁫⁯⁯‬‌‮(strArray);
            ++index;
            num1 = 211239819;
            continue;
          case 5:
            str2 = str1;
            num1 = (int) num2 * -694724079 ^ -1449052079;
            continue;
          case 6:
            flag = index < this._playerStates.Length;
            num1 = 1823098858;
            continue;
          case 7:
            str1 = "";
            num1 = (int) num2 * 1542680215 ^ -1364134768;
            continue;
          case 8:
            index = 0;
            num1 = (int) num2 * -870540946 ^ 2034095155;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    public override string ToString()
    {
label_1:
      int num1 = 131116086;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 2116921588)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            str = this.ToString(false);
            num1 = (int) num2 * 2056741810 ^ -1311924253;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    private void Print(object text, params object[] more)
    {
label_1:
      int num1 = 1742321450;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 985569176)) % 4U)
        {
          case 0:
            goto label_1;
          case 1:
            Game.\u202B⁪‎‭​‬‭‮‍⁮‏‍‮⁮⁪‍⁭‮⁬‌‏⁯⁫​⁪​⁭‏‫‫‎‪‎⁫‭‭‬​⁬⁯‮(this._buffer, str);
            num1 = (int) num2 * -1625499526 ^ 2078420941;
            continue;
          case 2:
            str = Game.\u200C‫⁮⁪⁭‮‫‫‬‬‫‫⁯‬⁯‎‍‍​‬‮⁪⁮‎‌‫‫⁬⁫‌⁬‭​‍⁫‎‎‍‮‎‮(Game.\u202B‌⁮‏⁭⁬‭⁪⁯⁬‌⁮⁯‫‎‫‫⁯​‪‍‮⁭⁮‫⁭‏‭⁮⁯⁫‬⁮‎‌‭⁪‫⁪‪‮(text), more);
            num1 = (int) num2 * 531776300 ^ 1915506345;
            continue;
          case 3:
            goto label_3;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    static Random \u206D‍⁮‬⁯‭‬⁭‫‫‮‫‎‎‏​⁫⁯⁮‪‬⁮‏⁫⁯⁯‎‪⁭⁪⁯‮‮⁫⁭‏⁯‮‮⁭‮([In] int obj0) => new Random(obj0);

    static string \u200C‎‮⁭‮​⁬‬⁭‎‎‍‫⁭⁫‌⁯‫‪⁭​⁪‮‮⁪‫‫‪⁯‬⁬​‪⁭⁯‫‭⁮⁪‏‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static string \u202D‭⁯⁮‌⁮⁭⁮⁭‏⁫‍‍⁪‏⁮‍‪‭⁮‫‏⁫​‏⁫⁮‍⁯‫‍‫‭‪⁯‫⁫⁬⁫⁬‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static int \u206E‍⁯⁪​‎⁬⁫‎⁪⁯‭‭‎⁪‏‏‎⁭‭​‪‌‍⁪⁮⁫‫⁪‌‏‌‮‍‌⁮‬‭‮‭‮([In] int obj0, [In] int obj1) => Math.Max(obj0, obj1);

    static int \u200E‏‭‍‌⁯⁬‏⁪​‭⁪‭⁫‏‍⁯‮‏‌‮‮⁭⁯‮‮⁬⁭‎‮⁬⁫‬⁮‎​⁮⁭⁭‮‮([In] int obj0) => Math.Abs(obj0);

    static string \u202B‌⁮‏⁭⁬‭⁪⁯⁬‌⁮⁯‫‎‫‫⁯​‪‍‮⁭⁮‫⁭‏‭⁮⁯⁫‬⁮‎‌‭⁪‫⁪‪‮([In] object obj0) => obj0.ToString();

    static string \u200B‌‪⁬⁮‭‍‏‬‫‬‫⁪‌​⁮‌​‎⁬‬⁯‪​‏‮‫‮⁫⁪⁭‍⁫​⁫⁫⁯⁯‬‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C‫⁮⁪⁭‮‫‫‬‬‫‫⁯‬⁯‎‍‍​‬‮⁪⁮‎‌‫‫⁬⁫‌⁬‭​‍⁫‎‎‍‮‎‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static StringBuilder \u202B⁪‎‭​‬‭‮‍⁮‏‍‮⁮⁪‍⁭‮⁬‌‏⁯⁫​⁪​⁭‏‫‫‎‪‎⁫‭‭‬​⁬⁯‮(
      [In] StringBuilder obj0,
      [In] string obj1)
    {
      return obj0.AppendLine(obj1);
    }
  }
}
