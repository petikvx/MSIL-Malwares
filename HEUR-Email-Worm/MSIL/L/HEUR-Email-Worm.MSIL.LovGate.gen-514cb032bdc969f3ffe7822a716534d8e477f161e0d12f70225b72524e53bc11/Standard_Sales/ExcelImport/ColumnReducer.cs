// Decompiled with JetBrains decompiler
// Type: Standard_Sales.ExcelImport.ColumnReducer
// Assembly: PreAllocatedOverlap, Version=1.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: B92242D0-7BA9-445E-B92A-42A0AEAC877F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Email-Worm.MSIL.LovGate.gen-514cb032bdc969f3ffe7822a716534d8e477f161e0d12f70225b72524e53bc11.exe

using System.Collections.Generic;

namespace Standard_Sales.ExcelImport
{
  public class ColumnReducer : IColumnReducer
  {
    public void ReduceToColumnsWithDoubleValues(ExcelDataSet excelDataSet)
    {
      this.RemoveColumnsWithIndices(this.FindIndicesOfColumnsThatContainValuesOtherThanDouble(excelDataSet), excelDataSet);
label_1:
      int num1 = 636302718;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1416550261)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -1837737686 ^ -1452456711;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }

    private void RemoveColumnsWithIndices(
      List<int> indicesOfColumnsToRemove,
      ExcelDataSet excelDataSet)
    {
      List<ExcelDataRow>.Enumerator enumerator = excelDataSet.TrialDataRows.GetEnumerator();
      try
      {
label_19:
        int num1 = !enumerator.MoveNext() ? -878812401 : (num1 = -1639229704);
        ExcelDataRow current;
        string[] strArray;
        int num2;
        int index;
        bool flag1;
        bool flag2;
        while (true)
        {
          uint num3;
          switch ((num3 = (uint) (num1 ^ -1975417738)) % 19U)
          {
            case 0:
              int num4 = !flag1 ? -237479606 : (num4 = -258238354);
              num1 = num4 ^ (int) num3 * -447422529;
              continue;
            case 1:
              num1 = (int) num3 * 420270963 ^ -1535566227;
              continue;
            case 2:
              num1 = -1639229704;
              continue;
            case 3:
              strArray = new string[current.Values.Length - indicesOfColumnsToRemove.Count];
              num2 = 0;
              num1 = (int) num3 * 1048273868 ^ 31900097;
              continue;
            case 4:
              goto label_19;
            case 5:
              flag2 = index < current.Values.Length;
              num1 = -1118414160;
              continue;
            case 6:
              num1 = (int) num3 * -1475654722 ^ -1308438613;
              continue;
            case 7:
              num1 = (int) num3 * 429868674 ^ 141526187;
              continue;
            case 8:
              goto label_25;
            case 9:
              index = 0;
              num1 = (int) num3 * -614122393 ^ -1695910958;
              continue;
            case 10:
              num1 = (int) num3 * -485356512 ^ -805238371;
              continue;
            case 11:
              flag1 = indicesOfColumnsToRemove.Contains(index);
              num1 = -834282496;
              continue;
            case 12:
              strArray[num2++] = current.Values[index];
              num1 = -912377035;
              continue;
            case 13:
              num1 = (int) num3 * -1490783918 ^ -1111112718;
              continue;
            case 14:
              current.Values = strArray;
              num1 = (int) num3 * -92789974 ^ 1156858318;
              continue;
            case 15:
              ++index;
              num1 = -1910811173;
              continue;
            case 16:
              num1 = (int) num3 * 1598542752 ^ -1160447109;
              continue;
            case 17:
              int num5 = !flag2 ? 939802285 : (num5 = 910257653);
              num1 = num5 ^ (int) num3 * 1159964270;
              continue;
            case 18:
              current = enumerator.Current;
              num1 = -1666153480;
              continue;
            default:
              goto label_21;
          }
        }
label_25:
        return;
label_21:;
      }
      finally
      {
        enumerator.Dispose();
label_23:
        int num6 = -1804901802;
        while (true)
        {
          uint num7;
          switch ((num7 = (uint) (num6 ^ -1975417738)) % 3U)
          {
            case 1:
              num6 = (int) num7 * -874312955 ^ 241989689;
              continue;
            case 2:
              goto label_23;
            default:
              goto label_27;
          }
        }
label_27:;
      }
    }

    private List<int> FindIndicesOfColumnsThatContainValuesOtherThanDouble(
      ExcelDataSet excelDataSet)
    {
label_1:
      int num1 = -300512209;
      List<int> valuesOtherThanDouble;
      while (true)
      {
        uint num2;
        bool flag1;
        bool flag2;
        int index1;
        int index2;
        List<int> intList;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1111251804)) % 23U)
        {
          case 0:
            int num4 = intList.Contains(index2) ? -374589978 : (num4 = -1038208925);
            num1 = num4 ^ (int) num2 * -1152086301;
            continue;
          case 1:
            intList = new List<int>();
            index1 = 1;
            num1 = (int) num2 * -1712367900 ^ -1328891283;
            continue;
          case 2:
            valuesOtherThanDouble = intList;
            num1 = (int) num2 * -2069390209 ^ 400467544;
            continue;
          case 3:
            num1 = (int) num2 * -2037942719 ^ 1956329828;
            continue;
          case 4:
            num1 = (int) num2 * 1088305915 ^ -2060324125;
            continue;
          case 5:
            ++index2;
            num1 = -418323393;
            continue;
          case 6:
            flag1 = index1 < excelDataSet.TrialDataRows.Count;
            num1 = -729357496;
            continue;
          case 7:
            int num5;
            num1 = num5 = index2 >= excelDataSet.TrialDataRows[index1].Values.Length ? -1239224163 : (num5 = -889780158);
            continue;
          case 8:
            int num6 = flag2 ? -323424219 : (num6 = -1771325714);
            num1 = num6 ^ (int) num2 * 2021168022;
            continue;
          case 9:
            num1 = (int) num2 * -1516844135 ^ 275634451;
            continue;
          case 10:
            num1 = (int) num2 * -239967842 ^ 1950098419;
            continue;
          case 11:
            num1 = -1981881855;
            continue;
          case 12:
            index2 = 0;
            num1 = (int) num2 * -1358866640 ^ -1596711954;
            continue;
          case 14:
            intList.Add(index2);
            num1 = (int) num2 * -686893383 ^ -1750841140;
            continue;
          case 15:
            num1 = -1850162404;
            continue;
          case 16:
            if (double.TryParse(excelDataSet.TrialDataRows[index1].Values[index2], out double _))
            {
              num3 = 0;
              break;
            }
            num1 = (int) num2 * -1960656175 ^ 1985375580;
            continue;
          case 17:
            num1 = -1256112519;
            continue;
          case 18:
            int num7 = flag1 ? -674572435 : (num7 = -2008295265);
            num1 = num7 ^ (int) num2 * 801281392;
            continue;
          case 19:
            num3 = excelDataSet.TrialDataRows[index1].Values[index2] != null ? 1 : 0;
            break;
          case 20:
            goto label_1;
          case 21:
            ++index1;
            num1 = (int) num2 * 450682810 ^ 844049725;
            continue;
          case 22:
            num1 = (int) num2 * 1909412230 ^ -1427660847;
            continue;
          default:
            goto label_27;
        }
        flag2 = num3 != 0;
        num1 = -1300930193;
      }
label_27:
      return valuesOtherThanDouble;
    }

    public ColumnReducer()
    {
label_1:
      int num1 = -1259669559;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1050916417)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -544160557 ^ 1543639396;
            continue;
          case 2:
            goto label_3;
          default:
            goto label_5;
        }
      }
label_3:
      return;
label_5:;
    }
  }
}
