// Decompiled with JetBrains decompiler
// Type: Microsoft.InfoCards.QueryParameter
// Assembly: infocard, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
// MVID: 1D4D5564-A025-490C-AF1D-DF4FBB709D1F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Virus.Win32.Expiro.w-f8f9f26e940480624825f6bddbea86e70fc4aa746c4dd8efa7d98dcb477000ed.exe

using Microsoft.InfoCards.Diagnostics;
using System.Collections.Generic;

namespace Microsoft.InfoCards
{
  internal class QueryParameter
  {
    private string m_indexName;
    private List<IndexObject> m_objects;

    public QueryParameter(string name)
    {
      this.m_indexName = !string.IsNullOrEmpty(name) ? name : throw InfoCardTrace.ThrowHelperArgumentNull(nameof (name));
      this.m_objects = new List<IndexObject>();
    }

    public QueryParameter(string name, params object[] values)
      : this(name)
    {
      for (int index = 0; index < values.Length; ++index)
        this.AddMatch(values[index]);
    }

    public string IndexName
    {
      get => this.m_indexName;
      internal set => this.m_indexName = value;
    }

    internal IndexObject this[int index] => this.m_objects[index];

    public int Count => this.m_objects.Count;

    public void Clear() => this.m_objects.Clear();

    public void AddCompiled(byte[] compiledForm) => this.m_objects.Add(new IndexObject(compiledForm));

    public void AddMatch(params object[] values)
    {
      if (values == null || values.Length == 0)
        throw InfoCardTrace.ThrowHelperArgumentNull(nameof (values));
      this.m_objects.Add(new IndexObject(values));
    }
  }
}
