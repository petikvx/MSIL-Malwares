// Decompiled with JetBrains decompiler
// Type: ProjNet.Services.ReponseAdvisor
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Collections;
using IRefl.Lists;
using ProjNet.Structs;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace ProjNet.Services
{
  public class ReponseAdvisor : Form
  {
    private BindingSource strategyAdvisor;
    private IContainer testsAdvisor;
    private Label poolAdvisor;
    private Label m_CreatorAdvisor;
    private DataGridView collectionAdvisor;
    private ComboBox wrapperAdvisor;
    private ComboBox specificationAdvisor;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ReponseAdvisor()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              PageAdvisorStructBuilder.PrepareCreator();
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_4;
            case 1:
            case 4:
              goto label_1;
            case 2:
              goto label_2;
            case 3:
              goto label_4;
            case 6:
              goto label_9;
            default:
              goto label_7;
          }
        }
label_1:
        this.testsAdvisor = (IContainer) null;
        num1 = 3;
        continue;
label_2:
        this.SelectFacade();
        this.strategyAdvisor = new BindingSource();
        num1 = 6;
        continue;
label_4:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        goto label_2;
label_7:
        num1 = 2;
      }
label_9:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void PrintFacade(object asset, EventArgs ivk)
    {
      int num1 = 4;
      if (ReponseAdvisor.CompareModel())
        goto label_4;
label_1:
      this.collectionAdvisor.DataSource = (object) this.strategyAdvisor;
      int num2 = 6;
label_3:
      num1 = num2;
label_4:
      switch (num1)
      {
        case 0:
        case 4:
          this.wrapperAdvisor.DisplayMember = "Name";
          num2 = 5;
          goto label_3;
        case 1:
          this.specificationAdvisor.DisplayMember = "BookTitle";
          this.specificationAdvisor.DataSource = (object) CallbackRegistry.InterruptAdvisor();
          this.strategyAdvisor.DataSource = (object) null;
          goto label_1;
        case 2:
        case 3:
          goto label_1;
        case 5:
          this.wrapperAdvisor.DataSource = (object) CallbackRegistry.SortAdvisor();
          num2 = 1;
          goto label_3;
        case 6:
          break;
        default:
          num2 = 2;
          goto label_3;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void DisableFacade(object task, EventArgs ivk) => this.strategyAdvisor.DataSource = (object) CallbackRegistry.RevertAdvisor(((ReponseAdvisor.MessageFacadeSerializer) this.wrapperAdvisor.SelectedItem).Author);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CountFacade(object reference, EventArgs connection) => this.strategyAdvisor.DataSource = (object) CallbackRegistry.AssetFacade((ExceptionOrderList) this.specificationAdvisor.SelectedItem);

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected override void Dispose(bool iskey)
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_3;
            case 2:
            case 4:
              goto label_1;
            case 3:
              goto label_5;
            case 5:
              goto label_12;
            default:
              num2 = 4;
              continue;
          }
        }
label_1:
label_2:
        base.Dispose(iskey);
        num1 = 5;
        continue;
label_3:
        if (iskey)
        {
          num1 = 3;
          continue;
        }
        int num3 = 0;
        goto label_7;
label_5:
        num3 = this.testsAdvisor != null ? 1 : 0;
label_7:
        if (num3 != 0)
        {
          this.testsAdvisor.Dispose();
          goto label_1;
        }
        else
          goto label_2;
      }
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void SelectFacade()
    {
      int num1 = 4;
      while (true)
      {
        int num2;
        switch (num1)
        {
          case 0:
          case 4:
            this.poolAdvisor = new Label();
            num2 = 7;
            break;
          case 1:
            this.poolAdvisor.AutoSize = true;
            this.poolAdvisor.Location = new Point(12, 24);
            num2 = 6;
            break;
          case 2:
            this.PerformLayout();
            num2 = 16;
            break;
          case 3:
            this.ClientSize = new Size(484, 330);
            goto case 8;
          case 5:
            this.ResumeLayout(false);
            num2 = 2;
            break;
          case 6:
            this.poolAdvisor.Name = "label1";
            this.poolAdvisor.Size = new Size(41, 13);
            this.poolAdvisor.TabIndex = 0;
            this.poolAdvisor.Text = "Author:";
            if (true)
            {
              num1 = 10;
              continue;
            }
            goto case 15;
          case 7:
            this.m_CreatorAdvisor = new Label();
            this.collectionAdvisor = new DataGridView();
            this.wrapperAdvisor = new ComboBox();
            this.specificationAdvisor = new ComboBox();
            ((ISupportInitialize) this.collectionAdvisor).BeginInit();
            this.SuspendLayout();
            num2 = 1;
            break;
          case 8:
          case 12:
            this.Controls.Add((Control) this.specificationAdvisor);
            num2 = 11;
            break;
          case 9:
            this.specificationAdvisor.FormattingEnabled = true;
            this.specificationAdvisor.Location = new Point(261, 21);
            this.specificationAdvisor.Name = "TitleComboBox";
            this.specificationAdvisor.Size = new Size(211, 21);
            this.specificationAdvisor.TabIndex = 4;
            this.specificationAdvisor.SelectedIndexChanged += new EventHandler(this.CountFacade);
            this.AutoScaleDimensions = new SizeF(6f, 13f);
            this.AutoScaleMode = AutoScaleMode.Font;
            num1 = 3;
            continue;
          case 10:
            this.m_CreatorAdvisor.AutoSize = true;
            this.m_CreatorAdvisor.Location = new Point(228, 24);
            this.m_CreatorAdvisor.Name = "label2";
            this.m_CreatorAdvisor.Size = new Size(27, 13);
            this.m_CreatorAdvisor.TabIndex = 1;
            this.m_CreatorAdvisor.Text = "Title";
            this.collectionAdvisor.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;
            this.collectionAdvisor.Location = new Point(12, 51);
            this.collectionAdvisor.Name = "booksDataGridView";
            num2 = 14;
            break;
          case 11:
            this.Controls.Add((Control) this.wrapperAdvisor);
            this.Controls.Add((Control) this.collectionAdvisor);
            this.Controls.Add((Control) this.m_CreatorAdvisor);
            if (true)
            {
              num1 = 15;
              continue;
            }
            goto case 10;
          case 13:
            this.Name = "MasterDetail";
            this.Text = "Master/Detail";
            this.Load += new EventHandler(this.PrintFacade);
            ((ISupportInitialize) this.collectionAdvisor).EndInit();
            if (true)
            {
              num1 = 5;
              continue;
            }
            goto case 6;
          case 14:
            this.collectionAdvisor.ReadOnly = true;
            this.collectionAdvisor.Size = new Size(460, 267);
            this.collectionAdvisor.TabIndex = 2;
            this.wrapperAdvisor.FormattingEnabled = true;
            this.wrapperAdvisor.Location = new Point(59, 21);
            this.wrapperAdvisor.Name = "AuthorComboBox";
            this.wrapperAdvisor.Size = new Size(163, 21);
            this.wrapperAdvisor.TabIndex = 3;
            this.wrapperAdvisor.SelectedIndexChanged += new EventHandler(this.DisableFacade);
            num2 = 9;
            break;
          case 15:
            this.Controls.Add((Control) this.poolAdvisor);
            if (ReponseAdvisor.CompareModel())
            {
              num1 = 13;
              continue;
            }
            goto case 5;
          case 16:
            goto label_18;
          default:
            num2 = 12;
            break;
        }
        num1 = num2;
      }
label_18:;
    }

    internal static bool CompareModel() => true;

    internal static bool InsertModel() => false;

    public class MessageFacadeSerializer
    {
      public IteratorThreadCollection Author { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

      public string name { [MethodImpl(MethodImplOptions.NoInlining)] get; [MethodImpl(MethodImplOptions.NoInlining)] set; }

      [MethodImpl(MethodImplOptions.NoInlining)]
      public MessageFacadeSerializer()
      {
        PageAdvisorStructBuilder.PrepareCreator();
        // ISSUE: explicit constructor call
        base.\u002Ector();
      }

      internal static bool ViewCreator() => true;

      internal static bool DisableCreator() => false;
    }
  }
}
