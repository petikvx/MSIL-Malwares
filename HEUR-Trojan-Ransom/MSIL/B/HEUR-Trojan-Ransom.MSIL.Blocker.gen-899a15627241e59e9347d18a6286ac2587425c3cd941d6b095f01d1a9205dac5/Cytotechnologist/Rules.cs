// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Rules
// Assembly: RuntimeParameterIn, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: E46F8FBF-E963-420D-9D24-515F2113904E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-899a15627241e59e9347d18a6286ac2587425c3cd941d6b095f01d1a9205dac5.exe

using SimpleJSON;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Rules
  {
    public int SprintCount { get; private set; }

    public int MaxImpact { get; private set; }

    public Card[] Cards { get; private set; }

    public int InitialResources { get; private set; }

    public int NormalPlanningCount { get; private set; }

    public int NormalPlanningCost { get; private set; }

    public int OverPlanningCost { get; private set; }

    public int SprintsWonWithoutPlanning { get; private set; }

    public float[] RiskChances { get; private set; }

    public bool EconomicsAffectsAll { get; private set; }

    public int StayOnSprintMinDiff { get; private set; }

    public bool OnlyOneWinner { get; private set; }

    private Rules()
    {
    }

    public static Rules Deserialize(JSONNode json)
    {
label_1:
      int num1 = 2070364879;
      int asInt;
      Rules rules;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 780209630)) % 5U)
        {
          case 0:
            goto label_1;
          case 1:
            asInt = json["max-impact"].AsInt;
            num1 = (int) num2 * -2068021122 ^ 1823459046;
            continue;
          case 2:
            rules = new Rules()
            {
              SprintCount = json["sprints"].AsInt,
              MaxImpact = asInt,
              Cards = Rules.ParseDeck(json["deck"], asInt),
              InitialResources = json["initial-resources"].AsInt,
              NormalPlanningCount = json["normal-planning-count"].AsInt,
              NormalPlanningCost = json["normal-planning-cost"].AsInt,
              OverPlanningCost = json["over-planning-cost"].AsInt,
              SprintsWonWithoutPlanning = json["sprints-won-without-planning"].AsInt,
              RiskChances = Rules.ParseRiskChances(json["risk-chances"]),
              EconomicsAffectsAll = json["economics-affects-all"].AsBool,
              StayOnSprintMinDiff = json["stay-on-sprint-min-diff"].AsInt,
              OnlyOneWinner = json["only-one-winner"].AsBool
            };
            num1 = (int) num2 * -1324611653 ^ 14660739;
            continue;
          case 3:
            num1 = (int) num2 * -408435541 ^ -1008247691;
            continue;
          default:
            goto label_6;
        }
      }
label_6:
      return rules;
    }

    private static float[] ParseRiskChances(JSONNode json)
    {
      float[] numArray = new float[json.Count];
label_1:
      int num1 = 1982424301;
      float[] riskChances;
      int aIndex;
      bool flag;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 596148216)) % 8U)
        {
          case 0:
            numArray[aIndex] = json[aIndex].AsFloat;
            num1 = 1979130598;
            continue;
          case 1:
            flag = aIndex < numArray.Length;
            num1 = 320853887;
            continue;
          case 2:
            riskChances = numArray;
            num1 = (int) num2 * -1373968485 ^ -840198358;
            continue;
          case 3:
            goto label_1;
          case 5:
            aIndex = 0;
            num1 = (int) num2 * 2037667671 ^ 621302546;
            continue;
          case 6:
            ++aIndex;
            num1 = (int) num2 * 2110356903 ^ 1231773859;
            continue;
          case 7:
            int num3 = flag ? 1888635151 : (num3 = 218304629);
            num1 = num3 ^ (int) num2 * 700034089;
            continue;
          default:
            goto label_9;
        }
      }
label_9:
      return riskChances;
    }

    private static Card[] ParseDeck(JSONNode json, int maxImpact)
    {
      int count = json.Count;
label_1:
      int num1 = 1391124184;
      int aIndex1;
      JSONNode jsonNode;
      int aIndex2;
      List<Card> cardList;
      Card[] array;
      int num2;
      bool flag1;
      bool flag2;
      bool flag3;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ 1367267689)) % 25U)
        {
          case 0:
            flag3 = num2 < jsonNode[aIndex2].AsInt;
            num1 = 1143060118;
            continue;
          case 1:
            num1 = (int) num3 * 2134343599 ^ -961484905;
            continue;
          case 2:
            int num4 = !flag3 ? -421311277 : (num4 = -1014658861);
            num1 = num4 ^ (int) num3 * -1163019952;
            continue;
          case 3:
            flag1 = aIndex2 < maxImpact * 2;
            num1 = 1310139901;
            continue;
          case 4:
            array = cardList.ToArray();
            num1 = (int) num3 * -714388442 ^ 1035246096;
            continue;
          case 5:
            num1 = (int) num3 * 1589734959 ^ -1247025001;
            continue;
          case 6:
            ++aIndex1;
            num1 = (int) num3 * -55421294 ^ -1257751643;
            continue;
          case 7:
            jsonNode = json[aIndex1];
            num1 = 1549531041;
            continue;
          case 8:
            aIndex1 = 0;
            num1 = (int) num3 * -1783334299 ^ 141924168;
            continue;
          case 9:
            num1 = (int) num3 * -2127208289 ^ -37950963;
            continue;
          case 10:
            num1 = 413514082;
            continue;
          case 11:
            int num5 = flag1 ? 483305423 : (num5 = 1308459842);
            num1 = num5 ^ (int) num3 * -944045845;
            continue;
          case 12:
            goto label_1;
          case 14:
            bool flag4 = aIndex2 < maxImpact;
            cardList.Add(new Card()
            {
              Impact = flag4 ? -(maxImpact - aIndex2) : maxImpact * 2 - aIndex2,
              Type = aIndex1
            });
            num1 = 102840611;
            continue;
          case 15:
            num1 = (int) num3 * -555780389 ^ -690289970;
            continue;
          case 16:
            aIndex2 = 0;
            num1 = (int) num3 * -857558293 ^ -372286339;
            continue;
          case 17:
            int num6 = !flag2 ? -1326292178 : (num6 = -1573197224);
            num1 = num6 ^ (int) num3 * 863196774;
            continue;
          case 18:
            num1 = 1619713361;
            continue;
          case 19:
            flag2 = aIndex1 < count;
            num1 = 1626403317;
            continue;
          case 20:
            cardList = new List<Card>();
            num1 = (int) num3 * -359648708 ^ -1375659284;
            continue;
          case 21:
            ++num2;
            num1 = (int) num3 * -729265963 ^ 2636217;
            continue;
          case 22:
            num1 = (int) num3 * -995737791 ^ 990536295;
            continue;
          case 23:
            num2 = 0;
            num1 = (int) num3 * -1163889742 ^ -366358079;
            continue;
          case 24:
            ++aIndex2;
            num1 = (int) num3 * -613472662 ^ -159903846;
            continue;
          default:
            goto label_26;
        }
      }
label_26:
      return array;
    }

    public override string ToString()
    {
label_1:
      int num1 = 1664996545;
      string str;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1383137299)) % 4U)
        {
          case 1:
            num1 = (int) num2 * 25154346 ^ 372030225;
            continue;
          case 2:
            str = Rules.\u200E⁭‎⁪‪⁯⁮⁮‎‏‭‬⁪‏‬⁫‏⁭⁬⁭‮‏‬⁮⁮⁯‭‭⁯‍‎⁬​⁫⁪‬⁪‍⁪‬‮("sprints: {0},\nmax-impact:{1},\ndeck: \n{2},\n\ninitial-resources: {3},\n\nnormal-planning-count: {4},\nnormal-planning-cost: {5},\nover-planning-cost: {6},\nsprints-won-without-planning: {7},\n\nrisk-chances: {8},\n\neconomics-affects-all: {9},\nstay-on-sprint-min-diff: {10},\nonly-one-winner: {11}", new object[12]
            {
              (object) this.SprintCount,
              (object) this.MaxImpact,
              (object) this.CardsToString(),
              (object) this.InitialResources,
              (object) this.NormalPlanningCount,
              (object) this.NormalPlanningCost,
              (object) this.OverPlanningCost,
              (object) this.SprintsWonWithoutPlanning,
              (object) this.RiskChancesToString(),
              (object) this.EconomicsAffectsAll,
              (object) this.StayOnSprintMinDiff,
              (object) this.OnlyOneWinner
            });
            num1 = (int) num2 * -1201596065 ^ 930919236;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return str;
    }

    private string CardsToString()
    {
      string str1 = "[\n\t";
label_1:
      int num1 = -1832185026;
      Card[] cards;
      int index;
      Card card1;
      int num2;
      string str2;
      while (true)
      {
        uint num3;
        switch ((num3 = (uint) (num1 ^ -1496579139)) % 13U)
        {
          case 0:
            num1 = (int) num3 * -1728911209 ^ 788282447;
            continue;
          case 1:
            str2 = Rules.\u202B‎⁬‮‎‪‌‫‌‪‬⁮⁭‎‌‌‌‪‎⁪‫‎⁫⁪‎‌‬‬⁪⁫‬⁮‮‍‬⁪‌‌‫⁯‮(str1, "\n]");
            num1 = (int) num3 * 2101562929 ^ -574059032;
            continue;
          case 3:
            str1 = Rules.\u202B‎⁬‮‎‪‌‫‌‪‬⁮⁭‎‌‌‌‪‎⁪‫‎⁫⁪‎‌‬‬⁪⁫‬⁮‮‍‬⁪‌‌‫⁯‮(str1, "\n\t");
            num1 = (int) num3 * 1779819129 ^ -486207808;
            continue;
          case 4:
            int num4 = num2 == card1.Type ? -257202974 : (num4 = -2099759280);
            num1 = num4 ^ (int) num3 * 322619098;
            continue;
          case 5:
            num2 = card1.Type;
            num1 = (int) num3 * 651923840 ^ -654748568;
            continue;
          case 6:
            string str3 = str1;
            Card card2 = card1;
            string str4 = card2 != null ? Rules.\u200D‮‬‪‎⁮‭‭​‏‎‮‫‬‎‏‎‮⁬‬​‪⁪⁯‫‮‪⁯‪‮‌‌⁬⁬‌‪‫‍‎⁭‮((object) card2) : (string) null;
            str1 = Rules.\u206B⁯​‪⁭‬⁭‬‮‪‬‫​⁫⁬⁫‍⁮⁮‏‍‫‫⁭​‌‭‬‍‬​‫⁫‮⁮‎‫⁫⁪‫‮(str3, str4, " ");
            num1 = -1868697095;
            continue;
          case 7:
            goto label_1;
          case 8:
            ++index;
            num1 = (int) num3 * 1697693751 ^ -993862507;
            continue;
          case 9:
            num1 = (int) num3 * -691373391 ^ -1901631025;
            continue;
          case 10:
            num2 = 0;
            cards = this.Cards;
            index = 0;
            num1 = (int) num3 * -1309024327 ^ -1977379920;
            continue;
          case 11:
            card1 = cards[index];
            num1 = -1288499714;
            continue;
          case 12:
            int num5;
            num1 = num5 = index >= cards.Length ? -1965541329 : (num5 = -1144664024);
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    private string RiskChancesToString()
    {
      string str1 = Rules.\u202B‎⁬‮‎‪‌‫‌‪‬⁮⁭‎‌‌‌‪‎⁪‫‎⁫⁪‎‌‬‬⁪⁫‬⁮‮‍‬⁪‌‌‫⁯‮("[ ", this.RiskChances[0].ToString((IFormatProvider) Rules.\u206E​​‎‬‎‬‭⁬⁭⁬‬‪‮‌⁮⁪‏​⁯‫‏‮‌‍‫‌​‪‎‮​⁬⁮⁫⁪​⁮⁮⁬‮()));
label_1:
      int num1 = 54300115;
      int index;
      bool flag;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1110857095)) % 9U)
        {
          case 0:
            goto label_1;
          case 1:
            str1 = Rules.\u206B⁯​‪⁭‬⁭‬‮‪‬‫​⁫⁬⁫‍⁮⁮‏‍‫‫⁭​‌‭‬‍‬​‫⁫‮⁮‎‫⁫⁪‫‮(str1, ", ", this.RiskChances[index].ToString((IFormatProvider) Rules.\u206E​​‎‬‎‬‭⁬⁭⁬‬‪‮‌⁮⁪‏​⁯‫‏‮‌‍‫‌​‪‎‮​⁬⁮⁫⁪​⁮⁮⁬‮()));
            ++index;
            num1 = 1872073143;
            continue;
          case 2:
            flag = index < this.RiskChances.Length;
            num1 = 1414263405;
            continue;
          case 3:
            index = 1;
            num1 = (int) num2 * -198964778 ^ 1906954718;
            continue;
          case 4:
            num1 = (int) num2 * 2059153373 ^ 69396746;
            continue;
          case 6:
            num1 = (int) num2 * 2006564527 ^ -1901804410;
            continue;
          case 7:
            str2 = Rules.\u202B‎⁬‮‎‪‌‫‌‪‬⁮⁭‎‌‌‌‪‎⁪‫‎⁫⁪‎‌‬‬⁪⁫‬⁮‮‍‬⁪‌‌‫⁯‮(str1, " ]");
            num1 = (int) num2 * 1299273430 ^ 1215326903;
            continue;
          case 8:
            int num3 = flag ? -143005225 : (num3 = -509412690);
            num1 = num3 ^ (int) num2 * 2022161286;
            continue;
          default:
            goto label_10;
        }
      }
label_10:
      return str2;
    }

    static string \u200E⁭‎⁪‪⁯⁮⁮‎‏‭‬⁪‏‬⁫‏⁭⁬⁭‮‏‬⁮⁮⁯‭‭⁯‍‎⁬​⁫⁪‬⁪‍⁪‬‮([In] string obj0, [In] object[] obj1) => string.Format(obj0, obj1);

    static string \u202B‎⁬‮‎‪‌‫‌‪‬⁮⁭‎‌‌‌‪‎⁪‫‎⁫⁪‎‌‬‬⁪⁫‬⁮‮‍‬⁪‌‌‫⁯‮([In] string obj0, [In] string obj1) => obj0 + obj1;

    static string \u200D‮‬‪‎⁮‭‭​‏‎‮‫‬‎‏‎‮⁬‬​‪⁪⁯‫‮‪⁯‪‮‌‌⁬⁬‌‪‫‍‎⁭‮([In] object obj0) => obj0.ToString();

    static string \u206B⁯​‪⁭‬⁭‬‮‪‬‫​⁫⁬⁫‍⁮⁮‏‍‫‫⁭​‌‭‬‍‬​‫⁫‮⁮‎‫⁫⁪‫‮(
      [In] string obj0,
      [In] string obj1,
      [In] string obj2)
    {
      return obj0 + obj1 + obj2;
    }

    static CultureInfo \u206E​​‎‬‎‬‭⁬⁭⁬‬‪‮‌⁮⁪‏​⁯‫‏‮‌‍‫‌​‪‎‮​⁬⁮⁫⁪​⁮⁮⁬‮() => CultureInfo.InvariantCulture;
  }
}
