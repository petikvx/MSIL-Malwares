// Decompiled with JetBrains decompiler
// Type: Microsoft.Tools.ServiceModel.ComSvcConfig.EndpointConfig
// Assembly: ComSvcConfig, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 502D58B8-8905-498F-84D2-67D5F99987D4
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00009-msil\Virus.Win32.Velost.1241-4627c8dc33e64b26fbb4c4fa0d7dc5ef025b4c1be980ea8bed77b54d7aa903ed.exe

using System;
using System.Collections.Generic;

namespace Microsoft.Tools.ServiceModel.ComSvcConfig
{
  internal class EndpointConfig
  {
    private Guid appid;
    private Guid clsid;
    private Guid iid;
    private string bindingType;
    private string bindingName;
    private Uri address;
    private bool isMexEndpoint;
    private List<string> methods;
    private EndpointConfigContainer container;
    public static readonly string TempURI = "http://tempuri.org/";
    public static readonly string MexEndpointSuffix = "mex";

    public Guid Appid
    {
      get => this.appid;
      set => this.appid = value;
    }

    public Guid Clsid => this.clsid;

    public Guid Iid => this.iid;

    public string BindingType => this.bindingType;

    public string BindingName => this.bindingName;

    public Uri Address => this.address;

    public bool IsMexEndpoint => this.isMexEndpoint;

    public EndpointConfigContainer Container
    {
      get => this.container;
      set => this.container = value;
    }

    public IList<string> Methods
    {
      get => (IList<string>) this.methods;
      set => this.methods = (List<string>) value;
    }

    public string ContractType => this.isMexEndpoint ? "IMetadataExchange" : this.iid.ToString("B").ToUpperInvariant();

    public bool MatchServiceType(string serviceType)
    {
      string[] strArray = serviceType.Split(',');
      if (strArray.Length != 2)
        return false;
      try
      {
        Guid guid = new Guid(strArray[0]);
        if (guid != this.Appid)
          return false;
        guid = new Guid(strArray[1]);
        return !(guid != this.Clsid);
      }
      catch (FormatException ex)
      {
      }
      return false;
    }

    public bool MatchContract(string contract)
    {
      if (this.isMexEndpoint)
        return this.ContractType == contract;
      try
      {
        if (new Guid(contract) == this.Iid)
          return true;
      }
      catch (FormatException ex)
      {
      }
      return false;
    }

    public string ServiceType => this.Appid.ToString("B").ToUpperInvariant() + "," + this.Clsid.ToString("B").ToUpperInvariant();

    public string ApplicationName => ComAdminWrapper.GetAppInfo(this.appid.ToString("B"))?.Name;

    public string ComponentProgID => ComAdminWrapper.GetAppInfo(this.appid.ToString("B"))?.FindClass(this.clsid.ToString("B"))?.Name;

    public string InterfaceName
    {
      get
      {
        if (this.isMexEndpoint)
          return this.ContractType;
        return ComAdminWrapper.GetAppInfo(this.appid.ToString("B"))?.FindClass(this.clsid.ToString("B"))?.FindInterface(this.iid.ToString("B"))?.Name;
      }
    }

    public EndpointConfig(
      Guid appid,
      Guid clsid,
      Guid iid,
      string bindingType,
      string bindingName,
      Uri address,
      bool isMexEndpoint,
      List<string> methods)
    {
      this.appid = appid;
      this.clsid = clsid;
      this.iid = iid;
      this.bindingType = bindingType;
      this.bindingName = bindingName;
      this.address = address;
      this.isMexEndpoint = isMexEndpoint;
      this.methods = methods;
      this.container = (EndpointConfigContainer) null;
    }
  }
}
