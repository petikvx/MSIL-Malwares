// Decompiled with JetBrains decompiler
// Type: 763242632939.301664478184
// Assembly: 190180155270, Version=7.6.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 20B0A582-54C5-4C64-BCB9-2AC73608F590
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-211b9bdeb7639f8b1f0606b7671a4d1fdbf246968b078ff103eac9aa4c2cd108.exe

using \u003463056308027;
using \u003763242632939;
using \u003960738779841;
using Microsoft.ProgramSynthesis.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace \u003763242632939
{
  public class \u003301664478184 : \u003752563925647
  {
    private int? \u003223118643774;

    public Optional<string> \u003093682913747 { get; }

    public Optional<string> \u003537179778093 { get; }

    public Optional<string> \u003841894037949 { get; }

    public bool \u003840285101477 { get; }

    public bool \u003213158464276 { get; }

    public bool \u003049172197308 { get; }

    public bool \u003027691008785 => !this.\u003537179778093.HasValue && !this.\u003840285101477 && !this.\u003241991174453 && !this.\u003783701917183 && !this.\u003141504601551;

    public bool \u003812963269535 => !this.\u003027691008785;

    public bool \u003241991174453 { get; }

    public bool \u003783701917183 { get; }

    public bool \u003141504601551 { get; }

    public Regex \u003299534161265 { get; }

    public \u003301664478184(string naValue)
      : base(\u003547566135655.Numeric, (Dictionary<string, string>) null, naValue)
    {
      this.\u003299534161265 = new Regex(Regex.Escape(naValue), RegexOptions.Compiled);
    }

    public \u003301664478184(
      Regex membershipRegex,
      Dictionary<string, string> substitutions,
      bool isNaN,
      bool isPositiveInfinity,
      bool isNegativeInfinity)
      : base(\u003547566135655.Numeric, substitutions)
    {
      this.\u003241991174453 = isNaN;
      this.\u003783701917183 = isPositiveInfinity;
      this.\u003141504601551 = isNegativeInfinity;
      this.\u003299534161265 = membershipRegex;
    }

    public \u003301664478184(
      Regex membershipRegex,
      Dictionary<string, string> substitutions = null,
      string groupSeparator = null,
      string decimalSeparator = null,
      string currencySymbol = null,
      bool isInScientificNotation = false,
      bool isNegated = false,
      bool hasLeadingSign = false)
      : base(\u003547566135655.Numeric, substitutions)
    {
      this.\u003299534161265 = membershipRegex;
      this.\u003537179778093 = OptionalUtils.SomeIfNotNull<string>(decimalSeparator);
      this.\u003841894037949 = OptionalUtils.SomeIfNotNull<string>(currencySymbol);
      this.\u003093682913747 = OptionalUtils.SomeIfNotNull<string>(groupSeparator);
      this.\u003840285101477 = isInScientificNotation;
      this.\u003213158464276 = isNegated;
      this.\u003049172197308 = hasLeadingSign;
    }

    public virtual Optional<string> \u003553219697520(string _param1_1)
    {
      if (!this.\u003299534161265.IsMatch(_param1_1) || this.\u003463227775507)
        return Optional<string>.Nothing;
      string seed = UnicodeUtils.NormalizeAndTrim(_param1_1, NormalizationForm.FormC);
      if (seed == null)
        return Optional<string>.Nothing;
      string str = this.\u003803720777683.Concat<KeyValuePair<string, string>>((IEnumerable<KeyValuePair<string, string>>) this.\u003838478326228).Aggregate<KeyValuePair<string, string>, string>(seed, (Func<string, KeyValuePair<string, string>, string>) ((_param1_2, _param2) => _param1_2.Replace(_param2.Key, _param2.Value)));
      return !this.\u003213158464276 ? OptionalUtils.Some<string>(str) : OptionalUtils.Some<string>("-" + str);
    }

    public virtual bool \u003880322163365(string _param1) => !this.\u003463227775507 ? this.\u003299534161265.IsMatch(_param1) : _param1 == this.\u003013635168359.Value;

    public virtual bool \u003521387595879(\u003752563925647 _param1)
    {
      if (this == _param1)
        return true;
      return _param1 is \u003301664478184 obj && obj.\u003013635168359.Equals(this.\u003013635168359) && obj.\u003093682913747.Equals(this.\u003093682913747) && obj.\u003537179778093.Equals(this.\u003537179778093) && obj.\u003841894037949.Equals(this.\u003841894037949) && obj.\u003840285101477.Equals(this.\u003840285101477) && obj.\u003213158464276.Equals(this.\u003213158464276) && CollectionUtils.ReadOnlyDictionaryEquals<string, string>(this.\u003526529034458, obj.\u003526529034458, (IEqualityComparer<string>) null) && this.\u003299534161265.Equals((object) obj.\u003299534161265);
    }

    public virtual bool \u003918702521196(object _param1) => this.\u003266398958046((\u003752563925647) (_param1 as \u003301664478184));

    public virtual int \u003080843072104()
    {
      if (!this.\u003223118643774.HasValue)
        this.\u003223118643774 = new int?(((((((0 * 27409 ^ this.\u003013635168359.GetHashCode()) * 27409 ^ this.\u003093682913747.GetHashCode()) * 27409 ^ this.\u003537179778093.GetHashCode()) * 27409 ^ this.\u003841894037949.GetHashCode()) * 27409 ^ this.\u003840285101477.GetHashCode()) * 27409 ^ this.\u003213158464276.GetHashCode()) * 27409 ^ MathUtils.OrderIndependentHashCode<KeyValuePair<string, string>>((IEnumerable<KeyValuePair<string, string>>) this.\u003526529034458, (IEqualityComparer<KeyValuePair<string, string>>) KeyValueComparer<string, string>.DefaultEqualityInstance));
      return this.\u003223118643774.Value;
    }

    public virtual string \u003485429581487() => !this.\u003463227775507 ? this.\u003299534161265.ToString() : this.\u003013635168359.Value;
  }
}
