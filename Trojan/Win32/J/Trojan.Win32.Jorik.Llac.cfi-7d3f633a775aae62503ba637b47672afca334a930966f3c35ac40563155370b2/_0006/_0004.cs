// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ccy, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc6f4431894d1c97
// MVID: 2A74CDCD-1E5F-40DD-90C8-12E38E6596C8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.Jorik.Llac.cfi-7d3f633a775aae62503ba637b47672afca334a930966f3c35ac40563155370b2.exe

using \u0001;
using \u0006;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.IsolatedStorage;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace \u0006
{
  internal static class \u0004
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    private static readonly string \u0001;
    private static readonly string \u0002;
    private static readonly string \u0003;
    private static readonly string \u0004;
    private static readonly IsolatedStorageFile \u0001;
    private static readonly Encoding \u0001;
    private static readonly HashAlgorithm \u0001;

    static \u0004()
    {
      \u0002.\u0002(typeof (\u0004));
      \u0004.\u0001 = \u0004.\u0001(1439).Substring(1, 8);
      \u0004.\u0002 = Path.Combine(\u0004.\u0001, \u0004.\u0001(2416));
      \u0004.\u0003 = Path.Combine(\u0004.\u0001, \u0004.\u0001(2433));
      \u0004.\u0004 = Path.Combine(\u0004.\u0001, \u0004.\u0001(2438));
      \u0004.\u0001 = Encoding.UTF8;
      \u0004.\u0001 = (HashAlgorithm) new MD5CryptoServiceProvider();
      \u0004.\u0001 = IsolatedStorageFile.GetUserStoreForAssembly();
      \u0004.\u0001.CreateDirectory(\u0004.\u0001);
      \u0004.\u0001.CreateDirectory(\u0004.\u0003);
    }

    private static IDisposable \u0002() => (IDisposable) new \u0004.\u0005(\u0004.\u0004);

    private static IsolatedStorageFileStream \u0002(
      [In] string obj0,
      [In] FileMode obj1,
      [In] FileAccess obj2)
    {
      return new IsolatedStorageFileStream(obj0, obj1, obj2, FileShare.None, \u0004.\u0001);
    }

    private static void \u0002([In] string obj0)
    {
      try
      {
        \u0004.\u0001.DeleteFile(obj0);
      }
      catch (IsolatedStorageException ex)
      {
      }
    }

    private static void \u0002([In] string obj0, [In] long obj1)
    {
      IsolatedStorageFileStream storageFileStream1 = \u0004.\u0002(obj0, FileMode.OpenOrCreate, FileAccess.ReadWrite);
      if (true)
        goto label_23;
label_1:
      IsolatedStorageFileStream storageFileStream2;
      try
      {
        storageFileStream2.Position = obj1 + 8L;
        do
        {
          storageFileStream2.Position = obj1;
label_2:
          if (true)
          {
            long num1 = (long) new BinaryReader((Stream) storageFileStream2).ReadUInt64();
            ulong num2;
            while (true)
            {
              if (true)
                goto label_13;
label_5:
              long num3 = (long) num2;
              if (false)
              {
                num1 = num3;
                continue;
              }
              if (true)
              {
                long num4 = num3 + 1L;
                if (true)
                  goto label_15;
label_8:
                if (true)
                {
                  if (true)
                  {
                    storageFileStream2.Position = obj1;
                    if (false)
                      goto label_14;
                    else
                      break;
                  }
                  else
                    goto label_14;
                }
                else
                  goto label_2;
label_15:
                num2 = (ulong) num4;
                goto label_8;
              }
              else
                num1 = num3;
label_13:
              if (true)
                num2 = (ulong) num1;
label_14:
              while (false)
                ;
              goto label_5;
            }
            new BinaryWriter((Stream) storageFileStream2).Write(num2);
          }
        }
        while (false);
        return;
      }
      finally
      {
        storageFileStream2?.Dispose();
      }
label_23:
      storageFileStream2 = storageFileStream1;
      goto label_1;
    }

    public static void \u0002([In] uint obj0)
    {
      if (false)
        return;
      if (true)
        goto label_11;
label_2:
      IDisposable disposable1;
      try
      {
        do
        {
          IDisposable disposable2 = \u0004.\u0002();
          if (true)
            goto label_5;
label_3:
          \u0004.\u0002(\u0004.\u0002, (long) (obj0 * 8U));
          continue;
label_5:
          disposable1 = disposable2;
          if (true)
            goto label_3;
        }
        while (false);
        return;
      }
      catch (Exception ex)
      {
        return;
      }
      finally
      {
        disposable1?.Dispose();
      }
label_11:
      disposable1 = (IDisposable) null;
      goto label_2;
    }

    private static string \u0002([In] string obj0)
    {
      byte[] bytes = \u0004.\u0001.GetBytes(obj0);
      if (true)
        goto label_17;
label_1:
      if (true)
        goto label_23;
label_15:
      string str1 = Path.Combine(\u0004.\u0003, str1 + \u0004.\u0001(2443));
label_16:
      return str1;
label_23:
      byte[] numArray;
      string str2 = Convert.ToBase64String(numArray).Replace('\\', '@');
      if (true)
        str1 = str2;
      if (str1.Length > 50)
      {
        byte[] hash = \u0004.\u0001.ComputeHash(numArray);
        if (true)
          goto label_19;
label_3:
        byte[] b;
        Guid guid1 = new Guid(b);
        if (true)
          goto label_20;
label_4:
        Guid guid2;
        string str3 = guid2.ToString().Substring(0, 18);
        if (true)
          goto label_21;
label_5:
        string path2;
        string str4;
        if (true)
        {
          string str5 = Path.Combine(\u0004.\u0003, path2);
          if (true)
            goto label_22;
label_7:
          str1 = str4 + \u0004.\u0001(2443);
          goto label_8;
label_22:
          str4 = str5;
          goto label_7;
        }
label_8:
        string str6 = str4 + \u0004.\u0001(2452);
        IsolatedStorageFileStream storageFileStream = (IsolatedStorageFileStream) null;
        try
        {
          if (true)
          {
            storageFileStream = \u0004.\u0002(str6, FileMode.CreateNew, FileAccess.Write);
            storageFileStream.Write(numArray, 0, numArray.Length);
            goto label_16;
          }
          else
            goto label_16;
        }
        catch (IOException ex)
        {
          goto label_16;
        }
        finally
        {
          storageFileStream?.Close();
        }
label_21:
        path2 = str3;
        goto label_5;
label_20:
        guid2 = guid1;
        goto label_4;
label_19:
        b = hash;
        goto label_3;
      }
      else
        goto label_15;
label_17:
      numArray = bytes;
      goto label_1;
    }

    public static void \u0003([In] string obj0)
    {
      int num;
      do
      {
        num = 0;
        if (num == 0)
        {
          if (num != 0)
            goto label_13;
        }
        else
          goto label_18;
label_2:
        if (true)
          goto label_20;
label_3:
        IDisposable disposable1;
        try
        {
          IDisposable disposable2 = \u0004.\u0002();
          if (true)
          {
            disposable1 = disposable2;
            if (false)
              ;
          }
          string str1;
          do
          {
            string str2 = \u0004.\u0002(obj0);
            if (true)
              str1 = str2;
            else
              break;
          }
          while (false);
          \u0004.\u0002(str1, 0L);
          goto label_13;
        }
        catch (Exception ex)
        {
          goto label_13;
        }
        finally
        {
          disposable1?.Dispose();
        }
label_20:
        disposable1 = (IDisposable) null;
        goto label_3;
label_13:
        if (true)
          num = 0;
        else
          goto label_2;
label_15:
        if (num == 0)
        {
          if (true)
            num = 0;
          else
            goto label_13;
        }
        else
          continue;
label_18:
        if (false)
          goto label_15;
      }
      while (num != 0);
    }

    private static ulong[] \u0002([In] string obj0)
    {
label_0:
      if (true)
        goto label_21;
label_17:
      ulong[] dst;
      if (true)
      {
        if (true)
          return dst;
      }
      else
        goto label_0;
label_21:
      IsolatedStorageFileStream storageFileStream1 = new IsolatedStorageFileStream(obj0, FileMode.OpenOrCreate, FileAccess.Read, FileShare.None, \u0004.\u0001);
      if (true)
        goto label_20;
label_1:
      IsolatedStorageFileStream storageFileStream2;
      try
      {
        ValueType length1 = (ValueType) checked ((IntPtr) storageFileStream2.Length);
        while (true)
        {
          byte[] numArray1 = new byte[length1];
          byte[] numArray2;
          if (true)
            numArray2 = numArray1;
          storageFileStream2.Read(numArray2, 0, numArray2.Length);
          int length2;
          do
          {
            int num = numArray2.Length;
            while (true)
            {
              length2 = num / 8;
              if (true)
              {
                if (false)
                  num = length2;
                else
                  break;
              }
              else
                goto label_9;
            }
            ulong[] numArray3 = new ulong[length2];
            if (true)
              goto label_10;
label_7:
            if (true)
            {
              Buffer.BlockCopy((Array) numArray2, 0, (Array) dst, 0, numArray2.Length);
              continue;
            }
            goto label_1;
label_10:
            dst = numArray3;
            goto label_7;
          }
          while (false);
          goto label_17;
label_9:
          length1 = (ValueType) length2;
        }
      }
      finally
      {
        storageFileStream2?.Dispose();
      }
label_20:
      storageFileStream2 = storageFileStream1;
      goto label_1;
    }

    public static \u0003 \u0002()
    {
      if (true)
        goto label_18;
label_16:
      \u0003 obj1;
      return obj1;
label_18:
      IDisposable disposable1 = \u0004.\u0002();
      if (true)
        goto label_17;
label_1:
      IDisposable disposable2;
      try
      {
        \u0003 obj2 = \u0004.\u0004();
        if (true)
          goto label_5;
label_2:
        \u0003 obj3;
        if (true)
        {
          \u0004.\u0003();
          \u0003 obj4 = obj3;
          if (true)
          {
            if (true)
            {
              obj1 = obj4;
              goto label_16;
            }
            else
              goto label_16;
          }
          else
            goto label_16;
        }
        else
          goto label_16;
label_5:
        obj3 = obj2;
        goto label_2;
      }
      finally
      {
        if (false)
          goto label_11;
label_9:
        int num1 = 2;
        int num2;
        if (num1 != 0)
        {
          if (num1 != 0 && false || disposable2 == null)
            goto label_15;
        }
        else
        {
          num2 = num1;
          goto label_13;
        }
label_11:
        if (true)
          num2 = 0;
        else
          goto label_15;
label_13:
        if (num2 == 0)
          disposable2.Dispose();
        else
          goto label_9;
label_15:;
      }
label_17:
      disposable2 = disposable1;
      goto label_1;
    }

    public static \u0003 \u0003()
    {
      \u0003 obj1;
      if (true)
      {
        if (true)
          goto label_11;
label_2:
        IDisposable disposable1;
        try
        {
          do
          {
            \u0003 obj2 = \u0004.\u0004();
            if (true)
              goto label_4;
label_3:
            continue;
label_4:
            obj1 = obj2;
            goto label_3;
          }
          while (false);
          goto label_9;
        }
        finally
        {
          while (disposable1 != null)
          {
            if (true)
            {
              disposable1.Dispose();
              break;
            }
          }
        }
label_11:
        IDisposable disposable2 = \u0004.\u0002();
        if (true)
        {
          disposable1 = disposable2;
          goto label_2;
        }
        else
          goto label_2;
      }
label_9:
      return obj1;
    }

    public static void \u0002()
    {
      if (true)
        goto label_10;
label_1:
      IDisposable disposable1;
      try
      {
        \u0004.\u0003();
        return;
      }
      finally
      {
        int num = 8;
        if (num != 0)
        {
          if (num == 0)
            goto label_6;
        }
        else
          goto label_7;
label_4:
        disposable1?.Dispose();
label_6:
        num = 0;
label_7:
        if (num != 0)
          goto label_4;
      }
label_10:
      IDisposable disposable2 = \u0004.\u0002();
      if (true)
      {
        if (true)
        {
          disposable1 = disposable2;
          goto label_1;
        }
        else
          goto label_1;
      }
      else
        goto label_1;
    }

    private static \u0003 \u0004()
    {
      ulong[] numArray1 = \u0004.\u0002(\u0004.\u0002);
      ulong[] numArray2;
      if (true)
        numArray2 = numArray1;
      Dictionary<string, ulong> dictionary1 = new Dictionary<string, ulong>();
      if (true)
        goto label_33;
label_1:
      Dictionary<string, ulong> dictionary2;
      try
      {
        string[] fileNames = \u0004.\u0001.GetFileNames(\u0004.\u0003 + \u0004.\u0001(2461));
        if (true)
          goto label_24;
label_2:
        if (true)
          goto label_25;
label_3:
        if (true)
        {
          if (true)
            goto label_20;
        }
        else
          goto label_29;
label_7:
        int num1 = 5;
        if (num1 != 0)
        {
          if (num1 == 0)
            goto label_1;
        }
        else
          goto label_21;
label_9:
        string str1;
        ulong[] numArray3 = \u0004.\u0002(str1);
        string key;
        string str2 = Path.Combine(\u0004.\u0003, key + \u0004.\u0001(2452));
        int index;
        int num2;
        if (true)
        {
          IsolatedStorageFileStream storageFileStream = (IsolatedStorageFileStream) null;
          try
          {
            storageFileStream = \u0004.\u0002(str2, FileMode.Open, FileAccess.Read);
            do
            {
              byte[] numArray4 = new byte[storageFileStream.Length];
              storageFileStream.Read(numArray4, 0, numArray4.Length);
              key = \u0004.\u0001.GetString(numArray4);
            }
            while (false);
          }
          catch (FileNotFoundException ex)
          {
            key = \u0004.\u0001.GetString(Convert.FromBase64String(key.Replace('@', '\\')));
          }
          finally
          {
            while (storageFileStream != null)
            {
              if (true)
              {
                storageFileStream.Close();
                break;
              }
            }
          }
          dictionary2[key] = numArray3[0];
          int num3 = index;
          num2 = 1;
          num1 = num3;
        }
        else
          goto label_2;
label_19:
        index = num1 + num2;
label_20:
        num1 = index;
label_21:
        string[] strArray;
        num2 = strArray.Length;
        string str3;
        if (true)
        {
          if (num1 < num2)
          {
            if (true)
            {
              object obj = (object) strArray[index];
              if (true)
                str3 = (string) obj;
            }
            else
              goto label_9;
          }
          else if (false)
            goto label_7;
          else
            goto label_31;
        }
        else
          goto label_19;
label_29:
        string withoutExtension = Path.GetFileNameWithoutExtension(str3);
        if (true)
          goto label_27;
label_6:
        str1 = Path.Combine(\u0004.\u0003, str3);
        goto label_7;
label_27:
        key = withoutExtension;
        goto label_6;
label_25:
        index = 0;
        goto label_3;
label_24:
        strArray = fileNames;
        goto label_2;
      }
      catch (DirectoryNotFoundException ex)
      {
      }
label_31:
      return new \u0003(numArray2, dictionary2);
label_33:
      dictionary2 = dictionary1;
      goto label_1;
    }

    private static void \u0003()
    {
      \u0004.\u0002(\u0004.\u0002);
label_1:
      try
      {
        string[] fileNames = \u0004.\u0001.GetFileNames(\u0004.\u0003 + \u0004.\u0001(2461));
        if (true)
          goto label_12;
label_2:
        if (true)
          goto label_13;
label_10:
        int index;
        string[] strArray;
        for (; index < strArray.Length; ++index)
        {
          if (true)
          {
            object obj = (object) strArray[index];
            string str1;
            if (true)
              str1 = (string) obj;
            string withoutExtension = Path.GetFileNameWithoutExtension(str1);
            if (true)
              goto label_15;
label_4:
            string str2 = Path.Combine(\u0004.\u0003, str1);
            if (true)
              goto label_16;
label_5:
            string str3;
            \u0004.\u0002(str3);
label_6:
            string str4;
            string str5 = Path.Combine(\u0004.\u0003, str4 + \u0004.\u0001(2452));
            if (true)
              goto label_17;
label_7:
            string str6;
            do
            {
              if (true)
                \u0004.\u0002(str6);
              else
                goto label_6;
            }
            while (false);
            continue;
label_17:
            str6 = str5;
            goto label_7;
label_16:
            str3 = str2;
            goto label_5;
label_15:
            str4 = withoutExtension;
            goto label_4;
          }
          else
            goto label_1;
        }
        goto label_21;
label_13:
        index = 0;
        goto label_10;
label_12:
        strArray = fileNames;
        goto label_2;
      }
      catch (DirectoryNotFoundException ex)
      {
      }
label_21:
      try
      {
        \u0004.\u0001.DeleteDirectory(\u0004.\u0003);
      }
      catch (IsolatedStorageException ex)
      {
      }
      if (false)
        return;
      \u0004.\u0001.CreateDirectory(\u0004.\u0003);
    }

    private sealed class \u0005 : IDisposable
    {
      private readonly Mutex \u0001;

      public \u0005([In] string obj0)
      {
        if (obj0.Length > 260)
          obj0 = obj0.Remove(261);
        obj0 = obj0.Replace(Path.DirectorySeparatorChar, '_');
        this.\u0001 = new Mutex(false, obj0);
        try
        {
          this.\u0001.WaitOne();
        }
        catch (AbandonedMutexException ex)
        {
        }
      }

      public void Dispose()
      {
        this.\u0001.ReleaseMutex();
        this.\u0001.Close();
      }
    }
  }
}
