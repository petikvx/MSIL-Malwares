// Decompiled with JetBrains decompiler
// Type: GStruct1
// Assembly: NanoCore Client, Version=1.2.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 3E6578E1-28C0-4BF9-8DBD-C31738BD9814
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\HEUR-Trojan.MSIL.Generic-09efb455bb0ce60c3e25c3d2179b7494a69efdee0507cc96a46e1bc838d60041.exe

using System;

public struct GStruct1
{
  public string string_0;
  public string string_1;
  private static string[] string_2 = new string[6]
  {
    "ss",
    "mon",
    "mgr",
    "sv",
    "svc",
    "host"
  };
  private static string[] string_3 = new string[6]
  {
    "Subsystem",
    "Monitor",
    "Manager",
    "Service",
    "Service",
    "Host"
  };
  private static string[] string_4 = new string[23]
  {
    "dhcp",
    "upnp",
    "tcp",
    "udp",
    "saas",
    "iss",
    "smtp",
    "dos",
    "dpi",
    "pci",
    "scsi",
    "wan",
    "lan",
    "nat",
    "imap",
    "nas",
    "ntfs",
    "wpa",
    "dsl",
    "agp",
    "arp",
    "ddp",
    "dns"
  };

  public static GStruct1 smethod_0(Guid guid_0)
  {
    Random random = new Random(GStruct1.smethod_1(guid_0));
    int index = random.Next(GStruct1.string_2.Length);
    string str1 = GStruct1.string_2[index];
    string str2 = GStruct1.string_3[index];
    string empty = string.Empty;
    string str3;
    do
    {
      str3 = GStruct1.string_4[random.Next(GStruct1.string_4.Length)];
    }
    while ((int) str3[str3.Length - 1] == (int) str1[0]);
    return new GStruct1()
    {
      string_0 = string.Format("{0} {1}", (object) str3.ToUpper(), (object) str2),
      string_1 = string.Format("{0}{1}.exe", (object) str3, (object) str1)
    };
  }

  private static int smethod_1(Guid guid_0)
  {
    byte[] byteArray = guid_0.ToByteArray();
    int int32 = BitConverter.ToInt32(byteArray, 0);
    int num = byteArray.Length - 1;
    for (int index = 4; index <= num; ++index)
      int32 ^= (int) byteArray[index];
    return int32;
  }
}
