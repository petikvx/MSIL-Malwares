// Decompiled with JetBrains decompiler
// Type: ⁪‎‪‭‎‬‍⁯‪‮⁯‌⁫‫⁯⁮‫‭⁪⁮‏‏‮‪⁯⁫‭‫⁯‮‭⁭⁬⁬⁬‪⁮‍‬⁫‮
// Assembly: ReadLineS0SAT, Version=2.0.8.1, Culture=neutral, PublicKeyToken=null
// MVID: 826822DE-6F21-4D67-9238-0DAF50EB618B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-9ec8f988ff41765b68c6a4d29d259fafb62e97ad2d3633c43fbe0ab0dd12518d.exe

using System;

public class \u206A‎‪‭‎‬‍⁯‪‮⁯‌⁫‫⁯⁮‫‭⁪⁮‏‏‮‪⁯⁫‭‫⁯‮‭⁭⁬⁬⁬‪⁮‍‬⁫‮ : 
  \u206F⁪‍⁯‬‌‮‏⁬​⁮‫⁮⁬‬‭‪⁫⁪⁪⁯⁮⁮‎‌‭‮‎​‌⁫‭⁮⁬‮‌⁫​⁯⁪‮
{
  private \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮ \u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮;
  private \u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮ \u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮;
  private \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮ \u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮;
  private byte[] \u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮;
  private bool \u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮;
  private static readonly byte[] \u200C‫‏‎‏⁪⁭⁮‏‮‏​⁬⁬‬⁭⁯‭⁮‬‎⁭⁪‌‫⁯⁪⁪‬⁬‮‫⁭⁭​⁫‫‬‬‮‮ = new byte[8]
  {
    (byte) 74,
    (byte) 221,
    (byte) 162,
    (byte) 44,
    (byte) 121,
    (byte) 232,
    (byte) 33,
    (byte) 5
  };
  private readonly \u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮ \u202D⁮‫‏⁬‬⁪‍‏‍⁬⁪‎‭‫⁫⁭⁪‌⁪⁮⁫‍⁯‪⁯‬‬⁫‮‮⁮⁭‮⁮‍⁭‪‎‪‮ = (\u206E‏‏⁮⁫‭⁮‌‏‎⁬⁪‍⁪‎‎‏‎‬‫​⁪‬⁭⁭‬​​‎⁪‌‍⁬⁬⁯‍‌‬‫‭‮) new \u202B‌⁯​⁯⁯‭‮⁮‪‎⁫‌‫‮⁭‌‎‌⁬‮‎‌⁫⁯‭‍‏‏‬‎‌⁪‏⁫‮‌‌‍⁭‮();
  private readonly byte[] \u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮ = new byte[20];

  public virtual void \u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(
    bool _param1,
    \u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮ _param2)
  {
    this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮ = _param1;
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮ = new \u202A⁯⁯⁭⁪⁯‪‎‮‬‮⁮‍⁯‫‎⁫‪‪​⁭⁬‌⁯⁮‏‍⁪⁪‎‏⁫⁭⁯‮⁮⁭‏‏‍‮((\u206F‮‪⁭⁮‮‏⁭⁮⁫‏‬‫‏‬‍‪‫⁯⁪‏⁫⁯‫⁫‮‪‮‌‌⁭‪‪‌⁮‫‭⁪⁭‪‮) new \u206F‏‪⁪‭⁭​‎‭‫​‪⁫‪‌‬‫⁪⁯⁮⁫‎‭‬⁮​‫‌‪⁫⁬‫⁯‫‍‮‎⁫‎‍‮());
    \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮ obj1;
    if (_param2 is \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮)
    {
      \u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮ obj2 = (\u206A‍‫‫‪⁮‏‪‫⁫‎⁮‭⁭⁮​‬⁬⁮‫‮‎⁮⁫⁯‫‏⁯⁭⁬⁯⁪‬⁬‫⁪​‫⁪‌‮) _param2;
      _param2 = obj2.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮;
      obj1 = obj2.\u206A‫⁯‭⁯⁭‫‌‍​⁭‬‮‪⁭⁭⁬⁯‍​‌‮‪⁪‬⁮⁭‬‌⁬⁬⁬‌‭‏‏⁭⁬​‏‮;
    }
    else
      obj1 = new \u200D​⁪‮​‫⁯⁮‪‫‪‍⁪⁮⁫‮​⁯⁪⁫⁫‬‮‎‫‎⁪⁮‮‎‌⁬‮‫⁫‬‮‌⁪‭‮();
    switch (_param2)
    {
      case \u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮ _:
        this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮ = (\u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮) _param2;
        if (!this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
          break;
        this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮ = new byte[8];
        ((Random) obj1).NextBytes(this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮);
        this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮ = new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮((\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮);
        break;
      case \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮ _:
        if (!_param1)
          throw new ArgumentException("You should not supply an IV for unwrapping");
        this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮ = (\u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮) _param2;
        this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮ = this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮.\u202A‌⁭‍‪‭‍‍⁪⁭⁫‮⁬‍⁪⁪‪⁬‏⁭⁫⁫⁬‫⁬‪‏⁯‍⁪‍‮‫⁪‏‬⁯‭‏‪‮();
        this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮ = (\u200C⁭‎‪‬⁪⁭⁮‌​⁯‫⁪⁭⁬⁭‌‎⁮⁮⁯⁯​‏‎⁮‌‬⁪⁭⁬​⁯‏⁪‌‮‍⁮‮) this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮.\u202C⁬⁮⁮‮⁮​‫⁪⁬⁬⁬​‎‍⁭⁫‍⁯‬⁪‬⁮⁪‬‬⁭⁭⁫⁫‏‭⁪‬​‮​‫‫⁫‮;
        if (this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length == 8)
          break;
        throw new ArgumentException("IV is not 8 octets", "parameters");
    }
  }

  public virtual string \u206B‪⁭‪⁮‍⁮‪⁭⁪‪​⁮‭‭⁬⁯‍‎⁮⁬‫‍‏‌⁬⁯⁯‮⁪‪‬‫⁯‬⁪‌‍‮‎‮ => "DESede";

  public virtual byte[] \u202B⁯‏⁮​‏⁭⁯⁯⁯‭​⁪⁮⁫‎‌‮‪‫⁮‏‭⁬⁬⁯⁫‍⁪‮‏‌‍‌‬‪‎⁭‬⁭‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (!this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
      throw new InvalidOperationException("Not initialized for wrapping");
    byte[] numArray1 = new byte[_param3];
    Array.Copy((Array) _param1, _param2, (Array) numArray1, 0, _param3);
    byte[] sourceArray1 = this.\u200E‌‪⁭⁭‬‮⁬‬‍⁯⁯‬⁭⁪⁬⁪‫⁯‫‏⁬⁪⁬‬‪‭‌‌⁬‬‭‬⁯‎‎⁭⁪⁪⁬‮(numArray1);
    byte[] destinationArray1 = new byte[numArray1.Length + sourceArray1.Length];
    Array.Copy((Array) numArray1, 0, (Array) destinationArray1, 0, numArray1.Length);
    Array.Copy((Array) sourceArray1, 0, (Array) destinationArray1, numArray1.Length, sourceArray1.Length);
    int num = this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
    if (destinationArray1.Length % num != 0)
      throw new InvalidOperationException("Not multiple of block length");
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(true, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮);
    byte[] sourceArray2 = new byte[destinationArray1.Length];
    for (int index = 0; index != destinationArray1.Length; index += num)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(destinationArray1, index, sourceArray2, index);
    byte[] destinationArray2 = new byte[this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length + sourceArray2.Length];
    Array.Copy((Array) this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮, 0, (Array) destinationArray2, 0, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length);
    Array.Copy((Array) sourceArray2, 0, (Array) destinationArray2, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮.Length, sourceArray2.Length);
    byte[] numArray2 = \u206A‎‪‭‎‬‍⁯‪‮⁯‌⁫‫⁯⁮‫‭⁪⁮‏‏‮‪⁯⁫‭‫⁯‮‭⁭⁬⁬⁬‪⁮‍‬⁫‮.\u202A⁯‍⁪‬⁭‮⁭⁭⁭⁪⁬‍​‍⁯‪‫⁭‎‮‎⁮‍⁬‪‭‪‫‪⁬‪⁬‬‎‬⁬‮⁮‫‮(destinationArray2);
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(true, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮((\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮, \u206A‎‪‭‎‬‍⁯‪‮⁯‌⁫‫⁯⁮‫‭⁪⁮‏‏‮‪⁯⁫‭‫⁯‮‭⁭⁬⁬⁬‪⁮‍‬⁫‮.\u200C‫‏‎‏⁪⁭⁮‏‮‏​⁬⁬‬⁭⁯‭⁮‬‎⁭⁪‌‫⁯⁪⁪‬⁬‮‫⁭⁭​⁫‫‬‬‮‮));
    for (int index = 0; index != numArray2.Length; index += num)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(numArray2, index, numArray2, index);
    return numArray2;
  }

  public virtual byte[] \u206D‬‍⁫⁯‮‮​‌​‍‎‏‫⁪‬⁬⁪‪​⁬​⁫​‫‫⁬​⁫‭⁯‪⁪⁪⁭‍⁮​‬‍‮(
    byte[] _param1,
    int _param2,
    int _param3)
  {
    if (this.\u200B‫⁪⁭‭⁭‍‍⁯‮⁪⁮⁪‍‬‮‌‏‫‭⁬⁫‌‌‮‪‭‌‬‌⁪‮‪⁪‫​‭⁬⁪⁮‮)
      throw new InvalidOperationException("Not set for unwrapping");
    if (_param1 == null)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Null pointer as ciphertext");
    int num = this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206C⁭‮‍⁯‮⁮⁬‍‭‌⁬⁭‍⁫⁭⁫‌⁪⁮‬⁪⁪‬‏‏⁫‬⁫‏‪⁮‎⁮‮‭⁫‏⁪⁪‮();
    if (_param3 % num != 0)
      throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Ciphertext not multiple of " + num.ToString());
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮((\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮, \u206A‎‪‭‎‬‍⁯‪‮⁯‌⁫‫⁯⁮‫‭⁪⁮‏‏‮‪⁯⁫‭‫⁯‮‭⁭⁬⁬⁬‪⁮‍‬⁫‮.\u200C‫‏‎‏⁪⁭⁮‏‮‏​⁬⁬‬⁭⁯‭⁮‬‎⁭⁪‌‫⁯⁪⁪‬⁬‮‫⁭⁭​⁫‫‬‬‮‮));
    byte[] numArray = new byte[_param3];
    for (int index = 0; index != numArray.Length; index += num)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(_param1, _param2 + index, numArray, index);
    byte[] sourceArray1 = \u206A‎‪‭‎‬‍⁯‪‮⁯‌⁫‫⁯⁮‫‭⁪⁮‏‏‮‪⁯⁫‭‫⁯‮‭⁭⁬⁬⁬‪⁮‍‬⁫‮.\u202A⁯‍⁪‬⁭‮⁭⁭⁭⁪⁬‍​‍⁯‪‫⁭‎‮‎⁮‍⁬‪‭‪‫‪⁬‪⁬‬‎‬⁬‮⁮‫‮(numArray);
    this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮ = new byte[8];
    byte[] destinationArray1 = new byte[sourceArray1.Length - 8];
    Array.Copy((Array) sourceArray1, 0, (Array) this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮, 0, 8);
    Array.Copy((Array) sourceArray1, 8, (Array) destinationArray1, 0, sourceArray1.Length - 8);
    this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮ = new \u200C⁯‭‏⁯‬‌‌‏​‌‫⁬‮⁮⁫‬⁬‮⁪‍​⁯‮⁭‏‫‪‍‬⁮​‬⁭⁯‍⁭‭‪⁬‮((\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u200F⁫‭‪‌⁪⁫‎‍⁭⁫‍‬‎‬‬⁭‬⁬‬⁭⁮‮‍⁮⁫​‍‎⁪⁮⁪⁭⁪‪⁬⁪‬⁬⁬‮, this.\u202B‍⁬⁭‌‬‬‍‏‭‬‎​‮‍‭⁮⁯⁯‮⁮⁬‬​‏‍‪​⁭‌⁪‎⁬⁬‌‌‍⁭⁬‎‮);
    this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206A⁭⁫‪‫‬⁪‎​⁯‎‪⁬⁭​‍⁪⁫‌⁪‫⁯​⁪⁫⁫‪‬⁬‏‫‮⁬‬⁭⁬⁫‍⁮‮(false, (\u202B⁭⁮‬‎⁪‬⁪‬⁮⁪‮‬‍‎⁮‎⁫‎​‌⁫⁪‭‬‮‏‮​⁮‌‌‬‌⁯‮⁫‮‬⁫‮) this.\u202D⁮‬⁬‏⁬⁪‪⁫⁪‎⁮⁬⁯⁯⁭‏‌‌⁮‏⁬‬‌‍​‭⁫‭​‭⁬‍⁬⁪‎‎⁮‍‌‮);
    byte[] sourceArray2 = new byte[destinationArray1.Length];
    for (int index = 0; index != sourceArray2.Length; index += num)
      this.\u200D⁯‌‎‏⁪⁬‏‭‮‍⁯‪‍⁪‍‫‪‍⁮⁯‬‍⁫‬⁮⁬​⁪‌‭‫⁫‍⁭‮‌‭⁫⁭‮.\u206D‌‍‪⁮⁮⁮⁯‭⁪‍‬‭‏‍⁬⁭⁯‪‏‍‭‬‮‬⁮​⁫⁭⁯‭‫‌​‫‍⁭‬⁯‍‮(destinationArray1, index, sourceArray2, index);
    byte[] destinationArray2 = new byte[sourceArray2.Length - 8];
    byte[] destinationArray3 = new byte[8];
    Array.Copy((Array) sourceArray2, 0, (Array) destinationArray2, 0, sourceArray2.Length - 8);
    Array.Copy((Array) sourceArray2, sourceArray2.Length - 8, (Array) destinationArray3, 0, 8);
    return this.\u206C‮‏⁫‫‍⁭‮⁯⁮⁯‮⁫‪‭‬‪‭⁭‎⁭‎⁯⁪‮‪⁭⁮⁯⁮⁯​⁪⁯⁮⁮​‎​⁪‮(destinationArray2, destinationArray3) ? destinationArray2 : throw new \u206F⁭‭‫‎‍‏⁯‬‍‌​⁭⁮‬⁪⁬⁮⁯‪⁪‏‬‭⁬⁫‪​‬‬‎⁪‪⁪‭‏‫‬⁪‏‮("Checksum inside ciphertext is corrupted");
  }

  private byte[] \u200E‌‪⁭⁭‬‮⁬‬‍⁯⁯‬⁭⁪⁬⁪‫⁯‫‏⁬⁪⁬‬‪‭‌‌⁬‬‭‬⁯‎‎⁭⁪⁪⁬‮(byte[] _param1)
  {
    this.\u202D⁮‫‏⁬‬⁪‍‏‍⁬⁪‎‭‫⁫⁭⁪‌⁪⁮⁫‍⁯‪⁯‬‬⁫‮‮⁮⁭‮⁮‍⁭‪‎‪‮.\u206F⁮⁪‎‭‍‎​‎⁬⁮‍‏⁫‭​‫⁬‌⁭​‏​‫‬⁯​⁫​⁬‎⁯⁫‮‍⁯‮‌⁪⁭‮(_param1, 0, _param1.Length);
    this.\u202D⁮‫‏⁬‬⁪‍‏‍⁬⁪‎‭‫⁫⁭⁪‌⁪⁮⁫‍⁯‪⁯‬‬⁫‮‮⁮⁭‮⁮‍⁭‪‎‪‮.\u200F‏‏‬‫​⁮‬⁫‌‌⁮⁬‏⁭‭‌⁯⁪​‍​⁮⁫‮‫⁮‌‎‪⁬⁯⁪‪⁬‫⁫⁮‪⁭‮(this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮, 0);
    byte[] destinationArray = new byte[8];
    Array.Copy((Array) this.\u200C‮⁮‫‭‬‪⁭‮‏‌‎⁫​⁪‬‪‪⁬‭‍‪⁯‫⁪⁬⁯⁯⁫⁪‭⁪⁯⁫⁭‍‬⁪‌‎‮, 0, (Array) destinationArray, 0, 8);
    return destinationArray;
  }

  private bool \u206C‮‏⁫‫‍⁭‮⁯⁮⁯‮⁫‪‭‬‪‭⁭‎⁭‎⁯⁪‮‪⁭⁮⁯⁮⁯​⁪⁯⁮⁮​‎​⁪‮(byte[] _param1, byte[] _param2) => \u206D‭‎‏⁪⁫‌⁫⁫‮‮​‮‫⁯‎​⁮‭‍⁬⁫⁭⁬‎⁭‫‮‫⁬⁫‬‮⁪‌⁮⁬⁭⁬‪‮.\u200F⁬‌‬⁭⁪⁪‏‫⁮⁭‪⁮‎​‍⁬‭⁪⁯⁬‭‌⁬⁬‬‫‮⁫⁯‏⁫⁪‌⁬⁫⁫‬‬‬‮(this.\u200E‌‪⁭⁭‬‮⁬‬‍⁯⁯‬⁭⁪⁬⁪‫⁯‫‏⁬⁪⁬‬‪‭‌‌⁬‬‭‬⁯‎‎⁭⁪⁪⁬‮(_param1), _param2);

  private static byte[] \u202A⁯‍⁪‬⁭‮⁭⁭⁭⁪⁬‍​‍⁯‪‫⁭‎‮‎⁮‍⁬‪‭‪‫‪⁬‪⁬‬‎‬⁬‮⁮‫‮(byte[] _param0)
  {
    byte[] numArray = new byte[_param0.Length];
    for (int index = 0; index < _param0.Length; ++index)
      numArray[index] = _param0[_param0.Length - (index + 1)];
    return numArray;
  }
}
