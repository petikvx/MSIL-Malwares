// Decompiled with JetBrains decompiler
// Type: Dbasic.KeyWords.CkwDim
// Assembly: B4Pruntime, Version=1.0.3056.20520, Culture=neutral, PublicKeyToken=null
// MVID: BED81B59-7EDE-4B04-983E-56C0010CF881
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan-SMS.WinCE.Redoc.b-18cd0a1680457d7a4ff64f016ab2639c9c89d57bf8a7f51328c2d40bef9526f0.exe

using System;

namespace Dbasic.KeyWords
{
  public class CkwDim : CkeyWords
  {
    public CkwDim(CRunner CRunner)
      : base(CRunner)
    {
    }

    public override MethodReturn Method(Place place, ref Locals locals)
    {
      string key;
      int num;
      int length1;
      int length2;
      int vDouble;
      while (true)
      {
        key = this.CRunner.nextWord(true, ref place).Value;
        if (this.CRunner.CheckNextWord(place))
        {
          if (this.CRunner.nextWord(true, ref place).Value == ",")
          {
            locals.Reg.Add((object) key, (object) "");
          }
          else
          {
            num = 1;
            length1 = 0;
            length2 = 0;
            this.CRunner.globals.Arrays.Remove((object) key);
            RunReturn runReturn = this.CRunner.RunCode(place, false, true, ref locals);
            place = runReturn.place;
            vDouble = (int) runReturn.vDouble;
            if (this.CRunner.nextWord(true, ref place).Value == ",")
            {
              ++num;
              runReturn = this.CRunner.RunCode(place, false, true, ref locals);
              place = runReturn.place;
              length1 = (int) runReturn.vDouble;
              if (this.CRunner.nextWord(true, ref place).Value == ",")
              {
                ++num;
                runReturn = this.CRunner.RunCode(place, false, true, ref locals);
                place = runReturn.place;
                length2 = (int) runReturn.vDouble;
                ++place.WordI;
              }
            }
            if (this.CRunner.CheckNextWord(place))
            {
              if (this.CRunner.nextWord(true, ref place).Value == "as")
              {
                string str1 = this.CRunner.nextWord(true, ref place).Value;
                string str2 = str1[0].ToString((IFormatProvider) CRunner.cul).ToUpper(CRunner.cul) + str1.Substring(1).ToLower(CRunner.cul);
                int[] numArray = (int[]) null;
                switch (num)
                {
                  case 1:
                    numArray = new int[1]{ vDouble };
                    break;
                  case 2:
                    numArray = new int[2]
                    {
                      vDouble,
                      length1
                    };
                    break;
                  case 3:
                    numArray = new int[3]
                    {
                      vDouble,
                      length1,
                      length2
                    };
                    break;
                }
                Array instance = Array.CreateInstance(Type.GetType("System." + str2), numArray);
                this.CRunner.globals.Arrays.Add((object) key, (object) instance);
                if (this.CRunner.CheckNextWord(place))
                  ++place.WordI;
                else
                  goto label_24;
              }
              else
              {
                switch (num)
                {
                  case 1:
                    this.CRunner.globals.Arrays.Add((object) key, (object) new string[vDouble]);
                    continue;
                  case 2:
                    this.CRunner.globals.Arrays.Add((object) key, (object) new string[vDouble, length1]);
                    continue;
                  case 3:
                    this.CRunner.globals.Arrays.Add((object) key, (object) new string[vDouble, length1, length2]);
                    continue;
                  default:
                    continue;
                }
              }
            }
            else
              break;
          }
        }
        else
          goto label_23;
      }
      switch (num)
      {
        case 1:
          this.CRunner.globals.Arrays.Add((object) key, (object) new string[vDouble]);
          goto label_24;
        case 2:
          this.CRunner.globals.Arrays.Add((object) key, (object) new string[vDouble, length1]);
          goto label_24;
        case 3:
          this.CRunner.globals.Arrays.Add((object) key, (object) new string[vDouble, length1, length2]);
          goto label_24;
        default:
          goto label_24;
      }
label_23:
      locals.Reg.Add((object) key, (object) "");
label_24:
      return new MethodReturn(place);
    }
  }
}
