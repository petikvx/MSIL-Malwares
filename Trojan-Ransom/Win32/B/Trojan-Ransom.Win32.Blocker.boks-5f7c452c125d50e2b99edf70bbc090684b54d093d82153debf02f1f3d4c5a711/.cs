// Decompiled with JetBrains decompiler
// Type: 
// Assembly: loadinghub, Version=1.0.1.1, Culture=neutral, PublicKeyToken=null
// MVID: 1F46CF06-A4EB-445D-B6B9-7A8B4A2C4880
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00080-msil\Trojan-Ransom.Win32.Blocker.boks-5f7c452c125d50e2b99edf70bbc090684b54d093d82153debf02f1f3d4c5a711.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Xml.Linq;

[EditorBrowsable(EditorBrowsableState.Never)]
[DebuggerNonUserCode]
[CompilerGenerated]
internal sealed class \uE003
{
  [EditorBrowsable(EditorBrowsableState.Never)]
  private \uE003()
  {
  }

  public static string get_\uE000(IEnumerable<XElement> source)
  {
    IEnumerator<XElement> enumerator;
    try
    {
      enumerator = source.GetEnumerator();
      if (enumerator.MoveNext())
        return enumerator.Current.Value;
    }
    finally
    {
      enumerator?.Dispose();
    }
    return (string) null;
  }

  public static void set_\uE000(IEnumerable<XElement> source, string value)
  {
    IEnumerator<XElement> enumerator;
    try
    {
      enumerator = source.GetEnumerator();
      if (!enumerator.MoveNext())
        return;
      enumerator.Current.Value = value;
    }
    finally
    {
      enumerator?.Dispose();
    }
  }

  public static string get_\uE000(IEnumerable<XElement> source, XName name)
  {
    IEnumerator<XElement> enumerator;
    try
    {
      enumerator = source.GetEnumerator();
      if (enumerator.MoveNext())
        return (string) enumerator.Current.Attribute(name);
    }
    finally
    {
      enumerator?.Dispose();
    }
    return (string) null;
  }

  public static void set_\uE000(IEnumerable<XElement> source, XName name, string value)
  {
    IEnumerator<XElement> enumerator;
    try
    {
      enumerator = source.GetEnumerator();
      if (!enumerator.MoveNext())
        return;
      enumerator.Current.SetAttributeValue(name, (object) value);
    }
    finally
    {
      enumerator?.Dispose();
    }
  }

  public static string get_\uE000(XElement source, XName name) => (string) source.Attribute(name);

  public static void set_\uE000(XElement source, XName name, string value) => source.SetAttributeValue(name, (object) value);

  [EditorBrowsable(EditorBrowsableState.Never)]
  public static XAttribute \uE000(XName _param0, object _param1) => _param1 == null ? (XAttribute) null : new XAttribute(_param0, RuntimeHelpers.GetObjectValue(_param1));

  [EditorBrowsable(EditorBrowsableState.Never)]
  public static XAttribute \uE000(XName _param0, XNamespace _param1)
  {
    XAttribute xattribute = new XAttribute(_param0, (object) _param1.NamespaceName);
    xattribute.AddAnnotation((object) _param1);
    return xattribute;
  }

  [EditorBrowsable(EditorBrowsableState.Never)]
  public static object \uE000(
    string[] _param0,
    XNamespace[] _param1,
    List<XAttribute> _param2,
    object _param3)
  {
    switch (_param3)
    {
      case XElement xelement:
        // ISSUE: reference to a compiler-generated method
        return (object) \uE003.\uE000(_param0, _param1, _param2, xelement);
      case IEnumerable enumerable:
        // ISSUE: reference to a compiler-generated method
        return (object) \uE003.\uE000(_param0, _param1, _param2, enumerable);
      default:
        return _param3;
    }
  }

  [EditorBrowsable(EditorBrowsableState.Never)]
  public static IEnumerable \uE000(
    string[] _param0,
    XNamespace[] _param1,
    List<XAttribute> _param2,
    IEnumerable _param3)
  {
    if (_param3 == null)
      return _param3;
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    // ISSUE: object of a compiler-generated type is created
    // ISSUE: reference to a compiler-generated method
    return _param3 is IEnumerable<XElement> source ? (IEnumerable) source.Select<XElement, XElement>(new Func<XElement, XElement>(new \uE003.\uE000(_param0, _param1, _param2).\uE000)) : (IEnumerable) _param3.Cast<object>().Select<object, object>(new Func<object, object>(new \uE003.\uE000(_param0, _param1, _param2).\uE000));
  }

  [EditorBrowsable(EditorBrowsableState.Never)]
  public static XElement \uE000(
    string[] _param0,
    XNamespace[] _param1,
    List<XAttribute> _param2,
    XElement _param3)
  {
    XAttribute nextAttribute;
    if (_param3 != null)
    {
      for (XAttribute xattribute1 = _param3.FirstAttribute; xattribute1 != null; xattribute1 = nextAttribute)
      {
        nextAttribute = xattribute1.NextAttribute;
        if (xattribute1.IsNamespaceDeclaration)
        {
          XNamespace xnamespace1 = xattribute1.Annotation<XNamespace>();
          string localName1 = xattribute1.Name.LocalName;
          if ((object) xnamespace1 != null)
          {
            if (_param0 != null && _param1 != null)
            {
              int num = checked (_param0.Length - 1);
              int index = 0;
              while (index <= num)
              {
                string str = _param0[index];
                XNamespace xnamespace2 = _param1[index];
                if (localName1.Equals(str))
                {
                  if (xnamespace1 == xnamespace2)
                    xattribute1.Remove();
                  xattribute1 = (XAttribute) null;
                  break;
                }
                checked { ++index; }
              }
            }
            if (xattribute1 != null)
            {
              if (_param2 != null)
              {
                int num = checked (_param2.Count - 1);
                int index = 0;
                while (index <= num)
                {
                  XAttribute xattribute2 = _param2[index];
                  string localName2 = xattribute2.Name.LocalName;
                  XNamespace xnamespace3 = xattribute2.Annotation<XNamespace>();
                  if ((object) xnamespace3 != null && localName1.Equals(localName2))
                  {
                    if (xnamespace1 == xnamespace3)
                      xattribute1.Remove();
                    xattribute1 = (XAttribute) null;
                    break;
                  }
                  checked { ++index; }
                }
              }
              if (xattribute1 != null)
              {
                xattribute1.Remove();
                _param2.Add(xattribute1);
              }
            }
          }
        }
      }
    }
    return _param3;
  }
}
