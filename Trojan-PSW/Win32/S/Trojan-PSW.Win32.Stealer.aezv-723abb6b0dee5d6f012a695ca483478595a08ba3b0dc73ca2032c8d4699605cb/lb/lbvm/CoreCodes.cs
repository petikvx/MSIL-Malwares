// Decompiled with JetBrains decompiler
// Type: org.lb.lbvm.CoreCodes
// Assembly: ISectionEnt, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 94D57F93-A342-4E0D-9A4D-9518717BA689
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.01-msil\Trojan-PSW.Win32.Stealer.aezv-723abb6b0dee5d6f012a695ca483478595a08ba3b0dc73ca2032c8d4699605cb.exe

using org.lb.lbvm.exceptions;
using org.lb.lbvm.runtime;
using org.lb.lbvm.scheme;
using System;
using System.Collections.Generic;
using System.IO;

namespace org.lb.lbvm
{
  public sealed class CoreCodes : OutputPort
  {
    public readonly int Version;
    private readonly Statement[] Statements;
    internal readonly byte[] Bytecode;
    internal readonly string[] SymbolTable;

    public event EventHandler<PrintEventArgs> OnPrint = (_param1, _param2) => { };

    public void Print(string value) => this.OnPrint((object) this, new PrintEventArgs(value));

    internal CoreCodes(int version, byte[] bytecode, string[] symbolTable)
    {
      this.Version = version;
      this.Statements = BytecodeParser.Parse(bytecode, (IEnumerable<string>) symbolTable, (OutputPort) this);
      this.Bytecode = bytecode;
      this.SymbolTable = symbolTable;
    }

    public static CoreCodes FromSchemeSource(string source) => CoreCodes.FromAssemblerSource(Compiler.Compile(source));

    public static CoreCodes FromAssemblerSource(IEnumerable<string> lines) => Assembler.Assemble(lines);

    public static CoreCodes FromStream(Stream data) => new ProgramFileReader(data).ProgramFile;

    public void WriteToStream(Stream data) => new ProgramFileWriter(this).Write(data);

    public object Run(params object[] parameters)
    {
      EnvironmentStack envStack = new EnvironmentStack();
      envStack.PushNew();
      envStack.Set(Symbol.fromString("sys:args"), new Variable(CoreCodes.CliToVm((object) parameters)));
      int ip = 0;
      ValueStack valueStack = new ValueStack();
      CallStack callStack = new CallStack();
      for (Statement statement = this.Statements[ip]; !(statement is EndStatement); statement = this.Statements[ip])
        statement.Execute(ref ip, valueStack, envStack, callStack);
      if (envStack.Count() == 0)
        throw new RuntimeException("Bad program: Global environment deleted!");
      if (envStack.Count() > 1)
        throw new RuntimeException("Bad program: Environment stack not cleaned up");
      if (callStack.Count() > 1)
        throw new RuntimeException("Bad program: Call stack not cleaned up");
      if (valueStack.Count() == 0)
        throw new RuntimeException("Bad program: Value stack empty after running");
      return valueStack.Count() <= 1 ? valueStack.Pop() : throw new RuntimeException("Bad program: Value stack not cleaned up");
    }

    private static object CliToVm(object o)
    {
      switch (o)
      {
        case null:
          return (object) Nil.GetInstance();
        case bool _:
          return o;
        case int _:
          return o;
        case double _:
          return o;
        case string _:
          return (object) new StringObject((string) o);
        case char _:
          return o;
        default:
          return (object) null;
      }
    }
  }
}
