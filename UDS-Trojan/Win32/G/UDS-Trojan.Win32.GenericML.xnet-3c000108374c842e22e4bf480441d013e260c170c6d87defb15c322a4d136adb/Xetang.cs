// Decompiled with JetBrains decompiler
// Type: MiniGames_Team9.Xetang
// Assembly: DependentHan, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A86A1B94-F21E-4DD9-9B87-E146CFB070D9
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-3c000108374c842e22e4bf480441d013e260c170c6d87defb15c322a4d136adb.exe

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.Windows.Forms.Layout;

namespace MiniGames_Team9
{
  public class Xetang : Form
  {
    public int levelCurrent;
    private bool gameOver;
    private int score;
    private int delay;
    private bool sp;
    private double clock;
    private LevelGame levelController;
    private Spawner spawnController;
    private PLayer player;
    private Random rd;
    private List<Attacker> attackers;
    public static bool isFirst = true;
    private Item itemUpgrade;
    private Item itemPower;
    private Item itemFreeze;
    private int timeFreeze = 0;
    private int timerItem;
    private FormMenu frmMenu;
    public bool isStart = false;
    private int l = 0;
    private IContainer components = (IContainer) null;
    private Timer timerGame;
    private Label lbLevel;
    private PictureBox ptbVienTren;
    private PictureBox ptbVienPhai;
    private PictureBox ptbVienTrai;
    private PictureBox ptbVienDuoi;
    private PictureBox ptbChan2;
    private PictureBox ptbChan1;
    private PictureBox ptbDefense;
    private Label lbPause;
    private PictureBox btnQuit;
    private PictureBox btnHome;
    private PictureBox btnResum;
    private PictureBox MAP;
    private Panel panel1;
    private PictureBox pictureBox1;
    private ProgressBar hp;
    private Label lbHealth;
    private PictureBox btnPause;
    private Label lbDongho;
    private PictureBox pictureBox2;
    private Label lbKills;
    private Label lbState;
    private PictureBox ptbChan3;

    public Xetang()
    {
      this.InitializeComponent();
      this.InitAssets();
      this.InitMap();
    }

    public Xetang(FormMenu formLogin)
    {
      this.InitializeComponent();
      this.frmMenu = formLogin;
      this.InitAssets();
      this.timerGame.Stop();
      this.MAP.Controls.Add((Control) this.ptbVienTren);
      this.MAP.Controls.Add((Control) this.ptbVienDuoi);
      this.MAP.Controls.Add((Control) this.ptbVienTrai);
      this.MAP.Controls.Add((Control) this.ptbVienPhai);
      this.MAP.Controls.Add((Control) this.ptbDefense);
      this.MAP.Controls.Add((Control) this.ptbChan1);
      this.MAP.Controls.Add((Control) this.ptbChan2);
      this.MAP.Controls.Add((Control) this.ptbChan3);
    }

    private void InitAssets()
    {
      this.lbLevel.Parent = (Control) this.MAP;
      this.levelController = new LevelGame(this.lbLevel);
      this.spawnController = new Spawner(this.MAP);
      this.rd = new Random();
      this.attackers = new List<Attacker>();
      this.clock = 0.0;
      this.delay = 0;
      this.score = 0;
      this.levelCurrent = 1;
      this.gameOver = this.sp = false;
    }

    private void InitMap()
    {
      this.InitGach80160(new Point(81, 98));
      this.InitGach80160(new Point(248, 98));
      this.InitGach80160(new Point(470, 98));
      this.InitGach80160(new Point(624, 98));
      this.InitGach80160(new Point(81, 382));
      this.InitGach80160(new Point(624, 382));
      this.InitGach12020(new Point(340, 515));
      this.InitGach12020(new Point(141, 313));
      this.InitGach12020(new Point(527, 313));
      this.InitGach2060(new Point(340, 535));
      this.InitGach2060(new Point(440, 535));
      this.InitGach80140(new Point(294, 323));
      this.InitGach80140(new Point(427, 323));
    }

    private void InitGach80160(Point p)
    {
      int y = p.Y;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 8; ++index2)
        {
          PictureBox pictureBox = new PictureBox();
          pictureBox.Height = 20;
          pictureBox.Width = 20;
          pictureBox.Tag = (object) "Gach";
          pictureBox.Location = p;
          this.MAP.Controls.Add((Control) pictureBox);
          pictureBox.BringToFront();
          p = new Point(p.X, p.Y + 20);
        }
        p = new Point(p.X + 20, y);
      }
    }

    private void InitGach8080(Point p)
    {
      int y = p.Y;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          PictureBox pictureBox = new PictureBox();
          pictureBox.Height = 20;
          pictureBox.Width = 20;
          pictureBox.Tag = (object) "Gach";
          pictureBox.Location = p;
          this.MAP.Controls.Add((Control) pictureBox);
          pictureBox.BringToFront();
          p = new Point(p.X, p.Y + 20);
        }
        p = new Point(p.X + 20, y);
      }
    }

    private void InitGach2060(Point p)
    {
      int y = p.Y;
      for (int index1 = 0; index1 < 1; ++index1)
      {
        for (int index2 = 0; index2 < 3; ++index2)
        {
          PictureBox pictureBox = new PictureBox();
          pictureBox.Height = 20;
          pictureBox.Width = 20;
          pictureBox.Tag = (object) "Gach";
          pictureBox.Location = p;
          this.MAP.Controls.Add((Control) pictureBox);
          pictureBox.BringToFront();
          p = new Point(p.X, p.Y + 20);
        }
        p = new Point(p.X + 20, y);
      }
    }

    private void InitGach12020(Point p)
    {
      int y = p.Y;
      for (int index1 = 0; index1 < 6; ++index1)
      {
        for (int index2 = 0; index2 < 1; ++index2)
        {
          PictureBox pictureBox = new PictureBox();
          pictureBox.Height = 20;
          pictureBox.Width = 20;
          pictureBox.Tag = (object) "Gach";
          pictureBox.Location = p;
          this.MAP.Controls.Add((Control) pictureBox);
          pictureBox.BringToFront();
          p = new Point(p.X, p.Y + 20);
        }
        p = new Point(p.X + 20, y);
      }
    }

    private void InitGach80140(Point p)
    {
      int y = p.Y;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 7; ++index2)
        {
          PictureBox pictureBox = new PictureBox();
          pictureBox.Height = 20;
          pictureBox.Width = 20;
          pictureBox.Tag = (object) "Gach";
          pictureBox.Location = p;
          this.MAP.Controls.Add((Control) pictureBox);
          pictureBox.BringToFront();
          p = new Point(p.X, p.Y + 20);
        }
        p = new Point(p.X + 20, y);
      }
    }

    public void InitPlayerVsAttacker()
    {
      this.player = new PLayer(this.MAP);
      this.player.skin.MakePlayer1();
      new Animation(this.MAP, (Figure) this.player).MakeSpawn(new Point(288, 548));
      this.player.locked = true;
      this.spawnController.InitAttacker(new Point(28, 52), Direction.down, this.attackers);
      this.spawnController.InitAttacker(new Point(378, 52), Direction.down, this.attackers);
      this.spawnController.InitAttacker(new Point(718, 52), Direction.down, this.attackers);
      this.spawnController.SetTransparent(this.player.Avatar);
    }

    private void KeyIsDown(object sender, KeyEventArgs e)
    {
      if (this.gameOver || this.player == null || this.player.locked)
        return;
      this.player.PressKey(sender, e);
    }

    private void KeyIsUp(object sender, KeyEventArgs e)
    {
      if (this.gameOver || this.player.locked)
        return;
      this.player.DropKey(sender, e);
    }

    public void GameStart()
    {
      if (this.player != null)
      {
        this.player.Avatar.Dispose();
        this.player.Avatar = (PictureBox) null;
        this.player = (PLayer) null;
      }
      for (int index = this.attackers.Count<Attacker>() - 1; index >= 0; --index)
      {
        if (this.attackers[index] != null)
        {
          this.attackers[index].Avatar.Dispose();
          this.attackers[index].Avatar = (PictureBox) null;
          this.attackers[index] = (Attacker) null;
        }
      }
      this.attackers = new List<Attacker>();
      foreach (Control control in (ArrangedElementCollection) this.MAP.Controls)
      {
        if (control is PictureBox && (object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "player") || object.Equals(control.Tag, (object) "Gach")))
          this.MAP.Controls.Remove(control);
      }
      if (this.isStart)
        Sound.Start();
      this.InitMap();
      this.score = 0;
      this.gameOver = false;
      this.InitPlayerVsAttacker();
      this.timerGame.Start();
      Xetang.isFirst = false;
      this.itemFreeze = this.itemPower = this.itemUpgrade = (Item) null;
    }

    private void SetTransparent(PictureBox Map, PictureBox sender)
    {
      sender.BringToFront();
      sender.BackColor = Color.Transparent;
      sender.Parent = (Control) Map;
    }

    private void ShowLevelGame()
    {
      int num = 0;
      if (this.score == 0)
        this.levelCurrent = 1;
      else if (this.score == 3)
        this.levelCurrent = 2;
      else if (this.score == 6)
        this.levelCurrent = 3;
      else if (this.score == 9)
        this.levelCurrent = 4;
      else if (this.score == 12)
        this.levelCurrent = 5;
      else if (this.score == 15)
        this.levelCurrent = 6;
      else if (this.score == 17)
        this.levelCurrent = 7;
      else
        num = 1;
      if (num != 0 || this.levelCurrent == this.levelController.level)
        return;
      this.levelController.level = this.levelCurrent;
      this.levelController.Animation();
    }

    private void LoadFrames(object sender, EventArgs e)
    {
      this.ShowLevelGame();
      ++this.delay;
      this.clock += 0.02;
      this.lbDongho.Text = Math.Round(this.clock, 2).ToString();
      if (this.score == 400)
      {
        this.timerGame.Stop();
        Sound.GameOver();
        this.gameOver = true;
        this.levelController.level = 8;
        this.levelController.Animation();
      }
      if (this.player.playerHealth > 1.0)
        this.hp.Value = Convert.ToInt32(this.player.playerHealth);
      else if (this.player.state == FigureState.weak)
      {
        this.timerGame.Stop();
        Sound.GameOver();
        this.gameOver = true;
        this.frmMenu.UpdateScore(this.score, this.clock);
        this.ShowMenuForm();
        this.isStart = true;
        Xetang.isFirst = true;
      }
      else
        this.player.DownState();
      this.lbState.Text = "State: " + this.player.state.ToString();
      this.lbKills.Text = "Kills: " + this.score.ToString();
      if (this.player.playerHealth < 20.0)
        this.hp.ForeColor = Color.Red;
      this.player.MoveAvatar(sender, e);
      foreach (Control control1 in (ArrangedElementCollection) this.MAP.Controls)
      {
        if (control1 is PictureBox && object.Equals(control1.Tag, (object) "freeze"))
        {
          if (control1.Bounds.IntersectsWith(this.player.Avatar.Bounds))
          {
            FreezeItem itemFreeze = (FreezeItem) this.itemFreeze;
            this.timeFreeze = 100;
            this.MAP.Controls.Remove(control1);
            itemFreeze.Destroy();
          }
        }
        else if (control1 is PictureBox && object.Equals(control1.Tag, (object) "upgrade"))
        {
          if (control1.Bounds.IntersectsWith(this.player.Avatar.Bounds))
          {
            UpgradeItem itemUpgrade = (UpgradeItem) this.itemUpgrade;
            this.MAP.Controls.Remove(control1);
            ++this.player.bulletLevel;
            this.player.dame += 2;
            if (this.player.bulletLevel == 5)
              this.player.UpState();
            itemUpgrade.Destroy();
          }
        }
        else if (control1 is PictureBox && object.Equals(control1.Tag, (object) "power") && control1.Bounds.IntersectsWith(this.player.Avatar.Bounds))
        {
          this.itemPower.Destroy();
          for (int index = 2; index >= 0; --index)
          {
            Attacker attacker = this.attackers[index];
            this.sp = true;
            ++this.score;
            this.MAP.Controls.Remove((Control) attacker.Avatar);
            if (attacker.Avatar.Tag != null)
            {
              this.ExplosionAttacker(new Point(attacker.Avatar.Left, attacker.Avatar.Top));
              this.spawnController.RemoveAttacker(this.attackers, attacker);
            }
            this.delay = 110;
          }
        }
        if (control1 is PictureBox && object.Equals(control1.Tag, (object) "bulletRed") || object.Equals(control1.Tag, (object) "bulletOrange"))
        {
          foreach (Control control2 in (ArrangedElementCollection) this.MAP.Controls)
          {
            if (control2 is PictureBox && object.Equals(control2.Tag, (object) "bulletOrange") && control1 != control2)
            {
              if (control1.Bounds.IntersectsWith(control2.Bounds))
              {
                this.MAP.Controls.Remove(control1);
                this.MAP.Controls.Remove(control2);
              }
            }
            else if (control2 is PictureBox && object.Equals(control2.Tag, (object) "Thep"))
            {
              if (control1.Bounds.IntersectsWith(control2.Bounds))
                this.MAP.Controls.Remove(control1);
            }
            else if (control2 is PictureBox && object.Equals(control2.Tag, (object) "defense"))
            {
              if (control1.Bounds.IntersectsWith(control2.Bounds))
              {
                this.timerGame.Stop();
                Sound.AttackerBurst();
                Point location = control2.Location;
                int x = location.X;
                location = control2.Location;
                int y = location.Y;
                this.ExplosionAttacker(new Point(x, y));
                this.gameOver = true;
                this.MAP.Controls.Remove(control1);
                this.frmMenu.UpdateScore(this.score, this.clock);
                this.ShowMenuForm();
                this.isStart = true;
                Xetang.isFirst = true;
              }
            }
            else if (control2 is PictureBox && object.Equals(control2.Tag, (object) "Gach") && control1.Bounds.IntersectsWith(control2.Bounds))
            {
              this.MAP.Controls.Remove(control1);
              this.MAP.Controls.Remove(control2);
            }
          }
        }
        if (control1 is PictureBox && object.Equals(control1.Tag, (object) "bulletOrange"))
        {
          PictureBox pictureBox = control1 as PictureBox;
          if (control1.Bounds.IntersectsWith(this.player.Avatar.Bounds))
          {
            if (control1.Bounds.IntersectsWith(this.player.Avatar.Bounds))
            {
              if (this.levelCurrent == 1)
                this.player.playerHealth -= 10.0;
              else if (this.levelCurrent == 2)
                this.player.playerHealth -= 15.0;
              else if (this.levelCurrent == 3)
                this.player.playerHealth -= 20.0;
              else if (this.levelCurrent == 4)
                this.player.playerHealth -= 25.0;
              else if (this.levelCurrent == 5)
                this.player.playerHealth -= 30.0;
              else
                this.player.playerHealth -= 35.0;
            }
            this.MAP.Controls.Remove(control1);
          }
        }
        if (control1 is PictureBox && object.Equals(control1.Tag, (object) "attacker"))
        {
          foreach (Control control3 in (ArrangedElementCollection) this.MAP.Controls)
          {
            if (control3 is PictureBox && object.Equals(control3.Tag, (object) "bulletRed") && control1 is PictureBox && object.Equals(control1.Tag, (object) "attacker") && control1.Bounds.IntersectsWith(control3.Bounds))
              this.CollisionHandle((PictureBox) control3, (PictureBox) control1);
          }
        }
      }
      if (this.timeFreeze == 0)
        this.MoveAttackers();
      else
        --this.timeFreeze;
      ++this.timerItem;
      if (this.timerItem > 200)
      {
        this.timerItem = 0;
        this.InitItem();
      }
      if (this.delay <= 169 || !this.sp)
        return;
      this.spawnController.InitAttacker(new Point(28, 52), Direction.down, this.attackers);
      this.spawnController.InitAttacker(new Point(378, 52), Direction.down, this.attackers);
      this.spawnController.InitAttacker(new Point(718, 52), Direction.down, this.attackers);
      this.sp = false;
      this.delay = 110;
    }

    private void CollisionHandle(PictureBox bullet, PictureBox zombie)
    {
      Attacker att = (Attacker) null;
      foreach (Attacker attacker in this.attackers)
      {
        if (attacker.Avatar == zombie)
        {
          att = attacker;
          break;
        }
      }
      if (att == null)
        return;
      att.attackerHealth -= (double) (this.player.dame - this.levelCurrent * 10);
      if (att.attackerHealth <= 0.0)
      {
        if (att.state == FigureState.weak)
        {
          ++this.score;
          Sound.AttackerBurst();
          bullet.Dispose();
          bullet = (PictureBox) null;
          zombie.Tag = (object) null;
          this.MAP.Controls.Remove((Control) zombie);
          this.MAP.Controls.Remove((Control) bullet);
          this.ExplosionAttacker(new Point(zombie.Left, zombie.Top));
          this.spawnController.RemoveAttacker(this.attackers, att);
          this.spawnController.SpawnAttacker(this.attackers, this.levelCurrent, this.MAP);
        }
        else
        {
          bullet.Dispose();
          bullet = (PictureBox) null;
          this.MAP.Controls.Remove((Control) bullet);
          att.DownState();
        }
      }
      else
      {
        bullet.Dispose();
        bullet = (PictureBox) null;
        this.MAP.Controls.Remove((Control) bullet);
      }
    }

    private void ExplosionAttacker(Point vt) => new Animation(this.MAP).MakeAnimation(vt);

    private void MakeSpeedForAttackers()
    {
    }

    private void MoveAttackers()
    {
      this.MakeSpeedForAttackers();
      foreach (Attacker attacker in this.attackers)
      {
        if (!attacker.locked)
        {
          attacker.direction = this.SelectDirectAttakerNextMove(attacker);
          attacker.MoveEnemy();
        }
      }
    }

    private Direction SelectDirectAttakerNextMove(Attacker att)
    {
      bool flag1 = true;
      Direction direction = att.direction;
      if (this.rd.Next(0, 100) > 0)
      {
        foreach (Control control in (ArrangedElementCollection) this.MAP.Controls)
        {
          if (control is PictureBox && control != att.Avatar)
          {
            if (object.Equals(control.Tag, (object) "Thep") || object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "Gach") || object.Equals(control.Tag, (object) "Spawn"))
            {
              PictureBox pictureBox = this.NextLocationFigure((Figure) att, att.direction, att.speed);
              if (control.Bounds.IntersectsWith(pictureBox.Bounds))
                flag1 = false;
            }
            else if (object.Equals(control.Tag, (object) "Avatar") || object.Equals(control.Tag, (object) "defense"))
            {
              PictureBox pictureBox = this.NextLocationFigure((Figure) att, att.direction, att.speed);
              if (control.Bounds.IntersectsWith(pictureBox.Bounds))
              {
                Attacker.isStand = true;
                return direction;
              }
              Attacker.isStand = false;
            }
          }
        }
        if (flag1)
          return direction;
      }
      List<Direction> directionList = new List<Direction>(3);
      if (direction != 0)
        directionList.Add(Direction.up);
      if (direction != Direction.left)
        directionList.Add(Direction.left);
      if (direction != Direction.down)
        directionList.Add(Direction.down);
      if (direction != Direction.right)
        directionList.Add(Direction.right);
      bool flag2;
      int index;
      do
      {
        flag2 = true;
        if (directionList.Count <= 0)
          return Direction.stand;
        index = this.rd.Next(directionList.Count);
        foreach (Control control in (ArrangedElementCollection) this.MAP.Controls)
        {
          if (control is PictureBox && control != att.Avatar && (object.Equals(control.Tag, (object) "Avatar") || object.Equals(control.Tag, (object) "Thep") || object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "defense") || object.Equals(control.Tag, (object) "Gach") || object.Equals(control.Tag, (object) "Spawn")))
          {
            PictureBox pictureBox = this.NextLocationFigure((Figure) att, directionList[index], att.speed);
            if (control.Bounds.IntersectsWith(pictureBox.Bounds))
            {
              flag2 = false;
              directionList.RemoveAt(index);
              break;
            }
          }
        }
      }
      while (!flag2);
      return directionList[index];
    }

    private PictureBox NextLocationFigure(Figure fig, Direction direct, int speed)
    {
      PictureBox pictureBox = new PictureBox();
      pictureBox.Size = fig.Avatar.Size;
      pictureBox.Location = fig.Avatar.Location;
      switch (direct)
      {
        case Direction.up:
          pictureBox.Location = new Point(fig.Avatar.Location.X, fig.Avatar.Location.Y - speed - 1);
          break;
        case Direction.down:
          pictureBox.Location = new Point(fig.Avatar.Location.X, fig.Avatar.Location.Y + speed + 1);
          break;
        case Direction.left:
          pictureBox.Location = new Point(fig.Avatar.Location.X - speed - 1, fig.Avatar.Location.Y);
          break;
        case Direction.right:
          pictureBox.Location = new Point(fig.Avatar.Location.X + speed + 1, fig.Avatar.Location.Y);
          break;
      }
      return pictureBox;
    }

    private void InitItem()
    {
      int num = this.rd.Next(0, 100);
      if (num < 10 && this.levelCurrent >= 2)
        this.itemFreeze = (Item) new FreezeItem(this.MAP);
      else if (num > 70 && this.levelCurrent >= 3)
        this.itemPower = (Item) new PowerItem(this.MAP);
      else if (num < 50)
        this.itemUpgrade = (Item) new UpgradeItem(this.MAP);
      if (this.itemUpgrade != null)
        this.itemUpgrade.CreateItem(this.MAP);
      if (this.itemFreeze != null)
        this.itemFreeze.CreateItem(this.MAP);
      if (this.itemPower == null)
        return;
      this.itemPower.CreateItem(this.MAP);
    }

    private void ptbVienPhai_Click(object sender, EventArgs e)
    {
    }

    private void btnResum_Click(object sender, EventArgs e)
    {
      Sound.ClickSound();
      this.btnPause.Enabled = true;
      this.ShowGameOver();
      this.timerGame.Start();
    }

    private void btnHome_Click(object sender, EventArgs e)
    {
      Sound.ClickSound();
      this.btnPause.Enabled = true;
      this.ShowGameOver();
      this.frmMenu.Show();
      this.Hide();
      this.isStart = true;
    }

    private void btnQuit_Click(object sender, EventArgs e)
    {
      Sound.ClickSound();
      if (MessageBox.Show("Bạn muốn thoát chứ ?", "Thông báo", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) != DialogResult.OK)
        return;
      Application.Exit();
    }

    private void ShowMenuForm()
    {
      this.frmMenu.ShowFormEnd();
      this.frmMenu.Show();
    }

    public void ShowGameOver()
    {
      this.lbPause.Visible = !this.lbPause.Visible;
      this.btnResum.Visible = !this.btnResum.Visible;
      this.btnHome.Visible = !this.btnHome.Visible;
      this.btnQuit.Visible = !this.btnQuit.Visible;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.timerGame = new Timer(this.components);
      this.lbLevel = new Label();
      this.ptbVienTren = new PictureBox();
      this.ptbVienPhai = new PictureBox();
      this.ptbVienTrai = new PictureBox();
      this.ptbVienDuoi = new PictureBox();
      this.ptbChan2 = new PictureBox();
      this.ptbChan1 = new PictureBox();
      this.ptbDefense = new PictureBox();
      this.lbPause = new Label();
      this.btnQuit = new PictureBox();
      this.btnHome = new PictureBox();
      this.btnResum = new PictureBox();
      this.MAP = new PictureBox();
      this.panel1 = new Panel();
      this.pictureBox1 = new PictureBox();
      this.hp = new ProgressBar();
      this.lbHealth = new Label();
      this.btnPause = new PictureBox();
      this.lbDongho = new Label();
      this.pictureBox2 = new PictureBox();
      this.lbKills = new Label();
      this.lbState = new Label();
      this.ptbChan3 = new PictureBox();
      ((ISupportInitialize) this.ptbVienTren).BeginInit();
      ((ISupportInitialize) this.ptbVienPhai).BeginInit();
      ((ISupportInitialize) this.ptbVienTrai).BeginInit();
      ((ISupportInitialize) this.ptbVienDuoi).BeginInit();
      ((ISupportInitialize) this.ptbChan2).BeginInit();
      ((ISupportInitialize) this.ptbChan1).BeginInit();
      ((ISupportInitialize) this.ptbDefense).BeginInit();
      ((ISupportInitialize) this.btnQuit).BeginInit();
      ((ISupportInitialize) this.btnHome).BeginInit();
      ((ISupportInitialize) this.btnResum).BeginInit();
      ((ISupportInitialize) this.MAP).BeginInit();
      this.panel1.SuspendLayout();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      ((ISupportInitialize) this.btnPause).BeginInit();
      ((ISupportInitialize) this.pictureBox2).BeginInit();
      ((ISupportInitialize) this.ptbChan3).BeginInit();
      this.SuspendLayout();
      this.timerGame.Enabled = true;
      this.timerGame.Interval = 20;
      this.timerGame.Tick += new EventHandler(this.LoadFrames);
      this.lbLevel.BackColor = Color.Transparent;
      this.lbLevel.Font = new Font("Segoe Print", 27.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lbLevel.ForeColor = Color.Yellow;
      this.lbLevel.Location = new Point(316, 84);
      this.lbLevel.Name = "lbLevel";
      this.lbLevel.Size = new Size(202, 59);
      this.lbLevel.TabIndex = 10;
      this.lbLevel.TextAlign = ContentAlignment.MiddleCenter;
      this.lbLevel.Visible = false;
      this.ptbVienTren.BackColor = Color.Transparent;
      this.ptbVienTren.Location = new Point(-6, 35);
      this.ptbVienTren.Name = "ptbVienTren";
      this.ptbVienTren.Size = new Size(781, 18);
      this.ptbVienTren.TabIndex = 11;
      this.ptbVienTren.TabStop = false;
      this.ptbVienTren.Tag = (object) "Thep";
      this.ptbVienPhai.BackColor = Color.Transparent;
      this.ptbVienPhai.Location = new Point(781, 35);
      this.ptbVienPhai.Name = "ptbVienPhai";
      this.ptbVienPhai.Size = new Size(23, 635);
      this.ptbVienPhai.TabIndex = 14;
      this.ptbVienPhai.TabStop = false;
      this.ptbVienPhai.Tag = (object) "Thep";
      this.ptbVienPhai.Click += new EventHandler(this.ptbVienPhai_Click);
      this.ptbVienTrai.BackColor = Color.Transparent;
      this.ptbVienTrai.Location = new Point(-6, 35);
      this.ptbVienTrai.Name = "ptbVienTrai";
      this.ptbVienTrai.Size = new Size(21, 635);
      this.ptbVienTrai.TabIndex = 15;
      this.ptbVienTrai.TabStop = false;
      this.ptbVienTrai.Tag = (object) "Thep";
      this.ptbVienDuoi.BackColor = Color.Transparent;
      this.ptbVienDuoi.Name = "ptbVienDuoi";
      this.ptbVienDuoi.Size = new Size(781, 17);
      this.ptbVienDuoi.TabIndex = 16;
      this.ptbVienDuoi.TabStop = false;
      this.ptbVienDuoi.Tag = (object) "Thep";
      this.ptbChan2.Location = new Point(719, 274);
      this.ptbChan2.Name = "ptbChan2";
      this.ptbChan2.Size = new Size(82, 18);
      this.ptbChan2.TabIndex = 43;
      this.ptbChan2.TabStop = false;
      this.ptbChan2.Tag = (object) "Thep";
      this.ptbChan1.BackColor = Color.Transparent;
      this.ptbChan1.Location = new Point(-12, 271);
      this.ptbChan1.Name = "ptbChan1";
      this.ptbChan1.Size = new Size(81, 18);
      this.ptbChan1.TabIndex = 42;
      this.ptbChan1.TabStop = false;
      this.ptbChan1.Tag = (object) "Thep";
      this.ptbDefense.BackgroundImageLayout = ImageLayout.Zoom;
      this.ptbDefense.Location = new Point(370, 535);
      this.ptbDefense.Name = "ptbDefense";
      this.ptbDefense.Size = new Size(63, 53);
      this.ptbDefense.TabIndex = 41;
      this.ptbDefense.TabStop = false;
      this.ptbDefense.Tag = (object) "defense";
      this.lbPause.BackColor = Color.White;
      this.lbPause.Font = new Font("Segoe Print", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lbPause.ForeColor = Color.Black;
      this.lbPause.Location = new Point(286, 236);
      this.lbPause.Name = "lbPause";
      this.lbPause.Size = new Size(193, 35);
      this.lbPause.TabIndex = 40;
      this.lbPause.Text = "PAUSE";
      this.lbPause.TextAlign = ContentAlignment.MiddleCenter;
      this.lbPause.Visible = false;
      this.btnQuit.BackColor = Color.Transparent;
      this.btnQuit.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnQuit.Location = new Point(429, 274);
      this.btnQuit.Name = "btnQuit";
      this.btnQuit.Size = new Size(50, 50);
      this.btnQuit.SizeMode = PictureBoxSizeMode.Zoom;
      this.btnQuit.TabIndex = 39;
      this.btnQuit.TabStop = false;
      this.btnQuit.Visible = false;
      this.btnQuit.Click += new EventHandler(this.btnQuit_Click);
      this.btnHome.BackColor = Color.Transparent;
      this.btnHome.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnHome.Location = new Point(358, 274);
      this.btnHome.Name = "btnHome";
      this.btnHome.Size = new Size(50, 50);
      this.btnHome.SizeMode = PictureBoxSizeMode.Zoom;
      this.btnHome.TabIndex = 38;
      this.btnHome.TabStop = false;
      this.btnHome.Visible = false;
      this.btnHome.Click += new EventHandler(this.btnHome_Click);
      this.btnResum.BackColor = Color.Transparent;
      this.btnResum.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnResum.Location = new Point(288, 274);
      this.btnResum.Name = "btnResum";
      this.btnResum.Size = new Size(50, 50);
      this.btnResum.SizeMode = PictureBoxSizeMode.Zoom;
      this.btnResum.TabIndex = 37;
      this.btnResum.TabStop = false;
      this.btnResum.Visible = false;
      this.btnResum.Click += new EventHandler(this.btnResum_Click);
      this.MAP.BackColor = Color.Black;
      this.MAP.Location = new Point(15, 2);
      this.MAP.Name = "MAP";
      this.MAP.Size = new Size(789, 589);
      this.MAP.TabIndex = 45;
      this.MAP.TabStop = false;
      this.panel1.BackColor = Color.FromArgb((int) byte.MaxValue, 128, 0);
      this.panel1.BackgroundImageLayout = ImageLayout.None;
      this.panel1.Controls.Add((Control) this.pictureBox1);
      this.panel1.Controls.Add((Control) this.hp);
      this.panel1.Controls.Add((Control) this.lbHealth);
      this.panel1.Controls.Add((Control) this.btnPause);
      this.panel1.Controls.Add((Control) this.lbDongho);
      this.panel1.Controls.Add((Control) this.pictureBox2);
      this.panel1.Controls.Add((Control) this.lbKills);
      this.panel1.Controls.Add((Control) this.lbState);
      this.panel1.Location = new Point(-6, -1);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(810, 30);
      this.panel1.TabIndex = 46;
      this.pictureBox1.BackgroundImageLayout = ImageLayout.Stretch;
      this.pictureBox1.Location = new Point(483, 4);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(25, 25);
      this.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
      this.pictureBox1.TabIndex = 40;
      this.pictureBox1.TabStop = false;
      this.hp.Location = new Point(512, 1);
      this.hp.Name = "hp";
      this.hp.Size = new Size(226, 27);
      this.hp.TabIndex = 39;
      this.lbHealth.AutoSize = true;
      this.lbHealth.Font = new Font("Segoe UI", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lbHealth.ForeColor = Color.White;
      this.lbHealth.Location = new Point(390, -1);
      this.lbHealth.Name = "lbHealth";
      this.lbHealth.Size = new Size(79, 30);
      this.lbHealth.TabIndex = 38;
      this.lbHealth.Text = "Health:";
      this.btnPause.Anchor = AnchorStyles.Top | AnchorStyles.Right;
      this.btnPause.BackColor = Color.Transparent;
      this.btnPause.BackgroundImageLayout = ImageLayout.Stretch;
      this.btnPause.Name = "btnPause";
      this.btnPause.Size = new Size(32, 30);
      this.btnPause.SizeMode = PictureBoxSizeMode.Zoom;
      this.btnPause.TabIndex = 37;
      this.btnPause.TabStop = false;
      this.lbDongho.AutoSize = true;
      this.lbDongho.Font = new Font("Segoe UI", 14.25f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lbDongho.ForeColor = Color.White;
      this.lbDongho.Location = new Point(322, 1);
      this.lbDongho.Name = "lbDongho";
      this.lbDongho.Size = new Size(22, 25);
      this.lbDongho.TabIndex = 6;
      this.lbDongho.Text = "0";
      this.pictureBox2.BackgroundImageLayout = ImageLayout.Stretch;
      this.pictureBox2.ErrorImage = (Image) null;
      this.pictureBox2.Location = new Point(281, 2);
      this.pictureBox2.Name = "pictureBox2";
      this.pictureBox2.Size = new Size(26, 26);
      this.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;
      this.pictureBox2.TabIndex = 5;
      this.pictureBox2.TabStop = false;
      this.lbKills.AutoSize = true;
      this.lbKills.Font = new Font("Segoe UI", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lbKills.ForeColor = Color.White;
      this.lbKills.Location = new Point(144, 0);
      this.lbKills.Name = "lbKills";
      this.lbKills.Size = new Size(71, 30);
      this.lbKills.TabIndex = 2;
      this.lbKills.Text = "Kills: 0";
      this.lbState.AutoSize = true;
      this.lbState.Font = new Font("Segoe UI", 15.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lbState.ForeColor = Color.White;
      this.lbState.Location = new Point(24, 0);
      this.lbState.Name = "lbState";
      this.lbState.Size = new Size(70, 30);
      this.lbState.TabIndex = 1;
      this.lbState.Text = "State: ";
      this.ptbChan3.BackColor = Color.Transparent;
      this.ptbChan3.Location = new Point(382, 330);
      this.ptbChan3.Name = "ptbChan3";
      this.ptbChan3.Size = new Size(37, 40);
      this.ptbChan3.TabIndex = 44;
      this.ptbChan3.TabStop = false;
      this.ptbChan3.Tag = (object) "Thep";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = SystemColors.ActiveCaptionText;
      this.ClientSize = new Size(803, 589);
      this.Controls.Add((Control) this.panel1);
      this.Controls.Add((Control) this.MAP);
      this.Controls.Add((Control) this.ptbChan3);
      this.Controls.Add((Control) this.ptbChan2);
      this.Controls.Add((Control) this.ptbChan1);
      this.Controls.Add((Control) this.ptbDefense);
      this.Controls.Add((Control) this.lbPause);
      this.Controls.Add((Control) this.btnQuit);
      this.Controls.Add((Control) this.btnHome);
      this.Controls.Add((Control) this.btnResum);
      this.Controls.Add((Control) this.ptbVienDuoi);
      this.Controls.Add((Control) this.ptbVienTrai);
      this.Controls.Add((Control) this.ptbVienPhai);
      this.Controls.Add((Control) this.ptbVienTren);
      this.Controls.Add((Control) this.lbLevel);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Xetang);
      this.Text = nameof (Xetang);
      this.KeyDown += new KeyEventHandler(this.KeyIsDown);
      this.KeyUp += new KeyEventHandler(this.KeyIsUp);
      ((ISupportInitialize) this.ptbVienTren).EndInit();
      ((ISupportInitialize) this.ptbVienPhai).EndInit();
      ((ISupportInitialize) this.ptbVienTrai).EndInit();
      ((ISupportInitialize) this.ptbVienDuoi).EndInit();
      ((ISupportInitialize) this.ptbChan2).EndInit();
      ((ISupportInitialize) this.ptbChan1).EndInit();
      ((ISupportInitialize) this.ptbDefense).EndInit();
      ((ISupportInitialize) this.btnQuit).EndInit();
      ((ISupportInitialize) this.btnHome).EndInit();
      ((ISupportInitialize) this.btnResum).EndInit();
      ((ISupportInitialize) this.MAP).EndInit();
      this.panel1.ResumeLayout(false);
      this.panel1.PerformLayout();
      ((ISupportInitialize) this.pictureBox1).EndInit();
      ((ISupportInitialize) this.btnPause).EndInit();
      ((ISupportInitialize) this.pictureBox2).EndInit();
      ((ISupportInitialize) this.ptbChan3).EndInit();
      this.ResumeLayout(false);
    }
  }
}
