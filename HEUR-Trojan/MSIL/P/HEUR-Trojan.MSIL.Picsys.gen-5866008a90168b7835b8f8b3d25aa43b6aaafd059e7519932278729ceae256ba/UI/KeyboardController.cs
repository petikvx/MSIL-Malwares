// Decompiled with JetBrains decompiler
// Type: OOP_TeamWork.UI.KeyboardController
// Assembly: OOP-TeamWork, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 78E60F07-1B9F-418F-8C6F-A1FA2CABDF45
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-5866008a90168b7835b8f8b3d25aa43b6aaafd059e7519932278729ceae256ba.exe

using OOP_TeamWork.Interfaces;
using System;
using System.Threading;
using System.Windows.Forms;

namespace OOP_TeamWork.UI
{
  public class KeyboardController : IMovable, IKeyboardControlable
  {
    public static object TigerEurope = (object) Thread.GetDomain();

    public event EventHandler OnRightPressed;

    public event EventHandler OnLeftPressed;

    public event EventHandler OnUpPressed;

    public event EventHandler OnDownPressed;

    public KeyboardController(Form form) => form.KeyDown += new KeyEventHandler(this.FormKeyDown);

    private void FormKeyDown(object sender, KeyEventArgs e)
    {
      switch (e.KeyCode)
      {
        case Keys.A:
          if (this.OnLeftPressed == null)
            break;
          this.OnLeftPressed((object) this, new EventArgs());
          break;
        case Keys.D:
          if (this.OnRightPressed == null)
            break;
          this.OnRightPressed((object) this, new EventArgs());
          break;
        case Keys.S:
          if (this.OnDownPressed == null)
            break;
          this.OnDownPressed((object) this, new EventArgs());
          break;
        case Keys.W:
          if (this.OnUpPressed == null)
            break;
          this.OnUpPressed((object) this, new EventArgs());
          break;
      }
    }

    public virtual void Move(int x, int y)
    {
    }
  }
}
