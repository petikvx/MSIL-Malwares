// Decompiled with JetBrains decompiler
// Type: Winter_Sports_Rental.frmMain
// Assembly: CLRIPropertyValueImpl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 890FDB68-4B7D-4035-A759-8056CF611D6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\Trojan.MSIL.Crypt.hwnc-988ec5d9bc02691882a3180947ee76fabc3629413f79a2e4768b9adb58ba432c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using System.Xml;

namespace Winter_Sports_Rental
{
  [DesignerGenerated]
  public class frmMain : Form
  {
    private IContainer components;
    private string BOOK_SOURCE_XML;
    public bool closingNewEmp;
    public bool closingNewDep;
    private string employeeNumber;
    private string firstName;
    private string lastName;
    private string middlName;
    private string birthDate;
    private string hiredDate;
    private string employeeType;
    private double salary;
    private string officeLocation;
    private string workPhone;
    private string workEmail;
    private string mobilePhone;
    private string personalPhone;
    private string personalEmail;
    private string dependentType;
    private int presCount;

    public frmMain()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.FormClosing += new FormClosingEventHandler(this.frmMain_FormClosing);
      this.employeeList = new List<Employee>();
      this.dependentList = new List<Dependent>();
      this.employeeCount = 0;
      this.dependentCount = 0;
      this.currEmpIndex = 0;
      this.closingNewEmp = false;
      this.closingNewDep = false;
      this.employeeNumber = "";
      this.firstName = "";
      this.lastName = "";
      this.middlName = "";
      this.birthDate = "";
      this.hiredDate = "";
      this.employeeType = "";
      this.salary = 0.0;
      this.officeLocation = "";
      this.workPhone = "";
      this.workEmail = "";
      this.mobilePhone = "";
      this.personalPhone = "";
      this.personalEmail = "";
      this.dependentType = "";
      this.presCount = 0;
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.trvEmployeesDepend = new TreeView();
      this.imgTreeIcons = new ImageList(this.components);
      this.tosMain = new ToolStrip();
      this.tsbtnNew = new ToolStripButton();
      this.tsbtnOpen = new ToolStripButton();
      this.tsbtnSave = new ToolStripButton();
      this.tosbtnSaveAs = new ToolStripButton();
      this.lblFirstNameHeading = new Label();
      this.lblLastNameHeading = new Label();
      this.lblMiddleNameHeading = new Label();
      this.lblHiredDateHeading = new Label();
      this.lblBirthDateHeading = new Label();
      this.lblEmpTypeHeading = new Label();
      this.lblSalaryHeading = new Label();
      this.lblOfficeLocHeading = new Label();
      this.lblWorkPhoneHeading = new Label();
      this.lblEmailHeading = new Label();
      this.lblMobileHeading = new Label();
      this.lblPersonalPhoneHeading = new Label();
      this.lblPersonalEmailHeading = new Label();
      this.lblEmpNumHeading = new Label();
      this.lblEmpNum = new Label();
      this.lblWorkEmail = new Label();
      this.lblWorkPhone = new Label();
      this.lblOfficeLoc = new Label();
      this.lblSalary = new Label();
      this.lblEmpType = new Label();
      this.lblBirthDate = new Label();
      this.lblHiredDate = new Label();
      this.lblMiddleName = new Label();
      this.lblLastName = new Label();
      this.lblFirstName = new Label();
      this.lblMobileNum = new Label();
      this.lblPersonalEm = new Label();
      this.lblPersonalNum = new Label();
      this.btnAddDependent = new Button();
      this.btnTestLists = new Button();
      this.btnTraverse = new Button();
      this.btnCount = new Button();
      this.btnEdit = new Button();
      this.btnDelete = new Button();
      this.btnExit = new Button();
      this.btnAddEmployee = new Button();
      this.tosMain.SuspendLayout();
      this.SuspendLayout();
      this.trvEmployeesDepend.AllowDrop = true;
      this.trvEmployeesDepend.ImageIndex = 0;
      this.trvEmployeesDepend.ImageList = this.imgTreeIcons;
      this.trvEmployeesDepend.Location = new Point(16, 39);
      this.trvEmployeesDepend.Name = "trvEmployeesDepend";
      this.trvEmployeesDepend.SelectedImageIndex = 0;
      this.trvEmployeesDepend.ShowNodeToolTips = true;
      this.trvEmployeesDepend.Size = new Size(361, 507);
      this.trvEmployeesDepend.TabIndex = 0;
      this.imgTreeIcons.ColorDepth = ColorDepth.Depth8Bit;
      this.imgTreeIcons.ImageSize = new Size(16, 16);
      this.imgTreeIcons.TransparentColor = Color.Transparent;
      this.tosMain.Items.AddRange(new ToolStripItem[4]
      {
        (ToolStripItem) this.tsbtnNew,
        (ToolStripItem) this.tsbtnOpen,
        (ToolStripItem) this.tsbtnSave,
        (ToolStripItem) this.tosbtnSaveAs
      });
      this.tosMain.Location = new Point(0, 0);
      this.tosMain.Name = "tosMain";
      this.tosMain.Size = new Size(903, 25);
      this.tosMain.TabIndex = 1;
      this.tosMain.Text = "ToolStrip1";
      this.tsbtnNew.ImageTransparentColor = Color.Magenta;
      this.tsbtnNew.Name = "tsbtnNew";
      this.tsbtnNew.Size = new Size(35, 22);
      this.tsbtnNew.Text = "New";
      this.tsbtnOpen.ImageTransparentColor = Color.Magenta;
      this.tsbtnOpen.Name = "tsbtnOpen";
      this.tsbtnOpen.Size = new Size(40, 22);
      this.tsbtnOpen.Text = "Open";
      this.tsbtnSave.Enabled = false;
      this.tsbtnSave.ImageTransparentColor = Color.Magenta;
      this.tsbtnSave.Name = "tsbtnSave";
      this.tsbtnSave.Size = new Size(35, 22);
      this.tsbtnSave.Text = "Save";
      this.tosbtnSaveAs.ImageTransparentColor = Color.Magenta;
      this.tosbtnSaveAs.Name = "tosbtnSaveAs";
      this.tosbtnSaveAs.Size = new Size(51, 22);
      this.tosbtnSaveAs.Text = "Save As";
      this.lblFirstNameHeading.AutoSize = true;
      this.lblFirstNameHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblFirstNameHeading.Location = new Point(420, 83);
      this.lblFirstNameHeading.Name = "lblFirstNameHeading";
      this.lblFirstNameHeading.Size = new Size(77, 15);
      this.lblFirstNameHeading.TabIndex = 2;
      this.lblFirstNameHeading.Text = "First Name";
      this.lblLastNameHeading.AutoSize = true;
      this.lblLastNameHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblLastNameHeading.Location = new Point(420, 115);
      this.lblLastNameHeading.Name = "lblLastNameHeading";
      this.lblLastNameHeading.Size = new Size(76, 15);
      this.lblLastNameHeading.TabIndex = 3;
      this.lblLastNameHeading.Text = "Last Name";
      this.lblMiddleNameHeading.AutoSize = true;
      this.lblMiddleNameHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblMiddleNameHeading.Location = new Point(420, 147);
      this.lblMiddleNameHeading.Name = "lblMiddleNameHeading";
      this.lblMiddleNameHeading.Size = new Size(93, 15);
      this.lblMiddleNameHeading.TabIndex = 4;
      this.lblMiddleNameHeading.Text = "Middle Name";
      this.lblHiredDateHeading.AutoSize = true;
      this.lblHiredDateHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblHiredDateHeading.Location = new Point(421, 211);
      this.lblHiredDateHeading.Name = "lblHiredDateHeading";
      this.lblHiredDateHeading.Size = new Size(76, 15);
      this.lblHiredDateHeading.TabIndex = 5;
      this.lblHiredDateHeading.Text = "Hired Date";
      this.lblBirthDateHeading.AutoSize = true;
      this.lblBirthDateHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblBirthDateHeading.Location = new Point(420, 179);
      this.lblBirthDateHeading.Name = "lblBirthDateHeading";
      this.lblBirthDateHeading.Size = new Size(71, 15);
      this.lblBirthDateHeading.TabIndex = 6;
      this.lblBirthDateHeading.Text = "Birth Date";
      this.lblEmpTypeHeading.AutoSize = true;
      this.lblEmpTypeHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblEmpTypeHeading.Location = new Point(420, 243);
      this.lblEmpTypeHeading.Name = "lblEmpTypeHeading";
      this.lblEmpTypeHeading.Size = new Size(104, 15);
      this.lblEmpTypeHeading.TabIndex = 7;
      this.lblEmpTypeHeading.Text = "Employee Type";
      this.lblSalaryHeading.AutoSize = true;
      this.lblSalaryHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblSalaryHeading.Location = new Point(420, 275);
      this.lblSalaryHeading.Name = "lblSalaryHeading";
      this.lblSalaryHeading.Size = new Size(47, 15);
      this.lblSalaryHeading.TabIndex = 8;
      this.lblSalaryHeading.Text = "Salary";
      this.lblOfficeLocHeading.AutoSize = true;
      this.lblOfficeLocHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblOfficeLocHeading.Location = new Point(421, 307);
      this.lblOfficeLocHeading.Name = "lblOfficeLocHeading";
      this.lblOfficeLocHeading.Size = new Size(131, 15);
      this.lblOfficeLocHeading.TabIndex = 9;
      this.lblOfficeLocHeading.Text = "Office/ Cubicle Loc.";
      this.lblWorkPhoneHeading.AutoSize = true;
      this.lblWorkPhoneHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblWorkPhoneHeading.Location = new Point(420, 339);
      this.lblWorkPhoneHeading.Name = "lblWorkPhoneHeading";
      this.lblWorkPhoneHeading.Size = new Size(84, 15);
      this.lblWorkPhoneHeading.TabIndex = 10;
      this.lblWorkPhoneHeading.Text = "Work Phone";
      this.lblEmailHeading.AutoSize = true;
      this.lblEmailHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblEmailHeading.Location = new Point(420, 371);
      this.lblEmailHeading.Name = "lblEmailHeading";
      this.lblEmailHeading.Size = new Size(80, 15);
      this.lblEmailHeading.TabIndex = 11;
      this.lblEmailHeading.Text = "Work Email";
      this.lblMobileHeading.AutoSize = true;
      this.lblMobileHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblMobileHeading.Location = new Point(420, 403);
      this.lblMobileHeading.Name = "lblMobileHeading";
      this.lblMobileHeading.Size = new Size(51, 15);
      this.lblMobileHeading.TabIndex = 12;
      this.lblMobileHeading.Text = "Mobile";
      this.lblPersonalPhoneHeading.AutoSize = true;
      this.lblPersonalPhoneHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblPersonalPhoneHeading.Location = new Point(420, 435);
      this.lblPersonalPhoneHeading.Name = "lblPersonalPhoneHeading";
      this.lblPersonalPhoneHeading.Size = new Size(109, 15);
      this.lblPersonalPhoneHeading.TabIndex = 13;
      this.lblPersonalPhoneHeading.Text = "Personal Phone";
      this.lblPersonalEmailHeading.AutoSize = true;
      this.lblPersonalEmailHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblPersonalEmailHeading.Location = new Point(420, 467);
      this.lblPersonalEmailHeading.Name = "lblPersonalEmailHeading";
      this.lblPersonalEmailHeading.Size = new Size(105, 15);
      this.lblPersonalEmailHeading.TabIndex = 14;
      this.lblPersonalEmailHeading.Text = "Personal Email";
      this.lblEmpNumHeading.AutoSize = true;
      this.lblEmpNumHeading.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.lblEmpNumHeading.Location = new Point(420, 51);
      this.lblEmpNumHeading.Name = "lblEmpNumHeading";
      this.lblEmpNumHeading.Size = new Size(82, 15);
      this.lblEmpNumHeading.TabIndex = 16;
      this.lblEmpNumHeading.Text = "Employee #";
      this.lblEmpNum.AutoSize = true;
      this.lblEmpNum.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblEmpNum.Location = new Point(575, 51);
      this.lblEmpNum.Name = "lblEmpNum";
      this.lblEmpNum.Size = new Size(35, 15);
      this.lblEmpNum.TabIndex = 27;
      this.lblEmpNum.Text = "####";
      this.lblEmpNum.Visible = false;
      this.lblWorkEmail.AutoSize = true;
      this.lblWorkEmail.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblWorkEmail.Location = new Point(575, 371);
      this.lblWorkEmail.Name = "lblWorkEmail";
      this.lblWorkEmail.Size = new Size(35, 15);
      this.lblWorkEmail.TabIndex = 26;
      this.lblWorkEmail.Text = "####";
      this.lblWorkEmail.Visible = false;
      this.lblWorkPhone.AutoSize = true;
      this.lblWorkPhone.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblWorkPhone.Location = new Point(575, 339);
      this.lblWorkPhone.Name = "lblWorkPhone";
      this.lblWorkPhone.Size = new Size(35, 15);
      this.lblWorkPhone.TabIndex = 25;
      this.lblWorkPhone.Text = "####";
      this.lblWorkPhone.Visible = false;
      this.lblOfficeLoc.AutoSize = true;
      this.lblOfficeLoc.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblOfficeLoc.Location = new Point(576, 307);
      this.lblOfficeLoc.Name = "lblOfficeLoc";
      this.lblOfficeLoc.Size = new Size(35, 15);
      this.lblOfficeLoc.TabIndex = 24;
      this.lblOfficeLoc.Text = "####";
      this.lblOfficeLoc.Visible = false;
      this.lblSalary.AutoSize = true;
      this.lblSalary.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblSalary.Location = new Point(575, 275);
      this.lblSalary.Name = "lblSalary";
      this.lblSalary.Size = new Size(35, 15);
      this.lblSalary.TabIndex = 23;
      this.lblSalary.Text = "####";
      this.lblSalary.Visible = false;
      this.lblEmpType.AutoSize = true;
      this.lblEmpType.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblEmpType.Location = new Point(575, 243);
      this.lblEmpType.Name = "lblEmpType";
      this.lblEmpType.Size = new Size(35, 15);
      this.lblEmpType.TabIndex = 22;
      this.lblEmpType.Text = "####";
      this.lblEmpType.Visible = false;
      this.lblBirthDate.AutoSize = true;
      this.lblBirthDate.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblBirthDate.Location = new Point(575, 179);
      this.lblBirthDate.Name = "lblBirthDate";
      this.lblBirthDate.Size = new Size(35, 15);
      this.lblBirthDate.TabIndex = 21;
      this.lblBirthDate.Text = "####";
      this.lblBirthDate.Visible = false;
      this.lblHiredDate.AutoSize = true;
      this.lblHiredDate.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblHiredDate.Location = new Point(576, 211);
      this.lblHiredDate.Name = "lblHiredDate";
      this.lblHiredDate.Size = new Size(35, 15);
      this.lblHiredDate.TabIndex = 20;
      this.lblHiredDate.Text = "####";
      this.lblHiredDate.Visible = false;
      this.lblMiddleName.AutoSize = true;
      this.lblMiddleName.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblMiddleName.Location = new Point(575, 147);
      this.lblMiddleName.Name = "lblMiddleName";
      this.lblMiddleName.Size = new Size(35, 15);
      this.lblMiddleName.TabIndex = 19;
      this.lblMiddleName.Text = "####";
      this.lblMiddleName.Visible = false;
      this.lblLastName.AutoSize = true;
      this.lblLastName.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblLastName.Location = new Point(575, 115);
      this.lblLastName.Name = "lblLastName";
      this.lblLastName.Size = new Size(35, 15);
      this.lblLastName.TabIndex = 18;
      this.lblLastName.Text = "####";
      this.lblLastName.Visible = false;
      this.lblFirstName.AutoSize = true;
      this.lblFirstName.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblFirstName.Location = new Point(575, 83);
      this.lblFirstName.Name = "lblFirstName";
      this.lblFirstName.Size = new Size(35, 15);
      this.lblFirstName.TabIndex = 17;
      this.lblFirstName.Text = "####";
      this.lblFirstName.Visible = false;
      this.lblMobileNum.AutoSize = true;
      this.lblMobileNum.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblMobileNum.Location = new Point(576, 403);
      this.lblMobileNum.Name = "lblMobileNum";
      this.lblMobileNum.Size = new Size(35, 15);
      this.lblMobileNum.TabIndex = 31;
      this.lblMobileNum.Text = "####";
      this.lblMobileNum.Visible = false;
      this.lblPersonalEm.AutoSize = true;
      this.lblPersonalEm.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblPersonalEm.Location = new Point(576, 467);
      this.lblPersonalEm.Name = "lblPersonalEm";
      this.lblPersonalEm.Size = new Size(35, 15);
      this.lblPersonalEm.TabIndex = 29;
      this.lblPersonalEm.Text = "####";
      this.lblPersonalEm.Visible = false;
      this.lblPersonalNum.AutoSize = true;
      this.lblPersonalNum.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Regular, GraphicsUnit.Point, (byte) 0);
      this.lblPersonalNum.Location = new Point(576, 435);
      this.lblPersonalNum.Name = "lblPersonalNum";
      this.lblPersonalNum.Size = new Size(35, 15);
      this.lblPersonalNum.TabIndex = 28;
      this.lblPersonalNum.Text = "####";
      this.lblPersonalNum.Visible = false;
      this.btnAddDependent.Enabled = false;
      this.btnAddDependent.Location = new Point(761, 103);
      this.btnAddDependent.Name = "btnAddDependent";
      this.btnAddDependent.Size = new Size(124, 47);
      this.btnAddDependent.TabIndex = 32;
      this.btnAddDependent.Text = "&Add Dependent";
      this.btnAddDependent.UseVisualStyleBackColor = true;
      this.btnTestLists.Location = new Point(572, 523);
      this.btnTestLists.Name = "btnTestLists";
      this.btnTestLists.Size = new Size(91, 23);
      this.btnTestLists.TabIndex = 33;
      this.btnTestLists.Text = "Test Lists";
      this.btnTestLists.UseVisualStyleBackColor = true;
      this.btnTestLists.Visible = false;
      this.btnTraverse.Location = new Point(682, 523);
      this.btnTraverse.Name = "btnTraverse";
      this.btnTraverse.Size = new Size(91, 23);
      this.btnTraverse.TabIndex = 36;
      this.btnTraverse.Text = "Traverse";
      this.btnTraverse.UseVisualStyleBackColor = true;
      this.btnTraverse.Visible = false;
      this.btnCount.Location = new Point(794, 523);
      this.btnCount.Name = "btnCount";
      this.btnCount.Size = new Size(91, 23);
      this.btnCount.TabIndex = 37;
      this.btnCount.Text = "Count";
      this.btnCount.UseVisualStyleBackColor = true;
      this.btnCount.Visible = false;
      this.btnEdit.Enabled = false;
      this.btnEdit.Location = new Point(761, 160);
      this.btnEdit.Name = "btnEdit";
      this.btnEdit.Size = new Size(124, 47);
      this.btnEdit.TabIndex = 38;
      this.btnEdit.Text = "&Edit";
      this.btnEdit.UseVisualStyleBackColor = true;
      this.btnDelete.Enabled = false;
      this.btnDelete.Location = new Point(761, 217);
      this.btnDelete.Name = "btnDelete";
      this.btnDelete.Size = new Size(124, 47);
      this.btnDelete.TabIndex = 40;
      this.btnDelete.Text = "D&elete";
      this.btnDelete.UseVisualStyleBackColor = true;
      this.btnExit.Location = new Point(761, 274);
      this.btnExit.Name = "btnExit";
      this.btnExit.Size = new Size(124, 47);
      this.btnExit.TabIndex = 41;
      this.btnExit.Text = "E&xit";
      this.btnExit.UseVisualStyleBackColor = true;
      this.btnAddEmployee.Location = new Point(761, 46);
      this.btnAddEmployee.Name = "btnAddEmployee";
      this.btnAddEmployee.Size = new Size(124, 47);
      this.btnAddEmployee.TabIndex = 42;
      this.btnAddEmployee.Text = "&Add Employee";
      this.btnAddEmployee.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(8f, 15f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(903, 558);
      this.Controls.Add((Control) this.btnAddEmployee);
      this.Controls.Add((Control) this.btnExit);
      this.Controls.Add((Control) this.btnDelete);
      this.Controls.Add((Control) this.btnEdit);
      this.Controls.Add((Control) this.btnCount);
      this.Controls.Add((Control) this.btnTraverse);
      this.Controls.Add((Control) this.btnTestLists);
      this.Controls.Add((Control) this.btnAddDependent);
      this.Controls.Add((Control) this.lblMobileNum);
      this.Controls.Add((Control) this.lblPersonalEm);
      this.Controls.Add((Control) this.lblPersonalNum);
      this.Controls.Add((Control) this.lblEmpNum);
      this.Controls.Add((Control) this.lblWorkEmail);
      this.Controls.Add((Control) this.lblWorkPhone);
      this.Controls.Add((Control) this.lblOfficeLoc);
      this.Controls.Add((Control) this.lblSalary);
      this.Controls.Add((Control) this.lblEmpType);
      this.Controls.Add((Control) this.lblBirthDate);
      this.Controls.Add((Control) this.lblHiredDate);
      this.Controls.Add((Control) this.lblMiddleName);
      this.Controls.Add((Control) this.lblLastName);
      this.Controls.Add((Control) this.lblFirstName);
      this.Controls.Add((Control) this.lblEmpNumHeading);
      this.Controls.Add((Control) this.lblPersonalEmailHeading);
      this.Controls.Add((Control) this.lblPersonalPhoneHeading);
      this.Controls.Add((Control) this.lblMobileHeading);
      this.Controls.Add((Control) this.lblEmailHeading);
      this.Controls.Add((Control) this.lblWorkPhoneHeading);
      this.Controls.Add((Control) this.lblOfficeLocHeading);
      this.Controls.Add((Control) this.lblSalaryHeading);
      this.Controls.Add((Control) this.lblEmpTypeHeading);
      this.Controls.Add((Control) this.lblBirthDateHeading);
      this.Controls.Add((Control) this.lblHiredDateHeading);
      this.Controls.Add((Control) this.lblMiddleNameHeading);
      this.Controls.Add((Control) this.lblLastNameHeading);
      this.Controls.Add((Control) this.lblFirstNameHeading);
      this.Controls.Add((Control) this.tosMain);
      this.Controls.Add((Control) this.trvEmployeesDepend);
      this.Font = new Font("Microsoft Sans Serif", 9f, FontStyle.Bold, GraphicsUnit.Point, (byte) 0);
      this.Name = nameof (frmMain);
      this.Text = "Employee Records (Cesar Mendoza #47)";
      this.tosMain.ResumeLayout(false);
      this.tosMain.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual TreeView trvEmployeesDepend
    {
      get => this._trvEmployeesDepend;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        TreeViewEventHandler viewEventHandler = new TreeViewEventHandler(this.trvEmployeesDepend_AfterSelect);
        ItemDragEventHandler dragEventHandler1 = new ItemDragEventHandler(this.trvEmployeesDepend_ItemDrag);
        DragEventHandler dragEventHandler2 = new DragEventHandler(this.trvEmployeesDepend_DragEnter);
        DragEventHandler dragEventHandler3 = new DragEventHandler(this.trvEmployeesDepend_DragDrop);
        TreeView trvEmployeesDepend1 = this._trvEmployeesDepend;
        if (trvEmployeesDepend1 != null)
        {
          trvEmployeesDepend1.AfterSelect -= viewEventHandler;
          trvEmployeesDepend1.ItemDrag -= dragEventHandler1;
          trvEmployeesDepend1.DragEnter -= dragEventHandler2;
          trvEmployeesDepend1.DragDrop -= dragEventHandler3;
        }
        this._trvEmployeesDepend = value;
        TreeView trvEmployeesDepend2 = this._trvEmployeesDepend;
        if (trvEmployeesDepend2 == null)
          return;
        trvEmployeesDepend2.AfterSelect += viewEventHandler;
        trvEmployeesDepend2.ItemDrag += dragEventHandler1;
        trvEmployeesDepend2.DragEnter += dragEventHandler2;
        trvEmployeesDepend2.DragDrop += dragEventHandler3;
      }
    }

    [field: AccessedThroughProperty("tosMain")]
    internal virtual ToolStrip tosMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripButton tosbtnSaveAs
    {
      get => this._tosbtnSaveAs;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tosbtnSaveAs_Click);
        ToolStripButton tosbtnSaveAs1 = this._tosbtnSaveAs;
        if (tosbtnSaveAs1 != null)
          tosbtnSaveAs1.Click -= eventHandler;
        this._tosbtnSaveAs = value;
        ToolStripButton tosbtnSaveAs2 = this._tosbtnSaveAs;
        if (tosbtnSaveAs2 == null)
          return;
        tosbtnSaveAs2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("lblFirstNameHeading")]
    internal virtual Label lblFirstNameHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblLastNameHeading")]
    internal virtual Label lblLastNameHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblMiddleNameHeading")]
    internal virtual Label lblMiddleNameHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblHiredDateHeading")]
    internal virtual Label lblHiredDateHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblBirthDateHeading")]
    internal virtual Label lblBirthDateHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblEmpTypeHeading")]
    internal virtual Label lblEmpTypeHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblSalaryHeading")]
    internal virtual Label lblSalaryHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblOfficeLocHeading")]
    internal virtual Label lblOfficeLocHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblWorkPhoneHeading")]
    internal virtual Label lblWorkPhoneHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblEmailHeading")]
    internal virtual Label lblEmailHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblMobileHeading")]
    internal virtual Label lblMobileHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblPersonalPhoneHeading")]
    internal virtual Label lblPersonalPhoneHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblPersonalEmailHeading")]
    internal virtual Label lblPersonalEmailHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblEmpNumHeading")]
    internal virtual Label lblEmpNumHeading { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblEmpNum")]
    internal virtual Label lblEmpNum { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblWorkEmail")]
    internal virtual Label lblWorkEmail { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblWorkPhone")]
    internal virtual Label lblWorkPhone { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblOfficeLoc")]
    internal virtual Label lblOfficeLoc { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblSalary")]
    internal virtual Label lblSalary { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblEmpType")]
    internal virtual Label lblEmpType { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblBirthDate")]
    internal virtual Label lblBirthDate { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblHiredDate")]
    internal virtual Label lblHiredDate { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblMiddleName")]
    internal virtual Label lblMiddleName { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblLastName")]
    internal virtual Label lblLastName { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblFirstName")]
    internal virtual Label lblFirstName { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblMobileNum")]
    internal virtual Label lblMobileNum { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblPersonalEm")]
    internal virtual Label lblPersonalEm { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblPersonalNum")]
    internal virtual Label lblPersonalNum { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripButton tsbtnNew
    {
      get => this._tsbtnNew;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tsbtnNew_Click);
        ToolStripButton tsbtnNew1 = this._tsbtnNew;
        if (tsbtnNew1 != null)
          tsbtnNew1.Click -= eventHandler;
        this._tsbtnNew = value;
        ToolStripButton tsbtnNew2 = this._tsbtnNew;
        if (tsbtnNew2 == null)
          return;
        tsbtnNew2.Click += eventHandler;
      }
    }

    internal virtual ToolStripButton tsbtnOpen
    {
      get => this._tsbtnOpen;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tsbtnOpen_Click);
        ToolStripButton tsbtnOpen1 = this._tsbtnOpen;
        if (tsbtnOpen1 != null)
          tsbtnOpen1.Click -= eventHandler;
        this._tsbtnOpen = value;
        ToolStripButton tsbtnOpen2 = this._tsbtnOpen;
        if (tsbtnOpen2 == null)
          return;
        tsbtnOpen2.Click += eventHandler;
      }
    }

    internal virtual ToolStripButton tsbtnSave
    {
      get => this._tsbtnSave;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tsbtnSave_Click);
        ToolStripButton tsbtnSave1 = this._tsbtnSave;
        if (tsbtnSave1 != null)
          tsbtnSave1.Click -= eventHandler;
        this._tsbtnSave = value;
        ToolStripButton tsbtnSave2 = this._tsbtnSave;
        if (tsbtnSave2 == null)
          return;
        tsbtnSave2.Click += eventHandler;
      }
    }

    internal virtual Button btnAddDependent
    {
      get => this._btnAddDependent;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnAddDependent_Click);
        Button btnAddDependent1 = this._btnAddDependent;
        if (btnAddDependent1 != null)
          btnAddDependent1.Click -= eventHandler;
        this._btnAddDependent = value;
        Button btnAddDependent2 = this._btnAddDependent;
        if (btnAddDependent2 == null)
          return;
        btnAddDependent2.Click += eventHandler;
      }
    }

    internal virtual Button btnTestLists
    {
      get => this._btnTestLists;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnTestLists_Click);
        Button btnTestLists1 = this._btnTestLists;
        if (btnTestLists1 != null)
          btnTestLists1.Click -= eventHandler;
        this._btnTestLists = value;
        Button btnTestLists2 = this._btnTestLists;
        if (btnTestLists2 == null)
          return;
        btnTestLists2.Click += eventHandler;
      }
    }

    internal virtual Button btnTraverse
    {
      get => this._btnTraverse;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnTraverse_Click);
        Button btnTraverse1 = this._btnTraverse;
        if (btnTraverse1 != null)
          btnTraverse1.Click -= eventHandler;
        this._btnTraverse = value;
        Button btnTraverse2 = this._btnTraverse;
        if (btnTraverse2 == null)
          return;
        btnTraverse2.Click += eventHandler;
      }
    }

    internal virtual Button btnCount
    {
      get => this._btnCount;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnCount_Click);
        Button btnCount1 = this._btnCount;
        if (btnCount1 != null)
          btnCount1.Click -= eventHandler;
        this._btnCount = value;
        Button btnCount2 = this._btnCount;
        if (btnCount2 == null)
          return;
        btnCount2.Click += eventHandler;
      }
    }

    internal virtual Button btnEdit
    {
      get => this._btnEdit;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnEdit_Click);
        Button btnEdit1 = this._btnEdit;
        if (btnEdit1 != null)
          btnEdit1.Click -= eventHandler;
        this._btnEdit = value;
        Button btnEdit2 = this._btnEdit;
        if (btnEdit2 == null)
          return;
        btnEdit2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("imgTreeIcons")]
    internal virtual ImageList imgTreeIcons { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button btnDelete
    {
      get => this._btnDelete;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnDelete_Click);
        Button btnDelete1 = this._btnDelete;
        if (btnDelete1 != null)
          btnDelete1.Click -= eventHandler;
        this._btnDelete = value;
        Button btnDelete2 = this._btnDelete;
        if (btnDelete2 == null)
          return;
        btnDelete2.Click += eventHandler;
      }
    }

    internal virtual Button btnExit
    {
      get => this._btnExit;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnExit_Click);
        Button btnExit1 = this._btnExit;
        if (btnExit1 != null)
          btnExit1.Click -= eventHandler;
        this._btnExit = value;
        Button btnExit2 = this._btnExit;
        if (btnExit2 == null)
          return;
        btnExit2.Click += eventHandler;
      }
    }

    internal virtual Button btnAddEmployee
    {
      get => this._btnAddEmployee;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnAddEmployee_Click);
        Button btnAddEmployee1 = this._btnAddEmployee;
        if (btnAddEmployee1 != null)
          btnAddEmployee1.Click -= eventHandler;
        this._btnAddEmployee = value;
        Button btnAddEmployee2 = this._btnAddEmployee;
        if (btnAddEmployee2 == null)
          return;
        btnAddEmployee2.Click += eventHandler;
      }
    }

    public List<Employee> employeeList { get; set; }

    public List<Dependent> dependentList { get; set; }

    public int employeeCount { get; set; }

    public int dependentCount { get; set; }

    public int currEmpIndex { get; set; }

    public TreeNode nodeIndex { get; set; }

    private void Form1_Load(object sender, EventArgs e)
    {
    }

    private void tsbtnNew_Click(object sender, EventArgs e)
    {
      if (MessageBox.Show("Are you sure you want to close? All unsaved work will be lost.", "Confirm", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) == DialogResult.No)
        return;
      this.employeeList.Clear();
      this.dependentList.Clear();
      this.trvEmployeesDepend.Nodes.Clear();
      this.lblEmpNum.Visible = false;
      this.lblFirstName.Visible = false;
      this.lblLastName.Visible = false;
      this.lblMiddleName.Visible = false;
      this.lblBirthDate.Visible = false;
      this.lblMobileNum.Visible = false;
      this.lblHiredDate.Visible = false;
      this.lblEmpType.Visible = false;
      this.lblSalary.Visible = false;
      this.lblOfficeLoc.Visible = false;
      this.lblWorkPhone.Visible = false;
      this.lblWorkEmail.Visible = false;
      this.lblWorkPhone.Visible = false;
      this.lblPersonalEm.Visible = false;
      this.lblPersonalNum.Visible = false;
      this.btnAddEmployee.Enabled = true;
      this.btnEdit.Enabled = false;
      this.btnDelete.Enabled = false;
      this.btnAddDependent.Enabled = false;
    }

    private void btnAddEmployee_Click(object sender, EventArgs e)
    {
      TreeNode selectedNode = this.trvEmployeesDepend.SelectedNode;
      if (this.presCount == 1 && selectedNode == null)
      {
        int num1 = (int) Interaction.MsgBox((object) "Please select a node");
      }
      else if (selectedNode != null && selectedNode.Level == 5)
      {
        int num2 = (int) Interaction.MsgBox((object) "You may only have up to six levels in your hierarchy");
      }
      else
      {
        int num3 = (int) new frmNewEmployee().ShowDialog();
        if (Operators.CompareString(this.firstName, "", false) == 0 || this.closingNewEmp)
          return;
        this.employeeList.Add(new Employee());
        this.employeeList[this.employeeCount].EmployeeNumber = this.employeeNumber;
        this.employeeList[this.employeeCount].FirstName = this.firstName;
        this.employeeList[this.employeeCount].LastName = this.lastName;
        this.employeeList[this.employeeCount].MiddleName = this.middlName;
        this.employeeList[this.employeeCount].BirthDate = this.birthDate;
        this.employeeList[this.employeeCount].HiredDate = this.hiredDate;
        this.employeeList[this.employeeCount].EmployeeType = this.employeeType;
        this.employeeList[this.employeeCount].Salary = this.salary;
        this.employeeList[this.employeeCount].OfficeCubeLoc = this.officeLocation;
        this.employeeList[this.employeeCount].WorkPhone = this.workPhone;
        this.employeeList[this.employeeCount].WorkEmail = this.workEmail;
        this.employeeList[this.employeeCount].PersonalEmail = this.personalEmail;
        this.employeeList[this.employeeCount].PersonalPhone = this.personalPhone;
        this.employeeList[this.employeeCount].MobilePhone = this.mobilePhone;
        this.employeeList[this.employeeCount].NumOfDependents = 0;
        TreeNode treeNode;
        if (this.employeeCount == 0)
        {
          treeNode = this.trvEmployeesDepend.Nodes.Add(Conversions.ToString(this.employeeCount), this.lastName + ", " + this.firstName);
          treeNode.ImageIndex = 0;
          treeNode.SelectedImageIndex = 0;
          // ISSUE: variable of a reference type
          int& local;
          // ISSUE: explicit reference operation
          int num4 = checked (^(local = ref this.presCount) + 1);
          local = num4;
        }
        else
        {
          treeNode = selectedNode.Nodes.Add(Conversions.ToString(this.employeeCount), this.lastName + ", " + this.firstName);
          treeNode.ImageIndex = 1;
          treeNode.SelectedImageIndex = 1;
        }
        treeNode.ToolTipText = this.employeeList[this.employeeCount].EmployeeNumber + " [" + this.employeeList[this.employeeCount].OfficeCubeLoc + "]";
        checked { ++this.employeeCount; }
      }
    }

    private void btnAddDependent_Click(object sender, EventArgs e)
    {
      TreeNode selectedNode = this.trvEmployeesDepend.SelectedNode;
      Conversions.ToInteger(this.trvEmployeesDepend.SelectedNode.Name);
      this.nodeIndex = this.trvEmployeesDepend.SelectedNode;
      int num = (int) new frmNewDependent().ShowDialog();
      if (Operators.CompareString(this.firstName, "", false) == 0)
        return;
      this.employeeList.Add(new Employee());
      this.employeeList[this.employeeCount].FirstName = this.firstName;
      this.employeeList[this.employeeCount].LastName = this.lastName;
      this.employeeList[this.employeeCount].DependentType = this.dependentType;
      this.employeeList[this.employeeCount].MiddleName = this.middlName;
      this.employeeList[this.employeeCount].PersonalPhone = this.personalPhone;
      this.employeeList[this.employeeCount].PersonalEmail = this.personalEmail;
      this.employeeList[this.employeeCount].MobilePhone = this.mobilePhone;
      this.employeeList[this.employeeCount].BirthDate = this.birthDate;
      TreeNode treeNode = selectedNode.Nodes.Add(Conversions.ToString(this.employeeCount), this.lastName + ", " + this.firstName);
      treeNode.ImageIndex = 2;
      treeNode.SelectedImageIndex = 2;
      treeNode.ToolTipText = Operators.CompareString(this.employeeList[this.employeeCount].DependentType, "S", false) != 0 ? (Operators.CompareString(this.employeeList[this.employeeCount].DependentType, "C", false) != 0 ? "Other" : "Child") : "Spouse";
      checked { ++this.employeeCount; }
    }

    private void btnEdit_Click(object sender, EventArgs e)
    {
      int integer = Conversions.ToInteger(this.trvEmployeesDepend.SelectedNode.Name);
      TreeNode selectedNode = this.trvEmployeesDepend.SelectedNode;
      if (Operators.CompareString(this.employeeList[integer].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[integer].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[integer].DependentType, "O", false) == 0)
      {
        frmEditDependent frmEditDependent = new frmEditDependent();
        this.currEmpIndex = integer;
        int num = (int) frmEditDependent.ShowDialog();
        this.trvEmployeesDepend.SelectedNode.Text = this.employeeList[integer].LastName + ", " + this.employeeList[integer].FirstName;
        this.lblFirstName.Text = this.employeeList[integer].FirstName;
        this.lblLastName.Text = this.employeeList[integer].LastName;
        this.lblMiddleName.Text = this.employeeList[integer].MiddleName;
        this.lblMobileNum.Text = this.employeeList[integer].MobilePhone;
        this.lblPersonalNum.Text = this.employeeList[integer].PersonalPhone;
        this.lblPersonalEm.Text = this.employeeList[integer].PersonalEmail;
        this.lblBirthDate.Text = this.employeeList[integer].BirthDate;
        this.lblEmpType.Text = this.employeeList[integer].DependentType;
        if (Operators.CompareString(this.employeeList[integer].DependentType, "S", false) == 0)
          selectedNode.ToolTipText = "Spouse";
        else if (Operators.CompareString(this.employeeList[integer].DependentType, "C", false) == 0)
          selectedNode.ToolTipText = "Child";
        else
          selectedNode.ToolTipText = "Other";
      }
      else
      {
        frmEditEmployee frmEditEmployee = new frmEditEmployee();
        this.currEmpIndex = integer;
        int num = (int) frmEditEmployee.ShowDialog();
        this.trvEmployeesDepend.SelectedNode.Text = this.employeeList[integer].LastName + ", " + this.employeeList[integer].FirstName;
        this.lblEmpNum.Text = this.employeeList[integer].EmployeeNumber;
        this.lblFirstName.Text = this.employeeList[integer].FirstName;
        this.lblLastName.Text = this.employeeList[integer].LastName;
        this.lblMiddleName.Text = this.employeeList[integer].MiddleName;
        this.lblSalary.Text = Conversions.ToString(this.employeeList[integer].Salary);
        this.lblOfficeLoc.Text = this.employeeList[integer].OfficeCubeLoc;
        this.lblWorkPhone.Text = this.employeeList[integer].WorkPhone;
        this.lblWorkEmail.Text = this.employeeList[integer].WorkEmail;
        this.lblMobileNum.Text = this.employeeList[integer].MobilePhone;
        this.lblPersonalNum.Text = this.employeeList[integer].PersonalPhone;
        this.lblPersonalEm.Text = this.employeeList[integer].PersonalEmail;
        this.lblBirthDate.Text = this.employeeList[integer].BirthDate;
        this.lblHiredDate.Text = this.employeeList[integer].HiredDate;
        this.lblEmpType.Text = this.employeeList[integer].EmployeeType;
      }
    }

    private void RecursNodesRefresh(TreeNodeCollection NodeCollection)
    {
      try
      {
        foreach (TreeNode node in NodeCollection)
        {
          int num = (int) Interaction.MsgBox((object) node.Text);
          this.RecursNodesRefresh(node.Nodes);
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    private void trvEmployeesDepend_AfterSelect(object sender, TreeViewEventArgs e)
    {
      int integer = Conversions.ToInteger(this.trvEmployeesDepend.SelectedNode.Name);
      Conversions.ToInteger(this.trvEmployeesDepend.SelectedNode.Name);
      this.currEmpIndex = integer;
      this.btnEdit.Enabled = true;
      this.btnDelete.Enabled = true;
      if (Operators.CompareString(this.employeeList[integer].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[integer].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[integer].DependentType, "O", false) == 0)
      {
        this.btnAddDependent.Enabled = false;
        this.btnAddEmployee.Enabled = false;
        this.lblFirstName.Location = new Point(575, 51);
        this.lblFirstNameHeading.Location = new Point(420, 51);
        this.lblLastName.Location = new Point(575, 83);
        this.lblLastNameHeading.Location = new Point(420, 83);
        this.lblMiddleName.Location = new Point(575, 115);
        this.lblMiddleNameHeading.Location = new Point(420, 115);
        this.lblBirthDate.Location = new Point(575, 147);
        this.lblBirthDateHeading.Location = new Point(420, 147);
        this.lblEmpType.Location = new Point(575, 179);
        this.lblEmpTypeHeading.Location = new Point(420, 179);
        this.lblMobileNum.Location = new Point(575, 243);
        this.lblMobileHeading.Location = new Point(420, 243);
        this.lblPersonalNum.Location = new Point(576, 211);
        this.lblPersonalPhoneHeading.Location = new Point(420, 211);
        this.lblPersonalEm.Location = new Point(575, 275);
        this.lblPersonalEmailHeading.Location = new Point(420, 275);
        this.lblEmpNum.Visible = false;
        this.lblEmpNumHeading.Visible = false;
        this.lblHiredDate.Visible = false;
        this.lblHiredDateHeading.Visible = false;
        this.lblSalary.Visible = false;
        this.lblSalaryHeading.Visible = false;
        this.lblOfficeLoc.Visible = false;
        this.lblOfficeLocHeading.Visible = false;
        this.lblWorkPhone.Visible = false;
        this.lblWorkPhoneHeading.Visible = false;
        this.lblWorkEmail.Visible = false;
        this.lblEmailHeading.Visible = false;
        this.lblWorkPhoneHeading.Visible = false;
        this.lblFirstName.Visible = true;
        this.lblLastName.Visible = true;
        this.lblMiddleName.Visible = true;
        this.lblEmpType.Visible = true;
        this.lblMobileNum.Visible = true;
        this.lblPersonalNum.Visible = true;
        this.lblPersonalEm.Visible = true;
        this.lblBirthDate.Visible = true;
      }
      else if (Operators.CompareString(this.employeeList[integer].EmployeeType, "F", false) == 0 | Operators.CompareString(this.employeeList[integer].EmployeeType, "P", false) == 0)
      {
        this.lblEmpNum.Location = new Point(575, 51);
        this.lblEmpNumHeading.Location = new Point(420, 51);
        this.lblFirstName.Location = new Point(575, 83);
        this.lblFirstNameHeading.Location = new Point(420, 83);
        this.lblLastName.Location = new Point(575, 115);
        this.lblLastNameHeading.Location = new Point(420, 115);
        this.lblMiddleName.Location = new Point(575, 147);
        this.lblMiddleNameHeading.Location = new Point(420, 147);
        this.lblBirthDate.Location = new Point(575, 179);
        this.lblBirthDateHeading.Location = new Point(420, 179);
        this.lblMobileNum.Location = new Point(576, 403);
        this.lblMobileHeading.Location = new Point(420, 403);
        this.lblPersonalNum.Location = new Point(576, 435);
        this.lblPersonalPhoneHeading.Location = new Point(420, 435);
        this.lblMobileNum.Location = new Point(576, 403);
        this.lblMobileHeading.Location = new Point(420, 403);
        this.lblPersonalEm.Location = new Point(576, 467);
        this.lblPersonalEmailHeading.Location = new Point(420, 467);
        this.lblEmpType.Location = new Point(575, 243);
        this.lblEmpTypeHeading.Location = new Point(420, 243);
        this.lblSalary.Location = new Point(575, 275);
        this.lblSalaryHeading.Location = new Point(420, 275);
        this.lblOfficeLoc.Location = new Point(576, 307);
        this.lblOfficeLocHeading.Location = new Point(420, 307);
        this.lblWorkPhone.Location = new Point(575, 339);
        this.lblWorkPhoneHeading.Location = new Point(420, 339);
        this.lblWorkEmail.Location = new Point(575, 371);
        this.lblEmailHeading.Location = new Point(420, 371);
        this.lblEmpNum.Visible = true;
        this.lblFirstName.Visible = true;
        this.lblLastName.Visible = true;
        this.lblMiddleName.Visible = true;
        this.lblEmpType.Visible = true;
        this.lblSalary.Visible = true;
        this.lblOfficeLoc.Visible = true;
        this.lblWorkPhone.Visible = true;
        this.lblWorkEmail.Visible = true;
        this.lblMobileNum.Visible = true;
        this.lblPersonalNum.Visible = true;
        this.lblPersonalEm.Visible = true;
        this.btnAddDependent.Visible = true;
        this.lblHiredDate.Visible = true;
        this.lblBirthDate.Visible = true;
        this.lblEmpNumHeading.Visible = true;
        this.lblHiredDateHeading.Visible = true;
        this.lblSalaryHeading.Visible = true;
        this.lblOfficeLocHeading.Visible = true;
        this.lblWorkPhoneHeading.Visible = true;
        this.lblEmailHeading.Visible = true;
        this.btnAddDependent.Enabled = true;
        this.btnAddEmployee.Enabled = true;
      }
      this.lblEmpNum.Text = this.employeeList[integer].EmployeeNumber;
      this.lblFirstName.Text = this.employeeList[integer].FirstName;
      this.lblLastName.Text = this.employeeList[integer].LastName;
      this.lblMiddleName.Text = this.employeeList[integer].MiddleName;
      if (Operators.CompareString(this.employeeList[integer].EmployeeType, "F", false) == 0 | Operators.CompareString(this.employeeList[integer].EmployeeType, "P", false) == 0)
      {
        this.lblEmpTypeHeading.Text = "Employee Type";
        this.lblEmpType.Text = this.employeeList[integer].EmployeeType;
      }
      else if (Operators.CompareString(this.employeeList[integer].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[integer].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[integer].DependentType, "O", false) == 0)
      {
        this.lblEmpTypeHeading.Text = "Dependent Type";
        this.lblEmpType.Text = this.employeeList[integer].DependentType;
      }
      this.lblSalaryHeading.Text = Operators.CompareString(this.employeeList[integer].EmployeeType, "F", false) != 0 ? (Operators.CompareString(this.employeeList[integer].EmployeeType, "P", false) != 0 ? "Salary" : "Salary (hourly)") : "Salary (yearly)";
      this.lblSalary.Text = "$ " + this.employeeList[integer].Salary.ToString("N2");
      this.lblOfficeLoc.Text = this.employeeList[integer].OfficeCubeLoc;
      this.lblWorkPhone.Text = this.employeeList[integer].WorkPhone;
      this.lblWorkEmail.Text = this.employeeList[integer].WorkEmail;
      this.lblMobileNum.Text = this.employeeList[integer].MobilePhone;
      this.lblPersonalNum.Text = this.employeeList[integer].PersonalPhone;
      this.lblPersonalEm.Text = this.employeeList[integer].PersonalEmail;
      this.lblBirthDate.Text = this.employeeList[integer].BirthDate;
      this.lblHiredDate.Text = this.employeeList[integer].HiredDate;
    }

    private void tsbtnOpen_Click(object sender, EventArgs e)
    {
      OpenFileDialog openFileDialog = new OpenFileDialog();
      if (openFileDialog.ShowDialog() != DialogResult.OK)
        return;
      this.BOOK_SOURCE_XML = openFileDialog.FileName;
      this.loadXmlFile();
      this.tsbtnSave.Enabled = true;
      this.lblEmpNum.Visible = false;
      this.lblFirstName.Visible = false;
      this.lblLastName.Visible = false;
      this.lblMiddleName.Visible = false;
      this.lblBirthDate.Visible = false;
      this.lblMobileNum.Visible = false;
      this.lblHiredDate.Visible = false;
      this.lblEmpType.Visible = false;
      this.lblSalary.Visible = false;
      this.lblOfficeLoc.Visible = false;
      this.lblWorkPhone.Visible = false;
      this.lblWorkEmail.Visible = false;
      this.lblWorkPhone.Visible = false;
      this.lblPersonalEm.Visible = false;
      this.lblPersonalNum.Visible = false;
      this.btnEdit.Enabled = false;
      this.btnDelete.Enabled = false;
      this.btnAddDependent.Enabled = false;
      this.trvEmployeesDepend.SelectedNode = this.trvEmployeesDepend.Nodes[0];
    }

    private void tsbtnSave_Click(object sender, EventArgs e)
    {
      XmlWriter xmlWrite = XmlWriter.Create(this.BOOK_SOURCE_XML, new XmlWriterSettings()
      {
        Indent = true,
        IndentChars = "    "
      });
      xmlWrite.WriteStartDocument();
      xmlWrite.WriteStartElement("organization");
      this.RecursNodesSaveToXml(this.trvEmployeesDepend.Nodes, xmlWrite);
      xmlWrite.WriteEndElement();
      xmlWrite.Close();
    }

    private void tosbtnSaveAs_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "Employee File|*.xml";
      saveFileDialog.Title = "Save a Employee File";
      int num = (int) saveFileDialog.ShowDialog();
      if (Operators.CompareString(saveFileDialog.FileName, "", false) == 0)
        return;
      this.BOOK_SOURCE_XML = saveFileDialog.FileName;
      XmlWriter xmlWrite = XmlWriter.Create(saveFileDialog.FileName, new XmlWriterSettings()
      {
        Indent = true,
        IndentChars = "    "
      });
      xmlWrite.WriteStartDocument();
      xmlWrite.WriteStartElement("organization");
      this.RecursNodesSaveToXml(this.trvEmployeesDepend.Nodes, xmlWrite);
      xmlWrite.WriteEndElement();
      xmlWrite.Close();
      this.tsbtnSave.Enabled = true;
    }

    private void RecursNodesSaveToXml(TreeNodeCollection NodeCollection, XmlWriter xmlWrite)
    {
      try
      {
        foreach (TreeNode node in NodeCollection)
        {
          if (Operators.CompareString(this.employeeList[Conversions.ToInteger(node.Name)].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[Conversions.ToInteger(node.Name)].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[Conversions.ToInteger(node.Name)].DependentType, "O", false) == 0)
          {
            xmlWrite.WriteStartElement("dependent");
            xmlWrite.WriteAttributeString("lname", this.employeeList[Conversions.ToInteger(node.Name)].LastName);
            xmlWrite.WriteAttributeString("fname", this.employeeList[Conversions.ToInteger(node.Name)].FirstName);
            xmlWrite.WriteAttributeString("mname", this.employeeList[Conversions.ToInteger(node.Name)].MiddleName);
            string str1 = this.employeeList[Conversions.ToInteger(node.Name)].BirthDate.Replace("/", "");
            string str2 = str1.Remove(0, 4) + str1.Remove(1, 6) + str1.Remove(0, 2).Remove(2, 4);
            xmlWrite.WriteAttributeString("bdate", str2);
            xmlWrite.WriteAttributeString("type", this.employeeList[Conversions.ToInteger(node.Name)].DependentType);
            xmlWrite.WriteAttributeString("phone", this.employeeList[Conversions.ToInteger(node.Name)].PersonalPhone);
            xmlWrite.WriteAttributeString("mobile", this.employeeList[Conversions.ToInteger(node.Name)].MobilePhone);
            xmlWrite.WriteAttributeString("email", this.employeeList[Conversions.ToInteger(node.Name)].PersonalEmail);
          }
          else
          {
            xmlWrite.WriteStartElement("employee");
            xmlWrite.WriteAttributeString("empno", this.employeeList[Conversions.ToInteger(node.Name)].EmployeeNumber);
            xmlWrite.WriteAttributeString("lname", this.employeeList[Conversions.ToInteger(node.Name)].LastName);
            xmlWrite.WriteAttributeString("fname", this.employeeList[Conversions.ToInteger(node.Name)].FirstName);
            xmlWrite.WriteAttributeString("mname", this.employeeList[Conversions.ToInteger(node.Name)].MiddleName);
            string str3 = this.employeeList[Conversions.ToInteger(node.Name)].BirthDate.Replace("/", "");
            string str4 = str3.Remove(0, 4) + str3.Remove(1, 6) + str3.Remove(0, 2).Remove(2, 4);
            xmlWrite.WriteAttributeString("bdate", str4);
            string str5 = this.employeeList[Conversions.ToInteger(node.Name)].HiredDate.Replace("/", "");
            string str6 = str5.Remove(0, 4) + str5.Remove(1, 6) + str5.Remove(0, 2).Remove(2, 4);
            xmlWrite.WriteAttributeString("hired", str6);
            xmlWrite.WriteAttributeString("type", this.employeeList[Conversions.ToInteger(node.Name)].EmployeeType);
            if (Operators.CompareString(this.employeeList[Conversions.ToInteger(node.Name)].EmployeeType, "P", false) == 0)
              xmlWrite.WriteAttributeString("hourly", Conversions.ToString(this.employeeList[Conversions.ToInteger(node.Name)].Salary));
            else
              xmlWrite.WriteAttributeString("annual", Conversions.ToString(this.employeeList[Conversions.ToInteger(node.Name)].Salary));
            xmlWrite.WriteAttributeString("location", this.employeeList[Conversions.ToInteger(node.Name)].OfficeCubeLoc);
            xmlWrite.WriteAttributeString("wphone", this.employeeList[Conversions.ToInteger(node.Name)].WorkPhone);
            xmlWrite.WriteAttributeString("wemail", this.employeeList[Conversions.ToInteger(node.Name)].WorkEmail);
            xmlWrite.WriteAttributeString("mobile", this.employeeList[Conversions.ToInteger(node.Name)].MobilePhone);
            xmlWrite.WriteAttributeString("pphone", this.employeeList[Conversions.ToInteger(node.Name)].PersonalPhone);
            xmlWrite.WriteAttributeString("pemail", this.employeeList[Conversions.ToInteger(node.Name)].PersonalEmail);
          }
          this.RecursNodesSaveToXml(node.Nodes, xmlWrite);
          xmlWrite.WriteEndElement();
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    private void loadXmlFile()
    {
      this.employeeList.Clear();
      this.dependentList.Clear();
      this.trvEmployeesDepend.Nodes.Clear();
      this.employeeCount = 0;
      this.dependentCount = 0;
      XmlReader xmlReader = XmlReader.Create(this.BOOK_SOURCE_XML, new XmlReaderSettings()
      {
        IgnoreWhitespace = true,
        IgnoreComments = true
      });
      xmlReader.Read();
      while (xmlReader.ReadState != ReadState.EndOfFile)
      {
        if (Operators.CompareString(xmlReader.Name, "organization", false) == 0 && xmlReader.NodeType == XmlNodeType.Element)
          this.recursXmlReader(xmlReader.ReadSubtree(), (TreeNode) null);
        xmlReader.Read();
      }
      xmlReader.Close();
      this.trvEmployeesDepend.Nodes[0].ExpandAll();
    }

    private void recursXmlReader(XmlReader reader, TreeNode node)
    {
      reader.Read();
      while (reader.ReadState != ReadState.EndOfFile)
      {
        if (Operators.CompareString(reader.Name, "employee", false) == 0 && reader.NodeType == XmlNodeType.Element)
        {
          this.employeeList.Add(new Employee());
          this.employeeList[this.employeeCount].EmployeeNumber = reader["empno"];
          this.employeeList[this.employeeCount].FirstName = reader["fname"];
          this.employeeList[this.employeeCount].LastName = reader["lname"];
          this.employeeList[this.employeeCount].MiddleName = reader["mname"];
          string Left1 = reader["bdate"];
          if (Operators.CompareString(Left1, "", false) == 0)
          {
            this.employeeList[this.employeeCount].BirthDate = Left1;
          }
          else
          {
            string str = Left1.Remove(4, 4);
            this.employeeList[this.employeeCount].BirthDate = Left1.Remove(0, 4).Remove(2, 2) + "/" + Left1.Remove(0, 6) + "/" + str;
          }
          string Left2 = reader["hired"];
          if (Operators.CompareString(Left2, "", false) == 0)
          {
            this.employeeList[this.employeeCount].HiredDate = Left2;
          }
          else
          {
            string str = Left2.Remove(4, 4);
            this.employeeList[this.employeeCount].HiredDate = Left2.Remove(0, 4).Remove(2, 2) + "/" + Left2.Remove(0, 6) + "/" + str;
          }
          this.employeeList[this.employeeCount].EmployeeType = reader["type"];
          this.employeeList[this.employeeCount].Salary = Operators.CompareString(reader["type"], "F", false) != 0 ? Conversions.ToDouble(reader["hourly"]) : Conversions.ToDouble(reader["annual"]);
          this.employeeList[this.employeeCount].OfficeCubeLoc = reader["location"];
          this.employeeList[this.employeeCount].WorkPhone = reader["wphone"];
          this.employeeList[this.employeeCount].WorkEmail = reader["wemail"];
          this.employeeList[this.employeeCount].MobilePhone = reader["mobile"];
          this.employeeList[this.employeeCount].PersonalPhone = reader["pphone"];
          this.employeeList[this.employeeCount].PersonalEmail = reader["pemail"];
          TreeNode node1;
          if (this.employeeCount == 0)
          {
            node1 = this.trvEmployeesDepend.Nodes.Add(Conversions.ToString(this.employeeCount), reader["lname"] + ", " + reader["fname"]);
            node1.ImageIndex = 0;
            node1.SelectedImageIndex = 0;
          }
          else
          {
            node1 = node.Nodes.Add(Conversions.ToString(this.employeeCount), reader["lname"] + ", " + reader["fname"]);
            node1.ImageIndex = 1;
            node1.SelectedImageIndex = 1;
          }
          node1.ToolTipText = this.employeeList[this.employeeCount].EmployeeNumber + " [" + this.employeeList[this.employeeCount].OfficeCubeLoc + "]";
          checked { ++this.employeeCount; }
          reader.Read();
          while (reader.ReadState != ReadState.EndOfFile)
          {
            if ((Operators.CompareString(reader.Name, "employee", false) == 0 || Operators.CompareString(reader.Name, "Subemployee", false) == 0 || Operators.CompareString(reader.Name, "dependent", false) == 0) && reader.NodeType == XmlNodeType.Element)
              this.recursXmlReader(reader.ReadSubtree(), node1);
            reader.Read();
          }
        }
        else if (Operators.CompareString(reader.Name, "Subemployee", false) == 0 && reader.NodeType == XmlNodeType.Element)
        {
          this.employeeList.Add(new Employee());
          this.employeeList[this.employeeCount].FirstName = reader["Subfname"];
          this.employeeList[this.employeeCount].LastName = reader["Sublname"];
          node.Nodes.Add(Conversions.ToString(this.employeeCount), reader["Sublname, Subfname"]);
          checked { ++this.dependentCount; }
        }
        else if (Operators.CompareString(reader.Name, "dependent", false) == 0 && reader.NodeType == XmlNodeType.Element)
        {
          this.employeeList.Add(new Employee());
          this.employeeList[this.employeeCount].FirstName = reader["fname"];
          this.employeeList[this.employeeCount].LastName = reader["lname"];
          this.employeeList[this.employeeCount].DependentType = reader["type"];
          this.employeeList[this.employeeCount].MiddleName = reader["mname"];
          string Left = reader["bdate"];
          if (Operators.CompareString(Left, "", false) == 0)
          {
            this.employeeList[this.employeeCount].BirthDate = Left;
          }
          else
          {
            string str = Left.Remove(4, 4);
            this.employeeList[this.employeeCount].BirthDate = Left.Remove(0, 4).Remove(2, 2) + "/" + Left.Remove(0, 6) + "/" + str;
          }
          this.employeeList[this.employeeCount].PersonalPhone = reader["phone"];
          this.employeeList[this.employeeCount].MobilePhone = reader["mobile"];
          this.employeeList[this.employeeCount].PersonalEmail = reader["email"];
          TreeNode treeNode = node.Nodes.Add(Conversions.ToString(this.employeeCount), this.employeeList[this.employeeCount].LastName + ", " + this.employeeList[this.employeeCount].FirstName);
          treeNode.ImageIndex = 2;
          treeNode.SelectedImageIndex = 2;
          treeNode.ToolTipText = Operators.CompareString(this.employeeList[this.employeeCount].DependentType, "S", false) != 0 ? (Operators.CompareString(this.employeeList[this.employeeCount].DependentType, "C", false) != 0 ? "Other" : "Child") : "Spouse";
          checked { ++this.employeeCount; }
        }
        reader.Read();
      }
      reader.Close();
    }

    private void trvEmployeesDepend_ItemDrag(object sender, ItemDragEventArgs e)
    {
      if (this.currEmpIndex == 0 | Operators.CompareString(this.employeeList[this.currEmpIndex].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[this.currEmpIndex].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[this.currEmpIndex].DependentType, "O", false) == 0)
      {
        this.trvEmployeesDepend.AllowDrop = false;
      }
      else
      {
        this.trvEmployeesDepend.AllowDrop = true;
        int num = (int) this.DoDragDrop(RuntimeHelpers.GetObjectValue(e.Item), DragDropEffects.Move);
      }
    }

    private void trvEmployeesDepend_DragEnter(object sender, DragEventArgs e)
    {
      if (this.currEmpIndex == 0 | Operators.CompareString(this.employeeList[this.currEmpIndex].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[this.currEmpIndex].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[this.currEmpIndex].DependentType, "O", false) == 0)
      {
        this.trvEmployeesDepend.AllowDrop = false;
      }
      else
      {
        this.trvEmployeesDepend.AllowDrop = true;
        e.Effect = DragDropEffects.Move;
      }
    }

    private void trvEmployeesDepend_DragDrop(object sender, DragEventArgs e)
    {
      if (!e.Data.GetDataPresent("System.Windows.Forms.TreeNode", false))
        return;
      TreeNode nodeAt = this.trvEmployeesDepend.GetNodeAt(this.trvEmployeesDepend.PointToClient(new Point(e.X, e.Y)));
      TreeNode data = (TreeNode) e.Data.GetData("System.Windows.Forms.TreeNode");
      if (!nodeAt.Equals((object) data))
      {
        nodeAt.Nodes.Add((TreeNode) data.Clone());
        nodeAt.Expand();
        data.Remove();
      }
    }

    public void getEmpNum(string empNum) => this.employeeNumber = empNum;

    public void getEmpFirstName(string name) => this.firstName = name;

    public void getLast(string lname) => this.lastName = lname;

    public void getMid(string mName) => this.middlName = mName;

    public void getEmpType(string empT) => this.employeeType = empT;

    public void getSalary(double sal) => this.salary = sal;

    public void getOff(string offLoc) => this.officeLocation = offLoc;

    public void getWorkPhn(string wrkPhn) => this.workPhone = wrkPhn;

    public void getWorkEmail(string wrkEm) => this.workEmail = wrkEm;

    public void getMobPhn(string mobPhn) => this.mobilePhone = mobPhn;

    public void getPerPhn(string perPhn) => this.personalPhone = perPhn;

    public void getPerEmail(string perEmail) => this.personalEmail = perEmail;

    public void getDependent(string depType) => this.dependentType = depType;

    public void getBirthDate(string bDate) => this.birthDate = bDate;

    public void getHiredDate(string hDate) => this.hiredDate = hDate;

    private void testLists()
    {
      int num1 = checked (this.employeeCount - 1);
      int index1 = 0;
      while (index1 <= num1)
      {
        int num2 = (int) Interaction.MsgBox((object) ("This is an employee: " + this.employeeList[index1].EmployeeNumber));
        checked { ++index1; }
      }
      int num3 = checked (this.dependentCount - 1);
      int index2 = 0;
      while (index2 <= num3)
      {
        int num4 = (int) Interaction.MsgBox((object) ("This is a dependent: " + this.dependentList[index2].FirstName));
        checked { ++index2; }
      }
    }

    private void btnTestLists_Click(object sender, EventArgs e) => this.testLists();

    private void btnTraverse_Click(object sender, EventArgs e) => this.RecursNodesMessageBoxes(this.trvEmployeesDepend.Nodes);

    private void RecursNodesMessageBoxes(TreeNodeCollection NodeCollection)
    {
      try
      {
        foreach (TreeNode node in NodeCollection)
        {
          int num = (int) Interaction.MsgBox((object) node.Text);
          this.RecursNodesMessageBoxes(node.Nodes);
        }
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
    }

    private void btnCount_Click(object sender, EventArgs e)
    {
      int num = (int) Interaction.MsgBox((object) ("The count of nodes is: " + Conversions.ToString(this.employeeCount)));
    }

    private void btnDelete_Click(object sender, EventArgs e)
    {
      int num1 = (int) MessageBox.Show("Are you sure you want to delete " + this.employeeList[this.currEmpIndex].FirstName + " " + this.employeeList[this.currEmpIndex].LastName + "?", "Confirm", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2);
      TreeNode selectedNode = this.trvEmployeesDepend.SelectedNode;
      TreeNode parent = selectedNode.Parent;
      int num2 = 0;
      if (this.currEmpIndex == 0)
      {
        int num3 = (int) Interaction.MsgBox((object) "You can't delete the company CEO!", MsgBoxStyle.Critical, (object) "Error");
      }
      else
      {
        if (num1 == 7)
          return;
        if (this.currEmpIndex == 0)
          return;
        try
        {
          foreach (TreeNode node in parent.Nodes)
            checked { ++num2; }
        }
        finally
        {
          IEnumerator enumerator;
          if (enumerator is IDisposable)
            (enumerator as IDisposable).Dispose();
        }
        int count = selectedNode.Nodes.Count;
        int num4 = num2;
        int index1 = count;
        while (index1 <= num4)
        {
          if (Operators.CompareString(this.employeeList[index1].DependentType, "S", false) == 0 | Operators.CompareString(this.employeeList[index1].DependentType, "C", false) == 0 | Operators.CompareString(this.employeeList[index1].DependentType, "O", false) == 0)
          {
            parent.Nodes.Remove(selectedNode);
          }
          else
          {
            int index2 = checked (selectedNode.Nodes.Count - 1);
            while (index2 >= 0)
            {
              TreeNode node = selectedNode.Nodes[index2];
              selectedNode.Nodes.Remove(node);
              parent.Nodes.Add(node);
              checked { index2 += -1; }
            }
          }
          checked { ++index1; }
        }
      }
    }

    private void frmMain_FormClosing(object sender, FormClosingEventArgs e)
    {
      if (MessageBox.Show("Are you sure you want to close?", "Confirm", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2) != DialogResult.No)
        return;
      e.Cancel = true;
    }

    private void btnExit_Click(object sender, EventArgs e) => this.Close();
  }
}
