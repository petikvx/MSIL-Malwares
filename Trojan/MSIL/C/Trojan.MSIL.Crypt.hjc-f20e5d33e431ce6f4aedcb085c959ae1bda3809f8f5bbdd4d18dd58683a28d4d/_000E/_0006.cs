// Decompiled with JetBrains decompiler
// Type: .
// Assembly: syncui, Version=1.0.0.0, Culture=neutral, PublicKeyToken=cab8849a7bf7875b
// MVID: B8136FDA-4EB0-4CA7-9502-281BC34A634B
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.MSIL.Crypt.hjc-f20e5d33e431ce6f4aedcb085c959ae1bda3809f8f5bbdd4d18dd58683a28d4d.exe

using \u0001;
using \u0005;
using \u0007;
using \u000E;
using System;
using System.Globalization;
using System.IO;
using System.IO.IsolatedStorage;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;

namespace \u000E
{
  internal static class \u0006
  {
    private static readonly string \u0001;
    internal static readonly string \u0002;
    internal static readonly string \u0003;
    internal static readonly string \u0004;
    internal static readonly IsolatedStorageFile \u0001;
    internal static readonly Encoding \u0001;
    internal static readonly HashAlgorithm \u0001;
    [NonSerialized]
    internal static \u0003 \u000F;

    static \u0006()
    {
      try
      {
        if (true)
        {
          \u0002.\u0001(typeof (\u0006));
          if (true)
          {
            if (true)
              \u0006.\u0001 = \u008F.\u007E\u0001\u0003((object) \u0006.\u000F(1975), 1, 8);
            else
              goto label_6;
          }
        }
        else
          goto label_5;
label_4:
        \u0006.\u0002 = \u0099.\u001A\u0003(\u0006.\u0001, \u0006.\u000F(7469));
label_5:
        \u0006.\u0003 = \u0099.\u001A\u0003(\u0006.\u0001, \u0006.\u000F(7486));
label_6:
        \u0006.\u0004 = \u0099.\u001A\u0003(\u0006.\u0001, \u0006.\u000F(7491));
        \u0006.\u0001 = \u001A.\u000E\u0002();
        do
        {
          \u0006.\u0001 = (HashAlgorithm) new MD5CryptoServiceProvider();
          if (false)
            goto label_4;
        }
        while (false);
        \u0006.\u0001 = \u0006\u0004.\u0080\u0006();
        \u0098.\u007E\u0013\u0003((object) \u0006.\u0001, \u0006.\u0001);
        \u0098.\u007E\u0013\u0003((object) \u0006.\u0001, \u0006.\u0003);
      }
      catch (Exception ex)
      {
        \u0012.\u0001(ex);
        throw;
      }
    }

    internal sealed class \u0001 : IDisposable
    {
      private static readonly CultureInfo \u0001;
      private readonly CultureInfo \u0002;
      private readonly Mutex \u0001;
      [NonSerialized]
      internal static \u0003 \u001C;

      public \u0001([In] string obj0)
      {
        try
        {
          this.\u0002 = Thread.CurrentThread.CurrentUICulture;
          Thread.CurrentThread.CurrentUICulture = \u0006.\u0001.\u0001;
          if (obj0.Length > 260)
            obj0 = obj0.Remove(261);
          obj0 = obj0.Replace(Path.DirectorySeparatorChar, '_');
          this.\u0001 = new Mutex(false, obj0);
          try
          {
            this.\u0001.WaitOne();
          }
          catch (AbandonedMutexException ex)
          {
          }
        }
        catch (Exception ex)
        {
          string str = obj0;
          \u0012.\u0001(ex, (object) this, (object) str);
          throw;
        }
      }

      public void \u0001()
      {
        try
        {
          if (true)
          {
            \u0014.\u007E\u008D((object) this.\u0001);
            \u0014.\u007E\u008E((object) this.\u0001);
          }
          \u0007\u0004.\u007E\u0081\u0006((object) \u0004\u0003.\u0017\u0005(), this.\u0002);
        }
        catch (Exception ex)
        {
          \u0012.\u0001(ex, (object) this);
          throw;
        }
      }

      static \u0001()
      {
        try
        {
          Type type = typeof (\u0006.\u0001);
          if (true)
            goto label_2;
label_1:
          \u0006.\u0001.\u0001 = \u0008\u0004.\u0082\u0006(\u0006.\u0001.\u001C(7500));
          return;
label_2:
          \u0002.\u0001(type);
          goto label_1;
        }
        catch (Exception ex)
        {
          \u0012.\u0001(ex);
          throw;
        }
      }
    }
  }
}
