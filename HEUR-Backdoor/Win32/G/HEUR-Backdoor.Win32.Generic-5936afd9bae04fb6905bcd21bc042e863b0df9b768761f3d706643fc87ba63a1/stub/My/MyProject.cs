// Decompiled with JetBrains decompiler
// Type: stub.My.MyProject
// Assembly: stub, Version=6.2.15.2, Culture=neutral, PublicKeyToken=null
// MVID: 6CAE2B56-3E3C-414E-A63C-DF5759216B41
// Assembly location: C:\Users\Administrateur\Downloads\VirusShare_CryptoRansom_20160715-msil\HEUR-Backdoor.Win32.Generic-5936afd9bae04fb6905bcd21bc042e863b0df9b768761f3d706643fc87ba63a1.exe

using MICROSOFT.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Ⴐ;

namespace stub.My
{
  [StandardModule]
  [GeneratedCode("MyTemplate", "8.0.0.0")]
  [HideModuleName]
  internal sealed class MyProject
  {
    private static readonly MyProject.Ⴄ<MyComputer> Ⴓ;
    private static readonly MyProject.Ⴄ<MyApplication> Ⴅ;
    private static readonly MyProject.Ⴄ<User> Ⴓ;
    private static MyProject.Ⴄ<MyProject.Ⴐ> Ⴅ;
    private static readonly MyProject.Ⴄ<MyProject.Ⴓ> Ⴍ;

    static MyProject()
    {
      Ⴈ.Ⴃ();
      int num = 1;
      while (true)
      {
        switch (num)
        {
          case 0:
            goto label_4;
          case 2:
            goto label_5;
          case 3:
            MyProject.Ⴓ = new MyProject.Ⴄ<User>();
            MyProject.Ⴅ = new MyProject.Ⴄ<MyProject.Ⴐ>();
            MyProject.Ⴍ = new MyProject.Ⴄ<MyProject.Ⴓ>();
            num = 0;
            continue;
          case 4:
            goto label_6;
          default:
            MyProject.Ⴓ = new MyProject.Ⴄ<MyComputer>();
            MyProject.Ⴅ = new MyProject.Ⴄ<MyApplication>();
            goto case 3;
        }
      }
label_4:
      return;
label_5:
      return;
label_6:;
    }

    [HelpKeyword("My.Computer")]
    internal static MyComputer Ⴍ => MyProject.Ⴓ.Ⴈ();

    [HelpKeyword("My.Application")]
    internal static MyApplication Ⴀ => MyProject.Ⴅ.Ⴈ();

    [HelpKeyword("My.User")]
    internal static User Ⴄ => MyProject.Ⴓ.Ⴈ();

    [HelpKeyword("My.Forms")]
    internal static MyProject.Ⴐ Ⴄ => MyProject.Ⴅ.Ⴈ();

    [HelpKeyword("My.WebServices")]
    internal static MyProject.Ⴓ Ⴐ => MyProject.Ⴍ.Ⴈ();

    [MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class Ⴐ
    {
      public Form1 Ⴐ;
      [ThreadStatic]
      private static Hashtable Ⴓ;

      [SpecialName]
      public Form1 Ⴀ()
      {
        this.Ⴐ = MyProject.Ⴐ.Ⴈ<Form1>(this.Ⴐ);
        return this.Ⴐ;
      }

      [SpecialName]
      public void Ⴓ(Form1 Ⴗ)
      {
        int num = 4;
        while (true)
        {
          switch (num)
          {
            case 0:
              this.Ⴅ<Form1>(ref this.Ⴐ);
              num = 8;
              continue;
            case 1:
            case 3:
              num = 8;
              continue;
            case 2:
            case 5:
              goto label_5;
            case 6:
              num = Ⴗ == null ? 0 : 2;
              continue;
            case 8:
              goto label_7;
            default:
              num = Ⴗ != this.Ⴐ ? 6 : 3;
              continue;
          }
        }
label_7:
        return;
label_5:
        throw new ArgumentException(MyComputer.Ⴍ(437501342, 8));
      }

      private static T Ⴈ<T>(T Ⴐ) where T : Form, new()
      {
label_3:
        int num1 = (object) Ⴐ == null ? 9 : 2;
        while (true)
        {
          bool flag;
          int num2;
          switch (num1)
          {
            case 0:
            case 5:
              num1 = 3;
              continue;
            case 1:
            case 15:
              // ISSUE: type reference
              flag = Ⴐ.Ⴅ.Ⴅ(MyProject.Ⴐ.Ⴓ, (object) Compression.Ⴓ(__typeref (T), 473, 470), 247, 236);
              num1 = 12;
              continue;
            case 2:
            case 10:
              num1 = Ⴐ.IsDisposed ? 9 : 11;
              continue;
            case 3:
              // ISSUE: type reference
              Ⴈ.Ⴈ(MyProject.Ⴐ.Ⴓ, (object) Compression.Ⴓ(__typeref (T), 953, 950), (object) null, 955, 964);
              num1 = 13;
              continue;
            case 6:
              MyProject.Ⴐ.Ⴓ = new Hashtable();
              num1 = 3;
              continue;
            case 7:
              num1 = MyProject.Ⴐ.Ⴓ == null ? 6 : 15;
              continue;
            case 8:
              goto label_12;
            case 9:
              num2 = 1;
              break;
            case 11:
              num2 = 0;
              break;
            case 12:
              num1 = !flag ? 0 : 8;
              continue;
            case 13:
              goto label_16;
            case 14:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyProject.Ⴐ.Ⴈ);
              num1 = 14;
              continue;
          }
          if (num2 != 0)
            num1 = 7;
          else
            goto label_25;
        }
label_12:
        throw new InvalidOperationException(Ⴐ.Ⴗ.Ⴃ(MyComputer.Ⴍ(437501364, 4), new string[0], 773, 860));
label_16:
        T obj;
        try
        {
          switch (3)
          {
            case 0:
            case 1:
            case 4:
            case 5:
              break;
            default:
              obj = new T();
              goto label_28;
          }
        }
        catch (TargetInvocationException ex) when (
        {
          // ISSUE: unable to correctly present filter
          Compression.Ⴅ((Exception) ex, 285, 290);
          if (Ⴐ.Ⴗ.Ⴜ((Exception) ex, 88, 81) != null)
          {
            SuccessfulFiltering;
          }
          else
            throw;
        }
        )
        {
          throw new InvalidOperationException(Utils.GetResourceString(MyComputer.Ⴍ(437501395, 0), MyComputer.Ⴓ(Ⴐ.Ⴗ.Ⴜ((Exception) ex, 10, 3), 835, 824)), ex.InnerException);
        }
        finally
        {
          switch (3)
          {
            default:
              MyProject.Ⴐ.Ⴓ.Remove((object) typeof (T));
          }
        }
        int num3 = 4;
label_23:
        while (true)
        {
          switch (num3)
          {
            case 0:
              goto label_25;
            case 1:
            case 2:
              num3 = 3;
              continue;
            case 3:
              goto label_28;
            case 6:
              goto label_26;
            default:
              num3 = 1;
              continue;
          }
        }
label_25:
        obj = Ⴐ;
label_26:
        num3 = 3;
        goto label_23;
label_28:
        return obj;
      }

      private void Ⴅ<T>(ref T Ⴈ) where T : Form
      {
        int num = 1;
        while (true)
        {
          switch (num)
          {
            case 2:
              num = 4;
              continue;
            case 3:
              Ⴈ = default (T);
              goto case 2;
            case 4:
              goto label_5;
            default:
              Ⴈ.Dispose();
              goto case 3;
          }
        }
label_5:;
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public Ⴐ()
      {
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object Ⴈ) => base.Equals(Ⴐ.Ⴅ.Ⴓ(Ⴈ, 147, 238));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal System.Type Ⴗ() => Compression.Ⴓ(__typeref (MyProject.Ⴐ), 327, 328);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      static Ⴐ() => Ⴈ.Ⴃ();
    }

    [MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    internal sealed class Ⴓ
    {
      [EditorBrowsable(EditorBrowsableState.Never)]
      public override bool Equals(object Ⴓ) => base.Equals(Ⴐ.Ⴅ.Ⴓ(Ⴓ, 265, 372));

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override int GetHashCode() => base.GetHashCode();

      [EditorBrowsable(EditorBrowsableState.Never)]
      internal System.Type Ⴀ() => Compression.Ⴓ(__typeref (MyProject.Ⴓ), 772, 779);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public override string ToString() => base.ToString();

      private static T Ⴓ<T>(T Ⴅ) where T : new()
      {
label_3:
        int num = (object) Ⴅ != null ? 3 : 0;
        T obj;
        while (true)
        {
          switch (num)
          {
            case 0:
              obj = new T();
              num = 5;
              continue;
            case 1:
              num = 5;
              continue;
            case 2:
            case 3:
            case 6:
              obj = Ⴅ;
              goto case 4;
            case 4:
              num = 5;
              continue;
            case 5:
              goto label_9;
            case 7:
              num = 1;
              continue;
            case 8:
              goto label_3;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyProject.Ⴓ.Ⴓ);
              num = 8;
              continue;
          }
        }
label_9:
        return obj;
      }

      private void Ⴃ<T>(ref T Ⴓ) => Ⴓ = default (T);

      [EditorBrowsable(EditorBrowsableState.Never)]
      public Ⴓ()
      {
      }

      static Ⴓ() => Ⴈ.Ⴃ();
    }

    [EditorBrowsable(EditorBrowsableState.Never)]
    [ComVisible(false)]
    internal sealed class Ⴄ<Ⴗ> where Ⴗ : new()
    {
      [ThreadStatic]
      private static Ⴗ Ⴀ;

      [SpecialName]
      internal Ⴗ Ⴈ()
      {
label_3:
        int num = (object) MyProject.Ⴄ<Ⴗ>.Ⴀ != null ? 3 : 1;
        while (true)
        {
          switch (num)
          {
            case 0:
            case 2:
            case 4:
            case 6:
              goto label_3;
            case 1:
              MyProject.Ⴄ<Ⴗ>.Ⴀ = new Ⴗ();
              num = 3;
              continue;
            case 3:
              goto label_5;
            default:
              // ISSUE: method reference
              RuntimeMethodHandle runtimeMethodHandle = __methodref (MyProject.Ⴄ<>.Ⴈ);
              num = 4;
              continue;
          }
        }
label_5:
        return MyProject.Ⴄ<Ⴗ>.Ⴀ;
      }

      [EditorBrowsable(EditorBrowsableState.Never)]
      public Ⴄ()
      {
      }

      static Ⴄ() => Ⴈ.Ⴃ();
    }
  }
}
