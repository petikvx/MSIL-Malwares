// Decompiled with JetBrains decompiler
// Type: Mauiipecjzet.Sched
// Assembly: NVC, Version=1.27.2835.6155, Culture=neutral, PublicKeyToken=null
// MVID: D6059D47-04E7-4246-B192-8DA3183DE0D7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.06-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-412b77a6a5c1b510f076d010e81749e9a13ebc9b33125d5caa764e78180a28a4.exe

using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Mauiipecjzet
{
  internal class Sched
  {
    private static Sched instance = new Sched();
    private List<Sched.Coroutine> coroutines = new List<Sched.Coroutine>();

    public static Sched Instance => Sched.instance;

    private Sched()
    {
    }

    public Sched.Coroutine StartCoroutine(IEnumerator routine)
    {
      Sched.Coroutine coroutine = new Sched.Coroutine(routine);
      this.coroutines.Add(coroutine);
      return coroutine;
    }

    public void Update()
    {
      foreach (Sched.Coroutine coroutine in this.coroutines.Reverse<Sched.Coroutine>())
      {
        if (coroutine.routine.Current is Sched.Coroutine)
          coroutine.waitForCoroutine = coroutine.routine.Current as Sched.Coroutine;
        if (coroutine.waitForCoroutine != null && coroutine.waitForCoroutine.finished)
          coroutine.waitForCoroutine = (Sched.Coroutine) null;
        if (coroutine.waitForCoroutine == null)
        {
          if (coroutine.routine.MoveNext())
          {
            coroutine.finished = false;
          }
          else
          {
            this.coroutines.Remove(coroutine);
            coroutine.finished = true;
          }
        }
      }
    }

    public class Coroutine
    {
      public IEnumerator routine;
      public Sched.Coroutine waitForCoroutine;
      public bool finished;

      public Coroutine(IEnumerator routine) => this.routine = routine;
    }
  }
}
