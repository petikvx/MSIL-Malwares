// Decompiled with JetBrains decompiler
// Type: .
// Assembly: 5555, Version=0.0.0.0, Culture=neutral, PublicKeyToken=f1fbbd7db53bfdb4
// MVID: 0D11B329-2752-44F3-ACE5-4122455C2392
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00040-msil\Trojan-Ransom.Win32.Blocker.arpc-0c7d5e5565ff7304f705e1aeb4d7e4e31ffcea64aa2ae579695a932615bbef73.exe

using \u0006;
using \u0007;
using \u0008;
using \u000E;
using System;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Threading;
using System.Web.Services.Protocols;
using System.Windows.Forms;

namespace \u000E
{
  internal abstract class \u0005
  {
    private static readonly bool \u0001 = Convert.ToBoolean("False");
    private static readonly string \u0001 = "1";
    private static \u0005 \u0001;
    private IWebProxy \u0001;
    private EventHandler \u0001;
    private \u0002 \u0001;

    [SpecialName]
    public void \u0002([In] EventHandler obj0)
    {
      if (false)
        goto label_4;
      else
        goto label_12;
label_1:
      if (true)
      {
        if (false)
          goto label_4;
        else
          goto label_13;
      }
label_3:
      EventHandler comparand;
      EventHandler eventHandler1;
      if (true)
      {
        EventHandler eventHandler2 = comparand + obj0;
        if (true)
          eventHandler1 = eventHandler2;
      }
      EventHandler eventHandler3 = Interlocked.CompareExchange<EventHandler>(ref this.\u0001, eventHandler1, comparand);
      EventHandler eventHandler4;
      if (true)
        eventHandler4 = eventHandler3;
label_4:
      if (true)
      {
        if (true)
        {
          if (eventHandler4 == comparand)
            return;
          goto label_1;
        }
        else
          goto label_13;
      }
label_12:
      EventHandler eventHandler5 = this.\u0001;
      if (true)
      {
        eventHandler4 = eventHandler5;
        goto label_1;
      }
      else
        goto label_1;
label_13:
      EventHandler eventHandler6 = eventHandler4;
      if (true)
      {
        comparand = eventHandler6;
        goto label_3;
      }
      else
        goto label_3;
    }

    [SpecialName]
    public void \u0002([In] \u0002 obj0)
    {
      if (false)
        goto label_4;
      else
        goto label_12;
label_1:
      if (true)
      {
        if (false)
          goto label_4;
        else
          goto label_13;
      }
label_3:
      \u0002 comparand;
      \u0002 obj1;
      if (true)
      {
        \u0002 obj2 = comparand + obj0;
        if (true)
          obj1 = obj2;
      }
      \u0002 obj3 = Interlocked.CompareExchange<\u0002>(ref this.\u0001, obj1, comparand);
      \u0002 obj4;
      if (true)
        obj4 = obj3;
label_4:
      if (true)
      {
        if (true)
        {
          if (obj4 == comparand)
            return;
          goto label_1;
        }
        else
          goto label_13;
      }
label_12:
      \u0002 obj5 = this.\u0001;
      if (true)
      {
        obj4 = obj5;
        goto label_1;
      }
      else
        goto label_1;
label_13:
      \u0002 obj6 = obj4;
      if (true)
      {
        comparand = obj6;
        goto label_3;
      }
      else
        goto label_3;
    }

    protected abstract void \u0002([In] \u0007.\u0007 obj0);

    protected abstract void \u0002([In] \u0005 obj0);

    protected abstract void \u0002([In] \u0001 obj0);

    [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
    public static void \u0002([In] \u0005 obj0)
    {
      if (obj0 != null)
        goto label_3;
label_2:
      if (true)
        return;
      goto label_4;
label_3:
      \u0005.\u0001 = obj0;
      // ISSUE: method pointer
      \u0097\u0003.\u0084\u0002().UnhandledException += new UnhandledExceptionEventHandler((object) obj0, __methodptr(\u0002));
label_4:
      // ISSUE: method pointer
      Application.ThreadException += new ThreadExceptionEventHandler((object) obj0, __methodptr(\u0002));
      goto label_2;
    }

    [SpecialName]
    private static \u0005 \u0002()
    {
      if (false)
        goto label_21;
label_1:
      int index;
      System.Type[] typeArray;
      if (\u0005.\u0001 == null)
      {
        System.Type[] types = \u0091\u0004.\u0013\u0005().GetTypes();
        if (true)
          goto label_13;
label_2:
        if (true)
        {
          index = 0;
          goto label_10;
        }
        else
          goto label_10;
label_13:
        typeArray = types;
        if (true)
          goto label_2;
      }
      else
        goto label_12;
label_3:
      System.Type type;
      if (true)
      {
        if ((object) type != null && (object) type.BaseType != null)
          goto label_21;
      }
      else
        goto label_1;
label_8:
      int num1 = index;
      int num2 = 1;
label_9:
      int num3 = num1 + num2;
      if (true)
        index = num3;
label_10:
      int num4 = index;
      int length = typeArray.Length;
      if (false)
      {
        num2 = length;
        num1 = num4;
        goto label_9;
      }
      else if (num4 < length)
      {
        object obj = (object) typeArray[index];
        if (true)
        {
          type = (System.Type) obj;
          goto label_3;
        }
        else
          goto label_3;
      }
label_12:
      return \u0005.\u0001;
label_21:
      // ISSUE: type reference
      if ((object) type.BaseType == (object) \u0016\u0004.\u001B\u0003(__typeref (\u0005)))
      {
        try
        {
          if (true)
          {
            if (true)
            {
              \u0005.\u0001 = (\u0005) \u0095\u0003.\u001E\u0002(type, true);
              if (\u0005.\u0001 == null)
                goto label_8;
              else
                goto label_12;
            }
            else
              goto label_12;
          }
          else
            goto label_12;
        }
        catch
        {
          goto label_8;
        }
      }
      else
        goto label_8;
    }

    public static void \u0002([In] Exception obj0, [In] object[] obj1)
    {
label_0:
      while (obj0 != null)
      {
label_12:
        if (obj0 is SecurityException)
        {
label_2:
          int num;
          for (int index = \u0005.\u0001 == "1" ? 1 : 0; index != 0; index = num)
          {
            if (true)
            {
              if (true)
              {
                do
                {
                  num = \u0005.\u0002().\u0002((SecurityException) obj0) ? 1 : 0;
                  if (true)
                  {
                    if (num == 0)
                      goto label_14;
                  }
                  else
                    goto label_2;
                }
                while (false);
                if (true)
                  return;
                goto label_12;
              }
              else
                goto label_0;
            }
            else
              goto label_11;
          }
          break;
        }
        break;
      }
      goto label_14;
label_11:
      if (true)
        return;
label_14:
      \u0005.\u0002(obj0, obj1);
      do
      {
        \u0005.\u0002().\u0002(obj0, false);
      }
      while (false);
      goto label_11;
    }

    public static Exception \u0002([In] Exception obj0, [In] object[] obj1)
    {
      \u0005.\u0003(obj0, obj1);
      return (Exception) new SoapException(obj0.Message, SoapException.ServerFaultCode);
    }

    public static void \u0003([In] Exception obj0, [In] object[] obj1)
    {
      try
      {
        if ((object) obj0.GetType() != (object) typeof (Exception) || !(obj0.Message == "{report}"))
          goto label_3;
        else
          goto label_2;
label_1:
        \u0005.\u0002().\u0002(obj0, true);
        return;
label_2:
        obj0 = obj0.InnerException;
        goto label_1;
label_3:
        \u0005.\u0002(obj0, obj1);
        goto label_1;
      }
      catch
      {
      }
    }

    private void \u0002([In] object obj0, [In] ThreadExceptionEventArgs obj1)
    {
      try
      {
        Exception exception1;
        do
        {
          Exception exception2 = obj1.Exception;
          if (true)
            goto label_6;
label_1:
          continue;
label_6:
          exception1 = exception2;
          goto label_1;
        }
        while (false);
        System.Type type1 = exception1.GetType();
        System.Type type2;
        if (true)
          type2 = type1;
        if (type2.Name == "UnhandledException" && type2.Namespace == "SmartAssembly.SmartExceptionsCore")
        {
          Exception exception3 = (Exception) \u0083\u0004.\u007E\u0087\u0005((object) \u001A\u0004.\u007E\u0082\u0003((object) type2, "PreviousException"), (object) exception1);
          if (true)
            exception1 = exception3;
        }
        if (exception1 is SecurityException && \u001A\u0003.\u0086(\u0005.\u0001, "1") && this.\u0002(exception1 as SecurityException))
          return;
        this.\u0002(exception1, true);
      }
      catch
      {
      }
    }

    private void \u0002([In] object obj0, [In] UnhandledExceptionEventArgs obj1)
    {
      try
      {
        if (obj1.ExceptionObject is SecurityException)
        {
          while (true)
          {
            int num = \u0005.\u0001 == "1" ? 1 : 0;
            if (true)
            {
              if (num != 0 && this.\u0002(obj1.ExceptionObject as SecurityException))
                num = 0;
              else
                goto label_11;
            }
            if (num == 0)
              break;
          }
          return;
        }
label_11:
        while (obj1.ExceptionObject is Exception)
        {
          if (true)
          {
            this.\u0002((Exception) \u0017\u0003.\u007E\u0096\u0003((object) obj1), !\u0016\u0003.\u007E\u0097\u0003((object) obj1));
            break;
          }
        }
      }
      catch
      {
      }
    }

    protected virtual Guid \u0002() => Guid.Empty;

    private bool \u0002([In] SecurityException obj0)
    {
      if (false)
        goto label_3;
      else
        goto label_13;
label_1:
      \u0001 obj1;
      int num;
      if (true)
        num = obj1.\u0004() ? 1 : 0;
      else
        goto label_4;
label_2:
      if (num == 0)
      {
        if (!obj1.\u0003())
        {
          while (true)
          {
            if (true)
            {
              \u008B\u0005.\u0015\u0007();
              goto label_11;
            }
          }
          goto label_1;
        }
label_11:
        return true;
      }
label_3:
      if (false)
        goto label_14;
label_4:
      num = 0;
      if (num != 0)
        return num != 0;
      if (true)
        return num != 0;
      goto label_2;
label_13:
      \u0001 obj2 = new \u0001(obj0);
      if (true)
        obj1 = obj2;
label_14:
      this.\u0002(obj1);
      goto label_1;
    }

    private void \u0002([In] Exception obj0, [In] bool obj1)
    {
      \u0001.\u0003(2U);
      System.Type type1 = obj0.GetType();
      System.Type type2;
      if (true)
        type2 = type1;
      if (type2.Name == "UnhandledException" && type2.Namespace == "SmartAssembly.SmartExceptionsCore")
        goto label_44;
label_1:
      if (true)
        goto label_42;
label_2:
      if (obj0 == null)
        return;
      if (obj0 is ThreadAbortException)
        return;
      bool flag;
      try
      {
        \u0003 obj2 = new \u0003(this.\u0002(), obj0, this.\u0001);
        if (true)
          goto label_20;
label_6:
        \u0003 obj3;
        obj3.\u0002(new \u0002(this.\u0002));
        obj3.\u0002(new EventHandler(this.\u0002));
        obj3.\u0002(new \u0007.\u0006(this.\u0002));
        \u0007.\u0007 obj4 = new \u0007.\u0007(obj3, obj0);
        if (true)
          goto label_18;
label_7:
        \u0007.\u0007 obj5;
        if (\u0006.\u0007.\u0002() != null)
        {
          if (true)
            obj5.\u0002();
          else
            goto label_15;
        }
        if (!obj1)
        {
          obj5.\u0002(false);
          obj5.\u0003(false);
          goto label_15;
        }
        else if (\u0005.\u0001)
          obj5.\u0002(false);
        else
          goto label_15;
label_14:
        obj5.\u0003(true);
label_15:
        this.\u0002(obj5);
        int num = !obj5.\u0005() ? 1 : 0;
        if (true)
          goto label_19;
label_16:
        if (false)
          goto label_14;
        else
          goto label_23;
label_19:
        flag = num != 0;
        goto label_16;
label_18:
        obj5 = obj4;
        goto label_7;
label_20:
        obj3 = obj2;
        goto label_6;
      }
      catch (ThreadAbortException ex)
      {
      }
      catch (Exception ex)
      {
        this.\u0002(new \u0005(ex));
      }
label_23:
      Assembly[] assemblyArray;
      int index;
      if (true)
      {
        if (!flag)
          return;
        assemblyArray = \u0098\u0003.\u007E\u0086\u0002((object) \u0097\u0003.\u0084\u0002());
        index = 0;
      }
      while (true)
      {
        if (true)
        {
          if (index < assemblyArray.Length)
          {
            Assembly assembly = assemblyArray[index];
            try
            {
              string str = \u0008\u0003.\u007E\u0004\u0005((object) assembly);
              if (\u001F\u0003.\u007E\u008E((object) str, "31bf3856ad364e35"))
              {
                if (\u001F\u0003.\u007E\u0092((object) str, "PresentationFramework,"))
                {
                  object obj6 = \u0097\u0004.\u007E\u0082\u0005((object) \u0098\u0004.\u007E\u008C\u0005((object) \u001C\u0004.\u007E\u0084\u0003((object) \u008A\u0004.\u007E\u0005\u0005((object) assembly, "System.Windows.Application"), "Current")), (object) null, (object[]) null);
                  object obj7 = \u0097\u0004.\u007E\u0082\u0005((object) \u0017\u0004.\u007E\u007F\u0003((object) \u000F\u0003.\u007E\u0019(obj6), "Shutdown", new System.Type[0]), obj6, (object[]) null);
                }
              }
            }
            catch
            {
            }
            if (true)
              ++index;
            else
              break;
          }
          else
            goto label_36;
        }
        else
          goto label_1;
      }
      return;
label_36:
      try
      {
        \u008B\u0005.\u0015\u0007();
        return;
      }
      catch
      {
        try
        {
          \u0002\u0004.\u0095\u0002(0);
          return;
        }
        catch
        {
          return;
        }
      }
label_42:
      flag = true;
      goto label_2;
label_44:
      obj0 = (Exception) type2.GetField("PreviousException").GetValue((object) obj0);
      goto label_1;
    }

    private void \u0002([In] object obj0, [In] \u0005 obj1) => this.\u0002(obj1);

    private void \u0002([In] object obj0, [In] EventArgs obj1)
    {
      EventHandler eventHandler1;
      if (true)
      {
        EventHandler eventHandler2 = this.\u0001;
        if (true)
          eventHandler1 = eventHandler2;
      }
      if (eventHandler1 == null)
        return;
      eventHandler1(obj0, obj1);
    }

    private void \u0002([In] object obj0, [In] \u0003 obj1)
    {
      \u0002 obj2;
      if (true)
      {
        \u0002 obj3 = this.\u0001;
        if (true)
          obj2 = obj3;
      }
      if (obj2 == null)
        return;
      obj2(obj0, obj1);
    }
  }
}
