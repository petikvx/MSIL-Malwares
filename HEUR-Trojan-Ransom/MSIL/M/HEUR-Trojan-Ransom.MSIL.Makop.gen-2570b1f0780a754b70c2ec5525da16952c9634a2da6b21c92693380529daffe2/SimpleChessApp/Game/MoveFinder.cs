// Decompiled with JetBrains decompiler
// Type: SimpleChessApp.Game.MoveFinder
// Assembly: 生ث, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E8221468-4DC3-4423-BEC3-5B04CD1AB276
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-2570b1f0780a754b70c2ec5525da16952c9634a2da6b21c92693380529daffe2.exe

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace SimpleChessApp.Game
{
  public class MoveFinder
  {
    public Dictionary<int, List<PossibleMoves>> MoveList = new Dictionary<int, List<PossibleMoves>>();
    private Board board;
    public PieceColor KingColorOnCheck;
    public bool IsOnCheck;

    public MoveFinder(Board b) => this.board = b;

    public void FindAllMoves()
    {
      this.Clear();
label_1:
      int num1 = 437898757;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1919325185)) % 3U)
        {
          case 1:
            num1 = (int) num2 * 1557321505 ^ -748918650;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      using (Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator = this.board.WhitePieces.Values.GetEnumerator())
      {
label_10:
        int num3 = !enumerator.MoveNext() ? 1250013199 : (num3 = 1171524268);
        ChessPiece current;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num3 ^ 1919325185)) % 5U)
          {
            case 0:
              num3 = 1171524268;
              continue;
            case 1:
              goto label_10;
            case 3:
              this.FindMoveFrom(current.Current);
              num3 = (int) num4 * -133864341 ^ 1394065050;
              continue;
            case 4:
              current = enumerator.Current;
              num3 = 523874232;
              continue;
            default:
              goto label_12;
          }
        }
      }
label_12:
      Dictionary<int, ChessPiece>.ValueCollection.Enumerator enumerator1 = this.board.BlackPieces.Values.GetEnumerator();
      try
      {
label_18:
        int num5 = !enumerator1.MoveNext() ? 313495945 : (num5 = 2145750835);
        ChessPiece current;
        while (true)
        {
          uint num6;
          switch ((num6 = (uint) (num5 ^ 1919325185)) % 6U)
          {
            case 1:
              goto label_18;
            case 2:
              current = enumerator1.Current;
              num5 = 730195601;
              continue;
            case 3:
              num5 = 2145750835;
              continue;
            case 4:
              this.FindMoveFrom(current.Current);
              num5 = (int) num6 * -140804062 ^ -2012382626;
              continue;
            case 5:
              num5 = (int) num6 * 1479863326 ^ -732695010;
              continue;
            default:
              goto label_27;
          }
        }
      }
      finally
      {
        enumerator1.Dispose();
label_22:
        int num7 = 932994664;
        while (true)
        {
          uint num8;
          switch ((num8 = (uint) (num7 ^ 1919325185)) % 3U)
          {
            case 0:
              goto label_22;
            case 2:
              num7 = (int) num8 * 355674722 ^ -1045035816;
              continue;
            default:
              goto label_26;
          }
        }
label_26:;
      }
label_27:
      if (!this.board.ShowAllMoves)
        return;
label_28:
      int num9 = 1460468248;
      while (true)
      {
        uint num10;
        switch ((num10 = (uint) (num9 ^ 1919325185)) % 4U)
        {
          case 0:
            num9 = (int) num10 * 1521692708 ^ -506665877;
            continue;
          case 1:
            this.HighLightMoveStyle();
            num9 = (int) num10 * 75190707 ^ 1829736290;
            continue;
          case 2:
            goto label_24;
          case 3:
            goto label_28;
          default:
            goto label_20;
        }
      }
label_24:
      return;
label_20:;
    }

    public void FindMoveFrom(Square x)
    {
label_1:
      int num1 = -991794462;
      Pieces kind;
      Pieces pieces;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -422683548)) % 20U)
        {
          case 0:
            num1 = (int) num2 * 1577272900 ^ 1573442483;
            continue;
          case 1:
            num1 = (int) num2 * 1134573915 ^ -938190925;
            continue;
          case 2:
            num1 = (int) num2 * -397750545 ^ 115535534;
            continue;
          case 3:
label_20:
            this.handleKing(x);
            num1 = -1456800258;
            continue;
          case 4:
            num1 = (int) num2 * 521982225 ^ -1275873721;
            continue;
          case 5:
            num1 = (int) num2 * 1571685618 ^ -1682269431;
            continue;
          case 6:
            kind = x.Piece.Kind;
            num1 = (int) num2 * -1006789728 ^ -484571878;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * -1035682141 ^ -680931829;
            continue;
          case 9:
            goto label_1;
          case 10:
label_22:
            this.handlePawn(x);
            num1 = -796777571;
            continue;
          case 11:
label_19:
            this.handleKnight(x);
            num1 = -245583465;
            continue;
          case 12:
label_17:
            this.handleBishop(x);
            num1 = -956185425;
            continue;
          case 13:
label_16:
            this.handleQueen(x);
            num1 = -1364297517;
            continue;
          case 14:
            pieces = kind;
            num1 = (int) num2 * -2110662019 ^ 797603911;
            continue;
          case 15:
            num1 = (int) num2 * -209363148 ^ 1314565197;
            continue;
          case 16:
            num1 = (int) num2 * 394706820 ^ 610837219;
            continue;
          case 17:
            switch (pieces)
            {
              case Pieces.Pawn:
                goto label_22;
              case Pieces.Knight:
                goto label_19;
              case Pieces.Bishop:
                goto label_17;
              case Pieces.Rook:
                goto label_14;
              case Pieces.King:
                goto label_20;
              case Pieces.Queen:
                goto label_16;
              default:
                num1 = (int) num2 * 1514142055 ^ 2004947999;
                continue;
            }
          case 18:
label_14:
            this.handleRook(x);
            num1 = -1364297517;
            continue;
          case 19:
            num1 = (int) num2 * 613048294 ^ -792282498;
            continue;
          default:
            goto label_23;
        }
      }
label_3:
      return;
label_23:;
    }

    public void HighLightMoveStyle()
    {
    }

    public void Clear()
    {
    }

    private void handlePawn(Square x)
    {
label_1:
      int num1 = 111911885;
      while (true)
      {
        uint num2;
        int num3;
        int num4;
        Square square;
        bool flag1;
        int num5;
        bool flag2;
        bool flag3;
        int num6;
        bool flag4;
        bool flag5;
        bool isEmpty;
        int num7;
        bool flag6;
        int num8;
        bool flag7;
        bool flag8;
        int b;
        bool flag9;
        int num9;
        int num10;
        int num11;
        int num12;
        int num13;
        int num14;
        int num15;
        int num16;
        int num17;
        int num18;
        switch ((num2 = (uint) (num1 ^ 2112405832)) % 66U)
        {
          case 0:
            this.addCapture(num6, b, x, this.board[num6, x.Rank].Piece);
            num1 = (int) num2 * -1862246445 ^ -421531869;
            continue;
          case 1:
            num4 = x.Rank + num8;
            num1 = (int) num2 * 1750596282 ^ 283420852;
            continue;
          case 2:
            num1 = (int) num2 * 801809481 ^ -1499693948;
            continue;
          case 3:
            this.addMove(num3, num4, x);
            num1 = (int) num2 * -1740172523 ^ 1993830804;
            continue;
          case 4:
            flag4 = this.board.lastPassantPawn == this.board[num6, x.Rank].Piece;
            num1 = (int) num2 * -1849724644 ^ -107452638;
            continue;
          case 5:
            int num19;
            num1 = num19 = x.Rank != num7 ? 2056808645 : (num19 = 562536841);
            continue;
          case 6:
            if (this.board[num5, x.Rank].Piece.Kind == Pieces.Pawn)
            {
              num1 = (int) num2 * -1799976134 ^ 167376409;
              continue;
            }
            num9 = 0;
            goto label_61;
          case 7:
            this.addMove(num3, num4, x);
            num1 = (int) num2 * -1001765555 ^ 1563463591;
            continue;
          case 8:
            if (num4 < 0)
            {
              num10 = 0;
              break;
            }
            num1 = (int) num2 * 2021341950 ^ -1422679486;
            continue;
          case 9:
            flag7 = !square.IsEmpty;
            num1 = (int) num2 * 319986993 ^ -1930552814;
            continue;
          case 10:
            num11 = 6;
            goto label_22;
          case 11:
            num4 = x.Rank + 2 * num8;
            this.addMove(num3, num4, x);
            num1 = (int) num2 * -513024121 ^ -1631811742;
            continue;
          case 12:
            num5 = x.File - 1;
            num6 = x.File + 1;
            num1 = (int) num2 * 1691815297 ^ -473351747;
            continue;
          case 13:
            this.addMove(num3, num4, x);
            num1 = (int) num2 * 835076675 ^ 646825240;
            continue;
          case 14:
            if (num3 < 8)
            {
              num1 = (int) num2 * 653651267 ^ 1958222856;
              continue;
            }
            goto label_77;
          case 15:
            num1 = (int) num2 * 1368801182 ^ 1397932471;
            continue;
          case 16:
            if (x.Rank == 4)
            {
              num1 = 1220037940;
              continue;
            }
            num13 = 0;
            goto label_29;
          case 17:
            isEmpty = square.IsEmpty;
            num1 = (int) num2 * -2064584505 ^ -487490869;
            continue;
          case 18:
            num3 = x.File + 1;
            num4 = x.Rank + num8;
            num1 = 1307478112;
            continue;
          case 19:
            if (this.board[num6, x.Rank].Piece.Kind != Pieces.Pawn)
            {
              num14 = 0;
              goto label_36;
            }
            else
            {
              num1 = (int) num2 * 1482201506 ^ -1619421788;
              continue;
            }
          case 20:
            if (num4 >= 0)
            {
              num1 = (int) num2 * -1219335870 ^ 1471193896;
              continue;
            }
            goto label_77;
          case 21:
            num1 = 260004492;
            continue;
          case 22:
            num13 = x.Piece.Color == PieceColor.White ? 1 : 0;
            goto label_29;
          case 23:
            if (x.Piece.Color != PieceColor.White)
            {
              num1 = (int) num2 * -768202588 ^ -279589138;
              continue;
            }
            num15 = 1;
            goto label_69;
          case 24:
            num14 = this.board[num6, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_36;
          case 25:
            num1 = 1873902830;
            continue;
          case 26:
            square = this.board[num3, num4];
            num1 = (int) num2 * 572284455 ^ 2005897165;
            continue;
          case 27:
            num16 = x.Piece.Color == PieceColor.Black ? 1 : 0;
            goto label_56;
          case 28:
            num1 = 1148437112;
            continue;
          case 29:
            int num20 = this.board[num6, x.Rank].Piece == null ? -1170488036 : (num20 = -235054963);
            num1 = num20 ^ (int) num2 * 1354590418;
            continue;
          case 30:
            this.addCapture(num5, b, x, this.board[num5, x.Rank].Piece);
            num1 = (int) num2 * -1229835921 ^ -495146246;
            continue;
          case 31:
            num3 = x.File;
            num1 = (int) num2 * -1831872239 ^ 281952524;
            continue;
          case 32:
            goto label_3;
          case 33:
            num1 = (int) num2 * 460863709 ^ 873273159;
            continue;
          case 34:
            int num21 = flag1 ? 1944892451 : (num21 = 164749576);
            num1 = num21 ^ (int) num2 * 350018296;
            continue;
          case 35:
            num17 = 2;
            goto label_90;
          case 36:
            int num22 = !flag6 ? 394379144 : (num22 = 1637637157);
            num1 = num22 ^ (int) num2 * 500819;
            continue;
          case 37:
            flag5 = num5 >= 0;
            num1 = (int) num2 * -502887676 ^ -716432842;
            continue;
          case 38:
            if (x.Rank != 3)
            {
              num16 = 0;
              goto label_56;
            }
            else
            {
              num1 = (int) num2 * 1390057631 ^ 1746541757;
              continue;
            }
          case 39:
            square = this.board[num3, num4];
            num1 = (int) num2 * -837169510 ^ -1967658197;
            continue;
          case 40:
            num1 = 1393961605;
            continue;
          case 41:
            int num23 = !flag8 ? -864059297 : (num23 = -1286201529);
            num1 = num23 ^ (int) num2 * -1911871251;
            continue;
          case 42:
            flag2 = this.board.lastPassantPawn == this.board[num5, x.Rank].Piece;
            num1 = (int) num2 * -1187498593 ^ -772587681;
            continue;
          case 43:
            num18 = num4 < 8 ? 1 : 0;
            goto label_51;
          case 44:
            int num24 = !flag5 ? -1274669896 : (num24 = -1763261285);
            num1 = num24 ^ (int) num2 * 2035738471;
            continue;
          case 45:
            flag3 = this.board[num5, x.Rank].Piece != null;
            num1 = (int) num2 * 1997015368 ^ -1642046315;
            continue;
          case 46:
            int num25 = !flag9 ? -65558502 : (num25 = -1253848574);
            num1 = num25 ^ (int) num2 * 636226765;
            continue;
          case 47:
            square = this.board[num3, num4];
            flag1 = !square.IsEmpty;
            num1 = (int) num2 * -476185804 ^ -1176702840;
            continue;
          case 48:
            num12 = num4 < 8 ? 1 : 0;
            goto label_78;
          case 49:
            int num26 = !flag3 ? 1776205630 : (num26 = 658221880);
            num1 = num26 ^ (int) num2 * -1548990592;
            continue;
          case 50:
            flag6 = num6 < 8;
            num1 = 702458662;
            continue;
          case 51:
            num4 = x.Rank + num8;
            num1 = (int) num2 * 69798836 ^ -2047110241;
            continue;
          case 52:
            num1 = (int) num2 * 862035642 ^ -1471419097;
            continue;
          case 53:
            goto label_1;
          case 54:
            num10 = num4 < 8 ? 1 : 0;
            break;
          case 55:
            int num27 = !flag2 ? -1835128628 : (num27 = -760489274);
            num1 = num27 ^ (int) num2 * -1240201270;
            continue;
          case 56:
            int num28 = isEmpty ? 165384239 : (num28 = 545912173);
            num1 = num28 ^ (int) num2 * 1281660776;
            continue;
          case 57:
            int num29 = flag7 ? 1908426345 : (num29 = 2081099265);
            num1 = num29 ^ (int) num2 * -358246598;
            continue;
          case 58:
            if (num4 >= 0)
            {
              num1 = (int) num2 * -494663763 ^ 678328743;
              continue;
            }
            goto label_50;
          case 59:
            if (num3 >= 0)
            {
              num1 = (int) num2 * 275337644 ^ -381985050;
              continue;
            }
            goto label_50;
          case 60:
            int num30 = !flag4 ? 422071784 : (num30 = 778436084);
            num1 = num30 ^ (int) num2 * 1552758329;
            continue;
          case 61:
            num3 = 0;
            num4 = 0;
            if (x.Piece.Color == PieceColor.White)
            {
              num11 = 1;
              goto label_22;
            }
            else
            {
              num1 = (int) num2 * 357146903 ^ 1864689003;
              continue;
            }
          case 62:
            num15 = -1;
            goto label_69;
          case 63:
            num3 = x.File - 1;
            num1 = 1709455403;
            continue;
          case 64:
            num1 = (int) num2 * 1165443747 ^ 1544464646;
            continue;
          case 65:
            num9 = this.board[num5, x.Rank].Piece.Color != x.Piece.Color ? 1 : 0;
            goto label_61;
          default:
            goto label_100;
        }
        int num31;
        num1 = num31 = num10 == 0 ? 260004492 : (num31 = 1147090266);
        continue;
label_22:
        num7 = num11;
        num1 = 1596534707;
        continue;
label_29:
        bool flag10 = num13 != 0;
        num1 = 404254846;
        continue;
label_36:
        int num32;
        num1 = num32 = num14 != 0 ? 1670406988 : (num32 = 89474594);
        continue;
label_50:
        num18 = 0;
label_51:
        flag8 = num18 != 0;
        num1 = 4063005;
        continue;
label_56:
        bool flag11 = num16 != 0;
        if (!flag10)
        {
          num1 = 1390945395;
          continue;
        }
        num17 = 5;
        goto label_90;
label_61:
        flag9 = num9 != 0;
        num1 = 544539772;
        continue;
label_69:
        num8 = num15;
        num1 = 204785263;
        continue;
label_77:
        num12 = 0;
label_78:
        int num33;
        num1 = num33 = num12 != 0 ? 408648867 : (num33 = 1148437112);
        continue;
label_90:
        b = num17;
        int num34;
        num1 = num34 = !(flag10 | flag11) ? 1393961605 : (num34 = 1260636492);
      }
label_3:
      return;
label_100:;
    }

    private void handleQueen(Square x)
    {
label_1:
      int num1 = -937031325;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -501547690)) % 4U)
        {
          case 0:
            this.handleBishop(x);
            num1 = (int) num2 * 1994125823 ^ 2080835568;
            continue;
          case 1:
            this.handleRook(x);
            num1 = (int) num2 * -467498884 ^ -1024000342;
            continue;
          case 2:
            goto label_3;
          case 3:
            goto label_1;
          default:
            goto label_6;
        }
      }
label_3:
      return;
label_6:;
    }

    private void handleKing(Square x)
    {
label_1:
      int num1 = -4980037;
      bool canCastleQueenSide1;
      bool flag;
      bool canCastleKingSide;
      bool canCastleQueenSide2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2079234632)) % 26U)
        {
          case 0:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1012962512 ^ -409428875;
            continue;
          case 1:
            this.addMove(x.File + 1, x.Rank + 1, x);
            num1 = (int) num2 * -1653700809 ^ 230128346;
            continue;
          case 2:
            num1 = (int) num2 * 19474164 ^ -1360102816;
            continue;
          case 3:
            this.addMove(x.File - 1, x.Rank + 1, x);
            num1 = (int) num2 * 1468407302 ^ -1029168542;
            continue;
          case 4:
            num1 = -1440943419;
            continue;
          case 5:
            int num3 = !this.board.BlackCanCastleKingSide ? 2049602530 : (num3 = 768168853);
            num1 = num3 ^ (int) num2 * -897280651;
            continue;
          case 6:
            goto label_3;
          case 7:
            canCastleQueenSide1 = this.board.BlackCanCastleQueenSide;
            num1 = -1503387036;
            continue;
          case 8:
            this.addMove(x.File - 1, x.Rank - 1, x);
            num1 = (int) num2 * -525425580 ^ -1908714953;
            continue;
          case 9:
            int num4;
            num1 = num4 = x.Piece.Color == PieceColor.Black ? -1681774033 : (num4 = -695626664);
            continue;
          case 10:
            this.addMove(x.File, x.Rank + 1, x);
            this.addMove(x.File, x.Rank - 1, x);
            num1 = (int) num2 * 1597045532 ^ -2080749059;
            continue;
          case 11:
            int num5 = flag ? 514198516 : (num5 = 63072939);
            num1 = num5 ^ (int) num2 * -766023118;
            continue;
          case 12:
            int num6 = canCastleQueenSide2 ? 947947066 : (num6 = 909385366);
            num1 = num6 ^ (int) num2 * -947962967;
            continue;
          case 13:
            canCastleQueenSide2 = this.board.WhiteCanCastleQueenSide;
            num1 = -1585196266;
            continue;
          case 14:
            canCastleKingSide = this.board.WhiteCanCastleKingSide;
            num1 = (int) num2 * -1575144418 ^ 765364924;
            continue;
          case 15:
            this.handleSmallCastling(x);
            num1 = (int) num2 * -1616091026 ^ -967287724;
            continue;
          case 16:
            num1 = (int) num2 * 135863525 ^ -440248411;
            continue;
          case 17:
            flag = x.Piece.Color == PieceColor.White;
            num1 = (int) num2 * 1252589505 ^ -619206294;
            continue;
          case 18:
            this.handleBigCastling(x);
            num1 = (int) num2 * -1451655529 ^ -1368079442;
            continue;
          case 19:
            num1 = -695626664;
            continue;
          case 20:
            int num7 = canCastleKingSide ? 1337215787 : (num7 = 859518747);
            num1 = num7 ^ (int) num2 * -1610935180;
            continue;
          case 21:
            goto label_1;
          case 22:
            int num8 = !canCastleQueenSide1 ? -967828075 : (num8 = -745442088);
            num1 = num8 ^ (int) num2 * 538947400;
            continue;
          case 23:
            this.addMove(x.File + 1, x.Rank, x);
            this.addMove(x.File - 1, x.Rank, x);
            num1 = (int) num2 * -40020815 ^ 134776925;
            continue;
          case 24:
            this.handleSmallCastling(x);
            num1 = (int) num2 * 525452539 ^ 1860054267;
            continue;
          case 25:
            this.addMove(x.File + 1, x.Rank - 1, x);
            num1 = (int) num2 * -104265754 ^ 1468069047;
            continue;
          default:
            goto label_28;
        }
      }
label_3:
      return;
label_28:;
    }

    private void handleBigCastling(Square x)
    {
      Square square1 = this.board[x.File - 1, x.Rank];
      Square square2 = this.board[x.File - 2, x.Rank];
label_1:
      int num1 = -1790258118;
      while (true)
      {
        uint num2;
        Square square3;
        int num3;
        switch ((num2 = (uint) (num1 ^ -1471452279)) % 7U)
        {
          case 0:
            if (square1.IsEmpty)
            {
              num1 = (int) num2 * -1009804380 ^ 480529170;
              continue;
            }
            break;
          case 1:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * -48488006 ^ 1584034167;
              continue;
            }
            break;
          case 2:
            goto label_3;
          case 3:
            this.addMove(x.File - 2, x.Rank, x);
            num1 = (int) num2 * 1082296193 ^ 1259708559;
            continue;
          case 4:
            num3 = square3.IsEmpty ? 1 : 0;
            goto label_11;
          case 5:
            square3 = this.board[x.File - 3, x.Rank];
            num1 = (int) num2 * -611367210 ^ 2002431724;
            continue;
          case 6:
            goto label_1;
          default:
            goto label_13;
        }
        num3 = 0;
label_11:
        int num4;
        num1 = num4 = num3 == 0 ? -1811383576 : (num4 = -126648722);
      }
label_3:
      return;
label_13:;
    }

    private void handleSmallCastling(Square x)
    {
label_1:
      int num1 = 771631749;
      while (true)
      {
        uint num2;
        Square square1;
        Square square2;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ 40256508)) % 8U)
        {
          case 0:
            int num4 = !flag ? -1092904760 : (num4 = -1059551215);
            num1 = num4 ^ (int) num2 * -1161888579;
            continue;
          case 1:
            square2 = this.board[x.File + 1, x.Rank];
            num1 = (int) num2 * 682259995 ^ 310663341;
            continue;
          case 2:
            square1 = this.board[x.File + 2, x.Rank];
            num1 = (int) num2 * -1381443956 ^ -1041822862;
            continue;
          case 3:
            goto label_1;
          case 4:
            goto label_3;
          case 5:
            this.addMove(x.File + 2, x.Rank, x);
            num1 = (int) num2 * -111350628 ^ -2103510980;
            continue;
          case 6:
            if (square2.IsEmpty)
            {
              num1 = (int) num2 * 1846735882 ^ -1198786521;
              continue;
            }
            num3 = 0;
            break;
          case 7:
            num3 = square1.IsEmpty ? 1 : 0;
            break;
          default:
            goto label_13;
        }
        flag = num3 != 0;
        num1 = 1966266980;
      }
label_3:
      return;
label_13:;
    }

    private void handleRook(Square x)
    {
label_1:
      int num1 = -568588814;
      int num2;
      bool flag1;
      int num3;
      int a;
      bool flag2;
      int num4;
      int num5;
      bool flag3;
      bool flag4;
      bool flag5;
      bool flag6;
      bool flag7;
      int b1;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ -1410674542)) % 36U)
        {
          case 0:
            ++num5;
            num1 = -863822136;
            continue;
          case 1:
            goto label_3;
          case 2:
            num1 = (int) num6 * -365960419 ^ 566096601;
            continue;
          case 3:
            int num7 = flag3 ? -570761356 : (num7 = -1547557644);
            num1 = num7 ^ (int) num6 * 1795118565;
            continue;
          case 4:
            b1 = x.Rank - num5;
            num1 = -332272522;
            continue;
          case 5:
            num1 = -1657674799;
            continue;
          case 6:
            flag4 = num5 < 8;
            num1 = -1596658880;
            continue;
          case 7:
            num1 = (int) num6 * -287987980 ^ -383929491;
            continue;
          case 8:
            ++num3;
            num1 = -1018188817;
            continue;
          case 9:
            num1 = (int) num6 * 1190980448 ^ -1460273624;
            continue;
          case 10:
            int num8 = flag6 ? 1004076609 : (num8 = 2047662726);
            num1 = num8 ^ (int) num6 * -847439644;
            continue;
          case 11:
            int num9 = flag1 ? 894486742 : (num9 = 230078163);
            num1 = num9 ^ (int) num6 * 1380565101;
            continue;
          case 12:
            flag7 = num2 < 8;
            num1 = -1714106550;
            continue;
          case 13:
            flag2 = num3 < 8;
            num1 = -1662380199;
            continue;
          case 14:
            num4 = 1;
            num1 = -1535366497;
            continue;
          case 15:
            int b2 = x.Rank + num2;
            flag1 = this.addMove(x.File, b2, x);
            num1 = -480015675;
            continue;
          case 16:
            a = x.File + num3;
            num1 = (int) num6 * -1078122203 ^ -1694460008;
            continue;
          case 17:
            flag3 = num4 < 8;
            num1 = -82493103;
            continue;
          case 18:
            int num10 = flag4 ? -823486936 : (num10 = -427609969);
            num1 = num10 ^ (int) num6 * -609046729;
            continue;
          case 19:
            int num11 = !flag2 ? -931921493 : (num11 = -1470905436);
            num1 = num11 ^ (int) num6 * 2021105145;
            continue;
          case 20:
            flag6 = this.addMove(x.File, b1, x);
            num1 = (int) num6 * 1661950434 ^ -472548988;
            continue;
          case 21:
            num1 = -106358686;
            continue;
          case 22:
            ++num2;
            num1 = -1003664946;
            continue;
          case 23:
            num3 = 1;
            num1 = -572967247;
            continue;
          case 24:
            num2 = 1;
            num1 = (int) num6 * -1616614472 ^ -318073773;
            continue;
          case 25:
            goto label_1;
          case 26:
            ++num4;
            num1 = -1535366497;
            continue;
          case 27:
            num1 = (int) num6 * 2146059321 ^ -1494361523;
            continue;
          case 28:
            num5 = 1;
            num1 = -1484539305;
            continue;
          case 29:
            int num12 = !flag5 ? 492649697 : (num12 = 1294725815);
            num1 = num12 ^ (int) num6 * 185777495;
            continue;
          case 30:
            num1 = (int) num6 * -975951269 ^ 23639846;
            continue;
          case 31:
            int num13 = !this.addMove(x.File - num4, x.Rank, x) ? 860669000 : (num13 = 463077980);
            num1 = num13 ^ (int) num6 * 238116044;
            continue;
          case 32:
            int num14 = !flag7 ? -1565786846 : (num14 = -2142506707);
            num1 = num14 ^ (int) num6 * -1522796979;
            continue;
          case 33:
            num1 = (int) num6 * -1405302169 ^ -1300181143;
            continue;
          case 34:
            flag5 = this.addMove(a, x.Rank, x);
            num1 = (int) num6 * 559851759 ^ 120795437;
            continue;
          case 35:
            num1 = (int) num6 * -1477866243 ^ -1118879880;
            continue;
          default:
            goto label_38;
        }
      }
label_3:
      return;
label_38:;
    }

    private void handleBishop(Square x)
    {
label_1:
      int num1 = 1314798005;
      int num2;
      bool flag1;
      int num3;
      int a1;
      int num4;
      bool flag2;
      int a2;
      int b1;
      int num5;
      bool flag3;
      bool flag4;
      int a3;
      int b2;
      int a4;
      while (true)
      {
        uint num6;
        switch ((num6 = (uint) (num1 ^ 537439344)) % 38U)
        {
          case 0:
            goto label_3;
          case 1:
            flag2 = num3 < 8;
            num1 = 846843328;
            continue;
          case 2:
            a2 = x.File - num2;
            b1 = x.Rank + num2;
            num1 = 1315472982;
            continue;
          case 3:
            num1 = (int) num6 * -390818624 ^ -740243384;
            continue;
          case 4:
            num1 = (int) num6 * 233626976 ^ -1465415676;
            continue;
          case 5:
            num1 = 1940937086;
            continue;
          case 6:
            goto label_1;
          case 7:
            int num7 = flag4 ? -2023971617 : (num7 = -658256300);
            num1 = num7 ^ (int) num6 * -510996967;
            continue;
          case 8:
            flag4 = this.addMove(a1, b2, x);
            num1 = (int) num6 * 109837419 ^ 2107458813;
            continue;
          case 9:
            num2 = 1;
            num1 = 1467997342;
            continue;
          case 10:
            a1 = x.File + num3;
            num1 = (int) num6 * -1225201848 ^ 1656119908;
            continue;
          case 11:
            ++num3;
            num1 = (int) num6 * 393991361 ^ -1325839832;
            continue;
          case 12:
            int num8 = !flag1 ? -1817852544 : (num8 = -1980646104);
            num1 = num8 ^ (int) num6 * 1308019184;
            continue;
          case 13:
            num1 = 627659075;
            continue;
          case 14:
            num1 = (int) num6 * -1929337047 ^ 43341469;
            continue;
          case 15:
            num1 = (int) num6 * 879046460 ^ 1348069596;
            continue;
          case 16:
            num4 = 1;
            num1 = 281027629;
            continue;
          case 17:
            a4 = x.File + num5;
            num1 = (int) num6 * -477740453 ^ -652959493;
            continue;
          case 18:
            b2 = x.Rank - num3;
            num1 = (int) num6 * 334543539 ^ 2002519076;
            continue;
          case 19:
            num1 = 1711879890;
            continue;
          case 20:
            int b3 = x.Rank + num5;
            flag3 = this.addMove(a4, b3, x);
            num1 = (int) num6 * -784816123 ^ -1818177980;
            continue;
          case 21:
            num5 = 1;
            num1 = (int) num6 * 1109491669 ^ -2047754;
            continue;
          case 22:
            int num9 = !flag3 ? 235377134 : (num9 = 1624634625);
            num1 = num9 ^ (int) num6 * -463083564;
            continue;
          case 23:
            a3 = x.File - num4;
            num1 = 1572170628;
            continue;
          case 24:
            num3 = 1;
            num1 = 1618725764;
            continue;
          case 25:
            num1 = 250015199;
            continue;
          case 26:
            ++num5;
            num1 = 626824991;
            continue;
          case 27:
            int num10;
            num1 = num10 = num4 >= 8 ? 177712217 : (num10 = 414850729);
            continue;
          case 28:
            num1 = (int) num6 * 371196402 ^ 534774383;
            continue;
          case 29:
            ++num2;
            num1 = 542707331;
            continue;
          case 30:
            int num11 = flag2 ? -40952657 : (num11 = -1621412444);
            num1 = num11 ^ (int) num6 * 1424868194;
            continue;
          case 31:
            num1 = (int) num6 * 1192626280 ^ -2006074203;
            continue;
          case 32:
            int num12 = !this.addMove(a2, b1, x) ? -1785860147 : (num12 = -1910278925);
            num1 = num12 ^ (int) num6 * 1077132187;
            continue;
          case 33:
            int num13;
            num1 = num13 = num5 >= 8 ? 516076168 : (num13 = 677960231);
            continue;
          case 34:
            ++num4;
            num1 = (int) num6 * -71749821 ^ -1084865081;
            continue;
          case 35:
            flag1 = num2 < 8;
            num1 = 513932298;
            continue;
          case 36:
            int b4 = x.Rank - num4;
            int num14 = !this.addMove(a3, b4, x) ? 1223610513 : (num14 = 1804055839);
            num1 = num14 ^ (int) num6 * -1186075618;
            continue;
          case 37:
            num1 = (int) num6 * -604412065 ^ 144882160;
            continue;
          default:
            goto label_40;
        }
      }
label_3:
      return;
label_40:;
    }

    private void handleKnight(Square x)
    {
label_1:
      int num1 = -1168610100;
      while (true)
      {
        uint num2;
        ChessPiece piece;
        int[] numArray1;
        int[] numArray2;
        int index;
        int File;
        int Rank;
        Square sq;
        bool flag;
        int num3;
        switch ((num2 = (uint) (num1 ^ -492054391)) % 24U)
        {
          case 0:
            flag = index < 8;
            num1 = -1256330742;
            continue;
          case 1:
            num1 = (int) num2 * 1138424680 ^ -1567231611;
            continue;
          case 2:
            num1 = (int) num2 * -1484988777 ^ 1736726127;
            continue;
          case 3:
            int num4 = !flag ? -694339867 : (num4 = -688995791);
            num1 = num4 ^ (int) num2 * -1418252387;
            continue;
          case 4:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Capture));
            num1 = (int) num2 * 684181005 ^ 980961377;
            continue;
          case 5:
            num3 = Rank > 7 ? 1 : 0;
            goto label_11;
          case 6:
            sq = this.board[File, Rank];
            num1 = -74530984;
            continue;
          case 7:
            num1 = -2049677477;
            continue;
          case 8:
            int[] numArray3 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D‌​‭‬⁮⁭⁫⁪​⁭‭‪⁬‪‎⁮‫‍‍‎⁭⁮‮‍‪​‏⁬‎‭‌‮‮⁫⁬‭‮⁯⁬‮((Array) numArray3, __fieldref (\u003CPrivateImplementationDetails\u003E.\u00308E3102C9F450967BADA9E115E24B5AAA035978F425E7DFC17E7F18ED0AE9659));
            numArray1 = numArray3;
            int[] numArray4 = new int[8];
            // ISSUE: field reference
            MoveFinder.\u206D‌​‭‬⁮⁭⁫⁪​⁭‭‪⁬‪‎⁮‫‍‍‎⁭⁮‮‍‪​‏⁬‎‭‌‮‮⁫⁬‭‮⁯⁬‮((Array) numArray4, __fieldref (\u003CPrivateImplementationDetails\u003E.\u0035CED5D200AE41F70ABC6A1ADBFEA2A6329B454E3DDE2E39C795A55B0DB4DAD80));
            numArray2 = numArray4;
            index = 0;
            num1 = (int) num2 * -2140742617 ^ -750702189;
            continue;
          case 9:
            if (File <= 7)
            {
              num1 = (int) num2 * -660723192 ^ -1443550092;
              continue;
            }
            break;
          case 10:
            File = x.File + numArray1[index];
            Rank = x.Rank + numArray2[index];
            num1 = (int) num2 * 2143267260 ^ 924385534;
            continue;
          case 11:
            goto label_3;
          case 12:
            num1 = -439965295;
            continue;
          case 13:
            piece = x.Piece;
            num1 = (int) num2 * 201173098 ^ 806885419;
            continue;
          case 14:
            goto label_1;
          case 15:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * 167651845 ^ -356115192;
            continue;
          case 16:
            ++index;
            num1 = -83713079;
            continue;
          case 17:
            int num5 = !sq.IsEmpty ? -623611801 : (num5 = -1385568197);
            num1 = num5 ^ (int) num2 * -1742925131;
            continue;
          case 18:
            num1 = (int) num2 * 2055652426 ^ -344367324;
            continue;
          case 19:
            int num6;
            num1 = num6 = sq.Piece.Color != x.Piece.Color ? -1702097763 : (num6 = -167934803);
            continue;
          case 20:
            num1 = (int) num2 * -1357702011 ^ -1062490319;
            continue;
          case 21:
            num1 = (int) num2 * -2036683095 ^ 481572188;
            continue;
          case 22:
            if (Rank >= 0)
            {
              num1 = (int) num2 * 1210984393 ^ 1026442622;
              continue;
            }
            break;
          case 23:
            if (File >= 0)
            {
              num1 = (int) num2 * -146223241 ^ 1493739742;
              continue;
            }
            break;
          default:
            goto label_31;
        }
        num3 = 1;
label_11:
        int num7;
        num1 = num7 = num3 == 0 ? -525656473 : (num7 = -852058356);
      }
label_3:
      return;
label_31:;
    }

    private void addCapture(int a, int b, Square x, ChessPiece pawn)
    {
label_1:
      int num1 = -134941062;
      ChessPiece piece;
      Square sq;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1262496973)) % 7U)
        {
          case 0:
            num1 = (int) num2 * 408533873 ^ 1604442615;
            continue;
          case 1:
            Board.lastValidPassantMove = new PossibleMoves(piece, sq, UserAction.Capture);
            num1 = (int) num2 * -1871098737 ^ 2141847657;
            continue;
          case 2:
            sq = this.board[a, b];
            num1 = (int) num2 * -591688039 ^ 975267247;
            continue;
          case 3:
            this.MoveList[piece.Id].Add(Board.lastValidPassantMove);
            num1 = (int) num2 * 1765225593 ^ 1843585556;
            continue;
          case 4:
            piece = x.Piece;
            num1 = (int) num2 * 1436528837 ^ 1977032200;
            continue;
          case 5:
            goto label_1;
          case 6:
            goto label_3;
          default:
            goto label_9;
        }
      }
label_3:
      return;
label_9:;
    }

    private bool addMove(int a, int b, Square x)
    {
label_1:
      int num1 = -572579345;
      bool flag1;
      while (true)
      {
        uint num2;
        Square sq;
        bool flag2;
        ChessPiece piece;
        bool isEmpty;
        UserAction kind;
        bool flag3;
        bool flag4;
        int num3;
        int num4;
        switch ((num2 = (uint) (num1 ^ -130828008)) % 30U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -41779892 ^ 748690762;
            continue;
          case 2:
            int num5 = flag3 ? 629422396 : (num5 = 1366624354);
            num1 = num5 ^ (int) num2 * 204267765;
            continue;
          case 3:
            num1 = (int) num2 * -1067760321 ^ -2099094185;
            continue;
          case 4:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, kind));
            num1 = -369157629;
            continue;
          case 5:
            num1 = (int) num2 * 631361248 ^ 536458830;
            continue;
          case 6:
            if (b >= 0)
            {
              num1 = (int) num2 * 1400679512 ^ -702763767;
              continue;
            }
            goto label_29;
          case 7:
            num3 = b > 7 ? 1 : 0;
            goto label_30;
          case 8:
            if (x.Piece.Kind != Pieces.King)
            {
              num1 = (int) num2 * -968749472 ^ -1114867803;
              continue;
            }
            num4 = 0;
            break;
          case 9:
            num4 = x.Piece.Kind != Pieces.Pawn ? 1 : 0;
            break;
          case 10:
            kind = UserAction.Capture;
            flag3 = sq.Piece.Kind == Pieces.King;
            num1 = (int) num2 * 1153954463 ^ -1172097548;
            continue;
          case 11:
            num1 = (int) num2 * -717552365 ^ 1787861318;
            continue;
          case 12:
            int num6 = !flag4 ? 1113218427 : (num6 = 1669979835);
            num1 = num6 ^ (int) num2 * 1693091178;
            continue;
          case 13:
            flag1 = true;
            num1 = (int) num2 * -46845885 ^ 1461793752;
            continue;
          case 14:
            num1 = (int) num2 * 1457147031 ^ -224579390;
            continue;
          case 15:
            piece = x.Piece;
            sq = this.board[a, b];
            isEmpty = sq.IsEmpty;
            num1 = -1996476498;
            continue;
          case 16:
            int num7 = isEmpty ? 138339999 : (num7 = 467752258);
            num1 = num7 ^ (int) num2 * -1379959396;
            continue;
          case 17:
            flag1 = true;
            num1 = -1443162130;
            continue;
          case 18:
            num1 = (int) num2 * -2001539891 ^ 168175468;
            continue;
          case 19:
            if (a <= 7)
            {
              num1 = (int) num2 * 1996589667 ^ 585175063;
              continue;
            }
            goto label_29;
          case 20:
            flag1 = false;
            num1 = -489440125;
            continue;
          case 21:
            flag1 = true;
            num1 = (int) num2 * 1200234982 ^ 1714622160;
            continue;
          case 22:
            int num8 = flag2 ? 245762091 : (num8 = 563503519);
            num1 = num8 ^ (int) num2 * 1455625637;
            continue;
          case 23:
            this.KingColorOnCheck = sq.Piece.Color;
            this.IsOnCheck = true;
            num1 = (int) num2 * -1639456235 ^ 784726696;
            continue;
          case 24:
            num1 = (int) num2 * 906405263 ^ -1914416370;
            continue;
          case 25:
            num1 = -801314594;
            continue;
          case 27:
            if (a >= 0)
            {
              num1 = (int) num2 * 639458011 ^ 189815318;
              continue;
            }
            goto label_29;
          case 28:
            int num9;
            num1 = num9 = sq.Piece.Color == x.Piece.Color ? -711328639 : (num9 = -1405554935);
            continue;
          case 29:
            this.MoveList[piece.Id].Add(new PossibleMoves(piece, sq, UserAction.Move));
            num1 = (int) num2 * -413708241 ^ -1058704085;
            continue;
          default:
            goto label_39;
        }
        flag4 = num4 != 0;
        num1 = -1630694088;
        continue;
label_29:
        num3 = 1;
label_30:
        flag2 = num3 != 0;
        num1 = -859036478;
      }
label_39:
      return flag1;
    }

    static void \u206D‌​‭‬⁮⁭⁫⁪​⁭‭‪⁬‪‎⁮‫‍‍‎⁭⁮‮‍‪​‏⁬‎‭‌‮‮⁫⁬‭‮⁯⁬‮([In] Array obj0, [In] RuntimeFieldHandle obj1) => RuntimeHelpers.InitializeArray(obj0, obj1);
  }
}
