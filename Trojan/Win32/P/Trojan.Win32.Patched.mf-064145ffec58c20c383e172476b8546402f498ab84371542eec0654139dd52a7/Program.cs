// Decompiled with JetBrains decompiler
// Type: eLock.Serv.Service.Program
// Assembly: eLockServ, Version=2.5.4007.0, Culture=neutral, PublicKeyToken=null
// MVID: B5CD21BD-8179-4389-9DFE-3B9352BA45C0
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Trojan.Win32.Patched.mf-064145ffec58c20c383e172476b8546402f498ab84371542eec0654139dd52a7.exe

using System;
using System.Runtime.InteropServices;
using System.ServiceProcess;
using System.Windows.Forms;

namespace eLock.Serv.Service
{
  public class Program
  {
    public const uint STANDARD_RIGHTS_REQUIRED = 983040;
    public const uint SC_MANAGER_CONNECT = 1;
    public const uint SC_MANAGER_CREATE_SERVICE = 2;
    public const uint SC_MANAGER_ENUMERATE_SERVICE = 4;
    public const uint SC_MANAGER_LOCK = 8;
    public const uint SC_MANAGER_QUERY_LOCK_STATUS = 16;
    public const uint SC_MANAGER_MODIFY_BOOT_CONFIG = 32;
    public const uint SC_MANAGER_ALL_ACCESS = 983103;
    public const uint SERVICE_QUERY_CONFIG = 1;
    public const uint SERVICE_CHANGE_CONFIG = 2;
    public const uint SERVICE_QUERY_STATUS = 4;
    public const uint SERVICE_ENUMERATE_DEPENDENTS = 8;
    public const uint SERVICE_START = 16;
    public const uint SERVICE_STOP = 32;
    public const uint SERVICE_PAUSE_CONTINUE = 64;
    public const uint SERVICE_INTERROGATE = 128;
    public const uint SERVICE_USER_DEFINED_CONTROL = 256;
    public const uint SERVICE_ALL_ACCESS = 983549;
    public const uint GENERIC_ALL = 268435456;
    public const uint GENERIC_EXECUTE = 536870912;
    public const uint GENERIC_WRITE = 1073741824;
    public const uint GENERIC_READ = 2147483648;
    public const uint ACCESS_SYSTEM_SECURITY = 16777216;
    public const uint DELETE = 65536;
    public const uint READ_CONTROL = 131072;
    public const uint WRITE_DAC = 262144;
    public const uint WRITE_OWNER = 524288;
    public const uint SERVICE_KERNEL_DRIVER = 1;
    public const uint SERVICE_FILE_SYSTEM_DRIVER = 2;
    public const uint SERVICE_ADAPTER = 4;
    public const uint SERVICE_RECOGNIZER_DRIVER = 8;
    public const uint SERVICE_DRIVER = 11;
    public const uint SERVICE_WIN32_OWN_PROCESS = 16;
    public const uint SERVICE_WIN32_SHARE_PROCESS = 32;
    public const uint SERVICE_WIN32 = 48;
    public const uint SERVICE_INTERACTIVE_PROCESS = 256;
    public const uint SERVICE_TYPE_ALL = 319;
    public const uint SERVICE_BOOT_START = 0;
    public const uint SERVICE_SYSTEM_START = 1;
    public const uint SERVICE_AUTO_START = 2;
    public const uint SERVICE_DEMAND_START = 3;
    public const uint SERVICE_DISABLED = 4;
    public const uint SERVICE_ERROR_IGNORE = 0;
    public const uint SERVICE_ERROR_NORMAL = 1;
    public const uint SERVICE_ERROR_SEVERE = 2;
    public const uint SERVICE_ERROR_CRITICAL = 3;
    public const uint SERVICE_CONTROL_STOP = 1;
    public const uint SERVICE_CONTROL_PAUSE = 2;
    public const uint SERVICE_CONTROL_CONTINUE = 3;
    public const uint SERVICE_CONTROL_INTERROGATE = 4;
    public const uint SERVICE_CONTROL_SHUTDOWN = 5;
    public const uint SERVICE_CONTROL_PARAMCHANGE = 6;
    public const uint SERVICE_CONTROL_NETBINDADD = 7;
    public const uint SERVICE_CONTROL_NETBINDREMOVE = 8;
    public const uint SERVICE_CONTROL_NETBINDENABLE = 9;
    public const uint SERVICE_CONTROL_NETBINDDISABLE = 10;
    private static string serviceName = "eLockServ";
    private static string displayName = "Acer eLock Service";
    private static string dependency = "";
    private static string exeName = "eLockServ.exe";

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr OpenSCManager(
      string lpMachineName,
      string lpDatabaseName,
      uint dwDesiredAccess);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool CloseServiceHandle(IntPtr hSCObject);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr OpenService(
      IntPtr hSCManager,
      string lpServiceName,
      uint dwDesiredAccess);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern IntPtr CreateService(
      IntPtr hSCManager,
      string lpServiceName,
      string lpDisplayName,
      uint dwDesiredAccess,
      uint dwSerivceType,
      uint dwStartType,
      uint dwErrorControl,
      string lpBinaryPathName,
      string lpLoadOrderGroup,
      int lpdwTagId,
      char[] lpDependencies,
      string lpServiceStartName,
      string lpPassword);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int DeleteService(IntPtr hService);

    [DllImport("advapi32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern bool StartService(
      IntPtr hService,
      uint dwNumServiceArgs,
      string lpServiceArgVectors);

    public static void InstallService()
    {
      IntPtr num = IntPtr.Zero;
      try
      {
        num = Program.OpenSCManager((string) null, (string) null, 2U);
        if (num.ToInt32() > 0)
        {
          char[] charArray = Program.dependency.ToCharArray();
          for (int index = 0; index < charArray.Length; ++index)
          {
            if (charArray[index] == ',')
              charArray[index] = char.MinValue;
          }
          Program.CreateService(num, Program.serviceName, Program.displayName, 983549U, 16U, 2U, 1U, Application.StartupPath + "\\" + Program.exeName, (string) null, 0, charArray, (string) null, string.Empty);
        }
      }
      catch
      {
        goto label_10;
      }
label_10:
      if (num.Equals((object) IntPtr.Zero))
        return;
      Program.CloseServiceHandle(num);
    }

    public static void UninstallService()
    {
      IntPtr num = IntPtr.Zero;
      try
      {
        bool flag = false;
        ServiceController serviceController = new ServiceController(Program.serviceName);
        if (serviceController != null)
        {
          if (serviceController.Status.Equals((object) ServiceControllerStatus.Stopped))
            flag = true;
          else if (serviceController.Status.Equals((object) ServiceControllerStatus.Paused))
          {
            if (serviceController.CanPauseAndContinue && serviceController.CanStop)
            {
              serviceController.Continue();
              serviceController.Stop();
              flag = true;
            }
          }
          else if (serviceController.CanStop && serviceController.Status.Equals((object) ServiceControllerStatus.Running))
          {
            serviceController.Stop();
            flag = true;
          }
          serviceController.Close();
          serviceController.Dispose();
        }
        if (flag)
        {
          num = Program.OpenSCManager((string) null, (string) null, 1073741824U);
          if (num.ToInt32() > 0)
          {
            IntPtr hService = Program.OpenService(num, Program.serviceName, 65536U);
            if (hService.ToInt32() > 0)
            {
              Program.DeleteService(hService);
              Program.CloseServiceHandle(num);
              return;
            }
          }
        }
        else
          goto label_17;
      }
      catch
      {
        goto label_17;
      }
label_17:
      if (num.Equals((object) IntPtr.Zero))
        return;
      Program.CloseServiceHandle(num);
    }

    private static void Main(string[] args)
    {
      if (args.Length == 1)
      {
        if (args[0].Equals("/i"))
        {
          Program.InstallService();
        }
        else
        {
          if (!args[0].Equals("/u"))
            return;
          Program.UninstallService();
        }
      }
      else
        ServiceBase.Run(new ServiceBase[1]
        {
          (ServiceBase) new eLock.Serv.Service.Service()
        });
    }
  }
}
