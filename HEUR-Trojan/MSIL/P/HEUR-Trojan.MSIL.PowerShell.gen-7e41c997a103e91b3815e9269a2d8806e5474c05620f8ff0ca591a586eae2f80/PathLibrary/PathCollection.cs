// Decompiled with JetBrains decompiler
// Type: PathLibrary.PathCollection
// Assembly: LeaseMana, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 529A6AA6-AEB5-47F3-B86B-C5E3C5F9FA62
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan.MSIL.PowerShell.gen-7e41c997a103e91b3815e9269a2d8806e5474c05620f8ff0ca591a586eae2f80.exe

using System.Collections.Generic;
using System.Linq;
using System.Xml.Linq;

namespace PathLibrary
{
  public class PathCollection
  {
    private XElement root = (XElement) null;
    private PathCounter pathCounter;

    public PathCounter PathCounter => this.pathCounter;

    public PathCollection(XElement root)
    {
      this.root = root;
      this.pathCounter = new PathCounter();
      this.AddPathToCounter(this.root, "/" + this.root.Name?.ToString());
      this.FindByRecursion(this.root, "/" + this.root.Name?.ToString());
    }

    private void FindByRecursion(XElement element, string xmlPath)
    {
      IEnumerable<XElement> source = element.Elements();
      if (source.Count<XElement>() == 0)
        return;
      foreach (XElement xelement in source)
      {
        string str = xmlPath + "/" + xelement.Name?.ToString();
        this.AddPathToCounter(xelement, str);
        this.FindByRecursion(xelement, str);
      }
    }

    private void AddPathToCounter(XElement xElement, string pathToAdd)
    {
      string str1 = "[";
      string str2 = "[";
      foreach (XAttribute attribute in xElement.Attributes())
      {
        str1 = str1 + attribute.Name?.ToString() + ";";
        str2 = str2 + attribute.Name?.ToString() + "=" + attribute.Value + ";";
      }
      this.pathCounter.Add(pathToAdd);
      if (str1 != "]")
        this.pathCounter.Add(pathToAdd + str1);
      if (!(str2 != "]"))
        return;
      this.pathCounter.Add(pathToAdd + str2);
    }
  }
}
