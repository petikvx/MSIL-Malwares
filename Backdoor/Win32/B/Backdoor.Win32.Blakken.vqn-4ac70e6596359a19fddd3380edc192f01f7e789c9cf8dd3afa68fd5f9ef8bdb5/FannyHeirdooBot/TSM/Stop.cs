// Decompiled with JetBrains decompiler
// Type: FannyHeirdooBot.TSM.Stop
// Assembly: IDynamicMessageS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 27E16815-1EE5-4D7C-AD78-EB45F6CA3CA3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.05\Backdoor.Win32.Blakken.vqn-4ac70e6596359a19fddd3380edc192f01f7e789c9cf8dd3afa68fd5f9ef8bdb5.exe

using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace FannyHeirdooBot.TSM
{
  public class Stop
  {
    private Stop _Next;

    public Stop(City city) => this.City = city;

    public Stop Next
    {
      get
      {
label_1:
        int num1 = -995681018;
        Stop next;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ -1726968069)) % 3U)
          {
            case 1:
              next = this._Next;
              num1 = (int) num2 * 1709634377 ^ 1148413916;
              continue;
            case 2:
              goto label_1;
            default:
              goto label_4;
          }
        }
label_4:
        return next;
      }
      set
      {
label_1:
        int num1 = 438258902;
        while (true)
        {
          uint num2;
          bool flag1;
          bool flag2;
          int num3;
          switch ((num2 = (uint) (num1 ^ 1863806385)) % 28U)
          {
            case 0:
              num1 = (int) num2 * -741372907 ^ 155736088;
              continue;
            case 1:
              num1 = (int) num2 * 998163927 ^ 1734324646;
              continue;
            case 2:
              num1 = (int) num2 * -1621561320 ^ 615582765;
              continue;
            case 3:
              num3 = this._Next.Prior == this ? 1 : 0;
              break;
            case 4:
              goto label_3;
            case 5:
              int num4;
              num1 = num4 = this.Prior == null ? 1238265217 : (num4 = 1966844996);
              continue;
            case 6:
              num1 = (int) num2 * -248589425 ^ -1188620987;
              continue;
            case 7:
              num1 = (int) num2 * -1429996874 ^ -1399322508;
              continue;
            case 8:
              this._Next = value;
              num1 = 678691918;
              continue;
            case 9:
              this._Next.Prior = (Stop) null;
              num1 = (int) num2 * -964321942 ^ 1010120692;
              continue;
            case 10:
              if (this._Next == null)
              {
                num3 = 0;
                break;
              }
              num1 = 1803216402;
              continue;
            case 11:
              flag1 = this._Next == value;
              num1 = (int) num2 * -1518352902 ^ -374692371;
              continue;
            case 12:
              int num5 = flag2 ? 1488625798 : (num5 = 845441253);
              num1 = num5 ^ (int) num2 * 1740333784;
              continue;
            case 13:
              goto label_1;
            case 14:
              num1 = (int) num2 * -2046269317 ^ -1812663162;
              continue;
            case 15:
              num1 = (int) num2 * -1381669728 ^ -969861690;
              continue;
            case 16:
              num1 = 1019045541;
              continue;
            case 17:
              this.PriorDistance = Tour.Distance(this.Prior, this);
              num1 = (int) num2 * -1740801370 ^ -1152055575;
              continue;
            case 18:
              num1 = (int) num2 * -391054327 ^ 1143497831;
              continue;
            case 19:
              value.Prior = this;
              num1 = (int) num2 * -2191622 ^ 313511145;
              continue;
            case 20:
              num1 = (int) num2 * 130329374 ^ -1455193344;
              continue;
            case 21:
              num1 = (int) num2 * -111746511 ^ -170980956;
              continue;
            case 22:
              int num6 = flag1 ? 1963062102 : (num6 = 1341023533);
              num1 = num6 ^ (int) num2 * -1996491989;
              continue;
            case 23:
              flag2 = value != null;
              num1 = 1746404425;
              continue;
            case 24:
              this.NextDistance = Tour.Distance(this.Next, this);
              num1 = (int) num2 * -130419899 ^ -1893521309;
              continue;
            case 25:
              num1 = (int) num2 * 627737029 ^ 1324842677;
              continue;
            case 26:
              num1 = (int) num2 * -1653838181 ^ 2093962375;
              continue;
            case 27:
              int num7 = this._Next != null ? 216493539 : (num7 = 836905744);
              num1 = num7 ^ (int) num2 * -1269388300;
              continue;
            default:
              goto label_33;
          }
          int num8;
          num1 = num8 = num3 == 0 ? 839174310 : (num8 = 1340198653);
        }
label_3:
        return;
label_33:;
      }
    }

    public Stop Prior { get; private set; }

    public double NextDistance { get; set; }

    public double PriorDistance { get; set; }

    public City City { get; set; }

    public Stop Clone()
    {
      Stop stop = new Stop(this.City);
label_1:
      int num1 = -2064959113;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -766777917)) % 3U)
        {
          case 1:
            num1 = (int) num2 * -1749825162 ^ 1875743070;
            continue;
          case 2:
            goto label_1;
          default:
            goto label_4;
        }
      }
label_4:
      return stop;
    }

    public IEnumerable<Stop> CanGetTo() => (IEnumerable<Stop>) new Stop.\u003CCanGetTo\u003Ed__22(-2)
    {
      \u003C\u003E4__this = this
    };

    public override bool Equals(object obj)
    {
      bool flag = this.City == ((Stop) obj).City;
label_1:
      int num1 = 974750384;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1588637591)) % 3U)
        {
          case 0:
            goto label_1;
          case 2:
            num1 = (int) num2 * 1941622891 ^ -971175228;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return flag;
    }

    public override int GetHashCode()
    {
label_1:
      int num1 = 1327174625;
      int hashCode;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1172071649)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            hashCode = Stop.\u202C⁪‎⁬⁭⁬‏⁭‮⁮‌‎⁭‍⁮⁮⁫‮‌‭​‍‎⁮⁪‏‎⁫⁫‫‪‎‏‏⁬‮‍⁭‌⁫‮((object) this.City);
            num1 = (int) num2 * -390078996 ^ -1437855541;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return hashCode;
    }

    public override string ToString()
    {
      string str = this.City.CityName.ToString();
label_1:
      int num1 = -1882304902;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -2093013297)) % 3U)
        {
          case 0:
            goto label_1;
          case 1:
            num1 = (int) num2 * -429713572 ^ -1861872497;
            continue;
          default:
            goto label_4;
        }
      }
label_4:
      return str;
    }

    static int \u202C⁪‎⁬⁭⁬‏⁭‮⁮‌‎⁭‍⁮⁮⁫‮‌‭​‍‎⁮⁪‏‎⁫⁫‫‪‎‏‏⁬‮‍⁭‌⁫‮([In] object obj0) => obj0.GetHashCode();
  }
}
