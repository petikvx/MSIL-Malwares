// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: جY, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4509E19C-3738-48CD-AFB9-B77E11D0C93B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-64fa23f22cfa820eb89b80e1db1502fcaebcb66c1731e92f550c12ca940e8075.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
label_1:
    int num1 = -1938554659;
    bool flag1;
    int num2;
    byte[] numArray;
    int num3;
    IntPtr num4;
    int length;
    Bitmap bitmap;
    BitmapData bitmapData;
    Image image;
    PixelFormat pixelFormat;
    bool flag2;
    bool flag3;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -272468153)) % 24U)
      {
        case 0:
          numArray[num3 + num2] = (byte) ((double) numArray[num3 + num2] * opacity);
          num1 = (int) num5 * -1566129564 ^ -1773531580;
          continue;
        case 1:
          ImageUtil.\u206B⁪⁪⁯⁭‌‪⁪⁬⁬‭⁭⁫⁯‪‭⁬‪⁮⁮‪⁪‪‌⁯‭⁯‭‬‫⁬‎⁪⁬‫‏‫‭‮⁪‮(numArray, 0, num4, length);
          num1 = (int) num5 * 901977707 ^ 575088438;
          continue;
        case 2:
          flag1 = (ImageUtil.\u206A⁪⁪⁫⁯‌‏‬‪⁮‍‮⁭‍‪⁫⁮‎⁮‏⁬​⁫​⁯‌‍‏⁭‬‭⁫‭‏⁬‮‌‎‭‫‮(originalImage) & PixelFormat.Indexed) == PixelFormat.Indexed;
          num1 = (int) num5 * 139535635 ^ -131182124;
          continue;
        case 3:
          num1 = -209167482;
          continue;
        case 5:
          image = originalImage;
          num1 = (int) num5 * 501763566 ^ 482221253;
          continue;
        case 6:
          goto label_1;
        case 7:
          Rectangle rectangle = new Rectangle(0, 0, ImageUtil.\u200C‍‮​⁯⁮‭‫⁫⁫‏⁯‭⁫⁬⁯‍⁫⁫⁬‌‮⁪‪‫⁮​​⁭‫⁪⁮‍‬⁫⁭⁯‏​‫‮((Image) bitmap), ImageUtil.\u200C⁯‎‎⁬‭‫‬‮⁯​⁮‫⁯‮‍⁬‪‪⁯⁫⁯⁭⁬‪‮⁮⁫‭⁫‎‍⁬‮‌⁫⁯‭⁮‪‮((Image) bitmap));
          bitmapData = ImageUtil.\u200C‬‫‮⁭‮⁪‪⁮⁫‭‍⁫‭⁯‍⁫‫‮‮‫⁫‎‭⁮⁬‌‌⁪⁯‎⁪‎‎⁫⁮‬‏⁪⁫‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * 169460304 ^ -1480713464;
          continue;
        case 8:
          bitmap = (Bitmap) ImageUtil.\u206A‭⁪⁬‏⁭‫⁯‬‮‮‭​‎⁯‎‬⁪‌‍⁭‍⁯‫⁮⁮‍‭‮‪‬‫⁫⁯‏‌‬‎⁯⁯‮(originalImage);
          num1 = -75029296;
          continue;
        case 9:
          flag3 = numArray[num3 + 4 - 1] == (byte) 0;
          num1 = (int) num5 * 781584968 ^ 352504318;
          continue;
        case 10:
          num1 = (int) num5 * 844737826 ^ -1520845608;
          continue;
        case 11:
          num3 += 4;
          num1 = -1636007;
          continue;
        case 12:
          num1 = (int) num5 * -2111358194 ^ -1423616916;
          continue;
        case 13:
          num1 = (int) num5 * -1165917691 ^ 2073127274;
          continue;
        case 14:
          flag2 = num3 < numArray.Length;
          num1 = -1239326049;
          continue;
        case 15:
          num4 = ImageUtil.\u202E‍‫⁭⁪​⁫‎⁪⁮‫⁬‎⁫‫​⁯‎⁮⁮⁭‬⁮⁭‎⁪‌‎‬‬‭‬⁪‬‎⁫‬‍‌‍‮(bitmapData);
          num1 = (int) num5 * -1261072892 ^ 2108205793;
          continue;
        case 16:
          int num6 = flag2 ? -42919116 : (num6 = -655230282);
          num1 = num6 ^ (int) num5 * -215129320;
          continue;
        case 17:
          int num7 = !flag3 ? -932090226 : (num7 = -904196322);
          num1 = num7 ^ (int) num5 * -830994027;
          continue;
        case 18:
          length = ImageUtil.\u200C‍‮​⁯⁮‭‫⁫⁫‏⁯‭⁫⁬⁯‍⁫⁫⁬‌‮⁪‪‫⁮​​⁭‫⁪⁮‍‬⁫⁭⁯‏​‫‮((Image) bitmap) * ImageUtil.\u200C⁯‎‎⁬‭‫‬‮⁯​⁮‫⁯‮‍⁬‪‪⁯⁫⁯⁭⁬‪‮⁮⁫‭⁫‎‍⁬‮‌⁫⁯‭⁮‪‮((Image) bitmap) * 4;
          numArray = new byte[length];
          ImageUtil.\u202B‍‍‌‏⁫⁮⁯‎‭‌‍‌‮‭⁮⁮‍‌⁭‫⁭⁫‎‭‌⁪‌⁭‭​‎‫‍‏⁪⁮‎‫⁭‮(num4, numArray, 0, length);
          num1 = (int) num5 * 261705391 ^ -164265673;
          continue;
        case 19:
          ImageUtil.\u200D​⁯‏‌‎⁬⁭‪‎‏‪‭⁮‌⁫‮‬⁪⁫‍⁪⁭⁬⁫‎‭⁮⁬​⁯‮‬‍​‏⁭‎‏‮‮(bitmap, bitmapData);
          image = (Image) bitmap;
          num1 = (int) num5 * 1798622232 ^ 1782201306;
          continue;
        case 20:
          num2 = 0 + 1 + 1 + 1;
          num1 = -526130449;
          continue;
        case 21:
          int num8 = flag1 ? -1300502266 : (num8 = -170673165);
          num1 = num8 ^ (int) num5 * 2056876676;
          continue;
        case 22:
          num3 = 0;
          num1 = (int) num5 * -1620640320 ^ 1351884761;
          continue;
        case 23:
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = (int) num5 * -1952490634 ^ 1724708418;
          continue;
        default:
          goto label_25;
      }
    }
label_25:
    return image;
  }

  static PixelFormat \u206A⁪⁪⁫⁯‌‏‬‪⁮‍‮⁭‍‪⁫⁮‎⁮‏⁬​⁫​⁯‌‍‏⁭‬‭⁫‭‏⁬‮‌‎‭‫‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206A‭⁪⁬‏⁭‫⁯‬‮‮‭​‎⁯‎‬⁪‌‍⁭‍⁯‫⁮⁮‍‭‮‪‬‫⁫⁯‏‌‬‎⁯⁯‮([In] Image obj0) => obj0.Clone();

  static int \u200C‍‮​⁯⁮‭‫⁫⁫‏⁯‭⁫⁬⁯‍⁫⁫⁬‌‮⁪‪‫⁮​​⁭‫⁪⁮‍‬⁫⁭⁯‏​‫‮([In] Image obj0) => obj0.Width;

  static int \u200C⁯‎‎⁬‭‫‬‮⁯​⁮‫⁯‮‍⁬‪‪⁯⁫⁯⁭⁬‪‮⁮⁫‭⁫‎‍⁬‮‌⁫⁯‭⁮‪‮([In] Image obj0) => obj0.Height;

  static BitmapData \u200C‬‫‮⁭‮⁪‪⁮⁫‭‍⁫‭⁯‍⁫‫‮‮‫⁫‎‭⁮⁬‌‌⁪⁯‎⁪‎‎⁫⁮‬‏⁪⁫‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u202E‍‫⁭⁪​⁫‎⁪⁮‫⁬‎⁫‫​⁯‎⁮⁮⁭‬⁮⁭‎⁪‌‎‬‬‭‬⁪‬‎⁫‬‍‌‍‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u202B‍‍‌‏⁫⁮⁯‎‭‌‍‌‮‭⁮⁮‍‌⁭‫⁭⁫‎‭‌⁪‌⁭‭​‎‫‍‏⁪⁮‎‫⁭‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206B⁪⁪⁯⁭‌‪⁪⁬⁬‭⁭⁫⁯‪‭⁬‪⁮⁮‪⁪‪‌⁯‭⁯‭‬‫⁬‎⁪⁬‫‏‫‭‮⁪‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u200D​⁯‏‌‎⁬⁭‪‎‏‪‭⁮‌⁫‮‬⁪⁫‍⁪⁭⁬⁫‎‭⁮⁬​⁯‮‬‍​‏⁭‎‏‮‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
