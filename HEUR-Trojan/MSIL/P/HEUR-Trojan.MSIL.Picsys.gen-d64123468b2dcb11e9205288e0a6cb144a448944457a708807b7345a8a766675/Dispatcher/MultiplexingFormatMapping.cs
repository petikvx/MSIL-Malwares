// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.MultiplexingFormatMapping
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Net.Mime;
using System.ServiceModel.Channels;
using System.ServiceModel.Web;
using System.Text;

namespace System.ServiceModel.Dispatcher
{
  internal abstract class MultiplexingFormatMapping
  {
    protected Encoding writeEncoding;
    protected string writeCharset;
    protected WebContentTypeMapper contentTypeMapper;
    private ContentType defaultContentType;

    public abstract WebMessageFormat MessageFormat { get; }

    public abstract WebContentFormat ContentFormat { get; }

    public abstract string DefaultMediaType { get; }

    protected abstract MessageEncoder Encoder { get; }

    public ContentType DefaultContentType
    {
      get
      {
        if (this.defaultContentType == null)
          this.defaultContentType = new ContentType(this.DefaultMediaType)
          {
            CharSet = this.writeCharset
          };
        return this.defaultContentType;
      }
    }

    public MultiplexingFormatMapping(Encoding writeEncoding, WebContentTypeMapper contentTypeMapper)
    {
      this.writeEncoding = writeEncoding != null ? writeEncoding : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (writeEncoding));
      this.writeCharset = TextEncoderDefaults.EncodingToCharSet(writeEncoding);
      this.contentTypeMapper = contentTypeMapper;
    }

    public bool CanFormatResponse(
      ContentType acceptHeaderElement,
      bool matchCharset,
      out ContentType contentType)
    {
      string a = acceptHeaderElement != null ? acceptHeaderElement.CharSet : throw DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(nameof (acceptHeaderElement));
      contentType = new ContentType(acceptHeaderElement.MediaType);
      contentType.CharSet = this.DefaultContentType.CharSet;
      string contentType1 = contentType.ToString();
      if (matchCharset && !string.IsNullOrEmpty(a) && !string.Equals(a, this.DefaultContentType.CharSet, StringComparison.OrdinalIgnoreCase))
        return false;
      if (this.contentTypeMapper != null && this.contentTypeMapper.GetMessageFormatForContentType(contentType.MediaType) == this.ContentFormat || this.Encoder.IsContentTypeSupported(contentType1) && (a == null || contentType.CharSet == this.DefaultContentType.CharSet))
        return true;
      contentType = (ContentType) null;
      return false;
    }
  }
}
