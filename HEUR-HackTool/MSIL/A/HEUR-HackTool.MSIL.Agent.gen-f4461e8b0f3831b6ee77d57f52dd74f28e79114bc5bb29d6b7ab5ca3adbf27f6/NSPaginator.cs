// Decompiled with JetBrains decompiler
// Type: BlackNET_Builder.NSPaginator
// Assembly: BlackNET Builder, Version=3.7.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4B8A14F4-2444-48A4-BCEA-3077100A9E22
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Agent.gen-f4461e8b0f3831b6ee77d57f52dd74f28e79114bc5bb29d6b7ab5ca3adbf27f6.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Text;
using System.Windows.Forms;

namespace BlackNET_Builder
{
  [DefaultEvent("SelectedIndexChanged")]
  internal class NSPaginator : Control
  {
    private Bitmap TextBitmap;
    private Graphics TextGraphics;
    private int _SelectedIndex;
    private int _NumberOfPages;
    private int ItemWidth;
    private GraphicsPath GP1;
    private GraphicsPath GP2;
    private Rectangle R1;
    private Size SZ1;
    private Point PT1;
    private Pen P1;
    private Pen P2;
    private Pen P3;
    private SolidBrush B1;
    private SolidBrush B2;

    public event NSPaginator.SelectedIndexChangedEventHandler SelectedIndexChanged;

    public NSPaginator()
    {
      this.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.ResizeRedraw | ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, true);
      this.SetStyle(ControlStyles.Selectable, false);
      this.Size = new Size(202, 26);
      this.TextBitmap = new Bitmap(1, 1);
      this.TextGraphics = Graphics.FromImage((Image) this.TextBitmap);
      this.InvalidateItems();
      this.B1 = new SolidBrush(Color.FromArgb(50, 50, 50));
      this.B2 = new SolidBrush(Color.FromArgb(55, 55, 55));
      this.P1 = new Pen(Color.FromArgb(24, 24, 24));
      this.P2 = new Pen(Color.FromArgb(55, 55, 55));
      this.P3 = new Pen(Color.FromArgb(65, 65, 65));
    }

    public int SelectedIndex
    {
      get => this._SelectedIndex;
      set
      {
        this._SelectedIndex = Math.Max(Math.Min(value, this.MaximumIndex), 0);
        this.Invalidate();
      }
    }

    public int NumberOfPages
    {
      get => this._NumberOfPages;
      set
      {
        this._NumberOfPages = value;
        this._SelectedIndex = Math.Max(Math.Min(this._SelectedIndex, this.MaximumIndex), 0);
        this.Invalidate();
      }
    }

    public int MaximumIndex => checked (this.NumberOfPages - 1);

    public override Font Font
    {
      get => base.Font;
      set
      {
        base.Font = value;
        this.InvalidateItems();
        this.Invalidate();
      }
    }

    private void InvalidateItems() => this.ItemWidth = checked (this.TextGraphics.MeasureString("000 ..", this.Font).ToSize().Width + 10);

    protected override void OnPaint(PaintEventArgs e)
    {
      ThemeModule.G = e.Graphics;
      ThemeModule.G.TextRenderingHint = TextRenderingHint.ClearTypeGridFit;
      ThemeModule.G.Clear(this.BackColor);
      ThemeModule.G.SmoothingMode = SmoothingMode.AntiAlias;
      if (this._SelectedIndex < 4)
      {
        int num = Math.Min(this.MaximumIndex, 4);
        int index = 0;
        while (index <= num)
        {
          bool rightEllipse = index == 4 && this.MaximumIndex > 4;
          this.DrawBox(checked (index * this.ItemWidth), index, false, rightEllipse);
          checked { ++index; }
        }
      }
      else if (this._SelectedIndex > 3 && this._SelectedIndex < checked (this.MaximumIndex - 3))
      {
        int num = 0;
        do
        {
          bool leftEllipse = num == 0;
          bool rightEllipse = num == 4;
          this.DrawBox(checked (num * this.ItemWidth), checked (this._SelectedIndex + num - 2), leftEllipse, rightEllipse);
          checked { ++num; }
        }
        while (num <= 4);
      }
      else
      {
        int num = 0;
        do
        {
          bool leftEllipse = num == 0 && this.MaximumIndex > 4;
          this.DrawBox(checked (num * this.ItemWidth), checked (this.MaximumIndex - 4 - num), leftEllipse, false);
          checked { ++num; }
        }
        while (num <= 4);
      }
    }

    private void DrawBox(int x, int index, bool leftEllipse, bool rightEllipse)
    {
      this.R1 = new Rectangle(x, 0, checked (this.ItemWidth - 4), checked (this.Height - 1));
      this.GP1 = ThemeModule.CreateRound(this.R1, 7);
      this.GP2 = ThemeModule.CreateRound(checked (this.R1.X + 1), checked (this.R1.Y + 1), checked (this.R1.Width - 2), checked (this.R1.Height - 2), 7);
      string str = Conversions.ToString(checked (index + 1));
      if (leftEllipse)
        str = ".. " + str;
      if (rightEllipse)
        str += " ..";
      this.SZ1 = ThemeModule.G.MeasureString(str, this.Font).ToSize();
      this.PT1 = new Point(checked (this.R1.X + unchecked (this.R1.Width / 2) - unchecked (this.SZ1.Width / 2)), checked (this.R1.Y + unchecked (this.R1.Height / 2) - unchecked (this.SZ1.Height / 2)));
      if (index == this._SelectedIndex)
      {
        ThemeModule.G.FillPath((Brush) this.B1, this.GP1);
        Font font = new Font(this.Font, FontStyle.Underline);
        ThemeModule.G.DrawString(str, font, Brushes.Black, (float) checked (this.PT1.X + 1), (float) checked (this.PT1.Y + 1));
        ThemeModule.G.DrawString(str, font, Brushes.WhiteSmoke, (PointF) this.PT1);
        font.Dispose();
        ThemeModule.G.DrawPath(this.P1, this.GP2);
        ThemeModule.G.DrawPath(this.P2, this.GP1);
      }
      else
      {
        ThemeModule.G.FillPath((Brush) this.B2, this.GP1);
        ThemeModule.G.DrawString(str, this.Font, Brushes.Black, (float) checked (this.PT1.X + 1), (float) checked (this.PT1.Y + 1));
        ThemeModule.G.DrawString(str, this.Font, Brushes.WhiteSmoke, (PointF) this.PT1);
        ThemeModule.G.DrawPath(this.P3, this.GP2);
        ThemeModule.G.DrawPath(this.P1, this.GP1);
      }
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left)
      {
        int selectedIndex = this._SelectedIndex;
        int num1;
        if (this._SelectedIndex < 4)
          num1 = e.X / this.ItemWidth;
        else if (this._SelectedIndex > 3 && this._SelectedIndex < checked (this.MaximumIndex - 3))
        {
          num1 = e.X / this.ItemWidth;
          int num2 = num1;
          if (num2 == 2)
            num1 = selectedIndex;
          else if (num2 < 2)
            num1 = checked (selectedIndex - 2 - num1);
          else if (num2 > 2)
            num1 = checked (selectedIndex + num1 - 2);
        }
        else
          num1 = checked (this.MaximumIndex - 4 - unchecked (e.X / this.ItemWidth));
        if (num1 < this._NumberOfPages && num1 != selectedIndex)
        {
          this.SelectedIndex = num1;
          NSPaginator.SelectedIndexChangedEventHandler indexChangedEvent = this.SelectedIndexChangedEvent;
          if (indexChangedEvent != null)
            indexChangedEvent((object) this, (EventArgs) null);
        }
      }
      base.OnMouseDown(e);
    }

    public delegate void SelectedIndexChangedEventHandler(object sender, EventArgs e);
  }
}
