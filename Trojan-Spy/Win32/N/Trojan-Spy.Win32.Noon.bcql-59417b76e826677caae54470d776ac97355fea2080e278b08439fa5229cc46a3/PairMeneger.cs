// Decompiled with JetBrains decompiler
// Type: mmxAH.PairMeneger
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace mmxAH
{
  public class PairMeneger
  {
    private List<string> codes;
    private List<string> values;

    public PairMeneger()
    {
      this.codes = new List<string>();
      this.values = new List<string>();
    }

    public bool FromText(TextFileParser prs, TextFileParser text)
    {
      int result;
      if (!int.TryParse(prs.GetToken(), out result))
        return false;
      for (int index = 0; index < result; ++index)
      {
        string token1;
        string token2;
        if ((token1 = prs.GetToken()) == null || (token2 = text.GetToken()) == null)
          return false;
        this.codes.Add(token1);
        this.values.Add(token2);
      }
      return true;
    }

    public override string ToString()
    {
      string str = "==Pairs ( " + this.codes.Count.ToString() + ")==" + Environment.NewLine;
      for (int index = 0; index < this.codes.Count; ++index)
        str = str + "code: " + this.codes[index] + " title: " + this.values[index] + Environment.NewLine;
      return str;
    }

    public int GetIndex(string code) => this.codes.IndexOf(code);

    public string GetCode(byte ind) => this.codes[(int) ind];

    public string GetTitle(byte ind) => this.values[(int) ind];

    public string GetTitle(string Code)
    {
      int index = this.codes.IndexOf(Code);
      return index == -1 ? (string) null : this.values[index];
    }

    public void ToBinary(BinaryWriter wr)
    {
      wr.Write(this.codes.Count);
      for (int index = 0; index < this.codes.Count; ++index)
      {
        wr.Write(this.codes[index]);
        wr.Write(this.values[index]);
      }
    }

    public void FromBinary(BinaryReader rd)
    {
      int num = rd.ReadInt32();
      for (int index = 0; index < num; ++index)
      {
        this.codes.Add(rd.ReadString());
        this.values.Add(rd.ReadString());
      }
    }
  }
}
