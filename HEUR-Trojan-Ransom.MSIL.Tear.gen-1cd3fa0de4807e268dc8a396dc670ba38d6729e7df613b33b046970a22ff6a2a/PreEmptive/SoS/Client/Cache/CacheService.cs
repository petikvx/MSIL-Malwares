// Decompiled with JetBrains decompiler
// Type: PreEmptive.SoS.Client.Cache.CacheService
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common;
using System;
using System.Threading;

namespace PreEmptive.SoS.Client.Cache
{
  public class CacheService
  {
    private bool a;
    private EventHandler b;

    internal PlatformClient Client
    {
      get
      {
        int num1 = 26422;
        int num2 = num1;
        num1 = 26422;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 4367;
        int num2 = num1;
        num1 = 4367;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    internal bool SendLifeCycleMessages
    {
      get
      {
        int num1 = -3097;
        int num2 = num1;
        num1 = -3097;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -2768;
        int num2 = num1;
        num1 = -2768;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public void Send(PreEmptive.SoS.Client.Messages.Message msg)
    {
      int num1 = -543;
      int num2 = num1;
      num1 = -543;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          msg.Send(this, this.Client);
          break;
        default:
          goto case 1;
      }
    }

    public void Send(PreEmptive.SoS.Client.Messages.Message msg, bool silverlightShutDown)
    {
      int num1 = -4707;
      int num2 = num1;
      num1 = -4707;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 0;
          if (num4 == 0)
            ;
          num4 = 1;
          if (num4 == 0)
            ;
          this.a = silverlightShutDown;
          msg.Send(this, this.Client);
          break;
        default:
          goto case 1;
      }
    }

    public ExtendedKeys ShutdownKeys
    {
      get
      {
        int num1 = -21047;
        int num2 = num1;
        num1 = -21047;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.e;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = -12755;
        int num2 = num1;
        num1 = -12755;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.e = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public BinaryInfo ShutdownBinary
    {
      get
      {
        int num1 = -1074;
        int num2 = num1;
        num1 = -1074;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.f;
          default:
            goto case 1;
        }
      }
      set
      {
        int num1 = 13191;
        int num2 = num1;
        num1 = 13191;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.f = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public void ShutDown()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = 22317;
      int num2 = num1;
      num1 = 22317;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          this.Client.ApplicationStop(this.ShutdownKeys, this.ShutdownBinary, this.a);
          this.a = false;
          break;
        default:
          goto case 1;
      }
    }

    public event EventHandler OfflineStorageComplete
    {
      add
      {
label_0:
        int num1;
        int num2;
        EventHandler eventHandler;
        switch (0)
        {
          case 0:
label_5:
            eventHandler = this.b;
            num1 = 1;
            num2 = num1;
            goto default;
          default:
            while (true)
            {
              num1 = -9115;
              int num3 = num1;
              num1 = -9115;
              int num4 = num1;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_0;
                default:
                  num1 = 1;
                  if (num1 == 0)
                    ;
                  num1 = 0;
                  if (num1 == 0)
                    ;
                  EventHandler comparand;
                  switch (num2)
                  {
                    case 0:
                      goto label_9;
                    case 1:
                      comparand = eventHandler;
                      eventHandler = Interlocked.CompareExchange<EventHandler>(ref this.b, comparand + value, comparand);
                      num1 = 2;
                      num2 = num1;
                      continue;
                    case 2:
                      if (eventHandler == comparand)
                      {
                        num1 = 0;
                        num2 = num1;
                        continue;
                      }
                      goto case 1;
                    default:
                      goto label_5;
                  }
              }
            }
label_9:
            break;
        }
      }
      remove
      {
label_0:
        int num1;
        int num2;
        EventHandler eventHandler;
        switch (0)
        {
          case 0:
label_4:
            eventHandler = this.b;
            num1 = 1;
            num2 = num1;
            goto default;
          default:
            while (true)
            {
              num1 = 21750;
              int num3 = num1;
              num1 = 21750;
              int num4 = num1;
              switch (num3 == num4 ? 1 : 0)
              {
                case 0:
                case 2:
                  goto label_0;
                default:
                  num1 = 0;
                  if (num1 == 0)
                    ;
                  EventHandler comparand;
                  switch (num2)
                  {
                    case 0:
                      goto label_9;
                    case 1:
                      comparand = eventHandler;
                      eventHandler = Interlocked.CompareExchange<EventHandler>(ref this.b, comparand - value, comparand);
                      num1 = 2;
                      num2 = num1;
                      continue;
                    case 2:
                      if (eventHandler == comparand)
                      {
                        num1 = 1;
                        if (num1 == 0)
                          ;
                        num1 = 0;
                        num2 = num1;
                        continue;
                      }
                      goto case 1;
                    default:
                      goto label_4;
                  }
              }
            }
label_9:
            break;
        }
      }
    }

    public void SendQueuedMessages()
    {
      int num1 = 1;
      if (num1 == 0)
        ;
      int num2;
      MessageQueue messageQueue;
      switch (0)
      {
        case 0:
label_3:
          messageQueue = this.Client.Core.MessageQueue as MessageQueue;
          break;
        default:
label_2:
          TransmitterThread transmitterThread;
          while (true)
          {
            switch (num2)
            {
              case 0:
                if (messageQueue != null)
                {
                  num1 = -9397;
                  int num3 = num1;
                  num1 = -9397;
                  int num4 = num1;
                  switch (num3 == num4 ? 1 : 0)
                  {
                    case 0:
                    case 2:
                      goto label_4;
                    default:
                      num1 = 0;
                      if (num1 == 0)
                        ;
                      num1 = 3;
                      num2 = num1;
                      continue;
                  }
                }
                else
                  goto label_15;
              case 1:
                if (transmitterThread != null)
                {
                  num1 = 2;
                  num2 = num1;
                  continue;
                }
                goto label_11;
              case 2:
                transmitterThread.ProcessQueueBatches();
                num1 = 4;
                num2 = num1;
                continue;
              case 3:
                transmitterThread = messageQueue.TransmitterThread as TransmitterThread;
                num1 = 1;
                num2 = num1;
                continue;
              case 4:
                goto label_9;
              default:
                goto label_3;
            }
          }
label_9:
          return;
label_15:
          return;
label_11:
          return;
      }
label_4:
      num1 = 0;
      num2 = num1;
      goto label_2;
    }
  }
}
