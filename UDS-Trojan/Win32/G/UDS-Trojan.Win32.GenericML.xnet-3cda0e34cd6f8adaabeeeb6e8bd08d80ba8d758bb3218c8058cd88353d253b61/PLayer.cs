// Decompiled with JetBrains decompiler
// Type: MiniGames_Team9.PLayer
// Assembly: IdentityRefere, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9F5D51E6-71BD-43F4-AA35-8F19B20FF789
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-3cda0e34cd6f8adaabeeeb6e8bd08d80ba8d758bb3218c8058cd88353d253b61.exe

using System;
using System.Drawing;
using System.Windows.Forms;
using System.Windows.Forms.Layout;

namespace MiniGames_Team9
{
  internal class PLayer : Figure
  {
    public int bulletLevel = 1;
    public int delay = 2;
    public int timedelay = 2;
    public bool isCanShoot = true;
    public int speed = 5;
    public double playerHealth = 100.0;
    public FigureState state = FigureState.weak;
    private bool goup;
    private bool goleft;
    private bool goright;
    private bool godown;
    private Direction facing = Direction.up;
    public int dame = 110;

    public PLayer()
    {
    }

    public PLayer(PictureBox Map) => this.Map = Map;

    public override void MakeAvatar()
    {
      this.Avatar.Image = this.skin.imup;
      this.Avatar.SizeMode = PictureBoxSizeMode.AutoSize;
      this.Avatar.Location = new Point(288, 548);
      this.Avatar.Tag = (object) "Avatar";
      this.Map.Controls.Add((Control) this.Avatar);
      this.Avatar.BringToFront();
    }

    public void PressKey(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Left)
      {
        this.goleft = true;
        this.facing = Direction.left;
        this.Avatar.Image = this.skin.imleft;
        this.goright = false;
        this.goup = false;
        this.godown = false;
      }
      else if (e.KeyCode == Keys.Right)
      {
        this.goright = true;
        this.facing = Direction.right;
        this.Avatar.Image = this.skin.imright;
        this.goup = false;
        this.godown = false;
        this.goleft = false;
      }
      else if (e.KeyCode == Keys.Up)
      {
        this.goup = true;
        this.facing = Direction.up;
        this.Avatar.Image = this.skin.imup;
        this.goright = false;
        this.godown = false;
        this.goleft = false;
      }
      else
      {
        if (e.KeyCode != Keys.Down)
          return;
        this.godown = true;
        this.facing = Direction.down;
        this.Avatar.Image = this.skin.imdown;
        this.goright = false;
        this.goup = false;
        this.goleft = false;
      }
    }

    public void DropKey(object sender, KeyEventArgs e)
    {
      if (e.KeyCode == Keys.Left)
        this.goleft = false;
      if (e.KeyCode == Keys.Right)
        this.goright = false;
      if (e.KeyCode == Keys.Up)
        this.goup = false;
      if (e.KeyCode == Keys.Down)
        this.godown = false;
      if (e.KeyCode != Keys.Space)
        return;
      if (this.isCanShoot)
      {
        this.Shoot(this.facing);
        this.isCanShoot = false;
      }
      else
      {
        --this.delay;
        if (this.delay == 0)
        {
          this.delay = this.timedelay;
          this.isCanShoot = true;
        }
      }
    }

    public void MoveAvatar(object sender, EventArgs e)
    {
      if (this.goleft && this.Avatar.Left > 0)
      {
        foreach (Control control in (ArrangedElementCollection) this.Map.Controls)
        {
          if (control is PictureBox && object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "Thep") || object.Equals(control.Tag, (object) "defense") || object.Equals(control.Tag, (object) "Gach") || object.Equals(control.Tag, (object) "Spawn"))
          {
            PictureBox pictureBox = this.NextLocationPlayer(Direction.left, this.speed);
            if (control.Bounds.IntersectsWith(pictureBox.Bounds))
              return;
          }
        }
        this.Avatar.Left -= this.speed;
      }
      if (this.goright && this.Avatar.Left + this.Avatar.Width < 800)
      {
        foreach (Control control in (ArrangedElementCollection) this.Map.Controls)
        {
          if (control is PictureBox && object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "Thep") || object.Equals(control.Tag, (object) "defense") || object.Equals(control.Tag, (object) "Gach") || object.Equals(control.Tag, (object) "Spawn"))
          {
            PictureBox pictureBox = this.NextLocationPlayer(Direction.right, this.speed);
            if (control.Bounds.IntersectsWith(pictureBox.Bounds))
              return;
          }
        }
        this.Avatar.Left += this.speed;
      }
      if (this.goup && this.Avatar.Top > 30)
      {
        foreach (Control control in (ArrangedElementCollection) this.Map.Controls)
        {
          if (control is PictureBox && object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "Thep") || object.Equals(control.Tag, (object) "defense") || object.Equals(control.Tag, (object) "Gach") || object.Equals(control.Tag, (object) "Spawn"))
          {
            PictureBox pictureBox = this.NextLocationPlayer(Direction.up, this.speed);
            if (control.Bounds.IntersectsWith(pictureBox.Bounds))
              return;
          }
        }
        this.Avatar.Top -= this.speed;
      }
      if (!this.godown || this.Avatar.Top + this.Avatar.Height >= 620)
        return;
      foreach (Control control in (ArrangedElementCollection) this.Map.Controls)
      {
        if (control is PictureBox && object.Equals(control.Tag, (object) "attacker") || object.Equals(control.Tag, (object) "Thep") || object.Equals(control.Tag, (object) "defense") || object.Equals(control.Tag, (object) "Gach") || object.Equals(control.Tag, (object) "Spawn"))
        {
          PictureBox pictureBox = this.NextLocationPlayer(Direction.down, this.speed);
          if (control.Bounds.IntersectsWith(pictureBox.Bounds))
            return;
        }
      }
      this.Avatar.Top += this.speed;
    }

    private void Shoot(Direction direct)
    {
      Bullet bullet = (Bullet) new BulletSimple(direct, this.Avatar, "Red");
      Sound.PlayerShoot();
      bullet.BulletControl(this.Map);
      bullet.speed = this.speed + 1;
    }

    private int Distance(PictureBox a, PictureBox b, Direction direct)
    {
      int num = 0;
      switch (direct)
      {
        case Direction.up:
          num = b.Top + b.Height - a.Top;
          break;
        case Direction.down:
          num = a.Top + a.Height - b.Top;
          break;
        case Direction.left:
          num = a.Left - (b.Left + b.Width);
          break;
        case Direction.right:
          num = b.Left - (a.Left + a.Width);
          break;
      }
      return num;
    }

    private PictureBox NextLocationPlayer(Direction direct, int speed)
    {
      PictureBox pictureBox = new PictureBox();
      pictureBox.Size = this.Avatar.Size;
      pictureBox.Location = this.Avatar.Location;
      switch (direct)
      {
        case Direction.up:
          pictureBox.Location = new Point(this.Avatar.Location.X, this.Avatar.Location.Y - speed);
          break;
        case Direction.down:
          pictureBox.Location = new Point(this.Avatar.Location.X, this.Avatar.Location.Y + speed);
          break;
        case Direction.left:
          pictureBox.Location = new Point(this.Avatar.Location.X - speed, this.Avatar.Location.Y);
          break;
        case Direction.right:
          pictureBox.Location = new Point(this.Avatar.Location.X + speed, this.Avatar.Location.Y);
          break;
      }
      return pictureBox;
    }

    public override void DownState()
    {
      if (this.state == FigureState.strong)
      {
        this.state = FigureState.medium;
        this.skin.MakePlayer2();
        this.timedelay = 2;
        this.bulletLevel = 1;
        this.dame = 120;
        this.playerHealth = 100.0;
      }
      else
      {
        if (this.state != FigureState.medium)
          return;
        this.state = FigureState.weak;
        this.skin.MakePlayer1();
        this.bulletLevel = 1;
        this.dame = 110;
        this.playerHealth = 100.0;
      }
    }

    public void UpState()
    {
      if (this.state == FigureState.weak)
      {
        this.state = FigureState.medium;
        this.skin.MakePlayer2();
        this.bulletLevel = 1;
        Sound.TakeItem();
      }
      else
      {
        if (this.state != FigureState.medium)
          return;
        this.state = FigureState.strong;
        this.skin.MakeSuperPlayer();
        this.bulletLevel = 1;
        Sound.TakeItem();
        this.timedelay = 1;
      }
    }
  }
}
