// Decompiled with JetBrains decompiler
// Type: mmxAH.SkillTest
// Assembly: X509Ut, Version=1.0.2.2, Culture=neutral, PublicKeyToken=null
// MVID: 1E869FE1-6699-4C5A-A346-E3A268AF0CFF
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcql-59417b76e826677caae54470d776ac97355fea2080e278b08439fa5229cc46a3.exe

using System;
using System.Collections.Generic;

namespace mmxAH
{
  public class SkillTest
  {
    public const byte skill_test_types_count = 10;
    private short totalDice;
    private byte successes;
    private byte ClueDice;
    private FuncWithParam RP;
    private byte needSuc;
    private Investigator inv;
    private SkillTestType typ;
    private GameEngine en;

    public SkillTest(
      GameEngine eng,
      SkillTestType type,
      short modif,
      FuncWithParam returnPoint,
      byte needSuccess = 1,
      bool isSecondType = false,
      SkillTestType type2 = SkillTestType.Speed,
      byte modif2 = 0)
    {
      this.en = eng;
      this.typ = type;
      this.inv = this.en.ActiveInvistigators[(int) this.en.clock.GetCurPlayer()];
      SkillTestInfoEntry info1 = this.inv.STInfo.GetInfo(type);
      SkillTestInfoEntry info2 = this.en.GlobalModifs.GetInfo(type);
      this.totalDice = (short) ((int) modif + (int) modif2 + (int) this.inv.GetSkillTestValue(type));
      this.ClueDice = Math.Max(info1.ClueDiceRathio, info2.ClueDiceRathio);
      if (isSecondType)
      {
        SkillTestInfoEntry info3 = this.inv.STInfo.GetInfo(type2);
        SkillTestInfoEntry info4 = this.en.GlobalModifs.GetInfo(type2);
        this.totalDice += this.inv.GetSkillTestValue(type2);
        this.ClueDice = Math.Max(this.ClueDice, Math.Max(info3.ClueDiceRathio, info4.ClueDiceRathio));
      }
      if (this.totalDice < (short) 0)
        this.totalDice = (short) 0;
      string str = this.en.sysstr.GetString(SSType.SkillCheck) + " {" + this.en.sysstr.GetCharekteresticName(type);
      if (modif >= (short) 0)
        str += "+";
      this.en.io.PrintToLog(str + modif.ToString() + " } ", isBold: true);
      this.needSuc = needSuccess;
      this.RP = returnPoint;
      this.successes = new DiceRoller(this.en).RollDiceWithTreshhold((byte) this.totalDice, this.inv.GetSTTresh());
      this.AfterRoll();
    }

    private void AfterRoll()
    {
      this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.TotalSuccesses1) + " " + this.successes.ToString() + " " + this.en.sysstr.GetString(SSType.TotalSuccesses2) + Environment.NewLine);
      if ((int) this.successes >= (int) this.needSuc || this.needSuc == byte.MaxValue)
        this.Finish();
      else
        this.CluesAndRerolls();
    }

    private void Finish()
    {
      if ((int) this.successes >= (int) this.needSuc)
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.SkillCheck) + " " + this.en.sysstr.GetString(SSType.SCPass) + ". ", isBold: true);
      else if (this.needSuc != byte.MaxValue)
        this.en.io.PrintToLog(this.en.sysstr.GetString(SSType.SkillCheck) + " " + this.en.sysstr.GetString(SSType.SCFail) + ". ", isBold: true);
      this.RP((short) this.successes);
    }

    private void CluesAndRerolls()
    {
      List<IOOption> opts = new List<IOOption>();
      foreach (IOOption chooseOpthion in this.inv.myTrigers.GetChooseOpthions(TrigerEvent.SCRerolls, (short) this.typ))
        opts.Add(chooseOpthion);
      if (this.inv.GetCluesValue() > (byte) 0)
      {
        string tit = this.en.sysstr.GetString(SSType.DiscardAction) + " " + this.en.sysstr.GetNumberClueToken((short) 1) + " :  + " + this.ClueDice.ToString() + "d6";
        opts.Add((IOOption) new IOOpthionWithoutParam(tit, new Func(this.AddDiceForClue)));
      }
      if (opts.Count == 0)
      {
        this.Finish();
      }
      else
      {
        opts.Add((IOOption) new IOOpthionWithoutParam(this.en.sysstr.GetString(SSType.EndSC), new Func(this.Finish)));
        string question = this.inv.GetTitle() + " " + this.en.sysstr.GetString(SSType.Has) + " " + this.en.sysstr.GetNumberClueToken((short) this.inv.GetCluesValue()) + Environment.NewLine + this.en.sysstr.GetString(SSType.ChooseActhioPromt);
        this.en.io.StartChoose(opts, question, this.en.sysstr.GetString(SSType.ChooseActhionButton));
      }
    }

    private void AddDiceForClue()
    {
      this.inv.RemoveClues((byte) 1);
      ++this.totalDice;
      this.successes += new DiceRoller(this.en).RollDiceWithTreshhold(this.ClueDice, this.inv.GetSTTresh());
      this.AfterRoll();
    }
  }
}
