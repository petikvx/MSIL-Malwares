// Decompiled with JetBrains decompiler
// Type: TYPELIBA.Identifiers.Field
// Assembly: TYPELIBA, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 97BB50BA-9882-4DFE-999C-7A4E4B448F1C
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-080eff3ceefca287dc59d176676559ae1aa3f1faec807805114bae214a11f586.exe

using System.Runtime.CompilerServices;
using System.Text;
using TYPELIBA.Lists;

namespace TYPELIBA.Identifiers
{
  public abstract class Field : Worker
  {
    private string _Param;
    private string _Wrapper;
    private long _Customer;
    private string m_Composer;
    private string m_Specification;
    private string _Callback;

    [MethodImpl(MethodImplOptions.NoInlining)]
    internal Field(
      string spec,
      string ord,
      long position_helper,
      string info2,
      string init3,
      string visitor4)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              goto label_1;
            case 1:
            case 5:
              goto label_7;
            case 2:
              goto label_2;
            case 4:
              goto label_6;
            case 6:
              goto label_8;
            default:
              if (!Field.ReflectDescriptor())
              {
                num2 = 4;
                continue;
              }
              goto label_6;
          }
        }
label_1:
        ManagerParamsID.NewExpression();
        num1 = 5;
        continue;
label_2:
        this.m_Composer = info2;
label_6:
        this.m_Specification = init3;
        this._Callback = visitor4;
        num1 = 6;
        continue;
label_7:
        // ISSUE: explicit constructor call
        base.\u002Ector();
        this._Param = spec;
        this._Wrapper = ord;
        this._Customer = position_helper;
        num1 = 2;
      }
label_8:;
    }

    public string Name
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Param;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this._Param = value;
    }

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string LoginState() => this._Wrapper;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ValidateProcess(string value) => this._Wrapper = value;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public long RestartState() => this._Customer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void AssetProcess(long firstcounter) => this._Customer = firstcounter;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string EnableState() => this.m_Composer;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ViewProcess(string instance) => this.m_Composer = instance;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string SortState() => this.m_Specification;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SetProcess(string key) => this.m_Specification = key;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public string GetState() => this._Callback;

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    public void ComputeProcess(string param) => this._Callback = param;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString() => this.RevertError();

    [SpecialName]
    public abstract string RevertError();

    [SpecialName]
    public abstract string InterruptState();

    [SpecialName]
    [MethodImpl(MethodImplOptions.NoInlining)]
    internal string AddProcess()
    {
      int num1 = 7;
      string str;
      while (true)
      {
        int num2 = num1;
        StringBuilder stringBuilder;
        while (true)
        {
          switch (num2)
          {
            case 0:
              goto label_4;
            case 1:
            case 5:
              goto label_2;
            case 2:
            case 3:
              goto label_14;
            case 4:
              goto label_8;
            case 6:
              stringBuilder.AppendFormat("<CS_Info");
              if (this.RestartState() > 0L)
              {
                stringBuilder.AppendFormat(" AuthorityCode=\"{0}\"", (object) this.RestartState());
                if (Field.ForgotDescriptor())
                {
                  num2 = 3;
                  continue;
                }
                goto label_8;
              }
              else
                goto label_14;
            case 7:
              stringBuilder = new StringBuilder();
              num2 = 6;
              continue;
            case 8:
              goto label_16;
            default:
              num2 = 0;
              continue;
          }
        }
label_2:
        stringBuilder.AppendFormat(" Name=\"{0}\"", (object) this.Name);
label_3:
        stringBuilder.Append("/>");
        str = stringBuilder.ToString();
        num1 = 8;
        continue;
label_4:
        if (!string.IsNullOrEmpty(this.Name))
        {
          num1 = 1;
          continue;
        }
        goto label_3;
label_8:
        stringBuilder.AppendFormat(" Abbreviation=\"{0}\"", (object) this.SortState());
label_9:
        if (!string.IsNullOrEmpty(this.LoginState()))
        {
          stringBuilder.AppendFormat(" Authority=\"{0}\"", (object) this.LoginState());
          goto label_4;
        }
        else
          goto label_4;
label_14:
        if (!string.IsNullOrEmpty(this.SortState()))
          num1 = 4;
        else
          goto label_9;
      }
label_16:
      return str;
    }

    public abstract bool CompareState(object info);

    internal static bool ForgotDescriptor() => true;

    internal static bool ReflectDescriptor() => false;
  }
}
