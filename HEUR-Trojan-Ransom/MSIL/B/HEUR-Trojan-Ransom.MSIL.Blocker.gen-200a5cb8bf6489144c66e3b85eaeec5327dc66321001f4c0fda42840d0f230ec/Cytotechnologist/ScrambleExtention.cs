// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.ScrambleExtention
// Assembly: ClaimTyp, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 6CD146E8-0143-4099-A2FD-F452B55D5FF5
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-200a5cb8bf6489144c66e3b85eaeec5327dc66321001f4c0fda42840d0f230ec.exe

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public static class ScrambleExtention
  {
    private static readonly Random Random = ScrambleExtention.\u200B‎⁪‬‬⁯‌‏⁮⁮‫​‌⁯‫⁮⁮‌‎‭⁪‭‫⁭‍⁬‏‍⁭‭⁭⁯‍‏‍‬‎⁬‬‏‮();

    public static void Shuffle<T>(IList<T> list)
    {
      int count = list.Count;
label_1:
      int num1 = -806162283;
      bool flag;
      int index;
      T obj;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -998808835)) % 12U)
        {
          case 0:
            num1 = (int) num2 * -1843688923 ^ 676520772;
            continue;
          case 1:
            flag = count > 1;
            num1 = -546936528;
            continue;
          case 2:
            --count;
            num1 = (int) num2 * -1717637361 ^ 1388314498;
            continue;
          case 3:
            goto label_1;
          case 4:
            num1 = (int) num2 * -303809767 ^ 949807436;
            continue;
          case 5:
            int num3 = flag ? -1843092981 : (num3 = -1024826330);
            num1 = num3 ^ (int) num2 * -1326158480;
            continue;
          case 6:
            obj = list[index];
            list[index] = list[count];
            num1 = (int) num2 * 787546241 ^ 1014583147;
            continue;
          case 7:
            goto label_3;
          case 8:
            num1 = (int) num2 * 1911127410 ^ 1512983082;
            continue;
          case 9:
            index = ScrambleExtention.\u206D⁬‫‌⁮⁫⁬‭‏‬‬‎‪⁮⁪‪⁪⁯‫⁮‌‪⁪⁫‭‬‌‍⁮⁭​‪‌‎⁯​⁫⁪⁬‎‮(ScrambleExtention.Random, count + 1);
            num1 = (int) num2 * -2056107041 ^ -1951629572;
            continue;
          case 10:
            num1 = -457494585;
            continue;
          case 11:
            list[count] = obj;
            num1 = (int) num2 * 349599337 ^ -1826743662;
            continue;
          default:
            goto label_14;
        }
      }
label_3:
      return;
label_14:;
    }

    static int \u206D⁬‫‌⁮⁫⁬‭‏‬‬‎‪⁮⁪‪⁪⁯‫⁮‌‪⁪⁫‭‬‌‍⁮⁭​‪‌‎⁯​⁫⁪⁬‎‮([In] Random obj0, [In] int obj1) => obj0.Next(obj1);

    static Random \u200B‎⁪‬‬⁯‌‏⁮⁮‫​‌⁯‫⁮⁮‌‎‭⁪‭‫⁭‍⁬‏‍⁭‭⁭⁯‍‏‍‬‎⁬‬‏‮() => new Random();
  }
}
