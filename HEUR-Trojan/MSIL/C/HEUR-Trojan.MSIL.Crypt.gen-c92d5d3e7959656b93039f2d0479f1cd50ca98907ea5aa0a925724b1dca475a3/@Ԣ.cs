// Decompiled with JetBrains decompiler
// Type: @Ԣ
// Assembly: uLqhNaw2rJQahaaHEibmS0F8CAhQ12f0pD0UHJWVCL, Version=9.1.2.0, Culture=neutral, PublicKeyToken=null
// MVID: D212B58E-19EB-4690-837D-62FC76EFC9D2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Crypt.gen-c92d5d3e7959656b93039f2d0479f1cd50ca98907ea5aa0a925724b1dca475a3.exe

using Microsoft.Win32;
using System;
using System.Runtime.CompilerServices;

internal static class \u0040Ԣ
{
  private static readonly object \u0040ӓ;
  private static readonly bool \u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  static \u0040Ԣ()
  {
    \u0040Ԣ.\u0040ӗ();
    try
    {
      \u0040Ԣ.\u0040Ӕ = \u0040Ԣ.\u0040ә(\u0040Ԣ.\u0040Ә()) == PlatformID.Win32NT && \u0040Ԣ.\u0040ӛ(\u0040Ԣ.\u0040Ӛ(\u0040Ԣ.\u0040Ә())) >= 6;
      try
      {
        RegistryKey registryKey = (RegistryKey) \u0040Ԣ.\u0040Ӟ(\u0040Ԣ.\u0040Ӝ(RegistryHive.LocalMachine, RegistryView.Registry32), \u0040Ԣ.\u0040ӝ(590414));
        try
        {
          object obj1 = \u0040Ԣ.\u0040Ӡ((object) (string) \u0040Ԣ.\u0040ӟ((object) registryKey, \u0040Ԣ.\u0040ӝ(590506)));
          object obj2 = \u0040Ԣ.\u0040ӝ(2446);
          int num1 = \u0040Ԣ.\u0040ӡ() ? 64 : 32;
          string str1 = num1.ToString();
          object obj3 = \u0040Ԣ.\u0040ӝ(590532);
          \u0040Ԣ.\u0040ӓ = \u0040Ԣ.\u0040Ӣ(obj1, obj2, (object) str1, obj3);
          \u0040Ԣ.\u0040Ө();
          int num2;
          if (\u0040Ԣ.\u0040ӧ())
          {
            num2 = 2;
          }
          else
          {
            num2 = 4;
            if (\u0040Ԣ.\u0040Ө())
              ;
          }
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 2:
                flag = !\u0040Ԣ.\u0040Ӥ(\u0040Ԣ.\u0040ӣ(), \u0040Ԣ.\u0040ӝ(590544));
                goto case 1;
              case 1:
              case 4:
                if (!flag)
                  goto label_12;
                else
                  goto case 3;
              case 3:
                object obj4 = \u0040Ԣ.\u0040Ӡ((object) \u0040Ԣ.\u0040Ә().ToString());
                object obj5 = \u0040Ԣ.\u0040ӝ(2446);
                num1 = \u0040Ԣ.\u0040ӡ() ? 64 : 32;
                string str2 = num1.ToString();
                object obj6 = \u0040Ԣ.\u0040ӝ(590532);
                \u0040Ԣ.\u0040ӓ = \u0040Ԣ.\u0040Ӣ(obj4, obj5, (object) str2, obj6);
                num2 = 5;
                continue;
              case 5:
                goto label_11;
              default:
                if (true)
                {
                  num2 = 3;
                  continue;
                }
                goto label_11;
            }
          }
label_12:
          return;
label_11:;
        }
        finally
        {
          if (registryKey != null)
            \u0040Ԣ.\u0040ӥ((object) registryKey);
        }
      }
      catch
      {
        \u0040Ԣ.\u0040ӓ = \u0040Ԣ.\u0040Ӣ(\u0040Ԣ.\u0040Ӡ((object) \u0040Ԣ.\u0040Ә().ToString()), \u0040Ԣ.\u0040ӝ(2446), (object) (\u0040Ԣ.\u0040ӡ() ? 64 : 32).ToString(), \u0040Ԣ.\u0040ӝ(590532));
      }
    }
    catch
    {
      \u0040Ԣ.\u0040ӓ = \u0040Ԣ.\u0040Ӧ(\u0040Ԣ.\u0040ӝ(590554), (object) (\u0040Ԣ.\u0040ӡ() ? 64 : 32).ToString(), \u0040Ԣ.\u0040ӝ(590532));
    }
  }

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public static string \u0040ӕ() => (string) \u0040Ԣ.\u0040ӓ;

  [SpecialName]
  [MethodImpl(MethodImplOptions.NoInlining)]
  public static bool \u0040Ӗ() => \u0040Ԣ.\u0040Ӕ;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӗ() => \u0040ո.\u0040Ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ә() => (object) Environment.OSVersion;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static PlatformID \u0040ә(object _param0) => ((OperatingSystem) _param0).Platform;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӛ(object _param0) => (object) ((OperatingSystem) _param0).Version;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static int \u0040ӛ(object _param0) => ((Version) _param0).Major;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӝ(RegistryHive _param0, RegistryView _param1) => (object) RegistryKey.OpenBaseKey(_param0, _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӝ(int _param0) => (object) \u0040շ.\u0040ӻ(_param0);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӟ(object _param0, object _param1) => (object) ((RegistryKey) _param0).OpenSubKey((string) _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӟ(object _param0, object _param1) => ((RegistryKey) _param0).GetValue((string) _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӡ(object _param0) => (object) ((string) _param0).Trim();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӡ() => Environment.Is64BitOperatingSystem;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӣ(object _param0, object _param1, object _param2, object _param3) => (object) ((string) _param0 + (string) _param1 + (string) _param2 + (string) _param3);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040ӣ() => (object) \u0040Ԣ.\u0040ӕ();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ӥ(object _param0, object _param1) => ((string) _param0).Contains((string) _param1);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static void \u0040ӥ(object _param0) => ((IDisposable) _param0).Dispose();

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static object \u0040Ӧ(object _param0, object _param1, object _param2) => (object) ((string) _param0 + (string) _param1 + (string) _param2);

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040ӧ() => true;

  [MethodImpl(MethodImplOptions.NoInlining)]
  internal static bool \u0040Ө() => false;
}
