// Decompiled with JetBrains decompiler
// Type: SC_aio.wd
// Assembly: SCaio, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 4039BEB0-723F-44D4-B6A2-6115173D2A3D
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.asho-8d599606a9e08d397b994f3c1f6ab611585cb198.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using SC_aio.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace SC_aio
{
  [DesignerGenerated]
  public class wd : Form
  {
    private IContainer components;
    [AccessedThroughProperty("ListBox1")]
    private ListBox _ListBox1;
    [AccessedThroughProperty("Button1")]
    private Button _Button1;
    [AccessedThroughProperty("TextBox1")]
    private TextBox _TextBox1;
    [AccessedThroughProperty("Button2")]
    private Button _Button2;
    private bool donot;

    public wd() => this.InitializeComponent();

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.ListBox1 = new ListBox();
      this.Button1 = new Button();
      this.TextBox1 = new TextBox();
      this.Button2 = new Button();
      this.SuspendLayout();
      this.ListBox1.FormattingEnabled = true;
      ListBox listBox1_1 = this.ListBox1;
      Point point1 = new Point(12, 12);
      Point point2 = point1;
      listBox1_1.Location = point2;
      this.ListBox1.Name = "ListBox1";
      ListBox listBox1_2 = this.ListBox1;
      Size size1 = new Size(260, 199);
      Size size2 = size1;
      listBox1_2.Size = size2;
      this.ListBox1.TabIndex = 0;
      Button button1_1 = this.Button1;
      point1 = new Point(154, 217);
      Point point3 = point1;
      button1_1.Location = point3;
      this.Button1.Name = "Button1";
      Button button1_2 = this.Button1;
      size1 = new Size(118, 23);
      Size size3 = size1;
      button1_2.Size = size3;
      this.Button1.TabIndex = 1;
      this.Button1.Text = "Withdraw";
      this.Button1.UseVisualStyleBackColor = true;
      TextBox textBox1_1 = this.TextBox1;
      point1 = new Point(12, 219);
      Point point4 = point1;
      textBox1_1.Location = point4;
      this.TextBox1.Name = "TextBox1";
      TextBox textBox1_2 = this.TextBox1;
      size1 = new Size(136, 20);
      Size size4 = size1;
      textBox1_2.Size = size4;
      this.TextBox1.TabIndex = 2;
      this.TextBox1.Text = "$0.00";
      Button button2_1 = this.Button2;
      point1 = new Point(12, 243);
      Point point5 = point1;
      button2_1.Location = point5;
      this.Button2.Name = "Button2";
      Button button2_2 = this.Button2;
      size1 = new Size(260, 23);
      Size size5 = size1;
      button2_2.Size = size5;
      this.Button2.TabIndex = 3;
      this.Button2.Text = "Get withdraw options";
      this.Button2.UseVisualStyleBackColor = true;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      size1 = new Size(284, 276);
      this.ClientSize = size1;
      this.Controls.Add((Control) this.Button2);
      this.Controls.Add((Control) this.TextBox1);
      this.Controls.Add((Control) this.Button1);
      this.Controls.Add((Control) this.ListBox1);
      this.Name = nameof (wd);
      this.Text = "ShiftCode - Withdraw";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    internal virtual ListBox ListBox1
    {
      get => this._ListBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set => this._ListBox1 = value;
    }

    internal virtual Button Button1
    {
      get => this._Button1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button1_Click);
        if (this._Button1 != null)
          this._Button1.Click -= eventHandler;
        this._Button1 = value;
        if (this._Button1 == null)
          return;
        this._Button1.Click += eventHandler;
      }
    }

    internal virtual TextBox TextBox1
    {
      get => this._TextBox1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.TextBox1_TextChanged);
        if (this._TextBox1 != null)
          this._TextBox1.TextChanged -= eventHandler;
        this._TextBox1 = value;
        if (this._TextBox1 == null)
          return;
        this._TextBox1.TextChanged += eventHandler;
      }
    }

    internal virtual Button Button2
    {
      get => this._Button2;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Button2_Click);
        if (this._Button2 != null)
          this._Button2.Click -= eventHandler;
        this._Button2 = value;
        if (this._Button2 == null)
          return;
        this._Button2.Click += eventHandler;
      }
    }

    private string getWithdrawAmount()
    {
      string text = this.TextBox1.Text;
      string withdrawAmount;
      try
      {
        withdrawAmount = text.Replace("$", "");
        string str = text.Split('.')[1];
        if (str.Length < 2)
        {
          this.TextBox1.Text += "0";
          this.donot = true;
        }
        else if (str.Length > 2)
        {
          this.TextBox1.Text = text.Substring(0, checked (text.Length - 1));
          this.donot = true;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        withdrawAmount = "0.00";
        ProjectData.ClearProjectError();
      }
      return withdrawAmount;
    }

    private void TextBox1_TextChanged(object sender, EventArgs e)
    {
      if (this.donot)
      {
        this.donot = false;
      }
      else
      {
        try
        {
          int num = this.TextBox1.SelectionStart;
          this.TextBox1.Text = "$" + this.getWithdrawAmount().ToString();
          if (num == 0)
            num = 1;
          this.TextBox1.SelectionStart = num;
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          Exception exception = ex;
          if (!MyProject.Forms.aio.autocontrolled)
          {
            int num = (int) Interaction.MsgBox((object) ("Unable to make $ output error log:\r\n" + exception.ToString()));
          }
          ProjectData.ClearProjectError();
        }
      }
    }

    public object getWithdrawOptions(bool str = false)
    {
      string str1 = Conversions.ToString(MyProject.Forms.aio.sendPost("http://" + MyProject.Forms.aio.domain + "/members/withdraw.php", ""));
      string str2 = "action=\"withdraw.php?";
      List<string> withdrawOptions1 = new List<string>();
      while (str1.Contains(str2))
      {
        string str3 = str1.Remove(0, str1.IndexOf(str2));
        str1 = str3.Remove(0, checked (str3.IndexOf("title=") + 7));
        string[] strArray = str1.Split('"');
        if (!withdrawOptions1.Contains(strArray[0]))
          withdrawOptions1.Add(strArray[0]);
      }
      if (!str)
        return (object) withdrawOptions1;
      string withdrawOptions2 = withdrawOptions1[0];
      bool flag = true;
      try
      {
        foreach (string str4 in withdrawOptions1)
        {
          if (!flag)
            withdrawOptions2 = withdrawOptions2 + "|" + str4;
          else
            flag = false;
        }
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
      return (object) withdrawOptions2;
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      List<string> withdrawOptions = (List<string>) this.getWithdrawOptions();
      try
      {
        foreach (object obj in withdrawOptions)
          this.ListBox1.Items.Add(obj);
      }
      finally
      {
        List<string>.Enumerator enumerator;
        enumerator.Dispose();
      }
    }

    private void Button1_Click(object sender, EventArgs e)
    {
      int num = (int) Interaction.MsgBox(Operators.AddObject(Operators.AddObject((object) ("Withdrawing " + this.getWithdrawAmount().ToString() + " through "), this.ListBox1.SelectedItem), (object) "."));
    }
  }
}
