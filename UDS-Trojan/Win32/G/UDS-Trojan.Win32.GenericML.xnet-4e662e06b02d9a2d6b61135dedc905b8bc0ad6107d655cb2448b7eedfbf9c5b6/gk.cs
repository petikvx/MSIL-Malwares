// Decompiled with JetBrains decompiler
// Type: jd.gk
// Assembly: RuntimeFieldI, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3177D6BF-0678-437F-AD25-445C5521A270
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4e662e06b02d9a2d6b61135dedc905b8bc0ad6107d655cb2448b7eedfbf9c5b6.exe

using System;
using System.Runtime.InteropServices;

namespace jd
{
  public class gk
  {
    internal static gk wg8;

    public void Lvz()
    {
      MQ mq = new MQ();
      Console.WriteLine("Please input the number of years for Tuition");
      mq.AfJ(int.Parse((string) gk.qgr()));
      this.ifM();
      jO jO = new jO();
      int num1 = 4;
      PN pn;
      int num2;
      while (true)
      {
        switch (num1)
        {
          case 1:
            goto label_4;
          case 2:
            jO.mv2(double.Parse(Console.ReadLine()));
            num1 = gk.bgD() == null ? 0 : 0;
            continue;
          case 3:
            pn = new PN();
            Console.WriteLine("Please provide a value for X");
            num2 = int.Parse(Console.ReadLine());
            Console.WriteLine("Please provide a value for Y");
            num1 = gk.bgD() == null ? 1 : 1;
            continue;
          case 4:
            Console.WriteLine("Please input a value for feet");
            num1 = 2;
            continue;
          default:
            this.ifM();
            num1 = 3;
            continue;
        }
      }
label_4:
      int num3 = int.Parse(Console.ReadLine());
      pn.vvi(num2, num3);
      this.ifM();
    }

    private void ifM()
    {
      int num1 = 1;
label_1:
      int num2 = num1;
      while (true)
      {
        switch (num2)
        {
          case 1:
            gk.Ega((object) "Program Complete Stepping into the next program");
            if (gk.vgV())
            {
              num2 = 0;
              continue;
            }
            goto label_1;
          default:
            goto label_3;
        }
      }
label_3:
      Console.ReadLine();
      Console.Clear();
    }

    public gk()
    {
      gk.lgt();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    internal static object qgr() => (object) Console.ReadLine();

    internal static bool vgV() => gk.wg8 == null;

    internal static gk bgD() => gk.wg8;

    internal static void Ega([In] object obj0) => Console.WriteLine((string) obj0);

    internal static void lgt() => gs.JD3Ei4();
  }
}
