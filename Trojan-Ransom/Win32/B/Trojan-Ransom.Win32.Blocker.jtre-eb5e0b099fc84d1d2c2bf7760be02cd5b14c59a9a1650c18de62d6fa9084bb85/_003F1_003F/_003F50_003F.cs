// Decompiled with JetBrains decompiler
// Type: ?1?.?50?
// Assembly: Server, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CCE56BF6-1478-4F80-8758-2108CD9D4C80
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00070-msil\Trojan-Ransom.Win32.Blocker.jtre-eb5e0b099fc84d1d2c2bf7760be02cd5b14c59a9a1650c18de62d6fa9084bb85.exe

using \u003F1\u003F;
using System;
using System.Runtime.CompilerServices;

namespace \u003F1\u003F
{
  internal class \u003F50\u003F : \u003F49\u003F
  {
    private new static int \u003F1\u003F = 4096;
    private new int \u003F15\u003F;
    private short[] \u003F1\u003F;
    private short[] \u003F15\u003F;
    private new int \u003F16\u003F;
    private new int \u003F17\u003F;
    private new bool \u003F1\u003F;
    private new int \u003F18\u003F;
    private new int \u003F19\u003F;
    private new int \u003F20\u003F;
    private byte[] \u003F1\u003F;
    private \u003F37\u003F \u003F1\u003F;
    private new int \u003F21\u003F;
    private new int \u003F22\u003F;
    private new int \u003F23\u003F;
    private new int \u002E;
    private new int \u003F25\u003F;
    private byte[] \u003F15\u003F;
    private new int \u003F26\u003F;
    private new int \u003F27\u003F;
    private new int \u003F29\u003F;
    private \u003F54\u003F \u003F1\u003F;
    private \u003F52\u003F \u003F1\u003F;
    private \u003F13\u003F \u003F1\u003F;

    public \u003F50\u003F(\u003F54\u003F _param1)
    {
      this.\u003F1\u003F = _param1;
      this.\u003F1\u003F = new \u003F52\u003F(_param1);
      this.\u003F1\u003F = new \u003F13\u003F();
      this.\u003F1\u003F = new byte[65536];
      this.\u003F1\u003F = new short[32768];
      this.\u003F15\u003F = new short[32768];
      this.\u003F18\u003F = this.\u003F19\u003F = 1;
    }

    public void \u003F1\u003F()
    {
      this.\u003F1\u003F.\u003F1\u003F();
      this.\u003F1\u003F.\u0001();
      this.\u003F18\u003F = this.\u003F19\u003F = 1;
      this.\u003F20\u003F = 0;
      this.\u003F26\u003F = 0;
      this.\u003F1\u003F = false;
      this.\u003F17\u003F = 2;
      for (int index = 0; index < 32768; ++index)
        this.\u003F1\u003F[index] = (short) 0;
      for (int index = 0; index < 32768; ++index)
        this.\u003F15\u003F[index] = (short) 0;
    }

    public void \u003F15\u003F() => this.\u003F1\u003F.\u0001();

    [SpecialName]
    public int \u0002() => (int) this.\u003F1\u003F.\u0020();

    [SpecialName]
    public int \u0003() => this.\u003F26\u003F;

    [SpecialName]
    public \u003F37\u003F \u0004() => this.\u003F1\u003F;

    [SpecialName]
    public void \u0020(\u003F37\u003F _param1) => this.\u003F1\u003F = _param1;

    public void \u003F1\u003F(int _param1)
    {
      this.\u002E = \u003F49\u003F.\u003F1\u003F[_param1];
      this.\u003F22\u003F = \u003F49\u003F.\u003F15\u003F[_param1];
      this.\u003F23\u003F = \u003F49\u003F.\u003F16\u003F[_param1];
      this.\u003F21\u003F = \u003F49\u003F.\u003F17\u003F[_param1];
      if (\u003F49\u003F.\u003F18\u003F[_param1] == this.\u003F25\u003F)
        return;
      switch (this.\u003F25\u003F)
      {
        case 0:
          if (this.\u003F19\u003F > this.\u003F18\u003F)
            goto label_9;
label_2:
          this.\u003F19\u003F();
          break;
label_9:
          this.\u003F1\u003F.\u003F1\u003F(this.\u003F1\u003F, this.\u003F18\u003F, this.\u003F19\u003F - this.\u003F18\u003F, false);
          this.\u003F18\u003F = this.\u003F19\u003F;
          goto label_2;
        case 1:
          if (this.\u003F19\u003F > this.\u003F18\u003F)
          {
            this.\u003F1\u003F.\u003F15\u003F(this.\u003F1\u003F, this.\u003F18\u003F, this.\u003F19\u003F - this.\u003F18\u003F, false);
            this.\u003F18\u003F = this.\u003F19\u003F;
            break;
          }
          break;
        case 2:
          if (this.\u003F1\u003F)
            goto label_12;
label_5:
          if (this.\u003F19\u003F > this.\u003F18\u003F)
            goto label_13;
label_6:
          this.\u003F1\u003F = false;
          this.\u003F17\u003F = 2;
          break;
label_13:
          this.\u003F1\u003F.\u003F15\u003F(this.\u003F1\u003F, this.\u003F18\u003F, this.\u003F19\u003F - this.\u003F18\u003F, false);
          this.\u003F18\u003F = this.\u003F19\u003F;
          goto label_6;
label_12:
          this.\u003F1\u003F.\u003F18\u003F((int) this.\u003F1\u003F[this.\u003F19\u003F - 1] & (int) byte.MaxValue);
          goto label_5;
      }
      this.\u003F25\u003F = \u003F49\u003F.\u003F18\u003F[_param1];
    }

    private void \u003F19\u003F() => this.\u003F15\u003F = (int) this.\u003F1\u003F[this.\u003F19\u003F] << 5 ^ (int) this.\u003F1\u003F[this.\u003F19\u003F + 1];

    private int \u003F20\u003F()
    {
      int index = (this.\u003F15\u003F << 5 ^ (int) this.\u003F1\u003F[this.\u003F19\u003F + 2]) & (int) short.MaxValue;
      short num;
      this.\u003F15\u003F[this.\u003F19\u003F & (int) short.MaxValue] = num = this.\u003F1\u003F[index];
      this.\u003F1\u003F[index] = (short) this.\u003F19\u003F;
      this.\u003F15\u003F = index;
      return (int) num & (int) ushort.MaxValue;
    }

    private void \u003F21\u003F()
    {
      Array.Copy((Array) this.\u003F1\u003F, 32768, (Array) this.\u003F1\u003F, 0, 32768);
      this.\u003F16\u003F -= 32768;
      this.\u003F19\u003F -= 32768;
      this.\u003F18\u003F -= 32768;
      for (int index = 0; index < 32768; ++index)
      {
        int num = (int) this.\u003F1\u003F[index] & (int) ushort.MaxValue;
        this.\u003F1\u003F[index] = num >= 32768 ? (short) (num - 32768) : (short) 0;
      }
      for (int index = 0; index < 32768; ++index)
      {
        int num = (int) this.\u003F15\u003F[index] & (int) ushort.MaxValue;
        this.\u003F15\u003F[index] = num >= 32768 ? (short) (num - 32768) : (short) 0;
      }
    }

    public void \u003F22\u003F()
    {
      if (this.\u003F19\u003F >= 65274)
        goto label_5;
label_3:
      int length;
      for (; this.\u003F20\u003F < 262 && this.\u003F27\u003F < this.\u003F29\u003F; this.\u003F20\u003F += length)
      {
        length = 65536 - this.\u003F20\u003F - this.\u003F19\u003F;
        if (length > this.\u003F29\u003F - this.\u003F27\u003F)
          goto label_6;
label_2:
        Array.Copy((Array) this.\u003F15\u003F, this.\u003F27\u003F, (Array) this.\u003F1\u003F, this.\u003F19\u003F + this.\u003F20\u003F, length);
        this.\u003F1\u003F.\u0020(this.\u003F15\u003F, this.\u003F27\u003F, length);
        this.\u003F27\u003F += length;
        this.\u003F26\u003F += length;
        continue;
label_6:
        length = this.\u003F29\u003F - this.\u003F27\u003F;
        goto label_2;
      }
      if (this.\u003F20\u003F < 3)
        return;
      this.\u003F19\u003F();
      return;
label_5:
      this.\u003F21\u003F();
      goto label_3;
    }

    private bool \u003F15\u003F(int _param1)
    {
      int num1 = this.\u003F21\u003F;
      int num2 = this.\u003F23\u003F;
      short[] numArray1 = this.\u003F15\u003F;
      int index1 = this.\u003F19\u003F;
      int index2 = this.\u003F19\u003F + this.\u003F17\u003F;
      int val1 = Math.Max(this.\u003F17\u003F, 2);
      int num3 = Math.Max(this.\u003F19\u003F - 32506, 0);
      int num4 = this.\u003F19\u003F + 258 - 1;
      byte num5 = this.\u003F1\u003F[index2 - 1];
      byte num6 = this.\u003F1\u003F[index2];
      if (val1 >= this.\u002E)
        goto label_8;
label_1:
      if (num2 > this.\u003F20\u003F)
        goto label_9;
label_2:
      do
      {
        if ((int) this.\u003F1\u003F[_param1 + val1] == (int) num6 && (int) this.\u003F1\u003F[_param1 + val1 - 1] == (int) num5 && (int) this.\u003F1\u003F[_param1] == (int) this.\u003F1\u003F[index1] && (int) this.\u003F1\u003F[_param1 + 1] == (int) this.\u003F1\u003F[index1 + 1])
          goto label_10;
label_6:
        continue;
label_10:
        int num7 = _param1 + 2;
        int num8 = index1 + 2;
        int num9;
        while ((int) this.\u003F1\u003F[++num8] == (int) this.\u003F1\u003F[num9 = num7 + 1])
        {
          byte[] numArray2 = this.\u003F1\u003F;
          int num10 = num8;
          int index3;
          num8 = index3 = num10 + 1;
          int num11;
          int num12;
          if ((int) numArray2[index3] == (int) this.\u003F1\u003F[num11 = num9 + 1] && (int) this.\u003F1\u003F[++num8] == (int) this.\u003F1\u003F[num12 = num11 + 1])
          {
            byte[] numArray3 = this.\u003F1\u003F;
            int num13 = num8;
            int index4;
            num8 = index4 = num13 + 1;
            int num14;
            int num15;
            if ((int) numArray3[index4] == (int) this.\u003F1\u003F[num14 = num12 + 1] && (int) this.\u003F1\u003F[++num8] == (int) this.\u003F1\u003F[num15 = num14 + 1])
            {
              byte[] numArray4 = this.\u003F1\u003F;
              int num16 = num8;
              int index5;
              num8 = index5 = num16 + 1;
              int num17;
              if ((int) numArray4[index5] == (int) this.\u003F1\u003F[num17 = num15 + 1])
              {
                byte[] numArray5 = this.\u003F1\u003F;
                int num18 = num8;
                int index6;
                num8 = index6 = num18 + 1;
                int num19;
                if ((int) numArray5[index6] != (int) this.\u003F1\u003F[num19 = num17 + 1] || (int) this.\u003F1\u003F[++num8] != (int) this.\u003F1\u003F[num7 = num19 + 1] || num8 >= num4)
                  break;
              }
              else
                break;
            }
            else
              break;
          }
          else
            break;
        }
        if (num8 > index2)
          goto label_15;
label_5:
        index1 = this.\u003F19\u003F;
        goto label_6;
label_15:
        this.\u003F16\u003F = _param1;
        index2 = num8;
        val1 = num8 - this.\u003F19\u003F;
        if (val1 < num2)
        {
          num5 = this.\u003F1\u003F[index2 - 1];
          num6 = this.\u003F1\u003F[index2];
          goto label_5;
        }
        else
          break;
      }
      while ((_param1 = (int) numArray1[_param1 & (int) short.MaxValue] & (int) ushort.MaxValue) > num3 && --num1 != 0);
      this.\u003F17\u003F = Math.Min(val1, this.\u003F20\u003F);
      return this.\u003F17\u003F >= 3;
label_9:
      num2 = this.\u003F20\u003F;
      goto label_2;
label_8:
      num1 >>= 2;
      goto label_1;
    }

    public void \u003F1\u003F(byte[] _param1, int _param2, int _param3)
    {
      this.\u003F1\u003F.\u0020(_param1, _param2, _param3);
      if (_param3 < 3)
        return;
      if (_param3 > 32506)
        goto label_5;
label_2:
      Array.Copy((Array) _param1, _param2, (Array) this.\u003F1\u003F, this.\u003F19\u003F, _param3);
      this.\u003F19\u003F();
      --_param3;
      while (--_param3 > 0)
      {
        this.\u003F20\u003F();
        ++this.\u003F19\u003F;
      }
      this.\u003F19\u003F += 2;
      this.\u003F18\u003F = this.\u003F19\u003F;
      return;
label_5:
      _param2 += _param3 - 32506;
      _param3 = 32506;
      goto label_2;
    }

    private bool \u003F1\u003F(bool _param1, bool _param2)
    {
      if (!_param1 && this.\u003F20\u003F == 0)
        return false;
      this.\u003F19\u003F += this.\u003F20\u003F;
      this.\u003F20\u003F = 0;
      int num = this.\u003F19\u003F - this.\u003F18\u003F;
      if (num < \u003F49\u003F.\u003F13\u003F && (this.\u003F18\u003F >= 32768 || num < 32506) && !_param1)
        return true;
      bool flag = _param2;
      if (num > \u003F49\u003F.\u003F13\u003F)
        goto label_6;
label_3:
      this.\u003F1\u003F.\u003F1\u003F(this.\u003F1\u003F, this.\u003F18\u003F, num, flag);
      this.\u003F18\u003F += num;
      return !flag;
label_6:
      num = \u003F49\u003F.\u003F13\u003F;
      flag = false;
      goto label_3;
    }

    private bool \u003F15\u003F(bool _param1, bool _param2)
    {
      if (this.\u003F20\u003F < 262 && !_param1)
        return false;
      while (this.\u003F20\u003F >= 262 || _param1)
      {
        if (this.\u003F20\u003F != 0)
        {
          if (this.\u003F19\u003F > 65274)
            goto label_12;
label_3:
          int num;
          if (this.\u003F20\u003F < 3 || (num = this.\u003F20\u003F()) == 0 || this.\u003F1\u003F == \u003F37\u003F.\u003F16\u003F || this.\u003F19\u003F - num > 32506 || !this.\u003F15\u003F(num))
          {
            this.\u003F1\u003F.\u003F18\u003F((int) this.\u003F1\u003F[this.\u003F19\u003F] & (int) byte.MaxValue);
            ++this.\u003F19\u003F;
            --this.\u003F20\u003F;
            if (this.\u003F1\u003F.\u003F16\u003F())
            {
              bool flag = _param2 && this.\u003F20\u003F == 0;
              this.\u003F1\u003F.\u003F15\u003F(this.\u003F1\u003F, this.\u003F18\u003F, this.\u003F19\u003F - this.\u003F18\u003F, flag);
              this.\u003F18\u003F = this.\u003F19\u003F;
              return !flag;
            }
            continue;
          }
          this.\u003F1\u003F.\u003F1\u003F(this.\u003F19\u003F - this.\u003F16\u003F, this.\u003F17\u003F);
          this.\u003F20\u003F -= this.\u003F17\u003F;
          if (this.\u003F17\u003F <= this.\u003F22\u003F && this.\u003F20\u003F >= 3)
          {
            while (--this.\u003F17\u003F > 0)
            {
              ++this.\u003F19\u003F;
              this.\u003F20\u003F();
            }
            ++this.\u003F19\u003F;
          }
          else
          {
            this.\u003F19\u003F += this.\u003F17\u003F;
            if (this.\u003F20\u003F >= 2)
              this.\u003F19\u003F();
          }
          this.\u003F17\u003F = 2;
          continue;
label_12:
          this.\u003F21\u003F();
          goto label_3;
        }
        else
        {
          this.\u003F1\u003F.\u003F15\u003F(this.\u003F1\u003F, this.\u003F18\u003F, this.\u003F19\u003F - this.\u003F18\u003F, _param2);
          this.\u003F18\u003F = this.\u003F19\u003F;
          return false;
        }
      }
      return true;
    }

    private bool \u003F16\u003F(bool _param1, bool _param2)
    {
      if (this.\u003F20\u003F < 262 && !_param1)
        return false;
      while (this.\u003F20\u003F >= 262 || _param1)
      {
        if (this.\u003F20\u003F != 0)
        {
          if (this.\u003F19\u003F >= 65274)
            goto label_17;
label_4:
          int num1 = this.\u003F16\u003F;
          int num2 = this.\u003F17\u003F;
          if (this.\u003F20\u003F >= 3)
            goto label_18;
label_6:
          if (num2 < 3 || this.\u003F17\u003F > num2)
          {
            if (this.\u003F1\u003F)
              goto label_22;
label_10:
            this.\u003F1\u003F = true;
            ++this.\u003F19\u003F;
            --this.\u003F20\u003F;
            goto label_11;
label_22:
            this.\u003F1\u003F.\u003F18\u003F((int) this.\u003F1\u003F[this.\u003F19\u003F - 1] & (int) byte.MaxValue);
            goto label_10;
          }
          else
            goto label_19;
label_11:
          if (this.\u003F1\u003F.\u003F16\u003F())
          {
            int num3 = this.\u003F19\u003F - this.\u003F18\u003F;
            if (this.\u003F1\u003F)
              goto label_24;
label_12:
            bool flag = _param2 && this.\u003F20\u003F == 0 && !this.\u003F1\u003F;
            this.\u003F1\u003F.\u003F15\u003F(this.\u003F1\u003F, this.\u003F18\u003F, num3, flag);
            this.\u003F18\u003F += num3;
            return !flag;
label_24:
            --num3;
            goto label_12;
          }
          else
            continue;
label_19:
          this.\u003F1\u003F.\u003F1\u003F(this.\u003F19\u003F - 1 - num1, num2);
          int num4 = num2 - 2;
          do
          {
            ++this.\u003F19\u003F;
            --this.\u003F20\u003F;
            if (this.\u003F20\u003F >= 3)
              goto label_20;
label_8:
            continue;
label_20:
            this.\u003F20\u003F();
            goto label_8;
          }
          while (--num4 > 0);
          ++this.\u003F19\u003F;
          --this.\u003F20\u003F;
          this.\u003F1\u003F = false;
          this.\u003F17\u003F = 2;
          goto label_11;
label_18:
          int num5 = this.\u003F20\u003F();
          if (this.\u003F1\u003F != \u003F37\u003F.\u003F16\u003F && num5 != 0 && this.\u003F19\u003F - num5 <= 32506 && this.\u003F15\u003F(num5) && this.\u003F17\u003F <= 5 && (this.\u003F1\u003F == \u003F37\u003F.\u003F15\u003F || this.\u003F17\u003F == 3 && this.\u003F19\u003F - this.\u003F16\u003F > \u003F50\u003F.\u003F1\u003F))
          {
            this.\u003F17\u003F = 2;
            goto label_6;
          }
          else
            goto label_6;
label_17:
          this.\u003F21\u003F();
          goto label_4;
        }
        else
        {
          if (this.\u003F1\u003F)
            goto label_16;
label_2:
          this.\u003F1\u003F = false;
          this.\u003F1\u003F.\u003F15\u003F(this.\u003F1\u003F, this.\u003F18\u003F, this.\u003F19\u003F - this.\u003F18\u003F, _param2);
          this.\u003F18\u003F = this.\u003F19\u003F;
          return false;
label_16:
          this.\u003F1\u003F.\u003F18\u003F((int) this.\u003F1\u003F[this.\u003F19\u003F - 1] & (int) byte.MaxValue);
          goto label_2;
        }
      }
      return true;
    }

    public bool \u003F17\u003F(bool _param1, bool _param2)
    {
      bool flag1;
      do
      {
        this.\u003F22\u003F();
        bool flag2 = _param1 && this.\u003F27\u003F == this.\u003F29\u003F;
        switch (this.\u003F25\u003F)
        {
          case 0:
            flag1 = this.\u003F1\u003F(flag2, _param2);
            break;
          case 1:
            flag1 = this.\u003F15\u003F(flag2, _param2);
            break;
          case 2:
            flag1 = this.\u003F16\u003F(flag2, _param2);
            break;
          default:
            throw new InvalidOperationException(\u003F15\u003F.\u003F1\u003F.\u003F1\u003F(1694950977, 966110047, 61290346));
        }
      }
      while (this.\u003F1\u003F.\u0003() && flag1);
      return flag1;
    }

    public void \u003F15\u003F(byte[] _param1, int _param2, int _param3)
    {
      if (this.\u003F27\u003F < this.\u003F29\u003F)
        throw new InvalidOperationException(\u003F15\u003F.\u003F1\u003F.\u003F1\u003F(54379341, 966110077, 61290244));
      int num = _param2 + _param3;
      if (0 > _param2 || _param2 > num || num > _param1.Length)
        throw new ArgumentOutOfRangeException();
      this.\u003F15\u003F = _param1;
      this.\u003F27\u003F = _param2;
      this.\u003F29\u003F = num;
    }

    public bool \u003F23\u003F() => this.\u003F29\u003F == this.\u003F27\u003F;
  }
}
