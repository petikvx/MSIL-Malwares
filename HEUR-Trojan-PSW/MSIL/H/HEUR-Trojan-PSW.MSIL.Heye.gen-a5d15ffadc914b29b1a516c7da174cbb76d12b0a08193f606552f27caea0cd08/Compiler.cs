// Decompiled with JetBrains decompiler
// Type: StaggeringIsometricMap.Compiler
// Assembly: MethodToken, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: C6648534-03E9-4D82-90D8-09C2DA46DB59
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-PSW.MSIL.Heye.gen-a5d15ffadc914b29b1a516c7da174cbb76d12b0a08193f606552f27caea0cd08.exe

using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.Text;

namespace StaggeringIsometricMap
{
  public class Compiler
  {
    private static readonly string[] SelfClosers = new string[17]
    {
      "area",
      "base",
      "br",
      "col",
      "command",
      "embed",
      "hr",
      "img",
      "input",
      "keygen",
      "link",
      "menuitem",
      "meta",
      "param",
      "source",
      "track",
      "wbr"
    };

    public static string Compile(string template, CompilerOptions co = null)
    {
      if (co == null)
        co = new CompilerOptions();
      Compiler.HtmlElement htmlElement1 = new Compiler.HtmlElement()
      {
        Name = "~ROOT~"
      };
      Stack<Compiler.HtmlElement> htmlElementStack = new Stack<Compiler.HtmlElement>();
      template = template.Trim();
      string Left;
      while (true)
      {
        int length = template.IndexOf('<');
        if (length >= 0)
        {
          int endOfHtmlTag = Compiler.FindEndOfHtmlTag(template, checked (length + 1));
          if (endOfHtmlTag >= 0)
          {
            if (length > 0)
              htmlElement1.SubItems.Add(new Compiler.HtmlElement()
              {
                Text = template.Substring(0, length)
              });
            string str = template.Substring(checked (length + 1), checked (endOfHtmlTag - length - 1));
            template = template.Substring(checked (endOfHtmlTag + 1));
            int num = str.IndexOf(' ');
            if (num < 0)
              num = str.Length;
            string lower = str.Substring(0, num).ToLower();
            string x = str.Substring(num);
            if (lower.StartsWith("/"))
            {
              Left = lower.Substring(1);
              if (Operators.CompareString(Left, htmlElement1.Name, false) == 0)
                htmlElement1 = htmlElementStack.Pop();
              else
                break;
            }
            else
            {
              Compiler.HtmlElement htmlElement2 = new Compiler.HtmlElement()
              {
                Name = lower
              };
              if (x.EndsWith("/"))
              {
                htmlElement2.SelfClosing = true;
                x = x.Substring(0, checked (x.Length - 1));
              }
              htmlElement2.ParseAttribs(x);
              htmlElement1.SubItems.Add(htmlElement2);
              if (!htmlElement2.SelfClosing)
              {
                htmlElementStack.Push(htmlElement1);
                htmlElement1 = htmlElement2;
              }
            }
          }
          else
            goto label_18;
        }
        else
          goto label_18;
      }
      throw new Exception("Start/end tag name mismatch: " + htmlElement1.Name + " / " + Left);
label_18:
      if (htmlElementStack.Count > 0)
        throw new Exception("Mismatch start/end tags");
      if (template.Length > 0)
        htmlElement1.SubItems.Add(new Compiler.HtmlElement()
        {
          Text = template
        });
      if (htmlElement1.SubItems.Count == 0)
        throw new Exception("Template is empty");
      if (htmlElement1.SubItems.Count > 1)
        throw new Exception("Multiple root elements");
      if (htmlElement1.SubItems[0].Text != null)
        throw new Exception("Root elements is text");
      htmlElement1.Name = nameof (template);
      Compiler.IExecItem execItem = htmlElement1.RenderXI(co);
      execItem.Reduce();
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.AppendLine("function(_data) {");
      stringBuilder.AppendLine("  with(_data){");
      stringBuilder.AppendLine("    function _he(x){return x.toString().split('&').join('&amp;').split('<').join('&lt;').split('>').join('&gt;').split('\"').join('&quot;')}");
      stringBuilder.AppendLine("    function _at(n,v){var tp=typeof v;if(tp==='string') return ' '+n+'=\"'+_he(v)+'\"';if(tp==='number') return ' '+n+'=\"'+v+'\"';if(tp==='boolean') return v?' '+n:'';if(tp==='object'){if(n==='class' && Array.isArray(v)) return ' '+n+'=\"'+v.join(' ')+'\"';};throw tp +' not supported';}");
      stringBuilder.AppendLine("    function _fr(c,r){var rv='';if(Array.isArray(c)){for(var i=0;i<c.length;i++){rv+=r(c[i],i);};return rv;};if(typeof c==='number'){for(var i=0;i<c;i++){rv+=r(i+1,i);};return rv;};throw 'type ' + (typeof c) + ' not supported';}");
      stringBuilder.AppendLine("    return " + execItem.RenderVal());
      stringBuilder.AppendLine("  }");
      stringBuilder.Append("}");
      return stringBuilder.ToString();
    }

    private static int FindEndOfHtmlTag(string inStr, int startIndex)
    {
      bool flag1 = false;
      bool flag2 = false;
      int num1 = startIndex;
      int num2 = checked (inStr.Length - 1);
      int index = num1;
      while (index <= num2)
      {
        switch (inStr[index])
        {
          case '"':
            if (!flag2)
            {
              flag1 = !flag1;
              break;
            }
            break;
          case '\'':
            if (!flag1)
            {
              flag2 = !flag2;
              break;
            }
            break;
          case '>':
            if (!flag1 && !flag2)
              return index;
            break;
        }
        checked { ++index; }
      }
      return -1;
    }

    private class HtmlElement
    {
      public string Text;
      public string Name;
      public bool SelfClosing;
      public Dictionary<string, string> Attribs;
      public List<Compiler.HtmlElement> SubItems;

      public HtmlElement()
      {
        this.Text = (string) null;
        this.SelfClosing = false;
        this.Attribs = new Dictionary<string, string>((IEqualityComparer<string>) StringComparer.InvariantCultureIgnoreCase);
        this.SubItems = new List<Compiler.HtmlElement>();
      }

      public void ParseAttribs(string x)
      {
        string key;
        while (true)
        {
          x = x.Trim();
          if (x.Length != 0)
          {
            int num1 = x.IndexOfAny(new char[2]{ ' ', '=' });
            if (num1 >= 0)
            {
              key = x.Substring(0, num1);
              if (x[num1] == ' ')
              {
                if (!this.Attribs.ContainsKey(key.ToLower()))
                {
                  this.Attribs.Add(key, (string) null);
                  x = x.Substring(checked (num1 + 1));
                }
                else
                  goto label_8;
              }
              else
              {
                x = x.Substring(checked (num1 + 1)).Trim();
                if (x.Length != 0)
                {
                  int num2;
                  if (x[0] == '"' | Operators.CompareString(Conversions.ToString(x[0]), "'", false) == 0)
                  {
                    num2 = x.IndexOf(x[0], 1);
                    if (num2 < 0)
                      goto label_14;
                  }
                  else
                    num2 = x.IndexOf(' ');
                  if (!this.Attribs.ContainsKey(key.ToLower()))
                  {
                    this.Attribs.Add(key, x.Substring(1, checked (num2 - 1)));
                    x = x.Substring(checked (num2 + 1));
                  }
                  else
                    goto label_18;
                }
                else
                  goto label_11;
              }
            }
            else
              goto label_3;
          }
          else
            break;
        }
        return;
label_3:
        if (this.Attribs.ContainsKey(x.ToLower()))
          throw new Exception("HTML element '" + this.Name + "' has multiple '" + x + "' attributes");
        this.Attribs.Add(x, (string) null);
        return;
label_8:
        throw new Exception("HTML element '" + this.Name + "' has multiple '" + key + "' attributes");
label_11:
        throw new Exception("Unclosed attribute '" + key + "' on tag '" + this.Name + "'");
label_14:
        throw new Exception("Unclosed attribute '" + key + "' on tag '" + this.Name + "'");
label_18:
        throw new Exception("HTML element '" + this.Name + "' has multiple '" + key + "' attributes");
      }

      internal Compiler.IExecItem RenderXI(CompilerOptions co)
      {
        if (this.Text != null)
          return (Compiler.IExecItem) this.RenderXIText(co);
        if (this.Attribs.ContainsKey("v-pre"))
        {
          this.Attribs.Remove("v-pre");
          return this.RenderXIPre(co);
        }
        string forExpr = (string) null;
        int num = checked (this.SubItems.Count - 1);
        int index = 0;
        while (index <= num)
        {
          Compiler.HtmlElement subItem = this.SubItems[index];
          if (!subItem.Attribs.ContainsKey("v-pre"))
          {
            if (subItem.Attribs.TryGetValue("v-for", out forExpr))
            {
              Compiler.HtmlElement htmlElement = new Compiler.HtmlElement();
              htmlElement.Name = "template";
              subItem.Attribs.Remove("v-for");
              htmlElement.Attribs.Add("v-for", forExpr);
              if (subItem.Attribs.TryGetValue(":key", out forExpr))
              {
                subItem.Attribs.Remove(":key");
                htmlElement.Attribs.Add(":key", forExpr);
              }
              if (subItem.Attribs.TryGetValue("v-bind:key", out forExpr))
              {
                subItem.Attribs.Remove("v-bind:key");
                htmlElement.Attribs.Add("v-bind:key", forExpr);
              }
              htmlElement.SubItems.Add(this.SubItems[index]);
              this.SubItems[index] = htmlElement;
            }
          }
          checked { ++index; }
        }
        if (this.Attribs.TryGetValue("v-for", out forExpr))
          return (Compiler.IExecItem) this.RenderXIForLoop(forExpr, co);
        if (Operators.CompareString(this.Name, "template", false) == 0)
          return (Compiler.IExecItem) this.RenderSubItemsXI(co);
        string fn = (string) null;
        return co.Components.TryGetValue(this.Name, out fn) ? this.RenderXIComponent(fn, co) : (Compiler.IExecItem) this.RenderXIElement(co);
      }

      private Compiler.IExecItem RenderXIComponent(string fn, CompilerOptions co)
      {
        if (this.SubItems.Count > 0)
          throw new Exception("Component content is not (yet) supported: " + this.Name);
        string str1 = "$parent:_data,$root:(\"$root\" in _data?_data.$root:_data)";
        try
        {
          foreach (KeyValuePair<string, string> attrib in this.Attribs)
          {
            string lower = attrib.Key.ToLower();
            string str2 = attrib.Value;
            if (lower.StartsWith("v-bind:") || lower.StartsWith(":"))
            {
              string str3 = attrib.Key.Substring(attrib.Key.StartsWith(":") ? 1 : 7);
              if (str2.StartsWith("{"))
                throw new Exception("Binding with Objects not supported");
              str1 = str1 + ",\"" + str3.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\":" + str2;
            }
            else
            {
              if (Operators.CompareString(lower, "v-html", false) == 0 || Operators.CompareString(lower, "v-text", false) == 0 || Operators.CompareString(lower, "v-show", false) == 0)
                throw new Exception(lower + "not supported on components");
              if (!(Operators.CompareString(lower, "v-once", false) == 0 | Operators.CompareString(attrib.Key, "v-cloak", false) == 0))
              {
                if (attrib.Key.StartsWith("v-") || attrib.Key.StartsWith("@"))
                  throw new NotImplementedException("Vue attribute '" + lower + "' not implemented");
                if (str2 == null)
                  str1 = str1 + ",\"" + attrib.Key.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\":true";
                else
                  str1 = str1 + ",\"" + attrib.Key.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\":\"" + str2.Replace("\\", "\\\\").Replace("\"", "\\\"") + "\"";
              }
            }
          }
        }
        finally
        {
          Dictionary<string, string>.Enumerator enumerator;
          enumerator.Dispose();
        }
        return (Compiler.IExecItem) new Compiler.ExecItemEval()
        {
          JS = (fn + "({" + str1 + "})")
        };
      }

      private Compiler.ExecItemList RenderXIElement(CompilerOptions co)
      {
        string str1 = (string) null;
        Compiler.ExecItemList execItemList = new Compiler.ExecItemList();
        execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
        {
          Text = ("<" + this.Name)
        });
        if (this.Attribs.TryGetValue("v-show", out str1))
        {
          this.Attribs.Remove("v-show");
          if (this.Attribs.ContainsKey(":style") | this.Attribs.ContainsKey("v-bind:style"))
            throw new Exception("v-show is not supported together with bound style attribute");
          string str2 = (string) null;
          string str3 = "";
          if (this.Attribs.TryGetValue("style", out str2))
          {
            this.Attribs.Remove("style");
            int[] numArray = new int[3]{ 90, 10, 20 };
          }
          if (str3.Length > 0)
            execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemEval()
            {
              JS = ("(' style=\"'" + str3 + "'+(" + str1 + "?'':';display:none'))+'\"')")
            });
          else
            execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemEval()
            {
              JS = ("(" + str1 + "?'':' style=\"display:none\"')")
            });
        }
        string str4 = (string) null;
        string str5 = (string) null;
        try
        {
          foreach (KeyValuePair<string, string> attrib in this.Attribs)
          {
            string lower = attrib.Key.ToLower();
            string str6 = attrib.Value;
            if (lower.StartsWith("v-bind:") || lower.StartsWith(":"))
            {
              string str7 = attrib.Key.Substring(lower.StartsWith(":") ? 1 : 7);
              if (str6.StartsWith("{"))
                throw new Exception("Binding with Objects not supported");
              execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemEval()
              {
                JS = ("_at('" + str7 + "'," + str6 + ")")
              });
            }
            else if (Operators.CompareString(lower, "v-html", false) == 0)
              str4 = str6;
            else if (Operators.CompareString(lower, "v-text", false) == 0)
              str5 = str6;
            else if (!(Operators.CompareString(lower, "v-once", false) == 0 | Operators.CompareString(attrib.Key, "v-cloak", false) == 0))
            {
              if (attrib.Key.StartsWith("v-") || attrib.Key.StartsWith("@"))
                throw new NotImplementedException("Vue attribute '" + lower + "' not implemented");
              if (str6 == null)
                execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
                {
                  Text = (" " + attrib.Key)
                });
              else
                execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
                {
                  Text = (" " + attrib.Key + "=\"" + str6 + "\"")
                });
            }
          }
        }
        finally
        {
          Dictionary<string, string>.Enumerator enumerator;
          enumerator.Dispose();
        }
        if (this.SelfClosing & this.SubItems.Count == 0)
        {
          execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
          {
            Text = "/>"
          });
          return execItemList;
        }
        execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
        {
          Text = ">"
        });
        if (str4 != null)
          execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemEval()
          {
            JS = ("(" + str4 + ")")
          });
        else if (str5 != null)
          execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemEval()
          {
            JS = ("_he(" + str5 + ")")
          });
        else
          execItemList.Items.Add((Compiler.IExecItem) this.RenderSubItemsXI(co));
        execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
        {
          Text = ("</" + this.Name + ">")
        });
        return execItemList;
      }

      private Compiler.ExecItemList RenderSubItemsXI(CompilerOptions co)
      {
        string condJS = (string) null;
        Compiler.ExecItemList execItemList = new Compiler.ExecItemList();
        int pos = 0;
        while (pos < this.SubItems.Count)
        {
          if (!this.SubItems[pos].Attribs.ContainsKey("v-pre"))
          {
            if (this.SubItems[pos].Attribs.TryGetValue("v-if", out condJS))
            {
              this.SubItems[pos].Attribs.Remove("v-if");
              execItemList.Items.Add((Compiler.IExecItem) this.RenderSubItemConditional(condJS, ref pos, co));
              continue;
            }
            if (this.SubItems[pos].Attribs.ContainsKey("v-else-if"))
              throw new Exception("Unexpected v-else-if statement - no preceeding v-if");
            if (this.SubItems[pos].Attribs.ContainsKey("v-else"))
              throw new Exception("Unexpected v-else statement - no preceeding v-if");
          }
          execItemList.Items.Add(this.SubItems[pos].RenderXI(co));
          checked { ++pos; }
        }
        return execItemList;
      }

      private Compiler.ExecItemConditional RenderSubItemConditional(
        string condJS,
        ref int pos,
        CompilerOptions co)
      {
        Compiler.ExecItemConditional execItemConditional = new Compiler.ExecItemConditional();
        execItemConditional.JS = condJS;
        execItemConditional.ExecTrue = this.SubItems[pos].RenderXI(co);
        if (this.SubItems[pos].Attribs.ContainsKey("v-for"))
        {
          checked { ++pos; }
          return execItemConditional;
        }
        checked { ++pos; }
        if (pos >= this.SubItems.Count)
          return execItemConditional;
        if (pos < checked (this.SubItems.Count - 1) && this.SubItems[pos].Text != null && this.SubItems[pos].Text.Trim().Length == 0 && this.SubItems[checked (pos + 1)].Text == null && (this.SubItems[checked (pos + 1)].Attribs.ContainsKey("v-else-if") || this.SubItems[checked (pos + 1)].Attribs.ContainsKey("v-else")))
          checked { ++pos; }
        if (this.SubItems[pos].Text != null)
          return execItemConditional;
        string condJS1 = (string) null;
        if (this.SubItems[pos].Attribs.TryGetValue("v-else-if", out condJS1))
        {
          this.SubItems[pos].Attribs.Remove("v-else-if");
          execItemConditional.ExecFalse = (Compiler.IExecItem) this.RenderSubItemConditional(condJS1, ref pos, co);
        }
        else if (this.SubItems[pos].Attribs.ContainsKey("v-else"))
        {
          this.SubItems[pos].Attribs.Remove("v-else");
          execItemConditional.ExecFalse = this.SubItems[pos].RenderXI(co);
          checked { ++pos; }
        }
        return execItemConditional;
      }

      private Compiler.ExecItemFor RenderXIForLoop(string forExpr, CompilerOptions co)
      {
        string str1 = forExpr;
        Compiler.ExecItemFor execItemFor = new Compiler.ExecItemFor();
        string str2;
        if (str1.StartsWith("("))
        {
          string str3 = str1.Substring(1).Trim();
          int length1 = str3.IndexOf(",");
          execItemFor.ItemVar = length1 > 0 ? str3.Substring(0, length1).Trim() : throw new Exception("Invalid for expression: " + forExpr);
          string str4 = str3.Substring(checked (length1 + 1)).Trim();
          int length2 = str4.IndexOf(")");
          execItemFor.IdxVar = length2 > 0 ? str4.Substring(0, length2).Trim() : throw new Exception("Invalid for expression: " + forExpr);
          str2 = str4.Substring(checked (length2 + 1)).Trim();
        }
        else
        {
          int length = str1.IndexOf(" ");
          execItemFor.ItemVar = length > 0 ? str1.Substring(0, length) : throw new Exception("Invalid for expression: " + forExpr);
          str2 = str1.Substring(checked (length + 1)).Trim();
        }
        execItemFor.ArrayVar = str2.StartsWith("in ") ? str2.Substring(3).Trim() : throw new Exception("Invalid for expression: " + forExpr);
        execItemFor.LoopOn = (Compiler.IExecItem) this.RenderSubItemsXI(co);
        return execItemFor;
      }

      private Compiler.ExecItemList RenderXIText(CompilerOptions co)
      {
        Compiler.ExecItemList execItemList = new Compiler.ExecItemList();
        string str = this.Text;
        while (true)
        {
          int length = str.IndexOf("{{");
          if (length >= 0)
          {
            int num = str.IndexOf("}}", checked (length + 2));
            if (num >= 0)
            {
              if (length > 0)
                execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
                {
                  Text = str.Substring(0, length)
                });
              execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemEval()
              {
                JS = ("_he(" + str.Substring(checked (length + 2), checked (num - length - 2)).Trim() + ")")
              });
              str = str.Substring(checked (num + 2));
            }
            else
              break;
          }
          else
            break;
        }
        if (str.Length > 0)
          execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
          {
            Text = str
          });
        return execItemList;
      }

      private Compiler.IExecItem RenderXIPre(CompilerOptions co)
      {
        if (this.Text != null)
          return (Compiler.IExecItem) new Compiler.ExecItemRaw()
          {
            Text = this.Text
          };
        Compiler.ExecItemList execItemList = new Compiler.ExecItemList();
        execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
        {
          Text = ("<" + this.Name)
        });
        try
        {
          foreach (KeyValuePair<string, string> attrib in this.Attribs)
          {
            execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
            {
              Text = (" " + attrib.Key)
            });
            if (attrib.Value != null)
              execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
              {
                Text = ("=\"" + attrib.Value + "\"")
              });
          }
        }
        finally
        {
          Dictionary<string, string>.Enumerator enumerator;
          enumerator.Dispose();
        }
        if (this.SelfClosing & this.SubItems.Count == 0)
        {
          execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
          {
            Text = "/>"
          });
          return (Compiler.IExecItem) execItemList;
        }
        execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
        {
          Text = ">"
        });
        try
        {
          foreach (Compiler.HtmlElement subItem in this.SubItems)
            execItemList.Items.Add(subItem.RenderXIPre(co));
        }
        finally
        {
          List<Compiler.HtmlElement>.Enumerator enumerator;
          enumerator.Dispose();
        }
        execItemList.Items.Add((Compiler.IExecItem) new Compiler.ExecItemRaw()
        {
          Text = ("</" + this.Name + ">")
        });
        return (Compiler.IExecItem) execItemList;
      }
    }

    private interface IExecItem
    {
      string RenderVal();

      void Reduce();
    }

    private class ExecItemList : Compiler.IExecItem
    {
      public List<Compiler.IExecItem> Items;

      public ExecItemList() => this.Items = new List<Compiler.IExecItem>();

      public void Reduce()
      {
        try
        {
          foreach (Compiler.IExecItem execItem in this.Items)
            execItem.Reduce();
        }
        finally
        {
          List<Compiler.IExecItem>.Enumerator enumerator;
          enumerator.Dispose();
        }
        int index1 = 0;
        while (index1 < this.Items.Count)
        {
          if (this.Items[index1] is Compiler.ExecItemList)
          {
            Compiler.ExecItemList execItemList = (Compiler.ExecItemList) this.Items[index1];
            this.Items.RemoveAt(index1);
            try
            {
              foreach (Compiler.IExecItem execItem in execItemList.Items)
              {
                this.Items.Insert(index1, execItem);
                checked { ++index1; }
              }
            }
            finally
            {
              List<Compiler.IExecItem>.Enumerator enumerator;
              enumerator.Dispose();
            }
          }
          else
            checked { ++index1; }
        }
        int index2 = 0;
        while (index2 < checked (this.Items.Count - 1))
        {
          if (this.Items[index2] is Compiler.ExecItemRaw && this.Items[checked (index2 + 1)] is Compiler.ExecItemRaw)
          {
            this.Items[index2] = (Compiler.IExecItem) new Compiler.ExecItemRaw()
            {
              Text = (((Compiler.ExecItemRaw) this.Items[index2]).Text + ((Compiler.ExecItemRaw) this.Items[checked (index2 + 1)]).Text)
            };
            this.Items.RemoveAt(checked (index2 + 1));
          }
          else
            checked { ++index2; }
        }
      }

      public string RenderVal()
      {
        if (this.Items.Count == 0)
          return "''";
        StringBuilder stringBuilder = new StringBuilder();
        try
        {
          foreach (Compiler.IExecItem execItem in this.Items)
          {
            if (stringBuilder.Length > 0)
              stringBuilder.Append("+");
            stringBuilder.Append(execItem.RenderVal());
          }
        }
        finally
        {
          List<Compiler.IExecItem>.Enumerator enumerator;
          enumerator.Dispose();
        }
        return stringBuilder.ToString();
      }
    }

    private class ExecItemRaw : Compiler.IExecItem
    {
      public string Text;

      public void Reduce()
      {
      }

      public string RenderVal() => "'" + this.JSEncodeHtml(this.Text) + "'";

      private string JSEncodeHtml(string x)
      {
        x = x.Replace("\r\n", " ").Replace("\n", " ").Replace("\t", " ");
        StringBuilder stringBuilder = new StringBuilder();
        int num1 = 0;
        while (num1 < x.Length)
        {
          int num2 = x.IndexOf("  ", num1);
          if (num2 < 0)
          {
            stringBuilder.Append(x.Substring(num1));
            break;
          }
          stringBuilder.Append(x.Substring(num1, checked (num2 - num1 + 1)));
          num1 = checked (num2 + 2);
          while (num1 < x.Length && x[num1] == ' ')
            checked { ++num1; }
        }
        return stringBuilder.ToString().Replace("\\", "\\\\").Replace("'", "\\'");
      }
    }

    private class ExecItemEval : Compiler.IExecItem
    {
      public string JS;

      public void Reduce()
      {
      }

      public string RenderVal() => this.JS;
    }

    private class ExecItemConditional : Compiler.IExecItem
    {
      public string JS;
      public Compiler.IExecItem ExecTrue;
      public Compiler.IExecItem ExecFalse;

      public void Reduce()
      {
        this.ExecTrue.Reduce();
        if (this.ExecFalse == null)
          return;
        this.ExecFalse.Reduce();
      }

      public string RenderVal()
      {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.Append("(" + this.JS + "?(");
        string str1 = this.ExecTrue.RenderVal();
        stringBuilder.Append(str1.Length > 0 ? str1 : "''");
        stringBuilder.Append("):(");
        string str2 = this.ExecFalse == null ? "" : this.ExecFalse.RenderVal();
        stringBuilder.Append(str2.Length > 0 ? str2 : "''");
        stringBuilder.Append("))");
        return stringBuilder.ToString();
      }
    }

    private class ExecItemFor : Compiler.IExecItem
    {
      public string ItemVar;
      public string ArrayVar;
      public string IdxVar;
      public Compiler.IExecItem LoopOn;

      public void Reduce() => this.LoopOn.Reduce();

      public string RenderVal()
      {
        if (this.IdxVar == null)
          this.IdxVar = this.ItemVar + "_ix";
        return "_fr(" + this.ArrayVar + ",function(" + this.ItemVar + "," + this.IdxVar + "){return " + this.LoopOn.RenderVal() + "})";
      }
    }
  }
}
