// Decompiled with JetBrains decompiler
// Type: SmartAssembly.MemoryManagement.MemoryManager
// Assembly: BOMBS, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b01670ee6fa4859f
// MVID: D5D8F5B0-12EB-4325-8C3D-C60F341D062A
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00090-msil\Trojan-Ransom.Win32.Blocker.jjta-28a226e15e1e7b94528e46718041b3f49976b446eb3daccd652d0e5b43f948be.exe

using \u0001;
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace SmartAssembly.MemoryManagement
{
  public sealed class MemoryManager
  {
    private static MemoryManager \u0001;
    private long \u0001;

    [DllImport("kernel32", EntryPoint = "SetProcessWorkingSetSize")]
    private static extern int \u0001(
      IntPtr process,
      int minimumWorkingSetSize,
      int maximumWorkingSetSize);

    private void \u0001()
    {
      Process currentProcess;
      try
      {
        try
        {
          currentProcess = Process.GetCurrentProcess();
          try
          {
            MemoryManager.\u0001(currentProcess.Handle, -1, -1);
          }
          finally
          {
            if (currentProcess == null)
              goto label_4;
label_3:
            currentProcess.Dispose();
label_4:
            if (false)
              goto label_3;
          }
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        Process process = currentProcess;
        \u0003.\u0001(ex, (object) process, (object) this);
        throw;
      }
    }

    private void \u0001(object sender, EventArgs e)
    {
      DateTime now;
      long num1;
      try
      {
        try
        {
          now = DateTime.Now;
label_1:
          long num2 = now.Ticks;
          if (true)
            goto label_5;
label_2:
          if (true)
          {
            if (num2 <= 10000000L)
              return;
            this.\u0001 = num1;
            this.\u0001();
            return;
          }
          goto label_7;
label_5:
          num1 = num2;
          if (true)
            num2 = num1;
          else
            goto label_1;
label_7:
          long num3 = this.\u0001;
          num2 -= num3;
          goto label_2;
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<long> local1 = (ValueType) num1;
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> local2 = (ValueType) now;
        object obj = sender;
        EventArgs eventArgs = e;
        \u0003.\u0001(ex, (object) local1, (object) local2, (object) this, obj, (object) eventArgs);
        throw;
      }
    }

    private MemoryManager()
    {
      DateTime now = DateTime.Now;
      this.\u0001 = now.Ticks;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      try
      {
        Application.Idle += new EventHandler(this.\u0001);
        this.\u0001();
      }
      catch (Exception ex)
      {
        // ISSUE: variable of a boxed type
        __Boxed<DateTime> local = (ValueType) now;
        \u0003.\u0001(ex, (object) local, (object) this);
        throw;
      }
    }

    public static void \u0001()
    {
label_0:
      try
      {
        try
        {
          if (Environment.OSVersion.Platform != PlatformID.Win32NT)
            goto label_2;
label_1:
          if (true)
            MemoryManager.\u0001 = new MemoryManager();
          else
            goto label_0;
label_2:
          if (false)
            goto label_1;
        }
        catch
        {
        }
      }
      catch (Exception ex)
      {
        \u0003.\u0001(ex);
        throw;
      }
    }
  }
}
