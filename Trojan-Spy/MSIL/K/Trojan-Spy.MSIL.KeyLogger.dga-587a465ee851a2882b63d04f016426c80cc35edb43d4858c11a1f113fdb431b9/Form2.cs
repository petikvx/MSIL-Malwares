// Decompiled with JetBrains decompiler
// Type: KeyLoggerHook.Form2
// Assembly: KeyLoggerHook, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 26063B71-F70D-47F2-A7CD-9491A0DD6717
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00001-msil\Trojan-Spy.MSIL.KeyLogger.dga-587a465ee851a2882b63d04f016426c80cc35edb43d4858c11a1f113fdb431b9.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Windows.Forms;

namespace KeyLoggerHook
{
  [DesignerGenerated]
  public class Form2 : Form
  {
    private static List<WeakReference> __ENCList = new List<WeakReference>();
    private IContainer components;
    private int pwdUPPER;
    private int pwdLOWER;
    private int pwdMIXED;

    [DebuggerNonUserCode]
    static Form2()
    {
    }

    public Form2()
    {
      lock (Form2.__ENCList)
        Form2.__ENCList.Add(new WeakReference((object) this));
      this.pwdUPPER = 1;
      this.pwdLOWER = 2;
      this.pwdMIXED = 3;
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.SuspendLayout();
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(284, 262);
      this.Name = nameof (Form2);
      this.Text = nameof (Form2);
      this.ResumeLayout(false);
    }

    public string GeneratePassword(
      long minAlpha,
      long maxAlpha,
      Form2.PwdCaseType alphaCase,
      long minDigit,
      long maxDigit,
      long minOther,
      long maxOther)
    {
      string str1 = "ABCDEFGHIJKLMNPQRSTUVWXYZ";
      string str2 = "123456789";
      string str3 = "&@#§()$%_[]";
      long num1 = checked ((long) Math.Round((double) unchecked ((float) minAlpha + Conversion.Int(VBMath.Rnd() * (float) checked (maxAlpha - minAlpha + 1L)))));
      long num2 = 1;
      string sDest1;
      while (num2 <= num1)
      {
        sDest1 += Strings.Mid(str1, checked ((int) Math.Round((double) unchecked (1f + Conversion.Int(VBMath.Rnd() * (float) Strings.Len(str1))))), 1);
        checked { ++num2; }
      }
      if (alphaCase == (Form2.PwdCaseType) this.pwdLOWER)
        sDest1 = Strings.LCase(sDest1);
      else if (alphaCase == (Form2.PwdCaseType) this.pwdMIXED)
      {
        long num3 = (long) Strings.Len(sDest1);
        long num4 = 1;
        while (num4 <= num3)
        {
          StringType.MidStmtStr(ref sDest1, checked ((int) num4), 1, Strings.LCase(Strings.Mid(sDest1, checked ((int) num4), 1)));
          checked { num4 += 2L; }
        }
      }
      long num5 = checked ((long) Math.Round((double) unchecked ((float) minDigit + Conversion.Int(VBMath.Rnd() * (float) checked (maxDigit - minDigit + 1L)))));
      long num6 = 1;
      string str4;
      while (num6 <= num5)
      {
        str4 += Strings.Mid(str2, checked ((int) Math.Round((double) unchecked (1f + Conversion.Int(VBMath.Rnd() * (float) Strings.Len(str2))))), 1);
        checked { ++num6; }
      }
      long num7 = checked ((long) Math.Round((double) unchecked ((float) minOther + Conversion.Int(VBMath.Rnd() * (float) checked (maxOther - minOther + 1L)))));
      long num8 = 1;
      string str5;
      while (num8 <= num7)
      {
        str5 += Strings.Mid(str3, checked ((int) Math.Round((double) unchecked (1f + Conversion.Int(VBMath.Rnd() * (float) Strings.Len(str3))))), 1);
        checked { ++num8; }
      }
      string sDest2 = sDest1 + str4 + str5;
      long num9 = (long) Strings.Len(sDest2);
      long num10 = 1;
      do
      {
        long num11 = checked ((long) Math.Round((double) unchecked (1f + Conversion.Int(VBMath.Rnd() * (float) num9))));
        long num12 = checked ((long) Math.Round((double) unchecked (1f + Conversion.Int(VBMath.Rnd() * (float) num9))));
        string sInsert = Strings.Mid(sDest2, checked ((int) num11), 1);
        StringType.MidStmtStr(ref sDest2, checked ((int) num11), 1, Strings.Mid(sDest2, checked ((int) num12), 1));
        StringType.MidStmtStr(ref sDest2, checked ((int) num12), 1, sInsert);
        checked { ++num10; }
      }
      while (num10 <= 100L);
      return sDest2;
    }

    public enum PwdCaseType
    {
      pwdUPPER = 1,
      pwdLOWER = 2,
      pwdMIXED = 3,
    }
  }
}
