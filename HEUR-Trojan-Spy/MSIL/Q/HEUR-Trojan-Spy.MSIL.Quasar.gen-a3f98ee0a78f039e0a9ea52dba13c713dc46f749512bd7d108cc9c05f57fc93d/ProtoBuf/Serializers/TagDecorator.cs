// Decompiled with JetBrains decompiler
// Type: ProtoBuf.Serializers.TagDecorator
// Assembly: Stubv2.0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E945C042-2241-44AF-B826-4AD3FC72B170
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-a3f98ee0a78f039e0a9ea52dba13c713dc46f749512bd7d108cc9c05f57fc93d.exe

using ProtoBuf.Meta;
using System;

namespace ProtoBuf.Serializers
{
  internal sealed class TagDecorator : ProtoDecoratorBase, IProtoTypeSerializer, IProtoSerializer
  {
    private readonly bool strict;
    private readonly int fieldNumber;
    private readonly WireType wireType;

    public bool HasCallbacks(TypeModel.CallbackType callbackType) => this.Tail is IProtoTypeSerializer tail && tail.HasCallbacks(callbackType);

    public bool CanCreateInstance() => this.Tail is IProtoTypeSerializer tail && tail.CanCreateInstance();

    public object CreateInstance(ProtoReader source) => ((IProtoTypeSerializer) this.Tail).CreateInstance(source);

    public void Callback(
      object value,
      TypeModel.CallbackType callbackType,
      SerializationContext context)
    {
      if (!(this.Tail is IProtoTypeSerializer tail))
        return;
      tail.Callback(value, callbackType, context);
    }

    public override Type ExpectedType => this.Tail.ExpectedType;

    public TagDecorator(int fieldNumber, WireType wireType, bool strict, IProtoSerializer tail)
      : base(tail)
    {
      this.fieldNumber = fieldNumber;
      this.wireType = wireType;
      this.strict = strict;
    }

    public override bool RequiresOldValue => this.Tail.RequiresOldValue;

    public override bool ReturnsValue => this.Tail.ReturnsValue;

    private bool NeedsHint => (this.wireType & ~(WireType.StartGroup | WireType.EndGroup)) != 0;

    public override object Read(object value, ProtoReader source)
    {
      if (this.strict)
        source.Assert(this.wireType);
      else if (this.NeedsHint)
        source.Hint(this.wireType);
      return this.Tail.Read(value, source);
    }

    public override void Write(object value, ProtoWriter dest)
    {
      ProtoWriter.WriteFieldHeader(this.fieldNumber, this.wireType, dest);
      this.Tail.Write(value, dest);
    }
  }
}
