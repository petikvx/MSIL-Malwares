// Decompiled with JetBrains decompiler
// Type: Milky_System.My.MySettings
// Assembly: HostSecurityManagerOptions, Version=8.0.2.1, Culture=neutral, PublicKeyToken=null
// MVID: 8998D101-643A-45E5-99F2-56481F352480
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Backdoor.MSIL.Bladabindi.gen-8348236e6a8466764bb7efdd0601235fb542840bd0b51eee36f1730846b998b6.exe

using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading;

namespace Milky_System.My
{
  [EditorBrowsable(EditorBrowsableState.Advanced)]
  [GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.7.0.0")]
  [CompilerGenerated]
  internal sealed class MySettings : ApplicationSettingsBase
  {
    private static MySettings defaultInstance = (MySettings) SettingsBase.Synchronized((SettingsBase) new MySettings());
    private static bool addedHandler;
    private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());

    [EditorBrowsable(EditorBrowsableState.Advanced)]
    [DebuggerNonUserCode]
    private static void AutoSaveSettings(object sender, EventArgs e)
    {
      bool mySettingsOnExit = MyProject.Application.SaveMySettingsOnExit;
label_1:
      int num1 = -221829132;
      while (true)
      {
        uint num2;
        switch ((num2 = (uint) (num1 ^ -839122243)) % 6U)
        {
          case 0:
            goto label_1;
          case 1:
            int num3 = mySettingsOnExit ? 1536306380 : (num3 = 1772272173);
            num1 = num3 ^ (int) num2 * -1859554548;
            continue;
          case 2:
            num1 = (int) num2 * -828382475 ^ 600259937;
            continue;
          case 3:
            MySettingsProperty.Settings.Save();
            num1 = (int) num2 * 1119197081 ^ -586572701;
            continue;
          case 4:
            goto label_3;
          case 5:
            num1 = (int) num2 * 1436450139 ^ 718998644;
            continue;
          default:
            goto label_8;
        }
      }
label_3:
      return;
label_8:;
    }

    public static MySettings Default
    {
      get
      {
        bool flag1 = !MySettings.addedHandler;
label_1:
        int num1 = 1294346770;
        object handlerLockObject;
        while (true)
        {
          uint num2;
          switch ((num2 = (uint) (num1 ^ 834066322)) % 5U)
          {
            case 0:
              goto label_1;
            case 1:
              ObjectFlowControl.CheckForSyncLockOnValueType(handlerLockObject);
              num1 = (int) num2 * 13936719 ^ 69038040;
              continue;
            case 3:
              handlerLockObject = MySettings.addedHandlerLockObject;
              num1 = (int) num2 * -2079010280 ^ -1650433586;
              continue;
            case 4:
              if (flag1)
              {
                num1 = (int) num2 * -1642204209 ^ 1942051062;
                continue;
              }
              goto label_28;
            default:
              goto label_7;
          }
        }
label_7:
        bool lockTaken = false;
        try
        {
          Monitor.Enter(handlerLockObject, ref lockTaken);
label_9:
          int num3 = 211623110;
          bool flag2;
          while (true)
          {
            uint num4;
            switch ((num4 = (uint) (num3 ^ 834066322)) % 9U)
            {
              case 0:
                int num5 = !flag2 ? -1999621484 : (num5 = -290193919);
                num3 = num5 ^ (int) num4 * -157008833;
                continue;
              case 2:
                num3 = (int) num4 * 1589154096 ^ -1659092729;
                continue;
              case 3:
                MySettings.addedHandler = true;
                num3 = (int) num4 * 719586157 ^ 1969337234;
                continue;
              case 4:
                num3 = (int) num4 * 1327203059 ^ -208534553;
                continue;
              case 5:
                goto label_9;
              case 6:
                MyProject.Application.Shutdown += (ShutdownEventHandler) ((sender, e) =>
                {
                  bool mySettingsOnExit = MyProject.Application.SaveMySettingsOnExit;
label_1:
                  int num6 = -221829132;
                  while (true)
                  {
                    uint num7;
                    switch ((num7 = (uint) (num6 ^ -839122243)) % 6U)
                    {
                      case 0:
                        goto label_1;
                      case 1:
                        int num8 = mySettingsOnExit ? 1536306380 : (num8 = 1772272173);
                        num6 = num8 ^ (int) num7 * -1859554548;
                        continue;
                      case 2:
                        num6 = (int) num7 * -828382475 ^ 600259937;
                        continue;
                      case 3:
                        MySettingsProperty.Settings.Save();
                        num6 = (int) num7 * 1119197081 ^ -586572701;
                        continue;
                      case 4:
                        goto label_3;
                      case 5:
                        num6 = (int) num7 * 1436450139 ^ 718998644;
                        continue;
                      default:
                        goto label_8;
                    }
                  }
label_3:
                  return;
label_8:;
                });
                num3 = (int) num4 * -587970051 ^ -639384498;
                continue;
              case 7:
                flag2 = !MySettings.addedHandler;
                num3 = (int) num4 * -858466095 ^ 404947291;
                continue;
              case 8:
                num3 = 1823154339;
                continue;
              default:
                goto label_25;
            }
          }
        }
        finally
        {
          if (!lockTaken)
            goto label_23;
label_19:
          int num9 = 1221490278;
label_20:
          while (true)
          {
            uint num10;
            switch ((num10 = (uint) (num9 ^ 834066322)) % 5U)
            {
              case 0:
                num9 = (int) num10 * -2117931306 ^ -798125778;
                continue;
              case 1:
                Monitor.Exit(handlerLockObject);
                num9 = (int) num10 * -1899457388 ^ -1481372871;
                continue;
              case 3:
                goto label_19;
              case 4:
                goto label_23;
              default:
                goto label_24;
            }
          }
label_24:
label_23:
          num9 = 2145800970;
          goto label_20;
        }
label_25:
label_26:
        int num11 = 1606235545;
label_27:
        MySettings defaultInstance;
        while (true)
        {
          uint num12;
          switch ((num12 = (uint) (num11 ^ 834066322)) % 4U)
          {
            case 0:
              goto label_26;
            case 1:
              defaultInstance = MySettings.defaultInstance;
              num11 = (int) num12 * -1142951024 ^ 272627728;
              continue;
            case 3:
              goto label_28;
            default:
              goto label_30;
          }
        }
label_30:
        return defaultInstance;
label_28:
        num11 = 523357991;
        goto label_27;
      }
    }

    [ApplicationScopedSetting]
    [DefaultSettingValue("Data Source=146.230.177.46\\IST2;Initial Catalog=ist2gq;Persist Security Info=True;User ID=ist2gq;Password=n8032h")]
    [SpecialSetting(SpecialSetting.ConnectionString)]
    [DebuggerNonUserCode]
    public string ConnectionString => Conversions.ToString(this[\u003CModule\u003E.\u206C⁯‎⁬‎⁫‏⁯⁯‭‎⁯⁮​⁮‬‍⁬‌‎‌‮​⁯‎‪⁬⁮⁭⁮⁫⁯‎⁬‌‍⁯‎‌‮‮<string>(2535955545U)]);
  }
}
