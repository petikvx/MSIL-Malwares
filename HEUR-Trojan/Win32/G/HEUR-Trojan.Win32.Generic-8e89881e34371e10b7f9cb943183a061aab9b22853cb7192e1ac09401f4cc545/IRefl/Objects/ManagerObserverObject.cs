// Decompiled with JetBrains decompiler
// Type: IRefl.Objects.ManagerObserverObject
// Assembly: IRefl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: A29A65F6-B7ED-422C-83D4-B9EFD61E5F13
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-8e89881e34371e10b7f9cb943183a061aab9b22853cb7192e1ac09401f4cc545.exe

using IRefl.Collections;
using IRefl.Lists;
using ProjNet.Structs;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Runtime.CompilerServices;
using System.Threading;

namespace IRefl.Objects
{
  [Table(Name = "dbo.AuthorISBN")]
  public class ManagerObserverObject : INotifyPropertyChanging, INotifyPropertyChanged
  {
    private static PropertyChangingEventArgs candidateRegistry;
    private int _AuthorID;
    private string _ISBN;
    private EntityRef<IteratorThreadCollection> _Author;
    private EntityRef<ExceptionOrderList> _Title;

    [MethodImpl(MethodImplOptions.NoInlining)]
    public ManagerObserverObject()
    {
      int num = 3;
      if (true)
        goto label_3;
label_1:
      PageAdvisorStructBuilder.PrepareCreator();
      num = 4;
label_3:
      while (true)
      {
        switch (num)
        {
          case 0:
          case 3:
            goto label_1;
          case 1:
          case 4:
            // ISSUE: explicit constructor call
            base.\u002Ector();
            goto case 2;
          case 2:
            this._Author = new EntityRef<IteratorThreadCollection>();
            this._Title = new EntityRef<ExceptionOrderList>();
            num = 5;
            continue;
          case 5:
            goto label_6;
          default:
            num = 2;
            continue;
        }
      }
label_6:;
    }

    [Column(DbType = "Int NOT NULL", IsPrimaryKey = true, Storage = "_AuthorID")]
    public int AuthorID
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._AuthorID;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 4;
        if (true)
          goto label_3;
label_1:
        this._AuthorID = value;
        goto label_5;
label_2:
        int num2;
        num1 = num2;
label_3:
        bool flag;
        switch (num1)
        {
          case 0:
          case 4:
            flag = this._AuthorID != value;
            num2 = 3;
            goto label_2;
          case 1:
          case 3:
            goto label_6;
          case 2:
            goto label_1;
          case 5:
            break;
          case 6:
            return;
          default:
            num2 = 5;
            goto label_2;
        }
label_5:
        this.SendPropertyChanged(nameof (AuthorID));
        if (ManagerObserverObject.DefineModel())
        {
          num1 = 6;
          goto label_3;
        }
label_6:
        if (!flag)
          return;
        if (this._Author.HasLoadedOrAssignedValue)
          throw new ForeignKeyReferenceAlreadyHasValueException();
        this.SendPropertyChanging();
        num2 = 2;
        goto label_2;
      }
    }

    [Column(CanBeNull = false, DbType = "VarChar(20) NOT NULL", IsPrimaryKey = true, Storage = "_ISBN")]
    public string ISBN
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._ISBN;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 5;
        while (true)
        {
          int num2 = num1;
          bool flag;
          while (true)
          {
            switch (num2)
            {
              case 0:
                if (flag)
                {
                  if (true)
                  {
                    num2 = 4;
                    continue;
                  }
                  goto label_3;
                }
                else
                  goto label_13;
              case 1:
              case 3:
                goto label_10;
              case 2:
              case 4:
                goto label_3;
              case 5:
                flag = this._ISBN != value;
                if (ManagerObserverObject.DefineModel())
                {
                  num2 = 0;
                  continue;
                }
                goto label_10;
              case 6:
                goto label_11;
              default:
                goto label_8;
            }
          }
label_3:
          if (!this._Title.HasLoadedOrAssignedValue)
          {
            this.SendPropertyChanging();
            goto label_10;
          }
          else
            goto label_4;
label_8:
          num1 = 1;
          continue;
label_10:
          this._ISBN = value;
          this.SendPropertyChanged(nameof (ISBN));
          num1 = 6;
        }
label_13:
        return;
label_4:
        throw new ForeignKeyReferenceAlreadyHasValueException();
label_11:;
      }
    }

    [Association(IsForeignKey = true, Name = "Author_AuthorISBN", OtherKey = "AuthorID", Storage = "_Author", ThisKey = "AuthorID")]
    public IteratorThreadCollection Author
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Author.Entity;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 5;
        while (true)
        {
          int num2;
          IteratorThreadCollection entity;
          switch (num1)
          {
            case 0:
            case 1:
            case 4:
label_8:
              this.SendPropertyChanged(nameof (Author));
              num2 = 8;
              goto label_5;
            case 2:
            case 7:
              this.SendPropertyChanging();
              if (entity != null)
              {
                this._Author.Entity = (IteratorThreadCollection) null;
                if (ManagerObserverObject.DefineModel())
                {
                  num1 = 3;
                  continue;
                }
                goto label_15;
              }
              else
                break;
            case 3:
              entity.AuthorISBNs.Remove(this);
              break;
            case 5:
              entity = this._Author.Entity;
              int num3 = 6;
              num1 = ManagerObserverObject.ResetModel() ? num3 : num3;
              continue;
            case 6:
              if (entity != value || !this._Author.HasLoadedOrAssignedValue)
              {
                num2 = 7;
                goto label_5;
              }
              else
                goto label_10;
            case 8:
              goto label_15;
            default:
              num2 = 1;
              goto label_5;
          }
          this._Author.Entity = value;
          if (value == null)
          {
            this._AuthorID = 0;
            num2 = 0;
          }
          else
          {
            value.AuthorISBNs.Add(this);
            this._AuthorID = value.AuthorID;
            goto label_8;
          }
label_5:
          num1 = num2;
        }
label_10:
        return;
label_15:;
      }
    }

    [Association(IsForeignKey = true, Name = "Title_AuthorISBN", OtherKey = "ISBN", Storage = "_Title", ThisKey = "ISBN")]
    public ExceptionOrderList Title
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this._Title.Entity;
      [MethodImpl(MethodImplOptions.NoInlining)] set
      {
        int num1 = 6;
        if (true)
          goto label_5;
label_1:
label_2:
        this._Title.Entity = value;
        if (value != null)
        {
          value.AuthorISBNs.Add(this);
          this._ISBN = value.ISBN;
          goto label_8;
        }
        else
        {
          this._ISBN = (string) null;
          num1 = 0;
          goto label_5;
        }
label_4:
        int num2;
        num1 = num2;
label_5:
        ExceptionOrderList entity;
        while (true)
        {
          switch (num1)
          {
            case 0:
              goto label_7;
            case 1:
            case 7:
              goto label_14;
            case 2:
            case 4:
              goto label_8;
            case 3:
              this.SendPropertyChanging();
              if (entity != null)
              {
                this._Title.Entity = (ExceptionOrderList) null;
                entity.AuthorISBNs.Remove(this);
                num1 = 5;
                continue;
              }
              goto label_2;
            case 5:
              goto label_1;
            case 6:
              entity = this._Title.Entity;
              int num3 = 7;
              num1 = ManagerObserverObject.ResetModel() ? num3 : num3;
              continue;
            case 8:
              goto label_16;
            default:
              if (true)
              {
                num1 = 2;
                continue;
              }
              goto label_7;
          }
        }
label_7:
        goto label_8;
label_14:
        if (entity == value && this._Title.HasLoadedOrAssignedValue)
          return;
        num2 = 3;
        goto label_4;
label_16:
        return;
label_8:
        this.SendPropertyChanged(nameof (Title));
        num2 = 8;
        goto label_4;
      }
    }

    public event PropertyChangingEventHandler PropertyChanging
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 1;
        while (true)
        {
          int num2 = num1;
          while (true)
          {
            switch (num2)
            {
              case 0:
                goto label_2;
              case 1:
                goto label_1;
              case 2:
              case 4:
                goto label_5;
              case 3:
              case 5:
                goto label_3;
              case 6:
                goto label_10;
              default:
                if (true)
                {
                  num2 = 5;
                  continue;
                }
                goto label_9;
            }
          }
label_1:
          PropertyChangingEventHandler changingEventHandler1 = this.m_MapperRegistry;
          num1 = 0;
          continue;
label_2:
          PropertyChangingEventHandler comparand = changingEventHandler1;
          PropertyChangingEventHandler changingEventHandler2 = comparand + value;
          num1 = 4;
          continue;
label_3:
          if (changingEventHandler1 == comparand)
          {
            num1 = 6;
            continue;
          }
          goto label_2;
label_5:
          changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.m_MapperRegistry, changingEventHandler2, comparand);
          goto label_3;
        }
label_10:
        return;
label_9:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 5;
        while (true)
        {
          int num2 = num1;
          PropertyChangingEventHandler changingEventHandler1;
          PropertyChangingEventHandler comparand;
          PropertyChangingEventHandler changingEventHandler2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 5:
                changingEventHandler1 = this.m_MapperRegistry;
                if (ManagerObserverObject.DefineModel())
                {
                  num2 = 3;
                  continue;
                }
                goto label_9;
              case 1:
              case 2:
                changingEventHandler2 = comparand - value;
                goto case 4;
              case 3:
                goto label_1;
              case 4:
                changingEventHandler1 = Interlocked.CompareExchange<PropertyChangingEventHandler>(ref this.m_MapperRegistry, changingEventHandler2, comparand);
                if (changingEventHandler1 == comparand)
                {
                  if (true)
                  {
                    num2 = 6;
                    continue;
                  }
                  goto case 1;
                }
                else
                  goto label_1;
              case 6:
                goto label_11;
              default:
                if (ManagerObserverObject.DefineModel())
                {
                  num2 = 4;
                  continue;
                }
                goto case 0;
            }
          }
label_1:
          comparand = changingEventHandler1;
          num1 = 1;
        }
label_11:
        return;
label_9:;
      }
    }

    public event PropertyChangedEventHandler PropertyChanged
    {
      [MethodImpl(MethodImplOptions.NoInlining)] add
      {
        int num1 = 3;
        if (true)
          goto label_6;
label_1:
        PropertyChangedEventHandler changedEventHandler;
        PropertyChangedEventHandler comparand = changedEventHandler;
        num1 = 5;
label_6:
        while (true)
        {
          int num2;
          switch (num1)
          {
            case 0:
            case 3:
              changedEventHandler = this.m_ConsumerRegistry;
              num2 = 2;
              break;
            case 1:
            case 2:
              goto label_1;
            case 4:
              if (changedEventHandler == comparand)
              {
                num2 = 6;
                break;
              }
              goto label_1;
            case 5:
              changedEventHandler = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_ConsumerRegistry, comparand + value, comparand);
              goto case 4;
            case 6:
              goto label_9;
            default:
              num2 = 4;
              break;
          }
          num1 = num2;
        }
label_9:;
      }
      [MethodImpl(MethodImplOptions.NoInlining)] remove
      {
        int num1 = 1;
        while (true)
        {
          int num2 = num1;
          PropertyChangedEventHandler comparand;
          PropertyChangedEventHandler changedEventHandler1;
          PropertyChangedEventHandler changedEventHandler2;
          while (true)
          {
            switch (num2)
            {
              case 0:
              case 3:
                changedEventHandler2 = Interlocked.CompareExchange<PropertyChangedEventHandler>(ref this.m_ConsumerRegistry, changedEventHandler1, comparand);
                if (changedEventHandler2 == comparand)
                {
                  if (ManagerObserverObject.DefineModel())
                  {
                    num2 = 6;
                    continue;
                  }
                  goto label_9;
                }
                else
                  goto label_5;
              case 1:
                changedEventHandler2 = this.m_ConsumerRegistry;
                if (true)
                {
                  num2 = 4;
                  continue;
                }
                goto case 0;
              case 2:
              case 5:
                changedEventHandler1 = comparand - value;
                goto case 0;
              case 4:
                goto label_5;
              case 6:
                goto label_10;
              default:
                goto label_4;
            }
          }
label_4:
          num1 = 0;
          continue;
label_5:
          comparand = changedEventHandler2;
          num1 = 5;
        }
label_10:
        return;
label_9:;
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanging()
    {
      int num = 2;
      bool flag;
      while (true)
      {
        switch (num)
        {
          case 0:
          case 2:
            // ISSUE: reference to a compiler-generated field
            flag = this.m_MapperRegistry != null;
            num = 4;
            continue;
          case 1:
          case 4:
            if (!flag)
              goto label_3;
            else
              goto case 3;
          case 3:
            // ISSUE: reference to a compiler-generated field
            this.m_MapperRegistry((object) this, ManagerObserverObject.candidateRegistry);
            num = 5;
            continue;
          case 5:
            goto label_7;
          default:
            num = 3;
            continue;
        }
      }
label_3:
      return;
label_7:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    protected virtual void SendPropertyChanged(string setup)
    {
      int num1 = 3;
      while (true)
      {
        int num2 = num1;
        bool flag;
        while (true)
        {
          switch (num2)
          {
            case 0:
            case 3:
              // ISSUE: reference to a compiler-generated field
              flag = this.m_ConsumerRegistry != null;
              if (true)
              {
                num2 = 4;
                continue;
              }
              goto label_3;
            case 1:
            case 4:
              goto label_3;
            case 2:
              goto label_1;
            case 5:
              goto label_8;
            default:
              goto label_7;
          }
        }
label_1:
        // ISSUE: reference to a compiler-generated field
        this.m_ConsumerRegistry((object) this, new PropertyChangedEventArgs(setup));
        num1 = 5;
        continue;
label_3:
        if (!flag)
          break;
        goto label_1;
label_7:
        num1 = 2;
      }
      return;
label_8:;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    static ManagerObserverObject()
    {
      PageAdvisorStructBuilder.PrepareCreator();
      ManagerObserverObject.candidateRegistry = new PropertyChangingEventArgs(string.Empty);
    }

    internal static bool DefineModel() => true;

    internal static bool ResetModel() => false;
  }
}
