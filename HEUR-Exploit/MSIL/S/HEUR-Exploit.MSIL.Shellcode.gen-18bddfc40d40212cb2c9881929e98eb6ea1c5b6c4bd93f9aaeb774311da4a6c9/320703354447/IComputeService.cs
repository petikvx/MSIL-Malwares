// Decompiled with JetBrains decompiler
// Type: 320703354447.IComputeService
// Assembly: 308586033544, Version=1.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: CD78F8E3-E5F9-41CF-8142-5EDBF93F1FF3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-18bddfc40d40212cb2c9881929e98eb6ea1c5b6c4bd93f9aaeb774311da4a6c9.exe

using \u003006867011039;
using \u003080325772766;
using \u003094540266550;
using \u003144576042142;
using \u003419680912863;
using Microsoft.VisualStudio.WindowsAzure;
using Microsoft.VisualStudio.WindowsAzure.Authentication;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using System.Threading.Tasks;

namespace \u003320703354447
{
  [Guid("9C39F3DF-91CD-4388-B35C-96AAC1568A46")]
  internal interface IComputeService
  {
    void AddHostedServiceProvider(IHostedServiceProvider hostedServiceProvider);

    void RemoveHostedServiceProvider();

    [Obsolete]
    void RequestAddConnection(
      string accountName,
      string serviceName,
      string serviceLabel,
      string slotName);

    [Obsolete]
    bool RemoveConnection(
      string accountName,
      string serviceName,
      string serviceLabel,
      string slotName);

    bool GetConnections(
      out IList<IHostedService> hostedServices,
      out IList<Tuple<IAzureSubscriptionContext, Exception>> credentialsWithErrors);

    void BrowseToUrl(Uri url);

    void ShowErrorDetails(string message);

    void RefreshDisplayedConnections();

    [Obsolete("Use SelectDisplayedConnection3, This is kept here for 2.2 and earlier versions.")]
    void SelectDisplayedConnection(
      string accountName,
      string serviceName,
      string serviceLabel,
      string slotName);

    [Obsolete("Use SelectDisplayedConnection3, This is kept here for 2.2 and earlier versions.")]
    void SelectDisplayedConnection(
      IAzureSubscriptionIdentifier subscription,
      string serviceName,
      string serviceLabel,
      string slotName);

    void SelectDisplayedConnection3(
      string subscriptionId,
      string serviceName,
      string serviceLabel,
      string slotName);

    \u003223657576739 CreateHostedService2(string subscription = null);

    Tuple<\u003223657576739, \u003223657576739> CreateHostedServiceAndStorageAccount2(
      string subscription = null,
      bool ignoreStorageAccountCreationError = false);

    Task DeleteHostedServiceAsync(IHostedService service);

    Task DeleteDeploymentBySlotAsync(IDeploymentSlot slot);

    Task<Task> QueueDeploymentConfigurationOperation(
      IDeploymentSlot deployment,
      Func<Task> task);

    bool IsRoleExecutingDiagnosticsExtensionOperation(IRole role);

    void SetDiangnosticsOperationStatusOnRole(IRole role, bool inProgress);
  }
}
