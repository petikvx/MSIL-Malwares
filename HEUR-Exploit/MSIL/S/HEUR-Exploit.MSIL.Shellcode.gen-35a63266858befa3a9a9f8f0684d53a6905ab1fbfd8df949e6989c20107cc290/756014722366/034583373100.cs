// Decompiled with JetBrains decompiler
// Type: 756014722366.034583373100
// Assembly: 582573968022, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
// MVID: 22949299-4A50-46F6-851E-C2A296093D37
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Exploit.MSIL.Shellcode.gen-35a63266858befa3a9a9f8f0684d53a6905ab1fbfd8df949e6989c20107cc290.exe

using \u003550713291285;
using \u003816901792918;
using \u003885349723817;
using Microsoft.VisualStudio.TestPlatform.CrossPlatEngine.Helpers;
using Microsoft.VisualStudio.TestPlatform.ObjectModel;
using Microsoft.VisualStudio.TestPlatform.Utilities.Helpers;
using Microsoft.VisualStudio.TestPlatform.Utilities.Helpers.Interfaces;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Threading;

namespace \u003756014722366
{
  internal class \u003034583373100 : IProcessManager
  {
    private const string \u003009719036844 = "/port:{0}";
    private const string \u003845870421589 = "/parentprocessid:{0}";
    private const string \u003670328465877 = "/diag:{0};tracelevel={1}";
    private const int \u003807002686611 = 1000;
    private string \u003319468821226;
    private object \u003891976605401 = new object();
    private bool \u003947845988049;
    private bool \u003023965571111;
    private readonly bool \u003218885894439;
    private string \u003764034275991;
    private Process \u003235410786036;
    private ManualResetEvent \u003286692989992 = new ManualResetEvent(false);

    internal IFileHelper \u003858373360842 { get; set; }

    public event EventHandler \u003760272871831;

    public \u003034583373100(string vstestConsolePath)
    {
      this.\u003858373360842 = (IFileHelper) new FileHelper();
      if (!this.\u003858373360842.Exists(vstestConsolePath))
      {
        EqtTrace.Error("Invalid File Path: {0}", new object[1]
        {
          (object) vstestConsolePath
        });
        throw new Exception(string.Format((IFormatProvider) CultureInfo.CurrentCulture, \u003749496994964.\u003568004457532, new object[1]
        {
          (object) vstestConsolePath
        }));
      }
      this.\u003319468821226 = vstestConsolePath;
      this.\u003218885894439 = vstestConsolePath.EndsWith(".dll");
    }

    public \u003034583373100(string vstestConsolePath, string dotnetExePath)
      : this(vstestConsolePath)
    {
      this.\u003764034275991 = dotnetExePath;
    }

    public bool \u003209924574442()
    {
      lock (this.\u003891976605401)
        return this.\u003947845988049 && !this.\u003023965571111 && this.\u003235410786036 != null;
    }

    public void \u003403302036617(\u003487586627016 _param1)
    {
      ProcessStartInfo startInfo = new ProcessStartInfo(this.\u003585741761705(), string.Join(" ", this.\u003676475043771(_param1)))
      {
        UseShellExecute = false,
        CreateNoWindow = true,
        RedirectStandardOutput = true,
        RedirectStandardError = true
      };
      EqtTrace.Verbose("VsTestCommandLineWrapper: Process Start Info {0} {1}", new object[2]
      {
        (object) startInfo.FileName,
        (object) startInfo.Arguments
      });
      if (_param1.\u003663456235789 != null)
      {
        startInfo.EnvironmentVariables.Clear();
        foreach (KeyValuePair<string, string> keyValuePair in _param1.\u003663456235789)
        {
          if (keyValuePair.Key != null)
            startInfo.EnvironmentVariables.Add(keyValuePair.Key.ToString(), keyValuePair.Value?.ToString());
        }
      }
      this.\u003235410786036 = Process.Start(startInfo);
      lock (this.\u003891976605401)
      {
        this.\u003023965571111 = false;
        this.\u003947845988049 = true;
      }
      this.\u003235410786036.EnableRaisingEvents = true;
      this.\u003235410786036.Exited += new EventHandler(this.\u003898006316377);
      this.\u003235410786036.OutputDataReceived += new DataReceivedEventHandler(this.\u003418805819124);
      this.\u003235410786036.ErrorDataReceived += new DataReceivedEventHandler(this.\u003448039988044);
      this.\u003235410786036.BeginOutputReadLine();
      this.\u003235410786036.BeginErrorReadLine();
      this.\u003286692989992.Reset();
    }

    public void \u003714072089667()
    {
      if (this.\u003286692989992.WaitOne(1000) || !this.\u003209924574442())
        return;
      EqtTrace.Info(string.Format("034583373100.ShutDownProcess : Terminating vstest.console process after waiting for {0} milliseconds.", (object) 1000));
      this.\u003023965571111 = true;
      this.\u003235410786036.OutputDataReceived -= new DataReceivedEventHandler(this.\u003418805819124);
      this.\u003235410786036.ErrorDataReceived -= new DataReceivedEventHandler(this.\u003448039988044);
      this.\u003818374786415();
      this.\u003235410786036.Dispose();
      this.\u003235410786036 = (Process) null;
    }

    private void \u003818374786415()
    {
      try
      {
        if (this.\u003235410786036 == null || this.\u003235410786036.HasExited)
          return;
        this.\u003235410786036.Kill();
      }
      catch (InvalidOperationException ex)
      {
        EqtTrace.Info("VsTestCommandLineWrapper: Error While Terminating Process {0} ", new object[1]
        {
          (object) ex.Message
        });
      }
    }

    private void \u003898006316377(object _param1, EventArgs _param2)
    {
      lock (this.\u003891976605401)
      {
        this.\u003286692989992.Set();
        this.\u003023965571111 = true;
        // ISSUE: reference to a compiler-generated field
        EventHandler eventHandler = this.\u003750443077695;
        if (eventHandler == null)
          return;
        eventHandler(_param1, _param2);
      }
    }

    private void \u003448039988044(object _param1, DataReceivedEventArgs _param2)
    {
      if (_param2.Data == null)
        return;
      EqtTrace.Error(_param2.Data);
    }

    private void \u003418805819124(object _param1, DataReceivedEventArgs _param2)
    {
      if (_param2.Data == null)
        return;
      EqtTrace.Verbose(_param2.Data);
    }

    private string[] \u003676475043771(\u003487586627016 _param1)
    {
      List<string> stringList = new List<string>()
      {
        string.Format((IFormatProvider) CultureInfo.InvariantCulture, "/parentprocessid:{0}", new object[1]
        {
          (object) _param1.\u003056443432085
        }),
        string.Format((IFormatProvider) CultureInfo.InvariantCulture, "/port:{0}", new object[1]
        {
          (object) _param1.\u003087355123483
        })
      };
      if (!string.IsNullOrEmpty(_param1.\u003533474731570))
        stringList.Add(string.Format((IFormatProvider) CultureInfo.InvariantCulture, "/diag:{0};tracelevel={1}", new object[2]
        {
          (object) _param1.\u003533474731570,
          (object) _param1.\u003563575408926
        }));
      if (this.\u003218885894439)
        stringList.Insert(0, this.\u003319468821226);
      return stringList.ToArray();
    }

    private string \u003585741761705()
    {
      if (!this.\u003218885894439)
        return this.\u003319468821226;
      return !string.IsNullOrEmpty(this.\u003764034275991) ? this.\u003764034275991 : new DotnetHostHelper().GetDotnetPath();
    }
  }
}
