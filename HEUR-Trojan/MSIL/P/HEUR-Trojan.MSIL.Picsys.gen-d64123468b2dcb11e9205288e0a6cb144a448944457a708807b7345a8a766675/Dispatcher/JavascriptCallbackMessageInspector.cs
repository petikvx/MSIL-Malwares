// Decompiled with JetBrains decompiler
// Type: System.ServiceModel.Dispatcher.JavascriptCallbackMessageInspector
// Assembly: Microsoft.Transactions.Bridge, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 51116F84-6FE2-4BD6-A908-2C88E06F45BB
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.07\HEUR-Trojan.MSIL.Picsys.gen-d64123468b2dcb11e9205288e0a6cb144a448944457a708807b7345a8a766675.exe

using System.Diagnostics;
using System.Net;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Diagnostics;
using System.ServiceModel.Web;
using System.Web;

namespace System.ServiceModel.Dispatcher
{
  internal class JavascriptCallbackMessageInspector : IDispatchMessageInspector
  {
    internal static readonly string applicationJavaScriptMediaType = "application/x-javascript";

    public JavascriptCallbackMessageInspector(string callbackParameterName)
    {
      this.CallbackParameterName = callbackParameterName;
      if (!DiagnosticUtility.ShouldTraceInformation)
        return;
      // ISSUE: reference to a compiler-generated method
      TraceUtility.TraceEvent(TraceEventType.Information, 983095, SR2.GetString(SR2.TraceCodeJsonpCallbackNameSet, (object) callbackParameterName));
    }

    private string CallbackParameterName { get; set; }

    public object AfterReceiveRequest(
      ref Message request,
      IClientChannel channel,
      InstanceContext instanceContext)
    {
      if (HttpContext.Current != null && HttpContext.Current.User != null && HttpContext.Current.User.Identity != null && HttpContext.Current.User.Identity.IsAuthenticated)
        throw DiagnosticUtility.ExceptionUtility.ThrowHelperError((Exception) new NotSupportedException(SR2.CrossDomainJavascriptAuthNotSupported));
      return (object) null;
    }

    public void BeforeSendReply(ref Message reply, object correlationState)
    {
      JavascriptCallbackResponseMessageProperty property1 = (JavascriptCallbackResponseMessageProperty) null;
      WebBodyFormatMessageProperty property2;
      if (!reply.Properties.TryGetValue<WebBodyFormatMessageProperty>("WebBodyFormatMessageProperty", out property2) || property2 == null || property2.Format != WebContentFormat.Json)
        return;
      if (!reply.Properties.TryGetValue<JavascriptCallbackResponseMessageProperty>(JavascriptCallbackResponseMessageProperty.Name, out property1) || property1 == null)
      {
        property1 = WebHttpBehavior.TrySetupJavascriptCallback(this.CallbackParameterName);
        if (property1 != null)
          reply.Properties.Add(JavascriptCallbackResponseMessageProperty.Name, (object) property1);
      }
      HttpResponseMessageProperty property3;
      if (property1 == null || !reply.Properties.TryGetValue<HttpResponseMessageProperty>(HttpResponseMessageProperty.Name, out property3) || property3 == null)
        return;
      property3.Headers[System.Net.HttpResponseHeader.ContentType] = JavascriptCallbackMessageInspector.applicationJavaScriptMediaType;
      if (!property1.StatusCode.HasValue)
        property1.StatusCode = new HttpStatusCode?(property3.StatusCode);
      property3.StatusCode = HttpStatusCode.OK;
      if (!property3.SuppressEntityBody)
        return;
      property3.SuppressEntityBody = false;
      Message jsonResponse = WebOperationContext.Current.CreateJsonResponse<object>((object) null);
      jsonResponse.Properties.CopyProperties(reply.Properties);
      reply = jsonResponse;
    }
  }
}
