// Decompiled with JetBrains decompiler
// Type: ImageUtil
// Assembly: 0的, Version=2.159.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9D533F7C-4FE9-47C1-AE3D-12E223DC01C7
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.01-msil\HEUR-Trojan-Ransom.MSIL.Makop.gen-7b4b43d22be88ed3b2054ef7090ebb7b44ecc03dffa6c32e578002c9a12cbea8.exe

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;

public static class ImageUtil
{
  private const int bytesPerPixel = 4;

  public static Image Opacity(Image originalImage, double opacity)
  {
label_1:
    int num1 = -901402794;
    int num2;
    Bitmap bitmap;
    PixelFormat pixelFormat;
    BitmapData bitmapData;
    int num3;
    IntPtr num4;
    byte[] numArray;
    int length;
    Image image;
    while (true)
    {
      uint num5;
      switch ((num5 = (uint) (num1 ^ -746251229)) % 23U)
      {
        case 0:
          image = originalImage;
          num1 = (int) num5 * 2000378662 ^ 1728106830;
          continue;
        case 1:
          image = (Image) bitmap;
          num1 = (int) num5 * 172207837 ^ 1059355662;
          continue;
        case 2:
          ++num3;
          num1 = (int) num5 * 1081901591 ^ 282644232;
          continue;
        case 3:
          num1 = (int) num5 * -1664692492 ^ -1313428020;
          continue;
        case 4:
          num2 = 0;
          num1 = (int) num5 * -1837633108 ^ 1162700038;
          continue;
        case 5:
          num4 = ImageUtil.\u200B⁫‌‭⁭‮‫‭⁫⁬‫‌⁯⁬⁯⁬​‌‭⁬‬‍⁫​⁪‍⁭⁫⁯‎⁬‍⁯⁭‍‬⁮⁪⁬⁪‮(bitmapData);
          num1 = (int) num5 * 1486731534 ^ -465854391;
          continue;
        case 6:
          ++num3;
          num1 = (int) num5 * -1305465490 ^ -1591741509;
          continue;
        case 7:
          goto label_1;
        case 8:
          ++num3;
          num1 = (int) num5 * -1137933558 ^ 2036869677;
          continue;
        case 9:
          num2 += 4;
          num1 = -659176370;
          continue;
        case 10:
          num1 = (int) num5 * -589745959 ^ -1654402661;
          continue;
        case 11:
          int num6;
          num1 = num6 = numArray[num2 + 4 - 1] == (byte) 0 ? -871504 : (num6 = -1427873893);
          continue;
        case 12:
          numArray[num2 + num3] = (byte) ((double) numArray[num2 + num3] * opacity);
          num1 = (int) num5 * 48488316 ^ 241871032;
          continue;
        case 13:
          bitmap = (Bitmap) ImageUtil.\u206C‪‫‬⁪‮‮‫⁪‌‍‭⁪⁫‪⁭⁯‌⁪‍⁪‭‭‭​‏⁯‬⁪⁬‫‫⁬‮‍‪‌‌⁫‍‮(originalImage);
          pixelFormat = PixelFormat.Format32bppArgb;
          num1 = -59330961;
          continue;
        case 14:
          int num7;
          num1 = num7 = num2 >= numArray.Length ? -97121001 : (num7 = -52632098);
          continue;
        case 15:
          ImageUtil.\u206E‎⁫‍⁮⁯⁬‬⁪‌‎‫‏‎⁫⁫‪⁯⁯⁫‬‭‍‫⁯‭⁭‌⁯⁫⁭⁯‪⁪⁯‏​‎⁮⁪‮(numArray, 0, num4, length);
          num1 = (int) num5 * 95433063 ^ 20110938;
          continue;
        case 16:
          length = ImageUtil.\u206A​⁪⁫⁬⁫‏‭‪‪⁬​⁫​​⁮‫‎⁫‫⁪⁬‎‭‌‫‎‭⁮⁬⁫‪‪⁯‫​⁫‬⁯‌‮((Image) bitmap) * ImageUtil.\u202B⁬‫‎⁯‏‮⁭⁬‬‫‏‌‪‏⁪⁫‪‬​‌‏‫‌‎​⁮⁮‍‫⁫⁯‬⁭‪‬‌‎‍⁯‮((Image) bitmap) * 4;
          numArray = new byte[length];
          ImageUtil.\u206A⁬‍⁫⁯​⁭‍⁮‮‏⁪‭‮⁯‏⁫‍‎‌‍⁭‭⁮‫‮‮‮⁭⁮‫⁬⁬⁭​‏‮‍‌‮‮(num4, numArray, 0, length);
          num1 = (int) num5 * 965673853 ^ -1062337471;
          continue;
        case 17:
          num3 = 0;
          num1 = -1918078352;
          continue;
        case 18:
          Rectangle rectangle = new Rectangle(0, 0, ImageUtil.\u206A​⁪⁫⁬⁫‏‭‪‪⁬​⁫​​⁮‫‎⁫‫⁪⁬‎‭‌‫‎‭⁮⁬⁫‪‪⁯‫​⁫‬⁯‌‮((Image) bitmap), ImageUtil.\u202B⁬‫‎⁯‏‮⁭⁬‬‫‏‌‪‏⁪⁫‪‬​‌‏‫‌‎​⁮⁮‍‫⁫⁯‬⁭‪‬‌‎‍⁯‮((Image) bitmap));
          bitmapData = ImageUtil.\u200E⁯‪⁮⁫‬​‍⁪‏‫‮⁭⁮⁭‏‮‌‌⁭‮⁯‍⁪‎‭‮⁮⁫‌⁮‫⁭​‭⁪‮‪​‎‮(bitmap, rectangle, ImageLockMode.ReadWrite, pixelFormat);
          num1 = (int) num5 * 547267581 ^ -157241954;
          continue;
        case 19:
          ImageUtil.\u202B‍⁮‬‮‮‪⁪⁭‏‌‏‍​​‌⁬‪‍‮‫‮​‎⁮‎‬‪‫‪‏⁪​⁫⁭‮‮‭⁫‮(bitmap, bitmapData);
          num1 = (int) num5 * 921474724 ^ 1311383805;
          continue;
        case 21:
          int num8 = (ImageUtil.\u202D⁪⁪⁪⁪⁪‮‌‪‭⁭⁭‏​⁪⁪‪⁭‏‎‪‬‌⁬‮⁭⁬‬‌‎⁪‪‪‫‪‬‌⁬‮⁯‮(originalImage) & PixelFormat.Indexed) != PixelFormat.Indexed ? -614558564 : (num8 = -1151340470);
          num1 = num8 ^ (int) num5 * 1440025708;
          continue;
        case 22:
          num1 = (int) num5 * 1520946461 ^ -435481717;
          continue;
        default:
          goto label_24;
      }
    }
label_24:
    return image;
  }

  static PixelFormat \u202D⁪⁪⁪⁪⁪‮‌‪‭⁭⁭‏​⁪⁪‪⁭‏‎‪‬‌⁬‮⁭⁬‬‌‎⁪‪‪‫‪‬‌⁬‮⁯‮([In] Image obj0) => obj0.PixelFormat;

  static object \u206C‪‫‬⁪‮‮‫⁪‌‍‭⁪⁫‪⁭⁯‌⁪‍⁪‭‭‭​‏⁯‬⁪⁬‫‫⁬‮‍‪‌‌⁫‍‮([In] Image obj0) => obj0.Clone();

  static int \u206A​⁪⁫⁬⁫‏‭‪‪⁬​⁫​​⁮‫‎⁫‫⁪⁬‎‭‌‫‎‭⁮⁬⁫‪‪⁯‫​⁫‬⁯‌‮([In] Image obj0) => obj0.Width;

  static int \u202B⁬‫‎⁯‏‮⁭⁬‬‫‏‌‪‏⁪⁫‪‬​‌‏‫‌‎​⁮⁮‍‫⁫⁯‬⁭‪‬‌‎‍⁯‮([In] Image obj0) => obj0.Height;

  static BitmapData \u200E⁯‪⁮⁫‬​‍⁪‏‫‮⁭⁮⁭‏‮‌‌⁭‮⁯‍⁪‎‭‮⁮⁫‌⁮‫⁭​‭⁪‮‪​‎‮(
    [In] Bitmap obj0,
    [In] Rectangle obj1,
    [In] ImageLockMode obj2,
    [In] PixelFormat obj3)
  {
    return obj0.LockBits(obj1, obj2, obj3);
  }

  static IntPtr \u200B⁫‌‭⁭‮‫‭⁫⁬‫‌⁯⁬⁯⁬​‌‭⁬‬‍⁫​⁪‍⁭⁫⁯‎⁬‍⁯⁭‍‬⁮⁪⁬⁪‮([In] BitmapData obj0) => obj0.Scan0;

  static void \u206A⁬‍⁫⁯​⁭‍⁮‮‏⁪‭‮⁯‏⁫‍‎‌‍⁭‭⁮‫‮‮‮⁭⁮‫⁬⁬⁭​‏‮‍‌‮‮(
    [In] IntPtr obj0,
    [In] byte[] obj1,
    [In] int obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u206E‎⁫‍⁮⁯⁬‬⁪‌‎‫‏‎⁫⁫‪⁯⁯⁫‬‭‍‫⁯‭⁭‌⁯⁫⁭⁯‪⁪⁯‏​‎⁮⁪‮(
    [In] byte[] obj0,
    [In] int obj1,
    [In] IntPtr obj2,
    [In] int obj3)
  {
    Marshal.Copy(obj0, obj1, obj2, obj3);
  }

  static void \u202B‍⁮‬‮‮‪⁪⁭‏‌‏‍​​‌⁬‪‍‮‫‮​‎⁮‎‬‪‫‪‏⁪​⁫⁭‮‮‭⁫‮([In] Bitmap obj0, [In] BitmapData obj1) => obj0.UnlockBits(obj1);
}
