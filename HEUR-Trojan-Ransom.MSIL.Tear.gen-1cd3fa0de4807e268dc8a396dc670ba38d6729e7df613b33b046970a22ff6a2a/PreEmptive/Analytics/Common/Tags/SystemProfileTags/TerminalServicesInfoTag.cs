// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Tags.SystemProfileTags.TerminalServicesInfoTag
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.SystemProfileInfo;
using PreEmptive.Analytics.Common.Utilities;

namespace PreEmptive.Analytics.Common.Tags.SystemProfileTags
{
  public class TerminalServicesInfoTag : Tag
  {
    public override string TagName
    {
      get
      {
        int A_1 = 16;
        int num1 = -1887;
        int num2 = num1;
        num1 = -1887;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            if (false)
              ;
            if (true)
              ;
            return Utils.a("냃ꏅ뫇\uA7C9ꗋꃍ뇏뻑陸ꗕ뷗꣙ꫛ럝菟蟡韣", A_1);
          default:
            goto case 1;
        }
      }
    }

    public TerminalServicesInfo TerminalServices
    {
      get
      {
        int num1 = 1;
        if (num1 == 0)
          ;
        num1 = -8206;
        int num2 = num1;
        num1 = -8206;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            num1 = 0;
            if (num1 == 0)
              ;
            return this.h;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -26711;
        int num2 = num1;
        num1 = -26711;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.h = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public TerminalServicesInfoTag(TerminalServicesInfo info)
    {
      int A_1 = 4;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      if (info.Mode.HasValue)
        this.AddOptionalAttribute(Utils.a("햷햹\uD8BB\uDBBD", A_1), ((int) info.Mode.Value).ToString());
      this.AddOptionalAttribute<bool?>(Utils.a("\uDBB7햹튻킽ꖿꇁ냃꿅\uA7C7\uA4C9뿋\uE3CD뇏뻑룓맕꿗뿙룛", A_1), info.ConnectionsAllowed);
      this.AddOptionalAttribute(Utils.a("풷펹\uDFBB\uDBBD꺿뇁귃\uA8C5꿇\uE7C9ꋋ꿍뷏럑", A_1), info.Licensing);
      this.TerminalServices = info;
    }
  }
}
