// Decompiled with JetBrains decompiler
// Type: fLaSh.Dissembler.IconResource
// Assembly: Pass, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B2D05123-D1EE-4E11-B4EC-79932D637F25
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00100-msil\Trojan-Ransom.Win32.Blocker.ajjm-b001e2657b2764cdbd2d9790e4eb90ffd0dc35ed5746bdc109cf01610ec1d1c3.exe

using In2aXkPRwyNprNdGJT;
using System;
using System.ComponentModel;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace fLaSh.Dissembler
{
  public class IconResource : Resource
  {
    private Kernel32.GRPICONDIRENTRY Xm54e4jjfF;
    private IconImage xbE4Nt8CYV;

    public Kernel32.GRPICONDIRENTRY Header
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.Xm54e4jjfF;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.Xm54e4jjfF = value;
    }

    public IconImage Image
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.xbE4Nt8CYV;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.xbE4Nt8CYV = value;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IconResource(
      IntPtr hModule,
      IntPtr hResource,
      IntPtr type,
      IntPtr name,
      ushort wIDLanguage,
      int size)
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this.xbE4Nt8CYV = new IconImage();
      // ISSUE: explicit constructor call
      base.\u002Ector(hModule, hResource, type, name, wIDLanguage, size);
      IntPtr lpRes = Kernel32.LockResource(hResource);
      if (lpRes == IntPtr.Zero)
        throw new Win32Exception(Marshal.GetLastWin32Error());
      this.Read(hModule, lpRes);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public IconResource()
    {
      rbdjPoeaA1BgLlupgC.XYjXOJ9ztPdU4();
      this.xbE4Nt8CYV = new IconImage();
      // ISSUE: explicit constructor call
      base.\u002Ector();
    }

    public byte Width
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.Xm54e4jjfF.bWidth;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.Xm54e4jjfF.bWidth = value;
    }

    public byte Height
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.Xm54e4jjfF.bHeight;
      [MethodImpl(MethodImplOptions.NoInlining)] set => this.Xm54e4jjfF.bHeight = value;
    }

    public uint ImageSize
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get => this.Xm54e4jjfF.dwImageSize;
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override IntPtr Read(IntPtr hModule, IntPtr lpRes)
    {
      this.Xm54e4jjfF = (Kernel32.GRPICONDIRENTRY) Marshal.PtrToStructure(lpRes, typeof (Kernel32.GRPICONDIRENTRY));
      IntPtr resource = Kernel32.FindResource(hModule, (IntPtr) (int) this.Xm54e4jjfF.nID, (IntPtr) 3L);
      IntPtr num = !(resource == IntPtr.Zero) ? Kernel32.LoadResource(hModule, resource) : throw new Win32Exception(Marshal.GetLastWin32Error());
      IntPtr lpData = !(num == IntPtr.Zero) ? Kernel32.LockResource(num) : throw new Win32Exception(Marshal.GetLastWin32Error());
      if (lpData == IntPtr.Zero)
        throw new Win32Exception(Marshal.GetLastWin32Error());
      this.xbE4Nt8CYV.Read(lpData, (uint) Kernel32.SizeofResource(hModule, num));
      return new IntPtr(lpRes.ToInt32() + Marshal.SizeOf((object) this.Xm54e4jjfF));
    }

    public PixelFormat PixelFormat
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        switch (this.Xm54e4jjfF.wBitsPerPixel)
        {
          case 1:
            return PixelFormat.Format1bppIndexed;
          case 4:
            return PixelFormat.Format4bppIndexed;
          case 8:
            return PixelFormat.Format8bppIndexed;
          case 16:
            return PixelFormat.Format16bppRgb565;
          case 24:
            return PixelFormat.Format24bppRgb;
          case 32:
            return PixelFormat.Format32bppArgb;
          default:
            return PixelFormat.Undefined;
        }
      }
    }

    public string PixelFormatString
    {
      [MethodImpl(MethodImplOptions.NoInlining)] get
      {
        switch (this.PixelFormat)
        {
          case PixelFormat.Format24bppRgb:
            return "24-bit True Colors";
          case PixelFormat.Format32bppRgb:
          case PixelFormat.Format32bppArgb:
            return "32-bit Alpha Channel";
          case PixelFormat.Format1bppIndexed:
            return "1-bit B/W";
          case PixelFormat.Format4bppIndexed:
            return "4-bit 16 Colors";
          case PixelFormat.Format8bppIndexed:
            return "8-bit 256 Colors";
          default:
            return "Unknown";
        }
      }
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override string ToString() => string.Format("{0}x{1} {2}", (object) this.Width, (object) this.Height, (object) this.PixelFormatString);

    [MethodImpl(MethodImplOptions.NoInlining)]
    public override void Write(BinaryWriter w)
    {
      w.Write(this.Xm54e4jjfF.bWidth);
      w.Write(this.Xm54e4jjfF.bHeight);
      w.Write(this.Xm54e4jjfF.bColors);
      w.Write(this.Xm54e4jjfF.bReserved);
      w.Write(this.Xm54e4jjfF.wPlanes);
      w.Write(this.Xm54e4jjfF.wBitsPerPixel);
      w.Write(this.Xm54e4jjfF.dwImageSize);
      w.Write(this.Xm54e4jjfF.nID);
      ResourceUtil.PadToWORD(w);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    public void SaveIconTo(string filename) => Resource.SaveTo(filename, new IntPtr((int) this.Xm54e4jjfF.nID), new IntPtr(3L), this.Language, this.xbE4Nt8CYV.Data);
  }
}
