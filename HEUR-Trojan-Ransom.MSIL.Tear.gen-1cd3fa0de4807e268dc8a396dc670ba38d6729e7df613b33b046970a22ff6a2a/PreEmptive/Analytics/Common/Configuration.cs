// Decompiled with JetBrains decompiler
// Type: PreEmptive.Analytics.Common.Configuration
// Assembly: EncoderCSL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 8BC70EB6-E222-4E38-9ED5-32744A85C676
// Assembly location: C:\Users\Administrateur\Downloads\toto\HEUR-Trojan-Ransom.MSIL.Tear.gen-1cd3fa0de4807e268dc8a396dc670ba38d6729e7df613b33b046970a22ff6a2a.exe

using PreEmptive.Analytics.Common.Utilities;
using System;
using System.Collections.Generic;

namespace PreEmptive.Analytics.Common
{
  public class Configuration
  {
    public Guid CompanyID;
    public string CompanyName;
    public Guid ApplicationID;
    public string ApplicationType;
    public string ApplicationName;
    public string ApplicationVersion;
    public string InstanceID;
    public bool OptIn;
    public Guid DefaultSession;
    public Guid MessageGroup;
    internal IList<string> a;
    public string Endpoint;
    public bool UseSSL;
    public bool SupportOfflineStorage;
    public int MinimumFailureCount;
    public int MinimumTimeToLive;
    public bool Offline;
    public bool OmitPersonalInfo;
    public bool FullData;
    public int MaximumBatchSize;
    public IAttributeLimiter AttributeLimiter;

    public bool InstanceIdUserSet
    {
      get
      {
        int num1 = 30813;
        int num2 = num1;
        num1 = 30813;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return this.b;
          default:
            goto case 1;
        }
      }
      internal set
      {
        int num1 = -26536;
        int num2 = num1;
        num1 = -26536;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            this.b = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public string GeneratedUserName
    {
      get
      {
        int num1 = 30237;
        int num2 = num1;
        num1 = 30237;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.c;
          default:
            goto case 1;
        }
      }
      internal set
      {
        int num1 = 24609;
        int num2 = num1;
        num1 = 24609;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.c = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Configuration.ApplicationStopBehavior StopBehavior
    {
      get
      {
        int num1 = 27425;
        int num2 = num1;
        num1 = 27425;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            return this.d;
          default:
            goto case 1;
        }
      }
      private set
      {
        int num1 = -22097;
        int num2 = num1;
        num1 = -22097;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 0;
            if (num4 == 0)
              ;
            num4 = 1;
            if (num4 == 0)
              ;
            this.d = value;
            break;
          default:
            goto case 1;
        }
      }
    }

    public Configuration()
    {
      int A_1 = 6;
      this.OptIn = true;
      this.Endpoint = Utils.a("즹펻鎽뎿\uECC1귃\uA8C5껇ꗉ\uE3CB黍ꋏ럑釓믕꣗껙뗛\uA8DD藟쳡돣菥諧쓩뿫语苯蓱鷳闵鷷觹틻돽旿焁眃朅漇按戋植㼏弑焓攕欗笙笛眝丟䔡眣䌥娧尩䔫䴭唯搱ܳᠵ䬷䰹弻ᄽဿ㝁♃⩅ⅇ㥉\u244B", A_1);
      this.UseSSL = true;
      this.SupportOfflineStorage = true;
      this.MinimumFailureCount = 150;
      this.MinimumTimeToLive = 259200;
      this.FullData = true;
      this.MaximumBatchSize = 4190208;
      this.AttributeLimiter = EndpointAttributeLimits.Common;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.a(Guid.Empty, Guid.Empty);
    }

    public Configuration(Guid companyID, Guid applicationID)
    {
      int A_1 = 16;
      this.OptIn = true;
      this.Endpoint = Utils.a("럃꧅\uE5C7막\uE2CB\uA7CD뻏듑믓崙裗꣙맛鯝跟鋡郣迥黧迩싫맭闯郱\uDAF3ꗵ鷷裹諻韽揿朁眃⠅䔇漉缋納焏甑紓砕缗㔙儛笝匟儡䔣䄥䄧䐩䬫紭唯䀱䈳張嬷弹樻ഽ渿ㅁ㉃╅杇ᩉ㥋ⱍ㱏㭑❓㹕", A_1);
      this.UseSSL = true;
      this.SupportOfflineStorage = true;
      this.MinimumFailureCount = 150;
      this.MinimumTimeToLive = 259200;
      this.FullData = true;
      this.MaximumBatchSize = 4190208;
      this.AttributeLimiter = EndpointAttributeLimits.Common;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      this.a(companyID, applicationID);
    }

    public Configuration(string companyID, string applicationID)
    {
      int A_1 = 16;
      this.OptIn = true;
      this.Endpoint = Utils.a("럃꧅\uE5C7막\uE2CB\uA7CD뻏듑믓崙裗꣙맛鯝跟鋡郣迥黧迩싫맭闯郱\uDAF3ꗵ鷷裹諻韽揿朁眃⠅䔇漉缋納焏甑紓砕缗㔙儛笝匟儡䔣䄥䄧䐩䬫紭唯䀱䈳張嬷弹樻ഽ渿ㅁ㉃╅杇ᩉ㥋ⱍ㱏㭑❓㹕", A_1);
      this.UseSSL = true;
      this.SupportOfflineStorage = true;
      this.MinimumFailureCount = 150;
      this.MinimumTimeToLive = 259200;
      this.FullData = true;
      this.MaximumBatchSize = 4190208;
      this.AttributeLimiter = EndpointAttributeLimits.Common;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      Guid result1;
      Guid result2;
      if (!Guid.TryParse(companyID, out result1) || !Guid.TryParse(applicationID, out result2))
      {
        result1 = Guid.Empty;
        result2 = Guid.Empty;
      }
      this.a(result1, result2);
    }

    private void a(Guid A_0, Guid A_1)
    {
      int A_1_1 = 13;
      int num1 = 23166;
      int num2 = num1;
      num1 = 23166;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          if (false)
            ;
          if (true)
            ;
          this.CompanyID = A_0;
          this.ApplicationID = A_1;
          this.a = (IList<string>) new List<string>()
          {
            Utils.a("뗀럂꧄", A_1_1),
            Utils.a("귀ꋂ럄ꃆ곈\uE6CA\uA8CCꇎ\uA7D0뛒맔룖꧘뻚\uF0DC곞釠迢賤鏦鷨苪菬裮", A_1_1)
          };
          this.StopBehavior = new Configuration.ApplicationStopBehavior();
          break;
        default:
          goto case 1;
      }
    }

    public string GetFullEndpointURI()
    {
      int A_1 = 6;
      int num1 = 1;
      if (num1 == 0)
        ;
      num1 = -18649;
      int num2 = num1;
      num1 = -18649;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          num1 = 0;
          if (num1 == 0)
            ;
          return string.Format(Utils.a("솹費쎽謹\uEDC1\uEBC3뷅劉량", A_1), new object[2]
          {
            this.UseSSL ? (object) Utils.a("특좻쪽낿뇁", A_1) : (object) Utils.a("특좻쪽낿", A_1),
            (object) this.Endpoint
          });
        default:
          goto case 1;
      }
    }

    public Configuration Copy()
    {
      int num1 = -16357;
      int num2 = num1;
      num1 = -16357;
      int num3 = num1;
      switch (num2 == num3)
      {
        case true:
          int num4 = 1;
          if (num4 == 0)
            ;
          num4 = 0;
          if (num4 == 0)
            ;
          Configuration configuration = (Configuration) this.MemberwiseClone();
          configuration.StopBehavior = this.StopBehavior.Copy();
          return configuration;
        default:
          goto case 1;
      }
    }

    public class ApplicationStopBehavior
    {
      public int? StopTimeout;
      public int? NeededTimeForSavingAtStop;
      public int? SessionExtensionWindow;
      public bool? DefaultsToSynchronousStop;

      public Configuration.ApplicationStopBehavior Copy()
      {
        int num1 = 4642;
        int num2 = num1;
        num1 = 4642;
        int num3 = num1;
        switch (num2 == num3)
        {
          case true:
            int num4 = 1;
            if (num4 == 0)
              ;
            num4 = 0;
            if (num4 == 0)
              ;
            return (Configuration.ApplicationStopBehavior) this.MemberwiseClone();
          default:
            goto case 1;
        }
      }
    }
  }
}
