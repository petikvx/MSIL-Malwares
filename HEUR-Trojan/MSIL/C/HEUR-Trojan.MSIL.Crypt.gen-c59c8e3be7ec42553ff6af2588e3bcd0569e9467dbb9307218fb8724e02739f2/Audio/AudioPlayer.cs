// Decompiled with JetBrains decompiler
// Type: Cradiator.Audio.AudioPlayer
// Assembly: EvidenceTypeDescript, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: B50F5F07-D63E-4094-B80D-E78774C87D41
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\HEUR-Trojan.MSIL.Crypt.gen-c59c8e3be7ec42553ff6af2588e3bcd0569e9467dbb9307218fb8724e02739f2.exe

using Cradiator.Config;
using log4net;
using Ninject;
using System;
using System.IO;
using System.Media;
using System.Speech.Synthesis;

namespace Cradiator.Audio
{
  public class AudioPlayer : IAudioPlayer, IConfigObserver
  {
    private static readonly ILog _log = LogManager.GetLogger(typeof (AudioPlayer).Name);
    private readonly ISpeechSynthesizer _speechSynth;
    private readonly VoiceSelector _voiceSelector;
    private readonly string _wavFileFolder;
    private SoundPlayer _soundPlayer;
    private bool _playSounds;
    private bool _playSpeech;
    private string _speechVoiceName;

    [Inject]
    public AudioPlayer(
      ISpeechSynthesizer speechSynth,
      IConfigSettings configSettings,
      VoiceSelector voiceSelector,
      IAppLocation appLocation)
    {
      this._voiceSelector = voiceSelector;
      this._speechVoiceName = configSettings.SpeechVoiceName;
      this._playSounds = configSettings.PlaySounds;
      this._playSpeech = configSettings.PlaySpeech;
      this._wavFileFolder = Path.Combine(appLocation.DirectoryName, "sounds");
      this._speechSynth = speechSynth;
      this._speechSynth.Rate = -2;
      configSettings.AddObserver((IConfigObserver) this);
    }

    public AudioPlayer(string path)
    {
      this._wavFileFolder = path;
      this._playSounds = this._playSpeech = true;
    }

    public void Say(PromptBuilder promptBuilder)
    {
      if (!this._playSpeech)
        return;
      try
      {
        this._voiceSelector.SelectInstalledVoice(this._speechVoiceName);
        this._speechSynth.SpeakAsync(promptBuilder);
      }
      catch (Exception ex)
      {
        AudioPlayer._log.Error((object) "SpeechSynthesizer failed", ex);
      }
    }

    public void Play(string soundFileName)
    {
      if (!this._playSounds)
        return;
      string soundLocation = "";
      try
      {
        soundLocation = Path.Combine(this._wavFileFolder, soundFileName);
        this._soundPlayer = new SoundPlayer(soundLocation);
        this._soundPlayer.Play();
      }
      catch (Exception ex)
      {
        AudioPlayer._log.ErrorFormat("Failed to play sound file {0} {1}", (object) soundLocation, (object) ex);
      }
    }

    void IConfigObserver.ConfigUpdated(ConfigSettings newSettings)
    {
      this._playSounds = newSettings.PlaySounds;
      this._playSpeech = newSettings.PlaySpeech;
      this._speechVoiceName = newSettings.SpeechVoiceName;
    }
  }
}
