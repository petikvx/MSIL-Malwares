// Decompiled with JetBrains decompiler
// Type: #i.#h
// Assembly: SynMood, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: E74E0BE3-2156-4FD1-87D6-9C934F391488
// Assembly location: C:\Users\Administrateur\Downloads\Virusshare.00060-msil\Trojan-Ransom.Win32.Blocker.asay-91a905762db9f9c40fe89fad88d7cbf29ff032af.exe

using \u0023i;
using \u0023p;
using System;
using System.Collections;
using System.IO;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;

namespace \u0023i
{
  internal class \u0023h
  {
    private static readonly string \u00236D;
    private static readonly string \u00237D;
    private static readonly byte[] \u00238D;
    private static readonly Hashtable \u00239D;
    private static readonly bool \u0023aE;
    private static readonly int \u0023Mv;

    public static string \u0023g([In] int obj0)
    {
      int index1;
      int num1;
      int count;
      do
      {
        int num2 = obj0;
        int num3;
        while (true)
        {
          int mv = \u0023h.\u0023Mv;
          int num4 = num2 - mv;
          if (true)
            goto label_29;
label_2:
          while (\u0023h.\u0023aE)
          {
            string str1 = (string) \u0023h.\u00239D[(object) obj0];
            if (true)
              goto label_30;
label_4:
            string str2;
            if (str2 != null)
            {
              if (true)
                return str2;
              continue;
            }
            break;
label_30:
            str2 = str1;
            goto label_4;
          }
          if (true)
            goto label_31;
label_8:
          int num5 = obj0;
          if (true)
            goto label_32;
label_9:
          byte[] numArray = \u0023h.\u00238D;
          int index2 = index1;
          int num6 = index2 + 1;
          if (true)
            goto label_33;
label_10:
          int num7 = (int) numArray[index2];
          if (true)
            goto label_34;
label_11:
          num3 = num1 & 128;
          if (false)
          {
            num2 = num3;
            continue;
          }
          break;
label_34:
          num1 = num7;
          goto label_11;
label_33:
          index1 = num6;
          goto label_10;
label_32:
          index1 = num5;
          goto label_9;
label_31:
          goto label_8;
label_29:
          obj0 = num4;
          goto label_2;
        }
        if (num3 == 0)
        {
          count = num1;
          if (count != 0)
            goto label_23;
        }
        else
          goto label_16;
      }
      while (false);
      return string.Empty;
label_16:
      if ((num1 & 64) == 0)
      {
        int num8 = num1 & 63;
        if (true)
          num8 <<= 8;
        int num9 = (int) \u0023h.\u00238D[index1++];
        count = num8 + num9;
      }
      else
      {
        int num10 = (num1 & 31) << 24;
        byte[] numArray1 = \u0023h.\u00238D;
        int index3 = index1;
        int num11 = index3 + 1;
        int num12 = (int) numArray1[index3];
        if (true)
        {
          int num13 = num12 << 16;
          int num14 = num10 + num13;
          num12 = (int) \u0023h.\u00238D[num11++];
          num10 = num14;
        }
        int num15 = num12 << 8;
        int num16 = num10 + num15;
        byte[] numArray2 = \u0023h.\u00238D;
        int index4 = num11;
        index1 = index4 + 1;
        int num17 = (int) numArray2[index4];
        count = num16 + num17;
      }
label_23:
      try
      {
        byte[] bytes = Convert.FromBase64String(Encoding.UTF8.GetString(\u0023h.\u00238D, index1, count));
        string str = string.Intern(Encoding.UTF8.GetString(bytes, 0, bytes.Length));
        if (\u0023h.\u0023aE)
        {
          try
          {
            \u0023h.\u00239D.Add((object) obj0, (object) str);
          }
          catch
          {
          }
        }
        return str;
      }
      catch
      {
        return (string) null;
      }
    }

    static \u0023h()
    {
      if (true)
        \u0023h.\u00236D = "1";
      else
        goto label_3;
label_2:
      \u0023h.\u00237D = "244";
      \u0023h.\u00238D = (byte[]) null;
      \u0023h.\u00239D = (Hashtable) null;
      \u0023h.\u0023aE = false;
label_3:
      if (true)
      {
        \u0023h.\u0023Mv = 0;
        do
        {
          if (\u0023h.\u00236D == "1")
          {
            \u0023h.\u0023aE = true;
            \u0023h.\u00239D = new Hashtable();
          }
          \u0023h.\u0023Mv = Convert.ToInt32(\u0023h.\u00237D);
          Assembly executingAssembly = Assembly.GetExecutingAssembly();
          if (true)
            goto label_23;
label_8:
          Assembly assembly;
          Stream manifestResourceStream = assembly.GetManifestResourceStream("{2ae62d52-7f6c-4f82-ba80-1da6bf0b360b}");
          if (true)
            goto label_24;
label_9:
          Stream stream1;
          try
          {
            int int32 = Convert.ToInt32(stream1.Length);
            if (true)
              goto label_14;
label_10:
            int count;
            byte[] numArray = new byte[count];
            if (true)
              goto label_15;
label_11:
            byte[] buffer;
            stream1.Read(buffer, 0, count);
            \u0023h.\u00238D = \u0023u.\u0023t(buffer);
            if (true)
              goto label_16;
label_12:
            Stream stream2 = stream1;
            if (true)
            {
              stream2.Close();
              goto label_22;
            }
            else
              goto label_22;
label_16:
            buffer = (byte[]) null;
            goto label_12;
label_15:
            buffer = numArray;
            goto label_11;
label_14:
            count = int32;
            goto label_10;
          }
          finally
          {
            do
            {
              stream1?.Dispose();
            }
            while (false);
          }
label_22:
          continue;
label_24:
          stream1 = manifestResourceStream;
          goto label_9;
label_23:
          assembly = executingAssembly;
          goto label_8;
        }
        while (false);
      }
      else
        goto label_2;
    }
  }
}
