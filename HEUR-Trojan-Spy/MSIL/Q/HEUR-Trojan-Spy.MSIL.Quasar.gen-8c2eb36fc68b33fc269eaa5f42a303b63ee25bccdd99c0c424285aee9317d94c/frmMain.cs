// Decompiled with JetBrains decompiler
// Type: Mario_KS.frmMain
// Assembly: OnSerializingAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: F72B5184-77D9-4DBB-B29C-2F3B04C48CCD
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Spy.MSIL.Quasar.gen-8c2eb36fc68b33fc269eaa5f42a303b63ee25bccdd99c0c424285aee9317d94c.exe

using Mario_KS.My;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Drawing.Imaging;
using System.IO;
using System.IO.Compression;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
using System.Windows.Forms;

namespace Mario_KS
{
  [DesignerGenerated]
  public class frmMain : Form
  {
    private IContainer components;
    public int MovesCount;
    public List<Move> Moves;
    public int MoveIndex;
    public string StartDir;
    public List<HighscoreTable> Highscores;
    private double Rotation;

    public frmMain()
    {
      this.FormClosed += new FormClosedEventHandler(this.frmMain_FormClosed);
      this.MouseDown += new MouseEventHandler(this.GameBoard_MouseDown);
      this.Paint += new PaintEventHandler(this.GameBoard_Paint);
      this.Load += new EventHandler(this.frmMain_Load);
      this.Moves = new List<Move>();
      this.Highscores = new List<HighscoreTable>();
      this.InitializeComponent();
    }

    [DebuggerNonUserCode]
    protected override void Dispose(bool disposing)
    {
      if (disposing && this.components != null)
        this.components.Dispose();
      base.Dispose(disposing);
    }

    [DebuggerStepThrough]
    private void InitializeComponent()
    {
      this.components = (IContainer) new System.ComponentModel.Container();
      this.gameProgress = new ProgressBar();
      this.statusBar = new StatusStrip();
      this.lblScore = new ToolStripStatusLabel();
      this.lblLevel = new ToolStripStatusLabel();
      this.lblMoves = new ToolStripStatusLabel();
      this.mnuMain = new MenuStrip();
      this.mnuFile = new ToolStripMenuItem();
      this.mnuNewGame = new ToolStripMenuItem();
      this.mnuNormal = new ToolStripMenuItem();
      this.mnuTimed = new ToolStripMenuItem();
      this.mnuLoadGame = new ToolStripMenuItem();
      this.mnuSaveGame = new ToolStripMenuItem();
      this.mnuLine4 = new ToolStripSeparator();
      this.mnuSettings = new ToolStripMenuItem();
      this.mnuLine1 = new ToolStripSeparator();
      this.mnuHint = new ToolStripMenuItem();
      this.mnuLine2 = new ToolStripSeparator();
      this.mnuExit = new ToolStripMenuItem();
      this.mnuHighscore = new ToolStripMenuItem();
      this.mnuHelp = new ToolStripMenuItem();
      this.mnuHowTo = new ToolStripMenuItem();
      this.mnuLine3 = new ToolStripSeparator();
      this.mnuAbout = new ToolStripMenuItem();
      this.tmrDecrease = new System.Windows.Forms.Timer(this.components);
      this.dialogSave = new SaveFileDialog();
      this.dialogOpen = new OpenFileDialog();
      this.statusBar.SuspendLayout();
      this.mnuMain.SuspendLayout();
      this.SuspendLayout();
      this.gameProgress.Location = new Point(12, 368);
      this.gameProgress.Name = "gameProgress";
      this.gameProgress.Size = new Size(306, 20);
      this.gameProgress.Style = ProgressBarStyle.Continuous;
      this.gameProgress.TabIndex = 0;
      this.statusBar.Items.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.lblScore,
        (ToolStripItem) this.lblLevel,
        (ToolStripItem) this.lblMoves
      });
      this.statusBar.Location = new Point(0, 397);
      this.statusBar.Name = "statusBar";
      this.statusBar.Size = new Size(392, 22);
      this.statusBar.SizingGrip = false;
      this.statusBar.TabIndex = 1;
      this.statusBar.Text = "StatusStrip1";
      this.lblScore.BorderSides = ToolStripStatusLabelBorderSides.Right;
      this.lblScore.Name = "lblScore";
      this.lblScore.Size = new Size(125, 17);
      this.lblScore.Spring = true;
      this.lblScore.Text = "Score: 0";
      this.lblLevel.BorderSides = ToolStripStatusLabelBorderSides.Right;
      this.lblLevel.Name = "lblLevel";
      this.lblLevel.Size = new Size(125, 17);
      this.lblLevel.Spring = true;
      this.lblLevel.Text = "Level: 0";
      this.lblMoves.Name = "lblMoves";
      this.lblMoves.Size = new Size(125, 17);
      this.lblMoves.Spring = true;
      this.lblMoves.Text = "Valid moves: 0";
      this.mnuMain.Items.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.mnuFile,
        (ToolStripItem) this.mnuHelp
      });
      this.mnuMain.Location = new Point(0, 0);
      this.mnuMain.Name = "mnuMain";
      this.mnuMain.Size = new Size(392, 24);
      this.mnuMain.TabIndex = 2;
      this.mnuMain.Text = "MenuStrip1";
      this.mnuFile.DropDownItems.AddRange(new ToolStripItem[10]
      {
        (ToolStripItem) this.mnuNewGame,
        (ToolStripItem) this.mnuLoadGame,
        (ToolStripItem) this.mnuSaveGame,
        (ToolStripItem) this.mnuLine4,
        (ToolStripItem) this.mnuSettings,
        (ToolStripItem) this.mnuHighscore,
        (ToolStripItem) this.mnuLine1,
        (ToolStripItem) this.mnuHint,
        (ToolStripItem) this.mnuLine2,
        (ToolStripItem) this.mnuExit
      });
      this.mnuFile.Name = "mnuFile";
      this.mnuFile.Size = new Size(46, 20);
      this.mnuFile.Text = "&Game";
      this.mnuNewGame.DropDownItems.AddRange(new ToolStripItem[2]
      {
        (ToolStripItem) this.mnuNormal,
        (ToolStripItem) this.mnuTimed
      });
      this.mnuNewGame.Name = "mnuNewGame";
      this.mnuNewGame.ShortcutKeys = Keys.F2;
      this.mnuNewGame.Size = new Size(165, 22);
      this.mnuNewGame.Text = "&New game";
      this.mnuNormal.Name = "mnuNormal";
      this.mnuNormal.Size = new Size(107, 22);
      this.mnuNormal.Text = "&Normal";
      this.mnuTimed.Name = "mnuTimed";
      this.mnuTimed.Size = new Size(107, 22);
      this.mnuTimed.Text = "&Timed";
      this.mnuLoadGame.Name = "mnuLoadGame";
      this.mnuLoadGame.ShortcutKeys = Keys.L | Keys.Control;
      this.mnuLoadGame.Size = new Size(165, 22);
      this.mnuLoadGame.Text = "Load game";
      this.mnuSaveGame.Name = "mnuSaveGame";
      this.mnuSaveGame.ShortcutKeys = Keys.S | Keys.Control;
      this.mnuSaveGame.Size = new Size(165, 22);
      this.mnuSaveGame.Text = "Save game";
      this.mnuLine4.Name = "mnuLine4";
      this.mnuLine4.Size = new Size(162, 6);
      this.mnuSettings.Name = "mnuSettings";
      this.mnuSettings.Size = new Size(165, 22);
      this.mnuSettings.Text = "Settings";
      this.mnuLine1.Name = "mnuLine1";
      this.mnuLine1.Size = new Size(162, 6);
      this.mnuHint.Name = "mnuHint";
      this.mnuHint.ShortcutKeys = Keys.F3;
      this.mnuHint.Size = new Size(165, 22);
      this.mnuHint.Text = "Hint";
      this.mnuLine2.Name = "mnuLine2";
      this.mnuLine2.Size = new Size(162, 6);
      this.mnuExit.Name = "mnuExit";
      this.mnuExit.Size = new Size(165, 22);
      this.mnuExit.Text = "&Exit";
      this.mnuHighscore.Name = "mnuHighscore";
      this.mnuHighscore.Size = new Size(165, 22);
      this.mnuHighscore.Text = "Highscore";
      this.mnuHelp.DropDownItems.AddRange(new ToolStripItem[3]
      {
        (ToolStripItem) this.mnuHowTo,
        (ToolStripItem) this.mnuLine3,
        (ToolStripItem) this.mnuAbout
      });
      this.mnuHelp.Name = "mnuHelp";
      this.mnuHelp.Size = new Size(40, 20);
      this.mnuHelp.Text = "Help";
      this.mnuHowTo.Name = "mnuHowTo";
      this.mnuHowTo.Size = new Size(131, 22);
      this.mnuHowTo.Text = "How to play";
      this.mnuLine3.Name = "mnuLine3";
      this.mnuLine3.Size = new Size(128, 6);
      this.mnuAbout.Name = "mnuAbout";
      this.mnuAbout.Size = new Size(131, 22);
      this.mnuAbout.Text = "About";
      this.tmrDecrease.Interval = 2000;
      this.dialogSave.Filter = "Save-files (*.bws)|*.bws|All files (*.*)|*.*";
      this.dialogOpen.FileName = "OpenFileDialog1";
      this.dialogOpen.Filter = "Save-files (*.bws)|*.bws|All files (*.*)|*.*";
      this.AutoScaleDimensions = new SizeF(6f, 13f);
      this.AutoScaleMode = AutoScaleMode.Font;
      this.ClientSize = new Size(392, 419);
      this.Controls.Add((Control) this.statusBar);
      this.Controls.Add((Control) this.mnuMain);
      this.Controls.Add((Control) this.gameProgress);
      this.FormBorderStyle = FormBorderStyle.FixedSingle;
      this.MainMenuStrip = this.mnuMain;
      this.MaximizeBox = false;
      this.Name = nameof (frmMain);
      this.Text = "Bejeweled";
      this.statusBar.ResumeLayout(false);
      this.statusBar.PerformLayout();
      this.mnuMain.ResumeLayout(false);
      this.mnuMain.PerformLayout();
      this.ResumeLayout(false);
      this.PerformLayout();
    }

    [field: AccessedThroughProperty("gameProgress")]
    internal virtual ProgressBar gameProgress { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("statusBar")]
    internal virtual StatusStrip statusBar { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblScore")]
    internal virtual ToolStripStatusLabel lblScore { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("lblLevel")]
    internal virtual ToolStripStatusLabel lblLevel { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("mnuMain")]
    internal virtual MenuStrip mnuMain { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("mnuFile")]
    internal virtual ToolStripMenuItem mnuFile { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("mnuNewGame")]
    internal virtual ToolStripMenuItem mnuNewGame { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuNormal
    {
      get => this._mnuNormal;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuNormal_Click);
        ToolStripMenuItem mnuNormal1 = this._mnuNormal;
        if (mnuNormal1 != null)
          mnuNormal1.Click -= eventHandler;
        this._mnuNormal = value;
        ToolStripMenuItem mnuNormal2 = this._mnuNormal;
        if (mnuNormal2 == null)
          return;
        mnuNormal2.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem mnuTimed
    {
      get => this._mnuTimed;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuTimed_Click);
        ToolStripMenuItem mnuTimed1 = this._mnuTimed;
        if (mnuTimed1 != null)
          mnuTimed1.Click -= eventHandler;
        this._mnuTimed = value;
        ToolStripMenuItem mnuTimed2 = this._mnuTimed;
        if (mnuTimed2 == null)
          return;
        mnuTimed2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("mnuLine1")]
    internal virtual ToolStripSeparator mnuLine1 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuExit
    {
      get => this._mnuExit;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuExit_Click);
        ToolStripMenuItem mnuExit1 = this._mnuExit;
        if (mnuExit1 != null)
          mnuExit1.Click -= eventHandler;
        this._mnuExit = value;
        ToolStripMenuItem mnuExit2 = this._mnuExit;
        if (mnuExit2 == null)
          return;
        mnuExit2.Click += eventHandler;
      }
    }

    internal virtual System.Windows.Forms.Timer tmrDecrease
    {
      get => this._tmrDecrease;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.tmrDecrease_Tick);
        System.Windows.Forms.Timer tmrDecrease1 = this._tmrDecrease;
        if (tmrDecrease1 != null)
          tmrDecrease1.Tick -= eventHandler;
        this._tmrDecrease = value;
        System.Windows.Forms.Timer tmrDecrease2 = this._tmrDecrease;
        if (tmrDecrease2 == null)
          return;
        tmrDecrease2.Tick += eventHandler;
      }
    }

    [field: AccessedThroughProperty("lblMoves")]
    internal virtual ToolStripStatusLabel lblMoves { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuHint
    {
      get => this._mnuHint;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuHint_Click);
        ToolStripMenuItem mnuHint1 = this._mnuHint;
        if (mnuHint1 != null)
          mnuHint1.Click -= eventHandler;
        this._mnuHint = value;
        ToolStripMenuItem mnuHint2 = this._mnuHint;
        if (mnuHint2 == null)
          return;
        mnuHint2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("mnuLine2")]
    internal virtual ToolStripSeparator mnuLine2 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuSettings
    {
      get => this._mnuSettings;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuSettings_Click);
        ToolStripMenuItem mnuSettings1 = this._mnuSettings;
        if (mnuSettings1 != null)
          mnuSettings1.Click -= eventHandler;
        this._mnuSettings = value;
        ToolStripMenuItem mnuSettings2 = this._mnuSettings;
        if (mnuSettings2 == null)
          return;
        mnuSettings2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("mnuHelp")]
    internal virtual ToolStripMenuItem mnuHelp { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuHowTo
    {
      get => this._mnuHowTo;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuHowTo_Click);
        ToolStripMenuItem mnuHowTo1 = this._mnuHowTo;
        if (mnuHowTo1 != null)
          mnuHowTo1.Click -= eventHandler;
        this._mnuHowTo = value;
        ToolStripMenuItem mnuHowTo2 = this._mnuHowTo;
        if (mnuHowTo2 == null)
          return;
        mnuHowTo2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("mnuLine3")]
    internal virtual ToolStripSeparator mnuLine3 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuAbout
    {
      get => this._mnuAbout;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuAbout_Click);
        ToolStripMenuItem mnuAbout1 = this._mnuAbout;
        if (mnuAbout1 != null)
          mnuAbout1.Click -= eventHandler;
        this._mnuAbout = value;
        ToolStripMenuItem mnuAbout2 = this._mnuAbout;
        if (mnuAbout2 == null)
          return;
        mnuAbout2.Click += eventHandler;
      }
    }

    internal virtual ToolStripMenuItem mnuLoadGame
    {
      get => this._mnuLoadGame;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuLoadGame_Click);
        ToolStripMenuItem mnuLoadGame1 = this._mnuLoadGame;
        if (mnuLoadGame1 != null)
          mnuLoadGame1.Click -= eventHandler;
        this._mnuLoadGame = value;
        ToolStripMenuItem mnuLoadGame2 = this._mnuLoadGame;
        if (mnuLoadGame2 == null)
          return;
        mnuLoadGame2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("mnuLine4")]
    internal virtual ToolStripSeparator mnuLine4 { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuSaveGame
    {
      get => this._mnuSaveGame;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuSaveGame_Click);
        ToolStripMenuItem mnuSaveGame1 = this._mnuSaveGame;
        if (mnuSaveGame1 != null)
          mnuSaveGame1.Click -= eventHandler;
        this._mnuSaveGame = value;
        ToolStripMenuItem mnuSaveGame2 = this._mnuSaveGame;
        if (mnuSaveGame2 == null)
          return;
        mnuSaveGame2.Click += eventHandler;
      }
    }

    [field: AccessedThroughProperty("dialogSave")]
    internal virtual SaveFileDialog dialogSave { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    [field: AccessedThroughProperty("dialogOpen")]
    internal virtual OpenFileDialog dialogOpen { get; [MethodImpl(MethodImplOptions.Synchronized)] set; }

    internal virtual ToolStripMenuItem mnuHighscore
    {
      get => this._mnuHighscore;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        EventHandler eventHandler = new EventHandler(this.mnuHighscore_Click);
        ToolStripMenuItem mnuHighscore1 = this._mnuHighscore;
        if (mnuHighscore1 != null)
          mnuHighscore1.Click -= eventHandler;
        this._mnuHighscore = value;
        ToolStripMenuItem mnuHighscore2 = this._mnuHighscore;
        if (mnuHighscore2 == null)
          return;
        mnuHighscore2.Click += eventHandler;
      }
    }

    public virtual Game Game
    {
      get => this._Game;
      [MethodImpl(MethodImplOptions.Synchronized)] set
      {
        Game.BufferRedrawingEventHandler redrawingEventHandler = new Game.BufferRedrawingEventHandler(this.Game_BufferRedrawing);
        Game.GameCreatedEventHandler createdEventHandler = new Game.GameCreatedEventHandler(this.Game_GameCreated);
        Game.SequenceDestroyedEventHandler destroyedEventHandler = new Game.SequenceDestroyedEventHandler(this.Game_SequenceDestroyed);
        Game game1 = this._Game;
        if (game1 != null)
        {
          game1.BufferRedrawing -= redrawingEventHandler;
          game1.GameCreated -= createdEventHandler;
          game1.SequenceDestroyed -= destroyedEventHandler;
        }
        this._Game = value;
        Game game2 = this._Game;
        if (game2 == null)
          return;
        game2.BufferRedrawing += redrawingEventHandler;
        game2.GameCreated += createdEventHandler;
        game2.SequenceDestroyed += destroyedEventHandler;
      }
    }

    private void frmMain_FormClosed(object sender, FormClosedEventArgs e)
    {
      this.SaveHighscores(Path.Combine(this.StartDir, "Highscores.dat"));
      this.Game.Buffer.Dispose();
      this.Game.GraphicsObject = (Graphics) null;
      this.Game.Buffer = (Bitmap) null;
      this.Game.Sounds = (Collection) null;
      this.Game.Board.Pieces = (List<Piece>) null;
    }

    private void GameBoard_MouseDown(object sender, MouseEventArgs e)
    {
      if (e.Button == MouseButtons.Left && !this.Game.DisableInput)
      {
        this.Game.DisableInput = true;
        // ISSUE: variable of a reference type
        int& local;
        // ISSUE: explicit reference operation
        int num1 = checked (^(local = ref this.MovesCount) + 1);
        local = num1;
        PointF pointF = this.InvertPoint(new PointF((float) e.X, (float) e.Y));
        if (this.Game.ClickCell(this.Game.Board.HitCell(checked ((int) Math.Round((double) pointF.X)), checked ((int) Math.Round((double) pointF.Y)))))
        {
          this.Moves = this.Game.FindValidMoves();
          this.MoveIndex = 0;
          this.UpdateStatusbar();
          if (this.Moves.Count == 0)
          {
            int num2 = (int) MessageBox.Show("Game over. No more moves!", "Game over", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            this.CheckPoints();
            this.Game.Running = false;
            this.Game.Ignore(true);
            return;
          }
        }
        this.Game.DisableInput = false;
      }
    }

    private PointF InvertPoint(PointF Point)
    {
      Matrix transform = this.CreateTransform(this.Game.Buffer, -this.Rotation);
      PointF[] pts = new PointF[1]{ Point };
      transform.TransformPoints(pts);
      return pts[0];
    }

    private void GameBoard_Paint(object sender, PaintEventArgs e)
    {
      if (this.Game == null)
        return;
      e.Graphics.Transform = this.CreateTransform(this.Game.Buffer, this.Rotation);
      e.Graphics.DrawImage((Image) this.Game.Buffer, 0, 0);
    }

    private void Game_BufferRedrawing()
    {
      Graphics graphics = this.CreateGraphics();
      graphics.Transform = this.CreateTransform(this.Game.Buffer, this.Rotation);
      graphics.DrawImage((Image) this.Game.Buffer, 0, 0);
      Application.DoEvents();
    }

    private Matrix CreateTransform(Bitmap Buffer, double Rotation)
    {
      Matrix transform = new Matrix();
      transform.RotateAt((float) Rotation, (PointF) new Point(checked ((int) Math.Round(unchecked ((double) Buffer.Width / 2.0))), checked ((int) Math.Round(unchecked ((double) Buffer.Height / 2.0)))));
      return transform;
    }

    private void CheckPoints()
    {
      HighscoreTable highscore = this.Highscores[(int) this.Game.Mode];
      string Name;
      if (!highscore.IsHighscore((double) this.Game.Level) || Name.Length == 0)
        return;
      highscore.AddEntry(new Entry(Name, (double) this.Game.Level));
    }

    private void frmMain_Load(object sender, EventArgs e)
    {
      this.StartDir = Path.GetDirectoryName(Application.ExecutablePath);
      this.LoadHighscores(Path.Combine(this.StartDir, "Highscores.dat"));
      this.dialogSave.InitialDirectory = this.StartDir;
      this.dialogOpen.InitialDirectory = this.StartDir;
      this.Game = new Game();
      this.NewGame();
    }

    private void NewGame()
    {
      Game game = this.Game;
      this.ResizeBuffer(this.Game);
      this.ResizeControls();
      game.RedrawBoard();
    }

    private void ResizeBuffer(Game oGame)
    {
      Game game = oGame;
      game.Buffer = new Bitmap(checked (game.Board.Size.Width + game.Board.Location.X), checked (game.Board.Size.Height + game.Board.Location.Y), this.CreateGraphics());
      game.GraphicsObject = Graphics.FromImage((Image) game.Buffer);
    }

    public void UpdateProgress(int Level, int Value = 0)
    {
    }

    public void ResizeControls()
    {
      this.Width = checked (this.Game.Buffer.Width + 9);
      this.Height = checked (this.Game.Buffer.Height + this.gameProgress.Size.Height + 48);
      this.gameProgress.Top = checked (this.Game.Buffer.Height - 18);
      this.gameProgress.Width = checked (this.Game.Buffer.Width - 18);
    }

    public void NextLevel()
    {
      this.MovesCount = 0;
      List<Cell> Cells = this.Game.Board.Range();
      this.Game.AnimateDestruction(Cells, this.Game.SpeedDestruction);
      Thread.Sleep(50);
      this.Game.Board.RandomizeCells();
      this.Game.Ignore(true);
      this.Game.TestBoard(3);
      this.Game.UndoIgnore();
      try
      {
        foreach (Cell cell in Cells)
          cell.Visible = true;
      }
      finally
      {
        List<Cell>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.Game.AnimateDestruction(Cells, this.Game.SpeedDestruction, true, true);
      this.Moves = this.Game.FindValidMoves();
      this.MoveIndex = 0;
      // ISSUE: variable of a reference type
      int& local1;
      // ISSUE: explicit reference operation
      int num1 = checked (^(local1 = ref this.Game.Level) + 1);
      local1 = num1;
      // ISSUE: variable of a reference type
      double& local2;
      // ISSUE: explicit reference operation
      double num2 = ^(local2 = ref this.Game.IntervalDecrease) * this.Game.IntervalMultiplicator;
      local2 = num2;
      this.UpdateProgress(this.Game.Level);
    }

    private void UpdateStatusbar()
    {
      this.lblScore.Text = "Score: " + Conversions.ToString(this.gameProgress.Value) + " \\ " + Conversions.ToString(this.gameProgress.Maximum);
      this.lblLevel.Text = "Level: " + Conversions.ToString(this.Game.Level);
      this.lblMoves.Text = "Valid moves: " + Conversions.ToString(this.Moves.Count);
    }

    private void Game_GameCreated()
    {
      this.Game.DisableInput = false;
      this.MovesCount = 0;
      Game game = this.Game;
      do
      {
        this.Moves = this.Game.FindValidMoves();
        this.UpdateProgress(game.Level);
      }
      while (this.Moves.Count == 0);
    }

    private void Game_SequenceDestroyed(int Bonus, ref bool Cancel)
    {
    }

    private void mnuExit_Click(object sender, EventArgs e) => this.Close();

    private void mnuNormal_Click(object sender, EventArgs e)
    {
      this.CheckPoints();
      this.tmrDecrease.Enabled = false;
      this.Game.Interval = 0;
      this.NewGame();
    }

    private void mnuTimed_Click(object sender, EventArgs e)
    {
      this.CheckPoints();
      this.tmrDecrease.Enabled = true;
      this.NewGame();
    }

    private void tmrDecrease_Tick(object sender, EventArgs e)
    {
      if (!this.Game.Running | this.MovesCount < 3)
        return;
      this.gameProgress.Increment(checked ((int) Math.Round(-this.Game.IntervalDecrease)));
      this.UpdateStatusbar();
      if (this.gameProgress.Value <= this.gameProgress.Minimum)
      {
        this.tmrDecrease.Enabled = false;
        this.Game.Running = false;
        this.Game.DisableInput = true;
        this.Game.Ignore(true);
        int num = (int) MessageBox.Show("The time ran out. Game over!", "Game over", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
      }
    }

    private void mnuHint_Click(object sender, EventArgs e)
    {
      if (this.Game.Board.SelectedCell != null)
      {
        this.Game.Board.SelectedCell.ImageAttributes.ClearGamma();
        this.Game.Board.DrawCell(this.Game.GraphicsObject, this.Game.Board.SelectedCell);
        this.Game.Board.SelectedCell = (Cell) null;
      }
      this.Game.ClickCell(this.Game.Board.get_Cells(this.Moves[this.MoveIndex].Source));
      // ISSUE: variable of a reference type
      int& local;
      // ISSUE: explicit reference operation
      int num = checked (^(local = ref this.MoveIndex) + 1);
      local = num;
      if (this.MoveIndex < this.Moves.Count)
        return;
      this.MoveIndex = 0;
    }

    private void mnuSettings_Click(object sender, EventArgs e)
    {
      int num = (int) new frmSettings().ShowDialog((IWin32Window) this);
    }

    private void mnuAbout_Click(object sender, EventArgs e)
    {
      int num = (int) MessageBox.Show("Made by Kristian S. Stangeland.", "About", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
    }

    private void mnuHowTo_Click(object sender, EventArgs e)
    {
    }

    private void SaveGame(string sFile)
    {
      FileStream fileStream = new FileStream(sFile, FileMode.Create);
      GZipStream gzipStream = new GZipStream((Stream) fileStream, CompressionMode.Compress);
      Game game1 = this.Game;
      if (Operators.CompareString(Path.GetExtension(sFile).ToLower(), ".bws", false) != 0)
        return;
      object[] objArray;
      bool[] flagArray;
      NewLateBinding.LateCall((object) new BinaryFormatter(), (System.Type) null, "Serialize", objArray = new object[2]
      {
        (object) gzipStream,
        (object) game1
      }, (string[]) null, (System.Type[]) null, flagArray = new bool[2]
      {
        true,
        true
      }, true);
      if (flagArray[0])
        gzipStream = (GZipStream) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[0]), typeof (GZipStream));
      if (flagArray[1])
      {
        Game game2 = (Game) Conversions.ChangeType(RuntimeHelpers.GetObjectValue(objArray[1]), typeof (Game));
      }
      gzipStream.Close();
      fileStream.Close();
    }

    private void LoadGame(string sFile)
    {
      Stream stream = (Stream) new FileStream(sFile, FileMode.Open);
      GZipStream gzipStream = new GZipStream(stream, CompressionMode.Decompress);
      if (Operators.CompareString(Path.GetExtension(sFile).ToLower(), ".bws", false) != 0)
        return;
      object obj = (object) new BinaryFormatter();
      gzipStream.Close();
      stream.Close();
      Game oGame;
      oGame.Board.Pieces = this.Game.Board.Pieces;
      oGame.Board.Picture = this.Game.Board.Picture;
      oGame.Sounds = this.Game.Sounds;
      try
      {
        foreach (Cell cell in oGame.Board.Cells)
        {
          cell.Parent = oGame.Board;
          cell.ImageAttributes = new ImageAttributes();
        }
      }
      finally
      {
        List<Cell>.Enumerator enumerator;
        enumerator.Dispose();
      }
      this.Moves = this.Game.FindValidMoves();
      this.MoveIndex = 0;
      this.ResizeBuffer(oGame);
      this.Game = oGame;
      oGame = (Game) null;
      this.ResizeControls();
      this.UpdateProgress(this.Game.Level, this.Game.Points);
      this.Game.RedrawBoard();
    }

    private void LoadHighscores(string Path)
    {
      BinaryFormatter binaryFormatter = new BinaryFormatter();
      this.Highscores.Clear();
      GZipStream serializationStream;
      if (File.Exists(Path))
      {
        try
        {
          serializationStream = new GZipStream((Stream) new FileStream(Path, FileMode.Open), CompressionMode.Decompress);
          this.Highscores = (List<HighscoreTable>) binaryFormatter.Deserialize((Stream) serializationStream);
        }
        catch (Exception ex)
        {
          ProjectData.SetProjectError(ex);
          int num = (int) MessageBox.Show("Error in loading highscores:\r\n" + ex.ToString(), "Error");
          ProjectData.ClearProjectError();
        }
        finally
        {
          serializationStream?.Close();
        }
      }
      if (this.Highscores.Count != 0)
        return;
      this.Highscores.Add(new HighscoreTable("Normal"));
      this.Highscores.Add(new HighscoreTable("TImed"));
    }

    private void SaveHighscores(string Path)
    {
      BinaryFormatter binaryFormatter = new BinaryFormatter();
      this.Highscores.Clear();
      if (File.Exists(Path))
        File.Delete(Path);
      GZipStream serializationStream;
      try
      {
        serializationStream = new GZipStream((Stream) new FileStream(Path, FileMode.Create), CompressionMode.Compress);
        binaryFormatter.Serialize((Stream) serializationStream, (object) this.Highscores);
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        int num = (int) MessageBox.Show("Error in saving highscores:\r\n" + ex.ToString(), "Error");
        ProjectData.ClearProjectError();
      }
      finally
      {
        serializationStream?.Close();
      }
    }

    private void mnuSaveGame_Click(object sender, EventArgs e)
    {
      if (this.dialogSave.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.SaveGame(this.dialogSave.FileName);
    }

    private void mnuLoadGame_Click(object sender, EventArgs e)
    {
      if (this.dialogOpen.ShowDialog((IWin32Window) this) != DialogResult.OK)
        return;
      this.LoadGame(this.dialogOpen.FileName);
    }

    private void mnuHighscore_Click(object sender, EventArgs e)
    {
      MyProject.Forms.frmHighscores.LoadHighscores(this.Highscores);
      MyProject.Forms.frmHighscores.Show();
    }
  }
}
