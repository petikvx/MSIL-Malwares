<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Msg_RegScriptGenerated" xml:space="preserve">
    <value>Registry script '{0}' generated successfully</value>
  </data>
  <data name="Err_ValueRequired" xml:space="preserve">
    <value>The /{0} option requires a value</value>
  </data>
  <data name="Msg_TypelibUnregistered" xml:space="preserve">
    <value>Type library '{0}' un-registered successfully</value>
  </data>
  <data name="Msg_TypesUnRegistered" xml:space="preserve">
    <value>Types un-registered successfully</value>
  </data>
  <data name="Msg_Usage_10" xml:space="preserve">
    <value>    /nologo              Prevents RegAsm from displaying logo</value>
  </data>
  <data name="Msg_Usage_11" xml:space="preserve">
    <value>    /silent              Silent mode. Prevents displaying of success messages</value>
  </data>
  <data name="Msg_Usage_12" xml:space="preserve">
    <value>    /verbose             Displays extra information</value>
  </data>
  <data name="Msg_Usage_13" xml:space="preserve">
    <value>    /? or /help          Display this usage message</value>
  </data>
  <data name="Msg_Usage_09" xml:space="preserve">
    <value>    /asmpath:Directory   Look for assembly references here</value>
  </data>
  <data name="Msg_Usage_08" xml:space="preserve">
    <value>    /registered          Only refer to already registered type libraries</value>
  </data>
  <data name="Msg_Usage_01" xml:space="preserve">
    <value>    /unregister          Unregister types</value>
  </data>
  <data name="Msg_Usage_00" xml:space="preserve">
    <value>Syntax: RegAsm AssemblyName [Options]
Options:</value>
  </data>
  <data name="Msg_Usage_03" xml:space="preserve">
    <value>                         and register it</value>
  </data>
  <data name="Msg_Usage_02" xml:space="preserve">
    <value>    /tlb[:FileName]      Export the assembly to the specified type library</value>
  </data>
  <data name="Msg_Usage_05" xml:space="preserve">
    <value>                         instead of registering the types. This option</value>
  </data>
  <data name="Msg_Usage_04" xml:space="preserve">
    <value>    /regfile[:FileName]  Generate a reg file with the specified name</value>
  </data>
  <data name="Msg_Usage_07" xml:space="preserve">
    <value>    /codebase            Set the code base in the registry</value>
  </data>
  <data name="Msg_Usage_06" xml:space="preserve">
    <value>                         cannot be used with the /u or /tlb options</value>
  </data>
  <data name="Err_CannotGenRegFileAndExpTlb" xml:space="preserve">
    <value>The /regfile option cannot be used with the /tlb option</value>
  </data>
  <data name="Msg_DisplayException" xml:space="preserve">
    <value>Exception[{0}] = {1}</value>
  </data>
  <data name="Err_NoValueRequired" xml:space="preserve">
    <value>The /{0} option does not require a value</value>
  </data>
  <data name="Err_InvalidOption" xml:space="preserve">
    <value>An invalid option has been specified</value>
  </data>
  <data name="Err_TypelibSaveFailed" xml:space="preserve">
    <value>An error occurred while saving the exported type library: </value>
  </data>
  <data name="Err_TypeLoadExceptions" xml:space="preserve">
    <value>The following exceptions were thrown while loading the types in the assembly:
</value>
  </data>
  <data name="Err_ErrorInUserDefFunc" xml:space="preserve">
    <value>An error occurred inside the user defined Register/Unregister functions: </value>
  </data>
  <data name="Err_TypelibRegisterFailed" xml:space="preserve">
    <value>An error occurred while registering the exported type library: </value>
  </data>
  <data name="Err_InputFileNotFound" xml:space="preserve">
    <value>Unable to locate input assembly '{0}' or one of its dependencies.</value>
  </data>
  <data name="Err_RegFileWouldOverwriteInput" xml:space="preserve">
    <value>Registry file would overwrite the input file</value>
  </data>
  <data name="Err_NoAsmCodeBase" xml:space="preserve">
    <value>The assembly '{0}' does not have a code base</value>
  </data>
  <data name="Msg_DisplayNestedException" xml:space="preserve">
    <value>Exception[{0}] ==&gt;&gt; {1}</value>
  </data>
  <data name="Msg_EmbeddedTypelibReg" xml:space="preserve">
    <value>Type library embedded in '{0}' loaded and registered successfully</value>
  </data>
  <data name="Err_TlbNameNotAllowedWithEmbedded" xml:space="preserve">
    <value>The name of the type library cannot be specified for assemblies containing embedded type libraries</value>
  </data>
  <data name="Wrn_ComUnRegFuncOnNonPublicType" xml:space="preserve">
    <value>Type '{0}' has a ComUnregisterFunction which will not be called since the type is not being registered</value>
  </data>
  <data name="Err_CannotCreateAppDomain" xml:space="preserve">
    <value>Error creating an app domain to perform the registration</value>
  </data>
  <data name="Err_UnknownOption" xml:space="preserve">
    <value>Unknown option: /{0}</value>
  </data>
  <data name="Wrn_NoTypesUnRegistered" xml:space="preserve">
    <value>No types were un-registered</value>
  </data>
  <data name="Err_NoInputFile" xml:space="preserve">
    <value>No input file has been specified</value>
  </data>
  <data name="Msg_NoRegScriptGenerated" xml:space="preserve">
    <value>No registry script will be produced since there are no types to register</value>
  </data>
  <data name="Err_RefAsmNotInAsmPath" xml:space="preserve">
    <value>The following referenced assembly could not be located in any of the locations specified via /asmpath: {0}</value>
  </data>
  <data name="Msg_RefAsmResolvedToAsm" xml:space="preserve">
    <value>Assembly reference '{0}' has been resolved to assembly '{1}' with the following code base: {2}</value>
  </data>
  <data name="Err_CannotCreateRemoteRegAsm" xml:space="preserve">
    <value>Unable to load the RemoteRegAsm type required to perform the registration</value>
  </data>
  <data name="Err_AmbigousOption" xml:space="preserve">
    <value>Ambiguous option: /{0}</value>
  </data>
  <data name="Err_AsmPathCanOnlyBeUsedWithRegFile" xml:space="preserve">
    <value>The /asmpath option is only supported when generating a reg file using the /regfile option</value>
  </data>
  <data name="Wrn_NoRegScriptGenerated" xml:space="preserve">
    <value>No registry script will be produced since there are no types to register</value>
  </data>
  <data name="Wrn_CodeBaseWithNoStrongName" xml:space="preserve">
    <value>Registering an unsigned assembly with /codebase can cause your assembly to interfere with other applications that may be installed on the same computer. The /codebase switch is intended to be used only with signed assemblies. Please give your assembly a strong name and re-register it.</value>
  </data>
  <data name="Err_CannotGenRegFileForUnregister" xml:space="preserve">
    <value>The /regfile option cannot be used with the /unregister option</value>
  </data>
  <data name="Err_UnregistrationFailed" xml:space="preserve">
    <value>An error occurred while un-registering the type library: </value>
  </data>
  <data name="Msg_NoTypesRegistered" xml:space="preserve">
    <value>No types were registered</value>
  </data>
  <data name="Msg_NoTypesUnRegistered" xml:space="preserve">
    <value>No types were un-registered</value>
  </data>
  <data name="Msg_TypesRegistered" xml:space="preserve">
    <value>Types registered successfully</value>
  </data>
  <data name="Err_CannotWriteToRegistry" xml:space="preserve">
    <value>An error occurred while writing the registration information to the registry. You must have administrative credentials to perform this task.  Contact your system administrator for assistance</value>
  </data>
  <data name="Wrn_ComTypelibNotUnregistered" xml:space="preserve">
    <value>Type library not un-registered since the assembly was imported from COM</value>
  </data>
  <data name="Wrn_ComRegFuncOnNonPublicType" xml:space="preserve">
    <value>Type '{0}' has a ComRegisterFunction which will not be called since the type is not being registered</value>
  </data>
  <data name="Err_InvalidAssembly" xml:space="preserve">
    <value>Failed to load '{0}' because it is not a valid .NET assembly</value>
  </data>
  <data name="Msg_Copyright" xml:space="preserve">
    <value>Microsoft (R) .NET Framework Assembly Registration Utility {0}
Copyright (C) Microsoft Corporation 1998-2004.  All rights reserved.
</value>
  </data>
  <data name="Wrn_NoTypesRegistered" xml:space="preserve">
    <value>No types were registered</value>
  </data>
  <data name="Msg_AssemblyExportedAndReg" xml:space="preserve">
    <value>Assembly exported to '{0}', and the type library was registered successfully</value>
  </data>
  <data name="Msg_AutoExpAndRegAssembly" xml:space="preserve">
    <value>Auto exporting '{0}' as '{1}'.</value>
  </data>
</root>