// Decompiled with JetBrains decompiler
// Type: Winter_Sports_Rental.Customer
// Assembly: CLRIPropertyValueImpl, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 890FDB68-4B7D-4035-A759-8056CF611D6F
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.05-msil\Trojan.MSIL.Crypt.hwnc-988ec5d9bc02691882a3180947ee76fabc3629413f79a2e4768b9adb58ba432c.exe

using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Runtime.CompilerServices;
using Winter_Sports_Rental.My;

namespace Winter_Sports_Rental
{
  public class Customer
  {
    private List<Equipment> selectedProducts;
    private bool hasLiability;
    private bool hasInsurance;
    private const double insurance_rate = 0.1;
    private const double tax_rate = 0.865;

    public double depositAmount { get; set; }

    public double price_equipment_rental { get; set; }

    public double price_insurance { get; set; }

    public double price_tax { get; set; }

    public Customer()
    {
      this.selectedProducts = new List<Equipment>();
      try
      {
        foreach (object selectedItem in MyProject.Forms.Main.lbProducts.SelectedItems)
          this.selectedProducts.Add(new Equipment(Strings.Trim(Conversions.ToString(((DataRow) NewLateBinding.LateGet(RuntimeHelpers.GetObjectValue(selectedItem), (System.Type) null, "Row", new object[0], (string[]) null, (System.Type[]) null, (bool[]) null))["ProductName"]))));
      }
      finally
      {
        IEnumerator enumerator;
        if (enumerator is IDisposable)
          (enumerator as IDisposable).Dispose();
      }
      this.depositAmount = Conversions.ToDouble(MyProject.Forms.Main.txtDeposit.Text);
      this.hasLiability = MyProject.Forms.Main.cboxWaiver.Checked;
      this.hasInsurance = MyProject.Forms.Main.cboxInsurance.Checked;
      this.price_equipment_rental = 0.0;
      this.price_insurance = 0.0;
      this.price_tax = 0.0;
    }

    public object calculate_total()
    {
      try
      {
        foreach (Equipment selectedProduct in this.selectedProducts)
          this.price_equipment_rental += selectedProduct.get_price();
      }
      finally
      {
        List<Equipment>.Enumerator enumerator;
        enumerator.Dispose();
      }
      if (this.hasInsurance)
        this.price_insurance = this.price_equipment_rental * 0.1;
      this.price_tax = Math.Abs(this.price_equipment_rental * 0.865 - this.price_equipment_rental);
      return (object) (this.price_equipment_rental + this.price_insurance + this.price_tax - this.depositAmount);
    }
  }
}
