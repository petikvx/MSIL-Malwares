// Decompiled with JetBrains decompiler
// Type: Dark_RAT.LoginSystem
// Assembly: Dark RAT, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3C824395-872F-43D5-A237-CC243F82B456
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2022.04\HEUR-HackTool.MSIL.Flooder.gen-66512a2c31adfe77fb66c2c824e55509ba2cce70d158e850f0e56e3dc664f420.exe

using Dark_RAT.My;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.IO;
using System.Management;
using System.Net;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace Dark_RAT
{
  [StandardModule]
  internal sealed class LoginSystem
  {
    private static iniAPI iniAPI = new iniAPI();

    public static object Login(string Username, string password, string LoginUrl)
    {
      DateTime now = DateTime.Now;
      object objectValue = RuntimeHelpers.GetObjectValue(LoginSystem.GetSource(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject((object) (LoginUrl + "?username=" + Username + "&password=" + Encryption.HashData(password) + "&hwid="), LoginSystem.HWID()), (object) "&time="), (object) now))));
      if (Conversions.ToBoolean(Operators.NotObject(Operators.CompareObjectEqual(objectValue, (object) Encryption.SHA1(Conversions.ToString(Operators.ConcatenateObject(LoginSystem.HWID(), (object) now))), false))))
      {
        int num = (int) MessageBox.Show(Conversions.ToString(objectValue), "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
        MyProject.Forms.LoginForm.loggedin = false;
        return (object) Encryption.RijndaelSimple.RijndaelEncrypt("Error", "DarkRAT HWID");
      }
      int num1 = (int) MessageBox.Show("Welcome " + Username, "Access Granted", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
      MyProject.Forms.LoginForm.loggedin = true;
      MyProject.Forms.program.Show();
      MyProject.Forms.LoginForm.Close();
      LoginSystem.iniAPI.setdetails(Username, password);
      return (object) Encryption.RijndaelSimple.RijndaelEncrypt("Success", "DarkRAT HWID");
    }

    public static object CheckSerial(string Serial, string URL)
    {
      URL = Conversions.ToString(Operators.ConcatenateObject((object) (URL + "?serial=" + Serial + "&hwid="), LoginSystem.HWID()));
      return (object) Conversions.ToString(LoginSystem.GetSource(URL));
    }

    public static object HWID()
    {
      string empty = string.Empty;
      ManagementObjectCollection instances = new ManagementClass("win32_processor").GetInstances();
      try
      {
        foreach (ManagementObject managementObject in instances)
        {
          if (Operators.CompareString(empty, "", false) == 0)
          {
            empty = managementObject.Properties["processorID"].Value.ToString();
            break;
          }
        }
      }
      finally
      {
        ManagementObjectCollection.ManagementObjectEnumerator objectEnumerator;
        objectEnumerator?.Dispose();
      }
      return (object) Encryption.getMD5Hash(Encryption.getMD5Hash(Encryption.getMD5Hash(empty + "Md5") + "Lock") + "DarkRAT");
    }

    public static object GetSource(string URL)
    {
      string str = "";
      object source;
      try
      {
        Stream stream = new WebClient().OpenRead(URL);
        StreamReader streamReader = new StreamReader(stream);
        str = streamReader.ReadToEnd();
        stream.Close();
        streamReader.Close();
        source = (object) str;
      }
      catch (Exception ex)
      {
        ProjectData.SetProjectError(ex);
        source = (object) str;
        ProjectData.ClearProjectError();
      }
      return source;
    }
  }
}
